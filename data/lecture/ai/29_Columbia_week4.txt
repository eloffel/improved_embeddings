arti   cial intelligence

adversarial search

ansaf salleb-aouissi

columbia university - fall 2014 w4701 section 2

outline

i - adversarial search
1. game playing
2. perfect play

    minimax algorithm
      -   pruning

ii - historical moment today

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

1

adversarial search

    adversarial search problems     game
    adversarial     there is an opponent we can   t control!
    game vs. search: optimal solution is not a sequence of actions
but a strategy (policy). if opponent does a, agent does b, else
if opponent does c, agent does d, etc.

    tedious and fragile if hard-coded (i.e.,

implemented with

rules).

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

2

adversarial search

solved games!

checkers: chinook ended 40-year-reign of human world cham-
pion marion tinsley in 1994. used an endgame database de   ning
perfect play for all positions involving 8 or fewer pieces on the
board, a total of 443,748,401,247 positions.
chess: deep blue defeated human world champion gary kas-
parov in a six- game match in 1997. deep blue searches 200
million positions per second, uses very sophisticated evaluation,
and undisclosed methods for extending some lines of search up to
40 ply.

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

3

adversarial search

humans ahead!

othello: human champions refuse to compete against computers,
who are too good.
go: human champions refuse to compete against computers, who
are too bad. in go, b >300!

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

4

games: hard topic

    games are interesting to ai because they are too hard to solve
    chess has a branching factor of 35, with 35100 nodes,     10154
    need to make some decision even when the optimal decision

is infeasible

embedded thinking or backward reasoning!

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

5

types of games

there are many di   erent games.

    two player vs. multiplayer

chess vs. risk

    zero-sum vs. general-sum

chess vs. an auction

    perfect information vs. incomplete information

chess vs. bridge

    deterministic vs. stochastic

chess vs. backgammon

we are interested in: deterministic games, fully observable
environments, zero-sum, where two agents act alternately.

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

6

types of games

there are many di   erent games.

    two player vs. multiplayer

chess vs. risk

    zero-sum vs. general-sum

chess vs. an auction

    perfect information vs. incomplete information

chess vs. bridge

    deterministic vs. stochastic

chess vs. backgammon

we are interested in: deterministic games, fully observable
environments, zero-sum, where two agents act alternately.

zero-sum? pure competition!

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

7

formalizaion
    s0: the initial state
    player(s): de   nes which player has the move in state s. usually

taking turns.

    actions(s): returns the set of legal moves in s
    transition function: s    a     s de   nes the result of a move
    terminal test: true when the game is over, false otherwise.

states where game ends are called terminal states

    utility(s,p): utility function or objective function for a game

that ends in terminal state s for player p.

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

8

game tree representation

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

9

adversarial search: mininax

    two players: max and min
    players alternate turns
    max moves    rst
    maximizes results
    min minimizes the result
    compute each node   s minimax value   s the best achievable util-

ity against an optimal adversary

    minimax value     best achievable payo    against best play

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

10

adversarial search: mininax
    find the optimal strategy for max:

    depth-   rst search of the game tree

    an optimal leaf node could appear at any depth of the tree

    minimax principle: compute the utility of being in a state
assuming both players play optimally from there until the
end of the game

    propagate minimax values up the tree once terminal nodes

are discovered

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

11

adversarial search: mininax

de   nition:

    if n is terminal node: value is utility(n)
    if n is max node: value is highest value of all successor node

values

    if n is min node: value is lowest value of all successor node

values

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

12

minimax example

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

13

the minimax algorithm

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

14

the minimax algorithm

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

15

the minimax algorithm

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

16

the minimax algorithm

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

17

properties of minimax
    optimal (opponent plays optimally) and complete (   nite tree)
    dfs time: o(bm)
    dfs space: o(bm)

    tic-tac-toe

        5 legal moves, total of 9 moves
    59 = 1, 953, 125
    9! = 362, 880 terminal nodes

    chess

    b     35 (average branching factor)
    d     100 (depth of game tree for typical game)
    bd     35100     10154 nodes

    go branching factor starts at 361 (19x19 board)

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

18

case of limited resources

    problem: in real games, we can   t search the leaves!
    solution: search to a certain depth (limited depth search)
    replace terminal utilities with an evaluation function for non-

terminal positions.

    more plies makes a big di   erence
    use iterative deepening.
    we can prune: eliminate large parts of the tree!

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

19

case of limited resources

which values are necessary?

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

20

          pruning

m inimax(root) = max(min(3, 12, 8), min(2, x, y), min(14, 5, 2))

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

21

          pruning

m inimax(root) = max(min(3, 12, 8), min(2, x, y), min(14, 5, 2))

= max(3, min(2, x, y), 2)

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

22

          pruning

m inimax(root) = max(min(3, 12, 8), min(2, x, y), min(14, 5, 2))

= max(3, min(2, x, y), 2)

= max(3, z, 2)

where z = min(2, x, y)     2

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

23

          pruning

m inimax(root) = max(min(3, 12, 8), min(2, x, y), min(14, 5, 2))

= max(3, min(2, x, y), 2)

= max(3, z, 2)

= 3

where z = min(2, x, y)     2

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

24

          pruning

m inimax(root) = max(min(3, 12, 8), min(2, x, y), min(14, 5, 2))

= max(3, min(2, x, y), 2)

= max(3, z, 2)

= 3

where z = min(2, x, y)     2

minimax decisions are independent of the values of x and y .

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

25

          pruning

    computing alpha-beta values

  : value is a lower-bound on the actual value of a max node,
maximum across seen children

  : value is an upper-bound on actual value of a min node,
minimum across seen children

    propagation:

update   ,    values by propagating upwards values of terminal
nodes
update   ,    values down to allow pruning

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

26

          pruning

if m is better than n for player, we will never get to n in play.no
need to explore consequences of actions for which    <   .

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

27

          pruning

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

28

          pruning

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

29

          pruning

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

30

          pruning

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

31

          pruning

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

32

          pruning

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

33

          pruning

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

34

move ordering

       it does matter as it a   ects the e   ectiveness of           pruning!
    example: we could not prune any successor of d because the
worst successors for min were generated    rst. if the third one
was generated    rst we would have pruned the two others!

    idea of ordering: examine    rst successors that are likely best.

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

35

move ordering
    for chess, try order: captures    rst, then threats, then forward

moves, backward moves.

    ideal ordering o(bm/2) solve tree twice as deep as minimax in

the same amount of time.

    how to    nd a good ordering? remember the best moves from

shallowest nodes, use domain knowledge.

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

36

real-time decisions
    mininmax: generates the entire game search space!
              algorithm: prune large chunks of the trees
    but           still has to go all the way to the leaves!
    impractical in real-time (moves has to be done in a reasonable

amounts of time)

    solution: bound the depth of search (cut o    search) and re-
place utiliy(s) with eval(s) an evaluation function to estimate
value of current board con   gurations

    eval(s) is a heuristic at state s

e.g., othello: white pieces - black pieces
e.g., chess: value of all white pieces value of all black pieces
turn non-terminal nodes into terminal leaves!

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

37

real-time decisions
    an ideal evaluation function would rank terminal states in the

same way as the true utility function; but must be fast

    typical to de   ne features, make the function a linear weighted

sum of the features

    use domain knowledge to craft the best and useful features.

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

38

real-time decisions

    how does it works?

    select useful features f1, . . . , fn e.g., chess: # pieces on

board, value of pieces (1 for pawn, 3 for bishop, etc.)

    weighted linear function:

eval(s) =

n(cid:88)

i=1

wifi(s)

    learn wi from the examples
    deep blue uses about 6,000 features!

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

39

stochastic games
    include a random element (e.g., throwing a dice)
    include chance nodes!
    backgammom: combines skills and luck

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

40

stochastic games

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

41

stochastic games

reading aima book: how does it work?

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

42

historical moment today

checkers is solved!

http://www.cs.ualberta.ca/~chinook/
   in 2007, we announced that the game had been solved: perfect
play by both sides leads to a draw.    jonathan schae   er.

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

43

historical moment today

note: this paper available on piazza. please read for next week.

other documents:

http://webdocs.cs.ualberta.ca/~chinook/news/media.html

http://www.nytimes.com/2007/07/19/science/19cnd-checkers.html?_r=1&

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

44

questions?

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

45

credit

    aima book chapters 5.
    russell   s slides.
    kathy mckeown   s lecture notes inspired some parts of this

lecture.

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

46

