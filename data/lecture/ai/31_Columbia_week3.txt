arti   cial intelligence

problem solving     search

(continued)

ansaf salleb-aouissi

columbia university - fall 2014 w4701 section 2

outline

i- uninformed search (recall)
1. search strategies
2. criteria

ii - informed search
1. greedy best-   rst search
2. id67
3. heuristics

iii - historical moment today

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

1

examples of search agents

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

2

tree search

    expand tree nodes, as few as possible
    maintain a fringe: plans still under consideration that may

lead to the goal

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

3

examples of search agents

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

4

examples of search agents

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

5

examples of search agents

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

6

search strategies

    a strategy is de   ned by picking the order of node expansion

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

7

search strategies

    a strategy is de   ned by picking the order of node expansion

    strategies are evaluated along the following dimensions:

completeness   does it always    nd a solution if one exists?
time complexity   number of nodes generated/expanded
space complexity   maximum number of nodes in memory
optimality   does it always    nd a least-cost solution?

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

8

search strategies

    a strategy is de   ned by picking the order of node expansion

    strategies are evaluated along the following dimensions:

completeness   does it always    nd a solution if one exists?
time complexity   number of nodes generated/expanded
space complexity   maximum number of nodes in memory
optimality   does it always    nd a least-cost solution?

    time and space complexity are measured in terms of

b   maximum branching factor of the search tree
d   depth of the least-cost solution
m   maximum depth of the state space (may be    )

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

9

uninformed search

use no domain knowledge!

strategies:

1. breadth-   rst search (bfs): expand shallowest node

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

10

uninformed search

use no domain knowledge!

strategies:

1. breadth-   rst search (bfs): expand shallowest node

2. depth-   rst search (dfs): expand deepest node

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

11

uninformed search

use no domain knowledge!

strategies:

1. breadth-   rst search (bfs): expand shallowest node

2. depth-   rst search (dfs): expand deepest node

3. depth-limited search (dls): depth    rst with depth limit

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

12

uninformed search

use no domain knowledge!

strategies:

1. breadth-   rst search (bfs): expand shallowest node

2. depth-   rst search (dfs): expand deepest node

3. depth-limited search (dls): depth    rst with depth limit

4. iterative-deepening search (ids): dls with increasing limit

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

13

uninformed search

use no domain knowledge!

strategies:

1. breadth-   rst search (bfs): expand shallowest node

2. depth-   rst search (dfs): expand deepest node

3. depth-limited search (dls): depth    rst with depth limit

4. iterative-deepening search (ids): dls with increasing limit

5. uniform-cost search (ucs): expand least cost node

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

14

breadth-   rst search (bfs)

bfs: expand shallowest    rst.

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

15

bfs

bfs criteria?

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

16

bfs

    complete yes (if b is    nite)

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

17

bfs

    complete yes (if b is    nite)
    time 1 + b + b2 + b3 + . . . + bd = o(bd)

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

18

bfs

    complete yes (if b is    nite)
    time 1 + b + b2 + b3 + . . . + bd = o(bd)
    space o(bd) (keeps every node in memory, the biggest prob-

lem)

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

19

bfs

    complete yes (if b is    nite)
    time 1 + b + b2 + b3 + . . . + bd = o(bd)
    space o(bd) (keeps every node in memory, the biggest prob-

lem)

    optimal yes (if cost = 1 per step); not optimal in general

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

20

bfs

    complete yes (if b is    nite)
    time 1 + b + b2 + b3 + . . . + bd = o(bd)
    space o(bd) (keeps every node in memory, the biggest prob-

lem)

    optimal yes (if cost = 1 per step); not optimal in general
    implementation: fringe: fifo

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

21

dfs

dfs: expand deepest    rst.

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

22

abcdefghijklmnoabcdefghijklmnoabcdefghijklmnoabcdefghijklmnoabcdefghijklmnoabcdefghijklmnoabcdefghijklmnoabcdefghijklmnoabcdefghijklmnodfs

dfs criteria?

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

23

dfs

    complete no: fails in in   nite-depth spaces, spaces with loops

modify to avoid repeated states along path
    complete in    nite spaces

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

24

dfs

    complete no: fails in in   nite-depth spaces, spaces with loops

modify to avoid repeated states along path
    complete in    nite spaces

    time o(bm): bad if m is much larger than d

but if solutions are dense, may be much faster than bfs

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

25

dfs

    complete no: fails in in   nite-depth spaces, spaces with loops

modify to avoid repeated states along path
    complete in    nite spaces

    time o(bm): bad if m is much larger than d

but if solutions are dense, may be much faster than bfs

    space o(bm) linear space!

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

26

dfs

    complete no: fails in in   nite-depth spaces, spaces with loops

modify to avoid repeated states along path
    complete in    nite spaces

    time o(bm): bad if m is much larger than d

but if solutions are dense, may be much faster than bfs

    space o(bm) linear space!
    optimal no

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

27

dfs

    complete no: fails in in   nite-depth spaces, spaces with loops

modify to avoid repeated states along path
    complete in    nite spaces

    time o(bm): bad if m is much larger than d

but if solutions are dense, may be much faster than bfs

    space o(bm) linear space!
    optimal no
    implementation: fringe: lifo

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

28

depth-limited search

    dfs with depth limit l (nodes at level l has no successors).
    select some limit in depth to explore with dfs
    iterative deepening: increasing the limit l

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

29

iterative deepening

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

30

uniform-cost search

    what happens if the arcs in search graph have weights (di   er-

ent cost attached)? how to leverage that?

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

31

uniform-cost search

    what happens if the arcs in search graph have weights (di   er-

ent cost attached)? how to leverage that?

    bfs will    nd the shortest path which may be costly.
    we want the cheapest not shallowest solution.

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

32

uniform-cost search

    what happens if the arcs in search graph have weights (di   er-

ent cost attached)? how to leverage that?

    bfs will    nd the shortest path which may be costly.
    we want the cheapest not shallowest solution.
    modify bfs: prioritize by cost not depth     expand node n

with the lowest path cost g(n)

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

33

uniform-cost search

    what happens if the arcs in search graph have weights (di   er-

ent cost attached)? how to leverage that?

    bfs will    nd the shortest path which may be costly.
    we want the cheapest not shallowest solution.
    modify bfs: prioritize by cost not depth     expand node n

with the lowest path cost g(n)

    equivalent to breadth-   rst if step costs all equal

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

34

uniform-cost search

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

35

uniform-cost search

    complete yes, if solution has a    nite cost.

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

36

uniform-cost search

    complete yes, if solution has a    nite cost.
    time

    suppose c   : cost of the optimal solution
    suppose  : bound on the cost
    c    is how deep the cheapest solution could be.
    # of nodes with g     cost of optimal solution, o(bc   / )

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

37

uniform-cost search

    complete yes, if solution has a    nite cost.
    time

    suppose c   : cost of the optimal solution
    suppose  : bound on the cost
    c    is how deep the cheapest solution could be.
    # of nodes with g     cost of optimal solution, o(bc   / )

    space # of nodes with g     cost of optimal solution, o(bc   / )

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

38

uniform-cost search

    complete yes, if solution has a    nite cost.
    time

    suppose c   : cost of the optimal solution
    suppose  : bound on the cost
    c    is how deep the cheapest solution could be.
    # of nodes with g     cost of optimal solution, o(bc   / )

    space # of nodes with g     cost of optimal solution, o(bc   / )
    optimal yes?

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

39

uniform-cost search

    complete yes, if solution has a    nite cost.
    time

    suppose c   : cost of the optimal solution
    suppose  : bound on the cost
    c    is how deep the cheapest solution could be.
    # of nodes with g     cost of optimal solution, o(bc   / )

    space # of nodes with g     cost of optimal solution, o(bc   / )
    optimal yes?
    implementation: fringe = queue ordered by path cost g(n),

lowest    rst

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

40

uninformed search

summary:

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

41

exercise

question: what path is returned but bfs, dfs and ucs?

credit: d. klein

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

42

exercise

credit: d. klein

question: what path is returned but bfs, dfs and ucs?
answer:
dfs: s     a     b     c     g
bfs: s     a     g
ucs: s     d     b     e     g

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

43

informed search

    are we getting close to the goal?
    use a heuristic function that estimates how close a state is to

the goal

    does not have to be perfect!

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

44

informed search

    are we getting close to the goal?
    use a heuristic function that estimates how close a state is to

the goal

    does not have to be perfect!

1. greedy best-   rst search

2. id67

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

45

informed search

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

46

heuristic!

bucharestgiurgiuurzicenihirsovaeforieneamtoradeazerindaradtimisoaralugojmehadiadobretacraiovasibiufagaraspitestirimnicu vilceavasluiiasistraight!line distanceto bucharest 0160242161771512413661931782533298019924438022623437498giurgiuurzicenihirsovaeforieneamtoradeazerindaradtimisoaralugojmehadiadobretacraiovasibiufagaraspitestivasluiiasirimnicu vilceabucharest71751181117075120151140998097101211138146859098142928786greedy search

    evaluation function h(n) (heuristic)
        estimate of cost from n to the closest goal
    example:
bucharest

hsld(n) = straight-line distance from n to

    greedy search expands the node that appears to be closest to

goal

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

47

greedy search example

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

48

greedy search example

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

49

greedy search example

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

50

greedy search example

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

51

greed search

criteria?

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

52

id67

    minimize the total estimated solution cost
    combines:

    g(n): cost to reach node n
    h(n): cost to get from n to the goal
    f (n) = g(n) + h(n)

f (n) is the estimated cost of the cheapest

solution through n

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

53

id67 example

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

54

id67 example

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

55

id67 example

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

56

id67 example

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

57

id67 example

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

58

id67 example

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

59

id67

criteria?

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

60

historical moment today

another in   uential    gure of ai...

    he coined the term arti   cial intelligence in 1955
    he invented lisp
    he invented timeshared computing
    he won the acm turing award, and was awarded the kyoto

prize
    etc.

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

61

historical moment today

paul mccarthy, 1927 - 2011

http://www.simonsfoundation.org/science_lives_video/john-mccarthy/

http://www.nasonline.org/publications/biographical-memoirs/memoir-pdfs/
mccarthy-john.pdf

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

62

questions?

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

63

credit

    aima book chapters 3.
    russell and norvig   s slides.

copyright c(cid:13)ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

64

