arti   cial intelligence

logical agents:

id118

ansaf salleb-aouissi

columbia university - fall 2014 w4701 section 2

outline

the following slides are from stuart russell.

copyright c ansaf salleb-aouissi: fall 2014 computer science w4701 section 2 artificial intelligence

1

logical agents

chapter 7

chapter 7

1

outline

    knowledge-based agents
    wumpus world
    logic in general   models and entailment
    propositional (boolean) logic
    equivalence, validity, satis   ability
    id136 rules and theorem proving

    forward chaining
    backward chaining
    resolution

chapter 7

2

knowledge bases

id136 engine

domain   independent algorithms

knowledge base

domain   specific content

knowledge base = set of sentences in a formal language

declarative approach to building an agent (or other system):

tell it what it needs to know

then it can ask itself what to do   answers should follow from the kb

agents can be viewed at the knowledge level

i.e., what they know, regardless of how implemented

or at the implementation level

i.e., data structures in kb and algorithms that manipulate them

chapter 7

3

a simple knowledge-based agent

function kb-agent( percept) returns an action

static: kb, a knowledge base

t, a counter, initially 0, indicating time

tell(kb, make-percept-sentence( percept, t))
action    ask(kb, make-action-query(t))
tell(kb, make-action-sentence(action, t))
t    t + 1
return action

the agent must be able to:

represent states, actions, etc.
incorporate new percepts
update internal representations of the world
deduce hidden properties of the world
deduce appropriate actions

chapter 7

4

wumpus world peas description

performance measure

gold +1000, death -1000
-1 per step, -10 for using the arrow

environment

squares adjacent to wumpus are smelly
squares adjacent to pit are breezy
glitter i    gold is in the same square
shooting kills wumpus if you are facing it
shooting uses up the only arrow
grabbing picks up gold if in same square
releasing drops the gold in same square

actuators left turn, right turn,

forward, grab, release, shoot

sensors breeze, glitter, smell

4

3

2

1

stench

breeze

breeze

stench

gold

pit

stench

breeze

pit

breeze

breeze

breeze

pit

start

1

2

3

4

chapter 7

5

wumpus world characterization

observable??

chapter 7

6

wumpus world characterization

observable?? no   only local perception

deterministic??

chapter 7

7

wumpus world characterization

observable?? no   only local perception

deterministic?? yes   outcomes exactly speci   ed

episodic??

chapter 7

8

wumpus world characterization

observable?? no   only local perception

deterministic?? yes   outcomes exactly speci   ed

episodic?? no   sequential at the level of actions

static??

chapter 7

9

wumpus world characterization

observable?? no   only local perception

deterministic?? yes   outcomes exactly speci   ed

episodic?? no   sequential at the level of actions

static?? yes   wumpus and pits do not move

discrete??

chapter 7

10

wumpus world characterization

observable?? no   only local perception

deterministic?? yes   outcomes exactly speci   ed

episodic?? no   sequential at the level of actions

static?? yes   wumpus and pits do not move

discrete?? yes

single-agent??

chapter 7

11

wumpus world characterization

observable?? no   only local perception

deterministic?? yes   outcomes exactly speci   ed

episodic?? no   sequential at the level of actions

static?? yes   wumpus and pits do not move

discrete?? yes

single-agent?? yes   wumpus is essentially a natural feature

chapter 7

12

exploring a wumpus world

ok

ok

ok

a

chapter 7

13

exploring a wumpus world

b

ok

a

a

ok

ok

chapter 7

14

exploring a wumpus world

p?

b

ok

p?

a

a

ok

ok

chapter 7

15

exploring a wumpus world

p?

b

ok

p?

a

ok

s

ok

a

a

chapter 7

16

exploring a wumpus world

p?

p

b

ok

a

p?
ok

ok

s

ok

a

a

w

chapter 7

17

exploring a wumpus world

p?

p

b

ok

a

p?
ok

a

ok

s

ok

a

a

w

chapter 7

18

exploring a wumpus world

p?

ok

p

b

ok

a

p?
ok

a

ok

ok

s

ok

a

a

w

chapter 7

19

exploring a wumpus world

p?

ok

p

b

ok

a

p?
ok

a

bgs

ok

a

ok

s

ok

a

a

w

chapter 7

20

other tight spots

p?

b

ok

a

p?

p?

ok

b

ok

a

a

p?

breeze in (1,2) and (2,1)
    no safe actions

assuming pits uniformly distributed,
(2,2) has pit w/ prob 0.86, vs. 0.31

s

a

smell in (1,1)

can use a strategy of coercion:

    cannot move
shoot straight ahead
wumpus was there     dead     safe
wumpus wasn   t there     safe

chapter 7

21

logic in general

logics are formal languages for representing information

such that conclusions can be drawn

syntax de   nes the sentences in the language

semantics de   ne the    meaning    of sentences;

i.e., de   ne truth of a sentence in a world

e.g., the language of arithmetic
x + 2     y is a sentence; x2 + y > is not a sentence
x + 2     y is true i    the number x + 2 is no less than the number y
x + 2     y is true in a world where x = 7, y = 1
x + 2     y is false in a world where x = 0, y = 6

chapter 7

22

entailment

entailment means that one thing follows from another:

kb |=   

knowledge base kb entails sentence   

if and only if

   is true in all worlds where kb is true

e.g., the kb containing    the giants won    and    the reds won   
entails    either the giants won or the reds won   

e.g., x + y = 4 entails 4 = x + y

entailment is a relationship between sentences (i.e., syntax)
that is based on semantics

note: brains process syntax (of some sort)

chapter 7

23

models

logicians typically think in terms of models, which are formally
structured worlds with respect to which truth can be evaluated

we say m is a model of a sentence    if    is true in m

m(  ) is the set of all models of   
then kb |=    if and only if m(kb)     m(  )
e.g. kb = giants won and reds won

   = giants won

m(    )

x

x

x

x

x

x

x

x

x

x

x

xx

x

x

x

x

x

x

x

x

x

x

x

x

x

x
x

x

x

m(kb)

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

chapter 7

24

entailment in the wumpus world

situation after detecting nothing in [1,1],
moving right, breeze in [2,1]

consider possible models for ?s
assuming only pits
3 boolean choices     8 possible models

?

?

b

a

a

?

chapter 7

25

wumpus models

2

1

breeze

pit

1

2

3

2

pit

1

breeze

1

2

3

2

1

pit

breeze

1

2

3

2

1

breeze

1

2

3

2

1

pit

breeze

pit

1

2

3

2

pit

pit

1

breeze

pit

1

2

3

2

pit

1

breeze

pit

1

2

3

2

pit

pit

1

breeze

1

2

3

chapter 7

26

wumpus models

2

1

breeze

pit

1

2

3

2

pit

1

breeze

1

2

3

kb

2

1

pit

breeze

1

2

3

2

1

pit

breeze

pit

1

2

3

2

pit

1

breeze

pit

1

2

3

2

pit

pit

1

breeze

1

2

3

2

1

breeze

1

2

3

2

pit

pit

1

breeze

pit

1

2

3

kb = wumpus-world rules + observations

chapter 7

27

wumpus models

2

1

breeze

pit

1

2

3

2

pit

1

breeze

1

2

3

1

kb

2

1

pit

breeze

1

2

3

2

1

pit

breeze

pit

1

2

3

2

pit

1

breeze

pit

1

2

3

2

pit

pit

1

breeze

1

2

3

2

1

breeze

1

2

3

2

pit

pit

1

breeze

pit

1

2

3

kb = wumpus-world rules + observations
  1 =    [1,2] is safe   , kb |=   1, proved by model checking

chapter 7

28

wumpus models

2

1

breeze

pit

1

2

3

2

pit

1

breeze

1

2

3

kb

2

1

pit

breeze

1

2

3

2

1

pit

breeze

pit

1

2

3

2

pit

1

breeze

pit

1

2

3

2

pit

pit

1

breeze

1

2

3

2

1

breeze

1

2

3

2

pit

pit

1

breeze

pit

1

2

3

kb = wumpus-world rules + observations

chapter 7

29

wumpus models

2

1

breeze

pit

1

2

3

2

pit

1

breeze

1

2

3

2

kb

2

1

pit

breeze

1

2

3

2

1

pit

breeze

pit

1

2

3

2

pit

1

breeze

pit

1

2

3

2

pit

pit

1

breeze

1

2

3

2

1

breeze

1

2

3

2

pit

pit

1

breeze

pit

1

2

3

kb = wumpus-world rules + observations
  2 =    [2,2] is safe   , kb   |=   2

chapter 7

30

id136

kb    i    = sentence    can be derived from kb by procedure i
consequences of kb are a haystack;    is a needle.
entailment = needle in haystack; id136 =    nding it

soundness: i is sound if

whenever kb    i   , it is also true that kb |=   

completeness: i is complete if

whenever kb |=   , it is also true that kb    i   

preview: we will de   ne a logic (   rst-order logic) which is expressive enough
to say almost anything of interest, and for which there exists a sound and
complete id136 procedure.

that is, the procedure will answer any question whose answer follows from
what is known by the kb.

chapter 7

31

id118: syntax

id118 is the simplest logic   illustrates basic ideas

the proposition symbols p1, p2 etc are sentences
if s is a sentence,   s is a sentence (negation)
if s1 and s2 are sentences, s1     s2 is a sentence (conjunction)
if s1 and s2 are sentences, s1     s2 is a sentence (disjunction)
if s1 and s2 are sentences, s1     s2 is a sentence (implication)
if s1 and s2 are sentences, s1     s2 is a sentence (biconditional)

chapter 7

32

id118: semantics

each model speci   es true/false for each proposition symbol

e.g. p1,2 p2,2 p3,1
true true false

(with these symbols, 8 possible models, can be enumerated automatically.)

rules for evaluating truth with respect to a model m:

s
s1
s1
s1
s1

is false
is true and
is true or
is false or
is true and

  s is true i   
is true i   
is true
is true i   
is true
is true i   
is true
is false i   
is false
is true i    s1     s2 is true and s2     s1 is true

s1     s2
s1     s2
s1     s2
i.e.,
s1     s2
simple recursive process evaluates an arbitrary sentence, e.g.,
  p1,2     (p2,2     p3,1) = true     (false     true) = true     true = true

s2
s2
s2
s2

chapter 7

33

truth tables for connectives

p

false
false
true
true

q
false
true
false
true

  p
true
true
false
false

p     q
false
false
false
true

p     q
false
true
true
true

p   q
true
true
false
true

p   q
true
false
false
true

chapter 7

34

wumpus world sentences

let pi,j be true if there is a pit in [i, j].
let bi,j be true if there is a breeze in [i, j].

  p1,1
  b1,1
b2,1

   pits cause breezes in adjacent squares   

chapter 7

35

wumpus world sentences

let pi,j be true if there is a pit in [i, j].
let bi,j be true if there is a breeze in [i, j].

  p1,1
  b1,1
b2,1

   pits cause breezes in adjacent squares   
b1,1     (p1,2     p2,1)
b2,1     (p1,1     p2,2     p3,1)
   a square is breezy if and only if there is an adjacent pit   

chapter 7

36

truth tables for id136

b1,1 b2,1 p1,1 p1,2 p2,1 p2,2 p3,1
false false false false false false false
true
false false false false false false
...

...

...

...

...

...

...
true
true
true
true
true
...
true

false
false
false
false
false

...
true

false false false false false
false false false false
true
false
true
false false false
false false false
true
true
true
false false
false false
...
true

...
true

...
true

...
true

...
true

r1
true
true
...
true
true
true
true
true
...
false

r3
r2
true
true
false
true
...
...
false
true
true
true
true
true
true
true
false false
...
true

...
true

r4
true
true
...
true
true
true
true
true
...
false

r5
false
false
...
true
true
true
true
true
...
true

kb
false
false
...
false
true
true
true
false
...
false

enumerate rows (di   erent assignments to symbols),
if kb is true in row, check that    is too

chapter 7

37

logical equivalence

two sentences are logically equivalent i    true in same models:

          if and only if    |=    and    |=   

(         )     (         )
(         )     (         )

commutativity of    
commutativity of    

associativity of    
associativity of    
  (    )        double-negation elimination
contraposition

((         )       )     (       (         ))
((         )       )     (       (         ))
(         )     (             )
(         )     (           )
(         )     ((         )     (         )) biconditional elimination
  (         )     (             ) de morgan
  (         )     (             ) de morgan

(       (         ))     ((         )     (         )) distributivity of     over    
(       (         ))     ((         )     (         )) distributivity of     over    

implication elimination

chapter 7

39

validity and satis   ability

a sentence is valid if it is true in all models,

e.g., t rue, a       a, a     a,

(a     (a     b))     b

validity is connected to id136 via the deduction theorem:

kb |=    if and only if (kb       ) is valid
a sentence is satis   able if it is true in some model

e.g., a     b,

c

a sentence is unsatis   able if it is true in no models

e.g., a       a

satis   ability is connected to id136 via the following:

kb |=    if and only if (kb         ) is unsatis   able

i.e., prove    by reductio ad absurdum

chapter 7

40

proof methods

proof methods divide into (roughly) two kinds:

application of id136 rules

    legitimate (sound) generation of new sentences from old
    proof = a sequence of id136 rule applications

can use id136 rules as operators in a standard search alg.

    typically require translation of sentences into a normal form

model checking

truth table enumeration (always exponential in n)
improved backtracking, e.g., davis   putnam   logemann   loveland
heuristic search in model space (sound but incomplete)

e.g., min-con   icts-like hill-climbing algorithms

chapter 7

41

forward and backward chaining

horn form (restricted)

kb = conjunction of horn clauses

horn clause =

    proposition symbol; or
    (conjunction of symbols)     symbol

e.g., c     (b     a)     (c     d     b)

modus ponens (for horn form): complete for horn kbs

  1, . . . ,   n,

  1                  n       
  

can be used with forward chaining or backward chaining.
these algorithms are very natural and run in linear time

chapter 7

42

forward chaining

idea:    re any rule whose premises are satis   ed in the kb,
add its conclusion to the kb, until query is found

p     q
l     m     p
b     l     m
a     p     l
a     b     l
a
b

q

p

m

l

a

b

chapter 7

43

forward chaining algorithm

function pl-fc-entails?(kb, q) returns true or false

inputs: kb, the knowledge base, a set of propositional horn clauses

q, the query, a proposition symbol

local variables: count, a table, indexed by clause, initially the number of premises
inferred, a table, indexed by symbol, each entry initially false
agenda, a list of symbols, initially the symbols known in kb

while agenda is not empty do

p    pop(agenda)
unless inferred[p] do
inferred[p]    true
for each horn clause c in whose premise p appears do

decrement count[c]
if count[c] = 0 then do

if head[c] = q then return true
push(head[c], agenda)

return false

chapter 7

44

forward chaining example

q

1

p

2

l

m

2

2

2

a

b

chapter 7

45

forward chaining example

q

1

p

2

l

m

2

1

1

a

b

chapter 7

46

forward chaining example

q

1

p

2

l

m

1

1

0

a

b

chapter 7

47

forward chaining example

q

1

p

1

l

m

0

1

0

a

b

chapter 7

48

forward chaining example

q

1

p

0

l

m

0

1

0

a

b

chapter 7

49

forward chaining example

q

0

p

0

l

m

0

0

0

a

b

chapter 7

50

forward chaining example

q

0

p

0

l

m

0

0

0

a

b

chapter 7

51

forward chaining example

q

0

p

0

l

m

0

0

0

a

b

chapter 7

52

proof of completeness

fc derives every atomic sentence that is entailed by kb

1. fc reaches a    xed point where no new atomic sentences are derived

2. consider the    nal state as a model m, assigning true/false to symbols

3. every clause in the original kb is true in m

proof: suppose a clause a1     . . .     ak     b is false in m
then a1     . . .     ak is true in m and b is false in m
therefore the algorithm has not reached a    xed point!

4. hence m is a model of kb
5. if kb |= q, q is true in every model of kb, including m
general idea: construct any model of kb by sound id136, check   

chapter 7

53

backward chaining

idea: work backwards from the query q:

to prove q by bc,

check if q is known already, or
prove by bc all premises of some rule concluding q

avoid loops: check if new subgoal is already on the goal stack

avoid repeated work: check if new subgoal

1) has already been proved true, or
2) has already failed

chapter 7

54

backward chaining example

q

p

m

l

a

b

chapter 7

55

backward chaining example

q

p

m

l

a

b

chapter 7

56

backward chaining example

q

p

m

l

a

b

chapter 7

57

backward chaining example

q

p

m

l

a

b

chapter 7

58

backward chaining example

q

p

m

l

a

b

chapter 7

59

backward chaining example

q

p

m

l

a

b

chapter 7

60

backward chaining example

q

p

m

l

a

b

chapter 7

61

backward chaining example

q

p

m

l

a

b

chapter 7

62

backward chaining example

q

p

m

l

a

b

chapter 7

63

backward chaining example

q

p

m

l

a

b

chapter 7

64

backward chaining example

q

p

m

l

a

b

chapter 7

65

forward vs. backward chaining

fc is data-driven, cf. automatic, unconscious processing,

e.g., object recognition, routine decisions

may do lots of work that is irrelevant to the goal

bc is goal-driven, appropriate for problem-solving,

e.g., where are my keys? how do i get into a phd program?

complexity of bc can be much less than linear in size of kb

chapter 7

66

summary

logical agents apply id136 to a knowledge base

to derive new information and make decisions

basic concepts of logic:

    syntax: formal structure of sentences
    semantics: truth of sentences wrt models
    entailment: necessary truth of one sentence given another
    id136: deriving sentences from other sentences
    soundess: derivations produce only entailed sentences
    completeness: derivations can produce all entailed sentences

wumpus world requires the ability to represent partial and negated informa-
tion, reason by cases, etc.

forward, backward chaining are linear-time, complete for horn clauses
resolution is complete for id118

id118 lacks expressive power

chapter 7

71

