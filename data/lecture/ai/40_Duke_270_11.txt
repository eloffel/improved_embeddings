planning

george konidaris	
gdk@cs.duke.edu

spring 2016

the planning problem
finding a sequence of actions to achieve some goal.	
!
!
!
!
!
!
!
!
!
!
!

planning
fundamental to ai:	

   

intelligence is about behavior.	

!
!
!
!
!
!
!
!
!
similar to search! 	

   
   

 more speci   c.	
 more structure.

shakey the robot
research project started in 1966.	
!
integrated:	

    id161.	
    planning.	
    control.	
    decision-making.	
    krr

strips planning
represent the world using a kb of    rst-order logic.	
!
actions can change what is currently true.	
!
describe the actions available:	

    preconditions	
    effects	

!

must be true in kb

change to kb after execution

pddl
planning domain description language 

    standard language for planning domains	
international programming competitions	
   
    at version 3, quite complex.	

!
!
separate de   nitions of:	

    a domain, which describes a class of tasks.	

    predicates and operators.	

!

    a task, which is an instance of domain.	

    objects.	
    start and goal states.

examples: blocks world

a

b

c

pddl: predicates
predicate is a    rst-order logic function returning true or false, 
given a set of objects.	
!
(de   ne (domain blocksworld)	
(:requirements :strips :equality)	
(:predicates (clear ?x)	
                  (on-table ?x)	
                  (arm-empty)	
                  (holding ?x)	
                  (on ?x ?y))	

(example pddl code from pddl4j open source project)

pddl: operators
operators:	
 name	
 parameters	
 preconditions	
 effects	

   
   
   
   

!
(:action pickup	
  :parameters (?ob)	
  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))	
  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) 	
               (not (arm-empty))))

pddl: operators
(:action putdown	
  :parameters  (?ob)	
  :precondition (and (holding ?ob))	
  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) 	
               (not (holding ?ob))))	
!
!
!
!
note! markov assumption.

pddl: a problem
(de   ne (problem pb3)	
   (:domain blocksworld)	
   (:objects a b c)	
   (:init (on-table a) (on-table b)   (on-table c)  	
          (clear a)  (clear b) (clear c) (arm-empty))	
   (:goal (and (on a b) (on b c))))

b

a

c

a

b

c

pddl: states
as in id48s, state describes the con   guration of the world at 
a moment in time.	
!
conjunction of positive literal predicates.	

   

(on-table a) (on-table b) (on-table c) (clear a)  (clear b) 
(clear c) (arm-empty))	
!

those not mentioned assumed to be false.	
(closed world assumption)	
!
c.f. knowledge base concept of a model.

pddl: goals
conjunction of literal predicates:	

   

(and (on a b) (on b c)))	
!

predicates not listed are don   t-cares.	
!
each goal is thus a partial state expression.

ppdl: action execution
start state:	
(on-table a) (on-table b)   (on-table c)  	
(clear a)  (clear b) (clear c) (arm-empty)	
!
action: pickup(a)	

    check preconditions	
    delete negative effects.	
    add positive effects.	

!

(:action pickup	
  :parameters (?ob)	
  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))	
  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) 	
               (not (arm-empty))))

next state:	
(on-table a) (on-table b)   (on-table c)  	
(clear a)  (clear b) (clear c) (arm-empty)	
(holding a)

planning
search problem. 

    nodes are states.	
    actions are applicable operators.	
    goal expression is goal test.	

!
!

(on-table a) (on-table b)   	

(on-table c)  (clear a)  (clear b) 	

(clear c) (arm-empty)

   

pickup(a)

(on-table b) (on-table c)  	
(clear b) (clear c) (holding a)

forward search
breadth- or depth-   rst search typically hopeless (high b, d)	
!
can use structure in the problem to build a heuristic:	

    states are conjunctions of predicates.	
    we know the goal predicates.	
    we know the predicates deleted and added by actions.	

!
major approach to solving planning problems:	
    use this knowledge to construct a problem-speci   c heuristic 

automatically.

ffplan
relaxation 

    make the problem easier (e.g., delete negative effects)	
    solve the easier problem	
    use distances as a heuristic to the hard problem.	
    ff planner (major breakthrough, circa 2001)	

!

(:action pickup	
  :parameters (?ob)	
  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))	
  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) 	
               (not (arm-empty))))

alternative approach
regression planning	

    start at the goal (partial state)	
    regress backwards	
    reverse operators	

!

(and (on a b)	
 (on b c)))	

putdown(a)

(and (holding a)	

(clear b)	
 (on b c)))	

planning competitions
competitions held every few years	

int. conf. automation and planning	

   
    problems described in pddl

2014 (deterministic)

dart
planner used by the us military for logistics.	
!
   introduced in 1991, dart had by 1995 offset the monetary 
equivalent of all funds darpa had channeled into ai research 
for the previous 30 years combined.   	
!
   directly following its launch, dart solved several logistical nightmares, saving 
the military millions of dollars. military planners were aware of the tremendous 
obstacles facing moving military assets from bases in europe to prepared bases in 
saudi arabia, in preparation for desert storm. dart quickly proved its value by 
improving upon existing plans of the u.s. military. what surprised many observers 
was dart's ability to adapt plans rapidly in a crisis environment.   	
!
(wikipedia)

