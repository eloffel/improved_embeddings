id85

george konidaris	
gdk@cs.duke.edu

spring 2016

id85
more sophisticated representation language.	
!
!
world can be described by:

color(  )
functions

adjacent(  ,  )
isapple(  )
relations

objects

id85
objects:	

    a    thing in the world   	

    apples	
    red	
    the internet	
    team edward	
    reddit	

    a name that references something.	
    cf. a noun.

m yapple271
t heinternet
compsci270
ennui

id85
functions:	
    operator that maps object(s) to single object.	

   
   
   
   

 	
colorof (  )
 	
objectn extt o(  )
 	
socialsecurityn umber(  )
 	
dateof birth(  )
spouse(  )

colorof (m yapple271) = red

id85
relations (also called predicates):	
!
like a function, but returns true or false - holds or does not.	

   
   
   
   

 	
isapple(  )
 	
p arentof (  ,  )
 	
biggert han(  ,  )
hasa(  ,  )
 	
!

these are like verbs or verb phrases.

id85
we can build up complex sentences using logical connectives, 
as in id118:	

   
   
   
   

 	
f ruit(x) =) sweet(x)
 	
f ood(x) =) (savory(x) _ sweet(x))
 	
p arentof (bob, alice) ^ p arentof (alice, humphrey)
 	
f ruit(x) =) t asty(x) _ (ist omato(x) ^   t asty(x))
!
!

predicates can appear where a propositions appear in 
id118, but functions cannot.

models for id85
recall from id118!

a model is a formalization of a    world   :	

    set the value of every variable in the kb to true or false.	
    2n models possible for n propositions.	

!
!
!
!
!
cold
!

proposition value
false
false
false
false

raining
cloudy

hot

cold

proposition value
true
false
false
false

raining
cloudy

hot

   

cold

proposition value
true
true
true
true

raining
cloudy

hot

models for id85
the situation is much more complex for fol.	
!
a model in fol consists of:	

    a set of objects.	
    a set of functions + values for all inputs.	
    a set of predicates + values for all inputs.

models for id85
consider:	
!
objects                  predicates                  functions	
!
!
!
!
example model:

isred(  )
hasv itaminc(  )

orange
apple

oppositeof (  )

predicate

isred
isred

hasv itaminc
hasv itaminc

argument value
f alse
t rue
t rue
t rue

orange
apple
orange
apple

function argument return
apple
oppositeof
orange

orange
apple

opposite

knowledge bases in fol
a kb is now:	

    a set of objects.	
    a set of predicates.	
    a set of functions.	
    a set of sentences using the predicates, functions, and 

objects, and asserted to be true.

orange
apple

objects                  predicates                  functions	
!
!
!
!
isred(apple)
hasv itaminc(orange)

isred(  )
hasv itaminc(  )

oppositeof (  )

knowledge bases in fol
listing everything is tedious    	

    especially when general relationships hold.	

!

we would like a way to say more general things about the 
world than explicitly listing truth values for each object.

quanti   ers
new weapon:	

    quanti   ers. 

!

quanti   ers allow us to make generic statements about 
properties that hold for the entire collection of objects in our 
kb.	
!
natural way to say things like:	
    all    sh have    ns.	
    all books have pages.	
    there is a textbook about ai.	

!

key idea: variable + binding rule.

existential quanti   ers
there exists object(s) such that a sentence holds. 
!

9x, isp resident(x)

   there exists   

sentence	

using variable

temporary variable

existential quanti   ers
examples:	
!

   

   

   

9x, p erson(x) ^ n ame(x, george)
 	
!
9x, car(x) ^ p arkedin(x, e23)
 	
!
9x, course(x) ^ p rerequisite(x, cs270)
  

universal quanti   ers
a sentence holds for all object(s).

8x, hasstudentn umber(x) =) p erson(x)

   for every   

sentence	

using variable

temporary variable

universal quanti   ers
examples	
!

   

   

 	
8x, f ruit(x) =) t asty(x)
!
 	
8x, bird(x) =) f eathered(x)
!
8x, book(x) ! hasauthor(x)

quanti   ers
difference in strength:	

    universal quanti   er is very strong.	

    so use weak sentence.	

!
8x, bird(x) =) f eathered(x)
!
!
    existential quanti   er is very weak.	

    so use strong sentence.

9x, car(x) ^ p arkedin(x, e23)

compound quanti   ers

8x,9y, p erson(x) =) n ame(x, y)

   every person has a name   

common pitfalls

8x, bird(x) ^ f eathered(x)

common pitfalls

9x, car(x) =) p arkedin(x, e23)

examples
   

m yapple12

id136 in id85
ground term, or literal - an actual object:	
!
!
vs. a variable:	
!
!
if you have only ground terms, you can convert to a propositional 
representation and proceed from there.

x

ist asty(apple) : ist astyapple

instantiation
getting rid of variables: instantiate a variable to a literal.	

universally quanti   ed:	
!
8x, f ruit(x) =) t asty(x)
!
!
!
!
!
!
!
for every object in the kb, just write out the rule with the 
variables substituted.	

f ruit(apple) =) t asty(apple)
f ruit(orange) =) t asty(orange)
f ruit(m ycar) =) t asty(m ycar)
f ruit(t hesky) =) t asty(t hesky)

   
instantiation
existentially quanti   ed:	

   

	 invent a new name (skolem constant) 
!
!
!
!
!
!

9x, car(x) ^ p arkedin(x, e23)
car(c) ^ p arkedin(c, e23)

    name cannot be one you   ve already used.	
    rule can then be discarded. 

prolog
programming in logic (colmerauer, 1970s)	

    general-purpose ai programming language	
    based on id85	
    declarative	

!

    use centered in europe and japan	
    fifth-generation computer project	

!

    some parts of watson (pattern matching over nlp)	
    often used as component of a system.

