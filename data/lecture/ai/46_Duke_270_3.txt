informed search

george konidaris	
gdk@cs.duke.edu

spring 2015

recall: search

basic to problem solving:	

    how to take action to reach a goal?

informed search
what if we know something about the search?

s 2 s
a

formal de   nition
set of states	
s
!
start state	
!
set of actions     and action rules	
!
goal test	
!
cost function	
!
!
so a search problem is speci   ed by a tuple,                     .	
(s, s, a, g, c)

c(s, a, s0) ! r+

g(s) !{ 0, 1}

a(s) ! s0

a1, ..., an
s1, ..., sn

problem statement
find a sequence of actions                 	
and corresponding states 	
!
     such that:	
!
!
!
!
while minimizing:

s0 = s
si = ai(si 1), i = 1, ..., n
g(sn) = 1

start state
legal moves
end at the goal

nxi=1

c(si 1, a, si)

minimize sum of costs - rational agent

s0

the frontier
key thing in search is managing the frontier.	
!
!
!
!
!
!
!
!
!
!
!

s1

s2

s3

s6

s9

s5

s8

s7

s4

s10

uninformed searches
simple strategy for choosing next node:	

     choose the shallowest one (breadth-   rst)	
     choose the deepest one (depth-   rst)	

!
neither guaranteed to    nd the least-cost path. 	
!
what if we chose the one with lowest cost?

uniform-cost
order the nodes in the frontier by cost-so-far 

    cost from the start state to that node.	

!
open the next node with the smallest cost-so-far	

    optimal solution	
    complete (provided no negative costs)

uniform-cost
expand cheapest node	
use whole path cost

5

s1

s0

11

s2

uniform-cost
expand cheapest node	
use whole path cost

5

s1

4

s3

11

s2

s0

7

s4

uniform-cost
expand cheapest node	
use whole path cost

5

4

s3

s1

5

s6

6

s5

11

s2

s0

7

s4

uniform-cost
expand cheapest node	
use whole path cost

5

4

s3

s1

5

s6

6

s5

s0

7

s4

11

3

s2

s7

9

s8

what   s the insight?
the cost-so-far tells us how much it cost to get to a node.	

     go to cheapest nodes    rst.	

!
what remains?	

total cost = cost-so-far + cost-to-go 
cost-so-far: cost from start to node.	
cost-to-go: cost from node to goal.

informed search
key idea: heuristic function.	

    h(s) - estimates cost-to-go 	
    cost to go from state to solution.	
    problem speci   c (hence informed)

h(s)

h(s)

h(s)

h(s)

greed
what if we expand the node with lowest h(s)?

s0

s1

s2

h(s)?

s3

h(s)?

s4

s5

s6

h(s)?

s9

h(s)?

s10

h(s)?

s7

h(s)?

s8

h(s)?

a*
a* algorithm:	

    g(s) - cost so far (start to s).	
    expand s that minimizes g(s) + h(s) 
    manage frontier as priority queue.	

both

!

    admissible heuristic: never overestimates cost.	

!
!

h(s)     h   (s)

    h(s) = 0 if s is a goal state, so g(s) + h(s) = c(s)	

!
if h is admissible,  a* is optimal.	
if h(s) is exact, runs in o(bd) time.

   
   

admissible heuristics
optimal solution	
proof by contradiction

example heuristic

example heuristics

more on heuristics
heuristic h1 dominates h2 if h1(s) >= h2(s) for all s.	
is h1 or h2 better? (if they   re both admissible.)	
!
!

   

how might you combine two heuristics?	
!
!
what is h(s) = k (constant) for all s?

more on heuristics
a* is optimally ef   cient: any algorithm using h must expand 
the nodes a* expands. 	
!
why?	
!

more on heuristics
ideal heuristics:	
    fast to compute.	
    close to real costs.	
    some programs automatically generate heuristics.

