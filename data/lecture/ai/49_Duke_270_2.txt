search

george konidaris	
gdk@cs.duke.edu

(pictures: wikipedia)

spring 2016

search

basic to problem solving:	

    how to take action to reach a goal?

search
speci   cally:	

    problem can be in various states.	
    start in an initial state.	
    have some actions available.	
    each action has a cost.	
    want to reach some goal, minimizing cost.

happens in simulation.
not web search.

s 2 s
a

formal de   nition
set of states	
s
!
start state	
!
set of actions     and action rules	
!
goal test	
!
cost function	
!
!
so a search problem is speci   ed by a tuple,                     .	
(s, s, a, g, c)

c(s, a, s0) ! r+

g(s) !{ 0, 1}

a(s) ! s0

a1, ..., an
s1, ..., sn

problem statement
find a sequence of actions                 	
and corresponding states 	
!
     such that:	
!
!
!
!
while minimizing:

s0 = s
si = ai(si 1), i = 1, ..., n
g(sn) = 1

nxi=1

c(si 1, a, si)

a1, ..., an
s1, ..., sn

problem statement
find a sequence of actions                 	
and corresponding states 	
!
     such that:	
!
!
!
!
while minimizing:

s0 = s
si = ai(si 1), i = 1, ..., n
g(sn) = 1

start state

nxi=1

c(si 1, a, si)

a1, ..., an
s1, ..., sn

problem statement
find a sequence of actions                 	
and corresponding states 	
!
     such that:	
!
!
!
!
while minimizing:

s0 = s
si = ai(si 1), i = 1, ..., n
g(sn) = 1

start state
legal moves

nxi=1

c(si 1, a, si)

a1, ..., an
s1, ..., sn

problem statement
find a sequence of actions                 	
and corresponding states 	
!
     such that:	
!
!
!
!
while minimizing:

s0 = s
si = ai(si 1), i = 1, ..., n
g(sn) = 1

start state
legal moves
end at the goal

nxi=1

c(si 1, a, si)

a1, ..., an
s1, ..., sn

problem statement
find a sequence of actions                 	
and corresponding states 	
!
     such that:	
!
!
!
!
while minimizing:

s0 = s
si = ai(si 1), i = 1, ..., n
g(sn) = 1

start state
legal moves
end at the goal

nxi=1

c(si 1, a, si)

minimize sum of costs - rational agent

example
sudoku	
!
states: all legal sudoku boards.	
!
start state: a particular, partially    lled-in, board.	
!
actions: inserting a valid number into the board.	
!
goal test: all cells    lled and no collisions.	
!
cost function: 1 per move.

example
flights - e.g., ita software.	
!
states: airports.	
!
start state: rdu.	
!
actions: available    ights from each airport.	
!
goal test: reached tokyo.	
!
cost function: time and/or money.	

the search tree
classical conceptualization of search.

s0

s1

s2

s3

s4

s5

s6

s9

s10

s7

s8

the search tree

3

6

1

9

8

3

5

3

4

1

important quantities
breadth (branching factor)

s0

breadth

s1

s2

s3

s4

s5

s6

s9

s10

s7

s8

the search tree
depth	
    min solution depth m

s0

depth

s1

s2

s3

s4

s5

s6

s9

s10

s7

s8

o(bd)

leaves in a search tree of breadth b, depth d. 

the search tree
expand the tree one node at a time.	
frontier: set of nodes in tree, but not expanded.

s0

s1

s2

s3

s4

s5

s6

s9

s10

s7

s8

key to a search algorithm: 	
which node to expand next?

how to expand?
uninformed strategy: 	
    nothing known about likely solutions in the tree.	
!
what to do?	
    expand deepest node (depth-   rst search)	
    expand closest node (breadth-   rst search)	

!

properties	
    completeness	
    optimality	
    time complexity (total number of nodes visited)	
    space complexity (size of frontier)

depth-first search
expand deepest node

s0

s1

depth-first search
expand deepest node

s0

s1

s2

depth-first search
expand deepest node

s0

s1

s2

x

depth-first search
expand deepest node

s0

s1

s2

x

s3

dfs: time

   

o(bd+1   bd m) = o(bd+1)

s
olu

w

tio

o

r

n 

o

n t

a

st c
his b

s
e:	
r

a

n

c

h

dfs: space

b-1 nodes open	

at each level	

!

worst case:	
search is here

   

d levels

o((b   1)d) = o(bd)

dfs: space

b-1 nodes open	

at each level	

!

worst case:	
search is here

   

d levels

o((b   1)d) = o(bd)

dfs: space

b-1 nodes open	

at each level	

!

worst case:	
search is here

   

d levels

o((b   1)d) = o(bd)

dfs: space

b-1 nodes open	

at each level	

!

worst case:	
search is here

   

d levels

o((b   1)d) = o(bd)

dfs: space

b-1 nodes open	

at each level	

!

worst case:	
search is here

   

d levels

o((b   1)d) = o(bd)

depth-first search
properties:	
    completeness: only for    nite trees.	
    optimality: no.	
    time complexity: 	
    space complexity: 	
!
here m is depth of found solution (not necessarily min solution 
depth).	
!
the deepest node happens to be the one you most recently visited - 
easy to implement recursively or manage frontier using lifo 
queue.

o(bd+1)
o(bd)

breadth-first search
expand shallowest node

s0

s1

breadth-first search
expand shallowest node

s0

s1

s2

breadth-first search
expand shallowest node

s0

s1

s2

s3

breadth-first search
expand shallowest node

s0

s1

s2

s3

s4

breadth-first search
expand shallowest node

s0

s1

s2

s3

s4

s5

bfs: time

   

o(bm+1)

bfs: space

   

o(bm+1)

breadth-first search
properties:	
    completeness: yes.	
    optimality: yes for constant cost.	
    time complexity: 	
    space complexity: 	
!
better than depth-   rst search in all respects except memory 
cost - must maintain a large frontier.	
!
manage frontier using fifo queue.

o(bm+1)
o(bm+1)

iterative deepening search
combine these two strengths.	
!
the core problems in dfs are a) not optimal, and b) not 
complete     because it fails to explore other branches.	
!
otherwise it   s a very nice algorithm!	
!
iterative deepening: 	
    run dfs to a    xed depth z.	
    start at z=1. if no solution, increment z and rerun.

ids

run dfs 	
to this depth

s0

s1

s2

s3

s4

s5

s6

s9

s10

s7

s8

ids

run dfs 	
to this depth

s0

s1

s2

s3

s4

s5

s6

s9

s10

s7

s8

ids

run dfs 	
to this depth

s0

s1

s2

s3

s4

s5

s6

s9

s10

s7

s8

ids

run dfs 	
to this depth

s0

s1

s2

s3

s4

s5

s6

s9

s10

s7

s8

ids
optimal for constant cost! proof?	
!
how can that be a good idea? 	
it duplicates work.	
!
sure but:	
    low memory requirement (equal to dfs).	
    not many more nodes expanded than bfs. (about twice as 

many for binary tree.)

ids

visited m + 1 times

visited m  times

   

ids (reprise)
mxi=0

bi(m   i + 1) =

b(bm+1   m   2) + m + 1

(b   1)2

# nodes at level i

# revisits

dfs worst case:

bm+1   1
b   1

ids
key insight:	
    many more nodes at depth m+1 than at depth m.	
!
!
!
!
magic.	
!
   in general, iterative deepening search is the preferred uninformed 
search method when the state space is large and the depth of the 
solution is unknown.    (r&n)

next week
informed searches     what if you know something about the the 
solution? 	
!
what form should such knowledge take? 	
!
how should you use it? 	
!

