constraint	sa+sfac+on	problems	

chapter	6.1	   	6.4	

derived from slides by s. russell and p. norvig, a. moore, and r. khoury 

constraint	sa+sfac+on	problems	(csps)	
       standard	search	problem:	

      state	is	a	"black	box   	   	any	data	structure	that	
supports	successor	func+on,	heuris+c	func+on,	and	
goal	test	

       csp:	

      state	is	de   ned	by	variables	xi	with	values	from	
domain	di	
      goal	test	is	a	set	of	constraints	specifying	allowable	
combina+ons	of	values	for	subsets	of	variables	
      use	variable-based	model	

       solu+on	is	not	a	path	but	an	assignment	of	values	
for	a	set	of	variables	that	sa6sfy	all	constraints	

example:		8-queens	

example:		cryptarithme+c	

       variables:		f,	t,	u,	w,	r,	o,	x1,	x2	,	x3	
       domains:		{0,	1,	2,	3,	4,	5,	6,	7,	8,	9}	
       constraints:		alldi   	(f,	t,	u,	w,	r,	o)	

       o	+	o	=	r	+	10	  	x1	
       x1	+	w	+	w	=	u	+	10	  	x2	
       x2	+	t	+	t	=	o	+	10	  	x3	
       x3	=	f,	t	   	0,	f	   	0	

1 

example:	
movie	
sea+ng	

other	applica+ons	of	csps	

       e.g.,	who	teaches	what	class	
       e.g.,	which	class	is	o   ered	when	and	where?	

       assignment	problems	
       timetable	problems	
       scheduling	problems	
       vlsi	or	pcb	layout	problems	
       boolean	sa+s   ability	
       n-queens	
       graph	coloring	
       games:		minesweeper,	magic	squares,	sudoku,	crosswords	
       line-drawing	labeling	
	
note:	many	problems	require	real-valued	variables	

example:		graph	coloring	

v3 

v4 

v2 

v6 

v5 

g 

v1 

r 

       each	circle	marked	v1	..	v6	we	must	assign	r,	g	or	b	
       no	two	adjacent	circles	may	be	assigned	the	same	value	
       note:		2	variables	have	already	been	assigned	a	color	in	

this	example	

example:		map-coloring	

       variables:		wa,	nt,	q,	nsw,	v,	sa,	t		
       domains:		di	=	{red,green,blue}	
       constraints:		adjacent	regions	must	have	di   erent	colors	

	e.g.,	wa	   	nt,	or	(wa,nt)	in	{(red,green),	(red,blue),	
(green,red),	(green,blue),	(blue,red),	(blue,green)}	

note:  in 
general, 4 colors 
are necessary 

2 

example:		map-coloring	

constraint	graph	

       binary	csp:	each	constraint	relates	two	variables	

       constraint	graph:	nodes	are	variables,	arcs	are	

constraints	

solu+ons	are	complete	(i.e.,	all	variables	are	assigned	
values)	and	consistent	(i.e.,	does	not	violate	any	
constraints)	assignments,	e.g.,	wa	=	red,	nt	=	green,	q	
=	red,	nsw	=	green,	v	=	red,	sa	=	blue,	t	=	green	

varie+es	of	csps	

       discrete	variables	

          nite	domains:	

       n	variables,	domain	size	d	  	o(dn)	complete	assignments	
       e.g.,	boolean	csps,	boolean	sa+s   ability	

       in   nite	domains:	

       integers,	strings,	etc.	
       e.g.,	job	scheduling,	variables	are	start/end	+mes	for	each	job	

       con+nuous	variables	

       e.g.,	start/end	+mes	for	hubble	space	telescope	
       linear	constraints	solvable	in	polynomial	+me	by	linear	

observa+ons	

programming	

kinds	of	constraints	

       unary	constraints	involve	a	single	variable		

      e.g.,	sa	   	green	

       binary	constraints	involve	pairs	of	variables	

      e.g.,	sa	   	wa	

       higher-order	constraints	involve	3	or	more	variables	

      e.g.,	cryptarithme+c		column		constraints	

3 

local	search	for	csps	

local	search	

       hill-climbing,	simulated	annealing,	gene+c	algorithms	

       to	apply	to	csps:	

typically	work	with	"complete"	states,	i.e.,	all	
variables	have	values	at	every	step	
      allow	states	with	some	unsa6s   ed	constraints	
      operators	assign	a	value	to	a	variable	
       variable	selec+on:		randomly	select	any	con   icted	
       value	selec+on	by	min-con   icts	heuris=c:	

variable	
      choose	value	that	violates	the	fewest	constraints,	
i.e.,	hill-climb	by	minimizing	f(n)	=	total	number	of	
violated	constraints	

min-con   icts	algorithm:	

1.    assign	to	each	variable	a	random	value,	

de   ning	the	ini+al	state	

	
2.    while	state	not	consistent	do	

2.1		pick	a	variable,	var,	that	has	constraint(s)	
violated	
2.2		find	value,	v,	for	var	that	minimizes	the	
total	number	of	violated	constraints	(over	all	
variables)	
2.3		var	=	v	

min-con   icts	algorithm	

example:		4-queens	
       states:		4	queens	in	4	columns	(44	=	256	states)	
       ac+ons:		move	queen	to	new	row	in	its	column	
       goal	test:		no	anacks	
       evalua+on	func+on:		f(n)	=	total	number	of	anacks	

	

f	=	5	

f	=	2	

f	=	0	

4 

min-con   icts	algorithm	

standard	tree	search	formula+on	

       advantages	

       disadvantages	

       simple	and	fast:		given	random	ini+al	state,	can	solve	n-
queens	in	almost	constant	+me	for	arbitrary	n	with	high	
id203	(e.g.,	n	=	1,000,000	can	be	solved	on	average	in	
about	50	steps!)	

       only	searches	states	that	are	reachable	from	the	ini+al	

state	
       might	not	search	en+re	state	space	

       does	not	allow	worse	moves	(but	can	move	to	a	neighbor	

with	the	same	cost)	
       might	get	stuck	in	a	local	op+mum	

       not	complete		

       might	not	   nd	a	solu+on	even	if	one	exists	

dfs	for	csps	

v3 

v4 

v2 
v6 

v5 

g 

v1 

r 

	[	wa=r	then	nt=g	]	same	as	[	nt=g	then	wa=r	]	

       variable	assignments	are	commuta=ve},	i.e.,	
       what	happens	if	we	do	dfs	with	the	order	of	
assignments	as	b	tried	   rst,	then	g,	then	r?	
       generate-and-test	strategy:	generate	candidate	
solu+on,	then	test	if	it	sa+s   es	all	the	constraints	
       this	makes	dfs	look	very	stupid!	
       example:	
hnp://www.cs.cmu.edu/~awm/anima+ons/constraint/9d.html		

ini=al	state:		the	empty	assignment	{	}	

states	are	de   ned	by	all	the	values	assigned	so	far	
	
      
       successor	func=on:	assign	a	value	to	an	unassigned	
       goal	test:		the	current	assignment	is	complete	and	
consistent,	i.e.,		all	variables	assigned	a	value	and	all	
constraints	sa+s   ed	

variable	

       goal:		find	any	solu+on,	so	cost	is	not	important	
       every	solu+on	appears	at	depth	n	with	n	variables	

	  	use	depth-   rst	search	

5 

improved	dfs:	

backtracking	w/	consistency	checking	
       don   t	generate	a	successor	that	creates	an	

inconsistency	with	any	exis6ng	assignment,	i.e.,	
perform	consistency	checking	when	node	is	generated	

       successor	func+on	assigns	a	value	to	an	unassigned	

variable	that	does	not	con   ict	with	all	current	
assignments	
      deadend	if	no	legal	assignments	(i.e.,	no	successors)	

       backtracking	(dfs)	search	is	the	basic	uninformed	
       can	solve	n-queens	for	n	   	25	

algorithm	for	csps	

backtracking	w/	consistency	checking	

start	with	empty	state	
while	not	all	vars	in	state	assigned	a	value	do	

pick	a	variable	(randomly	or	with	a	heuris+c)	
if	it	has	a	value	that	does	not	violate	any	
constraints	

then	assign	that	value	

else	

go	back	to	previous	variable	and	assign	it	
another	value	

backtracking	example	

australia	constraint	graph	

6 

backtracking	example	

backtracking	example	

backtracking	example	

backtracking	search	

       depth-   rst	search	algorithm	

      goes	down	one	variable	at	a	+me	
      at	a	deadend,	backs	up	to	last	variable	whose	
value	can	be	changed	without	viola+ng	any	
constraints,	and	changes	it		
      if	you	backed	up	to	the	root	and	tried	all	values,	
then	there	is	no	solu+on		

       algorithm	is	complete	

      will	   nd	a	solu+on	if	one	exists	
      will	expand	the	en+re	(   nite)	search	space	if	
necessary	
       depth-limited	search	with	depth	limit	=	n	

7 

improving	backtracking	e   ciency	

       heuris=cs	can	give	huge	gains	in	speed	
      which	variable	should	be	assigned	next?	
      in	what	order	should	its	values	be	tried?	
      can	we	detect	inevitable	failure	early?	

top-left 
node is 
hard to 
label! 

which	variable	next?	

most-constrained	variable	

       most-constrained	variable	

      choose	the	variable	with	the	fewest	legal	values	

	

	
       called	the	minimum	remaining	values	(mrv)	

       minimizes	branching	factor;		tries	to	cut	o   	

heuris+c	

search	asap	

8 

which	variable	next?	

most-constraining	variable	
       tie-breaker	among	most-constrained	

variables	

       most-constraining	variable	

      choose	the	variable	with	the	most	constraints	
on	the	remaining	variables	
       called	the	degree	heuris=c	
       tries	to	cut	o   	search	asap	

which	value	next?	

least-constraining	value	

       given	a	variable,	choose	the	least-constraining	
value:	
      i.e.,	the	one	that	rules	out	the	fewest	values	in	
the	remaining	variables	
      try	to	pick	values	best	   rst	

       combining	these	heuris+cs	makes	1000-queens	

feasible	

forward	checking	algorithm	

v3 

v4 

v2 

v6 

v5 

g 

v1 

r 

forward	checking	algorithm	

      keep	track	of	remaining	legal	values	for	all	
variables	
      deadend	when	any	variable	has	no	legal	values	

       ini+ally,	for	each	variable,	record	the	set	of	all	possible	
       when	you	assign	a	value	to	a	variable	in	the	search,	

legal	values	for	it	

update	the	set	of	legal	values	for	all	unassigned	
variables.		backtrack	immediately	if	you	empty	a	
variable   s	set	of	possible	values.	

9 

example:		map-coloring	

       variables:		wa,	nt,	q,	nsw,	v,	sa,	t		
       domains:		di	=	{red,green,blue}	
       constraints:		adjacent	regions	must	have	di   erent	colors	

	e.g.,	wa	   	nt,	or	(wa,nt)	in	{(red,green),	(red,blue),	
(green,red),	(green,blue),	(blue,red),	(blue,green)}	

forward	checking	

      keep	track	of	remaining	legal	values	for	all	
unassigned	variables	
      deadend	when	any	variable	has	no	legal	values	

note:  wa is not the  
most constraining var 

constraint	graph	

       binary	csp:	each	constraint	relates	two	variables	

       constraint	graph:	nodes	are	variables,	arcs	are	

constraints	

forward	checking	

      keep	track	of	remaining	legal	values	for	all	
unassigned	variables	
      deadend	when	any	variable	has	no	legal	values	

note: q is not 
most constrained 
variable 

10 

forward	checking	

      keep	track	of	remaining	legal	values	for	all	
unassigned	variables	
      deadend	when	any	variable	has	no	legal	values	

note: v is 
not most 
constrained 
variable 

constraint	propaga+on	

       forward	checking	propagates	informa+on	from	

assigned	to	unassigned	variables,	but	doesn't	provide	
early	detec+on	for	all	failures:	

       nt	and	sa	cannot	both	be	blue!	
       constraint	propaga=on	repeatedly	(recursively)	

enforces	constraints	for	all	variables	

constraint	propaga+on	

v3 

v4 

v2 

v6 

v5 

g 

v1 

r 

main	idea:		when	you	delete	a	value	from	a	variable   s	
domain,	check	all	variables	connected	to	it.		if	any	of	
them	change,	delete	all	inconsistent	values	connected	
to	them,	etc.	
note:		in	the	above	example,	nothing	changes	

11 

arc	consistency	

arc	consistency	

       simplest	form	of	propaga+on	makes	each	arc	(i.e.,	

each	binary	constraint)	consistent	

       x	  y	is	consistent	if	

       simplest	form	of	propaga+on	makes	each	arc	

consistent	

       x	  y	is	consistent	if	

for	every	value	x	at	var	x	there	is	some	allowed	y,	

i.e.,	there	is	at	least	1	value	of	y	that	is	consistent	
with	x	at	x	

	

for	every	value	x	at	x	there	is	some	allowed	y;		

if	not,	delete	x	

	

x = sa 
y = nsw 

x = nsw 
y = sa 

arc	consistency	

arc	consistency	

       simplest	form	of	propaga+on	makes	each	arc	

consistent	

       x	  y	is	consistent	if	

for	every	value	x	at	x	there	is	some	allowed	y;		if	not,	

delete	x	

	

x = v 
y = nsw 

       if	x	loses	a	value,	all	neighbors	of	x	must	be	rechecked	

	
	
	
	
	
	

       simplest	form	of	propaga+on	makes	each	arc	consistent	
       x	  y	is	consistent	if	

for	every	value	x	at	x	there	is	some	allowed	y;		if	not,	delete	x		

	

	

	
	
	
	
	
	
	
	
	

x = sa 
y = nt 

if	x	loses	a	value,	all	neighbors	of	x	must	be	rechecked	

      
       arc	consistency	detects	failure	earlier	than	forward	checking	
       use	as	a	preprocessor	and	azer	each	assignment	during	search	

	
	

12 

bottom-right 
node must not 
be red because 
node to upper-
left must not 
be black 

arc	consistency	algorithm		   ac-3   	

func=on	revise(csp,	xi	,	xj	)							//	returns	true	if	we	revise	the	

	

	

	

	

	domain	of	xi	

				revised	=	false;	
				foreach	x	in	di	do	{	
								if	no	value	y	in	dj	allows	(x,	y)	to	sa+sfy	the	constraints	

// check if xi    xj consistent 

	

	between	xi	and	xj	then	{	
	delete	x	from	di	;		
	revised	=	true;	

								}	
				}	
				return	revised	

arc	consistency	algorithm		   ac-3   	
func=on	ac-3(csp)				//	returns	false	if	inconsistency	is	found	and	

	

	

	

	true	otherwise	

				//		input:		csp,	a	binary	csp	with	components	(x,	d,	c)	
				//		local	variables:		queue,	a	queue	of	arcs;	ini+ally	all	arcs	in	csp	
				while	queue	not	empty	do	{	
								(xi	,	xj	)	=	remove-first(queue);	
								if	revise(csp,	xi	,	xj	)	then	{
												if	size	of	di	=	0	then	return	false	
												foreach	xk	in	xi.neighbors	   	{	xj	}	do 	//	propagate	changes	
	to	neighbors	

	//	make	arc	consistent	

// check if xi    xj consistent 

	

	

	

	

	

	
																add	(xk	,	xi	)	to	queue	
									}	
				}	
				return	true	

constraint	propaga+on	

v3 

v4 

v2 

v6 

v5 

g 

v1 

r 

       in	this	example,	constraint	propaga+on	solves	the	problem	
without	search	   	but	not	always	that	lucky!	
       constraint	propaga+on	can	be	done	as	a	preprocessing	step		
       and	it	can	be	performed	during	search	

      note:	when	you	backtrack,	you	must	undo	some	of	your	
addi+onal	constraints			

13 

combining	search	with	csp	
       idea:		interleave	search	and	csp	id136	

       perform	dfs	

      at	each	node	assign	a	selected	value	to	a	selected	
variable	
      run	csp	to	reduce	variables   	domains	and	check	if	
any	inconsistencies	arise	as	a	result	of	this	
assignment	

combining	backtracking	search	with	csp	
function backtracking-search(csp) returns a solution or failure 
  return backtrack({ }, csp) 
 
function backtrack(assignment, csp) returns a solution or failure 
  if assignment is complete then return assignment; 
  var  = select-unassigned-variable(csp); 
  foreach value in order-domain-values(var, assignment, csp) do { 
    if value is consistent with assignment  then { 
      add {var  = value} to assignment; 
      id136s  = ac-3(csp, var, value); 
       if id136s != failure  then { 
        add id136s to assignment; 
        result  = backtrack(assignment, csp); 
         if result != failure then return result;  } 
      } 
    remove {var = value} and id136s  from assignment; 
  } 
  return failure 

summary	
       csps	are	a	special	kind	of	problem:	

assigned	per	node	plus	consistency	checking	

      states	de   ned	by	values	of	a	   xed	set	of	variables	
      goal	test	de   ned	by	constraints	on	variable	values	
       backtracking	=	depth-   rst	search	with	one	variable	
       variable	ordering	and	value	selec+on	heuris+cs	help	
       forward	checking	prevents	assignments	that	guarantee	
       constraint	propaga+on	(e.g.,	arc	consistency)	does	

signi   cantly	

later	failure	

addi+onal	work	to	constrain	values	and	detect	
inconsistencies	earlier	

       itera+ve	min-con   icts	is	usually	e   ec+ve	in	prac+ce	

14 

