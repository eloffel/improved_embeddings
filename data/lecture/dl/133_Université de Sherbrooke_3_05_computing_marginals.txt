neural networks
conditional random    elds - computing marginals

id136

2

topics: computing p(y|x) 
    then we have:
    ap(yk, yk+1) = 11   k<k vyk,yk+1
    p(y|x) = exp   pk
k=1 au(yk) +pk 1
    ap(yk, yk+1) = 11   k<k vyk,yk+1
    p(y|x) = exp   pk
k=1 ap(yk, yk+1)    /z(x)
k=1 au(yk) +pk 1
where
exp   pk
    pz(x) =py01py02       py0k
exp   pk
k=1 au(y0k) +pk 1
    z(x) =py01py02       py0k

k=1 ap(yk, yk+1)    /z(x)
k=1 au(y0k) +pk 1
k=1 ap(y0k, y0k+1)   

hard to compute

k=1 ap(y0k, y0k+1)   

3

exp(au(y01) + ap(y01, y02)) y02

exp(au(y01) + ap(y01, y02)) y02
id136

exp(au(y0k) + ap(y0k, y0k+1))    k 1(y0k) y0k+1

       1(y02) (=py01
       1(y02) (=py01
       k(y0k+1) (=py0k
       k(y0k+1) (=py0k
    z(x) (=py0k
    z(x) (=py0k
       1(y02) (=py01
       1(y02) (=py01
       k(y0k+1) (=py0k
       k(y0k+1) (=py0k
    z(x) (=py0k
    z(x) (=py0k

exp(au(y0k) + ap(y0k, y0k+1))    k 1(y0k) y0k+1
exp(au(y0k))    k 1(y0k)
topics: forward/backward or belief propagation
    computing both tables is often referred to as the forward/
       k(2)    k 1(1)    k 1(2)    k 1(3)
backward algorithm for crfs
       k(2)    k 1(1)    k 1(2)    k 1(3)
         is computed with a forward pass
         
         is computed with a backward pass
         
    it has other names

exp(au(y0k))    k 1(y0k)
exp(au(y01) + ap(y01, y02)) y02

exp(au(y0k) + ap(y0k, y0k+1))    k 1(y0k) y0k+1
exp(au(y0k))    k 1(y0k)

exp(au(y0k) + ap(y0k, y0k+1))    k 1(y0k) y0k+1

exp(au(y01) + ap(y01, y02)) y02

exp(au(y0k))    k 1(y0k)

    belief propagation
       k(2)    k 1(1)    k 1(2)    k 1(3)
    sum-product
       k(2)    k 1(1)    k 1(2)    k 1(3)
         gives the summation from the left
         
         gives the summation from the right
         

exp(au(y0k) + ap(y0k, y0k+1))    k 1(y0k) y0k+1
exp(au(y0k) + ap(y0k, y0k+1))    k 1(y0k) y0k+1

4

       k(2)    k 1(1)    k 1(2)    k 1(3)

       1(y02) (=py01
       1(y02) (=py01
       k(y0k+1) (=py0k
       k(y0k+1) (=py0k
    z(x) (=py0k
    z(x) (=py0k
exp au(y0k) + ap(y0k 1, y0k) + log  k+1(y0k) 
exp au(y0k) + ap(y0k 1, y0k) + log  k+1(y0k) 
exp au(y0k) + ap(y0k, y0k+1) + log    k 1(y0k) 
exp au(y0k) + ap(y0k, y0k+1) + log    k 1(y0k) 
topics: computing p(yk|x), p(yk, yk+1|x)
       k(2)    k 1(1)    k 1(2)    k 1(3)
       k(2)    k 1(1)    k 1(2)    k 1(3)
    the    /    tables can be used to compute marginals
         
         
p(yk|x) =
p(yk|x) =

    log  k(y0k 1) (= logpy0k
    log  k(y0k 1) (= logpy0k
    log    k(y0k+1) (= logpy0k
    log    k(y0k+1) (= logpy0k
    logpi exp(zi) = maxi(zi) + logpi exp(zi   maxi(zi))
    logpi exp(zi) = maxi(zi) + logpi exp(zi   maxi(zi))

exp(au(y0k))    k 1(y0k)
exp(au(y0k))    k 1(y0k)

id136

exp(au(yk) + log    k 1(yk) + log  k+1(yk))
exp(au(yk) + log    k 1(yk) + log  k+1(yk))
exp(au(y0k) + log    k 1(y0k) + log  k+1(y0k))
exp(au(y0k) + log    k 1(y0k) + log  k+1(y0k))

py0k
py0k

p(yk, yk+1|x) =

exp    au(yk) + ap(yk, yk+1) + au(yk+1)
+ log    k 1(yk) + log  k+2(yk+1)    
exp    au(y0k) + ap(y0k, y0k+1) + au(y0k+1)
+ log    k 1(y0k) + log  k+2(y0k+1)    

py0kpy0k+1

