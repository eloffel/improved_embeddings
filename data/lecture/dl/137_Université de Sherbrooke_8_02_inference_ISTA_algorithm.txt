neural networks
sparse coding - id136 (ista algorithm)

2

sparse coding
hugo larochelle
hugo larochelle

hugo.larochelle@usherbrooke.ca

sparse coding

november 1, 2012

hugo larochelle

sparse coding

math for my slides    sparse coding   .

november 1, 2012
abstract

topics: sparse coding
    for each          nd a latent representation       such that:
    x(t) h(t) d

sparse coding
d  epartement d   informatique
universit  e de sherbrooke
d  epartement d   informatique
hugo.larochelle@usherbrooke.ca
math for my slides    sparse coding   .
universit  e de sherbrooke
d  epartement d   informatique
sparse coding
d  epartement d   informatique
hugo.larochelle@usherbrooke.ca
abstract
math for my slides    sparse coding   .
november 1, 2012
universit  e de sherbrooke
d  epartement d   informatique
    x(t) h(t) d
universit  e de sherbrooke
hugo larochelle
txt=1
november 1, 2012
hugo.larochelle@usherbrooke.ca
    it is sparse: the vector        has many zeros
universit  e de sherbrooke
1
1
hugo.larochelle@usherbrooke.ca
2 +  ||h(t)||1
2||x(t)   d h(t)||2
d  epartement d   informatique
arg min
arg min
arg min
arg min
abstract
hugo.larochelle@usherbrooke.ca
t
    we can reconstruct the original input        as much as possible
universit  e de sherbrooke
1
1
d
h(t)
h(t)
    x(t) h(t) d
november 1, 2012
2 +  ||h(t)||1
2||x(t)   d h(t)||2
november 1, 2012
arg min
hugo.larochelle@usherbrooke.ca
txt=1
t
1
   
2||x(t)   d h(t)||2
arg min
november 1, 2012
1
1
h(x(t)) = arg min
2||x(t)   d h(t)||2
2||x(t)   d h(t)||2
2 +  ||h(t)||1
d
abstract
1
2||x(t)   d h(t)||2
h(x(t)) = arg min

sparsity penalty
h(x(t)) = arg min
2 +  ||h(t)||1
abstract

sparse coding
abstract

math for my slides    sparse coding   .

    x(t) h(t) d

abstract
hugo larochelle

abstract
reconstruction error

txt=1

txt=1

arg min

arg min

h(t)
h(t)

 

1
t

1
t

h(t)

1
t

 

d

d

arg min

min
d
1
t

txt=1
 
1
2||x(t)   d h(t)||2
h(t)
min
abstract
math for my slides    sparse coding   .
   
h(t)
 
txt=1
1
math for my slides    sparse coding   .
math for my slides    sparse coding   .
2||x(t)   d h(t)||2
arg min
reconstruction
    x(t) h(t) d bx(t)
d
h(t)
    x(t) h(t) d
1
h(x(t)) = arg min
2||x(t)   d h(t)||2
txt=1
    x(t) h(t) d
arg min
h(t)
txt=1
1
d
2||x(t)   d h(t)||2
h(x(t)) = arg min
arg min
arg min
bx(t) = d h(x(t)) = xk s.t.
   
   
h(t)
- encoder is the minimization
d
h(x(t)) = arg min

reconstruction vs.
2 +  ||h(t)||1
sparsity control
txt=1
math for my slides    sparse coding   .
         is equivalent to the autoencoder output weight matrix
2 +  ||h(t)||1
1
arg min
2 +  ||h(t)||1
2||x(t)   d h(t)||2
    however,             is now a complicated function of      
1
    x(t) h(t) d
2 +  ||h(t)||1
2||x(t)   d h(t)||2
2 +  ||h(t)||1
d  ,k h(x(t))k
1
h(t)
2||x(t)   d h(t)||2
2 +  ||h(t)||1

h(x(t)) = arg min

h(x(t)) = arg min

1
t
1
t

arg min

arg min

h(t)

1
t

h(t)

h(t)

h(t)

d

2 +  ||h(t)||1
1
2||x(t)   d h(t)||2
2 +  ||h(t)||1

h(t)

1
2||x(t)   d h(t)||2

1
1
2||x(t)   d h(t)||2
2 +  ||h(t)||1
t

arg min

txt=1

math for my slides    sparse coding   .

math for my slides    sparse coding   .
    more formally:
   

    x(t) h(t) d bx(t)

   

    x(t) h(t) d bx(t)

    x(t) h(t) d
math for my slides    sparse coding   .

    x(t) h(t) d

d

d

h(t)

1
t

1
t

arg min

arg min

abstract
1
2||x(t)   d h(t)||2
h(x(t)) = arg min
arg min

2 +  ||h(t)||1
sparse coding
   
1
2||x(t)   d h(t)||2
arg min
abstract
d  ,k h(x(t))k
h(t)
2 +  ||h(t)||1

topics: id136 of sparse codes
math for my slides    sparse coding   .
1
2||x(t)   d h(t)||2
   
h(x(t))k6=0
    given     , how do we compute
    we want to optimize                                                           w.r.t. 

1
h(x(t)) = arg min
2||x(t)   d h(t)||2
1
2||x(t)   d h(t)||2

h(t)
2 +  ||h(t)||1
2 +  ||h(t)||1
arg min

txt=1
bx(t) = d h(x(t)) = xk s.t.
txt=1
txt=1
bx(t) = d h(x(t)) = xk s.t.

1
1
l(x(t)) =
2||x(t)   d h(t)||2
2||x(t)   d h(t)||2
h(x(t)) = arg min
arg min

    h(t)
    h(x(t))k = 0
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
k )
@h(t)
    h(x(t))k (= h(x(t))k       dd>(d h(t)   x(t))
k
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))

1
2||x(t)   d h(t)||2

2 +  ||h(t)||1

2 +  ||h(t)||1
2 +  ||h(t)||1

h(x(t)) = arg min

2 +  ||h(t)||1

d  ,k h(x(t))k

h(x(t))k6=0

1
t

h(t)

h(t)

h(t)

h(t)

d

@

3

@

@h(t)
k
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))

@

l(x(t)) = ||x(t)   d h(t)||2
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
k )
    we could use a id119 method:
@h(t)
k
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))

2 +  ||h(t)||1

k (= h(t)

k       dd>(d h(t)   x(t))
k         sign(h(t)

    sign(h(t)) 6= sign(h(t)

    x(t) h(t) d bx(t)
   

   

d

   

   

   

@

h(t)

h(t)

   

   

h(t)

h(t)

h(t)

   

h(t)

   
@

h(x(t))k6=0

h(x(t))k6=0

d  ,k h(x(t))k

h(x(t)) = arg min

d  ,k h(x(t))k

d  ,k h(x(t))k

d  ,k h(x(t))k
h(x(t))k6=0

d  ,k h(x(t))k

   
h(x(t)) = arg min

2||x(t)   d h(t)||2

1
2||x(t)   d h(t)||2

2 +  ||h(t)||1
h(x(t))k6=0

2 +  ||h(t)||1
2||x(t)   d h(t)||2

2||x(t)   d h(t)||2
2 +  ||h(t)||1
4

2||x(t)   d h(t)||2
bx(t) = d h(x(t)) = xk s.t.
sparse coding

2 +  ||h(t)||1
1
2||x(t)   d h(t)||2
2 +  ||h(t)||1

txt=1
t
h(x(t)) = arg min
   
d  ,k h(x(t))k
bx(t) = d h(x(t)) = xk s.t.

bx(t) = d h(x(t)) = xk s.t.

bx(t) = d h(x(t)) = xk s.t.
bx(t) = d h(x(t)) = xk s.t.
h(x(t))k6=0
bx(t) = d h(x(t)) = xk s.t.
topics: id136 of sparse codes
l(x(t)) = ||x(t)   d h(t)||2
2 +  ||h(t)||1
   
l(x(t)) = ||x(t)   d h(t)||2
    for a single hidden unit:
l(x(t)) = ||x(t)   d h(t)||2
2 +  ||h(t)||1
h(x(t))k6=0
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
2 +  ||h(t)||1
l(x(t)) = ||x(t)   d h(t)||2
k )
@
@h(t)
2 +  ||h(t)||1
l(x(t)) = ||x(t)   d h(t)||2
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
@
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
1
k
@h(t)
l(x(t)) =
2||x(t)   d h(t)||2
2 +  ||h(t)||1
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
@h(t)
k )
k
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
k )
k
@h(t)
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
@h(t)
k
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
k
k )
@h(t)
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
    h(t)
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
k
    h(t)
    issue: l1 norm not differentiable at 0
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
    h(t)
    h(t)
    h(t)
- very unlikely for id119 to       land       on               (even if it   s the solution)
    h(t)
    h(t)
k = 0
    h(t)
    solution: if       changes sign because of l1 norm gradient, clamp to 0
    h(t)
    h(t)
k = 0
k
    h(t)
    each hidden unit update would be performed as follows:
    h(t)
    h(t)
    h(x(t))k (= h(x(t))k       dd>(d h(t)   x(t))
k (= h(t)
    h(t)
k       dd>(d h(t)   x(t))
    sign(h(t)) 6= sign(h(t)
   
-
k (= h(t)
    h(t)
k       d>(d h(t)   x(t))
k (= h(t)
h(t)
k      (d  ,k)>(d h(t)   x(t))
    sign(h(t)) 6= sign(h(t)
k         sign(h(t)
if                                                    then: 
-
k ))
    h(t)
k ) 6= sign(h(t)
k         sign(h(t)
    sign(h(t)
k ))
- else:
    h(t)
k         sign(h(t)
k (= h(t)
    h(t)
k )
    h(t)
k (= 0
k (= h(t)
    h(t)

    h(t)
k = 0
    h(t)
    h(t)
k (= h(t)
    h(x(t))k (= h(x(t))k       dd>(d h(t)   x(t))

k       dd>(d h(t)   x(t))
k         sign(h(t)
k ))

k (= 0
k (= h(t)

k         sign(h(t)
k )

k         sign(h(t)

2 +  ||h(t)||1

k = 0

k = 0

@

@

k

k

k

    h(x(t))k (= h(x(t))k       dd>(d h(t)   x(t))

k

    x(t) h(t) d bx(t)
   

   

d

   

   

   

@

h(t)

h(t)

   

   

h(t)

h(t)

h(t)

   

h(t)

   
@

h(x(t))k6=0

h(x(t))k6=0

d  ,k h(x(t))k

h(x(t)) = arg min

d  ,k h(x(t))k

d  ,k h(x(t))k

d  ,k h(x(t))k
h(x(t))k6=0

d  ,k h(x(t))k

   
h(x(t)) = arg min

2||x(t)   d h(t)||2

1
2||x(t)   d h(t)||2

2 +  ||h(t)||1
h(x(t))k6=0

2 +  ||h(t)||1
2||x(t)   d h(t)||2

2||x(t)   d h(t)||2
2 +  ||h(t)||1
4

2||x(t)   d h(t)||2
bx(t) = d h(x(t)) = xk s.t.
sparse coding

2 +  ||h(t)||1
1
2||x(t)   d h(t)||2
2 +  ||h(t)||1

txt=1
t
h(x(t)) = arg min
   
d  ,k h(x(t))k
bx(t) = d h(x(t)) = xk s.t.

bx(t) = d h(x(t)) = xk s.t.

bx(t) = d h(x(t)) = xk s.t.
bx(t) = d h(x(t)) = xk s.t.
h(x(t))k6=0
bx(t) = d h(x(t)) = xk s.t.
topics: id136 of sparse codes
l(x(t)) = ||x(t)   d h(t)||2
2 +  ||h(t)||1
   
l(x(t)) = ||x(t)   d h(t)||2
    for a single hidden unit:
l(x(t)) = ||x(t)   d h(t)||2
2 +  ||h(t)||1
h(x(t))k6=0
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
2 +  ||h(t)||1
l(x(t)) = ||x(t)   d h(t)||2
k )
@
@h(t)
2 +  ||h(t)||1
l(x(t)) = ||x(t)   d h(t)||2
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
@
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
1
k
@h(t)
l(x(t)) =
2||x(t)   d h(t)||2
2 +  ||h(t)||1
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
@h(t)
k )
k
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
k )
k
@h(t)
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
@h(t)
k
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
k
k )
@h(t)
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
    h(t)
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
k
    h(t)
    issue: l1 norm not differentiable at 0
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
    h(t)
    h(t)
    h(t)
- very unlikely for id119 to       land       on               (even if it   s the solution)
    h(t)
    h(t)
k = 0
    h(t)
    solution: if       changes sign because of l1 norm gradient, clamp to 0
    h(t)
    h(t)
k = 0
k
    h(t)
    each hidden unit update would be performed as follows:
    h(t)
    h(t)
    h(x(t))k (= h(x(t))k       dd>(d h(t)   x(t))
k (= h(t)
    h(t)
k       dd>(d h(t)   x(t))
    sign(h(t)) 6= sign(h(t)
   
-
k (= h(t)
    h(t)
k       d>(d h(t)   x(t))
k (= h(t)
h(t)
k      (d  ,k)>(d h(t)   x(t))
    sign(h(t)) 6= sign(h(t)
k         sign(h(t)
if                                                    then: 
-
k ))
    h(t)
k ) 6= sign(h(t)
k         sign(h(t)
    sign(h(t)
k ))
- else:
    h(t)
k         sign(h(t)
k (= h(t)
    h(t)
k )
    h(t)
k (= 0
k (= h(t)
    h(t)

    h(t)
k = 0
    h(t)
    h(t)
k (= h(t)
k       dd>(d h(t)   x(t))
    h(x(t))k (= h(x(t))k       dd>(d h(t)   x(t))
 
k         sign(h(t)
update from reconstruction
k ))

k (= 0
k (= h(t)

k         sign(h(t)
k )

k         sign(h(t)

2 +  ||h(t)||1

k = 0

k = 0

@

@

k

k

k

    h(x(t))k (= h(x(t))k       dd>(d h(t)   x(t))

k

    x(t) h(t) d bx(t)
   

   

d

   

   

   

@

h(t)

h(t)

   

   

h(t)

h(t)

h(t)

   

h(t)

   
@

h(x(t))k6=0

h(x(t))k6=0

d  ,k h(x(t))k

h(x(t)) = arg min

d  ,k h(x(t))k

d  ,k h(x(t))k

d  ,k h(x(t))k
h(x(t))k6=0

d  ,k h(x(t))k

   
h(x(t)) = arg min

2||x(t)   d h(t)||2

1
2||x(t)   d h(t)||2

2 +  ||h(t)||1
h(x(t))k6=0

2 +  ||h(t)||1
2||x(t)   d h(t)||2

2||x(t)   d h(t)||2
2 +  ||h(t)||1
4

2||x(t)   d h(t)||2
bx(t) = d h(x(t)) = xk s.t.
sparse coding

2 +  ||h(t)||1
1
2||x(t)   d h(t)||2
2 +  ||h(t)||1

txt=1
t
h(x(t)) = arg min
   
d  ,k h(x(t))k
bx(t) = d h(x(t)) = xk s.t.

bx(t) = d h(x(t)) = xk s.t.

bx(t) = d h(x(t)) = xk s.t.
bx(t) = d h(x(t)) = xk s.t.
h(x(t))k6=0
bx(t) = d h(x(t)) = xk s.t.
topics: id136 of sparse codes
l(x(t)) = ||x(t)   d h(t)||2
2 +  ||h(t)||1
   
l(x(t)) = ||x(t)   d h(t)||2
    for a single hidden unit:
l(x(t)) = ||x(t)   d h(t)||2
2 +  ||h(t)||1
h(x(t))k6=0
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
2 +  ||h(t)||1
l(x(t)) = ||x(t)   d h(t)||2
k )
@
@h(t)
2 +  ||h(t)||1
l(x(t)) = ||x(t)   d h(t)||2
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
@
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
1
k
@h(t)
l(x(t)) =
2||x(t)   d h(t)||2
2 +  ||h(t)||1
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
@h(t)
k )
k
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
k )
k
@h(t)
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
@h(t)
k
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
k
k )
@h(t)
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
    h(t)
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
k
    h(t)
    issue: l1 norm not differentiable at 0
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
    h(t)
    h(t)
    h(t)
- very unlikely for id119 to       land       on               (even if it   s the solution)
    h(t)
    h(t)
k = 0
    h(t)
    solution: if       changes sign because of l1 norm gradient, clamp to 0
    h(t)
    h(t)
k = 0
k
    h(t)
    each hidden unit update would be performed as follows:
    h(t)
    h(t)
    h(x(t))k (= h(x(t))k       dd>(d h(t)   x(t))
k (= h(t)
    h(t)
k       dd>(d h(t)   x(t))
    sign(h(t)) 6= sign(h(t)
   
-
k (= h(t)
    h(t)
k       d>(d h(t)   x(t))
k (= h(t)
h(t)
k      (d  ,k)>(d h(t)   x(t))
    sign(h(t)) 6= sign(h(t)
k         sign(h(t)
if                                                    then: 
-
k ))
    h(t)
k ) 6= sign(h(t)
k         sign(h(t)
    sign(h(t)
k ))
- else:
    h(t)
k         sign(h(t)
k (= h(t)
    h(t)
k )
    h(t)
k (= 0
k (= h(t)
    h(t)

    h(t)
k = 0
    h(t)
    h(t)
k (= h(t)
k       dd>(d h(t)   x(t))
    h(x(t))k (= h(x(t))k       dd>(d h(t)   x(t))
 
k         sign(h(t)
update from reconstruction
k ))

k (= 0
k (= h(t)

k         sign(h(t)
k )

k         sign(h(t)

2 +  ||h(t)||1

update from sparsity

k = 0

k = 0

 

@

@

k

k

k

    h(x(t))k (= h(x(t))k       dd>(d h(t)   x(t))

k

k       dd>(d h(t)   x(t))
sparse coding
k       dd>(d h(t)   x(t))
k         sign(h(t)
k ))
   
bx(t) = d h(x(t)) = xk s.t.
k       dd>(d h(t)   x(t))
k         sign(h(t)
k ))
topics: ista (iterative shrinkage and thresholding algorithm)
k         sign(h(t)
k ))
k         sign(h(t)
k )
    this process corresponds to the ista algorithm:
k         sign(h(t)
k )

h(x(t)) = arg min

h(t)

   

h(x(t))k6=0

d  ,k h(x(t))k

2||x(t)   d h(t)||2

2 +  ||h(t)||1

5

    initialize       (for instance to 0)
    while       has not converged

l(x(t)) = ||x(t)   d h(t)||2
h(t) (= h(t)       d>(d h(t)   x(t))
@
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
h(t) (= h(t)       d>(d h(t)   x(t))
k )
@h(t)
 
k
h(t) (= h(t)       d>(d h(t)   x(t))
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
 
h(t) (= shrink(h(t),      )

2 +  ||h(t)||1

   

-
-

1

1

   

    return 

h(t) (= shrink(h(t),       sign(h(t)))

1

shrink(a, b) = [. . . , sign(ai) max(|ai|   bi, 0), . . . ]

h(t) (= shrink(h(t),       sign(h(t)))
   
k = 0

    h(t)
    h(t)
   
shrink(a, b) = [. . . , sign(ai) max(|ai|   bi), . . . ]
    here
shrink(a, b) = [. . . , sign(ai) max(|ai|   bi, 0), . . . ]
    h(t)
    will converge if     is bigger than the largest eigenvalue of 
    1
    1
    d>d
    h(t)
k (= h(t)
    sign(h(t)) 6= sign(h(t)
txt=1

    d>d
k       dd>(d h(t)   x(t))
k         sign(h(t)
k ))

k

shrink(a, b) = [. . . , sign(ai) max(|ai|   bi), . . . ]

k       dd>(d h(t)   x(t))
sparse coding
k       dd>(d h(t)   x(t))
k         sign(h(t)
k ))
   
bx(t) = d h(x(t)) = xk s.t.
k       dd>(d h(t)   x(t))
k         sign(h(t)
k ))
topics: ista (iterative shrinkage and thresholding algorithm)
k         sign(h(t)
k ))
k         sign(h(t)
k )
    this process corresponds to the ista algorithm:
k         sign(h(t)
k )

h(x(t)) = arg min

h(t)

   

   

   

h(x(t))k6=0

2||x(t)   d h(t)||2

2 +  ||h(t)||1

5

d  ,k h(x(t))k
h(t) (= shrink(h(t),       sign(h(t)))

shrink(a, b) = [. . . , sign(ai) max(|ai|   bi, 0), . . . ]

shrink(a, b) = [. . . , sign(ai) max(|ai|   bi, 0), . . . ]

1

1

   

1

-
-

   

    d>d

    initialize       (for instance to 0)
    while       has not converged

l(x(t)) = ||x(t)   d h(t)||2
h(t) (= h(t)       d>(d h(t)   x(t))
    shrink(ai, bi)
@
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
h(t) (= h(t)       d>(d h(t)   x(t))
k )
    1
    d>d
   
@h(t)
 
k
h(t) (= h(t)       d>(d h(t)   x(t))
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
 
h(t) (= shrink(h(t),      )

shrink(a, b) = [. . . , sign(ai) max(|ai|   bi, 0), . . . ]

h(t) (= shrink(h(t),       sign(h(t)))

2 +  ||h(t)||1

h(t) (= shrink(h(t),       sign(h(t)))

h(t) (= shrink(h(t),       sign(h(t)))

h(t) (= shrink(h(t),       sign(h(t)))
   
k = 0

   
    return 
    h(t)
    1
    h(t)
   
shrink(a, b) = [. . . , sign(ai) max(|ai|   bi), . . . ]
    here
shrink(a, b) = [. . . , sign(ai) max(|ai|   bi, 0), . . . ]
    h(t)
    will converge if     is bigger than the largest eigenvalue of 
    1
    1
    d>d
    h(t)
k (= h(t)
    sign(h(t)) 6= sign(h(t)
txt=1

    d>d
    d>d
k       dd>(d h(t)   x(t))
k         sign(h(t)
k ))

shrink(a, b) = [. . . , sign(ai) max(|ai|   bi, 0), . . . ]

    1

   

   

k

shrink(a, b) = [. . . , sign(ai) max(|ai|   bi), . . . ]

k       dd>(d h(t)   x(t))
sparse coding
k       dd>(d h(t)   x(t))
k         sign(h(t)
k ))
   
bx(t) = d h(x(t)) = xk s.t.
k       dd>(d h(t)   x(t))
k         sign(h(t)
k ))
topics: ista (iterative shrinkage and thresholding algorithm)
k         sign(h(t)
k ))
k         sign(h(t)
k )
    this process corresponds to the ista algorithm:
k         sign(h(t)
k )

d  epartement d   informatique
universit  e de sherbrooke

hugo.larochelle@usherbrooke.ca

sparse coding

hugo larochelle

h(x(t)) = arg min

h(t)

   

   

   

h(x(t))k6=0

2||x(t)   d h(t)||2

2 +  ||h(t)||1

5

d  ,k h(x(t))k
h(t) (= shrink(h(t),       sign(h(t)))

d

   

1

1

   

-
-

1
t

   

arg min

abstract

    d>d

math for my slides    sparse coding   .

2 +  ||h(t)||1

h(t) (= shrink(h(t),       sign(h(t)))

shrink(a, b) = [. . . , sign(ai) max(|ai|   bi, 0), . . . ]
arg min

shrink(a, b) = [. . . , sign(ai) max(|ai|   bi, 0), . . . ]

november 1, 2012
l(x(t)) = ||x(t)   d h(t)||2
h(t) (= h(t)       d>(d h(t)   x(t))
    shrink(ai, bi)
@
l(x(t)) = (d  ,k)>(d h(t)   x(t)) +   sign(h(t)
h(t) (= h(t)       d>(d h(t)   x(t))
k )
    1
    d>d
   
@h(t)
 
k
h(t) (= h(t)       d>(d h(t)   x(t))
rh(t)l(x(t)) = d>(d h(t)   x(t)) +   sign(h(t))
 
h(t) (= shrink(h(t),      )
txt=1

    initialize       (for instance to 0)
    while       has not converged
    x(t) h(t) d bx(t)
   
    return 
    h(t)
    1
    h(t)
   
shrink(a, b) = [. . . , sign(ai) max(|ai|   bi), . . . ]
    here
shrink(a, b) = [. . . , sign(ai) max(|ai|   bi, 0), . . . ]
    h(t)
    will converge if     is bigger than the largest eigenvalue of 
    1
    1
    d>d
    h(t)
k (= h(t)
    sign(h(t)) 6= sign(h(t)
txt=1

shrink(a, b) = [. . . , sign(ai) max(|ai|   bi, 0), . . . ]
    d>d
bx(t) = d h(x(t)) = xk s.t.
    d>d
h(x(t))k6=0
k       dd>(d h(t)   x(t))
l(x(t)) = ||x(t)   d h(t)||2
2 +  ||h(t)||1
k         sign(h(t)
k ))

h(t) (= shrink(h(t),       sign(h(t)))
   
2 +  ||h(t)||1
k = 0

h(t) (= shrink(h(t),       sign(h(t)))

shrink(a, b) = [. . . , sign(ai) max(|ai|   bi, 0), . . . ]

   
h(x(t)) = arg min
    1

h(t) (= shrink(h(t),       sign(h(t)))

1
2||x(t)   d h(t)||2

1
2||x(t)   d h(t)||2

2 +  ||h(t)||1

d  ,k h(x(t))k

this is 

   

1

h(t)

h(t)

   

   

k

shrink(a, b) = [. . . , sign(ai) max(|ai|   bi), . . . ]

sparse coding

   
topics: coordinate descent for sparse coding id136
    ista updates all hidden units simultaneously  

    this is wasteful if many hidden units have already converged

   

    idea: update only the       most promising       hidden unit

6

    see coordinate descent algorithm in 

gregor and lecun, 2010.

- learning fast approximations of sparse coding.

    shrink(ai, bi)
    1
    this algorithm has the advantage of not requiring a learning rate 
   

    d>d

