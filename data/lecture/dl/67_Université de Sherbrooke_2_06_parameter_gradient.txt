neural networks
training neural networks - parameter gradient

   

   

   

arg min

abstract

t xt

l(f (x(t);    ), y(t)) +     (   )

feedforward neural network

math for my slides    feedforward neural network   .

september 13, 2012
hugo larochelle
hugo larochelle

d  epartement d   informatique
universit  e de sherbrooke
d  epartement d   informatique
universit  e de sherbrooke

machine learning

    9w,t    x(t   ) =pt6=t    wtx(t)
    r(x) ={x2rh|9w x =pj wjx  ,j}
    {x2rh| x /2r(x)}
    { i,ui| xui =  iui et u>i uj = 1i=j}

t xt
t xt
    l(f (x(t);    ), y(t))
    l(f (x(t);    ), y(t))
    l(f (x(t);    ), y(t))
       (   )
t pt r   l(f (x(t);    ), y(t))    r      (   )
      =   1
       (   )
       (   )
topics: stochastic id119 (sgd)
t pt r   l(f (x(t);    ), y(t))    r      (   )
   
              +  
t xt
      =   1
1
t pt r   l(f (x(t);    ), y(t))    r      (   )
l(f (x(t);    ), y(t)) +     (   )
arg min
      =   1
    algorithm that performs updates after each example
    {x 2 rd | rxf (x) = 0}
    f (x)
              +  
    v>r2
xf (x)v > 0 8v
    initialize           (                                                                    )
    {x 2 rd | rxf (x) = 0}
            {w(1), b(1), . . . , w(l+1), b(l+1)}
              +  
    l(f (x(t);    ), y(t))
    v>r2
xf (x)v < 0 8v
    for n iterations
    v>r2
xf (x)v > 0 8v
      =  r   l(f (x(t);    ), y(t))    r      (   )
    l(f (x(t);    ), y(t))
       (   )
    v>r2
for each training example
xf (x)v < 0 8v
    (x(t), y(t))
t pt r   l(f (x(t);    ), y(t))    r      (   )
training epoch 
    r   l(f (x(t);    ), y(t))
      =   1
    f (x)
     
=
      =  r   l(f (x(t);    ), y(t))    r      (   )
math for my slides    feedforward neural network   .
iteration over all examples
     
              +      
       (   )
5
    l(f (x(t);    ), y(t))
    f (x)
    f (x)
    f (x)
    {x 2 rd | rxf (x) = 0}
    r      (   )
    l(f (x(t);    ), y(t))
    r   l(f (x(t);    ), y(t))
    l(f (x(t);    ), y(t))
    the id168
    l(f (x(t);    ), y(t))
    v>r2
xf (x)v > 0 8v
    f (x)c = p(y = c|x)
    r   l(f (x(t);    ), y(t))
       (   )
    a procedure to compute the parameter gradients
    r   l(f (x(t);    ), y(t))
    r   l(f (x(t);    ), y(t))
    v>r2
xf (x)v < 0 8v
    the regularizer             (and the gradient                 )
    x(t) y(t)
    r      (   )
       (   )
5
       (   )
      =  r   l(f (x(t);    ), y(t))    r      (   )
       (   )
    l(f (x), y) =  pc 1(y=c) log f (x)c =   log f (x)y =
    initialization method
    f (x)c = p(y = c|x)
    r      (   )
    r      (   )
    (x(t), y(t))
    r      (   )

    to apply this algorithm to neural network training, we need

hugo.larochelle@usherbrooke.ca
hugo.larochelle@usherbrooke.ca

math for my slides    feedforward neural network   .
math for my slides    feedforward neural network   .

september 13, 2012
september 13, 2012

math for my slides    feedforward neural network   .

abstract
abstract

5

   

-

d  epartement d   informatique
hugo larochelle
universit  e de sherbrooke

2

hugo.larochelle@usherbrooke.ca

d  epartement d   informatique
universit  e de sherbrooke

september 13, 2012
hugo.larochelle@usherbrooke.ca

september 13, 2012
abstract

abstract

feedforward neural network
hugo larochelle

3

@

=

=

exp(ac )

=
    p(y = c|x)

hugo larochelle

ra(k)(x)   log f (x)y

d  epartement d   informatique
universit  e de sherbrooke

feedforward neural network

    h(x) = g(a(x)) = g(b +pi wixi)
f (x)y  1(y=c) exp(a(l+1)(x)y)
pc0 exp(a(l+1)(x)c0)!
    r      (   )
 1
pc0 exp(a(l+1)(x)c0)
pc0 exp(a(l+1)(x)c0)  
gradient computation
    f (x)c = p(y = c|x)
    x1 xd b w1 wd
f (x)y   1(y=c)softmax(a(l+1)(x))y   softmax(a(l+1)(x))y softmax(a(l+1)(x))c   
 1
=  rh(k)(x)   log f (x)y > ra(k)(x)h(k)(x)
    x(t) y(t)
    w
=  rh(k)(x)   log f (x)y    [. . . , g0(a(k)(x)j), . . . ]
f (x)y 1(y=c)f (x)y   f (x)y f (x)c 
 1
    l(f (x), y) =  pc 1(y=c) log f (x)c =   log f (x)y
topics: loss gradient of parameters
    p(y = c|x)
    {
    o(a) = softmax(a) =h exp(a1)
pc exp(ac)i>
=   1(y=c)   f (x)c 
    o(a) = softmax(a) =h exp(a1)
pc exp(ac)i>
    partial derivative (weights):
pc exp(ac) . . .
pc exp(ac) . . .
   
    g(a) = a
    f (x)
    f (x)
  log f (x)y
    g(a) = sigm(a) =
    o(a) = softmax(a) =h exp(a1)
pc exp(ac)i>
pc exp(ac)i>
    o(a) = softmax(a) =h exp(a1)
@w (k)
1+exp( a)
    p(y = c|x)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
exp(ac )
pc exp(ac) . . .
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
ra(l+1)(x)   log f (x)y
i,j
pc exp(ac) . . .
pc exp(ac)i>
    o(a) = softmax(a) =h exp(a1)
exp(a)+exp( a) = exp(2a) 1
    g(a) = tanh(a) = exp(a) exp( a)
@a(k)(x)i
@   log f (x)y
=   (e(y)   f (x))
    f (x)
pc exp(ac) . . .
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
1
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
...
...
    p(y = c|x)
=
    p(y = c|x)
    f (x)
@a(k)(x)i
@w (k)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
    o(a) = softmax(a) =h exp(a1)
pc exp(ac)i>
    p(y = c|x)
    h(k)(x) = g(a(k)(x))
    o(a) = softmax(a) =h exp(a1)
pc exp(ac)i>
    f (x)
    h(k)(x) = g(a(k)(x))
i,j
    p(a) qi(a) a k
    g(a) = max(0, a)
pc exp(ac) . . .
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
pc exp(ac) . . .
pc exp(ac)i>
    o(a) = softmax(a) =h exp(a1)
@   log f (x)y
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
h(k 1)
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
exp(ac )
=
(x)
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
pc exp(ac) . . .
    h(k)(x) = g(a(k)(x))
    f (x)
   
    a(x) = b +pi wixi = b + w>x
j
1
...
@a(k)(x)i
    g(a) = reclin(a) = max(0, a)
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
=xi
    a(x) = b +pi wixi = b + w>x
@qi(a)
@p(a)
@p(a)
    f (x)
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
    f (x)
@qi(a)
    h(x) = g(a(x)) = g(b +pi wixi)
    h(k)(x) = g(a(k)(x))
    h(x) = g(a(x)) = g(b +pi wixi)
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
    h(k)(x) = g(a(k)(x))
    g(  ) b
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
    h(k)(x) = g(a(k)(x))
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
1
...
...
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
    w (1)
b(1)
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
xj h(x)i
    x1 xd
    x1 xd
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
i
i,j
    h(k)(x) = g(a(k)(x))
    h(k)(x) = g(a(k)(x))
@

=  ra(k)(x)   log f (x)y  h(k 1)(x)>

hugo.larochelle@usherbrooke.ca

reminder
rw(k)   log f (x)y
    a(k)(x)i = b(k)

math for my slides    feedforward neural network   .

math for my slides    feedforward neural network   .

i +pj w (k)

september 6, 2012

september 6, 2012

    p(y = c|x)

i,j h(k 1)(x)j

    p(y = c|x)

abstract

abstract

exp(2a)+1

exp(ac )

exp(ac )

exp(ac )

exp(ac )

exp(ac )

@a

@a

...

...

1

d  epartement d   informatique
universit  e de sherbrooke

hugo.larochelle@usherbrooke.ca

f (x)c   log f (x)y =  1(y=c)

feedforward neural network
hugo larochelle

4

=

=

(x)

exp(ac )

exp(ac )

    p(y = c|x)

hugo larochelle

@a(k)(x)i
@w (k)
i,j
h(k 1)
j

d  epartement d   informatique
universit  e de sherbrooke

feedforward neural network

    h(x) = g(a(x)) = g(b +pi wixi)
f (x)y  1(y=c) exp(a(l+1)(x)y)
pc0 exp(a(l+1)(x)c0)!
    r      (   )
 1
w (k)
pc0 exp(a(l+1)(x)c0)
pc0 exp(a(l+1)(x)c0)  
=
i,j
gradient computation
    f (x)c = p(y = c|x)
    x1 xd b w1 wd
@   log f (x)y
f (x)y   1(y=c)softmax(a(l+1)(x))y   softmax(a(l+1)(x))y softmax(a(l+1)(x))c   
 1
=
@a(k)(x)i
    x(t) y(t)
    w
f (x)y 1(y=c)f (x)y   f (x)y f (x)c 
 1
@   log f (x)y
    l(f (x), y) =  pc 1(y=c) log f (x)c =   log f (x)y
topics: loss gradient of parameters
    p(y = c|x)
=
    p(y = c|x)
    {
@a(k)(x)i
    o(a) = softmax(a) =h exp(a1)
pc exp(ac)i>
=   1(y=c)   f (x)c 
    o(a) = softmax(a) =h exp(a1)
pc exp(ac)i>
    gradient (weights):
pc exp(ac) . . .
pc exp(ac) . . .
   
    g(a) = a
rw(k)   log f (x)y
    f (x)
    f (x)
=  ra(k)(x)   log f (x)y  h(k 1)(x)>
    g(a) = sigm(a) =
    o(a) = softmax(a) =h exp(a1)
pc exp(ac)i>
pc exp(ac)i>
    o(a) = softmax(a) =h exp(a1)
1+exp( a)
    p(y = c|x)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
exp(ac )
pc exp(ac) . . .
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
ra(l+1)(x)   log f (x)y
pc exp(ac) . . .
    o(a) = softmax(a) =h exp(a1)
pc exp(ac)i>
exp(a)+exp( a) = exp(2a) 1
    g(a) = tanh(a) = exp(a) exp( a)
=   (e(y)   f (x))
    f (x)
pc exp(ac) . . .
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
1
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
...
...
    p(y = c|x)
    p(y = c|x)
    f (x)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
    o(a) = softmax(a) =h exp(a1)
pc exp(ac)i>
    p(y = c|x)
    h(k)(x) = g(a(k)(x))
    o(a) = softmax(a) =h exp(a1)
pc exp(ac)i>
    f (x)
    h(k)(x) = g(a(k)(x))
@
    g(a) = max(0, a)
pc exp(ac) . . .
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
  log f (x)y
pc exp(ac) . . .
pc exp(ac)i>
    o(a) = softmax(a) =h exp(a1)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
b(k)
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
exp(ac )
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
pc exp(ac) . . .
    h(k)(x) = g(a(k)(x))
    f (x)
    a(x) = b +pi wixi = b + w>x
i
1
...
    g(a) = reclin(a) = max(0, a)
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
=xi
    a(x) = b +pi wixi = b + w>x
@qi(a)
@p(a)
@p(a)
    f (x)
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
@a(k)(x)i
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
@   log f (x)y
    f (x)
@qi(a)
    h(x) = g(a(x)) = g(b +pi wixi)
    h(k)(x) = g(a(k)(x))
    h(x) = g(a(x)) = g(b +pi wixi)
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
    h(k)(x) = g(a(k)(x))
@a(k)(x)i
@b(k)
    g(  ) b
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
i +pj w (k)
    h(k)(x) = g(a(k)(x))
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
@   log f (x)y
1
...
...
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
    w (1)
b(1)
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
xj h(x)i
    x1 xd
    x1 xd
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
@a(k)(x)i
i
i,j
    h(k)(x) = g(a(k)(x))
    h(k)(x) = g(a(k)(x))
@

hugo.larochelle@usherbrooke.ca

    p(a) qi(a) a k
   

math for my slides    feedforward neural network   .

reminder
    a(k)(x)i = b(k)

math for my slides    feedforward neural network   .

september 6, 2012

september 6, 2012

i,j h(k 1)(x)j

    p(y = c|x)

abstract

abstract

exp(2a)+1

exp(ac )

exp(ac )

exp(ac )

exp(ac )

@a

@a

=

=

...

...

1

d  epartement d   informatique
universit  e de sherbrooke

i

hugo.larochelle@usherbrooke.ca

f (x)c   log f (x)y =  1(y=c)

feedforward neural network
hugo larochelle

5

=

exp(ac )

exp(ac )

    p(y = c|x)

hugo larochelle

d  epartement d   informatique
universit  e de sherbrooke

feedforward neural network

    h(x) = g(a(x)) = g(b +pi wixi)
f (x)y  1(y=c) exp(a(l+1)(x)y)
pc0 exp(a(l+1)(x)c0)!
    r      (   )
 1
@a(k)(x)i
pc0 exp(a(l+1)(x)c0)
pc0 exp(a(l+1)(x)c0)  
=
gradient computation
    f (x)c = p(y = c|x)
    x1 xd b w1 wd
f (x)y   1(y=c)softmax(a(l+1)(x))y   softmax(a(l+1)(x))y softmax(a(l+1)(x))c   
 1
rw(k)   log f (x)y
    x(t) y(t)
    w
=  ra(k)(x)   log f (x)y  h(k 1)(x)>
f (x)y 1(y=c)f (x)y   f (x)y f (x)c 
 1
    l(f (x), y) =  pc 1(y=c) log f (x)c =   log f (x)y
topics: loss gradient of parameters
    p(y = c|x)
=
    p(y = c|x)
    {
    o(a) = softmax(a) =h exp(a1)
pc exp(ac)i>
=   1(y=c)   f (x)c 
    o(a) = softmax(a) =h exp(a1)
pc exp(ac)i>
    partial derivative (biases):
pc exp(ac) . . .
pc exp(ac) . . .
   
    g(a) = a
@
    f (x)
    f (x)
  log f (x)y
    g(a) = sigm(a) =
    o(a) = softmax(a) =h exp(a1)
pc exp(ac)i>
pc exp(ac)i>
    o(a) = softmax(a) =h exp(a1)
@b(k)
1+exp( a)
    p(y = c|x)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
exp(ac )
pc exp(ac) . . .
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
ra(l+1)(x)   log f (x)y
pc exp(ac) . . .
pc exp(ac)i>
    o(a) = softmax(a) =h exp(a1)
@a(k)(x)i
exp(a)+exp( a) = exp(2a) 1
    g(a) = tanh(a) = exp(a) exp( a)
@   log f (x)y
=   (e(y)   f (x))
    f (x)
pc exp(ac) . . .
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
1
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
...
...
    p(y = c|x)
    p(y = c|x)
    f (x)
@a(k)(x)i
@b(k)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
    o(a) = softmax(a) =h exp(a1)
pc exp(ac)i>
    p(y = c|x)
    h(k)(x) = g(a(k)(x))
    o(a) = softmax(a) =h exp(a1)
pc exp(ac)i>
    f (x)
i
    h(k)(x) = g(a(k)(x))
    g(a) = max(0, a)
pc exp(ac) . . .
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
pc exp(ac) . . .
pc exp(ac)i>
    o(a) = softmax(a) =h exp(a1)
@   log f (x)y
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
exp(ac )
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
pc exp(ac) . . .
    h(k)(x) = g(a(k)(x))
    f (x)
    a(x) = b +pi wixi = b + w>x
1
...
@a(k)(x)i
    g(a) = reclin(a) = max(0, a)
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
=xi
    a(x) = b +pi wixi = b + w>x
@qi(a)
@p(a)
@p(a)
    f (x)
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
    f (x)
@qi(a)
    h(x) = g(a(x)) = g(b +pi wixi)
    h(k)(x) = g(a(k)(x))
    h(x) = g(a(x)) = g(b +pi wixi)
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
    h(k)(x) = g(a(k)(x))
    g(  ) b
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
rb(k)   log f (x)y
i +pj w (k)
    h(k)(x) = g(a(k)(x))
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
1
...
...
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
    w (1)
b(1)
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
xj h(x)i
    x1 xd
    x1 xd
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
i
i,j
    h(k)(x) = g(a(k)(x))
    h(k)(x) = g(a(k)(x))
@

hugo.larochelle@usherbrooke.ca

    p(a) qi(a) a k
   

math for my slides    feedforward neural network   .

= ra(k)(x)   log f (x)y

reminder
    a(k)(x)i = b(k)

math for my slides    feedforward neural network   .

september 6, 2012

september 6, 2012

i,j h(k 1)(x)j

    p(y = c|x)

abstract

abstract

exp(2a)+1

exp(ac )

exp(ac )

exp(ac )

exp(ac )

@a

@a

=

=

...

...

1

d  epartement d   informatique
universit  e de sherbrooke

i

hugo.larochelle@usherbrooke.ca

f (x)c   log f (x)y =  1(y=c)

feedforward neural network
hugo larochelle

i

6

=

=

=

exp(ac )

exp(ac )

@b(k)

@a(k)(x)i

hugo larochelle

d  epartement d   informatique
universit  e de sherbrooke

feedforward neural network

    h(x) = g(a(x)) = g(b +pi wixi)
f (x)y  1(y=c) exp(a(l+1)(x)y)
pc0 exp(a(l+1)(x)c0)!
    r      (   )
 1
pc0 exp(a(l+1)(x)c0)
pc0 exp(a(l+1)(x)c0)  
gradient computation
@   log f (x)y
    f (x)c = p(y = c|x)
    x1 xd b w1 wd
f (x)y   1(y=c)softmax(a(l+1)(x))y   softmax(a(l+1)(x))y softmax(a(l+1)(x))c   
 1
@a(k)(x)i
    x(t) y(t)
    w
@   log f (x)y
f (x)y 1(y=c)f (x)y   f (x)y f (x)c 
 1
    l(f (x), y) =  pc 1(y=c) log f (x)c =   log f (x)y
topics: loss gradient of parameters
    p(y = c|x)
=
=
    p(y = c|x)
    {
@a(k)(x)i
    o(a) = softmax(a) =h exp(a1)
pc exp(ac)i>
=   1(y=c)   f (x)c 
pc exp(ac)i>
    o(a) = softmax(a) =h exp(a1)
    gradient (biases):
pc exp(ac) . . .
pc exp(ac) . . .
   
    g(a) = a
    p(y = c|x)
    f (x)
rb(k)   log f (x)y
    f (x)
    g(a) = sigm(a) =
    o(a) = softmax(a) =h exp(a1)
pc exp(ac)i>
pc exp(ac)i>
    o(a) = softmax(a) =h exp(a1)
1+exp( a)
    p(y = c|x)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
= ra(k)(x)   log f (x)y
exp(ac )
pc exp(ac) . . .
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
ra(l+1)(x)   log f (x)y
pc exp(ac) . . .
pc exp(ac)i>
    o(a) = softmax(a) =h exp(a1)
exp(a)+exp( a) = exp(2a) 1
    g(a) = tanh(a) = exp(a) exp( a)
=   (e(y)   f (x))
    f (x)
pc exp(ac) . . .
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
1
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
...
...
    p(y = c|x)
    p(y = c|x)
    f (x)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
    o(a) = softmax(a) =h exp(a1)
pc exp(ac)i>
    p(y = c|x)
    h(k)(x) = g(a(k)(x))
    o(a) = softmax(a) =h exp(a1)
pc exp(ac)i>
    f (x)
    h(k)(x) = g(a(k)(x))
    g(a) = max(0, a)
pc exp(ac) . . .
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
pc exp(ac) . . .
pc exp(ac)i>
    o(a) = softmax(a) =h exp(a1)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
exp(ac )
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
pc exp(ac) . . .
    h(k)(x) = g(a(k)(x))
    f (x)
    a(x) = b +pi wixi = b + w>x
1
...
    g(a) = reclin(a) = max(0, a)
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
=xi
    a(x) = b +pi wixi = b + w>x
@qi(a)
@p(a)
@p(a)
    f (x)
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
    f (x)
@qi(a)
    h(x) = g(a(x)) = g(b +pi wixi)
    h(k)(x) = g(a(k)(x))
    h(x) = g(a(x)) = g(b +pi wixi)
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
    h(k)(x) = g(a(k)(x))
    g(  ) b
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
    h(1)(x) h(2)(x) w(1) w(2) w(3) b(1) b(2) b(3)
    h(k)(x) = g(a(k)(x))
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
1
...
...
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
    w (1)
b(1)
    a(k)(x) = b(k) + w(k)h(k 1)x (h(0)(x) = x)
xj h(x)i
    x1 xd
    x1 xd
    h(l+1)(x) = o(a(l+1)(x)) = f (x)
i
i,j
    h(k)(x) = g(a(k)(x))
    h(k)(x) = g(a(k)(x))
@

hugo.larochelle@usherbrooke.ca

    p(a) qi(a) a k
   

math for my slides    feedforward neural network   .

reminder
    a(k)(x)i = b(k)

math for my slides    feedforward neural network   .

i +pj w (k)

september 6, 2012

september 6, 2012

i,j h(k 1)(x)j

    p(y = c|x)

abstract

abstract

exp(2a)+1

exp(ac )

exp(ac )

exp(ac )

exp(ac )

@a

@a

...

...

1

d  epartement d   informatique
universit  e de sherbrooke

hugo.larochelle@usherbrooke.ca

f (x)c   log f (x)y =  1(y=c)

