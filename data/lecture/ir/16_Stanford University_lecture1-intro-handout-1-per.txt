introduction to

information retrieval

introducing information retrieval 

and web search

information retrieval

    information retrieval (ir) is finding material

(usually documents) of an unstructured nature 
(usually text) that satisfies an information need
from within large collections (usually stored on 
computers).

    these days we frequently think first of web search, 

but there are many other cases:

    e-mail search
    searching your laptop
    corporate knowledge bases
    legal information retrieval

2

unstructured (text) vs. structured (database) 

data in the mid-nineties

250

200

150

100

50

0

data volume

market cap

unstructured

structured

3

unstructured (text) vs. structured (database) 

data today

250

200

150

100

50

0

data volume

market cap

unstructured

structured

4

basic assumptions of information retrieval

sec. 1.1

    collection: a set of documents

    assume it is a static collection for the moment

    goal: retrieve documents with information 

that is relevant to the user   s information need
and helps the user complete a task

5

the classic search model

user task

info need

query

get rid of mice in a 
politically correct way

info about removing mice
without killing them 

misconception?

misformulation?

how trap mice alive

searc

h

search
engine

results

collection

query

refinement 

how good are the retrieved docs?

sec. 1.1

  precision : fraction of retrieved docs that are 

relevant to the user   s information need

  recall : fraction of relevant docs in collection 

that are retrieved

  more precise definitions and measurements to 

follow later

7

introduction to

information retrieval

term-document incidence matrices

unstructured data in 1620

sec. 1.1

    which plays of shakespeare contain the words 

brutus and caesar but not calpurnia?

    one could grep all of shakespeare   s plays for 

brutus and caesar, then strip out lines containing 
calpurnia?

    why is that not the answer?

    slow (for large corpora)
    not calpurnia is non-trivial
    other operations (e.g., find the word romans near

countrymen) not feasible

    ranked retrieval (best documents to return)

    later lectures

9

term-document incidence matrices

sec. 1.1

antony and cleopatra

julius caesar

the tempest

haid113t

othello

macbeth

antony

brutus

caesar

calpurnia

cleopatra

mercy

worser

1

1

1

0

1

1

1

1

1

1

1

0

0

0

0

0

0

0

0

1

1

0

1

1

0

0

1

1

0

0

1

0

0

1

1

1

0

1

0

0

1

0

brutus and caesar but not
calpurnia

1 if play contains 
word, 0 otherwise

incidence vectors

sec. 1.1

    so we have a 0/1 vector for each term.

    to answer query: take the vectors for brutus, 

caesar and calpurnia (complemented)  
bitwise and.

    110100 and

    110111 and

    101111 = 

    100100

antony

brutus

caesar

calpurnia

cleopatra

mercy

worser

antony and cleopatra

julius caesar

the tempest

haid113t

othello

macbeth

1

1

1

0

1

1

1

1

1

1

1

0

0

0

0

0

0

0

0

1

1

0

1

1

0

0

1

1

0

0

1

0

0

1

1

1

0

1

0

0

1

0

11

answers to query

sec. 1.1

    antony and cleopatra, act iii, scene ii
agrippa [aside to domitius enobarbus]: why, enobarbus,

when antony found julius caesar dead,

he cried almost to roaring; and he wept

when at philippi he found brutus slain.

    haid113t, act iii, scene ii
lord polonius: i did enact julius caesar i was killed i    the

capitol; brutus killed me.

12

bigger collections

sec. 1.1

    consider n = 1 million documents, each with 

about 1000 words.

    avg 6 bytes/word including 

spaces/punctuation 

    6gb of data in the documents.

    say there are m = 500k distinct terms among 

these.

13

can   t build the matrix

sec. 1.1

    500k x 1m matrix has half-a-trillion 0   s and 1   s.

    but it has no more than one billion 1   s.

why?

    matrix is extremely sparse.

    what   s a better representation?

    we only record the 1 positions.

14

introduction to

information retrieval

the inverted index

the key data structure underlying 

modern ir

inverted index

sec. 1.2

    for each term t, we must store a list of all 

documents that contain t.

    identify each doc by a docid, a document serial 

number

    can we used fixed-size arrays for this?
brutus

4 11 31 45 173

1 2

174

caesar

calpurnia

1

2

4

5 6

16 57 132

2

31

54 101

what happens if the word caesar
is added to document 14? 

16

inverted index

sec. 1.2

    we need variable-size postings lists

    on disk, a continuous run of postings is normal 

and best

posting
    in memory, can use linked lists or variable length 

arrays

brutus

caesar

    some tradeoffs in size/ease of insertion
5 6

1

2

4

16 57 132

1 2

4 11 31 45 173

174

calpurnia

2

31

54 101

dictionary

postings

sorted by docid (more later on why).

17

inverted index construction

sec. 1.2

documents to

be indexed

friends, romans, countrymen.

tokenizer

token stream

friends

romans

countrymen

linguistic modules

modified tokens

friend

roman

countryman

inverted index

indexer

friend

roman

countryman

2

1

4

2

13

16

initial stages of text processing

    id121

    cut character sequence into word tokens
    deal with    john   s   , a state-of-the-art solution

    id172

    map text and query term to same form

    you want u.s.a. and usa to match

    id30

    we may wish different forms of a root to match

    authorize, authorization

    stop words

    we may omit very common words (or not)

    the, a, to, of

indexer steps: token sequence

sec. 1.2

    sequence of (modified token, document id) pairs.

doc 1

doc 2

i did enact julius

caesar i was killed 

i    the capitol; 

brutus killed me.

so let it be with

caesar. the noble
brutus hath told you
caesar was ambitious

indexer steps: sort

sec. 1.2

    sort by terms

   

and then docid 

core indexing step

indexer steps: dictionary & postings

sec. 1.2

    multiple term entries 
in a single document 
are merged.

    split into dictionary 

and postings

    doc. frequency 

information is added.

why frequency?
will discuss later.

where do we pay in storage?

sec. 1.2

terms 

and 
counts

lists of 
docids

ir system 
implementation
    how do we 

index efficiently?

    how much 

storage do we 
need?

pointers

23

introduction to

information retrieval

query processing with an inverted index

the index we just built

sec. 1.3

    how do we process a query?

our focus

    later - what kinds of queries can we process?

25

query processing: and

sec. 1.3

    consider processing the query:

brutus and caesar

    locate brutus in the dictionary;

    retrieve its postings.

    locate caesar in the dictionary;

    retrieve its postings.

       merge    the two postings (intersect the document 
brutus
brutus
brutus
brutus

128

16

32

64

2

4

8

sets):

1

2

3

5

8

13

21

34

caesar
caesar
caesar
caesar

26

sec. 1.3

the merge

    walk through the two postings 

simultaneously, in time linear in the total 
number of postings entries

2

1

4

2

8

3

16

32

64

128

brutus
brutus
brutus
brutus

5

8

13

21

34

caesar
caesar
caesar
caesar

if the list lengths are x and y, the merge takes o(x+y)
operations.
crucial: postings sorted by docid.

27

intersecting two postings lists

(a    merge    algorithm)

28

introduction to

information retrieval

the boolean retrieval model

& extended boolean models

boolean queries: exact match

sec. 1.3

    the boolean retrieval model is being able to ask a 

query that is a boolean expression:

    boolean queries are queries using and, or and not

to join query terms

    views each document as a set of words

    is precise: document matches condition or not.

    perhaps the simplest model to build an ir system on

    primary commercial retrieval tool for 3 decades. 

    many search systems you still use are boolean:

    email, library catalog, mac os x spotlight

30

example: westlaw http://www.westlaw.com/

sec. 1.4

    largest commercial (paying subscribers) 

legal search service (started 1975; ranking 
added 1992; new federated search added 
2010)

    tens of terabytes of data; ~700,000 users
    majority of users still use boolean queries
    example query:

    what is the statute of limitations in cases 

involving the federal tort claims act?

    limit! /3 statute action /s federal /2 

tort /3 claim

    /3 = within 3 words, /s = in same sentence

31

example: westlaw   http://www.westlaw.com/

sec. 1.4

    another example query:

    requirements for disabled people to be able to 

access a workplace

    disabl! /p access! /s work-site work-place 

(employment /3 place

    note that space is disjunction, not conjunction!
    long, precise queries; proximity operators; 

incrementally developed; not like web search
    many professional searchers still like boolean 

search
    you know exactly what you are getting

    but that doesn   t mean it actually works better   .

boolean queries: 

more general merges

sec. 1.3

    exercise: adapt the merge for the queries:

brutus and not caesar

brutus or not caesar

    can we still run through the merge in time 

o(x+y)?   what can we achieve?

33

sec. 1.3

merging

what about an arbitrary boolean formula?

(brutus or caesar) and not

(antony or cleopatra)

    can we always merge in    linear    time?

    linear in what?

    can we do better?

34

query optimization

sec. 1.3

    what is the best order for query 

processing?

    consider a query that is an and of n terms.

    for each of the n terms, get its postings, 
brutus
8 16 32 64 128

then and them together.

2 4

caesar

calpurnia

1

2

3

5 8

16 21 34

13 16

query: brutus and calpurnia and caesar

35

query optimization example

sec. 1.3

    process in order of increasing freq:

    start with smallest set, then keep cutting further.

this is why we kept

document freq. in dictionary

brutus

caesar

calpurnia

2 4

8 16 32 64 128

1

2

3

5 8

16 21 34

13 16

execute the query as (calpurnia and brutus) and caesar.

36

more general optimization

sec. 1.3

    e.g., (madding or crowd) and (ignoble or 

strife)

    get doc. freq.   s for all terms.

    estimate the size of each or by the sum of its 

doc. freq.   s (conservative).

    process in increasing order of or sizes.

37

exercise

    recommend a query 

processing order for

(tangerine or trees) and
(marmalade or skies) and
(kaleidoscope or eyes)

    which two terms should we 

process first?

 term
  eyes
  kaleidoscope
  marmalade
  skies
  tangerine
  trees

freq  
213312
87009
107913
271658
46653
316812

38

query processing exercises

    exercise: if the query is friends and romans and 
(not countrymen), how could we use the freq of 
countrymen?

    exercise: extend the merge to an arbitrary 
boolean query.  can we always guarantee 
execution in time linear in the total postings size?

    hint: begin with the case of a boolean formula

query: in this, each query term appears only once 
in the query.

39

exercise

    try the search feature at 

http://www.rhymezone.com/shakespeare/

    write down five search features you think it 

could do better

40

introduction to

information retrieval

phrase queries and positional indexes

phrase queries

sec. 2.4

    we want to be able to answer queries such as 

   stanford university        as a phrase

    thus the sentence    i went to university at 

stanford    is not a match. 
    the concept of phrase queries has proven easily 
understood by users; one of the few    advanced 
search    ideas that works

    many more queries are implicit phrase queries

    for this, it no longer suffices to store only

<term : docs> entries

a first attempt: biword indexes

sec. 2.4.1

    index every consecutive pair of terms in the text 

as a phrase

    for example the text    friends, romans, 

countrymen    would generate the biwords

    friends romans

    romans countrymen

    each of these biwords is now a dictionary term

    two-word phrase query-processing is now 

immediate.

longer phrase queries

sec. 2.4.1

    longer phrases can be processed by breaking 

them down

    stanford university palo alto can be broken into 

the boolean query on biwords:

stanford university and university palo and palo

alto

without the docs, we cannot verify that the docs 
matching the above boolean query do contain 
the phrase.

can have false positives!

issues for biword indexes

sec. 2.4.1

    false positives, as noted before

    index blowup due to bigger dictionary

    infeasible for more than biwords, big even for 

them

    biword indexes are not the standard solution 

(for all biwords) but can be part of a 
compound strategy

solution 2: positional indexes

sec. 2.4.2

    in the postings, store, for each term the 
position(s) in which tokens of it appear:

<term, number of docs containing term;

doc1: position1, position2     ;

doc2: position1, position2     ;

etc.>

positional index example

sec. 2.4.2

<be: 993427;
1: 7, 18, 33, 72, 86, 231;
2: 3, 149;
4: 17, 191, 291, 430, 434;
5: 363, 367,    >

which of docs 1,2,4,5
could contain    to be

or not to be   ?

    for phrase queries, we use a merge 

algorithm recursively at the document level

    but we now need to deal with more than 

just equality

processing a phrase query

sec. 2.4.2

    extract inverted index entries for each distinct 

term: to, be, or, not.

    merge their doc:position lists to enumerate all 

positions with    to be or not to be   .

    to: 

    2:1,17,74,222,551; 4:8,16,190,429,433; 7:13,23,191; ...

    be:  

    1:17,19; 4:17,191,291,430,434; 5:14,19,101; ...

    same general method for proximity searches

proximity queries

sec. 2.4.2

    limit! /3 statute /3 federal /2 tort 
    again, here, /id116    within k words of   .

    clearly, positional indexes can be used for 

such queries; biword indexes cannot.

    exercise: adapt the linear merge of postings to 

handle proximity queries.  can you make it 
work for any value of k?
    this is a little tricky to do correctly and efficiently
    see figure 2.12 of iir

positional index size

sec. 2.4.2

    a positional index expands postings storage 

substantially

    even though indices can be compressed

    nevertheless, a positional index is now 

standardly used because of the power and 
usefulness of phrase and proximity queries     
whether used explicitly or implicitly in a 
ranking retrieval system.

positional index size

sec. 2.4.2

    need an entry for each occurrence, not just 

once per document

    index size depends on average document size

why?

    average web page has <1000 terms

    sec filings, books, even some epic poems     easily 

100,000 terms

    consider a term with frequency 0.1%

document size

postings

positional postings

1000

100,000

1

1

1

100

rules of thumb

sec. 2.4.2

    a positional index is 2   4 as large as a non-

positional index

    positional index size 35   50% of volume of 

original text

    caveat: all of this holds for    english-like    

languages

combination schemes

sec. 2.4.3

    these two approaches can be profitably 

combined
    for particular phrases (   michael jackson   ,    britney 

spears   ) it is inefficient to keep on merging positional 
postings lists

    even more so for phrases like    the who   

    williams et al. (2004) evaluate a more 

sophisticated mixed indexing scheme
    a typical web query mixture was executed in    of the 

time of using just a positional index

    it required 26% more space than having a positional 

index alone

introduction to

information retrieval

structured vs. unstructured data

ir vs. databases:

structured vs unstructured data

    structured data tends to refer to information 

in    tables   

employee

manager

smith

chang

ivy

jones

smith

smith

salary

50000

60000

50000

typically allows numerical range and exact match
(for text) queries, e.g.,

salary < 60000 and manager = smith.

55

unstructured data

    typically refers to free text

    allows

    keyword queries including operators

    more sophisticated    concept    queries e.g.,

    find all web pages dealing with drug abuse

    classic model for searching text documents

56

semi-structured data

    in fact almost no data is    unstructured   
    e.g., this slide has distinctly identified zones such 

as the title and bullets

        to say nothing of linguistic structure

    facilitates    semi-structured    search such as
    title contains data and bullets contain search

    or even

    title is about object oriented programming and 

author something like stro*rup

    where * is the wild-card operator

57

