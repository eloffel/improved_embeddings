introduction to information retrieval
introduction to information retrieval

introduction to

information retrieval

document ingestion

introduction to information retrieval
introduction to information retrieval

recall the basic indexing pipeline

documents to
be indexed

friends, romans, countrymen.

tokenizer

token stream

friends romans countrymen

linguistic 
modules

modified tokens

friend

roman

countryman

inverted index

indexer

friend

roman

countryman

2

1

4

2

13

16

introduction to information retrieval
introduction to information retrieval

sec. 2.1

parsing a document

  what format is it in?

  pdf/word/excel/html?

  what language is it in?

  what character set is in use?

  (cp1252, utf-8,    )

each of these is a classification problem, 
which we will study later in the course.

but these tasks are often done heuristically    

introduction to information retrieval
introduction to information retrieval

sec. 2.1

complications: format/language

  documents being indexed can include docs from 

many different languages
  a single index may contain terms from many languages.

  sometimes a document or its components can 

contain multiple languages/formats
  french email with a german pdf attachment.
  french email quote clauses from an english-language 

contract

  there are commercial and open source libraries that 

can handle a lot of this stuff

introduction to information retrieval
introduction to information retrieval

sec. 2.1

complications: what is a document?

we return from our query    documents    but there are 
often interesting questions of grain size:

what is a unit document?

  a file?
  an email?  (perhaps one of many in a single mbox file)

  what about an email with 5 attachments?

  a group of files (e.g., ppt or latex split over html pages)

introduction to information retrieval
introduction to information retrieval

introduction to

information retrieval

tokens

introduction to information retrieval
introduction to information retrieval

sec. 2.2.1

id121

  input:    friends, romans and countrymen   

  output: tokens

  friends

  romans

  countrymen

  a token is an instance of a sequence of characters

  each such token is now a candidate for an index 

entry, after further processing

  described below

  but what are valid tokens to emit?

introduction to information retrieval
introduction to information retrieval

sec. 2.2.1

id121

  issues in id121:

  finland   s capital    

finland and s?  finlands? finland   s?

  hewlett-packard     hewlett and packard as two 

tokens?

  state-of-the-art: break up hyphenated sequence.  

  co-education

  lowercase, lower-case, lower case ?

  it can be effective to get the user to put in possible hyphens

  san francisco: one token or two?  

  how do you decide it is one token?

introduction to information retrieval
introduction to information retrieval

sec. 2.2.1

numbers

  3/20/91

  55 b.c.

  b-52

mar. 12, 1991

20/3/91

  my pgp key is 324a3df234cb23e

  (800) 234-2333

  often have embedded spaces

  older ir systems may not index numbers

  but often very useful: think about things like looking up error 

codes/stacktraces on the web

  (one answer is using id165s: iir ch. 3)

  will often index    meta-data    separately

  creation date, format, etc.

introduction to information retrieval
introduction to information retrieval

sec. 2.2.1

id121: language issues

  french

  l'ensemble     one token or two?

  l ? l    ? le ?

  want l   ensemble to match with un ensemble

  until at least 2003, it didn   t on google

  internationalization!

  german noun compounds are not segmented

  lebensversicherungsgesellschaftsangestellter

     life insurance company employee   

  german retrieval systems benefit greatly from a compound splitter 

module

  can give a 15% performance boost for german 

introduction to information retrieval
introduction to information retrieval

sec. 2.2.1

id121: language issues

  chinese and japanese have no spaces between 

words:
                                                              

  not always guaranteed a unique id121

  further complicated in japanese, with multiple 

alphabets intermingled

  dates/amounts in multiple formats

                  500                                       
                  
                                       $500k(            6,000                        )
                                       
                  
                  
                                       

katakana hiragana

kanji romaji

end-user can express query entirely in hiragana!

introduction to information retrieval
introduction to information retrieval

sec. 2.2.1

id121: language issues

  arabic (or hebrew) is basically written right to left, 
but with certain items like numbers written left to 
right

  words are separated, but letter forms within a word 

form complex ligatures

 

                                                start

     algeria achieved its independence in 1962 after 132 

years of french occupation.   

  with unicode, the surface presentation is complex, but the 

stored form is  straightforward

introduction to information retrieval
introduction to information retrieval

introduction to

information retrieval

terms

the things indexed in an ir system

introduction to information retrieval
introduction to information retrieval

sec. 2.2.2

stop words

  with a stop list, you exclude from the dictionary 

entirely the commonest words. intuition:
  they have little semantic content: the, a, and, to, be

  there are a lot of them: ~30% of postings for top 30 words

  but the trend is away from doing this:

  good compression techniques (iir 5) means the space for including 

stop words in a system is very small

  good query optimization techniques (iir 7) mean you pay little at 

query time for including stop words.

  you need them for:

  phrase queries:    king of denmark   

  various song titles, etc.:    let it be   ,    to be or not to be   

     relational    queries:    flights to london   

introduction to information retrieval
introduction to information retrieval

sec. 2.2.3

id172 to terms

  we may need to    normalize    words in indexed text 

as well as query words into the same form

  we want to match u.s.a. and usa

  result is terms: a term is a (normalized) word type, 

which is an entry in our ir system dictionary

  we most commonly implicitly define equivalence 

classes of terms by, e.g., 

  deleting periods to form a term

  u.s.a., usa      usa

  deleting hyphens to form a term

  anti-discriminatory, antidiscriminatory     antidiscriminatory

introduction to information retrieval
introduction to information retrieval

sec. 2.2.3

id172: other languages

  accents: e.g., french r  sum   vs. resume.

  umlauts: e.g., german: tuebingen vs. t  bingen

  should be equivalent

  most important criterion:

  how are your users like to write their queries for these 

words?

  even in languages that standardly have accents, users 

often may not type them

  often best to normalize to a de-accented term

  tuebingen, t  bingen, tubingen     tubingen

introduction to information retrieval
introduction to information retrieval

sec. 2.2.3

id172: other languages

  id172 of things like date forms

  7            30             vs. 7/30
  japanese use of kana vs. chinese characters

  id121 and id172 may depend on the 

language and so is intertwined with language 
detection

is this

morgen will ich in mit     

german    mit   ?

  crucial: need to    normalize    indexed text as well as 

query terms identically

introduction to information retrieval
introduction to information retrieval

sec. 2.2.3

case folding

  reduce all letters to lower case

  exception: upper case in mid-sentence?

  e.g., general motors

  fed vs. fed

  sail vs. sail

  often best to lower case everything, since users will use 

lowercase regardless of    correct    capitalization   

  longstanding google example:         [fixed in 2011   ]

  query c.a.t.  

  #1 result is for    cats    (well, lolcats) not caterpillar inc.

introduction to information retrieval
introduction to information retrieval

sec. 2.2.3

id172 to terms

  an alternative to equivalence classing is to do 

asymmetric expansion

  an example of where this may be useful

  enter: window

search: window, windows

  enter: windows

search: windows, windows, window

  enter: windows

search: windows

  potentially more powerful, but less efficient

introduction to information retrieval
introduction to information retrieval

thesauri and soundex

  do we handle synonyms and homonyms?
  e.g., by hand-constructed equivalence classes

  car = automobile

color = colour

  we can rewrite to form equivalence-class terms

  when the document contains automobile, index it under car-

automobile (and vice-versa)
  or we can expand a query

  when the query contains automobile, look under car as well

  what about spelling mistakes?

  one approach is soundex, which forms equivalence classes 

of words based on phonetic heuristics

  more in iir 3 and iir 9

introduction to information retrieval
introduction to information retrieval

introduction to

information retrieval

id30 and lemmatization

introduction to information retrieval
introduction to information retrieval

sec. 2.2.4

lemmatization

  reduce inflectional/variant forms to base form

  e.g.,

  am, are, is     be

  car, cars, car's, cars'     car

  the boy's cars are different colors     the boy car be 

different color

  lemmatization implies doing    proper    reduction to 

dictionary headword form

introduction to information retrieval
introduction to information retrieval

sec. 2.2.4

id30

  reduce terms to their    roots    before indexing

     id30    suggests crude affix chopping

  language dependent

  e.g., automate(s), automatic, automation all reduced to 

automat.

for example compressed 
and compression are both 
accepted as equivalent to 
compress.

for exampl compress and
compress ar both accept
as equival to compress

introduction to information retrieval
introduction to information retrieval

sec. 2.2.4

porter   s algorithm

  commonest algorithm for id30 english

  results suggest it   s at least as good as other id30 

options

  conventions + 5 phases of reductions

  phases applied sequentially

  each phase consists of a set of commands

  sample convention: of the rules in a compound command, 

select the one that applies to the longest suffix.

introduction to information retrieval
introduction to information retrieval

sec. 2.2.4

typical rules in porter

  sses     ss
  ies     i
  ational     ate
  tional     tion

  weight of word sensitive rules

  (m>1) ement    

  replacement     replac

  cement      cement

introduction to information retrieval
introduction to information retrieval

sec. 2.2.4

other stemmers

  other stemmers exist:

  lovins stemmer 

  http://www.comp.lancs.ac.uk/computing/research/id30/general/lovins.htm

  single-pass, longest suffix removal (about 250 rules)

  paice/husk stemmer

  snowball

  full morphological analysis (lemmatization)

  at most modest benefits for retrieval

introduction to information retrieval
introduction to information retrieval

sec. 2.2.4

language-specificity

  the above methods embody transformations that 

are

  language-specific, and often

  application-specific

  these are    plug-in    addenda to the indexing process

  both open source and commercial plug-ins are 

available for handling these

introduction to information retrieval
introduction to information retrieval

sec. 2.2.4

does id30 help?

  english: very mixed results. helps recall for some 

queries but harms precision on others

  e.g., operative (dentistry)     oper

  definitely useful for spanish, german, finnish,    

  30% performance gains for finnish!

introduction to information retrieval
introduction to information retrieval

introduction to

information retrieval

faster postings merges:
skip pointers/skip lists

introduction to information retrieval
introduction to information retrieval

sec. 2.3

recall basic merge

  walk through the two postings simultaneously, in 
time linear in the total number of postings entries

2

8

2

1

4

2

8

3

41 48

64

128

brutus

8

11 17 21

31

caesar

if the list lengths are m and n, the merge takes o(m+n)
operations.

can we do better?
yes (if the index isn   t changing too fast).

introduction to information retrieval
introduction to information retrieval

sec. 2.3

augment postings with skip pointers
(at indexing time)

41

128

2

4

8

41 48

64

128

31

2

3

8 11

17 21

31

11
1

  why?

  to skip postings that will not figure in the search 

results.

  how?

  where do we place skip pointers?

introduction to information retrieval
introduction to information retrieval

sec. 2.3

query processing with skip pointers

41

128

2

4

8

41 48

64

128

11
1

31

2

3

8

11

17 21

31

suppose we   ve stepped through the lists until we 
process 8 on each list. we match it and advance.

we then have 41 and 11 on the lower.  11 is smaller.

but the skip successor of 11 on the lower list is 31, so
we can skip ahead past the intervening postings.

introduction to information retrieval
introduction to information retrieval

sec. 2.3

where do we place skips?

  tradeoff:

  more skips     shorter skip spans     more likely to skip.  

but lots of comparisons to skip pointers.

  fewer skips     few pointer comparison, but then long skip 

spans     few successful skips.

introduction to information retrieval
introduction to information retrieval

sec. 2.3

placing skips

  simple heuristic: for postings of length l, use    l
evenly-spaced skip pointers     [moffat and zobel 1996]

  this ignores the distribution of query terms.

  easy if the index is relatively static; harder if l keeps 

changing because of updates.

  this definitely used to help; with modern hardware it 
may not unless you   re memory-based   [bahle et al. 2002] 

  the i/o cost of loading a bigger postings list can outweigh 

the gains from quicker in memory merging!

