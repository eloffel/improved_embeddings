introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

introduction to 
information retrieval 

cs276 

information retrieval and web search 
pandu nayak and prabhakar raghavan 
lecture 7: scoring and results assembly 

lecture 6     i introduced a bug 

    in my anxiety to avoid taking the log of zero, i 

rewrote 
 
 
 
as  
 
 

2 

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

recap: tf-idf weighting 

recap: queries as vectors 

    the tf-idf weight of a term is the product of its tf 

weight and its idf weight. 

 

 

    best known weighting scheme in information retrieval 
    increases with the number of occurrences within a 

document 

    increases with the rarity of the term in the collection 

    key idea 1: do the same for queries: represent them 

as vectors in the space 

    key idea 2: rank documents according to their 

proximity to the query in this space 

    proximity = similarity of vectors 

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

recap: cosine(query,document) 

this lecture 

    speeding up vector space ranking 
    putting together a complete search 

system 
    will require learning about  a number of 

miscellaneous topics and heuristics 

q,d

q

d

q

d

1 

                  otherwise 0,0   tfif, tflog  1  10t,dt,dt,dw                  otherwise 0,0   tfif),tf(1 log  10t,dt,dt,dw)df/(log)tflog1(w10,10,tdtndt                                          viiviiviiidqdqddqqdqdqdq12121),cos(                              introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

computing cosine scores 

efficient cosine ranking 

    find the k docs in the collection    nearest    to the 

query     k largest query-doc cosines. 

    efficient ranking: 

    computing a single cosine efficiently. 
    choosing the k largest cosine values efficiently. 

    can we do this without computing all n cosines? 

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

efficient cosine ranking 

special case     unweighted queries 

    what we   re doing in effect: solving the k-nearest 

    no weighting on query terms 

neighbor problem for a query vector 

    in general, we do not know how to do this  efficiently 

for high-dimensional spaces 

    but it is solvable for short queries, and standard 

indexes support this well 

    assume each query term occurs only once 

    then for ranking, don   t need to normalize query 

vector 
    slight simplification of algorithm from lecture 6 

introduction to information retrieval 

  

computing the k largest cosines: 
selection vs. sorting 

  

introduction to information retrieval 

  

  

use heap for selecting top k 

    typically we want to retrieve the top k docs (in the 

    binary tree in which each node   s value > the values 

cosine ranking for the query) 
    not to totally order all docs in the collection 

    can we pick off docs with k highest cosines? 
    let j = number of docs with nonzero cosines 

    we seek the k best of these j 

of children 

    takes 2j operations to construct, then each of k 

   winners    read off in 2log j steps. 

    for j=1m, k=100, this is about 10% of the cost of 

sorting. 

2 

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

bottlenecks 

    primary computational bottleneck in scoring: cosine 

computation 

    can we avoid all this computation? 
    yes, but may sometimes get it wrong 

cosine similarity is only a proxy 

    user has a task and a query formulation 
    cosine matches docs to query 
    thus cosine is anyway a proxy for user happiness 
    if we get a list of k docs    close    to the top k by cosine 

    a doc not in the top k may creep into the list of k 

measure, should be ok 

output docs 

    is this such a bad thing? 

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

generic approach 

index elimination 

    find a set a  of contenders, with k < |a| << n 

    a does not necessarily contain the top k, but has 

many docs from among the top k 

    return the top k docs in a 

    think of a as pruning non-contenders 
    the same approach is also used for other (non-

cosine) scoring functions 

    will look at several schemes following this approach 

    basic algorithm cosine computation algorithm only 
considers docs containing at least one query term 

    take this further: 

    only consider high-idf query terms 
    only consider docs containing many query terms 

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

high-idf query terms only 

docs containing many query terms 

    for a query such as catcher in the rye 
    only accumulate scores from catcher and rye 
    intuition: in and the contribute little to the scores 

and so don   t alter rank-ordering much 

    benefit: 

    postings of low-idf terms have many docs     these (many) 

docs get eliminated from set a of contenders 

    any doc with at least one query term is a candidate 

for the top k output list 

    for multi-term queries, only compute scores for docs 

containing several of the query terms 
    say, at least 3 out of 4 
    imposes a    soft conjunction    on queries seen on web 

search engines (early google) 

    easy to implement in postings traversal 

3 

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

3 of 4 query terms 

champion lists 

    precompute for each dictionary term t, the r docs of 

highest weight in t   s postings 
    call this the champion list for t 
    (aka fancy list or top docs for t) 

    note that r has to be chosen at index build time 

    thus, it   s possible that r < k 

    at query time, only compute scores for docs in the 

champion list of some query term 
    pick the k top-scoring docs from amongst these 

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

exercises 

static quality scores 

    how do champion lists relate to index elimination? 

    we want top-ranking documents to be both relevant 

can they be used together? 

and authoritative 

    how can champion lists be implemented in an 

inverted index? 
    note that the champion list has nothing to do with small 

docids 

    relevance is being modeled by cosine scores 
    authority is typically a query-independent property 

of a document 

    examples of authority signals 

    wikipedia among websites 
    articles in certain newspapers 
    a paper with many citations 
    many bitly   s, diggs or del.icio.us marks 
    (id95) 

quantitative 

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

modeling authority 

net score 

    assign to each document a query-independent 

    consider a simple total score combining cosine 

quality score in [0,1] to each document d 
    denote this by g(d) 

    thus, a quantity like the number of citations is scaled 

into [0,1] 
    exercise: suggest a formula for this. 

relevance and authority 

    net-score(q,d) = g(d) + cosine(q,d) 

    can use some other linear combination 
    indeed, any function of the two    signals    of user happiness 

    more later 

    now we seek the top k docs by net score 

4 

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

top k by net score     fast methods 

why order postings by g(d)? 

    first idea: order all postings by g(d) 
    key: this is a common ordering for all postings 
    thus, can concurrently traverse query terms    

postings for 
    postings intersection 
    cosine score computation 

    exercise: write pseudocode for cosine score 
computation if postings are ordered by g(d) 

    under g(d)-ordering, top-scoring docs likely to 

appear early in postings traversal 

    in time-bound applications (say, we have to return 

whatever search results we can in 50 ms), this allows 
us to stop postings traversal early 
    short of computing scores for all docs in postings 

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

champion lists in g(d)-ordering 

high and low lists 

    can combine champion lists with g(d)-ordering 
    maintain for each term a champion list of the r docs 

with highest g(d) + tf-idftd 

    seek top-k results from only the docs in these 

champion lists 

    for each term, we maintain two postings lists called 

high and low 
    think of high as the champion list 

    when traversing postings on a query, only traverse 

high lists first 
    if we get more than k docs, select the top k and stop 
    else proceed to get docs from the low lists 

    can be used even for simple cosine scores, without 

global quality g(d) 

    a means for segmenting index into two tiers 

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

impact-ordered postings 

1. early termination 

    we only want to compute scores for docs for which 

    when traversing t   s postings, stop early after either 

wft,d is high enough 

    we sort each postings list by wft,d 
    now: not all postings in a common order! 
    how do we compute scores in order to pick off top k? 

    two ideas follow 

    a fixed number of r docs 
    wft,d  drops below some threshold 

    take the union of the resulting sets of docs 

    one from the postings of each query term 

    compute only the scores for docs in this union 

 

5 

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

2. idf-ordered terms 

cluster pruning: preprocessing 

    when considering the postings of query terms 
    look at them in order of decreasing idf 

    high idf terms likely to contribute most to score 

    as we update score contribution from each query 

term 
    stop if doc scores relatively unchanged 

    can apply to cosine or some other net scores 

    pick    n docs at random: call these leaders 
    for every other doc, pre-compute nearest 

leader 
    docs attached to a leader: its followers; 
    likely: each leader has ~    n followers. 

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

 cluster pruning: query processing 

visualization 

    process a query as follows: 

    given query q, find its nearest leader l. 
    seek k nearest docs from among l   s 

followers. 

 

query 

leader 

follower 

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

why use random sampling 

    fast 
    leaders reflect data distribution 

general variants 

    have each follower attached to b1=3 (say) nearest 

leaders. 

    from query, find b2=4 (say) nearest leaders and their 

followers. 

    can recurse on leader/follower construction. 

6 

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

exercises 

    to find the nearest leader in step 1, how many cosine 

computations do we do? 
    why did we have    n in the first place? 

    what is the effect of the constants b1, b2 on the 

previous slide? 

    devise an example where this is likely to fail     i.e., we 

miss one of the k nearest docs. 
    likely under random sampling. 

 
 

parametric and zone indexes 

    thus far, a doc has been a sequence of terms 
    in fact documents have multiple parts, some with 

special semantics: 
    author 
    title 
    date of publication 
    language 
    format 
    etc. 

    these constitute the metadata about a document 

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

fields 

zone 

    we sometimes wish to search by these metadata 
    e.g., find docs authored by william shakespeare in the 

year 1601, containing alas poor yorick 
    year = 1601 is an example of a field 
    also, author last name = shakespeare, etc. 
    field or parametric index: postings for each field 

value 
    sometimes build range trees (e.g., for dates) 

    field query typically treated as conjunction 

    (doc must be authored by shakespeare) 

    a zone is a region of the doc that can contain an 

arbitrary amount of text, e.g., 
    title 
    abstract 
    references     

    build inverted indexes on zones as well to permit 

querying 

    e.g.,    find docs with merchant in the title zone and 

matching the query gentle rain    

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

example zone indexes 

tiered indexes 

    break postings up into a hierarchy of lists 

    most important 
        
    least important 

    can be done by g(d) or another measure 
    inverted index thus broken up into tiers of decreasing 

importance 

    at query time use top tier unless it fails to yield k 

docs 
    if so drop to lower tiers 

7 

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

example tiered index 

query term proximity 

    free text queries: just a set of terms typed into the 

query box     common on the web 

    users prefer docs in which query terms occur within 

close proximity of each other 

    let w be the smallest window in a doc containing all 

query terms, e.g., 

    for the query strained mercy the smallest window in 

the doc the quality of mercy is not strained is 4 
(words) 

    would like scoring function to take this into account 

    how? 

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

query parsers 

aggregate scores 

    free text query from user may in fact spawn one or 

    we   ve seen that score functions can combine cosine, 

more queries to the indexes, e.g., query rising 
interest rates 
    run the query as a phrase query  
    if <k docs contain the phrase rising interest rates, run the 

two phrase queries rising interest and interest rates 

    if we still have <k docs, run the vector space query rising 

interest rates 

    rank matching docs by vector space scoring 
    this sequence is issued by a query parser 

static quality, proximity, etc. 

    how do we know the best combination? 
    some applications     expert-tuned 
    increasingly common: machine-learned 

    see may 19th lecture 

introduction to information retrieval 

  

  

introduction to information retrieval 

  

  

putting it all together 

resources 

    iir 7, 6.1 

8 

