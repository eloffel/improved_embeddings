introduction to information retrieval

http://informationretrieval.org

iir 2: the term vocabulary and postings lists

hinrich sch  utze

center for information and language processing, university of munich

2014-04-09

1 / 62

overview

1 recap

2 documents

3 terms

general + non-english
english

4 skip pointers

5 phrase queries

2 / 62

outline

1 recap

2 documents

3 terms

general + non-english
english

4 skip pointers

5 phrase queries

3 / 62

inverted index

for each term t, we store a list of all documents that contain t.

brutus

caesar

       1
       1
calpurnia        2

2

2

4

4

11

31

45

173

174

5

6

16

57

132

. . .

31

54

101

...

{z

}
|
dictionary

|

{z

postings

}

4 / 62

intersecting two postings lists

brutus

       1     2     4     11     31     45     173     174

calpurnia        2     31     54     101
intersection =    2     31

5 / 62

constructing the inverted index: sort postings

term docid
1
i
1
did
1
enact
1
julius
caesar
1
1
i
1
was
1
killed
1
i   
1
the
1
capitol
1
brutus
1
killed
me
1
2
so
2
let
2
it
2
be
2
with
2
caesar
2
the
noble
2
2
brutus
2
hath
2
told
2
you
2
caesar
2
was
ambitious
2

=   

term docid
2
ambitious
2
be
1
brutus
2
brutus
capitol
1
1
caesar
2
caesar
2
caesar
1
did
1
enact
1
hath
1
i
1
i
i   
1
2
it
1
julius
1
killed
1
killed
2
let
1
me
2
noble
so
2
1
the
2
the
2
told
2
you
1
was
2
was
with
2

6 / 62

westlaw: example queries

information need: information on the legal theories involved in
preventing the disclosure of trade secrets by employees formerly
employed by a competing company query:    trade secret    /s
disclos! /s prevent /s employe! information need: requirements for

disabled people to be able to access a workplace query: disab! /p
access! /s work-site work-place (employment /3 place) information

need: cases about a host   s responsibility for drunk guests query:
host! /p (responsib! liab!) /p (intoxicat! drunk!) /p guest

7 / 62

does google use the boolean model?

on google, the default interpretation of a query [w1 w2
. . . wn] is w1 and w2 and . . . and wn
cases where you get hits that do not contain one of the wi :

anchor text
page contains variant of wi (morphology, id147,
synonym)
long queries (n large)
boolean expression generates very few hits

simple boolean vs. ranking of result set

simple boolean retrieval returns matching documents in no
particular order.
google (and most well designed boolean engines) rank the
result set     they rank good hits (according to some estimator
of relevance) higher than bad hits.

8 / 62

take-away

understanding of the basic unit of classical information
retrieval systems: words and documents: what is a
document, what is a term?

id121: how to get from raw text to words (or tokens)

more complex indexes: skip pointers and phrases

9 / 62

outline

1 recap

2 documents

3 terms

general + non-english
english

4 skip pointers

5 phrase queries

10 / 62

documents

last lecture: simple boolean retrieval system
our assumptions were:

we know what a document is.
we can    machine-read    each document.

this can be complex in reality.

11 / 62

parsing a document

we need to deal with format and language of each document.

what format is it in? pdf, word, excel, html etc.

what language is it in?

what character set is in use?

each of these is a classi   cation problem, which we will study
later in this course (iir 13).

alternative: use heuristics

12 / 62

format/language: complications

a single index usually contains terms of several languages.
sometimes a document or its components contain multiple
languages/formats.

french email with spanish pdf attachment

what is the document unit for indexing?

a    le?

an email?

an email with 5 attachments?

a group of    les (ppt or latex in html)?

upshot: answering the question    what is a document?    is
not trivial and requires some design decisions.

also: xml

13 / 62

outline

1 recap

2 documents

3 terms

general + non-english
english

4 skip pointers

5 phrase queries

14 / 62

outline

1 recap

2 documents

3 terms

general + non-english
english

4 skip pointers

5 phrase queries

15 / 62

de   nitions

word     a delimited string of characters as it appears in the
text.

term     a    normalized    word (case, morphology, spelling etc);
an equivalence class of words.

token     an instance of a word or term occurring in a
document.

type     the same as a term in most cases: an equivalence
class of tokens.

16 / 62

id172

need to    normalize    words in indexed text as well as query
terms into the same form.

example: we want to match u.s.a. and usa

we most commonly implicitly de   ne equivalence classes of
terms.
alternatively: do asymmetric expansion

window     window, windows
windows     windows, windows
windows (no expansion)

more powerful, but less e   cient

why don   t you want to put window, window, windows, and
windows in the same equivalence class?

17 / 62

id172: other languages

id172 and language detection interact.
peter will nicht mit.     mit = mit
he got his phd from mit.     mit 6= mit

18 / 62

id121: recall construction of inverted index

input:
friends, romans, countrymen. so let it be with caesar . . .

output:
friend roman countryman so . . .

each token is a candidate for a postings entry.

what are valid tokens to emit?

19 / 62

exercises

in june, the dog likes to chase the cat in the barn.     how many
word tokens? how many word types? why id121 is di   cult

    even in english. tokenize: mr. o   neill thinks that the boys   
stories about chile   s capital aren   t amusing.

20 / 62

id121 problems: one word or two? (or several)

hewlett-packard

state-of-the-art

co-education

the hold-him-back-and-drag-him-away maneuver

data base

san francisco

los angeles-based company

cheap san francisco-los angeles fares

york university vs. new york university

21 / 62

numbers

3/20/91

20/3/91

mar 20, 1991

b-52

100.2.86.144

(800) 234-2333

800.234.2333

older ir systems may not index numbers . . .

. . . but generally it   s a useful feature.

google example

22 / 62

chinese: no whitespace

!

         8

  >  
 a   >      8     9 
a     a 

)

   z    

    >     3            

#
%&

$
   

         
  
  

(

 

[
 

"

23 / 62

ambiguous segmentation in chinese

 

the two

characters can be treated as one word meaning    monk    or as a
sequence of two words meaning    and    and    still   .

   

24 / 62

other cases of    no whitespace   

compounds in dutch, german, swedish
computerlinguistik     computer + linguistik
lebensversicherungsgesellschaftsangestellter
    leben + versicherung + gesellschaft + angestellter
inuit: tusaatsiarunnanngittualuujunga (i can   t hear very well.)

many other languages with segmentation di   culties: finnish,
urdu, . . .

25 / 62

japanese

        	 
 
                

      !" !$#% '(&*
),-+./0* 

2134678 ',95 :;:= ><
?@bca +ed

795 :;:=*gh)if
): j*k,mln?op rq

t s vuuxwy'[zn?* ,] ^;_\, `4a,c

;b ef)guhiu+?dnjlmkn :bp 	 on6,

rusqtu'wvx*ry{zi}'~     l?@b
di   erent    alphabets   : chinese characters, hiragana syllabary for
in   ectional endings and function words, katakana syllabary for
transcription of foreign words and other uses, and latin. no spaces
(as in chinese).
end user can express query entirely in hiragana!

4

26 / 62

arabic script

                      

                                    
             un b     t  i k  
/kit  bun/    a book    
 

27 / 62

arabic script: bidirectionality

                                                          
. 
                                                       
                                                                       start 

1962

132

           

 

   algeria achieved its independence in 1962 after 132 years of french occupation.    
 
bidirectionality is not a problem if text is coded in unicode.

28 / 62

accents and diacritics

accents: r  esum  e vs. resume (simple omission of accent)

umlauts: universit  at vs. universitaet (substitution with
special letter sequence    ae   )

most important criterion: how are users likely to write their
queries for these words?

even in languages that standardly have accents, users often
do not type them. (polish?)

29 / 62

outline

1 recap

2 documents

3 terms

general + non-english
english

4 skip pointers

5 phrase queries

30 / 62

case folding

reduce all letters to lower case
even though case can be semantically meaningful

capitalized words in mid-sentence
mit vs. mit
fed vs. fed
. . .

it   s often best to lowercase everything since users will use
lowercase regardless of correct capitalization.

31 / 62

stop words

stop words = extremely common words which would appear
to be of little value in helping select documents matching a
user need

examples: a, an, and, are, as, at, be, by, for, from, has, he, in,
is, it, its, of, on, that, the, to, was, were, will, with

stop word elimination used to be standard in older ir systems.

but you need stop words for phrase queries, e.g.    king of
denmark   

most web search engines index stop words.

32 / 62

more equivalence classing

soundex: iir 3 (phonetic equivalence, muller = mueller)

thesauri: iir 9 (semantic equivalence, car = automobile)

33 / 62

lemmatization

reduce in   ectional/variant forms to base form
example: am, are, is     be
example: car, cars, car   s, cars        car
example: the boy   s cars are di   erent colors     the boy car be
di   erent color

lemmatization implies doing    proper    reduction to dictionary
headword form (the lemma).
in   ectional morphology (cutting     cut) vs. derivational
morphology (destruction     destroy)

34 / 62

id30

de   nition of id30: crude heuristic process that chops o   
the ends of words in the hope of achieving what    principled   
lemmatization attempts to do with a lot of linguistic
knowledge.

language dependent

often in   ectional and derivational

example for derivational: automate, automatic, automation
all reduce to automat

35 / 62

porter algorithm

most common algorithm for id30 english

results suggest that it is at least as good as other id30
options

conventions + 5 phases of reductions

phases are applied sequentially
each phase consists of a set of commands.

sample command: delete    nal ement if what remains is longer
than 1 character
replacement     replac
cement     cement

sample convention: of the rules in a compound command,
select the one that applies to the longest su   x.

36 / 62

porter stemmer: a few rules

rule
sses     ss
ies     i
    ss
ss
s
   

example
caresses     caress
ponies     poni
caress     caress
cats
    cat

37 / 62

three stemmers: a comparison

sample text: such an analysis can reveal features that are not easily

visible from the variations in the individual genes and can
lead to a picture of expression that is more biologically
transparent and accessible to interpretation

porter stemmer: such an analysi can reveal featur that ar not easili visibl
from the variat in the individu gene and can lead to a pictur
of express that is more biolog transpar and access to interpret
lovins stemmer: such an analys can reve featur that ar not eas vis from th
vari in th individu gen and can lead to a pictur of expres that
is mor biolog transpar and acces to interpres

paice stemmer: such an analys can rev feat that are not easy vis from the
vary in the individ gen and can lead to a pict of express that
is mor biolog transp and access to interpret

38 / 62

does id30 improve e   ectiveness?

in general, id30 increases e   ectiveness for some queries,
and decreases e   ectiveness for others.

queries where id30 is likely to help: [tartan sweaters],
[sightseeing tour san francisco]
(equivalence classes: {sweater,sweaters}, {tour,tours})
porter stemmer equivalence class oper contains all of operate
operating operates operation operative operatives operational.

queries where id30 hurts: [operational and research],
[operating and system], [operative and dentistry]

39 / 62

exercise: what does google do?

stop words

id172

id121

lowercasing

id30

non-latin alphabets

umlauts

compounds

numbers

40 / 62

outline

1 recap

2 documents

3 terms

general + non-english
english

4 skip pointers

5 phrase queries

41 / 62

recall basic intersection algorithm

brutus

       1     2     4     11     31     45     173     174

calpurnia        2     31     54     101
intersection =    2     31

linear in the length of the postings lists.

can we do better?

42 / 62

skip pointers

skip pointers allow us to skip postings that will not    gure in
the search results.

this makes intersecting postings lists more e   cient.

some postings lists contain several million entries     so
e   ciency can be an issue even if basic intersection is linear.

where do we put skip pointers?

how do we make sure insection results are correct?

43 / 62

basic idea

34

128

brutus

2

4

8

34 35 64 128

8

31

caesar

1

2

3

5

8

17 21 31 75 81 84 89 92

44 / 62

skip lists: larger example

16

28

72

brutus

2 4 8 16 19 23 28 43

5

51

98

caesar

1 2 3 5 8 41 51 60 71

45 / 62

intersecting with skip pointers

then add(answer , docid(p1))

else if docid(p1) < docid(p2)

p1     next(p1)
p2     next(p2)

intersectwithskips(p1, p2)
1 answer     h i
2 while p1 6= nil and p2 6= nil
3 do if docid(p1) = docid(p2)
4
5
6
7
8
9
10
11
12
13
14
15
16 return answer

then if hasskip(p1) and (docid(skip(p1))     docid(p2))

else if hasskip(p2) and (docid(skip(p2))     docid(p1))

do p1     skip(p1)

then while hasskip(p1) and (docid(skip(p1))     docid(p2))
else p1     next(p1)
then while hasskip(p2) and (docid(skip(p2))     docid(p1))
else p2     next(p2)

do p2     skip(p2)

46 / 62

where do we place skips?

tradeo   : number of items skipped vs. frequency skip can be
taken

more skips: each skip pointer skips only a few items, but we
can frequently use it.

fewer skips: each skip pointer skips many items, but we can
not use it very often.

47 / 62

where do we place skips? (cont)

simple heuristic: for postings list of length p, use    p
evenly-spaced skip pointers.

this ignores the distribution of query terms.

easy if the index is static; harder in a dynamic environment
because of updates.

how much do skip pointers help?

they used to help a lot.

with today   s fast cpus, they don   t help that much anymore.

48 / 62

outline

1 recap

2 documents

3 terms

general + non-english
english

4 skip pointers

5 phrase queries

49 / 62

phrase queries

we want to answer a query such as [stanford university]     as a
phrase.

thus the inventor stanford ovshinsky never went to
university should not be a match.

the concept of phrase query has proven easily understood by
users.

signi   cant part of web queries are phrase queries (explicitly
entered or interpreted as such)

consequence for inverted index: it no longer su   ces to store
docids in postings lists.
two ways of extending the inverted index:

biword index
positional index

50 / 62

biword indexes

index every consecutive pair of terms in the text as a phrase.

for example, friends, romans, countrymen would generate
two biwords:    friends romans    and    romans countrymen   

each of these biwords is now a vocabulary term.

two-word phrases can now easily be answered.

51 / 62

longer phrase queries

a long phrase like    stanford university palo alto    can be
represented as the boolean query    stanford university   
and    university palo    and    palo alto   

we need to do post-   ltering of hits to identify subset that
actually contains the 4-word phrase.

52 / 62

issues with biword indexes

why are biword indexes rarely used?

false positives, as noted above

index blowup due to very large term vocabulary

53 / 62

positional indexes

positional indexes are a more e   cient alternative to biword
indexes.

postings lists in a nonpositional index: each posting is just a
docid

postings lists in a positional index: each posting is a docid
and a list of positions

54 / 62

positional indexes: example

query:    to1 be2 or3 not4 to5 be6    to, 993427:

h 1: h 7, 18, 33, 72, 86, 231i;
2: h1, 17, 74, 222, 255i;
4: h 8, 16, 190, 429, 433i;
5: h363, 367i;
7: h13, 23, 191i; . . .i

be, 178239:

h 1: h 17, 25i;
4: h 17, 191, 291, 430, 434i;
5: h14, 19, 101i; . . .i document 4 is a match!

55 / 62

proximity search

we just saw how to use a positional index for phrase searches.

we can also use it for proximity search.

for example: employment /4 place

find all documents that contain employment and place
within 4 words of each other.

employment agencies that place healthcare workers are seeing
growth is a hit.

employment agencies that have learned to adapt now place
healthcare workers is not a hit.

56 / 62

proximity search

use the positional index

simplest algorithm: look at cross-product of positions of (i)
employment in document and (ii) place in document

very ine   cient for frequent words, especially stop words

note that we want to return the actual matching positions,
not just a list of documents.

this is important for dynamic summaries etc.

57 / 62

   proximity    intersection

then l     h i

pp1     positions(p1)
pp2     positions(p2)
while pp1 6= nil
do while pp2 6= nil

positionalintersect(p1, p2, k)
1 answer     h i
2 while p1 6= nil and p2 6= nil
3 do if docid(p1) = docid(p2)
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24 return answer

p1     next(p1)
p2     next(p2)

then p1     next(p1)
else p2     next(p2)

pp2     next(pp2)

else if docid(p1) < docid(p2)

do if |pos(pp1)     pos(pp2)|     k

then add(l , pos(pp2))
else if pos(pp2) > pos(pp1)

then break

while l 6= h i and |l [0]     pos(pp1)| > k
do delete(l [0])
for each ps     l
do add(answer ,hdocid(p1), pos(pp1), psi)
pp1     next(pp1)

58 / 62

combination scheme

biword indexes and positional indexes can be pro   tably
combined.

many biwords are extremely frequent: michael jackson,
britney spears etc

for these biwords, increased speed compared to positional
postings intersection is substantial.

combination scheme: include frequent biwords as vocabulary
terms in the index. do all other phrases by positional
intersection.

williams et al. (2004) evaluate a more sophisticated mixed
indexing scheme. faster than a positional index, at a cost of
26% more space for index.

59 / 62

   positional    queries on google

for web search engines, positional queries are much more
expensive than regular boolean queries.

let   s look at the example of phrase queries.

why are they more expensive than regular boolean queries?

can you demonstrate on google that phrase queries are more
expensive than boolean queries?

60 / 62

take-away

understanding of the basic unit of classical information
retrieval systems: words and documents: what is a
document, what is a term?

id121: how to get from raw text to words (or tokens)

more complex indexes: skip pointers and phrases

61 / 62

resources

chapter 2 of iir
resources at http://cislmu.org

porter stemmer
a fun number search on google

62 / 62

