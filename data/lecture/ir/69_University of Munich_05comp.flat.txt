introduction to information retrieval

http://informationretrieval.org

iir 5: index compression

hinrich sch  utze

center for information and language processing, university of munich

2014-04-17

1 / 59

overview

1 recap

2 compression

3 term statistics

4 dictionary compression

5 postings compression

2 / 59

outline

1 recap

2 compression

3 term statistics

4 dictionary compression

5 postings compression

3 / 59

blocked sort-based indexing

postings

to be merged

brutus
caesar
noble
with

d3
d4
d3
d4

brutus
caesar
julius
killed

d2
d1
d1
d2

brutus
brutus
caesar
caesar
julius
killed
noble
with

d2
d3
d1
d4
d1
d2
d3
d4

merged
postings

disk

4 / 59

single-pass in-memory indexing

abbreviation: spimi

key idea 1: generate separate dictionaries for each block     no
need to maintain term-termid mapping across blocks.

key idea 2: don   t sort. accumulate postings in postings lists
as they occur.

with these two ideas we can generate a complete inverted
index for each block.

these separate indexes can then be merged into one big index.

5 / 59

spimi-invert

if term(token) /    dictionary

spimi-invert(token stream)
1 output    le     newfile()
2 dictionary     newhash()
3 while (free memory available)
4 do token     next(token stream)
5
6
7
8
9
10
11 sorted terms     sortterms(dictionary )
12 writeblocktodisk(sorted terms,dictionary ,output    le)
13 return output    le

addtopostingslist(postings list,docid(token))

if full (postings list)

then postings list     addtodictionary(dictionary ,term(token))
else postings list     getpostingslist(dictionary ,term(token))

then postings list     doublepostingslist(dictionary ,term(token))

6 / 59

mapreduce for index construction

splits

assign

master

assign

postings

parser

a-f g-p q-z

inve rter

a-f

parser

a-f g-p q-z

inve rter

g-p

parser

a-f

g-p q-z

inve rter

q-z

map
phase

segment
files

reduce
phase

7 / 59

dynamic indexing: simplest approach

maintain big main index on disk

new docs go into small auxiliary index in memory.

search across both, merge results

periodically, merge auxiliary index into big index

8 / 59

take-away today

motivation for compression in information retrieval systems

how can we compress the dictionary component of the
inverted index?

how can we compress the postings component of the inverted
index?

term statistics: how are terms distributed in document
collections?

9 / 59

outline

1 recap

2 compression

3 term statistics

4 dictionary compression

5 postings compression

10 / 59

why compression? (in general)

use less disk space (saves money)

keep more stu    in memory (increases speed)
increase speed of transferring data from disk to memory
(again, increases speed)

[read compressed data and decompress in memory]
is faster than
[read uncompressed data]

premise: decompression algorithms are fast.

this is true of the decompression algorithms we will use.

11 / 59

why compression in information retrieval?

first, we will consider space for dictionary

main motivation for dictionary compression: make it small
enough to keep in main memory

then for the postings    le

motivation: reduce disk space needed, decrease time needed to
read from disk
note: large search engines keep signi   cant part of postings in
memory

we will devise various compression schemes for dictionary and
postings.

12 / 59

lossy vs. lossless compression

lossy compression: discard some information
several of the preprocessing steps we frequently use can be
viewed as lossy compression:

downcasing, stop words, porter, number elimination

lossless compression: all information is preserved.

what we mostly do in index compression

13 / 59

outline

1 recap

2 compression

3 term statistics

4 dictionary compression

5 postings compression

14 / 59

model collection: the reuters collection

symbol
n
l
m

t

statistic
documents
avg. # word tokens per document
word types
avg. # bytes per word token (incl. spaces/punct.)
avg. # bytes per word token (without spaces/punct.)
avg. # bytes per word type
non-positional postings

value
800,000
200
400,000
6
4.5
7.5
100,000,000

15 / 59

e   ect of preprocessing for reuters

size of

word types

(terms)
dictionary

size     cml

non-positional

positional postings

postings

non-positional index
size     cml

(word tokens)

positional index

size     cml

484,494

109,971,179

explain di   erences between numbers non-positional vs positional:

un   ltered
no numbers 473,723 -2 -2 100,680,242 -8
case folding 391,523 -17 -19
391,493 -0 -19
30 stopw   s
150 stopw   s 391,373 -0 -19
id30
322,383 -17 -33

197,879,290
-8 179,158,204
-9 -9
96,969,056 -3 -12 179,158,204
-0 -9
83,390,443 -14 -24 121,857,825 -31 -38
94,516,599 -47 -52
67,001,847 -30 -39
63,812,300 -4 -42
94,516,599
-0 -52

-3 vs -0, -14 vs -31, -30 vs -47, -4 vs -0

16 / 59

how big is the term vocabulary?

that is, how many distinct words are there?

can we assume there is an upper bound?
not really: at least 7020     1037 di   erent words of length 20.
the vocabulary will keep growing with collection size.
heaps    law: m = kt b
m is the size of the vocabulary, t is the number of tokens in
the collection.

typical values for the parameters k and b are: 30     k     100
and b     0.5.
heaps    law is linear in log-log space.

it is the simplest possible relationship between collection size
and vocabulary size in log-log space.
empirical law

17 / 59

heaps    law for reuters

 

m
0
1
g
o

l

6

5

4

3

2

1

0

vocabulary size m as a
function of collection size
t (number of tokens) for
reuters-rcv1. for these
data, the dashed line
log10 m =
0.49     log10 t + 1.64 is the
best least squares    t.
thus, m = 101.64t 0.49
and k = 101.64     44 and
b = 0.49.

0

2

4

6

8

log10 t

18 / 59

empirical    t for reuters

good, as we just saw in the graph.

example: for the    rst 1,000,020 tokens heaps    law predicts
38,323 terms:

44    1,000,0200.49     38,323

the actual number is 38,365 terms, very close to the
prediction.

empirical observation:    t is good in general.

19 / 59

exercise

1 what is the e   ect of including spelling errors vs. automatically

correcting spelling errors on heaps    law?

2 compute vocabulary size m

looking at a collection of web pages, you    nd that there are
3000 di   erent terms in the    rst 10,000 tokens and 30,000
di   erent terms in the    rst 1,000,000 tokens.
assume a search engine indexes a total of 20,000,000,000
(2    1010) pages, containing 200 tokens on average
what is the size of the vocabulary of the indexed collection as
predicted by heaps    law?

20 / 59

zipf   s law

now we have characterized the growth of the vocabulary in
collections.

we also want to know how many frequent vs. infrequent
terms we should expect in a collection.

in natural language, there are a few very frequent terms and
very many very rare terms.
zipf   s law: the i th most frequent term has frequency cf i
proportional to 1/i .
cf i     1
cf i is collection frequency: the number of occurrences of the
term ti in the collection.

i

21 / 59

zipf   s law

i

zipf   s law: the i th most frequent term has frequency
proportional to 1/i .
cf i     1
cf is collection frequency: the number of occurrences of the
term in the collection.
so if the most frequent term (the) occurs cf 1 times, then the
second most frequent term (of) has half as many occurrences
cf 2 = 1
2
. . . and the third most frequent term (and) has a third as
many occurrences cf 3 = 1
3
equivalent: cf i = ci k and log cf i = log c + k log i (for k =    1)
example of a power law

cf 1 etc.

cf 1 . . .

22 / 59

zipf   s law for reuters

f
c
 
0
1
g
o

l

7

6

5

4

3

2

1

0

is

important

fit is not great. what
is
the
key insight: few fre-
quent
terms, many
rare terms.

0

1

2

3

4

5

6

7

log10 rank

23 / 59

outline

1 recap

2 compression

3 term statistics

4 dictionary compression

5 postings compression

24 / 59

dictionary compression

the dictionary is small compared to the postings    le.

but we want to keep it in memory.

also: competition with other applications, cell phones,
onboard computers, fast startup time

so compressing the dictionary is important.

25 / 59

recall: dictionary as array of    xed-width entries

term

a
aachen
. . .
zulu
20 bytes

document
frequency
656,265
65
. . .
221
4 bytes

pointer
to
postings list
      
      
. . .
      
4 bytes

space

space needed:

for reuters: (20+4+4)*400,000 = 11.2 mb

26 / 59

fixed-width entries are bad.

most of the bytes in the term column are wasted.

we allot 20 bytes for terms of length 1.

we can   t handle hydrochlorofluorocarbons and
supercalifragilisticexpialidocious

average length of a term in english: 8 characters (or a little
bit less)

how can we use on average 8 characters per term?

27 / 59

dictionary as a string

. . . sys t i l esyzyge t i csyzyg i a l syzygysza i be l y i t eszec i nszono . . .

freq.

postings ptr.

term ptr.

9
92
5
71
12
. . .

   
   
   
   
   
. . .

. . .

4 bytes

4 bytes

3 bytes

28 / 59

space for dictionary as a string

4 bytes per term for frequency

4 bytes per term for pointer to postings list

8 bytes (on average) for term in string
3 bytes per pointer into string (need log2 8    400000 < 24 bits
to resolve 8    400,000 positions)

space: 400,000    (4 + 4 + 3 + 8) = 7.6mb (compared to 11.2
mb for    xed-width array)

29 / 59

dictionary as a string with blocking

. . . 7 s y s t i l e 9 s yzyge t i c 8 s yzyg i a l 6 s yzygy11s za i be l y i t e 6 s zec i n . . .

freq.

postings ptr.

term ptr.

9
92
5
71
12
. . .

   
   
   
   
   
. . .

. . .

30 / 59

space for dictionary as a string with blocking

example block size k = 4

where we used 4    3 bytes for term pointers without blocking
. . .

. . . we now use 3 bytes for one pointer plus 4 bytes for
indicating the length of each term.

we save 12     (3 + 4) = 5 bytes per block.

total savings: 400,000/4     5 = 0.5 mb

this reduces the size of the dictionary from 7.6 mb to 7.1
mb.

31 / 59

lookup of a term without blocking

aid

job

den

pit

box

ex

ox

win

32 / 59

lookup of a term with blocking: (slightly) slower

aid

box

den

ex

job

ox

pit

win

33 / 59

front coding

one block in blocked compression (k = 4) . . .

8 a u t o m a t a 8 a u t o m a t e 9 a u t o m a t i c 10 a u t o m a t i o n

   

. . . further compressed with front coding.

8 a u t o m a t     a 1     e 2     i c 3     i o n

34 / 59

dictionary compression for reuters: summary

data structure
dictionary,    xed-width
dictionary, term pointers into string
   , with blocking, k = 4
   , with blocking & front coding

size in mb
11.2
7.6
7.1
5.9

35 / 59

exercise

which pre   xes should be used for front coding? what are the
tradeo   s?

input: list of terms (= the term vocabulary)

output: list of pre   xes that will be used in front coding

36 / 59

outline

1 recap

2 compression

3 term statistics

4 dictionary compression

5 postings compression

37 / 59

postings compression

the postings    le is much larger than the dictionary, factor of
at least 10.

key desideratum: store each posting compactly

a posting for our purposes is a docid.

for reuters (800,000 documents), we would use 32 bits per
docid when using 4-byte integers.
alternatively, we can use log2 800,000     19.6 < 20 bits per
docid.

our goal: use a lot less than 20 bits per docid.

38 / 59

key idea: store gaps instead of docids

each postings list is ordered in increasing order of docid.

example postings list: computer: 283154, 283159, 283202,
. . .

it su   ces to store gaps: 283159-283154=5,
283202-283159=43

example postings list using gaps : computer: 283154, 5,
43, . . .

gaps for frequent terms are small.

thus: we can encode small gaps with fewer than 20 bits.

39 / 59

gap encoding

the

computer

encoding
docids
gaps
docids
gaps

postings list
. . .

. . .

arachnocentric docids

gaps

252000
252000

248100

283042

283043

283044

283045

1

107

283047

500100

283154

1

5

283159

1

43

283202

. . .
. . .
. . .
. . .

40 / 59

variable length encoding

aim:

for arachnocentric and other rare terms, we will use
about 20 bits per gap (= posting).
for the and other very frequent terms, we will use only a few
bits per gap (= posting).

in order to implement this, we need to devise some form of
variable length encoding.

variable length encoding uses few bits for small gaps and
many bits for large gaps.

41 / 59

variable byte (vb) code

used by many commercial/research systems

good low-tech blend of variable-length coding and sensitivity
to alignment matches (bit-level codes, see later).

dedicate 1 bit (high bit) to be a continuation bit c.

if the gap g    ts within 7 bits, binary-encode it in the 7
available bits and set c = 1.

else: encode lower-order 7 bits and then use one or more
additional bytes to encode the higher order bits using the
same algorithm.

at the end set the continuation bit of the last byte to 1
(c = 1) and of the other bytes to 0 (c = 0).

42 / 59

vb code examples

docids
gaps
vb code

824

00000110 10111000

829
5
10000101

215406
214577
00001101 00001100 10110001

43 / 59

vb code encoding algorithm

vbencodenumber(n)
1 bytes     hi
2 while true
3 do prepend(bytes, n mod 128)
4
5
6
7 bytes[length(bytes)] += 128
8 return bytes

n     n div 128

then break

if n < 128

vbencode(numbers)
1 bytestream     hi
2 for each n     numbers
3 do bytes     vbencodenumber(n)
4
5 return bytestream

bytestream     extend(bytestream, bytes)

44 / 59

vb code decoding algorithm

vbdecode(bytestream)
1 numbers     hi
2 n     0
3 for i     1 to length(bytestream)
4 do if bytestream[i ] < 128
5
6
7
8
9 return numbers

append(numbers, n)
n     0

then n     128    n + bytestream[i ]
else n     128    n + (bytestream[i ]     128)

45 / 59

other variable codes

instead of bytes, we can also use a di   erent    unit of
alignment   : 32 bits (words), 16 bits, 4 bits (nibbles) etc

variable byte alignment wastes space if you have many small
gaps     nibbles do better on those.

there is work on word-aligned codes that e   ciently    pack    a
variable number of gaps into one word     see resources at the
end

46 / 59

gamma codes for gap encoding

you can get even more compression with another type of
variable length encoding: bitlevel code.

gamma code is the best known of these.

first, we need unary code to be able to introduce gamma
code.
unary code

represent n as n 1s with a    nal 0.
unary code for 3 is 1110
unary code for 40 is
11111111111111111111111111111111111111110
unary code for 70 is:

11111111111111111111111111111111111111111111111111111111111111111111110

47 / 59

gamma code

represent a gap g as a pair of length and o   set.

o   set is the gap in binary, with the leading bit chopped o   .

for example 13     1101     101 = o   set

length is the length of o   set.

for 13 (o   set 101), this is 3.

encode length in unary code: 1110.

gamma code of 13 is the concatenation of length and o   set:
1110101.

48 / 59

gamma code examples

unary code
0
10
110
1110
11110
1111111110

number
0
1
2
3
4
9
13
24
511
1025

length

o   set

   code

0
10
10
110
1110
1110
11110
111111110
11111111110

0
1
00
001
101
1000
11111111
0000000001

0
10,0
10,1
110,00
1110,001
1110,101
11110,1000
111111110,11111111
11111111110,0000000001

49 / 59

exercise

compute the variable byte code of 130

compute the gamma code of 130

50 / 59

length of gamma code

the length of o   set is    log2 g     bits.
the length of length is    log2 g     + 1 bits,
so the length of the entire code is 2       log2 g     + 1 bits.
   codes are always of odd length.
gamma codes are within a factor of 2 of the optimal encoding
length log2 g .

(assuming the frequency of a gap g is proportional to log2 g    
only approximately true)

51 / 59

gamma code: properties

gamma code (like variable byte code) is pre   x-free: a valid
code word is not a pre   x of any other valid code.

encoding is optimal within a factor of 3 (and within a factor
of 2 making additional assumptions).

this result is independent of the distribution of gaps!

we can use gamma codes for any distribution. gamma code
is universal.

gamma code is parameter-free.

52 / 59

gamma codes: alignment

machines have word boundaries     8, 16, 32 bits

compressing and manipulating at granularity of bits can be
slow.

variable byte encoding is aligned and thus potentially more
e   cient.

regardless of e   ciency, variable byte is conceptually simpler
at little additional space cost.

53 / 59

compression of reuters

data structure
dictionary,    xed-width
dictionary, term pointers into string
   , with blocking, k = 4
   , with blocking & front coding
collection (text, xml markup etc)
collection (text)
t/d incidence matrix
postings, uncompressed (32-bit words)
postings, uncompressed (20 bits)
postings, variable byte encoded
postings,    encoded

size in mb
11.2
7.6
7.1
5.9
3600.0
960.0
40,000.0
400.0
250.0
116.0
101.0

54 / 59

term-document incidence matrix

anthony

and

cleopatra

julius
caesar tempest

the

haid113t othello macbeth

. . .

anthony

brutus

caesar

calpurnia

cleopatra

mercy

1
1
1
0
1
1
1

1
1
1
1
0
0
0

0
0
0
0
0
1
1

0
1
1
0
0
1
1

0
0
1
0
0
1
1

worser
. . .
entry is 1 if term occurs. example: calpurnia occurs in julius
caesar. entry is 0 if term doesn   t occur. example: calpurnia
doesn   t occur in the tempest.

1
0
1
0
0
1
0

55 / 59

compression of reuters

data structure
dictionary,    xed-width
dictionary, term pointers into string
   , with blocking, k = 4
   , with blocking & front coding
collection (text, xml markup etc)
collection (text)
t/d incidence matrix
postings, uncompressed (32-bit words)
postings, uncompressed (20 bits)
postings, variable byte encoded
postings,    encoded

size in mb
11.2
7.6
7.1
5.9
3600.0
960.0
40,000.0
400.0
250.0
116.0
101.0

56 / 59

summary

we can now create an index for highly e   cient boolean
retrieval that is very space e   cient.

only 10-15% of the total size of the text in the collection.

however, we   ve ignored positional and frequency information.

for this reason, space savings are less in reality.

57 / 59

take-away today

motivation for compression in information retrieval systems

how can we compress the dictionary component of the
inverted index?

how can we compress the postings component of the inverted
index?

term statistics: how are terms distributed in document
collections?

58 / 59

resources

chapter 5 of iir
resources at http://cislmu.org

original publication on word-aligned binary codes by anh and
mo   at (2005); also: anh and mo   at (2006a)
original publication on variable byte codes by scholer,
williams, yiannis and zobel (2002)
more details on compression (including compression of
positions and frequencies) in zobel and mo   at (2006)

59 / 59

