introduction to information retrieval

http://informationretrieval.org

iir 6: scoring, term weighting, the vector space model

hinrich sch  utze

center for information and language processing, university of munich

2014-04-30

1 / 65

overview

1 recap

2 why ranked retrieval?

3 term frequency

4

tf-idf weighting

5 the vector space model

2 / 65

outline

1 recap

2 why ranked retrieval?

3 term frequency

4

tf-idf weighting

5 the vector space model

3 / 65

heaps    law

 

m
0
1
g
o

l

6

5

4

3

2

1

0

vocabulary size m as a
function of collection size
t (number of tokens) for
reuters-rcv1. for these
data, the dashed line
log10 m =
0.49     log10 t + 1.64 is the
best least squares    t.
thus, m = 101.64t 0.49
and k = 101.64     44 and
b = 0.49.

0

2

4

6

8

log10 t

4 / 65

zipf   s law

f
c
 

0
1
g
o

l

7

6

5

4

3

2

1

0

i

cf i     1
the most frequent term
(the) occurs cf 1 times, the
second most frequent term
(of) occurs cf 2 = 1
cf1
2
times, the third most
frequent term (and) occurs
cf 3 = 1
3

cf 1 times etc.

0

1

2

3

4

5

6

7

log10 rank

5 / 65

dictionary as a string

. . . sys t i l esyzyge t i csyzyg i a l syzygysza i be l y i t eszec i nszono . . .

freq.

postings ptr.

term ptr.

9
92
5
71
12
. . .

   
   
   
   
   . . .

. . .

4 bytes

4 bytes

3 bytes

6 / 65

gap encoding

the

computer

encoding
docids
gaps
docids
gaps

postings list
. . .

. . .

arachnocentric docids

gaps

252000
252000

248100

283042

283043

283044

283045

1

107

283047

500100

283154

1

5

283159

1

43

283202

. . .
. . .
. . .
. . .

7 / 65

variable byte (vb) code

dedicate 1 bit (high bit) to be a continuation bit c.

if the gap g    ts within 7 bits, binary-encode it in the 7
available bits and set c = 1.

else: set c = 0, encode high-order 7 bits and then use one or
more additional bytes to encode the lower order bits using the
same algorithm.

8 / 65

gamma codes for gap encoding

represent a gap g as a pair of length and o   set.

o   set is the gap in binary, with the leading bit chopped o   .

length is the length of o   set.

encode length in unary code

the gamma code is the concatenation of length and o   set.

9 / 65

compression of reuters

data structure
dictionary,    xed-width
dictionary, term pointers into string
   , with blocking, k = 4
   , with blocking & front coding
collection (text, xml markup etc)
collection (text)
t/d incidence matrix
postings, uncompressed (32-bit words)
postings, uncompressed (20 bits)
postings, variable byte encoded
postings,    encoded

size in mb
11.2
7.6
7.1
5.9
3600.0
960.0
40,000.0
400.0
250.0
116.0
101.0

10 / 65

more on compression for information retrieval

zobel, mo   at: inverted    les for text search engines. acm
computing surveys, 2006. (a lot more detail)

witten, mo   at, bell: managing gigabytes, 1999. (the classic)

b  uttcher, clarke, cormack: information retrieval:
implementing and evaluating search engines, 2010.

11 / 65

take-away today

ranking search results: why it is important (as opposed to
just presenting a set of unordered boolean results)

term frequency: this is a key ingredient for ranking.

tf-idf ranking: best known traditional ranking scheme

vector space model: important formal model for information
retrieval (along with boolean and probabilistic models)

12 / 65

outline

1 recap

2 why ranked retrieval?

3 term frequency

4

tf-idf weighting

5 the vector space model

13 / 65

ranked retrieval

thus far, our queries have been boolean.

documents either match or don   t.

good for expert users with precise understanding of their
needs and of the collection.

also good for applications: applications can easily consume
1000s of results.

not good for the majority of users
most users are not capable of writing boolean queries . . .

. . . or they are, but they think it   s too much work.

most users don   t want to wade through 1000s of results.

this is particularly true of web search.

14 / 65

problem with boolean search: feast or famine

boolean queries often result in either too few (=0) or too
many (1000s) results.
query 1 (boolean conjunction): [standard user dlink 650]

    200,000 hits     feast

query 2 (boolean conjunction): [standard user dlink 650 no
card found]

    0 hits     famine

in boolean retrieval, it takes a lot of skill to come up with a
query that produces a manageable number of hits.

15 / 65

feast or famine: no problem in ranked retrieval

with ranking, large result sets are not an issue.

just show the top 10 results

doesn   t overwhelm the user

premise: the ranking algorithm works: more relevant results
are ranked higher than less relevant results.

16 / 65

scoring as the basis of ranked retrieval

how can we accomplish a relevance ranking of the documents
with respect to a query?

assign a score to each query-document pair, say in [0, 1].

this score measures how well document and query    match   .

sort documents according to scores

17 / 65

query-document matching scores

how do we compute the score of a query-document pair?

if no query term occurs in the document: score should be 0.

the more frequent a query term in the document, the higher
the score

the more query terms occur in the document, the higher the
score

we will look at a number of alternatives for doing this.

18 / 65

take 1: jaccard coe   cient

a commonly used measure of overlap of two sets

let a and b be two sets

jaccard coe   cient:

jaccard(a, b) = |a     b|
|a     b|

(a 6=     or b 6=    )
jaccard(a, a) = 1
jaccard(a, b) = 0 if a     b = 0
a and b don   t have to be the same size.

always assigns a number between 0 and 1.

19 / 65

jaccard coe   cient: example

what is the query-document match score that the jaccard
coe   cient computes for:

query:    ides of march   
document    caesar died in march   
jaccard(q, d) = 1/6

20 / 65

what   s wrong with jaccard?

it doesn   t consider term frequency (how many occurrences a
term has).

rare terms are more informative than frequent terms. jaccard
does not consider this information.

we need a more sophisticated way of normalizing for the
length of a document.

later in this lecture, we   ll use |a     b|/p|a     b| (cosine) . . .
. . . instead of |a     b|/|a     b| (jaccard) for length
id172.

21 / 65

outline

1 recap

2 why ranked retrieval?

3 term frequency

4

tf-idf weighting

5 the vector space model

22 / 65

binary incidence matrix

anthony

and

cleopatra

julius
caesar tempest

the

haid113t othello macbeth

. . .

anthony

brutus

caesar

calpurnia

cleopatra

mercy

1
1
1
0
1
1
1

1
1
1
1
0
0
0

0
0
0
0
0
1
1

0
1
1
0
0
1
1

worser
. . .
each document is represented as a binary vector     {0, 1}|v |.

0
0
1
0
0
1
1

1
0
1
0
0
1
0

23 / 65

anthony

and

cleopatra

julius
caesar tempest

the

haid113t othello macbeth

. . .

count matrix

anthony

brutus

caesar

calpurnia

cleopatra

mercy

157
4
232
0
57
2
2

73
157
227
10
0
0
0

0
0
0
0
0
3
1

0
2
2
0
0
8
1

0
0
1
0
0
5
1

worser
. . .
each document is now represented as a count vector     n|v |.

1
0
0
0
0
8
5

24 / 65

id159

we do not consider the order of words in a document.

john is quicker than mary and mary is quicker than john are
represented the same way.

this is called a id159.

in a sense, this is a step back: the positional index was able
to distinguish these two documents.

we will look at    recovering    positional information later in
this course.

for now: id159

25 / 65

term frequency tf

the term frequency tft ,d of term t in document d is de   ned
as the number of times that t occurs in d.

we want to use tf when computing query-document match
scores.

but how?

raw term frequency is not what we want because:

a document with tf = 10 occurrences of the term is more
relevant than a document with tf = 1 occurrence of the term.

but not 10 times more relevant.

relevance does not increase proportionally with term
frequency.

26 / 65

instead of raw frequency: log frequency weighting

the log frequency weight of term t in d is de   ned as follows

wt ,d = (cid:26) 1 + log10 tft ,d

0

if tft ,d > 0
otherwise

tft ,d     wt ,d :
0     0, 1     1, 2     1.3, 10     2, 1000     4, etc.
score for a document-query pair: sum over terms t in both q
and d:

tf-matching-score(q, d) = pt   q   d (1 + log tft ,d )

the score is 0 if none of the query terms is present in the
document.

27 / 65

exercise

compute the jaccard matching score and the tf matching
score for the following query-document pairs.

q: [information on cars] d:    all you   ve ever wanted to know
about cars   

q: [information on cars] d:    information on trucks,
information on planes, information on trains   

q: [red cars and red trucks] d:    cops stop red cars more
often   

28 / 65

outline

1 recap

2 why ranked retrieval?

3 term frequency

4

tf-idf weighting

5 the vector space model

29 / 65

frequency in document vs. frequency in collection

in addition, to term frequency (the frequency of the term in
the document) . . .

. . . we also want to use the frequency of the term in the
collection for weighting and ranking.

30 / 65

desired weight for rare terms

rare terms are more informative than frequent terms.

consider a term in the query that is rare in the collection
(e.g., arachnocentric).

a document containing this term is very likely to be relevant.
    we want high weights for rare terms like
arachnocentric.

31 / 65

desired weight for frequent terms

frequent terms are less informative than rare terms.

consider a term in the query that is frequent in the collection
(e.g., good, increase, line).

a document containing this term is more likely to be relevant
than a document that doesn   t . . .

. . . but words like good, increase and line are not sure
indicators of relevance.
    for frequent terms like good, increase, and line, we
want positive weights . . .

. . . but lower weights than for rare terms.

32 / 65

document frequency

we want high weights for rare terms like arachnocentric.

we want low (positive) weights for frequent words like good,
increase, and line.

we will use document frequency to factor this into computing
the matching score.

the document frequency is the number of documents in the
collection that the term occurs in.

33 / 65

idf weight

dft is the document frequency, the number of documents that
t occurs in.
dft is an inverse measure of the informativeness of term t.
we de   ne the idf weight of term t as follows:

idft = log10

n
dft

(n is the number of documents in the collection.)
idft is a measure of the informativeness of the term.
[log n/dft] instead of [n/dft] to    dampen    the e   ect of idf
note that we use the log transformation for both term
frequency and document frequency.

34 / 65

examples for idf

compute idft using the formula: idft = log10

1,000,000

dft

term
calpurnia
animal
sunday
   y
under
the

dft
1
100
1000
10,000
100,000
1,000,000

idft
6
4
3
2
1
0

35 / 65

e   ect of idf on ranking

idf a   ects the ranking of documents for queries with at least
two terms.

for example, in the query    arachnocentric line   , idf weighting
increases the relative weight of arachnocentric and
decreases the relative weight of line.

idf has little e   ect on ranking for one-term queries.

36 / 65

collection frequency vs. document frequency

word
insurance

try

collection frequency
10440
10422

document frequency
3997
8760

collection frequency of t: number of tokens of t in the
collection

document frequency of t: number of documents t occurs in

why these numbers?

which word is a better search term (and should get a higher
weight)?

this example suggests that df (and idf) is better for weighting
than cf (and    icf   ).

37 / 65

tf-idf weighting

the tf-idf weight of a term is the product of its tf weight and
its idf weight.

wt ,d = (1 + log tft ,d )    log

n
dft

tf-weight

idf-weight

best known weighting scheme in information retrieval

alternative names: tf.idf, tf x idf

38 / 65

summary: tf-idf

assign a tf-idf weight for each term t in each document d:
wt ,d = (1 + log tft ,d )    log n
dft
the tf-idf weight . . .

. . . increases with the number of occurrences within a
document. (term frequency)
. . . increases with the rarity of the term in the collection.
(inverse document frequency)

39 / 65

exercise: term, collection and document frequency

quantity
term frequency

symbol de   nition
tft ,d

document frequency

dft

collection frequency

cft

number of occurrences of t in
d
number of documents in the
collection that t occurs in
total number of occurrences of
t in the collection

relationship between df and cf?

relationship between tf and cf?

relationship between tf and df?

40 / 65

outline

1 recap

2 why ranked retrieval?

3 term frequency

4

tf-idf weighting

5 the vector space model

41 / 65

binary incidence matrix

anthony

and

cleopatra

julius
caesar tempest

the

haid113t othello macbeth

. . .

anthony

brutus

caesar

calpurnia

cleopatra

mercy

1
1
1
0
1
1
1

1
1
1
1
0
0
0

0
0
0
0
0
1
1

0
1
1
0
0
1
1

worser
. . .
each document is represented as a binary vector     {0, 1}|v |.

0
0
1
0
0
1
1

1
0
1
0
0
1
0

42 / 65

anthony

and

cleopatra

julius
caesar tempest

the

haid113t othello macbeth

. . .

count matrix

anthony

brutus

caesar

calpurnia

cleopatra

mercy

157
4
232
0
57
2
2

73
157
227
10
0
0
0

0
0
0
0
0
3
1

0
2
2
0
0
8
1

0
0
1
0
0
5
1

worser
. . .
each document is now represented as a count vector     n|v |.

1
0
0
0
0
8
5

43 / 65

binary     count     weight matrix

anthony

and

cleopatra

julius
caesar tempest

the

haid113t othello macbeth

. . .

anthony

brutus

caesar

calpurnia

cleopatra

mercy

5.25
1.21
8.59
0.0
2.85
1.51
1.37

3.18
6.10
2.54
1.54
0.0
0.0
0.0

0.0
0.0
0.0
0.0
0.0
1.90
0.11

0.0
1.0
1.51
0.0
0.0
0.12
4.15

0.0
0.0
0.25
0.0
0.0
5.25
0.25

worser
. . .
each document is now represented as a real-valued vector of tf-idf

weights     r|v |.

0.35
0.0
0.0
0.0
0.0
0.88
1.95

44 / 65

documents as vectors

each document is now represented as a real-valued vector of
tf-idf weights     r|v |.
so we have a |v|-dimensional real-valued vector space.
terms are axes of the space.

documents are points or vectors in this space.

very high-dimensional: tens of millions of dimensions when
you apply this to web search engines

each vector is very sparse - most entries are zero.

45 / 65

queries as vectors

key idea 1: do the same for queries: represent them as
vectors in the high-dimensional space

key idea 2: rank documents according to their proximity to
the query

proximity = similarity
proximity     negative distance
recall: we   re doing this because we want to get away from
the you   re-either-in-or-out, feast-or-famine boolean model.

instead: rank relevant documents higher than nonrelevant
documents

46 / 65

how do we formalize vector space similarity?

first cut: (negative) distance between two points

( = distance between the end points of the two vectors)

euclidean distance?

euclidean distance is a bad idea . . .

. . . because euclidean distance is large for vectors of di   erent
lengths.

47 / 65

why distance is a bad idea

poor

d1: ranks of starving poets swell

1

d2: rich poor gap grows

q: [rich poor]

0

0

d3: record baseball salaries in 2010

rich

1

the euclidean distance of

~q and ~d2 is large although the distribution of terms in the query q
and the distribution of terms in the document d2 are very similar.
questions about basic vector space setup?

48 / 65

use angle instead of distance

rank documents according to angle with query

thought experiment: take a document d and append it to
itself. call this document d    . d     is twice as long as d.
   semantically    d and d     have the same content.
the angle between the two documents is 0, corresponding to
maximal similarity . . .

. . . even though the euclidean distance between the two
documents can be quite large.

49 / 65

from angles to cosines

the following two notions are equivalent.

rank documents according to the angle between query and
document in decreasing order
rank documents according to cosine(query,document) in
increasing order

cosine is a monotonically decreasing function of the angle for
the interval [0   , 180   ]

50 / 65

cosine

51 / 65

length id172

how do we compute the cosine?

a vector can be (length-) normalized by dividing each of its
components by its length     here we use the l2 norm:

i

this maps vectors onto the unit sphere . . .

||x||2 = qpi x 2
. . . since after id172: ||x||2 = qpi x 2

i = 1.0

as a result, longer documents and shorter documents have
weights of the same order of magnitude.
e   ect on the two documents d and d     (d appended to itself)
from earlier slide: they have identical vectors after
length-id172.

52 / 65

cosine similarity between query and document

cos(~q, ~d) = sim(~q, ~d) =

~q    ~d
|~q||~d|

=

i =1 qi di

p|v |
qp|v |
i =1 q2

i qp|v |

i =1 d 2

i

qi is the tf-idf weight of term i in the query.
di is the tf-idf weight of term i in the document.
|~q| and |~d| are the lengths of ~q and ~d.
this is the cosine similarity of ~q and ~d . . . . . . or, equivalently,
the cosine of the angle between ~q and ~d.

53 / 65

cosine for normalized vectors

for normalized vectors, the cosine is equivalent to the dot
product or scalar product.

cos(~q, ~d) = ~q    ~d = pi qi    di

(if ~q and ~d are length-normalized).

54 / 65

cosine similarity illustrated

poor
1

~v(d1)

~v (q)

~v(d2)

  

0

0

~v(d3)

1

rich

55 / 65

cosine: example

how similar are
these novels? sas:

sense and
sensibility pap:

pride and
prejudice wh:

wuthering
heights

term frequencies (counts)

term
affection

jealous

gossip

wuthering

sas pap wh
115
20
11
10
6
2
0
38

58
7
0
0

56 / 65

cosine: example

term frequencies (counts)

log frequency weighting

term
affection

jealous

gossip

wuthering

sas pap wh
20
115
11
10
2
6
38
0

58
7
0
0

term
affection

jealous

gossip
wuthering 0

sas pap wh
2.30
3.06
2.04
2.0
1.30
1.78
2.58

2.76
1.85
0
0

(to simplify this example, we don   t do idf weighting.)

57 / 65

cosine: example

log frequency weighting

log frequency weighting
& cosine id172

term
affection

jealous

gossip
wuthering 0

sas pap wh
2.30
3.06
2.0
2.04
1.78
1.30
2.58

2.76
1.85
0
0

term
affection

jealous

gossip
wuthering 0.0

sas
0.789
0.515
0.335

pap wh
0.832
0.555
0.0
0.0

0.524
0.465
0.405
0.588

cos(sas,pap)    
0.789     0.832 + 0.515     0.555 + 0.335     0.0 + 0.0     0.0     0.94.
cos(sas,wh)     0.79
cos(pap,wh)     0.69
why do we have cos(sas,pap) > cos(sas,wh)?

58 / 65

computing the cosine score

cosinescore(q)

1    oat scores[n] = 0
2    oat length[n]
3 for each query term t
4 do calculate wt ,q and fetch postings list for t
5
6
7 read the array length
8 for each d
9 do scores[d] = scores[d]/length[d]
10 return top k components of scores[]

for each pair(d, tft ,d ) in postings list
do scores[d]+ = wt ,d    wt ,q

59 / 65

components of tf-idf weighting

term frequency

document frequency

id172

n (natural)

tft ,d

n (no)

1
log n
dft

t (idf)
p (prob idf) max{0, log n   df t
df t }

l (logarithm)

a (augmented)

b (boolean)

1 + log(tft ,d )
0.5 + 0.5  tft ,d
maxt (tft ,d )
(cid:26)1 if tf t ,d > 0

0 otherwise

l (log ave)

1+log(tf t ,d )

1+log(avet   d (tf t ,d ))

best known combination of weighting options default: no

weighting

n (none)

c (cosine)

u (pivoted
unique)

b (byte size)

1
   w 2
1/u

1
2 +...+w 2
1 +w 2

m

1/charlength  ,
   < 1

60 / 65

tf-idf example

we often use di   erent weightings for queries and documents.

notation: ddd.qqq

example: lnc.ltn

document: logarithmic tf, no df weighting, cosine
id172

query: logarithmic tf, idf, no id172

isn   t it bad to not idf-weight the document?

example query:    best car insurance   

example document:    car insurance auto insurance   

61 / 65

tf-idf example: lnc.ltn

query:    best car insurance   . document:    car insurance auto insurance   .

word

auto
best
car
insurance

tf-raw tf-wght
0
1
1
1

0
1
1
1

query
df
5000
50000
10000
1000

idf
2.3
1.3
2.0
3.0

weight
0
1.3
2.0
3.0

document

product

tf-raw tf-wght weight
1
0
1
2

1
0
1
1.3

1
0
1
1.3

n   lized
0.52
0
0.52
0.68

0
0
1.04
2.04

key to columns: tf-raw: raw (unweighted) term frequency, tf-wght: logarithmically weighted

term frequency, df: document frequency, idf: inverse document frequency, weight: the    nal
weight of the term in the query or document, n   lized: document weights after cosine
id172, product: the product of    nal query weight and    nal document weight

   12 + 02 + 12 + 1.32     1.92
1/1.92     0.52
1.3/1.92     0.68 final similarity score between query and
document: pi wqi    wdi = 0 + 0 + 1.04 + 2.04 = 3.08 questions?

62 / 65

summary: ranked retrieval in the vector space model

represent the query as a weighted tf-idf vector

represent each document as a weighted tf-idf vector

compute the cosine similarity between the query vector and
each document vector

rank documents with respect to the query

return the top k (e.g., k = 10) to the user

63 / 65

take-away today

ranking search results: why it is important (as opposed to
just presenting a set of unordered boolean results)

term frequency: this is a key ingredient for ranking.

tf-idf ranking: best known traditional ranking scheme

vector space model: important formal model for information
retrieval (along with boolean and probabilistic models)

64 / 65

resources

chapters 6 and 7 of iir
resources at http://cislmu.org

vector space for dummies
exploring the similarity space (mo   at and zobel, 2005)
okapi bm25 (a state-of-the-art weighting method, 11.4.3 of
iir)

65 / 65

