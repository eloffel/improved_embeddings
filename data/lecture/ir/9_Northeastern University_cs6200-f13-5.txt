cs6200	
   

informa.on	
   retrieval	
   

david	
   smith	
   

college	
   of	
   computer	
   and	
   informa.on	
   science	
   

northeastern	
   university	
   

indexing	
   process	
   

indexes	
   

       indexes	
   are	
   data	
   structures	
   designed	
   to	
   make	
   

search	
   faster	
   

       text	
   search	
   has	
   unique	
   requirements,	
   which	
   

leads	
   to	
   unique	
   data	
   structures	
   

       most	
   common	
   data	
   structure	
   is	
   inverted	
   index	
   

      general	
   name	
   for	
   a	
   class	
   of	
   structures	
   
         inverted   	
   because	
   documents	
   are	
   associated	
   
with	
   words,	
   rather	
   than	
   words	
   with	
   documents	
   
       similar	
   to	
   a	
   concordance	
   

a	
   shakespeare	
   concordance	
   

how	
   to	
   write	
   a	
   dic.onary	
   

indexes	
   and	
   ranking	
   
       indexes	
   are	
   designed	
   to	
   support	
   search	
   

       faster	
   response	
   .me,	
   supports	
   updates	
   

       text	
   search	
   engines	
   use	
   a	
   par.cular	
   form	
   of	
   

search:	
   ranking	
   
       documents	
   are	
   retrieved	
   in	
   sorted	
   order	
   according	
   to	
   

a	
   score	
   compu.ng	
   using	
   the	
   document	
   
representa.on,	
   the	
   query,	
   and	
   a	
   ranking	
   algorithm	
   

       what	
   is	
   a	
   reasonable	
   abstract	
   model	
   for	
   ranking?	
   

       enables	
   discussion	
   of	
   indexes	
   without	
   details	
   of	
   

retrieval	
   model	
   

abstract	
   model	
   of	
   ranking	
   

more	
   concrete	
   model	
   

inverted	
   index	
   

       each	
   index	
   term	
   is	
   associated	
   with	
   an	
   inverted	
   

list	
   
      contains	
   lists	
   of	
   documents,	
   or	
   lists	
   of	
   word	
   
occurrences	
   in	
   documents,	
   and	
   other	
   informa.on	
   
      each	
   entry	
   is	
   called	
   a	
   pos5ng	
   
      the	
   part	
   of	
   the	
   pos.ng	
   that	
   refers	
   to	
   a	
   speci   c	
   
document	
   or	
   loca.on	
   is	
   called	
   a	
   pointer	
   
      each	
   document	
   in	
   the	
   collec.on	
   is	
   given	
   a	
   unique	
   
number	
   
      lists	
   are	
   usually	
   document-     ordered	
   (sorted	
   by	
   
document	
   number)	
   

example	
      collec.on   	
   

simple	
   inverted	
   	
   

index	
   

inverted	
   index	
   
with	
   counts	
   

      	
   	
   supports	
   beuer	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   
ranking	
   algorithms	
   

	
   

	
   
	
   

inverted	
   index	
   
with	
   posi.ons	
   

	
   

      	
   supports	
   	
   
proximity	
   matches	
   

proximity	
   matches	
   

       matching	
   phrases	
   or	
   words	
   within	
   a	
   window	
   
      e.g.,	
   "tropical	
   fish",	
   or	
         nd	
   tropical	
   within	
   5	
   
words	
   of	
      sh   	
   

       word	
   posi.ons	
   in	
   inverted	
   lists	
   make	
   these	
   

types	
   of	
   query	
   features	
   e   cient	
   
      e.g.,	
   

fields	
   and	
   extents	
   

       document	
   structure	
   is	
   useful	
   in	
   search	
   

         eld	
   restric.ons	
   

       e.g.,	
   date,	
   from:,	
   etc.	
   

      some	
      elds	
   more	
   important	
   

       e.g.,	
   .tle	
   

       op.ons:	
   

      separate	
   inverted	
   lists	
   for	
   each	
      eld	
   type	
   
      add	
   informa.on	
   about	
      elds	
   to	
   pos.ngs	
   
      use	
   extent	
   lists	
   

extent	
   lists	
   

       an	
   extent	
   is	
   a	
   con.guous	
   region	
   of	
   a	
   

document	
   
      represent	
   extents	
   using	
   word	
   posi.ons	
   
      inverted	
   list	
   records	
   all	
   extents	
   for	
   a	
   given	
      eld	
   
type	
   
      e.g.,	
   

extent	
   list	
   

other	
   issues	
   

       precomputed	
   scores	
   in	
   inverted	
   list	
   

      e.g.,	
   list	
   for	
         sh   	
   [(1:3.6),	
   (3:2.2)],	
   where	
   3.6	
   is	
   
total	
   feature	
   value	
   for	
   document	
   1	
   
      improves	
   speed	
   but	
   reduces	
      exibility	
   

       score-     ordered	
   lists	
   

      query	
   processing	
   engine	
   can	
   focus	
   only	
   on	
   the	
   top	
   
part	
   of	
   each	
   inverted	
   list,	
   where	
   the	
   highest-     
scoring	
   documents	
   are	
   recorded	
   
      very	
   e   cient	
   for	
   single-     word	
   queries	
   

compression	
   

       inverted	
   lists	
   are	
   very	
   large	
   

       e.g.,	
   25-     50%	
   of	
   collec.on	
   for	
   trec	
   collec.ons	
   using	
   
       much	
   higher	
   if	
   n-     grams	
   are	
   indexed	
   

indri	
   search	
   engine	
   

       compression	
   of	
   indexes	
   saves	
   disk	
   and/or	
   
memory	
   space	
   
       typically	
   have	
   to	
   decompress	
   lists	
   to	
   use	
   them	
   
       best	
   compression	
   techniques	
   have	
   good	
   compression	
   

ra5os	
   and	
   are	
   easy	
   to	
   decompress	
   

       lossless	
   compression	
      	
   no	
   informa.on	
   lost	
   

compression	
   

       basic	
   idea:	
   common	
   data	
   elements	
   use	
   short	
   

codes	
   while	
   uncommon	
   data	
   elements	
   use	
   
longer	
   codes	
   
      example:	
   coding	
   numbers	
   

       number	
   sequence:	
   

       possible	
   encoding:	
   

       encode	
   0	
   using	
   a	
   single	
   0:	
   

       only	
   10	
   bits,	
   but...	
   

compression	
   example	
   
       ambiguous	
   encoding	
      	
   not	
   clear	
   how	
   to	
   

decode	
   

       another	
   decoding:	
   

       which	
   represents:	
   

       use	
   unambiguous	
   code:	
   

       which	
   gives:	
   

compression	
   and	
   id178	
   

       id178	
   measures	
      randomness   	
   

      inverse	
   of	
   compressability	
   

h(x)        

n
   
i=1

p(x = xi

)log2 p(x = xi)

      log2:	
   measured	
   in	
   bits	
   
      upper	
   bound:	
   log	
   n	
   
      example	
   curve	
   for	
   binomial	
   

compression	
   and	
   id178	
   

       id178	
   bounds	
   compression	
   rate	
   
       theorem:	
   h(x)	
      	
   e[	
   |encoded(x)|	
   ]	
   
       recall:	
   h(x)	
      	
   log(n)	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   
       n	
   is	
   the	
   size	
   of	
   the	
   domain	
   of	
   x	
   

       standard	
   binary	
   encoding	
   of	
   integers	
   op.mizes	
   
for	
   the	
   worst	
   case	
   where	
   choice	
   of	
   numbers	
   is	
   
completely	
   unpredictable	
   

       it	
   turns	
   out,	
   we	
   can	
   do	
   beuer.	
   at	
   best:	
   

       h(x)	
      	
   e[	
   |encoded(x)|	
   ]	
   <	
   h(x)	
   +	
   1	
   
       bound	
   achieved	
   by	
   hu   man	
   codes	
   

delta	
   encoding	
   

       word	
   count	
   data	
   is	
   good	
   candidate	
   for	
   

compression	
   
      many	
   small	
   numbers	
   and	
   few	
   larger	
   numbers	
   
      encode	
   small	
   numbers	
   with	
   small	
   codes	
   

       document	
   numbers	
   are	
   less	
   predictable	
   

      but	
   di   erences	
   between	
   numbers	
   in	
   an	
   ordered	
   
list	
   are	
   smaller	
   and	
   more	
   predictable	
   

       delta	
   encoding:	
   

      encoding	
   di   erences	
   between	
   document	
   numbers	
   
(d-     gaps)	
   

delta	
   encoding	
   

       inverted	
   list	
   (without	
   counts)	
   

       di   erences	
   between	
   adjacent	
   numbers	
   

       di   erences	
   for	
   a	
   high-     frequency	
   word	
   	
   are	
   easier	
   to	
   

compress,	
   e.g.,	
   

       di   erences	
   for	
   a	
   low-     frequency	
   word	
   are	
   large,	
   e.g.,	
   
	
   

bit-     aligned	
   codes	
   

       breaks	
   between	
   encoded	
   numbers	
   can	
   occur	
   

aner	
   any	
   bit	
   posi.on	
   

       unary	
   code	
   

      encode	
   k	
   by	
   k	
   1s	
   followed	
   by	
   0	
   
      0	
   at	
   end	
   makes	
   code	
   unambiguous	
   

unary	
   and	
   binary	
   codes	
   

       unary	
   is	
   very	
   e   cient	
   for	
   small	
   numbers	
   such	
   

as	
   0	
   and	
   1,	
   but	
   quickly	
   becomes	
   very	
   
expensive	
   
      1023	
   can	
   be	
   represented	
   in	
   10	
   binary	
   bits,	
   but	
   
requires	
   1024	
   bits	
   in	
   unary	
   

       binary	
   is	
   more	
   e   cient	
   for	
   large	
   numbers,	
   but	
   

it	
   may	
   be	
   ambiguous	
   

elias-       	
   code	
   
       to	
   encode	
   a	
   number	
   k,	
   compute	
   

       kd	
   is	
   number	
   of	
   binary	
   digits,	
   encoded	
   in	
   unary	
   

elias-       	
   code	
   

       elias-       	
   code	
   uses	
   no	
   more	
   bits	
   than	
   unary,	
   

many	
   fewer	
   for	
   k	
   >	
   2	
   
      1023	
   takes	
   19	
   bits	
   instead	
   of	
   1024	
   bits	
   using	
   unary	
   
       in	
   general,	
   takes	
   2   log2k   +1	
   bits	
   
       to	
   improve	
   coding	
   of	
   large	
   numbers,	
   use	
   elias-     
  	
   code	
   
      instead	
   of	
   encoding	
   kd	
   in	
   unary,	
   we	
   encode	
   kd	
   +	
   1	
   
using	
   elias-       	
   
      takes	
   approximately	
   2	
   log2	
   log2	
   k	
   +	
   log2	
   k	
   bits	
   

elias-       	
   code	
   

       split	
   kd	
   into:	
   

      encode	
   kdd	
   in	
   unary,	
   kdr	
   in	
   binary,	
   and	
   kr	
   in	
   binary	
   

byte-     aligned	
   codes	
   

       variable-     length	
   bit	
   encodings	
   can	
   be	
   a	
   

problem	
   on	
   processors	
   that	
   process	
   bytes	
   

       v-     byte	
   is	
   a	
   popular	
   byte-     aligned	
   code	
   

      similar	
   to	
   unicode	
   utf-     8	
   

       shortest	
   v-     byte	
   code	
   is	
   1	
   byte	
   
       numbers	
   are	
   1	
   to	
   4	
   bytes,	
   with	
   high	
   bit	
   1	
   in	
   

the	
   last	
   byte,	
   0	
   otherwise	
   

v-     byte	
   encoding	
   

v-     byte	
   encoder	
   	
   

v-     byte	
   decoder	
   

compression	
   example	
   

       consider	
   inverted	
   list	
   with	
   counts	
   &	
   posi.ons:	
   

       delta	
   encode	
   document	
   numbers	
   and	
   

posi.ons:	
   

       compress	
   using	
   v-     byte:	
   

skipping	
   	
   

       search	
   involves	
   comparison	
   of	
   inverted	
   lists	
   of	
   

di   erent	
   lengths	
   
      can	
   be	
   very	
   ine   cient	
   
         skipping   	
   ahead	
   to	
   check	
   document	
   numbers	
   is	
   
much	
   beuer	
   
      compression	
   makes	
   this	
   di   cult	
   

       variable	
   size,	
   only	
   d-     gaps	
   stored	
   

       skip	
   pointers	
   are	
   addi.onal	
   data	
   structure	
   to	
   

support	
   skipping	
   

skip	
   pointers	
   

       a	
   skip	
   pointer	
   (d,	
   p)	
   contains	
   a	
   document	
   

number	
   d	
   and	
   a	
   byte	
   (or	
   bit)	
   posi.on	
   p	
   
      means	
   there	
   is	
   an	
   inverted	
   list	
   pos.ng	
   that	
   starts	
   
at	
   posi.on	
   p,	
   and	
   the	
   pos.ng	
   before	
   it	
   was	
   for	
   
document	
   d	
   

skip	
   pointers	
   

inverted	
   list	
   

skip	
   pointers	
   

       example	
   

      inverted	
   list	
   
	
   
      d-     gaps	
   

      skip	
   pointers	
   

auxiliary	
   structures	
   

       inverted	
   lists	
   usually	
   stored	
   together	
   in	
   a	
   single	
   

   le	
   for	
   e   ciency	
   
       inverted	
      le	
   

       vocabulary	
   or	
   lexicon	
   

o   set	
   of	
   the	
   inverted	
   list	
   in	
   the	
   inverted	
      le	
   

       contains	
   a	
   lookup	
   table	
   from	
   index	
   terms	
   to	
   the	
   byte	
   
       either	
   hash	
   table	
   in	
   memory	
   or	
   b-     tree	
   for	
   larger	
   
       term	
   sta.s.cs	
   stored	
   at	
   start	
   of	
   inverted	
   lists	
   
       collec.on	
   sta.s.cs	
   stored	
   in	
   separate	
      le	
   

vocabularies	
   

index	
   construc.on	
   

       simple	
   in-     memory	
   indexer	
   

merging	
   

       merging	
   addresses	
   limited	
   memory	
   problem	
   
      build	
   the	
   inverted	
   list	
   structure	
   un.l	
   memory	
   runs	
   
out	
   
      then	
   write	
   the	
   par.al	
   index	
   to	
   disk,	
   start	
   making	
   a	
   
new	
   one	
   
      at	
   the	
   end	
   of	
   this	
   process,	
   the	
   disk	
   is	
      lled	
   with	
   
many	
   par.al	
   indexes,	
   which	
   are	
   merged	
   

       par.al	
   lists	
   must	
   be	
   designed	
   so	
   they	
   can	
   be	
   

merged	
   in	
   small	
   pieces	
   
      e.g.,	
   storing	
   in	
   alphabe.cal	
   order	
   

merging	
   

distributed	
   indexing	
   

       distributed	
   processing	
   driven	
   by	
   need	
   to	
   index	
   

and	
   analyze	
   huge	
   amounts	
   of	
   data	
   (i.e.,	
   the	
   
web)	
   

       large	
   numbers	
   of	
   inexpensive	
   servers	
   used	
   
rather	
   than	
   larger,	
   more	
   expensive	
   machines	
   
       mapreduce	
   is	
   a	
   distributed	
   programming	
   tool	
   

designed	
   for	
   indexing	
   and	
   analysis	
   tasks	
   

example	
   

       given	
   a	
   large	
   text	
      le	
   that	
   contains	
   data	
   about	
   
credit	
   card	
   transac.ons	
   
      each	
   line	
   of	
   the	
      le	
   contains	
   a	
   credit	
   card	
   number	
   
and	
   an	
   amount	
   of	
   money	
   
      determine	
   the	
   number	
   of	
   unique	
   credit	
   card	
   
numbers	
   
       could	
   use	
   hash	
   table	
      	
   memory	
   problems	
   

      coun.ng	
   is	
   simple	
   with	
   sorted	
      le	
   
       similar	
   with	
   distributed	
   approach	
   
      sor.ng	
   and	
   placement	
   are	
   crucial	
   

mapreduce	
   

       distributed	
   programming	
   framework	
   that	
   focuses	
   

on	
   data	
   placement	
   and	
   distribu.on	
   

       generally,	
   transforms	
   a	
   list	
   of	
   items	
   into	
   another	
   list	
   

of	
   items	
   of	
   the	
   same	
   length	
   

       mapper	
   

       reducer	
   

       transforms	
   a	
   list	
   of	
   items	
   into	
   a	
   single	
   item	
   
       de   ni.ons	
   not	
   so	
   strict	
   in	
   terms	
   of	
   number	
   of	
   outputs	
   

       many	
   mapper	
   and	
   reducer	
   tasks	
   on	
   a	
   cluster	
   of	
   

machines	
   

mapreduce	
   

       basic	
   process	
   

each	
   with	
   a	
   key	
   and	
   a	
   value	
   

       map	
   stage	
   which	
   transforms	
   data	
   records	
   into	
   pairs,	
   
       shu   e	
   uses	
   a	
   hash	
   func.on	
   so	
   that	
   all	
   pairs	
   with	
   the	
   
same	
   key	
   end	
   up	
   next	
   to	
   each	
   other	
   and	
   on	
   the	
   same	
   
machine	
   
       reduce	
   stage	
   processes	
   records	
   in	
   batches,	
   where	
   all	
   

pairs	
   with	
   the	
   same	
   key	
   are	
   processed	
   at	
   the	
   same	
   
.me	
   
       idempotence	
   of	
   mapper	
   and	
   reducer	
   provides	
   

fault	
   tolerance	
   
       mul.ple	
   opera.ons	
   on	
   same	
   input	
   gives	
   same	
   output	
   

mapreduce	
   

example	
   

indexing	
   example	
   

result	
   merging	
   

       index	
   merging	
   is	
   a	
   good	
   strategy	
   for	
   handling	
   
       for	
   small	
   updates	
   this	
   is	
   very	
   ine   cient	
   

updates	
   when	
   they	
   come	
   in	
   large	
   batches	
   

      instead,	
   create	
   separate	
   index	
   for	
   new	
   
documents,	
   merge	
   results	
   from	
   both	
   searches	
   
      could	
   be	
   in-     memory,	
   fast	
   to	
   update	
   and	
   search	
   

       dele.ons	
   handled	
   using	
   delete	
   list	
   

      modi   ca.ons	
   done	
   by	
   puxng	
   old	
   version	
   on	
   
delete	
   list,	
   adding	
   new	
   version	
   to	
   new	
   documents	
   
index	
   

query	
   processing	
   

       document-     at-     a-     .me	
   

      calculates	
   complete	
   scores	
   for	
   documents	
   by	
   
processing	
   all	
   term	
   lists,	
   one	
   document	
   at	
   a	
   .me	
   

       term-     at-     a-     .me	
   

      accumulates	
   scores	
   for	
   documents	
   by	
   processing	
   
term	
   lists	
   one	
   at	
   a	
   .me	
   

       both	
   approaches	
   have	
   op.miza.on	
   

techniques	
   that	
   signi   cantly	
   reduce	
   .me	
   
required	
   to	
   generate	
   scores	
   

document-     at-     a-     time	
   

pseudocode	
   func.on	
   descrip.ons	
   
       getcurrentdocument()	
   	
   

       returns	
   the	
   document	
   number	
   of	
   the	
   current	
   pos.ng	
   of	
   the	
   inverted	
   

list.	
   

       skipforwardtodocument(d)	
   

       moves	
   forward	
   in	
   the	
   inverted	
   list	
   un.l	
   getcurrentdocument()	
   <=	
   d.	
   

this	
   func.on	
   may	
   read	
   to	
   the	
   end	
   of	
   the	
   list.	
   

       movepastdocument(d)	
   
      

       moves	
   forward	
   in	
   the	
   inverted	
   list	
   un.l	
   getcurrentdocument()	
   <	
   d.	
   
	
   movetonextdocument()	
   
       moves	
   to	
   the	
   next	
   document	
   in	
   the	
   list.	
   	
   equivalent	
   to	
   

movepastdocument(getcurrentdocument()).	
   

       getnextaccumulator(d)	
   

accumulator.	
   

       	
   returns	
   the	
      rst	
   document	
   number	
   d'	
   >=	
   d	
   that	
   has	
   already	
   has	
   an	
   
	
   removeaccumulatorsbetween(a,	
   b)	
   
       removes	
   all	
   accumulators	
   for	
   documents	
   numbers	
   between	
   a	
   and	
   b.	
   

      

ad	
   will	
   be	
   removed	
   i   	
   a	
   <	
   d	
   <	
   b.	
   

document-     at-     a-     time	
   

term-     at-     a-     time	
   

term-     at-     a-     time	
   

op.miza.on	
   techniques	
   
       term-     at-     a-     .me	
   uses	
   more	
   memory	
   for	
   
accumulators,	
   but	
   accesses	
   disk	
   more	
   
e   ciently	
   

       two	
   classes	
   of	
   op.miza.on	
   

      read	
   less	
   data	
   from	
   inverted	
   lists	
   

       e.g.,	
   skip	
   lists	
   
       beuer	
   for	
   simple	
   feature	
   func.ons	
   

      calculate	
   scores	
   for	
   fewer	
   documents	
   

       e.g.,	
   conjunc.ve	
   processing	
   
       beuer	
   for	
   complex	
   feature	
   func.ons	
   

conjunc.ve	
   	
   
term-     at-     a-     time	
   

conjunc.ve	
   	
   

document-     at-     a-     time	
   

threshold	
   methods	
   

       threshold	
   methods	
   use	
   number	
   of	
   top-     ranked	
   

documents	
   needed	
   (k)	
   to	
   op.mize	
   query	
   
processing	
   
       for	
   most	
   applica.ons,	
   k	
   is	
   small	
   

       for	
   any	
   query,	
   there	
   is	
   a	
   minimum	
   score	
   that	
   

each	
   document	
   needs	
   to	
   reach	
   before	
   it	
   can	
   be	
   
shown	
   to	
   the	
   user	
   
       score	
   of	
   the	
   kth-     highest	
   scoring	
   document	
   
       gives	
   threshold	
     	
   
       op.miza.on	
   methods	
   es.mate	
          	
   to	
   ignore	
   

documents	
   

threshold	
   methods	
   

       for	
   document-     at-     a-     .me	
   processing,	
   use	
   score	
   

of	
   lowest-     ranked	
   document	
   so	
   far	
   for	
          	
   	
   
      for	
   term-     at-     a-     .me,	
   have	
   to	
   use	
   kth-     largest	
   score	
   in	
   
the	
   accumulator	
   table	
   

       maxscore	
   method	
   compares	
   the	
   maximum	
   

score	
   that	
   remaining	
   documents	
   could	
   have	
   to	
   
       	
   
      safe	
   op.miza.on	
   in	
   that	
   ranking	
   will	
   be	
   the	
   same	
   
without	
   op.miza.on	
   (cf.	
   a*	
   search)	
   

maxscore	
   example	
   

       indexer	
   computes	
     tree	
   	
   
       maximum	
   score	
   for	
   any	
   document	
   containing	
   just	
      tree   	
   
       assume	
   k	
   =3,	
          	
   is	
   lowest	
   score	
   aner	
      rst	
   three	
   docs	
   
       likely	
   that	
     	
        	
   >	
     tree	
   

         	
        	
   is	
   the	
   score	
   of	
   a	
   document	
   that	
   contains	
   both	
   query	
   

terms	
   

       can	
   safely	
   skip	
   over	
   all	
   gray	
   pos.ngs	
   

other	
   approaches	
   

       early	
   termina.on	
   of	
   query	
   processing	
   

      ignore	
   high-     frequency	
   word	
   lists	
   in	
   term-     at-     a-     .me	
   
      ignore	
   documents	
   at	
   end	
   of	
   lists	
   in	
   doc-     at-     a-     .me	
   
      unsafe	
   op.miza.on	
   

       list	
   ordering	
   

      order	
   inverted	
   lists	
   by	
   quality	
   metric	
   (e.g.,	
   
id95)	
   or	
   by	
   par.al	
   score	
   
      makes	
   unsafe	
   (and	
   fast)	
   op.miza.ons	
   more	
   likely	
   
to	
   produce	
   good	
   documents	
   

structured	
   queries	
   

       query	
   language	
   can	
   support	
   speci   ca.on	
   of	
   

complex	
   features	
   
      similar	
   to	
   sql	
   for	
   database	
   systems	
   
      query	
   translator	
   converts	
   the	
   user   s	
   input	
   into	
   the	
   
structured	
   query	
   representa.on	
   
      galago	
   query	
   language	
   is	
   the	
   example	
   used	
   here	
   
      e.g.,	
   galago	
   query:	
   

evalua.on	
   tree	
   for	
   structured	
   query	
   

distributed	
   evalua.on	
   

       basic	
   process	
   

       all	
   queries	
   sent	
   to	
   a	
   director	
   machine	
   
       director	
   then	
   sends	
   messages	
   to	
   many	
   index	
   servers	
   
       each	
   index	
   server	
   does	
   some	
   por.on	
   of	
   the	
   query	
   
       director	
   organizes	
   the	
   results	
   and	
   returns	
   them	
   to	
   the	
   

processing	
   

user	
   

       two	
   main	
   approaches	
   
       document	
   distribu.on	
   
       by	
   far	
   the	
   most	
   popular	
   
       term	
   distribu.on	
   

distributed	
   evalua.on	
   

       document	
   distribu.on	
   

      each	
   index	
   server	
   acts	
   as	
   a	
   search	
   engine	
   for	
   a	
   
small	
   frac.on	
   of	
   the	
   total	
   collec.on	
   
      director	
   sends	
   a	
   copy	
   of	
   the	
   query	
   to	
   each	
   of	
   the	
   
index	
   servers,	
   each	
   of	
   which	
   returns	
   the	
   top-     k	
   
results	
   
      results	
   are	
   merged	
   into	
   a	
   single	
   ranked	
   list	
   by	
   the	
   
director	
   

       collec.on	
   sta.s.cs	
   should	
   be	
   shared	
   for	
   

e   ec.ve	
   ranking	
   

distributed	
   evalua.on	
   

       term	
   distribu.on	
   

       single	
   index	
   is	
   built	
   for	
   the	
   whole	
   cluster	
   of	
   machines	
   
       each	
   inverted	
   list	
   in	
   that	
   index	
   is	
   then	
   assigned	
   to	
   one	
   

index	
   server	
   
       in	
   most	
   cases	
   the	
   data	
   to	
   process	
   a	
   query	
   is	
   not	
   stored	
   on	
   a	
   
single	
   machine	
   

       one	
   of	
   the	
   index	
   servers	
   is	
   chosen	
   to	
   process	
   the	
   

query	
   
       usually	
   the	
   one	
   holding	
   the	
   longest	
   inverted	
   list	
   

       other	
   index	
   servers	
   send	
   informa.on	
   to	
   that	
   server	
   
       final	
   results	
   sent	
   to	
   director	
   

caching	
   

       query	
   distribu.ons	
   similar	
   to	
   zipf	
   

      about	
     	
   each	
   day	
   are	
   unique,	
   but	
   some	
   are	
   very	
   
popular	
   

       caching	
   can	
   signi   cantly	
   improve	
   

e   ec.veness	
   
      cache	
   popular	
   query	
   results	
   
      cache	
   common	
   inverted	
   lists	
   

       inverted	
   list	
   caching	
   can	
   help	
   with	
   unique	
   
       cache	
   must	
   be	
   refreshed	
   to	
   prevent	
   stale	
   data	
   

queries	
   

