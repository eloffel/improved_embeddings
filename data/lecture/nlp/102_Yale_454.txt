nlp
machine translation
sentence alignment
sentence alignment
id121
sentence alignment (1-1, 2-2, 2-1 mappings)
church and gale 1993
based on sentence length
similar to previous work by brown et al. 1988
sentence alignment
[church/gale 1993]
machine translation
the ibm models
questions
if the word order is fixed
align strings using the levenshtein method
what about the following:
how to deal with word reorderings?
how to deal with phrases?
we need a systematic (and feasible) approach
generative story (almost ibm)
i watched an interesting play
i watched watched an interesting play play play
i watched watched an play play play interesting
j    ai vu une pi  ce de th    tre int  ressante
ibm   s em trained models (1-5)
word translation
local alignment
fertilities
class-based alignment
non-deficient algorithm (avoid overlaps, overflow)
model 1
alignments
la maison id7e
the blue house
alignments: {1,2,3}, {1,3,2}, {1,3,3}, {1,1,1}
a priori, all are equally likely
conditional probabilities
p(f|a,e) = ?
model 1 (cont   d)
algorithm
pick length of translation (uniform id203)
choose an alignment (uniform id203)
translate the foreign words (only depends on the word)
that gives you p(f,a|e)
we need p(f|a,e)
use em (expectation-maximization) to find the hidden variables
model 1 (cont   d)
length id203

alignment id203

translation id203
finding the optimal alignment
training model 1
goal:
learn the translation probabilities p(f|e)
em algorithm
used to estimate the translation probabilities from a training corpus
guess p(f|e)           (could be uniform)
repeat until convergence:
e-step: compute counts
m-step: recompute p(f|e)
green house               the house
casa verde                  la casa
corpus:
uniform translation model:
example
e-step 1: compute the expected counts e[count(t(f|e))] for all word pairs (fj,eaj)

e-step 1a: compute p(a,f|e) by multiplying all t probabilities using
e-step 1b: normalize p(a,f|e) to get p(a|e,f) using
  
e-step 1c: compute expected fractional counts, by weighting each count by p(a|e,f)
  
m-step 1: compute the id113 id203 params by normalizing the tcounts to sum to 1.
e-step 2a: recompute p(a,f|e) again by multiplying the t probabilities
more iterations are needed (until convergence)
import itertools

corpus = [('green house','casa verde'),('the house','la casa')]
# print corpus:
vocab1 = []
vocab2 = []
print "sentence pairs"
for i in range(len(corpus)):
    tup = corpus[i]
    print i,
    print '%s\t%s' % tup 
    vocab1 += tup[0].split()
    vocab2 += tup[1].split()

# print vocabulary
vocab1 = list(set(vocab1))
vocab2 = list(set(vocab2))
print
print "vocabulary"
print "source language:",
print vocab1
print "target language:",
print vocab2

print
print "em initialization"
prob = {}
for w in vocab1:
    for v in vocab2:
        prob[(w,v)] = 1. / len(vocab2)
        print "p(%s|%s) = %.2f\t" % (v,w,prob[(w,v)]),
    print
code by rui zhang
def e_step(prob):
    print "e_step"
    def compute_align(a,sent_pair):
        print "\t alignment:",
        p = 1.
        s = sent_pair[0].split()
        t = sent_pair[1].split()
        for i in range(len(a)):
            w = s[i]
            v = t[a[i]]
            print (w,v),
            p = p * prob[(w,v)]
        print 
        print "\t p(a,f|e): %.2f" % p
        return p
        
    new_prob = {}
    for w in vocab1:
        for v in vocab2:
            new_prob[(w,v)] = 0.

    for i in range(len(corpus)):
        print "sentence pair",i
        sent_pair = corpus[i]
        sent_l = len(sent_pair)    
        total_i = []
        for a in itertools.permutations(range(sent_l)):
            total_i.append(compute_align(a, sent_pair))
        #normalize
        #print "\tp(a,f|e):",total_i
        total_i_sum = sum(total_i)
        total_i = [t / total_i_sum for t in total_i]
        print "\n\t normalizing"
        print "\t p(a|e,f):",total_i
        print
        s = sent_pair[0].split()
        t = sent_pair[1].split()
        cnt = 0
        for a in itertools.permutations(range(sent_l)):
            for j in range(len(a)):
                w = s[j]
                v = t[a[j]]
                new_prob[(w,v)] += total_i[cnt]
            cnt += 1
          
    for w in vocab1:
        total_w = 0.
        for v in vocab2:
            total_w += new_prob[(w,v)]
            print "p(%s|%s) = %.2f\t" % (v,w,new_prob[(w,v)]),
        print "total(%s) = %2.f" % (w,total_w)

    return new_prob
def m_step(prob):
    print "m_step"
    for w in vocab1:
        total_w = sum([prob[w,v] for v in vocab2])
        for v in vocab2:
            prob[(w,v)] = prob[(w,v)] / total_w
            print "p(%s|%s) = %.2f\t" % (v,w,prob[(w,v)]),
        print
    return prob

for i in range(0,10):
    print "step: ",i
    prob = e_step(prob)
    prob = m_step(prob)
sentence pairs
0 green house   casa verde
1 the house     la casa

vocabulary
source language: ['house', 'the', 'green']
target language: ['verde', 'casa', 'la']

em initialization

p(verde|house) = 0.33   p(casa|house) = 0.33    p(la|house) = 0.33
p(verde|the) = 0.33     p(casa|the) = 0.33      p(la|the) = 0.33
p(verde|green) = 0.33   p(casa|green) = 0.33    p(la|green) = 0.33
step:  0

e_step

sentence pair 0
         alignment: ('green', 'casa') ('house', 'verde')
         p(a,f|e): 0.11
         alignment: ('green', 'verde') ('house', 'casa')
         p(a,f|e): 0.11

         normalizing
         p(a|e,f): [0.5, 0.5]

sentence pair 1
         alignment: ('the', 'la') ('house', 'casa')
         p(a,f|e): 0.11
         alignment: ('the', 'casa') ('house', 'la')
         p(a,f|e): 0.11

         normalizing
         p(a|e,f): [0.5, 0.5]

p(verde|house) = 0.50   p(casa|house) = 1.00    p(la|house) = 0.50      total(house) =  2
p(verde|the) = 0.00     p(casa|the) = 0.50      p(la|the) = 0.50        total(the) =  1
p(verde|green) = 0.50   p(casa|green) = 0.50    p(la|green) = 0.00      total(green) =  1

m_step

p(verde|house) = 0.25   p(casa|house) = 0.50    p(la|house) = 0.25
p(verde|the) = 0.00     p(casa|the) = 0.50      p(la|the) = 0.50
p(verde|green) = 0.50   p(casa|green) = 0.50    p(la|green) = 0.00
step:  1

e_step

sentence pair 0
         alignment: ('green', 'casa') ('house', 'verde')
         p(a,f|e): 0.12
         alignment: ('green', 'verde') ('house', 'casa')
         p(a,f|e): 0.25

         normalizing
         p(a|e,f): [0.3333333333333333, 0.6666666666666666]

sentence pair 1
         alignment: ('the', 'la') ('house', 'casa')
         p(a,f|e): 0.25
         alignment: ('the', 'casa') ('house', 'la')
         p(a,f|e): 0.12

         normalizing
         p(a|e,f): [0.6666666666666666, 0.3333333333333333]

p(verde|house) = 0.33   p(casa|house) = 1.33    p(la|house) = 0.33      total(house) =  2
p(verde|the) = 0.00     p(casa|the) = 0.33      p(la|the) = 0.67        total(the) =  1
p(verde|green) = 0.67   p(casa|green) = 0.33    p(la|green) = 0.00      total(green) =  1

m_step

p(verde|house) = 0.17   p(casa|house) = 0.67    p(la|house) = 0.17
p(verde|the) = 0.00     p(casa|the) = 0.33      p(la|the) = 0.67
p(verde|green) = 0.67   p(casa|green) = 0.33    p(la|green) = 0.00
step:  2

e_step

sentence pair 0
         alignment: ('green', 'casa') ('house', 'verde')
         p(a,f|e): 0.06
         alignment: ('green', 'verde') ('house', 'casa')
         p(a,f|e): 0.44

         normalizing
         p(a|e,f): [0.11111111111111112, 0.888888888888889]

sentence pair 1
         alignment: ('the', 'la') ('house', 'casa')
         p(a,f|e): 0.44
         alignment: ('the', 'casa') ('house', 'la')
         p(a,f|e): 0.06

         normalizing
         p(a|e,f): [0.888888888888889, 0.11111111111111112]

p(verde|house) = 0.11   p(casa|house) = 1.78    p(la|house) = 0.11      total(house) =  2
p(verde|the) = 0.00     p(casa|the) = 0.11      p(la|the) = 0.89        total(the) =  1
p(verde|green) = 0.89   p(casa|green) = 0.11    p(la|green) = 0.00      total(green) =  1

m_step

p(verde|house) = 0.06   p(casa|house) = 0.89    p(la|house) = 0.06
p(verde|the) = 0.00     p(casa|the) = 0.11      p(la|the) = 0.89
p(verde|green) = 0.89   p(casa|green) = 0.11    p(la|green) = 0.00
step:  3

e_step

sentence pair 0
         alignment: ('green', 'casa') ('house', 'verde')
         p(a,f|e): 0.01
         alignment: ('green', 'verde') ('house', 'casa')
         p(a,f|e): 0.79

         normalizing
         p(a|e,f): [0.007751937984496124, 0.9922480620155039]

sentence pair 1
         alignment: ('the', 'la') ('house', 'casa')
         p(a,f|e): 0.79
         alignment: ('the', 'casa') ('house', 'la')
         p(a,f|e): 0.01

         normalizing
         p(a|e,f): [0.9922480620155039, 0.007751937984496124]

p(verde|house) = 0.01   p(casa|house) = 1.98    p(la|house) = 0.01      total(house) =  2
p(verde|the) = 0.00     p(casa|the) = 0.01      p(la|the) = 0.99        total(the) =  1
p(verde|green) = 0.99   p(casa|green) = 0.01    p(la|green) = 0.00      total(green) =  1

m_step

p(verde|house) = 0.00   p(casa|house) = 0.99    p(la|house) = 0.00
p(verde|the) = 0.00     p(casa|the) = 0.01      p(la|the) = 0.99
p(verde|green) = 0.99   p(casa|green) = 0.01    p(la|green) = 0.00
corpus = [('green house','casa verde'),('the house','la casa'),('my house','mi casa')]
sentence pairs
0 green house   casa verde
1 the house     la casa
2 my house      mi casa

vocabulary
source language: ['house', 'the', 'green', 'my']
target language: ['mi', 'verde', 'casa', 'la']

em initialization

p(mi|house) = 0.25      p(verde|house) = 0.25   p(casa|house) = 0.25    p(la|house) = 0.25
p(mi|the) = 0.25        p(verde|the) = 0.25     p(casa|the) = 0.25      p(la|the) = 0.25
p(mi|green) = 0.25      p(verde|green) = 0.25   p(casa|green) = 0.25    p(la|green) = 0.25
p(mi|my) = 0.25         p(verde|my) = 0.25      p(casa|my) = 0.25       p(la|my) = 0.25

step:  0

e_step

sentence pair 0
         alignment: ('green', 'casa') ('house', 'verde')
         p(a,f|e): 0.06
         alignment: ('green', 'verde') ('house', 'casa')
         p(a,f|e): 0.06
         normalizing
         p(a|e,f): [0.5, 0.5]

sentence pair 1
         alignment: ('the', 'la') ('house', 'casa')
         p(a,f|e): 0.06
         alignment: ('the', 'casa') ('house', 'la')
         p(a,f|e): 0.06
         normalizing
         p(a|e,f): [0.5, 0.5]
sentence pair 2
         alignment: ('my', 'mi') ('house', 'casa')
         p(a,f|e): 0.06
         alignment: ('my', 'casa') ('house', 'mi')
         p(a,f|e): 0.06
         normalizing
         p(a|e,f): [0.5, 0.5]

p(mi|house) = 0.50      p(verde|house) = 0.50   p(casa|house) = 1.50    p(la|house) = 0.50      total(house) =  3
p(mi|the) = 0.00        p(verde|the) = 0.00     p(casa|the) = 0.50      p(la|the) = 0.50        total(the) =  1
p(mi|green) = 0.00      p(verde|green) = 0.50   p(casa|green) = 0.50    p(la|green) = 0.00      total(green) =  1
p(mi|my) = 0.50         p(verde|my) = 0.00      p(casa|my) = 0.50       p(la|my) = 0.00         total(my) =  1

m_step

p(mi|house) = 0.17      p(verde|house) = 0.17   p(casa|house) = 0.50    p(la|house) = 0.17
p(mi|the) = 0.00        p(verde|the) = 0.00     p(casa|the) = 0.50      p(la|the) = 0.50
p(mi|green) = 0.00      p(verde|green) = 0.50   p(casa|green) = 0.50    p(la|green) = 0.00
p(mi|my) = 0.50         p(verde|my) = 0.00      p(casa|my) = 0.50       p(la|my) = 0.00

...

step:  3
...

m_step

p(mi|house) = 0.00      p(verde|house) = 0.00   p(casa|house) = 1.00    p(la|house) = 0.00
p(mi|the) = 0.00        p(verde|the) = 0.00     p(casa|the) = 0.00      p(la|the) = 1.00
p(mi|green) = 0.00      p(verde|green) = 1.00   p(casa|green) = 0.00    p(la|green) = 0.00
p(mi|my) = 1.00         p(verde|my) = 0.00      p(casa|my) = 0.00       p(la|my) = 0.00
corpus = [('green house','casa verde'),('the house','la casa'),('my house','mi casa'),('my houses','mis casas')]
sentence pairs
0 green house   casa verde
1 the house     la casa
2 my house      mi casa
3 my houses     mis casas

vocabulary
source language: ['house', 'the', 'green', 'my', 'houses']
target language: ['casa', 'la', 'mi', 'verde', 'casas', 'mis']

em initialization
p(casa|house) = 0.17    p(la|house) = 0.17      p(mi|house) = 0.17      p(verde|house) = 0.17   p(casas|house) = 0.17   p(mis|house) = 0.17
p(casa|the) = 0.17      p(la|the) = 0.17        p(mi|the) = 0.17        p(verde|the) = 0.17     p(casas|the) = 0.17     p(mis|the) = 0.17
p(casa|green) = 0.17    p(la|green) = 0.17      p(mi|green) = 0.17      p(verde|green) = 0.17   p(casas|green) = 0.17   p(mis|green) = 0.17
p(casa|my) = 0.17       p(la|my) = 0.17         p(mi|my) = 0.17         p(verde|my) = 0.17      p(casas|my) = 0.17      p(mis|my) = 0.17
p(casa|houses) = 0.17   p(la|houses) = 0.17     p(mi|houses) = 0.17     p(verde|houses) = 0.17  p(casas|houses) = 0.17  p(mis|houses) =  0.17

step:  0

e_step
sentence pair 0
         alignment: ('green', 'casa') ('house', 'verde')
         p(a,f|e): 0.03
         alignment: ('green', 'verde') ('house', 'casa')
         p(a,f|e): 0.03

         normalizing
         p(a|e,f): [0.5, 0.5]

sentence pair 1
         alignment: ('the', 'la') ('house', 'casa')
         p(a,f|e): 0.03
         alignment: ('the', 'casa') ('house', 'la')
         p(a,f|e): 0.03

         normalizing
         p(a|e,f): [0.5, 0.5]
sentence pair 2
         alignment: ('my', 'mi') ('house', 'casa')
         p(a,f|e): 0.03
         alignment: ('my', 'casa') ('house', 'mi')
         p(a,f|e): 0.03

         normalizing
         p(a|e,f): [0.5, 0.5]

sentence pair 3
         alignment: ('my', 'mis') ('houses', 'casas')
         p(a,f|e): 0.03
         alignment: ('my', 'casas') ('houses', 'mis')
         p(a,f|e): 0.03

         normalizing
         p(a|e,f): [0.5, 0.5]

p(casa|house) = 1.50    p(la|house) = 0.50      p(mi|house) = 0.50      p(verde|house) = 0.50   p(casas|house) = 0.00   p(mis|house) = 0.00    total(house) =  3
p(casa|the) = 0.50      p(la|the) = 0.50        p(mi|the) = 0.00        p(verde|the) = 0.00     p(casas|the) = 0.00     p(mis|the) = 0.00      total(the) =  1
p(casa|green) = 0.50    p(la|green) = 0.00      p(mi|green) = 0.00      p(verde|green) = 0.50   p(casas|green) = 0.00   p(mis|green) = 0.00    total(green) =  1
p(casa|my) = 0.50       p(la|my) = 0.00         p(mi|my) = 0.50         p(verde|my) = 0.00      p(casas|my) = 0.50      p(mis|my) = 0.50       total(my) =  2
p(casa|houses) = 0.00   p(la|houses) = 0.00     p(mi|houses) = 0.00     p(verde|houses) = 0.00  p(casas|houses) = 0.50  p(mis|houses) = 0.50   total(houses) =  1

m_step

p(casa|house) = 0.50    p(la|house) = 0.17      p(mi|house) = 0.17      p(verde|house) = 0.17   p(casas|house) = 0.00   p(mis|house) = 0.00
p(casa|the) = 0.50      p(la|the) = 0.50        p(mi|the) = 0.00        p(verde|the) = 0.00     p(casas|the) = 0.00     p(mis|the) = 0.00
p(casa|green) = 0.50    p(la|green) = 0.00      p(mi|green) = 0.00      p(verde|green) = 0.50   p(casas|green) = 0.00   p(mis|green) = 0.00
p(casa|my) = 0.25       p(la|my) = 0.00         p(mi|my) = 0.25         p(verde|my) = 0.00      p(casas|my) = 0.25      p(mis|my) = 0.25
p(casa|houses) = 0.00   p(la|houses) = 0.00     p(mi|houses) = 0.00     p(verde|houses) = 0.00  p(casas|houses) = 0.50  p(mis|houses) = 0.50
step 3:

m_step
p(casa|house) = 1.00    p(la|house) = 0.00      p(mi|house) = 0.00      p(verde|house) = 0.00   p(casas|house) = 0.00   p(mis|house) = 0.00
p(casa|the) = 0.00      p(la|the) = 1.00        p(mi|the) = 0.00        p(verde|the) = 0.00     p(casas|the) = 0.00     p(mis|the) = 0.00
p(casa|green) = 0.00    p(la|green) = 0.00      p(mi|green) = 0.00      p(verde|green) = 1.00   p(casas|green) = 0.00   p(mis|green) = 0.00
p(casa|my) = 0.00       p(la|my) = 0.00         p(mi|my) = 0.50         p(verde|my) = 0.00      p(casas|my) = 0.25      p(mis|my) = 0.25
p(casa|houses) = 0.00   p(la|houses) = 0.00     p(mi|houses) = 0.00     p(verde|houses) = 0.00  p(casas|houses) = 0.50  p(mis|houses) = 0.50
model 2
distortion parameters d(i|j,l,m) 
i and j are words in the two sentences
l and m are the lengths of these sentences
example
d(   boy   |   gar  on   ,5,6)
the distortion parameters are also learned by em

model 3
fertility
f(   i|e)
f0 is an extra parameter that defines    0
examples
                program = programme              f(1|program)     1 
noun     play = pi  ce de th    tre              f(3|play_n)     1       
verb      place = mettre en place             f(3|place_v)     1

[brown et al. 1993]
ibm models 4 and 5
model 4
deals with relative reordering
model 5
fixes problems in models 1-4 that allow multiple words to appear in the same position

references
http://www.isi.edu/natural-language/mt/wkbk.rtf
		(an awesome tutorial by kevin knight)
http://www.statmt.org/ 
		(a comprehensive site, including references to the old ibm papers, pointers to moses, etc.)

nlp
