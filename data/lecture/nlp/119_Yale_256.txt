nlp
introduction to nlp
id33
techniques (1)
constraint-based methods
maruyama 1990, karlsson 1990
example
word(pos(x)) = det    (label(x) = nmod, word(mod(x)) = nn, pos(x) < mod(x))
a determiner (det) modifies a noun (nn) on the right with the label nmod.
np-complete problem; heuristics needed
constraint graph
for initial constraint graph using a core grammar: nodes, domains, constraints
find an assignment that doesn   t contradict any constraints. if more than one assignment exists, add more constraints.


techniques (2)
id145
cky     similar to lexicalized pid18, cubic complexity (eisner 96)

   
nsubj
dobj
nsubj
dobj
techniques (3)
deterministic parsing 
covington 2001
graph-based methods
maximum spanning trees (mst)
mst parser by mcdonald et al.
transition-based 
maltparser by nivre et al. and its variants
the eisner (1996) method

[figure from nivre 2013]
eisner 1996
split-head representation
represent half-trees in the cky table
keep track whether the head is on the left or the right
two operations
combine two half-trees by adding a dependency arc between their heads. this creates an incomplete half-tree.
then combine an incomplete half-tree with a complete half-tree
eisner 1996
[figure from nivre 2013]
the eisner (1996) method

[figure from nivre 2013]
incomplete half-tree
[slide from mcdonald and nivre]
the eisner (1996) method
[slide from mcdonald and nivre]
the eisner (1996) method
introduction to nlp
graph-based id33
graph-based id33
background
mcdonald et al. 2005
idea
id33 is equivalent to search for a maximum spanning tree in a directed graph.
chu and liu (1965) and edmonds (1967) give an efficient algorithm for finding mst for directed graphs.

mst parser example
consider the sentence    john saw mary   
recursively remove cycle
the chu-liu-edmonds algorithm gives the mst on the right hand side (right). this is in general  a non-projective tree.
notes
complexity
interestingly, it   s o(n2), compared with o(n3) for eisner, even though mst is non-projective.

nlp
