nlp
introduction to nlp
cocke-kasami-younger (cky) parsing
notes on left recursion
problematic for many parsing methods
infinite loops when expanding
but appropriate linguistically
np -> dt n
np -> pn
dt -> np    s
mary   s mother   s sister   s friend
chart parsing
top-down parsers have problems with expanding the same non-terminal
in particular, pre-terminals such as pos
bad idea to use top-down (recursive descent) parsing as is
bottom-up parsers have problems with generating locally feasible subtrees that are not viable globally
chart parsing will address these issues

id145
motivation
a lot of the work is repeated
caching intermediate results improves the complexity
id145
building a parse for a substring [i,j] based on all parses [i,k] and [k, j] that are included in it.
complexity
o(n3) for recognizing an input string of length n
id145
cky (cocke-kasami-younger)
bottom-up
requires a normalized (binarized) grammar
earley parser
top-down
more complicated
(separate lecture)
cky algorithm
function cky (sentence w, grammar g) returns table
  for i in 1..length(w) do
    table[i-1,i] = {a|a->wi in g}
  for j in 2..length(w) do
    for i in j-2 down to 0 do
      for k in (i+1) to (j-1) do
        table[i,j] = table[i,j] union {a|a->bc in g, b in table [i,k], c in table [k,j]}

if the start symbol s is in table [0,n] then w is in l(g)
["the", "child", "ate", "the", "cake", "with", "the", "fork"]

      s -> np vp
      np -> dt n | np pp
      pp -> prp np
      vp -> v np | vp pp
      dt -> 'a' | 'the'
      n -> 'child' | 'cake' | 'fork'
      prp -> 'with' | 'to'
      v -> 'saw' | 'ate'
example











































the
child
ate
the
cake
with
the
fork











































the
child
ate
the
cake
with
the
fork
dt






dt





























n















the
child
ate
the
cake
with
the
fork






dt





























n






np








the
child
ate
the
cake
with
the
fork






dt





























n






np








the
child
ate
the
cake
with
the
fork






dt





























n
v














the
child
ate
the
cake
with
the
fork
np






dt





























n
v
dt













the
child
ate
the
cake
with
the
fork
np






dt





























n
v
dt
n



np








the
child
ate
the
cake
with
the
fork






dt





























n
v
dt
n



np




np



the
child
ate
the
cake
with
the
fork






dt





























n
v
dt
n



np




np



the
child
ate
the
cake
with
the
fork






dt





























n
v
dt
n



np


vp

np



the
child
ate
the
cake
with
the
fork






dt





























n
v
dt
n



np


vp

np



the
child
ate
the
cake
with
the
fork






dt





























n
v
dt
n



np
s

vp

np



the
child
ate
the
cake
with
the
fork






dt





























n
v
dt
n



np
s

vp

np



the
child
ate
the
cake
with
the
fork






dt





























n
v
dt
n
prp


np
s

vp

np



the
child
ate
the
cake
with
the
fork






dt





























n
v
dt
n
prp
dt
n
np
s

vp

np
np
pp
np
the
child
ate
the
cake
with
the
fork






dt





























n
v
dt
n
prp
dt
n
np
s

vp
vp
np
np
pp
np
the
child
ate
the
cake
with
the
fork






dt





























n
v
dt
n
prp
dt
n
np
s

vp
vp
np
np
pp
np
the
child
ate
the
cake
with
the
fork






dt





























n
v
dt
n
prp
dt
n
np
s
s
vp
vp
np
np
pp
np
the
child
ate
the
cake
with
the
fork






dt





























n
v
dt
n
prp
dt
n
np
s
s
vp
vp
np
np
pp
np
the
child
ate
the
cake
with
the
fork
[0]  dt [1]   n [2] ==> [0]  np [2]
[3]  dt [4]   n [5] ==> [3]  np [5]
[6]  dt [7]   n [8] ==> [6]  np [8]
[2]   v [3]  np [5] ==> [2]  vp [5]
[5] prp [6]  np [8] ==> [5]  pp [8]
[0]  np [2]  vp [5] ==> [0]   s [5]
[3]  np [5]  pp [8] ==> [3]  np [8]
[2]   v [3]  np [8] ==> [2]  vp [8]
[2]  vp [5]  pp [8] ==> [2]  vp [8]
[0]  np [2]  vp [8] ==> [0]   s [8]



what is the meaning of each of these sentences?
(s
  (np (dt the) (n child))
  (vp
    (vp (v ate) (np (dt the) (n cake)))
    (pp (prp with) (np (dt the) (n fork)))))
(s
  (np (dt the) (n child))
  (vp
    (vp (v ate) (np (dt the) (n cake)))
    (pp (prp with) (np (dt the) (n fork)))))
(s
  (np (dt the) (n child))
  (vp
    (v ate)
    (np
      (np (dt the) (n cake))
      (pp (prp with) (np (dt the) (n fork))))))
complexity of cky
space complexity
there are o(n2) cells in the table
single parse
each cell requires a linear lookup.
total time complexity is o(n3)
all parses
total time complexity is exponential
["take", "this", "book"]

    s -> np vp | aux np vp | vp
    np -> pron | det nom
    nom -> n | nom n | nom pp
    pp -> prp np
    vp -> v | v np | vp pp
    det -> 'the' | 'a' | 'this'
    pron -> 'he' | 'she'
    n -> 'book' | 'boys' | 'girl'
    prp -> 'with' | 'in'
    v -> 'takes' | 'take'
a longer example
["take", "this", "book"]

    s -> np vp | aux np vp | vp
    np -> pron | det nom
    nom -> n | nom n | nom pp
    pp -> prp np
    vp -> v | v np | vp pp
    det -> 'the' | 'a' | 'this'
    pron -> 'he' | 'she'
    n -> 'book' | 'boys' | 'girl'
    prp -> 'with' | 'in'
    v -> 'takes' | 'take'
non-binary productions
chomsky normal form (cnf)
all rules have to be in binary form:
x     y z    or    x     w
this introduces new non-terminals for 
hybrid rules
n-ary rules
unary rules
epsilon rules (e.g., np     e)
any id18 can be converted to cnf
see aho & ullman p. 152
 atis grammar
s     np vp
s     aux np vp

s     vp


np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     vp pp
pp     prep np
original version
from jurafsky and martin
 atis grammar in cnf
s     np vp
s     aux np vp

s     vp


np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     vp pp
pp     prep np
original version
cnf version
s     np vp
s     x1 vp
x1     aux np
s     book | include | prefer
s     verb np
s     vp pp
np     i  | he | she | me
np     houston | nwa
np     det nominal
nominal     book | flight | meal | money
nominal     nominal noun
nominal     nominal pp
vp     book | include | prefer
vp     verb np
vp     vp pp
pp     prep np
 atis grammar in cnf
s     np vp
s     aux np vp

s     vp


np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     vp pp
pp     prep np
original version
cnf version
s     np vp
s     x1 vp
x1     aux np
s     book | include | prefer
s     verb np
s     vp pp
np     i  | he | she | me
np     houston | nwa
np     det nominal
nominal     book | flight | meal | money
nominal     nominal noun
nominal     nominal pp
vp     book | include | prefer
vp     verb np
vp     vp pp
pp     prep np
chomsky normal form
all rules have to be in binary form:
x     y z    or    x     w
new non-terminals for hybrid rules, n-ary and unary rules:
inf-vp     to vp     becomes
inf-vp     to vp
to     to
s     aux np vp     becomes
s     r1 vp
r1     aux np
s     vp      vp     verb    vp     verb np      vp     verb pp       becomes
s     book 
s     buy
s     r2 pp
s     verb pp    
etc.
issues with cky
weak equivalence only
same language, different structure
if the grammar had to be converted to cnf, then the final parse tree doesn   t match the original grammar
however, it can be converted back using a specific procedure
syntactic ambiguity
(deterministic) cky has no way to perform syntactic disambiguation
notes
demo:
http://lxmls.it.pt/2015/cky.html
recognizing vs. parsing
recognizing just means determining if the string is part of the language defined by the id18
parsing is more complicated     it involves producing a parse tree 

nlp
