nlp
introduction to nlp
features and unification
need for feature-based grammars
example (number agreement)
the dogs bites
example (count/mass nouns)
many water
example in french (number and person agreement w/subject)
paul est parti, michelle est partie, ils sont partis, elles sont parties
example in french (number and person agreement w/direct object)
je l   ai vu (i saw him), je l   ai vue (i saw her)
idea
s     np vp
(but only if the person of the np is equal to the person of the vp)
parameterized grammars
parameterized rules, e.g.,
s     np[person,number,   nominative    vp[person,number]
vp[person,number]     v[person,number] np[person,number,   accusative   
np[   first   ,number,   nominative   ]     det[number]n[number]
appropriate modifications are needed to the parser
unification grammars
various unification grammar formalisms
lfg, hpsg, fug
handle agreement
e.g., number, gender, person
unification
two constituents can be combined only if their features can    unify   
feature structures (fs or fd)
nested structures that represent all features in an attribute-value matrix
values are typed, so gender=plural is not allowed
fss can also be represented as graphs (dag)
feature paths (from root to a node in the graph)
example in nltk
import nltk;
from __future__ import print_function
from nltk.featstruct import featstruct
from nltk.sem.logic import variable, variableexpression, expression

fs1 = featstruct(number='singular', person=3)
print (fs1)
[ number = 'singular' ]
[ person = 3          ]

fs2 = featstruct(type='np', agr=fs1)
print (fs2)
[ agr  = [ number = 'singular' ] ]
[        [ person = 3          ] ]
[                                ]
[ type = 'np'                    ]
http://www.nltk.org/howto/featstruct.html
feature unification
graph-matching
recursive definition
two fss unify if they can be merged into a consistent fs
leaf nodes unify if:
they are the same
one can    subsume    the other
special case: one or both are blank
feature unification
u
feature unification
u
failure
example in nltk
fs2 = featstruct(type='np', agr=fs1)
print (fs2)
[ agr  = [ number = 'singular' ] ]
[        [ person = 3          ] ]
[                                ]
[ type = 'np'                    ]
fs3 = featstruct(agr=featstruct(number=variable('?n')), subj=featstruct(number=variable('?n')))
print(fs3) 
[ agr  = [ number = ?n ] ] 
[                        ] 
[ subj = [ number = ?n ] ] 
print(fs2.unify(fs3)) 
[ agr  = [ number = 'singular' ] ] 
[        [ person = 3          ] ] 
[                                ] 
[ subj = [ number = 'singular' ] ] 
[                                ] 
[ type = 'np'                    ] 
http://www.nltk.org/howto/featstruct.html
agreement with features
s     np vp
	{np person} = {vp person} 
s     aux np vp
	{aux person} = {np person}
verb     bites
	{verb person} = 3
verb     bite
{verb person} = 1 

types in semantics
e     entities, t     facts 
<e,t> : unary predicates     maps entities to facts
<e,<e,t>> : binary predicates
<<e,t>,t> : type-raised entities
examples:
   jorge   ,    he   , a123: e
   janice likes cats   : t
   likes   : <e,<e,t>>
   likes cats   : <e,t>
   every person   : <<e,t>,t>
type coercion
programming languages
how is it done in your favorite programming language?
examples in natural language
i had a coffee this morning (-> one cup of coffee)
i tried two wines last night (-> two types of wine)
i had fish for dinner (-> some fish, not    a fish   )


subtypes and selectional restrictions
type hierarchy
object > edible object > fruit > banana
noun > count noun
noun > mass noun
selectional restrictions
some verbs can only take arguments of certain types
example: eat +    edible object   , believe +    idea   
selectional restrictions and type coercion (metonymy)
i have read this title (   title    ->    book   )
i like shakespeare (   shakespeare    ->    works by shakespeare   )
subcategorization with features
vp     verb
	{vp subcat} = {verb subcat}
	{vp subcat} = intrans
vp     verb np
{vp subcat} = {verb subcat}
{vp subcat} = trans
vp     verb np np
{vp subcat} = {verb subcat}
{vp subcat} = ditrans
representing fss as dags
fs = feature structure
dag = directed acyclic graph (not a tree and not an arbitrary graph)

[example from jurafsky and martin]
fs unification
[example from jurafsky and martin]
unification procedure
[example from jurafsky and martin]
fs unification
[example from jurafsky and martin]
unification with the earley parser
important to use the constraints during, not after parsing
[example from jurafsky and martin]
[example from jurafsky and martin]
subsumption
unification of a more general concept with a more specific concept
   undefined    is the most general concept
   fail    is the least general concept
subcategorization
[example from jurafsky and martin]
subcategorization
[example from jurafsky and martin]
notes
fss can have a special,    head    feature
if all features have a finite domain, attribute-value grammars can be converted into a id18
the power-of-2 language doesn   t have the    constant growth property   . 
it is a csl and cannot be recognized by a id18. 
it can, however, be recognized by a mildly-context-sensitive grammar.
   power-of-2 language   
can be generated by an lfg (bresnan 82)
[example from bob berwick]
summary
feature structures define constraints
subsumption
nested features structures
cycles are allowed (dag)
unification
types
type subsumption

nlp
