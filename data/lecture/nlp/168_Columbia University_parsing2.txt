id140

michael collins, columbia university

overview

(cid:73) id140 (pid18s)

(cid:73) the cky algorithm for parsing with pid18s

a probabilistic context-free grammar (pid18)

s     np vp
vp     vi
vp     vt np
vp     vp pp
np     dt nn
np     np pp
pp     p
np

1.0
0.4
0.4
0.2
0.3
0.7
1.0

vi     sleeps
vt     saw
nn     man
nn     woman
nn     telescope
dt     the
in     with
in     in

1.0
1.0
0.7
0.2
0.1
1.0
0.5
0.5

(cid:73) id203 of a tree t with rules

is p(t) =(cid:81)n

for rule          .

  1       1,   2       2, . . . ,   n       n

i=1 q(  i       i) where q(         ) is the id203

derivation
s

rules used

id203

derivation
s

np vp

rules used
s     np vp

id203
1.0

derivation
s

np vp

dt nn vp

rules used
s     np vp
np     dt nn

id203
1.0

0.3

derivation
s

np vp

dt nn vp

the nn vp

rules used
s     np vp
np     dt nn
dt     the

id203
1.0

0.3

1.0

derivation
s

np vp

dt nn vp

the nn vp

the dog vp

rules used
s     np vp
np     dt nn
dt     the
nn     dog

id203
1.0

0.3

1.0

0.1

derivation
s

np vp

dt nn vp

the nn vp

the dog vp

the dog vi

rules used
s     np vp
np     dt nn
dt     the
nn     dog
vp     vi

id203
1.0

0.3

1.0

0.1

0.4

derivation
s

np vp

dt nn vp

the nn vp

the dog vp

the dog vi

the dog laughs

rules used
s     np vp
np     dt nn
dt     the
nn     dog
vp     vi
vi     laughs

id203
1.0

0.3

1.0

0.1

0.4

0.5

properties of pid18s

(cid:73) assigns a id203 to each left-most derivation, or parse-tree,

allowed by the underlying id18

properties of pid18s

(cid:73) assigns a id203 to each left-most derivation, or parse-tree,

allowed by the underlying id18

(cid:73) say we have a sentence s, set of derivations for that sentence is
t (s). then a pid18 assigns a id203 p(t) to each member of
t (s). i.e., we now have a ranking in order of id203.

properties of pid18s

(cid:73) assigns a id203 to each left-most derivation, or parse-tree,

allowed by the underlying id18

(cid:73) say we have a sentence s, set of derivations for that sentence is
t (s). then a pid18 assigns a id203 p(t) to each member of
t (s). i.e., we now have a ranking in order of id203.

(cid:73) the most likely parse tree for a sentence s is

arg max
t   t (s)

p(t)

data for parsing experiments: treebanks

(cid:73) penn wsj treebank = 50,000 sentences with associated trees

(cid:73) usual set-up: 40,000 training sentences, 2400 test sentences

an example tree:

canadiannnputilitiesnnpsnphadvbd1988cdrevenuennnpofinc$$1.16cdbillioncd,punc,qpnpppnpmainlyrbadvpfrominitsprp$naturaljjgasnnandccelectricjjutilitynnbusinessesnnsnpininalbertannp,punc,npwherewrbwhadvpthedtcompanynnnpservesvbzaboutrb800,000cdqpcustomersnns.punc.npvpssbarnpppnpppvpstopderiving a pid18 from a treebank

(cid:73) given a set of example trees (a treebank), the underlying

id18 can simply be all rules seen in the corpus

(cid:73) maximum likelihood estimates:
qm l(         ) =

count(         )

count(  )

where the counts are taken from a training set of example
trees.

(cid:73) if the training data is generated by a pid18, then as the

training data size goes to in   nity, the maximum-likelihood
pid18 will converge to the same distribution as the    true   
pid18.

pid18s

booth and thompson (1973) showed that a id18 with rule
probabilities correctly de   nes a distribution over the set of
derivations provided that:

1. the rule probabilities de   ne conditional distributions over the

di   erent ways of rewriting each non-terminal.

2. a technical condition on the rule probabilities ensuring that

the id203 of the derivation terminating in a    nite
number of steps is 1. (this condition is not really a practical
concern.)

parsing with a pid18

(cid:73) given a pid18 and a sentence s, de   ne t (s) to be the set of

trees with s as the yield.

(cid:73) given a pid18 and a sentence s, how do we    nd

arg max
t   t (s)

p(t)

chomsky normal form

a id18 g = (n,   , r, s) in chomsky
normal form is as follows

(cid:73) n is a set of non-terminal symbols
(cid:73)    is a set of terminal symbols
(cid:73) r is a set of rules which take one of two forms:

(cid:73) x     y1y2 for x     n , and y1, y2     n
(cid:73) x     y for x     n , and y       

(cid:73) s     n is a distinguished start symbol

a id145 algorithm

(cid:73) given a pid18 and a sentence s, how do we    nd

(cid:73) notation:

max
t   t (s)

p(t)

n = number of words in the sentence
wi = i   th word in the sentence
n = the set of non-terminals in the grammar
s = the start symbol in the grammar

(cid:73) de   ne a id145 table

  [i, j, x] = maximum id203 of a constituent with non-terminal x

spanning words i . . . j inclusive

(cid:73) our goal is to calculate maxt   t (s) p(t) =   [1, n, s]

an example

the dog saw the man with the telescope

a id145 algorithm

(cid:73) base case de   nition: for all i = 1 . . . n, for x     n

  [i, i, x] = q(x     wi)

(note: de   ne q(x     wi) = 0 if x     wi is not in the
grammar)

(cid:73) recursive de   nition: for all i = 1 . . . n, j = (i + 1) . . . n,

x     n ,

  (i, j, x) = max

x   y z   r,
s   {i...(j   1)}

(q(x     y z)      (i, s, y )      (s + 1, j, z))

an example

  (i, j, x) = max

x   y z   r,
s   {i...(j   1)}

(q(x     y z)      (i, s, y )      (s + 1, j, z))

the dog saw the man with the telescope

the full id145 algorithm

input: a sentence s = x1 . . . xn, a pid18 g = (n,   , s, r, q).
initialization:
for all i     {1 . . . n}, for all x     n ,

(cid:26) q(x     xi)

0

if x     xi     r
otherwise

  (i, i, x) =

algorithm:

(cid:73) for l = 1 . . . (n     1)

(cid:73) for i = 1 . . . (n     l)

(cid:73) set j = i + l
(cid:73) for all x     n , calculate

  (i, j, x) =

max

x   y z   r,
s   {i...(j   1)}

and

bp(i, j, x) = arg max

x   y z   r,
s   {i...(j   1)}

(q(x     y z)      (i, s, y )      (s + 1, j, z))

(q(x     y z)      (i, s, y )      (s + 1, j, z))

a id145 algorithm for the sum

(cid:73) given a pid18 and a sentence s, how do we    nd

(cid:88)

p(t)

(cid:73) notation:

t   t (s)

n = number of words in the sentence
wi = i   th word in the sentence
n = the set of non-terminals in the grammar
s = the start symbol in the grammar

(cid:73) de   ne a id145 table

  [i, j, x] = sum of probabilities for constituent with non-terminal x

(cid:73) our goal is to calculate(cid:80)

spanning words i . . . j inclusive

t   t (s) p(t) =   [1, n, s]

summary

(cid:73) pid18s augments id18s by including a id203 for each

rule in the grammar.

(cid:73) the id203 for a parse tree is the product of probabilities

for the rules in the tree

(cid:73) to build a pid18-parsed parser:

1. learn a pid18 from a treebank
2. given a test data sentence, use the cky algorithm to

compute the highest id203 tree for the sentence under
the pid18

