ll(1) grammars: summary

fixing problems with grammars

informatics 2a: lecture 13

john longley

school of informatics
university of edinburgh

jrl@inf.ed.ac.uk

16 october 2017

1 / 20

ll(1) grammars: summary

ll(1) grammars: summary

given a context-free grammar, the problem of parsing a string can
be seen as that of constructing a leftmost derivation, e.g.
exp     exp + exp     num + exp     1 + exp

    1 + num     1 + 2

at each stage, we expand the leftmost nonterminal. in general, it
(seemingly) requires magical powers to know which rule to apply.

an ll(1) grammar is one in which the correct rule can always be
determined from just the nonterminal to be expanded and the
current input symbol (or end-of-input marker).

this leads to the idea of a parse table: a two-dimensional array
(indexed by nonterminals and input symbols) in which the
appropriate production can be looked up at each stage.

2 / 20

ll(1) grammars: summary

possible problems with grammars

ll(1) grammars allow for very e   cient parsing (time linear in
length of input string). unfortunately, many    natural    grammars
are not ll(1), for various reasons, e.g.

1 they may be ambiguous (bad for computer languages)

2 they may have rules with shared pre   xes: e.g. how would we

choose between the following productions?

stmt     do stmt while cond
stmt     do stmt until cond

3 there may be left-recursive rules, where the lhs nonterminal

appears at the start of the rhs: exp     exp + exp

sometimes such problems can be    xed: can replace our grammar
by an equivalent ll(1) one. we   ll look at ways of doing this.

3 / 20

ll(1) grammars: summary

problem 1: ambiguity

we   ve seen many examples of ambiguous grammars. some kinds of
ambiguity are    needless    and can be easily avoided. e.g. can replace

list       |

item | list list

by

list       |

item list

a similar trick works generally for any other kind of    lists   .
e.g. can replace

list1     item | list1 ; list1

by

list1     item rest

rest       |

; item rest

4 / 20

ll(1) grammars: summary

resolving ambiguity with added nonterminals

more serious example of ambiguity:

exp     num | var | (exp) |     exp

|

exp + exp | exp     exp | exp     exp

we can disambiguate this by adding nonterminals to capture more
subtle distinctions between di   erent classes of expressions:
exp     expa | exp + expa | exp     expa
expa     expb | expa     expb
expb     expc |     expb
expc     num | var | (exp)

note that this builds in certain design decisions concerning what
we want the rules of precedence to be.

n.b. our revised grammar is unambiguous, but not yet ll(1) . . .

5 / 20

ll(1) grammars: summary

problem 2: shared pre   xes

consider the two productions

stmt     do stmt while cond
stmt     do stmt until cond

on seeing the nonterminal stmt and the terminal do, an ll(1)
parser would have no way of choosing between these rules.

solution: factor out the common part of these rules, so    delaying   
the decision until the relevant information becomes available:

stmt     do stmt test
test     while cond | until cond

this simple trick is known as left factoring.

6 / 20

ll(1) grammars: summary

problem 3: left recursion

suppose our grammar contains a rule like

exp     exp + expa

problem: whatever terminals exp could begin with, exp + expa
could also begin with. so there   s a danger our parser would apply
this rule inde   nitely:

exp     exp + expa     exp + expa + expa           

(in practice, we wouldn   t even get this far: there   d be a clash in the
parse table, e.g. at num, exp.)

so left recursion makes a grammar non-ll(1).

7 / 20

ll(1) grammars: summary

eliminating left recursion

consider e.g. the rules

exp     expa | exp + expa | exp     expa

taken together, these say that exp can consist of expa followed
by zero or more su   xes + expa or     expa.
so we just need to formalize this!
exp     expa opsa

opsa       | + expa opsa |     expa opsa

(reminiscent of arden   s rule.) likewise:

expa     expb opsb

opsb       |     expb opsb

together with the earlier rules for expb and expc, these give an
ll(1) version of the grammar for arithmetic expressions on slide 5.

8 / 20

ll(1) grammars: summary

the resulting ll(1) grammar

exp     expa opsa
opsa       | + expa opsa |     expa opsa
expa     expb opsb
opsb       |     expb opsb
expb     expc |     expb
expc     num | var | (exp)

9 / 20

ll(1) grammars: summary

indirect left recursion

left recursion can also arise in a more indirect way. e.g.

a     a | bc

b     b | ad

by considering the combined e   ect of these rules, can see that
they are equivalent to the following ll(1) grammar.

a     ae | bce
e       | dce

b     bf | adf
f       | cdf

(won   t go into the systematic method here.)

10 / 20

ll(1) grammars: summary

ll(1) grammars: summary

often (not always), a    natural    grammar for some language
of interest can be massaged into an ll(1) grammar. this
allows for very e   cient parsing.

knowing a grammar is ll(1) also assures us that it is
unambiguous     often non-trivial! by the same token, ll(1)
grammars are poorly suited to natural languages.

however, an ll(1) grammar may be less readable and intuitive
than the original. it may also appear to mutilate the    natural   
structure of phrases. we must take care not to mutilate it so
much that we can no longer    execute    the phrase as intended.

one can design realistic computer languages with ll(1)
grammars. for less cumbersome syntax that       ows    better,
one might want to go a bit beyond ll(1) (e.g. to lr(1)), but
the principles remain the same.

11 / 20

ll(1) grammars: summary

example of an ll(1) grammar

here is the repaired programming language grammar from
lecture 8, as hinted at in lecture 10. combining it with our
revised grammar for arithmetic expressions, we get an ll(1)
grammar for a respectable programming language.

stmt     if-stmt | while-stmt | begin-stmt | assg-stmt

if-stmt     if bool-expr then stmt else stmt

while-stmt     while bool-expr do stmt
begin-stmt     begin stmt-list end

stmt-list     stmt stmts

stmts       |

; stmt stmts
assg-stmt     var := arith-expr
bool-expr     arith-expr compare-op arith-expr

compare-op     < | > | <= | >= | == | =! =

12 / 20

ll(1) grammars: summary

small aside: chomsky normal form

whilst on the subject of    transforming grammars into equivalent
ones of some special kind    . . .
a context-free grammar g = (n,   , p, s) is in chomsky normal
form (cnf) if all productions are of the form

a     bc or a     a

(a, b, c     n, a       )

theorem: disregarding the empty string, every id18 g is equivalent
to a grammar g(cid:48) in chomsky normal form. (l(g(cid:48)) = l(g)     { })
this is useful, because certain general parsing algorithms (e.g. the
cyk algorithm, see lecture 17) work best for grammars in cnf.

13 / 20

ll(1) grammars: summary

converting to chomsky normal form

consider for example the grammar

s     tt |

[s]

t       | (t )

step 1: remove all  -productions, and for each rule x       y   , add
a new rule x          whenever y    can be empty   .

s     tt | t |

|

[ ]

[s]

t     (t ) | ()

step 2: remove    unit productions    x     y .

s     tt | (t ) | () |

|

[ ]

[s]

t     (t ) | ()

now all productions are of form x     a or x     x1 . . . xk (k     2).

14 / 20

ll(1) grammars: summary

converting to chomsky normal form, ctd.

s     tt | (t ) | () |

|

[ ]

[s]

t     (t ) | ()

step 3: for each terminal a, add a nonterminal za and a production
za     a. in all rules x     x1 . . . xk (k     2), replace each a by za.

s     tt | z(tz)

| z(z)

| z[sz]

| z[z]

z(     ( z)     ) z[     [ z]     ]
t     z(tz) | z(z)
step 4: for every production x     y1 . . . yn with n     3, add new
symbols w2, . . . , wn   1 and replace the production with
x     y1w2, w2     y2w3,
. . . , wn   1     yn   1yn.
e.g. s     z(tz) | z[sz] become
w     tz)

s     z(w

v     sz]

s     z[v

the resulting grammar is now in chomsky normal form.

15 / 20

ll(1) grammars: summary

test question on context-free grammars

consider the alphabet of ascii characters. let n be the lexical class of
all non-alphabetic characters. consider the following context-free
grammar for a nonterminal p.

p       | n p | p n
p     a | a p a | a p a | a p a | a p a | a
p     b | b p b | b p b | b p b | b p b | b

. . .

(23 similar lines for    c    to    y   )

p     z | z p z | z p z | z p z | z p z | z

which of the following ascii strings can be parsed as a p?

1 never odd or even

2 "norma is as selfless as i am, ron."

3 live dirt up a side-track carted is a putrid evil.

16 / 20

ll(1) grammars: summary

test question on context-free grammars

consider the alphabet of ascii characters. let n be the lexical class of
all non-alphabetic characters. consider the following context-free
grammar for a nonterminal p.

p       | n p | p n
p     a | a p a | a p a | a p a | a p a | a
p     b | b p b | b p b | b p b | b p b | b

. . .

(23 similar lines for    c    to    y   )

p     z | z p z | z p z | z p z | z p z | z

which of the following ascii strings can be parsed as a p?

1 never odd or even

2 "norma is as selfless as i am, ron."

3 live dirt up a side-track carted is a putrid evil.

answer: all of them

16 / 20

ll(1) grammars: summary

more questions

our grammar generates palindromic strings:

p       | n p | p n
p     a | a p a | a p a | a p a | a p a | a
p     b | b p b | b p b | b p b | b p b | b

. . .

(23 similar lines for    c    to    y   )

p     z | z p z | z p z | z p z | z p z | z

question: is this grammar ll(1)?

17 / 20

ll(1) grammars: summary

more questions

our grammar generates palindromic strings:

p       | n p | p n
p     a | a p a | a p a | a p a | a p a | a
p     b | b p b | b p b | b p b | b p b | b

. . .

(23 similar lines for    c    to    y   )

p     z | z p z | z p z | z p z | z p z | z

question: is this grammar ll(1)?
answer: no. line 1 is left recursive, and there is much ambiguity.
next question: is it possible to provide an ll(1) grammar for the
language of palindromes?

17 / 20

ll(1) grammars: summary

more questions

our grammar generates palindromic strings:

p       | n p | p n
p     a | a p a | a p a | a p a | a p a | a
p     b | b p b | b p b | b p b | b p b | b

. . .

(23 similar lines for    c    to    y   )

p     z | z p z | z p z | z p z | z p z | z

question: is this grammar ll(1)?
answer: no. line 1 is left recursive, and there is much ambiguity.
next question: is it possible to provide an ll(1) grammar for the
language of palindromes?
answer: no. intuitively, it   s impossible to tell with bounded lookahead
when we   ve reached the middle of the string. in fact, this language can
be recognized by an npda, but not by any dpda!

17 / 20

ll(1) grammars: summary

some light relief: palindromic sentences

our grammar recognises palindromic alphabetic strings, ignoring
whitespace, punctuation, case distinctions, etc.

it is not too hard to construct such strings consisting entirely of
english words. however, it   s more satisfying (and challenging) to
   nd examples that are coherent or interesting in some other way.

a famous example:

a man, a plan, a canal     panama!

18 / 20

ll(1) grammars: summary

some light relief: palindromic sentences

our grammar recognises palindromic alphabetic strings, ignoring
whitespace, punctuation, case distinctions, etc.

it is not too hard to construct such strings consisting entirely of
english words. however, it   s more satisfying (and challenging) to
   nd examples that are coherent or interesting in some other way.

a famous example:

a man, a plan, a canal     panama!

. . . which some smart person noticed could be tweaked to yield . . .

a dog, a plan, a canal     pagoda!

18 / 20

ll(1) grammars: summary

some light relief: palindromic sentences

our grammar recognises palindromic alphabetic strings, ignoring
whitespace, punctuation, case distinctions, etc.

it is not too hard to construct such strings consisting entirely of
english words. however, it   s more satisfying (and challenging) to
   nd examples that are coherent or interesting in some other way.

a famous example:

a man, a plan, a canal     panama!

. . . which some smart person noticed could be tweaked to yield . . .

a dog, a plan, a canal     pagoda!

but probably there is nothing to equal . . .

18 / 20

ll(1) grammars: summary

best english palindrome in the world?

(from guy steele, common lisp reference manual, 1983.)

a man, a plan, a canoe, pasta, heros, rajahs, a
coloratura, maps, snipe, percale, macaroni, a gag, a
banana bag, a tan, a tag, a banana bag again (or a
camel), a crepe, pins, spam, a rut, a rolo, cash, a jar,
sore hats, a peon, a canal     panama!

19 / 20

ll(1) grammars: summary

reading

making grammars ll(1): former lecture notes available via
the course schedule webpage.

chomsky normal form: kozen chapter 21, jurafsky & martin
section 12.5.

20 / 20

