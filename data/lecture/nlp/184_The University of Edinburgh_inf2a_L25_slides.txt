agreement, types and natural language

semantics

informatics 2a: lecture 25

shay cohen

13 november 2017

1 / 35

last class

how do we extract a grammar from a treebank?

how do we estimate the rule probabilities of a grammar?

how can we overcome the limitations of plain pid18s? (more
on that today)

2 / 35

agreement phenomena

in pls, typing rules enforce type agreement between di   erent
(often separated) constituents of a program:

int i=0; ...; if (i>2) ...

there are somewhat similar phenomena in nl: constituents of a
sentence (often separated) may be constrained to agree on an
attribute such as person, number, gender.

you, i imagine, are unable to attend.

the hills are looking lovely today, aren   t they?

he came very close to injuring himself.

3 / 35

agreement in various languages

these examples illustrate that in english:

verbs agree in person and number with their subjects;

tag questions agree in person, number, tense and mode with their
main statement, and have the opposite polarity.

re   exive pronouns follow suit in person, number and gender.

french has much more by way of agreement phenomena:

adjectives agree with their head noun in gender and number.

le petit chien,

la petite souris,

les petites mouches

participles of   etre verbs agree with their subject:

il est arriv  e,

elles sont arriv  ees

participles of other verbs agree with preceding direct objects:

il a vu la femme,

il l   a vue

how can we capture these kinds of constraints in a grammar?

4 / 35

agreement rules: why bother?

modelling agreement is obviously important if we want to generate
grammatically correct nl text.

but even for understanding input text, agreement can be useful for
resolving ambiguity.
e.g. the following sentence is ambiguous . . .

the boy who eats    ies ducks.

. . . whilst the following are less so:

the boys who eat    y ducks.
the boys who eat    ies duck.

5 / 35

node-splitting via attributes

one solution is to re   ne our grammar by splitting certain
non-terminals according to various attributes. examples of
attributes and their associated values are:

person: 1st, 2nd, 3rd

number: singular, plural

gender: masculine, feminine, neuter

case: nominative, accusative, dative, . . .

tense: present, past, future, . . .

in principle these are language-speci   c, though certain common
patterns recur in many languages.

we can then split phrase categories as the language demands, e.g.

split np on person, number, case (e.g. np[3,sg,nom]),

split vp on person, number, tense (e.g. vp[3,sg,fut]).

6 / 35

parameterized id18 productions

we can often use such attributes to enforce agreement constraints.
this works because of the head phrase structure typical of nls.
e.g. we may write parameterized rules such as:

s     np[p,n,nom] vp[p,n]

np[3,n,c]     det[n] nom[n]

each of these really abbreviates a    nite number of rules obtained
by specializing the attribute variables. (still a id18!)
when specializing, each variable must take the same value
everywhere, e.g.

s     np[3,sg,nom] vp[3,sg]
s     np[1,pl,nom] vp[1,pl]

np[3,pl,acc]     det[pl] nom[pl]

parsing algorithms can be adapted to work with this machinery:
don   t have to    build    all the specialized rules individually.

7 / 35

example: subject-verb agreement in english

s     np[p,n,nom] vp[p,n]

np[p,n,c]     pro[p,n,c]
pro[1,sg,nom]     i, etc.
pro[1,sg,acc]     me, etc.

np[3,n,c]     det[n] nom[n] relopt[n]
nom[n]     n[n] | adj nom[n]

n[sg]     person, etc.
n[pl]     people, etc.

relopt[n]       | who vp[3,n]
vp[p,n]     vv[p,n] np[p   ,n   ,acc]
vv[p,n]     v[p,n] | be[p,n] vg
v[3,sg]     teaches, etc.
be[p,n]     is, etc.
vg     teaching, etc.

(other rules omitted.)

8 / 35

semantics

we mentioned in previous lectures that grammars need to be
revealing
we also mentioned that language is compositional: the
meaning of a sentence is constructed from the meaning of its
constituents

is syntax enough to represent the meaning?

want to be able to map from syntax to a logical statement
(semantics)

9 / 35

syntax and semantics

syntax is concerned with which expressions in a language are
well-formed or grammatically correct. this can largely be described
by rules that make no reference to meaning.
semantics is concerned with the meaning of expressions: i.e. how
they relate to    the world   . this includes both their

denotation (literal meaning)

connotation (other associations)

when we say a sentence is ambiguous, we usually mean it has
more than one    meaning   . (so what exactly are meanings?)

we   ve already encountered word sense ambiguity and structural
ambiguity. we   ll also meet another kind of semantic ambiguity,
called scope ambiguity. (this already shows that the meaning of a
sentence can   t be equated with its parse tree.)

10 / 35

formal and natural language semantics

providing a semantics for a language (natural or formal) involves
giving a systematic mapping from the structure underlying a string
(e.g. syntax tree) to its    meaning   .

whilst the kinds of meaning conveyed by nl are much more
complex than those conveyed by fls, they both broadly adhere to
a principle called compositionality.

11 / 35

compositionality

compositionality: the meaning of a complex expression is a
function of the meaning of its parts and of the rules by which they
are combined.

while formal languages are designed for compositionality, the
meaning of nl utterances can often (not always) be derived
compositionally as well.

compare:

purple armadillo

hot dog

12 / 35

other desiderata for meaning representation

veri   ability: one must be able to use the meaning representation
of a sentence to determine whether the sentence is true with
respect to some given model of the world.

example: given an exhaustive table of    who loves whom    relations
(a world model), the meaning of a sentence like everybody loves
mary can be established by checking it against this model.

13 / 35

desiderata for meaning representation

unambiguity: a meaning representation should be unambiguous,
with one and only one interpretation. if a sentence is ambiguous,
there should be a di   erent meaning representation for each sense.

example: each interpretation of i made her duck or time    ies like
an arrow should have a distinct meaning representation.

14 / 35

desiderata for meaning representation

canonical form: the meaning representations for sentences with
the same meaning should (ideally) both be convertible into the
same canonical form, that shows their equivalence.

example: the sentence i    lled the room with balloons should
ideally have the same canonical form with i put enough balloons in
the room to    ll it from    oor to ceiling.

(the kind of formal semantics we discuss won   t achieve this
particularly well!)

15 / 35

desiderata for meaning representation

logical id136: a good meaning representation should come
with a set of rules for logical id136 or deduction, showing which
truths imply which other truths.

e.g. from

zoot is an armadillo.
zoot is purple.
every purple armadillo sneezes.

we should be able to deduce

zoot sneezes.

16 / 35

id118

id118 is a very simple system for meaning
representation and reasoning in which expressions comprise:

atomic sentences (p, q, etc.);

complex sentences built up from atomic sentences and logical
connectives (and, or, not, implies).

17 / 35

id118

why not use id118 as a meaning representation
system for nl? e.g.
fred ate lentils or he ate rice. (p     q)
fred ate lentils or john ate lentils (p     r)

we   re unable to represent the internal structure of the
proposition    fred ate lentils    (e.g. how its meaning is derived
from that of    fred   ,    ate   ,    lentils   ).

we   re unable to express e.g.

everyone ate lentils.
someone ate lentils.

18 / 35

predicate logic

first-order predicate logic (fopl) let us do a lot more (though
still only accounts for a tiny part of nl).

sentences in fopl are built up from terms made from:

constant and variable symbols that represent entities;

predicate symbols that represent properties of entities and
relations that hold between entities;

function symbols (won   t bother with these here).

which are combined into simple sentences (predicate-argument
structures) and complex sentences through:

quanti   ers (   ,    )
negation (  )
conjunction (   )

disjunction (   )
implication (   )
equality (=)

19 / 35

predicate logic example

20 / 35

constants

constant symbols:

each constant symbol denotes one and only one entity:
scotland, aviemore, eu, barack obama, 2007
not all entities have a constant that denotes them:
barack obama   s right knee, this piece of chalk
several constant symbols may denote the same entity:
the morning star     the evening star     venus
national insurance number, student id, your name

21 / 35

predicates

predicate symbols:

every predicate has a speci   c arity. e.g. brown/1, country/1,
live in/2, give/3.

a predicate symbol of arity n is interpreted as a set of
n-tuples of entities that satisfy it.

predicates of arity 1 denote properties: brown/1.

predicates of arity > 1 denote relations: live in/2, give/3.

22 / 35

variables

variable symbols: x, y, z:

variable symbols range over entities.

an atomic sentence with a variable among its arguments, e.g.,
part of(x, eu), only has a truth value if that variable is bound
by a quanti   er.

23 / 35

universal quanti   er (   )

universal quanti   ers can be used to express general truths:

cats are mammals
   x.cat(x)     mammal(x)

intuitively, a universally quanti   ed sentence corresponds to a
(possibly in   nite) conjunction of sentences:
cat(sam)     mammal(sam)     cat(zoot)     mammal(zoot)
    cat(fritz)     mammal(fritz)     . . .

a quanti   er has a scope, analogous to scope of pl variables.

24 / 35

existential quanti   er (   )

existential quanti   ers are used to express the existence of an entity
with a given property, without specifying which entity:

i have a cat
   x.cat(x)     own(i, x)

an existentially quanti   ed sentence corresponds intuitively to a
disjunction of sentences:

(cat(josephine)     own(i, josephine))    
(cat(zoot)     own(i, zoot))    
(cat(malcolm)     own(i, malcolm))    
(cat(john)     own(i, john))     . . .

25 / 35

existential quanti   er (   )

why do we use           rather than           with the existential
quanti   er? what would the following correspond to?

   x.cat(x)     own(i, x)

(a) i own a cat
(b) there   s something such that if it   s a cat, i own it.

what if that something isn   t a cat?

the proposition formed by connecting two propositions with
    is true if the antecedent (the left of the    ) is false.
so this proposition is true if there is something that   s e.g. a
laptop. but    i own a cat    shouldn   t be true simply for this
reason.

26 / 35

abstract syntax of fopl

the language of    rst-order predicate logic can be de   ned by the
following id18 (think of it as a grammar for abstract syntax trees).
we write f for formulae, af for atomic formulae, t for terms, v for
variables, c for constants.

f     af | f     f | f     f | f     f |    f
af     t=t | unarypred(t) | binarypred(t,t) |

|     v.f |     v.f

t     v | c

. . .

27 / 35

question

which captures the meaning of every dog has a bone?

1    x.   y .(dog(x)     bone(y )     has(x, y ))
2    x.(dog(x)        y .(bone(y )     has(x, y )))
3    x.   y .bone(y )     (dog(x)     has(x, y ))
4    y .   x.(dog(x)     (bone(y )     has(x, y )))

(n.b. the logical form looks structurally quite di   erent from the
parse tree for the original sentence. so there   s some real work to
be done!)

28 / 35

types in natural language semantics

types are very useful if we wish to describe the semantics (i.e.,
meaning) of natural languages. for example, we can use types
employed in logic to model the meanings of various phrase types.

basic types

1 e     the type of real-world entities such as inf2a, stuart, john.

2

t     the type of facts with truth value like    inf2a is amusing   .

from these two basic types, we may construct more complex types
via the function type constructor.

29 / 35

from basic to complex formal types

we use the notation <   ,    > to denote functions of the form           .
e.g.:

<e,t>: unary predicates     functions from entities to facts.
<e, <e,t>>: binary predicates     functions from entities to unary
predicates.
<<e,t>, t>: type-raised entities     functions from unary
predicates to truth values.

inf2a, stuart : e
enjoys : <e, <e,t>>
enjoys inf2a, is amusing : <e,t>
inf2a is amusing, stuart enjoys inf2a : t
every student : <<e,t>, t>

this simple system of types will be enough to start with. but for
more precise semantic modelling, a much richer type system is
desirable.

30 / 35

compositionality

compositionality: the meaning of a complex expression is a
function of the meaning of its parts and of the rules by which they
are combined.

do we have su   cient tools to systematically compute meaning
representations according to this principle?

the meaning of a complete sentence will hopefully be a fopl
formula, which we consider as having type t (truth values).
but the meaning of smaller fragments of the sentence will
have other types. e.g.

has a bone < e, t >
every dog

<< e, t >, t >

the idea is to show how to associate a meaning with such
fragments, and how these meanings combine.
to do this, we need to extend our language of fopl with   
expressions (   = lambda; written as \ in haskell).

31 / 35

lambda (  ) expressions

  -expressions are an extension to fopl that allows us to work
with    partially constructed    formulae. a   -expression consists of:

the greek letter   , followed by a variable (formal parameter);

a fopl expression that may involve that variable.

  x.sleep(x) : < e, t >
   the function that takes an entity x to the statement sleep(x)   

(cid:124)

(cid:123)(cid:122)

function

(cid:125)

(cid:124) (cid:123)(cid:122) (cid:125)

(mary )

argument

(  x.sleep(x))

: t

a   -expression can be applied to a term.
(the above has the same truth value as sleep(mary ).)

32 / 35

lambda expressions can be nested. we can use nesting to create
functions of several arguments that accept their arguments one at
a time.

  y .  x. love(x,y)
   the function that takes y to
(the function that takes x to the statement love(x,y))   

: < e, < e, t >>

: < e, < e, < e, t >>>

  z.  y .  x. give(x,y,z)
   the function that takes z to
(the function that takes y to
(the function that takes x to the statement give(x,y,z)))   

33 / 35

beta reduction

when a lambda expression applies to a term, a reduction operation
(beta (  ) reduction) can be used to replace its formal parameter
with the term and simplify the result. in general:

(  x.m)n       m[x (cid:55)    n]

(m with n substituted for x)

      sleep(mary )

(cid:124)
(cid:124)
(cid:124)

(  x.sleep(x))

(cid:123)(cid:122)

function

(cid:125)

argument

(mary )

(cid:124) (cid:123)(cid:122) (cid:125)
(cid:124)
(cid:125)

(cid:123)(cid:122)

function

(cid:123)(cid:122)

function

(  x.love(x, crabapples))

(cid:125)
(cid:123)(cid:122)
(cid:124) (cid:123)(cid:122) (cid:125)
(cid:125)

(mary )

argument

argument

(  y .  x.love(x, y ))

(crabapples)

        x.love(x, crabapples)

      love(mary , crabapples)

34 / 35

summary

agreement in language can be modeled in a grammar by
splitting the nonterminals.

first-order predicate logic can be used to model the meaning
of language.

each constituent in a sentence is given a type, such as an
   entity    or a    statement.   

the types can become quite complex and need to make use of
  -expressions to retain compositionality

next lecture: more about computing semantics using syntax

35 / 35

