what are pushdown automata?
example
formal de   nition
relationship between nondet. pushdown automata and cfls

pushdown automata
informatics 2a: lecture 10

john longley

school of informatics
university of edinburgh

jrl@inf.ed.ac.uk

9 october 2017

1 / 17

what are pushdown automata?
example
formal de   nition
relationship between nondet. pushdown automata and cfls

recap of lecture 8

context-free languages are de   ned by context-free grammars.

a grammar generates strings by applying productions starting
from a start symbol.

this produces a derivation: a sequence of sentential forms
ending in a string of terminal symbols.

every derivation determines a corresponding syntax tree.

a grammar is structurally ambiguous if there is a string in its
language that can be given two or more syntax trees.

2 / 17

what are pushdown automata?
example
formal de   nition
relationship between nondet. pushdown automata and cfls

machines for context-free languages

we   ve seen that regular languages can be de   ned by (det. or
non-det.)    nite automata.

question: what kinds of machines do context-free languages
correspond to?

motivation: seeing how to recognize sentences of a cf language
will be a step towards seeing how to parse such sentences.

short answer: nfas equipped with unlimited memory in the form
of a stack.

3 / 17

what are pushdown automata?
example
formal de   nition
relationship between nondet. pushdown automata and cfls

pushdown automata (pdas)

as in nfas, imagine a control unit with    nitely many possible
states, equipped with a read head that can (only) read the input
string from left to right.

add to this a stack with associated operations of push, pop and
read the item on the top of the stack.

transitions can depend on
both the current input symbol
and the current stack item.

transitions can also cause
items to be pushed to and/or
popped from the stack.

note: the machine can   t read a stack item other than the top one
without    rst popping (and so losing) all items above it.

4 / 17

read only(l to r)stackfinitecontrolinput stringread, push,     popwhat are pushdown automata?
example
formal de   nition
relationship between nondet. pushdown automata and cfls

example of a pda

3 ), ( :  

2 (, ( : ((

consider a pda with a single state q, input alphabet    = {(, )}
and stack alphabet    = {(,   }. call     the initial stack symbol.
our pda has four transitions q     q, labelled as follows:
4  ,    :  
1 (,    : (   
meaning. 1 if current read symbol is ( and current stack symbol
is    , may pop the     and replace it with (   . note that we push    
   rst, then (, so stack grows to the left.
2 similarly with ( in place of    .
3 if current read symbol is ) and current stack symbol is (, may
simply pop the (.
4 if current stack symbol is    , can just pop it.
idea: stack keeps track of currently pending (   s. when stack clears,
may pop the initial         this ends the computation.

5 / 17

what are pushdown automata?
example
formal de   nition
relationship between nondet. pushdown automata and cfls

sample execution

1 (,    : (   

2 (, ( : ((

3 ), ( :  

4  ,    :  

unread input stack state
   
(   
((   
(   
((   
(   
   
 

(()())
()())
)())
())
))
)
 
 

1   
2   
3   
2   
3   
3   
4   

6 / 17

what are pushdown automata?
example
formal de   nition
relationship between nondet. pushdown automata and cfls

language recognised by example pda

our example pda has a single state q,
and stack alphabet    = {(,   } with initial stack symbol    , and
transitions q     q,
1 (,    : (   

2 (, ( : ((

3 ), ( :  

4  ,    :  

input alphabet    = {(, )},

this machine can empty its stack at the end of the input string if
and only if the input string is a well-matched sequence of brackets.

so the pda acts as a (non-deterministic) recognizer for the
language of well-matched sequences of brackets.

7 / 17

what are pushdown automata?
example
formal de   nition
relationship between nondet. pushdown automata and cfls

pdas: formal de   nition

a (nondeterministic) pushdown automaton (n)pda m consists of

a    nite set q of control states

a    nite input alphabet   
a    nite stack alphabet    including a start symbol    
a start state s     q
a    nite transition relation         (q    (     { })     )   (q         )

note that each individual transition has the form ((p, a, s), (q, u))
where p, q     q, a            { }, s        and u          . such a transition
is sometimes drawn as:

a, s:u       q

p

8 / 17

what are pushdown automata?
example
formal de   nition
relationship between nondet. pushdown automata and cfls

accepting by empty stack

a string x           is accepted by m if there is some run of m on x,
starting at control state s with stack    , and    nishing (at any
control state) with empty stack having consumed all of x.

this de   nition implements acceptance by empty stack.

the language accepted by m is

l(m) = {x           | m accepts x}

9 / 17

what are pushdown automata?
example
formal de   nition
relationship between nondet. pushdown automata and cfls

other acceptance conditions

other acceptance conditions for pdas can be found in the
literature.

example variation: equip m with a set of accepting states, and say
a string is accepted if it can trigger a computation ending in an
accepting state.

the choice of acceptance condition is not a big deal. for any
npda of either kind, we can build one of the other kind that
accepts the same language. for details see kozen chapter e.

in inf2a, we use empty stack as our default acceptance condition
for pdas.

10 / 17

what are pushdown automata?
example
formal de   nition
relationship between nondet. pushdown automata and cfls

how powerful are pdas?

we shall outline the proof of the following theorem:

a language l is context-free if and only if there is an
npda m such that l = l(m).

one can also de   ne deterministic pushdown automata (dpdas) in
a reasonable way.

;-( sadly, there   s no analogue of the nfa    powerset construction   
for npdas. in fact, there are context-free languages that can   t be
recognized by any dpda (example in lecture 28).

since dpdas allow for e   cient processing, this prompts us to
focus on    simple    kinds of cfls that can be recognized by a
dpda. (see next lecture on e   cient table-driven parsing.)

11 / 17

what are pushdown automata?
example
formal de   nition
relationship between nondet. pushdown automata and cfls

from id18s to npdas

given a id18 with nonterminals n, terminals   , productions p and
start symbol s.

build an npda with a single state q, input alphabet    and stack
alphabet n       . take s as initial stack symbol.

for each production x        in p, include an  -transition

 , x :         q

q

for each terminal a       , include a transition

a, a:        q.

q

intuition: the stack records (a guess at) what needs to happen in
the remaining input, in order to make a complete string.

12 / 17

what are pushdown automata?
example
formal de   nition
relationship between nondet. pushdown automata and cfls

from id18s to npdas: example

recall our grammar for arithmetic expressions:

exp     var | num | (exp)
exp     exp + exp
exp     exp     exp

var     x | y | z
num     0 |

      

| 9

suppose we turn this into an npda as above.
what does an accepting run of this npda on the input string
(x)*5 look like?

13 / 17

what are pushdown automata?
example
formal de   nition
relationship between nondet. pushdown automata and cfls

an accepting run of the npda

consider the input string (x)*5.

our machine can proceed as follows, correctly guessing the rule to
apply at each stage.

transition

apply * rule
apply () rule
match (
apply var rule
apply x rule
match x
match )
match *
apply num rule
apply 5 rule
match 5

input read
 
 
 
(
(
(
(x
(x)
(x)   
(x)   
(x)   
(x)     5

stack state
exp
exp     exp
( exp )     exp
exp )     exp
var )     exp
x )     exp
)     exp
    exp
exp
num
5
stack empty!

at each stage, combining    input read    and    stack state    gives us a
sentential form. in e   ect, the computation traces out a leftmost
derivation of t in g. so the computation tells us not just that the
string is legal, but how to build a syntax tree for it.

14 / 17

what are pushdown automata?
example
formal de   nition
relationship between nondet. pushdown automata and cfls

from npdas to id18s: brief sketch

suppose    rst m is an npda with just one state q.
can turn m into a id18: almost the reverse of what we just did.

use m   s stack alphabet    as the set of nonterminals of the
grammar.

general form for transitions of m is ((q, a, x ), (q,   )), where a
and/or    might be  . turn these into productions x     a  .
now suppose we have an npda m with many states. can turn it
into an equivalent npda with just one state, essentially by storing
all    state information    on the stack.

when pushing multiple stack entries, must nondeterministically
   guess    the intermediate states. for details see kozen chapter 25.

15 / 17

what are pushdown automata?
example
formal de   nition
relationship between nondet. pushdown automata and cfls

summary

we   ve seen that npdas exactly    match    id18s in terms of their
power for de   ning languages. indeed, a pushdown store (stack)
gives just the computational power needed to deal with nesting.

accepting computations don   t just tell us a string is legal     they
   do parsing    (i.e. tell us how to build a syntax tree).

problem is that computations here are non-deterministic: must
correctly    guess    which production to apply at each stage. if only
things were deterministic, we   d have an e   cient parsing algorithm!

16 / 17

what are pushdown automata?
example
formal de   nition
relationship between nondet. pushdown automata and cfls

summary

we   ve seen that npdas exactly    match    id18s in terms of their
power for de   ning languages. indeed, a pushdown store (stack)
gives just the computational power needed to deal with nesting.

accepting computations don   t just tell us a string is legal     they
   do parsing    (i.e. tell us how to build a syntax tree).

problem is that computations here are non-deterministic: must
correctly    guess    which production to apply at each stage. if only
things were deterministic, we   d have an e   cient parsing algorithm!

next, we   ll see how far we can get with special id18s for which the
corresponding pda is deterministic. this is good enough for many
computing applications.

16 / 17

what are pushdown automata?
example
formal de   nition
relationship between nondet. pushdown automata and cfls

summary

we   ve seen that npdas exactly    match    id18s in terms of their
power for de   ning languages. indeed, a pushdown store (stack)
gives just the computational power needed to deal with nesting.

accepting computations don   t just tell us a string is legal     they
   do parsing    (i.e. tell us how to build a syntax tree).

problem is that computations here are non-deterministic: must
correctly    guess    which production to apply at each stage. if only
things were deterministic, we   d have an e   cient parsing algorithm!

next, we   ll see how far we can get with special id18s for which the
corresponding pda is deterministic. this is good enough for many
computing applications.

later, we   ll look at    semi-e   cient    parsers that work for any id18.

16 / 17

what are pushdown automata?
example
formal de   nition
relationship between nondet. pushdown automata and cfls

reading and prospectus

relevant reading:

core material: kozen chapters 19, 23, 24.

further topics: e, 25, f.

next time, we look at ll(1) grammars: a class of relatively
   simple    id18s for which very e   cient parsing is possible.

17 / 17

