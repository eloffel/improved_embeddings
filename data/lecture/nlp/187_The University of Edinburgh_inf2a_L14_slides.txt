types
micro-haskell: crash course
mh types & abstract syntax
type checking

types and static type checking

(introducing micro-haskell)

informatics 2a: lecture 14

john longley

school of informatics
university of edinburgh

jrl@inf.ed.ac.uk

17 october 2017

1 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

1 types

2 micro-haskell: crash course

3 mh types & abstract syntax

4 type checking

2 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

so far in the course, we have examined the machinery that, in the
case of a programming language, takes us from a program text to
a parse tree, via the stages of lexing and parsing.

this lecture looks at two further stages of the pipeline:

the parse tree may be converted into an abstract syntax tree
(ast), a kind of simpli   ed parse tree which contains just the
information needed for further processing.

the resulting ast may then be subjected to various checks to
ensure that certain obvious errors are avoided (static analysis).
one common form of static analysis is type-checking.

after this, the ast will be fed to an evaluator or interpreter to
execute the program   or else to a compiler to translate it into
executable low-level code.

3 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

types

consider the expression

3 + true

how is a compiler or interpreter supposed to execute this?

it does not make sense to apply the numerical addition operation
to the argument true, which is a boolean.

this is an example of a type error.

di   erent programming languages take di   erent approaches to such
errors.

4 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

approaches to type errors

laissez faire: even if an operation does not make sense for the
data its being applied to, just go ahead and apply it to the (binary)
machine representation of the data. in some cases this will do
something harmful. in other cases it might even be useful.

dynamic checking: at the point during execution at which a type
mismatch (between operation and argument) is encountered, raise
an error. this gives rise to helpful runtime errors.

static checking: check (the ast of) the program to ensure that
all operations are applied in a type-meaningful way. if not, identify
the error(s), and disallow the program from being run until
corrected. this allows many program errors to be identi   ed before
execution.

5 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

approaches to type errors

laissez faire: even if an operation does not make sense for the
data its being applied to, just go ahead and apply it to the (binary)
machine representation of the data. in some cases this will do
something harmful. in other cases it might even be useful.
(adopted, e.g., in c.)

dynamic checking: at the point during execution at which a type
mismatch (between operation and argument) is encountered, raise
an error. this gives rise to helpful runtime errors.

static checking: check (the ast of) the program to ensure that
all operations are applied in a type-meaningful way. if not, identify
the error(s), and disallow the program from being run until
corrected. this allows many program errors to be identi   ed before
execution.

5 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

approaches to type errors

laissez faire: even if an operation does not make sense for the
data its being applied to, just go ahead and apply it to the (binary)
machine representation of the data. in some cases this will do
something harmful. in other cases it might even be useful.
(adopted, e.g., in c.)

dynamic checking: at the point during execution at which a type
mismatch (between operation and argument) is encountered, raise
an error. this gives rise to helpful runtime errors.
(adopted, e.g., in python.)

static checking: check (the ast of) the program to ensure that
all operations are applied in a type-meaningful way. if not, identify
the error(s), and disallow the program from being run until
corrected. this allows many program errors to be identi   ed before
execution.

5 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

approaches to type errors

laissez faire: even if an operation does not make sense for the
data its being applied to, just go ahead and apply it to the (binary)
machine representation of the data. in some cases this will do
something harmful. in other cases it might even be useful.
(adopted, e.g., in c.)

dynamic checking: at the point during execution at which a type
mismatch (between operation and argument) is encountered, raise
an error. this gives rise to helpful runtime errors.
(adopted, e.g., in python.)

static checking: check (the ast of) the program to ensure that
all operations are applied in a type-meaningful way. if not, identify
the error(s), and disallow the program from being run until
corrected. this allows many program errors to be identi   ed before
execution. (adopted, e.g., in java and haskell.)

5 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

in this lecture we look at static stype-checking using a fragment of
haskell as the illustrative programming language.

we call the fragment of haskell micro-haskell (mh for short).

mh is the basis of this year   s inf2a assignment 1, which uses it to
illustrate the full formal-language-processing pipeline.

for those who have never previously met haskell or who could
bene   t from a haskell refresher, we start with a gentle
introduction to mh.

6 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

micro-haskell: a crash course

in mathematics, we are used to de   ning functions via equations,
e.g. f (x) = 3x + 7.

the idea in functional programming is that programs should look
somewhat similar to mathematical de   nitions:

f x = x+x+x + 7 ;

this function expects an argument x of integer type (let   s say),
and returns a result of integer type. we therefore say the type of f
is integer -> integer (   integer to integer   ).

by contrast, the de   nition

g x = x+x <= x+7 ;

returns a boolean result, so the type of g is integer -> bool.

7 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

multi-argument functions

what about a function of two arguments, say x :: integer and
y :: bool ? e.g.

h x y = if y then x else 0-x ;

think of h as a function that accepts arguments one at a time. it
accepts an integer and returns another function, which itself
accepts a boolean and returns an integer.

so the type of h is integer -> (bool -> integer). by
convention, we treat -> as right-associative, so we can write this
just as integer -> bool -> integer.

note incidentally the use of    if    to create expressions rather than
commands. in java, the above if-expression could be written as

(y ? x : 0-x)

8 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

typechecking in micro-haskell

in (micro-)haskell, the type of h is explicitly given as part of the
function de   nition:

h :: integer -> bool -> integer ;
h x y = if y then x else 0-x ;

the typechecker then checks that the expression on the rhs does
indeed have type integer, assuming x and y have the speci   ed
argument types integer and bool respectively.

function de   nitions can also be recursive:

div :: integer -> integer -> integer ;
div x y = if x < y then 0 else 1 + div (x - y) y ;

here the typechecker will check that the rhs has type integer,
assuming that x and y have type integer and also that div itself
has the stated type.

9 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

higher-order functions

the arguments of a function in mh can themselves be functions!

f :: (integer -> integer) -> integer ;
f g = g 0 + g 1 + g 2 + g 3;

the typechecker then checks that the expression on the rhs does
indeed have type integer, assuming x and y have the speci   ed
argument types integer and bool respectively.

for an example application of f, consider the following mh
function.

inc :: integer -> integer ;
inc x = x+1 ;

if we then type

f inc

into an evaluator (i.e., interpreter) for mh, the evaluator will
compute that the result of the expression f inc is

10 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

higher-order functions

the arguments of a function in mh can themselves be functions!

f :: (integer -> integer) -> integer ;
f g = g 0 + g 1 + g 2 + g 3;

the typechecker then checks that the expression on the rhs does
indeed have type integer, assuming x and y have the speci   ed
argument types integer and bool respectively.

for an example application of f, consider the following mh
function.

inc :: integer -> integer ;
inc x = x+1 ;

if we then type

f inc

into an evaluator (i.e., interpreter) for mh, the evaluator will
compute that the result of the expression f inc is 10.

10 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

in principle, the -> constructor can be iterated to produce very
complex types, e.g.

(((integer->bool)->bool)->integer)->integer

such monsters rarely arise in ordinary programs.

nevertheless, mh (and full haskell) has a precise way of checking
whether the function de   nitions in the program correctly respect
the types that have been assigned to them.

before discussing this process, we summarize the types of mh.

11 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

mh types

the o   cial grammar of mh types (in assignment 1 handout) is

type     type0 typerest

typerest       | -> type

type0     integer | bool | ( type )

this is an ll(1) grammar for convenient parsing.

however, a parse tree for this grammar contains more detail than
is required for understanding a type expression.

the following conceptually simpler grammar implements the
abstract syntax of types

type     integer | bool | type -> type

12 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

abstract syntax trees

the abstract syntax grammar is not appropriate for parsing:

it is ambiguous

it does not include all aspects of the concrete syntax. in
particular, there are no brackets.

however parse trees for the abstract syntax grammar
unambiguously correspond to types.

instead of working with parse trees for the concrete ll(1)
grammar, we convert such parse trees to parse trees for the
abstract syntax grammar. such parse trees are called abstract
syntax trees (ast).

13 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

concrete versus abstract syntax

the distinction between concrete and abstract syntax is not
speci   c to types, but applies generally to formal and natural
languages.

in the case of an ll(1)-predictively parsed formal languages, we
have the following parsing pipeline:

lexed language phrase
(sequence of lexemes)

   

ll(1)-grammar parse tree

(uniquely determined)

   
ast

(ll(1) predictive parsing)

(conversion of parse trees:
see tutorial 4 question 2)

14 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

type checking

main ideas.

1 type checking is done compositionally by breaking down

expressions into their subexpressions, type-checking the
subexpressions, and ensuring that the top-level compound
expression can then be given a type itself.

2 throughout the process, a type environment is maintained

which records the types of all variables in the expression.

15 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

illustrative example

h :: integer -> bool -> integer ;
h x y = if y then x else 1+x ;

first the type environment    is set according to the the type
declaration.

   := h :: integer -> bool -> integer

next, the type environment is extended to assign types to the
argument variables x and y.

   := h :: integer -> bool -> integer,

x :: integer,

y :: bool

16 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

illustrative example (continued)

this is done in order to be consistent with the general rule

in any expression e1e2 (a function application) we need e1 to
have a function type t1 -> t2 with e2 having the correct type
t1 for its argument. the resulting type of e1e2 is then t2.

thus, in our example, we have types

h x :: bool -> integer

and

h x y :: integer

17 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

illustrative example (continued)

h :: integer -> bool -> integer ;
h x y = if y then x else 1+x ;

we have

h x y :: integer

with the type environment

   := h :: integer -> bool -> integer,

x :: integer,

y :: bool

our remaining task is to type-check (relative to   ) the expression:

if y then x else 1+x :: integer

18 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

illustrative example (continued)

general rule:

in any expression if e1 then e2 else e3 we need e1 to have
type bool, and e2 and e3 to have the same type t. the
resulting type of if e1 then e2 else e3 is then t.

in our example, we need to type-check

if y then x else 1+x :: integer

we have y :: bool and x :: integer declared in   , so it
remains only to type-check

1+x :: integer

19 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

illustrative example (completed)

general rule:

in any expression e1 + e2 we need e1 and e2 to have type
integer. the resulting type of e1 + e2 is then integer.

in our example, we need to type-check

1+x :: integer

we have x :: integer declared in   , also the numeral 1 is (of
course) given type integer.

thus indeed we have veri   ed

whence, putting everything together,

1+x :: integer

if y then x else 1+x :: integer

as required.

20 / 21

types
micro-haskell: crash course
mh types & abstract syntax
type checking

static type checking     summary

the program is type-checked purely by looking at the ast of the
program.

thus type errors are picked up before the program is executed.
indeed, execution is disallowed for programs that do not type
check.

static type checking gives us a guarantee: no type errors will occur
during execution.

this guarantee can be rigorously established as a mathematical
theorem, using a mathematical model of program execution called
operational semantics. operational semantics lies at the heart of
the evaluator provided for part d of assignment 1. we shall
meet operational semantics later in the course (lecture 27).

21 / 21

