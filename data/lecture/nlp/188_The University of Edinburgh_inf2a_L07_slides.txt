lexing
veri   cation of concurrent systems

lexing and other applications

informatics 2a: lecture 7

john longley

school of informatics
university of edinburgh

jrl@inf.ed.ac.uk

2 october 2017

1 / 15

lexing
veri   cation of concurrent systems

where we   re up to

in lecture 6, we looked at some practical applications of regular
language technology to string and pattern matching, and to data
validation.

in this lecture, we   ll look at some more:

lexical analysis of computer languages, etc. lexing. this is
often the    rst stage of the language processing pipeline for
computer languages (see lecture 2).

(brief outline). automatic veri   cation of safety/liveness
properties for (e.g. concurrent)    nite-state systems.

2 / 15

lexing
veri   cation of concurrent systems

what is lexing?
lexer generators
how lexers work

lexical analysis of formal languages

another application: lexical analysis (a.k.a. lexing).

the problem: given a source text in some formal language, split it
up into a stream of lexical tokens (or lexemes), each classi   ed
according to its lexical class.

example: in java,

while(count2<=1000)count2+=100

would be lexed as

while
while

(
count2
lbrack ident

count2
ident

+=
ass-op

100
int-lit

<=
infix-op int-lit rbrack

1000

)

3 / 15

lexing
veri   cation of concurrent systems

what is lexing?
lexer generators
how lexers work

lexing in context

the output of the lexing phase (a stream of tagged lexemes)
serves as the input for the parsing phase.
for parsing purposes, tokens like 100 and 1000 can be
conveniently lumped together in the class of integer literals.
wherever 100 can legitimately appear in a java program, so
can 1000.
keywords of the language (like while) and other special
symbols (like brackets) typically get a lexical class to
themselves.

often, another job of the lexing phase is to throw away
whitespace and comments. (e.g. in java     but in python,
spacing matters!)
rule of thumb: lexeme boundaries are the places where a
space could harid113ssly be inserted.

4 / 15

lexing
veri   cation of concurrent systems

what is lexing?
lexer generators
how lexers work

syntax highlighting

lexing doesn   t just happen inside compilers and interpreters.
many modern editors/ides (e.g. eclipse) do lexing as you type, for
the purpose of syntax highlighting.

5 / 15

lexing
veri   cation of concurrent systems

what is lexing?
lexer generators
how lexers work

lexical tokens and regular languages

in most computer language (e.g. java), the allowable forms of
identi   ers, integer literals,    oating point literals, comments etc. are
simple enough to be described by id157.

this means we can use the technology of    nite automata to
produce e   cient lexers.

even better, if you   re designing a language, you don   t actually need
to write a lexer yourself!

just write some id157 that de   ne the various lexical
classes, and let the machine automatically generate the code for
your lexer.

this is the idea behind lexer generators, such as the unix-based
lex and the more recent java-based jflex.

6 / 15

lexing
veri   cation of concurrent systems

what is lexing?
lexer generators
how lexers work

sample code (from j   ex user guide)

7 / 15

identifier = [:jletter:] [:jletterdigit:]*decintegerliteral = 0 | [1   9][0   9]*lineterminator = \r|\n|\r\ninputcharacter = [^\r\n]endoflinecomment     = "//" {inputcharacter}* {lineterminator} {"=="}               { return symbol(sym.ass_op); }{endoflinecomment}   { }... and later on ...{"while"}            { return symbol(sym.while); }  {decintegerliteral}  { return symbol(sym.int_lit); }  {identifier}         { return symbol(sym.ident); }lexing
veri   cation of concurrent systems

what is lexing?
lexer generators
how lexers work

recognizing a lexical token using nfas

build nfas for our lexical classes l1, . . . , lk in the order
listed: n1, . . . , nk .
run the the    parallel    automaton n1              nk on some input
string x.

choose the smallest i such that we   re in an accepting state of
ni . choose class li as the lexical class for x with highest
priority.
perform the speci   ed action for the class li (typically    return
tagged lexeme   , or ignore).

problem: how do we know when we   ve reached the end of the
current lexical token?

it needn   t be at the    rst point where we enter an accepting state.
e.g. i, if, if2 and if23 are all valid tokens in java.

8 / 15

lexing
veri   cation of concurrent systems

what is lexing?
lexer generators
how lexers work

principle of longest match

in most computer languages, the convention is that each stage, the
longest possible lexical token is selected. this is known as the
principle of longest match (a.k.a. maximal munch).

to    nd the longest lexical token starting from a given point, we   d
better run n1              nk until it expires, i.e. the set of possible
states becomes empty. (or max lexeme length is exceeded. . . )

we   d better also keep a note of the last point at which we were in
an accepting state, and what the top priority lexical class was. so
we need to keep track of three positions in the text:

9 / 15

start ofcurrentlexemeendpointmost recentlexemecurrentread position   fi23ab=(class ident)lexing
veri   cation of concurrent systems

what is lexing?
lexer generators
how lexers work

lexing: (conclusion)

once our nfa has expired, we output the string from    start    to
   most recent end    as a lexical token of class i.

we then advance the    start    pointer to the character after the
   most recent end   . . . and repeat until the end of the    le is reached.

all this is the basis for an e   cient lexing procedure (further
re   nements are of course possible).

hopefully the same lexer will be run on hundreds of source    les. so
probably worth taking the time to    optimize    our automaton (e.g.
by converting to a dfa, then minimizing.)

10 / 15

lexing
veri   cation of concurrent systems

finite automata and veri   cation

many concurrent systems arising in practice involve a bunch of
   nite-state processes that individually look quite simple.

but when put together, they can interact in very complex and
subtle ways (large state space). bugs can be hard to detect.

regular language theory can help us to verify desirable properties
automatically. e.g.

safety properties:    bad things don   t happen   

liveness properties:    good things do happen   

fairness properties:    things good for some processes don   t
cause too much badness to others   

11 / 15

lexing
veri   cation of concurrent systems

simple example: peterson   s mutual exclusion protocol

suppose we have two concurrent processes p0, p1 that may
request access to some shared resource (e.g. a printer), but
mustn   t be given access at the same time.
p0, p1 can communicate using three shared    ags:

req0 (initially false):    whether p0 wants access   .
req1 (initially false):    whether p1 wants access   .
turn (values 0,1): roughly,    who is being allowed a turn   .

code for p0 when it wants access:

req0 = true ;
turn = 1 ;
while (req1 && turn == 1) { wait } ;
... // p0 now has access
req0 = false ;

code for p1 is same with 0, 1 swapped and req0,req1 swapped.

12 / 15

lexing
veri   cation of concurrent systems

a    nite-state model

we can model p0, p1 and each of the three    ags by nfas
(constructed by hand). e.g.:

(all states are considered to be accepting.)

13 / 15

idlerequest  hasaccesswaitwait   set_req0_trueset_req0_falseset_turn_1read_req1_    trueread_turn_1read_req1_falseread_turn_0p0:falsetruereq0:read_req0_falseread_req0_trueset_req0_falseset_req0_trueset_req0_falseset_req0_truelexing
veri   cation of concurrent systems

combining the pieces

the    language    for the complete system can now be obtained via a
few standard constructions. (here (cid:107) denotes interleaving of regular
languages   not o   cially de   ned in inf2a.)

(l(p0) (cid:107) l(p1))     (l(req0) (cid:107) l(req1) (cid:107) l(turn))
the corresponding machine m can now be built automatically:
200 states in principle.
what   s more, in a suitable logic, we can formulate properties like:

mutual exclusion (a safety property): p0 and p1 can never have
access simultaneously.

progress (a liveness property): from any reachable state, some
process can gain access if it tries.

bounded waiting (a fairness property): once p0 has requested
access, p1 won   t be given access twice before p0 gets access.

there are algorithms for checking such properties automatically.

14 / 15

lexing
veri   cation of concurrent systems

next time . . .

what sorts of things can   t be done using regular languages?

how could we tell that some given language isn   t regular?

we   ll address these questions with a mathematical tool known as
the pumping lemma     usually considered one of the hard bits in
inf2a . . .

15 / 15

