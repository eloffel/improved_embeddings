an	earley	parsing	example	

						shay	cohen	
												inf2a	
november	3,	2017	

the	sentence	we	try	to	parse:	
	

	

	

	

					   book	that	   ight   	

	

whenever	we	denote	a	span	of	words	by	[i,j],	it	
means	it	spans	word	i+1	through	j,	because	i	and	
j	index,	between	0	and	3,	the	spaces	between	
the	words:	

	
																										0	book	1	that	2	   ight	3	
	
	

grammar	rules:	
	
s	  	np	vp	
s	  	aux	np	vp	
s	  	vp	
np	  	pronoun	
np	  	proper-noun	
np	  	det	nominal	
nominal	  	noun	
nominal	  	nominal	noun	
nominal	  	nominal	pp	
	

	
	
vp	  	verb	
vp	  	verb	np	
vp	  	verb	np	pp	
vp	  	verb	pp	
vp	  	vp	pp	
pp	  	prep	np	
verb	  	book	|	include	|	prefer	
noun	  	book	|	   ight	|	meal	
det	  	that	|	this	|	these	
	

start	with	predicpon	for	the	s	node:	
	
s	  	.	np	vp	[0,0]	
s	  	.	aux	np	vp	[0,0]	
s	  	.	vp	[0,0]	
	
all	of	these	elements	are	created	because	we	just	started	parsing	the	sentence,	and	
we	expect	an	s	to	dominate	the	whole	sentence	

np	  	.	pronoun	[0,0]	
np	  	.	proper-noun	[0,0]	
np	  	.	det	nominal	[0,0]	
vp	  	.	verb	[0,0]	
vp	->	.	verb	np	[0,0]	
vp	  	.	verb	np	pp	[0,0]	
vp	  .	verb	pp	[0,0]	
vp	  	.	vp	pp	[0,0]	
	
now	we	can	apply	predictor	on	the	above	s	nodes!	note	that	predictor	creates	
endpoints	[i,j]	such	that	i=j	and	i	and	j	are	the	right-end	points	of	the	state	from	
which	the	predicpon	was	made	
	
note:	for	a	predictor	item,	the	dot	is	always	in	the	beginning!	

in	the	previous	slide	we	had	states	of	the	following	form:	
	
vp	->	.	verb	np	[0,0]	
vp	  	.	verb	np	pp	[0,0]	
vp	  .	verb	pp	[0,0]	
	
note	that	we	now	have	a	dot	before	a	terminal.	
	
we	look	at	the	right	number	of	[i,j],	and	we	see	that	it	is	0,	so	we	will	try	to	match	
the	   rst	word	in	the	sentence	being	a	verb.	this	is	the	job	of	the	scanner	operapon.	

check!	we	have	a	rule	verb	  	book,	so	therefore,	we	can	advance	the	dot	for	the	above	
verb	rules	and	get	the	following	new	states:	
	
vp	->	verb	.	np	[0,1]	
vp	  	verb	.	np	pp	[0,1]	
vp	  verb	.	pp	[0,1]	
	
great.	what	does	that	mean	now?	

we	can	call	predictor	again,	we	have	new	nonterminals	with	a	dot	before	them!	

in	the	previous	slide	we	had	states	of	the	following	form:	
	
vp	->	verb	.	np	[0,1]	
vp	  	verb	.	np	pp	[0,1]	
vp	  verb	.	pp	[0,1]	
	
we	said	we	can	now	run	predictor	on	them.	what	will	this	create?	

for	np:	
	
np	  	.	pronoun	[1,1]	
np	  	.	proper-noun	[1,1]	
np	  	.	det	nominal	[1,1]	
	
note	that	now	we	are	expecpng	a	np	at	posipon	1!	

and	also	for	pp:	
	
pp	  	.	prep	nominal	[1,1]	
	

in	the	previous	slide	we	created	the	following	states:	
	
np	  	.	pronoun	[1,1]	
np	  	.	proper-noun	[1,1]	
np	  	.	det	nominal	[1,1]	
pp	  	.	prep	nominal	[1,1]	
	
now	we	have	an	opportunity	to	run	scanner	again	on	the	second	word	in	the	sentence!	
quespon:	for	which	item	above	would	we	do	that?	
	

we	would	do	that	for	np	  	.	det	nominal	[1,1].	   that   	can	only	be	a	det.	so	now	we	create	
a	new	item:	
	
np	  	det	.	nominal	[1,2]	
	
note	that	now	[i,j]	is	such	that	it	spans	the	second	word	(1	and	2	are	the	   indexed	spaces   	
between	the	words	before	and	aber	the	second	words)	

in	the	previous	slide,	we	added	the	state:	np	  	det	.	nominal	[1,2]	
	
now	predictor	can	kick	in	again,	because	nominal	is	a	nonterminal	in	a	newly	generated	
item	in	the	chart.	
	
what	will	predictor	create?	(hint:	predictor	takes	an	item	and	adds	new	rules	
for	all	rules	that	have	lhs	like	the	nonterminal	that	appears	aber	the	dot.)	

these	are	the	new	states	that	predictor	will	generate:	
	
nominal	  	.	noun	[2,2]	
nominal	  	.nominal	noun	[2,2]	
nominal	  	.nominal	pp	[2,2]	
	
note	that	again,	predictor	always	starts	with	i=j	for	the	[i,j]	spans.	
	
its	interpretapon	is:	there	might	be	a	nominal	nonterminal	spanning	a	substring	in	the	
sentence	that	starts	with	the	third	word.	

in	the	previous	slide,	we	created	an	element	of	the	form:	
	
nominal	  	.	noun	[2,2]	
	
its	interpretapon	is:	   there	might	be	a	use	of	the	rule	nominal	  	noun,	starpng	at	
the	third	word.	to	see	if	you	can	use	it,	you	need	to	   rst	check	whether	there	is	a	noun	
at	the	third	posipon	in	the	sentence.   				we	do!	so	scanner	can	kick	in.	
	
what	will	we	get?	

we	now	scanned	the	noun,	because	we	the	word	      ight   	can	be	a	noun.	
	
nominal	  	noun	.	[2,3]	
	
that   s	nice,	now	we	have	a	complete	item.	can	completer	kick	now	into	acpon?	
	
we	have	to	look	for	all	items	that	we	created	so	far	that	are	expecpng	a	nominal	starpng	
at	the	second	posipon.	

in	the	previous	slide,	we	created				nominal	  	noun	.	[2,3]				which	is	a	complete	item.	
now	we	need	to	see	whether	we	can	apply	completer	on	it.	
	
remember	we	created	this	previously?	
	
np	  	det	.	nominal	[1,2]	

now	we	can	apply	completer	on	it	in	conjuncpon	with	nominal	  	noun	.	[2,3]		and	get:	
	
np	  	det	nominal	.	[1,3]	
	
nice!	this	means	we	completed	another	item,	and	it	means	that	we	can	create	an	
np	that	spans	the	second	and	the	third	word	(   that	   ight   )	   	that   s	indeed	true	if	you	
take	a	look	at	the	grammar.	
	
in	any	case,	now	that	we	have	completed	an	item,	we	need	to	see	if	we	can	complete	
other	ones.	the	quespon	we	ask:	is	there	any	item	that	expects	an	np	(i.e.	the	dot	appears	
before	an	np)	and	the	right-hand	side	of	[i,j]	is	1?	

we	actually	had	a	couple	of	those:	
	
vp	  	verb	.	np	[0,1]	
vp	  	verb	.	np	pp	[0,1]	
	
they	are	waipng	for	an	np	starpng	at	the	second	word.	
	
so	we	can	use	completer	on	them	with	the	item	np	  	det	nominal	[1,3]	that	
we	created	in	the	previous	slide.	

so	now	we	will	have	new	items:	
	
vp	  	verb	np	.	[0,3]	
vp	  	verb	np	.	pp	[0,3]	
	
the	   rst	one	is	also	a	complete	one!	so	maybe	we	can	apply	complete	again?	
we	need	an	item	that	expects	a	vp	at	posipon	0.	
	
let   s	try	to	remember	if	we	had	one	of	those   	

we	had	one	indeed:	
	
s	  	.	vp	[0,0]	
	
that	was	one	of	the	   rst	few	items	we	created,	which	is	a	good	sign,	it	means	we	
are	creapng	now	items	that	span	the	tree	closer	to	the	top	node.	
	
so	now	we	can	complete	this	node	with	the	item	vp	  	verb	np	.	[0,3]	that	we	created	
in	the	previous	slide.	
	
what	do	we	get?	
	
	

we	get	the	item:	
	
s	  	vp	.	[0,	3]	
	
and	that	means	we	managed	to	create	a	full	parse	tree,	we	have	an	s	that	spans	
all	words	in	the	sentence.	
	
how	do	we	get	a	parse	tree	out	of	this?	back	pointers   	

let   s	consider	the	   back-pointers   	we	created.	
	
we	created	the	node	s	  	vp	.	[0,	3]	as	a	result	of	a	completer	on	the	item	
vp	  	verb	np	.	[0,3].	
	
we	created	vp	  	verb	np	.	[0,3]	as	a	result	of	a	completer	on	vp	  	verb	.	np	[0,1]	
when	we	had	an	np	  	det	nominal	[1,2].	
	
that	means	the	tree	has	to	look	like:	
	
	

s	

verb	

book	

vp	

np	

det	

that	

nominal	

   ight	

