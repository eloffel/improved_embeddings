showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

context-sensitive languages

informatics 2a: lecture 29

john longley

school of informatics
university of edinburgh

jrl@inf.ed.ac.uk

21 november 2017

1 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

recap: context-sensitivity in natural language

an example of context sensitivity in natural language was
presented in lecture 25:

crossing dependencies in swiss german (and dutch).

there are other phenomena that are most naturally described in a
   context-sensitive    way (e.g. choice between the determiners a and
an).

such phenomena take natural languages outside the context-free
level of the id154.

it is believed that natural languages naturally live (comfortably)
within the context-sensitive level of the id154.

2 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

in today   s lecture . . .

. . . we look at what lies beyond context-free languages from a
formal language viewpoint.

how we can know that a language is not context free.

de   ning the notion of context-sensitive language using
context-sensitive grammars.

an alternative characterization of context-sensitive languages
using noncontracting grammars.

the notion of unrestricted grammar, and the associated
recursively-enumerable languages.

3 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

non-context-free languages

we saw in lecture 8 that the pumping lemma can be used to show
a language isn   t regular.

there   s also a context-free version of this lemma, which can be
used to show that a language isn   t even context-free:

pumping lemma for context-free languages. suppose l is a
context-free language. then l has the following property.

(p) there exists k     0 such that every z     l with |z|     k
can be broken up into    ve substrings, z = uvwxy , such
that |vx|     1, |vwx|     k and uv i wx i y     l for all i     0.

4 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

context-free pumping lemma: the idea

in the regular case, the key point is that any su   ciently long string
will visit the same state twice.

in the context-free case, we note that any su   ciently large syntax
tree will have a downward path that visits the same non-terminal
twice. we can then    pump in    extra copies of the relevant subtree
and remain within the language:

5 / 19

sppppsppshowing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

context-free pumping lemma: continued

more precisely, suppose l has a id18 in cnf with m non-terminals.

then take k so large that every syntax tree for a string of length
    k contains a path of length > m + 1.
such a path (even with the root node removed, which means the
remaining path has length > m) is guaranteed to visit the same
nonterminal twice. (end of proof sketch.)

to show that a language l is not context free, we just need to
prove that it satis   es the negation (  p) of the property (p):

(  p) for every k     0, there exists z     l with |z|     k
such that, for every decomposition z = uvwxy with
|vx|     1 and |vwx|     k, there exists i     0 such that
uv i wx i y /    l.

6 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

standard example 1

the language l = {anbnc n | n     0} isn   t context-free!
we prove that (  p) holds for l:

7 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

standard example 1

the language l = {anbnc n | n     0} isn   t context-free!
we prove that (  p) holds for l:
suppose k     0.

7 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

standard example 1

the language l = {anbnc n | n     0} isn   t context-free!
we prove that (  p) holds for l:
suppose k     0.
we choose z = ak bk c k . then indeed z     l and |z|     k.

7 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

standard example 1

the language l = {anbnc n | n     0} isn   t context-free!
we prove that (  p) holds for l:
suppose k     0.
we choose z = ak bk c k . then indeed z     l and |z|     k.
suppose we have a decomposition z = uvwxy with |vx|     1 and
|vwx|     k.

7 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

standard example 1

the language l = {anbnc n | n     0} isn   t context-free!
we prove that (  p) holds for l:
suppose k     0.
we choose z = ak bk c k . then indeed z     l and |z|     k.
suppose we have a decomposition z = uvwxy with |vx|     1 and
|vwx|     k.
since |vwx|     k, the string vwx contains at most two di   erent
letters. so there must be some letter d     {a, b, c} that does not
occur in vwx.

7 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

standard example 1

the language l = {anbnc n | n     0} isn   t context-free!
we prove that (  p) holds for l:
suppose k     0.
we choose z = ak bk c k . then indeed z     l and |z|     k.
suppose we have a decomposition z = uvwxy with |vx|     1 and
|vwx|     k.
since |vwx|     k, the string vwx contains at most two di   erent
letters. so there must be some letter d     {a, b, c} that does not
occur in vwx.
but then uwy /    l because at least one character di   erent from d
now occurs < k times, whereas d still occurs k times.

7 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

standard example 1

the language l = {anbnc n | n     0} isn   t context-free!
we prove that (  p) holds for l:
suppose k     0.
we choose z = ak bk c k . then indeed z     l and |z|     k.
suppose we have a decomposition z = uvwxy with |vx|     1 and
|vwx|     k.
since |vwx|     k, the string vwx contains at most two di   erent
letters. so there must be some letter d     {a, b, c} that does not
occur in vwx.
but then uwy /    l because at least one character di   erent from d
now occurs < k times, whereas d still occurs k times.
we have shown that (  p) holds with i = 0.

7 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

a consequence

note that l1 = {anbnc m | m, n     0}, l2 = {ambnc n | m, n     0}
are both context-free, for familiar reasons.
but we   ve just shown that l = l1     l2 is not context free.
so context-free languages are not closed under intersection!

by contrast, recall that:

l1, l2 regular implies l1     l2 regular,
l1 context-free and l2 regular implies l1     l2 context-free.
(rough intuition: given an npda n1 for l1 and an nfa n2 for l2,
we can build a new npda by    multiplying    the control states of n1
by the states of n2.)

8 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

standard example 2

the language l = {ss | s     {a, b}   } isn   t context-free!
we prove that (  p) holds for l:
suppose k     0.
we choose z = ak b ak b ak b ak b. then indeed z     l and |z|     k.
suppose we have a decomposition z = uvwxy with |vx|     1 and
|vwx|     k. since |vwx|     k, the string vwx contains at most one b.
there are two main cases:

vx contains b, in which case uwy contains exactly 3 b   s.
otherwise uwy has the form z = ag b ahb ai b aj b where either:

exactly two adjacent numbers from g , h, i, j are < k (this
happens if w contains b and |v|     1     |x|), or
exactly one of g , h, i, j is < k (this happens if w contains b
and one of v , x is empty, or if vwx does not contain b).

in each case, we have uwy /    l. so (  p) holds with i = 0.

9 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

complementation

consider the language l(cid:48) de   ned by:

{a, b}        {ss | s     {a, b}   }

this is context free.
idea: if t = t1 . . . t2n     l(cid:48), there   s some i     n such that ti
(cid:54)= tn+i .
this means that t has the form waxybz or wbxyaz, where
|w| = |x| and |y| = |z|. not hard to give a id18 that generates all
such strings. (see kozen p. 155).
the complement of l(cid:48) is

{a, b}        l(cid:48) = {ss | s     {a, b}   }

which, as we   ve seen, is not context-free.

so context-free languages are not closed under complementation.

10 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

id19s

a id19 has productions of the form

  x              

where x is a nonterminal, and   ,   ,    are sequences of terminals
and nonterminals (i.e.,   ,   ,        (n       )   ) with the requirement
that    is nonempty.

so the rules for expanding x can be sensitive to the context in
which the x occurs (contrasts with context free).

minor wrinkle: the nonempty restriction on    disallows rules with
right-hand side  . to remedy this, we also permit the special rule

s      

where s is the start symbol, and with the restriction that this rule
is only allowed to occur if the nonterminal s does not appear on
the right-hand-side of any productions.

11 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

context sensitive languages

a language is context sensitive if it can be generated by a context
sensitive grammar.

the non-context-free languages:

{anbnc n | n     0}
{ss | s     {a, b}   }

are both context sensitive.

in practice, it can be quite an e   ort to produce context sensitive
grammars, according to the de   nition above.

it is often more convenient to work with a more liberal notion of
grammar for generating context-sensitive languages.

12 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

general and noncontracting grammars

in a general or unrestricted grammar, we allow productions of the
form

         

where   ,    are sequences of terminals and nonterminals, i.e.,
  ,        (n       )   , with    containing at least one nonterminal.
in a noncontracting grammar, we restrict productions to the form

         

with   ,    as above, subject to the additional requirement that
|  |     |  | (i.e., the sequence    is at least as long as   ).
in a noncontracting grammar also permit the special production

s      

where s is the start symbol, as long as s does not appear on the
right-hand-side of any productions.

13 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

example noncontracting grammar

consider the noncontracting grammar with start symbol s:

s     abc
s     asbc
cb     bc
bb     bb

example derivation (underlining the sequence to be expanded):

s     asbc     aabcbc     aabbcc     aabbcc

exercise: convince yourself that this grammar generates exactly
the strings anbnc n where n > 0.

(n.b. with noncontracting grammars and id19s, need to think in
terms of derivations, not syntax trees.)

14 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

noncontracting = context sensitive

theorem. a language is context sensitive if and only if it can be
generated by a noncontracting grammar.

that every context-sensitive language can be generated by a
noncontracting grammar is immediate, since context-sensitive
grammars are, by de   nition, noncontracting.

the proof that every noncontracting grammar can be turned into a
context sensitive one is intricate, and beyond the scope of the
course.

sometimes (e.g., in kozen) noncontracting grammars are called
id19s; but this terminology is not faithful to
chomsky   s original de   nition.

15 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

the id154

at this point, we have a fairly complete understanding of the
machinery associated with the di   erent levels of the chomsky
hierarchy.

regular languages: dfas, nfas, id157, regular
grammars.

context-free languages: context-free grammars,
nondeterministic pushdown automata.

context-sensitive languages: context-sensitive grammars,
noncontracting grammars.

recursively enumerable languages: unrestricted grammars.

16 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

context-sensitivity in programming languages

some aspects of typical programming languages can   t be captured
by context-free grammars, e.g.

typing rules

scoping rules (e.g. variables can only be used in contexts
where they have been    declared   )
access constraints (e.g. use of public vs. private methods
in java).

the usual approach is to give a id18 that   s a bit    too generous   ,
and then separately describe these additional rules.
(e.g. typechecking done as a separate stage after parsing.)

in principle, though, all the above features fall within what can be
captured by context-sensitive grammars. in fact, no programming
language known to humankind contains anything that can   t.

17 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

scoping constraints aren   t context-free

consider the simple language l1 given by

s       | declare v ; s | use v ; s

where v stands for a lexical class of variables. let l2 be the
language consisting of strings of l1 in which variables must be
declared before use.

assuming there are in   nitely many possible variables, it can be
shown that l2 is not context-free, but is context-sensitive.

(if there are just n possible variables, we could in theory give a id18
for l2 with around 2n nonterminals     but that   s obviously silly. . . )

18 / 19

showing a language isn   t context-free
context-sensitive languages
context-sensitivity in pls

summary

context-sensitive languages are a big step up from
context-free languages in terms of their power and generality.

natural languages have features that can   t be captured
conveniently (or at all) by context-free grammars. however, it
appears that nls are only mildly context-sensitive     they
only exploit the low end of the power o   ered by id19s.

programming languages contain non-context-free features
(typing, scoping etc.), but all these fall comfortably within the
realm of context-sensitive languages.

next time: what kinds of machines are needed to recognize
context-sensitive languages?

19 / 19

