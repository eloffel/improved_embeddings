generating parse tables
calculating first and follow sets

automatic generation of ll(1) parsers

informatics 2a: lecture 12

john longley

school of informatics
university of edinburgh

jrl@inf.ed.ac.uk

13 october 2017

1 / 17

generating parse tables
calculating first and follow sets

recap of lecture 11

ll(1) predictive parsing reads the input string from left to
right, and determines the correct production to apply purely
on the basis of two pieces of information: (1) the current
input symbol, and (2) the current predicted nonterminal
symbol (which is kept on the head of a stack).

the parsing algorithm is e   cient and deterministic and uses a
parse table to determine the next production.

ll(1) parsing is suitable only for formal languages with
unambiguous grammars. even for such languages,    nding an
ll(1) grammar may require some thought.

(addendum: some formal languages with unambiguous
grammars cannot be given an ll(1) grammar at all.)

2 / 17

generating parse tables
calculating first and follow sets

generating parse tables

we   ve seen that if a grammar g happens to be ll(1)     i.e. if it
admits a parse table     then e   cient, deterministic, predictive
parsing is possible with the help of a stack.
what   s more, if g is ll(1), g is automatically unambiguous.
but how do we tell whether a grammar is ll(1)? and if it is, how
can we construct a parse table for it?

for very small grammars, might be able to answer these questions
by eye inspection. but for realistic grammars, a systematic method
is needed.

in this lecture, we give an algorithmic procedure for answering both
questions.

3 / 17

generating parse tables
calculating first and follow sets

the overall picture

previous lecture: the ll(1) parsing algorithm, which works on a
parse table and a particular input string.
this lecture: algorithm for getting from a grammar g to a parse
table. the algorithm will succeed if g is ll(1), or fail if it isn   t.
(as in previous lecture, assume g has no    useless nonterminals   .)
next lecture: ways of getting from a grammar to an equivalent
ll(1) grammar. (possible quite often, but not always.)

4 / 17

algorithmll(1)"natural"grammargrammarll(1)tablell(1) parsesyntaxtreedocument(input string)parsing(e.g. disambiguation)hand tweakingtablegeneration(mechanical)once per languageonce per documentgenerating parse tables
calculating first and follow sets

first and follow sets

two steps to construct a parse table for a given grammar:

1 for each nonterminal x , compute two sets called first(x )

and follow (x ), de   ned as follows:

first(x ) is the set of all terminals that can appear at the start
of a phrase derived from x .
[convention: if   can be derived from x , also include the
special symbol   in first(x ).]
follow (x ) is the set of all terminals that can appear
immediately after x in some sentential form derived from the
start symbol s.
[convention: if x can appear at the end of some such
sentential form, also include the special symbol $ in
follow (x ).]

2 use these first and follow sets to    ll out the parse table.

the    rst step is somewhat tricky. the second is easier.

5 / 17

generating parse tables
calculating first and follow sets

exercises

first(x ) is the set of all terminals that can appear at the start
of a phrase derived from x .
[convention: if   can be derived from x , also include the
special symbol   in first(x ).]

recall our ll(1) grammar for well-matched bracket sequences:

s       | ts

t     (s)

question. work out each of the two sets below.

1 first(t )

2 first(s)

6 / 17

generating parse tables
calculating first and follow sets

exercises

first(x ) is the set of all terminals that can appear at the start
of a phrase derived from x .
[convention: if   can be derived from x , also include the
special symbol   in first(x ).]

recall our ll(1) grammar for well-matched bracket sequences:

s       | ts

t     (s)

question. work out each of the two sets below.

1 first(t )

2 first(s)

answer: first(t ) = {(}.

6 / 17

generating parse tables
calculating first and follow sets

exercises

first(x ) is the set of all terminals that can appear at the start
of a phrase derived from x .
[convention: if   can be derived from x , also include the
special symbol   in first(x ).]

recall our ll(1) grammar for well-matched bracket sequences:

s       | ts

t     (s)

question. work out each of the two sets below.

1 first(t )

2 first(s)

answer: first(t ) = {(}. first(s) = {(,  }.

6 / 17

generating parse tables
calculating first and follow sets

more exercises

follow (x ) is the set of all terminals that can appear
immediately after x in some sentential form derived from the
start symbol s.
[convention: if x can appear at the end of some such
sentential form, also include $ in follow (x ).]

again consider the same ll(1) grammar:

s       | ts

t     (s)

question. work out each of the two sets below.

1 follow (s)

2 follow (t )

7 / 17

generating parse tables
calculating first and follow sets

more exercises

follow (x ) is the set of all terminals that can appear
immediately after x in some sentential form derived from the
start symbol s.
[convention: if x can appear at the end of some such
sentential form, also include $ in follow (x ).]

again consider the same ll(1) grammar:

s       | ts

t     (s)

question. work out each of the two sets below.

1 follow (s)

2 follow (t )

answer: follow (s) = {), $}.

7 / 17

generating parse tables
calculating first and follow sets

more exercises

follow (x ) is the set of all terminals that can appear
immediately after x in some sentential form derived from the
start symbol s.
[convention: if x can appear at the end of some such
sentential form, also include $ in follow (x ).]

again consider the same ll(1) grammar:

s       | ts

t     (s)

question. work out each of the two sets below.

1 follow (s)

2 follow (t )

answer: follow (s) = {), $}. follow (t ) = {(, ), $}.

7 / 17

generating parse tables
calculating first and follow sets

those examples again

look again at our grammar for well-matched bracket sequences:

s       | ts

t     (s)

by inspection, we can see that

first(s) = { (,  }
because an s can begin with ( or be empty
first(t ) = { (}
because a t must begin with (
follow (s) = { ), $}
because within a complete phrase, an s
can be followed by ) or appear at the end
follow (t ) = { (, ), $} because a t can be followed by ( or )

or appear at the end

later we   ll give a systematic method for computing these sets.
further convention: take first(a) = {a} for each terminal a.

8 / 17

generating parse tables
calculating first and follow sets

filling out the parse table

once we   ve got these first and follow sets, we can    ll out the
parse table as follows.
for each production x        of g in turn:

for each terminal a, if       can begin with    a, insert x        in
row x , column a.
if       can be empty   , then for each b     follow (x ) (where b
may be $), insert x        in row x , column b.

if doing this leads to clashes (i.e. two productions    ghting for the
same table entry) then conclude that the grammar is not ll(1).

to explain the phrases in blue, suppose    = x1 . . . xn, where the xi
may be terminals or nonterminals.

   can be empty means       first(xi ) for every xi .
   can begin with a means that, for some i,
      first(x1)     . . .     first(xi   1), and a     first(xi ).

9 / 17

generating parse tables
calculating first and follow sets

comments on    lling out the parse table

the case    =   is counted as a case in which    can be empty.

(this case is implicit in the last slide since    =   counts as an
instance of    = x1 . . . xn by taking n = 0, whence the
condition          first(xi ) for every xi     is vacuously true since
there are no xi .)
similarly, we count    = x1 . . . xn with a     first(x1) as one
case in which    can begin with a.

(again this is implicit in the last slide. the condition
      first(x1)     . . .     first(xi   1) means that   is contained in
all the sets first(x1), first(x2) up to first(xi   1). in the case
that i = 1, we consider the sequence x1, . . . , xi   1 as being
empty. thus the condition          first(x1)     . . .     first(xi   1)   
is again vacuously true. )

10 / 17

generating parse tables
calculating first and follow sets

filling out the parse table: example

s       | ts
first(s) = {(,  }
first(t ) = {(}

t     (s)

follow (s) = {), $}
follow (t ) = {(, ), $}

use this information to    ll out the parse table:

(s) can begin with (, so insert t     (s) in entry for (, t .
ts can begin with (, so insert s     ts in entry for (, s.
  can be empty, and follow (s) = {), $}, so insert s       in
entries for ), s and $, s.

this gives the parse table we had in the previous lecture:

(

s     ts
s
t t     (s)

)

$

s       s      

11 / 17

generating parse tables
calculating first and follow sets

intermezzo: true or false?

1 every ll(1) grammar is context free.

2 every context-free language can be presented using an ll(1)

grammar.

3 every regular language can be presented using an ll(1)

grammar.

4 every ll(1) grammar is unambiguous.

5 languages de   ned by ll(1) grammars can be e   ciently

parsed.

12 / 17

generating parse tables
calculating first and follow sets

intermezzo: true or false?

1 every ll(1) grammar is context free.

2 every context-free language can be presented using an ll(1)

grammar.

3 every regular language can be presented using an ll(1)

grammar.

4 every ll(1) grammar is unambiguous.

5 languages de   ned by ll(1) grammars can be e   ciently

parsed.

answer: 2 is false, the others are all true.

12 / 17

generating parse tables
calculating first and follow sets

calculating first and follow sets: preliminary stage

to complete the story, we   d like an algorithm for calculating first
and follow sets.

easy    rst step: compute the set e of nonterminals that    can be     :
1 start by adding x to e whenever x       is a production of g.

2

if x     y1 . . . ym is a production and all y1, . . . , ym are
already in e , add x to e .

3 repeat step 2 until e stabilizes.

example: for our grammar of well-matched bracket sequences, we
have e = {s}.

13 / 17

generating parse tables
calculating first and follow sets

calculating first sets: the details

1 set first(a) = {a} for each a       . for each nonterminal x ,

initially set first(x ) to { } if x     e , or     otherwise.
2 for each production x     x1 . . . xn and each i     n, if
x1, . . . , xi   1     e and a     first(xi ), add a to first(x ).

3 repeat step 2 until all first sets stabilize.

example:

start with first(s) = { }, first(t ) =    , etc.
consider t     (s) with i = 1: add ( to first(t ).
now consider s     ts with i = 1: add ( to first(s).
that   s all.

14 / 17

generating parse tables
calculating first and follow sets

calculating follow sets: the details

1

2 for each production x       , each splitting of    as   yx1 . . . xn

initially set follow (s) = {$} for the start symbol s, and
follow (x ) =     for all other nonterminals x .
where n     1, and each i with x1, . . . , xi   1     e , add all of
first(xi ) (excluding  ) to follow (y ).
  yx1 . . . xn with x1, . . . , xn     e , add all of follow (x ) to
follow (y ).

3 for each production x        and each splitting of    as   y or

4 repeat step 3 until all follow sets stabilize.

example:

start with follow (s) = {$}, follow (t ) =    .
apply step 2 to t     (s) with i = 1: add ) to follow (s).
apply step 2 to s     ts with i = 1: add ( to follow (t ).
apply step 3 to s     ts with n = 1: add ) and $ to follow (t ).
that   s all.

15 / 17

generating parse tables
calculating first and follow sets

parser generators

ll(1) is representative of a bunch of classes of id18s that are
e   ciently parseable. e.g. ll(1)     lalr     lr(1). these involve
various tradeo   s of expressive power vs. e   ciency/simplicity.

for such languages, a parser can be generated automatically from
a suitable grammar. (e.g. for ll(1), just need parse table plus
   xed    driver    for the parsing algorithm.)

so we don   t need to write parsers ourselves     just the grammar!
(e.g. one can basically de   ne the syntax of java in about 10 pages
of context-free rules.)

this is the principle behind parser generators like yacc (   yet
another compiler compiler   ) and java-cup.

16 / 17

generating parse tables
calculating first and follow sets

reading

recommended: some relevant lecture notes (   note 12    in
particular) and a tutorial sheet from previous years are
available via the course schedule webpage.

dragon book: aho, sethi and ullman, compilers: principles,
techniques and tools, section 4.4.

tiger book: andrew appel, modern compiler implementation
in (c | java | ml).
turtle book: aho and ullman, foundations of computer
science.

17 / 17

