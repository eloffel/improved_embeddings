id117

informatics 2a: lecture 21

shay cohen

3 november 2017

1 / 31

1 the cyk chart as a graph
what   s wrong with cyk
adding prediction to the chart

2 the id117 algorithm
the predictor operator
the scanner operator
the completer operator
id117: example
comparing earley and cyk

2 / 31

note about cyk

the cyk algorithm parses input strings in chomsky normal form.
can you see how to change it to an algorithm with an arbitrary
rhs length (of only nonterminals)?

3 / 31

note about cyk

the cyk algorithm parses input strings in chomsky normal form.
can you see how to change it to an algorithm with an arbitrary
rhs length (of only nonterminals)?

we would have to split a given span into all possible subspans
according to the length of the rhs. what is the complexity of
such algorithm?

3 / 31

note about cyk

the cyk algorithm parses input strings in chomsky normal form.
can you see how to change it to an algorithm with an arbitrary
rhs length (of only nonterminals)?

we would have to split a given span into all possible subspans
according to the length of the rhs. what is the complexity of
such algorithm?
still o(n2) charts, but now it takes o(nk   1) time to process each
cell, where k is the maximal length of an rhs. therefore:
o(nk+1). for cyk, k = 2.

can we do better than that?

3 / 31

graph representation

the cyk chart can also be represented as a graph. e.g. for a
certain grammar containing rules vp     v np and vp     vp pp:

4 / 31

openedthetheboytheboxonfloor012345678vdetnprepdetnnpnpppnpvpgraph representation

an alternative analysis. note we don   t know which production the
vp arc [2, 8] represents: vp     v np or vp     vp pp.

5 / 31

openedthetheboytheboxonfloor012345678vdetnprepdetnnpnpppvpvpcyk chart entries

if the entire production were recorded, rather than just its lhs (ie,
the constituent that it analyses), then we   d (usually) know.

6 / 31

openedthetheboytheboxonfloor012345678vdetnprepdetnvp    > v npnp    > np ppnp    > det npp    > prep npnp    > det ncyk chart entries

if the entire production were recorded, rather than just its lhs
(ie, the constituent that it analyses), then we   d (usually) know.

7 / 31

openedthetheboytheboxonfloor012345678vdetnprepdetnnp    > det nnp    > det nvp    > vp pppp    > prep npvp    > v npchart entries: both analyses

8 / 31

openedthetheboytheboxonfloor012345678vdetnprepdetnvp    > v npvp    > vp ppopenedthetheboytheboxonfloor012345678vdetnprepdetnnp    > np ppnp    > det nnp    > det nvp    > v nppp    > prep npa simple grammar: the problem with cky

consider this simple grammar in chomsky normal form:

binary rules
s     b x
x     x x
s     c y
y     y y

lexical rules
x     a
b     b
y     a
c     c

what is the language of this grammar?

9 / 31

a simple grammar: the problem with cky

consider this simple grammar in chomsky normal form:

lexical rules
x     a
b     b
y     a
c     c

binary rules
s     b x
x     x x
s     c y
y     y y
what is the language of this grammar? (b|c)a   

what will cky do if we try to parse baaaaa?

9 / 31

a simple grammar: the problem with cky

consider this simple grammar in chomsky normal form:

lexical rules
x     a
b     b
y     a
c     c

binary rules
s     b x
x     x x
s     c y
y     y y
what is the language of this grammar? (b|c)a   

what will cky do if we try to parse baaaaa?

what will cky do if we try to parse caaaaa?

9 / 31

cyk chart entries

the cyk algorithm avoids redundant work by storing in a chart all
the constituents it    nds.

but it populates the table with phantom constituents, that don   t
form part of any complete parse. can be a signi   cant problem in
long sentences.

the idea of the earley algorithm is to avoid this, by only building
constituents that are compatible with the input read so far.

10 / 31

id117

key idea: as well as completed productions (ones whose entire
rhs have been recognized), we also record incomplete productions
(ones for which there may so far be only partial evidence).

incomplete productions (aka incomplete constituents) are
e   ectively predictions about what might come next and what
will be learned from    nding it.

incomplete constituents can be represented using an extended
form of production rule called a dotted rule, e.g.
vp     v     np.
the dot indicates how much of the rhs has already been
found. the rest is a prediction of what is to come.

11 / 31

id117

allows arbitrary id18s

top-down control

fills a table in a single sweep over the input
table entries represent:

completed constituents and their locations
in-progress constituents
predicted constituents

12 / 31

states

the table entries are called states and are represented with
dotted-rules.

s         vp [0,0]
a vp is predicted at the start
of the sentence
np     det     nominal [1,2] an np is in progress; seen det,
vp     v np    [0,3]

nominal is expected
a vp has been found starting
at 0 and ending at 3

once chart is populated there should be an s the    nal column that
spans from 0 to n and is complete: s            [0, n].
case you   re done.

if that   s the

13 / 31

sketch of earley algorithm

1 predict all the states you can upfront, working top-down

from s

2 for each word in the input:

1 scan in the word.
2 complete or extend existing states based on matches.
3 add new predictions.

3 when out of words, look at the chart to see if you have a

winner.

the algorithm uses three basic operations to process states in the
chart: predictor and completer add states to the chart entry
being processed; scanner adds a state to the next chart entry.

14 / 31

predictor

creates new states representing top-down expectations

applied to any state that has a non-terminal (other than a
part-of-speech category) immediately to right of dot

application results in creation of one new state for each
alternative expansion of that non-terminal

new states placed into same chart entry as generating state

s        vp, [0,0]
vp         verb, [0,0]
vp         verb np, [0,0]
vp         verb np pp, [0,0]
vp         verb pp, [0,0]
vp         vp pp, [0,0]

15 / 31

scanner

applies to states with a part-of-speech category to right of dot

incorporates into chart a state corresponding to prediction of
a word with particular part-of-speech

creates new state from input state with dot advanced over
predicted input category

unlike cyk, only parts-of-speech of a word that are predicted
by some existing state will enter the chart (top-down input)

vp         verb np, [0,0]
vp     book     np, [0,1]

16 / 31

completer

applied to state when its dot has reached right end of the rule

this means that parser has successfully discovered a particular
grammatical category over some span of the input
completer    nds and advances all previously created states
that were looking for this category at this position in input

creates states copying the older state, advancing dot over
expected category, and installing new state in chart

   nds state
   nds state

np     det nominal    , [1,3]

vp     verb     np, [0,1]
vp     verb     np pp, [0,1]

17 / 31

completer

applied to state when its dot has reached right end of the rule

this means that parser has successfully discovered a particular
grammatical category over some span of the input
completer    nds and advances all previously created states
that were looking for this category at this position in input

creates states copying the older state, advancing dot over
expected category, and installing new state in chart

np     det nominal    , [1,3]

vp     verb     np, [0,1]
   nds state
vp     verb     np pp, [0,1]
   nds state
vp     verb np    , [0,3]
adds complete state
adds incomplete state vp     verb np     pp, [0,3]

17 / 31

id117: example

we will use the grammar to parse the sentence    book that    ight   .

grammar rules

s     np vp
s     aux np vp
s     vp
np     pronoun
np     proper -noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp

vp     verb
vp     verb np
vp     verb np pp
vp     verb pp
vp     vp pp
pp     preposition np
verb     book|include|prefer
noun     book|   ight|meal
det     that|this|these

18 / 31

id117: example[0]

state
rule
s         np vp
s1
s         aux np vp
s2
s         vp
s3
s4 np         pronoun
s5 np         proper -noun
s6 np         det nominal
s7 vp         verb
s8 vp         verb np
s9 vp         verb np pp
s10 vp         verb pp
s11 vp         vp pp

start/end

[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]

reason
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor

19 / 31

id117: example[0]

state
rule
s         np vp
s1
s         aux np vp
s2
s         vp
s3
s4 np         pronoun
s5 np         proper -noun
s6 np         det nominal
s7 vp         verb
s8 vp         verb np
s9 vp         verb np pp
s10 vp         verb pp
s11 vp         vp pp

start/end

[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]

reason
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor

19 / 31

id117: example[0]

state
rule
s         np vp
s1
s         aux np vp
s2
s         vp
s3
s4 np         pronoun
s5 np         proper -noun
s6 np         det nominal
s7 vp         verb
s8 vp         verb np
s9 vp         verb np pp
s10 vp         verb pp
s11 vp         vp pp

start/end

[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]

reason
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor

19 / 31

id117: example[0]

state
rule
s         np vp
s1
s         aux np vp
s2
s         vp
s3
s4 np         pronoun
s5 np         proper -noun
s6 np         det nominal
s7 vp         verb
s8 vp         verb np
s9 vp         verb np pp
s10 vp         verb pp
s11 vp         vp pp

start/end

[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]

reason
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor

19 / 31

id117: example[0]

state
rule
s         np vp
s1
s         aux np vp
s2
s         vp
s3
s4 np         pronoun
s5 np         proper -noun
s6 np         det nominal
s7 vp         verb
s8 vp         verb np
s9 vp         verb np pp
s10 vp         verb pp
s11 vp         vp pp

start/end

[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]

reason
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor

19 / 31

id117: example[0]

state
rule
s         np vp
s1
s         aux np vp
s2
s         vp
s3
s4 np         pronoun
s5 np         proper -noun
s6 np         det nominal
s7 vp         verb
s8 vp         verb np
s9 vp         verb np pp
s10 vp         verb pp
s11 vp         vp pp

start/end

[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]
[0,0]

reason
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor
predictor

19 / 31

id117: example[1]

rule

state
s12 verb     book    
s13 vp     verb    
s14 vp     verb     np
s15 vp     verb     np pp
s16 vp     verb     pp
s17
s18 vp     vp     pp
s19 np         pronoun
s20 np         proper -noun
s21 np         det nominal
s22 pp         prep np

s     vp    

start/end

[0,1]
[0,1]
[0,1]
[0,1]
[0,1]
[0,1]
[1,1]
[1,1]
[1,1]
[1,1]
[1,1]

reason
scanner
completer
completer
completer
completer
completer
completer
predictor
predictor
predictor
predictor

20 / 31

id117: example[1]

rule

state
s12 verb     book    
s13 vp     verb    
s14 vp     verb     np
s15 vp     verb     np pp
s16 vp     verb     pp
s17
s18 vp     vp     pp
s19 np         pronoun
s20 np         proper -noun
s21 np         det nominal
s22 pp         prep np

s     vp    

start/end

[0,1]
[0,1]
[0,1]
[0,1]
[0,1]
[0,1]
[1,1]
[1,1]
[1,1]
[1,1]
[1,1]

reason
scanner
completer
completer
completer
completer
completer
completer
predictor
predictor
predictor
predictor

20 / 31

id117: example[1]

rule

state
s12 verb     book    
s13 vp     verb    
s14 vp     verb     np
s15 vp     verb     np pp
s16 vp     verb     pp
s17
s18 vp     vp     pp
s19 np         pronoun
s20 np         proper -noun
s21 np         det nominal
s22 pp         prep np

s     vp    

start/end

[0,1]
[0,1]
[0,1]
[0,1]
[0,1]
[0,1]
[1,1]
[1,1]
[1,1]
[1,1]
[1,1]

reason
scanner
completer
completer
completer
completer
completer
completer
predictor
predictor
predictor
predictor

20 / 31

id117: example[1]

rule

state
s12 verb     book    
s13 vp     verb    
s14 vp     verb     np
s15 vp     verb     np pp
s16 vp     verb     pp
s17
s18 vp     vp     pp
s19 np         pronoun
s20 np         proper -noun
s21 np         det nominal
s22 pp         prep np

s     vp    

start/end

[0,1]
[0,1]
[0,1]
[0,1]
[0,1]
[0,1]
[1,1]
[1,1]
[1,1]
[1,1]
[1,1]

reason
scanner
completer
completer
completer
completer
completer
completer
predictor
predictor
predictor
predictor

20 / 31

id117: example[1]

rule

state
s12 verb     book    
s13 vp     verb    
s14 vp     verb     np
s15 vp     verb     np pp
s16 vp     verb     pp
s17
s18 vp     vp     pp
s19 np         pronoun
s20 np         proper -noun
s21 np         det nominal
s22 pp         prep np

s     vp    

start/end

[0,1]
[0,1]
[0,1]
[0,1]
[0,1]
[0,1]
[1,1]
[1,1]
[1,1]
[1,1]
[1,1]

reason
scanner
completer
completer
completer
completer
completer
completer
predictor
predictor
predictor
predictor

20 / 31

id117: example[1]

rule

state
s12 verb     book    
s13 vp     verb    
s14 vp     verb     np
s15 vp     verb     np pp
s16 vp     verb     pp
s17
s18 vp     vp     pp
s19 np         pronoun
s20 np         proper -noun
s21 np         det nominal
s22 pp         prep np

s     vp    

start/end

[0,1]
[0,1]
[0,1]
[0,1]
[0,1]
[0,1]
[1,1]
[1,1]
[1,1]
[1,1]
[1,1]

reason
scanner
completer
completer
completer
completer
completer
completer
predictor
predictor
predictor
predictor

20 / 31

id117: example[1]

rule

state
s12 verb     book    
s13 vp     verb    
s14 vp     verb     np
s15 vp     verb     np pp
s16 vp     verb     pp
s17
s18 vp     vp     pp
s19 np         pronoun
s20 np         proper -noun
s21 np         det nominal
s22 pp         prep np

s     vp    

start/end

[0,1]
[0,1]
[0,1]
[0,1]
[0,1]
[0,1]
[1,1]
[1,1]
[1,1]
[1,1]
[1,1]

reason
scanner
completer
completer
completer
completer
completer
completer
predictor
predictor
predictor
predictor

20 / 31

id117: example[1]

rule

state
s12 verb     book    
s13 vp     verb    
s14 vp     verb     np
s15 vp     verb     np pp
s16 vp     verb     pp
s17
s18 vp     vp     pp
s19 np         pronoun
s20 np         proper -noun
s21 np         det nominal
s22 pp         prep np

s     vp    

start/end

[0,1]
[0,1]
[0,1]
[0,1]
[0,1]
[0,1]
[1,1]
[1,1]
[1,1]
[1,1]
[1,1]

reason
scanner
completer
completer
completer
completer
completer
completer
predictor
predictor
predictor
predictor

20 / 31

id117: example[2]

rule

state
s23 det     that    
s24 np     det     nominal
s25 nominal         noun
s26 nominal         nominal noun
s27 nominal         nominal pp

start/end

[1,2]
[1,2]
[2,2]
[2,2]
[2,2]

reason
scanner
completer
predictor
predictor
predictor

21 / 31

id117: example[2]

rule

state
s23 det     that    
s24 np     det     nominal
s25 nominal         noun
s26 nominal         nominal noun
s27 nominal         nominal pp

start/end

[1,2]
[1,2]
[2,2]
[2,2]
[2,2]

reason
scanner
completer
predictor
predictor
predictor

21 / 31

id117: example[2]

rule

state
s23 det     that    
s24 np     det     nominal
s25 nominal         noun
s26 nominal         nominal noun
s27 nominal         nominal pp

start/end

[1,2]
[1,2]
[2,2]
[2,2]
[2,2]

reason
scanner
completer
predictor
predictor
predictor

21 / 31

id117: example[2]

rule

state
s23 det     that    
s24 np     det     nominal
s25 nominal         noun
s26 nominal         nominal noun
s27 nominal         nominal pp

start/end

[1,2]
[1,2]
[2,2]
[2,2]
[2,2]

reason
scanner
completer
predictor
predictor
predictor

21 / 31

id117: example[3]

rule

state
s28 noun            ight
s29 nominal     noun    
s30 np     det nominal    
s31 nominal     nominal     noun
s32 nominal     nominal     pp
s33 vp     verb np    
s34 vp     verb np     pp
s35 pp     prep     np
s36
s37 vp     vp     pp

s     vp    

start/end

[2,3]
[2,3]
[1,3]
[2,3]
[2,3]
[0,3]
[0,3]
[3,3]
[0,3]
[0,3]

reason
scanner
completer
completer
completer
completer
completer
completer
predictor
completer
completer

22 / 31

id117: example[3]

rule

state
s28 noun            ight
s29 nominal     noun    
s30 np     det nominal    
s31 nominal     nominal     noun
s32 nominal     nominal     pp
s33 vp     verb np    
s34 vp     verb np     pp
s35 pp     prep     np
s36
s37 vp     vp     pp

s     vp    

start/end

[2,3]
[2,3]
[1,3]
[2,3]
[2,3]
[0,3]
[0,3]
[3,3]
[0,3]
[0,3]

reason
scanner
completer
completer
completer
completer
completer
completer
predictor
completer
completer

22 / 31

id117: example[3]

rule

state
s28 noun            ight
s29 nominal     noun    
s30 np     det nominal    
s31 nominal     nominal     noun
s32 nominal     nominal     pp
s33 vp     verb np    
s34 vp     verb np     pp
s35 pp     prep     np
s36
s37 vp     vp     pp

s     vp    

start/end

[2,3]
[2,3]
[1,3]
[2,3]
[2,3]
[0,3]
[0,3]
[3,3]
[0,3]
[0,3]

reason
scanner
completer
completer
completer
completer
completer
completer
predictor
completer
completer

22 / 31

id117: example[3]

rule

state
s28 noun            ight
s29 nominal     noun    
s30 np     det nominal    
s31 nominal     nominal     noun
s32 nominal     nominal     pp
s33 vp     verb np    
s34 vp     verb np     pp
s35 pp     prep     np
s36
s37 vp     vp     pp

s     vp    

start/end

[2,3]
[2,3]
[1,3]
[2,3]
[2,3]
[0,3]
[0,3]
[3,3]
[0,3]
[0,3]

reason
scanner
completer
completer
completer
completer
completer
completer
predictor
completer
completer

22 / 31

the earley algorithm

23 / 31

the earley algorithm

24 / 31

earley: pseudo-code simpli   ed

to make things easier to de   ne, we will assume all strings end in $
and that there is a special additional top-level symbol s(cid:48) with rule
s(cid:48)     s$.
parsing an input x = x1       xn$. si will be a state of earley chart
items with an ending point i.
start with s0 = {[s(cid:48)        s$, 0, 0]}. then, for 0     i     n do:
1 process each item s     si in order by applying to it the single

applicable operation among:

predictor (adds new items to si )
completer (adds new items to si )
scanner (adds new items to si+1)

if si+1 =     reject the input
if i = n and sn+1 = {[s(cid:48)     s$   , 0, n + 1]} accept the input

2

3

25 / 31

parsing the input

as with cyk we have formulated a recognizer. we can change it
to a parser by adding backpointers so that each state knows where
it came from.

chart[1] s12 verb     book    
chart[2] s23 det     that    
chart[3] s28 noun        ight    

s29 nominal     noun    
s30 np     det nominal    
s33 vp     verb np    
s36

s     vp    

[0,1]
[1,2]
[2,3]
[2,3]
[1,3]
[0,3]
[0,3]

scanner
scanner
scanner
(s28)
(s23, s29)
(s12, s30)
(s33)

26 / 31

comparing earley and cyk

for such a simple example, there seems to be a lot of useless
stu    in the chart.

we are predicting phrases that aren   t there at all!

that   s the    ipside to the cyk problem.

27 / 31

comparing earley and cyk

for such a simple example, there seems to be a lot of useless
stu    in the chart.

we are predicting phrases that aren   t there at all!

that   s the    ipside to the cyk problem.

did we solve ambiguity?

27 / 31

comparing earley and cyk

for such a simple example, there seems to be a lot of useless
stu    in the chart.

we are predicting phrases that aren   t there at all!

that   s the    ipside to the cyk problem.

did we solve ambiguity? both cyk and earley may result in
multiple s structures for the [0, n] table entry. of course, neither
can tell us which one is    right   .

27 / 31

the asymptotic complexity of earley and cky

both algorithms are cubic in n (length of string)
cky needs to construct o(n2) elements in the chart (in the
worst-case), and processing each element to create it is o(n),
so it is o(n3) in total
earley also needs to construct o(n2) elements, and the
completer operation takes o(n) time. it could potentially
run on o(n2) elements, so the complexity is again o(n3)

28 / 31

more about asymptotic complexity of earley

the completer operation really takes o(i 2) at iteration i
for unambiguous grammars, earley shows that the
completer operation can take at most o(i) time
this means that the complexity for unambiguous grammars is
o(n2)
there are also some specialised grammars for which the earley
algorithm takes o(n) time

29 / 31

connection between the earley algorithm and cky

what happens if we run the earley algorithm on a grammar in
chomsky normal form?

this is essentially cky with top-down    ltering

it will only create (completed) elements in the chart, if there
is a left-most derivation that leads to that constituent

30 / 31

summary

the earley algorithm uses id145 to
implement a top-down search strategy.

single left to right pass that    lls chart with entries.

dotted rule represents progress in recognizing rhs of rule.

algorithm always moves forward, never backtracks to previous
chart entry, once it has moved on.
states are processed using predictor, completer,
scanner operations.

reading: same as for lecture 20
next lecture: resolving ambiguity using statistical parsing.

31 / 31

