computing natural language semantics

informatics 2a: lecture 26

shay cohen

14 november 2017

1 / 25

1 semantic composition

review: compositionality, lambda expressions, and logical
forms
examples
type raising

2 semantic (scope) ambiguity

de   nition
semantic scope
approaches to scope ambiguity

2 / 25

making    expressions concrete

consider the question    who is the ceo of microsoft?   

a possible semantic interpretation of it:
  x.ceo(x, microsoft)

in addition, we have a large database of ceos, in relations of
the form ceo(nadella, microsoft), ceo(cook, apple), etc.

given the above    expression, we can apply it on all entities in
the database and check its truth value (i.e. whether in our
model of the world, as re   ected by the database, the ceo
relation holds between the entity and microsoft).

3 / 25

compositionality

how do we create fol for sentences in a compositional manner?
through their syntactic tree.

each node in the tree will have a lambda expression associated
with it (or a logical form). that expression has a    type        it is
sometimes easier to think in terms of    what type a node should
be,    instead of    what formula it should have.   

roadmap: (1) simple case of statements such as    john loves
mary.    (2) how do we tackle sentences such as    john loves a tall
woman?    (3) how do we tackle sentences such as    every man
loves a woman?   

4 / 25

compositionality

compositionality: the meaning of a complex expression is a
function of the meaning of its parts and of the rules by which they
are combined.

do we have su   cient tools to systematically compute meaning
representations according to this principle?

the meaning of a complete sentence will hopefully be a fopl
formula, which we consider as having type t (truth values).
but the meaning of smaller fragments of the sentence will
have other types. e.g.

has a bone < e, t >
every dog

<< e, t >, t >

the idea is to show how to associate a meaning with such
fragments, and how these meanings combine.
to do this, we need to extend our language of fopl with   
expressions (   = lambda; written as \ in haskell).

5 / 25

lambda (  ) expressions

  -expressions are an extension to fopl that allows us to work
with    partially constructed    formulae. a   -expression consists of:

the greek letter   , followed by a variable (formal parameter);

a fopl expression that may involve that variable.

  x.sleep(x) : < e, t >
   the function that takes an entity x to the statement sleep(x)   

(cid:124)

(cid:123)(cid:122)

function

(cid:125)

(cid:124)(cid:123)(cid:122)(cid:125)

(kim)

argument

(  x.sleep(x))

: t

a   -expression can be applied to a term.
(the above has the same truth value as sleep(kim).)

6 / 25

lambda expressions can be nested. we can use nesting to create
functions of several arguments that accept their arguments one at
a time.

  y .  x. love(x,y)
   the function that takes y to
(the function that takes x to the statement love(x,y))   

: < e, < e, t >>

: < e, < e, < e, t >>>

  z.  y .  x. give(x,y,z)
   the function that takes z to
(the function that takes y to
(the function that takes x to the statement give(x,y,z)))   

7 / 25

beta reduction

when a lambda expression applies to a term, a reduction operation
(beta (  ) reduction) can be used to replace its formal parameter
with the term and simplify the result. in general:

(  x.m)n       m[x (cid:55)    n]

(m with n substituted for x)

      sleep(kim)

(cid:124)
(cid:124)
(cid:124)

(cid:123)(cid:122)

(  x.sleep(x))

function

argument

(cid:125)

(kim)

(cid:124)(cid:123)(cid:122)(cid:125)
(cid:124)
(cid:125)

(cid:123)(cid:122)

function

(cid:123)(cid:122)

function

(  x.love(x, crabapples))

(cid:125)
(cid:123)(cid:122)
(cid:124)(cid:123)(cid:122)(cid:125)
(cid:125)

(kim)

argument

argument

(  y .  x.love(x, y ))

(crabapples)

        x.love(x, crabapples)

      love(kim, crabapples)

8 / 25

id152: the key idea

grammar i
s     np vp
vp     tv np {tv.sem(np.sem)} < e, t >
np     npr
tv     loves
npr     kim
npr     sam

{vp.sem(np.sem)}
{npr.sem}
{  y.  x.love(x,y)}
{kim}
{sam}

e
< e, < e, t >>
e
e

t

to build a id152 for nl, we attach
valuation functions to grammar rules (semantic attachments).

these show how to compute the interpretation of the lhs of
the rule from the interpretations of its rhs components.

for example, vp.sem(np.sem) means apply the
interpretation of the vp to the interpretation of the np.

types have been added to ease understanding.

9 / 25

id152: example

s[  x.love(x, kim)(sam)       love(sam, kim)]

np[sam]

vp[  y .  x.love(x, y )(kim)         x.love(x, kim)]

npr[sam]

sam

tv[  y .  x.love(x, y )]

np[kim]

loves

npr[kim]

kim

10 / 25

id152: example

s[  x.love(x, kim)(sam)       love(sam, kim)]

np[sam]

vp[  y .  x.love(x, y )(kim)         x.love(x, kim)]

npr[sam]

sam

tv[  y .  x.love(x, y )]

np[kim]

loves

npr[kim]

kim

10 / 25

id152: example

s[  x.love(x, kim)(sam)       love(sam, kim)]

np[sam]

vp[  y .  x.love(x, y )(kim)         x.love(x, kim)]

npr[sam]

sam

tv[  y .  x.love(x, y )]

np[kim]

loves

npr[kim]

kim

10 / 25

id152: example

s[  x.love(x, kim)(sam)       love(sam, kim)]

np[sam]

vp[  y .  x.love(x, y )(kim)         x.love(x, kim)]

npr[sam]

sam

tv[  y .  x.love(x, y )]

np[kim]

loves

npr[kim]

kim

10 / 25

id152: example

s[  x.love(x, kim)(sam)       love(sam, kim)]

np[sam]

vp[  y .  x.love(x, y )(kim)         x.love(x, kim)]

npr[sam]

sam

tv[  y .  x.love(x, y )]

np[kim]

loves

npr[kim]

kim

10 / 25

id152: example

s[  x.love(x, kim)(sam)       love(sam, kim)]

np[sam]

vp[  y .  x.love(x, y )(kim)         x.love(x, kim)]

npr[sam]

sam

tv[  y .  x.love(x, y )]

np[kim]

loves

npr[kim]

kim

10 / 25

a minor variation

the following alternative semantics assigns the same overall
meaning to sentences. only the treatment of the arguments of
   love    is di   erent.

grammar i
s     np vp
vp     tv np {  x.tv.sem(x)(np.sem)} < e, t >
np     npr
tv     loves
npr     kim
npr     sam

{vp.sem(np.sem)}
{npr.sem}
{  x.  y.love(x,y)}
{kim}
{sam}

e
< e, < e, t >>
e
e

t

11 / 25

id152, continued

what about the interpretation of an np other than a proper
name? the fopl interpretation should often contain an
existential (   ) or a universal (   ) quanti   er:

sam has access to a computer.
   x(computer (x)     have access to(sam, x))

every student has access to a computer.
   x(student(x)        y (computer (y )     have access to(x, y )))

can we build such interpretations up from their component
parts in the same way as with proper names?

12 / 25

a halfway stage.

grammar ii
s     npr vp
{ vp.sem(npr.sem) }
vp     tv a nom {   x.   y . nom.sem(y ) &
tv.sem(y )(x) }
nom     n
nom     a nom
npr     sam
tv     loves
n     woman
a     tall

{ n.sem }
< e, t >
{   x. nom.sem(x) & a.sem(x) } < e, t >
{ sam }
{   y .  x.love(x, y ) }
{   z.woman(z) }
{   z.tall(z) }

t
< e, t >

e
< e, < e, t >>
< e, t >
< e, t >

note we haven   t given a meaning here to a tall woman.

could take this to have the same meaning as tall woman.

this would be    ne for this example (also in assignment 2).
but what about every tall woman?

13 / 25

a halfway stage.

grammar ii
s     npr vp
{ vp.sem(npr.sem) }
vp     tv a nom {   x.   y . nom.sem(y ) &
tv.sem(y )(x) }
nom     n
nom     a nom
npr     sam
tv     loves
n     woman
a     tall

{ n.sem }
< e, t >
{   x. nom.sem(x) & a.sem(x) } < e, t >
{ sam }
{   y .  x.love(x, y ) }
{   z.woman(z) }
{   z.tall(z) }

t
< e, t >

e
< e, < e, t >>
< e, t >
< e, t >

note we haven   t given a meaning here to a tall woman.

could take this to have the same meaning as tall woman.

this would be    ne for this example (also in assignment 2).
but what about every tall woman?

13 / 25

a halfway stage.

grammar ii
s     npr vp
{ vp.sem(npr.sem) }
vp     tv a nom {   x.   y . nom.sem(y ) &
tv.sem(y )(x) }
nom     n
nom     a nom
npr     sam
tv     loves
n     woman
a     tall

{ n.sem }
< e, t >
{   x. nom.sem(x) & a.sem(x) } < e, t >
{ sam }
{   y .  x.love(x, y ) }
{   z.woman(z) }
{   z.tall(z) }

t
< e, t >

e
< e, < e, t >>
< e, t >
< e, t >

note we haven   t given a meaning here to a tall woman.

could take this to have the same meaning as tall woman.

this would be    ne for this example (also in assignment 2).
but what about every tall woman?

13 / 25

a halfway stage.

grammar ii
s     npr vp
{ vp.sem(npr.sem) }
vp     tv a nom {   x.   y . nom.sem(y ) &
tv.sem(y )(x) }
nom     n
nom     a nom
npr     sam
tv     loves
n     woman
a     tall

{ n.sem }
< e, t >
{   x. nom.sem(x) & a.sem(x) } < e, t >
{ sam }
{   y .  x.love(x, y ) }
{   z.woman(z) }
{   z.tall(z) }

t
< e, t >

e
< e, < e, t >>
< e, t >
< e, t >

note we haven   t given a meaning here to a tall woman.

could take this to have the same meaning as tall woman.

this would be    ne for this example (also in assignment 2).
but what about every tall woman?

13 / 25

computing semantics with grammar ii

before we add more, let   s use grammar ii to compute the
semantics of sam loves a tall woman.

loves
tall woman

loves a tall woman

tv
nom
     

vp

sam loves a tall woman

s

     

     

  yx. love(x, y )
  x. (  z.woman(z))(x) & (  z.tall(z))(x)
  x. woman(x) & tall(x)
  x.   y . (  x. woman(x) & tall(x))(y ) &
(  yx. love(x, y ))(y )(x)
  x.   y . (woman(y ) & tall(y )) &
love(x, y )
(  x.   y .        )(sam)
   y .woman(y ) & tall(y ) & love(sam, y )

14 / 25

computing semantics with grammar ii

before we add more, let   s use grammar ii to compute the
semantics of sam loves a tall woman.

loves
tall woman

loves a tall woman

tv
nom
     

vp

sam loves a tall woman

s

     

     

  yx. love(x, y )
  x. (  z.woman(z))(x) & (  z.tall(z))(x)
  x. woman(x) & tall(x)
  x.   y . (  x. woman(x) & tall(x))(y ) &
(  yx. love(x, y ))(y )(x)
  x.   y . (woman(y ) & tall(y )) &
love(x, y )
(  x.   y .        )(sam)
   y .woman(y ) & tall(y ) & love(sam, y )

14 / 25

computing semantics with grammar ii

before we add more, let   s use grammar ii to compute the
semantics of sam loves a tall woman.

loves
tall woman

loves a tall woman

tv
nom
     

vp

sam loves a tall woman

s

     

     

  yx. love(x, y )
  x. (  z.woman(z))(x) & (  z.tall(z))(x)
  x. woman(x) & tall(x)
  x.   y . (  x. woman(x) & tall(x))(y ) &
(  yx. love(x, y ))(y )(x)
  x.   y . (woman(y ) & tall(y )) &
love(x, y )
(  x.   y .        )(sam)
   y .woman(y ) & tall(y ) & love(sam, y )

14 / 25

computing semantics with grammar ii

before we add more, let   s use grammar ii to compute the
semantics of sam loves a tall woman.

loves
tall woman

loves a tall woman

tv
nom
     

vp

sam loves a tall woman

s

     

     

  yx. love(x, y )
  x. (  z.woman(z))(x) & (  z.tall(z))(x)
  x. woman(x) & tall(x)
  x.   y . (  x. woman(x) & tall(x))(y ) &
(  yx. love(x, y ))(y )(x)
  x.   y . (woman(y ) & tall(y )) &
love(x, y )
(  x.   y .        )(sam)
   y .woman(y ) & tall(y ) & love(sam, y )

14 / 25

computing semantics with grammar ii

before we add more, let   s use grammar ii to compute the
semantics of sam loves a tall woman.

loves
tall woman

loves a tall woman

tv
nom
     

vp

sam loves a tall woman

s

     

     

  yx. love(x, y )
  x. (  z.woman(z))(x) & (  z.tall(z))(x)
  x. woman(x) & tall(x)
  x.   y . (  x. woman(x) & tall(x))(y ) &
(  yx. love(x, y ))(y )(x)
  x.   y . (woman(y ) & tall(y )) &
love(x, y )
(  x.   y .        )(sam)
   y .woman(y ) & tall(y ) & love(sam, y )

14 / 25

computing semantics with grammar ii

before we add more, let   s use grammar ii to compute the
semantics of sam loves a tall woman.

loves
tall woman

loves a tall woman

tv
nom
     

vp

sam loves a tall woman

s

     

     

  yx. love(x, y )
  x. (  z.woman(z))(x) & (  z.tall(z))(x)
  x. woman(x) & tall(x)
  x.   y . (  x. woman(x) & tall(x))(y ) &
(  yx. love(x, y ))(y )(x)
  x.   y . (woman(y ) & tall(y )) &
love(x, y )
(  x.   y .        )(sam)
   y .woman(y ) & tall(y ) & love(sam, y )

14 / 25

computing semantics with grammar ii

before we add more, let   s use grammar ii to compute the
semantics of sam loves a tall woman.

loves
tall woman

loves a tall woman

tv
nom
     

vp

sam loves a tall woman

s

     

     

  yx. love(x, y )
  x. (  z.woman(z))(x) & (  z.tall(z))(x)
  x. woman(x) & tall(x)
  x.   y . (  x. woman(x) & tall(x))(y ) &
(  yx. love(x, y ))(y )(x)
  x.   y . (woman(y ) & tall(y )) &
love(x, y )
(  x.   y .        )(sam)
   y .woman(y ) & tall(y ) & love(sam, y )

14 / 25

type raising

we   ve given sam, kim the semantic type e, and woman the
semantic type < e, t >.

but what type should some woman or every woman have?

idea: since we wish to combine an np.sem with a vp.sem (of
type < e, t >) to get an s.sem (of type t), let   s try again
with np.sem having type << e, t >, t >.

sam
(type raising)
every woman   p.   x. woman(x)     p(x)

  p. p(sam)

the appropriate semantic attachment for np vp is then
s     np vp {np.sem (vp.sem)}

15 / 25

semantics of determiners

using this approach, we can also derive the semantics of
   every woman    from that of    every    and    woman   .

we   ve seen that    woman    has semantic type < e, t >, and
   every woman    has semantic type << e, t >, t >.

so the interpretation of    every    should have type
<< e, t >, << e, t >, t >>. similarly for other determiners
(e.g. every, a, no, not every).

woman
every
a
np     det n { det.sem (n.sem) }

  x. woman(x)
  q.  p.   x.q(x)     p(x)
  q.  p.   x.q(x)     p(x)

< e, t >

<< e, t >, << e, t >, t >>

<< e, t >, << e, t >, t >>

<< e, t >, t >

we can now compute the semantics of    every woman    and check
that it   -reduces to   p.   x. woman(x)     p(x).

16 / 25

example

the semantics of    every woman   :

17 / 25

more on type raising

the natural rule for vp is now vp     tv np.
since the semantic type for np has now been raised to
<< e, t >, t >, and we want vp to have semantic type
< e, t >, what should the semantic type for tv be?

18 / 25

more on type raising

the natural rule for vp is now vp     tv np.
since the semantic type for np has now been raised to
<< e, t >, t >, and we want vp to have semantic type
< e, t >, what should the semantic type for tv be?

it had better be <<< e, t >, t >, < e, t >>.
(a 3rd order function type!)

tv     loves
vp     tv np {tv.sem(np.sem)}

{  r <<e,t>,t>.  z e. r(  w e. loves(z, w ))}

18 / 25

to summarize where we   ve got to:

grammar iii
s     np vp
vp     tv np
np     sam
np     det nom { det.sem(nom.sem) }
det     a
det     every
nom     n
nom     a nom
tv     loves
n     woman
a     tall

{ np.sem(vp.sem) }
t
{ tv.sem(np.sem) }
< e, t >
{   p.p(sam) }
<< e, t >, t >
<< e, t >, t >
{   q.  p.   x.q(x)     p(x) }
<< e, t >, << e, t >, t >>>
{   q.  p.   x.q(x)     p(x) }
<< e, t >, << e, t >, t >>>
{ n.sem }
< e, t >
{   x. nom.sem(x) & a.sem(x) } < e, t >
{ {  r.  z. r(  w . loves(z, w ))}
{   z.woman(z) }
{   z.tall(z) }

<<< e, t >, t >, < e, t >>
< e, t >
< e, t >

can add similar entries for    student   ,    computer   ,    has access to   .

19 / 25

example

the semantics for    every student has access to a computer   .

20 / 25

example

the semantics for    every student has access to a computer   .
(  q.  p.   x.q(x)     p(x))(  x.student(x))
        p.   x. student(x)     p(x)

every student

20 / 25

example

the semantics for    every student has access to a computer   .
(  q.  p.   x.q(x)     p(x))(  x.student(x))
        p.   x. student(x)     p(x)

every student

a computer

(  q.  p.   x.q(x)     p(x))(  x.computer (x))
        p.   x. computer (x)     p(x)

20 / 25

example

the semantics for    every student has access to a computer   .
(  q.  p.   x.q(x)     p(x))(  x.student(x))
        p.   x. student(x)     p(x)

every student

a computer

(  q.  p.   x.q(x)     p(x))(  x.computer (x))
        p.   x. computer (x)     p(x)

h.a.t. a computer

                   
        z.   x. computer (x)     h a t(z, x)

20 / 25

example

the semantics for    every student has access to a computer   .
(  q.  p.   x.q(x)     p(x))(  x.student(x))
        p.   x. student(x)     p(x)

every student

a computer

(  q.  p.   x.q(x)     p(x))(  x.computer (x))
        p.   x. computer (x)     p(x)

h.a.t. a computer

                   
        z.   x. computer (x)     h a t(z, x)

(whole sentence)                   

         x. student(x)        y . computer (y )     h a t(x, y )

20 / 25

example

the semantics for    every student has access to a computer   .
(  q.  p.   x.q(x)     p(x))(  x.student(x))
        p.   x. student(x)     p(x)

every student

a computer

(  q.  p.   x.q(x)     p(x))(  x.computer (x))
        p.   x. computer (x)     p(x)

h.a.t. a computer

                   
        z.   x. computer (x)     h a t(z, x)

(whole sentence)                   

         x. student(x)        y . computer (y )     h a t(x, y )

note: in the last   -step, we   ve renamed    x    to    y    to avoid capture.

20 / 25

question

suppose that the predicate l(x, y) means x loves y. which of the
following is not a possible representation of the meaning of
everybody loves somebody ?

1    x.   y .l(x, y )

(  p.   x.   y .p(x, y ))(  x.  y .l(x, y ))
(  p.   x.   y .p(x, y ))(  x.  y .l(y , x))
(  p.   x.   y .p(y , x))(  x.  y .l(y , x))

2

3

4

21 / 25

semantic ambiguity

whilst every student has access to a computer is neither
syntactically nor lexically ambiguous, it has two di   erent
interpretations because of its determiners:

every: interpreted as     (universal quanti   er)
a: interpreted as     (existential quanti   er)

meaning 1

possibly a di   erent computer per student
   x(student(x)        y (computer (y )     have access to(x, y )))

meaning 2

possibly the same computer for all students
   y (computer (y )        x(student(x)     have access to(x, y )))

22 / 25

scope

the ambiguity arises because every and a each has its own scope:

interpretation 1:
interpretation 2:

every has scope over a
a has scope over every

scope is not uniquely determined either by left-to-right order,
or by position in the parse tree.

we therefore need other mechanisms to ensure that the
ambiguity is re   ected by there being multiple interpretations
assigned to s.

23 / 25

scope ambiguity, continued

the number of interpretations grows exponentially with the
number of scope operators:

every student at some university has access to a laptop.

1. not necessarily same laptop, not necessarily same university
   x(stud(x)        y (univ (y )     at(x, y ))        z(laptop(z)     have access(x, z)))
2. same laptop, not necessarily same university
   z(laptop(z)        x(stud(x)        y (univ (y )     at(x, y ))     have access(x, z)))
3. not necessarily same laptop, same university
   y (univ (y )        x((stud(x)     at(x, y ))        z(laptop(z)     have access(x, z))))
4. same university, same laptop
   y (univ (y )        z(laptop(z)        x((stud(x)     at(x, y ))     have access(x, z))))
5. same laptop, same university
   z(laptop(z)        y (univ (y )        x((stud(x)     at(x, y ))     have access(x, z))))
where 4 & 5 are equivalent

every student at some university does not have access to a computer.
    18 interpretations

24 / 25

coping with scope: options

1 enumerate all interpretations. computationally

unattractive!

2 use an underspeci   ed representation that can be further
speci   ed to each of the multiple interpretations on demand.

sometimes the surrounding context will help us choose between
interpretations:

every student has access to a computer. it can be borrowed from the
ito. (    meaning 2)

25 / 25

summary

syntax guides semantic composition in a systematic way.

lambda expressions facilitate the construction of
compositional semantic interpretations.

logical forms can be constructed by attaching valuation
functions to grammar rules.

however, this approach is not adequate enough for quanti   ed
nps, as lfs are not always isomorphic with syntax.

we can elegantly handle scope by building an abstract
underspeci   ed representation and disambiguate on demand.

26 / 25

