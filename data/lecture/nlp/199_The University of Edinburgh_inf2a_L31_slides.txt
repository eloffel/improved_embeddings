universal turing machines
the halting problem
undecidable problems

undecidability

informatics 2a: lecture 31

john longley

school of informatics
university of edinburgh

jrl@inf.ed.ac.uk

27 november 2017

1 / 17

universal turing machines
the halting problem
undecidable problems

recap: turing machines

if |  |     2, any kind of       nite data    can be coded up as a string
in      , which can then be written onto a turing machine tape.
(e.g. natural numbers could be written in binary.)
according to the church-turing thesis (ctt), any
   mechanical computation    that can be performed on    nite
data can be performed in principle by a turing machine.
any decent programming language (and even micro-haskell!)
has the same computational power in principle as a turing
machine.

2 / 17

finitecontrol..........ab5$   3ca:read, write,move l/runiversal turing machines
the halting problem
undecidable problems

universal turing machines

consider any turing machine with input alphabet   .

such a machine t is itself speci   ed by a    nite amount of
information, so can in principle be    coded up    by a string t          .
(details don   t matter).

so one can imagine a universal turing machine u which:

takes as its input a coded description t of some tm t ,
along with an input string s, separated by a blank symbol.

simulates the behaviour of t on the input string s.
(n.b. a single step of t may require many steps of u.)

if t ever halts (i.e. enters    nal state), u will halt.
if t runs forever, u will run forever.

if we believe ctt, such a u must exist     but in any case, it   s
possible to construct one explicitly.

3 / 17

universal turing machines
the halting problem
undecidable problems

the concept of a general-purpose computer

alan turing   s discovery of the existence of a universal turing
machine (1936) was in some sense the fundamental insight that
gave us the general-purpose (programmable) computer.

in most areas of life, we have di   erent machines for di   erent jobs.
so it   s quite remarkable that a single physical machine can be
persuaded to perform as many di   erent tasks as a computer can
. . . just by feeding it with a cunning sequence of 0   s and 1   s!

4 / 17

universal turing machines
the halting problem
undecidable problems

the halting problem

the universal machine u in e   ect serves as a recognizer for the set

{t s | t halts on input s}

but is there also a machine v that recognizes the set
{t s | t doesn   t halt on input s} ?

if there were, then given any t and s, we could run u and v in
parallel, and we   d eventually get an answer to the question
   does t halt on input s?   

conversely, if there were a machine that answered this question,
we could construct a machine v with the above property.

theorem: there is no such turing machine v !
in other words, the halting problem is undecidable.

5 / 17

universal turing machines
the halting problem
undecidable problems

proof of undecidability

why is the halting problem undecidable?

suppose v existed. then we could easily make a turing machine
w that recognised the set l de   ned by:
l = {s           | the tm coded by s runs forever on the input s}

(w could construct the string s s, then run as v on it.)

now consider what w does when given the string w as input.
that is, the input to w is the string that encodes w itself.

w accepts w i    w runs forever on w (since w recognises l)

but w accepts w i    w halts on w (de   nition of acceptance)

contradiction!!! so v can   t exist after all!

6 / 17

universal turing machines
the halting problem
undecidable problems

precursor: russell   s paradox (1901)

de   ne r to be the set of all sets that don   t contain themselves:

r = {s | s (cid:54)    s}

does r contain itself, i.e. is r     r?

russell   s analogy: the village barber shaves exactly those men in
the village who don   t shave themselves. does the barber shave
himself, or not?

7 / 17

universal turing machines
the halting problem
undecidable problems

precursor: russell   s paradox (1901)

de   ne r to be the set of all sets that don   t contain themselves:

r = {s | s (cid:54)    s}

does r contain itself, i.e. is r     r?
conclusion: no such set r exists.

russell   s analogy: the village barber shaves exactly those men in
the village who don   t shave themselves. does the barber shave
himself, or not?

7 / 17

universal turing machines
the halting problem
undecidable problems

precursor: russell   s paradox (1901)

de   ne r to be the set of all sets that don   t contain themselves:

r = {s | s (cid:54)    s}

does r contain itself, i.e. is r     r?
conclusion: no such set r exists.

russell   s analogy: the village barber shaves exactly those men in
the village who don   t shave themselves. does the barber shave
himself, or not?

conclusion: no man exists in the village with the property proposed
by russell.

7 / 17

universal turing machines
the halting problem
undecidable problems

precursor: russell   s paradox (1901)

de   ne r to be the set of all sets that don   t contain themselves:

r = {s | s (cid:54)    s}

does r contain itself, i.e. is r     r?
conclusion: no such set r exists.

russell   s analogy: the village barber shaves exactly those men in
the village who don   t shave themselves. does the barber shave
himself, or not?

conclusion: no man exists in the village with the property proposed
by russell.

highly recommended reading: scooping the loop snooper by
geo   rey pullum. (a proof that the halting problem is undecidable,
written in verse in the style of dr. seuss).

7 / 17

universal turing machines
the halting problem
undecidable problems

decidable vs. semidecidable sets

in general, a set s (e.g.          ) is called decidable if there   s a
mechanical procedure which, given s          , will always return a
yes/no answer to the question    is s     s?   .
e.g. the set {s | s represents a prime number} is decidable.
we say s is semidecidable if there   s a mechanical procedure which
will return    yes    precisely when s     s (it isn   t obliged to return
anything if s (cid:54)    s).
semidecidable sets coincide with recursively enumerable (=type 0)
languages as de   ned in lectures 28   9.
the halting set {t s | t halts on input s} is an example a
semidecidable set that isn   t decidable. so there exist type 0
languages for which membership is undecidable.

8 / 17

universal turing machines
the halting problem
undecidable problems

separating type 0 and type 1

every type 1 (context-sensitive) language is decidable.
(the argument was outlined in lecture 29.)

as we have seen, the halting set

{t s | t halts on input s}

is an undecidable type 0 language.

so the halting set is an example of a type 0 language that is not a
type 1 language.

(last lecture, we saw another example: the set of provable
sentences of fopl. this too is an undecidable type 0 language.)

9 / 17

universal turing machines
the halting problem
undecidable problems

undecidable problems in mathematics

the existence of    mechanically unsolvable    mathematical problems
was in itself a major breakthrough in mathematical logic: until
about 1930, some people (the mathematician david hilbert in
particular) hoped there might be a single killer algorithm that
could solve all mathematical problems!

once we have one example of an unsolvable problem (the halting
problem), we can use it to obtain others     typically by showing
   the halting problem can be reduced to problem x.   
(if we had a mechanical procedure for solving x, we could use it to
solve the halting problem.)

10 / 17

universal turing machines
the halting problem
undecidable problems

example: provability of theorems

let m be some reasonable (consistent) formal logical system for
proving mathematical theorems (something like peano arithmetic
or zermelo-fraenkel set theory).

theorem: the set of theorems provable in m is semidecidable (and
hence is a type 0 language), but not decidable.

proof: any reasonable system m will be able to prove all true statements
of the form    t halts on input s   . so if we could decide m-provability, we
could solve the halting problem.

corollary (g  odel): however strong m is, there are mathematical
statements p such that neither p nor   p is provable in m.
proof: otherwise, given any p we could search through all possible
m-proofs until either a proof of p or of   p showed up. this would give
us an algorithm for deciding m-provability.

11 / 17

universal turing machines
the halting problem
undecidable problems

example: diophantine equations

suppose we   re given a set of simultaneous equations involving
polynomials in several variables with integer coe   cients. e.g.

3xy + 4z + 5wx 2 = 27
x 2 + y 3     9z = 4
w 5     z 4 = 31

x 2 + y 2 + z 2     w 2 = 2536427

hilbert   s 10th problem (1900): is there a mechanical procedure for
determining whether a set of polynomial equations has an integer
solution?

matiyasevich   s theorem (1970): it is undecidable whether a given
set of polynomial equations has an integer solution.

(by contrast, it   s decidable whether there   s a solution in real
numbers!)

12 / 17

universal turing machines
the halting problem
undecidable problems

another example: post correspondence problem

given two    nite sets s, t of strings, decide whether or not there   s
a string that can be formed both as a concatenation of strings in s
and as a concatenation of strings in t .

e.g. suppose

s = {a, ab, bba} ,

t = {baa, aa, bb}

then the answer is yes, because:

bba.ab.bba.a = bbaabbbaa = bb.aa.bb.baa

in general, however, it   s undecidable whether such a string exists
for a given s, t .

there are also examples from formal language theory itself.
e.g. given two context-free grammars g1, g2, it   s undecidable
whether l(g1)     l(g2) is context-free.

13 / 17

universal turing machines
the halting problem
undecidable problems

bonus topic: higher-order computability

in one sense, all reasonable prog. langs are equally powerful. e.g.
they can compute the same class of functions z (cid:42) z. (in
micro-haskell, these have type integer->integer).
any language can be implemented in any other. (e.g. you   ve
implemented mh in java.)

indeed, there   s only one reasonable mathematical class of
   computable    functions z (cid:42) z (the turing-computable functions).
but what about higher-order functions, e.g. of type
((integer->integer)->integer)->integer ?

what does it mean for a function of this kind to be
   computable    ?
are all reasonable languages    equally powerful    when it comes
to higher-order functions?

14 / 17

universal turing machines
the halting problem
undecidable problems

case study: iteration vs. recursion

many tasks that involve    looping    can be accomplished using either
iteration or recursion. e.g. to compute the factorial function:
fac(n) {

fac(n) {

int m = 1 ;
for i = 1 to n
m = m * i ;

if n == 0

return 1

else

return m

}
just a matter of style? or is there a deeper di   erence?

}

return fac(n-1) * n

consider the mh program:

g : (integer -> integer -> integer) -> integer -> integer
g f n = f n (g f (n+1))

(informally, g f 0 = f 0 (f 1 (f 2 (...))).)

theorem (berger 1999, jl 2015). the 2nd order function g can   t
be computed by    iteration alone   : recursion is essential here.

15 / 17

universal turing machines
the halting problem
undecidable problems

recursions at higher types

that de   nition again:
g : (integer -> integer -> integer) -> integer -> integer
g f n = f n (g f (n+1))
the thing we   re de   ning recursively here is really g f.
so for g, or indeed for factorial, we only need    recursion at type
integer->integer   . is this all the recursion we ever need?

let   s write mhk for the sublanguage of mh where we only allow
recursions at types of order     k. so mh1     mh2                mh.
all of these languages are turing-complete, i.e. they yield the same
computable functions of type integer->integer. but they di   er
in the higher-order functions that they can compute:

theorem (jl 2015). for every k, there are higher-order functions
computable in mhk+1 but not in mhk .

16 / 17

universal turing machines
the halting problem
undecidable problems

that   s it folks!

that concludes the course syllabus.

tomorrow, shay and i will present a joint revision lecture, in which
we shall discuss:

the exam structure

examinable material

pointers to ug3 (and upwards) informatics courses that
continue from this one

17 / 17

