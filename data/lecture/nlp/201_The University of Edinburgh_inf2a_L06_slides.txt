string and pattern matching

applications to string and pattern matching

informatics 2a: lecture 6

john longley

school of informatics
university of edinburgh

jrl@inf.ed.ac.uk

29 september 2017

1 / 17

string and pattern matching

recap of lecture 5

regular languages are closed under the operations of
concatenation and kleene star.

this is proved using  -nfas, which can be easily converted to
ordinary nfas.

id157 provide a textual representation of regular
languages.

kleene   s theorem: id157 de   ne exactly the
regular languages.

we haven   t proved the di   cult half of the theorem formally,
but equation solving using kleene algebra and arden   s rule
gives the idea.

2 / 17

string and pattern matching

applications of regular language technology

in this lecture and the next, we   ll look at several practical
applications of the theory we   ve covered:

e   cient string searching

more general pattern searching

data validation, e.g. for xml documents

lexical analysis for computer languages (   rst stage of the
language processing pipeline)

automated veri   cation of safety and liveness properties for
complex interacting systems     typically via model checking.

further applications will be discussed in the natural language part
of the course.

3 / 17

string and pattern matching

grep and its friends
how they work

string and pattern matching with grep tools

important practical problem: search a large    le (or batch of    les)
for speci   c strings, or strings of a certain form.

most unix/linux-style systems since the    70s have provided a
bunch of utilities for this purpose, known as grep (global regular
expression print).

extremely useful and powerful in the hands of a practised user.
make serious use of the theory of regular languages.

typical uses:

4 / 17

grep "[0   9]*\.[0   9][0   9]" document.txt egrep "(^|[^a   za   z])[tt]he([^a   za   z]|$)" document.txt       searches for prices in pounds and pence       searches for occurrences of the word "the"string and pattern matching

grep and its friends
how they work

grep, egrep, fgrep

there are three related search commands, of increasing generality
and correspondingly decreasing speed:

fgrep searches for one or more    xed strings, using an e   cient
string matching algorithm.

grep searches for strings matching a certain pattern (a simple
kind of regular expression).

egrep searches for strings matching an extended pattern
(these give the full power of id157).

all three of these make use of the ideas we   ve been studying.

5 / 17

string and pattern matching

grep and its friends
how they work

e   cient string matching

suppose we want to search for occurrences of a shortish string s in
a very long document d.

obvious method: for each position p within d, check whether
there   s an occurrence of s starting at p, by working through s one
character at a time until:

either there   s a character mismatch

or we reach the end of s (search successful).

(example on next slide.)

can we do better?

6 / 17

string and pattern matching

grep and its friends
how they work

naive string search: an example

suppose we   re searching for nano within a long document d
containing nanobananas.

n
n

a
a
x

n
o
n (cid:88)

n x
x

b

a

n

a

n

a

s

x

x

n x

n

a
x

n

a x
x

x

notice that several characters in d are visited more than once.

7 / 17

string and pattern matching

grep and its friends
how they work

better method: the knuth-morris-pratt algorithm

the following nfa clearly accepts all strings ending in nano:

so we can . . .

1 first convert this to an equivalent dfa m. (costs some

time   but worth it if s is short and d is very long.)

2 run d through m. (each character of d processed just once;

no bu   ering required.)

3 every time we enter an accepting state of m, signal a hit.

8 / 17

012any charnano34string and pattern matching

grep and its friends
how they work

the corresponding dfa

for nfas of this kind, the subset construction behaves nicely:
no state explosion. can even optimize the construction a bit
for this class of nfas.
useful in practice for documents with a lot of repetition.
e.g. imagine searching for www.inf.ed.ac.uk/inf2a/ in a
long list of web addresses, where most begin with www. and
many begin with www.inf.ed.ac.uk/

9 / 17

0nano010201304not nnot nannnot n,a,onot nnot n,anstring and pattern matching

grep and its friends
how they work

optional exercise

1 suppose now that the search string is nana. construct the

appropriate dfa in this case.

2 convince yourself that this will detect all occurrences of nana,

even overlapping ones!

10 / 17

string and pattern matching

grep and its friends
how they work

multiple strings

suppose now we want to    nd all occurrences of any of the strings
nano, micro, milli in d.

no problem! just do the same starting from the following nfa:

(the gain over the naive method is here readily apparent.)

to do more powerful searches, can use id157 . . .

11 / 17

anonany charmicromillistring and pattern matching

grep and its friends
how they work

machine syntax for id157

single character

a
[abc] choice of characters
[a-z] any character in ascii range
[  ss] any character except those given
.
  , $
*
?
+
|
(the last three are allowed by egrep, but not by plain grep.)

any single character
beginning, end of line
zero or more occurrences of preceding pattern
optional occurrence of preceding pattern
one or more occurrences of preceding pattern
choice between two patterns (   union   )

this kind of syntax (with further bells and whistles) is very widely
used. in perl/python (including nltk), patterns are delimited by
/.../ rather than "...".

12 / 17

string and pattern matching

grep and its friends
how they work

mathematical versus machine notation

we   ve now seen two notations for writing id157:

mathematical notation, e.g. (a + b)(a + b)   . this notation is
intended to have as few operations as possible, for
convenience in setting up the theory (e.g. kleene algebra).
machine notation (regex), e.g. (a|b)+. this has a more
generous set of operations, for convenience when writing
complicated id157.

the clashes between these are unfortunate, but we   re stuck with
them.

union of two languages is written using | in machine syntax,
and + in mathematical syntax.
in machine syntax, + is a unary operation representing
concatenation of one or more strings of a given form.
dot . means concatenation in the mathematical syntax, and
   any character    in the machine syntax.

13 / 17

string and pattern matching

grep and its friends
how they work

example

how suitable are the patterns below for specifying the form of
non-negative decimal integers?

1

2

3

4

[0-9]*

[0-9]+

0 | [1-9][0-9]*

0 | [1-9][0-9]?[0-9]?(,[0-9][0-9][0-9])*

14 / 17

string and pattern matching

grep and its friends
how they work

example

how suitable are the patterns below for specifying the form of
non-negative decimal integers?

1

2

3

4

[0-9]*

[0-9]+

0 | [1-9][0-9]*

0 | [1-9][0-9]?[0-9]?(,[0-9][0-9][0-9])*

answer: pattern 1 is bad, because it admits the empty string.
pattern 2 is    ne if we don   t mind leading zeros, e.g. 023.
pattern 3 is just right for non-neg integers without leading zeros.
pattern 4 is good for a common way of writing integers within
english text, e.g. 1,024 or 578,000,000,000.

14 / 17

string and pattern matching

grep and its friends
how they work

how egrep (typically) works

egrep will print all lines containing a match for the given pattern.
how can it do this e   ciently?

every machine regexp is clearly equivalent to a mathematical
one.

so we can convert a pattern into a (smallish) nfa.

(more precisely, the number of states of the nfa grows
linearly in the length of the regular expression.)

we then run the nfa , using the just-in-time simulation
discussed in lecture 4.

we don   t determinize the nfa to construct the full dfa,
because of the potential exponential state-space blow-up.

grep can be a bit more e   cient, exploiting the fact that there   s
   less non-determinism    around in the absence of +, ?,|.

15 / 17

string and pattern matching

grep and its friends
how they work

id157 in data validation

regexp   s are used not just in searching, but also in checking
whether data is of the expected form:

within xml documents, can enforce constraints on parts of
the data:

<xs:simpletype name="productnumbertype">

<xs:restriction base="xs:string">

<xs:pattern value="\d{3}-[a-z]{2}|\d7"/>

</xs:restriction>

</xs:simpletype>
(example from p. walmsley, de   nitive xml schema, 2012.)

for text    elds in web forms, check that the input text has the
correct form. (see regexlib.com for hundreds of regexp   s for
validating email addresses, urls, uk mobile phone numbers,
postcodes, . . . )

16 / 17

string and pattern matching

grep and its friends
how they work

challenge question

id157 and the pattern language have operations that
correspond to the closure of regular languages under union,
concatenation and kleene star.

however, we have seen other closure properties of regular
languages too: closure under intersection and complement.

question: why does the (basic) regex language not include
operations for intersection and complement?

17 / 17

string and pattern matching

grep and its friends
how they work

challenge question

id157 and the pattern language have operations that
correspond to the closure of regular languages under union,
concatenation and kleene star.

however, we have seen other closure properties of regular
languages too: closure under intersection and complement.

question: why does the (basic) regex language not include
operations for intersection and complement?

answer: if we included these, even a smallish regex could lead to a state
space explosion. (complement especially bad: need to determinize    rst!)
the design of the regex language protects the unwary user from such
nasty surprises.

17 / 17

string and pattern matching

grep and its friends
how they work

challenge question

id157 and the pattern language have operations that
correspond to the closure of regular languages under union,
concatenation and kleene star.

however, we have seen other closure properties of regular
languages too: closure under intersection and complement.

question: why does the (basic) regex language not include
operations for intersection and complement?

answer: if we included these, even a smallish regex could lead to a state
space explosion. (complement especially bad: need to determinize    rst!)
the design of the regex language protects the unwary user from such
nasty surprises.

warning: some modern versions of so-called    regex    (e.g. in perl)
include wild constructs that actually go way beyond the power of regular
languages (back-references, backtracking, lookahead, recursive regexes)
. . . and which de   nitely don   t protect the unwary user from nastiness!

17 / 17

