closure properties of regular languages
dfa minimization

constructions on finite automata

informatics 2a: lecture 4

john longley

school of informatics
university of edinburgh

jrl@inf.ed.ac.uk

25 september 2017

1 / 31

closure properties of regular languages
dfa minimization

1 closure properties of regular languages

union
intersection
complement

2 dfa minimization

the problem
an algorithm for minimization

2 / 31

closure properties of regular languages
dfa minimization

recap of lecture 3

a language is a set of strings over an alphabet   .

a language is called regular if it is recognised by some nfa.

dfas are an important subclass of nfas.

an nfa with n states can be determinized to an equivalent
dfa with 2n states, using the subset construction.

therefore the regular languages are exactly the languages
recognised by dfas.

3 / 31

closure properties of regular languages
dfa minimization

union
intersection
complement

union of regular languages

consider the following little theorem:

if l1 and l2 are regular languages over   , so is l1     l2.

this is dead easy to prove using nfas.

suppose n1 = (q1,    1, s1, f1) is an nfa for l1, and
n2 = (q2,    2, s2, f2) is an nfa for l2.
we may assume q1     q2 =     (just relabel states if not).
now consider the nfa

(q1     q2,    1        2, s1     s2, f1     f2)

this is just n1 and n2    side by side   . clearly, this nfa recognizes
precisely l1     l2.
number of states = |q1| + |q2|     no state explosion!

4 / 31

closure properties of regular languages
dfa minimization

union
intersection
complement

intersection of regular languages

if l1 and l2 are regular languages over   , so is l1     l2.

suppose n1 = (q1,    1, s1, f1) is an nfa for l1, and
n2 = (q2,    2, s2, f2) is an nfa for l2.
we de   ne a product nfa (q(cid:48),    (cid:48), s(cid:48), f (cid:48)) by:

(q, r ) a    (q(cid:48), r(cid:48))        (cid:48)        q a    q(cid:48)        1 and r a    r(cid:48)        2

q(cid:48) = q1    q2

s(cid:48) = s1    s2
f (cid:48) = f1    f2

number of states = |q1|    |q2|     a bit more costly than union!

if n1 and n2 are dfas then the product automaton is a dfa too.

5 / 31

closure properties of regular languages
dfa minimization

union
intersection
complement

example of language intersection

6 / 31

closure properties of regular languages
dfa minimization

union
intersection
complement

complement of a regular language

( recall the set-di   erence operation,

a     b = {x     a | x /    b}

where a, b are sets. )

if l is a regular language over   , then so is           l.

suppose n = (q,   , s, f ) is a dfa for l.
then (q,   , s, q     f ) is a dfa for           l. (we simply swap the
accepting and rejecting states in n.)
number of states = |q|     no blow up at all, but we are required
to start with a dfa. this in itself has size implications.

the complement construction does not work if n is not
deterministic!

7 / 31

closure properties of regular languages
dfa minimization

union
intersection
complement

closure properties of regular languages

we   ve seen that if both l1 and l2 are regular languages, then
so are:

l1     l2
l1     l2
          l1

(union)
(intersection)
(complement)

we sometimes express this by saying that regular languages
are closed under the operations of union, intersection and
complementation. (   closed    used here in the sense of
   self-contained   .)

each closure property corresponds to an explicit construction
on    nite automata. sometimes this uses nfas (union),
sometimes dfas (complement), and sometimes the
construction works equally well for both nfas and dfas
(intersection).

8 / 31

closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

the minimization problem

determinization involves an exponential blow-up in the automaton.
is it sometimes possible to reduce the size of the resulting dfa?

many di   erent dfas can give rise to the same language, e.g.:

we shall see that there is always a unique smallest dfa for a given
regular language.

9 / 31

0110evenodd000011110,1q2q1q4q3q0closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

dfa minimization

we perform the following steps to    reduce    m above:

throw away unreachable states (in this case, q4).
squish together equivalent states, i.e. states q, q(cid:48) such that:
every string accepted starting from q is accepted starting from
q(cid:48), and vice versa. (in this case, q0 and q2 are equivalent, as
are q1 and q3.)

let   s write min(m) for the resulting reduced dfa. in this case,
min(m) is essentially the two-state machine on the previous slide.

10 / 31

000011110,1q2q1q4q3q0closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

properties of minimization

the minimization operation on dfas enjoys the following
properties which characterise the construction:

l(min(m)) = l(m).
if l(m(cid:48)) = l(m) and |m(cid:48)|     |min(m)| then m(cid:48)    = min(m).
here |m| is the number of states of the dfa m, and    = means the

two dfas are isomorphic: that is, identical apart from a possible
renaming of states.

two consequences of the above are:

min(m)    = min(m(cid:48)) if and only if l(m) = l(m(cid:48)).
min(min(m))    = min(m).

for a formal treatment of minimization, see kozen chapters 13   16.

11 / 31

closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

challenge question

consider the following dfa over {a, b}.

how many states does the minimized dfa have?

12 / 31

q1q3q2q0ababbbaaclosure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

solution

the minimized dfa has just 2 states:

the minimized dfa has been obtained by squishing together
states q0, q1 and q2. clearly q3 must be kept distinct.

note that the corresponding language consists of all strings ending
with b.

13 / 31

q3q012bbaaclosure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

minimization in practice

let   s look again at our de   nition of equivalent states:

states q, q(cid:48) such that: every string accepted starting from
q is accepted starting from q(cid:48), and vice versa.

this is    ne as an abstract mathematical de   nition of equivalence,
but it doesn   t seem to give us a way to compute which states are
equivalent: we   d have to    check    in   nitely many strings x          .
fortunately, there   s an actual algorithm for dfa minimization that
works in reasonable time.

this is useful in practice: we can specify our dfa in the most
convenient way without worrying about its size, then minimize to a
more    compact    dfa to be implemented e.g. in hardware.

14 / 31

closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

an algorithm for minimization

first eliminate any unreachable states (easy).

then create a table of all possible pairs of states (p, q), initially
unmarked. (e.g. a two-dimensional array of booleans, initially set
to false.) we mark pairs (p, q) as and when we discover that p and
q cannot be equivalent.

1 start by marking all pairs (p, q) where p     f and q (cid:54)    f , or

vice versa.

2 look for unmarked pairs (p, q) such that for some u       , the

pair (  (p, u),   (q, u)) is marked. then mark (p, q).

3 repeat step 2 until no such unmarked pairs remain.

if (p, q) is still unmarked, can collapse p, q to a single state.

15 / 31

closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

illustration of minimization algorithm

consider the following dfa over {a, b}.

16 / 31

closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

illustration of minimization algorithm

after eliminating unreachable states:

17 / 31

closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

illustration of minimization algorithm

we mark states to be kept distinct using a half matrix:

q0
q1
q2
q3

  
  
  
q0

  
  
q1

  
q2

q3

18 / 31

closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

illustration of minimization algorithm

first mark accepting/non-accepting pairs:

  
  

q0
q1
q2
q3 (cid:88) (cid:88) (cid:88)
q2

q0

q1

  

q3

19 / 31

closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

illustration of minimization algorithm

(q0,q1) is unmarked, qo a    q1, q1 a    q3, and (q1,q3) is marked.

  
  

q0
q1
q2
q3 (cid:88) (cid:88) (cid:88)
q2

q0

q1

  

q3

20 / 31

closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

illustration of minimization algorithm

so mark (q0,q1).

q0
q1 (cid:88)
  
q2
q3 (cid:88) (cid:88) (cid:88)
q2

q0

q1

  

q3

21 / 31

closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

illustration of minimization algorithm

(q0,q2) is unmarked, qo a    q1, q2 a    q3, and (q1,q3) is marked.

q0
q1 (cid:88)
  
q2
q3 (cid:88) (cid:88) (cid:88)
q2

q0

q1

  

q3

22 / 31

closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

illustration of minimization algorithm

so mark (q0,q2).

q0
q1 (cid:88)
q2 (cid:88)   
q3 (cid:88) (cid:88) (cid:88)
q2

q0

q1

q3

23 / 31

closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

illustration of minimization algorithm

the only remaining unmarked pair (q1,q2) stays unmarked.

q0
q1 (cid:88)
q2 (cid:88)   
q3 (cid:88) (cid:88) (cid:88)
q2

q0

q1

q3

24 / 31

closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

illustration of minimization algorithm

so obtain minimized dfa by collapsing q1, q2 to a single state.

25 / 31

closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

why does this algorithm work?

let   s say a string s separates states p, q if s takes us from p to an
accepting state and from q to a rejecting state, or vice versa.
such an s is a reason for not merging p, q into a single state.
we mark (p, q) when we    nd that there   s a string separating p, q:

if p     f and q (cid:54)    f , or vice versa, then   separates p, q.
suppose we mark (p, q) because we   ve found a previously marked
pair (p(cid:48), q(cid:48)) where p a    p(cid:48) and q a    q(cid:48) for some a.
if s(cid:48) is a separating string for p(cid:48), q(cid:48), then as(cid:48) separates p, q.

we stop when there are no more pairs we can mark.
if (p, q) remains unmarked, why are p, q equivalent?

if s = a1 . . . an were a string separating p, q, we   d have

p = p0
q = q0

a1    p1
a1    q1

a2           pn   1
a2           qn   1

an    pn ,
an    qn

with just one of pn, qn accepting. so we   d have marked (pn, qn) in
round 0, (pn   1, qn   1) by round 1, . . . and (p, q) by round n.

26 / 31

closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

alternative: brzozowski   s minimization algorithm

there   s a surprising alternative algorithm for minimizing a dfa
m = (q,   , s, f ) for a language l. assume no unreachable states.

reverse the machine m:    ip all the arrows, make f the set of
start states, and make s the only accepting state.
this gives an nfa n (not typically a dfa) which accepts
lrev = {rev (s) | s     l}.
apply the subset construction to n, omitting unreachable
states, to get a dfa p.
it turns out that p is minimal for lrev (clever)!
now apply the same two steps again, starting from p.
the result is a minimal dfa for (lrev )rev = l.

27 / 31

closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

comparing brzozowski and marking algorithms

both algorithms result in the same minimal dfa for a given
dfa m (recall that there   s a unique minimal dfa up to
isomorphism.)
in the worst case, brzozowski   s algorithm can take time o(2n)
for a dfa with n states. the marking algorithm, as presented,
runs within time o(kn4), where k = |  |. (can be improved
further.)

there are some practical cases where brzozowski does better.

marking algorithm is probably easier to understand, and
illustrates a common pattern (more examples later in course).

28 / 31

closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

improving determinization

now we have a minimization algorithm, the following improved
determinization procedure is possible.

to determinize an nfa m with n states:

1 perform the subset construction on m to produce an

equivalent dfa n with 2n states.

2 perform the minimization algorithm on n to produce a dfa

min(n) with     2n states.

using this method we are guaranteed to produce the smallest
possible dfa equivalent to m.

in many cases this avoids the exponential state-space blow-up.

in some cases, however, an exponential blow-up is unavoidable.

29 / 31

closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

loose end from last lecture

consider last lecture   s example nfa over {0, 1}:

what is the number of states of the smallest dfa that recognises
the same language?

30 / 31

q0q1q4q5q2q30,110,10,10,10,10,10,10,1closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

loose end from last lecture

consider last lecture   s example nfa over {0, 1}:

what is the number of states of the smallest dfa that recognises
the same language?

answer: the smallest dfa has 32 states.

30 / 31

q0q1q4q5q2q30,110,10,10,10,10,10,10,1closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

loose end from last lecture

consider last lecture   s example nfa over {0, 1}:

what is the number of states of the smallest dfa that recognises
the same language?

answer: the smallest dfa has 32 states.

more generally, the smallest dfa for the language:

{x           | the n-th symbol from the end of x is 1}

has 2n states. whereas, there is an nfa with n + 1 states.

30 / 31

q0q1q4q5q2q30,110,10,10,10,10,10,10,1closure properties of regular languages
dfa minimization

the problem
an algorithm for minimization

reading

relevant reading:

closure properties of regular languages: kozen chapter 4.

minimization: kozen chapters 13   14.

next time:

id157 and kleene   s theorem.
(kozen chapters 7   9.)

31 / 31

