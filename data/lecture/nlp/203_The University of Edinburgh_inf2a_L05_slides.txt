more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

id157 and kleene   s theorem

informatics 2a: lecture 5

john longley

school of informatics
university of edinburgh

jrl@inf.ed.ac.uk

26 september 2017

1 / 21

more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

1 more closure properties of regular languages

operations on languages
 -nfas
closure under concatenation and kleene star

2 id157

id157
from id157 to regular languages

3 kleene   s theorem and kleene algebra

kleene   s theorem
kleene algebra
from dfas to id157

2 / 21

more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

operations on languages
 -nfas
closure under concatenation and kleene star

concatenation

we write l1.l2 for the concatenation of languages l1 and l2,
de   ned by:

l1.l2 = {xy | x     l1, y     l2}

for example, if l1 = {aaa} and l2 = {b, c} then l1.l2 is the
language {aaab, aaac}.

later we will prove the following closure property.

if l1 and l2 are regular languages then so is l1.l2.

3 / 21

more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

operations on languages
 -nfas
closure under concatenation and kleene star

kleene star

we write l    for the kleene star of the language l, de   ned by:

l    = { }     l     l.l     l.l.l     . . .

for example, if l3 = {aaa, b} then l   
bbbbb, baaaaaabbaaa, etc.
more precisely, l   
letter a always appears in sequences of length some multiple of 3

3 contains all strings over {a, b} in which the

3 contains strings like aaaaaa,

later we will prove the following closure property.

if l is a regular language then so is l   .

4 / 21

more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

operations on languages
 -nfas
closure under concatenation and kleene star

exercise

consider the language over the alphabet {a, b, c}

l = {x | x starts with a and ends with c}

which of the following strings are valid for the language l.l ?

1 abcabc

2 acacac

3 abcbcac

4 abcbacbc

5 / 21

more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

operations on languages
 -nfas
closure under concatenation and kleene star

exercise

consider the language over the alphabet {a, b, c}

l = {x | x starts with a and ends with c}

which of the following strings are valid for the language l.l ?

1 abcabc

2 acacac

3 abcbcac

4 abcbacbc

answer: 1,2,3 are valid, but 4 isn   t. (to split the string into two
l-strings, we   d need c followed by a.)

5 / 21

more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

operations on languages
 -nfas
closure under concatenation and kleene star

another exercise

consider the (same) language over the alphabet {a, b, c}

l = {x | x starts with a and ends with c}

which of the following strings are valid for the language l    ?

1  

2 acaca

3 abcbc

4 acacacacac

6 / 21

more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

operations on languages
 -nfas
closure under concatenation and kleene star

another exercise

consider the (same) language over the alphabet {a, b, c}

l = {x | x starts with a and ends with c}

which of the following strings are valid for the language l    ?

1  

2 acaca

3 abcbc

4 acacacacac

answer: 1,3,4 are valid, but not 2. (in this particular case, it so
happens that l    = l + { }, but this won   t be true in general.)

6 / 21

more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

operations on languages
 -nfas
closure under concatenation and kleene star

nfas with  -transitions

we can vary the de   nition of nfa by also allowing transitions
labelled with the special symbol   (not a symbol in   ).

the automaton may (but doesn   t have to) perform a spontaneous
 -transition at any time, without reading an input symbol.

this is quite convenient: for instance, we can turn any nfa into an
 -nfa with just one start state and one accepting state:

(add  -transitions from new start state to each state in s, and
from each state in f to new accepting state.)

7 / 21

            . . . . . . . . . . . . . . .. . . . .more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

operations on languages
 -nfas
closure under concatenation and kleene star

equivalence to ordinary nfas

allowing  -transitions is just a convenience: it doesn   t
fundamentally change the power of nfas.

if n = (q,    , s, f ) is an  -nfa, we can convert n to an ordinary
nfa with the same associated language, by simply    expanding       
and s to allow for silent  -transitions.

to achieve this, perform the following steps on n.

     q(cid:48)(cid:48), add a new transition q a    q(cid:48)(cid:48).

for every pair of transitions q a    q(cid:48) (where a       ) and
q(cid:48)
for every transition q      q(cid:48), where q is a start state, make q(cid:48)
a start state too.

repeat the two steps above until no further new transitions or new
start states can be added.

finally, remove all  -transitions from the  -nfa resulting from the
above process. this produces the desired nfa.

8 / 21

more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

operations on languages
 -nfas
closure under concatenation and kleene star

closure under concatenation

we use  -nfas to show, as promised, that regular languages are
closed under the concatenation operation:

l1.l2 = {xy | x     l1, y     l2}

if l1, l2 are any regular languages, choose  -nfas n1, n2 that
de   ne them. as noted earlier, we can pick n1 and n2 to have just
one start state and one accepting state.

now hook up n1 and n2 like this:

clearly, this nfa corresponds to the language l1.l2.

9 / 21

n1n2  more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

operations on languages
 -nfas
closure under concatenation and kleene star

closure under kleene star

similarly, we can now show that regular languages are closed under
the kleene star operation:

l    = { }     l     l.l     l.l.l     . . .

for suppose l is represented by an  -nfa n with one start state
and one accepting state. consider the following  -nfa:

clearly, this  -nfa corresponds to the language l   .

10 / 21

 n    more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

id157
from id157 to regular languages

id157

we   ve been looking at ways of specifying regular languages via
machines (often presented as pictures). but it   s very useful for
applications to have more textual ways of de   ning languages.

a regular expression is a written mathematical expression that
de   nes a language over a given alphabet   .

the basic id157 are

   

 

a (for a       )

from these, more complicated id157 can be built
up by (repeatedly) applying the two binary operations +, .
and the unary operation     . example: (a.b +  )    + a

we use brackets to indicate precedence. in the absence of brackets,
    binds more tightly than ., which itself binds more tightly than +.

so a + b.a    means

a + (b.(a   ))

also the dot is often omitted: ab means a.b

11 / 21

more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

id157
from id157 to regular languages

how do id157 de   ne languages?

a regular expression is itself just a written expression. however,
every regular expression    over    can be seen as de   ning an actual
language l(  )           in the following way.

l(   ) =    , l( ) = { }, l(a) = {a}.
l(   +   ) = l(  )     l(  )
l(  .  ) = l(  ) .l(  )
l(     ) = l(  )   

example: a + ba    de   nes the language {a, b, ba, baa, baaa, . . .}.
the languages de   ned by    ,  , a are obviously regular.
what   s more, we   ve seen that regular languages are closed under
union, concatenation and kleene star.

this means every regular expression de   nes a regular language.
(formal proof by induction on the size of the regular expression.)

12 / 21

more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

id157
from id157 to regular languages

exercises

consider (again) the language

{x     {0, 1}    | x contains an even number of 0   s}

which of the following id157 de   ne the above
language?

1

2

(1   01   01   )   
(1   01   0)   1   
3 1   (01   0)   1   
(1 + 01   0)   

4

13 / 21

more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

id157
from id157 to regular languages

exercises

consider (again) the language

{x     {0, 1}    | x contains an even number of 0   s}

which of the following id157 de   ne the above
language?

1

2

(1   01   01   )   
(1   01   0)   1   
3 1   (01   0)   1   
(1 + 01   0)   

4

answer: 2 and 4 de   ne the required language. 1 doesn   t: e.g. 11
doesn   t match the expression. 3 doesn   t: e.g. 00100 doesn   t match
the expression.

13 / 21

more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

kleene   s theorem
kleene algebra
from dfas to id157

kleene   s theorem

we   ve seen that every regular expression de   nes a regular language.

remarkably, the converse is also true: every regular language can
be de   ned by a regular expression.

the equivalence between regular languages and expressions is:

kleene   s theorem

dfas and id157 give rise to exactly the
same class of languages (the regular languages).

(for proof, see kozen, lecture 9.)
as we   ve already seen, nfas (with or without  -transitions) also
give rise to this class of languages.

so the evidence is mounting that the class of regular languages is
mathematically a very natural and well-behaved one.

14 / 21

more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

kleene   s theorem
kleene algebra
from dfas to id157

kleene algebra

id157 give a textual way of specifying regular
languages. this is useful e.g. for communicating regular languages
to a computer.

another bene   t: id157 can be manipulated using
algebraic laws (kleene algebra). for example:

   + (   +   ) = (   +   ) +   

   +     =   
  (    ) = (    )  

  (   +   ) =      +     
      =       =    

   +    =    +   
   +    =   

    =     =   
(   +   )   =      +     
  +         =   +         =      

often these can be used to simplify id157 down to
more pleasant ones.

15 / 21

more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

kleene   s theorem
kleene algebra
from dfas to id157

other reasoning principles

let   s write           to mean l(  )     l(  ) (or equivalently
   +    =   ). then

     +                             
   +                               

arden   s rule: given an equation of the form x =   x +   , its
smallest solution is x =        .
what   s more, if   (cid:54)    l(  ), this is the only solution.

beautiful fact: the rules on this slide and the last form a complete
set of reasoning principles, in the sense that if l(  ) = l(  ), then
      =       is provable using these rules. (beyond scope of inf2a.)

16 / 21

more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

kleene   s theorem
kleene algebra
from dfas to id157

dfas to id157

we use an example to show how to convert a dfa to an
equivalent regular expression.

for each state r , let the variable xr stand for the set of strings
that take us from r to an accepting state. then we can write some
simultaneous equations:

xp = 1xp + 0xq +  
xq = 1xq + 0xp

17 / 21

0110pqmore closure properties of regular languages
id157
kleene   s theorem and kleene algebra

kleene   s theorem
kleene algebra
from dfas to id157

where do the equations come from?

consider:

xp = 1xp + 0xq +  

this asserts the following.

any string that takes us from p to an accepting state is:

a 1 followed by a string that takes us from p to an accepting
state; or

a 0 followed by a string that takes us from q to an accepting
state; or

the empty string.

note that the empty string is included because p is an accepting
state.

18 / 21

more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

kleene   s theorem
kleene algebra
from dfas to id157

solving the equations

we solve the equations by eliminating one variable at a time:

xq = 1   0xp

by arden   s rule

so xp = 1xp + 01   0xp +  
= (1 + 01   0)xp +  

so xp = (1 + 01   0)   

by arden   s rule

since the start state is p, the resulting regular expression for xp is
the one we are seeking. thus the language recognised by the
automaton is:

(1 + 01   0)   

the method we have illustrated here, in fact, works for arbitrary
nfas (without  -transitions).

19 / 21

more closure properties of regular languages
id157
kleene   s theorem and kleene algebra

kleene   s theorem
kleene algebra
from dfas to id157

theory of regular languages: overview

20 / 21

dfasnfas   nfas  reg exps    (lecture 3)minimization(lecture 4)equation solving(lecture 5 slide 19)subset construction(lecture 5 slide 12)closure propertiestransitions/start states(lecture 5 slide 8)expandingmore closure properties of regular languages
id157
kleene   s theorem and kleene algebra

kleene   s theorem
kleene algebra
from dfas to id157

reading

relevant reading:

id157: kozen chapters 7,8; j & m chapter 2.1.
(both texts actually discuss more general    patterns        see
next lecture.)

from id157 to nfas: kozen chapter 8; j & m
chapter 2.3.

kleene algebra: kozen chapter 9.

from nfas to id157: kozen chapter 9.

next two lectures: some applications of all this theory.

string and pattern matching

lexical analysis

model checking

21 / 21

