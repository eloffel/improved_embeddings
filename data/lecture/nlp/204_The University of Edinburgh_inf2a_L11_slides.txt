ll(1) grammars and parse tables
predictive parsing using a parse table
when is a grammar ll(1)?

ll(1) predictive parsing

informatics 2a: lecture 11

john longley

school of informatics
university of edinburgh

jrl@staffmail.ed.ac.uk

10 october 2017

1 / 15

ll(1) grammars and parse tables
predictive parsing using a parse table
when is a grammar ll(1)?

recap of lecture 10

a pushdown automaton (pda) uses control states and a
stack to recognise input strings.

we considered pdas whose goal is to empty the stack after
having read the input string.

the languages recognised by nondeterministic pushdown
automata (npdas) are exactly the context-free languages.

in contrast to the case of    nite automata, deterministic
pushdown automata (dpdas) are less powerful than npdas.

(precise de   nition of dpdas is a bit subtle     not covered in
inf2a, though related material will be covered in tutorial 3.)

2 / 15

ll(1) grammars and parse tables
predictive parsing using a parse table
when is a grammar ll(1)?

predictive parsing:    rst steps

consider how we   d like to parse a program in the little
programming language from lecture 9.

stmt     if-stmt | while-stmt | begin-stmt | assg-stmt

if-stmt     if bool-expr then stmt else stmt

while-stmt     while bool-expr do stmt
begin-stmt     begin stmt-list end

stmt-list     stmt | stmt ; stmt-list
assg-stmt     var := arith-expr
bool-expr     arith-expr compare-op arith-expr

compare-op     < | > | <= | >= | == | =! =

we read the lexed program token-by-token from the start.

3 / 15

ll(1) grammars and parse tables
predictive parsing using a parse table
when is a grammar ll(1)?

the start symbol of the grammar is stmt.

suppose the    rst lexical token in the program is begin.

from this information, we can tell that the    rst production in the
syntax tree must be

stmt     begin-stmt

we thus have to parse the program as begin-stmt.

we now see that the next production in the syntax tree has to be

begin-stmt     begin stmt-list end

we thus have to parse the full program begin . . . . . . as
begin stmt-list end.

we can thus step over begin, and proceed to parse the remaining
program . . . . . . as stmt-list end, etc.

4 / 15

ll(1) grammars and parse tables
predictive parsing using a parse table
when is a grammar ll(1)?

ll(1) predictive parsing: intuition

in the example, the correct production to apply is being
determined from just two pieces of information:

current lexical token (begin).
a nonterminal to be expanded (stmt in    rst step,
begin-stmt in second).

if it   s always possible to determine the next production from the
above information, the grammar is said to be ll(1).

when a grammar is ll(1), parsing can run e   ciently and
deterministically.

as it turns out, in spite of the promising start to parsing on the
previous slides, the grammar for our little programming language is
not ll(1). however, we shall see in lecture 14 how the grammar
can be adjusted to make it ll(1).

5 / 15

ll(1) grammars and parse tables
predictive parsing using a parse table
when is a grammar ll(1)?

ll(1) grammars: another intuition

think about a (one-state) npda derived from a id18 g.
at each step, our npda can    see    two things:

the current input symbol

the topmost stack symbol

roughly speaking, g is an ll(1) grammar if, just from this
information, it   s possible to determine which transition/production
to apply next.

here ll(1) means    read input from left, build leftmost derivation,
look just one symbol ahead   .

subtle point: when doing ll(1) parsing (as opposed to executing
an npda) we use the input symbol to help us choose a production
without consuming the input symbol . . . hence look ahead.

6 / 15

ll(1) grammars and parse tables
predictive parsing using a parse table
when is a grammar ll(1)?

parse tables

saying the current input symbol and stack symbol uniquely
determine the production means we can draw up a two-dimensional
parse table telling us which production to apply in any situation.

consider e.g. the following grammar for well-bracketed sequences:

s       | ts

t     (s)

this has the following parse table:

(

s     ts
s
t t     (s)

)

$

s       s      

columns are labelled by terminals, which are the input symbols. we
include an extra column for an    end-of-input    marker $.
rows are labelled by nonterminals.
blank entries correspond to situations that can never arise in
processing a legal input string.

7 / 15

ll(1) grammars and parse tables
predictive parsing using a parse table
when is a grammar ll(1)?

predictive parsing with parse tables

given such a parse table, parsing can be done very e   ciently using
a stack. the stack (reading downwards) records the predicted
sentential form for the remaining part of the input.

begin with just start symbol s on the stack.

if current input symbol is a (maybe $), and current stack
symbol is a non-terminal x , look up rule for a, x in table.
[error if no rule.] if rule is x       , pop x and replace with   
(pushed right-end-   rst!)

if current input symbol is a and stack symbol is a, just pop a
from stack and advance input read position.
[error if stack symbol is any other terminal.]

accept if stack empties with $ as input symbol.
[error if stack empties sooner.]

8 / 15

ll(1) grammars and parse tables
predictive parsing using a parse table
when is a grammar ll(1)?

example of predictive parsing

(

s     ts
s
t t     (s)

)

$

s       s      

let   s use this table to parse the input string (()).

operation

lookup (, s
lookup (, t
match (
lookup (, s
lookup (, t
match (
lookup ), s
match )
lookup ), s
match )
lookup $, s

remaining input
(())$
(())$
(())$
())$
())$
())$
))$
))$
)$
)$
$
$

stack state
s
ts
(s)s
s)s
ts)s
(s)s)s
s)s)s
)s)s
s)s
)s
s
empty stack

(also easy to build a syntax tree as we go along!)

9 / 15

ll(1) grammars and parse tables
predictive parsing using a parse table
when is a grammar ll(1)?

self-assessment questions

(

s     ts
s
t t     (s)

)

$

s       s      

for each of the following two input strings:

)

(

what will go wrong when we try to apply our parsing algorithm?

1 blank entry in table encountered

2

input symbol (or end marker) doesn   t match expected symbol

3 stack empties before end of string reached

10 / 15

ll(1) grammars and parse tables
predictive parsing using a parse table
when is a grammar ll(1)?

self-assessment questions

(

s     ts
s
t t     (s)

)

$

s       s      

for each of the following two input strings:

)

(

what will go wrong when we try to apply our parsing algorithm?

1 blank entry in table encountered

2

input symbol (or end marker) doesn   t match expected symbol

3 stack empties before end of string reached

answer: for ), we start by expanding s to  . but this empties the stack,
whereas we haven   t consumed any input yet.
for (, we get to a point where we   ve reached the end marker $ in the
input, which doesn   t match the predicted symbol    )    on the stack.

10 / 15

ll(1) grammars and parse tables
predictive parsing using a parse table
when is a grammar ll(1)?

further remarks

slogan: the parse table entry for a, x tells us which rule to apply if
we   re expecting an x and see an a.

often, the a will be simply the    rst symbol of the
x -subphrase in question.
but not always: maybe the x -subphrase in question is  , and
the a belongs to whatever follows the x .
e.g. in the lookups for ), s on the previous slide, the s in
question turns out to be empty.

once we   ve got a parse table for a given grammar g, we can parse
strings of length n in o(n) time (and o(n) space).

our algorithm is an example of a top-down predictive parser: it
works by    predicting    the form of the remainder of the input, and
builds syntax trees a top-down way (i.e. starting from the root).
there are other parsers (e.g. lr(1)) that work    bottom up   .

11 / 15

ll(1) grammars and parse tables
predictive parsing using a parse table
when is a grammar ll(1)?

ll(1) grammars: formal de   nition

suppose g is a id18 containing no    useless    nonterminals, i.e.

every nonterminal appears in some sentential form derived from the
start symbol;

every nonterminal can be expanded to some (possibly empty) string
of terminals.

we say g is ll(1) if for each terminal a and nonterminal x , there
is some production x        with the following property:

if b1 . . . bnx    is a sentential form appearing in a leftmost
deriviation of some string b1 . . . bnac1 . . . cm (n, m     0),
the next sentential form appearing in the derivation is
necessarily b1 . . . bn    .

(note that if a, x corresponds to a    blank entry    in the table, any
production x        will satisfy this property, because a sentential
form b1 . . . bnx    can   t arise.)

12 / 15

ll(1) grammars and parse tables
predictive parsing using a parse table
when is a grammar ll(1)?

non-ll(1) grammars

roughly speaking, a grammar is by de   nition ll(1) if and only if
there   s a parse table for it. not all id18s have this property!

consider e.g. a di   erent grammar for the same language of
well-bracketed sequences:

s       | (s) | ss

suppose we   d set up our initial stack with s, and we see the input
symbol (. what rule should we apply?

if the input string is (()), should apply s     (s).
if the input string is ()(), should apply s     ss. we can   t tell
without looking further ahead.

put another way: if we tried to build a parse table for this
grammar, the two rules s     (s) and s     ss would be competing
for the slot (, s. so this grammar is not ll(1).

13 / 15

ll(1) grammars and parse tables
predictive parsing using a parse table
when is a grammar ll(1)?

remaining issues

easy to see from the de   nition that any ll(1) grammar will be
unambiguous: never have two syntax trees for the same string.

for computer languages, this is    ne: normally want to avoid
ambiguity anyway.

for natural languages, ambiguity is a fact of life! so ll(1)
grammars are normally inappropriate.

two outstanding questions. . .

how can we tell if a grammar is ll(1)     and if it is, how can
we construct a parse table? (see lecture 12.)

if a grammar isn   t ll(1), is there any hope of replacing it by
an equivalent one that is? (see lecture 14.)

14 / 15

ll(1) grammars and parse tables
predictive parsing using a parse table
when is a grammar ll(1)?

reading and prospectus

relevant reading:

some lecture notes from a previous year (covering the same
material but with di   erent examples) are available via the
course website. (see readings column of course schedule.)

see also aho, sethi and ullman, compilers: principles,
techniques, tools, section 4.4.

15 / 15

