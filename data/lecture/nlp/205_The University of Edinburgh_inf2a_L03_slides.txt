languages and automata
some formal de   nitions
determinization

finite automata

informatics 2a: lecture 3

john longley

school of informatics
university of edinburgh

jrl@inf.ed.ac.uk

22 september 2017

1 / 30

languages and automata
some formal de   nitions
determinization

1 languages and automata
what is a    language    ?
finite automata: recap

2 some formal de   nitions

finite automaton
regular language
dfas and nfas

3 determinization

execution of nfas
the subset construction

2 / 30

languages and automata
some formal de   nitions
determinization

what is a    language    ?
finite automata: recap

languages and alphabets

throughout this course, languages will consist of    nite sequences
of symbols drawn from some given alphabet.
an alphabet    is simply some    nite set of letters or symbols which
we treat as    primitive   . these might be . . .

english letters:    = {a, b, . . . , z}
decimal digits:    = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
ascii characters:    = {0, 1, . . . , a, b, . . . , ?, !, . . .}
programming language    tokens   :    = {if, while, x, ==, . . .}
words in (some fragment of) a natural language.

   primitive    actions performable by a machine or system, e.g.
   = {insert50p, pressbutton1, . . .}

in toy examples, we   ll use simple alphabets like {0, 1} or {a, b, c}.

3 / 30

languages and automata
some formal de   nitions
determinization

what is a    language    ?
finite automata: recap

what is a    language    ?

a language over an alphabet    will consist of    nite sequences
(strings) of elements of   . e.g. the following are strings over the
alphabet    = {a, b, c}:

a

b

ab

cab

bacca

cccccccc

there   s also the empty string , which we usually write as  .
(note that   isn   t itself a symbol in the alphabet!)

a language over    is simply a (   nite or in   nite) set of strings over
  . a string s is legal in the language l if and only if s     l.
we write       for the set of all possible strings over   . so a
language l is simply a subset of      . (l          )
(n.b. this is just a technical de   nition     any real language is
obviously much more than this!)

4 / 30

languages and automata
some formal de   nitions
determinization

what is a    language    ?
finite automata: recap

ways to de   ne a language

there are many ways in which we might formally de   ne a
language:

direct mathematical de   nition, e.g.

l1 = {a, aa, ab, abbc}
l2 = {axb | x          }
l3 = {anbn | n     0}

id157 (see lecture 5): e.g. a(a + b)   b.
formal grammars (see lecture 9 onwards): e.g. s       | asb.
specify some machine that tests if a string is legal or not.

the more complex the language, the more complex the machine
might need to be. as we shall see, each level in the chomsky
hierarchy is correlated with a certain class of machines.

5 / 30

languages and automata
some formal de   nitions
determinization

what is a    language    ?
finite automata: recap

finite automata (a.k.a.    nite state machines)

this is an example of a    nite automaton over    = {0, 1}.
at any moment, the machine is in one of 2 states. from any state,
each symbol in    determines a    destination    state we can jump to.

the state marked with the in-arrow is picked out as the starting
state. so any string in       gives rise to a sequence of states.
certain states (with double circles) are designated as accepting.
we call a string    legal    if it takes us from the start state to some
accepting state. in this way, the machine de   nes a language
l          : the language l is the set of all legal strings.

6 / 30

0110evenoddlanguages and automata
some formal de   nitions
determinization

what is a    language    ?
finite automata: recap

quick test question . . .

for the    nite state machine shown here, which of the following
strings are legal (i.e. accepted)?

1  

2 11

3 1010

4 1101

7 / 30

0110evenoddlanguages and automata
some formal de   nitions
determinization

what is a    language    ?
finite automata: recap

quick test question . . .

for the    nite state machine shown here, which of the following
strings are legal (i.e. accepted)?

1  

2 11

3 1010

4 1101

answer: 1,2,3 are legal, 4 isn   t.

7 / 30

0110evenoddlanguages and automata
some formal de   nitions
determinization

what is a    language    ?
finite automata: recap

more generally, for any current state and any symbol, there may be
zero, one or many new states we can jump to.

here there are two transitions for    1    from q0, and none from q5.

the language associated with the machine is de   ned to consist of
all strings that are accepted under some possible execution run.

the language associated with the example machine above is
{x           | the    fth symbol from the end of x is 1}

8 / 30

q0q1q4q5q2q30,110,10,10,10,10,10,10,1languages and automata
some formal de   nitions
determinization

finite automaton
regular language
dfas and nfas

formal de   nition of    nite automaton

formally, a    nite automaton with alphabet    consists of:

a    nite set q of states,
a transition relation         q          q,
a set s     q of possible starting states.
a set f     q of accepting states.

9 / 30

languages and automata
some formal de   nitions
determinization

finite automaton
regular language
dfas and nfas

example formal de   nition

q = {q0, q1, q2, q3, q4, q5}
    = { (q0, 0, q0), (q0, 1, q0), (q0, 1, q1), (q1, 0, q2),
(q1, 1, q2), (q2, 0, q3), (q2, 1, q3), (q3, 0, q4),
(q3, 1, q4), (q4, 0, q5), (q4, 1, q5)}

s = {q0}
f = {q5}

10 / 30

q0q1q4q5q2q30,110,10,10,10,10,10,10,1languages and automata
some formal de   nitions
determinization

finite automaton
regular language
dfas and nfas

regular language

suppose m = (q,    , s, f ) is a    nite automaton with alphabet   .
we say that a string x           is accepted if there exists a path
through the set of states q, starting at some state s     s, ending
at some state f     f , with each step taken from the     relation,
and with the path as a whole spelling out the string x.

this enables us to de   ne the language accepted by m:
l(m) = {x           | x is accepted by m}

we call a language l           regular if l = l(m) for some    nite
automaton m.

regular languages are the subject of lectures 4   8 of the course.

11 / 30

languages and automata
some formal de   nitions
determinization

finite automaton
regular language
dfas and nfas

dfas and nfas

a    nite automaton with alphabet    is deterministic if:

it has exactly one starting state.
for every state q     q and symbol a        there is exactly one
state q(cid:48) for which there exists a transition q a    q(cid:48) in    .

the    rst condition says that s is a singleton set.
the second condition says that     speci   es a function q           q.

deterministic    nite automata are usually abbreviated dfas.

general    nite automata are usually called nondeterministic, by way
of contrast, and abbreviated nfas.

note that every dfa is an nfa.

12 / 30

languages and automata
some formal de   nitions
determinization

finite automaton
regular language
dfas and nfas

example

this is a dfa (and hence an nfa).

this is an nfa but not a dfa.

13 / 30

0110evenoddq0q1q4q5q2q30,110,10,10,10,10,10,10,1languages and automata
some formal de   nitions
determinization

finite automaton
regular language
dfas and nfas

challenge question

consider the following nfa over {a, b, c}:

what is the minimum number of states of an equivalent dfa?

14 / 30

aabclanguages and automata
some formal de   nitions
determinization

finite automaton
regular language
dfas and nfas

solution

an equivalent dfa must have at least 5 states!

15 / 30

bcbcaa,b,c(garbage state). . . . . . . .. . . .languages and automata
some formal de   nitions
determinization

finite automaton
regular language
dfas and nfas

specifying a dfa

clearly, a dfa with alphabet    can equivalently be given by:

a    nite set q of states,
a transition function    : q           q,
a single designated starting state s     q,
a set f     q of accepting states.

example:

q = {even, odd}
0

odd
even

:

  

even
odd
s = even
f = {even}

1

even
odd

16 / 30

languages and automata
some formal de   nitions
determinization

execution of nfas
the subset construction

running a    nite automaton

dfas are dead easy to implement and e   cient to run. we don   t
need much more than a two-dimensional array for the transition
function   . given an input string x it is easy to follow the unique
path determined by x and so determine whether or not the dfa
accepts x.

it is by no means so obvious how to run an nfa over an input
string x. how do we prevent ourselves from making incorrect
nondeterministic choices?

solution: at each stage in processing the string, keep track of all
the states the machine might possibly be in.

17 / 30

languages and automata
some formal de   nitions
determinization

execution of nfas
the subset construction

executing an nfa: example

given an nfa n over    and a string x          , how can we in
practice decide whether x     l(n)?

we illustrate with the running example below.

string to process: aba

18 / 30

q0q2q1aa,ba,baalanguages and automata
some formal de   nitions
determinization

execution of nfas
the subset construction

stage 0: initial state

at the start, the nfa can only be in the initial state q0.

string to process:
processed so far:
next symbol:

aba
 
a

19 / 30

q0q2q1aa,ba,baalanguages and automata
some formal de   nitions
determinization

execution of nfas
the subset construction

stage 1: after processing    a   

the nfa could now be in either q0 or q1.

string to process:
processed so far:
next symbol:

aba
a
b

20 / 30

q0q2q1aa,ba,baalanguages and automata
some formal de   nitions
determinization

execution of nfas
the subset construction

stage 2: after processing    ab   

the nfa could now be in either q1 or q2.

string to process:
processed so far:
next symbol:

aba
ab
a

21 / 30

q0q2q1aa,ba,baalanguages and automata
some formal de   nitions
determinization

execution of nfas
the subset construction

stage 3:    nal state

the nfa could now be in q2 or q0. (it could have got to q2 in two
di   erent ways, though we don   t need to keep track of this.)

string to process:
processed so far:

aba
aba

since we   ve reached the end of the input string, and the set of
possible states includes the accepting state q0, we can say that the
string aba is accepted by this nfa.

22 / 30

q0q2q1aa,ba,baalanguages and automata
some formal de   nitions
determinization

execution of nfas
the subset construction

the key insight

the process we   ve just described is a completely deterministic
process! given any current set of    coloured    states, and any
input symbol in   , there   s only one right answer to the
question:    what should the new set of coloured states be?   

what   s more, it   s a    nite state process. a    state    is simply a
choice of    coloured    states in the original nfa n.
if n has n states, there are 2n such choices.

this suggests how an nfa with n states can be converted
into an equivalent dfa with 2n states.

23 / 30

languages and automata
some formal de   nitions
determinization

execution of nfas
the subset construction

the subset construction: example

our 3-state nfa gives rise to a dfa with 23 = 8 states. the states
of this dfa are subsets of {q0, q1, q2}.

   

the accepting states of this dfa are exactly those that contain an
accepting state of the original nfa.

24 / 30

q0q2q1aa,ba,baa{q0,q1,   q2}{q0,q1}{q1,q2}{q0,q2}{q0}{q1}{q2}{}aba,bba,babbabbaaalanguages and automata
some formal de   nitions
determinization

execution of nfas
the subset construction

the subset construction in general

given an nfa n = (q,    , s, f ), we can de   ne an equivalent dfa
m = (q(cid:48),   (cid:48), s(cid:48), f (cid:48)) (over the same alphabet   ) like this:

q(cid:48) is 2q, the set of all subsets of q. (also written p(q).)
  (cid:48)(a, u) = {q(cid:48)     q |    q     a. (q, u, q(cid:48))        }. (set of all states
reachable via u from some state in a.)
s(cid:48) = s.
f (cid:48) = {a     q |    q     a. q     f}.

it   s then not hard to prove mathematically that l(m) = l(n).
(see kozen for details.)

this process is called determinization.

coming up in lecture 6: application of this process to e   cient
string searching.

25 / 30

languages and automata
some formal de   nitions
determinization

execution of nfas
the subset construction

summary

we   ve shown that for any nfa n, we can construct a dfa m
with the same associated language.

since every dfa is also an nfa, the classes of languages
recognised by dfas and by nfas coincide     these are the
regular languages.

often a language can be speci   ed more concisely by an nfa
than by a dfa.

we can automatically convert an nfa to a dfa, at the risk of
an exponential blow-up in the number of states.

to determine whether a string x is accepted by an nfa, we
don   t actually need to construct the entire dfa. instead, we
e   ciently simulate the execution of the dfa on x on a
step-by-step basis. (this is called just-in-time simulation.)

26 / 30

languages and automata
some formal de   nitions
determinization

execution of nfas
the subset construction

end-of-lecture question 1

let m be the dfa shown earlier:

give a simple, concise description of the strings that are in l(m).

27 / 30

0110evenoddlanguages and automata
some formal de   nitions
determinization

execution of nfas
the subset construction

end-of-lecture question 1

let m be the dfa shown earlier:

give a simple, concise description of the strings that are in l(m).

answer: they   re the strings containing an even number of 0   s.

27 / 30

0110evenoddlanguages and automata
some formal de   nitions
determinization

execution of nfas
the subset construction

end-of-lecture question 2

which of these three languages do you think are regular?

l1 = {a, aa, ab, abbc}
l2 = {axb | x          }
l3 = {anbn | n     0}

if not regular, can you explain why not?

28 / 30

languages and automata
some formal de   nitions
determinization

execution of nfas
the subset construction

end-of-lecture question 2

which of these three languages do you think are regular?

l1 = {a, aa, ab, abbc}
l2 = {axb | x          }
l3 = {anbn | n     0}

if not regular, can you explain why not?

answer: l1 is regular (easy to see that any    nite set of strings is a
regular language). l2 is regular (easy to give a dfa). l3 is not
regular     for the reason, see lecture 8.

28 / 30

languages and automata
some formal de   nitions
determinization

execution of nfas
the subset construction

end-of-lecture challenge question 3

consider our    rst example nfa over {0, 1}:

what is the number of states of the smallest dfa that recognises
the same language?

answer given at end of lecture 4.

29 / 30

q0q1q4q5q2q30,110,10,10,10,10,10,10,1languages and automata
some formal de   nitions
determinization

execution of nfas
the subset construction

reference material

kozen chapters 3, 5 and 6.

j & m section 2.2 (rather brief).

30 / 30

