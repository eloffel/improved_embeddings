de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

context-free grammars

informatics 2a: lecture 9

john longley

school of informatics
university of edinburgh

jrl@inf.ed.ac.uk

6 october 2017

1 / 23

de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

recap of lecture 7

languages that require an ability to    count    are not regular.

examples of this are {anbn | n     0} and the language of
well-matched sequences of brackets.

the pumping lemma captures a pattern of regularity
necessarily present in a regular language.

when applied in its contrapositive form the pumping lemma
provides a powerful tool for proving that a given language is
not regular.

2 / 23

de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

beyond regular languages

regular languages have signi   cant limitations. (e.g. they can   t
cope with nesting of brackets).

so we   d like some more powerful means of de   ning languages.

today we   ll explore a new approach     via generative grammars
(chomsky 1952). a language is de   ned by giving a set of rules
capable of    generating    all the sentences of the language.

the particular kind of generative grammars we   ll consider are
called context-free grammars.

3 / 23

de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

context-free grammars: an example

here is an example context-free grammar.

exp     var | num | ( exp )
exp     exp + exp
exp     exp     exp
var     x | y | z
num     0 |

| 9

      

6 + 7

it generates simple arithmetic expressions such as
x     ((z     2) + y )

z
the symbols +,   , (, ), x, y , z, 0, . . . , 9 are called terminals: these
form the ultimate constituents of the phrases we generate.

5     (x + 3)

8

the symbols exp, var, num are called non-terminals: they name
various kinds of    sub-phrases   . we designate exp the start symbol.

4 / 23

de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

syntax trees

beginning with the start symbol, we grow syntax trees by
repeatedly expanding non-terminal symbols using these rules. e.g.:

this generates 5     (x + 3).

5 / 23

expexpnumexpexpexpexpnumvar(*5+x)3de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

the language de   ned by a grammar

by choosing di   erent rules to apply, we can generate in   nitely
many strings from this grammar.

the language generated by the grammar is, by de   nition, the set
of all strings of terminals that can be derived from the start
symbol via such a syntax tree.

note that strings such as 1+2+3 may be generated by more than
one tree (structural ambiguity):

6 / 23

expexp+expnum3expexpnum+num12expexp+expnum1expexpnum+3num2de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

challenge question

how many possible syntax trees are there for the string below?

1 + 2 + 3 + 4

7 / 23

de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

challenge question

how many possible syntax trees are there for the string below?

1 + 2 + 3 + 4

answer: five.
they correspond in essence to the following    bracketings   :

((1 + 2) + 3) + 4

(1 + (2 + 3)) + 4

(1 + 2) + (3 + 4)

1 + ((2 + 3) + 4)

1 + (2 + (3 + 4))

(exercise: draw the actual trees.)

7 / 23

de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

derivations

as a more    machine-oriented    alternative to syntax trees, we can
think in terms of derivations involving (mixed) strings of terminals
and non-terminals. e.g.

exp     exp     exp
    num     exp
    num     (exp)
    num     (exp + exp)
    5     (exp + exp)
    5     (exp + num)
    5     (var + exp)
    5     (x + exp)
    5     (x + 3)

at each stage, we choose one non-terminal and expand it using a
suitable rule. when there are only terminals left, we can stop!

8 / 23

de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

multiple derivations

clearly, any derivation can be turned into a syntax tree.

however, even when there   s only one syntax tree, there might be
many derivations for it:
exp     exp + exp
    num + exp
    1 + exp
    1 + num
    1 + 2

exp     exp + exp
    exp + num
    exp + 2
    num + 2
    1 + 2

(. . . a leftmost derivation)

(. . . a rightmost derivation)

in the end, it   s the syntax tree that matters     we don   t normally
care about the di   erences between various derivations for it.

however, derivations     especially leftmost and rightmost ones    
will play a signi   cant role when we consider parsing algorithms.

9 / 23

de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

second example: comma-separated lists

consider lists of (zero or more) alphabetic characters, separated by
commas:

 

a

e,d

q,w ,e,r ,t,y

these can be generated by the following grammar (note the rules
with empty right hand side).

list       | char tail
tail       | , char tail
| z
char     a |

      

terminals:
non-terminals:
start symbol:

a, . . . , z, ,
list, tail, char
list

10 / 23

de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

syntax trees for comma-separated lists

list       | char tail
tail       | , char tail
char     a |
| z

      

here is the syntax tree for the list a, b, c:

notice how we indicate the application of an     -rule   .

11 / 23

,charbtaillistchartaila  ,chartailcde   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

other examples

the language {anbn | n     0} may be de   ned by the grammar:

s       | asb

the language of well-matched sequences of brackets ( ) may
be de   ned by

s       | s s | (s)

so both of these are examples of context-free languages.

12 / 23

de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

context-free grammars: formal de   nition

a context-free grammar (id18) g consists of

a    nite set n of non-terminals,

a    nite set    of terminals, disjoint from n,
a    nite set p of productions of the form x       , where
x     n,        (n       )   ,
a choice of start symbol s     n.

13 / 23

de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

a sentential form is any sequence of terminals and nonterminals
that can appear in a derivation starting from the start symbol.
formal de   nition: the set of sentential forms derivable from g is
the smallest set s(g)     (n       )    such that

s     s(g)
if   x        s(g) and x            p, then            s(g).

the language associated with grammar is the set of sentential
forms that contain only terminals.
formal de   nition: the language associated with g is de   ned by
l(g) = s(g)          

14 / 23

de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

a sentential form is any sequence of terminals and nonterminals
that can appear in a derivation starting from the start symbol.
formal de   nition: the set of sentential forms derivable from g is
the smallest set s(g)     (n       )    such that

s     s(g)
if   x        s(g) and x            p, then            s(g).

the language associated with grammar is the set of sentential
forms that contain only terminals.
formal de   nition: the language associated with g is de   ned by
l(g) = s(g)          
a language l           is de   ned to be context-free if there exists
some id18 g such that l = l(g).

14 / 23

de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

assorted remarks

      

|   n is simply an abbreviation for a

x       1 |   2 |
bunch of productions x       1, x       2, . . . , x       n.
these grammars are called context-free because a rule x       
says that an x can always be expanded to   , no matter where
the x occurs.
this contrasts with context-sensitive rules, which might allow
us to expand x only in certain contexts, e.g. bxc     b  c.

broad intuition: context-free languages allow nesting of
structures to arbitrary depth. e.g. brackets, begin-end blocks,
if-then-else statements, subordinate clauses in english, . . .

15 / 23

de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

arithmetic expressions again

our earlier grammar for arithmetic expressions was limited in that
only single-character variables/numerals were allowed. one could
address this problem in either of two ways:

add more grammar rules to allow generation of longer
variables/numerals, e.g.

num     0 | nonzerodigit digits
digits       | digit digits

give a separate description of the lexical structure of the
language (e.g. using id157), and treat the names
of lexical classes (e.g. var, num) as terminals from the point
of view of the id18. so the id18 will generate strings such as

num     (var + num)

the second option is generally preferable: lexing (using regular
expressions) is computationally    cheaper    than parsing for id18s.

16 / 23

de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

a programming language example

building on our grammar for arithmetic expressions, we can give a
id18 for a little programming language, e.g.:

stmt     if-stmt | while-stmt | begin-stmt | assg-stmt

if-stmt     if bool-expr then stmt else stmt

while-stmt     while bool-expr do stmt
begin-stmt     begin stmt-list end

stmt-list     stmt | stmt ; stmt-list
assg-stmt     var := arith-expr
bool-expr     arith-expr compare-op arith-expr

compare-op     < | > | <= | >= | == | =! =
grammars like this (often with ::= in place of    ) are standard in
computer language reference manuals. this notation is often called
bnf (backus-naur form).

17 / 23

de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

a natural language example

consider the following lexical classes (   parts of speech   ) in english:

n
name
trv
locv
prep
det

nouns
proper names
transitive verbs
locative verbs
prepositions
determiners

(alien, cat, dog, house, malt, owl, rat, table)
(jack, susan)
(admired, ate, built, chased, killed)
(is, lives, lay)
(in, on, by, under)
(the, my, some)

now consider the following productions (start symbol s):

s     np vp
np     this | name | det n | det n relcl
relcl     that vp | that np trv | np trv | np locv prep

vp     is np | trv np | locv prep np

18 / 23

de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

natural language example in action

even this modest bunch of rules can generate a rich multitude of
english sentences, for example:

this is jack

some alien ate my owl

susan admired the rat that lay under my table

this is the dog that chased the cat that killed the rat that ate
the malt that lay in the house that jack built

(??) jack built the house the malt the rat the cat the dog
chased killed ate lay in

(hard to parse in practice     later we   ll see    why   .)

19 / 23

de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

nesting in natural language

excerpt from jane austen, mans   eld park.

whatever e   ect sir thomas   s little harangue might really produce on mr.
crawford, it raised some awkward sensations in two of the others, two of
his most attentive listeners     miss crawford and fanny. one of whom,
having never before understood that thornton was so soon and so
completely to be his home, was pondering with downcast eyes on what it
would be not to see edmund every day; and the other, startled from the
agreeable fancies she had been previously indulging on the strength of her
brother   s description, no longer able, in the picture she had been forming
of a future thornton, to shut out the church, sink the clergyman, and see
only the respectable, elegant, modernized and occasional residence of a
man of independent fortune, was considering sir thomas, with decided
ill-will, as the destroyer of all this, and su   ering the more from . . .

20 / 23

de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

every regular language is context-free!

we can easily turn a dfa into a id18, e.g.

a       | 1 a | 0 b
b     1 b | 0 a
start symbol: a

terminals are input symbols for the dfa.
non-terminals are states of the dfa.
start symbol is initial state.
for every transition x a    y , we have a production x     a y .
for every accepting state x , we have a production x      .

a id18 is called regular if all rules are of the form x     ay ,
x     y , x      . the languages de   nable by regular id18s are
precisely the regular languages.

21 / 23

0110abde   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

end-of-lecture self-assessment question

recall from slide 11:

list       | char tail
tail       | , char tail

which of the following alternative context-free grammars for list is
incorrect in the sense that it de   nes a di   erent language for list?

1:

2:

3:

list       | body char
body       | body char ,
list       | nonempty

nonempty     char | char , nonempty

list       | nonempty

nonempty     char | nonempty , nonempty

4: they are all correct

22 / 23

de   ning languages via grammars: some examples
context-free grammars: the formal de   nition
some more examples

reading and prospectus

relevant reading:

kozen chapters 19, 20

jurafsky & martin, sections 12.1   12.3

next time: what kinds of machines (analogous to dfas or nfas)
correspond to context-free languages?

23 / 23

