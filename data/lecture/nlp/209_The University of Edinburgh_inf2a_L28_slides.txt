what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

semantics of programming languages

informatics 2a: lecture 28

john longley

school of informatics
university of edinburgh

jrl@inf.ed.ac.uk

20 november 2016

1 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

two parallel pipelines

a large proportion of the course thus far can be organised into two
parallel language processing pipelines.

formal language

natural language

program text
   
lexemes
   
syntax tree
   
(annotated)
syntax tree

lexing

parsing

type checking

text
   
tagged words
   
parse tree
   
(annotated)
parse tree
   
logical form

segmentation, tagging

parsing

agreement checking

semantics

2 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

two parallel pipelines

a large proportion of the course thus far can be organised into two
parallel language processing pipelines.

formal language

natural language

program text
   
lexemes
   
syntax tree
   
(annotated)
syntax tree
   
program behaviour

lexing

parsing

type checking

semantics

text
   
tagged words
   
parse tree
   
(annotated)
parse tree
   
logical form

segmentation, tagging

parsing

agreement checking

semantics

2 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

two parallel pipelines

a large proportion of the course thus far can be organised into two
parallel language processing pipelines.

formal language

natural language

program text
   
lexemes
   
syntax tree
   
(annotated)
syntax tree
   
program behaviour

lexing

parsing

type checking

semantics

text
   
tagged words
   
parse tree
   
(annotated)
parse tree
   
logical form

segmentation, tagging

parsing

agreement checking

semantics

today we look at methods of specifying program behaviour.

2 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

semantics for programming languages

the syntax of nls (as described by id18s etc.) is concerned with
what sentences are grammatical and what structure they have,
whilst their semantics are concerned with what sentences mean.

a similar distinction can be made for programming languages.
rules associated with lexing, parsing and typechecking concern the
form and structure of legal programs, but say nothing about what
programs should do when you run them.

the latter is what programming language semantics is about. it
thus concerns the later stages of the formal language processing
pipeline.

3 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

speci   cation vs. implementation

in principle, one way to give a semantics (or    meaning   ) for a
programming language is to provide a working implementation of
it, e.g. an interpreter or compiler for the language.

however, such an implementation will probably consist of
thousands of lines of code, and so isn   t very suitable as a readable
de   nition or reference speci   cation of the language.

the latter is what we   re interested in here. in other words, we want
to    ll the blank in the following table:

speci   cation
lexical structure regular exprs.

grammatical structure
execution behaviour

id18s
???

implementation

lexer impl.
parser impl.

interpreter/compiler

4 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

semantic paradigms

we   ll look at two styles of formal programming language semantics:

operational semantics. typically consists of a bunch of rules
for    executing    programs given by syntax trees. oriented
towards implementations of the language: indeed, an op. sem.
often gives rise immediately to a    toy implementation   .

denotational semantics. typically consists of a compositional
description of the meaning of program phrases (close in spirit
to what we   ve seen for nls). oriented towards mathematical
reasoning about the language and about programs written in
it. may be    executable    or not.

these two styles are complementary: ideally, it   s nice to have both.
there are also other styles (e.g. axiomatic semantics), but we
won   t discuss them here.

5 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

micro-haskell: recap

we use micro-haskell (recall lecture 13 and assignment 1) as a
vehicle for introducing the methods of operational and
denotational semantics.
the format of mh declarations is illustrated by:

div :: integer -> integer -> integer ;
div x y = if x < y then 0 else 1 + div (x - y) y ;

this declares a function div, of the type speci   ed, such that, when
applied to two (non-negative) integer literals m and n, the function
application

div m n

returns, as result, the integer literal representing the integer
division of m by n.

6 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

micro-haskell: recap

we use micro-haskell (recall lecture 13 and assignment 1) as a
vehicle for introducing the methods of operational and
denotational semantics.
the format of mh declarations is illustrated by:

div :: integer -> integer -> integer ;
div x y = if x < y then 0 else 1 + div (x - y) y ;

this declares a function div, of the type speci   ed, such that, when
applied to two (non-negative) integer literals m and n, the function
application

div m n

returns, as result, the integer literal representing the integer
division of m by n.
q: how would div 2 0 behave?

6 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

micro-haskell: recap

we use micro-haskell (recall lecture 13 and assignment 1) as a
vehicle for introducing the methods of operational and
denotational semantics.
the format of mh declarations is illustrated by:

div :: integer -> integer -> integer ;
div x y = if x < y then 0 else 1 + div (x - y) y ;

this declares a function div, of the type speci   ed, such that, when
applied to two (non-negative) integer literals m and n, the function
application

div m n

returns, as result, the integer literal representing the integer
division of m by n.
q: how would div 2 0 behave?
a: loop inde   nitely!

6 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

semantic paradigms in the case of mh

operational semantics:

this explains the computational process by which mh calculates
the value of a function application, such as div m n.

denotational semantics:

this de   nes a mathematical denotation

[[ div ]]     [[ integer -> integer -> integer ]]

roughly, [[ integer->integer->integer ]] is some set of binary
functions on integers, and [[ div ]] is the integer-division function.

in reality, denotational semantics is more complicated than this.

7 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

operational semantics

we model the execution behaviour of programs as a series of
reduction steps.

e.g. for micro-haskell:

if 4+5 <= 8 then 4 else 6+7

(cid:16) if 9 <= 8 then 4 else 6+7
(cid:16) if false then 4 else 6+7
(cid:16) 6+7
(cid:16) 13

a (small-step) operational semantics is basically a bunch of rules
for performing such reductions.

8 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

more complex example

consider the micro-haskell declaration

f x y = x+y+x ;

this e   ectively introduces the de   nition

f =   x.  y. x+y+x

now consider the evaluation of f 3 4:

f 3 4 (cid:16) (  x.  y. x+y+x) 3 4

(cid:16) (  y. 3+y+3) 4
(cid:16) 3+4+3
(cid:16) 7 + 3
(cid:16) 10

notice that two of these steps are   -reductions!

9 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

operational semantics for micro-haskell: general rules

suppose e is a runtime environment associating a de   nition to
each function symbol, e.g. e (f) =   x.  y.x+y+x.

also let v range over variables of mh, and write n to mean the
integer literal for n.
relative to e , we can de   ne (cid:16) as follows:
(v a variable de   ned in e )

v (cid:16) e (v )
(  v .m)n (cid:16) m[v (cid:55)    n]
m + n (cid:16) m + n, and similarly for other in   xes.
if true then m else n (cid:16) m
if false then m else n (cid:16) n

(  -reduction)

continued on next slide . . .

10 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

operational semantics for micro-haskell (continued)

let   s say a term m is a value if it   s an integer literal, a boolean
literal, or a   -abstraction. let v range over values,

intuition: values are terms that can   t be reduced any further. we
try to reduce all other terms to values.
to complete the de   nition of (cid:16), we decree that if m (cid:16) m(cid:48) then:

mn (cid:16) m(cid:48)n
m (cid:12) n (cid:16) m(cid:48) (cid:12) n ((cid:12) any in   x symbol)
v (cid:12) m (cid:16) v (cid:12) m(cid:48) (ditto)
if m then n else p (cid:16) if m(cid:48) then n else p

we then say m (cid:16)    v (   m evaluates to v    ) if there   s a sequence

m     m0 (cid:16) m1 (cid:16)        (cid:16) mr     v

that de   nes the intended behaviour of micro-haskell programs.
it   s also (roughly) how the assignment 1 evaluator for mh works.

11 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

longer example

within a run-time environment that records the de   nition of div,
we have:

div 3 2

(cid:16) (  x.  y. if x < y then 0 else 1 + div (x + -y) y) 3 2
(cid:16) (  y. if 3 < y then 0 else 1 + div (3 - y) y) 2
(cid:16) if 3 < 2 then 0 else 1 + div (3 - 2) 2
(cid:16) if false then 0 else 1 + div (3 - 2) 2
(cid:16) 1 + div (3 - 2) 2
(cid:16) 1 + (  x.  y. if x < y then 0 else 1 + div (x + -y) y)

(3 - 2) 2

(cid:16)       

exercise: finish this o   !

12 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

operational semantics: further remarks

what happens if we encounter an expression that isn   t a value but
can   t be reduced? e.g. 5 true, or (  x.x)+4 ?

!!! if our original program typechecks, this can never happen !!!

indeed, it can be proved that:

if m can be typed, either it   s a value or it can be reduced;
if m has type t and m (cid:16) m(cid:48), then m(cid:48) has type t.

that   s one reason why type systems are so valuable: they can
guarantee programs won   t derail at runtime.

the general form of operational semantics we   ve described is
immensely    exible. it works beautifully for functional languages like
mh. but it can also be adapted to most other kinds of
programming language.

13 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

denotational semantics

an operational semantics provides a kind of idealized
implementation of the language in terms of symbolic rules.

that   s    ne, but doesn   t give much    structural    understanding.
conceptually and mathematically, it is more satisfying to assign
meaning to (parts of) a program     in roughly the way that
mathematical expressions (or indeed nl expressions) have meaning.

this is the idea behind denotational semantics: associate a
denotation [[ p ]] to each program phrase p in a compositional way.

14 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

denotational semantics for mh:    rst attempt

let   s try interpreting mh types by sets in an natural way:

[[ bool ]] = b = {t , f}

[[ integer ]] = z
[[   ->   ]] = [[    ]][[    ]]

(set of all functions from [[    ]] to [[    ]])

a closed term m ::    will receive a denotation [[ m ]]     [[    ]].
more generally, if m ::    is a term in the type environment
   = (cid:104)x1 ::   1, . . . , xn ::   n(cid:105), its denotation will be a function

[[ m ]]   :

[[   1 ]]              [[   n ]]     [[    ]]

we de   ne [[ m ]]   compositionally (just as in nl semantics).
e.g. writing (cid:126)a for (cid:104)a1, . . . , an(cid:105):
: (cid:126)a (cid:55)    n
: (cid:126)a (cid:55)    ai
: (cid:126)a (cid:55)    [[ m ]]  ((cid:126)a) + [[ n ]]  ((cid:126)a)
: (cid:126)a (cid:55)    [[ m ]]  ((cid:126)a)([[ n ]]  ((cid:126)a)),

[[ n ]]  
[[ xi ]]  
[[ m+n ]]  
[[ m n ]]  

etc.

15 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

denotational semantics for mh: the challenge

that works well as far as it goes. the problem comes when we try
to interpret recursive de   nitions, e.g.

div

=   x.  y.if x < y then 0 else 1 + div (x - y) y ;

two issues here:

1 value of div 2 0 is unde   ned. so should now include a special

value     (   unde   ned   ) in the sets [[ integer ]] and [[ bool ]].

2 the de   nition of [[ div ]] will be circular: we get an equation that

de   nes [[ div ]] in terms of itself. how can we be sure this equation
even has a solution? what if it has more than one?

to make the idea work, we need to change the way we de   ne
[[   ->   ]]. we should take some set of functions that is . . .
rich enough to interpret all programs in our language, but

constrained enough that circular de   nitions make sense.

at this point (reluctantly) we move on to something simpler . . .

16 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

denotational semantics for id157

let   s turn to an easier example. recall our (meta)language of
id157:

r       |     | a | rr | r + r | r   
in fact, we   ve already met two good den. sems. for this!

[[ r ]]1 = l(r), the language (i.e. set of strings) de   ned by r.
[[ r ]]2 = the particular ( -)nfa for r constructed by the
methods of lecture 5.
both of these are de   ned compositionally: e.g. l(r + r(cid:48)) is
de   ned as l(r)     l(r(cid:48)), and the standard nfa for r + r(cid:48) is
constructed out of nfas for r and r(cid:48). note that:

[[    ]]1 is more abstract than [[    ]]2: can have [[ r ]]2 (cid:54)= [[ r(cid:48) ]]2
but [[ r ]]1 = [[ r(cid:48) ]]1. so [[    ]]1 is more useful for arguing that
two id157 are    equivalent   .
however, [[    ]]2 is naturally executable, while [[    ]]1 is not.

17 / 18

what is programming language semantics?
micro-haskell: recap
operational semantics
denotational semantics

summary

formal semantics can be used to give a concise and precise
reference speci   cation for the intended behaviour of programs.
operational semantics is nowadays quite widely used.
denotational semantics gets quite mathematical, and is at
present more of a research topic.
operational semantics, and some kinds of denotational
semantics, also o   er a starting-point for building working
implementations of the language.
denotational semantics also o   ers a framework for proving
things about programs. e.g. if [[ p ]] = [[ p(cid:48) ]], that shows that
p can be replaced by p(cid:48) in any program context without
changing the program   s behaviour.
ideas from both op. and den. semantics have had a signi   cant
e   ect on the design of programming languages.

18 / 18

