cse 447/547

natural language processing

winter 2018

id33

and other grammar formalisms

yejin choi - university of washington

dependency grammar

for each word, find one parent.

child            parent

a child is dependent on the parent.

- a child is an argument of the parent.
- a child modifies the parent.

i    shot    an     elephant

for each word, find one parent.
child            parent

a child is dependent on the parent.

- a child is an argument of the parent.
- a child modifies the parent.

i    shot    an     elephant    in    my    pajamas

for each word, find one parent.
child            parent

a child is dependent on the parent.

- a child is an argument of the parent.
- a child modifies the parent.

i    shot    an     elephant    in    my    pajamas    yesterday

shot

i

elephant

yesterday

an

pajamas

in

my

i    shot    an     elephant    in    my    pajamas    yesterday     

typed depedencies

nsubj(shot-2, i-1) 
root(root-0, shot-2) 
det(elephant-4, an-3) 
dobj(shot-2, elephant-4) 

prep(shot-2, in-5) 
poss(pajamas-7, my-6) 
pobj(in-5, pajamas-7)

nsubj

prep

dobj

det

pobj

poss

i        shot        an         elephant        in        my        pajamas
1             2              3                 4                   5             6                  7                   

id18 vs dependency parse i

   both are context-free.
   both are used frequently today, but dependency parsers are more 

recently popular. 

   cky parsing algorithm: 

   o (n^3) using cky & unlexicalized grammar
   o (n^5) using cky & lexicalized grammar (o(n^4) also possible)

   id33 algorithm: 

   o (n^5) using na  ve cky
   o (n^3) using eisner algorithm
   o (n^2) based on minimum directed spanning tree algorithm 

(arborescence algorithm, aka, edmond-chu-liu algorithm     see 
edmond.pdf) 

   linear-time o (n) incremental parsing (id132) possible 

for both grammar formalisms

id18 vs dependency parse ii

   id18 focuses on    constituency    (i.e., phrasal/clausal structure)
   dependency focuses on    head    relations.

   id18 includes non-terminals. id18 edges are not typed.
   no non-terminals for dependency trees. instead, dependency 

trees provide    dependency types    on edges.

   dependency types encode    grammatical roles    like 

   nsubj -- nominal subject
   dobj     direct object
   pobj     prepositional object
   nsubjpass     nominal subject in a passive voice

id18 vs dependency parse iii

   can we get    heads    from id18 trees?

   yes. in fact, modern statistical parsers based on id18s use 
hand-written    head rules    to assign    heads    to all nodes.

   can we get constituents from dependency trees?

   yes, with some efforts.

   can we transform id18 trees to dependency parse trees?

   yes, and transformation software exists. (stanford toolkit 

based on [de marneffe et al. lrec 2006])

   can we transform dependency trees to id18 trees?

   mostly yes, but (1) dependency parse can capture non-

projective dependencies, while id18 cannot, and (2) people 
rarely do this in practice

non projective dependencies

   mr. tomash will remain as a director emeritus.

   a hearing is scheduled on the issue today.

non projective dependencies

   projective dependencies: when the tree edges are 

drawn directly on a sentence, it forms a tree (without a 
cycle), and there is no crossing edge.

   projective dependency:
   eg: 

mr.  tomash will     remain    as    a    director    emeritus.

non projective dependencies

   projective dependencies: when the tree edges are 

drawn directly on a sentence, it forms a tree (without a 
cycle), and there is no crossing edge.

   non-projective dependency:

   eg:

a    hearing    is    scheduled    on    the    issue    today.

non projective dependencies

   which word does    on the issue    modify?
   we scheduled a meeting on the issue today.
   a meeting is scheduled on the issue today.

   id18s capture only projective dependencies 

(why?)

coordination across constituents

  right-node raising:

   [[she bought] and [he ate]] bananas.

  argument-cluster coordination:

   i give [[you an apple] and [him a pear]].

  gapping:

   she likes sushi, and he sashimi

   id18s don  t capture coordination across 
constituents:

coordination across constituents

   she bought and he ate bananas.
  

i give you an apple and him a pear.

compare above to:

   she bought and ate bananas.
   she bought bananas and apples. 
   she bought bananas and he ate apples.

the id154

the id154

   head-driven phrase structure grammar (hpsg) (pollard and sag, 

1987, 1994)

   lexical functional grammar (lfg) (bresnan, 1982)
   minimalist grammar (stabler, 1997)

   tree-adjoining grammars (tag) (joshi, 1969)
   id35s (id35) (steedman, 1986)

advanced topics
- eisner   s algorithm -

o(n5n3) if n 
nonterminals

na  ve cky parsing
o(n5) 
combinations

p

p

c

goal

r

k

0

n

j

i

goal

takes

takes

takes

takes

two

takes

two

it

it

it

to

to

to

tango

tango

slides from eisner & smith 

eisner algorithm (eisner & satta, 1999)

this happens 
only once as the 
very final step

without adding a 
dependency arc

when adding a 
dependency arc
(head is higher)

goal

0

i

n

i

i

j

j

k

i

j

k

k

i

j

k

eisner algorithm (eisner & satta, 1999)

a triangle is a head with 
some left (or right) subtrees.

goal

one trapezoid 
per 
dependency.

it

takes

two

to

tango

slides from eisner & smith 

eisner algorithm (eisner & satta, 1999)

o(n) 
combinations

o(n3) 
combinations

o(n3) 
combinations

goal

0

i

n

i

i

j

j

k

k

i

i

j

k

j

k

gives o(n3) dependency grammar 

parsing 

slides from eisner & smith 

eisner algorithm

   base case:

8t 2 {e, d, c, b},    (i, i, t) = 0

   recursion:

   (i, j, e) = max

   (i, j, d) = max
   (i, j, c) = max
   (i, j, b) = max

i   k   j      (i, k, b) +    (k + 1, j, c) +  (wj, wi)   
i   k   j      (i, k, b) +    (k + 1, j, c) +  (wi, wj))   
i   k   j      (i, k, c) +    (k + 1, j, e)   
i   k   j      (i, k, d) +    (k + 1, j, b)   
1   k   n      (1, k, c) +    (k + 1, n, b)   

   final case:

   (1, n, cb) = max

advanced topics:

mildly context-sensitive grammar formalisms

i. id34 

(tag)

some slides adapted from julia hockenmaier  s

tag lexicon (supertags)

   tree-adjoining grammars (tag) (joshi, 1969)
          super parts of speech (supertags): almost 

parsing    (joshi and srinivas 1994)

   pos tags enriched with syntactic structure
   also used in other grammar formalisms (e.g., id35)

vp

vp*

pp

p

with

np

np

np

np*

np*

pp

p

with

np

s

v

likes

vp

np

np

d

the

np

n

bananas

tag lexicon (supertags)

vp

rb

vp*

always

np

s

v

likes

np

n

bananas

s

pp

s*

vp

vp*

pp

p

with

vp

np

np

np

d

the

p

with

np

np*

np*

pp

p

with

np

np

tag rule 1: substitution

tag rule 2: adjunction

example: tag lexicon

example: tag derivation

example: tag derivation

example: tag derivation

(1) can handle long distance dependencies

s*

(2) cross-serial dependencies

   dutch and swiss-german
   can this be generated from context-free grammar?

id34 (tag)

   tag: aravind joshi in 1969
   id55 for tag: joshi and srinivas 1994

   pushing grammar down to lexicon.
   with just two rules: substitution & adjunction

   parsing complexity:

   o(n^7)

   xtag project (tag penntree) (http://www.cis.upenn.edu/~xtag/)

   local expert!

   fei xia @ linguistics (https://faculty.washington.edu/fxia/)

ii. combinatory categorial 

grammar (id35)

some slides adapted from julia hockenmaier  s

categories

   categories = types
   primitive categories

   n, np, s, etc

   functions

   a combination of primitive categories
   s/np,   (s/np) / (s/np),   etc
   v, vp, adverb, pp, etc

combinatory rules

   application

   forward application:   x/y  y    x
   backward application:   y  x\y     x

   composition

   forward composition:   x/y  y/z     x/z
   backward composition:  y\z  x\y     x\z
   (forward crossing composition:   x/y  y\z     x\z)
   (backward crossing composition:   x\y  y/z     x/z)

   type-raising

   forward type-raising:   x    y / (y\x)
   backward type-raising:   x    y \ (y/x)

   coordination <&>

   x  conj  x    x

combinatory rules 1 : application

   forward application    >   

   x/y   y      x
   (s\np)/np   np      s\np

   backward application    <   

   y   x\y      x
   np   s\np      s

function

   likes := (s\np) / np

   a transitive verb is a function from nps into predicate s. that is, it 

accepts two nps as arguments and results in s.

   transitive verb:   (s\np) / np
   intransitive verb:   s\np
   adverb:   (s\np) \ (s\np)
   preposition:  (np\np) / np
   preposition:  ((s\np) \ (s\np)) / np

np

s

v

likes

vp

np

id35 derivation:

id18 derivation:

combinatory rules

   application

   forward application:   x/y  y    x
   backward application:   y  x\y     x

   composition

   forward composition:   x/y  y/z     x/z
   backward composition:  y\z  x\y     x\z
   forward crossing composition:   x/y  y\z     x\z
   backward crossing composition:   x\y  y/z     x/z

   type-raising

   forward type-raising:   x    y / (y\x)
   backward type-raising:   x    y \ (y/x)

   coordination <&>

   x  conj  x    x

combinatory rules 4 : coordination

   x conj x    x

   alternatively, we can express coordination by 
defining conjunctions as functions as follows:

   and :=  (x\x) / x

coordination with id35

examples from prof. mark steedman

coordination with id35

   application

   forward application:   x/y  y    x
   backward application:   y  x\y     x

coordination with id35

   application

   forward application:   x/y  y    x
   backward application:   y  x\y     x

combinatory rules

   application

   forward application:   x/y  y    x
   backward application:   y  x\y     x

   composition

   forward composition:   x/y  y/z     x/z
   backward composition:  y\z  x\y     x\z
   forward crossing composition:   x/y  y\z     x\z
   backward crossing composition:   x\y  y/z     x/z

   type-raising

   forward type-raising:   x    y / (y\x)
   backward type-raising:   x    y \ (y/x)

   coordination <&>

   x  conj  x    x

coordination with id35

   application

   forward application:   x/y  y    x
   backward application:   y  x\y     x

   composition

   forward composition:   x/y  y/z     x/z
   backward composition: y\z  x\y     x\z 
   forward crossing composition:   x/y  y\z     x\z
   backward crossing composition:   x\y  y/z     x/z

coordination with id35

   application

   forward application:   x/y  y    x
   backward application:   y  x\y     x

   composition

   forward composition:   x/y  y/z     x/z
   backward composition:  y\z  x\y     x\z
   forward crossing composition:   x/y  y\z     x\z
   backward crossing composition:   x\y  y/z     x/z

combinatory rules

   application

   forward application:   x/y  y    x
   backward application:   y  x\y     x

   composition

   forward composition:   x/y  y/z     x/z
   backward composition:   y\z  x\y     x\z
   forward crossing composition:   x/y  y\z     x\z
   backward crossing composition:   x\y  y/z     x/z

   type-raising

   forward type-raising:   x    y / (y\x)
   backward type-raising:   x    y \ (y/x)

   coordination <&>

   x  conj  x    x

combinatory rules 3 : type-raising

   turns an argument into a function

   forward type-raising: x    t / (t\x)
   backward type-raising:   x    t \ (t/x)

for instance   
   subject type-raising:   np     s / (s \ np)
   object type-raising:   np    (s\np) \ ((s\np) / np)

combinatory rules 3 : type-raising

   application

   forward application:   x/y  y    x
   backward application:   y  x\y     x

   type-raising

   forward type-raising:   x    y / (y\x)
   backward type-raising:   x    y \ (y/x)
   subject type-raising:   np     s / (s \ np)
   object type-raising:   np    (s\np) \ ((s\np) / np)

   coordination <&>

   x  conj  x    x

combinatory rules 3 : type-raising

id35 (id35)

   id35: steedman in 1986

   pushing grammar down to lexicon.
   with just a few rules: application, composition, type-raising

   we   ve looked at only syntactic part of id35
   a lot more in the semantic part of id35 (using id198)

   parsing complexity:

   o(n^6)

   local expert!

   luke zettlemoyer (https://www.cs.washington.edu/people/faculty/lsz)

