nlp
introduction to nlp
classic parsing methods



      s -> np vp
      np -> dt n | np pp
      pp -> prp np
      vp -> v np | vp pp
      dt -> 'a' | 'the'
      n -> 'child' | 'cake' | 'fork'
      prp -> 'with' | 'to'
      v -> 'saw' | 'ate'
parsing as search
there are two types of constraints on the parses
from the input sentence
from the grammar
therefore, two general approaches to parsing
top-down
bottom-up
s
top down parsing
      s -> np vp
      np -> dt n | np pp
      pp -> prp np
      vp -> v np | vp pp
      dt -> 'a' | 'the'
      n -> 'child' | 'cake' | 'fork'
      prp -> 'with' | 'to'
      v -> 'saw' | 'ate'
s
vp
np
top down parsing
      s -> np vp
      np -> dt n | np pp
      pp -> prp np
      vp -> v np | vp pp
      dt -> 'a' | 'the'
      n -> 'child' | 'cake' | 'fork'
      prp -> 'with' | 'to'
      v -> 'saw' | 'ate'
s
vp
np
top down parsing
pp
np
      s -> np vp
      np -> dt n | np pp
      pp -> prp np
      vp -> v np | vp pp
      dt -> 'a' | 'the'
      n -> 'child' | 'cake' | 'fork'
      prp -> 'with' | 'to'
      v -> 'saw' | 'ate'
s
vp
np
top down parsing
pp
np
      s -> np vp
      np -> dt n | np pp
      pp -> prp np
      vp -> v np | vp pp
      dt -> 'a' | 'the'
      n -> 'child' | 'cake' | 'fork'
      prp -> 'with' | 'to'
      v -> 'saw' | 'ate'
s
vp
np
top down parsing
n
dt
      s -> np vp
      np -> dt n | np pp
      pp -> prp np
      vp -> v np | vp pp
      dt -> 'a' | 'the'
      n -> 'child' | 'cake' | 'fork'
      prp -> 'with' | 'to'
      v -> 'saw' | 'ate'
s
top down parsing
      s -> np vp
      np -> dt n | np pp
      pp -> prp np
      vp -> v np | vp pp
      dt -> 'a' | 'the'
      n -> 'child' | 'cake' | 'fork'
      prp -> 'with' | 'to'
      v -> 'saw' | 'ate'
the
fork
the
child
ate
cake
the
with
bottom up parsing
      s -> np vp
      np -> dt n | np pp
      pp -> prp np
      vp -> v np | vp pp
      dt -> 'a' | 'the'
      n -> 'child' | 'cake' | 'fork'
      prp -> 'with' | 'to'
      v -> 'saw' | 'ate'
bottom up vs. top down methods
bottom up
explores options that won   t lead to a full parse
example: shift-reduce (srparser in nltk)
example: cky (cocke-kasami-younger)
top down
explores options that don   t match the full sentence
example: recursive descent (rdparser in nltk)
example: earley parser
id145
caches of intermediate results (memoization) 
recursive descent parser
in nltk
>>> from nltk.app import rdparser;
>>> rdparser())
introduction to nlp
id132
id132
a bottom-up parser
tries to match the rhs of a production until it can build an s
shift operation
each word in the input sentence is pushed onto a stack
reduce-n operation
if the top n words on the top of the stack match the rhs of a production, then they are popped and replaced by the lhs of the production 
breadth-first search
stopping condition
the process stops when the input sentence has been processed and s has been popped from the stack
id132 example
    [ * the child ate the cake]
  s [ 'the' * child ate the cake]
  r [ dt * child ate the cake]
  s [ dt 'child' * ate the cake]
  r [ dt n * ate the cake]
  r [ np * ate the cake]
  s [ np 'ate' * the cake]
  r [ np v * the cake]
  s [ np v 'the' * cake]
  r [ np v dt * cake]
  s [ np v dt 'cake' * ]
  r [ np v dt n * ]
  r [ np v np * ]
  r [ np vp * ]
  r [ s * ]
(s (np (dt the) (n child)) (vp (v ate) (np (dt the) (n cake))))
id132
in nltk
>>> from nltk.app import srparser;
>>> srparser())
nlp
