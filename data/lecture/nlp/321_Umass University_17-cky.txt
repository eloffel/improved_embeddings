cky  (11/10)

cs 585, fall 2015

introduction to natural language processing

http://people.cs.umass.edu/~brenocon/inlp2015/

brendan o   connor

college of information and computer sciences

university of massachusetts amherst

sunday, november 22, 15

id18s
    a context-free grammar has

    a start symbol
    production rules:  a -> b c d ...
    one symbol on left
    one or more symbols on right
   
   

    non-terminals vs terminal symbols

non-terminals:  s, np, vp
terminals:  e.g. words (leaves of tree)

via a rewrite process.
    multiple rules starting with e.g. a:

multiple possible rewrites of a

    id18 can    generate    a set of strings (often in   nite)

    more general goal:  generative model of language

    other examples?

sunday, november 22, 15

2

ambiguity

    there may be many parses for a single sentence

sunday, november 22, 15

3

prepositional attachment ambiguity

i ate some dessert with a fork.

sunday, november 22, 15

19

prepositional attachment ambiguity

i ate some dessert with a fork.

s

np

vp

i

v

np

ate

np

pp

some dessert

with a fork

sunday, november 22, 15

19

prepositional attachment ambiguity

i ate some dessert with a fork.

s

np

vp

i

v

np

ate

np

pp

some dessert

with a fork

s

np

vp

i

v

np

pp

ate

some dessert

with a fork

sunday, november 22, 15

19

prepositional attachment ambiguity

i ate some dessert with a fork.

s

np

vp

i

v

np

ate

np

pp

some dessert

with a fork

s

np

vp

i

v

np

pp

ate

some dessert

with a fork

sunday, november 22, 15

19

prepositional attachment ambiguity

i ate some dessert with a fork.

s

np

vp

i

v

np

ate

np

pp

some dessert

with a fork

s

np

vp

i

v

np

pp

ate

some dessert

with a fork

both are grammatical; is syntax enough to disambiguate?

19

sunday, november 22, 15

questions

    what is a good representation?
    id18
    what is an ef   cient algorithm to parse?
    cky

sunday, november 22, 15

9

cky algorithm
cocke   younger   kasami
    given a id18 and a sentence, ef   ciently answer:
    recognizer:  does a parse exist for it?
    parser:  enumerate parses
    weighted cky with a weighted/prob id18:
    find the most probable parse
    id145!
    we can construct possible local subtrees
    maintain these partial hypotheses, bottom-up
    infer the    parse forest    of all possible trees

sunday, november 22, 15

10

binarized rules

necessary for cky algorithm
can convert to equivalent binarized grammar
id145 parsing methods

section 13.4.

11

sunday, november 22, 15

s     np vp
s     aux np vp
s     vp

np     pronoun
np     proper-noun
np     det nominal
nominal     noun

s     np vp
s     x1 vp
x1     aux np
s     book | include | prefer
s     verb np
s     x2 pp
s     verb pp
s     vp pp
np     i | she | me
np     twa | houston
np     det nominal
nominal     book |    ight | meal | money

draft

draft

completed parse table for book the    ight through houston.

0

1

2

3

4

5

cky recognizer
    fill in all length-1 spans with 
    go bottom-up: progressively 

possible nonterminals.

   ll each cell with possible 
states, based on possible 
combinations below.
    if the top cell [0,5] can 

expand from root, then 
accept!

    to get one of possible 
parses: trace backpointers
    id145: 

what   s below the cell does 
not matter

figure 13.8 l1 grammar and its conversion to cnf. note that although they aren   t
shown here all the original lexical entries from l1 carry over unchanged as well.

sunday, november 22, 15

12

figure 13.9
(j&m has a slightly different cell 
ordering.  both ok.)
given all this, cky recognition is simply a matter of    lling the parse table in

15

section 13.4.

id145 parsing methods

13draft

all the ways to    ll the [i,j]th cell in the cky table.

figure 13.11

sunday, november 22, 15

cky parsing
the algorithm given in fig. 13.10 is a recognizer, not a parser; for it to succeed it
simply has to    nd an s in cell [0,n]. to turn it into a parser capable of returning all

figure 13.8 l1 grammar and its conversion to cnf. note that although they aren   t
shown here all the original lexical entries from l1 carry over unchanged as well.

chapter

cky recognizer

draft
                add  a to cell [i,j] draft

ambiguity problem rears its head again in syntactic processing, and how it ultimately
makes simplistic approaches based on backtracking infeasible.
the sections that follow then present the cocke-kasami-younger (cky) algo-
rithm (kasami, 1965; younger, 1967), the earley algorithm (earley, 1970), and the
(j&m has a slightly different cell 
chart parsing approach (kay, 1986; kaplan, 1973). these approaches all combine in-
ordering.  both ok.)
sights from bottom-up and top-down parsing with id145 to ef   ciently
handle complex inputs. recall that we   ve already seen several applications of dynamic
programming algorithms in earlier chapters     minimum-edit-distance, viterbi, for-

s     np vp
s     aux np vp
s     vp
np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     verb np pp
vp     verb pp
vp     vp pp
pp     preposition np
figure 13.1

2
det     that | this | a
noun     book |    ight | meal | money
verb     book | include | prefer
pronoun     i | she | me
proper-noun     houston | twa
aux     does
preposition     from | to | on | near | through

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,

completed parse table for book the    ight through houston.

parsing with context-free grammars
0

the l1 miniature english grammar and lexicon.

figure 13.9

sunday, november 22, 15

1

3

4

5

13.

14

given all this, cky recognition is simply a matter of    lling the parse table in

figure 13.8 l1 grammar and its conversion to cnf. note that although they aren   t
shown here all the original lexical entries from l1 carry over unchanged as well.

chapter

cky recognizer

draft
                add  a to cell [i,j] draft

ambiguity problem rears its head again in syntactic processing, and how it ultimately
makes simplistic approaches based on backtracking infeasible.
the sections that follow then present the cocke-kasami-younger (cky) algo-
rithm (kasami, 1965; younger, 1967), the earley algorithm (earley, 1970), and the
(j&m has a slightly different cell 
chart parsing approach (kay, 1986; kaplan, 1973). these approaches all combine in-
ordering.  both ok.)
sights from bottom-up and top-down parsing with id145 to ef   ciently
handle complex inputs. recall that we   ve already seen several applications of dynamic
programming algorithms in earlier chapters     minimum-edit-distance, viterbi, for-

s     np vp
s     aux np vp
s     vp
np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     verb np pp
vp     verb pp
vp     vp pp
pp     preposition np
figure 13.1

2
det     that | this | a
noun     book |    ight | meal | money
verb     book | include | prefer
pronoun     i | she | me
proper-noun     houston | twa
aux     does
preposition     from | to | on | near | through

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,

completed parse table for book the    ight through houston.

parsing with context-free grammars
0

the l1 miniature english grammar and lexicon.

figure 13.9

sunday, november 22, 15

1

3

4

5

13.

15

given all this, cky recognition is simply a matter of    lling the parse table in

figure 13.8 l1 grammar and its conversion to cnf. note that although they aren   t
shown here all the original lexical entries from l1 carry over unchanged as well.

chapter

cky recognizer

draft
                add  a to cell [i,j] draft

ambiguity problem rears its head again in syntactic processing, and how it ultimately
makes simplistic approaches based on backtracking infeasible.
the sections that follow then present the cocke-kasami-younger (cky) algo-
rithm (kasami, 1965; younger, 1967), the earley algorithm (earley, 1970), and the
(j&m has a slightly different cell 
chart parsing approach (kay, 1986; kaplan, 1973). these approaches all combine in-
ordering.  both ok.)
sights from bottom-up and top-down parsing with id145 to ef   ciently
handle complex inputs. recall that we   ve already seen several applications of dynamic
programming algorithms in earlier chapters     minimum-edit-distance, viterbi, for-

s     np vp
s     aux np vp
s     vp
np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     verb np pp
vp     verb pp
vp     vp pp
pp     preposition np
figure 13.1

2
det     that | this | a
noun     book |    ight | meal | money
verb     book | include | prefer
pronoun     i | she | me
proper-noun     houston | twa
aux     does
preposition     from | to | on | near | through

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,

completed parse table for book the    ight through houston.

parsing with context-free grammars
0

the l1 miniature english grammar and lexicon.

figure 13.9

sunday, november 22, 15

1

3

4

5

13.

15

given all this, cky recognition is simply a matter of    lling the parse table in

figure 13.8 l1 grammar and its conversion to cnf. note that although they aren   t
shown here all the original lexical entries from l1 carry over unchanged as well.

chapter

cky recognizer

draft
                add  a to cell [i,j] draft

ambiguity problem rears its head again in syntactic processing, and how it ultimately
makes simplistic approaches based on backtracking infeasible.
the sections that follow then present the cocke-kasami-younger (cky) algo-
rithm (kasami, 1965; younger, 1967), the earley algorithm (earley, 1970), and the
(j&m has a slightly different cell 
chart parsing approach (kay, 1986; kaplan, 1973). these approaches all combine in-
ordering.  both ok.)
sights from bottom-up and top-down parsing with id145 to ef   ciently
handle complex inputs. recall that we   ve already seen several applications of dynamic
programming algorithms in earlier chapters     minimum-edit-distance, viterbi, for-

s     np vp
s     aux np vp
s     vp
np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     verb np pp
vp     verb pp
vp     vp pp
pp     preposition np
figure 13.1

2
det     that | this | a
noun     book |    ight | meal | money
verb     book | include | prefer
pronoun     i | she | me
proper-noun     houston | twa
aux     does
preposition     from | to | on | near | through

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,

completed parse table for book the    ight through houston.

parsing with context-free grammars
0

the l1 miniature english grammar and lexicon.

figure 13.9

sunday, november 22, 15

1

3

4

5

13.

15

given all this, cky recognition is simply a matter of    lling the parse table in

figure 13.8 l1 grammar and its conversion to cnf. note that although they aren   t
shown here all the original lexical entries from l1 carry over unchanged as well.

chapter

cky recognizer

draft
                add  a to cell [i,j] draft

ambiguity problem rears its head again in syntactic processing, and how it ultimately
makes simplistic approaches based on backtracking infeasible.
the sections that follow then present the cocke-kasami-younger (cky) algo-
rithm (kasami, 1965; younger, 1967), the earley algorithm (earley, 1970), and the
(j&m has a slightly different cell 
chart parsing approach (kay, 1986; kaplan, 1973). these approaches all combine in-
ordering.  both ok.)
sights from bottom-up and top-down parsing with id145 to ef   ciently
handle complex inputs. recall that we   ve already seen several applications of dynamic
programming algorithms in earlier chapters     minimum-edit-distance, viterbi, for-

s     np vp
s     aux np vp
s     vp
np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     verb np pp
vp     verb pp
vp     vp pp
pp     preposition np
figure 13.1

2
det     that | this | a
noun     book |    ight | meal | money
verb     book | include | prefer
pronoun     i | she | me
proper-noun     houston | twa
aux     does
preposition     from | to | on | near | through

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,

completed parse table for book the    ight through houston.

parsing with context-free grammars
0

the l1 miniature english grammar and lexicon.

figure 13.9

sunday, november 22, 15

1

3

4

5

13.

15

given all this, cky recognition is simply a matter of    lling the parse table in

figure 13.8 l1 grammar and its conversion to cnf. note that although they aren   t
shown here all the original lexical entries from l1 carry over unchanged as well.

chapter

cky recognizer

draft
                add  a to cell [i,j] draft

ambiguity problem rears its head again in syntactic processing, and how it ultimately
makes simplistic approaches based on backtracking infeasible.
the sections that follow then present the cocke-kasami-younger (cky) algo-
rithm (kasami, 1965; younger, 1967), the earley algorithm (earley, 1970), and the
(j&m has a slightly different cell 
chart parsing approach (kay, 1986; kaplan, 1973). these approaches all combine in-
ordering.  both ok.)
sights from bottom-up and top-down parsing with id145 to ef   ciently
handle complex inputs. recall that we   ve already seen several applications of dynamic
programming algorithms in earlier chapters     minimum-edit-distance, viterbi, for-

s     np vp
s     aux np vp
s     vp
np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     verb np pp
vp     verb pp
vp     vp pp
pp     preposition np
figure 13.1

2
det     that | this | a
noun     book |    ight | meal | money
verb     book | include | prefer
pronoun     i | she | me
proper-noun     houston | twa
aux     does
preposition     from | to | on | near | through

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,

completed parse table for book the    ight through houston.

parsing with context-free grammars
0

the l1 miniature english grammar and lexicon.

figure 13.9

sunday, november 22, 15

1

3

4

5

13.

15

given all this, cky recognition is simply a matter of    lling the parse table in

figure 13.8 l1 grammar and its conversion to cnf. note that although they aren   t
shown here all the original lexical entries from l1 carry over unchanged as well.

chapter

cky recognizer

draft
                add  a to cell [i,j] draft

ambiguity problem rears its head again in syntactic processing, and how it ultimately
makes simplistic approaches based on backtracking infeasible.
the sections that follow then present the cocke-kasami-younger (cky) algo-
rithm (kasami, 1965; younger, 1967), the earley algorithm (earley, 1970), and the
(j&m has a slightly different cell 
chart parsing approach (kay, 1986; kaplan, 1973). these approaches all combine in-
ordering.  both ok.)
sights from bottom-up and top-down parsing with id145 to ef   ciently
handle complex inputs. recall that we   ve already seen several applications of dynamic
programming algorithms in earlier chapters     minimum-edit-distance, viterbi, for-

s     np vp
s     aux np vp
s     vp
np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     verb np pp
vp     verb pp
vp     vp pp
pp     preposition np
figure 13.1

2
det     that | this | a
noun     book |    ight | meal | money
verb     book | include | prefer
pronoun     i | she | me
proper-noun     houston | twa
aux     does
preposition     from | to | on | near | through

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,

completed parse table for book the    ight through houston.

parsing with context-free grammars
0

the l1 miniature english grammar and lexicon.

figure 13.9

sunday, november 22, 15

1

3

4

5

13.

15

given all this, cky recognition is simply a matter of    lling the parse table in

figure 13.8 l1 grammar and its conversion to cnf. note that although they aren   t
shown here all the original lexical entries from l1 carry over unchanged as well.

chapter

cky recognizer

draft
                add  a to cell [i,j] draft

ambiguity problem rears its head again in syntactic processing, and how it ultimately
makes simplistic approaches based on backtracking infeasible.
the sections that follow then present the cocke-kasami-younger (cky) algo-
rithm (kasami, 1965; younger, 1967), the earley algorithm (earley, 1970), and the
(j&m has a slightly different cell 
chart parsing approach (kay, 1986; kaplan, 1973). these approaches all combine in-
ordering.  both ok.)
sights from bottom-up and top-down parsing with id145 to ef   ciently
handle complex inputs. recall that we   ve already seen several applications of dynamic
programming algorithms in earlier chapters     minimum-edit-distance, viterbi, for-

s     np vp
s     aux np vp
s     vp
np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     verb np pp
vp     verb pp
vp     vp pp
pp     preposition np
figure 13.1

2
det     that | this | a
noun     book |    ight | meal | money
verb     book | include | prefer
pronoun     i | she | me
proper-noun     houston | twa
aux     does
preposition     from | to | on | near | through

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,

completed parse table for book the    ight through houston.

parsing with context-free grammars
0

the l1 miniature english grammar and lexicon.

figure 13.9

sunday, november 22, 15

1

3

4

5

13.

15

given all this, cky recognition is simply a matter of    lling the parse table in

figure 13.8 l1 grammar and its conversion to cnf. note that although they aren   t
shown here all the original lexical entries from l1 carry over unchanged as well.

chapter

cky recognizer

draft
                add  a to cell [i,j] draft

ambiguity problem rears its head again in syntactic processing, and how it ultimately
makes simplistic approaches based on backtracking infeasible.
the sections that follow then present the cocke-kasami-younger (cky) algo-
rithm (kasami, 1965; younger, 1967), the earley algorithm (earley, 1970), and the
(j&m has a slightly different cell 
chart parsing approach (kay, 1986; kaplan, 1973). these approaches all combine in-
ordering.  both ok.)
sights from bottom-up and top-down parsing with id145 to ef   ciently
handle complex inputs. recall that we   ve already seen several applications of dynamic
programming algorithms in earlier chapters     minimum-edit-distance, viterbi, for-

s     np vp
s     aux np vp
s     vp
np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     verb np pp
vp     verb pp
vp     vp pp
pp     preposition np
figure 13.1

2
det     that | this | a
noun     book |    ight | meal | money
verb     book | include | prefer
pronoun     i | she | me
proper-noun     houston | twa
aux     does
preposition     from | to | on | near | through

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,

completed parse table for book the    ight through houston.

parsing with context-free grammars
0

the l1 miniature english grammar and lexicon.

figure 13.9

sunday, november 22, 15

1

3

4

5

13.

15

given all this, cky recognition is simply a matter of    lling the parse table in

figure 13.8 l1 grammar and its conversion to cnf. note that although they aren   t
shown here all the original lexical entries from l1 carry over unchanged as well.

chapter

cky recognizer

draft
                add  a to cell [i,j] draft

ambiguity problem rears its head again in syntactic processing, and how it ultimately
makes simplistic approaches based on backtracking infeasible.
the sections that follow then present the cocke-kasami-younger (cky) algo-
rithm (kasami, 1965; younger, 1967), the earley algorithm (earley, 1970), and the
(j&m has a slightly different cell 
chart parsing approach (kay, 1986; kaplan, 1973). these approaches all combine in-
ordering.  both ok.)
sights from bottom-up and top-down parsing with id145 to ef   ciently
handle complex inputs. recall that we   ve already seen several applications of dynamic
programming algorithms in earlier chapters     minimum-edit-distance, viterbi, for-

s     np vp
s     aux np vp
s     vp
np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     verb np pp
vp     verb pp
vp     vp pp
pp     preposition np
figure 13.1

2
det     that | this | a
noun     book |    ight | meal | money
verb     book | include | prefer
pronoun     i | she | me
proper-noun     houston | twa
aux     does
preposition     from | to | on | near | through

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,

completed parse table for book the    ight through houston.

parsing with context-free grammars
0

the l1 miniature english grammar and lexicon.

figure 13.9

sunday, november 22, 15

1

3

4

5

13.

15

given all this, cky recognition is simply a matter of    lling the parse table in

figure 13.8 l1 grammar and its conversion to cnf. note that although they aren   t
shown here all the original lexical entries from l1 carry over unchanged as well.

chapter

cky recognizer

draft
                add  a to cell [i,j] draft

ambiguity problem rears its head again in syntactic processing, and how it ultimately
makes simplistic approaches based on backtracking infeasible.
the sections that follow then present the cocke-kasami-younger (cky) algo-
rithm (kasami, 1965; younger, 1967), the earley algorithm (earley, 1970), and the
(j&m has a slightly different cell 
chart parsing approach (kay, 1986; kaplan, 1973). these approaches all combine in-
ordering.  both ok.)
sights from bottom-up and top-down parsing with id145 to ef   ciently
handle complex inputs. recall that we   ve already seen several applications of dynamic
programming algorithms in earlier chapters     minimum-edit-distance, viterbi, for-

s     np vp
s     aux np vp
s     vp
np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     verb np pp
vp     verb pp
vp     vp pp
pp     preposition np
figure 13.1

2
det     that | this | a
noun     book |    ight | meal | money
verb     book | include | prefer
pronoun     i | she | me
proper-noun     houston | twa
aux     does
preposition     from | to | on | near | through

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,

completed parse table for book the    ight through houston.

parsing with context-free grammars
0

the l1 miniature english grammar and lexicon.

figure 13.9

sunday, november 22, 15

1

3

4

5

13.

15

given all this, cky recognition is simply a matter of    lling the parse table in

figure 13.8 l1 grammar and its conversion to cnf. note that although they aren   t
shown here all the original lexical entries from l1 carry over unchanged as well.

chapter

cky recognizer

draft
                add  a to cell [i,j] draft

ambiguity problem rears its head again in syntactic processing, and how it ultimately
makes simplistic approaches based on backtracking infeasible.
the sections that follow then present the cocke-kasami-younger (cky) algo-
rithm (kasami, 1965; younger, 1967), the earley algorithm (earley, 1970), and the
(j&m has a slightly different cell 
chart parsing approach (kay, 1986; kaplan, 1973). these approaches all combine in-
ordering.  both ok.)
sights from bottom-up and top-down parsing with id145 to ef   ciently
handle complex inputs. recall that we   ve already seen several applications of dynamic
programming algorithms in earlier chapters     minimum-edit-distance, viterbi, for-

s     np vp
s     aux np vp
s     vp
np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     verb np pp
vp     verb pp
vp     vp pp
pp     preposition np
figure 13.1

2
det     that | this | a
noun     book |    ight | meal | money
verb     book | include | prefer
pronoun     i | she | me
proper-noun     houston | twa
aux     does
preposition     from | to | on | near | through

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,

completed parse table for book the    ight through houston.

parsing with context-free grammars
0

the l1 miniature english grammar and lexicon.

figure 13.9

sunday, november 22, 15

1

3

4

5

13.

15

given all this, cky recognition is simply a matter of    lling the parse table in

figure 13.8 l1 grammar and its conversion to cnf. note that although they aren   t
shown here all the original lexical entries from l1 carry over unchanged as well.

chapter

cky recognizer

draft
                add  a to cell [i,j] draft

ambiguity problem rears its head again in syntactic processing, and how it ultimately
makes simplistic approaches based on backtracking infeasible.
the sections that follow then present the cocke-kasami-younger (cky) algo-
rithm (kasami, 1965; younger, 1967), the earley algorithm (earley, 1970), and the
(j&m has a slightly different cell 
chart parsing approach (kay, 1986; kaplan, 1973). these approaches all combine in-
ordering.  both ok.)
sights from bottom-up and top-down parsing with id145 to ef   ciently
handle complex inputs. recall that we   ve already seen several applications of dynamic
programming algorithms in earlier chapters     minimum-edit-distance, viterbi, for-

s     np vp
s     aux np vp
s     vp
np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     verb np pp
vp     verb pp
vp     vp pp
pp     preposition np
figure 13.1

2
det     that | this | a
noun     book |    ight | meal | money
verb     book | include | prefer
pronoun     i | she | me
proper-noun     houston | twa
aux     does
preposition     from | to | on | near | through

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,

completed parse table for book the    ight through houston.

parsing with context-free grammars
0

the l1 miniature english grammar and lexicon.

figure 13.9

sunday, november 22, 15

1

3

4

5

13.

16

given all this, cky recognition is simply a matter of    lling the parse table in

sunday, november 22, 15

17

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
visualizing probabilistic cky
            if exists rule a -> b c,
                add  a to cell [i,j] 

how do we fill in c(1,2)?

1

2

3

n

sunday, november 22, 15

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
visualizing probabilistic cky
            if exists rule a -> b c,
                add  a to cell [i,j] 

how do we fill in c(1,2)?

put together c(1,1)
and c(2,2).

1

2

3

n

sunday, november 22, 15

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
visualizing probabilistic cky
            if exists rule a -> b c,
                add  a to cell [i,j] 

how do we fill in c(1,3)?

1

2

3

n

sunday, november 22, 15

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
visualizing probabilistic cky
            if exists rule a -> b c,
                add  a to cell [i,j] 

how do we fill in c(1,3)?

one way    

1

2

3

n

sunday, november 22, 15

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
visualizing probabilistic cky
            if exists rule a -> b c,
                add  a to cell [i,j] 

how do we fill in c(1,3)?

one way    
another way.

1

2

3

n

sunday, november 22, 15

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
visualizing probabilistic cky
            if exists rule a -> b c,
                add  a to cell [i,j] 

how do we fill in c(1,n)?

1

2

3

n

sunday, november 22, 15

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
visualizing probabilistic cky
            if exists rule a -> b c,
                add  a to cell [i,j] 

how do we fill in c(1,n)?

n - 1 ways!

1

2

3

n

sunday, november 22, 15

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
visualizing probabilistic cky
            if exists rule a -> b c,
                add  a to cell [i,j] 

where n is the number of 
nonterminals in the grammar, and 
n is the length of the sentence

o(|n|n2) cells to fill
o(|n|2n) ways to fill each

o(n2) cells to    ll
up to n items per cell, thus
o(n n2) items to create

and
o(n2 n) ways to    ll a cell

1

2

3

n

sunday, november 22, 15

