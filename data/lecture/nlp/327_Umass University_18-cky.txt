cky  (11/12)

cs 585, fall 2015

introduction to natural language processing

http://people.cs.umass.edu/~brenocon/inlp2015/

brendan o   connor

college of information and computer sciences

university of massachusetts amherst

sunday, november 22, 15

cky

grammar
adj -> yummy
np -> foods
np -> store
np ->  np np
np ->  adj np

0:3

0:2

1:3

0:1

adj

1:2

np

2:3

np

yummy

0

1

foods

store

2

3
recognizer:  per span, record list of 
possible nonterminals

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,
                add  a to cell [i,j]    (recognizer)
                ... or ...
                 

add (a,b,c,  k) to cell [i,j]  (parser)

2

sunday, november 22, 15

parser:  per span, record 
possible ways the 
nonterminal was 
constructed.

cky

grammar
adj -> yummy
np -> foods
np -> store
np ->  np np
np ->  adj np

0:3

0:2

1:3

0:1

adj

1:2

np

2:3

np

yummy

0

1

foods

store

2

3
recognizer:  per span, record list of 
possible nonterminals

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,
                add  a to cell [i,j]    (recognizer)
                ... or ...
                 

add (a,b,c,  k) to cell [i,j]  (parser)

2

sunday, november 22, 15

parser:  per span, record 
possible ways the 
nonterminal was 
constructed.

cky

grammar
adj -> yummy
np -> foods
np -> store
np ->  np np
np ->  adj np

0:2

np

0:1

adj

yummy

0

1

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,
                add  a to cell [i,j]    (recognizer)
                ... or ...
                 

add (a,b,c,  k) to cell [i,j]  (parser)

2

sunday, november 22, 15

0:3

1:2

np

1:3

2:3

np

foods

store

2

3
recognizer:  per span, record list of 
possible nonterminals

parser:  per span, record 
possible ways the 
nonterminal was 
constructed.

cky

grammar
adj -> yummy
np -> foods
np -> store
np ->  np np
np ->  adj np

0:2

np

0:1

adj

yummy

0

1

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,
                add  a to cell [i,j]    (recognizer)
                ... or ...
                 

add (a,b,c,  k) to cell [i,j]  (parser)

2

sunday, november 22, 15

0:3

1:2

np

1:3

2:3

np

foods

store

2

3
recognizer:  per span, record list of 
possible nonterminals

parser:  per span, record 
possible ways the 
nonterminal was 
constructed.

cky

grammar
adj -> yummy
np -> foods
np -> store
np ->  np np
np ->  adj np

0:2

np

0:1

adj

yummy

0

1

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,
                add  a to cell [i,j]    (recognizer)
                ... or ...
                 

add (a,b,c,  k) to cell [i,j]  (parser)

2

sunday, november 22, 15

0:3

1:2

np

1:3

2:3

np

foods

store

2

3
recognizer:  per span, record list of 
possible nonterminals

parser:  per span, record 
possible ways the 
nonterminal was 
constructed.

cky

grammar
adj -> yummy
np -> foods
np -> store
np ->  np np
np ->  adj np

0:2

np

0:1

adj

yummy

0

1

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,
                add  a to cell [i,j]    (recognizer)
                ... or ...
                 

add (a,b,c,  k) to cell [i,j]  (parser)

2

sunday, november 22, 15

0:3

1:2

np

1:3

2:3

np

foods

store

2

3
recognizer:  per span, record list of 
possible nonterminals

parser:  per span, record 
possible ways the 
nonterminal was 
constructed.

cky

grammar
adj -> yummy
np -> foods
np -> store
np ->  np np
np ->  adj np

0:2

np

0:1

adj

yummy

0

1

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,
                add  a to cell [i,j]    (recognizer)
                ... or ...
                 

add (a,b,c,  k) to cell [i,j]  (parser)

2

sunday, november 22, 15

0:3

1:2

np

1:3
np

2:3

np

foods

store

2

3
recognizer:  per span, record list of 
possible nonterminals

parser:  per span, record 
possible ways the 
nonterminal was 
constructed.

cky

grammar
adj -> yummy
np -> foods
np -> store
np ->  np np
np ->  adj np

0:2

np

0:1

adj

yummy

0

1

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,
                add  a to cell [i,j]    (recognizer)
                ... or ...
                 

add (a,b,c,  k) to cell [i,j]  (parser)

2

sunday, november 22, 15

0:3

1:2

np

1:3
np

2:3

np

foods

store

2

3
recognizer:  per span, record list of 
possible nonterminals

parser:  per span, record 
possible ways the 
nonterminal was 
constructed.

cky

grammar
adj -> yummy
np -> foods
np -> store
np ->  np np
np ->  adj np

0:2

np

0:1

adj

yummy

0

1

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,
                add  a to cell [i,j]    (recognizer)
                ... or ...
                 

add (a,b,c,  k) to cell [i,j]  (parser)

3

sunday, november 22, 15

0:3

1:2

np

1:3
np

2:3

np

foods

store

2

3
recognizer:  per span, record list of 
possible nonterminals

parser:  per span, record 
possible ways the 
nonterminal was 
constructed.

cky

grammar
adj -> yummy
np -> foods
np -> store
np ->  np np
np ->  adj np

0:2

np

0:1

adj

yummy

0

1

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,
                add  a to cell [i,j]    (recognizer)
                ... or ...
                 

add (a,b,c,  k) to cell [i,j]  (parser)

3

sunday, november 22, 15

0:3

1:2

np

1:3
np

2:3

np

foods

store

2

3
recognizer:  per span, record list of 
possible nonterminals

parser:  per span, record 
possible ways the 
nonterminal was 
constructed.

cky

grammar
adj -> yummy
np -> foods
np -> store
np ->  np np
np ->  adj np

0:2

np

0:1

adj

yummy

0

1

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,
                add  a to cell [i,j]    (recognizer)
                ... or ...
                 

add (a,b,c,  k) to cell [i,j]  (parser)

3

sunday, november 22, 15

0:3

1:2

np

1:3
np

2:3

np

foods

store

2

3
recognizer:  per span, record list of 
possible nonterminals

parser:  per span, record 
possible ways the 
nonterminal was 
constructed.

cky

grammar
adj -> yummy
np -> foods
np -> store
np ->  np np
np ->  adj np

0:2

np

0:1

adj

yummy

0

1

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,
                add  a to cell [i,j]    (recognizer)
                ... or ...
                 

add (a,b,c,  k) to cell [i,j]  (parser)

4

sunday, november 22, 15

0:3

1:2

np

1:3
np

2:3

np

foods

store

2

3
recognizer:  per span, record list of 
possible nonterminals

parser:  per span, record 
possible ways the 
nonterminal was 
constructed.

cky

grammar
adj -> yummy
np -> foods
np -> store
np ->  np np
np ->  adj np

0:2

np

0:1

adj

yummy

0

1

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,
                add  a to cell [i,j]    (recognizer)
                ... or ...
                 

add (a,b,c,  k) to cell [i,j]  (parser)

4

sunday, november 22, 15

0:3

1:2

np

1:3
np

2:3

np

foods

store

2

3
recognizer:  per span, record list of 
possible nonterminals

parser:  per span, record 
possible ways the 
nonterminal was 
constructed.

cky

grammar
adj -> yummy
np -> foods
np -> store
np ->  np np
np ->  adj np

0:2

np

0:1

adj

yummy

0

1

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,
                add  a to cell [i,j]    (recognizer)
                ... or ...
                 

add (a,b,c,  k) to cell [i,j]  (parser)

4

sunday, november 22, 15

0:3

np

1:2

np

1:3
np

2:3

np

foods

store

2

3
recognizer:  per span, record list of 
possible nonterminals

parser:  per span, record 
possible ways the 
nonterminal was 
constructed.

cky

grammar
adj -> yummy
np -> foods
np -> store
np ->  np np
np ->  adj np

0:2

np

0:1

adj

yummy

0

1

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,
                add  a to cell [i,j]    (recognizer)
                ... or ...
                 

add (a,b,c,  k) to cell [i,j]  (parser)

4

sunday, november 22, 15

0:3

np

1:2

np

1:3
np

2:3

np

foods

store

2

3
recognizer:  per span, record list of 
possible nonterminals

parser:  per span, record 
possible ways the 
nonterminal was 
constructed.

cky

grammar
adj -> yummy
np -> foods
np -> store
np ->  np np
np ->  adj np

0:2

np

0:1

adj

yummy

0

1

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,
                add  a to cell [i,j]    (recognizer)
                ... or ...
                 

add (a,b,c,  k) to cell [i,j]  (parser)

4

sunday, november 22, 15

0:3

np

1:2

np

1:3
np

2:3

np

foods

store

2

3
recognizer:  per span, record list of 
possible nonterminals

parser:  per span, record 
possible ways the 
nonterminal was 
constructed.

cky

grammar
adj -> yummy
np -> foods
np -> store
np ->  np np
np ->  adj np

0:3

np

np

1:3
np

0:2

np

0:1

adj

1:2

np

2:3

np

yummy

0

1

foods

store

2

3
recognizer:  per span, record list of 
possible nonterminals

for cell [i,j]  (loop through them bottom-up)
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
            if exists rule a -> b c,
                add  a to cell [i,j]    (recognizer)
                ... or ...
                 

add (a,b,c,  k) to cell [i,j]  (parser)

4

sunday, november 22, 15

parser:  per span, record 
possible ways the 
nonterminal was 
constructed.

for cell [i,j]
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
visualizing probabilistic cky
            if exists rule a -> b c,
                add  a to cell [i,j] 

computational 
complexity ?

how do we fill in c(1,2)?

1

2

3

n

sunday, november 22, 15

for cell [i,j]
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
visualizing probabilistic cky
            if exists rule a -> b c,
                add  a to cell [i,j] 

computational 
complexity ?

how do we fill in c(1,2)?

put together c(1,1)
and c(2,2).

1

2

3

n

sunday, november 22, 15

for cell [i,j]
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
visualizing probabilistic cky
            if exists rule a -> b c,
                add  a to cell [i,j] 

computational 
complexity ?

how do we fill in c(1,3)?

1

2

3

n

sunday, november 22, 15

for cell [i,j]
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
visualizing probabilistic cky
            if exists rule a -> b c,
                add  a to cell [i,j] 

computational 
complexity ?

how do we fill in c(1,3)?

one way    

1

2

3

n

sunday, november 22, 15

for cell [i,j]
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
visualizing probabilistic cky
            if exists rule a -> b c,
                add  a to cell [i,j] 

computational 
complexity ?

how do we fill in c(1,3)?

one way    
another way.

1

2

3

n

sunday, november 22, 15

for cell [i,j]
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
visualizing probabilistic cky
            if exists rule a -> b c,
                add  a to cell [i,j] 

computational 
complexity ?

how do we fill in c(1,n)?

1

2

3

n

sunday, november 22, 15

for cell [i,j]
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
visualizing probabilistic cky
            if exists rule a -> b c,
                add  a to cell [i,j] 

computational 
complexity ?

how do we fill in c(1,n)?

n - 1 ways!

1

2

3

n

sunday, november 22, 15

for cell [i,j]
    for possible splitpoint k=(i+1)..(j-1):
        for every b in [i,k] and c in [k,j],
visualizing probabilistic cky
            if exists rule a -> b c,
                add  a to cell [i,j] 

computational 
complexity ?

how do we fill in c(1,n)?

n - 1 ways!

o(g n^3)

g = grammar 
constant

1

2

3

n

sunday, november 22, 15

