nlp
introduction to nlp
introduction to parsing
parsing programming languages
#include <stdio.h>
    
int main() 
{ 
  int n, reverse = 0; 
   
  printf("enter a number to reverse\n");
  scanf("%d",&n);   
 
  while (n != 0) 
  { 
    reverse = reverse * 10; 
    reverse = reverse + n%10; 
    n = n/10; 
  }    
  printf("reverse of entered number is = %d\n", reverse);
    
  return 0; 
}
parsing human languages
rather different than computer languages
can you think in which ways?
parsing human languages
rather different than computer languages
no types for words
no brackets around phrases
ambiguity
words
parses 
implied information
the parsing problem
parsing means associating tree structures to a sentence, given a grammar (often a id18)
there may be exactly one such tree structure
there may be many such structures
there may be none
grammars (e.g., id18) are declarative
they don   t specify how the parse tree will be constructed
syntactic ambiguities
pp attachment
i saw the man with the telescope
gaps
mary likes physics but hates chemistry
coordination scope
small boys and girls are playing
particles vs. prepositions
she ran up a large bill
gerund vs. adjective
frightening kids can cause trouble
applications of parsing
grammar checking
i want to return this shoes.
id53
how many people in sales make $40k or more per year?
machine translation
e.g., word order     svo vs. sov
information extraction
breaking bad takes place in new mexico.
speech generation
speech understanding
nlp
introduction to nlp
context-free grammars
context-free grammars
a context-free grammar is a 4-tuple (n,   ,r,s)
n: non-terminal symbols
   : terminal symbols (disjoint from n)
r: rules (a        ), where     is a string from (        n)*
s: start symbol from n
["the", "child", "ate", "the", "cake", "with", "the", "fork"]

      s -> np vp
      np -> dt n | np pp
      pp -> prp np
      vp -> v np | vp pp
      dt -> 'a' | 'the'
      n -> 'child' | 'cake' | 'fork'
      prp -> 'with' | 'to'
      v -> 'saw' | 'ate'
example
["the", "child", "ate", "the", "cake", "with", "the", "fork"]

      s -> np vp
      np -> dt n | np pp
      pp -> prp np
      vp -> v np | vp pp
      dt -> 'a' | 'the'
      n -> 'child' | 'cake' | 'fork'
      prp -> 'with' | 'to'
      v -> 'saw' | 'ate'
heads marked in bold face
example
phrase-structure grammars (1/2)
sentences are not just bags of words
alice bought bob flowers
bob bought alice flowers
context-free view of language
a prepositional phrase looks the same whether it is part of the subject np or part of the vp
constituent order
svo (subject verb object)
sov (subject object verb)
phrase-structure grammars (2/2)
auxiliary verbs
the dog may have eaten my homework
imperative sentences
leave the book on the table
interrogative sentences
did the customer have a complaint?
who had a complaint?
negative sentences
the customer didn   t have a complaint
    s -> np vp | aux np vp | vp
    np -> pron | det nom
    nom -> n | nom n | nom pp
    pp -> prp np
    vp -> v | v np | vp pp
    det -> 'the' | 'a' | 'this'
    pron -> 'he' | 'she'
    n -> 'book' | 'boys' | 'girl'
    prp -> 'with' | 'in'
    v -> 'takes' | 'take'
a longer example
what changes were made to the grammar?
    s -> np vp | aux np vp | vp
    np -> pron | det nom
    nom -> n | nom n | nom pp
    pp -> prp np
    vp -> v | v np | vp pp
    det -> 'the' | 'a' | 'this'
    pron -> 'he' | 'she'
    n -> 'book' | 'boys' | 'girl'
    prp -> 'with' | 'in'
    v -> 'takes' | 'take'
a longer example
    s -> np vp | aux np vp | vp
    np -> pron | det nom
    nom -> n | nom n | nom pp
    pp -> prp np
    vp -> v | v np | vp pp
    det -> 'the' | 'a' | 'this'
    pron -> 'he' | 'she'
    n -> 'book' | 'boys' | 'girl'
    prp -> 'with' | 'in'
    v -> 'takes' | 'take'
a longer example
id32 example
( (s 
    (np-sbj 
      (np (nnp pierre) (nnp vinken) )
      (, ,) 
      (adjp 
        (np (cd 61) (nns years) )
        (jj old) )
      (, ,) )
    (vp (md will) 
      (vp (vb join) 
        (np (dt the) (nn board) )
        (pp-clr (in as) 
          (np (dt a) (jj nonexecutive) (nn director) ))
        (np-tmp (nnp nov.) (cd 29) )))
    (. .) ))
( (s 
    (np-sbj (nnp mr.) (nnp vinken) )
    (vp (vbz is) 
      (np-prd 
        (np (nn chairman) )
        (pp (in of) 
          (np 
            (np (nnp elsevier) (nnp n.v.) )
            (, ,) 
            (np (dt the) (nnp dutch) (vbg publishing) (nn group) )))))
    (. .) ))
center embedding
center embedding
the rat ate the seed.
the rat that the cat ate ate the seed.
the rat that the cat that the dog ate ate ate the seed.
...
is this language a cfl?
notes
id18 cannot describe bounded recursion
competence vs. performance
id18s are equivalent to pdas
example
consider the language xnyn
stack is empty, input=xxxyyy
push * onto stack, input=xxyyy
push * onto stack, input=xyyy
push * onto stack, input=yyy
pop * from stack, input=yy
pop * from stack, input=y
pop * from stack, input=      


leftmost derivation
a leftmost derivation is a sequence of strings s1, s2, ..., sn
s1 = s, the start symbol
sn includes only terminal symbols
example:
[s]
[s] [np vp] 
[s] [np vp] [dt n vp] 
   
[s] [np vp] [dt n vp] ... [the child ate the cake with the fork]

s
leftmost derivation
nlp
