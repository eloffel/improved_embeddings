syntax intro

cs 585, fall 2015

introduction to natural language processing

http://people.cs.umass.edu/~brenocon/inlp2015/

brendan o   connor

college of information and computer sciences

university of massachusetts amherst

sunday, november 22, 15

[some slides borrowed from percy liang]

    what linguistic representations do we want?

sunday, november 22, 15

2

dependency parse trees?

the boy wants to go to new york city.

sunday, november 22, 15

9

frames?

sold

cynthia
the bike
seller predicate goods

to bob

for $200

buyer

price

sunday, november 22, 15

10

logical forms?

what is the largest city in california?

argmax( x.city(x) ^ loc(x, ca),  x.population(x))

sunday, november 22, 15

11

levels of linguistic analyses

natural language utterance

sunday, november 22, 15

16

levels of linguistic analyses

syntax: what is grammatical?

natural language utterance

sunday, november 22, 15

16

levels of linguistic analyses

semantics: what does it mean?

syntax: what is grammatical?

natural language utterance

sunday, november 22, 15

16

levels of linguistic analyses

pragmatics: what does it do?

semantics: what does it mean?

syntax: what is grammatical?

natural language utterance

sunday, november 22, 15

16

analogy with programming languages

syntax: no compiler errors

semantics: no implementation bugs

pragmatics: implemented the right algorithm

sunday, november 22, 15

17

analogy with programming languages

syntax: no compiler errors

semantics: no implementation bugs

pragmatics: implemented the right algorithm

di   erent syntax, same semantics (5):

2 + 3 , 3 + 2

sunday, november 22, 15

17

analogy with programming languages

syntax: no compiler errors

semantics: no implementation bugs

pragmatics: implemented the right algorithm

di   erent syntax, same semantics (5):

2 + 3 , 3 + 2
same syntax, di   erent semantics (1 and 1.5):

3 / 2 (python 2.7)

6, 3 / 2 (python 3)

sunday, november 22, 15

17

analogy with programming languages

syntax: no compiler errors

semantics: no implementation bugs

pragmatics: implemented the right algorithm

di   erent syntax, same semantics (5):

2 + 3 , 3 + 2
same syntax, di   erent semantics (1 and 1.5):

3 / 2 (python 2.7)

6, 3 / 2 (python 3)

good semantics, bad pragmatics:

correct implementation of deep neural network

for estimating coin    ip prob.

sunday, november 22, 15

17

constituency

    group of words that behaves like a single unit
    e.g.    noun phrase    could be any of
context-free grammars

3

section 12.2.

harry the horse
the broadway coppers
they

a high-class spot such as mindy   s
the reason he comes into the hot box
three parties from brooklyn

how do we know that these words group together (or    form constituents   )? one
    commonalities in behavior (allowable left/right 
piece of evidence is that they can all appear in similar syntactic environments, for
example before a verb.
contexts?)

three parties from brooklyn arrive...
a high-class spot such as mindy   s attracts...
the broadway coppers love...
they sit

but while the whole noun phrase can occur before a verb, this is not true of each of
the individual words that make up a noun phrase. the following are not grammatical
sentences of english (recall that we use an asterisk (*) to mark fragments that are not
grammatical english sentences):

14

sunday, november 22, 15

*from arrive... *as attracts...

np

rules

lexicon

id18s
formal grammars of english

(1900), but was not formalized until chomsky (1956) and, independently, backus
(1959).
a context-free grammar consists of a set of rules or productions, each of which
expresses the ways that symbols of the language can be grouped and ordered together,
chapter 12.
and a lexicon of words and symbols. for example, the following productions express
    a formal grammar
that a np (or noun phrase), can be composed of either a propernoun or a determiner
(det) followed by a nominal; a nominal can be one or more nouns.

a grammar on constituent structure dates back to the psychologist wilhelm wundt
(1900), but was not formalized until chomsky (1956) and, independently, backus
np     det nominal
np     propernoun
a context-free grammar consists of a set of rules or productions, each of which
expresses the ways that symbols of the language can be grouped and ordered together,
and a lexicon of words and symbols. for example, the following productions express
that a np (or noun phrase), can be composed of either a propernoun or a determiner
(det) followed by a nominal; a nominal can be one or more nouns.

    1. de   nes (   generates   ) a set of strings
    2. can be used to analyze a string: is it in the set or not?
    theoretical goal:  what is the grammar for all of 
nominal     noun | nominal noun
    id18 for noun phrases

english?
rules with others like the following which express facts about the lexicon:

context-free rules can be hierarchically embedded, so we can combine the previous

np     det nominal
np     propernoun

det     a
det     the
noun        ight
context-free rules can be hierarchically embedded, so we can combine the previous
    was j&k a id18?  how to add adjectives?

rules with others like the following which express facts about the lexicon:

nominal     noun | nominal noun

the symbols that are used in a id18 are divided into two classes. the symbols that
correspond to words in the language (   the   ,    nightclub   ) are called terminal symbols;
the lexicon is the set of rules that introduce these terminal symbols. the symbols that
express clusters or generalizations of these are called non-terminals. in each context-
free rule, the item to the right of the arrow (   ) is an ordered list of one or more
terminals and non-terminals, while to the left of the arrow is a single non-terminal
symbol expressing some cluster or generalization. notice that in the lexicon, the non-

det     a
det     the
noun        ight

the symbols that are used in a id18 are divided into two classes. the symbols that

sunday, november 22, 15

non-terminal

terminal

15

sentence id18

rules

chapter

13.

lexicon
parsing with context-free grammars

the l1 miniature english grammar and lexicon.

det     that | this | a
noun     book |    ight | meal | money
verb     book | include | prefer
pronoun     i | she | me
proper-noun     houston | twa
aux     does
preposition     from | to | on | near | through

s     np vp
s     aux np vp
s     vp
np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     verb np pp
vp     verb pp
vp     vp pp
pp     preposition np
figure 13.1

draft

ambiguity problem rears its head again in syntactic processing, and how it ultimately
makes simplistic approaches based on backtracking infeasible.
the sections that follow then present the cocke-kasami-younger (cky) algo-
rithm (kasami, 1965; younger, 1967), the earley algorithm (earley, 1970), and the
chart parsing approach (kay, 1986; kaplan, 1973). these approaches all combine in-

example:     book that    ight

sunday, november 22, 15

16

