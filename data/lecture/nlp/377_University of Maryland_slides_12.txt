id33

cmsc 723 / ling 723 / inst 725

marine carpuat

fig credits: joakim nivre, dan 
jurafsky & james martin

id33

    formalizing dependency trees

    transition-based id33

    id132
    transition system
    oracle
    learning/predicting parsing actions

dependency grammars

    syntactic structure = lexical items linked by binary asymmetrical 

relations called dependencies 

dependency relations

example dependency parse

they hid the letter on the shelf

compare with constituent parse    what   s the relation?

dependency formalisms

    most general form: a graph g = (v,a)

    v vertices: usually one per word in sentence
    a arcs (set of ordered pairs of vertices): head-dependent relations between 

elements in v

    restricting to trees provide computational advantages

    single designated root node that has no incoming arcs
    except for root, each vertex has exactly one incoming arc
    unique path from root to each vertex in v

    each word has a single head
    dependency structure is connected
    there is a single root node from which there is a unique path to each word

projectivity

    arc from head to dependent is projective

    if there is a path from head to every word between head and 

dependent

    dependency tree is projective

    if all arcs are projective
    or equivalently, if it can be drawn with no crossing edges

    projective trees make computation easier
    but most theoretical frameworks do not assume projectivity

    need to capture long-distance dependencies, free word order

data-driven id33

goal: learn a good predictor of dependency graphs

input: sentence 
output: dependency graph/tree g = (v,a)

can be framed as a id170 task

- very large output space
- with interdependent labels 

2 dominant approaches: transition-based parsing and graph-based 
parsing

transition-based id33

    builds on id132

[aho & ullman, 1927]

    configuration

    stack
    input buffer of words
    set of dependency relations

    goal of parsing

    find a final configuration where
    all words accounted for
    relations form dependency tree

transition operators

    transitions: produce a new 
configuration given current 
configuration

    parsing is the task of 

    finding a sequence of transitions
    that leads from start state to 

desired goal state

    start state

    stack initialized with root node
    input buffer initialized with words 

in sentence

    dependency relation set = empty

    end state

    stack and word lists are empty
    set of dependency relations = final 

parse

arc standard transition system

    defines 3 transition operators [covington, 2001; nivre 2003] 
    left-arc:

    create head-dependent rel. between word at top of stack and 2nd word (under 

top)

    remove 2nd word from stack

    right-arc:

    create head-dependent rel. between word on 2nd word on stack and word on 

top

    remove word at top of stack 

    shift

    remove word at head of input buffer
    push it on the stack

arc standard transition systems

    preconditions

    root cannot have incoming arcs
    left-arc cannot be applied when root is the 2nd element in stack
    left-arc and right-arc require 2 elements in stack to be applied

transition-based dependency parser

    assume an oracle 

    parsing complexity
    linear in sentence 

length!

    greedy algorithm

    unlike viterbi for pos 

tagging

transition-based parsing illustrated

where to we get an oracle?

    multiclass classification problem

    input: current parsing state (e.g., current and previous configurations)
    output: one transition among all possible transitions 
    q: size of output space?

    supervised classifiers can be used

    e.g., id88
    open questions

    what are good features for this task?
    where do we get training examples?

generating training examples

    what we have in a treebank

    what we need to train an oracle

    pairs of configurations and 

predicted parsing action

generating training examples

    approach: simulate parsing to generate reference tree

    given

    a current config with stack s, dependency relations rc
    a reference parse (v,rp)

    do

let   s try it out

features

    configuration consist of stack, buffer, current set of relations

    typical features

    features focus on top level of stack
    use word forms, pos, and their location in stack and buffer

features example

    given configuration

    example of useful features

id33

    formalizing dependency trees

    transition-based id33

    id132
    transition system
    oracle
    learning/predicting parsing actions

