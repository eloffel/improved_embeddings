natural  language  processing

machine  translation  iii

dan  klein      uc  berkeley

1

syntactic  models

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

syntactic  decoding

29

30

31

32

33

34

35

36

37

38

39

40

41

42

43

44

45

46

47

48

flexible  syntax

49

soft syntactic mt: from chiang 2010

50

51

hiero  rules

from [chiang et al, 2005]

52

53

54

55

56

57

58

59

60

61

62

63

64

exploiting  gpus

65

lots  to  parse

   2.6  billion  words

66

lots  to  parse

   6  months  (cpu)

67

lots  to  parse

   3.6  days  (gpu)

68

cpu  parsing

    nlp  algorithms  achieve  speed  by  exploiting  
sparsity.
>98% sparsity

[petrov &  klein,  2007]

slide credit: slav petrov

69

cpu  parsing

  

       

grammar

s

np vp

skip  spans

skip  rules

70

cpu  parsing

cpu

71

cpu  parsing

cpu

72

cpu  parsing

cpu

cpu

73

the  future  of  hardware

74

the  future  of  hardware

75

the  future  of  hardware

76

the  future  of  hardware

16384

77

the  future  of  hardware

32  threads

78

the  future  of  hardware

add.s32   %r1, %r631, %r0;
ld.global.f32   %f81, [%r1];
ld.global.f32   %f82, [%r34];
mul.ftz.f32   %f94, %f82, %f81;
mov.f32   %f95, 0f3e002e23;
mov.f32   %f96, 0f00000000;
mad.f32   %f93, %f94, %f95, %f96;
shl.b32   %r2, %r646, 8;
add.s32   %r3, %r658, %r2;
shl.b32   %r4, %r3, 2;
add.s32   %r5, %r631, %r4;
mul.lo.s32  %r6, %r646, 588;
shl.b32   %r7, %r6, 1;
add.s32   %r8, %r5, %r7;
ld.global.f32   %f83, [%r8];
mul.ftz.f32   %f98, %f82, %f83;

warp

79

warps

warp

80

warps

warp  divergence

81

warps

82

warps

83

warps

warp  divergence

84

warps

warp  divergence

85

warps

coalescence

   

   

86

designing  gpu  algorithms

warp

coalescence

dense,  uniform  computation

87

designing  gpu  algorithms

cpu

irregular,
sparse

  

      

gpu
regular,
dense

  

88

designing  gpu  algorithms

cpu

irregular,
sparse

gpu
regular,
dense

  

      

  

      

  

[canny,  hall,  and  klein,  2013]

89

designing  gpu  algorithms

cky algorithm

90

cky  parsing

for  each  sentence:

for  each  span  (begin,  end):

for  each  split:

for  each  rule  (p     >  l  r):

score[begin,  end,  p]  
+=  rulescore[p     >  l  r]

*  score[begin,  split,  l]
*  score[split,  end,  r]

item  queue

grammar  
application

91

cky  parsing

for  each  sentence:

for  each  span  (begin,  end):

for  each  split:

applygrammar(begin,  split,  end)

item  queue

grammar  
application

92

cky  parsing

for  each  parse  item  in  sentence:

applygrammar(item)

item  queue

grammar  
application

93

cky  parsing

for  each  parse  item  in  sentence:

applygrammar(item)

cpu

gpu

94

gpu  parsing  pipeline
gpu
grammar

cpu
queue
(i,      k,      j)

(0,    1,    3)
(0,    1,    3)
(0,    2,    3)
(1,    2,    4)
(1,    3,    4)

   

3
2

s

np vp

95

parsing  speed

cpu

10  s/sec

gpu

190  s/sec

0

100

200
300
sentences per second

400

500

[canny, hall, and klein, 2013]

96

exploiting  sparsity

  

       

grammar

s

np vp

cpu  queuing

gpu  application

97

exploiting  sparsity

grammar

grammar

s

s

np vp

np vp

gpu  application

gpu  application

98

exploiting  sparsity

(0,    1,    3)
(0,    2,    3)
(1,    2,    4)
(1,    3,    4)
(2,    3,    5)
(2,    4,    5)
(3,    4,    6)
   

3
2

warp

99

exploiting  sparsity

s
s
s
s
s
s
s

np
np
np
np
np
np
np

vp
vp
vp
vp
vp
vp
vp

pp
pp
pp
pp
pp
pp
pp

   
   
   
   
   
   
   

(0,    1,    3)
(0,    2,    3)
(1,    2,    4)
(1,    3,    4)
(2,    3,    5)
(2,    4,    5)
(3,    4,    6)
   

100

exploiting  sparsity

warp  divergence

101

exploiting  sparsity

grammar

s

np vp

gpu  application

102

exploiting  sparsity

np
s
vp
pp

queue
(i,      k,      j)
(i,      k,      j)
(i,      k,      j)
(i,      k,      j)
(i,      k,      j)
(0,    1,    3)
(0,    1,    3)
(0,    1,    3)
(0,    1,    3)
(0,    1,    3)
(0,    2,    3)
(0,    2,    3)
(0,    2,    3)
(0,    2,    3)
(0,    2,    3)
   
   
   
   
   

vp

vp

s

s

np

np

pp

pp

np

pp

vp

pp

np

vp

in np

103

exploiting  sparsity

gpu

np
np
np
np
np
np
np
np
np
np
np
np
np
np
np

pp
pp
pp
pp
pp

cpu

np  queue

(i,      k,      j)

(0,    1,    3)
(0,    2,    3)
(1,    2,    4)
(1,    3,    4)

   

104

exploiting  sparsity

gpu

np
np
np
vp

np
np
np
vp
pp
np
pp
np
pp
np
vp np

cpu

vp  queue

(i,      k,      j)

(0,    1,    3)
(0,    2,    3)
(1,    2,    4)
(1,    3,    4)

   

105

parsing  speed

cpu

10  s/sec

0

100

gpu  min  

risk

190  s/sec
200

300

gpu  vit.
405  s/sec

400

500

106

