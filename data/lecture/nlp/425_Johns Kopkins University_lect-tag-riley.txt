intro
tsgs
tags

alternative grammatical formalisms

darcey riley

cs 465: natural language processing

december 7, 2012

darcey riley

alternative grammatical formalisms

why use other grammatical formalisms?

intro
tsgs
tags

id18s are useful for describing natural language.

unlike id157, they are expressive enough to
capture many dependencies in natural language.
unlike more expressive formalisms, they can be parsed
e   ciently in o(n3) time.

for instance, tag takes o(n6) time to parse.
there is probably no polynomial time algorithm to parse
id19s.

darcey riley

alternative grammatical formalisms

limitations of id18s

intro
tsgs
tags

id18s have trouble capturing non-local dependencies, such as
verb subcategorization frames.

s

s

np

vp

np

vp

n

v

np

pp

n

v

np

je   

put

dt

n

p

np

je   

saw

dt

n

pp

the

book

on

dt

n

the

book

p

np

the

table

on

dt

n

the

table

darcey riley

alternative grammatical formalisms

limitations of id18s

intro
tsgs
tags

id18s have trouble capturing non-local dependencies, such as
verb subcategorization frames.

v

v

put
0.5

saw
0.5

s

np

vp

n

v

np

pp

je   

dt

n

p

np

the

book

on

dt

n

the

table

darcey riley

alternative grammatical formalisms

what to do about the limitations of id18s?

intro
tsgs
tags

this is why a id18 read directly o    the id32 has
poor parsing performance.
one solution: create a di   erent id18 which captures this
dependency by annotating the nonterminals with additional
information capturing these dependencies.

could annotate with speci   c features, like the head word.
could automatically learn to cluster each symbol into
subsymbols.

s

np

vp[put]

n

v[put]

np

pp

je   

put

dt

n

p

np

the

book

on

dt

n

darcey riley

alternative grammatical formalisms

the

table

what to do about the limitations of id18s?

intro
tsgs
tags

another solution: use alternative grammatical formalisms.
this lecture will present two such formalisms:

tree substitution grammar (tsg)
id34 (tag)

there are many other such formalisms, notably combinatory
categorial grammar (id35).

darcey riley

alternative grammatical formalisms

what is a tree substitution grammar?

intro
tsgs
tags

a tsg is like a id18, but instead of rewriting as a string of
nonterminals and terminals, each nonterminal rewrites as a
whole tree fragment.

s

s

np
   
np

n
   
n

vp
   
vp

v
   
v

np
   
np

pp
   
pp

np
   
np

n

v

vp
   
vp

np
   
np

pp
   
pp

je   

put

dt
   
dt

n
   
n

p
   
p

np
   
np

je   

put

dt

p

n
   
n

np
   
np

the

book

on

dt
   
dt

n
   
n

the

table

the

book

on

dt

n
   
n

the

table

darcey riley

alternative grammatical formalisms

formal de   nition

intro
tsgs
tags

formally, a tsg is a 4-tuple g = (t , n, s, r)

t : terminals
n: nonterminals
s: distinguished start symbol
r: productions

each production is a tree fragment, also called an elementary
tree.

internal nodes are nonterminals.
leaf nodes can be terminals or nonterminals.
nonterminals at leaves are called frontier nodes or substitution
sites, marked with    .
these are the nonterminals which rewrite as elementary trees.

vp

np

np   

pp   

v

dt

n   

put

the

np

n

je   

darcey riley

alternative grammatical formalisms

formal de   nition

intro
tsgs
tags

the process of rewriting is called derivation.

it continues until there are no frontier nodes left to replace.
the result is called the derived tree.

as usual, once the derivation process is    nished, we can read
the sentence o    the leaves of the tree.

darcey riley

alternative grammatical formalisms

equivalence of id18s and tsgs

intro
tsgs
tags

tsgs and id18s are formally equivalent.
every id18 is just a tsg whose rules all have height 2.
every tsg can be converted to a id18 by    attening the rules.
so tsg is no more expressive than id18.
but in practice it   s usefulf or learning from the id32.
lets us capture long-distance dependencies, such as verb
subcategorization frames.
and because it   s formally equivalent to id18, we can still parse
in o(n3) time.

vp

np   

pp   

v

put

np

put

np   

pp   

darcey riley

alternative grammatical formalisms

what is a id34?

intro
tsgs
tags

tag is like tsg, except that in addition to substitution, we
also have an operation called adjunction.

substitution occurs at frontier nodes and adds things to the
bottom of the tree.

on the other hand, adjunction occurs at internal nodes, and
involves a di   erent kind of tree fragment, called auxiliary trees.
an auxiliary tree has a special foot node, marked with a    ,
that is the same nonterminal as its root node.

darcey riley

alternative grammatical formalisms

adjunction in action

intro
tsgs
tags

vp

s

vp   

adv

np

vp

quickly

n

v

np

justin

   red

dt

n

a

laser

darcey riley

alternative grammatical formalisms

adjunction in action

intro
tsgs
tags

vp

s

vp   

adv

quickly

np

n

vp

vp

justin

v

np

   red

dt

n

a

laser

darcey riley

alternative grammatical formalisms

adjunction in action

intro
tsgs
tags

s

np

n

vp

vp

adv

justin

v

np

quickly

   red

dt

n

a

laser

darcey riley

alternative grammatical formalisms

formal de   nition

intro
tsgs
tags

formally, a tag is a 5-tuple g = (t , n, s, e , a)

t : terminals
n: nonterminals
s: distinguished start symbol
e : elementary trees
a: auxiliary trees

some formulations of tag allow substitution as an operation.

others only allow adjunction.
these turn out to be equivalent.
if there is no substitution, the elementary trees e will only
have terminals on their frontiers.

darcey riley

alternative grammatical formalisms

formal properties

intro
tsgs
tags

not formally equivalent to id18!
tag can generate languages like anbnc n, a, b, c     t and
ww , w     t    , which are not context free.

ww corresponds to cross-serial dependencies, as in the
sentence    jason gave a cookie and some chocolate to sonja
and jonas, respectively.   

it turns out that tag is also strictly less powerful than
context sensitive languages.

tag generates what are called mildly context sensitive
languages.

darcey riley

alternative grammatical formalisms

parsing with tags

intro
tsgs
tags

tags can be parsed in o(n6) time, using a dynamic
programming algorithm similar to cky.

as with cky, we restrict the grammar to be binary branching.

no nonterminal in any tree can have more than two children.

we also assume (for the sake of simplicity) that the only
operation is adjunction.

lastly, we follow the restriction that adjunction can only
happen once at each node.

darcey riley

alternative grammatical formalisms

some tag-parsing intuitions (part 1)

intro
tsgs
tags

we will have a cky-like chart where we keep track of what
constituents we   ve built so far.

what should these constituents be?

they can   t be entire tree fragments: we can   t just parse a
whole tree fragment at once, because what if something got
adjoined inside it?

this leads us to the    rst intuition: we should split up the tree
fragments into their component id18 rules.

using these component rules, we can then parse in a
bottom-up fashion.

darcey riley

alternative grammatical formalisms

some tag-parsing intuitions (part 2)

intro
tsgs
tags

now that we   ve decomposed our rules in manner, what   s to
stop us from applying the cky algorithm in the usual fashion?

let   s see what happens if we try it.

we parse for a bit, start building the bottom of one of our
elementary trees   , and then we get to a nonterminal where
there could be adjunction of the elementary tree   1.
so we start building the auxiliary tree there. but we need to
keep track of what elementary tree we were building, so we
can    nish it later.

no problem, we say. we   ll just pass that information up the
tree.

darcey riley

alternative grammatical formalisms

some tag-parsing intuitions (part 3)

intro
tsgs
tags

but what happens when we   re in the middle of parsing
auxiliary tree   1, and we get to a nonterminal that could be
the foot of auxiliary tree   2?
well, then we start parsing   2, but again we need to keep
track of the fact that we were in the middle of parsing   1,
while in the middle of parsing   .

in order to keep track of all this, we   d need a stack.

intuitively, this is why we can   t just use cky to parse a tag.

darcey riley

alternative grammatical formalisms

parsing auxiliary trees first

intro
tsgs
tags

how do we get around the problems described above?

by parsing the auxiliary trees    rst!

we start by parsing the auxiliary trees that were adjoined
most recently.

once these are complete, we can adjoin them in directly while
chart parsing, without having to maintain a stack.

darcey riley

alternative grammatical formalisms

chart cells

intro
tsgs
tags

we will parse auxiliary trees in isolation, before they are
adjoined to anything.
in our chart cells, we need to keep track of the    hole    in the
middle where the foot node is.
chart cells take the following form: [n   , i, j|p, q|adj]

n is the nonterminal.
   records which tree fragment we are parsing.
i and j are the start and end positions of the chart cell.
p and q are the start and end positions of the hole,
0     i     p     q     j. (if we are parsing something without a
hole, we leave p, q blank.)
adj is a boolean to enforce the restriction that we can only
adjoin once per node.
[n   , i, j|p, q|adj] is true if:
n           ai+1 . . . ap f    aq+1 . . . aj (   must be an auxiliary tree)
n           ai+1 . . . aj (   could be either kind of tree)

darcey riley

alternative grammatical formalisms

initializing the chart

intro
tsgs
tags

terminal rule: [n   , i     1, i|   ,   |false] if n        a
epsilon rule: [n   , i, i|   ,   |false] if n         
foot rule: [f   , i, j|i, j|false] if f is the foot node of   

darcey riley

alternative grammatical formalisms

rules for building the insides of tree fragments

intro
tsgs
tags

in an auxiliary tree, the path from the root node to the foot
node is called the    spine    of the tree fragment.
parsing a rule n        x   y    that appears inside a tree
fragment.
three possibilities: x dominates the foot node (and thus
contains a hole), y dominates the foot node (and thus
contains a hole), or neither contains a hole.
[n   , i, j|p, q|false] if n        x   y    and one of the following
holds:

x has the hole: [x   , i, k|p, q|adj] is true, [y   , k, j|   ,   |adj]
is true, and x is on the spine of   
y has the hole: [x   , i, k|   ,   |adj] is true, [y   , k, j|p, q|adj]
is true, and y is on the spine of   
neither has the hole: [x   , i, k|   ,   |adj] is true,
[y   , k, j|   ,   |adj] is true, and neither is on the spine of   

darcey riley

alternative grammatical formalisms

unary rules and adjunction

intro
tsgs
tags

unary rule: [n   , i, j|p, q|false] if [x   , i, j|p, q|false] and
n        x   .
adjunction rule: [n   , i, j|p, q|true] if [r   , i, j|i(cid:48), j(cid:48)|adj] and
[n   , i(cid:48), j(cid:48)|p, q|false] and r    = n
chart is four-dimensional, and to parse with the adjunction
rule, must examine all i(cid:48), j(cid:48) in range.
computational complexity is o(n6)

darcey riley

alternative grammatical formalisms

