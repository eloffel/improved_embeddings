building finite-state
machines

600.465 - intro to nlp - j. eisner

1

todo

    why is it called closure?
    what is a closed set?
    examples: closure of {1} or {2} or {2,5} under addition

    e* = eps | e | ee | eee |    
    show construction of complementation
    non-final states have weight semizero
    say what semiring is used in the examples (and maybe change to prob

semiring)

    show construction of final states
    complain about perl; explain why union/concat/closure is the standard

subset (theory, efficiency); consider (a&b)* for why boolean tests aren   t
enough

    mention that ? or . is the standard way to write sigma
    explain that a:b and (e,f) and e .o. f all have upper on left, lower on right

(we need a 2-dimensional parser!)

600.465 - intro to nlp - j. eisner

2

xerox finite-state tool

    you   ll use it for homework    
    commercial (we have license; open-source clone is foma)

    one of several finite-state toolkits available
    this one is easiest to use but doesn   t have probabilities

    usage:

    enter a regular expression; it builds fsa or fst
    now type in input string

    fsa: it tells you whether it   s accepted
    fst: it tells you all the output strings (if any)
    can also invert fst to let you map outputs to inputs

    could hook it up to other nlp tools that need finite-

state processing of their input or output

600.465 - intro to nlp - j. eisner

3

common regular expression
operators (in xfst notation)

* +

|

concatenation
iteration
union
intersection

ef
e*, e+
e | f
e & f

&
~ \ - complementation, minus ~e, \x, f-e
.x.

crossproduct
composition
upper (input) language
lower (output) language

e .x. f
e .o. f
e.u    domain   
e.l
   range   

.o.

.u

.l

600.465 - intro to nlp - j. eisner

4

common regular expression
operators (in xfst notation)

concatenation

ef

ef = {ef: e     e, f     f}

ef denotes the concatenation of 2 strings.
ef denotes the concatenation of 2 languages.

    to pick a string in ef, pick e     e and f     f and concatenate them.
    to find out whether w     ef, look for at least one way to split w

into two    halves,    w = ef, such that e     e and f     f.

a language is a set of strings.
it is a regular language if there exists an fsa that accepts all the
if e and f denote regular languages, than so does ef.

strings in the language, and no other strings.
(we will have to prove this by finding the fsa for ef!)

600.465 - intro to nlp - j. eisner

5

common regular expression
operators (in xfst notation)

* +

concatenation
iteration
e* = {e1e2     en: n   0, e1    e,     en    e}

ef
e*, e+

    to pick a string in e*, pick any number of strings in e and

concatenate them.

    to find out whether w     e*, look for at least one way to split w into 0

or more sections, e1e2     en, all of which are in e.

e+ = {e1e2     en: n>0, e1    e,     en    e} =ee*

600.465 - intro to nlp - j. eisner

6

common regular expression
operators (in xfst notation)

concatenation
iteration
union

* +

|

ef
e*, e+
e | f

e | f = {w: w    e or w    f} = e     f

    to pick a string in e | f, pick a string from either e or f.
    to find out whether w     e | f, check whether w     e or w     f.

600.465 - intro to nlp - j. eisner

7

common regular expression
operators (in xfst notation)

concatenation
iteration
union
intersection

* +

|

&

ef
e*, e+
e | f
e & f

e & f = {w: w    e and w    f} = e       f

    to pick a string in e & f, pick a string from e that is also in f.
    to find out whether w     e & f, check whether w     e and w     f.

600.465 - intro to nlp - j. eisner

8

common regular expression
operators (in xfst notation)

* +

|

concatenation
iteration
union
intersection

ef
e*, e+
e | f
e & f

&
~ \ - complementation, minus ~e, \x, f-e

~e = {e: e       e} =    * - e
e     f = {e: e       e and e       f} = e & ~f
\e =     - e
(any single character not in e)

600.465 - intro to nlp - j. eisner

    is set of all letters; so    * is set of all strings

9

id157
a language is a set of strings.
it is a regular language if there exists an fsa that accepts

all the strings in the language, and no other strings.

if e and f denote regular languages, than so do ef, etc.
regular expression: ef*|(f & g)+
syntax:

|

concat
*
f

e

+
&

f g

600.465 - intro to nlp - j. eisner

semantics:
denotes a regular language.
as usual, can build semantics
compositionally bottom-up.
e, f, g must be regular languages.
as a base case, e denotes {e} (a
language containing a single string),
so ef*|(f&g)+ is regular.

10

id157
for regular relations
a language is a set of strings.
it is a regular language if there exists an fsa that accepts

all the strings in the language, and no other strings.

if e and f denote regular languages, than so do ef, etc.
a relation is a set of pairs     here, pairs of strings.
it is a regular relation if there exists an fst that accepts all

the pairs in the language, and no other pairs.

if e and f denote regular relations, then so do ef, etc.
ef = {(ef,e   f   ): (e,e   )     e, (f,f   )     f}
can you guess the definitions for e*, e+, e | f, e & f

when e and f are regular relations?

surprise: e & f isn   t necessarily regular in the case of relations; so not supported.
600.465 - intro to nlp - j. eisner

11

common regular expression
operators (in xfst notation)

* +

|

concatenation
iteration
union
intersection

ef
e*, e+
e | f
e & f

&
~ \ - complementation, minus ~e, \x, f-e
.x.

crossproduct

e .x. f

e .x. f = {(e,f): e     e, f     f}

    combines two regular languages into a regular relation.

600.465 - intro to nlp - j. eisner

12

common regular expression
operators (in xfst notation)

concatenation
iteration
union
intersection

crossproduct
composition

* +

|

.o.

&
~ \ - complementation, minus ~e, \x, f-e
.x.

ef
e*, e+
e | f
e & f

e .x. f
e .o. f

e .o. f = {(e,f):    m. (e,m)     e, (m,f)     f}

    composes two regular relations into a regular relation.
    as we   ve seen, this generalizes ordinary function composition.

600.465 - intro to nlp - j. eisner

13

common regular expression
operators (in xfst notation)

* +

|

.o.

.u

concatenation
iteration
union
intersection

ef
e*, e+
e | f
e & f

&
~ \ - complementation, minus ~e, \x, f-e
.x.

crossproduct
composition
upper (input) language
e.u = {e:    m. (e,m)     e}

e .x. f
e .o. f
e.u    domain   

600.465 - intro to nlp - j. eisner

14

common regular expression
operators (in xfst notation)

* +

|

concatenation
iteration
union
intersection

ef
e*, e+
e | f
e & f

&
~ \ - complementation, minus ~e, \x, f-e
.x.

crossproduct
composition
upper (input) language
lower (output) language

e .x. f
e .o. f
e.u    domain   
e.l
   range   

.o.

.u

.l

600.465 - intro to nlp - j. eisner

15

function from strings to ...

acceptors (fsas)
c

{false, true}

unweighted

a

transducers (fsts)
c:z

strings
a:x

e :y

weighted

numbers

c/.7

a/.5

e /.5

.3

(string, num) pairs

c:z/.7

a:x/.5

e :y/.5

.3

e
weighted relations

    if we have a language [or relation], we can ask it:

do you contain this string [or string pair]?

    if we have a weighted language [or relation], we ask:

what weight do you assign to this string [or string pair]?

    pick a semiring: all our weights will be in that semiring.

    just as for parsing, this makes our formalism & algorithms general.
    the unweighted case is the boolean semring {true, false}.
    if a string is not in the language, it has weight    .
    if an fst or regular expression can choose among multiple ways to

match, use       to combine the weights of the different choices.
    if an fst or regular expression matches by matching multiple

substrings, use     to combine those different matches.

    remember,        is like    or    and     is like    and   !

which semiring operators are needed?

ef
e*, e+
e | f

* +

concatenation
iteration
union

    to sum over 2 choices

|
~ \ - complementation, minus ~e, \x, e-f
&

    to combine
the matches
against e and f

intersection
crossproduct
composition
upper (input) language
lower (output) language

e & f
e .x. f
e .o. f
e.u    domain   
e.l
   range   

.x.

.o.

.u

.l

600.465 - intro to nlp - j. eisner

18

common regular expression
operators (in xfst notation)

|

union

    to sum over 2 choices

e | f

e | f = {w: w    e or w    f} = e     f
    weighted case: let   s write e(w) to denote the weight

of w in the weighted language e.
(e|f)(w) = e(w)     f(w)

600.465 - intro to nlp - j. eisner

19

which semiring operators are needed?

* +

concatenation
iteration
union

need both    
and    

ef
e*, e+
e | f

    to sum over 2 choices

|
~ \ - complementation, minus ~e, \x, e-f
&

    to combine
the matches
against e and f

intersection
crossproduct
composition
upper (input) language
lower (output) language

e & f
e .x. f
e .o. f
e.u    domain   
e.l
   range   

.x.

.o.

.u

.l

600.465 - intro to nlp - j. eisner

20

which semiring operators are needed?

concatenation
iteration

need both    
and    

ef
e*, e+

    +

ef = {ef: e     e, f     f}

    weighted case must match two things (   ), but

there   s a choice (   ) about which two things:
(ef)(w) =       (e(e)     f(f))

   

e,f such
that w=ef

600.465 - intro to nlp - j. eisner

21

which semiring operators are needed?

* +

concatenation
iteration
union

need both    
and    

ef
e*, e+
e | f

    to sum over 2 choices

|
~ \ - complementation, minus ~e, \x, e-f
&

    to combine
the matches
against e and f

intersection
crossproduct
composition
upper (input) language
lower (output) language

both     and     (why?)

   

   

e & f
e .x. f
e .o. f
e.u    domain   
e.l
   range   

.x.

.o.

.u

.l

600.465 - intro to nlp - j. eisner

22

definition of fsts

    [red material shows differences from fsas.]
    simple view:

    an fst is simply a finite directed graph, with some labels.
    it has a designated initial state and a set of final states.
    each edge is labeled with an    upper string    (in    *).
    each edge is also labeled with a    lower string    (in    *).
    [upper/lower are sometimes regarded as input/output.]
    each edge and final state is also labeled with a semiring weight.
    more traditional definition specifies an fst via these:

    a state set q
    initial state i
    set of final states f
    input alphabet s
    output alphabet d
    transition function d: q x s ? --> 2q
    output function s: q x s ? x q --> d ?

(also define s *, s +, s ?)

600.465 - intro to nlp - j. eisner

23

how to implement?

slide courtesy of l. karttunen (modified)

ef
e*, e+
e | f

concatenation
iteration
union

* +

.x.

.o.

.u

.l

|
~ \ - complementation, minus ~e, \x, e-f
&

intersection
crossproduct
composition
upper (input) language
lower (output) language

e & f
e .x. f
e .o. f
e.u    domain   
e.l
   range   

600.465 - intro to nlp - j. eisner

24

concatenation

example courtesy of m. mohri

r

r

=

600.465 - intro to nlp - j. eisner

25

example courtesy of m. mohri

|

union

r

=

600.465 - intro to nlp - j. eisner

26

closure (this example has outputs too)

example courtesy of m. mohri

*

27

=

why add new start state 4?
why not just make state 0 final?

600.465 - intro to nlp - j. eisner

upper language (domain)

example courtesy of m. mohri

.u

=

similarly construct lower language .l
also called input & output languages

600.465 - intro to nlp - j. eisner

28

reversal

example courtesy of m. mohri

.r

=

4

  :  /0.7

600.465 - intro to nlp - j. eisner

29

inversion

example courtesy of m. mohri

.i

=

600.465 - intro to nlp - j. eisner

30

intersection

example adapted from m. mohri

fat/0.5

0

0

pig/0.3

1

eats/0

2/0.8

sleeps/0.6

pig/0.4

fat/0.2

1

sleeps/1.3

2/0.5

eats/0.6

0,0

fat/0.7 0,1

pig/0.7

1,1

eats/0.6

2,0/0.8

sleeps/1.9

2,2/1.3

&

=

600.465 - intro to nlp - j. eisner

31

intersection

fat/0.5

0

0

pig/0.3

1

eats/0

2/0.8

sleeps/0.6

pig/0.4

fat/0.2

1

sleeps/1.3

2/0.5

eats/0.6

0,0

fat/0.7 0,1

pig/0.7

1,1

eats/0.6

2,0/0.8

&

=

paths 0012 and 0110 both accept fat pig eats
so must the new machine: along path 0,0 0,1 1,1 2,0

sleeps/1.9

2,2/1.3

600.465 - intro to nlp - j. eisner

32

intersection

fat/0.5

0

0

pig/0.3

1

eats/0

2/0.8

sleeps/0.6

pig/0.4

fat/0.2

1

sleeps/1.3

2/0.5

eats/0.6

0,0

fat/0.7 0,1

&

=

paths 00 and 01 both accept fat
so must the new machine: along path 0,0 0,1

600.465 - intro to nlp - j. eisner

33

intersection

fat/0.5

0

0

pig/0.3

1

eats/0

2/0.8

sleeps/0.6

pig/0.4

fat/0.2

1

sleeps/1.3

2/0.5

eats/0.6

0,0

fat/0.7 0,1 pig/0.7

1,1

&

=

paths 00 and 11 both accept pig
so must the new machine: along path 0,1 1,1

600.465 - intro to nlp - j. eisner

34

intersection

fat/0.5

0

0

pig/0.3

1

eats/0

2/0.8

sleeps/0.6

pig/0.4

fat/0.2

1

sleeps/1.3

2/0.5

eats/0.6

0,0

fat/0.7 0,1

pig/0.7

1,1

&

=

paths 12 and 12 both accept fat
so must the new machine: along path 1,1 2,2

sleeps/1.9

2,2/1.3

600.465 - intro to nlp - j. eisner

35

intersection

fat/0.5

0

0

pig/0.3

1

eats/0

2/0.8

sleeps/0.6

pig/0.4

fat/0.2

1

sleeps/1.3

2/0.5

eats/0.6

0,0

fat/0.7 0,1

pig/0.7

1,1

eats/0.6

2,0/0.8

sleeps/1.9

2,2/1.3

&

=

600.465 - intro to nlp - j. eisner

36

what composition means

f

ab?d

3

2

6

abcd

abed

abjd

600.465 - intro to nlp - j. eisner

g

4

2

8 a

b    d

...

37

a
b
e
d
a
b
c
d
what composition means

ab?d

relation composition: f     g

600.465 - intro to nlp - j. eisner

3+4

2+2

6+8

b    d

...

38

a
b
c
d
a
b
e
d
a
relation = set of pairs

ab?d    abcd
ab?d    abed
ab?d    abjd

   
f

ab?d

600.465 - intro to nlp - j. eisner

3

2

6

abcd

abed

abjd

abcd    a
abed    a
abed    a

   
g

does not contain
any pair of the

form abjd       

b    d

4

2

8 a

b    d

...

39

a
b
e
d
a
b
c
d
b
c
d
b
e
d
relation = set of pairs

ab?d    abcd
ab?d    abed
ab?d    abjd

   

f     g

ab?d    a
ab?d    a
ab?d    a

   

b    d

abcd    a
abed    a
abed    a

   

ab?d

f     g = {e   f:    m (e   m     f and  m   f     g)}

where e, m, f are strings

600.465 - intro to nlp - j. eisner

b    d

4

2

8

b    d

...

40

b
c
d
b
e
d
a
b
c
d
a
b
e
d
a
b
c
d
b
e
d
intersection vs. composition

intersection

pig/0.4

pig/0.3

0

1

&

1

=

0,1 pig/0.7

1,1

composition

wilbur:pig/0.3
1

0

pig:pink/0.4

.o.

1

=

wilbur:pink/0.7

0,1

1,1

600.465 - intro to nlp - j. eisner

41

intersection vs. composition

intersection mismatch

elephant/0.4

0

pig/0.3

&
composition mismatch

1

1

=

0,1 pig/0.7

1,1

elephant:gray/0.4

wilbur:pig/0.3
1

0

.o.

1

=

wilbur:gray/0.7

0,1

1,1

600.465 - intro to nlp - j. eisner

42

composition

example courtesy of m. mohri

.o.

=

composition

.o.

=

a:b .o. b:b = a:b

composition

.o.

=

a:b .o. b:a = a:a

composition

.o.

=

a:b .o. b:a = a:a

composition

.o.

=

b:b .o. b:a = b:a

composition

.o.

=

a:b .o. b:a = a:a

composition

.o.

=

a:a .o. a:b = a:b

composition

.o.

=

b:b .o. a:b = nothing
(since intermediate symbol doesn   t match)

composition

.o.

=

b:b .o. b:a = b:a

composition

.o.

=

a:b .o. a:b = a:b

relation = set of pairs

ab?d    abcd
ab?d    abed
ab?d    abjd

   

f     g

ab?d    a
ab?d    a
ab?d    a

   

b    d

abcd    a
abed    a
abed    a

   

ab?d

f     g = {e   f:    m (e   m     f and  m   f     g)}

where e, m, f are strings

600.465 - intro to nlp - j. eisner

b    d

4

2

8

b    d

...

53

b
c
d
b
e
d
a
b
c
d
a
b
e
d
a
b
c
d
b
e
d
composition with sets

    set and relation:

    we   ve defined a .o. b where both are fsts
    now extend definition to allow one to be a fsa
    two relations (fsts):

a     b = {e   f:    m (e   m     a and  m   f     b)}
e     a and e   f     b }
a     b = {e   f:
e   f     a and
a     b = {e   f:

a     b = {e:               e     a and       e     b }

f     b }

    two sets (acceptors)     same as intersection:

    relation and set:

600.465 - intro to nlp - j. eisner

54

composition and coercion

    two relations (fsts):

    really just treats a set as identity relation on set

    set and relation is now special case (if    m then y=x):

{abc, pqr,    } = {abc   abc, pqr   pqr,    }
a     b = {e   f:    m (e   m     a and  m   f     b)}
a     b = {e   f:
e   e     a and e   f     b }
e   f     a and f   f     b }
a     b = {e   f:
e   e     a and e   e     b }
a     b = {e   e:

    relation and set is now special case (if    m then y=z):
   
    two sets (acceptors) is now special case:

600.465 - intro to nlp - j. eisner

55

3 uses of set composition:

b    d }
b    d }

d , a

   
   

d , abed   a
d , abed   a
d , abed   a

    feed string into greek transducer:

    {abcd, abed} .o. greek

[{abed} .o. greek].l = {a

b    d }
    feed several strings in parallel:

    {abed   abed} .o. greek = {abed   a
{abed} .o. greek = {abed   a
d , abed   a
d , abed   a

= {abcd   a
= {abcd   a

    [{abcd,abed} .o. greek].l = {a
    filter result via no    = {a
    {abcd,abed} .o. greek .o. no   

600.465 - intro to nlp - j. eisner

b    d }
b    d ,    }

d , a
d ,

d , a

b    d }

b    d }

56

b
e
b
e
b
e
b
c
b
e
b
c
b
e
b
c
a
b
c
complementation

    given a machine m, represent all strings

not accepted by m

    just change final states to non-final and

vice-versa

    works only if machine has been

determinized and completed first (why?)

600.465 - intro to nlp - j. eisner

57

what are the    basic   
transducers?

    the operations on the previous slides
combine transducers into bigger ones

    but where do we start?

    a:e
for a     s
    e :x  for x     d

a:e
e :x

    q: do we also need a:x?  how about e :e ?

600.465 - intro to nlp - j. eisner

58

