parsing

what is parsing?

s     np vp
np     det n
np     np pp
vp     v np
vp     vp pp
pp     p np

s

np

vp

vp

pp

v

np

p

np

det

n

det

n

papa

ate

the caviar

with

a spoon

np     papa
n     caviar
n     spoon
v     spoon
v     ate
p     with
det     the
det     a

what is parsing?

s     np vp
np     det n
np     np pp
vp     v np
vp     vp pp
pp     p np

np

papa

np     papa
n     caviar
n     spoon
v     spoon
v     ate
p     with
det     the
det     a

s

vp

vp

pp

v

np

p

np

ate

det

n

with

det

n

the caviar

a spoon

programming languages

printf ("/charset [%s",

(re_opcode_t) *(p - 1) == charset_not ? "^" : "");

assert (p + *p < pend);

for (c = 0; c < 256; c++)

if (c / 8 < *p && (p[1 + (c/8)] & (1 << (c % 8)))) {

/* are we starting a range?  */
if (last + 1 == c && ! inrange) {

putchar ('-');
inrange = 1;

}
/* have we broken a range?  */
else if (last + 1 != c && inrange) {

putchar (last);
inrange = 0;

}

if (! inrange)

putchar (c);

last = c;

}

    easy to parse.
    designed that way!

natural languages

printf "/charset %s", re_opcode_t *p - 1 == charset_not ? "^"
: ""; assert p + *p < pend; for c = 0; c < 256; c++ if c / 8 <
*p && p1 + c/8 & 1 << c % 8 are we starting a range? if last +
1 == c && !  inrange putchar '-'; inrange = 1; have we broken
a range? else if last + 1 != c && inrange putchar last;
inrange = 0; if !  inrange putchar c; last = c;

    no {} () [] to indicate scope & precedence
    lots of overloading (arity varies)
    grammar isn   t known in advance!
    context-free grammar not best formalism

ambiguity

s     np vp
np     det n
np     np pp
vp     v np
vp     vp pp
pp     p np

np

papa

np     papa
n     caviar
n     spoon
v     spoon
v     ate
p     with
det     the
det     a

s

vp

vp

pp

v

np

p

np

ate

det

n

with

det

n

the caviar

a spoon

ambiguity

s     np vp
np     det n
np     np pp
vp     v np
vp     vp pp
pp     p np

np

papa

s

v

ate

np     papa
n     caviar
n     spoon
v     spoon
v     ate
p     with
det     the
det     a

vp

np

np

pp

det

n

p

np

the caviar

with

n

det
a spoon

the parsing problem

correct test trees

test
sentences

p
a
r
s
e
r

grammar

s
c
o
r
e
r

accuracy

recent parsers
quite accurate
    good enough
to help a range of
nlp tasks!

warning: these slides are out of date

applications of parsing (1/2)

    machine translation (alshawi 1996, wu 1997, ...)

english

tree

operations

chinese

    id133 from parses (prevost 1996)

the government plans to raise income tax.
the government plans to raise income tax the imagination.

    id103 using parsing (chelba et al 1998)

put the file in the folder.
put the file and the folder.

warning: these slides are out of date

applications of parsing (2/2)

    grammar checking (microsoft)
    indexing for information retrieval (woods 1997)
... washing a car with a hose ...                vehicle maintenance

    information extraction (hobbs 1996)

   ny times

   archive

   database

   query

parsing for interpretation

    most linguistic properties are defined over trees.
    one needs to parse to see subtle distinctions.  e.g.:

sara dislikes criticism of her.
sara dislikes criticism of her by anyone.
sara dislikes anyone   s criticism of her.

(her     sara)
(her     sara)
(her = sara or her     sara)

parsing     id152

preview of the next topic!

    what is meaning of 3+5*6?
    first parse it into 3+(5*6)

+

3

*

5

6

e

f

+

e

n

3

e

n

5

e

f

e
n*

6

12

600.465 - intro to nlp - j. eisner

parsing     id152

preview of the next topic!

    what is meaning of 3+5*6?
    first parse it into 3+(5*6)
    now give a meaning to

each node in the tree
(bottom-up)

e

n

3

3

600.465 - intro to nlp - j. eisner

+

33
*

30

5

6

6

33

30

e

3

3

5
e

f

+
add

e

n

5

5

f

e
n*

mult

6

6

13

parsing     id152

preview of the next topic!

assert(every(nation,    x    e present(e),

root

act(e,wanting), wanter(e,x),
wantee(e,    e    act(e   ,loving),
lover(e   ,g), lovee(e   ,l))))
np

sfin

punc
.
   s assert(s)

vpfin

det
every
every

n

nation
nation

t
-s

   v    x    e present(e),v(x)(e)

   y    x    e act(e,wanting),
wanter(e,x), wantee(e,y)

vpstem

vstem
want

sinf

np

george

vpinf

g
   a a

t
to
   y    x    e act(e,loving),
lover(e,x), lovee(e,y)

vpstem

vstem
love

np
laura

l

14

600.465 - intro to nlp - j. eisner

    now let   s develop some parsing algorithms!

    what substrings of this sentence are nps?
0
the government plans to raise income tax

7
9
are unpopular

1

2

3

4

5

6

8

    which substrings could be nps in the right context?
    which substrings could be other types of phrases?
    how would you defend a substring on your list?

1

0
7
   papa ate the caviar with a spoon   

5 6

2

3

4

    s     np vp
    np     det n
    np     np pp
    vp     v np
    vp     vp pp
    pp     p np

    np     papa
    n     caviar
    n     spoon
    v     spoon
    v     ate
    p     with
    det     the
    det     a

0
7
   papa ate the caviar with a spoon   

5 6

1

2

3

4

first try     does it work?

    for each constituent on the list (y i mid)

    scan the list for an adjacent constituent (z mid j)
    if grammar has a rule to combine them (x     y z)

    then add the result to the list (x i j)

0
7
   papa ate the caviar with a spoon   

5 6

3

4

1

2
second try    

    initialize the list with parts-of-speech (t j-1 j)

where t is a preterminal tag (like noun) for the jth word

    for each constituent on the list (y i mid)

    scan the list for an adjacent constituent (z mid j)
    if grammar has a rule to combine them (x     y z)

    then add the result to the list (x i j)

    if the above loop added anything, do it again!

(so that x i j gets a chance to combine or be combined with)

0
7
   papa ate the caviar with a spoon   

5 6

1

2

3

4

third try    

    initialize the list with parts-of-speech (t j-1 j)

where t is a preterminal tag (like noun) for the jth word

    for each constituent on the list (y i mid)

    for each adjacent constituent on the list (z mid j)

    for each rule to combine them (x     y z)

    add the result to the list (x i j)

if it   s not already there

    if the above loop added anything, do it again!

(so that x i j gets a chance to combine or be combined with)

0
7
   papa ate the caviar with a spoon   

5 6

1

2

3

4

third try    

3rd pass
       

1st pass
    np 2 4
    np 5 7

2nd pass
    vp 1 4
    np 2 4
    pp 4 7
    np 5 7

initialize
    np 0 1
    v 1 2
    det 2 3
    n 3 4
    p 4 5
    det 5 6
    n 6 7
    v 6 7

0
7
   papa ate the caviar with a spoon   

5 6

1

2

3

4

follow backpointers to get the parse

turn sideways:
see the trees?

   papa ate the caviar with a spoon   

correct but still inefficient    

we kept checking the same pairs that we   d
checked before (both bad and good pairs)
can   t we manage the process in a way that avoids

duplicate work?

old

old pair

new pair

right phrase

new

new pair

new pair

e
s
a
r
h
p
 
t
f
e
l

old

new

correct but still inefficient    

we kept checking the same pairs that we   d
checked before (both bad and good pairs)
can   t we manage the process in a way that avoids

duplicate work?

and even finding new pairs was expensive

because we had to scan the whole list

can   t we have some kind of index that will help us

find adjacent pairs?

indexing: store s 0 4 in chart[0,4]

avoid duplicate work:
build width-1, then width-2, etc.

how do we build a width-6 phrase?
(after building and indexing all shorter phrases)

?

1 7 =
1 2 + 2 7    
1 3 + 3 7
1 4 + 4 7    
1 5 + 5 7
1 6 + 6 7

avoid duplicate work:
build width-1, then width-2, etc.

cky algorithm, recognizer version

    input: string of n words
    output: yes/no (since it   s only a recognizer)
    data structure: n     n table

    rows labeled 0 to n-1
    columns labeled 1 to n
    cell [i,j] lists constituents found between i and j

    basic idea: fill in width-1 cells, then width-2,    

cky algorithm, recognizer version

    for j := 1 to n

    for width := 2 to n

    add to [j-1,j] all categories for the jth word

    for start := 0 to n-width

    define end := start + width
    for mid := start+1 to end-1

// this is i
// this is j
// find all i-to-j phrases

for every nonterminal z in [mid,end]

    for every nonterminal y in [start,mid]
   
   
   
   

if x     y z is in the grammar
then add x to [start,end]

for all nonterminals x

loose ends to tie up (no slides)

    what   s the space?
    duplicate entries?
    how many parses could there be?
    can we fix this?

    what   s the runtime?

cky algorithm, recognizer version

    for j := 1 to n

    for width := 2 to n

    add to [j-1,j] all categories for the jth word

    for start := 0 to n-width

    define end := start + width
    for mid := start+1 to end-1

// this is i
// this is j
// find all i-to-j phrases

for every nonterminal z in [mid,end]

    for every nonterminal y in [start,mid]
   
   
   
   

if x     y z is in the grammar
then add x to [start,end]

for all nonterminals x

cky algorithm, recognizer version

    for j := 1 to n

    for width := 2 to n

    add to [j-1,j] all categories for the jth word

    for start := 0 to n-width

    define end := start + width
    for mid := start+1 to end-1

// this is i
// this is j
// find all i-to-j phrases

    for every nonterminal y in [start,mid]
   
   
   

for every nonterminal z in [mid,end]
for every x     y z in the grammar

add x to [start,end]

cky algorithm, recognizer version

    for j := 1 to n

    for width := 2 to n

    add to [j-1,j] all categories for the jth word

    for start := 0 to n-width

    define end := start + width
    for mid := start+1 to end-1

// this is i
// this is j
// find all i-to-j phrases

    for every nonterminal y in [start,mid]
for every x     y z in the grammar
   
   
   

then add x to [start,end]

if z in [mid,end]

alternative version of inner loops

    for j := 1 to n

    for width := 2 to n

    add to [j-1,j] all categories for the jth word

    for start := 0 to n-width

    define end := start + width
    for mid := start+1 to end-1

// this is i
// this is j
// find all i-to-j phrases

    for every rule x     y z in the grammar
if y in [start,mid] and z in [mid,end]

then add x to [start,end]

extensions to discuss (no slides)

    incremental (left-to-right) parsing?

cky

    for j := 1 to n

    for width := 2 to n

    add to [j-1,j] all categories for the jth word

    for start := 0 to n-width

    define end := start + width
    for mid := start+1 to end-1

// this is i
// this is j
// find all i-to-j phrases

    for every nonterminal y in [start,mid]
   
   
   

for every nonterminal z in [mid,end]
for every x     y z in the grammar

add x to [start,end]

incremental cky:
visit columns left to right and fill each bottom-up

    for j := 1 to n

    for end := 2 to n

    add to [j-1,j] all categories for the jth word

    for width := 2 to end

    define start := end - width
    for mid := start+1 to end-1

// this is j

// this is i
// find all i-to-j phrases

    for every nonterminal y in [start,mid]
   
   
   

for every nonterminal z in [mid,end]
for every x     y z in the grammar

add x to [start,end]

extensions to discuss (no slides)

    incremental (left-to-right) parsing?

    in chinese, no spaces between the words!?

    we assumed rules like x     y z or x     word.

    grammar in    chomsky normal form.     what if it   s not?

    how do we choose among parses?

chart parsing in dyna

phrase(x,i,j) :- rewrite(x,w), word(w,i,j).
phrase(x,i,j) :- rewrite(x,y,z), phrase(y,i,mid), phrase(z,mid,j).
goal

:- phrase(start_symbol, 0, sentence_length).

40

understanding the key rule

substring from

i to j could
be a phrase
of category x if
phrase(x,i,j) :-

rewrite(x,y,z) ,   phrase(y,i,mid), phrase(z,mid,j).

e.g., phrase(   vp   ,1,7)

rewrite(   vp   ,   v   ,   np   )

e.g., phrase(   v   ,1,2),  phrase(   np   ,2,7)

it breaks up into adjacent substrings

(from i to mid and mid to j)

that could be phrases
of categories y and z

the

grammar
has a rule
x     y z

(   an x can be made of a y next to a z   )

41

chart parsing in dyna
phrase(x,i,j) :- rewrite(x,w), word(w,i,j).
       a word is a phrase   

(if grammar allows)

phrase(x,i,j) :- rewrite(x,y,z), phrase(y,i,mid), phrase(z,mid,j).
       two adjacent phrases are a phrase   

(if grammar allows)

:- phrase(start_symbol, 0, sentence_length).

goal
       a phrase that covers the whole sentence is a parse   
(achieves our goal by showing that the sentence is grammatical)

start_symbol :=    s   .
sentence_length := 7.

alternatively:
sentence_length max=  j for word(_,_,j).

42

chart parsing in dyna
phrase(x,i,j) :- rewrite(x,w), word(w,i,j).
phrase(x,i,j) :- rewrite(x,y,z), phrase(y,i,mid), phrase(z,mid,j).
goal

:- phrase(start_symbol, 0, sentence_length).

    we also need a sentence:

    we also need a grammar:

word(   papa   ,0,1).
word(   ate   ,1,2).
word(   the   ,2,3).
word(   caviar   ,3,4).
word(   with   ,4,5).
word(   a   ,5,6).
word(   spoon   ,6,7).

rewrite(   np   ,   papa   ).
rewrite(   n   ,   caviar   ).

   

rewrite(   s   ,   np   ,   vp   ).
rewrite(   np   ,   det   ,   n   ).
rewrite(   np   ,   np   ,   pp   ).

   

43

procedural algorithms

    the dyna program runs fine.
    it nicely displays the abstract structure of the algorithm.

    but dyna is a declarative programming language that
    if you had to find the possible phrases by hand (or with a

hides the details of the actual execution from you.
procedural programming language), what steps would
you go through?

this picture assumes a slightly different version of the dyna program, sorry

discovered phrases & their relationships (   parse forest   )
when parsing the ambiguous sentence    time flies like an arrow   

desired theorem

ambiguity

dead end

shared substructure

(id145)

axioms

45

this picture assumes a slightly different version of the dyna program, sorry

discovered phrases & their relationships (   parse forest   )
when parsing the ambiguous sentence    time flies like an arrow   

ambiguity

dead end

shared substructure

(id145)

46

procedural algorithms like cky are just strategies for
running this declarative program

phrase(x,i,j) :- rewrite(x,w), word(w,i,j).
phrase(x,i,j) :- rewrite(x,y,z), phrase(y,i,mid), phrase(z,mid,j).
goal

:- phrase(start_symbol, 0, sentence_length).

    and we   ll look at further such strategies later, e.g.
    magic sets / earley   s algorithm / left-to-right parsing,
    agenda-based forward chaining,
    backward chaining with memoization,
    coarse-to-fine search,
    id203-guided search and pruning,    

47

