finite-state programming

some examples

600.465 - intro to nlp - j. eisner

1

finite-state    programming   
function on (set of) strings 
function 
 
 
regular expression 
source code 
finite state machine 
object code 
 
 
compiler 
regexp compiler 
determinization, 
optimization of  
minimization, pruning 
object code 

  

600.465 - intro to nlp - j. eisner

2

finite-state    programming   
function composition (weighted) composition
higher-order function operator
function inversion
(available in prolog) function inversion
ops + small regexps
structured
programming

600.465 - intro to nlp - j. eisner

3

finite-state    programming   
apply to set of strings 
parallelism 
nondeterminism 
nondeterminism 
prob.-weighted arcs 
stochasticity 

  

600.465 - intro to nlp - j. eisner

4

slide courtesy of l. karttunen (modified)

some xerox extensions
$
=>
-> @->

containment
restriction
replacement

make it easier to describe complex languages 
and relations without extending the formal 
power of finite-state systems.

600.465 - intro to nlp - j. eisner

5

containment

$[ab*c]

   must contain a substring
that matches ab*c.   
accepts xxxacyy
rejects bcba

slide courtesy of l. karttunen (modified)

a,b,c,  

a

b

a,b,c,  

c

warning: ? in regexps means 
   any character at all.   
but    in machines means 
   any character not explicitly 
mentioned anywhere 

in the machine.   

?* [ab*c] ?*    
equivalent expression  

600.465 - intro to nlp - j. eisner

6

slide courtesy of l. karttunen (modified)

restriction

a => b _ c

b

a

b

c  
c

   any a must be preceded by b

  

c

and followed by c.   
accepts bacbbacde
rejects baca
~[~[?* b] a ?*] & ~[?* a ~[c ?*]]

equivalent expression  

600.465 - intro to nlp - j. eisner

7

slide courtesy of l. karttunen (modified)

replacement

a b -> b a

a:b

b:a

  

b

   replace     ab    by    ba   .   
transduces abcdbaba
to bacdbbaa
[~$[a b] [[a b] .x. [b a]]]* ~$[a b]

a

  

equivalent expression  

600.465 - intro to nlp - j. eisner

a:b

a

8

replacement is nondeterministic

a b -> b a | x

   replace     ab    by    ba    or    x   , nondeterministically.   

transduces abcdbaba

to {bacdbbaa, bacdbxa, xcdbbaa, xcdbxa}

600.465 - intro to nlp - j. eisner

9

replacement is nondeterministic

[ a b -> b a | x ] .o. [ x => _ c ] 
   replace     ab    by    ba    or    x   , nondeterministically.   

transduces abcdbaba

to {bacdbbaa, bacdbxa, xcdbbaa, xcdbxa}

600.465 - intro to nlp - j. eisner

10

replacement is nondeterministic

slide courtesy of l. karttunen (modified)

a b | b | b a | a b a -> x

applied to    aba   
four overlapping substrings match; we haven   t told 
it which one to replace so it chooses 
nondeterministically
a b a
a x a

a b a     a b a       a b a
a  x 

x  a

x

600.465 - intro to nlp - j. eisner

11

slide courtesy of l. karttunen

more replace operators
    optional replacement: a b (->) b a 
    directed replacement
    guarantees a unique result by constraining 
the factorization of the input string by
    direction of the match (rightward or leftward)
    length (longest or shortest)

600.465 - intro to nlp - j. eisner

12

@-> left-to-right, longest-match replacement

slide courtesy of l. karttunen

a b | b | b a | a b a @-> x

a b a     a b a       a b a
a  x 

applied to    aba   
a b a
a x a
@-> left-to-right, longest match 
@>  left-to-right, shortest match 
->@ right-to-left, longest match 
>@  right-to-left, shortest match 

x  a

x

600.465 - intro to nlp - j. eisner

13

using           for marking

slide courtesy of l. karttunen (modified)

a|e|i|o|u -> [ ... ]

p o t a t o
p[o]t[a]t[o]

[
]

  

0:[

0:]

i
e

a
o
u

note: actually have to write as -> %[ ... %]
or ->    [    ...    ]   
since [] are parens in the regexp language
600.465 - intro to nlp - j. eisner

14

using           for marking

slide courtesy of l. karttunen (modified)

a|e|i|o|u -> [ ... ]

p o t a t o
p[o]t[a]t[o]

0:[

[
]

  

0:]

i
e

a
o
u

which way does the fst transduce potatoe?  

p o t a t o  e
p[o]t[a]t[o][e]

p o t a t o e
p[o]t[a]t[o e]
how would you change it to get the other answer? 
600.465 - intro to nlp - j. eisner

vs.

15

example: finnish syllabification

slide courtesy of l. karttunen

define c [ b | c | d | f ...
define v [ a | e | i | o | u ];

[c* v+ c*] @-> ... "-" || _ [c v]
   insert a hyphen after the longest instance of the
c* v+ c* pattern in front of a c v pattern.   

why?

s t r u k   t u   r a   l i s   m i
s t r u k - t u - r a - l i s - m i

600.465 - intro to nlp - j. eisner

16

conditional replacement

slide courtesy of l. karttunen

a -> b
replacement

l _ r
context

the relation that replaces a by b between l and r leaving 
everything else unchanged.
sources of complexity:

    replacements and contexts may overlap
    alternative ways of interpreting 
   between left and right.   

600.465 - intro to nlp - j. eisner

17

hand-coded example: 
parsing dates

slide courtesy of l. karttunen

today is [tuesday, july 25, 2000]. 

best result

today is tuesday, [july 25, 2000].
today is [tuesday, july 25], 2000.
today is tuesday, [july 25], 2000.
today is [tuesday], july 25, 2000.

bad results

need left-to-right, longest-match 
constraints.

600.465 - intro to nlp - j. eisner

18

source code: language of dates

slide courtesy of l. karttunen

day = monday | tuesday |  ... | sunday
month = january | february | ... | december
date = 1 | 2 | 3 | ... | 3 1
year = %0to9 (%0to9 (%0to9 (%0to9))) - %0?*
from 1 to 9999
alldates =  day | (day    ,    ) month         date 
(   ,     year))

600.465 - intro to nlp - j. eisner

19

object code: 
all dates from 1/1/1 to 12/31/9999

slide courtesy of l. karttunen

, 

mon
tue
wed
thu
fri
sat
sun

jan
feb
mar
apr
may
jun
jul
aug
sep
oct
nov
dec
may

, 

, 

0
1
2
3
4
5
6
7
8
9

3

1
2

0
1
,

12
3456
7
89

0
1
2
3
4
5
6
7
8
9

0
1
2
3
4
5
6
7
8
9

0
1
2
3
4
5
6
7
8
9

13 states, 96 arcs

29 760 007 date expressions

jan feb mar apr
jul aug

jun
oct nov dec

sep

600.465 - intro to nlp - j. eisner

20

parser for dates

alldates @->    [dt     ...    ]   

slide courtesy of l. karttunen (modified)

compiles into an 
unambiguous transducer 
(23 states, 332 arcs).

xerox left-to-right replacement operator 

today is [dt tuesday, july 25, 2000] because yesterday 
was [dt monday] and it was [dt july 24] so tomorrow must 
be [dt wednesday, july 26] and not [dt july 27] as it says 
on the program.

600.465 - intro to nlp - j. eisner

21

problem of reference

slide courtesy of l. karttunen

valid dates
tuesday, july 25, 2000
tuesday, february 29, 2000
monday, september 16, 1996
invalid dates
wednesday, april 31, 1996
thursday, february 29, 1900
tuesday, july 26, 2000

600.465 - intro to nlp - j. eisner

22

refinement by intersection

slide courtesy of l. karttunen (modified)

alldates

maxdays
in month

    31    => jan|mar|may|    _
    30    => jan|mar|apr|    _

xerox contextual 
restriction operator 
q: why do these rules
start with spaces?
(and is it enough?)

valid
dates

leapyears

feb 29, => _    

q: why does this rule
end with a comma?
q: can we write the 
whole rule?

weekdaydate

600.465 - intro to nlp - j. eisner

q: leapyears made use of a    divisible by 4    fsa; 
can we build a    divisible by 7    fsa (base-ten input)? 
23

defining valid dates

slide courtesy of l. karttunen

alldates

&
&
&

maxdaysinmonth

leapyears
weekdaydates

alldates: 13 states, 96 arcs
29 760 007 date expressions

= validdates

validdates: 805 states, 6472 arcs

7 307 053 date expressions

600.465 - intro to nlp - j. eisner

24

parser for valid and invalid dates

slide courtesy of l. karttunen

[alldates - validdates] @->    [id     ...    ]   

validdates @->    [vd     ...    ]   

,

2688 states,
20439 arcs
comma creates a single fst 
that does left-to-right longest 
match against either pattern

today is [vd tuesday, july 25, 2000],
not [id tuesday, july 26, 2000].

600.465 - intro to nlp - j. eisner

valid date
invalid date

25

more engineering applications
    markup
    dates, names, places, noun phrases; spelling/grammar errors?
    hyphenation
    informative templates for information extraction  (fastus)
    id40 (use probabilities!)
    part-of-speech tagging (use probabilities     maybe!)
    translation
    id147 / id153
    phonology, morphology: series of little fixups? constraints?
    speech
    id68 / back-id68
    machine translation?
    learning    
600.465 - intro to nlp - j. eisner

26

fastus     information extraction
appelt et al, 1992-?
input: bridgestone sports co. said friday it has set up a joint venture 
in taiwan with a local concern and a japanese trading house to 
produce golf clubs to be shipped to japan.  the joint venture, 
bridgestone sports taiwan co., capitalized at 20 million new taiwan 
dollars, will start production in january 1990 with    
output:
relationship: 
entities:

tie-up
   bridgestone sports co.   
   a local concern   
   a japanese trading house   
nt$20000000

joint venture company:    bridgestone sports taiwan co.   
amount:
600.465 - intro to nlp - j. eisner

27

fastus: successive markups
(details on subsequent slides)

basic phrases (noun groups, verb groups    )

id121
multiwords

.o.
.o.
.o.
.o.
.o.

complex phrases
semantic patterns

merging different references

600.465 - intro to nlp - j. eisner

28

fastus: id121
    spaces, hyphens, etc.
    wouldn   t     would not
    their     them     s
    company.     company .
co.     co.

but

600.465 - intro to nlp - j. eisner

29

fastus: multiwords
       set up   
       joint venture   
       san francisco symphony orchestra,    
   canadian opera company   
        use a specialized regexp to match 
musical groups.
    ... what kind of regexp would match 
company names?

600.465 - intro to nlp - j. eisner

30

fastus : basic phrases
output looks like this (no nested brackets!):
    [ng it] [vg had set_up] [ng a joint_venture] [prep in]    
company name:
bridgestone sports co.
verb group:
said
noun group:
friday
noun group:
it
verb group:
had set up
noun group:
a joint venture
preposition:
in
location:
taiwan
with
preposition:
noun group:
a local concern
600.465 - intro to nlp - j. eisner

31

fastus: noun groups
build fsa to recognize phrases like

approximately 5 kg
more than 30 people
the newly elected president
the largest leftist political force
a government and commercial project

use the fsa for left-to-right longest-match markup
what does fsa look like?  see next slide    

600.465 - intro to nlp - j. eisner

32

fastus: noun groups
described with a kind of  non-recursive id18    
(a regexp can include names that stand for other regexps)
ng     pronoun | time-np | date-np
ng     (det) (adjs) headnouns
   
adjs     sequence of adjectives maybe with commas, 
conjunctions, adverbs
   
det     detnp | detnonnp
detnp     detailed expression to match    the only five, 
another three, this, many, hers, all, the most       
   
600.465 - intro to nlp - j. eisner

33

fastus: semantic patterns
businessrelationship =
noungroup(company/ies) verbgroup(set-up) 
noungroup(jointventure) with 
noungroup(company/ies) |    
productionactivity = 
verbgroup(produce) noungroup(product)
noungroup(company/ies)     noungroup &    

is made easy by the processing done at a previous level

use this for spotting references to put in the database.
600.465 - intro to nlp - j. eisner

34

