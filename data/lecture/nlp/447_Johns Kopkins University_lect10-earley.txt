earley   s algorithm (1970)

nice combo of our parsing ideas so far:

    no restrictions on the form of the grammar:

    a      b c spoon d x

    incremental parsing (left to right, like humans)
    left context constrains parsing of subsequent words

    so waste less time building impossible things
    makes it faster than o(n3) for many grammars

600.465 - intro to nlp - j. eisner

1

   

   

600.465 - intro to nlp - j. eisner

2

overview of earley   s algorithm

    finds constituents and partial constituents in input

    a     b c . d e is partial:  only the first half of the a

a

b c

d e

i

j

a     b c . d e

+

d

=

j

k

a

b c

d e

i

k
a     b c d . e

600.465 - intro to nlp - j. eisner

3

overview of earley   s algorithm

    proceeds incrementally, left-to-right

    before it reads word 5, it has already built all 

hypotheses that are consistent with first 4 words

    reads word 5 & attaches it to immediately preceding 

hypotheses.  might yield new constituents that are then 
attached to hypotheses immediately preceding them    

    e.g., attaching d to a     b c . d e gives a     b c d . e 
    attaching e to that gives a     b c d e .
    now we have a complete a that we can attach to 

hypotheses immediately preceding the a, etc.

600.465 - intro to nlp - j. eisner

4

our usual example grammar

root     s
s      np vp
np     det n
np     np pp
vp     vp pp
vp     v np
pp     p np

np     papa
n     caviar
n     spoon
v     ate
p     with
det     the
det     a

600.465 - intro to nlp - j. eisner

5

0 papa 1 ate 2 the 3 caviar 4 with 5 a 6 spoon 7

first try: recursive descent

root      s
s      np vp
np     det n
np     np pp 

vp     vp pp
vp     v np
pp     p np

np     papa
n     caviar
n     spoon

v     ate
p     with
det     the
det     a

   goal stack   

   

0 root     . s 0
   

0 s     . np vp 0
    0 np     . papa 0 
    0 np     papa . 1
0 s     np . vp 1
    1 vp     . vp pp 1 

   

    1 vp     . vp pp 1

    1 vp     . vp pp 1

1 vp     . vp pp 1

oops, stack overflowed
    ok, let   s pretend that didn   t happen.
    let   s suppose we didn   t see vp     vp pp, and used vp     v np instead.
600.465 - intro to nlp - j. eisner

6

0 papa 1 ate 2 the 3 caviar 4 with 5 a 6 spoon 7

first try: recursive descent

root      s
s      np vp
np     det n
np     np pp 

vp     v np
vp     vp pp
pp     p np

np     papa
n     caviar
n     spoon

v     ate
p     with
det     the
det     a

   

0 root     . s 0
   

0 s     . np vp 0
    0 np     . papa 0 
    0 np     papa . 1
0 s     np . vp 1
    1 vp     . v np 1
    1 v     . ate 1
    1 v     ate . 2
    1 vp     v . np 2
    2 np     . ... 2
    2 np     ... . 7
    1 vp     v np . 7
0 s     np  vp . 7
600.465 - intro to nlp - j. eisner

   

   

after dot = nonterminal, so recursively look for it (   predict   )
after dot = nonterminal, so recursively look for it (   predict   )
after dot = terminal, so look for it in the input (   scan   )
after dot = nothing, so parent   s subgoal is completed (   attach   )
predict (next subgoal)
do some more parsing and eventually ... 
we complete the parent   s np subgoal, so attach
attach again
attach again

7

0 papa 1 ate 2 the 3 caviar 4 with 5 a 6 spoon 7

first try: recursive descent

root      s
s      np vp
np     det n
np     np pp 

vp     v np
vp     vp pp
pp     p np

np     papa
n     caviar
n     spoon

v     ate
p     with
det     the
det     a

   

0 root     . s 0
   

   

0 s     . np vp 0
    0 np     . papa 0
    0 np     papa . 1
0 s     np . vp 1
    1 vp     . v np 1
    1 v     . ate 1
    1 v     ate . 2
    1 vp     v . np 2
    2 np     . ... 2
    2 np     ... . 7
    1 vp     v np . 7
s 

np  vp 

implement by function calls:
s() calls np() and vp(), which recurse

must backtrack to try predicting

a different vp rule here instead

but how about the other parse?

600.465 - intro to nlp - j. eisner

8

0 papa 1 ate 2 the 3 caviar 4 with 5 a 6 spoon 7

first try: recursive descent

root      s
s      np vp
np     det n
np     np pp 

vp     v np
vp     vp pp
pp     p np

np     papa
n     caviar
n     spoon

v     ate
p     with
det     the
det     a

   

0 root     . s 0
   

0 s     . np vp 0
    0 np     . papa 0
    0 np     papa . 1
0 s     np . vp 1
    1 vp     . vp pp 1

   

    1 vp     . v np 1
    1 v     . ate 1
    1 v     ate . 2
    1 vp     v . np 2
    2 np     . ... 2
    2 np     ... . 4
600.465 - intro to nlp - j. eisner

we   d better backtrack here too!  

(why?)

do some more parsing and eventually ... 
... the correct np is from 2 to 4  this time 
(but might we find the one from 2 to 7 instead?)

9

0 papa 1 ate 2 the 3 caviar 4 with 5 a 6 spoon 7

first try: recursive descent

root      s
s      np vp
np     det n
np     np pp 

vp     v np
vp     vp pp
pp     p np

np     papa
n     caviar
n     spoon

v     ate
p     with
det     the
det     a

   

0 root     . s 0
   

0 s     . np vp 0
    0 np     . papa 0
    0 np     papa . 1
0 s     np . vp 1
    1 vp     . vp pp 1 

   

    1 vp     . vp pp 1

    1 vp     . vp pp 1

1 vp     . vp pp 1

1 vp     . vp pp 1

oops, stack overflowed
no fix after all 

600.465 - intro to nlp - j. eisner

    must  transform grammar to eliminate left-recursive rules

10

use a parse table (=    chart   ) 

    earley   s algorithm resembles recursive descent, but solves 

the left-recursion problem.  no recursive function calls.
    use a parse table as we did in cky, so we can look up 

anything we   ve discovered so far.   
   id145.   

    entries in column 5 look like  (3, s     np . vp)         

(but we   ll omit the     etc. to save space)

    built while processing word 5
    means that the input substring from 3 to 5 

matches the initial np portion of a s     np vp rule

    dot shows how much we   ve matched as of column 5
    perfectly fine to have entries like (3, s     is it . true that s)
600.465 - intro to nlp - j. eisner
11

use a parse table (   chart   ) 
    entries in column 5 look like  (3, s     np . vp)  
    what does it mean if we have this entry?

    unknown right context: doesn   tmean we   ll necessarily be 
able to find a vp starting at column 5 to complete the s.  

    known left context: does mean that some dotted rule back 

in column 3 is looking for an s that starts at 3.  
    so if we actually do find a vp starting at column 5, allowing us to 

complete the s, then we   ll be able to attach the s to something.

    and when that something is complete, it too will have a customer 

to itsleft     just as in recursive descent!

    in short, a top-down (i.e., goal-directed) parser: it chooses to start 
building a constituent not because of the input but because that   s 
what the left context needs. in the spoon, won   t build spoon as a 
verb because there   s no way to use a verb there.

    so any hypothesis in column 5 couldget used in the correct parse, 

if words 1-5 are continued in just the right way by words 6-n.

600.465 - intro to nlp - j. eisner

12

operation of the algorithm

    process all hypotheses one at a time in order.

(current hypothesis is shown in blue, with substring.)

    this may add                          to the end of the 

new hypotheses

to-do list, or try to add                        again.

old hypotheses

    process a hypothesis according to what follows 

the dot     just as in recursive descent:
    if a word, scan input and see if it matches
    if a nonterminal, predict ways to match it

(we   ll predict blindly, but could reduce # of predictions by 
looking ahead k symbols in the input and only making 
predictions that are compatible with this limited right context)

    if nothing, then we have a complete constituent, so 

attach it to all its customers (shown in purple).

600.465 - intro to nlp - j. eisner

13

one entry (hypothesis)    

column j

(i, a     b c . d e)
current hypothesis (incomplete)

which action?

a

b c

d e

i
600.465 - intro to nlp - j. eisner

all entries ending at j stored in column j, as in cky
14

j

predict

column j

(i, a     b c . d e)
current hypothesis (incomplete)
(j, d     . bludger)
new entry to process later

a

d

b c

d e

j j bludger

i
600.465 - intro to nlp - j. eisner

j

15

scan

column j

   

(i, a     b c . d e)

(j, d     . bludger)

current hypothesis (incomplete)

k=j+1 in this example

column k
(j, d     bludger .)
new entry to process later

d

+ j

bludger = d

k

j j bludger

j

bludger

k

600.465 - intro to nlp - j. eisner

16

attach

column j

   

(i, a     b c . d e)

column k
(j, d     bludger .)
current hypothesis (complete)

d

j

k

600.465 - intro to nlp - j. eisner

17

attach

column j

   

(i, a     b c . d e)
customer (incomplete)

column k
(j, d     bludger .)
current hypothesis (complete)

(i, a     b c d . e)
new entry to process later

a

b c

d e

i
600.465 - intro to nlp - j. eisner

j

+

d

=

j

k

a

b c

d e

i

k

18

0 papa 1 ate 2 the 3 caviar 4 with 5 a 6 spoon 7

our usual example grammar

root     s
s      np vp
np     det n
np     np pp
vp     vp pp
vp     v np
pp     p np

np     papa
n     caviar
n     spoon
v     ate
p     with
det     the
det     a

600.465 - intro to nlp - j. eisner

19

0

0 root . s

initialize

remember this stands for (0, root     . s)

0

0 root . s
0 s . np vp

predict the kind of s we are looking for

remember this stands for (0, s     . np vp)

0

0 root . s
0 s . np vp
0 np . det n
0 np . np pp
0 np . papa

predict the kind of np we are looking for
(actually we   ll look for 3 kinds: any of the 3 will do)

0

0 root . s
0 s . np vp
0 np . det n
0 np . np pp
0 np . papa
0 det . the
0 det . a

predict the kind of det we are looking for (2 kinds)

0

0 root . s
0 s . np vp
0 np . det n
0 np . np pp
0 np . papa
0 det . the
0 det . a

predict the kind of np we   re looking for
but we were already looking for these so
don   t add duplicate goals!  note that this happened
when we were processing a left-recursive rule.

0

papa      1 

0 np papa .

scan: the desired word is in the input!

0 root . s
0 s . np vp
0 np . det n
0 np . np pp
0 np . papa
0 det . the
0 det . a

0

papa      1 

0 root . s
0 s . np vp
0 np . det n
0 np . np pp
0 np . papa
0 det . the
0 det . a

0 np papa .

scan: failure

0

papa      1 

0 root . s
0 s . np vp
0 np . det n
0 np . np pp
0 np . papa
0 det . the
0 det . a

0 np papa .

scan: failure

0        papa      1

0 np papa .
0 s np . vp
0 np np . pp

attach the newly created np
(which starts at 0) to its customers
(incomplete constituents that end at 0
and have np after the dot)

0 root . s
0 s . np vp
0 np . det n
0 np . np pp
0 np . papa
0 det . the
0 det . a

predict

0        papa      1

0 np papa .
0 root . s
0 s np . vp
0 s . np vp
0 np . det n
0 np np . pp
0 np . np pp 1 vp . v np
1 vp . vp pp
0 np . papa
0 det . the
0 det . a

0        papa      1

0 np papa .
0 root . s
0 s np . vp
0 s . np vp
0 np . det n
0 np np . pp
0 np . np pp 1 vp . v np
1 vp . vp pp
0 np . papa
0 det . the
1 pp . p np
0 det . a

predict

0        papa      1

0 np papa .
0 root . s
0 s np . vp
0 s . np vp
0 np . det n
0 np np . pp
0 np . np pp 1 vp . v np
1 vp . vp pp
0 np . papa
1 pp . p np
0 det . the
0 det . a
1 v . ate

predict

0        papa      1

0 np papa .
0 root . s
0 s np . vp
0 s . np vp
0 np . det n
0 np np . pp
0 np . np pp 1 vp . v np
1 vp . vp pp
0 np . papa
1 pp . p np
0 det . the
0 det . a
1 v . ate

predict

0        papa      1 

0 np papa .
0 root . s
0 s np . vp
0 s . np vp
0 np . det n
0 np np . pp
0 np . np pp 1 vp . v np
1 vp . vp pp
0 np . papa
1 pp . p np
0 det . the
0 det . a
1 v . ate
1 p . with

predict

ate          2
1 v ate .

0        papa      1

0 np papa .
0 root . s
0 s np . vp
0 s . np vp
0 np . det n
0 np np . pp
0 np . np pp 1 vp . v np
1 vp . vp pp
0 np . papa
1 pp . p np
0 det . the
0 det . a
1 v . ate
1 p . with

scan: success!

ate          2
1 v ate .

0        papa      1

0 np papa .
0 root . s
0 s np . vp
0 s . np vp
0 np . det n
0 np np . pp
0 np . np pp 1 vp . v np
1 vp . vp pp
0 np . papa
1 pp . p np
0 det . the
0 det . a
1 v . ate
1 p . with

scan: failure

attach

0        papa      1         ate          2
1 v ate .
1 vp v . np

0 np papa .
0 root . s
0 s np . vp
0 s . np vp
0 np . det n
0 np np . pp
0 np . np pp 1 vp . v np
1 vp . vp pp
0 np . papa
1 pp . p np
0 det . the
0 det . a
1 v . ate
1 p . with

predict

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

0        papa      1         ate          2
0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n
2 np . np pp
1 vp . vp pp 2 np . papa
1 pp . p np
1 v . ate
1 p . with

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

0        papa      1         ate          2
0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n
2 np . np pp
1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

predict (these next few steps
should look familiar)

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

0        papa      1         ate          2
0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n
2 np . np pp
1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

predict

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

0        papa      1         ate          2
0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n
2 np . np pp
1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

scan (this time we fail since
papa is not the next word)

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

0        papa      1         ate          2
0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n
2 np . np pp
1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

the           3

2 det the .

scan: success!

the           3

2 det the .

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

0        papa      1         ate          2
0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n
2 np . np pp
1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

0        papa      1         ate          2        the           3

2 det the .
2 np det . n

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n
2 np . np pp
1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

0        papa      1         ate          2        the           3       
2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

0        papa      1         ate          2        the           3

caviar      4

3 n caviar .

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

0        papa      1         ate          2        the           3

caviar      4

3 n caviar .

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

0        papa      1         ate          2        the           3       caviar      4

3 n caviar .
2 np det n .

attach

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

0        papa      1         ate          2        the           3       caviar      4

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp

attach
(again!)

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

0        papa      1         ate          2        the           3       caviar      4

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp

attach
(again!)

0        papa      1         ate          2        the           3       caviar      4

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np

0        papa      1         ate          2        the           3       caviar      4

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .

attach
(again!)

0        papa      1         ate          2        the           3       caviar      4

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .

0        papa      1         ate          2        the           3       caviar      4

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

0        papa      1         ate          2        the           3       caviar      4

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

0        papa      1         ate          2        the           3       caviar      4

with           5
4 p with .

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

0        papa      1         ate          2        the           3       caviar      4       with           5
4 p with .
4 pp p . np

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

0        papa      1         ate          2        the           3       caviar      4       with           5
4 p with .
3 n caviar .
4 pp p . np
2 np det n .
1 vp v np .
5 np . det n
2 np np . pp 5 np . np pp
5 np . papa
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

0        papa      1         ate          2        the           3       caviar      4       with           5
4 p with .
3 n caviar .
4 pp p . np
2 np det n .
1 vp v np .
5 np . det n
2 np np . pp 5 np . np pp
5 np . papa
0 s np vp .
1 vp vp . pp 5 det . the
4 pp . p np
5 det . a
0 root s .
4 p . with

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

0        papa      1         ate          2        the           3       caviar      4       with           5
4 p with .
3 n caviar .
4 pp p . np
2 np det n .
1 vp v np .
5 np . det n
2 np np . pp 5 np . np pp
5 np . papa
0 s np vp .
1 vp vp . pp 5 det . the
4 pp . p np
5 det . a
0 root s .
4 p . with

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

0        papa      1         ate          2        the           3       caviar      4       with           5
4 p with .
3 n caviar .
4 pp p . np
2 np det n .
1 vp v np .
5 np . det n
2 np np . pp 5 np . np pp
5 np . papa
0 s np vp .
1 vp vp . pp 5 det . the
4 pp . p np
5 det . a
0 root s .
4 p . with

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

0        papa      1         ate          2        the           3       caviar      4       with           5
4 p with .
3 n caviar .
4 pp p . np
2 np det n .
1 vp v np .
5 np . det n
2 np np . pp 5 np . np pp
5 np . papa
0 s np vp .
1 vp vp . pp 5 det . the
4 pp . p np
5 det . a
0 root s .
4 p . with

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

a           6
5 det a .

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

 ate          2        the           3       caviar      4       with           5
4 p with .
 .
1 v ate .
3 n caviar .
p
4 pp p . np
1 vp v . np
2 np det n .
1 vp v np .
pp 2 np . det n
5 np . det n
p
2 np np . pp 5 np . np pp
5 np . papa
0 s np vp .
pp 2 np . papa
1 vp vp . pp 5 det . the
2 det . the
p
2 det . a
4 pp . p np
5 det . a
0 root s .
4 p . with

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

 ate          2        the           3       caviar      4       with           5          a           6
5 det a .
 .
1 v ate .
p
5 np det . n
1 vp v . np
pp 2 np . det n
p
pp 2 np . papa
2 det . the
p
2 det . a

4 p with .
3 n caviar .
4 pp p . np
2 np det n .
1 vp v np .
5 np . det n
2 np np . pp 5 np . np pp
5 np . papa
0 s np vp .
1 vp vp . pp 5 det . the
4 pp . p np
5 det . a
0 root s .
4 p . with

4 p with .
4 pp p . np
5 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

 ate          2        the           3       caviar      4       with           5          a           6
5 det a .
 .
1 v ate .
3 n caviar .
p
5 np det . n
1 vp v . np
2 np det n .
1 vp v np .
pp 2 np . det n
6 n . caviar
p
2 np np . pp 5 np . np pp 6 n . spoon
5 np . papa
0 s np vp .
pp 2 np . papa
1 vp vp . pp 5 det . the
2 det . the
p
2 det . a
4 pp . p np
5 det . a
0 root s .
4 p . with

4 p with .
4 pp p . np
5 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

 ate          2        the           3       caviar      4       with           5          a           6
5 det a .
 .
1 v ate .
3 n caviar .
p
5 np det . n
1 vp v . np
2 np det n .
1 vp v np .
pp 2 np . det n
6 n . caviar
p
2 np np . pp 5 np . np pp 6 n . spoon
5 np . papa
0 s np vp .
pp 2 np . papa
1 vp vp . pp 5 det . the
2 det . the
p
2 det . a
4 pp . p np
5 det . a
0 root s .
4 p . with

spoon      7

6 n spoon .

4 p with .
4 pp p . np
5 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

 ate          2        the           3       caviar      4       with           5          a           6
5 det a .
 .
1 v ate .
3 n caviar .
p
5 np det . n
1 vp v . np
2 np det n .
1 vp v np .
pp 2 np . det n
6 n . caviar
p
2 np np . pp 5 np . np pp 6 n . spoon
5 np . papa
0 s np vp .
pp 2 np . papa
1 vp vp . pp 5 det . the
2 det . the
p
2 det . a
4 pp . p np
5 det . a
0 root s .
4 p . with

4 p with .
4 pp p . np
5 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

 ate          2        the           3       caviar      4       with           5          a           6      spoon      7
 .
1 v ate .
p
1 vp v . np
pp 2 np . det n
p
pp 2 np . papa
2 det . the
p
2 det . a

5 det a .
3 n caviar .
5 np det . n
2 np det n .
1 vp v np .
6 n . caviar
2 np np . pp 5 np . np pp 6 n . spoon
5 np . papa
0 s np vp .
1 vp vp . pp 5 det . the
4 pp . p np
5 det . a
0 root s .
4 p . with

6 n spoon .
5 np det n .

4 p with .
4 pp p . np
5 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

 ate          2        the           3       caviar      4       with           5          a           6      spoon      7
 .
1 v ate .
p
1 vp v . np
pp 2 np . det n
p
pp 2 np . papa
2 det . the
p
2 det . a

5 det a .
3 n caviar .
5 np det . n
2 np det n .
1 vp v np .
6 n . caviar
2 np np . pp 5 np . np pp 6 n . spoon
5 np . papa
0 s np vp .
1 vp vp . pp 5 det . the
4 pp . p np
5 det . a
0 root s .
4 p . with

6 n spoon .
5 np det n .
4 pp p np .
5 np np . pp

0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

    6 n spoon .
5 np det n .
4 pp p np .
5 np np . pp
2 np np pp .
1 vp vp pp .

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

    6 n spoon .
5 np det n .
4 pp p np .
5 np np . pp
2 np np pp .
1 vp vp pp .
7 pp . p np

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

    6 n spoon .
5 np det n .
4 pp p np .
5 np np . pp
2 np np pp .
1 vp vp pp .
7 pp . p np
1 vp v np .
2 np np . pp

0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

    6 n spoon .
5 np det n .
4 pp p np .
5 np np . pp
2 np np pp .
1 vp vp pp .
7 pp . p np
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp

0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

    6 n spoon .
5 np det n .
4 pp p np .
5 np np . pp
2 np np pp .
1 vp vp pp .
7 pp . p np
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
7 p . with

0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

    6 n spoon .
5 np det n .
4 pp p np .
5 np np . pp
2 np np pp .
1 vp vp pp .
7 pp . p np
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
7 p . with

0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

    6 n spoon .
5 np det n .
4 pp p np .
5 np np . pp
2 np np pp .
1 vp vp pp .
7 pp . p np
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
7 p . with

0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

    6 n spoon .
5 np det n .
4 pp p np .
5 np np . pp
2 np np pp .
1 vp vp pp .
7 pp . p np
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
7 p . with
0 root s .

0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

    6 n spoon .
5 np det n .
4 pp p np .
5 np np . pp
2 np np pp .
1 vp vp pp .
7 pp . p np
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
7 p . with
0 root s .

0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

    6 n spoon .
5 np det n .
4 pp p np .
5 np np . pp
2 np np pp .
1 vp vp pp .
7 pp . p np
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
7 p . with
0 root s .

0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

    6 n spoon .
5 np det n .
4 pp p np .
5 np np . pp
2 np np pp .
1 vp vp pp .
7 pp . p np
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
7 p . with
0 root s .

0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

    6 n spoon .
5 np det n .
4 pp p np .
5 np np . pp
2 np np pp .
1 vp vp pp .
7 pp . p np
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
7 p . with
0 root s .

left recursion kills pure 
top-down parsing    

vp

600.465 - intro to nlp - j. eisner

81

left recursion kills pure 
top-down parsing    

vp

vp pp

600.465 - intro to nlp - j. eisner

82

left recursion kills pure 
top-down parsing    

vp

vp pp

vp pp

600.465 - intro to nlp - j. eisner

83

left recursion kills pure 
top-down parsing    

vp

vp pp

vp pp

vp pp

makes new hypotheses
ad infinitum before we   ve
seen the pps at all

hypotheses try to predict
in advance how many 
pp   s will arrive in input

600.465 - intro to nlp - j. eisner

84

    but earley   s alg is okay!

vp

1 vp     . vp pp

pp

vp
(in column 1)

600.465 - intro to nlp - j. eisner

85

    but earley   s alg is okay!

vp

1 vp     . vp pp

pp

vp
(in column 1)

vp

1 vp     v np .

np

v
ate the caviar
(in column 4)

600.465 - intro to nlp - j. eisner

86

    but earley   s alg is okay!

vp

1 vp     . vp pp

pp

vp
(in column 1)

attach

vp

1 vp     vp . pp

vp
vp

pp

np
np

v
v
ate the caviar
(in column 4)

600.465 - intro to nlp - j. eisner

87

    but earley   s alg is okay!

vp

1 vp     . vp pp

pp

vp
(in column 1)

vp

1 vp     vp pp .

vp
vp

pp

with a spoon
np
np

v
v
ate the caviar
(in column 7)

600.465 - intro to nlp - j. eisner

88

    but earley   s alg is okay!

vp

pp

vp
(in column 1)

1 vp     . vp pp
can be reused

vp

1 vp     vp pp .

vp
vp

pp

with a spoon
np
np

v
v
ate the caviar
(in column 7)

600.465 - intro to nlp - j. eisner

89

    but earley   s alg is okay!

vp

pp

vp
(in column 1)

1 vp     . vp pp
can be reused

attach

vp

1 vp     vp . pp
pp

vp

vp
vp

pp

with a spoon
np
np

v
v
ate the caviar
(in column 7)

600.465 - intro to nlp - j. eisner

90

    but earley   s alg is okay!

vp

pp

vp
(in column 1)

1 vp     . vp pp
can be reused

vp

1 vp     vp pp .
pp

vp
vp

vp

in his bed
pp

with a spoon
np
np

v
v
ate the caviar
(in column 10)

600.465 - intro to nlp - j. eisner

91

    but earley   s alg is okay!

vp

pp

vp
(in column 1)

1 vp     . vp pp
can be reused again

vp

1 vp     vp pp .
pp

vp
vp

vp

in his bed
pp

with a spoon
np
np

v
v
ate the caviar
(in column 10)

600.465 - intro to nlp - j. eisner

92

    but earley   s alg is okay!

vp

pp

vp
(in column 1)

1 vp     . vp pp
can be reused again

attach

vp

1 vp     vp . pp
pp

vp

vp
vp

vp

pp

in his bed
pp

with a spoon
np
np

v
v
ate the caviar
(in column 10)

600.465 - intro to nlp - j. eisner

93

0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

completed a vp in col 4
col 1 lets us use it in a vp pp structure

    6 n spoon .
5 np det n .
4 pp p np .
5 np np . pp
2 np np pp .
1 vp vp pp .
7 pp . p np
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
7 p . with
0 root s .

0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 np papa .
1 v ate .
0 s np . vp
1 vp v . np
0 np np . pp 2 np . det n

2 det the .
2 np det . n
3 n . caviar
2 np . np pp 3 n . spoon

0 root . s
0 s . np vp
0 np . det n
0 np . np pp 1 vp . v np
0 np . papa
0 det . the
0 det . a

1 vp . vp pp 2 np . papa
2 det . the
1 pp . p np
1 v . ate
2 det . a
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

completed that vp = vp pp in col 7
col 1 would let us use itin a vp pp structure
can reuse col 1 as often as we need

    6 n spoon .
5 np det n .
4 pp p np .
5 np np . pp
2 np np pp .
1 vp vp pp .
7 pp . p np
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
7 p . with
0 root s .

what   s the complexity?

600.465 - intro to nlp - j. eisner

96

