phonology 

[these slides are missing most 
examples and discussion from 
class    ] 

what is phonology? 

pronunciation 

spelling 

(cid:1)(cid:1) cat + -s  
(cid:1)(cid:1) dog + -s 
(cid:1)(cid:1) rose + -s 
(cid:1)(cid:1) kiss + -s 

   kats     
   dawgz    
   roziz    

   kisiz    

why? 

cats  
dogs 
roses 

kisses 

how do you pronounce a 
sequence of morphemes? 

especially, how & why do you 
fix up the pronunciation at the 

seams between morphemes? 

phonology doesn   t care 

about the spelling 
(that   s just applied 

morphology) 

600.465 - intro to nlp - j. eisner 

1 

600.465 - intro to nlp - j. eisner 

what is phonology? 

what is phonology? 

pronunciation 

(cid:1)(cid:1) nap + -t  
(cid:1)(cid:1) nab + -t 
(cid:1)(cid:1) nod + -t 
(cid:1)(cid:1) knot + -t 

   n  pt     
   n  bd    
   nadid    

   natid    

spelling 
napped  
nabbed 
nodded 

knotted 

actually, these are pronounced identically: 

na(cid:1)id 

thanks to the english    flapping    rule  

(similarly: ladder/latter, bedding/betting) 

   trisyllabic shortening    in english 

divine (cid:2) divinity 
futile (cid:2) futility 
senile (cid:2) senility 
satire (cid:2) satirical 
decide (cid:2) decision 
wild (cid:2) wilderness 

serene (cid:2) serenity 
supreme (cid:2) supremity 
obscene (cid:2) obscenity 
obese (cid:2) *obesity 

(and similarly for other vowels) 

600.465 - intro to nlp - j. eisner 

3 

600.465 - intro to nlp - j. eisner 

2 

4 

what is phonology? 

(cid:1)(cid:1) a function twixt head and lip 

morphology 

(head) 

underlying 
phonemes 

phonological 

mapping 

surface 
phones 

articulation 

(mouth) 

resign 
resign + -ation 

ree-ziyn 
reh-zihg-nay-shun 

(cid:1)(cid:1) what class of functions is allowed?   
(cid:1)(cid:1) differs from one language to next 
(cid:1)(cid:1) often complicated, but not arbitrary 

(cid:1)(cid:1) comp sci: how to compute, invert, learn? 

successive fixups  
for phonology 

(cid:1)(cid:1) chomsky & halle (1968) 
(cid:1)(cid:1) stepwise refinement of a single form 
(cid:1)(cid:1) how to handle    resignation    example? 

input (i) 

output (o) 

(cid:1)(cid:1) that is, o = f(i) = g3(g2(g1(i))) 

(cid:1)(cid:1) function composition (e.g., transducer composition) 

600.465 - intro to nlp - j. eisner 

5 

600.465 - intro to nlp - j. eisner 

6 

example courtesy of k. crosswhite 

how to give orders 

(cid:1)(cid:1) directions version:  

successive fixup (derivation) 

(cid:1)(cid:1) break two eggs into a medium mixing bowl. 
(cid:1)(cid:1) remove this tab first. 
(cid:1)(cid:1) on the last day of each month, come to this office 

and pay your rent. 

(cid:1)(cid:1) rules version: 

successive winnowing 

optimality theory 
for phonology 

(cid:1)(cid:1) prince & smolensky (1993) 
(cid:1)(cid:1) alternative to successive fixups 
(cid:1)(cid:1) successive winnowing of candidate set 

 

(cid:1)(cid:1) no running in the house is allowed. 
(cid:1)(cid:1) all dogs must be on a leash. 
(cid:1)(cid:1) rent must be paid by the first day of each month. 
(cid:1)(cid:1) in rules version, describe what a good solution would 
look like, plus a search procedure for finding the best 
solution).  where else have we seen this? 

      (optimization) 

input 

600.465 - intro to nlp - j. eisner 

7 

600.465 - intro to nlp - j. eisner 

optimality theory    tableau    

(cid:1)(cid:1) = candidate violates constraint twice (weight 2) 

optimality theory 
for phonology 

output 

8 

constraint would prefer a, but only 
allowed to break tie among b,d,e 

input (i) 

output (o) 

600.465 - intro to nlp - j. eisner 

9 

600.465 - intro to nlp - j. eisner 

10 

when do we prune back to 
best paths? 

(cid:1)(cid:1) optimality theory: at each intermediate stage 
(cid:1)(cid:1) noisy channel: after adding up all weights 

why does order matter? 

(cid:1)(cid:1) optimality theory: each machine (fsa) can choose only 

among outputs that previous machines liked best 

(cid:1)(cid:1) noisy channel: each machine (fst) alters the output 

produced by previous machines 

600.465 - intro to nlp - j. eisner 

11 

600.465 - intro to nlp - j. eisner 

12 

output (o) 

output (o) 

final remark on ot 

optimality theory    tableau    

repeated best-paths only works for a single input 
better to build full fst for i (cid:2) o (invertible) 
can do this e.g. if every constraint is binary: 

assigns each candidate either 1 star (   bad   ) or 0 stars 

(   good   ) 

input (i) 

output (o) 

all surviving candidates violate constraint 3, 

so we can   t eliminate any 

600.465 - intro to nlp - j. eisner 

13 

600.465 - intro to nlp - j. eisner 

14 

