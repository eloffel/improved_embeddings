semantics

from syntax to meaning!

600.465 - intro to nlp - j. eisner

1

programming language
interpreter

    what is meaning of 3+5*6?
    first parse it into 3+(5*6)

+

3

*

5

6

e

f

+

e

n

3

e

n

5

e

f

e
n*

6

2

600.465 - intro to nlp - j. eisner

programming language
interpreter

    what is meaning of 3+5*6?
    first parse it into 3+(5*6)
    now give a meaning to

each node in the tree
(bottom-up)

e

n

3

3

600.465 - intro to nlp - j. eisner

+

33
*

30

5

6

6

33

30

e

3

3

5
e

f

+
add

e

n

5

5

f

e
n*

mult

6

6

3

interpreting in an environment

    how about 3+5*x?
    same thing: the meaning

of x is found from the
environment (it   s 6)

    analogies in language?

e

n

3

3

600.465 - intro to nlp - j. eisner

+

33
*

30

5

x

6

33

30

e

3

3

5
e

f

+
add

e

n

5

5

f

e
n*

mult

6

6

4

compiling

    how about 3+5*x?
    don   t know x at compile time
       meaning    at a node

is a piece of code, not a
number

5*(x+1)-2 is a different expression
that produces equivalent code
(can be converted to the
previous code by optimization)
analogies in language?
600.465 - intro to nlp - j. eisner

e

n

3

3

add(3,mult(5,x))
e
mult(5,x)
e

f

+
add

5

e

n

5

f

e
n*
mult
x

x

5

what counts as understanding?

some notions

    be able to translate (a compiler is a translator    )
    good definition?  depends on target language.
    english to english?
    english to french?
    english to chinese?
    english to logic?

bah humbug!
reasonable
requires deeper understanding
deepest - the definition we   ll use!

    all humans are mortal     =    x [human(x)    mortal(x)]

    assume we have logic-manipulating rules that then tell us

how to act, draw conclusions, answer questions    

600.465 - intro to nlp - j. eisner

6

what counts as understanding?

some notions

    we understand if we can respond appropriately

    ok for commands, questions (these demand response)
       computer, warp speed 5   
       throw axe at dwarf   
       put all of my blocks in the red box   
    imperative programming languages
    database queries and other questions

    we understand a statement if we can determine

its truth
    if you can easily determine whether it   s true, why did

anyone bother telling it to you?

    comparable notion for understanding np is to identify
what it refers to.  useful, but what if it   s out of sight?

600.465 - intro to nlp - j. eisner

7

what counts as understanding?

some notions

    we understand statement if we know how to

determine its truth (in principle!)
    compile it into a procedure for checking truth against the world

       all owls in outer space are bachelors   

for every object

if x is a owl

if location(x)     outerspace

if x is not a bachelor

return false

return true

meaning

    what if you don   t have an flying robot? (write the code anyway)
    how do you identify owls and bachelors? (assume library calls)
    what if space is infinite, so the procedure doesn   t halt?

same problem for    all prime integers        (you won   t actually run it)

600.465 - intro to nlp - j. eisner

8

what counts as understanding?

some notions

    we understand statement if we know how one

could (in principle) determine its truth
    compile it into a procedure that checks truth against the world
    better: compile it into a mathematical formula

          x owl(x) ^ outerspace(x)     bachelor(x)
    now you don   t have to worry about running it
    either true or false in the world: a mathematical question!

    statement claims that the world is such that this statement is true.
    auden (1956):    a sentence uttered makes a world appear

where all things happen as it says they do.   

    but does this help?  can you check math against the real world?

    what are the x   s that    x ranges over?  which ones make owl(x) true?

    model the world by an infinite collection of facts and entities

    wittgenstein (1921):    the world is all that is the case.  the world is

the totality of facts, not of things.   

600.465 - intro to nlp - j. eisner

9

what counts as understanding?

some notions

    we understand statement if we know how one

could (in principle) determine its truth
    compile it into a procedure that checks truth against the world
    better: compile it into a mathematical formula

          x owl(x) ^ outerspace(x)     bachelor(x)

    equivalently, be able to derive all logical consequences
    what else is true in every world where this statement is true?

    necessary conditions     let us draw other conclusions from sentence

    and what is false in every world where this sentence is false

    sufficient conditions     let us conclude the sentence from other facts
       recognizing id123    is an nlp task (    competitions!)

    john ate pizza.  can you conclude that john opened his mouth?

    knowing consequences lets you answer questions (in principle):

    easy: john ate pizza.  what was eaten by john?
    hard: white   s first move is p-q4.  can black checkmate?

600.465 - intro to nlp - j. eisner

10

lecture plan

    today:

    first, intro to    -calculus and logical notation
    let   s look at some sentences and phrases

    what logical representations would be reasonable?

    tomorrow:

    how can we build those representations?

    another course (ai):

    how can we reason with those representations?

600.465 - intro to nlp - j. eisner

11

logic: some preliminaries
three major kinds of objects

    roughly, the semantic values of sentences

1. booleans

2. entities

    values of nps, e.g., objects like this slide
    maybe also other types of entities, like times

3. functions of various types

    a function returning a boolean is called a

   
   

   predicate        e.g., frog(x), green(x)
functions might return other functions!
function might take other functions as
arguments!
600.465 - intro to nlp - j. eisner

12

logic: lambda terms

    lambda terms:

    a way of writing    anonymous functions   

    no function header or function name
    but defines the key thing: behavior of the function
    just as we can talk about 3 without naming it    x   

    let square =    p p*p
    equivalent to int square(p) { return p*p; }
    but we can talk about    p p*p without naming it
    format of a lambda term:     variable expression

600.465 - intro to nlp - j. eisner

13

logic: lambda terms
    lambda terms:

    let square =    p p*p
    then square(3) = (   p p*p)(3) = 3*3
    note: square(x) isn   t a function!  it   s just the value x*x.
    but    x square(x) =    x x*x =    p p*p = square

(proving that these functions are equal     and indeed they are,
as they act the same on all arguments: what is (   x square(x))(y)? )

    let even =    p (p mod 2 == 0)
    even(x) is true if x is even
    how about even(square(x))?
       x even(square(x)) is true of numbers with even squares

a predicate: returns true/false

    just apply rules to get    x (even(x*x)) =    x (x*x mod 2 == 0)
    this happens to denote the same predicate as even does

600.465 - intro to nlp - j. eisner

14

id198 vs. ap calculus

blondie, oct. 3, 2013

logic: multiple arguments
    lambda terms denote functions of 1 argument
    but how about functions like multiplication?
    we can fake multiple arguments [   currying   ]

    define times as    x    y (x*y)
    claim that times(5)(6) is 30

    times(5) = (   x    y x*y) (5) =    y 5*y

    if this function weren   t anonymous, what would we call

it?

    times(5)(6) = (   y 5*y)(6) = 5*6 = 30

600.465 - intro to nlp - j. eisner

16

logic: multiple arguments
    all lambda terms have one argument
    but we can fake multiple arguments ...
    we   ll write    times(5,6)    as syntactic sugar for

times(5)(6) or perhaps times(6)(5)
    times(5,6) = times(5)(6)

notation varies; doesn   t
matter as long as you   re
consistent

= (   x    y x*y) (5)(6) = (   y 5*y)(6) = 5*6 = 30

    so we can always get away with 1-arg functions ...

    ... which might return a function to take the next

argument.  whoa.

    remember: square can be written as    x square(x)

    and now times can be written as    x    y times(x,y)

600.465 - intro to nlp - j. eisner

17

grounding out
    so what does times actually mean???

    times was defined in terms of * .
    but does * mean multiplication?
    if * was defined as another lambda term, then

times(5,6) = *(5,6) = (blah blah blah)(5)(6)
but where do we stop?

    similarly, what does bachelor mean?

    maybe we defined

bachelor =    x (male(x) and not married(x))
but how is male defined?

    same problem as in programming languages

and dictionaries.

600.465 - intro to nlp - j. eisner

18

grounding out

    as in programming languages: something has

to be built in.

    don   t keep doing substitutions forever!

    eventually we have to    ground out   

in a primitive term

    primitive terms are bound to object code

    maybe *(5,6) is handled by the hardware
    maybe male(john) is too [visual cortex]
    what code is executed by loves(john, mary)?

600.465 - intro to nlp - j. eisner

19

logic: interesting constants
    thus, have    constants    that name some of the

entities and functions (e.g., *):
    barackobama - an entity
    red     a predicate on entities

    holds of just the red entities: red(x) is true if x is red!

    loves     a predicate on 2 entities

    loves(barackobama, michelleobama)
    question: what does loves(michelleobama) denote?

    can define other named objects from the constants
    can define a meaning for each english word from
    meaning of each english word is defined in terms of

the named objects
the constants [maybe indirectly]

600.465 - intro to nlp - j. eisner

20

logic:
connectives & quantifiers

    p or q   (= p     q)               p or q   
    p and q (= p     q = p,q)      p and q   
    not p    (=    p = ~p)         not p   
    p     q       if p then q   
       x      for all x   
       x       there exists x   
       all pigs are big   

       some pig is big   

       x pig(x) and big(x)

       x pig(x)     big(x)    for all x, if pig(x), then big(x)   

there exists some x such that pig(x) and big(x)

       most pigs are big   

600.465 - intro to nlp - j. eisner

??

21

logic: interesting constants

    most     a predicate on 2 predicates on

entities
    most(pig, big) =    most pigs are big   
    equivalently, most(   x pig(x),    x big(x))

    returns true if most of the things satisfying the
first predicate also satisfy the second predicate

    similarly for other quantifiers

(equivalent to    x pig(x)     big(x))

    all(pig,big)
    exists(pig,big)
    can even build complex quantifiers from english phrases:

(equivalent to    x pig(x) and big(x))

       between 12 and 75   ;    a majority of   ;    all but the smallest 2   

600.465 - intro to nlp - j. eisner

22

model theory

    equivalent notions:

    a    world    (semantics)
    a    outcome    (id203)
    a    model    (math)

    all of these specify everything

random variables:
what is    variable    in    p(variable=value)   ?

answer: variable is really a function of outcome

    p(x1=h) * p(x2=o | x1=h) *    
    outcome is a sequence of letters
    x2 is the second letter in the sequence

    p(number of heads=2) or just p(h=2) or p(2)

    outcome is a sequence of 3 coin flips
    h is the number of heads

    p(weather   s clear=true) or just p(weather   s clear)

    outcome is a race
    weather   s clear is true or false

600.465     intro to nlp     j. eisner

24

a reasonable representation?

    gilly swallowed a goldfish
    first attempt: swallowed(gilly, goldfish)

    returns true or false.  analogous to

    prime(17)
    equal(4,2+2)
    loves(barackobama, michelleobama)
    swallowed(gilly, jilly)
        or is it analogous?

600.465 - intro to nlp - j. eisner

25

a reasonable representation?

    gilly swallowed a goldfish
    first attempt: swallowed(gilly, goldfish)
    but we   re not paying attention to a!
    goldfish isn   t the name of a unique object the

way gilly is

    in particular, don   t want
gilly swallowed a goldfish and milly
swallowed a goldfish
to translate as
swallowed(gilly, goldfish) and swallowed(milly, goldfish)
since probably not the same goldfish    

600.465 - intro to nlp - j. eisner

26

use a quantifier

    gilly swallowed a goldfish

    first attempt: swallowed(gilly, goldfish)

    better:    g goldfish(g) and swallowed(gilly, g)
    or using one of our quantifier predicates:
    exists(   g goldfish(g),    g swallowed(gilly,g))
    equivalently: exists(goldfish, swallowed(gilly))

       in the set of goldfish there exists one swallowed by gilly   

    here goldfish is a predicate on entities

    this is the same semantic type as red
    but goldfish is noun and red is adjective .. #@!?

600.465 - intro to nlp - j. eisner

27

tense

    gilly swallowed a goldfish

    previous attempt: exists(goldfish,    g swallowed(gilly,g))

    improve to use tense:

    instead of the 2-arg predicate swallowed(gilly,g)

try a 3-arg version swallow(t,gilly,g)

where t is a time

    now we can write:

   t past(t) and exists(goldfish,    g swallow(t,gilly,g))

       there was some time in the past such that a goldfish was among

the objects swallowed by gilly at that time   

600.465 - intro to nlp - j. eisner

28

(simplify notation)

    gilly swallowed a goldfish

    previous attempt: exists(goldfish, swallowed(gilly))

    improve to use tense:

    instead of the 2-arg predicate swallowed(gilly,g)

try a 3-arg version swallow(t,gilly,g)

    now we can write:

   t past(t) and exists(goldfish, swallow(t,gilly))

       there was some time in the past such that a goldfish was among

the objects swallowed by gilly at that time   

600.465 - intro to nlp - j. eisner

29

event properties

    gilly swallowed a goldfish

    previous:    t past(t) and exists(goldfish, swallow(t,gilly))
    why stop at time?  an event has other properties:
    [gilly] swallowed [a goldfish] [on a dare]

[in a telephone booth] [with 30 other
freshmen] [after many bottles of vodka had
been consumed].

    specifies who what why when    

   davidsonian event variable   
(after donald davidson, 1980)

    replace time variable t with an event variable e

       e past(e), act(e,swallowing), swallower(e,gilly),

exists(goldfish, swallowee(e)), exists(booth, location(e)),    
    as with id203 notation, a comma represents and
    could define past as    e    t before(t,now), ended-at(e,t)

600.465 - intro to nlp - j. eisner

30

quantifier order

    gilly swallowed a goldfish in a booth
       e past(e), act(e,swallowing), swallower(e,gilly),

exists(goldfish, swallowee(e)), exists(booth, location(e)),    

    gilly swallowed a goldfish in every booth

       e past(e), act(e,swallowing), swallower(e,gilly),

exists(goldfish, swallowee(e)), all(booth, location(e)),    
   g goldfish(g), swallowee(e,g)    b booth(b)   location(e,b)

    does this mean what we   d expect??
says that there   s only one event

with a single goldfish getting swallowed

that took place in a lot of booths ...

600.465 - intro to nlp - j. eisner

31

quantifier order
    groucho marx celebrates quantifier order ambiguity:

    in this country a woman gives birth every 15 min.

our job is to find that woman and stop her.

       woman (   15min gives-birth-during(15min, woman))
       15min (   woman gives-birth-during(15min, woman))
    surprisingly, both are possible in natural language!
    which is the joke meaning (where it   s always the same woman)

and why?

600.465 - intro to nlp - j. eisner

32

quantifier order

    gilly swallowed a goldfish in a booth
       e past(e), act(e,swallowing), swallower(e,gilly),

exists(goldfish, swallowee(e)), exists(booth, location(e)),    

    gilly swallowed a goldfish in every booth

       e past(e), act(e,swallowing), swallower(e,gilly),

exists(goldfish, swallowee(e)), all(booth, location(e)),    
   g goldfish(g), swallowee(e,g)    b booth(b)   location(e,b)

    does this mean what we   d expect??

    it   s    e    b which means same event for every booth
    probably false unless gilly can be in every booth

during her swallowing of a single goldfish

600.465 - intro to nlp - j. eisner

33

quantifier order

    gilly swallowed a goldfish in a booth
       e past(e), act(e,swallowing), swallower(e,gilly),

exists(goldfish, swallowee(e)), exists(booth, location(e)),    

    gilly swallowed a goldfish in every booth

       e past(e), act(e,swallowing), swallower(e,gilly),

exists(goldfish, swallowee(e)), all(booth,    b location(e,b))

    other reading (   b    e) involves quantifier raising:
    all(booth,    b [   e past(e), act(e,swallowing), swallower
(e,gilly), exists(goldfish, swallowee(e)), location(e,b)])
       for all booths b, there was such an event in b   
600.465 - intro to nlp - j. eisner

34

intensional arguments

    willy wants a unicorn

       e act(e,wanting), wanter(e,willy), exists(unicorn,    u wantee(e,u))

       there is a particular unicorn u that willy wants   
    in this reading, the wantee is an individual entity

       e act(e,wanting), wanter(e,willy), wantee(e,    u unicorn(u))

       willy wants any entity u that satisfies the unicorn predicate   
    in this reading, the wantee is a type of entity
    sentence doesn   t claim that such an entity exists

    willy wants lilly to get married

       e present(e), act(e,wanting), wanter(e,willy),

wantee(e,    e    [act(e   ,marriage), marrier(e   ,lilly)])

       willy wants any event e    in which lilly gets married   
    here the wantee is a type of event
    sentence doesn   t claim that such an event exists

    intensional verbs besides want: hope, doubt, believe,   

600.465 - intro to nlp - j. eisner

35

intensional arguments

    willy wants a unicorn

       e act(e,wanting), wanter(e,willy), wantee(e,    u unicorn(u))
       willy wants anything that satisfies the unicorn predicate   
    here the wantee is a type of entity

    problem:

       g unicorn(g) is defined by the actual set of unicorns (   extension   )
    but this set is empty:    g unicorn(g) =    g false =    g pegasus(g)
    then wants a unicorn = wants a pegasus.  oops!
    so really the wantee should be criteria for unicoid56ess (   intension   )

    traditional solution involves    possible-world semantics   
    can imagine other worlds where set of unicorns     set of pegasi

600.465 - intro to nlp - j. eisner

36

possible worlds
    traditional solution involves    possible-world semantics   

    wittgenstein (1921):    the world is all that is the case.  the

world is the totality of facts, not of things.   

    can imagine other worlds where set of unicorns     set of pegasi
    most facts can vary according to which world w you   re in:

    loves(barack, michelle)

   loves(w, barack, michelle)

    most(   x pig(x),    x big(x))
most(    pig    ,      big    )

   most(w,    x pig(w, x),    x big(w, x))
most(w,
pig(w)    ,     big(w)    )

    wants(willy, unicorn)

wants(willy,    u unicorn(u))

   wants(w, willy, unicorn)
wants(w, willy,    w       u unicorn(w   ,u))
   intension    of unicorn, not tied to current world w
function checks in any world w    whether something is a unicorn

these criteria are the same in every world:

unicorn        w       u (has_horn(w   ,u), horselike(w   ,u), magical(w   ,u),    )

possible worlds: more uses

    modals (woulda coulda shoulda)

deontic       modal

    you must pay the rent

    in all possible worlds that are    like    this world,

and in which you fulfill your obligations: you do pay the rent

deontic       modal

    you may pay the rent

    in some possible world that is    like    this world,

and in which you fulfill your obligations: you do pay the rent

    you must have paid the rent

    in all possible worlds that are    like    this world, and which

are consistent with my observations: you paid the rent

epistemic       modal

(how would you

express epistemic    

in english?)

bouletic       modal

    you can pay the rent

    in some possible world that is    like    this world, and

in which you have no additional powers: you do pay the rent

    and more    

(varies by language, but always quantifies over some set of    accessible    worlds)

possible worlds: more uses

    modals (woulda coulda shoulda)

deontic       modal

    you must pay the rent

    in all possible worlds that are    like    this world,

and in which you fulfill your obligations: you pay the rent

    counterfactuals

    if you hadn   t, you   d be homeless

    in all possible worlds that are    like    this world,

except that you didn   t pay the rent: you are now homeless
    what are the    worlds that are    like    this world   ? (   accessible    worlds)
    you don   t pay rent, but otherwise change    as little as possible.     (same

apartment, same eviction laws, no miracles to save you from the gutter,    )

    but rather slippery how to figure out what those    minimum changes    are!
    lets   s watch instant replays on the subjunc-tv  (hofstadter, 1979):

       here   s what would   ve happened     if palindromi hadn   t stepped out of bounds   
           if only it hadn   t been raining             if only they   d been playing against chicago   
           if only they   d been playing baseball              if only 13 weren   t prime   

possible worlds: more uses

    modals (woulda coulda shoulda)

deontic       modal

    you must pay the rent

    in all possible worlds that are    like    this world,

and in which you fulfill your obligations, you pay the rent

    counterfactuals

    if you hadn   t, you   d be homeless

most

    in all possible worlds that are    like    this world,

^

probably

except that you didn   t pay the rent, you are now homeless
p(homeless | didn   t pay rent) > 0.5

but is this 0/0?
traditional view is that some worlds are    accessible    and others aren   t.
but reasoning about what would tend to happen if you didn   t pay the rent
seems to require probabilistic reasoning.
so maybe you have something like a id203 distribution over worlds?

estimate distribution from observing the world   s facts and rules, but smoothed
somehow?  so my distribution will allocate a little id203 to worlds where you
didn   t pay the rent and became homeless, or didn   t pay the rent but moved in with
your parents, etc.     even though i   m sure none of these worlds actually happened.

control

    willy wants lilly to get married
       e present(e), act(e,wanting), wanter(e,willy),
wantee(e,    f [act(f,marriage), marrier(f,lilly)])

    willy wants to get married

    same as willy wants willy to get married
    just as easy to represent as willy wants lilly    
    the only trick is to construct the representation from the

syntax.  the empty subject position of    to get married   
is said to be controlled by the subject of    wants.   

600.465 - intro to nlp - j. eisner

41

nouns and their modifiers

    nouns and adjectives both restrict an entity   s properties:

    expert:    g expert(g)
    big fat expert:    g  big(g), fat(g), expert(g)
    baltimore expert (i.e., expert from baltimore):

   g related(baltimore, g), expert(g)

    but they sometimes first combine into compound concepts:
    adj+n: bogus expert (i.e., someone who has bogus_expertise):

   g (bogus(expert))(g)

[not    g bogus(g), expert(g) since they   re not an expert!]
    n+n: baltimore expert (i.e., expert on baltimore     different stress):
    (n+v)+ending: dog catcher:

   g (modified-by(baltimore, expert))(g)

   g    e act(e,catching),catcher(e,g),exists(dog,catchee(e))

   

garbage collection:

   e (act(e, collecting), exists(garbage,collectee(e)))

    if we didn   t make a compound concept first, things would go awry
law expert and dog catcher
=    g related(law,g), expert(g), related(dog, g), catcher(g) **wrong**
= dog expert and law catcher

600.465 - intro to nlp - j. eisner

42

nouns and their modifiers

we can argue about the details of the compound
representations, e.g., how much of the semantics is explicit in
the lambda-term, how much is in the semantics of individual
words like bogus, and how much is shoved under the carpet into
primitives like modified-by, which are assumed to piece together
a reasonable meaning using world knowledge and context.

       g (bogus(expert))(g)     bogus can construct a new concept

or    g (modified-by(bogus,expert))(g)?

      g (modified-by(baltimore, expert))(g)

or    g (baltimore(expert))(g)?
or    g (expert(baltimore))(g)?

600.465 - intro to nlp - j. eisner

43

nouns and their modifiers

    the goldfish that gilly swallowed
    every goldfish that gilly swallowed
    three goldfish that gilly swallowed

   g [goldfish(g), swallowed(gilly, g)]

    three swallowed-by-gilly goldfish

like an adjective!

or for real:    g [goldfish(g),    e [past(e), act(e,swallowing),

swallower(e,gilly), swallowee(e,g) ]]

600.465 - intro to nlp - j. eisner

44

adverbs

    lili passionately wants billy

    wrong?: passionately(want(lili,billy)) = passionately(true)
    better: (passionately(want))(lili,billy)
    best:    e present(e), act(e,wanting), wanter(e,lili),

wantee(e, billy), manner(e, passionate)
    lili often stalks billy

    (often(stalk))(lili,billy)
    many(day,    d    e present(e), act(e,stalking), stalker(e,lili),

stalkee(e, billy), during(e,d))

    lili obviously likes billy

    (obviously(like))(lili,billy)     one reading
    obvious(like(lili, billy))     another reading

600.465 - intro to nlp - j. eisner

45

speech acts

    what is the meaning of a full sentence?

    depends on the punctuation mark at the end.    
    billy likes lili.
    billy likes lili?

    assert(like(b,l))
    ask(like(b,l))
    or more formally,    does billy like lili?   

    billy, like lili!

    command(like(b,l))

    or more accurately,    let billy like lili!   

    let   s try to do this a little more precisely, using

event variables.

    (we   ll leave out the world variables.)

600.465 - intro to nlp - j. eisner

46

speech acts

    what did gilly swallow?

    ask(   x    e past(e), act(e,swallowing),

swallower(e,gilly), swallowee(e,x))

    argument is identical to the modifier    that gilly swallowed   
    is there any common syntax?

    eat your fish!

    command(   f act(f,eating), eater(f,hearer), eatee(   ))

    i ate my fish.

    assert(   e past(e), act(e,eating), eater(f,speaker),

eatee(   ))

600.465 - intro to nlp - j. eisner

47

id152

    we   ve discussed what semantic representations

should look like.

    but how do we get them from sentences???

    first - parse to get a syntax tree.
    second - look up the semantics for each word.
    third - build the semantics for each constituent

    work from the bottom up
    the syntax tree is a    recipe    for how to do it

600.465 - intro to nlp - j. eisner

48

id152

assert(every(nation,    x    e present(e),

root

act(e,wanting), wanter(e,x),
wantee(e,    e    act(e   ,loving),
lover(e   ,b), lovee(e   ,m))))
np

sfin

punc
.
   s assert(s)

vpfin

det
every
every

n

nation
nation

t
-s

   v    x    e present(e),v(x)(e)

vpstem

vstem
want

sinf

   y    x    e act(e,wanting),
wanter(e,x), wantee(e,y)

np

barack

vpinf

b
   a a

t
to
   y    x    e act(e,loving),
lover(e,x), lovee(e,y)

vpstem

vstem
love

np

michelle

m

49

600.465 - intro to nlp - j. eisner

id152
    add a    sem    attribute to each context-free rule

    s     np loves np
    s[sem=loves(x,y)]     np[sem=x] loves np[sem=y]
    meaning of s depends on meaning of nps

    tag version:

loves(x,y)

s

s

died(x)

npx

vp

v

loves

np

y

npx

vp

v

kicked

np

the bucket

    template filling: s[sem=showflights(x,y)]    

i want a flight from np[sem=x] to np[sem=y]

600.465 - intro to nlp - j. eisner

50

id152
    instead of s     np loves np

    s[sem=loves(x,y)]     np[sem=x] loves np[sem=y]

    might want general rules like s     np vp:

    v[sem=loves]     loves
    vp[sem=v(obj)]     v[sem=v] np[sem=obj]
    s[sem=vp(subj)]     np[sem=subj] vp[sem=vp]

    now barack loves michelle has

sem=loves(michelle)(barack)

    in this style we   ll sketch a version where

    still compute semantics bottom-up
    grammar is in chomsky normal form
    so each node has 2 children: 1 function & 1 argument
    to get its semantics, just apply function to argument!
    (version on homework will be a little less pure)
51

600.465 - intro to nlp - j. eisner

id152

root

assert(loves(m,b))

   s assert(s)

punc

.

vpfin

   y loves(m,y)

loves(m,b)

sfin

np

barack

b

vpres
loves
loves =

michelle

np

m

   x    y loves(x,y)

question: really the root meaning should be assert(loves(wcurr,m,b))
then what is the meaning of loves?
and what is the meaning of period?

   x    y    w loves(w,x,y)
   s assert(s(wcurr))

600.465 - intro to nlp - j. eisner

52

id152

so what do we want here?

tall(j)

sfin

np
john
j

root

assert(tall(j))

   s assert(s)

punc

.

vpfin

   subj tall(subj)

vpres
is

   adj    subj adj(subj)

adjp
tall
tall
=    x tall(x)

so what do we want here?

the identity function!

so what do we want here?

(   adj    subj adj(subj))(   x tall(x))
=
=

   subj (   x tall(x))(subj)
   subj
tall(subj)
600.465 - intro to nlp - j. eisner

but let   s write it as    

53

id152

   e present(e), act(e,loving),

lover(e,b), lovee(e,m)
loves(m,b)

sfin

root

punc

.

vpfin

   y loves(m,y)

   y    e present(e),
act(e,loving),

lover(e,y), lovee(e,m)

np

barack

b

vpres
loves
loves =

michelle

np

m

   x    y loves(x,y)
   x    y    e present(e),

act(e,loving),

lover(e,y), lovee(e,x)

600.465 - intro to nlp - j. eisner

54

root

sfin

np

vpfin

now let   s try a more
complex example, and

really handle tense.

punc

.

vpstem

det
every

n

nation

t
-s

treat    s like
yet another
auxiliary

verb

vstem
want

sinf

np

barack

vpinf

t
to

vpstem

vstem
love

np

michelle

root

sfin

np

vpfin

det
every

n

nation

t
-s

punc

.

vpstem

vstem
want

sinf

np

barack

vpinf

   e act(e,loving), lover(e,b), lovee(e,m)

the meaning that we
want here: how can
we arrange to get it?

t
to

vpstem

vstem
love

np

michelle

root

sfin

np

vpfin

det
every

n

nation

t
-s

punc

.

vpstem

sinf

vstem
want
b
barack

np

   e act(e,loving), lover(e,b), lovee(e,m)

vpinf

what function should
apply to b to yield the
desired blue result?

vpstem

(this is like division!)

vstem
love

np

michelle

t
to

root

sfin

np

vpfin

det
every

n

nation

t
-s

punc

.

vpstem

sinf

vstem
want
b
barack

np

   e act(e,loving), lover(e,b), lovee(e,m)

vpinf

   x    e act(e,loving),
lover(e,x), lovee(e,m)

t
to

vpstem

vstem
love

np

michelle

root

sfin

np

vpfin

det
every

n

nation

t
-s

punc

.

vpstem

sinf

vstem
want
b
barack
   a a

np

t
to

   e act(e,loving), lover(e,b), lovee(e,m)

vpinf

   x    e act(e,loving),
lover(e,x), lovee(e,m)

vpstem

   x    e act(e,loving),
lover(e,x), lovee(e,m)
np

michelle

we   ll say that

   to    is just a bit of syntax that
changes a vpstem to a vpinf
with the same meaning.

vstem
love

root

sfin

np

vpfin

det
every

n

nation

t
-s

punc

.

vpstem

sinf

vstem
want
b
barack
   a a

np

t
to

   e act(e,loving), lover(e,b), lovee(e,m)

vpinf

   x    e act(e,loving),
lover(e,x), lovee(e,m)

vpstem

   x    e act(e,loving),
lover(e,x), lovee(e,m)
np

m
michelle

vstem
love

   y    x    e act(e,loving),
lover(e,x), lovee(e,y)

root

sfin

punc

.

np

vpfin

det
every

n

nation

t
-s

vpstem

   x    e act(e,wanting), wanter(e,x),

wantee(e,    e    act(e   ,loving),

lover(e   ,b), lovee(e   ,m))
sinf

   e act(e,loving), lover(e,b), lovee(e,m)

by analogy

vstem
want
b
barack
   a a

np

t
to

vstem
love

   y    x    e act(e,loving),
lover(e,x), lovee(e,y)

vpinf

   x    e act(e,loving),
lover(e,x), lovee(e,m)

vpstem

   x    e act(e,loving),
lover(e,x), lovee(e,m)
np

m
michelle

root

sfin

punc

.

note applying    want    automatically
renamed the loving event (from e to e   ),
to avoid conflict with the wanting event
(also originally named e).
variable names are arbitrary anyway.

np

vpfin

det
every

n

nation

t
-s

   y    x    e act(e,wanting),
wanter(e,x), wantee(e,y)

vpstem

   x    e act(e,wanting), wanter(e,x),

wantee(e,    e    act(e   ,loving),

lover(e   ,b), lovee(e   ,m))
sinf

   e act(e,loving), lover(e,b), lovee(e,m)

by analogy

vstem
want
b
barack
   a a

np

t
to

vstem
love

   y    x    e act(e,loving),
lover(e,x), lovee(e,y)

vpinf

   x    e act(e,loving),
lover(e,x), lovee(e,m)

vpstem

   x    e act(e,loving),
lover(e,x), lovee(e,m)
np

m
michelle

root

sfin

punc

.

   x    e present(e),

act(e,wanting),

wanter(e,x),

wantee(e,    e    a`ct(e   ,loving),

lover(e   ,b), lovee(e   ,m))

np

vpfin

det
every

n

nation

t
-s

   push push   
   pop pop   

   x    e
   v
present(e),

v(x)(e)

vpstem

vstem
want

your account v is overdrawn, so your
rental application is rejected..
   
   

deposit some cash x to get v(x)
now show you   ve got the money:
   e present(e), v(x)(e)
now you can withdraw x again:
   x    e present(e), v(x)(e)

   

   x    e act(e,wanting), wanter(e,x),

wantee(e,    e    act(e   ,loving),

lover(e   ,b), lovee(e   ,m))
sinf

want to change

np

barack

vpinf

   e to    e present(e),
but blocked by    x which is
waiting for the subject np.

how would you modify

second object on a

stack (   x,   e,act   )?
pop    x, re-push    x

t
to

vpstem

vstem
love

np

michelle

root

   p every(nation, p)

sfin

np

vpfin

det
every

n

nation

t
-s

punc

.

vpstem

vstem
want

sinf

every(nation,    x    e present(e),
act(e,wanting), wanter(e,x),
wantee(e,    e    act(e   ,loving),

lover(e   ,b), lovee(e   ,m)))

   x    e present(e), act(e,wanting),

wanter(e,x), wantee(e,    e   

act(e   ,loving),

lover(e   ,b), lovee(e   ,m))

np

barack

vpinf

t
to

vpstem

vstem
love

np

michelle

every(nation,    x    e present(e),
act(e,wanting), wanter(e,x),
wantee(e,    e    act(e   ,loving),

lover(e   ,b), lovee(e   ,m)))

root

   p every(nation, p)

sfin

np

vpfin

punc

.

vpstem

det
every

   n    p

every(n, p)

n

nation
nation

t
-s

vstem
want

sinf

   x    e present(e), act(e,wanting),

wanter(e,x), wantee(e,    e   

act(e   ,loving),

lover(e   ,b), lovee(e   ,m))

np

barack

vpinf

t
to

vpstem

vstem
love

np

michelle

every(nation,    x    e present(e),
act(e,wanting), wanter(e,x),
wantee(e,    e    act(e   ,loving),

lover(e   ,b), lovee(e   ,m)))

root

sfin

punc

.

   s assert(s)

np

vpfin

det
every

n

nation

t
-s

vpstem

vstem
want

sinf

np

barack

vpinf

t
to

vpstem

vstem
love

np

michelle

in summary: from the words

assert(every(nation,    x    e present(e),

act(e,wanting), wanter(e,x),
wantee(e,    e    act(e   ,loving),
lover(e   ,b), lovee(e   ,m))))
np

sfin

root

vpfin

det
every
every

n

nation
nation

t
-s

   v    x    e present(e),v(x)(e)

vstem
want

   y    x    e act(e,wanting),
wanter(e,x), wantee(e,y)

punc
.
   s assert(s)
the semantics that we
deduced for every, -s,
vpstem
want, to, etc., will work
fine in other sentences
too! (is one sentence really
enough to figure out a word   s
np
meaning?  well, some words
barack
are ambiguous    )

vpinf

sinf

vpstem

b
   a a

t
to
   y    x    e act(e,loving),
lover(e,x), lovee(e,y)

vstem
love

np

michelle
m

67

600.465 - intro to nlp - j. eisner

other fun semantic stuff:
a few much-studied miscellany
    temporal logic

    gilly had swallowed eight goldfish

before milly reached the bowl

    billy said jilly was pregnant
    billy said,    jilly is pregnant.   

    generics

    typhoons arise in the pacific
    children must be carried

    presuppositions

    the king of france is bald.
    have you stopped beating your wife?

    pronoun-quantifier interaction (   bound anaphora   )

    every farmer who owns a donkey beats it.
    if you have a dime, put it in the meter.
    the woman who every englishman loves is his mother.
    i love my mother and so does billy.

600.465 - intro to nlp - j. eisner

68

pragmatics

    i saw this sign in seattle.
    i   d been in violation of it for

approximately my entire adult life.

    but only technically.

    pragmatics is the study how we look past

the literal meaning.

    what conclusions should i actually draw
from the fact that you said something?
    should i use bayes    theorem?

    what conclusions were you trying to get me

to draw?

600.465 - intro to nlp - j. eisner

69

uncertainty about the world
outcome space
each outcome = a world

oh! we must be in a

world where all

owls are bachelors,
or at least a world
where he   d say such

a thing.

in my new id203

low-prob set of worlds in which
owl(barackobama)=true

all (male)
owls are
bachelors

distribution over
worlds, is obama
more likely to be a

bachelor?

only slightly more likely,
since  i didn   t think he
was an owl before     nor
tried to act like one.  the
new information doesn   t

seem to change that.

uncertainty about the world
outcome space
each outcome = a world

oh! we must be in a

world where all

owls are bachelors

   
    and where
there   s a first

lady.

low-prob set of worlds in which
owl(barackobama)=true

all (male)
owls are
bachelors

by the way, what do you
think of the first lady   s

vegetable garden?

given everything else

i believe about the

world, this means that
almost certainly it is
a world where obama
is not a bachelor    

    and

therefore not

an owl.

