cs5740: natural language processing

spring 2018

sequence prediction and 
part-of-speech tagging

instructor: yoav artzi

slides adapted from dan klein, dan jurafsky, chris manning, 
michael collins, luke zettlemoyer, yejin choi, and slav petrov

overview
    id52: the problem
    id48 (id48)

    supervised learning
    id136

    the viterbi algorithm
    feature-rich models

    maximum-id178 markov models
    id88
    id49

parts of speech

open class (lexical) words
nouns
proper
ibm
italy

common
cat / cats
snow

verbs
main
see
registered

closed class (functional)

determiners

the some

conjunctions

and or

pronouns

he its

modals
can
had

adjectives

old   older   oldest

adverbs

slowly

numbers
122,312
one

    more

prepositions

to with

particles

off   up

    more

interjections ow eh

id52

    words often have more than one pos: back

    the backdoor = jj
    on my back= nn
    win the voters back= rb
    promised to backthe bill = vb

    the id52 problem is to determine 
the pos tag for a particular instance of a 
word.

id52

id32 pos tags

well

plays

input:

   
    ambiguity: nns/vbz uh/jj/nn/rb in
    output:
    uses:

plays/vbz well/rb 

with

others
nns

with/in others/nns

    text-to-speech (how do we pronounce (cid:1)lead(cid:2)?)
    can write id157 like (det) adj* n+ over the output for 

phrases, etc.

    as input to or to speed up a full parser
    if you know the tag, you can back off to it in other tasks

id32 tagset

    possible tags: 45
    tagging guidelines: 36 pages
    newswire text

cc 
cd 
dt 
ex 
fw 
in 
jj 
jjr 
jjs 
md 
nn 
nnp 
nnps 
nns 
pos 
prp 
prp$ 
rb 
rbr 
rbs 
rp 
to 
uh 
vb 
vbd 
vbg 
vbn 
vbp 
vbz 
wdt 
wp 
wp$ 
wrb 

conjunction, coordinating 

numeral, cardinal 

determiner 

existential there 
foreign word 

preposition or conjunction, subordinating 

adjective or numeral, ordinal 

noun, common, singular or mass 

adjective, comparative 
adjective, superlative 

modal auxiliary 

noun, proper, singular 
noun, proper, plural 
noun, common, plural 

genitive marker 
pronoun, personal 
pronoun, possessive 

adverb 

adverb, comparative 
adverb, superlative 

particle 

interjection 

verb, base form 
verb, past tense 

"to" as preposition or infinitive marker 

verb, present participle or gerund 

verb, past participle 

verb, present tense, not 3rd person singular 

verb, present tense, 3rd person singular 

wh-determiner 
wh-pronoun 

wh-pronoun, possessive 

wh-adverb 

main tags

and both but either or

mid-1890 nine-thirty 0.5 one

a all an every no that the

there 

gemeinschaft hund ich jeux
among whether out on by if
third ill-mannered regrettable

braver cheaper taller
bravest cheapest tallest
can may might will would 

cabbage thermostat investment subhumanity

motown cougar yvette liverpool

americans materials states

undergraduates bric-a-brac averages

hers himself it we them

her his mine my our ours their thy your 
occasionally maddeningly adventurously
further gloomier heavier less-perfectly

best biggest nearest worst 

aboard away back by on open through

' 's 

to 

huh howdy uh whammo shucks heck

ask bring fire see take

pleaded swiped registered saw

stirring focusing approaching erasing
dilapidated imitated reunifed unsettled
twist appear comprise mold postpone

bases reconstructs marks uses

that what whatever which whichever 
that what whatever which who whom

whose 

however whenever where why 

id32 tagset

    how accurate are taggers?  (tag accuracy)

    about 97% currently
    but baseline is already 90%

    baseline is performance of simplest possible method

    tag every word with its most frequent tag
    tag unknown words as nouns

    partly easy because

    many words are unambiguous
    you get points for them (the, a, etc.) and for 

punctuation marks!

    upperbound: probably 2% annotation errors

hard cases are hard

    mrs/nnp shaefer/nnp never/rb got/vbd around/rp 

to/to joining/vbg

    all/dt we/prp gotta/vbn do/vb is/vbz go/vb around/in 

the/dt corner/nn

    chateau/nnp petrus/nnp costs/vbz around/rb 250/cd

how difficult is id52?
    about 11% of the word types in the brown 
corpus are ambiguous with regard to part 
of speech

    but they tend to be very common words. 

e.g., that
    i know thathe is honest = in
    yes, thatplay was nice = dt
    you can   t go thatfar = rb

    40% of the word tokens are ambiguous

the tagset

    wait, do we really need all these tags?
    what about other languages?  
    each language has its own tagset

tagsets in different languages

[petrov et al. 2012]

the tagset

    wait, do we really need all these tags?
    what about other languages?  
    each language has its own tagset

    but why is this bad?
    differences in downstream tasks
    harder to do language transfer

alternative: the universal tagset
    12 tags:

    noun, verb, adj, adv, pron, det, adp, 

num, conj, prt,    .   , and x.

    deterministic conversion from tagsets in 

22 languages.

    better unsupervised parsing results
    was used to transfer parsers

[petrov et al. 2012]

sources of information

    what are the main sources of information 

for id52?
    knowledge of neighboring words

    bill
    nnp
    vb      nn  

saw  
vb(d)       dt     nn    nn
in       vb     nn
    knowledge of word probabilities

    manis rarely used as a verb   .

that   man  yesterday

    the latter proves the most useful, but the 

former also helps

word-level features

    can do surprisingly well just looking at a 

word by itself:
    word
    lowercased words: 

the: the    dt

importantly    rb
unfathomable: un-    jj
    prefixes
    suffixes
importantly: -ly    rb
    capitalization meridian: cap    nnp
    word shapes 35-year: d-x    jj

sequence-to-sequence

consider the problem of jointly modeling a pair of strings

    e.g.: id52

dt     nnp       nn   
the 

vbd 
georgia  branch  had 

vbn   rp  
on 
taken 

nn    
loan 

nns
commitments    

dt      nn     
the

average of 

in     

nn        
interbank 

vbd    nns       vbd
offered  rates 

plummeted    

q: how do we map each word in  the input sentence onto the 
appropriate label?
a: we can learn a joint distribution:

p(x1 . . . xn, y1 . . . yn)
and then compute the most likely assignment:

arg max
y1...yn

p(x1 . . . xn, y1 . . . yn)

classic solution: id48s
we want a model of sequences y and observations x

y0

y1

y2

x1

x2

transition

yn
emission
xn
q(yi|yi 1)e(xi|yi)

p(x1 . . . xn, y1 . . . yn) = q(st op|yn)

where y0=startand we call !"# "$%&) the transition
distribution and ()# "#) the emission (or observation) 

nyi=1

distribution.

model assumptions

y0

y1

x1

y2

x2

p(x1 . . . xn, y1 . . . yn) = q(st op|yn)

transition

yn
emission
xn
q(yi|yi 1)e(xi|yi)

nyi=1

    tag/state sequence is generated by a markov model
    words are chosen independently, conditioned only on 
    these are totally broken assumptions for pos: why?

the tag/state

id48 for id52

the georgia branch had taken on loan commitments    

    id48 model:

dt     nnp        nn        vbd    vbn   rp   nn        nns

    states ! = {dt, nnp, nn, ... } are the pos tags
    observations " = v are words
    transition dist   n#$%$%&') models the tag sequences
    emission dist   n)*%$%) models words given their pos

id48 for id52

the georgia branch had taken on loan commitments    

    id48 model:

dt     nnp        nn        vbd    vbn   rp   nn        nns

    states ! = {dt, nnp, nn, ... } are the pos tags
    observations " = v are words
    transition dist   n#$%$%&') models the tag sequences
    emission dist   n)*%$%) models words given their pos

id48 id136 and learning
    maximum likelihood: transitions ! and emissions "
    learning

nyi=1

q(yi|yi 1)e(xi|yi)

p(x1 . . . xn, y1 . . . yn)

p(x1 . . . xn, y1 . . . yn) = q(st op|yn)

    id136
    viterbi

y    = arg max
y1...yn
    forward backward

p(x1 . . . xn, yi) = xy1...yi 1 xyi+1...yn

p(x1 . . . xn, y1 . . . yn)

learning: maximum likelihood
p(x1 . . . xn, y1 . . . yn) = q(st op|yn)
q(yi|yi 1)e(xi|yi)
    maximum likelihood methods for estimating 

nyi=1
transitions q and emissions e

c(yi 1, yi)
c(yi 1)

qm l(yi|yi 1) =

    which is likely to be more sparse, ! or "?

em l(x|y) =
    will these estimates be high quality?
    smoothing?

c(y, x)
c(y)

learning: low frequency words
q(yi|yi 1)e(xi|yi)
p(x1 . . . xn, y1 . . . yn) = q(st op|yn)

nyi=1

    typically, for transitions:

    linear interpolation

q(yi|yi 1) =  1qm l(yi|yi 1) +  2qm l(yi)

    however, other approaches used for emissions

    frequent words: appear more than ! (often 5) times

    step 1: split the vocabulary

    step 2: map each low frequency word to one of a small, finite 

    low frequency: everything else
set of possibilities
    for example, based on prefixes, suffixes, etc.
sequences

    step 3: learn model for this new space of possible word 

another example: chunking

    goal: segment text into spans with certain 
    for example, named entities: per, org, and 

properties
loc

germany    s representative to the european union    s veterinary committee 
werner zwingman said on wednesday consumers should    

[germany]loc    s representative to the [european union]org    s veterinary 
committee [werner zwingman]per said on wednesday consumers should    

how is this a sequence tagging problem?

id39

germany    s representative to the european union    s veterinary committee 
werner zwingman said on wednesday consumers should    

[germany]loc    s representative to the [european union]org    s veterinary 
committee [werner zwingman]per said on wednesday consumers should    
    id48 model:

    states ! = {na,bl,cl,bo,co,bp,cp} represent 
    observations " = v are words
    transition dist   n#(%&|%&()) models the tag sequences
    emission dist   n+(,&|%&) models words given their type

beginnings (bl,bo,bp) and continuations (cl,co,cp) of 
chunks, as well as other words (na)

low frequency words: an 

    id39 [bickel et. al, 1999]

example
dealing with low-frequency words: an example
[bikel et. al 1999] (named-entity recognition)
    used the following word classes for infrequent words:
word class
twodigitnum
fourdigitnum
containsdigitandalpha
containsdigitanddash
containsdigitandslash
containsdigitandcomma
containsdigitandperiod
othernum
allcaps
capperiod
   rstword
initcap
lowercase
other

intuition
two digit year
four digit year
product code
date
date
monetary amount
monetary amount,percentage
other number
organization
person name initial
no useful capitalization information
capitalized word
uncapitalized word
punctuation marks, all other words

example
90
1990
a8956-67
09-96
11/9/89
23,000.00
1.00
456789
bbn
m.
   rst word of sentence
sally
can
,

18

low frequency words: an 

example

profits/na soared/na at/na boeing/so co./co ,/na easily/na topping/na 
forecasts/na on/na wall/sl street/cl ,/na as/na their/na ceo/na alan/sp 
mulally/cp announced/na first/na quarter/na results/na ./na

    na = no entity 
    so = start organization
    co = continue organization 
    sl  = start location 
    cl  = continue location
       

low frequency words: an 

example

profits/na soared/na at/na boeing/so co./co ,/na easily/na topping/na 
forecasts/na on/na wall/sl street/cl ,/na as/na their/na ceo/na alan/sp 
mulally/cp announced/na first/na quarter/na results/na ./na

firstword/na soared/na at/na initcap/sc co./cc ,/na easily/na lowercase/na 
forecasts/na on/na initcap/sl street/cl ,/na as/na their/na ceo/na alan/sp 
initcap/cp announced/na first/na quarter/na results/na ./na

    na = no entity 
    so = start organization
    co = continue organization 
    sl  = start location 
    cl  = continue location
       

id48 id136 and learning
    learning

    maximum likelihood: transitions q and emissions e

nyi=1

q(yi|yi 1)e(xi|yi)

p(x1 . . . xn, y1 . . . yn)

p(x1 . . . xn, y1 . . . yn) = q(st op|yn)

    id136
    viterbi

y    = arg max
y1...yn
    forward backward

p(x1 . . . xn, yi) = xy1...yi 1 xyi+1...yn

p(x1 . . . xn, y1 . . . yn)

id136 (decoding)

    problem: find the most likely (viterbi) sequence under the model 

y    = arg max
y1...yn

p(x1 . . . xn, y1 . . . yn)

    given model parameters, we can score any sequence pair

nnp
fed    

vbz
raises

nn
interest

nns
rates     0.5       percent

nn

cd

.
.

q(nnp|

) e(fed|nnp) q(vbz|nnp) e(raises|vbz) q(nn|vbz)   ..

in principle, we   re done     list all possible tag sequences, score 
each one, pick the best one (the viterbi state sequence) 

   

!"#$(&,()=   23
log(&,()=   29
log$(&,()=   27

any 
issue?

nnp vbz nn nns cd nn .
nnp nns nn nns cd nn .
nnp vbz vb nns cd nn .

finding the best trajectory 

    too many trajectories (state sequences) to list
    option 1: id125

    a beam is a set of partial hypotheses
    start with just the single empty trajectory
    at each derivation step:
    consider all continuations of previous hypotheses
    discard most, keep top k

<>

fed:n
fed:v
fed:j

raises:n
raises:v
raises:n
raises:v

    id125 often works ok in practice, but    
        sometimes you want the optimal answer
        and there   s usually a better option than na  ve beams

the state lattice / trellis

^

e(fed|n)

n
q(v|n)
v

^

n

^

n

v

q(v|v)

v

e(raises|v) e(interest|v)

^

n

^

n

e(stop|v)

e(rates|j)

q(j|v)

q(v|j)

j

d

$

j

d

$

j

d

$

v

j

d

$

v

j

d

$

^
q(n|^)
n

v

j

d

$

start       fed           raises       interest         rates         stop
^                n               v              v                   j               v

scoring a sequence

y    = arg max
y1...yn

p(x1 . . . xn, y1 . . . yn)

p(x1 . . . xn, y1 . . . yn) = q(st op|yn)
    define   (i,yi) to be the max score of a sequence of length i

q(yi|yi 1)e(xi|yi)

nyi=1

ending in tag yi
   (i, yi) = max

y1...yi 1

p(x1 . . . xi, y1 . . . yi)

= max
yi 1
= max
= max
= max
yi 1
yi 1
yi 1

e(xi|yi)q(yi|yi 1) max
y1...yi 2
e(xi|yi)q(yi|yi 1)   (i   1, yi 1)
e(xi|yi)q(yi|yi 1)   (i   1, yi 1)
e(xi|yi)q(yi|yi 1)   (i   1, yi 1)

    we can now design an efficient algorithm. 

    how?

p(x1 . . . xi 1, y1 . . . yi 1)

the viterbi algorithm

dynamic program for computing (for all i)

   (i, yi) = max

p(x1 . . . xi, y1 . . . yi)

iterative computation:

y1...yi 1

   (0, y0) =    1 if y0 == st art

0 otherwise

for i = 1     n:

// store score
   (i, yi) = max
yi 1
// store back-pointer
bp(i, yi) = arg max
yi 1

e(xi|yi)q(yi|yi 1)   (i   1, yi 1)

e(xi|yi)q(yi|yi 1)   (i   1, yi 1)

what 
for?

the state lattice / trellis

tie breaking:
prefer first

^

n

v

$

^

n

v

$

^

n

v

$

^

n

v

$

^

n

v

$

start
from \ to
^
n
v
$

fed
n
0.6
0.4
0.6
0.0

^
0.0
0.0
0.0
0.0

raises

v
0.4
0.2
0.1
0.0

$
0.0
0.4
0.3
1.0

emissions
^
n
v
$

start
1.0
0.0
0.0
0.0

interest
fed
0.0
0.45
0.0
0.0

stop
interest
0.0
0.45
0.4
0.0

stop
0.0
0.0
0.0
1.0

raises
0.0
0.1
0.7
0.0

the state lattice / trellis

tie breaking:
prefer first

^

n

v

$

   = 1 
bp = null
   = 0 
bp = null
   = 0 
bp = null
   = 0
bp = null

^

n

v

$

   = 0 
bp = ^
   = 0.27 
bp = ^
   = 0 
bp = ^
   = 0
bp = ^

^

n

v

$

   = 0 
bp = ^
   = 0.0108 
bp = n
   = 0.0378 
bp = n
   = 0
bp = ^

^

n

v

$

   = 0 
bp = ^
   = 
0.010206
bp = v
   = 
0.001512
bp = v
   = 0
bp = ^

^

n

v

$

   = 0 
bp = ^
   = 0
bp = ^
   = 0 
bp = ^
   = 0.0040824
bp = n

start
from \ to
^
n
v
$

fed
n
0.6
0.4
0.6
0.0

^
0.0
0.0
0.0
0.0

raises

v
0.4
0.2
0.1
0.0

$
0.0
0.4
0.3
1.0

emissions
^
n
v
$

start
1.0
0.0
0.0
0.0

interest
fed
0.0
0.45
0.0
0.0

stop
interest
0.0
0.45
0.4
0.0

stop
0.0
0.0
0.0
1.0

raises
0.0
0.1
0.7
0.0

the viterbi algorithm: runtime
    in term of sentence length n?
    in term of number of states |k|?

    linear
    polynomial

   (i, yi) = max
yi 1

    specifically:

e(xi|yi)q(yi|yi 1)   (i   1, yi 1)

o(n|k|) entries in    (i, yi)
o(|k|) time to compute each    (i, yi)

    total runtime:
    q: is this a practical algorithm?
    a: depends on |k|   .

o(n|k|2)

tagsets in different languages

2942 = 86436

452 = 2045

112 = 121

[petrov et al. 2012]

id48 id136 and learning
    learning

    maximum likelihood: transitions q and emissions e

nyi=1

q(yi|yi 1)e(xi|yi)

p(x1 . . . xn, y1 . . . yn)

p(x1 . . . xn, y1 . . . yn) = q(st op|yn)

    id136
    viterbi

y    = arg max
y1...yn
    forward backward

p(x1 . . . xn, yi) = xy1...yi 1 xyi+1...yn

p(x1 . . . xn, y1 . . . yn)

what about id165 taggers?
    states encode what is relevant about the past
    transitions p(si | si-1) encode well-formed tag sequences

    in a bigram tagger, states = tags

<  >

s0

< y1>
s1

< y2>
s2

x1

x2

    in a trigram tagger, states = tag pairs

<  ,  >
s0

<   , y1>

< y1, y2>

s1

x1

s2

x2

< yn>
sn

xn

< yn-1, yn>

sn

xn

the state lattice / trellis

not all 
edges are 
allowed

^,^

n,n

q
(

n

|

^
,
^
)

n,v
   
n,d
   
d,v
   
$

^,^

n,n

e(fed|n)

^,^

n,n

^,^

n,n

e(raises|d)

^,n
   
q(d|^,n)
n,d
   
d,v
   
$

^,v
   
n,d
   
d,v
   
$

^,v
   
n,d
   
d,v
   
$

e(interest|v)

q(v|n,d)

start               fed               raises           interest      
^
   

n   

d

v

tagsets in different languages

2942 = 86436
2944 = 7471182096

452 = 2045
454 = 4100625

112 = 121
114 = 14641

[petrov et al. 2012]

some numbers

most errors 
on unknown 

words

    rough accuracies:

    most freq tag: 
    trigram id48: 
    tnt (brants, 2000): 
    maxent p(y | x)
    memm tagger 1:
    memm tagger 2:
    id88: 
    crf++:
    cyclic tagger:
    upper bound:

~90% / ~50%
~95% / ~55%
96.7% / 85.5%
93.7% / 82.6%
96.7% / 84.5%
96.8% / 86.9%
97.1%
97.3%
97.2% / 89.0%
~98%

    a carefully smoothed trigram tagger
    suffix trees for emissions

re-visit p(x | y)

    reality check:

    what if we drop the sequence?

    use only p(x | y)

    most frequent tag:

    can we do better?

    90.3% with a so-so unknown word model

what about better features?
    looking at a word and its environment

    add in previous / next word the __
    previous / next word shapes x __ x
    occurrence pattern features [x: x x occurs]
__    .. (inc.|co.)
    crude entity detection
    phrasal verb in sentence? put        __
    conjunctions of these things

    uses lots of features: > 200k

some numbers

    rough accuracies:

~90% / ~50%
~95% / ~55%
96.7% / 85.5%
93.7% / 82.6%
96.7% / 84.5%
96.8% / 86.9%
    what does this tell us about sequence models?
    how do we add more features to our sequence 
97.1%
97.3%
97.2% / 89.0%
~98%

    most freq tag: 
    trigram id48: 
    tnt (brants, 2000): 
    maxent p(y | x)
    memm tagger 1:
    memm tagger 2:
    id88: 
models?
    crf++:
    cyclic tagger:
    upper bound:

memm taggers

one step up: also condition on previous tags:

nyi=1
nyi=1

p(y1 . . . yn|x1 . . . xn) =

p(yi|y1 . . . yi 1, x1 . . . xn)

=

    training:
    scoring:

p(yi|yi 1, x1 . . . xn)

    train !(#$|#$&',)1   ),) as a discrete log-linear (maxent) model
py0 ew   (x1...xn,i,yi 1,y0)

p(yi|yi 1, x1 . . . xn) =

    this is referred to as an memm tagger [ratnaparkhi 96]

ew   (x1...xn,i,yi 1,yi)

id48 vs. memm
    id48 models joint distribution:
nyi=1

p(x1 . . . xn, y1 . . . yn) = q(st op|yn)

q(yi|yi 1)e(xi|yi)
    memm models conditioned distribution:

p(y1 . . . yn|x1 . . . xn) =

nyi=1

p(yi|y1 . . . yi 1, x1 . . . xn)

decoding memm taggers

    scoring:

p(yi|yi 1, x1 . . . xn) =

ew   (x1...xn,i,yi 1,yi)

py0 ew   (x1...xn,i,yi 1,y0)

    id125 is effective     why?
    guarantees? optimal?
    can we do better?

the state lattice / trellis

^

e(fed|n)

n
q(v|n)
v

^

n

^

n

v

q(v|v)

v

e(raises|v) e(interest|v)

^

n

^

n

e(stop|v)

e(rates|j)

q(j|v)

q(v|j)

j

d

$

j

d

$

j

d

$

v

j

d

$

v

j

d

$

^
q(n|^)
n

v

j

d

$

start       fed           raises       interest         rates         stop
^                n               v              v                   j               v

the memm state lattice / trellis

^

q(n|^, x)

n

^

n

^

n

^

n

^

n

^

n

v

j

d

$

q(v|n, x) q(v|v, x)

v

v

j

d

$

j

d

$

v

v

v

q(j|v, x) q(v|j, x)

j

j

j

d

$

d

$

d

$

start       fed           raises       interest         rates         stop
^                n               v              v                   j               v

    decoding maxent taggers:
    just like decoding id48s
    viterbi, id125
    viterbi algorithm (id48s):

decoding memm taggers
    define !(#,%#) to be the max score of a sequence of 
length # ending in tag %#
redefine !(#,%#) !

   (i, yi) = max
yi 1
    viterbi algorithm (maxent):

e(xi|yi)q(yi|yi 1)   (i   1, yi 1)

    can use same algorithm for memms, just need to 

   (i, yi) = max
yi 1

p(yi|yi 1, x1 . . . xm)   (i   1, yi 1)

some numbers

    rough accuracies:

    most freq tag: 
    trigram id48: 
    tnt (brants, 2000): 
    maxent p(y | x)
    memm tagger 1:
    memm tagger 2:
    id88: 
    crf++:
    cyclic tagger:
    upper bound:

~90% / ~50%
~95% / ~55%
96.7% / 85.5%
93.7% / 82.6%
96.7% / 84.5%
96.8% / 86.9%
97.1%
97.3%
97.2% / 89.0%
~98%

[ratnaparkhi 1996]

feature development

common errors:

nn/jj nn
official knowledge

vbd rp/in dt nn
made  up   the story

rb   vbd/vbn nns
recently   sold   shares

[toutanova and manning 2000]

some numbers

    rough accuracies:

    most freq tag: 
    trigram id48: 
    tnt (brants, 2000): 
    maxent p(y | x)
    memm tagger 1:
    memm tagger 2:
    id88: 
    crf++:
    cyclic tagger:
    upper bound:

~90% / ~50%
~95% / ~55%
96.7% / 85.5%
93.7% / 82.6%
96.7% / 84.5%
96.8% / 86.9%
97.1%
97.3%
97.2% / 89.0%
~98%

[toutanova and manning 2000]

locally normalized models

    probabilities are product of locally normalized 

    so far:

probabilities
    is this bad?

    label bias

    states with fewer transitions are likely to be 
    extreme case: what happens if there is only 

preferred because id172 is local
one outgoing arc? does it matter what the 
observation is?

locally normalized models

    probabilities are product of locally normalized 

    so far:

probabilities
    is this bad?

0.4

0.2
0.4

a

b

c

from \ to
a
b
c

a
0.4
0.0
0.6

b
0.2
1.0
0.2

a

b

c

c
0.4
0.0
0.2

0.4

1.0

a

b

c

aaa    0.4 x 0.4 = 0.16
abb    0.2 x 1.0 = 0.2

b    b transitions are likely to take over 
even if rarely observed!

global discriminative taggers
    discriminative sequence models

    crfs (also id88s)
    do not decompose training into independent 

local regions

    can be very slow* to train     require repeated 

id136 on training set

* relatively slow. nn models are much slower.

linear models: id88

    the id88 algorithm

    iteratively processes the data, reacting to training errors
    can be thought of as trying to drive down training error

    the (online structured) id88 algorithm:

    start with zero weights

    visit training instances ("#,%(#)) one by one
    if correct (%   ==%(#)): 

w     (x (i), y )

sentence: "=-1   -.
%=)1   ),

    make a prediction

y     = arg max

tag sequence:

y

<latexit sha1_base64="htxo+exkjysfrxfsn4xafh1dsey=">aaacd3icbvdlssnafj3uv62vqes3g0vsruoigroqim5cvjc2pundzdjph04ezezuevojbvwvny5u3lp15984fsy09ccfwzn3cu89xskokibxrexm5hcwl/llhzxvtfunfxprvsqpx8tcmyt5w0ocmbors1ljscphbiuei3wvdzn063eecxphn7kfecdenyggfcopjfffb7yp4dm0ee/yixpwm/dexn4s7arls412vqllwsfsll29aid122eeasmsekccaoufqx7cc4dukkmunctewjku6guksykuhbtgvjeo6hdmkpgqgqcccbptsae0rxyrbzvzgei/x3rizcifqhpzpdjlti2huk/3mtvaantkajjjukwunfqcqgjoewhehttrbkfuuq5ltdcnexcyslyrcgqjcnx54l1lhlrgjehxerf5m08mah7iismmejqiiruamwwoarpinx8ky9as/au/yxbs1pk5lt8afa5w8r3prr</latexit>
<latexit sha1_base64="htxo+exkjysfrxfsn4xafh1dsey=">aaacd3icbvdlssnafj3uv62vqes3g0vsruoigroqim5cvjc2pundzdjph04ezezuevojbvwvny5u3lp15984fsy09ccfwzn3cu89xskokibxrexm5hcwl/llhzxvtfunfxprvsqpx8tcmyt5w0ocmbors1ljscphbiuei3wvdzn063eecxphn7kfecdenyggfcopjfffb7yp4dm0ee/yixpwm/dexn4s7arls412vqllwsfsll29aid122eeasmsekccaoufqx7cc4dukkmunctewjku6guksykuhbtgvjeo6hdmkpgqgqcccbptsae0rxyrbzvzgei/x3rizcifqhpzpdjlti2huk/3mtvaantkajjjukwunfqcqgjoewhehttrbkfuuq5ltdcnexcyslyrcgqjcnx54l1lhlrgjehxerf5m08mah7iismmejqiiruamwwoarpinx8ky9as/au/yxbs1pk5lt8afa5w8r3prr</latexit>
<latexit sha1_base64="htxo+exkjysfrxfsn4xafh1dsey=">aaacd3icbvdlssnafj3uv62vqes3g0vsruoigroqim5cvjc2pundzdjph04ezezuevojbvwvny5u3lp15984fsy09ccfwzn3cu89xskokibxrexm5hcwl/llhzxvtfunfxprvsqpx8tcmyt5w0ocmbors1ljscphbiuei3wvdzn063eecxphn7kfecdenyggfcopjfffb7yp4dm0ee/yixpwm/dexn4s7arls412vqllwsfsll29aid122eeasmsekccaoufqx7cc4dukkmunctewjku6guksykuhbtgvjeo6hdmkpgqgqcccbptsae0rxyrbzvzgei/x3rizcifqhpzpdjlti2huk/3mtvaantkajjjukwunfqcqgjoewhehttrbkfuuq5ltdcnexcyslyrcgqjcnx54l1lhlrgjehxerf5m08mah7iismmejqiiruamwwoarpinx8ky9as/au/yxbs1pk5lt8afa5w8r3prr</latexit>
<latexit sha1_base64="htxo+exkjysfrxfsn4xafh1dsey=">aaacd3icbvdlssnafj3uv62vqes3g0vsruoigroqim5cvjc2pundzdjph04ezezuevojbvwvny5u3lp15984fsy09ccfwzn3cu89xskokibxrexm5hcwl/llhzxvtfunfxprvsqpx8tcmyt5w0ocmbors1ljscphbiuei3wvdzn063eecxphn7kfecdenyggfcopjfffb7yp4dm0ee/yixpwm/dexn4s7arls412vqllwsfsll29aid122eeasmsekccaoufqx7cc4dukkmunctewjku6guksykuhbtgvjeo6hdmkpgqgqcccbptsae0rxyrbzvzgei/x3rizcifqhpzpdjlti2huk/3mtvaantkajjjukwunfqcqgjoewhehttrbkfuuq5ltdcnexcyslyrcgqjcnx54l1lhlrgjehxerf5m08mah7iismmejqiiruamwwoarpinx8ky9as/au/yxbs1pk5lt8afa5w8r3prr</latexit>

    no change, goto next example!

    if wrong: 

    adjust weights:

    challenge: how to compute argmax efficiently?

w = w +  (x (i), y (i))    (x (i), y   )

<latexit sha1_base64="wiftrfqi0h4cebzcdvoeg+tyi2k=">aaacg3icbzdlssnafiynxmu9rv26gsxc66ukkqgloejgzqvjk70xmu7aoznjmjlyquidupfv3lhqcsw48g2ctllo64gbj/8/hzpnd0ngpbksb2nmdm5+ytgzlf1ewv1bnzc272qqcuwchlbavf0kcaocoioqrqqhimh3gam4vauhx3kgqtka36o4ja0fdtj1kezksy3zua8vyb/uw3rypflqm8ntwuaa3o+haa8njli5v2izoatojqpog51cdqrvbpmf9xaai59whrmssmzbowokscikgrlk65ekici91ce1jrz5rdas0xedukuvnvqcor9xckt+nkiql2xsu7rtr6orj72h+j9xi5r31kgodynfob4v8iigvqchsce2fqqrfmtawfd9v4i7sccsdj5zhyi9efi0oeff86j9c5irxazpzma22af5yintualxoawcgmejeaav4m14ml6md+nj3dpjpdnb4e8zxz9lpp1u</latexit>
<latexit sha1_base64="wiftrfqi0h4cebzcdvoeg+tyi2k=">aaacg3icbzdlssnafiynxmu9rv26gsxc66ukkqgloejgzqvjk70xmu7aoznjmjlyquidupfv3lhqcsw48g2ctllo64gbj/8/hzpnd0ngpbksb2nmdm5+ytgzlf1ewv1bnzc272qqcuwchlbavf0kcaocoioqrqqhimh3gam4vauhx3kgqtka36o4ja0fdtj1kezksy3zua8vyb/uw3rypflqm8ntwuaa3o+haa8njli5v2izoatojqpog51cdqrvbpmf9xaai59whrmssmzbowokscikgrlk65ekici91ce1jrz5rdas0xedukuvnvqcor9xckt+nkiql2xsu7rtr6orj72h+j9xi5r31kgodynfob4v8iigvqchsce2fqqrfmtawfd9v4i7sccsdj5zhyi9efi0oeff86j9c5irxazpzma22af5yintualxoawcgmejeaav4m14ml6md+nj3dpjpdnb4e8zxz9lpp1u</latexit>
<latexit sha1_base64="wiftrfqi0h4cebzcdvoeg+tyi2k=">aaacg3icbzdlssnafiynxmu9rv26gsxc66ukkqgloejgzqvjk70xmu7aoznjmjlyquidupfv3lhqcsw48g2ctllo64gbj/8/hzpnd0ngpbksb2nmdm5+ytgzlf1ewv1bnzc272qqcuwchlbavf0kcaocoioqrqqhimh3gam4vauhx3kgqtka36o4ja0fdtj1kezksy3zua8vyb/uw3rypflqm8ntwuaa3o+haa8njli5v2izoatojqpog51cdqrvbpmf9xaai59whrmssmzbowokscikgrlk65ekici91ce1jrz5rdas0xedukuvnvqcor9xckt+nkiql2xsu7rtr6orj72h+j9xi5r31kgodynfob4v8iigvqchsce2fqqrfmtawfd9v4i7sccsdj5zhyi9efi0oeff86j9c5irxazpzma22af5yintualxoawcgmejeaav4m14ml6md+nj3dpjpdnb4e8zxz9lpp1u</latexit>
<latexit sha1_base64="wiftrfqi0h4cebzcdvoeg+tyi2k=">aaacg3icbzdlssnafiynxmu9rv26gsxc66ukkqgloejgzqvjk70xmu7aoznjmjlyquidupfv3lhqcsw48g2ctllo64gbj/8/hzpnd0ngpbksb2nmdm5+ytgzlf1ewv1bnzc272qqcuwchlbavf0kcaocoioqrqqhimh3gam4vauhx3kgqtka36o4ja0fdtj1kezksy3zua8vyb/uw3rypflqm8ntwuaa3o+haa8njli5v2izoatojqpog51cdqrvbpmf9xaai59whrmssmzbowokscikgrlk65ekici91ce1jrz5rdas0xedukuvnvqcor9xckt+nkiql2xsu7rtr6orj72h+j9xi5r31kgodynfob4v8iigvqchsce2fqqrfmtawfd9v4i7sccsdj5zhyi9efi0oeff86j9c5irxazpzma22af5yintualxoawcgmejeaav4m14ml6md+nj3dpjpdnb4e8zxz9lpp1u</latexit>

decoding

    linear id88

    features must be local, for !=#1   #&, and '=(1   ()

y     = arg max

w     (x, y )

y

<latexit sha1_base64="yeglhkfe/htjqsh8mlarkivnq/w=">aaaccxicbvdlssnafj3uv62vqes3o0woiiurqv0irtcukxjb0sqwmuzaozmhmxo1hk7d+ctuxki49q/c+tdo2yy09ccfwzn3cu89xskokibxrrvmzufmf4qlpaxlldu1fx3jrsqpx8tcmyt500ocmbors1ljsdphbiueiw2vdzh0g3eecxph17kfecdenyggfcopjfffbt3uwznoi96xq/tgtuc9jf1y2kmxvpohslxn6mwjaowap4mzkzliuxf1l9upcrqssgkghgibrikddhfjmsodkp0kkidcqx3svjrcirfonnplahev4smg5qoicufq74kmhul0q091hkh2xaq3fp/z2qkmtpymrkkqsythi4kuqrndys7qp5xgyfqkimypuhxiluiis5vesyvgtr48tazd6mnvvdoq187znipgc+yacjdbmaibs1ahfsdgetydv/cmpwkv2rv2mw4tapnmjvgd7fmhyhsynw==</latexit>
<latexit sha1_base64="yeglhkfe/htjqsh8mlarkivnq/w=">aaaccxicbvdlssnafj3uv62vqes3o0woiiurqv0irtcukxjb0sqwmuzaozmhmxo1hk7d+ctuxki49q/c+tdo2yy09ccfwzn3cu89xskokibxrrvmzufmf4qlpaxlldu1fx3jrsqpx8tcmyt500ocmbors1ljsdphbiueiw2vdzh0g3eecxph17kfecdenyggfcopjfffbt3uwznoi96xq/tgtuc9jf1y2kmxvpohslxn6mwjaowap4mzkzliuxf1l9upcrqssgkghgibrikddhfjmsodkp0kkidcqx3svjrcirfonnplahev4smg5qoicufq74kmhul0q091hkh2xaq3fp/z2qkmtpymrkkqsythi4kuqrndys7qp5xgyfqkimypuhxiluiis5vesyvgtr48tazd6mnvvdoq187znipgc+yacjdbmaibs1ahfsdgetydv/cmpwkv2rv2mw4tapnmjvgd7fmhyhsynw==</latexit>
<latexit sha1_base64="yeglhkfe/htjqsh8mlarkivnq/w=">aaaccxicbvdlssnafj3uv62vqes3o0woiiurqv0irtcukxjb0sqwmuzaozmhmxo1hk7d+ctuxki49q/c+tdo2yy09ccfwzn3cu89xskokibxrrvmzufmf4qlpaxlldu1fx3jrsqpx8tcmyt500ocmbors1ljsdphbiueiw2vdzh0g3eecxph17kfecdenyggfcopjfffbt3uwznoi96xq/tgtuc9jf1y2kmxvpohslxn6mwjaowap4mzkzliuxf1l9upcrqssgkghgibrikddhfjmsodkp0kkidcqx3svjrcirfonnplahev4smg5qoicufq74kmhul0q091hkh2xaq3fp/z2qkmtpymrkkqsythi4kuqrndys7qp5xgyfqkimypuhxiluiis5vesyvgtr48tazd6mnvvdoq187znipgc+yacjdbmaibs1ahfsdgetydv/cmpwkv2rv2mw4tapnmjvgd7fmhyhsynw==</latexit>
<latexit sha1_base64="yeglhkfe/htjqsh8mlarkivnq/w=">aaaccxicbvdlssnafj3uv62vqes3o0woiiurqv0irtcukxjb0sqwmuzaozmhmxo1hk7d+ctuxki49q/c+tdo2yy09ccfwzn3cu89xskokibxrrvmzufmf4qlpaxlldu1fx3jrsqpx8tcmyt500ocmbors1ljsdphbiueiw2vdzh0g3eecxph17kfecdenyggfcopjfffbt3uwznoi96xq/tgtuc9jf1y2kmxvpohslxn6mwjaowap4mzkzliuxf1l9upcrqssgkghgibrikddhfjmsodkp0kkidcqx3svjrcirfonnplahev4smg5qoicufq74kmhul0q091hkh2xaq3fp/z2qkmtpymrkkqsythi4kuqrndys7qp5xgyfqkimypuhxiluiis5vesyvgtr48tazd6mnvvdoq187znipgc+yacjdbmaibs1ahfsdgetydv/cmpwkv2rv2mw4tapnmjvgd7fmhyhsynw==</latexit>

 (x, y ) =

<latexit sha1_base64="pz5sdx+rdbffqks2a3/hx0f31ha=">aaacfnicbvdlssnafj3uv62vqes3g0vooyzebhvrklpxwchashvdzdppp51mwsxekkf/4czfcencxa2482+ctllo9cdlhs65l5l7/jhrqwz7y8gtlc4tr+rxc2vrg5tb5vbojywsgukdrywslr9jwignduuvi61yebt6jdt94cxeb94tiwner9uojm6iepwgfcoljc+0ongfllqv2zkswo5mqi8dvj3xhyezmaimthtojhufld2zafv2fpavctjsbbnqnvnz6uy4cqlxmcep244dkzdfqlhmyljqsssjer6ihmlrylfipjto7xrda610yrajxvzbqfpzi0whlkpq15mhun05703e/7x2oojtn6u8ththepzqkdcoijgjcxapifixksyic6r/cnefcysvjrkgq3dmt/5lgkfwmevchrdr51kaebah9kejooae1malqimgwoabpiex8go8gs/gm/e+g80z2c4u+axj4xvrrj1t</latexit>
<latexit sha1_base64="pz5sdx+rdbffqks2a3/hx0f31ha=">aaacfnicbvdlssnafj3uv62vqes3g0vooyzebhvrklpxwchashvdzdppp51mwsxekkf/4czfcencxa2482+ctllo9cdlhs65l5l7/jhrqwz7y8gtlc4tr+rxc2vrg5tb5vbojywsgukdrywslr9jwignduuvi61yebt6jdt94cxeb94tiwner9uojm6iepwgfcoljc+0ongfllqv2zkswo5mqi8dvj3xhyezmaimthtojhufld2zafv2fpavctjsbbnqnvnz6uy4cqlxmcep244dkzdfqlhmyljqsssjer6ihmlrylfipjto7xrda610yrajxvzbqfpzi0whlkpq15mhun05703e/7x2oojtn6u8ththepzqkdcoijgjcxapifixksyic6r/cnefcysvjrkgq3dmt/5lgkfwmevchrdr51kaebah9kejooae1malqimgwoabpiex8go8gs/gm/e+g80z2c4u+axj4xvrrj1t</latexit>
<latexit sha1_base64="pz5sdx+rdbffqks2a3/hx0f31ha=">aaacfnicbvdlssnafj3uv62vqes3g0vooyzebhvrklpxwchashvdzdppp51mwsxekkf/4czfcencxa2482+ctllo9cdlhs65l5l7/jhrqwz7y8gtlc4tr+rxc2vrg5tb5vbojywsgukdrywslr9jwignduuvi61yebt6jdt94cxeb94tiwner9uojm6iepwgfcoljc+0ongfllqv2zkswo5mqi8dvj3xhyezmaimthtojhufld2zafv2fpavctjsbbnqnvnz6uy4cqlxmcep244dkzdfqlhmyljqsssjer6ihmlrylfipjto7xrda610yrajxvzbqfpzi0whlkpq15mhun05703e/7x2oojtn6u8ththepzqkdcoijgjcxapifixksyic6r/cnefcysvjrkgq3dmt/5lgkfwmevchrdr51kaebah9kejooae1malqimgwoabpiex8go8gs/gm/e+g80z2c4u+axj4xvrrj1t</latexit>
<latexit sha1_base64="pz5sdx+rdbffqks2a3/hx0f31ha=">aaacfnicbvdlssnafj3uv62vqes3g0vooyzebhvrklpxwchashvdzdppp51mwsxekkf/4czfcencxa2482+ctllo9cdlhs65l5l7/jhrqwz7y8gtlc4tr+rxc2vrg5tb5vbojywsgukdrywslr9jwignduuvi61yebt6jdt94cxeb94tiwner9uojm6iepwgfcoljc+0ongfllqv2zkswo5mqi8dvj3xhyezmaimthtojhufld2zafv2fpavctjsbbnqnvnz6uy4cqlxmcep244dkzdfqlhmyljqsssjer6ihmlrylfipjto7xrda610yrajxvzbqfpzi0whlkpq15mhun05703e/7x2oojtn6u8ththepzqkdcoijgjcxapifixksyic6r/cnefcysvjrkgq3dmt/5lgkfwmevchrdr51kaebah9kejooae1malqimgwoabpiex8go8gs/gm/e+g80z2c4u+axj4xvrrj1t</latexit>

nxj=1

 (x, j, yj 1, yj)

the memm state lattice / trellis

^
q(n|^)
n

v

j

d

$

^

n
q(v|n)
v

j

d

$

^

n

v

j

d

$

q(v|v)

^

n

v

j

d

$

q(j|v)

^

n

v

j

d

$

^

n

v

j

d

$

q(v|j)

start       fed           raises       interest         rates         stop
^                n               v              v                   j               v

the  id88 state lattice / trellis

w
  

^
  (x,1,n,^,x)
n
v

j

d

$

w

    (x,2,v,n)

^

n

v

j

d

$

^

n

^

n

v
v
w    (x,3,v,v)

j

d

$

j

d

$

^

n

v

^

n

v

w

    (x,4j,v) w     (x,5,v,j)

j

j

d

$

d

$

start       fed           raises       interest         rates         stop
^                n               v              v                   j               v

decoding

y     = arg max

    linear id88
nxj=1

    features must be local, for !=#1   #&, and '=(1   ()
    define *(,,(.) to be the max score of a sequence of length ,
ending in tag (,

 (x, j, yj 1, yj)

w     (x, y )

 (x, y ) =

y

<latexit sha1_base64="yeglhkfe/htjqsh8mlarkivnq/w=">aaaccxicbvdlssnafj3uv62vqes3o0woiiurqv0irtcukxjb0sqwmuzaozmhmxo1hk7d+ctuxki49q/c+tdo2yy09ccfwzn3cu89xskokibxrrvmzufmf4qlpaxlldu1fx3jrsqpx8tcmyt500ocmbors1ljsdphbiueiw2vdzh0g3eecxph17kfecdenyggfcopjfffbt3uwznoi96xq/tgtuc9jf1y2kmxvpohslxn6mwjaowap4mzkzliuxf1l9upcrqssgkghgibrikddhfjmsodkp0kkidcqx3svjrcirfonnplahev4smg5qoicufq74kmhul0q091hkh2xaq3fp/z2qkmtpymrkkqsythi4kuqrndys7qp5xgyfqkimypuhxiluiis5vesyvgtr48tazd6mnvvdoq187znipgc+yacjdbmaibs1ahfsdgetydv/cmpwkv2rv2mw4tapnmjvgd7fmhyhsynw==</latexit>
<latexit sha1_base64="yeglhkfe/htjqsh8mlarkivnq/w=">aaaccxicbvdlssnafj3uv62vqes3o0woiiurqv0irtcukxjb0sqwmuzaozmhmxo1hk7d+ctuxki49q/c+tdo2yy09ccfwzn3cu89xskokibxrrvmzufmf4qlpaxlldu1fx3jrsqpx8tcmyt500ocmbors1ljsdphbiueiw2vdzh0g3eecxph17kfecdenyggfcopjfffbt3uwznoi96xq/tgtuc9jf1y2kmxvpohslxn6mwjaowap4mzkzliuxf1l9upcrqssgkghgibrikddhfjmsodkp0kkidcqx3svjrcirfonnplahev4smg5qoicufq74kmhul0q091hkh2xaq3fp/z2qkmtpymrkkqsythi4kuqrndys7qp5xgyfqkimypuhxiluiis5vesyvgtr48tazd6mnvvdoq187znipgc+yacjdbmaibs1ahfsdgetydv/cmpwkv2rv2mw4tapnmjvgd7fmhyhsynw==</latexit>
<latexit sha1_base64="yeglhkfe/htjqsh8mlarkivnq/w=">aaaccxicbvdlssnafj3uv62vqes3o0woiiurqv0irtcukxjb0sqwmuzaozmhmxo1hk7d+ctuxki49q/c+tdo2yy09ccfwzn3cu89xskokibxrrvmzufmf4qlpaxlldu1fx3jrsqpx8tcmyt500ocmbors1ljsdphbiueiw2vdzh0g3eecxph17kfecdenyggfcopjfffbt3uwznoi96xq/tgtuc9jf1y2kmxvpohslxn6mwjaowap4mzkzliuxf1l9upcrqssgkghgibrikddhfjmsodkp0kkidcqx3svjrcirfonnplahev4smg5qoicufq74kmhul0q091hkh2xaq3fp/z2qkmtpymrkkqsythi4kuqrndys7qp5xgyfqkimypuhxiluiis5vesyvgtr48tazd6mnvvdoq187znipgc+yacjdbmaibs1ahfsdgetydv/cmpwkv2rv2mw4tapnmjvgd7fmhyhsynw==</latexit>
<latexit sha1_base64="yeglhkfe/htjqsh8mlarkivnq/w=">aaaccxicbvdlssnafj3uv62vqes3o0woiiurqv0irtcukxjb0sqwmuzaozmhmxo1hk7d+ctuxki49q/c+tdo2yy09ccfwzn3cu89xskokibxrrvmzufmf4qlpaxlldu1fx3jrsqpx8tcmyt500ocmbors1ljsdphbiueiw2vdzh0g3eecxph17kfecdenyggfcopjfffbt3uwznoi96xq/tgtuc9jf1y2kmxvpohslxn6mwjaowap4mzkzliuxf1l9upcrqssgkghgibrikddhfjmsodkp0kkidcqx3svjrcirfonnplahev4smg5qoicufq74kmhul0q091hkh2xaq3fp/z2qkmtpymrkkqsythi4kuqrndys7qp5xgyfqkimypuhxiluiis5vesyvgtr48tazd6mnvvdoq187znipgc+yacjdbmaibs1ahfsdgetydv/cmpwkv2rv2mw4tapnmjvgd7fmhyhsynw==</latexit>

<latexit sha1_base64="pz5sdx+rdbffqks2a3/hx0f31ha=">aaacfnicbvdlssnafj3uv62vqes3g0vooyzebhvrklpxwchashvdzdppp51mwsxekkf/4czfcencxa2482+ctllo9cdlhs65l5l7/jhrqwz7y8gtlc4tr+rxc2vrg5tb5vbojywsgukdrywslr9jwignduuvi61yebt6jdt94cxeb94tiwner9uojm6iepwgfcoljc+0ongfllqv2zkswo5mqi8dvj3xhyezmaimthtojhufld2zafv2fpavctjsbbnqnvnz6uy4cqlxmcep244dkzdfqlhmyljqsssjer6ihmlrylfipjto7xrda610yrajxvzbqfpzi0whlkpq15mhun05703e/7x2oojtn6u8ththepzqkdcoijgjcxapifixksyic6r/cnefcysvjrkgq3dmt/5lgkfwmevchrdr51kaebah9kejooae1malqimgwoabpiex8go8gs/gm/e+g80z2c4u+axj4xvrrj1t</latexit>
<latexit sha1_base64="pz5sdx+rdbffqks2a3/hx0f31ha=">aaacfnicbvdlssnafj3uv62vqes3g0vooyzebhvrklpxwchashvdzdppp51mwsxekkf/4czfcencxa2482+ctllo9cdlhs65l5l7/jhrqwz7y8gtlc4tr+rxc2vrg5tb5vbojywsgukdrywslr9jwignduuvi61yebt6jdt94cxeb94tiwner9uojm6iepwgfcoljc+0ongfllqv2zkswo5mqi8dvj3xhyezmaimthtojhufld2zafv2fpavctjsbbnqnvnz6uy4cqlxmcep244dkzdfqlhmyljqsssjer6ihmlrylfipjto7xrda610yrajxvzbqfpzi0whlkpq15mhun05703e/7x2oojtn6u8ththepzqkdcoijgjcxapifixksyic6r/cnefcysvjrkgq3dmt/5lgkfwmevchrdr51kaebah9kejooae1malqimgwoabpiex8go8gs/gm/e+g80z2c4u+axj4xvrrj1t</latexit>
<latexit sha1_base64="pz5sdx+rdbffqks2a3/hx0f31ha=">aaacfnicbvdlssnafj3uv62vqes3g0vooyzebhvrklpxwchashvdzdppp51mwsxekkf/4czfcencxa2482+ctllo9cdlhs65l5l7/jhrqwz7y8gtlc4tr+rxc2vrg5tb5vbojywsgukdrywslr9jwignduuvi61yebt6jdt94cxeb94tiwner9uojm6iepwgfcoljc+0ongfllqv2zkswo5mqi8dvj3xhyezmaimthtojhufld2zafv2fpavctjsbbnqnvnz6uy4cqlxmcep244dkzdfqlhmyljqsssjer6ihmlrylfipjto7xrda610yrajxvzbqfpzi0whlkpq15mhun05703e/7x2oojtn6u8ththepzqkdcoijgjcxapifixksyic6r/cnefcysvjrkgq3dmt/5lgkfwmevchrdr51kaebah9kejooae1malqimgwoabpiex8go8gs/gm/e+g80z2c4u+axj4xvrrj1t</latexit>
<latexit sha1_base64="pz5sdx+rdbffqks2a3/hx0f31ha=">aaacfnicbvdlssnafj3uv62vqes3g0vooyzebhvrklpxwchashvdzdppp51mwsxekkf/4czfcencxa2482+ctllo9cdlhs65l5l7/jhrqwz7y8gtlc4tr+rxc2vrg5tb5vbojywsgukdrywslr9jwignduuvi61yebt6jdt94cxeb94tiwner9uojm6iepwgfcoljc+0ongfllqv2zkswo5mqi8dvj3xhyezmaimthtojhufld2zafv2fpavctjsbbnqnvnz6uy4cqlxmcep244dkzdfqlhmyljqsssjer6ihmlrylfipjto7xrda610yrajxvzbqfpzi0whlkpq15mhun05703e/7x2oojtn6u8ththepzqkdcoijgjcxapifixksyic6r/cnefcysvjrkgq3dmt/5lgkfwmevchrdr51kaebah9kejooae1malqimgwoabpiex8go8gs/gm/e+g80z2c4u+axj4xvrrj1t</latexit>

   (i, yi) = max
yi 1

<latexit sha1_base64="3odwx7kxz/+lrq2peacvvp8t2we=">aaacn3icbvdlssnafj34rpvvdelmsagttiurqv0irtfurgbsoqlhmp22qycpzizqcpksn36go3hjqswtf+a0zujbdwwczrmho/e4ianc6vqlnje/sli0xfgprq6tb2ywtrzvrrbxtewcsib3xcqioz4xjzwmdejokocy0nzhf2o/fue4oif/i+oq2b4a+lrpmzjkckpxvkgrtazjh1yhpiowhx6cjhyswjfsfn5dc/ccca1wscudgq3lti2bp4bzum6m85leduplvafnglpeyekz5gg5pwerf+dii77edanrnfrq2gnikmjg0qivcriipeid0lxurx4rdpidnsj9pfrgp+dq+rjm6u9egjwhys9vkx6sqzhtjcx/vg4k+yd2qv0wksthk0x9ieezwhglsec5wzlfiidmqforxepeezaq66iqwzg+ezayh43thnf9vg6e520uwc7yaxvgggpqbjegbuyawsn4be/gq3vs3rrp7wsyoqflmr3wb9r3d2zmqme=</latexit>
<latexit sha1_base64="3odwx7kxz/+lrq2peacvvp8t2we=">aaacn3icbvdlssnafj34rpvvdelmsagttiurqv0irtfurgbsoqlhmp22qycpzizqcpksn36go3hjqswtf+a0zujbdwwczrmho/e4ianc6vqlnje/sli0xfgprq6tb2ywtrzvrrbxtewcsib3xcqioz4xjzwmdejokocy0nzhf2o/fue4oif/i+oq2b4a+lrpmzjkckpxvkgrtazjh1yhpiowhx6cjhyswjfsfn5dc/ccca1wscudgq3lti2bp4bzum6m85leduplvafnglpeyekz5gg5pwerf+dii77edanrnfrq2gnikmjg0qivcriipeid0lxurx4rdpidnsj9pfrgp+dq+rjm6u9egjwhys9vkx6sqzhtjcx/vg4k+yd2qv0wksthk0x9ieezwhglsec5wzlfiidmqforxepeezaq66iqwzg+ezayh43thnf9vg6e520uwc7yaxvgggpqbjegbuyawsn4be/gq3vs3rrp7wsyoqflmr3wb9r3d2zmqme=</latexit>
<latexit sha1_base64="3odwx7kxz/+lrq2peacvvp8t2we=">aaacn3icbvdlssnafj34rpvvdelmsagttiurqv0irtfurgbsoqlhmp22qycpzizqcpksn36go3hjqswtf+a0zujbdwwczrmho/e4ianc6vqlnje/sli0xfgprq6tb2ywtrzvrrbxtewcsib3xcqioz4xjzwmdejokocy0nzhf2o/fue4oif/i+oq2b4a+lrpmzjkckpxvkgrtazjh1yhpiowhx6cjhyswjfsfn5dc/ccca1wscudgq3lti2bp4bzum6m85leduplvafnglpeyekz5gg5pwerf+dii77edanrnfrq2gnikmjg0qivcriipeid0lxurx4rdpidnsj9pfrgp+dq+rjm6u9egjwhys9vkx6sqzhtjcx/vg4k+yd2qv0wksthk0x9ieezwhglsec5wzlfiidmqforxepeezaq66iqwzg+ezayh43thnf9vg6e520uwc7yaxvgggpqbjegbuyawsn4be/gq3vs3rrp7wsyoqflmr3wb9r3d2zmqme=</latexit>
<latexit sha1_base64="3odwx7kxz/+lrq2peacvvp8t2we=">aaacn3icbvdlssnafj34rpvvdelmsagttiurqv0irtfurgbsoqlhmp22qycpzizqcpksn36go3hjqswtf+a0zujbdwwczrmho/e4ianc6vqlnje/sli0xfgprq6tb2ywtrzvrrbxtewcsib3xcqioz4xjzwmdejokocy0nzhf2o/fue4oif/i+oq2b4a+lrpmzjkckpxvkgrtazjh1yhpiowhx6cjhyswjfsfn5dc/ccca1wscudgq3lti2bp4bzum6m85leduplvafnglpeyekz5gg5pwerf+dii77edanrnfrq2gnikmjg0qivcriipeid0lxurx4rdpidnsj9pfrgp+dq+rjm6u9egjwhys9vkx6sqzhtjcx/vg4k+yd2qv0wksthk0x9ieezwhglsec5wzlfiidmqforxepeezaq66iqwzg+ezayh43thnf9vg6e520uwc7yaxvgggpqbjegbuyawsn4be/gq3vs3rrp7wsyoqflmr3wb9r3d2zmqme=</latexit>

    viterbi algorithm (id48s):

w     (x, i, yi 1, yi) +    (i   1, yi 1)

   (i, yi) = max
yi 1

    viterbi algorithm (maxent):

e(xi|yi)q(yi|yi 1)   (i   1, yi 1)

   (i, yi) = max
yi 1

p(yi|yi 1, x1 . . . xm)   (i   1, yi 1)

some numbers

    rough accuracies:

    most freq tag: 
    trigram id48: 
    tnt (brants, 2000): 
    maxent p(y | x)
    memm tagger 1:
    memm tagger 2:
    id88: 
    crf++:
    cyclic tagger:
    upper bound:

~90% / ~50%
~95% / ~55%
96.7% / 85.5%
93.7% / 82.6%
96.7% / 84.5%
96.8% / 86.9%
97.1%
97.3%
97.2% / 89.0%
~98%

[collins 2002]

id49 (crfs)
    what did we lose with the id88?

    no probabilities
    let   s try again with a probabilistic model

crfs

    maximum id178 (id28)

sentence: !=#1   #&
tag sequence:'=(1   (&

<latexit sha1_base64="lbwfbxudc4hcn3nuzc3yiiwvrp8=">aaacnxicbvdlsgmxfm3ud32nunqtlniwpmyiockc6manogbts6eutcbthiyziclyy9cvcun3uhpjqswtv2d6wgjba4hdoedyc48vgfxacd6sznz8wuls8kp2dw19y9pe2n5qcsixkeoyxblqi0uyjuhzu81ivuicum9ixe9cdfzki5gkxtg97gns4kgv0zbipi3utg9eoezxgsdqgeww4tn0qolw6penueh6oii1j9q0ud2ofyv91fmjb6a1fh+gnzebpp1zss4qcjq4y5idy9w27vcvihhcsaqxq0rvxuforoqkppirftzlfbeid1cl1a2neceqkq7p7sn9owqwjkv5kyzd9e9eirhspe6bjee6rsa9gtjlqyc6pgmknbkjjheelqotbnumbx3cgeqcneszgrck5q8qt5hptzums6yed/lkavi+lj2w3luj3mxlui1lsav2qag44bhcggtwc8oag2fwbj7ap/vivvtf1vcomrhgmzvgh6yfxz0jqhm=</latexit>
<latexit sha1_base64="lbwfbxudc4hcn3nuzc3yiiwvrp8=">aaacnxicbvdlsgmxfm3ud32nunqtlniwpmyiockc6manogbts6eutcbthiyziclyy9cvcun3uhpjqswtv2d6wgjba4hdoedyc48vgfxacd6sznz8wuls8kp2dw19y9pe2n5qcsixkeoyxblqi0uyjuhzu81ivuicum9ixe9cdfzki5gkxtg97gns4kgv0zbipi3utg9eoezxgsdqgeww4tn0qolw6penueh6oii1j9q0ud2ofyv91fmjb6a1fh+gnzebpp1zss4qcjq4y5idy9w27vcvihhcsaqxq0rvxuforoqkppirftzlfbeid1cl1a2neceqkq7p7sn9owqwjkv5kyzd9e9eirhspe6bjee6rsa9gtjlqyc6pgmknbkjjheelqotbnumbx3cgeqcneszgrck5q8qt5hptzums6yed/lkavi+lj2w3luj3mxlui1lsav2qag44bhcggtwc8oag2fwbj7ap/vivvtf1vcomrhgmzvgh6yfxz0jqhm=</latexit>
<latexit sha1_base64="lbwfbxudc4hcn3nuzc3yiiwvrp8=">aaacnxicbvdlsgmxfm3ud32nunqtlniwpmyiockc6manogbts6eutcbthiyziclyy9cvcun3uhpjqswtv2d6wgjba4hdoedyc48vgfxacd6sznz8wuls8kp2dw19y9pe2n5qcsixkeoyxblqi0uyjuhzu81ivuicum9ixe9cdfzki5gkxtg97gns4kgv0zbipi3utg9eoezxgsdqgeww4tn0qolw6penueh6oii1j9q0ud2ofyv91fmjb6a1fh+gnzebpp1zss4qcjq4y5idy9w27vcvihhcsaqxq0rvxuforoqkppirftzlfbeid1cl1a2neceqkq7p7sn9owqwjkv5kyzd9e9eirhspe6bjee6rsa9gtjlqyc6pgmknbkjjheelqotbnumbx3cgeqcneszgrck5q8qt5hptzums6yed/lkavi+lj2w3luj3mxlui1lsav2qag44bhcggtwc8oag2fwbj7ap/vivvtf1vcomrhgmzvgh6yfxz0jqhm=</latexit>
<latexit sha1_base64="lbwfbxudc4hcn3nuzc3yiiwvrp8=">aaacnxicbvdlsgmxfm3ud32nunqtlniwpmyiockc6manogbts6eutcbthiyziclyy9cvcun3uhpjqswtv2d6wgjba4hdoedyc48vgfxacd6sznz8wuls8kp2dw19y9pe2n5qcsixkeoyxblqi0uyjuhzu81ivuicum9ixe9cdfzki5gkxtg97gns4kgv0zbipi3utg9eoezxgsdqgeww4tn0qolw6penueh6oii1j9q0ud2ofyv91fmjb6a1fh+gnzebpp1zss4qcjq4y5idy9w27vcvihhcsaqxq0rvxuforoqkppirftzlfbeid1cl1a2neceqkq7p7sn9owqwjkv5kyzd9e9eirhspe6bjee6rsa9gtjlqyc6pgmknbkjjheelqotbnumbx3cgeqcneszgrck5q8qt5hptzums6yed/lkavi+lj2w3luj3mxlui1lsav2qag44bhcggtwc8oag2fwbj7ap/vivvtf1vcomrhgmzvgh6yfxz0jqhm=</latexit>

p(y | x; w) =

data

{(x (i), y (i))}m

<latexit sha1_base64="myh9lcgccerxse2vtle3vzh+lcs=">aaacbxicbvdlssnafj3uv62vqesrbovqgprebhuhfn24rgbspundzdpth84kywyiljcvg3/fjqsvt/6do//gazufth643mm59zjztxazkpvlfrufhcwl5zxiamltfwnzy9zeuznrijbxcmqi0qqqjiygxffumdkkbue8ykqzdk/gfvobcemj8fanyujx1a9pj2kktosb+25aaxxscq1mr/ftxnuzp6uxdtbhvlm2atyecj7yosmdha3f/hk7eu44crvmsmq2bcxks5fqfdosldxekhjhieqttqyh4kr66esmdb5qpqt7kdavkjhrf2+kies54oge5egn5kw3fv/z2onqnxkpdenekrbph+oldkoijjobxsoivmykcckc6r9cpeacyawtk+kq7id454lzxduv2tcn5fplnkyr7ieduae2oav1ca0awaeypijn8arejcfjxxg3pqajbspf2qv/yhz+al3ql5g=</latexit>
<latexit sha1_base64="myh9lcgccerxse2vtle3vzh+lcs=">aaacbxicbvdlssnafj3uv62vqesrbovqgprebhuhfn24rgbspundzdpth84kywyiljcvg3/fjqsvt/6do//gazufth643mm59zjztxazkpvlfrufhcwl5zxiamltfwnzy9zeuznrijbxcmqi0qqqjiygxffumdkkbue8ykqzdk/gfvobcemj8fanyujx1a9pj2kktosb+25aaxxscq1mr/ftxnuzp6uxdtbhvlm2atyecj7yosmdha3f/hk7eu44crvmsmq2bcxks5fqfdosldxekhjhieqttqyh4kr66esmdb5qpqt7kdavkjhrf2+kies54oge5egn5kw3fv/z2onqnxkpdenekrbph+oldkoijjobxsoivmykcckc6r9cpeacyawtk+kq7id454lzxduv2tcn5fplnkyr7ieduae2oav1ca0awaeypijn8arejcfjxxg3pqajbspf2qv/yhz+al3ql5g=</latexit>
<latexit sha1_base64="myh9lcgccerxse2vtle3vzh+lcs=">aaacbxicbvdlssnafj3uv62vqesrbovqgprebhuhfn24rgbspundzdpth84kywyiljcvg3/fjqsvt/6do//gazufth643mm59zjztxazkpvlfrufhcwl5zxiamltfwnzy9zeuznrijbxcmqi0qqqjiygxffumdkkbue8ykqzdk/gfvobcemj8fanyujx1a9pj2kktosb+25aaxxscq1mr/ftxnuzp6uxdtbhvlm2atyecj7yosmdha3f/hk7eu44crvmsmq2bcxks5fqfdosldxekhjhieqttqyh4kr66esmdb5qpqt7kdavkjhrf2+kies54oge5egn5kw3fv/z2onqnxkpdenekrbph+oldkoijjobxsoivmykcckc6r9cpeacyawtk+kq7id454lzxduv2tcn5fplnkyr7ieduae2oav1ca0awaeypijn8arejcfjxxg3pqajbspf2qv/yhz+al3ql5g=</latexit>
<latexit sha1_base64="myh9lcgccerxse2vtle3vzh+lcs=">aaacbxicbvdlssnafj3uv62vqesrbovqgprebhuhfn24rgbspundzdpth84kywyiljcvg3/fjqsvt/6do//gazufth643mm59zjztxazkpvlfrufhcwl5zxiamltfwnzy9zeuznrijbxcmqi0qqqjiygxffumdkkbue8ykqzdk/gfvobcemj8fanyujx1a9pj2kktosb+25aaxxscq1mr/ftxnuzp6uxdtbhvlm2atyecj7yosmdha3f/hk7eu44crvmsmq2bcxks5fqfdosldxekhjhieqttqyh4kr66esmdb5qpqt7kdavkjhrf2+kies54oge5egn5kw3fv/z2onqnxkpdenekrbph+oldkoijjobxsoivmykcckc6r9cpeacyawtk+kq7id454lzxduv2tcn5fplnkyr7ieduae2oav1ca0awaeypijn8arejcfjxxg3pqajbspf2qv/yhz+al3ql5g=</latexit>

i=1

@
@wj

<latexit sha1_base64="oo34yggowyi+eu/9njgongn9/v4=">aaacfxicbvfdb9mwfhxc11a+cjzu5uiid122creoq0ejo0wqtipayjslz1fzmo03qze8t2qkoop2n/bg/8fl5w2ghbx5wudhtuobpfqrlc2cj66fk3bt66fwdnt3f33v0hd/uphn83zaupg9fslhqcesmel9jicivywglgzcryaxrxsa2f/mda8ll4zlekzsszfzznlfhhjf1lngtca6yitpyi5g+czxlefamwirwbnpvm6s9hcxmmswc5dqcrbu/og/fzhfcw2yfjborwsffpqautwjjn0gngpszdldskbkz5fghxpuhgzkjbookpomg0drgo4g4mubcnsf8kzywtjcssfcsyarwpo6vbvahgtq9xhilcl8ictr0sigrmvq/p18bzx2sql9plywhn/u2oitrmjvonlmquzhatjf9xm1y2fzureaeqywq6azrxamwj7s8g45prk1yoekq5mxxogrh/wpexnjtcvl3ydtb6pxw3jl++grx/6k6xg/bqmxsggb2iy/qjnaarouix99r76b3ykf/c3/ehg6nvdz4n6j/wd38d6ro8og==</latexit>
<latexit sha1_base64="oo34yggowyi+eu/9njgongn9/v4=">aaacfxicbvfdb9mwfhxc11a+cjzu5uiid122creoq0ejo0wqtipayjslz1fzmo03qze8t2qkoop2n/bg/8fl5w2ghbx5wudhtuobpfqrlc2cj66fk3bt66fwdnt3f33v0hd/uphn83zaupg9fslhqcesmel9jicivywglgzcryaxrxsa2f/mda8ll4zlekzsszfzznlfhhjf1lngtca6yitpyi5g+czxlefamwirwbnpvm6s9hcxmmswc5dqcrbu/og/fzhfcw2yfjborwsffpqautwjjn0gngpszdldskbkz5fghxpuhgzkjbookpomg0drgo4g4mubcnsf8kzywtjcssfcsyarwpo6vbvahgtq9xhilcl8ictr0sigrmvq/p18bzx2sql9plywhn/u2oitrmjvonlmquzhatjf9xm1y2fzureaeqywq6azrxamwj7s8g45prk1yoekq5mxxogrh/wpexnjtcvl3ydtb6pxw3jl++grx/6k6xg/bqmxsggb2iy/qjnaarouix99r76b3ykf/c3/ehg6nvdz4n6j/wd38d6ro8og==</latexit>
<latexit sha1_base64="oo34yggowyi+eu/9njgongn9/v4=">aaacfxicbvfdb9mwfhxc11a+cjzu5uiid122creoq0ejo0wqtipayjslz1fzmo03qze8t2qkoop2n/bg/8fl5w2ghbx5wudhtuobpfqrlc2cj66fk3bt66fwdnt3f33v0hd/uphn83zaupg9fslhqcesmel9jicivywglgzcryaxrxsa2f/mda8ll4zlekzsszfzznlfhhjf1lngtca6yitpyi5g+czxlefamwirwbnpvm6s9hcxmmswc5dqcrbu/og/fzhfcw2yfjborwsffpqautwjjn0gngpszdldskbkz5fghxpuhgzkjbookpomg0drgo4g4mubcnsf8kzywtjcssfcsyarwpo6vbvahgtq9xhilcl8ictr0sigrmvq/p18bzx2sql9plywhn/u2oitrmjvonlmquzhatjf9xm1y2fzureaeqywq6azrxamwj7s8g45prk1yoekq5mxxogrh/wpexnjtcvl3ydtb6pxw3jl++grx/6k6xg/bqmxsggb2iy/qjnaarouix99r76b3ykf/c3/ehg6nvdz4n6j/wd38d6ro8og==</latexit>
<latexit sha1_base64="oo34yggowyi+eu/9njgongn9/v4=">aaacfxicbvfdb9mwfhxc11a+cjzu5uiid122creoq0ejo0wqtipayjslz1fzmo03qze8t2qkoop2n/bg/8fl5w2ghbx5wudhtuobpfqrlc2cj66fk3bt66fwdnt3f33v0hd/uphn83zaupg9fslhqcesmel9jicivywglgzcryaxrxsa2f/mda8ll4zlekzsszfzznlfhhjf1lngtca6yitpyi5g+czxlefamwirwbnpvm6s9hcxmmswc5dqcrbu/og/fzhfcw2yfjborwsffpqautwjjn0gngpszdldskbkz5fghxpuhgzkjbookpomg0drgo4g4mubcnsf8kzywtjcssfcsyarwpo6vbvahgtq9xhilcl8ictr0sigrmvq/p18bzx2sql9plywhn/u2oitrmjvonlmquzhatjf9xm1y2fzureaeqywq6azrxamwj7s8g45prk1yoekq5mxxogrh/wpexnjtcvl3ydtb6pxw3jl++grx/6k6xg/bqmxsggb2iy/qjnaarouix99r76b3ykf/c3/ehg6nvdz4n6j/wd38d6ro8og==</latexit>

l(w) =

mxi=1  j(x (i), y (i))  xy

    computational challenges?

exp(w     (x, y ))

py 0 exp(w     (x, y 0))
p(y | x (i); w) j(x (i), y )!    wj

    learning: maximize the (log) conditional likelihood of training 

    most likely tag sequence,  id172 constant, gradient

[lafferty et al. 2001]

decoding

    features must be local, for !=!1   !%, and &=&1   &%

y     = arg max

y

<latexit sha1_base64="j6jkofzwc2k6xii9t6ayz4+ammk=">aaacb3icbvbns8naen3ur1q/oh49ufie6qekiqiiuptisykxlu0mm+22xbqbhn2nwkkpxvwrxjyoepuveppfug1z0nyha4/3zpizf8smsmvz30zuznzufig/wfhaxlldm9c3bmsucewchlfi1amkcamhcrrvjnrjqrapgkkfvyuhx7sjqtiovfb9mhgcdulaphgplfnmdun2h55bf4moy9gd34bxqqfdtluwfgrv93yzajwteea0stnsbbmqvvnltikccbiqzjcutduklzcioshmzfbwe0lihhuoq5qahogt6awjrwzwvyst2i6erldbkfp7ikvcyj4pdcdhqisnvah4n9dmvpvys2kyj4qeelyontcoijhmbbaoifixviyic6pvhbilbmjkz1fqiditl08t56b8uravdouv8yynpngco6aebhaekuasviedmhgez+avvblpxovxbnymw3ngnrmj/sd4/afprjc9</latexit>
<latexit sha1_base64="j6jkofzwc2k6xii9t6ayz4+ammk=">aaacb3icbvbns8naen3ur1q/oh49ufie6qekiqiiuptisykxlu0mm+22xbqbhn2nwkkpxvwrxjyoepuveppfug1z0nyha4/3zpizf8smsmvz30zuznzufig/wfhaxlldm9c3bmsucewchlfi1amkcamhcrrvjnrjqrapgkkfvyuhx7sjqtiovfb9mhgcdulaphgplfnmdun2h55bf4moy9gd34bxqqfdtluwfgrv93yzajwteea0stnsbbmqvvnltikccbiqzjcutduklzcioshmzfbwe0lihhuoq5qahogt6awjrwzwvyst2i6erldbkfp7ikvcyj4pdcdhqisnvah4n9dmvpvys2kyj4qeelyontcoijhmbbaoifixviyic6pvhbilbmjkz1fqiditl08t56b8uravdouv8yynpngco6aebhaekuasviedmhgez+avvblpxovxbnymw3ngnrmj/sd4/afprjc9</latexit>
<latexit sha1_base64="j6jkofzwc2k6xii9t6ayz4+ammk=">aaacb3icbvbns8naen3ur1q/oh49ufie6qekiqiiuptisykxlu0mm+22xbqbhn2nwkkpxvwrxjyoepuveppfug1z0nyha4/3zpizf8smsmvz30zuznzufig/wfhaxlldm9c3bmsucewchlfi1amkcamhcrrvjnrjqrapgkkfvyuhx7sjqtiovfb9mhgcdulaphgplfnmdun2h55bf4moy9gd34bxqqfdtluwfgrv93yzajwteea0stnsbbmqvvnltikccbiqzjcutduklzcioshmzfbwe0lihhuoq5qahogt6awjrwzwvyst2i6erldbkfp7ikvcyj4pdcdhqisnvah4n9dmvpvys2kyj4qeelyontcoijhmbbaoifixviyic6pvhbilbmjkz1fqiditl08t56b8uravdouv8yynpngco6aebhaekuasviedmhgez+avvblpxovxbnymw3ngnrmj/sd4/afprjc9</latexit>
<latexit sha1_base64="j6jkofzwc2k6xii9t6ayz4+ammk=">aaacb3icbvbns8naen3ur1q/oh49ufie6qekiqiiuptisykxlu0mm+22xbqbhn2nwkkpxvwrxjyoepuveppfug1z0nyha4/3zpizf8smsmvz30zuznzufig/wfhaxlldm9c3bmsucewchlfi1amkcamhcrrvjnrjqrapgkkfvyuhx7sjqtiovfb9mhgcdulaphgplfnmdun2h55bf4moy9gd34bxqqfdtluwfgrv93yzajwteea0stnsbbmqvvnltikccbiqzjcutduklzcioshmzfbwe0lihhuoq5qahogt6awjrwzwvyst2i6erldbkfp7ikvcyj4pdcdhqisnvah4n9dmvpvys2kyj4qeelyontcoijhmbbaoifixviyic6pvhbilbmjkz1fqiditl08t56b8uravdouv8yynpngco6aebhaekuasviedmhgez+avvblpxovxbnymw3ngnrmj/sd4/afprjc9</latexit>

    crfs

p(y | x; w)

p(y | x; w) =

<latexit sha1_base64="lbwfbxudc4hcn3nuzc3yiiwvrp8=">aaacnxicbvdlsgmxfm3ud32nunqtlniwpmyiockc6manogbts6eutcbthiyziclyy9cvcun3uhpjqswtv2d6wgjba4hdoedyc48vgfxacd6sznz8wuls8kp2dw19y9pe2n5qcsixkeoyxblqi0uyjuhzu81ivuicum9ixe9cdfzki5gkxtg97gns4kgv0zbipi3utg9eoezxgsdqgeww4tn0qolw6penueh6oii1j9q0ud2ofyv91fmjb6a1fh+gnzebpp1zss4qcjq4y5idy9w27vcvihhcsaqxq0rvxuforoqkppirftzlfbeid1cl1a2neceqkq7p7sn9owqwjkv5kyzd9e9eirhspe6bjee6rsa9gtjlqyc6pgmknbkjjheelqotbnumbx3cgeqcneszgrck5q8qt5hptzums6yed/lkavi+lj2w3luj3mxlui1lsav2qag44bhcggtwc8oag2fwbj7ap/vivvtf1vcomrhgmzvgh6yfxz0jqhm=</latexit>
<latexit sha1_base64="lbwfbxudc4hcn3nuzc3yiiwvrp8=">aaacnxicbvdlsgmxfm3ud32nunqtlniwpmyiockc6manogbts6eutcbthiyziclyy9cvcun3uhpjqswtv2d6wgjba4hdoedyc48vgfxacd6sznz8wuls8kp2dw19y9pe2n5qcsixkeoyxblqi0uyjuhzu81ivuicum9ixe9cdfzki5gkxtg97gns4kgv0zbipi3utg9eoezxgsdqgeww4tn0qolw6penueh6oii1j9q0ud2ofyv91fmjb6a1fh+gnzebpp1zss4qcjq4y5idy9w27vcvihhcsaqxq0rvxuforoqkppirftzlfbeid1cl1a2neceqkq7p7sn9owqwjkv5kyzd9e9eirhspe6bjee6rsa9gtjlqyc6pgmknbkjjheelqotbnumbx3cgeqcneszgrck5q8qt5hptzums6yed/lkavi+lj2w3luj3mxlui1lsav2qag44bhcggtwc8oag2fwbj7ap/vivvtf1vcomrhgmzvgh6yfxz0jqhm=</latexit>
<latexit sha1_base64="lbwfbxudc4hcn3nuzc3yiiwvrp8=">aaacnxicbvdlsgmxfm3ud32nunqtlniwpmyiockc6manogbts6eutcbthiyziclyy9cvcun3uhpjqswtv2d6wgjba4hdoedyc48vgfxacd6sznz8wuls8kp2dw19y9pe2n5qcsixkeoyxblqi0uyjuhzu81ivuicum9ixe9cdfzki5gkxtg97gns4kgv0zbipi3utg9eoezxgsdqgeww4tn0qolw6penueh6oii1j9q0ud2ofyv91fmjb6a1fh+gnzebpp1zss4qcjq4y5idy9w27vcvihhcsaqxq0rvxuforoqkppirftzlfbeid1cl1a2neceqkq7p7sn9owqwjkv5kyzd9e9eirhspe6bjee6rsa9gtjlqyc6pgmknbkjjheelqotbnumbx3cgeqcneszgrck5q8qt5hptzums6yed/lkavi+lj2w3luj3mxlui1lsav2qag44bhcggtwc8oag2fwbj7ap/vivvtf1vcomrhgmzvgh6yfxz0jqhm=</latexit>
<latexit sha1_base64="lbwfbxudc4hcn3nuzc3yiiwvrp8=">aaacnxicbvdlsgmxfm3ud32nunqtlniwpmyiockc6manogbts6eutcbthiyziclyy9cvcun3uhpjqswtv2d6wgjba4hdoedyc48vgfxacd6sznz8wuls8kp2dw19y9pe2n5qcsixkeoyxblqi0uyjuhzu81ivuicum9ixe9cdfzki5gkxtg97gns4kgv0zbipi3utg9eoezxgsdqgeww4tn0qolw6penueh6oii1j9q0ud2ofyv91fmjb6a1fh+gnzebpp1zss4qcjq4y5idy9w27vcvihhcsaqxq0rvxuforoqkppirftzlfbeid1cl1a2neceqkq7p7sn9owqwjkv5kyzd9e9eirhspe6bjee6rsa9gtjlqyc6pgmknbkjjheelqotbnumbx3cgeqcneszgrck5q8qt5hptzums6yed/lkavi+lj2w3luj3mxlui1lsav2qag44bhcggtwc8oag2fwbj7ap/vivvtf1vcomrhgmzvgh6yfxz0jqhm=</latexit>

arg max

y

exp(w     (x, y ))

py 0 exp(w     (x, y 0))
py 0 exp(w     (x, y 0))

exp(w     (x, y ))

<latexit sha1_base64="qukau8by3yzecepiaickevsklny=">aaacehicbvhlsgmxfm2m7/qqutrftnghsjkrqv0uim5cvrda0pqhk2ba0grmsdlamvqf/dz3/ogbn6ypodzecbzoofcmodepovpact4te2v1bx1jcyuzvbo7t589ohxwusijrzoir7lhy0u5c2ldm81pi5yuc5/tf79/p9zfxqlulaqf9dcmbyg7iqsywdpqxvydydlfag+8jgokjimig7j4hkgn0hdfpvzsxdrlpvgkvck8tfkyzrl+9yixwhwfwrlhs8dahdj5wjnzwuwpl805zwds8d9wzyahzlxzsh+oe5fe0fatjpvquu6s2ymwmhforxmukbpj0sdd2jiwxikqdjpjbgtpddobqstnctwcspmdkrzkdyvvnalrnlruxuqyrzxo4kadsjbona3j9kig4vbhclwg2ggses2hbmaimxkrjd1sfqdnsjimbhfxy/9b/bj8w3yfr3lvu1kam+aynieicme1qiihuan1qmcxdwkdw3nr2z61c3zparwtwc8r+fp25q/rzrxj</latexit>
<latexit sha1_base64="qukau8by3yzecepiaickevsklny=">aaacehicbvhlsgmxfm2m7/qqutrftnghsjkrqv0uim5cvrda0pqhk2ba0grmsdlamvqf/dz3/ogbn6ypodzecbzoofcmodepovpact4te2v1bx1jcyuzvbo7t589ohxwusijrzoir7lhy0u5c2ldm81pi5yuc5/tf79/p9zfxqlulaqf9dcmbyg7iqsywdpqxvydydlfag+8jgokjimig7j4hkgn0hdfpvzsxdrlpvgkvck8tfkyzrl+9yixwhwfwrlhs8dahdj5wjnzwuwpl805zwds8d9wzyahzlxzsh+oe5fe0fatjpvquu6s2ymwmhforxmukbpj0sdd2jiwxikqdjpjbgtpddobqstnctwcspmdkrzkdyvvnalrnlruxuqyrzxo4kadsjbona3j9kig4vbhclwg2ggses2hbmaimxkrjd1sfqdnsjimbhfxy/9b/bj8w3yfr3lvu1kam+aynieicme1qiihuan1qmcxdwkdw3nr2z61c3zparwtwc8r+fp25q/rzrxj</latexit>
<latexit sha1_base64="qukau8by3yzecepiaickevsklny=">aaacehicbvhlsgmxfm2m7/qqutrftnghsjkrqv0uim5cvrda0pqhk2ba0grmsdlamvqf/dz3/ogbn6ypodzecbzoofcmodepovpact4te2v1bx1jcyuzvbo7t589ohxwusijrzoir7lhy0u5c2ldm81pi5yuc5/tf79/p9zfxqlulaqf9dcmbyg7iqsywdpqxvydydlfag+8jgokjimig7j4hkgn0hdfpvzsxdrlpvgkvck8tfkyzrl+9yixwhwfwrlhs8dahdj5wjnzwuwpl805zwds8d9wzyahzlxzsh+oe5fe0fatjpvquu6s2ymwmhforxmukbpj0sdd2jiwxikqdjpjbgtpddobqstnctwcspmdkrzkdyvvnalrnlruxuqyrzxo4kadsjbona3j9kig4vbhclwg2ggses2hbmaimxkrjd1sfqdnsjimbhfxy/9b/bj8w3yfr3lvu1kam+aynieicme1qiihuan1qmcxdwkdw3nr2z61c3zparwtwc8r+fp25q/rzrxj</latexit>
<latexit sha1_base64="qukau8by3yzecepiaickevsklny=">aaacehicbvhlsgmxfm2m7/qqutrftnghsjkrqv0uim5cvrda0pqhk2ba0grmsdlamvqf/dz3/ogbn6ypodzecbzoofcmodepovpact4te2v1bx1jcyuzvbo7t589ohxwusijrzoir7lhy0u5c2ldm81pi5yuc5/tf79/p9zfxqlulaqf9dcmbyg7iqsywdpqxvydydlfag+8jgokjimig7j4hkgn0hdfpvzsxdrlpvgkvck8tfkyzrl+9yixwhwfwrlhs8dahdj5wjnzwuwpl805zwds8d9wzyahzlxzsh+oe5fe0fatjpvquu6s2ymwmhforxmukbpj0sdd2jiwxikqdjpjbgtpddobqstnctwcspmdkrzkdyvvnalrnlruxuqyrzxo4kadsjbona3j9kig4vbhclwg2ggses2hbmaimxkrjd1sfqdnsjimbhfxy/9b/bj8w3yfr3lvu1kam+aynieicme1qiihuan1qmcxdwkdw3nr2z61c3zparwtwc8r+fp25q/rzrxj</latexit>

    looks familiar?
    same as linear id88!

 (x, y ) =

<latexit sha1_base64="pz5sdx+rdbffqks2a3/hx0f31ha=">aaacfnicbvdlssnafj3uv62vqes3g0vooyzebhvrklpxwchashvdzdppp51mwsxekkf/4czfcencxa2482+ctllo9cdlhs65l5l7/jhrqwz7y8gtlc4tr+rxc2vrg5tb5vbojywsgukdrywslr9jwignduuvi61yebt6jdt94cxeb94tiwner9uojm6iepwgfcoljc+0ongfllqv2zkswo5mqi8dvj3xhyezmaimthtojhufld2zafv2fpavctjsbbnqnvnz6uy4cqlxmcep244dkzdfqlhmyljqsssjer6ihmlrylfipjto7xrda610yrajxvzbqfpzi0whlkpq15mhun05703e/7x2oojtn6u8ththepzqkdcoijgjcxapifixksyic6r/cnefcysvjrkgq3dmt/5lgkfwmevchrdr51kaebah9kejooae1malqimgwoabpiex8go8gs/gm/e+g80z2c4u+axj4xvrrj1t</latexit>
<latexit sha1_base64="pz5sdx+rdbffqks2a3/hx0f31ha=">aaacfnicbvdlssnafj3uv62vqes3g0vooyzebhvrklpxwchashvdzdppp51mwsxekkf/4czfcencxa2482+ctllo9cdlhs65l5l7/jhrqwz7y8gtlc4tr+rxc2vrg5tb5vbojywsgukdrywslr9jwignduuvi61yebt6jdt94cxeb94tiwner9uojm6iepwgfcoljc+0ongfllqv2zkswo5mqi8dvj3xhyezmaimthtojhufld2zafv2fpavctjsbbnqnvnz6uy4cqlxmcep244dkzdfqlhmyljqsssjer6ihmlrylfipjto7xrda610yrajxvzbqfpzi0whlkpq15mhun05703e/7x2oojtn6u8ththepzqkdcoijgjcxapifixksyic6r/cnefcysvjrkgq3dmt/5lgkfwmevchrdr51kaebah9kejooae1malqimgwoabpiex8go8gs/gm/e+g80z2c4u+axj4xvrrj1t</latexit>
<latexit sha1_base64="pz5sdx+rdbffqks2a3/hx0f31ha=">aaacfnicbvdlssnafj3uv62vqes3g0vooyzebhvrklpxwchashvdzdppp51mwsxekkf/4czfcencxa2482+ctllo9cdlhs65l5l7/jhrqwz7y8gtlc4tr+rxc2vrg5tb5vbojywsgukdrywslr9jwignduuvi61yebt6jdt94cxeb94tiwner9uojm6iepwgfcoljc+0ongfllqv2zkswo5mqi8dvj3xhyezmaimthtojhufld2zafv2fpavctjsbbnqnvnz6uy4cqlxmcep244dkzdfqlhmyljqsssjer6ihmlrylfipjto7xrda610yrajxvzbqfpzi0whlkpq15mhun05703e/7x2oojtn6u8ththepzqkdcoijgjcxapifixksyic6r/cnefcysvjrkgq3dmt/5lgkfwmevchrdr51kaebah9kejooae1malqimgwoabpiex8go8gs/gm/e+g80z2c4u+axj4xvrrj1t</latexit>
<latexit sha1_base64="pz5sdx+rdbffqks2a3/hx0f31ha=">aaacfnicbvdlssnafj3uv62vqes3g0vooyzebhvrklpxwchashvdzdppp51mwsxekkf/4czfcencxa2482+ctllo9cdlhs65l5l7/jhrqwz7y8gtlc4tr+rxc2vrg5tb5vbojywsgukdrywslr9jwignduuvi61yebt6jdt94cxeb94tiwner9uojm6iepwgfcoljc+0ongfllqv2zkswo5mqi8dvj3xhyezmaimthtojhufld2zafv2fpavctjsbbnqnvnz6uy4cqlxmcep244dkzdfqlhmyljqsssjer6ihmlrylfipjto7xrda610yrajxvzbqfpzi0whlkpq15mhun05703e/7x2oojtn6u8ththepzqkdcoijgjcxapifixksyic6r/cnefcysvjrkgq3dmt/5lgkfwmevchrdr51kaebah9kejooae1malqimgwoabpiex8go8gs/gm/e+g80z2c4u+axj4xvrrj1t</latexit>

nxj=1

 (x, j, yj 1, yj)

= arg max

= arg max

exp(w     (x, y ))
w     (x, y )

y

y

   (i, yi) = max
yi 1

 (x, i, yi i, yi) +    (i   1, yi 1)

<latexit sha1_base64="lbwfbxudc4hcn3nuzc3yiiwvrp8=">aaacnxicbvdlsgmxfm3ud32nunqtlniwpmyiockc6manogbts6eutcbthiyziclyy9cvcun3uhpjqswtv2d6wgjba4hdoedyc48vgfxacd6sznz8wuls8kp2dw19y9pe2n5qcsixkeoyxblqi0uyjuhzu81ivuicum9ixe9cdfzki5gkxtg97gns4kgv0zbipi3utg9eoezxgsdqgeww4tn0qolw6penueh6oii1j9q0ud2ofyv91fmjb6a1fh+gnzebpp1zss4qcjq4y5idy9w27vcvihhcsaqxq0rvxuforoqkppirftzlfbeid1cl1a2neceqkq7p7sn9owqwjkv5kyzd9e9eirhspe6bjee6rsa9gtjlqyc6pgmknbkjjheelqotbnumbx3cgeqcneszgrck5q8qt5hptzums6yed/lkavi+lj2w3luj3mxlui1lsav2qag44bhcggtwc8oag2fwbj7ap/vivvtf1vcomrhgmzvgh6yfxz0jqhm=</latexit>
<latexit sha1_base64="lbwfbxudc4hcn3nuzc3yiiwvrp8=">aaacnxicbvdlsgmxfm3ud32nunqtlniwpmyiockc6manogbts6eutcbthiyziclyy9cvcun3uhpjqswtv2d6wgjba4hdoedyc48vgfxacd6sznz8wuls8kp2dw19y9pe2n5qcsixkeoyxblqi0uyjuhzu81ivuicum9ixe9cdfzki5gkxtg97gns4kgv0zbipi3utg9eoezxgsdqgeww4tn0qolw6penueh6oii1j9q0ud2ofyv91fmjb6a1fh+gnzebpp1zss4qcjq4y5idy9w27vcvihhcsaqxq0rvxuforoqkppirftzlfbeid1cl1a2neceqkq7p7sn9owqwjkv5kyzd9e9eirhspe6bjee6rsa9gtjlqyc6pgmknbkjjheelqotbnumbx3cgeqcneszgrck5q8qt5hptzums6yed/lkavi+lj2w3luj3mxlui1lsav2qag44bhcggtwc8oag2fwbj7ap/vivvtf1vcomrhgmzvgh6yfxz0jqhm=</latexit>
<latexit sha1_base64="lbwfbxudc4hcn3nuzc3yiiwvrp8=">aaacnxicbvdlsgmxfm3ud32nunqtlniwpmyiockc6manogbts6eutcbthiyziclyy9cvcun3uhpjqswtv2d6wgjba4hdoedyc48vgfxacd6sznz8wuls8kp2dw19y9pe2n5qcsixkeoyxblqi0uyjuhzu81ivuicum9ixe9cdfzki5gkxtg97gns4kgv0zbipi3utg9eoezxgsdqgeww4tn0qolw6penueh6oii1j9q0ud2ofyv91fmjb6a1fh+gnzebpp1zss4qcjq4y5idy9w27vcvihhcsaqxq0rvxuforoqkppirftzlfbeid1cl1a2neceqkq7p7sn9owqwjkv5kyzd9e9eirhspe6bjee6rsa9gtjlqyc6pgmknbkjjheelqotbnumbx3cgeqcneszgrck5q8qt5hptzums6yed/lkavi+lj2w3luj3mxlui1lsav2qag44bhcggtwc8oag2fwbj7ap/vivvtf1vcomrhgmzvgh6yfxz0jqhm=</latexit>
<latexit sha1_base64="lbwfbxudc4hcn3nuzc3yiiwvrp8=">aaacnxicbvdlsgmxfm3ud32nunqtlniwpmyiockc6manogbts6eutcbthiyziclyy9cvcun3uhpjqswtv2d6wgjba4hdoedyc48vgfxacd6sznz8wuls8kp2dw19y9pe2n5qcsixkeoyxblqi0uyjuhzu81ivuicum9ixe9cdfzki5gkxtg97gns4kgv0zbipi3utg9eoezxgsdqgeww4tn0qolw6penueh6oii1j9q0ud2ofyv91fmjb6a1fh+gnzebpp1zss4qcjq4y5idy9w27vcvihhcsaqxq0rvxuforoqkppirftzlfbeid1cl1a2neceqkq7p7sn9owqwjkv5kyzd9e9eirhspe6bjee6rsa9gtjlqyc6pgmknbkjjheelqotbnumbx3cgeqcneszgrck5q8qt5hptzums6yed/lkavi+lj2w3luj3mxlui1lsav2qag44bhcggtwc8oag2fwbj7ap/vivvtf1vcomrhgmzvgh6yfxz0jqhm=</latexit>

 (x, y ) =

crfs: computing id172
 (x, j, yj 1, yj)
p(y | x; w) =
xy 0

nxj=1
w     (x, j, yj 1, yj)1a
define !"#$(&,()) to sum of scores for sequences ending in position &
norm(i, yi) =xyi 1

exp(w     (x, y ))
py 0 exp(w     (x, y 0))
exp0@
nxj=1
exp(w     (x, y 0)) =xy 0
nyj=1
=xy 0

exp(w     (x, i, yi 1, yi))norm(i   1, yi 1)

exp(w     (x, j, yj 1, yj))

    forward algorithm! remember id48 case:

<latexit sha1_base64="pz5sdx+rdbffqks2a3/hx0f31ha=">aaacfnicbvdlssnafj3uv62vqes3g0vooyzebhvrklpxwchashvdzdppp51mwsxekkf/4czfcencxa2482+ctllo9cdlhs65l5l7/jhrqwz7y8gtlc4tr+rxc2vrg5tb5vbojywsgukdrywslr9jwignduuvi61yebt6jdt94cxeb94tiwner9uojm6iepwgfcoljc+0ongfllqv2zkswo5mqi8dvj3xhyezmaimthtojhufld2zafv2fpavctjsbbnqnvnz6uy4cqlxmcep244dkzdfqlhmyljqsssjer6ihmlrylfipjto7xrda610yrajxvzbqfpzi0whlkpq15mhun05703e/7x2oojtn6u8ththepzqkdcoijgjcxapifixksyic6r/cnefcysvjrkgq3dmt/5lgkfwmevchrdr51kaebah9kejooae1malqimgwoabpiex8go8gs/gm/e+g80z2c4u+axj4xvrrj1t</latexit>
<latexit sha1_base64="pz5sdx+rdbffqks2a3/hx0f31ha=">aaacfnicbvdlssnafj3uv62vqes3g0vooyzebhvrklpxwchashvdzdppp51mwsxekkf/4czfcencxa2482+ctllo9cdlhs65l5l7/jhrqwz7y8gtlc4tr+rxc2vrg5tb5vbojywsgukdrywslr9jwignduuvi61yebt6jdt94cxeb94tiwner9uojm6iepwgfcoljc+0ongfllqv2zkswo5mqi8dvj3xhyezmaimthtojhufld2zafv2fpavctjsbbnqnvnz6uy4cqlxmcep244dkzdfqlhmyljqsssjer6ihmlrylfipjto7xrda610yrajxvzbqfpzi0whlkpq15mhun05703e/7x2oojtn6u8ththepzqkdcoijgjcxapifixksyic6r/cnefcysvjrkgq3dmt/5lgkfwmevchrdr51kaebah9kejooae1malqimgwoabpiex8go8gs/gm/e+g80z2c4u+axj4xvrrj1t</latexit>
<latexit sha1_base64="pz5sdx+rdbffqks2a3/hx0f31ha=">aaacfnicbvdlssnafj3uv62vqes3g0vooyzebhvrklpxwchashvdzdppp51mwsxekkf/4czfcencxa2482+ctllo9cdlhs65l5l7/jhrqwz7y8gtlc4tr+rxc2vrg5tb5vbojywsgukdrywslr9jwignduuvi61yebt6jdt94cxeb94tiwner9uojm6iepwgfcoljc+0ongfllqv2zkswo5mqi8dvj3xhyezmaimthtojhufld2zafv2fpavctjsbbnqnvnz6uy4cqlxmcep244dkzdfqlhmyljqsssjer6ihmlrylfipjto7xrda610yrajxvzbqfpzi0whlkpq15mhun05703e/7x2oojtn6u8ththepzqkdcoijgjcxapifixksyic6r/cnefcysvjrkgq3dmt/5lgkfwmevchrdr51kaebah9kejooae1malqimgwoabpiex8go8gs/gm/e+g80z2c4u+axj4xvrrj1t</latexit>
<latexit sha1_base64="pz5sdx+rdbffqks2a3/hx0f31ha=">aaacfnicbvdlssnafj3uv62vqes3g0vooyzebhvrklpxwchashvdzdppp51mwsxekkf/4czfcencxa2482+ctllo9cdlhs65l5l7/jhrqwz7y8gtlc4tr+rxc2vrg5tb5vbojywsgukdrywslr9jwignduuvi61yebt6jdt94cxeb94tiwner9uojm6iepwgfcoljc+0ongfllqv2zkswo5mqi8dvj3xhyezmaimthtojhufld2zafv2fpavctjsbbnqnvnz6uy4cqlxmcep244dkzdfqlhmyljqsssjer6ihmlrylfipjto7xrda610yrajxvzbqfpzi0whlkpq15mhun05703e/7x2oojtn6u8ththepzqkdcoijgjcxapifixksyic6r/cnefcysvjrkgq3dmt/5lgkfwmevchrdr51kaebah9kejooae1malqimgwoabpiex8go8gs/gm/e+g80z2c4u+axj4xvrrj1t</latexit>

<latexit sha1_base64="8ckfkxeg7p4rz7wwp9xwyci7t4w=">aaacrhicbvblswmxgmz6tr6qhr0ei9bclbsiqaeh6mwjgtvctyzzng1d81isrlos++e8epfmp/diqcwrmk0vanugmmzm9ywzmgjug9d9cqamz2bn5hcwc0vlk6trxfwnky1jhukdsyzvm0samcpiw1ddsdnsbpgqketwcjr71zdeasrfpuki0uaoj2ixymssfbt91fcccql4vqbvjkaveax9hfmgtyku7npz5po7qhzr44400i/6tnys5smhwyx5sgv8ya73y1acysmtuupav8qbkriy4twopvodiwnohmemad3y3mi0u6qmxyxkbt/wjej4ghqkzalanoh2omwhgztw6ccuvpyia4fq+eskunyjd22si9pxk14u/ue1ytm9bkdurlehan9f1i0znblmlciovqqbllicskl2rrd3kuly2oiltgrv8st/swovdltzlvzl9znrgwtgc2ydmvdaaaidm3aoggcde/amxsgb8+c8oo/ox3d0yhnnbijfcd6/ajlksbu=</latexit>
<latexit sha1_base64="8ckfkxeg7p4rz7wwp9xwyci7t4w=">aaacrhicbvblswmxgmz6tr6qhr0ei9bclbsiqaeh6mwjgtvctyzzng1d81isrlos++e8epfmp/diqcwrmk0vanugmmzm9ywzmgjug9d9cqamz2bn5hcwc0vlk6trxfwnky1jhukdsyzvm0samcpiw1ddsdnsbpgqketwcjr71zdeasrfpuki0uaoj2ixymssfbt91fcccql4vqbvjkaveax9hfmgtyku7npz5po7qhzr44400i/6tnys5smhwyx5sgv8ya73y1acysmtuupav8qbkriy4twopvodiwnohmemad3y3mi0u6qmxyxkbt/wjej4ghqkzalanoh2omwhgztw6ccuvpyia4fq+eskunyjd22si9pxk14u/ue1ytm9bkdurlehan9f1i0znblmlciovqqbllicskl2rrd3kuly2oiltgrv8st/swovdltzlvzl9znrgwtgc2ydmvdaaaidm3aoggcde/amxsgb8+c8oo/ox3d0yhnnbijfcd6/ajlksbu=</latexit>
<latexit sha1_base64="8ckfkxeg7p4rz7wwp9xwyci7t4w=">aaacrhicbvblswmxgmz6tr6qhr0ei9bclbsiqaeh6mwjgtvctyzzng1d81isrlos++e8epfmp/diqcwrmk0vanugmmzm9ywzmgjug9d9cqamz2bn5hcwc0vlk6trxfwnky1jhukdsyzvm0samcpiw1ddsdnsbpgqketwcjr71zdeasrfpuki0uaoj2ixymssfbt91fcccql4vqbvjkaveax9hfmgtyku7npz5po7qhzr44400i/6tnys5smhwyx5sgv8ya73y1acysmtuupav8qbkriy4twopvodiwnohmemad3y3mi0u6qmxyxkbt/wjej4ghqkzalanoh2omwhgztw6ccuvpyia4fq+eskunyjd22si9pxk14u/ue1ytm9bkdurlehan9f1i0znblmlciovqqbllicskl2rrd3kuly2oiltgrv8st/swovdltzlvzl9znrgwtgc2ydmvdaaaidm3aoggcde/amxsgb8+c8oo/ox3d0yhnnbijfcd6/ajlksbu=</latexit>
<latexit sha1_base64="8ckfkxeg7p4rz7wwp9xwyci7t4w=">aaacrhicbvblswmxgmz6tr6qhr0ei9bclbsiqaeh6mwjgtvctyzzng1d81isrlos++e8epfmp/diqcwrmk0vanugmmzm9ywzmgjug9d9cqamz2bn5hcwc0vlk6trxfwnky1jhukdsyzvm0samcpiw1ddsdnsbpgqketwcjr71zdeasrfpuki0uaoj2ixymssfbt91fcccql4vqbvjkaveax9hfmgtyku7npz5po7qhzr44400i/6tnys5smhwyx5sgv8ya73y1acysmtuupav8qbkriy4twopvodiwnohmemad3y3mi0u6qmxyxkbt/wjej4ghqkzalanoh2omwhgztw6ccuvpyia4fq+eskunyjd22si9pxk14u/ue1ytm9bkdurlehan9f1i0znblmlciovqqbllicskl2rrd3kuly2oiltgrv8st/swovdltzlvzl9znrgwtgc2ydmvdaaaidm3aoggcde/amxsgb8+c8oo/ox3d0yhnnbijfcd6/ajlksbu=</latexit>

<latexit sha1_base64="0zzplqjind0acoahydh/143udo4=">aaack3icbvhbahsxenvu0yz1l3fa6etere0tgxkzwwppoqe3yunfcinujyplgq1wa8vrskkabwuw/al+td/yn5htjeq2iozwzpwzazqykrxe0wuqplp7/gr942nj2fmxlzebw69+ol1yxvtms20hcxvccsx7iedygbgc5onkz8nf8ui/+82te1r9glnho5xolmgeo+cpcfmfcuu+ls93k8l/mvyfwlinmjipaa/2znc7hbxzik9r8kiie8kzanfs7dcufim8mta+2d7cc/tx5fosg4kvkyn4tbo7+ey3yqxorzs8mp92n8642yq60tlwfrdxoixqob03/5nusylncpikzg3jymcopbyek7xqkmjxq9kfnfchh4rm3i3k5vir/m4zkc609ucbxri3hsxnnzvnia/mkuzdxw1bpqqnc8g+jkqhtafcsdwgrjaynf78ee6f5qzk3apkrpb3xwxklwxg/7hhlxdfffj90h/f/dsnv39o9y7qbwygbfqwtvgmdlapfuwnqi9ysbucbl3gs/gm/bwehser0jcopa/rrqi/xqgyz8si</latexit>
<latexit sha1_base64="0zzplqjind0acoahydh/143udo4=">aaack3icbvhbahsxenvu0yz1l3fa6etere0tgxkzwwppoqe3yunfcinujyplgq1wa8vrskkabwuw/al+td/yn5htjeq2iozwzpwzazqykrxe0wuqplp7/gr942nj2fmxlzebw69+ol1yxvtms20hcxvccsx7iedygbgc5onkz8nf8ui/+82te1r9glnho5xolmgeo+cpcfmfcuu+ls93k8l/mvyfwlinmjipaa/2znc7hbxzik9r8kiie8kzanfs7dcufim8mta+2d7cc/tx5fosg4kvkyn4tbo7+ey3yqxorzs8mp92n8642yq60tlwfrdxoixqob03/5nusylncpikzg3jymcopbyek7xqkmjxq9kfnfchh4rm3i3k5vir/m4zkc609ucbxri3hsxnnzvnia/mkuzdxw1bpqqnc8g+jkqhtafcsdwgrjaynf78ee6f5qzk3apkrpb3xwxklwxg/7hhlxdfffj90h/f/dsnv39o9y7qbwygbfqwtvgmdlapfuwnqi9ysbucbl3gs/gm/bwehser0jcopa/rrqi/xqgyz8si</latexit>
<latexit sha1_base64="0zzplqjind0acoahydh/143udo4=">aaack3icbvhbahsxenvu0yz1l3fa6etere0tgxkzwwppoqe3yunfcinujyplgq1wa8vrskkabwuw/al+td/yn5htjeq2iozwzpwzazqykrxe0wuqplp7/gr942nj2fmxlzebw69+ol1yxvtms20hcxvccsx7iedygbgc5onkz8nf8ui/+82te1r9glnho5xolmgeo+cpcfmfcuu+ls93k8l/mvyfwlinmjipaa/2znc7hbxzik9r8kiie8kzanfs7dcufim8mta+2d7cc/tx5fosg4kvkyn4tbo7+ey3yqxorzs8mp92n8642yq60tlwfrdxoixqob03/5nusylncpikzg3jymcopbyek7xqkmjxq9kfnfchh4rm3i3k5vir/m4zkc609ucbxri3hsxnnzvnia/mkuzdxw1bpqqnc8g+jkqhtafcsdwgrjaynf78ee6f5qzk3apkrpb3xwxklwxg/7hhlxdfffj90h/f/dsnv39o9y7qbwygbfqwtvgmdlapfuwnqi9ysbucbl3gs/gm/bwehser0jcopa/rrqi/xqgyz8si</latexit>
<latexit sha1_base64="0zzplqjind0acoahydh/143udo4=">aaack3icbvhbahsxenvu0yz1l3fa6etere0tgxkzwwppoqe3yunfcinujyplgq1wa8vrskkabwuw/al+td/yn5htjeq2iozwzpwzazqykrxe0wuqplp7/gr942nj2fmxlzebw69+ol1yxvtms20hcxvccsx7iedygbgc5onkz8nf8ui/+82te1r9glnho5xolmgeo+cpcfmfcuu+ls93k8l/mvyfwlinmjipaa/2znc7hbxzik9r8kiie8kzanfs7dcufim8mta+2d7cc/tx5fosg4kvkyn4tbo7+ey3yqxorzs8mp92n8642yq60tlwfrdxoixqob03/5nusylncpikzg3jymcopbyek7xqkmjxq9kfnfchh4rm3i3k5vir/m4zkc609ucbxri3hsxnnzvnia/mkuzdxw1bpqqnc8g+jkqhtafcsdwgrjaynf78ee6f5qzk3apkrpb3xwxklwxg/7hhlxdfffj90h/f/dsnv39o9y7qbwygbfqwtvgmdlapfuwnqi9ysbucbl3gs/gm/bwehser0jcopa/rrqi/xqgyz8si</latexit>

   (i, yi) = max
yi 1

e(xi|yi)q(yi|yi 1)   (i   1, yi 1)

crfs: computing gradient

p(y | x; w) =

<latexit sha1_base64="lbwfbxudc4hcn3nuzc3yiiwvrp8=">aaacnxicbvdlsgmxfm3ud32nunqtlniwpmyiockc6manogbts6eutcbthiyziclyy9cvcun3uhpjqswtv2d6wgjba4hdoedyc48vgfxacd6sznz8wuls8kp2dw19y9pe2n5qcsixkeoyxblqi0uyjuhzu81ivuicum9ixe9cdfzki5gkxtg97gns4kgv0zbipi3utg9eoezxgsdqgeww4tn0qolw6penueh6oii1j9q0ud2ofyv91fmjb6a1fh+gnzebpp1zss4qcjq4y5idy9w27vcvihhcsaqxq0rvxuforoqkppirftzlfbeid1cl1a2neceqkq7p7sn9owqwjkv5kyzd9e9eirhspe6bjee6rsa9gtjlqyc6pgmknbkjjheelqotbnumbx3cgeqcneszgrck5q8qt5hptzums6yed/lkavi+lj2w3luj3mxlui1lsav2qag44bhcggtwc8oag2fwbj7ap/vivvtf1vcomrhgmzvgh6yfxz0jqhm=</latexit>
<latexit sha1_base64="lbwfbxudc4hcn3nuzc3yiiwvrp8=">aaacnxicbvdlsgmxfm3ud32nunqtlniwpmyiockc6manogbts6eutcbthiyziclyy9cvcun3uhpjqswtv2d6wgjba4hdoedyc48vgfxacd6sznz8wuls8kp2dw19y9pe2n5qcsixkeoyxblqi0uyjuhzu81ivuicum9ixe9cdfzki5gkxtg97gns4kgv0zbipi3utg9eoezxgsdqgeww4tn0qolw6penueh6oii1j9q0ud2ofyv91fmjb6a1fh+gnzebpp1zss4qcjq4y5idy9w27vcvihhcsaqxq0rvxuforoqkppirftzlfbeid1cl1a2neceqkq7p7sn9owqwjkv5kyzd9e9eirhspe6bjee6rsa9gtjlqyc6pgmknbkjjheelqotbnumbx3cgeqcneszgrck5q8qt5hptzums6yed/lkavi+lj2w3luj3mxlui1lsav2qag44bhcggtwc8oag2fwbj7ap/vivvtf1vcomrhgmzvgh6yfxz0jqhm=</latexit>
<latexit sha1_base64="lbwfbxudc4hcn3nuzc3yiiwvrp8=">aaacnxicbvdlsgmxfm3ud32nunqtlniwpmyiockc6manogbts6eutcbthiyziclyy9cvcun3uhpjqswtv2d6wgjba4hdoedyc48vgfxacd6sznz8wuls8kp2dw19y9pe2n5qcsixkeoyxblqi0uyjuhzu81ivuicum9ixe9cdfzki5gkxtg97gns4kgv0zbipi3utg9eoezxgsdqgeww4tn0qolw6penueh6oii1j9q0ud2ofyv91fmjb6a1fh+gnzebpp1zss4qcjq4y5idy9w27vcvihhcsaqxq0rvxuforoqkppirftzlfbeid1cl1a2neceqkq7p7sn9owqwjkv5kyzd9e9eirhspe6bjee6rsa9gtjlqyc6pgmknbkjjheelqotbnumbx3cgeqcneszgrck5q8qt5hptzums6yed/lkavi+lj2w3luj3mxlui1lsav2qag44bhcggtwc8oag2fwbj7ap/vivvtf1vcomrhgmzvgh6yfxz0jqhm=</latexit>
<latexit sha1_base64="lbwfbxudc4hcn3nuzc3yiiwvrp8=">aaacnxicbvdlsgmxfm3ud32nunqtlniwpmyiockc6manogbts6eutcbthiyziclyy9cvcun3uhpjqswtv2d6wgjba4hdoedyc48vgfxacd6sznz8wuls8kp2dw19y9pe2n5qcsixkeoyxblqi0uyjuhzu81ivuicum9ixe9cdfzki5gkxtg97gns4kgv0zbipi3utg9eoezxgsdqgeww4tn0qolw6penueh6oii1j9q0ud2ofyv91fmjb6a1fh+gnzebpp1zss4qcjq4y5idy9w27vcvihhcsaqxq0rvxuforoqkppirftzlfbeid1cl1a2neceqkq7p7sn9owqwjkv5kyzd9e9eirhspe6bjee6rsa9gtjlqyc6pgmknbkjjheelqotbnumbx3cgeqcneszgrck5q8qt5hptzums6yed/lkavi+lj2w3luj3mxlui1lsav2qag44bhcggtwc8oag2fwbj7ap/vivvtf1vcomrhgmzvgh6yfxz0jqhm=</latexit>

@
@wj

<latexit sha1_base64="oo34yggowyi+eu/9njgongn9/v4=">aaacfxicbvfdb9mwfhxc11a+cjzu5uiid122creoq0ejo0wqtipayjslz1fzmo03qze8t2qkoop2n/bg/8fl5w2ghbx5wudhtuobpfqrlc2cj66fk3bt66fwdnt3f33v0hd/uphn83zaupg9fslhqcesmel9jicivywglgzcryaxrxsa2f/mda8ll4zlekzsszfzznlfhhjf1lngtca6yitpyi5g+czxlefamwirwbnpvm6s9hcxmmswc5dqcrbu/og/fzhfcw2yfjborwsffpqautwjjn0gngpszdldskbkz5fghxpuhgzkjbookpomg0drgo4g4mubcnsf8kzywtjcssfcsyarwpo6vbvahgtq9xhilcl8ictr0sigrmvq/p18bzx2sql9plywhn/u2oitrmjvonlmquzhatjf9xm1y2fzureaeqywq6azrxamwj7s8g45prk1yoekq5mxxogrh/wpexnjtcvl3ydtb6pxw3jl++grx/6k6xg/bqmxsggb2iy/qjnaarouix99r76b3ykf/c3/ehg6nvdz4n6j/wd38d6ro8og==</latexit>
<latexit sha1_base64="oo34yggowyi+eu/9njgongn9/v4=">aaacfxicbvfdb9mwfhxc11a+cjzu5uiid122creoq0ejo0wqtipayjslz1fzmo03qze8t2qkoop2n/bg/8fl5w2ghbx5wudhtuobpfqrlc2cj66fk3bt66fwdnt3f33v0hd/uphn83zaupg9fslhqcesmel9jicivywglgzcryaxrxsa2f/mda8ll4zlekzsszfzznlfhhjf1lngtca6yitpyi5g+czxlefamwirwbnpvm6s9hcxmmswc5dqcrbu/og/fzhfcw2yfjborwsffpqautwjjn0gngpszdldskbkz5fghxpuhgzkjbookpomg0drgo4g4mubcnsf8kzywtjcssfcsyarwpo6vbvahgtq9xhilcl8ictr0sigrmvq/p18bzx2sql9plywhn/u2oitrmjvonlmquzhatjf9xm1y2fzureaeqywq6azrxamwj7s8g45prk1yoekq5mxxogrh/wpexnjtcvl3ydtb6pxw3jl++grx/6k6xg/bqmxsggb2iy/qjnaarouix99r76b3ykf/c3/ehg6nvdz4n6j/wd38d6ro8og==</latexit>
<latexit sha1_base64="oo34yggowyi+eu/9njgongn9/v4=">aaacfxicbvfdb9mwfhxc11a+cjzu5uiid122creoq0ejo0wqtipayjslz1fzmo03qze8t2qkoop2n/bg/8fl5w2ghbx5wudhtuobpfqrlc2cj66fk3bt66fwdnt3f33v0hd/uphn83zaupg9fslhqcesmel9jicivywglgzcryaxrxsa2f/mda8ll4zlekzsszfzznlfhhjf1lngtca6yitpyi5g+czxlefamwirwbnpvm6s9hcxmmswc5dqcrbu/og/fzhfcw2yfjborwsffpqautwjjn0gngpszdldskbkz5fghxpuhgzkjbookpomg0drgo4g4mubcnsf8kzywtjcssfcsyarwpo6vbvahgtq9xhilcl8ictr0sigrmvq/p18bzx2sql9plywhn/u2oitrmjvonlmquzhatjf9xm1y2fzureaeqywq6azrxamwj7s8g45prk1yoekq5mxxogrh/wpexnjtcvl3ydtb6pxw3jl++grx/6k6xg/bqmxsggb2iy/qjnaarouix99r76b3ykf/c3/ehg6nvdz4n6j/wd38d6ro8og==</latexit>
<latexit sha1_base64="oo34yggowyi+eu/9njgongn9/v4=">aaacfxicbvfdb9mwfhxc11a+cjzu5uiid122creoq0ejo0wqtipayjslz1fzmo03qze8t2qkoop2n/bg/8fl5w2ghbx5wudhtuobpfqrlc2cj66fk3bt66fwdnt3f33v0hd/uphn83zaupg9fslhqcesmel9jicivywglgzcryaxrxsa2f/mda8ll4zlekzsszfzznlfhhjf1lngtca6yitpyi5g+czxlefamwirwbnpvm6s9hcxmmswc5dqcrbu/og/fzhfcw2yfjborwsffpqautwjjn0gngpszdldskbkz5fghxpuhgzkjbookpomg0drgo4g4mubcnsf8kzywtjcssfcsyarwpo6vbvahgtq9xhilcl8ictr0sigrmvq/p18bzx2sql9plywhn/u2oitrmjvonlmquzhatjf9xm1y2fzureaeqywq6azrxamwj7s8g45prk1yoekq5mxxogrh/wpexnjtcvl3ydtb6pxw3jl++grx/6k6xg/bqmxsggb2iy/qjnaarouix99r76b3ykf/c3/ehg6nvdz4n6j/wd38d6ro8og==</latexit>

l(w) =

exp(w     (x, y ))

py 0 exp(w     (x, y 0))
mxi=1  j(x (i), y (i))  xy

nxj=1

 (x, y ) =

 (x, j, yj 1, yj)

<latexit sha1_base64="pz5sdx+rdbffqks2a3/hx0f31ha=">aaacfnicbvdlssnafj3uv62vqes3g0vooyzebhvrklpxwchashvdzdppp51mwsxekkf/4czfcencxa2482+ctllo9cdlhs65l5l7/jhrqwz7y8gtlc4tr+rxc2vrg5tb5vbojywsgukdrywslr9jwignduuvi61yebt6jdt94cxeb94tiwner9uojm6iepwgfcoljc+0ongfllqv2zkswo5mqi8dvj3xhyezmaimthtojhufld2zafv2fpavctjsbbnqnvnz6uy4cqlxmcep244dkzdfqlhmyljqsssjer6ihmlrylfipjto7xrda610yrajxvzbqfpzi0whlkpq15mhun05703e/7x2oojtn6u8ththepzqkdcoijgjcxapifixksyic6r/cnefcysvjrkgq3dmt/5lgkfwmevchrdr51kaebah9kejooae1malqimgwoabpiex8go8gs/gm/e+g80z2c4u+axj4xvrrj1t</latexit>
<latexit sha1_base64="pz5sdx+rdbffqks2a3/hx0f31ha=">aaacfnicbvdlssnafj3uv62vqes3g0vooyzebhvrklpxwchashvdzdppp51mwsxekkf/4czfcencxa2482+ctllo9cdlhs65l5l7/jhrqwz7y8gtlc4tr+rxc2vrg5tb5vbojywsgukdrywslr9jwignduuvi61yebt6jdt94cxeb94tiwner9uojm6iepwgfcoljc+0ongfllqv2zkswo5mqi8dvj3xhyezmaimthtojhufld2zafv2fpavctjsbbnqnvnz6uy4cqlxmcep244dkzdfqlhmyljqsssjer6ihmlrylfipjto7xrda610yrajxvzbqfpzi0whlkpq15mhun05703e/7x2oojtn6u8ththepzqkdcoijgjcxapifixksyic6r/cnefcysvjrkgq3dmt/5lgkfwmevchrdr51kaebah9kejooae1malqimgwoabpiex8go8gs/gm/e+g80z2c4u+axj4xvrrj1t</latexit>
<latexit sha1_base64="pz5sdx+rdbffqks2a3/hx0f31ha=">aaacfnicbvdlssnafj3uv62vqes3g0vooyzebhvrklpxwchashvdzdppp51mwsxekkf/4czfcencxa2482+ctllo9cdlhs65l5l7/jhrqwz7y8gtlc4tr+rxc2vrg5tb5vbojywsgukdrywslr9jwignduuvi61yebt6jdt94cxeb94tiwner9uojm6iepwgfcoljc+0ongfllqv2zkswo5mqi8dvj3xhyezmaimthtojhufld2zafv2fpavctjsbbnqnvnz6uy4cqlxmcep244dkzdfqlhmyljqsssjer6ihmlrylfipjto7xrda610yrajxvzbqfpzi0whlkpq15mhun05703e/7x2oojtn6u8ththepzqkdcoijgjcxapifixksyic6r/cnefcysvjrkgq3dmt/5lgkfwmevchrdr51kaebah9kejooae1malqimgwoabpiex8go8gs/gm/e+g80z2c4u+axj4xvrrj1t</latexit>
<latexit sha1_base64="pz5sdx+rdbffqks2a3/hx0f31ha=">aaacfnicbvdlssnafj3uv62vqes3g0vooyzebhvrklpxwchashvdzdppp51mwsxekkf/4czfcencxa2482+ctllo9cdlhs65l5l7/jhrqwz7y8gtlc4tr+rxc2vrg5tb5vbojywsgukdrywslr9jwignduuvi61yebt6jdt94cxeb94tiwner9uojm6iepwgfcoljc+0ongfllqv2zkswo5mqi8dvj3xhyezmaimthtojhufld2zafv2fpavctjsbbnqnvnz6uy4cqlxmcep244dkzdfqlhmyljqsssjer6ihmlrylfipjto7xrda610yrajxvzbqfpzi0whlkpq15mhun05703e/7x2oojtn6u8ththepzqkdcoijgjcxapifixksyic6r/cnefcysvjrkgq3dmt/5lgkfwmevchrdr51kaebah9kejooae1malqimgwoabpiex8go8gs/gm/e+g80z2c4u+axj4xvrrj1t</latexit>

p(y | x (i); w) j(x (i), y )!    wj

xy

<latexit sha1_base64="fyb7/polhifkwelfnsw17eyny5s=">aaacyxicbvhpb9mwfhycbkod0cgryxpvplyqvykqnoqqvxcaa4dnwrdwtrc5rrua2e5koyslyon/kbth/hocnhjbsydz+vt98hv2i1lotpg8p4776pgtnd29p439z88pxjqpx17qjfoedkncezwkskacsto0zha6shxfiul0koo/l/rvlvwajflcrfi6ffhgsjkj2fgqbp4ndcbcmattmqsczwb0nbdzp/giy06qllj4vv0x3xehjvvw33/pbt2lkmd9v7iwsbwfuasrk771ixlehqicxjfut1whdcbid25igkmbdeb3qr0v9znqutvzhs+x1vhvbhfgvakgqzslm72cwkexqaqjhwk98lzxthcvdckdfi8g0ttgj8q2dwcixohqar1drwjflzjbpld3swjq9m8ix0hol7foobdylva2v5epajdpz02nozjozksmm0tzjybio9wozpigxfgubjorzwyessid1132o037cf420+ug+g73oeef/6+nfhu/cyeeo3eodby0qkaok/oda0rcb44wrl1lu43v7k/3j8bq+tumvfoxrm//ghp7tyg</latexit>
<latexit sha1_base64="fyb7/polhifkwelfnsw17eyny5s=">aaacyxicbvhpb9mwfhycbkod0cgryxpvplyqvykqnoqqvxcaa4dnwrdwtrc5rrua2e5koyslyon/kbth/hocnhjbsydz+vt98hv2i1lotpg8p4776pgtnd29p439z88pxjqpx17qjfoedkncezwkskacsto0zha6shxfiul0koo/l/rvlvwajflcrfi6ffhgsjkj2fgqbp4ndcbcmattmqsczwb0nbdzp/giy06qllj4vv0x3xehjvvw33/pbt2lkmd9v7iwsbwfuasrk771ixlehqicxjfut1whdcbid25igkmbdeb3qr0v9znqutvzhs+x1vhvbhfgvakgqzslm72cwkexqaqjhwk98lzxthcvdckdfi8g0ttgj8q2dwcixohqar1drwjflzjbpld3swjq9m8ix0hol7foobdylva2v5epajdpz02nozjozksmm0tzjybio9wozpigxfgubjorzwyessid1132o037cf420+ug+g73oeef/6+nfhu/cyeeo3eodby0qkaok/oda0rcb44wrl1lu43v7k/3j8bq+tumvfoxrm//ghp7tyg</latexit>
<latexit sha1_base64="fyb7/polhifkwelfnsw17eyny5s=">aaacyxicbvhpb9mwfhycbkod0cgryxpvplyqvykqnoqqvxcaa4dnwrdwtrc5rrua2e5koyslyon/kbth/hocnhjbsydz+vt98hv2i1lotpg8p4776pgtnd29p439z88pxjqpx17qjfoedkncezwkskacsto0zha6shxfiul0koo/l/rvlvwajflcrfi6ffhgsjkj2fgqbp4ndcbcmattmqsczwb0nbdzp/giy06qllj4vv0x3xehjvvw33/pbt2lkmd9v7iwsbwfuasrk771ixlehqicxjfut1whdcbid25igkmbdeb3qr0v9znqutvzhs+x1vhvbhfgvakgqzslm72cwkexqaqjhwk98lzxthcvdckdfi8g0ttgj8q2dwcixohqar1drwjflzjbpld3swjq9m8ix0hol7foobdylva2v5epajdpz02nozjozksmm0tzjybio9wozpigxfgubjorzwyessid1132o037cf420+ug+g73oeef/6+nfhu/cyeeo3eodby0qkaok/oda0rcb44wrl1lu43v7k/3j8bq+tumvfoxrm//ghp7tyg</latexit>
<latexit sha1_base64="fyb7/polhifkwelfnsw17eyny5s=">aaacyxicbvhpb9mwfhycbkod0cgryxpvplyqvykqnoqqvxcaa4dnwrdwtrc5rrua2e5koyslyon/kbth/hocnhjbsydz+vt98hv2i1lotpg8p4776pgtnd29p439z88pxjqpx17qjfoedkncezwkskacsto0zha6shxfiul0koo/l/rvlvwajflcrfi6ffhgsjkj2fgqbp4ndcbcmattmqsczwb0nbdzp/giy06qllj4vv0x3xehjvvw33/pbt2lkmd9v7iwsbwfuasrk771ixlehqicxjfut1whdcbid25igkmbdeb3qr0v9znqutvzhs+x1vhvbhfgvakgqzslm72cwkexqaqjhwk98lzxthcvdckdfi8g0ttgj8q2dwcixohqar1drwjflzjbpld3swjq9m8ix0hol7foobdylva2v5epajdpz02nozjozksmm0tzjybio9wozpigxfgubjorzwyessid1132o037cf420+ug+g73oeef/6+nfhu/cyeeo3eodby0qkaok/oda0rcb44wrl1lu43v7k/3j8bq+tumvfoxrm//ghp7tyg</latexit>

p(y | x (i); w) j(x (i), y ) =xy

 j(x (i), k, yk 1, yk)

nxk=1
p(y | x (i); w)
nxk=1xa,b xyk 1=a,yk=b
p(y | x (i); w) j(x (i), k, yk 1, yk)

=

    can compute with the forward backward algorithm

see notes for full details!

some numbers

    rough accuracies:

    most freq tag: 
    trigram id48: 
    tnt (brants, 2000): 
    maxent p(y | x)
    memm tagger 1:
    memm tagger 2:
    id88: 
    crf++:
    cyclic tagger:
    upper bound:

~90% / ~50%
~95% / ~55%
96.7% / 85.5%
93.7% / 82.6%
96.7% / 84.5%
96.8% / 86.9%
97.1%
97.3%
97.2% / 89.0%
~98%

[sun 2014]

cyclic network

    another idea: train a bi-directional memm
(a) left-to-right cmm

is,

cyclic tagging [toutanova et al 03]

that
ditioned quantities, these local models may have to be
estimated in some sophisticated way; it is typical in tag-
ging to populate these models with little maximum en-
tropy models. for example, we might populate a model
for

    train two memms, 

combine scores

    and be very careful
    tune id173
    try lots of different 

    see paper for full 

features

details

(b) right-to-left cmm

(a) left-to-right cmm

(c) bidirectional dependency network

(b) right-to-left cmm

in this case, the
but there are not joint features involving all three vari-
ables (though there could have been such features). we
say that this model uses the feature templates
(previous tag features) and
tures).

    and be careful 

figure 1: dependency networks: (a) the (standard) left-to-right
   rst-order cmm, (b) the (reversed) right-to-left cmm, and (c)
the bidirectional dependency network.
the model.
having expressive templates leads to a large number
of features, but we show that by suitable use of a prior
(i.e., id173) in the conditional loglinear model    
something not used by previous maximum id178 tag-

clearly, both the preceding tag
carry useful information about a current tag
directional models do not ignore this in   uence; in the
case of a left-to-right cmm, the in   uence of
is explicit in the
   uence of
figure 1: dependency networks: (a) the (standard) left-to-right
next position (via
   rst-order cmm, (b) the (reversed) right-to-left cmm, and (c)
versed for the right-to-left cmm in    gure 1(b).
the bidirectional dependency network.

(c) bidirectional dependency network

[toutanova et al. 2003]

some numbers

    rough accuracies:

    most freq tag: 
    trigram id48: 
    tnt (brants, 2000): 
    maxent p(y | x)
    memm tagger 1:
    memm tagger 2:
    id88: 
    crf++:
    cyclic tagger:
    upper bound:

~90% / ~50%
~95% / ~55%
96.7% / 85.5%
93.7% / 82.6%
96.7% / 84.5%
96.8% / 86.9%
97.1%
97.3%
97.2% / 89.0%
~98%

[toutanova et al. 2003]

summary

    for tagging, the change from generative to 

    one profits from models for specifying 

discriminative model does not by itself result in 
great improvement 
dependence on overlapping features of the 
observation such as spelling, suffix analysis, etc.
    memms allow integration of rich features of the 
observations
    this additional power (of the memm ,crf, 
id88 models) has been shown to result in 
improvements in accuracy
comes at the price of much slower training

    the higher accuracy of discriminative models 

domain effects

    accuracies degrade outside of domain

    up to triple error rate
    usually make the most errors on the things you care 

about in the domain (e.g. protein names)

    open questions

    how to effectively exploit unlabeled data from a new 

domain (what could we gain?)

    how to best incorporate domain lexica in a principled 

way (e.g. umls specialist lexicon, ontologies)

