cs5740: natural language processing

spring 2018

id33

instructor: yoav artzi

slides adapted from dan klein, luke zettlemoyer, chris manning, and dan jurafsky, and david weiss

overview

    the parsing problem
    methods

    transition-based parsing

    evaluation
    projectivity

parse trees

    part-of-speech tagging: 

    word classes

    parsing:

    from words to phrases to sentences
    relations between words

    two views

    constituency
    dependency 

constituency (phrase structure) 

parsing

    phrase structure organizes words into 

nested constituents

    linguists can, and do, argue about details
    lots of ambiguity

s

vp

np

np

n(cid:1)

pp

np

new art critics write reviews with computers

id33
    dependency structure shows which 

words depend on (modify or are 
arguments of) which other words.

the boy put the tortoise on the rug

dependency structure

    syntactic structure consists of:

    lexical items
    binary asymmetric relations   dependencies

dependencies are 
typed with name of 
grammatical relation

submitted
auxpass

were

prep
by

pobj

nsubjpass
bills

prep

pobj

on

ports

cc
and

conj
immigration

brownback
appos
nn
senator
republican
prep

of

pobj
kansas

dependency structure

    syntactic structure consists of:

    lexical items
    binary asymmetric relations   dependencies

nsubjpass

submitted

head (governor, 
superior, regent)

arrow from head to 
modifier (but can be 

reversed)

bills

modifier (dependent, 
inferior, subordinate)

dependency structure

    syntactic structure consists of:

    lexical items
    binary asymmetric relations   dependencies

dependencies 
form a tree

nsubjpass
bills

submitted
auxpass

were

prep
by

pobj

prep

pobj

on

ports

cc
and

conj
immigration

brownback
appos
nn
senator
republican
prep

of

pobj
kansas

dependency structure

    syntactic structure consists of:

    lexical items
    binary asymmetric relations   dependencies

dependencies 
form a tree

nsubjpass
bills

root

submitted
auxpass

were

prep
by

pobj

brownback
appos
nn
senator
republican
prep

prep

pobj

on

ports

cc
and

conj
immigration

of

pobj
kansas

let   s parse

start with main verb, and 
draw dependencies. don   t 
worry about labels. just try 
the modifiers right. 

john saw mary

he said that the boy who was wearing the blue shirt with the white pockets has left the building

methods for id33
    id145
    graph algorithms

    eisner (1996): o(n3)

    mcdonald et al. (2005): score edges independently using 

classifier and use maximum spanning tree

    id124
    start with all edges, eliminate based on hard constraints
   deterministic parsing   
    left-to-right, each choice is done with a classifier jumped

   

nsubj
boy

prep
over

det
the

amod
little

pobj

the

det
fence

making decisions

what are the sources of information for id33?
1. bilexical affinities    
    [issues    the] is plausible
2. dependency distance   
    mostly with nearby words
intervening material
3.
    dependencies rarely span intervening verbs or punctuation
4. valency of heads  

    how many dependents on which side are usual for a head?

root discussion of the outstanding issues was completed  .

maltparse (nivre et al. 2008)

    greedy transition-based parser
    each decision: how to attach each word as we 

encounter it
    if you are familiar: like shift-reduce parser

    select each action with a classifier
    the parser has:

    which starts with the root symbol

    a stack   , written with the top to the right
    a buffer   , written with the top to the left
    a set of dependency arcs a
    a set of actions

    which starts with the input sentence

    which starts off empty

arc-standard id33

start:     = [root],    = w1,    , wn , a =    
finish:     =    

  |wi, wj|  , a       , wj|  , a   {r(wj,wi)} 
  |wi, wj|  , a       , wi|  , a   {r(wi,wj)}

    shift
    left-arcr
    right-arcr

  , wi|  , a       |wi,   , a

root joe likes marry

arc-standard id33

start:     = [root],    = w1,    , wn , a =    
finish:     =    

  |wi, wj|  , a       , wj|  , a   {r(wj,wi)} 
  |wi, wj|  , a       , wi|  , a   {r(wi,wj)}

    shift
    left-arcr
    right-arcr

  , wi|  , a       |wi,   , a

root joe likes marry

shift
left-arc
shift
right-arc
right-arc
shift

[root]
[root, joe]
[root] 
[root, likes]
[root]
[]
[root]

[joe, likes, marry]
[likes, marry]
[likes, marry]
[marry]
[likes]
[root]
[]

   
   
a1    {(likes,marry)} = a2
a2    {(root, likes)} = a3

{(likes,joe)} = a1
a1

a3

arc-standard id33

start:     = [root],    = w1,    , wn , a =    
finish:     =    

  |wi, wj|  , a       , wj|  , a   {r(wj,wi)} 
  |wi, wj|  , a       , wi|  , a   {r(wi,wj)}

    shift
    left-arcr
    right-arcr

  , wi|  , a       |wi,   , a

root happy children like to play with their friends .

arc-eager id33
    precondition: r   (wk, wi)     a, wi     root
start:  
    left-arcr
    precondition: r   (wk, wi)     a
    right-arcr
    reduce     
    shift              , wi|  , a       |wi,   , a
finish:  

   = [root],    = w1,    , wn , a =    
  |wi, wj|  , a       , wj|  , a   {r(wj,wi)} 
  |wi, wj|  , a       |wi|wj,   , a   {r(wi,wj)}
   =    

  |wi,   , a       ,   , a

this is the common    arc-eager    variant: a head can 
immediately take a right dependent, before its
dependents are found

arc-eager

left-arcr   |wi, wj|  , a      , wj|  , a   {r(wj,wi)} 
precondition: r   (wk, wi)     a, wi    root
right-arcr   |wi, wj|  , a      |wi|wj,   , a   {r(wi,wj)}
precondition: r   (wk, wi)     a

reduce       |wi,   , a      ,   , a
shift           , wi|  , a      |wi,   , a

1.

2.
3.

4.

root happy children like to play with their friends .

arc-eager

left-arcr   |wi, wj|  , a      , wj|  , a   {r(wj,wi)} 
precondition: r   (wk, wi)     a, wi    root
right-arcr   |wi, wj|  , a      |wi|wj,   , a   {r(wi,wj)}
precondition: r   (wk, wi)     a

reduce       |wi,   , a      ,   , a
shift           , wi|  , a      |wi,   , a

1.

2.
3.

4.

[root]
[root, happy]

root happy children like to play with their friends .

[happy, children,    ]    
   
a1    {nsubj(like, children)} = a2
a2   {root(root, like) = a3
a3   {aux(play, to) = a4
a4   {xcomp(like, play) = a5

{amod(children, happy)} = a1
a1

[children, like,    ]
shift
[children, like,    ]
laamod [root]
[like, to,    ]
shift
[like, to,    ]
lansubj
[to, play,    ]
raroot
[play, with,    ]
shift
laaux
[play, with,    ]
raxcomp [root, like, play] [with their,    ]

[root, children]
[root]
[root, like]
[root, like, to]
[root, like]

a3

arc-eager

left-arcr   |wi, wj|  , a      , wj|  , a   {r(wj,wi)} 
precondition: r   (wk, wi)     a, wi    root
right-arcr   |wi, wj|  , a      |wi|wj,   , a   {r(wi,wj)}
precondition: r   (wk, wi)     a

reduce       |wi,   , a      ,   , a
shift           , wi|  , a      |wi,   , a

1.

2.
3.

4.

[with their,    ]

[root, like, play, with, their]

root happy children like to play with their friends .
raxcomp [root, like, play]
raprep [root, like, play, with]
shift
laposs [root, like, play, with]
rapobj
reduce [root, like, play, with]
reduce [root, like, play]
reduce [root, like]
rapunc [root, like, .]
you terminate as soon as the buffer is empty.  dependencies = a9

a4   {xcomp(like, play) = a5
[their, friends,    ] a5   {prep(play, with) = a6
a6   {poss(friends, their) = a7
a7   {pobj(with, friends) = a8
a8   {punc(like, .) = a9

[friends, .]
[friends, .]
[.]
[.]
[.]
[.]
[]

[root, like, play, with, friends]

a8
a8
a8

a6

maltparser (nivre et al. 2008)
    selecting the next action:

    discriminative classifier (id166, maxent, etc.)
    untyped choices: 4
    typed choices: |r| * 2 + 2
buffer, etc.

    features: pos tags, word in stack, word in 
    greedy    no search
    close to state of the art
    linear time parser    very fast!

    but can easily do id125

parsing with neural networks
chen and manning (2014)

    arc-standard transitions

    shift
    left-arcr
    right-arcr
    selecting the next actions:
    untyped choices: 3
    typed choices: |r| * 2 + 1
    neural network classifier
careful hyper-parameter tuning gives sota 
results

    with a few model improvements and very 

parsing with neural networks
chen and manning (2014)

hyper-parameters

slide from david weiss

slide from david weiss

slide from david weiss

slide from david weiss

slide from david weiss

evaluation

root   she  saw   the   video   lecture 

acc =   # correct deps

# of deps
uas =  4 / 5  =  80%
las  =  2 / 5  =  40%

0         1      2       3         4            5
gold
1
2
3
4
5

2 she
0 saw
5 the
5 video
2    lecture dobj

nsubj
root 
det
nn

parsed
1
2
3
4
5

nsubj
2 she
root 
0 saw
det
4 the
nsubj
5 video
2    lecture ccomp

projectivity

    dependencies from id18 trees with head rules must 

be projective
    crossing arcs are not allowed 
constituents    non-projective structures

    but: theory allows to account for displaced 

who did bill buy the coffee from yesterday ?

projectivity
    arc-eager transition system:
    can   t handle non-projectivity

    possible directions:

    give up!
    post-processing
    add new transition types
    switch to a different algorithm

    graph-based parsers (e.g., mstparser)

