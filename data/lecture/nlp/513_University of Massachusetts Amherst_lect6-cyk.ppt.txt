chart parsing

lecture #6

introduction to natural language processing

cmpsci 585, fall 2007
university of massachusetts  amherst

andrew mccallum

(agglomeration of slides from jason eisner)

andrew mccallum, umass amherst

today   s main points

    hand back in-class exercise #2
    apologies: hw #1 not completed by grader.
i   m giving you an extra day; now due friday.

    motivations and applications of parsing.
    id145 for parsing: cyk

    some hands-on practice

    discuss programming assignment #3
   implement cyk and build a grammar   

andrew mccallum, umass amherst

programming languages

     inrange = 1;

printf ("/charset [%s",
        (re_opcode_t) *(p - 1) == charset_not ? "^" : "");
assert (p + *p < pend);
for (c = 0; c < 256; c++)
  if (c / 8 < *p && (p[1 + (c/8)] & (1 << (c % 8)))) {
     /* are we starting a range?  */
     if (last + 1 == c && ! inrange) {
        putchar ('-');
     }
     /* have we broken a range?  */
     else if (last + 1 != c && inrange) {
        putchar (last);
        inrange = 0;
     }
     if (! inrange)
        putchar (c);
     last = c;
  }

    easy to parse.
    designed that way!

andrew mccallum, umass amherst

natural languages

   printf "/charset %s", re_opcode_t *p - 1 == charset_not ? "^" : "";

assert p + *p < pend; for c = 0; c < 256; c++ if c / 8 < *p && p1 + c/8
& 1 << c % 8 are we starting a range? if last + 1 == c && !  inrange
putchar '-'; inrange = 1; have we broken a range? else if last + 1 != c
&& inrange putchar last; inrange = 0; if !  inrange putchar c; last =
c;

    no {} () [] to indicate scope & precedence
    lots of overloading (arity varies)
    grammar isn   t known in advance!
    context-free grammar not best formalism

andrew mccallum, umass amherst

the parsing problem

correct test trees

s
c
o
r
e
r

accuracy

p
a
r
s
e
r

grammar

test
sentences

andrew mccallum, umass amherst

applications of parsing (1/2)

    machine translation  (alshawi 1996, wu 1997, ...)

tree

english

chinese
    id133 from parses  (prevost 1996)

operations

  the government plans to raise income tax.
  the government plans to raise income tax the imagination.

    id103 using parsing (chelba et al 1998)

  put the file in the folder.
  put the file and the folder.

andrew mccallum, umass amherst

applications of parsing (2/2)

    grammar checking  (microsoft)
    indexing for information retrieval (woods 1997)

  ... washing a car with a hose ...                vehicle maintenance

    information extraction  (hobbs 1996) (miller et al 2000)

ny times
archive

andrew mccallum, umass amherst

database

pattern

parsing state of the art

    recent parsers quite accurate, e.g.,

    a maximum-id178-inspired parser

eugene charniak
proceedings of naacl-2000.

    three generative, lexicalised models for statistical

parsing
michael collins
proceedings of acl, 1997.

    most sentences parsed correctly, or with one

error

andrew mccallum, umass amherst

last class   

    we defined a id18,

where it sits in the id154

    talked about parsing as search   

   through an exponential number of possible trees
    gave examples of bottom-up and top-down search.
    discussed problems:

    infinite loop with left-recursive rules
    much duplicated work in exponential space    backtracking

andrew mccallum, umass amherst

id145 for parsing

    given id18 in chomsky normal form,

and an input string, we want to search for
valid parse trees.

    what are the intermediate sub-problems?
    what would the id145 table

look like?

andrew mccallum, umass amherst

cky algorithm, recognizer version

    input: string of n words
    output: yes/no  (since it   s only a recognizer)
    data structure: n x n table

    rows labeled 0 to n-1
    columns labeled 1 to n
    cell [i,j] lists possible constituents spanning words

between i and j

andrew mccallum, umass amherst

cky algorithm, recognizer version

    for i := 1 to n

    add to [i-1,i] all (part-of-speech) categories for the ith word

    for width := 2 to n

    for start := 0 to n-width

    define end := start + width
    for mid := start+1 to end-1

    for every constituent x in [start,mid]
        for every constituent y in [mid,end]
            for all ways of combining x and y (if any)
                 add the resulting constituent to

             [start,end] if it   s not already there.

andrew mccallum, umass amherst

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

0

1

2
3
4

np 4
vp 4

p 2
v 5

det 1

n

8

   np     time
   vst     time
   np     flies
   vp     flies
   p     like
   v     like
   det     an
   n     arrow

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

0

1

2
3
4

np 4
vp 4

p 2
v 5

det 1

n

8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10

0

1

2
3
4

np 4
vp 4

p 2
v 5

det 1

n

8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s

0

1

2
3
4

np 4
vp 4

p 2
v 5

det 1

n

8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

0

1

2
3
4

np 4
vp 4

p 2
v 5

det 1

n

8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

0

1

2
3
4

np 4
vp 4

_

p 2
v 5

_

det 1

n

8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

0

1

2
3
4

np 4
vp 4

_

p 2
v 5

_

det 1

np 10
n
8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

0

1

2
3
4

np 4
vp 4

_

p 2
v 5

_

det 1

np 10
n
8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

_

_

p 2
v 5

0

1

2
3
4

_

_

det 1

pp 12

np 10
n
8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

_

_

p 2
v 5

0

1

2
3
4

_

_

det 1

pp 12
vp 16
np 10
n
8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

_

_

p 2
v 5

0

1

2
3
4

_

_

det 1

pp 12
vp 16
np 10
n
8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

_

_

p 2
v 5

_

_

_

det 1

0

1

2
3
4

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

np 18

pp 12
vp 16
np 10
n
8

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

_

_

p 2
v 5

_

_

_

det 1

0

1

2
3
4

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

np 18
21
s

pp 12
vp 16
np 10
n
8

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

_

_

p 2
v 5

_

_

_

det 1

0

1

2
3
4

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

np 18
21
s
vp 18
pp 12
vp 16
np 10
n
8

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

_

_

p 2
v 5

_

_

_

det 1

0

1

2
3
4

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

np 18
21
s
vp 18
pp 12
vp 16
np 10
n
8

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

_

_

p 2
v 5

0

1

2
3
4

_

_

_

det 1

np 24

np 18
21
s
vp 18
pp 12
vp 16
np 10
n
8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

_

_

p 2
v 5

0

1

2
3
4

_

_

_

det 1

np 24
22
s

np 18
21
s
vp 18
pp 12
vp 16
np 10
n
8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

_

_

p 2
v 5

0

1

2
3
4

_

_

_

det 1

np 24
22
s
s
27

np 18
21
s
vp 18
pp 12
vp 16
np 10
n
8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

_

_

p 2
v 5

0

1

2
3
4

_

_

_

det 1

np 24
22
s
s
27

np 18
21
s
vp 18
pp 12
vp 16
np 10
n
8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

_

np 10
8
s
s
13

np 4
vp 4

__

p 2
v 5

0

1

2
3
4

_

_

_

det 1

np 24
22
s
s
27
np 24

np 18
21
s
vp 18
pp 12
vp 16
np 10
n
8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

_

_

p 2
v 5

0

1

2
3
4

_

_

_

det 1

np 24
22
s
s
27
np 24
s
27

np 18
21
s
vp 18
pp 12
vp 16
np 10
n
8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

_

_

p 2
v 5

0

1

2
3
4

_

_

_

det 1

np 24
22
s
s
27
np 24
s
27
22
s

np 18
21
s
vp 18
pp 12
vp 16
np 10
n
8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

_

_

p 2
v 5

0

1

2
3
4

_

_

_

det 1

np 24
22
s
s
27
np 24
s
27
22
s
s
27

np 18
21
s
vp 18
pp 12
vp 16
np 10
n
8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

follow backpointers    
time   1   flies   2     like    3      an    4    arrow    5

s

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

_

_

p 2
v 5

0

1

2
3
4

_

_

_

det 1

np 24
22
s
s
27
np 24
s
27
22
s
s
27

np 18
21
s
vp 18
pp 12
vp 16
np 10
n
8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

_

_

p 2
v 5

0

1

2
3
4

_

_

_

det 1

np 24
22
s
s
27
np 24
s
27
22
s
s
27

np 18
21
s
vp 18
pp 12
vp 16
np 10
n
8

s

np vp

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

_

_

p 2
v 5

0

1

2
3
4

_

_

_

det 1

np 24
22
s
s
27
np 24
s
27
22
s
s
27

np 18
21
s
vp 18
pp 12
vp 16
np 10
n
8

s

np vp

vp

pp

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

_

_

p 2
v 5

0

1

2
3
4

_

_

_

det 1

np 24
22
s
s
27
np 24
s
27
22
s
s
27

np 18
21
s
vp 18
pp 12
vp 16
np 10
n
8

s

np vp

vp

pp

p np

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time   1   flies   2     like    3      an    4    arrow    5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

_

_

p 2
v 5

0

1

2
3
4

_

_

_

det 1

np 24
22
s
s
27
np 24
s
27
22
s
s
27

np 18
21
s
vp 18
pp 12
vp 16
np 10
n
8

s

np vp

vp

pp

p np

det n

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

cmpsci 585 in-class exercise #3 name: __________________   student id: ____________
fill in the cyk id145 table to parse the sentence below.  in the bottom right corner, draw the two parse trees.

chop-
sticks

5

4

   s     np vp
 np     np pp
 vp     v np
 vp     vp pp
 pp     p np

 np     she
 np     fish
 np     fork
 np     chopsticks
 v     eats
 v     fish
 p     with

she

eats

   sh

with

2

3

1

np

0

0

1

2

3

4

andrew mccallum, umass amherst

cmpsci 591n in-class exercise #3
fill in the cyk id145 table to parse the sentence below.  in the bottom right corner, draw the two parse trees.

name: __________________   student id: ____________

she

eats

   sh

with

1

np

2

v

3

4

s np,vp

vp v np

np
v

   s     np vp
 np     np pp
 vp     v np
 vp     vp pp
 pp     p np

 np     she
 np     fish
 np     fork
 np     chopsticks
 v     eats
 v     fish
 p     with

chop-
sticks

5
s np vp
s np vp
vp v np
vp vp pp

np np pp

p

pp p np

np

0

0

1

2

3

4

andrew mccallum, umass amherst

homework #3

    implement cyk
    create a grammar
    experiment with it...

    due thursday.

andrew mccallum, umass amherst

id145 parsing 2

    how about a id145 solution

for arbitrary cgf grammars?

    (grammars not in chomsky normal form.)

andrew mccallum, umass amherst

earley parser (1970)

    nice combination of

    id145
    incremental interpretation
    avoids infinite loops
    no restrictions on the form of the context-free

grammar.
a     b c the d of     causes no problems

    o(n3) worst case, but faster for many grammars
    uses left context and optionally right context to

constrain search.

andrew mccallum, umass amherst

overview of the algorithm

    finds constituents and partial constituents in input

    a     b c . d e  is partial:  only the first half of the a

a

+

d

=

a

b c

d e

b c

d e

a     b c . d e

a     b c d . e

andrew mccallum, umass amherst

overview of the algorithm

    proceeds incrementally left-to-right

    before it reads word 5, it has already built all hypotheses that are

consistent with first 4 words

    reads word 5 & attaches it to immediately preceding hypotheses.
might yield new constituents that are then attached to hypotheses
immediately preceding them    

    e.g., attaching d to a     b c . d e gives a     b c d . e
    attaching e to that gives a     b c d e .
    now we have a complete a that we can attach to hypotheses

immediately preceding the a, etc.

andrew mccallum, umass amherst

the parse table

    columns 0 through n corresponding to the gaps between

words

    entries in column 5 look like  (3, np     np . pp)         

(but we   ll omit the     etc. to save space)

    built while processing word 5
    means that the input substring from 3 to 5

matches the initial np portion of a np     np pp rule

    dot shows how much we   ve matched as of column 5
    perfectly fine to have entries like (3, vp     is it . true that s)

andrew mccallum, umass amherst

the parse table

    entries in column 5 look like  (3, np     np . pp)
    what will it mean that we have this entry?

    unknown right context: doesn   t mean we   ll necessarily be able

to find a vp starting at column 5 to complete the s.

    known left context: does mean that some dotted rule back in

column 3 is looking for an s that starts at 3.

    so if we actually do find a vp starting at column 5, allowing us to
complete the s, then we   ll be able to attach the s to something.

    and when that something is complete, it too will have a customer

to its left    

    in short, a top-down (i.e., goal-directed) parser: it chooses to start
building a constituent not because of the input but because that   s
what the left context needs. in the spoon, won   t build spoon as a
verb because there   s no way to use a verb there.

    so any hypothesis in column 5 could get used in the correct parse,

if words 1-5 are continued in just the right way by words 6-n.

andrew mccallum, umass amherst

earley   s algorithm, recognizer version

    add root     . s to column 0.
    for each j from 0 to n:

    for each dotted rule in column j,

(including those we add as we go!)
look at what   s after the dot:

    if it   s a word w, scan:

    if w matches the input word between j and j+1, advance the dot

and add the resulting rule to column j+1

    if it   s a non-terminal x, predict:

    add all rules for x to the bottom of column j, wth the dot at the

start: e.g. x     . y z

    if there   s nothing after the dot, attach:

    we   ve finished some constituent, a, that started in column i<j. so
for each rule in column  j that has a after the dot: advance the dot
and add the result to the bottom of column j.

    output    yes    just if last column has root     s .
    note: don   t add an entry to a column if it   s already there!

andrew mccallum, umass amherst

summary of the algorithm

    process all hypotheses one at a time in order.

(current hypothesis is shown in blue.)

    this may add                              to the end of the to-do

list, or try to add                            again.

new hypotheses
old hypotheses

    process a hypothesis according to what follows

the dot:
    if a word, scan input and see if it matches
    if a nonterminal, predict ways to match it

    (we   ll predict blindly, but could reduce # of predictions by

looking ahead  k symbols in the input and only making
predictions that are compatible with this limited right context)

    if nothing, then we have a complete constituent, so

attach it to all its customers

andrew mccallum, umass amherst

a grammar

s      np vp
np     det n
np     np pp
vp     v np
vp     vp pp
pp     p np

np     papa
n     caviar
n     spoon
v     ate
p     with
det     the
det     a
an input sentence

papa ate the caviar with a spoon.

andrew mccallum, umass amherst

         0
0 root . s

initialize

remember this stands for (0, root     . s) 

         0

0 root . s

0 s . np vp

predict the kind of s we are looking for

remember this stands for (0, s     . np vp) 

         0

0 root . s

0 s . np vp

0 np . det n

0 np . np pp

0 np . papa

predict the kind of np we are looking for
(actually we   ll look for 3 kinds: any of the 3 will do)

         0

0 root . s

0 s . np vp

0 np . det n

0 np . np pp

0 np . papa

0 det . the

0 det . a

predict the kind of det we are looking for (2 kinds)

         0

0 root . s

0 s . np vp

0 np . det n

0 np . np pp

0 np . papa

0 det . the

0 det . a

predict the kind of np we   re looking for 
but we were already looking for these so
don   t add duplicate goals!  note that this happened
when we were processing a left-recursive rule.

         0        papa      1

0 root . s

0 np papa .

0 s . np vp

0 np . det n

0 np . np pp

0 np . papa

0 det . the

0 det . a

scan: the desired word is in the input!

         0        papa      1

0 root . s

0 np papa .

0 s . np vp

0 np . det n

0 np . np pp

0 np . papa

0 det . the

0 det . a

scan: failure

         0        papa      1

0 root . s

0 np papa .

0 s . np vp

0 np . det n

0 np . np pp

0 np . papa

0 det . the

0 det . a

scan: failure

         0        papa      1

0 root . s

0 np papa .

0 s . np vp

0 s np . vp

0 np . det n

0 np np . pp

0 np . np pp

0 np . papa

0 det . the

0 det . a

attach the newly created np
(which starts at 0) to its customers 
(incomplete constituents that end at 0
and have np after the dot)

predict

         0        papa      1

0 root . s

0 np papa .

0 s . np vp

0 s np . vp

0 np . det n

0 np np . pp

0 np . np pp

1 vp . v np

0 np . papa

1 vp . vp pp

0 det . the

0 det . a

         0        papa      1

0 root . s

0 np papa .

0 s . np vp

0 s np . vp

0 np . det n

0 np np . pp

0 np . np pp

1 vp . v np

0 np . papa

1 vp . vp pp

0 det . the

1 pp . p np

0 det . a

predict

         0        papa      1

0 root . s

0 np papa .

0 s . np vp

0 s np . vp

0 np . det n

0 np np . pp

0 np . np pp

1 vp . v np

0 np . papa

1 vp . vp pp

0 det . the

1 pp . p np

0 det . a

1 v . ate

predict

         0        papa      1

0 root . s

0 np papa .

0 s . np vp

0 s np . vp

0 np . det n

0 np np . pp

0 np . np pp

1 vp . v np

0 np . papa

1 vp . vp pp

0 det . the

1 pp . p np

0 det . a

1 v . ate

predict

         0        papa      1

0 root . s

0 np papa .

0 s . np vp

0 s np . vp

0 np . det n

0 np np . pp

0 np . np pp

1 vp . v np

0 np . papa

1 vp . vp pp

0 det . the

1 pp . p np

0 det . a

1 v . ate

1 p . with

predict

         0        papa      1         ate          2

0 root . s

0 np papa .

1 v ate .

0 s . np vp

0 s np . vp

0 np . det n

0 np np . pp

0 np . np pp

1 vp . v np

0 np . papa

1 vp . vp pp

0 det . the

1 pp . p np

0 det . a

1 v . ate

1 p . with

scan: success!

         0        papa      1         ate          2

0 root . s

0 np papa .

1 v ate .

0 s . np vp

0 s np . vp

0 np . det n

0 np np . pp

0 np . np pp

1 vp . v np

0 np . papa

1 vp . vp pp

0 det . the

1 pp . p np

0 det . a

1 v . ate

1 p . with

scan: failure

         0        papa      1         ate          2

0 root . s

0 np papa .

1 v ate .

0 s . np vp

0 s np . vp

1 vp v . np

attach

0 np . det n

0 np np . pp

0 np . np pp

1 vp . v np

0 np . papa

1 vp . vp pp

0 det . the

1 pp . p np

0 det . a

1 v . ate

1 p . with

predict

         0        papa      1         ate          2

0 root . s

0 np papa .

1 v ate .

0 s . np vp

0 s np . vp

1 vp v . np

0 np . det n

0 np np . pp

2 np . det n

0 np . np pp

1 vp . v np

2 np . np pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

0 det . a

1 v . ate

1 p . with

         0        papa      1         ate          2

0 root . s

0 np papa .

1 v ate .

0 s . np vp

0 s np . vp

1 vp v . np

0 np . det n

0 np np . pp

2 np . det n

0 np . np pp

1 vp . v np

2 np . np pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

predict (these next few steps
should look familiar)

         0        papa      1         ate          2

0 root . s

0 np papa .

1 v ate .

0 s . np vp

0 s np . vp

1 vp v . np

0 np . det n

0 np np . pp

2 np . det n

0 np . np pp

1 vp . v np

2 np . np pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

predict

         0        papa      1         ate          2

0 root . s

0 np papa .

1 v ate .

0 s . np vp

0 s np . vp

1 vp v . np

0 np . det n

0 np np . pp

2 np . det n

0 np . np pp

1 vp . v np

2 np . np pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

scan (this time we fail since
papa is not the next word)

         0        papa      1         ate          2        the           3

0 root . s

0 np papa .

1 v ate .

2 det the .

0 s . np vp

0 s np . vp

1 vp v . np

0 np . det n

0 np np . pp

2 np . det n

0 np . np pp

1 vp . v np

2 np . np pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

scan: success!

         0        papa      1         ate          2        the           3

0 root . s

0 np papa .

1 v ate .

2 det the .

0 s . np vp

0 s np . vp

1 vp v . np

0 np . det n

0 np np . pp

2 np . det n

0 np . np pp

1 vp . v np

2 np . np pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

2 det the .
2 np det . n

         0        papa      1         ate          2        the           3
0 root . s
0 s . np vp
0 np . det n
0 np . np pp
0 np . papa
0 det . the
0 det . a

1 v ate .
1 vp v . np
2 np . det n
2 np . np pp
2 np . papa
2 det . the
2 det . a

0 np papa .
0 s np . vp
0 np np . pp
1 vp . v np
1 vp . vp pp
1 pp . p np
1 v . ate
1 p . with

         0        papa      1         ate          2        the           3

0 root . s

0 np papa .

1 v ate .

2 det the .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

         0        papa      1         ate          2        the           3       caviar      4

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

         0        papa      1         ate          2        the           3       caviar      4

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

         0        papa      1         ate          2        the           3       caviar      4

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

attach

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

         0        papa      1         ate          2        the           3       caviar      4

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

attach
(again!)

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

         0        papa      1         ate          2        the           3       caviar      4

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

attach
(again!)

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

0 s np vp .

1 vp vp . pp

         0        papa      1         ate          2        the           3       caviar      4

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

0 s np vp .

1 vp vp . pp

4 pp . p np

         0        papa      1         ate          2        the           3       caviar      4

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

attach
(again!)

0 s np vp .

1 vp vp . pp

4 pp . p np

0 root s .

         0        papa      1         ate          2        the           3       caviar      4

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

0 s np vp .

1 vp vp . pp

4 pp . p np

0 root s .

         0        papa      1         ate          2        the           3       caviar      4

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

0 s np vp .

1 vp vp . pp

4 pp . p np

0 root s .

4 p . with

         0        papa      1         ate          2        the           3       caviar      4

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

0 s np vp .

1 vp vp . pp

4 pp . p np

0 root s .

4 p . with

         0        papa      1         ate          2        the           3       caviar      4       with           5

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

4 p with .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

0 s np vp .

1 vp vp . pp

4 pp . p np

0 root s .

4 p . with

         0        papa      1         ate          2        the           3       caviar      4       with           5

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

4 p with .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

4 pp p . np

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

0 s np vp .

1 vp vp . pp

4 pp . p np

0 root s .

4 p . with

         0        papa      1         ate          2        the           3       caviar      4       with           5

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

4 p with .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

4 pp p . np

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

5 np . det n

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

5 np . np pp

0 np . papa

1 vp . vp pp

2 np . papa

0 s np vp .

5 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

1 vp vp . pp

4 pp . p np

0 root s .

4 p . with

         0        papa      1         ate          2        the           3       caviar      4       with           5

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

4 p with .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

4 pp p . np

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

5 np . det n

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

5 np . np pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

0 s np vp .

5 np . papa

1 vp vp . pp

5 det . the

4 pp . p np

5 det . a

0 root s .

4 p . with

         0        papa      1         ate          2        the           3       caviar      4       with           5

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

4 p with .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

4 pp p . np

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

5 np . det n

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

5 np . np pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

0 s np vp .

5 np . papa

1 vp vp . pp

5 det . the

4 pp . p np

5 det . a

0 root s .

4 p . with

         0        papa      1         ate          2        the           3       caviar      4       with           5
0 root . s
0 s . np vp
0 np . det n
0 np . np pp
0 np . papa
0 det . the
0 det . a

1 v ate .
1 vp v . np
2 np . det n
2 np . np pp
2 np . papa
2 det . the
2 det . a

2 det the .
2 np det . n
3 n . caviar
3 n . spoon

0 np papa .
0 s np . vp
0 np np . pp
1 vp . v np
1 vp . vp pp
1 pp . p np
1 v . ate
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

4 p with .
4 pp p . np
5 np . det n
5 np . np pp
5 np . papa
5 det . the
5 det . a

         0        papa      1         ate          2        the           3       caviar      4       with           5

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

4 p with .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

4 pp p . np

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

5 np . det n

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

5 np . np pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

0 s np vp .

5 np . papa

1 vp vp . pp

5 det . the

4 pp . p np

5 det . a

0 root s .

4 p . with

         0        papa      1         ate          2        the           3       caviar      4       with           5          a           6

5 det a .

2 det the .
2 np det . n
3 n . caviar
3 n . spoon

0 np papa .
0 s np . vp
0 np np . pp
1 vp . v np
1 vp . vp pp
1 pp . p np
1 v . ate
1 p . with

1 v ate .
1 vp v . np
2 np . det n
2 np . np pp
2 np . papa
2 det . the
2 det . a

4 p with .
4 pp p . np
5 np . det n
5 np . np pp
5 np . papa
5 det . the
5 det . a

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

         0        papa      1         ate          2        the           3       caviar      4       with           5          a           6

0 np papa .

1 v ate .

2 det the .

3 n caviar .

4 p with .

5 det a .

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

4 pp p . np

5 np det . n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

5 np . det n

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

5 np . np pp

1 vp . vp pp

2 np . papa

1 pp . p np

2 det . the

1 v . ate

1 p . with

2 det . a

0 s np vp .

5 np . papa

1 vp vp . pp

5 det . the

4 pp . p np

5 det . a

0 root s .

4 p . with

         0        papa      1         ate          2        the           3       caviar      4       with           5          a           6

0 np papa .

1 v ate .

2 det the .

3 n caviar .

4 p with .

5 det a .

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

4 pp p . np

5 np det . n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

5 np . det n

6 n . caviar

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

5 np . np pp

6 n . spoon

1 vp . vp pp

2 np . papa

1 pp . p np

2 det . the

1 v . ate

1 p . with

2 det . a

0 s np vp .

5 np . papa

1 vp vp . pp

5 det . the

4 pp . p np

5 det . a

0 root s .

4 p . with

         0        papa      1         ate          2        the           3       caviar      4       with           5          a           6

0 np papa .

1 v ate .

2 det the .

3 n caviar .

4 p with .

5 det a .

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

4 pp p . np

5 np det . n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

5 np . det n

6 n . caviar

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

5 np . np pp

6 n . spoon

1 vp . vp pp

2 np . papa

1 pp . p np

2 det . the

1 v . ate

1 p . with

2 det . a

0 s np vp .

5 np . papa

1 vp vp . pp

5 det . the

4 pp . p np

5 det . a

0 root s .

4 p . with

         0        papa      1         ate          2        the           3       caviar      4       with           5          a           6      spoon      7

0 np papa .

1 v ate .

2 det the .

3 n caviar .

4 p with .

5 det a .

6 n spoon .

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

4 pp p . np

5 np det . n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

5 np . det n

6 n . caviar

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

5 np . np pp

6 n . spoon

1 vp . vp pp

2 np . papa

1 pp . p np

2 det . the

1 v . ate

1 p . with

2 det . a

0 s np vp .

5 np . papa

1 vp vp . pp

5 det . the

4 pp . p np

5 det . a

0 root s .

4 p . with

         0        papa      1         ate          2        the           3       caviar      4       with           5          a           6      spoon      7

0 np papa .

1 v ate .

2 det the .

3 n caviar .

4 p with .

5 det a .

6 n spoon .

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

4 pp p . np

5 np det . n

5 np det n .

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

5 np . det n

6 n . caviar

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

5 np . np pp

6 n . spoon

1 vp . vp pp

2 np . papa

1 pp . p np

2 det . the

1 v . ate

1 p . with

2 det . a

0 s np vp .

5 np . papa

1 vp vp . pp

5 det . the

4 pp . p np

5 det . a

0 root s .

4 p . with

         0        papa      1         ate          2        the           3       caviar      4       with           5          a           6      spoon      7

0 np papa .

1 v ate .

2 det the .

3 n caviar .

4 p with .

5 det a .

6 n spoon .

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

4 pp p . np

5 np det . n

5 np det n .

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

5 np . det n

6 n . caviar

4 pp p np .

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

5 np . np pp

6 n . spoon

5 np np . pp

1 vp . vp pp

2 np . papa

1 pp . p np

2 det . the

1 v . ate

1 p . with

2 det . a

0 s np vp .

5 np . papa

1 vp vp . pp

5 det . the

4 pp . p np

5 det . a

0 root s .

4 p . with

         0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

   

6 n spoon .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

0 s np vp .

1 vp vp . pp

4 pp . p np

0 root s .

4 p . with

5 np det n .

4 pp p np .

5 np np . pp

2 np np pp .

1 vp vp pp .

         0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

   

6 n spoon .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

0 s np vp .

1 vp vp . pp

4 pp . p np

0 root s .

4 p . with

5 np det n .

4 pp p np .

5 np np . pp

2 np np pp .

1 vp vp pp .

7 pp . p np

         0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

   

6 n spoon .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

0 s np vp .

1 vp vp . pp

4 pp . p np

0 root s .

4 p . with

5 np det n .

4 pp p np .

5 np np . pp

2 np np pp .

1 vp vp pp .

7 pp . p np

1 vp v np .

2 np np . pp

         0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

   

6 n spoon .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

0 s np vp .

1 vp vp . pp

4 pp . p np

0 root s .

4 p . with

5 np det n .

4 pp p np .

5 np np . pp

2 np np pp .

1 vp vp pp .

7 pp . p np

1 vp v np .

2 np np . pp

0 s np vp .

1 vp vp . pp

         0        papa      1         ate          2        the           3       caviar      4      with a spoon  7
   
0 root . s
0 s . np vp
0 np . det n
0 np . np pp
0 np . papa
0 det . the
0 det . a

1 v ate .
1 vp v . np
2 np . det n
2 np . np pp
2 np . papa
2 det . the
2 det . a

2 det the .
2 np det . n
3 n . caviar
3 n . spoon

0 np papa .
0 s np . vp
0 np np . pp
1 vp . v np
1 vp . vp pp
1 pp . p np
1 v . ate
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

6 n spoon .
5 np det n .
4 pp p np .
5 np np . pp
2 np np pp .
1 vp vp pp .
7 pp . p np
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
7 p . with

         0        papa      1         ate          2        the           3       caviar      4      with a spoon  7
   
0 root . s
0 s . np vp
0 np . det n
0 np . np pp
0 np . papa
0 det . the
0 det . a

1 v ate .
1 vp v . np
2 np . det n
2 np . np pp
2 np . papa
2 det . the
2 det . a

2 det the .
2 np det . n
3 n . caviar
3 n . spoon

0 np papa .
0 s np . vp
0 np np . pp
1 vp . v np
1 vp . vp pp
1 pp . p np
1 v . ate
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

6 n spoon .
5 np det n .
4 pp p np .
5 np np . pp
2 np np pp .
1 vp vp pp .
7 pp . p np
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
7 p . with

         0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

   

6 n spoon .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

0 s np vp .

1 vp vp . pp

4 pp . p np

0 root s .

4 p . with

5 np det n .

4 pp p np .

5 np np . pp

2 np np pp .

1 vp vp pp .

7 pp . p np

1 vp v np .

2 np np . pp

0 s np vp .

1 vp vp . pp

7 p . with

         0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

   

6 n spoon .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

0 s np vp .

1 vp vp . pp

4 pp . p np

0 root s .

4 p . with

5 np det n .

4 pp p np .

5 np np . pp

2 np np pp .

1 vp vp pp .

7 pp . p np

1 vp v np .

2 np np . pp

0 s np vp .

1 vp vp . pp

7 p . with

0 root s .

         0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

   

6 n spoon .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

0 s np vp .

1 vp vp . pp

4 pp . p np

0 root s .

4 p . with

5 np det n .

4 pp p np .

5 np np . pp

2 np np pp .

1 vp vp pp .

7 pp . p np

1 vp v np .

2 np np . pp

0 s np vp .

1 vp vp . pp

7 p . with

0 root s .

         0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

   

6 n spoon .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

0 s np vp .

1 vp vp . pp

4 pp . p np

0 root s .

4 p . with

5 np det n .

4 pp p np .

5 np np . pp

2 np np pp .

1 vp vp pp .

7 pp . p np

1 vp v np .

2 np np . pp

0 s np vp .

1 vp vp . pp

7 p . with

0 root s .

         0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

   

6 n spoon .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

0 s np vp .

1 vp vp . pp

4 pp . p np

0 root s .

4 p . with

5 np det n .

4 pp p np .

5 np np . pp

2 np np pp .

1 vp vp pp .

7 pp . p np

1 vp v np .

2 np np . pp

0 s np vp .

1 vp vp . pp

7 p . with

0 root s .

         0        papa      1         ate          2        the           3       caviar      4      with a spoon  7

0 root . s

0 np papa .

1 v ate .

2 det the .

3 n caviar .

   

6 n spoon .

0 s . np vp

0 s np . vp

1 vp v . np

2 np det . n

2 np det n .

0 np . det n

0 np np . pp

2 np . det n

3 n . caviar

1 vp v np .

0 np . np pp

1 vp . v np

2 np . np pp

3 n . spoon

2 np np . pp

0 np . papa

1 vp . vp pp

2 np . papa

0 det . the

1 pp . p np

2 det . the

0 det . a

1 v . ate

1 p . with

2 det . a

0 s np vp .

1 vp vp . pp

4 pp . p np

0 root s .

4 p . with

5 np det n .

4 pp p np .

5 np np . pp

2 np np pp .

1 vp vp pp .

7 pp . p np

1 vp v np .

2 np np . pp

0 s np vp .

1 vp vp . pp

7 p . with

0 root s .

left recursion kills pure

top-down parsing    

vp

andrew mccallum, umass amherst

left recursion kills pure

top-down parsing    

vp

vp pp

andrew mccallum, umass amherst

left recursion kills pure

top-down parsing    

vp

vp pp

vp pp

andrew mccallum, umass amherst

left recursion kills pure

top-down parsing    

vp

vp pp

vp pp

vp pp

makes new hypotheses
ad infinitum before we   ve
seen the pps at all

hypotheses try to predict
in advance how many 
pp   s will arrive in input

andrew mccallum, umass amherst

    but earley   s alg is okay!

vp

1 vp     . vp pp

pp

vp
(in column 1)

andrew mccallum, umass amherst

    but earley   s alg is okay!

vp

1 vp     . vp pp

pp

vp
(in column 1)

vp

1 vp     v np .

np

v
ate the caviar
(in column 4)

andrew mccallum, umass amherst

    but earley   s alg is okay!

vp

1 vp     . vp pp

pp

vp
(in column 1)

attach

andrew mccallum, umass amherst

vp

1 vp     vp . pp

vp
vp

pp

np
np

v
v
ate the caviar
(in column 4)

    but earley   s alg is okay!

vp

1 vp     . vp pp

pp

vp
(in column 1)

vp

1 vp     vp pp .

vp
vp

pp

with a spoon
np
np

v
v
ate the caviar
(in column 7)

andrew mccallum, umass amherst

    but earley   s alg is okay!

vp

pp

vp
(in column 1)

1 vp     . vp pp
can be reused

vp

1 vp     vp pp .

vp
vp

pp

with a spoon
np
np

v
v
ate the caviar
(in column 7)

andrew mccallum, umass amherst

    but earley   s alg is okay!

vp

pp

vp
(in column 1)

1 vp     . vp pp
can be reused

attach

andrew mccallum, umass amherst

vp

1 vp     vp . pp
pp

vp

vp
vp

pp

with a spoon
np
np

v
v
ate the caviar
(in column 7)

    but earley   s alg is okay!

vp

pp

vp
(in column 1)

1 vp     . vp pp
can be reused

vp

1 vp     vp pp .
pp

vp
vp

vp

in his bed
pp

with a spoon
np
np

v
v
ate the caviar
(in column 10)

andrew mccallum, umass amherst

    but earley   s alg is okay!

vp

pp

vp
(in column 1)

1 vp     . vp pp
can be reused again

vp

1 vp     vp pp .
pp

vp
vp

vp

in his bed
pp

with a spoon
np
np

v
v
ate the caviar
(in column 10)

andrew mccallum, umass amherst

    but earley   s alg is okay!

vp

pp

vp
(in column 1)

1 vp     . vp pp
can be reused again

attach

vp

1 vp     vp . pp
pp

vp

vp
vp

vp

pp

in his bed
pp

with a spoon
np
np

v
v
ate the caviar
(in column 10)

andrew mccallum, umass amherst

         0        papa      1         ate          2        the           3       caviar      4      with a spoon  7
   
0 root . s
0 s . np vp
0 np . det n
0 np . np pp
0 np . papa
0 det . the
0 det . a

1 v ate .
1 vp v . np
2 np . det n
2 np . np pp
2 np . papa
2 det . the
2 det . a

2 det the .
2 np det . n
3 n . caviar
3 n . spoon

0 np papa .
0 s np . vp
0 np np . pp
1 vp . v np
1 vp . vp pp
1 pp . p np
1 v . ate
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

completed a vp in col 4
col 1 lets us use it in a vp pp structure

6 n spoon .
5 np det n .
4 pp p np .
5 np np . pp
2 np np pp .
1 vp vp pp .
7 pp . p np
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
7 p . with
0 root s .

         0        papa      1         ate          2        the           3       caviar      4      with a spoon  7
   
0 root . s
0 s . np vp
0 np . det n
0 np . np pp
0 np . papa
0 det . the
0 det . a

1 v ate .
1 vp v . np
2 np . det n
2 np . np pp
2 np . papa
2 det . the
2 det . a

2 det the .
2 np det . n
3 n . caviar
3 n . spoon

0 np papa .
0 s np . vp
0 np np . pp
1 vp . v np
1 vp . vp pp
1 pp . p np
1 v . ate
1 p . with

3 n caviar .
2 np det n .
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
4 pp . p np
0 root s .
4 p . with

completed that vp = vp pp in col 7
col 1 would let us use it in a vp pp structure
can reuse col 1 as often as we need

6 n spoon .
5 np det n .
4 pp p np .
5 np np . pp
2 np np pp .
1 vp vp pp .
7 pp . p np
1 vp v np .
2 np np . pp
0 s np vp .
1 vp vp . pp
7 p . with
0 root s .

how to change

the parser into a recognizer?

andrew mccallum, umass amherst

what   s the complexity?

andrew mccallum, umass amherst

what   s the complexity?

    how many state sets will there be?

    length of sentence, n

    how big can the state sets get?

    size of grammar, g, times n

    how long does it take to build a state set?

    scan

    predict

    constant time

    need to check for duplicates

    complete

    total: o(n3)

    search previous state set, also check for duplicates, (gn)2

andrew mccallum, umass amherst

