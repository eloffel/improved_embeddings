introduction to python

lecture #3

computational linguistics
cmpsci 591n, spring 2006

university of massachusetts  amherst

andrew mccallum

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

today   s main points

    check in on hw#1.

   

intro to python computer programming language.

    some examples linguistic applications.

    the nltk toolkit.

    pointers to more python resources.

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

python outline

   

introduction
    python attributes and    why python?   
    running programs
    modules

    basic object types

    numbers and variables
    strings
    lists, tuples
    dictionaries
    control flow
    conditionals
    loops

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

python features

    free.  runs on many different machines.
    easy to read.

    perl =    write only language   

    quick to throw something together.

    naivebayes java vs python
    powerful.  object-oriented.

    the modern choice for compling.
    nltk

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

using python interactively

the easiest way to give python a whirl is interactively.
(human typing in red.  machine responses in black.)

$ python
>>> print    hello everyone!   
hello everyone!
>>> print 2+2
4
>>> myname =    andrew   
>>> myname
   andrew   

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

modules
to save code you need to write it in    les.
module: a text    le containing python code.
example: write the following to    le foo.py
print 25*3                         # multiply by 3
print    compling     +    lecture 3       # concatenate with +
myname =    andrew   
(no leading spaces!)

then run it as follows:
$ python foo.py
75
compling lecture 3
$

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

importing modules

every    le ending in .py is a python module.
modules can contain attributes such as functions.
we can import this module into python.
$ python
>>> import foo
75
compling lecture 3
>>> foo.myname
   andrew   

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

module reloading

importing is expensive--after the    rst import of a module, repeated
imports have no effect (even if you have edited it).
use reload to force python to rerun the    le again.
>>> import foo
75
compling lecture 3

edit foo.py to print 25*4 (instead of 25*3) and reload
>>> reload(foo)
75
compling lecture 3
<module    foo    from    foo.py   >

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

module attributes

consider    le bar.py

university =    umass   
department =    linguistics   

>>> import bar
>>> print bar.department
linguistics

>>> from bar import department
>>> print department
linguistics

>>> from bar import *
>>> print university
umass

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

from copies named attributes from a module, so they are variables in the recipient.

python program structure

    programs are composed of modules
    modules contain statements
    statements contain expressions
    expressions create and process objects

    statements include

    variable assignment, function calls
    control flow, module access
    building functions, building objects
    printing

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

python   s built-in objects

    numbers: integer, floating point
    strings
    lists
    dictionaries
    tuples
    files

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

numbers and variables

    usual number operators, e.g: +, *, /, **
    usual operator precedence:

a * b + c * d = (a * b) + (c * d)
(use parens for clarity and to reduce bugs)

    useful modules: math, random

    variables

    created when first assigned a value
    replaced with their values when used in expressions
    must be assigned before use
    no need to declare ahead of time

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

strings

    string handling in python is easy and

powerful (unlike c, c++, java)

    strings may be written using single quotes:

   this is a python string   

    or double quotes

   and so is this   

    they are the same, it just makes it easy to

include single (or double) quotes:
   he said    what?        or     he   s here.   

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

(learning python, chapter 5)

backslash in strings

backslash \ can be used to escape (protect) certain non-printing or
special characters.
for example, \n is newline, \t is tab.

>>> s =    name\tage\njohn\t21\nbob\t44   
>>> print s
name
john
bob
>>> t =       mary\   s      
>>> print t
   mary   s   

age
21
44

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

triple quote

use a triple quote (          or          ) for a string over severa lines:
>>> s =          this is
... a string
... over 3 lines         
>>> t =          so
... is
... this         
>>> print s
this is
a string
over 3 lines
>>> print t
so
is
this

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

string operations

   concatenation (+)
   length (len)
   repetition (*)
   indexing and slicing ([])

s =    computational   
t =    linguistics   
cl = s +         + t
l = len(cl)
u =    -    * 6
c = s[3]
x = cl[11:16]
y = cl[20:]
z = cl[:-1]

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

#    computational linguistics   
# 25
# ------
# p
#    al li   
#    stics   
#    computational linguistic   

string methods

   methods are functions applied to and associated with objects
   string methods allow strings to be processed in a more sophisticated way

s =    example   
s = s.capitalize()
t = s.lower()
flag = s.isalpha()
s = s.replace(   amp   ,   m   )
i = t.find(   xa   ) 
n = t.count(   e   )

#    example   
#    example   
# true
#    exid113   
# 1
# 2

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

lists in python
    ordered collection of arbitrary objects
    accessed by indexing based on offset from start
    variable length (grows automatically)
    heterogeneous (can contain any type, nestable)
    mutable (can change the elements, unlike strings)

>>> s = [   a   ,    b   ,    c   ]
>>> t = [1, 2, 3]
>>> u = s + t
>>> n = len(u)

    # [   a   ,    b   ,    c   , 1, 2, 3]
    # 6

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

indexing and slicing lists

indexing and slicing work like strings
indexing returns the object at the given offset

   
   
    slicing returns a list
    can use indexing and slicing to change contents

l = [   a   ,    b   ,    c   ,    d   ]
x = l[2]
m = l[1:]
l[2] =    z   
l[0:2] = [   x   ,    y   ]

#    c   
# [   b   ,    c   ,    d   ]
# [   a   ,    b   ,    z   ,    d   ]
# [   x   ,    y   ,    z   ,    d   ]

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

(learning python, chapter 6)

list methods
    lists also have some useful methods
    append adds an item to the list
    extend adds multiple items
    sort orders a list in place

l = [7, 8, 9, 3]
l.sort () 
l.append(6)
l.append([1, 2])
l.extend([   r   ,    s   ])

# [3, 7, 8, 9]
# [3, 7, 8, 9, 6]
# [3, 7, 8, 9, [1, 2]]
# [3, 7, 8, 9, [1, 2],   r   ,    s   ]

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

(learning python, chapter 6)

dictionaries

dictionaries are
    address by key, not by offset
    unordered collections of arbitrary objects
    variable length, heterogeneous

(can contain contain any type of object), nestable
    mutable (can change the elements, unlike strings)

    think of dictionaries as a set of key:value pairs
    use a key to access its value

(learning python, chapter 7)

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

dictionary example

level = {   low   :1,    medium   :5}
x = level[   medium   ]
n = len(level)

# 5
# 2

flag = level.has_key(   low   )
l = level.keys()

# true
# [   low   ,   medium   ]

level[   low   ] = 2      # {   low   :2,    medium   :5}
level[   high   ] = 10    # {   low   :2,    high   :10,    medium   :5}

level.items()
[(   low   ,2), (   high   ,10), (   medium   ,5)]

level.values()
[2, 10, 5]

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

notes on dictionaries

    sequence operations don   t work (e.g. slice)
dictionaries are mappings, not sequences.

    dictionaries have a set of keys:

only one value per key.

    assigning to a new key adds an entry
    keys can be any immutable object, not just

strings.

    dictionaries can be used as records
    dictionaries can be used for sparse matrices.

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

tuples: list lists, but immutable (cannot be changed)

other objects

emptyt = ()
t1 = (1, 2, 3)
x = t1[1]
n = len(t1)
y = t1[1:]

# 2
# 3
# (2, 3)

files: objects with methods for reading and writing to    les

file = open(   myfile   ,    w   )
file.write(   hellow file\n   )
file.close()

f2 = open(   myfile   ,    r   )
s = f2.readline()
t = f2.readline()
all = open(   myfile   ).read()   #entire file as a string
(learning python, chapter 7)

#    hello file\n   
#       

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

conditionals: if tests

course =    syntax   
if course ==    syntax   :

print    bhatt   
print    or potts   

elif course ==    computational linguistics   :

print    mccallum   

else:

print    someone else   

   

indentation determines the block structure
indentation to the left is the only place where whitespace matters in python
indentation enforces readability

   
    tests after if and elif can be just about anything:

false, 0, (), [],       , all count as false
other values count as true.

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

(learning python, chapter 9)

a while loop keeps iterating while the test at the top remains true.

while loops

a = 0
b = 10
while a < b:

print a
a = a + 1

s =    abcdefg   
while len(s) > 0:

print s
s = s[1:]

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

(learning python, chapter 10)

for is used to step through any sequence object

for loops

l = [   a   ,    b   ,    c   ]
for i in l:

print i

sum = 0
for x in [1, 2, 3, 4, 5, 6]:

sum = sum + x

print sum

range() is a useful function:

range(5)
range(2,5)
range(0,6,2)

# [0, 1, 2, 3, 4]
# [2, 3, 4]
# [0, 2, 4]

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

(learning python, chapter 10)

for loops with style
do something to each item in a list (e.g. print its square)

l = [1, 2, 3, 4, 5, 6]  # or l = range(1,7)

# one way to print the square
for x in l:
print x*x

# another way to do it
n = len(l)
for i in range(n):
print l[i]*l[i]

which is better?

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

example: intersecting sequences

the intersection of
[   a   ,    d   ,    f   ,    g   ] and [   a   ,    b   ,    c   ,    d   ]
is  [   a   ,    d   ]

(keyword in)

l1 = [   a   ,    d   ,    f   ,    g   ]
l2 = [   a   ,    b   ,    c   ,    d   ]
# one way
result = []
for x in l1:

for y in l2:

if x == y:

result.append(x)

# or, alternatively
result = []
for x in l1:

if x in l2:

result.append(x)

# result == [   a   ,    d   ]

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

built-in, imported and user-defined functions

    some functions are built-in, e.g.

l = len([   a   ,    b   ,    c   ])

    some functions may be imported, e.g.

import math
from os import getcwd
print getcwd() # which directory am i in?
x = math.sqrt(9)

# 3

    some functions are user-defined, e.g.

def multiply(a, b):

return a * b

print multiply(4,5)
print multiply(   -   ,5)

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

functions in python

    functions are a way to group a set of statements that can

be run more than once in a program.

    they can take parameters as inputs, and can return a

value as output.

    example

def square(x):
return x*x

y = square(5)

# create and assign

# y gets 25

    def creates a function object, and assigns it to a name
   
    adding () after the function   s name calls the function.

return sends an object back to the caller

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

(learning python, chapter 12)

intersection function

def intersect(seq1, seq2)

result = []
for x in seq1:

if x in seq2:

result.append(x)

return result

    putting the code in a function means you can run it many times.
    general -- callers pass any 2 sequences
    code is in one place.  makes changing it easier (if you have to)

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

local variables
variables inside a function are local to that function.

if x in s2:

return result

result.append(x)

result = []
for x in s1:

>>> intersect(s1, s2):
...
...
...
...
...
...
>>> intersect([1,2,3,4], [1,5,6,4])
[1, 4]
>>> result
traceback (most recent call last):
  file    <stdin>   , line 1, in ?
nameerror: name    result    is not defined

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

argument passing

arguments are passed by assigning objects to local names.

x = x + 1
return x

>>> def plusone(x):
...
...
...
>>> plusone(3)
4
>>> x = 6
>>> plusone(x)
7
>>> x
6

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

passing mutable arguments

recall that numbers, strings, tuples are immutable, and that lists and
dictionaries are mutable:

>>> def appendone(s):
s.append(   one   )
...
...
return s
...
>>> appendone([   a   ,    b   ])
[   a   ,    b   ,    one   ]
>>> l = [   x   ,    y   ]
>>> appendone(l)
[   x,    y   ,    one   ]
>>> l
[   x   ,    y   ,    one   ]

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

map

>>> counters = range(1,6)
>>> updated = []
>>> for x in counters:
...
...
>>> updated
[4, 5, 6, 7, 8]

updated.append(x+3)

return x+3

# another way...
>>> def addthree(x):
...
...
# map() applies a function to all elements of a list
>>> map(addthree, counters)
[4, 5, 6, 7, 8]

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

anonymous functions and

list comprehensions

# lambda is a way to define a function with no name
>>> map((lambda x: x+3), counters)
[4, 5, 6, 7, 8]

# a list comprehension does something similar,
# but can offer more flexibility
>>> result = [addthree(x) for x in counters]
>>> result
[4, 5, 6, 7, 8]
>>> [addthree(x) for x in counters if x < 4]
[4, 5, 6]

also check out apply, filter, and reduce.

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

variable number of arguments

sometimes you don   t know how many arguments a function will receive.
*a receives them in a list.

def max (*a):

maximum = 9999999
for x in a:

if a > maximum:
    maximum = a

return maximum

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

optional (named) arguments

sometimes you want to de   ne a function with optional argument.
give a name and a default value.

def exp (x, exponent=2.718):

return exponent ** x

>>> exp(1)
2.718
>>> exp(1, 2.0)
2.0
>>> exp(3, 2.0)
8.0
>>> exp(3, exponent=2.0)
8.0

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

multiple optional arguments

if multiple optional arguments are given, you can pass some and not others.

def exp_plus (x, exponent=2.718, addend=0):

return (exponent ** x) + addend

>>> exp(1)
2.718
>>> exp(1, 2.0)
2.0
>>> exp(1, exponent=2.0)
2.0
>>> exp(1, addend=2.0)
4.718

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

arbitrary number of named arguments

the **argument notation receives all extra arguments in a dictionary.

def showargs (separator, **d):

for key in d.keys():

print str(key)+   :   +str(d[key])+separator,

print

>>> showargs(   ;   , bi=2, tri=3, quad=4)
tri:3;bi:2;quad:4;

(or another way with an assignment to two variables at once!)

def showargs (separator, **d):
for (key,val) in d.items():

print str(key)+   :   +str(val)+separator,

print

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

guido van rossum

grew up in the netherlands.
   december 1989, i was
looking for a    hobby   
programming project that
would keep me occupied
during the week around
christmas....   
...python 2.4... nasa, www
infrastructure, google...

in december 2005, hired by
google.

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

useful module: re

id157

import re

r = re.compile(r   \bdis(\w+)\b   )
s =    then he just disappeared.   
match = r.search(s)
if match:

print    found the regex in the string!   
print    the prefix was   , match.group(1)

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

useful module: random

random number generator and random choices

>>> import random

>>> random.uniform(0,1)
0.16236

>>> list = [   first   ,    second   ,    third   ,    fourth   ]
>>> random.choice(list)
   third   
>>> random.choice(list)
   first   

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

nltk: python natural language toolkit

    nltk is a set of python modules which you can import

into your programs, e.g.:
from nltk_lite.utilities import re_show

    nltk is distributed with several corpora.
    example corpora with nltk:

    gutenberg (works of literature from proj. gutenberg)
    treebank (parsed text from the id32
    brown (1961 million words of pos-tagged text)

    load a corpus (eg gutenberg) using:

>>> from nltk_lite.corpora import gutenberg
>>> print gutenberg.items
[   autsen-emma   ,    austen-persuasion   ,...]

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

simple corpus operations

    simple processing of a corpus includes id121

(splitting the text into word tokens), text id172 (eg
by case), and word stats, tagging and parsing.

    count the number of words in    macbeth   
from nltk_lite.corpora import gutenberg
nwords = 0
for word in gutenberg.raw(   shakespeare-macbeth   ):

nwords += 1

print nwords

    gutenberg.raw(textname) is an iterator, which

behaves like a sequence (eg a list) except it returns
elements one at a time as required.

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

richer corpora

    the gutenberg corpus is tokenized as a sequence of words

with no further structure.

    the brown corpus has sentences marked, and is stored as a

list of sentences, where a sentence is a list of word tokens.
we can use the extract function to obtain individual
sentences
from nltk_lite.corpora import brown
from nltk_lite.corpora import extract
firstsentence = extract(0, brown.raw(   a   ))
# [   the   ,    fulton   ,    county   ,    grand   ,    jury   ...]

    part-of-speech tagged text can also be extracted:

taggedfirstsentence = extract(0, brown.tagged(   a   ))
# [(   the   ,    at   ), (   fulton   ,    np-tl   ),
   (   county   ,    nn-tl   )...

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

parsed text

parsed text from the id32 can also be accessed

>>> from nltk_lite.corpora import treebank
>>> parsedsent = extract(0, treebank.parsed())
>>> print parsedsent
>>> print parsedsent
(s:

(np-sbj:

(vp:

(np: (nnp: 'pierre') (nnp: 'vinken'))
(,: ',')
(adjp: (np: (cd: '61') (nns: 'years')) (jj: 'old'))
(,: ','))

(md: 'will')
(vp: (vb: 'join') (np: (dt: 'the') (nn: 'board'))

(pp-clr: (in: 'as') (np: (dt: 'a') (jj: 'nonexecutive')
(nn: 'director'))) (np-tmp: (nnp: 'nov.') (cd: '29'))))
(.: '.'))

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

more python resources

   

   learning python    book.

    nltk python intro for linguists

http://nltk.sourceforge.net/lite/doc/en/programming.html

    others listed at

   resources    link on course home page

    your tas!

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

thank you!

andrew mccallum, umass amherst,
 including material from eqan klein and steve renals, at univ edinburghh

