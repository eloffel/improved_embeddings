string id153

(and intro to id145)

lecture #4

computational linguistics
cmpsci 591n, spring 2006

university of massachusetts  amherst

andrew mccallum

andrew mccallum, umass amherst,
 including material from william cohen

id145

    (not much to do with    programming    in the

cs sense.)

    id145 is ef   cient in    nding

optimal solutions for cases with lots of
overlapping sub-problems.

    it solves problems by recombining solutions

to sub-problems, when the sub-problems
themselves may share sub-sub-problems.

andrew mccallum, umass amherst,
 including material from william cohen

fibonacci numbers

1   1   2   3   5   8   13   21   34 ...

andrew mccallum, umass amherst,
 including material from william cohen

1

andrew mccallum, umass amherst,
 including material from william cohen

calculating fibonacci numbers

f(n) = f(n-1) + f(n-2),

  where f(0)=0, f(1)=1.

non-id145 implementation

def fib(n):
    if n == 0 or n == 1:
        return n
    else:
        return fib(n-1) + fib(n-2)

andrew mccallum, umass amherst,
 including material from william cohen

for fib(8), how many calls to function fib(n)?

dp example:

calculating fibonacci numbers

id145: avoid repeated calls by remembering
function values already calculated.

table = {}
def fib(n):
    global table
    if table.has_key(n):
        return table[n]
    if n == 0 or n == 1:
        table[n] = n
        return n
    else:
        value = fib(n-1) + fib(n-2)
        table[n] = value
        return value

andrew mccallum, umass amherst,
 including material from william cohen

dp example:

calculating fibonacci numbers

...or alternately, in a list instead of a dictionary...

def fib(n):
    table = [0] * (n+1)
    table[0] = 0
    table[1] = 1
    for i in range(2,n+1):
        table[i] = table[i-2] + table[i-1]
    return table[n]

we will see this pattern many more times in this course:
1. create a table (of the right dimensions to describe our problem.
2. fill the table, re-using solutions to previous sub-problems.

andrew mccallum, umass amherst,
 including material from william cohen

string id153

given two strings (sequences) return the    distance   
between the two strings as measured by...

...the minimum number of    character edit operations   
needed to turn one sequence into the other.

andrew
amdrewz

1. substitute m to n
2. delete the z
distance = 2

andrew mccallum, umass amherst,
 including material from william cohen

string distance metrics: levenshtein
    given strings s and t

    distance is shortest sequence of edit

commands that transform s to t, (or equivalently s
to t).

    simple set of operations:

    copy character from s over to t
    delete a character in s
    insert a character in t 
    substitute one character for another 

(cost 0)
(cost 1)
(cost 1)
(cost 1)

    this is    levenshtein distance   

andrew mccallum, umass amherst,
 including material from william cohen

levenshtein distance - example

    distance(   william cohen   ,    willliam cohon   )

iws

ll

gap

hoc_mai

e

n

alignment

iw
icccc

hoc_mailll

ccccccc

111111110000

o
s

2

n

c

2

t
edit
op
cost
so far...

andrew mccallum, umass amherst,
 including material from william cohen

alignment is a little bit like a parse.

finding the minimum

what is the minimum number of operations for....?

another fine day in the park

anybody can see him pick the ball

not so easy.... not so clear.
not only are the strings, longer, but is isn   t immediately
obvious where the alignments should happen.
what if we consider all possible alignments by brute force?
how many alignments are there?

andrew mccallum, umass amherst,
 including material from william cohen

dynamic program table for string edit
measure distance between strings park
spake

p

a

r

k

s
p
a
k
e

andrew mccallum, umass amherst,
 including material from william cohen

cij

cij =
the number of edit
operations needed
to align pa with
spa.

id145 to the rescue!

how to take our big problem and chop it into building-block pieces.
    given some partial solution, it isn   t hard to figure

out what a good next immediate step is.

    partial solution =

   this is the cost for aligning s up to position i
 with t up to position j.

    next step =

   in order to align up to positions x in s and y in
  t, should the last operation be a substitute,
  insert, or delete?

andrew mccallum, umass amherst,
 including material from william cohen

dynamic program table for string edit
measure distance between strings park
spake

edit operations
for turning
spake
into
park

s
p
a
k
e

andrew mccallum, umass amherst,
 including material from william cohen

p

a

r

k

delete

insert

substitute

dynamic program table for string edit
measure distance between strings park
spake

r
c04
c13
c23

ap
c03
c02
c11
c12
c22
c21
???
c31

k
c05
c14
c24

c00
c10
c20
c30

s
p
a
k
e

andrew mccallum, umass amherst,
 including material from william cohen

dynamic program table for string edit

r
c04
c13
c23

ap
c03
c02
c11
c12
subst
delete
c22
c21
insert
???
c31

c00
c10
c20
c30

k
c05
c14
c24

s
p
a
k
e

d(i,j) = score of best alignment from s1..si to t1..tj

= min

d(i-1,j-1), if si=tj        //copy
d(i-1,j-1)+1, if si!=tj  //substitute
d(i-1,j)+1                   //insert
d(i,j-1)+1                   //delete

andrew mccallum, umass amherst,
 including material from william cohen

computing levenshtein distance - 2

d(i,j) = score of best alignment from s1..si to t1..tj

= min

d(i-1,j-1) + d(si,tj)   //subst/copy
d(i-1,j)+1                 //insert
d(i,j-1)+1                 //delete

(simplify by letting d(c,d)=0 if c=d, 1 else)

also let d(i,0)=i (for i inserts) and d(0,j)=j

andrew mccallum, umass amherst,
 including material from william cohen

dynamic program table initialized

ap
1
2

r
3

k
4

?

0
1
2
3
4
5

s
p
a
k
e

d(i,j) = score of best alignment from s1..si to t1..tj
d(i-1,j-1)+d(si,tj)      //substitute
d(i-1,j)+1                   //insert
d(i,j-1)+1                   //delete

= min

andrew mccallum, umass amherst,
 including material from william cohen

dynamic program table ... filling in

r
3

k
4

ap
1
2
1

0
1
2
3
4
5

s
p
a
k
e

d(i,j) = score of best alignment from s1..si to t1..tj
d(i-1,j-1)+d(si,tj)      //substitute
d(i-1,j)+1                   //insert
d(i,j-1)+1                   //delete

= min

andrew mccallum, umass amherst,
 including material from william cohen

dynamic program table ... filling in

r
3
  3

k
4
 4

ap
1
2
1
2

?

0
1
2
3
4
5

s
p
a
k
e

d(i,j) = score of best alignment from s1..si to t1..tj
d(i-1,j-1)+d(si,tj)      //substitute
d(i-1,j)+1                   //insert
d(i,j-1)+1                   //delete

= min

andrew mccallum, umass amherst,
 including material from william cohen

dynamic program table ... filling in

r
3
  3

k
4
 4

ap
1
2
1
2
1

0
1
2
3
4
5

s
p
a
k
e

d(i,j) = score of best alignment from s1..si to t1..tj
d(i-1,j-1)+d(si,tj)      //substitute
d(i-1,j)+1                   //insert
d(i,j-1)+1                   //delete

= min

andrew mccallum, umass amherst,
 including material from william cohen

dynamic program table ... filling in

ap
1
2
1
2
1
2
2
1
3
2
4
3

r
3
  3
3
2
2
3

k
4
 4
4
3
2
3

0
1
2
3
4
5

s
p
a
k
e

final cost of
aligning all of
both strings.

d(i,j) = score of best alignment from s1..si to t1..tj
d(i-1,j-1)+d(si,tj)      //substitute
d(i-1,j)+1                   //insert
d(i,j-1)+1                   //delete

= min

andrew mccallum, umass amherst,
 including material from william cohen

dp string id153

   def stredit (s1,s2):
    "calculate levenstein id153 for strings s1 and s2."
    len1 = len(s1) # vertically
    len2 = len(s2) # horizontally
    # allocate the table
    table = [none]*(len2+1)
    for i in range(len2+1): table[i] = [0]*(len1+1)
    # initialize the table
    for i in range(1, len2+1): table[i][0] = i
    for i in range(1, len1+1): table[0][i] = i
    # do id145
    for i in range(1,len2+1):
        for j in range(1,len1+1):
            if s1[j-1] == s2[i-1]:
                d = 0
            else:
                d = 1
            table[i][j] = min(table[i-1][j-1] + d,
                              table[i-1][j]+1,
                              table[i][j-1]+1)

andrew mccallum, umass amherst,
 including material from william cohen

remebering the alignment (trace)

d(i,j) = min

d(i-1,j-1) + d(si,tj)   //subst/copy
d(i-1,j)+1                 //insert
d(i,j-1)+1                 //delete

a trace indicates
where the min
value came from,
and can be used to
find edit
operations and/or
a best alignment
(may be more than 1)

c
 1
 1
 2
3

4

5

o
2

2

3
2
3

4

m
c
c
o
h
n

h
3

3

3

3
 2
3

e
4

4

4

4
 3
3

n
5

5

5

5

4
 3

andrew mccallum, umass amherst,
 including material from william cohen

three enhanced variants

    needleman-munch

    variable costs

    smith-waterman

    find longest    soft matching    subsequence

    affine gap distance

    make repeated deletions (insertions) cheaper

    (implement one for homework?)

andrew mccallum, umass amherst,
 including material from william cohen

needleman-wunch distance
d(i-1,j-1) + d(si,tj)   //subst/copy
d(i-1,j) + g                 //insert
d(i,j-1) + g                 //delete

d(i,j) = min

d(c,d) is an arbitrary
distance function on
characters (e.g. related
to typo frequencies,

amino acid

substitutibility, etc)

g =    gap cost   

william cohen

wukkuan cigeb

andrew mccallum, umass amherst,
 including material from william cohen

smith-waterman distance

    instead of looking at each sequence in its

entirety, this compares segments of all
possible lengths and chooses whichever
maximize the similarity measure.

    for every cell the algorithm calculates all

possible paths leading to it.  these paths can
be of any length and can contain insertions
and deletions.

andrew mccallum, umass amherst,
 including material from william cohen

smith-waterman distance

d(i,j) = min

g = 1
d(c,c) =  -2
d(c,d) = +1

0                                //start over
d(i-1,j-1) + d(si,tj)    //subst/copy
d(i-1,j) + g               //insert
d(i,j-1) + g               //delete

oc
0
 -1
 -1
-4
-3
 -2

0m
c
-2
c
-2
o
-1
h
0
n
0

h
0
0
0

-3
-6
-5

e
0
0
0

 -2
-5
-5

n
0
0
0

-1
-3
-7

andrew mccallum, umass amherst,
 including material from william cohen

example output from python

          s   '   a   l   l   o   n   g   e   r
      0   1   2   3   4   5   6   7   8   9  10
  l   1   0   0   0   0 * 0   0   0   0   0   0
  o   2   0   0   0   0   0 *-2  -1   0   0   0
  u   3   0   0   0   0   0 *-1  -1   0   0   0
  n   4   0   0   0   0   0   0 *-3  -2  -1   0
  g   5   0   0   0   0   0   0  -2 *-5  -4  -3
  e   6   0   0   0   0   0   0  -1  -4 *-7  -6

(my implementation of hw#2, task choice #2. -mccallum)

andrew mccallum, umass amherst,
 including material from william cohen

affine gap distances

    smith-waterman fails on some pairs that

seem quite similar:

william w. cohen

william w.    don   t call me dubya    cohen

intuitively, a single long insertion is    cheaper   
intuitively, single long insertions are    cheaper   

than a lot of short insertions
than a lot of short insertions

andrew mccallum, umass amherst,
 including material from william cohen

affine gap distances - 2

    idea:

    current cost of a    gap    of n characters: ng
    make this cost: a + (n-1)b, where a is cost of

   opening    a gap, and b is cost of    continuing    a
gap.

andrew mccallum, umass amherst,
 including material from william cohen

affine gap distances - 3

d(i,j) = max

d(i-1,j-1) + d(si,tj)
d(i-1,j-1) + d(si,tj)   //subst/copy
d(i-1,j)-1                 //insert
is(i-1,j-1) + d(si,tj)
d(i,j-1)-1                 //delete 
it(i-1,j-1) + d(si,tj)

is(i,j) = max

d(i-1,j) - a
is(i-1,j) - b

best score in which si
is aligned with a    gap   

it(i,j) = max

d(i,j-1) - a
it(i,j-1) - b

best score in which tj
is aligned with a    gap   

andrew mccallum, umass amherst,
 including material from william cohen

affine gap distances as automata

-d(si,tj)

d

-d(si,tj)

-a
-a

is

it

-b

-b

-d(si,tj)

andrew mccallum, umass amherst,
 including material from william cohen

generative version of affine gap

automata (bilenko&mooney, techreport 02)

id48 emits pairs: (c,d) in
state m, pairs (c,-) in state
d, and pairs (-,d) in state i.
for each state there is a
multinomial distribution
on pairs.
the id48 can trained with
em from a sample of pairs
of matched strings (s,t)

e-step is forward-backward; m-step uses some ad hoc smoothing

andrew mccallum, umass amherst,
 including material from william cohen

affine gap edit-distance learning:
experiments results (bilenko & mooney)

experimental method:  parse records into fields; append a
few key fields together; sort by similarity; pick a
threshold t and call all pairs with distance(s,t) < t
   duplicates   ; picking t to maximize f-measure.

andrew mccallum, umass amherst,
 including material from william cohen

affine gap edit-distance learning:
experiments results (bilenko & mooney)

andrew mccallum, umass amherst,
 including material from william cohen

affine gap edit-distance learning:
experiments results (bilenko & mooney)

precision/recall for mailing dataset duplicate detection

andrew mccallum, umass amherst,
 including material from william cohen

affine gap distances     experiments

(from mccallum, nigam,ungar kdd2000)

    goal is to match data like this:

andrew mccallum, umass amherst,
 including material from william cohen

homework #2

    the assignment

    start with my stredit.py code
    make some modifications
    write a little about your experiences

    some possible modifications

    implement needleman-wunch, smith-waterman, or affine gap

distance.

    create a little spell-checker: if entered word isn   t in the dictionary,

return the dictionary word that is closest.

    change implementation to operate on sequences of words rather

than characters... get an online translation dictionary, and find
alignments between english & french or english & russian!

    try to learn the parameters of the function from data. (tough.)

andrew mccallum, umass amherst,
 including material from william cohen

