regular languages

lecture #2

introduction to natural language processing

cmpsci 585, fall 2007
university of massachusetts  amherst

andrew mccallum

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

today   s main points

    a brief history

    what are regular languages, finite state automata and

id157?

    writing id157 (in python)
    examples on several large natural language corpora

    finite-state transducers, and morphology

    homework assignment #1

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

some brief history: 1950s

    early cl on machines less powerful than pocket

calculators.

    foundational work on automata, formal languages,

probabilities and id205.

    first speech systems (davis et al, bell labs).
    mt heavily funded by military, but basically just word

substitution programs.

    little understanding of natural language syntax,

semantics, pragmatics.

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

some brief history: 1960s

    alvey report (1966) ends funding for mt in america -

the lack of real results realized

    eliza (mit): fraudulent nlp in a simple pattern

matcher psychotherapist
    it   s true, i am unhappy.
    do you think coming here will make you not to be unhappy?
    i need some help; that much is certain.
    what would it mean to you if you got some help?
    perhaps i could earn to get along with my mother.
    tell me more about your family.

    early corpora: brown corpus (kudera and francis)

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

some brief history: 1970s

    winograd   s shrdlu (1971): existence proof of nlp

(in tangled lisp code).

    could interpret questions, statements commands.

    which cube is sitting on the table?
    the large green one which supports the red pyramid.
    is there a large block behind the pyramid?
    yes, three of them.  a large red one, a large green cube,

and the blue one.

    put a small one onto the green cube with supports a

pyramid.

    ok.

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

some brief history: 1980s

    procedural --> declarative (including logic

programming)

    separation of processing (parser) from description of

linguistic knowledge.

    representations of meaning: procedural semantics

(shrdlu), semantic nets (schank), logic (perceived
as answer; finally applicable to real languages
(montague)

    perceived need for kr (lenat and cyc)
    working mt in limited domains (meteo)

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

some brief history: 1990s

    resurgence of finite-state methods for nlp: in

practice they are incredibly effective.

    id103 becomes widely usable.
    large amounts of digital text become widely available

and reorient the field.  the web.

    resurgence of probabilistic / statistical methods, led

by a few centers, especially ibm (speech, parsing,
candide mt system), often replacing logic for
reasoning.

    recognition of ambiguity as key problem.
    emphasis on machine learning methods.

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

some brief history: 2000s

    a bit early to tell!  but maybe:

    continued surge in id203, bayesian methods

of evidence combination, and joint id136.

    emphasis on meaning and knowledge

representation.

    emphasis on discourse and dialog.
    strong integration of techniques, and levels:

brining together statistical nlp and sophisticated
linguistic representations.

    increased emphasis on unsupervised learning.

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

noam chomsky
1928 -

id154
generative grammar
liberatarian-socialist
the most cited person alive.

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

a language

some sentences in the language
    the man took the book.
    the purple giraffe hopped through the clouds.
    this sentence is false.

from [chomsky, 1956], his    rst context-free parse tree.

some sentences not in the language
    *the girl, the sidewalk, the chalk, drew.
    *backwards is sentence this.
    *lodvad tlhingan hol ghojmoh be.

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

compact description of a language

    start with some    non-terminal    symbol, s.

    expand that symbol, using some substitution

rules.

    ...keep applying rules until all non-terminals

are expanded to terminals.

    the string of terminals is in the sentence.

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

id154

    type 0 languages (turing-equivalent)

rewrite rules a     b
where a, b are any string of terminals and non-terminals

linguistic
example:
atns

    context-sensitive languages

rewrite rules axb     acb
where x is non-terminal and a,b as above

    context-free languages

rewrite rules x     a
where x, a, b as above

    regular languages

rewrite rules x     ay
where x, y are non-terminals and a is a string of  terminals

more detail on all this
again later.

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

tags

psgs

fsas

regular language example

    non-terminals:

    s, x, y, z
    terminals:

    m, o
    rules:

s     mx
x     oy
y     o
y    

    start symbol:

s

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

an expansion:

s
mx
moy
mooy
moooy
mooo

example: sheep language

strings in and out of the example regular language:

   

in the language:
   ba!   ,    baa!   ,    baaaaa!   

    not in the language:
   

   ba   ,    b!   ,    ab!   ,    bbaaa!   ,    alibaba!   

finite-state automata

b

s1

a

s2

a

s3

!

regular expression

baa*

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

s4

double circle
indicates    accept state   

recognizer

    a recognizer for a language is a program that
takes as input a string w and answers    yes    if
w is a sentence in the language, and
answers    no    otherwise.

    we can think of this as a machine that emits

only two possible responses it input.

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

regular languages: related concepts

regular languages
the accepted strings

finite-state automata
machinery for accepting

id157
a way to type the automata

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

finite state automata, more formally
    a finite state automata is a 5-tuple: (q,   , q0, f,   (q,i))

    q : finite set of n states, q0, q1, q2,... qn (non-terminals)
       : finite set of (terminals)
      (q,i) : transition function, given state and input, returns next state

(production rules)
    q0: the start state
    f: the set of final states

the fsa

q0

b

a

q1

a

q2

!

q3

state marker

q1
b a

input tape

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

a

a

a

!

we will later return to a 
probabilistic version of this
with id48!

transition table,   

state

0
1
2
3

input

b a !
1
        
2
   
   
3
2
   
    
   
   

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

id157

the    foundational    operations
matches

  pattern

concatenation

abc

disjunction

kleene star

a|b
(a|bb)d

a*
c(a|bb)*

abc

a
ad

b
bbd

   a aa aaa ...
ca  cbba

the empty string

id157 / finite-state automata are     closed under these operations   

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

stephen kleene, 1909 - 1994

attended amherst college!
best known for founding the
branch of mathematical logic
known as recursion theory,
together with alonzo church,
kurt godel, alan turing and
others; and for inventing
id157.
   kleeneliness is next to
godeliness.   

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

practical applications of regex   s

    web search
    word processing, find, substitute
    validate fields in a database (dates, email addr, urls)
    searching corpus for linguistic patterns

    and gathering stats...

    finite state machines extensively used for

    acoustic modeling in id103
    information extraction (e.g. people & company names)
    morphology
    ...

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

two types of characters in res

    literal

itself.

    every normal text character is an re, and denotes

    meta-characters

in various ways

    special characters that allow you to combine res

    example:

a denotes a
a* denotes    or a or aa or aaa or ...

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

basic id157
matches

  pattern

character concat

went

went

alternatives

disjunc. negation
wildcard char

loops & skips
one or more
zero or one

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

(go|went)
[aeiou]
[^aeiou]
.

a*
a+
colou?r

go    went
a  o  u
b  c  d  f  g
a  z  &

   a aa aaa ...
a  aa  aaa
color  colour

more fancy id157

    special characters

    \t
    \n

tab
newline

    aliases (shorthand)

    \d
    \d
    \w
    \w
    \s
    \w

    examples

digits
non-digits
alphabetic
non-alphabetic
whitespace
alphabetic

 \v
 \r

vertical tab
carriage return

[0-9]
[^0-9]
[a-za-z]
[^a-za-z]
[\t\n\r\f\v]
[a-za-z]

    \d+ dollars
    \w*oo\w*

3 dollars, 50 dollars, 982 dollars
food, boo, oodles

    escape character

    \ is the general escape character; e.g. \. is not a wildcard,

but matches a period .

    if you want to use \ in a string it has to be escaped \\

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

yet more fancy id157

    anchors.  aka,    zero width characters   .
    they match positions in the text.

beginning of line
end of line

word boundary, i.e. location with \w on one
side but not on the other.
negated word boundary, i.e. any location
that would not match \b

    ^
    $
    \b

    \b

    examples:
    \bthe\b

the together

    counters {1}, {1,2}, {3,}

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

even more fancy id157

    grouping

    a (good|bad) movie
    he said it (again and )*again.

    parens also indicate registers (saved contents)

    b(\w+)h\1

matches boohoo and baha, but not boohaa
the digit after the \ indicates which of multiple paren
groups, as ordered by when then were opened.

    grouping without the cost of register saving

    he went (?:this|that) way.

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

extra fancy id157

    non-consuming tests

    (?=...) - positive lookahead
    (?!...) - negative lookahead
    (?<=...) - positive lookbehind
    (?<!...) - negative lookbehind

    example

    (?<=[hh]e) \w+ed (?=\w+ly)

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

yowza! id157

    multi-line, with comments, etc.

from = re.compile("""

^from: 
\s*
(?p<user>\w+)
@
(?p<domain> 
\s+)
\s

# anchor to start of line 
# maybe some spaces
#    user   : group of word characters

# the    domain   :
# some non-space characters
# finally, a space character

""",re.verbose)

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

oral quiz:

describe the strings these will accept

    ab+a

    (ab)*

    ([^aeiou][aeiou])\1

    \bdis\w+\b...

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

hands-on!

with little strings

   

re_show function from nltk

import re
def re_show(regexp, string):
 print re.compile(regexp, re.m).sub("{\g<0>}", string.rstrip())

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

hands-on!

investigating corpora

    regexs.py
    regexcount.py
    you need python version 2.4 or higher.

    corpora

    200k+ words of wall street journal articles
    3 books by jane austin
    several plays by william shakespeare
    several books by mark twain
    and various other text from walt whitman, & others...

these are available on the course web site

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

eliza (weizenbaum 1966)

user: men are all alike.
eliza: in what way?
user: they   re always bugging us about something or other.
eliza: can you think of a specific example?
user: well, my boyfriend made me come here.
eliza: your boyfriend made you come here.
user: he say   s i   m depressed much of the time.
eliza: i   m sorry to hear that you are depressed.

implemented with regular expression substitution!
s/.* i   m (depressed|sad) .*/i am sorry to hear that you are \1/
s/.* always .*/can you think of a specific example?/

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

non-deterministic fsas

a

q1

b

q0

more than one outgoing transition on    a   

a

!

q2

q3

input

b a !

1
   
   
   

        
1,2    
3
   
    
   

transition relation, rather
than transition function.

state

0
1
2
3

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

non-deterministic finite-state automata

 as    recognizers   

    the problem:

when processing a string, we might follow the
wrong transition, and reject the string when
we should have accepted it!

one solution: turn the nfa into a dfa...  (see cmpsci 250)

    ubiquitous problem in this course:

how to efficiently search through various
possible    paths    (parses) to find
one that works / the most likely one, etc.

how do
humans do
this?!

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

solutions

    look-ahead

    peek ahead to help decide which path to take.

    parallelism

    at each choice, take every path in parallel.

    backup

    at each choice point, mark the input / state
    if we fail, go back and try another path

need a stack (or queue) of markers

    marker =    machine state   
    collection of current state & markers =    search state   
    depth-first search (or breadth-first search).

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

   smart    heuristic search,    a*   .  see cmpsci 383
(arti   cial intelligence)

re / fsa equivalence proof

    how would you do it?

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

morphology

the study of the sub-word units of meaning.

disconnect
   not   

   to attach   

making a word plural:
  if word is regular, 
  if word ends in y,
  if word ends in x,
  . . .

add s
change y to i, and add s
add -es

examples:
dog
baby
fox

dogs
babies
foxes

recognizing that foxes breaks down into morphemes fox and -es
called morphological parsing
parsing = taking an input and producing some sort of structure for it.

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

morphology, briefly

    morpheme: minimal meaning-bearing unit

    stem:    main    morpheme of a word, e.g. fox
    affixes: add    additional    meanings, e.g. +es

includes prefixes, suffixes, infixes, circumfixes,
e.g. un-, -ly, ... ...

    concatenative morphology, non-concatenative

    inflection: stem+morpheme in the same class as stem.

    e.g. nouns plural +s, possessive +   s

    derivation: stem+morpheme in different class...

    e.g. +ly makes and adverb from an adjective

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

morphological parsing with
finite state transducers

    we want a system that given foxes

will output a parse: fox+es or fox +pl

    fsas will take input, but not produce output

(other than    accept   /   reject   )

    solution: finite state transducers (fst):

    a fst is a two-tape automaton that recognizes or

generates pairs of strings.

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

example finite-state transducer

fsts can be used to transform a word surface form into morphemes
(or vice-versa!)
an entire lexicon can be encoded as a fst.

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

fst transition table

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

fragment of a lexicon in a fst

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

further closure properties of fsas

regular languages are also closed under the following operations
    reversal: if l1 is regular, so is the language

consisting of the set of all reversals of strings in l1.
    intersection: if l1 and l2 are regular languages, so

is the language consisting of all strings that are in
both l1 and l2.

    difference: if l1 and l2 are regular languages, so is

the language consisting of all strings in l1 that are
not in l2.

    complementation: if l1 is a regular language, so is

the set of all possible strings that are not in l1.

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

announcement:

undergraduate cmpssci meeting

       first friday   

    curriculum information
    spring events
    jobs/co-ops/research positions in and out of the

department

    library carrels
    and more!

    friday, september 7, 2007

(3pm for new or transfer students)
3:30 - 5:00 pm
cmps 150/151 (computer science building)
refreshments will be served.

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

next class (tuesday feb 7)

    learning python

    variables, operators, conditionals, iteration, etc.
    functions, classes, modules

    gather statistics from python-ized id32.
    calculate statistics from 200k words of wsj
    implement a phrase structure grammar, and

generate sentences from it.

    install python, and bring your laptop with you!

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

first homework, assigned today!

    essentially:

    write some id157
    run them on some corpora
    write ~1 page about your experience and findings
    extra credit for creativity and interesting application!

    feel free to come do it in office hours!

    due next thursday, one week from today.

(don   t wait until wednesday to install python!

    recommended schedule:

    idea by saturday
    coded/tested by monday
    write-up by wednesday

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

office hours, cs building, rm 264

    monday, ??
    tuesday, ??
    wednesday, am and evening
    thursday, 4-5pm
    friday, 2-4pm

    if you can   t make any of these times, let me

know.

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

aside: grammar induction

    also called    grammatical id136   
       learning    finite-state automata from many

examples of strings in (and out of) the language.

    http://www.info.ucl.ac.be/~pdupont/pdupont/gram.html
    learning fsa and id18 structure from data!

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

thank you!

andrew mccallum, umass amherst,
 including material from chris manning and jason eisner

