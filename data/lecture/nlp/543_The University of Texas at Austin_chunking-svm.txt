chunking with support vector machines

taku kudo and yuji matsumoto

graduate school of information science,
nara institute of science and technology

  taku-ku,matsu  @is.aist-nara.ac.jp

abstract

we apply support vector machines (id166s) to
identify english base phrases (chunks).
id166s
are known to achieve high generalization perfor-
mance even with input data of high dimensional
feature spaces. furthermore, by the kernel princi-
ple, id166s can carry out training with smaller com-
putational overhead independent of their dimen-
sionality. we apply weighted voting of 8 id166s-
based systems trained with distinct chunk repre-
sentations. experimental results show that our ap-
proach achieves higher accuracy than previous ap-
proaches.

introduction

1
chunking is recognized as series of processes    
   rst identifying proper chunks from a sequence of
tokens (such as words), and second classifying these
chunks into some grammatical classes. various
nlp tasks can be seen as a chunking task. exam-
ples include english base noun phrase identi   cation
(base np chunking), english base phrase identi   ca-
tion (chunking), japanese chunk (bunsetsu) identi-
   cation and named entity extraction. id121
and part-of-speech tagging can also be regarded as
a chunking task, if we assume each character as a
token.

machine learning techniques are often applied to
chunking, since the task is formulated as estimating
an identifying function from the information (fea-
tures) available in the surrounding context. various
machine learning approaches have been proposed
for chunking (ramshaw and marcus, 1995; tjong
kim sang, 2000a; tjong kim sang et al., 2000;
tjong kim sang, 2000b; sassano and utsuro, 2000;
van halteren, 2000).

conventional machine learning techniques, such
as hidden markov model (id48) and maximum
id178 model (me), normally require a careful
feature selection in order to achieve high accuracy.

they do not provide a method for automatic selec-
tion of given feature sets. usually, heuristics are
used for selecting effective features and their com-
binations.

new statistical learning techniques such as sup-
port vector machines (id166s) (cortes and vap-
nik, 1995; vapnik, 1998) and boosting(freund and
schapire, 1996) have been proposed. these tech-
niques take a strategy that maximizes the margin
between critical samples and the separating hyper-
plane. in particular, id166s achieve high generaliza-
tion even with training data of a very high dimen-
sion. furthermore, by introducing the kernel func-
tion, id166s handle non-linear feature spaces, and
carry out the training considering combinations of
more than one feature.

in the    eld of natural language processing, id166s
are applied to text categorization and syntactic de-
pendency structure analysis, and are reported to
have achieved higher accuracy than previous ap-
proaches.(joachims, 1998; taira and haruno, 1999;
kudo and matsumoto, 2000a).

in this paper, we apply support vector machines
to the chunking task. in addition, in order to achieve
higher accuracy, we apply weighted voting of 8
id166-based systems which are trained using dis-
tinct chunk representations. for the weighted vot-
ing systems, we introduce a new type of weighting
strategy which are derived from the theoretical basis
of the id166s.

2 support vector machines
2.1 optimal hyperplane
let us de   ne the training samples each of which
belongs either to positive or negative class as:

        	
    
 
 
           	                  	    ! #"%$
  & $ '#(
 ) 
is a feature vector of the * -th sample repre-
sented by an+ dimensional vector.
(positive("%$ ) or negative(& $ ) class) label of the* -
th sample., is the number of the given training sam-

is the class

	  

small margin

large margin

figure 1: two possible separating hyperplanes

ples. in the basic id166s framework, we try to sep-
arate the positive and negative samples by a hyper-

plane expressed as:  -/.(  0"2143656  -7 8 9 0  1: 
 ; . id166s    nd an    optimal    hyperplane (i.e. an
optimal parameter set for-< =1 ) which separates the

training data into two classes. what does    optimal   
mean? in order to de   ne it, we need to consider
the margin between two classes. figure 1 illus-
trates this idea. solid lines show two possible hyper-
planes, each of which correctly separates the train-
ing data into two classes. two dashed lines paral-
lel to the separating hyperplane indicate the bound-
aries in which one can move the separating hyper-
plane without any misclassi   cation. we call the dis-
tance between those parallel dashed lines as mar-
gin. id166s    nd the separating hyperplane which
maximizes its margin. precisely, two dashed lines

to maximize this margin, we should minimize

lent to solving the following optimization problem:

) can be expressed as:-?.  @"a1b3
and margin (>
-ji .
$d 
36edfhg
i=-ki . in other words, this problem becomes equiva-
i]-ji
  -z[3
lnmpoqmsrtmvuw9x

	  fgh  -i. ) j)"21lk m6$  
3n$d  
 
 
  
^`_`aqb
wcd8dfe9x

the training samples which lie on either of two
dashed lines are called support vectors. it is known
that only the support vectors in given training data
matter. this implies that we can obtain the same de-
cision function even if we remove all training sam-
ples except for the extracted support vectors.

in practice, even in the case where we cannot sep-
arate training data linearly because of some noise
in the training data, etc, we can build the sep-
arating linear hyperplane by allowing some mis-
classi   cations. though we omit the details here, we
can build an optimal hyperplane by introducing a
, which trades off between
the training error and the magnitude of the margin.
furthermore, id166s have a potential to carry out
the non-linear classi   cation. though we leave the

soft margin parametero

(1)

o%  

"6  

risk is bounded by

build an optimal separating hyperplane which takes

details to (vapnik, 1998), the optimization problem
can be rewritten into a dual form, where all feature
vectors appear in their dot products. by simply sub-
in dual form

handle non-linear hypotheses. among many kinds
of id81s available, we will focus on the

2.2 generalization ability of id166s
statistical learning theory(vapnik, 1998) states

stituting every dot product of )  and 0p
     r f 0p  , id166s can
with a certain id81q
 t ) r f uplv3w   ) d.x 0py"z$ f{ .
s -th polynomial kernel:q
use ofs -th polynomial id81s allows us to
into account all combinations of features up tos .
that training error (empirical risk)|:} and test error
(risk)| ~ hold the following theorem.
theorem 1 (vapnik) if  
  n  6,
that class, with a id203 of at least$  &    
"6$ [&k  
    

is the vc dimen-
sion of the class functions implemented by some ma-
chine learning algorithms, then for all functions of
, the

is a non-negative integer called the vapnik
chervonenkis (vc) dimension, and is a measure of
the complexity of the given decision function. the
r.h.s. term of (1) is called vc bound. in order to
minimize the risk, we have to minimize the empir-
ical risk as well as vc dimension. it is known that

| ~     |
where  
the following theorem holds for vc dimension  
and margin>
theorem 2 (vapnik) suppose+ as the dimension
as the margin, and  
of given training samples>
ing sample, then vc dimension   of the id166s are
  "!$

in order to minimize the vc dimension  
to maximize the margin>
theorem 3 (vapnik) suppose|
1            9  
  #     )  %     =     #     
     
      
1     4     %      #  
  d  d  
*r+0*x+`  
  %  

estimated by leave-one-out procedure,
bounded as

as the smallest diameter which encloses all train-

, we have
, which is exactly the

vapnik gives an alternative bound for the risk.

is an error rate
is

  n     
  <  h  

strategy that id166s take.

(vapnik, 1998).

r%mpo

bounded by

      

(2)

(3)

c
>
y
 
\
\
*
,
 

}
  
o
\
 
  
  
,
 
 
  
\
f
>
\
 
+
 
|
 
|
 
  
,

leave-one-out procedure is a simple method to ex-
amine the risk of the decision function        rst by
removing a single sample from the training data, we
construct the decision function on the basis of the
remaining training data, and then test the removed

is a natural consequence bearing in mind that sup-
port vectors are the only factors contributing to the
   nal decision function. namely, when the every re-
moved support vector becomes error in leave-one-

sample. in this fashion, we test all, samples of the
training data using, different decision functions. (3)
  becomes the r.h.s. term of (3). in
out procedure,|

practice, it is known that this bound is less predic-
tive than the vc bound.

3 chunking
3.1 chunk representation
there are mainly two types of representations for
proper chunks. one is inside/outside representa-
tion, and the other is start/end representation.

1. inside/outside

this representation was    rst
introduced in
(ramshaw and marcus, 1995), and has been
applied for base np chunking. this method
uses the following set of three tags for repre-
senting proper chunks.

i current token is inside of a chunk.
o current token is outside of any chunk.
b current token is the beginning of a chunk
which immediately follows another chunk.

tjong kim sang calls this method as iob1
representation, and introduces three alternative
versions     iob2,ioe1 and ioe2 (tjong kim
sang and veenstra, 1999).
iob2 a b tag is given for every token which
exists at the beginning of a chunk.
other tokens are the same as iob1.

ioe1 an e tag is used to mark the last to-
ken of a chunk immediately preceding
another chunk.

ioe2 an e tag is given for every token

which exists at the end of a chunk.

2. start/end

this method has been used for the japanese
named entity extraction task, and requires the
following    ve tags for representing proper
chunks(uchimoto et al., 2000) 1.

in
early
trading
in
busy
hong
kong
monday
,
gold
was

iob1
o
i
i
o
i
i
i
b
o
i
o

iob2
o
b
i
o
b
i
i
b
o
b
o

ioe1
o
i
i
o
i
i
e
i
o
i
o

ioe2
o
i
e
o
i
i
e
e
o
e
o

start/end

o
b
e
o
b
i
e
s
o
s
o

table 1: example for each chunk representation

b current token is the start of a chunk con-

sisting of more than one token.

e current token is the end of a chunk consist-

ing of more than one token.

i current token is a middle of a chunk con-

sisting of more than two tokens.

s current token is a chunk consisting of only

one token.

o current token is outside of any chunk.

examples of these    ve representations are shown

in table 1.

if we have to identify the grammatical class of
each chunk, we represent them by a pair of an
i/o/b/e/s label and a class label. for example, in
iob2 representation, b-vp label is given to a to-
ken which represents the beginning of a verb base
phrase (vp).

3.2 chunking with id166s
basically, id166s are binary classi   ers, thus we must
extend id166s to multi-class classi   ers in order to
classify three (b,i,o) or more (b,i,o,e,s) classes.
there are two popular methods to extend a binary
classes. one is one
classi-
   ers so as to separate one class from all others. the
other is pairwise classi   cation. the idea is to build

classi   cation task to that ofq
class vs. all others. the idea is to buildq
q    

&!$ ffde classi   ers considering all pairs of

classes, and    nal decision is given by their weighted
voting. there are a number of other methods to ex-
tend id166s to multiclass classi   ers. for example,
dietterich and bakiri(dietterich and bakiri, 1995)
and allwein(allwein et al., 2000) introduce a uni-
fying framework for solving the multiclass problem

1originally, uchimoto uses c/e/u/o/s representation.
however we rename them as b/i/o/e/s for our purpose, since

we want to keep consistency with inside/start (b/i/o) represen-
tation.

 
q
    

by reducing them into binary models. however, we
employ the simple pairwise classi   ers because of
the following reasons:

(1)

in general, id166s require  

training cost (where+

is the size of training data).
thus, if the size of training data for individual bi-
nary classi   ers is small, we can signi   cantly reduce
the training cost. although pairwise classi   ers tend
to build a larger number of binary classi   ers, the
training cost required for pairwise method is much
more tractable compared to the one vs. all others.

+h  

(2) some experiments (kre  el, 1999) report that
a combination of pairwise classi   ers performs bet-
ter than the one vs. all others.

  = 

direction

word:
pos:
chunk:

for the feature sets for actual training and classi-
   cation of id166s, we use all the information avail-
able in the surrounding context, such as the words,
their part-of-speech tags as well as the chunk labels.
more precisely, we give the following features to

is
is the (extended) chunk

parsing direction (from right to left) by using two
chunk tags which appear to the r.h.s. of the current

which parses from left to right as forward parsing,
and the method which parses from right to left as
backward parsing.

identify the chunk label  =  for the* -th word:
    0 
 p  ) 
 p    
    
 h  0 
 p    
 p  ) 
    
  =       
  =    
  is the word appearing at* -th position,  r 
here,  
  , and  = 
the pos tag of  
label for* -th word. in addition, we can reverse the
 p  
 p  ) 
 =  
token (  
\ ). in this paper, we call the method
since the preceding chunk labels (       0      =    
forward parsing ,  = p        = p  

for
for backward parsing)
are not given in the test data, they are decided dy-
namically during the tagging of chunk labels. the
technique can be regarded as a sort of dynamic pro-
gramming (dp) matching, in which the best answer
is searched by maximizing the total certainty score
for the combination of tags. in using dp matching,
we limit a number of ambiguities by applying beam
search with width
. in conll 2000 shared task,
the number of votes for the class obtained through
the pairwise voting is used as the certain score for
id125 with width 5 (kudo and matsumoto,
2000a). in this paper, however, we apply determin-
istic method instead of applying id125 with
keeping some ambiguities. the reason we apply de-
terministic method is that our further experiments

and investigation for the selection of beam width
shows that larger beam width dose not always give a
signi   cant improvement in the accuracy. given our
experiments, we conclude that satisfying accuracies
can be obtained even with the deterministic parsing.
another reason for selecting the simpler setting is
that the major purpose of this paper is to compare
weighted voting schemes and to show an effective
weighting method with the help of empirical risk
estimation frameworks.

3.3 weighted voting
report that they achieve
tjong kim sang et al.
higher accuracy by applying weighted voting of sys-
tems which are trained using distinct chunk rep-
resentations and different machine learning algo-
rithms, such as mbl, me and igtree(tjong kim
sang, 2000a; tjong kim sang et al., 2000).
it
is well-known that weighted voting scheme has a
potential to maximize the margin between critical
samples and the separating hyperplane, and pro-
duces a decision function with high generalization
performance(schapire et al., 1997). the boosting
technique is a type of weighted voting scheme, and
has been applied to many nlp problems such as
parsing, part-of-speech tagging and text categoriza-
tion.

in our experiments, in order to obtain higher ac-
curacy, we also apply weighted voting of 8 id166-
based systems which are trained using distinct
chunk representations. before applying weighted
voting method,    rst we need to decide the weights
to be given to individual systems. we can obtain
the best weights if we could obtain the accuracy for
the    true    test data. however, it is impossible to
estimate them.
in boosting technique, the voting
weights are given by the accuracy of the training
data during the iteration of changing the frequency
(distribution) of training data. however, we can-
not use the accuracy of the training data for vot-
ing weights, since id166s do not depend on the fre-
quency (distribution) of training data, and can sepa-
rate the training data without any mis-classi   cation
by selecting the appropriate id81 and the
soft margin parameter. in this paper, we introduce
the following four weighting methods in our exper-
iments:

1. uniform weights

we give the same voting weight to all systems.
this method is taken as the baseline for other
weighting methods.

 
+
\
  
 

  
  
  
\
  
  
 
  
  
  
\
  
  
 
  
  
\
\
\
  
2. cross validation

portions, we em-

dividing training data into
ploy the training by using
in this
then evaluate the remaining portion.
individual accuracy.
fashion, we will have
final voting weights are given by the average
of these

&2$ portions, and

accuracies.

3. vc-bound

by applying (1) and (2), we estimate the lower
bound of accuracy for each system, and use
the accuracy as a voting weight. the voting

weight is calculated as:   
the value of  

, which represents the smallest
diameter enclosing all of the training data, is
approximated by the maximum distance from
the origin.

3  $ &   

s .

1  

4. leave-one-out bound

by using (3), we estimate the lower bound of
the accuracy of a system. the voting weight is

calculated as:  

as follows:

3i$ &

  .

the procedure of our experiments is summarized

1. we convert the training data into 4 representa-

tions (iob1/iob2/ioe1/ioe2).

2. we consider

two parsing directions (for-
ward/backward) for each representation, i.e.

e  36   systems for a single training data set.

then, we employ id166s training using these
independent chunk representations.

3. after training, we examine the vc bound and
leave-one-out bound for each of 8 systems.
as for cross validation, we employ the steps 1
and 2 for each divided training data, and obtain
the weights.

4. we test these 8 systems with a separated test
data set. before employing weighted voting,
we have to convert them into a uniform repre-
sentation, since the tag sets used in individual
8 systems are different. for this purpose, we
re-convert each of the estimated results into 4
representations (iob1/iob2/ioe2/ioe1).

5. we employ weighted voting of 8 systems with
respect to the converted 4 uniform representa-
tions and the 4 voting schemes respectively. fi-
(types of uniform representa-
results for

nally, we have  
tions)   4 (types of weights)3  $   

our experiments.

although we can use models with iobes-f or
iobes-b representations for the committees for
the weighted voting, we do not use them in our
voting experiments. the reason is that the num-
ber of classes are different (3 vs. 5) and the esti-
mated vc and loo bound cannot straightforwardly
be compared with other models that have three
classes (iob1/iob2/ioe1/ioe2) under the same
condition. we conduct experiments with iobes-
f and iobes-b representations only to investigate
how far the difference of various chunk representa-
tions would affect the actual chunking accuracies.

4 experiments
4.1 experiment setting
we use the following three annotated corpora for
our experiments.

   base np standard data set (basenp-s)

this data set was    rst introduced by (ramshaw
and marcus, 1995), and taken as the standard
data set for basenp identi   cation task2. this
data set consists of four sections (15-18) of
the wall street journal (wsj) part of the penn
treebank for the training data, and one section
(20) for the test data. the data has part-of-
speech (pos) tags annotated by the brill tag-
ger(brill, 1995).

   base np large data set (basenp-l)

this data set consists of 20 sections (02-21)
of the wsj part of the id32 for the
training data, and one section (00) for the test
data. pos tags in this data sets are also anno-
tated by the brill tagger. we omit the experi-
ments iob1 and ioe1 representations for this
training data since the data size is too large for
our current id166s learning program. in case
of iob1 and ioe1, the size of training data for
one classi   er which estimates the class i and
o becomes much larger compared with iob2
and ioe2 models. in addition, we also omit to
estimate the voting weights using cross valida-
tion method due to a large amount of training
cost.

   chunking data set (chunking)

this data set was used for conll-2000
shared task(tjong kim sang and buchholz,
2000).
the total of 10
base phrase classes (np,vp,pp,adjp,advp,conjp,

in this data set,

2ftp://ftp.cis.upenn.edu/pub/chunker/

  
  
  
  
o
  
+
|
  
  
 j3/eb.
f . in this paper, we re-

  #     

initj,lst,ptr,sbar) are annotated. this data
set consists of 4 sections (15-18) of the wsj
part of the id32 for the training data,
and one section (20) for the test data 3.

all the experiments are carried out with our soft-
ware package tinyid1664, which is designed and op-
timized to handle large sparse feature vectors and
large number of training samples. this package can
estimate the vc bound and leave-one-out bound
automatically. for the id81, we use the
2-nd polynomial function and set the soft margin

in the basenp identi   cation task,

the perfor-
mance of the systems is usually measured with three

to be 1.

parametero
rates: precision, recall and     d  
        
f  
          
"2          
,j,
,j,
  as accuracy.
fer to  
  d  

4.2 results of experiments
table 2 shows results of our id166s based chunk-
ing with individual chunk representations. this ta-
ble also lists the voting weights estimated by differ-
ent approaches (b:cross validation, c:vc-bound,
d:leave-one-out). we also show the results of
start/end representation in table 2.

the best result for each data set.

table 3 shows the results of the weighted vot-
ing of four different voting methods: a: uniform,
b: cross validation (
leave-one-out bound.

3     ), c: vc bound, d:
  of
  d  

table 4 shows the precision, recall and  

4.3 accuracy vs chunk representation
we obtain the best accuracy when we ap-
ply ioe2-b representation for basenp-s and
chunking data set.
in fact, we cannot    nd
a signi   cant difference in the performance be-
tween inside/outside(iob1/iob2/ioe1/ioe2) and
start/end(iobes) representations.

sassano and utsuro evaluate how the difference
of the chunk representation would affect the perfor-
mance of the systems based on different machine
learning algorithms(sassano and utsuro, 2000).
they report that decision list system performs
better with start/end representation than with in-
side/outside, since decision list considers the spe-
ci   c combination of features. as for maximum
id178, they report that it performs better with
inside/outside representation than with start/end,

3http://lcg-www.uia.ac.be/conll2000/chunking/
4http://cl.aist-nara.ac.jp/ taku-ku/software/tinyid166/

estimated weights
d
b

c

.9394
.9422
.9410
.9407
.9386
.9425
.9409
.9426

-
-
-
-

.9342
.9346
.9341
.9355
.9335
.9358
.9341
.9361

.4310
.4351
.4415
.4300
.4274
.4400
.4350
.4510
.4500
.4362
.4467
.4556
.6585
.6614
.6809
.6722
.6533
.6669
.6740
.6913

.9193
.9184
.9172
.9166
.9183
.9217
.9180
.9193
.9497
.9487
.9496
.9503
.9605
.9596
.9586
.9594
.9589
.9611
.9606
.9597

training condition acc.
data

rep.

basenp-l

basenp-s

iob1-f
iob1-b
iob2-f
iob2-b
ioe1-f
ioe1-b
ioe2-f
ioe2-b
iob2-f
iob2-b
ioe2-f
ioe2-b
iob1-f
iob1-b
iob2-f
iob2-b
ioe1-f
ioe1-b
ioe2-f
ioe2-b
basenp-s iobes-f
iobes-b
iobes-f
iobes-b

chunking

chunking

  h     h  

93.76
93.93
93.84
93.70
93.73
93.98
93.98
94.11
95.34
95.28
95.32
95.29
93.48
93.74
93.46
93.47
93.45
93.72
93.45
93.85
93.96
93.58
93.31
93.41

b:cross validation, c:vc bound, d:loo bound

table 2: accuracy of individual representations

training condition
data

basenp-s

basenp-l

chunking

c

b

a

accuracy  h     h  

rep.
iob1
iob2
ioe1
ioe2
iob2
ioe2
iob1
iob2
ioe1
ioe2

94.20
94.22
94.19
94.20

94.20
94.22
94.19
94.21
95.66
95.66
93.89
93.90
93.88
93.91
a:uniform weights, b:cross validation

94.14
94.16
94.14
94.16
95.77
95.77
93.77
93.72
93.76
93.77

93.87
93.87
93.86
93.89

-
-

d

94.16
94.18
94.16
94.17
95.66
95.66
93.87
93.88
93.86
93.85

c:vc bound, d:loo bound

table 3: results of weighted voting

data set
basenp-s
basenp-l
chunking

recall

precision
94.15% 94.29% 94.22
95.62% 95.93% 95.77
93.89% 93.92% 93.91

  d  

table 4: best results for each data set

 
  
*
  
*
  
+
.
  
*
  
*
  
+
  
  
 
since maximum id178 model regards all features
as independent and tries to catch the more general
feature sets.

we believe that id166s perform well regardless of
the chunk representation, since id166s have a high
generalization performance and a potential to select
the optimal features for the given task.

4.4 effects of weighted voting
by applying weighted voting, we achieve higher ac-
curacy than any of single representation system re-
gardless of the voting weights. furthermore, we
achieve higher accuracy by applying cross valida-
tion and vc-bound and leave-one-out methods
than the baseline method.

by using vc bound for each weight, we achieve
nearly the same accuracy as that of cross valida-
tion. this result suggests that the vc bound has a
potential to predict the error rate for the    true    test
data accurately. focusing on the relationship be-
tween the accuracy of the test data and the estimated
weights, we    nd that vc bound can predict the ac-
curacy for the test data precisely. even if we have
no room for applying the voting schemes because
of some real-world constraints (limited computation
and memory capacity), the use of vc bound may al-
low to obtain the best accuracy. on the other hand,
we    nd that the prediction ability of leave-one-out
is worse than that of vc bound.

cross validation is the standard method to esti-
mate the voting weights for different systems. how-
ever, cross validation requires a larger amount of
computational overhead as the training data is di-
vided and is repeatedly used to obtain the voting
weights. we believe that vc bound is more effec-
tive than cross validation, since it can obtain the
comparable results to cross validation without in-
creasing computational overhead.

4.5 comparison with related works
tjong kim sang et al. report that they achieve accu-
racy of 93.86 for basenp-s data set, and 94.90 for
basenp-l data set. they apply weighted voting of
the systems which are trained using distinct chunk
representations and different machine learning al-
gorithms such as mbl, me and igtree(tjong kim
sang, 2000a; tjong kim sang et al., 2000).

our experiments achieve the accuracy of 93.76 -
94.11 for basenp-s, and 95.29 - 95.34 for basenp-
l even with a single chunk representation. in addi-
tion, by applying the weighted voting framework,
we achieve accuracy of 94.22 for basenp-s, and

95.77 for basenp-l data set. as far as accuracies
are concerned, our model outperforms tjong kim
sang   s model.

in the conll-2000 shared task, we achieved
the accuracy of 93.48 using iob2-f representation
(kudo and matsumoto, 2000b) 5. by combining
weighted voting schemes, we achieve accuracy of
93.91.
in addition, our method also outperforms
other methods based on the weighted voting(van
halteren, 2000; tjong kim sang, 2000b).

4.6 future work

   applying to other chunking tasks

our chunking method can be equally appli-
cable to other chunking task, such as english
id52, japanese chunk(bunsetsu) iden-
ti   cation and named entity extraction. for fu-
ture, we will apply our method to those chunk-
ing tasks and examine the performance of the
method.
incorporating variable context length model
in our experiments, we simply use the so-
called    xed context length model. we believe
that we can achieve higher accuracy by select-
ing appropriate context length which is actu-
ally needed for identifying individual chunk
tags. sassano and utsuro(sassano and ut-
suro, 2000) introduce a variable context length
model for japanese named entity identi   cation
task and perform better results. we will incor-
porate the variable context length model into
our system.

   considering more predictable bound

in our experiments, we introduce new types
of voting methods which stem from the theo-
rems of id166s     vc bound and leave-one-
out bound. on the other hand, chapelle and
vapnik introduce an alternative and more pre-
dictable bound for the risk and report their
proposed bound is quite useful for selecting
the id81 and soft margin parame-
ter(chapelle and vapnik, 2000). we believe
that we can obtain higher accuracy using this
more predictable bound for the voting weights
in our experiments.

5in our experiments, the accuracy of 93.46 is obtained with
iob2-f representation, which was the exactly the same repre-
sentation we applied for conll 2000 shared task. this slight
difference of accuracy arises from the following two reason :
(1) the difference of beam width for parsing (n=1 vs. n=5),
(2) the difference of applied id166s package (tinyid166 vs.

  `      8          x  f   .

  
5 summary
in this paper, we introduce a uniform framework for
chunking task based on support vector machines
(id166s). experimental results on wsj corpus show
that our method outperforms other conventional ma-
chine learning frameworks such mbl and max-
imum id178 models. the results are due to
the good characteristics of generalization and non-
over   tting of id166s even with a high dimensional
vector space. in addition, we achieve higher accu-
racy by applying weighted voting of 8-id166 based
systems which are trained using distinct chunk rep-
resentations.

references
erin l. allwein, robert e. schapire, and yoram
singer. 2000. reducing multiclass to binary: a
unifying approach for margin classi   ers. in in-
ternational conf. on machine learning (icml),
pages 9   16.

eric brill. 1995. transformation-based error-
driven learning and natural language process-
ing: a case study in part-of-speech tagging.
computational linguistics, 21(4).

oliver chapelle and vladimir vapnik. 2000. model
selection for support vector machines.
in ad-
vances in neural information processing systems
12. cambridge, mass: mit press.

c. cortes and vladimir n. vapnik. 1995. support
vector networks. machine learning, 20:273   
297.

t. g. dietterich and g. bakiri. 1995. solving multi-
class learning problems via error-correcting out-
put codes. journal of arti   cial intelligence re-
search, 2:263   286.

yoav freund and robert e. schapire. 1996. experi-
ments with a new boosting algorithm. in interna-
tional conference on machine learning (icml),
pages 148   146.

thorsten joachims. 1998. text categorization with
support vector machines: learning with many
relevant features. in european conference on
machine learning (ecml).

ulrich h.-g kre  el. 1999. pairwise classi   cation
in advances in

and support vector machines.
kernel mathods. mit press.

taku kudo and yuji matsumoto. 2000a. japanese
dependency structure analysis based on sup-
port vector machines. in empirical methods in
natural language processing and very large
corpora, pages 18   25.

taku kudo and yuji matsumoto. 2000b. use of
support vector learning for chunk identi   ca-
tion. in proceedings of the 4th conference on
conll-2000 and lll-2000, pages 142   144.

lance a. ramshaw and mitchell p. marcus. 1995.
text chunking using transformation-based learn-
ing. in proceedings of the 3rd workshop on very
large corpora, pages 88   94.

manabu sassano and takehito utsuro.

2000.
named entity chunking techniques in su-
pervised learning for japanese named entity
recognition. in proceedings of coling 2000,
pages 705   711.

robert e. schapire, yoav freund, peter bartlett,
and wee sun lee. 1997. boosting the margin:
a new explanation for the effectiveness of vot-
ing methods. in international conference on ma-
chine learning (icml), pages 322   330.

hirotoshi taira and masahiko haruno. 1999. fea-
ture selection in id166 text categorization. in
aaai-99.

erik f. tjong kim sang and sabine buchholz.
2000. introduction to the conll-2000 shared
task: chunking. in proceedings of conll-2000
and lll-2000, pages 127   132.

erik f. tjong kim sang and jorn veenstra. 1999.
in proceedings of

representing text chunks.
eacl   99, pages 173   179.

erik f. tjong kim sang, walter daelemans, herv  e
d  ejean, rob koeling, yuval krymolowski, vasin
punyakanok, and dan roth. 2000. applying
system combination to base noun phrase identi-
   cation. in proceedings of coling 2000, pages
857   863.

erik f. tjong kim sang. 2000a. noun phrase
recognition by system combination. in proceed-
ings of anlp-naacl 2000, pages 50   55.

erik f. tjong kim sang. 2000b. text chunking by
system combination. in proceedings of conll-
2000 and lll-2000, pages 151   153.

kiyotaka uchimoto, qing ma, masaki murata, hi-
romi ozaku, and hitoshi isahara. 2000. named
entity extraction based on a maximum id178
model and transformation rules. in processing
of the acl 2000.

hans van halteren. 2000. chunking with wpdv
in proceedings of conll-2000 and

models.
lll-2000, pages 154   156.

vladimir n. vapnik. 1998. statistical learning

theory. wiley-interscience.

