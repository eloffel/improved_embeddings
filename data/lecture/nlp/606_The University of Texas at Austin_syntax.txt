1
1
cs 388: 
natural language processing:
syntactic parsing
raymond j. mooney
university of texas at austin
phrase chunking
find all non-recursive noun phrases (nps) and verb phrases (vps) in a sentence.
[np i]  [vp ate]  [np the  spaghetti]  [pp with]   [np meatballs].
[np he ] [vp reckons ] [np the current account deficit ] [vp will narrow ] [pp to ] [np only # 1.8 billion ] [pp in ] [np september ] 
phrase chunking as sequence labeling
tag individual words with one of 3 tags
b (begin) word starts new target phrase
i  (inside) word is part of target phrase but not the first word
o (other) word is not part of target phrase
sample for np chunking
he reckons the current account deficit will narrow  to only # 1.8 billion in september. 


3
begin           inside           other
evaluating chunking
per token accuracy does not evaluate finding correct full chunks. instead use:
4
take harmonic mean to produce a single evaluation metric called f measure.
current chunking results
best system for np chunking: f1=96%
typical results for finding range of chunk types (conll 2000 shared task: np, vp, pp, adv, sbar, adjp) is f1=92   94%
5
syntactic parsing
produce the correct syntactic parse tree for a sentence.
id18s (id18)
n a set of non-terminal symbols (or variables)
    a set of terminal symbols (disjoint from n)
r a set of productions or rules of the form a      , where a is a non-terminal and     is a string of symbols from (       n)*
s, a designated non-terminal called the start symbol

simple id18 for atis english
s     np vp
s     aux np vp
s     vp
np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     vp pp
pp     prep np
det     the | a | that | this
noun     book | flight | meal | money
verb     book | include | prefer
pronoun     i | he | she | me
proper-noun     houston | nwa
aux     does
prep     from | to | on | near | through
grammar
lexicon
sentence generation 
sentences are generated by recursively rewriting the start symbol using the productions until only terminals symbols remain.
s
vp
verb              np
     det    nominal
nominal     pp
book
prep           np
through
houston
proper-noun
the
flight









noun







derivation 
or
parse tree
parsing
given a string of terminals and a id18, determine if the string can be generated by the id18.
also return a parse tree for the string
also return all possible parse trees for the string
must search space of derivations for one that derives the given string.
top-down parsing: start searching space of derivations for the start symbol.
bottom-up parsing: start search space of reverse deivations from the terminal symbols in the string.
parsing example
s
  vp
verb    np
book
det     nominal
that
noun
flight
book that flight

top down parsing
s
pronoun
top down parsing
s
pronoun
top down parsing
s
propernoun
top down parsing
s
propernoun
top down parsing
s
det     nominal
top down parsing
s
det     nominal
top down parsing
s
aux      np      vp
top down parsing
s
aux      np      vp
top down parsing
s
  vp
top down parsing
s
  vp
verb
top down parsing
s
  vp
verb
book
top down parsing
s
  vp
verb
book
x
that
top down parsing
s
  vp
verb    np
top down parsing
s
  vp
verb    np
book
top down parsing
s
  vp
verb    np
book
pronoun
top down parsing
s
  vp
verb    np
book
pronoun
top down parsing
s
  vp
verb    np
book
propernoun
top down parsing
s
  vp
verb    np
book
propernoun
top down parsing
s
  vp
verb    np
book
det     nominal
top down parsing
s
  vp
verb    np
book
det     nominal
that
top down parsing
s
  vp
verb    np
book
det     nominal
that
noun
top down parsing
s
  vp
verb    np
book
det     nominal
that
noun
flight
bottom up parsing
34
book             that             flight
bottom up parsing
35
book             that             flight
noun
bottom up parsing
36
book             that             flight
noun
nominal
bottom up parsing
37
book             that             flight
noun
nominal       noun
nominal
bottom up parsing
38
book             that             flight
noun
nominal       noun
nominal
bottom up parsing
39
book             that             flight
noun
nominal         pp
nominal
bottom up parsing
40
book             that             flight
noun 
det
nominal         pp
nominal
bottom up parsing
41
book             that             flight
noun 
det
np
nominal
nominal         pp
nominal
bottom up parsing
42
book             that  
noun 
det
np
nominal
flight
noun
nominal         pp
nominal
bottom up parsing
43
book             that  
noun 
det
np
nominal
flight
noun
nominal         pp
nominal
bottom up parsing
44
book             that  
noun 
det
np
nominal
flight
noun
s
vp
nominal         pp
nominal
bottom up parsing
45
book             that  
noun 
det
np
nominal
flight
noun
s
vp
nominal         pp
nominal
bottom up parsing
46
book             that  
noun 
det
np
nominal
flight
noun
nominal         pp
nominal


x

bottom up parsing
47
book             that          
verb 
det
np
nominal
flight
noun

bottom up parsing
48
book             that       
verb 
vp
det
np
nominal
flight
noun

det
bottom up parsing
49
book             that        
verb 
vp
s
np
nominal
flight
noun

det
bottom up parsing
50
book             that        
verb 
vp
s
x
np
nominal
flight
noun



bottom up parsing
51
book             that  
verb 
vp
vp
pp
det
np
nominal
flight
noun

bottom up parsing
52
book             that  
verb 
vp
vp
pp
det
np
nominal
flight
noun
x

bottom up parsing
53
book             that  
verb 
vp
det
np
nominal
flight
noun
np
bottom up parsing
54
book             that  
verb 
vp
det
np
nominal
flight
noun
bottom up parsing
55
book             that  
verb 
vp
det
np
nominal
flight
noun
s
top down vs. bottom up
top down never explores options that will not lead to a full parse, but can explore many options that never connect to the actual sentence.
bottom up never explores options that do not connect to the actual sentence but can explore options that can never lead to a full parse.
relative amounts of wasted search depend on how much the grammar branches in each direction.
56
id145 parsing
to avoid extensive repeated work, must cache intermediate results, i.e. completed phrases.
caching (memoizing) critical to obtaining a polynomial time parsing (recognition) algorithm for id18s.
id145 algorithms based on both top-down and bottom-up search can achieve o(n3) recognition time where n is the length of the input string.
57
id145 parsing methods
cky (cocke-kasami-younger) algorithm based on bottom-up parsing and requires first normalizing the grammar.
earley parser is based on top-down parsing and does not require normalizing grammar but is more complex.
more generally, chart parsers retain completed phrases in a chart and can combine top-down and bottom-up search.
58
cky
first grammar must be converted to chomsky normal form (cnf) in which productions must have either exactly 2 non-terminal symbols on the rhs or 1 terminal symbol (lexicon rules).
parse bottom-up storing phrases formed from all substrings in a triangular table (chart).
59
 atis english grammar conversion
s     np vp
s     aux np vp

s     vp


np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     vp pp
pp     prep np
original grammar
chomsky normal form
s     np vp
s     x1 vp
x1     aux np
s     book | include | prefer
s     verb np
s     vp pp
np     i  | he | she | me
np     houston | nwa
np     det nominal
nominal     book | flight | meal | money
nominal     nominal noun
nominal     nominal pp
vp     book | include | prefer
vp     verb np
vp     vp pp
pp     prep np






























cky parser
61
  book       the        flight    through  houston
i=
0


1


2


3


4
j= 1           2              3             4              5
cell[i,j]
contains all
constituents
(non-terminals)
covering words
i +1 through j
cky parser
62
  book       the        flight    through  houston














s, vp, verb,
nominal,
noun
det

nominal,
noun
none

np
cky parser
63
  book       the        flight    through  houston














s, vp, verb,
nominal,
noun
det

nominal,
noun
none

np
cky parser
64
  book       the        flight    through  houston














s, vp, verb,
nominal,
noun
det

nominal,
noun
none

np
s
cky parser
65
  book       the        flight    through  houston














s, vp, verb,
nominal,
noun
det

nominal,
noun
none

np
vp
s
cky parser
66
  book       the        flight    through  houston














s, vp, verb,
nominal,
noun
det

nominal,
noun
none

np
vp
s


prep
none
none
none
cky parser
67
  book       the        flight    through  houston














s, vp, verb,
nominal,
noun
det

nominal,
noun
none

np
vp
s


prep
none
none
none
np
propernoun
pp
cky parser
68
  book       the        flight    through  houston














s, vp, verb,
nominal,
noun
det

nominal,
noun
none

np
vp
s


prep
none
none
none
np
propernoun
pp
nominal
cky parser
69
  book       the        flight    through  houston














s, vp, verb,
nominal,
noun
det

nominal,
noun
none

np
vp
s


prep
none
none
none
np
propernoun
pp
nominal
np
cky parser
70
  book       the        flight    through  houston














s, vp, verb,
nominal,
noun
det

nominal,
noun
none

np
vp
s


prep
none
none
none
np
propernoun
pp
nominal
np
vp
cky parser
71
  book       the        flight    through  houston














s, vp, verb,
nominal,
noun
det

nominal,
noun
none

np
vp
s


prep
none
none
none
np
propernoun
pp
nominal
np
s
vp
cky parser
72
  book       the        flight    through  houston














s, vp, verb,
nominal,
noun
det

nominal,
noun
none

np
vp
s


prep
none
none
none
np
propernoun
pp
nominal
np
vp
s
vp
cky parser
73
  book       the        flight    through  houston














s, vp, verb,
nominal,
noun
det

nominal,
noun
none

np
vp
s


prep
none
none
none
np
propernoun
pp
nominal
np
vp
s
vp
s
cky parser
74
  book       the        flight    through  houston














s, vp, verb,
nominal,
noun
det

nominal,
noun
none

np
vp
s


prep
none
none
none
np
propernoun
pp
nominal
np
vp
s
vp
s
 parse 
tree
#1
cky parser
75
  book       the        flight    through  houston














s, vp, verb,
nominal,
noun
det

nominal,
noun
none

np
vp
s


prep
none
none
none
np
propernoun
pp
nominal
np
vp
s
vp
s
 parse 
tree
#2
complexity of cky (recognition)
there are (n(n+1)/2) = o(n2) cells
filling each cell requires looking at every possible split point between the two non-terminals needed to introduce a new phrase.
there are o(n) possible split points.
total time complexity is o(n3)


76
complexity of cky (all parses)
previous analysis assumes the number of phrase labels in each cell is fixed by the size of the grammar.
if compute all derivations for each non-terminal, the number of cell entries can expand combinatorially.
since the number of parses can be exponential, so is the complexity of finding all parse trees.
77
effect of cnf on parse trees
parse trees are for cnf grammar not the original grammar.
a post-process can repair the parse tree to return a parse tree for the original grammar.
78
syntactic ambiguity
just produces all possible parse trees.
does not address the important issue of ambiguity resolution.
79
issues with id18s
addressing some grammatical constraints requires complex id18s that do no compactly encode the given regularities.
some aspects of natural language syntax may not be captured at all by id18s and require context-sensitivity (productions with more than one symbol on the lhs).
80
agreement
subjects must agree with their verbs on person and number.
i am cold.   you are cold.  he is cold.
* i are cold   * you is cold.   *he am cold.
requires separate productions for each combination.
s     np1stpersonsing vp1stpersonsing
s     np2ndpersonsing vp2ndpersonsing
np1stpersonsing         
vp1stpersonsing         
np2ndpersonsing         
vp2ndpersonsing         



81
other agreement issues
pronouns have case (e.g. nominative, accusative) that must agree with their syntactic position.
i gave him the book.    * i gave he the book.
he gave me the book.  * him gave me the book.
many languages have gender agreement.
los angeles     * las angeles
las vegas         * los vegas      
82
subcategorization
specific verbs take some types of arguments but not others.
transitive verb:     found    requires a direct object
john found the ring.   * john found.
intransitive verb:     disappeared    cannot take one
john disappeared.   * john disappeared the ring.  
   gave    takes both a direct and indirect object
john gave mary the ring.   * john gave mary.   * john gave the ring.
   want    takes an np, or non-finite vp or s
john wants a car.   john wants to buy a car.  john wants mary to take the ring.   * john wants.
subcategorization frames specify the range of argument types that a given verb can take.
83
conclusions
syntax parse trees specify the syntactic structure of a sentence that helps determine its meaning.
john ate the spaghetti with meatballs with chopsticks.
how did john eat the spaghetti?                               what did john eat?
id18s can be used to define the grammar of a natural language.
id145 algorithms allow computing a single parse tree in cubic time or all parse trees in exponential time.

84
