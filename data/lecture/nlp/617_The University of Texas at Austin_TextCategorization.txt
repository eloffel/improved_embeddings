1
text categorization

2
text categorization
assigning documents to a fixed set of categories.
applications:
web pages 
recommending
yahoo-like classification
newsgroup messages 
recommending
spam filtering
news articles 
personalized newspaper
email messages 
routing
prioritizing 
folderizing
spam filtering
3
learning for text categorization
manual development of text categorization functions is difficult.
learning algorithms:
bayesian (na  ve)
neural network
relevance feedback (rocchio)
rule based (ripper)
nearest neighbor (case based)
support vector machines (id166)

4
the vector-space model
assume t distinct terms remain after preprocessing; call them index terms or the vocabulary.
these    orthogonal    terms form a vector space.
          dimension = t = |vocabulary| 
each term, i,  in a document or query, j, is given a real-valued weight, wij.
both documents and queries are expressed as       t-dimensional vectors:
          dj = (w1j, w2j,    , wtj)

5
graphic representation
example:
d1 = 2t1 + 3t2 + 5t3
d2 = 3t1 + 7t2 +   t3
q = 0t1 + 0t2 +  2t3

is d1 or d2 more similar to q?
how to measure the degree of similarity? distance? angle? projection?
6
term weights: term frequency
more frequent terms in a document are more important, i.e. more indicative of the topic.
        fij = frequency of term i in document j 

may want to normalize term frequency (tf)  by dividing by the frequency of the most common term in the document:
        tfij =  fij  / maxi{fij}
		
7
term weights: inverse document frequency
terms that appear in many different documents are less indicative of overall topic.
     df i = document frequency of term i  
           = number of documents containing term i 
     idfi = inverse document frequency of term i,  
           = log2 (n/ df i)  
             (n: total number of documents)
an indication of a term   s discrimination power.
log used to dampen the effect relative to tf.

8
tf-idf weighting
a typical combined term importance indicator is tf-idf weighting:
wij =  tfij idfi  =  tfij log2 (n/ dfi) 
a term occurring frequently in the document but rarely in the rest of the collection is given high weight.
many other ways of determining term weights have been proposed.
experimentally, tf-idf has been found to work well.
9
similarity measure
a similarity measure is a function that computes the degree of similarity between two vectors.

using a similarity measure between the query and each document:
it is possible to rank the retrieved documents in the order of presumed relevance.
it is possible to enforce a certain threshold so that the size of the retrieved set can be controlled.
10
cosine similarity measure
cosine similarity measures the cosine of the angle between two vectors.
inner product normalized by the vector lengths.
   
d1 = 2t1 + 3t2 + 5t3     cossim(d1 , q) = 10 /    (4+9+25)(0+0+4) = 0.81
d2 = 3t1 + 7t2 + 1t3     cossim(d2 , q) =  2 /    (9+49+1)(0+0+4) = 0.13
 q = 0t1 + 0t2 + 2t3
d1 is 6 times better than d2 using cosine similarity but only 5 times better using inner product.
cossim(dj, q) =


11
using relevance feedback (rocchio)
relevance feedback methods can be adapted for text categorization.
use standard tf/idf weighted vectors to represent text documents (normalized by maximum term frequency).
for each category, compute a prototype vector by summing the vectors of the training documents in the category.
assign test documents to the category with the closest prototype vector based on cosine similarity.
12
illustration of rocchio text categorization











13
rocchio text categorization algorithm
(training)
assume the set of categories is {c1, c2,   cn}
for i from 1 to n let pi = <0, 0,   ,0>  (init. prototype vectors)
for each training example <x, c(x)>     d
    let d be the frequency normalized tf/idf term vector for doc x
    let i =  j: (cj = c(x))
       (sum all the document vectors in ci to get pi)
       let pi = pi + d     
14
rocchio text categorization algorithm
(test)

given test document x
let d be the tf/idf weighted term vector for x
let m =    2      (init. maximum cossim)
for i from 1 to n:
     (compute similarity to prototype vector)
     let s = cossim(d, pi)
     if s > m
          let m = s
          let r = ci  (update most similar class prototype)
return class r

15
rocchio properties 
does not guarantee a consistent hypothesis.
forms a simple generalization of the examples in each class (a prototype).
prototype vector does not need to be averaged or otherwise normalized for length since cosine similarity is insensitive to vector length.
classification is based on similarity to class prototypes.
16
nearest-neighbor learning algorithm
learning is just storing the representations of the training examples in d.
testing instance x:
compute similarity between x and all examples in d.
assign x the category of the most similar example in d.
does not explicitly compute a generalization or category prototypes.
also called:
case-based
memory-based
lazy learning
17
k nearest-neighbor
using only the closest example to determine categorization is subject to errors due to:
a single atypical example. 
noise (i.e. error) in the category label of a single training example.
more robust alternative is to find the k most-similar examples and return the majority category of these k examples.
value of k is typically odd to avoid ties, 3 and 5 are most common.
18
illustration of 3 nearest neighbor for text







19
rocchio anomoly   
prototype models have problems with polymorphic (disjunctive) categories.










20
3 nearest neighbor comparison
nearest neighbor tends to handle polymorphic categories better. 








21
k nearest neighbor for text
training:
for each each training example <x, c(x)>     d
      compute the corresponding tf-idf vector, dx, for document x

test instance y:
compute tf-idf vector d for document y
for each <x, c(x)>     d
     let sx = cossim(d, dx)
sort examples, x, in d by decreasing value of sx
let n be the first k examples in d.     (get most similar neighbors)
return the majority class of examples in n
     
 
22
na  ve bayes for text
modeled as generating a bag of words for a document in a given category by repeatedly sampling with replacement from a vocabulary v = {w1, w2,   wm} based on the probabilities p(wj | ci).
smooth id203 estimates with laplace         m-estimates assuming a uniform distribution over all words (p = 1/|v|) and m = |v|
equivalent to a virtual sample of seeing each word in each category exactly once.
23
nude
deal
nigeria
na  ve bayes generative model for text
spam
legit
hot
$
viagra
lottery
!!
!
win
friday
exam
computer
may
pm
test
march
science
viagra
homework
score
!
spam
legit
spam
spam
legit
spam
legit
legit
spam
category
viagra
deal
hot
!!
24
na  ve bayes classification 
nude
deal
nigeria
spam
legit
hot
$
viagra
lottery
!!
!
win
friday
exam
computer
may
pm
test
march
science
viagra
homework
score
!
spam
legit
spam
spam
legit
spam
legit
legit
spam
category
win lotttery $ !
25
text na  ve bayes algorithm
(train)
let v be the vocabulary of all words in the documents in d
for each category ci      c
        let di be the subset of documents in d in category ci
        p(ci) = |di| / |d|
      let ti be the concatenation of all the documents in di
         let ni be the total number of word occurrences in ti
         for each word wj     v
             let nij be the number of occurrences of wj in ti
                   let p(wj | ci) = (nij + 1) / (ni + |v|)  

26
text na  ve bayes algorithm
(test)
given a test document x
let n be the number of word occurrences in x
return the category:


     where ai is the word occurring the ith position in x
 
27
sample learning curve
(yahoo science data)
