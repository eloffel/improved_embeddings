empirical methods in natural language processing

lecture 9

parsing (i): context-free grammars

and chart parsing

philipp koehn

4 february 2008

philipp koehn

emnlp lecture 9

4 february 2008

the path so far

1

    originally, we treated language as a sequence of words

    id165 language models

    then, we introduced the notion of syntactic properties of words

    part-of-speech tags

    now, we look at syntactic relations between words

    syntax trees

philipp koehn

emnlp lecture 9

4 february 2008

2

a simple sentence

i like the interesting lecture

philipp koehn

emnlp lecture 9

4 february 2008

part-of-speech tags

3

i

like

the
pro vb det

interesting

lecture

jj

nn

philipp koehn

emnlp lecture 9

4 february 2008

syntactic relations

4

i

like

the
pro vb det

interesting

lecture

jj

nn

    the adjective interesting gives more information about the noun lecture
    the determiner the says something about the noun lecture
    the noun lecture is the object of the verb like, specifying what is being liked
    the pronoun i is the subject of the verb like, specifying who is doing the liking

philipp koehn

emnlp lecture 9

4 february 2008

dependency structure

5

like
i
pro vb
   
like

the
det
   

interesting

lecture

jj
   

nn
   
like

lecture

lecture

this can also be visualized as a dependency tree:

(((((((((((((

like/vb
hhhhh

i/pro

        

lecture/nn
aaaaaa
interesting/jj

the/det

philipp koehn

emnlp lecture 9

4 february 2008

dependency structure (2)

6

the dependencies may also be labeled with the type of dependency

interesting

lecture

i
pro
   
   
like

subject

like
vb

the
det
   
   

adjunct

jj
   
   

adjunct

lecture

lecture

object

nn
   
   
like

philipp koehn

emnlp lecture 9

4 february 2008

phrase-structure tree

7

a popular grammar formalism is phrase structure grammar
internal nodes combine leaf nodes into phrases, such as noun phrases (np)

s
(((((((((((((((
e

e

np

vp
((((((((((((
z
z

z

pro

vp

np
          
xxxxxxxx





i

vb

det

jj

nn

like

the

interesting

lecture

philipp koehn

emnlp lecture 9

4 february 2008

building phrase-structure trees

8

    our task for this week: parsing

    given: an input sentence with part-of-speech tags
    wanted: the right syntax tree for it
    formalism: context-free grammars

    non-terminal nodes such as np, s appear inside the tree
    terminal nodes such as like, lecture appear at the leafs of the tree
    rules such as np     det jj nn

philipp koehn

emnlp lecture 9

4 february 2008

applying the rules

input

s

np vp
pro vp

i vp

i vp np
i vb np
i like np

i like det jj nn
i like the jj nn

i like the interesting nn

rule

s     np vp
np     pro
pro     i
vp     vp np
vp     vb
vb     like
np     det jj nn
det     the
jj     interesting
nn     lecture

9

output
np vp
pro vp

i vp

i vp np

i vb

i like np

i like det jj nn
i like the jj nn

i like the interesting nn

i like the interesting lecture

philipp koehn

emnlp lecture 9

4 february 2008

recursion

10

rules can be applied recursively, for example the rule vp     np vp

s    

s

   

s

   

s

vp
#
c
#
c

np vp

vp
!!!!
c
c
vp
#
c
#
c

np

np vp

vp
      
c
c
np
vp
c
c
vp
#
c
#
c

!!!!

np

np vp

vp
        
c
c
np
vp
      
c
c
np
vp
c
c
vp
#
c
#
c

!!!!

np

np vp

philipp koehn

emnlp lecture 9

4 february 2008

11

context-free grammars in context

    id154 of formal languages
(terminals in caps, non-terminal lowercase)
    regular: only rules of the form a     a, a     b, a     ba (or a     ab)

cannot generate languages such as anbn

    context-free: left-hand side of rule has to be single non-terminal, anything

    context-sensitive:

goes on right hand-side. cannot generate anbncn
rules can be restricted to a particular context, e.g.
  a         abc  , where    and    are strings of terminal and non-terminals
    moving up the hierarchy, languages are more expressive and parsing becomes

computationally more expensive
    is natural language context-free?

philipp koehn

emnlp lecture 9

4 february 2008

why is parsing hard?

12

prepositional phrase attachment: who has the telescope?

pro

s
((((((((((((((((
\\
vp
np
((((((((((((((
z
z
vp
np
(((((((((
xxxxxx
np
pp
       
z
z
in
nn

vb
see

!!!!

det

i

bbb

np

s
((((((((((((((((
l
l
l
vp
              
pppppppp
!!!!!!!
np
pp
!!!!!!!
#
\
@
#
\
@
in

#
det

\
nn

vb

vp

#

i

pro

@
np
"""""
\
\

det

\
nn

the

woman

with

see

the

woman

with

     

np
z
z
nn

det

the

telescope

the

telescope

philipp koehn

emnlp lecture 9

4 february 2008

why is parsing hard?

13

scope: is jim also from hoboken?

s
(((((((((((((((
bbb
vp
np
(((((((((((((
vp

nnp

qqq

mary

vb

likes

np
xxxxxxx
       
pp
np
     
  
cc

!!!!
in

aaaa

np

bbb

np

np

and

nnp

jim

nnp

john

from

nnp

hoboken

s
(((((((((((((((
bbb
vp
np
(((((((((((((
vp

qqq
np
(((((((((((
        
cc
np

nnp

mary

vb

likes

aaaa

and

nnp

jim

np
       
np

bbb

pp

bbb

!!!!
in

nnp

john

from

np

nnp

philipp koehn

emnlp lecture 9

4 february 2008

hoboken

cyk parsing

14

    we have input sentence:

i like the interesting lecture

    we have a set of context-free rules:

s     np vp, np     pro, pro     i, vp     vp np, vp     vb, vb     like,
np     det jj nn, det     the, jj    , nn     lecture

    cocke-younger-kasami (cyk) parsing

    a bottom-up parsing algorithm
    uses a chart to store intermediate result

philipp koehn

emnlp lecture 9

4 february 2008

example

15

initialize chart with the words

i

1

like

2

the

3

interesting

lecture

4

5

philipp koehn

emnlp lecture 9

4 february 2008

example (2)

16

apply    rst terminal rule pro     i

pro

i

1

like

2

the

3

interesting

lecture

4

5

philipp koehn

emnlp lecture 9

4 february 2008

example (3)

17

... and so on ...

pro

i

1

vb

like

2

det

the

3

jj

nn

interesting

lecture

4

5

philipp koehn

emnlp lecture 9

4 february 2008

example (4)

18

try to apply a non-terminal rule to the    rst word
the only matching rule is np     pro

np

pro

i

1

vb

like

2

det

the

3

jj

nn

interesting

lecture

4

5

philipp koehn

emnlp lecture 9

4 february 2008

example (5)

19

recurse: try to apply a non-terminal rule to the    rst word
no rule matches

np

pro

i

1

vb

like

2

det

the

3

jj

nn

interesting

lecture

4

5

philipp koehn

emnlp lecture 9

4 february 2008

example (6)

20

try to apply a non-terminal rule to the second word
the only matching rule is vp     vb
no recursion possible, no additional rules match

np

pro

i

1

vp

vb

like

2

det

the

3

jj

nn

interesting

lecture

4

5

philipp koehn

emnlp lecture 9

4 february 2008

example (7)

21

try to apply a non-terminal rule to the third word
no rule matches

np

pro

i

1

vp

vb

like

2

det

the

3

jj

nn

interesting

lecture

4

5

philipp koehn

emnlp lecture 9

4 february 2008

example (8)

22

try to apply a non-terminal rule to the    rst two words
the only matching rule is s     np vp
no other rules match for spans of two words

s

np

pro

i

1

vp

vb

like

2

det

the

3

jj

nn

interesting

lecture

4

5

philipp koehn

emnlp lecture 9

4 february 2008

example (9)

23

one rule matches for a span of three words: np     det jj nn

s

np

pro

i

1

vp

vb

like

2

np

jj

nn

interesting

lecture

4

5

det

the

3

philipp koehn

emnlp lecture 9

4 february 2008

example (10)

24

one rule matches for a span of four words: vp     vp np

vp

s

np

pro

i

1

vp

vb

like

2

np

jj

nn

interesting

lecture

4

5

det

the

3

philipp koehn

emnlp lecture 9

4 february 2008

example (11)

one rule matches for a span of    ve words: s     np vp

25

s

vp

s

np

pro

i

1

vp

vb

like

2

np

jj

nn

interesting

lecture

4

5

det

the

3

philipp koehn

emnlp lecture 9

4 february 2008

cyk algorithm for binarized grammars

26

    for all words wi: // terminal rules

    for all rules a     wi: add new chart entry a at span [i, i]
    for length = 1 to sentence length n // non-terminal rules
    for start = 1 to n     (length     1)

end = start + length     1
    for middle = start to end     1: // binary rules

for all non-terminals x in [start, middle]:
for all non-terminals y in [middle + 1, end]:
for all rules a     x y :
add new chart entry a at position [start, end]
for all rules a     x:
add new chart entry a at position [start, end]

    for all non-terminals x in [start, end]: // unary rules

philipp koehn

emnlp lecture 9

4 february 2008

