minimum	
   edit	
   

distance

definition	
   of	
   minimum	
   

edit	
   distance

how	
   similar	
   are	
   two	
   strings?

    spell	
   correction

    the	
   user	
   typed	
      graffe   
which	
   is	
   closest?	
   

    graf
    graft
    grail
    giraffe

    computational	
   biology

    align	
   two	
   sequences	
   of	
   nucleotides

aggctatcacctgacctccaggid35atgccc
tagctatcacgaid35cggtcgatttgcid35ac

    resulting	
   alignment:
-aggctatcacctgacctccaggid35a--tgccc---
tag-ctatcac--gaid35c--ggtcgatttgcid35ac

    also	
   for	
   machine	
   translation,	
   information	
   extraction,	
   speech	
   recognition

edit	
   distance

    the	
   minimum	
   edit	
   distance	
   between	
   two	
   strings
   

is	
   the	
   minimum	
   number	
   of	
   editing	
   operations
    insertion
    deletion
    substitution

    needed	
   to	
   transform	
   one	
   into	
   the	
   other

minimum	
   edit	
   distance

    two	
   strings	
   and	
   their	
   alignment:

minimum	
   edit	
   distance

   

   

if	
   each	
   operation	
   has	
   cost	
   of	
   1
    distance	
   between	
   these	
   is	
   5
if	
   substitutions	
   cost	
   2	
   (levenshtein)
    distance	
   between	
   them	
   is	
   8

alignment	
   in	
   computational	
   biology

    given	
   a	
   sequence	
   of	
   bases

aggctatcacctgacctccaggid35atgccc
tagctatcacgaid35cggtcgatttgcid35ac

    an	
   alignment:

-aggctatcacctgacctccaggid35a--tgccc---
tag-ctatcac--gaid35c--ggtcgatttgcid35ac
    given	
   two	
   sequences,	
   align	
   each	
   letter	
   to	
   a	
   letter	
   or	
   gap

other	
   uses	
   of	
   edit	
   distance	
   in	
   nlp

    evaluating	
   machine	
   translation	
   and	
   speech	
   recognition
r spokesman confirms    senior government adviser was shot
h spokesman said    the senior            adviser was shot dead
s      i              d                        i
    named	
   entity	
   extraction	
   and	
   entity	
   coreference

    ibm	
   inc.	
   announced	
   today
    ibm	
   profits
    stanford	
   president	
   john	
   hennessy	
   announced	
   yesterday
    for	
   stanford	
   university	
   president	
   john	
   hennessy

how	
   to	
   find	
   the	
   min	
   edit	
   distance?

    searching	
   for	
   a	
   path	
   (sequence	
   of	
   edits)	
   from	
   the	
   start	
   string	
   to	
   

the	
   final	
   string:
    initial	
   state:	
   the	
   word	
   we   re	
   transforming
    operators:	
   insert,	
   delete,	
   substitute
    goal	
   state:	
   	
   the	
   word	
   we   re	
   trying	
   to	
   get	
   to
    path	
   cost:	
   what	
   we	
   want	
   to	
   minimize:	
   the	
   number	
   of	
   edits

8

minimum	
   edit	
   as	
   search

    but	
   the	
   space	
   of	
   all	
   edit	
   sequences	
   is	
   huge!

    we	
   can   t	
   afford	
   to	
   navigate	
   na  vely
    lots	
   of	
   distinct	
   paths	
   wind	
   up	
   at	
   the	
   same	
   state.

    we	
   don   t	
   have	
   to	
   keep	
   track	
   of	
   all	
   of	
   them
    just	
   the	
   shortest	
   path	
   to	
   each	
   of	
   those	
   revisted	
   states.

9

defining	
   min	
   edit	
   distance

    for	
   two	
   strings
    x	
   of	
   length	
   n
    y	
   of	
   length	
   m
    we	
   define	
   d(i,j)

    the	
   edit	
   distance	
   between	
   x[1..i]	
   and	
   y[1..j]	
   

    i.e.,	
   the	
   first	
   i characters	
   of	
   x	
   and	
   the	
   first	
   j characters	
   of	
   y

    the	
   edit	
   distance	
   between	
   x	
   and	
   y	
   is	
   thus	
   d(n,m)

minimum	
   edit	
   

distance

definition	
   of	
   minimum	
   

edit	
   distance

minimum	
   edit	
   

distance

computing	
   minimum	
   

edit	
   distance

dynamic	
   programming	
   for
minimum	
   edit	
   distance

    dynamic	
   programming:	
   a	
   tabular	
   computation	
   of	
   d(n,m)
    solving	
   problems	
   by	
   combining	
   solutions	
   to	
   subproblems.
    bottom-     up

    we	
   compute	
   d(i,j)	
   for	
   small	
   i,j
    and	
   compute	
   larger	
   d(i,j)	
   based	
   on	
   previously	
   computed	
   smaller	
   values
    i.e.,	
   compute	
   d(i,j)	
   for	
   all	
   i (0	
   <	
   i <	
   n)	
   	
   and j	
   (0	
   <	
   j	
   <	
   m)

defining	
   min	
   edit	
   distance	
   (levenshtein)

   

initialization
d(i,0) = i
d(0,j) = j

    recurrence relation:

for each  i = 1   m

for each  j = 1   n

d(i-1,j) + 1
d(i,j)= min d(i,j-1) + 1
d(i-1,j-1) +

   

termination:
d(n,m) is distance

2; if x(i)     y(j)
0; if x(i) = y(j)

the	
   edit	
   distance	
   table

n
o
i

t
n
e
t
n
i
#

9
8
7

6
5
4
3
2
1
0
#

1
e

2
x

3
e

4
c

5
u

6
t

7
i

8
o

9
n

the	
   edit	
   distance	
   table
9
8
7
6
5
4
3
2
1
0
#

5
u

4
c

2
x

1
e

3
e

n
o
i
t
n
e
t
n
i
#

6
t

7
i

8
o

9
n

edit	
   distance

n
o
i

t
n
e
t
n
i
#

9
8
7

6
5
4
3
2
1
0
#

1
e

2
x

3
e

4
c

5
u

6
t

7
i

8
o

9
n

the	
   edit	
   distance	
   table

n
o
i
t
n
e
t
n
i
#

9
8
7
6
5
4
3
2
1
0
#

8
7
6
5
4
3
4
3
2
1
e

9
8
7
6
5
4
5
4
3
2
x

10
9
8
7
6
5
6
5
4
3
e

11
10
9
8
7
6
7
6
5
4
c

12
11
10
9
8
7
8
7
6
5
u

11
10
9
8
9
8
7
8
7
6
t

10
9
8
9
10
9
8
7
6
7
i

9
8
9
10
11
10
9
8
7
8
o

8
9
10
11
10
9
8
7
8
9
n

minimum	
   edit	
   

distance

computing	
   minimum	
   

edit	
   distance

minimum	
   edit	
   

distance

backtrace for	
   

computing	
   alignments

computing	
   alignments

    edit	
   distance	
   isn   t	
   sufficient

    we	
   often	
   need	
   to	
   align each	
   character	
   of	
   the	
   two	
   strings	
   to	
   each	
   other

    we	
   do	
   this	
   by	
   keeping	
   a	
      backtrace   
    every	
   time	
   we	
   enter	
   a	
   cell,	
   remember	
   where	
   we	
   came	
   from
    when	
   we	
   reach	
   the	
   end,	
   

    trace	
   back	
   the	
   path	
   from	
   the	
   upper	
   right	
   corner	
   to	
   read	
   off	
   the	
   alignment

edit	
   distance

n
o
i

t
n
e
t
n
i
#

9
8
7

6
5
4
3
2
1
0
#

1
e

2
x

3
e

4
c

5
u

6
t

7
i

8
o

9
n

minedit	
   with	
   backtrace

adding	
   backtrace to	
   minimum	
   edit	
   distance

   

   

base	
   conditions:	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   	
   termination:
d(i,0) = i
recurrence relation:
for each  i = 1   m

d(0,j) = j         d(n,m) is distance 

for each  j = 1   n

d(i-1,j) + 1
d(i,j)= min d(i,j-1) + 1
d(i-1,j-1) +

ptr(i,j)=

left
down
diag

insertion
deletion
substitution

deletion
insertion

2; if x(i)     y(j)
0; if x(i) = y(j)

substitution

the	
   distance	
   matrix

n
x
 
 

   
   
   
   
   
   
   
   

0
x

every	
   non-     decreasing	
   path	
   

from	
   (0,0)	
   to	
   (m,	
   n)	
   

corresponds	
   to	
   
an	
   alignment	
   
of	
   the	
   two	
   sequences

y0                                       ym

an optimal alignment is composed 
of optimal subalignments

slide	
   adapted	
   from	
   serafim batzoglou

result	
   of	
   backtrace
    two	
   strings	
   and	
   their	
   alignment:

performance

    time:

    space:

    backtrace

o(nm)

o(nm)

o(n+m)

minimum	
   edit	
   

distance

backtrace for	
   

computing	
   alignments

minimum	
   edit	
   

distance

weighted	
   minimum	
   edit	
   

distance

weighted	
   edit	
   distance

    why	
   would	
   we	
   add	
   weights	
   to	
   the	
   computation?

    spell	
   correction:	
   some	
   letters	
   are	
   more	
   likely	
   to	
   be	
   mistyped	
   than	
   others
    biology:	
   certain	
   kinds	
   of	
   deletions	
   or	
   insertions	
   are	
   more	
   likely	
   than	
   

others

confusion	
   matrix	
   for	
   spelling	
   errors

weighted	
   min	
   edit	
   distance

   

initialization:
d(0,0) = 0
d(i,0) = d(i-1,0) + del[x(i)];    1 < i     n
1 < j     m
d(0,j) = d(0,j-1) + ins[y(j)];

    recurrence relation:

d(i,j)= min

    termination:

d(n,m) is distance

d(i-1,j) 
d(i,j-1)
d(i-1,j-1) + sub[x(i),y(j)]

+ del[x(i)]
+ ins[y(j)]

where   did   the   name,   dynamic   
programming,   come   from?   

   the   1950s   were   not   good   years   for   mathematical   research.   [the]   secretary   of   
defense      had   a   pathological   fear   and   hatred   of   the   word,   research   

i   decided   therefore   to   use   the   word,      programming   .

i   wanted   to   get   across   the   idea   that   this   was   dynamic,   this   was   multistage      i   thought,   
let   s         take   a   word   that   has   an   absolutely   precise   meaning,   namely   dynamic      it   s   
impossible   to   use   the   word,   dynamic,   in   a   pejorative   sense.   try   thinking   of   some   
combination   that   will   possibly   give   it   a   pejorative   meaning.   it   s   impossible.   

thus,   i   thought   dynamic   programming   was   a   good   name.   it   was   something   not   even   a   
congressman   could   object   to.   

richard   bellman,      eye   of   the   hurricane:   an   autobiography      1984.

minimum	
   edit	
   

distance

weighted	
   minimum	
   edit	
   

distance

minimum	
   edit	
   

distance

minimum	
   edit	
   distance	
   
in	
   computational	
   biology

sequence	
   alignment

aggctatcacctgacctccaggid35atgccc
tagctatcacgaid35cggtcgatttgcid35ac

-aggctatcacctgacctccaggid35a--tgccc---
tag-ctatcac--gaid35c--ggtcgatttgcid35ac

why	
   sequence	
   alignment?

    comparing	
   genes	
   or	
   regions	
   from	
   different	
   species

    to	
   find	
   important	
   regions
    determine	
   function
    uncover	
   evolutionary	
   forces

    assembling	
   fragments	
   to	
   sequence	
   dna
    compare	
   individuals	
   to	
   looking	
   for	
   mutations

alignments	
   in	
   two	
   fields

    in	
   natural	
   language	
   processing

    we	
   generally	
   talk	
   about	
   distance	
   (minimized)
    and	
   weights

    in	
   computational	
   biology

    we	
   generally	
   talk	
   about	
   similarity	
   
(maximized)
    and	
   scores

the	
   needleman-     wunsch algorithm

   

initialization:
d(i,0) = -i * d
d(0,j) = -j * d
    recurrence relation:

d(i,j)= min

    termination:

d(n,m) is distance

d(i-1,j) 
d(i,j-1)
d(i-1,j-1) + s[x(i),y(j)]

- d
- d

the	
   needleman-     wunsch matrix
x1                                       xm

(note	
   that	
   the	
   origin	
   is	
   
at	
   the	
   upper	
   left.)

y
1

   
   
   
   
   
   
   
   

 
 
y
n

slide	
   adapted	
   from	
   serafim batzoglou

a	
   variant	
   of	
   the	
   basic	
   algorithm:

    maybe	
   it	
   is	
   ok	
   to	
   have	
   an	
   unlimited	
   #	
   of	
   gaps	
   in	
   the	
   beginning	
   

and	
   end:

----------ctatcacctgacctccaggid35atgccccttid35gc
gcgagttcatctatcac--gaid35c--ggtcg--------------

    if so, we don   t want to penalize gaps at the ends

slide	
   from	
   serafim	
   batzoglou

different	
   types	
   of	
   overlaps

example:
2 overlapping   reads    from a 
sequencing project 

example:
search for a mouse gene
within a human chromosome

slide	
   from	
   serafim	
   batzoglou

the	
   overlap	
   detection	
   variant

x1                                       xm

changes:

n
y
 
 

   
   
   
   
   
   
   
   

1
y

1.

initialization
for all i, j,

f(i, 0) = 0
f(0, j) = 0

2.

termination

fopt = max

maxi f(i, n)

maxj f(m, j)

slide	
   from	
   serafim batzoglou

the	
   local	
   alignment	
   problem

given	
   two	
   strings	
   

x	
   =	
   x1      xm,	
   
y	
   =	
   y1      yn

find	
   substrings	
   x   ,	
   y   	
   whose	
   similarity	
   

(optimal	
   global	
   alignment	
   value)
is	
   maximum

x	
   =	
   aaaacccid35gggtta
y	
   =	
   ttcid35ggaaccaacc

slide	
   from	
   serafim batzoglou

the	
   smith-     waterman	
   algorithm

idea:	
   ignore	
   badly	
   aligning	
   regions

modifications	
   to	
   needleman-     wunsch:

initialization:

f(0, j) = 0
f(i, 0) = 0

iteration:

0

f(i, j) = max    f(i     1, j)     d
f(i, j     1)     d
f(i     1, j     1) + s(xi, yj)  

slide	
   from	
   serafim batzoglou

the	
   smith-     waterman	
   algorithm

termination:
1.

if	
   we	
   want	
   the	
   best local	
   alignment   

fopt =	
   maxi,j f(i,	
   j)

find	
   fopt and	
   trace	
   back

2.

if	
   we	
   want	
   all local	
   alignments	
   scoring	
   >	
   t	
   

??

for	
   all	
   i,	
   j	
   find	
   f(i,	
   j)	
   >	
   t,	
   and	
   trace	
   back?

complicated	
   by	
   overlapping	
   local	
   alignments

slide	
   from	
   serafim batzoglou

local	
   alignment	
   example

x = atcat
y = attatc

let:
m	
   =	
   1	
   (1	
   point	
   for	
   match)
d	
   =	
   1	
   (-     1	
   point	
   for	
   del/ins/sub)

a t t a t c
0 0 0 0 0 0 0

a 0
t 0
c 0
a 0
t 0

local	
   alignment	
   example

x = atcat
y = attatc

a t t a t c
0 0 0 0 0 0 0
a 0 1 0 0 1 0 0
t 0 0 2 1 0 2 0
c 0 0 1 1 0 1 3
a 0 1 0 0 2 1 2
t 0 0 2 0 1 3 2

local	
   alignment	
   example

x = atcat
y = attatc

a t t a t c
0 0 0 0 0 0 0
a 0 1 0 0 1 0 0
t 0 0 2 1 0 2 0
c 0 0 1 1 0 1 3
a 0 1 0 0 2 1 2
t 0 0 2 0 1 3 2

local	
   alignment	
   example

x =    atcat
y = attatc

a t t a t c
0 0 0 0 0 0 0
a 0 1 0 0 1 0 0
t 0 0 2 1 0 2 0
c 0 0 1 1 0 1 3
a 0 1 0 0 2 1 2
t 0 0 2 0 1 3 2

minimum	
   edit	
   

distance

minimum	
   edit	
   distance	
   
in	
   computational	
   biology

