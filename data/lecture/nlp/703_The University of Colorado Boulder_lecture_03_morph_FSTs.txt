finite state morphology and 

phonology

natural language processing

ling/csci 5832

mans hulden

dept. of linguistics

mans.hulden@colorado.edu

jan 20 2014

id122s for practical nlp tasks

(1) how id122s are used in modeling 
sound systems (phonology)

(2) for modeling word-formation

(3) derivative products of the above 
(spell checkers, lemmatizers, grammar 
checkers, components of larger 
systems)

plan

(1) recap    nite automata and 
transducers + basic algorithms

(2) look at an extended calculus for 
manipulating id122s (automata + 
transducers) suitable for nlp

(3) see how these are used in natural 
language applications

recap: anatomy of a fsa

regular expression

l = a b* c

graph representation

b

a

1

c

0

2

formal de   nition

q = {0,1,2} (set of states) 
   = {a,b,c}  (alphabet)   
q0 = 0          (initial state) 
f = {2}       (set of final states) 
  (0,a) = 1,   (1,b) = 1,   (1,c) = 2 
    (transition function)

recap: anatomy of a fsa

regular expression

l = a b* c

graph representation

b

a

1

c

0

2

interpretation

    an fsa defines a set of strings 

    in this case l={ac,abc,abbc,...} 

    these sets are the regular sets 

recap: kleene   s theorem

a language is regular iff it is accepted by some fa

proof is constructive: can convert between representations

(a|b* c)* a b a* | (a b* a | a a*)

a 

0

6

a 

   

c 

b 

a 

10

b 

b 

c 

7

3

b 

c 
a 

a 

b 

9

c 

1

c 
a 

a 

2

b 

8

c 

a 

4

c 

b 

5

a 

c 

c 

b 
b 

recap: kleene   s theorem

kleene   s theorem: regexp     fa

expression de   nition

id122 construction

   

;

a

a   

ab

the empty string

the empty language

a single symbol

kleene star of a language

concatenation of two languages

a | b

union of two languages

fa     regexp done with    state elimination 

table 2: regular expression and nondeterministic    nite-state machine equiva-
lents.
algorithm    (easier, but let   s skip it)

the thompson construction

(a|b)*

a

b

the thompson construction

(a|b)*

a

b

  
  

  
  

a

b

(a|b)

the thompson construction

a

  

(a|b)*

b

  
  

a

b

  
  

  

(a|b)*

the thompson construction

  

  
  

  
  

a

b

(a|b)*

  

a,b

determinization & 

minimization algorithm

recap: kleene   s theorem
    kleene   s theorem only uses one boolean 
operation on sets, union

    but fsa are closed under other set operations: 
complement, intersection, set subtraction

    it   s dif   cult to appreciate the power of    nite-
state models without a richer calculus...

    in fact, the most fruitful approach is to forget 
about states and transitions and tapes and 
reason in terms of sets and relations

reasoning about automata

automaton

a 

b c 

0

a 
c 

1

b 

b 
a 

2

   = {a,b,c}

what language does the fsa represent?

reasoning about automata

automaton

a 

b c 

0

a 
c 

1

b 

b 
a 

2

   = {a,b,c}

equivalent regular expression with {|,   , *}

(b|c|aa*c)*aa*b(aa*b|(b|aa*c)(b|c|aa*c)*aa*b)*|(b|c)* a((a|ba)|(c|bb)(b|c)*a)*|(b|c|a(a|ba)*(c|bb))*

reasoning about automata

automaton

a 

b c 

0

a 
c 

1

b 

b 
a 

2

   = {a,b,c}

equivalent regular expression with {|,   , *}

(b|c|aa*c)*aa*b(aa*b|(b|aa*c)(b|c|aa*c)*aa*b)*|(b|c)* a((a|ba)|(c|bb)(b|c)*a)*|(b|c|a(a|ba)*(c|bb))*

equivalent regular expression with {   ,  ,*}
  (  *abc  *)

reasoning about automata

automaton

a 

b c 

0

a 
c 

1

b 

b 
a 

2

   = {a,b,c}

equivalent regular expression with {|,   , *}

(b|c|aa*c)*aa*b(aa*b|(b|aa*c)(b|c|aa*c)*aa*b)*|(b|c)* a((a|ba)|(c|bb)(b|c)*a)*|(b|c|a(a|ba)*(c|bb))*

equivalent regular expression with {|,   ,  }
  (  *abc  *)

not    contains abc   

reasoning about automata

25

from    regular models of phonological rule systems   

the common data structures that our programs manipulate are clearly states,
transitions, labels, and label pairs   the building blocks of    nite automata and
transducers. but many of our initial mistakes and failures arose from attempt-
ing also to think in terms of these objects. the automata required to implement
even the simplest examples are large and involve considerable subtlety for their
construction. to view them from the perspective of states and transitions is
much like predicting weather patterns by studying the movements of atoms
and molecules or inverting a matrix with a turing machine. the only hope of
success in this domain lies in developing an appropriate set of high-level alge-
braic operators for reasoning about languages and relations and for justifying
a corresponding set of operators and automata for computation.

(kaplan and kay, 1994, p.376)

in a way, this statement encapsulates the problem the present work hopes to alleviate.

toward    high-level    algebraic 

operators

    add booleans to regular expression calculus: 
at least complement (  ), intersection (   ),  set 
subtraction (-))

    add    useful    operators/shortcuts, e.g. 
   - contains(x) = (  * x   *)

    example:  the language that ful   lls the 
constraint:    i before e except after c   
       contains(cie) &   (  (  *c)ei)

the product construction

l1 = a b* c

b

1

a

0

c

2

l2 = a b c*

a

0

1

b

c

2

l3 = l1     l2 

the product construction

l1 = a b* c

b

1

a

0

c

2

l2 = a b c*

a

0

1

b

c

2

l3 = l1     l2 

(0,0)

the product construction

l1 = a b* c

b

1

a

0

c

2

l2 = a b c*

a

0

1

b

c

2

l3 = l1     l2 

(0,0) a

(1,1)

the product construction

l1 = a b* c

b

1

a

0

c

2

l2 = a b c*

a

0

1

b

c

2

l3 = l1     l2 

(0,0) a

(1,1) b (1,2)

the product construction

l1 = a b* c

b

1

a

0

c

2

l2 = a b c*

a

0

1

b

c

2

l3 = l1     l2 

(0,0) a

(1,1) b (1,2) c

(2,2)

algorithm 3.2. the algorithm is the on-demand implementation of the product of the set of
states where each machine f sm1 and f sm2 are traversed in parallel, generating pairs of
states. the operation at hand (union, intersection, or subtraction) determines which states
are designated as    nal states in the composite machine.

the product construction

algorithm 3.2: productconstruction
input: f sm1 = (q1,    ,  1, s0, f1), f sm2 = (q2,    ,  2, t0, f2), op 2 {[,\, }
output: f sm3 = (q3,    ,  3, u0, f3)
begin

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18

agenda   (s0, t0)
q3   (s0, t0)
u0   (s0, t0)
index (s0, t0)
while agenda 6= ; do

choose a state pair (p, q) from agenda
foreach pair of transitions  1(p, x, p0)  2(q, x, q0) do

add  3((p, q), x, (p0, q0))
if (p   ,q   ) is not indexed then

index (p0, q0) and add to agenda and q3

end

end

end
foreach state s in q3 = (p, q) do

add s to f3 iff p 2 f1 op q 2 f2

end

end

in the algorithm, it is assumed that in a transition speci   ed as  1(p, x, p0), x refers to
any symbol pair occurring on a transition in a transducer. the input arguments must be

finite state transducers

recap: anatomy of an fst

formal de   nition

graph representation

a b d 

0

b d 
c 

a b 
c 

1

d 

a 
c 

<a:b> 

2

3

q = {0,1,2,3} (set of states) 
   = {a,b,c,d}  (alphabet)   
q0 = 0              (initial state) 
f = {0,1,2}     (set of final states) 
         (transition function)

recap: anatomy of an fst

graph representation

a b d 

0

b d 
c 

a b 
c 

1

d 

a 
c 

<a:b> 

2

3

interpretation

    an fst defines a set of string 
pairs (a relation) 

    in this case t={(a,a),(b,b),(c,c),
(cad,cdb),...} 

    these sets are the regular 
relations 

    trivially bidirectional devices 

algebraic operations on transducers

t u (concatenation)

t | u (union)

t* (kleene closure)

rev(t) (reversal)

l1 x l2 (cross-product)

t o u (composition)

algebraic operations on transducers

t u (concatenation)

t | u (union)

t* (kleene closure)

rev(t) (reversal)

l1 x l2 (cross-product)

cross-product

regular languages

(ab|ac) x (c|d)

ab
ac

c
d

t o u (composition)

0

<a:c> <a:d> 

<b:0> <c:0> 

1

2

algebraic operations on transducers

t u (concatenation)

t | u (union)

t* (kleene closure)

rev(t) (reversal)

l1 x l2 (cross-product)

t o u (composition)

composition

x

t

y
u

z

x

t     u

z

composition: product construction

t1

a:b

0

1

c:d

2

t2

b:x d:d

0

t3 = t1 o t2 

a:x

(0,0)

(1,0)

c:d

(2,0)

string rewriting operators

a    b / c _ d

   rewrite strings a as b when 
occuring between c and d      
example: (a|e|i|o|u)     0 / _ #

delete vowels at the ends of words

b c d f p t k 

0

a e i o u 
b c d f p t k 

a e i o u 

1

<a:0> <e:0> <i:0>

<o:0> <u:0> 

<a:0> <e:0> <i:0>

<o:0> <u:0> 

2

dif   cult to implement correctly in the general case

modeling morphology and phonology

ep  j  rjestelm  llistytt  m  tt  myydell    ns  k    nk  h  n

actual single finnish word (not a compound!) 
   perhaps even because of his/her/it not having an 
ability to not generalize herself/himself/itself    (maybe)

grammatically correct, semantics is elusive, akin to 
   colorless green ideas sleep furiously   

highly agglutinative languages like this have an 
astronomical number of    possible words   , even 
without considering neologisms

linguistics: a model of word production

(harris 1994). some alternations are shown below.

[i  ] 
station 
same 
fail 

[  $] 
day 
stayed 
rays 
playful

[  $]
pay them
say more
daily

[i  ] 
fate 
made 
raise 
baby 
1. 
2. 
3. 
4.  does it show the effect of non-derived environment blocking?

is the rule that produces [  $] a lexical rule?
is it a neutralization rule?
is it structure-preserving?

ep  j  rjestelm  llistytt  m  tt  myydell    ns  k    nk  h  n

modeled by a step-by-step generative process:

   un   +   system       +   ize   
9.6  beyond the surface representation
ep  +j  rjestelm  +lis+...

in  summary,  the  phonological  grammar  advocated  by  lexical  phonology  can  be 
schematized as in (13).

(13)

underlying representation

put morphemes together

lexical rules

   

lexical representation

postlexical rules

   

surface representation

phonemes and morphemes change
when they are conjoined, modeled by

phonological rules.

ep  j  rjestelm  llistytt  m  tt  myydell    ns  k    nk  h  n

   generative    word model

in+possible+ity

(1) pick morphemes from 
lexicon in right order and 
combinations (dictated by 

morphotactics)

   generative    word model

in+possible+ity

change n to m before p

(nasal assimilation)
im+possible+ity

(1) pick morphemes from 
lexicon in right order and 
combinations (dictated by 

morphotactics)

(2) apply sound change rules + 

orthographic rules

   generative    word model

(1) pick morphemes from 
lexicon in right order and 
combinations (dictated by 

morphotactics)

(2) apply sound change rules + 

orthographic rules

in+possible+ity

change n to m before p

(nasal assimilation)
im+possible+ity

ble+ity > bility

im+possibility

remove boundaries

impossibility

four tricks to model this

(1) extended operators (booleans, replacements)

(2) use alphabet independent algorithms

(cid:29)(cid:14)(cid:30)

(cid:29)(cid:31)(cid:30)

(cid:13)(cid:7)(cid:14)(cid:10)(cid:15)(cid:16)(cid:4)(cid:16)

(cid:13)(cid:7)(cid:14)(cid:10)(cid:15)(cid:16)(cid:4)(cid:16)

  * a   *

@ 

0

a 

@ a 

1

(3) treat automata as    repeating 
transducers    (   everything is a transducer   )

@ 

0

a 

@ a 

1

(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)

(cid:8)(cid:9)(cid:10)(cid:2)(cid:11)

(cid:8)(cid:9)(cid:10)(cid:2)(cid:12)

(cid:28)
(cid:28)
(cid:28)

(cid:8)(cid:9)(cid:10)(cid:2)(cid:7)

(cid:23)
(cid:6)
(cid:24)
(cid:25)
(cid:6)
(cid:16)
(cid:4)
(cid:21)
(cid:2)
(cid:20)
(cid:26)
(cid:17)
(cid:27)

(repeat every word that contains at least one a)

(cid:17)(cid:9)(cid:18)(cid:19)(cid:14)(cid:5)(cid:2)(cid:20)(cid:16)(cid:21)(cid:18)(cid:4)(cid:7)(cid:22)

(cid:17)(cid:9)(cid:18)(cid:19)(cid:14)(cid:5)(cid:2)(cid:20)(cid:16)(cid:21)(cid:18)(cid:4)(cid:7)(cid:22)

(4)  model lexicon as an fst (which may just repeat 
words)

figure 1.2. different fst models for morphological/phonological analysis and genera-
tion.

1.2. problems addressed

   generative    word model

(1) pick morphemes from 
lexicon in right order and 
combinations (dictated by 

morphotactics)

(2) apply sound change rules + 

orthographic rules

lexicon + morphology

in+possible+ity

change n to m before p

(nasal assimilation)
im+possible+ity
ble+ity     bility
im+possibility

remove boundaries

impossibility

   generative    word model

(1) pick morphemes from 
lexicon in right order and 
combinations (dictated by 

morphotactics)

(2) apply sound change rules + 

orthographic rules

lexicon + morphology

in+possible+ity
n    m / _ + p

im+possible+ity
ble+ity    bility
im+possibility

+     0

impossibility

   generative    word model

23

o 

r 

29

i 

t 

18

15

12

24

s 

e 

g 

k 

r 

19

16

13

25

s 

t 

e 

a 

20

17

30

10

+ 

s 
p 
u 

l 

14

11

27

b 

g 

22

26

i 

t 
l 

n 

21

31

l 

y 

28

e 

n 
a 

32

33

i 

e 

36

34

37

s 

l 

t 

35

c 

38

s 

y 

39

0

u i 

s 
a 

8

e 

u 

d 

2

5

3

6

+ 

n 

1

m 

t 

9

i 
o 

e 

4

7

in+possible+ity

@ + m p 

0

@ m p 

n 

<n:m> 

n 
+ 

@ + m 

n 

1

4

<n:m> 

<n:m> 

p 

2

+ 

3

(1) pick morphemes from 
lexicon in right order and 
combinations (dictated by 

morphotactics)

im+possible+ity

(2) apply sound change rules + 

@ + i l t y 

@ + e i l t y 

0

@ + e i t y 

b 

b 

1

@ e i l t y 

l 

b 

<l:i> 

@ + e l t y 

7

b 

2

e 

b 
<e:l> 

@ + e i l y 

8

b 

3

+ 

b 

9

i 

10

t 

<+:i> 

4

<i:t> 

5

<t:y> 

@ + e i l t 

<y:0> 

11

6

im+possibility

@ <+:0> 

0

impossibility

orthographical rules

...then compose

composition

in+possible+ity

0

d

 

s
 

a
 

2

5

1

u

 
i
 

e
 

u

 

3

6

<
+
:
0
>

 

e
 

m

 

t
 

1
0

4

7

n

 

<
n
:
m
>

 

i
 

o

 

2
2

<
+
:
0
>

 

1
1

8

<
+
:
0
>

 

<
+
:
0
>

 

2
3

9

1
2

s
 

u

 

l
 

s
 

u

 

l
 

p

 

p

 

2
7

3
3

2
4

1
3

t
 

i
 

o

 

r
 

2
8

2
5

1
7

1
4

r
 

g

 

k

 

s
 

e
 

2
9

2
6

1
8

1
5

a
 

e
 

s
 

t
 

3
0

3
4

1
9

1
6

n

 

i
 

l
 

t
 

2
0

3
5

3
1

b

 

g

 

2
1

l
 

y
 

3
2

e
 

3
6

a
 

n
 

i
 

3
7

4
0

e
 

4
1

3
8

t
 

l
 

s
 

4
2

c
 

3
9

y
 

s
 

4
3

impossibility

23

o 

r 

29

i 

t 

18

15

12

24

s 

e 

g 

k 

r 

19

16

13

25

s 

t 

e 

a 

20

17

30

10

+ 

s 
p 
u 

l 

14

11

27

b 

g 

22

26

i 

t 
l 

n 

21

31

l 

y 

28

e 

n 
a 

32

33

i 

e 

36

34

37

s 

l 

t 

35

c 

38

s 

y 

39

0

u i 

s 
a 

8

e 

u 

d 

2

5

3

6

+ 

n 

1

m 

t 

9

i 
o 

e 

4

7

in+possible+ity

@ + m p 

0

@ m p 

n 

<n:m> 

n 
+ 

@ + m 

n 

1

4

<n:m> 

<n:m> 

p 

2

+ 

3

im+possible+ity

@ + i l t y 

@ + e i l t y 

0

@ + e i t y 

b 

b 

1

@ e i l t y 

l 

b 

<l:i> 

@ + e l t y 

7

b 

2

e 

b 
<e:l> 

@ + e i l y 

8

b 

3

+ 

b 

9

i 

10

t 

<+:i> 

4

<i:t> 

5

<t:y> 

@ + e i l t 

<y:0> 

11

6

im+possibility

@ <+:0> 

0

impossibility

adding grammatical information
we   d like to be able to get parses with grammatical 

information:

impossibilities => neg+possible+ity+noun+plural

vs.

in+possible+ity+s

adding grammatical information
we   d like to be able to get parses with grammatical 

information:

impossibilities => neg+possible+ity+noun+plural

vs.

in+possible+ity+s

solution: make lexicon a transduction:

in:

neg+possible+ity+noun+plural

23

o 

r 

29

i 

t 

18

15

12

24

s 

e 

g 

k 

r 

19

16

13

25

s 

t 

e 

a 

20

17

30

10

+ 

s 
p 
u 

l 

14

11

27

b 

g 

22

26

i 

t 
l 

n 

21

31

l 

y 

28

e 

n 
a 

32

33

i 

e 

36

34

37

s 

l 

t 

35

c 

38

s 

y 

39

0

u i 

s 
a 

8

e 

u 

d 

2

5

3

6

+ 

n 

1

m 

t 

9

i 
o 

e 

4

7

lex. transducer

out:

in+possible+ity+s

composition

neg+possible+ity+noun+plural

23

o 

r 

29

i 

t 

18

15

12

24

s 

e 

g 

k 

r 

19

16

13

25

s 

t 

e 

a 

20

17

30

10

+ 

s 
p 
u 

l 

14

11

27

b 

g 

22

26

i 

t 
l 

n 

21

31

l 

y 

28

e 

n 
a 

32

33

i 

e 

36

34

37

s 

l 

t 

35

c 

38

s 

y 

39

0

u i 

s 
a 

8

e 

u 

d 

2

5

3

6

+ 

n 

1

m 

t 

9

i 
o 

e 

4

7

in+possible+ity+s

@ + m p 

0

@ m p 

n 

<n:m> 

n 
+ 

@ + m 

n 

1

4

<n:m> 

<n:m> 

p 

2

+ 

3

im+possible+ity+s

@ + i l t y 

@ + e i l t y 

0

@ + e i t y 

b 

b 

1

@ e i l t y 

l 

b 

<l:i> 

@ + e l t y 

7

b 

2

e 

b 
<e:l> 

@ + e i l y 

8

b 

3

+ 

b 

9

i 

10

t 

<+:i> 

4

<i:t> 

5

<t:y> 

@ + e i l t 

<y:0> 

11

6

im+possibility+s

@ <+:0> 

0

impossibilities

composition

neg+possible+ity+noun+plural

23

o 

r 

29

i 

t 

18

15

12

24

s 

e 

g 

k 

r 

19

16

13

25

s 

t 

e 

a 

20

17

30

10

+ 

s 
p 
u 

l 

14

11

27

b 

g 

22

26

i 

t 
l 

n 

21

31

l 

y 

28

e 

n 
a 

32

33

i 

e 

36

34

37

s 

l 

t 

35

c 

38

s 

y 

39

0

u i 

s 
a 

8

e 

u 

d 

2

5

3

6

+ 

n 

1

m 

t 

9

i 
o 

e 

4

7

in+possible+ity+s

@ + m p 

0

@ m p 

n 

<n:m> 

n 
+ 

@ + m 

n 

1

4

<n:m> 

<n:m> 

p 

2

+ 

3

im+possible+ity+s

@ + i l t y 

@ + e i l t y 

0

@ + e i t y 

b 

b 

1

@ e i l t y 

l 

b 

<l:i> 

@ + e l t y 

7

b 

2

e 

b 
<e:l> 

@ + e i l y 

8

b 

3

+ 

b 

9

i 

10

t 

<+:i> 

4

<i:t> 

5

<t:y> 

@ + e i l t 

<y:0> 

11

6

im+possibility+s

@ <+:0> 

0

impossibilities

neg+possible+ity+noun+plural

0

d

 

s
 

a
 

2

5

1

u

 
i
 

e
 

u

 

3

6

<
+
:
0
>

 

e
 

m

 

t
 

1
0

4

7

n

 

<
n
:
m
>

 

i
 

o

 

2
2

<
+
:
0
>

 

1
1

8

<
+
:
0
>

 

<
+
:
0
>

 

2
3

9

1
2

s
 

u

 

l
 

s
 

u

 

l
 

p

 

p

 

2
7

3
3

2
4

1
3

t
 

i
 

o

 

r
 

2
8

2
5

1
7

1
4

r
 

g

 

k

 

s
 

e
 

2
9

2
6

1
8

1
5

a
 

e
 

s
 

t
 

3
0

3
4

1
9

1
6

n

 

i
 

l
 

t
 

2
0

3
5

3
1

b
 

g
 

2
1

l
 

y
 

3
2

e
 

3
6

a
 

n
 

i
 

3
7

4
0

e
 

4
1

3
8

t
 

l
 

s
 

4
2

c
 

3
9

y

 

s
 

4
3

impossibility

compilers

several    nite-state compilers available to do the 
hard work 

 - xerox xfst (http://www.id122book.com)
 - sfst (https://code.google.com/p/cistern/wiki/
sfst)
 - hfst (http://hfst.sf.net)
 - openfst (http://www.openfst.org)
 - foma (http://foma.googlecode.com)

demo with foma

