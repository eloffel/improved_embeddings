lecture 16: 

the cky parsing algorithm

kai-wei chang

cs @ university of virginia

kw@kwchang.net

couse webpage: http://kwchang.net/teaching/nlp16

cs6501: nlp

1

how to represent the structure

cs6501: nlp

2

phrase structure (constituency) trees

v can be modeled by context-free grammars
v we will see how constituent parse and 

dependency parse are related

cs6501: nlp

3

parse tree defined by id18

1
2
3
4
5
6
7

cs6501: nlp

4

na  ve top-down parsing

v # possible trees is exponential
v many sub-trees are the same

cs6501: nlp

5

two key issues

v computational complexity

v can we reuse the computations? 

id145

v ambiguity 

v (lexicalized) pid18

cs6501: nlp

6

chomsky normal form

v chomsky normal form allows only two 

kinds of right-hand sides:

v two non-terminals:  (e.g., vp     adv vp)
v one terminal: vp     eat

v any id18 can be rewritten into an 
equivalent chomsky normal form

cs6501: nlp

7

chomsky normal form

v chomsky normal form allows only two 

kinds of right-hand sides:

v two non-terminals:  (e.g., vp     adv vp)
v one terminal: vp     eat
v try this: vp     vbd np pp pp

v any id18 can be rewritten into an 
equivalent chomsky normal form

cs6501: nlp

8

v eliminate rules with non-solitary terminals

more about the conversion

           $       	       (
add y*        and replace the rule with 
           $       *	       (, y*       
v eliminate right-hand sides with >2 nonterminals
           $       .	       (
           $    $,    $       0    0,   ,    (10       (1$    (
           	
replace each rule            $    0 with	a       $    0

v remove unit rules

replace the rule by

cs6501: nlp

9

one more example 

v example from https://en.wikipedia.org/wiki/chomsky_normal_form

<s>
    expr
    term
expr
term     factor
factor     primary
primar
y
addop    	+
mulop    	*

    number

| expr addop term
| term mulop factor
| factor ^ primary

| addop term

| variable

|	( expr )

|	   
|	/

cs6501: nlp

10

let   s try to parse!

   papa ate the caviar with a spoon   
0
7

6

1

2

3

4

5

s    np vp
np    det n
np    np pp
vp    v np
vp    vp pp
pp    p np

np	   papa
n	   caviar
n	   spoon
v	   spoon
v	   ate
p	   with
det    the
det    a

the	following	 slides	are	modified	 from	jason	eisner   s	nlp	course

cs6501: nlp

11

   initialize the list with parts-of-speech (non-terminal)

   papa ate  the caviar with  a   spoon   

np    v   det n      p     det n

   for each constituent on the list

   for each adjacent constituent on the list

   for each rule to combine them

   add the result to the list

if it   s not already there

   if the above loop added anything, do it again!

cs6501: nlp

12

   papa ate the caviar with a spoon   
7
0

6

1

2

3

4

5

3rd pass
      

1st pass
   np 2 4
   np 5 7

2nd pass
   vp 1 4
   np 2 4
   pp 4 7
   np 5 7

initialize
   np 0 1
   v 1 2
   det 2 3
   n 3 4
   p 4 5
   det 5 6
   n 6 7
   v 6 7 

cs6501: nlp

13

this	is	correct,	but	we	repeatedly	check	same	pairs!

cs6501: nlp

14

what are the problems?

we kept checking the same pairs that we   d 
checked before (both bad and good pairs)
can   t we manage the process in a way that avoids 

duplicate work?

and even finding new pairs was expensive 

because we had to scan the whole list

can   t we have some kind of index that will help us 

find adjacent pairs?

cs6501: nlp

15

indexing: store s 0 4 in chart[0,4]

s    np vp
np    det n
np    np pp
vp    v np
vp    vp pp
pp    p np

every	cell	stores	constituents	found	between	i and	j

cs6501: nlp

16

avoid duplicate work: 

s    np vp
np    det n
np    np pp
vp    v np
vp    vp pp
pp    p np

cs6501: nlp

17

how to build a width-6 phrase

?

cs6501: nlp

s    np vp
np    det n
np    np pp
vp    v np
vp    vp pp
pp    p np
1	7 =

1	2	+	2	7		j

1	3	+	3	7

1	4	+	4	7		j

1	5	+	5	7

1	6	+	6	7

18

cky algorithm

   for j := 1 to n

   add to [j-1,j] all categories for the jth word

   for width := 2 to n

   for start := 0 to n-width                  // this is i
   define end := start + width        // this is j
   for mid := start+1 to end-1        // find all i-to-j phrases

for every nonterminal z in [mid,end]

   for every nonterminal y in [start,mid]
  
  
  
  

if x    y z is in the grammar

then add x to [start,end]

for all nonterminals x

cs6501: nlp

19

cky algorithm

  for j := 1 to n

  add to [j-1,j] all categories for the jth word

  for width := 2 to n

  for start := 0 to n-width                  // this is i
  define end := start + width        // this is j
  for mid := start+1 to end-1        // find all i-to-j phrases

  for every rule x    y z in the grammar
if y in [start,mid] and z in [mid,end]

then add x to [start,end] 

cs6501: nlp

20

cky parsing algorithm

v save the results in a table and reuse the 

computations 

v id145:

v complexity:         6    
    :	length of the sentence, 
|    |: size of grammar

v assume id18 is in chomsky normal form

cs6501: nlp

21

your turn!

               	        
               	        
                   	        
               		        
                   	        

np		v													np											p																					np

cs6501: nlp

22

               	        
               	        
                   	        
               		        
                   	        
    

cs6501: nlp

23

id203 context-free grammars

cs6501: nlp

24

likelihood of a parse tree

cs6501: nlp

25

probabilistic cky

cs6501: nlp

26

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

0

1

2
3
4

note	that	the	in	the	following	animation	
we	consider	   minimizing	the	loss   .	the	
algorithm	that	   maximizes	the	id203   	
will	be	similar.	

np 4
vp 4

p 2
v 5

det 1

n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

the	following	 slides	are	modified	 from	jason	eisner   s	nlp	course

cs6501: nlp

27

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

0

1

2
3
4

np 4
vp 4

p 2
v 5

det 1

n 8

cs6501: nlp

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

28

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10

0

1

2
3
4

np 4
vp 4

p 2
v 5

det 1

n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s

0

1

2
3
4

np 4
vp 4

p 2
v 5

det 1

n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

p 2
v 5

det 1

n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

0

1

2
3
4

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

p 2
v 5

det 1

n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

0

1

2
3
4

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

p 2
v 5

det 1

np 10
n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

0

1

2
3
4

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

p 2
v 5

det 1

np 10
n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

0

1

2
3
4

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

p 2
v 5

det 1

pp 12

np 10
n 8

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

p 2
v 5

det 1

pp 12
vp 16
np 10
n 8

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

p 2
v 5

det 1

pp 12
vp 16
np 10
n 8

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

np 18

pp 12
vp 16
np 10
n 8

p 2
v 5

det 1

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

np 18
21
s

pp 12
vp 16
np 10
n 8

p 2
v 5

det 1

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

p 2
v 5

det 1

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

p 2
v 5

det 1

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

p 2
v 5

det 1

np 24

np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

p 2
v 5

det 1

np 24
22
s

np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

p 2
v 5

det 1

np 24
22
s
s
27

np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

p 2
v 5

det 1

np 24
22
s
s
27

np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

p 2
v 5

det 1

np 24
22
s
s
27
np 24

np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

p 2
v 5

det 1

np 24
22
s
s
27
np 24
s
27

np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

p 2
v 5

det 1

np 24
22
s
s
27
np 24
s
27
22
s

np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

p 2
v 5

det 1

np 24
22
s
s
27
np 24
s
27
s
22
s
27
np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np 

follow backpointers    
time 1   flies 2     like 3      an 4    arrow 5

s

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

p 2
v 5

det 1

np 24
22
s
s
27
np 24
s
27
s
22
s
27
np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

here	we	consider	
minimizing	 the	
   loss   .	so	we	pick	
the	one	with	the	
minimal	loss

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

p 2
v 5

det 1

np 24
22
s
s
27
np 24
s
27
s
22
s
27
np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

s

np vp

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

p 2
v 5

det 1

np 24
22
s
s
27
np 24
s
27
s
22
s
27
np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

s

np vp

vp

pp

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

p 2
v 5

det 1

np 24
22
s
s
27
np 24
s
27
s
22
s
27
np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

s

np vp

vp

pp
p np

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

p 2
v 5

det 1

np 24
22
s
s
27
np 24
s
27
s
22
s
27
np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

s

np vp

vp

pp
p np

det n

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

which entries do we need?
time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

p 2
v 5

det 1

np 24
22
s
s
27
np 24
s
27
s
22
s
27
np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

which entries do we need?
time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

p 2
v 5

det 1

np 24
22
s
s
27
np 24
s
27
s
22
s
27
np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

not worth keeping    
time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

p 2
v 5

det 1

np 24
22
s
s
27
np 24
s
27
s
22
s
27
np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

    since it just breeds worse options
time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

np 4
vp 4

0

1

2
3
4

p 2
v 5

det 1

np 24
22
s
s
27
np 24
s
27
s
22
s
27
np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

keep only best-in-class!
time 1   flies 2     like 3      an 4    arrow 5

np 3
vst 3

np 10
8
s
s
13

inferior stock

np 4
vp 4

p 2
v 5

det 1

0

1

2
3
4

np 24
22
s
s
27
np 24
s
27
s
22
s
27
np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

keep only best-in-class!

(and its backpointers so you can recover best parse)

time 1   flies 2     like 3      an 4    arrow 5
0 np 3
vst 3

np 10
8
s
np 4
vp 4

p 2
v 5

det 1

1

2
3
4

np 24
22
s
np 18
s
21
vp 18
pp 12
vp 16
np 10
n 8

1  s     np vp
6  s     vst np
2  s     s pp
1  vp     v np
2  vp     vp pp
1  np     det n
2  np     np pp
3  np     np np
0  pp     p np

weighted cky: viterbi algorithm

    initialize all entries of chart to    
    for i := 1 to n

    for each rule r of the form x    word[i]

    chart[x,i-1,i] max ( weight(r) )

    for width := 2 to n

    for start := 0 to n-width

    define end := start + width
    for mid := start+1 to end-1

    for each rule r of the form x    y z 
   

chart[x,start,end] = max( weight(r) +

chart[y,start,mid] + chart[z,mid,end])

    return chart[root,0,n]

cs6501: nlp

61

