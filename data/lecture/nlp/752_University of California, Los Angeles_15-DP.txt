lecture 15: 

id33

kai-wei chang

cs @ university of virginia

kw@kwchang.net

couse webpage: http://kwchang.net/teaching/nlp16

cs6501: nlp

1

how to represent the structure

cs6501: nlp

2

dependency trees

v dependency grammar describe the 

structure of sentences as a graph (tree)
v nodes represent words
v edges represent dependencies

v idea goes back to 4th century bc

in ancient india

cs6501: nlp

3

phrase structure (constituent parse) trees

v can be modeled by context-free grammars
v we will see how constituent parse and 

dependency parse are related

cs6501: nlp

4

context-free grammars

pp	    p	np
pp	    p	dt	n
pp	    in	the	garden

non-terminal:	dt,	n,	p,	np,	pp,	   
terminal:		the,	a,	ball,	garden

cs6501: nlp

5

generate sentences by id18

cs6501: nlp

6

parse tree defined by id18

1
2
3
4
5
6
7

rule	2 rule	4	&	1

rule	6

cs6501: nlp

7

example: noun phrases

cs6501: nlp

8

example: verb phrase

cs6501: nlp

9

sentences

cs6501: nlp

10

constituent parse

from:	kevin	gimpel

cs6501: nlp

11

constituent parse

non-terminal

s	   np	vp
np	   dt	nn
np    dt	
pp	    in	np
vp	    vbd	pp
vp	    np	vbd	np
vp	    np	vb

terminal

cs6501: nlp

12

nonterminal in id32

cs6501: nlp

13

probabilistic context-free grammar

non-terminal

1.0		s	   np	vp									
0.6		np	   dt	nn
0.4		np	   np	pp
1.0		pp		   in	np
0.5		vp		   vbd	pp
0.2		vp		   np	vbd	np
0.3		vp		   np	vb

terminal

cs6501: nlp

14

probabilistic context-free grammar

v pid18 achieves ~73% on ptb
v state-of-the art ~92%

v lexicalized pid18

(collins 1997)

cs6501: nlp

15

cs6501: nlp

16

how to decide head?

v usually use deterministic head rules 

(e.g., collins head rules)

v define heads in id18

v s     np  vp
v vp     vbd np  pp
v np     dt jj  nn

from	noah	smith

cs6501: nlp

17

lexical head annotation

cs6501: nlp

18

constituent parse    dependency parse  

cs6501: nlp

19

constituent parse    dependency parse  

cs6501: nlp

20

head	rules	can	be	used	to	extract	dependency	parse	from	a	id18

cs6501: nlp

21

arrow	types	show	the	name	of	grammatical	relations

cs6501: nlp

22

id33

v can be more flexible (non-projective)
v english are mostly projective

v some free word order languages  (e.g., czech) 

are non-projective 

cs6501: nlp

23

how to build a dependency tree?

v there are several approaches
v graph algorithms

v consider all word pairs
v create a maximum spanning tree for a sentence

v transition-base approaches

v similar to how we parse a program:

shift-reduce parser

v many other approaches   

cs6501: nlp

24

sources of information for dp

v lexical affinities

v [ issues     the ]
v [ issues     i ]

v distances 

v words usually depend on nearby words

v valency of heads

v # dependents  for a head

cs6501: nlp

25

graph-based approaches[mcdonald et al. 2005]

v consider all word pairs and assign scores
v score of a tree = sum of score of edges
v can be solve as a mst problem

v chu-liu-edmonds

cs6501: nlp

26

transition-based parser

v maltparser (nivre et al. 2008)
v similar to a shift-reduce parser

v the parser has:

v but    reduce    actions can create dependencies

v a stack         starts with a    root    symbol
v a buffer         starts with the input sentence

v a set of dependency  arcs a    starts off empty
v use a set of actions to parse sentences

v many possible action sets

cs6501: nlp

27

   
   

arc-eager dependency parser

v shift:    

root

joe likes	mary

precondition:	    %    root	&	(    (,    %)       

joe
root

v left-arc: 

likes	mary

joe
root

likes	mary

likes	mary

root

joe

cs6501: nlp

28

arc-eager dependency parser

v right-arc    

like				
root

   
precondition:	(    (,    %)       
   

mary

mary
like
root

joe

v reduce: 

joe

joe

joe

mary
like
root

mary

like
root

cs6501: nlp

29

arc-eager dependency parser

v start:
v conduct a sequence of actions

v terminate with     ,    =   

cs6501: nlp

30

cs6501: nlp

31

cs6501: nlp

32

cs6501: nlp

33

cs6501: nlp

34

cs6501: nlp

35

cs6501: nlp

36

cs6501: nlp

37

cs6501: nlp

38

cs6501: nlp

39

cs6501: nlp

40

cs6501: nlp

41

cs6501: nlp

42

cs6501: nlp

43

cs6501: nlp

44

cs6501: nlp

45

cs6501: nlp

46

cs6501: nlp

47

it   s your turn

v happy children like to play with their friend .

v shift	    left-arc	    shift	    left-arc 
   	right-arc     shift   	left-arc   	right-arc 
   	right-arc      shift   	left-arc    	right-arc 
   	reduce*3   	right-arc    	reduce*3 

cs6501: nlp

48

from	chris	manning

cs6501: nlp

49

cs6501: nlp

50

id170    beyond 
sequence tagging
assign values to a set of interdependent output variables

task

input

output

part-of-speech
tagging

they  operate   
ships and banks.

dependency 
parsing

they  operate   
ships and banks.

pronoun

verb

noun

and

noun

root they			operate			ships				and				banks		.

51

