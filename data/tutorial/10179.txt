2
1
0
2

 

b
e
f
5
1

 

 
 
]
s
d
.
s
c
[
 
 

1
v
1
6
2
3

.

2
0
2
1
:
v
i
x
r
a

quick detection of nodes
with large degrees

konstantin avrachenkov, nelly litvak, marina sokol,
don towsley

g
n
e
+
r
f
-
-
1
8
8
7
-
-

research
report
n   7881
february 2012

project-team maestro

n
r
s

i

9
9
3
6
-
9
4
2
0
n
s
s

i

/

r
r
a
r
n

i

i

quick detection of nodes with large degrees

konstantin avrachenkov   , nelly litvak   , marina sokol   ,

don towsley  

project-team maestro

research report n   7881     february 2012     13 pages

our goal is to quickly    nd top k lists of nodes with the largest degrees in large
abstract:
complex networks. if the adjacency list of the network is known (not often the case in complex
networks), a deterministic algorithm to    nd a node with the largest degree requires an average
complexity of o(n), where n is the number of nodes in the network. even this modest complexity
can be very high for large complex networks. we propose to use the random walk based method.
we show theoretically and by numerical experiments that for large networks the random walk
method    nds good quality top lists of nodes with high id203 and with computational savings
of orders of magnitude. we also propose stopping criteria for the random walk method which
requires very little knowledge about the structure of the network.

key-words: complex networks, detection of nodes with the largest degrees, top k list, random
walk, stopping criteria

    inria sophia antipolis, france, k.avrachenkov@sophia.inria.fr
    university of twente, the netherlands, n.litvak@utwente.nl
    inria sophia antipolis, france, marina.sokol@sophia.inria.fr
   university of massachusetts amherst, usa, towsley@cs.umass.edu

research centre
sophia antipolis     m  diterran  e

2004 route des lucioles - bp 93
06902 sophia antipolis cedex

d  tection rapide de noeuds    degr  s   lev  s

notre objectif est de trouver rapidement dans les grands r  seaux complexes top
r  sum   :
k listes de noeuds avec les plus grands degr  s. si la liste d   adjacence du r  seau est connu (pas
souvent le cas dans les r  seaux complexes), un algorithme d  terministe pour trouver un noeud
avec le plus grand degr   n  cessite une complexit   moyenne de o(n), o   n est le nombre de noeuds
dans le r  seau. m  me cette complexit   modeste peut   tre tr  s   lev   pour les grands r  seaux
complexes. nous proposons d   utiliser une m  thode bas   sur le marche al  atoire. nous montrons
th  oriquement et par exp  rimentations num  riques que pour les grands r  seaux la m  thode de
marche al  atoire trouve top k listes de bonne qualit   avec une forte probabilit   de r  ussite et
avec des   conomies de calcul de plusieurs ordres de grandeur. nous proposons   galement des
crit  res d   arr  t pour la m  thode de marche al  atoire qui ne n  cessite pas de connaissance de la
structure du r  seau.

mots-cl  s :
marche al  atoire, crit  res d   arr  t

r  seaux complexes, d  tection de noeuds avec les plus grands degr  s, top k liste,

quick detection of nodes with large degrees

3

1 introduction

we are interested in quickly detecting nodes with large degrees in very large networks. firstly,
node degree is one of centrality measures used for the analysis of complex networks. secondly,
large degree nodes can serve as proxies for central nodes corresponding to the other centrality
measures as betweenness centrality or closeness centrality [8, 9]. in the present work we restrict
ourself to undirected networks or symmetrized versions of directed networks.
in particular,
this assumption is well justi   ed in social networks. typically, friendship or acquaintance is
a symmetric relation.
if the adjacency list of the network is known (not often the case in
complex networks), the straightforward method that comes to mind is to use one of the standard
sorting algorithms like quicksort or heapsort. however, even their modest average complexity,
o(n log(n)), can be very high for very large complex networks. in the present work we suggest
using random walk based methods for detecting a small number of nodes with the largest degree.
the main idea is that the random walk very quickly comes across large degree nodes. in our
numerical experiments id93 outperform the standard sorting procedures by orders of
magnitude in terms of computational complexity. for instance, in our experiments with the web
graph of the uk domain (about 18 500 000 nodes) the random walk method spends on average
only about 5 400 steps to detect the largest degree node. potential memory savings are also
signi   cant since the method does not require knowledge of the entire network. in many practical
applications we do not need a complete ordering of the nodes and even can tolerate some errors
in the top list of nodes. we observe that the random walk method obtains many nodes in the top
list correctly and even those nodes that are erroneously placed in the top list have large degrees.
therefore, as typically happens in randomized algorithms [12, 13], we trade o    exact results for
very good approximate results or for exact results with high id203 and gain signi   cantly in
computational e   ciency.

the paper is organized as follows: in the next section we introduce our basic random walk
with uniform jumps and demonstrate that it is able to quickly    nd large degree nodes. then,
in section 3 using con   guration model we provide an estimate for the necessary number of steps
for the random walk. in section 4 we propose stopping criteria that use very little information
about the network. in section 5 we show the bene   ts of allowing few erroneous elements in the
top k list. finally, we conclude the paper in section 6.

2 random walk with uniform jumps

let us consider a random walk with uniform jumps which serves as a basic algorithm for quick
detection of large degree nodes. the random walk with uniform jumps is described by the
following transition probabilities [1]

pij =(   /n+1

di+   ,
  /n
di+   ,

if i has a link to j,
if i does not have a link to j,

(1)

where di is the degree of node i. the random walk with uniform jumps can be regarded as a
random walk on a modi   ed graph where all the nodes in the graph are connected by arti   cial
edges with a weight   /n. the parameter    controls the rate of jumps. introduction of jumps
helps in a number of ways. as was shown in [1], it reduces the mixing time to stationarity. it also
solves a problem encountered by a random walk on a graph consisting of two or more components,
namely the inability to visit all nodes. the random walk with jumps also reduces the variance
of the network function estimator [1]. this random walk resembles the id95 random walk.
however, unlike the id95 random walk, the introduced random walk is reversible. one

rr n   7881

4

k. avrachenkov & n. litvak & m. sokol & d. towsley

important consequence of the reversibility of the random walk is that its stationary distribution
is given by a simple formula

  i(  ) =

di +   

2|e| + n  

   i     v,

(2)

from which the stationary distribution of the original random walk can easily be retrieved. we
observe that the modi   cation preserves the order of the nodes    degrees, which is particularly
important for our application.

we illustrate on several network examples how the random walk helps us quickly detect large
degree nodes. we consider as examples one synthetic network generated by the preferential
attachment rule and two natural large networks. the preferential attachment (pa) network
combines 100 000 nodes. it has been generated according to the generalized preferential attach-
ment mechanism [6]. the average degree of the pa network is two and the power law exponent
is 2.5. the    rst natural example is the symmetrized web graph of the whole uk domain crawled
in 2002 [4]. the uk network has 18 520 486 nodes and its average degree is 28.6. the second
natural example is the network of co-authorships of dblp [5]. each node represents an author
and each link represents a co-authorship of at least one article. the dblp network has 986 324
nodes and its average degree is 6.8.

we carry out the following experiment: we initialize the random walk (1) at a node chosen
according to the uniform distribution and continue the random walk until we hit the largest
degree node. the largest degrees for the pa, uk and dblp networks are 138, 194 955, and
979, respectively. for the pa network we have made 10 000 experiments and for the uk and
dblp networks we performed 1 000 experiments (these networks were too large to perform more
experiments).

in figue 1 we plot the histograms of hitting times for the pa network. the    rst remarkable
observation is that when    = 0 (no restart) the average hitting time, which is equal to 123 000,
is nearly three orders of magnitude larger than 3 720, the hitting time when    = 2. the second
remarkable observation is that 3 720 is not too far from the value

1/  max(  ) = (2|e| + n  )/(dmax +   ) = 2 857,

which corresponds to the average return time to the largest degree node in the random walk with
jumps.

10000

8000

6000

4000

2000

0
0

0.5

1

1.5

2

2.5
x 106

(a)    = 0

6000

5000

4000

3000

2000

1000

0
0

1

2

3

4
x 104

(b)    = 2

figure 1: histograms of hitting times in the pa network.

we were not able to collect a representative number of experiments for the uk and dblp
networks when    = 0. the reason for this is that the random walk gets stuck either in disconected

inria

quick detection of nodes with large degrees

5

or weakly connected components of the networks. for the uk network we were able to make
1 000 experiments with    = 0.001 and obtain the average hitting time 30 750. whereas if we take
   = 28.6 for the uk network, we obtain the average hitting time 5 800. note that the expected
return time to the largest degree node in the uk network is given by

1/  max(  ) = (2|e| + n  )/(dmax +   ) = 5 432.

for the dblp graph we conducted 1 000 experiments with    = 0.00001 and obtained an average
hitting time of 41 131. whereas if we take    = 6.8, we obtain an average hitting time of 14 200.
the expected return time to the largest degree node in the dblp network is given by

1/  max(  ) = (2|e| + n  )/(dmax +   ) = 13 607.

the two natural network examples con   rm our guess that the average hitting time for the largest
degree node is fairly close to the average return time to the largest degree node. let us also
con   rm our guess with asymptotic analysis.

theorem 1 without loss of generality, index the nodes such that node 1 has the largest degree,
(1, i)     e, i = 2, ..., s, s = d1 + 1, and let    denote the initial distribution of the random walk with
jumps. then, the expected hitting time to node 1 starting from any initial distribution    is given
by

e  [t1] = pn

i=2 di + (n     1)  
d1 + 2  (1     1/n)

+ o(cid:18) min

i=2,...,s

{(di +   ), n}(cid:19) ,

proof: the expected hitting time from distribution    to node 1 is given by the formula

e   [t1] =   [i     p   1]   11,

(3)

(4)

where p   1 is a taboo id203 matrix (i.e., matrix p with the 1-st row and 1-st column
removed). the matrix p   1 is substochastic but is very close to stochastic. let us represent it as
a stochastic matrix minus some perturbation term:

p   1 =   p       q =   p    

0
. . .

1+2  /n

d2+  

0

0

1+2  /n

ds+  

2  /n

ds+1+  

0

. . .
0

0

2  /n
dn+  

   

                                 

   

                                 

we add missing id203 mass to the diagonal of   p , which corresponds to an increase in the
weights for self-loops. the matrix   p represents a reversible markov chain with the stationary
distribution

    j =

dj +   

i=2 di + (n     1)  

.

pn

now we can use the following result from the perturbation theory (see lemma 1 in [2]):

[i       p +   q]   1 =

1    

    (  q)1

+ x0 +   x1 + ... ,

(5)

rr n   7881

6

k. avrachenkov & n. litvak & m. sokol & d. towsley

where      is the stationary distribution of the stochastic matrix   p .
in our case, the quantity
maxi=2,...,s{1/(di +   ), 1/n} will play the role of   . we apply the series (5) to approximate the
expected hitting time. towards this goal, we calculate

n

    (  q)1 =

    j  qjj

xj=2
xj=s+1

+

n

=

s

xj=2

pn

=

dj +   

i=2 di + (n     1)  

1 + 2  /n

dj +   

d1(1 + 2  /n) + (n     d1     1)(2  /n)

observing that   1    1 = 1, we obtain (3).

i=2 di + (n     1)  

pn

dj +   

i=2 di + (n     1)  

2  /n
dj +   

d1 + 2  (1     1/n)
i=2 di + (n     1)  

.

pn
pn

=

(cid:3)
indeed, the asymptotic expression (3) is very close to (2|e| + n  )/(d1 +   ), which is the

expected return time to node 1.

based on the notion of the hitting time we propose an e   cient method for quick detection of
the top k list of largest degree nodes. the algorithm maintains a top k candidate list. note that
once one of the k nodes with the largest degrees appears in this candidate list, it remains there
subsequently. thus, we are interested in hitting events. we propose the following algorithm for
detecting the top k list of largest degree nodes.

algorithm 1 random walk with jumps and candidate list

1. set k,    and m.

2. execute a random walk step according to (1).

3. check if the current node has a larger degree than one of the nodes in the current top k
candidate list. if it is the case, insert the new node in the top-k candidate list and remove
the worst node out of the list.

4. if the number of random walk steps is less than m, return to step 2 of the algorithm. stop,

otherwise.

the value of parameter    is not crucial. in our experiments, we have observed that as long as
the value of    is neither too small nor not too big, the algorithm performs well. a good option
for the choice of    is a value slightly smaller than the average node degree. let us explain this
choice by calculating a id203 of jump in the steady state

  j(  )

  

dj +   

=

n

xj=1

n

xj=1

dj +   

  

2|e| + n  

dj +   

=

n  

2|e| + n  

=

  

2|e|/n +   

.

if    is equal to 2|e|/n, the average degree, the random walk will jump in the steady state on
average every two steps. thus, if we set    to the average degree or to a slightly smaller value,
on one hand the random walk will quickly converge to the steady state and on the other hand
we will not sample too much from the uniform distribution.

the number of random walk steps, m, is a crucial parameter. our experiments indicate that
we obtain a top k list with many correct elements with high id203 if we take the number
of random walk steps to be twice or thrice as large as the expected hitting time of the nodes in
the top k list. from theorem 1 we know that the hitting time of the large degree node is related
to the value of the node   s degree. thus, the problem of choosing m reduces to the problem of
estimating the values of the largest degrees. we address this problem in the following section.

inria

quick detection of nodes with large degrees

7

3 estimating the largest degrees in the con   guration net-

work model

the estimations for the values of the largest degrees can be derived in the con   guration network
model [7] with a power law degree distribution. in some applications the knowledge of the power
law parameters might be available to us. for instance, it is known that web graphs have power
law degree distribution and we know typical ranges for the power law parameters.

we assume that the node degrees d1, . . . , dn are i.i.d. random variables with a power law
distribution f and    nite expectation e[d]. let us determine the number of links contained in
the top k nodes. denote

f (x) = p [d     x],

  f (x) = 1     f (x),

x     0.

further let d(1)     . . .     d(n) be the order statistics of d1, . . . , dn. under the assumption that
dj   s obey a power law, we use the results from the extreme value theory as presented in [11], to
state that there exist sequences of constants (an) and (bn) and a constant    such that

lim
n      

n   f (anx + bn) = (1 +   x)   1/  .

(6)

this implies the following approximation for high quantiles of f , with exceedance id203
close to zero [11]:

xp     an

(pn)          1

  

+ bn.

for the jth largest degree, where j = 2, . . . , k, the estimated exceedance id203 equals
(j     1)/n, and thus we can use the quantile x(j   1)/n to approximate the degree d(j) of this node:

d(j)     an

(j     1)          1

  

+ bn.

(7)

the sequences (an) and (bn) are easy to    nd for a given shape of the tail of f . below we
derive the corresponding results for the commonly accepted pareto tail distribution of d, that
is,

  f (t) = cx     

for x > x   ,

(8)

where    > 1 and x    is a    xed su   ciently large number so that the power law degree distribution
is observed for nodes with degree larger than x   . in that case we have

lim
n      

n   f (anx + bn) = lim
n      

nc(anx + bn)      = lim
n      

(c    1/  n   1/  anx + c    1/  n   1/  bn)     ,

which directly gives (6) with

   = 1/  ,

an =   c  n  ,

bn = c  n  .

(9)

substituting (9) into (7) we obtain the following prediction for d(j), j = 2, . . . , k, in the case of
the pareto tail of the degree distribution:

d(j)     n1/  [c1/  (j     1)   1/       c1/   + 1].

(10)

it remains to    nd an approximation for d(1), the maximal degree in the graph. from the

extreme value theory it is well known that if d1, . . . , dn obey a power law then

lim
n      

p (cid:18) d(1)     bn

an

    x(cid:19) = h  (x) = exp(   (1 +   x)   1/  ),

rr n   7881

8

k. avrachenkov & n. litvak & m. sokol & d. towsley

where, for pareto tail, an, bn and    are de   ned in (9). thus, as an approximation for the maximal
node degree we can choose anx + bn where x can be chosen as either an expectation, a median
or a mode of h  (x). if we choose the mode, ((1 +   )          1)/  , then we obtain an approximation,
which is smaller than the one for the 2nd largest degree. further, the expectation (  (1     )   1)/  
is very sensitive to the value of    = 1/  , especially when    is close to one, which is often the case
in complex networks. besides, the parameter    is hard to estimate with high precision. thus,
we choose the median (log(2))          1)/  , which yields

d(1)     an

(log(2))          1

  

+ bn = n1/  [c1/  (log(2))   1/       c1/   + 1].

(11)

for instance, in the pa network    = 2.5 and c = 3.7, which gives according to (11) d(1)    
127. (this is a good prediction even though the pa network is not generated according to the
con   guration model. we also note that even though the extremum distribution in the preferential
attachment model is di   erent from that of the con   guration model their ranges seem to be very
close [10].) this in turn suggests that for the pa network m should be chosen in the range
6 000-18 000 if    = 2. as we can see from figure 2 this is indeed a good range for the number
of random walk steps. in the uk network    = 1.7 and c = 90, which gives d(1)     82 805 and
suggests a range of 20 000-30 000 for m if    = 28.6. figure 3 con   rms that this is a good choice.
the degree distribution of the dblp network does not follow a power law so we cannot apply
the above reasoning to it.

4 stopping criteria

suppose now that we do not have any information about the range for the largest k degrees. in
this section we design stopping criteria that do not require knowledge about the structure of the
network. as we shall see, knowledge of the order of magnitude of the average degree might help,
but this knowledge is not imperative for a practical implementation of the algorithm.

let us now assume that node j can be sampled independently with id203   j(  ) as in
(2). there are at least two ways to achieve this practically. the    rst approach is to run the
random walk for a signi   cant number of steps until it reaches the stationary distribution.
if
one chooses    reasonably large, say the same order of magnitude as the average degree, then
the mixing time becomes quite small [1] and we can be sure to reach the stationary distribution
in a small number of steps. then, the last step of a run of the random walk will produce an
i.i.d. sample from a distribution very close to (2). the second approach is to run the random
walk uninterruptedly, also with a signi   cant value of   , and then perform bernoulli sampling
with id203 q after a small initial transient phase. if q is not too large, we shall have nearly
independent samples following the stationary distribution (2). in our experiment, q     [0.2, 0.5]
gives good results when    has the same order of magnitude as the average degree.

we now estimate the id203 of detecting correctly the top k list of nodes after m i.i.d.
samples from (2). denote by xi the number of hits at node i after m i.i.d. samples. we note
that if we use the second approach to generate i.i.d.
samples, we spend approximately m/q
steps of the random walk. we correctly detect the top k list with the id203 given by the
multinomial distribution

p [x1     1, ..., xk     1] =

xi1   1,...,i1   1

m!

i1!          ik!(m     i1     ...     ik)!

  i1
1            ik

k (1    

  i)m   i1   ...   ik

k

xi=1

inria

quick detection of nodes with large degrees

9

but it is not feasible for any realistic computations. therefore, we propose to use the pois-
son approximation. let yj, j = 1, ..., n be independent poisson random variables with means
  j m. that is, the random variable yj has the following id203 mass function p [yj = r] =
e   m  j (m  j)r/r!. it is convenient to work with the complementary event of not detecting cor-
rectly the top k list. then, we have

p [{x1 = 0}     ...     {xk = 0}]     2p [{y1 = 0}     ...     {yk = 0}]

= 2(1     p [{y1     1}     ...     {yk     1}]) = 2(1    

p [{yj     1}])

k

yj=1

= 2(1    

k

yj=1

(1     p [{yj = 0}])) = 2(1    

k

yj=1

(1     e   m  j )) =: a,

(12)

where the    rst inequality follows from [12, thm 5.10]. in fact, in our numerical experiments we
observed that the factor 2 in the    rst inequality is very conservative. for large values of m, the
poisson bound works very well as proper approximation.

for example, if we would like to obtain the top 10 list with at most 10% id203 of error,
we need to have on average 4.5 hits per each top element. this can be used to design the stopping
criteria for our random walk algorithm. let   a     (0, 1) be the admissible id203 of an error
in the top k list. now the idea is to stop the algorithm after m steps when the estimated value
of a for the    rst time is lower than the critical number   a. clearly,

  am = 2(1    

(1     e   xj ))

k

yj=1

is the maximum likelihood estimator for a, so we would like to choose m such that   am       a. the
problem, however, is that we do not know which xj   s are the realisations of the number of visits
to the top k nodes. then let xj1 , ..., xjk be the number of hits to the current elements in the
top k candidate list and consider the estimator

  am,0 = 2(1    

k

(1     e   xji )),

yi=1

which is the maximum likelihood estimator of the quantity

k

2(1    

(1     e   m  ji ))     a.

yi=1

(here   ji is a stationary id203 of the node with the score xji , i = 1, . . . , k). the estimator
  am,0 is computed without knowledge of the top k nodes or their degrees, and it is an estimator
of an upper bound of the estimated id203 that there are errors in the top k list. this leads
to the following stopping rule.
stopping rule 0. stop at m = m0, where

m0 = arg min{m :   am,0       a}.

rr n   7881

10

k. avrachenkov & n. litvak & m. sokol & d. towsley

the above stopping criterion can be simpli   ed even further to avoid computation of   am,0.

since

  am,1 := 2(1     (1     e   xjk )k)       am,0       a,

where xjk is the number of hits of the worst element in the candidate list. the inequality
  am       a is guaranteed if   am,1       a. this leads to the following stopping rule for the random walk
algorithm.
stopping rule 1. compute x0 = arg min{x     n : (1     e   x)k     1         /2.} stop at

m1 = arg min{m : xjk = x0}.

we have observed in our numerical experiments that we obtain the best trade o    between the
number of steps of the random walk and the accuracy if we take    around the average degree and
the sampling id203 q around 0.5. speci   cally, if we take   a/2 = 0.15 (x0 = 4) in stopping
rule 1 for top 10 list, we obtain 87% accuracy for an average of 47 000 random walk steps for the
pa network; 92% accuracy for an average of 174 468 random walk steps for the dblp network;
and 94% accuracy for an average of 247 166 random walk steps for the uk network. we have
averaged over 1000 experiments to obtain tight con   dence intervals.

5 relaxation of top k lists

in the stopping criteria of the previous section we have strived to detect all nodes in the top k
list. this costs us a lot of steps of the random walk. we can signi   cantly gain in performance by
relaxing this strict requirement. for instance, we could just ask for list of k nodes that contains
80% of top k nodes [3]. this way we can take an advantage of a generic 80/20 rule that 80% of
result can be achieved with 20% of e   ort.

let us calculate the expected number of top k elements observed in the candidate list up to

trial m. de   ne by xj the number of times we have observed node j after m trials and

hj =(cid:26) 1, node j has been observed at least once,

0, node j has not been observed.

assuming we sample in i.i.d. fashion from the distribution (2), we can write

e[

k

xj=1

hj] =

k

xj=1

e[hj] =

k

xj=1

p [xj     1] =

k

xj=1

(1     p [xj = 0]) =

k

(1     (1       j)m).

xj=1

(13)

in figure 2 we plot e[pk
the pa network with    = 0 and    = 2. in figure 3 we plot e[pk

j=1 hj] (the curve    i.i.d. sample   ) as a function of m for k = 10 for
j=1 hj] as a function of m for
k = 10 for the uk network with    = 0.001 and    = 28.6. the results for the uk and dblp
networks are similar in spirit.

here again we can use the poisson approximation

e[

k

xj=1

hj]    

k

xj=1

(1     e   m  j ).

in fact, the poisson approximation is so good that if we plot it on figures 2 and 3, it nearly covers
exactly the curves labeled    i.i.d. sample   , which correspond to the exact formula (13). similarly

inria

quick detection of nodes with large degrees

11

10

8

6

4

2

0
 
0

 

random walk
i.i.d. sample

0.5

1
m

1.5

2
x 104

(a)    = 0

10

9

8

7

6

5

4

3

2

1

0
 
0

 

random walk
i.i.d. sample

0.5

1
m

1.5

2
x 104

(b)    = 2

figure 2: average number of correctly detected elements in top-10 for pa.

9

8

7

6

5

4

3

2

1

0
 
0

 

random walk
i.i.d. sample

0.5

1
m

1.5

2
x 104

7

6

5

4

3

2

1

0
 
0

 

random walk
i.i.d. sample

0.5

1
m

1.5

2
x 104

(a)    = 0.001

(b)    = 28.6

figure 3: average number of correctly detected elements in top-10 for uk.

to the previous section, we can propose stopping criteria based on the poisson approximation.
denote

bm =

k

xi=1

(1     e   xji ).

stopping rule 2. stop at m = m2, where

m2 = arg min{m : bm       b}.

now if we take   b = 7 in stopping rule 3 for top-10 list, we obtain on average 8.89 correct
elements for an average of 16 725 random walk steps for the pa network; we obtain on average
9.28 correct elements for an average of 66 860 random walk steps for the dblp network; and
we obtain on average 9.22 correct elements for an average of 65 802 random walk steps for the
uk network. (we have averaged over 1000 experiments for each network.) this makes for the
uk network the gain of more than two orders of magnitude in computational complexity with
respect to the deterministic algorithm.

rr n   7881

12

k. avrachenkov & n. litvak & m. sokol & d. towsley

6 conclusions and future research

we have proposed the random walk method with the candidate list for quick detection of largest
degree nodes. we have also supplied stopping criteria which do not require knowledge of the
graph structure. in the case of large networks, our algorithm    nds top k list of largest degree
nodes with few mistakes with the running time orders of magnitude faster than the deterministic
sorting algorithm. in future research we plan to obtain estimates for the required number of
steps for various types of complex networks.

references

[1] k. avrachenkov, b. ribeiro and d. towsley,    improving random walk estimation accuracy
with uniform restarts   , in proceedings of waw 2010, also springer lncs v.6516, pp.98-109,
2010.

[2] k. avrachenkov, v. borkar and d. nemirovsky,    quasi-stationary distributions as centrality
measures for the giant strongly connected component of a reducible graph   , journal of comp.
and appl. mathematics, v.234, pp.3075-3090, 2010.

[3] k. avrachenkov, n. litvak, d. nemirovsky, e. smirnova and m. sokol,    quick detection of

top-k personalized id95 lists   , in proceedings of waw 2011.

[4] p. boldi and s. vigna,    the webgraph framework i: compression techniques   , in proceed-

ings of www 2004.

[5] p. boldi, m. rosa, m. santini and s. vigna,    layered label propagation: a multiresolution

coordinate-free ordering for compressing social networks   , in proceedings of www 2011.

[6] s.n. dorogovtsev, j.f.f. mendes and a.n. samukhin,    structure of growing networks: ex-

act solution of the barabasi-albert model   , phys. rev. lett., v.85, pp.4633-4636, 2000.

[7] r. van der hofstad, random graphs and complex networks, lechture notes, available at

http://www.win.tue.nl/rhofstad/notesrid197.pdf, 2009.

[8] y. lim, d.s. menasche, b. ribeiro, d. towsley and p. basu,    online estimating the k central

nodes of a network   , in proceedings of ieee nsw 2011.

[9] a.s. maiya and t.y. berger-wolf,    online sampling of high centrality individuals in social

networks   , in proceedings of pakdd 2010.

[10] a.a. moreira, j.s. andrade jr. and l.a.n. amaral,    extremum statistics in scale-free net-

work models   , phys. rev. lett., v.89, 268703 4 pages, 2002.

[11] g. matthys and j. beirlant,    estimating the extreme value index and high quantiles with

exponential regression models   , statistica sinica, v.13, no.3, pp.853-880, 2003.

[12] m. mitzenmacher and e. upfal, id203 and computing: randomized algorithms and

probabilistic analysis, cambridge university press, 2005.

[13] r. motwani and p. raghavan, randomized algorithms, cambridge university press, 1995.

inria

quick detection of nodes with large degrees

contents

1 introduction

2 random walk with uniform jumps

3 estimating the largest degrees in the con   guration network model

4 stopping criteria

5 relaxation of top k lists

6 conclusions and future research

13

3

3

7

8

10

12

rr n   7881

research centre
sophia antipolis     m  diterran  e

2004 route des lucioles - bp 93
06902 sophia antipolis cedex

publisher
inria
domaine de voluceau - rocquencourt
bp 105 - 78153 le chesnay cedex
inria.fr

issn 0249-6399

this figure "logo-inria.png" is available in "png"(cid:10) format from:

http://arxiv.org/ps/1202.3261v1

this figure "pagei.png" is available in "png"(cid:10) format from:

http://arxiv.org/ps/1202.3261v1

this figure "rrpage1.png" is available in "png"(cid:10) format from:

http://arxiv.org/ps/1202.3261v1

