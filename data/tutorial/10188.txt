proceedings, ci 2012

crowd memory: learning in the collective

walter s. lasecki, samuel c. white, kyle i. murray, and jeffrey p. bigham

university of rochester department of computer science

roc hci lab

160 trustee rd., rochester, ny. 14627
{wlasecki,jbigham}@cs.rochester.edu

{samuel.white,kyle.murray}@rochester.edu

2
1
0
2

 
r
p
a
9
1

 

 
 
]
i
s
.
s
c
[
 
 

2
v
8
7
6
3

.

4
0
2
1
:
v
i
x
r
a

abstract
crowd algorithms often assume workers are inexperi-
enced and thus fail to adapt as workers in the crowd
learn a task. these assumptions fundamentally limit
the types of tasks that systems based on such algorithms
can handle. this paper explores how the crowd learns
and remembers over time in the context of human com-
putation, and how more realistic assumptions of worker
experience may be used when designing new systems.
we    rst demonstrate that the crowd can recall informa-
tion over time and discuss possible implications of crowd
memory in the design of crowd algorithms. we then ex-
plore crowd learning during a continuous control task.
recent systems are able to disguise dynamic groups of
workers as crowd agents to support continuous tasks, but
have not yet considered how such agents are able to learn
over time. we show, using a real-time gaming setting,
that crowd agents can learn over time, and    remember   
by passing strategies from one generation of workers to
the next, despite high turnover rates in the workers com-
prising them. we conclude with a discussion of future
research directions for crowd memory and learning.

introduction
id104 has shown that the crowd, a dynamic
pool of workers of varying reliability, can be e   ectively
used for a variety of computational tasks. in this paper,
we explore how crowds collectively learn and recall infor-
mation over time in the context of human computation.
a better understanding of crowd memory may help en-
able the crowd to complete tasks that require domain
knowledge, experience, or a consistent strategy.

the dynamic nature of the crowd means that workers
come and go, and no speci   c worker can be relied upon
to be available at a given time or to continue working
on a job for a set amount of time. existing systems
take advantage of a worker   s prior learning to provide
knowledge and understanding of the world and improve
their ability to complete a task, but most do not consider
learning the task itself. understanding crowd memory
may also enable us to better design systems that manage
memory expectations - for instance, formulating guaran-
tees about independence in tasks that require it (such as
voting or user trials). in general, we assume that inter-
actions between crowd workers happen only when medi-
ated by the id104 system, e.g. crowd workers
do not learn from one another after meeting in a co   ee

shop. as a result, the collective memory at a point in
time is a function of the union of the individual memories
of all active workers connected at that time.

we begin by demonstrating that crowds can remember
information over periods of time. this basic form of
crowd memory relies on workers remembering attributes
of a task beyond their submission, and re-recruiting the
same workers for subsequent tasks. this concept illus-
trated with an experiment on mechanical turk in which
knowledge is introduced via a task, then the crowd is
queried at intervals ranging from 0 to 12 hours. over
this time span, our ability to attract the same workers
diminishes and each worker   s memory fades, therefore so
does the observed crowd memory.

we then investigate collective learning in the context of a
continuous control task (navigation) in legion (lasecki,
murray, white, miller & bigham 2011). legion pre-
sented a paradigm in which a crowd of workers acts as
a single more reliable agent. however, it is not clear
that such crowds can simulate the memory that a sin-
gle worker would usually have for previous events oc-
curing in a task. this type of memory in a collective
with high turnover is seen in organizational learning in
which knowledge is passed between members, allowing
the group to maintain knowledge beyond the tenure of
any individual. using this model, we test the ability of
the crowd to implicitly pass knowledge to newer mem-
bers through demonstration points, events that provide
feedback to the crowd and demonstrate speci   c prior
knowledge. we then discuss how these demonstration
points can be used, and potential ways to enable transfer
learning through explicit communication.

related work
we ground our exploration of crowd memory and learn-
ing in two areas: (i) the crowd-powered systems that
motivate our work on crowd memory and learning, and
(ii) sociological theories of organizational learning.

crowd-powered systems
a number of crowd-powered systems have been devel-
oped that engage workers in multiple tasks with the po-
tential for learning. for instance, games with a pur-
pose often reward workers with points that accumulate
over time (von ahn 2006), e.g.
the esp game (von
ahn & dabbish 2004), foldit (cooper, khatib, treuille,
barbero, lee, beenen, leaver-fay, baker, popovic &

proceedings, ci 2012

players 2010). systems like shepherd aid learning by
giving workers explicit feedback on their work (dow,
kulkarni, klemmer & hartmann 2012), whereas other
systems build in an implicit learning phase. for instance,
vizwiz asks crowd workers to complete old tasks as they
wait for new work to arrive (bigham, jayant, ji, lit-
tle, miller, miller, miller, tatarowicz, white, white &
yeh 2010). many crowd systems are iterative, poten-
tially allowing crowd workers to contribute over multi-
ple similar or related tasks (little, chilton, goldman &
miller 2010, kittur, smus & kraut 2011). systems like
legion (lasecki et al. 2011) engage workers in continuous
tasks potentially allowing crowd workers to learn from
one another interactively. finally, most crowd-powered
systems issue multiple similar jobs as they are applied
to new instances of problems, providing an opportunity
for crowd workers to learn how to do those jobs.

many sources of crowd labor build in mechanisms de-
signed to encourage learning. mechanical turk o   ers
quali   cations that crowd workers can complete in order
to be eligible for certain tasks. at a lower level, me-
chanical turk also provides a unique identi   er for each
crowd worker that enables systems to identify (and re-
identify) workers. such identi   ers allow systems to esti-
mate whether workers are already familiar with a task.
however, in general, it can be di   cult to e   ciently re-
cruit workers that a system has seen before in current
crowd marketplaces.

organizational learning
our understanding of crowd memory and learning in
continuous real-time and collective answer tasks is based
on organizational learning theory (summarized in (levitt
& march 1988)). from this perspective, crowd learning
happens as the collective experience is synthesized into
routines (strategies and conventions) that guide future
behavior. routines encode the appropriateness or legiti-
macy of di   erent actions, and are viewed as forming over
time from experience. crowd action is directed toward a
target, and it is the synthesis of this target and collection
of routines that results in a    nal decision on how to act.

for instance, in the case of collectively navigating a maze
within legion, a crowd is provided with their target via
the task instructions, e.g.    complete the maze.    they
may learn over time that turning left at every intersec-
tion helps them make progress most quickly and encap-
sulate this into a strategy (routine) that is continued on
by the crowd even after speci   c experiential knowledge
of this rational is lost due to crowd turnover.

our working assumption is that many of the processes
outlined in the context of organizational learning also
apply to id104 repeated or continuous tasks.
as with much of the work in id104, the general
structure seems to mirror existing work, but may di   er in
important ways. for instance, much of the research char-
acterizing organizational learning was conducted with
traditional organizations, e.g.
business or university

figure 1. average number of doors explored during a
workers       rst, second, and third attempts at the task.
the average quickly converges to near the optimal value
of three.

classes, which operate over di   erent time scales than
existing crowd markets and may have formal processes
designed to support peer learning.

crowd memory
current id104 systems assume that workers do
not retain task knowledge after its completion. this as-
sumption is designed to best accommodate new workers,
but also accounts for the fact that workers often get com-
pensated very little for their e   ort, and make up for this
by completing large numbers of tasks each day. with
such high volume, workers seemingly cannot be expected
to remember aspects of a single task. we show that this
is not always the case, and that workers returning to a
task are able to leverage prior experience.

experiments
to test whether or not members of the crowd remember
aspects of a task beyond its submission we presented
workers with a task containing a speci   c pattern. we
used a javascript game that displays set of nine doors in
a grid pattern, with gold behind one of them (clicking
revealed what was behind a door). when the worker
found the gold, the round was completed. to ensure
workers were able to learn the pattern within a single
session, workers had to complete three rounds (making
3 the minimum number of doors that had to be explored
in a task). we    xed the position of the gold so that it
always rests behind the same door.

the same task was then posted again at a later time,
allowing us to measure the di   erence in the number of
doors which had to be explored in subsequent sessions.
to test the role of time in memory, we vary the interval
between postings of the task from 0 to 12 hours.

results
we found that, on average, workers were very quick to
pick up on this simple pattern, with a majority of them

12.16	
   4.70	
   3.64	
   0	
   1	
   2	
   3	
   4	
   5	
   6	
   7	
   8	
   9	
   10	
   11	
   12	
   attempt 1 attempt 2 attempt 3 average # of door opened proceedings, ci 2012

learning it perfectly within the    rst 2 rounds. figure 1
shows the average number of doors checked on the    rst,
second, and third attempts to solve the problem. work-
ers had a median count of 12 doors opened on the    rst
try, and 3 (optimal) for the second and third attempts.

workers were capable of remembering these tasks very
well. once most workers learned the pattern behind the
task, they retained the information for the rest of the
day. we tested over a 12 hour span and had individual
times between tasks of up to 6 hours. workers answer-
ing questions 1 hour after their previous answer aver-
aged an improvement of 2.78 doors, 76.8% of the 3.34
doors for those answering immediately after. workers
who answered 6 hours after their previous completion of
the task showed an average improvement of 2.75 fewer
doors, 99% that of worker answering questions only an
hour later.

discussion
these results show that workers who do remember task
information beyond its completion are not signi   cantly
e   ected by the time, on a within-day basis. the abil-
ity to store knowledge and skills in a crowd of workers
is critical to many real-time and nearly real-time tasks.
for example, vizwiz is an application which asks work-
ers to answer audio questions based on visual informa-
tion. trained crowds are important for this task in two
ways. first, questions are often submitted with only
partial or no audio recorded.
in this case, an experi-
enced worker may be able to infer what the question will
be based on previous experience and understanding the
goal of the task, however, a worker with no experience
may be uncertain of what to do in the task since they
were not provided with the information they expected
from instructions. thus they may not be able infer the
correct action to take, and requiring users to resubmit
their question. second, images submitted do not always
accurately capture the information needed to answer the
question, such as when a label is only partially viewable.
workers can submit directions in response in order to
instruct users as to how the image angle can be adjusted
to better capture the information. if the user submits
two parts of the same label, it is possible for a single
person, remembering prior submissions, to answer such
questions. if we remove the ability to remember or as-
sume independent workers, there will be a signi   cantly
higher number of expected re-submissions.

designing systems speci   cally to leverage worker mem-
ory may lead to improved performance. for example,
directing subsequent vizwiz questions that occur over
short time spans to similar groups of workers may help
increase the retention rate of workers and decrease the
number of submissions required to get a correct an-
swer, reducing the average response latency. demon-
stration tasks could also be provided to pre-recruited
workers (such as those used by quikturkit or adrenaline
(bernstein, brandt, miller & karger 2011)), in order to
train sets of workers while they wait for a task to begin.

figure 2. average accuracy of the crowd decision in press-
ing the button to move to the next round in our game in
the 10-second trials.

figure 3. average percentage of voters pressing the cor-
rect button in the 30-second trials. this shows that work-
ers learned the correct button to press by observing the
crowd   s actions over time.

learning from the collective
not all tasks can be cleanly divided and solved sepa-
rately, or in an o   ine manner. some problems must to
be solved as a single task, in real-time. recent crowd-
sourcing systems have introduced a model of the crowd
in which the collective acts as a single worker (or crowd
agent) that is capable of these continuous real-time tasks
(lasecki et al. 2011). while this approach is e   ective in
a variety of domains, questions remain as to the prop-
erties of such agents. when a single user is performing
a task, such as operating an interface, they can remem-
ber their previous actions and states of the system. we
show that a crowd agent can also remember information
is has learned previously by having longer-serving mem-
bers of the crowd demonstrate that knowledge implicitly
via their actions.

legion
legion is a system which enables the crowd to collec-
tively control a single-user interface in real-time (lasecki
et al. 2011).
individual workers contribute input to
a task as if they are independent of each other, but
the result of the group input is a single control stream
that is forwarded to the end-user   s interface. this is
done by recruiting a set of workers to control the task,
and presenting each worker with an interface similar to
a remote-desktop(richardson, sta   ord-fraser, wood &

0%	
   20%	
   40%	
   60%	
   80%	
   100%	
   1	
   2	
   3	
   4	
   5	
   6	
   7	
   8	
   9	
   % correct round 0%	
   20%	
   40%	
   60%	
   80%	
   100%	
   1	
   2	
   3	
   4	
   5	
   6	
   7	
   8	
   9	
   %	
   votes	
   correct	
   round	
   proceedings, ci 2012

figure 4. the worker interface for the continuous control task (left) and the half-life 2 maze map that was used (right).

hopper 1998). workers see a video stream of the inter-
face being controlled and their input is forwarded to an
input mediator that combines the collective input into
a single control stream. one of the primary bene   ts of
legion is its ability to let the crowd control an existing
single-user interface, thus eliminating the need for tasks
to be broken down into pieces and customized speci   cally
for completion by the crowd.

while removing the need to explicitly divide tasks into
smaller pieces saves requesters e   ort, it also means that
many tasks will have an unknown length and complexity
a priori, making it di   cult to properly motivate workers.
hivemind (singh, lasecki, barelli & bigham 2012) is a
id104 model that uses game theoretic mecha-
nisms to motivate workers to complete tasks as quickly
as they can accurately. the model uses a voting system
that encourages workers to aggregate their responses via
agreement with previously proposed answers. hivemind
can successfully motivates workers to complete work and
segment tasks in continuous real-time tasks by using a
reputation mechanism to encourage workers to answer
honestly, and by learning which workers can be used as
consistent representative leaders for legion.

a single crowd-agent
the crowd-agent model introduced by legion aims to
use the collective not as a group of workers of varying
reliability, but as a single dependable agent. this ap-
proach enables new styles of interaction with the crowd
and can exhibit attributes beyond that of a traditional
single worker. for example, the crowd agent can con-
tinue to work on a task inde   nitely by recruiting new
workers, whereas a single individual would eventually
have to rest. the crowd can also complete tasks in par-
allel, even if the overall output is the same as one worker.
this model closely parallels that seen in large organiza-
tions such as corporations, where the entity itself acts as
an individual, but can produce and process in parallel.

memory
while this agent model of the crowd is promising, it
is important that the resulting crowd agent retains all
(or most) of the properties of a single worker. one key
property is memory. when a single user is performing
a task, they naturally have a history of previous actions
and states stored in memory that they use to inform
future decisions. however, the crowd agent is composed
of a number of workers, and has continuous turnover of
these members     meaning that eventually the agent will
continue to work past the point where any of the original
members remain. in this case, we investigate whether or
not the crowd is able to retain information as a collective,
even if the workers who directly observed an event are
not available. we propose that due to the crowd   s ability
to react to both the environment and each other in real-
time, the type of organizational learning seen in existing
social groups will be possible within the crowd. this
style of learning can also be applied to systems that share
state information with subsequent workers via communi-
cation channels such as leaving comments about previous
actions or the voting feedback system used in hivemind.

experiments
we ran two sets experiments to test the memory of con-
tinuous crowds. the tests were setup as follows: an
initial set of workers was directed to interact with a spe-
ci   c object in the environment, then after a time period
the current set of workers was asked to repeat the last
operation. this allowed us to test the current crowd   s
ability to repeat the action even with members who were
not directly given the instructions. feedback was then
presented to the crowd about the action taken. workers
were told they got the answer correct regardless of their
actual choice so that workers wouldn   t try to correct
their answers during the next round, but instead just
continue to repeat the input. we claim that the workers
who begin the task after the directions were provided

mapproceedings, ci 2012

figure 5. a visualization of the active workers throughout part of the task. each path is a worker, and the red markings
indicate the worker was active during that time interval.

will be able to infer the correct answer by viewing the
collective actions of the rest of the crowd.

interface element selection
first, we tested the ability of the crowd to remem-
ber simple selection data. we provided workers with
a javascript game containing 10 numerical keys to se-
lect from. the initial set of workers was told to keep
pressing a speci   c button, then we asked the additional
workers who connected after the beginning of the task to
continue to re-enter the input that they saw re   ected by
the interface for either 10 or 30 seconds before giving any
additional feedback to the crowd. each test consisted of
ten demonstration points (rounds). the time delay was
used to test how the crowd   s memory was e   ected by in-
crease in time between demonstration points (feedback),
in the face of turn-over in the crowd.

figures 2 and 3 show the outcomes of the 10 and 30
second button trials respectively. figure 2 shows the 10
second trials promoted convergence to a single    nal an-
swer as the rounds progress. however, for the 30 second
trial this was not the case     convergence to a single an-
swer was much quicker, generally happening after one or
two rounds. accordingly, there was very little in terms
of a long-term trend over the number of rounds. figure 3
shows that the crowd was still able to demonstrate learn-
ing by consolidating their votes onto a single answer over
time. thus, the crowd   s agreement became stronger as
workers learned the correct button to press.

the continuous worker
since work in cognitive science has shown that the cog-
nitive load of a task can impact learning (sweller 1988),
we are interested in showing crowd learning during a
more realistic task, not just in an isolated domain. we
used a similar experimental setup, but this time it was
embedded in a navigation task. we used the video game
half-life 2 with a custom    maze    map as a test environ-
ment. workers were given two buttons to select from in
a room, both of which open the door to the subsequent
room. the initial set of workers were instructed to press
a speci   c one at the beginning of the task. once the door

is opened, workers must navigate their character across
the room to the next door. as shown in figure 4, these
rooms form a cycle, so we could test for as many rounds
as required. we let the crowd control the navigation for
1 hour while the ability of the crowd to retain knowledge
of the task was recorded.

our goal was to demonstrate that the crowd-agent model
was able to use organizational learning to e   ectively act
as a worker capable of performing a single task inde   -
nitely. the crowd was able to complete this task, press-
ing the correct button (de   ned as the previous button)
over 95% of the time, despite having several complete
turnovers of workers. being able to use the crowd to
control a continuous process for this length of time shows
the potential for much longer sessions. as long as crowds
are made available to the system in su   cient numbers,
this type of id21 can continue inde   nitely.

discussion
our experiments showed that legion can support orga-
nizational learning through implicit communication in
the crowd. the results also revealed distinct behaviors
we did not expect for each of the trials.

the selection tests showed that in a very simple domain,
workers could learn a task. however, the tests also indi-
cated a possible e   ect from the amount of time between
demonstration points on the learning rate in terms of
rounds. we believe this e   ect was due to worker   s atten-
tion being more focused when feedback is more scarce.
if this is supported by future tests, it may be possible to
determine tradeo   s between crowd size, task complexity,
and attention.

the navigation test demonstrated that organizational
learning within the crowd-agent model works as ex-
pected. the crowd was able to correctly select the but-
ton to press until near the very end of the task, at which
point, the crowd of unique workers we were recruiting
became too sparse and the number of connected workers
hit zero temporarily, thus breaking the chain of demon-
strations and selecting the incorrect button. however,

timeworker060proceedings, ci 2012

using new tools for recruiting workers, and not restrict-
ing workers to only those who had not participated yet
(which was done to prevent workers with prior knowledge
re-entering the test) can help avoid such problems.

figure 5 shows the activity of di   erent crowd workers
connected to the task for a portion of the time. more
workers with experience connected to the task at once
will make it easier to in   uence crowd decisions and thus
easier to demonstrate knowledge to new workers. here,
we had a relatively small crowd, but one that performed
well on the task in part because new workers seemed to
be aware of their lack of domain knowledge, and held
back from participating until they had more con   dence.
in a few cases this resulted in a single worker demonstrat-
ing the task to two or more new workers. encouraging
this type of behavior may be required to use smaller
crowds reliably for tasks such as these. hivemind is able
to motivate workers on continuous tasks, and encourage
them to abstain from answering in the case that they are
unsure of the correct answer, as is needed here. in future
implementations, we plan to incorporate such models to
get better responses from the crowd.

these results show that crowd agents can not only under-
stand natural language commands and remember past
experiences like a single person could, but can also work
for an inde   nite period of time, as long as the crowd
workers can continue to be recruited. such agents are
also capable of outperforming the multiple (reliable)
workers recruited to complete a job sequentially since
two workers would not necessarily share a memory of
the task without overlapping. we paid approximately
$3.60/hour for work from the crowd agent     a price com-
parable to existing crowd systems.

analysis
crowd memory holds the promise of taking advantage
of both enhanced skill sets of some workers, and pre-
training workers to give them the general skills they will
need to complete tasks quickly     of critical importance
when it comes to nearly real-time and real-time tasks.
in the case of legion for example, workers who do not
understand how the interface works may provide little to
no input if they enter in the middle of a task in comple-
tion. this hurts the task as a whole when only smaller
crowds are available, as often workers would withhold
input in order to learn or experiment with the controls,
reducing the e   ective number of workers in the crowd.

several existing design considerations from general user
interfaces become relevant to the design of id104
tasks in light of memory as a desired aspect of the crowd.
we highlight a few of these below.

learnability
just as in any interface which we expect a user to learn
to use e   ectively, we want the crowd to be able to learn
our interfaces and tasks easily. one key aspect that
must then be considered is learnability, the di   erence

here is that instead of a single user learning an interface
or task, we have distributed the job to many workers in
the crowd. there is a large literature in hci describing
considerations which should be made to improve learn-
ability     here we focus on a few of them in the context
of distributed crowd learning:

consistency
consistency assists users in recalling what sets of knowl-
edge to apply to a task. we may want whole interfaces
to remain constant across tasks (such as in legion), or
we may only need speci   c functionality to mirror that
which was learned in a previous portion of a task (such
as a certain kind of text input box). often visual con-
sistency will be enough, but it is also important to make
instructions and task descriptions similar so that workers
with prior knowledge will be more inclined to accept a
familiar task. it is possible that such considerations will
improve workers    return rate because of their increased
con   dence in their ability to complete the task.

explorable tasks
making tasks explorable can enable much more complete
knowledge of the domain by letting workers learn as
much of the interface and task as they   d like. while this
is not always ideal for a real task, since it may lead to
situations where workers explore at the cost of quality
input, it is vital to training tasks.
in fact, one of the
most bene   cial uses of using crowd memory for training
is being able to reduce the bad input (remove the noise)
coming from good workers who spend some of their time
exploring the interface. current approaches rely on re-
ducing the complexity of the interface to the point where
most interaction options are clearly visible, in an at-
tempt to minimize exploration (and its corresponding
noise). this is particularly useful with crowds that are
being compensated monetarily, and are e   ectively paid
more to hurry through tasks, however, this limits the
complexity and therefore functionality of the interfaces
used in such tasks. if users are also paid to    rst learn
the interface, they will be able to complete the actual
task just as quickly, but more pro   ciently. even with
the ability to explore prior to a task, complexity must
be managed carefully, as it still directly con   icts with its
ability to be both learnable and memorable over time.

motivation
in order to spend the time learning a task in advance, we
must motivate worker to explore the training task. this
can be done using either the original payment scheme if
the task is just a direct repeat of a real task (such as
in the vizwiz case), or a modi   ed payment scheme if
the worker is expected to explore the interface in more
depth     though it may work for tasks which should
be completed as quickly as possible, and have a known
correct answer for the training task. another option then
is to pay workers to explore di   erent aspects of the task
by paying bonuses for using di   erent functions.

proceedings, ci 2012

since these training tasks can be designed to meet di   er-
ent specs than the actual task, mechanisms which may
not work for a nearly real-time or real-time task could
be made to work for training. for instance, making ex-
ploring the interface into a game may serve to better
motivate workers to discover functionality, but may not
naturally work to speed up the    nal task. this is alright
as long as care is taken to ensure the key aspect of the
interface that is learned is not the fact that additional
time can be taken. the idea is to improve knowledge
of the interface to later allow for more expert usage in
higher importance domains.

memorability
despite workers    ability to remember certain aspects of a
task, designing for memorability will help maximize this
e   ect. visual elements of a task can focus a worker   s at-
tention. speci   cally designing for this will allow portions
of an interface to be taught using training tasks that dif-
fer from the real task. in the case of a task which cannot
be simulated or replayed (as is the case for legion), this
means that we can still take advantage of the bene   ts of
pre-training, but in a piecewise fashion.

future work
the use of crowd memory discussed in this paper pro-
vides the basis for research that changes some of the
commonplace assumptions about the crowd and investi-
gates taking advantage of the natural properties of hu-
man workers when it comes to learning. we can also
leverage the fundamental di   erences between crowds and
individuals to increase performance ever further.

long term memory
while the ability to remember over the span of a day
is an important initial step towards establishing the vi-
ability of crowd memory, the eventual goal is to enable
workers to remember tasks across long periods of time
such as days or weeks. this extended memory is more
indicative of learning than memorization, and could lead
to more in-depth training of the crowd over time.

preliminary tests on long term memory show that spans
of several days are possible, but recall rates do fall over
time as expected. to counteract this, we will focus on
managing user assumptions and expectations. for exam-
ple, users may expect an environment or con   guration
to change, while expecting the interface properties to
remain the same. by making certain aspects of a task
more salient, users can be subtly encouraged to memo-
rize speci   c information for later use.

explicit communication
what we have presented in this paper focuses exclusively
on passive and implicit communication, however, tasks
can be designed to include explicit communication chan-
nels between workers in the several ways. we discuss a
few such ways below:

    instant messengers can enable users to collaborate
in a real-time task. as such, the organizational learning
we explore in this paper could be used in cases where
decision points do not exist or are not clearly observ-
able. workers are motivated to share their knowledge
with others because it increases the likelihood of the task
being completed correctly, and the group as a whole be-
ing rewarded. to account for the possibility of malicious
users, di   erent strategies can be used to moderate the
conversation, such as restricting limiting the ability to
add comments to special classes or workers or using rate
limits to limit unproductive messages. history logs in
which workers leave messages to both current and future
workers can be used to extend this model and allow for
long term communication. we expect this will take the
form of a ranked forum, with more popular and currently
relevant ideas bubbling to the top as workers promote or
demote them.
    automatic recording of key events at certain in-
puts or at    xed intervals, such as screen shots or sped
up video, could be used to quickly pass knowledge of
what has been done in the task so far to new workers
as they connect. the uses of communication amongst
workers who are jointly completing a task clearly enables
more than just knowledge sharing, and can also be used
to collaborate by jointly deriving courses of action for
accomplishing a task.

complex knowledge
we would also like to explore embedding more complex
knowledge into the crowd and identify properties which
are important when trying to prepare a crowd for a
task in advance. eventually this could lead to situa-
tions where the crowd can be trained in a speci   c area
of knowledge prior to a task occurring. they will then
be able to respond quicker and more accurately without
needing an explicit certi   cate process as is often the case
currently. the idea of crowd memory as a means of stor-
age goes beyond just storing explicit knowledge or prior
experience. it can include more deep information such
as understanding of a domain, idea, or concept. this can
be used to solve problems that rely not only the ability
to solve problems, but also recall available resources.

continuous learning
we can then merge long term memory, between-task re-
call, the ability to recruit large crowds, to enable contin-
uous learning over longer periods of time. for instance, if
we can re-recruit several previous workers, then they can
learn knowledge they missed from the current crowd, and
add the knowledge they had of their previous session. by
maintaining a set of overlapping workers across multiple
days, it maybe possible to continually grow the knowl-
edge base of the crowd agent, making it more e   ective
as time goes on. work on eliciting this behavior could
ultimately enable behaviors such as collective memory
(hawlbachs 1992) to manifest in the crowd.

proceedings, ci 2012

enhanced cognitive load
we have shown that the crowd agent has properties a
single worker does not     here, the ability to work contin-
uously for an inde   nite period of time. work span is not
the only property that the crowd has that an individ-
ual does not (i.e. the ability to truly work in parallel).
we are currently investigating the possibility that the
crowd   s maximum cognitive load when working as a sin-
gle agent can exceed that of a single individual, and in
fact grows as a function of the crowd   s size. this can be
viewed as using the crowd as a shared distributed mem-
ory system. since cognitive load is related to the total
working memory and processing capacity of the agent,
the extended working memory and parallel solving abil-
ity of multiple workers may allow the total maximum
cognitive load of the crowd agent to be greater than any
individual worker.

enhanced memory
the memory of a crowd agent is likewise extensible based
on the properties of the crowd. since workers will not
remember identical portions of segments of informations,
we are investigating whether it   s possible to use multiple
workers to reconstruct a greater portion of information
than a single worker could. for example, given a large set
of numbers with crowd workers each told to remember as
many as possible, we expect the collective to remember
more of the set than any single member. we intend to
test this using a test similar to the example given here.

conclusion
this paper explores crowd memory and learning the con-
text of human computation. through several experi-
ments on amazon   s mechanical turk service we have
shown the the crowd can learn quickly, and retain knowl-
edge after a task has ended. this promotes the idea of
designing tasks which stray from the traditional assump-
tion of an untrained worker.

we have also showed that crowds are able to train new
workers in continuous tasks through a process similar to
organizational learning, helping to o   set problems intro-
duced by high turnover rates in such tasks. this could
allow the crowd-agent paradigm introduced by legion,
in which multiple workers act as a single, more reliable
worker, to be used where traditional workers cannot,
such as perpetual tasks which require some memory of
previous actions. we also plan to explore extensions to
this concept that will show the crowd   s ability to use
collective memory to more e   ectively complete tasks as
an agent that are di   cult even for a single user.

references
bernstein, m. s., brandt, j. r., miller, r. c. & karger,
d. r. (2011), crowds in two seconds: enabling
realtime crowd-powered interfaces, in    proceedings of
the 24th annual acm symposium on user interface
software and technology   , uist    11, acm, new york,

ny, usa, pp. 33   42.
url: http://doi.acm.org/10.1145/1866029.1866080
bigham, j. p., jayant, c., ji, h., little, g., miller, a.,
miller, r. c., miller, r., tatarowicz, a., white, b.,
white, s. & yeh, t. (2010), vizwiz: nearly real-time
answers to visual questions, in    proceedings of the 23nd
annual acm symposium on user interface software and
technology   , uist    10, acm, new york, ny, usa,
pp. 333   342.
url: http://doi.acm.org/10.1145/1866029.1866080
cooper, s., khatib, f., treuille, a., barbero, j., lee,
j., beenen, m., leaver-fay, a., baker, d., popovic, z.
& players, f. (2010),    predicting protein structures
with a multiplayer online game   , nature
466(7307), 756   760.
dow, s., kulkarni, a., klemmer, s. r. & hartmann, b.
(2012), shepherding the crowd yields better work, in
   proceedings of cscw 2012: acm conference on
computer-supported cooperative work   ,
pp. 1013   1022.
hawlbachs, m. (1992), on collective memory, the
university of chicago press.
kittur, a., smus, b. & kraut, r. (2011), crowdforge:
id104 complex work, technical report
cmuhcii-11-100, carnegie mellon university.
lasecki, w. s., murray, k. i., white, s., miller, r. c.
& bigham, j. p. (2011), real-time crowd control of
existing interfaces, in    proceedings of the 24th annual
acm symposium on user interface software and
technology   , uist    11, acm, new york, ny, usa,
pp. 23   32.
url: http://doi.acm.org/10.1145/2047196.2047200
levitt, b. & march, j. g. (1988),    organizational
learning   , 14, 319   340.
little, g., chilton, l. b., goldman, m. & miller, r. c.
(2010), turkit: human computation algorithms on
mechanical turk, in    proceedings of the 23nd annual
acm symposium on user interface software and
technology   , uist    10, acm, new york, ny, usa,
pp. 57   66.
richardson, t., sta   ord-fraser, q., wood, k. &
hopper, a. (1998),    virtual network computing   ,
internet computing, ieee 2, 33   38.
singh, p., lasecki, w. s., barelli, p. & bigham, j. p.
(2012), hivemind: a model for optimizing open-ended
responses from the crowd, in    in submission   .
sweller, j. (1988),    cognitive load during problem
solving: e   ects on learning   , cognitive science
12, 257   285.
von ahn, l. (2006),    games with a purpose   , computer
39(6), 92   94.
von ahn, l. & dabbish, l. (2004), labeling images
with a computer game, in    proceedings of the sigchi
conference on human factors in computing systems   ,
chi    04, acm, new york, ny, usa, pp. 319   326.

