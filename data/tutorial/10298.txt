embedding semantic relations into word representations

danushka bollegala takanori maehara ken-ichi kawarabayashi

university of liverpool shizuoka university national institute of informatics

jst, erato, kawarabayashi large graph project.

5
1
0
2

 

y
a
m
1

 

 
 
]
l
c
.
s
c
[
 
 

1
v
1
6
1
0
0

.

5
0
5
1
:
v
i
x
r
a

abstract

learning representations for semantic relations is
important for various tasks such as analogy de-
tection, relational search, and relation classi   ca-
tion. although there have been several proposals
for learning representations for individual words,
learning word representations that explicitly cap-
ture the semantic relations between words re-
mains under developed. we propose an unsuper-
vised method for learning vector representations
for words such that the learnt representations are
sensitive to the semantic relations that exist be-
tween two words. first, we extract lexical patterns
from the co-occurrence contexts of two words in a
corpus to represent the semantic relations that ex-
ist between those two words. second, we represent
a lexical pattern as the weighted sum of the rep-
resentations of the words that co-occur with that
lexical pattern. third, we train a binary classi   er
to detect relationally similar vs. non-similar lexi-
cal pattern pairs. the proposed method is unsuper-
vised in the sense that the lexical pattern pairs we
use as train data are automatically sampled from a
corpus, without requiring any manual intervention.
our proposed method statistically signi   cantly out-
performs the current state-of-the-art word repre-
sentations on three benchmark datasets for propor-
tional analogy detection, demonstrating its ability
to accurately capture the semantic relations among
words.

1 introduction
representing the semantics of words and relations are funda-
mental tasks in id99 (kr). numerous
methods for learning distributed word representations have
been proposed in the nlp community [turian et al., 2010;
collobert et al., 2011; mikolov et al., 2013b; mikolov et al.,
2013a; pennington et al., 2014]. distributed word representa-
tions have shown to improve performance in a wide-range of
tasks such as, machine translation [cho et al., 2014], seman-
tic similarity measurement [mikolov et al., 2013d; penning-
ton et al., 2014], and id51 [huang et
al., 2012].

despite the impressive performance of representation
learning methods for individual words, existing methods use
only co-occurrences between words, ignoring the rich se-
mantic relational structure. the context in which two words
co-occur provides useful insights into the semantic relations
that exist between those two words. for example, the sen-
tence ostrich is a large bird not only provides the infor-
mation that ostrich and bird are co-occurring, but also de-
scribes how they are related via the lexical pattern x is a
large y, where slot variables x and y correspond to the
two words between which the relation holds. if we can
somehow embed the information about the semantic rela-
tions r that are associated with a particular word w into
the representation of w, then we can construct richer seman-
tic representation than the pure co-occurrence-based word
representations. although the word representations learnt by
co-occurrence prediction methods [mikolov et al., 2013d;
pennington et al., 2014] have implicitly captured a certain
degree of relational structure, it remains unknown how to ex-
plicitly embed the information about semantic relations into
word representations.

we propose a method for learning word representations
that explicitly encode the information about the semantic re-
lations that exist between words. given a large corpus, we
extract lexical patterns that correspond to numerous seman-
tic relations that exist between word-pairs (xi, xj). next, we
represent each word xi in the vocabulary by a d-dimensional
vector xi     rd. word representations can be initialized ei-
ther randomly or by using pre-trained word representations.
next, we represent a pattern p by the weighted average of
the vector differences (xi     xj) corresponding to word-
pairs (xi, xj) that co-occur with p in the corpus. this en-
ables us to represent a pattern p by a d-dimensional vector
p     rd in the same embedding space as the words. using
vector difference between word representations to represent
semantic relations is motivated by the observations in prior
work on word representation learning [mikolov et al., 2013d;
pennington et al., 2014] where, for example, the difference of
vectors representing king and queen has shown to be similar
to the difference of vectors representing man and woman.

we model the problem of embedding semantic relations
into word representations as an analogy prediction task
where, given two lexical patterns, we train a binary classi   er
that predicts whether they are relationally similar. our pro-

posed method is unsupervised in the sense that both positive
and negative training instances that we use for training are
automatically selected from a corpus, without requiring any
manual intervention. speci   cally, pairs of lexical patterns that
co-occur with the same set of word-pairs are selected as pos-
itive training instances, whereas negative training instances
are randomly sampled from pairs of patterns with low rela-
tional similarities. our proposed method alternates between
two steps (algorithm 1). in the    rst step, we construct pat-
tern representations from current word representations. in the
second step, we predict whether a given pair of patterns is re-
lationally similar using the computed representations of pat-
terns in the previous step. we update the word representations
such that the prediction loss is minimized.

direct evaluation of word representations is dif   cult be-
cause there is no agreed gold standard for semantic represen-
tation of words. following prior work on representation learn-
ing, we evaluate the proposed method using the learnt word
representations in an analogy detection task. for example, de-
noting the word representation for a word w by v(w), the
vector v(king)    v(man) + v(woman) is required to be sim-
ilar to v(queen), than all the other words in the vocabulary.
similarity between two vectors is computed by the cosine of
the angle between the corresponding vectors. the accuracy
obtained in the analogy detection task with a particular word
representation method is considered as a measure of its ac-
curacy. in our evaluations, we use three previously proposed
benchmark datasets for word analogy detection: sat anal-
ogy dataset [turney, 2005], google analogy dataset [mikolov
et al., 2013c], and semeval analogy dataset [jurgens et al.,
2012]. the word representations produced by our proposed
method statistically signi   cantly outperform the current state-
of-the-art word representation learning methods on all three
benchmark datasets in an analogy detection task, demonstrat-
ing the accuracy of the proposed method for embedding se-
mantic relations in word representations.

2 related work
representing words using vectors (or tensors in general) is
an essential task in text processing. for example, in distri-
butional semantics [baroni and lenci, 2010], a word x is
represented by a vector that contains other words that co-
occur with x in a corpus. numerous methods for selecting co-
occurrence contexts (e.g. proximity-based windows, depen-
dency relations), and word association measures (e.g. point-
wise mutual information (pmi), log-likelihood ratio (llr),
local mutual information (llr)) have been proposed [tur-
ney and pantel, 2010]. despite the successful applications of
co-occurrence counting-based distributional word representa-
tions, their high dimensionality and sparsity is often problem-
atic when applied in nlp tasks. consequently, further post-
processing such as id84, and feature se-
lection is often required when using distributional word rep-
resentations.

on the other hand, distributed word representation learn-
ing methods model words as d-dimensional real vectors and
learn those vector representations by applying them to solve
an auxiliary task such as id38. the dimen-

sionality d is    xed for all the words in the vocabulary and,
unlike distributional word representations, is much smaller
(e.g. d     [10, 1000] in practice) compared to the vocabulary
size. a pioneering work on word representation learning is
the neural network language model (nnlms) [bengio et al.,
2003], where word representations are learnt such that we can
accurately predict the next word in a sentence using the word
representations for the previous words. using backpropaga-
tion, word vectors are updated such that the prediction error
is minimized.

although nnlms learn word representations as a by-
product, the main focus on id38 is to predict
the next word in a sentence given the previous words, and
not on learning word representations that capture word se-
mantics. moreover, training multi-layer neural networks with
large text corpora is often time consuming. to overcome
those limitations, methods that speci   cally focus on learn-
ing word representations that capture word semantics us-
ing large text corpora have been proposed. instead of using
only the previous words in a sentence as in language mod-
eling, these methods use all the words in a contextual win-
dow for the prediction task [collobert et al., 2011]. meth-
ods that use one or no hidden layers are proposed to im-
prove the scalability of the learning algorithms. for exam-
ple, the skip-gram model [mikolov et al., 2013c] predicts
the words c that appear in the local context of a word x,
whereas the continuous bag-of-words model (cbow) pre-
dicts a word x conditioned on all the words c that appear in
x   s local context [mikolov et al., 2013a]. however, meth-
ods that use global co-occurrences in the entire corpus to
learn word representations have shown to outperform meth-
ods that use only local co-occurrences [huang et al., 2012;
pennington et al., 2014]. word representations learnt us-
ing above-mentioned representation learning methods have
shown superior performance over word representations con-
structed using the traditional counting-based methods [baroni
et al., 2014].

word representations can be further classi   ed depending
on whether they are task-speci   c or task-independent. for ex-
ample, methods for learning word representations for speci   c
tasks such as sentiment classi   cation [socher et al., 2011],
and semantic composition [hashimoto et al., 2014] have been
proposed. these methods use label data for the target task to
train supervised models, and learn word representations that
optimize the performance on this target task. whether the
meaning of a word is task-speci   c or task-independent re-
mains an interesting open question. our proposal can be seen
as a third alternative in the sense that we use task-independent
pre-trained word representations as the input, and embed the
knowledge related to the semantic relations into the word rep-
resentations. however, unlike the existing task-speci   c word
representation learning methods, we do not require manually
labeled data for the target task (i.e. analogy detection).

3 learning word representations
the local context in which two words co-occur provides use-
ful information regarding the semantic relations that exist be-
tween those two words. for example, from the sentence os-

trich is a large bird that primarily lives in africa, we can
infer that the semantic relation is-a-large exists between
ostrich and bird. prior work on relational similarity measure-
ment have successfully used such lexical patterns as features
to represent the semantic relations that exist between two
words [duc et al., 2010; duc et al., 2011]. according to the
relational duality hypothesis [bollegala et al., 2010], a se-
mantic relation r can be expressed either extensionally by
enumerating word-pairs for which r holds, or intensionally
by stating lexico-syntactic patterns that de   ne the properties
of r.

following these prior work, we extract lexical patterns
from the co-occurring contexts of two words to represent the
semantic relations between those two words. speci   cally, we
extract unigrams and bigrams of tokens as patterns from the
mid   x (i.e. the sequence of tokens that appear in between
the given two words in a context) [bollegala et al., 2007b;
bollegala et al., 2007a]. although we use lexical patterns as
features for representing semantic relations in this work, our
proposed method is not limited to lexical patterns, and can be
used in principle with any type of features that represent rela-
tions. the strength of association between a word pair (u, v)
and a pattern p is measured using the positive pointwise mu-
tual information (ppmi), f (p, u, v), which is de   ned as fol-
lows,

(cid:18) g(p, u, v)g(   ,   ,   )

g(p,   ,   )g(   , u, v)

(cid:19)

f (p, u, v) = max(0, log

).

(1)

here, g(p, u, v) denotes the number of co-occurrences be-
tween p and (u, v), and     denotes the summation taken over
all words (or patterns) corresponding to the slot variable. we
represent a pattern p by the set r(p) of word-pairs (u, v) for
which f (p, u, v) > 0. formally, we de   ne r(p) and its norm
|r(p)| as follows,

r(p) = {(u, v)|f (p, u, v) > 0}
|r(p)| =
f (p, u, v)

(cid:88)

(u,v)   r(p)

(2)
(3)

we represent a word x using a vector x     rd. the dimen-
sionality of the representation, d, is a hyperparameter of the
proposed method. prior work on word representation learn-
ing have observed that the difference between the vectors that
represent two words closely approximates the semantic re-
lations that exist between those two words. for example, the
vector v(king)   v(queen) has shown to be similar to the vec-
tor v(man)     v(woman). we use this property to represent a
pattern p by a vector p     rd as the weighted sum of dif-
ferences between the two words in all word-pairs (u, v) that
co-occur with p as follows,

p =

1

|r(p)|

(u,v)   r(p)

f (p, u, v)(u     v).

(4)

(cid:88)

for example, consider fig. 1, where the two word-pairs
(lion, cat), and (ostrich, bird) co-occur respectively with
the two lexical patterns, p1 = large ys such as xs, and
p2 = x is a huge y. assuming that there are no other co-
occurrences between word-pairs and patterns in the corpus,

figure 1: computing the similarity between two patterns.

the representations of the patterns p1 and p2 are given respec-
tively by p1 = x1     x2, and p2 = x3     x4. we measure the
relational similarity between (x1, x2) and (x3, x4) using the
inner-product p1(cid:62)p2.

we model the problem of learning word representations as
a binary classi   cation task, where we learn representations
for words such that they can be used to accurately predict
whether a given pair of patterns are relationally similar. in
our previous example, we would learn representations for the
four words lion, cat, ostrich, and bird such that the similarity
between the two patterns large ys such as xs, and x is a huge
y is maximized. later in section 3.1, we propose an unsuper-
vised method for selecting relationally similar (positive) and
dissimilar (negative) pairs of patterns as training instances to
train a binary classi   er.
let us denote the target label for two patterns p1, p2 by
t(p1, p2)     {1, 0}, where the value 1 indicates that p1 and
p2 are relationally similar, and 0 otherwise. we compute the
prediction loss for a pair of patterns (p1, p2) as the squared
loss between the target and the predicted labels as follows,

l(t(p1, p2), p1, p2) =

(t(p1, p2)       (p1(cid:62)p2))

2

.

(5)

1
2

different non-linear functions can be used as the prediction
function   (  ) such as the logistic-sigmoid, hyperbolic tan-
gent, or recti   ed linear units. in our preliminary experiments
we found hyperbolic tangent, tanh, given by

  (  ) = tanh(  ) =

exp(  )     exp(     )
exp(  ) + exp(     )

(6)

to work particularly well among those different non-
linearities.

to derive the update rule for word representations, let us
consider the derivative of the loss w.r.t. the word representa-
tion x of a word x,
   l
   x

   p1
   x

   p2
   x

(7)

=

+

,

   l
   p1

   l
   p2

where the partial derivative of the loss w.r.t. pattern represen-

x1x2p11x3x4p2lioncatostrichbirdlarge ys such as xsx is a huge yf(p1, x1, x2) (p1>p2)-f(p1, x1, x2)f(p2, x3, x4)-f(p2, x3, x4)tations are given by,

=   

(cid:62)

(cid:48)

(p1

p2)(  (p1

=   

(cid:62)

(cid:48)

(p1

p2)(  (p1

(cid:62)

p2)     t(p1, p2))p2,
p2)     t(p1, p2))p1.
(cid:62)

   l
   p1
   l
   p2

(8)

(9)

here,   (cid:48) denotes the    rst derivative of tanh, which is given
by 1      (  )2. to simplify the notation we drop the arguments
of the id168.

from eq. 4 we get,

1

|r(p1)| (h(p1, u = x, v)     h(p1, u, v = x)) ,
|r(p2)| (h(p2, u = x, v)     h(p2, u, v = x)) ,

1

(10)

(11)

=

=

   p1
   x
   p2
   x
where,

h(p, u = x, v) =

and

h(p, u, v = x) =

(cid:88)
(cid:88)

(x,v)   {(u,v)|(u,v)   r(p),u=x}

f (p, x, v),

f (p, u, x).

(u,x)   {(u,v)|(u,v)   r(p),v=x}

substituting the partial derivatives given by eqs. 8-11 in

eq. 7 we get,

   l
   x

=   (p1, p2)[h(p1, x)

+h(p2, x)

(cid:88)
(cid:88)

(u,v)   r(p2)

f (p2, u, v)(u     v)

f (p1, u, v)(u     v)],

where   (p1, p2) is de   ned as

(u,v)   r(p1)

  (p1, p2) =

  (cid:48)(p1

(cid:62)p2)(t(p1, p2)       (p1

|r(p1)||r(p2)|

(cid:62)p2))

,

and h(p, x) is de   ned as

h(p, x) = h(p, u = x, v)     h(p, u, v = x).

(12)

(13)

(14)

1 , p(i)

1 , p(i)

2 )}n

2 , t(p(i)

we use stochastic gradient decent (sgd) with learning rate
adapted by adagrad [duchi et al., 2011] to update the word
representations. the pseudo code for the proposed method is
shown in algorithm 1. given a set of n relationally similar
and dissimilar pattern-pairs, {(p(i)
i=1, al-
gorithm 1 initializes each word xj in the vocabulary with a
vector xj     rd. the initialization can be conducted either
using randomly sampled vectors from a zero mean and unit
variance gaussian distribution, or by pre-trained word rep-
resentations. in our preliminary experiments, we found that
the word vectors learnt by glove [pennington et al., 2014]
to perform consistently well over random vectors when used
as the initial word representations in the proposed method.
because word vectors trained using existing word representa-
tions already demonstrate a certain degree of relational struc-
ture with respect to proportional analogies, we believe that
initializing using pre-trained word vectors assists the subse-
quent optimization process.

algorithm 1 learning word representations.
input: training pattern-pairs {(p(i)
1 , p(i)

2 )}n
i=1,
dimensionality d of the word representations, and the
maximum number of iterations t .
output: representation xj     rd, of a word xj for j =

2 , t(p(i)

1 , p(i)

1, . . . , m, where m is the vocabulary size.

j=1.

(cid:80)
(u,v)   r(pk) f (pk, u, v)(u     v)

|r(pk)|

pk = 1

for k = 1 to k do

end for
for i = 1 to n do

1: initialize word vectors {xj}m
2: for t = 1 to t do
3:
4:
5:
6:
7:
8:
9:
10:
11: end for
12: return {xj}m

for j = 1 to m do
xj = xj       (t)

end for

end for

   l
   xj

j=1.

j

during each iteration, algorithm 1 alternates between two
steps. first, in lines 3-5, it computes pattern representations
using eq. 4 from the current word representations for all the
patterns (k in total) in the training dataset. second, in lines
6-10, for each train pattern-pair we compute the derivative of
the loss according to eq. 12, and update the word represen-
tations. these two steps are repeated for t iterations, after
which the    nal set of word representations are returned.

the computational complexity of algorithm 1 is   (t kd+
t n m d), where d is the dimensionality of the word represen-
tations. naively iterating over n training instances and m
words in the vocabulary can be prohibitively expensive for
large training datasets and vocabularies. however, in practice
we can ef   ciently compute the updates using two tricks: de-
layed updates and indexing. once we have computed the pat-
tern representations for all k patterns in the    rst iteration, we
can postpone the update of a representation for a pattern until
that pattern next appears in a training instance. this reduces
the number of patterns that are updated in each iteration to
a maximum of 2 instead of k for the iterations t > 1. be-
cause of the sparseness in co-occurrences, only a handful (ca.
100) of patterns co-occur with any given word-pair. there-
fore, by pre-compiling an index from a pattern to the words
with which that pattern co-occurs, we can limit the update
of word representations in line 8 to a much smaller number
than m. moreover, the vector subtraction can be parallized
across the dimensions. although the id168 de   ned by
eq. 5 is non-convex w.r.t. to word representations, in practice,
algorithm 1 converges after a few (less than 5) iterations. in
practice, it requires less than an hour to train from a 2 bil-
lion word corpus where we have n = 100, 000, t = 10,
k = 10, 000 and m = 210, 914.

lexical patterns contain sequences of multiple words.
therefore, exact occurrences of lexical patterns are rare com-
pared to that of individual words even in large corpora. di-
rectly learning representations for lexical patterns using their
co-occurrence statistics leads to data sparseness issues, which

becomes problematic when applying existing methods pro-
posed for learning representations for single words to learn
representations for lexical patterns that consist of multiple
words. the proposal made in eq. 4 to compute representa-
tions for patterns circumvent this data sparseness issue by in-
directly modeling patterns through word representations.
3.1 selecting similar/dissimilar pattern-pairs
we use the ukwac corpus1 to extract relationally similar
(positive) and dissimilar (negative) pairs of patterns (pi, pj)
to train the proposed method. the ukwac is a 2 billion word
corpus constructed from the web limiting the crawl to the .uk
domain. we select word-pairs that co-occur at least in 50 sen-
tences within a co-occurrence window of 5 tokens. moreover,
using a stop word list, we ignore word-pairs that purely con-
sists of stop words. we obtain 210, 914 word-pairs from this
step. next, we extract lexical patterns for those word-pairs
by replacing the    rst and second word in a word-pair respec-
tively by slot variables x and y in a co-occurrence window of
length 5 tokens to extract numerous lexical patterns. we select
the top occurring 10, 000 lexical patterns (i.e. k = 10, 000)
for further processing.

we represent a pattern p by a vector where the elements
correspond to the ppmi values f (p, u, v) between p and all
the word-pairs (u, v) that co-occur with p. next, we com-
pute the cosine similarity between all pairwise combinations
of the 10, 000 patterns, and rank the pattern pairs in the de-
scending order of their cosine similarities. we select the top
ranked 50, 000 pattern-pairs as positive training instances. we
select 50, 000 pattern-pairs from the bottom of the list which
have non-zero similarity scores as negative training instances.
the reason for not selecting pattern-pairs with zero similar-
ity scores is that such patterns do not share any word-pairs in
common, and are not informative as training data for updat-
ing word representations. thus, the total number of training
instances we select is n = 50, 000 + 50, 000 = 100, 000.
4 evaluating word representations using

proportional analogies

to evaluate the ability of the proposed method to learn word
representations that embed information related to semantic
relations, we apply it to detect proportional analogies. for
example, consider the proportional analogy, man:woman ::
king:queen. given, the    rst three words, a word represen-
tation learning method is required to    nd the fourth word
from the vocabulary that maximizes the relational similar-
ity between the two word-pairs in the analogy. three bench-
mark datasets have been popularly used in prior work for
evaluating analogies: google dataset [mikolov et al., 2013c]
(10, 675 syntactic analogies and 8869 semantic analogies),
semeval dataset [jurgens et al., 2012] (79 questions), and
sat dataset [turney, 2006] (374 questions). for the google
dataset, the set of candidates for the fourth word consists of
all the words in the vocabulary. for the semeval and sat
datasets, each question word-pair is assigned with a limited
number of candidate word-pairs out of which only one is cor-
rect. the accuracy of a word representation is evaluated by

1http://wacky.sslmit.unibo.it

table 1: word analogy results on benchmark datasets.

method
ivlbl cosadd
ivlbl cosmult
ivlbl pairdiff
skip-gram cosadd
skip-gram cosmult
skip-gram pairdiff
cbow cosadd
cbow cosmult
cbow pairdiff
glove cosadd
glove cosmult
glove pairdiff
prop cosadd
prop cosmult
prop pairdiff

sem.
63.60
65.20
52.60
31.89
33.98
7.20
39.75
38.97
5.76
86.67
86.84
45.93
86.70
86.91
41.85

synt.
61.80
63.00
48.50
67.67
69.62
19.73
70.11
70.39
13.43
82.81
84.80
41.23
85.35
87.04
42.86

total
62.60
64.00
50.30
51.43
53.45
14.05
56.33
56.13
9.95
84.56
85.72
43.36
85.97
86.98
42.40

sat
20.85
19.78
22.45
29.67
28.87
35.29
29.41
28.34
33.16
27.00
25.66
44.65
29.41
28.87
45.99

semeval
34.63
33.42
36.94
40.89
38.54
43.99
40.31
38.19
42.89
40.11
37.56
44.67
41.86
39.67
44.88

the percentage of the correctly answered analogy questions
out of all the questions in a dataset. we do not skip any ques-
tions in our evaluations.

given a proportional analogy a : b :: c : d, we use the
following measures proposed in prior work for measuring the
relational similarity between (a, b) and (c, d).
cosadd proposed by mikolov et al. [2013d] ranks candi-

dates c according to the formula

cosadd(a : b, c : d) = cos(b     a + c, d),

(15)
and selects the top-ranked candidate as the correct an-
swer.

cosmult: cosadd measure can be decomposed into the
summation of three cosine similarities, where in practice
one of the three terms often dominates the sum. to over-
come this bias in cosadd, levy and goldberg [2014]
proposed the cosmult measure given by,

cos(b, d) cos(c, d)

cos(a, d) +  

cosmult(a : b, c : d) =

(16)
we convert all cosine values x     [   1, 1] to positive val-
ues using the transformation (x+1)/2. here,   is a small
constant value to prevent denominator becoming zero,
and is set to 10   5 in the experiments.

.

pairdiff measures the cosine similarity between the two
vectors that correspond to the difference of the word
representations of the two words in each word-pair. it
follows from our hypothesis that the semantic relation
between two words can be represented by the vector dif-
ference of their word representations. pairdiff has been
used by mikolov et al. [2013d] for detecting semantic
analogies and is given by,

pairdi   (a : b, c : d) = cos(b     a, d     c).

(17)

5 experiments and results
in table 1, we compare the proposed method against pre-
viously proposed word representation learning methods:
ivlbl [mnih and kavukcuoglu, 2013], skip-gram [mikolov
et al., 2013c], cbow [mikolov et al., 2013a], and

figure 2: accuracy on google dataset when the proposed
method is trained using 10k and 100k instances.

glove [pennington et al., 2014]. all methods compared in
table 1 are trained on the same ukwac corpus of 2b tokens
to produce 300 dimensional word vectors. we use the pub-
licly available implementations2,3 by the original authors for
training the word representations using the recommended pa-
rameter values. therefore, any differences in performances
reported in table 1 can be directly attributable to the differ-
ences in the respective word representation learning methods.
in all of our experiments, the proposed method converged
with less than 5 iterations.

from table 1 we see that the proposed method (denoted by
prop) achieves the best results for the semantic (sem), syn-
tactic (synt) and their union (total) analogy questions in the
google dataset using cosmult measure. for analogy ques-
tions in sat and semeval datasets the best performance is
reported by the proposed method using the pairdiff measure.
the pairdiff measure computes the cosine similarity between
the two difference vectors b     a and d     c, ignoring the
spatial distances between the individual words as opposed to
cosadd or cosmult. recall that in the google dataset we
are required to    nd analogies from a large open vocabulary
whereas in sat and semeval datasets the set of candidates
is limited to a closed pre-de   ned set. relying on direction
alone, while ignoring spatial distance is problematic when
considering the entire vocabulary as candidates because, we
are likely to    nd candidates d that have the same relation
to c as re   ected by a     b. for example, given the analogy
man:woman::king:?, we are likely to recover feminine en-
tities, but not necessarily royal ones using pairdiff. on the
other hand, in both semeval and sat datasets, the set of can-
didate answers already contains the related candidates, leav-
ing mainly the direction to be decided. for the remainder of
the experiments described in the paper, we use cosmult for
evaluations on the google dataset, whereas pairdiff is used
for the sat and semeval datasets. results reported in table 1
reveal that according to the binomial exact test with 95% con-

2https://code.google.com/p/id97/
3http://nlp.stanford.edu/projects/glove/

figure 3: accuracy of the proposed method on benchmark
datasets for dimensionalities of the word representations.

   dence the proposed method statistically signi   cantly outper-
forms glove, the current state-of-the-art word representation
learning method, on all three benchmark datasets.

to study the effect of the train dataset size on the perfor-
mance of the proposed method, following the procedure de-
scribed in section 3.1, we sample two balanced datasets con-
taining respectively 10, 000 and 100, 000 instances. figure 2
shows the performance reported by the proposed method on
the google dataset. we see that the overall performance in-
creases with the dataset size, and the gain is more for syntac-
tic analogies. this result can be explained considering that se-
mantic relations are more rare compared to syntactic relations
in the ukwac corpus, a generic web crawl, used in our exper-
iments. however, the proposed train data selection method
provides us with a potentially unlimited source of positive
and negative training instances which we can use to further
improve the performance.

to study the effect of the dimensionality d of the represen-
tation on the performance of the proposed method, we hold
the train data size    xed and produce word representations for
different dimensionalities. as shown in figure 3, the perfor-
mance increases until around 600 dimensions on the google,
and the sat datasets after which it stabilizes. the perfor-
mance on the semeval dataset remains relatively unaffected
by the dimensionality of the representation.

6 conclusions
we proposed a method to learn word representations that
embeds information related to semantic relations between
words. a two step algorithm that alternates between pat-
tern and word representations was proposed. the proposed
method signi   cantly outperforms the current state-of-the-art
word representation learning methods on three datasets con-
taining proportional analogies.

semantic relations that can be encoded as attributes in
words are only a fraction of all types of semantic relations.
whether we can accurately embed semantic relations that in-
volve multiple entities, or semantic relations that are only ex-
trinsically and implicitly represented remains unknown. we

semanticsyntactictotal82838485868788accuracy10k100k1002003004005006007008009001000dimensionality354045505560657075accuracysemanticsyntactictotalsatsemevalplan to explore these possibilities in our future work.

references
[baroni and lenci, 2010] marco baroni and alessandro
lenci. distributional memory: a general framework
for corpus-based semantics. computational linguistics,
36(4):673     721, 2010.

[baroni et al., 2014] marco baroni, georgiana dinu, and
germ  an kruszewski. don   t count, predict! a systematic
comparison of context-counting vs. context-predicting se-
mantic vectors. in acl   14, pages 238   247, 2014.

[bengio et al., 2003] yoshua bengio, r  ejean ducharme,
pascal vincent, and christian jauvin. a neural proba-
bilistic language model. journal of machine learning re-
search, 3:1137     1155, 2003.

[bollegala et al., 2007a] d. bollegala, y. matsuo,

and
m. ishizuka.
an integrated approach to measuring
semantic similarity between words using information
in proceedings of naacl hlt,
available on the web.
pages 340   347, 2007.

[bollegala et al., 2007b] danushka bollegala, yutaka mat-
suo, and mitsuru ishizuka. websim: a web-based seman-
tic similarity measure. in proc. of 21st annual conference
of the japanese society of artiti   cial intelligence, pages
757     766, 2007.

[bollegala et al., 2010] danushka bollegala, yutaka matsuo,
and mitsuru ishizuka. relational duality: unsupervised
extraction of semantic relations between entities on the
web. in www 2010, pages 151     160, 2010.

[cho et al., 2014] kyunghyun cho, bart van merrienboer,
caglar gulcehre, dzmitry bahdanau, fethi bougares, hol-
ger schwenk, and yoshua bengio. learning phrase rep-
resentations using id56 encoder   decoder for statistical ma-
chine translation. in emnp   14, pages 1724   1734, 2014.
jason weston,
leon bottou, michael karlen, koray kavukcuoglu, and
pavel kuska. natural language processing (almost) from
scratch. journal of machine learning research, 12:2493
    2537, 2011.

[collobert et al., 2011] ronan collobert,

[duc et al., 2010] nguyen tuan duc, danushka bollegala,
and mitsuru ishizuka. using relational similarity between
word pairs for latent relational search on the web.
in
ieee/wic/acm international conference on web intelli-
gence and intelligent agent technology, pages 196     199,
2010.

[duc et al., 2011] nguyen tuan duc, danushka bollegala,
and mitsuru ishizuka. cross-language latent relational
in proc.
search: mapping knowledge across languages.
of the twenty-fifth aaai conference on arti   cial intelli-
gence, pages 1237     1242, 2011.

[duchi et al., 2011] john duchi, elad hazan, and yoram
singer. adaptive subgradient methods for online learning
and stochastic optimization. journal of machine learning
research, 12:2121     2159, july 2011.

[hashimoto et al., 2014] kazuma hashimoto, pontus stene-
torp, makoto miwa, and yoshimasa tsuruoka.
jointly
learning word representations and composition functions
using predicate-argument structures. in emnlp   14, pages
1544   1555, 2014.

[huang et al., 2012] eric h. huang, richard socher,
christopher d. manning, and andrew y. ng. improving
word representations via global context and multiple word
prototypes. in acl   12, pages 873     882, 2012.

[jurgens et al., 2012] david a. jurgens, saif mohammad,
peter d. turney, and keith j. holyoak. measuring degrees
of relational similarity. in semeval   12, 2012.

[levy and goldberg, 2014] omer levy and yoav goldberg.
linguistic regularities in sparse and explicit word repre-
sentations. in conll, 2014.

[mikolov et al., 2013a] tomas mikolov, kai chen, and jef-
frey dean. ef   cient estimation of word representation in
vector space. corr, 2013.

[mikolov et al., 2013b] tomas mikolov, quoc v. le, and
ilya sutskever. exploiting similarities among languages
for machine translation. arxiv, 2013.

[mikolov et al., 2013c] tomas mikolov, ilya sutskever, kai
chen, gregory s. corrado, and jeffrey dean. distributed
representations of words and phrases and their composi-
tionality. in nips, pages 3111     3119, 2013.

[mikolov et al., 2013d] tomas mikolov, wen tau yih, and
geoffrey zweig. linguistic regularities in continous space
in naacl   13, pages 746     751,
word representations.
2013.

[mnih and kavukcuoglu, 2013] andriy mnih and koray
kavukcuoglu. learning id27s ef   ciently with
noise-contrastive estimation. in nips, 2013.

[pennington et al., 2014] jeffery

richard
socher, and christopher d. manning. glove: global
vectors for word representation. in emnlp, 2014.

pennington,

[socher et al., 2011] richard socher, jeffrey pennington,
eric h. huang, andrew y. ng, and christopher d. man-
ning. semi-supervised recursive autoencoders for predict-
in emnlp   11, pages 151   
ing sentiment distributions.
161, 2011.

[turian et al., 2010] joseph turian, lev ratinov, and yoshua
bengio. word representations: a simple and general
method for semi-supervised learning. in acl, pages 384
    394, 2010.

[turney and pantel, 2010] peter d. turney and patrick pan-
tel. from frequency to meaning: vector space models of
journal of ariti   cial intelligence research,
semantics.
37:141     188, 2010.

[turney, 2005] p.d. turney. measuring semantic similarity
by latent relational analysis. in proc. of ijcai   05, pages
1136   1141, 2005.

[turney, 2006] p.d. turney. similarity of semantic relations.

computational linguistics, 32(3):379   416, 2006.

