5
1
0
2

 

n
u
j
 

2
2

 
 
]
l
c
.
s
c
[
 
 

1
v
6
2
7
6
0

.

6
0
5
1
:
v
i
x
r
a

skip-thought vectors

ryan kiros 1, yukun zhu 1, ruslan salakhutdinov 1,2, richard s. zemel 1,2

antonio torralba 3, raquel urtasun 1, sanja fidler 1

university of toronto 1

canadian institute for advanced research 2

massachusetts institute of technology 3

abstract

we describe an approach for unsupervised learning of a generic, distributed sen-
tence encoder. using the continuity of text from books, we train an encoder-
decoder model that tries to reconstruct the surrounding sentences of an encoded
passage. sentences that share semantic and syntactic properties are thus mapped
to similar vector representations. we next introduce a simple vocabulary expan-
sion method to encode words that were not seen as part of training, allowing us
to expand our vocabulary to a million words. after training our model, we ex-
tract and evaluate our vectors with linear models on 8 tasks: semantic relatedness,
paraphrase detection, image-sentence ranking, question-type classi   cation and 4
benchmark sentiment and subjectivity datasets. the end result is an off-the-shelf
encoder that can produce highly generic sentence representations that are robust
and perform well in practice. we will make our encoder publicly available.

1

introduction

developing learning algorithms for distributed id152 of words has been a long-
standing open problem at the intersection of language understanding and machine learning. in recent
years, several approaches have been developed for learning composition operators that map word
vectors to sentence vectors including recursive networks [1], recurrent networks [2], convolutional
networks [3, 4] and recursive-convolutional methods [5, 6] among others. all of these methods
produce sentence representations that are passed to a supervised task and depend on a class label in
order to backpropagate through the composition weights. consequently, these methods learn high-
quality sentence representations but are tuned only for their respective task. the paragraph vector
of [7] is an alternative to the above models in that it can learn unsupervised sentence representations
by introducing a distributed sentence indicator as part of a neural language model. the downside is
at test time, id136 needs to be performed to compute a new vector.
in this paper we abstract away from the composition methods themselves and consider an alterna-
tive id168 that can be applied with any composition operator. we consider the following
question: is there a task and a corresponding loss that will allow us to learn highly generic sentence
representations? we give evidence for this by proposing a model for learning high-quality sentence
vectors without a particular supervised task in mind. using word vector learning as inspiration, we
propose an objective function that abstracts the skip-gram model of [8] to the sentence level. that
is, instead of using a word to predict its surrounding context, we instead encode a sentence to predict
the sentences around it. thus, any composition operator can be substituted as a sentence encoder
and only the objective function becomes modi   ed. figure 1 illustrates the model. we call our model
skip-thoughts and vectors induced by our model are called skip-thought vectors.
our model depends on having a training corpus of contiguous text. we chose to use a large collection
of novels, namely the bookcorpus dataset [9] for training our models. these are free books written
by yet unpublished authors. the dataset has books in 16 different genres, e.g., romance (2,865
books), fantasy (1,479), science    ction (786), teen (430), etc. table 1 highlights the summary
statistics of the book corpus. along with narratives, books contain dialogue, emotion and a wide

1

figure 1: the skip-thoughts model. given a tuple (si   1, si, si+1) of contiguous sentences, with si
the i-th sentence of a book, the sentence si is encoded and tries to reconstruct the previous sentence
si   1 and next sentence si+1. in this example, the input is the sentence triplet i got back home. i
could see the cat on the steps. this was strange. unattached arrows are connected to the encoder
output. colors indicate which components share parameters. (cid:104)eos(cid:105) is the end of sentence token.
# of unique words mean # of words per sentence

# of books

11,038

# of sentences
74,004,228

# of words
984,846,357

1,316,420

13

table 1: summary statistics of the bookcorpus dataset [9]. we use this corpus to training our
model.

range of interaction between characters. furthermore, with a large enough collection the training
set is not biased towards any particular domain or application. table 2 shows nearest neighbours
of sentences from a model trained on the bookcorpus dataset. these results show that skip-thought
vectors learn to accurately capture semantics and syntax of the sentences they encode.
we evaluate our vectors in a newly proposed setting: after learning skip-thoughts, freeze the model
and use the encoder as a generic feature extractor for arbitrary tasks. in our experiments we con-
sider 8 tasks: semantic-relatedness, paraphrase detection, image-sentence ranking and 5 standard
classi   cation benchmarks. in these experiments, we extract skip-thought vectors and train linear
models to evaluate the representations directly, without any additional    ne-tuning. as it turns out,
skip-thoughts yield generic representations that perform robustly across all tasks considered.
one dif   culty that arises with such an experimental setup is being able to construct a large enough
word vocabulary to encode arbitrary sentences. for example, a sentence from a wikipedia article
might contain nouns that are highly unlikely to appear in our book vocabulary. we solve this problem
by learning a mapping that transfers word representations from one model to another. using pre-
trained id97 representations learned with a continuous bag-of-words model [8], we learn a
linear mapping from a word in id97 space to a word in the encoder   s vocabulary space. the
mapping is learned using all words that are shared between vocabularies. after training, any word
that appears in id97 can then get a vector in the encoder id27 space.

2 approach

2.1

inducing skip-thought vectors

we treat skip-thoughts in the framework of encoder-decoder models 1. that is, an encoder maps
words to a sentence vector and a decoder is used to generate the surrounding sentences. encoder-
decoder models have gained a lot of traction for id4.
in this setting, an
encoder is used to map e.g. an english sentence into a vector. the decoder then conditions on this
vector to generate a translation for the source english sentence. several choices of encoder-decoder
pairs have been explored, including convnet-id56 [10], id56-id56 [11] and lstm-lstm [12].
the source sentence representation can also dynamically change through the use of an attention
mechanism [13] to take into account only the relevant words for translation at any given time. in our
model, we use an id56 encoder with gru [14] activations and an id56 decoder with a conditional
gru. this model combination is nearly identical to the id56 encoder-decoder of [11] used in neural
machine translation. gru has been shown to perform as well as lstm [2] on sequence modelling
tasks [14] while being conceptually simpler. gru units have only 2 gates and do not require the use
of a cell. while we use id56s for our model, any encoder and decoder can be used so long as we
can backpropagate through it.
assume we are given a sentence tuple (si   1, si, si+1). let wt
and let xt
and objective function.

i denote the t-th word for sentence si
i denote its id27. we describe the model in three parts: the encoder, decoder

1a preliminary version of our model was developed in the context of a id161 application [9].

2

query and nearest sentence
he ran his hand inside his coat , double-checking that the unopened letter was still there .
he slipped his hand between his coat and his shirt , where the folded copies lay in a brown envelope .
im sure youll have a glamorous evening , she said , giving an exaggerated wink .
im really glad you came to the party tonight , he said , turning to her .
although she could tell he had n   t been too invested in any of their other chitchat , he seemed genuinely curious about this .
although he had n   t been following her career with a microscope , he    d de   nitely taken notice of her appearances .
an annoying buzz started to ring in my ears , becoming louder and louder as my vision began to swim .
a weighty pressure landed on my lungs and my vision blurred at the edges , threatening my consciousness altogether .
if he had a weapon , he could maybe take out their last imp , and then beat up errol and vanessa .
if he could ram them from behind , send them sailing over the far side of the levee , he had a chance of stopping them .
then , with a stroke of luck , they saw the pair head together towards the portaloos .
then , from out back of the house , they heard a horse scream probably in answer to a pair of sharp spurs digging deep into its    anks .
    i    ll take care of it ,     goodman said , taking the phonebook .
    i    ll do that ,     julia said , coming in .
he    nished rolling up scrolls and , placing them to one side , began the more urgent task of    nding ale and tankards .
he righted the table , set the candle on a piece of broken plate , and reached for his    int , steel , and tinder .

table 2: in each example, the    rst sentence is a query while the second sentence is its nearest
neighbour. nearest neighbours were scored by cosine similarity from a random sample of 500,000
sentences from our corpus.

i , . . . , wt

i , . . . , wn

encoder. let w1
sentence. at each time step, the encoder produces a hidden state ht
representation of the sequence w1
to encode a sentence, we iterate the following sequence of equations (dropping the subscript i):

i be the words in sentence si where n is the number of words in the
i which can be interpreted as the
thus represents the full sentence.

i. the hidden state hn
i

rt =   (wrxt + urht   1)
zt =   (wzxt + uzht   1)
  ht = tanh(wxt + u(rt (cid:12) ht   1))
ht = (1     zt) (cid:12) ht   1 + zt (cid:12)   ht

(1)
(2)
(3)
(4)
where   ht is the proposed state update at time t, zt is the update gate, rt is the reset gate ((cid:12)) denotes
a component-wise product. both update gates takes values between zero and one.
decoder. the decoder is a neural language model which conditions on the encoder output hi. the
computation is similar to that of the encoder except we introduce matrices cz, cr and c that are
used to bias the update gate, reset gate and hidden state computation by the sentence vector. one
decoder is used for the next sentence si+1 while a second decoder is used for the previous sentence
si   1. separate parameters are used for each decoder with the exception of the vocabulary matrix v,
which is the weight matrix connecting the decoder   s hidden state for computing a distribution over
words. in what follows we describe the decoder for the next sentence si+1 although an analogous
computation is used for the previous sentence si   1. let ht
i+1 denote the hidden state of the decoder
at time t. decoding involves iterating through the following sequence of equations (dropping the
subscript i + 1):

given ht

i+1, the id203 of word wt

r xt   1 + ud
z xt   1 + ud

rht   1 + crhi)
zht   1 + czhi)

rt =   (wd
zt =   (wd
  ht = tanh(wdxt   1 + ud(rt (cid:12) ht   1) + chi)
i+1 = (1     zt) (cid:12) ht   1 + zt (cid:12)   ht
ht

(5)
(6)
(7)
(8)
i+1 given the previous t     1 words and the encoder vector is
(9)
i+1. an analogous computation

i+1)
denotes the row of v corresponding to the word of wt

i+1, hi)     exp(vwt

i+1|w<t

p (wt

ht

i+1

i+1

where vwt
is performed for the previous sentence si   1.
objective. given a tuple (si   1, si, si+1), the objective optimized is the sum of the log-probabilities
for the forward and backward sentences conditioned on the encoder representation:

logp (wt

i+1|w<t

i+1, hi) +

logp (wt

i   1|w<t

i   1, hi)

(10)

(cid:88)

(cid:88)

t

t

3

choreograph
choreography
choreographs
choreographing

rehearse

choreographed
choreography
choreographer

modulation

transimpedance

harmonics
modulation

##qam
amplitude
upmixing
modulations

vindicate
vindicates
exonerate
exculpate
absolve

undermine
invalidate

refute

neuronal
synaptic
neural
axonal
glial
neuron
apoptotic
endogenous

screwy mykonos
glyfada
wacky
santorini
nutty
dubrovnik
iffy
loopy
seminyak
zany
skiathos
kooky
dodgy

hersonissos
kefalonia

tupac
2pac

cormega
biggie

gridlock   d

nas
cent
shakur

table 3: nearest neighbours of words after vocabulary expansion. each query is a word that does
not appear in our 20,000 word training vocabulary.

the total objective is the above summed over all such training tuples.

2.2 vocabulary expansion

we now describe how to expand our encoder   s vocabulary to words it has not seen during training.
suppose we have a model that was trained to induce word representations, such as id97. let
vw2v denote the id27 space of these word representations and let vid56 denote the id56
id27 space. we assume the vocabulary of vw2v is much larger than that of vid56. our
goal is to construct a mapping f : vw2v     vid56 parameterized by a matrix w such that v(cid:48) = wv
for v     vw2v and v(cid:48)     vid56. inspired by [15], which learned linear mappings between translation
word spaces, we solve an un-regularized l2 id75 loss for the matrix w. thus, any
word from vw2v can now be mapped into vid56 for encoding sentences. table 3 shows examples of
nearest neighbour words for queries that did not appear in our training vocabulary.
we note that there are alternate strategies for solving the vocabulary problem. one alternative is to
initialize the id56 embedding space to that of pre-trained word vectors. this would require a more
sophisticated softmax for decoding, or clipping the vocabulary of the decoder as it would be too
computationally expensive to naively decode with vocabularies of hundreds of thousands of words.
an alternative strategy is to avoid words altogether and train at the character level.

3 experiments

in our experiments, we evaluate the capability of our encoder as a generic feature extractor after
training on the bookcorpus dataset. our experimentation setup on each task is as follows:
    using the learned encoder as a feature extractor, extract skip-thought vectors for all sentences.
    if the task involves computing scores between pairs of sentences, compute component-wise fea-
    train a linear classi   er on top of the extracted features, with no additional    ne-tuning or back-

tures between pairs. this is described in more detail speci   cally for each experiment.

propagation through the skip-thoughts model.

we restrict ourselves to linear classi   ers for two reasons. the    rst is to directly evaluate the rep-
resentation quality of the computed vectors. it is possible that additional performance gains can be
made throughout our experiments with non-linear models but this falls out of scope of our goal. fur-
thermore, it allows us to better analyze the strengths and weaknesses of the learned representations.
the second reason is that reproducibility now becomes very straightforward.

3.1 details of training

to induce skip-thought vectors, we train two separate models on our book corpus. one is a unidi-
rectional encoder with 2400 dimensions, which we subsequently refer to as uni-skip. the other is
a bidirectional model with forward and backward encoders of 1200 dimensions each. this model
contains two encoders with different parameters: one encoder is given the sentence in correct order,
while the other is given the sentence in reverse. the outputs are then concatenated to form a 2400 di-
mensional vector. we refer to this model as bi-skip. for training, we initialize all recurrent matricies
with orthogonal initialization [16]. non-recurrent weights are initialized from a uniform distribution
in [-0.1,0.1]. mini-batches of size 128 are used and gradients are clipped if the norm of the parameter

4

method
illinois-lh [18]
unal-nlp [19]
meaning factory [20]
ecnu [21]
mean vectors [22]
dt-id56 [23]
sdt-id56 [23]
lstm [22]
bidirectional lstm [22]
dependency tree-lstm [22]
uni-skip
bi-skip
combine-skip
combine-skip+coco

r

0.7993
0.8070
0.8268
0.8414
0.7577
0.7923
0.7900
0.8528
0.8567
0.8676
0.8477
0.8405
0.8584
0.8655

  

0.7538
0.7489
0.7721

   

0.6738
0.7319
0.7304
0.7911
0.7966
0.8083
0.7780
0.7696
0.7916
0.7995

mse
0.3692
0.3550
0.3224

   

0.4557
0.3822
0.3848
0.2831
0.2736
0.2532
0.2872
0.2995
0.2687
0.2561

method
feats [24]
rae+dp [24]
rae+feats [24]
rae+dp+feats [24]
fhs [25]
pe [26]
wddp [27]
mtmetrics [28]
uni-skip
bi-skip
combine-skip
combine-skip + feats

acc
73.2
72.6
74.2
76.8
75.0
76.1
75.6
77.4
73.0
71.2
73.0
75.8

f1

83.6
82.7
82.7
83.0
84.1
81.9
81.2
82.0
83.0

table 4: left: test set results on the sick semantic relatedness subtask. the id74
are pearson   s r, spearman   s   , and mean squared error. the    rst group of results are semeval 2014
submissions, while the second group are results reported by [22]. right: test set results on the
microsoft paraphrase corpus. the id74 are classi   cation accuracy and f1 score. top:
recursive autoencoder variants. middle: the best published results on this dataset.

vector exceeds 10. we used the adam algorithm [17] for optimization. both models were trained
for roughly two weeks. as an additional experiment, we also report experimental results using a
combined model, consisting of the concatenation of the vectors from uni-skip and bi-skip, resulting
in a 4800 dimensional vector. since we are using linear classi   ers for evaluation, we were curi-
ous to what extent performance gains can be made by trivially increasing the vector dimensionality
post-training of the skip-thought models. we refer to this model throughout as combine-skip.
after our models are trained, we then employ vocabulary expansion to map id27s into
the id56 encoder space. the publically available cbow word vectors are used for this purpose
2. the skip-thought models are trained with a vocabulary size of 20,000 words. after removing
multiple word examples from the cbow model, this results in a vocabulary size of 930,911 words.
thus even though our skip-thoughts model was trained with only 20,000 words, after vocabulary
expansion we can now successfully encode 930,911 possible words.
since our goal is to evaluate skip-thoughts as a general feature extractor, we keep text pre-processing
to a minimum. when encoding new sentences, no additional preprocessing is done other than basic
id121. this is done to test the robustness of our vectors.

3.2 semantic relatedness

our    rst experiment is on the semeval 2014 task 1: semantic relatedness sick dataset [29]. given
two sentences, our goal is to produce a score of how semantically related these sentences are, based
on human generated scores. each score is the average of 10 different human annotators. scores
take values between 1 and 5. a score of 1 indicates that the sentence pair is not at all related, while
a score of 5 indicates they are highly related. the dataset comes with a prede   ned split of 4500
training pairs, 500 development pairs and 4927 testing pairs. all sentences are derived from existing
image and video annotation datasets. the id74 are pearson   s r, spearman   s   , and
mean squared error.
given the dif   culty of this task, many existing systems employ a large amount of feature engineering
and additional resources. thus, we test how well our learned representations fair against heavily en-
gineered pipelines. recently, [22] showed that learning representations with lstm or tree-lstm
for the task at hand is able to outperform these existing systems. we take this one step further
and see how well our vectors learned from a completely different task are able to capture semantic
relatedness when only a linear model is used on top to predict scores.
to represent a sentence pair, we use two features. given two skip-thought vectors u and v, we
compute their component-wise product u    v and their absolute difference |u     v| and concatenate

2http://code.google.com/p/id97/

5

sentence 1
a little girl is looking at a woman in costume
a little girl is looking at a woman in costume
a little girl is looking at a woman in costume
a sea turtle is hunting for    sh
a sea turtle is not hunting for    sh
a man is driving a car
there is no man driving the car
a large duck is    ying over a rocky stream
a large duck is    ying over a rocky stream
a person is performing acrobatics on a motorcycle
a person is performing tricks on a motorcycle
someone is pouring ingredients into a pot
nobody is pouring ingredients into a pot
someone is pouring ingredients into a pot

sentence 2
a young girl is looking at a woman in costume
the little girl is looking at a man in costume
a little girl in costume looks like a woman
a sea turtle is hunting for food
a sea turtle is hunting for    sh
the car is being driven by a man
a man is driving a car
a duck, which is large, is    ying over a rocky stream
a large stream is full of rocks, ducks and    ies
a person is performing tricks on a motorcycle
the performer is tricking a person on a motorcycle
someone is adding ingredients to a pot
someone is pouring ingredients into a pot
a man is removing vegetables from a pot

gt
4.7
3.8
2.9
4.5
3.4
5
3.6
4.8
2.7
4.3
2.6
4.4
3.5
2.4

pred
4.5
4.0
3.5
4.5
3.8
4.9
3.5
4.9
3.1
4.4
4.4
4.0
4.2
3.6

table 5: example predictions from the sick test set. gt is the ground truth relatedness, scored
between 1 and 5. the last few results show examples where slight changes in sentence structure
result in large changes in relatedness which our model was unable to score correctly.

them together. these two features were also used by [22]. to predict a score, we use the same
setup as [22]. let r(cid:62) = [1, . . . , 5] be an integer vector from 1 to 5. we compute a distribution p
as a function of prediction scores y given by pi = y     (cid:98)y(cid:99) if i = (cid:98)y(cid:99) + 1, pi = (cid:98)y(cid:99)     y + 1 if
i = (cid:98)y(cid:99) and 0 otherwise. these then become our targets for a id28 classi   er. at test
time, given new sentence pairs we    rst compute targets   p and then compute the related score as r(cid:62)   p.
as an additional comparison, we also explored appending features derived from an image-sentence
embedding model trained on coco (see section 3.4). given vectors u and v, we obtain vectors u(cid:48)
and v(cid:48) from the learned linear embedding model and compute features u(cid:48)    v(cid:48) and |u(cid:48)     v(cid:48)|. these
are then concatenated to the existing features.
table 4 (left) presents our results. first, we observe that our models are able to outperform all
previous systems from the semeval 2014 competition. this is remarkable, given the simplicity
of our approach and the lack of feature engineering. it highlights that skip-thought vectors learn
representations that are well suited for semantic relatedness. our results are comparable to lstms
whose representations are trained from scratch on this task. only the dependency tree-lstm of [22]
performs better than our results. we note that the dependency tree-lstm relies on parsers whose
training data is very expensive to collect and does not exist for all languages. we also observe
using features learned from an image-sentence embedding model on coco gives an additional
performance boost, resulting in a model that performs on par with the dependency tree-lstm. to
get a feel for the model outputs, table 5 shows example cases of test set pairs. our model is able to
accurately predict relatedness on many challenging cases. on some examples, it fails to pick up on
small distinctions that drastically change a sentence meaning, such as tricks on a motorcycle versus
tricking a person on a motorcycle.

3.3 paraphrase detection

the next task we consider is paraphrase detection on the microsoft research paraphrase cor-
pus [30]. on this task, two sentences are given and one must predict whether or not they are
paraphrases. the training set consists of 4076 sentence pairs (2753 which are positive) and the
test set has 1725 pairs (1147 are positive). we compute a vector representing the pair of sentences
in the same way as on the sick dataset, using the component-wise product u    v and their absolute
difference |u     v| which are then concatenated together. we then train id28 on top to
predict whether the sentences are paraphrases. cross-validation is used for tuning the l2 penalty.
as in the semantic relatedness task, paraphrase detection has largely been dominated by extensive
feature engineering, or a combination of feature engineering with semantic spaces. we report exper-
iments in two settings: one using the features as above and the other incorporating basic statistics
between sentence pairs, the same features used by [24]. these are referred to as feats in our results.
we isolate the results and baselines used in [24] as well as the top published results on this task.
table 4 (right) presents our results, from which we can observe the following: (1) skip-thoughts
alone outperform recursive nets with dynamic pooling when no hand-crafted features are used, (2)

6

coco retrieval

image annotation

image search

model
random ranking
dvsa [31]
gmm+hglmm [32]
m-id56 [33]
uni-skip
bi-skip
combine-skip

r@1 r@5 r@10 med r r@1 r@5 r@10 med r
500
0.1
3
38.4
39.4
4
3
41.0
4
30.6
4
32.7
33.8
4

1.0
74.8
76.6
77.0
71.7
73.2
74.6

0.5
60.2
59.8
42.2
56.4
57.1
60.0

1.1
80.5
80.9
83.5
79.8
79.6
82.1

0.1
27.4
25.1
29.0
22.7
24.2
25.9

0.6
69.6
67.9
73.0
64.5
67.3
67.7

631
1
2
2
3
3
3

table 6: coco test-set results for image-sentence retrieval experiments. r@k is recall@k (high
is good). med r is the median rank (low is good).

when other features are used, recursive nets with dynamic pooling works better, and (3) when skip-
thoughts are combined with basic pairwise statistics, it becomes competitive with the state-of-the-art
which incorporate much more complicated features and hand-engineering. this is a promising result
as many of the sentence pairs have very    ne-grained details that signal if they are paraphrases.

3.4 image-sentence ranking

we next consider the task of retrieving images and their sentence descriptions. for this experiment,
we use the microsoft coco dataset [34] which is the largest publicly available dataset of images
with high-quality sentence descriptions. each image is annotated with 5 captions, each from dif-
ferent annotators. following previous work, we consider two tasks: image annotation and image
search. for image annotation, an image is presented and sentences are ranked based on how well
they describe the query image. the image search task is the reverse: given a caption, we retrieve
images that are a good    t to the query. the training set comes with over 80,000 images each with 5
captions. for development and testing we use the same splits as [31]. the development and test sets
each contain 1000 images and 5000 captions. evaluation is performed using recall@k, namely the
mean number of images for which the correct caption is ranked within the top-k retrieved results
(and vice-versa for sentences). we also report the median rank of the closest ground truth result
from the ranked list.
the best performing results on image-sentence ranking have all used id56s for encoding sentences,
where the sentence representation is learned jointly. recently, [32] showed that by using fisher
vectors for representing sentences, linear cca can be applied to obtain performance that is as strong
as using id56s for this task. thus the method of [32] is a strong baseline to compare our sentence
representations with. for our experiments, we represent images using 4096-dimensional oxfordnet
features from their 19-layer model [35]. for sentences, we simply extract skip-thought vectors for
each caption. the training objective we use is a pairwise ranking loss that has been previously
used by many other methods. the only difference is the scores are computed using only linear
transformations of image and sentence inputs. the loss is given by:

(cid:88)

(cid:88)

(cid:88)

(cid:88)

max{0,        s(ux, vy) + s(ux, vyk)} +

max{0,        s(vy, ux) + s(vy, uxk)},

x

k

y

k

where x is an image vector, y is the skip-thought vector for the groundtruth sentence, yk are vectors
for constrastive (incorrect) sentences and s(  ,  ) is the image-sentence score. cosine similarity is
used for scoring. the model parameters are {u, v} where u is the image embedding matrix and
v is the sentence embedding matrix. in our experiments, we use a 1000 dimensional embedding,
margin    = 0.2 and k = 50 contrastive terms. we trained for 15 epochs and saved our model
anytime the performance improved on the development set.
table 6 illustrates our results on this task. using skip-thought vectors for sentences, we get perfor-
mance that is on par with both [31] and [32] except for r@1 on image annotation, where other meth-
ods perform much better. our results indicate that skip-thought vectors are representative enough
to capture image descriptions without having to learn their representations from scratch. combined
with the results of [32], it also highlights that simple, scalable embedding techniques perform very
well provided that high-quality image and sentence vectors are available.

7

(a) trec

(b) subj

(c) sick

figure 2: id167 embeddings of skip-thought vectors on different datasets. points are colored based
on their labels (question type for trec, subjectivity/objectivity for subj). on the sick dataset,
each point represents a sentence pair and points are colored on a gradient based on their relatedness
labels. results best seen in electronic form.

3.5 classi   cation benchmarks

for our    nal quantitative experiments, we report results on several classi   cation benchmarks which
are commonly used for evaluating sentence representation learning methods.
we use 5 datasets: movie review sentiment (mr) [36], customer product reviews (cr) [37], sub-
jectivity/objectivity classi   cation (subj) [38], opinion polarity (mpqa) [39] and question-type
classi   cation (trec) [40]. on all datasets, we simply extract skip-thought vectors and train a logis-
tic regression classi   er on top. 10-fold cross-validation is used for evaluation on the    rst 4 datasets,
while trec has a pre-de   ned train/test split. we tune the l2 penality using cross-validation (and
thus use a nested cross-validation for the    rst 4 datasets).

trec

87.3
88.4
90.2
91.0
93.6
92.4
91.8
91.4
89.4
92.2

86.3
86.3
86.4
84.5
90.1
90.3
89.6
93.3
74.2
86.9
83.3
87.1
87.5

mr
79.4
79.0
77.2
76.3
77.2
82.3
81.5
83.1
74.8
75.5
73.9
76.5
80.4

cr
81.8
80.0
79.9
81.3
82.3
82.6
85.0
86.3
78.1
79.3
77.9
80.1
81.3

subj mpqa
93.2
93.6
91.3
89.5
93.7
94.2
93.4
95.5
90.5
92.1
92.5
93.6
93.6

method
nb-id166 [41]
mnb [41]
cbow [6]
grconv [6]
id56 [6]
bid56 [6]
id98 [4]
adasent [6]
paragraph-vector [7]
uni-skip
bi-skip
combine-skip
combine-skip + nb

on these tasks, properly tuned bag-of-
words models have been shown to per-
form exceptionally well.
in particular,
the nb-id166 of [41] is a fast and ro-
bust performer on these tasks. skip-
thought vectors potentially give an al-
ternative to these baselines being just as
fast and easy to use. for an additional
comparison, we also see to what ef-
fect augmenting skip-thoughts with bi-
gram naive bayes (nb) features im-
proves performance 3.
table 7 presents our results. on most
tasks, skip-thoughts performs about as
well as the bag-of-words baselines but
fails to improve over methods whose
sentence representations are learned di-
rectly for the task at hand. this indi-
cates that for tasks like sentiment classi-
   cation, tuning the representations, even
on small datasets, are likely to perform
better than learning a generic unsupervised sentence vector on much bigger datasets. finally, we
observe that the skip-thoughts-nb combination is effective, particularly on mr. this results in a
very strong new baseline for text classi   cation: combine skip-thoughts with bag-of-words and train
a linear model.

table 7: classi   cation accuracies on several standard bench-
marks. results are grouped as follows: (a): bag-of-words mod-
els; (b): supervised compositional models; (c) paragraph vector
(unsupervised learning of sentence representations); (d) ours.
best results overall are bold while best results outside of group
(b) are underlined.

3.6 visualizing skip-thoughts and generating stories

as a    nal experiment, we applied id167 [42] to skip-thought vectors extracted from trec, subj
and sick datasets and the visualizations are shown in figure 2. for the sick visualization, each
point represents a sentence pair, computed using the concatenation of component-wise and absolute
difference of features. remarkably, sentence pairs that are similar to each other are embedded next
to other similar pairs. even without the use of relatedness labels, skip-thought vectors learn to
accurately capture this property.

3we use the code available at https://github.com/mesnilgr/nbid166

8

since our decoder is a neural language model, we can also generate from it. we can perform genera-
tion by conditioning on a sentence, generating a new sentence, concatenating the generated example
to the previous text and continuing. since our model was trained on books, the generated samples
reads like a novel, albeit a nonsensical one. below is a 20 sentence sample generated by our model:
she grabbed my hand .     come on .     she    uttered her bag in the air .     i think we    re at your place . i ca
n   t come get you .     he locked himself back up .     no . she will .     kyrian shook his head .     we met ... that
congratulations ... said no .     the sweat on their    ngertips    s deeper from what had done it all of his    esh hard
did n   t fade . cassie tensed between her arms suddenly grasping him as her sudden her senses returned to its
big form . her chin trembled softly as she felt something unreadable in her light . it was dark . my body shook
as i lost what i knew and be betrayed and i realize just how it ended . it was n   t as if i did n   t open a vein . this
was all my fault , damaged me . i should have told toby before i was screaming . i should    ve told someone that
was an accident . never helped it . how can i do this , to steal my baby    s prints ?    

4 conclusion

we evaluated the effectiveness of skip-thought vectors as an off-the-shelf sentence representation
with linear classi   ers across 8 tasks. many of the methods we compare against were only evaluated
on 1 task. the fact that skip-thought vectors perform well on all tasks considered highlight the
robustness of our representations.
we believe our model for learning skip-thought vectors only scratches the surface of possible objec-
tives. many variations have yet to be explored, including (a) deep encoders and decoders, (b) larger
context windows, (c) encoding and decoding paragraphs, (d) other encoders, such as convnets. it is
likely the case that more exploration of this space will result in even higher quality representations.

acknowledgments

we thank geoffrey hinton for suggesting the name skip-thoughts. we also thank felix hill, kelvin
xu, kyunghyun cho and ilya sutskever for valuable comments and discussion. this work was
supported by nserc, samsung, cifar, google and onr grant n00014-14-1-0232.

references
[1] richard socher, alex perelygin, jean y wu, jason chuang, christopher d manning, andrew y ng, and
christopher potts. recursive deep models for semantic compositionality over a sentiment treebank. in
emnlp, 2013.

[2] sepp hochreiter and j  rgen schmidhuber. long short-term memory. neural computation, 9(8):1735   

1780, 1997.

[3] nal kalchbrenner, edward grefenstette, and phil blunsom. a convolutional neural network for modelling

sentences. acl, 2014.

[4] yoon kim. convolutional neural networks for sentence classi   cation. emnlp, 2014.
[5] kyunghyun cho, bart van merri  nboer, dzmitry bahdanau, and yoshua bengio. on the properties of

id4: encoder-decoder approaches. ssst-8, 2014.

[6] han zhao, zhengdong lu, and pascal poupart. self-adaptive hierarchical sentence model. ijcai, 2015.
[7] quoc v le and tomas mikolov. distributed representations of sentences and documents. icml, 2014.
[8] tomas mikolov, kai chen, greg corrado, and jeffrey dean. ef   cient estimation of word representations

in vector space. iclr, 2013.

[9] yukun zhu, ryan kiros, richard s. zemel, ruslan salakhutdinov, raquel urtasun, antonio torralba, and
sanja fidler. aligning books and movies: towards story-like visual explanations by watching movies and
reading books. in arxiv, 2015.

[10] nal kalchbrenner and phil blunsom. recurrent continuous translation models. in emnlp, pages 1700   

1709, 2013.

[11] kyunghyun cho, bart van merrienboer, caglar gulcehre, fethi bougares, holger schwenk, and yoshua
bengio. learning phrase representations using id56 encoder-decoder for id151.
emnlp, 2014.

[12] ilya sutskever, oriol vinyals, and quoc vv le. sequence to sequence learning with neural networks. in

nips, 2014.

[13] dzmitry bahdanau, kyunghyun cho, and yoshua bengio. id4 by jointly learning

to align and translate. iclr, 2015.

9

[14] junyoung chung, caglar gulcehre, kyunghyun cho, and yoshua bengio. empirical evaluation of gated

recurrent neural networks on sequence modeling. nips deep learning workshop, 2014.

[15] tomas mikolov, quoc v le, and ilya sutskever. exploiting similarities among languages for machine

translation. arxiv preprint arxiv:1309.4168, 2013.

[16] andrew m saxe, james l mcclelland, and surya ganguli. exact solutions to the nonlinear dynamics of

learning in deep linear neural networks. iclr, 2014.

[17] diederik kingma and jimmy ba. adam: a method for stochastic optimization. iclr, 2015.
[18] alice lai and julia hockenmaier. illinois-lh: a denotational and distributional approach to semantics.

semeval 2014, 2014.

[19] sergio jimenez, george duenas, julia baquero, alexander gelbukh, av juan dios b  tiz, and av men-
diz  bal. unal-nlp: combining soft cardinality features for semantic textual similarity, relatedness and
entailment. semeval 2014, 2014.

[20] johannes bjerva, johan bos, rob van der goot, and malvina nissim. the meaning factory: formal
semantics for recognizing id123 and determining semantic similarity. semeval 2014, page
642, 2014.

[21] jiang zhao, tian tian zhu, and man lan. ecnu: one stone two birds: ensemble of heterogenous mea-

sures for semantic relatedness and id123. semeval 2014, 2014.

[22] kai sheng tai, richard socher, and christopher d manning. improved semantic representations from

tree-structured id137. acl, 2015.

[23] richard socher, andrej karpathy, quoc v le, christopher d manning, and andrew y ng. grounded

id152 for    nding and describing images with sentences. tacl, 2014.

[24] richard socher, eric h huang, jeffrey pennin, christopher d manning, and andrew y ng. dynamic

pooling and unfolding recursive autoencoders for paraphrase detection. in nips, 2011.

[25] andrew finch, young-sook hwang, and eiichiro sumita. using machine translation evaluation tech-

niques to determine sentence-level semantic equivalence. in iwp, 2005.

[26] dipanjan das and noah a smith. paraphrase identi   cation as probabilistic quasi-synchronous recogni-

tion. in acl, 2009.

[27] stephen wan, mark dras, robert dale, and c  cile paris. using dependency-based features to take the
     aijpara-farce     a  i out of paraphrase. in proceedings of the australasian language technology workshop,
2006.

[28] nitin madnani, joel tetreault, and martin chodorow. re-examining machine translation metrics for

paraphrase identi   cation. in naacl, 2012.

[29] marco marelli, luisa bentivogli, marco baroni, raffaella bernardi, stefano menini, and roberto zam-
parelli. semeval-2014 task 1: evaluation of compositional distributional semantic models on full sen-
tences through semantic relatedness and id123. semeval-2014, 2014.

[30] bill dolan, chris quirk, and chris brockett. unsupervised construction of large paraphrase corpora:
exploiting massively parallel news sources. in proceedings of the 20th international conference on com-
putational linguistics, 2004.

[31] a. karpathy and l. fei-fei. deep visual-semantic alignments for generating image descriptions.

cvpr, 2015.

in

[32] benjamin klein, guy lev, gil sadeh, and lior wolf. associating neural id27s with deep

image representations using    sher vectors. in cvpr, 2015.

[33] junhua mao, wei xu, yi yang, jiang wang, and alan yuille. deep captioning with multimodal recurrent

neural networks (m-id56). iclr, 2015.

[34] tsung-yi lin, michael maire, serge belongie, james hays, pietro perona, deva ramanan, piotr doll  r,
and c lawrence zitnick. microsoft coco: common objects in context. in eccv, pages 740   755. 2014.
[35] karen simonyan and andrew zisserman. very deep convolutional networks for large-scale image recog-

nition. iclr, 2015.

[36] bo pang and lillian lee. seeing stars: exploiting class relationships for sentiment categorization with

respect to rating scales. in acl, pages 115   124, 2005.

[37] minqing hu and bing liu. mining and summarizing customer reviews. in proceedings of the tenth acm

sigkdd international conference on knowledge discovery and data mining, pages 168   177, 2004.

[38] bo pang and lillian lee. a sentimental education: id31 using subjectivity summarization

based on minimum cuts. in acl, 2004.

[39] janyce wiebe, theresa wilson, and claire cardie. annotating expressions of opinions and emotions in

language. language resources and evaluation, 2005.

[40] xin li and dan roth. learning question classi   ers. in proceedings of the 19th international conference

on computational linguistics, 2002.

10

[41] sida wang and christopher d manning. baselines and bigrams: simple, good sentiment and topic clas-

si   cation. in acl, 2012.

[42] laurens van der maaten and geoffrey hinton. visualizing data using id167. jmlr, 2008.

11

