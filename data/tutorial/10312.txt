dynamic memory networks for natural language processing

ask me anything:

ankit kumar, peter ondruska, mohit iyyer, james bradbury, ishaan gulrajani, victor zhong,
romain paulus, richard socher
   rstname@metamind.io, metamind, palo alto, ca usa

6
1
0
2

 
r
a

m
5

 

 
 
]
l
c
.
s
c
[
 
 

5
v
5
8
2
7
0

.

6
0
5
1
:
v
i
x
r
a

abstract

most tasks in natural language processing can
be cast into id53 (qa) problems
over language input. we introduce the dynamic
memory network (dmn), a neural network ar-
chitecture which processes input sequences and
questions, forms episodic memories, and gener-
ates relevant answers. questions trigger an itera-
tive attention process which allows the model to
condition its attention on the inputs and the result
of previous iterations. these results are then rea-
soned over in a hierarchical recurrent sequence
model to generate answers. the dmn can be
trained end-to-end and obtains state-of-the-art
results on several types of tasks and datasets:
id53 (facebook   s babi dataset),
text classi   cation for id31 (stan-
ford sentiment treebank) and sequence model-
ing for part-of-speech tagging (wsj-ptb). the
training for these different tasks relies exclu-
sively on trained word vector representations and
input-question-answer triplets.

1. introduction
id53 (qa) is a complex natural language
processing task which requires an understanding of the
meaning of a text and the ability to reason over relevant
facts. most, if not all, tasks in natural language process-
ing can be cast as a id53 problem: high
level tasks like machine translation (what is the transla-
tion into french?); sequence modeling tasks like named en-
tity recognition (passos et al., 2014) (ner) (what are the
named entity tags in this sentence?) or part-of-speech tag-
ging (pos) (what are the part-of-speech tags?); classi   ca-
tion problems like id31 (socher et al., 2013)

copyright 2016 by the author(s).

jane went to the hallway.

sandra went to the garden.
daniel went back to the garden.
sandra took the milk there.

i:
i: mary walked to the bathroom.
i:
i:
i:
q: where is the milk?
a:
i:
q: what   s the sentiment?
a:
q:
a:

positive
pos tags?
prp vbd jj , cc rb prp vbd jj .

garden
it started boring, but then it got interesting.

figure 1. example inputs and questions, together with answers
generated by a dynamic memory network trained on the corre-
sponding task. in sequence modeling tasks, an answer mechanism
is triggered at each input word instead of only at the end.

(what is the sentiment?); even multi-sentence joint clas-
si   cation problems like coreference resolution (who does
   their    refer to?).
we propose the dynamic memory network (dmn), a neu-
ral network based framework for general question answer-
ing tasks that is trained using raw input-question-answer
triplets. generally, it can solve sequence tagging tasks,
classi   cation problems, sequence-to-sequence tasks and
id53 tasks that require transitive reasoning.
the dmn    rst computes a representation for all inputs and
the question. the question representation then triggers an
iterative attention process that searches the inputs and re-
trieves relevant facts. the dmn memory module then rea-
sons over retrieved facts and provides a vector representa-
tion of all relevant information to an answer module which
generates the answer.
fig. 1 provides examples of inputs, questions and answers
for tasks that are evaluated in this paper and for which a
dmn achieves a new level of state-of-the-art performance.

ask me anything: dynamic memory networks for natural language processing

2. dynamic memory networks
we now give an overview of the modules that make up the
dmn. we then examine each module in detail and give
intuitions about its formulation. a high-level illustration of
the dmn is shown in fig. 2.1.
input module: the input module encodes raw text inputs
from the task into distributed vector representations. in this
paper, we focus on natural language related problems. in
these cases, the input may be a sentence, a long story, a
movie review, a news article, or several wikipedia articles.
question module: like the input module, the question
module encodes the question of the task into a distributed
vector representation. for example, in the case of question
answering, the question may be a sentence such as where
did the author    rst    y?. the representation is fed into the
episodic memory module, and forms the basis, or initial
state, upon which the episodic memory module iterates.
episodic memory module: given a collection of in-
put representations, the episodic memory module chooses
which parts of the inputs to focus on through the attention
mechanism. it then produces a    memory    vector represen-
tation taking into account the question as well as the pre-
vious memory. each iteration provides the module with
newly relevant information about the input. in other words,
the module has the ability to retrieve new information, in
the form of input representations, which were thought to
be irrelevant in previous iterations.
answer module: the answer module generates an answer
from the    nal memory vector of the memory module.
a detailed visualization of these modules is shown in fig.3.

2.1. input module

in natural language processing problems, the input is a se-
quence of ti words w1, . . . , wti . one way to encode the
input sequence is via a recurrent neural network (elman,
1991). id27s are given as inputs to the recur-
rent network. at each time step t, the network updates its
hidden state ht = rn n (l[wt], ht   1), where l is the em-
bedding matrix and wt is the word index of the tth word of
the input sequence.
in cases where the input sequence is a single sentence, the
input module outputs the hidden states of the recurrent net-
work. in cases where the input sequence is a list of sen-
tences, we concatenate the sentences into a long list of word
tokens, inserting after each sentence an end-of-sentence to-
ken. the hidden states at each of the end-of-sentence to-
kens are then the    nal representations of the input mod-
ule. in subsequent sections, we denote the output of the
input module as the sequence of tc fact representations c,
whereby ct denotes the tth element in the output sequence

figure 2. overview of dmn modules. communication between
them is indicated by arrows and uses vector representations.
questions trigger gates which allow vectors for certain inputs to
be given to the episodic memory module. the    nal state of the
episodic memory is the input to the answer module.

of the input module. note that in the case where the input
is a single sentence, tc = ti. that is, the number of out-
put representations is equal to the number of words in the
sentence. in the case where the input is a list of sentences,
tc is equal the number of sentences.
choice of recurrent network: in our experiments, we use
a gated recurrent network (gru) (cho et al., 2014a; chung
et al., 2014). we also explored the more complex lstm
(hochreiter & schmidhuber, 1997) but it performed sim-
ilarly and is more computationally expensive. both work
much better than the standard tanh id56 and we postulate
that the main strength comes from having gates that allow
the model to suffer less from the vanishing gradient prob-
lem (hochreiter & schmidhuber, 1997). assume each time
step t has an input xt and a hidden state ht. the internal
mechanics of the gru is de   ned as:

(cid:16)
(cid:16)

w (z)xt + u (z)ht   1 + b(z)(cid:17)
w (r)xt + u (r)ht   1 + b(r)(cid:17)
w xt + rt     u ht   1 + b(h)(cid:17)
(cid:16)

zt =   

rt =   

(1)

(2)

(3)

  ht = tanh
ht = zt     ht   1 + (1     zt)       ht

(4)
where     is an element-wise product, w (z), w (r), w    
rnh  ni and u (z), u (r), u     rnh  nh . the dimensions
n are hyperparameters. we abbreviate the above computa-
tion with ht = gru (xt, ht   1).

2.2. question module

similar to the input sequence, the question is also most
commonly given as a sequence of words in natural lan-
guage processing problems. as before, we encode the
question via a recurrent neural network. given a question

ask me anything: dynamic memory networks for natural language processing

figure 3. real example of an input list of sentences and the attention gates that are triggered by a speci   c question from the babi tasks
(weston et al., 2015a). gate values gi
t are shown above the corresponding vectors. the gates change with each search over inputs. we
do not draw connections for gates that are close to zero. note that the second iteration has wrongly placed some weight in sentence 2,
which makes some intuitive sense, as sentence 2 is another place john had been.

of tq words, hidden states for the question encoder at time
t is given by qt = gru (l[wq
t ], qt   1), l represents the
id27 matrix as in the previous section and wq
t
represents the word index of the tth word in the question.
we share the id27 matrix across the input mod-
ule and the question module. unlike the input module, the
question module produces as output the    nal hidden state
of the recurrent network encoder: q = qtq.

2.3. episodic memory module

the episodic memory module iterates over representations
outputted by the input module, while updating its internal
episodic memory. in its general form, the episodic memory
module is comprised of an attention mechanism as well as
a recurrent network with which it updates its memory. dur-
ing each iteration, the attention mechanism attends over the
fact representations c while taking into consideration the
question representation q and the previous memory mi   1
to produce an episode ei.
the episode is then used, alongside the previous mem-
ories mi   1,
to update the episodic memory mi =
gru (ei, mi   1). the initial state of this gru is initialized
to the question vector itself: m0 = q. for some tasks, it
is bene   cial for episodic memory module to take multiple
passes over the input. after tm passes, the    nal memory
mtm is given to the answer module.

need for multiple episodes: the iterative nature of this
module allows it to attend to different inputs during each
pass. it also allows for a type of transitive id136, since
the    rst pass may uncover the need to retrieve additional
facts. for instance, in the example in fig. 3, we are asked
where is the football? in the    rst iteration, the model ought
attend to sentence 7 (john put down the football.), as the
question asks about the football. only once the model sees
that john is relevant can it reason that the second iteration
should retrieve where john was. similarly, a second pass
may help for id31 as we show in the experi-
ments section below.
attention mechanism: in our work, we use a gating func-
tion as our attention mechanism. for each pass i, the
mechanism takes as input a candidate fact ct, a previ-
ous memory mi   1, and the question q to compute a gate:
t = g(ct, mi   1, q).
gi
the scoring function g takes as input the feature set
z(c, m, q) and produces a scalar score. we    rst de   ne a
large feature vector that captures a variety of similarities
between input, memory and question vectors: z(c, m, q) =

(cid:104)

c, m, q, c     q, c     m,|c     q|,|c     m|, ct w (b)q, ct w (b)m
(5)
where     is the element-wise product.
the function
g is a simple two-layer feed forward neural network

(cid:105)

,

ask me anything: dynamic memory networks for natural language processing

g(c, m, q) =

(cid:16)

  

w (2) tanh

(cid:16)

w (1)z(c, m, q) + b(1)(cid:17)

+ b(2)(cid:17)

.

(6)

some datasets, such as facebook   s babi dataset, spec-
ify which facts are important for a given question.
in
those cases, the attention mechanism of the g function can
be trained in a supervised fashion with a standard cross-
id178 cost function.
memory update mechanism: to compute the episode for
pass i, we employ a modi   ed gru over the sequence of the
inputs c1, . . . , ctc , weighted by the gates gi. the episode
vector that is given to the answer module is the    nal state
of the gru. the equation to update the hidden states of the
gru at time t and the equation to compute the episode are,
respectively:

tgru (ct, hi

t   1) + (1     gi

t)hi

t   1

hi
t = gi
ei = hi

tc

(7)
(8)

criteria for stopping: the episodic memory module also
has a signal to stop iterating over inputs. to achieve this,
we append a special end-of-passes representation to the in-
put, and stop the iterative attention process if this represen-
tation is chosen by the gate function. for datasets without
explicit supervision, we set a maximum number of itera-
tions. the whole module is end-to-end differentiable.

2.4. answer module

the answer module generates an answer given a vector.
depending on the type of task, the answer module is ei-
ther triggered once at the end of the episodic memory or at
each time step.
we employ another gru whose initial state is initialized to
the last memory a0 = mtm . at each timestep, it takes as
input the question q, last hidden state at   1, as well as the
previously predicted output yt   1.

yt = softmax(w (a)at)
at = gru ([yt   1, q], at   1),

(9)
(10)

where we concatenate the last generated word and the ques-
tion vector as the input at each time step. the output is
trained with the cross-id178 error classi   cation of the
correct sequence appended with a special end-of-sequence
token.
in the sequence modeling task, we wish to label each word
in the original sequence. to this end, the dmn is run in
the same way as above over the input words. for word t,
we replace eq. 8 with ei = hi
t. note that the gates for the
   rst pass will be the same for each word, as the question

is the same. this allows for speed-up in implementation
by computing these gates only once. however, gates for
subsequent passes will be different, as the episodes are dif-
ferent.

2.5. training

training is cast as a supervised classi   cation problem to
minimize cross-id178 error of the answer sequence. for
datasets with gate supervision, such as babi, we add the
cross-id178 error of the gates into the overall cost. be-
cause all modules communicate over vector representations
and various types of differentiable and deep neural net-
works with gates, the entire dmn model can be trained
via id26 and id119.

3. related work
given the many shoulders on which this paper is standing
and the many applications to which our model is applied, it
is impossible to do related    elds justice.
deep learning: there are several deep learning models
that have been applied to many different tasks in nlp.
for instance, id56s have been used for
parsing (socher et al., 2011), id31 (socher
et al., 2013), paraphrase detection (socher et al., 2011) and
id53 (iyyer et al., 2014) and logical infer-
ence (bowman et al., 2014), among other tasks. however,
because they lack the memory and question modules, a sin-
gle model cannot solve as many varied tasks, nor tasks that
require transitive reasoning over multiple sentences. an-
other commonly used model is the chain-structured recur-
rent neural network of the kind we employ above. recur-
rent neural networks have been successfully used in lan-
guage modeling (mikolov & zweig, 2012), speech recog-
nition, and sentence generation from images (karpathy &
fei-fei, 2015). also relevant is the sequence-to-sequence
model used for machine translation by sutskever et al.
(sutskever et al., 2014). this model uses two extremely
large and deep lstms to encode a sentence in one lan-
guage and then decode the sentence in another language.
this sequence-to-sequence model is a special case of the
dmn without a question and without episodic memory.
instead it maps an input sequence directly to an answer se-
quence.
attention and memory: the second line of work that
is very relevant to dmns is that of attention and mem-
ory in deep learning. attention mechanisms are generally
useful and can improve image classi   cation (stollenga &
j. masci, 2014), automatic image captioning (xu et al.,
2015) and machine translation (cho et al., 2014b; bah-
danau et al., 2014). id63s use memory
to solve algorithmic problems such as list sorting (graves

ask me anything: dynamic memory networks for natural language processing

et al., 2014). the work of recent months by weston et
al. on memory networks (weston et al., 2015b) focuses
on adding a memory component for natural language ques-
tion answering. they have an input (i) and response (r)
component and their generalization (g) and output feature
map (o) components have some functional overlap with
our episodic memory. however, the memory network can-
not be applied to the same variety of nlp tasks since it
processes sentences independently and not via a sequence
model. it requires bag of id165 vector features as well
as a separate feature that captures whether a sentence came
before another one.
various other neural memory or attention architectures
have recently been proposed for algorithmic problems
(joulin & mikolov, 2015; kaiser & sutskever, 2015), cap-
tion generation for images (malinowski & fritz, 2014;
chen & zitnick, 2014), visual id53 (yang
et al., 2015) or other nlp problems and datasets (hermann
et al., 2015).
in contrast, the dmn employs neural sequence models for
input representation, attention, and response mechanisms,
thereby naturally capturing position and temporality. as a
result, the dmn is directly applicable to a broader range
of applications without feature engineering. we compare
directly to memory networks on the babi dataset (weston
et al., 2015a).
nlp applications: the dmn is a general model which
we apply to several nlp problems. we compare to what,
to the best of our knowledge, is the current state-of-the-art
method for each task.
there are many different approaches to question answer-
ing: some build large knowledge bases (kbs) with open in-
formation extraction systems (yates et al., 2007), some use
neural networks, dependency trees and kbs (bordes et al.,
2012), others only sentences (iyyer et al., 2014). a lot of
other approaches exist. when qa systems do not produce
the right answer, it is often unclear if it is because they
do not have access to the facts, cannot reason over them
or have never seen this type of question or phenomenon.
most qa dataset only have a few hundred questions and
answers but require complex reasoning. they can hence
not be solved by models that have to learn purely from ex-
amples. while synthetic datasets (weston et al., 2015a)
have problems and can often be solved easily with manual
feature engineering, they let us disentangle failure modes
of models and understand necessary qa capabilities. they
are useful for analyzing models that attempt to learn every-
thing and do not rely on external features like coreference,
pos, parsing, logical rules, etc. the dmn is such a model.
another related model by andreas et al. (2016) combines
neural and logical reasoning for id53 over
knowledge bases and visual id53.

id31 is a very useful classi   cation task and
recently the stanford sentiment treebank (socher et al.,
2013) has become a standard benchmark dataset. kim
(kim, 2014) reports the previous state-of-the-art result
based on a convolutional neural network that uses multi-
ple word vector representations. the previous best model
for part-of-speech tagging on the wall street journal sec-
tion of the penn tree bank (marcus et al., 1993) was so-
gaard (s  gaard, 2011) who used a semisupervised nearest
neighbor approach. we also directly compare to paragraph
vectors by (le & mikolov., 2014).
neuroscience: the episodic memory in humans stores
speci   c experiences in their spatial and temporal context.
for instance, it might contain the    rst memory somebody
has of    ying a hang glider. eichenbaum and cohen have ar-
gued that episodic memories represent a form of relation-
ship (i.e., relations between spatial, sensory and temporal
information) and that the hippocampus is responsible for
general relational learning (eichenbaum & cohen, 2004).
interestingly, it also appears that the hippocampus is active
during transitive id136 (heckers et al., 2004), and dis-
ruption of the hippocampus impairs this ability (dusek &
eichenbaum, 1997).
the episodic memory module in the dmn is inspired by
these    ndings.
it retrieves speci   c temporal states that
are related to or triggered by a question. furthermore,
we found that the gru in this module was able to do
some transitive id136 over the simple facts in the babi
dataset. this module also has similarities to the temporal
context model (howard & kahana, 2002) and its bayesian
extensions (socher et al., 2009) which were developed to
analyze human behavior in word recall experiments.

4. experiments
we include experiments on id53, part-of-
speech tagging, and id31. the model is
trained independently for each problem, while the archi-
tecture remains the same except for the answer module and
input fact subsampling (words vs sentences). the answer
module, as described in section 2.4, is triggered either once
at the end or for each token.
for all datasets we used either the of   cial train, devel-
opment, test splits or if no development set was de   ned,
we used 10% of the training set for development. hyper-
parameter tuning and model selection (with early stopping)
is done on the development set. the dmn is trained via
id26 and adam (kingma & ba, 2014). we
employ l2 id173, and dropout on the word em-
beddings. word vectors are pre-trained using glove (pen-
nington et al., 2014).

ask me anything: dynamic memory networks for natural language processing

task
1: single supporting fact
2: two supporting facts
3: three supporting facts
4: two argument relations
5: three argument relations
6: yes/no questions
7: counting
8: lists/sets
9: simple negation
10: inde   nite knowledge
11: basic coreference
12: conjunction
13: compound coreference
14: time reasoning
15: basic deduction
16: basic induction
17: positional reasoning
18: size reasoning
19: path finding
20: agent   s motivations
mean accuracy (%)

memnn dmn
100
98.2
95.2
100
99.3
100
96.9
96.5
100
97.5
99.9
100
99.8
100
100
99.4
59.6
95.3
34.5
100
93.6

100
100
100
100
98
100
85
91
100
98
100
100
100
99
100
100
65
95
36
100
93.3

table 1. test accuracies on the babi dataset. memnn numbers
taken from weston et al. (weston et al., 2015a). the dmn passes
(accuracy > 95%) 18 tasks, whereas the memnn passes 16.

4.1. id53

the facebook babi dataset is a synthetic dataset for test-
ing a model   s ability to retrieve facts and reason over them.
each task tests a different skill that a id53
model ought to have, such as coreference resolution, de-
duction, and induction. showing an ability exists here is
not suf   cient to conclude a model would also exhibit it on
real world text data. it is, however, a necessary condition.
training on the babi dataset uses the following objective
function: j =   ece(gates) +   ece(answers), where
ece is the standard cross-id178 cost and    and    are hy-
perparameters. in practice, we begin training with    set to
1 and    set to 0, and then later switch    to 1 while keep-
ing    at 1. as described in section 2.1, the input module
outputs fact representations by taking the encoder hidden
states at time steps corresponding to the end-of-sentence to-
kens. the gate supervision aims to select one sentence per
pass; thus, we also experimented with modifying eq. 8 to
a simple softmax instead of a gru. here, we compute the
t)ct, where
t here is the value of
softmax(gi
the gate before the sigmoid. this setting achieves better re-
sults, likely because the softmax encourages sparsity and is
better suited to picking one sentence at a time.

   nal episode vector via: ei =(cid:80)t

t=1 softmax(gi

j ), and gi

exp(gi
t)
j=1 exp(gi

(cid:80)t

t) =

binary
task
82.9
mv-id56
85.4
rntn
86.8
did98
87.8
pvec
88.1
id98-mc
did56
86.6
ct-lstm 88.0
88.6
dmn

fine-grained

44.4
45.7
48.5
48.7
47.4
49.8
51.0
52.1

table 2. test accuracies for id31 on the stanford
sentiment treebank. mv-id56 and rntn: socher et al. (2013).
did98: kalchbrenner et al. (2014). pvec: le & mikolov. (2014).
id98-mc: kim (2014). did56: irsoy & cardie (2015), 2014.
ct-lstm: tai et al. (2015)

we list results in table 1. the dmn does worse than
the memory network, which we refer to from here on as
memnn, on tasks 2 and 3, both tasks with long input se-
quences. we suspect that this is due to the recurrent input
sequence model having trouble modeling very long inputs.
the memnn does not suffer from this problem as it views
each sentence separately. the power of the episodic mem-
ory module is evident in tasks 7 and 8, where the dmn
signi   cantly outperforms the memnn. both tasks require
the model to iteratively retrieve facts and store them in a
representation that slowly incorporates more of the rele-
vant information of the input sequence. both models do
poorly on tasks 17 and 19, though the memnn does better.
we suspect this is due to the memnn using id165 vectors
and sequence position features.

4.2. text classi   cation: id31

the stanford sentiment treebank (sst) (socher et al.,
2013) is a popular dataset for sentiment classi   cation. it
provides phrase-level    ne-grained labels, and comes with a
train/development/test split. we present results on two for-
mats:    ne-grained root prediction, where all full sentences
(root nodes) of the test set are to be classi   ed as either very
negative, negative, neutral, positive, or very positive, and
binary root prediction, where all non-neutral full sentences
of the test set are to be classi   ed as either positive or neg-
ative. to train the model, we use all full sentences as well
as subsample 50% of phrase-level labels every epoch. dur-
ing evaluation, the model is only evaluated on the full sen-
tences (root setup). in binary classi   cation, neutral phrases
are removed from the dataset. the dmn achieves state-of-
the-art accuracy on the binary classi   cation task, as well as
on the    ne-grained classi   cation task.
in all experiments, the dmn was trained with gru se-
quence models.
it is easy to replace the gru sequence
model with any of the models listed above, as well as in-

ask me anything: dynamic memory networks for natural language processing

model
id166tool
sogaard
suzuki et al.
spoustova et al.
sid98
dmn

acc (%)
97.15
97.27
97.40
97.44
97.50
97.56

table 3. test accuracies on wsj-ptb

corporate tree structure in the retrieval process.

4.3. sequence tagging: part-of-speech tagging

part-of-speech tagging is traditionally modeled as a se-
quence tagging problem: every word in a sentence is to
be classi   ed into its part-of-speech class (see fig. 1). we
evaluate on the standard wall street journal dataset (mar-
cus et al., 1993). we use the standard splits of sections
0-18 for training, 19-21 for development and 22-24 for test
sets (s  gaard, 2011). since this is a word level tagging
task, dmn memories are classi   ed at each time step corre-
sponding to each word. this is described in detail in sec-
tion 2.4   s discussion of sequence modeling.
we compare the dmn with the results in (s  gaard, 2011).
the dmn achieves state-of-the-art accuracy with a single
model, reaching a development set accuracy of 97.5. en-
sembling the top 4 development models, the dmn gets to
97.58 dev and 97.56 test accuracies, achieving a slightly
higher new state-of-the-art (table 3).

4.4. quantitative analysis of episodic memory module

the main novelty of the dmn architecture is in its episodic
memory module. hence, we analyze how important the
episodic memory module is for nlp tasks and in particular
how the number of passes over the input affect accuracy.
table 4 shows the accuracies on a subset of babi tasks as
well as on the stanford sentiment treebank. we note that
for several of the hard reasoning tasks, multiple passes over
the inputs are crucial to achieving high performance. for
sentiment the differences are smaller. however, two passes
outperform a single pass or zero passes. in the latter case,
there is no episodic memory at all and outputs are passed
directly from the input module to the answer module. we
note that, especially complicated examples are more of-
ten correctly classi   ed with 2 passes but many examples
in sentiment contain only simple sentiment words and no
negation or misleading expressions. hence the need to have
a complicated architecture for them is small. the same is
true for id52. here, differences in accuracy are less
than 0.1 between different numbers of passes.
next, we show that the additional correct classi   cations are

max
passes
0 pass
1 pass
2 pass
3 pass
5 pass

task 3
three-facts

0
0

16.7
64.7
95.2

task 7
count
48.8
48.8
49.1
83.4
96.9

task 8
lists/sets

sentiment
(   ne grain)

33.6
54.0
55.6
83.4
96.5

50.0
51.5
52.1
50.1
n/a

table 4. effectiveness of episodic memory module across tasks.
each row shows the    nal accuracy in term of percentages with
a different maximum limit for the number of passes the episodic
memory module can take. note that for the 0-pass dmn, the
network essential reduces to the output of the attention module.

hard examples with mixed positive/negative vocabulary.

4.5. qualitative analysis of episodic memory module

apart from a quantitative analysis, we also show qualita-
tively what happens to the attention during multiple passes.
we present speci   c examples from the experiments to illus-
trate that the iterative nature of the episodic memory mod-
ule enables the model to focus on relevant parts of the input.
for instance, table 5 shows an example of what the dmn
focuses on during each pass of a three-iteration scan on a
question from the babi dataset.
we also evaluate the episodic memory module for senti-
ment analysis. given that the dmn performs well with
both one iteration and two iterations, we study test exam-
ples where the one-iteration dmn is incorrect and the two-
episode dmn is correct. looking at the sentences in fig. 4
and 5, we make the following observations:

1. the attention of the two-iteration dmn is generally
much more focused compared to that of the one-
iteration dmn. we believe this is due to the fact that
with fewer iterations over the input, the hidden states
of the input module encoder have to capture more of
the content of adjacent time steps. hence, the atten-
tion mechanism cannot only focus on a few key time
steps. instead, it needs to pass all necessary informa-
tion to the answer module from a single pass.

2. during the second iteration of the two-iteration dmn,
the attention becomes signi   cantly more focused on
relevant key words and less attention is paid to strong
sentiment words that lose their sentiment in context.
this is exempli   ed by the sentence in fig. 5 that in-
cludes the very positive word    best.    in the    rst iter-
ation, the word    best    dominates the attention scores
(darker color means larger score). however, once its
context,    is best described   , is clear, its relevance is
diminished and    lukewarm    becomes more important.

we conclude that the ability of the episodic memory mod-

ask me anything: dynamic memory networks for natural language processing

question: where was mary before the bedroom?

answer: cinema.

episode 1

episode 2

episode 3

facts
yesterday julie traveled to the school.
yesterday marie went to the cinema.
this morning julie traveled to the kitchen.
bill went back to the cinema yesterday.
mary went to the bedroom this morning.
julie went back to the bedroom this afternoon.
[done reading]

table 5. an example of what the dmn focuses on during each episode on a real query in the babi task. darker colors mean that the
attention weight is higher.

figure 4. attention weights for sentiment examples that were
only labeled correctly by a dmn with two episodes. the y-axis
shows the episode number. this sentence demonstrates a case
where the ability to iterate allows the dmn to sharply focus on
relevant words.

figure 5. these sentence demonstrate cases where initially posi-
tive words lost their importance after the entire sentence context
became clear either through a contrastive conjunction (   but   ) or a
modi   ed action    best described.   

ule to perform multiple passes over the data is bene   cial. it
provides signi   cant bene   ts on harder babi tasks, which
require reasoning over several pieces of information or
transitive reasoning. increasing the number of passes also
slightly improves the performance on id31,
though the difference is not as signi   cant. we did not at-
tempt more iterations for id31 as the model
struggles with over   tting with three passes.

5. conclusion
the dmn model is a potentially general architecture for a
variety of nlp applications, including classi   cation, ques-
tion answering and sequence modeling. a single architec-
ture is a    rst step towards a single joint model for multi-
ple nlp problems. the dmn is trained end-to-end with
one, albeit complex, objective function. future work will
explore additional tasks, larger multi-task models and mul-
timodal inputs and questions.

initsragged,cheapandunassumingway,themovieworks.11-iter dmn (pred: negative, ans: positive)initsragged,cheapandunassumingway,themovieworks.122-iter dmn (pred: positive, ans: positive)thebestwaytohopeforanychanceofenjoyingthisfilmisbyloweringyourexpectations.11-iter dmn (pred: very positive, ans: negative)thebestwaytohopeforanychanceofenjoyingthisfilmisbyloweringyourexpectations.122-iter dmn (pred: negative, ans: negative)thefilmstartsoutascompetentbutunremarkable...andgraduallygrowsintosomethingofconsiderablepower.11-iter dmn (pred: negative, ans: positive)thefilmstartsoutascompetentbutunremarkable...andgraduallygrowsintosomethingofconsiderablepower.122-iter dmn (pred: positive, ans: positive)myresponsetothefilmisbestdescribedaslukewarm.11-iter dmn (pred: positive, ans: negative)myresponsetothefilmisbestdescribedaslukewarm.122-iter dmn (pred: negative, ans: negative)ask me anything: dynamic memory networks for natural language processing

references
andreas, j., rohrbach, m., darrell, t., and klein, d.
learning to compose neural networks for question an-
swering. arxiv preprint arxiv:1601.01705, 2016.

bahdanau, d., cho, k., and bengio, y. neural machine
translation by jointly learning to align and translate.
corr, abs/1409.0473, 2014.

bordes, a., glorot, x., weston, j., and bengio, y. joint
learning of words and meaning representations for
open-text id29. aistats, 2012.

bowman, s. r., potts, c., and manning, c. d. recursive
neural networks for learning logical semantics. corr,
abs/1406.1827, 2014.

chen, x. and zitnick, c. l. learning a recurrent visual rep-
resentation for image id134. arxiv preprint
arxiv:1411.5654, 2014.

cho, k., van merrienboer, b., bahdanau, d., and ben-
gio, y. on the properties of id4:
encoder-decoder approaches. corr, abs/1409.1259,
2014a.

cho, k., van merrienboer, b., gulcehre, c., bahdanau, d.,
bougares, f., schwenk, h., and bengio, y. learning
phrase representations using id56 encoder-decoder for
id151. in emnlp, 2014b.

chung, j., g  ulc  ehre, c   ., cho, k., and bengio, y. empiri-
cal evaluation of gated recurrent neural networks on se-
quence modeling. corr, abs/1412.3555, 2014.

dusek, j. a. and eichenbaum, h. the hippocampus and
memory for orderly stimulusrelations. proceedings of
the national academy of sciences, 94(13):7109   7114,
1997.

eichenbaum, h. and cohen, n. j. from conditioning to
conscious recollection: memory systems of the brain
(oxford psychology). oxford university press, 1 edition,
2004. isbn 0195178041.

elman, j. l. distributed representations, simple recurrent
networks, and grammatical structure. machine learn-
ing, 7(2-3):195   225, 1991.

graves, a., wayne, g., and danihelka, i. neural turing

machines. corr, abs/1410.5401, 2014.

heckers, s., zalesak, m., weiss, a. p., ditman, t., and
titone, d. hippocampal activation during transitive in-
ference in humans. hippocampus, 14:153   62, 2004.

hochreiter, s. and schmidhuber, j. long short-term mem-
ory. neural computation, 9(8):1735   1780, nov 1997.
issn 0899-7667.

howard, marc w. and kahana, michael j. a distributed
representation of temporal context. journal of mathe-
matical psychology, 46(3):269     299, 2002.

irsoy, o. and cardie, c. modeling compositionality with
multiplicative recurrent neural networks. in iclr, 2015.

iyyer, m., boyd-graber, j., claudino, l., socher, r., and
daum  e iii, h. a neural network for factoid question
answering over paragraphs. in emnlp, 2014.

joulin, a. and mikolov, t. inferring algorithmic patterns

with stack-augmented recurrent nets. in nips, 2015.

kaiser, l. and sutskever, i. neural gpus learn algo-

rithms. arxiv preprint arxiv:1511.08228, 2015.

kalchbrenner, n., grefenstette, e., and blunsom, p. a con-
in

volutional neural network for modelling sentences.
acl, 2014.

karpathy, a. and fei-fei, l. deep visual-semantic align-
in cvpr,

ments for generating image descriptions.
2015.

kim, y. convolutional neural networks for sentence clas-

si   cation. in emnlp, 2014.

kingma, p. and ba, jimmy. adam: a method for stochastic

optimization. corr, abs/1412.6980, 2014.

le, q.v. and mikolov., t. distributed representations of

sentences and documents. in icml, 2014.

malinowski, m. and fritz, m. a multi-world approach to
id53 about real-world scenes based on
uncertain input. in nips, 2014.

marcus, m. p., marcinkiewicz, m. a., and santorini, b.
building a large annotated corpus of english: the penn
treebank. computational linguistics, 19(2), june 1993.

mikolov, t. and zweig, g. context dependent recurrent
neural network language model. in slt, pp. 234   239.
ieee, 2012. isbn 978-1-4673-5125-6.

passos, a., kumar, v., and mccallum, a. lexicon infused
phrase embeddings for named entity resolution. in con-
ference on computational natural language learning.
association for computational linguistics, june 2014.

hermann, k. m., ko  cisk  y, t., grefenstette, e., espeholt,
l., kay, w., suleyman, m., and blunsom, p. teaching
machines to read and comprehend. in nips, 2015.

pennington, j., socher, r., and manning, c. d. glove:
in emnlp,

global vectors for word representation.
2014.

ask me anything: dynamic memory networks for natural language processing

socher, r., gershman, s., perotte, a., sederberg, p., blei,
d., and norman, k. a bayesian analysis of dynamics in
free recall. in nips. 2009.

socher, r., huang, e. h., pennington, j., ng, a. y., and
manning, c. d. dynamic pooling and unfolding recur-
in nips,
sive autoencoders for paraphrase detection.
2011.

socher, r., perelygin, a., wu, j., chuang, j., manning,
c., ng, a., and potts, c. recursive deep models for
semantic compositionality over a sentiment treebank. in
emnlp, 2013.

s  gaard, a. semisupervised condensed nearest neighbor

for part-of-speech tagging. in acl-hlt, 2011.

stollenga, m. f. and j. masci, f. gomez, j. schmidhu-
ber. deep networks with internal selective attention
through feedback connections. in nips, 2014.

sutskever, i., vinyals, o., and le, q. v. sequence to se-

quence learning with neural networks. in nips, 2014.

tai, k. s., socher, r., and manning, c. d. improved se-
mantic representations from tree-structured long short-
term memory networks. in acl, 2015.

weston, j., bordes, a., chopra, s., and mikolov, t. to-
wards ai-complete id53: a set of prereq-
uisite toy tasks. corr, abs/1502.05698, 2015a.

weston, j., chopra, s., and bordes, a. memory networks.

in iclr, 2015b.

xu, k., ba, j., kiros, r., cho, k., courville, a. c.,
salakhutdinov, r., zemel, r. s., and bengio, y. show,
attend and tell: neural image id134 with vi-
sual attention. corr, abs/1502.03044, 2015.

yang, z., he, x., gao, j., deng, l., and smola, a. stacked
attention networks for image id53. arxiv
preprint arxiv:1511.02274, 2015.

yates, a., banko, m., broadhead, m., cafarella, m. j., et-
zioni, o., and soderland, s. textrunner: open informa-
tion extraction on the web. in hlt-naacl (demonstra-
tions), 2007.

