5
1
0
2

 

n
u
j
 

8
1

 
 
]
l
c
.
s
c
[
 
 

1
v
3
0
7
5
0

.

6
0
5
1
:
v
i
x
r
a

joint learning of word and phrase representations with autoencoders

   the sum of its parts   :

r  emi lebret
idiap research institute, martigny, switzerland
  ecole polytechnique f  ed  erale de lausanne (epfl), lausanne, switzerland
ronan collobert1
facebook ai research, menlo park, ca, usa
idiap research institute, martigny, switzerland

remi@lebret.ch

ronan@collobert.com

abstract

recently, there has been a lot of effort to repre-
sent words in continuous vector spaces. those
representations have been shown to capture both
semantic and syntactic information about words.
however, distributed representations of phrases
remain a challenge. we introduce a novel model
that jointly learns word vector representations
and their summation. word representations are
learnt using the word co-occurrence statistical in-
formation. to embed sequences of words (i.e.
phrases) with different sizes into a common se-
mantic space, we propose to average word vector
representations. in contrast with previous meth-
ods which reported a posteriori some composi-
tionality aspects by simple summation, we si-
multaneously train words to sum, while keep-
ing the maximum information from the original
vectors. we evaluate the quality of the word
representations on several classical word eval-
uation tasks, and we introduce a novel task to
evaluate the quality of the phrase representations.
while our distributed representations compete
with other methods of learning word represen-
tations on word evaluations, we show that they
give better performance on the phrase evaluation.
such representations of phrases could be interest-
ing for many tasks in natural language process-
ing.

1all research was conducted at idiap research institute, before
ronan collobert joined facebook ai research.

of

use

in   nite

   makes

1. introduction
human
   nite
language
means    (humboldt, 1836). a large number of sen-
tences can be generated from a    nite set of words. thus
there has been a lot of effort to capture the meaning of
words. some approaches are based on distributional word
representations (lund & burgess, 1996; patel et al., 1998),
others are based on distributed representations (bengio,
2008; collobert et al., 2011; mnih & kavukcuoglu,
2013; mikolov et al., 2013b; lebret & collobert, 2014;
pennington et al., 2014; levy & goldberg, 2014) where
the meaning of a word is encoded as a vector computed
from co-occurrence statistics of a word and its neighboring
words. finally, distributed representations emerged as
the solution to many natural language processing (nlp)
tasks (turney & pantel, 2010; collobert et al., 2011).
given these representations of words in a vector space,
techniques for combining them have been proposed to
get representations of phrases or sentences. these com-
positional models involve vector addition or multiplica-
tion (mitchell & lapata, 2010). such simple composi-
tions have shown to perform competitively on the para-
phrase detection and phrase similarity tasks (blacoe &
lapata, 2012). more sophisticated approaches use tech-
niques from logic, category theory, and quantum informa-
tion (clark et al., 2008). others use the syntactic rela-
tions between words to treat certain words as functions
and other as arguments such as adjective-noun composi-
tion (baroni & zamparelli, 2010) or noun-verb composi-
tion (grefenstette et al., 2013). id56
model for semantic compositionality has also been pro-
posed (socher et al., 2012), where each word has a matrix-
vector representation: the vector captures its meaning (as
it is initialized with a pre-trained distributed representa-
tion), while the matrix learns throught a parse tree how it
modi   es the meaning of the other word that it combines

   the sum of its parts   : joint learning of word and phrase representations with autoencoders

with. many recent works are based on distributed repre-
sentations of phrases to tackle a wide range of application
in nlp: machine translation (bahdanau et al., 2015), con-
stituency parsing (legrand & collobert, 2015), sentiment
analysis (socher et al., 2013), or image captioning (le-
bret et al., 2015). there is therefore a clear need for dis-
tributed word representations that can be easily extrapo-
lated to meaningful phrase representations.
we argue that distributed representation and composition
must go hand in hand, i.e., they must be mutually learned.
we present a model that learns to capture meaning of words
in distributed representations using a low-rank approxima-
tion of a large word co-occurrence matrix. we choose to
stochastically perform this low-rank approximation which
enables the model to simultaneously train these representa-
tions to compose for producing representations of phrases
(see figure 1). as composition function, we choose a sim-
ple weighted addition for its simplicity and for enabling
sequences of words with different lengths to be represen-
tated in a common vector space. aside from generating dis-
tributed representations of words and phrases, this model
gives an encoding function (represented by a matrix) which
can be used to encode new words or even phrases based on
their co-occurrence counts. this offers two different alter-
natives for phrase representations: (1) representation for a
query phrase can be inferred by averaging vector represen-
tations of its words (only if they all were in the training set),
or (2) by using its word co-occurrence statistics.
evaluation on the popular word similarity and analogy
tasks demonstrate the capability of our joint model for
capturing good distributed representations. we then in-
troduce a novel task for evaluating phrase representations.
given a phrase representation, the objective is to retrieve
the words that compose the phrase. we compare our model
against other state-of-the-art methods for distributed word
representations which capture meaningful linear substruc-
tures (mikolov et al., 2013a; pennington et al., 2014). we
show that our model achieves similar performance on word
evaluation tasks, but that it outperforms other methods on
the phrase evaluation task.

2. related works
in the literature,
two major model families exist for
learning distributed word representations: the count-based
methods and the predictive-based methods.
the count-based methods consist of using the statistical in-
formation contained in large corpora of unlabeled text to
build large matrices by simply counting words (word co-
coocurrence statistics). the rows correspond to words or
terms, and the columns correspond to a local context. the
context can be documents, such as in latent semantic anal-

ysis (lsa) (deerwester et al., 1990); or other words (lund
& burgess, 1996). to generate low-dimensional word
representations, a low-rank approximation of these large
matrices is performed, mainly with a singular value de-
composition (svd). many authors proposed to improve
this model with different transformations for the matrix
of counts, such as positive pointwise mutual informa-
tion (ppmi) (bullinaria & levy, 2007; levy & goldberg,
2014), or a square root of the co-occurrence probabilities
in the form of hellinger pca (lebret & collobert, 2014).
instead of using the co-occurrence probabilities, (penning-
ton et al., 2014) suggest that word vector representations
should be learnt with ratios of co-occurrence probabilities.
for this purpose, they introduce a log-biid75
model that combines both global id105 and
local context window methods.
the predictive-based model has    rst been introduced as a
neural probabilistic language model (bengio et al., 2003).
a neural network architecture is trained to predict the next
word given a window of preceding words, where words
are representated by low-dimensional vector. since, some
variations of this architecture have been proposed. (col-
lobert et al., 2011) train a language model to discriminate
a two-class classi   cation task:
if the word in the mid-
dle of the input window is related to its context or not.
more recently, the need of full neural architectures has been
questioned (mnih & kavukcuoglu, 2013; mikolov et al.,
2013a). mikolov et al. (2013a) propose two predictive-
based id148 for learning distributed represen-
tations of words:
(i) the continous bag-of-words model
(cbow), where the objective is to correctly classify the
current (middle) word given a symmetric window of con-
text words around it; (ii) the skip-gram model, where in-
stead of predicting the current word based on the context, it
tries to maximize classi   cation of a word based on another
word in the same sentence. in mikolov et al. (2013b), the
authors also introduce a data-driven approach for learning
phrases, where the phrases are treated as individual tokens
during the training.
in this paper, we leverage both families: (i) we use the sta-
tistical information for learning distributed word represen-
tations by approximating the hellinger pca with an au-
toencoder network; (ii) we jointly learn to predict the words
that compose a given phrase.

3. a joint model
some prior works have designed models to learn word
representations (mnih & kavukcuoglu, 2013; mikolov
et al., 2013b; lebret & collobert, 2014), while others
have proposed models to compose these word representa-
tions (mitchell & lapata, 2010; socher et al., 2012). we
propose instead to jointly learn word representations and

   the sum of its parts   : joint learning of word and phrase representations with autoencoders

their composition by simple summation.

3.1. learning word representations w.r.t. the

hellinger distance

as words occurring in similar contexts tend to have similar
meanings (harris, 1954), word co-occurrence statistics are
generally used to embed similar words into a common vec-
tor space (turney & pantel, 2010). common approaches
calculate the frequencies, apply some transformations (tf-
idf, ppmi), reduce the dimensionality, and calculate the
similarities. more recently, lebret & collobert (2014) pro-
posed a novel method based on a hellinger pca of the
word co-occurrence matrix. they showed that word rep-
resentations can be learnt even with a reasonable number
of context words.
inspired by this work, we propose to
stochastically perform this low-rank approximation. for
this purpose, we use an autoencoder with only linear acti-
vations to    nd an optimal solution related to the hellinger
pca (bourlard & kamp, 1988). replacing the pca by an
autoencoder allows us to learn jointly a cost function which
constrains the word information to be kept by summation.

3.1.1. word co-occurrence probabilities

   you shall know a word by the company it keeps    (firth,
1957). keeping this famous quote in mind, word co-
occurrence probabilities are computed by counting the
number of times each context word c     d (where d     w)
occurs around a word w     w:

p(c|w) =

p(c, w)
p(w)

=

n(c, w)

cj   d n(cj, w)

,

(1)

(cid:80)

where n(c, w) is the number of times a context word c oc-
curs in the surrounding of the word w. a multinomial dis-
tribution of |d| classes (words) is thus obtained for each
word w:

pw = {p(c1|w), . . . , p(c|d||w)} .

(2)

3.1.2. hellinger distance

similarities between words can be derived by computing
a distance between their corresponding word distributions.
several distances (or metrics) over discrete distributions
exist, such as the bhattacharyya distance, the hellinger dis-
tance or id181. we chose here the
hellinger distance for its simplicity and symmetry property
(as it is a true distance). considering two discrete probabil-
ity distributions p = (p1, . . . , pk) and q = (q1, . . . , qk),
the hellinger distance is formally de   ned as:

h(p, q) =

1   
2

   
(

pi        

qi)2 ,

(3)

(cid:118)(cid:117)(cid:117)(cid:116) k(cid:88)

i=1

which is directly related to the euclidean norm of the dif-
ference of the square root vectors:
   
(cid:107)

p    (cid:112)q(cid:107)2 .

h(p, q) =

(4)

1   
2

note that it makes more sense to take the hellinger distance
rather than the euclidean distance for comparing discrete
distributions, as p and q are unit vectors according to the
hellinger distance (
q are units vector according
to the (cid:96)2 norm).

p and

   

   

3.1.3. autoencoder

an autoencoder is employed to represent words in a lower
pw as input,
dimensional space. it takes a distribution
encodes it in a more compact representation, and is trained
to reconstruct its own input from that representation:

   

(cid:112)

pw))    (cid:112)

||g(f (

   

pw||2 ,

(5)

where g(f (
pw)) is the output of the network, f is
the encoding function which maps distributions in a m-
dimension (with m << |d|), and g is the decoding func-
   
tion. f (
pw) is a distributed representation that captures
the main factors of variation in the data as the hellinger
pca does (bourlard & kamp, 1988). here, encoder f    
rm  |d| and decoder g     r|d|  m are both linear layers.

3.2. learning to sum word representations

interesting compositionality properties have been ob-
served from models based on the addition of representa-
tions (mikolov et al., 2013b). an exhaustive comparison
of different composition functions has indeed revealed that
an additive model performs well on pre-trained word rep-
resentations (mitchell & lapata, 2010). because our word
representations are learnt from linear operations, the inher-
ent structure of these representations is linear. to combine
a sequence of words into a common vector space, we then
simply apply an element-wise addition of their vector rep-
resentations. this approach makes sense and works well
when the meaning of a text is literally    the sum of its parts   .
this is usually the case with noun and verb phrase chunks.
for example, into phrases such as    the red cat    or    struggle
to deal   , each word independently has its proper meaning.
distributed representations for such phrase chunks must re-
tain information from the individual words. an objective
function is thus de   ned to learn how to combine the word
vector representations, while keeping the maximum infor-
mation from the original vectors. an operation as simple as
a weighted sum will probably fail for sequences where in-
dividual words act as operators that modify the meaning of
another word, or for multiword expressions. other more
complex functions could be chosen to also include such
cases, but we choose to propose a much simpler model (i.e.,

   the sum of its parts   : joint learning of word and phrase representations with autoencoders

averaging the word representations) to get phrase chunk
representations with unsupervised learning. in this paper,
we therefore focus on noun and verb phrase chunks.

3.2.1. additive model
we de   ne s = (w1, . . . , wt )     s a phrase chunk of t
words, with s a set of phrase chunks. by feeding all
pw
into the autoencoder, a representation xw     rm of each
word w     d is obtained:

   

xw = f (

pw) .

(6)

by an element-wise addition, a representation of the phrase
chunk s can be calculated as:

xwt .

(7)

(cid:112)

(cid:88)

wt   s

xs =

1
t

3.2.2. training

in predictive-based model, such as the skip-gram model,
the objective is to maximize the likelihood of a word based
on other words in the same sequence. instead, our training
is slightly different in the sense that we aim at discrimi-
nating whether words are in the phrase chunk or not. an
objective function is thus de   ned to encourage words wt
which appear in the chunk s to give high scores when cal-
culating the dot product between xwt and xs. on the other
hand, these scores must be low for words wi /    s that do not
appear in the chunk. we train this problem with a ranking-

max(0, 1     xs    xwt + xs    xwi) .

(8)

type cost:(cid:88)
(cid:88)

(cid:88)

s   s

wt   s

wi   w
wi(cid:54)   s

note that due to the large size of w, a negative sampling
approach can be used to speed up the training. in equa-
tion 8, the whole dictionary w is thus replaced by a sub-
set w        w with n randomly chosen negative samples
wi (cid:54)    s. a new set w    is randomly picked at each iteration
during the training.

3.3. joint learning

in contrast with other methods which have subsequently
found nice compositionality properties by simple summa-
tion, the novelty of our method is the explicit learning of
word representations suitable for summation. the system
is then designed to force words with similar context to be
close in a m-dimensional space, while these dimensions
are learnt to be combined with other related words. this
joint learning is illustrated in figure 1. the whole system is
trained by minimizing both objective functions (5) and (8)
over the training data using stochastic id119.

figure 1. architecture for the joint learning of word representa-
tions and their summation. considering the noun phrase s = the
red cat, each word wt     s is represented as the square root

of its co-occurrence id203 distribution(cid:112)p (wt). these are

the inputs given to an autoencoder which encodes them in a lower
dimension xwt     rm. these new representations are then given
to a decoder which is trained to reconstruct the initial inputs. this
is the    rst objective function. the second objective is to keep in-
formation when words are summed. all xwt are summed together
to represent s in the same space as wt. a dot product between the
phrase representation xs and all the other word representations
from the dictionary w is calculated. these scores are trained to
be high for words that appear in s and low for the others.

4. experiments
4.1. datasets

4.1.1. building word representation over

large corpora

our english corpus is composed of the entire english
wikipedia1 (where all mediawiki markups have been re-
moved). we consider lower case words to limit the number
of words in the dictionary. additionally, all occurrences of
sequences of numbers within a word are replaced with the
string    number   . the resulting text is tokenized using
the stanford tokenizer2. the data set contains about 1.6
1available at http://download.wikimedia.org. we

took the january 2014 version.

2available

at

software/tokenizer.shtml

http://nlp.stanford.edu/

|d|s=   pthethe   predred   pcatcatf(   )xthexredxcatg(   )g(f(   pthe))g(f(   pred))g(f(   pcat))(cid:80)xsmxthexw2...xred...xwi  ...xcat...xw|w|scoresxs  xwi   wi   w   the sum of its parts   : joint learning of word and phrase representations with autoencoders

billion words. as dictionary w, we consider all the words
within our corpus which appear at least one hundred times.
this results in a 191,268 words dictionary. only the 10,000
most frequent words within this dictionary were used as
context words d to calculate the word co-occurrence prob-
abilities. a symmetric context window of ten words around
each word w     w is used to obtain the multinomial distri-
bution pw. we chose to encode words in a 100-dimensional
vector.

4.1.2. summing words for phrase

representation

to learn the summation of words that appear frequently
together, we choose to consider only the noun and verb
phrase chunks to build s. we extract these chunks with
a phrase chunking approach by using the senna soft-
ware3. by retaining only the phrase chunks appearing at
least ten times, this results in 1,823,259 noun phrase chunks
and 255,232 verb phrase chunks, for a total of 2,078,491
phrase chunks. we divided this set of phrases into three
sets: 1,000 phrases for validation, 5,000 phrases for testing,
and the rest for training (2,072,491 phrases). an unsuper-
vised framework requires a large amount of data. because
our primary focus is to provide good word representations,
validation and testing sets are intentionally kept small to
retain as much phrases as possible in the training set.

4.2. other methods

we compare our distributed representations with other
available models for computing vector representations of
words: (1) the glove model which is also based on co-
occurrence statistics of corpora (pennington et al., 2014)4,
(2) the continuous bag-of-words (cbow) and the skip-
gram (sg) architectures which learn representations from
prediction-based models (mikolov et al., 2013b)5. the
same corpus and dictionary w as the ones described in
section 4.1.1 are used to train 100-dimensional word vec-
tor representations. we use a symmetric context win-
dow of ten words, and the default values set by the au-
thors for the other hyperparameters.
to see the im-
provement compared to a standalone svd, we generate
word representations with a truncated svd of the matrix
pw, x =
x, where each row of x is a distribution

(cid:16)(cid:112)pw1 ,(cid:112)pw2, . . . ,(cid:112)pw|w|

(cid:17)t     r|w|  |d|.

   

3available at http://ml.nec-labs.com/senna/
4code available at http://www-nlp.stanford.edu/

software/glove.tar.gz.

5code available at http://id97.googlecode.

com/svn/trunk/.

4.3. evaluating word representations

the    rst objective of the model is to learn distributed rep-
resentations which capture both syntactic and semantic in-
formations about words. to evaluate the quality of these
representations, we used both analogy and similarity tasks.

4.3.1. word analogies

the word analogy task consists of questions like,    a is to
b as c is to ?   . it was introduced in mikolov et al. (2013a)
and contains 19,544 such questions, divided into a seman-
tic subset and a syntactic subset. the 8,869 semantic ques-
tions are analogies about places, like    bern is to switzer-
land as paris is to ?   , or family relationship, like    uncle
is to aunt as boy is to ?   . the 10,675 syntactic questions
are grammatical analogies, involving plural and adjectives
forms, superlatives, verb tenses, etc. to correctly answer
the question, the model should uniquely identify the miss-
ing term, with only an exact correspondence counted as a
correct match.

4.3.2. word similarities

we also evaluate our model on a variety of word similar-
ity tasks. these include the wordsimilarity-353 test col-
lection (ws-353) (finkelstein et al., 2001), the rubenstein
and goodenough dataset (rg-65) (rubenstein & goode-
nough, 1965), and the stanford rare word (rw) (luong
et al., 2013). they all contain sets of english word pairs
along with human-assigned similarity judgements. ws-
353 and rg-65 datasets contain 353 and 65 word pairs re-
spectively. those are relatively common word pairs, like
computer:internet or football:tennis. the rw dataset dif-
fers from these two datasets, since it contains 2,034 pairs
where one of the word is rare or morphologically complex,
such as brigadier:general or cognizance:knowing.

4.3.3. results

ws rg rw syn.

sem.

cbow
0.57
skip-gram 0.62
0.56
glove

svd
our model

0.43
0.62

0.47
0.49
0.50

0.39
0.49

0.32
0.39
0.36

0.27
0.39

53.5
66.7
79.7

52.3
69.4

22.7
53.8
75.0

34.1
43.0

table 1. word representations evaluation on both similarity and
analogy tasks. comparison of performance across all models with
100-dimensional word vector representations. for all models, a
symmetric context window of ten words is used. spearman rank
correlation is reported on word similarity tasks. accuracy is re-
ported on word analogy tasks.

   the sum of its parts   : joint learning of word and phrase representations with autoencoders

results reported in table 1 show that our model gives simi-
lar results than other state-of-the-art methods on word sim-
ilarity tasks. however, there is a signi   cant performance
boost between the low-rank approximation of x with a
svd and this same approximation with our joint model.
this shows that combining a count-based model with a
predictive-based approach helps for generating better word
representations. performance on word analogy tasks show
that our joint model competes with others on the syntactic
questions, but that it gives a lower accuracy on semantic
questions. one possible explanation is that less common
words are involved in semantic questions compared to syn-
tactic questions. among the four words that make a se-
mantic question, one of them is, in average, the 34328th
most frequent word in w, while it is the 20819th for a
syntactic question. compared to other methods which take
the whole dictionary w as context dictionary, we consider
only a small subset of it (d contains only the 10000 most
frequent words of w). a larger context dictionary would
certainly help to improve performance on this task6.

4.4. evaluating phrase representations

as a second objective, we aim at learning to sum word rep-
resentations to generate phrase representations while keep-
ing the original information coming from the words. we
thus introduce a novel task to evaluate the phrase represen-
tations.

4.4.1. description of the task

as dataset, we use the collection of test phrases described
in section 4.1.2. it contains 5000 phrases (noun phrases
and verb phrases) extracted from wikipedia with a chunk-
ing approach. amoung them, 2244, 2030 and 547 are, re-
spectively, composed of two, three and four words. the
remaining 179 are composed of at least    ve words with
a maximum of eight words. for a given phrase s =
(w1, . . . , wt )     s of t words, the objective is to retrieve
the t words from its distributed representation xs. scores
between the phrase s and all the possible words wi     w are
calculated using the dot product between their distributed
representations xs    xwi, as illustrated in figure 1. the top
t scores are considered as the words composing the phrase
s.

4.4.2. results

to evaluate whether words making a given phrase can be
retrieved from the distributed phrase representation, we use
recall @k, which measures the fraction of times a correct
word was found among the top k results. k is proportional
to the number of words per phrase, e.g. for a 3-word phrase

6it has not been explored due to limitations in hardware re-

sources. it would be easily computable with a cluster of cpu.

figure 2. recall@1 based on the number of words per phrases.
comparison of performance across all models with 100-
dimensional word vector representations.

with a recall@5, the correct words are found amoung the
top 15 results. higher recall @id116 better retrieval
performance. since we care most about the top-ranked re-
trieved results, the recall @k with small k are more im-
portant.

r@1 r@5 r@10

cbow
11.33
skip-gram 7.96
glove
54.97

29.56
22.26
79.97

svd
our model

17.42
64.22

32.87
91.72

38.46
30.04
86.54

40.72
95.85

table 2. phrase representations evaluation. comparison of per-
formance across all models with 100-dimensional phrase vec-
tor representations on word retrieval. r@k is recall@k, with
k = {1, 5, 10}.

results reported in table 2 show that our distributed word
representations can be averaged together to produce mean-
ingful phrase representations, since the words are retrieved
with a high recall. our model signi   cantly outperforms
others methods on this task. in figure 2, a more detailed
analysis of results reveals that the glove model competes
with ours for the 2-word phrases. however glove   s rep-
resentations cannot maintain this performance for longer
phrases. it is probably not too surprising as this model is
trained using ratios of co-occurrence probabilities for two

2345+our modelgloveskip   gramcbowsvdnumber of words in phrasesrecall (%)0102030405060   the sum of its parts   : joint learning of word and phrase representations with autoencoders

query phrases

nearest phrases

encoding function f

averaging words

american airlines

chicago bulls

home plate

braniff airlines
aloha airlines
braniff airways
jetblue airways
braniff international airways

american airways
pan american airlines
american eagle airlines
north american airlines
american overseas airlines

denver nuggets
seattle supersonics
cleveland cavaliers
boston celtics
dallas mavericks

right fielder
center fielders
the outfield fence
leadoff batter
the infield

chicago colts
chicago hornets
chicago stags
buffalo bulls
chicago cardinals

the home plate umpire
the home plate area
the home leg
the ball home
the diamond state base ball club

president of the united states

president coolidge
president eisenhower
u.s. president dwight eisenhower
president truman
president reagan

the united states president
the united states presidency
the first united states secretary
the united states minister
the first united states senator

table 3. examples of phrases and    ve of their ten nearest phrases from the collection of phrases. representations for the collection of
phrases have been computed by averaging the word representations. query phrase representations are inferred using the two different
alternatives: (1) with the encoding function f using counts from a symmetric window of ten context words around the query phrase,
(2) by averaging the representations of the words that compose the query phrase. all distributed representations are 100-dimensional
vectors.

target words. consequently, it well learns linear substruc-
tures for pairs of words, which probably also explains its
good performance on word analogy tasks. in contrast, our
joint model can learn more complex substructures which
make possible the aggregation of multiple words within a
low-dimensional vector space.

4.5. inferring new phrase representations

representations for new phrases can thus be generated by
simply averaging its word representations, assuming that
the words are in the dictionary w. consider that the dic-
tionary w n tends to grow exponentially with n, it gives
a nice framework to produce the huge variety of possi-
ble sequence of n words in a timely and ef   cient manner
with low memory consumption, unlike other methods. re-
lying on word co-occurrence statistics to represent words
in vector space also provides a framework to easily gen-
erate representations for unseen words. this is another
advantage compared to methods focused on learning dis-
tributed word representations (such as cbow, skip-gram
and glove models), where the whole system needs to be
trained again to learn representations for these new con-

stituents. to infer a representation for a new word wnew,
one only needs to count its context words over a large cor-

pus of text to build the distribution(cid:112)pwnew. this nice fea-

ture can be extrapolated to phrases, which gives another
alternative for generating phrase representations. table 3
presents some examples of phrases, where we use both al-
ternatives to compute their distributed representations. it
can be seen that both alternatives give distinct represen-
tations. for instance, by using the encoding function f,
our model infers a representation for the entity chicago
bulls which is close to other nba teams, like the denver
nuggets or the seattle supersonics. by averaging the repre-
sentations of both words chicago and bulls, our model in-
fers a representation which is close to other chicago   s sport
teams. both representations are meaningful, but they carry
different information. relying on co-occurrence statistics
gives entities that occur in a similar context, while the
summation tries to    nd entities containing the maximum
amount of similar information. this also works with longer
phrases, such as president of the united states. the    rst
alternative gives men who served as president, when the
second gives related positions.

   the sum of its parts   : joint learning of word and phrase representations with autoencoders

5. conclusion
we introduce a model that combines both count-based
methods and predictive-based methods for generating dis-
tributed representations of words and phrases. using a
chunking approach, a collection of noun phrases and verb
phrases is extracted from wikipedia. for a given n-word
phrase, we train our model to generate a low-dimensional
representation for each word based on its co-occurrence
id203 distribution. these n representations are av-
eraged together to generate a distributed phrase representa-
tion in the same semantic space. thanks to an autoencoder
approach, we can simultaneously train the model to retrieve
the original n words from the phrase representation, and
therefore learn complex linear substructures. when com-
pared to state-of-the-art methods on some classical word
evaluation tasks, the competitive results show that our joint
model produces meaningful word representations. perfor-
mance on a novel task for evaluating phrase representations
con   rm the ability of our model to learn complex sub-
structures, which make possible the aggregation of mul-
tiple words within a low-dimensional vector space. bet-
ter still, id136 of new phrase representations is also
easily feasible when relying on counts. some quantita-
tive examples demonstrate that both alternatives can give
different but meaningful information about phrases. the
word representations and the collection of phrases used
in these experiments are available online, here: http:
//www.lebret.ch/words/.

acknowledgements
this work was supported by the hasler foundation
through the grant    information and communication tech-
nology for a better world 2020    (smartworld).

references
bahdanau, dzmitry, cho, kyunghyun, and bengio,
yoshua. id4 by jointly learning
to align and translate. in proceedings of the 3th interna-
tional conference on learning representations (iclr),
2015.

baroni, m. and zamparelli, r. nouns are vectors, adjec-
tives are matrices: representing adjective-noun con-
in proceedings of the
structions in semantic space.
emnlp, pp. 1183   1193, 2010.

bengio, y. neural net language models. scholarpedia, 3

(1):3881, 2008.

bengio, y., ducharme, r., vincent, p., and janvin, c. a
neural probabilistic language model. the journal of ma-
chine learning research, 3:1137   1155, 2003.

blacoe, w. and lapata, m. a comparison of vector-
based representations for semantic composition.
in
proceedings of the 2012 joint conference on empirical
methods in natural language processing and compu-
tational natural language learning, emnlp-conll
   12, pp. 546   556. association for computational lin-
guistics, 2012.

bourlard, h. and kamp, y. auto-association by multilayer
id88s and singular value decomposition. biologi-
cal cybernetics, 59(4-5):291   294, 1988.

bullinaria, j. a. and levy, j. p. extracting semantic repre-
sentations from word co-occurrence statistics: a compu-
tational study. behavior research methods, 39(3):510   
526, 2007.

clark, s., coecke, b., and sadrzadeh, m. a compositional
distributional model of meaning. in proceedings of the
second quantum interaction symposium (qi-2008), pp.
133   140, 2008.

collobert, r., weston,

j., bottou, l., karlen, m.,
kavukcuoglu, k., and kuksa, p. natural language pro-
cessing (almost) from scratch. the journal of machine
learning research, 12:2493   2537, 2011.

deerwester, s., dumais, s. t., furnas, g. w., landauer,
t. k., and harshman, r.
indexing by latent semantic
analysis. journal of the american society for informa-
tion science, 41(6):391   407, 1990.

finkelstein, l., gabrilovich, e., matias, y., rivlin, e.,
solan, z., wolfman, g., and ruppin, e. placing search
in context: the concept revisited. in proceedings of
the 10th international conference on world wide web,
pp. 406   414. acm, 2001.

firth, j. r. a synopsis of linguistic theory 1930-55.

1957.

grefenstette, e., dinu, g., zhang, y., sadrzadeh, m., and
baroni, m. proceedings of the 10th international con-
ference on computational semantics (iwcs 2013)    
long papers, chapter multi-step regression learning
for compositional id65, pp. 131   
142. association for computational linguistics, 2013.

harris, z. s. distributional structure. word, 1954.

humboldt, w.

  uber die verschiedenheit des menschlichen
sprachbaues: und ihren ein   uss auf die geistige en-
twickelung des menschengeschlechts. druckerei der
k  oniglichen akademie der wissenschaften, 1836.

lebret, r. and collobert, r. id27s through
hellinger pca. in proceedings of the 14th conference

   the sum of its parts   : joint learning of word and phrase representations with autoencoders

of the european chapter of the association for compu-
tational linguistics, pp. 482   490. association for com-
putational linguistics, april 2014.

rubenstein, h. and goodenough, j. b. contextual corre-
lates of synonymy. communications of the acm, 8(10):
627   633, 1965.

socher, r., huval, b., manning, c., and ng, a. seman-
tic compositionality through recursive matrix-vector
spaces. in proceedings of the 2012 joint conference on
empirical methods in natural language processing and
computational natural language learning, pp. 1201   
1211. association for computational linguistics, 2012.

socher, r., perelygin, a., wu, j. y., chuang, j., manning,
c. d., ng, a. y, and potts, c. recursive deep models
for semantic compositionality over a sentiment tree-
bank. in proceedings of the 2013 conference on empiri-
cal methods in natural language processing (emnlp),
volume 1631, pp. 1642. association for computational
linguistics, 2013.

turney, p. and pantel, p. from frequency to meaning: vec-
tor space models of semantics. journal of arti   cial in-
telligence research, 37(1):141   188, 2010.

lebret, r., pinheiro, p. h. o., and collobert, r. phrase-
based image captioning. in proceedings of the 32st in-
ternational conference on machine learning (icml),
2015.

legrand, j. and collobert, r. joint id56-based greedy pars-
in proceedings of the 3th
ing and word composition.
international conference on learning representations
(iclr), 2015.

levy, o. and goldberg, y. neural id27 as
implicit id105. in advances in neural in-
formation processing systems, pp. 2177   2185. 2014.

lund, k. and burgess, c. producing high-dimensional se-
mantic spaces from lexical co-occurrence. behavior re-
search methods, instruments, & computers, 28(2):203   
208, 1996.

luong, m., socher, r., and manning, c. d. better word
representations with id56s for
morphology. in conll, 2013.

mikolov, t., chen, k., corrado, g., and dean, j. ef   cient
estimation of word representations in vector space. in
proceedings of workshop at international conference on
learning representations (iclr 2013), 2013a.

mikolov, t., sutskever, i., chen, k., corrado, g., and
dean, j. distributed representations of words and
in advances in
phrases and their compositionality.
neural information processing systems, pp. 3111   3119.
2013b.

mitchell, j. and lapata, m. composition in distributional
models of semantics. cognitive science, 34(8):1388   
1429, 2010.

mnih, a. and kavukcuoglu, k. learning word embed-
dings ef   ciently with noise-contrastive estimation.
in
advances in neural information processing systems, pp.
2265   2273, 2013.

patel, m., bullinaria, j. a., and levy, j. p. extracting se-
mantic representations from large text corpora. in 4th
neural computation and psychology workshop, lon-
don, 9   11 april 1997, pp. 199   212. springer, 1998.

pennington, j., socher, r., and manning, c. d. glove:
global vectors for word representation. in proceedings
of the empiricial methods in natural language process-
ing (emnlp 2014), volume 12, 2014.

