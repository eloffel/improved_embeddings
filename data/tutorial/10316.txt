do multi-sense embeddings improve natural language understanding?

jiwei li

dan jurafsky

computer science department

computer science department

stanford university

stanford, ca 94305, usa

jiweil@stanford.edu

stanford university

stanford, ca 94305, usa

jurafsky@stanford.edu

5
1
0
2

 

v
o
n
4
2

 

 
 
]
l
c
.
s
c
[
 
 

3
v
0
7
0
1
0

.

6
0
5
1
:
v
i
x
r
a

abstract

learning a distinct representation for each
sense of an ambiguous word could lead
to more powerful and    ne-grained mod-
els of vector-space representations. yet
while    multi-sense    methods have been
proposed and tested on arti   cial word-
similarity tasks, we don   t know if they im-
prove real natural language understanding
tasks. in this paper we introduce a multi-
sense embedding model based on chinese
restaurant processes that achieves state of
the art performance on matching human
word similarity judgments, and propose
a pipelined architecture for incorporating
multi-sense embeddings into language un-
derstanding.
we then test the performance of our model
on part-of-speech tagging, named entity
recognition, id31, semantic
relation identi   cation and semantic relat-
edness, controlling for embedding dimen-
sionality. we    nd that multi-sense embed-
dings do improve performance on some
tasks (part-of-speech tagging, semantic re-
lation identi   cation, semantic relatedness)
but not on others (named entity recogni-
tion, various forms of id31).
we discuss how these differences may be
caused by the different role of word sense
information in each of the tasks. the re-
sults highlight the importance of testing
embedding models in real applications.

1 introduction

enriching vector models of word meaning so they
can represent multiple word senses per word type
seems to offer the potential to improve many lan-
guage understanding tasks. most traditional em-
bedding models associate each word type with a

single embedding (e.g., 3)). thus the embedding
for homonymous words like bank (with senses in-
cluding    sloping land    and       nancial institution   )
is forced to represent some uneasy central ten-
dency between the various meanings. more    ne-
grained embeddings that represent more natural
regions in semantic space could thus improve lan-
guage understanding.

early research pointed out

that embeddings
could model aspects of word sense (kintsch,
2001) and recent research has proposed a number
of models that represent each word type by dif-
ferent senses, each sense associated with a sense-
speci   c embedding (kintsch, 2001; reisinger and
mooney, 2010; neelakantan et al., 2014; huang et
al., 2012; chen et al., 2014; pina and johansson,
2014; wu and giles, 2015; liu et al., 2015). such
sense-speci   c embeddings have shown improved
performance on simple arti   cial tasks like match-
ing human word similarity judgments    ws353
(rubenstein and goodenough, 1965) or mc30
(huang et al., 2012).

incorporating multisense id27s into
general nlp tasks requires a pipelined architec-
ture that addresses three major steps:

1. sense-speci   c

representation

learning:
learn word sense speci   c embeddings from a
large corpus, either unsupervised or aided by
external resources like id138.

2. sense induction: given a text unit (a phrase,
sentence, document, etc.), infer word senses
for its tokens and associate them with corre-
sponding sense-speci   c embeddings.

3. representation acquisition for phrases or
sentences:
learn representations for text
units given sense-speci   c embeddings and
pass them to machine learning classi   ers.

most existing work on multi-sense embeddings
emphasizes the    rst step by learning sense spe-

ci   c embeddings, but does not explore the next
two steps. these are important steps, however,
since it isn   t clear how existing multi-sense em-
beddings can be incorporated into and bene   t real-
world nlu tasks.

we propose a pipelined architecture to address
all three steps and apply it to a variety of nlp
tasks: part-of-speech tagging, named entity recog-
nition, id31, semantic relation iden-
ti   cation and semantic relatedness. we    nd:

    multi-sense embeddings give improved per-
formance in some tasks (e.g., semantic sim-
ilarity for words and sentences,
seman-
tic relation identi   cation part-of-speech tag-
ging), but not others (e.g., id31,
named entity extraction). in our analysis we
offer some suggested explanations for these
differences.

    some of the improvements for multi-sense
embeddings are no longer visible when us-
ing more sophisticated neural models like
lstms which have more    exibility in    l-
tering away the informational chaff from the
wheat.

    it is important to carefully compare against

embeddings of the same dimensionality.

    when doing so, the most straightforward way
to yield better performance on these tasks is
just to increase embedding dimensionality.

after describing related work, we introduce the
new unsupervised sense-learning model in section
3, give our sense-induction algorithm in section 4,
and then in following sections evaluate its perfor-
mance for word similarity, and then various nlp
tasks.

2 related work

neural embedding learning frameworks represent
each token with a dense vector representation,
optimized through predicting neighboring words
or decomposing co-occurrence matrices (3; col-
lobert and weston, 2008; mnih and hinton, 2007;
mikolov et al., 2013; mikolov et al., 2010; pen-
nington et al., 2014). standard neural models rep-
resent each word with a single unique vector rep-
resentation.

recent work has begun to augment the neu-
ral paradigm to address the multi-sense problem

by associating each word with a series of sense
speci   c embeddings. the central idea is to aug-
ment standard embedding learning models like
skip-grams by disambiguating word senses based
on local co-occurrence    e.g., the fruit    apple   
tends to co-occur with the words    cider, tree, pear   
while the homophonous it company co-occurs
with words like    iphone   ,    google    or    ipod   .

for example reisinger and mooney (2010) and
huang et al. (2012) propose ways to develop mul-
tiple embeddings per word type by pre-id91
the contexts of each token to create a    xed num-
ber of senses for each word, and then relabel-
ing each word token with the clustered sense be-
fore learning embeddings. neelakantan et al.
(2014) extend these models by relaxing the as-
sumption that each word must have a    xed num-
ber of senses and using a non-parametric model
setting a threshold to decide when a new sense
cluster should be split off; liu et al. (2015)
learns sense/topic speci   c embeddings by com-
bining neural frameworks with lda topic mod-
els. wu and giles (2015) disambiguate sense em-
beddings from wikipedia by    rst id91 wiki
documents. chen et al. (2014) turn to external re-
sources and used a prede   ned inventory of senses,
building a distinct representation for every sense
de   ned by the id138 dictionary. other rele-
vant work includes qiu et al. (2014) who main-
tains separate representations for different part-of-
speech tags of the same word.

recent work is mostly evaluated on the rela-
tively arti   cial task of matching human word sim-
ilarity judgments.

3 learning sense-speci   c embeddings

we propose to build on this previous literature,
most speci   cally huang et al. (2012) and nee-
lakantan et al. (2014), to develop an algorithm
for learning multiple embeddings for each word
type, each embedding corresponding to a distinct
induced word sense. such an algorithm should
have the property that a word should be associated
with a new sense vector just when evidence in the
context (e.g., neighboring words, document-level
co-occurrence statistics) suggests that it is suf   -
ciently different from its early senses. such a line
of thinking naturally points to chinese restau-
rant processes (crp) (blei et al., 2004; teh et
al., 2006) which have been applied in the related
   eld of word sense induction. in the analogy of

crp, the current word could either sit at one of
the existing tables (belonging to one of the exist-
ing senses) or choose a new table (a new sense).
the decision is made by measuring semantic re-
latedness (based on local context information and
global document information) and the number of
customers already sitting at that table (the popu-
larity of word senses). we propose such a model
and show that it improves over the state of the art
on a standard word similarity task.

3.1 chinese restaurant processes

we offer a brief overview of chinese restaurant
processes in this section;
readers interested in
more details can consult the original papers (blei
et al., 2004; teh et al., 2006; pitman, 1995).
crp can be viewed as a practical interpretation
of dirichlet processes (ferguson, 1973) for non-
parametric id91.
in the analogy, each data
point is compared to a customer in a restaurant.
the restaurant has a series of tables t, each of
which serves a dish dt. this dish can be viewed as
the index of a cluster or a topic. the next customer
w to enter would either choose an existing table,
sharing the dish (cluster) already served or choos-
ing a new cluster based on the following probabil-
ity distribution:

p r(tw = t)    ( ntp (w|dt)

  p (w|dnew) if t is new

if t already exists

(1)
where nt denotes the number of customers al-
ready sitting at table t and p (w|dt) denotes the
id203 of assigning the current data point to
cluster dt.    is the hyper parameter controlling the
preference for sitting at a new table.

crps exhibit a useful    rich get richer    prop-
erty because they take into account the popular-
ity of different word senses. they are also more
   exible than a simple threshold strategy for set-
ting up new clusters, due to the robustness intro-
duced by adopting the relative ratio of p (w|dt)
and p (w|dnew).

3.2

incorporating crp into distributed
language models

we describe how we incorporate crp into a stan-
dard distributed language model1.

1we omit details about training standard distributed mod-
els; see collobert and weston (2008) and mikolov et al.
(2013).

w, z2

w, ..., z|zw |

as in the standard vector-space model, each to-
ken w is associated with a k dimensional global
embedding ew. additionally, it is associated with
w } where
a set of senses zw = {z1
|zw| denotes the number of senses discovered for
word w. each sense z is associated with a distinct
sense-speci   c embedding ez
w. when we encounter
a new token w in the text, at the    rst stage, we
maximize the id203 of seeing the current to-
ken given its context as in standard language mod-
els using the global vector ew:

p(ew|eneigh) = f (ew, eneigh)

(2)

f() can take different forms in different learn-

ing paradigms, e.g., f = qw      neigh p(ew, ew   )

for skip-gram or f = p(ew, g(ew)) for senna
(collobert and weston, 2008) and cbow, where
g(eneigh) denotes a function that projects the con-
catenation of neighboring vectors to a vector with
the same dimension as ew for senna and the
bag-or-word averaging for cbow (mikolov et al.,
2013).

unlike traditional one-word-one-vector frame-
works, eneigh includes sense information in addi-
tion to the global vectors for neighbors. eneigh can
therefore be written as2.

eneigh = {en   k, , ..., en   1, en+1, ..., en   k}

(3)
next we would use crp to decide which sense
the current occurrence corresponds to, or construct
a new sense if it is a new meaning that we have not
encountered before. based on crp, the probabil-
ity that assigns the current occurrence to each of
the discovered senses or a new sense is given by:

p r(zw = z)             
      

n w

z p (ez

w|context)
if z already exists
  p (w|znew) if z is new

(4)

z denotes the number of times already
where n w
w|context)
assigned to sense z for token w. p (ez
denotes the id203 that current occurrence be-
longing to (or generated by) sense z.

the algorithm for parameter update for the one
token predicting procedure is illustrated in figure

2for models that predict succeeding words, sense labels
for preceding words have already been decided. for models
that predict words using both left and right contexts, the la-
bels for right-context words have not been decided yet. in
such cases we just use its global word vector to    ll up the
position.

01: input : token sequence {wn, wneigh}.
02: update parameters involved in equ (3)(4)
based on current word prediction.
03: sample sense label z from crp.
04:
if a new sense label z is sampled:
05:
06:
07: else: update parameters involved based on
sampled sense label z.

- add z to zwn
- ez

wn = argmax p(wn|zm)

model

skipgram
sg+greedy
sg+expect
skipgram
sg+greedy
sg+expect

dataset

1.1b (wiki)
1.1b (wiki)
1.1b (wiki)

120b
120b
120b

scws correlation

64.6
66.4
67.0
66.4
69.1
69.7

table 1: performances for different set of multi-
sense embeddings (300d) evaluated on scws by
measuring the spearman correlation between each
model   s similarity and the human judgments.

figure 1:
guage models.

incorporating crp into neural lan-

with that sense.

1: line 2 shows parameter updating through pre-
dicting the occurrence of current token. lines 4-6
illustrate the situation when a new word sense is
detected, in which case we would add the newly
detected sense z into zwn. the vector representa-
w for the newly detected sense would be ob-
tion ez
tained by maximizing the function p(ez
w|context).
as we can see, the model performs word-sense
id91 and embedding learning jointly, each
one affecting the other. the prediction of the
global vector of the current token (line2) is based
on both the global and sense-speci   c embeddings
of its neighbors, as will be updated through pre-
dicting the current token. similarly, once the sense
label is decided (line7), the model will adjust the
embeddings for neighboring words, both global
word vectors and sense-speci   c vectors.

4 obtaining word representations for

nlu tasks

next we describe how we decide sense labels for
tokens in context. the scenario is treated as a in-
ference procedure for sense labels where all global
id27s and sense-speci   c embeddings
are kept    xed.

given a document or a sentence, we have an
objective function with respect to sense labels
by multiplying eq.2 over each containing token.
computing the global optimum sense labeling   
in which every word gets an optimal sense label   
requires searching over the space of all senses for
all words, which can be expensive. we therefore
chose two simpli   ed heuristic approaches:

    greedy search: assign each token the lo-
cally optimum sense label and represent the
current token with the embedding associated

    expectation: compute the id203 of
each possible sense for the current word, and
represent the word with the expectation vec-
tor:

~ew = xz   zw

p(w|z, context)    ez
w

5 word similarity evaluation

we evaluate our embeddings by comparing with
other multi-sense embeddings on the standard ar-
ti   cial task for matching human word similarity
judgments.

early work used similarity datasets like ws353
(finkelstein et al., 2001) or rg (rubenstein and
goodenough, 1965), whose context-free nature
makes them a poor evaluation. we therefore adopt
stanford   s contextual word similarities (scws)
(huang et al., 2012), in which human judgments
are associated with pairs of words in context. thus
for example    bank    in the context of    river bank   
would have low relatedness with    de   cit    in the
context       nancial de   cit   .

we trained our models on the two datasets:
wikipedia dataset which is comprised of 1.1 bil-
lion tokens and a large dataset by combining
wikipedia, gigaword and common crawl dataset,
which is comprised of 120 billion tokens. we iter-
ate over the dataset for 3 times, with window size
11. we next use the greedy or expectation strate-
gies to obtain word vectors for tokens given their
context. these vectors are then used as input to get
the value of cosine similarity between two words.
performances are reported in table 1. con-
sistent with earlier work (e.g.., neelakantan
et al. (2014)), we    nd that multi-sense em-
beddings result
in better performance in the
context-dependent scws task (sg+greedy and

sg+expect are better than sg). as expected,
performance is not as high when global
level
information is ignored when choosing word
senses (sg+greedy) as when it
is included
(sg+expect), as neighboring words don   t provide
suf   cient information for word sense disambigua-
tion. sg+expect yields +2.4 performance boost
than one-word-one-vector strategy on 1.1 billion
wikipedia dataset3 and +3.2 on the common crawl
datast.

visualization table 2 shows examples of se-
mantically related words given the local context.
id27s for tokens are obtained by using
the inferred sense labels from the greedy model
and are then used to search for nearest neighbors in
the vector space based on cosine similarity. like
earlier models (e.g., neelakantan et al. (2014)).,
the model can disambiguate different word senses
(in examples like bank, rock and apple) based on
their local context; although of course the model
is also capable of dealing with polysemy   senses
that are less distinct.

6 experiments on nlp tasks

having shown that multi-sense embeddings im-
prove word similarity tasks, we turn to ask
whether they improve real-world nlu tasks: pos
tagging, ner tagging, id31 at the
phrase and sentence level, semantic relationship
identi   cation and sentence-level semantic related-
ness. for each task, we experimented on the fol-
lowing sets of embeddings, which are trained us-
ing the id97 package on the same corpus:

    standard one-word-one-vector embeddings

from skip-gram (50d).

    sense disambiguated embeddings from sec-
tion 3 and 4 using greedy search and expec-
tation (50d)

    standard

one-word-one-vector

    the concatenation of global word embed-
dings and sense-speci   c embeddings (100d).
skip-gram
embeddings with dimensionality doubled
(100d) (100d is the correct corresponding
baseline
the concatenation above
doubles the dimensionality of word vectors)

since

3(neelakantan et al., 2014) reported a result of 69.3 on
scws dataset trained from wikipedia corpus, outperform-
ing the proposed model described in this paper trained on the
similar-size corpus in spite of the fact that different wikipedia
dumps and preprocessing techniques are adopted.

    embeddings with very high dimensionality

(300d).

as far as possible we try to perform an apple-
to-apple comparison on these tasks, and our goal
is an analytic one   to investigate how well se-
mantic information can be encoded in multi-sense
embeddings and how they can improve nlu
performances   rather than an attempt to create
state-of-the-art results. thus for example, in tag-
ging tasks (e.g., ner, pos), we follow the proto-
cols in (collobert et al., 2011) using the concate-
nation of neighboring embeddings as input fea-
tures rather than treating embeddings as auxiliary
features which are fed into a crf model along
with other manually developed features as in pen-
nington et al. (2014). or for experiments on senti-
ment and other tasks where sentence level embed-
dings are required we only employ standard recur-
rent or recursive models for sentence embedding
rather than models with sophisticated state-of-the-
art methods (e.g., tai et al. (2015; irsoy and cardie
(2014)).

signi   cance testing for comparing models is
done via the bootstrap test (efron and tibshirani,
1994). unless otherwise noted, signi   cant testing
is performed on one-word-one-vector embedding
(50d) versus multi-sense embedding using expec-
tation id136 (50d) and one-vector embedding
(100d) versus expectation (100d).

use

6.1 the tasks
id39 we
the
conll-2003 english benchmark for training,
and test on the conll-2003 test data. we follow
the protocols in collobert et al. (2011), using
the concatenation of neighboring embeddings as
input to a multi-layer neural model. we employ
a    ve-layer neural architecture, comprised of
an input layer,
layers with
recti   er linear activation function and a softmax
output layer. training is done by id119
with minibatches where each sentence is treated
as one batch. learning rate, window size, number
of hidden units of hidden layers, l2 regulariza-
tions and number of iterations are tuned on the
development set.

three convolutional

part-of-speech tagging we use sections 0   18
of the wall street journal (wsj) data for train-
ing, sections 19   21 for validation and sections
22   24 for testing. similar to ner, we trained 5-
layer neural models which take the concatenation

context

nearest neighbors

apple is a kind of fruit.

apple releases its new ipads.

he borrowed the money from banks.

pear, cherry, mango, juice, peach, plum, fruit, cider, apples, tomato, orange, bean, pie
microsoft, intel, dell, ipad, macintosh, ipod, iphone, google, computer, imac, hardware
banking, credit, investment,    nance, citibank, currency, assets, loads, imf, hsbc

along the shores of lakes,

banks of rivers

land, coast, river, waters, stream, inland, area, coasts, shoreline, shores, peninsula

basalt is the commonest volcanic rock.
rock is the music of teenage rebellion.

boulder, stone, rocks, sand, mud, limestone, volcanic, sedimentary, pelt, lava, basalt
band, pop, bands, song, rap, album, jazz. blues, singer, hip-pop, songs, guitar, musician

table 2: nearest neighbors of words given context. the embeddings from context words are    rst in-
ferred with the greedy strategy; nearest neighbors are computed by cosine similarity between word
embeddings. similar phenomena have been observed in earlier work (neelakantan et al., 2014)

standard (50)

0.852

greedy (50)
0.852 (+0)

standard (100) global+g (100)

0.867

0.866 (-0.01)

standard (300)

0.882

expectation( 50)

0.854 (+0.02)
global+e (100)
0.871 (+0.04)

quence models. for training, we adopt adagrad
with mini-batch. parameters (i.e., l2 penalty,
learning rate and mini batch size) are tuned on
the development set. due to space limitations, we
omit details of recurrent models and training.

table 3: accuracy for different models on
name entity recognition.
global+e stands
for global+expectation id136 and global+g
stands for global+greedy id136.
p-value
0.223 for standard(50) verse expectation (50) and
0.310 for standard(100) verse expectation (100).

of neighboring embeddings as inputs. we adopt a
similar training and parameter tuning strategy as
for id52.

0.925

standard (50)

greedy (50)
0.934 (+0.09)
standard (100) global+g (100)
0.946 (+0.06)

0.940

expectation (50)

0.938 (+0.13)
global+e (100)
0.952 (+0.12)

standard (300)

0.954

table 4: accuracy for different models on part of
speech tagging. p-value 0.033 for 50d and 0.031
for 100d.

sentence-level sentiment classi   cation (pang)
the sentiment dataset of pang et al. (2002) con-
sists of movie reviews with a sentiment label for
each sentence. we divide the original dataset
into training(8101)/dev(500)/testing(2000). word
embeddings are initialized using the aforemen-
tioned types of embeddings and kept    xed in the
learning procedure. sentence level embeddings
are achieved by using standard sequence recur-
rent neural models (pearlmutter, 1989) (for de-
tails, please refer to appendix section). the ob-
tained embedding is then fed into a sigmoid clas-
si   er. convolutional matrices at the word level are
randomized from [-0.1, 0.1] and learned from se-

standard (50)

0.750

greedy (50)
0.752(+0.02)

standard (100) global+g (100)

0.768

0.765(-0.03)

expectation (50)

0.750(+0.00)
global+e (100)

0.763(-0.05)

standard (300)

0.774

table 5: accuracy for different models on sen-
timent analysis (pang et al.   s dataset). p-value
0.442 for 50d and 0.375 for 100d.

id31   stanford treebank the
stanford sentiment treebank (socher et al., 2013)
contains gold-standard labels for each constituent
in the parse tree (phrase level), thus allowing us to
investigate a sentiment task at a    ner granularity
than the dataset
in pang et al. (2002) where
labels are only found at the top of each sentence,
the sentences in the treebank were split into a
training(8544)/development(1101)/testing(2210)
dataset.

following socher et al. (2013) we obtained em-
beddings for tree nodes by using a recursive neu-
ral network model, where the embedding for par-
ent node is obtained in a bottom-up fashion based
on its children. the embeddings for each parse
tree constituent are output to a softmax layer; see
socher et al. (2013).

we focus on the standard version of recursive
neural models. again we    xed id27s
to each of the different embedding settings de-
scribed above4. similarly, we adopted adagrad
with mini-batch. parameters (i.e., l2 penalty,

4note that this is different from the settings used in
(socher et al., 2013) where word vectors were treated as pa-
rameters to optimize.

learning rate and mini batch size) are tuned on
the development set. the number of iterations is
treated as a variable to tune and parameters are
harvested based on the best performance on the
development set.

standard (50)

0.818

greedy (50)
0.815 (-0.03)

standard (100) global+g (100)
0.840 (+0.02)

0.838

expectation (50)

0.820 (+0.02)
global+e (100)
0.838 (+0.00)

standard (300)

0.854

table 6: accuracy for different models on sen-
timent analysis (binary classi   cation on stanford
sentiment treebank.). p-value 0.250 for 50d and
0.401 for 100d.

relationship

semantic
classi   cation
semeval-2010 task 8 (hendrickx et al., 2009)
is to    nd semantic relationships between pairs of
nominals, e.g., in    my [apartment]e1 has a pretty
large [kitchen]e2    classifying the relation between
[apartment] and [kitchen] as component-whole.
the dataset contains 9 ordered relationships, so
the task is formalized as a 19-class classi   ca-
tion problem, with directed relations treated as
separate labels; see hendrickx et al. (2009) for
details.

we follow the recursive implementations de-
   ned in socher et al. (2012). the path in the parse
tree between the two nominals is retrieved, and the
embedding is calculated based on recursive mod-
els and fed to a softmax classi   er. for pure com-
parison purpose, we only use embeddings as fea-
tures and do not explore other combination of ar-
ti   cial features. we adopt the same training strat-
egy as for the sentiment task (e.g., adagrad, mini-
batches, etc).

0.748

standard (50)

greedy (50)
0.760 (+0.12)
standard(100) global+g (100)
0.782 (+0.12)

0.770

expectation (50)

0.762 (+0.14)
global+e (100)
0.778 (+0.18)

standard(300)

0.798

table 7: accuracy for different models on se-
mantic relationship identi   cation. p-value 0.017
for 50d and 0.020 for 100d.

sentence semantic relatedness we use the
sentences involving compositional knowledge
(sick) dataset (marelli et al., 2014) consist-
ing of 9927 sentence pairs,
into train-
ing(4500)/development(500)/testing(4927). each

split

sentence pair is associated with a gold-standard la-
bel ranging from 1 to 5, indicating how semanti-
cally related are the two sentences, from 1 (the two
sentences are unrelated) to 5 (the two are very re-
lated).

in our setting, the similarity between two sen-
tences is measured based on sentence-level em-
beddings. let s1 and s2 denote two sentences
and es1 and es2 denote corresponding embeddings.
es1 and es2 are achieved through recurrent or re-
cursive models (as illustrated in appendix sec-
tion). again, id27s are obtained by
simple table look up in one-word-one-vector set-
tings and inferred using the greedy or expecta-
tion strategy in multi-sense settings. we adopt two
different recurrent models for acquiring sentence-
level embeddings, a standard recurrent model and
an lstm model (hochreiter and schmidhuber,
1997).

the similarity score is predicted using a regres-
sion model built on the structure of a three layer
convolutional model, with concatenation of es1
and es2 as input, and a regression score from 1-
5 as output. we adopted the same training strat-
egy as described earlier. the trained model is then
used to predict the relatedness score between two
new sentences. performance is measured using
pearson   s r between the predicted score and gold-
standard labels.

standard( 50)

0.824

greedy (50)
0.838(+0.14)

standard (100) global+g (100)
0.840 (+0.05)

0.835

expectation (50)

0.836(+0.12)
global+e (100)
0.845 (+0.10)

standard(300)

0.850

table 8: pearson   s r for different models on se-
mantic relatedness for standard models. p-value
0.028 for 50d and 0.042 for 100d.

0.843

standard(50)

expectation(50)
0.846 (+0.03)
standard(100) global+g (100) global+e (100)
0.854 (+0.04)

greedy(50)
0.848 (+0.05)

0.853 (+0.03)

0.850

standard(300)

0.850

table 9: pearson   s r for different models on se-
mantic relatedness for lstm models. p-value
0.145 for 50d and 0.170 for 100d.

6.2 discussions
results for different tasks are represented in ta-
bles 3-9.

at    rst glance it seems that multi-sense em-
beddings do indeed offer superior performance,
since combining global vectors with sense-speci   c
vectors introduces a consistent performance boost
for every task, when compared with the standard
(50d) setting. but of course this is an unfair
comparison; combining global vector with sense-
speci   c vector doubles the dimensionality of vec-
tor to 100, making comparison with standard di-
mensionality (50d) unfair. when comparing with
standard (100), the conclusions become more nu-
anced.

for every task, the +expectation method has
performances that often seem to be higher than the
simple baseline (both for the 50d case or the 100d
case). however, only some of these differences are
signi   cant.

(1) using multi-sense embeddings is signi   -
cantly helpful for tasks like semantic relatedness
(tables 7-8). this is sensible since sentence mean-
ing here is sensitive to the semantics of one partic-
ular word, which could vary with word sense and
which would directly be re   ected on the related-
ness score.

(2) by contrast, for id31 (tables
5-6), much of the task depends on correctly identi-
fying a few sentiment words like    good    or    bad   ,
whose senses tend to have similar sentiment val-
ues, and hence for which multi-sense embeddings
offer little help. multi-sense embeddings might
promise to help id31 for some cases,
like disambiguating the word    sound    in    safe and
sound    versus    movie sound   . but we suspect that
such cases are not common, explaining the non-
signi   cance of the improvement. furthermore, the
advantages of neural models in id31
tasks presumably lie in their capability to capture
local composition like negation, and it   s not clear
how helpful multi-sense embeddings are for that
aspect.

(3) similarly, multi-sense embeddings help for
id52, but not for ner tagging (table 3-4).
word senses have long been known to be related
to pos tags. but the largest proportion of ner
tags consists of the negative not-a-ner (   o   ) tag,
each of which is likely correctly labelable regard-
less of whether senses are disambiguated or not
(since presumably if a word is not a named entity,
most of its senses are not named entities either).

(4) as we apply more sophisticated models like
lstm to semantic relatedness tasks (in table 9),

the advantages caused by multi-sense embeddings
disappears.

(5) doubling the number of dimensions is suf-
   cient to increase performance as much as using
the complex multi-sense algorithm. (of course in-
creasing vector dimensionality (to 300) boosts per-
formance even more, although at the signi   cant
cost of exponentially increasing time complexity.)
we do larger one-word-one-vector embeddings do
so well? we suggest some hypotheses:

    though information about distinct senses is
encoded in one-word-one-vector embeddings
in a mixed and less structured way, we sus-
pect that the compositional nature of neural
models is able to separate the informational
chaff from the wheat and choose what infor-
mation to take up, bridging the gap between
single vector and multi-sense paradigms. for
models like lstms which are better at do-
ing such a job by using gates to control in-
formation    ow, the difference between two
paradigms should thus be further narrowed,
as indeed we found.

    the pipeline model proposed in the work re-
quires sense-label id136 (i.e., step 2). we
proposed two strategies: greedy and ex-
pectation, and found that greedy mod-
els perform worse than expectation, as
we might expect5. but even expectation
can be viewed as another form of one-word-
one-vector models, just one where different
senses are entangled but weighted to empha-
size the important ones. again, this suggests
another cause for the strong relative perfor-
mance of larger-dimensioned one-word-one-
vector models.

7 conclusion

in this paper, we expand ongoing research into
multi-sense embeddings by    rst proposing a new
version based on chinese restaurant processes that
achieves state of the art performance on simple
word similarity matching tasks. we then intro-
duce a pipeline system for incorporating multi-
sense embeddings into nlp applications, and ex-
amine multiple nlp tasks to see whether and

5greedy models work in a more aggressive way and
likely make mistakes due to the non-global-optimum nature
and limited context information

when multi-sense embeddings can introduce per-
formance boosts. our results suggest that sim-
ply increasing the dimensionality of baseline
skip-gram embeddings is sometimes suf   cient to
achieve the same performance wins that come
from using multi-sense embeddings. that is, the
most straightforward way to yield better perfor-
mance on these tasks is just to increase embedding
dimensionality.

our results come with some caveats. in partic-
ular, our conclusions are based on the pipelined
system that we introduce, and other multi-sense
embedding systems (e.g., a more advanced sense
learning model or a better sense label model or
a completely different pipeline system) may    nd
stronger effects of multi-sense models. nonethe-
less we do consistently    nd improvements for
multi-sense embeddings in some tasks (part-of-
speech tagging and semantic relation identi   ca-
tion), suggesting the bene   ts of our multi-sense
models and those of others. perhaps the most im-
portant implication of our results may be the ev-
idence they provide for the importance of going
beyond simple human-matching tasks, and testing
embedding models by using them as components
in real nlp applications.

8 appendix

in sentiment classi   cation and sentence seman-
tic relatedness tasks, classi   cation models require
embeddings that represent the input at a sentence
or phrase level. we adopt recurrent networks
(standard ones or lstms) and recursive networks
in order to map a sequence of tokens with various
length to a vector representation.

recurrent networks a recurrent network suc-
cessively takes word wt at step t, combines its vec-
tor representation et with the previously built hid-
den vector ht   1 from time t     1, calculates the re-
sulting current embedding ht, and passes it to the
next step. the embedding ht for the current time t
is thus:

ht = tanh(w    ht   1 + v    et)

(5)

where w and v denote compositional matrices. if
ns denote the length of the sequence, hns repre-
sents the whole sequence s.

recursive networks standard recursive models
work in a similar way by working on neighbor-
ing words by parse tree order rather than sequence

order. they compute the representation for each
parent node based on its immediate children re-
cursively in a bottom-up fashion until reaching the
root of the tree. for a given node    in the tree
and its left child   left (with representation eleft) and
right child   right (with representation eright), the
standard recursive network calculates e  :

e   = tanh(w    e  left + v    e  right)

(6)

long short term memory (lstm) lstm
models (hochreiter and schmidhuber, 1997) are
de   ned as follows: given a sequence of inputs
x = {x1, x2, ..., xnx }, an lstm associates each
timestep with an input, memory and output gate,
respectively denoted as it, ft and ot. we nota-
tionally disambiguate e and h, where et denote the
vector for an individual text unit (e.g., word or sen-
tence) at time step t while ht denotes the vector
computed by the lstm model at time t by com-
bining et and ht   1.    denotes the sigmoid func-
tion. w     r4k  2k. the vector representation ht
for each time-step t is given by:

"

it
ft
ot
lt

# ="

  
  
  

tanh

#w   " ht   1
et #

ct = ft    ct   1 + it    lt

hs
t = ot    ct

(7)

(8)

(9)

9 acknowledgments

we would like to thank sam bowman, ignacio
cases, kevin gu, gabor angeli, sida wang, percy
liang and other members of the stanford nlp
group, as well as anonymous reviewers for their
helpful advice on various aspects of this work. we
gratefully acknowledge the support of the nsf via
award iis-1514268, the defense advanced re-
search projects agency (darpa) deep explo-
ration and filtering of text (deft) program un-
der air force research laboratory (afrl) con-
tract no. fa8750-13-2-0040. any opinions,    nd-
ings, and conclusions or recommendations ex-
pressed in this material are those of the authors
and do not necessarily re   ect the views of nsf,
darpa, afrl, or the us government.

references
yoshua bengio, holger schwenk,

jean-s  ebastien
sen  ecal, fr  ederic morin, and jean-luc gauvain.
2006. neural probabilistic language models.
in
innovations in machine learning, pages 137   186.
springer.

david m. blei, thomas l. grif   ths, michael i. jordan,
and joshua b. tenenbaum. 2004. hierarchical topic
models and the nested chinese restaurant process.
advances in neural information processing systems,
16.

xinxiong chen, zhiyuan liu, and maosong sun. 2014.
a uni   ed model for word sense representation and
disambiguation.
in proceedings of the 2014 con-
ference on empirical methods in natural language
processing (emnlp), pages 1025   1035.

ronan collobert and jason weston. 2008. a uni   ed
architecture for natural language processing: deep
neural networks with multitask learning.
in pro-
ceedings of the 25th international conference on
machine learning, pages 160   167. acm.

ronan collobert, jason weston, l  eon bottou, michael
karlen, koray kavukcuoglu, and pavel kuksa.
2011. natural language processing (almost) from
scratch.
the journal of machine learning re-
search, 12:2493   2537.

bradley efron and robert j tibshirani. 1994. an in-

troduction to the bootstrap. crc press.

thomas s ferguson. 1973. a bayesian analysis of
some nonparametric problems. the annals of statis-
tics, pages 209   230.

lev finkelstein, evgeniy gabrilovich, yossi matias,
ehud rivlin, zach solan, gadi wolfman, and ey-
tan ruppin. 2001. placing search in context: the
concept revisited. in proceedings of the 10th inter-
national conference on world wide web, pages 406   
414. acm.

iris hendrickx, su nam kim, zornitsa kozareva,
preslav nakov, diarmuid   o s  eaghdha, sebastian
pad  o, marco pennacchiotti, lorenza romano, and
stan szpakowicz.
semeval-2010 task
8: multi-way classi   cation of semantic relations
between pairs of nominals.
in proceedings of
the workshop on semantic evaluations: recent
achievements and future directions, pages 94   99.
association for computational linguistics.

2009.

sepp hochreiter and j  urgen schmidhuber.

1997.
long short-term memory. neural computation,
9(8):1735   1780.

eric h huang, richard socher, christopher d man-
ning, and andrew y ng. 2012.
improving word
representations via global context and multiple word
prototypes. in proceedings of the 50th annual meet-
ing of the association for computational linguis-
tics: long papers-volume 1, pages 873   882. asso-
ciation for computational linguistics.

ozan irsoy and claire cardie. 2014. deep recursive
neural networks for compositionality in language.
in advances in neural information processing sys-
tems, pages 2096   2104.

walter kintsch. 2001. predication. cognitive science,

25(2):173   202.

yang liu, zhiyuan liu, tat-seng chua, and maosong
sun. 2015. topical id27s. in twenty-
ninth aaai conference on arti   cial intelligence.

marco marelli, luisa bentivogli, marco baroni, raf-
faella bernardi, stefano menini, and roberto zam-
parelli. 2014. semeval-2014 task 1: evaluation of
compositional distributional semantic models on full
sentences through semantic relatedness and textual
entailment. semeval-2014.

tomas mikolov, martin kara     at, lukas burget, jan
cernock`y, and sanjeev khudanpur. 2010. recur-
rent neural network based language model. in in-
terspeech, pages 1045   1048.

tomas mikolov, kai chen, greg corrado, and jef-
2013. ef   cient estimation of word
arxiv preprint

frey dean.
representations in vector space.
arxiv:1301.3781.

andriy mnih and geoffrey hinton. 2007. three new
id114 for statistical language modelling.
in proceedings of the 24th international conference
on machine learning, pages 641   648. acm.

arvind neelakantan, jeevan shankar, alexandre pas-
sos, and andrew mccallum. 2014. ef   cient non-
parametric estimation of multiple embeddings per
word in vector space. in proceedings of emnlp.

bo pang, lillian lee, and shivakumar vaithyanathan.
2002. thumbs up?: sentiment classi   cation using
machine learning techniques. in proceedings of the
acl-02 conference on empirical methods in natural
language processing-volume 10, pages 79   86. as-
sociation for computational linguistics.

barak a pearlmutter. 1989. learning state space tra-
jectories in recurrent neural networks. neural com-
putation, 1(2):263   269.

jeffrey pennington, richard socher, and christopher d
manning. 2014. glove: global vectors for word
representation.
in proceedings of the 2014 con-
ference on empirical methods in natural language
processing (emnlp), pages 1532   1543.

luis nieto pina and richard johansson. 2014. a sim-
ple and ef   cient method to generate word sense rep-
resentations. arxiv preprint arxiv:1412.6045.

jim pitman. 1995. exchangeable and partially ex-
changeable random partitions. id203 theory
and related    elds, 102(2):145   158.

lin qiu, yong cao, zaiqing nie, and yong rui. 2014.
learning word representation considering proximity
and ambiguity. in twenty-eighth aaai conference
on arti   cial intelligence.

joseph reisinger and raymond j mooney.

2010.
multi-prototype vector-space models of word mean-
ing. in naacl.

herbert rubenstein and john b goodenough. 1965.
contextual correlates of synonymy. communica-
tions of the acm, 8(10):627   633.

richard socher, brody huval, christopher d manning,
and andrew y ng. 2012. semantic compositional-
ity through recursive matrix-vector spaces. in pro-
ceedings of the 2012 joint conference on empiri-
cal methods in natural language processing and
computational natural language learning, pages
1201   1211. association for computational linguis-
tics.

richard socher, alex perelygin, jean y wu, jason
chuang, christopher d manning, andrew y ng,
and christopher potts. 2013. recursive deep mod-
els for semantic compositionality over a sentiment
treebank. in proceedings of emnlp.

kai sheng tai, richard socher, and christopher d
improved semantic representa-
manning. 2015.
tions from tree-structured long short-term memory
networks. arxiv preprint arxiv:1503.00075.

yee whye teh, michael i. jordan, matthew j. beal,
and david m. blei. 2006. hierarchical dirichlet
processes. journal of the american statistical as-
sociation, 101(476).

zhaohui wu and c. lee giles. 2015. sense-aware se-
mantic analysis: a multi-prototype word representa-
tion model using wikipedia. in twenty-ninth aaai
conference on arti   cial intelligence.

this figure "1.png" is available in "png"(cid:10) format from:

http://arxiv.org/ps/1506.01070v3

this figure "2.png" is available in "png"(cid:10) format from:

http://arxiv.org/ps/1506.01070v3

this figure "3.png" is available in "png"(cid:10) format from:

http://arxiv.org/ps/1506.01070v3

this figure "4.png" is available in "png"(cid:10) format from:

http://arxiv.org/ps/1506.01070v3

this figure "5.png" is available in "png"(cid:10) format from:

http://arxiv.org/ps/1506.01070v3

