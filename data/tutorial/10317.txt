a hierarchical neural autoencoder for paragraphs and documents

jiwei li, minh-thang luong and dan jurafsky

computer science department, stanford university, stanford, ca 94305, usa

jiweil, lmthang, jurafsky@stanford.edu

5
1
0
2

 

n
u
j
 

6

 
 
]
l
c
.
s
c
[
 
 

2
v
7
5
0
1
0

.

6
0
5
1
:
v
i
x
r
a

abstract

id86 of coherent
long texts like paragraphs or longer doc-
uments is a challenging problem for re-
current networks models.
in this paper,
we explore an important step toward this
generation task: training an lstm (long-
short term memory) auto-encoder to pre-
serve and reconstruct multi-sentence para-
graphs. we introduce an lstm model that
hierarchically builds an embedding for a
paragraph from embeddings for sentences
and words, then decodes this embedding
to reconstruct the original paragraph. we
evaluate the reconstructed paragraph us-
ing standard metrics like id8 and en-
tity grid, showing that neural models are
able to encode texts in a way that preserve
syntactic, semantic, and discourse coher-
ence. while only a    rst step toward gener-
ating coherent text units from neural mod-
els, our work has the potential to signi   -
cantly impact id86
and summarization1.

1

introduction

generating coherent text is a central task in natural
language processing. a wide variety of theories
exist for representing relationships between text
units, such as rhetorical structure theory (mann
and thompson, 1988) or discourse representa-
tion theory (lascarides and asher, 1991), for ex-
tracting these relations from text units (marcu,
2000; lethanh et al., 2004; hernault et al., 2010;
feng and hirst, 2012, inter alia), and for extract-
ing other coherence properties characterizing the
role each text unit plays with others in a discourse
(barzilay and lapata, 2008; barzilay and lee,

1code for models described in this paper are available at

www.stanford.edu/  jiweil/.

2004; elsner and charniak, 2008; li and hovy,
2014, inter alia). however, applying these to text
generation remains dif   cult. to understand how
discourse units are connected, one has to under-
stand the communicative function of each unit,
and the role it plays within the context that en-
capsulates it, recursively all the way up for the
entire text. identifying increasingly sophisticated
human-developed features may be insuf   cient for
capturing these patterns. but developing neural-
based alternatives has also been dif   cult. al-
though neural representations for sentences can
capture aspects of coherent sentence structure (ji
and eisenstein, 2014; li et al., 2014; li and hovy,
2014), it   s not clear how they could help in gener-
ating more broadly coherent text.

recent lstm models (hochreiter and schmid-
huber, 1997) have shown powerful results on gen-
erating meaningful and grammatical sentences in
sequence generation tasks like machine translation
(sutskever et al., 2014; 0; luong et al., 2015) or
parsing (vinyals et al., 2014). this performance is
at least partially attributable to the ability of these
systems to capture local compositionally: the way
neighboring words are combined semantically and
syntactically to form meanings that they wish to
express.

could these models be extended to deal with
generation of larger structures like paragraphs or
even entire documents?
in standard sequence-
to-sequence generation tasks, an input sequence
is mapped to a vector embedding that represents
the sequence, and then to an output string of
words. multi-text generation tasks like summa-
rization could work in a similar way:
the sys-
tem reads a collection of input sentences, and
is then asked to generate meaningful texts with
certain properties (such as   for summarization   
being succinct and conclusive). just as the local
semantic and syntactic compositionally of words
can be captured by lstm models, can the com-

positionally of discourse releations of higher-level
text units (e.g., clauses, sentences, paragraphs, and
documents) be captured in a similar way, with
clues about how text units connect with each an-
other stored in the neural compositional matrices?
in this paper we explore a    rst step toward this
task of neural id86. we fo-
cus on the component task of training a paragraph
(document)-to-paragraph (document) autoencoder
to reconstruct the input text sequence from a com-
pressed vector representation from a deep learn-
ing model. we develop hierarchical lstm mod-
els that arranges tokens, sentences and paragraphs
in a hierarchical structure, with different levels of
lstms capturing compositionality at the token-
token and sentence-to-sentence levels.

we offer in the following section to a brief de-
scription of sequence-to-sequence lstm models.
the proposed hierarchical lstm models are then
described in section 3, followed by experimental
results in section 4, and then a brief conclusion.

2 long-short term memory (lstm)

in this section we give a quick overview of lstm
models. lstm models (hochreiter and schmid-
huber, 1997) are de   ned as follows: given a
sequence of inputs x = {x1, x2, ..., xnx}, an
lstm associates each timestep with an input,
memory and output gate, respectively denoted as
it, ft and ot. for notations, we disambiguate e and
h where et denote the vector for individual text
unite (e.g., word or sentence) at time step t while
ht denotes the vector computed by lstm model
at time t by combining et and ht   1.    denotes the
sigmoid function. the vector representation ht for
each time-step t is given by:

(cid:34) it

(cid:35)

(cid:34)   

(cid:35)

ft
ot
lt

=

  
  
tanh

(cid:34)

(cid:35)

w   

ht   1
et

ct = ft    ct   1 + it    lt

(1)

(2)

t = ot    ct
hs

(3)
where w     r4k  2k in sequence-to-sequence
generation tasks, each input x is paired with
a sequence of outputs
y =
{y1, y2, ..., yny }. an lstm de   nes a distribution
over outputs and sequentially predicts tokens us-

to predict:

ing a softmax function:

p (y |x)
=

t   [1,ny]

(cid:89)
(cid:89)

=

t   [1,ny]

(cid:80)

exp(f (ht   1, eyt))
y(cid:48) exp(f (ht   1, ey(cid:48)))

p(yt|x1, x2, ..., xt, y1, y2, ..., yt   1)

(4)
f (ht   1, eyt) denotes the activation function be-
tween eh   1 and eyt, where ht   1 is the representa-
tion outputted from the lstm at time t     1. note
that each sentence ends up with a special end-of-
sentence symbol <end>. commonly, the input
and output use two different lstms with differ-
ent sets of convolutional parameters for capturing
different compositional patterns.

in the decoding procedure, the algorithm termi-
nates when an <end> token is predicted. at each
timestep, either a greedy approach or id125
can be adopted for word prediction. greedy search
selects the token with the largest conditional prob-
ability, the embedding of which is then combined
with preceding output for next step token predic-
tion. for id125, (sutskever et al., 2014) dis-
covered that a beam size of 2 suf   ces to provide
most of bene   ts of id125.

3 paragraph autoencoder
in this section, we introduce our proposed hierar-
chical lstm model for the autoencoder.

3.1 notation
let d denote a paragraph or a document, which
is comprised of a sequence of nd sentences,
d = {s1, s2, ..., snd , endd}. an additional
   endd    token is appended to each document.
each sentence s is comprised of a sequence of
tokens s = {w1, w2, ..., wns} where ns denotes
the length of the sentence, each sentence end-
ing with an    ends    token. the word w is as-
sociated with a k-dimensional embedding ew,
w }. let v denote vocabu-
ew = {e1
lary size. each sentence s is associated with a k-
dimensional representation es.

w, ..., ek

w, e2

an autoencoder is a neural model where output
units are directly connected with or identical to in-
put units. typically, inputs are compressed into
a representation using neural models (encoding),
which is then used to reconstruct it back (decod-
ing). for a paragraph autoencoder, both the input
x and output y are the same document d. the

autoencoder    rst compresses d into a vector rep-
resentation ed and then reconstructs d based on
ed.

for simplicity, we de   ne lst m (ht   1, et) to
be the lstm operation on vectors ht   1 and et to
achieve ht as in equ.1 and 2. for clari   cation,
we    rst describe the following notations used in
encoder and decoder:

    hw

t denote hidden vectors from lstm
t and hs
models,
the subscripts of which indicate
timestep t, the superscripts of which indi-
cate operations at word level (w) or sequence
level (s). hs
t (enc) speci   es encoding stage
and hs

t (dec) speci   es decoding stage.

t denotes word-level and sentence-
t and es
level embedding for word and sentence at po-
sition t in terms of its residing sentence or
document.

    ew

3.2 model 1: standard lstm
the whole input and output are treated as one
sequence of tokens. following sutskever et al.
(2014) and 0), we trained an autoencoder that    rst
maps input documents into vector representations
from a lst mencode and then reconstructs inputs
by predicting tokens within the document sequen-
tially from a lst mdecode. two separate lstms
are implemented for encoding and decoding with
no sentence structures considered. illustration is
shown in figure 1.

3.3 model 2: hierarchical lstm
the hierarchical model draws on the intuition that
just as the juxtaposition of words creates a joint
meaning of a sentence, the juxtaposition of sen-
tences also creates a joint meaning of a paragraph
or a document.
encoder we    rst obtain representation vectors
at the sentence level by putting one layer of lstm
(denoted as lst m word
encode) on top of its containing
words:

t (enc) = lst m word
hw

encode(ew

t , hw

t   1(enc))

(5)

the vector output at the ending time-step is used
to represent the entire sentence as

es = hw

ends

each timestep:

t (enc) = lst m sentence
hs

encode (es

t , hs

t   1(enc))

(6)

.

endd

representation es
computed at the    nal time
step is used to represent the entire document:
ed = hs

endd

thus one lstm operates at the token level,
leading to the acquisition of sentence-level rep-
resentations that are then used as inputs into the
second lstm that acquires document-level repre-
sentations, in a hierarchical structure.
decoder as with encoding, the decoding algo-
rithm operates on a hierarchical structure with two
layers of lstms. lstm outputs at sentence level
for time step t are obtained by:

t (dec) = lst m sentence
hs

decode (es

t , hs

t   1(dec))

(7)

0(d) = ed, the end-to-end
the initial time step hs
t (d) is used
output from the encoding procedure. hs
as the original input into lst m word
decode for subse-
quently predicting tokens within sentence t + 1.
decode predicts tokens at each position se-
lst m word
quentially, the embedding of which is then com-
bined with earlier hidden vectors for the next time-
step prediction until the ends token is predicted.
the procedure can be summarized as follows:

(8)

t , hw

t   1(dec))

t (dec) = lst m sentence
hw

decode (ew
p(w|  ) = softmax(ew, hw
during decoding, lst m word

(9)
decode generates each
word token w sequentially and combines it with
earlier lstm-outputted hidden vectors.
the
lstm hidden vector computed at the    nal time
step is used to represent the current sentence.

t   1(dec))

this is passed to lst m sentence

, combined
t for the acquisition of ht+1, and outputted

with hs
to the next time step in sentence decoding.

decode

decode

for each timestep t, lst m sentence

has to    rst
decide whether decoding should proceed or come
to a full stop: we add an additional token endd to
the vocabulary. decoding terminates when token
endd is predicted. details are shown in figure 2.

3.4 model 3: hierarchical lstm with

attention

to build representation ed for the current doc-
ument/paragraph d, another layer of lstm (de-
noted as lst m sentence
encode ) is placed on top of all sen-
tences, computing representations sequentially for

id12 adopt a look-back strategy by
linking the current decoding stage with input sen-
tences in an attempt to consider which part of the
input is most responsible for the current decoding

figure 1: standard sequence to sequence model.

figure 2: hierarchical sequence to sequence model.

figure 3: hierarchical sequence to sequence model with attention.

state. this attention version of hierarchical model
is inspired by similar work in image caption gen-
eration and machine translation (xu et al., 2015;
0).
n (e)} be the
collection of sentence-level hidden vectors for

let h = {hs

2(e), ..., hs

1(e), hs

encode

each sentence from the inputs, outputted from
lst m sentence
. each element in h contains in-
formation about input sequences with a strong fo-
cus on the parts surrounding each speci   c sentence
(time-step). during decoding, suppose that es
t de-
notes the sentence-level embedding at current step

(11)

(12)

(13)

decode

t   1(dec) denotes the hidden vector out-
and that hs
at previous time step
putted from lst m sentence
t   1. id12 would    rst link the current-
t   1(dec) which
step decoding information, i.e., hs
is outputted from lst m sentence
with each of the
input sentences i     [1, n ], characterized by a
strength indicator vi:
vi = u t f (w1    hs
i (enc)) (10)
w1, w2     rk  k, u     rk  1. vi is then normal-
ized:

dec

ai =

t   1(dec) + w2    hs
(cid:80)
exp(vi)
i(cid:48) exp(v(cid:48)
i)
(cid:88)

aihs

i (enc)

i   [1,nd]

mt =

the attention vector is then created by averaging
weights over all input sentences:

lstm hidden vectors for current step is then
achieved by combining ct, es

t   1(dec):

t and hs

(cid:34) it

(cid:35)

(cid:34)   

(cid:35)

(cid:34) hs

(cid:35)

t   1(dec)

ft
ot
lt

=

w   

  
es
t
  
mt
tanh
ct = ft    ct   1 + it    lt

t = ot    ct
hs

(14)
(15)
where w     r4k  3k. ht is then used for word
predicting as in the vanilla version of the hierar-
chical model.

3.5 training and testing
parameters are estimated by maximizing likeli-
hood of outputs given inputs, similar to standard
sequence-to-sequence models. a softmax func-
tion is adopted for predicting each token within
output documents, the error of which is    rst back-
propagated through lst m word
to sentences,
decode
to document repre-
then through lst m sentence
sentation ed, and last through lst m sentence
and
encode to inputs. stochastic gradient de-
lst m word
scent with minibatches is adopted.

decode

encode

for testing, we adopt a greedy strategy with
no id125. for a given document d, ed
is    rst obtained given already learned lstmencode
parameters and id27s. then in decod-
ing, lst m sentence
computes embeddings at each
decode
sentence-level time-step, which is    rst fed into the
binary classi   er to decide whether sentence de-
coding terminates and then into lst m word
decode for
word decoding.

dataset

s per d w per d w per s

hotel-review

wikipedia

8.8
8.4

124.8
132.9

14.1
14.8

table 1: statistics for the datasets. w, s and d re-
spectively represent number of words, number of
sentences, and number of documents/paragraphs.
for example,    s per d    denotes average number
of sentences per document.

4 experiments
4.1 dataset
we implement the proposed autoencoder on two
datasets, a highly domain speci   c dataset consist-
ing of hotel reviews and a general dataset extracted
from wkipedia.
hotel reviews we use a subset of hotel reviews
crawled from tripadvisor. we consider only re-
views consisting sentences ranging from 50 to 250
words; the model has problems dealing with ex-
tremely long sentences, as we will discuss later.
we keep a vocabulary set consisting of the 25,000
most frequent words. a special    <unk>    token
is used to denote all the remaining less frequent
tokens. reviews that consist of more than 2 per-
cent of unknown words are discarded. our train-
ing dataset is comprised of roughly 340,000 re-
views; the testing set is comprised of 40,000 re-
views. dataset details are shown in table 1.
wikipedia we
from
wikipedia corpus that meet the aforementioned
length requirements. we keep a top frequent
vocabulary list of 120,000 words.
paragraphs
with larger than 4 percent of unknown words are
discarded. the training dataset is comprised of
roughly 500,000 paragraphs and testing contains
roughly 50,000.

paragraphs

extracted

4.2 training details and implementation
previous research has shown that deep lstms
work better than shallow ones for sequence-to-
sequence tasks (vinyals et al., 2014; sutskever et
al., 2014). we adopt a lstm structure with four
layer for encoding and four layer for decoding,
each of which is comprised of a different set of pa-
rameters. each lstm layer consists of 1,000 hid-
den neurons and the dimensionality of word em-
beddings is set to 1,000. other training details are
given below, some of which follow sutskever et al.
(2014).

    input documents are reversed.
    lstm parameters and id27s are
initialized from a uniform distribution be-
tween [-0.08, 0.08].
    stochastic gradient decent is implemented
without momentum using a    xed learning
rate of 0.1. we stated halving the learning
rate every half epoch after 5 epochs. we
trained our models for a total of 7 epochs.

    batch size is set to 32 (32 documents).
    decoding algorithm allows generating at
most 1.5 times the number of words in inputs.
    0.2 dropout rate.
    gradient clipping is adopted by scaling gra-
dients when the norm exceeded a threshold
of 5.

our implementation on a single gpu2 processes a
speed of approximately 600-1,200 tokens per sec-
ond. we trained our models for a total of 7 itera-
tions.

4.3 evaluations
we need to measure the closeness of the output
(candidate) to the input (reference). we    rst adopt
two standard id74, id8 (lin,
2004; lin and hovy, 2003) and id7 (papineni
et al., 2002).
id8 is a recall-oriented measure widely
used in the summarization literature. it measures
the id165 recall between the candidate text and
the reference text(s). in this work, we only have
one reference document (the input document) and
id8 score is therefore given by:

id8n =

gramn   input countmatch(gramn)

gramn   input count(gramn)

(16)
where countmatch denotes the number of id165s
co-occurring in the input and output. we report
id8-1, 2 and w (based on weighted longest
common subsequence).
id7 purely measuring recall will inappropri-
ately reward long outputs. id7 is designed to
address such an issue by emphasizing precision.
id165 precision scores for our situation are given
by:

(cid:80)
(cid:80)

precisionn =

gramn   output countmatch(gramn)

gramn   output count(gramn)

(17)

2tesla k40m, 1 kepler gk110b, 2880 cuda cores.

(cid:80)
(cid:80)

id7 then combines the average logarithm of
precision scores with exceeded length penaliza-
tion. for details, see papineni et al. (2002).
coherence evaluation neither id7 nor
id8 attempts to evaluate true coherence.
there is no generally accepted and readily avail-
able coherence evaluation metric.3 because of
the dif   culty of developing a universal coherence
evaluation metric, we proposed here only a
tailored metric speci   c to our case. based on the
assumption that human-generated texts (i.e., input
documents in our tasks) are coherent (barzilay
and lapata, 2008), we compare generated outputs
with input documents in terms of how much
original text order is preserved.

we develop a grid evaluation metric similar to
the entity transition algorithms in (barzilay and
lee, 2004; lapata and barzilay, 2005). the key
idea of barzilay and lapata   s models is to    rst
identify grammatical roles (i.e., object and sub-
ject) that entities play and then model the transi-
tion id203 over entities and roles across sen-
tences. we represent each sentence as a feature-
vector consisting of verbs and nouns in the sen-
tence. next we align sentences from output doc-
uments to input sentences based on sentence-to-
sentence f1 scores (precision and recall are com-
puted similarly to id8 and id7 but at sen-
tence level) using feature vectors. note that multi-
ple output sentences can be matched to one input
output is aligned
sentence. assume that sentence si
input, where i and i(cid:48) denote position
with sentence si(cid:48)
index for a output sentence and its aligned input.
the penalization score l is then given by:

l =

   (cid:88)

2

noutput    (noutput     1)

(cid:88)

i   [1,noutput   1]

j   [i+1,noutput]

|(j     i)     (j(cid:48)     i(cid:48))|

(18)
equ. 18 can be interpreted as follows: (j     i)
denotes the distance in terms of position index be-
tween two outputted sentences indexed by j and i,

3wolf and gibson (2005) and lin et al. (2011) proposed
metrics based on discourse relations, but these are hard to ap-
ply widely since identifying discourse relations is a dif   cult
problem. indeed sophisticated coherence id74
are seldom adopted in real-world applications, and summa-
rization researchers tend to use simple approximations like
number of overlapped tokens or topic distribution similarity
(e.g., (yan et al., 2011b; yan et al., 2011a; celikyilmaz and
hakkani-t  ur, 2011)).

input-wiki

output-wiki

input-wiki

output-wiki

input-wiki

output-wiki

input-review

washington was unanimously elected president by the electors in both the 1788     1789 and
1792 elections . he oversaw the creation of a strong, well-   nanced national government that
maintained neutrality in the french revolutionary wars , suppressed the whiskey rebellion , and
won acceptance among americans of all types . washington established many forms in govern-
ment still used today , such as the cabinet system and inaugural address . his retirement after
two terms and the peaceful transition from his presidency to that of john adams established a
tradition that continued up until franklin d . roosevelt was elected to a third term . washington
has been widely hailed as the     father of his country     even during his lifetime.
washington was elected as president in 1792 and voters <unk> of these two elections until
1789 . he continued suppression <unk> whiskey rebellion of the french revolution war gov-
ernment , strong , national well are involved in the establishment of the    n advanced operations
, won acceptance . as in the government , such as the establishment of various forms of inau-
guration speech washington , and are still in use . <unk> continued after the two terms of his
quiet transition to retirement of <unk> <unk> of tradition to have been elected to the third
paragraph . but ,     the united nations of the father     and in washington in his life , has been
widely praised .
apple inc . is an american multinational corporation headquartered in cupertino , california ,
that designs , develops , and sells consumer electronics , computer software , online services ,
and personal com - puters . its bestknown hardware products are the mac line of computers , the
ipod media player , the iphone smartphone , and the ipad tablet computer . its online services
include icloud , the itunes store , and the app store . apple   s consumer software includes the os
x and ios operating systems , the itunes media browser , the safari web browser , and the ilife
and iwork creativity and productivity suites .
apple is a us company in california , <unk> , to develop electronics , softwares , and pc , sells
. hardware include the mac series of computers , ipod , iphone . its online services , including
icloud , itunes store and in app store . softwares , including os x and ios operating system ,
itunes , web browser , < unk> , including a productivity suite .
paris is the capital and most populous city of france . situated on the seine river , in the north of
the country , it is in the centre of the le-de-france region . the city of paris has a population of
2273305 inhabitants . this makes it the    fth largest city in the european union measured by the
population within the city limits .
paris is the capital and most populated city in france . located in the <unk> , in the north of the
country , it is the center of <unk> . paris , the city has a population of <num> inhabitants .
this makes the eu     s population within the city limits of the    fth largest city in the measurement
.
on every visit to nyc , the hotel beacon is the place we love to stay . so conveniently located
to central park , lincoln center and great local restaurants .
the rooms are lovely . beds so
comfortable , a great little kitchen and new wizz bang coffee maker . the staff are so accommo-
dating and just love walking across the street to the fairway supermarket with every imaginable
goodies to eat .

output-review every time in new york , lighthouse hotel is our favorite place to stay . very convenient , central
park , lincoln center , and great restaurants . the room is wonderful , very comfortable bed , a
kitchenette and a large explosion of coffee maker . the staff is so inclusive , just across the street
to walk to the supermarket channel love with all kinds of what to eat .

table 2: a few examples produced by the hierarchical lstm alongside the inputs.

and (j(cid:48)     i(cid:48)) denotes the distance between their
mirrors in inputs. as we wish to penalize the
degree of permutation in terms of text order, we
penalize the absolute difference between the two
computed distances. this metric is also relevant
to the overall performance of prediction and re-
call: an irrelevant output will be aligned to a ran-
dom input, thus being heavily penalized. the de-
   ciency of the proposed metric is that it concerns
itself only with a semantic perspective on coher-
ence, barely considering syntactical issues.

4.4 results

a summary of our experimental results is given
in table 3. we observe better performances for

the hotel-review dataset than the open domain
wikipedia dataset, for the intuitive reason that
documents and sentences are written in a more
   xed format and easy to predict for hotel reviews.
the hierarchical model that considers sentence-
level structure outperforms standard sequence-
to-sequence models. id12 at
the
sentence level introduce performance boost over
vanilla id187.

with respect to the coherence evaluation, the
original sentence order is mostly preserved: the hi-
erarchical model with attention achieves l = 1.57
on the hotel-review dataset, equivalent to the fact
that the relative position of two input sentences
are permuted by an average degree of 1.57. even

dataset

id7 id8-1 id8-2 coherence(l)

model
standard

hierarchical

hotel review 0.241
hotel review 0.267
hierarchical+attention hotel review 0.285
0.178
0.202
0.220

wikipedia
wikipedia
hierarchical+attention wikipedia

hierarchical

standard

0.571
0.590
0.624
0.502
0.529
0.544

0.302
0.330
0.355
0.228
0.250
0.291

1.92
1.71
1.57
2.75
2.30
2.04

table 3: results for three models on two datasets. as with coherence score l, smaller values signi   es
better performances.

for the wikipedia dataset where more poor-quality
sentences are observed, the original text order can
still be adequately maintained with l = 2.04.

5 discussion and future work

in this paper, we extended recent sequence-to-
sequence lstm models to the task of multi-
sentence generation. we trained an autoencoder
to see how well lstm models can reconstruct in-
put documents of many sentences. we    nd that
the proposed hierarchical lstm models can par-
tially preserve the semantic and syntactic integrity
of multi-text units and generate meaningful and
grammatical sentences in coherent order. our
model performs better than standard sequence-to-
sequence models which do not consider the intrin-
sic hierarchical discourse structure of texts.

while our work on auto-encoding for larger
texts is only a preliminary effort toward allowing
neural models to deal with discourse, it nonethe-
less suggests that neural models are capable of en-
coding complex clues about how coherent texts are
connected .

the performance on this autoencoder task could
certainly also bene   t from more sophisticated neu-
ral models. for example one extension might
align the sentence currently being generated with
the original input sentence (similar to sequence-
to-sequence translation in (0)), and later transform
the original task to sentence-to-sentence genera-
tion. however our long-term goal here is not on
perfecting this basic multi-text generation scenario
of reconstructing input documents, but rather on
extending it to more important applications.

that is, the autoencoder described in this work,
where input sequence x is identical to output y , is
only the most basic instance of the family of doc-
ument (paragraph)-to-document (paragraph) gen-
eration tasks. we hope the ideas proposed in
this paper can play some role in enabling such

more sophisticated generation tasks like summa-
rization, where the inputs are original documents
and outputs are summaries or id53,
where inputs are questions and outputs are the ac-
tual wording of answers. sophisticated genera-
tion tasks like summarization or dialogue systems
could extend this paradigm, and could themselves
bene   t from task-speci   c adaptations.
in sum-
marization, sentences to generate at each timestep
might be pre-pointed to or pre-aligned to speci   c
aspects, topics, or pieces of texts to be summa-
rized. dialogue systems could incorporate infor-
mation about the user or the time course of the
dialogue. in any case, we look forward to more
sophi4d applications of neural models to the im-
portant task of id86.

6 acknowledgement

the authors want to thank gabor angeli, sam
bowman, percy liang and other members of the
stanford nlp group for insightful comments and
suggestion. we also thank the three anonymous
acl reviewers for helpful comments. this work
is supported by enlight foundation graduate fel-
lowship, and a gift from bloomberg l.p, which we
gratefully acknowledge.

references
dzmitry bahdanau, kyunghyun cho, and yoshua ben-
gio. 2014. id4 by jointly
arxiv preprint
learning to align and translate.
arxiv:1409.0473.

regina barzilay and mirella lapata. 2008. modeling
local coherence: an entity-based approach. compu-
tational linguistics, 34(1):1   34.

regina barzilay and lillian lee. 2004. catching the
drift: probabilistic content models, with applications
to generation and summarization. arxiv preprint
cs/0405039.

asli celikyilmaz and dilek hakkani-t  ur. 2011. dis-
covery of topically coherent sentences for extractive
summarization. in proceedings of the 49th annual
meeting of the association for computational lin-
guistics: human language technologies-volume 1,
pages 491   499. association for computational lin-
guistics.

micha elsner

and eugene charniak.

2008.
in
coreference-inspired coherence modeling.
the
proceedings of
association for computational linguistics on hu-
man language technologies: short papers, pages
41   44. association for computational linguistics.

the 46th annual meeting of

vanessa wei feng and graeme hirst. 2012. text-
level discourse parsing with rich linguistic fea-
in proceedings of the 50th annual meeting
tures.
of the association for computational linguistics:
long papers-volume 1, pages 60   68. association
for computational linguistics.

hugo hernault, helmut prendinger, mitsuru ishizuka,
et al. 2010. hilda: a discourse parser using sup-
port vector machine classi   cation. dialogue & dis-
course, 1(3).

sepp hochreiter and j  urgen schmidhuber.

1997.
neural computation,

long short-term memory.
9(8):1735   1780.

yangfeng ji and jacob eisenstein. 2014. represen-
tation learning for text-level discourse parsing.
in
proceedings of the 52nd annual meeting of the as-
sociation for computational linguistics, volume 1,
pages 13   24.

mirella lapata and regina barzilay. 2005. automatic
evaluation of text coherence: models and represen-
tations. in ijcai, volume 5, pages 1085   1090.

alex lascarides and nicholas asher. 1991. discourse
relations and defeasible knowledge. in proceedings
of the 29th annual meeting on association for com-
putational linguistics, pages 55   62. association for
computational linguistics.

huong lethanh, geetha abeysinghe, and christian
huyck. 2004. generating discourse structures for
in proceedings of the 20th inter-
written texts.
national conference on computational linguistics,
page 329. association for computational linguis-
tics.

jiwei li and eduard hovy. 2014. a model of coher-

ence based on distributed sentence representation.

jiwei li, rumeng li, and eduard hovy. 2014. recur-
sive deep models for discourse parsing. in proceed-
ings of the 2014 conference on empirical methods
in natural language processing (emnlp), pages
2061   2069.

chin-yew lin and eduard hovy.

2003. auto-
matic evaluation of summaries using id165 co-
in proceedings of the 2003
occurrence statistics.

conference of the north american chapter of the
association for computational linguistics on hu-
man language technology-volume 1, pages 71   78.
association for computational linguistics.

ziheng lin, hwee tou ng, and min-yen kan. 2011.
automatically evaluating text coherence using dis-
in proceedings of the 49th an-
course relations.
nual meeting of the association for computational
linguistics: human language technologies-volume
1, pages 997   1006. association for computational
linguistics.

chin-yew lin. 2004. id8: a package for automatic
in text summarization
evaluation of summaries.
branches out: proceedings of the acl-04 work-
shop, pages 74   81.

thang luong,

ilya sutskever, quoc v le, oriol
vinyals, and wojciech zaremba. 2015. addressing
the rare word problem in id4.
acl.

william c mann and sandra a thompson.

1988.
rhetorical structure theory: toward a functional the-
ory of text organization. text, 8(3):243   281.

daniel marcu. 2000. the rhetorical parsing of unre-
stricted texts: a surface-based approach. computa-
tional linguistics, 26(3):395   448.

kishore papineni, salim roukos, todd ward, and wei-
jing zhu. 2002. id7: a method for automatic
evaluation of machine translation. in proceedings of
the 40th annual meeting on association for compu-
tational linguistics, pages 311   318. association for
computational linguistics.

ilya sutskever, oriol vinyals, and quoc vv le. 2014.
sequence to sequence learning with neural net-
works. in advances in neural information process-
ing systems, pages 3104   3112.

oriol vinyals, lukasz kaiser, terry koo, slav petrov,
2014.
arxiv preprint

ilya sutskever, and geoffrey hinton.
grammar as a foreign language.
arxiv:1412.7449.

florian wolf and edward gibson. 2005. representing
discourse coherence: a corpus-based study. com-
putational linguistics, 31(2):249   287.

kelvin xu, jimmy ba, ryan kiros, aaron courville,
ruslan salakhutdinov, richard zemel, and yoshua
bengio. 2015. show, attend and tell: neural im-
age id134 with visual attention. arxiv
preprint arxiv:1502.03044.

rui yan, liang kong, congrui huang, xiaojun wan,
xiaoming li, and yan zhang. 2011a. timeline gen-
eration through evolutionary trans-temporal summa-
rization. in proceedings of the conference on em-
pirical methods in natural language processing,
pages 433   443. association for computational lin-
guistics.

rui yan, xiaojun wan, jahna otterbacher, liang kong,
xiaoming li, and yan zhang. 2011b. evolution-
ary timeline summarization: a balanced optimiza-
in pro-
tion framework via iterative substitution.
ceedings of the 34th international acm sigir con-
ference on research and development in information
retrieval, pages 745   754. acm.

