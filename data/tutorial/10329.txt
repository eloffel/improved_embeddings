syntax-based deep matching of short texts   

mingxuan wang1 zhengdong lu2 hang li2 qun liu3,1

1institute of computing technology, chinese academy of sciences

2noah   s ark lab, huawei technologies

3centre for next generation localisation, dublin city university

5
1
0
2

 

n
u
j
 

2
1

 
 
]
l
c
.
s
c
[
 
 

6
v
7
2
4
2
0

.

3
0
5
1
:
v
i
x
r
a

abstract

many tasks in natural language processing, rang-
ing from machine translation to question answer-
ing, can be reduced to the problem of matching
two sentences or more generally two short texts.
we propose a new approach to the problem, called
deep match tree (deepmatchtree), under a gen-
eral setting. the approach consists of two compo-
nents, 1) a mining algorithm to discover patterns
for matching two short-texts, de   ned in the prod-
uct space of dependency trees, and 2) a deep neural
network for matching short texts using the mined
patterns, as well as a learning algorithm to build
the network having a sparse structure. we test our
algorithm on the problem of matching a tweet and
a response in social media, a hard matching prob-
lem proposed in [wang et al., 2013], and show
that deepmatchtree can outperform a number of
competitor models including one without using de-
pendency trees and one based on word-embedding,
all with large margins.

1 introduction
matching is of central importance to natural language pro-
cessing.
in fact, many problems in natural language pro-
cessing can be formalized as matching between two short-
texts, with different matching relations in different applica-
tions. for example, in paraphrase identi   cation the relation
is synonymy, and in information retrieval it is relevance. in
the meantime matching is also a challenging problem, since
it requires modeling of the two short-texts as well as their re-
lation. in machine translation, for example, the model needs
to determine whether a sentence in the source language has
the same meaning as a sentence in the target language.
in
dialogue, the model needs to judge whether a message is an
appropriate response to a given utterance.

deep neural network can model non-linear and hierar-
chical relations [bengio, 2009], and thus is well suited for
short-text matching in natural language processing. the
   this work is done when the    rst author worked as intern at

noah   s ark lab, huawei technologies.

very limited work in that thread, makes use of word em-
bedding as the building blocks of matching model. al-
though embedding-based methods have been proven effective
on tasks like id53 [lu and li, 2013], para-
phrase identi   cation [socher et al., 2011], and even short
text conversation [lu and li, 2013; hu et al., 2014], they
are not enough good at handling the subtlety of general
short-text matching. short-texts often represent rich con-
tent, their relations are also complicated, and more sophis-
ticated structures are required for comparing the two short-
texts. for example, when judging the appropriateness of re-
sponse    you should rest more.    to utterance    i have
to work during the weekend!   , we have to consider
the semantic correspondence between    work over the week-
end    and    need to rest more   , which is hard to be captured by
an embedding-based model.

we study the problem of short-text matching in a gen-
our method, named deep match tree
eral setting.
(deepmatchtree), consists of two sequentially connected
components: 1) a mining algorithm to discover rich yet sub-
tle patterns, de   ned in the product space of dependency trees,
from a large corpus of paired short-texts, and 2) a learning al-
gorithm to construct a deep neural network (dnn) for mak-
ing a matching decision on the two short-texts, on the basis
of the mined patterns. the dnn model is speci   cally trained
based on contrastive sampling of negative examples.

without loss of generality, we focus on the task of match-
ing a response to a given tweet on weibo, a popular chinese
microblog service, for which a large amount of data is avail-
able. this is a hard problem, requiring consideration of com-
plicated correspondence between the structures of two texts.
our experimental results show that deepmatchtree is supe-
rior to existing methods on the problem.

our main contributions are: 1) proposal of an algorithm for
mining dependency tree matching patterns on large scale, 2)
proposal of an algorithm for learning a deep matching model
for using mined matching patterns, and 3) empirical valida-
tion of the ef   cacy and ef   ciency of the proposed method
using large scale real datasets.

2 direct product of graphs (pog)
we    rst propose representing the matching of a pair of sen-
tences (in general short-texts) with the direct product between

figure 1: the overall architecture for deepmatchtree.

the dependency trees of them, and then propose treating sub-
graphs of this product graph as matching patterns.
2.1 dependency tree
we represent a sentence with its dependency tree. we choose
to do so because a dependency tree tends to expose the    skele-
ton    of the sentence, revealing both short-distance and long-
distance grammatical relations between words [filippova and
strube, 2008]. for example the dependency tree in fig.2 con-
tains structures like {li na   win   championship} repre-
sented as a sub-tree,where the words (boldface) are not nec-
essarily adjacent to each other in the sentence.

figure 2: example of dependency tree, where the main struc-
ture of the sentence is represented as the sub-tree in thick
edges. the tweet is in chinese (literal english translation).

2.2 direct product of graphs
the direct product of graphs (pog) gx = {vx , ex} and
gy = {vy , ey }, is a graph gx  y [vishwanathan et al.,
2010], with vertices vx  y and edges ex  y
i     vx , vy
j , vy
j(cid:48) )), (vx
j(cid:48) )     ey }

vx  y = {(vx
ex  y = {((vx

i(cid:48) ), vx
i(cid:48) )(vx
i(cid:48) , vy

i(cid:48)     vy }
i , vx
j )

    ex     (vy

i , vy
i , vy

given two sentences sx and sy , their interaction relation is
represented by the direct product of their dependency trees

figure 3: the direct product of two dependency trees.

gx  y . for example, two sentences worked all night
and have a good rest (with their dependency trees are
given by the left panel of fig.3), and the direct product of
the trees is given by the right panel of fig.3. note that gx  y
is in general a graph even though gx and gy are trees.
gx  y directly describes the interaction relation between
sentences sx and sy , hosting a rather rich set of struc-
tures, both lexical and syntactic, that contribute to the overall
matching between the two sentences. next we make further
abstraction of the representation.
2.3 abstraction
we consider two types of abstraction for vertices in gx  y

    same entity: we replace the vertex (nei, nei) in
gx  y representing the same entity with a general vertex
sameentity. for example for the sentences (how is
the wether in paris?) (haven   t seen such a
sunny day in paris for a while!),
the vertex
(paris, paris) after the abstraction will be treated as
the same vertex as (boston, boston) after the same
type of abstraction. graph with this type of abstraction
is named   ge

    similar word: we conduct id91 of words based
on their id97tors [mikolov et al., 2013] using the
id116 algorithm. for a vertex (wi, wj) in the prod-
uct graph, if wi and wj belong to the same word clus-
ter ck, then the vertex will be replaced with a new ver-
tex simwordk. graph with this type of abstraction is
named   gs

x  y .

x  y .

x  y ,   gs

both types of abstraction will enhance the generalization abil-
ity of matching pattern mining described next.
2.4 sub-graphs of pog as matching patterns
with a little abuse of notation, we use   gx  y =
{gx  y ,   ge
x  y } to denote the pog for sentence pair
(sx , sy ) as well as its variants after two types of abstraction.
for a sentence pair (sx , sy ), any sub-graph in the corre-
sponding   gx  y describes part of the interaction between the
two sentences and therefore can contribute to the matching
between the two. for instance, (weather, sunny)       
sameentity is a sub-graph describing the matching between
two sentences in a conversation about weather (see the exam-
ple two paragraph ago). in general,   gx  y contains all the
meaningful matching patterns for the task.

3 mining of matching patterns
it is the responsibility of a mining algorithm to discover those
sub-graphs of {   gx  y } that can work as matching patterns to
discriminate matched sentence pairs from mismatched ones,
measured in terms of discriminative ability (cf.,[fan et al.,
2008]). discriminative roughly means it gives some evidence
on matching, i.e., it appears in matched pairs more frequently
than unmatched pairs. an ef   cient mining algorithm is vital
to the success of this method, when the number of instances
is of the order of 106 and the number of mined patterns is of
the order of 107.
3.1 speeding-up the mining process
fortunately, we can leverage the following fact with respect
to sub-graphs in the pog gx  y (without abstraction).
x  y in gx  y
proposition 3.1. any connected sub-graph gs
can uniquely determine a minimal sub-tree in gx and a min-
imal sub-tree gy , whose direct product can cover the gs
x  y .
as it implies, the mining of sub-graphs in pog of trees
can be reduced to jointly selecting the sub-trees on two
sides. this can not only greatly speed up the mining pro-
cess, but also avoid    nding patterns with duplicate function-
ality for matching. in the remainder of the paper, we will use
sub-tree1     sub-tree2 to denote a tree-pair (separated by
   ) mined from the pog. this however does not apply to the
more general case of   gx  y when some vertices are replaced
with non-factorable variants, like simword123, for which we
have to introduce some new tricks.
3.2 mining without abstraction
the algorithm for mining without abstraction, sketched in
algorithm 1, is to recursively grow the mined sub-graphs
while maintaining its discriminative ability.
it starts with
the simplest pattern (1,1), standing for one-word tree on both
x side (tweet) and y side (response), and grows the mined
trees recursively. in each growing step (leftextend() and
rightextend()), the size of sub-trees is increased by one
on either x side or the y side, followed by a    ltering step to
remove the found pairs with discriminative ability less than a
threshold. the growing step is ef   cient, since we can limit
the search for patterns of (m, n + 1) from the candidates

formed by merging patterns of (m, n). in practice the time
for looking-up each sub-tree pair is almost constant with the
help of hashmap. the following table gives some examples
of the matching patterns discovered by algorithm 1.

algorithm 1: discriminative mining of parse trees for
parallel texts
input: t : tree pairs for original (tweet, response), maxsize
output: set of mined features f;
initinalize f        ; m        ; q     [ ];
enqueue (q, (1,1));
foreach node set x, y in x ,y do

append each element of x     y to f1,1;
append x     y to m1,1;

f1,1     discriminativefilter(f1,1);
while q (cid:54)= [ ] do

m, n     dequeue (q);
if m + 1 < maxsize     (m + 1, n) has not been processed
then

[mm+1,n,fm+1,n]     leftextend(mm,n);
enqueue (q, (m + 1, n));
f     f     fm+1,n;

if n + 1 < maxsize     (m, n + 1) has not been processed
then
[mm,n+1,fm,n+1]     rightextend(mm,n);
enqueue (q, (m, n + 1));
f     f     fm,n+1;

patterns without abstraction
exam     score
id205     shannon
thank   present     happy   birthday
win   game     trying   keep
out-of-control   prices     regulation
work   weekend     rest
3.3 mining with abstraction
the algorithm for mining with abstraction is a variant of al-
gorithm 1. taking the sameentity abstraction as example,
we    rst replace each named entity, e.g., li na (found via a
named entity resolution program) with a vertex having the
same id (say, namedentity239). the growing step is the
same as in algorithm 1, except that when counting the sup-
port (number of instances containing it) of a pattern, it re-
places the same entity appearing on both sides with a wild-
card, and therefore groups many patterns as the same one.
for example, the instances for the following two patterns
li na     win     li na     congratulations
nadal     win     nadal     congratulations

will be counted together for the pattern

x     win     x     congratulations

where x stands for the wildcard. the mining with similar-
word abstraction is similar, only slightly more complicated
on deciding when two words can be merged.

figure 4: illustration for dependency trees for tree short sentences.

the following table gives some examples of the matching
patterns discovered by our algorithm on the graph with ab-
straction. here (x, x(cid:48)) stand for wildcards considered similar
enough by the algorithm.

patterns with abstraction
hope   win   x     support   x
how about   x     like   x
gift   x     happy   x
recommend   x     x   nice
pretty good   x     fine   also   x(cid:48)

3.4 advantage of tree pattern mining
it is important to note that dependency tree matching patterns
can provide better correspondence between the two sentences
than word co-occurrences on two sides (an idea    rst explored
in [lu and li, 2013]). to illustrate the superiority of using
dependency tree matching patterns, suppose that for the tweet
t1 in fig.4 we want to pick a more appropriate one from the
two responses (r1a and r1b). the word-based model tends
to assign a high matching score to pair (t1, r1b), due to
the pattern {beijing, travel}     {great wall}, which
is however spurious since t1 is about traveling to new york
while the word beijing is a distractor. on the other hand,
the tree-based model relies more on patterns like follows

travel     new-york     times square
travel     beijing     great-wall

which discriminates between word co-occurrence (e.g.,
{beijing, travel}) and dependency-tree pattern (e.g.,
travel   new york), and gives a higher score to (t1, r1a).
the mining algorithm allows us to    nd patterns represent-
ing deep and long-distance relationship within two short-texts
to be matched. the deep features therefore provide sophisti-
cated matching structures between two texts. in contrast, the
shallow features can only give word-level correspondences
between words in two texts. the difference is analogous to
syntax-based translation model and word-based translation
model [koehn et al., 2003].

4 the deep matching model
the dependency tree matching patterns (or deep features) are
then incorporated into a deep neural network for determining
the matching degree of a pair of short-texts.

4.1 model description
the diagram of our deep matching model is given in fig.1.
when a pair of short-texts is given, we    rst obtain their de-
pendency trees, form the direct product of them, and then per-
form abstraction on them (if suitable). after that, we look up
the table of dependency tree matching patterns and convert
the input text-pair into a binary vector, where an element is
one if the corresponding pattern can apply to the input text-
pair, otherwise it is zero. the binary vector, which is of 10m-
dimension and is sparse with typically 10   50 ones in our ex-
periments, is then fed into the deep neural network for the
   nal match decision.

4.2 learning
the learning of the deep neural network consists of 1) learn-
ing of the architecture, and 2) tuning of the parameters.
architecture learning
since there are 10m raw features, the number of parameters
will be too large if we have the input layer fully connected
to the    rst hidden layer with a reasonable size (say, 1,000
nodes).
it is therefore necessary to specify sensible sparse
patterns to ensure that the information in the raw features can
be well abstracted in the    rst hidden layer.

it is believed that neural networks are more suited for dense
and continuous input, and there is little work on building an
appropriate architecture for sparse and discrete input with a
demanding size. in this work, we take a simple procedure
to ensure each input node is connected to approximately k
(referred to as nodedensity later in the paper) hidden nodes,
and the average activations of the hidden nodes (measured
as the average times of them connected to hit features) are
approximately the same. the underlying belief is that we can
preserve as much information as possible when going from
the sparse hit patterns to the dense 1,000-d representation.

the selection of overall architecture the overall archi-
tecture of the neural network is illustrated in fig.1. as it
shows, we have 1,000 units in the    rst hidden layer (sigmoid
active function), 400 in the second hidden layer, 30 in the
third hidden layer, and one in the output layer. empirical re-
sults show that this architecture performs slightly better than a
3-layer one with approximately same number of parameters,

while more hidden layers (say, 5) do not bring any signi   cant
further improvement.

4.3 parameter learning
we employ a discriminative training strategy with a large
margin objective. suppose that we are given the following
triples (x, y+, y   ) from the oracle, with x (    x ) matched
with y+ better than with y    (both     y). we have the follow-
ing pairwise loss as objective:

l(w,dtrn) =

ew (xi, y+

i , y

i ) + r(w),
   

(cid:88)

(xi,y+

i ,y

   
i )   dtrn

where r(w) is the id173 term, and ew (xi, y+
is the error for triple (xi, y+
large margin form:
   
i ) = max(0, m + s(xi, y

i , y   
i )
i ), given by the following

i )     s(xi, y+
   

ew (xi, y+

i , y   

i )),

i , y

with m (0 < m) controlling the margin in training. in the
experiments, we use m = 1, but we    nd that the results are
rather stable with m in a fairly large range.

for training, we use the generic back-propagation algo-
rithm adapted for the sparse patterns in the    rst layer. more
speci   cally, when updating the weights in the    rst layer, we
only update the weights associated with the active nodes in
the input layer, which faithfully respects the law of back-prop
but makes the learning ef   ciently enough even on a training
set with millions of instances. it is easy to see that the num-
ber of parameters (at least 4   107) is greater than the number
of positive instances, and thus some kind of id173 is
needed. here we consider employing both dropout [hinton et
al., 2012] and early stopping [caruana et al., 2001], which
turns out to be important for the success of the model, espe-
cially when the number of parameters is over 108.

5 experiments
we report our empirical study of deepmatchtree and com-
pare it to competitors, with a brief analysis and case studies.

5.1 datasets and evaluation metric
the experiments are on two weibo datasets in two settings.

original-vs-random: the    rst dataset,
denoted as
dataorignal, consists of 4.8 million (tweet, response) pairs.
for each positive pair (original pair), we randomly select
ten responses as negative examples (contrastive sampling
of negative examples), rendering 45 million triples. our
evaluation shows that for a given tweet there is <1% chance
that a randomly selected response out of 10 is suitable.

we use 485,282 original (tweet, response) pairs not used in
the training for testing. for each pair, we get nine random re-
sponses, and testing the performance of each matching model
to pick the correct response.

retrieval-based conversation: the second dataset, de-
noted as datalabeled, consists of 422 tweets and around 30
labeled responses for each tweet 1, as introduced in [wang et
al., 2013] for retrieval-based conversation.

on datalabeled, we test how different matching models
enhance the performance of the retrieval-based conversation
model [wang et al., 2013] on    nding a suitable response for
a given tweet. it is rather hard, since the negative responses
are topically related to the tweet. we use the same retrieval
strategy in [wang et al., 2013], while individually adding the
scores of the matching models as a new feature of the ranking
function to rank retrieved responses (20   30 for each tweet).
in both experiments we use precision at one (p@1) [li,
2011] to measure the accuracy of matching. basically, for
each given tweet t, we calculate the matching scores be-
tween t and all candidate responses, and select the one with
the highest score. the ranking gets one point iff the se-
lected one is the original (on the original-vs-random dataset)
or labeled as    good    (on the retrieval-based conversation
dataset). p@1 measures the chance of getting the selection
right averaged over all the tweets in the test set.
5.2 competitor methods

    translation: we use the translation id203
p(response|tweet) to measure the matching level be-
tween the response and tweet2, which is estimated on
a variant of ibm model 1 [brown et al., 1993] adapted
for this task.
    cossim: we simply calculate the cosine similarity be-
tween two short-texts with their tf-idf representations.
this method is still better than random since a good re-
sponse tends to share words with the original tweet;
    wordembed: we represent each short-text as the sum
of the embedding vectors of the words which it contains.
the matching score of two short-texts is calculated using
a multi-layer id88 (mlp) with concatenation of
the two vectors as input;
    deepmatchtopic: we employ the matching model in
[lu and li, 2013] on the basis of topics and train a neural
network with 3 hidden layers and 1,000 hidden nodes in
the    rst hidden layer;
    deepmatchid98: we exploit the matching model pro-
posed in [hu et al., 2014] represented as a convolutional
neural network (id98).
    lrtree: to show the power of mined patterns we also
train a id28 model taking all the mined
patterns as input with the contrastive sampling training
strategy. this can be viewed as a shallow version of
deepmatchtree.

the methods can be roughly categorized into pattern-
based methods (cossim, translation, lrtree, & deep-
matchtree) and embedding-based methods (wordembed,
deepmatch, & deepmatchid98), where embedding-
based methods represent each word with a vector, based on
which the    nal matching decision is made.

1data: data.noahlab.com.hk/conversation/
2this performs slightly better than p(tweet|response).

5.4 results on conversation data
for each model, we use 5-fold cross validation to choose the
hyper-parameter of the ranking model rankid166 and report
the best result. clearly deepmatchtree can greatly improve
the performances of retrieving a suitable response from the
pool, with signi   cantly better accuracies over the competi-
tor models(p < 0.05 from t-test). this result is consistent
with the result on original-vs-random despite the difference
in experimental setting.

model
baseline
+deepmatchtopic
+wordembed
+translation
+deepmatchtree

p@1
0.574
0.587
0.579
0.585
0.608

table 2: the results on retrieval-based conversation.

5.5 analysis and case study

deep vs. shallow patterns deep patterns represent infor-
mation that cannot be adequately modeled by shallow pat-
terns in a deep neural network. indeed, our study shows that
on original-vs-random data, p@1 decreases to 0.871 (1v1)
and 0.688 (1v9) after removing the deep features. below is
a real case in our experiment. this observation is interesting
since id171 is previously often taken as partially the
responsibility of deep learning.

when trying to    nd a matched response for t1 , the    deep   
pattern {work     weekend     rest} plays a determining
role in picking r1a over r1b, while shallower patterns as
{work     job} and {work     resume} favor r1b.

the effect of abstraction the abstraction step helps im-
prove the generalization ability of the matching model, by
improving p@1 on original-vs-random from 0.876 to 0.889
(1v1) and 0.694 to 0.708 (1v9). this can also be illustrated
with the following real example from our experiment,

all non-convex models are trained with stochastic gradient
descent (sgd) [le, 2013].we    nd that their performances are
in general quite insensitive to the size of mini-batch.

5.3 results on original-vs-random
in this section we present the results in the orig nal-vs-random
setting. for each model, we only report its best performance
on the test data, since the large size of test data removes any
chance of    accidental cheating   . we    rst study the architec-
ture variations of deepmatchtree, and then compare its best
setting against the competitors.

here we compare the performances of deepmatchtree
under different settings, more specially, the number of hidden
layers (1   5), nodedensity (1   20) and architecture learning
(details of results are omitted). in a nutshell, the performance
peaks around nodedensity=10 with architecture learning.
with nodedensity    10, the matching model has over 108
parameters, and it needs id173 (e.g., dropout) to pre-
vent over   tting in addition to early stopping. the in   uence
of architecture learning is most salient for a relatively large
nodedensity (say, > 3), while the number of hidden layers
stops bringing signi   cant improvement when     3. gener-
ally we found that architectures deeper and larger than the
current one does not bring any signi   cant improvement but
much slower.

comparison to competitor models
table 1 compares deepmatchtree to the competitor mod-
els. as it shows, our model outperforms all the competitor
models with large margins. the contribution of deep archi-
tectures is manifested by the differences between the deep
architectures and shallow ones with the same mined patterns.

model
cossim
deepmatchtopic
wordembed
translation
deepmatchid98
lrtree
deepmatchtree

p@1 (1v1)
0.554
0.701
0.774
0.819
0.851
0.853
0.889

p@1 (1v9)
0.377
0.330
0.370
0.586
0.496
0.652
0.708

table 1: the results of all models on original-vs-random.
deepmatchtree signicantly outperforms all the baselines (p <
0.01 from t-test).

there is a vast gap between pattern-based models and
embedding-based models. although the embedding-based
methods can perform fairly well on the one versus one (1v1)
setting (0.85+), the performance drops dramatically in the one
versus nine (1v9) settings (0.49+), while the pattern-based
methods can maintain over 0.55 (dropping from 0.80+) in the
same test setting. this contrast suggests that pattern-based
methods, with varying coverage in the feature space, are more
certain on    matched    positive cases than on negative cases,
yielding more reliable ranking results.

suppose that for t2 we want to pick a more appropriate re-
sponse from candidates r2a and r2b. the mining algo-
rithm (algorithm 1) discovers the following pattern after the
sameentity abstraction

hope     win     x     support     x

where x stands for any named entity. this pattern (and its
own sub-patterns) then plays an important role in the later
matching model in assigning a higher matching score to (t2,
r2a), covering more speci   c patterns like

hope   win   mavericks     support   mavericks

which are    ltered out in the mining step for its small support.
6 related work
the proposed model is related to several threads of work in
natural language processing and machine learning.

deep matching models there are other works on using
deep neural networks for the matching task [huang et al.,
2013; bordes et al., 2014; sun et al., 2013; lu and li, 2013;
hu et al., 2014], which build upon given or learned represen-
tations of objects. in our model, we try to directly mine and
learn the representations of matching.

graph-based kernel deepmatchtree extends the impor-
tant notions in conventional graph kernels [vishwanathan et
al., 2010] in two senses. first, our model allows matching
of two different subgraphs in two domains (e.g., {work   
weekend} in one domain and {have    rest} in the other),
while graph kernels only consider the common subgraphs on
two sides. second, our model captures the nonlinear and
hierarchical relations between different matching patterns,
while graph kernels simply add them together, with different
weights determined by the types of sub-graphs.

string-rewriting kernel deepmatchtree is also related
to the string-rewriting kernel (srk) [bu et al., 2013] for para-
phrase identi   cation, in that srk also generates many pat-
terns of matching and learns to weigh them in training. the
main difference is the matching patterns considered in srk
are exhaustively enumerated (although calculated in a smart
way), while ours are discovered via a mining algorithm.
7 conclusion
we propose a generic model for matching two short-texts,
which relies on a tree-mining algorithm to discover a vast
amount of matching patterns and a dnn to further perform
the task using those patterns. empirical study on the rather
dif   cult task of tweet and response matching shows that our
model can outperform competitor with large margins.
8 acknowledge
this work is supported in part by china national 973 project
2014cb340301. qun liu   s work is partially supported
by the science foundation ireland (grant 12/ce/i2267 and
13/rc/2106) as part of the adapt centre at dublin city
university.

references
[bengio, 2009] yoshua bengio. learning deep architectures for ai.

found. trends mach. learn., 2(1):1   127, 2009.

[bordes et al., 2014] antoine bordes, xavier glorot, jason we-
ston, and yoshua bengio. a semantic matching energy func-
tion for learning with multi-relational data. machine learning,
94(2):233   259, 2014.

[brown et al., 1993] peter f brown, vincent j della pietra, stephen
a della pietra, and robert l mercer. the mathematics of statis-
tical machine translation: parameter estimation. computational
linguistics, 19(2):263   311, 1993.

[bu et al., 2013] fan bu, hang li, and xiaoyan zhu. an introduc-
in proceedings of the twenty-
tion to string re-writing kernel.
third international joint conference on arti   cial intelligence,
pages 2982   2986, 2013.

[caruana et al., 2001] rich caruana, steve lawrence, and lee
giles. over   tting in neural nets: id26, conjugate
gradient, and early stopping. advances in neural information
processing systems, pages 402   408, 2001.

[fan et al., 2008] wei fan, kun zhang, hong cheng, jing gao,
xifeng yan, jiawei han, philip yu, and olivier verscheure.
direct mining of discriminative and essential frequent patterns
in proceedings of the 14th acm
via model-based search tree.
sigkdd international conference on knowledge discovery and
data mining, kdd    08, pages 230   238. acm, 2008.

[filippova and strube, 2008] katja filippova and michael strube.
in proceedings
dependency tree based sentence compression.
of the fifth international id86 confer-
ence, iid86    08, pages 25   32, stroudsburg, pa, usa, 2008. as-
sociation for computational linguistics.

[hinton et al., 2012] geoffrey e. hinton, nitish srivastava, alex
krizhevsky, ilya sutskever, and ruslan salakhutdinov. improv-
ing neural networks by preventing co-adaptation of feature detec-
tors. corr, abs/1207.0580, 2012.

[hu et al., 2014] baotian hu, zhengdong lu, hang li, and qing-
cai chen. convolutional neural network architectures for match-
ing natural language sentences. in z. ghahramani, m. welling,
c. cortes, n.d. lawrence, and k.q. weinberger, editors, ad-
vances in neural information processing systems 27, pages
2042   2050. curran associates, inc., 2014.

[huang et al., 2013] po-sen huang, xiaodong he, jianfeng gao,
li deng, alex acero, and larry heck. learning deep struc-
tured semantic models for web search using clickthrough data. in
proceedings of the 22nd acm international conference on con-
ference on information & knowledge management, pages 2333   
2338. acm, 2013.

[koehn et al., 2003] philipp koehn, franz josef och, and daniel
marcu. statistical phrase-based translation. naacl    03, pages
48   54. association for computational linguistics, 2003.

[le, 2013] quoc v le. building high-level features using large
in acoustics, speech and signal
scale unsupervised learning.
processing (icassp), 2013 ieee international conference on,
pages 8595   8598. ieee, 2013.

[li, 2011] hang li. learning to rank for information retrieval and
natural language processing. synthesis lectures on human lan-
guage technologies, 4(1):1   113, 2011.

[lu and li, 2013] zhengdong lu and hang li. a deep architecture
for matching short texts. in christopher j. c. burges, lon bottou,
zoubin ghahramani, and kilian q. weinberger, editors, nips,
pages 1367   1375, 2013.

[mikolov et al., 2013] tomas mikolov, kai chen, greg corrado,
and jeffrey dean. ef   cient estimation of word representations
in vector space. corr, abs/1301.3781, 2013.

[socher et al., 2011] richard socher, eric h. huang, jeffrey pen-
nington, andrew y. ng, and christopher d. manning. dynamic
pooling and unfolding recursive autoencoders for paraphrase
detection. in advances in neural information processing sys-
tems 24. 2011.

[sun et al., 2013] yi sun, xiaogang wang, and xiaoou tang. hy-
in the ieee interna-
brid deep learning for face veri   cation.
tional conference on id161 (iccv), december 2013.
[vishwanathan et al., 2010] s. v. n. vishwanathan, nicol n.
schraudolph, risi kondor, and karsten m. borgwardt. graph
kernels. j. mach. learn. res., 11:1201   1242, 2010.

[wang et al., 2013] hao wang, zhengdong lu, hang li, and en-
hong chen. a dataset for research on short-text conversations.
in proceedings of the 2013 conference on empirical methods in
natural language processing, pages 935   945, seattle, washing-
ton, usa, october 2013. association for computational linguis-
tics.

