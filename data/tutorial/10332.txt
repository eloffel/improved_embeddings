convolutional neural network architectures for

matching natural language sentences

baotian hu     

zhengdong lu   

hang li   

qingcai chen  

  department of computer science

& technology, harbin institute of technology

shenzhen graduate school, xili, china

baotianchina@gmail.com

    noah   s ark lab

huawei technologies co. ltd.

sha tin, hong kong

lu.zhengdong@huawei.com

qingcai.chen@hitsz.edu.cn

hangli.hl@huawei.com

abstract

semantic matching is of central importance to many natural language tasks [2, 28].
a successful matching algorithm needs to adequately model the internal structures
of language objects and the interaction between them. as a step toward this goal,
we propose convolutional neural network models for matching two sentences, by
adapting the convolutional strategy in vision and speech. the proposed models
not only nicely represent the hierarchical structures of sentences with their layer-
by-layer composition and pooling, but also capture the rich matching patterns at
different levels. our models are rather generic, requiring no prior knowledge on
language, and can hence be applied to matching tasks of different nature and in
different languages. the empirical study on a variety of matching tasks demon-
strates the ef   cacy of the proposed model on a variety of matching tasks and its
superiority to competitor models.

introduction

1
matching two potentially heterogenous language objects is central to many natural language appli-
cations [28, 2]. it generalizes the conventional notion of similarity (e.g., in paraphrase identi   cation
[19]) or relevance (e.g., in information retrieval[27]), since it aims to model the correspondence be-
tween    linguistic objects    of different nature at different levels of abstractions. examples include
top-k re-ranking in machine translation (e.g., comparing the meanings of a french sentence and an
english sentence [5]) and dialogue (e.g., evaluating the appropriateness of a response to a given
utterance[26]).
natural language sentences have complicated structures, both sequential and hierarchical, that are
essential for understanding them. a successful sentence-matching algorithm therefore needs to
capture not only the internal structures of sentences but also the rich patterns in their interactions.
towards this end, we propose deep neural network models, which adapt the convolutional strategy
(proven successful on image [11] and speech [1]) to natural language. to further explore the relation
between representing sentences and matching them, we devise a novel model that can naturally
host both the hierarchical composition for sentences and the simple-to-comprehensive fusion of
matching patterns with the same convolutional architecture. our model is generic, requiring no
prior knowledge of natural language (e.g., parse tree) and putting essentially no constraints on the
matching tasks. this is part of our continuing effort1 in understanding natural language objects and
the matching between them [13, 26].

   the work is done when the    rst author worked as intern at noah   s ark lab, huawei techologies
1our project page: http://www.noahlab.com.hk/technology/learning2match.html

1

our main contributions can be summarized as follows. first, we devise novel deep convolution-
al network architectures that can naturally combine 1) the hierarchical sentence modeling through
layer-by-layer composition and pooling, and 2) the capturing of the rich matching patterns at dif-
ferent levels of abstraction; second, we perform extensive empirical study on tasks with different
scales and characteristics, and demonstrate the superior power of the proposed architectures over
competitor methods.

roadmap we start by introducing a convolution network in section 2 as the basic architecture for
sentence modeling, and how it is related to existing sentence models. based on that, in section 3,
we propose two architectures for sentence matching, with a detailed discussion of their relation. in
section 4, we brie   y discuss the learning of the proposed architectures. then in section 5, we report
our empirical study, followed by a brief discussion of related work in section 6.
2 convolutional sentence model
we start with proposing a new convolutional architecture for modeling sentences. as illustrated
in figure 1, it takes as input the embedding of words (often trained beforehand with unsupervised
methods) in the sentence aligned sequentially, and summarize the meaning of a sentence through
layers of convolution and pooling, until reaching a    xed length vectorial representation in the    nal
layer. as in most convolutional models [11, 1], we use convolution units with a local    receptive
   eld    and shared weights, but we design a large feature map to adequately model the rich structures
in the composition of words.

figure 1: the over all architecture of the convolutional sentence model. a box with dashed lines
indicates all-zero padding turned off by the gating function (see top of page 3).

convolution as shown in figure 1, the convolution in layer-1 operates on sliding windows of
words (width k1), and the convolutions in deeper layers are de   ned in a similar way. generally,with
sentence input x, the convolution unit for feature map of type-f (among f(cid:96) of them) on layer-(cid:96) is

z((cid:96),f )
i

def
= z((cid:96),f )

i

(x) =   (w((cid:96),f )  z((cid:96)   1)
i (x) =   (w((cid:96))  z((cid:96)   1)

i

i

and its matrix form is z((cid:96))

i

def
= z((cid:96))

+ b((cid:96))), where

+ b((cid:96),f )), f = 1, 2,       , f(cid:96)

(1)

i

(x) gives the output of feature map of type-f for location i in layer-(cid:96);

    z((cid:96),f )
    w((cid:96),f ) is the parameters for f on layer-(cid:96), with matrix form w((cid:96)) def
      (  ) is the activation function (e.g., sigmoid or relu [7])
      z((cid:96)   1)

denotes the segment of layer-(cid:96)   1 for the convolution at location i , while

i

= [w((cid:96),1),       , w((cid:96),f(cid:96))];

  z(0)
i = xi:i+k1   1

= [x(cid:62)
def

i , x(cid:62)

i+1,        , x(cid:62)

i+k1   1](cid:62)

concatenates the vectors for k1 (width of sliding window) words from sentence input x.

max-pooling we take a max-pooling in every two-unit window for every f, after each convolution

z((cid:96),f )
i

= max(z((cid:96)   1,f )

2i   1

, z((cid:96)   1,f )

2i

), (cid:96) = 2, 4,       .

the effects of pooling are two-fold: 1) it shrinks the size of the representation by half, thus quickly
absorbs the differences in length for sentence representation, and 2) it    lters out undesirable com-
position of words (see section 2.1 for some analysis).

2

length variability the variable length of sentences in a fairly broad range can be readily handled
with the convolution and pooling strategy. more speci   cally, we put all-zero padding vectors after
the last word of the sentence until the maximum length. to eliminate the boundary effect caused
by the great variability of sentence lengths, we add to the convolutional unit a gate which sets the
output vectors to all-zeros if the input is all zeros. for any given sentence input x, the output of
type-f    lter for location i in the (cid:96)th layer is given by
(x) = g(  z((cid:96)   1)

(2)
where g(v) = 0 if all the elements in vector v equals 0, otherwise g(v) = 1. this gate, working
with max-pooling and positive activation function (e.g., sigmoid), keeps away the artifacts from
padding in all layers. actually it creates a natural hierarchy of all-zero padding (as illustrated in
figure 1), consisting of nodes in the neural net that would not contribute in the forward process (as
in prediction) and backward propagation (as in learning).

)      (w((cid:96),f )  z((cid:96)   1)

def
= z((cid:96),f )

+ b((cid:96),f )),

z((cid:96),f )
i

i

i

i

2.1 some analysis on the convolutional architecture
the convolutional unit, when com-
bined with max-pooling, can act as
the compositional operator with lo-
cal selection mechanism as in the
recursive autoencoder [21]. figure
2 gives an example on what could
happen on the    rst two layers with
input sentence    the cat sat on
the mat   . just for illustration pur-
pose, we present a dramatic choice
of parameters (by turning off some
elements in w(1)) to make the con-
volution units focus on different seg-
ments within a 3-word window. for
example, some feature maps (group
2) give compositions for    the cat   
and    cat sat   , each being a vector. different feature maps offer a variety of compositions, with
con   dence encoded in the values (color coded in output of convolution layer in figure 2). the pool-
ing then chooses, for each composition type, between two adjacent sliding windows, e.g., between
   on the    and    the mat    for feature maps group 2 from the rightmost two sliding windows.

figure 2: the cat example, where in the convolution layer,
gray color indicates less con   dence in composition.

relation to recursive models our convolutional model differs from recurrent neural network
(id56, [15]) and recursive auto-encoder (rae, [21]) in several important ways. first, unlike
rae, it does not take a single path of word/phrase composition determined either by a separate
gating function [21], an external parser [19], or just natural sequential order [20]. instead, it takes
multiple choices of composition via a large feature map (encoded in w((cid:96),f ) for different f), and
leaves the choices to the pooling afterwards to pick the more appropriate segments(in every adjacent
two) for each composition. with any window width k(cid:96)     3, the type of composition would be much
richer than that of rae. second, our convolutional model can take supervised training and tune
the parameters for a speci   c task, a property vital to our supervised learning-to-match framework.
however, unlike recursive models [20, 21], the convolutional architecture has a    xed depth, which
bounds the level of composition it could do. for tasks like matching, this limitation can be largely
compensated with a network afterwards that can take a    global    synthesis on the learned sentence
representation.

relation to    shallow    convolutional models the proposed convolutional sentence model takes
simple architectures such as [18, 10] (essentially the same convolutional architecture as senna [6]),
which consists of a convolution layer and a max-pooling over the entire sentence for each feature
map. this type of models, with local convolutions and a global pooling, essentially do a    soft    local
template matching and is able to detect local features useful for a certain task. since the sentence-
level sequential order is inevitably lost in the global pooling, the model is incapable of modeling
more complicated structures. it is not hard to see that our convolutional model degenerates to the
senna-type architecture if we limit the number of layers to be two and set the pooling window
in   nitely large.

3

3 convolutional matching models
based on the discussion in section 2, we propose two related convolutional architectures, namely
arc-i and arc-ii), for matching two sentences.
3.1 architecture-i (arc-i)
architecture-i (arc-i), as illustrated in figure 3, takes a conventional approach: it    rst    nds
the representation of each sentence, and then compares the representation for the two sentences
with a multi-layer id88 (mlp) [3].
it is essentially the siamese architecture introduced
in [2, 11], which has been applied to different tasks as a nonlinear similarity function [23]. al-
though arc-i enjoys the    exibility brought by the convolutional sentence model, it suffers from a
drawback inherited from the siamese architecture: it defers the interaction between two sentences
(in the    nal mlp) to until their indi-
vidual representation matures (in the
convolution model), therefore runs at
the risk of losing details (e.g., a c-
ity name) important for the match-
ing task in representing the sen-
tences. in other words, in the forward
phase (prediction), the representation
of each sentence is formed without
knowledge of each other. this can-
not be adequately circumvented in
backward phase (learning), when the
convolutional model learns to extrac-
t structures informative for matching
on a population level.

figure 3: architecture-i for matching two sentences.

3.2 architecture-ii (arc-ii)
in view of the drawback of architecture-i, we propose architecture-ii (arc-ii) that is built directly
on the interaction space between two sentences. it has the desirable property of letting two sentences
meet before their own high-level representations mature, while still retaining the space for the indi-
vidual development of abstraction of each sentence. basically, in layer-1, we take sliding windows
on both sentences, and model all the possible combinations of them through    one-dimensional    (1d)
convolutions. for segment i on sx and segment j on sy , we have the feature map

z(1,f )
i,j

def
= z(1,f )

i,j

(x, y) = g(  z(0)

i,j )      (w((cid:96),f )  z(0)

i,j + b((cid:96),f )),

(3)

where   z(0)

i,j     r2k1de simply concatenates the vectors for sentence segments for sx and sy :

i,j = [x(cid:62)
  z(0)

i:i+k1   1, y(cid:62)

j:j+k1   1](cid:62).

clearly the 1d convolution preserves the location information about both segments. after that in
layer-2, it performs a 2d max-pooling in non-overlapping 2    2 windows (illustrated in figure 5)
(4)

i,j = max({z(2,f )
z(2,f )

in layer-3, we perform a 2d convolution on k3    k3 windows of output from layer-2:

2i   1,2j   1, z(2,f )

2i   1,2j, z(2,f )

2i,2j   1, z(2,f )

2i,2j }).

(5)
this could go on for more layers of 2d convolution and 2d max-pooling, analogous to that of
convolutional architecture for image input [11].

i,j + b(3,f )).

z(3,f )
i,j = g(  z(2)

i,j )      (w(3,f )  z(2)

the 2d-convolution after the    rst convolution, we obtain a low level representation of the inter-
action between the two sentences, and from then we obtain a high level representation z((cid:96))
i,j which
encodes the information from both sentences. the general two-dimensional convolution is formu-
lated as

(6)
where   z((cid:96)   1)
concatenates the corresponding vectors from its 2d receptive    eld in layer-(cid:96)   1. this
pooling has different mechanism as in the 1d case, for it selects not only among compositions on
different segments but also among different local matchings. this pooling strategy resembles the
dynamic pooling in [19] in a similarity learning context, but with two distinctions: 1) it happens on
a    xed architecture and 2) it has much richer structure than just similarity.

i,j + b((cid:96),f )), (cid:96) = 3, 5,      

i,j = g(  z((cid:96)   1)
z((cid:96))

)      (w((cid:96))  z((cid:96)   1)

i,j

i,j

4

figure 4: architecture-ii (arc-ii) of convolutional matching model

3.3 some analysis on arc-ii
order preservation both the convolution
and pooling operation in architecture-ii have
this order preserving property. generally, z((cid:96))
i,j
contains information about the words in sx
before those in z((cid:96))
i+1,j, although they may be
generated with slightly different segments in
sy , due to the 2d pooling (illustrated in fig-
ure 5). the orders is however retained in a
   conditional    sense. our experiments show that
when arc-ii is trained on the (sx , sy ,   sy )
triples where   sy randomly shuf   es the word-
s in sy , it consistently gains some ability of
   nding the correct sy in the usual contrastive
negative sampling setting, which however does
not happen with arc-i.
model generality
it is not hard to show that arc-ii actually subsumes arc-i as a special case.
indeed, in arc-ii if we choose (by turning off some parameters in w((cid:96),  )) to keep the representa-
tions of the two sentences separated until the    nal mlp, arc-ii can actually act fully like arc-i,
as illustrated in figure 6. more speci   cally, if we let the feature maps in the    rst convolution layer
to be either devoted to sx or devoted to sy (instead of taking both as in general case), the output
of each segment-pair is naturally divided into two corresponding groups. as a result, the output for
each    lter f, denoted z(1,f )
1:n,1:n (n is the number of sliding windows), will be of rank-one, possessing
essentially the same information as the result of the    rst convolution layer in arc-i. clearly the 2d
pooling that follows will reduce to 1d pooling, with this separateness preserved. if we further limit
the parameters in the second convolution units (more speci   cally w(2,f )) to those for sx and sy ,
we can ensure the individual development of different levels of abstraction on each side, and fully
recover the functionality of arc-i.

figure 5: order preserving in 2d-pooling.

figure 6: arc-i as a special case of arc-ii. better viewed in color.

5

as suggested by the order-preserving property and the generality of arc-ii, this architecture offers
not only the capability but also the inductive bias for the individual development of internal abstrac-
tion on each sentence, despite the fact that it is built on the interaction between two sentences. as
a result, arc-ii can naturally blend two seemingly diverging processes: 1) the successive compo-
sition within each sentence, and 2) the extraction and fusion of matching patterns between them,
hence is powerful for matching linguistic objects with rich structures. this intuition is veri   ed by
the superior performance of arc-ii in experiments (section 5) on different matching tasks.

4 training
we employ a discriminative training strategy with a large margin objective. suppose that we are
given the following triples (x, y+, y   ) from the oracle, with x matched with y+ better than with
y   . we have the following ranking-based loss as objective:
   
;   ) = max(0, 1 + s(x, y

)     s(x, y+)),

e(x, y+, y

   

where s(x, y) is predicted matching score for (x, y), and    includes the parameters for convolution
layers and those for the mlp. the optimization is relatively straightforward for both architectures
with the standard back-propagation. the gating function (see section 2) can be easily adopted into
the gradient by discounting the contribution from convolution units that have been turned off by
the gating function.
in other words, we use stochastic id119 for the optimization of
models. all the proposed models perform better with mini-batch (100     200 in sizes) which can
be easily parallelized on single machine with multi-cores. for id173, we    nd that for both
architectures, early stopping [16] is enough for models with medium size and large training sets
(with over 500k instances). for small datasets (less than 10k training instances) however, we have
to combine early stopping and dropout [8] to deal with the serious over   tting problem.
we use 50-dimensional id27 trained with the id97 [14]: the embedding for english
words (section 5.2 & 5.4) is learnt on wikipedia (   1b words), while that for chinese words (section
5.3) is learnt on weibo data (   300m words). our other experiments (results omitted here) suggest
that    ne-tuning the id27 can further improve the performances of all models, at the cost
of longer training. we vary the maximum length of words for different tasks to cope with its longest
sentence. we use 3-word window throughout all experiments2, but test various numbers of feature
maps (typically from 200 to 500), for optimal performance. arc-ii models for all tasks have eight
layers (three for convolution, three for pooling, and two for mlp), while arc-i performs better
with less layers (two for convolution, two for pooling, and two for mlp) and more hidden nodes.
we use relu [7] as the activation function for all of models (convolution and mlp), which yields
comparable or better results to sigmoid-like functions, but converges faster.
5 experiments
we report the performance of the proposed models on three matching tasks of different nature, and
compare it with that of other competitor models. among them, the    rst two tasks (namely, sentence
completion and tweet-response matching) are about matching of language objects of heterogenous
natures, while the third one (paraphrase identi   cation) is a natural example of matching homoge-
neous objects. moreover, the three tasks involve two languages, different types of matching, and
distinctive writing styles, proving the broad applicability of the proposed models.
5.1 competitor methods

    wordembed: we    rst represent each short-text as the sum of the embedding of the
words it contains. the matching score of two short-texts are calculated with an mlp with
the embedding of the two documents as input;
    deepmatch: we take the matching model in [13] and train it on our datasets with 3
    urae+mlp: we use the unfolding recursive autoencoder [19]3 to get a 100-
dimensional vector representation of each sentence, and put an mlp on the top as in
wordembed;
    senna+mlp/sim: we use the senna-type sentence model for sentence representation;

hidden layers and 1,000 hidden nodes in the    rst hidden layer;

2our other experiments suggest that the performance can be further increased with wider windows.
3code from: http://nlp.stanford.edu/  socherr/classifyparaphrases.zip

6

    senmlp: we take the whole sentence as input (with id27 aligned sequential-

ly), and use an mlp to obtain the score of coherence.

all the competitor models are trained on the same training set as the proposed models, and we report
the best test performance over different choices of models (e.g., the number and size of hidden layers
in mlp).

5.2 experiment i: sentence completion
this is an arti   cial task designed to elucidate how different matching models can capture the cor-
respondence between two clauses within a sentence. basically, we take a sentence from reuter-
s [12]with two    balanced    clauses (with 8    28 words) divided by one comma, and use the    rst
clause as sx and the second as sy . the task is then to recover the original second clause for any
given    rst clause. the matching here is considered heterogeneous since the relation between the
two is nonsymmetrical on both lexical and semantic levels. we deliberately make the task harder
by using negative second clauses similar to the original ones4, both in training and testing. one
representative example is given as follows:
sx: although the state has only four votes in the electoral college,
s+
y : its loss would be a symbolic blow to republican presidential candi
s   
y : but it failed to garner enough votes to override an expected veto by

date bob dole.

president clinton.

all models are trained on 3 million triples (from 600k positive
pairs), and tested on 50k positive pairs, each accompanied by
four negatives, with results shown in table 1. the two pro-
posed models get nearly half of the cases right5, with large margin
table 1: sentence completion.
over other sentence models and models without explicit sequence
modeling. arc-ii outperforms arc-i signi   cantly, showing the power of joint modeling of match-
ing and sentence meaning. as another convolutional model, senna+mlp performs fairly well
on this task, although still running behind the proposed convolutional architectures since it is too
shallow to adequately model the sentence. it is a bit surprising that urae comes last on this task,
which might be caused by the facts that 1) the representation model (including word-embedding) is
not trained on reuters, and 2) the split-sentence setting hurts the parsing, which is vital to the quality
of learned sentence representation.

model
random guess
deepmatch
wordembed
senmlp
senna+mlp
urae+mlp
arc-i
arc-ii

p@1(%)
20.00
32.5
37.63
36.14
41.56
25.76
47.51
49.62

5.3 experiment ii: matching a response to a tweet
we trained our model with 4.5 million original (tweet, response)
pairs collected from weibo, a major chinese microblog service
[26]. compared to experiment i, the writing style is obviously
more free and informal. for each positive pair, we    nd ten ran-
dom responses as negative examples, rendering 45 million triples
for training. one example (translated to english) is given below,
y the original response, and s   
with sx standing for the tweet, s+
y
the randomly selected response: sx: damn, i have to work overtime
this weekend!
s+
y : try to have some rest buddy.
s   
y : it is hard to    nd a job, better start polishing your resume.
we hold out 300k original (tweet, response) pairs and test the matching model on their ability to
pick the original response from four random negatives, with results reported in table 2. this task
is slightly easier than experiment i , with more training instances and purely random negatives. it
requires less about the grammatical rigor but more on detailed modeling of loose and local matching
patterns (e.g., work-overtime    rest). again arc-ii beats other models with large margins,
while two convolutional sentence models arc-i and senna+mlp come next.

model
random guess
deepmatch
wordembed
senmlp
senna+mlp
arc-i
arc-ii

p@1(%)
20.00
49.85
54,31
52.22
56.48
59.18
61.95

table 2: tweet matching.

4we select from a random set the clauses that have 0.7   0.8 cosine similarity with the original. the dataset

and more information can be found from http://www.noahlab.com.hk/technology/learning2match.html

5actually arc-ii can achieve 74+% accuracy with random negatives.

7

table 3: the results on paraphrase.

f1(%)
77.90
80.5
80.49
79.7
79.5
80.27
80.91

acc. (%)
66.5
70.6
68.7
68.4
68.4
69.6
69.9

model
baseline
rus et al. (2008)
wordembed
senna+mlp
senmlp
arc-i
arc-ii

5.4 experiment iii: paraphrase identi   cation
paraphrase identi   cation aims to determine whether two sentences have the same mean-
ing, a problem considered a touchstone of natural language understanding. this experiment
is included to test our methods on matching homogenous
objects. here we use the benchmark msrp dataset [17],
which contains 4,076 instances for training and 1,725 for
test. we use all the training instances and report the test
performance from early stopping. as stated earlier, our
model is not specially tailored for modeling synonymy,
and generally requires    100k instances to work favor-
ably. nevertheless, our generic matching models still
manage to perform reasonably well, achieving an accura-
cy and f1 score close to the best performer in 2008 based
on hand-crafted features [17], but still signi   cantly low-
er than the state-of-the-art (76.8%/83.6%), achieved with
unfolding-rae and other features designed for this task [19].
5.5 discussions
arc-ii outperforms others signi   cantly when the training instances are relatively abundant (as in
experiment i & ii). its superiority over arc-i, however, is less salient when the sentences have deep
grammatical structures and the matching relies less on the local matching patterns, as in experiment-
i. this therefore raises the interesting question about how to balance the representation of matching
and the representations of objects, and whether we can guide the learning process through something
like curriculum learning [4].
as another important observation, convolutional models (arc-i & ii, senna+mlp) perform
favorably over bag-of-words models, indicating the importance of utilizing sequential structures in
understanding and matching sentences. quite interestingly, as shown by our other experiments,
arc-i and arc-ii trained purely with random negatives automatically gain some ability in telling
whether the words in a given sentence are in right sequential order (with around 60% accuracy for
both). it is therefore a bit surprising that an auxiliary task on identifying the correctness of word
order in the response does not enhance the ability of the model on the original matching tasks.
we noticed that simple sum of embedding learned via id97 [14] yields reasonably good results
on all three tasks. we hypothesize that the id97 embedding is trained in such a way that the
vector summation can act as a simple composition, and hence retains a fair amount of meaning in
the short text segment. this is in contrast with other bag-of-words models like deepmatch [13].
6 related work
matching structured objects rarely goes beyond estimating the similarity of objects in the same do-
main [23, 24, 19], with few exceptions like [2, 18]. when dealing with language objects, most
methods still focus on seeking vectorial representations in a common latent space, and calculating
the matching score with inner product[18, 25]. few work has been done on building a deep architec-
ture on the interaction space for texts-pairs, but it is largely based on a bag-of-words representation
of text [13].
our models are related to the long thread of work on sentence representation. aside from the models
with recursive nature [15, 21, 19] (as discussed in section 2.1), it is fairly common practice to use
the sum of word-embedding to represent a short-text, mostly for classi   cation [22]. there is very
little work on convolutional modeling of language. in addition to [6, 18], there is a very recent model
on sentence representation with dynamic convolutional neural network [9]. this work relies heavily
on a carefully designed pooling strategy to handle the variable length of sentence with a relatively
small feature map, tailored for classi   cation problems with modest sizes.
7 conclusion
we propose deep convolutional architectures for matching natural language sentences, which can
nicely combine the hierarchical modeling of individual sentences and the patterns of their matchings.
empirical study shows our models can outperform competitors on a variety of matching tasks.

acknowledgments: b. hu and q. chen are supported in part by national natural science foundation of
china 61173075. z. lu and h. li are supported in part by china national 973 project 2014cb340301.

8

references
[1] o. abdel-hamid, a. mohamed, h. jiang, and g. penn. applying convolutional neural networks concepts

to hybrid nn-id48 model for id103. in proceedings of icassp, 2012.

[2] b. antoine, x. glorot, j. weston, and y. bengio. a semantic matching energy function for learning with

multi-relational data. machine learning, 94(2):233   259, 2014.

[3] y. bengio. learning deep architectures for ai. found. trends mach. learn., 2(1):1   127, 2009.
[4] y. bengio, j. louradourand, r. collobert, and j. weston. curriculum learning. in proceedings of icml,

2009.

[5] p. f. brown, s. a. d. pietra, v. j. d. pietra, and r. l. mercer. the mathematics of statistical machine

translation: parameter estimation. computational linguistics, 19(2):263   311, 1993.

[6] r. collobert, j. weston, l. bottou, m. karlen, k. kavukcuoglu, and p. kuksa. natural language process-

ing (almost) from scratch. journal of machine learning research, 12:2493   2537, 2011.

[7] g. e. dahl, t. n. sainath, and g. e. hinton. improving deep neural networks for lvcsr using recti   ed

linear units and dropout. in proceedings of icassp, 2013.

[8] g. e. hinton, n. srivastava, a. krizhevsky, i. sutskever, and r. salakhutdinov. improving neural net-

works by preventing co-adaptation of feature detectors. corr, abs/1207.0580, 2012.

[9] n. kalchbrenner, e. grefenstette, and p. blunsom. a convolutional neural network for modelling sen-

tences. in proceedings of acl, baltimore and usa, 2014.

[10] y. kim. convolutional neural networks for sentence classi   cation. in proceedings of emnlp, 2014.
[11] y. lecun and y. bengio. convolutional networks for images, speech and time series. the handbook of

brain theory and neural networks, 3361, 1995.

[12] y. lewis, david d.and yang, t. g. rose, and f. li. rcv1: a new benchmark collection for text catego-

rization research. journal of machine learning research, 5:361   397, 2004.

[13] z. lu and h. li. a deep architecture for matching short texts. in advances in nips, 2013.
[14] t. mikolov, k. chen, g. corrado, and j. dean. ef   cient estimation of word representations in vector

space. corr, abs/1301.3781, 2013.

[15] t. mikolov and m. kara     at. recurrent neural network based language model. in proceedings of inter-

speech, 2010.

[16] c. rich, l. steve, and g. lee. over   tting in neural nets: id26, conjugate gradient, and early

stopping. in advances in nips, 2000.

[17] v. rus, p. m. mccarthy, m. c. lintean, d. s. mcnamara, and a. c. graesser. paraphrase identi   cation

with lexico-syntactic graph subsumption. in proceedings of flairs conference, 2008.

[18] y. shen, x. he, j. gao, l. deng, and g. mesnil. learning semantic representations using convolutional

neural networks for web search. in proceedings of www, 2014.

[19] r. socher, e. h. huang, and a. y. ng. dynamic pooling and unfolding recursive autoencoders for

paraphrase detection. in advances in nips, 2011.

[20] r. socher, c. c. lin, a. y. ng, and c. d. manning. parsing natural scenes and natural language with

id56s. in proceedings of icml, 2011.

[21] r. socher, j. pennington, e. h. huang, a. y. ng, and c. d. manning. semi-supervised recursive autoen-

coders for predicting sentiment distributions. in proceedings of emnlp, 2011.

[22] y. song and d. roth. on dataless hierarchical text classi   cation. in proceedings of aaai, 2014.
[23] y. sun, x. wang, and x. tang. hybrid deep learning for face veri   cation. in proceedings of iccv, 2013.
[24] s. v. n. vishwanathan, n. n. schraudolph, r. kondor, and k. m. borgwardt. graph kernels. journal of

machine learning research(jmlr), 11:1201   1242, 2010.

[25] b. wang, x. wang, c. sun, b. liu, and l. sun. modeling semantic relevance for question-answer pairs

in web social communities. in proceedings of acl, 2010.

[26] h. wang, z. lu, h. li, and e. chen. a dataset for research on short-text conversations. in proceedings

of emnlp, seattle, washington, usa, 2013.

[27] w. wu, z. lu, and h. li. learning bilinear model for matching queries and documents. the journal of

machine learning research, 14(1):2519   2548, 2013.

[28] x. xue, j. jiwoon, and c. w. bruce. retrieval models for question and answer archives. in proceedings

of sigir    08, new york, ny, usa, 2008.

9

