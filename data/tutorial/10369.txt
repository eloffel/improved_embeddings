visualizing and understanding neural models in nlp

jiwei li1, xinlei chen2, eduard hovy2 and dan jurafsky1

1computer science department, stanford university, stanford, ca 94305, usa

2language technology institute, carnegie mellon university, pittsburgh, pa 15213, usa

{jiweil,jurafsky}@stanford.edu

{xinleic,ehovy}@andrew.cmu.edu

6
1
0
2

 

n
a
j
 

8

 
 
]
l
c
.
s
c
[
 
 

2
v
6
6
0
1
0

.

6
0
5
1
:
v
i
x
r
a

abstract

while neural networks have been success-
fully applied to many nlp tasks the re-
sulting vector-based models are very dif   -
cult to interpret. for example it   s not clear
how they achieve compositionality, build-
ing sentence meaning from the meanings
of words and phrases.
in this paper we
describe strategies for visualizing composi-
tionality in neural models for nlp, inspired
by similar work in id161. we
   rst plot unit values to visualize composi-
tionality of negation, intensi   cation, and
concessive clauses, allowing us to see well-
known markedness asymmetries in nega-
tion. we then introduce methods for visu-
alizing a unit   s salience, the amount that it
contributes to the    nal composed meaning
from    rst-order derivatives. our general-
purpose methods may have wide applica-
tions for understanding compositionality
and other semantic properties of deep net-
works.
introduction

1
neural models match or outperform the perfor-
mance of other state-of-the-art systems on a va-
riety of nlp tasks. yet unlike traditional feature-
based classi   ers that assign and optimize weights
to varieties of human interpretable features (parts-
of-speech, named entities, word shapes, syntactic
parse features etc) the behavior of deep learning
models is much less easily interpreted. deep learn-
ing models mainly operate on id27s
(low-dimensional, continuous, real-valued vectors)
through multi-layer neural architectures, each layer
of which is characterized as an array of hidden neu-
ron units. it is unclear how deep learning models
deal with composition, implementing functions like
negation or intensi   cation, or combining meaning
from different parts of the sentence,    ltering away

the informational chaff from the wheat, to build
sentence meaning.

in this paper, we explore multiple strategies to
interpret meaning composition in neural models.
we employ traditional methods like representation
plotting, and introduce simple strategies for measur-
ing how much a neural unit contributes to meaning
composition, its    salience    or importance using    rst
derivatives.

visualization techniques/models represented in
this work shed important light on how neural mod-
els work: for example, we illustrate that lstm   s
success is due to its ability in maintaining a much
sharper focus on the important key words than other
models; composition in multiple clauses works
competitively, and that the models are able to cap-
ture negative asymmetry, an important property
of semantic compositionally in natural language
understanding; there is sharp dimensional local-
ity, with certain dimensions marking negation and
quanti   cation in a manner that was surprisingly
localist. though our attempts only touch super   -
cial points in neural models, and each method has
its pros and cons, together they may offer some
insights into the behaviors of neural models in lan-
guage based tasks, marking one initial step toward
understanding how they achieve meaning composi-
tion in natural language processing.

the next section describes some visualization
models in vision and nlp that have inspired this
work. we describe datasets and the adopted neu-
ral models in section 3. different visualization
strategies and correspondent analytical results are
presented separately in section 4,5,6, followed by
a brief conclusion.

2 a brief review of neural visualization

similarity is commonly visualized graphically, gen-
erally by projecting the embedding space into two
dimensions and observing that similar words tend
to be clustered together (e.g., elman (1989), ji

and eisenstein (2014), faruqui and dyer (2014)).
(karpathy et al., 2015) attempts to interpret recur-
rent neural models from a statical point of view
and does deeply touch compositionally of mean-
ings. other relevant attempts include (fyshe et al.,
2015; faruqui et al., 2015).

methods for interpreting and visualizing neu-
ral models have been much more signi   cantly ex-
plored in vision, especially for convolutional neu-
ral networks (id98s or convnets) (krizhevsky et
al., 2012), multi-layer neural networks in which the
original matrix of image pixels is convolved and
pooled as it is passed on to hidden layers. convnet
visualizing techniques consist mainly in mapping
the different layers of the network (or other fea-
tures like sift (lowe, 2004) and hog (dalal and
triggs, 2005)) back to the initial image input, thus
capturing the human-interpretable information they
represent in the input, and how units in these layers
contribute to any    nal decisions (simonyan et al.,
2013; mahendran and vedaldi, 2014; nguyen et al.,
2014; szegedy et al., 2013; girshick et al., 2014;
zeiler and fergus, 2014). such methods include:
(1) inversion: inverting the representations by
training an additional model to project outputs from
different neural levels back to the initial input im-
ages (mahendran and vedaldi, 2014; vondrick et
al., 2013; weinzaepfel et al., 2011). the intuition
behind reconstruction is that the pixels that are re-
constructable from the current representations are
the content of the representation. the inverting
algorithms allow the current representation to align
with corresponding parts of the original images.

(2) back-propagation (erhan et al., 2009; si-
monyan et al., 2013) and deconvolutional net-
works (zeiler and fergus, 2014): errors are back
propagated from output layers to each intermedi-
ate layer and    nally to the original image inputs.
deconvolutional networks work in a similar way
by projecting outputs back to initial inputs layer by
layer, each layer associated with one supervised
model for projecting upper ones to lower ones
these strategies make it possible to spot active
regions or ones that contribute the most to the    nal
classi   cation decision.

(3) generation: this group of work generates
images in a speci   c class from a sketch guided by
already trained neural models (szegedy et al., 2013;
nguyen et al., 2014). models begin with an image
whose pixels are randomly initialized and mutated
at each step. the speci   c layers that are activated
at different stages of image construction can help

in interpretation.

while the above strategies inspire the work we
present in this paper, there are fundamental dif-
ferences between vision and nlp. in nlp words
function as basic units, and hence (word) vectors
rather than single pixels are the basic units. se-
quences of words (e.g., phrases and sentences) are
also presented in a more structured way than ar-
rangements of pixels. in parallel to our research,
independent researches (karpathy et al., 2015) have
been conducted to explore similar direction from
an error-analysis point of view, by analyzing pre-
dictions and errors from a recurrent neural models.
other distantly relevant works include: murphy et
al. (2012; fyshe et al. (2015) used an manual task
to quantify the interpretability of semantic dimen-
sions by presetting human users with a list of words
and ask them to choose the one that does not belong
to the list. faruqui et al. (2015). similar strategy
is adopted in (faruqui et al., 2015) by extracting
top-ranked words in each vector dimension.

3 datasets and neural models

we explored two datasets on which neural models
are trained, one of which is of relatively small scale
and the other of large scale.

3.1 stanford sentiment treebank
stanford sentiment treebank is a benchmark
dataset widely used for neural model evaluations.
the dataset contains gold-standard sentiment labels
for every parse tree constituent, from sentences to
phrases to individual words, for 215,154 phrases
in 11,855 sentences. the task is to perform both
   ne-grained (very positive, positive, neutral, nega-
tive and very negative) and coarse-grained (positive
vs negative) classi   cation at both the phrase and
sentence level. for more details about the dataset,
please refer to socher et al. (2013).

while many studies on this dataset use recursive
parse-tree models, in this work we employ only
standard sequence models (id56s and lstms)
since these are the most widely used current neu-
ral models, and sequential visualization is more
straightforward. we therefore    rst transform each
parse tree node to a sequence of tokens. the
sequence is    rst mapped to a phrase/sentence
representation and fed into a softmax classi   er.
phrase/sentence representations are built with the
following three models: standard recurrent se-
quence with tanh id180, lstms and

bidirectional lstms. for details about the three
models, please refer to appendix.
training adagrad with mini-batch was used for
training, with parameters (l2 penalty, learning rate,
mini batch size) tuned on the development set. the
number of iterations is treated as a variable to tune
and parameters are harvested based on the best
performance on the dev set. the number of dimen-
sions for the word and hidden layer are set to 60
with 0.1 dropout rate. parameters are tuned on the
dev set. the standard recurrent model achieves
0.429 (   ne grained) and 0.850 (coarse grained)
accuracy at the sentence level; lstm achieves
0.469 and 0.870, and bidirectional lstm 0.488
and 0.878, respectively.

3.2 sequence-to-sequence models
id195 are neural models aiming at generating
a sequence of output texts given inputs. theoret-
ically, id195 models can be adapted to nlp
tasks that can be formalized as predicting outputs
given inputs and serve for different purposes due
to different inputs and outputs, e.g., machine trans-
lation where inputs correspond to source sentences
and outputs to target sentences (sutskever et al.,
2014; luong et al., 2014); conversational response
generation if inputs correspond to messages and
outputs correspond to responses (vinyals and le,
2015; li et al., 2015). id195 need to be trained
on massive amount of data for implicitly semantic
and syntactic relations between pairs to be learned.
id195 models map an input sequence to
a vector representation using lstm models and
then sequentially predicts tokens based on the pre-
obtained representation. the model de   nes a dis-
tribution over outputs (y) and sequentially predicts
tokens given inputs (x) using a softmax function.

p (y |x) =

=

ny(cid:89)
ny(cid:89)

t=1

t=1

(cid:80)

p(yt|x1, x2, ..., xt, y1, y2, ..., yt   1)

exp(f (ht   1, eyt))
y(cid:48) exp(f (ht   1, ey(cid:48)))

where f (ht   1, eyt) denotes the activation function
between ht   1 and eyt, where ht   1 is the represen-
tation output from the lstm at time t     1. for
each time step in word prediction, id195 mod-
els combine the current token with previously built
embeddings for next-step word prediction.

for easy visualization purposes, we turn to the
most straightforward task   autoencoder    where

inputs and outputs are identical. the goal of an
autoencoder is to reconstruct inputs from the pre-
obtained representation. we would like to see how
individual input tokens affect the overall sentence
representation and each of the tokens to predict in
outputs. we trained the auto-encoder on a subset
of wmt   14 corpus containing 4 million english
sentences with an average length of 22.5 words. we
followed training protocols described in (sutskever
et al., 2014).

4 representation plotting

we begin with simple plots of representations to
shed light on local compositions using stanford
sentiment treebank.

local composition figure 1 shows a 60d heat-
map vector for the representation of selected
words/phrases/sentences, with an emphasis on ex-
tent modi   cations (adverbial and adjectival) and
negation. embeddings for phrases or sentences are
attained by composing word representations from
the pretrained model.

the intensi   cation part of figure 1 shows sug-
gestive patterns where values for a few dimensions
are strengthened by modi   ers like    a lot    (the red
bar in the    rst example)    so much    (the red bar in
the second example), and    incredibly   . though the
patterns for negations are not as clear, there is still a
consistent reversal for some dimensions, visible as
a shift between blue and red for dimensions boxed
on the left.

we then visualize words and phrases using t-
sne (van der maaten and hinton, 2008) in figure 2,
deliberately adding in some random words for com-
parative purposes. as can be seen, neural models
nicely learn the properties of local composition-
ally, id91 negation+positive words (   not nice   ,
   not good   ) together with negative words. note also
the asymmetry of negation:    not bad    is clustered
more with the negative than the positive words (as
shown both in figure 1 and 2). this asymmetry
has been widely discussed in linguistics, for exam-
ple as arising from markedness, since    good    is the
unmarked direction of the scale (clark and clark,
1977; horn, 1989; fraenkel and schul, 2008). this
suggests that although the model does seem to fo-
cus on certain units for negation in figure 1, the
neural model is not just learning to apply a    xed
transform for    not    but is able to capture the subtle
differences in the composition of different words.

figure 2: id167 visualization on latent representations for modi   cations and negations.

figure 4: id167 visualization for clause composition.

concessive sentences
in concessive sentences,
two clauses have opposite polarities, usually re-
lated by a contrary-to-expectation implicature. we
plot evolving representations over time for two con-
cessives in figure 3. the plots suggest:

1. for tasks like id31 whose goal
is to predict a speci   c semantic dimension (as op-
posed to general tasks like language model word
prediction), too large a dimensionality leads to
many dimensions non-functional (with values close
to 0), causing two sentences of opposite sentiment
to differ only in a few dimensions. this may ex-
plain why more dimensions don   t necessarily lead
to better performance on such tasks (for example,
as reported in (socher et al., 2013), optimal perfor-
mance is achieved when word dimensionality is set
to between 25 and 35).

2. both sentences contain two clauses connected
by the conjunction    though   . such two-clause sen-
tences might either work collaboratively    models

would remember the word    though    and make the
second clause share the same sentiment orienta-
tion as    rst   or competitively, with the stronger
one dominating. the region within dotted line in
figure 3(a) favors the second assumption: the dif-
ference between the two sentences is diluted when
the    nal words (   interesting    and    boring   ) appear.

clause composition in figure 4 we explore this
clause composition in more detail. representations
move closer to the negative sentiment region by
adding negative clauses like    although it had bad
acting    or    but it is too long    to the end of a simply
positive    i like the movie   . by contrast, adding
a concessive clause to a negative clause does not
move toward the positive;    i hate x but ...    is still
very negative, not that different than    i hate x   .
this difference again suggests the model is able
to capture negative asymmetry (clark and clark,
1977; horn, 1989; fraenkel and schul, 2008).

figure 5: saliency heatmap for for    i hate the movie .    each row corresponds to saliency scores for the correspondent word
representation with each grid representing each dimension.

figure 6: saliency heatmap for    i hate the movie i saw last night .    .

figure 7: saliency heatmap for    i hate the movie though the plot is interesting .    .

5 first-derivative saliency

in this section, we describe another strategy which
is is inspired by the back-propagation strategy in
vision (erhan et al., 2009; simonyan et al., 2013).
it measures how much each input unit contributes
to the    nal decision, which can be approximated
by    rst derivatives.

more formally, for a classi   cation model, an
input e is associated with a gold-standard class
label c.
(depending on the nlp task, an input
could be the embedding for a word or a sequence

of words, while labels could be pos tags, sentiment
labels, the next word index to predict etc.) given
embeddings e for input words with the associated
gold class label c, the trained model associates
the pair (e, c) with a score sc(e). the goal is to
decide which units of e make the most signi   cant
contribution to sc(e), and thus the decision, the
choice of class label c.

in the case of deep neural models, the class score
sc(e) is a highly non-linear function. we approxi-
mate sc(e) with a linear function of e by computing

intensi   cation

negation

figure 1: visualizing intensi   cation and negation. each ver-
tical bar shows the value of one dimension in the    nal sen-
tence/phrase representation after compositions. embeddings
for phrases or sentences are attained by composing word rep-
resentations from the pretrained model.

the    rst-order taylor expansion

sc(e)     w(e)t e + b

(1)

where w(e) is the derivative of sc with respect to
the embedding e.

w(e) =

   (sc)

   e

|e

(2)

the magnitude (absolute value) of the derivative in-
dicates the sensitiveness of the    nal decision to the
change in one particular dimension, telling us how
much one speci   c dimension of the word embed-
ding contributes to the    nal decision. the saliency
score is given by

s(e) = |w(e)|

(3)

5.1 results on stanford sentiment treebank
we    rst illustrate results on stanford treebank. we
plot in figures 5, 6 and 7 the saliency scores (the

figure 3: representations over time from lstms. each col-
umn corresponds to outputs from lstm at each time-step
(representations obtained after combining current word em-
bedding with previous build embeddings). each grid from the
column corresponds to each dimension of current time-step
representation. the last rows correspond to absolute differ-
ences for each time step between two sequences.

absolute value of the derivative of the id168
with respect to each dimension of all word inputs)
for three sentences, applying the trained model to
each sentence. each row corresponds to saliency
score for the correspondent word representation
with each grid representing each dimension. the
examples are based on the clear sentiment indicator
   hate    that lends them all negative sentiment.

   i hate the movie    all three models assign high
saliency to    hate    and dampen the in   uence of
other tokens. lstm offers a clearer focus on
   hate    than the standard recurrent model, but the
bi-directional lstm shows the clearest focus, at-
taching almost zero emphasis on words other than
   hate   . this is presumably due to the gates struc-
tures in lstms and bi-lstms that controls infor-
mation    ow, making these architectures better at
   ltering out less relevant information.

figure 8: variance visualization.

   i hate the movie that i saw last night    all
three models assign the correct sentiment. the
simple recurrent models again do poorly at    lter-
ing out irrelevant information, assigning too much
salience to words unrelated to sentiment. however
none of the models suffer from the gradient van-
ishing problems despite this sentence being longer;
the salience of    hate    still stands out after 7-8 fol-
lowing convolutional operations.

   i hate the movie though the plot is interesting   
the simple recurrent model emphasizes only the
second clause    the plot is interesting   , assigning
no credit to the    rst clause    i hate the movie   . this
might seem to be caused by a vanishing gradient,
yet the model correctly classi   es the sentence as
very negative, suggesting that it is successfully
incorporating information from the    rst negative
clause. we separately tested the individual clause
   though the plot is interesting   . the standard recur-
rent model con   dently labels it as positive. thus
despite the lower saliency scores for words in the
   rst clause, the simple recurrent system manages
to rely on that clause and downplay the information
from the latter positive clause   despite the higher
saliency scores of the later words. this illustrates
a limitation of saliency visualization.    rst-order
derivatives don   t capture all the information we
would like to visualize, perhaps because they are

only a rough approximate to individual contribu-
tions and might not suf   ce to deal with highly non-
linear cases. by contrast, the lstm emphasizes the
   rst clause, sharply dampening the in   uence from
the second clause, while the bi-lstm focuses on
both    hate the movie    and    plot is interesting   .

5.2 results on sequence-to-sequence

autoencoder

figure 9 represents saliency heatmap for auto-
encoder in terms of predicting correspondent to-
ken at each time step. we compute    rst-derivatives
for each preceding word through back-propagation
as decoding goes on. each grid corresponds to
magnitude of average saliency value for each 1000-
dimensional word vector. the heatmaps give clear
overview about the behavior of neural models dur-
ing decoding. observations can be summarized as
follows:

1.

for each time step of word prediction,
id195 models manage to link word to predict
back to correspondent region at the inputs (automat-
ically learn alignments), e.g., input region centering
around token    hate    exerts more impact when to-
ken    hate    is to be predicted, similar cases with
tokens    movie   ,    plot    and    boring   .

2. neural decoding combines the previously
built representation with the word predicted at the
current step. as decoding proceeds, the in   uence

ond, surprisingly easy and direct way to visualize
important indicators. we    rst compute the average
of the id27s for all the words within
the sentences. the measure of salience or in   uence
for a word is its deviation from this average. the
idea is that during training, models would learn
to render indicators different from non-indicator
words, enabling them to stand out even after many
layers of computation.
figure 8 shows a map of variance; each grid cor-
responds to the value of ||ei,j     1
ei(cid:48)j||2
where ei,j denotes the value for j th dimension of
word i and n denotes the number of token within
the sentences.

(cid:80)

i(cid:48)   ns

ns

as the    gure shows, the variance-based salience
measure also does a good job of emphasizing the
relevant sentiment words. the model does have
shortcomings: (1) it can only be used in to scenar-
ios where id27s are parameters to learn
(2) it   s clear how well the model is able to visualize
local compositionality.

7 conclusion

in this paper, we offer several methods to help
visualize and interpret neural models, to understand
how neural models are able to compose meanings,
demonstrating asymmetries of negation and explain
some aspects of the strong performance of lstms
at these tasks.

though our attempts only touch super   cial
points in neural models, and each method has its
pros and cons, together they may offer some in-
sights into the behaviors of neural models in lan-
guage based tasks, marking one initial step toward
understanding how they achieve meaning compo-
sition in natural language processing. our future
work includes using results of the visualization be
used to perform error analysis, and understanding
strengths limitations of different neural models.

references
herbert h. clark and eve v. clark. 1977. psychology
and language: an introduction to psycholinguistics.
harcourt brace jovanovich.

navneet dalal and bill triggs. 2005. histograms of
in com-
oriented gradients for human detection.
puter vision and pattern recognition, 2005. cvpr
2005. ieee computer society conference on, vol-
ume 1, pages 886   893. ieee.

jeffrey l. elman. 1989. representation and structure
in connectionist models. technical report 8903,

figure 9: saliency heatmap for id195 auto-encoder in
terms of predicting correspondent token at each time step.

of the initial input on decoding (i.e., tokens in
source sentences) gradually diminishes as more
previously-predicted words are encoded in the vec-
tor representations. meanwhile, the in   uence of
language model gradually dominates: when word
   boring    is to be predicted, models attach more
weight to earlier predicted tokens    plot    and    is   
but less to correspondent regions in the inputs, i.e.,
the word    boring    in inputs.

6 average and variance

for settings where id27s are treated as
parameters to optimize from scratch (as opposed to
using pre-trained embeddings), we propose a sec-

center for research in language, university of cal-
ifornia, san diego.

dumitru erhan, yoshua bengio, aaron courville, and
pascal vincent. 2009. visualizing higher-layer fea-
tures of a deep network. dept. iro, universit  e de
montr  eal, tech. rep.

manaal faruqui and chris dyer. 2014.

improving
vector space word representations using multilingual
correlation. in proceedings of eacl, volume 2014.

manaal faruqui, yulia tsvetkov, dani yogatama, chris
dyer, and noah smith. 2015. sparse overcom-
plete word vector representations. arxiv preprint
arxiv:1506.02004.

tamar fraenkel and yaacov schul. 2008. the mean-
ing of negated adjectives. intercultural pragmatics,
5(4):517   540.

alona fyshe, leila wehbe, partha p talukdar, brian
murphy, and tom m mitchell. 2015. a compo-
sitional and interpretable semantic space. proceed-
ings of the naacl-hlt, denver, usa.

ross girshick, jeff donahue, trevor darrell, and jiten-
dra malik. 2014. rich feature hierarchies for accu-
rate id164 and semantic segmentation. in
id161 and pattern recognition (cvpr),
2014 ieee conference on, pages 580   587. ieee.

sepp hochreiter and j  urgen schmidhuber.

1997.
neural computation,

long short-term memory.
9(8):1735   1780.

laurence r. horn. 1989. a natural history of negation,
volume 960. university of chicago press chicago.

yangfeng ji and jacob eisenstein. 2014. represen-
tation learning for text-level discourse parsing.
in
proceedings of the 52nd annual meeting of the as-
sociation for computational linguistics, volume 1,
pages 13   24.

andrej karpathy, justin johnson, and fei-fei li. 2015.
visualizing and understanding recurrent networks.
arxiv preprint arxiv:1506.02078.

alex krizhevsky, ilya sutskever, and geoffrey e hin-
ton. 2012.
id163 classi   cation with deep con-
volutional neural networks. in advances in neural
information processing systems, pages 1097   1105.

jiwei li, michel galley, chris brockett, jianfeng gao,
and bill dolan. 2015. a diversity-promoting objec-
tive function for neural conversation models. arxiv
preprint arxiv:1510.03055.

david g lowe. 2004. distinctive image features from
international journal of

scale-invariant keypoints.
id161, 60(2):91   110.

thang luong,

ilya sutskever, quoc v le, oriol
vinyals, and wojciech zaremba. 2014. addressing
the rare word problem in id4.
arxiv preprint arxiv:1410.8206.

aravindh mahendran and andrea vedaldi. 2014. un-
derstanding deep image representations by inverting
them. arxiv preprint arxiv:1412.0035.

brian murphy, partha pratim talukdar, and tom m
mitchell. 2012. learning effective and interpretable
semantic models using non-negative sparse embed-
ding. in coling, pages 1933   1950.

anh nguyen, jason yosinski, and jeff clune. 2014.
deep neural networks are easily fooled: high con   -
dence predictions for unrecognizable images. arxiv
preprint arxiv:1412.1897.

mike schuster and kuldip k paliwal. 1997. bidirec-
tional recurrent neural networks. signal processing,
ieee transactions on, 45(11):2673   2681.

karen simonyan, andrea vedaldi, and andrew zisser-
man. 2013. deep inside convolutional networks:
visualising image classi   cation models and saliency
maps. arxiv preprint arxiv:1312.6034.

richard socher, alex perelygin, jean y wu, jason
chuang, christopher d manning, andrew y ng,
and christopher potts. 2013. recursive deep mod-
els for semantic compositionality over a sentiment
in proceedings of the conference on
treebank.
empirical methods in natural language processing
(emnlp), volume 1631, page 1642. citeseer.

ilya sutskever, oriol vinyals, and quoc vv le. 2014.
sequence to sequence learning with neural networks.
in advances in neural information processing sys-
tems, pages 3104   3112.

christian szegedy, wojciech zaremba, ilya sutskever,
joan bruna, dumitru erhan, ian goodfellow, and
rob fergus. 2013. intriguing properties of neural
networks. arxiv preprint arxiv:1312.6199.

laurens van der maaten and geoffrey hinton. 2008.
visualizing data using id167. journal of machine
learning research, 9(2579-2605):85.

oriol vinyals and quoc le. 2015. a neural conversa-

tional model. arxiv preprint arxiv:1506.05869.

carl vondrick, aditya khosla, tomasz malisiewicz,
2013. hoggles: visual-
and antonio torralba.
in computer vi-
izing id164 features.
sion (iccv), 2013 ieee international conference
on, pages 1   8. ieee.

philippe weinzaepfel, herv  e j  egou, and patrick p  erez.
2011. reconstructing an image from its local de-
scriptors. in id161 and pattern recogni-
tion (cvpr), 2011 ieee conference on, pages 337   
344. ieee.

matthew d zeiler and rob fergus. 2014. visualizing
and understanding convolutional networks. in com-
puter vision   eccv 2014, pages 818   833. springer.

appendix

bidirectional models
(schuster and paliwal,
1997) add bidirectionality to the recurrent frame-
work where embeddings for each time are calcu-
lated both forwardly and backwardly:

t = f (w        h   
h   
t = f (w        h   
h   

t   1 + v        et)
t+1 + v        et)

(7)

normally, bidirectional models feed the concate-
nation vector calculated from both directions
[e   
1 , e   
] to the classi   er. bidirectional models
can be similarly extended to both multi-layer neu-
ral model and lstm version.

ns

recurrent models a recurrent network succes-
sively takes word wt at step t, combines its vector
representation et with previously built hidden vec-
tor ht   1 from time t     1, calculates the resulting
current embedding ht, and passes it to the next step.
the embedding ht for the current time t is thus:

ht = f (w    ht   1 + v    et)

(4)

where w and v denote compositional matrices. if
ns denote the length of the sequence, hns repre-
sents the whole sequence s. hns is used as input a
softmax function for classi   cation tasks.
multi-layer recurrent models multi-layer re-
current models extend one-layer recurrent structure
by operation on a deep neural architecture that en-
ables more expressivity and    exibly. the model
associates each time step for each layer with a hid-
den representation hl,t, where l     [1, l] denotes
the index of layer and t denote the index of time
step. hl,t is given by:

ht,l = f (w    ht   1,l + v    ht,l   1)

(5)

where ht,0 = et, which is the original word embed-
ding input at current time step.
long-short term memory lstm model,    rst
proposed in (hochreiter and schmidhuber, 1997),
maps an input sequence to a    xed-sized vector by
sequentially convoluting the current representation
with the output representation of the previous step.
lstm associates each time epoch with an input,
control and memory gate, and tries to minimize
the impact of unrelated information.
it, ft and
ot denote to gate states at time t. ht denotes the
hidden vector outputted from lstm model at time
t and et denotes the id27 input at time
t. we have

it =   (wi    et + vi    ht   1)
ft =   (wf    et + vf    ht   1)
ot =   (wo    et + vo    ht   1)
lt = tanh(wl    et + vl    ht   1)
ct = ft    ct   1 + it    lt
ht = ot    mt

(6)

where    denotes the sigmoid function. it, ft and
ot are scalars within the range of [0,1].    denotes
pairwise dot.

a multi-layer lstm models works in the same
way as multi-layer recurrent models by enable
multi-layer   s compositions.

