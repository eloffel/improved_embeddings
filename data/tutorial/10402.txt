6
1
0
2

 
r
p
a
4

 

 
 
]

g
l
.
s
c
[
 
 

3
v
6
2
6
1
0

.

9
0
5
1
:
v
i
x
r
a

character-level convolutional networks for text

classi   cation   

xiang zhang

junbo zhao

yann lecun

courant institute of mathematical sciences, new york university

719 broadway, 12th floor, new york, ny 10003
{xiang, junbo.zhao, yann}@cs.nyu.edu

abstract

this article offers an empirical exploration on the use of character-level convolu-
tional networks (convnets) for text classi   cation. we constructed several large-
scale datasets to show that character-level convolutional networks could achieve
state-of-the-art or competitive results. comparisons are offered against traditional
models such as bag of words, id165s and their tfidf variants, and deep learning
models such as word-based convnets and recurrent neural networks.

1

introduction

text classi   cation is a classic topic for natural language processing, in which one needs to assign
prede   ned categories to free-text documents. the range of text classi   cation research goes from
designing the best features to choosing the best possible machine learning classi   ers. to date,
almost all techniques of text classi   cation are based on words, in which simple statistics of some
ordered word combinations (such as id165s) usually perform the best [12].
on the other hand, many researchers have found convolutional networks (convnets) [17] [18] are
useful in extracting information from raw signals, ranging from id161 applications to
id103 and others. in particular, time-delay networks used in the early days of deep
learning research are essentially convolutional networks that model sequential data [1] [31].
in this article we explore treating text as a kind of raw signal at character level, and applying tem-
poral (one-dimensional) convnets to it. for this article we only used a classi   cation task as a way
to exemplify convnets    ability to understand texts. historically we know that convnets usually
require large-scale datasets to work, therefore we also build several of them. an extensive set of
comparisons is offered with traditional models and other deep learning models.
applying convolutional networks to text classi   cation or natural language processing at large was
explored in literature. it has been shown that convnets can be directly applied to distributed [6] [16]
or discrete [13] embedding of words, without any knowledge on the syntactic or semantic structures
of a language. these approaches have been proven to be competitive to traditional models.
there are also related works that use character-level features for language processing. these in-
clude using character-level id165s with linear classi   ers [15], and incorporating character-level
features to convnets [28] [29]. in particular, these convnet approaches use words as a basis, in
which character-level features extracted at word [28] or word id165 [29] level form a distributed
representation. improvements for part-of-speech tagging and information retrieval were observed.
this article is the    rst to apply convnets only on characters. we show that when trained on large-
scale datasets, deep convnets do not require the knowledge of words, in addition to the conclusion
   an early version of this work entitled    text understanding from scratch    was posted in feb 2015 as
arxiv:1502.01710. the present paper has considerably more experimental results and a rewritten introduction.

1

from previous research that convnets do not require the knowledge about the syntactic or semantic
structure of a language. this simpli   cation of engineering could be crucial for a single system that
can work for different languages, since characters always constitute a necessary construct regardless
of whether segmentation into words is possible. working on only characters also has the advantage
that abnormal character combinations such as misspellings and emoticons may be naturally learnt.

2 character-level convolutional networks

in this section, we introduce the design of character-level convnets for text classi   cation. the de-
sign is modular, where the gradients are obtained by back-propagation [27] to perform optimization.

2.1 key modules

the main component is the temporal convolutional module, which simply computes a 1-d convo-
lution. suppose we have a discrete input function g(x)     [1, l]     r and a discrete id81
f (x)     [1, k]     r. the convolution h(y)     [1,(cid:98)(l     k)/d(cid:99) + 1]     r between f (x) and g(x) with
stride d is de   ned as

k(cid:88)

h(y) =

f (x)    g(y    d     x + c),

x=1

where c = k     d + 1 is an offset constant. just as in traditional convolutional networks in vision,
the module is parameterized by a set of such id81s fij(x) (i = 1, 2, . . . , m and j =
1, 2, . . . , n) which we call weights, on a set of inputs gi(x) and outputs hj(y). we call each gi (or
hj) input (or output) features, and m (or n) input (or output) feature size. the outputs hj(y) is
obtained by a sum over i of the convolutions between gi(x) and fij(x).
one key module that helped us to train deeper models is temporal max-pooling. it is the 1-d version
of the max-pooling module used in id161 [2]. given a discrete input function g(x)    
[1, l]     r, the max-pooling function h(y)     [1,(cid:98)(l     k)/d(cid:99) + 1]     r of g(x) is de   ned as

h(y) =

k

max
x=1

g(y    d     x + c),

where c = k     d + 1 is an offset constant. this very pooling module enabled us to train convnets
deeper than 6 layers, where all others fail. the analysis by [3] might shed some light on this.
the non-linearity used in our model is the recti   er or thresholding function h(x) = max{0, x},
which makes our convolutional layers similar to recti   ed linear units (relus) [24]. the algorithm
used is stochastic id119 (sgd) with a minibatch of size 128, using momentum [26] [30]
0.9 and initial step size 0.01 which is halved every 3 epoches for 10 times. each epoch takes a    xed
number of random training samples uniformly sampled across classes. this number will later be
detailed for each dataset sparately. the implementation is done using torch 7 [4].

2.2 character quantization

our models accept a sequence of encoded characters as input. the encoding is done by prescribing
an alphabet of size m for the input language, and then quantize each character using 1-of-m encoding
(or    one-hot    encoding). then, the sequence of characters is transformed to a sequence of such m
sized vectors with    xed length l0. any character exceeding length l0 is ignored, and any characters
that are not in the alphabet including blank characters are quantized as all-zero vectors. the character
quantization order is backward so that the latest reading on characters is always placed near the begin
of the output, making it easy for fully connected layers to associate weights with the latest reading.
the alphabet used in all of our models consists of 70 characters, including 26 english letters, 10
digits, 33 other characters and the new line character. the non-space characters are:

abcdefghijklmnopqrstuvwxyz0123456789
-,;.!?:         /\|_@#$%  &*     +-=<>()[]{}

later we also compare with models that use a different alphabet in which we distinguish between
upper-case and lower-case letters.

2

2.3 model design

we designed 2 convnets     one large and one small. they are both 9 layers deep with 6 convolutional
layers and 3 fully-connected layers. figure 1 gives an illustration.

figure 1: illustration of our model

the input have number of features equal to 70 due to our character quantization method, and the
input feature length is 1014. it seems that 1014 characters could already capture most of the texts of
interest. we also insert 2 dropout [10] modules in between the 3 fully-connected layers to regularize.
they have dropout id203 of 0.5. table 1 lists the con   gurations for convolutional layers, and
table 2 lists the con   gurations for fully-connected (linear) layers.

table 1: convolutional layers used in our experiments. the convolutional layers have stride 1 and
pooling layers are all non-overlapping ones, so we omit the description of their strides.

layer large feature

small feature kernel

pool

1
2
3
4
5
6

1024
1024
1024
1024
1024
1024

256
256
256
256
256
256

7
7
3
3
3
3

3
3

n/a
n/a
n/a

3

we initialize the weights using a gaussian distribution. the mean and standard deviation used for
initializing the large model is (0, 0.02) and small model (0, 0.05).

table 2: fully-connected layers used in our experiments. the number of output units for the last
layer is determined by the problem. for example, for a 10-class classi   cation problem it will be 10.

layer output units large output units small

7
8
9

1024
2048
2048
1024
depends on the problem

for different problems the input lengths may be different (for example in our case l0 = 1014), and
so are the frame lengths. from our model design, it is easy to know that given input length l0, the
output frame length after the last convolutional layer (but before any of the fully-connected layers)
is l6 = (l0     96)/27. this number multiplied with the frame size at layer 6 will give the input
dimension the    rst fully-connected layer accepts.

2.4 data augmentation using thesaurus

many researchers have found that appropriate data augmentation techniques are useful for control-
ling generalization error for deep learning models. these techniques usually work well when we
could    nd appropriate invariance properties that the model should possess. in terms of texts, it is not
reasonable to augment the data using signal transformations as done in image or id103,
because the exact order of characters may form rigorous syntactic and semantic meaning. therefore,

3

some textconvolutionsmax-poolinglengthfeaturequantization...conv. and pool. layersfully-connectedthe best way to do data augmentation would have been using human rephrases of sentences, but this
is unrealistic and expensive due the large volume of samples in our datasets. as a result, the most
natural choice in data augmentation for us is to replace words or phrases with their synonyms.
we experimented data augmentation by using an english thesaurus, which is obtained from the
mytheas component used in libreof   ce1 project. that thesaurus in turn was obtained from word-
net [7], where every synonym to a word or phrase is ranked by the semantic closeness to the most
frequently seen meaning. to decide on how many words to replace, we extract all replaceable words
from the given text and randomly choose r of them to be replaced. the id203 of number r
is determined by a geometric distribution with parameter p in which p [r]     pr. the index s of
the synonym chosen given a word is also determined by a another geometric distribution in which
p [s]     qs. this way, the id203 of a synonym chosen becomes smaller when it moves distant
from the most frequently seen meaning. we will report the results using this new data augmentation
technique with p = 0.5 and q = 0.5.

3 comparison models

to offer fair comparisons to competitive models, we conducted a series of experiments with both tra-
ditional and deep learning methods. we tried our best to choose models that can provide comparable
and competitive results, and the results are reported faithfully without any model selection.

3.1 traditional methods

we refer to traditional methods as those that using a hand-crafted feature extractor and a linear
classi   er. the classi   er used is a multinomial id28 in all these models.
bag-of-words and its tfidf. for each dataset, the bag-of-words model is constructed by selecting
50,000 most frequent words from the training subset. for the normal bag-of-words, we use the
counts of each word as the features. for the tfidf (term-frequency inverse-document-frequency)
[14] version, we use the counts as the term-frequency. the inverse document frequency is the
logarithm of the division between total number of samples and number of samples with the word in
the training subset. the features are normalized by dividing the largest feature value.
bag-of-ngrams and its tfidf. the bag-of-ngrams models are constructed by selecting the 500,000
most frequent id165s (up to 5-grams) from the training subset for each dataset. the feature values
are computed the same way as in the bag-of-words model.
bag-of-means on id27. we also have an experimental model that uses id116 on
id97 [23] learnt from the training subset of each dataset, and then use these learnt means as
representatives of the clustered words. we take into consideration all the words that appeared more
than 5 times in the training subset. the dimension of the embedding is 300. the bag-of-means
features are computed the same way as in the bag-of-words model. the number of means is 5000.

3.2 deep learning methods

recently deep learning methods have started to be applied to text classi   cation. we choose two
simple and representative models for comparison, in which one is word-based convnet and the
other a simple long-short term memory (lstm) [11] recurrent neural network model.
word-based convnets. among the large number of recent works on word-based convnets for
text classi   cation, one of the differences is the choice of using pretrained or end-to-end learned word
representations. we offer comparisons with both using the pretrained id97 [23] embedding [16]
and using lookup tables [5]. the embedding size is 300 in both cases, in the same way as our bag-
of-means model. to ensure fair comparison, the models for each case are of the same size as
our character-level convnets, in terms of both the number of layers and each layer   s output size.
experiments using a thesaurus for data augmentation are also conducted.

1http://www.libreoffice.org/

4

long-short term memory. we also offer a comparison
with a recurrent neural network model, namely long-short
term memory (lstm) [11]. the lstm model used in
our case is word-based, using pretrained id97 em-
bedding of size 300 as in previous models. the model is
formed by taking mean of the outputs of all lstm cells to
form a feature vector, and then using multinomial logistic
regression on this feature vector. the output dimension
is 512. the variant of lstm we used is the common
   vanilla    architecture [8] [9]. we also used gradient clipping [25] in which the gradient norm is
limited to 5. figure 2 gives an illustration.

figure 2: long-short term memory

3.3 choice of alphabet

for the alphabet of english, one apparent choice is whether to distinguish between upper-case and
lower-case letters. we report experiments on this choice and observed that it usually (but not always)
gives worse results when such distinction is made. one possible explanation might be that semantics
do not change with different letter cases, therefore there is a bene   t of id173.

4 large-scale datasets and results

previous research on convnets in different areas has shown that they usually work well with large-
scale datasets, especially when the model takes in low-level raw features like characters in our
case. however, most open datasets for text classi   cation are quite small, and large-scale datasets are
splitted with a signi   cantly smaller training set than testing [21]. therefore, instead of confusing our
community more by using them, we built several large-scale datasets for our experiments, ranging
from hundreds of thousands to several millions of samples. table 3 is a summary.

table 3: statistics of our large-scale datasets. epoch size is the number of minibatches in one epoch

classes train samples test samples epoch size

dataset
ag   s news
sogou news
dbpedia
yelp review polarity
yelp review full
yahoo! answers
amazon review full
amazon review polarity

4
5
14
2
5
10
5
2

120,000
450,000
560,000
560,000
650,000
1,400,000
3,000,000
3,600,000

7,600
60,000
70,000
38,000
50,000
60,000
650,000
400,000

5,000
5,000
5,000
5,000
5,000
10,000
30,000
30,000

ag   s news corpus. we obtained the ag   s corpus of news article on the web2. it contains 496,835
categorized news articles from more than 2000 news sources. we choose the 4 largest classes from
this corpus to construct our dataset, using only the title and description    elds. the number of training
samples for each class is 30,000 and testing 1900.
sogou news corpus. this dataset is a combination of the sogouca and sogoucs news corpora [32],
containing in total 2,909,551 news articles in various topic channels. we then labeled each piece
of news using its url, by manually classifying the their domain names. this gives us a large
corpus of news articles labeled with their categories. there are a large number categories but most
of them contain only few articles. we choose 5 categories        sports   ,       nance   ,    entertainment   ,
   automobile    and    technology   . the number of training samples selected for each class is 90,000
and testing 12,000. although this is a dataset in chinese, we used pypinyin package combined
with jieba chinese segmentation system to produce pinyin     a phonetic romanization of chinese.
the models for english can then be applied to this dataset without change. the    elds used are title
and content.

2http://www.di.unipi.it/  gulli/ag_corpus_of_news_articles.html

5

lstmlstmlstm...meantable 4: testing errors of all the models. numbers are in percentage.    lg    stands for    large    and
   sm    stands for    small   .    w2v    is an abbreviation for    id97   , and    lk    for    lookup table   .
   th    stands for thesaurus. convnets labeled    full    are those that distinguish between lower and
upper letters

model
bow
bow tfidf
ngrams
ngrams tfidf
bag-of-means
lstm
lg. w2v conv.
sm. w2v conv.
lg. w2v conv. th.
sm. w2v conv. th.
lg. lk. conv.
sm. lk. conv.
lg. lk. conv. th.
sm. lk. conv. th.
lg. full conv.
sm. full conv.
lg. full conv. th.
sm. full conv. th.
lg. conv.
sm. conv.
lg. conv. th.
sm. conv. th.

ag
11.19
10.36
7.96
7.64
16.91
13.94
9.92
11.35
9.91
10.88
8.55
10.87
8.93
9.12
9.85
11.59
9.51
10.89
12.82
15.65
13.39
14.80

sogou dbp. yelp p. yelp f. yah. a. amz. f. amz. p.
7.15
6.55
2.92
2.81
10.79
4.82
4.39
4.54

3.39
2.63
1.37
1.31
9.55
1.45
1.42
1.71
1.37
1.53
1.72
1.85
1.58
1.77
1.66
1.89
1.55
1.69
1.73
1.98
1.60
1.85

7.76
6.34
4.36
4.56
12.67
5.26
4.60
5.56
4.63
5.36
4.89
5.54
5.03
5.37
5.25
5.67
4.88
5.42
5.89
6.53
5.82
6.49

42.01
40.14
43.74
45.20
47.46
41.83
40.16
42.13
39.58
41.09
40.52
41.41
40.52
41.17
38.40
38.82
38.04
37.95
39.62
40.84
39.30
40.16

31.11
28.96
31.53
31.49
39.45
29.16
31.97
31.50
31.23
29.86
29.06
30.02
28.84
28.92
29.90
30.01
29.58
29.90
29.55
29.84
28.80
29.84

45.36
44.74
45.73
47.56
55.87
40.57
44.40
42.59
43.75
42.50
45.95
43.66
42.39
43.19
40.89
40.88
40.54
40.53
41.31
40.53
40.45
40.43

9.60
9.00
7.98
8.46
18.39
6.10
5.88
6.00
5.80
5.63
5.84
5.85
5.52
5.51
5.78
5.78
5.51
5.66
5.51
5.50
4.93
5.67

4.95
4.93

8.80
8.95

4.88
8.65

-
-

-
-

-
-

-
-

dbpedia ontology dataset. dbpedia is a crowd-sourced community effort to extract structured
information from wikipedia [19]. the dbpedia ontology dataset is constructed by picking 14 non-
overlapping classes from dbpedia 2014. from each of these 14 ontology classes, we randomly
choose 40,000 training samples and 5,000 testing samples. the    elds we used for this dataset
contain title and abstract of each wikipedia article.
yelp reviews. the yelp reviews dataset is obtained from the yelp dataset challenge in 2015. this
dataset contains 1,569,264 samples that have review texts. two classi   cation tasks are constructed
from this dataset     one predicting full number of stars the user has given, and the other predict-
ing a polarity label by considering stars 1 and 2 negative, and 3 and 4 positive. the full dataset
has 130,000 training samples and 10,000 testing samples in each star, and the polarity dataset has
280,000 training samples and 19,000 test samples in each polarity.
yahoo! answers dataset. we obtained yahoo! answers comprehensive questions and answers
version 1.0 dataset through the yahoo! webscope program. the corpus contains 4,483,032 questions
and their answers. we constructed a topic classi   cation dataset from this corpus using 10 largest
main categories. each class contains 140,000 training samples and 5,000 testing samples. the    elds
we used include question title, question content and best answer.
amazon reviews. we obtained an amazon review dataset from the stanford network analysis
project (snap), which spans 18 years with 34,686,770 reviews from 6,643,669 users on 2,441,053
products [22]. similarly to the yelp review dataset, we also constructed 2 datasets     one full score
prediction and another polarity prediction. the full dataset contains 600,000 training samples and
130,000 testing samples in each class, whereas the polarity dataset contains 1,800,000 training sam-
ples and 200,000 testing samples in each polarity sentiment. the    elds used are review title and
review content.
table 4 lists all the testing errors we obtained from these datasets for all the applicable models. note
that since we do not have a chinese thesaurus, the sogou news dataset does not have any results
using thesaurus augmentation. we labeled the best result in blue and worse result in red.

6

5 discussion

(a) bag-of-means

(b) id165s tfidf

(c) lstm

(d) id97 convnet

(e) lookup table convnet

(f) full alphabet convnet

figure 3: relative errors with comparison models

to understand the results in table 4 further, we offer some empirical analysis in this section. to
facilitate our analysis, we present the relative errors in    gure 3 with respect to comparison models.
each of these plots is computed by taking the difference between errors on comparison model and
our character-level convnet model, then divided by the comparison model error. all convnets in
the    gure are the large models with thesaurus augmentation respectively.
character-level convnet is an effective method. the most important conclusion from our experi-
ments is that character-level convnets could work for text classi   cation without the need for words.
this is a strong indication that language could also be thought of as a signal no different from
any other kind. figure 4 shows 12 random    rst-layer patches learnt by one of our character-level
convnets for dbpedia dataset.

figure 4: first layer weights. for each patch, height is the kernel size and width the alphabet size

dataset size forms a dichotomy between traditional and convnets models. the most obvious
trend coming from all the plots in    gure 3 is that the larger datasets tend to perform better. tra-
ditional methods like id165s tfidf remain strong candidates for dataset of size up to several
hundreds of thousands, and only until the dataset goes to the scale of several millions do we observe
that character-level convnets start to do better.
convnets may work well for user-generated data. user-generated data vary in the degree of how
well the texts are curated. for example, in our million scale datasets, amazon reviews tend to be
raw user-inputs, whereas users might be extra careful in their writings on yahoo! answers. plots
comparing word-based deep models (   gures 3c, 3d and 3e) show that character-level convnets work
better for less curated user-generated texts. this property suggests that convnets may have better
applicability to real-world scenarios. however, further analysis is needed to validate the hypothesis
that convnets are truly good at identifying exotic character combinations such as misspellings and
emoticons, as our experiments alone do not show any explicit evidence.
choice of alphabet makes a difference. figure 3f shows that changing the alphabet by distinguish-
ing between uppercase and lowercase letters could make a difference. for million-scale datasets, it
seems that not making such distinction usually works better. one possible explanation is that there
is a id173 effect, but this is to be validated.

7

0.00%10.00%20.00%30.00%40.00%50.00%60.00%70.00%80.00%90.00%-100.00%-80.00%-60.00%-40.00%-20.00%0.00%20.00%40.00%60.00%-15.00%-10.00%-5.00%0.00%5.00%10.00%15.00%20.00%25.00%-40.00%-30.00%-20.00%-10.00%0.00%10.00%20.00%-60.00%-50.00%-40.00%-30.00%-20.00%-10.00%0.00%10.00%20.00%-50.00%-40.00%-30.00%-20.00%-10.00%0.00%10.00%20.00%ag newsdbpediayelp p.yelp f.yahoo a.amazon f.amazon p.semantics of tasks may not matter. our datasets consist of two kinds of tasks: id31
(yelp and amazon reviews) and topic classi   cation (all others). this dichotomy in task semantics
does not seem to play a role in deciding which method is better.
bag-of-means is a misuse of id97 [20]. one of the most obvious facts one could observe
from table 4 and    gure 3a is that the bag-of-means model performs worse in every case. comparing
with traditional models, this suggests such a simple use of a distributed word representation may not
give us an advantage to text classi   cation. however, our experiments does not speak for any other
language processing tasks or use of id97 in any other way.
there is no free lunch. our experiments once again veri   es that there is not a single machine
learning model that can work for all kinds of datasets. the factors discussed in this section could all
play a role in deciding which method is the best for some speci   c application.

6 conclusion and outlook

this article offers an empirical study on character-level convolutional networks for text classi   ca-
tion. we compared with a large number of traditional and deep learning models using several large-
scale datasets. on one hand, analysis shows that character-level convnet is an effective method.
on the other hand, how well our model performs in comparisons depends on many factors, such as
dataset size, whether the texts are curated and choice of alphabet.
in the future, we hope to apply character-level convnets for a broader range of language processing
tasks especially when structured outputs are needed.

acknowledgement

we gratefully acknowledge the support of nvidia corporation with the donation of 2 tesla k40
gpus used for this research. we gratefully acknowledge the support of amazon.com inc for an
aws in education research grant used for this research.

references
[1] l. bottou, f. fogelman souli  e, p. blanchet, and j. lienard. experiments with time delay networks and
dynamic time warping for speaker independent isolated digit recognition. in proceedings of eurospeech
89, volume 2, pages 537   540, paris, france, 1989.

[2] y.-l. boureau, f. bach, y. lecun, and j. ponce. learning mid-level features for recognition. in computer

vision and pattern recognition (cvpr), 2010 ieee conference on, pages 2559   2566. ieee, 2010.

[3] y.-l. boureau, j. ponce, and y. lecun. a theoretical analysis of feature pooling in visual recognition.
in proceedings of the 27th international conference on machine learning (icml-10), pages 111   118,
2010.

[4] r. collobert, k. kavukcuoglu, and c. farabet. torch7: a matlab-like environment for machine learning.

in biglearn, nips workshop, number epfl-conf-192376, 2011.

[5] r. collobert, j. weston, l. bottou, m. karlen, k. kavukcuoglu, and p. kuksa. natural language process-

ing (almost) from scratch. j. mach. learn. res., 12:2493   2537, nov. 2011.

[6] c. dos santos and m. gatti. deep convolutional neural networks for id31 of short texts. in
proceedings of coling 2014, the 25th international conference on computational linguistics: tech-
nical papers, pages 69   78, dublin, ireland, august 2014. dublin city university and association for
computational linguistics.

[7] c. fellbaum. id138 and id138s. in k. brown, editor, encyclopedia of language and linguistics,

pages 665   670, oxford, 2005. elsevier.

[8] a. graves and j. schmidhuber. framewise phoneme classi   cation with bidirectional lstm and other neural

network architectures. neural networks, 18(5):602   610, 2005.

[9] k. greff, r. k. srivastava, j. koutn    k, b. r. steunebrink, and j. schmidhuber. lstm: a search space

odyssey. corr, abs/1503.04069, 2015.

[10] g. e. hinton, n. srivastava, a. krizhevsky, i. sutskever, and r. r. salakhutdinov.

improving neural

networks by preventing co-adaptation of feature detectors. arxiv preprint arxiv:1207.0580, 2012.

8

[11] s. hochreiter and j. schmidhuber. long short-term memory. neural comput., 9(8):1735   1780, nov.

1997.

[12] t. joachims. text categorization with suport vector machines: learning with many relevant features. in
proceedings of the 10th european conference on machine learning, pages 137   142. springer-verlag,
1998.

[13] r. johnson and t. zhang. effective use of word order for text categorization with convolutional neural

networks. corr, abs/1412.1058, 2014.

[14] k. s. jones. a statistical interpretation of term speci   city and its application in retrieval. journal of

documentation, 28(1):11   21, 1972.

[15] i. kanaris, k. kanaris, i. houvardas, and e. stamatatos. words versus character id165s for anti-spam

   ltering. international journal on arti   cial intelligence tools, 16(06):1047   1067, 2007.

[16] y. kim. convolutional neural networks for sentence classi   cation. in proceedings of the 2014 confer-
ence on empirical methods in natural language processing (emnlp), pages 1746   1751, doha, qatar,
october 2014. association for computational linguistics.

[17] y. lecun, b. boser, j. s. denker, d. henderson, r. e. howard, w. hubbard, and l. d. jackel. back-
propagation applied to handwritten zip code recognition. neural computation, 1(4):541   551, winter
1989.

[18] y. lecun, l. bottou, y. bengio, and p. haffner. gradient-based learning applied to document recognition.

proceedings of the ieee, 86(11):2278   2324, november 1998.

[19] j. lehmann, r. isele, m. jakob, a. jentzsch, d. kontokostas, p. n. mendes, s. hellmann, m. morsey,
p. van kleef, s. auer, and c. bizer. dbpedia - a large-scale, multilingual knowledge base extracted from
wikipedia. semantic web journal, 2014.

[20] g. lev, b. klein, and l. wolf. in defense of id27 for generic text representation. in c. bie-
mann, s. handschuh, a. freitas, f. meziane, and e. mtais, editors, natural language processing and
information systems, volume 9103 of lecture notes in computer science, pages 35   50. springer inter-
national publishing, 2015.

[21] d. d. lewis, y. yang, t. g. rose, and f. li. rcv1: a new benchmark collection for text categorization

research. the journal of machine learning research, 5:361   397, 2004.

[22] j. mcauley and j. leskovec. hidden factors and hidden topics: understanding rating dimensions with
review text. in proceedings of the 7th acm conference on recommender systems, recsys    13, pages
165   172, new york, ny, usa, 2013. acm.

[23] t. mikolov, i. sutskever, k. chen, g. s. corrado, and j. dean. distributed representations of words and
phrases and their compositionality. in c. burges, l. bottou, m. welling, z. ghahramani, and k. wein-
berger, editors, advances in neural information processing systems 26, pages 3111   3119. 2013.

[24] v. nair and g. e. hinton. recti   ed linear units improve restricted id82s. in proceedings

of the 27th international conference on machine learning (icml-10), pages 807   814, 2010.

[25] r. pascanu, t. mikolov, and y. bengio. on the dif   culty of training recurrent neural networks. in icml
[26] b. polyak. some methods of speeding up the convergence of iteration methods. {ussr} computational

2013, volume 28 of jmlr proceedings, pages 1310   1318. jmlr.org, 2013.

mathematics and mathematical physics, 4(5):1     17, 1964.

[27] d. rumelhart, g. hintont, and r. williams. learning representations by back-propagating errors. nature,

323(6088):533   536, 1986.

[28] c. d. santos and b. zadrozny. learning character-level representations for part-of-speech tagging. in
proceedings of the 31st international conference on machine learning (icml-14), pages 1818   1826,
2014.

[29] y. shen, x. he, j. gao, l. deng, and g. mesnil. a latent semantic model with convolutional-pooling
structure for information retrieval. in proceedings of the 23rd acm international conference on confer-
ence on information and knowledge management, pages 101   110. acm, 2014.

[30] i. sutskever, j. martens, g. e. dahl, and g. e. hinton. on the importance of initialization and momentum
in deep learning. in s. dasgupta and d. mcallester, editors, proceedings of the 30th international confer-
ence on machine learning (icml-13), volume 28, pages 1139   1147. jmlr workshop and conference
proceedings, may 2013.

[31] a. waibel, t. hanazawa, g. hinton, k. shikano, and k. j. lang. phoneme recognition using time-delay
neural networks. acoustics, speech and signal processing, ieee transactions on, 37(3):328   339, 1989.
[32] c. wang, m. zhang, s. ma, and l. ru. automatic online news issue construction in web environment. in
proceedings of the 17th international conference on world wide web, www    08, pages 457   466, new
york, ny, usa, 2008. acm.

9

