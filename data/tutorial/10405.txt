dynamic memory networks for visual and textual id53

caiming xiong*, stephen merity*, richard socher
metamind, palo alto, ca usa

{cmxiong,smerity,richard}metamind.io
*indicates equal contribution.

6
1
0
2

 
r
a

m
4

 

 
 
]
e
n
.
s
c
[
 
 

1
v
7
1
4
1
0

.

3
0
6
1
:
v
i
x
r
a

abstract

neural network architectures with memory and
attention mechanisms exhibit certain reason-
ing capabilities required for id53.
one such architecture, the dynamic memory net-
work (dmn), obtained high accuracy on a vari-
ety of language tasks. however, it was not shown
whether the architecture achieves strong results
for id53 when supporting facts are
not marked during training or whether it could
be applied to other modalities such as images.
based on an analysis of the dmn, we propose
several improvements to its memory and input
modules. together with these changes we intro-
duce a novel input module for images in order
to be able to answer visual questions. our new
dmn+ model improves the state of the art on
both the visual id53 dataset and
the babi-10k text question-answering dataset
without supporting fact supervision.

1. introduction
neural network based methods have made tremendous
progress in image and text classi   cation (krizhevsky et al.,
2012; socher et al., 2013b). however, only recently has
progress been made on more complex tasks that require
logical reasoning. this success is based in part on the
addition of memory and attention components to complex
neural networks. for instance, memory networks (weston
et al., 2015b) are able to reason over several facts written in
natural language or (subject, relation, object) triplets. at-
tention mechanisms have been successful components in
both machine translation (bahdanau et al., 2015; luong
et al., 2015) and image captioning models (xu et al., 2015).
the dynamic memory network (kumar et al., 2015)
(dmn) is one example of a neural network model that has
both a memory component and an attention mechanism.
the dmn yields state of the art results on question answer-
ing with supporting facts marked during training, sentiment
analysis, and part-of-speech tagging.
we analyze the dmn components, speci   cally the input

figure 1. id53 over text and images using a dy-
namic memory network.

module and memory module, to improve question answer-
ing. we propose a new input module which uses a two
level encoder with a sentence reader and input fusion layer
to allow for information    ow between sentences. for the
memory, we propose a modi   cation to id149
(gru) (chung et al., 2014). the new gru formulation in-
corporates attention gates that are computed using global
knowledge over the facts. unlike before, the new dmn+
model does not require that supporting facts (i.e. the facts
that are relevant for answering a particular question) are
labeled during training. the model learns to select the im-
portant facts from a larger set.
in addition, we introduce a new input module to represent
images. this module is compatible with the rest of the
dmn architecture and its output is fed into the memory
module. we show that the changes in the memory module
that improved textual id53 also improve vi-
sual id53. both tasks are illustrated in fig. 1.

2. dynamic memory networks
we begin by outlining the dmn for id53
and the modules as presented in kumar et al. (2015).
the dmn is a general architecture for id53
(qa). it is composed of modules that allow different as-
pects such as input representations or memory components
to be analyzed and improved independently. the modules,
depicted in fig. 1, are as follows:

answerquestioninput moduleanswerquestioninput module(a) text question-answering(b) visual question-answeringwhat kind of tree is in the background?kitchenpalmjohn moved to the garden.john got the apple there.john moved to the kitchen.sandra got the milk there.john dropped the apple.john moved to the of   ce.where is theapple?episodic memoryattention mechanismmemory updateepisodic memoryattention mechanismmemory updatedynamic memory networks for visual and textual id53

ui =   

ri =   

input module: this module processes the input data about
which a question is being asked into a set of vectors termed
facts, represented as f = [f1, . . . , fn ], where n is the total
number of facts. these vectors are ordered, resulting in ad-
ditional information that can be used by later components.
for text qa in kumar et al. (2015), the module consists of
a gru over the input words.
as the gru is used in many components of the dmn, it
is useful to provide the full de   nition. for each time step i
with input xi and previous hidden state hi   1, we compute
the updated hidden state hi = gru (xi, hi   1) by

(cid:16)
(cid:16)

w (u)xi + u (u)hi   1 + b(u)(cid:17)
w (r)xi + u (r)hi   1 + b(r)(cid:17)
w xi + ri     u hi   1 + b(h)(cid:17)
(cid:16)

(1)

(2)

(3)

  hi = tanh
hi = ui       hi + (1     ui)     hi   1

(4)
where    is the sigmoid activation function,     is an element-
wise product, w (z), w (r), w     rnh  ni , u (z), u (r), u    
rnh  nh , nh is the hidden size, and ni is the input size.
question module: this module computes a vector repre-
sentation q of the question, where q     rnh is the    nal
hidden state of a gru over the words in the question.
episodic memory module: episode memory aims to re-
trieve the information required to answer the question q
from the input facts. to improve our understanding of
both the question and input, especially if questions require
transitive reasoning, the episode memory module may pass
over the input multiple times, updating episode memory af-
ter each pass. we refer to the episode memory on the tth
pass over the inputs as mt, where mt     rnh , the initial
memory vector is set to the question vector: m0 = q.
the episodic memory module consists of two separate
components: the attention mechanism and the memory up-
date mechanism. the attention mechanism is responsible
for producing a contextual vector ct, where ct     rnh
is a summary of relevant input for pass t, with relevance
inferred by the question q and previous episode memory
mt   1. the memory update mechanism is responsible for
generating the episode memory mt based upon the contex-
tual vector ct and previous episode memory mt   1. by the
   nal pass t , the episodic memory mt should contain all
the information required to answer the question q.
answer module: the answer module receives both q and
mt to generate the model   s predicted answer. for simple
answers, such as a single word, a linear layer with softmax
activation may be used. for tasks requiring a sequence out-
put, an id56 may be used to decode a = [q; mt ], the con-
catenation of vectors q and mt , to an ordered set of tokens.
the cross id178 error on the answers is used for training

and backpropagated through the entire network.

3. improved dynamic memory networks:

dmn+

we propose and compare several modeling choices for two
crucial components: input representation, attention mecha-
nism and memory update. the    nal dmn+ model obtains
the highest accuracy on the babi-10k dataset without sup-
porting facts and the vqa dataset (antol et al., 2015). sev-
eral design choices are motivated by intuition and accuracy
improvements on that dataset.

3.1. input module for text qa

in the dmn speci   ed in kumar et al. (2015), a single gru
is used to process all the words in the story, extracting sen-
tence representations by storing the hidden states produced
at the end of sentence markers. the gru also provides a
temporal component by allowing a sentence to know the
content of the sentences that came before them. whilst
this input module worked well for babi-1k with supporting
facts, as reported in kumar et al. (2015), it did not perform
well on babi-10k without supporting facts (sec. 6.1).
we speculate that there are two main reasons for this per-
formance disparity, all exacerbated by the removal of sup-
porting facts. first, the gru only allows sentences to
have context from sentences before them, but not after
them. this prevents information propagation from future
sentences. second, the supporting sentences may be too
far away from each other on a word level to allow for these
distant sentences to interact through the word level gru.
input fusion layer
for the dmn+, we propose replacing this single gru with
two different components. the    rst component is a sen-
tence reader, responsible only for encoding the words into
a sentence embedding. the second component is the input
fusion layer, allowing for interactions between sentences.
this resembles the hierarchical neural auto-encoder archi-
tecture of li et al. (2015) and allows content interaction
between sentences. we adopt the bi-directional gru for
this input fusion layer because it allows information from
both past and future sentences to be used. as gradients
do not need to propagate through the words between sen-
tences, the fusion layer also allows for distant supporting
sentences to have a more direct interaction.
fig. 2 shows an illustration of an input module, where a
positional encoder is used for the sentence reader and a
bi-directional gru is adopted for the input fusion layer.
each sentence encoding fi is the output of an encoding
scheme taking the word tokens [wi
mi], where mi
is the length of the sentence.

1, . . . , wi

dynamic memory networks for visual and textual id53

figure 2. the input module with a    fusion layer   , where the sen-
tence reader encodes the sentence and the bi-directional gru al-
lows information to    ow between sentences.

sentation is produced by fi = (cid:80)j=1

the sentence reader could be based on any variety of
encoding schemes. we selected positional encoding de-
scribed in sukhbaatar et al. (2015) to allow for a compari-
son to their work. grus and lstms were also considered
but required more computational resources and were prone
to over   tting if auxiliary tasks, such as reconstructing the
original sentence, were not used.
for the positional encoding scheme, the sentence repre-
j, where     is
element-wise multiplication and lj is a column vector with
structure ljd = (1     j/m )     (d/d)(1     2j/m ), where
d is the embedding index and d is the dimension of the
embedding.
the input fusion layer takes these input facts and enables
an information exchange between them by applying a bi-
directional gru.

m lj     wi

      fi = gruf wd(fi,         fi   1)
      fi = grubwd(fi,         fi+1)
      fi =       fi +       fi

(5)
(6)
(7)
where fi is the input fact at timestep i,       fi is the hidden state
of the forward gru at timestep i, and       fi is the hidden state
of the backward gru at timestep i. this allows contextual
information from both future and past facts to impact       fi .
we explored a variety of encoding schemes for the sen-
tence reader, including grus, lstms, and the positional
encoding scheme described in sukhbaatar et al. (2015).
for simplicity and speed, we selected the positional en-
coding scheme. grus and lstms were also considered
but required more computational resources and were prone
to over   tting if auxiliary tasks, such as reconstructing the

figure 3. vqa input module to represent images for the dmn.

original sentence, were not used.

3.2. input module for vqa

to apply the dmn to visual id53, we intro-
duce a new input module for images. the module splits
an image into small local regions and considers each re-
gion equivalent to a sentence in the input module for text.
the input module for vqa is composed of three parts, il-
lustrated in fig. 3: local region feature extraction, visual
feature embedding, and the input fusion layer introduced
in sec. 3.1.
local region feature extraction: to extract features
from the image, we use a convolutional neural network
(krizhevsky et al., 2012) based upon the vgg-19 model
(simonyan & zisserman, 2014). we    rst rescale the input
image to 448    448 and take the output from the last pool-
ing layer which has dimensionality d = 512    14    14.
the pooling layer divides the image into a grid of 14    14,
resulting in 196 local regional vectors of d = 512.
visual feature embedding: as the vqa task involves
both image features and text features, we add a linear layer
with tanh activation to project the local regional vectors to
the textual feature space used by the question vector q.
input fusion layer: the local regional vectors extracted
from above do not yet have global information available
to them. without global information, their representational
power is quite limited, with simple issues like object scal-
ing or locational variance causing accuracy problems.
to solve this, we add an input fusion layer similar to that
of the textual input module described in sec. 3.1. first,
to produce the input facts f , we traverse the image in a
snake like fashion, as seen in figure 3. we then apply a
bi-directional gru over these input facts f to produce the

input fusionlayersentencereaderfactsgruf1f1w1w2w3w4grupositional encodergruf2f2w1w2w3w4grupositional encodergruf3f3w1w2w3w4grupositional encoder 1 1 1 1 2 2 2 2 3 3 3 3textual input module5121414wid98visual feature extractionfeature embeddinginput fusion layervisual input modulegruf1grugruf2grugruf196gruww. . .. . .factsdynamic memory networks for visual and textual id53

figure 5. (a) the traditional gru model, and (b) the proposed
attention-based gru model

figure 4. the episodic memory module of the dmn+ when using
two passes. the

      
f is the output of the input module.

globally aware input facts       f . the bi-directional gru al-
lows for information propagation from neighboring image
patches, capturing spatial information.

3.3. the episodic memory module

(cid:16)

the episodic memory module, as depicted in fig. 4, re-
trieves information from the input facts       f = [      f1 , . . . ,      fn ]
provided to it by focusing attention on a subset of these
facts. we implement this attention by associating a sin-
i, with each fact       f i
gle scalar value, the attention gate gt
during pass t. this is computed by allowing interactions
between the fact and both the question representation and
the episode memory state.

i + b(1)(cid:17)

z t

(10)

gt
i =

+ b(2)

(8)
(9)

w (1)zt

i =[      fi     q;      fi     mt   1;|      fi     q|;|      fi     mt   1|]
zt
i =w (2) tanh
(cid:80)mi
exp(z t
i )
k=1 exp(z t
k)
where       fi
is the ith fact, mt   1 is the previous episode
memory, q is the original question,     is the element-wise
product, |    | is the element-wise absolute value, and ; rep-
resents concatenation of the vectors.
the dmn implemented in kumar et al. (2015) involved
a more complex set of interactions within z, containing
the additional terms [f ; mt   1; q; f t w (b)q; f t w (b)mt   1].
after an initial analysis, we found these additional terms
were not required.
attention mechanism
once we have the attention gate gt
i we use an attention
mechanism to extract a contextual vector ct based upon the
current focus. we focus on two types of attention: soft at-
tention and a new attention based gru. the latter improves
performance and is hence the    nal modeling choice for the
dmn+.

i=1 gt

(cid:80)n

soft attention: soft attention produces a contextual vec-
tor ct through a weighted summation of the sorted list of
vectors       f and corresponding attention gates gt
i: ct =
i      f i this method has two advantages. first, it is
easy to compute. second, if the softmax activation is spiky
it can approximate a hard attention function by selecting
only a single fact for the contextual vector whilst still being
differentiable. however the main disadvantage to soft at-
tention is that the summation process loses both positional
and ordering information. whilst multiple attention passes
can retrieve some of this information, this is inef   cient.
attention based gru: for more complex queries, we
would like for the attention mechanism to be sensitive to
both the position and ordering of the input facts       f . an
id56 would be advantageous in this situation except they
cannot make use of the attention gate from equation 10.
we propose a modi   cation to the gru architecture by em-
bedding information from the attention mechanism. the
update gate ui in equation 1 decides how much of each di-
mension of the hidden state to retain and how much should
be updated with the transformed input xi from the current
timestep. as ui is computed using only the current input
and the hidden state from previous timesteps, it lacks any
knowledge from the question or previous episode memory.
by replacing the update gate ui in the gru (equation 1)
with the output of the attention gate gt
i (equation 10) in
equation 4, the gru can now use the attention gate for
updating its internal state. this change is depicted in fig 5.

(11)

hi =gt

i       hi + (1     gt
i )     hi   1
i is a scalar, generated
an important consideration is that gt
using a softmax activation, as opposed to the vector ui    
rnh , generated using a sigmoid activation. this allows
us to easily visualize how the attention gates activate over
the input, later shown for visual qa in fig. 6. though
not explored, replacing the softmax activation in equation
i     rnh .
10 with a sigmoid activation would result in gt
to produce the contextual vector ct used for updating the
episodic memory state mt, we use the    nal hidden state of
the attention based gru.
episode memory updates
after each pass through the attention mechanism, we wish

c1c1m0m0attngrugate attentionattngruattngru. . .attention mechanismmemory updatem1m1 !f !fm2m2attngrugate attentionattngruattngru. . .attention mechanismmemory update. . .. . .c2c2episodic memory pass 1episodic memory pass 2. . .. . .hi  hiriuiinouthi  hiriinoutgti(a)(b) dynamic memory networks for visual and textual id53

to update the episode memory mt   1 with the newly con-
structed contextual vector ct, producing mt. in the dmn,
a gru with the initial hidden state set to the question vec-
tor q is used for this purpose. the episodic memory for
pass t is computed by

mt = gru (ct, mt   1)

(12)

the work of sukhbaatar et al. (2015) suggests that using
different weights for each pass through the episodic mem-
ory may be advantageous. when the model contains only
one set of weights for all episodic passes over the input, it
is referred to as a tied model, as in the    mem weights    row
in table 1.
following the memory update component used in
sukhbaatar et al. (2015) and peng et al. (2015) we experi-
ment with using a relu layer for the memory update, cal-
culating the new episode memory state by

mt = relu(cid:0)w t[mt   1; ct; q] + b(cid:1)

(13)
where ; is the concatenation operator, w t     rnh  nh , b    
rnh , and nh is the hidden size. the untying of weights
and using this relu formulation for the memory update
improves accuracy by another 0.5% as shown in table 1 in
the last column. the    nal output of the memory network is
passed to the answer module as in the original dmn.

4. related work
the dmn is related to two major lines of recent work:
memory and attention mechanisms. we work on both vi-
sual and textual id53 which have, until now,
been developed in separate communities.
neural memory models the earliest recent work with a
memory component that is applied to language processing
is that of memory networks (weston et al., 2015b) which
adds a memory component for id53 over
simple facts. they are similar to dmns in that they also
have input, scoring, attention and response mechanisms.
however, unlike the dmn their input module computes
sentence representations independently and hence cannot
easily be used for other tasks such as sequence labeling.
like the original dmn, this memory network requires that
supporting facts are labeled during qa training. end-to-
end memory networks (sukhbaatar et al., 2015) do not have
this limitation.
in contrast to previous memory models
with a variety of different functions for memory attention
retrieval and representations, dmns (kumar et al., 2015)
have shown that neural sequence models can be used for
input representation, attention and response mechanisms.
sequence models naturally capture position and temporal-
ity of both the inputs and transitive reasoning steps.

neural attention mechanisms attention mechanisms al-
low neural network models to use a question to selectively
pay attention to speci   c inputs. they can bene   t image
classi   cation (stollenga et al., 2014), generating captions
for images (xu et al., 2015), among others mentioned be-
low, and machine translation (cho et al., 2014; bahdanau
et al., 2015; luong et al., 2015). other recent neural ar-
chitectures with memory or attention which have proposed
include id63s (graves et al., 2014), neu-
ral gpus (kaiser & sutskever, 2015) and stack-augmented
id56s (joulin & mikolov, 2015).
id53 in nlp id53 involv-
ing natural language can be solved in a variety of ways to
which we cannot all do justice. if the potential input is a
large text corpus, qa becomes a combination of informa-
tion retrieval and extraction (yates et al., 2007). neural
approaches can include reasoning over knowledge bases,
(bordes et al., 2012; socher et al., 2013a) or directly via
sentences for trivia competitions (iyyer et al., 2014).
visual id53 (vqa) in comparison to qa
in nlp, vqa is still a relatively young task that is feasible
only now that objects can be identi   ed with high accuracy.
the    rst large scale database with unconstrained questions
about images was introduced by antol et al. (2015). while
vqa datasets existed before they did not include open-
ended, free-form questions about general images (geman
et al., 2014). others are were too small to be viable for a
deep learning approach (malinowski & fritz, 2014). the
only vqa model which also has an attention component
is the stacked attention network (yang et al., 2015). their
work also uses id98 based features. however, unlike our
input fusion layer, they use a single layer neural network
to map the features of each patch to the dimensionality of
the question vector. hence, the model cannot easily incor-
porate adjacency of local information in its hidden state.
a model that also uses neural modules, albeit logically in-
spired ones, is that by andreas et al. (2016) who evaluate
on knowledgebase reasoning and visual question answer-
ing. we compare directly to their method on the latter task
and dataset.
related to visual id53 is the task of describ-
ing images with sentences (kulkarni et al., 2011). socher
et al. (2014) used deep learning methods to map images and
sentences into the same space in order to describe images
with sentences and to    nd images that best visualize a sen-
tence. this was the    rst work to map both modalities into
a joint space with deep learning methods, but it could only
select an existing sentence to describe an image. shortly
thereafter, recurrent neural networks were used to generate
often novel sentences based on images (karpathy & fei-
fei, 2015; chen & zitnick, 2014; fang et al., 2015; xu
et al., 2015).

dynamic memory networks for visual and textual id53

5. datasets
to analyze our proposed model changes and compare
our performance with other architectures, we use three
datasets.

5.1. babi-10k

for evaluating the dmn on textual id53, we
use babi-10k english (weston et al., 2015a), a synthetic
dataset which features 20 different tasks. each example is
composed of a set of facts, a question, the answer, and the
supporting facts that lead to the answer. the dataset comes
in two sizes, referring to the number of training examples
each task has: babi-1k and babi-10k. the experiments in
sukhbaatar et al. (2015) found that their lowest error rates
on the smaller babi-1k dataset were on average three times
higher than on babi-10k.

5.2. daquar-all visual dataset

the dataset for id53 on real-world im-
ages (daquar) (malinowski & fritz, 2014) consists of
795 training images and 654 test images. based upon these
images, 6,795 training questions and 5,673 test questions
were generated. following the previously de   ned experi-
mental method, we exclude multiple word answers (mali-
nowski et al., 2015; ma et al., 2015). the resulting dataset
covers 90% of the original data. the evaluation method
uses classi   cation accuracy over the single words. we use
this as a development dataset for model analysis (sec. 6.1).

5.3. visual id53

the visual id53 (vqa) dataset was con-
structed using the microsoft coco dataset (lin et al.,
2014) which contained 123,287 training/validation images
and 81,434 test images. each image has several related
questions with each question answered by multiple people.
this dataset contains 248,349 training questions, 121,512
validation questions, and 244,302 for testing. the testing
data was split into test-development, test-standard and test-
challenge in antol et al. (2015).
evaluation on both test-standard and test-challenge are im-
plemented via a submission system. test-standard may only
be evaluated 5 times and test-challenge is only evaluated at
the end of the competition. to the best of our knowledge,
vqa is the largest and most complex image dataset for the
visual id53 task.

6. experiments
6.1. model analysis

to understand the impact of the proposed module changes,
we analyze the performance of a variety of dmn models
on textual and visual id53 datasets.
the original dmn (odmn) is the architecture presented
in kumar et al. (2015) without any modi   cations. dmn2
only replaces the input module with the input fusion layer
(sec. 3.1). dmn3, based upon dmn2, replaces the soft at-
tention mechanism with the attention based gru proposed
in sec. 3.3. finally, dmn+, based upon dmn3, is an un-
tied model, using a unique set of weights for each pass and
a linear layer with a relu activation to compute the mem-
ory update. we report the performance of the model varia-
tions in table 1.
a large improvement to accuracy on both the babi-10k tex-
tual and daquar visual datasets results from updating the
input module, seen when comparing odmn to dmn2. on
both datasets, the input fusion layer improves interaction
between distant facts. in the visual dataset, this improve-
ment is purely from providing contextual information from
neighboring image patches, allowing it to handle objects
of varying scale or questions with a locality aspect. for the
textual dataset, the improved interaction between sentences
likely helps the path    nding required for logical reasoning
when multiple transitive steps are required.
the addition of the attention gru in dmn3 helps answer
questions where complex positional or ordering informa-
tion may be required. this change impacts the textual
dataset the most as few questions in the visual dataset are
likely to require this form of logical reasoning. finally, the
untied model in the dmn+ over   ts on some tasks com-
pared to dmn3, but on average the error rate decreases.
from these experimental results, we    nd that the combina-
tion of all the proposed model changes results, culminating
in dmn+, achieves the highest performance across both
the visual and textual datasets.

6.2. comparison to state of the art using babi-10k

we trained our models using the adam optimizer (kingma
& ba, 2014) with a learning rate of 0.001 and batch size of
128. training runs for up to 256 epochs with early stopping
if the validation loss had not improved within the last 20
epochs. the model from the epoch with the lowest valida-
tion loss was then selected. xavier initialization was used
for all weights except for the id27s, which used

random uniform initialization with range [      3,   3]. both
the embedding and hidden dimensions were of size d = 80.
we used (cid:96)2 id173 on all weights except bias and
used dropout on the initial sentence encodings and the an-

dynamic memory networks for visual and textual id53

model
input module
attention
mem update
mem weights

qa2
qa3
qa5
qa6
qa7
qa8
qa9
qa10
qa14
qa16
qa17
qa18
qa20
mean error

accuracy

odmn
gru

(cid:80) gifi

gru
tied

dmn2
fusion

(cid:80) gifi attngru attngru

dmn+
fusion

dmn3
fusion

gru
tied

gru
tied

relu
untied

babi english 10k dataset

36.0
42.2
0.1
35.7
8.0
1.6
3.3
0.6
3.6
55.1
39.6
9.3
1.9
11.8

0.1
19.0
0.5
0.0
2.5
0.1
0.0
0.0
0.7
45.7
5.9
3.8
0.0
3.9

0.7
9.2
0.8
0.6
1.6
0.2
0.0
0.2
0.0
47.9
5.0
0.1
0.0
3.3

daquar-all visual dataset

27.54

28.43

28.62

0.3
1.1
0.5
0.0
2.4
0.0
0.0
0.0
0.2
45.3
4.2
2.1
0.0
2.8

28.79

rates of various model architectures on
table 1. test error
the babi-10k dataset,
and accuracy performance on the
daquar-all visual dataset. the skipped babi questions
(1,4,11,12,13,15,19) achieved 0 error across all models.

swer module, keeping the input with id203 p = 0.9.
the last 10% of the training data on each task was chosen
as the validation set. for all tasks, three passes were used
for the episodic memory module, allowing direct compari-
son to other state of the art methods. finally, we limited the
input to the last 70 sentences for all tasks except qa3 for
which we limited input to the last 130 sentences, similar to
sukhbaatar et al. (2015).
on some tasks, the accuracy was not stable across multiple
runs. this was particularly problematic on qa3, qa17,
and qa18. to solve this, we repeated training 10 times
using random initializations and evaluated the model that
achieved the lowest validation set loss.
text qa results
we compare our best performing approach, dmn+, to two
state of the art id53 architectures: the end to
end memory network (e2e) (sukhbaatar et al., 2015) and
the neural reasoner framework (nr) (peng et al., 2015).
neither approach use supporting facts for training.
the end-to-end memory network is a form of memory net-
work (weston et al., 2015b) tested on both textual ques-
tion answering and id38. the model features
both explicit memory and a recurrent attention mechanism.
we select the model from the paper that achieves the low-
est mean error over the babi-10k dataset. this model uti-
lizes positional encoding for input, id56-style tied weights
for the episode module, and a relu non-linearity for the

task
2: 2 supporting facts
3: 3 supporting facts
5: 3 argument relations
6: yes/no questions
7: counting
8: lists/sets
9: simple negation
11: basic coreference
14: time reasoning
16: basic induction
17: positional reasoning
18: size reasoning
19: path    nding
mean error (%)
failed tasks (err >5%)

dmn+
0.3
1.1
0.5
0.0
2.4
0.0
0.0
0.0
0.2
45.3
4.2
2.1
0.0
2.8
1

e2e nr
0.3
-
-
2.1
-
0.8
-
0.1
2.0
-
-
0.9
-
0.3
-
0.1
0.1
-
-
51.8
0.9
18.6
-
5.3
2.3
1.6
-
4.2
3
-

table 2. test error rates of various model architectures on tasks
from the the babi english 10k dataset. e2e = end-to-end mem-
ory network results from sukhbaatar et al. (2015). nr = neu-
ral reasoner with original auxiliary task from peng et al. (2015).
dmn+ and e2e achieve an error of 0 on babi question sets
(1,4,10,12,13,15,20).

memory update component.
the neural reasoner framework is an end-to-end trainable
model which features a deep architecture for logical rea-
soning and an interaction-pooling mechanism for allowing
interaction over multiple facts. while the neural reasoner
framework was only tested on qa17 and qa19, these were
two of the most challenging question types at the time.
in table 2 we compare the accuracy of these question an-
swering architectures, both as mean error and error on in-
dividual tasks. the dmn+ model reduces mean error by
1.4% compared to the the end-to-end memory network,
achieving a new state of the art for the babi-10k dataset.
one notable de   ciency in our model is that of qa16: ba-
sic induction. in sukhbaatar et al. (2015), an untied model
using only summation for memory updates was able to
achieve a near perfect error rate of 0.4. when the memory
update was replaced with a linear layer with relu activa-
tion, the end-to-end memory network   s overall mean error
decreased but the error for qa16 rose sharply. our model
experiences the same dif   culties, suggesting that the more
complex memory update component may prevent conver-
gence on certain simpler tasks.
the neural reasoner model outperforms both the dmn and
end-to-end memory network on qa17: positional reason-
ing. this is likely as the positional reasoning task only
involves minimal supervision - two sentences for input,
yes/no answers for supervision, and only 5,812 unique ex-
amples after removing duplicates from the initial 10,000

dynamic memory networks for visual and textual id53

all

method
vqa
28.1 64.0
image
48.1 75.7
question
52.6 75.6
q+i
53.7 78.9
lstm q+i
ack
55.7 79.2
ibowimg 55.7 76.5
dppnet
57.2 80.7
57.9 80.5
d-nmn
58.7 79.3
san
60.3 80.5
dmn+

test-dev

y/n other num

test-std
all

-
-
-
54.1
56.0
55.9
57.4
58.0
58.9
60.4

3.8
27.1
37.4
36.4
40.1
42.6
41.7
43.1
46.1
48.3

0.4
36.7
33.7
35.2
36.1
35.0
37.2
37.4
36.6
36.8

table 3. performance of various architectures and approaches on
vqa test-dev and test-standard data. vqa numbers are from
antol et al. (2015); ack wu et al. (2015); ibowimg -zhou
et al. (2015); dppnet - noh et al. (2015); d-nmn - andreas et al.
(2016); san -yang et al. (2015)

training examples. peng et al. (2015) add an auxiliary task
of reconstructing both the original sentences and question
from their representations. this auxiliary task likely im-
proves performance by preventing over   tting.

6.3. comparison to state of the art using vqa

3

(cid:80)

i=1 min(

t   t i 1(ai==t)

, 1) where 1

(cid:80)n

for the vqa dataset, each question is answered by mul-
tiple people and the answers may not be the same, the
generated answers are evaluated using human consensus.
for each predicted answer ai for the ith question with
target answer set t i, the accuracy of vqa: accv qa =
(  ) is the indica-
1
n
tor function. simply put, the answer ai is only 100% accu-
rate if at least 3 people provide that exact answer.
training details we use the adam optimizer (kingma &
ba, 2014) with a learning rate of 0.003 and batch size of
100. training runs for up to 256 epochs with early stop-
ping if the validation loss has not improved in the last 10
epochs. for weight initialization, we sampled from a ran-
dom uniform distribution with range [   0.08, 0.08]. both
the id27 and hidden layers were vectors of size
d = 512. we apply dropout on the initial image output
from the vgg convolutional neural network (simonyan &
zisserman, 2014) as well as the input to the answer module,
keeping input with id203 p = 0.5.
results and analysis
the vqa dataset is composed of three question domains:
yes/no, number, and other. this enables us to analyze
the performance of the models on various tasks that require
different reasoning abilities.
the comparison models are separated into two broad

classes:
those that utilize a full connected image feature
for classi   cation and those that perform reasoning over
multiple small image patches. only the san and dmn
approach use small image patches, while the rest use the
fully-connected whole image feature approach.
here, we show the quantitative and qualitative results in ta-
ble 3 and fig. 6, respectively. the images in fig. 6 illustrate
how the attention gate gt
i selectively activates over relevant
portions of the image according to the query. in table 3,
our method outperforms baseline and other state-of-the-art
methods across all question domains (all) in both test-dev
and test-std, and especially for other questions, achieves a
wide margin compared to the other architectures, which is
likely as the small image patches allow for    nely detailed
reasoning over the image.
however, the granularity offered by small image patches
does not always offer an advantage. the number questions
may be not solvable for both the san and dmn architec-
tures, potentially as counting objects is not a simple task
when an object crosses image patch boundaries.

7. conclusion
we have proposed new modules for the dmn framework
to achieve strong results without supervision of supporting
facts. these improvements include the input fusion layer
to allow interactions between input facts and a novel at-
tention based gru that allows for logical reasoning over
ordered inputs. our resulting model obtains state of the
art results on both the vqa dataset and the babi-10k text
question-answering dataset, proving the framework can be
generalized across input domains.

references
andreas, j., rohrbach, m., darrell, t., and klein, d.
learning to compose neural networks for question an-
swering. arxiv preprint arxiv:1601.01705, 2016.

antol, s., agrawal, a., lu, j., mitchell, m., batra, d., zit-
nick, c. l., and parikh, d. vqa: visual question an-
swering. arxiv preprint arxiv:1505.00468, 2015.

bahdanau, d., cho, k., and bengio, y. neural machine
translation by jointly learning to align and translate. in
iclr, 2015.

bordes, a., glorot, x., weston, j., and bengio, y. joint
learning of words and meaning representations for
open-text id29. aistats, 2012.

chen, x. and zitnick, c. l. learning a recurrent visual rep-
resentation for image id134. arxiv preprint
arxiv:1411.5654, 2014.

dynamic memory networks for visual and textual id53

figure 6. examples of qualitative results of attention for vqa. the original images are shown on the left. on the right we show how
the attention gate gt
i activates given one pass over the image and query. white regions are the most active. answers are given by the
dmn+.

cho, k., van merrienboer, b., gulcehre, c., bahdanau, d.,
bougares, f., schwenk, h., and bengio, y. learning
phrase representations using id56 encoder-decoder for
id151. in emnlp, 2014.

chung, j., gulcehre, c., cho, k., and bengio, y. em-
pirical evaluation of gated recurrent neural networks on
sequence modeling. arxiv preprint arxiv:1412.3555,
2014.

fang, h., gupta, s., iandola, f., srivastava, r., deng, l.,
dollar, p., gao, j., he, x., mitchell, m., and platt, j.
in cvpr,
from captions to visual concepts and back.
2015.

geman, d., geman, s., hallonquist, n., and younes, l.
a visual turing test for id161 systems. in
pnas, 2014.

graves, a., wayne, g., and danihelka, i. neural turing

machines. arxiv preprint arxiv:1410.5401, 2014.

iyyer, m., boyd-graber, j., claudino, l., socher, r., and
daum  e iii, h. a neural network for factoid question
answering over paragraphs. in emnlp, 2014.

joulin, a. and mikolov, t. inferring algorithmic patterns

with stack-augmented recurrent nets. in nips, 2015.

kaiser, l. and sutskever, i. neural gpus learn algo-

rithms. arxiv preprint arxiv:1511.08228, 2015.

karpathy, a. and fei-fei, l. deep visual-semantic align-
in cvpr,

ments for generating image descriptions.
2015.

kingma, diederik and ba,

jimmy.
method for stochastic optimization.
arxiv:1412.6980, 2014.

adam:

a
arxiv preprint

krizhevsky, a., sutskever, i., and hinton, g. e. id163
classi   cation with deep convolutional neural networks.
in nips, 2012.

which man is dressed more    amboyantly ?answer: rightwhat time of day was this picture taken ?answer: nightwhat is the boy holding ?answer: surfboardwho is on both photos ?answer: girlwhat is the main color on the bus ?answer: bluehow many pink    agsare there ?answer: 2what is this sculpture made out of ?answer: metalwhat is the pattern on the cat ' s fur on its tail ?answer: stripeswhat type of trees are in the background ?answer: pinedid the player hitthe ball ?answer: yeswhat color are the bananas ?answer: greenis this in the wild ?answer: nodynamic memory networks for visual and textual id53

kulkarni, g., premraj, v., dhar, s., li, s., choi, y., berg,
a. c., and berg, t. l. baby talk: understanding and
generating image descriptions. in cvpr, 2011.

stollenga, m. f., j. masci, f. gomez, and schmidhuber,
j. deep networks with internal selective attention
through feedback connections. in nips, 2014.

sukhbaatar, s., szlam, a., weston, j., and fergus, r. end-

to-end memory networks. in nips, 2015.

weston, j., bordes, a., chopra, s., and mikolov, t. to-
wards ai-complete id53: a set of pre-
requisite toy tasks. arxiv preprint arxiv:1502.05698,
2015a.

weston, j., chopra, s., and bordes, a. memory networks.

in iclr, 2015b.

wu, q., wang, p., shen, c., hengel, a. van den, and dick,
a. ask me anything: free-form visual question an-
swering based on knowledge from external sources.
arxiv preprint arxiv:1511.06973, 2015.

xu, k., ba, j., kiros, r., cho, k., courville, a. c.,
salakhutdinov, r., zemel, r. s., and bengio, y. show,
attend and tell: neural image id134 with vi-
sual attention. in icml, 2015.

yang, z., he, x., gao, j., deng, l., and smola, a. stacked
attention networks for image id53. arxiv
preprint arxiv:1511.02274, 2015.

yates, a., banko, m., broadhead, m., cafarella, m. j., et-
zioni, o., and soderland, s. textrunner: open informa-
tion extraction on the web. in hlt-naacl (demonstra-
tions), 2007.

zhou, b., tian, y., sukhbaatar, s., szlam, a., and fergus,
r. simple baseline for visual id53. arxiv
preprint arxiv:1512.02167, 2015.

kumar, a., irsoy, o., ondruska, p., iyyer, m., bradbury,
j., gulrajani, i., and socher, r. ask me anything: dy-
namic memory networks for natural language process-
ing. arxiv preprint arxiv:1506.07285, 2015.

li, j., luong, m. t., and jurafsky, d. a hierarchical neu-
ral autoencoder for paragraphs and documents. arxiv
preprint arxiv:1506.01057, 2015.

lin, t. y., maire, m., belongie, s., hays, j., perona, p.,
ramanan, d., doll  ar, p., and zitnick, c. l. microsoft
in eccv 2014,
coco: common objects in context.
2014.

luong, m. t., pham, h., and manning, c. d. effective ap-
proaches to attention-based id4.
in emnlp, 2015.

ma, l., lu, z., and li, h. learning to answer ques-
tions from image using convolutional neural network.
arxiv preprint arxiv:1506.00333, 2015.

malinowski, m. and fritz, m. a multi-world approach to
id53 about real-world scenes based on
uncertain input. in nips, 2014.

malinowski, m., rohrbach, m., and fritz, m. ask your
neurons: a neural-based approach to answering ques-
tions about images. in iccv, 2015.

noh, h., seo, p. h., and han, b. image question answer-
ing using convolutional neural network with dynamic
parameter prediction. arxiv preprint arxiv:1511.05756,
2015.

peng, b., lu, z., li, h., and wong, k.

to-
wards neural network-based reasoning. arxiv preprint
arxiv:1508.05508, 2015.

simonyan, k. and zisserman, a. very deep convolu-
tional networks for large-scale image recognition. arxiv
preprint arxiv:1409.1556, 2014.

socher, r., chen, d., manning, c. d., and ng, a. y. rea-
soning with neural tensor networks for knowledge
base completion. in nips, 2013a.

socher, r., perelygin, a., wu, j., chuang, j., manning,
c., ng, a., and potts, c. recursive deep models for
semantic compositionality over a sentiment treebank. in
emnlp, 2013b.

socher, r., karpathy, a., le, q. v., manning, c. d., and
ng, a. y. grounded id152 for    nding
and describing images with sentences. in acl, 2014.

