language to logical form with neural attention

li dong and mirella lapata

institute for language, cognition and computation

school of informatics, university of edinburgh

10 crichton street, edinburgh eh8 9ab

li.dong@ed.ac.uk, mlap@inf.ed.ac.uk

6
1
0
2

 

n
u
j
 

6

 
 
]
l
c
.
s
c
[
 
 

2
v
0
8
2
1
0

.

1
0
6
1
:
v
i
x
r
a

abstract

templates,

id29 aims at mapping nat-
ural
language to machine interpretable
meaning representations. traditional ap-
proaches rely on high-quality lexicons,
manually-built
and linguis-
tic features which are either domain-
or representation-speci   c.
in this pa-
per we present a general method based
on an attention-enhanced encoder-decoder
model. we encode input utterances into
vector representations, and generate their
logical forms by conditioning the output
sequences or trees on the encoding vec-
tors. experimental results on four datasets
show that our approach performs compet-
itively without using hand-engineered fea-
tures and is easy to adapt across domains
and meaning representations.

1

introduction

id29 is the task of translating text
to a formal meaning representation such as log-
ical forms or structured queries. there has re-
cently been a surge of interest in developing ma-
chine learning methods for id29 (see
the references in section 2), due in part to the
existence of corpora containing utterances anno-
tated with formal meaning representations. fig-
ure 1 shows an example of a question (left hand-
side) and its annotated logical form (right hand-
side), taken from jobs (tang and mooney, 2001),
a well-known id29 benchmark. in or-
der to predict the correct logical form for a given
utterance, most previous systems rely on prede-
   ned templates and manually designed features,
which often render the parsing model domain- or
representation-speci   c.
in this work, we aim to
use a simple yet effective method to bridge the gap
between natural language and logical form with
minimal domain knowledge.

figure 1: input utterances and their logical forms
are encoded and decoded with neural networks.
an attention layer is used to learn soft alignments.

encoder-decoder architectures based on recur-
rent neural networks have been successfully ap-
plied to a variety of nlp tasks ranging from syn-
tactic parsing (vinyals et al., 2015a), to machine
translation (kalchbrenner and blunsom, 2013;
cho et al., 2014; sutskever et al., 2014), and
image description generation (karpathy and fei-
fei, 2015; vinyals et al., 2015b). as shown in
figure 1, we adapt the general encoder-decoder
paradigm to the id29 task. our
model learns from natural language descriptions
paired with meaning representations; it encodes
sentences and decodes logical forms using recur-
rent neural networks with long short-term memory
(lstm) units. we present two model variants,
the    rst one treats id29 as a vanilla
sequence transduction task, whereas our second
model is equipped with a hierarchical tree decoder
which explicitly captures the compositional struc-
ture of logical forms. we also introduce an atten-
tion mechanism (bahdanau et al., 2015; luong et
al., 2015b) allowing the model to learn soft align-
ments between natural language and logical forms
and present an argument identi   cation step to han-
dle rare mentions of entities and numbers.

evaluation results demonstrate that compared to
previous methods our model achieves similar or
better performance across datasets and meaning
representations, despite using no hand-engineered
domain- or representation-speci   c features.

sequence encodersequence/tree decoderlstmanswer(j,(company(j,'microsoft'),job(j),not((req_deg(j,'bscs')))))attention layerlstmwhat microsoft jobs do not require a bscs?input utterancelogical form2 related work

our work synthesizes two strands of research,
namely id29 and the encoder-decoder
architecture with neural networks.

the problem of learning semantic parsers has
received signi   cant attention, dating back to
woods (1973). many approaches learn from sen-
tences paired with logical forms following vari-
ous modeling strategies. examples include the
use of parsing models (miller et al., 1996; ge and
mooney, 2005; lu et al., 2008; zhao and huang,
2015), inductive logic programming (zelle and
mooney, 1996; tang and mooney, 2000; thom-
spon and mooney, 2003), probabilistic automata
(he and young, 2006), string/tree-to-tree transfor-
mation rules (kate et al., 2005), classi   ers based
on string kernels (kate and mooney, 2006), ma-
chine translation (wong and mooney, 2006; wong
and mooney, 2007; andreas et al., 2013), and
id35 induction tech-
niques (zettlemoyer and collins, 2005; zettle-
moyer and collins, 2007; kwiatkowski et al.,
2010; kwiatkowski et al., 2011). other work
learns semantic parsers without relying on logical-
from annotations, e.g., from sentences paired with
conversational logs (artzi and zettlemoyer, 2011),
system demonstrations (chen and mooney, 2011;
goldwasser and roth, 2011; artzi and zettle-
moyer, 2013), question-answer pairs (clarke et
al., 2010; liang et al., 2013), and distant supervi-
sion (krishnamurthy and mitchell, 2012; cai and
yates, 2013; reddy et al., 2014).

our model learns from natural language de-
scriptions paired with meaning representations.
most previous systems rely on high-quality lex-
templates, and features
icons, manually-built
which are either domain- or
representation-
speci   c. we instead present a general method that
can be easily adapted to different domains and
meaning representations. we adopt the general
encoder-decoder framework based on neural net-
works which has been recently repurposed for var-
ious nlp tasks such as syntactic parsing (vinyals
et al., 2015a), machine translation (kalchbrenner
and blunsom, 2013; cho et al., 2014; sutskever et
al., 2014), image description generation (karpathy
and fei-fei, 2015; vinyals et al., 2015b), ques-
tion answering (hermann et al., 2015), and sum-
marization (rush et al., 2015).

mei et al. (2016) use a sequence-to-sequence
model to map navigational instructions to actions.

|a|(cid:89)

t=1

our model works on more well-de   ned meaning
representations (such as prolog and lambda cal-
culus) and is conceptually simpler;
it does not
employ bidirectionality or multi-level alignments.
grefenstette et al. (2014) propose a different ar-
chitecture for id29 based on the com-
bination of two neural network models. the    rst
model learns shared representations from pairs of
questions and their translations into knowledge
base queries, whereas the second model generates
the queries conditioned on the learned representa-
tions. however, they do not report empirical eval-
uation results.

3 problem formulation
our aim is to learn a model which maps natural
language input q = x1        x|q| to a logical form
representation of its meaning a = y1        y|a|. the
id155 p (a|q) is decomposed as:

p (a|q) =

p (yt|y<t, q)

(1)

where y<t = y1        yt   1.

our method consists of an encoder which en-
codes natural language input q into a vector repre-
sentation and a decoder which learns to generate
y1,       , y|a| conditioned on the encoding vector.
in the following we describe two models varying
in the way in which p (a|q) is computed.
3.1 sequence-to-sequence model
this model regards both input q and output a as
sequences. as shown in figure 2, the encoder and
decoder are two different l-layer recurrent neural
networks with long short-term memory (lstm)
units which recursively process tokens one by one.
the    rst |q| time steps belong to the encoder, while
the following |a| time steps belong to the decoder.
t     rn denote the hidden vector at time
let hl
step t and layer l. hl

t is then computed by:

(cid:16)

(cid:17)

hl
t = lstm

t   1, hl   1
hl

t

(2)

where lstm refers to the lstm function being
used. in our experiments we follow the architec-
ture described in zaremba et al. (2015), however
other types of gated id180 are pos-
sible (e.g., cho et al. (2014)). for the encoder,
t = wqe(xt) is the word vector of the current
h0
input token, with wq     rn  |vq| being a parame-
ter matrix, and e(  ) the index of the corresponding

figure 2:
model with two-layer recurrent neural networks.

sequence-to-sequence (id195)

once the tokens of

token. for the decoder, h0
t = wae(yt   1) is the
word vector of the previous predicted word, where
wa     rn  |va|. notice that the encoder and de-
coder have different lstm parameters.
sequence
the input
x1,       , x|q| are encoded into vectors,
they are
used to initialize the hidden states of the    rst time
step in the decoder. next, the hidden vector of the
in the decoder is used to pre-
topmost lstm hl
t
dict the t-th output token as:

p (yt|y<t, q) = softmax(cid:0)wohl

(3)
where wo     r|va|  n is a parameter matrix, and
e (yt)     {0, 1}|va| a one-hot vector for computing
yt   s id203 from the predicted distribution.

(cid:1)(cid:124)

e (yt)

we augment every sequence with a    start-of-
sequence    <s> and    end-of-sequence    </s> to-
ken. the generation process terminates once </s>
is predicted. the id155 of gener-
ating the whole sequence p (a|q) is then obtained
using equation (1).

t

3.2 sequence-to-tree model
the id195 model has a potential drawback in
that it ignores the hierarchical structure of logical
forms. as a result, it needs to memorize various
pieces of auxiliary information (e.g., bracket pairs)
to generate well-formed output. in the following
we present a hierarchical tree decoder which is
more faithful to the compositional nature of mean-
ing representations. a schematic description of
the model is shown in figure 3.

the present model shares the same encoder with
the sequence-to-sequence model described in sec-
tion 3.1 (essentially it learns to encode input q as
vectors). however, its decoder is fundamentally
different as it generates logical forms in a top-
down manner. in order to represent tree structure,

figure 3: sequence-to-tree (seq2tree) model
with a hierarchical tree decoder.

we de   ne a    nonterminal    <n> token which in-
dicates subtrees. as shown in figure 3, we pre-
process the logical form    lambda $0 e (and (>(de-
parture time $0) 1600:ti) (from $0 dallas:ci))    to a
tree by replacing tokens between pairs of brackets
with nonterminals. special tokens <s> and <(>
denote the beginning of a sequence and nontermi-
nal sequence, respectively (omitted from figure 3
due to lack of space). token </s> represents the
end of sequence.

after encoding input q, the hierarchical tree de-
coder uses recurrent neural networks to generate
tokens at depth 1 of the subtree corresponding to
parts of logical form a.
if the predicted token
is <n>, we decode the sequence by conditioning
on the nonterminal   s hidden vector. this process
terminates when no more nonterminals are emit-
ted. in other words, a sequence decoder is used to
hierarchically generate the tree structure.

in contrast to the sequence decoder described
in section 3.1, the current hidden state does not
only depend on its previous time step. in order to
better utilize the parent nonterminal   s information,
we introduce a parent-feeding connection where
the hidden vector of the parent nonterminal is con-
catenated with the inputs and fed into lstm.

as an example, figure 4 shows the decoding
tree corresponding to the logical form    a b (c)   ,
where y1        y6 are predicted tokens, and t1        t6
denote different time steps. span    (c)    corre-
sponds to a subtree. decoding in this example has
two steps: once input q has been encoded, we    rst
generate y1        y4 at depth 1 until token </s> is

lstmlstmlstmlstmlstmlstmlstmlstmlstmlstmlstmlstmlstmlstmlstmlstmlambda$0eand<n>lstmlstmlstmlstmlstmlstm<n><n></s>lstm</s>fromlstmlstmlstmlstm$0dallas:ci</s>>lstmlstmlstmlstm<n>1600:ti</s>lstmlstmdeparture_time$0lstm</s>parent feedingstart decodinglstmencoder unitlstmdecoder unit<n>nonterminalfigure 4: a seq2tree decoding example for the
logical form    a b (c)   .

predicted; next, we generate y5, y6 by condition-
ing on nonterminal t3   s hidden vectors. the prob-
ability p (a|q) is the product of these two sequence
decoding steps:

p (a|q) = p (y1y2y3y4|q) p (y5y6|y   3, q)

(4)

where equation (3) is used for the prediction of
each output token.

3.3 attention mechanism
as shown in equation (3), the hidden vectors of
the input sequence are not directly used in the
decoding process. however, it makes intuitively
sense to consider relevant information from the in-
put to better predict the current token. following
this idea, various techniques have been proposed
to integrate encoder-side information (in the form
of a context vector) at each time step of the de-
coder (bahdanau et al., 2015; luong et al., 2015b;
xu et al., 2015).

as shown in figure 5, in order to    nd rele-
vant encoder-side context for the current hidden
state hl
t of decoder, we compute its attention score
with the k-th hidden state in the encoder as:

(cid:80)|q|
k    hl
t }
exp{hl
j    hl
j=1 exp{hl
t }

st
k =

(5)

1 ,       , hl|q| are the top-layer hidden vec-
where hl
tors of the encoder. then, the context vector is the
weighted sum of the hidden vectors in the encoder:

ct =

st
khl
k

(6)

k=1

in lieu of equation (3), we further use this con-
text vector which acts as a summary of the encoder
to compute the id203 of generating yt as:

t = tanh(cid:0)w1hl

t + w2ct(cid:1)

hatt

(7)

|q|(cid:88)

figure 5: attention scores are computed by the
current hidden vector and all the hidden vectors of
encoder. then, the encoder-side context vector ct
is obtained in the form of a weighted sum, which
is further used to predict yt.

p (yt|y<t, q) = softmax(cid:0)wohatt

(cid:1)(cid:124)

t

e (yt)

(8)
where wo     r|va|  n and w1, w2     rn  n are
three parameter matrices, and e (yt) is a one-hot
vector used to obtain yt   s id203.
3.4 model training
our goal is to maximize the likelihood of the gen-
erated logical forms given natural language utter-
ances as input. so the objective function is:

minimize    (cid:88)

(q,a)   d

log p (a|q)

(9)

where d is the set of all natural language-logical
form training pairs, and p (a|q) is computed as
shown in equation (1).

the rmsprop algorithm (tieleman and hin-
ton, 2012) is employed to solve this non-convex
optimization problem. moreover, dropout is used
for regularizing the model (zaremba et al., 2015).
speci   cally, dropout operators are used between
different lstm layers and for the hidden lay-
ers before the softmax classi   ers. this technique
can substantially reduce over   tting, especially on
datasets of small size.

id136

3.5
at test time, we predict the logical form for an in-
put utterance q by:

a(cid:48)

  a = arg max

(10)
where a(cid:48) represents a candidate output. how-
ever, it is impractical to iterate over all possible
results to obtain the optimal prediction. accord-
ing to equation (1), we decompose the probabil-
ity p (a|q) so that we can use greedy search (or
id125) to generate tokens one by one.

p(cid:0)a(cid:48)|q(cid:1)

t1t2t3t4t5t6y1=ay3=<n><s>qy6=</s><(>y4=</s>y2=by5=clstmlstmlstmlstmlstmattentionscoresand    job(ans), salary greater than(ans, num0,
year)   . we use the pre-processed examples as
training data. at id136 time, we also mask en-
tities and numbers with their types and ids. once
we obtain the decoding result, a post-processing
step recovers all the markers typei to their corre-
sponding logical constants.

4 experiments

we compare our method against multiple previ-
ous systems on four datasets. we describe these
datasets below, and present our experimental set-
tings and results. finally, we conduct model anal-
ysis in order to understand what the model learns.
the code is available at https://github.
com/donglixp/lang2logic.

4.1 datasets
our model was trained on the following datasets,
covering different domains and using different
meaning representations. examples for each do-
main are shown in table 1.

jobs this benchmark dataset contains 640
queries to a database of job listings. speci   cally,
questions are paired with prolog-style queries. we
used the same training-test split as zettlemoyer
and collins (2005) which contains 500 training
and 140 test instances. values for the variables
company, degree,
location,
job area, and number are identi   ed.

language, platform,

geo this is a standard id29 bench-
mark which contains 880 queries to a database of
u.s. geography. geo has 880 instances split into
a training set of 680 training examples and 200
test examples (zettlemoyer and collins, 2005).
we used the same meaning representation based
on lambda-calculus as kwiatkowski et al. (2011).
values for the variables city, state, country, river,
and number are identi   ed.

atis this dataset has 5, 410 queries to a    ight
booking system. the standard split has 4, 480
training instances, 480 development instances, and
450 test instances.
sentences are paired with
lambda-calculus expressions. values for the vari-
ables date, time, city, aircraft code, airport, airline,
and number are identi   ed.

ifttt quirk et al. (2015) created this dataset
by extracting a large number of if-this-then-that

algorithm 1 describes the decoding process for
seq2tree. the time complexity of both de-
coders is o(|a|), where |a| is the length of out-
put. the extra computation of seq2tree com-
pared with id195 is to maintain the nonter-
minal queue, which can be ignored because most
of time is spent on matrix operations. we imple-
ment the hierarchical tree decoder in a batch mode,
so that it can fully utilize gpus. speci   cally, as
shown in algorithm 1, every time we pop multi-
ple nonterminals from the queue and decode these
nonterminals in one batch.

3.6 argument identi   cation
the majority of id29 datasets have
been developed with question-answering in mind.
in the typical application setting, natural language
questions are mapped into logical forms and ex-
ecuted on a knowledge base to obtain an answer.
due to the nature of the question-answering task,
many natural language utterances contain entities
or numbers that are often parsed as arguments in
the logical form. some of them are unavoidably
rare or do not appear in the training set at all (this
is especially true for small-scale datasets). con-
ventional sequence encoders simply replace rare
words with a special unknown word symbol (lu-
ong et al., 2015a; jean et al., 2015), which would
be detrimental for id29.

we have developed a simple procedure for ar-
gument identi   cation. speci   cally, we identify
entities and numbers in input questions and re-
place them with their type names and unique
ids. for instance, we pre-process the training
example    jobs with a salary of 40000    and its
logical form    job(ans), salary greater than(ans,
40000, year)    as    jobs with a salary of num0   

geo

dataset length
9.80
jobs
22.90
7.60
19.10
11.10
28.10
6.95
21.80

ifttt

atis

example
what microsoft jobs do not require a bscs?
answer(company(j,   microsoft   ),job(j),not((req deg(j,   bscs   ))))
what is the population of the state with the largest area?
(population:i (argmax $0 (state:t $0) (area:i $0)))
dallas to san francisco leaving after 4 in the afternoon please
(lambda $0 e (and (>(departure time $0) 1600:ti) (from $0 dallas:ci) (to $0 san francisco:ci)))
turn on heater when temperature drops below 58 degree
trigger: weather - current temperature drops below - ((temperature (58)) (degrees in (f)))
action: wemo insight switch - turn on - ((which switch? (      )))

table 1: examples of natural language descriptions and their meaning representations from four datasets.
the average length of input and output sequences is shown in the second column.

recipes from the ifttt website1. recipes are sim-
ple programs with exactly one trigger and one ac-
tion which users specify on the site. whenever the
conditions of the trigger are satis   ed, the action
is performed. actions typically revolve around
home security (e.g.,    turn on my lights when i ar-
rive home   ), automation (e.g.,    text me if the door
opens   ), well-being (e.g.,    remind me to drink
water if i   ve been at a bar for more than two
hours   ), and so on. triggers and actions are se-
lected from different channels (160 in total) rep-
resenting various types of services, devices (e.g.,
android), and knowledge sources (such as espn
or gmail).
in the dataset, there are 552 trigger
functions from 128 channels, and 229 action func-
tions from 99 channels. we used quirk et al.   s
(2015) original split which contains 77, 495 train-
ing, 5, 171 development, and 4, 294 test examples.
the ifttt programs are represented as abstract
syntax trees and are paired with natural language
descriptions provided by users (see table 1). here,
numbers and urls are identi   ed.

4.2 settings
natural language sentences were lowercased; mis-
spellings were corrected using a dictionary based
on the wikipedia list of common misspellings.
words were stemmed using nltk (bird et al.,
2009). for ifttt, we    ltered tokens, channels
and functions which appeared less than    ve times
in the training set. for the other datasets, we    l-
tered input words which did not occur at least two
times in the training set, but kept all tokens in
the logical forms. plain string matching was em-
ployed to identify augments as described in sec-
tion 3.6. more sophisticated approaches could be
used, however we leave this future work.

model hyper-parameters were cross-validated

1http://www.ifttt.com

method
cocktail (tang and mooney, 2001)
precise (popescu et al., 2003)
zc05 (zettlemoyer and collins, 2005)
dcs+l (liang et al., 2013)
tisp (zhao and huang, 2015)
id195

    attention
    argument
    attention

seq2tree

accuracy

79.4
88.0
79.3
90.7
85.0
87.1
77.9
70.7
90.0
83.6

table 2: evaluation results on jobs.

on the training set for jobs and geo. we used
the standard development sets for atis and ifttt.
we used the rmsprop algorithm (with batch size
set to 20) to update the parameters. the smoothing
constant of rmsprop was 0.95. gradients were
clipped at 5 to alleviate the exploding gradient
problem (pascanu et al., 2013). parameters were
randomly initialized from a uniform distribution
u (   0.08, 0.08). a two-layer lstm was used for
ifttt, while a one-layer lstm was employed
for the other domains. the dropout rate was se-
lected from {0.2, 0.3, 0.4, 0.5}. dimensions of
hidden vector and id27 were selected
from {150, 200, 250}. early stopping was used
to determine the number of epochs.
input sen-
tences were reversed before feeding into the en-
coder (sutskever et al., 2014). we use greedy
search to generate logical forms during id136.
notice that two decoders with shared word em-
beddings were used to predict triggers and actions
for ifttt, and two softmax classi   ers are used to
classify channels and functions.

4.3 results

we    rst discuss the performance of our model on
jobs, geo, and atis, and then examine our re-
sults on ifttt. tables 2   4 present comparisons
against a variety of systems previously described

method
scissor (ge and mooney, 2005)
krisp (kate and mooney, 2006)
wasp (wong and mooney, 2006)
  -wasp (wong and mooney, 2007)
lnlz08 (lu et al., 2008)
zc05 (zettlemoyer and collins, 2005)
zc07 (zettlemoyer and collins, 2007)
ubl (kwiatkowski et al., 2010)
fubl (kwiatkowski et al., 2011)
kcaz13 (kwiatkowski et al., 2013)
dcs+l (liang et al., 2013)
tisp (zhao and huang, 2015)
id195

    attention
    argument
    attention

seq2tree

accuracy

72.3
71.7
74.8
86.6
81.8
79.3
86.1
87.9
88.6
89.0
87.9
88.9
84.6
72.9
68.6
87.1
76.8

table 3: evaluation results on geo. 10-fold cross-
validation is used for the systems shown in the top
half of the table. the standard split of zc05 is
used for all other systems.

method
zc07 (zettlemoyer and collins, 2007)
ubl (kwiatkowski et al., 2010)
fubl (kwiatkowski et al., 2011)
gusp-full (poon, 2013)
gusp++ (poon, 2013)
tisp (zhao and huang, 2015)
id195

    attention
    argument
    attention

seq2tree

accuracy

84.6
71.4
82.8
74.8
83.5
84.2
84.2
75.7
72.3
84.6
77.5

table 4: evaluation results on atis.

in the literature. we report results with the full
models (id195, seq2tree) and two abla-
tion variants, i.e., without an attention mechanism
(   attention) and without argument identi   cation
(   argument). we report accuracy which is de-
   ned as the proportion of the input sentences that
are correctly parsed to their gold standard logical
forms. notice that dcs+l, kcaz13 and gusp
output answers directly, so accuracy in this setting
is de   ned as the percentage of correct answers.

overall, seq2tree is superior to id195.
this is to be expected since seq2tree ex-
plicitly models compositional structure. on the
jobs and geo datasets which contain logical
forms with nested structures, seq2tree out-
performs id195 by 2.9% and 2.5%, respec-
tively. seq2tree achieves better accuracy over
id195 on atis too, however, the difference is
smaller, since atis is a simpler domain without
complex nested structures. we    nd that adding at-

method
retrieval
phrasal
sync
classi   er
posclass
id195

    attention
    argument
    attention

seq2tree

channel

28.9
19.3
18.1
48.8
50.0
54.3
54.0
53.9
55.2
54.3

+func
20.2
11.3
10.6
35.2
36.9
39.2
37.9
38.6
40.1
38.2

f1
41.7
35.3
35.1
48.4
49.3
50.1
49.8
49.7
50.4
50.0

(a) omit non-english.

channel

seq2tree

    attention
    argument
    attention
(b) omit non-english & unintelligible.

channel

method
retrieval
phrasal
sync
classi   er
posclass
id195

method
retrieval
phrasal
sync
classi   er
posclass
id195

    attention
    argument
    attention

seq2tree

36.8
27.8
26.7
64.8
67.2
68.8
68.7
68.8
69.6
68.7

43.3
37.2
36.5
79.3
81.4
87.8
88.3
86.8
89.7
87.6

+func
25.4
16.4
15.5
47.2
50.4
50.5
48.9
50.4
51.4
49.5

+func
32.3
23.5
24.1
66.2
71.0
75.2
73.8
74.9
78.4
74.9

f1
49.0
39.9
37.6
56.5
57.7
60.3
59.5
59.7
60.4
60.2

f1
56.2
45.5
42.8
65.0
66.5
73.7
72.9
70.8
74.2
73.5

(c)     3 turkers agree with gold.

table 5: evaluation results on ifttt.

tention substantially improves performance on all
three datasets. this underlines the importance of
utilizing soft alignments between inputs and out-
puts. we further analyze what the attention layer
learns in figure 6. moreover, our results show
that argument identi   cation is critical for small-
scale datasets. for example, about 92% of city
names appear less than 4 times in the geo train-
ing set, so it is dif   cult to learn reliable parame-
ters for these words. in relation to previous work,
the proposed models achieve comparable or better
performance. importantly, we use the same frame-
work (id195 or seq2tree) across datasets
and meaning representations (prolog-style logi-
cal forms in jobs and id198 in the
other two datasets) without modi   cation. despite
this relatively simple approach, we observe that
seq2tree ranks second on jobs, and is tied for
   rst place with zc07 on atis.

(a) which jobs pay num0 that do

not require a degid0

(b) what   s    rst class fare

round trip from ci0 to ci1

(c) what is the earliest    ight
from ci0 to ci1 tomorrow

(d) what is the highest elevation

in the co0

figure 6: alignments (same color rectangles) produced by the attention mechanism (darker color rep-
resents higher attention score). input sentences are reversed and stemmed. model output is shown for
id195 (a, b) and seq2tree (c, d).

we illustrate examples of alignments produced
by id195 in figures 6a and 6b. alignments
produced by seq2tree are shown in figures 6c
and 6d. matrices of attention scores are com-
puted using equation (5) and are represented in
grayscale. aligned input words and logical form
predicates are enclosed in (same color) rectan-
gles whose overlapping areas contain the attention
scores. also notice that attention scores are com-
puted by lstm hidden vectors which encode con-
text information rather than just the words in their
current positions. the examples demonstrate that
the attention mechanism can successfully model
the correspondence between sentences and logi-
cal forms, capturing reordering (figure 6b), many-
to-many (figure 6a), and many-to-one alignments
(figures 6c,d).

for ifttt, we follow the same evaluation pro-
tocol introduced in quirk et al. (2015). the
dataset is extremely noisy and measuring accu-
racy is problematic since predicted abstract syn-
tax trees (asts) almost never exactly match the
gold standard. quirk et al. view an ast as a
set of productions and compute balanced f1 in-
stead which we also adopt. the    rst column in
table 5 shows the percentage of channels selected
correctly for both triggers and actions. the sec-
ond column measures accuracy for both channels
and functions. the last column shows balanced
f1 against the gold tree over all productions in

the proposed derivation. we compare our model
against posclass, the method introduced in quirk
et al. and several of their baselines. posclass is
reminiscent of krisp (kate and mooney, 2006),
it learns distributions over productions given in-
put sentences represented as a bag of linguistic
features. the retrieval baseline    nds the closest
description in the training data based on charac-
ter string-edit-distance and returns the recipe for
that training program. the phrasal method uses
phrase-based machine translation to generate the
recipe, whereas sync extracts synchronous gram-
mar rules from the data, essentially recreating
wasp (wong and mooney, 2006). finally, they
use a binary classi   er to predict whether a produc-
tion should be present in the derivation tree corre-
sponding to the description.

quirk et al. (2015) report results on the full
test data and smaller subsets after noise    lter-
ing, e.g., when non-english and unintelligible de-
scriptions are removed (tables 5a and 5b). they
also ran their system on a high-quality subset of
description-program pairs which were found in the
gold standard and at least three humans managed
to independently reproduce (table 5c). across all
subsets our models outperforms posclass and re-
lated baselines. again we observe that seq2tree
consistently outperforms id195, albeit with a
small margin. compared to the previous datasets,
the attention mechanism and our argument iden-

</s>degid0arequirnotdothatnum0payjobwhich<s>job(ans),salary_greater_than(ans,num0,year),\+((req_deg(ans,degid0)))</s></s>ci1toci0fromtriproundfareclassfirstwhat<s>(lambda$0e(exists$1(and(round_trip$1)(class_type$1first:cl)(from$1ci0)(to$1ci1)(=(fare$1)$0))))</s></s>tomorrowci1toci0fromflightearliesttheiswhat<s>argmin$0(and(flight$0)(from$0ci0)(to$0ci1)(tomorrow$0))(departure_time$0)</s></s>co0theinelevhighesttheiswhat<s>argmax$0(and(place:t$0)(loc:t$0co0))(elevation:i$0)</s>ti   cation method yield less of an improvement.
this may be due to the size of quirk et al. (2015)
and the way it was created     user curated descrip-
tions are often of low quality, and thus align very
loosely to their corresponding asts.

4.4 error analysis
finally, we inspected the output of our model in
order to identify the most common causes of errors
which we summarize below.
under-mapping the attention model used in
our experiments does not take the alignment his-
tory into consideration. so, some question words,
expecially in longer questions, may be ignored in
the decoding process. this is a common prob-
lem for encoder-decoder models and can be ad-
dressed by explicitly modelling the decoding cov-
erage of the source words (tu et al., 2016; cohn
et al., 2016). keeping track of the attention his-
tory would help adjust future attention and guide
the decoder towards untranslated source words.
argument identi   cation some mentions are
incorrectly identi   ed as arguments. for example,
the word may is sometimes identi   ed as a month
when it is simply a modal verb. moreover, some
argument mentions are ambiguous. for instance,
6 o   clock can be used to express either 6 am or 6
pm. we could disambiguate arguments based on
contextual information. the execution results of
logical forms could also help prune unreasonable
arguments.
rare words because the data size of jobs,
geo, and atis is relatively small, some question
words are rare in the training set, which makes it
hard to estimate reliable parameters for them. one
solution would be to learn id27s on
unannotated text data, and then use these as pre-
trained vectors for question words.

5 conclusions
in this paper we presented an encoder-decoder
neural network model for mapping natural lan-
guage descriptions to their meaning representa-
tions. we encode natural language utterances
into vectors and generate their corresponding log-
ical forms as sequences or trees using recur-
rent neural networks with long short-term mem-
ory units. experimental results show that en-
hancing the model with a hierarchical tree de-
coder and an attention mechanism improves per-

formance across the board. extensive compar-
isons with previous methods show that our ap-
proach performs competitively, without recourse
to domain- or representation-speci   c features. di-
rections for future work are many and varied. for
example, it would be interesting to learn a model
from question-answer pairs without access to tar-
get logical forms. beyond id29, we
would also like to apply our seq2tree model
to related id170 tasks such as con-
stituency parsing.
acknowledgments we would like to thank
luke zettlemoyer and tom kwiatkowski for shar-
ing the atis dataset. the support of the european
research council under award number 681760
   translating multiple modalities into text    is
gratefully acknowledged.

references
[andreas et al.2013] jacob andreas, andreas vlachos,
and stephen clark. 2013. id29 as ma-
chine translation. in proceedings of the 51st acl,
pages 47   52, so   a, bulgaria.

[artzi and zettlemoyer2011] yoav artzi

and luke
id64 semantic
zettlemoyer.
in proceedings of the
parsers from conversations.
2011 emnlp, pages 421   432, edinburgh, united
kingdom.

2011.

[artzi and zettlemoyer2013] yoav artzi

and luke
zettlemoyer.
2013. weakly supervised learning
of semantic parsers for mapping instructions to
actions. tacl, 1(1):49   62.

[bahdanau et al.2015] dzmitry bahdanau, kyunghyun
cho, and yoshua bengio. 2015. neural machine
translation by jointly learning to align and translate.
in proceedings of the iclr, san diego, california.

[bird et al.2009] steven bird, ewan klein, and edward
loper. 2009. natural language processing with
python. o   reilly media.

[cai and yates2013] qingqing cai

and alexander
yates. 2013. id29 freebase: towards
in 2nd joint con-
open-domain id29.
ference on lexical and computational semantics,
pages 328   338, atlanta, georgia.

[chen and mooney2011] david l. chen and ray-
mond j. mooney. 2011. learning to interpret nat-
ural language navigation instructions from observa-
tions. in proceedings of the 15th aaai, pages 859   
865, san francisco, california.

[cho et al.2014] kyunghyun cho, bart van merrien-
boer, caglar gulcehre, dzmitry bahdanau, fethi
bougares, holger schwenk, and yoshua bengio.

2014. learning phrase representations using id56
encoder-decoder for id151.
in proceedings of the 2014 emnlp, pages 1724   
1734, doha, qatar.

[clarke et al.2010] james clarke, dan goldwasser,
ming-wei chang, and dan roth. 2010. driving
id29 from the world   s response. in pro-
ceedings of conll, pages 18   27, uppsala, swe-
den.

[cohn et al.2016] trevor cohn, cong duy vu hoang,
ekaterina vymolova, kaisheng yao, chris dyer,
and gholamreza haffari.
incorporating
structural alignment biases into an attentional neu-
in proceedings of the 2016
ral translation model.
naacl, san diego, california.

2016.

[ge and mooney2005] ruifang ge and raymond j.
mooney. 2005. a statistical semantic parser that
integrates syntax and semantics. in proceedings of
conll, pages 9   16, ann arbor, michigan.

[goldwasser and roth2011] dan goldwasser and dan
roth. 2011. learning from natural instructions. in
proceedings of the 22nd ijcai, pages 1794   1800,
barcelona, spain.

[grefenstette et al.2014] edward grefenstette,

phil
blunsom, nando de freitas, and karl moritz
hermann. 2014. a deep architecture for semantic
parsing. in proceedings of the acl 2014 workshop
on id29, atlanta, georgia.

[he and young2006] yulan he and steve young. 2006.
semantic processing using the hidden vector state
model. speech communication, 48(3-4):262   275.

[hermann et al.2015] karl moritz hermann, tomas
kocisky, edward grefenstette, lasse espeholt, will
kay, mustafa suleyman, and phil blunsom. 2015.
teaching machines to read and comprehend. in ad-
vances in neural information processing systems
28, pages 1684   1692. curran associates, inc.

[jean et al.2015] s  ebastien jean, kyunghyun cho,
roland memisevic, and yoshua bengio. 2015. on
using very large target vocabulary for neural ma-
chine translation. in proceedings of 53rd acl and
7th ijcnlp, pages 1   10, beijing, china.

[kalchbrenner and blunsom2013] nal kalchbrenner
and phil blunsom. 2013. recurrent continuous
in proceedings of the 2013
translation models.
emnlp, pages 1700   1709, seattle, washington.

[karpathy and fei-fei2015] andrej karpathy

and
li fei-fei. 2015. deep visual-semantic alignments
in proceedings
for generating image descriptions.
of cvpr, pages 3128   3137, boston, massachusetts.

[kate et al.2005] rohit j. kate, yuk wah wong, and
raymond j. mooney. 2005. learning to transform
natural to formal languages. in proceedings of the
20th aaai, pages 1062   1068, pittsburgh, pennsyl-
vania.

[krishnamurthy and mitchell2012] jayant

krish-
2012. weakly
namurthy and tom mitchell.
in pro-
supervised training of semantic parsers.
ceedings of the 2012 emnlp, pages 754   765, jeju
island, korea.

[kwiatkowski et al.2010] tom kwiatkowski,

luke
zettlemoyer, sharon goldwater, and mark steed-
man. 2010. inducing probabilistic id35 grammars
from logical form with higher-order uni   cation. in
proceedings of the 2010 emnlp, pages 1223   1233,
cambridge, massachusetts.

[kwiatkowski et al.2011] tom kwiatkowski,

luke
zettlemoyer, sharon goldwater, and mark steed-
lexical generalization in id35
man.
in pro-
grammar induction for id29.
ceedings of the 2011 emnlp, pages 1512   1523,
edinburgh, united kingdom.

2011.

[kwiatkowski et al.2013] tom kwiatkowski, eunsol
choi, yoav artzi, and luke zettlemoyer.
2013.
scaling semantic parsers with on-the-   y ontology
in proceedings of the 2013 emnlp,
matching.
pages 1545   1556, seattle, washington.

[liang et al.2013] percy liang, michael i. jordan, and
dan klein. 2013. learning dependency-based com-
positional semantics. computational linguistics,
39(2):389   446.

[lu et al.2008] wei lu, hwee tou ng, wee sun lee,
and luke s. zettlemoyer. 2008. a generative model
for parsing natural language to meaning representa-
in proceedings of the 2008 emnlp, pages
tions.
783   792, honolulu, hawaii.

luong,

[luong et al.2015a] minh-thang

ilya
sutskever, quoc v le, oriol vinyals, and wo-
jciech zaremba. 2015a. addressing the rare word
problem in id4. in proceed-
ings of the 53rd acl and 7th ijcnlp, pages 11   19,
beijing, china.

[luong et al.2015b] thang luong, hieu pham, and
christopher d. manning.
2015b. effective ap-
proaches to attention-based neural machine trans-
lation. in proceedings of the 2015 emnlp, pages
1412   1421, lisbon, portugal.

[mei et al.2016] hongyuan mei, mohit bansal, and
matthew r walter. 2016. listen, attend, and walk:
neural mapping of navigational instructions to ac-
in proceedings of the 30th aaai,
tion sequences.
phoenix, arizona. to appear.

[kate and mooney2006] rohit j. kate and raymond j.
mooney. 2006. using string-kernels for learning se-
mantic parsers. in proceedings of the 21st coling
and 44th acl, pages 913   920, sydney, australia.

[miller et al.1996] scott miller, david stallard, robert
bobrow, and richard schwartz. 1996. a fully sta-
tistical approach to id139. in
acl, pages 55   61.

[pascanu et al.2013] razvan pascanu, tomas mikolov,
and yoshua bengio. 2013. on the dif   culty of train-
ing recurrent neural networks. in proceedings of the
30th icml, pages 1310   1318, atlanta, georgia.

[poon2013] hoifung poon. 2013. grounded unsuper-
vised id29. in proceedings of the 51st
acl, pages 933   943, so   a, bulgaria.

[popescu et al.2003] ana-maria popescu, oren etzioni,
and henry kautz. 2003. towards a theory of natural
language interfaces to databases. in proceedings of
the 8th iui, pages 149   157, miami, florida.

[quirk et al.2015] chris quirk, raymond mooney, and
michel galley. 2015. language to code: learn-
ing semantic parsers for if-this-then-that recipes. in
proceedings of 53rd acl and 7th ijcnlp, pages
878   888, beijing, china.

[reddy et al.2014] siva reddy, mirella lapata, and
large-scale semantic
tacl,

mark steedman.
parsing without question-answer pairs.
2(oct):377   392.

2014.

[rush et al.2015] alexander m. rush, sumit chopra,
and jason weston. 2015. a neural attention model
for abstractive sentence summarization. in proceed-
ings of the 2015 emnlp, pages 379   389, lisbon,
portugal.

[sutskever et al.2014] ilya sutskever, oriol vinyals,
and quoc v le. 2014. sequence to sequence learn-
ing with neural networks. in advances in neural in-
formation processing systems 27, pages 3104   3112.
curran associates, inc.

[tang and mooney2000] lappoon r. tang and ray-
mond j. mooney. 2000. automated construction of
database interfaces: intergrating statistical and rela-
tional learning for id29. in proceedings
of the 2000 emnlp, pages 133   141, hong kong,
china.

[tang and mooney2001] lappoon r. tang and ray-
mond j. mooney. 2001. using multiple clause con-
structors in inductive logic programming for seman-
tic parsing. in proceedings of the 12th ecml, pages
466   477, freiburg, germany.

[thomspon and mooney2003] cynthia a. thomspon
and raymond j. mooney. 2003. acquiring word-
meaning mappings for id139.
journal of arti   cal intelligence research, 18:1   44.

[tieleman and hinton2012] t. tieleman and g. hinton.
2012. lecture 6.5   rmsprop: divide the gradient
by a running average of its recent magnitude. tech-
nical report.

[tu et al.2016] zhaopeng tu, zhengdong lu, yang liu,
xiaohua liu, and hang li. 2016. modeling cover-
age for id4. in proceedings
of the 54th acl, berlin, germany.

[vinyals et al.2015a] oriol vinyals, lukasz kaiser,
terry koo, slav petrov, ilya sutskever, and geoffrey
hinton. 2015a. grammar as a foreign language. in
advances in neural information processing systems
28, pages 2755   2763. curran associates, inc.

[vinyals et al.2015b] oriol vinyals, alexander toshev,
samy bengio, and dumitru erhan. 2015b. show
and tell: a neural image caption generator. in pro-
ceedings of cvpr, pages 3156   3164, boston, mas-
sachusetts.

[wong and mooney2006] yuk wah wong and ray-
mond j. mooney. 2006. learning for semantic pars-
ing with id151. in proceed-
ings of the 2006 naacl, pages 439   446, new york,
new york.

[wong and mooney2007] yuk wah wong and ray-
mond j. mooney.
2007. learning synchronous
grammars for id29 with lambda calcu-
lus. in proceedings of the 45th acl, pages 960   967,
prague, czech republic.

[woods1973] w. a. woods. 1973. progress in natu-
ral language understanding: an application to lunar
geology. in proceedings of the june 4-8, 1973, na-
tional computer conference and exposition, pages
441   450, new york, ny.

[xu et al.2015] kelvin xu, jimmy ba, ryan kiros,
ruslan
kyunghyun cho, aaron courville,
salakhudinov, rich zemel,
and yoshua ben-
gio. 2015. show, attend and tell: neural image
in pro-
id134 with visual attention.
ceedings of
the 32nd icml, pages 2048   2057,
lille, france.

[zaremba et al.2015] wojciech

ilya
sutskever, and oriol vinyals.
recur-
rent neural network id173. in proceedings
of the iclr, san diego, california.

zaremba,
2015.

[zelle and mooney1996] john m. zelle and ray-
mond j. mooney. 1996. learning to parse database
queries using inductive logic programming. in pro-
ceedings of the 19th aaai, pages 1050   1055, port-
land, oregon.

[zettlemoyer and collins2005] luke s. zettlemoyer
and michael collins. 2005. learning to map sen-
tences to logical form: structured classi   cation with
in proceedings
probabilistic categorial grammars.
of the 21st uai, pages 658   666, toronto, on.

[zettlemoyer and collins2007] luke zettlemoyer and
michael collins. 2007. online learning of relaxed
in in
id35 grammars for parsing to logical form.
proceedings of the emnlp-conll, pages 678   687,
prague, czech republic.

[zhao and huang2015] kai zhao and liang huang.
2015. type-driven incremental id29
in proceedings of the 2015
with polymorphism.
naacl, pages 1416   1421, denver, colorado.

