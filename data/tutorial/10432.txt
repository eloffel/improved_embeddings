5
1
0
2

 
c
e
d
7
1

 

 
 
]
e
n
.
s
c
[
 
 

2
v
9
8
8
7
0

.

1
1
5
1
:
v
i
x
r
a

id56 : recurrent library for torch7

nicholas l  eonard

element inc.
new york, ny

sagar waghmare

element inc.
new york, ny

yang wang
element inc.
new york, ny

nick@nikopia.org

sw@discoverelement.com

yw@discoverelement.com

jin-hwa kim

seoul national university
seoul, republic of korea
jnhwkim@snu.ac.kr

abstract

the id56 package provides components for implementing a wide range of recur-
rent neural networks. it is built withing the framework of the torch distribution
for use with the nn package. the components have evolved from 3 iterations, each
adding to the    exibility and capability of the package. all component modules
inherit either the abstractrecurrent or abstractsequencer classes.
strong unit testing, continued backwards compatibility and access to supporting
material are the principles followed during its development. the package is com-
pared against existing implementations of two published papers.

1 introduction

in recent years, deep learning research has seen a resurgence of interest in recurrent neural net-
works (id56). in the scope of our own research, we have developed a package that makes it easy
to implement a wide range of id56s using the torch distribution. the id56 package1 can be used
to implement recurrent neural networks like simple id56s and long short term memory (lstm)
networks. the package is very general and makes heavy use of object-oriented programming to keep
it as simple to use and extend as possible. the sections are divided into an overview of the torch 7
distribution, package components organized historically and principles during its development.

2 torch

torch2 is a scienti   c computing distribution with a focus on deep learning research and applica-
tions [2]. the main interface is accessible through the lua programming language [7], which uses
functions and structures implemented using the c and cuda programming languages. lua is sim-
ple enough to make it easy to implement code for fast execution in c/cuda. torch 7 has fast and
ef   cient support for graphical processing unit (gpu) via the cutorch and cunn packages. the
distribution is used by facebook, google deepmind, twitter, new york university and many other
organizations. through github3, one can access documentation, tutorials and a wide variety of ex-
amples. the project is quite mature as it has been under active development since october 2012.
the distribution is divided into different packages which we will overview in the next sections.

1https://github.com/element-research/id56
2http://torch.ch/
3https://github.com/

1

2.1 torch7

this package is the core of the distribution4. it provides a tensor class for manipulating multi-
dimensional arrays. this is the main class of objects used in torch 7. the tensor supports
common operations like basic id202 sub-routines (blas), random initialization, index-
ing, slicing, transposition, etc. most operations forfloattensor and doubletensor are also
implemented for cudatensors (via the cutorch).

while lua can be used to implement class hierarchies, or more generally, object-oriented program-
ming (oop), the torch package provides utilities such as torch.class for implementing inher-
itance and torch.serialize for serialization. the torch package also provides utilities for
saving objects to disk, unit testing, etc.

2.2 nn

this package implements feed-forward neural networks5. these form a computational    ow-graph
of transformation. they typically learn through id26, which is id119 using
the chain rule [14].
the nn package is very simple as all classes inherit one of either two abstract classes :

    module : differentiable transformations of input to output ;
    criterion : cost function to minimize. outputs a scalar loss;

the nn is used by    rst building a graph of modules using composite (container subclasses) and
component modules, and then training a the resulting neural network on some data.

as an example, a multi-layer id88 (mlp) with 2 layers of hidden units can be assembled as
such:
mlp = nn.sequential()
mlp:add(nn.convert(   bchw   ,    bf   )) -- collapse 3d to 1d
mlp:add(nn.linear(1*28*28, 200))
mlp:add(nn.tanh())
mlp:add(nn.linear(200, 200))
mlp:add(nn.tanh())
mlp:add(nn.linear(200, 10))
mlp:add(nn.logsoftmax()) -- for classi   cation problems

in the above example, the sequential is a container subclass. a call to output =
mlp:forward(input) will iteratively transform the input one module at a time, in order
that these were added to the composite.

to train the mlp module on a dataset, the negative log-likelihood (nll) criterion could be used:
nll = nn.classnllcriterion()

the actual training loop would usually be a variation of the following :
function trainepoch(module, criterion, inputs, targets)

for i=1,inputs:size(1) do

local idx = math.random(1,inputs:size(1))
local input, target = inputs[idx], targets:narrow(1,idx,1)
-- forward
local output = module:forward(input)
local loss = criterion:forward(output, target)
-- backward
local gradoutput = criterion:backward(output, target)
module:zerogradparameters()
local gradinput = module:backward(input, gradoutput)

4https://github.com/torch/torch7
5https://github.com/torch/nn

2

-- update
module:updateparameters(0.1) -- w = w - 0.1*dl/dw

end

end

the above trainepoch function could be used to train the mlp module using the nll criterion
to    t a classi   cation dataset de   ned by the inputs and targets tensors.
the id56 package was designed to be used in the scope of the nn package. this means that its
components must conform to the module and criterion interfaces such that these can be used
in for training with functions like trainepoch.

3 package components

this section is a kind of analysis of the package, exploring its historical development and the com-
ponents that evolved from it. while it would be nice to come up with the    nished product in the    rst
iteration, often times we only get to such a state as time progresses. and in our necessity to maintain
a certain level of backwards compatibility, the    nal product can only really be understood through
its historical development. as such, we have divided the analysis of its components into the 3 major
iterations in which they appeared.

before this package, the only way to implement id56s for variable length sequences was to manually
clone the recurrent modules for each time-step, have these share parameters and write code to apply
these clones over a sequence. this was against the base philosophy of the nn package where every
transformation of input to output should implemented as a module (or composite thereof). so
the id56 package started out as a single recurrent module that internally implemented a general
interface for implementing variations of simple id56s as described in [15, section 2.5-2.8], [10,
section 3.2-3.3] and [1]. more generally, a recurrent module is responsible for managing the cloning,
parameter sharing of the and sequentially applying these internal modules to elements of a sequence.

3.1 first iteration : recurrent module

as a    rst iteration, we wanted to be able to forward a sequence through a recurrent module by
making successive calls to its forward method6 :

-- generate some dummy inputs and gradoutputs sequences
inputs, gradoutputs = {}, {}
for step=1,rho do

inputs[step] = torch.randn(batchsize,inputsize)
gradoutputs[step] = torch.randn(batchsize,inputsize)

end

-- an abstractrecurrent instance
id56 = nn.recurrent(

hiddensize, -- size of the input layer
nn.linear(inputsize,outputsize), -- input layer
nn.linear(outputsize, outputsize), -- recurrent layer
nn.sigmoid(), -- transfer function
rho -- maximum number of time-steps for bptt

)

-- feed-forward and backpropagate through time like this :
for step=1,rho do

id56:forward(inputs[step])
id56:backward(inputs[step], gradoutputs[step])

end
id56:backwardthroughtime() -- call backward on the internal modules
gradinputs = id56.gradinputs

6for reasons of backwards compatibility this use case is still supported

3

id56:updateparameters(0.1)
id56:forget() -- resets the time-step counter

as can be seen by the above example, the original design allowed for the call to forward of
each element in the sequence to be immediately followed by a commensurate call to backward.
since id26 through time (bptt)[14] can only occur after the entire sequence had been
forwarded through the id56, the above calls to backward cannot perform bptt. instead they only
keep a copy of the provided gradoutput for each time-step. the actual bptt required an explicit
call to the backwardthroughtime of all abstractrecurrent instances.

this design also prevented calls to backward from returning a valid gradinput, as these are only
made available after bptt. this is also what necessitated the second argument of the recurrent
constructor, which offers a means for handling previous layers internally.

3.2 second iteration : sequencer and lstm

when the lstm module was being implemented during out second iteration, it quickly became ap-
parent that constraints resulting from our design of the abstractrecurrent were too limiting.
for one, the    rst iteration made it impossible to stack abstractrecurrent instances. how-
ever, as is often the case with the nn package, the problem could be resolved by abstracting these
intricacies away into another module. hence the sequencer was born.

3.2.1 sequencer

the sequencer module is
abstractrecurrent modules like recurrence, recurrent and lstm.
seq = nn.sequencer(module)

a decorator used to abstract

away the

intricacies of

while an abstractrecurrent instance requires a sequence to be presented one element at a
time, each with its own call to forward (and backward), the sequencer forwards an entire
input sequence (a table) to yield the resulting output sequence (a table of the same length). it
also takes care of calling forget, backwardonline and other such abstractrecurrent
speci   c methods.

for example, id56, an abstractrecurrent instance, can forward an input sequence one
forward call at a time:
input = {torch.randn(3,4), torch.randn(3,4), torch.randn(3,4)}
id56:forward(input[1])
id56:forward(input[2])
id56:forward(input[3])

equivalently, we can use a sequencer to forward the entire input sequence at once:
seq = nn.sequencer(id56)
seq:forward(input)

furthermore, the sequencer manages the backward and backwardthroughtime calls to
the decorated module internally. this means that a call to sequencer:backward will return the
appropriate gradinput table.
the sequencer can also take a non-recurrent module 7 and apply it to each element of the input
sequence to produce an output table of the same length. however, in this second iteration of
the package, each sequencer instance could only either decorate a recurrent instance 8, or a
non-recurrent instance. this was not an imposing constraint as it can be subverted by stacking
sequencer instances:
id56 = nn.sequential()

:add(nn.sequencer(nn.linear(inputsize, hiddensize)))

7by non-recurrent module, we mean a module that isn   t an instance of abstractrecurrent, and that

neither contains such instances.

8any abstractrecurrent instance is a recurrent instance.

4

:add(nn.sequencer(nn.lstm(hiddensize, hiddensize)))
:add(nn.sequencer(nn.lstm(hiddensize, hiddensize)))
:add(nn.sequencer(nn.linear(hiddensize, outputsize)))
:add(nn.sequencer(nn.logsoftmax()))

the above was actually the use-case that brought us to this second iteration of the code base. the
objective was to build the stacked networks of lstm layers outlined in [17].

3.2.2 lstm

the lstm module is an implementation of a layer of long-short term memory units[6]. we used
the lstm in [3] as a blueprint for this module as it was the most concise. yet it is also the vanilla
lstm described in [4].
module = nn.lstm(inputsize, outputsize, [rho])

the implementation of the forward method corresponds to the following algorithm:

algorithm 1 long short term memory feed forward
1: it =   (wx   ixt + wh   iht   1 + wc   ict   1 + b1   i)
2: ft =   (wx   f xt + wh   f ht   1 + wc   f ct   1 + b1   f )
3: zt = tanh(wx   cxt + wh   cht1 + b1   c)
4: ct = ftct   1 + itzt
5: ot =   (wx   oxt + wh   oht1 + wc   oct + b1   o)
6: ht = ot tanh(ct)

where ws   q is the weight matrix from s to q, t indexes the time-step, b1   q are the biases leading
into q,   () is the logistic function, xt is the input, it is the input gate (line 1), ft is the forget gate
(line 2), zt is the input to the cell (which we call the hidden) (line 3), ct is the cell (line 4), ot is the
output gate (line 5), and ht is the output of this module (line 6). also note that the weight matrices
from cell to gate vectors are diagonal wc   s, where s is gate i, f , or o.
the lstm module is implemented internally as a composite of existing modules. as in the case of
the recurrent class, a different clone sharing parameters with the internal module is applied to
each time-step. each clone manages its own copy of intermediate representations, which consists
mostly of output and gradinput attributes.

3.2.3 repeater

r = nn.repeater(module, nstep)

while the sequencer applied a decorated module to an input sequence (a table), the repeater
repeatedly applies a module to a single unchanging input. both decorators produce an output
sequence (a table). the repeater was designed to implement things that are recursively applied
to the same input, like recurrent convolutional neural networks (rid98)[13].

the second iteration arose out of the necessity to allow for stacking of recurrent instances, speci   -
cally lstm modules.

3.3 third iteration

the current iteration arose from the reproduction of the recurrent attention model (ram) described
in [11]. the only lacking component to reproduce the ram was the recurrentattention
module.

3.3.1 recurrentattention

this module is similar to the repeater module in that it recursively applies an id56 module to a
   xed input, which in this case is an image.
ram = nn.recurrentattention(id56, action, nstep, hiddensize)

5

the id56 argument is an abstractrecurrent instance which expects a table {x, z} as input where
x is the ram input and z is an action sampled from the action module.

the action is a module that learns using the reinforce learning rule [16]. it samples ac-
tions given the previous time-step   s id56 output. the action module   s outputs are only used
internally to guide the attention of the recurrentattention module.

the implementation of recurrentattention module was a kind of validation of the separa-
tion of functionality between the abstractrecurrent and abstractsequencer classes.
the    rst de   nes general components that handles the recursion from forward to the next, i.e.
one element at a time. it is an abstract class inherited by lstm and recurrent. the second
de   nes how the recurrent component is used for speci   c tasks involving sequences, i.e. one se-
quence of elements at a time. it is an abstract class inherited by sequencer, repeater and
recurrentattention this division of labor happens to be modular enough to allow for imple-
menting most tasks without requiring the writing of new code for both types of modules. what we
mean by this is that research topics will generally explore modi   cations of either abstract classes,
but not both at the same time.
nevertheless, the id56 library was still lacking the    exibility to allow for more complex con   gura-
tions of non-recurrent instances with recurrent instances. the solution to this problem arose from
the observation that recurrentattention expected the action constructor argument to be a
non-recurrent instance. however, to make the recurrentattention module generalize to the
later dram implementation in (citation), it would need to allow composites of both recurrent and
non-recurrent instances for the action argument. again, the easiest way to make this happen, was
to implement a new module, in this case the recursor.

3.3.2 recursor

this module decorates another module to allow it to be used within an abstractsequencer
instance. it does this by making the decorated module conform to the abstractrecurrent
interface, which like the lstm and recurrent classes, this class inherits.
rec = nn.recursor(module[, rho])

for each successive call to updateoutput (i.e. forward), this decorator will call stepclone
on the decorated module. so for each time-step, it will forward the commensurate input through
a commensurate clone of the module. as usual, both the clone and original share parameters and
gradients w.r.t. parameters. 9
so in the second iteration, to id200s, two sequencers were required :
lstm = nn.sequential()

:add(nn.sequencer(nn.lstm(100,100)))
:add(nn.sequencer(nn.lstm(100,100)))

using a recursor, the same model can be assembled with a single sequencer :
lstm = nn.sequencer(

nn.recursor(

nn.sequential()

:add(nn.lstm(100,100))
:add(nn.lstm(100,100))

)

)

actually, the sequencer will wrap any non-recurrent module into a recursor automatically.
so the above model can be further simpli   ed :
lstm = nn.sequencer(

nn.sequential()

:add(nn.lstm(100,100))

9for recurrent modules, the clones and original module are one and the same (i.e. no cloning occurs)

6

:add(nn.lstm(100,100))

)

a non-recurrent instance like linear can also be added between both lstms. in this case, a
linear will be cloned (and have its parameters shared) for each time-step, while the lstms will
handle cloning internally :
lstm = nn.sequencer(

nn.sequential()

:add(nn.lstm(100,100))
:add(nn.linear(100,100))
:add(nn.lstm(100,100))

)

to recapitulate, recurrent instances are expected to manage time-steps internally. non-recurrent
instances can be wrapped by a recursor to yield the same behavior.

so the    nal version of the abstractsequencer subclasses automatically decorate all non-
recurrent instances with a recursor. this allows the recurrentattention module to ac-
cept any type of action module, thus providing the required    exibility to use it to implement the
dram model without any modi   cations to existing modules.

3.3.3 recurrence

the last module introduced in this third iteration is the recurrence module. another
abstractrecurrent subclass, this module is an extremely general container for implementing
recurrences that feedback the previous output alongside the current input to the recurrence.
id56 = nn.recurrence(module, outputsize, ninputdim, [rho])

unlike the older recurrent module, recurrence only requires a single module which imple-
ments the actual recurrence internally. this module should forward an output a tensor (or table)
for the current time-step (output(t)) given an input table : {input(t), output(t-1)}.
using a mix of recursor (say, via sequencer) and recurrence, it is possible to implement
any a very general set of recurrent neural networks, including lstms and simple id56s.

for the    rst step, the recurrence forwards a tensor (or table thereof) of zeros through the recur-
rent layer (like lstm, unlike recurrent).

as an example, let us combine sequencer and recurrence to build a simple id56 for language
modeling :

:add(nn.lookuptable(nindex, hiddensize))
:add(nn.linear(hiddensize, hiddensize)))

-- recurrent module
rm = nn.sequential()

:add(nn.paralleltable()

:add(nn.caddtable())
:add(nn.sigmoid())

id56 = nn.sequencer(

nn.sequential()

:add(nn.recurrence(rm, hiddensize, 1))
:add(nn.linear(hiddensize, nindex))
:add(nn.logsoftmax())

both the input and output of the id56 module will be a table of tensors. for example :

)

end

input = {}
for i=1,rho do

table.insert(input, torch.tensor(batchsize):random(1,nindex))

7

output = id56:forward(input)
assert(#output == #input)

id56s require sequential data. in the above example, the input is a sequence of lookuptable
indices. if the task is to predict the next word given the previous word(s) (i.e. id38),
then the target would also be a sequence of indices.

if however we only wanted to use the rho previous time-steps (words) to predict a single target
word, we could do so by having the output layer depend only on the most recent output(t) of
the id56.

for example if we want to do id31 [12], we could use something like the following :

:add(nn.lookuptable(nindex, hiddensize))
:add(nn.linear(hiddensize, hiddensize)))

-- recurrent module
rm = nn.sequential()

:add(nn.paralleltable()

:add(nn.caddtable())
:add(nn.sigmoid())

-- full id56
id56 = nn.sequential()

:add(nn.sequencer(nn.recurrence(rm, hiddensize, 1)))
:add(nn.selecttable(-1)) --select last element
:add(nn.linear(hiddensize, nsentiment))
:add(nn.logsoftmax())

)

4 development principles

the previous section discussed the main components used in the id56 package, and how they evolved
from the need for additional functionality or new use cases. in all these cases, we didn   t go into
too much details regarding the internal workings of each model. for example, we did not discuss
the ability of sequencers to remember previously presented sequences, the ability of recurrent
instances to evaluate very long sequences without requiring any additional memory, the ability of
all modules to deal with nested tables of tensors, the ability to handle variable length inputs, or how
id56s can bptt for less time-steps than the number of forwarded time-steps.

4.1 unit testing

in any cases, each of these features potentially introduce bugs. the only way to make sure that
these are weeded out and not introduced in later revisions is by emphasizing the requirement for
broad unit tests. the id56 has unit tests for each of its component modules. it also includes unit tests
for different combinations of modules. these unit tests are almost always designed the same way.
functionality of modules introduced by the package is compared to a baseline which is known to
work. for example, when implementing the recurrent module unit tests, it was compared to an
equivalent composite structure built using modules taken directly from the nn package (which are
already unit tested).

however, unit tests can only go so far. the ultimate test is to reproduce the results of existing
papers. for the lstm module, we were initially unable to reproduce the lstm paper (citation). the
implementation of the paper was available on github 10, and used a combination of the nngraph
package and custom code to implement an stack of lstms. so we ended up extracting the code
from the original repository that we wanted to reproduce. we included it in a unit test that tried to
have our lstm module match the behavior of their own implementation. it was only in doing so
that we were able to resolve hidden discrepancies (bugs). noteworthy among them was the fact that
their lstm implementation used the last hidden states of the previous sequence to in   uence the
current sequence. this was not obvious for us as doing so for a simple id56 introduced instability

10https://github.com/wojzaremba/lstm

8

which often led to divergence during training. in any case, this massive unit test now ensures that
our lstm implementation matches a published open-source state of the art implementation.

4.2 backward compatibility

since november 2014, the id56 package has been available for use on github as an bsd-licensed
open-source repository. as can be seen by the above overview of its major iterations, the design has
evolved over time. from the start, we have tried to maintain its backward compatibility so that users
can continue to bene   t from updates without requiring major changes to existing code or serialized
objects that depends on the id56 package.

however, maintaining backwards compatibility has its drawbacks. for example, the recurrent
module is convoluted compared to the newer recurrence module. users will continue to use the
former even though the latter is more general and easier to use.

as for the lstm code, it is basically made redundant by the new recurrence module. a com-
promise worthy of consideration is to make the lstm module a recurrence subclass. but this
would break backwards compatibility for users loading an serialized instance of the older lstm in
the scope of a version of the id56 including the newer lstm instance. this issue is caused by the way
torch handles serialization and deserialization of objects. the class de   nition (i.e. the lua metat-
able) is not serialized but is required prior to serialization. therefore to implement this compromise,
we would still be breaking backwards compatibility for serialized modules. but such a change, if
implemented correctly (by preserving the same interface), would not break existing scripts making
use of the lstm module. we opted to preserve the lstm code in its current state.

the constraint for backwards compatibility is an important one as it minimizes the hassle for users.
but at the same time, it does result in redundant code (multiple ways of doing the same thing) and
support for deprecated use cases.

4.3 supporting material

from its inception, our focus has been on providing supporting material. we can divide these into
the following categories :

    documentation;
    examples; and
    tutorials.

documentation is provided for all modules and criterions provided in the package. it also includes
references to related scienti   c articles, examples and tutorials. documentation is used as a kind of
reference manual for speci   c components. examples are concrete demonstrations of the capabilities
of the package with respect to implementing a particular use case. these also demonstrate how
the package can be used with other packages, or more generally, within the scope of the torch
distribution. the package references example scripts for training language models and a recurrent
id12 on different datasets. tutorials include videos, articles or blog posts explaining
how to use the package, often with respect to a concrete example.

all the supporting material is important as it brings the package to life, allowing the user to learn
how to use it. it also has the side-effect of making it seem more legitimate, thereby encouraging new
users to dive in.

4.4 core extensions

submitting a github pull request (pr) to get some speci   c code merged into the core packages can
be daunting. delays can range from days to weeks. after which the pr is sometimes refused. lua
has a certain advantage here over other programming languages as its heavy reliance on tables makes
it very easy to overwrite or extend core package functionality from within an non-core package.

for example, the core implementation of the module:type() would decouple share parameters.
but because the module class de   nition is just another table, it was easy to overwrite the method

9

to preserve sharing semantics when type-casting. many more such core extensions were necessary
to make the id56 package.

5 results

the package was used to reproduce two papers : recurrent neural network id173 [17] and
recurrent models for visual attention [11].

the    rst paper implements a stack of lstm layers [5] and benchmarks various sizes of the model
on different datasets. the results presented in the paper are better than those that can be attained
using their commensurate github repository 11. the provided code allows one to train a stack of
lstm layers, with and without dropout, on the penn tree bank dataset [9]. using their script, test
set perplexity with and without dropout is 82 and 115, respectively. using the id56 package, our
script was able to reach commensurate perplexities of 83 and 11512.
the second paper implements recurrent attention model (ram) that learns using a combination of
id26 and reinforce[16] learning. the authors do not provide code, but their paper
includes a detailed description of the model. the ram was implemented using the recurrent
and recurrentattention modules of the id56 package 13 as speci   ed in the original paper, the
ram is trained on the mnist [8] and translated mnist datasets. while they respectively reach
1.07% and 1.22% error on both datasets, our implementation was able to surpass these results by
reaching 0.85% and 1.14% error.

6 conclusion

in this paper, we discussed the evolution of the id56 package, its different component modules, the
various principles underlying its development, and its performance compared to empirical results of
published id56 models.
unlike other id56 implementations using torch, the id56 package doesn   t depend on the nngraph
library. like the nn package, this one is designed with the assumption that all transformations and
id168s can be refactored into either a module or a criterion, respectively. it can also be
used with the of   cial optim or the unof   cial dp numeric optimization packages.

references

[1] m. boden. a guide to recurrent neural networks and id26. 2001.
[2] r. collobert, k. kavukcuoglu, and c. farabet. torch7: a matlab-like environment for machine

learning. in biglearn, nips workshop, number epfl-conf-192376, 2011.

[3] a. graves, a.-r. mohamed, and g. hinton. id103 with deep recurrent neural
in acoustics, speech and signal processing (icassp), 2013 ieee international

networks.
conference on, pages 6645   6649. ieee, 2013.

[4] k. greff, r. k. srivastava, j. koutn    k, b. r. steunebrink, and j. schmidhuber. lstm: a search

space odyssey. arxiv preprint arxiv:1503.04069, 2015.

[5] g. e. hinton, n. srivastava, a. krizhevsky, i. sutskever, and r. r. salakhutdinov.

im-
proving neural networks by preventing co-adaptation of feature detectors. arxiv preprint
arxiv:1207.0580, 2012.

[6] s. hochreiter and j. schmidhuber. long short-term memory. neural computation, 9(8):1735   

1780, 1997.

[7] r. ierusalimschy, l. h. de figueiredo, and w. celes filho. lua-an extensible extension lan-

guage. softw., pract. exper., 26(6):635   652, 1996.

[8] y. lecun, c. cortes, and c. j. burges. the mnist database of handwritten digits, 1998.

11https://github.com/wojzaremba/lstm
12https://github.com/nicholas-leonard/dp/blob/master/examples/recurrentlanguagemodel.lua
13https://github.com/element-research/id56/blob/master/examples/recurrent-visual-attention.lua

10

[9] m. p. marcus, m. a. marcinkiewicz, and b. santorini. building a large annotated corpus of

english: the id32. computational linguistics, 19(2):313   330, 1993.

[10] t. mikolov. statistical language models based on neural networks. presentation at google,

mountain view, 2nd april, 2012.

[11] v. mnih, n. heess, a. graves, et al. recurrent models of visual attention. in advances in

neural information processing systems, pages 2204   2212, 2014.

[12] b. pang and l. lee. opinion mining and id31. foundations and trends in

information retrieval, 2(1-2):1   135, 2008.

[13] p. h. pinheiro and r. collobert. recurrent convolutional neural networks for scene parsing.

arxiv preprint arxiv:1306.2795, 2013.

[14] d. e. rumelhart, g. e. hinton, and r. j. williams. learning representations by back-

propagating errors. cognitive modeling, 1:213, 2002.

[15] i. sutskever. training recurrent neural networks. phd thesis, university of toronto, 2013.
[16] r. j. williams. simple statistical gradient-following algorithms for connectionist reinforce-

ment learning. machine learning, 8(3-4):229   256, 1992.

[17] w. zaremba, i. sutskever, and o. vinyals. recurrent neural network id173. arxiv

preprint arxiv:1409.2329, 2014.

11

