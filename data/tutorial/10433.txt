semi-supervised question retrieval with gated convolutions

tao lei hrishikesh joshi regina barzilay tommi jaakkola

{taolei, hjoshi, regina, tommi}@csail.mit.edu

mit csail

6
1
0
2

 
r
p
a
4

 

 
 
]
l
c
.
s
c
[
 
 

2
v
6
2
7
5
0

.

2
1
5
1
:
v
i
x
r
a

katerina tymoshenko
university of trento

tymoshenko@disi.unitn.it

qatar computing research institute, hbku

alessandro moschitti llu    s m`arquez
{amoschitti, lmarquez}@qf.org.qa

abstract

id53 forums are rapidly grow-
ing in size with no effective automated abil-
ity to refer to and reuse answers already avail-
able for previous posted questions.
in this
paper, we develop a methodology for    nd-
ing semantically related questions. the task
is dif   cult since 1) key pieces of informa-
tion are often buried in extraneous details in
the question body and 2) available annota-
tions on similar questions are scarce and frag-
mented. we design a recurrent and convo-
lutional model (gated convolution) to effec-
tively map questions to their semantic repre-
sentations. the models are pre-trained within
an encoder-decoder framework (from body to
title) on the basis of the entire raw corpus,
and    ne-tuned discriminatively from limited
annotations. our evaluation demonstrates that
our model yields substantial gains over a stan-
dard ir baseline and various neural network
architectures (including id98s, lstms and
grus).1

introduction

1
id53 (qa) forums such as stack ex-
change2 are rapidly expanding and already contain
millions of questions. the expanding scope and cov-
erage of these forums often leads to many dupli-
cate and interrelated questions, resulting in the same
questions being answered multiple times. by iden-
tifying similar questions, we can potentially reuse

1our code and data are available at https://github.

com/taolei87/rid98

2http://stackexchange.com/

title: how can i boot ubuntu from a usb?
body: i bought a compaq pc with windows 8 a few
months ago and now i want to install ubuntu but still
keep windows 8. i tried webi but when my pc restarts it
read error 0x000007b. i know that windows 8 has a
thing about not letting you have ubuntu but i still want
to have both os without actually losing all my data ...

title: when i want to install ubuntu on my laptop i   ll
have to erase all my data.    alonge side windows    doesnt
appear
body: i want to install ubuntu from a usb drive.
it
says i have to erase all my data but i want to install it
along side windows 8. the    install alongside windows   
option doesn   t appear. what appear is, ...

figure 1: a pair of similar questions.

existing answers, reducing response times and un-
necessary repeated work. unfortunately in most fo-
rums, the process of identifying and referring to ex-
isting similar questions is done manually by forum
participants with limited, scattered success.

the task of automatically retrieving similar ques-
tions to a given user   s question has recently attracted
signi   cant attention and has become a testbed for
various representation learning approaches (zhou et
al., 2015; dos santos et al., 2015). however, the task
has proven to be quite challenging     for instance, dos
santos et al. (2015) report a 22.3% classi   cation ac-
curacy, yielding a 4 percent gain over a simple word
matching baseline.

several factors make the problem dif   cult. first,
submitted questions are often long and contain ex-
traneous information irrelevant to the main question
being asked. for instance, the    rst question in fig-
ure 1 pertains to booting ubuntu using a usb stick.
a large portion of the body contains tangential de-

tails that are idiosyncratic to this user, such as ref-
erences to compaq pc, webi and the error message.
not surprisingly, these features are not repeated in
the second question in figure 1 about a closely re-
lated topic. the extraneous detail can easily confuse
simple word-matching algorithms. indeed, for this
reason, some existing methods for question retrieval
restrict attention to the question title only. while ti-
tles (when available) can succinctly summarize the
intent, they also sometimes lack crucial detail avail-
able in the question body. for example, the title
of the second question does not refer to installation
from a usb drive. the second challenge arises from
the noisy annotations. indeed, the pairs of questions
marked as similar by forum participants are largely
incomplete. our manual inspection of a sample set
of questions from askubuntu3 shows that only 5%
of similar pairs have been annotated by the users,
with a precision of around 79%.

in this paper, we design a neural network model
and an associated training paradigm to address these
challenges. on a high level, our model is used as
an encoder to map the title, body, or the combina-
tion to a vector representation. the resulting    ques-
tion vector    representation is then compared to other
questions via cosine similarity. we introduce sev-
eral departures from typical architectures on a    ner
level. in particular, we incorporate adaptive gating
in non-consecutive id98s (lei et al., 2015) in or-
der to focus temporal averaging in these models on
key pieces of the questions. gating plays a similar
role in lstms (hochreiter and schmidhuber, 1997),
though lstms do not reach the same level of per-
formance in our setting. moreover, we counter the
scattered annotations available from user-driven as-
sociations by training the model largely based on
the entire unannotated corpus. the encoder is cou-
pled with a decoder and trained to reproduce the ti-
tle from the noisy question body. the methodology
is reminiscent of recent encoder-decoder networks
in machine translation and document summariza-
tion (kalchbrenner and blunsom, 2013; sutskever
et al., 2014; cho et al., 2014b; rush et al., 2015).
the resulting encoder is subsequently    ne-tuned
discriminatively on the basis of limited annotations
yielding an additional performance boost.

3http://askubuntu.com/

we evaluate our model on the askubuntu corpus
from stack exchange used in prior work (dos san-
tos et al., 2015). during training, we directly uti-
lize noisy pairs readily available in the forum, but
to have a realistic evaluation of the system perfor-
mance, we manually annotate 8k pairs of questions.
this clean data is used in two splits, one for de-
velopment and hyper parameter tuning and another
for testing. we evaluate our model and the base-
lines using standard information retrieval (ir) mea-
sures such as mean average precision (map), mean
reciprocal rank (mrr) and precision at n (p@n).
our full model achieves a mrr of 75.6% and p@1
of 62.0%, yielding 8% absolute improvement over
a standard ir baseline, and 4% over standard neural
network architectures (including id98s, lstms and
grus).

2 related work

given the growing popularity of community qa fo-
rums, question retrieval has emerged as an important
area of research (nakov et al., 2015; nakov et al.,
2016). previous work on question retrieval has mod-
eled this task using machine translation, topic mod-
eling and id13-based approaches (jeon
et al., 2005; li and manandhar, 2011; duan et al.,
2008; zhou et al., 2013). more recent work relies
on representation learning to go beyond word-based
methods. for instance, zhou et al. (2015) learn
id27s using category-based metadata in-
formation for questions. they de   ne each question
as a distribution which generates each word (embed-
ding) independently, and subsequently use a fisher
kernel to assess question similarities. dos santos
et al. (2015) propose an approach which combines
a convolutional neural network (id98) and a bag-
of-words representation for comparing questions. in
contrast to (zhou et al., 2015), our model treats each
question as a word sequence as opposed to a bag
of words, and we apply a recurrent convolutional
model as opposed to the traditional id98 model
used by dos santos et al. (2015) to map questions
into meaning representations. further, we propose
a training paradigm that utilizes the entire corpus of
unannotated questions in a semi-supervised manner.
recent work on answer selection on community
qa forums, similar to our task of question retrieval,

has also involved the use of neural network archi-
tectures (severyn and moschitti, 2015; wang and
nyberg, 2015; shen et al., 2015; feng et al., 2015;
tan et al., 2015). compared to our work, these ap-
proaches focus on improving various other aspects
of the model. for instance, feng et al. (2015) ex-
plore different similarity measures beyond cosine
similarity, and tan et al. (2015) adopt the neural at-
tention mechanism over id56s to generate better an-
swer representations given the questions as context.

3 question retrieval setup

we begin by introducing the basic discriminative
setting for retrieving similar questions. let q be
a query question which generally consists of both
a title sentence and a body section. for ef   ciency
reasons, we do not compare q against all the other
queries in the data base. instead, we retrieve    rst a
smaller candidate set of related questions q(q) using
a standard ir engine, and then we apply the more
sophisticated models only to this reduced set. our
goal is to rank the candidate questions in q(q) so
that all the similar questions to q are ranked above
the dissimilar ones. to do so, we de   ne a similarity
score s(q, p;   ) with parameters   , where the simi-
larity measures how closely candidate p     q(q) is
related to question q. the method of comparison can
make use of the title and body of each question.

the basis of annotated data d = (cid:8)(qi, p+

the scoring function s(  ,  ;   ) can be optimized on

i )(cid:9),

i , q   

where p+
is a question similar to question qi and
q   
i
is a negative set of questions deemed not simi-
lar to qi. during training, the correct pairs of similar
questions are obtained from available user-marked
pairs, while the negative set q   
is drawn randomly
from the entire corpus with the idea that the likeli-
hood of a positive match is small given the size of
the corpus. the candidate set during training is just
q(qi) = {p+
i . during testing, the candidate
sets are retrieved by an ir engine and we evaluate
against explicit manual annotations.

i }     q   

i

i

in the purely discriminative setting, we use a max-
margin framework for learning (or    ne-tuning) pa-
rameters   . speci   cally, in a context of a particu-
lar training example where qi is paired with p+
i , we

figure 2: illustration of our model.

minimize the max-margin loss l(  ) de   ned as

(cid:8)s(qi, p;   )     s(qi, p+

max
p   q(qi)

i ;   ) +   (p, p+

i )(cid:9) ,

i ) to be a small constant when p (cid:54)= p+

where   (  ,  ) denotes a non-negative margin. we set
  (p, p+
i and
0 otherwise. the parameters    can be optimized
through sub-gradients    l/      aggregated over small
batches of the training instances.

there are two key problems that remain. first,
we have to de   ne and parameterize the scoring func-
tion s(q, p;   ). we design a recurrent neural network
model for this purpose and use it as an encoder to
map each question into its meaning representation.
the resulting similarity function s(q, p;   ) is just the
cosine similarity between the corresponding repre-
sentations, as shown in figure 2 (a). the parame-
ters    pertain to the neural network only. second,
in order to offset the scarcity and limited coverage
of the training annotations, we pre-train the param-
eters    on the basis of the much larger unannotated
corpus. the resulting parameters are subsequently
   ne-tuned using the discriminative setup described
above.

4 model
4.1 non-consecutive convolution
we describe here our encoder model,
the
method for mapping the question title and body to

i.e.,

qcri/mit-csail annual meeting     march 2014    #   qcri/mit-csail annual meeting     march 2015    #   33encoderencoderquestion 1question 2poolingcosine similaritypoolingencoder   decoder   <s></s>context (title/body)title(a)	similarity	model:(b)	pre-training:encoderencoderquestion 1question 2poolingcosine similaritypoolingencoder   decoder   <s></s>context (title/body)title(a)	similarity	model:(b)	pre-training:a vector representation. our approach is inspired
by temporal convolutional neural networks (lecun
et al., 1998) and, in particular, its recent re   ne-
ment (lei et al., 2015), tailored to capture longer-
range, non-consecutive patterns in a weighted man-
ner. such models can be used to effectively sum-
marize occurrences of patterns in text and aggre-
gate them into a vector representation. however,
the summary produced is not selective since all pat-
tern occurrences are counted, weighted by how co-
hesive (non-consecutive) they are. in our problem,
the question body tends to be very long and full of
irrelevant words and fragments. thus, we believe
that interpreting the question body requires a more
selective approach to pattern extraction.
our model successively reads tokens in the ques-
tion title or body, denoted as {xi}l
i=1, and trans-
forms this sequence into a sequence of states
{hi}l
i=1. the resulting state sequence is subse-
quently aggregated into a single    nal vector repre-
sentation for each text as discussed below. our ap-
proach builds on (lei et al., 2015), thus we begin by
brie   y outlining it. let w1 and w2 denote    lter ma-
trices (as parameters) for pattern size n = 2. lei et
al. (2015) generate a sequence of states in response
to tokens according to

ct(cid:48),t = w1xt(cid:48) + w2xt
  t   t(cid:48)   1ct(cid:48),t

ct =

(cid:88)

t(cid:48)<t

ht = tanh(ct + b)

where ct(cid:48),t represents a bigram pattern, ct accumu-
lates a range of patterns and        [0, 1) is a con-
stant decay factor used to down-weight patterns with
longer spans. the operations can be cast in a    re-
current    manner and evaluated with dynamic pro-
gramming. the problem with the approach for our
purposes is, however, that the weighting factor    is
the same (constant) for all, not triggered by the state
ht   1 or the observed token xt.
adaptive gated decay we re   ne this model by
learning context dependent weights. for example,
if the current input token provides no relevant infor-
mation (e.g., symbols, functional words), the model
should ignore it by incorporating the token with a
vanishing weight. in contrast, strong semantic con-
tent words such as    ubuntu    or    windows    should be

included with much larger weights. to achieve this
effect we introduce neural gates similar to lstms
to specify when and how to average the observed
signals. the resulting architecture integrates recur-
rent networks with non-consecutive convolutional
models:

  t =   (w  xt + u  ht   1 + b  )
t =   t (cid:12) c(1)
c(1)
t =   t (cid:12) c(2)
c(2)

t   1 + (1       t) (cid:12) (w1xt)
t   1 + (1       t) (cid:12) (c(1)

t   1 + w2xt)

      

t =   t (cid:12) c(n)
c(n)
ht = tanh(c(n)

t   1 + (1       t) (cid:12) (c(n   1)
t + b)

t   1 + wnxt)

t

t

,       , c(n)

where   (  ) is the sigmoid function and (cid:12) represents
the element-wise product. here c(1)
are
accumulator vectors that store weighted averages of
1-gram to id165 features. when the gate   t = 0
(vector) for all t, the model represents a traditional
id98 with    lter width n. as   t > 0, however, c(n)
becomes the sum of an exponential number of terms,
enumerating all possible id165s within x1,       , xt
(seen by expanding the formulas). note that the gate
  t(  ) is parametrized and responds directly to the
previous state and the token in question. we refer
to this model as rid98 from here on.

t

pooling
in order to use the model as part of the
discriminative question retrieval framework outlined
earlier, we must condense the state sequence to a sin-
gle vector. there are two simple alternative pooling
strategies that we have explored     either averaging
over the states4 or simply taking the last one as the
meaning representation. in addition, we apply the
encoder to both the question title and body, and the
   nal representation is computed as the average of the
two resulting vectors.

once the aggregation is speci   ed, the parameters
of the gate and the    lter matrices can be learned in a
purely discriminative fashion. given that the avail-
able annotations are limited and user-guided, we in-
stead use the discriminative training only for    ne
tuning an already trained model. the method of pre-
training the model on the basis of the entire corpus
of questions is discussed next.

4we also normalize state vectors before averaging, which

empirically gets better performance.

4.2 pre-training using the entire corpus
the number of questions in the askubuntu corpus
far exceeds user annotations of pairs of similar ques-
tions. we can make use of this larger raw corpus in
two different ways. first, since models take word
embeddings as input we can tailor the embeddings
to the speci   c vocabulary and expressions in this
corpus. to this end, we run id97 (mikolov
et al., 2013) on the raw corpus in addition to the
wikipedia dump. second, and more importantly,
we use individual questions as training examples
for an auto-encoder constructed by pairing the en-
coder model (rid98) with an corresponding de-
coder (of the same type). as illustrated in fig-
ure 2 (b), the resulting encoder-decoder architecture
is akin to those used in machine translation (kalch-
brenner and blunsom, 2013; sutskever et al., 2014;
cho et al., 2014b) and summarization (rush et al.,
2015).
our encoder-decoder pair represents a conditional
language model p (title|context), where the context
can be any of (a) the original title itself, (b) the ques-
tion body and (c) the title/body of a similar ques-
tion. all possible (title, context) pairs are used dur-
ing training to optimize the likelihood of the words
(and their order) in the titles. we use the question
title as the target for two reasons. the question body
contains more information than the title but also has
many irrelevant details. as a result, we can view the
title as a distilled summary of the noisy body, and
the encoder-decoder model is trained to act as a de-
noising auto-encoder. moreover, training a decoder
for the title (rather than the body) is also much faster
since titles tend to be short (around 10 words).

the encoders pre-trained in this manner are sub-
sequently    ne-tuned according to the discriminative
criterion described already in section 3.

5 alternative models

pre-trained rid98.
lstms lstm cells (hochreiter and schmidhu-
ber, 1997) have been used to capture semantic in-
formation across a wide range of applications, in-
cluding machine translation and entailment recogni-
tion (bahdanau et al., 2015; bowman et al., 2015;
rockt  aschel et al., 2016). their success can be at-
tributed to neural gates that adaptively read or dis-
card information to/from internal memory states.

speci   cally, a lstm network successively reads
the input token xt, internal state ct   1, as well as
the visible state ht   1, and generates the new states
ct, ht:

it =   (wixt + uiht   1 + bi)
ft =   (wf xt + uf ht   1 + bf )
ot =   (woxt + uoht   1 + bo)
zt = tanh(wzxt + uzht   1 + bz)
ct = it (cid:12) zt + ft (cid:12) ct   1
ht = ot (cid:12) tanh(ct)

where i, f and o are input,
forget and output
gates, respectively. given the visible state sequence
{hi}l
i=1, we can aggregate it to a single vector ex-
actly as with rid98s. the lstm encoder can be
pre-trained (and    ne-tuned) in the similar way as
our rid98 model. for instance, dai and le (2015)
recently adopted pre-training for text classi   cation
task.
grus a gru is another comparable unit for se-
quence modeling (cho et al., 2014a; chung et al.,
2014). similar to the lstm unit, the gru has two
neural gates that control the    ow of information:

it =   (wixt + uiht   1 + bi)
rt =   (wrxt + urht   1 + br)
ct = tanh(wxt + u(rt (cid:12) ht   1) + b)
ht = it (cid:12) ct + (1     it) (cid:12) ht   1

for comparison, we also train three alternative
benchmark encoders (lstms, grus and id98s) for
mapping questions to vector representations. lstm
and gru-based encoders can be pre-trained analo-
gously to rid98s, and    ne-tuned discriminatively.
id98 encoders, on the other hand, are only trained
discriminatively. while plausible, neither alternative
reaches quite the same level of performance as our

where i and r are input and reset gate respectively.
again, the grus can be trained in the same way.
id98s convolutional neural networks (lecun et
al., 1998) have also been successfully applied to var-
ious nlp tasks (kalchbrenner et al., 2014; kim,
2014; kim et al., 2015; zhang et al., 2015; gao
et al., 2014). as models, they are different from
lstms since the temporal convolution operation

corpus

training

dev

test

# of unique questions
avg length of title
avg length of body
# of unique questions
# of user-marked pairs
# of query questions
# of annotated pairs
avg # of positive pairs per query
# of query questions
# of annotated pairs
avg # of positive pairs per query

167,765
6.7
59.7
12,584
16,391
200
200  20
5.8
200
200  20
5.5

table 1: various statistics from our training, dev, and test
sets derived from the sept. 2014 stack exchange askubuntu
dataset.

and associated    lters map local chunks (windows) of
the input into a feature representation. concretely, if
we let n denote the    lter width, and w1,       , wn
the corresponding    lter matrices, then the convolu-
tion operation is applied to each window of n con-
secutive words as follows:

ct = w1xt   n+1 + w2xt   n+2 +        + wnxt
ht = tanh(ct + b)

the sets of output state vectors {ht} produced in
this case are typically referred to as feature maps.
since each vector in the feature map only pertains
to local information, the last vector is not suf   cient
to capture the meaning of the entire sequence. in-
stead, we consider max-pooling or average-pooling
to obtain the aggregate representation for the entire
sequence.

6 experimental setup
dataset we use the stack exchange askubuntu
dataset used in prior work (dos santos et al., 2015).
this dataset contains 167,765 unique questions,
each consisting of a title and a body5, and a set of
user-marked similar question pairs. we provide var-
ious statistics from this dataset in table 1.
gold standard for evaluation user-marked sim-
ilar question pairs on qa sites are often known
to be incomplete.
in order to evaluate this in our
dataset, we took a sample set of questions paired
with 20 candidate questions retrieved by a search en-
gine trained on the askubuntu data. the search en-
gine used is the well-known bm25 model (robert-

5we truncate the body section at a maximum of 100 words.

son and zaragoza, 2009). our manual evaluation of
the candidates showed that only 5% of the similar
questions were marked by users, with a precision of
79%. clearly, this low recall would not lead to a re-
alistic evaluation if we used user marks as our gold
standard.
instead, we make use of expert annota-
tions carried out on a subset of questions.

training set we use user-marked similar pairs as
positive pairs in training since the annotations have
high precision and do not require additional man-
ual annotations. this allows us to use a much larger
training set. we use random questions from the cor-
pus paired with each query question pi as negative
pairs in training. we randomly sample 20 questions
as negative examples for each pi during each epoch.

development and test sets we re-constructed
the new dev and test sets consisting of the    rst 200
questions from the dev and test sets provided by dos
santos et al. (2015). for each of the above ques-
tions, we retrieved the top 20 similar candidates us-
ing bm25 and manually annotated the resulting 8k
pairs as similar or non-similar.6

baselines and id74 we evaluated
neural network models   including id98s, lstms,
grus and rid98s   by comparing them with the
following baselines:

    bm25, we used the bm25 similarity measure

provided by apache lucene.

    tf-idf, we ranked questions using cosine
similarity based on a vector-based word repre-
sentation for each question.

    id166, we trained a re-ranker using id166-light
(joachims, 2002) with a linear kernel incor-
porating several similarity measures from the
dkpro similarity package (b  ar et al., 2013).

we evaluated the models based on the following ir
metrics: mean average precision (map), mean re-
ciprocal rank (mrr), precision at 1 (p@1), and
precision at 5 (p@5).

6the annotation task was initially carried out by two expert
annotators, independently. the initial set was re   ned by com-
paring the annotations and asking a third judge to make a    nal
decision on disagreements. after a consensus on the annotation
guidelines was reached (producing a cohen   s kappa of 0.73),
the overall annotation was carried out by only one expert.

method

pooling

-
-
-
mean
mean
mean
last

bm25
tf-idf
id166
id98s
lstms
grus
rid98s
lstms + pre-train mean
grus + pre-train
rid98s + pre-train

last
last

dev

map mrr p@1
51.9
52.0
55.6
54.1
53.5
50.8
58.4
58.5
60.0
58.4
62.6
59.1
63.2
59.9
58.3
59.3
59.8
59.3
61.3   
64.2

66.0
68.2
66.1
71.1
72.3
74.0
74.2
71.5
72.2
75.2

test

p@5 map mrr
68.0
42.1
67.1
45.1
43.8
71.3
71.4
46.4
70.1
46.4
71.4
47.3
72.9
48.0
47.4
67.0
71.3
48.3
50.3   
75.6   

56.0
53.2
57.7
57.6
56.8
57.1
60.7
55.5
59.3
62.3   

p@1
53.8
53.8
57.0
57.6
55.8
57.3
59.1
51.1
57.2
62.0

p@5
42.5
39.7
43.3
43.2
43.2
43.6
45.0
43.4
44.3
47.1   

table 2: comparative results of all methods on the question similarity task. higher numbers are better. for neural network models,
we show the best average performance across 5 independent runs and the corresponding pooling strategy. statistical signi   cance
with p < 0.05 against other types of model is marked with    .

d
240
280
667
400

|  |
n
423k -
404k -
401k 3
401k 2

lstms
grus
id98s
rid98s

table 3: con   guration of neural models. d is the hidden dimen-
sion, |  | is the number of parameters and n is the    lter width.

for all

hyper-parameters we performed an extensive
hyper-parameter search to identify the best model
for the baselines and neural network models. for
the tf-idf baseline, we tried id165 feature order
n     {1, 2, 3} with and without stop words pruning.
for the id166 baseline, we used the default id166-
light parameters whereas the dev data is only used
to increase the training set size when testing on the
test set. we also tried to give higher weight to dev
instances but this did not result in any improvement.
the neural network models, we used
adam (kingma and ba, 2015) as the optimiza-
tion method with the default setting suggested by
the authors. we optimized other hyper-parameters
with the following range of values:
learning rate
    {1e     3, 3e     4}, dropout (hinton et al., 2012)
id203     {0.1, 0.2, 0.3}, id98 feature width
    {2, 3, 4}. we also tuned the pooling strategies
and ensured each model has a comparable number of
parameters. the default con   gurations of lstms,
grus, id98s and rid98s are shown in table 3. we
used mrr to identify the best training epoch and
the model con   guration. for the same model con-
   guration, we report average performance across 5

independent runs.7

word vectors we ran id97 (mikolov et al.,
2013) to obtain 200-dimensional id27s
using all stack exchange data (excluding stack-
over   ow) and a large wikipedia corpus. the word
vectors are    xed to avoid over-   tting across all ex-
periments.

7 results

task.

overall performance table 2 shows the perfor-
mance of the baselines and the neural encoder mod-
els on the question retrieval
the results
show that our full model, rid98s with pre-training,
achieves the best performance across all metrics on
both the dev and test sets. for instance, the full
model gets a p@1 of 62.0% on the test set, outper-
forming the word matching-based method bm25 by
over 8 percent points. further, our rid98 model
also outperforms the other neural encoder mod-
els and the baselines across all metrics. this su-
perior performance indicates that the use of non-
consecutive    lters and a varying decay is effective
in improving traditional neural network models.

table 2 also demonstrates the performance gain
from pre-training the rid98 encoder. the rid98
model when pre-trained on the entire corpus consis-
tently gets better results across all the metrics.

7for a fair comparison, we also pre-train 5 independent
models for each con   guration and then    ne tune these mod-
els. we use the same learning rate and dropout rate during pre-
training and    ne-tuning.

method

id98s, max-pooling
id98s, mean-pooling
lstms + pre-train, mean-pooling
lstms + pre-train, last state
grus + pre-train, mean-pooling
grus + pre-train, last state
rid98s + pre-train, mean-pooling
rid98s + pre-train, last state

dev

test

map mrr p@1
56.6
57.8
58.4
58.5
59.3
58.3
57.6
58.1
57.1
57.5
59.8
59.3
61.7
59.3
61.3
64.2

p@5 map mrr p@1
59.6
47.7
57.6
46.4
51.1
47.4
47.3
55.2
52.4
46.2
57.2
48.3
57.3
48.6
50.3
62.0
table 4: choice of pooling strategies.

69.9
71.1
71.5
71.0
69.9
72.2
73.6
75.2

59.6
57.6
55.5
57.6
55.5
59.3
58.9
62.3

73.1
71.4
67.0
69.8
67.3
71.3
72.3
75.6

p@5
45.4
43.2
43.4
43.7
42.8
44.3
45.3
47.1

tf-idf

title only
title + body

map mrr
54.3
66.8
67.1
53.2
rid98s, mean-pooling map mrr
56.0
68.9
58.5
71.7
map mrr
70.7
58.2
60.7
72.9

title only
title + body

title only
title + body

rid98s, last state

p@1
52.7
53.8
p@1
55.7
56.7
p@1
56.6
59.1

table 5: comparision between model variants on the test set
when question bodies are used or not used.

pooling strategy we analyze the effect of various
pooling strategies for the neural network encoders.
as shown in table 4, our rid98 model outperforms
other neural models regardless of the two pooling
strategies explored. we also observe that simply us-
ing the last hidden state as the    nal representation
achieves better results for the rid98 model.
using question body table 5 compares the per-
formance of the tf-idf baseline and the rid98
model when using question titles only or when using
question titles along with question bodies. tf-idf   s
performance changes very little when the question
bodies are included (mrr and p@1 are slightly bet-
ter but map is slightly worse). however, we    nd
that the inclusion of the question bodies improves
the performance of the rid98 model, achieving a
1% to 3% improvement with both model variations.
the rid98 model   s greater improvement illustrates
the ability of the model to pick out components that
pertain most directly to the question being asked
from the long, descriptive question bodies.
pre-training note that, during pre-training, the
last hidden states generated by the neural encoder
are used by the decoder to reproduce the question ti-
tles. it would be interesting to see how such states

figure 3: perplexity (dotted lines) on a heldout portion of the
corpus versus mrr on the dev set (solid lines) during pre-
training. variances across 5 runs are shown as vertical bars.

capture the meaning of questions. to this end, we
evaluate mrr on the dev set using the last hidden
states of the question titles. we also test how the en-
coder captures information from the question bodies
to produce the distilled summary, i.e. titles. to do
so, we evaluate the perplexity of the trained encoder-
decoder model on a heldout set of the corpus, which
contains about 2000 questions.

as shown in figure 3, the representations gener-
ated by the rid98 encoder perform quite well, re-
sulting in a perplexity of 25 and over 68% mrr
without the subsequent    ne-tuning.
interestingly,
the lstm and gru networks obtain similar per-
plexity on the heldout set, but achieve much worse
mrr for similar question retrieval. for instance, the
gru encoder obtains only 63% mrr, 5% worse
than the rid98 model   s mrr performance. as a
result, the lstm and gru encoder do not bene   t
clearly from pre-training, as suggested in table 2.

the inconsistent performance difference may be
explained by two hypotheses. one is that the per-
plexity is not suitable for measuring the similarity
of the encoded text, thus the power of the encoder
is not illustrated in terms of perplexity. another hy-

12345678910epoch203550658095pplrid98grulstm505560657075mrrfigure 4: visualizations of 1       t of our model on several question pieces from the data set.   t is set to a scalar value (instead of
400-dimension vector) to make the visualization simple. the corresponding model is a simpli   ed variant, which is about 4% worse
than our full model.

pothesis is that the lstm and gru encoder may
learn non-linear representations therefore their se-
mantic relatedness can not be directly accessed by
cosine similarity.

adaptive decay finally, we analyze the gated
convolution of our model. figure 5 demonstrates at
each word position t how much input information is
taken into the model by the adaptive weights 1      t.
the average of weights in the vector decreases as t
increments, suggesting that the information encoded
into the state vector saturates when more input are
processed. on the other hand, the largest value in
the weight vector remains high throughout the input,
indicating that at least some information has been
stored in ht and ct.

we also conduct a case study on analyzing the
neural gate.
since directly inspecting the 400-
dimensional decay vector is dif   cult, we train a
model that uses a scalar decay instead. as shown in
figure 4, the model learns to assign higher weights
to application names and quoted error messages,
which intuitively are important pieces of a question
in the askubuntu domain.

8 conclusion

in this paper, we employ gated (non-consecutive)
convolutions to map questions to their semantic
representations, and demonstrate their effectiveness

figure 5: the maximum and mean value of the 400-
dimentional weight vector 1      t at each step (word position) t.
values are averaged across all questions in the dev and test set.

on the task of question retrieval
in community
qa forums. this architecture enables the model
to glean key pieces of information from lengthy,
detail-riddled user questions. pre-training within an
encoder-decoder framework (from body to title) on
the basis of the entire raw corpus is integral to the
model   s success.

acknowledgments
we thank yu zhang, yoon kim, danqi chen, the
mit nlp group and the reviewers for their help-
ful comments.
the work is developed in col-
laboration with the arabic language technologies
(alt) group at qatar computing research institute
(qcri) within the iyas project. any opinions,    nd-
ings, conclusions, or recommendations expressed in
this paper are those of the authors, and do not neces-
sarily re   ect the views of the funding organizations.

howcaniaddguaketerminaltothestart-upapplications(a) how can i add guake terminal to the start-up applicationsbansheecrasheswith``anunhandledexceptionwasthrown:''(b) banshee crashes with `` an unhandled exception was thrown : ''igettheerrormessage``requiresinstallationofuntrustedpackageseverytimeitrytoupdateafterenteringmypassword...(c) i get the error message `` requires installation of untrusted packages every time i try to update after entering my password ...irecentlyboughtsamsunglaptopandifacinghardtimetobootmypendriversothaticanuseubuntu...(d) i recently bought samsung laptop and i facing hard time to boot my pen driver so that i can use ubuntu ...0.870.95maxmean02040608099t0.10.2references
dzmitry bahdanau, kyunghyun cho, and yoshua ben-
gio.
2015. id4 by jointly
learning to align and translate. in international con-
ference on learning representations.

daniel b  ar, torsten zesch, and iryna gurevych. 2013.
dkpro similarity: an open source framework for text
similarity. in proceedings of the 51st annual meeting
of the association for computational linguistics: sys-
tem demonstrations, pages 121   126, so   a, bulgaria,
august. association for computational linguistics.

samuel r. bowman, gabor angeli, christopher potts,
and christopher d. manning. 2015. a large anno-
tated corpus for learning natural language id136.
in proceedings of the 2015 conference on empirical
methods in natural language processing (emnlp).
association for computational linguistics.

kyunghyun cho, bart van merri  enboer, dzmitry bah-
danau, and yoshua bengio. 2014a. on the proper-
ties of id4: encoder-decoder
approaches. arxiv preprint arxiv:1409.1259.

kyunghyun cho, bart van merri  enboer, caglar gul-
cehre, dzmitry bahdanau, fethi bougares, holger
schwenk, and yoshua bengio.
2014b. learning
phrase representations using id56 encoder-decoder for
id151. in proceedings of the
2014 conference on empirical methods in natural
language processing (emnlp).

junyoung chung, caglar gulcehre, kyunghyun cho,
and yoshua bengio. 2014. empirical evaluation of
gated recurrent neural networks on sequence model-
ing. arxiv preprint arxiv:1412.3555.

andrew m dai and quoc v le. 2015. semi-supervised
sequence learning. in advances in neural information
processing systems, pages 3061   3069.

cicero dos santos, luciano barbosa, dasha bogdanova,
and bianca zadrozny. 2015. learning hybrid rep-
resentations to retrieve semantically equivalent ques-
tions. in proceedings of the 53rd annual meeting of
the association for computational linguistics and the
7th international joint conference on natural lan-
guage processing (volume 2: short papers), pages
694   699, beijing, china, july. association for com-
putational linguistics.

huizhong duan, yunbo cao, chin-yew lin, and yong
yu. 2008. searching questions by identifying question
topic and question focus. in acl, pages 156   164.

minwei feng, bing xiang, michael r glass, lidan
wang, and bowen zhou. 2015. applying deep learn-
ing to answer selection: a study and an open task.
arxiv preprint arxiv:1508.01585.

jianfeng gao, patrick pantel, michael gamon, xiaodong
he, li deng, and yelong shen. 2014. modeling inter-
estingness with deep neural networks. in proceedings

of the 2013 conference on empirical methods in nat-
ural language processing.

geoffrey e hinton, nitish srivastava, alex krizhevsky,
ilya sutskever, and ruslan r salakhutdinov. 2012.
improving neural networks by preventing co-
arxiv preprint
adaptation of
arxiv:1207.0580.

feature detectors.

sepp hochreiter and j  urgen schmidhuber. 1997. long
short-term memory. neural computation, 9(8):1735   
1780.

jiwoon jeon, w bruce croft, and joon ho lee. 2005.
finding similar questions in large question and answer
in proceedings of the 14th acm interna-
archives.
tional conference on information and knowledge man-
agement, pages 84   90. acm.

t. joachims. 2002. optimizing search engines using

clickthrough data. in acm sigkdd kdd.

nal kalchbrenner and phil blunsom.

2013. recur-
rent continuous translation models. in proceedings of
the 2013 conference on empirical methods in natu-
ral language processing (emnlp 2013), pages 1700   
1709.

nal kalchbrenner, edward grefenstette, and phil blun-
som. 2014. a convolutional neural network for mod-
in proceedings of the 52th annual
elling sentences.
meeting of the association for computational linguis-
tics.

yoon kim, yacine jernite, david sontag, and alexan-
der m rush. 2015. character-aware neural language
models. twenty-ninth aaai conference on arti   cial
intelligence.

yoon kim. 2014. convolutional neural networks for sen-
tence classi   cation. in proceedings of the empiricial
methods in natural language processing (emnlp
2014).

diederik p kingma and jimmy lei ba. 2015. adam: a
in international

method for stochastic optimization.
conference on learning representation.

y. lecun, l. bottou, y. bengio, and p. haffner. 1998.
gradient-based learning applied to document recog-
nition. proceedings of the ieee, 86(11):2278   2324,
november.

tao lei, regina barzilay, and tommi jaakkola. 2015.
molding id98s for text: non-linear, non-consecutive
convolutions. in proceedings of the 2015 conference
on empirical methods in natural language process-
ing, pages 1565   1575, lisbon, portugal, september.
association for computational linguistics.
shuguang li and suresh manandhar. 2011.

improv-
ing question recommendation by exploiting informa-
tion need. in proceedings of the 49th annual meeting
of the association for computational linguistics: hu-
man language technologies-volume 1, pages 1425   
1434. association for computational linguistics.

guangyou zhou, tingting he, jun zhao, and po hu.
2015. learning continuous id27 with
metadata for question retrieval in community question
answering. in proceedings of the 53rd annual meet-
ing of the association for computational linguistics
and the 7th international joint conference on natural
language processing (volume 1: long papers), pages
250   259, beijing, china, july. association for com-
putational linguistics.

tomas mikolov, kai chen, greg corrado, and jeffrey
dean. 2013. ef   cient estimation of word represen-
tations in vector space. corr.

preslav nakov, llu    s m`arquez, walid magdy, alessan-
dro moschitti, jim glass, and bilal randeree. 2015.
semeval-2015 task 3: answer selection in commu-
in proceedings of the 9th
nity id53.
international workshop on semantic evaluation, se-
meval    15.

preslav nakov, llu    s m`arquez, walid magdy, alessan-
dro moschitti, jim glass, and bilal randeree. 2016.
semeval-2016 task 3: community question answer-
in proceedings of the 10th international work-
ing.
shop on semantic evaluation, semeval    16.

stephen robertson and hugo zaragoza.

2009. the
probabilistic relevance framework: bm25 and beyond.
now publishers inc.

tim rockt  aschel, edward grefenstette, karl moritz her-
mann, tom  a  s ko  cisk`y, and phil blunsom. 2016. rea-
soning about entailment with neural attention. in in-
ternational conference on learning representations.
alexander m rush, sumit chopra, and jason weston.
2015. a neural attention model for abstractive sen-
tence summarization. in proceedings of the 2015 con-
ference on empirical methods in natural language
processing.

aliaksei severyn and alessandro moschitti.

2015.
learning to rank short text pairs with convolutional
deep neural networks. in sigir.

yikang shen, wenge rong, nan jiang, baolin peng, jie
tang, and zhang xiong. 2015. id27
based correlation model for question/answer match-
ing. arxiv preprint arxiv:1511.04646.

ilya sutskever, oriol vinyals, and quoc vv le. 2014.
sequence to sequence learning with neural networks.
in advances in neural information processing systems,
pages 3104   3112.

ming tan, bing xiang, and bowen zhou. 2015. lstm-
based deep learning models for non-factoid answer se-
lection. arxiv preprint arxiv:1511.04108.

di wang and eric nyberg. 2015. a long short-term
memory model for answer sentence selection in ques-
tion answering. in acl, july.

xiang zhang, junbo zhao, and yann lecun.

2015.
character-level convolutional networks for text classi-
   cation. in advances in neural information process-
ing systems, pages 649   657.

guangyou zhou, yang liu, fang liu, daojian zeng,
and jun zhao. 2013.
improving question retrieval
in community id53 using world knowl-
in proceedings of the twenty-third interna-
edge.
tional joint conference on arti   cial intelligence, pages
2239   2245. aaai press.

note on data pre-processing issue:
this paper is based on our early preprint version    denoising bodies to titles: retrieving similar
questions with recurrent convolutional models   .

we noticed, during the analysis of the models, that some question text in the askubuntu dataset
contain user-annotated information which should be removed for a more realistic evaluation (see
the    gure below and the explanation).

we re-processed the dataset and updated the results accordingly. the performance of various
neural network models reported in this version may not match the numbers reported in our early
version exactly, but the relative observation (i.e.
relative difference between models) does not
change.

: a snapshot of one askubuntu question. the    possible duplicate    section shows the title of a similar
question marked by the forum user. this section is included in the original xml dump of askubuntu, and
was not removed in our early experiments.

qcri/mit-csail annual meeting     march 2014    #   qcri/mit-csail annual meeting     march 2015    #   askubuntu dataset38user-marked duplicate question   possible duplicate    was included in the original dump, and wasn   t properly removed in our first experiments; same in (dos santos et. al. 2015)