toward mention detection robustness with recurrent neural networks

thien huu nguyen      , avirup sil  , georgiana dinu   and radu florian  
    computer science department, new york university, new york, usa
   ibm t.j. watson research center, yorktown heights, new york, usa

thien@cs.nyu.edu,{avi,gdinu,raduf}.us.ibm.com

6
1
0
2

 

b
e
f
4
2

 

 
 
]
l
c
.
s
c
[
 
 

1
v
9
4
7
7
0

.

2
0
6
1
:
v
i
x
r
a

abstract

one of the key challenges in natural lan-
guage processing (nlp) is to yield good
performance across application domains
and languages.
in this work, we investi-
gate the robustness of the mention detec-
tion systems, one of the fundamental tasks
in information extraction, via recurrent
neural networks (id56s). the advantage
of id56s over the traditional approaches
is their capacity to capture long ranges of
context and implicitly adapt the word em-
beddings, trained on a large corpus, into a
task-speci   c word representation, but still
preserve the original semantic generaliza-
tion to be helpful across domains. our sys-
tematic evaluation for id56 architectures
demonstrates that id56s not only outper-
form the best reported systems (up to 9%
relative error reduction) in the general set-
ting but also achieve the state-of-the-art
performance in the cross-domain setting
for english. regarding other languages,
id56s are signi   cantly better than the tra-
ditional methods on the similar task of
id39 for dutch (up to
22% relative error reduction).

1 introduction

one of the crucial steps toward understanding nat-
ural languages is mention detection (md), whose
goal is to identify entity mentions, whether named,
nominal (the president) or pronominal (he, she),
and classify them into some prede   ned types of in-
terest in text such as person, organization
or location. this is an extension of the named
entity recognition (ner) task which only aims to
extract entity names. md is necessary for many
higher-level applications such as relation extrac-
tion, knowledge population, information retrieval,
id53 and so on.

labeling problems,

traditionally, both md and ner are formalized
as sequential
thereby being
solved by some linear id114 such as
id48 (id48s), maximum en-
tropy markov models (memms) or conditional
random fields (crfs) (lafferty et al., 2001). al-
though these id114 have been adopted
well to achieve the top performance for md, there
are still at least three problems we want to focus in
this work:

(i) the    rst problem is the performance loss
of the mention detectors when they are trained
on some domain (the source domain) and ap-
plied to other domains (the target domains). the
problem might originate from various mismatches
between the source and the target domains (do-
main shifts) such as the vocabulary difference, the
distribution mismatches etc (blitzer et al., 2006;
daume, 2007; plank and moschitti, 2013).

(ii) second,

in mention detection, we might
need to capture a long context, possibly covering
the whole sentence, to correctly predict the type
for a word. for instance, consider the following
sentence with the pronominal    they   :

now,

the reason that france, russia and
germany are against war is because they have suf-
fered much from the past war.

the correct

in this sentence,

type gpe1 for
   they    can only be inferred from its gpe refer-
ences:    france   ,    russia    and    germany    which
are far way from the pronominal    they    of inter-
est. the challenge is come up with the models
that can encode and utilize these long-range de-
pendency context effectively.

(iii) the third challenge is to be able to quickly
adapt the current techniques for md so that they
can perform well on new languages.

in this paper, we propose to address these
problems for md via recurrent neural networks
(id56s) which offer a decent recurrent mecha-
nism to embed the sentence context into a dis-

   work carried out during an internship at ibm

1geographical political entity

tributed representation and employ it to decode
the sentences. besides, as id56s replace the sym-
bolic forms of words in the sentences with their
id27s, the distributed representation
that captures the general syntactic and semantic
properties of words (collobert and weston, 2008;
mnih and hinton, 2008; turian et al., 2010), they
can alleviate the lexical sparsity, induce more gen-
eral feature representation, thus generalizing well
across domains (nguyen and grishman, 2015b).
this also helps id56s to quickly and effectively
adapt to new languages which just require word
embeddings as the only new knowledge we need
to obtain. finally, we can achieve the task-speci   c
id27s for md to improve the over-
all performance by updating the initial pre-trained
id27s during the course of training in
id56s.

the recent emerging interest

in deep learn-
ing has produced many successful applications of
id56s for nlp problems such as machine trans-
lation (cho et al., 2014a; bahdanau et al., 2015),
id14 (zhou and xu, 2015) etc.
however, to the best of our knowledge, there has
been no previous work employing id56s for md
on the cross-domain and language settings so far.
to summarize, the main contributions of this pa-
per are as follow:

1. we perform a systematic investigation on
various id56 architectures and id27
techniques that are motivated from linguistic ob-
servations for md.

2. we achieve the state-of-the-art performance
for md both in the general setting and in the cross-
domain setting with the bidirectional modeling ap-
plied to id56s.

3. we demonstrate the portability of the id56
models for md to new languages by their signi   -
cant improvement with large margins over the best
reported system for id39 in
dutch.

2 related work

entity
recognition
borthwick et al., 1997;

both
named
(bikel et al., 1997;
tjong kim sang and de meulder, 2003;
florian et al., 2003;
ando and zhang, 2005;
suzuki and isozaki, 2008;
ratinov and roth, 2009;
turian et al., 2010;
passos et al., 2014;
and mention

detection

lin and wu, 2009;
ritter et al., 2011;
cherry and guo, 2015)
(florian et al., 2004)

miller et al., 2004;

ones

been

languages

extensively

via machine

studied with

from rich-resource

(florian et al., 2006),

have
vari-
ous evaluation in the last decades: muc6,
muc7, conll   02, conll   03 and ace. the
previous work on md has examined the cas-
transferred
cade models
knowledge
to
translation
low-resource
or
(zitouni and florian, 2008)
the
systems on noisy input
(florian et al., 2010).
besides, some recent work also tries to solve md
jointly with other tasks such as relation or event
extraction to bene   t from their inter-dependencies
(roth and yih, 2007;
kate and mooney, 2010;
li and ji, 2014a; li et al., 2014b). however, none
of these work investigates id56s for md on the
cross-domain and language settings as we do in
this paper.

improved

neural

around

several

network

(yih et al., 2014;

regarding neural networks, a large volume
of work has devoted to the application of
deep learning to nlp in the last few years,
centering
architec-
ture such as convolutional neural networks
shen et al., 2014;
(id98s)
kalchbrenner et al., 2014;
kim, 2014;
dos santos et al., 2015a;
zeng et al., 2014;
dos santos and guimar  es, 2015b),
re-
current/recursive
networks
cho et al., 2014a;
(socher et al., 2012;
zhou and xu, 2015;
bahdanau et al., 2015;
to name a few.
tai et al., 2015),
for ner,
collobert et al.
(2011) propose a id98-based
framework while mesnil et al. (2013) and yao et
al. (2013; 2014) investigate the id56s for the slot
   lling problem in spoken language understanding.
although our work also examines the id56s, we
consider the mention detection problem with an
emphasis on the robustness of the models in the
domain shifts and language changes which has
never been explored in the literature before.

for

finally,

the early work has

the robustness in the domain
fo-
adaptation setting,
cused on the sequential
labeling tasks such
as part-of-speech tagging or name tagging
(blitzer et al., 2006;
huang and yates, 2010;
xiao and guo, 2013;
daume, 2007;
schnabel and sch  tze, 2014).
recent work
to id36
has drawn attention
(plank and moschitti, 2013; nguyen et al., 2015a;
in the    eld of neural
gorid113y et al., 2015).
networks,
there
is only one work from nguyen and grishman
(2015b) that evaluates id98s for id37
in the cross-domain setting.

to the best of our knowledge,

3 models

we formalize the mention detection problem as a
sequential labeling task. given a sentence x =
w1w2 . . . wn, where wi is the i-th word and n is
the length of the sentence, we want to predict the
label sequence y = y1y2 . . . yn for x, where
yi is the label for wi. the labels yi follow the
bio2 encoding to capture the entity mentions in
x (ratinov and roth, 2009).

in order to prepare the sentence for id56s, we
   rst transform each word wi into a real-valued
vector using the concatenation of two vectors ei
and fi: wi = [ei, fi]2, where:

    ei is the id27 vector of wi, ob-
tained by training a language model on a
large corpus (discussed later).

    fi is a binary vector encompassing different
features for wi.
in this work, we are uti-
lizing four types of features: capitalization,
gazetteers, triggers (whether wi is present in
a list of trigger words3 or not) and cache (the
label that is assigned to wi sometime before
in the document).

we then enrich this vector representation by
including the word vectors in a context win-
dow of vc for each word in the sentence to cap-
ture the short-term dependencies for prediction
(mesnil et al., 2013). this effectively converts wi
into the context window version of the concate-
nated vectors: xi = [wi   vc, . . . , wi, . . . , wi+vc ].

given the new input representation, we describe

the id56s to be investigated in this work below.

3.1 the basic models
in standard recurrent neural networks, at each time
step (word position in sentence) i, we have three
main vectors: the input vector xi     ri, the hidden
vector hi     rh and the output vector oi     ro (i,
h and o are the dimensions of the input vectors,
the dimension of the hidden vectors and the num-
ber of possible labels for each word respectively).
the output vector oi is the probabilistic distribu-
tion over the possible labels for the word xi and
obtained from hi via the softmax function   :

oi =   (w hi),

  (zm) =

ezm

pk ezk

2for simplicity, we are using the word wi and its real-

valued vector representation interchangeably.

3trigger words are the words that are often followed by

entity names in sentences such as    president   ,    mr.    etc.

regarding the hidden vectors or units hi, there
are two major methods to obtain them from the
current input and the last hidden and output vec-
tors, leading to two different id56 variants:

    in the elman model (elman, 1990), called
elman, the hidden vector from the previ-
ous step hi   1, along with the input in the cur-
rent step xi, constitute the inputs to compute
the current hidden state hi:

hi =   (u xi + v hi   1)

(1)

    in the jordan model (jordan, 1986), called
jordan, the output vector from the previ-
ous step oi   1 is fed into the current hidden
layer rather than the hidden vector from the
previous steps hi   1. the rationale in this
topology is to introduce the label from the
preceding step as a feature for current predic-
tion:

hi =   (u xi + v oi   1)

(2)

in the formula above,    is the sigmoid activa-
tion function:   (z) = 1
1+e   z and w , u, v are
the same weight matrices for all time steps, to be
learned during training. the unfolded dependency
graphs for the two models are given in figure 1.

3.2 id149
the hidden units in the two basic models above
are essentially the standard feed-forward neural
networks that take the vectors hi   1, oi   1 and xi
as inputs and do a linear transformation followed
by a nonlinearity to generate the hidden vector hi.
the elman and jordan models are then basi-
cally a stack of these hidden units. unfortunately,
this staking mechanism causes the so-called
   vanishing gradient    and    exploding gradient   
problems (bengio et al., 1994), making it chal-
lenging to train the networks properly in practice
(pascanu et al., 2012). these problems are ad-
dressed by the long-short
term memory units
(lstm)
(hochreiter and schmidhuber, 1997;
graves et al., 2009) that propose the idea of mem-
ory cells with four gates to allow the information
storage and access over a long period of time.

in this work, we apply another version of mem-
ory units with only two gates (reset and update),
called id149 (grus) from cho
et al.
(2014a; 2015). gru is shown to be
much simpler than lstm in terms of compu-
tation and implementation but still achieves the

o1

o2

o3

on   1

on

o0

o1

o2

o3

on   1

on

h0

h1

h2

h3

hn   1

hn

h1

h2

h3

hn   1

hn

x1

x2

x3

xn   1

xn

x1

x2

x3

xn   1

xn

elman

jordan

figure 1: the elman and jordan models

comparable performance in machine translation
(bahdanau et al., 2015).

the introduction of grus into the models el-
man and jordan amounts to two new models,
named elman_gru and jordan_gru re-
spectively, with two new methods to compute the
hidden vectors hi. the formula for elman_gru
is adopted directly from cho et al. (2014b) and
given below:

hi = zi       hi + (1     zi)     hi   1

  hi =   (whxi + uh(ri     hi   1))

zi =   (wzxi + uzhi   1)

(3)

ri =   (wrxi + urhi   1)

where wh, wz, wr     rh  i, uh, uz, ur    
rh  h and     is the element-wise multiplication
operation.

we cannot directly apply the formula above to
the jordan_gru model since the dimensions
of the output vectors oi and the hidden vector hi
are different in general. for jordan_gru, we
   rst need to transform the output vector oi into the
hidden vector space, leading to the following for-
mula:

hi = zi       oi + (1     zi)     ti   1

3.3 the extended networks
one of the limitations of the four basic models pre-
sented above is their incapacity to incorporate the
future context information that might be crucial to
the prediction in the current step. for instance,
consider the    rst word    liverpool    in the follow-
ing sentence:

liverpool suffered an upset    rst home league
defeat of the season, beaten 1-0 by a guy whit-
tingham goal for shef   eld wednesday.

in this case, the correct label organization
can only be detected if we    rst go over the whole
sentence and then utilize the context words after
   liverpool    to decide its label.

the limitation of the four models is originated
from their mechanism to perform a single pass
over the sentences from left to right and make the
prediction for a word once they    rst encounter it.
in the following, we investigate two different net-
works to overcome this limitation.

3.3.1 the contextual networks
the contextual networks are motivated by the
id56 encoder-decoder models that have become
very popular in id4 re-
cently (cho et al., 2014a; bahdanau et al., 2015).
in these networks, we    rst run a id56 re over
the whole sentence x = x1x2 . . . xn to collect the
hidden vector sequence c1, c2, . . . , cn, where ci is
the hidden vector for the i-th step in the sentence.
for convenience, this process is denoted by:

ti   1 = t oi   1

re(x1x2 . . . xn) = c1, c2, . . . , cn

  oi =   (woxi + uo(ri     ti   1))

zi =   (wzxi + uzti   1)

(4)

ri =   (wrxi + urti   1)

where t     rh  o.

the    nal hidden vector cn is then considered
as a distributed representation of x, encoding the
global context or topic information for x (the en-
coding phrase) and thus possibly being helpful for
the label prediction of each word in x. conse-
quently, we perform the second id56 rd over x
to decode the sentence in which cn is used as an
additional input in computing the hidden units for

o0

o1

o2

o3

on   1

on

o1

o2

o3

on   1

on

h1

h2

h3

hn   1

hn

  1

  2

  3

  n   1

  n

r1

l1

r2

l2

r3

l3

l0

rn   1

ln   1

rn

ln

rn+1

l0

h1

  1

r1

l1

h2

  2

r2

l2

h3

  3

r3

l3

hn   1

  n   1

rn   1

ln   1

hn

  n

rn

ln

rn+1

x1

x2

x3

xn   1

xn

x1

x2

x3

xn   1

xn

figure 2: the bidirectional models. the model on the right is from mesnil et al. (2013) with the forward
and backward context size of 1. l0, rn+1 are the zero vectors.

every time step (the decoding phrase).

note that re (the encoding model) should be an
elman model4 while rd (the decoding model) can
be any elman or jordan model. as an example,
the formula for rd = elman is:

hi =   (u xi + v hi   1 + scn)

3.3.2 the bidirectional networks
the bidirectional networks involve three passes
over the sentence, in which the    rst two passes
are designated to encode the sentence while the
third pass is responsible for decoding. the pro-
cedure for the sentence x = x1x2 . . . xn is below:

(i) run the    rst id56 ref from left to right
over x1x2 . . . xn to obtain the    rst hidden vector
or output vector sequence (depending on whether
ref is an elman or jordan network respectively):
ref (x1x2 . . . xn) = l1, l2, . . . , ln (forward encod-
ing).

(ii) run the second id56 reb

from right
to left over x1x2 . . . xn to obtain the sec-
ond hidden vector or output vector sequence:
reb(xnxn   1 . . . x1) = rn, rn   1, . . . , r1 (back-
ward encoding).

(iii) obtain the concatenated sequence    =

  1,   2, . . . ,   n where   i = [li, ri].

(iv) decode the sentence with the third id56
rd (the decoding model) using    as the input
vector, i.e, replacing xi by   i in the formula (1),
(2), (3) and (4).

again, re and rd can be any model in {elman,
jordan, elman_gru, jordan_gru}.

the observation is, at the time step i, the for-
ward hidden vector li represents the encoding for
the past word context (from position 1 to i) while
the backward hidden vector ri is the summary
for the future word context (from position n to
i). consequently, the concatenated vector   i =
[li, ri] constitutes a distributed representation that
is speci   c to the word at position i but still en-
capsulates the context information over the whole
sentence at the same time. this effectively pro-
vides the networks a much richer representation
to decode the sentence. the bidirectional network
for re = elman and rd = jordan is given on
the left of figure 2.

we notice that mesnil et al. (2013) also inves-
tigate the bidirectional models for the task of slot
   lling in spoken language understanding. how-
ever, compared to the work presented here, mes-
nil et al. (2013) does not use any special transition
memory cells (like the grus we are employing
in this paper) to avoid numerical stability issues
(pascanu et al., 2012). besides, they form the in-
puts    for the decoding phase from a larger context
of the forward and backward encoding outputs,
while performing word-wise, independent classi   -
cation; in contrast, we use only the current output
vectors in the forward and backward encodings for
  , but perform recursive computations to decode
the sentence via the id56 model rd (demonstrated
on the right of figure 2).

conceptually, the encoding id56s ref and reb
can be different but in this work, for simplicity and
consistency, we assume that we only have a single
encoding model, i.e, ref = reb = re. once
4from now on, for convenience, the term    elman models   
refers to the elman and elman_gru models. the same
implication applies for the jordan models.

3.4 training and id136

we train the networks locally. in particular, each
training example consists of a word xi and its cor-
responding label yi in a sentence x = x1x2 . . . xn
(denoted by e = (xi, yi, x)).
in the encoding
phase, we    rst compute the necessary inputs ac-

input

projection

output

input

projection

output

input

projection

output

wt   2

wt   1

wt+1

wt+2

sum

wt

wt

wt   2

wt   2

wt   1

wt   1

concatenate

wt

wt+1

wt+1

wt+2

wt+2

cbow

skip-gram

c-concat

figure 3: methods to train id27s

cording to the speci   c model of interest. this
can be the original input vectors x1, x2, . . . , xn in
the four basic models or the concatenated vectors
  1,   2, . . . ,   n in the bidirectional models. for
the contextual models, we additionally have the
context vector cn. eventually, in the decoding
phase, an sequence of vd input vectors preceding
the current position i is fed into the decoding net-
work rd to obtain the output vector sequence. the
last vector in this output sequence corresponds to
the probabilistic label distribution for the current
position i, to be used to compute the objective
function. for example, in the bidirectional mod-
els, the input sequence for the decoding phase is
  i   vd   i   vd+1 . . .   i while the output sequence is:
re(  i   vd   i   vd+1 . . .   i) = oi   vd oi   vd+1 . . . oi.

in this work, we employ the stochastic gradient
descent algorithm5 to update the parameters via
minimizing the negative log-likelihood objective
function: nll(e) =     log(oi[yi]).

finally, besides the weight matrices in the net-
works, the id27s are also optimized
during training to obtain the task-speci   c word
embeddings for md. the gradients are computed
using the back-propagation through time algo-
rithm (mozer, 1989) and id136 is performed
by running the networks over the whole sentences
and taking argmax over the output sequence: yi =
argmax(oi).

els to train id27s have been proposed
recently in mikolov et al.
(2013a; 2013b) that
introduce two id148, i.e the continu-
ous bag-of-words model (cbow) and the contin-
uous skip-gram model (skip-gram). the cbow
model attempts to predict the current word based
on the average of the context word vectors while
the skip-gram model aims to predict the surround-
ing words in a sentence given the current word. in
this work, besides the cbow and skip-gram mod-
els, we examine a concatenation-based variant of
cbow (c-concat) to train id27s
and compare the three models to gain insights into
which kind of model is effective to obtain word
representations for the md task. the objective
of c-concat is to predict the target word us-
ing the concatenation of the vectors of the words
surrounding it, motivated from our strategy to de-
cide the label for a word based on the concate-
nated context vectors. intuitively, the c-concat
model would perform better than cbow due to
the close relatedness between the decoding strate-
gies of c-concat and the md methods. cbow,
skip-gram and c-concat are illustrated in fig-
ure 3.

5 experiments

5.1 dataset

4 word representation

following collobert et al.
(2011), we pre-train
id27s from a large corpus and em-
ploy them to initialize the word representations
in the models. one of the state-of-the-art mod-
5we try the adadelta algorithm (zeiler, 2012) and the

dropout id173 but do not see much difference.

our main focus
in this work is to evalu-
ate the robustness of the md systems across
to inves-
domains and languages.
tigate the robustness across domains,
follow-
ing the prior work (plank and moschitti, 2013;
nguyen et al., 2015a), we utilize the ace 2005
dataset which contains 6 domains: broadcast news
(bn), newswire (nw), broadcast conversation (bc),

in order

also

telephone conversation (cts), weblogs (wl), usenet
(un) and 7 entity types: person, organization, gpe,
location, facility, weapon, vehicle. the union of
bn and nw is considered as a single domain, called
news. we take half of bc as the only development
data and use the remaining data and domains for
evaluation. some statistics about the domains are
given in table 1. as shown in plank and moschitti
(2013), the vocabulary of the domains is quite dif-
ferent.
the
completeness,
for
en-
on
id56s
system
the
tity recognition
for
(florian et al., 2003;
conll 2003
tjong kim sang and de meulder, 2003)
and
compare the performance with the state-of-
the-art neural network system on this dataset
(collobert et al., 2011). regarding the robustness
across languages, we further evaluate the id56
models on the conll 2002 dataset for dutch
id397 (carreras et al., 2002;
tjong kim sang, 2002). both conll datasets
come along with the training data, validation data
and test data, annotated for 4 types of entities:
person, organization, location and miscellaneous.

we
the
english

dataset6

named

using

test

domain
news
bc
cts
wl
un
total

#docs
332
60
39
119
49
599

#sents
6487
3720
5900
2447
2746
21300

#mentions

22460
9336
9924
6538
6507
54765

table 1: ace 2005 dataset

finally, we use the standard iob2 tagging
schema for the ace 2005 dataset and the dutch
conll dataset while the iobes tagging schema
is applied for the english conll dataset to ensure
the compatibility with collobert et al. (2011).

5.2 resources and parameters
in all the experiments for id56s below, we employ
the context window vc = 5, the decoding window
vd = 9. we    nd that the optimal number of hidden
units (or the dimension of the hidden vectors) and
the learning rate vary according to the dataset. for
the ace 2005 dataset, we utilize 200 hidden units
with learning rate = 0.01 while these numbers are
100 and 0.06 respectively for the conll datasets.
note that the number of hidden units is kept the
same in both the encoding phase and the decoding
phase.

6
7

http://www.cnts.ua.ac.be/conll2003/ner/

http://www.cnts.ua.ac.be/conll2002/ner/

for word representation, we train the word
embeddings for english from the gigaword cor-
pus augmented with the newsgroups data from
bolt (broad operational language technolo-
gies) (6 billion tokens) while the entire dutch
wikipedia pages (310 million tokens) are ex-
tracted to train the dutch id27s. we
utilize the id97 toolkit8 (modi   ed to add the
c-concat model) to learn the word representa-
tions. following baroni et al. (2014), we use the
context window of 5, subsampling set to 1e-05 and
negative sampling with the number of instances set
to 10. the dimension of the vectors is set to 300
to make it comparable with the id97 toolkit.

5.3 model architecture experiments
5.3.1 model architecture evaluation
in this section, we evaluate different id56 mod-
els by training the models on the news domain
and report the performance on the development
set. as presented in the previous sections, we have
4 basic models m = {elman, jordan, el-
man_gru, jordan_gru}, 8 contextual mod-
els (two choices for the encoding model re in
{elman, elman_gru} and 4 choices for the
decoding model rd     m), and 16 bidirectional
models (4 choices for the encoding and decoding
models re, rd in m). the performance for the ba-
sic models, the contextual models and the bidirec-
tional models are shown in table 2, table 3 and
table 4 respectively9.

f1

model(rd)
80.70
elman
80.46
jordan
elman_gru
80.85
jordan_gru 81.06

table 2: the basic models    performance

rd
elman
jordan
elman_gru
jordan_gru

re elman elman_gru

80.38
80.67
80.56
80.77

80.16
80.66
79.61
79.77

table 3: the contextual models    performance

there are several important observations from

the three tables:

-elman vs jordan: in the encoding phase, the
elman models consistently outperform the jordan
models when the same decoding model is applied

8
https://code.google.com/p/id97/
9the experiments in this section use c-concat to pre-

train id27s.

rd

re elman

elman_gru

elman
jordan
elman_gru
jordan_gru

80.99
81.14
80.53
80.98

81.42
81.68
81.16
82.37

rd

re

jordan jordan_gru

elman
jordan
elman_gru
jordan_gru

79.12
79.21
79.80
79.76

79.64
80.85
80.41
81.02

table 4: the bidirectional models    performance
in the bidirectional architecture. in the decoding
phase, however, it turns out that the jordan models
are better most of the time over different model
architectures (basic, contextual or bidirectional).

-with vs without grus: the trends are quite
mixed in the comparison between the cases with
and without grus. in particular, for the encoding
part, given the same decoding model, grus are
very helpful in the bidirectional architecture while
this is not the case for the contextual architecture.
for the decoding part, we can only see the clear
bene   t of grus in the basic models and the bidi-
rectional architecture when re is a jordan model.
in
general, the bidirectional models are more effec-
tive than the contextual models and the basic mod-
els, con   rming the effectiveness of bidirectional
modeling to achieve a richer representation for
md.

-regarding different model architectures,

the best basic model (f1 = 81.06%), the best
contextual model (f1 = 80.77%) and the best bidi-
rectional model with (f1 = 82.37%) are called ba-
sic, context and bidirect respectively. in
the following, we only focus on these best models
in the experiments.

5.3.2 comparison to other bidirectional

id56 work

mesnil et al.
(2013) also present a id56 sys-
tem with bidirectional modeling for the slot    ll-
ing task. as described in section 3.3.2, the ma-
jor difference between the bidirectional models in
this work and mesnil el al.
(2013)   s is the re-
currence in our decoding phase. table 5 com-
pares the performance of the bidirectional model
from mesnil et al. (2013), called mesnil, and
the bidirect model. in order to verify the ef-
fectiveness of recurrence in decoding, the perfor-
mance of mesnil incorporated with the jor-
dan_gru model in the decoding phase (mes-
nil+jordan_gru) is also reported.

in general, we see that the bidirectional model
in this work is much better than the model in mes-
nil et al. (2013) for md. this is signi   cant with

model
mesnil (2013)
81.01
mesnil + jordan_gru 82.17
82.91
bidirect

p

r

79.67
79.56
81.83

f1

80.33
80.85
82.37

table 5: comparison to mesnil et al. (2013).

p < 0.05 and a large margin (an absolute im-
provement of 2.04%). more interestingly, mes-
nil is further improved when it is augmented with
the jordan_gru decoding, verifying the im-
portance of recurrence in decoding for md.

5.4 id27 evaluation
the section investigates the effectiveness of differ-
ent techniques to learn id27s to initial-
ize the id56s for md. table 6 presents the perfor-
mance of the basic, context and bidirect
models on the development set (trained on news)
when the cbow, skip-gram and c-concat
techniques are utilized to obtain id27s
from the same english corpus. we also report the
performance of the models when they are initial-
ized with the id97 id27s from
mikolov et al. (2013a; 2013b) (trained with the
skip-gram model on 100 billion words of google
news) (id97). all of these word embed-
dings are updated during the training of the id56s
to induce the task-speci   c id27s . fi-
nally, for comparison purpose, the performance
for the two following scenarios is also included:
(i) the word vectors are initialized randomly (not
using any pre-trained id27s) (ran-
dom), and (ii) the word vectors are loaded from
the c-concat pre-trained id27s but
   xed during the id56 training (fixed).

word
basic
embeddings
79.30
random
80.36
fixed
80.92
id97
cbow
78.61
skip-gram 81.45
81.06
c-concat

model
context

bidirect

79.49
80.60
81.66
79.58
81.59
80.77

79.76
81.52
81.41
79.74
81.96
82.37

table 6: id27 comparison

the    rst observation is that we need to bor-
row some pre-trained id27s and up-
date them during the training process to improve
the md performance (comparing c-concat,
random and fixed). second, c-concat is
much better than cbow, con   rming our hypoth-
esis about the similarity between the decodings
of c-bow and md in section 4. third, we
do not see much difference in terms of md per-
formance when we enlarge the corpus to learn

id27s (comparing skip-gram and
id97 that is trained with the skip-gram
model on a much larger corpus). finally, we
achieve the best performance when we apply the
c-concat technique in the bidirect model.
from now on, for consistency, we use the c-
concat id27s in all the experiments
below.

5.5 comparison to the state-of-the-art
5.5.1 the ace 2005 dataset for mention

detection

tasks.

the state-of-the-art systems for mention detection
on the ace 2005 dataset have been the joint ex-
traction system for entity mentions and relations
from li and ji (2014a) and the information net-
works to unify the outputs of three information
extraction tasks: entity mentions, relations and
events using structured id88 from li et al.
(2014b). they extensively hand-design a large
set of features (parsers, gazetteers, word clusters,
coreference etc) to capture the inter-dependencies
between different
in this section, be-
sides comparing the id56 systems above with
these state-of-the-art systems, we also implement
a maximum id178 markov model (memm)
system10, following the description and features
in florian et al.
(2004; 2006), and include it in
the comparison for completeness11. for this com-
parison, following li and ji (2014a), we remove
the documents from the two informal domains cts
and un, and then randomly split the remaining 511
documents into 3 parts: 351 for training, 80 for
development, and the rest 80 for blind test. the
performance of the systems on the blind test set is
presented in table 7.

system
joint system (li and ji, 2014a)
joint system (li et al., 2014b)
memm
basic
context
bidirect

p

85.2
85.1
84.4
83.4
81.8
83.7

r
76.9
77.3
80.5
80.8
81.6
81.8

f1
80.8
81.0
82.4
82.1
81.7
82.7

table 7: performance for md on ace.

there are two main conclusions from the table.
first, our memm system is already better than
the state-of-the-art system on this dataset, possibly
due to the superiority of the features we are em-

10we tried the crf model, but it is worse than memm in

our case.

11we notice that the four features we are using in the id56
models (section 3) are also included in the feature set of the
implemented memm system.

ploying in this system. consequently, from now
on, we would utilize this memm system as the
baseline in the following experiments. second,
all the three id56 systems: basic, context
and bidirect substantially outperform the state-
of-the-art system with large margins. in fact, we
achieve the best performance on this dataset with
the bidirect model, once again testifying to the
bene   t of bidirectional modeling for md.

5.5.2 the conll 2003 dataset for english

id39

this section further assess the id56 systems on
the similar task of id39
for english to compare them with other neural
network approaches for completeness. on the
conll 2003 dataset for english ner, the best
neural network system so far is collobert et al.
(2011). this system, called id98-sentence, em-
ploys convolutional neural networks to encode the
sentences and then decodes it at the sentence level.
table 8 shows the performance of id98-sentence
and our id56 systems on this dataset.

system
id98-sentence
basic
context
bidirect

f1

89.59
89.26
88.88
89.86

table 8: performance on english conll 2003.

as we can see from the table, the id56 systems
are on par with the id98-sentence system from
collobert et al. (2011) except the context sys-
tem that is worse in this case. we actually accom-
plish the best performance with the bidirect
model, thus further demonstrating its virtue.

for the    rst experiment,

5.6 cross-domain experiments
one of the main problems we want to address
in this work is the robustness across domains of
the md systems. this section tests the memm
(the baseline) and the id56 systems on the
cross-domain settings to gain an insights into
their operation when the domain changes.
in
particular,
following
the previous work of id20 on the
ace 2005 dataset
(plank and moschitti, 2013;
nguyen and grishman, 2014;
nguyen et al., 2015a), we treat news as
the
source domain and the other domains: bc, cts, wl
and un as the target domains. we then examine
the systems on two scenarios: (i) the systems are
trained and tested on the source domain via 5-fold
cross validation (in-domain performance), and

system

memm
basic
context
bidirect

in-domain

76.90
79.01
78.27
80.00   

without features
bc

71.73
77.06
73.55
76.27   

cts
78.02
85.42
84.85
85.64   

wl

66.89
73.00
73.39
73.79   

un

67.77
72.93
72.26
73.88   

in-domain

82.55
81.99
81.61
82.52

78.33
78.75
77.84
79.65   

cts
87.17
86.51
87.79
88.43   

wl

76.70
76.60
76.60
76.70

un

76.75
76.94
76.41
77.03

with features
bc

table 9: system   s performance on the cross-domain setting. cells marked with    designate the bidi-
rect models that signi   cantly outperform (p < 0.05) the memm model on the speci   ed domains.

bc

75.20
66.91
74.94
72.72

bc
cts
wl
un

memm

cts

wl

86.60
89.76
86.53
86.75

70.25
68.74
77.07
72.04

un

72.38
69.72
75.90
73.47

bc

75.49
68.23
74.73
73.53

bidirect
cts
wl
87.51
91.24
86.79
88.29

70.75
68.82
76.35
73.16

un

73.04
70.27
75.37
74.00

bc
0.29
1.32   
-0.21
0.81   

bidirect-memm

cts
0.91   
1.48   
0.26
1.45   

wl

0.50   
0.08
-0.72
1.12   

un

0.66   
0.55   
-0.53
0.53   

table 10: comparison between memm and bidirect. cells marked with    designate the statistical
signi   cance (p < 0.05). the columns and rows correspond to the source and target domains respectively.

(ii) the systems are trained on the source domain
but evaluated on the target domains. besides, in
order to understand the effect of the features on
the systems, we report the systems    performance
in both the inclusion and exclusion of the features
described in section 3. table 9 presents the
results.

to summarize, we    nd that

the id56 sys-
tems signi   cantly outperform the memm system
across all the target domains when the features are
not applied. the bidirect system still yields
the best performance among systems being inves-
tigated (except in domain bc). this is also the case
in the inclusion of features and demonstrates the
robustness of the bidirect model in the domain
shifts. we further support this result in table 10
where we report the performance of the memm
and bidirect systems (with features) on differ-
ent domain assignments for the source and the tar-
get domains. finally, we also see that the features
are very useful for both the memm and the id56s.

5.7 id39 for dutch
the previous sections have dealt with mention de-
tection for english. in this section, we want to ex-
plores the capacity of the systems to quickly and
effectively adapt to a new language.
in particu-
lar, we evaluate the systems on the named entity
recognition task (the simpli   ed version of the md
task) for dutch using the conll 2002 dataset.
the state-of-the-art performance for this dataset is
due to carreras et al. (2002) in the conll 2002
evaluation and nothman et al. (2013). very re-
cently, while we were preparing this paper, gillick
el al.
(2015) introduce a multilingual language
processing system and also report the performance

on this dataset. table 11 compares the systems.

system
state-of-the-art in conll
nothman et al. (2013)
gillick el al. (2015)
gillick el al. (2015)*
memm
basic
bidirect

p

r

77.83

76.29

-
-
-

-
-
-

80.25
82.98
84.08

77.52
81.53
82.82

f1

77.05
78.60
78.08
82.84
78.86
82.25
83.45

table 11: performance on dutch conll 2002.

note that the systems in gillick el al. (2015) are
also based on id56s and the row labeled with *
for gillick el al. (2015) corresponds to the system
trained on multiple datasets instead of the single
conll dataset for dutch, so not being compara-
ble to ours.

the most important conclusion from the table
is that the id56 models in this work signi   cantly
outperform memm as well as the other compa-
rable system by large margins (up to 22% reduc-
tion in relative error). this proves that the pro-
posed id56 systems are less subject to the lan-
guage changes than memm and the other sys-
tems. finally, bidirect is also signi   cantly bet-
ter than basic, testifying to its robustness across
languages.

6 conclusion

we systematically investigate various id56s to
solve the md problem which suggests that bidi-
rectional modeling is a very helpful mechanism
for this task. the comparison between the id56
models and the state-of-the-art systems in the liter-
ature reveals the strong promise of the id56 mod-
els. in particular, the bidirectional model achieves
the best performance in the general setting (up to
9% reduction in relative error) and outperforms

a very strong baseline of the feature-based expo-
nential models in the cross-domain setting, thus
demonstrating its robustness across domains. we
also show that the id56 models are more portable
to new languages as they are signi   cantly better
than the best reported systems for ner in dutch
(up to 22% reduction in relative error). in the fu-
ture, we plan to apply the bidirectional modeling
technique to other tasks as well as study the com-
bination of different network architectures and re-
sources to further improve the performance of the
systems.

acknowledgment

we would like to thank ralph grishman for valu-
able suggestions.

references
[ando and zhang2005] rie ando and tong zhang.
2005. a high-performance semi-supervised learn-
ing method for text chunking. in acl.

[bahdanau et al.2015] dzmitry bahdanau, kyunghyun
cho, and yoshua bengio. 2015. neural machine
translation by jointly learning to align and translate.
in iclr.

[baroni et al.2014] marco baroni, georgiana dinu, and
2014. don   t count, pre-
germ  n kruszewski.
dict! a systematic comparison of context-counting
vs. context-predicting semantic vectors. in acl.

[bengio et al.1994] yoshua bengio, patrice simard,
1994. learning long-term
in

and paolo frasconi.
dependencies with id119 is dif   cult.
journal of machine learning research 3.

[cho et al.2014a] kyunghyun cho, bart van merrien-
boer, caglar gulcehre, dzmitry bahdanau, fethi
bougares, holger schwenk, and yoshua bengio.
2014a. learning phrase representations using id56
encoder   decoder for id151.
in emnlp.

[cho2014b] kyunghyun cho. 2014b. quick introduc-
tion to natural language processing with neural net-
works.
in lecture at the ecole polytechnique de
montreal.

[collobert and weston2008] ronan collobert and ja-
son weston. 2008. a uni   ed architecture for natu-
ral language processing: deep neural networks with
multitask learning. in icml.

[collobert et al.2011] ronan collobert,

jason we-
ston, l  l   on bottou, michael karlen, koray
kavukcuoglu, and pavel p. kuksa. 2011. natu-
ral language processing (almost) from scratch.
in
corr.

[daume2007] hal daume. 2007. frustratingly easy

id20. in acl.

[dos santos and guimar  es2015b] cicero dos santos
and victor guimar  es. 2015b. boosting named en-
tity recognition with neural character embeddings.
in the fifth named entity workshop, acl-ijcnlp.

[dos santos et al.2015a] cicero dos santos, bing xi-
ang, and bowen zhou. 2015a. classifying relations
by ranking with convolutional neural networks. in
acl-ijcnlp.

[elman1990] jeffrey l. elman. 1990. finding structure

in time. in cognitive science.

[florian et al.2003] radu florian, abe ittycheriah,
hongyan jing, and tong zhang. 2003. named en-
tity recognition through classi   er combination.
in
conll-2003.

[bikel et al.1997] daniel m. bikel, scott miller,
richard schwartz, and ralph weischedel. 1997.
nymble: a high-performance learning name-   nder.
in anlp.

[florian et al.2004] r florian, h hassan, a ittycheriah,
h jing, n kambhatla, x luo, n nicolov, and
s roukos. 2004. a statistical model for multilin-
gual entity detection and tracking. in hlt-naacl.

[blitzer et al.2006] john blitzer, ryan mcdonald, and
fernando pereira. 2006. id20 with
structural correspondence learning. in emnlp.

[borthwick et al.1997] andrew borthwick, john ster-
ling, eugene agichtein, and ralph grishman. 1997.
exploiting diverse knowledge sources via maximum
id178 in id39. in sixth work-
shop on very large corpora.

[carreras et al.2002] xavier carreras, llu  s m  rques,
and llu  s padr  . 2002. named entity extraction us-
ing adaboost. in conll.

[florian et al.2006] radu florian, hongyan

jing,
nanda kambhatla, and imed zitouni. 2006. fac-
torizing complex models: a case study in mention
detection. in acl.

[florian et al.2010] radu florian, john pitrelli, salim
roukos, and imed zitouni. 2010. improving men-
tion detection robustness to noisy input. in emnlp.

[gillick et al.2015] dan gillick, cliff brunk, oriol
vinyals, and amarnag subramanya. 2015. multi-
lingual language processing from bytes.
in arxiv
preprint arxiv:1512.00103.

[cherry and guo2015] colin cherry and hongyu guo.
2015. the unreasonable effectiveness of word rep-
resentations for twitter id39. in
naacl.

[gorid113y et al.2015] matthew r. gorid113y, mo yu, and
mark dredze. 2015. improved id36
with feature-rich compositional embedding models.
in emnlp.

[graves et al.2009] a. graves, marcus eichenberger-
liwicki, s. fernandez, r. bertolami, h. bunke, and
j. schmidhuber. 2009. a novel connectionist sys-
tem for unconstrained handwriting recognition. in
ieee transactions on pattern analysis and machine
intelligence.

[hochreiter and schmidhuber1997] sepp hochreiter
and jurgen schmidhuber. 1997. long short-term
memory. in neural computation.

[huang and yates2010] fei huang and alexander
2010. exploring representation-learning
yates.
approaches to id20.
in the acl
workshop on id20 for natural
language processing (danlp).

[jordan1986] michael i. jordan. 1986. serial order:
a parallel distributed processing approach. in tech.
rep. no. 8604. san diego: university of california,
institute for cognitive science.

[kalchbrenner et al.2014] nal kalchbrenner, edward
grefenstette, and phil blunsom. 2014. a convo-
lutional neural network for modelling sentences. in
acl.

[kate and mooney2010] j. rohit kate and raymond
mooney. 2010. joint entity and id36
using card-pyramid parsing. in conll.

[kim2014] yoon kim. 2014. convolutional neural net-

works for sentence classi   cation. in emnlp.

[lafferty et al.2001] john lafferty, andrew mccallum,
and fernando pereira. 2001. conditional random
   elds: probabilistic models for segmenting and la-
beling sequence data. in icml.

[li and ji2014a] qi li and heng ji. 2014a. incremen-
tal joint extraction of entity mentions and relations.
in acl.

[li et al.2014b] qi li, heng ji, yu hong, and sujian
li. 2014b. constructing information networks us-
ing one single model. in emnlp.

[lin and wu2009] dekang lin and xiaoyun wu. 2009.
in

phrase id91 for discriminative learning.
acl-ijcnlp.

[mesnil et al.2013] gregoire mesnil, xiaodong he,
li deng, and yoshua bengio. 2013. investigation
of recurrent neural network architectures and learn-
ing methods for spoken language understanding. in
interspeech.

[mikolov et al.2013a] tomas mikolov, kai chen, greg
corrado, and jeffrey dean. 2013a. ef   cient esti-
mation of word representations in vector space. in
iclr.

[mikolov et al.2013b] tomas mikolov, ilya sutskever,
kai chen, greg corrado, and jeffrey dean. 2013b.
distributed representations of words and phrases
and their compositionality. in nips.

[miller et al.2004] scott miller, jethran guinness, and
name tagging with
alex zamanian.
word clusters and discriminative training. in hlt-
naacl.

2004.

[mnih and hinton2008] andriy mnih and geoffrey
hinton. 2008. a scalable hierarchical distributed
language model. in nips.

[mozer1989] michael c. mozer.

a fo-
cused id26 algorithm for temporal pat-
tern recognition. in complex systems.

1989.

[nguyen and grishman2014] thien huu nguyen and
ralph grishman. 2014. employing word represen-
tations and id173 for id20 of
id36. in acl.

[nguyen and grishman2015b] thien huu nguyen and
ralph grishman. 2015b. id37 and do-
main adaptation with convolutional neural networks.
in acl-ijcnlp.

[nguyen et al.2015a] thien huu nguyen, barbara
plank, and ralph grishman. 2015a. semantic rep-
resentations for id20: a case study on
the tree kernel-based method for id36.
in acl-ijcnlp.

[nothman et al.2013] joel nothman, nicky ringland,
will radford, tara murphy, and james r curran.
2013. learning multilingual named entity recogni-
tion from wikipedia. in arti   cial intelligence.

[pascanu et al.2012] razvan pascanu, tomas mikolov,
and yoshua bengio. 2012. on the dif   culty of
training recurrent neural networks. in arxiv preprint
arxiv:1211.5063.

[passos et al.2014] alexandre passos, vineet kumar,
and andrew mccallum. 2014. lexicon infused
phrase embeddings for named entity resolution. in
proceedings of the eighteenth conference on com-
putational natural language learning.

[plank and moschitti2013] barbara plank and alessan-
dro moschitti. 2013. embedding semantic similar-
ity in tree kernels for id20 of relation
extraction. in acl.

[ratinov and roth2009] lev ratinov and dan roth.
2009. design challenges and misconceptions in
id39. in conll.

[ritter et al.2011] alan ritter, sam clark, mausam,
and oren etzioni. 2011. id39
in tweets: an experimental study. in emnlp.

[roth and yih2007] d. roth and w. yih. 2007. global
id136 for entity and relation identi   cation via a
id135 formulation. in introduction to
statistical relational learning.

[schnabel and sch  tze2014] tobias schnabel and hin-
rich sch  tze. 2014. flors: fast and simple domain
adaptation for part-of-speech tagging. in transac-
tions of the association of computational linguis-
tics.

[zitouni and florian2008] imed zitouni and radu flo-
rian. 2008. mention detection crossing the language
barrier. in emnlp.

[shen et al.2014] yelong shen, xiaodong he, jianfeng
gao, li deng, and gregoire mesnil. 2014. learning
semantic representations using convolutional neural
networks for web search. in www.

[socher et al.2012] richard socher, brody huval,
christopher d. manning, and andrew y. ng.
2012. semantic compositionality through recursive
matrix-vector spaces. in emnlp.

[suzuki and isozaki2008] jun suzuki

and hideki
isozaki. 2008. semi-supervised sequential labeling
and segmentation using giga-word scale unlabeled
data. in acl-hlt.

[tai et al.2015] kai sheng tai, richard socher, and
christopher d. manning. 2015. improved semantic
representations from tree-structured long short-term
memory networks. in acl-ijcnlp.

[tjong kim sang and de meulder2003] erik f. tjong
kim sang and fien de meulder.
intro-
duction to the conll-2003 shared task: language-
independent id39. in conll.

2003.

[tjong kim sang2002] erik f. tjong kim sang.
2002.
introduction to the conll-2002 shared task:
language-independent id39. in
conll.

[turian et al.2010] joseph turian, lev-arie ratinov,
and yoshua bengio. 2010. word representations:
a simple and general method for semi-supervised
learning. in acl.

[xiao and guo2013] min xiao and yuhong guo. 2013.
id20 for sequence labeling tasks with
a probabilistic language adaptation model. in icml.

[yao et al.2013] kaisheng yao, geoffrey zweig, mei-
yuh hwang, yangyang shi, and dong yu. 2013.
recurrent neural networks for language understand-
ing. in interspeech. interspeech.

[yao et al.2014] kaisheng yao, baolin peng, yu zhang,
dong yu, geoffrey zweig, and yangyang shi. 2014.
spoken language understanding using long short-
term memory neural networks. in ieee slt.

[yih et al.2014] wen-tau yih, xiaodong he,

and
2014. id29 for

christopher meek.
single-relation id53. in acl.

[zeiler2012] matthew d. zeiler.

an adaptive learning rate method.
abs/1212.5701.

2012. adadelta:
in corr,

[zeng et al.2014] daojian zeng, kang liu, siwei lai,
guangyou zhou, and jun zhao. 2014. relation
classi   cation via convolutional deep neural network.
in coling.

[zhou and xu2015] jie zhou and wei xu. 2015. end-
to-end learning of id14 using re-
current neural networks. in acl-ijcnlp.

