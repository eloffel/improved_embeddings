contextual lstm (clstm) models for

large scale nlp tasks

   
shalini ghosh

shalini@csl.sri.com

scott roy

hsr@google.com

oriol vinyals

vinyals@google.com

tom dean

tld@google.com

brian strope

bps@google.com

larry heck

larryheck@google.com

6
1
0
2

 

y
a
m
1
3

 

 
 
]
l
c
.
s
c
[
 
 

2
v
1
9
2
6
0

.

2
0
6
1
:
v
i
x
r
a

abstract
documents exhibit sequential structure at multiple levels of
abstraction (e.g., sentences, paragraphs, sections). these
abstractions constitute a natural hierarchy for representing
the context in which to infer the meaning of words and larger
fragments of text. in this paper, we present clstm (con-
textual lstm), an extension of the recurrent neural network
lstm (long-short term memory) model, where we incor-
porate contextual features (e.g., topics) into the model. we
evaluate clstm on three speci   c nlp tasks: word pre-
diction, next sentence selection, and sentence topic predic-
tion. results from experiments run on two corpora, english
documents in wikipedia and a subset of articles from a re-
cent snapshot of english google news, indicate that using
both words and topics as features improves performance of
the clstm models over baseline lstm models for these
tasks. for example on the next sentence selection task, we
get relative accuracy improvements of 21% for the wikipedia
dataset and 18% for the google news dataset. this clearly
demonstrates the signi   cant bene   t of using context appro-
priately in natural language (nl) tasks. this has impli-
cations for a wide variety of nl applications like question
answering, sentence completion, paraphrase generation, and
next utterance prediction in id71.

1.

introduction

documents have sequential structure at di   erent hierar-
chical levels of abstraction: a document is typically com-
posed of a sequence of sections that have a sequence of para-
graphs, a paragraph is essentially a sequence of sentences,
each sentence has sequences of phrases that are comprised of
a sequence of words, etc. capturing this hierarchical sequen-
tial structure in a language model (lm) [30] can potentially
give the model more predictive accuracy, as we have seen in
previous work [12, 13, 25, 33, 48].

   work was done while visiting google research.

acm isbn 978-1-4503-2138-9.
doi: 10.1145/1235

a useful aspect of text that can be utilized to improve the
performance of lms is long-range context. for example, let
us consider the following three text segments:

1) sir ahmed salman rushdie is a british indian novelist
and essayist. he is said to combine magical realism with
historical    ction.

2) calvin harris & haim combine their powers for a mag-

ical music video.

3) herbs have enormous magical power, as they hold the

earth   s energy within them.

consider an lm that is trained on a dataset having the
example sentences given above     given the word    magi-
cal   , what should be the most likely next word according
to the lm: realism, music, or power? in this example, that
would depend on the longer-range context of the segment
in which the word    magical    occurs. one way in which the
context can be captured succinctly is by using the topic of
the text segment (e.g., topic of the sentence, paragraph). if
the context has the topic    literature   , the most likely next
word should be    realism   . this observation motivated us to
explore the use of topics of text segments to capture hierar-
chical and long-range context of text in lms.

in this paper, we consider long-short term memory (lstm)

models [20], a speci   c kind of recurrent neural networks
(id56s). the lstm model and its di   erent variants have
achieved impressive performance in di   erent sequence learn-
ing problems in speech, image, music and text analysis [15,
16, 19, 36, 39, 40, 42, 43, 45], where it is useful in captur-
ing long-range dependencies in sequences. lstms substan-
tially improve our ability to handle long-range dependencies,
though they still have some limitations in this regard [6, 12].
id56-based language models (id56-lms) were proposed
by mikolov et al. [32], and in particular the variant using
lstms was introduced by sundermeyer et al. [38]. in this
paper, we work with lstm-based lms. typically lstms
used for id38 consider only words as features.
mikolov et al. [31] proposed a conditional id56-lm for adding
context     we extend this approach of using context in id56-
lms to lstms, train the lstm models on large-scale data,
and propose new tasks beyond next work prediction.

we incorporate contextual features (namely, topics based
on di   erent segments of text) into the lstm model, and
call the resulting model contextual lstm (clstm). in
this work we evaluate how adding contextual features in the
clstm improves the following tasks:

1) word prediction: given the words and topic seen so far
in the current sentence, predict the most likely next word.
this task is important for sentence completion in applica-

tions like predictive keyboard, where long-range context can
improve word/phrase prediction during text entry on a mo-
bile phone.

2) next sentence selection: given a sequence of sentences,
   nd the most likely next sentence from a set of candidates.
this is an important task in question/answering, where topic
can be useful in selecting the best answer from a set of tem-
plate answers. this task is also relevant in other applications
like smart reply [7], for predicting the best response to an
email from a set of candidate responses.

3) sentence topic prediction: given the words and topic of
the current sentence, predict the topic of the next sentence.
we consider two scenarios: (a) where we don   t know the
words of the next sentence, (b) where we know the words of
the next sentence. scenario (a) is relevant for applications
where we don   t know the words of a user   s next utterance,
e.g., while predicting the topic of response of the user of a
dialog system, which is useful in knowing the intent of the
user; in scenario (b) we try to predict the topic/intent of an
utterance, which is common in a id96 task.

the main contributions of this paper are as follows:

1) we propose a new contextual lstm (clstm) model,
and demonstrate how it can be useful in tasks like word
prediction, next sentence scoring and sentence topic pre-
diction     our experiments show that incorporating context
into an lstm model (via the clstm) gives improvements
compared to a baseline lstm model. this can have po-
tential impact for a wide variety of nlp applications where
these tasks are relevant, e.g.
sentence completion, ques-
tion/answering, paraphrase generation, id71.

2) we trained the clstm (and the corresponding base-
line lstm) models on two large-scale document corpora:
english documents in wikipedia, and a recent snapshot of
english google news documents. the vocabulary we han-
dled in the modeling here was also large: 130k words for
wikipedia, 100k for google news. our experiments and
analysis demonstrate that the clstm model that combines
the power of topics with word-level features yields signi   cant
performance gains over a strong baseline lstm model that
uses only word-level features. for example, in the next sen-
tence selection task, clstm gets a performance improve-
ment of 21% and 18% respectively over the lstm model on
the english wikipedia and google news datasets.

3) we show initial promising results with a model where
we learn the thought embedding in an unsupervised manner
through the model structure, instead of using supervised
extraneous topic as side information (details in section 5.4).

2. related work

there are various approaches that try to    t a genera-
tive model for full documents. these include models that
capture the content structure using hidden markov mod-
els (id48s) [3], or id29 techniques to identify
the underlying meanings in text segments [29]. hierarchical
models have been used successfully in many applications,
including hierarchical bayesian models [10, 27], hierarchical
probabilistic models [37], hierarchical id48s [14] and hier-
archical crfs [35].

as mentioned in section 1, id56-based language mod-
els (id56-lms) were proposed by mikolov et al. [32], and
the variant using lstms was introduced by sundermeyer
et al. [38]     in this paper, we work with lstm-based lms.

mikolov et al. [31] proposed a conditional id56-lm for adding
context     we extend this approach of using context in id56-
lms to lstms.

recent advances in deep learning can model hierarchical
structure using id50 [21, 48, 49, 46], espe-
cially using a hierarchical recurrent neural network (id56)
framework. in clockwork id56s [24] the hidden layer is par-
titioned into separate modules, each processing inputs at its
own individual temporal granularity. connectionist tempo-
ral classi   cation or ctc [18] does not explicitly segment
the input in the hidden layer     it instead uses a forward-
backward algorithm to sum over all possible segments, and
determines the normalized id203 of the target sequence
given the input sequence. other approaches include a hy-
brid nn-id48 model [1], where the temporal dependency
is handled by an id48 and the dependency between adja-
cent frames is handled by a neural net (nn). in this model,
each node of the convolutional hidden layer corresponds to
a higher-level feature.

some nn models have also used context for modeling text.
paragraph vectors [8, 26] propose an unsupervised algorithm
that learns a latent variable from a sample of words from the
context of a word, and uses the learned latent context repre-
sentation as an auxiliary input to an underlying skip-gram or
continuous bag-of-words (cbow) model. another model
that uses the context of a word infers the latent dirichlet
allocation (lda) topics of the context before a word and
uses those to modify a id56 model predicting the word [31].
tree-structured lstms [41, 48] extend chain-structured
lstms to the tree structure and propose a principled ap-
proach of considering long-distance interaction over hierar-
chies, e.g., language or image parse structures. convolution
networks have been used for multi-level text understanding,
starting from character-level inputs all the way to abstract
text concepts [47]. skip thought vectors have also been used
to train an encoder-decoder model that tries to reconstruct
the surrounding sentences of an encoded passage [23].

other related work include document context language
models [22], where the authors have multi-level recurrent
neural network language models that incorporate context
from within a sentence and from previous sentences. lin et
al. [28] use a hierarchical id56 structure for document-level
as well as sentence-level modeling     they evaluate their mod-
els using word prediction perplexity, as well as an approach
of coherence evaluation by trying to predict sentence-level
ordering in a document.

in this work, we explore the use of long-range hierarchical
signals (e.g., sentence level or paragraph level topic) for text
analysis using a lstm-based sequence model, on large-scale
data     to the best of our knowledge this kind of contex-
tual lstm models, which model the context using a 2-level
lstm architecture, have not been trained before at scale on
text data for the nlp tasks mentioned in section 1.

3. word prediction

of the three di   erent tasks outlined in section 1, we focus
   rst on the word prediction task, where the goal is to predict
the next word in a sentence given the words and context
(captured via topic) seen previously.

let si be the ith sentence in a sequence of sentences, wi,j
be the jth word of sentence si, ni be the number of words
in si, and wi,j . . . wi,k indicate the sequence of words from
word j to word k in sentence i. note that sentence si is

equivalent to the sequence of words wi,0 . . . wi,ni   1. let t
be the random variable denoting the topic     it is computed
based on a particular subsequence of words seen from the
   rst word of the sequence (w0,0) to the current word (wi,j).
this topic can be based on the current sentence segment
(i.e., t = t opic(wi,0 . . . wi,j   1)), or the previous sentence
(i.e., t = t opic(wi   1,0 . . . wi   1,ni   1 )), etc. details regard-
ing the topic computation are outlined in section 3.2.

using this notation, the word prediction task in our case
can be speci   ed as follows: given a model with parameters
  , words w0,0 . . . wi,j and the topic t computed from a sub-
sequence of the words from the beginning of the sequence,
   nd the next word wi,j+1 that maximizes the id203:
p (wi,j+1|w0,0 . . . wi,j, t,   ).
3.1 model

for our approach, as explained before, we introduce the
power of context into a standard lstm model. lstm is a
recurrent neural network that is useful for capturing long-
range dependencies in sequences. the lstm model has
multiple lstm cells, where each lstm cell models the dig-
ital memory in a neural network.
it has gates that allow
the lstm to store and access information over time. for
example, the input/output gates control cell input/output,
while the forget gate controls the state of the cell.

the word-prediction lstm model was implemented in
the large-scale distributed google brain framework [9]. the
model takes words encoded in 1-hot encoding from the in-
put, converts them to an embedding vector, and consumes
the word vectors one at a time. the model is trained to pre-
dict the next word, given a sequence of words already seen.
the core algorithm used to train the lstm parameters is
bptt [44], using a softmax layer that uses the id of the
next word as the ground truth.

to adapt the lstm cell that takes words to a clstm cell
that takes as input both words and topics, we modify the
equations representing the operations of the lstm cell [17]
to add the topic vector t to the input gate, forget gate, cell
and output gate (t is the embedding of the discrete topic
vector). in each of the following equations, the term in bold
is the modi   cation made to the original lstm equation.

it =   (wxixt + whiht   1 + wcict   1 + bi + wtit)
ft =   (wxf xt + whf ht   1 + wcf ct   1 + bf + wtit)
ct = ftct   1 + it tanh(wxcxt + whcht   1 + bc + wtit)
ot =   (wxoxt + whoht   1 + wcoct + bo + wtit)
ht = ot tanh(ct)

(1)

in these equations i, f and o are the input gate, forget
gate and output gate respectively, x is the input, b is the
bias term, c is the cell memory, and h is the output. as an
example, consider the input gate equation:

it =   (wxixt + whiht   1 + wcict   1 + bi)
=   ([wxi whi wci 1][xt ht   1 ct   1 bi]t )

(2)

when we add the topic signal t to the input gate, the equa-
tion is modi   ed to:

it =   (wxixt + whiht   1 + wcict   1 + bi + wt it )
=   ([wxi wt i whi wci 1][xt t ht   1 ct   1 bi]t )

(3)

is equivalent to considering a composite input [xi t ] to the
lstm cell that concatenates the id27 and topic
embedding vectors. this approach of concatenating topic
and id27s in the input worked better in practice
than other strategies for combining topics with words. fig-
ure 1 shows the schematic    gure of a clstm model that
considers both word and topic input vectors.

note that we add the topic input to each lstm cell since
each lstm cell can potentially have a di   erent topic. for
example, when the topic is based on the sentence segment
seen so far (see section 3.3.1), the topic is based on the
current sentence pre   x     so, each lstm cell can potentially
have a di   erent topic. note that in some setups each lstm
cell in a layer could have the same topic, e.g., when the topic
is derived from the words in the previous sentence.

figure 1: clstm model (<topic> = topic input)

3.2 htm: supervised topic labels

the topics of the text segments can be estimated using dif-
ferent unsupervised methods (e.g., id91) or supervised
methods (e.g., hierarchical classi   cation). for the word pre-
diction task we use htm1, a hierarchical topic model for
supervised classi   cation of text into a hierarchy of topic cat-
egories, based on the google rephil large-scale id91
tool [34]. there are about 750 categories at the leaf level of
the htm topic hierarchy. given a segment of text, htm
gives a id203 distribution over the categories in the hi-
erarchy, including both leaf and intermediate categories. we
currently choose highest id203 topic as the most-likely
category of the text segment.
3.3 experiments

3.3.1 features
we trained di   erent types of clstm models for the word
prediction task. the di   erent types of features used in the
di   erent clstm models are shown schematically in fig-
ure 2. the hierarchical features that we used in di   erent
variants of the word prediction model are:

1. prevsenttopic = topicid of the topic computed based
on all the words of the previous sentence, i.e., t =
t opic(wi   1,0 . . . wi   1,ni   1   1).

comparing the last two equations, equations 2 and 3, we
see that having a topic vector t added into the clstm cell

1name of actual tool modi   ed to htm, abbreviation for
hierarchical topic model, for con   dentiality.

      start    i    + <topic>   trained    + <topic>    a    + <topic>   i      trained       a       model   inputsoutputshidden layerparticular lstm model uses both sentence-level and paragraph-
level topics as features, implying that both local and long-
range context is important for getting the best performance.

2) when current segment topic is present, the topic of the
previous sentence does not matter.

3) as we increased the number of hidden units, the per-
formance started improving. however, beyond 1024 hidden
units, there were diminishing returns     the gain in perfor-
mance was out-weighed by the substantial increase in com-
putational overhead.

note that we also trained a distributed id165 model with
   stupid backo       smoothing [4] on the wikipedia dataset, and
it gave a perplexity of    80 on the validation set. we did not
train a id165 model with knesner-ney (kn) smoothing on
the wikipedia data, but on the google news data (from a
particular snapshot) the kn smoothed id165 model gave
a perplexity of 74 (using 5-grams).

note that we were not able to compare our clstm mod-
els to other existing techniques for integrating topic informa-
tion into lstm models (e.g., mikolov et al. [31]), since we
didn   t have access to implementations of these approaches
that can scale to the vocabulary sizes (    100k) and dataset
sizes we worked with (e.g., english wikipedia, google news
snapshot). hence, we used a    nely-tuned lstm model as a
baseline, which we also trained at scale on these datasets.

4. next sentence selection

figure 2: hierarchical features used in clstm
models

2. sentsegtopic = topicid of the topic computed based
on the words of the current sentence pre   x until the
current word, i.e., t = t opic(wi,0 . . . wi,j).

3. parasegtopic = topicid of the topic computed based
on the paragraph pre   x until the current word, i.e.,
t = t opic(w0,0 . . . wi,j).

where t is de   ned in section 3.
3.3.2 datasets
for our experiments, we used the whole english corpus
from wikipedia (snapshot from 2014/09/17). there were
4.7 million documents in the wikipedia dataset, which we
randomly divided into 3 parts: 80% was used as train, 10%
as validation and 10% as test set. some relevant statistics
of the train, test and validation data sets of the wikipedia
corpus are given in table 1.

table 1: wikipedia data statistics (m=million)

dataset #para #sent #word
72m 1400m
177m
178m

23m
2.9m 8.9m
9m

train (80%)
validation (10%)
test (10%)

3m

we created the vocabulary from the words in the training
data,    ltering out words that occurred less than a particu-
lar threshold count in the total dataset (threshold was 200
for wikipedia). this resulted in a vocabulary with 129k
unique terms, giving us an out-of-vocabulary rate of 3% on
the validation dataset.

for di   erent types of text segments (e.g., segment, sen-
tence, paragraph) in the training data, we queried htm
and got the most likely topic category. that gave us a total
of    1600 topic categories in the dataset.
3.3.3 results
we trained di   erent clstm models with di   erent feature
variants till convergence, and evaluated their perplexity on
the holdout test data. here are some key observations about
the results (details in table 2):

figure 3: next sentence selection example

we next focus on the next sentence scoring task, where
we are given a sequence of sentences and the goal is to    nd
the most probable next sentence from a set of candidate sen-
tences. an example of this task is shown in figure 3. the
task can be stated as follows: given a model with parame-
ters   , a sequence of p     1 sentences s0 . . . sp   2 (with their
corresponding topics t0 . . . tp   2),    nd the most likely next
sentence sp   1 from a candidate set of next sentences s, such
that:

sp   1 = arg max
s   s

p (s|s0 . . . sp   2, t0 . . . tp   2,   ).

4.1 problem instantiation

1) the    word + sentsegtopic + parasegtopic    clstm
model is the best model, getting the best perplexity. this

suppose we are given a set of sequences, where each se-
quence consists of 4 sentences (i.e., we consider p=4). let

topic of current sentence segment = sentsegtopic      i love stuffed animals. i have a teddy bear. i now need atopic of previous sentence = prevsenttopictopic of current paragraph segment = parasegtopicwords seen so far = wordpanda.unsupervised (thought) embedding of previous sentence = prevsentthoughttopic of current sentence = senttopici love stuffed animals. i have a teddy bear. i need a panda.can we find the most likely next sentence, given the sequence of sentences seen so far?sentences seen so farmy favorite food is ice cream.stuffed animals need friends too.i   m 4 feet tall.my sister likes going to the mall.table 2: test set perplexity for word prediction task

input

features

word

word + prevsenttopic
word + sentsegtopic
word + parasegtopic

word + prevsenttopic + sentsegtopic
word + sentsegtopic + parasegtopic

num hidden num hidden num hidden
units = 256 units = 512 units = 1024

38.56
37.79
38.04
38.02
38.11
37.65

32.04
31.44
31.28
31.41
31.22
31.02

27.66
27.81
27.34
27.30
27.31
27.10

each sequence be si =< aibicidi >, and the set of se-
quences be {s1, . . . , sk}. given the pre   x aibici of the se-
quence si as context (which we will denote to be contexti),
we consider the task of correctly identifying the next sen-
tence di from a candidate set of sentences: {d0, d1, . . . , dk   1}.
for each sequence si, we compute the accuracy of identify-
ing the next sentence correctly. the accuracy of the model
in detecting the correct next sentence is computed over the
set of sequences {s1, . . . , sk}.
4.2 approach

we train lstm and clstm models speci   cally for the
next sentence prediction task. given the context contexti,
the models    nd the di among the set {d0 . . . dk   1} that
gives the maximum (normalized) score, de   ned as follows:

   i, score =

(cid:80)k   1
p (di|contexti)
j=0 p (di|contextj)

1
k

(4)

in the above score, the id155 terms are
estimated using id136 on the lstm and clstm mod-
els. in the numerator, the id203 of the word sequence
in di, given the pre   x context contexti, is estimated by
(cid:80)k   1
running id136 on a model whose state is already seeded
by the sequence aibici (as shown in figure 4). the nor-
j=0 p (di|contextj) in the denominator of
malizer term 1
k
equation 4 is the point estimate of the marginal probabil-
ity p (di) computed over the set of sequences, where the
prior id203 of each pre   x context is assumed equal,
k , j     [0, k     1]. the normalizer term
i.e., p (contextj) = 1
adjusts the score to account for the popularity of a sentence
di that naturally has a high marginal id203 p (di)    
we do not allow the popularity of di to lead to a high score.

note that for task of next sentence scoring, it   s ok to use
words of the next sentence when selecting the    best    next
sentence. this is because in the task, the possible alterna-
tives are all provided to the model, and the main goal of
the model is scoring the alternatives and selecting the best
one. this setting is seen in some real-world applications,
e.g., predicting the best response to an email from a set of
candidate responses [7].
4.3 model

we trained a baseline lstm model on the words of ai,
bi and ci to predict the words of di. the clstm model
uses words from ai, bi, ci, and topics of ai, bi, ci and di,
to predict the words of di. note that in this case we can
use the topic of di since all the candidate next sentences are
given as input in the next sentence scoring task.

for 1024 hidden units, the perplexity of the baseline lstm
model after convergence of model training is 27.66, while
the perplexity of the clstm model at convergence is 24.81.
this relative win of 10.3% in an intrinsic evaluation measure
(like perplexity) was the basis for con   dence in expecting
good performance when using this clstm model for the
next sentence scoring task.
4.4 experimental results

we ran next sentence scoring experiments with a dataset
generated from the test set of the corpora. we divide the
test dataset into 100 non-overlapping subsets. to create
the dataset for next sentence scoring, we did the following:
(a) sample 50 sentence sequences < aibicidi > from 50
separate paragraphs, randomly sampled from 1 subset of
the test set     we call this a block; (b) consider 100 such
blocks in the next sentence scoring dataset. so, overall there
are 5000 sentence sequences in the    nal dataset. for each
sequence pre   x aibici, the model has to choose the best
next sentence di from the competing set of next sentences.

table 3: accuracy of clstm on next sentence scor-
ing

lstm
52%    2% 63%    2%

clstm accuracy increase

21%    9%

figure 4: next sentence scoring in clstm model

the average accuracy of the baseline lstm model on this
dataset is 52%, while the average accuracy of the clstm
model using word + sentence-level topic features is 63% (as
shown in table 3). so the clstm model has an average
improvement of 21% over the lstm model on this dataset.
note that on this task, the average accuracy of a random

ci,n-1di,0di,n-1 ci,1di,1 </s>t = 3np(di | aibici)ci,0di,0  ai,0ai,n-1bi,n-1ai,1bi,0 bi,1  bi,0  ci,0t = 2nt = nt = 0predictor that randomly picks the next sentence from a set
of candidate sentences would be 2%.

we also ran other experiments, where the negatives (i.e.,
49 other sentences in the set of 50) were not chosen randomly
    in one case we considered all the 50 sentences to come
from the same htm topic, making the task of selecting the
best sentence more di   cult. in this case, as expected, the
gain from using the context in clstm was larger     the
clstm model gave larger improvement over the baseline
lstm model than in the case of having a random set of
negatives.
4.5 error analysis

figures 5-7 analyze di   erent types of errors made by the
lstm and the clstm models, using samples drawn from
the test dataset.

5. sentence topic prediction

the    nal task we consider is the following: if we are given
the words and the topic of the current sentence, can we
predict the topic of the next sentence? this is an interesting
problem for id71, where we ask the question: given
the utterance of a speaker, can we predict the topic of their
next utterance? this can be used in various applications in
id71, e.g., intent modeling.

the sentence topic prediction problem can be formulated
as follows: given a model with parameters   , words in the
sentence si and corresponding topic ti,    nd the next sen-
tence topic ti+1 that maximizes the following id203    
p (ti+1|si, ti,   ). note that in this case we train a model to
predict the topic target instead of the joint word/topic tar-
get, since we empirically determined that training a model
with a joint target gave lower accuracy in predicting the
topic compared to a model that only tries to predict the
topic as a target.
5.1 model

for the sentence topic prediction task, we determined
through ablation experiments that the unrolled model ar-
chitecture, where each sentence in a paragraph is modeled
by a separate lstm model, has better performance than the
rolled-up model architecture used for word prediction where
the sentences in a paragraph are input to a single lstm.
5.2 experiments

in our experiments we used the output of htm as the
topic of each sentence. ideally we would associate a    super-
vised topic    with each sentence (e.g., the supervision pro-
vided by human raters). however, due to the di   culty of
getting such human ratings at scale, we used the htm model
to    nd topics for the sentences. note that the htm model
is trained on human ratings.

we trained 2 baseline models on this dataset. the word
model uses the words of the current sentence to predict the
topic of the next sentence     it determines how well we can
predict the topic of the next sentence, given the words of the
current sentence. we also trained another baseline model,
senttopic, which uses the sentence topic of the current sen-
tence to predict the topic of the next sentence     the perfor-
mance of this model will give us an idea of the inherent dif-
   culty of the task of topic prediction. we trained a clstm
model (word+senttopic) that uses both words and topic
of the current sentence to predict the topic of the next sen-

tence. figure 2 shows the hierarchical features used in the
clstm model. we trained all models with di   erent number
of hidden units: 256, 512, 1024. each model was trained till
convergence. table 4 shows the comparison of the perplex-
ity of the di   erent models. the clstm model beats the
baseline senttopic model by more than 12%, showing that
using hierarchical features is useful for the task of sentence
topic prediction too.

table 4: test set perplexity for sentence topic pre-
diction (w=word, st=senttopic)

inputs

w
st

w + st

#hidden #hidden
units=512
units=256

#hidden

units=1024

24.50
2.75
2.43

23.63
2.75
2.41

23.29
2.76
2.43

5.3 comparison to bow-dnn baseline

for the task of sentence topic prediction, we also com-
pared the clstm model to a bag-of-words deep neural
network (bow-dnn) baseline [2]. the bow-dnn model
extracts bag of words from the input text, and a dnn
layer is used to extract higher-level features from the bag
of words. for this experiment, the task setup we consid-
ered was slightly di   erent in order to facilitate more direct
comparison. the goal was to predict the topic of the next
sentence, given words of the next sentence. the bow-dnn
model was trained only on word features, and got a test
set perplexity of 16.5 on predicting the sentence topic. the
clstm model, trained on word and topic-level features, got
a perplexity of 15.3 on the same test set using 1024 hidden
units, thus outperforming the bow-dnn model by 7.3%.
5.4 using unsupervised topic signals

in our experiments with topic features, we have so far
considered supervised topic categories obtained from an ex-
traneous source (namely, htm). one question arises: if we
do not use extraneous topics to summarize long-range con-
text, would we get any improvements in performance with
unsupervised topic signals? to answer this question, we ex-
perimented with    thought embeddings    that are intrinsically
generated from the previous context. here, the thought em-
bedding from the previous lstm is used as the topic feature
in the current lstm (as shown in figure 8), when making
predictions of the topic of the next sentence     we call this
context-based thought embedding the    thought vector   .2
in our approach, the thought vector inferred from the
lstm encoding of sentence n     1 is used as a feature for
the lstm for sentence n, in a recurrent fashion. note that
the lstms for each sentence in figure 8 are e   ectively con-
nected into one long chain, since we don   t reset the hidden
state at the end of each sentence     so the lstm for the
current sentence has access to the lstm state of the pre-
vious sentence (and hence indirectly to its topic). but we
found that directly adding the topic of the previous sentence
to all the lstm cells of the current sentence is bene   cial,
since it constraints all the current lstm cells during train-
ing and explicitly adds a bias to the model. our experiments

2the term    thought vector    was coined by geo   rey hin-
ton [11].

figure 5: error type a: clstm correct, lstm incorrect

figure 6: error type b: clstm incorrect, lstm correct

figure 7: error type c: clstm and lstm both incorrect

figure 8: clstm model with thought vector

showed that it   s bene   cial to denoise the thought vector sig-
nal using a low-dimensional embedding, by adding roundo   -
based projection. initial experiments using thought vector
for sentence-topic prediction look promising. a clstm
model that used word along with thought vector (prevsent-
thought feature in the model) from the previous sentence
as features gave a 3% improvement in perplexity compared
to a baseline lstm model that used only words as features.
table 5 shows the detailed results.

when we used thought vectors, our results improved over
using a word-only model but fell short of a clstm model
that used both words and context topics derived from htm.
in the future, we would like to do more extensive experi-
ments using better low-dimensional projections (e.g., using
id91 or bottleneck mechanisms), so that we can get
comparable performance to supervised id96 ap-
proaches like htm.

another point to note     we have used htm as a topic
model in our experiments as that was readily available to
us. however, the clstm model can also use other types of
context topic vectors generated by di   erent kinds of topic
modeling approaches, e.g., lda, kmeans.

6. results on google news data

we also ran experiments on a sample of documents taken
from a recent (2015/07/06) snapshot of the internal google
news english corpus3. this subset had 4.3 million doc-
uments, which we divided into train, test and validation
datasets. some relevant statistics of the datasets are given
in table 6. we    ltered out words that occurred less than
100 times, giving us a vocabulary of 100k terms.

we trained the baseline lstm and clstm models for
the di   erent tasks, each having 1024 hidden units. here are
the key results:

1) word prediction task: lstm using only words as
features had perplexity of     37. clstm improves on lstm
by     2%, using words, sentence segment topics and para-
graph sentence topics.

2) next sentence selection task: lstm gave an accu-

3note that this snapshot from google news is internal to
google, and is separate from the one billion word bench-
mark [5].

test set perplexity for

table 5:
sentence
topic prediction using thought vector (w=word,
pst=prevsentthought)

inputs

#hidden #hidden
units=256
units=512

#hidden

units=1024

w

w + pst

24.50
24.38

23.63
23.03

23.29
22.59

table 6:
(m=million)

statistics of google news dataset

dataset #para #sent #word
6.4m 70.5m 1300m
169m
0.8m 8.8m
0.8m 8.8m
170m

train (80%)
validation (10%)
test (10%)

racy of     39%. clstm had an accuracy of     46%, giving
a 18% improvement on average.
3) next sentence topic prediction task: lstm using
only current sentence topic as feature gave perplexity of    
5. clstm improves on lstm by     9%, using word and
current sentence topic as features.

as we see, we get similar improvements of clstm model
over lstm model for both the wikipedia and google news
datasets, for each of the chosen nlp tasks.

7. conclusions

we have shown how using contextual features in a clstm
model can be bene   cial for di   erent nlp tasks like word pre-
diction, next sentence selection and topic prediction. for the
word prediction task clstm improves on state-of-the-art
lstm by 2-3% on perplexity, for the next sentence selection
task clstm improves on lstm by    20% on accuracy on
average, while for the topic prediction task clstm improves
on state-of-the-art lstm by    10% (and improves on bow-
dnn by    7%). these gains are all quite signi   cant and we
get similar gains on the google news dataset (section 6),
which shows the generalizability of our approach. initial re-
sults using unsupervised topic signal using with vectors, in-

word-level lstm layerlstm_0sentence_0: word_0eoslstm embedding of sentencelstm_1eoslstm_2eoslstm_3eossentence_1: word_0sentence_2: word_0sentence_3: word_0thought unitthought unitthought unitsoftmax output layer for sentence-level topicsstead of supervised topic models, are promising. the gains
obtained by using the context in the clstm model has ma-
jor implications of performance improvements in multiple
important nlp applications, ranging from sentence com-
pletion, question/answering, and paraphrase generation to
di   erent applications in id71.

8. future work

our initial experiments on using unsupervised thought
vectors for capturing long-range context in clstm models
gave promising results. a natural extension of the thought
vector model in figure 8 is a model that has a connection
between the hidden layers, to be able to model the    con-
tinuity of thought   . figure 9 shows one such hierarchical
lstm (hlstm) model, which has a 2-level hierarchy: a
lower-level lstm for modeling the words in a sentence, and
a higher-level lstm for modeling the sentences in a para-
graph. the thought vector connection from the lstm cell
in layer n to the lstm cells in layer n     1 (corresponding
to the next sentence) enables concepts from the previous
context to be propagated forward, enabling the    thought   
vector of a sentence to in   uence words of the next sentence.
the connection between the sentence-level hidden nodes also
allows the model to capture the continuity of thought. we
would like to experiment with this model in the future.

we would also like to explore the bene   ts of contextual
features in other applications of id38, e.g.,
generating better paraphrases by using word and topic fea-
tures. another interesting application could be using topic-
level signals in conversation modeling, e.g., using dialog
acts as a topic-level feature for next utterance prediction.

acknowledgments: we would like to thank ray kurzweil,
geo   rey hinton, dan bikel, lukasz kaiser and javier snaider
for useful feedback on this work. we would also like to thank
louis shao and yun-hsuan sung for help in running some
experiments.

9. references
[1] ossama abdel-hamid, abdel rahman mohamed, hui

jiang, and gerald penn. applying convolutional
neural networks concepts to hybrid nn-id48 model
for id103. in icassp, 2012.

[2] yalong bai, wei yu, tianjun xiao, chang xu,

kuiyuan yang, wei-ying ma, and tiejun zhao.
bag-of-words based deep neural network for image
retrieval. in proc. of acm intl. conf. on multimedia,
2014.

[3] regina barzilay and lillian lee. catching the drift:

probabilistic content models, with applications to
generation and summarization. in hlt-naacl, 2004.

[4] thorsten brants, ashok c. popat, peng xu, franz j.

och, and je   rey dean. large language models in
machine translation. in emnlp, 2007.

[5] ciprian chelba, tomas mikolov, mike schuster,

qi ge, thorsten brants, and phillipp koehn. one
billion word benchmark for measuring progress in
statistical id38. corr, abs/1312.3005,
2013.

[6] k. cho, b. merri  enboer, c. gulcehre, f. bougares,

h. schwenk, and y. bengio. learning phrase
representations using id56 encoder-decoder for

id151. corr, arxiv:406.1078,
2014.

[7] greg corrado. smart reply.

http://googleresearch.blogspot.com/2015/11/
computer-respond-to-this-email.html, 2015.

[8] andrew m dai, christopher olah, quoc v le, and

greg s corrado. document embedding with paragraph
vectors. nips deep learning workshop, 2014.

[9] je   rey dean, greg s. corrado, rajat monga, kai
chen, matthieu devin, quoc v. le, mark z. mao,
marc   aurelio ranzato, andrew senior, paul tucker,
ke yang, , and andrew y. ng. large scale distributed
deep networks. in nips, 2012.

[10] thomas dean. learning invariant features using

inertial priors. annals of mathematics and arti   cial
intelligence, 47(3-4):223   250, august 2006.

[11] dl4j. thought vectors, deep learning & the future of

ai. http://deeplearning4j.org/thoughtvectors.html,
2015.

[12] salah el hihi and yoshua bengio. hierarchical

recurrent neural networks for long-term dependencies.
in nips, 1996.

[13] santiago fern  andez, alex graves, and j  urgen
schmidhuber. sequence labelling in structured
domains with hierarchical recurrent neural networks.
in ijcai, 2007.

[14] shai fine, yoram singer, and naftali tishby. the

hierarchical hidden markov model: analysis and
applications. machine learning, 32(1):41   62, 1998.

[15] felix a. gers, nicol n. schraudolph, and j  urgen

schmidhuber. learning precise timing with lstm
recurrent networks. jmlr, 3, 2002.

[16] a. graves, n. jaitly, and a.-r. mohamed. hybrid

id103 with deep bidirectional lstm. in
ieee workshop on automatic id103 and
understanding, pages 273   278, 2013.

[17] alex graves. supervised sequence labelling with

recurrent neural networks. diploma thesis. technische
universit  at m  unchen, 2009.

[18] alex graves, abdel-rahman mohamed, and geo   rey
hinton. id103 with deep recurrent neural
networks. corr, arxiv:1303.5778, 2013.

[19] alex graves and j  urgen schmidhuber. framewise

phoneme classi   cation with bidirectional lstm
networks. in ijid98, volume 4, 2005.

[20] sepp hochreiter and j  urgen schmidhuber. long

short-term memory. neural computation,
9(8):1735   1780, 1997.

[21] po-sen huang, xiaodong he, jianfeng gao, li deng,

alex acero, and larry heck. learning deep structured
semantic models for web search using clickthrough
data. in cikm, 2013.

[22] yangfeng ji, trevor cohn, lingpeng kong, chris

dyer, and jacob eisenstein. document context
language models. corr, abs/1511.03962, 2015.

[23] r. kiros, y. zhu, r. salakhutdinov, r. s. zemel,

a. torralba, r. urtasun, and s. fidler. skip-thought
vectors. corr, abs/1506.06726, 2015.

[24] jan koutn    k, klaus gre   , faustino gomez, and
j  urgen schmidhuber. clockwork id56. in icml,
volume 32, 2014.

figure 9: clstm model with thought vector and sentence-level lstm

[25] ray kurzweil. how to create a mind: the secret of
human thought revealed. penguin books, ny, usa,
2013.

[26] quoc le and tom`as mikolov. distributed

representations of sentences and documents. corr,
abs/1405.4053v2, 2014.

[27] tai sing lee and david mumford. hierarchical

bayesian id136 in the visual cortex. journal of the
optical society of america, 2(7):1434   1448, 2003.

biomedical imaging: from nano to macro, 2008.
[38] martin sundermeyer, ralf schl  uter, and hermann

ney. lstm neural networks for id38. in
interspeech, 2012.

[39] ilya sutskever. training recurrent neural networks.

phd thesis, university of toronto, 2013.

[40] ilya sutskever, oriol vinyals, and quoc v. le.

sequence to sequence learning with neural networks.
corr, arxiv:1409.3215, 2014.

[28] rui lin, shujie liu, muyun yang, mu li, ming zhou,

[41] kai sheng tai, richard socher, and christopher d.

and sheng li. hierarchical recurrent neural network
for document modeling. in emnlp, 2015.

[29] wei lu, hwee tou ng, wee sun lee, and luke s.

zettlemoyer. a generative model for parsing natural
language to meaning representations. in emnlp,
2008.

[30] chris manning and hinrich sch  utze. foundations of
statistical natural language processing. mit press,
cambridge, ma, 1999.

[31] t. mikolov and g. zweig. context dependent

recurrent neural network language model. in slt
workshop, 2012.

[32] tomas mikolov, martin kara     at, luk  as burget, jan
cernock  y, and sanjeev khudanpur. recurrent neural
network based language model. in interspeech,
2010.

[33] andriy mnih and geo   rey e. hinton. a scalable

hierarchical distributed language model. in d. koller,
d. schuurmans, y. bengio, and l. bottou, editors,
advances in neural information processing systems
21, pages 1081   1088, 2008.

[34] kevin p. murphy. machine learning: a probabilistic

perspective. 2012.

manning. improved semantic representations from
tree-structured id137.
corr, abs/1503.00075, 2015.

[42] oriol vinyals, lukasz kaiser, terry koo, slav petrov,

ilya sutskever, and geo   rey hinton. grammar as a
foreign language. arxiv:1412.7449, 2014.

[43] oriol vinyals, alexander toshev, samy bengio, and

dumitru erhan. show and tell: a neural image
caption generator. in cvpr 2015, arxiv:1411.4555,
2014.

[44] paul j. werbos. generalization of id26

with application to a recurrent gas market model.
neural networks, 1:339   356, 1988.

[45] kelvin xu, jimmy ba, ryan kiros, kyunghyun cho,
aaron c. courville, ruslan salakhutdinov, richard s.
zemel, and yoshua bengio. show, attend and tell:
neural image id134 with visual attention.
corr, abs/1502.03044, 2015.

[46] haonan yu, jiang wang, zhiheng huang, yi yang,

and wei xu. video paragraph captioning using
hierarchical recurrent neural networks. in cvpr,
2016.

[47] xiang zhang and yann lecun. text understanding

[35] jordan reynolds and kevin murphy. figure-ground

from scratch. corr, abs/1502.01710, 2015.

segmentation using a hierarchical conditional random
   eld. in fourth canadian conference on computer
and robot vision, 2007.

[48] xiaodan zhu, parinaz sobhani, and hongyu guo.

long short-term memory over tree structures. corr,
abs/1503.04881, 2015.

[36] hasim sak, andrew senior, and francoise beaufays.

[49] marco zorzi, alberto testolin, and ivilin p. stoianov.

long short-term memory recurrent neural network
architectures for large scale acoustic modeling. in
proceedings of interspeech, pages 00   00, 2014.

[37] richard socher, adrian barbu, and dorin comaniciu.

a learning based hierarchical model for vessel
segmentation. in ieee international symposium on

modeling language and cognition with deep
unsupervised learning: a tutorial overview. frontiers
in psychology, 4(2013), 2015.

word-level lstm layerlstm_0sentence_0: word_0eoslstm_1eoslstm_2eoslstm_3eossentence_1: word_0sentence_2: word_0sentence_3: word_0softmax output layer for sentence-level topicssentence-level lstm layerlstm embedding of sentence