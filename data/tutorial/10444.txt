supervised and semi-supervised text categorization

using lstm for region embeddings

6
1
0
2

 

y
a
m
6
2

 

 
 
]
l
m

.
t
a
t
s
[
 
 

2
v
3
7
3
2
0

.

2
0
6
1
:
v
i
x
r
a

rie johnson
rj research consulting, tarrytown ny, usa
tong zhang
big data lab, baidu inc, beijing, china

riejohnson@gmail.com

tongzhang@baidu.com

abstract

one-hot id98 (convolutional neural network)
has been shown to be effective for text catego-
rization (johnson & zhang, 2015a;b). we view it
as a special case of a general framework which
jointly trains a linear model with a non-linear
feature generator consisting of    text region em-
bedding + pooling   . under this framework, we
explore a more sophisticated region embedding
method using long short-term memory (lstm).
lstm can embed text regions of variable (and
possibly large) sizes, whereas the region size
needs to be    xed in a id98. we seek effective and
ef   cient use of lstm for this purpose in the su-
pervised and semi-supervised settings. the best
results were obtained by combining region em-
beddings in the form of lstm and convolution
layers trained on unlabeled data. the results in-
dicate that on this task, embeddings of text re-
gions, which can convey complex concepts, are
more useful than embeddings of single words in
isolation. we report performances exceeding the
previous best results on four benchmark datasets.

1. introduction
text categorization is the task of assigning labels to doc-
uments written in a natural language, and it has numer-
ous real-world applications including id31 as
well as traditional topic assignment tasks. the state-of-the
art methods for text categorization had long been linear pre-
dictors (e.g., id166 with a linear kernel) with either bag-of-
word or bag-of-id165 vectors (hereafter bow) as input,
e.g., (joachims, 1998; lewis et al., 2004). this, however,

proceedings of the 33 rd international conference on machine
learning, new york, ny, usa, 2016. jmlr: w&cp volume
48. copyright 2016 by the author(s).

has changed recently. non-linear methods that can make
effective use of word order have been shown to produce
more accurate predictors than the traditional bow-based lin-
ear models, e.g., (dai & le, 2015; zhang et al., 2015). in
particular, let us    rst focus on one-hot id98 which we pro-
posed in jz15 (johnson & zhang, 2015a;b).
a convolutional neural network (id98) (lecun et al.,
1986) is a feedforward neural network with convolution
layers interleaved with pooling layers, originally developed
for image processing. in its convolution layer, a small re-
gion of data (e.g., a small square of image) at every location
is converted to a low-dimensional vector with information
relevant to the task being preserved, which we loosely term
   embedding   . the embedding function is shared among
all the locations, so that useful features can be detected
irrespective of their locations. in its simplest form, one-
hot id98 works as follows. a document is represented
as a sequence of one-hot vectors (each of which indicates
a word by the position of a 1); a convolution layer con-
verts small regions of the document (e.g.,    i love it   ) to
low-dimensional vectors at every location (embedding of
text regions); a pooling layer aggregates the region embed-
ding results to a document vector by taking component-
wise maximum or average; and the top layer classi   es a
document vector with a linear model (figure 1). the one-
hot id98 and its semi-supervised extension were shown to
be superior to a number of previous methods.
in this work, we consider a more general framework (sub-
suming one-hot id98) which jointly trains a feature gener-
ator and a linear model, where the feature generator con-
sists of    region embedding + pooling   . the speci   c region
embedding function of one-hot id98 takes the simple form

v(x(cid:96)) = max(0, wx(cid:96) + b) ,

(1)

where x(cid:96) is a concatenation of one-hot vectors (therefore,
   one-hot    in the name) of the words in the (cid:96)-th region (of
a    xed size), and the weight matrix w and the bias vector
b need to be trained. it is simple and fast to compute, and

supervised and semi-supervised text categorization using lstm for region embeddings

figure 1. one-hot id98 (oh-id98)
[jz15a]

figure 2. word vector lstm
(wv-lstm) as in [dl15].

figure 3. one-hot lstm with
pooling (oh-lstmp).

considering its simplicity, the method works surprisingly
well if the region size is appropriately set. however, there
are also potential shortcomings. the region size must be
   xed, which may not be optimal as the size of relevant re-
gions may vary. practically, the region size cannot be very
large as the number of parameters to be learned (compo-
nents of w) depends on it. jz15 proposed variations to
alleviate these issues. for example, a bow-input variation
allows x(cid:96) above to be a bow vector of the region. this
enables a larger region, but at the expense of losing word
order in the region and so its use may be limited.
in this work, we build on the general framework of    region
embedding + pooling    and explore a more sophisticated
region embedding via long short-term memory (lstm),
seeking to overcome the shortcomings above, in the super-
vised and semi-supervised settings. lstm (hochreiter &
schmidhuder, 1997) is a recurrent neural network. in its
typical applications to text, an lstm takes words in a se-
quence one by one; i.e., at time t, it takes as input the t-th
word and the output from time t     1. therefore, the out-
put from each time step can be regarded as the embedding
of the sequence of words that have been seen so far (or
a relevant part of it). it is designed to enable learning of
dependencies over larger time lags than feasible with tradi-
tional recurrent networks. that is, an lstm can be used to
embed text regions of variable (and possibly large) sizes.
we pursue the best use of lstm for our purpose, and
then compare the resulting model with the previous best
methods including one-hot id98 and previous lstm. our
strategy is to simplify the model as much as possible, in-
cluding elimination of a id27 layer routinely
used to produce input to lstm. our    ndings are three-
fold. first, in the supervised setting, our simpli   cation
strategy leads to higher accuracy and faster training than
previous lstm. second, accuracy can be further improved
by training lstms on unlabeled data for learning use-
ful region embeddings and using them to produce addi-
tional input. third, both our lstm models and one-hot
id98 strongly outperform other methods including pre-
vious lstm. the best results are obtained by combin-
ing the two types of region embeddings (lstm embed-

dings and id98 embeddings) trained on unlabeled data,
indicating that their strengths are complementary. over-
all, our results show that for text categorization, embed-
dings of text regions, which can convey higher-level con-
cepts than single words in isolation, are useful, and that
useful region embeddings can be learned without going
through id27 learning. we report perfor-
mances exceeding the previous best results on four bench-
mark datasets. our code and experimental details are avail-
able at http://riejohnson.com/id98 download.html.

1.1. preliminary

on text, lstm has been used for labeling or generating
words.
it has been also used for representing short sen-
tences mostly for id31, and some of them rely
on syntactic parse trees; see e.g., (zhu et al., 2015; tang
et al., 2015; tai et al., 2015; le & zuidema, 2015). unlike
these studies, this work as well as jz15 focuses on classify-
ing general full-length documents without any special lin-
guistic knowledge. similarly, dl15 (dai & le, 2015) ap-
plied lstm to categorizing general full-length documents.
therefore, our empirical comparisons will focus on dl15
and jz15, both of which reported new state of the art re-
sults. let us    rst introduce the general lstm formulation,
and then brie   y describe dl15   s model as it illustrates the
challenges in using lstms for this task.

lstm while several variations exist, we base our work
on the following lstm formulation, which was used in,
e.g., (zaremba & sutskever, 2014)

it =   (w(i)xt + u(i)ht   1 + b(i)) ,
ot =   (w(o)xt + u(o)ht   1 + b(o)) ,
ft =   (w(f )xt + u(f )ht   1 + b(f )) ,
ut = tanh(w(u)xt + u(u)ht   1 + b(u)) ,
ct = it (cid:12) ut + ft (cid:12) ct   1 ,
ht = ot (cid:12) tanh(ct) ,

where (cid:12) denotes element-wise multiplication and    is an
element-wise squash function to make the gating values in
[0, 1]. we    x    to sigmoid. xt     rd is the input from

agoodbuy!poolingtop layerpositiveone-vectorsconvolution layer-hot vectorsconvolution agoodbuy!top layerpositiveone-hot vectorslstmid27 agoodbuy!poolingtop layerpositiveone-hot vectorslstmsupervised and semi-supervised text categorization using lstm for region embeddings

the lower layer at time step t, where d would be, for ex-
ample, size of vocabulary if the input was a one-hot vector
representing a word, or the dimensionality of word vector
if the lower layer was a id27 layer. with q
lstm units, the dimensionality of the weight matrices and
bias vectors, which need to be trained, are w(  )       rq  d,
u(  )     rq  q, and b(  )     rq for all types (i, o, f, u). the
centerpiece of lstm is the memory cells ct, designed to
counteract the risk of vanishing/exploding gradients, thus
enabling learning of dependencies over larger time lags
than feasible with traditional recurrent networks. the for-
get gate ft (gers et al., 2000) is for resetting the memory
cells. the input gate it and output gate ot control the input
and output of the memory cells.

word-vector lstm (wv-lstm) [dl15] dl15   s appli-
cation of lstm to text categorization is straightforward.
as illustrated in figure 2, for each document, the output
of the lstm layer is the output of the last time step (cor-
responding to the last word of the document), which rep-
resents the whole document (document embedding). like
many other studies of lstm on text, words are    rst con-
verted to low-dimensional dense word vectors via a word
embedding layer; therefore, we call it word-vector lstm or
wv-lstm. dl15 observed that wv-lstm underperformed
linear predictors and its training was unstable. this was
attributed to the fact that documents are long.
in addition, we found that training and testing of wv-lstm
is time/resource consuming. to put it into perspective, us-
ing a gpu, one epoch of wv-lstm training takes nearly 20
times longer than that of one-hot id98 training even though
it achieves poorer accuracy (the    rst two rows of table 1).
this is due to the sequential nature of lstm, i.e., compu-
tation at time t requires the output of time t     1, whereas
modern computation depends on parallelization for speed-
up. documents in a mini-batch can be processed in parallel,
but the variability of document lengths reduces the degree
of parallelization1.
it was shown in dl15 that training becomes stable and ac-
curacy improves drastically when lstm and the word em-
bedding layer are jointly pre-trained with either the lan-
guage model learning objective (predicting the next word)
or autoencoder objective (memorizing the document).

2. supervised lstm for text categorization
within the framework of    region embedding + pooling    for
text categorization, we seek effective and ef   cient use of
lstm as an alternative region embedding method. this

1 (sutskever et al., 2014) suggested making each mini-batch
consist of sequences of similar lengths, but we found that on our
tasks this strategy slows down convergence presumably by ham-
pering the stochastic nature of sgd.

section focuses on an end-to-end supervised setting so that
there is no additional data (e.g., unlabeled data) or addi-
tional algorithm (e.g., for learning a id27). our
general strategy is to simplify the model as much as possi-
ble. we start with elimination of the id27 layer
so that one-hot vectors are directly fed to lstm, which we
call one-hot lstm in short.

2.1. elimination of the id27 layer

facts: a id27 is a linear operation that can
be written as vxt with xt being a one-hot vector and
columns of v being word vectors. therefore, by replac-
ing the lstm weights w(  ) with w(  )v and removing the
id27 layer, a word-vector lstm can be turned
into a one-hot lstm without changing the model behav-
ior. thus, word-vector lstm is not more expressive than
one-hot lstm; rather, a merit, if any, of training with a
id27 layer would be through imposing restric-
tions (e.g., a low-rank v makes a less expressive model) to
achieve good prior/id173 effects.
in the end-to-end supervised setting, a id27
matrix v would need to be initialized randomly and trained
as part of the model. in the preliminary experiments un-
der our framework, we were unable to improve accuracy
over one-hot lstm by inclusion of such a randomly initial-
ized id27 layer; i.e., random vectors failed to
provide good prior effects. instead, demerits were evident
    more meta-parameters to tune, poor accuracy with low-
dimensional word vectors, and slow training/testing with
high-dimensional word vectors as they are dense.
if a id27 is appropriately pre-trained with unla-
beled data, its inclusion is a form of semi-supervised learn-
ing and could be useful. we will show later, however, that
this type of approach falls behind our approach of learn-
ing region embeddings through training one-hot lstm on
unlabeled data. altogether, elimination of the word embed-
ding layer was found to be useful; thus, we base our work
on one-hot lstm.

2.2. more simpli   cations

we introduce four more useful modi   cations to wv-lstm
that lead to higher accuracy or faster training.

pooling: simplifying sub-problems our framework of
   region embedding + pooling    has a simpli   cation effect as
follows. in wv-lstm, the sub-problem that lstm needs
to solve is to represent the entire document by one vector
(document embedding). we make this easy by changing it
to detecting regions of text (of arbitrary sizes) that are rel-
evant to the task and representing them by vectors (region
embedding). as illustrated in figure 3, we let the lstm
layer emit vectors ht at each time step, and let pooling

supervised and semi-supervised text categorization using lstm for region embeddings

aggregate them into a document vector. with wv-lstm,
lstm has to remember relevant information until it gets to
the end of the document even if relevant information was
observed 10k words away. the task of our lstm is easier
as it is allowed to forget old things via the forget gate and
can focus on representing the concepts conveyed by smaller
segments such as phrases or sentences.
a related architecture appears in the deep learning tuto-
rials2 though it uses a id27. another related
work is (lai et al., 2015), which combined pooling with
non-lstm recurrent networks and a id27.

chopping for speeding up training in addition to sim-
plifying the sub-problem, pooling has the merit of enabling
faster training via chopping. since we set the goal of lstm
to embedding text regions instead of documents, it is no
longer crucial to go through the document from the begin-
ning to the end sequentially. at the time of training, we
can chop each document into segments of a    xed length
that is suf   ciently long (e.g., 50 or 100) and process all the
segments in a mini batch in parallel as if these segments
were individual documents. (note that this is done only in
the lstm layer and pooling is done over the entire docu-
ment.) we perform testing without chopping. that is, we
train lstm with approximations of sequences for speed up
and test with real sequences for better accuracy. there is a
risk of chopping important phrases (e.g.,    don   t | like it   ),
and this can be easily avoided by having segments slightly
overlap. however, we found that gains from overlapping
segments tend to be small and so our experiments reported
below were done without overlapping.

removing the input/output gates we found that when
lstm is followed by pooling, the presence of input and
output gates typically does not improve accuracy, while re-
moving them nearly halves the time and memory required
for training and testing.
it is intuitive, in particular, that
pooling can make the output gate unnecessary; the role of
the output gate is to prevent undesirable information from
entering the output ht, and such irrelevant information can
be    ltered out by max-pooling. without the input and out-
put gates, the lstm formulation can be simpli   ed to:

ft =   (w(f )xt + u(f )ht   1 + b(f )) ,
ut = tanh(w(u)xt + u(u)ht   1 + b(u)) ,
ct = ut + ft (cid:12) ct   1 , ht = tanh(ct) .

(2)
(3)

this is equivalent to    xing it and ot to all ones. it is in
spirit similar to id149 (cho et al., 2014)
but simpler, having fewer gates.

bidirectional lstm for better accuracy the changes
from wv-lstm above substantially reduce the time and

2 http://deeplearning.net/tutorial/lstm.html

1-layer oh-id98
wv-lstm
wv-lstmp
oh-lstmp
oh-lstmp; no i/o gates
oh-2lstmp; no i/o gates

chop
   
   
100
100
100
50

time
18
337
110
88
48
84

error
7.64
11.59
10.90
7.72
7.68
7.33

table 1. training time and error rates of lstms on elec.
   chop   : chopping size.    time   : seconds per epoch for train-
ing on tesla m2070.    error   : classi   cation error rates (%) on
test data.    wv-lstmp   : word-vector lstm with pooling.    oh-
lstmp   : one-hot lstm with pooling.    oh-2lstmp   : one-hot
bidirectional lstm with pooling.

figure 4. oh-2lstmp: our one-hot bidirectional lstm with
pooling.

memory required for training and make it practical to add
one more layer of lstm going in the opposite direction
for accuracy improvement. as shown in figure 4, we con-
catenate the output of a forward lstm (left to right) and
a backward lstm (right to left), which is referred to as
bidirectional lstm in the literature. the resulting model
is a one-hot bidirectional lstm with pooling, and we ab-
breviate it to oh-2lstmp. table 1 shows how much accu-
racy and/or training speed can be improved by elimination
of the id27 layer, pooling, chopping, removing
the input/output gates, and adding the backward lstm.

2.3. experiments (supervised)

we used four datasets: imdb, elec, rcv1 (second-level
topics), and 20-newsgroup (20ng)3, to facilitate direct
comparison with jz15 and dl15. the    rst three were used
in jz15. imdb and 20ng were used in dl15. the datasets
are summarized in table 2.
the data was converted to lower-case letters. in the neural
network experiments, vocabulary was reduced to the most
frequent 30k words of the training data to reduce compu-
tational burden; square loss was minimized with dropout
(hinton et al., 2012) applied to the input to the top layer;
weights were initialized by the gaussian distribution with

3

http://ana.cachopo.org/datasets-for-single-label-text-

categorization

agoodbuy!poolingtop layerpositivepoolingonelstm(fw&bw) one-hot vectorssupervised and semi-supervised text categorization using lstm for region embeddings

#train
imdb 25,000
25,000
elec
rcv1
15,564
20ng 11,293

#test
25,000
25,000
49,838
7,528

avg max
265
3k
6k
124
12k
249
267
12k

#class

2
2
55
20

the average/maximum length of
table 2. data.    avg   /   max   :
documents (#words) of the training/test data.
imdb and elec
are for sentiment classi   cation (positive vs. negative) of movie
reviews and amazon electronics product reviews, respectively.
rcv1 (second-level topics only) and 20ng are for topic cate-
gorization of reuters news articles and newsgroup messages, re-
spectively.

zero mean and standard deviation 0.01. optimization was
done with sgd with mini-batch size 50 or 100 with mo-
mentum or optionally rmsprop (tieleman & hinton, 2012)
for acceleration.
hyper parameters such as learning rates were chosen based
on the performance on the development data, which was
a held-out portion of the training data, and training was re-
done using all the training data with the chosen parameters.
we used the same pooling method as used in jz15, which
parameterizes the number of pooling regions so that pool-
ing is done for k non-overlapping regions of equal size,
and the resulting k vectors are concatenated to make one
vector per document. the pooling settings chosen based
on the performance on the development data are the same
as jz15a, which are max-pooling with k=1 on imdb and
elec and average-pooling with k=10 on rcv1; on 20ng,
max-pooling with k=10 was chosen.

methods
id166 bow
id166 1   3grams
wv-lstm [dl15]
oh-2lstmp
oh-id98 [jz15b]

imdb
11.36
9.42
13.50
8.14
8.39

elec
11.71
8.71
11.74
7.33
7.64

rcv1
10.76
10.69
16.04
11.17
9.17

20ng
17.47
15.85
18.0
13.32
13.64

table 3. error rates (%). supervised results without any pre-
training. id166 and oh-id98 results on all but 20ng are from
jz15a and jz15b, respectively; wv-lstm results on imdb and
20ng are from dl15; all others are new experimental results of
this work.

table 3 shows the error rates obtained without any addi-
tional unlabeled data or pre-training of any sort. for mean-
ingful comparison, this table shows neural networks with
comparable dimensionality of embeddings, which are one-
hot id98 with one convolution layer with 1000 feature
maps and bidirectional lstms of 500 units each. in other
words, the convolution layer produces a 1000-dimensional
vector at each location, and the lstm in each direction

emits a 500-dimensional vector at each time step. an
exception is wv-lstm, equipped with 512 lstm units
(smaller than 2  500) and a id27 layer of 512
dimensions; dl15 states that without pre-training, addition
of more lstm units broke down training. a more complex
and larger one-hot id98 will be reviewed later.
comparing the two types of lstm in table 3, we see
that our one-hot bidirectional lstm with pooling (oh-
2lstmp) outperforms word-vector lstm (wv-lstm) on
all the datasets, con   rming the effectiveness of our ap-
proach.
now we review the non-lstm baseline methods. the last
row of table 3 shows the best one-hot id98 results within
the constraints above. they were obtained by bow-id98
(whose input to the embedding function (1) is a bow vector
of the region) with region size 20 on rcv1, and seq-id98
(with the regular concatenation input) with region size 3 on
the others. in table 3, on three out of the four datasets,
oh-2lstmp outperforms id166 and the id98. however, on
rcv1, it underperforms both. we conjecture that this is
because strict word order is not very useful on rcv1. this
point can also be observed in the id166 and id98 perfor-
mances. only on rcv1, id165 id166 is no better than
bag-of-word id166, and only on rcv1, bow-id98 outper-
forms seq-id98. that is, on rcv1, bags of words in a win-
dow of 20 at every location are more useful than words
in strict order. this is presumably because the former can
more easily cover variability of expressions indicative of
topics. thus, lstm, which does not have an ability to put
words into bags, loses to bow-id98.

methods
oh-2lstmp, copied from tab.3
oh-id98, 2 region sizes [jz15a]

imdb
8.14
8.04

elec
7.33
7.48

20ng
13.32
13.55

more on one-hot id98 vs.
one-hot lstm lstm
can embed regions of variable (and possibly large) sizes
whereas id98 requires the region size to be    xed. we at-
tribute to this fact the small improvements of oh-2lstmp
over oh-id98 in table 3. however, this shortcoming of
id98 can be alleviated by having multiple convolution lay-
ers with distinct region sizes. we show in the table above
that one-hot id98s with two layers (of 1000 feature maps
each) with two different region sizes4 rival oh-2lstmp.
although these models are larger than those in table 3,
training/testing is still faster than the lstm models due to
simplicity of the region embeddings. by comparison, the
strength of lstm to embed larger regions appears not to be
a big contributor here. this may be because the amount of
training data is not suf   cient enough to learn the relevance
of longer word sequences. overall, one-hot id98 works

4 region sizes were 2 and 3 for imdb, 3 and 4 for elec, and

3 and 20 (bow input) for 20ng.

supervised and semi-supervised text categorization using lstm for region embeddings

surprising well considering its simplicity, and this observa-
tion motivates the idea of combining the two types of region
embeddings, discussed later.

comparison with the previous best results on 20ng
the previous best performance on 20ng is 15.3 (not shown
in the table) of dl15, obtained by pre-training wv-lstm
of 1024 units with labeled training data. our oh-2lstmp
achieved 13.32, which is 2% better. the previous best re-
sults on the other datasets use unlabeled data, and we will
review them with our semi-supervised results.

3. semi-supervised lstm
to exploit unlabeled data as an additional resource, we use
a non-linear extension of two-view id171, whose
linear version appeared in our earlier work (ando & zhang,
2005; 2007). this was used in jz15b to learn from unla-
beled data a region embedding embodied by a convolution
layer. in this work we use it to learn a region embedding
embodied by a one-hot lstm. let us start with a brief re-
view of non-linear two-view id171.

3.1. two-view embedding (tv-embedding) [jz15b]

a rough sketch is as follows. consider two views of the
input. an embedding is called a tv-embedding if the em-
bedded view is as good as the original view for the purpose
of predicting the other view. if the two views and the la-
bels (classi   cation targets) are related to one another only
through some hidden states, then the tv-embedded view is
as good as the original view for the purpose of classi   ca-
tion. such an embedding is useful provided that its dimen-
sionality is much lower than the original view.
jz15b applied this idea by regarding text regions embedded
by the convolution layer as one view and their surround-
ing context as the other view and training a tv-embedding
(embodied by a convolution layer) on unlabeled data. the
obtained tv-embeddings were used to produce additional
input to a supervised region embedding of one-hot id98,
resulting in higher accuracy.

3.2. learning lstm tv-embeddings

figure 5. training lstm tv-embeddings on unlabeled data

in this work we obtain a tv-embedding in the form of
lstm from unlabeled data as follows. at each time step,

imdb
elec
rcv1

75k (20m words)
200k (24m words)
669k (183m words)

provided
provided
sept   96   june   97

table 4. unlabeled data. see jz15b for more details.

we consider the following two views: the words we have
already seen in the document (view-1), and the next few
words (view-2). the task of tv-embedding learning is to
predict view-2 based on view-1. we train one-hot lstms
in both directions, as in figure 5, on unlabeled data. for
this purpose, we use the input and output gates as well as
the forget gate as we found them to be useful.
the theory of tv-embedding says that the region embed-
dings obtained in this way are useful for the task of interest
if the two views are related to each other through the con-
cepts relevant to the task. to reduce undesirable relations
between the views such as syntactic relations, jz15b per-
formed vocabulary control to remove function words from
(and only from) the vocabulary of the target view, which
we found useful also for lstm.
we use the tv-embeddings obtained from unlabeled data to
produce additional input to lstm by replacing (2) and (3)
by the following:

ft =   (w(f )xt +

t + u(f )ht   1 + b(f )) ,

ut =   (w(u)xt +

t + u(u)ht   1 + b(u)) .

(cid:88)
(cid:88)

j   s

j   s

(cid:102)w(j,f )(cid:101)xj
(cid:102)w(j,u)(cid:101)xj

t is the output of a tv-embedding (an lstm trained with
unlabeled data) indexed by j at time step t, and s is a set of
tv-embeddings which contains the two lstms going for-
ward and backward as in figure 5. although it is possi-
ble to    ne-tune the tv-embeddings with labeled data, for
simplicity and faster training, we    xed them in our experi-
ments.

3.3. combining lstm tv-embeddings and id98

tv-embeddings

it is easy to see that the set s above can be expanded with
any tv-embeddings, not only those in the form of lstm
(lstm tv-embeddings) but also with the tv-embeddings in
the form of convolution layers (id98 tv-embeddings) such
as those obtained in jz15b. similarly, it is possible to use
lstm tv-embeddings to produce additional input to id98.
while both lstm tv-embeddings and id98 tv-embeddings
are region embeddings, their formulations are very differ-
ent from each other; therefore, we expect that they comple-
ment each other and bring further performance improve-
ments when combined. we will empirically con   rm these
conjectures in the experiments below. note that being able
to naturally combine several tv-embeddings is a strength of

(cid:101)xj

one-hot vectorslstmagoodbuy!top layergood buy!buy!!aagoodbuy!top layeraagoodagoodbuysupervised and semi-supervised text categorization using lstm for region embeddings

1 wv-lstm [dl15]
2 wv-2lstmp
3
oh-2lstmp
4
5
oh-id98 [jz15b]

unlabeled data usage

pre-training
300-dim google news id97
200-dim id97 scaled
2  100-dim lstm tv-embed.
1  200-dim id98 tv-embed.

imdb elec rcv1
14.65
10.62
10.18
9.24
7.97

7.24
8.67
7.29
6.66
6.81

6.84
7.64
6.76
6.08
6.57

table 5. semi-supervised error rates (%). the wv-lstm result on imdb is from [dl15]; the oh-id98 results are from [jz15b]; all
others are the results of our new experiments.

our framework, which uses unlabeled data to produce ad-
ditional input to lstm instead of pre-training.

3.4. semi-supervised experiments

loss (cid:80)

we used imdb, elec, and rcv1 for our semi-supervised
experiments; 20ng was excluded due to the absence of
standard unlabeled data. table 4 summarizes the unlabeled
data. to experiment with lstm tv-embeddings, we trained
two lstms (forward and backward) with 100 units each
on unlabeled data. the training objective was to predict the
next k words where k was set to 20 for rcv1 and 5 for
others. similar to jz15b, we minimized weighted square
i,j   i,j(zi[j]     pi[j])2 where i goes through the
time steps, z represents the next k words by a bow vector,
and p is the model output;   i,j were set to achieve negative
sampling effect for speed-up; vocabulary control was per-
formed for reducing undesirable relations between views,
which sets the vocabulary of the target (i.e., the k words)
to the 30k most frequent words excluding function words
(or stop words on rcv1). other details followed the su-
pervised experiments.
our semi-supervised one-hot bidirectional lstm with
pooling (oh-2lstmp) in row#4 of table 5 used the two
lstm tv-embeddings trained on unlabeled data as de-
scribed above,
to one-hot
lstms in two directions (500 units each). compared with
the supervised oh-2lstmp (table 3), clear performance
improvements were obtained on all the datasets, thus, con-
   rming the effectiveness of our approach.
we review the semi-supervised performance of wv-lstms
(table 5 row#1). in dl15 the model consisted of a word
embedding layer of 512 dimensions, an lstm layer with
1024 units, and 30 hidden units on top of the lstm layer;
the id27 layer and the lstm were pre-trained
with unlabeled data and were    ne-tuned with labeled data;
pre-training used either the language model objective or au-
toencoder objective. the error rate on imdb is from dl15,
and those on elec and rcv1 are our best effort to per-
form pre-training with the language model objective. we
used the same con   guration on elec as dl15; however, on
rcv1, which has 55 classes, 30 hidden units turned out to
be too few and we changed it to 1000. although the pre-

to produce additional

input

trained wv-lstm clearly outperformed the supervised wv-
lstm (table 3), it underperformed the models with region
tv-embeddings (table 5 row#4,5).
previous studies on lstm for text often convert words into
pre-trained word vectors, and id97 (mikolov et al.,
2013) is a popular choice for this purpose. therefore,
we tested wv-2lstmp (word-vector bidirectional lstm
with pooling), whose only difference from oh-2lstmp is
that the input to the lstm layers is the pre-trained word
vectors. the word vectors were optionally updated (   ne-
tuned) during training. two types of word vectors were
tested. the google news word vectors were trained by
id97 on a huge (100 billion-word) news corpus and
are provided publicly. on our tasks, wv-2lstmp using the
google news vectors (table 5 row#2) performed relatively
poorly. when id97 was trained with the domain un-
labeled data, better results were observed after we scaled
word vectors appropriately (table 5 row#3). still, it un-
derperformed the models with region tv-embeddings (row
#4,5), which used the same domain unlabeled data. we at-
tribute the superiority of the models with tv-embeddings to
the fact that they learn, from unlabeled data, embeddings of
text regions, which can convey higher-level concepts than
single words in isolation.
now we review the performance of one-hot id98 with
one 200-dim id98 tv-embedding (table 5 row#5), which
is comparable with our lstm with two 100-dim lstm
tv-embeddings (row#4) in terms of the dimensionality of
tv-embeddings. the lstm (row#4) rivals or outperforms
the id98 (row#5) on imdb/elec but underperforms it
on rcv1.
increasing the dimensionality of lstm tv-
embeddings from 100 to 300 on rcv1, we obtain 8.62, but
it still does not reach 7.97 of the id98. as discussed ear-
lier, we attribute the superiority of one-hot id98 on rcv1
to its unique way of representing parts of documents via
bow input.

3.5. experiments combining id98 tv-embeddings and

lstm tv-embeddings

in section 3.3 we noted that lstm tv-embeddings and
id98 tv-embeddings can be naturally combined. we ex-
perimented with this idea in the following two settings.

supervised and semi-supervised text categorization using lstm for region embeddings

1
2
3
4

oh-2lstmp
oh-id98 [jz15b]
oh-2lstmp
oh-id98

unlabeled data usage

two lstm tv-embed.
3  100-dim id98 tv-embed.
3  100-dim id98 tv-embed.
+ two lstm tv-embed.

imdb elec rcv1
6.66
8.62
7.71
6.51
5.94
8.52
7.15
6.05

6.08
6.27
5.55
5.87

table 6. error rates (%) obtained by combining id98 tv-embed. and lstm tv-embed. (rows 3   4). lstm tv-embed. were 100-dim each
on imdb and elec, and 300-dim on rcv1. to see the combination effects, compare row#3 with #1, and compare row#4 with #2.

u imdb
oh-id98+doc. [jz15a]
7.67
n
co-tr. optimized [jz15b] y (8.06)
para.vector [lm14]
7.42
7.24
wv-lstm [dl15]
6.51
oh-id98(semi.) [jz15b]
our best model
5.94

y
y
y
y

elec
7.14
(7.63)

   
   

6.27
5.55

rcv1

   

(8.73)

   
   

7.71
7.15

table 7. comparison with previous best results. error rates (%).
   u   : was unlabeled data used?    co-tr. optimized   : co-training
using oh-id98 as a base learner with parameters (e.g., when to
stop) optimized on the test data; it demonstrates the dif   culty of
exploiting unlabeled data on these tasks.

max(0, wx(cid:96) +(cid:80)

in one setting, oh-2lstmp takes additional input from    ve
embeddings:
two lstm tv-embeddings used in table 5
and three id98 tv-embeddings from jz15b obtained by
three distinct combinations of training objectives and input
representations, which are publicly provided. these id98
tv-embeddings were trained to be applied to text regions of
size k at every location taking bow input, where k is 5 on
imdb/elec and 20 on rcv1. we connect each of the id98
tv-embeddings to an lstm by aligning the centers of the
regions of the former with the lstm time steps; e.g., the
id98 tv-embedding result on the    rst    ve words is passed
to the lstm at the time step on the third word. in the sec-
ond setting, we trained one-hot id98 with these    ve types
of tv-embeddings by replacing (1) max(0, wx(cid:96) + b) by
(cid:96) is the output of
the j-th tv-embedding with the same alignment as above.
rows 3   4 of table 6 show the results of these two types
of models. for comparison, we also show the results of
the lstm with lstm tv-embeddings only (row#1) and
the id98 with id98 tv-embeddings only (row#2). to see
the effects of combination, compare row#3 with row#1,
and compare row#4 with row#2. for example, adding
the id98 tv-embeddings to the lstm of row#1, the er-
ror rate on imdb improved from 6.66 to 5.94, and adding
the lstm tv-embeddings to the id98 of row#2, the error
rate on rcv1 improved from 7.71 to 7.15. the results in-
dicate that, as expected, lstm tv-embeddings and id98
tv-embeddings complement each other and improve per-
formance when combined.

(cid:96) + b) where(cid:101)xj

j(cid:102)w(j)(cid:101)xj

3.6. comparison with the previous best results

the previous best results in the literature are shown in ta-
ble 7. more results of previous semi-supervised models can
be found in jz15b, all of which clearly underperform the
semi-supervised one-hot id98 of table 7. the best super-
vised results on imdb/elec of jz15a are in the    rst row,
obtained by integrating a document embedding layer into
one-hot id98. many more of the previous results on imdb
can be found in (le & mikolov, 2014), all of which are over
10% except for 8.78 by bi-gram nbid166 (wang & man-
ning, 2012). 7.42 by paragraph vectors (le & mikolov,
2014) and 6.51 by jz15b were considered to be large im-
provements. as shown in the last row of table 7, our new
model further improved it to 5.94; also on elec and rcv1,
our best models exceeded the previous best results.

4. conclusion
within the general framework of    region embedding +
pooling    for text categorization, we explored region em-
beddings via one-hot lstm. the region embedding of one-
hot lstm rivaled or outperformed that of the state-of-the
art one-hot id98, proving its effectiveness. we also found
that the models with either one of these two types of re-
gion embedding strongly outperformed other methods in-
cluding previous lstm. the best results were obtained by
combining the two types of region embedding trained on
unlabeled data, suggesting that their strengths are comple-
mentary. as a result, we reported substantial improvements
over the previous best results on benchmark datasets.
at a high level, our results indicate the following. first,
on this task, embeddings of text regions, which can convey
higher-level concepts, are more useful than embeddings of
single words in isolation. second, useful region embed-
dings can be learned by working with one-hot vectors di-
rectly, either on labeled data or unlabeled data. finally,
a promising future direction might be to seek, under this
framework, new region embedding methods with comple-
mentary bene   ts.

supervised and semi-supervised text categorization using lstm for region embeddings

acknowledgements
we would like to thank anonymous reviewers for valuable
feedback. this research was partially supported by nsf
iis-1250985, nsf iis-1407939, and nih r01ai116744.

references
ando, rie k. and zhang, tong. a framework for learning
predictive structures from multiple tasks and unlabeled
data. journal of machine learning research, 6:1817   
1853, 2005.

ando, rie k. and zhang, tong. two-view feature genera-
tion model for semi-supervised learning. in proceedings
of icml, 2007.

cho, kyunghyun, van merri  enboer, bart, gulcehre, caglar,
bahdanau, dzmitry, bougares, fethi, schwenk, holger,
and bengio, yoshua. learning phrase representations us-
ing id56 encoder-decoder for statistical machine trans-
lation. in proceedings of emnlp, 2014.

dai, andrew m. and le, quoc v. semi-supervised se-

quence learning. in nips, 2015.

gers, felix a., schmidhuder, j  urgen, and cummins, fred.
learning to forget: continual prediction with lstm.
neural computation, 12(10):2451   2471, 2000.

hinton, geoffrey e., srivastava, nitish, krizhevsky, alex,
sutskever, ilya, and salakhutdinov, ruslan r. improving
neural networks by preventing co-adaptation of feature
detectors. arxiv:1207.0580, 2012.

hochreiter, sepp and schmidhuder, j  urgen. long short-
term memory. neural computation, 9(8):1735   1780,
1997.

joachims, thorsten. text categorization with support vec-
tor machines: learning with many relevant features. in
ecml, 1998.

le, quoc and mikolov, tomas. distributed representations
of sentences and documents. in proceedings of icml,
2014.

lecun, yann, bottou, le  on, bengio, yoshua, and haffner,
patrick. gradient-based learning applied to document
recognition. in proceedings of the ieee, 1986.

lewis, david d., yang, yiming, rose, tony g., and li,
fan. rcv1: a new benchmark collection for text cate-
gorization research. journal of marchine learning re-
search, 5:361   397, 2004.

mikolov, tomas, sutskever, ilya, chen, kai, corrado,
greg, and dean, jeffrey. distributed representations of
words and phrases and their compositionality. in nips,
2013.

sutskever, hya, vinyals, oriol, and le, quoc v. sequence
in nips,

to sequence learning with neural netowkrs.
2014.

tai, kai sheng, socher, richard, and manning, christo-
improved semantic representations from tree-
in pro-

pher d.
structured id137.
ceedings of acl, 2015.

tang, duyu, qin, bing, and liu, ting. document mod-
eling with gated recurrent neural network for sentiment
classi   cation. in proceedings of emnlp, 2015.

tieleman, tijman and hinton, geoffrey. lecture 6.5-
rmsprop: divide the gradient by a running average of
its recent magnitude. coursera: neural networks for
machine learning, 4, 2012.

wang, sida and manning, christopher d. baselines and bi-
grams: simple, good sentiment and topic classi   cation.
in proceedings of acl, pp. 90   94, 2012.

zaremba, wojciech and sutskever, iiya. learning to exe-

cute. arxiv:1410.4615, 2014.

johnson, rie and zhang, tong. effective use of word or-
der for text categorization with convolutional neural net-
works. in naacl hlt, 2015a.

zhang, xiang, zhao, junbo, and lecunn, yann. character-
in

level convolutional networks for text classi   cation.
nips, 2015.

zhu, xiaodan, sobhani, parinaz, and guo, hongyu. long
in pro-

short-term memory over recursive structures.
ceedings of icml, 2015.

johnson, rie and zhang, tong. semi-supervised convolu-
tional neural networks for text categorization via region
embedding. in nips, 2015b.

lai, siwei, xu, liheng, liu, kang, and zhao, jun. recur-
rent convolutional neural networks for text classi   cation.
in proceedings of aaai, 2015.

le, phong and zuidema, willem. compositional distribu-
tional semantics with long short-term memory. in pro-
ceedings of the fourth joint conference on lexical and
computational semantics, 2015.

