a convolutional neural network for modelling sentences

nal kalchbrenner

edward grefenstette

phil blunsom

{nal.kalchbrenner, edward.grefenstette, phil.blunsom}@cs.ox.ac.uk

department of computer science

university of oxford

4
1
0
2

 
r
p
a
8

 

 
 
]
l
c
.
s
c
[
 
 

1
v
8
8
1
2

.

4
0
4
1
:
v
i
x
r
a

abstract

the ability to accurately represent sen-
tences is central to language understand-
ing. we describe a convolutional architec-
ture dubbed the dynamic convolutional
neural network (did98) that we adopt
for the semantic modelling of sentences.
the network uses dynamic k-max pool-
ing, a global pooling operation over lin-
ear sequences. the network handles input
sentences of varying length and induces
a feature graph over the sentence that is
capable of explicitly capturing short and
long-range relations. the network does
not rely on a parse tree and is easily ap-
plicable to any language. we test the
did98 in four experiments: small scale
binary and multi-class sentiment predic-
tion, six-way question classi   cation and
twitter sentiment prediction by distant su-
pervision. the network achieves excellent
performance in the    rst three tasks and a
greater than 25% error reduction in the last
task with respect to the strongest baseline.

introduction

1
the aim of a sentence model is to analyse and
represent the semantic content of a sentence for
purposes of classi   cation or generation. the sen-
tence modelling problem is at the core of many
tasks involving a degree of natural language com-
prehension. these tasks include sentiment analy-
sis, paraphrase detection, entailment recognition,
summarisation, discourse analysis, machine trans-
lation, grounded language learning and image re-
trieval. since individual sentences are rarely ob-
served or not observed at all, one must represent
a sentence in terms of features that depend on the
words and short id165s in the sentence that are
frequently observed. the core of a sentence model
involves a feature function that de   nes the process

figure 1: subgraph of a feature graph induced
over an input sentence in a dynamic convolu-
tional neural network. the full induced graph
has multiple subgraphs of this kind with a distinct
set of edges; subgraphs may merge at different
layers. the left diagram emphasises the pooled
nodes. the width of the convolutional    lters is 3
and 2 respectively. with dynamic pooling, a    l-
ter with small width at the higher layers can relate
phrases far apart in the input sentence.

by which the features of the sentence are extracted
from the features of the words or id165s.

various types of models of meaning have been
proposed. composition based methods have been
applied to vector representations of word meaning
obtained from co-occurrence statistics to obtain
vectors for longer phrases. in some cases, com-
position is de   ned by algebraic operations over
word meaning vectors to produce sentence mean-
ing vectors (erk and pad  o, 2008; mitchell and
lapata, 2008; mitchell and lapata, 2010; tur-
ney, 2012; erk, 2012; clarke, 2012).
in other
cases, a composition function is learned and ei-
ther tied to particular syntactic relations (guevara,
2010; zanzotto et al., 2010) or to particular word
types (baroni and zamparelli, 2010; coecke et
al., 2010; grefenstette and sadrzadeh, 2011; kart-
saklis and sadrzadeh, 2013; grefenstette, 2013).
another approach represents the meaning of sen-
tences by way of automatically extracted logical
forms (zettlemoyer and collins, 2005).

 the  cat  sat  on  the  red  mat the  cat  sat  on  the  red  mata central class of models are those based on
neural networks. these range from basic neu-
ral bag-of-words or bag-of-id165s models to the
more structured id56s and
to time-delay neural networks based on convo-
lutional operations (collobert and weston, 2008;
socher et al., 2011; kalchbrenner and blunsom,
2013b). neural sentence models have a num-
ber of advantages. they can be trained to obtain
generic vectors for words and phrases by predict-
ing, for instance, the contexts in which the words
and phrases occur. through supervised training,
neural sentence models can    ne-tune these vec-
tors to information that is speci   c to a certain
task. besides comprising powerful classi   ers as
part of their architecture, neural sentence models
can be used to condition a neural language model
to generate sentences word by word (schwenk,
2012; mikolov and zweig, 2012; kalchbrenner
and blunsom, 2013a).

we de   ne a convolutional neural network archi-
tecture and apply it to the semantic modelling of
sentences. the network handles input sequences
of varying length. the layers in the network in-
terleave one-dimensional convolutional layers and
dynamic k-max pooling layers. dynamic k-max
pooling is a generalisation of the max pooling op-
erator. the max pooling operator is a non-linear
subsampling function that returns the maximum
of a set of values (lecun et al., 1998). the op-
erator is generalised in two respects. first, k-
max pooling over a linear sequence of values re-
turns the subsequence of k maximum values in the
sequence, instead of the single maximum value.
secondly, the pooling parameter k can be dynam-
ically chosen by making k a function of other as-
pects of the network or the input.
layers

one-
dimensional    lters across each row of features in
the sentence matrix. convolving the same    lter
with the id165 at every position in the sentence
allows the features to be extracted independently
of their position in the sentence. a convolutional
layer followed by a dynamic pooling layer and
a non-linearity form a feature map. like in the
convolutional networks for object
recognition
(lecun et al., 1998), we enrich the representation
in the    rst layer by computing multiple feature
maps with different    lters applied to the input
sentence. subsequent layers also have multiple
feature maps computed by convolving    lters with
all the maps from the layer below. the weights at

convolutional

apply

the

these layers form an order-4 tensor. the resulting
architecture is dubbed a dynamic convolutional
neural network.

multiple layers of convolutional and dynamic
pooling operations induce a structured feature
graph over the input sentence. figure 1 illustrates
such a graph. small    lters at higher layers can cap-
ture syntactic or semantic relations between non-
continuous phrases that are far apart in the input
sentence. the feature graph induces a hierarchical
structure somewhat akin to that in a syntactic parse
tree. the structure is not tied to purely syntactic
relations and is internal to the neural network.

we experiment with the network in four set-
tings. the    rst two experiments involve predict-
ing the sentiment of movie reviews (socher et
al., 2013b). the network outperforms other ap-
proaches in both the binary and the multi-class ex-
periments. the third experiment involves the cat-
egorisation of questions in six question types in
the trec dataset (li and roth, 2002). the net-
work matches the accuracy of other state-of-the-
art methods that are based on large sets of en-
gineered features and hand-coded knowledge re-
sources. the fourth experiment involves predict-
ing the sentiment of twitter posts using distant su-
pervision (go et al., 2009). the network is trained
on 1.6 million tweets labelled automatically ac-
cording to the emoticon that occurs in them. on
the hand-labelled test set, the network achieves a
greater than 25% reduction in the prediction error
with respect to the strongest unigram and bigram
baseline reported in go et al. (2009).

the outline of the paper is as follows. section 2
describes the background to the did98 including
central concepts and related neural sentence mod-
els. section 3 de   nes the relevant operators and
the layers of the network. section 4 treats of the
induced feature graph and other properties of the
network. section 5 discusses the experiments and
inspects the learnt feature detectors.1

2 background

the layers of the did98 are formed by a convo-
lution operation followed by a pooling operation.
we begin with a review of related neural sentence
models. then we describe the operation of one-
dimensional convolution and the classical time-
delay neural network (tdnn) (hinton, 1989;
waibel et al., 1990). by adding a max pooling

1code available at www.nal.co

layer to the network, the tdnn can be adopted as
a sentence model (collobert and weston, 2008).

2.1 related neural sentence models
various neural sentence models have been de-
scribed. a general class of basic sentence models
is that of neural bag-of-words (nbow) models.
these generally consist of a projection layer that
maps words, sub-word units or id165s to high
dimensional embeddings; the latter are then com-
bined component-wise with an operation such as
summation. the resulting combined vector is clas-
si   ed through one or more fully connected layers.
a model that adopts a more general structure
provided by an external parse tree is the recursive
neural network (reid98) (pollack, 1990; k  uchler
and goller, 1996; socher et al., 2011; hermann
and blunsom, 2013). at every node in the tree the
contexts at the left and right children of the node
are combined by a classical layer. the weights of
the layer are shared across all nodes in the tree.
the layer computed at the top node gives a repre-
sentation for the sentence. the recurrent neural
network (id56) is a special case of the recursive
network where the structure that is followed is a
simple linear chain (gers and schmidhuber, 2001;
mikolov et al., 2011). the id56 is primarily used
as a language model, but may also be viewed as a
sentence model with a linear structure. the layer
computed at the last word represents the sentence.
finally, a further class of neural sentence mod-
els is based on the convolution operation and the
tdnn architecture (collobert and weston, 2008;
kalchbrenner and blunsom, 2013b). certain con-
cepts used in these models are central
to the
did98 and we describe them next.

2.2 convolution
the one-dimensional convolution is an operation
between a vector of weights m     rm and a vector
of inputs viewed as a sequence s     rs. the vector
m is the    lter of the convolution. concretely, we
think of s as the input sentence and si     r is a sin-
gle feature value associated with the i-th word in
the sentence. the idea behind the one-dimensional
convolution is to take the dot product of the vector
m with each m-gram in the sentence s to obtain
another sequence c:

(cid:124)
cj = m

sj   m+1:j

(1)
equation 1 gives rise to two types of convolution
depending on the range of the index j. the narrow
type of convolution requires that s     m and yields

figure 2: narrow and wide types of convolution.
the    lter m has size m = 5.
a sequence c     rs   m+1 with j ranging from m
to s. the wide type of convolution does not have
requirements on s or m and yields a sequence c    
rs+m   1 where the index j ranges from 1 to s +
m     1. out-of-range input values si where i < 1
or i > s are taken to be zero. the result of the
narrow convolution is a subsequence of the result
of the wide convolution. the two types of one-
dimensional convolution are illustrated in fig. 2.
the trained weights in the    lter m correspond
to a linguistic feature detector that learns to recog-
nise a speci   c class of id165s. these id165s
have size n     m, where m is the width of the
   lter. applying the weights m in a wide convo-
lution has some advantages over applying them in
a narrow one. a wide convolution ensures that all
weights in the    lter reach the entire sentence, in-
cluding the words at the margins. this is particu-
larly signi   cant when m is set to a relatively large
value such as 8 or 10. in addition, a wide convo-
lution guarantees that the application of the    lter
m to the input sentence s always produces a valid
non-empty result c, independently of the width m
and the sentence length s. we next describe the
classical convolutional layer of a tdnn.

2.3 time-delay neural networks

a tdnn convolves a sequence of inputs s with a
set of weights m. as in the tdnn for phoneme
recognition (waibel et al., 1990), the sequence s
is viewed as having a time dimension and the con-
volution is applied over the time dimension. each
sj is often not just a single value, but a vector of
d values so that s     rd  s. likewise, m is a ma-
trix of weights of size d    m. each row of m is
convolved with the corresponding row of s and the
convolution is usually of the narrow type. multi-
ple convolutional layers may be stacked by taking
the resulting sequence c as input to the next layer.
the max-tdnn sentence model is based on the
architecture of a tdnn (collobert and weston,
2008). in the model, a convolutional layer of the
narrow type is applied to the sentence matrix s,
where each column corresponds to the feature vec-

s1s1ssssc1c5c5tor wi     rd of a word in the sentence:

      w1

      

s =

. . . ws

(2)

to address the problem of varying sentence
lengths, the max-tdnn takes the maximum of
each row in the resulting matrix c yielding a vector
of d values:

cmax =

(3)

         max(c1,:)

...

         

max(cd,:)

the aim is to capture the most relevant feature, i.e.
the one with the highest value, for each of the d
rows of the resulting matrix c. the    xed-sized
vector cmax is then used as input to a fully con-
nected layer for classi   cation.

the max-tdnn model has many desirable
properties. it is sensitive to the order of the words
in the sentence and it does not depend on external
language-speci   c features such as dependency or
constituency parse trees. it also gives largely uni-
form importance to the signal coming from each
of the words in the sentence, with the exception
of words at the margins that are considered fewer
times in the computation of the narrow convolu-
tion. but the model also has some limiting as-
pects. the range of the feature detectors is lim-
ited to the span m of the weights. increasing m or
stacking multiple convolutional layers of the nar-
row type makes the range of the feature detectors
larger; at the same time it also exacerbates the ne-
glect of the margins of the sentence and increases
the minimum size s of the input sentence required
by the convolution. for this reason higher-order
and long-range feature detectors cannot be easily
incorporated into the model. the max pooling op-
eration has some disadvantages too. it cannot dis-
tinguish whether a relevant feature in one of the
rows occurs just one or multiple times and it for-
gets the order in which the features occur. more
generally, the pooling factor by which the signal
of the matrix is reduced at once corresponds to
s    m + 1; even for moderate values of s the pool-
ing factor can be excessive. the aim of the next
section is to address these limitations while pre-
serving the advantages.
3 convolutional neural networks with

dynamic k-max pooling

we model sentences using a convolutional archi-
tecture that alternates wide convolutional layers

figure 3: a did98 for the seven word input sen-
tence. id27s have size d = 4. the
network has two convolutional layers with two
feature maps each. the widths of the    lters at the
two layers are respectively 3 and 2. the (dynamic)
k-max pooling layers have values k of 5 and 3.

with dynamic pooling layers given by dynamic k-
max pooling. in the network the width of a feature
map at an intermediate layer varies depending on
the length of the input sentence; the resulting ar-
chitecture is the dynamic convolutional neural
network. figure 3 represents a did98. we pro-
ceed to describe the network in detail.

3.1 wide convolution

given an input sentence, to obtain the    rst layer of
the did98 we take the embedding wi     rd for
each word in the sentence and construct the sen-
tence matrix s     rd  s as in eq. 2. the values
in the embeddings wi are parameters that are op-
timised during training. a convolutional layer in
the network is obtained by convolving a matrix of
weights m     rd  m with the matrix of activations
at the layer below. for example, the second layer
is obtained by applying a convolution to the sen-
tence matrix s itself. dimension d and    lter width
m are hyper-parameters of the network. we let the
operations be wide one-dimensional convolutions
as described in sect. 2.2. the resulting matrix c
has dimensions d    (s + m     1).

k-max pooling(k=3)fully connected layerfoldingwideconvolution(m=2)dynamick-max pooling (k= f(s) =5) projectedsentence matrix(s=7)wideconvolution(m=3) the cat sat on the red mat3.2 k-max pooling
we next describe a pooling operation that is a gen-
eralisation of the max pooling over the time di-
mension used in the max-tdnn sentence model
and different from the local max pooling opera-
tions applied in a convolutional network for object
recognition (lecun et al., 1998). given a value
k and a sequence p     rp of length p     k, k-
max pooling selects the subsequence pk
max of the
k highest values of p. the order of the values in
max corresponds to their original order in p.
pk
the k-max pooling operation makes it possible
to pool the k most active features in p that may be
a number of positions apart; it preserves the order
of the features, but is insensitive to their speci   c
positions. it can also discern more    nely the num-
ber of times the feature is highly activated in p
and the progression by which the high activations
of the feature change across p. the k-max pooling
operator is applied in the network after the topmost
convolutional layer. this guarantees that the input
to the fully connected layers is independent of the
length of the input sentence. but, as we see next, at
intermediate convolutional layers the pooling pa-
rameter k is not    xed, but is dynamically selected
in order to allow for a smooth extraction of higher-
order and longer-range features.

3.3 dynamic k-max pooling
a dynamic k-max pooling operation is a k-max
pooling operation where we let k be a function of
the length of the sentence and the depth of the net-
work. although many functions are possible, we
simply model the pooling parameter as follows:

kl = max( ktop, (cid:100) l     l

l

s(cid:101) )

(4)

where l is the number of the current convolutional
layer to which the pooling is applied and l is the
total number of convolutional layers in the net-
work; ktop is the    xed pooling parameter for the
topmost convolutional layer (sect. 3.2). for in-
stance, in a network with three convolutional lay-
ers and ktop = 3, for an input sentence of length
s = 18, the pooling parameter at the    rst layer
is k1 = 12 and the pooling parameter at the sec-
ond layer is k2 = 6; the third layer has the    xed
pooling parameter k3 = ktop = 3. equation 4
is a model of the number of values needed to de-
scribe the relevant parts of the progression of an
l-th order feature over a sentence of length s. for
an example in sentiment prediction, according to

the equation a    rst order feature such as a posi-
tive word occurs at most k1 times in a sentence of
length s, whereas a second order feature such as a
negated phrase or clause occurs at most k2 times.
3.4 non-linear feature function
after (dynamic) k-max pooling is applied to the
result of a convolution, a bias b     rd and a non-
linear function g are applied component-wise to
the pooled matrix. there is a single bias value for
each row of the pooled matrix.

if we temporarily ignore the pooling layer, we
may state how one computes each d-dimensional
column a in the matrix a resulting after the convo-
lutional and non-linear layers. de   ne m to be the
matrix of diagonals:

m = [diag(m:,1), . . . , diag(m:,m)]

(5)
where m are the weights of the d    lters of the wide
convolution. then after the    rst pair of a convolu-
tional and a non-linear layer, each column a in the
matrix a is obtained as follows, for some index j:

         m

          wj

...

wj+m   1

          + b
         

a = g

(6)

here a is a column of    rst order features. sec-
ond order features are similarly obtained by ap-
plying eq. 6 to a sequence of    rst order features
aj, ..., aj+m(cid:48)   1 with another weight matrix m(cid:48).
barring pooling, eq. 6 represents a core aspect
of the feature extraction function and has a rather
general form that we return to below. together
with pooling, the feature function induces position
invariance and makes the range of higher-order
features variable.

3.5 multiple feature maps
so far we have described how one applies a wide
convolution, a (dynamic) k-max pooling layer and
a non-linear function to the input sentence ma-
trix to obtain a    rst order feature map. the three
operations can be repeated to yield feature maps
of increasing order and a network of increasing
depth. we denote a feature map of the i-th order
by fi. as in convolutional networks for object
recognition, to increase the number of learnt fea-
ture detectors of a certain order, multiple feature
n may be computed in parallel at
maps fi
j is computed
the same layer. each feature map fi
by convolving a distinct set of    lters arranged in
j,k with each feature map fi   1
a matrix mi
of the
lower order i     1 and summing the results:

1, . . . , fi

k

n(cid:88)

j,k     fi   1
mi

k

fi

k=1

j =

(7)
where     indicates the wide convolution. the
weights mi
j,k form an order-4 tensor. after the
wide convolution,    rst dynamic k-max pooling
and then the non-linear function are applied indi-
vidually to each map.

3.6 folding
in the formulation of the network so far, feature
detectors applied to an individual row of the sen-
tence matrix s can have many orders and create
complex dependencies across the same rows in
multiple feature maps. feature detectors in differ-
ent rows, however, are independent of each other
until the top fully connected layer. full depen-
dence between different rows could be achieved
by making m in eq. 5 a full matrix instead of
a sparse matrix of diagonals. here we explore a
simpler method called folding that does not intro-
duce any additional parameters. after a convo-
lutional layer and before (dynamic) k-max pool-
ing, one just sums every two rows in a feature map
component-wise. for a map of d rows, folding re-
turns a map of d/2 rows, thus halving the size of
the representation. with a folding layer, a feature
detector of the i-th order depends now on two rows
of feature values in the lower maps of order i     1.
this ends the description of the did98.

4 properties of the sentence model
we describe some of the properties of the sentence
model based on the did98. we describe the no-
tion of the feature graph induced over a sentence
by the succession of convolutional and pooling
layers. we brie   y relate the properties to those of
other neural sentence models.

4.1 word and id165 order
one of the basic properties is sensitivity to the or-
der of the words in the input sentence. for most
applications and in order to learn    ne-grained fea-
ture detectors, it is bene   cial for a model to be able
to discriminate whether a speci   c id165 occurs
in the input. likewise, it is bene   cial for a model
to be able to tell the relative position of the most
relevant id165s. the network is designed to cap-
ture these two aspects. the    lters m of the wide
convolution in the    rst layer can learn to recognise
speci   c id165s that have size less or equal to the
   lter width m; as we see in the experiments, m in
the    rst layer is often set to a relatively large value

such as 10. the subsequence of id165s extracted
by the generalised pooling operation induces in-
variance to absolute positions, but maintains their
order and relative positions.

as regards the other neural sentence models, the
class of nbow models is by de   nition insensitive
to word order. a sentence model based on a recur-
rent neural network is sensitive to word order, but
it has a bias towards the latest words that it takes as
input (mikolov et al., 2011). this gives the id56
excellent performance at language modelling, but
it is suboptimal for remembering at once the n-
grams further back in the input sentence. sim-
ilarly, a id56 is sensitive to
word order but has a bias towards the topmost
nodes in the tree; shallower trees mitigate this ef-
fect to some extent (socher et al., 2013a). as seen
in sect. 2.3, the max-tdnn is sensitive to word
order, but max pooling only picks out a single n-
gram feature in each row of the sentence matrix.

induced feature graph

4.2
some sentence models use internal or external
structure to compute the representation for the in-
put sentence.
in a did98, the convolution and
pooling layers induce an internal feature graph
over the input. a node from a layer is connected
to a node from the next higher layer if the lower
node is involved in the convolution that computes
the value of the higher node. nodes that are not
selected by the pooling operation at a layer are
dropped from the graph. after the last pooling
layer, the remaining nodes connect to a single top-
most root. the induced graph is a connected, di-
rected acyclic graph with weighted edges and a
root node; two equivalent representations of an
induced graph are given in fig. 1.
in a did98
without folding layers, each of the d rows of the
sentence matrix induces a subgraph that joins the
other subgraphs only at the root node. each sub-
graph may have a different shape that re   ects the
kind of relations that are detected in that subgraph.
the effect of folding layers is to join pairs of sub-
graphs at lower layers before the top root node.

convolutional networks for object recognition
also induce a feature graph over the input image.
what makes the feature graph of a did98 pecu-
liar is the global range of the pooling operations.
the (dynamic) k-max pooling operator can draw
together features that correspond to words that are
many positions apart in the sentence. higher-order
features have highly variable ranges that can be ei-

ther short and focused or global and long as the
input sentence. likewise, the edges of a subgraph
in the induced graph re   ect these varying ranges.
the subgraphs can either be localised to one or
more parts of the sentence or spread more widely
across the sentence. this structure is internal to
the network and is de   ned by the forward propa-
gation of the input through the network.

of the other sentence models, the nbow is a
shallow model and the id56 has a linear chain
structure. the subgraphs induced in the max-
tdnn model have a single    xed-range feature ob-
tained through max pooling. the recursive neural
network follows the structure of an external parse
tree. features of variable range are computed at
each node of the tree combining one or more of
the children of the tree. unlike in a did98, where
one learns a clear hierarchy of feature orders, in
a reid98 low order features like those of sin-
gle words can be directly combined with higher
order features computed from entire clauses. a
did98 generalises many of the structural aspects
of a reid98. the feature extraction function as
stated in eq. 6 has a more general form than that
in a reid98, where the value of m is generally 2.
likewise, the induced graph structure in a did98
is more general than a parse tree in that it is not
limited to syntactically dictated phrases; the graph
structure can capture short or long-range seman-
tic relations between words that do not necessar-
ily correspond to the syntactic relations in a parse
tree. the did98 has internal input-dependent
structure and does not rely on externally provided
parse trees, which makes the did98 directly ap-
plicable to hard-to-parse sentences such as tweets
and to sentences from any language.

5 experiments

we test the network on four different experiments.
we begin by specifying aspects of the implemen-
tation and the training of the network. we then re-
late the results of the experiments and we inspect
the learnt feature detectors.

5.1 training
in each of the experiments, the top layer of the
network has a fully connected layer followed by
a softmax non-linearity that predicts the probabil-
ity distribution over classes given the input sen-
tence. the network is trained to minimise the
cross-id178 of the predicted and true distribu-
tions; the objective includes an l2 regularisation

classi   er
nb
binb
id166
recntn
max-tdnn
nbow
did98

fine-grained (%) binary (%)

41.0
41.9
40.7
45.7
37.4
42.4
48.5

81.8
83.1
79.4
85.4
77.1
80.5
86.8

table 1: accuracy of sentiment prediction in the
movie reviews dataset. the    rst four results are
reported from socher et al. (2013b). the baselines
nb and binb are naive bayes classi   ers with,
respectively, unigram features and unigram and bi-
gram features. id166 is a support vector machine
with unigram and bigram features. recntn is a
id56 with a tensor-based fea-
ture function, which relies on external structural
features given by a parse tree and performs best
among the reid98s.

term over the parameters. the set of parameters
comprises the id27s, the    lter weights
and the weights from the fully connected layers.
the network is trained with mini-batches by back-
propagation and the gradient-based optimisation is
performed using the adagrad update rule (duchi
et al., 2011). using the well-known convolution
theorem, we can compute fast one-dimensional
linear convolutions at all rows of an input matrix
by using fast fourier transforms. to exploit the
parallelism of the operations, we train the network
on a gpu. a matlab implementation processes
multiple millions of input sentences per hour on
one gpu, depending primarily on the number of
layers used in the network.

5.2 sentiment prediction in movie reviews
the    rst two experiments concern the prediction
of the sentiment of movie reviews in the stanford
sentiment treebank (socher et al., 2013b). the
output variable is binary in one experiment and
can have    ve possible outcomes in the other: neg-
ative, somewhat negative, neutral, somewhat posi-
tive, positive. in the binary case, we use the given
splits of 6920 training, 872 development and 1821
test sentences. likewise, in the    ne-grained case,
we use the standard 8544/1101/2210 splits. la-
belled phrases that occur as subparts of the train-
ing sentences are treated as independent training
instances. the size of the vocabulary is 15448.

table 1 details the results of the experiments.

hier

classi   er

maxent

maxent

features
unigram, pos, head chunks
ne, semantic relations
unigram, bigram, trigram
pos, chunks, ne, supertags
id35 parser, id138
unigram, bigram, trigram
pos, wh-word, head word
word shape, parser
hypernyms, id138
unigram, pos, wh-word
head word, parser
hypernyms, id138
60 hand-coded rules
max-tdnn unsupervised vectors
unsupervised vectors
nbow
did98
unsupervised vectors

id166

acc. (%)

91.0

92.6

93.6

95.0

84.4
88.2
93.0

table 2: accuracy of six-way question classi   ca-
tion on the trec questions dataset. the second
column details the external features used in the
various approaches. the    rst four results are re-
spectively from li and roth (2002), blunsom et al.
(2006), huang et al. (2008) and silva et al. (2011).

in the three neural sentence models   the max-
tdnn, the nbow and the did98   the word vec-
tors are parameters of the models that are ran-
domly initialised; their dimension d is set to 48.
the max-tdnn has a    lter of width 6 in its nar-
row convolution at the    rst layer; shorter phrases
are padded with zero vectors.
the convolu-
tional layer is followed by a non-linearity, a max-
pooling layer and a softmax classi   cation layer.
the nbow sums the word vectors and applies a
non-linearity followed by a softmax classi   cation
layer. the adopted non-linearity is the tanh func-
tion. the hyper parameters of the did98 are as
follows. the binary result is based on a did98
that has a wide convolutional layer followed by a
folding layer, a dynamic k-max pooling layer and
a non-linearity; it has a second wide convolutional
layer followed by a folding layer, a k-max pooling
layer and a non-linearity. the width of the convo-
lutional    lters is 7 and 5, respectively. the value
of k for the top k-max pooling is 4. the num-
ber of feature maps at the    rst convolutional layer
is 6; the number of maps at the second convolu-
tional layer is 14. the network is topped by a soft-
max classi   cation layer. the did98 for the    ne-
grained result has the same architecture, but the
   lters have size 10 and 7, the top pooling parame-
ter k is 5 and the number of maps is, respectively,
6 and 12. the networks use the tanh non-linear

classi   er
id166
binb
maxent
max-tdnn
nbow
did98

accuracy (%)

81.6
82.7
83.0
78.8
80.9
87.4

table 3: accuracy on the twitter sentiment
dataset. the three non-neural classi   ers are based
on unigram and bigram features; the results are re-
ported from (go et al., 2009).

function. at training time we apply dropout to the
penultimate layer after the last tanh non-linearity
(hinton et al., 2012).

we see that the did98 signi   cantly outper-
forms the other neural and non-neural models.
the nbow performs similarly to the non-neural
id165 based classi   ers. the max-tdnn per-
forms worse than the nbow likely due to the ex-
cessive pooling of the max pooling operation; the
latter discards most of the sentiment features of the
words in the input sentence. besides the reid98
that uses an external parser to produce structural
features for the model, the other models use n-
gram based or neural features that do not require
external resources or additional annotations. in the
next experiment we compare the performance of
the did98 with those of methods that use heavily
engineered resources.

5.3 question type classi   cation
as an aid to id53, a question may
be classi   ed as belonging to one of many question
types. the trec questions dataset involves six
different question types, e.g. whether the question
is about a location, about a person or about some
numeric information (li and roth, 2002). the
training dataset consists of 5452 labelled questions
whereas the test dataset consists of 500 questions.
the results are reported in tab. 2. the non-
neural approaches use a classi   er over a large
number of manually engineered features and
hand-coded resources. for instance, blunsom et
al. (2006) present a maximum id178 model that
relies on 26 sets of syntactic and semantic fea-
tures including unigrams, bigrams, trigrams, pos
tags, named entity tags, structural relations from
a id35 parse and id138 synsets. we evaluate
the three neural models on this dataset with mostly
the same hyper-parameters as in the binary senti-

figure 4: top    ve 7-grams at four feature detectors in the    rst layer of the network.

ment experiment of sect. 5.2. as the dataset is
rather small, we use lower-dimensional word vec-
tors with d = 32 that are initialised with embed-
dings trained in an unsupervised way to predict
contexts of occurrence (turian et al., 2010). the
did98 uses a single convolutional layer with    l-
ters of size 8 and 5 feature maps. the difference
between the performance of the did98 and that of
the other high-performing methods in tab. 2 is not
signi   cant (p < 0.09). given that the only labelled
information used to train the network is the train-
ing set itself, it is notable that the network matches
the performance of state-of-the-art classi   ers that
rely on large amounts of engineered features and
rules and hand-coded resources.

5.4 twitter sentiment prediction with

distant supervision

in our    nal experiment, we train the models on a
large dataset of tweets, where a tweet is automat-
ically labelled as positive or negative depending
on the emoticon that occurs in it. the training set
consists of 1.6 million tweets with emoticon-based
labels and the test set of about 400 hand-annotated
tweets. we preprocess the tweets minimally fol-
lowing the procedure described in go et al. (2009);
in addition, we also lowercase all the tokens. this
results in a vocabulary of 76643 word types. the
architecture of the did98 and of the other neural
models is the same as the one used in the binary
experiment of sect. 5.2. the randomly initialised
id27s are increased in length to a di-
mension of d = 60. table 3 reports the results of
the experiments. we see a signi   cant increase in
the performance of the did98 with respect to the
non-neural id165 based classi   ers; in the pres-
ence of large amounts of training data these clas-
si   ers constitute particularly strong baselines. we
see that the ability to train a sentiment classi   er on
automatically extracted emoticon-based labels ex-
tends to the did98 and results in highly accurate
performance. the difference in performance be-
tween the did98 and the nbow further suggests
that the ability of the did98 to both capture fea-

tures based on long id165s and to hierarchically
combine these features is highly bene   cial.

5.5 visualising feature detectors
a    lter in the did98 is associated with a feature
detector or neuron that learns during training to
be particularly active when presented with a spe-
ci   c sequence of input words. in the    rst layer, the
sequence is a continuous id165 from the input
sentence; in higher layers, sequences can be made
of multiple separate id165s. we visualise the
feature detectors in the    rst layer of the network
trained on the binary sentiment task (sect. 5.2).
since the    lters have width 7, for each of the 288
feature detectors we rank all 7-grams occurring in
the validation and test sets according to their ac-
tivation of the detector. figure 5.2 presents the
top    ve 7-grams for four feature detectors. be-
sides the expected detectors for positive and nega-
tive sentiment, we    nd detectors for particles such
as    not    that negate sentiment and such as    too   
that potentiate sentiment. we    nd detectors for
multiple other notable constructs including    all   ,
   or   ,    with...that   ,    as...as   . the feature detectors
learn to recognise not just single id165s, but pat-
terns within id165s that have syntactic, semantic
or structural signi   cance.
6 conclusion
we have described a dynamic convolutional neural
network that uses the dynamic k-max pooling op-
erator as a non-linear subsampling function. the
feature graph induced by the network is able to
capture word relations of varying size. the net-
work achieves high performance on question and
sentiment classi   cation without requiring external
features as provided by parsers or other resources.

acknowledgements
we thank nando de freitas and yee whye teh
for great discussions on the paper. this work was
supported by a xerox foundation award, epsrc
grant number ep/f042728/1, and epsrc grant
number ep/k036580/1.

positivelovely	 	 	 	 	 comedic	 	 	 	 	 moments	 and	 	 	 	 several	 	 	 	 	 fine	 	 	 	 	 	 performancesgood	 	 	 	 	 	 	 script	 	 	 	 	 	 ,	 	 	 	 	 	 	 good	 	 	 dialogue	 	 	 	 ,	 	 	 	 	 	 	 	 	 funny	 	 	 	 	 	 	 sustains	 	 	 throughout	 	 is	 	 	 	 	 	 daring	 ,	 	 	 	 	 	 	 	 	 	 	 inventive	 and	 	 	 	 	 	 	 	 	 well	 	 	 	 	 	 	 written	 	 	 	 	 ,	 	 	 	 	 	 	 nicely	 acted	 	 	 	 	 	 	 and	 	 	 	 	 	 	 beautifully	 remarkably	 solid	 	 	 	 	 	 	 and	 	 	 	 	 subtly	 satirical	 	 	 tour	 	 	 	 	 	 de	 	 	 	 	 	 	 	 	 	 negative,	 	 	 	 	 	 	 	 	 	 nonexistent	 plot	 	 	 	 and	 	 	 	 pretentious	 visual	 	 	 	 style	 	 	 	 	 	 	 it	 	 	 	 	 	 	 	 	 fails	 	 	 	 	 	 	 the	 	 	 	 	 most	 	 	 basic	 	 	 	 	 	 	 test	 	 	 	 	 	 as	 	 	 	 	 	 	 	 	 	 so	 	 	 	 	 	 	 	 	 stupid	 	 	 	 	 	 ,	 	 	 	 	 	 	 so	 	 	 	 	 ill	 	 	 	 	 	 	 	 	 conceived	 ,	 	 	 	 	 	 	 	 	 	 	 ,	 	 	 	 	 	 	 	 	 	 too	 	 	 	 	 	 	 	 	 dull	 	 	 	 and	 	 	 	 pretentious	 to	 	 	 	 	 	 	 	 be	 	 	 	 	 	 	 	 	 	 hood	 	 	 	 	 	 	 rats	 	 	 	 	 	 	 	 butt	 	 	 	 their	 	 ugly	 	 	 	 	 	 	 	 heads	 	 	 	 	 in	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 'not'n't	 	 	 	 have	 	 	 	 	 any	 	 	 	 	 	 	 	 	 huge	 laughs	 	 	 	 	 	 in	 	 	 	 	 	 	 	 	 	 	 its	 	 	 no	 	 	 	 	 movement	 ,	 	 	 	 	 	 	 	 	 	 	 no	 	 	 ,	 	 	 	 	 	 	 	 	 	 	 not	 	 	 	 	 	 	 	 	 	 much	 	 n't	 	 	 	 stop	 	 	 	 	 me	 	 	 	 	 	 	 	 	 	 from	 enjoying	 	 	 	 much	 	 	 	 	 	 	 	 	 of	 	 	 	 not	 	 	 	 that	 	 	 	 	 kung	 	 	 	 	 	 	 	 pow	 	 is	 	 	 	 	 	 	 	 	 	 n't	 	 	 	 	 	 	 	 	 	 funny	 not	 	 	 	 a	 	 	 	 	 	 	 	 moment	 	 	 	 	 	 that	 is	 	 	 	 	 	 	 	 	 	 not	 	 	 	 	 	 	 	 	 	 false	 'too',	 	 	 	 	 	 too	 	 	 	 	 	 dull	 	 	 	 	 	 	 	 and	 	 pretentious	 to	 	 	 	 	 	 	 	 	 	 	 be	 	 	 	 	 	 	 	 either	 too	 	 	 	 	 	 serious	 	 	 	 	 or	 	 	 too	 	 	 	 	 	 	 	 	 lighthearted	 ,	 	 	 	 	 	 	 	 	 too	 	 	 	 slow	 	 	 	 	 ,	 	 	 	 	 	 	 	 	 	 	 too	 	 long	 	 	 	 	 	 	 	 and	 	 	 	 	 	 	 	 	 	 too	 	 	 	 	 	 	 feels	 	 too	 	 	 	 	 	 formulaic	 	 	 and	 	 too	 	 	 	 	 	 	 	 	 familiar	 	 	 	 	 to	 	 	 	 	 	 	 	 is	 	 	 	 	 too	 	 	 	 	 	 predictable	 and	 	 too	 	 	 	 	 	 	 	 	 self	 	 	 	 	 	 	 	 	 conscious	 	 references
marco baroni and roberto zamparelli. 2010. nouns
are vectors, adjectives are matrices: representing
adjective-noun constructions in semantic space. in
emnlp, pages 1183   1193. acl.

phil blunsom, krystle kocik, and james r. curran.
2006. question classi   cation with log-linear mod-
in sigir    06: proceedings of the 29th an-
els.
nual international acm sigir conference on re-
search and development in information retrieval,
pages 615   616, new york, ny, usa. acm.

daoud clarke.

2012. a context-theoretic frame-
work for compositionality in distributional seman-
tics. computational linguistics, 38(1):41   71.

bob coecke, mehrnoosh sadrzadeh, and stephen
clark. 2010. mathematical foundations for a com-
positional distributional model of meaning. march.

ronan collobert and jason weston. 2008. a uni   ed
architecture for natural language processing: deep
neural networks with multitask learning. in interna-
tional conference on machine learning, icml.

john duchi, elad hazan, and yoram singer. 2011.
adaptive subgradient methods for online learning
and stochastic optimization. j. mach. learn. res.,
12:2121   2159, july.

katrin erk and sebastian pad  o. 2008. a structured
vector space model for word meaning in context.
proceedings of the conference on empirical meth-
ods in natural language processing - emnlp    08,
(october):897.

katrin erk. 2012. vector space models of word mean-
ing and phrase meaning: a survey. language and
linguistics compass, 6(10):635   653.

felix a. gers and jrgen schmidhuber. 2001. lstm
recurrent networks learn simple context-free and
context-sensitive languages. ieee transactions on
neural networks, 12(6):1333   1340.

alec go, richa bhayani, and lei huang. 2009. twit-
ter sentiment classi   cation using distant supervision.
processing, pages 1   6.

edward grefenstette and mehrnoosh sadrzadeh. 2011.
experimental support for a categorical composi-
tional distributional model of meaning. in proceed-
ings of the conference on empirical methods in nat-
ural language processing, pages 1394   1404. asso-
ciation for computational linguistics.

edward grefenstette.

category-theoretic
quantitative compositional distributional models
arxiv preprint
of natural
arxiv:1311.1539.

language semantics.

2013.

emiliano guevara. 2010. modelling adjective-noun
compositionality by regression. esslli   10 work-
shop on compositionality and distributional se-
mantic models.

karl moritz hermann and phil blunsom. 2013. the
role of syntax in vector space models of composi-
tional semantics. in proceedings of the 51st annual
meeting of the association for computational lin-
guistics (volume 1: long papers), so   a, bulgaria,
august. association for computational linguistics.
forthcoming.

geoffrey e. hinton, nitish srivastava, alex
krizhevsky, ilya sutskever, and ruslan salakhut-
dinov.
improving neural networks by
preventing co-adaptation of
feature detectors.
corr, abs/1207.0580.

2012.

geoffrey e. hinton. 1989. connectionist learning pro-

cedures. artif. intell., 40(1-3):185   234.

zhiheng huang, marcus thint, and zengchang qin.
2008. question classi   cation using head words and
their hypernyms. in proceedings of the conference
on empirical methods in natural language pro-
cessing, emnlp    08, pages 927   936, stroudsburg,
pa, usa. association for computational linguis-
tics.

nal kalchbrenner and phil blunsom. 2013a. recur-
rent continuous translation models. in proceedings
of the 2013 conference on empirical methods in
natural language processing, seattle, october. as-
sociation for computational linguistics.

nal kalchbrenner and phil blunsom. 2013b. recur-
rent convolutional neural networks for discourse
compositionality. in proceedings of the workshop
on continuous vector space models and their com-
positionality, so   a, bulgaria, august. association
for computational linguistics.

dimitri kartsaklis and mehrnoosh sadrzadeh. 2013.
prior disambiguation of word tensors for construct-
in proceedings of the 2013
ing sentence vectors.
conference on empirical methods in natural lan-
guage processing (emnlp), seattle, usa, october.

andreas k  uchler and christoph goller. 1996. induc-
tive learning in symbolic domains using structure-
driven recurrent neural networks. in g  unther g  orz
and steffen h  olldobler, editors, ki, volume 1137 of
lecture notes in computer science, pages 183   197.
springer.

yann lecun, l  eon bottou, yoshua bengio, and patrick
haffner. 1998. gradient-based learning applied to
document recognition. proceedings of the ieee,
86(11):2278   2324, november.

xin li and dan roth. 2002. learning question clas-
in proceedings of the 19th international
si   ers.
conference on computational linguistics-volume 1,
pages 1   7. association for computational linguis-
tics.

tomas mikolov and geoffrey zweig. 2012. context
dependent recurrent neural network language model.
in slt, pages 234   239.

fabio massimo zanzotto,

ioannis korkontzelos,
francesca fallucchi, and suresh manandhar. 2010.
estimating linear models for compositional distri-
butional semantics. in proceedings of the 23rd in-
ternational conference on computational linguis-
tics, pages 1263   1271. association for computa-
tional linguistics.

luke s. zettlemoyer and michael collins.

2005.
learning to map sentences to logical form: struc-
tured classi   cation with probabilistic categorial
grammars. in uai, pages 658   666. auai press.

tomas mikolov, stefan kombrink, lukas burget, jan
cernock  y, and sanjeev khudanpur. 2011. exten-
sions of recurrent neural network language model.
in icassp, pages 5528   5531. ieee.

jeff mitchell and mirella lapata. 2008. vector-based
models of semantic composition. in proceedings of
acl, volume 8.

jeff mitchell and mirella lapata. 2010. composition
in distributional models of semantics. cognitive sci-
ence, 34(8):1388   1429.

jordan b. pollack. 1990. recursive distributed repre-

sentations. arti   cial intelligence, 46:77   105.

holger schwenk. 2012. continuous space translation
models for phrase-based statistical machine transla-
tion. in coling (posters), pages 1071   1080.

joo silva, lusa coheur, anacristina mendes, and an-
dreas wichert.
from symbolic to sub-
symbolic information in question classi   cation. ar-
ti   cial intelligence review, 35(2):137   154.

2011.

richard socher, jeffrey pennington, eric h. huang,
andrew y. ng, and christopher d. manning. 2011.
semi-supervised recursive autoencoders for pre-
dicting sentiment distributions. in proceedings of
the 2011 conference on empirical methods in nat-
ural language processing (emnlp).

richard socher, quoc v. le, christopher d. manning,
and andrew y. ng. 2013a. grounded composi-
tional semantics for finding and describing images
with sentences. in transactions of the association
for computational linguistics (tacl).

richard socher, alex perelygin, jean wu, jason
chuang, christopher d. manning, andrew y. ng,
and christopher potts. 2013b. recursive deep mod-
els for semantic compositionality over a sentiment
treebank. in proceedings of the 2013 conference on
empirical methods in natural language process-
ing, pages 1631   1642, stroudsburg, pa, october.
association for computational linguistics.

joseph turian, lev ratinov, and yoshua bengio. 2010.
word representations: a simple and general method
for semi-supervised learning. in proceedings of the
48th annual meeting of the association for compu-
tational linguistics, pages 384   394. association for
computational linguistics.

peter turney. 2012. domain and function: a dual-
space model of semantic relations and compositions.
j. artif. intell. res.(jair), 44:533   585.

alexander waibel, toshiyuki hanazawa, geofrey hin-
ton, kiyohiro shikano, and kevin j. lang. 1990.
readings in id103. chapter phoneme
recognition using time-delay neural networks,
pages 393   404. morgan kaufmann publishers inc.,
san francisco, ca, usa.

