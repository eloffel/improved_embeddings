convolutional neural networks for sentence classi   cation

yoon kim

new york university
yhk255@nyu.edu

4
1
0
2

 

p
e
s
3

 

 
 
]
l
c
.
s
c
[
 
 

2
v
2
8
8
5

.

8
0
4
1
:
v
i
x
r
a

abstract

we report on a series of experiments with
convolutional neural networks
(id98)
trained on top of pre-trained word vec-
tors for sentence-level classi   cation tasks.
we show that a simple id98 with lit-
tle hyperparameter tuning and static vec-
tors achieves excellent results on multi-
ple benchmarks. learning task-speci   c
vectors through    ne-tuning offers further
gains in performance. we additionally
propose a simple modi   cation to the ar-
chitecture to allow for the use of both
task-speci   c and static vectors. the id98
models discussed herein improve upon the
state of the art on 4 out of 7 tasks, which
include id31 and question
classi   cation.
introduction

1
deep learning models have achieved remarkable
results in id161 (krizhevsky et al.,
2012) and id103 (graves et al., 2013)
in recent years. within natural language process-
ing, much of the work with deep learning meth-
ods has involved learning word vector representa-
tions through neural language models (bengio et
al., 2003; yih et al., 2011; mikolov et al., 2013)
and performing composition over the learned word
vectors for classi   cation (collobert et al., 2011).
word vectors, wherein words are projected from a
sparse, 1-of-v encoding (here v is the vocabulary
size) onto a lower dimensional vector space via a
hidden layer, are essentially feature extractors that
encode semantic features of words in their dimen-
sions. in such dense representations, semantically
close words are likewise close   in euclidean or
cosine distance   in the lower dimensional vector
space.

convolutional neural networks (id98) utilize
layers with convolving    lters that are applied to

local features (lecun et al., 1998). originally
invented for id161, id98 models have
subsequently been shown to be effective for nlp
and have achieved excellent results in semantic
parsing (yih et al., 2014), search query retrieval
(shen et al., 2014), sentence modeling (kalch-
brenner et al., 2014), and other traditional nlp
tasks (collobert et al., 2011).

in the present work, we train a simple id98 with
one layer of convolution on top of word vectors
obtained from an unsupervised neural language
model. these vectors were trained by mikolov et
al. (2013) on 100 billion words of google news,
and are publicly available.1 we initially keep the
word vectors static and learn only the other param-
eters of the model. despite little tuning of hyper-
parameters, this simple model achieves excellent
results on multiple benchmarks, suggesting that
the pre-trained vectors are    universal    feature ex-
tractors that can be utilized for various classi   ca-
tion tasks. learning task-speci   c vectors through
   ne-tuning results in further improvements. we
   nally describe a simple modi   cation to the archi-
tecture to allow for the use of both pre-trained and
task-speci   c vectors by having multiple channels.
our work is philosophically similar to razavian
et al. (2014) which showed that for image clas-
si   cation, feature extractors obtained from a pre-
trained deep learning model perform well on a va-
riety of tasks   including tasks that are very dif-
ferent from the original task for which the feature
extractors were trained.

2 model

the model architecture, shown in    gure 1, is a
slight variant of the id98 architecture of collobert
et al. (2011). let xi     rk be the k-dimensional
word vector corresponding to the i-th word in the
sentence. a sentence of length n (padded where

1https://code.google.com/p/id97/

figure 1: model architecture with two channels for an example sentence.

necessary) is represented as

x1:n = x1     x2     . . .     xn,
(1)
where     is the concatenation operator.
in gen-
eral, let xi:i+j refer to the concatenation of words
xi, xi+1, . . . , xi+j. a convolution operation in-
volves a    lter w     rhk, which is applied to a
window of h words to produce a new feature. for
example, a feature ci is generated from a window
of words xi:i+h   1 by

ci = f (w    xi:i+h   1 + b).

(2)
here b     r is a bias term and f is a non-linear
function such as the hyperbolic tangent. this    lter
is applied to each possible window of words in the
sentence {x1:h, x2:h+1, . . . , xn   h+1:n} to produce
a feature map

c = [c1, c2, . . . , cn   h+1],

(3)
with c     rn   h+1. we then apply a max-over-
time pooling operation (collobert et al., 2011)
over the feature map and take the maximum value
  c = max{c} as the feature corresponding to this
particular    lter. the idea is to capture the most im-
portant feature   one with the highest value   for
each feature map. this pooling scheme naturally
deals with variable sentence lengths.

we have described the process by which one
feature is extracted from one    lter. the model
uses multiple    lters (with varying window sizes)
to obtain multiple features. these features form
the penultimate layer and are passed to a fully con-
nected softmax layer whose output is the probabil-
ity distribution over labels.

in one of the model variants, we experiment
with having two    channels    of word vectors   one

that is kept static throughout training and one that
is    ne-tuned via id26 (section 3.2).2
in the multichannel architecture, illustrated in    g-
ure 1, each    lter is applied to both channels and
the results are added to calculate ci in equation
(2). the model is otherwise equivalent to the sin-
gle channel architecture.

2.1 id173
for id173 we employ dropout on the
penultimate layer with a constraint on l2-norms of
the weight vectors (hinton et al., 2012). dropout
prevents co-adaptation of hidden units by ran-
domly dropping out   i.e., setting to zero   a pro-
portion p of the hidden units during foward-
id26. that is, given the penultimate
layer z = [  c1, . . . ,   cm] (note that here we have m
   lters), instead of using

y = w    z + b

(4)

for output unit y in forward propagation, dropout
uses

y = w    (z     r) + b,

(5)
where     is the element-wise multiplication opera-
tor and r     rm is a    masking    vector of bernoulli
random variables with id203 p of being 1.
gradients are backpropagated only through the
unmasked units. at test time, the learned weight
vectors are scaled by p such that   w = pw, and
  w is used (without dropout) to score unseen sen-
tences. we additionally constrain l2-norms of the
weight vectors by rescaling w to have ||w||2 = s
whenever ||w||2 > s after a id119 step.
2we employ language from id161 where a color
image has red, green, and blue channels.

wait for the video and do n't rent it n x k representation of sentence with static and non-static channels convolutional layer with multiple filter widths and feature maps max-over-time pooling fully connected layer with dropout and  softmax output |v |

|vpre|

n

data
mr
sst-1
sst-2
subj
trec

test
l
20 10662 18765 16448 cv
18 11855 17836 16262 2210
19 9613
16185 14838 1821
23 10000 21323 17913 cv
500
10 5952
cv
19 3775
cv
3

c
2
5
2
2
6
2
mpqa 2
table 1: summary statistics for the datasets after tokeniza-
tion. c: number of target classes. l: average sentence length.
n: dataset size. |v |: vocabulary size. |vpre|: number of
words present in the set of pre-trained word vectors. test:
test set size (cv means there was no standard train/test split
and thus 10-fold cv was used).

9592
5340
10606 6246

9125
5046
6083

cr

3 datasets and experimental setup

we test our model on various benchmarks. sum-
mary statistics of the datasets are in table 1.

    mr: movie reviews with one sentence per re-
view. classi   cation involves detecting posi-
tive/negative reviews (pang and lee, 2005).3
    sst-1: stanford sentiment treebank   an
extension of mr but with train/dev/test splits
provided and    ne-grained labels (very pos-
itive, positive, neutral, negative, very nega-
tive), re-labeled by socher et al. (2013).4

    sst-2: same as sst-1 but with neutral re-

views removed and binary labels.

    subj: subjectivity dataset where the task is
to classify a sentence as being subjective or
objective (pang and lee, 2004).

    trec: trec question dataset   task in-
volves classifying a question into 6 question
types (whether the question is about person,
location, numeric information, etc.) (li and
roth, 2002).5

    cr: customer reviews of various products
(cameras, mp3s etc.). task is to predict pos-
itive/negative reviews (hu and liu, 2004).6

3https://www.cs.cornell.edu/people/pabo/movie-review-data/
4http://nlp.stanford.edu/sentiment/ data is actually provided
at the phrase-level and hence we train the model on both
phrases and sentences but only score on sentences at test
time, as in socher et al. (2013), kalchbrenner et al. (2014),
and le and mikolov (2014). thus the training set is an order
of magnitude larger than listed in table 1.
5http://cogcomp.cs.illinois.edu/data/qa/qc/
6http://www.cs.uic.edu/   liub/fbs/sentiment-analysis.html

    mpqa: opinion polarity detection subtask
of the mpqa dataset (wiebe et al., 2005).7

3.1 hyperparameters and training
for all datasets we use: recti   ed linear units,    lter
windows (h) of 3, 4, 5 with 100 feature maps each,
dropout rate (p) of 0.5, l2 constraint (s) of 3, and
mini-batch size of 50. these values were chosen
via a grid search on the sst-2 dev set.

we do not otherwise perform any dataset-
speci   c tuning other than early stopping on dev
sets. for datasets without a standard dev set we
randomly select 10% of the training data as the
dev set. training is done through stochastic gra-
dient descent over shuf   ed mini-batches with the
adadelta update rule (zeiler, 2012).

3.2 pre-trained word vectors
initializing word vectors with those obtained from
an unsupervised neural language model is a popu-
lar method to improve performance in the absence
of a large supervised training set (collobert et al.,
2011; socher et al., 2011; iyyer et al., 2014). we
use the publicly available id97 vectors that
were trained on 100 billion words from google
news. the vectors have dimensionality of 300 and
were trained using the continuous bag-of-words
architecture (mikolov et al., 2013). words not
present in the set of pre-trained words are initial-
ized randomly.

3.3 model variations
we experiment with several variants of the model.
    id98-rand: our baseline model where all
words are randomly initialized and then mod-
i   ed during training.

    id98-static: a model with pre-trained
vectors from id97.
all words   
including the unknown ones that are ran-
domly initialized   are kept static and only
the other parameters of the model are learned.
    id98-non-static: same as above but the pre-
trained vectors are    ne-tuned for each task.
    id98-multichannel: a model with two sets
of word vectors. each set of vectors is treated
as a    channel    and each    lter is applied

7http://www.cs.pitt.edu/mpqa/

model
id98-rand
id98-static
id98-non-static
id98-multichannel
rae (socher et al., 2011)
mv-id56 (socher et al., 2012)
rntn (socher et al., 2013)
did98 (kalchbrenner et al., 2014)
paragraph-vec (le and mikolov, 2014)
ccae (hermann and blunsom, 2013)
sent-parser (dong et al., 2014)
nbid166 (wang and manning, 2012)
mnb (wang and manning, 2012)
g-dropout (wang and manning, 2013)
f-dropout (wang and manning, 2013)
tree-crf (nakagawa et al., 2010)
crf-pr (yang and cardie, 2014)
id166s (silva et al., 2011)

mr
76.1
81.0
81.5
81.1
77.7
79.0
   
   
   
77.8
79.5
79.4
79.0
79.0
79.1
77.3
   
   

sst-1
45.0
45.5
48.0
47.4
43.2
44.4
45.7
48.5
48.7
   
   
   
   
   
   
   
   
   

sst-2
82.7
86.8
87.2
88.1
82.4
82.9
85.4
86.8
87.8
   
   
   
   
   
   
   
   
   

subj
89.6
93.0
93.4
93.2
   
   
   
   
   
   
   
93.2
93.6
93.4
93.6
   
   
   

trec
91.2
92.8
93.6
92.2
   
   
   
93.0
   
   
   
   
   
   
   
   
   
95.0

cr mpqa
79.8
84.7
84.3
85.0
   
   
   
   
   
   
   
81.8
80.0
82.1
81.9
81.4
82.7
   

83.4
89.6
89.5
89.4
86.4
   
   
   
   
87.2
86.3
86.3
86.3
86.1
86.3
86.1
   
   

table 2: results of our id98 models against other methods. rae: recursive autoencoders with pre-trained word vectors from
wikipedia (socher et al., 2011). mv-id56: matrix-vector id56 with parse trees (socher et al., 2012).
rntn: recursive neural tensor network with tensor-based feature function and parse trees (socher et al., 2013). did98:
dynamic convolutional neural network with k-max pooling (kalchbrenner et al., 2014). paragraph-vec: logistic regres-
sion on top of paragraph vectors (le and mikolov, 2014). ccae: combinatorial category autoencoders with combinatorial
category grammar operators (hermann and blunsom, 2013). sent-parser: id31-speci   c parser (dong et al.,
2014). nbid166, mnb: naive bayes id166 and multinomial naive bayes with uni-bigrams from wang and manning (2012).
g-dropout, f-dropout: gaussian dropout and fast dropout from wang and manning (2013). tree-crf: dependency tree
with id49 (nakagawa et al., 2010). crf-pr: id49 with posterior id173
(yang and cardie, 2014). id166s: id166 with uni-bi-trigrams, wh word, head word, pos, parser, hypernyms, and 60 hand-coded
rules as features from silva et al. (2011).

to both channels, but gradients are back-
propagated only through one of the chan-
nels. hence the model is able to    ne-tune
one set of vectors while keeping the other
static. both channels are initialized with
id97.

in order to disentangle the effect of the above
variations versus other random factors, we elim-
inate other sources of randomness   cv-fold as-
signment,
initialization of unknown word vec-
tors, initialization of id98 parameters   by keep-
ing them uniform within each dataset.

4 results and discussion

results of our models against other methods are
listed in table 2. our baseline model with all ran-
domly initialized words (id98-rand) does not per-
form well on its own. while we had expected per-
formance gains through the use of pre-trained vec-
tors, we were surprised at the magnitude of the
gains. even a simple model with static vectors
(id98-static) performs remarkably well, giving

competitive results against the more sophisticated
deep learning models that utilize complex pool-
ing schemes (kalchbrenner et al., 2014) or require
parse trees to be computed beforehand (socher
et al., 2013). these results suggest that the pre-
trained vectors are good,    universal    feature ex-
tractors and can be utilized across datasets. fine-
tuning the pre-trained vectors for each task gives
still further improvements (id98-non-static).

4.1 multichannel vs. single channel models
we had initially hoped that the multichannel ar-
chitecture would prevent over   tting (by ensuring
that the learned vectors do not deviate too far
from the original values) and thus work better than
the single channel model, especially on smaller
datasets. the results, however, are mixed, and fur-
ther work on regularizing the    ne-tuning process
is warranted. for instance, instead of using an
additional channel for the non-static portion, one
could maintain a single channel but employ extra
dimensions that are allowed to be modi   ed during
training.

most similar words for

static channel non-static channel

bad

good

n   t

!

,

good
terrible
horrible
lousy
great
bad

terri   c
decent

os
ca

ireland

wo
2,500
entire
jez

changer
decasia
abysmally

demise
valiant

terrible
horrible
lousy
stupid
nice
decent
solid
terri   c

not
never
nothing
neither
2,500
lush

beautiful
terri   c

but

dragon

a
and

table 3: top 4 neighboring words   based on cosine
similarity   for vectors in the static channel (left) and    ne-
tuned vectors in the non-static channel (right) from the mul-
tichannel model on the sst-2 dataset after training.

4.2 static vs. non-static representations
as is the case with the single channel non-static
model, the multichannel model is able to    ne-tune
the non-static channel to make it more speci   c to
the task-at-hand. for example, good is most sim-
ilar to bad in id97, presumably because
they are (almost) syntactically equivalent. but for
vectors in the non-static channel that were    ne-
tuned on the sst-2 dataset, this is no longer the
case (table 3). similarly, good is arguably closer
to nice than it is to great for expressing sentiment,
and this is indeed re   ected in the learned vectors.
for (randomly initialized) tokens not in the set
of pre-trained vectors,    ne-tuning allows them to
learn more meaningful representations:
the net-
work learns that exclamation marks are associ-
ated with effusive expressions and that commas
are conjunctive (table 3).

4.3 further observations
we report on some further experiments and obser-
vations:

    kalchbrenner et al.

(2014) report much
worse results with a id98 that has essentially

the same architecture as our single channel
model. for example, their max-tdnn (time
delay neural network) with randomly ini-
tialized words obtains 37.4% on the sst-1
dataset, compared to 45.0% for our model.
we attribute such discrepancy to our id98
having much more capacity (multiple    lter
widths and feature maps).

    dropout proved to be such a good regularizer
that it was    ne to use a larger than necessary
network and simply let dropout regularize it.
dropout consistently added 2%   4% relative
performance.

    when randomly initializing words not

in
improve-
id97, we obtained slight
ments by sampling each dimension from
u [   a, a] where a was chosen such that the
randomly initialized vectors have the same
variance as the pre-trained ones. it would be
interesting to see if employing more sophis-
ticated methods to mirror the distribution of
pre-trained vectors in the initialization pro-
cess gives further improvements.

    we brie   y experimented with another set of
publicly available word vectors trained by
(2011) on wikipedia,8 and
collobert et al.
found that id97 gave far superior per-
formance. it is not clear whether this is due
to mikolov et al. (2013)   s architecture or the
100 billion word google news dataset.

    adadelta (zeiler, 2012) gave similar results
to adagrad (duchi et al., 2011) but required
fewer epochs.

5 conclusion
in the present work we have described a series of
experiments with convolutional neural networks
built on top of id97. despite little tuning
of hyperparameters, a simple id98 with one layer
of convolution performs remarkably well. our re-
sults add to the well-established evidence that un-
supervised pre-training of word vectors is an im-
portant ingredient in deep learning for nlp.

acknowledgments
we would like to thank yann lecun and the
anonymous reviewers for their helpful feedback
and suggestions.
8http://ronan.collobert.com/senna/

references
y. bengio, r. ducharme, p. vincent. 2003. neu-
ral probabilitistic language model. journal of ma-
chine learning research 3:1137   1155.

r. collobert, j. weston, l. bottou, m. karlen, k.
kavukcuglu, p. kuksa. 2011. natural language
processing (almost) from scratch. journal of ma-
chine learning research 12:2493   2537.

j. duchi, e. hazan, y. singer. 2011 adaptive subgra-
dient methods for online learning and stochastic op-
timization. journal of machine learning research,
12:2121   2159.

l. dong, f. wei, s. liu, m. zhou, k. xu. 2014. a
statistical parsing framework for sentiment classi-
   cation. corr, abs/1401.6330.

a. graves, a. mohamed, g. hinton. 2013. speech
recognition with deep recurrent neural networks. in
proceedings of icassp 2013.

b. pang, l. lee.

2004. a sentimental education:
id31 using subjectivity summarization
in proceedings of acl
based on minimum cuts.
2004.

b. pang, l. lee. 2005. seeing stars: exploiting class
relationships for sentiment categorization with re-
spect to rating scales. in proceedings of acl 2005.

a.s. razavian, h. azizpour, j. sullivan, s. carlsson
2014. id98 features off-the-shelf: an astounding
baseline. corr, abs/1403.6382.

y. shen, x. he, j. gao, l. deng, g. mesnil. 2014.
learning semantic representations using convolu-
tional neural networks for web search. in proceed-
ings of www 2014.

j. silva, l. coheur, a. mendes, a. wichert. 2011.
from symbolic to sub-symbolic information in ques-
tion classi   cation. arti   cial intelligence review,
35(2):137   154.

g. hinton, n. srivastava, a. krizhevsky, i. sutskever,
r. salakhutdinov.
improving neural net-
works by preventing co-adaptation of feature detec-
tors. corr, abs/1207.0580.

2012.

r. socher, j. pennington, e. huang, a. ng, c. man-
ning. 2011. semi-supervised recursive autoen-
in
coders for predicting sentiment distributions.
proceedings of emnlp 2011.

k. hermann, p. blunsom. 2013. the role of syntax in
vector space models of id152.
in proceedings of acl 2013.

r. socher, b. huval, c. manning, a. ng. 2012. se-
mantic compositionality through recursive matrix-
vector spaces. in proceedings of emnlp 2012.

m. hu, b. liu. 2004. mining and summarizing cus-
in proceedings of acm sigkdd

tomer reviews.
2004.

m. iyyer, p. enns, j. boyd-graber, p. resnik 2014.
political ideology detection using recursive neural
networks. in proceedings of acl 2014.

n. kalchbrenner, e. grefenstette, p. blunsom. 2014. a
convolutional neural network for modelling sen-
tences. in proceedings of acl 2014.

a. krizhevsky, i. sutskever, g. hinton. 2012.

ima-
genet classi   cation with deep convolutional neu-
ral networks. in proceedings of nips 2012.

q. le, t. mikolov. 2014. distributed represenations
in proceedings of

of sentences and documents.
icml 2014.

y. lecun, l. bottou, y. bengio, p. haffner. 1998.
gradient-based learning applied to document recog-
in proceedings of the ieee, 86(11):2278   
nition.
2324, november.

x. li, d. roth. 2002. learning question classi   ers.

in proceedings of acl 2002.

t. mikolov, i. sutskever, k. chen, g. corrado, j. dean.
2013. distributed representations of words and
phrases and their compositionality. in proceedings
of nips 2013.

t. nakagawa, k. inui, s. kurohashi.

2010. de-
pendency tree-based sentiment classi   cation using
crfs with hidden variables. in proceedings of acl
2010.

r. socher, a. perelygin, j. wu, j. chuang, c. manning,
a. ng, c. potts. 2013. recursive deep models for
semantic compositionality over a sentiment tree-
bank. in proceedings of emnlp 2013.

j. wiebe, t. wilson, c. cardie. 2005. annotating ex-
pressions of opinions and emotions in language.
language resources and evaluation, 39(2-3): 165   
210.

s. wang, c. manning. 2012. baselines and bigrams:
simple, good sentiment and topic classi   cation.
in proceedings of acl 2012.

s. wang, c. manning. 2013. fast dropout training.

in proceedings of icml 2013.

b. yang, c. cardie. 2014. context-aware learning
for sentence-level id31 with poste-
rior id173. in proceedings of acl 2014.

w. yih, k. toutanova, j. platt, c. meek. 2011. learn-
ing discriminative projections for text similarity
measures. proceedings of the fifteenth confer-
ence on computational natural language learning,
247   256.

w. yih, x. he, c. meek. 2014. id29 for
in proceed-

single-relation id53.
ings of acl 2014.

m. zeiler. 2012. adadelta: an adaptive learning rate

method. corr, abs/1212.5701.

