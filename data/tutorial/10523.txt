deep unordered composition rivals syntactic methods

for text classi   cation

mohit iyyer,1 varun manjunatha,1 jordan boyd-graber,2 hal daum  e iii1

1university of maryland, department of computer science and umiacs

2university of colorado, department of computer science

{miyyer,varunm,hal}@umiacs.umd.edu, jordan.boyd.graber@colorado.edu

abstract

many existing deep learning models for
natural language processing tasks focus on
learning the compositionality of their in-
puts, which requires many expensive com-
putations. we present a simple deep neural
network that competes with and, in some
cases, outperforms such models on sen-
timent analysis and factoid question an-
swering tasks while taking only a fraction
of the training time. while our model is
syntactically-ignorant, we show signi   cant
improvements over previous bag-of-words
models by deepening our network and ap-
plying a novel variant of dropout. more-
over, our model performs better than syn-
tactic models on datasets with high syn-
tactic variance. we show that our model
makes similar errors to syntactically-aware
models, indicating that for the tasks we con-
sider, nonlinearly transforming the input is
more important than tailoring a network to
incorporate word order and syntax.

1

introduction

vector space models for natural language process-
ing (nlp) represent words using low dimensional
vectors called embeddings. to apply vector space
models to sentences or documents, one must    rst
select an appropriate composition function, which
is a mathematical process for combining multiple
words into a single vector.

composition functions fall into two classes: un-
ordered and syntactic. unordered functions treat in-
put texts as bags of id27s, while syntac-
tic functions take word order and sentence structure
into account. previously published experimental

results have shown that syntactic functions outper-
form unordered functions on many tasks (socher
et al., 2013b; kalchbrenner and blunsom, 2013).
however, there is a tradeoff: syntactic functions
require more training time than unordered compo-
sition functions and are prohibitively expensive in
the case of huge datasets or limited computing re-
sources. for example, the id56
(section 2) computes costly matrix/tensor products
and nonlinearities at every node of a syntactic parse
tree, which limits it to smaller datasets that can be
reliably parsed.

we introduce a deep unordered model that ob-
tains near state-of-the-art accuracies on a variety of
sentence and document-level tasks with just min-
utes of training time on an average laptop computer.
this model, the deep averaging network (dan),
works in three simple steps:

1. take the vector average of the embeddings
associated with an input sequence of tokens

2. pass that average through one or more feed-

forward layers

3. perform (linear) classi   cation on the    nal

layer   s representation

the model can be improved by applying a novel
dropout-inspired regularizer: for each training in-
stance, randomly drop some of the tokens    embed-
dings before computing the average.

we evaluate dans on id31 and fac-
toid id53 tasks at both the sentence
and document level in section 4. our model   s suc-
cesses demonstrate that for these tasks, the choice
of composition function is not as important as ini-
tializing with pretrained embeddings and using a
deep network. furthermore, dans, unlike more
complex composition functions, can be effectively
trained on data that have high syntactic variance. a

qualitative analysis of the learned layers suggests
that the model works by magnifying tiny but mean-
ingful differences in the vector average through
multiple hidden layers, and a detailed error analy-
sis shows that syntactically-aware models actually
make very similar errors to those of the more na    ve
dan.
2 unordered vs. syntactic composition
our goal is to marry the speed of unordered func-
tions with the accuracy of syntactic functions.
in this section, we    rst describe a class of un-
ordered composition functions dubbed    neural bag-
of-words models    (nbow). we then explore more
complex syntactic functions designed to avoid
many of the pitfalls associated with nbow mod-
els. finally, we present the deep averaging network
(dan), which stacks nonlinear layers over the tradi-
tional nbow model and achieves performance on
par with or better than that of syntactic functions.

2.1 neural bag-of-words models
for simplicity, consider text classi   cation: map an
input sequence of tokens x to one of k labels. we
   rst apply a composition function g to the sequence
of id27s vw for w     x. the output of
this composition function is a vector z that serves
as input to a id28 function.

in our instantiation of nbow, g averages word

embeddings1

z = g(w     x) =

vw.

(1)

1

|x|(cid:88)w   x

feeding z to a softmax layer induces estimated
probabilities for each output label

(2)

(3)

  y = softmax(ws    z + b),

where the softmax function is

softmax(q) =

exp q
j=1 exp qj

(cid:80)k

ws is a k    d matrix for a dataset with k output
labels, and b is a bias term.
we train the nbow model to minimize cross-
id178 error, which for a single training instance
with ground-truth label y is

(cid:96)(  y) =

yp log(  yp).

(4)

k(cid:88)p=1

1preliminary experiments indicate that averaging outper-
forms the vector sum used in nbow from kalchbrenner et al.
(2014).

before we describe our deep extension of the
nbow model, we take a quick detour to discuss
syntactic composition functions. connections to
other representation frameworks are discussed fur-
ther in section 4.

2.2 considering syntax for composition
given a sentence like    you   ll be more entertained
getting hit by a bus   , an unordered model like
nbow might be deceived by the word    entertained   
to return a positive prediction. in contrast, syn-
tactic composition functions rely on the order and
structure of the input to learn how one word or
phrase affects another, sacri   cing computational
ef   ciency in the process. in subsequent sections,
we argue that this complexity is not matched by a
corresponding gain in performance.

id56s (reid98s) are syntac-
tic functions that rely on natural language   s inher-
ent structure to achieve state-of-the-art accuracies
on id31 tasks (tai et al., 2015). as in
nbow, each word type has an associated embed-
ding. however, the composition function g now
depends on a parse tree of the input sequence. the
representation for any internal node in a binary
parse tree is computed as a nonlinear function of
the representations of its children (figure 1, left).
a more powerful reid98 variant is the recursive
neural tensor network (recntn), which modi   es
g to include a costly tensor product (socher et al.,
2013b).

while reid98s can model complex linguistic
phenomena like negation (hermann et al., 2013),
they require much more training time than nbow
models. the nonlinearities and matrix/tensor prod-
ucts at each node of the parse tree are expen-
sive, especially as model dimensionality increases.
reid98s also require an error signal at every node.
one root softmax is not strong enough for the
model to learn compositional relations and leads
to worse accuracies than standard bag-of-words
models (li, 2014). finally, reid98s require rela-
tively consistent syntax between training and test
data due to their reliance on parse trees and thus
cannot effectively incorporate out-of-domain data,
as we show in our question-answering experiments.
kim (2014) shows that some of these issues can
be avoided by using a convolutional network in-
stead of a reid98, but the computational complex-
ity increases even further (see section 4 for runtime
comparisons).

what contributes most to the power of syntactic

figure 1: on the left, a reid98 is given an input sentence for sentiment classi   cation. softmax layers
are placed above every internal node to avoid vanishing gradient issues. on the right is a two-layer dan
taking the same input. while the reid98 has to compute a nonlinear representation (purple vectors) for
every node in the parse tree of its input, this dan only computes two nonlinear layers for every possible
input.

functions: the compositionality or the nonlineari-
ties? socher et al. (2013b) report that removing the
nonlinearities from their reid98 models drops per-
formance on the stanford sentiment treebank by
over 5% absolute accuracy. most unordered func-
tions are linear mappings between bag-of-words
features and output labels, so might they suffer
from the same issue? to isolate the effects of syn-
tactic composition from the nonlinear transforma-
tions that are crucial to reid98 performance, we
investigate how well a deep version of the nbow
model performs on tasks that have recently been
dominated by syntactically-aware models.

3 deep averaging networks

the intuition behind deep feed-forward neural net-
works is that each layer learns a more abstract rep-
resentation of the input than the previous one (ben-
gio et al., 2013). we can apply this concept to the
nbow model discussed in section 2.1 with the ex-
pectation that each layer will increasingly magnify
small but meaningful differences in the word em-
bedding average. to be more concrete, take s1 as
the sentence    i really loved rosamund pike   s per-
formance in the movie gone girl    and generate s2
and s3 by replacing    loved    with    liked    and then
again by    despised   . the vector averages of these
three sentences are almost identical, but the aver-
ages associated with the synonymous sentences s1
and s2 are slightly more similar to each other than
they are to s3   s average.

could adding depth to nbow make small such
distinctions as this one more apparent? in equa-

tion 1, we compute z, the vector representation for
input text x, by averaging the word vectors vw   x.
instead of directly passing this representation to an
output layer, we can further transform z by adding
more layers before applying the softmax. suppose
we have n layers, z1...n. we compute each layer

zi = g(zi   1) = f (wi    zi   1 + bi)

(5)

and feed the    nal layer   s representation, zn, to a
softmax layer for prediction (figure 1, right).

this model, which we call a deep averaging net-
work (dan), is still unordered, but its depth allows
it to capture subtle variations in the input better
than the standard nbow model. furthermore, com-
puting each layer requires just a single matrix multi-
plication, so the complexity scales with the number
of layers rather than the number of nodes in a parse
tree. in practice, we    nd no signi   cant difference
between the training time of a dan and that of the
shallow nbow model.

3.1 word dropout improves robustness
dropout regularizes neural networks by randomly
setting hidden and/or input units to zero with some
id203 p (hinton et al., 2012; srivastava et
al., 2014). given a neural network with n units,
dropout prevents over   tting by creating an ensem-
ble of 2n different networks that share parameters,
where each network consists of some combination
of dropped and undropped units. instead of drop-
ping units, a natural extension for the dan model is
to randomly drop word tokens    entire word embed-
dings from the vector average. using this method,

predatorc1isc2ac3masterpiecec4z1=f(w(cid:20)c3c4(cid:21)+b)z2=f(w(cid:20)c2z1(cid:21)+b)z3=f(w(cid:20)c1z2(cid:21)+b)softmaxsoftmaxsoftmaxreid98predatorc1isc2ac3masterpiecec4av=4pi=1ci4h1=f(w1  av+b1)h2=f(w2  h1+b2)softmaxdanwhich we call word dropout, our network theoreti-
cally sees 2|x| different token sequences for each
input x.

we posit a vector r with |x| independent
bernoulli trials, each of which equals 1 with prob-
ability p. the embedding vw for token w in x is
dropped from the average if rw is 0, which expo-
nentially increases the number of unique examples
the network sees during training. this allows us to
modify equation 1:

rw     bernoulli(p)
  x = {w|w     x and rw > 0}
z = g(w     x) = (cid:80)w      x vw
.
|   x|

(6)
(7)

(8)

depending on the choice of p, many of the
   dropped    versions of an original training instance
will be very similar to each other, but for shorter
inputs this is less likely. we might drop a very
important token, such as    horrible    in    the crab
rangoon was especially horrible   ; however, since
the number of word types that are predictive of the
output labels is low compared to non-predictive
ones (e.g., neutral words in id31), we
always see improvements using this technique.

theoretically, word dropout can also be applied
to other neural network-based approaches. how-
ever, we observe no signi   cant performance differ-
ences in preliminary experiments when applying
word dropout to leaf nodes in reid98s for senti-
ment analysis (dropped leaf representations are set
to zero vectors), and it slightly hurts performance
on the id53 task.

4 experiments

we compare dans to both the shallow nbow
model as well as more complicated syntactic mod-
els on sentence and document-level sentiment anal-
ysis and factoid id53 tasks. the dan
architecture we use for each task is almost identi-
cal, differing across tasks only in the type of output
layer and the choice of activation function. our
results show that dans outperform other bag-of-
words models and many syntactic models with very
little training time.2 on the question-answering
task, dans effectively train on out-of-domain data,
while reid98s struggle to reconcile the syntactic
differences between the training and test data.

2code at http://github.com/miyyer/dan.

rt

dan

model

nbow
binb

dan-root
dan-rand

sst
   ne
    46.9
45.4
77.3
47.7
80.3
nbow-rand 76.2
42.3
79.0
43.6
    41.9
79.4    
77.7
43.2
    45.7
    49.8
    50.6
    48.5
    48.7
81.1
47.4
   
   

nbid166-bi
reid98   
recntn   
dreid98
treelstm
did98   
pvec   
id98-mc
wrrbm   

sst
bin
85.7
83.2
86.3
81.4
83.6
83.1
   
82.4
85.4
86.6
86.9
86.9
87.8
88.1
   

imdb

   
88.8
89.4
88.9
89.0
   
91.2
   
   
   
   
89.4
92.6
   
89.2

time
(s)
31
136
136
91
91
   
   
   
   
431
   
   
   

2,452

   

table 1: dans achieve comparable sentiment accu-
racies to syntactic functions (bottom third of table)
but require much less training time (measured as
time of a single epoch on the sst    ne-grained task).
asterisked models are initialized either with differ-
ent pretrained embeddings or randomly.

4.1 id31
recently, syntactic composition functions have
revolutionized both    ne-grained and binary (pos-
itive or negative) id31. we conduct
sentence-level sentiment experiments on the rot-
ten tomatoes (rt) movie reviews dataset (pang
and lee, 2005) and its extension with phrase-level
labels, the stanford sentiment treebank (sst) in-
troduced by socher et al. (2013b). our model is
also effective on the document-level imdb movie
review dataset of maas et al. (2011).

4.1.1 neural baselines
most neural approaches to id31 are
variants of either recursive or convolutional net-
works. our id56 baselines
include standard reid98s (socher et al., 2011b),
recntns, the deep recursive network (dreid98)
proposed by   irsoy and cardie (2014), and the
tree-lstm of (tai et al., 2015). convolu-
tional network baselines include the dynamic con-
volutional network (kalchbrenner et al., 2014,
did98) and the convolutional neural network multi-
channel (kim, 2014, id98-mc). our other neu-
ral baselines are the sliding-window based para-
graph vector (le and mikolov, 2014, pvec)3 and

3pvec is computationally expensive at both training and
test time and requires enough memory to store a vector for
every paragraph in the training data.

the word-representation restricted boltzmann ma-
chine (dahl et al., 2012, wrrbm), which only
works on the document-level imdb task.4
4.1.2 non-neural baselines
we also compare to non-neural baselines, specif-
ically the bigram na    ve bayes (binb) and na    ve
bayes support vector machine (nbid166-bi) mod-
els introduced by wang and manning (2012), both
of which are memory-intensive due to huge feature
spaces of size |v |2.
4.1.3 dan con   gurations
in table 1, we compare a variety of dan and nbow
con   gurations5 to the baselines described above. in
particular, we are interested in not only comparing
dan accuracies to those of the baselines, but also
how initializing with pretrained embeddings and re-
stricting the model to only root-level labels affects
performance. with this in mind, the nbow-rand
and dan-rand models are initialized with ran-
dom 300-dimensional id27s, while the
other models are initialized with publicly-available
300-d glove vectors trained over the common
crawl (pennington et al., 2014). the dan-root
model only has access to sentence-level labels for
sst experiments, while all other models are trained
on labeled phrases (if they exist) in addition to sen-
tences. we train all nbow and dan models using
adagrad (duchi et al., 2011).

we apply dans to documents by averaging the
embeddings for all of a document   s tokens and
then feeding that average through multiple layers
as before. since the representations computed by
dans are always d-dimensional vectors regardless
of the input size, they are ef   cient with respect to
both memory and computational cost. we    nd that
the hyperparameters selected on the sst also work
well for the imdb task.
4.1.4 dataset details
we evaluate over both    ne-grained and binary
sentence-level classi   cation tasks on the sst, and
just the binary task on rt and imdb. in the    ne-
grained sst setting, each sentence has a label from
zero to    ve where two is the neutral class. for the
binary task, we ignore all neutral sentences.6

4the wrrbm is trained using a slow metropolis-hastings

algorithm.

5best hyperparameters chosen by cross-validation: three
300-d relu layers, word dropout id203 p = 0.3, l2
id173 weight of 1e-5 applied to all parameters
6our    ne-grained sst split is {train: 8,544, dev: 1,101,
test: 2,210}, while our binary split is {train: 6,920, dev:872,

4.1.5 results
the dan achieves the second best reported result
on the rt dataset, behind only the signi   cantly
slower id98-mc model. it   s also competitive with
more complex models on the sst and outperforms
the did98 and wrrbm on the document-level
imdb task. interestingly, the dan achieves good
performance on the sst when trained with only
sentence-level labels, indicating that it does not
suffer from the vanishing error signal problem that
plagues reid98s. since acquiring labelled phrases
is often expensive (sayeed et al., 2012; iyyer et
al., 2014b), this result is promising for large or
messy datasets where    ne-grained annotation is
infeasible.
4.1.6 timing experiments
dans require less time per epoch and   in general   
require fewer epochs than their syntactic coun-
terparts. we compare dan runtime on the sst
to publicly-available implementations of syntactic
baselines in the last column of table 1; the reported
times are for a single epoch to control for hyper-
parameter choices such as learning rate, and all
models use 300-d word vectors. training a dan
on just sentence-level labels on the sst takes under
   ve minutes on a single core of a laptop; when
labeled phrases are added as separate training in-
stances, training time jumps to twenty minutes.7
all timing experiments were performed on a single
core of an intel i7 processor with 8gb of ram.

4.2 factoid id53
dans work well for id31, but how
do they do on other nlp tasks? we shift gears
to a paragraph-length factoid id53
task and    nd that our model outperforms other
unordered functions as well as a more complex
syntactic reid98 model. more interestingly, we
   nd that unlike the reid98, the dan signi   cantly
bene   ts from out-of-domain wikipedia training
data.

quiz bowl is a trivia competition in which play-
ers are asked four-to-six sentence questions about
entities (e.g., authors, battles, or events). it is an
ideal task to evaluate dans because there is prior
test:1,821}. split sizes increase by an order of magnitude
when labeled phrases are added to the training set. for rt,
we do 10-fold cv over a balanced binary dataset of 10,662
sentences. similarly, for the imdb experiments we use the
provided balanced binary training set of 25,000 documents.
7we also    nd that dans take signi   cantly fewer epochs to

reach convergence than syntactic models.

model
bow-dt
ir
qanta
dan
ir-wiki
qanta-wiki
dan-wiki

pos 1 pos 2
57.7
35.4
65.9
37.5
72.1
47.1
46.4
70.8
76.6
53.7
72.8
46.5
54.8
75.5

full
60.2
71.4
73.7
71.8
77.5
73.9
77.1

time(s)
   
n/a
314
18
n/a
1,648
119

table 2: the dan achieves slightly lower accu-
racies than the more complex qanta in much
less training time, even at early sentence posi-
tions where compositionality plays a bigger role.
when wikipedia is added to the training set (bot-
tom half of table), the dan outperforms qanta
and achieves comparable accuracy to a state-of-the-
art information retrieval baseline, which highlights
a bene   t of ignoring word order for this task.

figure 2: randomly dropping out 30% of words
from the vector average is optimal for the quiz bowl
task, yielding a gain in absolute accuracy of almost
3% on the quiz bowl question dataset compared to
the same model trained with no word dropout.

work using both syntactic and unordered models
for quiz bowl id53. in boyd-graber
et al. (2012), na    ve bayes bag-of-words models
(bow-dt) and sequential language models work
well on easy questions but poorly on harder ones.
a dependency-tree reid98 called qanta proposed
in iyyer et al. (2014a) shows substantial improve-
ments, leading to the hypothesis that correctly mod-
eling compositionality is crucial for answering hard
questions.

4.2.1 dataset and experimental setup
to test this, we train a dan over the history ques-
tions from iyyer et al. (2014a).8 this dataset is aug-

mented with 49,581 sentence/page-title pairs from
the wikipedia articles associated with the answers
in the dataset. for fair comparison with qanta,
we use a normalized tanh activation function at the
last layer instead of relu, and we also change the
output layer from a softmax to the margin rank-
ing loss (weston et al., 2011) used in qanta. we
initialize the dan with the same pretrained 100-
d id27s that were used to initialize
qanta.

we also evaluate the effectiveness of word
dropout on this task in figure 2. cross-validation
indicates that p = 0.3 works best for question an-
swering, although the improvement in accuracy is
negligible for id31. finally, continu-
ing the trend observed in the sentiment experiments,
dan converges much faster than qanta.

4.2.2 dans improve with noisy data

table 2 shows that while dan is slightly worse
than qanta when trained only on question-answer
pairs, it improves when trained on additional out-
of-domain wikipedia data (dan-wiki), reaching
performance comparable to that of a state-of-the-art
information retrieval system (ir-wiki). qanta,
in contrast, barely improves when wikipedia data is
added (qanta-wiki) possibly due to the syntactic
differences between wikipedia text and quiz bowl
question text.

the most common syntactic structures in quiz
bowl sentences are imperative constructions such
as    identify this british author who wrote wuther-
ing heights   , which are almost never seen in
wikipedia. furthermore, the subject of most quiz
bowl sentences is a pronoun or pronomial mention
referring to the answer, a property that is not true
of wikipedia sentences (e.g.,    little of emily   s
work from this period survives, except for poems
spoken by characters.   ). finally, many wikipedia
sentences do not uniquely identify the title of the
page they come from, such as the following sen-
tence from emily bront  e   s page:    she does not
seem to have made any friends outside her family.   
while noisy data affect both dan and qanta, the
latter is further hampered by the syntactic diver-
gence between quiz bowl questions and wikipedia,
which may explain the lack of improvement in ac-
curacy.

8the training set contains 14,219 sentences over 3,761
questions. for more detail about data and baseline systems,

see iyyer et al. (2014a).

llllll6970710.00.10.20.30.40.5dropout id203history qb accuracyeffect of word dropout5.1 perturbation analysis
following the work of   irsoy and cardie (2014), we
examine our network by measuring the response at
each hidden layer to perturbations in an input sen-
tence. in particular, we use the template the    lm   s
performances were awesome and replace the    -
nal word with increasingly negative polarity words
(cool, okay, underwhelming, the worst). for each
perturbed sentence, we observe how much the hid-
den layers differ from those associated with the
original template in 1-norm.

figure 3 shows that as a dan gets deeper, the dif-
ferences between negative and positive sentences
become increasingly ampli   ed. while nonexistent
in the shallow nbow model, these differences are
visible even with just a single hidden layer, thus
explaining why deepening the nbow improves sen-
timent analysis as shown in figure 4.

5.2 handling negations and    but   : where

syntax is still needed

while dans outperform other bag-of-words mod-
els, how can they model linguistic phenomena such
as negation without considering word order? to
evaluate dans over tougher inputs, we collect 92
sentences, each of which contains at least one nega-
tion and one contrastive conjunction, from the dev
and test sets of the sst.9 our    ne-grained accuracy
is higher on this subset than on the full dataset,
improving almost    ve percent absolute accuracy
to 53.3%. the dreid98 model of   irsoy and cardie
(2014) obtains a similar accuracy of 51.1%, con-
trary to our intuition that syntactic functions should
outperform unordered functions on sentences that
clearly require syntax to understand.10

are these sentences truly dif   cult to classify? a
close inspection reveals that both the dan and the
dreid98 have an overwhelming tendency to pre-
dict negative sentiment (60.9% and 55.4% of the
time for the dan and dreid98 respectively) when
they see a negation compared to positive sentiment
(35.9% for dans, 34.8% for dreid98s). if we fur-
ther restrict our subset of sentences to only those
with positive ground truth labels, we    nd that while
both models struggle, the dreid98 obtains 41.7%
accuracy, outperforming the dan   s 37.5%.

to understand why a negation or contrastive con-
junction triggers a negative sentiment prediction,

9we search for non-neutral sentences containing not / n   t,
and but. 48 of the sentences are positive while 44 are negative.
10both models are initialized with pretrained 300-d glove

embeddings for fair comparison.

figure 3: perturbation response (difference in 1-
norm) at each layer of a 5-layer dan after replac-
ing awesome in the    lm   s performances were awe-
some with four words of varying sentiment polarity.
while the shallow nbow model does not show any
meaningful distinctions, we see that as the network
gets deeper, negative sentences are increasingly
different from the original positive sentence.

figure 4: two to three layers is optimal for the
dan on the sst binary id31 task, but
adding any depth at all is an improvement over the
shallow nbow model.

5 how do dans work?

in this section we    rst examine how the deep layers
of the dan amplify tiny differences in the vector av-
erage that are predictive of the output labels. next,
we compare dans to dreid98s on sentences that
contain negations and contrastive conjunctions and
   nd that both models make similar errors despite
the latter   s increased complexity. finally, we an-
alyze the predictive ability of unsupervised word
embeddings on a simple sentiment task in an effort
to explain why initialization with these embeddings
improves the dan.

01020304050012345layerperturbation responsecoolokaythe worstunderwhelming perturbation response vs. layerllllllllllllll83848586870246number of layersbinary classification accuracylllldandan   rooteffect of depth on sentiment accuracysentence

a lousy movie that   s not merely unwatchable , but also
unlistenable
if you   re not a prepubescent girl , you   ll be laughing at
britney spears     movie-starring debut whenever it does n   t
have you impatiently squinting at your watch
blessed with immense physical prowess he may well be, but
ahola is simply not an actor
who knows what exactly godard is on about in this    lm , but
his words and images do n   t have to add up to mesmerize
you.
it   s so good that its relentless , polished wit can withstand
not only inept school productions , but even oliver parker    s
movie adaptation
too bad , but thanks to some lovely comedic moments and
several    ne performances , it   s not a total

loss

this movie was not good
this movie was good
this movie was bad
the movie was not bad

dan

negative

dreid98 ground truth
negative

negative

negative

negative

negative

positive

neutral

negative

positive

positive

positive

negative

positive

positive

negative

negative

positive

negative
positive
negative
negative

negative
positive
negative
negative

negative
positive
negative
positive

table 3: predictions of dan and dreid98 models on real (top) and synthetic (bottom) sentences that
contain negations and contrastive conjunctions. in the    rst column, words colored red individually predict
the negative label when fed to a dan, while blue words predict positive. the dan learns that the negators
not and n   t are strong negative predictors, which means it is unable to capture double negation as in the
last real example and the last synthetic example. the dreid98 does slightly better on the synthetic double
negation, predicting a lower negative polarity.

we show six sentences from the negation subset and
four synthetic sentences in table 3, along with both
models    predictions. the token-level predictions in
the table (shown as colored boxes) are computed by
passing each token through the dan as separate test
instances. the tokens not and n   t are strongly pre-
dictive of negative sentiment. while this simpli   ed
   negation    works for many sentences in the datasets
we consider, it prevents the dan from reasoning
about double negatives, as in    this movie was not
bad   . the dreid98 does slightly better in this case
by predicting a lesser negative polarity than the
dan; however, we theorize that still more powerful
syntactic composition functions (and more labelled
instances of negation and related phenomena) are
necessary to truly solve this problem.

5.3 unsupervised embeddings capture

sentiment

our model consistently converges slower to a worse
solution (dropping 3% in absolute accuracy on
coarse-grained sst) when we randomly initialize
the id27s. this does not apply to just

dans; both convolutional and recursive networks
do the same (kim, 2014;   irsoy and cardie, 2014).
why are initializations with these embeddings so
crucial to obtaining good performance? is it pos-
sible that unsupervised training algorithms are al-
ready capturing sentiment?

we investigate this theory by conducting a sim-
ple experiment: given a sentiment lexicon contain-
ing both positive and negative words, we train a
id28 to discriminate between the asso-
ciated id27s (without any    ne-tuning).
we use the lexicon created by hu and liu (2004),
which consists of 2,006 positive words and 4,783
negative words. we balance and split the dataset
into 3,000 training words and 1,000 test words.
using 300-dimensional glove embeddings pre-
trained over the common crawl, we obtain over
95% accuracy on the unseen test set, supporting the
hypothesis that unsupervised pretraining over large
corpora can capture properties such as sentiment.
intuitively, after the embeddings are    ne-tuned
during dan training, we might expect a decrease
in the norms of stopwords and an increase in the

can also extend the dan   s success at incorporating
out-of-domain training data to id31:
imagine training a dan on labeled tweets for clas-
si   cation on newspaper reviews. another poten-
tially interesting application is to add gated units
to a dan,as has been done for recurrent and recur-
sive neural networks (hochreiter and schmidhuber,
1997; cho et al., 2014; sutskever et al., 2014; tai
et al., 2015), to drop useless words rather than
randomly-selected ones.

8 conclusion
in this paper, we introduce the deep averaging net-
work, which feeds an unweighted average of word
vectors through multiple hidden layers before clas-
si   cation. the dan performs competitively with
more complicated neural networks that explicitly
model semantic and syntactic compositionality. it
is further strengthened by word dropout, a regu-
larizer that reduces input redundancy. dans ob-
tain close to state-of-the-art accuracy on both sen-
tence and document-level id31 and
factoid question-answering tasks with much less
training time than competing methods; in fact, all
experiments were performed in a matter of min-
utes on a single laptop core. we    nd that both
dans and syntactic functions make similar errors
given syntactically-complex input, which motivates
research into more powerful models of composi-
tionality.

acknowledgments
we thank ozan   irsoy not only for many insight-
ful discussions but also for suggesting some of
the experiments that we included in the paper.
we also thank the anonymous reviewers, richard
socher, arafat sultan, and the members of the
umd    thinking on your feet    research group for
their helpful comments. this work was supported
by nsf grant iis-1320538. boyd-graber is also
supported by nsf grants ccf-1409287 and ncse-
1422492. any opinions,    ndings, conclusions, or
recommendations expressed here are those of the
authors and do not necessarily re   ect the view of
the sponsor.

norms of sentiment-rich words like    awesome    or
   horrible   . however, we    nd no signi   cant dif-
ferences between the l2 norms of stopwords and
words in the sentiment lexicon of hu and liu
(2004).

6 related work

our dan model builds on the successes of both
simple vector operations and neural network-based
models for compositionality.

there are a variety of element-wise vector op-
erations that could replace the average used in the
dan. mitchell and lapata (2008) experiment with
many of them to model the compositionality of
short phrases. later, their work was extended to
take into account the syntactic relation between
words (erk and pad  o, 2008; baroni and zampar-
elli, 2010; kartsaklis and sadrzadeh, 2013) and
grammars (coecke et al., 2010; grefenstette and
sadrzadeh, 2011). while the average works best for
the tasks that we consider, banea et al. (2014)    nd
that simply summing id97 embeddings out-
performs all other methods on the semeval 2014
phrase-to-word and sentence-to-phrase similarity
tasks.

once we compute the embedding average in a
dan, we feed it to a deep neural network. in con-
trast, most previous work on neural network-based
methods for nlp tasks explicitly model word or-
der. outside of id31, reid98-based
approaches have been successful for tasks such
as parsing (socher et al., 2013a), machine trans-
lation (liu et al., 2014), and paraphrase detec-
tion (socher et al., 2011a). convolutional net-
works also model word order in local windows and
have achieved performance comparable to or bet-
ter than that of reid98s on many tasks (collobert
and weston, 2008; kim, 2014). meanwhile, feed-
forward architectures like that of the dan have
been used for id38 (bengio et al.,
2003), selectional preference acquisition (van de
cruys, 2014), and id33 (chen and
manning, 2014).

7 future work

in section 5, we showed that the performance of
our dan model worsens on sentences that con-
tain lingustic phenomena such as double negation.
one promising future direction is to cascade clas-
si   ers such that syntactic models are used only
when a dan is not con   dent in its prediction. we

references
carmen banea, di chen, rada mihalcea, claire cardie, and
janyce wiebe. 2014. simcompass: using deep learn-
ing id27s to assess cross-level similarity. in
semeval.

marco baroni and roberto zamparelli. 2010. nouns are
vectors, adjectives are matrices: representing adjective-
noun constructions in semantic space. in proceedings of
empirical methods in natural language processing.

geoffrey e. hinton, nitish srivastava, alex krizhevsky, ilya
sutskever, and ruslan salakhutdinov. 2012. improving
neural networks by preventing co-adaptation of feature
detectors. corr, abs/1207.0580.

sepp hochreiter and j  urgen schmidhuber. 1997. long short-

term memory. neural computation.

minqing hu and bing liu. 2004. mining and summariz-
ing customer reviews. in knowledge discovery and data
mining.

yoshua bengio, r  ejean ducharme, pascal vincent, and chris-
tian jauvin. 2003. a neural probabilistic language model.
journal of machine learning research.

ozan   irsoy and claire cardie. 2014. deep recursive neural
networks for compositionality in language. in proceedings
of advances in neural information processing systems.

yoshua bengio, aaron courville, and pascal vincent. 2013.
representation learning: a review and new perspectives.
ieee transactions on pattern analysis and machine intel-
ligence, 35(8):1798   1828.

jordan boyd-graber, brianna satinoff, he he, and hal daum  e
iii. 2012. besting the quiz master: id104 incre-
mental classi   cation games. in proceedings of empirical
methods in natural language processing.

danqi chen and christopher d manning. 2014. a fast and
accurate dependency parser using neural networks.
in
proceedings of empirical methods in natural language
processing.

kyunghyun cho, bart van merrienboer, caglar gulcehre,
fethi bougares, holger schwenk, and yoshua bengio.
2014. learning phrase representations using id56 encoder-
decoder for id151. in proceedings
of empirical methods in natural language processing.

bob coecke, mehrnoosh sadrzadeh, and stephen clark. 2010.
mathematical foundations for a compositional distribu-
tional model of meaning. linguistic analysis (lambek
festschirft).

ronan collobert and jason weston. 2008. a uni   ed ar-
chitecture for natural language processing: deep neural
networks with multitask learning. in proceedings of the
international conference of machine learning.

george e dahl, ryan p adams, and hugo larochelle. 2012.
training restricted id82s on word observa-
tions. in proceedings of the international conference of
machine learning.

john duchi, elad hazan, and yoram singer. 2011. adaptive
subgradient methods for online learning and stochastic
optimization. journal of machine learning research.

katrin erk and sebastian pad  o. 2008. a structured vector
space model for word meaning in context. in proceedings
of empirical methods in natural language processing.

edward grefenstette and mehrnoosh sadrzadeh. 2011. ex-
perimental support for a categorical compositional distri-
butional model of meaning. in proceedings of empirical
methods in natural language processing.

karl moritz hermann, edward grefenstette, and phil blun-
som. 2013.    not not bad    is not    bad   : a distributional
account of negation. proceedings of the acl workshop on
continuous vector space models and their compositional-
ity.

mohit iyyer, jordan boyd-graber, leonardo claudino,
richard socher, and hal daum  e iii. 2014a. a neural
network for factoid id53 over paragraphs.
in proceedings of empirical methods in natural language
processing.

mohit iyyer, peter enns, jordan boyd-graber, and philip
resnik. 2014b. political ideology detection using recursive
neural networks. in proceedings of the association for
computational linguistics.

nal kalchbrenner and phil blunsom. 2013. recurrent convo-
lutional neural networks for discourse compositionality. in
acl workshop on continuous vector space models and
their compositionality.

nal kalchbrenner, edward grefenstette, and phil blunsom.
2014. a convolutional neural network for modelling sen-
tences. in proceedings of the association for computa-
tional linguistics.

dimitri kartsaklis and mehrnoosh sadrzadeh. 2013. prior
disambiguation of word tensors for constructing sentence
vectors. in proceedings of empirical methods in natural
language processing.

yoon kim. 2014. convolutional neural networks for sentence
in proceedings of empirical methods in

classi   cation.
natural language processing.

quoc v le and tomas mikolov. 2014. distributed represen-
tations of sentences and documents. in proceedings of the
international conference of machine learning.

jiwei li. 2014. feature weight tuning for recursive neural

networks. corr, abs/1412.3714.

shujie liu, nan yang, mu li, and ming zhou. 2014. a
recursive recurrent neural network for statistical machine
translation. in proceedings of the association for compu-
tational linguistics.

andrew l. maas, raymond e. daly, peter t. pham, dan
huang, andrew y. ng, and christopher potts. 2011. learn-
ing word vectors for id31. in proceedings of
the association for computational linguistics.

jeff mitchell and mirella lapata. 2008. vector-based models
of semantic composition. in proceedings of the association
for computational linguistics.

bo pang and lillian lee. 2005. seeing stars: exploiting
class relationships for sentiment categorization with respect
in proceedings of the association for
to rating scales.
computational linguistics.

jeffrey pennington, richard socher, and christopher manning.
2014. glove: global vectors for word representation. in
proceedings of empirical methods in natural language
processing.

asad b. sayeed, jordan boyd-graber, bryan rusk, and amy
weinberg. 2012. grammatical structures for word-level
sentiment detection. in north american association of
computational linguistics.

richard socher, eric h. huang, jeffrey pennington, andrew y.
ng, and christopher d. manning. 2011a. dynamic pool-
ing and unfolding recursive autoencoders for paraphrase
detection. in proceedings of advances in neural informa-
tion processing systems.

richard socher, jeffrey pennington, eric h. huang, andrew y.
ng, and christopher d. manning. 2011b. semi-supervised
recursive autoencoders for predicting sentiment distri-
butions. in proceedings of empirical methods in natural
language processing.

richard socher, john bauer, christopher d. manning, and
andrew y. ng. 2013a. parsing with compositional vector
grammars. in proceedings of the association for compu-
tational linguistics.

richard socher, alex perelygin, jean y wu, jason chuang,
christopher d manning, andrew y ng, and christopher
potts. 2013b. recursive deep models for semantic com-
positionality over a sentiment treebank. in proceedings of
empirical methods in natural language processing.

nitish srivastava, geoffrey hinton, alex krizhevsky, ilya
sutskever, and ruslan salakhutdinov. 2014. dropout: a
simple way to prevent neural networks from over   tting.
journal of machine learning research, 15(1).

ilya sutskever, oriol vinyals, and quoc vv le. 2014. se-
quence to sequence learning with neural networks.
in
proceedings of advances in neural information processing
systems.

kai sheng tai, richard socher, and christopher d. man-
ning. 2015. improved semantic representations from tree-
structured id137.

tim van de cruys. 2014. a neural network approach to selec-
tional preference acquisition. in proceedings of empirical
methods in natural language processing.

sida i. wang and christopher d. manning. 2012. baselines
and bigrams: simple, good sentiment and topic classi   ca-
tion. in proceedings of the association for computational
linguistics.

jason weston, samy bengio, and nicolas usunier. 2011.
wsabie: scaling up to large vocabulary image annotation.
in international joint conference on arti   cial intelligence.

