using sentence-level lstm language models for script id136

karl pichotta

department of computer science
the university of texas at austin
pichotta@cs.utexas.edu

raymond j. mooney

department of computer science
the university of texas at austin

mooney@cs.utexas.edu

6
1
0
2

 

n
u
j
 

8

 
 
]
l
c
.
s
c
[
 
 

2
v
3
9
9
2
0

.

4
0
6
1
:
v
i
x
r
a

abstract

there is a small but growing body of
research on statistical scripts, models of
event sequences that allow probabilistic
id136 of implicit events from docu-
ments. these systems operate on struc-
tured verb-argument events produced by
an nlp pipeline. we compare these sys-
tems with recent recurrent neural net
models that directly operate on raw tokens
to predict sentences,    nding the latter to be
roughly comparable to the former in terms
of predicting missing events in documents.

1

introduction

statistical scripts are probabilistic models of event
sequences (chambers and jurafsky, 2008). a
learned script model is capable of processing a
document and inferring events that are probable
but not explicitly stated. these models operate on
automatically extracted structured events (for ex-
ample, verbs with entity arguments), which are de-
rived from standard nlp tools such as dependency
parsers and coreference resolution engines.

recent work has demonstrated that standard se-
quence models applied to such extracted event
sequences, e.g. discriminative language models
(rudinger et al., 2015) and long short term
memory (lstm) recurrent neural nets (pichotta
and mooney, 2016), are able to infer held-out
events more accurately than previous approaches.
these results call into question the extent to which
statistical event id136 systems require linguis-
tic preprocessing and syntactic structure. in an at-
tempt to shed light on this issue, we compare ex-
isting script models to lstms trained as sentence-
level language models which try to predict the
sequence of words in the next sentence from a

learned representation of the previous sentences
using no linguistic preprocessing.

some prior statistical script learning systems
are focused on knowledge induction. these sys-
tems are primarily designed to induce collections
of co-occurring event types involving the same en-
tities, and their ability to infer held-out events is
not their primary intended purpose (chambers and
jurafsky, 2008; ferraro and van durme, 2016, in-
ter alia). in the present work, we instead investi-
gate the behavior of systems trained to directly op-
timize performance on the task of predicting sub-
sequent events; in other words, we are investigat-
ing statistical models of events in discourse.

much prior research on statistical script learn-
ing has also evaluated on inferring missing events
from documents. however, the exact form that
this task takes depends on the adopted de   nition
of what constitutes an event:
in previous work,
events are de   ned in different ways, with differ-
ing degrees of structure. we consider simply us-
ing raw text, which requires no explicit syntactic
annotation, as our mediating representation, and
evaluate how raw text models compare to models
of more structured events.

kiros et al. (2015) introduced skip-thought vec-
tor models, in which an id56 is trained to en-
code a sentence within a document into a low-
dimensional vector that supports predicting the
neighboring sentences in the document. though
the objective function used to train networks max-
imizes performance on the task of predicting sen-
tences from their neighbors, kiros et al. (2015)
do not evaluate directly on the ability of networks
to predict text; they instead demonstrate that the
intermediate low-dimensional vector embeddings
are useful for other tasks. we directly evaluate the
text predictions produced by such sentence-level
id56 encoder-decoder models, and measure their
utility for the task of predicting subsequent events.

we    nd that, on the task of predicting the text of
held-out sentences, the systems we train to operate
on the level of raw text generally outperform the
systems we train to predict text mediated by auto-
matically extracted event structures. on the other
hand, if we run an nlp pipeline on the automat-
ically generated text and extract structured events
from these predictions, we achieve prediction per-
formance roughly comparable to that of systems
trained to predict events directly. the difference
between word-level and event-level models on the
task of event prediction is marginal, indicating that
the task of predicting the next event, particularly
in an encoder-decoder setup, may not necessarily
need to be mediated by explicit event structures.
to our knowledge, this is the    rst effort to evalu-
ate sentence-level id56 language models directly
on the task of predicting document text. our re-
sults show that such models are useful for pre-
dicting missing information in text; and the fact
that they require no linguistic preprocessing makes
them more applicable to languages where quality
parsing and co-reference tools are not available.

2 background
2.1 statistical script learning
scripts, structured models of stereotypical se-
quences of events, date back to ai research from
in particular the seminal work of
the 1970s,
schank and abelson (1977).
in this concep-
tion, scripts are modeled as temporally ordered
sequences of symbolic structured events. these
models are nonprobabilistic and brittle, and pose
serious problems for automated learning.

in recent years, there has been a growing body
of research into statistical script
learning sys-
tems, which enable statistical id136 of im-
plicit events from text. chambers and jurafsky
(2008; 2009) describe a number of simple event
co-occurrence based systems which infer (verb,
dependency) pairs related to a particular discourse
entity. for example, given the text:

andrew wiles won the 2016 abel prize
for proving fermat   s last theorem,

such a system will ideally be able to infer novel
facts like (accept, subject) or (publish, subject) for
the entity andrew wiles, and facts like (accept, ob-
ject) for the entity abel prize. a number of other
systems inferring the same types of pair events
have been shown to provide superior performance

in modeling events in documents (jans et al., 2012;
rudinger et al., 2015).

pichotta and mooney (2014) give a co-
occurrence based script system that models and
infers more complex multi-argument events from
text. for example, in the above example, their
model would ideally be able to infer a single event
like accept(wiles, prize), as opposed to the two
simpler pairs from which it is composed. they
provide evidence that modeling and inferring more
complex multi-argument events also yields supe-
rior performance on the task of inferring simpler
(verb, dependency) pair events. these events are
constructed using only coreference information;
that is, the learned event co-occurrence models do
not directly incorporate noun information.

more recently, pichotta and mooney (2016)
presented an lstm-based script id136 model
which models and infers multi-argument events,
improving on previous systems on the task of in-
ferring verbs with arguments. this system can in-
corporate both noun and coreference information
about event arguments. we will use this multi-
argument event formulation (formalized below)
and compare lstm models using this event for-
mulation to lstm models using raw text.

2.2 recurrent neural networks
recurrent neural networks (id56s) are neu-
ral nets whose computation graphs have cycles.
in particular, id56 sequence models are id56s
which map a sequence of inputs x1, . . . , xt to a
sequence of outputs y1, . . . , yt via a learned la-
tent vector whose value at timestep t is a function
of its value at the previous timestep t     1.

the most basic id56 sequence models, so-
called    vanilla id56s    (elman, 1990), are de-
scribed by the following equations:

zt = f (wi,zxt + wz,zzt   1)
ot = g(wz,ozt)

where xt is the vector describing the input at time
t; zt is the vector giving the hidden state at time
t; ot is the vector giving the predicted output at
time t; f and g are element-wise nonlinear func-
tions (typically sigmoids, hyperbolic tangent, or
recti   ed linear units); and wi,z, wz,z, and wz,o
are learned matrices describing linear transforma-
tions. the recurrency in the computation graph
arises from the fact that zt is a function of zt   1.

the more complex long short-term mem-
ory (lstm) id56s (hochreiter and schmidhuber,

timestep   s word or character. there is also a
growing body of work on training id56 encoder-
decoder models for nlp problems. these systems
   rst encode the entire input into the network   s hid-
den state vector and then, in a second step, decode
the entire output from this vector (sutskever et al.,
2014; vinyals et al., 2015; serban et al., 2016).

sentence-level id56 language models, for ex-
ample the skip-thought vector system of kiros
et al. (2015), conceptually bridge these two ap-
proaches. whereas standard language models are
trained to predict the next token in the sequence of
tokens, these systems are explicitly trained to pre-
dict the next sentence in the sequence of sentences.
kiros et al. (2015) train an encoder-decoder model
to encode a sentence into a    xed-length vector
and subsequently decode both the following and
preceding sentence, using id149
(chung et al., 2014). in the present work, we train
an lstm model to predict a sentence   s succes-
sor, which is essentially the forward component
of the skip-thought system. kiros et al. (2015)
use the skip-thought system as a means of project-
ing sentences into low-dimensional vector embed-
dings, demonstrating the utility of these embed-
dings on a number of other tasks; in contrast, we
will use our trained sentence-level id56 language
model directly on the task its objective function
optimizes: predicting a sentence   s successor.

3 methodology
3.1 narrative cloze evaluation
the evaluation of id136-focused statistical
script systems is not straightforward. cham-
bers and jurafsky (2008) introduced the narrative
cloze evaluation, in which a single event is held
out from a document and systems are judged by
the ability to infer this held-out event given the
remaining events. this evaluation has been used
by a number of published script systems (cham-
bers and jurafsky, 2009; jans et al., 2012; pichotta
and mooney, 2014; rudinger et al., 2015). this
automated evaluation measures systems    ability to
model and predict events as they co-occur in text.
the exact de   nition of the narrative cloze
evaluation depends on the formulation of events
used in a script system. for example, cham-
bers and jurafsky (2008), jans et al. (2012), and
rudinger et al. (2015) evaluate id136 of held-
out (verb, dependency) pairs from documents; pi-
chotta and mooney (2014) evaluate id136 of

figure 1: long short-term memory unit at
timestep t. the four nonlinearity nodes (it, gt, ft,
and ot) all have, as inputs, xt and zt   1. small cir-
cles with dots are elementwise vector multiplica-
tions.

1997) have been shown to perform well on a wide
variety of nlp tasks (sutskever et al., 2014; her-
mann et al., 2015; vinyals et al., 2015, inter alia).
the lstm we use is described by:

it =    (wx,ixt + wz,izt   1 + bi)
ft =    (wx,f xt + wz,f zt   1 + bf )
ot =    (wx,oxt + wh,izt   1 + bo)
gt = tanh (wx,mxt + wz,mzt   1 + bg)
mt = ft     mt   1 + it     gt
zt = ot     tanh mt.

the model is depicted graphically in figure 1. the
memory vector mt is a function of both its previ-
ous value mt   1 and the input xt; the vector zt is
output both to any layers above the unit (which are
trained to predict the output values yt), and is addi-
tionally given as input to the lstm unit at the next
timestep t + 1. the w   ,    matrices and b    vectors
are learned model parameters, and u     v signi   es
element-wise multiplication.

2.3 sentence-level id56 language models
id56 sequence models have recently been shown
to be extremely effective for word-level and
character-level language models (mikolov et al.,
2011; jozefowicz et al., 2016). at each timestep,
these models take a word or character as input,
update a hidden state vector, and predict the next

ztotftitgtzt-1xtmtverbs with coreference information about multi-
ple arguments; and pichotta and mooney (2016)
evaluate id136 of verbs with noun informa-
tion about multiple arguments. in order to gather
human judgments of id136 quality, the latter
also learn an encoder-decoder lstm network for
transforming verbs and noun arguments into en-
glish text to present to annotators for evaluation.

we evaluate instead on the task of directly in-
ferring sequences of words. that is, instead of
de   ning the narrative cloze to be the evaluation
of predictions of held-out events, we de   ne the
task to be the evaluation of predictions of held-out
text; in this setup, predictions need not be medi-
ated by noisy, automatically-extracted events. to
evaluate inferred text against gold standard text,
we argue that the id7 metric (papineni et al.,
2002), commonly used to evaluate statistical ma-
chine translation systems, is a natural evaluation
metric. it is an id165-level analog to the event-
level narrative cloze evaluation: whereas the nar-
rative cloze evaluates a system on its ability to re-
construct events as they occur in documents, id7
evaluates a system on how well it reconstructs the
id165s.

this evaluation takes some inspiration from the
evaluation of neural encoder-decoder translation
models (sutskever et al., 2014; bahdanau et al.,
2015), which use similar architectures for the task
of machine translation. that is,
the task we
present can be thought of as    translating    a sen-
tence into its successor. while we do not claim
that id7 is necessarily the optimal way of eval-
uating text-level id136s, but we do claim that
it is a natural ngram-level analog to the narrative
cloze task on events.

if a model infers text, we may also evaluate it on
the task of inferring events by automatically ex-
tracting structured events from its output text (in
the same way as events are extracted from natural
text). this allows us to compare directly to previ-
ous event-based models on the task they are opti-
mized for, namely, predicting structured events.

3.2 models

statistical script systems take a sequence of events
from a document and infer additional events that
are statistically probable. exactly what constitutes
an event varies:
it may be a (verb, dependency)
pair inferred as relating to a particular discourse
entity (chambers and jurafsky, 2008; rudinger et

al., 2015), a simplex verb (chambers and juraf-
sky, 2009; orr et al., 2014), or a verb with multi-
ple arguments (pichotta and mooney, 2014).
in
the present work, we adopt a representation of
events as verbs with multiple arguments (balasub-
ramanian et al., 2013; pichotta and mooney, 2014;
modi and titov, 2014). formally, we de   ne an
event to be a variadic tuple (v, s, o, p   ), where v
is a verb, s is a noun standing in subject relation
to v, o is a noun standing as a direct object to v,
and p    denotes an arbitrary number of (pobj, prep)
pairs, with prep a preposition and pobj a noun re-
lated to the verb v via the preposition prep.1 any
argument except v may be null, indicating no noun
   lls that slot. for example, the text

napoleon sent the letter to josephine

represented by the
letter,

(sent,
would be
napoleon,
to)). we rep-
resent arguments by their grammatical head
words.

(josephine,

event

we evaluate on a number of different neural
models which differ in their input and output. all
models are lstm-based encoder-decoder models.
these models encode a sentence (either its events
or text) into a learned hidden vector state and then,
subsequently, decode that vector into its successor
sentence (either its events or its text).

the input

our general system architecture is as follows.
at each timestep t,
token is repre-
sented as a learned 100-dimensional embedding
vector (learned jointly with the other parameters
of the model), such that predictively similar words
should get similar embeddings. this embedding is
fed as input to the lstm unit (that is, it will be the
vector xt in section 2.2, the input to the lstm).
the output of the lstm unit (called zt in section
2.2) is then fed to a softmax layer via a learned
linear transformation.

during the encoding phase the network is not
trained to produce any output. during the decod-
ing phase the output is a one-hot representation
of the subsequent timestep   s input token (that is,
with a v -word vocabulary, the output will be a
v -dimensional vector with one 1 and v     1 ze-
ros). in this way, the network is trained to con-
sume an entire input sequence and, as a second
step, iteratively output the subsequent timestep   s

1this is essentially the event representation of pichotta
and mooney (2016), but whereas they limited events to hav-
ing a single prepositional phrase, we allow an arbitrary num-
ber, and we do not lemmatize words.

figure 2: encoder-decoder setup predicting the text    goodbye    from    hello   

input, which allows the prediction of full output
sequences. this setup is pictured diagrammati-
cally in figure 2, which gives an example of in-
put and output sequence for a token-level encoder-
decoder model, encoding the sentence    hello .   
and decoding the successor sentence    goodbye
.    note that we add beginning-of-sequence and
end-of-sequence pseudo-tokens to sentences. this
formulation allows a system to be trained which
can encode a sentence and then infer a successor
sentence by iteratively outputting next-input pre-
dictions until the </s> end-of-sentence pseudo-
token is predicted. we use different lstms for
encoding and decoding, as the dynamics of the two
stages need not be identical.

we notate the different systems as follows. let
s1 be the input sentence and s2 its successor sen-
tence. let t1 denote the sequence of raw tokens in
s1, and t2 the tokens of s2. further, let e1 and e2
be the sequence of structured events occurring in
s1 and s2, respectively (described in more detail in
section 4.1), and let e2[0] denote the    rst event of
e2. the different systems we compare are named
systematically as follows:

sentence   s tokens and decode its successor   s
tokens.

    the system t1 (cid:1) t2 is trained to encode a
    the system e1 (cid:1) e2 is trained to encode a
    the system e1 (cid:1) e2 (cid:1) t2 is trained to en-

sentence   s events and decode its successor   s
events.

code a sentence   s events, decode its succes-
sor   s events, and then encode the latter and
subsequently decode the successor   s text.

we will not explicitly enumerate all systems, but
other systems are de   ned analogously, with the

trained to encode x and subsequently decode y ,

schema x (cid:1) y describing a system which is
and x (cid:1) y (cid:1) z indicating a system which is
x(cid:1) y (cid:1) z, only x is provided as input.
x a(cid:1) y , which signi   es that the system is trained

trained to encode x, decode y , and subsequently
encode y and decode z. note that in a system

we also present results for systems of the form

to decode y from x with the addition of an atten-
tion mechanism. we use the attention mechanism
of vinyals et al. (2015).
in short, these models
have additional parameters which can learn soft
alignments between positions of encoded inputs
and positions in decoded outputs. attention mech-
anisms have recently been shown to be quite em-
pirically valuable in many complex sequence pre-
diction tasks. for more details on the model, see
vinyals et al. (2015).

figure 3 gives a diagrammatic representation
of the different system setups. text systems in-
fer successor text and, optionally, parse that text
and extract events from it; event sequences infer
successor events and, optionally, expand inferred
events into text.

note that the system t1 (cid:1) t2, in which both
ther, the system e1(cid:1) e2(cid:1) t2, which is trained to

the encoding and decoding steps operate on raw
text, is essentially a one-directional version of the
skip-thought system of kiros et al. (2015).2 fur-

take a sentence   s event sequence as input, predict
its successor   s events, and then predict its succes-
sor   s words, is comparable to the event id136
system of pichotta and mooney (2016). they use
an lstm sequence model of events in sequence

2the system of kiros et al. (2015), in addition to being
trained to predict the next sentence, also contains a backward-
directional id56 trained to predict a sentence   s predecessor;
we condition only on previous text. kiros et al. (2015) also
use id149 instead of lstm.

hello   </s>   <s>   lstm<gen><s><s>goodbyegoodbye</s></s>   inputhidden (zt)output (yt)encodingdecodinglstmlstmlstmlstmlstmlstmembedding (xt)figure 3: different system setups for modeling the two-sentence sequence    the dog chased the cat.   
followed by    the cat ran away.    the gray components inside dotted boxes are only present in some
systems.

for event id136, and optionally transform in-
ferred events to text using another lstm; we, on
the other hand, use an encoder/decoder setup to
infer text directly.

4 evaluation
4.1 experimental details
we train a number of lstm encoder-decoder net-
works which vary in their input and output. mod-
els are trained on english language wikipedia,
with 1% of the documents held out as a validation
set. our test set consists of 10,000 unseen sen-
tences (from articles in neither the training nor val-
idation set). we train models with batch stochas-
tic id119 with momentum, minimizing
the cross-id178 error of output predictions. all
models are implemented in tensorflow (abadi et
al., 2015). we use a vocabulary of the 50,000
most frequent tokens, replacing all other tokens
with an out-of-vocabulary pseudo-token. learned
id27s are 100-dimensional, and the la-
tent lstm vector is 500-dimensional. to extract
events from text, we use the stanford dependency
parser (de marneffe et al., 2006; socher et al.,
2013). we use the moses toolkit (koehn et al.,
2007) to calculate id7.3

we evaluate the task of predicting held-out text
with three metrics. the    rst metric is id7, which
is standard id7 (the geometric mean of modi   ed
1-, 2-, 3-, and 4-gram precision against a gold stan-
dard, multiplied by a brevity penalty which pe-
nalizes short candidates). the second metric we
present, id7-bp, is id7 without the brevity

3via the script multi-id7.pl.

penalty: in the task of predicting successor sen-
tences, depending on predictions    end use, on-
topic brevity is not necessarily undesirable. eval-
uations are over top system id136s (that is, de-
coding is done by taking the argmax). finally, we
also present values for unigram precision (1g p),
one of the components of id7.

we also evaluate on the task of predicting held-
out verb-argument events, either directly or via in-
ferred text. we use two id74 for this
task. first, the accuracy metric measures the per-
centage of a system   s most con   dent guesses that
are totally correct. that is, for each held-out event,
a system makes its single most con   dent guess for
that event, and we calculate the total percentage of
such guesses which are totally correct. some au-
thors (e.g. jans et al. (2012), pichotta and mooney
(2016)) present results on the    recall at k    met-
ric, judging gold-standard recall against a list of
top k event id136s; this metric is equivalent to
   recall at 1.    this is quite a stringent metric, as an
id136 is only counted correct if the verb and all
arguments are correct. to relax this requirement,
we also present results on what we call the partial
credit metric, which is the percentage of held-out
event components identical to the respective com-
ponents in a system   s top id136.4

4.2 experimental evaluation
table 1 gives the results of evaluating predicted
successor sentence text against the gold standard

using id7. the baseline system t1 (cid:1) t1 sim-

4this metric was used in pichotta and mooney (2014),
but there it was called accuracy. in the present work, we use
   accuracy    only to mean recall at 1.

t1encode/decode   the dog chased the cat.      the cat ran away.   ran_away(cat)t2e2parsee1encode/decodee2t2encode/decodechased(dog, cat)ran_away(cat)   the cat ran away.   text representationevent representationsystem

t1(cid:1) t1
e1(cid:1) e2(cid:1) t2
a(cid:1) e2(cid:1) t2
t1(cid:1) t2
a(cid:1) t2

e1

t1

id7 id7-bp
1.88
0.34
0.30
5.20
4.68

1.88
0.66
0.39
7.84
8.09

1g p
22.6
19.9
15.8
30.9
32.2

system
most common

e1(cid:1) e2[0]
a(cid:1) e2[0]
t1(cid:1) t2(cid:1) e2[0]
a(cid:1) t2(cid:1) e2[0]

e1

t1

accuracy partial credit
0.2
2.3
2.2
2.0
2.0

26.5
26.7
25.6
30.3
27.7

table 1: successor text predictions evaluated with
id7.

table 2: next event prediction accuracy (numbers
are percentages: maximum value is 100).

ply reproduces the input sentence as its own suc-
cessor.5 below this are systems which make
predictions from event information, with systems
which make predictions from raw text under-

neath. transformations written x a(cid:1) y are, recall,
model e1(cid:1) e2(cid:1) t2 (and comparable model with

note,    rst, that the text-level models outperform
other models on id7. in particular, the two-step

encoder-decoder lstms with attention.

attention) which    rst predicts successor events and
then, as a separate step, expands these events into
text, performs quite poorly. this is perhaps due to
the fact that the translation from text to events is
lossy, so reconstructing raw sentence tokens is not
straightforward.

the id7-bp scores, which are id7 without
the brevity penalty, are noticeably higher in the
text-level models than the raw id7 scores. this
is in part because these models seem to produce
shorter sentences, as illustrated below in section
4.4.

text or event

the attention mechanism does not obviously
bene   t either
level prediction
encoder-decoder models. this could be because
there is not an obvious alignment structure be-
tween contiguous spans of raw text (or events) in
natural documents.

these results provide evidence that, if the nar-
rative cloze task is de   ned to evaluate prediction
of held-out text from a document, then sentence-
level id56 language models provide superior per-
formance to id56 models operating at the event
level.
in other words, linguistic pre-processing
does not obviously bene   t encoder-decoder mod-
els trained to predict succeeding text.

table 2 gives results on the task of predicting
the next verb with its nominal arguments; that is,
whereas table 1 gave results on a text analog to the
narrative cloze evaluation (id7), table 2 gives

5   t1(cid:1) t1    is minor abuse of notation, as the system is not

an encoder/decoder but a simple identity function.

in the t1 (cid:1) t2 (cid:1) e2[0] system (and the

results on the verb-with-arguments prediction ver-
sion.
comparable system with attention), events are ex-
tracted from automatically generated text by pars-
ing output text and applying the same event ex-
tractor to this parse used to extract events from
raw text.6 the row labeled most common in ta-
ble 2 gives performance for the baseline system
which always guesses the most common event in
the training set.

the lstm models trained to directly predict
events are roughly comparable to systems which
operate on raw text, performing slightly worse on
accuracy and slightly better when taking partial
credit into account. as with the previous com-
parisons with id7, the attention mechanism does
not provide an obvious improvement when decod-
ing id136s, perhaps, again, because the event
id136 problem lacks a clear alignment struc-
ture.

these systems infer their most probable guesses
of e2[0], the    rst event in the succeeding sentence.
in order for a system prediction to be counted as
correct, it must have the correct strings for gram-
matical head words of all components of the cor-
rect event. note also that we judge only against a
system   s single most con   dent prediction (as op-
posed to some prior work (jans et al., 2012; pi-
chotta and mooney, 2014) which takes the top
k predictions   the numbers presented here are
therefore noticeably lower). we do this mainly
for computational reasons: namely, a id125
over a full sentence   s text would be quite compu-
tationally expensive.

4.3 adding additional context
the results given above are for systems which en-
code information about one sentence and decode
6this is also a minor abuse of notation, as the second
transformation uses a statistical parser rather than an en-
coder/decoder.

information about its successor. this is within
the spirit of the skip-gram system of kiros et al.
(2015), but we may wish to condition on more
of the document. to investigate this, we per-
form an experiment varying the number of previ-
ous sentences input during the encoding step of

t1 (cid:1) t2 text-level models without attention. we

train three different models, which take either one,
three, or    ve sentences as input, respectively, and
are trained to output the successor sentence.

on the task of verb-argument prediction in ta-

ble 2, the difference between t1 (cid:1) t2 and e1 (cid:1)

e2[0] is fairly marginal. this raises the general
question of how much explicit syntactic analysis
is required for the task of event id136, partic-
ularly in the encoder/decoder setup. these results
provide evidence that a sentence-level id56 lan-
guage model which operates on raw tokens can
predict what comes next in a document as well or
nearly as well as an event-mediated script model.

num prev sents
1
3
5

id7 id7-bp
5.80
5.82
6.83

8.59
9.35
6.83

1g p
29.4
31.2
21.4

table 3: varying the amount of context in text-
level models.    num prev sents    is the number of
previous sentences supplied during encoding.

table 3 gives the results of running these mod-
els on 10,000 sentences from the validation set. as
can be seen, in the training setup we investigate,
more additional context sentences have a mixed
effect, depending on the metric. this is perhaps
due in part to the fact that we kept hyperparam-
eters    xed between experiments, and a different
hyperparameter regime would bene   t predictions
from longer input sequences. more investigation
could prove fruitful.

4.4 qualitative analysis
figure 4 gives some example automatic next-
sentence text predictions, along with the input sen-
tence and the gold-standard next sentence. note
that gold-standard successor sentences frequently
introduce new details not obviously inferrable
from previous text. top system predictions, on
the other hand, are frequently fairly short. this
is likely due part to the fact that the cross-id178
loss does not directly penalize short sentences and
part to the fact that many details in gold-standard
successor text are inherently dif   cult to predict.

4.5 discussion
the general low magnitude of the id7 scores
presented in table 1, especially in comparison to
the scores typically reported in machine trans-
lation results, indicates the dif   culty of the task.
in open-domain text, a sentence is typically not
straightforwardly predictable from preceding text;
if it were, it would likely not be stated.

5 future work

there are a number of further extensions to this
work. first, in this work (and, more generally,
id4 research),
though
generated text is evaluated using id7, systems
are optimized for per-token cross-id178 error,
which is a different objective (luong et al. (2016)
give an example of a system which improves
cross-id178 error but reduces id7 score in the
id4 context). finding dif-
ferentiable objective functions that more directly
target more complex id74 like id7
is an interesting future research direction.

relatedly,

though we argue that id7 is a
natural token-sequence-level analog to the verb-
argument formulation of the narrative cloze task,
it is not obviously the best metric for evaluat-
ing id136s of text, and comparing these auto-
mated metrics with human judgments is an im-
portant direction of future work. pichotta and
mooney (2016) present results on crowdsourced
human evaluation of script id136s that could
be repeated for our id56 models.

though we focus here on forward-direction
models predicting successor sentences, bidirec-
tional encoder-decoder models, which predict sen-
tences from both previous and subsequent text, are
another interesting future research direction.

6 related work

the use of scripts in ai dates back to the 1970s
(minsky, 1974; schank and abelson, 1977); in
this conception, scripts were composed of com-
plex events with no probabilistic semantics, which
were dif   cult to learn automatically.
in recent
years, a growing body of research has investigated
learning probabilistic co-occurrence models with
simpler events. chambers and jurafsky (2008)
propose a model of co-occurrence of (verb, de-
pendency) pairs, which can be used to infer such

input:
gold:

as of october 1 , 2008 , (cid:104)oov(cid:105) changed its company name to panasonic corporation.
(cid:104)oov(cid:105) products that were branded    national    in japan are currently marketed under the    pana-
sonic    brand.
the company   s name is now (cid:104)oov(cid:105).
white died two days after curly bill shot him.
before dying, white testi   ed that he thought the pistol had accidentally discharged and that he
did not believe that curly bill shot him on purpose.

predicted:
input:
gold:
predicted: he was buried at (cid:104)oov(cid:105) cemetery.
input:
gold:

the foundation stone was laid in 1867.
the members of the predominantly irish working class parish managed to save   700 towards
construction, a large sum at the time.
the (cid:104)oov(cid:105) was founded in the early 20th century.
soldiers arrive to tell him that (cid:104)oov(cid:105) has been seen in camp and they call for his capture and
death.
(cid:104)oov(cid:105) agrees .
(cid:104)oov(cid:105) is killed by the (cid:104)oov(cid:105).

predicted:
input:

gold:
predicted:

figure 4: sample next-sentence text predictions. (cid:104)oov(cid:105) is the out-of-vocabulary pseudo-token, which
frequently replaces proper names.

pairs from documents; jans et al. (2012) give a
superior model in the same general framework.
chambers and jurafsky (2009) give a method of
generalizing from single sequences of pair events
to collections of such sequences. rudinger et al.
(2015) apply a discriminative language model to
the (verb, dependency) sequence modeling task,
raising the question of to what extent event in-
ference can be performed with standard language
models applied to event sequences. pichotta and
mooney (2014) describe a method of learning a
co-occurrence based model of verbs with multiple
coreference-based entity arguments.

there is a body of related work focused on
learning models of co-occurring events to au-
tomatically induce templates of complex events
comprising multiple verbs and arguments, aimed
ultimately at maximizing coherency of templates
(chambers, 2013; cheung et al., 2013; balasub-
ramanian et al., 2013). ferraro and van durme
(2016) give a model integrating various levels of
event information of increasing abstraction, evalu-
ating both on coherence of induced templates and
log-likelihood of predictions of held-out events.
mcintyre and lapata (2010) describe a system that
learns a model of co-occurring events and uses this
model to automatically generate stories via a ge-
netic algorithm.

there have been a number of recent published
neural models for various event- and discourse-
related tasks. pichotta and mooney (2016) show
that an lstm event sequence model outper-
forms previous co-occurrence methods for pre-
dicting verbs with arguments. granroth-wilding
and clark (2016) describe a feedforward neu-

ral network which composes verbs and argu-
ments into low-dimensional vectors, evaluating on
a multiple-choice version of the narrative cloze
task. modi and titov (2014) describe a feedfor-
ward network which is trained to predict event or-
derings. kiros et al. (2015) give a method of em-
bedding sentences in low-dimensional space such
that embeddings are predictive of neighboring sen-
tences. li et al. (2014) and ji and eisenstein
(2015), use id56s for discourse parsing; liu et
al. (2016) use a convolutional neural network for
implicit discourse relation classi   cation.

7 conclusion

we have given what we believe to be the    rst
systematic evaluation of sentence-level id56 lan-
guage models on the task of predicting held-out
document text. we have found that models oper-
ating on raw text perform roughly comparably to
identical models operating on predicate-argument
event structures when predicting the latter, and that
text models provide superior predictions of raw
text. this provides evidence that, for the task of
held-out event prediction, encoder/decoder mod-
els mediated by automatically extracted events
may not be learning appreciably more structure
than systems trained on raw tokens alone.

acknowledgments

thanks to stephen roller, amelia harrison, and
the ut nlp group for their help and feedback.
thanks also to the anonymous reviewers for their
very helpful suggestions. this research was sup-
ported in part by the darpa deft program un-
der afrl grant fa8750-13-2-0026.

references
[abadi et al.2015] mart    n abadi, ashish agarwal, paul
barham, eugene brevdo, zhifeng chen, craig
citro, greg s. corrado, andy davis, jeffrey dean,
matthieu devin, sanjay ghemawat, ian goodfel-
low, andrew harp, geoffrey irving, michael is-
ard, yangqing jia, rafal jozefowicz, lukasz kaiser,
manjunath kudlur, josh levenberg, dan man  e, ra-
jat monga, sherry moore, derek murray, chris
olah, mike schuster, jonathon shlens, benoit
steiner, ilya sutskever, kunal talwar, paul tucker,
vincent vanhoucke, vijay vasudevan, fernanda
vi  egas, oriol vinyals, pete warden, martin watten-
berg, martin wicke, yuan yu, and xiaoqiang zheng.
2015. tensorflow: large-scale machine learning
on heterogeneous systems. software available from
tensor   ow.org.

[bahdanau et al.2015] dzmitry bahdanau, kyunghyun
cho, and yoshua bengio. 2015. neural machine
translation by jointly learning to align and translate.
in proceedings of the 2015 international conference
on learning representations (iclr 2015).

[balasubramanian et al.2013] niranjan

balasubra-
manian, stephen soderland, mausam, and oren
etzioni. 2013. generating coherent event schemas
at scale. in proceedings of the 2013 conference on
empirical methods in natural language processing
(emnlp-2013).

[chambers and jurafsky2008] nathanael

chambers
and daniel jurafsky. 2008. unsupervised learn-
in proceedings
ing of narrative event chains.
of
the association
for computational linguistics (acl-08), pages
789   797.

the 46th annual meeting of

[chambers and jurafsky2009] nathanael

chambers
and dan jurafsky. 2009. unsupervised learning
of narrative schemas and their participants.
in
proceedings of the 47th annual meeting of the as-
sociation for computational linguistics (acl-09),
pages 602   610.

[chambers2013] nathanael chambers. 2013. event
schema induction with a probabilistic entity-driven
model. in proceedings of the 2013 conference on
empirical methods in natural language processing
(emnlp-2013).

[cheung et al.2013] jackie chi kit cheung, hoifung
poon, and lucy vanderwende. 2013. probabilistic
frame induction. in proceedings of the 2013 con-
ference of the north american chapter of the asso-
ciation for computational linguistics: human lan-
guage technologies (naacl-13).

[chung et al.2014] junyoung chung, caglar gulcehre,
kyunghyun cho, and yoshua bengio. 2014. em-
pirical evaluation of gated recurrent neural networks
in nips deep learning
on sequence modeling.
workshop.

[de marneffe et al.2006] marie-catherine de marn-
effe, bill maccartney, and christopher d. manning.
2006. generating typed dependency parses from
in proceedings of the 5th
phrase structure parses.
international conference on language resources
& evaluation (lrec-2006), volume 6, pages 449   
454.

[elman1990] jeffrey l. elman. 1990. finding structure

in time. cognitive science, 14:179   211.

[ferraro and van durme2016] francis

and
benjamin van durme. 2016. a uni   ed bayesian
in pro-
model of scripts, frames and language.
ceedings of the 30th aaai conference on arti   cial
intelligence (aaai-16).

ferraro

[granroth-wilding and clark2016] mark

granroth-
wilding and stephen clark. 2016. what happens
next? event prediction using a compositional neural
in proceedings of the 30th aaai
network model.
conference on arti   cial intelligence (aaai-16).

[hermann et al.2015] karl moritz hermann, tom  a  s
ko  cisk`y, edward grefenstette, lasse espeholt, will
kay, mustafa suleyman, and phil blunsom. 2015.
teaching machines to read and comprehend. in pro-
ceedings of the 29th annual conference on neural
information processing systems (nips-15).

[hochreiter and schmidhuber1997] sepp hochreiter
and j  urgen schmidhuber. 1997. long short-term
memory. neural computation, 9(8):1735   1780.

[jans et al.2012] bram jans, steven bethard,

ivan
vuli  c, and marie francine moens. 2012. skip n-
grams and ranking functions for predicting script
in proceedings of the 13th conference of
events.
the european chapter of the association for com-
putational linguistics (eacl-12), pages 336   344.

[ji and eisenstein2015] yangfeng ji and jacob eisen-
stein. 2015. one vector is not enough: entity-
augmented id65 for discourse re-
lations. transactions of the association for compu-
tational linguistics (tacl).

[jozefowicz et al.2016] rafal

oriol
and
vinyals, mike schuster, noam shazeer,
yonghui wu. 2016. exploring the limits of lan-
guage modeling. arxiv preprint arxiv:1602.02410.

jozefowicz,

[kiros et al.2015] ryan kiros, yukun zhu, ruslan
salakhutdinov, richard s. zemel, antonio torralba,
raquel urtasun, and sanja fidler.
2015. skip-
thought vectors. in proceedings of the 29th annual
conference on neural information processing sys-
tems (nips-15).

[koehn et al.2007] philipp koehn, hieu hoang,
alexandra birch, chris callison-burch, marcello
federico, nicola bertoldi, brooke cowan, wade
shen, christine moran, richard zens, chris dyer,
ondrej bojar, alexandra constantin, and evan
2007. moses: open source toolkit for
herbst.
in proceedings of
id151.

the 45th annual meeting of the association for
computational linguistics (acl-07) companion
volume: proceedings of
the demo and poster
sessions, pages 177   180, prague, czech republic.

[li et al.2014] jiwei li, rumeng li, and eduard hovy.
2014. recursive deep models for discourse pars-
in proceedings of the 2014 conference on
ing.
empirical methods in natural language processing
(emnlp), pages 2061   2069, october.

[liu et al.2016] yang liu, sujian li, xiaodong zhang,
and zhifang sui. 2016.
implicit discourse rela-
tion classi   cation via multi-task neural networks. in
proceedings of the 30th aaai conference on arti   -
cial intelligence (aaai-16).

[luong et al.2016] minh-thang luong, quoc v. le,
ilya sutskever, oriol vinyals, and lukasz kaiser.
2016. multi-task sequence to sequence learning. in
proceedings of the 4th international conference on
learning representations (iclr-16).

2010.

[mcintyre and lapata2010] neil mcintyre and mirella
lapata.
plot induction and evolutionary
in proceedings of the
search for story generation.
48th annual meeting of the association for compu-
tational linguistics (acl-10), pages 1562   1572.

[mikolov et al.2011] tomas mikolov, anoop deoras,
stefan kombrink, lukas burget, and jan cernock`y.
2011. empirical evaluation and combination of ad-
vanced id38 techniques. in proceed-
ings of the 12th annual conference of the inter-
national speech communication association 2011
(interspeech 2011), pages 605   608.

[minsky1974] marvin minsky. 1974. a framework for
representing knowledge. technical report, mit-ai
laboratory.

[modi and titov2014] ashutosh modi and ivan titov.
inducing neural models of script knowl-
2014.
in proceedings of the eighteenth confer-
edge.
ence on computational natural language learning
(conll-2014), baltimore, md, usa.

[orr et al.2014] j walker orr, prasad tadepalli, janard-
han rao doppa, xiaoli fern, and thomas g diet-
terich. 2014. learning scripts as hidden markov
in proceedings of the 28th aaai confer-
models.
ence on arti   cial intelligence (aaai-14).

[papineni et al.2002] kishore papineni, salim roukos,
todd ward, and wei-jing zhu. 2002. id7: a
method for automatic evaluation of machine trans-
in proceedings of the 40th annual meet-
lation.
ing of the association for computational linguistics
(acl-02), pages 311   318.

[pichotta and mooney2014] karl pichotta and ray-
mond j. mooney. 2014. statistical script learn-
ing with multi-argument events. in proceedings of
the 14th conference of the european chapter of the
association for computational linguistics (eacl
2014), pages 220   229.

[pichotta and mooney2016] karl pichotta and ray-
mond j. mooney. 2016. learning statistical scripts
with lstm recurrent neural networks. in proceed-
ings of the 30th aaai conference on arti   cial intel-
ligence (aaai-16).

[rudinger et al.2015] rachel rudinger, pushpendre
rastogi, francis ferraro, and benjamin van durme.
2015. script induction as id38.
in
proceedings of the 2015 conference on empirical
methods in natural language processing (emnlp-
15).

[schank and abelson1977] roger c. schank

and
robert p. abelson. 1977. scripts, plans, goals and
understanding: an inquiry into human knowledge
structures. lawrence erlbaum and associates.

[serban et al.2016] iulian v. serban, alessandro sor-
doni, yoshua bengio, aaron courville, and joelle
pineau. 2016. building end-to-end dialogue sys-
tems using generative hierarchical neural network
in proceedings of the 30th aaai confer-
models.
ence on arti   cial intelligence (aaai-16).

[socher et al.2013] richard

socher,

john bauer,
christopher d. manning, and andrew y. ng.
2013. parsing with compositional vector grammars.
in proceedings of
the 51st annual meeting of
the association for computational linguistics
(acl-13).

[sutskever et al.2014] ilya sutskever, oriol vinyals,
and quoc v. le. 2014. sequence to sequence learn-
ing with neural networks. in proceedings of the 28th
annual conference on neural information process-
ing systems (nips-14), pages 3104   3112.

[vinyals et al.2015] oriol vinyals,   ukasz kaiser,
terry koo, slav petrov, ilya sutskever, and geof-
frey hinton. 2015. grammar as a foreign language.
in proceedings of the 29th annual conference on
neural information processing systems (nips-15),
pages 2755   2763.

a supplemental material
our wikipedia dump from which the training, de-
velopment, and test sets are constructed is from
jan 2, 2014. we parse text using version 3.3.1 of
the stanford corenlp system. we use a vocab
consisting of the 50,000 most common tokens, re-
placing all others with an out-of-vocabulary pseu-
dotoken. we train using batch stochastic gradi-
ent descent with momentum with a batch size of
10 sequences, using an initial learning rate of 0.1,
damping the learning rate by 0.99 any time the
previous hundred updates    average test error is
greater than any of the average losses in the previ-
ous ten groups of hundred updates. our momen-
tum parameter is 0.95. our embedding vectors are
100-dimensional, and our lstm hidden state is

500-dimensional. we train all models for 300k
batch updates (with the exception of the models
compared in   4.3, all of which we train for 150k
batch updates, as training is appreciably slower
with longer input sequences). training takes ap-
proximately 36 hours on an nvidia titan black
gpu.

