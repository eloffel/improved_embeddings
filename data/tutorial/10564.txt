neural language correction with character-based attention

ziang xie, anand avati, naveen arivazhagan, dan jurafsky, andrew y. ng

{zxie,avati,naveen67,ang}@cs.stanford.edu, jurafsky@stanford.edu

computer science department, stanford university

6
1
0
2

 
r
a

 

m
1
3

 
 
]
l
c
.
s
c
[
 
 

1
v
7
2
7
9
0

.

3
0
6
1
:
v
i
x
r
a

abstract

natural language correction has the po-
tential to help language learners improve
their writing skills. while approaches
with separate classi   ers for different er-
ror types have high precision,
they do
not    exibly handle errors such as redun-
dancy or non-idiomatic phrasing. on the
other hand, word and phrase-based ma-
chine translation methods are not designed
to cope with orthographic errors, and have
recently been outpaced by neural mod-
els. motivated by these issues, we present
a neural network-based approach to lan-
guage correction. the core component
of our method is an encoder-decoder re-
current neural network with an attention
mechanism. by operating at the charac-
ter level, the network avoids the problem
of out-of-vocabulary words. we illustrate
the    exibility of our approach on dataset of
noisy, user-generated text collected from
an english learner forum. when com-
bined with a language model, our method
achieves a state-of-the-art f0.5-score on
the conll 2014 shared task. we further
illustrate that training the network on addi-
tional data with synthesized errors can im-
prove performance.

introduction

1
systems that provide writing feedback have great
potential to assist language learners as well as na-
tive writers. although tools such as spell check-
ers have been useful, detecting and    xing errors
in natural language, even at the sentence level, re-
mains far from solved.

much of the prior research focuses solely on
training classi   ers for a small number of error

figure 1: illustration of the encoder-decoder neu-
ral network model with two encoder hidden layers
and one decoder hidden layer. character-level rea-
soning allows handling of misspellings and oovs.

types, such as article or preposition errors (han
et al., 2006; rozovskaya and roth, 2010). more
recent methods that consider a broader range of
error classes often rely on language models to
score id165s or id151
approaches (ng et al., 2014). these methods,
however, do not    exibly handle orthographic er-
rors in spelling, capitalization, and punctuation.

as a motivating example, consider the follow-
ing incorrect sentence:    i visitted tokyo on nov
2003. :)   . several errors in this sentence illustrate
the dif   culties in the language correction setting.
first, the sentence contains a misspelling, visitted,
an issue for systems with    xed vocabularies. sec-
ond, the sentence contains rare words such as 2003
as well as punctuation forming an emoticon :), is-
sues that may require special handling. finally,
the use of the preposition on instead of in when
not referring to a speci   c day is non-idiomatic,
demonstrating the complex patterns that must be

heloc<sos>hellohello<eos>captured to suggest good corrections. in hopes of
capturing such complex phenomena, we use a neu-
ral network-based method.

building on recent work in id38
and machine translation, we propose an approach
to natural language error correction based on an
encoder-decoder recurrent neural network trained
on a parallel corpus containing    good    and    bad   
sentences (figure 1). when combined with a lan-
guage model, our system obtains state-of-the-art
results on the conll 2014 shared task, beating
systems using id151 sys-
tems, rule-based methods, and task-speci   c fea-
tures. our system naturally handles orthographic
errors and rare words, and can    exibly correct a
variety of error types. we further    nd that aug-
menting the network training data with sentences
containing synthesized errors can result in signi   -
cant gains in performance.

2 model architecture

given an input sentence x that we wish to map
to an output sentence y, we seek to model
p (y|x). our model consists of an encoder and
a decoder (sutskever et al., 2014; cho et al.,
2014). the encoder maps the input sentence to
a higher-level representation with a pyramidal bi-
directional id56 architecture similar to that of
chan et al. (2015). the decoder is also a recurrent
neural network that uses a content-based attention
mechanism (bahdanau et al., 2014) to attend to
the encoded representation and generate the out-
put sentence one character at a time.

2.1 character-level reasoning
our neural network model operates at the charac-
ter level, in the encoder as well as the decoder.
this is for two reasons, as illustrated by our moti-
vating example. first, we do not assume that the
inputs are spell-checked and often    nd spelling
errors in the sentences written by english learn-
ers in the datasets we consider. second, word-
level neural mt models with a    xed vocabulary
are poorly suited to handle oovs such as multi-
digit numbers, emoticons, and web addresses
(graves, 2013), though recent work has proposed
workarounds for this problem (luong et al., 2014).
despite longer sequences in the character-based
model, optimization does not seem to be a signif-
icant issue, since the network often only needs to
copy characters from source to target.

2.2 encoder network
given the input vector xt, the forward, backward,
and combined activations of the jth hidden layer
are computed as:

t   1, c(j   1)
t+1, c(j   1)

t

t

),

),

f (j)
t = gru(f (j)
t = gru(b(j)
b(j)
h(j)
t = f (j)
t + b(j)

t

where gru denotes the gated recurrent unit func-
tion, which, similar to long short-term memory
units (lstms), have shown to improve the per-
formance of id56s (cho et al., 2014; hochreiter
and schmidhuber, 1997).

the input from the previous layer input c(0)

t =

(cid:18)

xt and

c(j)
t = tanh

(cid:104)

(cid:105)(cid:62)

(cid:19)

w (j)
pyr

h(j   1)

2t

, h(j   1)

2t+1

+ b(j)
pyr

for j > 0. the weight matrix wpyr thus re-
duces the number of hidden states for each addi-
tional hidden layer by half, and hence the encoder
has a pyramid structure. at the    nal hidden layer
we obtain the encoded representation c consisting

of(cid:6)t /2n   1(cid:7) hidden states, where n denotes the

number of hidden layers.

2.3 decoder network
the decoder network is recurrent neural network
using id149 with m hidden layers.
after the    nal hidden layer the network also con-
ditions on the encoded representation c using an
attention mechanism.

at the jth decoder layer the hidden activations

are computed as

d(j)
t = gru(d(j)

t   1, d(j   1)

t

),

with the output of the    nal hidden layer d(m )
then
being used as part of the content-based attention
mechanism similar to that proposed by bahdanau
et al. (2014):

t

utk =   1(d(m )

)(cid:62)  2(ck)

t

utk(cid:80)
(cid:88)

j utj
  tjcj

  tk =

at =

j

where   1 and   2 represent feedforward af   ne
transforms followed by a tanh nonlinearity. the

weighted sum of the encoded hidden states at is
then concatenated with d(m )
, and passed through
another af   ne transform followed by a relu non-
linearity before the    nal softmax output layer.

t

the id168 is the cross-id178 loss per

time step summed over the output sequence y:

l(x, y) =     t(cid:88)

log p (yt|x, y<t).

t=1

note that during training the ground truth yt   1 is
fed into the network to predict yt, while at test time
the most probable   yt   1 is used. figure 1 illustrates
the model architecture.

2.4 attention and pyramid structure
in preliminary experiments, we found that hav-
ing an attention mechanism was crucial for the
model to be able to generate outputs character-
by-character that did not diverge from the input.
while character-based approaches have not at-
tained state-of-the-art performance on large scale
translation and id38 tasks, in this
setting the decoder network simply needs to copy
input tokens during the majority of time steps.

although character-level models reduce the
softmax over the vocabulary at each time step over
word-level models, they also increase the total
number of time-steps of the id56. the content-
based attention mechanism must then consider all
the encoder hidden states c1:t at every step of
the decoder. thus we use a pyramid architec-
ture, which reduces computational complexity (as
shown by chan et al. (2015)). for longer batches,
we observe over a 2   speedup for the same num-
ber of parameters when using a 400 hidden unit
per layer model with 3 hidden layers (4   reduc-
tion of steps in c).
3 decoding
while it is simpler to integrate a language model
by using it as a re-ranker, here the language model
probabilities are combined with the encoder-
decoder network through id125. this is
possible because the attention mechanism in the
decoder network prevents the decoded output from
straying too far from the source sentence.

3.1 language model
to model the distribution

t(cid:89)

t=1

plm(y1:t ) =

p (yt|y<t)

(1)

we build a kneser-ney smoothed 5-gram language
model on a subset of the common crawl reposi-
tory1 collected during 2012 and 2013. after prun-
ing, we obtain 2.2 billion id165s. to build
and query the model, we use the kenlm toolkit
(hea   eld et al., 2013).

3.2 id125
for id136 we use a id125 decoder com-
bining the neural network and the language model
likelihood. similar to hannun et al. (2014), at step
k, we rank the hypotheses on the beam using the
score
sk(y1:k|x) = log pnn(y1:k|x) +    log plm(y1:k)

where the hyper-parameter    determines how
much the language model is weighted. to avoid
penalizing longer hypotheses, we additionally nor-
malize scores by the number of words in the hy-
pothesis |y|. since decoding is done at the charac-
ter level, the language model id203 plm(  ) is
only incorporated after a space or end-of-sentence
symbol is encountered.

3.3 controlling precision
for many error correction tasks, precision is em-
phasized more than recall; for users, an incorrect
suggestion is worse than a missed mistake.

in order to    lter spurious edits, we train an
edit classi   er to classify edits as correct or not.
we run our decoder on uncorrected sentences
from our training data to generate candidate cor-
rected sentences. we then align the candidate sen-
tences to the uncorrected sentences by minimizing
the word-level levenshtein distance between each
candidate and uncorrected sentence. contiguous
segments that do not match are extracted as pro-
posed edits2. we repeat this alignment and edit
extraction process for the gold corrected sentences
and the uncorrected sentences to obtain the gold
edits.    good    edits are de   ned as the intersection
of the proposed and gold edits and    bad    edits are
de   ned as the proposed edits not contained in the
gold edits. we compute edit features and train a
multilayer id88 binary classi   er on the ex-
tracted edits to predict the id203 of an edit
being correct. the features computed on an edit
s     t are:
1http://commoncrawl.org
2note this is an approximation and cannot distinguish side-
by-side edits as separate edits.

    id153 features: normalized word and
character lengths of s and t, normalized word
and character insertions, deletions, and sub-
stitutions between s and t.

    embedding features:

sum of 100 dimen-
sional glove (pennington et al., 2014) vec-
tors of words in s and t, glove vectors of left
and right context words in s.

in order to    lter incorrect edits, we only ac-
cept edits whose predicted id203 exceeds a
threshold pmin. this assumes that classi   er proba-
bilities are reasonably calibrated (niculescu-mizil
and caruana, 2005). edit classi   cation improves
precision with a small drop in recall; most impor-
tantly, it helps    lter edits where the decoder net-
work misbehaves and t deviates wildly from s.
4 experiments
we perform experiments using two datasets of cor-
rected sentences written by english learners. the
   rst is the lang-8 corpus, which contains erro-
neous sentences and their corrected versions col-
lected from a social language learner forum (tajiri
et al., 2012). due to the online user-generated set-
ting, the lang-8 data is noisy, with sentences of-
ten containing misspellings, emoticons, and other
loose punctuation. sample sentences are show in
table 4.

the other dataset we consider comes from the
conll 2013 and 2014 shared tasks, which con-
tain about 60k sentences from essays written by
english learners with corrections and error type
annotations. we use the larger lang-8 corpus pri-
marily to train our network, then evaluate on the
conll shared tasks.

4.1 training and decoding details
our pyramidal encoder has 3 layers, resulting in
a factor 4 reduction in the sequence length at its
output, and our decoder id56 has 3 layers as well.
both the encoder and decoder use a hidden size
of 400 and id149 (grus), which
along with lstms (hochreiter and schmidhuber,
1997) have been shown to be easier to optimize
and preserve information over many time steps
better than vanilla recurrent networks.
the
printing ascii character set and special (cid:104)sos(cid:105),
(cid:104)eos(cid:105), and (cid:104)unk(cid:105) symbols indicating the start-of-
sentence, end-of-sentence, and unknown symbols,
respectively.

our vocabulary includes 98 characters:

method
no edits
spell check
id56
id56 + lm

test id7
59.54
58.91
61.63
61.70

table 1: performance on lang-8 test set. adding
the language model results in a negligible increase
in performance, illustrating the dif   culty of the
user-generated forum setting.

to train the encoder-decoder network we use
the adam optimizer (kingma and ba, 2014) with
a learning rate of 0.0003, default decay rates   1
and   2, and a minibatch size of 128. we train for
up to 40 epochs, selecting the model with the low-
est perplexity on the lang-8 development set. we
found that using dropout (srivastava et al., 2014)
at a rate of 0.15 on the non-recurrent connections
(pham et al., 2014) helped reduce perplexity. we
use uniform initialization of the weight matrices
in the range [   0.1, 0.1] and zero initialization of
biases.

decoding parameter    and edit classi   er thresh-
old pmin were chosen to maximize performance on
the development sets of the datasets described. all
results were obtained using a beam width of 64,
which seemed to provide a good trade-off between
speed and performance.

4.2 noisy data: lang-8 corpus
we use the train-test split provided by the lang-
8 corpus of learner english (tajiri et al., 2012),
which contains 100k and 1k entries with about
550k and 5k parallel sentences, respectively. we
also split 5k sentences from the training set to use
as a separate development set for model and pa-
rameter selection.

since we do not have gold annotations that dis-
tinguish side-by-side edits as separate edits, we re-
port id7 score3 using just the encoder-decoder
network as well as when combined with the n-
gram language model (table 1). note that since
there may be multiple ways to correct an error
and some errors are left uncorrected, the baseline
of using uncorrected sentences is more dif   cult to
improve upon than it may initially appear. as an-
other baseline we apply the top suggestions from

3using case-sensitive multi-id7.perl from moses.

method
p
id56
42.96
id56 aug
49.30
id56 + lm
43.27
id56 aug + lm
46.94
id56 aug + lm + ec 51.38

r
6.27
10.10
15.14
17.11
15.83

f0.5
19.81
27.75
31.55
34.81
35.45

table 2: development set performance. ec de-
notes edit classi   cation (section 3.3), and    aug   
indicates data augmentation was used.

method
amu
cuui
camb
susanto (2014)
ours (no ec)
ours (+ ec)
ours (a1)
ours (a2)
a1 (a2)
a2 (a1)

p
41.62
41.78
39.71
53.55
45.86
49.24
32.56
44.04
50.47
37.14

r
21.40
24.88
30.10
19.14
26.40
23.77
14.76
14.83
32.29
45.38

f0.5
35.01
36.79
37.33
39.39
39.97
40.56
26.23
31.59
45.36
38.54

table 3: conll 2014 test set performance. we
compare to the 3 best conll 2014 submissions
which used combinations of mt, lm ranking, and
error type-speci   c classi   ers. we report f -score
against both and single annotators, as well as each
annotator scored against the other as a human ceil-
ing. a1 and a2 denote annotators 1 and 2.

a spell checker with default con   gurations4. we
suspect due to proper nouns, acronyms, and incon-
sistent capitalization conventions in lang-8, how-
ever, this actually decreased id7 slightly. to the
best of our knowledge, no other work has reported
results on this challenging task.

4.3 main results: conll shared tasks

description for our second set of experiments
we evaluate on the conll 2014 shared task on
grammatical error correction (ng et al., 2013; ng
et al., 2014). we use the revised conll 2013 test
data with all error types as a development set for
parameter and model selection with the 2014 test
data as our test set. the 2013 test data contains
1381 sentences with 3470 errors in total, and the

4hunspell v1.3.4, https://hunspell.github.io

2014 test data contains 1312 sentences with 3331
errors. the conll 2014 training set contains 57k
sentences with the corresponding gold edits by a
single annotator. the 2013 test set is also only
labeled by a single annotator, while the 2014 test
set has two separate annotators.

we use the nus maxmatch scorer (dahlmeier
and ng, 2012) v3.2 in order to compute the preci-
sion (p ), recall (r), and f -score for our corrected
sentences. since precision is considered more im-
portant than recall for the error correction task,
f0.5 score is reported as in the conll 2014 chal-
lenge. we compare to the top submissions in the
2014 challenge as well as the method by susanto
(2014), which combines 3 of the weaker systems
to achieve the state-of-the-art result. all results
reported on the 2014 test set exclude alternative
corrections submitted by the participants.
synthesizing errors
in addition to the lang-8
training data, we include the conll 2014 train-
ing data in order to train the encoder-decoder net-
work. following prior work, we additionally ex-
plore synthesizing additional sentences containing
errors using the conll 2014 training data (felice
and yuan, 2014; rozovskaya et al., 2012). our
data augmentation procedure generates synthetic
errors for two of the most common error types in
the development set: article or determiner errors
(artordet) and noun number errors (nn). similar
to felice and yuan (2014), we    rst collect error
distribution statistics from the conll 2014 train-
ing data. for artordet errors, we estimate the
id203 that an article or determiner is deleted,
replaced with another determiner, or inserted be-
fore the start of a noun phrase. for nn errors, we
estimate the id203 that it is replaced with its
singular or plural form. to obtain sentence parses
we use the stanford corenlp toolkit (manning et
al., 2014). example synthesized errors:

    artordet: they will generate and brain-

storm the innovative ideas.

    nn: identi   cation is becoming more impor-

tant in our society     societies.

errors are introduced independently according to
their estimated probabilities by iterating over the
words in the training sentences, and we produce
two corrupted versions of each training sentence
whenever possible. the original lang-8 training
data contains 550k sentence pairs. adding the

conll 2014 training data results in about 610k
sentence pairs, and after data augmentation we ob-
tain a total of 720k sentence pairs. we examine
the bene   ts of synthesizing errors in section 5.
results
results for the development set are
shown in table 2, and results for the conll 2014
test set in table 3. on the conll 2014 test set,
which contains the full set of 28 error types, our
method achieves a state-of-the-art result, beating
all systems from the 2014 challenge as well as
a system combination method (susanto, 2014).
methods from the 2014 challenge used statisti-
cal machine translation, language model ranking,
rule-based approaches, and error type-speci   c fea-
tures and classi   ers, often in combination. sys-
tem descriptions for participating teams are given
in ng et al. (2014).

5 discussion

qualitative analysis we present examples of
correct and incorrect edits on lang-8 development
set in table 4 and table 5. despite operating at the
character level, the network is occasionally able
to perform rearrangements of words to form com-
mon phrases (e.g. i and my roommate     my room-
mate and i) and insert and delete words where
appropriate. on the other hand, the network can
also sometimes mangle rare words (moodysson    
moodysnot) and fail to split common words miss-
ing a separating space (withthe     withth), sug-
gesting that while common patterns are captured,
the network lacks semantic understanding.

figure 2: f -score vs. length of input sentence on
development set. only bins with 10 or more sen-
tences included.

performance breakdown while the encoder-
decoder network can itself produce modi   ca-
tions, on less noisy datasets such as the conll

type
artordet
wci
nn
preposition
word form

count r no aug r aug
29.14
1.61
51.00
7.93
19.73

20.08
2.30
31.50
13.01
26.90

717
434
400
315
223

table 6: conll development set recall for 5 most
frequent error categories with and without training
on data with synthesized article/determiner and
noun number errors. wci denotes wrong colloca-
tion/idiom errors.

challenge datasets a language model can greatly
improve performance.
increasing the language
model weight    tends to improves recall at the ex-
pense of precision. on the other hand, using edit
classi   cation to    lter spurious edits increases pre-
cision, often with smaller drops in recall. we do
not observe a trend of decreasing f -score for a
wide range of sentence lengths (figure 2), likely
due to the attention mechanism, which helps to
prevent the decoded output from diverging from
the input sentence.

we report the inter-annotator agreement in ta-
ble 3, which gives a possible bound on the f -score
for this task.
effects of data augmentation we obtain
promising improvements using data augmenta-
tion, boosting f0.5-score on the development set
from 31.55 to 34.81. for the two error types where
we synthesize data (article or determiner and noun
number) we observe signi   cant increases in recall,
as shown in table 6. the same phenomenon has
been observed by rozovskaya et al. (2012). in-
terestingly, the recall of other error types (see ng
et al. (2014) for descriptions) decreases. we sur-
mise this is because the additional training data
contains only artordet and nn errors, and hence
the network is encouraged to simply copy the out-
put when those error types are not present. we
hope synthesizing data with a variety of other error
types may    x this issue and improve performance.

challenging error types we now examine a
few illustrative error types from the conll chal-
lenges that originally motivated our approach: or-
thographic (mec), redundancy (rloc-), and id-
iomatic errors (wci). since the 2013 challenge

5101520253035404550wordlength0.00.10.20.30.40.50.6f0.5original
it    s heavy rain today

this is the    rst entry ! : d

1
2 everyone wants to be success .
3 on the 3 weeks , i learned many things .
4
5 help me getting english skill , please .
6 at last night , the 24th of june 2010 was big
night for the japanese national team and heaps
of fans .
i start to learning english again .
i went to beijin in china for four days in this
week .

7
8

proposed
it    s raining heavily today
everyone wants to be successful .
in the last 3 weeks , i learned many things .
this is my    rst entry ! : d
help me improve my english skills , please .
last night , the 24th of june 2010 was a big
night for the japanese national team and heaps
of fans .
i am starting to learn english again .
i went to beijing in china four days this week .

9 after a long day , i and my roommate usually

sit down , drink coffee and listen to music .

10 do you know a toeic ?

after a long day , my roommate and i usually
sit down , drink coffee and listen to music .
do you know about toeic ?

table 4: sample edits from our lang-8 development set using only the character-based encoder-decoder
network. note that the model is able to handle misspellings (beijin) as well as rare words (toeic) and
emoticons (: d).

original

i want to big size bag

1 broke my heart
2
3 this is typical japanese male hobit
4

i    m so sorry to miss lukas moodysson    s lijia
4-ever .

5 the match is the rockets withthe bulls .

proposed
i broke my heart
i want to be a big size bag
this is a typical japanese male hobby
i    m so sorry to miss lukas moodysnot lijia
4-ever .
the match is the rockets withth bulls .

table 5: sample incorrect and ambiguous edits, again using just the encoder-decoder network.

did not score these error types, we compare our re-
call to those of participants in the 2014 challenge
(ng et al., 2014).5 note that systems only predict
corrected sentences and not error types, and hence
precision is not compared. we use the results from
our    nal system, including both data augmentation
and edit classi   cation. some examples of these er-
ror types are shown in table 7.

    mec: we obtain a recall of 37.17 on the mec
error type, higher than all the 2014 challenge
teams besides one team (rac) that used rule-
based methods to attain 43.51 recall. the
word/phrase-based translation and language
modeling approaches do not seem to perform
as well for    xing orthographic errors.

    rloc-: redundancy is dif   cult to capture
5the team that placed 9th overall did not disclose their
method; thus we only compare to the 12 remaining teams.

using just rule-based approaches and classi-
   ers; our approach obtains 17.47 recall which
places second among the 12 teams. the top
system obtains 20.16 recall using a combina-
tion mt, lm, and rule-based method.

    wci: although there are 340 collocation er-
rors, all teams performed poorly on this cat-
egory. our recall places 3rd behind two
teams (amu and camb) whose methods
both used an mt system. again, this demon-
strates the dif   culty of capturing whether a
sentence is idiomatic through only classi   ers
and rule-based methods.

we note that our system obtains signi   cantly
higher precision than any of the top 10 teams in the
2014 challenge (49.24 vs. 41.78), which comes at
the expense of recall.

spelling, punctuation,
capitalization, etc.

type description
mec

original
another identi   cation is
implanting rfid chips ...
. . . it seems that our freedom of
doing things is being invaded.
wci wrong collocation/idiom every coin has its two sides.

rloc- redundancy

proposed
another identi   cation is
implanting rfid chips ...
. . . it seems that our freedom
is being invaded.
every coin has two sides.

table 7: examples of the aforementioned challenging error types that our system    xed.

limitations a key limitation of our method as
well as most other translation-based methods is
that it is trained on just parallel sentences, despite
some errors requiring information about the sur-
rounding text to make the proper correction. even
within individual sentences, when longer context
is needed to make a correction (for example in
many subject-verb agreement errors), the perfor-
mance is hit-and-miss. the edits introduced by the
system tend to be fairly local.

other errors illustrate the need for natural lan-
guage understanding, for example in table 5 the
correction broke my heart     i broke my heart and
i want to big size bag     i want to be a big size bag.
finally, although end-to-end approaches have the
potential to    x a wide variety of errors, it is not
straightforward to then classify the types of errors
being made. thus the system cannot easily pro-
vide error-speci   c feedback.

6 related work
our work primarily builds on prior work on train-
ing encoder-decoder id56s for machine transla-
tion (kalchbrenner and blunsom, 2013; sutskever
et al., 2014; cho et al., 2014). the attention mech-
anism, which allows the decoder network to copy
parts of the source sentence and cope with long in-
puts, is based on the content-based attention mech-
anism introduced by bahdanau et al. (2014), and
the overall network architecture is based on that
described by chan et al. (2015). our model is also
inspired by character-level models as proposed by
graves (2013). more recent work has applied
character-level models to machine translation and
id103 as well, suggesting that it may
be applicable to many other tasks that involve the
problem of oovs (ling et al., 2015; maas et al.,
2015; chan et al., 2015).

treating grammatical error correction as a sta-
tistical machine translation problem is an old idea;
the method of mapping    bad    to    good    sentences

was used by many of the teams in the conll 2014
challenge (felice et al., 2014; junczys-dowmunt
and grundkiewicz, 2014). the work of felice et
al. (2014) achieved the best f0.5-score of 37.33
in that year   s challenge using a combination of
rule-based, language-model ranking, and statisti-
cal machine translation techniques. many other
teams used a language model for re-ranking hy-
potheses as well. other teams participating in
the conll 2014 challenge used techniques rang-
ing from rule-based systems to type-speci   c clas-
si   ers, as well as combinations of the two (ro-
zovskaya et al., 2014; lee and lee, 2014). the
rule-based systems often focus on only a subset of
the error types. the previous state of the art was
achieved by susanto (2014) using the system com-
bination method proposed by hea   eld and lavie
(2010) to combine three weaker systems.

finally, our work uses data collected and shared
through the generous efforts of the teams behind
the conll and lang-8 datasets (mizumoto et al.,
2011; mizumoto et al., 2012; ng et al., 2013; ng
et al., 2014). prior work has also proposed data
augmentation for the language correction task (fe-
lice and yuan, 2014; rozovskaya et al., 2012).

conclusion
we present a neural network-based model for per-
forming language correction. our system is able
correct errors on noisy data collected from an en-
glish learner forum and attains state-of-the-art per-
formance on the conll 2014 challenge dataset
of annotated essays. key to our approach is the
use of a character-based model with an attention
mechanism, which allows for orthographic errors
to be captured and avoids the oov problem suf-
fered by word-based id4
methods. we hope the generality of this approach
will also allow it to be applied to other tasks that
must deal with noisy text, such as in the online
user-generated setting.

acknowledgments
we thank kenneth hea   eld, jiwei li, thang lu-
ong, peng qi, and anshul samar for helpful dis-
cussions. we additionally thank the developers of
theano (bergstra et al., 2010). some gpus used
in this work were donated by nvidia corpora-
tion. zx was supported by an ndseg fellow-
ship. this project was funded in part by darpa
muse award fa8750-15-c-0242 afrl/rikf.

references
[bahdanau et al.2014] dzmitry bahdanau, kyunghyun
cho, and yoshua bengio. 2014. neural machine
translation by jointly learning to align and translate.
arxiv preprint arxiv:1409.0473.

[bergstra et al.2010] james bergstra, olivier breuleux,
fr  ed  eric bastien, pascal lamblin, razvan pascanu,
guillaume desjardins, joseph turian, david warde-
farley, and yoshua bengio. 2010. theano: a cpu
and gpu math expression compiler. in proceedings
of the python for scienti   c computing conference
(scipy).

[chan et al.2015] william chan, navdeep

jaitly,
quoc v le, and oriol vinyals. 2015. listen, attend
and spell. arxiv preprint arxiv:1508.01211.

[cho et al.2014] kyunghyun

cho,

bart
van merri  enboer, caglar gulcehre, dzmitry
bahdanau, fethi bougares, holger schwenk,
learning phrase
and yoshua bengio.
representations using id56 encoder-decoder
for
arxiv preprint
id151.
arxiv:1406.1078.

2014.

[dahlmeier and ng2012] daniel

and
better evaluation for
in north american
the association for computational

hwee tou ng.
grammatical error correction.
chapter of
linguistics (naacl).

dahlmeier

2012.

[felice and yuan2014] mariano felice

and zheng
generating arti   cial errors for

yuan.
grammatical error correction. in eacl.

2014.

[felice et al.2014] mariano felice, zheng yuan, istein
e. andersen, helen yannakoudakis, and ekaterina
kochmar. 2014. grammatical error correction us-
ing hybrid systems and type    ltering. in in proceed-
ings of the eighteenth conference on computational
natural language learning: shared task.

[graves2013] alex graves.

quences with recurrent neural networks.
preprint arxiv:1308.0850.

2013. generating se-
arxiv

[hannun et al.2014] awni hannun, carl case, jared
casper, bryan catanzaro, greg diamos, et al. 2014.
deep speech: scaling up end-to-end speech recog-
nition. arxiv preprint arxiv:1412.5567.

[hea   eld and lavie2010] kenneth hea   eld and alon
lavie. 2010. cmu multi-engine machine trans-
in proceedings of the joint
lation for wmt 2010.
fifth workshop on id151
and metricsmatr, wmt    10.

[hea   eld et al.2013] k. hea   eld, i. pouzyrevsky, j. h.
2013. scalable modi   ed
in acl-

clark, and p. koehn.
kneser-ney language model estimation.
hlt, pages 690   696, so   a, bulgaria.

[hochreiter and schmidhuber1997] sepp hochreiter
and j  urgen schmidhuber. 1997. long short-term
memory. neural computation.

[junczys-dowmunt and grundkiewicz2014] marcin

junczys-dowmunt
and roman grundkiewicz.
2014. the amu system in the conll-2014 shared
task: grammatical error correction by data-intensive
and feature-rich id151.
in
proceedings of the eighteenth conference on com-
putational natural language learning:
shared
task.

[kalchbrenner and blunsom2013] nal kalchbrenner
and phil blunsom. 2013. recurrent continuous
in empirical methods in
translation models.
natural language processing (emnlp).

[kingma and ba2014] diederik kingma and jimmy
ba. 2014. adam: a method for stochastic opti-
mization. arxiv preprint arxiv:1412.6980.

[lee and lee2014] kyusong lee and gary geunbae
lee. 2014. postech grammatical error correction
in proceed-
system in the conll-2014 shared task.
ings of the eighteenth conference on computational
natural language learning: shared task.

[ling et al.2015] wang ling, isabel trancoso, chris
dyer, and alan w black.
character-
based id4. arxiv preprint
arxiv:1511.04586.

2015.

[luong et al.2014] minh-thang luong, ilya sutskever,
quoc v le, oriol vinyals, and wojciech zaremba.
addressing the rare word problem
2014.
arxiv preprint
in id4.
arxiv:1410.8206.

[maas et al.2015] andrew l. maas, ziang xie, dan ju-
rafsky, and andrew y. ng. 2015. lexicon-free
conversational id103 with neural net-
in proceedings the north american chap-
works.
ter of the association for computational linguistics
(naacl).

[han et al.2006] na-rae han, martin chodorow, and
claudia leakcock. 2006. detecting errors in en-
glish article usage by non-native speakers. natural
language engineering.

[manning et al.2014] christopher d. manning, mihai
surdeanu, john bauer, jenny finkel, steven j.
bethard, and david mcclosky. 2014. the stan-
ford corenlp natural language processing toolkit.

[srivastava et al.2014] nitish srivastava, geoffrey hin-
ton, alex krizhevsky, ilya sutskever, and ruslan
salakhutdinov. 2014. dropout: a simple way to
prevent neural networks from over   tting. the jour-
nal of machine learning research.

[susanto2014] raymond hendy susanto. 2014. sys-
tems combination for grammatical error correction.
in empirical methods in natural language process-
ing (emnlp).

[sutskever et al.2014] ilya sutskever, oriol vinyals,
and quoc v le. 2014. sequence to sequence learn-
in neural information
ing with neural networks.
processing systems (nips).

[tajiri et al.2012] toshikazu tajiri, mamoru komachi,
and yuji matsumoto. 2012. tense and aspect er-
ror correction for esl learners using global context.
in association for computational linguistics: short
papers.

in association for computational linguistics (acl)
system demonstrations.

[mizumoto et al.2011] tomoya mizumoto, mamoru
komachi, masaaki nagata, and yuji matsumoto.
2011. mining revision log of language learning sns
for automated japanese error correction of second
in international joint confer-
language learners.
ence on natural language processing (ijcnlp).

[mizumoto et al.2012] tomoya mizumoto,

yuta
hayashibe, mamoru komachi, masaaki nagata,
and yuji matsuomto. 2012. the effect of learner
corpus size in grammatical error correction of
in international conference on
esl writings.
computational linguistics.

[ng et al.2013] hwee tou ng, siew mei wu, yuanbin
wu, christian hadiwinoto, and joel tetreault. 2013.
the conll-2013 shared task on grammatical error
correction.

[ng et al.2014] hwee tou ng, siew mei wu, ted
briscoe, christian hadiwinoto, raymond hendy
susanto, and christopher bryant.
the
conll-2014 shared task on grammatical error cor-
rection.

2014.

[niculescu-mizil and caruana2005] alexandru

niculescu-mizil and rich caruana. 2005. predict-
ing good probabilities with supervised learning.
in international conference on machine learning
(icml).

[pennington et al.2014] jeffrey pennington, richard
socher, and christopher d. manning. 2014. glove:
in em-
global vectors for word representation.
pirical methods in natural language processing
(emnlp).

[pham et al.2014] vu pham, th  eodore bluche, christo-
pher kermorvant, and j  er  ome louradour.
2014.
dropout
improves recurrent neural networks for
handwriting recognition. in frontiers in handwrit-
ing recognition (icfhr), 2014 14th international
conference on.

[rozovskaya and roth2010] alla rozovskaya and dan
roth. 2010. generating confusion sets for context-
in proceedings of the
sensitive error correction.
2010 conference on empirical methods in natural
language (emnlp).

[rozovskaya et al.2012] alla rozovskaya, mark sam-
mons, and dan roth. 2012. the ui system in the
in pro-
hoo 2012 shared task on error correction.
ceedings of the seventh workshop on building edu-
cational applications using nlp.

[rozovskaya et al.2014] alla rozovskaya, kai-wei
chang, mark sammons, dan roth, and nizar
habash.
2014. the illinois-columbia system in
in proceedings of the
the conll-2014 shared task.
eighteenth conference on computational natural
language learning: shared task.

