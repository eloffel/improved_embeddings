6
1
0
2

 

g
u
a
9
1

 

 
 
]

v
c
.
s
c
[
 
 

3
v
9
5
7
6
0

.

1
0
6
1
:
v
i
x
r
a

pixel recurrent neural networks

a  aron van den oord
nal kalchbrenner
koray kavukcuoglu

google deepmind

avdnoord@google.com
nalk@google.com
korayk@google.com

abstract

occluded

completions

original

modeling the distribution of natural images is
a landmark problem in unsupervised learning.
this task requires an image model that is at
once expressive,
tractable and scalable. we
present a deep neural network that sequentially
predicts the pixels in an image along the two
spatial dimensions. our method models the dis-
crete id203 of the raw pixel values and en-
codes the complete set of dependencies in the
image. architectural novelties include fast two-
dimensional recurrent layers and an effective use
of residual connections in deep recurrent net-
works. we achieve log-likelihood scores on nat-
ural images that are considerably better than the
previous state of the art. our main results also
provide benchmarks on the diverse id163
dataset. samples generated from the model ap-
pear crisp, varied and globally coherent.

1. introduction
generative image modeling is a central problem in unsu-
pervised learning. probabilistic density models can be used
for a wide variety of tasks that range from image compres-
sion and forms of reconstruction such as image inpainting
(e.g., see figure 1) and deblurring, to generation of new
images. when the model is conditioned on external infor-
mation, possible applications also include creating images
based on text descriptions or simulating future frames in a
planning task. one of the great advantages in generative
modeling is that there are practically endless amounts of
image data available to learn from. however, because im-
ages are high dimensional and highly structured, estimating
the distribution of natural images is extremely challenging.
one of the most important obstacles in generative mod-

proceedings of the 33 rd international conference on machine
learning, new york, ny, usa, 2016. jmlr: w&cp volume
48. copyright 2016 by the author(s).

figure 1. image completions sampled from a pixelid56.

eling is building complex and expressive models that are
also tractable and scalable. this trade-off has resulted in
a large variety of generative models, each having their ad-
vantages. most work focuses on stochastic latent variable
models such as vae   s (rezende et al., 2014; kingma &
welling, 2013) that aim to extract meaningful representa-
tions, but often come with an intractable id136 step that
can hinder their performance.
one effective approach to tractably model a joint distribu-
tion of the pixels in the image is to cast it as a product of
conditional distributions; this approach has been adopted in
autoregressive models such as nade (larochelle & mur-
ray, 2011) and fully visible neural networks (neal, 1992;
bengio & bengio, 2000). the factorization turns the joint
modeling problem into a sequence problem, where one
learns to predict the next pixel given all the previously gen-
erated pixels. but to model the highly nonlinear and long-
range correlations between pixels and the complex condi-
tional distributions that result, a highly expressive sequence
model is necessary.
recurrent neural networks (id56) are powerful models
that offer a compact, shared parametrization of a series of
conditional distributions. id56s have been shown to excel
at hard sequence problems ranging from handwriting gen-
eration (graves, 2013), to character prediction (sutskever
et al., 2011) and to machine translation (kalchbrenner &
blunsom, 2013). a two-dimensional id56 has produced
very promising results in modeling grayscale images and
textures (theis & bethge, 2015).
in this paper we advance two-dimensional id56s and ap-

pixel recurrent neural networks

the contributions of the paper are as follows. in section
3 we design two types of pixelid56s corresponding to the
two types of lstm layers; we describe the purely convo-
lutional pixelid98 that is our fastest architecture; and we
design a multi-scale version of the pixelid56. in section 5
we show the relative bene   ts of using the discrete softmax
distribution in our models and of adopting residual connec-
tions for the lstm layers. next we test the models on
mnist and on cifar-10 and show that they obtain log-
likelihood scores that are considerably better than previous
results. we also provide results for the large-scale ima-
genet dataset resized to both 32    32 and 64    64 pixels;
to our knowledge likelihood values from generative models
have not previously been reported on this dataset. finally,
we give a qualitative evaluation of the samples generated
from the pixelid56s.

2. model
our aim is to estimate a distribution over natural images
that can be used to tractably compute the likelihood of im-
ages and to generate new ones. the network scans the im-
age one row at a time and one pixel at a time within each
row. for each pixel it predicts the conditional distribution
over the possible pixel values given the scanned context.
figure 2 illustrates this process. the joint distribution over
the image pixels is factorized into a product of conditional
distributions. the parameters used in the predictions are
shared across all pixel positions in the image.
to capture the generation process, theis & bethge (2015)
propose to use a two-dimensional lstm network (graves
& schmidhuber, 2009) that starts at the top left pixel and
proceeds towards the bottom right pixel. the advantage of
the lstm network is that it effectively handles long-range
dependencies that are central to object and scene under-
standing. the two-dimensional structure ensures that the
signals are well propagated both in the left-to-right and top-
to-bottom directions.
in this section we    rst focus on the form of the distribution,
whereas the next section will be devoted to describing the
architectural innovations inside pixelid56.

2.1. generating an image pixel by pixel

the goal is to assign a id203 p(x) to each image x
formed of n   n pixels. we can write the image x as a one-
dimensional sequence x1, ..., xn2 where pixels are taken
from the image row by row. to estimate the joint distri-
bution p(x) we write it as the product of the conditional
distributions over the pixels:

n2(cid:89)

i=1

p(x) =

p(xi|x1, ..., xi   1)

(1)

figure 2. left: to generate pixel xi one conditions on all the pre-
viously generated pixels left and above of xi. center: to gen-
erate a pixel in the multi-scale case we can also condition on the
subsampled image pixels (in light blue). right: diagram of the
connectivity inside a masked convolution. in the    rst layer, each
of the rgb channels is connected to previous channels and to the
context, but is not connected to itself. in subsequent layers, the
channels are also connected to themselves.

ply them to large-scale modeling of natural images. the
resulting pixelid56s are composed of up to twelve, fast
two-dimensional long short-term memory (lstm) lay-
ers. these layers use lstm units in their state (hochreiter
& schmidhuber, 1997; graves & schmidhuber, 2009) and
adopt a convolution to compute at once all the states along
one of the spatial dimensions of the data. we design two
types of these layers. the    rst type is the row lstm layer
where the convolution is applied along each row; a similar
technique is described in (stollenga et al., 2015). the sec-
ond type is the diagonal bilstm layer where the convolu-
tion is applied in a novel fashion along the diagonals of the
image. the networks also incorporate residual connections
(he et al., 2015) around lstm layers; we observe that this
helps with training of the pixelid56 for up to twelve layers
of depth.
we also consider a second, simpli   ed architecture which
shares the same core components as the pixelid56. we ob-
serve that convolutional neural networks (id98) can also
be used as sequence model with a    xed dependency range,
by using masked convolutions. the pixelid98 architec-
ture is a fully convolutional network of    fteen layers that
preserves the spatial resolution of its input throughout the
layers and outputs a conditional distribution at each loca-
tion.
both pixelid56 and pixelid98 capture the full generality
of pixel inter-dependencies without introducing indepen-
dence assumptions as in e.g., latent variable models. the
dependencies are also maintained between the rgb color
values within each individual pixel. furthermore, in con-
trast to previous approaches that model the pixels as con-
tinuous values (e.g., theis & bethge (2015); gregor et al.
(2014)), we model the pixels as discrete values using a
multinomial distribution implemented with a simple soft-
max layer. we observe that this approach gives both repre-
sentational and training advantages for our models.

x1xixnxn2context xn2multi-scale contextx1xixnxn2rgbrgbrgbmaskamaskbcontextpixel recurrent neural networks

the value p(xi|x1, ..., xi   1) is the id203 of the i-th
pixel xi given all the previous pixels x1, ..., xi   1. the gen-
eration proceeds row by row and pixel by pixel. figure 2
(left) illustrates the conditioning scheme.
each pixel xi is in turn jointly determined by three values,
one for each of the color channels red, green and blue
(rgb). we rewrite the distribution p(xi|x<i) as the fol-
lowing product:
p(xi,r|x<i)p(xi,g|x<i, xi,r)p(xi,b|x<i, xi,r, xi,g) (2)
each of the colors is thus conditioned on the other channels
as well as on all the previously generated pixels.
note that during training and evaluation the distributions
over the pixel values are computed in parallel, while the
generation of an image is sequential.

2.2. pixels as discrete variables

previous approaches use a continuous distribution for the
values of the pixels in the image (e.g. theis & bethge
(2015); uria et al. (2014)). by contrast we model p(x) as
a discrete distribution, with every conditional distribution
in equation 2 being a multinomial that is modeled with a
softmax layer. each channel variable xi,    simply takes one
of 256 distinct values. the discrete distribution is represen-
tationally simple and has the advantage of being arbitrarily
multimodal without prior on the shape (see fig. 6). exper-
imentally we also    nd the discrete distribution to be easy
to learn and to produce better performance compared to a
continuous distribution (section 5).

3. pixel recurrent neural networks
in this section we describe the architectural components
that compose the pixelid56. in sections 3.1 and 3.2, we
describe the two types of lstm layers that use convolu-
tions to compute at once the states along one of the spatial
dimensions. in section 3.3 we describe how to incorporate
residual connections to improve the training of a pixelid56
with many lstm layers. in section 3.4 we describe the
softmax layer that computes the discrete joint distribution
of the colors and the masking technique that ensures the
proper conditioning scheme. in section 3.5 we describe the
pixelid98 architecture. finally in section 3.6 we describe
the multi-scale architecture.

3.1. row lstm

the row lstm is a unidirectional layer that processes
the image row by row from top to bottom computing fea-
tures for a whole row at once; the computation is per-
formed with a one-dimensional convolution. for a pixel
xi the layer captures a roughly triangular context above the
pixel as shown in figure 4 (center). the kernel of the one-

figure 3. in the diagonal bilstm, to allow for parallelization
along the diagonals, the input map is skewed by offseting each
row by one position with respect to the previous row. when the
spatial layer is computed left to right and column by column, the
output map is shifted back into the original size. the convolution
uses a kernel of size 2    1.

dimensional convolution has size k    1 where k     3; the
larger the value of k the broader the context that is captured.
the weight sharing in the convolution ensures translation
invariance of the computed features along each row.
the computation proceeds as follows. an lstm layer has
an input-to-state component and a recurrent state-to-state
component that together determine the four gates inside the
lstm core. to enhance parallelization in the row lstm
the input-to-state component is    rst computed for the entire
two-dimensional input map; for this a k    1 convolution is
used to follow the row-wise orientation of the lstm itself.
the convolution is masked to include only the valid context
(see section 3.4) and produces a tensor of size 4h    n    n,
representing the four gate vectors for each position in the
input map, where h is the number of output feature maps.
to compute one step of the state-to-state component of
the lstm layer, one is given the previous hidden and cell
states hi   1 and ci   1, each of size h    n    1. the new
hidden and cell states hi, ci are obtained as follows:

[oi, fi, ii, gi] =   (kss (cid:126) hi   1 + kis (cid:126) xi)

ci = fi (cid:12) ci   1 + ii (cid:12) gi
hi = oi (cid:12) tanh(ci)

(3)

where xi of size h    n    1 is row i of the input map, and
(cid:126) represents the convolution operation and (cid:12) the element-
wise multiplication. the weights kss and kis are the
kernel weights for the state-to-state and the input-to-state
components, where the latter is precomputed as described
above. in the case of the output, forget and input gates oi,
fi and ii, the activation    is the logistic sigmoid function,
whereas for the content gate gi,    is the tanh function.
each step computes at once the new state for an entire row
of the input map. because the row lstm has a triangular
receptive    eld (figure 4), it is unable to capture the entire
available context.

pixel recurrent neural networks

3.3. residual connections

we train pixelid56s of up to twelve layers of depth. as
a means to both increase convergence speed and propagate
signals more directly through the network, we deploy resid-
ual connections (he et al., 2015) from one lstm layer to
the next. figure 5 shows a diagram of the residual blocks.
the input map to the pixelid56 lstm layer has 2h fea-
tures. the input-to-state component reduces the number of
features by producing h features per gate. after applying
the recurrent layer, the output map is upsampled back to 2h
features per position via a 1    1 convolution and the input
map is added to the output map. this method is related to
previous approaches that use gating along the depth of the
recurrent network (kalchbrenner et al., 2015; zhang et al.,
2016), but has the advantage of not requiring additional
gates. apart from residual connections, one can also use
learnable skip connections from each layer to the output.
in the experiments we evaluate the relative effectiveness of
residual and layer-to-output skip connections.

figure 5. residual blocks for a pixelid98 (left) and pixelid56s.

3.4. masked convolution

the h features for each input position at every layer in the
network are split into three parts, each corresponding to
one of the rgb channels. when predicting the r chan-
nel for the current pixel xi, only the generated pixels left
and above of xi can be used as context. when predicting
the g channel, the value of the r channel can also be used
as context in addition to the previously generated pixels.
likewise, for the b channel, the values of both the r and
g channels can be used. to restrict connections in the net-
work to these dependencies, we apply a mask to the input-
to-state convolutions and to other purely convolutional lay-
ers in a pixelid56.
we use two types of masks that we indicate with mask a
and mask b, as shown in figure 2 (right). mask a is ap-
plied only to the    rst convolutional layer in a pixelid56
and restricts the connections to those neighboring pixels
and to those colors in the current pixels that have already
been predicted. on the other hand, mask b is applied to
all the subsequent input-to-state convolutional transitions
and relaxes the restrictions of mask a by also allowing the
connection from a color to itself. the masks can be eas-
ily implemented by zeroing out the corresponding weights
in the input-to-state convolutions after each update. simi-

figure 4. visualization of the input-to-state and state-to-state
mappings for the three proposed architectures.

3.2. diagonal bilstm

the diagonal bilstm is designed to both parallelize the
computation and to capture the entire available context for
any image size. each of the two directions of the layer
scans the image in a diagonal fashion starting from a cor-
ner at the top and reaching the opposite corner at the bot-
tom. each step in the computation computes at once the
lstm state along a diagonal in the image. figure 4 (right)
illustrates the computation and the resulting receptive    eld.
the diagonal computation proceeds as follows. we    rst
skew the input map into a space that makes it easy to ap-
ply convolutions along diagonals. the skewing operation
offsets each row of the input map by one position with re-
spect to the previous row, as illustrated in figure 3; this
results in a map of size n    (2n     1). at this point we can
compute the input-to-state and state-to-state components of
the diagonal bilstm. for each of the two directions, the
input-to-state component is simply a 1   1 convolution k is
that contributes to the four gates in the lstm core; the op-
eration generates a 4h    n    n tensor. the state-to-state
recurrent component is then computed with a column-wise
convolution k ss that has a kernel of size 2    1. the step
takes the previous hidden and cell states, combines the con-
tribution of the input-to-state component and produces the
next hidden and cell states, as de   ned in equation 3. the
output feature map is then skewed back into an n    n map
by removing the offset positions. this computation is re-
peated for each of the two directions. given the two out-
put maps, to prevent the layer from seeing future pixels,
the right output map is then shifted down by one row and
added to the left output map.
besides reaching the full dependency    eld, the diagonal
bilstm has the additional advantage that it uses a con-
volutional kernel of size 2    1 that processes a minimal
amount of information at each step yielding a highly non-
linear computation. kernel sizes larger than 2    1 are not
particularly useful as they do not broaden the already global
receptive    eld of the diagonal bilstm.

pixelid98row lstmdiagonal bilstmrelu - 1x1 conv+relu - 3x3 convh2hrelu - 1x1 convh2hlstm+2h1x1 convh2hpixel recurrent neural networks

pixelid98

row lstm
7    7 conv mask a

diagonal bilstm

multiple residual blocks: (see    g 5)

row lstm
conv
3    3 mask b i-s: 3    1 mask b
s-s: 3    1 no mask

diagonal bilstm
i-s: 1    1 mask b
s-s: 1    2 no mask

relu followed by 1    1 conv, mask b (2 layers)

256-way softmax for each rgb color (natural images)

or sigmoid (mnist)

table 1. details of the architectures. in the lstm architectures
i-s and s-s stand for input-state and state-state convolutions.

lar masks have also been used in id5
(gregor et al., 2014; germain et al., 2015).

3.5. pixelid98

the row and diagonal lstm layers have a potentially
unbounded dependency range within their receptive    eld.
this comes with a computational cost as each state needs
to be computed sequentially. one simple workaround is
to make the receptive    eld large, but not unbounded. we
can use standard convolutional layers to capture a bounded
receptive    eld and compute features for all pixel positions
at once. the pixelid98 uses multiple convolutional lay-
ers that preserve the spatial resolution; pooling layers are
not used. masks are adopted in the convolutions to avoid
seeing the future context; masks have previously also been
used in non-convolutional models such as made (ger-
main et al., 2015). note that the advantage of paralleliza-
tion of the pixelid98 over the pixelid56 is only available
during training or during evaluating of test images. the
image generation process is sequential for both kinds of
networks, as each sampled pixel needs to be given as input
back into the network.

3.6. multi-scale pixelid56
the multi-scale pixelid56 is composed of an uncondi-
tional pixelid56 and one or more conditional pixelid56s.
the unconditional network    rst generates in the standard
way a smaller s  s image that is subsampled from the orig-
inal image. the conditional network then takes the s    s
image as an additional input and generates a larger n    n
image, as shown in figure 2 (middle).
the conditional network is similar to a standard pixelid56,
but each of its layers is biased with an upsampled version
of the small s    s image. the upsampling and biasing pro-
cesses are de   ned as follows. in the upsampling process,
one uses a convolutional network with deconvolutional lay-
ers to construct an enlarged feature map of size c    n    n,
where c is the number of features in the output map of the
upsampling network. then, in the biasing process, for each

layer in the conditional pixelid56, one simply maps the
c    n    n conditioning map into a 4h    n    n map that is
added to the input-to-state map of the corresponding layer;
this is performed using a 1   1 unmasked convolution. the
larger n    n image is then generated as usual.

4. speci   cations of models
in this section we give the speci   cations of the pixelid56s
used in the experiments. we have four types of networks:
the pixelid56 based on row lstm, the one based on di-
agonal bilstm, the fully convolutional one and the multi-
scale one.
table 1 speci   es each layer in the single-scale networks.
the    rst layer is a 7    7 convolution that uses the mask of
type a. the two types of id137 then use a vari-
able number of recurrent layers. the input-to-state con-
volution in this layer uses a mask of type b, whereas the
state-to-state convolution is not masked. the pixelid98
uses convolutions of size 3    3 with a mask of type b.
the top feature map is then passed through a couple of
layers consisting of a recti   ed linear unit (relu) and a
1  1 convolution. for the cifar-10 and id163 experi-
ments, these layers have 1024 feature maps; for the mnist
experiment, the layers have 32 feature maps. residual and
layer-to-output connections are used across the layers of all
three networks.
the networks used in the experiments have the following
hyperparameters. for mnist we use a diagonal bilstm
with 7 layers and a value of h = 16 (section 3.3 and figure
5 right). for cifar-10 the row and diagonal bilstms
have 12 layers and a number of h = 128 units. the pixel-
id98 has 15 layers and h = 128. for 32    32 id163
we adopt a 12 layer row lstm with h = 384 units and
for 64    64 id163 we use a 4 layer row lstm with
h = 512 units; the latter model does not use residual con-
nections.

5. experiments
in this section we describe our experiments and results. we
begin by describing the way we evaluate and compare our
results. in section 5.2 we give details about the training.
then we give results on the relative effectiveness of archi-
tectural components and our best results on the mnist,
cifar-10 and id163 datasets.

5.1. evaluation

all our models are trained and evaluated on the log-
likelihood id168 coming from a discrete distribu-
tion. although natural image data is usually modeled with
continuous distributions using density functions, we can
compare our results with previous art in the following way.

pixel recurrent neural networks

in the literature it is currently best practice to add real-
valued noise to the pixel values to dequantize the data when
using density functions (uria et al., 2013). when uniform
noise is added (with values in the interval [0, 1]), then the
log-likelihoods of continuous and discrete models are di-
rectly comparable (theis et al., 2015). in our case, we can
use the values from the discrete distribution as a piecewise-
uniform continuous function that has a constant value for
every interval [i, i + 1], i = 1, 2, . . . 256. this correspond-
ing distribution will have the same log-likelihood (on data
with added noise) as the original discrete distribution (on
discrete data).
for mnist we report the negative log-likelihood in nats
as it is common practice in literature. for cifar-10 and
id163 we report negative log-likelihoods in bits per di-
mension. the total discrete log-likelihood is normalized by
the dimensionality of the images (e.g., 32   32   3 = 3072
for cifar-10). these numbers are interpretable as the
number of bits that a compression scheme based on this
model would need to compress every rgb color value
(van den oord & schrauwen, 2014b; theis et al., 2015);
in practice there is also a small overhead due to arithmetic
coding.

5.2. training details

our models are trained on gpus using the torch toolbox.
from the different parameter update rules tried, rmsprop
gives best convergence performance and is used for all ex-
periments. the learning rate schedules were manually set
for every dataset to the highest values that allowed fast con-
vergence. the batch sizes also vary for different datasets.
for smaller datasets such as mnist and cifar-10 we use
smaller batch sizes of 16 images as this seems to regularize
the models. for id163 we use as large a batch size as
allowed by the gpu memory; this corresponds to 64 im-
ages/batch for 32    32 id163, and 32 images/batch for
64    64 id163. apart from scaling and centering the
images at the input of the network, we don   t use any other
preprocessing or augmentation. for the multinomial loss
function we use the raw pixel color values as categories.
for all the pixelid56 models, we learn the initial recurrent
state of the network.

5.3. discrete softmax distribution

apart from being intuitive and easy to implement, we    nd
that using a softmax on discrete pixel values instead of a
mixture density approach on continuous pixel values gives
better results. for the row lstm model with a softmax
output distribution we obtain 3.06 bits/dim on the cifar-
10 validation set. for the same model with a mixture of
conditional gaussian scale mixtures (mcgsm) (theis &
bethge, 2015) we obtain 3.22 bits/dim.

in figure 6 we show a few softmax activations from the
model. although we don   t embed prior information about
the meaning or relations of the 256 color categories, e.g.
that pixel values 51 and 52 are neighbors, the distributions
predicted by the model are meaningful and can be multi-
modal, skewed, peaked or long tailed. also note that values
0 and 255 often get a much higher id203 as they are
more frequent. another advantage of the discrete distribu-
tion is that we do not worry about parts of the distribution
mass lying outside the interval [0, 255], which is something
that typically happens with continuous distributions.

figure 6. example softmax activations from the model. the top
left shows the distribution of the    rst pixel red value (   rst value
to sample).

5.4. residual connections

another core component of the networks is residual con-
nections. in table 2 we show the results of having residual
connections, having standard skip connections or having
both, in the 12-layer cifar-10 row lstm model. we
see that using residual connections is as effective as using
skip connections; using both is also effective and preserves
the advantage.

no skip

no residual:
residual:

3.22
3.07

skip
3.09
3.06

table 2. effect of residual and skip connections in the row lstm
network evaluated on the cifar-10 validation set in bits/dim.

when using both the residual and skip connections, we see
in table 3 that performance of the row lstm improves
with increased depth. this holds for up to the 12 lstm
layers that we tried.

 0 50 100 150 200 250 0 50 100 150 200 250 0 50 100 150 200 250 0 50 100 150 200 250 0                                                                               2550                                                                            255 0                                                                               255 0                                                                               255 0                                                                               255pixel recurrent neural networks

figure 7. samples from models trained on cifar-10 (left) and id163 32x32 (right) images. in general we can see that the models
capture local spatial dependencies relatively well. the id163 model seems to be better at capturing more global structures than the
cifar-10 model. the id163 model was larger and trained on much more data, which explains the qualitative difference in samples.

# layers:
nll:

1

2

3

6

9

3.30

3.20

3.17

3.09

3.08

12
3.06

table 3. effect of the number of layers on the negative log likeli-
hood evaluated on the cifar-10 validation set (bits/dim).

5.5. mnist

although the goal of our work was to model natural images
on a large scale, we also tried our model on the binary ver-
sion (salakhutdinov & murray, 2008) of mnist (lecun
et al., 1998) as it is a good sanity check and there is a lot
of previous art on this dataset to compare with. in table 4
we report the performance of the diagonal bilstm model
and that of previous published results. to our knowledge
this is the best reported result on mnist so far.

5.6. cifar-10

next we test our models on the cifar-10 dataset
(krizhevsky, 2009). table 5 lists the results of our mod-
els and that of previously published approaches. all our
results were obtained without data augmentation. for the
proposed networks, the diagonal bilstm has the best
performance, followed by the row lstm and the pixel-
id98. this coincides with the size of the respective recep-
tive    elds: the diagonal bilstm has a global view, the
row lstm has a partially occluded view and the pixel-
id98 sees the fewest pixels in the context. this suggests
that effectively capturing a large receptive    eld is impor-
tant. figure 7 (left) shows cifar-10 samples generated

model
dbm 2hl [1]:
dbn 2hl [2]:
nade [3]:
eonade 2hl (128 orderings) [3]:
eonade-5 2hl (128 orderings) [4]:
dlgm [5]:
dlgm 8 leapfrog steps [6]:
darn 1hl [7]:
made 2hl (32 masks) [8]:
draw [9]:
pixelid98:
row lstm:
diagonal bilstm (1 layer, h = 32):
diagonal bilstm (7 layers, h = 16):

nll test
    84.62
    84.55
88.33
85.10
84.68
    86.60
    85.51
    84.13
86.64
    80.97
81.30
80.54
80.75
79.20

table 4. test set performance of different models on mnist
in nats (negative log-likelihood). prior results taken from [1]
(salakhutdinov & hinton, 2009), [2] (murray & salakhutdinov,
2009), [3] (uria et al., 2014), [4] (raiko et al., 2014), [5] (rezende
et al., 2014), [6] (salimans et al., 2015), [7] (gregor et al., 2014),
[8] (germain et al., 2015), [9] (gregor et al., 2015).

from the diagonal bilstm.

5.7. id163

although to our knowledge the are no published results on
the ilsvrc id163 dataset (russakovsky et al., 2015)
that we can compare our models with, we give our ima-

pixel recurrent neural networks

figure 8. samples from models trained on id163 64x64 images. left: normal model, right: multi-scale model. the single-scale
model trained on 64x64 images is less able to capture global structure than the 32x32 model. the multi-scale model seems to resolve
this problem. although these models get similar performance in log-likelihood, the samples on the right do seem globally more coherent.

model
uniform distribution:
multivariate gaussian:
nice [1]:
deep diffusion [2]:
deep gmms [3]:
ride [4]:
pixelid98:
row lstm:
diagonal bilstm:

nll test (train)

occluded

completions

original

8.00
4.70
4.48
4.20
4.00
3.47

3.14 (3.08)
3.07 (3.00)
3.00 (2.93)

table 5. test set performance of different models on cifar-10 in
bits/dim. for our models we give training performance in brack-
ets. [1] (dinh et al., 2014), [2] (sohl-dickstein et al., 2015), [3]
(van den oord & schrauwen, 2014a), [4] personal communication
(theis & bethge, 2015).

image size nll validation (train)
32x32:
64x64:

3.86 (3.83)
3.63 (3.57)

table 6. negative log-likelihood performance on 32  32 and 64  
64 id163 in bits/dim.

genet log-likelihood performance in table 6 (without data
augmentation). on id163 the current pixelid56s do
not appear to over   t, as we saw that their validation per-
formance improved with size and depth. the main con-
straint on model size are currently computation time and
gpu memory.
note that the id163 models are in general less com-
pressible than the cifar-10 images. id163 has greater
variety of images, and the cifar-10 images were most

figure 9. image completions sampled from a model that was
trained on 32x32 id163 images. note that diversity of the
completions is high, which can be attributed to the log-likelihood
id168 used in this generative model, as it encourages mod-
els with high id178. as these are sampled from the model, we
can easily generate millions of different completions. it is also
interesting to see that textures such as water, wood and shrubbery
are also inputed relative well (see figure 1).

likely resized with a different algorithm than the one we
used for id163 images. the id163 images are less
blurry, which means neighboring pixels are less correlated
to each other and thus less predictable. because the down-
sampling method can in   uence the compression perfor-
mance, we have made the used downsampled images avail-
able1.
figure 7 (right) shows 32    32 samples drawn from our
model trained on id163. figure 8 shows 64    64 sam-
ples from the same model with and without multi-scale

1http://image-net.org/small/download.php

pixel recurrent neural networks

conditioning. finally, we also show image completions
sampled from the model in figure 9.

6. conclusion
in this paper we signi   cantly improve and build upon deep
recurrent neural networks as generative models for natural
images. we have described novel two-dimensional lstm
layers:
the row lstm and the diagonal bilstm, that
scale more easily to larger datasets. the models were
trained to model the raw rgb pixel values. we treated the
pixel values as discrete random variables by using a soft-
max layer in the conditional distributions. we employed
masked convolutions to allow pixelid56s to model full de-
pendencies between the color channels. we proposed and
evaluated architectural improvements in these models re-
sulting in pixelid56s with up to 12 lstm layers.
we have shown that the pixelid56s signi   cantly improve
the state of the art on the mnist and cifar-10 datasets.
we also provide new benchmarks for generative image
modeling on the id163 dataset. based on the samples
and completions drawn from the models we can conclude
that the pixelid56s are able to model both spatially local
and long-range correlations and are able to produce images
that are sharp and coherent. given that these models im-
prove as we make them larger and that there is practically
unlimited data available to train on, more computation and
larger models are likely to further improve the results.

acknowledgements
the authors would like to thank shakir mohamed and guil-
laume desjardins for helpful input on this paper and lu-
cas theis, alex graves, karen simonyan, lasse espeholt,
danilo rezende, karol gregor and ivo danihelka for in-
sightful discussions.

references
bengio, yoshua and bengio, samy. modeling high-
dimensional discrete data with multi-layer neural net-
works. pp. 400   406. mit press, 2000.

dinh, laurent, krueger, david, and bengio, yoshua.
nice: non-linear independent components estimation.
arxiv preprint arxiv:1410.8516, 2014.

germain, mathieu, gregor, karol, murray,

iain, and
larochelle, hugo. made: masked autoencoder for dis-
tribution estimation. arxiv preprint arxiv:1502.03509,
2015.

graves, alex. generating sequences with recurrent neural

networks. arxiv preprint arxiv:1308.0850, 2013.

graves, alex and schmidhuber, j  urgen. of   ine handwrit-
ing recognition with multidimensional recurrent neural
networks. in advances in neural information process-
ing systems, 2009.

gregor, karol, danihelka, ivo, mnih, andriy, blundell,
charles, and wierstra, daan. deep autoregressive net-
works. in proceedings of the 31st international confer-
ence on machine learning, 2014.

gregor, karol, danihelka, ivo, graves, alex, and wierstra,
daan. draw: a recurrent neural network for image
generation. proceedings of the 32nd international con-
ference on machine learning, 2015.

he, kaiming, zhang, xiangyu, ren, shaoqing, and sun,
jian. deep residual learning for image recognition. arxiv
preprint arxiv:1512.03385, 2015.

hochreiter, sepp and schmidhuber, j  urgen. long short-

term memory. neural computation, 1997.

kalchbrenner, nal and blunsom, phil. recurrent continu-
ous translation models. in proceedings of the 2013 con-
ference on empirical methods in natural language pro-
cessing, 2013.

kalchbrenner, nal, danihelka, ivo, and graves, alex.
arxiv preprint

grid long short-term memory.
arxiv:1507.01526, 2015.

kingma, diederik p and welling, max. auto-encoding
arxiv preprint arxiv:1312.6114,

id58.
2013.

krizhevsky, alex. learning multiple layers of features

from tiny images. 2009.

larochelle, hugo and murray, iain. the neural autore-
gressive distribution estimator. the journal of machine
learning research, 2011.

lecun, yann, bottou, l  eon, bengio, yoshua, and haffner,
patrick. gradient-based learning applied to document
recognition. proceedings of the ieee, 1998.

murray, iain and salakhutdinov, ruslan r.

evaluat-
ing probabilities under high-dimensional latent variable
models. in advances in neural information processing
systems, 2009.

neal, radford m. connectionist learning of belief net-

works. arti   cial intelligence, 1992.

raiko, tapani, li, yao, cho, kyunghyun, and bengio,
yoshua. iterative neural autoregressive distribution es-
in advances in neural information
timator nade-k.
processing systems, 2014.

pixel recurrent neural networks

the 31st international conference on machine learning,
2014.

van den oord, a  aron and schrauwen, benjamin. factoring
variations in natural images with deep gaussian mixture
models. in advances in neural information processing
systems, 2014a.

van den oord, a  aron and schrauwen, benjamin. the
student-t mixture as a natural image patch prior with ap-
plication to image compression. the journal of machine
learning research, 2014b.

zhang, yu, chen, guoguo, yu, dong, yao, kaisheng, khu-
danpur, sanjeev, and glass, james. highway long short-
term memory id56s for distant id103. in
proceedings of the international conference on acous-
tics, speech and signal processing, 2016.

rezende, danilo j, mohamed, shakir, and wierstra, daan.
stochastic id26 and approximate id136
in proceedings of the 31st
in deep generative models.
international conference on machine learning, 2014.

russakovsky, olga, deng, jia, su, hao, krause, jonathan,
satheesh, sanjeev, ma, sean, huang, zhiheng, karpa-
thy, andrej, khosla, aditya, bernstein, michael, berg,
alexander c., and fei-fei, li.
id163 large scale
visual recognition challenge. international journal of
id161 (ijcv), 2015.

salakhutdinov, ruslan and hinton, geoffrey e. deep boltz-
mann machines. in international conference on arti   -
cial intelligence and statistics, 2009.

salakhutdinov, ruslan and murray, iain. on the quantita-
tive analysis of id50. in proceedings of
the 25th international conference on machine learning,
2008.

salimans, tim, kingma, diederik p, and welling, max.
id115 and variational id136:
bridging the gap. proceedings of the 32nd international
conference on machine learning, 2015.

sohl-dickstein, jascha, weiss, eric a., maheswaranathan,
niru, and ganguli, surya. deep unsupervised learning
using nonequilibrium thermodynamics. proceedings of
the 32nd international conference on machine learn-
ing, 2015.

stollenga, marijn f, byeon, wonmin, liwicki, marcus,
and schmidhuber, juergen. parallel multi-dimensional
lstm, with application to fast biomedical volumetric im-
in advances in neural information
age segmentation.
processing systems 28. 2015.

sutskever, ilya, martens, james, and hinton, geoffrey e.
generating text with recurrent neural networks. in pro-
ceedings of the 28th international conference on ma-
chine learning, 2011.

theis, lucas and bethge, matthias. generative image mod-
eling using spatial lstms. in advances in neural infor-
mation processing systems, 2015.

theis, lucas, van den oord, a  aron, and bethge, matthias.
a note on the evaluation of generative models. arxiv
preprint arxiv:1511.01844, 2015.

uria, benigno, murray,

iain, and larochelle, hugo.
rnade: the real-valued neural autoregressive density-
estimator. in advances in neural information processing
systems, 2013.

uria, benigno, murray, iain, and larochelle, hugo. a
deep and tractable density estimator. in proceedings of

pixel recurrent neural networks

figure 10. additional samples from a model trained on id163 32x32 (right) images.

