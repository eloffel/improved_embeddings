charagram: embedding words and sentences via character id165s

john wieting mohit bansal kevin gimpel karen livescu
toyota technological institute at chicago, chicago, il, 60637, usa

{jwieting,mbansal,kgimpel,klivescu}@ttic.edu

6
1
0
2

 
l
u
j
 

0
1

 
 
]
l
c
.
s
c
[
 
 

1
v
9
8
7
2
0

.

7
0
6
1
:
v
i
x
r
a

abstract

we present charagram embeddings, a sim-
ple approach for
learning character-based
compositional models to embed textual se-
quences. a word or sentence is represented
using a character id165 count vector, fol-
lowed by a single nonlinear transformation
to yield a low-dimensional embedding. we
use three tasks for evaluation: word simi-
larity, sentence similarity, and part-of-speech
tagging. we demonstrate that charagram
embeddings outperform more complex archi-
tectures based on character-level recurrent and
convolutional neural networks, achieving new
state-of-the-art performance on several simi-
larity tasks.1

1 introduction

representing textual sequences such as words
and sentences is a fundamental component of
natural
language understanding systems. many
functional architectures have been proposed to
model compositionality in word sequences, ranging
from simple averaging (mitchell and lapata, 2010;
iyyer et al., 2015)
to functions with rich recur-
sive structure (socher et al., 2011; tai et al., 2015;
bowman et al., 2016). most work uses words as
the smallest units in the compositional architec-
ture, often using pretrained id27s or
learning them speci   cally for the task of inter-
est (tai et al., 2015; he et al., 2015).

some prior work has found bene   t from us-
that

ing character-based compositional models

1trained models

and

code

are

available

at

http://ttic.uchicago.edu/  wieting.

and

neural

convolutional

encode arbitrary character sequences into vec-
tors. examples include recurrent neural networks
(id56s)
networks
(id98s) on character sequences, showing improve-
ments for several nlp tasks (ling et al., 2015a;
kim et al., 2015;
ballesteros et al., 2015;
dos santos and guimar  aes, 2015).
by sharing
subword information across words, character mod-
els have the potential to better represent rare words
and morphological variants.

our approach, charagram, uses a much sim-
pler functional architecture. we represent a charac-
ter sequence by a vector containing counts of char-
acter id165s, inspired by huang et al. (2013). this
vector is embedded into a low-dimensional space
using a single nonlinear transformation. this can
be interpreted as learning embeddings of character
id165s, which are learned so as to produce effec-
tive sequence embeddings when a summation is per-
formed over the character id165s in the sequence.

we consider three evaluations: word similar-
ity, sentence similarity, and part-of-speech tag-
ging.
on multiple word similarity datasets,
charagram outperforms id56s and id98s,
achieving state-of-the-art performance on siid113x-
999 (hill et al., 2015). when evaluated on a large
suite of sentence-level semantic textual similar-
ity tasks, charagram embeddings again out-
perform the id56 and id98 architectures as
well as the paragram-phrase embeddings of
wieting et al. (2016).
we also consider en-
glish part-of-speech (pos)
tagging using the
bidirectional
long short-term memory tagger of
ling et al. (2015a). the three architectures reach

similar performance,
verges fastest to high accuracy.

though charagram con-

we perform extensive analysis of our chara-
gram embeddings. we    nd large gains in perfor-
mance on rare words, showing the empirical ben-
e   t of subword modeling. we also compare per-
formance across different character id165 vocabu-
lary sizes,    nding that the semantic tasks bene   t far
more from large vocabularies than the syntactic task.
however, even for challenging semantic similarity
tasks, we still see strong performance with only a
few thousand character id165s.

nearest neighbors show that charagram em-
beddings simultaneously address differences due to
spelling variation, morphology, and word choice.
inspection of embeddings of particular character n-
grams reveals etymological links; e.g., die is close
to mort. we release our resources to the community
in the hope that charagram can provide a strong
baseline for subword-aware text representation.

2 related work

we    rst review work on using subword informa-
tion in id27 models.
the simplest
approaches append subword features to word em-
beddings, letting the model learn how to use the sub-
word information for particular tasks. some added
knowledge-based morphological features to word
representations (alexandrescu and kirchhoff, 2006;
el-desoky mousa et al., 2013).
learned
embeddings jointly for subword units and words,
de   ning simple compositional architectures (often
based on addition) to create id27s from
(lazaridou et al., 2013;
subword
botha and blunsom, 2014;
qiu et al., 2014;
chen et al., 2015).

embeddings

others

a recent

trend is to use richer functional ar-
chitectures to convert character sequences into
id27s.
luong et al. (2013) used re-
cursive models to compose morphs into word
embeddings, using unsupervised morphological
analysis. ling et al. (2015a) used a bidirectional
long short-term memory (lstm) id56 on char-
acters to embed arbitrary word types, showing
strong performance for id38 and pos
tagging. ballesteros et al. (2015) used this model
to represent words for id33. sev-

eral have used character-level id56 architectures
for machine translation, whether
represent-
target words (ling et al., 2015b;
ing source or
luong and manning, 2016),
gen-
character-by-
erating
character (chung et al., 2016).

translations

entire

for

for

or

others

sutskever et al. (2011)

graves (2013)
and
language mod-
used character-level id56s for
eling.
trained character-level id56
language models to provide features for nlp
tasks,
segmenta-
tion (chrupa  a, 2013; evang et al., 2013), and text
id172 (chrupa  a, 2014).

id121

including

and

embed

including

to
tasks,

used
several

arbitrary word

(kim et al., 2015),

id98s with character id165    lters have
types
been
language mod-
for
eling
tag-
ging (dos santos and zadrozny, 2014), named entity
recognition (dos santos and guimar  aes, 2015), text
classi   cation (zhang et al., 2015),
and machine
translation
(costa-juss`a and fonollosa, 2016).
combinations of id98s and id56s on characters
have also been explored (j  ozefowicz et al., 2016).

part-of-speech

most closely-related to our approach is the dssm
(instantiated variously as    deep semantic similarity
model    or    deep structured semantic model   ) de-
veloped by huang et al. (2013). for an informa-
tion retrieval task,
they represented words using
feature vectors containing counts of character n-
grams. sperr et al. (2013) used a very similar tech-
nique to represent words in neural language models
for machine translation. our charagram embed-
dings are based on this same idea. we show this
strategy to be extremely effective when applied to
both words and sentences, outperforming character
lstms like those used by ling et al. (2015a) and
character id98s like those from kim et al. (2015).

3 models

we now describe models
that embed textual
sequences using their characters,
including our
charagram model and the baselines that we com-
pare to. we denote a character-based textual se-
quence by x = hx1, x2, ..., xmi, which includes
space characters between words as well as spe-
cial start-of-sequence and end-of-sequence charac-
ters. we use xj
i to denote the subsequence of char-

acters from position i to position j inclusive, i.e.,
xj
i = hxi, xi+1, ..., xj i, and we de   ne xi
our charagram model embeds a character se-
quence x by adding the vectors of its character n-
grams followed by an elementwise nonlinearity:

i = xi.

gchar(x) = h   
   

b +

m+1

xi=1

i

j   
j     v(cid:3) w xi
xj=1+i   k
i(cid:2)xi
   (1)

where h is a nonlinear function, b     rd is a bias
vector, k is the maximum length of any character n-
gram, i[p] is an indicator function that returns 1 if p
is true and 0 otherwise, v is the set of character n-
grams included in the model, and w xi
j     rd is the
vector for character id165 xi
j.

the set v is used to restrict the model to a pre-
determined set (vocabulary) of character id165s.
below, we compare several choices for de   ning this
set. the number of parameters in the model is
d + d|v |. this model is based on the letter id165
hashing technique developed by huang et al. (2013)
for their dssm approach. one can also view eq. (1)
(as they did) as    rst populating a vector of length |v |
with counts of character id165s followed by a non-
linear transformation.

we compare the charagram model

to two
other models.
first we consider lstm archi-
tectures (hochreiter and schmidhuber, 1997) over
the character sequence x, using the version from
gers et al. (2003). we use a forward lstm over
the characters in x, then take the    nal lstm hidden
vector as the representation of x. below we refer to
this model as    charlstm.   

we also compare to convolutional neural net-
work (id98) architectures, which we refer to be-
low as    charid98.    we use the architecture from
kim (2014) with a single convolutional layer fol-
lowed by an optional fully-connected layer. we use
   lters of varying lengths of character id165s, us-
ing two primary con   gurations of    lter sets, one of
which is identical to that used by kim et al. (2015).
each    lter operates over the entire sequence of char-
acter id165s in x and we use max pooling for each
   lter. we tune over the choice of nonlinearity for
both the convolutional    lters and for the optional
fully-connected layer. we give more details below
about    lter sets, id165 lengths, and nonlinearities.

we note that using character id165 convolu-
tional    lters is similar to our use of character n-
grams in the charagram model. the difference
is that, in the charagram model, the id165 must
match exactly for its vector to affect the representa-
tion, while in the id98 each    lter will affect the rep-
resentation of all sequences (depending on the non-
linearity being used). so the charagram model is
able to learn precise vectors for particular character
id165s with speci   c meanings, while there is pres-
sure for the id98    lters to capture multiple similar
patterns that recur in the data. our qualitative analy-
sis shows the speci   city of the learned character n-
gram vectors learned by the charagram model.

4 experiments

we perform three sets of experiments. the goal of
the    rst two (section 4.1) is to produce embeddings
for textual sequences such that the embeddings for
paraphrases have high cosine similarity. our third
evaluation (section 4.2) is a classi   cation task, and
follows the setup of the english part-of-speech tag-
ging experiment from ling et al. (2015a).

4.1 word and sentence similarity
we compare the ability of our models to cap-
ture semantic similarity for both words and sen-
tences. we train on noisy paraphrase pairs from
the paraphrase database (ppdb; ganitkevitch et al.,
2013) with an l2 regularized contrastive loss ob-
jective function, following the training procedure of
wieting et al. (2015) and wieting et al. (2016). key
details are provided here, but see appendix a for a
fuller description.

4.1.1 datasets

for word similarity, we focus on two of the
most commonly used datasets for evaluating seman-
tic similarity of id27s: wordsim-353
(ws353) (finkelstein et al., 2001) and siid113x-999
(sl999) (hill et al., 2015). we also evaluate our
best model on the stanford rare word similarity
dataset (luong et al., 2013).

for sentence similarity, we evaluate on a di-
verse set of 22 textual similarity datasets, includ-
ing all datasets from every semeval semantic tex-
tual similarity (sts) task from 2012 to 2015.
we also evaluate on the semeval 2015 twitter

task (xu et al., 2015) and the semeval 2014 sick
semantic relatedness task (marelli et al., 2014).
given two sentences, the aim of the sts tasks is to
predict their similarity on a 0-5 scale, where 0 in-
dicates the sentences are on different topics and 5
indicates that they are completely equivalent.

each sts task consists of 4-6 datasets cover-
ing a wide variety of domains, including newswire,
tweets, glosses, machine translation outputs, web
forums, news headlines, image and video captions,
among others. most submissions for these tasks use
supervised models that are trained and tuned on pro-
vided training data or similar datasets from older
tasks. further details are provided in the of   cial task
descriptions (agirre et al., 2012; agirre et al., 2013;
agirre et al., 2014; agirre et al., 2015).

4.1.2 preliminaries

for training data, we use pairs from ppdb. for
word similarity experiments, we train on word pairs
and for sentence similarity, we train on phrase pairs.
ppdb comes in different sizes (s, m, l, xl, xxl,
and xxxl), where each larger size subsumes all
smaller ones. the pairs in ppdb are sorted by a
con   dence measure and so the smaller sets contain
higher precision paraphrases.

before training the charagram model, we need
to populate v , the vocabulary of character id165s
included in the model. we obtain these from the
training data used for the    nal models in each set-
ting, which is either the lexical or phrasal section of
ppdb xxl. we tune over whether to include the
full sets of character id165s in these datasets or
only those that appear more than once.

when extracting id165s, we include spaces and
add an extra space before and after each word or
phrase in the training and evaluation data to ensure
that the beginning and end of each word is repre-
sented. we note that strong performance can be ob-
tained using far fewer character id165s; we explore
the effects of varying the number of id165s and the
id165 orders in section 4.4.

we used adam (kingma and ba, 2014) with a
learning rate of 0.001 to learn the parameters in the
following experiments.

model

charid98

charlstm

charagram

tuned on ws353
sl999
ws353
sl999
ws353
sl999
ws353

26.31
33.19
48.27
51.43
53.87
58.35
75.6

sl999
30.64
16.73
54.54
48.83
63.33
60.00
78

inter-annotator agreement

-

table 1: word similarity results (spearman   s       100) on
ws353 and sl999. the inter-annotator agreement is the aver-
age spearman   s    between a single annotator with the average
over all other annotators.

4.1.3 id27 experiments
training and tuning for hyperparameter tuning,
we used one epoch on the lexical section of ppdb
xxl, which consists of 770,007 word pairs. we
used either ws353 or sl999 for model selection
(reported below). we then took the selected hyper-
parameters and trained for 50 epochs to ensure that
all models had a chance to converge.

full details of our tuning procedure are provided
in appendix b. in short, we tuned all models thor-
oughly, tuning the id180 for chara-
gram and charid98, as well as the id173
strength, mini-batch size, and sampling type for all
models. for charid98, we experimented with two
   lter sets: one uses 175    lters for each id165 size
    {2, 3, 4}, and the other uses the set of    lters from
kim et al. (2015), consisting of 25    lters of size 1,
50 of size 2, 75 of size 3, 100 of size 4, 125 of size
5, and 150 of size 6. we also experimented with us-
ing dropout (srivastava et al., 2014) on the inputs of
the last layer of the charid98 model in place of l2
id173, as well as removing the last feedfor-
ward layer. neither of these variations signi   cantly
improved performance on our suite of tasks for word
or sentence similarity. however, using more    lters
does improve performance, seemingly linearly with
the square of the number of    lters.

architecture comparison the results are shown
in table 1. the charagram model outperforms
both the charlstm and charid98 models, and also
outperforms recent strong results on sl999.

we also found that the charid98 and charlstm
models take far more epochs to converge than the
charagram model. we noted this trend across ex-
periments and explore it further in section 4.3.

model
hill et al. (2014)
schwartz et al. (2015)
faruqui and dyer (2015)
wieting et al. (2015)
charagram (large)

sl999
52
56
58
66.7
70.6

table 2: spearman   s       100 on sl999. charagram (large)
refers to the charagram model described in section 4.4. this
model contains 173,881 character embeddings, more than the
100,283 in the charagram model used to obtain the results in
table 1.

comparison to prior work we found that per-
formance of charagram on word similarity tasks
can be improved by using more character id165s.
this is explored in section 4.4. our best result from
these experiments was obtained with the largest
model we considered, which contains 173,881 n-
gram embeddings. when using ws353 for model
selection and training for 25 epochs,
this model
achieves 70.6 on sl999. to our knowledge, this
is the best result reported on sl999 in this set-
ting; table 2 shows comparable recent results.
note that a higher sl999 number is reported in
(mrk  si  c et al., 2016), but the setting is not compa-
rable to ours as they started with embeddings tuned
on sl999.

lastly, we evaluated our model on the stanford
rare word similarity dataset (luong et al., 2013),
using sl999 for model
we ob-
tained a spearman   s    of 47.1, which outper-
forms the 41.8 result from soricut and och (2015)
and is competitive with the 47.8 reported in
pennington et al. (2014), despite only using ppdb
for training.

selection.

4.1.4 sentence embedding experiments
training and tuning we did initial training of
our models using one pass through ppdb xl, which
consists of 3,033,753 unique phrase pairs. fol-
lowing wieting et al. (2016), we use the annotated
phrase pairs developed by pavlick et al. (2015) as
our validation set, using spearman   s    to rank the
models. we then take the highest performing mod-
els and train on the 9,123,575 unique phrase pairs in
the phrasal section of ppdb xxl for 10 epochs.

for all experiments, we    x the mini-batch size to
100, the margin    to 0.4, and use max sampling
(see appendix a). for the charagram model,

v contains all 122,610 character id165s (n    
{2, 3, 4}) in the ppdb xxl phrasal section. the
other tuning settings are the same as in section 4.1.3.
for another baseline, we train the paragram-
of wieting et al. (2016),
phrase
over
tuning
{10   5, 10   6, 10   7, 10   8}.
paragram-
phrase model simply uses word averaging as its
composition function, but outperforms many more
complex models.

id173

strength

model

the

its

in this section, we refer

to our model as
charagram-phrase because the input is a char-
acter sequence containing multiple words rather
than only a single word as in section 4.1.3. since
the vocabulary v is de   ned by the training data se-
quences, the charagram-phrase model includes
character id165s that span multiple words, per-
mitting it to capture some aspects of word order
and word co-occurrence, which the paragram-
phrase model is unable to do.

we encountered dif   culties training the char-
lstm and charid98 models for this task. we
tried several strategies to improve their chance at
convergence, including clipping gradients, increas-
ing training data, and experimenting with differ-
ent optimizers and learning rates. we found suc-
cess by using the original (con   dence-based) or-
dering of the ppdb phrase pairs for the initial
epoch of learning, then shuf   ing them for subse-
quent epochs. this is similar to curriculum learn-
ing (bengio et al., 2009). the higher-con   dence
phrase pairs tend to be shorter and have many over-
lapping words, possibly making them easier to learn
from.

results an abbreviated version of the sentence
similarity results is shown in table 3; appendix c
contains the full results. for comparison, we report
performance for the median (50%), third quartile
(75%), and top-performing (max) systems from the
shared tasks. we observe strong performance for the
charagram-phrase model. it always does better
than the charid98 and charlstm models, and out-
performs the paragram-phrase model on 15 of
the 22 tasks. furthermore, charagram-phrase
matches or exceeds the top-performing task-tuned
systems on 5 tasks, and is within 0.003 on 2 more.
the charlstm and charid98 models are signi   -

dataset

50% 75% max

charid98

charlstm

paragram-

charagram-

phrase

phrase

sts 2012 average
sts 2013 average
sts 2014 average
sts 2015 average
2014 sick
2015 twitter
average

54.5
45.3
64.7
70.2
71.4
49.9
59.7

59.5
51.4
71.4
75.8
79.9
52.5
65.6

70.3
65.3
76.7
80.2
82.8
61.9
73.6

56.5
47.7
64.7
66.0
62.9
48.6
59.2

40.1
30.7
46.8
45.5
50.3
39.9
41.9

58.5
57.7
71.5
75.7
72.0
52.7
66.2

66.1
57.2
74.7
76.1
70.0
53.6
68.7

table 3: results on semeval textual similarity datasets (pearson   s r    100). the highest score in each row is in boldface (omitting
the of   cial task score columns).

model
charid98
charlstm
charagram
charagram (2-layer)

accuracy (%)

97.02
96.90
96.99
97.10

table 4: results on part-of-speech tagging.

cantly worse, with the charid98 being the better of
the two and beating paragram-phrase on 4 of the
tasks.

we emphasize that there are many other mod-
els that could be compared to, such as an lstm
over id27s. this and many other mod-
els were explored by wieting et al. (2016). their
paragram-phrase model, which simply learns
id27s within an averaging composition
function, was among their best-performing models.
we used this model in our experiments as a strongly-
performing representative of their results.

lastly, we note other recent work that consid-
ers a similar id21 setting. the fastsent
model (hill et al., 2016) uses the 2014 sts task as
part of its evaluation and reports an average pear-
son   s r of 61.3, much lower than the 74.7 achieved
by charagram-phrase on the same datasets.

4.2 id52 experiments

we now consider part-of-speech (pos) tagging,
since it has been used as a testbed for evaluating ar-
chitectures for character-level word representations.
it also differs from semantic similarity, allowing us
to evaluate our architectures on a syntactic task.
we replicate the id52 experimental setup
of ling et al. (2015a). their model uses a bidirec-
tional lstm over character embeddings to represent
words. they then use the resulting word representa-
tions in another bidirectional lstm that predicts the
tag for each word. we replace their character bidi-
rectional lstm with our three architectures: char-

id98, charlstm, and charagram.

we use the wall street journal portion of the penn
treebank, using sections 1-18 for training, 19-21 for
tuning, and 22-24 for testing. we set the dimension-
ality of the character embeddings to 50 and that of
the (induced) word representations to 150. for opti-
mization, we use stochastic id119 with a
mini-batch size of 100 sentences. the learning rate
and momentum are set to 0.2 and 0.95 respectively.
we train the models for 50 epochs, again to ensure
that all models have an opportunity to converge.

the other settings for our models are mostly the
same as for the word and sentence experiments (sec-
tion 4.1). we again use character id165s with
n     {2, 3, 4}, tuning over whether to include all
54,893 in the training data or only those that occur
more than once. however, there are two minor dif-
ferences from the previous sections. first, we add
a single binary feature to indicate if the token con-
tains a capital letter. second, our tuning considers
recti   ed linear units as the activation function for the
charagram and charid98 architectures.2

the results are shown in table 4. performance
is similar across models. we found that adding a
second fully-connected 150 dimensional layer to the
charagram model improved results slightly.3

4.3 convergence
one observation we made during our experiments
was that different models converged at signi   cantly
different rates. figure 1 plots the performance of the
word similarity and tagging tasks as a function of

2we did not consider relu for the similarity experiments
because the    nal embeddings are used directly to compute co-
sine similarities, which led to poor performance when restrict-
ing the embeddings to be non-negative.

3we also tried adding a second (300 dimensional) layer for
the word and sentence embedding models and found that it hurt
performance.

0.8

0.6

0.4

0.2

0

  
s
   
n
a
m
r
a
e
p
s

1

0.95

0.9

0.85

0.8

y
c
a
r
u
c
c
a

word similarity

task

pos
tagging

word
similarity

sentence
similarity

# id165s
100
1,000
50,000
100
1,000
50,000
100
1,000
50,000

2
95.52
96.72
96.81
6.2
15.2
14.4
40.2
50.1
45.7

2,3
96.09
96.86
97.00
7.0
33.0
52.4
33.8
60.3
64.7

2,3,4
96.15
96.97
97.02
7.7
38.7
67.8
32.5
58.6
66.6

2,3,4,5
96.13
97.02
97.04
9.1
43.2
69.2
31.2
56.6
63.0

2,3,4,5,6
96.16
97.03
97.09
8.8
43.9
69.5
29.8
55.6
61.3

0

10

20

30

40

50

epoch

id52

table 5: results of using different numbers and different com-
binations of character id165s.

charagram
charlstm
charid98

8

10

2

4

6
epoch

figure 1: plots of performance versus training epoch for word
similarity and id52.

the number of examples processed during training.
for word similarity, we plot the oracle spearman   s
   on sl999, while for tagging we plot tagging accu-
racy on the validation set. we evaluate performance
every quarter epoch (approximately every 194,252
word pairs) for word similarity and every epoch for
tagging. we only show the    rst 10 epochs of training
in the tagging plot.

the plots show that the charagram model con-
verges quickly to high performance. the charid98
and charlstm models take many more epochs to
converge. even with tagging, which uses a very high
learning rate, charagram converges signi   cantly
faster than the others. for word similarity, it ap-
pears that charid98 and charlstm are still slowly
improving at the end of 50 epochs. this suggests
that if training was done for a much longer period,
and possibly on more data, the charlstm or char-
id98 models could match and surpass the chara-
gram model. however, due to the large training
sets available from ppdb and the computational re-
quirements of these architectures, we were unable
to explore the regime of training for many epochs.
we conjecture that slow convergence could be the
reason for the inferior performance of lstms for
similarity tasks as reported by wieting et al. (2016).

4.4 model size experiments

the default setting for our charagram and
charagram-phrase models is to use all charac-
ter bigram, trigrams, and 4-grams that occur in the
training data at least c times, tuning c over the set
{1, 2}. this results in a large number of parame-
ters, which could be seen as an unfair advantage over
the comparatively smaller charid98 and charlstm
models, which have up to 881,025 and 763,200 pa-
rameters respectively in the similarity experiments.4
on the other hand, for a given training exam-
ple, very few parameters in the charagram model
are actually used. for the charid98 and charlstm
models, by contrast, all parameters are used except
the character embeddings for those characters that
are not present in the example. for a sentence with
100 characters, and when using the 300-dimensional
charagram model with bigrams, trigrams, and 4-
grams, there are approximately 90,000 parameters
in use for this sentence, far fewer than those used by
the charid98 and charlstm for the same sentence.
we performed a series of experiments to inves-
tigate how the charagram and charagram-
phrase models perform with different numbers and
lengths of character id165s. for a given k, we
took the top k most frequent character id165s for
each value of n in use. we experimented with k
values in {100, 1000, 50000}.
if there were fewer
than k unique character id165s for a given n, we
used all of them. for these experiments, we did very
little tuning, setting the id173 strength to 0
and only tuning over the activation function. we re-
peated this experiment for all three of our tasks. for
word similarity, we report performance on sl999
after training for 5 epochs on the lexical section of
ppdb xxl. for sentence similarity, we report the

4this includes 134 character embeddings.

average pearson   s r over all 22 datasets after train-
ing for 5 epochs on the phrasal section of ppdb xl.
for tagging, we report accuracy on the validation set
after training for 50 epochs. the results are shown
in table 5.

when using extremely small models with only
100 id165s of each order, we still see relatively
strong performance on id52. however, the
semantic similarity tasks require far more id165s
to yield strong performance. using 1000 id165s
clearly outperforms 100, and 50,000 id165s per-
forms best.

model has no notion of unknown words, as it can
embed any character sequence.

we next investigated the sensitivity of the two
models to length, as measured by the maximum
of the lengths of the two sentences in a pair. we
binned all of the 12,108 sentence pairs in the 20
semeval sts tasks by length and then again found
the pearson   s r for both the paragram-phrase
and charagram-phrase models. the results are
shown in table 7.

max length

n

paragram-

charagram-

phrase

phrase

5 analysis

5.1 quantitative analysis
one of our primary motivations for character-based
models is to address the issue of out-of-vocabulary
(oov) words, which were found to be one of the
main sources of error for the paragram-phrase
model from wieting et al. (2016). they reported a
negative correlation (pearson   s r of -0.45) between
oov rate and performance. we took the 12,108 sen-
tence pairs in all 20 semeval sts tasks and binned
them by the total number of unknown words in the
pairs.5 we computed pearson   s r over each bin. the
results are shown in table 6.

number of

unknown words

0
1
2

    1
    0

n

11,292
534
194
816
12,108

paragram-

charagram-

phrase

phrase

71.4
68.8
66.4
68.6
71.0

73.8
78.8
72.8
77.9
74.0

table 6: performance (pearson   s r    100) as a function of
the number of unknown words in the sentence pairs over all
20 semeval sts datasets. n is the number of sentence pairs.

the charagram-phrase model has better per-
formance for each number of unknown words. the
paragram-phrase model degrades when more
unknown words are present, presumably because it
is forced to use the same unknown id27
for all unknown words. the charagram-phrase

5unknown words were de   ned as those not present

in
the 1.7 million unique (case-insensitive) tokens that com-
prise the vocabulary for the glove embeddings available at
http://nlp.stanford.edu/projects/glove/.
the paragram-sl999 embeddings, used to initialize the
paragram-phrase model, use this same vocabulary.

    4

5
6
7
8
9
10

11-15
16-20
    21

71
216
572
1,097
1,356
1,266
1,010
3,143
1,559
1,818

67.9
71.1
67.0
71.5
74.2
71.7
70.7
71.8
73.0
74.5

72.9
71.9
69.7
74.0
74.5
72.7
74.2
73.7
75.1
75.4

table 7: performance (pearson   s r    100) as a function of the
maximum number of tokens in the sentence pairs over all 20
semeval sts datasets. n is the number of sentence pairs.

we    nd that both models are robust to sentence
length, achieving the highest correlations on the
longest sentences. we also    nd that charagram-
phrase outperforms paragram-phrase at all
sentence lengths.

5.2 qualitative analysis

bigram
not capable
not able
not possible
not suf   cient
not easy

charagram-phrase
incapable, unable, incapacity
unable, incapable, incapacity
impossible impracticable unable
insuf   cient, suf   cient, inadequate
easy, dif   cult, tough

paragram-phrase
not, capable, stalled
not, able, stalled
not, stalled, possible
not, suf   cient, stalled
not, stalled, easy

table 8: nearest neighboring words of selected bigrams under
charagram-phrase and paragram-phrase embeddings.

aside from oovs,

the paragram-phrase
model lacks the ability to model word order or
cooccurrence, since it simply averages the words in
the sequence. we were interested to see whether
charagram-phrase could handle negation, since
it does model limited information about word or-
der (via character id165s that span multiple words
in the sequence). we made a list of    not    bigrams
that could be represented by a single word, then em-
bedded each bigram using both models and did a

word
vehicals
serious-looking
near-impossible
growths
litered
journeying
babyyyyyy
adirty
refunding

professors

huge

charagram-phrase
vehical, vehicles, vehicels, vehicular, cars, vehicle, automobiles, car
serious, grave, acute, serious-minded, seriousness, gravity, serious-faced
impossible, hard/impossible, audacious-impossible, impractical, unable
growth, grow, growing, increases, grows, increase, rise, growls, rising
liter, litering, lited, liters, literate, literature, literary, literal, lite, obliterated
journey, journeys, voyage, trip, roadtrip, travel, tourney, voyages, road-trip
babyyyyyyy, baby, babys, babe, baby.i, babydoll, babycake, darling
dirty, dirtyyyyyy,    lthy, down-and-dirty, dirtying, dirties, ugly, dirty-blonde
refunds, refunded, refund, repayment, reimbursement, rebate, repay
reimbursements, reimburse, repaying, repayments, rebates, rebating, reimburses
professor, professorships, professorship, teachers, professorial, teacher
prof., teaches, lecturers, teachings, instructors, headteachers, teacher-student
enormous, tremendous, large, big, vast, overwhelming, immense, giant
formidable, considerable, massive, huger, large-scale, great, daunting

table 9: nearest neighbors of charagram-phrase embeddings. above the double horizontal line are nearest neighbors of
words that were not in our training data, and below it are nearest neighbors of words that were in our training data.

nearest-neighbor search over a working vocabulary.6
the results, in table 8, show how the charagram-
phrase embeddings model negation.
in all cases
but one, the nearest neighbor is a paraphrase for
the bigram and the next neighbors are mostly para-
phrases as well. the paragram-phrase model,
unsurprisingly, is incapable of modeling negation.
in all cases, the nearest neighbor is not, as this word
carries much more weight than the word it modi   es.
the remaining nearest neighbors are either the mod-
i   ed word or stalled.

we did two additional nearest neighbor explo-
rations with our charagram-phrase model. in
the    rst, we collected the nearest neighbors for
words that were not in the training data (i.e. ppdb
xxl), but were in our working vocabulary. this
consisted of 59,660 words. in the second, we col-
lected nearest neighbors of words that were in our
training data which consisted of 37,765 tokens.

a sample of the nearest neighbors is shown in ta-
ble 9. several kinds of similarity are being captured
simultaneously by the model. one kind is similarity
in terms of spelling variation, including misspellings
(vehicals, vehicels, and vehicles) and repetition for
emphasis (baby and babyyyyyyy). another kind is
similarity in terms of morphological variants of a
shared root (e.g., journeying and journey). we also
see that the model has learned many strong synonym
relationships without signi   cant amounts of over-

6this

contained

and

evaluations,
ford sentiment
dataset
(up-to-casing) tokens.

ppdb-xxl,

all words
in two other

our
the stan-
task (socher et al., 2013) and the snli
resulting in 93,217 unique

in
datasets:

(bowman et al., 2015),

lapping id165s (e.g., vehicles, cars, and automo-
biles). we    nd these characteristics for words both
in and out of the training data. words in the training
data, which tend to be more commonly used, do tend
to have higher precision in their nearest neighbors
(e.g., see neighbors for huge). we noted occasional
mistakes for words that share a large number of n-
grams but are not paraphrases (see nearest neighbors
for litered which is likely a misspelling of littered).

id165
die
foo
pee
aiv
ngu
2

id165 embedding
dy, die, dead, dyi, rlif, mort, ecea, rpse, d aw
foo, eat, meal, alim, trit, feed, grai, din, nutr, toe
peed, hast, spee, fast, mpo , pace, vel, loci, ccel
waiv, aive, boli, epea, ncel, abol, lift, bort, bol
ngue, uist, ongu, tong, abic, gual, fren, ocab, ingu
2 , 02, 02 , tw, dua, xx, ii , xx, o 14, d .2

table 10: nearest neighbors of character id165 embeddings
from our trained charagram-phrase model. the under-
score indicates a space, which signals the beginning or end of a
word.

lastly, since our model learns embeddings for
character id165s, we include an analysis of char-
acter id165 nearest neighbors in table 10. these
id165s appear to be grouped into themes, such as
death (   rst row), food (second row), and speed (third
row), but have different granularities. the id165s
in the last row appear in paraphrases of 2, whereas
the second-to-last row shows id165s in words like
french and vocabulary, which can broadly be classi-
   ed as having to do with language.

6 conclusion

we performed a careful empirical comparison of
character-based compositional architectures on three

nlp tasks. while most prior work has con-
sidered machine translation,
id38,
and syntactic analysis, we showed how character-
level modeling can improve semantic similarity
tasks, both quantitatively and with extensive qual-
itative analysis. we found a consistent
trend:
the simplest architecture converges fastest to high
performance. these results, coupled with those
from wieting et al. (2016), suggest that practitioners
should begin with simple architectures rather than
moving immediately to id56s and id98s. we re-
lease our code and trained models so they can be
used by the nlp community for general-purpose,
character-based text representation.

acknowledgments

to thank the developers of
we would like
theano
and
nvidia corporation for donating gpus used in
this research.

(theano development team, 2016)

appendix a training

for word and sentence similarity, we follow
the training procedure of wieting et al. (2015) and
wieting et al. (2016), described below. for part-of-
speech tagging, we follow the english penn tree-
bank training procedure of ling et al. (2015a).

for the similarity tasks, the training data consists
of a set x of phrase pairs hx1, x2i from the para-
phrase database (ppdb; ganitkevitch et al., 2013),
where x1 and x2 are assumed to be paraphrases. we
optimize a margin-based loss:

min

  

1

|x|  xhx1,x2i   x

max(0,        cos(g(x1), g(x2))

+ cos(g(x1), g(t1))) + max(0,        cos(g(x1), g(x2))

+ cos(g(x2), g(t2)))(cid:19) +    k  k2

where g is the embedding function in use,    is the
margin, the full set of parameters is contained in   
(e.g., for the charagram model,    = hw, bi),   
is the l2 id173 coef   cient, and t1 and t2
are carefully selected negative examples taken from
a mini-batch during optimization (discussed below).

intuitively, we want the two phrases to be more sim-
ilar to each other (cos(g(x1), g(x2))) than either is
to their respective negative examples t1 and t2, by a
margin of at least   .

a.1 selecting negative examples
to select t1 and t2 in eq. 2, we tune the choice
between two approaches. the    rst, max, sim-
ply chooses the most similar phrase in some set of
phrases (other than those in the given phrase pair).
for simplicity and to reduce the number of tunable
parameters, we use the mini-batch for this set, but it
could be a separate set. formally, max corresponds
to choosing t1 for a given hx1, x2i as follows:

t1 =

argmax

cos(g(x1), g(t))

t:ht,  i   xb\{hx1,x2i}

where xb     x is the current mini-batch. that is,
we want to choose a negative example ti that is sim-
ilar to xi according to the current model parameters.
the downside of this approach is that we may oc-
casionally choose a phrase ti that is actually a true
paraphrase of xi.

the second strategy selects negative examples us-
ing max with id203 0.5 and selects them ran-
domly from the mini-batch otherwise. we call this
sampling strategy mix. we tune over the choice of
strategy in our experiments.

appendix b tuning word similarity

models

for all architectures, we tuned over the mini-batch
size (25 or 50) and the type of sampling used (mix
or max).    was set to 0.4 and the dimensionality d
of each model was set to 300.

for the charagram model, we tuned the acti-
vation function h (tanh or linear) and regulariza-
tion coef   cient    (over {10   4, 10   5, 10   6}). the
id165 vocabulary v contained all 100,283 charac-
ter id165s (n     {2, 3, 4}) in the lexical section of
ppdb xxl.

for charid98 and charlstm, we randomly ini-
tialized 300 dimensional character embeddings for
all unique characters in the training data. for char-
lstm, we tuned over whether to include an output
gate. for charid98, we tuned the    lter activation
function (recti   ed linear or tanh) and tuned the acti-
vation for the fully-connected layer (tanh or linear).

dataset

50% 75% max

charid98

charlstm

paragram-

charagram-

phrase

phrase

msrpar
msrvid
smt-eur
onwn
smt-news
sts 2012 average
headline
onwn
fnwn
smt
sts 2013 average
deft forum
deft news
headline
images
onwn
tweet news
sts 2014 average
answers-forums
answers-students
belief
headline
images
sts 2015 average
2014 sick
2015 twitter
average

51.5
75.5
44.4
60.8
40.1
54.5
64.0
52.8
32.7
31.8
45.3
36.6
66.2
67.1
75.6
78.0
64.7
64.7
61.3
67.6
67.7
74.2
80.4
70.2
71.4
49.9
59.7

57.6
80.3
48.1
65.9
45.4
59.5
68.3
64.8
38.1
34.6
51.4
46.8
74.0
75.4
79.0
81.1
72.2
71.4
68.2
73.6
72.2
80.8
84.3
75.8
79.9
52.5
65.6

73.4
88.0
56.7
72.7
60.9
70.3
78.4
84.3
58.2
40.4
65.3
53.1
78.5
78.4
83.4
87.5
79.2
76.7
73.9
78.8
77.2
84.2
87.1
80.2
82.8
61.9
73.6

50.6
72.2
50.9
61.8
46.8
56.5
68.1
54.4
26.4
42.0
47.7
45.6
73.5
67.4
68.7
66.8
66.2
64.7
47.2
75.0
65.7
72.2
70.0
66.0
62.9
48.6
59.2

23.6
47.2
38.5
53.0
38.3
40.1
54.4
33.5
10.6
24.2
30.7
19.4
54.6
53.7
53.6
46.1
53.6
46.8
27.3
63.1
22.6
61.7
52.8
45.5
50.3
39.9
41.9

42.9
76.1
45.5
70.7
57.2
58.5
72.3
70.5
47.5
40.3
57.7
50.2
73.2
69.1
80.0
79.9
76.8
71.5
67.4
78.3
76.0
74.5
82.2
75.7
72.0
52.7
66.2

59.7
79.6
57.2
68.7
65.2
66.1
75.0
67.8
42.3
43.6
57.2
62.7
77.0
74.3
77.6
77.0
79.1
74.7
61.5
78.5
77.2
78.7
84.4
76.1
70.0
53.6
68.7

table 11: results on semeval textual similarity datasets (pearson   s r    100). the highest score in each row is in boldface (omitting
the of   cial task score columns).

for both the charlstm and charid98 models, we
tuned    over {10   4, 10   5, 10   6}.

appendix c full sentence similarity

results

table 11 shows the full results of our sentence simi-
larity experiments.

references

[agirre et al.2012] eneko agirre, mona diab, daniel cer,
and aitor gonzalez-agirre. 2012. semeval-2012 task
6: a pilot on semantic textual similarity. in proceed-
ings of the first joint conference on lexical and com-
putational semantics-volume 1: proceedings of the
main conference and the shared task, and volume 2:
proceedings of the sixth international workshop on
semantic evaluation. association for computational
linguistics.

[agirre et al.2013] eneko agirre, daniel cer, mona diab,
2013.
aitor gonzalez-agirre, and weiwei guo.
*sem 2013 shared task: semantic textual similarity.
in second joint conference on lexical and computa-
tional semantics (*sem), volume 1: proceedings of

the main conference and the shared task: semantic
textual similarity.

[agirre et al.2014] eneko agirre, carmen banea, claire
cardie, daniel cer, mona diab, aitor gonzalez-
agirre, weiwei guo, rada mihalcea, german rigau,
and janyce wiebe. 2014. semeval-2014 task 10:
multilingual semantic textual similarity. in proceed-
ings of the 8th international workshop on semantic
evaluation (semeval 2014).

[agirre et al.2015] eneko agirre, carmen banea, claire
cardie, daniel cer, mona diab, aitor gonzalez-
agirre, weiwei guo, inigo lopez-gazpio, montse
maritxalar, rada mihalcea, german rigau, larraitz
uria, and janyce wiebe. 2015. semeval-2015 task 2:
semantic textual similarity, english, spanish and pilot
on interpretability.
in proceedings of the 9th inter-
national workshop on semantic evaluation (semeval
2015).

[alexandrescu and kirchhoff2006] andrei alexandrescu
and katrin kirchhoff. 2006. factored neural language
models. in proceedings of the human language tech-
nology conference of the naacl, companion vol-
ume: short papers, pages 1   4, new york city, usa,
june. association for computational linguistics.

[ballesteros et al.2015] miguel ballesteros, chris dyer,
and noah a. smith. 2015. improved transition-based
parsing by modeling characters instead of words with

in proceedings of the 2015 conference on
lstms.
empirical methods in natural language processing,
pages 349   359, lisbon, portugal, september. associ-
ation for computational linguistics.

[bengio et al.2009] yoshua bengio, j  er  ome louradour,
ronan collobert, and jason weston. 2009. curricu-
lum learning. in proceedings of the 26th annual inter-
national conference on machine learning, pages 41   
48. acm.

[botha and blunsom2014] jan a. botha and phil blun-
som. 2014. compositional morphology for word rep-
resentations and language modelling. in international
conference on machine learning (icml).

[bowman et al.2015] samuel r bowman, gabor angeli,
christopher potts, and christopher d manning. 2015.
a large annotated corpus for learning natural language
id136. arxiv preprint arxiv:1508.05326.

[bowman et al.2016] samuel r. bowman, jon gauthier,
abhinav rastogi, raghav gupta, christopher d. man-
ning, and christopher potts. 2016. a fast uni   ed
model for parsing and sentence understanding. in pro-
ceedings of acl.

[chen et al.2015] xinxiong chen, lei xu, zhiyuan liu,
maosong sun, and huanbo luan. 2015. joint learn-
ing of character and id27s. in proceedings
of international joint conference on arti   cial intelli-
gence (ijcai).

[chrupa  a2013] grzegorz chrupa  a. 2013. text segmen-
arxiv

tation with character-level text embeddings.
preprint arxiv:1309.4628.

[chrupa  a2014] grzegorz chrupa  a. 2014. normalizing
tweets with edit scripts and recurrent neural embed-
dings.
in proceedings of the 52nd annual meeting
of the association for computational linguistics (vol-
ume 2: short papers), pages 680   686. association for
computational linguistics.

[chung et al.2016] junyoung chung, kyunghyun cho,
and yoshua bengio.
2016. a character-level de-
coder without explicit segmentation for neural ma-
chine translation. arxiv preprint arxiv:1603.06147.

[costa-juss`a and fonollosa2016] marta r. costa-juss`a
character-
arxiv preprint

and jos  e a. r. fonollosa.
based id4.
arxiv:1603.00810.

2016.

[dos santos and guimar  aes2015] cicero dos santos and
victor guimar  aes.
2015. boosting named entity
recognition with neural character embeddings. in pro-
ceedings of the fifth named entity workshop, pages
25   33, beijing, china, july. association for computa-
tional linguistics.

[dos santos and zadrozny2014] cicero n. dos santos and
bianca zadrozny. 2014. learning character-level rep-
resentations for part-of-speech tagging.
in proceed-

ings of the 31st international conference on machine
learning (icml-14), pages 1818   1826.

[el-desoky mousa et al.2013] amr el-desoky mousa,
hong-kwang jeff kuo, lidia mangu, and hagen
soltau. 2013. morpheme-based feature-rich language
models using deep neural networks for lvcsr of egyp-
tian arabic.
in 2013 ieee international conference
on acoustics, speech and signal processing (icassp),
pages 8435   8439. ieee.

[evang et al.2013] kilian evang, valerio basile, grze-
gorz chrupa  a, and johan bos. 2013. elephant: se-
quence labeling for word and sentence segmentation.
in proceedings of the 2013 conference on empiri-
cal methods in natural language processing, pages
1422   1426. association for computational linguis-
tics.

[faruqui and dyer2015] manaal faruqui and chris dyer.
2015. non-distributional word vector representations.
arxiv preprint arxiv:1506.05230.

[finkelstein et al.2001] lev

finkelstein,

evgeniy
gabrilovich, yossi matias, ehud rivlin, zach
solan, gadi wolfman, and eytan ruppin.
2001.
placing search in context: the concept revisited.
in
proceedings of the 10th international conference on
world wide web. acm.

[ganitkevitch et al.2013] juri

ben-
jamin van durme, and chris callison-burch. 2013.
ppdb: the paraphrase database. in hlt-naacl. the
association for computational linguistics.

ganitkevitch,

[gers et al.2003] felix a gers, nicol n schraudolph, and
j  urgen schmidhuber. 2003. learning precise timing
with lstm recurrent networks. the journal of machine
learning research, 3.

[graves2013] alex graves. 2013. generating sequences
arxiv preprint

with recurrent neural networks.
arxiv:1308.0850.

[he et al.2015] hua he, kevin gimpel, and jimmy lin.
2015. multi-perspective sentence similarity modeling
with convolutional neural networks. in proceedings of
the 2015 conference on empirical methods in natural
language processing.

[hill et al.2014] felix hill, kyunghyun cho, sebastien
jean, coline devin, and yoshua bengio. 2014. em-
bedding word similarity with neural machine transla-
tion. arxiv preprint arxiv:1412.6448.

[hill et al.2015] felix hill, roi reichart, and anna ko-
rhonen.
2015. siid113x-999: evaluating semantic
models with (genuine) similarity estimation. compu-
tational linguistics, 41(4).

[hill et al.2016] felix hill, kyunghyun cho, and anna
korhonen. 2016. learning distributed representa-
tions of sentences from unlabelled data. arxiv preprint
arxiv:1602.03483.

[hochreiter and schmidhuber1997] sepp hochreiter and
j  urgen schmidhuber. 1997. long short-term memory.
neural computation, 9(8).

[huang et al.2013] po-sen huang, xiaodong he, jian-
feng gao, li deng, alex acero, and larry heck.
2013. learning deep structured semantic models for
web search using clickthrough data.
in proceedings
of the 22nd acm international conference on confer-
ence on information & knowledge management, pages
2333   2338. acm.

[iyyer et al.2015] mohit iyyer, varun manjunatha, jordan
boyd-graber, and hal daum  e iii. 2015. deep un-
ordered composition rivals syntactic methods for text
classi   cation.
in proceedings of the 53rd annual
meeting of the association for computational linguis-
tics and the 7th international joint conference on nat-
ural language processing (volume 1: long papers).

[j  ozefowicz et al.2016] rafal j  ozefowicz, oriol vinyals,
mike schuster, noam shazeer, and yonghui wu.
2016. exploring the limits of id38.
corr, abs/1602.02410.

[kim et al.2015] yoon kim, yacine jernite, david son-
tag, and alexander m. rush. 2015. character-aware
neural language models. corr, abs/1508.06615.

[kim2014] yoon kim. 2014. convolutional neural net-
works for sentence classi   cation.
in proceedings of
the 2014 conference on empirical methods in natural
language processing (emnlp).

[kingma and ba2014] diederik kingma and jimmy ba.
2014. adam: a method for stochastic optimization.
arxiv preprint arxiv:1412.6980.

[lazaridou et al.2013] angeliki

lazaridou,

marco
marelli, roberto zamparelli, and marco baroni.
2013. compositional-ly derived representations of
morphologically complex words in distributional
semantics. in proceedings of the 51st annual meeting
of
the association for computational linguistics
(volume 1: long papers), pages 1517   1526, so   a,
bulgaria, august. association for computational
linguistics.

[ling et al.2015a] wang ling, chris dyer, alan w black,
isabel trancoso, ramon fermandez, silvio amir, luis
marujo, and tiago luis. 2015a. finding function in
form: compositional character models for open vo-
cabulary word representation.
in proceedings of the
2015 conference on empirical methods in natural
language processing, pages 1520   1530, lisbon, por-
tugal, september. association for computational lin-
guistics.

[ling et al.2015b] wang ling,

dyer, and alan w. black.
based id4.
arxiv:1511.04586.

isabel trancoso, chris
character-
arxiv preprint

2015b.

[luong and manning2016] minh-thang

and
christopher d. manning. 2016. achieving open vo-
cabulary id4 with hybrid word-
character models. arxiv preprint arxiv:1604.00788.

luong

[luong et al.2013] thang luong, richard socher, and
christopher manning. 2013. better word represen-
tations with id56s for morphol-
ogy.
in proceedings of the seventeenth conference
on computational natural language learning, pages
104   113, so   a, bulgaria, august. association for
computational linguistics.

[marelli et al.2014] marco marelli, luisa bentivogli,
marco baroni, raffaella bernardi, stefano menini,
and roberto zamparelli. 2014. semeval-2014 task
1: evaluation of compositional distributional semantic
models on full sentences through semantic relatedness
and id123. in proceedings of the 8th inter-
national workshop on semantic evaluation (semeval
2014).

[mitchell and lapata2010] jeff mitchell and mirella la-
pata. 2010. composition in distributional models of
semantics. cognitive science, 34(8).

diarmuid

[mrk  si  c et al.2016] nikola mrk  si  c,

  o
s  eaghdha, blaise thomson, milica ga  si  c, lina
rojas-barahona, pei-hao su, david vandyke, tsung-
hsien wen, and steve young. 2016. counter-   tting
word vectors to linguistic constraints. arxiv preprint
arxiv:1603.00892.

[pavlick et al.2015] ellie pavlick, pushpendre rastogi,
juri ganitkevich, benjamin van durme, and chris
callison-burch. 2015. ppdb 2.0: better paraphrase
ranking,    ne-grained entailment relations, word em-
beddings, and style classi   cation. in proceedings of
the annual meeting of the association for computa-
tional linguistics.

[pennington et al.2014] jeffrey

pennington,

richard
socher, and christopher d manning. 2014. glove:
global vectors for word representation. proceed-
ings of empirical methods in natural language
processing (emnlp 2014).

[qiu et al.2014] siyu qiu, qing cui, jiang bian, bin gao,
and tie-yan liu. 2014. co-learning of word repre-
sentations and morpheme representations. in proceed-
ings of coling 2014, the 25th international confer-
ence on computational linguistics: technical papers,
pages 141   150, dublin, ireland, august. dublin city
university and association for computational lin-
guistics.

[schwartz et al.2015] roy schwartz, roi reichart, and
ari rappoport. 2015. symmetric pattern based word
embeddings for improved word similarity prediction.
in proceedings of conll 2015.

[socher et al.2011] richard socher, eric h huang, jef-
frey pennin, christopher d manning, and andrew y

ng. 2011. dynamic pooling and unfolding recursive
autoencoders for paraphrase detection. in advances in
neural information processing systems.

[socher et al.2013] richard socher, alex perelygin, jean
wu, jason chuang, christopher d. manning, andrew
ng, and christopher potts. 2013. recursive deep
models for semantic compositionality over a sentiment
treebank. in proceedings of the 2013 conference on
empirical methods in natural language processing.
[soricut and och2015] radu soricut and franz och.
2015. unsupervised morphology induction using
id27s. in proc. naacl.

[sperr et al.2013] henning sperr, jan niehues, and alex
waibel. 2013. letter id165-based input encoding for
continuous space language models. in proceedings of
the workshop on continuous vector space models and
their compositionality, pages 30   39, so   a, bulgaria,
august. association for computational linguistics.

[srivastava et al.2014] nitish srivastava, geoffrey hin-
ton, alex krizhevsky, ilya sutskever, and ruslan
salakhutdinov. 2014. dropout: a simple way to pre-
vent neural networks from over   tting. the journal of
machine learning research, 15(1):1929   1958.

[sutskever et al.2011] ilya sutskever, james martens, and
geoffrey e hinton. 2011. generating text with recur-
rent neural networks. in proceedings of the 28th inter-
national conference on machine learning (icml-11),
pages 1017   1024.

[tai et al.2015] kai sheng tai, richard socher, and
improved semantic
christopher d manning. 2015.
representations from tree-structured long short-term
memory networks. arxiv preprint arxiv:1503.00075.
[theano development team2016] theano development
team. 2016. theano: a python framework for fast
computation of mathematical expressions. arxiv e-
prints, abs/1605.02688, may.

[wieting et al.2015] john wieting, mohit bansal, kevin
gimpel, karen livescu, and dan roth.
2015.
from paraphrase database to compositional paraphrase
model and back. transactions of the acl (tacl).

[wieting et al.2016] john wieting, mohit bansal, kevin
gimpel, and karen livescu. 2016. towards univer-
sal paraphrastic sentence embeddings. in proceedings
of international conference on learning representa-
tions.

[xu et al.2015] wei xu, chris callison-burch,

and
william b dolan. 2015. semeval-2015 task 1: para-
phrase and semantic similarity in twitter (pit).
in
proceedings of the 9th international workshop on se-
mantic evaluation (semeval).

[zhang et al.2015] xiang zhang, junbo zhao, and yann
lecun. 2015. character-level convolutional networks
for text classi   cation. in advances in neural informa-
tion processing systems 28.

