chains of reasoning over entities, relations, and text using

recurrent neural networks

rajarshi das, arvind neelakantan, david belanger, andrew mccallum

college of information and computer sciences

{rajarshi, arvind, belanger, mccallum}@cs.umass.edu

university of massachusetts amherst

7
1
0
2

 

y
a
m
1

 

 
 
]
l
c
.
s
c
[
 
 

3
v
6
2
4
1
0

.

7
0
6
1
:
v
i
x
r
a

abstract

our goal is to combine the rich multi-
step id136 of symbolic logical reason-
ing with the generalization capabilities of
neural networks. we are particularly in-
terested in complex reasoning about enti-
ties and relations in text and large-scale
knowledge bases (kbs). neelakantan et
al. (2015) use id56s to compose the dis-
tributed semantics of multi-hop paths in
kbs; however for multiple reasons, the
approach lacks accuracy and practical-
ity. this paper proposes three signi   -
cant modeling advances: (1) we learn to
jointly reason about relations, entities, and
entity-types; (2) we use neural attention
modeling to incorporate multiple paths;
(3) we learn to share strength in a sin-
gle id56 that represents logical compo-
sition across all relations. on a large-
scale freebase+clueweb prediction task,
we achieve 25% error reduction, and a
53% error reduction on sparse relations
due to shared strength. on chains of rea-
soning in id138 we reduce error in
mean quantile by 84% versus previous
state-of-the-art.1.

introduction

1
there is a rising interest in extending neural net-
works to perform more complex reasoning, for-
merly addressed only by symbolic and logical rea-
soning systems. so far this work has mostly fo-
cused on small or synthetic data (grefenstette,
2013; bowman et al., 2015; rockt  aschel and
riedel, 2016). our interest is primarily in reason-
ing about large knowledge bases (kbs) with di-

1the

code

and

data

are

available

at

https://rajarshd.github.io/chainsofreasoning/

i. place.birthpa, bq       was born in   pa, xq^
   commonly known as   px, bq
ii. location.containspa, bq    (nationality)  1pa, xq^
place.birthpx, bq
iii. book.characterspa, bq      aka   pa, xq^
(theater.character.plays)  1px, bq
iv. cause.deathpa, bq      contracted   pa, bq

table 1: several highly probable clauses learnt
by our model. the textual relations are shown in
quotes and italicized. our model has the ability to
combine textual and schema relations. r  1 is the
inverse relation r, i.e. rpa, bq    r  1pb, aq.

verse semantics, populated from text. one method
for populating a kb from text (and for repre-
senting diverse semantics in the kb) is universal
schema (riedel et al., 2013; verga et al., 2016),
which learns vector embeddings capturing the se-
mantic positioning of relation types - the union of
all input relation types, both from the schemas of
multiple structured kbs, as well as expressions of
relations in natural language text.

an important reason to populate a kb is to
support not only look-up-style question answer-
ing, but reasoning on its entities and relations in
order to make id136s not directly stored in
the kb. kbs are often highly incomplete (min
et al., 2013), and reasoning can    ll
in these
missing facts. the    matrix completion    mecha-
nism that underlies the common implementation
of universal schema can thus be seen as a sim-
ple type of reasoning, as can other work in ten-
sor factorization (nickel et al., 2011; bordes et
al., 2013; socher et al., 2013). however these
methods can be understood as operating on sin-
gle pieces of evidence: for example, inferring that
microsoft   located-in   seattle implies microsoft   

hq-in   seattle.

a highly desirable, richer style of reasoning
makes id136s from horn clauses that form
multi-hop paths containing three or more enti-
ties in the kb   s entity-relation graph. for ex-
ample, we may have no evidence directly linking
melinda gates and seattle, however, we may in-
fer with some likelihood that melinda   lives-in   
seattle, by observing that the kb contains the
path melinda   spouse   bill   chairman   microsoft   
hq-in   seattle (fig. 1a).

symbolic rules of this form are learned by the
path ranking algorithm (pra) (lao et al., 2011).
dramatic improvement in generalization can be
obtained by reasoning about paths, not in terms
of relation-symbols, but universal schema style
relation-vector-embeddings. this is done by nee-
lakantan et al. (2015), where id56s semantically
compose the per-edge relation embeddings along
an arbitrary-length path, and output a vector em-
bedding representing the inferred relation between
the two entities at the end-points of the path. this
approach thus represents a key example of com-
plex reasoning over horn clause chains using neu-
ral networks. however, for multiple reasons de-
tailed below it is inaccurate and impractical.

this paper presents multiple modeling advances
that signi   cantly increase the accuracy and prac-
ticality of id56-based reasoning on horn clause
chains in large-scale kbs. (1) previous work, in-
cluding (lao et al., 2011; neelakantan et al., 2015;
guu et al., 2015) reason about chains of relations,
but not the entities that form the nodes of the
path.
ignoring entities and entity-types leads to
frequent errors, such as inferring that yankee sta-
dium serves as a transportation hub for ny state.
in our work, we jointly learn and reason about
relation-types, entities, and entity-types. (2) the
same previous work takes only a single path as ev-
idence in inferring new predictions. however, as
shown in figure 1b, multiple paths can provide ev-
idence for a prediction. in our work, we use neu-
ral attention mechanisms to reason about multiple
paths. we use a novel pooling function which does
soft attention during gradient step and    nd it to
work better. (3) the most problematic impracti-
cality of the above previous work2 for application
to kbs with broad semantics is their requirement
to train a separate model for each relation-type to
be predicted. in contrast, we train a single, high-

2with exception of (guu et al., 2015)

capacity id56 that can predict all relation types.
in addition to ef   ciency advantages, our approach
signi   cantly increases accuracy because the multi-
task nature of the training shares strength in the
common id56 parameters.

we evaluate our new approach on a large
scale dataset of freebase entities, relations and
clueweb text.
in comparison with the previous
best on this data, we achieve an error reduction of
25% in mean average precision (map). in an ex-
periment specially designed to explore the bene   ts
of sharing strength with a single id56, we show a
54% error reduction in relations that are available
only sparsely at training time. we also evaluate on
a second data set, chains of reasoning in id138.
in comparison with previous state-of-the-art (guu
et al., 2015) our model achieves a 84% reduction
in error in mean quantile.

2 background
in this section, we introduce the compositional
model (path-id56) of neelakantan et al. (2015).
the path-id56 model
takes in input a path
between two entities and infers new relations
between them. reasoning is performed non-
atomically about conjunctions of relations in an
arbitrary length path by composing them with a
recurrent neural network (id56). the representa-
tion of the path is given by the last hidden state of
the id56 obtained after processing all the relations
in the path.
let pes, etq be an entity pair and s denote
the set of paths between them. the set s is
obtained by doing id93 in the knowl-
edge graph starting from es till et. let       
tes, r1, e1, r2, . . . , rk, etu p s denote a path be-
tween pes, etq. the length of a path is the num-
ber of relations in it, hence, plenp  q     kq. let
yrt p rd denote the vector representation of rt.
the path-id56 model combines all the relations
in    sequentially using a id56 with an intermedi-
ate representation ht p rh at step t given by

ht     fpwr

hhht  1 ` wr

rtq.
ihyr

hh p rh  h and wr

(1)
ih p rd  h are the param-
wr
eters of the id56. here r denotes the query rela-
tion. path-id56 has a specialized model for pre-
dicting each query relation r, with separate param-
eters pyr
ihq for each r. f is the sig-
moid function. the vector representation of path
   py  q is the last hidden state hk. the similarity of

hh, wr

rt, wr

(a)

(b)

figure 1: the nodes in the id13s represent entities and the labeled edges represent relations.
(a) a path between    melinda    and    seattle    combining relations from two different documents. (b) there
are multiple paths between entities in a id13. the top two paths are predictive of the fact
that melinda may    live in    seattle, but the bottom (   ctitious) path isn   t.

figure 2: at each step, the id56 consumes both entity and relation vectors of the path. the entity
representation can be obtained from its types. the path vector y   is the last hidden state. the parameters
of the id56 and relation embeddings are shared across all query relations. the dot product between
the    nal representation of the path and the query relation gives a con   dence score, with higher scores
indicating that the query relation exists between the entity pair.

y   with the query relation vector yr is computed
as the dot product between them:

scorep  , rq     y      yr

(2)

pairs of entities may have several paths connecting
them in the id13 (figure 1b). path-
id56 computes the id203 that the entity pair
pes, etq participates in the query relation prq by,
ppr|es, etq     max   pscorep  , rqq,@   p s (3)

where    is the sigmoid function.

path-id56 and other models such as the path
ranking algorithm (pra) and its extensions (lao
et al., 2011; lao et al., 2012; gardner et al., 2013;
gardner et al., 2014) makes it impractical to be
used in downstream applications, since it requires
training and maintaining a model for each relation

type. moreover, parameters are not shared across
multiple target relation types leading to large num-
ber of parameters to be learned from the training
data.

in (3), the path-id56 model selects the maxi-
mum scoring path between an entity pair to make a
prediction, possibly ignoring evidence from other
important paths. not only is this a waste of com-
putation (since we have to compute a forward pass
for all the paths anyway), but also the relations in
all other paths do not get any gradients updates
during training as the max operation returns zero
gradient for all other paths except the maximum
scoring one. this is especially ineffective during
the initial stages of the training since the maxi-
mum probable path will be random.

the path-id56 model and other multi-hop
id36 approaches (such as guu

january 15, 2000tech pioneer bill gates stepped down today as chief executive officer of microsoft, the seattle-headquartered software giant.he will continue to serve as the chairman... feb 6, 1999william h. gates,chairman of microsoft corp. and his wife melinda gave $3.3b to their two foundation, the president of one of the foundation said yesterday..seattlemelindabillmicrosoftheadquarteredchairmanspouselives in??melindagates foundationchairhqinseattlespousebilljane doefriendchairterrapowerhqinbellevuenearbornlives in??abc abc countryofhq(target relation)similarity metric0.94d q microsoft  isbasedinseattle  locatedinusa  (dummy_rel)washington  locatedin(path vector)et al. (2015)) ignore the entities in the path.
the following paths jfk   locatedin   
consider
nyc   locatedin   ny and yankee
stadium   
locatedin   nyc   locatedin   ny. to predict
the
the path-id56 model
airport serves relation,
assigns the same scores to both the paths even
though the    rst path should be ranked higher. this
is because the model does not have information
about the entities and just uses the relations in the
path for prediction.

3 modeling approach
3.1 shared parameter architecture
previous section discussed the problems associ-
ated with per-relation modeling approaches. in re-
sponse, we share the relation type representation
and the composition matrices of the id56 across
all target relations enabling lesser number of pa-
rameters for the same training data. we refer to
this model as single-model. note that this is just
id72 (caruana, 1997) among pre-
diction of target relation types with an underlying
shared parameter architecture. the id56 hidden
state in (1) is now given by:

ht     fpwhhht  1 ` wihyrtq.

(4)

readers should take note that the parameters here
are independent of each target relation r.

model training
we train the model using existing observed facts
(triples) in the kb as positive examples and un-
observed facts as negative examples. let r    
t  1,   2, . . . ,   nu denote the set of all query rela-
tion types that we train for. let    `
r denote
the set of positive and negative triples for all the
relation types in r. the parameters of the model
are trained to minimize the negative log-likelihood
of the data.
lp  ,    `

log ppr|es, etq

r,      

  

r,      

rq        1
  

m

`

  es,  et,  rp     
r

es,et,rp   `
r

logp 1    pp  r|  es,   etqq

(5)

here m is the total number of training examples
and    denotes the set of all parameters of the
model (lookup table of embeddings (shared) and
parameters of the id56 (shared)).
it should be

noted that the path-id56 model has a separate loss
function for each relation r p r which depends
only on the relevant subset of the data.

3.2 score pooling
in this section, we introduce new methods of score
pooling that takes into account multiple paths be-
tween an entity pair. let ts1, s2, . . . , snu be the
similarity scores (equation 2) for n paths con-
necting an entity pair pes, etq. the id203
for entity pair pes, etq to participate in relation r
(equation 3) is now given by,

1. top-(k): a straightforward extension of the
   max    approach in which we average the top
k scoring paths. let k denote the indices of
top-k scoring paths.

ppr|es, etq       p 1
k

sjq,@j p k

  

j

2. average: here, the    nal score is the average

of scores of all the paths.

ppr|es, etq       p 1
n

n  

i   1

siq

  

3. logsumexp:

in this approach the pooling
layer is a smooth approximation to the    max   
function - logsumexp (lse). given a vector
of scores, the lse is calculated as

lseps1, s2, . . . , snq     logp

exppsiqq

i

and hence the id203 of the triple is,
ppr|e1, e2q       plseps1, s2, . . . , snqq

the average and the lse pooling functions apply
non-zero weights to all the paths during id136.
however only a few paths between an entity pair
  
is predictive of a query relation. lse has another
    exppsiq
desirable property since blsebsi
i exppsiq. this
means that during the back-propagation step, ev-
ery path will receive a share of the gradient propor-
tional to its score and hence this is a kind of novel
neural attention during the gradient step. in con-
trast, for averaging, every path will receive equal
nq share of the gradient. top-(k) (similar to
p 1
max) receives sparse gradients.

incorporating entities

3.3
a straightforward way of incorporating entities is
to include entity representations (along with re-
lations) as input to the id56. learning separate
representations of entity, however has some disad-
vantages. the distribution of entity occurrence is
heavy tailed and hence it is hard to learn good rep-
resentations of rarely occurring entities. to allevi-
ate this problem, we use the entity types present in
the kb as described below.

most kbs have annotated types for entities and
each entity can have multiple types. for exam-
ple, melinda gates has types such as ceo, duke
university alumni, philanthropist, american cit-
izen etc. we obtain the entity representation by a
simple addition of the entity type representations.
the entity type representations are learned during
training. we limit the number of entity types for
an entity to 7 most frequently occurring types in
the kb. let yet p rm denote the representation
of entity et, then 4 now becomes
ht     fpwhhht  1 ` wihyrt ` wehyetq (6)
weh p rm  h is the new parameter matrix
for projecting the entity representation. figure
2 shows our model with an example path be-
tween entities (microsoft, usa) with country-
ofhq (country of head-quarters) as the query re-
lation.

4 related work
two early works on extracting clauses and rea-
soning over paths are sherlock (schoenmack-
ers et al., 2010) and the path ranking algorithm
(pra) (lao et al., 2011). sherlock extracts
purely symbolic clauses by exhaustively explor-
ing relational paths of increasing length. pra re-
places exhaustive search by id93. ob-
served paths are used as features for a per-target-
relation binary classi   er. lao et al. (2012) extend
pra by augmenting kb-schema relations with
observed text patterns. however, these methods do
not generalize well to millions of distinct paths ob-
tained from random exploration of the kb, since
each unique path is treated as a singleton, where
no commonalities between paths are modeled. in
response, pre-trained vector representations have
been used in pra to tackle the feature explo-
sion (gardner et al., 2013; gardner et al., 2014)
but still rely on a classi   er using atomic path fea-
tures.yang et al. (2015) also extract horn rules but

stats
# freebase relation types
# textual relation types
# query relation types
# entity pairs
# unique entity types
avg. path length
max path length
total # paths

#

27,791
23,599

46

3.22m
2218
4.7
7

191m

table 2: statistics of the dataset.

they restrict it to a length of 3 and are restricted
to schema types. zeng et al. (2016) show im-
provements in id36 by incorporating
sentences which contain one entity by connecting
them through a path.

guu et al. (2015) introduce new compositional
techniques by modeling additive and multiplica-
tive interactions between relation matrices in the
path. however they model only a single path be-
tween an entity pair in-contrast to our ability to
consider multiple paths. toutanova et al. (2016)
improves upon them by additionally modeling the
intermediate entities in the path and modeling
multiple paths. however, in their approach they
have to store scores for intermediate path length
for all entity pairs, making it prohibitive to be used
in our setting where we have more than 3m en-
tity pairs. they also model entities as just a scalar
weight whereas we learn both entity and type rep-
resentations. lastly it has been shown by nee-
lakantan et al. (2015) that non-linear composition
function out-performs linear functions (as used by
them) for id36 tasks.

the performance of id36 meth-
ods have been improved by incorporating entity
types for their candidate entities, both in sentence
level (roth and yih, 2007; singh et al., 2013) and
kb id36 (chang et al., 2014), and
in learning entailment rules (berant et al., 2011).
serban et al. (2016) use id56s to generate factoid
question from freebase.

5 results
data and experimental setup
we apply our models to the dataset released
by neelakantan et al. (2015), which is a sub-
set of freebase enriched with information from
clueweb. the dataset is comprised of a set of
triples (e1, r, e2) and also the set of paths con-
necting the entity pair (e1,e2) in the knowledge

graph. the triples extracted from clueweb con-
sists of sentences that contained entities linked to
freebase (orr et al., 2013). the phrase between
the two entities in the sentence forms the relation
type. to limit the number of textual relations, we
retain the two following words after the    rst en-
tity and two words before the second entity. we
also collect the entity type information from free-
base. table 2 summarizes some important statis-
tics. for the pathqa experiment, we use the same
train/dev/test split of id138 dataset released by
guu et al. (2015) and hence our results are directly
comparable to them. the id138 dataset has just
22 relation types and 38194 entities which is order
of magnitudes less than the dataset we use for re-
lation extraction tasks.

the dimension of the relation type representations
and the id56 hidden states are d, h     250 and the
entity and type embeddings have m     50 dimen-
sions. the path-id56 model has sigmoid units as
their activation function. however, we found rec-
ti   er units (relu) to work much better (le et al.,
2015)3 . for the path-query experiment, the di-
mension of entity, relation embeddings and hid-
den units are set to 100 (as used by guu et al.
(2015)). as our evaluation metric, we use the aver-
age precision (ap) to score the ranked list of entity
pairs. the map score is the mean ap across all
query relations. ap is a strict metric since it pe-
nalizes when an incorrect entity is ranked higher
above correct entities. also map approximates
the area under the precision recall curve (man-
ning et al., 2008). we use adam (kingma and
ba, 2014) for optimization for all our experiments
with the default hyperparameter settings (learning
rate = 1e  3,   1     0.9,   2     0.999,       1e  8).
statistical signi   cance for scores reported in table
3 were done with a paired-t test.

5.1 effect of pooling techniques
section 1 of table 3 shows the effect of the various
pooling techniques presented in section 3.2. it is
encouraging to see that logsumexp gives the best
results. this demonstrates the importance of con-
sidering information from all the paths. however,
avg. pooling performs the worst, which shows
that it is also important to weigh the paths scores
according to their values. figure 3 plots the train-
ing loss w.r.t gradient update step. due to non-zero
gradient updates for all the paths, the logsumexp

3even when compared to lstms (73.2 vs 72.4 in map)

figure 3: comparison of the training loss w.r.t
gradient update steps of various pooling meth-
ods. the loss of logsumexp decreases the fastest
among all pooling methods and hence leads to
faster training.

pooling strategy leads to faster training vs. max
pooling, which has sparse gradients. this is es-
pecially relevant during the early stages of train-
ing, where the argmax path is essentially a random
guess. the scores of max and lse pooling are sig-
ni   cant with (p    0.02).

5.2 comparison with multi-hop models
we next compare the performance of the single-
model with two other multi-hop models - path-
id56 and pra(lao et al., 2011). both of these ap-
proaches train an individual model for each query
relation. we also experiment with another exten-
sion of pra that adds bigram features (pra +
bigram). additionally, we run an experiment re-
placing the max-pooling of path-id56 with log-
sumexp. the results are shown in the second
section of table 3.
it is not surprising to see
that the single-model, which leverages parame-
ter sharing improves performance. it is also en-
couraging to see that logsumexp makes the path-
id56 baseline stronger. the scores of path-id56
(with lse) and single-model are signi   cant with
(p    0.005).

5.3 effect of incorporating entities
next, we provide quantitative results supporting
our claim that modeling the entities along a kb
path can improve reasoning performance. the last
section of table 3 lists the performance gain ob-
tained by injecting information about entities. we
achieve the best performance when we represent
entities as a function of their annotated types in
freebase (single-model + types) pp    0.005q.

gradient steps#10400.511.52training loss0.40.50.60.70.80.911.11.2logsumexpmaxmeantop-kmodel

single-model
single-model
single-model
single-model

pra

pra + bigram

path-id56
path-id56

single-model
pra + types
single-model

single-model + entity
single-model + types

single-model + entity + types

performance (%map)

68.77
55.80
68.20
70.11
64.43
64.93
65.23
68.43
70.11
64.18
70.11
71.74
73.26
72.22

pooling

max
avg.
top(k)

n/a
n/a
max

logsumexp

logsumexp
logsumexp

n/a

logsumexp
logsumexp
logsumexp
logsumexp

table 3: the    rst section shows the effectiveness of logsumexp as the score aggregation function. the
next section compares performance with existing multi-hop approaches and the last section shows the
performance achieved using joint reasoning with entities and types.

in comparison, learning separate representations
of entities (single-model + entities) gives slightly
worse performance. this is primarily because we
encounter many new entities during test time, for
which our model does not have a learned repre-
sentation. however the relatively limited number
of entity types helps us overcome the problem of
representing unseen entities. we also extend pra
to include entity type information (pra + types),
but this did not yield signi   cant improvements.

5.4 performance in limited data regime
in constructing our dataset, we selected query re-
lations with reasonable amounts of data. however,
for many important applications we have very lim-
ited data. to simulate this common scenario, we
create a new dataset by randomly selecting 23 out
of 46 relations and removing all but 1% of the pos-
itive and negative triples previously used for train-
ing. effectively, the difference between path-id56
and single-model is that single-model does mul-
titask learning, since it shares parameters for dif-
ferent target relation types. therefore, we expect
it to outperform path-id56 on this small dataset,
since this multitask learning provides additional
id173. we also experiment with an exten-
sion of single-model where we introduce an addi-
tional task for multitask learning, where we seek to
predict annotated types for entities. here, parame-
ters for the entity type embeddings are shared with
the single-model. supervision for this task is pro-
vided by the entity type annotation in the kb. we
train with a bayesian personalized ranking loss of
rendle et al. (2009). the results are listed in table
4. with single-model there is a clear jump in per-

model

path-id56

single-model

single-model + mtl

performance (%map)

22.06
63.33
64.81

table 4: model performance when trained with a
small fraction of the data.

formance as we expect. the additional multitask
training with types gives a very incremental gain.

5.5 answering path queries
guu et al. (2015) introduce a task of answering
questions formulated as path traversals in a kb.
unlike binary fact prediction, to answer a path
query, the model needs to    nd the set of correct
target entities    t    that can be reached by starting
from an initial entity    s    and then traversing the
path    p   . they model additive and multiplicative
interactions of relations in the path. it should be
noted that the compositional trans-e and bilinear-
diag have comparable number of parameters to our
model since they also represent relations as vec-
tors, however the bilinear model learns a dense
square matrix for each relation and hence has a lot
more number of parameters. hence, we compare
with trans-e and bilinear-diag models. bilinear-
diag has also been shown to outperform bilinear
models (yang et al., 2015).

instead of combining relations using simple ad-
ditions and multiplications, we propose to com-
bine the intermediate hidden representations hi
obtained from a id56 (via (4)) after consum-
ing relation ri at each step. let h denote the

horn clause (body)

without entities with entities universal

location.containspx, aq ^ location.containspa, yq
(person.nationality)  1px, aq ^ place.birthpa, yq
table 5: body of two clauses both of which are predictive of location.containspx, yq. first fact is univer-
sally true but the truth value of the second clause depends on the value of the entities in the clause. the
model without entity parameters cannot discriminate this and outputs a lower overall con   dence score.

0.9149
0.7702

0.949
0.9256

y
n

model

comp. bilinear diag

comp. trans-e

our model

mq
90.4
93.3
98.94

table 6: performance on path queries in id138.

sum of all intermediate representations hi. the
score of a triple ps, p, tq by our model is given by
s diagphqxt where diagphq represents a diagonal
xj
matrix with vector h as its diagonal elements.

we compare to the results reported by guu et
al. (2015) on the id138 dataset.
it should be
noted that the dataset is fairly small with just 22
relation types and an average path length of 3.07.
more importantly, there are only few unseen paths
during test time and only one path between an en-
tity pair, suggesting that this dataset is not an ideal
test bed for compositional neural models. the re-
sults are shown in table 6. mean quantile(mq) is
the fraction of incorrect entities which have been
scored lower than the correct entity. our model
achieves a 84% reduction in error when compared
to their best model.

as existential quanti   ers:

6 qualitative analysis
entities
ta-
ble 5 shows the body of two horn clauses.
both the clauses are predictive of
the fact
location.containspx, bq. the    rst clause is uni-
versally true irrespective of the entities present
in the chain (transitive property). however the
value of the second clause is only true conditional
on the instantiations of the entities. the score of
the path-id56 model is independent of the entity
values, whereas our model outputs a different
score based on the entities in the chain. we
average the scores across entities, which are
connected through this path and for which the
relation holds in column 3 (with entities).

for the    rst clause, which is independent of en-
tities, both models predict a high score. however

figure 4: length distribution of top-scoring paths

for the second clause, the model without entity
information predicts a lower score because this
path is seen in both positive and negative train-
ing examples and the model cannot condition on
the entities to learn to discriminate. however our
model predicts the true relations with high con   -
dence. this is a step towards the capturing exis-
tential quanti   cation for logical id136 in vec-
tor space.
length of clauses: figure 4 shows the length dis-
tribution of top scoring paths in the test set. the
distribution peaks at lengths    t3, 4, 5u, suggest-
ing that previous approaches (yang et al., 2015)
which restrict the length to 3 might limit perfor-
mance and generalizability.
limitation: a major limitation of our model is
inability to handle long textual patterns because of
sparsity. compositional approaches for modeling
text (toutanova et al., 2015; verga et al., 2016) are
a right step in this direction and we leave this as
future work.

7 conclusion
this paper introduces a single high capacity id56
model which allows chains of reasoning across
multiple relation types.
it leverages information
from the intermediate entities present in the path
between an entity pair and mitigates the problem
of unseen entities by representing them as a func-
tion of their annotated types. we also demonstrate
that pooling evidence across multiple paths im-
proves both training speed and accuracy. finally,

number of paths0200040006000800010000path length1234567we also address the problem of reasoning about
infrequently occurring relations and show signi   -
cant performance gains via multitasking.

references
jonathan berant, ido dagan, and jacob goldberger.
2011. global learning of typed entailment rules. in
naacl.

antoine bordes, nicolas usunier, alberto garc    a-
dur  an, jason weston, and oksana yakhnenko.
2013. translating embeddings for modeling multi-
relational data. in nips.

samuel r. bowman, gabor angeli, christopher potts,
and christopher d. manning. 2015. a large anno-
tated corpus for learning natural language id136.
in emnlp. association for computational linguis-
tics.

rich caruana. 1997. multitask learning. machine

learning.

kai-wei chang, wen tau yih, bishan yang, and
christopher meek. 2014. typed tensor decompo-
sition of knowledge bases for id36. in
emnlp.

matt gardner, partha pratim talukdar, bryan kisiel,
and tom m. mitchell. 2013.
improving learning
and id136 in a large knowledge-base using latent
syntactic cues. in emnlp.

matt gardner, partha talukdar, jayant krishnamurthy,
and tom mitchell. 2014. incorporating vector space
similarity in random walk id136 over knowledge
bases. in emnlp.

edward grefenstette. 2013. towards a formal distri-
butional semantics: simulating logical calculi with
tensors. lexical and computational semantics.

k. guu, j. miller, and p. liang. 2015. traversing

id13s in vector space. in emnlp.

diederik p. kingma and jimmy ba. 2014. adam:
corr,

a method for stochastic optimization.
abs/1412.6980.

ni lao, tom mitchell, and william w. cohen. 2011.
random walk id136 and learning in a large scale
in emnlp, stroudsburg, pa,
knowledge base.
usa.

ni lao, amarnag subramanya, fernando pereira, and
william w. cohen.
reading the web
with learned syntactic-semantic id136 rules. in
emnlp.

2012.

quoc v. le, navdeep jaitly, and geoffrey e. hinton.
2015. a simple way to initialize recurrent networks
of recti   ed linear units. corr.

christopher d. manning, prabhakar raghavan, and
hinrich sch  utze. 2008. introduction to information
retrieval.

bonan min, ralph grishman, li wan, chang wang,
and david gondek. 2013. distant supervision for
id36 with an incomplete knowledge
base. in naacl.

arvind neelakantan, benjamin roth, and andrew mc-
callum. 2015. compositional vector space models
in acl, beijing,
for knowledge base completion.
china.

patrick verga, david belanger, emma strubell, ben-
jamin roth, and andrew mccallum. 2016. multi-
lingual id36 using compositional uni-
versal schema.

bishan yang, wen-tau yih, xiaodong he, jianfeng
gao, and li deng. 2015. embedding entities and
relations for learning and id136 in knowledge
bases. iclr.

wenyuan zeng, yankai lin, zhiyuan liu,

and
incorporating relation paths

maosong sun. 2016.
in neural id36. corr.

maximilian nickel, volker tresp, and hans-peter
kriegel. 2011. a three-way model for collective
learning on multi-relational data. in icml.

2013.

in 800 million documents:

dave orr, amar subramanya, evgeniy gabrilovich,
11 bil-
and michael ringgaard.
lion clues
a
web research corpus annotated with freebase
concepts.
http://googleresearch.
blogspot.com/2013/07/
11-billion-clues-in-800-million.
html.

steffen rendle, christoph freudenthaler, zeno gant-
bpr:
ner, and lars schmidt-thieme.
bayesian personalized ranking from implicit feed-
back. uai    09.

2009.

sebastian riedel, limin yao, andrew mccallum, and
benjamin m. marlin. 2013. id36
with id105 and universal schemas. in
naacl.

tim rockt  aschel and sebastian riedel. 2016. learn-
ing knowledge base id136 with neural theorem
provers. in akbc, naacl.

dan roth and wen-tau yih. 2007. global id136
for entity and relation identi   cation via a linear pro-
gramming formulation. in in introduction to srl.

stefan schoenmackers, oren etzioni, daniel s. weld,
and jesse davis. 2010. learning    rst-order horn
clauses from web text. in emnlp.

iulian vlad serban, alberto garc    a-dur  an, caglar
gulcehre, sungjin ahn, sarath chandar, aaron
courville, and yoshua bengio.
2016. generat-
ing factoid questions with recurrent neural networks:
the 30m factoid question-answer corpus. acl.

sameer singh, sebastian riedel, brian martin, jiap-
joint
ing zheng, and andrew mccallum. 2013.
id136 of entities, relations, and coreference. in
akbc, cikm.

richard socher, danqi chen, christopher d manning,
and andrew ng. 2013. reasoning with neural ten-
sor networks for knowledge base completion.
in
nips.

kristina toutanova, danqi chen, patrick pantel, hoi-
fung poon, pallavi choudhury, and michael gamon.
2015. representing text for joint embedding of text
and knowledge bases. in emnlp, september.

kristina toutanova, xi victoria lin, scott wen tau yih,
hoifung poon, and chris quirk. 2016. composi-
tional learning of embeddings for relation paths in
knowledge bases and text. acl.

