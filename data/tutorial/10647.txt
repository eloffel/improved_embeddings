gated-attention readers for text comprehension

bhuwan dhingra   

william w. cohen

hanxiao liu   

zhilin yang

ruslan salakhutdinov

school of computer science
carnegie mellon university

{bdhingra,hanxiaol,zhiliny,wcohen,rsalakhu}@cs.cmu.edu

7
1
0
2

 
r
p
a
1
2

 

 
 
]
l
c
.
s
c
[
 
 

3
v
9
4
5
1
0

.

6
0
6
1
:
v
i
x
r
a

abstract

in this paper we study the problem of an-
swering cloze-style questions over docu-
ments. our model, the gated-attention
(ga) reader1, integrates a multi-hop ar-
chitecture with a novel attention mecha-
nism, which is based on multiplicative in-
teractions between the query embedding
and the intermediate states of a recurrent
neural network document reader. this
enables the reader to build query-speci   c
representations of tokens in the document
for accurate answer selection. the ga
reader obtains state-of-the-art results on
three benchmarks for this task   the id98 &
daily mail news stories and the who did
what dataset. the effectiveness of multi-
plicative interaction is demonstrated by an
ablation study, and by comparing to alter-
native compositional operators for imple-
menting the gated-attention.

1

introduction

a recent trend to measure progress towards ma-
chine reading is to test a system   s ability to an-
swer questions about a document it has to com-
prehend. towards this end, several large-scale
datasets of cloze-style questions over a context
document have been introduced recently, which
allow the training of supervised machine learning
systems (hermann et al., 2015; hill et al., 2016;
onishi et al., 2016). such datasets can be eas-
ily constructed automatically and the unambigu-
ous nature of their queries provides an objective
benchmark to measure a system   s performance at
text comprehension.

   bd and hl contributed equally to this work.
1source code is available on github:

github.com/bdhingra/ga-reader

https://

deep learning models have been shown to out-
perform traditional shallow approaches on text
comprehension tasks (hermann et al., 2015). the
success of many recent models can be attributed
primarily to two factors: (1) multi-hop architec-
tures (weston et al., 2015; sordoni et al., 2016;
shen et al., 2016), allow a model to scan the doc-
ument and the question iteratively for multiple
(2) attention mechanisms, (chen et al.,
passes.
2016; hermann et al., 2015) borrowed from the
machine translation literature (bahdanau et al.,
2014), allow the model to focus on appropriate
subparts of the context document. intuitively, the
multi-hop architecture allows the reader to incre-
mentally re   ne token representations, and the at-
tention mechanism re-weights different parts in
the document according to their relevance to the
query.

the effectiveness of multi-hop reasoning and
attentions have been explored orthogonally so far
in the literature. in this paper, we focus on com-
bining both in a complementary manner, by de-
signing a novel attention mechanism which gates
the evolving token representations across hops.
more speci   cally, unlike existing models where
the query attention is applied either token-wise
(hermann et al., 2015; kadlec et al., 2016; chen
et al., 2016; hill et al., 2016) or sentence-wise
(weston et al., 2015; sukhbaatar et al., 2015) to
allow weighted aggregation, the gated-attention
(ga) module proposed in this work allows the
query to directly interact with each dimension of
the token embeddings at the semantic-level, and is
applied layer-wise as information    lters during the
multi-hop representation learning process. such a
   ne-grained attention enables our model to learn
conditional token representations w.r.t. the given
question, leading to accurate answer selections.

we show in our experiments that the proposed
ga reader, despite its relative simplicity, consis-

tently improves over a variety of strong baselines
on three benchmark datasets . our key contribu-
tion, the ga module, provides a signi   cant im-
provement for large datasets. qualitatively, vi-
sualization of the attentions at intermediate lay-
ers of the ga reader shows that in each layer the
ga reader attends to distinct salient aspects of the
query which help in determining the answer.

2 related work

the cloze-style qa task involves tuples of the
form (d, q, a,c), where d is a document (context),
q is a query over the contents of d, in which a
phrase is replaced with a placeholder, and a is the
answer to q, which comes from a set of candidates
c. in this work we consider datasets where each
candidate c     c has at least one token which also
appears in the document. the task can then be
described as: given a document-query pair (d, q),
   nd a     c which answers q. below we provide an
overview of representative neural network archi-
tectures which have been applied to this problem.
lstms with attention: several architectures in-
troduced in hermann et al. (2015) employ lstm
units to compute a combined document-query rep-
resentation g(d, q), which is used to rank the can-
didate answers. these include the deeplstm
reader which performs a single forward pass
through the concatenated (document, query) pair
to obtain g(d, q); the attentive reader which    rst
computes a document vector d(q) by a weighted
aggregation of words according to attentions based
on q, and then combines d(q) and q to obtain
their joint representation g(d(q), q); and the im-
patient reader where the document representa-
tion is built incrementally. the architecture of the
attentive reader has been simpli   ed recently in
stanford attentive reader, where shallower re-
current units were used with a bilinear form for the
query-document attention (chen et al., 2016).

attention sum:

the attention-sum (as)
reader (kadlec et al., 2016) uses two bi-
directional gru networks (cho et al., 2015) to
encode both d and q into vectors. a id203
distribution over the entities in d is obtained by
computing dot products between q and the entity
embeddings and taking a softmax. then, an ag-
gregation scheme named pointer-sum attention is
further applied to sum the probabilities of the same
entity, so that frequent entities the document will
be favored compared to rare ones. building on the

as reader, the attention-over-attention (aoa)
reader (cui et al., 2017) introduces a two-way
attention mechanism where the query and the doc-
ument are mutually attentive to each other.

mulit-hop architectures: memory networks
(memnets) were proposed in weston et al.
(2015), where each sentence in the document
is encoded to a memory by aggregating nearby
words. attention over the memory slots given
the query is used to compute an overall memory
and to renew the query representation over multi-
ple iterations, allowing certain types of reasoning
over the salient facts in the memory and the query.
neural semantic encoders (nse) (munkhdalai
& yu, 2017a) extended memnets by introducing a
write operation which can evolve the memory over
time during the course of reading. iterative reason-
ing has been found effective in several more recent
models, including the iterative attentive reader
(sordoni et al., 2016) and reasonet (shen et al.,
2016). the latter allows dynamic reasoning steps
and is trained with id23.

other related works include dynamic en-
tity representation network (der) (kobayashi
et al., 2016), which builds dynamic representa-
tions of the candidate answers while reading the
document, and accumulates the information about
an entity by max-pooling; epireader (trischler
et al., 2016) consists of two networks, where one
proposes a small set of candidate answers, and the
other reranks the proposed candidates conditioned
on the query and the context; bi-directional
attention flow network (bidaf) (seo et al.,
2017) adopts a multi-stage hierarchical architec-
ture along with a    ow-based attention mechanism;
bajgar et al. (2016) showed a 10% improvement
on the cbt corpus (hill et al., 2016) by train-
ing the as reader on an augmented training set
of about 14 million examples, making a case for
the community to exploit data abundance. the fo-
cus of this paper, however, is on designing models
which exploit the available data ef   ciently.

3 gated-attention reader

our proposed ga readers perform multiple hops
over the document (context), similar to the mem-
ory networks architecture (sukhbaatar et al.,
2015). multi-hop architectures mimic the multi-
step comprehension process of human readers, and
have shown promising results in several recent
models for text comprehension (sordoni et al.,

2016; kumar et al., 2016; shen et al., 2016). the
contextual representations in ga readers, namely
the embeddings of words in the document, are it-
eratively re   ned across hops until reaching a    -
nal attention-sum module (kadlec et al., 2016)
which maps the contextual representations in the
last hop to a id203 distribution over candi-
date answers.

the attention mechanism has been introduced
recently to model human focus, leading to signif-
icant improvement in machine translation and im-
age captioning (bahdanau et al., 2014; mnih et al.,
2014).
in reading comprehension tasks, ideally,
the semantic meanings carried by the contextual
embeddings should be aware of the query across
hops. as an example, human readers are able to
keep the question in mind during multiple passes
of reading, to successively mask away information
irrelevant to the query. however, existing neural
network readers are restricted to either attend to
tokens (hermann et al., 2015; chen et al., 2016)
or entire sentences (weston et al., 2015), with the
assumption that certain sub-parts of the document
are more important than others.
in contrast, we
propose a    ner-grained model which attends to
components of the semantic representation being
built up by the gru. the new attention mecha-
nism, called gated-attention, is implemented via
multiplicative interactions between the query and
the contextual embeddings, and is applied per hop
to act as    ne-grained information    lters during the
multi-step reasoning. the    lters weigh individual
components of the vector representation of each
token in the document separately.

the design of gated-attention layers is moti-
vated by the effectiveness of multiplicative inter-
action among vector-space representations, e.g.,
in various types of recurrent units (hochreiter &
schmidhuber, 1997; wu et al., 2016) and in re-
lational learning (yang et al., 2014; kiros et al.,
2014). while other types of compositional opera-
tors are possible, such as concatenation or addition
(mitchell & lapata, 2008), we    nd that multipli-
cation has strong empirical performance (section
4.3), where query representations naturally serve
as information    lters across hops.

3.1 model details

ouput sequence h = [h1, h2, . . . , ht ] as follows:

rt =   (wrxt + urht   1 + br),
zt =   (wzxt + uzht   1 + bz),
  ht = tanh(whxt + uh(rt (cid:12) ht   1) + bh),
ht = (1     zt) (cid:12) ht   1 + zt (cid:12)   ht.

(1)

1, hb

1 , hf

t(cid:107)hb
1]

2, . . . , hb

2 , . . . , hf

t , . . . , hf

i and backward state hb

where (cid:12) denotes the hadamard product or the
element-wise multiplication. rt and zt are called
the reset and update gates respectively, and   ht
the candidate output. a bi-directional gru (bi-
gru) processes the sequence in both forward and
backward directions to produce two sequences
[hf
t ] and [hb
t ], which are
concatenated at the output
1(cid:107)hb

      
gru(x) = [hf
      
gru(x) denotes the full output of the
where
bi-gru obtained by concatenating each forward
state hf
t   i+1 at step i given
      
gru(x) is a matrix in r2nh  t
the input x. note
where nh is the number of hidden units in gru.
2 , . . . x(0)|d|] denote the to-
ken embeddings of the document, which are also
inputs at layer 1 for the document reader below,
and y = [y1, y2, . . . y|q|] denote the token embed-
dings of the query. here |d| and |q| denote the
document and query lengths respectively.
3.1.1 multi-hop architecture
fig. 1 illustrates the gated-attention (ga) reader.
the model reads the document and the query over
k horizontal layers, where layer k receives the
contextual embeddings x (k   1) of the document
from the previous layer. the document embed-
dings are transformed by taking the full output of
a document bi-gru (indicated in blue in fig. 1):

let x (0) = [x(0)

1 , x(0)

d(k) =

      
gru

(k)

d (x (k   1))

(2)

at the same time, a layer-speci   c query represen-
tation is computed as the full output of a separate
query bi-gru (indicated in green in figure 1):

q(k) =

      
gru

(k)
q (y )

(3)

next, gated-attention is applied to d(k) and
q(k) to compute inputs for the next layer x (k).

several components of the model use a gated re-
current unit (gru) (cho et al., 2015) which maps
an input sequence x = [x1, x2, . . . , xt ] to an

x (k) = ga(d(k), q(k))

(4)
where ga is de   ned in the following subsection.

figure 1: gated-attention reader. dashed lines represent dropout connections.

3.1.2 gated-attention module
for brevity, let us drop the superscript k in this
subsection as we are focusing on a particular layer.
for each token di in d, the ga module forms a
token-speci   c representation of the query   qi using
soft attention, and then multiplies the query rep-
resentation element-wise with the document token
representation. speci   cally, for i = 1, . . . ,|d|:

  i = softmax(q(cid:62)di)
  qi = q  i
xi = di (cid:12)   qi

(5)

(6)

in equation (6) we use the multiplication operator
to model the interactions between di and   qi.
in
the experiments section, we also report results for
other choices of gating functions, including addi-
tion xi = di +   qi and concatenation xi = di(cid:107)  qi.
3.1.3 answer prediction
let q(k)
t   (cid:96)+1 be an intermediate out-
put of the    nal layer query bi-gru at the loca-
tion (cid:96) of the cloze token in the query, and d(k) =
      
d (x (k   1)) be the full output of    nal layer
gru
document bi-gru. to obtain the id203 that
a particular token in the document answers the
query, we take an inner-product between these
two, and pass through a softmax layer:

(cid:96) (cid:107)qb

= qf

(k)

(cid:96)

s = softmax((q(k)

(cid:96)

)t d(k))

(7)

where vector s de   nes a id203 distribution
over the |d| tokens in the document. the proba-
bility of a particular candidate c     c as being the

answer is then computed by aggregating the prob-
abilities of all document tokens which appear in c
and renormalizing over the candidates:

pr(c|d, q)     (cid:88)

i   i(c,d)

si

(8)

where i(c, d) is the set of positions where a token
in c appears in the document d. this aggregation
operation is the same as the pointer sum attention
applied in the as reader (kadlec et al., 2016).

finally, the candidate with maximum probabil-

ity is selected as the predicted answer:
a    = argmaxc   c pr(c|d, q).

(9)

during the training phase, model parameters of
ga are updated w.r.t. a cross-id178 loss between
the predicted probabilities and the true answers.
3.1.4 further enhancements
character-level embeddings: given a token w
from the document or query, its vector space repre-
sentation is computed as x = l(w)||c(w). l(w)
retrieves the word-embedding for w from a lookup
table l     r|v |  nl, whose rows hold a vector for
each unique token in the vocabulary. we also uti-
lize a character composition model c(w) which
generates an orthographic embedding of the token.
such embeddings have been previously shown to
be helpful for tasks like id39
(yang et al., 2016) and dealing with oov tokens
at test time (dhingra et al., 2016). the embedding
c(w) is generated by taking the    nal outputs zf
nc
and zb
nc of a bi-gru applied to embeddings from

a lookup table of characters in the token, and ap-
plying a linear transformation:
nc||zb
nc
c(w) = w z + b

z = zf

question evidence common word feature (qe-
comm): li et al. (2016) recently proposed a sim-
ple token level indicator feature which signi   -
cantly boosts reading comprehension performance
in some cases. for each token in the document we
construct a one-hot vector fi     {0, 1}2 indicating
its presence in the query. it can be incorporated
into the ga reader by assigning a feature lookup
table f     rnf   2 (we use nf = 2), taking the
feature embedding ei = f t
i f and appending it
to the inputs of the last layer document bigru
(cid:107)fi for all i. we conducted several ex-
as, x(k)
periments both with and without this feature and
observed some interesting trends, which are dis-
cussed below. henceforth, we refer to this feature
as the qe-comm feature or just feature.

i

4 experiments and results

4.1 datasets
we evaluate the ga reader on    ve large-scale
datasets recently proposed in the literature. the
   rst two, id98 and daily mail news stories2 con-
sist of articles from the popular id98 and daily
mail websites (hermann et al., 2015). a query
over each article is formed by removing an en-
tity from the short summary which follows the
article. further, entities within each article were
anonymized to make the task purely a comprehen-
sion one. id165 statistics, for instance, com-
puted over the entire corpus are no longer useful
in such an anonymized corpus.

the next two datasets are formed from two dif-
ferent subsets of the children   s book test (cbt)3
(hill et al., 2016). documents consist of 20 con-
tiguous sentences from the body of a popular chil-
dren   s book, and queries are formed by deleting a
token from the 21st sentence. we only focus on
subsets where the deleted token is either a com-
mon noun (cn) or named entity (ne) since simple
language models already give human-level perfor-
mance on the other types (cf. (hill et al., 2016)).

2https://github.com/deepmind/rc-data
3http://www.thespermwhale.com/jaseweston/babi/

cbtest.tgz

the    nal dataset is who did what4 (wdw)
(onishi et al., 2016), constructed from the ldc
english gigaword newswire corpus. first, article
pairs which appeared around the same time and
with overlapping entities are chosen, and then one
article forms the document and a cloze query is
constructed from the other. missing tokens are al-
ways person named entities. questions which are
easily answered by simple baselines are    ltered
out, to make the task more challenging. there are
two versions of the training set   a small but fo-
cused    strict    version and a large but noisy    re-
laxed    version. we report results on both set-
tings which share the same validation and test sets.
statistics of all the datasets used in our experi-
ments are summarized in the appendix (table 5).

4.2 performance comparison
tables 1 and 3 show a comparison of the perfor-
mance of ga reader with previously published
results on wdw and id98, daily mail, cbt
datasets respectively. the numbers reported for
ga reader are for single best models, though
we compare to both ensembles and single models
from prior work. ga reader-- refers to an earlier
version of the model, unpublished but described
in a preprint, with the following differences   (1)
it does not utilize token-speci   c attentions within
the ga module, as described in equation (5), (2)
it does not use a character composition model, (3)
it is initialized with id27s pretrained
on the corpus itself rather than glove. a detailed
analysis of these differences is studied in the next
section. here we present 4 variants of the latest
ga reader, using combinations of whether the
qe-comm feature is used (+feature) or not, and
whether the word lookup table l(w) is updated
during training or    xed to its initial value. other
hyperparameters are listed in appendix a.

interestingly, we observe that feature engineer-
ing leads to signi   cant improvements for wdw
and cbt datasets, but not for id98 and daily mail
datasets. we note that anonymization of the latter
datasets means that there is already some feature
engineering (it adds hints about whether a token
is an entity), and these are much larger than the
other four. in machine learning it is common to see
the effect of feature engineering diminish with in-
creasing data size. similarly,    xing the word em-
beddings provides an improvement for the wdw

4https://tticnlp.github.io/who_did_what/

table 1: validation/test accuracy (%) on wdw dataset for both    strict   
and    relaxed    settings. results with           are cf previously published works.

model

human    
attentive reader    
as reader    
stanford ar    
nse    
ga--    
ga (update l(w))
ga (   x l(w))
ga (+feature, update l(w))
ga (+feature,    x l(w))

val
   
   
   
   

66.5

   

67.8
68.3
70.1
71.6

strict

relaxed
test
   
55
59
65
66.7
60.0
66.6
69.1
71.0
72.6

test val
   
84
   
53
   
57
64
   
66.2
57
67.0
68.0
69.5
71.2

67.0
69.6
70.9
72.6

67.0

   

table 2: top: performance of different gating
functions. bottom: effect of varying the num-
ber of hops k. results on wdw without using
the qe-comm feature and with    xed l(w).
gating function accuracy
test
64.5
63.7
68.0

sum
concatenate
multiply

val
64.9
64.4
68.3

k
1 (as)    
2
3
4

   

65.6
68.3
68.3

57
65.6
68.0
68.2

and cbt, but not for id98 and daily mail. this
is not surprising given that the latter datasets are
larger and less prone to over   tting.

comparing with prior work, on the wdw
dataset the basic version of the ga reader out-
performs all previously published models when
trained on the strict setting. by adding the qe-
comm feature the performance increases by 3.2%
and 3.5% on the strict and relaxed settings re-
spectively to set a new state of the art on this
dataset. on the id98 and daily mail datasets the
ga reader leads to an improvement of 3.2% and
4.3% respectively over the best previous single
models. they also outperform previous ensem-
ble models, setting a new state of that art for both
datasets. for cbt-ne, ga reader with the qe-
comm feature outperforms all previous single and
ensemble models except the as reader trained on
the much larger booktest corpus (bajgar et al.,
2016). lastly, on cbt-cn the ga reader with
the qe-comm feature outperforms all previously
published single models except the nse, and as
reader trained on a larger corpus. for each of the
4 datasets on which ga achieves the top perfor-
mance, we conducted one-sample proportion tests
to test whether ga is signi   cantly better than the
second-best baseline. the p-values are 0.319 for
id98, <0.00001 for dailymail, 0.028 for cbt-
ne, and <0.00001 for wdw. in other words,
ga statistically signi   cantly outperforms all other
baselines on 3 out of those 4 datasets at the 5%
signi   cance level. the results could be even more
signi   cant under paired tests, however we did not
have access to the predictions from the baselines.

4.3 ga reader analysis

in this section we do an ablation study to see the
effect of gated attention. we compare the ga
reader as described here to a model which is ex-
actly the same in all aspects, except that it passes
document embeddings d(k) in each layer directly
to the inputs of the next layer without using the
ga module. in other words x (k) = d(k) for all
k > 0. this model ends up using only one query
gru at the output layer for selecting the answer
from the document. we compare these two vari-
ants both with and without the qe-comm feature
on id98 and wdw datasets for three subsets of
the training data - 50%, 75% and 100%. test set
accuracies for these settings are shown in figure 2.
on id98 when tested without feature engineering,
we observe that ga provides a signi   cant boost
in performance compared to without ga. when
tested with the feature it still gives an improve-
ment, but the improvement is signi   cant only with
100% training data. on wdw-strict, which is a
third of the size of id98, without the feature we
see an improvement when using ga versus with-
out using ga, which becomes signi   cant as the
training set size increases. when tested with the
feature on wdw, for a small data size without ga
does better than with ga, but as the dataset size
increases they become equivalent. we conclude
that ga provides a boost in the absence of feature
engineering, or as the training set size increases.

next we look at the question of how to gate in-
termediate document reader states from the query,
i.e. what operation to use in equation 6. table

table 3: validation/test accuracy (%) on id98, daily mail and cbt. results marked with           are cf previously published
works. results marked with           were obtained by training on a larger training set. best performance on standard training sets
is in bold, and on larger training sets in italics.

model

humans (query)    
humans (context + query)    
lstms (context + query)    
deep lstm reader    
attentive reader    
impatient reader    
memnets    
as reader    
der network    
stanford ar (relabeling)    
iterative attentive reader    
epireader    
aoa reader    
reasonet    
nse    
bidaf    
memnets (ensemble)    
as reader (ensemble)    
stanford ar (relabeling,ensemble)    
iterative attentive reader (ensemble)    
epireader (ensemble)    
as reader (+booktest)        
as reader (+booktest,ensemble)        
ga--
ga (update l(w))
ga (   x l(w))
ga (+feature, update l(w))
ga (+feature,    x l(w))

val
   
   
   

55.0
61.6
61.8
63.4
68.6
71.3
73.8
72.6
73.4
73.1
72.9

   

76.3
66.2
73.9
77.2
75.2

   
   
   

73.0
77.9
77.9
77.3
76.7

id98

daily mail

cbt-ne

cbt-cn

test val
   
   
   
   
   
   

test val
   
   
   
   
   

51.2

test val
   
52.0
81.6
   
41.8

62.6

test
64.4
81.6
56.0

   
   
   

   
   

69.2
67.4
69.4

   
71.9
   
   

68.9

   

71.0
70.6
80.8
83.7
63.9
67.3
68.0
69.8
70.7

63.3
70.5
69.0

   

62.2
69.0
68.0

   

75.0

73.9

   

   

77.6

76.6

   
   
   

   
   
   

77.6

76.6

   
   
   

   
   
   

   
   
   

70.4
73.8

66.6
68.6

64.2
68.8

63.0
63.4

   
   

75.2
75.3
77.8

   

   
   

68.6
69.7
72.0

   

   
   

72.1
71.5
72.2

   

   

   

78.2

73.2

74.3

80.3

79.6

   

78.7
80.2

   

77.7
79.2

   
   
   
   

   
   
   
   

76.7
81.5
80.4
80.7
80.0

75.7
80.9
79.6
80.0
79.3

   
   

   
   

   
   

76.2

71.0

71.1

   

76.9
76.6
80.5
82.3
74.9
76.7
77.2
77.2
78.5

   

72.0
71.8
76.2
78.4
69.0
70.1
71.4
73.3
74.9

   

74.1
73.6
83.2
85.7
69.0
69.8
71.6
73.0
74.4

57.0
63.0
63.8
66.8
69.5
72.9
73.6
73.3
74.0
74.4
74.7

   

76.9
69.4
75.4
77.6
76.1

   
   
   

73.8
77.9
77.8
76.9
77.4

2 (top) shows the performance on wdw dataset
for three common choices     sum (x = d + q),
concatenate (x = d(cid:107)q) and multiply (x =
d(cid:12) q). empirically we    nd element-wise multipli-
cation does signi   cantly better than the other two,
which justi   es our motivation to       lter    out docu-
ment features which are irrelevant to the query.

that. this is a common trend in machine learn-
ing as model complexity is increased, however we
note that a multi-hop architecture is important to
achieve a high performance for this task, and pro-
vide further evidence for this in the next section.

4.4 ablation study for model components

at the bottom of table 2 we show the effect of
varying the number of hops k of the ga reader
on the    nal performance. we note that for k = 1,
our model is equivalent to the as reader with-
out any ga modules. we see a steep and steady
rise in accuracy as the number of hops is increased
from k = 1 to 3, which remains constant beyond

table 4 shows accuracy on wdw by removing
one component at a time. the steepest reduc-
tion is observed when we replace pretrained glove
vectors with those pretrained on the corpus itself.
glove vectors were trained on a large corpus of
about 6 billion tokens (pennington et al., 2014),
and provide an important source of prior knowl-

figure 2: performance in accuracy with and without the gated-attention module over different training
sizes. p-values for an exact one-sided mcnemar   s test are given inside the parentheses for each setting.

table 4: ablation study on wdw dataset, without using
the qe-comm feature and with    xed l(w). results marked
with     are cf onishi et al. (2016).

model

ga

ga--   

   char
   token-attentions (eq. 5)
   glove, +corpus

accuracy
test
val
68.0
68.3
66.9
66.9
65.0
65.7
62.5
64.0
57

   

edge for the model. note that the strongest base-
line on wdw, nse (munkhdalai & yu, 2017b),
also uses pretrained glove vectors, hence the
comparison is fair in that respect. next, we ob-
serve a substantial drop when removing token-
speci   c attentions over the query in the ga mod-
ule, which allow gating individual tokens in the
document only by parts of the query relevant to
that token rather than the overall query representa-
tion. finally, removing the character embeddings,
which were only used for wdw and cbt, leads
to a reduction of about 1% in the performance.

4.5 attention visualization
to gain an insight into the reading process em-
ployed by the model we analyzed the attention dis-
tributions at intermediate layers of the reader. fig-
ure 3 shows an example from the validation set of
wdw dataset (several more are in the appendix).
in each    gure, the left and middle plots visualize
attention over the query (equation 5) for candi-
dates in the document after layers 1 & 2 respec-
tively. the right plot shows attention over candi-

dates in the document of cloze placeholder (xxx)
in the query at the    nal layer. the full document,
query and correct answer are shown at the bottom.
a generic pattern observed in these examples
is that in intermediate layers, candidates in the
document (shown along rows) tend to pick out
salient tokens in the query which provide clues
about the cloze, and in the    nal layer the candi-
date with the highest match with these tokens is
selected as the answer. in figure 3 there is a high
attention of the correct answer on financial
regulatory standards in the    rst layer, and
on us president in the second layer. the in-
correct answer, in contrast, only attends to one of
these aspects, and hence receives a lower score in
the    nal layer despite the id165 overlap it has
with the cloze token in the query. importantly, dif-
ferent layers tend to focus on different tokens in
the query, supporting the hypothesis that the multi-
hop architecture of ga reader is able to combine
distinct pieces of information to answer the query.

5 conclusion

we presented the gated-attention reader for an-
swering cloze-style questions over documents.
the ga reader features a novel multiplicative gat-
ing mechanism, combined with a multi-hop ar-
chitecture. our model achieves the state-of-the-
art performance on several large-scale benchmark
datasets with more than 4% improvements over
competitive baselines. our model design is backed
up by an ablation study showing statistically sig-
ni   cant improvements of using gated attention
as information    lters. we also showed empiri-
cally that multiplicative gating is superior to addi-

 0.66 0.68 0.7 0.72 0.74 0.76 0.7850%  (<0.01)75%  (<0.01)100%  (<0.01) id98 (w/o qe-comm feature)no gatingwith gating 0.66 0.68 0.7 0.72 0.74 0.76 0.7850%  (0.07)75%  (0.13)100%  (<0.01) id98 (w qe-comm feature)no gatingwith gating 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.750%  (0.28)75%  (<0.01)100%  (<0.01) wdw (w/o qe-comm feature)no gatingwith gating 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.750%  (<0.01)75%  (0.42)100%  (0.27) wdw (w qe-comm feature)no gatingwith gatingfigure 3: layer-wise attention visualization of ga reader trained on wdw-strict. see text for details.

tion and concatenation operations for implement-
ing gated-attentions, though a theoretical justi   ca-
tion remains part of future research goals. anal-
ysis of document and query attentions in interme-
diate layers of the reader further reveals that the
model iteratively attends to different aspects of the
query to arrive at the    nal answer. in this paper
we have focused on text comprehension, but we
believe that the gated-attention mechanism may
bene   t other tasks as well where multiple sources
of information interact.

acknowledgments

this work was funded by nsf under ccf1414030
and google research.

references
dzmitry bahdanau, kyunghyun cho, and yoshua
bengio. id4 by jointly
arxiv preprint
learning to align and translate.
arxiv:1409.0473, 2014.

ondrej bajgar, rudolf kadlec, and jan kleindi-
enst.
embracing data abundance: booktest
dataset for reading comprehension. arxiv preprint
arxiv:1610.00956, 2016.

danqi chen, jason bolton, and christopher d man-
ning. a thorough examination of the id98/daily mail
reading comprehension task. acl, 2016.

kyunghyun cho, bart van merri  enboer, caglar gul-
cehre, dzmitry bahdanau, fethi bougares, holger

schwenk, and yoshua bengio. learning phrase rep-
resentations using id56 encoder-decoder for statisti-
cal machine translation. acl, 2015.

yiming cui, zhipeng chen, si wei, shijin wang,
ting liu, and guoping hu. attention-over-attention
neural networks for reading comprehension. acl,
2017.

bhuwan dhingra, zhong zhou, dylan fitzpatrick,
michael muehl, and william w cohen. tweet2vec:
character-based distributed representations for so-
cial media. acl, 2016.

karl moritz hermann, tomas kocisky, edward
grefenstette, lasse espeholt, will kay, mustafa su-
leyman, and phil blunsom. teaching machines to
read and comprehend. in advances in neural infor-
mation processing systems, pp. 1684   1692, 2015.

felix hill, antoine bordes, sumit chopra, and jason
weston. the goldilocks principle: reading chil-
dren   s books with explicit memory representations.
iclr, 2016.

sepp hochreiter and j  urgen schmidhuber. long short-
term memory. neural computation, 9(8):1735   
1780, 1997.

rudolf kadlec, martin schmid, ondrej bajgar, and jan
kleindienst. text understanding with the attention
sum reader network. acl, 2016.

diederik kingma and jimmy ba. adam: a method for

stochastic optimization. iclr, 2015.

ryan kiros, richard zemel, and ruslan r salakhutdi-
nov. a multiplicative model for learning distributed
text-based attribute representations. in advances in
neural information processing systems, pp. 2348   
2356, 2014.

sosuke kobayashi, ran tian, naoaki okazaki, and
kentaro inui. dynamic entity representations with
max-pooling improves machine reading. in naacl-
hlt, 2016.

ankit kumar, ozan irsoy, jonathan su, james brad-
bury, robert english, brian pierce, peter ondruska,
ishaan gulrajani, and richard socher. ask me any-
thing: dynamic memory networks for natural lan-
guage processing. icml, 2016.

peng li, wei li, zhengyan he, xuguang wang, ying
cao, jie zhou, and wei xu. dataset and neu-
ral recurrent sequence labeling model for open-
domain factoid id53. arxiv preprint
arxiv:1607.06275, 2016.

jeff mitchell and mirella lapata. vector-based mod-
els of semantic composition. in acl, pp. 236   244,
2008.

volodymyr mnih, nicolas heess, alex graves, et al.
recurrent models of visual attention. in advances in
neural information processing systems, pp. 2204   
2212, 2014.

tsendsuren munkhdalai and hong yu. neural seman-

tic encoders. eacl, 2017a.

tsendsuren munkhdalai and hong yu. reasoning with
memory augmented neural networks for language
comprehension. iclr, 2017b.

takeshi onishi, hai wang, mohit bansal, kevin gim-
pel, and david mcallester. who did what: a large-
scale person-centered cloze dataset. emnlp, 2016.

razvan pascanu, tomas mikolov, and yoshua bengio.
on the dif   culty of training recurrent neural net-
works. icml (3), 28:1310   1318, 2013.

jeffrey pennington, richard socher, and christo-
pher d. manning. glove: global vectors for
word representation. in empirical methods in nat-
ural language processing (emnlp), pp. 1532   
1543, 2014. url http://www.aclweb.org/
anthology/d14-1162.

minjoon seo, aniruddha kembhavi, ali farhadi, and
hannaneh hajishirzi. bidirectional attention    ow
for machine comprehension. iclr, 2017.

yelong shen, po-sen huang, jianfeng gao, and
weizhu chen. reasonet: learning to stop read-
arxiv preprint
ing in machine comprehension.
arxiv:1609.05284, 2016.

alessandro sordoni, phillip bachman, and yoshua
bengio. iterative alternating neural attention for ma-
arxiv preprint arxiv:1606.02245,
chine reading.
2016.

sainbayar sukhbaatar, jason weston, rob fergus, et al.
end-to-end memory networks. in advances in neu-
ral information processing systems, pp. 2431   2439,
2015.

theano development team.

theano: a python
framework for fast computation of mathematical ex-
arxiv e-prints, abs/1605.02688, may
pressions.
2016. url http://arxiv.org/abs/1605.
02688.

adam trischler, zheng ye, xingdi yuan, and kaheer
suleman. natural language comprehension with the
epireader. emnlp, 2016.

jason weston, sumit chopra, and antoine bordes.

memory networks. iclr, 2015.

yuhuai wu, saizheng zhang, ying zhang, yoshua
bengio, and ruslan salakhutdinov. on multiplica-
tive integration with recurrent neural networks. ad-
vances in neural information processing systems,
2016.

bishan yang, wen-tau yih, xiaodong he, jianfeng
gao, and li deng. learning multi-relational seman-
tics using neural-embedding models. nips work-
shop on learning semantics, 2014.

zhilin yang, ruslan salakhutdinov, and william co-
hen. multi-task cross-lingual sequence tagging from
scratch. arxiv preprint arxiv:1603.06270, 2016.

a implementation details
our model was implemented using the theano
(theano development team, 2016) and lasagne5
python libraries. we used stochastic gradient de-
scent with adam updates for optimization, which
combines classical momentum and adaptive gradi-
ents (kingma & ba, 2015). the batch size was 32
and the initial learning rate was 5    10   4 which
was halved every epoch after the second epoch.
the same setting is applied to all models and
datasets. we also used gradient clipping with a
threshold of 10 to stabilize gru training (pascanu
et al., 2013). we set the number of layers k to be
3 for all experiments. the number of hidden units
for the character gru was set to 50. the remain-
ing two hyperparameters   size of document and
query grus, and dropout rate   were tuned on the
validation set, and their optimal values are shown
in table 6. in general, the optimal gru size in-
creases and the dropout rate decreases as the cor-
pus size increases.

the word lookup table was initialized with 100d
glove vectors6 (pennington et al., 2014) and oov
tokens at test time were assigned unique random
vectors. we empirically observed that initializing
with pre-trained embeddings gives higher perfor-
mance compared to random initialization for all

5https://lasagne.readthedocs.io/en/latest/
6http://nlp.stanford.edu/projects/glove/

table 5: dataset statistics.

# train

# validation

# test
# vocab

max doc length

id98 daily mail cbt-ne cbt-cn wdw-strict wdw-relaxed
185,978
10,000
10,000
308,602
3,085

127,786
10,000
10,000
347,406
3,085

108,719
2,000
2,500
53,063
1,338

879,450
64,835
53,182
208,045
2,000

120,769
2,000
2,500
53,185
1,338

380,298
3,924
3,198
118,497
2,000

table 6: hyperparameter settings for each dataset. dim() indicates hidden state size of gru.

hyperparameter id98 daily mail cbt-ne cbt-cn wdw-strict wdw-relaxed

dropout
      
gru   )

dim(

0.2
256

0.1
256

0.4
128

0.4
128

0.3
128

0.3
128

datasets. furthermore, for smaller datasets (wdw
and cbt) we found that    xing these embeddings
to their pretrained values led to higher test perfor-
mance, possibly since it avoids over   tting. we do
not use the character composition model for id98
and daily mail, since their entities (and hence can-
didate answers) are anonymized to generic tokens.
for other datasets the character lookup table was
randomly initialized with 25d vectors. all other
parameters were initialized to their default values
as speci   ed in the lasagne library.

b attention plots

figure 4: layer-wise attention visualization of ga reader trained on wdw-strict. see text for details.

figure 5: layer-wise attention visualization of ga reader trained on wdw-strict. see text for details.

figure 6: layer-wise attention visualization of ga reader trained on wdw-strict. see text for details.

figure 7: layer-wise attention visualization of ga reader trained on wdw-strict. see text for details.

