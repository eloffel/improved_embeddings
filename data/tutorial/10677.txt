6
1
0
2

 

g
u
a
9

 

 
 
]
l
c
.
s
c
[
 
 

1
v
0
0
0
3
0

.

8
0
6
1
:
v
i
x
r
a

neural generation of id157 from natural language

with minimal domain knowledge

nicholas locascio

mit

njl@mit.edu

nate kushman

microsoft

nate@kushman.org

karthik narasimhan

eduardo deleon

mit

mit

karthikn@mit.edu

edeleon04@mit.edu

regina barzilay

mit

regina@csail.mit.edu

abstract

this paper explores the task of translating nat-
ural language queries into id157
which embody their meaning. in contrast to
prior work, the proposed neural model does
not utilize domain-speci   c crafting, learning
to translate directly from a parallel corpus.
to fully explore the potential of neural mod-
els, we propose a methodology for collecting
a large corpus1 of regular expression, natural
language pairs. our resulting model achieves
a performance gain of 19.6% over previous
state-of-the-art models.

introduction

1
this paper explores the task of translating natu-
ral language text queries into id157
which embody their meaning. id157
are built into many application interfaces, yet most
users of these applications have dif   culty writing
them (friedl, 2002). thus a system for automat-
ically generating id157 from natural
language would be useful in many contexts. fur-
thermore, such technologies can ultimately scale to
translate into other formal representations, such as
program scripts (raza et al., 2015).

prior work has demonstrated the feasibility of this
task. kushman and barzilay (2013) proposed a
model that learns to perform the task from a parallel
corpus of id157 and the text descrip-
tions. to account for the given representational dis-
parity between formal id157 and natu-
ral language, their model utilizes a domain speci   c

1code and data are submitted as supplementary material.

component which computes the semantic equiva-
lence between two id157. since their
model relies heavily on this component, it cannot
be readily applied to other formal representations
where such semantic equivalence calculations are
not possible.

in this paper, we reexamine the need for such spe-
cialized domain knowledge for this task. given the
same parallel corpus used in kushman and barzi-
lay (2013), we use an lstm-based sequence to se-
quence neural network to perform the mapping. our
model does not utilize semantic equivalence in any
form, or make any other special assumptions about
the formalism. despite this and the relatively small
size of the original dataset (814 examples), our neu-
ral model exhibits a small 0.1% boost in accuracy.

to further explore the power of neural networks,
we created a much larger public dataset, nl-rx.
since creation of id157 requires spe-
cialized knowledge, standard crowd-sourcing meth-
ods are not applicable here.
instead, we employ
a two-step generate-and-paraphrase procedure that
circumvents this problem. during the generate step,
we use a small manually-crafted grammar that trans-
lates regular expression into natural language. in the
paraphrase step, we rely on crowd-sourcing to para-
phrase these rigid descriptions into more natural and
   uid descriptions. using this methodology, we have
constructed a corpus of 10,000 id157,
with corresponding verbalizations.

our results demonstrate that our sequence to se-
quence model signi   cantly outperforms the domain
speci   c technique on the larger dataset, reaching a
gain of 19.6% over of the state-of-the-art technique.

2 related work
id157 from natural language
there have been several attempts at generating reg-
ular expressions from textual descriptions. early re-
search into this task used rule-based techniques to
create a natural language interface to regular expres-
sion writing (ranta, 1998). our work, however,
is closest to kushman and barzilay (2013). they
learned a id29 translation model from a
parallel dataset of natural language and regular ex-
pressions. their model used a regular expression-
speci   c semantic uni   cation technique to disam-
biguate the meaning of the natural language descrip-
tions. our method is similar in that we require only
description and regex pairs to learn. however, we
treat the problem as a direct translation task without
applying any domain-speci   c knowledge.
id4 recent advances in
id4 (id4) (bahdanau et al.,
2014; devlin et al., 2014; luong et al., 2015) us-
ing the framework of sequence to sequence learn-
ing (sutskever et al., 2014) have demonstrated the
effectiveness of deep learning models at capturing
and translating language semantics.

3 regex generation as translation

our model is inspired by the recent advancements
in sequence to sequence neural translation. we
use a recurrent neural network (id56) with atten-
tion (mnih et al., 2014) for both encoding and de-
coding (figure 1).

let w = w1, w2...wm be the input text descrip-
tion where each wi is a word in the vocabulary. we
wish to generate the regex r = r1, r2, ...rn where
each ri is a character in the regex.

we use lstm (hochreiter and schmidhuber,
1997) cells in our model, the transition equations for
which can be summarized as:

it =   (u (i)xt + v (i)ht   1 + b(i)),
ft =   (u (f )xt + v (f )ht   1 + b(f )),
ot =   (u (o)xt + v (o)ht   1 + b(o))
zt = tanh(u (z)xt + v (z)ht   1 + b(z))
ct = it (cid:12) zt + ft (cid:12) ct   1
rt = ot (cid:12) tanh(ct)

(1)

figure 1: deep-regex encoder-decoder setup.

where    represents the sigmoid function and (cid:12) is
elementwise multiplication. the input xt is a word
(wt) for the encoder and the previously generated
character rt   1 for the decoder. the attention mech-
anism is essentially a    soft    weighting over the en-
coder   s hidden states during decoding:
exp(score(ht, he))
e(cid:48) exp(score(ht, he(cid:48)))

(cid:80)

  t(e) =

where he is a hidden state in the encoder and score
is the scoring function. we use the general attention
matrix weight for our scoring function.

our model is six layers deep, with one word em-
bedding layer, two encoder layers, two decoder lay-
ers, and one dense output layer. our encoder and de-
coder layers use a stacked lstm architecture with
a width of 512 nodes. we use a global attention
mechanism (bahdanau et al., 2014), which consid-
ers all hidden states of the encoder when comput-
ing the model   s context vector. we perform standard
dropout during training (srivastava et al., 2014) after
every lstm layer with dropout id203 equal to
0.25. we train for 20 epochs, utilizing a minibatch
size of 32, and a learning-rate of 1.0. the learning
rate is decayed by a factor 0.5 if evaluation perplex-
ity does not increase.

4 creating a large corpus of natural
language / regular expression pairs

previous work in regular expression generation has
used fairly small datasets for training and evaluation.
in order to fully utilize the power of neural transla-
tion models, we create a new large corpus of regular
expression, natural language pairs titled nl-rx.

the challenge in collecting such corpora is that
typical id104 workers do not possess the
specialized knowledge to write id157.
to solve this, we employ a two-step generate-and-
paraphrase procedure to gather our data. this tech-
nique is similar to the methods used by wang et al.
(2015) to create a id29 corpus.

table 1: regex     synthetic grammar for data genera-
tion

x & y     x and y

.*x.*y     x followed by y
x& y& z     x and y and z
x.*     starts with x
(x)+     x, at least once

non-terminals
x | y     x or y
.*x.*     contains x
x | y | z     x or y or z
.*x     ends with x

(x)*     x, zero or more times

   (x)     not x

x{n,}     x, n or more times
x{1,n}     x, at most n times

\b x\b     words with x

x     only x

table 2: nl-rx text descriptions and regular expres-
sion

synthetic:
paraphrased:

lines not words with starting with a capital letter
lines that do not contain words that begin
with a capital letter
regex:     (\b([a-z])(.*)\b)

[aeiouaeiou]     a vowel
[a-z]     an uppercase letter

terminals

[0-9]     a number

[a-z]     a lowercase letter

word     the string    word   

.     a character

tions into the    uent verbalizations.

nl-rx using the procedure described above, we
create a new public dataset (nl-rx) comprising of
10,000 id157 and their corresponding
natural language descriptions. table 2 shows an ex-
ample from our dataset.

our data collection procedure enables us to create
a substantially larger and more varied dataset than
previously possible. employing standard crowd-
source workers to paraphrase is more cost-ef   cient
and scalable than employing professional regex pro-
grammers, enabling us to create a much larger
dataset. furthermore, our stochastic generation of
id157 from a grammar results in a
more varied dataset because it is not subject to the
bias of human workers who, in previous work, wrote
many duplicate examples (see results).

5 experiments
datasets we split the 10,000 regexp and descrip-
tion pairs in nl-rx into 65% train, 10% dev, and
25% test sets.

in addition, we also evaluate our model on
the dataset used by kushman and barzilay (2013)
(kb13), although it contains far fewer data points
(824). we use the 75/25 train/test split used in their
work in order directly compare our performance to
theirs.

training we perform a hyper-parameter grid-
search (on the dev set), to determine our model
hyper-parameters:
learning-rate = 1.0, encoder-
depth = 2, decoder-depth = 2, batch size = 32,
dropout = 0.25. we use a torch (collobert et al.,
2002) implementation of attention sequence to se-
quence networks from (kim, 2016). we train our
models on the train set for 20 epochs, and choose
the model with the best average loss on the dev set.

evaluation metric to accurately evaluate our
model, we perform a functional equality check

figure 2: process for generating synthetic descriptions
from id157. grammar rules from table 1
are applied to a node   s children and the resulting string is
passed to the node   s parent.

in the generate step, we generate regular expres-
sion representations from a small manually-crafted
grammar (table 1). our grammar includes 15 non-
terminal derivations and 6 terminals and of both
basic and high-level operations. we identify these
via frequency analysis of smaller datasets from pre-
vious work (kushman and barzilay, 2013). ev-
ery grammar rule has associated verbalizations for
both id157 and language descriptions.
we use this grammar to stochastically generate reg-
ular expressions and their corresponding synthetic
language descriptions. this generation process is
shown in figure 2.

while the automatically generated descriptions
are semantically correct, they do not exhibit rich-
ness and variability of human-generated descrip-
tions. to obtain natural language (non-synthetic)
descriptions, we perform the paraphrase step.
in
this step, mechanical turk (amazon, 2003) human
workers paraphrase the generated synthetic descrip-

models

bow nn

deep-regex

semantic-unify

nl-rx-turk
dev
test

nl-rx-synth
kb13
dev
test
test
31.7% 30.6% 18.2% 16.4% 48.5%
41.2% 46.3% 39.5% 38.6% 65.5%
85.75% 88.7% 61.2% 58.2% 65.6%
table 3: dfa-equal accuracy on different datasets.
kb13: dataset from kushman and barzilay(2013), nl-
rx-synth: nl dataset with original synthetic descrip-
tions, nl-rx-turk: nl dataset with mechanical turk
paraphrased descriptions. best scores are in bold.

called dfa-equal. we employ functional equality
because there are many ways to write equivalent reg-
ular expressions. for example, (a|b) is functionally
equivalent to (b|a), despite their string representa-
tions differing. we report dfa-equal accuracy as
our model   s evaluation metric, using kushman and
barzilay (2013)   s implementation to directly com-
pare our results.

baselines we compare our model against
baselines:

two

bow-nn: bow-nn is a simple baseline that is
a nearest neighbor classi   er using bag of words
representation for each natural language description.
for a given test example, it    nds the closest cosine-
similar neighbor from the training set and uses the
regexp from that example for its prediction.

semantic-unify: our second baseline, semantic-
unify, is the previous state-of-the-art model from
(kushman and barzilay, 2013), explained above. 2

6 results

our model signi   cantly outperforms the baselines
on the nl-rx dataset and achieves comparable per-
formance to semantic unify on the kb13 dataset
(table 3). despite the small size of kb13, our
model achieves state-of-the-art results on this very
resource-constrained dataset (814 examples). using
nl-rx, we investigate the impact of training data
size on our model   s accuracy. figure 3 shows how
our model   s performance improves as the number of
training examples grows.

differences in datasets keeping the previous
section in mind, a seemingly unusual    nding is
that the model   s accuracy is higher for the smaller

2we trained and evaluated semantic-unify in consultation

with the original authors.

figure 3: our model   s performance, like many deep
learning models,
increases signi   cantly with larger
datasets. string-equal:accuracy on direct string match,
dfa-equal:accuracy using the dfa-equal evaluation.

dataset, kb13, than for the larger dataset, nl-rx-
turk. on further analysis, we learned that the kb13
dataset is a much less varied and complex dataset
than nl-rx-turk. kb13 contains many dupli-
cates, with only 45% of its id157 be-
ing unique. this makes the translation task easier
because over half of the correct test predictions will
be exact repetitions from the training set.
in con-
trast, nl-rx-turk does not suffer from this vari-
ance problem and contains 97% unique regular ex-
pressions. the relative easiness of the kb13 dataset
is further illustrated by the high performance of the
nearest-neighbor baselines on the kb13 dataset.

7 conclusions

in this paper we demonstrate that generic neu-
ral architectures for generating id157
outperform customized, heavily engineered mod-
els. the results suggest that this technique can
be employed to tackle more challenging problems
in broader families of formal languages, such as
mapping between language description and program
scripts. we also have created a large parallel corpus
of id157 and natural language queries
using typical crowd-sourcing workers, which we
make available publicly.

[sutskever et al.2014] ilya sutskever, oriol vinyals, and
quoc v le. 2014. sequence to sequence learning with
in advances in neural information
neural networks.
processing systems, pages 3104   3112.

[wang et al.2015] yushi wang, jonathan berant, and
percy liang.
2015. building a semantic parser
overnight. association for computational linguistics
(acl).

references
[amazon2003] amazon.

https://mturk.com.

2003.

mechanical

turk.

[bahdanau et al.2014] dzmitry bahdanau, kyunghyun
cho, and yoshua bengio.
2014. neural machine
translation by jointly learning to align and translate.
corr, abs/1409.0473.

[collobert et al.2002] ronan collobert, samy bengio,
and johnny marithoz. 2002. torch: a modular ma-
chine learning software library. https://torch.
ch.

[devlin et al.2014] jacob

devlin,

zbib,
zhongqiang huang, thomas lamar, richard m
schwartz, and john makhoul. 2014. fast and robust
neural network joint models for statistical machine
translation. in acl (1), pages 1370   1380. citeseer.

rabih

[friedl2002] jeffrey ef friedl. 2002. mastering regular

expressions.     o   reilly media, inc.   .

[hochreiter and schmidhuber1997] sepp hochreiter and
j  urgen schmidhuber. 1997. long short-term memory.
neural computation, 9(8):1735   1780.

[kim2016] yoon kim. 2016. id195-attn. https://

github.com/harvardnlp/id195-attn.

[kushman and barzilay2013] nate kushman and regina
barzilay. 2013. using semantic uni   cation to gener-
ate id157 from natural language. north
american chapter of the association for computa-
tional linguistics (naacl).

[luong et al.2015] thang luong, hieu pham,

and
christopher d. manning. 2015. effective approaches
to attention-based id4.
in
proceedings of the 2015 conference on empirical
methods in natural language processing, pages
1412   1421, lisbon, portugal, september. association
for computational linguistics.

[mnih et al.2014] volodymyr mnih, nicolas heess, alex
graves, et al. 2014. recurrent models of visual atten-
in advances in neural information processing
tion.
systems, pages 2204   2212.

[ranta1998] aarne ranta. 1998. a multilingual natural-
in pro-
language interface to id157.
ceedings of the international workshop on finite state
methods in natural language processing, pages 79   
90. association for computational linguistics.

[raza et al.2015] mohammad raza, sumit gulwani, and
natasa milic-frayling. 2015. compositional program
in-
synthesis from natural language and examples.
ternational joint conference on arti   cial intelligence
(ijcai).

[srivastava et al.2014] nitish srivastava, geoffrey hin-
ton, alex krizhevsky, ilya sutskever, and ruslan
salakhutdinov. 2014. dropout: a simple way to pre-
vent neural networks from over   tting. the journal of
machine learning research, 15(1):1929   1958.

