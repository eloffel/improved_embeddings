key-value memory networks for directly reading documents

alexander h. miller1 adam fisch1

jesse dodge1,2 amir-hossein karimi1

antoine bordes1

jason weston1

1facebook ai research, 770 broadway, new york, ny, usa

2language technologies institute, carnegie mellon university, pittsburgh, pa, usa

6
1
0
2

 
t
c
o
0
1

 

 
 
]
l
c
.
s
c
[
 
 

2
v
6
2
1
3
0

.

6
0
6
1
:
v
i
x
r
a

{ahm,afisch,jessedodge,ahkarimi,abordes,jase}@fb.com

abstract

directly reading documents and being able to
answer questions from them is an unsolved
challenge. to avoid its inherent dif   culty, ques-
tion answering (qa) has been directed towards
using knowledge bases (kbs) instead, which
has proven effective. unfortunately kbs often
suffer from being too restrictive, as the schema
cannot support certain types of answers, and
too sparse, e.g. wikipedia contains much more
information than freebase. in this work we
introduce a new method, key-value memory
networks, that makes reading documents more
viable by utilizing different encodings in the ad-
dressing and output stages of the memory read
operation. to compare using kbs, information
extraction or wikipedia documents directly in
a single framework we construct an analysis
tool, wikimovies, a qa dataset that contains
raw text alongside a preprocessed kb, in the
domain of movies. our method reduces the
gap between all three settings. it also achieves
state-of-the-art results on the existing wikiqa
benchmark.

introduction

1
id53 (qa) has been a long stand-
ing research problem in natural language processing,
with the    rst systems attempting to answer questions
by directly reading documents (voorhees and tice,
2000). the development of large-scale knowledge
bases (kbs) such as freebase (bollacker et al., 2008)
helped organize information into structured forms,
prompting recent progress to focus on answering
questions by converting them into logical forms that

can be used to query such databases (berant et al.,
2013; kwiatkowski et al., 2013; fader et al., 2014).
unfortunately, kbs have intrinsic limitations such
as their inevitable incompleteness and    xed schemas
that cannot support all varieties of answers. since
information extraction (ie) (craven et al., 2000), in-
tended to    ll in missing information in kbs, is neither
accurate nor reliable enough, collections of raw tex-
tual resources and documents such as wikipedia will
always contain more information. as a result, even if
kbs can be satisfactory for closed-domain problems,
they are unlikely to scale up to answer general ques-
tions on any topic. starting from this observation,
in this work we study the problem of answering by
directly reading documents.

retrieving answers directly from text is harder
than from kbs because information is far less struc-
tured, is indirectly and ambiguously expressed, and
is usually scattered across multiple documents. this
explains why using a satisfactory kb   typically only
available in closed domains   is preferred over raw
text. we postulate that before trying to provide an-
swers that are not in kbs, document-based qa sys-
tems should    rst reach kb-based systems    perfor-
mance in such closed domains, where clear compari-
son and evaluation is possible. to this end, this paper
introduces wikimovies, a new analysis tool that
allows for measuring the performance of qa systems
when the knowledge source is switched from a kb
to unstructured documents. wikimovies contains
   100k questions in the movie domain, and was de-
signed to be answerable by using either a perfect kb
(based on omdb1), wikipedia pages or an imper-

1http://www.omdbapi.com

fect kb obtained through running an engineered ie
pipeline on those pages.

to bridge the gap between using a kb and read-
ing documents directly, we still lack appropriate ma-
chine learning algorithms. in this work we propose
the key-value memory network (kv-memnn), a
new neural network architecture that generalizes the
original memory network (sukhbaatar et al., 2015)
and can work with either knowledge source. the
kv-memnn performs qa by    rst storing facts in
a key-value structured memory before reasoning on
them in order to predict an answer. the memory
is designed so that the model learns to use keys to
address relevant memories with respect to the ques-
tion, whose corresponding values are subsequently
returned. this structure allows the model to encode
prior knowledge for the considered task and to lever-
age possibly complex transforms between keys and
values, while still being trained using standard back-
propagation via stochastic id119.

our experiments on wikimovies indicate that,
thanks to its key-value memory, the kv-memnn
consistently outperforms the original memory net-
work, and reduces the gap between answering from
a human-annotated kb, from an automatically ex-
tracted kb or from directly reading wikipedia. we
con   rm our    ndings on wikiqa (yang et al.,
2015), another wikipedia-based qa benchmark
where no kb is available, where we demonstrate
that kv-memnn can reach state-of-the-art results   
surpassing the most recent attention-based neural
network models.
2 related work
early qa systems were based on information re-
trieval and were designed to return snippets of text
containing an answer (voorhees and tice, 2000;
banko et al., 2002), with limitations in terms of ques-
tion complexity and response coverage. the creation
of large-scale kbs (auer et al., 2007; bollacker et al.,
2008) have led to the development of a new class of
qa methods based on id29 (berant et al.,
2013; kwiatkowski et al., 2013; fader et al., 2014;
yih et al., 2015) that can return precise answers to
complicated compositional questions. due to the
sparsity of kb data, however, the main challenge
shifts from    nding answers to developing ef   cient
information extraction methods to populate kbs auto-

matically (craven et al., 2000; carlson et al., 2010)   
not an easy problem.

for this reason, recent initiatives are returning to
the original setting of directly answering from text us-
ing datasets like trecqa (wang et al., 2007), which
is based on classical trec resources (voorhees et al.,
1999), and wikiqa (yang et al., 2015), which is
extracted from wikipedia. both benchmarks are or-
ganized around the task of answer sentence selection,
where a system must identify the sentence contain-
ing the correct answer in a collection of documents,
but need not return the actual answer as a kb-based
system would do. unfortunately, these datasets are
very small (hundreds of examples) and, because of
their answer selection setting, do not offer the option
to directly compare answering from a kb against
answering from pure text. using similar resources
as the dialog dataset of dodge et al. (2016), our new
benchmark wikimovies addresses both de   cien-
cies by providing a substantial corpus of question-
answer pairs that can be answered by either using a
kb or a corresponding set of documents.

even though standard pipeline qa systems like
askmr (banko et al., 2002) have been recently re-
visited (tsai et al., 2015), the best published results
on trecqa and wikiqa have been obtained by
either convolutional neural networks (santos et al.,
2016; yin and sch  tze, 2015; wang et al., 2016)
or recurrent neural networks (miao et al., 2015)   
both usually with attention mechanisms inspired by
(bahdanau et al., 2015). in this work, we introduce
kv-memnns, a memory network model that oper-
ates a symbolic memory structured as (key, value)
pairs. such structured memory is not employed in
any existing attention-based neural network architec-
ture for qa. as we will show, it gives the model
greater    exibility for encoding knowledge sources
and helps shrink the gap between directly reading
documents and answering from a kb.
3 key-value memory networks
the key-value memory network model is based
on the memory network (memnns) model (we-
ston et al., 2015; sukhbaatar et al., 2015) which
has proven useful for a variety of document read-
ing and id53 tasks: for reading chil-
dren   s books and answering questions about them
(hill et al., 2016), for complex reasoning over sim-

figure 1: the key-value memory network model for id53. see section 3 for details.

ulated stories (weston et al., 2016) and for utilizing
kbs to answer questions (bordes et al., 2015).

key-value paired memories are a generalization
of the way context (e.g. knowledge bases or docu-
ments to be read) are stored in memory. the lookup
(addressing) stage is based on the key memory while
the reading stage (giving the returned result) uses the
value memory. this gives both (i) greater    exibility
for the practitioner to encode prior knowledge about
their task; and (ii) more effective power in the model
via nontrivial transforms between key and value. the
key should be designed with features to help match
it to the question, while the value should be designed
with features to help match it to the response (an-
swer). an important property of the model is that
the entire model can be trained with key-value trans-
forms while still using standard id26 via
stochastic id119.

3.1 model description
our model is based on the end-to-end memory net-
work architecture of sukhbaatar et al. (2015). a
high-level view of both models is as follows: one
de   nes a memory, which is a possibly very large ar-
ray of slots which can encode both long-term and
short-term context. at test time one is given a query
(e.g. the question in qa tasks), which is used to it-
eratively address and read from the memory (these
iterations are also referred to as    hops   ) looking for
relevant information to answer the question. at each
step, the collected information from the memory is
cumulatively added to the original query to build con-
text for the next round. at the last iteration, the    nal

retrieved context and the most recent query are com-
bined as features to predict a response from a list of
candidates.

figure 1 illustrates the kv-memnn model archi-

tecture.

in kv-memnns we de   ne the memory slots as
pairs of vectors (k1, v1) . . . , (km , vm ) and denote
the question x. the addressing and reading of the
memory involves three steps:

    key hashing: the question can be used to pre-
select a small subset of the possibly large array.
this is done using an inverted index that    nds a
subset (kh1, vh1), . . . , (khn , vhn ) of memories
of size n where the key shares at least one word
with the question with frequency < f = 1000
(to ignore stop words), following dodge et al.
(2016). more sophisticated retrieval schemes
could be used here, see e.g. manning et al.
(2008),

    key addressing: during addressing, each can-
didate memory is assigned a relevance probabil-
ity by comparing the question to each key:
phi = softmax(a  x (x)    a  k(khi))

a d   d matrix and softmax(zi) = ezi/(cid:80)

where      are feature maps of dimension d, a is
j ezj .
we discuss choices of feature map in sec. 3.2.
    value reading: in the    nal reading step, the
values of the memories are read by taking their
weighted sum using the addressing probabilities,

and the vector o is returned:

(cid:88)

o =

phia  v (vhi) .

i

the memory access process is conducted by the
   controller    neural network using q = a  x (x) as
the query. after receiving the result o, the query is
updated with q2 = r1(q + o) where r is a d    d
matrix. the memory access is then repeated (speci   -
cally, only the addressing and reading steps, but not
the hashing), using a different matrix rj on each
hop, j. the key addressing equation is transformed
accordingly to use the updated query:

phi = softmax(q(cid:62)

j+1a  k(khi)) .

the motivation for this is that new evidence can be
combined into the query to focus on and retrieve more
pertinent information in subsequent accesses. finally,
after a    xed number h hops, the resulting state of
the controller is used to compute a    nal prediction
over the possible outputs:

  a = argmaxi=1,...,csoftmax(q(cid:62)

h+1b  y (yi))

where yi are the possible candidate outputs, e.g. all
the entities in the kb, or all possible candidate an-
swer sentences in the case of a dataset like wikiqa
(see sec. 5.2). the d    d matrix b can also be con-
strained to be identical to a. the whole network is
trained end-to-end, and the model learns to perform
the iterative accesses to output the desired target a
by minimizing a standard cross-id178 loss between
  a and the correct answer a. id26 and
stochastic id119 are thus used to learn the
matrices a, b and r1, . . . , rh.

to obtain the standard end-to-end memory net-
work of sukhbaatar et al. (2015) one can simply set
the key and value to be the same for all memories.
hashing was not used in that paper, but is important
for computational ef   ciency for large memory sizes,
as already shown in dodge et al. (2016). we will now
go on to describe speci   c applications of key-value
memories for the task of reading kbs or documents.

3.2 key-value memories
there are a variety of ways to employ key-value mem-
ories that can have important effects on overall per-
formance. the ability to encode prior knowledge in

this way is an important component of kv-memnns,
and we are free to de   ne   x ,   y ,   k and   v for the
query, answer, keys and values respectively. we now
describe several possible variants of   k and   v that
we tried in our experiments, for simplicity we kept
  x and   y    xed as bag-of-words representations.
kb triple knowledge base entries have a structure
of triple    subject relation object    (see table 1 for ex-
amples). the representation we consider is simple:
the key is composed of the left-hand side entity (sub-
ject) and the relation, and the value is the right-hand
side entity (object). we double the kb and consider
the reversed relation as well (e.g. we now have two
triples    blade runner directed_by ridley scott    and
   ridley scott !directed_by blade runner    where !di-
rected_by is a different entry in the dictionary than
directed_by). having the entry both ways round is
important for answering different kinds of questions
(   who directed blade runner?    vs.    what did rid-
ley scott direct?   ). for a standard memnn that does
not have key-value pairs the whole triple has to be
encoded into the same memory slot.
sentence level for representing a document, one
can split it up into sentences, with each memory slot
encoding one sentence. both the key and the value
encode the entire sentence as a bag-of-words. as
the key and value are the same in this case, this is
identical to a standard memnn and this approach
has been used in several papers (weston et al., 2016;
dodge et al., 2016).
window level documents are split up into win-
dows of w words; in our tasks we only include win-
dows where the center word is an entity. windows are
represented using bag-of-words. window represen-
tations for memnns have been shown to work well
previously (hill et al., 2016). however, in key-value
memnns we encode the key as the entire window,
and the value as only the center word, which is not
possible in the memnn architecture. this makes
sense because the entire window is more likely to
be pertinent as a match for the question (as the key),
whereas the entity at the center is more pertinent as a
match for the answer (as the value). we will compare
these approaches in our experiments.
window + center encoding
instead of represent-
ing the window as a pure bag-of-words, thus mixing

the window center with the rest of the window, we
can also encode them with different features. here,
we double the size, d, of the dictionary and encode
the center of the window and the value using the sec-
ond dictionary. this should help the model pick out
the relevance of the window center (more related to
the answer) as compared to the words either side of
it (more related to the question).

window + title the title of a document is com-
monly the answer to a question that relates to the
text it contains. for example    what did harrison
ford star in?    can be (partially) answered by the
wikipedia document with the title    blade runner   .
for this reason, we also consider a representation
where the key is the word window as before, but
the value is the document title. we also keep all the
standard (window, center) key-value pairs from the
window-level representation as well, thus doubling
the number of memory slots in comparison. to dif-
ferentiate the two keys with different values we add
an extra feature    _window_    or    _title_    to the key,
depending on the value. the    _title_    version also
includes the actual movie title in the key. this rep-
resentation can be combined with center encoding.
note that this representation is inherently speci   c to
datasets in which there is an apparent or meaningful
title for each document.

4 the wikimovies benchmark
the wikimovies benchmark consists of question-
answer pairs in the domain of movies. it was built
with the following goals in mind: (i) machine learn-
ing techniques should have ample training examples
for learning; and (ii) one can analyze easily the perfor-
mance of different representations of knowledge and
break down the results by question type. the dataset
can be downloaded from http://fb.ai/babi.

4.1 id99s
we construct three forms of knowledge representa-
tion: (i) doc: raw wikipedia documents consisting
of the pages of the movies mentioned; (ii) kb: a clas-
sical graph-based kb consisting of entities and rela-
tions created from the open movie database (omdb)
and movielens; and (iii) ie: information extraction
performed on the wikipedia pages to build a kb
in a similar form as (ii). we take care to construct

doc: wikipedia article for blade runner (partially shown)
blade runner is a 1982 american neo-noir dystopian science    ction    lm
directed by ridley scott and starring harrison ford, rutger hauer, sean
young, and edward james olmos. the screenplay, written by hampton
fancher and david peoples, is a modi   ed    lm adaptation of the 1968
novel    do androids dream of electric sheep?    by philip k. dick.
the    lm depicts a dystopian los angeles in november 2019 in which
genetically engineered replicants, which are visually indistinguishable
from adult humans, are manufactured by the powerful tyrell corporation
as well as by other    mega-corporations    around the world. their use
on earth is banned and replicants are exclusively used for dangerous,
menial, or leisure work on off-world colonies. replicants who defy the
ban and return to earth are hunted down and    retired    by special police
operatives known as    blade runners   . . . .
kb entries for blade runner (subset)
blade runner directed_by ridley scott
blade runner written_by philip k. dick, hampton fancher
blade runner starred_actors harrison ford, sean young, . . .
blade runner release_year 1982
blade runner has_tags dystopian, noir, police, androids, . . .
ie entries for blade runner (subset)
blade runner, ridley scott directed dystopian, science    ction,    lm
hampton fancher written blade runner
blade runner starred harrison ford, rutger hauer, sean young. . .
blade runner labelled 1982 neo noir
special police, blade retired blade runner
blade runner, special police known blade
questions for blade runner (subset)
ridley scott directed which    lms?
what year was the movie blade runner released?
who is the writer of the    lm blade runner?
which    lms can be described by dystopian?
which movies was philip k. dick the writer of?
can you describe movie blade runner in a few words?

table 1: wikimovies: questions, doc, kb and ie sources.

qa pairs such that they are all potentially answerable
from either the kb from (ii) or the original wikipedia
documents from (i) to eliminate data sparsity issues.
however, it should be noted that the advantage of
working from raw documents in real applications is
that data sparsity is less of a concern than for a kb,
while on the other hand the kb has the information
already parsed in a form amenable to manipulation
by machines. this dataset can help analyze what
methods we need to close the gap between all three
settings, and in particular what are the best methods
for reading documents when a kb is not available. a
sample of the dataset is shown in table 1.

doc we selected a set of wikipedia articles about
movies by identifying a set of movies from omdb2
that had an associated article by title match. we keep
the title and the    rst section (before the contents box)
for each article. this gives    17k documents (movies)
which comprise the set of documents our models will
read from in order to answer questions.

2

http://beforethecode.com/projects/omdb/download.aspx

kb our set of movies were also matched to the
movielens dataset3. we built a kb using omdb
and movielens metadata with entries for each movie
and nine different relation types: director, writer, ac-
tor, release year, language, genre, tags, imdb rating
and imdb votes, with    10k related actors,    6k di-
rectors and    43k entities in total. the kb is stored as
triples; see table 1 for examples. imdb ratings and
votes are originally real-valued but are binned and
converted to text (   unheard of   ,    unknown   ,    well
known   ,    highly watched   ,    famous   ). we    nally
only retain kb triples where the entities also appear
in the wikipedia articles4 to try to guarantee that all
qa pairs will be equally answerable by either the
kb or wikipedia document sources.

ie as an alternative to directly reading documents,
we explore leveraging information extraction tech-
niques to transform documents into a kb format.
an ie-kb representation has attractive properties
such as more precise and compact expressions of
facts and logical key-value pairings based on subject-
verb-object groupings. this can come at the cost of
lower recall due to malformed or completely missing
triplets. for ie we use standard open-source soft-
ware followed by some task-speci   c engineering to
improve the results. we    rst employ coreference res-
olution via the stanford nlp toolkit (manning et al.,
2014) to reduce ambiguity by replacing pronominal
(   he   ,    it   ) and nominal (   the    lm   ) references with
their representative entities. next we use the senna
id14 tool (collobert et al., 2011) to
uncover the grammatical structure of each sentence
and pair verbs with their arguments. each triplet
is cleaned of words that are not recognized entities,
and lemmatization is done to collapse different in   ec-
tions of important task-speci   c verbs to one form (e.g.
stars, starring, star     starred). finally, we append
the movie title to each triple similar to the    window
+ title    representation of sec. 3.2, which improved
results.

4.2 question-answer pairs
within the dataset   s more than 100,000 question-
answer pairs, we distinguish 13 classes of question

3
http://grouplens.org/datasets/movielens/
4the dataset also includes the slightly larger version without

this constraint.

kb
method
(bordes et al., 2014) qa system 93.5
54.4
supervised embeddings
78.5
memory network
93.9
key-value memory network

doc
ie
56.5 n/a
54.4
54.4
69.9
63.4
68.3
76.2

table 2: test results (% hits@1) on wikimovies, comparing
human-annotated kb (kb), information extraction-based kb
(ie), and directly reading wikipedia documents (doc).

memory representation
sentence-level
window-level
window-level + title
window-level + center encoding + title

doc
52.4
66.8
74.1
76.9

table 3: development set performance (% hits@1) with differ-
ent document memory representations for kv-memnns.

corresponding to different kinds of edges in our kb.
they range in scope from speci   c   such as actor to
movie:    what movies did harrison ford star in?    and
movie to actors:    who starred in blade runner?      to
more general, such as tag to movie:    which    lms can
be described by dystopian?   ; see table 4 for the full
list. for some question there can be multiple correct
answers.

using simplequestions (bordes et al., 2015), an
existing open-domain id53 dataset
based on freebase, we identi   ed the subset of ques-
tions posed by human annotators that covered our
question types. we created our question set by sub-
stituting the entities in those questions with entities
from all of our kb triples. for example, if the orig-
inal question written by an annotator was    what
movies did harrison ford star in?   , we created a
pattern    what movies did [@actor] star in?   , which
we substitute for any other actors in our set, and re-
peat this for all annotations. we split the questions
into disjoint training, development and test sets with
   96k, 10k and 10k examples, respectively. the same
question (even worded differently) cannot appear in
both train and test sets. note that this is much larger
than most existing datasets; for example, the wik-
iqa dataset (yang et al., 2015) for which we also
conduct experiments in sec. 5.2 has only    1000
training pairs.

5 experiments
this section describes our experiments on wiki-
movies and wikiqa.

on

conducted

experiments

dataset described in sec.

5.1 wikimovies
the wiki-
we
movies
4. our
main goal is to compare the performance of kb, ie
and wikipedia (doc) sources when trying varying
learning methods. we compare four approaches: (i)
the qa system of bordes et al. (2014) that performs
well on existing datasets webquestions (berant et al.,
2013) and simplequestions (bordes et al., 2015) that
use kbs only; (ii) supervised embeddings that do not
make use of a kb at all but learn question-to-answer
embeddings directly and hence act as a sanity check
(dodge et al., 2016); (iii) memory networks; and
(iv) key-value memory networks. performance is
reported using the accuracy of the top hit (single
answer) over all possible answers (all entities), i.e.
the hits@1 metric measured in percent. in all cases
hyperparameters are optimized on the development
set, including the memory representations of sec.
3.2 for memnns and kv-memnns. as memnns
do not support key-value pairs, we concatenate key
and value together when they differ instead.

question type
writer to movie
tag to movie
movie to year
movie to writer
movie to tags
movie to language
movie to imdb votes
movie to imdb rating
movie to genre
movie to director
movie to actors
director to movie
actor to movie

kb ie doc
91
97
49
85
89
95
64
95
94
48
84
96
92
92
92
94
97
86
79
93
64
91
91
90
93
83

72
35
75
61
47
62
92
75
84
76
64
78
66

table 4: breakdown of test results (% hits@1) on wiki-
movies for key-value memory networks using different knowl-
edge representations.

id99
kb
one template sentence
all templates sentences
one template + coreference
one template + conjunctions
all templates + conj. + coref.
wikipedia documents

kv-memnn

93.9
82.9
80.0
76.0
74.0
72.5
76.2

table 5: analysis of test set results (% hits@1) for kb vs.
synthetic docs on wikimovies.

the main results are given in table 2. the qa
system of bordes et al. (2014) outperforms super-
vised embeddings and memory networks for kb
and ie-based kb representations, but is designed
to work with a kb, not with documents (hence the
n/a in that column). however, key-value memory
networks outperform all other methods on all three
data source types. reading from wikipedia docu-
ments directly (doc) outperforms an ie-based kb
(ie), which is an encouraging result towards auto-
mated machine reading though a gap to a human-
annotated kb still remains (93.9 vs. 76.2). the
best memory representation for directly reading doc-
uments uses    window-level + center encoding +
title    (w = 7 and h = 2); see table 3 for a compar-
ison of results for different representation types. both
center encoding and title features help the window-
level representation, while sentence-level is inferior.

qa breakdown a breakdown by question type
comparing the different data sources for kv-
memnns is given in table 4. ie loses out especially

to doc (and kb) on writer, director and actor to
movie, perhaps because coreference is dif   cult in
these cases     although it has other losses elsewhere
too. note that only 56% of subject-object pairs in
ie match the triples in the original kb, so losses are
expected. doc loses out to kb particularly on tag to
movie, movie to tags, movie to writer and movie to
actors. tag questions are hard because they can ref-
erence more or less any word in the entire wikipedia
document; see table 1. movie to writer/actor are
hard because there is likely only one or a few refer-
ences to the answer across all documents, whereas
for writer/actor to movie there are more possible
answers to    nd.

kb vs. synthetic document analysis to further
understand the difference between using a kb versus
reading documents directly, we conducted an exper-
iment where we constructed synthetic documents
using the kb. for a given movie, we use a simple
grammar to construct a synthetic    wikipedia    doc-

method
word cnt
wgt word cnt
2-gram id98 (yang et al., 2015)
ap-id98 (santos et al., 2016)
attentive lstm (miao et al., 2015)
attentive id98 (yin and sch  tze, 2015)
l.d.c. (wang et al., 2016)
memory network
key-value memory network

map mrr
0.4924
0.4891
0.5132
0.5099
0.6652
0.6520
0.6957
0.6886
0.6886
0.7069
0.7108
0.6921
0.7226
0.7058
0.5236
0.5170
0.7069
0.7265

table 6: test results on wikiqa.

ument based on the kb triples: for each relation
type we have a set of template phrases (100 in to-
tal) used to generate the fact, e.g.    blade runner
came out in 1982    for the entry blade runner
release_year 1982. we can then parameterize
the complexity of our synthetic documents: (i) using
one template, or all of them; (ii) using conjunctions
to combine facts into single sentences or not; and
(iii) using coreference between sentences where we
replace the movie name with    it   .5 the purpose of
this experiment is to    nd which aspects are responsi-
ble for the gap in performance to a kb. the results
are given in table 5. they indicate that some of the
loss (93.9% for kb to 82.9% for one template sen-
tence) in performance is due directly to representing
in sentence form, making the subject, relation and
object harder to extract. moving to a larger number
of templates does not deteriorate performance much
(80%). the remaining performance drop seems to
be split roughly equally between conjunctions (74%)
and coreference (76%). the hardest synthetic dataset
combines these (all templates + conj. + coref.)
and is actually harder than using the real wikipedia
documents (72.5% vs. 76.2%). this is possibly be-
cause the amount of conjunctions and coreferences
we make are arti   cially too high (50% and 80% of
the time, respectively).

5.2 wikiqa
wikiqa (yang et al., 2015) is an existing dataset
for answer sentence selection using wikipedia as
the knowledge source. the task is, given a ques-
tion, to select the sentence coming from a wikipedia
document that best answers the question, where per-
formance is measured using mean average preci-

5this data is also part of the wikimovies benchmark.

sion (map) and mean reciprocal rank (mrr) of the
ranked set of answers. the dataset uses a pre-built
information retrieval step and hence provides a    xed
set of candidate sentences per question, so systems
do not have to consider ranking all of wikipedia.
in contrast to wikimovies, the training set size
is small (   1000 examples) while the topic is much
more broad (all of wikipedia, rather than just movies)
and the questions can only be answered by reading
the documents, so no comparison to the use of kbs
can be performed. however, a wide range of methods
have already been tried on wikiqa, thus providing a
useful benchmark to test if the same results found on
wikimovies carry across to wikiqa, in particular
the performance of key-value memory networks.

due to the size of the training set, following many
other works (yang et al., 2015; santos et al., 2016;
miao et al., 2015) we pre-trained the word vectors
(matrices a and b which are constrained to be iden-
tical) before training kv-memnns. we employed
supervised embeddings (dodge et al., 2016) for that
goal, training on all of wikipedia while treating the
input as a random sentence and the target as the subse-
quent sentence. we then trained kv-memnns with
dropout id173: we sample words from the
question, memory representations and the answers,
choosing the dropout rate using the development set.
finally, again following other successful methods
(yin and sch  tze, 2015), we combine our approach
with exact matching word features between question
and answers. key hashing was not used as candidates
were already pre-selected. to represent the memo-
ries, we used the window-level representation (the
best choice on the dev set was w = 7) as the key
and the whole sentence as the value, as the value
should match the answer which in this case is a sen-
tence. additionally, in the representation all numbers
in the text and the phrase    how many    in the question
were replaced with the feature    _number_   . the best
choice of hops was also h = 2 for kv-memnns.

the results are given in table 6. key-value mem-
ory networks outperform a large set of other methods,
although the results of the l.d.c. method of (wang
et al., 2016) are very similar. memory networks,
which cannot easily pair windows to sentences, per-
form much worse, highlighting the importance of
key-value memories.

6 conclusion
we studied the problem of directly reading docu-
ments in order to answer questions, concentrating
our analysis on the gap between such direct methods
and using human-annotated or automatically con-
structed kbs. we presented a new model, key-value
memory networks, which helps bridge this gap, out-
performing several other methods across two datasets,
wikimovies and wikiqa. however, some gap in
performance still remains. wikimovies serves as
an analysis tool to shed some light on the causes.
future work should try to close this gap further.

key-value memory networks are versatile models
for reading documents or kbs and answering ques-
tions about them   allowing to encode prior knowl-
edge about the task at hand in the key and value
memories. these models could be applied to storing
and reading memories for other tasks as well, and
future work should try them in other domains, such
as in a full dialog setting.
references
auer, s., bizer, c., kobilarov, g., lehmann, j., cyga-
niak, r., and ives, z. (2007). dbpedia: a nucleus
for a web of open data. in semantic web confer-
ence, 2007.

bahdanau, d., cho, k., and bengio, y. (2015). neu-
ral machine translation by jointly learning to align
and translate. in iclr, 2015.

banko, m., brill, e., dumais, s., and lin, j. (2002).
askmsr: id53 using the worldwide
web. in aaai spring symposium on mining an-
swers from texts and knowledge bases, 2002.

berant, j., chou, a., frostig, r., and liang, p.
id29 on freebase from

(2013).
question-answer pairs. in emnlp, 2013.

bollacker, k., evans, c., paritosh, p., sturge, t., and
taylor, j. (2008). freebase: a collaboratively cre-
ated graph database for structuring human knowl-
edge. in acm sigmod international conference
on management of data, 2008.

bordes, a., chopra, s., and weston, j. (2014). ques-
in

tion answering with subgraph embeddings.
emnlp, 2014.

bordes, a., usunier, n., chopra, s., and we-
ston, j. (2015). large-scale simple question an-

swering with memory networks. arxiv preprint
arxiv:1506.02075.

carlson, a., betteridge, j., kisiel, b., settles, b.,
hruschka jr, e. r., and mitchell, t. m. (2010).
toward an architecture for never-ending language
learning. in aaai conference on arti   cial intelli-
gence, 2010.

collobert, r., weston, j., bottou, l., karlen, m.,
kavukcuoglu, k., and kuksa, p. (2011). natu-
ral language processing (almost) from scratch. j.
mach. learn. res., 12, 2493   2537.

craven, m., dipasquo, d., freitag, d., mccallum,
a., mitchell, t., nigam, k., and slattery, s. (2000).
learning to construct knowledge bases from the
world wide web. arti   cial intelligence, 118, 69   
113.

dodge, j., gane, a., zhang, x., bordes, a., chopra,
s., miller, a., szlam, a., and weston, j. (2016).
evaluating prerequisite qualities for learning end-
to-end id71. in iclr, 2016.

fader, a., zettlemoyer, l., and etzioni, o. (2014).
open id53 over curated and ex-
tracted knowledge bases. in kdd, 2014.

hill, f., bordes, a., chopra, s., and weston, j.
(2016). the goldilocks principle: reading chil-
dren   s books with explicit memory representations.
in iclr, 2016.

kwiatkowski, t., choi, e., artzi, y., and zettlemoyer,
l. (2013). scaling semantic parsers with on-the-   y
ontology matching. in emnlp, 2013.

manning, c. d., raghavan, p., and sch  tze, h.
introduction to information retrieval.
(2008).
cambridge university press, new york, ny, usa.

manning, c. d., surdeanu, m., bauer, j., finkel, j.,
bethard, s. j., and mcclosky, d. (2014). the stan-
ford corenlp natural language processing toolkit.
in acl: system demonstrations, 2014.

miao, y., yu, l., and blunsom, p. (2015). neural
variational id136 for text processing. arxiv
preprint arxiv:1511.06038.

santos, c. d., tan, m., xiang, b., and zhou, b.
(2016). attentive pooling networks. arxiv preprint
arxiv:1602.03609.

sukhbaatar, s., szlam, a., weston, j., and fergus, r.
(2015). end-to-end memory networks. in nips,
2015.

tsai, c., yih, w.-t., and burges, c. (2015). web-
based id53: revisiting askmsr.
technical report, technical report msr-tr-2015-
20, microsoft research.

voorhees, e. m. et al. (1999). the trec-8 question

answering track report. in trec, 1999.

voorhees, e. m. and tice, d. m. (2000). building
a id53 test collection. in acm si-
gir conference on research and development in
information retrieval, 2000.

wang, m., smith, n. a., and mitamura, t. (2007).
what is the jeopardy model? a quasi-synchronous
grammar for qa. in emnlp-conll, 2007.

wang, z., mi, h., and ittycheriah, a. (2016).
sentence similarity learning by lexical decom-
arxiv preprint
position and composition.
arxiv:1602.07019.

weston, j., chopra, s., and bordes, a. (2015). mem-

ory networks. in iclr, 2015.

weston, j., bordes, a., chopra, s., and mikolov, t.
(2016). towards ai-complete id53:
a set of prerequisite toy tasks. in iclr, 2016.

yang, y., yih, w.-t., and meek, c. (2015). wik-
iqa: a challenge dataset for open-domain question
answering. in emnlp, 2015.

yih, w.-t., chang, m.-w., he, x., and gao, j. (2015).
id29 via staged query graph genera-
tion: id53 with knowledge base. in
acl, 2015.

yin, w. and sch  tze, h. (2015). convolutional neural
network for paraphrase identi   cation. in nacl:
human language technologies, 2015.

