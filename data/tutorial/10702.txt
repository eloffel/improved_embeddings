compression of id4 models via pruning

abigail see    minh-thang luong    christopher d. manning
computer science department, stanford university, stanford, ca 94305

{abisee,lmthang,manning}@stanford.edu

6
1
0
2

 

n
u
j
 

9
2

 
 
]
i

a
.
s
c
[
 
 

1
v
4
7
2
9
0

.

6
0
6
1
:
v
i
x
r
a

abstract

id4 (id4), like
many other deep learning domains, typ-
ically suffers from over-parameterization,
resulting in large storage sizes. this paper
examines three simple magnitude-based
pruning schemes to compress id4 mod-
els, namely class-blind, class-uniform,
and class-distribution, which differ
in
terms of how pruning thresholds are com-
puted for the different classes of weights in
the id4 architecture. we demonstrate the
ef   cacy of weight pruning as a compres-
sion technique for a state-of-the-art id4
system. we show that an id4 model with
over 200 million parameters can be pruned
by 40% with very little performance loss
as measured on the wmt   14 english-
german translation task. this sheds light
on the distribution of redundancy in the
id4 architecture. our main result is that
with retraining, we can recover and even
surpass the original performance with an
80%-pruned model.
introduction

1
id4 (id4) is a simple
new architecture for translating texts from one lan-
guage into another (sutskever et al., 2014; cho et
al., 2014). id4 is a single deep neural network
that is trained end-to-end, holding several advan-
tages such as the ability to capture long-range de-
pendencies in sentences, and generalization to un-
seen texts. despite being relatively new, id4 has
already achieved state-of-the-art
translation re-
sults for several language pairs including english-
french (luong et al., 2015b), english-german
(jean et al., 2015a; luong et al., 2015a; luong and

   both authors contributed equally.

figure 1: a simpli   ed diagram of id4.

manning, 2015; sennrich et al., 2016), english-
turkish (sennrich et al., 2016), and english-czech
(jean et al., 2015b; luong and manning, 2016).
figure 1 gives an example of an id4 system.

while id4 has a signi   cantly smaller memory
footprint than traditional phrase-based approaches
(which need to store gigantic phrase-tables and
language models), the model size of id4 is still
prohibitively large for mobile devices. for exam-
ple, a recent state-of-the-art id4 system requires
over 200 million parameters, resulting in a stor-
age size of hundreds of megabytes (luong et al.,
2015a). though the trend for bigger and deeper
neural networks has brought great progress, it has
also introduced over-parameterization, resulting in
long running times, over   tting, and the storage
size issue discussed above. a solution to the over-
parameterization problem could potentially aid all
three issues, though the    rst (long running times)
is outside the scope of this paper.

our contribution.

in this paper we investi-
gate the ef   cacy of weight pruning for id4 as
a means of compression. we show that despite

student	
   a	
   am	
   i	
   je	
   je	
   suis	
   suis	
     tudiant	
   	
     tudiant	
   	
   _	
   _	
   source	
   language	
   input	
   target	
   language	
   input	
   target	
   language	
   output	
   its simplicity, magnitude-based pruning with re-
training is highly effective, and we compare three
magnitude-based pruning schemes     class-blind,
class-uniform and class-distribution. though re-
cent work has chosen to use the latter two, we
   nd the    rst and simplest scheme     class-blind
    the most successful. we are able to prune 40%
of the weights of a state-of-the-art id4 system
with negligible performance loss, and by adding a
retraining phase after pruning, we can prune 80%
with no performance loss. our pruning experi-
ments also reveal some patterns in the distribution
of redundancy in id4. in particular we    nd that
higher layers, attention and softmax weights are
the most important, while lower layers and the em-
bedding weights hold a lot of redundancy. for the
long short-term memory (lstm) architecture,
we    nd that at lower layers the parameters for the
input are most crucial, but at higher layers the pa-
rameters for the gates also become important.

2 related work

pruning the parameters from a neural network,
referred to as weight pruning or network prun-
ing, is a well-established idea though it can be
implemented in many ways. among the most
popular are the optimal brain damage (obd)
(le cun et al., 1989) and optimal brain sur-
geon (obs) (hassibi and stork, 1993) techniques,
which involve computing the hessian matrix of
the id168 with respect to the parameters,
in order to assess the saliency of each parame-
ter. parameters with low saliency are then pruned
from the network and the remaining sparse net-
work is retrained. both obd and obs were
shown to perform better than the so-called    naive
magnitude-based approach   , which prunes param-
eters according to their magnitude (deleting pa-
rameters close to zero). however, the high com-
putational complexity of obd and obs compare
unfavorably to the computational simplicity of the
magnitude-based approach, especially for large
networks (augasta and kathirvalavakumar, 2013).
in recent years, the deep learning renaissance
has prompted a re-investigation of network prun-
ing for modern models and tasks. magnitude-
based pruning with iterative retraining has yielded
strong results for convolutional neural networks
(id98) performing visual tasks. collins and kohli
(2014) prune 75% of alexnet parameters with
small accuracy loss on the id163 task, while

han et al. (2015b) prune 89% of alexnet parame-
ters with no accuracy loss on the id163 task.

other approaches focus on pruning neurons
rather than parameters, via sparsity-inducing regu-
larizers (murray and chiang, 2015) or    wiring to-
gether    pairs of neurons with similar input weights
(srinivas and babu, 2015). these approaches
are much more constrained than weight-pruning
schemes; they necessitate    nding entire zero rows
of weight matrices, or near-identical pairs of rows,
in order to prune a single neuron. by contrast
weight-pruning approaches allow weights to be
pruned freely and independently of each other.
the neuron-pruning approach of srinivas and
babu (2015) was shown to perform poorly (it suf-
fered performance loss after removing only 35%
of alexnet parameters) compared to the weight-
pruning approach of han et al. (2015b). though
murray and chiang (2015) demonstrates neuron-
pruning for id38 as part of a (non-
neural) machine translation pipeline,
their ap-
proach is more geared towards architecture selec-
tion than compression.

there are many other compression techniques
for neural networks, including approaches based
on on low-rank approximations for weight matri-
ces (jaderberg et al., 2014; denton et al., 2014),
or weight sharing via hash functions (chen et al.,
2015). several methods involve reducing the pre-
cision of the weights or activations (courbariaux
et al., 2015), sometimes in conjunction with spe-
cialized hardware (gupta et al., 2015), or even us-
ing binary weights (lin et al., 2016). the    knowl-
edge distillation    technique of hinton et al. (2015)
involves training a small    student    network on the
soft outputs of a large    teacher    network. some
approaches use a sophisticated pipeline of several
techniques to achieve impressive feats of compres-
sion (han et al., 2015a; iandola et al., 2016).

most of the above work has focused on com-
pressing id98s for vision tasks. we extend the
magnitude-based pruning approach of han et al.
(2015b) to recurrent neural networks (id56), in
particular lstm architectures for id4, and to
our knowledge we are the    rst to do so. there
has been some recent work on compression for
id56s (lu et al., 2016; prabhavalkar et al., 2016),
but it focuses on other, non-pruning compression
techniques. nonetheless, our general observations
on the distribution of redundancy in a lstm, de-
tailed in section 4.5, are corroborated by lu et al.

figure 2: id4 architecture. this example has two layers, but our system has four. the different weight
classes are indicated by arrows of different color (the black arrows in the top right represent simply
choosing the highest-scoring word, and thus require no parameters). best viewed in color.

(2016).

3 our approach
we    rst give a brief overview of neural ma-
chine translation before describing the model ar-
chitecture of interest, the deep multi-layer recur-
rent model with lstm. we then explain the dif-
ferent types of id4 weights together with our ap-
proaches to pruning and retraining.

3.1 id4
id4 aims to directly model
the id155 p(y|x) of translating a
source sentence, x1, . . . , xn, to a target sentence,
y1, . . . , ym. it accomplishes this goal through an
encoder-decoder framework (kalchbrenner and
blunsom, 2013; sutskever et al., 2014; cho et al.,
2014). the encoder computes a representation s
for each source sentence. based on that source
representation, the decoder generates a transla-
tion, one target word at a time, and hence, decom-
poses the log id155 as:

log p(y|x) =

log p (yt|y<t, s)

(1)

(cid:88)m

t=1

most id4 work uses id56s, but approaches
(a) architecture, which can

differ in terms of:

be unidirectional, bidirectional, or deep multi-
layer id56; and (b) id56 type, which can be
long short-term memory (lstm) (hochreiter
and schmidhuber, 1997) or the gated recurrent
unit (cho et al., 2014).

in this work, we speci   cally consider the deep
multi-layer recurrent architecture with lstm as
the hidden unit type. figure 1 illustrates an in-
stance of that architecture during training in which
the source and target sentence pair are input for su-
pervised learning. during testing, the target sen-
tence is not known in advance; instead, the most
probable target words predicted by the model are
fed as inputs into the next timestep. the network
stops when it emits the end-of-sentence symbol    
a special    word    in the vocabulary, represented by
a dash in figure 1.

3.2 understanding id4 weights
figure 2 shows the same system in more detail,
highlighting the different types of parameters, or
weights, in the model. we will go through the
architecture from bottom to top. first, a vocab-
ulary is chosen for each language, assuming that
the top v frequent words are selected. thus, ev-
ery word in the source or target vocabulary can
be represented by a one-hot vector of length v .

studentaamijejesuissuis  tudiant   tudiant _one-hot vectors length vid27s length nhidden layer 1 length nhidden layer 2   length nscores length vone-hot vectors   length v_source language inputtarget language inputinitial (zero) statestarget language outputsoftmax weights size: v    nkey to weight classesattention hidden layer length ncontext vector (one for each target word) length ntarget    layer 2 weights size: 4n x 2nsource embedding weights size: n x vattention weights size: n x 2ntarget    layer 1 weights size: 4n x 2nsource   layer 2 weights size: 4n x 2nsource   layer 1   weights size: 4n x 2ntarget embedding weights size: n x vthe source input sentence and target input sen-
tence, represented as a sequence of one-hot vec-
tors, are transformed into a sequence of word em-
beddings by the embedding weights. these em-
bedding weights, which are learned during train-
ing, are different for the source words and the tar-
get words. the id27s and all hidden
layers are vectors of length n (a chosen hyperpa-
rameter).

the id27s are then fed as input into
the main network, which consists of two multi-
layer id56s    stuck together        an encoder for the
source language and a decoder for the target lan-
guage, each with their own weights. the feed-
forward (vertical) weights connect the hidden unit
from the layer below to the upper id56 block, and
the recurrent (horizontal) weights connect the hid-
den unit from the previous time-step id56 block to
the current time-step id56 block.

the hidden state at the top layer of the decoder
is fed through an attention layer, which guides the
translation by    paying attention    to relevant parts
of the source sentence; for more information see
bahdanau et al. (2015) or section 3 of luong et
al. (2015a). finally, for each target word, the top
layer hidden unit is transformed by the softmax
weights into a score vector of length v . the tar-
get word with the highest score is selected as the
output translation.

weight subgroups in lstm     for the afore-
mentioned id56 block, we choose to use lstm as
the hidden unit type. to facilitate our later discus-
sion on the different subgroups of weights within
lstm, we    rst review the details of lstm as for-
mulated by zaremba et al. (2014) as follows:

             i

f
o
  h

             =

             t4n,2n
            sigm

sigm
sigm
tanh
t = f     cl
cl
t = o     tanh(cl
hl
t)

t   1 + i       h

(cid:19)

(cid:18)hl   1

t
hl
t   1

(2)

(3)
(4)

t, cl

t) given the previous pair (hl

here, each lstm block at time t and layer l com-
putes as output a pair of hidden and memory vec-
tors (hl
t   1)
and an input vector hl   1
(either from the lstm
block below or the embedding weights if l = 1).
all of these vectors have length n.
the core of a lstm block is the weight matrix
t4n,2n of size 4n   2n. this matrix can be decom-
posed into 8 subgroups that are responsible for the

t   1, cl

t

t

t   1}.

, recurrent input hl

interactions between {input gate i, forget gate f,
output gate o, input signal   h}    {feed-forward in-
put hl   1
3.3 pruning schemes
we follow the general magnitude-based approach
of han et al. (2015b), which consists of pruning
weights with smallest absolute value. however,
we question the authors    pruning scheme with re-
spect to the different weight classes, and exper-
iment with three pruning schemes. suppose we
wish to prune x% of the total parameters in the
model. how do we distribute the pruning over the
different weight classes (illustrated in figure 2) of
our model? we propose to examine three different
pruning schemes:

1. class-blind: take all parameters, sort them
by magnitude and prune the x% with smallest
magnitude, regardless of weight class.
(so
some classes are pruned proportionally more
than others).

2. class-uniform: within each class, sort the
weights by magnitude and prune the x% with
smallest magnitude. (so all classes have ex-
actly x% of their parameters pruned).

3. class-distribution: for each class c, weights
with magnitude less than     c are pruned.
here,   c is the standard deviation of that class
and    is a universal parameter chosen such
that in total, x% of all parameters are pruned.
this is used by han et al. (2015b).

all these schemes have their seeming advantages.
class-blind pruning is the simplest and adheres to
the principle that pruning weights (or equivalently,
setting them to zero) is least damaging when those
weights are small, regardless of their locations in
the architecture. class-uniform pruning and class-
distribution pruning both seek to prune proportion-
ally within each weight class, either absolutely,
or relative to the standard deviation of that class.
we    nd that class-blind pruning outperforms both
other schemes (see section 4.1).

3.4 retraining
in order to prune id4 models aggressively with-
out performance loss, we retrain our pruned net-
works. that is, we continue to train the remaining
weights, but maintain the sparse structure intro-
duced by pruning. in our implementation, pruned

e
r
o
c
s
u
e
l
b

20

10

0

0

class-blind
class-uniform
class-distribution

10 20 30 40 50 60 70 80 90

percentage pruned

figure 3: effects of different pruning schemes.

weights are represented by zeros in the weight ma-
trices, and we use binary    mask    matrices, which
represent the sparse structure of a network, to ig-
nore updates to weights at pruned locations. this
implementation has the advantage of simplicity
as it requires minimal changes to the training
and deployment code, but we note that a more
complex implementation utilizing sparse matrices
and sparse id127 could potentially
yield speed improvements. however, such an im-
plementation is beyond the scope of this paper.

4 experiments

we evaluate the effectiveness of our pruning
approaches on a state-of-the-art id4 model.1
speci   cally, an attention-based english-german
id4 system from luong et al. (2015a) is consid-
ered. training data was obtained from wmt   14
consisting of 4.5m sentence pairs (116m english
words, 110m german words). for more details
on training hyperparameters, we refer readers to
section 4.1 of luong et al. (2015a). all models
are tested on newstest2014 (2737 sentences). the
model achieves a perplexity of 6.1 and a id7
score of 20.5 (after unknown word replacement).2
when retraining pruned id4 systems, we use
the following settings: (a) we start with a smaller
learning rate of 0.5 (the original model uses a
learning rate of 1.0), (b) we train for fewer epochs,
4 instead of 12, using plain sgd, (c) a simple
learning rate schedule is employed; after 2 epochs,
we begin to halve the learning rate every half an
epoch, and (d) all other hyperparameters are the

1we thank the authors of luong et al. (2015a) for provid-
ing their trained models and assistance in using the codebase
at https://github.com/lmthang/id4.matlab.

2the performance of this model is reported under row

global (dot) in table 4 of luong et al. (2015a).

same, such as mini-batch size 128, maximum gra-
dient norm 5, and dropout with id203 0.2.

4.1 comparing pruning schemes
despite its simplicity, we observe in figure 3
that class-blind pruning outperforms both other
schemes in terms of translation quality at all prun-
ing percentages. in order to understand this result,
for each of the three pruning schemes, we pruned
each class separately and recorded the effect on
performance (as measured by perplexity). figure
4 shows that with class-uniform pruning, the over-
all performance loss is caused disproportionately
by a few classes: target layer 4, attention and soft-
max weights. looking at figure 5, we see that
the most damaging classes to prune also tend to be
those with weights of greater magnitude     these
classes have much larger weights than others at the
same percentile, so pruning them under the class-
uniform pruning scheme is more damaging. the
situation is similar for class-distribution pruning.
by contrast, figure 4 shows that under class-
blind pruning, the damage caused by pruning soft-
max, attention and target layer 4 weights is greatly
decreased, and the contribution of each class to-
wards the performance loss is overall more uni-
form.
in fact, the distribution begins to re   ect
the number of parameters in each class     for ex-
ample, the source and target embedding classes
have larger contributions because they have more
weights. we use only class-blind pruning for the
rest of the experiments.

figure 4 also reveals some interesting informa-
tion about the distribution of redundancy in id4
architectures     namely it seems that higher lay-
ers are more important than lower layers, and that
attention and softmax weights are crucial. we will
explore the distribution of redundancy further in
section 4.5.

4.2 pruning and retraining
pruning has an immediate negative impact on per-
formance (as measured by id7) that is exponen-
tial in pruning percentage; this is demonstrated by
the blue line in figure 6. however we    nd that up
to about 40% pruning, performance is mostly un-
affected, indicating a large amount of redundancy
and over-parameterization in id4.

we now consider the effect of retraining pruned
models. the orange line in figure 6 shows that af-
ter retraining the pruned models, baseline perfor-
mance (20.48 id7) is both recovered and im-

class-blind
class-uniform
class-distribution

e
g
n
a
h
c

y
t
i
x
e
l
p
r
e
p

15

10

5

0

sourcelayer1

sourcelayer2

sourcelayer3

sourcelayer4

targetlayer1

targetlayer2

targetlayer3

targetlayer4

attention

softmax
sourceembedding
targetembedding

figure 4:    breakdown    of performance loss (i.e., perplexity increase) by weight class, when pruning
90% of weights using each of the three pruning schemes. each of the    rst eight classes have 8 million
weights, attention has 2 million, and the last three have 50 million weights each.

101

100

e
g
n
a
h
c

y
t
i
x
e
l
p
r
e
p

0

0.1

0.2

0.3

0.4

0.5

magnitude of largest deleted weight

e
r
o
c
s
u
e
l
b

20

10

0

0

pruned
pruned and retrained
sparse from the beginning

10 20 30 40 50 60 70 80 90

percentage pruned

figure 5: magnitude of largest deleted weight
vs. perplexity change, for the 12 different weight
classes when pruning 90% of parameters by class-
uniform pruning.

figure 6: performance of pruned models (a) after
pruning, (b) after pruning and retraining, and (c)
when trained with sparsity structure from the out-
set (see section 4.3).

proved upon, up to 80% pruning (20.91 id7),
with only a small performance loss at 90% pruning
(20.13 id7). this may seem surprising, as we
might not expect a sparse model to signi   cantly
out-perform a model with    ve times as many pa-
rameters. there are several possible explanations,
two of which are given below.

firstly, we found that the less-pruned models
perform better on the training set than the vali-
dation set, whereas the more-pruned models have
closer performance on the two sets. this indicates
that pruning has a regularizing effect on the re-
training phase, though clearly more is not always
better, as the 50% pruned and retrained model has
better validation set performance than the 90%

pruned and retrained model. nonetheless, this reg-
ularization effect may explain why the pruned and
retrained models outperform the baseline.

alternatively, pruning may serve as a means to
escape a local optimum. figure 7 shows the loss
function over time during the training, pruning and
retraining process. during the original training
process, the loss curve    attens out and seems to
converge (note that we use early stopping to ob-
tain our baseline model, so the original model was
trained for longer than shown in figure 7). prun-
ing causes an immediate increase in the loss func-
tion, but enables further id119, allowing
the retraining process to    nd a new, better local
optimum. it seems that the disruption caused by

figure 8: graphical representation of the location of small weights in various parts of the model. black
pixels represent weights with absolute size in the bottom 80%; white pixels represent those with absolute
size in the top 20%. equivalently, these pictures illustrate which parameters remain after pruning 80%
using our class-blind pruning scheme.

target embedding weightssource embedding weightsleast common wordmost common wordsource layer 1 weightsrecurrentfeed-forwardinput gateforget gateoutput gateinputsource layer 2 weightssource layer 3 weightssource layer 4 weightstarget layer 1 weightstarget layer 2 weightstarget layer 3 weightstarget layer 4 weights8

6

4

2

s
s
o
l

0

1

2

3

4

training iterations

5
  105

figure 7: the validation set loss during training,
pruning and retraining. the vertical dotted line
marks the point when 80% of the parameters are
pruned. the horizontal dotted line marks the best
performance of the unpruned baseline.

pruning is bene   cial in the long-run.

4.3 starting with sparse models
the favorable performance of the pruned and re-
trained models raises the question: can we get
a shortcut to this performance by starting with
sparse models? that is, rather than train, prune,
and retrain, what if we simply prune then train?
to test this, we took the sparsity structure of our
50%   90% pruned models, and trained completely
new models with the same sparsity structure. the
purple line in figure 6 shows that the    sparse from
the beginning    models do not perform as well as
the pruned and retrained models, but they do come
close to the baseline performance. this shows that
while the sparsity structure alone contains useful
information about redundancy and can therefore
produce a competitive compressed model, it is im-
portant to interleave pruning with training.

though our method involves just one pruning
stage, other pruning methods interleave pruning
with training more closely by including several
iterations (collins and kohli, 2014; han et al.,
2015b). we expect that implementing this for
id4 would likely result in further compression
and performance improvements.

4.4 storage size
the original unpruned model (a matlab    le)
has size 782mb. the 80% pruned and retrained
model is 272mb, which is a 65.2% reduction. in
this work we focus on compression in terms of
number of parameters rather than storage size, be-

cause it is invariant across implementations.

4.5 distribution of redundancy in id4

we visualize in figure 8 the redundancy struc-
tore of our id4 baseline model. black pix-
els represent weights near to zero (those that can
be pruned); white pixels represent larger ones.
first we consider the embedding weight matrices,
whose columns correspond to words in the vocab-
ulary. unsurprisingly, in figure 8, we see that
the parameters corresponding to the less common
words are more dispensable. in fact, at the 80%
pruning rate, for 100 uncommon source words
and 1194 uncommon target words, we delete all
parameters corresponding to that word. this is
not quite the same as removing the word from
the vocabulary     true out-of-vocabulary words
are mapped to the embedding for the    unknown
word    symbol, whereas these    pruned-out    words
are mapped to a zero embedding. however in the
original unpruned model these uncommon words
already had near-zero embeddings, indicating that
the model was unable to learn suf   ciently distinc-
tive representations.

returning to figure 8, now look at the eight
weight matrices for the source and target connec-
tions at each of the four layers. each matrix corre-
sponds to the 4n    2n matrix t4n,2n in equation
(2). in all eight matrices, we observe     as does
lu et al. (2016)     that the weights connecting to
the input   h are most crucial, followed by the in-
put gate i, then the output gate o, then the forget
gate f. this is particularly true of the lower lay-
ers, which focus primarily on the input   h. how-
ever for higher layers, especially on the target side,
weights connecting to the gates are as important as
those connecting to the input   h. the gates repre-
sent the lstm   s ability to add to, delete from or
retrieve information from the memory cell. figure
8 therefore shows that these sophisticated memory
cell abilities are most important at the end of the
id4 pipeline (the top layer of the decoder). this
is reasonable, as we expect higher-level features to
be learned later in a deep learning pipeline.

we also observe that for lower layers, the feed-
forward input is much more important than the re-
current input, whereas for higher layers the recur-
rent input becomes more important. this makes
sense: lower layers concentrate on the low-level
information from the current id27 (the
feed-forward input), whereas higher layers make

7 conclusion
we have shown that weight pruning with retrain-
ing is a highly effective method of compression
and id173 on a state-of-the-art id4 sys-
tem, compressing the model to 20% of its size with
no loss of performance. though we are the    rst to
apply compression techniques to id4, we obtain
a similar degree of compression to other current
work on compressing state-of-the-art deep neural
networks, with an approach that is simpler than
most. we have found that the absolute size of pa-
rameters is of primary importance when choosing
which to prune, leading to an approach that is ex-
tremely simple to implement, and can be applied
to any neural network. lastly, we have gained
insight into the distribution of redundancy in the
id4 architecture.

8 acknowledgment
this work was partially supported by nsf award
iis-1514268 and partially supported by a gift
from bloomberg l.p. we gratefully acknowledge
the support of the defense advanced research
projects agency (darpa) communicating with
computers (cwc) program under aro prime
contract no. w911nf-15-1-0462. lastly, we ac-
knowledge nvidia corporation for the donation
of tesla k40 gpus.

use of the higher-level representation of the sen-
tence so far (the recurrent input).

lastly, on close inspection, we notice several
white diagonals emerging within some subsquares
of the matrices in figure 8, indicating that even
without initializing the weights to identity ma-
trices (as is sometimes done (le et al., 2015)),
an identity-like weight matrix is learned. at
higher pruning percentages, these diagonals be-
come more pronounced.

5 generalizability of our results

to test the generalizability of our results, we
also test our pruning approach on a smaller, non-
state-of-the-art id4 model trained on the wit3
vietnamese-english dataset (cettolo et al., 2012),
which consists of 133,000 sentence pairs. this
model is effectively a scaled-down version of the
state-of-the-art model in luong et al. (2015a), with
fewer layers, smaller vocabulary size, smaller hid-
den layer size, no attention mechanism, and about
11% as many parameters in total.
it achieves a
id7 score of 9.61 on the validation set.

although this model and its training set are on
a different scale to our main model, and the lan-
guage pair is different, we found very similar re-
sults. for this model, it is possible to prune 60% of
parameters with no immediate performance loss,
and with retraining it is possible to prune 90%, and
regain original performance. our main observa-
tions from sections 4.1 to 4.5 are also replicated;
in particular, class-blind pruning is most success-
ful,    sparse from the beginning    models are less
successful than pruned and retrained models, and
we observe the same patterns as seen in figure 8.

6 future work

as noted in section 4.3, including several itera-
tions of pruning and retraining would likely im-
prove the compression and performance of our
pruning method.
if possible it would be highly
valuable to exploit the sparsity of the pruned mod-
els to speed up training and runtime, perhaps
through sparse matrix representations and mul-
tiplications (see section 3.4). though we have
found magnitude-based pruning to perform very
well, it would be instructive to revisit the orig-
inal claim that other pruning methods (for ex-
ample optimal brain damage and optimal brain
surgery) are more principled, and perform a com-
parative study.

references
m. gethsiyal augasta and thangairulappan kathir-
valavakumar. 2013. pruning algorithms of neural
networks - a comparative study. central european
journal of computer science, 3(3):105   115.

dzmitry bahdanau, kyunghyun cho, and yoshua ben-
gio. 2015. id4 by jointly
learning to align and translate. in iclr.

mauro cettolo, christian girardi, and marcello fed-
erico. 2012. wit3: web inventory of transcribed
and translated talks. in eamt.

wenlin chen, james t wilson, stephen tyree, kilian q
weinberger, and yixin chen. 2015. compressing
neural networks with the hashing trick. in icml.

kyunghyun cho, bart van merrienboer, caglar gul-
cehre, fethi bougares, holger schwenk, and yoshua
bengio.
2014. learning phrase representations
using id56 encoder-decoder for statistical machine
translation. in emnlp.

maxwell d. collins and pushmeet kohli. 2014. mem-
ory bounded deep convolutional networks. arxiv
preprint arxiv:1412.1442.

matthieu courbariaux, yoshua bengio, and jean-pierre
david. 2015. training deep neural networks with
low precision multiplications. in iclr workshop.

emily l. denton, wojciech zaremba, joan bruna,
yann lecun, and rob fergus. 2014. exploiting lin-
ear structure within convolutional networks for ef   -
cient evaluation. in nips.

suyog gupta, ankur agrawal, kailash gopalakrish-
nan, and pritish narayanan. 2015. deep learning
with limited numerical precision. in icml.

song han, huizi mao, and william j dally. 2015a.
deep compression: compressing deep neural net-
works with pruning, trained quantization and huff-
man coding. in iclr.

song han, jeff pool, john tran, and william dally.
2015b. learning both weights and connections for
ef   cient neural network. in nips.

babak hassibi and david g. stork. 1993. second or-
der derivatives for network pruning: optimal brain
surgeon. morgan kaufmann.

geoffrey hinton, oriol vinyals, and jeff dean. 2015.
in

distilling the knowledge in a neural network.
nips deep learning workshop.

sepp hochreiter and j  urgen schmidhuber.

1997.
neural computation,

long short-term memory.
9(8):1735   1780.

forrest n. iandola, matthew w. moskewicz, khalid
ashraf, song han, william j. dally, and kurt
keutzer. 2016. squeezenet: alexnet-level accuracy
with 50x fewer parameters and < 0.5mb model size.
arxiv preprint arxiv:1602.07360.

max jaderberg, andrea vedaldi, and andrew zisser-
man. 2014. speeding up convolutional neural net-
works with low rank expansions. in nips.

s  ebastien jean, kyunghyun cho, roland memisevic,
and yoshua bengio. 2015a. on using very large
target vocabulary for id4. in
acl.

s  ebastien jean, orhan firat, kyunghyun cho, roland
memisevic, and yoshua bengio. 2015b. montreal
id4 systems for wmt   15. in
wmt.

nal kalchbrenner and phil blunsom. 2013. recurrent

continuous translation models. in emnlp.

quoc v. le, navdeep jaitly, and geoffrey e. hin-
ton. 2015. a simple way to initialize recurrent
networks of recti   ed linear units. arxiv preprint
arxiv:1504.00941.

yann le cun, john s. denker, and sara a. solla. 1989.

optimal brain damage. in nips.

zhouhan lin, matthieu courbariaux, roland memise-
vic, and yoshua bengio. 2016. neural networks
with few multiplications. in iclr.

zhiyun lu, vikas sindhwani, and tara n. sainath.
2016. learning compact recurrent neural networks.
in icassp.

minh-thang luong and christopher d. manning.
2015. stanford id4 systems
for spoken language domain. in iwslt.

minh-thang luong and christopher d. manning.
2016. achieving open vocabulary neural machine
translation with hybrid word-character models.
in
acl.

minh-thang luong, hieu pham, and christopher d.
manning. 2015a. effective approaches to attention-
based id4. in emnlp.

minh-thang luong, ilya sutskever, quoc v. le, oriol
vinyals, and wojciech zaremba. 2015b. address-
ing the rare word problem in neural machine trans-
lation. in acl.

kenton murray and david chiang. 2015. auto-sizing
neural networks: with applications to id165 lan-
guage models. in emnlp.

rohit prabhavalkar, ouais alsharif, antoine bruguier,
and ian mcgraw.
2016. on the compression
of recurrent neural networks with an application
to lvcsr acoustic modeling for embedded speech
recognition. in icassp.

rico sennrich, barry haddow, and alexandra birch.
2016. improving id4 models
with monolingual data. in acl.

suraj srinivas and r. venkatesh babu. 2015. data-
free parameter pruning for deep neural networks. in
bmvc.

ilya sutskever, oriol vinyals, and quoc v. le. 2014.
sequence to sequence learning with neural net-
works. in nips.

wojciech zaremba, ilya sutskever, and oriol vinyals.
recurrent neural network id173.

2014.
arxiv preprint arxiv:1409.2329.

