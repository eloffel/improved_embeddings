learning semantically and additively compositional

distributional representations

ran tian and naoaki okazaki and kentaro inui

{tianran, okazaki, inui}@ecei.tohoku.ac.jp

tohoku university, japan

6
1
0
2

 

n
u
j
 

8

 
 
]
l
c
.
s
c
[
 
 

1
v
1
6
4
2
0

.

6
0
6
1
:
v
i
x
r
a

abstract

this paper connects a vector-based com-
position model
to a formal semantics,
the dependency-based compositional se-
mantics (dcs). we show theoretical evi-
dence that the vector compositions in our
model conform to the logic of dcs. ex-
perimentally, we show that vector-based
composition brings a strong ability to
calculate similar phrases as similar vec-
tors, achieving near state-of-the-art on a
wide range of phrase similarity tasks and
relation classi   cation; meanwhile, dcs
can guide building vectors for structured
queries that can be directly executed. we
evaluate this utility on sentence comple-
tion task and report a new state-of-the-art.

introduction

1
a major goal of semantic processing is to map nat-
ural language utterances to representations that fa-
cilitate calculation of meanings, execution of com-
mands, and/or id136 of knowledge. formal
semantics supports such representations by de   n-
ing words as some functional units and combining
them via a speci   c logic. a simple and illustra-
tive example is the dependency-based composi-
tional semantics (dcs) (liang et al., 2013). dcs
composes meanings from denotations of words
(i.e. sets of things to which the words apply); say,
the denotations of the concept drug and the event
ban is shown in figure 1b, where drug is a list
of drug names and ban is a list of the subject-
complement pairs in any ban event; then, a list of
banned drugs can be constructed by    rst taking the
comp column of all records in ban (projection
     comp   ), and then intersecting the results with
drug (intersection          ). this procedure de   ned
how words can be combined to form a meaning.

better yet, the procedure can be concisely illus-
trated by the dcs tree of    banned drugs    (fig-
ure 1a), which is similar to a dependency tree but
possesses precise procedural and logical meaning
(section 2). dcs has been shown useful in ques-
tion answering (liang et al., 2013) and textual en-
tailment recognition (tian et al., 2014).

orthogonal to the formal semantics of dcs,
distributional vector representations are useful in
capturing lexical semantics of words (turney and
pantel, 2010; levy et al., 2015), and progress
is made in combining the word vectors to form
meanings of phrases/sentences (mitchell and la-
pata, 2010; baroni and zamparelli, 2010; grefen-
stette and sadrzadeh, 2011; socher et al., 2012;
paperno et al., 2014; hashimoto et al., 2014).
however, less effort is devoted to    nding a link
between vector-based compositions and the com-
position operations in any formal semantics. we
believe that if a link can be found, then symbolic
formulas in the formal semantics will be realized
by vectors composed from id27s, such
that similar things are realized by similar vectors;
meanwhile, vectors will acquire formal meanings
that can directly be used in execution or id136
process. still, to    nd a link is challenging because
any vector compositions that realize such a link
must conform to the logic of the formal semantics.
in this paper, we establish a link between
dcs and certain vector compositions, achieving
a vector-based dcs by replacing denotations of
words with word vectors, and realizing the compo-
sition operations such as intersection and projec-
tion as addition and linear mapping, respectively.
for example, to construct a vector for    banned
drugs   , one takes the word vector vban and mul-
tiply it by a matrix mcomp, corresponding to the
projection   comp; then, one adds the result to the
word vector vdrug to realize the intersection opera-
tion (figure 1c). we provide a method to train the

figure 2: dcs tree for a sentence

date list of banned drugs, by sorting its dot prod-
ucts with answer vectors that are also learned by
our model (figure 1d). this is due to the ability of
our approach to provide a language model that can
is
   nd likely words to    ll in the blanks such as    
a banned drug    or    the drug
is banned by . . .    .
a highlight is the calculation being done as if a
query is    executed    by the dcs tree of    banned
drugs   . we quantitatively evaluate this utility on
sentence completion task (zweig et al., 2012) and
report a new state-of-the-art (section 5.4).

2 dcs trees

dcs composes meanings from denotations, or
sets of things to which words apply. a    thing   
(i.e. element of a denotation) is represented by
a tuple of features of the form field=value,
with a    xed inventory of    elds. for example, a
denotation ban might be a set of tuples ban =
{(subj=canada, comp=thalidomide), . . .},
in which each tuple records participants of a ban-
ning event (e.g. canada banning thalidomide).

operations are applied to sets of things to gener-
ate new denotations, for modeling semantic com-
position. an example is the intersection of pet
and fish giving the denotation of    pet    sh   . an-
other necessary operation is projection; by   n we
mean a function mapping a tuple to its value of
the    eld n. for example,   comp(ban) is the value
set of the comp    elds in ban, which consists of
banned objects (i.e. {thalidomide, . . .}).
in this
paper, we assume a    eld arg to be names of
things representing themselves, hence for example
  arg(drug) is the set of names of drugs.
age      1

for a value set v , we also consider inverse im-
n (v ) := {x |   n(x)     v }. for example,

d1 :=      1

subj(  arg(man))

consists of all tuples of the form (subj=x, . . .),
where x is a man   s name (i.e. x       arg(man)).
thus, sell     d1 denotes men   s selling events
(i.e. {(subj=john, comp=aspirin), . . .} as in
figure 2). similarly, the denotation of    banned

figure 1: (a) the dcs tree of    banned drugs   ,
which controls (b) the calculation of its denota-
tion. in this paper, we learn word vectors and ma-
trices such that (c) the same calculation is realized
in id65. the constructed query
vector can be used to (d) retrieve a list of coarse-
grained candidate answers to that query.

word vectors and linear mappings (i.e. matrices)
jointly from unlabeled corpora.

the rationale for our model is as follows. first,
recent research has shown that additive composi-
tion of word vectors is an approximation to the sit-
uation where two words have overlapping context
(tian et al., 2015); therefore, it is suitable to im-
plement an    and    or intersection operation (sec-
tion 3). we design our model such that the resulted
distributional representations are expected to have
additive compositionality. second, when intersec-
tion is realized as addition, it is natural to imple-
ment projection as linear mapping, as suggested
by the logical interactions between the two oper-
ations (section 3). experimentally, we show that
vectors and matrices learned by our model exhibit
favorable characteristics as compared with vectors
trained by glove (pennington et al., 2014) or those
learned from syntactic dependencies (section 5.1).
finally, additive composition brings our model
a strong ability to calculate similar vectors for
similar phrases, whereas syntactic-semantic roles
(e.g. subj, comp) can be distinguished by dif-
ferent projection matrices (e.g. msubj, mcomp).
we achieve near state-of-the-art performance on a
wide range of phrase similarity tasks (section 5.2)
and relation classi   cation (section 5.3).

furthermore, we show that a vector as con-
structed above for    banned drugs    can be used as
a query vector to retrieve a coarse-grained candi-

ban comp drug arg banned drugsprojectionintersectionquery vector:   dot products sorteddrugmarijuanacannabistraf   ckingthalidomide...answer vectors:coarse-grained candidate  list for    banned drugs   arg aspirinthalidomide   comp alcoholthalidomide   subj governmentcanada   drug ban    =  comp projectionintersectiondenotation of     banned drugs   (c)(d)(a)(b)alcoholthalidomide   thalidomide   ufooduthalidomideucannabis   vbanvdrug + vbanmcomp ban comp drug arg a man sells banned drugs.sell man comp subj arg arg arg johnmike   comp aspirinperfume   subj johnmary   man sell figure 3: dcs trees in this work

drugs    as in figure 1b is formally written as

d2 := drug          1

arg(  comp(ban)),

hence the following denotation
d3 := sell     d1          1

comp(  arg(d2))

consists of selling events such that the subj is a
man and the comp is a banned drug.

the calculation above can proceed in a recur-
sive manner controlled by dcs trees. the dcs
tree for the sentence    a man sells banned drugs   
is shown in figure 2. formally, a dcs tree is de-
   ned as a rooted tree in which nodes are denota-
tions of content words and edges are labeled by
   elds at each ends. assume a node x has children
y1, . . . , yn, and the edges (x, y1), . . . , (x, yn) are
labeled by (p1, l1), . . . , (pn, ln),
respectively.
then, the denotation [[x]] of the subtree rooted at
x is recursively calculated as

     1
pi

(  li([[yi]])).

(1)

i=1

as a result, the denotation of the dcs tree in fig-
ure 2 is the denotation d3 of    a man sells banned
drugs    as calculated above. dcs can be further
extended to handle phenomena such as quanti   ers
or superlatives (liang et al., 2013; tian et al.,
2014). in this paper, we focus on the basic ver-
sion, but note that it is already expressive enough
to at least partially capture the meanings of a large
portion of phrases and sentences.

dcs trees can be learned from question-answer
pairs and a given database of denotations (liang
et al., 2013), or they can be extracted from de-
pendency trees if no database is speci   ed, by tak-
ing advantage of the observation that dcs trees
are similar to dependency trees (tian et al., 2014).
we use the latter approach, obtaining dcs trees by
rule-based conversion from universal dependency
(ud) trees (mcdonald et al., 2013). therefore,
nodes in a dcs tree are content words in a ud
tree, which are in the form of lemma-pos pairs

[[x]] := x     n(cid:92)

(figure 3). the inventory of    elds is designed
to be arg, subj, comp, and all prepositions.
prepositions are unlike content words which de-
note sets of things, but act as relations which we
treat similarly as subj and comp. for example,
a prepositional phrase attached to a verb (e.g. play
on the grass) is treated as in figure 3a. the pres-
ence of two    eld labels on each edge of a dcs
tree makes it convenient for modeling semantics in
several cases, such as a relative clause (figure 3b).

3 vector-based dcs
for any content word w, we use a query vector vw
to model its denotation, and an answer vector uw
to model a prototypical element in that denotation.
query vector v and answer vector u are learned
such that exp(v    u) is proportional to the prob-
ability of u answering the query v. the learning
source is a collection of dcs trees, based on the
idea that the dcs tree of a declarative sentence
usually has non-empty denotation. for exam-
ple,    kids play    means there exists some kid who
plays. consequently, some element in the play
denotation belongs to      1
subj(  arg(kid)), and
some element in the kid denotation belongs to
     1
arg(  subj(play)). this is a signal to increase
the dot product of uplay and the query vector of
     1
subj(  arg(kid)), as well as the dot product of
ukid and the query vector of      1
arg(  subj(play)).
when optimized on a large corpus, the    typical   
elements of play and kid should be learned by
uplay and ukid, respectively. in general, one has
theorem 1 assume the denotation of a dcs tree
is not empty. given any path from node x to
y, assume edges along the path are labeled by
(p, l), . . . , (k, n). then, an element in the deno-
tation y belongs to      1
l (  p(x) . . .).
therefore, for any two nodes in a dcs tree, the
path from one to another forms a training exam-
ple, which signals increasing the dot product of
the corresponding query and answer vectors.

n (  k(. . . (     1

it is noteworthy that the above formalization
happens to be closely related to the skip-gram
model (mikolov et al., 2013b). the skip-gram
learns a target vector vw and a context vector uw
for each word w. it assumes the id203 of a
word y co-occurring with a word x in a context
window is proportional to exp(vx    uy). hence,
if x and y co-occur within a context window, then
one gets a signal to increase vx    uy. if the con-
text window is taken as the same dcs tree, then

girl/n arg like/v subj hat/n red/j arg arg comp subj kids play on the grass.a red hat which girls likegrass/n play/v kid/n arg subj on arg (a)(b)the learning of skip-gram and vector-based dcs
will be almost the same, except that the target vec-
tor vx becomes the query vector v, which is no
longer assigned to the word x but the path from
x to y in the dcs tree (e.g. the query vector for
     1
subj(  arg(kid)) instead of vkid). therefore,
our model can also be regarded as extending skip-
gram to take account of the changes of meanings
caused by different syntactic-semantic roles.
additive composition word vectors trained by
skip-gram are known to be semantically additive,
such as exhibited in word analogy tasks. an effect
of adding up two skip-gram vectors is further ana-
lyzed in tian et al. (2015). namely, the target vec-
tor vw can be regarded as encoding the distribution
of context words surrounding w. if another word
x is given, vw can be decomposed into two parts,
one encodes context words shared with x, and an-
other encodes context words not shared. when vw
and vx are added up, the non-shared part of each of
them tend to cancel out, because non-shared parts
have nearly independent distributions. as a result,
the shared part gets reinforced. an error bound
is derived to estimate how close 1
2 (vw + vx) gets
to the distribution of the shared part. we can see
the same mechanism exists in vector-based dcs.
in a dcs tree, two paths share a context word
if they lead to a same node y; semantically, this
means some element in the denotation y belongs
to both denotations of the two paths (e.g. given the
sentence    kids play balls   ,      1
subj(  arg(kid))
and      1
comp(  arg(ball)) both contain a playing
event whose subj is a kid and comp is a ball).
therefore, addition of query vectors of two paths
approximates their intersection because the shared
context y gets reinforced.
projection generally, for any two denotations
x1, x2 and any projection   n, we have

  n(x1     x2)       n(x1)       n(x2).

(2)
and the           can often become    =   , for example
when   n is a one-to-one map or x1 =      1
n (v )
for some value set v . therefore, if intersection
is realized by addition, it will be natural to realize
projection by linear mapping because

(v1 + v2)mn = v1mn + v2mn

(3)
holds for any vectors v1, v2 and any matrix mn,
which is parallel to (2). if   n is realized by a ma-
trix mn, then      1
n should correspond to the in-
verse matrix m   1
n , because   n(     1
n (v )) = v for

n(cid:88)

i=1

any value set v . so we have realized all composi-
tion operations in dcs.
query vector of a dcs tree now, we can de   ne
the query vector of a dcs tree as parallel to (1):

v[[x]] := vx +

1
n

v[[yi]]mlim   1

pi

.

(4)

l

l

. . . mkm   1

. . . mkm   1

4 training
as described in section 3, vector-based dcs as-
signs a query vector vw and an answer vector uw
to each content word w. and for each    eld n, it
assigns two matrices mn and m   1
n . for any path
from node x to y sampled from a dcs tree, assume
the edges along are labeled by (p, l), . . . , (k, n).
then, the dot product vxmpm   1
n    uy
gets a signal to increase.
formally, we adopt the noise-contrastive esti-
mation (gutmann and hyv  arinen, 2012) as used
in the skip-gram model, and mix the paths sam-
pled from dcs trees with arti   cially generated
noise. then,   (vxmpm   1
n   uy) mod-
els the id203 of a training example coming
from dcs trees, where   (  ) = 1/{1 + exp(     )}
is the sigmoid function. the vectors and matri-
ces are trained by maximizing the log-likelihood
of the mixed data. we use stochastic gradient de-
scent (bottou, 2012) for training. some important
settings are discussed below.
noise for any vxm1m   1
   uy
obtained from a path of a dcs tree, we generate
noise by randomly choosing an index i     [2, 2l],
and then replacing mj or m   1
(   j     i) and uy by
mn(j) or m   1
n(j) and uz, respectively, where n(j)
and z are independently drawn from the marginal
(i.e. unigram) distributions of    elds and words.
update for each data point, when i is the chosen
index above for generating noise, we view indices
j < i as the    target    part, and j >= i as the    con-
text   , which is completely replaced by the noise,
as an analogous to the skip-gram model. then,
at each step we only update one vector and one
matrix from each of the target, context, and noise
part; more speci   cally, we only update vx, mi   1
or m   1
n(i), uy and uz,
at the step. this is much faster than always updat-
ing all matrices.
initialization matrices are initialized as 1
2 (i +
g), where i is the identity matrix; and g and all

i   1, mi or m   1

, mn(i) or m   1

. . . m2l   1m   1

2l

2

j

i

   1
comp(  arg(house))

build/v
rent/v
leave/v

  

   1
arg(  in(house))

sit/v

glove
books
author

published

novel
memoir
wrote

biography

autobiography

essay

illustrated

no matrix
essay/n
novel/n
memoir/n
books/n

autobiography/n

non-   ction/j

reprint/v
publish/v
republish/v
chapbook/n

vecdcs
novel/n
essay/n

anthology/n
publication/n

memoir/n
poem/n

autobiography/n

story/n

pamphlet/n

tale/n

vecud
essay/n
novel/n
article/n

anthology/n

poem/n

autobiography/n

publication/n

journal/n
memoir/n
pamphlet/n

  

   1
subj(  arg(house))   

victorian/j

stand/v
vacant/j

18th-century/j

historic/j

old/j

georgian/j

local/j

19th-century/j

table 1: top 10 similar words to    book/n   

  

vectors are initialized with i.i.d. gaussians of vari-
ance 1/d, where d is the vector dimension. we
   nd that the diagonal component i is necessary to
bring information from vx to uy, whereas the ran-
domness of g makes convergence faster. m   1
n is
initialized as the transpose of mn.

tenement/j

teacher/n

skill/n
he/p
she/p

therapist/n
student/n

they/p

mother/n
lesson/n
father/n

burn down/v
remodel/v
demolish/v
restore/v
renovate/v
rebuild/v
construct/v

skill/n
lesson/n

technique/n
experience/n

ability/n

something/n
knowledge/n
language/n
opportunity/n
instruction/n

house/n
stand/v
live/v
hang/v
seat/n
stay/v
serve/v
reside/v
hold/v

otherness/n
intimacy/n
femininity/n

self-awareness/n

life/n

self-expression/n
sadomasochism/n

emptiness/n
criminality/n
masculinity/n

   1
arg(  subj(learn))   

   1
arg(  comp(learn))   

   1
about(  arg(learn))

learning rate we    nd that the initial learning
rate for vectors can be set to 0.1. but for matrices,
it should be less than 0.0005 otherwise the model
diverges. for stable training, we rescale gradients
when their norms exceed a threshold.
regularizer during training, mn and m   1
n are
treated as independent matrices. however, we use
the regularizer   (cid:107)m   1
n mn)i(cid:107)2 to
drive m   1
n close to the inverse of mn.1 we also
use   (cid:107)m   
n mn     1
n mn)i(cid:107)2 to prevent mn
from having too different scales at different direc-
tions (i.e., to drive mn close to orthogonal). we
set    = 0.001 and    = 0.0001. despite the rather
weak regularizer, we    nd that m   1
n can be learned
to be exactly the inverse of mn, and mn can ac-
tually be an orthogonal matrix, showing some se-
mantic regularity (section 5.1).

n mn    1
d tr(m   

d tr(m   1

5 experiments

for training vector-based dcs, we use wikipedia
extractor2 to extract texts from the 2015-12-01
dump of english wikipedia3. then, we use stan-
ford parser4 (klein and manning, 2003) to parse
all sentences and convert the ud trees into dcs
trees by handwritten rules. we assign a weight to
each path of the dcs trees as follows.

1problem with the naive regularizer (cid:107)m   1m     i(cid:107)2 is
that, when the scale of m goes larger, it will drive m   1
smaller, which may lead to degeneration. so we scale i ac-
cording to the trace of m   1m.

2http://medialab.di.unipi.it/wiki/

wikipedia_extractor

3https://dumps.wikimedia.org/enwiki/
4http://nlp.stanford.edu/software/

lex-parser.shtml

table 2: top 10 answers of high dot products

k(cid:89)

i=1

for any path p passing through k intermediate
nodes of degrees n1, . . . , nk, respectively, we set

weight(p ) :=

1

ni     1

.

(5)

note that ni     2 because there is a path p passing
through the node; and weight(p ) = 1 if p con-
sists of a single edge. the equation (5) is intended
to degrade long paths which pass through several
high-valency nodes. we use a random walk algo-
rithm to sample paths such that the expected times
a path is sampled equals its weight. as a result,
the sampled path lengths range from 1 to 19, av-
erage 2.1, with an exponential tail. we convert all
words which are sampled less than 1000 times to
*unknown*/pos, and all prepositions occurring
less than 10000 times to an *unknown*    eld.
as a result, we obtain a vocabulary of 109k words
and 211    eld names.

using the sampled paths, vectors and matrices
are trained as in section 4 (vecdcs). the vector
dimension is set to d = 250. we compare with
three baselines: (i) all matrices are    xed to identity
(   no matrix   ), in order to investigate the effects
of meaning changes caused by syntactic-semantic
roles and prepositions; (ii) the regularizer enforc-
ing m   1
n to be actually the inverse matrix of mn is
set to    = 0 (   no inverse   ), in order to investigate
the effects of a semantically motivated constraint;
and (iii) applying the same training scheme to ud
trees directly, by modeling ud relations as matri-
ces (   vecud   ). in this case, one edge is assigned
one ud relation rel, so we implement the transfor-

vecdcs
-no matrix
-no inverse
vecud
glove
grefenstette and sadrzadeh (2011)
blacoe and lapata (2012):rae
grefenstette (2013a)
paperno et al. (2014)
hashimoto et al. (2014):waddnl
kartsaklis and sadrzadeh (2014)

an
0.51
0.52
0.47
0.44
0.41

0.31

-

-
-

-

nn
0.49
0.46
0.43
0.46
0.47

0.30

-

-
-

-

vo
0.41
0.42
0.38
0.41
0.41

0.28

-

-
-

-

0.48

0.40

0.39

svo
0.62
0.62
0.58
0.58
0.60

-
-
-
-

0.43

gs11
0.29
0.29
0.28
0.25
0.23
0.21

-
-
-

0.34
0.41

gs12
0.33
0.33
0.33
0.25
0.17

0.27
0.36

-
-

-
-

table 3: spearman   s    on phrase similarity

mation from child to parent by mrel, and from par-
ent to child by m   1
rel . the same hyper-parameters
are used to train vecud. by comparing vecdcs
with vecud we investigate if applying the seman-
tics framework of dcs makes any difference. ad-
ditionally, we compare with the glove (6b, 300d)
vector5 (pennington et al., 2014). norms of all
word vectors are normalized to 1 and frobenius
norms of all matrices are normalized to

   

d.

5.1 qualitative analysis
we observe several special properties of the vec-
tors and matrices trained by our model.

words are clustered by pos in terms of cosine
similarity, word vectors trained by vecdcs and
vecud are clustered by pos tags, probably due
to their interactions with matrices during training.
this is in contrast to the vectors trained by glove
or    no matrix    (table 1).

matrices show semantic regularity matrices
learned for arg, subj and comp are exactly
orthogonal, and some most frequent prepositions6
are remarkably close. for these matrices, the cor-
responding m   1 also exactly converge to their
inverse.
it suggests regularities in the semantic
space, especially because orthogonal matrices pre-
serve cosine similarity     if mn is orthogonal, two
words x, y and their projections   n(x),   n(y) will
have the same similarity measure, which is seman-
tically reasonable. in contrast, matrices trained by
vecud are only orthogonal for three ud relations,
namely conj, dep and appos.

words transformed by matrices to illustrate
the matrices trained by vecdcs, we start from the
query vectors of two words, house and learn,

5http://nlp.stanford.edu/projects/

glove/

6of, in, to, for, with, on, as, at, from

applying different matrices to them, and show
the 10 answer vectors of the highest dot prod-
ucts (tabel 2). these are the lists of likely words
take house as a subject, take house as a
which:
in house   , serve as a
complement,    lls into    
subject of learn, serve as a complement of learn,
and    lls into    learn about
   , respectively. as the
table shows, matrices in vecdcs are appropriately
learned to map word vectors to their syntactic-
semantic roles.

5.2 phrase similarity
to test if vecdcs has the composition ability to
calculate similar things as similar vectors, we con-
duct evaluation on a wide range of phrase similar-
ity tasks. in these tasks, a system calculates sim-
ilarity scores for pairs of phrases, and the perfor-
mance is evaluated as its correlation with human
annotators, measured by spearman   s   .

datasets mitchell and lapata (2010) create
datasets7 for pairs of three types of two-word
phrases: adjective-nouns (an) (e.g.    black hair   
and    dark eye   ), compound nouns (nn) (e.g.    tax
charge    and    interest rate   ) and verb-objects (vo)
(e.g.       ght war    and    win battle   ). each dataset
consists of 108 pairs and each pair is annotated by
18 humans (i.e., 1,944 scores in total). similarity
scores are integers ranging from 1 to 7. another
dataset8 is created by extending vo to subject-
verb-object (svo), and then assessing similari-
ties by crowd sourcing (kartsaklis and sadrzadeh,
2014). the dataset gs11 created by grefen-
stette and sadrzadeh (2011) (100 pairs, 25 an-
notators) is also of the form svo, but in each
pair only the verbs are different (e.g.    man pro-

7http://homepages.inf.ed.ac.uk/

s0453356/

8http://www.cs.ox.ac.uk/activities/

compdistmeaning/

message-topic(e1, e2)
message-topic(e1, e2)
message-topic(e1, e2)
component-whole(e2, e1)
message-topic(e1, e2)

it is a monthly [report]1 providing [opinion]2 and advice on current united states government contract issues.
the [report]1 gives an account of the silvicultural [work]2 done in africa, asia, australia, south american and the caribbean.
nus today responded to the government   s [announcement]1 of the long-awaited [review]2 of university funding.
the [review]1 published political [commentary]2 and opinion, but even more than that.
it is a 2004 [book]1 criticizing the political and linguistic [writings]2 of noam chomsky.

table 4: similar training instances clustered by cosine similarities between features

vecdcs
-no matrix
-no inverse
vecud
glove
socher et al. (2012)
+3 features
dos santos et al. (2015)
xu et al. (2015)

81.2
69.2
79.7
69.2
74.1
79.1
82.4
84.1
85.6

table 5: f1 on relation classi   cation

less, we note that    no matrix    performs as good as
vecdcs, suggesting that meaning changes caused
by syntactic-semantic roles might not be major
factors in these datasets, because the syntactic-
semantic relations are all    xed in each dataset.

5.3 relation classi   cation
in a relation classi   cation task, the relation be-
tween two words in a sentence needs to be clas-
si   ed; we expect vecdcs to perform better than
   no matrix    on this task because vecdcs can dis-
tinguish the different syntactic-semantic roles of
the two slots the two words    t in. we con   rm this
conjecture in this section.

dataset we use the dataset of semeval-2010
task 8 (hendrickx et al., 2009), in which 9 di-
rected relations (e.g. cause-effect) and 1 undi-
rected relation other are annotated, 8,000 in-
stances for training and 2,717 for test. perfor-
mance is measured by the 9-class direction-aware
macro-f1 score excluding other class.

our method for any sentence with two words
marked as e1 and e2, we construct the dcs tree
of the sentence, and take the subtree t rooted at
the common ancestor of e1 and e2. we construct
four vectors from t , namely: the query vector for
the subtree rooted at e1 (resp. e2), and the query
vector of the dcs tree obtained from t by re-
rooting it at e1 (resp. e2) (figure 4). the four
vectors are normalized and concatenated to form
the only feature used to train a classi   er. for ve-
cud, we use the corresponding vectors calculated
from ud trees. for glove, we use the word vec-
tor of e1 (resp. e2), and the sum of vectors of all
words within the span [e1, e2) (resp. (e1, e2]) as

figure 4: for    [smoke]1 cause    ight [delay]2   , we
construct (a)(b) from subtrees, and (c)(d) from re-
rooted trees, to form 4 query vectors as feature.

vide/supply money   ). the dataset gs12 described
in grefenstette (2013a) (194 pairs, 50 annotators)
is of the form adjective-noun-verb-adjective-
noun (e.g.    local family run/move small hotel   ),
where only verbs are different in each pair.

our method we calculate the cosine similarity
of query vectors corresponding to phrases. for ex-
ample, the query vector for       ght war    is calcu-
lated as vwarmargm   1
comp + v   ght. for vecud
we use mnsubj and mdobj instead of msubj and
mcomp, respectively. for glove we use additive
compositions.

results as shown in table 3, vecdcs is com-
petitive on an, nn, vo, svo and gs12, con-
sistently outperforming    no inverse   , vecud and
glove, showing strong compositionality. the
weakness of    no inverse    suggests that relaxing
the constraint of inverse matrices may hurt com-
positionaly, though our preliminary examination
on word similarities did not    nd any difference.
the gs11 dataset appears to favor models that can
learn from interactions between the subject and
object arguments, such as the non-linear model
waddnl in hashimoto et al. (2014) and the en-
tanglement model in kartsaklis and sadrzadeh
(2014). however, these models do not show par-
ticular advantages on other datasets. the recur-
sive autoencoder (rae) proposed in socher et al.
(2011) shares an aspect with vecdcs as to con-
struct meanings from parse trees. it is tested by
blacoe and lapata (2012) for compositionality,
where vecdcs appears to be better. neverthe-

flight arg delay arg smoke subj cause arg arg comp smoke flight arg delay arg smoke subj cause arg arg comp ? comp cause arg arg subj flight arg delay arg (a)(b)(c)(d)?    banned drugs   

   banned movies   

   banned books   

drug/n

marijuana/n
cannabis/n
traf   cking/n
thalidomide/n

smoking/n
narcotic/n
botox/n
doping/n

bratz/n
porn/n

indecent/n

blockbuster/n

movie/n
idiots/n
blacklist/n
grindhouse/n
doraemon/n

publish/n
unfair/n
obscene/n
samizdat/n

book/n

responsum/n

illegal/n

reclaiming/n
redbook/n

table 6: answers for composed query vectors

the four vectors. classi   er is id1669 with rbf ker-
nel, c = 2 and    = 0.25. the hyper-parameters
are selected by 5-fold cross validation.

results vecdcs outperforms baselines on rela-
tion classi   cation (table 5). it makes 16 errors in
misclassifying the direction of a relation, as com-
pared to 144 such errors made by    no matrix   , 23
by    no inverse   , 30 by vecud, and 161 by glove.
this suggests that models with syntactic-semantic
transformations (i.e. vecdcs,    no inverse   , and
vecud) are indeed good at distinguishing the dif-
ferent roles played by e1 and e2. vecdcs scores
moderately lower than the state-of-the-art (xu et
al., 2015), however we note that these results are
achieved by adding additional features and train-
ing task-speci   c neural networks (dos santos et
al., 2015; xu et al., 2015). our method only
uses features constructed from unlabeled corpora.
from this point of view, it is comparable to the
mv-id56 model (without features) in socher et
al. (2012), and vecdcs actually does better. ta-
ble 4 shows an example of clustered training in-
stances as assessed by cosine similarities between
their features. it suggests that the features used in
our method can actually cluster similar relations.

5.4 sentence completion
if vecdcs can compose query vectors of dcs
trees, one should be able to    execute    the vec-
tors to get a set of answers, as the original dcs
trees can do. this is done by taking dot prod-
ucts with answer vectors and then ranking the an-
swers. examples are shown in table 6. since
query vectors and answer vectors are trained from
unlabeled corpora, we can only obtain a coarse-
grained candidate list. however, it is noteworthy
that despite a common word    banned    shared by
the phrases, their answer lists are largely different,
suggesting that composition actually can be done.
moreover, some words indeed answer the queries

9https://www.csie.ntu.edu.tw/  cjlin/

libid166/

vecdcs
-no matrix
-no inverse
vecud
id165 (various)
zweig et al. (2012)
mnih and teh (2012)
gubbins and vlachos (2013)
mikolov et al. (2013a)

39-41

50
60
46
31

52
55
50
55

table 7: accuracy (%) on sentence completion

(e.g. thalidomide for    banned drugs    and samiz-
dat for    banned books   ).

quantitatively, we evaluate this utility of exe-
cuting queries on the sentence completion task. in
this task, a sentence is presented with a blank that
need to be    lled in. five possible words are given
as options for each blank, and a system needs to
choose the correct one. the task can be viewed as
a coarse-grained id53 or an evalua-
tion for language models (zweig et al., 2012). we
use the msr sentence completion dataset10 which
consists of 1,040 test questions and a corpus for
training language models. we train vecdcs on
this corpus and use it for evaluation.

results as shown in table 7, vecdcs scores
better than the id165 model and demonstrates
promising performance. however, to our surprise,
   no matrix    shows an even better result which is
the new state-of-the-art. here we might be fac-
ing the same problem as in the phrase similar-
ity task (section 5.2); namely, all choices in a
question    ll into the same blank and the same
syntactic-semantic role, so the transforming matri-
ces in vecdcs might not be able to distinguish dif-
ferent choices; on the other hand, vecdcs would
suffer more from parsing and pos-tagging errors.
nonetheless, we believe the result by    no matrix   
reveals a new horizon of sentence completion, and
suggests that composing semantic vectors accord-
ing to dcs trees could be a promising direction.

6 discussion

we have demonstrated a way to link a vector com-
position model to a formal semantics, combining
the strength of vector representations to calculate
phrase similarities, and the strength of formal se-
mantics to build up structured queries. in this sec-
tion, we discuss several lines of previous research
related to this work.

10http://research.microsoft.com/en-us/

projects/scc/

logic and id65 logic is
necessary for implementing the functional aspects
of meaning and organizing knowledge in a struc-
tured and unambiguous way.
in contrast, distri-
butional semantics provides an elegant methodol-
ogy for assessing semantic similarity and is well
suited for learning from data. there have been re-
peated calls for combining the strength of these
two approaches (coecke et al., 2010; baroni et al.,
2014; liang and potts, 2015), and several systems
(lewis and steedman, 2013; beltagy et al., 2014;
tian et al., 2014) have contributed to this direc-
tion. in the remarkable work by beltagy et al. (to
appear), word and phrase similarities are explicitly
transformed to weighted logical rules that are used
in a probabilistic id136 framework. however,
this approach requires considerable amount of en-
gineering, including the generation of rule candi-
dates (e.g. by aligning sentence fragments), con-
verting distributional similarities to weights, and
ef   ciently handling the rules and id136. what
if the distributional representations are equipped
with a logical interface, such that the id136
can be realized by simple vector calculations? we
have shown it possible to realize semantic com-
position; we believe this may lead to signi   cant
simpli   cation of the system design for combining
logic and id65.

compositional distributional models there
has been active exploration on how to combine
word vectors such that adequate phrase/sentence
similarities can be assessed (mitchell and lapata,
2010, inter alia), and there is nothing new in us-
ing matrices to model changes of meanings. how-
ever, previous model designs mostly rely on lin-
guistic intuitions (paperno et al., 2014, inter alia),
whereas our model has an exact logic interpreta-
tion. furthermore, by using additive composition
we enjoy a learning guarantee (tian et al., 2015).

vector-based logic models this work also
shares the spirit with grefenstette (2013b) and
rocktaeschel et al. (2014), in exploring vector cal-
culations that realize logic operations. however,
the previous works did not specify how to inte-
grate contextual distributional information, which
is necessary for calculating semantic similarity.

formal semantics our model
implements a
logic capable of semantic com-
fragment of
position,
largely due to the simple framework
of dependency-based id152

(liang et al., 2013). it    ts in a long tradition of
logic-based semantics (montague, 1970; dowty
et al., 1981; kamp and reyle, 1993), with exten-
sive studies on extracting semantics from syntactic
representations such as hpsg (copestake et al.,
2001; copestake et al., 2005) and id35 (baldridge
and kruijff, 2002; bos et al., 2004; steedman,
2012; artzi et al., 2015; mineshima et al., 2015).
logic for natural language id136 the
pursue of a logic more suitable for natural lan-
guage id136 is also not new.
for exam-
ple, maccartney and manning (2008) has imple-
mented a model of natural logic (lakoff, 1970).
we would not reach the current formalization of
logic of dcs without reading the work by cal-
vanese et al. (1998), which is an elegant formal-
ization of database semantics in description logic.
id29 dcs-related representations
have been actively used in id29 and
we see potential in applying our model. for ex-
ample, berant and liang (2014) convert   -dcs
queries to canonical utterances and assess para-
phrases at the surface level; an alternative could
be using vector-based dcs to bring distributional
similarity directly into calculation of denotations.
we also borrow ideas from previous work, for ex-
ample our training scheme is similar to guu et al.
(2015) in using paths and composition of matri-
ces, and our method is similar to poon and domin-
gos (2009) in building structured knowledge from
id91 syntactic parse of unlabeled data.
further applications regarding the usability
of distributional representations learned by our
model, a strong point is that the representation
takes into account syntactic/structural information
of context. unlike several previous models (pad  o
and lapata, 2007; levy and goldberg, 2014;
pham et al., 2015), our approach learns matrices
at the same time that can extract the information
according to different syntactic-semantic roles. a
related application is selectional preference (ba-
roni and lenci, 2010; lenci, 2011; van de cruys,
2014), wherein our model might has potential for
smoothly handling composition.
reproducibility find our code at https://
github.com/tianran/vecdcs

acknowledgments this work was supported by
crest, jst. we thank the anonymous reviewers
for their valuable comments.

references
[artzi et al.2015] yoav artzi, kenton lee, and luke
zettlemoyer. 2015. broad-coverage id35 semantic
parsing with amr. in proceedings of emnlp.

[baldridge and kruijff2002] jason

and
geert-jan kruijff. 2002. coupling id35 and hybrid
in proceedings of
logic dependency semantics.
acl.

baldridge

[baroni and lenci2010] marco baroni and alessandro
lenci. 2010. distributional memory: a general
framework for corpus-based semantics. computa-
tional linguistics, 36(4).

[baroni and zamparelli2010] marco

and
roberto zamparelli. 2010. nouns are vectors, ad-
jectives are matrices: representing adjective-noun
constructions in semantic space. in proceedings of
emnlp.

baroni

[baroni et al.2014] marco baroni, raffaella bernardi,
and roberto zamparelli. 2014. frege in space: a
program for compositional id65.
linguistic issues in language technology, 9(6).

[beltagy et al.2014] islam beltagy, katrin erk, and
raymond mooney. 2014. probabilistic soft logic
in proceedings of
for semantic textual similarity.
acl.

[beltagy et al.to appear] islam beltagy, stephen roller,
pengxiang cheng, katrin erk, and raymond j.
mooney.
to appear. representing meaning with a
combination of logical form and vectors. computa-
tional linguistics, special issue on formal distribu-
tional semantics.

[berant and liang2014] jonathan berant and percy
liang. 2014. id29 via id141.
in proceedings of acl.

[blacoe and lapata2012] william blacoe and mirella
lapata. 2012. a comparison of vector-based rep-
resentations for semantic composition. in proceed-
ings of emnlp-conll.

[bos et al.2004] johan bos, stephen clark, mark
steedman, james r. curran, and julia hockenmaier.
2004. wide-coverage semantic representations from
a id35 parser. in proceedings of iccl.

[bottou2012] l  eon bottou. 2012. stochastic gradient
descent tricks. in gr  egoire montavon, genevi`eve b.
orr, and klaus-robert m  uller, editors, neural net-
works: tricks of the trade. springer, berlin.

[calvanese et al.1998] diego calvanese, giuseppe de
giacomo, and maurizio lenzerini. 1998. on the
decidability of query containment under constraints.
in proceedings of the 17th acm sigact sigmod
sigart symposium on principles of database sys-
tems (pods98).

[coecke et al.2010] bob

mehrnoosh
sadrzadeh, and stephen clark. 2010. mathematical
foundations
for a compositional distributional
model of meaning. linguistic analysis.

coecke,

[copestake et al.2001] ann copestake, alex las-
2001. an algebra
construction in constraint-based

carides, and dan flickinger.
for
grammars. in proceedings of acl.

semantic

[copestake et al.2005] ann copestake, dan flickinger,
carl pollard, and ivan a. sag. 2005. minimal re-
cursion semantics: an introduction. research on
language and computation, 3(2-3).

[dos santos et al.2015] cicero dos santos, bing xiang,
and bowen zhou. 2015. classifying relations by
ranking with convolutional neural networks. in pro-
ceedings of acl-ijcnlp.

[dowty et al.1981] david r. dowty, robert e. wall,
and stanley peters. 1981. introduction to montague
semantics. springer netherlands.

[grefenstette and sadrzadeh2011] edward grefenstette
2011. experimen-
and mehrnoosh sadrzadeh.
tal support for a categorical compositional distri-
in proceedings of
butional model of meaning.
emnlp.

[grefenstette2013a] edward grefenstette.

2013a.
category-theoretic quantitative compositional
distributional models of natural language seman-
tics. phd thesis.

[grefenstette2013b] edward grefenstette. 2013b. to-
wards a formal id65: simulat-
ing logical calculi with tensors. in proceedings of
*sem.

[gubbins and vlachos2013] joseph gubbins and an-
dreas vlachos. 2013. dependency language models
for sentence completion. in proceedings of emnlp.

[gutmann and hyv  arinen2012] michael u. gutmann
and aapo hyv  arinen. 2012. noise-contrastive es-
timation of unnormalized statistical models, with
j. mach.
applications to natural image statistics.
learn. res., 13(1).

[guu et al.2015] kelvin guu, john miller, and percy
liang. 2015. traversing id13s in vec-
tor space. in proceedings of emnlp.

[hashimoto et al.2014] kazuma hashimoto, pontus
stenetorp, makoto miwa, and yoshimasa tsu-
ruoka. 2014. jointly learning word representations
and composition functions using predicate-argument
structures. in proceedings of emnlp.

[hendrickx et al.2009] iris hendrickx, su nam kim,
zornitsa kozareva, preslav nakov, diarmuid
  o s  eaghdha, sebastian pad  o, marco pennacchiotti,
lorenza romano, and stan szpakowicz.
2009.
semeval-2010 task 8: multi-way classi   cation of se-
mantic relations between pairs of nominals. in pro-
ceedings of the workshop on semantic evaluations:

recent achievements and future directions (sew-
2009).

[kamp and reyle1993] hans kamp and uwe reyle.
1993. from discourse to logic. springer nether-
lands.

[kartsaklis and sadrzadeh2014] dimitri kartsaklis and
mehrnoosh sadrzadeh. 2014. a study of entangle-
ment in a categorical framework of natural language.
in proceedings of the 11th workshop on quantum
physics and logic (qpl).

[klein and manning2003] dan klein and christo-
pher d. manning. 2003. fast exact id136 with
a factored model for natural language parsing.
in
advances in nips.

[lakoff1970] george lakoff. 1970. linguistics and

natural logic. synthese, 22(1-2).

[lenci2011] alessandro lenci. 2011. composing and
updating verb argument expectations: a distribu-
in proceedings of the 2nd
tional semantic model.
workshop on cognitive modeling and computa-
tional linguistics.

[levy and goldberg2014] omer levy and yoav gold-
berg. 2014. dependency-based id27s.
in proceedings of acl.

[levy et al.2015] omer levy, yoav goldberg, and ido
dagan. 2015.
improving distributional similarity
with lessons learned from id27s. trans-
actions of acl, 3.

[lewis and steedman2013] mike lewis

and mark
2013. combined distributional and

steedman.
logical semantics. transactions of acl, 1.

[liang and potts2015] percy liang and christopher
potts. 2015. bringing machine learning and compo-
sitional semantics together. annual review of lin-
guistics, 1.

[liang et al.2013] percy liang, michael i. jordan, and
dan klein. 2013. learning dependency-based com-
positional semantics. computational linguistics,
39(2).

[maccartney and manning2008] bill maccartney and
christopher d. manning. 2008. modeling semantic
containment and exclusion in natural language infer-
ence. in proceedings of coling.

[mcdonald et al.2013] ryan mcdonald, joakim nivre,
yvonne quirmbach-brundage, yoav goldberg, di-
panjan das, kuzman ganchev, keith hall, slav
petrov, hao zhang, oscar t  ackstr  om, claudia be-
dini, n  uria bertomeu castell  o, and jungmee lee.
2013. universal dependency annotation for multi-
lingual parsing. in proceedings acl.

[mikolov et al.2013a] tomas mikolov, kai chen, greg
corrado, and jeffrey dean. 2013a. ef   cient es-
timation of word representations in vector space.
arxiv:1301.3781.

[mikolov et al.2013b] tomas mikolov, ilya sutskever,
kai chen, greg corrado, and jeffrey dean. 2013b.
distributed representations of words and phrases
and their compositionality. in advances in nips.

[mineshima et al.2015] koji mineshima,

pascual
mart    nez-g  omez, yusuke miyao, and daisuke
id136
bekki.
in proceedings of
with id152.
emnlp.

higher-order logical

2015.

[mitchell and lapata2010] jeff mitchell and mirella
lapata. 2010. composition in distributional mod-
els of semantics. cognitive science, 34(8).

[mnih and teh2012] andriy mnih and yee whye teh.
2012. a fast and simple algorithm for training neu-
ral probabilistic language models. in in proceedings
of icml.

[montague1970] richard montague. 1970. universal

grammar. theoria, 36.

[pad  o and lapata2007] sebastian pad  o and mirella la-
pata. 2007. dependency-based construction of se-
mantic space models. computational linguistics,
33(2).

[paperno et al.2014] denis paperno, nghia the pham,
a practical and
and marco baroni.
linguistically-motivated approach to compositional
id65. in proceedings of acl.

2014.

[pennington et al.2014] jeffrey pennington, richard
socher, and christopher manning. 2014. glove:
global vectors for word representation. in proceed-
ings of emnlp.

the

[pham et al.2015] nghia

kruszewski, angeliki lazaridou,
baroni. 2015.
tations for lexical and sentential
c-phrase model. in proceedings of acl.

germ  an
and marco
jointly optimizing word represen-
tasks with the

pham,

[poon and domingos2009] hoifung poon and pedro
domingos. 2009. unsupervised id29.
in proceedings of emnlp.

[rocktaeschel et al.2014] tim rocktaeschel, matko
bosnjak, sameer singh, and sebastian riedel.
2014. low-dimensional embeddings of logic.
in
acl workshop on id29 (sp   14).

[socher et al.2011] richard socher, eric h. huang, jef-
frey pennin, christopher d manning, and andrew y.
ng. 2011. dynamic pooling and unfolding recur-
sive autoencoders for paraphrase detection. in ad-
vances in nips.

[socher et al.2012] richard socher, brody huval,
christopher d. manning, and andrew y. ng.
2012. semantic compositionality through recursive
matrix-vector spaces. in proceedings of emnlp.

[steedman2012] mark steedman. 2012. taking scope
- the natural semantics of quanti   ers. mit press.

[tian et al.2014] ran tian, yusuke miyao, and takuya
matsuzaki.
id136 on
dependency-based id152. in pro-
ceedings of acl.

logical

2014.

[tian et al.2015] ran tian, naoaki okazaki, and ken-
taro inui. 2015. the mechanism of additive compo-
sition. arxiv:1511.08407.

[turney and pantel2010] peter d. turney and patrick
pantel. 2010. from frequency to meaning: vec-
tor space models of semantics. journal of arti   cial
intelligence research, 37(1).

[van de cruys2014] tim van de cruys. 2014. a neural
network approach to selectional preference acquisi-
tion. in proceedings of emnlp.

[xu et al.2015] kun xu, yansong feng, songfang
huang, and dongyan zhao. 2015. semantic rela-
tion classi   cation via convolutional neural networks
in proceedings of
with simple negative sampling.
emnlp.

[zweig et al.2012] geoffrey zweig,

john c. platt,
christopher meek, christopher j.c. burges, ainur
yessenalina, and qiang liu. 2012. computational
approaches to sentence completion. in proceedings
of acl.

