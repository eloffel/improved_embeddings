6
1
0
2

 
r
a

 

m
6
1

 
 
]

c
d
.
s
c
[
 
 

2
v
7
6
4
4
0

.

3
0
6
1
:
v
i
x
r
a

large-scale machine learning on heterogeneous distributed systems

(preliminary white paper, november 9, 2015)

tensorflow:

mart    n abadi, ashish agarwal, paul barham, eugene brevdo, zhifeng chen, craig citro,

greg s. corrado, andy davis, jeffrey dean, matthieu devin, sanjay ghemawat, ian goodfellow,
andrew harp, geoffrey irving, michael isard, yangqing jia, rafal jozefowicz, lukasz kaiser,
manjunath kudlur, josh levenberg, dan man  e, rajat monga, sherry moore, derek murray,
chris olah, mike schuster, jonathon shlens, benoit steiner, ilya sutskever, kunal talwar,

paul tucker, vincent vanhoucke, vijay vasudevan, fernanda vi  egas, oriol vinyals,
pete warden, martin wattenberg, martin wicke, yuan yu, and xiaoqiang zheng

abstract

google research   

tensorflow [1] is an interface for expressing machine learn-
ing algorithms, and an implementation for executing such al-
gorithms. a computation expressed using tensorflow can be
executed with little or no change on a wide variety of hetero-
geneous systems, ranging from mobile devices such as phones
and tablets up to large-scale distributed systems of hundreds
of machines and thousands of computational devices such as
gpu cards. the system is    exible and can be used to express
a wide variety of algorithms, including training and id136
algorithms for deep neural network models, and it has been
used for conducting research and for deploying machine learn-
ing systems into production across more than a dozen areas of
computer science and other    elds, including speech recogni-
tion, id161, robotics, information retrieval, natural
language processing, geographic information extraction, and
computational drug discovery. this paper describes the ten-
sorflow interface and an implementation of that interface that
we have built at google. the tensorflow api and a reference
implementation were released as an open-source package under
the apache 2.0 license in november, 2015 and are available at
www.tensor   ow.org.

1

introduction

the google brain project started in 2011 to explore the
use of very-large-scale deep neural networks, both for
research and for use in google   s products. as part of
the early work in this project, we built distbelief, our
   rst-generation scalable distributed training and infer-
ence system [14], and this system has served us well. we
and others at google have performed a wide variety of re-
search using distbelief including work on unsupervised
learning [31], language representation [35, 52], models
for image classi   cation and id164 [16, 48],
video classi   cation [27], id103 [56, 21, 20],

   corresponding authors: jeffrey dean and rajat monga:

{jeff,rajatmonga}@google.com

1

sequence prediction [47], move selection for go [34],
pedestrian detection [2], id23 [38],
and other areas [17, 5]. in addition, often in close collab-
oration with the google brain team, more than 50 teams
at google and other alphabet companies have deployed
deep neural networks using distbelief in a wide variety
of products, including google search [11], our advertis-
ing products, our id103 systems [50, 6, 46],
google photos [43], google maps and streetview [19],
google translate [18], youtube, and many others.

based on our experience with distbelief and a more
complete understanding of the desirable system proper-
ties and requirements for training and using neural net-
works, we have built tensorflow, our second-generation
system for the implementation and deployment of large-
scale machine learning models. tensorflow takes com-
putations described using a data   ow-like model and
maps them onto a wide variety of different hardware
platforms, ranging from running id136 on mobile
device platforms such as android and ios to modest-
sized training and id136 systems using single ma-
chines containing one or many gpu cards to large-scale
training systems running on hundreds of specialized ma-
chines with thousands of gpus. having a single system
that can span such a broad range of platforms signi   -
cantly simpli   es the real-world use of machine learning
system, as we have found that having separate systems
for large-scale training and small-scale deployment leads
to signi   cant maintenance burdens and leaky abstrac-
tions. tensorflow computations are expressed as stateful
data   ow graphs (described in more detail in section 2),
and we have focused on making the system both    exible
enough for quickly experimenting with new models for
research purposes and suf   ciently high performance and
robust for production training and deployment of ma-
chine learning models. for scaling neural network train-
ing to larger deployments, tensorflow allows clients to
easily express various kinds of parallelism through repli-
cation and parallel execution of a core model data   ow

graph, with many different computational devices all col-
laborating to update a set of shared parameters or other
state. modest changes in the description of the com-
putation allow a wide variety of different approaches
to parallelism to be achieved and tried with low effort
[14, 29, 42]. some tensorflow uses allow some    exibil-
ity in terms of the consistency of parameter updates, and
we can easily express and take advantage of these relaxed
synchronization requirements in some of our larger de-
ployments. compared to distbelief, tensorflow   s pro-
gramming model is more    exible, its performance is sig-
ni   cantly better, and it supports training and using a
broader range of models on a wider variety of hetero-
geneous hardware platforms.

dozens of our internal clients of distbelief have al-
ready switched to tensorflow. these clients rely on
tensorflow for research and production, with tasks as
diverse as running id136 for id161 mod-
els on mobile phones to large-scale training of deep
neural networks with hundreds of billions of parame-
ters on hundreds of billions of example records using
many hundreds of machines [11, 47, 48, 18, 53, 41].
although these applications have concentrated on ma-
chine learning and deep neural networks in particular,
we expect that tensorflow   s abstractions will be useful
in a variety of other domains, including other kinds of
machine learning algorithms, and possibly other kinds
of numerical computations. we have open-sourced the
tensorflow api and a reference implementation under
the apache 2.0 license in november, 2015, available at
www.tensor   ow.org.

the rest of this paper describes tensorflow in more
detail. section 2 describes the programming model and
basic concepts of the tensorflow interface, and section 3
describes both our single machine and distributed imple-
mentations. section 4 describes several extensions to
the basic programming model, and section 5 describes
several optimizations to the basic implementations. sec-
tion 6 describes some of our experiences in using ten-
sorflow, section 7 describes several programming id-
ioms we have found helpful when using tensorflow, and
section 9 describes several auxiliary tools we have built
around the core tensorflow system. sections 10 and 11
discuss future and related work, respectively, and sec-
tion 12 offers concluding thoughts.

structures within the graph in a manner similar to naiad
[36]. clients typically construct a computational graph
using one of the supported frontend languages (c++ or
python). an example fragment to construct and then ex-
ecute a tensorflow graph using the python front end is
shown in figure 1, and the resulting computation graph
in figure 2.

in a tensorflow graph, each node has zero or more in-
puts and zero or more outputs, and represents the instan-
tiation of an operation. values that    ow along normal
edges in the graph (from outputs to inputs) are tensors,
arbitrary dimensionality arrays where the underlying el-
ement type is speci   ed or inferred at graph-construction
time. special edges, called control dependencies, can
also exist in the graph: no data    ows along such edges,
but they indicate that the source node for the control de-
pendence must    nish executing before the destination
node for the control dependence starts executing. since
our model includes mutable state, control dependencies
can be used directly by clients to enforce happens before
relationships. our implementation also sometimes in-
serts control dependencies to enforce orderings between
otherwise independent operations as a way of, for exam-
ple, controlling the peak memory usage.

operations and kernels

an operation has a name and represents an abstract com-
putation (e.g.,    matrix multiply   , or    add   ). an opera-
tion can have attributes, and all attributes must be pro-
vided or inferred at graph-construction time in order to
instantiate a node to perform the operation. one com-
mon use of attributes is to make operations polymorphic
over different tensor element types (e.g., add of two ten-
sors of type    oat versus add of two tensors of type int32).
a kernel is a particular implementation of an operation
that can be run on a particular type of device (e.g., cpu
or gpu). a tensorflow binary de   nes the sets of opera-
tions and kernels available via a registration mechanism,
and this set can be extended by linking in additional op-
eration and/or kernel de   nitions/registrations. table 1
shows some of the kinds of operations built into the core
tensorflow library.

2 programming model and basic concepts

sessions

a tensorflow computation is described by a directed
graph, which is composed of a set of nodes. the graph
represents a data   ow computation, with extensions for
allowing some kinds of nodes to maintain and update
persistent state and for branching and looping control

clients programs interact with the tensorflow system by
creating a session. to create a computation graph, the
session interface supports an extend method to augment
the current graph managed by the session with additional
nodes and edges (the initial graph when a session is cre-
ated is empty). the other primary operation supported

2

import tensorflow as tf

b = tf.variable(tf.zeros([100]))
w = tf.variable(tf.random_uniform([784,100],-1,1)) # 784x100 matrix w/rnd vals
x = tf.placeholder(name="x")
relu = tf.nn.relu(tf.matmul(w, x) + b)
c = [...]

# placeholder for input
# relu(wx+b)
# cost computed as a function
# of relu

# 100-d vector, init to zeroes

s = tf.session()
for step in xrange(0, 10):

input = ...construct 100-d input array ...
result = s.run(c, feed_dict={x: input})
print step, result

# create 100-d vector for input
# fetch cost, feeding x=input

figure 1: example tensorflow code fragment

figure 2: corresponding computation graph for figure 1

examples

category
element-wise mathematical operations add, sub, mul, div, exp, log, greater, less, equal, ...
concat, slice, split, constant, rank, shape, shuf   e, ...
array operations
matmul, matrixinverse, matrixdeterminant, ...
matrix operations
stateful operations
variable, assign, assignadd, ...
softmax, sigmoid, relu, convolution2d, maxpool, ...
neural-net building blocks
save, restore
checkpointing operations
enqueue, dequeue, mutexacquire, mutexrelease, ...
queue and synchronization operations
control    ow operations
merge, switch, enter, leave, nextiteration

table 1: example tensorflow operation types

by the session interface is run, which takes a set of out-
put names that need to be computed, as well as an op-
tional set of tensors to be fed into the graph in place of
certain outputs of nodes. using the arguments to run,
the tensorflow implementation can compute the transi-
tive closure of all nodes that must be executed in order
to compute the outputs that were requested, and can then

arrange to execute the appropriate nodes in an order that
respects their dependencies (as described in more detail
in 3.1). most of our uses of tensorflow set up a session
with a graph once, and then execute the full graph or a
few distinct subgraphs thousands or millions of times via
run calls.

3

wbxmatmuladdrelu...cvariables

in most computations a graph is executed multiple times.
most tensors do not survive past a single execution of the
graph. however, a variable is a special kind of opera-
tion that returns a handle to a persistent mutable tensor
that survives across executions of a graph. handles to
these persistent mutable tensors can be passed to a hand-
ful of special operations, such as assign and assignadd
(equivalent to +=) that mutate the referenced tensor. for
machine learning applications of tensorflow, the param-
eters of the model are typically stored in tensors held in
variables, and are updated as part of the run of the train-
ing graph for the model.

3

implementation

the main components in a tensorflow system are the
client, which uses the session interface to communicate
with the master, and one or more worker processes, with
each worker process responsible for arbitrating access to
one or more computational devices (such as cpu cores
or gpu cards) and for executing graph nodes on those
devices as instructed by the master. we have both lo-
cal and distributed implementations of the tensorflow
interface. the local implementation is used when the
client, the master, and the worker all run on a single ma-
chine in the context of a single operating system process
(possibly with multiple devices, if for example, the ma-
chine has many gpu cards installed). the distributed
implementation shares most of the code with the local
implementation, but extends it with support for an en-
vironment where the client, the master, and the workers
can all be in different processes on different machines.
in our distributed environment, these different tasks are
containers in jobs managed by a cluster scheduling sys-
tem [51]. these two different modes are illustrated in
figure 3. most of the rest of this section discusses is-
sues that are common to both implementations, while
section 3.3 discusses some issues that are particular to
the distributed implementation.

devices

devices are the computational heart of tensorflow. each
worker is responsible for one or more devices, and
each device has a device type, and a name. device
names are composed of pieces that identify the de-
vice   s type, the device   s index within the worker, and,
in our distributed setting, an identi   cation of the job
and task of the worker (or localhost for the case where
the devices are local to the process). example device
names are "/job:localhost/device:cpu:0" or
"/job:worker/task:17/device:gpu:3". we

have implementations of our device interface for cpus
and gpus, and new device implementations for other de-
vice types can be provided via a registration mechanism.
each device object is responsible for managing alloca-
tion and deallocation of device memory, and for arrang-
ing for the execution of any kernels that are requested by
higher levels in the tensorflow implementation.

tensors

a tensor in our implementation is a typed, multi-
dimensional array. we support a variety of tensor ele-
ment types, including signed and unsigned integers rang-
ing in size from 8 bits to 64 bits, ieee    oat and double
types, a complex number type, and a string type (an ar-
bitrary byte array). backing store of the appropriate size
is managed by an allocator that is speci   c to the device
on which the tensor resides. tensor backing store buffers
are reference counted and are deallocated when no refer-
ences remain.

3.1 single-device execution
let   s    rst consider the simplest execution scenario: a sin-
gle worker process with a single device. the nodes of the
graph are executed in an order that respects the depen-
dencies between nodes. in particular, we keep track of
a count per node of the number of dependencies of that
node that have not yet been executed. once this count
drops to zero, the node is eligible for execution and is
added to a ready queue. the ready queue is processed in
some unspeci   ed order, delegating execution of the ker-
nel for a node to the device object. when a node has
   nished executing, the counts of all nodes that depend
on the completed node are decremented.

3.2 multi-device execution
once a system has multiple devices, there are two main
complications: deciding which device to place the com-
putation for each node in the graph, and then managing
the required communication of data across device bound-
aries implied by these placement decisions. this subsec-
tion discusses these two issues.

3.2.1 node placement

given a computation graph, one of the main responsi-
bilities of the tensorflow implementation is to map the
computation onto the set of available devices. a sim-
pli   ed version of this algorithm is presented here. see
section 4.3 for extensions supported by this algorithm.

one input to the placement algorithm is a cost model,
which contains estimates of the sizes (in bytes) of the

4

figure 3: single machine and distributed system structure

input and output tensors for each graph node, along with
estimates of the computation time required for each node
when presented with its input tensors. this cost model is
either statically estimated based on heuristics associated
with different operation types, or is measured based on
an actual set of placement decisions for earlier execu-
tions of the graph.

the placement algorithm    rst runs a simulated execu-
tion of the graph. the simulation is described below and
ends up picking a device for each node in the graph using
greedy heuristics. the node to device placement gener-
ated by this simulation is also used as the placement for
the real execution.

the placement algorithm starts with the sources of the
computation graph, and simulates the activity on each
device in the system as it progresses. for each node that
is reached in this traversal, the set of feasible devices is
considered (a device may not be feasible if the device
does not provide a kernel that implements the particular
operation). for nodes with multiple feasible devices, the
placement algorithm uses a greedy heuristic that exam-
ines the effects on the completion time of the node of
placing the node on each possible device. this heuristic
takes into account the estimated or measured execution
time of the operation on that kind of device from the cost
model, and also includes the costs of any communica-
tion that would be introduced in order to transmit inputs
to this node from other devices to the considered device.
the device where the node   s operation would    nish the
soonest is selected as the device for that operation, and
the placement process then continues onwards to make
placement decisions for other nodes in the graph, includ-
ing downstream nodes that are now ready for their own
simulated execution. section 4.3 describes some exten-
sions that allow users to provide hints and partial con-
straints to guide the placement algorithm. the placement
algorithm is an area of ongoing development within the
system.

3.2.2 cross-device communication

once the node placement has been computed, the graph
is partitioned into a set of subgraphs, one per device. any
cross-device edge from x to y is removed and replaced
by an edge from x to a new send node in x   s subgraph
and an edge from a corresponding receive node to y in
y   s subgraph. see figure 4 for an example of this graph
transformation.

figure 4: before & after insertion of send/receive nodes

at runtime, the implementations of the send and re-
ceive nodes coordinate to transfer data across devices.
this allows us to isolate all communication inside send
and receive implementations, which simpli   es the rest
of the runtime.

when we insert send and receive nodes, we canoni-
calize all users of a particular tensor on a particular de-
vice to use a single receive node, rather than one re-
ceive node per downstream user on a particular device.
this ensures that the data for the needed tensor is only
transmitted once between a source device     destination
device pair, and that memory for the tensor on the desti-
nation device is only allocated once, rather than multiple
times (e.g., see nodes b and c in figure 4)

by handling communication in this manner, we also
allow the scheduling of individual nodes of the graph
on different devices to be decentralized into the work-
ers:
the send and receive nodes impart the necessary

5

clientmastersessionrunexecutesubgraphworkergpu0gpu1...cpu0clientprocesssessionrunexecutesubgraphworkerprocess 1gpu0gpu1...cpu0gpu0gpu1...cpu0gpu0gpu1...cpu0masterprocessworkerprocess 2workerprocess 3single processabcxyrecvsendrecvsendabcxydevice awwdevice adevice bdevice bsynchronization between different workers and devices,
and the master only needs to issue a single run request
per graph execution to each worker that has any nodes for
the graph, rather than being involved in the scheduling of
every node or every cross-device communication. this
makes the system much more scalable and allows much
   ner-granularity node executions than if the scheduling
were forced to be done by the master.

3.3 distributed execution

distributed execution of a graph is very similar to multi-
device execution. after device placement, a subgraph is
created per device. send/receive node pairs that com-
municate across worker processes use remote communi-
cation mechanisms such as tcp or rdma to move data
across machine boundaries.

fault tolerance

failures in a distributed execution can be detected in a
variety of places. the main ones we rely on are (a) an
error in a communication between a send and receive
node pair, and (b) periodic health-checks from the master
process to every worker process.

when a failure is detected, the entire graph execution
is aborted and restarted from scratch. recall however
that variable nodes refer to tensors that persist across ex-
ecutions of the graph. we support consistent checkpoint-
ing and recovery of this state on a restart. in partcular,
each variable node is connected to a save node. these
save nodes are executed periodically, say once every n
iterations, or once every n seconds. when they execute,
the contents of the variables are written to persistent stor-
age, e.g., a distributed    le system. similarly each vari-
able is connected to a restore node that is only enabled
in the    rst iteration after a restart. see section 4.2 for
details on how some nodes can only be enabled on some
executions of the graph.

4 extensions

in this section we describe several more advanced fea-
tures of the basic programming model that was intro-
duced in section 2.

4.1 gradient computation

many optimization algorithms, including common ma-
chine learning training algorithms like stochastic gradi-
ent descent [45], compute the gradient of a cost function
with respect to a set of inputs. because this is such a

figure 5: gradients computed for graph in figure 2

common need, tensorflow has built-in support for au-
tomatic gradient computation.
if a tensor c in a ten-
sorflow graph depends, perhaps through a complex sub-
graph of operations, on some set of tensors {xk}, then
there is a built-in function that will return the tensors
{dc/dxk}. gradient tensors are computed, like other
tensors, by extending the tensorflow graph, using the
following procedure.

when tensorflow needs to compute the gradient of
a tensor c with respect to some tensor i on which c
depends, it    rst    nds the path in the computation graph
from i to c. then it backtracks from c to i, and for
each operation on the backward path it adds a node to
the tensorflow graph, composing the partial gradients
along the backwards path using the chain rule. the newly
added node computes the    gradient function    for the cor-
responding operation in the forward path. a gradient
function may be registered by any operation. this func-
tion takes as input not only the partial gradients com-
puted already along the backward path, but also, option-
ally, the inputs and outputs of the forward operation. fig-
ure 5 shows gradients for a cost computed from the ex-
ample of figure 2. grey arrows show potential inputs
to gradient functions that are not used for the particular
operations shown. the addition needed to figure 1 to
compute these gradients is:

[db,dw,dx] = tf.gradients(c, [b,w,x])

in general an operation may have multiple outputs, and
c may only depend on some of them. if, for example,
operation o has two outputs y1 and y2, and c only de-
pends on y2, then the    rst input to o   s gradient function
is set to 0 since dc/dy1 = 0.

automatic gradient computation complicates opti-
mization, particularly of memory usage. when execut-
ing    forward    computation subgraphs, i.e., those that are
explicitly constructed by the user, a sensible heuristic
breaks ties when deciding which node to execute next by
observing the order in which the graph was constructed.

6

wbxmatmuladdrelu...cwbxmatmuladdrelu...cdc/dwdmatmuldadddrelu...1dc/dbdc/dxthis generally means that temporary outputs are con-
sumed soon after being constructed, so their memory can
be reused quickly. when the heuristic is ineffective, the
user can change the order of graph construction, or add
control dependencies as described in section 5. when
gradient nodes are automatically added to the graph, the
user has less control, and the heuristics may break down.
in particular, because gradients reverse the forward com-
putation order, tensors that are used early in a graph   s
execution are frequently needed again near the end of a
gradient computation. such tensors can hold on to a lot
of scarce gpu memory and unnecessarily limit the size
of computations. we are actively working on improve-
ments to memory management to deal better with such
cases. options include using more sophisticated heuris-
tics to determine the order of graph execution, recom-
puting tensors instead of retaining them in memory, and
swapping out long-lived tensors from gpu memory to
more plentiful host cpu memory.

4.2 partial execution

often a client wants to execute just a subgraph of the
entire execution graph. to support this, once the client
has set up a computation graph in a session, our run
method allows them to execute an arbitrary subgraph of
the whole graph, and to inject arbitrary data along any
edge in the graph, and to retrieve data    owing along any
edge in the graph.

each node in the graph has a name, and each output of
a node is identi   ed by the source node name and the out-
put port from the node, numbered from 0 (e.g.,    bar:0   
refers to the 1st output of the    bar    node, while    bar:1   
refers to the 2nd output).

two arguments to the run call help de   ne the exact
subgraph of the computation graph that will be executed.
first, the run call accepts inputs, an optional mapping
of name:port names to    fed    tensors values. second,
the run call accepts output names, a list of output
name[:port] speci   cations indicating which nodes
should be executed, and, if the port portion is present in a
name, that that particular output tensor value for the node
should be returned to the client if the run call completes
successfully.

the graph is transformed based on the values of in-
puts and outputs. each node:port speci   ed in inputs is
replaced with a feed node, which will pick up the pro-
vided input tensor from specially-initialized entries in a
rendezvous object used for the run call. similarly, each
output name with a port is connected to a special fetch
node that arranges to save the output tensor and return it
to the client when the run call is complete. finally, once
the graph has been rewritten with the insertion of these

figure 6: before and after graph transformation for par-
tial execution

special feed and fetch nodes, the set of nodes to execute
can be determined by starting at each of the nodes named
by any output and working backwards in the graph using
the graph dependencies to determine the full set of nodes
that must be executed in the rewritten graph in order to
compute the outputs. figure 6 shows an original graph
on the left, and the transformed graph that results when
run is invoked with inputs=={b} and outputs=={f:0}.
since we only need to compute the output of node f, we
will not execute nodes d and e, since they have no con-
tribution to the output of f.

4.3 device constraints

tensorflow clients can control the placement of nodes
on devices by providing partial constraints for a node
about which devices it can execute on.
for ex-
ample,    only place this node on a device of
type
gpu   , or    this node can be placed on any device in
/job:worker/task:17   , or    colocate this node
with the node named variable13   . within the con-
   nes of these constraints, the placement algorithm is re-
sponsible for choosing an assignment of nodes to de-
vices that provides fast execution of the computation and
also satis   es various constraints imposed by the devices
themselves, such as limiting the total amount of memory
needed on a device in order to execute its subset of graph
nodes.

supporting such constraints requires changes to the
placement algorithm described in section 3.2.1. we    rst
compute the feasible set of devices for each node, and
then use union-   nd on the graph of colocation constraints
to compute the graph components that must be placed
together. for each such component, we compute the in-
tersection of the feasible device sets. the computed fea-
sible device set per node    ts easily into the placement
algorithm   s simulator.

7

abcedfabcedffeedfetch4.4 control flow

4.5

input operations

although data   ow graphs without any explicit control
   ow are quite expressive, we have observed a number of
cases where supporting conditionals and loops can lead
to more concise and ef   cient representations of machine
learning algorithms.

much as in the data   ow-machine approach described
by arvind [3], we introduce a small set of primitive con-
trol    ow operators into tensorflow and generalize ten-
sorflow to handle cyclic data   ow graphs. the switch
and merge operators allow us to skip the execution of
an entire subgraph based on the value of a boolean ten-
sor. the enter, leave, and nextiteration operators allow
us to express iteration. high-level programming con-
structs such as if-conditionals and while-loops can be
easily compiled into data   ow graphs with these control
   ow operators.

the tensorflow runtime implements a notion of tags
and frames conceptually similar to the mit tagged-
token machine [4]. each iteration of a loop is uniquely
identi   ed by a tag, and its execution state is represented
by a frame. an input can enter an iteration whenever it
becomes available; thus, multiple iterations can be exe-
cuted concurrently.

tensorflow uses a distributed coordination mecha-
nism to execute graphs with control    ow. in general, a
loop can contain nodes that are assigned to many dif-
ferent devices. therefore, managing the state of a loop
becomes a problem of distributed termination detection.
tensorflow   s solution is based on graph rewriting. dur-
ing the graph partitioning, we automatically add control
nodes to each partition. these nodes implement a small
state machine that orchestrates the start and termination
of each iteration, and decides the termination of the loop.
for each iteration, the device that owns the loop termi-
nation predicate sends a tiny control message to every
participating device.

as explained above, we often train machine learning
models by id119, and represent gradient com-
putations as part of data   ow graphs. when a model
includes control-   ow operations, we must account for
them in the corresponding gradient computation. for ex-
ample, the gradient computation for a model with an if-
conditional will need to know which branch of the con-
ditional was taken, then apply the gradient logic to this
branch. similarly, the gradient computation for a model
with a while-loop will need to know how many iterations
were taken, and will also rely on the intermediate values
computed during those iterations. the basic technique is
to rewrite the graph so to memorize the values needed for
the gradient computation. we omit the somewhat intri-
cate details of this encoding.

although input data can be provided to a computation via
feed nodes, another common mechanism used for train-
ing large-scale machine learning models is to have spe-
cial input operation nodes in the graph, which are typi-
cally con   gured with a set of    lenames and which yield
a tensor containing one or more examples from the data
stored in that set of    les each time they are executed.
this allows data to be read directly from the underlying
storage system into the memory of the machine that will
perform subsequent processing on the data. in con   gura-
tions where the client process is separate from the worker
process, if the data were fed, it typically would require an
extra network hop (from the storage system to the client
and then from the client to the worker vs. directly from
the storage system to ther worker when using an input
node).

4.6 queues

queues are a useful feature that we have added to ten-
sorflow. they allow different portions of the graph to
execute asynchronously, possibly at different candences,
and to hand off data through enqueue and dequeue op-
erations. enqueue operations can block until space be-
comes available in the queue, and dequeue operations
can block until a desired minimum number of elements
are available in the queue. one use of queues is to allow
input data to be prefetched from disk    les while a previ-
ous batch of data is still being processed by the compu-
tational portion of a machine learning model. they can
also be used for other kinds of grouping, including accu-
mulating many gradients in order to compute some more
complex combination of gradients over a larger batch,
or to group different input sentences for recurrent lan-
guage models into bins of sentences that are approxi-
mately the same length, which can then be processed
more ef   ciently.

in addition to normal fifo queues, we have also im-
plemented a shuf   ing queue, which randomly shuf   es its
elements within a large in-memory buffer. this shuf   ing
functionality is useful for machine learning algorithms
that want to randomize the order in which they process
examples, for example.

4.7 containers

a container is the mechanism within tensorflow for
managing longer-lived mutable state. the backing store
for a variable lives in a container. the default con-
tainer is one that persists until the process terminates,
but we also allow other named containers. a container

8

can be reset by clearing it of its contents entirely. us-
ing containers, it is possible to share state even across
completely disjoint computation graphs associated with
different sessions.

5 optimizations

in this section, we describe some of the optimizations
in the tensorflow implementation that improve perfor-
mance or resource usage of the system.

5.1 common subexpression elimination

since the construction of computation graphs is often
done by many different layers of abstractions in the client
code, computation graphs can easily end up with redun-
dant copies of the same computation. to handle this, we
have implemented a common subexpression pass similar
to the algorithm described by click [12] that runs over
the computation graph and canonicalizes multiple copies
of operations with identical inputs and operation types
to just a single one of these nodes, and redirects graph
edges appropriately to re   ect this canonicalization.

5.2 controlling data communication and

memory usage

careful scheduling of tensorflow operations can result
in better performance of the system, in particular with
respect to data transfers and memory usage. speci   cally,
scheduling can reduce the time window during which
intermediate results need to be kept in memory in be-
tween operations and hence the peak memory consump-
tion. this reduction is particularly important for gpu
devices where memory is scarce. furthermore, orches-
trating the communication of data across devices can re-
duce contention for network resources.

while there are many opportunities for scheduling op-
timizations, here we focus on one that we found partic-
ularly necessary and effective. it concerns the schedul-
ing of receive nodes for reading remote values. if no
precautions are taken, these nodes may start much ear-
lier than necessary, possibly all at once when execution
starts. by performing an as-soon-as-possible/as-late-as-
possible (asap/alap) calculation, of the kind common
in operations research, we analyze the critical paths of
graphs, in order to estimate when to start the receive
nodes. we then insert control edges with the aim of de-
laying the start of these nodes until just before their re-
sults are needed.

5.3 asynchronous kernels

in addition to normal synchronous kernels that complete
their execution at the end of the compute method, our
framework also supports non-blocking kernels. such
non-blocking kernels use a slightly different interface
whereby the compute method is passed a continuation
that should be invoked when the kernel   s execution is
complete. this is an optimization for environments
where having many active threads is relatively expensive
in terms of memory usage or other resources, and allows
us to avoid tying up an execution thread for unbounded
periods of time while waiting for i/o or other events to
occur. examples of asynchronous kernels include the
receive kernel, and the enqueue and dequeue kernels
(which might need to block if queue space is not avail-
able or if no data is available to be read, respectively).

5.4 optimized libraries for kernel imple-

mentations

we often make use of pre-existing highly-optimized nu-
merical libraries to implement kernels for some opera-
tions. for example, there are a number of optimized li-
braries for performing matrix multiplies on different de-
vices, including blas [15] and cublas [39], or gpu
libraries for convolutional kernels for deep neural nets
such as cuda-convnet [28] and cudnn [9]. many of
our kernel implementations are relatively thin wrappers
around such optimized libraries.

we make fairly extensive use of the open-source eigen
id202 library [25] for many of the kernel imple-
mentations in the system. as one part of the develop-
ment of tensorflow, our team (primarily benoit steiner)
has extended the open source eigen library with support
for arbitrary dimensionality tensor operations.

5.5 lossy compression

some machine learning algorithms, including those typ-
ically used for training neural networks, are tolerant of
noise and reduced precision arithmetic. in a manner sim-
ilar to the distbelief system [14], we often use lossy
compression of higher precision internal representations
when sending data between devices (sometimes within
the same machine but especially across machine bound-
aries). for example, we often insert special conversion
nodes that convert 32-bit    oating point representations
into a 16-bit    oating point representation (not the pro-
posed ieee 16-bit    oating point standard, but rather just
a 32-bit ieee 794    oat format, but with 16 bits less pre-
cision in the mantissa), and then convert back to a 32-
bit representation on the other side of the communica-
tion channel (by just    lling in zeroes for the lost portion

9

of the mantissa, since that   s less computationally expen-
sive than doing the mathematically correct probabilistic
rounding when doing this 32     16     32-bit conver-
sion).

6 status and experience

the tensorflow interface and a reference implemen-
tation have been open sourced under an apache 2.0
license, and the system is available for download at
www.tensor   ow.org. the system includes detailed docu-
mentation, a number of tutorials, and a number of exam-
ples demonstrating how to use the system for a variety
of different machine learning tasks. the examples in-
clude models for classifying hand-written digits from the
mnist dataset (the    hello world    of machine learning
algorithms) [32], classifying images from the cifar-
10 dataset [30], doing id38 using a recur-
rent lstm [22] network, training id27 vec-
tors [35] and more.

the system includes front-ends for specifying tensor-
flow computations in python and c++, and we expect
other front-ends to be added over time in response to
the desires of both internal google users and the broader
open-source community.

we have quite a few machine learning models in our
previous distbelief system [14] that we have migrated
over to tensorflow. the rest of this section discusses
some lessons we have learned that are generalizable for
any such migration of machine learning models from one
system to another, and therefore may be valuable to oth-
ers.

in particular, we focus on our lessons from porting a
state-of-the-art convolutional neural network for image
recognition termed inception [23]. this image recogni-
tion system classi   es 224    224 pixel images into one
of 1000 labels (e.g.,    cheetah   ,    garbage truck   , etc.).
such a model comprises 13.6 million learnable parame-
ters and 36,000 operations when expressed as a tensor-
flow graph. running id136 on a single image re-
quires 2 billion multiply-add operations.

after building all necessary mathematical operations
in tensorflow, assembling and debugging all 36,000 op-
erations into the correct graph structure proved challeng-
ing. validating correctness is a dif   cult enterprise be-
cause the system is inherently stochastic and only in-
tended to behave in a certain way in expectation     po-
tentially after hours of computation. given these cir-
cumstances, we found the following strategies critical for
porting the inception model to tensorflow:

1. build tools to gain insight into the exact number of
parameters in a given model. such tools demon-

10

strated subtle    aws in a complex network architec-
ture speci   cation.
in particular we were able to
identify operations and variables instantiated incor-
rectly due to automatic broadcasting in a mathemat-
ical operation across a dimension.

2. start small and scale up. the    rst convolutional
neural network that we ported from our previ-
ous system was a small network employed on the
cifar-10 data set [30]. debugging such a network
elucidated subtle edge cases in individual opera-
tions (e.g., max-pooling) within the machine learn-
ing system that would have been practically indeci-
pherable in more complex models.

3. always ensure that the objective (id168)
matches between machine learning systems when
learning is turned off. setting the learning rate to be
zero helped us identify unexpected behavior in how
we had randomly initialized variables in a model.
such an error would have been dif   cult to identify
in a dynamic, training network.

4. make a single machine implementation match be-
fore debugging a distributed implementation. this
strategy helped us delineate and debug discrep-
ancies in training performance between machine
learning system.
in particular, we identi   ed bugs
due to race conditions and non-atomic operations
incorrectly assumed to be atomic.

5. guard against numerical errors. numerical li-
braries are inconsistent in how they handle non-
   nite    oating point values. convolutional neu-
ral networks are particularly susceptible to numer-
ical instability and will tend to diverge quite regu-
larly during experimentation and debugging phases.
guarding against this behavior by checking for non-
   nite    oating point values allows one to detect er-
rors in real time as opposed to identifying divergent
behavior post-hoc.

6. analyze pieces of a network and understand the
magnitude of numerical error. running subsec-
tions of a neural network in parallel on two machine
learning systems provides a precise method to en-
sure that a numerical algorithm is identical across
two systems. given that such algorithms run with
   oating point precision, it is important to predict
and understand the magnitude of expected numer-
ical error in order to judge whether a given compo-
nent is correctly implemented (e.g., distinguishing
between    within 1e-2, great!    and    within 1e-2:
why is it so incorrect?!   ).

figure 7: synchronous and asynchronous data parallel training

validating complex mathematical operations in the
presence of an inherently stochastic system is quite chal-
lenging. the strategies outlined above proved invaluable
in gaining con   dence in the system and ultimately in in-
stantiating the inception model in tensorflow. the end
result of these efforts resulted in a 6-fold speed improve-
ment in training time versus our existing distbelief im-
plementation of the model and such speed gains proved
indispensable in training a new class of larger-scale im-
age recognition models.

7 common programming idioms

tensorflow   s basic data   ow graph model can be used in
a variety of ways for machine learning applications. one
domain we care about is speeding up training of com-
putationally intensive neural network models on large
datasets. this section describes several techniques that
we and others have developed in order to accomplish
this, and illustrates how to use tensorflow to realize
these various approaches.

the approaches in this subsection assume that the
model is being trained using stochastic id119
(sgd) with relatively modest-sized mini-batches of 100
to 1000 examples.

data parallel training

one simple technique for speeding up sgd is to paral-
lelize the computation of the gradient for a mini-batch
across mini-batch elements. for example, if we are us-
ing a mini-batch size of 1000 elements, we can use 10
replicas of the model to each compute the gradient for
100 elements, and then combine the gradients and apply
updates to the parameters synchronously, in order to be-
have exactly as if we were running the sequential sgd
algorithm with a batch size of 1000 elements.
in this
case, the tensorflow graph simply has many replicas of
the portion of the graph that does the bulk of the model
computation, and a single client thread drives the entire
training loop for this large graph. this is illustrated in
the top portion of figure 7.

this approach can also be made asynchronous, where
the tensorflow graph has many replicas of the portion of
the graph that does the bulk of the model computation,
and each one of these replicas also applies the parame-
ter updates to the model parameters asynchronously. in
this con   guration, there is one client thread for each of
the graph replicas. this is illustrated in the bottom por-
tion of figure 7. this asynchronous approach was also
described in [14].

11

inputdevice binputdevice cinputdevice aparameter device(s)p  paddupdateclientsynchronous data parallelismclient 1inputdevice binputdevice cinputdevice aparameter device(s)pupdate  pupdateupdate  p  pclient 2client 3asynchronous data parallelismmodelmodelmodelmodelmodelmodel8 performance

a future version of this white paper will have a compre-
hensive performance evaluation section of both the sin-
gle machine and distributed implementations.

9 tools

this section describes some tools we have developed that
sit alongside the core tensorflow graph execution en-
gine.

9.1 tensorboard: visualization of graph

structures and summary statistics

in order to help users understand the structure of their
computation graphs and also to understand the overall
behavior of machine learning models, we have built ten-
sorboard, a companion visualization tool for tensorflow
that is included in the open source release.

visualization of computation graphs

many of the computation graphs for deep neural net-
works can be quite complex. for example, the computa-
tion graph for training a model similar to google   s incep-
tion model [48], a deep convolutional neural net that had
the best classi   cation performance in the id163 2014
contest, has over 36,000 nodes in its tensorflow compu-
tation graph, and some deep recurrent lstm models for
id38 have more than 15,000 nodes.

due to the size and topology of these graphs, naive vi-
sualization techniques often produce cluttered and over-
whelming diagrams. to help users see the underlying
organization of the graphs, the algorithms in tensor-
board collapse nodes into high-level blocks, highlighting
groups with identical structures. the system also sep-
arates out high-degree nodes, which often serve book-
keeping functions, into a separate area of the screen. do-
ing so reduces visual clutter and focuses attention on the
core sections of the computation graph.

the entire visualization is interactive: users can pan,
zoom, and expand grouped nodes to drill down for de-
tails. an example of the visualization for the graph of a
deep convolutional image model is shown in figure 10.

visualization of summary data

when training machine learning models, users often
want to be able to examine the state of various aspects
of the model, and how this state changes over time. to
this end, tensorflow supports a collection of different
summary operations that can be inserted into the graph,

figure 8: model parallel training

figure 9: concurrent steps

model parallel training

model parallel training, where different portions of the
model computation are done on different computational
devices simultaneously for the same batch of examples,
is also easy to express in tensorflow. figure 8 shows
an example of a recurrent, deep lstm model used for
sequence to sequence learning (see [47]), parallelized
across three different devices.

concurrent steps for model computation pipelining

another common way to get better utilization for train-
ing deep neural networks is to pipeline the computation
of the model within the same devices, by running a small
number of concurrent steps within the same set of de-
vices. this is shown in figure 9. it is somewhat similar
to asynchronous data parallelism, except that the paral-
lelism occurs within the same device(s), rather than repli-
cating the computation graph on different devices. this
allows       lling in the gaps    where computation of a sin-
gle batch of examples might not be able to fully utilize
the full parallelism on all devices at all times during a
single step.

12

p1aaaaap2bbbbbp3cccccclientdevice 1device 2device 3modelinputmodelinputmodelinputpupdateupdateupdateclientfigure 10: tensorboard graph visualization of a convolutional neural network model

figure 11: tensorboard graphical display of model summary statistics time series data

including scalar summaries (e.g., for examining overall
properties of the model, such as the value of the loss
function averaged across a collection of examples, or the
time taken to execute the computation graph), histogram-
based summaries (e.g., the distribution of weight values
in a neural network layer), or image-based summaries
(e.g., a visualization of the    lter weights learned in a
convolutional neural network). typically computation
graphs are set up so that summary nodes are included
to monitor various interesting values, and every so often
during execution of the training graph, the set of sum-
mary nodes are also executed, in addition to the normal
set of nodes that are executed, and the client driver pro-
gram writes the summary data to a log    le associated
with the model training. the tensorboard program is
then con   gured to watch this log    le for new summary

records, and can display this summary information and
how it changes over time (with the ability to select the
measurement of    time    to be relative wall time since
the beginning of the execution of the tensorflow pro-
gram, absolute time, or    steps   , a numeric measure of
the number of graph executions that have occurred since
the beginning of execution of the tensorflow program).
a screen shot of the visualization of summary values in
tensorboard is shown in figure 11.

9.2 performance tracing

we also have an internal tool called eeg (not included
in the initial open source release in november, 2015) that
we use to collect and visualize very    ne-grained informa-
tion about the exact ordering and performance character-

13

istics of the execution of tensorflow graphs. this tool
works in both our single machine and distributed imple-
mentations, and is very useful for understanding the bot-
tlenecks in the computation and communication patterns
of a tensorflow program.

traces are collected simultaneously on each machine
in the system from a variety of sources including linux
kernel ftrace, our own lightweight thread tracing tools
and the cuda pro   ling tools interface (cupti). with
these logs we can reconstruct the execution of a dis-
tributed training step with microsecond-level details of
every thread-switch, cuda kernel launch and dma op-
eration.

traces are combined in a visualization server which
is designed to rapidly extract events in a speci   ed
timerange and summarize at appropriate detail level for
the user-interface resolution. any signi   cant delays
due to communication, synchronization or dma-related
stalls are identi   ed and highlighted using arrows in the
visualization. initially the ui provides an overview of the
entire trace, with only the most signi   cant performance
artifacts highlighted. as the user progressively zooms in,
increasingly    ne resolution details are rendered.

figure 12 shows an example eeg visualization of a
model being trained on a multi-core cpu platform. the
top third of the screenshot shows tensorflow operations
being dispatched in parallel, according to the data   ow
constraints. the bottom section of the trace shows how
most operations are decomposed into multiple work-
items which are executed concurrently in a thread pool.
the diagonal arrows on the right hand size show where
queueing delay is building up in the thread pool. fig-
ure 13 shows another eeg visualization with compu-
tation mainly happening on the gpu. host threads can
be seen enqueuing tensorflow gpu operations as they
become runnable (the light blue thread pool), and back-
ground housekeeping threads can be seen in other col-
ors being migrated across processor cores. once again,
arrows show where threads are stalled on gpu to cpu
transfers, or where ops experience signi   cant queueing
delay.

finally, figure 14 shows a more detailed view which
allows us to examine how tensor   ow gpu operators
are assigned to multiple gpu streams. whenever the
data   ow graph allows parallel execution or data trans-
fer we endeavour to expose the ordering constraints to
the gpu device using streams and stream dependency
primitives.

10 future work

we have several different directions for future work. we
will continue to use tensorflow to develop new and in-

teresting machine learning models for arti   cial intelli-
gence, and in the course of doing this, we may discover
ways in which we will need to extend the basic ten-
sorflow system. the open source community may also
come up with new and interesting directions for the ten-
sorflow implementation.

one extension to the basic programming model that
we are considering is a function mechanism, whereby
a user can specify an entire subgraph of a tensorflow
computation to be a reusable component. in the imple-
mentation we have designed, these functions can become
reusable components even across different front-end lan-
guages for tensorflow, so that a user could de   ne a func-
tion using the python front end, but then use that func-
tion as a basic building block from within the c++ front-
end. we are hopeful that this cross-language reusability
will bootstrap a vibrant community of machine learning
researchers publishing not just whole examples of their
research, but also small reusable components from their
work that can be reused in other contexts.

we also have a number of concrete directions to im-
prove the performance of tensorflow. one such direc-
tion is our initial work on a just-in-time compiler that
can take a subgraph of a tensorflow execution, perhaps
with some runtime pro   ling information about the typi-
cal sizes and shapes of tensors, and can generate an op-
timized routine for this subgraph. this compiler will un-
derstand the semantics of perform a number of optimiza-
tions such as loop fusion, blocking and tiling for locality,
specialization for particular shapes and sizes, etc.

we also imagine that a signi   cant area for future work
will be in improving the placement and node scheduling
algorithms used to decide where different nodes will exe-
cute, and when they should start executing. we have cur-
rently implemented a number of heuristics in these sub-
systems, and we   d like to have the system instead learn
to make good placement decisions (perhaps using a deep
neural network, combined with a id23
objective function).

11 related work

there are many other systems that are comparable in
various ways with tensorflow. theano [7], torch [13],
caffe [26], chainer [49] and the computational network
toolkit [54] are a few systems designed primarily for the
training of neural networks. each of these systems maps
the computation onto a single machine, unlike the dis-
tributed tensorflow implementation. like theano and
chainer, tensorflow supports symbolic differentiation,
thus making it easier to de   ne and work with gradient-
based optimization algorithms. like caffe, tensorflow
has a core written in c++, simplifying the deployment

14

figure 12: eeg visualization of multi-threaded cpu operations (x-axis is time in   s).

figure 13: eeg visualization of inception training showing cpu and gpu activity.

of trained models in a wide variety of production set-
tings, including memory- and computation-constrained
environments such as mobile devices.

the tensorflow system shares some design charac-
teristics with its predecessor system, distbelief [14],
and with later systems with similar designs like project
adam [10] and the parameter server project [33]. like
distbelief and project adam, tensorflow allows com-
putations to be spread out across many computational de-
vices across many machines, and allows users to specify

machine learning models using relatively high-level de-
scriptions. unlike distbelief and project adam, though,
the general-purpose data   ow graph model in tensorflow
is more    exible and more amenable to expressing a wider
variety of machine learning models and optimization al-
gorithms. it also permits a signi   cant simpli   cation by
allowing the expression of stateful parameter nodes as
variables, and variable update operations that are just
additional nodes in the graph; in contrast, distbelief,
project adam and the parameter server systems all have

15

figure 14: timeline of multi-stream gpu execution.

whole separate parameter server subsystems devoted to
communicating and updating parameter values.

the halide system [40] for expressing image pro-
cessing pipelines uses a similar intermediate represen-
tation to the tensorflow data   ow graph. unlike ten-
sorflow, though, the halide system actually has higher-
level knowledge of the semantics of its operations and
uses this knowledge to generate highly optimized pieces
of code that combine multiple operations, taking into ac-
count parallelism and locality. halide runs the resulting
computations only on a single machine, and not in a dis-
tributed setting. in future work we are hoping to extend
tensorflow with a similar cross-operation dynamic com-
pilation framework.

like tensorflow, several other distributed systems
have been developed for executing data   ow graphs
across a cluster. dryad [24] and flume [8] demon-
strate how a complex work   ow can be represented as
a data   ow graph. ciel [37] and naiad [36] introduce
generic support for data-dependent control    ow: ciel
represents iteration as a dag that dynamically unfolds,
whereas naiad uses a static graph with cycles to support
lower-latency iteration. spark [55] is optimized for com-
putations that access the same data repeatedly, using    re-
silient distributed datasets    (rdds), which are soft-state
cached outputs of earlier computations. dandelion [44]
executes data   ow graphs across a cluster of heteroge-
neous devices, including gpus. tensorflow uses a hy-
brid data   ow model that borrows elements from each
of these systems.
its data   ow scheduler, which is the
component that chooses the next node to execute, uses
the same basic algorithm as dryad, flume, ciel, and
spark. its distributed architecture is closest to naiad, in

that the system uses a single, optimized data   ow graph to
represent the entire computation, and caches information
about that graph on each device to minimize coordination
overhead. like spark and naiad, tensorflow works best
when there is suf   cient ram in the cluster to hold the
working set of the computation. iteration in tensorflow
uses a hybrid approach: multiple replicas of the same
data   ow graph may be executing at once, while sharing
the same set of variables. replicas can share data asyn-
chronously through the variables, or use synchronization
mechanisms in the graph, such as queues, to operate syn-
chronously. tensorflow also supports iteration within a
graph, which is a hybrid of ciel and naiad: for simplic-
ity, each node    res only when all of its inputs are ready
(like ciel); but for ef   ciency the graph is represented as
a static, cyclic data   ow (like naiad).

12 conclusions

we have described tensorflow, a    exible data    ow-
based programming model, as well as single machine
and distributed implementations of this programming
model. the system is borne from real-world experience
in conducting research and deploying more than one hun-
dred machine learning projects throughout a wide range
of google products and services. we have open sourced
a version of tensorflow, and hope that a vibrant shared
community develops around the use of tensorflow. we
are excited to see how others outside of google make use
of tensorflow in their own work.

16

acknowledgements

the development of tensorflow has bene   tted enor-
mously from the large and broad machine learning com-
munity at google, and in particular from the suggestions
and contributions from rest of the google brain team
and also from the hundreds of distbelief and tensorflow
users within google. without a doubt, the usability and
functionality of tensorflow has been greatly expanded
by listening to their feedback.

many individuals have contributed to tensorflow
and to its open source release, including john gian-
nandrea (for creating a supportive research environ-
ment), irina kofman and phing turner (project manage-
ment), bill gruber and david westbrook (technical writ-
ing), dave andersen, anelia angelova, yaroslav bu-
latov, jianmin chen, jerjou cheng, george dahl, an-
drew dai, lucy gao, mig gerard, stephan gouws,
naveen kumar, geoffrey hinton, mrinal kalarishnan,
anjuli kannan, yutaka leon-suematsu, frank li, pe-
ter liu, xiaobing liu, nishant patil, pierre sermanet,
noam shazeer, jascha sohl-dickstein, philip tucker,
yonghui wu, ke yang, and cliff young (general con-
tributions), doug fritz, patrick hurst, dilip krish-
nan, daniel smilkov, james wexler, jimbo wilson,
kanit ham wongsuphasawat, cassandra xia, and the
big picture team (graph visualization), chris leary,
robert springer and the stream executor
team,
kayur patel, michael piatek, and the colab team, and
the many others who have contributed to the tensorflow
design and code base.

references

[1] mart    n abadi, ashish agarwal, paul barham, eugene
brevdo, zhifeng chen, craig citro, greg s. corrado,
andy davis, jeffrey dean, matthieu devin, sanjay ghe-
mawat, ian goodfellow, andrew harp, geoffrey irv-
ing, michael isard, yangqing jia, rafal jozefowicz,
lukasz kaiser, manjunath kudlur, josh levenberg, dan
man  e, rajat monga, sherry moore, derek murray, chris
olah, mike schuster, jonathon shlens, benoit steiner,
ilya sutskever, kunal talwar, paul tucker, vincent
vanhoucke, vijay vasudevan, fernanda vi  egas, oriol
vinyals, pete warden, martin wattenberg, martin wicke,
yuan yu, and xiaoqiang zheng. tensorflow: large-scale
machine learning on heterogeneous systems, 2015. soft-
ware available from tensor   ow.org.

[2] anelia angelova, alex krizhevsky, and vincent van-
houcke. pedestrian detection with a large-   eld-of-view
deep network. in robotics and automation (icra), 2015
ieee international conference on, pages 704   711. ieee,
2015. caltech pdf.

[3] arvind and david e. culler.
science vol. 1,

computer

of

annual

1986.

review
chapter

17

225   253.
data   ow architectures,
www.dtic.mil/cgi-bin/gettrdoc?location=u2&
doc=gettrdoc.pdf&ad=ada166235.

pages

1986.

[4] arvind and rishiyur s. nikhil.

executing a pro-
gram on the mit tagged-token data   ow architec-
ieee trans. comput., 39(3):300   318, 1990.
ture.
dl.acm.org/citation.cfm?id=78583.

[5] jimmy ba, volodymyr mnih, and koray kavukcuoglu.
atten-
2014.

recognition with
preprint

visual
arxiv:1412.7755,

multiple
tion.
arxiv.org/abs/1412.7755.

object
arxiv

[6] franc  oise beaufays.

google

behind
googleresearch.blogspot.com/2015/08/the-neural-
networks-behind-google-voice.html.

voice

the
neural
transcription,

networks
2015.

[7] james bergstra, olivier breuleux, fr  ed  eric bastien, pas-
cal lamblin, razvan pascanu, guillaume desjardins,
joseph turian, david warde-farley, and yoshua bengio.
theano: a cpu and gpu math expression compiler. in
proceedings of the python for scienti   c computing con-
ference (scipy), volume 4, page 3. austin, tx, 2010.
umontreal pdf.

[8] craig chambers, ashish raniwala, frances perry,
stephen adams, robert r henry, robert bradshaw,
and nathan weizenbaum.
easy, ef   -
in acm sigplan no-
cient data-parallel pipelines.
tices, volume 45, pages 363   375. acm, 2010.
re-
search.google.com/pubs/archive/35650.pdf.

flumejava:

[9] sharan chetlur, cliff woolley, philippe vandermer-
sch, jonathan cohen, john tran, bryan catanzaro,
and evan shelhamer. cudnn: ef   cient primitives for
deep learning. arxiv preprint arxiv:1410.0759, 2014.
arxiv.org/abs/1410.0759.

[10] trishul chilimbi, yutaka suzue, johnson apacible, and
project adam: building an
karthik kalyanaraman.
ef   cient and scalable deep learning training system.
in
11th usenix symposium on operating systems design
and implementation (osdi 14), pages 571   582, 2014.
www.usenix.org/system/   les/conference/osdi14/osdi14-
paper-chilimbi.pdf.

[11] jack clark.
search

lucrative
web
2015.
www.bloomberg.com/news/articles/2015-10-26/google-
turning-its-lucrative-web-search-over-to-ai-machines.

to ai machines,

google

turning

over

its

[12] cliff click. global code motion/global value number-
ing. in acm sigplan notices, volume 30, pages 246   
257. acm, 1995.
courses.cs.washington.edu/courses/
cse501/06wi/reading/click-pldi95.pdf.

[13] ronan collobert,

samy bengio,

johnny
torch: a modular machine learning
idiap, 2002.

mari  ethoz.
software library.
infoscience.ep   .ch/record/82802/   les/rr02-46.pdf.

technical

report,

and

[14] jeffrey dean, gregory s. corrado, rajat monga, kai
chen, matthieu devin, quoc v. le, mark z. mao,
marc   aurelio ranzato, andrew senior, paul tucker,

ke yang, and andrew y. ng. large scale distributed deep
networks. in nips, 2012. google research pdf.

[25] beno    t jacob, ga  el guennebaud, et al. eigen library for

id202. eigen.tuxfamily.org.

[15] jack j dongarra, jeremy du croz, sven hammar-
ling, and iain s duff. a set of level 3 basic lin-
acm transactions on
ear algebra subprograms.
mathematical software (toms), 16(1):1   17, 1990.
www.maths.manchester.ac.uk/  sven/pubs/level3blas-
1-toms16-90.pdf.

[16] andrea frome, greg s corrado,

jonathon shlens,
jeff dean, tomas mikolov, et al.
embedding
deep
information pro-
re-

samy bengio,
a
devise:
in advances in neural
model.
cessing systems,
search.google.com/pubs/archive/41473.pdf.

pages 2121   2129,

visual-semantic

2013.

[17] javier gonzalez-dominguez, ignacio lopez-moreno, pe-
dro j moreno, and joaquin gonzalez-rodriguez. frame-
by-frame language identi   cation in short utterances using
deep neural networks. neural networks, 64:49   58, 2015.
translate
2015.

squeezes
googleresearch.blogspot.com/2015/07/how-google-
translate-squeezes-deep.html.

google
a

good.
deep

[18] otavio

learning

phone,

how

onto

[19] ian j. goodfellow, yaroslav bulatov, julian ibarz, sacha
arnoud, and vinay shet. multi-digit number recognition
from street view imagery using deep convolutional neu-
in international conference on learning
ral networks.
representations, 2014. arxiv.org/pdf/1312.6082.

[20] georg heigold, vincent vanhoucke, alan senior, patrick
nguyen, marc   aurelio ranzato, matthieu devin, and
jeffrey dean. multilingual acoustic models using dis-
in acoustics, speech
tributed deep neural networks.
and signal processing (icassp), 2013 ieee interna-
tional conference on, pages 8619   8623. ieee, 2013. re-
search.google.com/pubs/archive/40807.pdf.

[21] geoffrey e. hinton, li deng, dong yu, george e.
dahl, abdel-rahman mohamed, navdeep jaitly, an-
drew senior, vincent vanhoucke, patrick nguyen,
tara n. sainath,
deep
for acoustic modeling in speech
neural networks
recognition:
research
ieee signal process. mag., 29(6):82   
groups.
97,
www.cs.toronto.edu/  gdahl/papers/
deepspeechreviewspm2012.pdf.

the shared views of

and brian kingsbury.

2012.

four

[22] sepp hochreiter and j  urgen schmidhuber. long short-
term memory. neural computation, 9(8):1735   1780,
1997. ftp.idsia.ch/pub/juergen/lstm.pdf.

[23] sergey ioffe and christian szegedy. batch normaliza-
tion: accelerating deep network training by reducing
internal covariate shift. corr, abs/1502.03167, 2015.
arxiv.org/abs/1502.03167.

[24] michael

isard, mihai budiu, yuan yu, andrew
distributed
building
in acm sigops operating systems
pages 59   72. acm, 2007.

birrell, and dennis fetterly.
data-parallel
blocks.
review,
www.michaelisard.com/pubs/eurosys07.pdf.

from sequential

volume 41,

programs

dryad:

[26] yangqing jia, evan shelhamer, jeff donahue, sergey
karayev, jonathan long, ross girshick, sergio guadar-
rama, and trevor darrell. caffe: convolutional archi-
in proceedings of
tecture for fast feature embedding.
the acm international conference on multimedia, pages
675   678. acm, 2014. arxiv.org/pdf/1408.5093.

[27] andrej karpathy, george toderici, sachin shetty,
and li fei-
tommy leung, rahul sukthankar,
large-scale video classi   cation with con-
fei.
in id161
volutional neural networks.
and pattern recognition (cvpr), 2014 ieee con-
ference on, pages 1725   1732.
re-
search.google.com/pubs/archive/42455.pdf.

ieee, 2014.

[28] a

krizhevsky.

cuda-convnet,

2014.

code.google.com/p/cuda-convnet/.

[29] alex krizhevsky.

ing convolutional neural networks.
arxiv:1404.5997, 2014. arxiv.org/abs/1404.5997.

one weird trick for paralleliz-
arxiv preprint

[30] alex krizhevsky, vinod nair, and geoffrey hinton. the
cifar-10 dataset. www.cs.toronto.edu/  kriz/cifar.html.

[31] quoc le, marc   aurelio ranzato, rajat monga, matthieu
devin, greg corrado, kai chen, jeff dean, and andrew
ng. building high-level features using large scale unsu-
pervised learning. in icml   2012, 2012. google research
pdf.

[32] yann lecun, corinna cortes, and christopher jc
burges. the mnist database of handwritten digits,
1998. yann.lecun.com/exdb/mnist/.

[33] mu li, dave andersen, and alex smola. parameter

server. parameterserver.org.

[34] chris j maddison, aja huang, ilya sutskever, and david
silver. move evaluation in go using deep convolutional
neural networks. arxiv preprint arxiv:1412.6564, 2014.
arxiv.org/abs/1412.6564.

[35] tomas mikolov, kai chen, greg corrado, and jef-
ef   cient estimation of word representa-
frey dean.
in international conference
tions in vector space.
on learning representations: workshops track, 2013.
arxiv.org/abs/1301.3781.

[36] derek g murray, frank mcsherry, rebecca isaacs,
michael isard, paul barham, and mart    n abadi. naiad:
a timely data   ow system. in proceedings of the twenty-
fourth acm symposium on operating systems princi-
ples, pages 439   455. acm, 2013. microsoft research
pdf.

[37] derek g. murray, malte schwarzkopf, christopher
smowton, steven smit, anil madhavapeddy, and steven
hand.
a universal execution engine for dis-
tributed data-   ow computing. in proceedings of the ninth
usenix symposium on networked systems design and
implementation, 2011. usenix pdf.

ciel:

18

[49] seiya tokui. chainer: a powerful,    exible and intuitive

framework of neural networks. chainer.org.

[50] vincent vanhoucke. id103 and deep learn-
ing, 2015. googleresearch.blogspot.com/2012/08/speech-
recognition-and-deep-learning.html.

[51] abhishek verma, luis pedrosa, madhukar korupolu,
david oppenheimer, eric tune, and john wilkes.
large-scale cluster management at google with borg.
the tenth european conference
in proceedings of
on computer systems, page 18. acm, 2015.
re-
search.google.com/pubs/archive/43438.pdf.

[52] o. vinyals, l. kaiser, t. koo, s. petrov, i. sutskever, and
g. hinton. grammar as a foreign language. technical
report, arxiv:1412.7449, 2014. arxiv.org/abs/1412.7449.
and navdeep
in nips, 2015.

[53] oriol vinyals, meire fortunato,

id193.

jaitly.
arxiv.org/abs/1506.03134.

[54] dong yu, adam eversole, mike seltzer, kaisheng
yao, zhiheng huang, brian guenter, oleksii kuchaiev,
yu zhang, frank seide, huaming wang, et al. an
introduction to computational networks and the com-
putational network toolkit.
technical report, tech.
rep. msr, microsoft research, 2014, 2014.
re-
search.microsoft.com/apps/pubs/?id=226641.

[55] matei zaharia, mosharaf chowdhury, tathagata das,
ankur dave, justin ma, murphy mccauley, michael j
franklin, scott shenker, and ion stoica.
resilient
distributed datasets: a fault-tolerant abstraction for
in proceedings of the
in-memory cluster computing.
9th usenix conference on networked systems de-
sign and implementation. usenix association, 2012.
www.usenix.org/system/   les/conference/nsdi12/nsdi12-
   nal138.pdf.

[56] matthew d. zeiler, marc   aurelio ranzato, rajat monga,
mark mao, ke yang, quoc le, patrick nguyen,
andrew senior, vincent vanhoucke, jeff dean, and
on recti   ed linear units
geoffrey e. hinton.
in icassp, 2013.
for speech processing.
re-
search.google.com/pubs/archive/40811.pdf.

[38] arun nair, praveen srinivasan, sam blackwell, cagdas
alcicek, rory fearon, alessandro de maria, ve-
davyas panneershelvam, mustafa suleyman, charles
beattie, stig petersen, et al. massively parallel meth-
arxiv preprint
ods for deep id23.
arxiv:1507.04296, 2015. arxiv.org/abs/1507.04296.

[39] cuda nvidia.

cublas library.

ration, santa clara, california, 15, 2008.
oper.nvidia.com/cublas.

nvidia corpo-
devel-

[40] jonathan ragan-kelley, connelly barnes, andrew
adams, sylvain paris, fr  edo durand, and saman ama-
rasinghe. halide: a language and compiler for optimiz-
ing parallelism, locality, and recomputation in image pro-
cessing pipelines. acm sigplan notices, 48(6):519   
530,
people.csail.mit.edu/fredo/tmp/halide-
5min.pdf.

2013.

[41] bharath ramsundar, steven kearnes, patrick riley, dale
webster, david konerding, and vijay pande. massively
multitask networks for drug discovery. arxiv preprint
arxiv:1502.02072, 2015. arxiv.org/abs/1502.02072.

[42] benjamin recht, christopher re, stephen wright, and
feng niu. hogwild: a lock-free approach to paral-
in advances in
lelizing stochastic id119.
neural information processing systems, pages 693   701,
2011.
papers.nips.cc/paper/4390-hogwild-a-lock-free-
approach-to-parallelizing-stochastic-gradient-descent.

[43] chuck rosenberg.
across

step

improving photo search:
2013.

semantic

a
googleresearch.blogspot.com/2013/06/improving-
photo-search-step-across.html.

gap,

the

[44] christopher j rossbach, yuan yu, jon currey, jean-
philippe martin, and dennis fetterly. dandelion: a
compiler and runtime for heterogeneous systems.
in
proceedings of
the twenty-fourth acm symposium
on operating systems principles, pages 49   68. acm,
2013.
research-srv.microsoft.com/pubs/201110/sosp13-
dandelion-   nal.pdf.

[45] david e rumelhart, geoffrey e hinton, and ronald j
back-
cognitive modeling, 5:3, 1988.

williams.
propagating errors.
www.cs.toronto.edu/ hinton/absps/naturebp.pdf.

representations

learning

by

[46] has  im sak,

andrew senior,

kanishka rao,
franc  oise beaufays, and johan schalkwyk. google
voice search:
2015.
googleresearch.blogspot.com/2015/09/google-voice-
search-faster-and-more.html.

faster and more accurate,

[47] ilya sutskever, oriol vinyals, and quoc v. le. sequence
in nips,
to sequence learning with neural networks.
2014. papers.nips.cc/paper/5346-sequence-to-sequence-
learning-with-neural.

[48] christian szegedy, wei liu, yangqing jia, pierre ser-
manet, scott reed, dragomir anguelov, dumitru er-
han, vincent vanhoucke, and andrew rabinovich. go-
in cvpr   2015, 2015.
ing deeper with convolutions.
arxiv.org/abs/1409.4842.

19

