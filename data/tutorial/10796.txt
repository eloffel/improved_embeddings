id4 in linear time

nal kalchbrenner lasse espeholt karen simonyan a  aron van den oord alex graves koray kavukcuoglu

google deepmind, london uk

nalk@google.com

7
1
0
2

 
r
a

 

m
5
1

 
 
]
l
c
.
s
c
[
 
 

2
v
9
9
0
0
1

.

0
1
6
1
:
v
i
x
r
a

abstract

we present a novel neural network for process-
ing sequences. the bytenet is a one-dimensional
convolutional neural network that is composed of
two parts, one to encode the source sequence and
the other to decode the target sequence. the two
network parts are connected by stacking the de-
coder on top of the encoder and preserving the
temporal resolution of the sequences. to ad-
dress the differing lengths of the source and the
target, we introduce an ef   cient mechanism by
which the decoder is dynamically unfolded over
the representation of the encoder. the bytenet
uses dilation in the convolutional layers to in-
crease its receptive    eld. the resulting network
has two core properties:
it runs in time that
is linear in the length of the sequences and it
sidesteps the need for excessive memorization.
the bytenet decoder attains state-of-the-art per-
formance on character-level language modelling
and outperforms the previous best results ob-
tained with recurrent networks. the bytenet
also achieves state-of-the-art performance on
character-to-character machine translation on the
english-to-german wmt translation task, sur-
passing comparable neural translation models
that are based on recurrent networks with atten-
tional pooling and run in quadratic time. we
   nd that the latent alignment structure contained
in the representations re   ects the expected align-
ment between the tokens.

1. introduction
in neural language modelling, a neural network estimates
a distribution over sequences of words or characters that
belong to a given language (bengio et al., 2003). in neu-
ral machine translation, the network estimates a distribu-
tion over sequences in the target language conditioned on
a given sequence in the source language. the network can
be thought of as composed of two parts: a source network
(the encoder) that encodes the source sequence into a rep-
resentation and a target network (the decoder) that uses the

figure 1. the architecture of the bytenet. the target decoder
(blue) is stacked on top of the source encoder (red). the decoder
generates the variable-length target sequence using dynamic un-
folding.

representation of the source encoder to generate the target
sequence (kalchbrenner & blunsom, 2013).
recurrent neural networks (id56) are powerful sequence
models (hochreiter & schmidhuber, 1997) and are widely
used in language modelling (mikolov et al., 2010), yet they
have a potential drawback. id56s have an inherently se-
rial structure that prevents them from being run in parallel
along the sequence length during training and evaluation.
forward and backward signals in a id56 also need to tra-
verse the full distance of the serial path to reach from one
token in the sequence to another. the larger the distance,
the harder it is to learn the dependencies between the tokens
(hochreiter et al., 2001).
a number of neural architectures have been proposed
for modelling translation, such as encoder-decoder net-
works (kalchbrenner & blunsom, 2013; sutskever et al.,
2014; cho et al., 2014; kaiser & bengio, 2016), networks
with attentional pooling (bahdanau et al., 2014) and two-
dimensional networks (kalchbrenner et al., 2016a). de-
spite the generally good performance, the proposed models

t0t1t2t3t4t5t6t7t8t9t11t12t13t14t15t16t10s0s1s2s3s4s5s6s7s8s9s10s11s12s13s14s15s16t11t12t13t14t15t16t17t10t9t8t7t6t5t4t3t2t1id4 in linear time

figure 2. dynamic unfolding in the bytenet architecture. at each step the decoder is conditioned on the source representation produced
by the encoder for that step, or simply on no representation for steps beyond the extended length |  t|. the decoding ends when the target
network produces an end-of-sequence (eos) symbol.

either have running time that is super-linear in the length of
the source and target sequences, or they process the source
sequence into a constant size representation, burdening the
model with a memorization step. both of these drawbacks
grow more severe as the length of the sequences increases.
we present a family of encoder-decoder neural networks
that are characterized by two architectural mechanisms
aimed to address the drawbacks of the conventional ap-
proaches mentioned above. the    rst mechanism involves
the stacking of the decoder on top of the representation of
the encoder in a manner that preserves the temporal res-
olution of the sequences; this is in contrast with architec-
tures that encode the source into a    xed-size representation
(kalchbrenner & blunsom, 2013; sutskever et al., 2014).
the second mechanism is the dynamic unfolding mecha-
nism that allows the network to process in a simple and ef-
   cient way source and target sequences of different lengths
(sect. 3.2).
the bytenet is the instance within this family of models
that uses one-dimensional convolutional neural networks
(id98) of    xed depth for both the encoder and the decoder
(fig. 1). the two id98s use increasing factors of dilation to
rapidly grow the receptive    elds; a similar technique is also
used in (van den oord et al., 2016a). the convolutions in
the decoder id98 are masked to prevent the network from
seeing future tokens in the target sequence (van den oord
et al., 2016b).
the network has bene   cial computational and learning
properties. from a computational perspective, the network
has a running time that is linear in the length of the source
and target sequences (up to a constant c     log d where
d is the size of the desired dependency    eld). the com-
putation in the encoder during training and decoding and
in the decoder during training can also be run ef   ciently
in parallel along the sequences (sect. 2). from a learn-
ing perspective, the representation of the source sequence
in the bytenet is resolution preserving; the representation
sidesteps the need for memorization and allows for maxi-
mal bandwidth between encoder and decoder. in addition,
the distance traversed by forward and backward signals be-
tween any input and output tokens corresponds to the    xed
depth of the networks and is largely independent of the dis-

tance between the tokens. dependencies over large dis-
tances are connected by short paths and can be learnt more
easily.
we apply the bytenet model
to strings of characters
for character-level language modelling and character-to-
character machine translation. we evaluate the decoder
network on the hutter prize wikipedia task (hutter,
2012) where it achieves the state-of-the-art performance
of 1.31 bits/character. we further evaluate the encoder-
decoder network on character-to-character machine trans-
lation on the english-to-german wmt benchmark where
it achieves a state-of-the-art id7 score of 22.85 (0.380
bits/character) and 25.53 (0.389 bits/character) on the 2014
and 2015 test sets, respectively. on the character-level ma-
chine translation task, bytenet betters a comparable ver-
sion of gid4 (wu et al., 2016a) that is a state-of-the-art
system. these results show that deep id98s are simple,
scalable and effective architectures for challenging linguis-
tic processing tasks.
the paper is organized as follows. section 2 lays out the
background and some desiderata for neural architectures
underlying translation models. section 3 de   nes the pro-
posed family of architectures and the speci   c convolutional
instance (bytenet) used in the experiments. section 4 anal-
yses bytenet as well as existing neural translation models
based on the desiderata set out in section 2. section 5 re-
ports the experiments on language modelling and section 6
reports the experiments on character-to-character machine
translation.

2. neural translation model
given a string s from a source language, a neural transla-
tion model estimates a distribution p(t|s) over strings t of
a target language. the distribution indicates the id203
of a string t being a translation of s. a product of condi-
tionals over the tokens in the target t = t0, ..., tn leads to
a tractable formulation of the distribution:

n(cid:89)

i=0

p(t|s) =

p(ti|t<i, s)

(1)

eoseoseos|s||t||  t|id4 in linear time

each conditional factor expresses complex and long-range
dependencies among the source and target tokens. the
strings are usually sentences of the respective languages;
the tokens are words or, as in the our case, characters.
the network that models p(t|s) is composed of two parts:
a source network (the encoder) that processes the source
string into a representation and a target network (the de-
coder) that uses the source representation to generate the
target string (kalchbrenner & blunsom, 2013). the de-
coder functions as a language model for the target lan-
guage.
a neural translation model has some basic properties. the
decoder is autoregressive in the target tokens and the model
is sensitive to the ordering of the tokens in the source and
target strings.
it is also useful for the model to be able
to assign a non-zero id203 to any string in the target
language and retain an open vocabulary.

2.1. desiderata

beyond these basic properties the de   nition of a neural
translation model does not determine a unique neural ar-
chitecture, so we aim at identifying some desiderata.
first, the running time of the network should be linear in
the length of the source and target strings. this ensures
that the model is scalable to longer strings, which is the
case when using characters as tokens.
the use of operations that run in parallel along the se-
quence length can also be bene   cial for reducing compu-
tation time.
second, the size of the source representation should be lin-
ear in the length of the source string, i.e. it should be res-
olution preserving, and not have constant size. this is to
avoid burdening the model with an additional memoriza-
tion step before translation. in more general terms, the size
of a representation should be proportional to the amount of
information it represents or predicts.
third, the path traversed by forward and backward signals
in the network (between input and ouput tokens) should be
short. shorter paths whose length is largely decoupled from
the sequence distance between the two tokens have the po-
tential to better propagate the signals (hochreiter et al.,
2001) and to let the network learn long-range dependencies
more easily.

3. bytenet
we aim at building neural language and translation mod-
els that capture the desiderata set out in sect. 2.1. the
proposed bytenet architecture is composed of a de-
is stacked on an encoder (sect. 3.1) and
coder that
generates variable-length outputs via dynamic unfolding

figure 3. left: residual block with relus (he et al., 2016)
adapted for decoders. right: residual multiplicative block
adapted for decoders and corresponding expansion of the mu
(kalchbrenner et al., 2016b).
(sect. 3.2). the decoder is a language model that is formed
of one-dimensional convolutional layers that are masked
(sect. 3.4) and use dilation (sect. 3.5). the encoder pro-
cesses the source string into a representation and is formed
of one-dimensional convolutional layers that use dilation
but are not masked. figure 1 depicts the two networks and
their combination.

3.1. encoder-decoder stacking

a notable feature of the proposed family of architectures
is the way the encoder and the decoder are connected. to
maximize the representational bandwidth between the en-
coder and the decoder, we place the decoder on top of
the representation computed by the encoder. this is in
contrast to models that compress the source representation
into a    xed-size vector (kalchbrenner & blunsom, 2013;
sutskever et al., 2014) or that pool over the source rep-
resentation with a mechanism such as attentional pooling
(bahdanau et al., 2014).

3.2. dynamic unfolding

an encoder and a decoder network that process sequences
of different lengths cannot be directly connected due to the
different sizes of the computed representations. we cir-
cumvent this issue via a mechanism which we call dynamic
unfolding, which works as follows.
given source and target sequences s and t with respective
lengths |s| and |t|, one    rst chooses a suf   ciently tight up-
per bound   |t| on the target length |t| as a linear function of
the source length |s|:

  |t| = a|s| + b

(2)

layer-normrelu2d1   1layer-normrelumasked1   kdlayer-normrelu1   1+2dlayer-normrelu2d1   1layer-normrelud1   1+2dmasked1   kmu1   1mu+ddddd       +tanhmasked1   k     tanhdlayer-normid4 in linear time

figure 4. recurrent bytenet variants of the bytenet architecture.
left: recurrent bytenet with convolutional source network and
recurrent target network. right: recurrent bytenet with bidirec-
tional recurrent source network and recurrent target network. the
latter architecture is a strict generalization of the id56 enc-dec
network.

figure 5. lengths of sentences in characters and their correlation
coef   cient for the english-to-german wmt newstest-2013 val-
idation data. the correlation coef   cient is similarly high (   >
0.96) for all other language pairs that we inspected.

the tight upper bound   |t| is chosen in such a way that, on
the one hand, it is greater than the actual length |t| in almost
all cases and, on the other hand, it does not increase exces-
sively the amount of computation that is required. once
a linear relationship is chosen, one designs the source en-
coder so that, given a source sequence of length |s|, the
encoder outputs a representation of the established length
  |t|. in our case, we let a = 1.20 and b = 0 when translating
from english into german, as german sentences tend to be
somewhat longer than their english counterparts (fig. 5).
in this manner the representation produced by the encoder
can be ef   ciently computed, while maintaining high band-
width and being resolution-preserving. once the encoder
representation is computed, we let the decoder unfold step-
by-step over the encoder representation until the decoder it-
self outputs an end-of-sequence symbol; the unfolding pro-
cess may freely proceed beyond the estimated length   |t| of
the encoder representation. figure 2 gives an example of
dynamic unfolding.

3.3. input embedding tensor

given the target sequence t = t0, ..., tn the bytenet de-
coder embeds each of the    rst n tokens t0, ..., tn   1 via a
look-up table (the n tokens t1, ..., tn serve as targets for the
predictions). the resulting embeddings are concatenated
into a tensor of size n    2d where d is the number of inner
channels in the network.

3.4. masked one-dimensional convolutions

the decoder applies masked one-dimensional convolutions
(van den oord et al., 2016b) to the input embedding ten-
sor that have a masked kernel of size k. the masking en-
sures that information from future tokens does not affect
the prediction of the current token. the operation can be
implemented either by zeroing out some of the weights of
a wider kernel of size 2k     1 or by padding the input map.

3.5. dilation

the masked convolutions use dilation to increase the re-
ceptive    eld of the target network (chen et al., 2014; yu
& koltun, 2015). dilation makes the receptive    eld grow
exponentially in terms of the depth of the networks, as op-
posed to linearly. we use a dilation scheme whereby the di-
lation rates are doubled every layer up to a maximum rate r
(for our experiments r = 16). the scheme is repeated mul-
tiple times in the network always starting from a dilation
rate of 1 (van den oord et al., 2016a; kalchbrenner et al.,
2016b).

3.6. residual blocks

each layer is wrapped in a residual block that contains
additional convolutional layers with    lters of size 1    1
(he et al., 2016). we adopt two variants of the residual
blocks: one with relus, which is used in the machine
translation experiments, and one with multiplicative units
(kalchbrenner et al., 2016b), which is used in the language
modelling experiments. figure 3 diagrams the two vari-
ants of the blocks.
in both cases, we use layer normal-
ization (ba et al., 2016) before the activation function, as
it is well suited to sequence processing where computing
the activation statistics over the following future tokens (as
would be done by batch id172) must be avoided.
after a series of residual blocks of increased dilation, the
network applies one more convolution and relu followed
by a convolution and a    nal softmax layer.

4. model comparison
in this section we analyze the properties of various previ-
ously introduced neural translation models as well as the
bytenet family of models. for the sake of a more com-
plete analysis, we include two recurrent bytenet variants
(which we do not evaluate in the experiments).

s0s1s2s3s4s5t0t1t2t3t4t5t1t2t3t4t5t6s0s1s2s3s4s5t0t1t2t3t4t5t1t2t3t4t5t60100200300400500german0100200300400500english  =.968id4 in linear time

time

nets
id98
id98
id56
id56
id56

nett
id56
id56
id56
id56
id56

model
rctm 1
rctm 2
id56 enc-dec
id56 enc-dec att
grid lstm
extended neural gpu cid56 cid56 |s||s| + |s||t|
recurrent bytenet
recurrent bytenet
bytenet

|s||s| + |t|
|s||s| + |t|
|s| + |t|
|s||t|
|s||t|

|s| + |t|
c|s| + |t|
c|s| + c|t|

id56
id98
id98

id56
id56
id98

|s| + |t|

paths
|s|
|s|

rp
no
yes
no
yes
yes
yes
yes max(|s|,|t|)
yes
yes

|s| + |t|

|s|

1

c

c

patht
|t|
|t|
|t|
|t|

|s| + |t|

|t|
|t|
|t|
c

table 1. properties of various neural translation models.

4.1. recurrent bytenets

the bytenet is composed of two stacked encoder and de-
coder networks where the decoder network dynamically
adapts to the output length. this way of combining the
networks is not tied to the networks being strictly convolu-
tional. we may consider two variants of the bytenet that
use recurrent networks for one or both of the networks (see
figure 4). the    rst variant replaces the convolutional de-
coder with a recurrent one that is similarly stacked and dy-
namically unfolded. the second variant also replaces the
convolutional encoder with a recurrent encoder, e.g. a bidi-
rectional id56. the target id56 is then placed on top of the
source id56. considering the latter recurrent bytenet, we
can see that the id56 enc-dec network (sutskever et al.,
2014; cho et al., 2014) is a recurrent bytenet where all
connections between source and target     except for the    rst
one that connects s0 and t0     have been severed. the re-
current bytenet is a generalization of the id56 enc-dec
and, modulo the type of weight-sharing scheme, so is the
convolutional bytenet.

4.2. comparison of properties

in our comparison we consider the following neural
translation models: the recurrent continuous translation
model (rctm) 1 and 2 (kalchbrenner & blunsom, 2013);
the id56 enc-dec (sutskever et al., 2014; cho et al., 2014);
the id56 enc-dec att with the attentional pooling mecha-
nism (bahdanau et al., 2014) of which there are a few vari-
ations (luong et al., 2015; chung et al., 2016a); the grid
lstm translation model (kalchbrenner et al., 2016a) that
uses a multi-dimensional architecture; the extended neural
gpu model (kaiser & bengio, 2016) that has a convolu-
tional id56 architecture; the bytenet and the two recur-
rent bytenet variants.
our comparison criteria re   ect the desiderata set out in
sect. 2.1. we separate the    rst (computation time) desider-

atum into three columns. the    rst column indicates the
time complexity of the network as a function of the length
of the sequences and is denoted by time. the other two
columns nets and nett indicate, respectively, whether the
source and the target network use a convolutional struc-
ture (id98) or a recurrent one (id56); a id98 structure
has the advantage that it can be run in parallel along the
length of the sequence. the second (resolution preserva-
tion) desideratum corresponds to the rp column, which
indicates whether the source representation in the network
is resolution preserving. finally, the third desideratum
(short forward and backward    ow paths) is re   ected by two
columns. the paths column corresponds to the length in
layer steps of the shortest path between a source token and
any output target token. similarly, the patht column cor-
responds to the length of the shortest path between an input
target token and any output target token. shorter paths lead
to better forward and backward signal propagation.
table 1 summarizes the properties of the models. the
bytenet, the recurrent bytenets and the id56 enc-dec
are the only networks that have linear running time (up
to the constant c). the id56 enc-dec, however, does not
preserve the source sequence resolution, a feature that ag-
gravates learning for long sequences such as those that ap-
pear in character-to-character machine translation (luong
& manning, 2016). the rctm 2, the id56 enc-dec att,
the grid lstm and the extended neural gpu do preserve
the resolution, but at a cost of a quadratic running time. the
bytenet stands out also for its path properties. the dilated
structure of the convolutions connects any two source or
target tokens in the sequences by way of a small number
of network layers corresponding to the depth of the source
or target networks. for character sequences where learning
long-range dependencies is important, paths that are sub-
linear in the distance are advantageous.

id4 in linear time

model
phrase based mt (freitag et al., 2014; williams et al., 2015)
id56 enc-dec (luong et al., 2015)
reverse id56 enc-dec (luong et al., 2015)
id56 enc-dec att (zhou et al., 2016)
id56 enc-dec att (luong et al., 2015)
gid4 (id56 enc-dec att) (wu et al., 2016a)
id56 enc-dec att (chung et al., 2016b)
id56 enc-dec att (chung et al., 2016b)
gid4 (id56 enc-dec att) (wu et al., 2016a)
bytenet

inputs
phrases
words
words
words
words

outputs
phrases
words
words
words
words

word-pieces word-pieces

bpe
bpe
char
char

bpe
char
char
char

wmt test    14 wmt test    15

20.7

11.3
14.0
20.6
20.9
24.61

19.98
21.33
22.62
23.75

24.0

21.72
23.45

26.26

table 2. id7 scores on en-de wmt newstest 2014 and 2015 test sets.

test
model
1.67
stacked lstm (graves, 2013)
1.58
gf-lstm (chung et al., 2015)
1.47
grid-lstm (kalchbrenner et al., 2016a)
1.46
layer-normalized lstm (chung et al., 2016a)
1.44
mi-lstm (wu et al., 2016b)
1.40
recurrent memory array structures (rocki, 2016)
1.40
hm-lstm (chung et al., 2016a)
1.38
layer norm hyperlstm (ha et al., 2016)
large layer norm hyperlstm (ha et al., 2016)
1.34
recurrent id199 (srivastava et al., 2015) 1.32
bytenet decoder
1.31

table 3. negative log-likelihood results in bits/byte on the hutter
prize wikipedia benchmark.

5. character prediction
we    rst evaluate the bytenet decoder separately on a
character-level language modelling benchmark. we use the
hutter prize version of the wikipedia dataset and follow the
standard split where the    rst 90 million bytes are used for
training, the next 5 million bytes are used for validation and
the last 5 million bytes are used for testing (chung et al.,
2015). the total number of characters in the vocabulary is
205.
the bytenet decoder that we use for the result has 30
residual blocks split into six sets of    ve blocks each; for
the    ve blocks in each set the dilation rates are, respec-
tively, 1, 2, 4, 8 and 16. the masked kernel has size 3. this
gives a receptive    eld of 315 characters. the number of
hidden units d is 512. for this task we use residual multi-
plicative blocks (fig. 3 right). for the optimization we use
adam (kingma & ba, 2014) with a learning rate of 0.0003
and a weight decay term of 0.0001. we apply dropout to
the last relu layer before the softmax dropping units with
a id203 of 0.1. we do not reduce the learning rate dur-
ing training. at each step we sample a batch of sequences
of 500 characters each, use the    rst 100 characters as the
minimum context and predict the latter 400 characters.

wmt test    14 wmt test    15

bits/character
id7

0.521
23.75

0.532
26.26

table 4. bits/character with respective id7 score achieved by
the bytenet translation model on the english-to-german wmt
translation task.

table 3 lists recent results of various neural sequence
models on the wikipedia dataset. all the results ex-
cept for the bytenet result are obtained using some vari-
ant of the lstm recurrent neural network (hochreiter &
schmidhuber, 1997). the bytenet decoder achieves 1.31
bits/character on the test set.

6. character-level machine translation
we evaluate the full bytenet on the wmt english to ger-
man translation task. we use newstest 2013 for validation
and newstest 2014 and 2015 for testing. the english and
german strings are encoded as sequences of characters; no
explicit segmentation into words or morphemes is applied
to the strings. the outputs of the network are strings of
characters in the target language. we keep 323 characters
in the german vocabulary and 296 in the english vocabu-
lary.
the bytenet used in the experiments has 30 residual blocks
in the encoder and 30 residual blocks in the decoder. as
in the bytenet decoder, the residual blocks are arranged
in sets of    ve with corresponding dilation rates of 1, 2, 4, 8
and 16. for this task we use the residual blocks with relus
(fig. 3 left). the number of hidden units d is 800. the
size of the kernel in the source network is 3, whereas the
size of the masked kernel in the target network is 3. for the
optimization we use adam with a learning rate of 0.0003.
each sentence is padded with special characters to the near-
est greater multiple of 50; 20% of further padding is ap-

id4 in linear time

director jon favreau, who is currently working on disney   s forthcoming jungle book    lm,
told the website hollywood reporter:    i think times are changing.   
regisseur jon favreau, der derzeit an disneys bald erscheinenden dschungelbuch-film arbeitet,
sagte gegenber der webseite hollywood reporter:    ich glaube, die zeiten   andern sich.   
regisseur jon favreau, der zur zeit an disneys kommendem jungle book film arbeitet,
hat der website hollywood reporter gesagt:    ich denke, die zeiten   andern sich   .
matt casaday, 25, a senior at brigham young university, says he had paid 42 cents on amazon.com
for a used copy of    strategic media decisions: understanding the business end of the advertising business.   
matt casaday, 25, abschlussstudent an der brigham young university, sagt, dass er auf amazon.com 42 cents ausgegeben hat
f  ur eine gebrauchte ausgabe von    strategic media decisions: understanding the business end of the advertising business.   
matt casaday, 25, ein senior an der brigham young university, sagte, er habe 42 cent auf amazon.com
f  ur eine gebrauchte kopie von    strategic media decisions: understanding the business end of the advertising business   .

table 5. raw output translations generated from the bytenet that highlight interesting reordering and id68 phenomena. for
each group, the    rst row is the english source, the second row is the ground truth german target, and the third row is the bytenet
translation.

plied to each source sentence as a part of dynamic unfold-
ing (eq. 2). each pair of sentences is mapped to a bucket
based on the pair of padded lengths for ef   cient batching
during training. we use vanilla id125 according to
the total likelihood of the generated candidate and accept
only candidates which end in a end-of-sentence token. we
use a beam of size 12. we do not use length id172,
nor do we keep score of which parts of the source sentence
have been translated (wu et al., 2016a).
table 2 and table 4 contain the results of the experiments.
on newstest 2014 the bytenet achieves the highest perfor-
mance in character-level and subword-level neural machine
translation, and compared to the word-level systems it is
second only to the version of gid4 that uses word-pieces.
on newstest 2015, to our knowledge, bytenet achieves
the best published results to date.
table 5 contains some of the unaltered generated transla-
tions from the bytenet that highlight reordering and other
phenomena such as id68. the character-level
aspect of the model makes post-processing unnecessary
in principle. we further visualize the sensitivity of the
bytenet   s predictions to speci   c source and target inputs
using gradient-based visualization (simonyan et al., 2013).
figure 6 represents a heatmap of the magnitude of the gra-
dients of the generated outputs with respect to the source
and target inputs. for visual clarity, we sum the gradients
for all the characters that make up each word and normal-
ize the values along each column. in contrast with the at-
tentional pooling mechanism (bahdanau et al., 2014), this
general technique allows us to inspect not just dependen-
cies of the outputs on the source inputs, but also dependen-
cies of the outputs on previous target inputs, or on any other
neural network layers.

7. conclusion
we have introduced the bytenet, a neural translation model
that has linear running time, decouples translation from
memorization and has short signal propagation paths for
tokens in sequences. we have shown that the bytenet de-
coder is a state-of-the-art character-level language model
based on a convolutional neural network that outperforms
recurrent neural language models. we have also shown that
the bytenet generalizes the id56 enc-dec architecture and
achieves state-of-the-art results for character-to-character
machine translation and excellent results in general, while
maintaining linear running time complexity. we have re-
vealed the latent structure learnt by the bytenet and found
it to mirror the expected alignment between the tokens in
the sentences.

references
ba, lei jimmy, kiros, ryan, and hinton, geoffrey e. layer

id172. corr, abs/1607.06450, 2016.

bahdanau, dzmitry, cho, kyunghyun, and bengio,
yoshua. id4 by jointly learning
to align and translate. corr, abs/1409.0473, 2014.

bengio, yoshua, ducharme, r  ejean, vincent, pascal, and
jauvin, christian. a neural probabilistic language
model. journal of machine learning research, 3:1137   
1155, 2003.

chen, liang-chieh, papandreou, george, kokkinos, ia-
sonas, murphy, kevin, and yuille, alan l. semantic im-
age segmentation with deep convolutional nets and fully
connected crfs. corr, abs/1412.7062, 2014.

cho, kyunghyun, van merrienboer, bart, g  ulc  ehre, c   aglar,
bougares, fethi, schwenk, holger, and bengio, yoshua.

id4 in linear time

learning phrase representations using id56 encoder-
corr,
decoder for id151.
abs/1406.1078, 2014.

chung, junyoung, g  ulc  ehre, caglar, cho, kyunghyun, and
bengio, yoshua. gated feedback recurrent neural net-
works. corr, abs/1502.02367, 2015.

chung, junyoung, ahn, sungjin, and bengio, yoshua. hi-
erarchical multiscale recurrent neural networks. corr,
abs/1609.01704, 2016a.

chung, junyoung, cho, kyunghyun, and bengio, yoshua.
a character-level decoder without explicit segmentation
in proceedings of the
for id4.
54th annual meeting of the association for computa-
tional linguistics, acl 2016, 2016b.

freitag, markus, peitz, stephan, wuebker, joern, ney, her-
mann, huck, matthias, sennrich, rico, durrani, nadir,
nadejde, maria, williams, philip, koehn, philipp, her-
rmann, teresa, cho, eunah, and waibel, alex. eu-bridge
mt: combined machine translation. in acl 2014 ninth
workshop on id151, 2014.

graves, alex. generating sequences with recurrent neural

networks. corr, abs/1308.0850, 2013.

ha, d., dai, a., and le, q. v. hypernetworks. arxiv

e-prints, september 2016.

he, kaiming, zhang, xiangyu, ren, shaoqing, and sun,
identity mappings in deep residual networks.

jian.
corr, abs/1603.05027, 2016.

hochreiter, sepp and schmidhuber, j  urgen. long short-

term memory. neural computation, 1997.

hochreiter, sepp, bengio, yoshua, and frasconi, paolo.
gradient    ow in recurrent nets: the dif   culty of learn-
ing long-term dependencies. in kolen, j. and kremer, s.
(eds.), field guide to dynamical recurrent networks.
ieee press, 2001.

hutter, marcus. the human knowledge compression con-

test. http://prize.hutter1.net/, 2012.

kaiser,   ukasz and bengio, samy. can active memory re-
place attention? advances in neural information pro-
cessing systems, 2016.

kalchbrenner, nal and blunsom, phil. recurrent continu-
ous translation models. in proceedings of the 2013 con-
ference on empirical methods in natural language pro-
cessing, 2013.

kalchbrenner, nal, danihelka, ivo, and graves, alex. grid
international conference on

long short-term memory.
learning representations, 2016a.

figure 6. magnitude of gradients of the predicted outputs with re-
spect to the source and target inputs. the gradients are summed
for all the characters in a given word. in the bottom heatmap the
magnitudes are nonzero on the diagonal, since the prediction of a
target character depends highly on the preceding target character
in the same word.

id4 in linear time

kudo, taku, kazawa, hideto, stevens, keith, kurian,
george, patil, nishant, wang, wei, young, cliff, smith,
jason, riesa, jason, rudnick, alex, vinyals, oriol,
corrado, greg, hughes, macduff, and dean, jeffrey.
googles id4 system: bridging
the gap between human and machine translation. corr,
abs/1609.08144, 2016a.

wu, yuhuai, zhang, saizheng, zhang, ying, bengio,
yoshua, and salakhutdinov, ruslan. on multiplica-
tive integration with recurrent neural networks. corr,
abs/1606.06630, 2016b.

yu, fisher and koltun, vladlen. multi-scale context aggre-
gation by dilated convolutions. corr, abs/1511.07122,
2015.

zhou, jie, cao, ying, wang, xuguang, li, peng, and
xu, wei. deep recurrent models with fast-forward
connections for id4. corr,
abs/1606.04199, 2016.

kalchbrenner, nal, van den oord, aaron, simonyan,
karen, danihelka, ivo, vinyals, oriol, graves, alex,
and kavukcuoglu, koray. video pixel networks. corr,
abs/1610.00527, 2016b.

kingma, diederik p. and ba, jimmy. adam: a method for

stochastic optimization. corr, abs/1412.6980, 2014.

luong, minh-thang and manning, christopher d. achiev-
ing open vocabulary id4 with hy-
brid word-character models. in acl, 2016.

luong, minh-thang, pham, hieu, and manning, christo-
pher d. effective approaches to attention-based neural
machine translation. in emnlp, september 2015.

mikolov, tomas, kara     at, martin, burget, luk  as, cer-
nock  y, jan, and khudanpur, sanjeev. recurrent neu-
ral network based language model. in interspeech
2010, pp. 1045   1048, 2010.

rocki, kamil. recurrent memory array structures. corr,

abs/1607.03085, 2016.

simonyan, karen, vedaldi, andrea, and zisserman, an-
drew. deep inside convolutional networks: visualising
image classi   cation models and saliency maps. corr,
abs/1312.6034, 2013.

srivastava, rupesh kumar, greff, klaus, and schmidhu-
ber, j  urgen. id199. corr, abs/1505.00387,
2015.

sutskever, ilya, vinyals, oriol, and le, quoc v. sequence
to sequence learning with neural networks. in advances
in neural information processing systems, pp. 3104   
3112, 2014.

van den oord, aaron, dieleman, sander, zen, heiga, si-
monyan, karen, vinyals, oriol, graves, alex, kalch-
brenner, nal, senior, andrew, and kavukcuoglu, ko-
ray. wavenet: a generative model for raw audio. corr,
abs/1609.03499, 2016a.

van

den oord, a  aron, kalchbrenner, nal,

and
kavukcuoglu, koray. pixel recurrent neural networks.
in icml, volume 48, pp. 1747   1756, 2016b.

williams, philip, sennrich, rico, nadejde, maria, huck,
matthias, and koehn, philipp. edinburgh   s syntax-based
in proceedings of the tenth
systems at wmt 2015.
workshop on id151, 2015.

wu, yonghui, schuster, mike, chen, zhifeng, le, quoc v.,
norouzi, mohammad, macherey, wolfgang, krikun,
maxim, cao, yuan, gao, qin, macherey, klaus,
klingner, jeff, shah, apurva, johnson, melvin, liu, xi-
aobing, ukasz kaiser, gouws, stephan, kato, yoshikiyo,

