id29 with semi-supervised sequential autoencoders

tom  a  s ko  cisk  y       g  abor melis    edward grefenstette   

chris dyer    wang ling   

phil blunsom       karl moritz hermann   

   google deepmind

   university of oxford

{tkocisky,melisgl,etg,cdyer,lingwang,pblunsom,kmh}@google.com

6
1
0
2

 

p
e
s
9
2

 

 
 
]
l
c
.
s
c
[
 
 

1
v
5
1
3
9
0

.

9
0
6
1
:
v
i
x
r
a

abstract

we present a novel semi-supervised approach
for sequence transduction and apply it to se-
mantic parsing. the unsupervised component
is based on a generative model in which latent
sentences generate the unpaired logical forms.
we apply this method to a number of semantic
parsing tasks focusing on domains with lim-
ited access to labelled training data and ex-
tend those datasets with synthetically gener-
ated logical forms.

1

introduction

neural approaches,
in particular attention-based
sequence-to-sequence models, have shown great
promise and obtained state-of-the-art performance
for sequence transduction tasks including machine
translation (bahdanau et al., 2015), syntactic con-
stituency parsing (vinyals et al., 2015), and seman-
tic role labelling (zhou and xu, 2015). a key re-
quirement for effectively training such models is an
abundance of supervised data.

in this paper we focus on learning mappings from
input sequences x to output sequences y in domains
where the latter are easily obtained, but annotation
in the form of (x, y) pairs is sparse or expensive to
produce, and propose a novel architecture that ac-
commodates semi-supervised training on sequence
transduction tasks. to this end, we augment the
transduction objective (x (cid:55)    y) with an autoencod-
ing objective where the input sequence is treated as a
latent variable (y (cid:55)    x (cid:55)    y), enabling training from
both labelled pairs and unpaired output sequences.

this is common in situations where we encode nat-
ural language into a logical form governed by some
grammar or database.

while such an autoencoder could in principle
be constructed by stacking two sequence transduc-
ers, modelling the latent variable as a series of dis-
crete symbols drawn from multinomial distributions
creates serious computational challenges, as it re-
quires marginalising over the space of latent se-
quences      
x. to avoid this intractable marginalisa-
tion, we introduce a novel differentiable alternative
for draws from a softmax which can be used with
the reparametrisation trick of kingma and welling
(2014). rather than drawing a discrete symbol in
  x from a softmax, we draw a distribution over sym-
bols from a logistic-normal distribution at each time
step. these serve as continuous relaxations of dis-
crete samples, providing a differentiable estimator
of the expected reconstruction log likelihood.

we demonstrate the effectiveness of our proposed
model on three id29 tasks:
the geo-
query benchmark (zelle and mooney, 1996; wong
and mooney, 2006), the sail maze navigation task
(macmahon et al., 2006) and the natural language
querying corpus (haas and riezler, 2016) on open-
streetmap. as part of our evaluation, we introduce
simple mechanisms for generating large amounts of
unsupervised training data for two of these tasks.

in most settings, the semi-supervised model out-
performs the supervised model, both when trained
on additional generated data as well as on subsets of
the existing data.

dataset

geo

example
what are the high points of states surrounding mississippi
answer(high point 1(state(next to 2(stateid(   mississippi   )))))

nlmaps

where are kindergartens in hamburg?
query(area(keyval(   name   ,   hamburg   )),nwr(keyval(   amenity   ,   kindergarten   )),qtype(latlong))

sail

turn right at the bench into the yellow tiled hall
(1, 6, 90) forward - forward - right - stop (3, 6, 180)

table 1: examples of natural language x and logical form y from the three corpora and tasks used in this paper. note that the
sail corpus requires additional information in order to map from the instruction to the action sequence.

figure 1: seq4 model with attention-sequence-to-sequence encoder and decoder. circle nodes represent random variables.

2 model

our sequential autoencoder is shown in figure 1.
at a high level, it can be seen as two sequence-
to-sequence models with attention (bahdanau et al.,
2015) chained together. more precisely, the model
consists of four lstms (hochreiter and schmid-
huber, 1997), hence the name seq4. the    rst, a
bidirectional lstm, encodes the sequence y; next,
an lstm with stochastic output, described below,
draws a sequence of distributions   x over words in
vocabulary   x. the third lstm encodes these dis-
tributions for the last one to attend over and recon-
struct y as   y. we now give the details of these parts.

2.1 encoding y
the    rst lstm of the encoder half of the model
reads the sequence y, represented as a sequence of
one-hot vectors over the vocabulary   y, using a
bidirectional id56 into a sequence of vectors hy
where ly is the sequence length of y,

1:ly

y (yt, hy,   
   

t   1 ); f

y (yt, hy,   
   

(1)

t+1 )(cid:1) ,

t =(cid:0)f

hy

y , f   

where f   
are non-linear functions applied at
each time step to the current token yt and their re-
t   1 , hy,   
current states hy,   

t+1 , respectively.

y

both the forward and backward functions project
the one-hot vector into a dense vector via an embed-
ding matrix, which serves as input to an lstm.

2.2 predicting a latent sequence   x

subsequently, we wish to predict x. predicting a
discrete sequence of symbols through draws from
multinomial distributions over a vocabulary is not
an option, as we would not be able to backpropa-
gate through this discrete choice. marginalising over
the possible latent strings or estimating the gradient
through na    ve monte carlo methods would be a pro-
hibitively high variance process because the num-
ber of strings is exponential in the maximum length
(which we would have to manually specify) with
the vocabulary size as base. to allow backpropaga-
tion, we instead predict a sequence of distributions   x
over the symbols of   x with an id56 attending over

y1y2y3y4<s><s>  x1  x2  x3hy1hy2hy3hy4h  x1h  x2h  x3hx1hx2hx3h  y1h  y2h  y3h  y4  y1  y2  y3  y4  y1  y2  y3ly(cid:89)

2.3 encoding x
moving on to the decoder part of our model, in the
third lstm, we embed2 and encode   x:

x (  xt, hx,   
   

t   1 ); f

x (  xt, hx,   
   

(8)

t =(cid:0)f

hx

t+1 )(cid:1)

when x is observed, during supervised training and
also when making predictions, instead of the distri-
bution   x we feed the one-hot encoded x to this part
of the model.

2.4 reconstructing y
in the    nal lstm, we decode into y:

p(  y|  x) =

p(  yt|{  y1,       ,   yt   1}, h  x)

(9)

t=1

equation 9 is implemented as an lstm attending
over h  x producing a sequence of symbols   y based
on recurrent states h  y, aiming to reproduce input y:

t = f  y(  yt   1, h  y
h  y
t   1, h  x)
  yt     softmax(l
(cid:48)
(h  y

t ))

(10)
(11)

where f  y is the non-linear function, and the actual
probabilities are given by a softmax function after
a linear transformation l(cid:48) of h  y. at training time,
rather than   yt   1 we feed the ground truth yt   1.

2.5 id168
the complete model described in this section gives a
reconstruction function y (cid:55)      y. we de   ne a loss on
this reconstruction which accommodates the unsu-
pervised case, where x is not observed in the train-
ing data, and the supervised case, where (x, y) pairs
are available. together, these allow us to train the
seq4 model in a semi-supervised setting, which ex-
periments will show provides some bene   ts over a
purely supervised training regime.
unsupervised case when x isn   t observed, the
loss we minimise during training is the recon-
struction loss on y, expressed as the negative log-
likelihood n ll(  y, y) of the true labels y relative to
the predictions   y. to this, we add as a regularising

2multiplying the distribution over words and an embedding
matrix averages the id27 of the entire vocabulary
weighted by their probabilities.

figure 2: unsupervised case of the seq4 model.

lx(cid:89)

hy = hy

1:ly

, which will later serve to reconstruct y:

  x = q(x|y) =

q(  xt|{  x1,       ,   xt   1}, hy)

(2)

t=1

where q(x|y) models the mapping y (cid:55)    x. we de   ne
q(  xt|{  x1,       ,   xt   1}, hy) in the following way:

let the vector   xt be a distribution over the vocabu-
lary   x drawn from a logistic-normal distribution1,
the parameters of which,   t, log(  2)t     r|  x|, are
predicted by attending by an lstm attending over
the outputs of the encoder (equation 2), where |  x|
is the size of the vocabulary   x. the use of a logis-
tic normal distribution serves to regularise the model
in the semi-supervised learning regime, which is de-
scribed at the end of this section. formally, this pro-
cess, depicted in figure 2, is as follows:

t   1, hy)

h  x
t = f  x(  xt   1, h  x
t ) = l(h  x
  t, log(  2
t )
      n (0, i)
  t =   t +   t 
  xt = softmax(  t)

(3)
(4)
(5)
(6)
(7)

where the f  x function is an lstm and l a linear
transformation to r2|  x|. we use the reparametrisa-
tion trick from kingma and welling (2014) to draw
from the logistic normal, allowing us to backpropa-
gate through the sampling process.

1the logistic-normal distribution is the exponentiated and

normalised (i.e. taking softmax) normal distribution.

y1y2y3y4<s>  x1  x2  2,log( 2)2  1,log( 2)1  x3  3,log( 2)3   1   2   3hx1hx2hx3h  x1h  x2h  x3hy1hy2hy3hy4h  y1h  y2h  y3h  y4<s>  y1  y2  y3  y4  y1  y2  y3lx(cid:88)

term the kl divergence kl[q(  |y)(cid:107)p(  )] which ef-
fectively penalises the mean and variance of q(  |y)
from diverging from those of a prior p(  ), which
we model as a diagonal gaussian n (0, i). this has
the effect of smoothing the logistic normal distribu-
tion from which we draw the distributions over sym-
bols of x, guarding against over   tting of the latent
distributions over x to symbols seen in the super-
vised case discussed below. the unsupervised loss
is therefore formalised as
lunsup = n ll(  y, y) +   kl[q(  |y)(cid:107)p(  )]
with regularising factor    is tuned on validation, and

(12)

kl[q(  |y)(cid:107)p(  )] =

kl[q(  i|y)(cid:107)p(  )]

(13)

i=1

we use a closed form of these individual kl diver-
gences, described by kingma and welling (2014).
supervised case when x is observed, we addi-
tionally minimise the prediction loss on x, expressed
as the negative log-likelihood n ll(  x, x) of the true
labels x relative to the predictions   x, and do not im-
pose the kl loss. the supervised loss is thus
lsup = n ll(  x, x) + n ll(  y, y)

(14)

in both the supervised and unsupervised case, be-
cause of the continuous relaxation on generating   x
and the reparameterisation trick, the gradient of the
losses with regard to the model parameters is well
de   ned throughout seq4.
semi-supervised training and id136 we
train with a weighted combination of the supervised
and unsupervised losses described above. once
trained, we simply use the x (cid:55)    y decoder segment
of the model to predict y from sequences of sym-
bols x represented as one-hot vectors. when the de-
coder is trained without the encoder in a fully super-
vised manner, it serves as our supervised sequence-
to-sequence baseline model under the name s2s.

3 tasks and data generation
we apply our model to three tasks outlined in this
section. moreover, we explain how we generated ad-
ditional unsupervised training data for two of these
tasks. examples from all datasets are in table 1.

3.1 geoquery
the    rst task we consider is the prediction of a query
on the geo corpus which is a frequently used bench-
mark for id29. the corpus contains 880
questions about us geography together with exe-
cutable queries representing those questions. we
follow the approach established by zettlemoyer and
collins (2005) and split the corpus into 600 training
and 280 test cases. following common practice, we
augment the dataset by referring to the database dur-
ing training and test time. in particular, we use the
database to identify and anonymise variables (cities,
states, countries and rivers) following the method
described in dong and lapata (2016).

most prior work on the geo corpus relies on stan-
dard id29 methods together with custom
heuristics or pipelines for this corpus. the recent pa-
per by dong and lapata (2016) is of note, as it uses
a sequence-to-sequence model for training which is
the unidirectional equivalent to s2s, and also to the
decoder part of our seq4 network.

3.2 open street maps
the second task we tackle with our model is the
nlmaps dataset by haas and riezler (2016). the
dataset contains 1,500 training and 880 testing in-
stances of natural language questions with corre-
sponding machine readable queries over the geo-
graphical openstreetmap database. the dataset
contains natural language question in both english
and german but we focus only on single language
id29, similar to the    rst task in haas
and riezler (2016). we use the data as it is, with
the only pre-processing step being the id121
of both natural language and query form3.

3.3 navigational instructions to actions
the sail corpus and task were developed to train
agents to follow free-form navigational route in-
structions in a maze environment (macmahon et al.,
2006; chen and mooney, 2011).
it consists of a
small number of mazes containing features such as
objects, wall and    oor types. these mazes come to-
gether with a large number of human instructions
paired with the required actions4 to reach the goal
3we removed quotes, added spaces around (), and sepa-

rated the question mark from the last word in each question.

4there are four actions: left, right, go, stop.

state described in those instructions.

we use the sentence-aligned version of the sail
route instruction dataset containing 3,236 sentences
(chen and mooney, 2011).
following previous
work, we accept an action sequence as correct if
and only if the    nal position and orientation exactly
match those of the gold data. we do not perform any
pre-processing on this dataset.

3.4 data generation
as argued earlier, we are focusing on tasks where
aligned data is sparse and expensive to obtain, while
it should be cheap to get unsupervised, monomodal
data. albeit that is a reasonable assumption for real
world data, the datasets considered have no such
component, thus the approach taken here is to gen-
erate random database queries or maze paths, i.e.
the machine readable side of the data, and train
a semi-supervised model. the alternative not ex-
plored here would be to generate natural language
questions or instructions instead, but that is more
dif   cult to achieve without human intervention. for
this reason, we generate the machine readable side
of the data for geoquery and sail tasks5.

for geoquery, we    t a 3-gram kneser-ney
(chen and goodman, 1999) model to the queries in
the training set and sample about 7 million queries
from it. we ensure that the sampled queries are dif-
ferent from the training queries, but do not enforce
validity. this intentionally simplistic approach is to
demonstrate the applicability of our model.

the sail dataset has only three mazes. we
added a fourth one and over 150k random paths, in-
cluding duplicates. the new maze is larger (21    21
grid) than the existing ones, and seeks to approxi-
mately replicate the key statistics of the other three
mazes (maximum corridor length, distribution of ob-
jects, etc). paths within that maze are created by
randomly sampling start and end positions.

4 experiments

we evaluate our model on the three tasks in multiple
settings. first, we establish a supervised baseline to
compare the s2s model with prior work. next, we

5our
be

can
publications

randomly
downloaded

generated
datasets
from http://deepmind.com/

unsupervised

model
zettlemoyer and collins (2005)
zettlemoyer and collins (2007)
liang et al. (2013)
kwiatkowski et al. (2011)
zhao and huang (2014)
kwiatkowski et al. (2013)
dong and lapata (2016)
jia and liang (2016)6
s2s
seq4

accuracy
79.3
86.1
87.9
88.6
88.9
89.0
84.6
89.3
86.5
87.3

table 2: non-neural and neural model results on geoquery
using the train/test split from (zettlemoyer and collins, 2005).

train our seq4 model in a semi-supervised setting
on the entire dataset with the additional monomodal
training data described in the previous section.

finally, we perform an    ablation    study where we
discard some of the training data and compare s2s
to seq4. s2s is trained solely on the reduced data
in a supervised manner, while seq4 is once again
trained semi-supervised on the same reduced data
plus the machine readable part of the discarded data
(seq4-) or on the extra generated data (seq4+).

training we train the model using standard gra-
dient descent methods. as none of the datasets used
here contain development sets, we tune hyperparam-
eters by cross-validating on the training data. in the
case of the sail corpus we train on three folds (two
mazes for training and validation, one for test each)
and report weighted results across the folds follow-
ing prior work (mei et al., 2016).

4.1 geoquery
the evaluation metric for geoquery is the ac-
curacy of exactly predicting the machine readable
query. as results in table 2 show, our supervised
s2s baseline model performs slightly better than
the comparable model by dong and lapata (2016).
the semi-supervised seq4 model with the addi-
tional generated queries improves on it further.

the ablation study in table 3 demonstrates
a widening gap between supervised and semi-

6jia and liang (2016) used hand crafted grammars to gener-

ate additional supervised training data.

sup. data
5%
10%
25%
50%
75%
100%

s2s
21.9
39.7
62.4
80.3
85.3
86.5

seq4-
30.1
42.1
70.4
81.2
84.1
86.5

seq4+
26.2
42.1
67.1
80.4
85.1
87.3

sup. data
5%
10%
25%
50%
75%
100%

s2s
3.22
17.61
33.74
49.52
66.93
78.03

seq4-
3.74
17.12
33.50
53.72
66.45
78.03

table 3: results of the geoquery ablation study.

table 5: results of the nlmaps ablation study.

accuracy
model
68.30
haas and riezler (2016)
s2s
78.03
table 4: results on the nlmaps corpus.

supervised as the amount of labelled training data
gets smaller. this suggests that our model can lever-
age unlabelled data even when only small amount of
labelled data is available.

4.2 open street maps
we report results for the nlmaps corpus in table 4,
comparing the supervised s2s model to the results
posted by haas and riezler (2016). while their
model used a id29 pipeline including
alignment, id30, language modelling and id18
id136, the strong performance of the s2s model
demonstrates the strength of fairly vanilla attention-
based sequence-to-sequence models.
it should be
pointed out that the previous work reports the num-
ber of correct answers when queries were executed
against the dataset, while we evaluate on the strict
accuracy of the generated queries. while we expect
these numbers to be nearly equivalent, our evalua-
tion is strictly harder as it does not allow for reorder-
ing of query arguments and similar relaxations.

we investigate the seq4 model only via the abla-
tion study in table 5 and    nd little gain through the
semi-supervised objective. our attempt at cheaply
generating unsupervised data for this task was not
successful, likely due to the complexity of the un-
derlying database.

4.3 navigational instructions to actions
model extension the experiments for the sail
task differ slightly from the other two tasks in that
the language input does not suf   ce for choosing an

action. while a simple instruction such as    turn
left    can easily be translated into the action sequence
left-stop, more complex instructions such as
   walk forward until you see a lamp    require knowl-
edge of the agent   s position in the maze.

to accomplish this we modify the model as fol-
lows. first, when encoding action sequences, we
concatenate each action with a representation of the
maze at the given position, representing the maze-
state akin to mei et al. (2016) with a bag-of-features
vector. second, when decoding action sequences,
the id56 outputs an action which is used to update
the agent   s position and the representation of that
new position is fed into the id56 as its next input.
training regime we cross-validate over the three
mazes in the dataset and report overall results
weighted by test size (cf. mei et al. (2016)). both
our supervised and semi-supervised model perform
worse than the state-of-the-art (see table 6), but the
latter enjoys a comfortable margin over the former.
as the s2s model broadly reimplements the work
of mei et al. (2016), we put the discrepancy in per-
formance down to the particular design choices that
we did not follow in order to keep the model here as
general as possible and comparable across tasks.

the ablation studies (table 7) show little gain for
the semi-supervised approach when only using data
from the original training set, but substantial im-
provement with the additional unsupervised data.

5 discussion
supervised training the prediction accuracies of
our supervised baseline s2s model are mixed with
respect to prior results on their respective tasks. for
geoquery, s2s performs signi   cantly better than
the most similar model from the literature (dong and
lapata, 2016), mostly due to the fact that y and x are

input from unsupervised data (y)
answer smallest city loc 2 state stateid state
answer city loc 2 state next to 2 stateid state

generated latent representation (x)
what is the smallest city in the state of state </s>
what are the cities in states which border state </s>

answer mountain loc 2 countryid country
answer state next to 2 state all

what is the lakes in country </s>
which states longer states show peak states to </s>

table 8: positive and negative examples of latent language together with the randomly generated logical form from the unsupervised
part of the geoquery training. note that the natural language (x) does not occur anywhere in the training data in this form.

model
chen and mooney (2011)
kim and mooney (2012)
andreas and klein (2015)
kim and mooney (2013)
artzi et al. (2014)
artzi and zettlemoyer (2013)
mei et al. (2016)
s2s
seq4

accuracy
54.40
57.22
59.60
62.81
64.36
65.28
69.98
58.60
63.25

table 6: results on the sail corpus.

sup. data
5%
10%
25%
50%
75%
100%

s2s
37.79
40.77
43.76
48.01
48.99
49.49

seq4-
41.48
41.26
43.95
49.42
49.20
49.49

seq4+
43.44
48.67
51.19
55.97
57.40
58.28

table 7: results of the sail ablation study. results are from
models trained on l and jelly maps, tested on grid only, hence
the discrepancy between the 100% result and s2s in table 6.

encoded with bidirectional lstms. with a unidirec-
tional lstm we get similar results to theirs.

on the sail corpus, s2s performs worse than
the state of the art. as the models are broadly equiv-
alent we attribute this difference to a number of task-
speci   c choices and optimisations7 made in mei et
al. (2016) which we did not reimplement for the sake
of using a common model across all three tasks.

for nlmaps, s2s performs much better than the
state-of-the-art, exceeding the previous best result
by 11% despite a very simple id121 method

7in particular we don   t use id125 and ensembling.

and a lack of any form of entity anonymisation.

semi-supervised training in both the case of
geoquery and the sail task we found the semi-
supervised model to convincingly outperform the
fully supervised model. the effect was particu-
larly notable in the case of the sail corpus, where
performance increased from 58.60% accuracy to
63.25% (see table 6). it is worth remembering that
the supervised training regime consists of three folds
of tuning on two maps with subsequent testing on
the third map, which carries a risk of over   tting to
the training maps. the introduction of the fourth
unsupervised map clearly mitigates this effect. ta-
ble 8 shows some examples of unsupervised logi-
cal forms being transformed into natural language,
which demonstrate how the model can learn to sen-
sibly ground unsupervised data.

ablation performance the experiments with ad-
ditional unsupervised data prove the feasibility of
our approach and clearly demonstrate the useful-
ness of the seq4 model for the general class of
sequence-to-sequence tasks where supervised data
is hard to come by. to analyse the model fur-
ther, we also look at the performance of both s2s
and seq4 when reducing the amount of supervised
training data available to the model. we compare
three settings:
the supervised s2s model with re-
duced training data, seq4- which uses the removed
training data in an unsupervised fashion (throwing
away the natural language) and seq4+ which uses
the randomly generated unsupervised data described
in section 3. the s2s model behaves as expected
on all three tasks, its performance dropping with the
size of the training data. the performance of seq4-
and seq4+ requires more analysis.

in the case of geoquery, having unlabelled data
from the true distribution (seq4-) is a good thing

when there is enough of it, as clearly seen when
only 5% of the original dataset is used for supervised
training and the remaining 95% is used for unsuper-
vised training. the gap shrinks as the amount of
supervised data is increased, which is as expected.
on the other hand, using a large amount of extra,
generated data from an approximating distribution
(seq4+) does not help as much initially when com-
pared with the unsupervised data from the true dis-
tribution. however, as the size of the unsupervised
dataset in seq4- becomes the bottleneck this gap
closes and eventually the model trained on the ex-
tra data achieves higher accuracy.

for the sail task the semi-supervised models do
better than the supervised results throughout, with
the model trained on randomly generated additional
data consistently outperforming the model trained
only on the original data. this gives further credence
to the risk of over   tting to the training mazes already
mentioned above.

finally, in the case of the nlmaps corpus, the
semi-supervised approach does not appear to help
much at any point during the ablation. these indis-
tinguishable results are likely due to the task   s com-
plexity, causing the ablation experiments to either
have to little supervised data to suf   ciently ground
the latent space to make use of the unsupervised
data, or in the higher percentages then too little un-
supervised data to meaningfully improve the model.

6 related work

id29 the tasks in this paper all
broadly belong to the domain of id29,
which describes the process of mapping natural lan-
guage to a formal representation of its meaning.
this is extended in the sail navigation task, where
the formal representation is a function of both the
language instruction and a given environment.

id29 is a well-studied problem with
numerous approaches including inductive logic
programming (zelle and mooney, 1996), string-
to-tree (galley et al., 2004) and string-to-graph
(jones et al., 2012) transducers, grammar induction
(kwiatkowski et al., 2011; artzi and zettlemoyer,
2013; reddy et al., 2014) or machine translation
(wong and mooney, 2006; andreas et al., 2013).

while a large number of relevant literature fo-

cuses on de   ning the grammar of the logical forms
(zettlemoyer and collins, 2005), other models learn
purely from aligned pairs of text and logical form
(berant and liang, 2014), or from more weakly su-
pervised signals such as question-answer pairs to-
gether with a database (liang et al., 2011). recent
work of jia and liang (2016) induces a synchronous
context-free grammar and generates additional train-
ing examples (x, y), which is one way to address
data scarcity issues. the semi-supervised setup pro-
posed here offers an alternative solution to this issue.

discrete autoencoders very recently there has
been some related work on discrete autoencoders
for natural language processing (suster et al., 2016;
i.a.) this work
marcheggiani and titov, 2016,
presents a    rst approach to using effectively dis-
cretised sequential information as the latent rep-
resentation without resorting to draconian assump-
tions (ammar et al., 2014) to make marginalisation
tractable. while our model is not exactly marginalis-
able either, the continuous relaxation makes training
far more tractable. a related idea was recently pre-
sented in g  ulc  ehre et al. (2015), who use monolin-
gual data to improve machine translation by fusing a
sequence-to-sequence model and a language model.

7 conclusion

we described a method for augmenting a supervised
sequence transduction objective with an autoen-
coding objective, thereby enabling semi-supervised
training where previously a scarcity of aligned data
might have held back model performance. across
multiple id29 tasks we demonstrated the
effectiveness of this approach, improving model per-
formance by training on randomly generated unsu-
pervised data in addition to the original data.

going forward it would be interesting to fur-
ther analyse the effects of sampling from a logistic-
normal distribution as opposed to a softmax in or-
der to better understand how this impacts the dis-
tribution in the latent space. while we focused on
tasks with little supervised data and additional un-
supervised data in y, it would be straightforward to
reverse the model to train it with additional labelled
data in x, i.e. on the natural language side. a natural
extension would also be a formulation where semi-
supervised training was performed in both x and y.

for instance, machine translation lends itself to such
a formulation where for many language pairs paral-
lel data may be scarce while there is an abundance
of monolingual data.

references
waleed ammar, chris dyer, and noah a. smith. 2014.
conditional random field autoencoders for unsuper-
vised id170. in proceedings of nips.
jacob andreas and dan klein. 2015. alignment-based
id152 for instruction following.
in proceedings of emnlp, september.

jacob andreas, andreas vlachos, and stephen clark.
in

2013. id29 as machine translation.
proceedings of acl, august.

yoav artzi and luke zettlemoyer. 2013. weakly super-
vised learning of semantic parsers for mapping in-
structions to actions. transactions of the association
for computational linguistics, 1(1):49   62.

yoav artzi, dipanjan das, and slav petrov. 2014. learn-
ing compact lexicons for id35 id29. in
proceedings of emnlp, october.

dzmitry bahdanau, kyunghyun cho, and yoshua ben-
gio. 2015. id4 by jointly
in proceedings of
learning to align and translate.
iclr.

jonathan berant and percy liang. 2014. semantic pars-

ing via id141. in proceedings of acl, june.

stanley f chen and joshua goodman. 1999. an empir-
ical study of smoothing techniques for language mod-
eling. computer speech & language, 13(4):359   393.
david l. chen and raymond j. mooney. 2011. learning
to interpret natural language navigation instructions
from observations. in proceedings of aaai, august.
language to
logical form with neural attention. arxiv preprint
arxiv:1601.01280.

li dong and mirella lapata.

2016.

michel galley, mark hopkins, kevin knight, and daniel
marcu. 2004. what   s in a translation rule? in pro-
ceedings of hlt-naacl, may.

c   aglar g  ulc  ehre, orhan firat, kelvin xu, kyunghyun
cho, lo    c barrault, huei-chi lin, fethi bougares,
holger schwenk, and yoshua bengio. 2015. on us-
ing monolingual corpora in neural machine transla-
tion. arxiv preprint arxiv:1503.03535.

carolin haas and stefan riezler. 2016. a corpus and se-
mantic parser for multilingual natural language query-
ing of openstreetmap. in proceedings of naacl, june.
1997.
neural computation,

sepp hochreiter and j  urgen schmidhuber.

long short-term memory.
9(8):1735   1780, november.

robin jia and percy liang. 2016. data recombination
for neural id29. in association for com-
putational linguistics (acl).

bevan jones, jacob andreas, daniel bauer, karl moritz
semantics-
hermann, and kevin knight.
based machine translation with hyperedge replace-
in proceedings of coling 2012,
ment grammars.
december.

2012.

joohyun kim and raymond j. mooney. 2012. unsuper-
vised pid18 induction for grounded language learn-
ing with highly ambiguous supervision. in proceed-
ings of emnlp-conll, july.

joohyun kim and raymond mooney. 2013. adapt-
ing discriminative reranking to grounded language
learning. in proceedings of acl, august.

diederik p. kingma and max welling. 2014. auto-
encoding id58. in proceedings of iclr.
tom kwiatkowski, luke zettlemoyer, sharon goldwater,
and mark steedman. 2011. lexical generalization
in id35 grammar induction for id29. in
proceedings of emnlp.

tom kwiatkowski, eunsol choi, yoav artzi, and luke
zettlemoyer. 2013. scaling semantic parsers with
in in proceedings of
on-the-   y ontology matching.
emnlp. citeseer.

percy liang, michael i. jordan, and dan klein. 2011.
learning dependency-based compositional seman-
tics. in proceedings of the acl-hlt.

percy liang, michael i jordan, and dan klein. 2013.
learning dependency-based id152.
computational linguistics, 39(2):389   446.

matt macmahon, brian stankiewicz, and benjamin
kuipers. 2006. walk the talk: connecting language,
knowledge, and action in route instructions. in pro-
ceedings of aaai.

diego marcheggiani and ivan titov. 2016. discrete-state
id5 for joint discovery and factor-
ization of relations. transactions of acl.

hongyuan mei, mohit bansal, and matthew r. walter.
2016. listen, attend, and walk: neural mapping
of navigational instructions to action sequences. in
proceedings of aaai.

siva reddy, mirella lapata, and mark steedman. 2014.
large-scale id29 without question-
answer pairs. transactions of the association for
computational linguistics, 2:377   392.

simon suster, ivan titov, and gertjan van noord. 2016.
bilingual learning of multi-sense embeddings with
discrete autoencoders. corr, abs/1603.09128.

oriol vinyals,   ukasz kaiser, terry koo, slav petrov,
ilya sutskever, and geoffrey hinton. 2015. grammar
as a foreign language. in proceedings of nips.

yuk wah wong and raymond j. mooney. 2006. learn-
ing for id29 with statistical machine
translation. in proceedings of naacl.

john m. zelle and raymond j. mooney. 1996. learning
to parse database queries using inductive logic pro-
gramming. in proceedings of aaai/iaai, pages 1050   
1055, august.

luke s. zettlemoyer and michael collins. 2005. learn-
ing to map sentences to logical form: structured
classi   cation with probabilistic categorial grammars.
in uai, pages 658   666. auai press.

luke zettlemoyer and michael collins. 2007. online
learning of relaxed id35 grammars for parsing to
in proceedings of emnlp-conll,
logical form.
june.

kai zhao and liang huang. 2014. type-driven incre-
mental id29 with polymorphism. arxiv
preprint arxiv:1411.5379.

jie zhou and wei xu. 2015. end-to-end learning of
id14 using recurrent neural net-
works. in proceedings of acl.

