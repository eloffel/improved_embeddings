pointer sentinel mixture models

stephen merity
caiming xiong
james bradbury
richard socher
metamind - a salesforce company, palo alto, ca, usa

smerity@salesforce.com
cxiong@salesforce.com
james.bradbury@salesforce.com
rsocher@salesforce.com

6
1
0
2

 

p
e
s
6
2

 

 
 
]
l
c
.
s
c
[
 
 

1
v
3
4
8
7
0

.

9
0
6
1
:
v
i
x
r
a

abstract

recent neural network sequence models with
softmax classi   ers have achieved their best lan-
guage modeling performance only with very
large hidden states and large vocabularies. even
then they struggle to predict rare or unseen words
even if the context makes the prediction un-
ambiguous. we introduce the pointer sentinel
mixture architecture for neural sequence models
which has the ability to either reproduce a word
from the recent context or produce a word from a
standard softmax classi   er. our pointer sentinel-
lstm model achieves state of the art language
modeling performance on the id32
(70.9 perplexity) while using far fewer parame-
ters than a standard softmax lstm. in order to
evaluate how well language models can exploit
longer contexts and deal with more realistic vo-
cabularies and larger corpora we also introduce
the freely available wikitext corpus.1

1. introduction
a major dif   culty in id38 is learning when
to predict speci   c words from the immediate context. for
instance, imagine a new person is introduced and two para-
graphs later the context would allow one to very accurately
predict this person   s name as the next word. for standard
neural sequence models to predict this name, they would
have to encode the name, store it for many time steps in
their hidden state, and then decode it when appropriate. as
the hidden state is limited in capacity and the optimization
of such models suffer from the vanishing gradient prob-
lem, this is a lossy operation when performed over many
timesteps. this is especially true for rare words.
models with soft attention or memory components have
been proposed to help deal with this challenge, aiming to
allow for the retrieval and use of relevant previous hidden

1available for download at the wikitext dataset site

figure 1. illustration of the pointer sentinel-id56 mixture model.
g is the mixture gate which uses the sentinel to dictate how much
id203 mass to give to the vocabulary.

states, in effect increasing hidden state capacity and pro-
viding a path for gradients not tied to timesteps. even with
attention, the standard softmax classi   er that is being used
in these models often struggles to correctly predict rare or
previously unknown words.
id193 (vinyals et al., 2015) provide one poten-
tial solution for rare and out of vocabulary (oov) words as
a pointer network uses attention to select an element from
the input as output. this allows it to produce previously
unseen input tokens. while id193 improve per-
formance on rare words and long-term dependencies they
are unable to select words that do not exist in the input.
we introduce a mixture model, illustrated in fig. 1, that
combines the advantages of standard softmax classi   ers
with those of a pointer component for effective and ef   -
cient id38. rather than relying on the id56
hidden state to decide when to use the pointer, as in the re-
cent work of g  ulc  ehre et al. (2016), we allow the pointer
component itself to decide when to use the softmax vocab-
ulary through a sentinel. the model improves the state of
the art perplexity on the id32. since this com-
monly used dataset is small and no other freely available
alternative exists that allows for learning long range depen-
dencies, we also introduce a new benchmark dataset for
id38 called wikitext.

p(yellen)=gpvocab(yellen)+(1 g)pptr(yellen)p(yellen)=gpvocab(yellen)+(1 g)pptr(yellen)zebrachairjanetyellen   raisedrates.ms.???fed   yellenrosenthalbernankeaardvark      sentinel   pointersoftmaxid56pvocab(yellen)pvocab(yellen)ggpptr(yellen)pptr(yellen)pointer sentinel mixture models

figure 2. visualization of the pointer sentinel-id56 mixture model. the query, produced from applying an mlp to the last output of the
id56, is used by the pointer network to identify likely matching words from the past. the (cid:12) nodes are inner products between the query
and the id56 hidden states. if the pointer component is not con   dent, id203 mass can be directed to the id56 by increasing the
value of the mixture gate g via the sentinel, seen in grey. if g = 1 then only the id56 is used. if g = 0 then only the pointer is used.

2. the pointer sentinel for language

modeling

given a sequence of words w1, . . . , wn   1, our task is to
predict the next word wn .

2.1. the softmax-id56 component
recurrent neural networks (id56s) have seen widespread
use for id38 (mikolov et al., 2010) due to
their ability to, at least in theory, retain long term depen-
(cid:81)n
dencies. id56s employ the chain rule to factorize the joint
probabilities over a sequence of tokens: p(w1, . . . , wn ) =
i=1 p(wi|w1, . . . , wi   1). more precisely, at each time
step i, we compute the id56 hidden state hi according to
the previous hidden state hi   1 and the input xi such that
hi = rn n (xi, hi   1). when all the n     1 words have
been processed by the id56, the    nal state hn   1 is fed
into a softmax layer which computes the id203 over
a vocabulary of possible words:

pvocab(w) = softmax(u hn   1),

(1)
where pvocab     rv , u     rv   h, h is the hidden size, and
v the vocabulary size. id56s can suffer from the vanishing
gradient problem. the lstm (hochreiter & schmidhuber,
1997) architecture has been proposed to deal with this by
updating the hidden state according to a set of gates. our
work focuses on the lstm but can be applied to any id56
architecture that ends in a vocabulary softmax.

2.2. the pointer network component

in this section, we propose a modi   cation to pointer net-
works for id38. to predict the next word in
the sequence, a pointer network would select the member
of the input sequence p(w1, . . . , wn   1) with the maximal
attention score as the output.
the simplest way to compute an attention score for a spe-
ci   c hidden state is an inner product with all the past hid-
den states h, with each hidden state hi     rh. however, if
we want to compute such a score for the most recent word
(since this word may be repeated), we need to include the
last hidden state itself in this inner product. taking the in-
ner product of a vector with itself results in the vector   s
magnitude squared, meaning the attention scores would be
strongly biased towards the most recent word. hence we
project the current hidden state to a query vector q    rst. to
produce the query q we compute

q = tanh(w hn   1 + b),

(2)
where w     rh  h, b     rh, and q     rh. to generate the
pointer attention scores, we compute the match between the
previous id56 output states hi and the query q by taking the
inner product, followed by a softmax activation function to
obtain a id203 distribution:

zi = qt hi,
a = softmax(z),

(3)
(4)
where z     rl, a     rl, and l is the total number of hidden

         sentinelxid56 distributionpvocab(yn|w1,...,wn 1)pvocab(yn|w1,...,wn 1)pointer distributionpptr(yn|w1,...,wn 1)pptr(yn|w1,...,wn 1)output distributionp(yn|w1,...,wn 1)p(yn|w1,...,wn 1) sentinelquery    id56  embed+            softmaxsoftmax                        mixture gate ggpointer sentinel mixture models

(cid:88)

states. the id203 mass assigned to a given word is the
sum of the id203 mass given to all token positions
where the given word appears:

pptr(w) =

ai,

(5)

i   i(w,x)

where i(w, x) results in all positions of the word w in the
input x and pptr     rv . this technique, referred to as
pointer sum attention, has been used for question answer-
ing (kadlec et al., 2016).
given the length of the documents used in language mod-
eling, it may not be feasible for the pointer network to eval-
uate an attention score for all the words back to the begin-
ning of the dataset. instead, we may elect to maintain only a
window of the l most recent words for the pointer to match
against. the length l of the window is a hyperparameter
that can be tuned on a held out dataset or by empirically an-
alyzing how frequently a word at position t appears within
the last l words.
to illustrate the advantages of this approach, consider a
long article featuring two sentences president obama dis-
cussed the economy and president obama then    ew to
prague.
if the query was which president is the article
about?, id203 mass could be applied to obama in
if the question was instead who    ew to
either sentence.
prague?, only the latter occurrence of obama provides the
proper context. the attention sum model ensures that, as
long as the entire attention id203 mass is distributed
on the occurrences of obama, the pointer network can
achieve zero loss. this    exibility provides supervision
without forcing the model to put mass on supervision sig-
nals that may be incorrect or lack proper context. this fea-
ture becomes an important component in the pointer sen-
tinel mixture model.

2.3. the pointer sentinel mixture model

while id193 have proven to be effective, they
cannot predict output words that are not present in the in-
put, a common scenario in id38. we propose
to resolve this by using a mixture model that combines a
standard softmax with a pointer.
our mixture model has two base distributions: the softmax
vocabulary of the id56 output and the positional vocabu-
lary of the pointer model. we refer to these as the id56
component and the pointer component respectively. to
combine the two base distributions, we use a gating func-
tion g = p(zi = k|xi) where zi is the latent variable stating
which base distribution the data point belongs to. as we
only have two base distributions, g can produce a scalar in
the range [0, 1]. a value of 0 implies that only the pointer

is used and 1 means only the softmax-id56 is used.

p(yi|xi) = g pvocab(yi|xi) + (1     g) pptr(yi|xi).

(6)

while the models could be entirely separate, we re-use
many of the parameters for the softmax-id56 and pointer
components. this sharing minimizes the total number of
parameters in the model and capitalizes on the pointer net-
work   s supervision for the id56 component.

2.4. details of the gating function

to compute the new pointer sentinel gate g, we modify the
pointer component. in particular, we add an additional ele-
ment to z, the vector of attention scores as de   ned in eq. 3.
this element is computed using an inner product between
the query and the sentinel2 vector s     rh. this change
can be summarized by changing eq. 4 to:

a = softmax(cid:0)(cid:2)z; qt s(cid:3)(cid:1) .

(7)
we de   ne a     rv +1 to be the attention distribution over
both the words in the pointer window as well as the sentinel
state. we interpret the last element of this vector to be the
gate value: g = a[v + 1].
any id203 mass assigned to g is given to the stan-
dard softmax vocabulary of the id56. the    nal updated,
normalized pointer id203 over the vocabulary in the
window then becomes:

pptr(yi|xi) =

1
1     g

a[1 : v ],

(8)

where we denoted [1 : v ] to mean the    rst v elements of
the vector. the    nal mixture model is the same as eq. 6 but
with the updated eq. 8 for the pointer id203.
this setup encourages the model to have both components
compete: use pointers whenever possible and back-off to
the standard softmax otherwise. this competition, in par-
ticular, was crucial to obtain our best model. by integrating
the gating function directly into the pointer computation, it
is in   uenced by both the id56 hidden state and the pointer
window   s hidden states.

2.5. motivation for the sentinel as gating function

to make the best decision possible regarding which compo-
nent to use the gating function must have as much context
as possible. as we increase both the number of timesteps
and the window of words for the pointer component to con-
sider, the id56 hidden state by itself isn   t guaranteed to

2a sentinel value is inserted at the end of a search space in or-
der to ensure a search algorithm terminates if no matching item is
found. our sentinel value terminates the pointer search space and
distributes the rest of the id203 mass to the id56 vocabulary.

pointer sentinel mixture models

accurately recall the identity or order of words it has re-
cently seen (adi et al., 2016). this is an obvious limitation
of encoding a variable length sequence into a    xed dimen-
sionality vector.
in our task, where we may want a pointer window where
the length l is in the hundreds, accurately modeling all of
this information within the id56 hidden state is impracti-
cal. the position of speci   c words is also a vital feature
as relevant words eventually fall out of the pointer compo-
nent   s window. to correctly model this would require the
id56 hidden state to store both the identity and position of
each word in the pointer window. this is far beyond what
the    xed dimensionality hidden state of an id56 is able to
accurately capture.
for this reason, we integrate the gating function directly
into the pointer network by use of the sentinel. the deci-
sion to back-off to the softmax vocabulary is then informed
by both the query q, generated using the id56 hidden state
hn   1, and from the contents of the hidden states in the
pointer window itself. this allows the model to accurately
query what hidden states are contained in the pointer win-
dow and avoid having to maintain state for when a word
may have fallen out of the pointer window.

(cid:80)

2.6. pointer sentinel id168

the

loss

minimize

cross-id178

j   yij log p(yij|xi), where   yi

of
we
is a one hot encod-
   
ing of the correct output. during training, as   yi is one hot,
only a single mixed id203 p(yij) must be computed
for calculating the loss. this can result in a far more
ef   cient gpu implementation. at prediction time, when
we want all values for p(yi|xi), a maximum of l word
probabilities must be mixed, as there is a maximum of l
unique words in the pointer window of length l. this
mixing can occur on the cpu where random access
indexing is more ef   cient than the gpu.
following the pointer sum attention network, the aim is to
place id203 mass from the attention mechanism on the
correct output   yi if it exists in the input. in the case of our
mixture model the pointer loss instead becomes:

      g +

(cid:88)

       ,

ai

i   i(y,x)

    log

(9)

where i(y, x) results in all positions of the correct output
y in the input x. the gate g may be assigned all probabil-
ity mass if, for instance, the correct output   yi exists only
in the softmax-id56 vocabulary. furthermore, there is no
penalty if the model places the entire id203 mass, on
any of the instances of the correct word in the input win-
dow. if the pointer component places the entirety of the
id203 mass on the gate g, the pointer network incurs

no penalty and the loss is entirely determined by the loss of
the softmax-id56 component.

2.7. parameters and computation time

the pointer sentinel-lstm mixture model results in a
relatively minor increase in parameters and computation
time, especially when compared to the size of the mod-
els required to achieve similar performance using standard
lstm models.
the only two additional parameters required by the model
are those required for computing q, speci   cally w    
rh  h and b     rh, and the sentinel vector embedding,
s     rh. this is independent of the depth of the id56 as
the the pointer component only interacts with the output of
the    nal id56 layer. the additional h 2 + 2h parameters
are minor compared to a single lstm layer   s 8h 2 + 4h
parameters. most state of the art models also require mul-
tiple lstm layers.
in terms of additional computation, a pointer sentinel-
lstm of window size l only requires computing the
query q (a linear layer with tanh activation), a total of l
parallelizable inner product calculations, and the attention
scores for the l resulting scalars via the softmax function.

3. related work
considerable research has been dedicated to the task of lan-
guage modeling, from traditional machine learning tech-
niques such as id165s to neural sequence models in deep
learning.
mixture models composed of various knowledge sources
have been proposed in the past for id38.
rosenfeld (1996) uses a maximum id178 model to com-
bine a variety of information sources to improve language
modeling on news text and speech. these information
sources include complex overlapping id165 distributions
and id165 caches that aim to capture rare words. the n-
gram cache could be considered similar in some ways to
our model   s pointer network, where rare or contextually
relevant words are stored for later use.
beyond id165s, neural sequence models such as recurrent
neural networks have been shown to achieve state of the art
results (mikolov et al., 2010). a variety of id56 regular-
ization methods have been explored, including a number of
dropout variations (zaremba et al., 2014; gal, 2015) which
prevent over   tting of complex lstm language models.
other work has improved id38 performance
by modifying the id56 architecture to better handle in-
creased recurrence depth (zilly et al., 2016).
in order to increase capacity and minimize the impact of
vanishing gradients, some language and translation mod-

pointer sentinel mixture models

id32

train

valid

test

articles
tokens

-

929,590

vocab size
oov rate

-

82,431

-

73,761
10,000
4.8%

train
600

2,088,628

wikitext-2

valid
60

217,646
33,278
2.6%

wikitext-103

test
60

245,569

train
28,475

103,227,021

valid
60

217,646

test
60

245,569

267,735
0.4%

table 1. statistics of the id32, wikitext-2, and wikitext-103. the out of vocabulary (oov) rate notes what percentage of
tokens have been replaced by an (cid:104)unk(cid:105) token. the token count includes newlines which add to the structure of the wikitext datasets.

els have also added a soft attention or memory compo-
nent (bahdanau et al., 2015; sukhbaatar et al., 2015; cheng
et al., 2016; kumar et al., 2016; xiong et al., 2016; ahn
et al., 2016). these mechanisms allow for the retrieval and
use of relevant previous hidden states. soft attention mech-
anisms need to    rst encode the relevant word into a state
vector and then decode it again, even if the output word
is identical to the input word used to compute that hid-
den state or memory. a drawback to soft attention is that
if, for instance, january and march are both equally at-
tended candidates, the attention mechanism may blend the
two vectors, resulting in a context vector closest to febru-
ary (kadlec et al., 2016). even with attention, the standard
softmax classi   er being used in these models often strug-
gles to correctly predict rare or previously unknown words.
attention-based pointer mechanisms were introduced in
vinyals et al. (2015) where the pointer network is able
to select elements from the input as output. in the above
example, only january or march would be available as
options, as february does not appear in the input. the
use of id193 have been shown to help with
geometric problems (vinyals et al., 2015), code genera-
tion (ling et al., 2016), summarization (gu et al., 2016;
g  ulc  ehre et al., 2016), id53 (kadlec et al.,
2016). while id193 improve performance on
rare words and long-term dependencies they are unable to
select words that do not exist in the input.
g  ulc  ehre et al. (2016) introduce a pointer softmax model
that can generate output
the vocabulary
softmax of an id56 or the location softmax of the pointer
network. not only does this allow for producing oov
words which are not in the input, the pointer softmax
model is able to better deal with rare and unknown words
than a model only featuring an id56 softmax. rather than
constructing a mixture model as in our work, they use a
switching network to decide which component to use. for
id4, the switching network is condi-
tioned on the representation of the context of the source text
and the hidden state of the decoder. the pointer network is
not used as a source of information for switching network
as in our model. the pointer and id56 softmax are scaled

from either

according to the switching network and the word or loca-
tion with the highest    nal attention score is selected for out-
put. although this approach uses both a pointer and id56
component, it is not a mixture model and does not combine
the probabilities for a word if it occurs in both the pointer
location softmax and the id56 vocabulary softmax. in our
model the word id203 is a mix of both the id56 and
pointer components, allowing for better predictions when
the context may be ambiguous.
extending this concept further, the latent predictor network
(ling et al., 2016) generates an output sequence condi-
tioned on an arbitrary number of base models where each
base model may have differing granularity. in their task of
code generation, the output could be produced one charac-
ter at a time using a standard softmax or instead copy entire
words from referenced text    elds using a pointer network.
as opposed to g  ulc  ehre et al. (2016), all states which pro-
duce the same output are merged by summing their prob-
abilities. their model however requires a more complex
training process involving the forward-backward algorithm
for semi-markov models to prevent an exponential explo-
sion in potential paths.

4. wikitext - a benchmark for language

modeling

we    rst describe the most commonly used language model-
ing dataset and its pre-processing in order to then motivate
the need for a new benchmark dataset.

4.1. id32

in order to compare our model to the many recent neural
language models, we conduct word-level prediction exper-
iments on the id32 (ptb) dataset (marcus et al.,
1993), pre-processed by mikolov et al. (2010). the dataset
consists of 929k training words, 73k validation words, and
82k test words. as part of the pre-processing performed by
mikolov et al. (2010), words were lower-cased, numbers
were replaced with n, newlines were replaced with (cid:104)eos(cid:105),
and all other punctuation was removed. the vocabulary is
the most frequent 10k words with the rest of the tokens be-

pointer sentinel mixture models

ing replaced by an (cid:104)unk(cid:105) token. for full statistics, refer to
table 1.

4.2. reasons for a new dataset

while the processed version of the ptb above has been
frequently used for id38, it has many limi-
tations. the tokens in ptb are all lower case, stripped of
any punctuation, and limited to a vocabulary of only 10k
words. these limitations mean that the ptb is unrealistic
for real language use, especially when far larger vocabu-
laries with many rare words are involved. fig. 3 illustrates
this using a zip   an plot over the training partition of the
ptb. the curve stops abruptly when hitting the 10k vocab-
ulary. given that accurately predicting rare words, such as
named entities, is an important task for many applications,
the lack of a long tail for the vocabulary is problematic.
other larger scale id38 datasets exist. un-
fortunately, they either have restrictive licensing which pre-
vents widespread use or have randomized sentence order-
ing (chelba et al., 2013) which is unrealistic for most lan-
guage use and prevents the effective learning and evalua-
tion of longer term dependencies. hence, we constructed
a id38 dataset using text extracted from
wikipedia and will make this available to the community.

4.3. construction and pre-processing

we selected articles only    tting the good or featured ar-
ticle criteria speci   ed by editors on wikipedia. these ar-
ticles have been reviewed by humans and are considered
well written, factually accurate, broad in coverage, neutral
in point of view, and stable. this resulted in 23,805 good
articles and 4,790 featured articles. the text for each arti-
cle was extracted using the wikipedia api. extracting the
raw text from wikipedia mark-up is nontrivial due to the
large number of macros in use. these macros are used
extensively and include metric conversion, abbreviations,
language notation, and date handling.
once extracted, speci   c sections which primarily featured
lists were removed by default. other minor bugs, such as
sort keys and edit buttons that leaked in from the html,
were also removed. mathematical formulae and latex
code, were replaced with (cid:104)f ormula(cid:105) tokens. normaliza-
tion and id121 were performed using the moses to-
kenizer (koehn et al., 2007), slightly augmented to further
split numbers (8,600     8 @,@ 600) and with some addi-
tional minor    xes. following chelba et al. (2013) a vocab-
ulary was constructed by discarding all words with a count
below 3. words outside of the vocabulary were mapped to
the (cid:104)unk(cid:105) token, also a part of the vocabulary.
to ensure the dataset is immediately usable by existing lan-
guage modeling tools, we have provided the dataset in the

algorithm 1 calculate truncated bptt where every k1
timesteps we run back propagation for k2 timesteps

for t = 1 to t = t do

run the id56 for one step, computing ht and zt

if t divides k1 then

run bptt from t down to t     k2

end if
end for

same format and following the same conventions as that of
the ptb dataset above.

4.4. statistics

the full wikitext dataset is over 103 million words in size,
a hundred times larger than the ptb. it is also a tenth the
size of the one billion word benchmark (chelba et al.,
2013), one of the largest publicly available language mod-
eling benchmarks, whilst consisting of articles that allow
for the capture and usage of longer term dependencies as
might be found in many real world tasks.
the dataset is available in two different sizes: wikitext-2
and wikitext-103. both feature punctuation, original cas-
ing, a larger vocabulary, and numbers. wikitext-2 is two
times the size of the id32 dataset. wikitext-103
features all extracted articles. both datasets use the same
articles for validation and testing with the only difference
being the vocabularies. for full statistics, refer to table 1.

5. experiments
5.1. training details

as the pointer sentinel mixture model uses the outputs of
the id56 from up to l timesteps back, this presents a chal-
lenge for training. if we do not regenerate the stale his-
torical outputs of the id56 when we update the gradients,
id26 through these stale outputs may result in
incorrect gradient updates. if we do regenerate all stale out-
puts of the id56, the training process is far slower. as we
can make no theoretical guarantees on the impact of stale
outputs on gradient updates, we opt to regenerate the win-
dow of id56 outputs used by the pointer component after
each gradient update.
we also use truncated id26 through time
(bptt) in a different manner to many other id56 language
models. truncated bptt allows for practical time-ef   cient
training of id56 models but has fundamental trade-offs that
are rarely discussed.
for running truncated bptt, bptt is run for k2 timesteps
every k1 timesteps, as seen in algorithm 1. for many id56

pointer sentinel mixture models

figure 3. zip   an plot over the training partition in id32 and wikitext-2 datasets. notice the severe drop on the id32
when the vocabulary hits 104. two thirds of the vocabulary in wikitext-2 are past the vocabulary cut-off of the id32.

id38 training schemes, k1 = k2, meaning
that every k timesteps truncated bptt is performed for the
k previous timesteps. this results in only a single id56
output receiving id26 for k timesteps, with the
other extreme being that the    rst token receives backprop-
agation for 0 timesteps. this issue is compounded by the
fact that most id38 code split the data tem-
porally such that the boundaries are always the same. as
such, most words in the training data will never experience
a full id26 for k timesteps.
the pointer component always looks l
in our task,
timesteps into the past if l past timesteps are available. we
select k1 = 1 and k2 = l such that for each timestep we
perform id26 for l timesteps and advance one
timestep at a time. only the loss for the    nal predicted
word is used for id26 through the window.

5.2. model details

our experimental setup re   ects that of zaremba et al.
(2014) and gal (2015). we increased the number of
timesteps used during training from 35 to 100, matching
the length of the window l. batch size was increased to
32 from 20. we also halve the learning rate when valida-
tion perplexity is worse than the previous iteration, stop-
ping training when validation perplexity fails to improve
for three epochs or when 64 epochs are reached. the gra-
dients are rescaled if their global norm exceeds 1 (pascanu
et al., 2013b).3 we evaluate the medium model con   gura-
tion which features a hidden size of h = 650 and a two
layer lstm. we compare against the large model con   gu-

3the highly aggressive clipping is likely due to the increased
bptt length. even with such clipping early batches may experi-
ence excessively high perplexity, though this settles rapidly.

ration which features a hidden size of 1500 and a two layer
lstm.
we produce results for two model types, an lstm model
that uses dropout id173 and the pointer sentinel-
lstm model. the variants of dropout used were zone-
out (krueger et al., 2016) and variational id136 based
dropout (gal, 2015). zoneout, which stochastically forces
some recurrent units to maintain their previous values, was
used for the recurrent connections within the lstm. varia-
tional id136 based dropout, where the dropout mask for
a layer is locked across timesteps, was used on the input to
each id56 layer and also on the output of the    nal id56
layer. we used a value of 0.5 for both dropout connections.

5.3. comparison over id32

table 2 compares the pointer sentinel-lstm to a vari-
ety of other models on the id32 dataset. the
pointer sentinel-lstm achieves the lowest perplexity, fol-
lowed by the recent recurrent id199 (zilly
et al., 2016). the medium pointer sentinel-lstm model
also achieves lower perplexity than the large lstm mod-
els. note that the best performing large variational lstm
model uses computationally intensive monte carlo (mc)
dropout averaging. monte carlo dropout averaging is a
general improvement for any sequence model that uses
dropout but comes at a greatly increased test time cost.
in gal (2015) it requires rerunning the test model with
1000 different dropout masks. the pointer sentinel-lstm
is able to achieve these results with far fewer parameters
than other models with comparable performance, speci   -
cally with less than a third the parameters used in the large
variational lstm models.
we also test a variational lstm that uses zoneout, which

pointer sentinel mixture models

serves as the id56 component of our pointer sentinel-
lstm mixture. this variational lstm model performs
bptt for the same length l as the pointer sentinel-lstm,
where l = 100 timesteps. the results for this model abla-
tion are worse than that of gal (2015)   s variational lstm
without monte carlo dropout averaging.

5.4. comparison over wikitext-2

as wikitext-2 is being introduced in this dataset, there are
no existing baselines. we provide two baselines to compare
the pointer sentinel-lstm against: our variational lstm
using zoneout and the medium variational lstm used in
gal (2015).4 attempts to run the gal (2015) large model
variant, a two layer lstm with hidden size 1500, resulted
in out of memory errors on a 12gb k80 gpu, likely due
to the increased vocabulary size. we chose the best hyper-
parameters from ptb experiments for all models.
table 3 shows a similar gain made by the pointer sentinel-
lstm over the variational lstm models. the variational
lstm from gal (2015) again beats out the variational
lstm used as a base for our experiments.

6. analysis
6.1. impact on rare words

a hypothesis as to why the pointer sentinel-lstm can out-
perform an lstm is that the pointer component allows the
model to effectively reproduce rare words. an id56 may
be able to better use the hidden state capacity by deferring
to the pointer component. the pointer component may also
allow for a sharper selection of a single word than may be
possible using only the softmax.
figure 4 shows the improvement of perplexity when com-
paring the lstm to the pointer sentinel-lstm with words
split across buckets according to frequency. it shows that
the pointer sentinel-lstm has stronger improvements as
words become rarer. even on the id32, where
there is a relative absence of rare words due to only select-
ing the most frequent 10k words, we can see the pointer
sentinel-lstm mixture model provides a direct bene   t.
while the improvements are largest on rare words, we can
see that the pointer sentinel-lstm is still helpful on rela-
tively frequent words. this may be the pointer component
directly selecting the word or through the pointer supervi-
sion signal improving the id56 by allowing gradients to
   ow directly to other occurrences of the word in that win-
dow.

4https://github.com/yaringal/bayesianid56

figure 4. mean difference in log perplexity on ptb when using
the pointer sentinel-lstm compared to the lstm model. words
were sorted by frequency and split into equal sized buckets.

6.2. qualitative analysis of pointer usage

in a qualitative analysis, we visualized the gate use and
pointer attention for a variety of examples in the validation
set, focusing on predictions where the gate primarily used
the pointer component. these visualizations are available
in the supplementary material.
as expected, the pointer component is heavily used for rare
names such as seidman (23 times in training), iverson (7
times in training), and rosenthal (3 times in training).
the pointer component was also heavily used when it came
to other named entity names such as companies like honey-
well (8 times in training) and integrated (41 times in train-
ing, though due to lowercasing of words this includes inte-
grated circuits, fully integrated, and other generic usage).
surprisingly,
the pointer component was also used for
many frequent tokens. for selecting the unit of measure-
ment (tons, kilograms, . . . ) or the short scale of numbers
(thousands, millions, billions, . . . ), the pointer would refer
to previous recent usage. this is to be expected, especially
when phrases are of the form increased from n tons to n
tons. the model can even be found relying on a mixture of
the softmax and the pointer for predicting certain frequent
verbs such as said.
finally, the pointer component can be seen pointing to
words at the very end of the 100 word window (position
97), a far longer horizon than the 35 steps that most lan-
guage models truncate their id26 training to.
this illustrates why the gating function must be integrated
into the pointer component. if the gating function could
only use the id56 hidden state, it would need to be wary
of words that were near the tail of the pointer, especially
if it was not able to accurately track exactly how long it

12345678910word buckets of equal size (frequent words on left)0.00.51.01.52.02.5mean difference in log perplexity (higher = better)pointer sentinel mixture models

parameters validation

model
mikolov & zweig (2012) - kn-5
mikolov & zweig (2012) - kn5 + cache
mikolov & zweig (2012) - id56
mikolov & zweig (2012) - id56-lda
mikolov & zweig (2012) - id56-lda + kn-5 + cache
pascanu et al. (2013a) - deep id56
cheng et al. (2014) - sum-prod net
zaremba et al. (2014) - lstm (medium)
zaremba et al. (2014) - lstm (large)
gal (2015) - variational lstm (medium, untied)
gal (2015) - variational lstm (medium, untied, mc)
gal (2015) - variational lstm (large, untied)
gal (2015) - variational lstm (large, untied, mc)
kim et al. (2016) - charid98
zilly et al. (2016) - variational rhn
zoneout + variational lstm (medium)
pointer sentinel-lstm (medium)

2m   
2m   
6m   
7m   
9m   
6m
5m   
20m
66m
20m
20m
66m
66m
19m
32m
20m
21m

test

141.2
125.7
124.7
113.7
92.0
107.5
100.0
82.7
78.4

   
   
   
   
   
   
   
86.2
82.2

81.9    0.2
77.9    0.3

   
   
   
72.8

84.4
72.4

79.7    0.1
78.6    0.1
75.2    0.2
73.4    0.0

78.9
71.3

80.6
70.9

table 2. single model perplexity on validation and test sets for the id32 id38 task. for our models and the
models of zaremba et al. (2014) and gal (2015), medium and large refer to a 650 and 1500 units two layer lstm respectively. the
medium pointer sentinel-lstm model achieves lower perplexity than the large lstm model of gal (2015) while using a third of the
parameters and without using the computationally expensive monte carlo (mc) dropout averaging at test time. parameter numbers with
    are estimates based upon our understanding of the model and with reference to kim et al. (2016).

model
variational lstm implementation from gal (2015)
zoneout + variational lstm
pointer sentinel-lstm

parameters validation

20m
20m
21m

101.7

108.7
84.8

test

96.3

100.9
80.8

table 3. single model perplexity on validation and test sets for the wikitext-2 id38 task. all compared models use a two
layer lstm with a hidden size of 650 and the same hyperparameters as the best performing id32 model.
was since seeing a word. by integrating the gating func-
tion into the pointer component, we avoid the id56 hidden
state having to maintain this intensive bookkeeping.

references
adi, yossi, kermany, einat, belinkov, yonatan, lavi, ofer,
and goldberg, yoav. fine-grained analysis of sentence
embeddings using auxiliary prediction tasks. arxiv
preprint arxiv:1608.04207, 2016.

7. conclusion
we introduced the pointer sentinel mixture model and the
wikitext id38 dataset. this model achieves
state of the art results in id38 over the penn
treebank while using few additional parameters and little
additional computational complexity at prediction time.
we have also motivated the need to move from penn tree-
bank to a new id38 dataset for long range
dependencies, providing wikitext-2 and wikitext-103 as
potential options. we hope this new dataset can serve as a
platform to improve handling of rare words and the usage
of long term dependencies in id38.

ahn, sungjin, choi, heeyoul, p  arnamaa, tanel, and ben-
gio, yoshua. a neural knowledge language model.
corr, abs/1608.00318, 2016.

bahdanau, dzmitry, cho, kyunghyun, and bengio,
yoshua. id4 by jointly learning
to align and translate. in iclr, 2015.

chelba, ciprian, mikolov, tomas, schuster, mike, ge,
qi, brants, thorsten, koehn, phillipp, and robin-
son, tony. one billion word benchmark for measur-
ing progress in statistical id38. arxiv
preprint arxiv:1312.3005, 2013.

cheng, jianpeng, dong, li, and lapata, mirella. long

pointer sentinel mixture models

marcus, mitchell

p.,

santorini,

marcinkiewicz, mary ann.
notated corpus of english:
computational linguistics, 19:313   330, 1993.

beatrice,

and
building a large an-
the id32.

mikolov, tomas and zweig, geoffrey. context dependent
recurrent neural network language model. in slt, 2012.

mikolov, tomas, kara     at, martin, burget, luk  as, cer-
nock  y, jan, and khudanpur, sanjeev. recurrent neu-
ral network based language model. in interspeech,
2010.

pascanu, razvan, c   aglar g  ulc  ehre, cho, kyunghyun, and
bengio, yoshua. how to construct deep recurrent neu-
ral networks. corr, abs/1312.6026, 2013a.

pascanu, razvan, mikolov, tomas, and bengio, yoshua.
on the dif   culty of training recurrent neural networks.
in icml, 2013b.

rosenfeld, roni. a maximum id178 approach to adap-

tive statistical id38. 1996.

sukhbaatar, sainbayar, szlam, arthur, weston, jason, and
fergus, rob. end-to-end memory networks. in nips,
2015.

vinyals, oriol, fortunato, meire, and jaitly, navdeep.
in advances in neural information

id193.
processing systems, pp. 2692   2700, 2015.

xiong, caiming, merity, stephen, and socher, richard.
dynamic memory networks for visual and textual
id53. in icml, 2016.

zaremba, wojciech, sutskever, ilya, and vinyals, oriol.
recurrent neural network id173. arxiv preprint
arxiv:1409.2329, 2014.

zilly, julian georg, srivastava, rupesh kumar, koutn    k,
jan, and schmidhuber, j  urgen. recurrent highway net-
works. arxiv preprint arxiv:1607.03474, 2016.

short-term memory-networks for machine reading.
corr, abs/1601.06733, 2016.

cheng, wei-chen, kok, stanley, pham, hoai vu, chieu,
hai leong, and chai, kian ming adam. language mod-
eling with sum-product networks. in interspeech,
2014.

gal, yarin. a theoretically grounded application of
dropout in recurrent neural networks. arxiv preprint
arxiv:1512.05287, 2015.

gu, jiatao, lu, zhengdong, li, hang, and li, victor
o. k. incorporating copying mechanism in sequence-
to-sequence learning. corr, abs/1603.06393, 2016.

g  ulc  ehre, c   aglar, ahn, sungjin, nallapati, ramesh, zhou,
bowen, and bengio, yoshua. pointing the unknown
words. arxiv preprint arxiv:1603.08148, 2016.

hochreiter, sepp and schmidhuber, j  urgen. long short-
term memory. neural computation, 9(8):1735   1780,
nov 1997. issn 0899-7667.

kadlec, rudolf, schmid, martin, bajgar, ondrej, and
kleindienst, jan. text understanding with the attention
sum reader network. arxiv preprint arxiv:1603.01547,
2016.

kim, yoon, jernite, yacine, sontag, david, and rush,
alexander m. character-aware neural language models.
corr, abs/1508.06615, 2016.

koehn, philipp, hoang, hieu, birch, alexandra, callison-
burch, chris, federico, marcello, bertoldi, nicola,
cowan, brooke, shen, wade, moran, christine, zens,
richard, dyer, chris, bojar, ondej, constantin, alexan-
dra, and herbst, evan. moses: open source toolkit for
id151. in acl, 2007.

krueger, david, maharaj, tegan, kram  ar, j  anos, pezeshki,
mohammad, ballas, nicolas, ke, nan rosemary, goyal,
anirudh, bengio, yoshua, larochelle, hugo, courville,
aaron, et al. zoneout: regularizing id56s by ran-
domly preserving hidden activations. arxiv preprint
arxiv:1606.01305, 2016.

kumar, ankit, irsoy, ozan, ondruska, peter, iyyer, mo-
hit, bradbury, james, gulrajani, ishaan, zhong, victor,
paulus, romain, and socher, richard. ask me any-
thing: dynamic memory networks for natural language
processing. in icml, 2016.

ling, wang, grefenstette, edward, hermann, karl moritz,
kocisk  y, tom  as, senior, andrew, wang, fumin, and
blunsom, phil. latent predictor networks for code gen-
eration. corr, abs/1603.06744, 2016.

pointer sentinel mixture models

supplementary material
pointer usage on the id32

for a qualitative analysis, we visualize how the pointer component is used within the pointer sentinel mixture model. the
gate refers to the result of the gating function, with 1 indicating the id56 component is exclusively used whilst 0 indicates
the pointer component is exclusively used. we begin with predictions that are using the id56 component primarily and
move to ones that use the pointer component primarily.

figure 5. in predicting the fall season has been a good one especially for those retailers, the pointer component suggests many words
from the historical window that would    t - retailers, investments, chains, and institutions. the gate is still primarily weighted towards
the id56 component however.

figure 6. in predicting the national cancer institute also projected that overall u.s. mortality, the pointer component is focused on
mortality and rates, both of which would    t. the gate is still primarily weighted towards the id56 component.

figure 7. in predicting people do n   t seem to be unhappy with it he said, the pointer component correctly selects said and is almost
equally weighted with the id56 component. this is surprising given how frequent the word said is used within the id32.

demandevenstronger<unk>andgreatermanagementequityparticipation<eos>furthermanyinstitutionstodayholdingtroubledretailers'debtsecuritieswillbe<unk>toconsideradditionalretailinginvestments<eos>it'scalledbadmoneydrivingoutgoodmoneysaidoneretailing<unk><eos>institutionsthatusuallybuyretailpaperhavetobemoreconcerned<eos>howeverthelowerpricestheseretailchainsarenowexpectedtobringshouldmakeiteasierformanagerstoraisethenecessarycapitalandpaybacktheresultingdebt<eos>inadditionthefallsellingseasonhasgenerallybeenagoodoneespeciallyforthosepredicting retailers using 100 words of history (gate = 0.81)<eos>thespacecraft'sfive<unk>areto<unk>the<unk>galileospaceprobeonan<unk>missiontojupiter<eos>senatedemocraticleaderssaidtheyhadenoughvotestodefeataproposedconstitutionalamendmenttobanflagburning<eos>theamendmentisaimedat<unk>asupremecourtrulingthatthrewouttheconvictionofatexas<unk>ongroundsthathisfreedomofspeechwasviolated<eos>federalresearcherssaidlung-cancermortalityratesforpeopleundernyearsofagehavebeguntodeclineparticularlyforwhitemales<eos>thenationalcancerinstitutealsoprojectedthatoverallu.s.predicting mortality using 100 words of history (gate = 0.59)tradinghasworkedwell<eos>thechicagomercbanneddualtradinginitsstandard&poor's500-stockindexfuturespitinn<eos>undertherulestradersdecidebeforeasessionbeginswhethertheywilltradefortheirownaccountorforcustomers<eos>traderswhostandonthepit'stopstepwheremostcustomerordersareexecutedcan'ttradeforthemselves<eos>amercspokesmansaidtheplanhasn'tmademuchdifferenceinliquidityinthepit<eos>it'stoosoontotellbutpeopledon'tseemtobeunhappywithithepredicting said using 100 words of history (gate = 0.55)pointer sentinel mixture models

figure 8. for predicting the federal government has had to pump in $ n billion, the pointer component focuses on the recent usage of
billion with highly similar context. the pointer component is also relied upon more heavily than the id56 component - surprising given
the frequency of billion within the id32 and that the usage was quite recent.

figure 9. for predicting (cid:104)unk(cid:105)    s ghost sometimes runs through the e ring dressed like gen. noriega, the pointer component reaches 97
timesteps back to retrieve gen. douglas. unfortunately this prediction is incorrect but without additional context a human would have
guessed the same word. this additionally illustrates why the gating function must be integrated into the pointer component. the named
entity gen. douglas would have fallen out of the window in only four more timesteps, a fact that the id56 hidden state would not be able
to accurately retain for almost 100 timesteps.

figure 10. for predicting mr. iverson, the pointer component has learned the ability to point to the last name of the most recent named
entity. the named entity also occurs 45 timesteps ago, which is longer than the 35 steps that most language models truncate their
id26 to.

figure 11. for predicting mr. rosenthal, the pointer is almost exclusively used and reaches back 65 timesteps to identify bruce rosenthal
as the person speaking, correctly only selecting the last name.

figure 12. for predicting in composite trading on the new york stock exchange yesterday integrated, the company integrated and
the (cid:104)unk(cid:105) token are primarily attended to by the pointer component, with nearly the full prediction being determined by the pointer
component.

<unk>saysexpandingfhalendingwouldresultinnocosttothegovernmentthemerediversionoffundsfromotherpartsoftheeconomyandfromotherformsofhousingsuchaslow-incometothesingle-familyhomemarketwouldresultinamajorexpense<eos>moreimportanthousingprogramsrunbyhudthevaand<unk>are<unk>inredink<eos>thefhaalonelost$nbillioninfiscalnthegovernment'sequityintheagencyessentiallyitsreservefundfelltominus$nbillion<eos>thefederalgovernmenthashadtopumpin$npredicting billion using 100 words of history (gate = 0.44)wargen.douglas<unk>demandedandgotinadditiontohisu.n.commandinkoreahisownnavalcommandinjapan<unk><eos>those<unk>operationscostlessthan$nbillionayearandkeepmac'sghostquiet<eos>that'saboutallitcoststo<unk>adm.erich<unk>'sghost<eos>inn<unk>andthegermannavythreatenedtoattackthepanama<unk>sowecreatedthesoutherncommandinpanama<eos>thesoutherncommandhasgrownevenbiggersincethewarbecause<unk>'sghostsometimesrunsthroughtheeringdressedlikegen.predicting noriega using 100 words of history (gate = 0.12)nyear-to-yearfall<eos>when<unk>corp.beginsshippingsteelfromtheworld'sfirst<unk>plantthismonthitwillbegintestingthecompetitive<unk>ofitsgiantcompetitors<eos>thenewtechnologywhichcreatesaverythinpieceofsteel<unk>reducesthecostsofmakingflat-rolledsheets<eos>an<unk>kennethiverson<unk>'schairmansaysthecompany'splanteventuallywillmakeatonofsteelinnmanhourscomparedwithfourtosixmanhoursataconventionalmill<eos>we'vehadtherussiansandchineseandpeoplefromindiavisitingusmr.predicting iverson using 100 words of history (gate = 0.03)suchretailinglbo'sasmiller&<unk>inc.anddeclininginvestorconfidencewilldrivedownpricesretailingobserverssaid<eos>thepricingwillbecomemorerealisticwhichshouldhelpmanagementsaidbrucerosenthalanewyorkinvestmentbankerwithnathans.<unk>&co<eos>investorsaren'tgoingtobethrowingmoneyatanyoftheproposedlbosbutdoingdealsonthebasisofridiculousassumptionsnevermadesenseeither<eos>earlierthisyearbankersandotherinvestorswerewillingtoprovidefinancingbecausetheyassumedtherewouldbemajorgainsinbothprofitabilityandsalesmr.predicting rosenthal using 100 words of history (gate = 0.00)integratedresourcesequitywillmeetthisafternooninchicagotodiscusstheiroptions<eos>theunitisa<unk>constructedgroupofaboutnindependentbrokersandfinancialplannerswhosellinsuranceannuitieslimitedpartnershipsmutualfundsandotherinvestmentsforintegratedandotherfirms<eos>thesalesforceisviewedasacriticalassetinintegrated'sattempttosellitscorecompanies<eos><unk>citedconcernsabouthowlongintegratedwouldbeabletoholdtogetherthesalesforceasonereasonitstalkswithintegratedfailed<eos>incompositetradingonthenewyorkstockexchangeyesterdaypredicting integrated using 100 words of history (gate = 0.00)zip   an plot over wikitext-103

pointer sentinel mixture models

figure 13. zip   an plot over the training partition in the wikitext-103 dataset. with the dataset containing over 100 million tokens,
there is reasonable coverage of the long tail of the vocabulary.

