7
1
0
2

 
r
a

m
2

 

 
 
]
l
c
.
s
c
[
 
 

4
v
5
4
9
8
0

.

1
1
6
1
:
v
i
x
r
a

published as a conference paper at iclr 2017

learning a natural language interface

with neural programmer

arvind neelakantan   
university of massachusetts amherst
arvind@cs.umass.edu

quoc v. le
google brain
qvl@google.com

mart    n abadi
google brain
abadi@google.com

andrew mccallum   
university of massachusetts amherst
mccallum@cs.umass.edu

dario amodei   
openai
damodei@openai.com

abstract

learning a natural language interface for database tables is a challenging task that
involves deep language understanding and multi-step reasoning. the task is often
approached by mapping natural language queries to logical forms or programs that
provide the desired response when executed on the database. to our knowledge,
this paper presents the    rst weakly supervised, end-to-end neural network model
to induce such programs on a real-world dataset. we enhance the objective func-
tion of neural programmer, a neural network with built-in discrete operations, and
apply it on wikitablequestions, a natural language question-answering dataset.
the model is trained end-to-end with weak supervision of question-answer pairs,
and does not require domain-speci   c grammars, rules, or annotations that are key
elements in previous approaches to program induction. the main experimental
result in this paper is that a single neural programmer model achieves 34.2% ac-
curacy using only 10,000 examples with weak supervision. an ensemble of 15
models, with a trivial combination technique, achieves 37.7% accuracy, which is
competitive to the current state-of-the-art accuracy of 37.1% obtained by a tradi-
tional natural language semantic parser.

1 background and introduction

databases are a pervasive way to store and access knowledge. however, it is not straightforward
for users to interact with databases since it often requires programming skills and knowledge about
database schemas. overcoming this dif   culty by allowing users to communicate with databases
via natural language is an active research area. the common approach to this task is by semantic
parsing, which is the process of mapping natural language to symbolic representations of meaning.
in this context, id29 yields logical forms or programs that provide the desired response
when executed on the databases (zelle & mooney, 1996). id29 is a challenging problem
that involves deep language understanding and reasoning with discrete operations such as counting
and row selection (liang, 2016).
the    rst learning methods for id29 require expensive annotation of question-program
pairs (zelle & mooney, 1996; zettlemoyer & collins, 2005). this annotation process is no longer
necessary in the current state-of-the-art semantic parsers that are trained using only question-answer
pairs (liang et al., 2011; kwiatkowski et al., 2013; krishnamurthy & kollar, 2013; pasupat & liang,
2015). however, the performance of these methods still heavily depends on domain-speci   c gram-
mar or pruning strategies to ease program search. for example, in a recent work on building semantic
parsers for various domains, the authors hand-engineer a separate grammar for each domain (wang
et al., 2015).
recently, many neural network models have been developed for program induction (andreas et al.,
2016; jia & liang, 2016; reed & freitas, 2016; zaremba et al., 2016; yin et al., 2015), despite

   work done at google brain.

1

published as a conference paper at iclr 2017

figure 1: neural programmer is a neural network augmented with a set of discrete operations. the
model runs for a    xed number of time steps, selecting an operation and a column from the table at
every time step. the induced program transfers information across timesteps using the row selector
variable while the output of the model is stored in the scalar answer and lookup answer variables.

the notorious dif   culty of handling discrete operations in neural networks (joulin & mikolov, 2015;
kaiser & sutskever, 2016). most of these approaches rely on complete programs as supervision
(jia & liang, 2016; reed & freitas, 2016) while others (zaremba et al., 2016; yin et al., 2015)
have been tried only on synthetic tasks. the work that is most similar to ours is that of andreas
et al. (2016) on the dynamic neural module network. however, in their method, the neural network
is employed only to search over a small set of candidate layouts provided by the syntactic parse
of the question, and is trained using the reinforce algorithm (williams, 1992). hence, their
method cannot recover from parser errors, and it is not trivial to adapt the parser to the task at hand.
additionally, all their modules or operations are parametrized by a neural network, so it is dif   cult
to apply their method on tasks that require discrete arithmetic operations. finally, their experiments
concern a simpler dataset that requires fewer operations, and therefore a smaller search space, than
wikitablequestions which we consider in our work. we discuss other related work in section 4.
neural programmer (neelakantan et al., 2016) is a neural network augmented with a set of discrete
operations. it produces both a program, made up of those operations, and the result of running the
program against a given table. the operations make use of three variables: row selector, scalar
answer, and lookup answer, which are updated at every timestep. lookup answer and scalar answer
store answers while row selector is used to propagate information across time steps. as input, a
model receives a question along with a table (figure 1). the model runs for a    xed number of
time steps, selecting an operation and a column from the table as the argument to the operation
at each time step. during training, soft selection (bahdanau et al., 2014) is performed so that the
model can be trained end-to-end using id26. this approach allows neural programmer
to explore the search space with better sample complexity than hard selection with the reinforce
algorithm (williams, 1992) would provide. all the parameters of the model are learned from a weak
supervision signal that consists of only the    nal answer; the underlying program, which consists of
a sequence of operations and of selected columns, is latent.

2

operationscountselectargmaxargmin      ><printneural networkwhat was the total number of goals scored in 2005rowselectorscalaranswerlookupanswertimestep tcolumnselectiondata from tablerow selector from t-1operationselectiontablepublished as a conference paper at iclr 2017

in this work, we develop an approach to id29 based on neural programmer. we show
how to learn a natural language interface for answering questions using database tables, thus inte-
grating differentiable operations that are typical of neural networks with the declarative knowledge
contained in the tables and with discrete operations on tables and entries. for this purpose, we make
several improvements and adjustments to neural programmer, in particular adapting its objective
function to make it more broadly applicable.
in earlier work, neural programmer is applied only on a synthetic dataset. in that dataset, when
the expected answer is an entry in the given table, its position is explicitly marked in the table.
however, real-world datasets certainly do not include those markers, and lead to many ambiguities
(e.g., (pasupat & liang, 2015)). in particular, when the answer is a number that occurs literally
in the table, it is not known, a priori, whether the answer should be generated by an operation
or selected from the table. similarly, when the answer is a natural language phrase that occurs
in multiple positions in the table, it is not known which entry (or entries) in the table is actually
responsible for the answer. we extend neural programmer to handle the weaker supervision signal
by backpropagating through decisions that concern how the answer is generated when there is an
ambiguity.
our main experimental results concern wikitablequestions (pasupat & liang, 2015), a real-world
question-answering dataset on database tables, with only 10,000 examples for weak supervision.
this dataset is particularly challenging because of its small size and the lack of strong supervision,
and also because the tables provided at test time are never seen during training, so learning requires
adaptation at test time to unseen column names. a state-of-the-art, traditional semantic parser that
relies on pruning strategies to ease program search achieves 37.1% accuracy. standard neural net-
work models like sequence-to-sequence and id193 do not appear to be promising for this
dataset, as con   rmed in our experiments below, which yield single-digit accuracies. in compari-
son, a single neural programmer model using minimal text pre-processing, and trained end-to-end,
achieves 34.2% accuracy. this surprising result is enabled primarily by the sample ef   ciency of
neural programmer, by the enhanced objective function, and by reducing over   tting via strong reg-
ularization with dropout (srivastava et al., 2014; iyyer et al., 2015; gal & ghahramani, 2016) and
weight decay. an ensemble of 15 models, even with a trivial combination technique, achieves 37.7%
accuracy.

2 neural programmer

in this section we describe in greater detail the neural programmer model and the modi   cations
we made to the model. neural programmer is a neural network augmented with a set of discrete
operations. the model consists of four modules:

    question id56 that processes the question and converts the tokens to a distributed repre-
sentation. we use an lstm network (hochreiter & schmidhuber, 1997) as the question
id56.

    a list of discrete operations such as counting and entry selection that are manually de   ned.

each operation is parameterized by a real-valued vector that is learned during training.

    a selector module that induces two id203 distributions at every time step, one over
the set of operations and another over the set of columns. the input to the selector is
obtained by concatenating the last hidden state of the question id56, the hidden state of the
history id56 from the current timestep, and the attention vector obtained by performing
soft attention (bahdanau et al., 2014) on the question using the history vector. following
neelakantan et al. (2016), we employ hard selection at test time.

    history id56 modeled by a simple id56 (werbos, 1990) with tanh activations which re-
members the previous operations and columns selected by the model. the input to the
history id56 at each timestep is the result of concatenating the weighted representations of
operations and columns with their corresponding id203 distributions produced by the
selector at the previous timestep.

a more detailed description of the basic model can be found in neelakantan et al. (2016). the model
runs for    xed total of t timesteps. the parameters of the operations, selector module, question and

3

published as a conference paper at iclr 2017

history id56s are all learned with id26 using a weak supervision signal that consists
of the    nal answer. below, we discuss several modi   cations to the model to make it more broadly
applicable, and easier to train.

2.1 operations

we use 15 operations in the model that were chosen to closely match the set of operations used in the
baseline model (pasupat & liang, 2015). all the operations except select and most frequent entry
operate only on the set of selected rows which is given by the row selector variable. before the    rst
timestep, all the rows in the table are set to be selected. the built-in operations are:

    count returns the number of selected rows in row selector.
    select and most frequent entry are operations which are computed only once for every
question and output a boolean tensor with size same as the size of the input table. an
entry in the output of the select operation is set to 1 if the entry matches some phrase in
the question. the matched phrases in the question are anonymized to prevent over   tting.
similarly, for most frequent entry, it is set to 1 if the entry is the most frequently occurring
one in its column.
    argmax, argmin, greater than, less than, greater than or equal to, less than or equal to are
       rst, last, previous and next modify the row selector.
    print operation assigns row selector on the selected column of lookup answer.
    reset resets row selector to its initial value. this operation also serves as no-op when the

all operations that output a tensor with size same as the size of the input table.

model needs to induce programs whose complexity is less than t .

all the operations are de   ned to work with soft selection so that the model can be trained with
id26. the operations along with their de   nitions are discussed in the appendix.

2.2 output and row selector

neural programmer makes use of three variables: row selector, scalar answer and lookup answer
which are updated at every timestep. the variable lookup answer stores answers that are selected
from the table while scalar answer stores numeric answers that are not provided in the table.1 the
induced program transfers information across timesteps using the row selector variable which con-
tains rows that are selected by the model.
given an input table   , containing m rows and c columns (m and c can vary across examples),
the output variables at timestep t are given by:
scalar answert =   op
lookup answert [i][j] =   col

t (print)row selectt   1 [i],   (i, j)i = 1, 2, . . . , m, j = 1, 2, . . . , c
where   op
t (j) are the probabilities assigned by the selector to operation op and column
j at timestep t respectively and outputt(count) is the output of the count operation at timestep t.
the row selector variable at timestep t is obtained by taking the weighted average of the outputs of
the remaining operations and is discussed in the appendix. lookup answert [i][j] is the id203
that the element (i, j) in the input table is in the    nal answer predicted by the model.

t (count)outputt(count),

t (op) and   col

t (j)  op

2.3 training objective

we modify the training objective of neural programmer to handle the supervision signal available
in real-world settings. in previous work, the position of the answers are explicitly marked in the
table when the answer is an entry from the table. however, as discussed in section 1, in real-world
datasets (e.g., (pasupat & liang, 2015)) the answer is simply written down introducing two kinds
of ambiguities. first, when the answer is a number and if the number is in the table, it is not known

1it is possible to extend the model to generate natural language responses using an id56 decoder but it is

not the focus of this paper and we leave it for further work.

4

published as a conference paper at iclr 2017

whether the loss should be computed using the scalar answer variable or the lookup answer variable.
second, when the answer is a natural language phrase and if the phrase occurs in multiple positions
in the table, we again do not know which entry (or entries) in the table is actually responsible for
generating the answer. we extend neural programmer to handle this weaker supervision signal
during training by computing the loss only on the prediction that is closest to the desired response.
for scalar answers we compute the square loss:

lscalar(scalar answert , y) =

(scalar answer t     y)2

1
2

where y is the ground truth answer. we divide lscalar by the number of rows in the input table and
do not backpropagate on examples for which the loss is greater than a threshold since it leads to
instabilities in training.
when the answer is a list of items y = (a1, a2, . . . , an ), for each element in the list (ai, i =
1, 2, . . . , n) we compute all the entries in the table that match that element, given by si =
{(r, c),     (r, c)   [r][c] = ai}. we tackle the ambiguity introduced when an answer item occurs
at multiple entries in the table by computing the loss only on the entry which is assigned the highest
id203 by the model. we construct g     {0, 1}m  c, where g[i, j] indicates whether the element
(i, j) in the input table is part of the output. we compute log-loss for each entry and the    nal loss is
given by:

llookup(lookup answer t , y) =

n(cid:88)

i=1

min(r,c)   si(    log(lookup answer t [r, c]))
m(cid:88)

c(cid:88)
[g[i, j] == 0] log(1     lookup answer t [i, j])

    1
m c

i=1

j=1

where [cond] is 1 when cond is true, and 0 otherwise.
we deal with the ambiguity that occurs when the ground truth is a number and if the number also oc-
curs in the table, by computing the    nal loss as the soft minimum of lscalar and llookup. otherwise,
the loss for an example is lscalar when the ground truth is a number and llookup when the ground
truth matches some entries in the table. the two id168s lscalar and llookup are in different
scales, so we multiply llookup by a constant factor which we set to 50.0 after a small exploration in
our experiments.
since we employ hard selection at test time, only one among scalar answer and lookup answer is
modi   ed at the last timestep. we use the variable that is set at the last timestep as the    nal output of
the model.

3 experiments

we apply neural programmer on the wikitablequestions dataset (pasupat & liang, 2015) and
compare it to different non-neural baselines including a natural language semantic parser devel-
oped by pasupat & liang (2015). further, we also report results from training the sequence-to-
sequence model (sutskever et al., 2014) and a modi   ed version of the id193 (vinyals
et al., 2015). our model is implemented in tensorflow (abadi et al., 2016) and the model takes ap-
proximately a day to train on a single tesla k80 gpu. we use double-precision format to store the
model parameters since the gradients become unde   ned values in single-precision format. our code
is available at https://github.com/tensorflow/models/tree/master/neural_
programmer.

3.1 data

we use the train, development, and test split given by pasupat & liang (2015). the dataset contains
11321, 2831, and 4344 examples for training, development, and testing respectively. we use their
id121, number and date pre-processing. there are examples with answers that are neither

5

published as a conference paper at iclr 2017

dev accuracy test accuracy

information retrieval system

simple semantic parser

method
baselines from pasupat & liang (2015)
13.4
23.6
37.0

semantic parser

neural programmer

neural programmer

ensemble of 15 neural programmer models

oracle score with 15 neural programmer models

34.1
37.5
50.5

12.7
24.3
37.1

34.2
37.7

-

table 1: performance of neural programmer compared to baselines from (pasupat & liang, 2015).
the performance of an ensemble of 15 models is competitive to the current state-of-the-art natural
language semantic parser.

number answers nor phrases selected from the table. we ignore these questions during training but
the model is penalized during evaluation following pasupat & liang (2015). the tables provided in
the test set are unseen at training, hence requiring the model to adapt to unseen column names at test
time. we train only on examples for which the provided table has less than 100 rows since we run
out of gpu memory otherwise, but consider all examples at test time.

3.2 training details

we use t = 4 timesteps in our experiments. words and operations are represented as 256 dimen-
sional vectors, and the hidden vectors of the question and the history id56 are also 256 dimensional.
the parameters are initialized uniformly randomly within the range [-0.1, 0.1]. we train the model
using the adam optimizer (kingma & ba, 2014) with mini-batches of size 20. the   hyperparam-
eter in adam is set to 1e-6 while others are set to the default values. since the training set is small
compared to other datasets in which neural network models are usually applied, we rely on strong
id173:

    we clip the gradients to norm 1 and employ early-stopping.
    the occurrences of words that appear less than 10 times in the training set are replaced by

a single unknown word token.

    we add a weight decay penalty with strength 0.0001.
    we use dropout with a keep id203 of 0.8 on input and output vectors of the id56, and

selector, operation and column name representations (srivastava et al., 2014).

    we use dropout with keep id203 of 0.9 on the recurrent connections of the question

id56 and history id56 using the technique from gal & ghahramani (2016).

    we use word-dropout (iyyer et al., 2015) with keep id203 of 0.9. here, words in the

question are randomly replaced with the unknown word token while training.

we tune the dropout rates, id173 strength, and the   hyperparameter using grid search on the
development data, we    x the other hyperparameters after a small exploration during initial experi-
ments.

3.3 results

table 1 shows the performance of our model in comparison to baselines from pasupat & liang
(2015). the best result from neural programmer is achieved by an ensemble of 15 models. the
only difference among these models is that the parameters of each model is initialized with a differ-
ent random seed. we combine the models by averaging the predicted softmax distributions of the
models at every timestep. while it is generally believed that neural network models require a large
number of training examples compared to simpler linear models to get good performance, our model

6

published as a conference paper at iclr 2017

method

dev accuracy

neural programmer

neural programmer - anonymization
neural programmer - match feature

neural programmer - {dropout,weight decay}

34.1
33.7
31.1
30.3

table 2: model ablation studies. we    nd that dropout and weight decay, along with the boolean
feature indicating a matched table entry for column selection, have a signi   cant effect on the perfor-
mance of the model.

achieves competitive performance on this small dataset containing only 10,000 examples with weak
supervision.
we did not get better results either by using pre-trained word vectors (mikolov et al., 2013) or by
pre-training the question id56 with a id38 objective (dai & le, 2015). a possible
explanation is that the word vectors obtained from unsupervised learning may not be suitable to
the task under consideration. for example, the learned representations of words like maximum and
minimum from unsupervised learning are usually close to each other but for our task it is counter-
productive. we consider replacing soft selection with hard selection and training the model with the
reinforce algorithm (williams, 1992). the model fails to learn in this experiment, probably be-
cause the model has to search over millions of symbolic programs for every input question making
it highly unlikely to    nd a program that gives a reward. hence, the parameters of the model are not
updated frequently enough.

3.3.1 neural network baselines

to understand the dif   culty of the task for neural network models, we experiment with two neural
network baselines: the sequence-to-sequence model (sutskever et al., 2014) and a modi   ed version
of the id193 (vinyals et al., 2015). the input to the sequence-to-sequence model is a
concatenation of the table and the question, and the decoder produces the output one token at a time.
we consider only examples whose input length is less than 400 to make the running time reasonable.
the resulting dataset has 8, 857 and 1, 623 training and development examples respectively. the
accuracy of the best model on this development set after hyperparameter tuning is only 8.9%. next,
we experiment with id193 to select entries in the table as the    nal answer. we modify
id193 to have two-attention heads: one to select the column and the other to select entries
within a column. additionally, the model performs multiple pondering steps on the table before
returning the    nal answer. we train this model only on lookup questions, since the model does not
have a decoder to generate answers. we consider only examples whose tables have less than 100
rows resulting in training and development set consisting of 7, 534 and 1, 829 examples respectively.
the accuracy of the best model on this development set after hyperparameter tuning is only 4.0%.
these results con   rm our intuition that discrete operations are hard to learn for neural networks
particularly with small datasets in real-world settings.

3.4 analysis

3.4.1 model ablation

table 2 shows the impact of different model design choices on the    nal performance. while
anonymizing phrases in the question that match some table entry seems to have a small positive
effect, id173 has a much larger effect on the performance. column selection is performed
in neelakantan et al. (2016) using only the name of a column; however, this selection procedure is
insuf   cient in real-world settings. for example the column selected in question 3 in table 3 does
not have a corresponding phrase in the question. hence, to select a column we additionally use a
boolean feature that indicates whether an entry in that column matches some phrase in the question.
table 2 shows that the addition of this boolean feature has a signi   cant effect on performance.

7

published as a conference paper at iclr 2017

id
1

2

3

4

5

6

7

8

9

question

what is the total number of
teams?
how many games had more
than 1,500 in attendance?
is the total number
what
of runner-ups listed on the
chart?
which year held the most
competitions?
what opponent is listed last
on the table?
which section is longest??

which engine(s) has the least
amount of power?
what was
time?
who had more silver medals,
cuba or brazil?

claudia

roll   s

10 who was the next appointed
director after lee p. brown?
11 what team is listed previous

to belgium?

step 1

step 2

step 3

operation
column
operation
column
operation

column
operation
column
operation
column
operation
column
operation
column
operation
column
operation
column
operation
column
operation
column

-
-
-
-
-

-
-
-
last
-
-
-
-
-
-
-

-
-
-
-
-

-
-
-
-
-
-
-
-
-
-
-

argmax
nation
select
name
select
team

select
nation
next

-

previous

-

-
-

>=

attendance

select

step 4
count

-

count

-

count

outcome

-

mfe
year
last
-

print
year
print

opponent

argmax

kilometers

argmin
power
select

swimmer
argmax
silver
last
-

   rst

-

print
name
print
engine
print
time
print
nation
print
name
print
team

table 3: a few examples of programs induced by neural programmer that generate the correct
answer in the development set. mfe is abbreviation for the operation most frequent entry. the model
runs for 4 timesteps selecting an operation and a column at every step. the model employs hard
selection during evaluation. the column name is displayed in the table only when the operation
picked at that step takes in a column as input while the operation is displayed only when it is other
than the reset operation. programs that choose count as the    nal operation produce a number as the
   nal answer while programs that select print as the    nal operation produce entries selected from the
table as the    nal answer.

8

published as a conference paper at iclr 2017

operation

program in table 3 amount (%)

scalar answer

only count

comparison + count

select + count
scalar answer

lookup answer

most frequent entry + print

select + {   rst, last, previous, next, superlative} + print

first/last + print
superlative + print

select + print

lookup answer

1
2
3

1,2,3

4
5
6,7
8

9-11
4-11

6.5
2.1
22.1
30.7

1.7
9.5
13.5
17.5
27.1
69.3

table 4: statistics of the different sequence of operations among the examples answered correctly
by the model in the development set. for each sequence of operations in the table, we also point
to corresponding example programs in table 3. superlative operations include argmax and argmin,
while comparison operations include greater than, less than, greater than or equal to and less than
or equal to. the model induces a program that results in a scalar answer 30.7% of the time while
the induced program is a table lookup for the remaining questions. print and select are the two most
common operations used 69.3% and 66.7% of the time respectively.

3.4.2

induced programs

table 3 shows few examples of programs induced by neural programmer that yield the correct
answer in the development set. the programs given in table 3 show a few characteristics of the
learned model. first, our analysis indicates that the model can adapt to unseen column names at test
time. for example in question 3, the word outcome occurs only 8 times in the training set and is
replaced with the unknown word token. second, the model does not always induce the most ef   cient
(with respect to number of operations other than the reset operation that are picked) program to solve
a task. the last 3 questions in the table can be solved using simpler programs. finally, the model
does not always induce the correct program to get the ground truth answer. for example, the last 2
programs will not result in the correct response for all input database tables. the programs would
produce the correct response only when the select operation matches one entry in the table.

3.4.3 contribution of different operations

table 4 shows the contribution of the different operations. the model induces a program that results
in a scalar answer 30.7% of the time while the induced program is a table lookup for the remaining
questions. the two most commonly used operations by the model are print and select.

3.4.4 error analysis

to conclude this section, we suggest ideas to potentially improve the performance of the model.
first, the oracle performance with 15 neural programmer models is 50.5% on the development set
while averaging achieves only 37.5% implying that there is still room for improvement. next, the
accuracy of a single model on the training set is 53% which is about 20% higher than the accuracy
in both the development set and the test set. this difference in performance indicates that the model
suffers from signi   cant over   tting even after employing strong id173. it also suggests that
the performance of the model could be greatly improved by obtaining more training data. neverthe-
less, there are limits to the performance improvements we may reasonably expect: in particular, as
shown in previous work (pasupat & liang, 2015), 21% of questions on a random set of 200 exam-
ples in the considered dataset are not answerable because of various issues such as annotation errors
and tables requiring advanced id172.

9

published as a conference paper at iclr 2017

4 other related work

while we discuss in detail various id29 and neural program induction techniques in
section 1, here we brie   y describe other relevant work. recently, kocisky et al. (2016) develop
a semi-supervised id29 method that uses question-program pairs as supervision. con-
currently to our work, liang et al. (2016) propose neural symbolic machine, a model very similar
to neural programmer but trained using the reinforce algorithm (williams, 1992). they use
only 2 discrete operations and run for a total of 3 timesteps, hence inducing programs that are much
simpler than ours. neural networks have also been applied on question-answering datasets that do
not require much arithmetic reasoning (bordes et al., 2014; iyyer et al., 2014; sukhbaatar et al.,
2015; peng et al., 2015; hermann et al., 2015; kumar et al., 2016). wang & jiang (2016) use a neu-
ral network model to get state-of-the-art results on a reading comprehension task (rajpurkar et al.,
2016).

5 conclusion

in this paper, we enhance neural programmer to work with weaker supervision signals to make
it more broadly applicable. soft selection during training enables the model to actively explore
the space of programs by id26 with superior sample complexity. in our experiments,
we show that the model achieves performance comparable to a state-of-the-art traditional semantic
parser even though the training set contains only 10,000 examples. to our knowledge, this is the
   rst instance of a weakly supervised, end-to-end neural network model that induces programs on a
real-world dataset.

acknowledgements we are grateful to panupong pasupat for answering numerous questions
about the dataset, and providing pre-processed version of the dataset and the output of the semantic
parser. we thank david belanger, samy bengio, greg corrado, andrew dai, jeff dean, nando de
freitas, shixiang gu, navdeep jaitly, rafal jozefowicz, ashish vaswani, luke vilnis, yuan yu and
barret zoph for their suggestions and the google brain team for the support. arvind neelakantan is
supported by a google phd fellowship in machine learning.

references
mart    n abadi, ashish agarwal, paul barham, eugene brevdo, zhifeng chen, craig citro, gre-
gory s. corrado, andy davis, jeffrey dean, matthieu devin, sanjay ghemawat, ian j. good-
fellow, andrew harp, geoffrey irving, michael isard, yangqing jia, rafal j  ozefowicz, lukasz
kaiser, manjunath kudlur, josh levenberg, dan man  e, rajat monga, sherry moore, derek gor-
don murray, chris olah, mike schuster, jonathon shlens, benoit steiner, ilya sutskever, kunal
talwar, paul a. tucker, vincent vanhoucke, vijay vasudevan, fernanda b. vi  egas, oriol vinyals,
pete warden, martin wattenberg, martin wicke, yuan yu, and xiaoqiang zheng. tensor   ow:
large-scale machine learning on heterogeneous distributed systems. arxiv, 2016.

jacob andreas, marcus rohrbach, trevor darrell, and dan klein. learning to compose neural

networks for id53. naacl, 2016.

dzmitry bahdanau, kyunghyun cho, and yoshua bengio. id4 by jointly

learning to align and translate. iclr, 2014.

antoine bordes, sumit chopra, and jason weston. id53 with subgraph embeddings.

emnlp, 2014.

andrew m dai and quoc v le. semi-supervised sequence learning. nips, 2015.

yarin gal and zoubin ghahramani. a theoretically grounded application of dropout in recurrent

neural networks. nips, 2016.

karl moritz hermann, tom  as kocisk  y, edward grefenstette, lasse espeholt, will kay, mustafa

suleyman, and phil blunsom. teaching machines to read and comprehend. nips, 2015.

sepp hochreiter and j  urgen schmidhuber. long short-term memory. neural computation, 1997.

10

published as a conference paper at iclr 2017

mohit iyyer, jordan l. boyd-graber, leonardo max batista claudino, richard socher, and
hal daum  e iii. a neural network for factoid id53 over paragraphs. emnlp,
2014.

mohit iyyer, varun manjunatha, jordan boyd-graber, and hal daum  e iii. deep unordered compo-

sition rivals syntactic methods for text classi   cation. acl, 2015.

robin jia and percy liang. data recombination for neural id29. acl, 2016.

armand joulin and tomas mikolov. inferring algorithmic patterns with stack-augmented recurrent

nets. nips, 2015.

lukasz kaiser and ilya sutskever. neural gpus learn algorithms. iclr, 2016.

diederik p. kingma and jimmy ba. adam: a method for stochastic optimization. iclr, 2014.

tomas kocisky, gabor melis, edward grefenstette, chris dyer, wang ling, phil blunsom, and
karl moritz hermann. id29 with semi-supervised sequential autoencoders. arxiv,
2016.

jayant krishnamurthy and thomas kollar. jointly learning to parse and perceive: connecting natural

language to the physical world. tacl, 2013.

ankit kumar, ozan irsoy, jonathan su, james bradbury, robert english, brian pierce, peter on-
druska, ishaan gulrajani, and richard socher. ask me anything: dynamic memory networks for
natural language processing. icml, 2016.

tom kwiatkowski, eunsol choi, yoav artzi, and luke zettlemoyer. scaling semantic parsers with

on-the-   y ontology matching. emnlp, 2013.

chen liang, jonathan berant, quoc le, kenneth forbus, and ni lao. neural symbolic machines:

learning semantic parsers on freebase with weak supervision. nampi workshop, nips, 2016.

percy liang. learning executable semantic parsers for natural language understanding. acm, 2016.

percy liang, michael i. jordan, and dan klein. learning dependency-based compositional seman-

tics. acl, 2011.

tomas mikolov, kai chen, greg corrado, and jeffrey dean. ef   cient estimation of word represen-

tations in vector space. arxiv, 2013.

arvind neelakantan, quoc v. le, and ilya sutskever. neural programmer: neural programmer:

inducing latent programs with id119. iclr, 2016.

panupong pasupat and percy liang. compositional id29 on semi-structured tables.

acl, 2015.

baolin peng, zhengdong lu, hang li, and kam-fai wong. towards neural network-based reason-

ing. arxiv, 2015.

pranav rajpurkar, jian zhang, konstantin lopyrev, and percy liang. squad: 100, 000+ questions

for machine comprehension of text. arxiv, 2016.

scott reed and nando de freitas. neural programmer-interpreters. iclr, 2016.

nitish srivastava, geoffrey hinton, alex krizhevsky, ilya sutskever, and ruslan salakhutdinov.

dropout: a simple way to prevent neural networks from over   tting. jmlr, 2014.

sainbayar sukhbaatar, arthur szlam, jason weston, and rob fergus. end-to-end memory networks.

nips, 2015.

ilya sutskever, oriol vinyals, and quoc v. le. sequence to sequence learning with neural networks.

nips, 2014.

oriol vinyals, meire fortunato, and navdeep jaitly. id193. nips, 2015.

11

published as a conference paper at iclr 2017

shuohang wang and jing jiang. machine comprehension using match-lstm and answer pointer.

arxiv, 2016.

yushi wang, jonathan berant, and percy liang. building a semantic parser overnight. acl, 2015.

p. werbos. id26 through time: what does it do and how to do it. proceedings of ieee,

1990.

ronald williams. simple statistical gradient-following algorithms for connectionist reinforcement

learning. machine learning, 1992.

pengcheng yin, zhengdong lu, hang li, and ben kao. neural enquirer: learning to query tables

with natural language. arxiv, 2015.

wojciech zaremba, tomas mikolov, armand joulin, and rob fergus. learning simple algorithms

from examples. icml, 2016.

john m. zelle and raymond j. mooney. learning to parse database queries using inductive logic

programming. aaai/iaai, 1996.

luke s. zettlemoyer and michael collins. learning to map sentences to logical form: structured

classi   cation with probabilistic categorial grammars. uai, 2005.

12

published as a conference paper at iclr 2017

type

operation

aggregate

count

superlative

comparison

table ops

print
reset

argmax

argmin

>
<
   
   
select

mfe

   rst

last

previous

next
print
reset

de   nition

m(cid:80)

countt =

row selectt   1 [i]

(cid:80)m
k=1([  [i][j] <   [k][j]]    row selectt   1 [k ])), i = 1, . . . , m, j = 1, . . . , c
(cid:80)m
k=1([  [i][j] >   [k][j]]    row selectt   1 [k ])), i = 1, . . . , m, j = 1, . . . , c

maxt[i][j] = max(0.0, row selectt   1 [i]   
mint[i][j] = max(0.0, row selectt   1 [i]   

i=1

g[i][j] =   [i][j] > pivotg ,   (i, j), i = 1, . . . , m, j = 1, . . . , c
l[i][j] =   [i][j] < pivotl ,   (i, j), i = 1, . . . , m, j = 1, . . . , c
ge[i][j] =   [i][j]     pivotge ,   (i, j), i = 1, . . . , m, j = 1, . . . , c
le[i][j] =   [i][j]     pivotle ,   (i, j), i = 1, . . . , m, j = 1, . . . , c

mf e[i][j] = 1.0 if   [i][j] is the most common entry in column j else 0.0,

s[i][j] = 1.0 if   [i][j] appears in question else 0.0,

   (i, j), i = 1, . . . , m, j = 1, . . . , c
   (i, j), i = 1, . . . , m, j = 1, . . . , c

ft[i] = max(0.0, row selectt   1 [i]    (cid:80)i   1
lat[i] = max(0.0, row selectt   1 [i]    (cid:80)m

i = 1, . . . , m

j=1 row selectt   1 [j ]),

j=i+1 row selectt   1 [j ]),

pt[i] = row selectt   1 [i + 1 ], i = 1, . . . , m     1 ; pt[m ] = 0

nt[i] = row selectt   1 [i     1 ], i = 2, . . . , m ; nt[1] = 0

i = 1, . . . , m

lookup answer t[i][j] = row selectt   1 [i],   (i, j)i = 1, . . . , m, j = 1, . . . , c

rt [i] = 1,   i = 1, 2, . . . , m

table 5: list of all operations provided to the model along with their de   nitions. mfe is abbreviation
for the operation most frequent entry. [cond] is 1 when cond is true, and 0 otherwise. comparison,
select, reset and mfe operations are independent of the timestep while all the other operations are
computed at every time step. superlative operations and most frequent entry are computed within a
column. the operations calculate the expected output with the respect to the membership probabili-
ties given by the row selector so that they can work with probabilistic selection.

appendix

operations

table 5 shows the list of operations built into the model along with their de   nitions.

row selector

as discussed in section 2.3, the output variables scalar answer and lookup answer are calculated us-
ing the output of the count operations and print operation respectively. the row selector is computed
using the output of the remaining operations and is given by,

c(cid:88)

{  col

row selectort [i] =

t (j)  op

t (j)  op

t (>)g[i][j] +   col

t (j)  op
t (   )ge[i][j] +   col
t (argmax)maxt [i][j] +   col
t (j)  op
t (select)s[i][j] +   col

t (j)  op
t (j)  op
t (j)  op
t (previous)pt [i] +   op
t (f irst)ft [i] +   op

j=1
+   col
+   col
+   col
+   op
+   op
   i, i = 1, 2, . . . , m
t (j) are the probabilities assigned by the selector to operation op and column

t (<)l [i][j]
t (   )le[i][j],
t (j)  op
t (mf e)mfe[i][j]}
t (reset)rt [i]

t (next)nt [i] +   op

t (argmint)min[i][j],

t (last)lat [i]

where   op
j at timestep t respectively.

t (op) and   col

13

