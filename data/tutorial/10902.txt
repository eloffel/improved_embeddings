6
1
0
2

 

g
u
a
4

 

 
 
]

g
l
.
s
c
[
 
 

4
v
8
6
8
4
0

.

1
1
5
1
:
v
i
x
r
a

a neural transducer

navdeep jaitly
google brain

ndjaitly@google.com

david sussillo
google brain

sussillo@google.com

quoc v. le
google brain

qvl@google.com

oriol vinyals

google deepmind

vinyals@google.com

ilya sutskever

open ai   

ilyasu@openai.com

samy bengio
google brain

bengio@google.com

abstract

sequence-to-sequence models have achieved impressive results on various tasks.
however, they are unsuitable for tasks that require incremental predictions to be
made as more data arrives or tasks that have long input sequences and output
sequences. this is because they generate an output sequence conditioned on an
entire input sequence. in this paper, we present a neural transducer that can make
incremental predictions as more input arrives, without redoing the entire computa-
tion. unlike sequence-to-sequence models, the neural transducer computes the
next-step distribution conditioned on the partially observed input sequence and
the partially generated sequence. at each time step, the transducer can decide to
emit zero to many output symbols. the data can be processed using an encoder
and presented as input to the transducer. the discrete decision to emit a symbol
at every time step makes it dif   cult to learn with conventional id26.
it is however possible to train the transducer by using a id145
algorithm to generate target discrete decisions. our experiments show that the
neural transducer works well in settings where it is required to produce output
predictions as data come in. we also    nd that the neural transducer performs well
for long sequences even when attention mechanisms are not used.

1

introduction

the recently introduced sequence-to-sequence model has shown success in many tasks that map
sequences to sequences, e.g., translation, id103, image captioning and dialogue model-
ing [17, 4, 1, 6, 3, 20, 18, 15, 19]. however, this method is unsuitable for tasks where it is important
to produce outputs as the input sequence arrives. id103 is an example of such an online
task     users prefer seeing an ongoing transcription of speech over receiving it at the    end    of an
utterance. similarly, instant translation systems would be much more effective if audio was translated
online, rather than after entire utterances. this limitation of the sequence-to-sequence model is due
to the fact that output predictions are conditioned on the entire input sequence.
in this paper, we present a neural transducer, a more general class of sequence-to-sequence learning
models. neural transducer can produce chunks of outputs (possibly of zero length) as blocks of inputs
arrive - thus satisfying the condition of being    online    (see figure 1(b) for an overview). the model
generates outputs for each block by using a transducer id56 that implements a sequence-to-sequence
model. the inputs to the transducer id56 come from two sources: the encoder id56 and its own
recurrent state. in other words, the transducer id56 generates local extensions to the output sequence,

   work done at google brain

29th conference on neural information processing systems (nips 2016), barcelona, spain.

(a) id195

(b) neural transducer

figure 1: high-level comparison of our method with sequence-to-sequence models. (a) sequence-to-
sequence model [17]. (b) the neural transducer (this paper) which emits output symbols as data
come in (per block) and transfers the hidden state across blocks.

conditioned on the features computed for the block by an encoder id56 and the recurrent state of the
transducer id56 at the last step of the previous block.
during training, alignments of output symbols to the input sequence are unavailable. one way
of overcoming this limitation is to treat the alignment as a latent variable and to marginalize over
all possible values of this alignment variable. another approach is to generate alignments from a
different algorithm, and train our model to maximize the id203 of these alignments. connec-
tionist temporal classi   cation (ctc) [7] follows the former strategy using a id145
algorithm, that allows for easy marginalization over the unary potentials produced by a recurrent
neural network (id56). however, this is not possible in our model, since the neural network makes
next-step predictions that are conditioned not just on the input data, but on the alignment, and the
targets produced until the current step. in this paper, we show how a id145 algorithm,
can be used to compute "approximate" best alignments from this model. we show that training our
model on these alignments leads to strong results.
on the timit phoneme recognition task, a neural transducer (with 3 layered unidirectional lstm
encoder and 3 layered unidirectional lstm transducer) can achieve an accuracy of 20.8% phoneme
error rate (per) which is close to state-of-the-art for unidirectional models. we show too that if good
alignments are made available (e.g, from a gmm-id48 system), the model can achieve 19.8% per.

2 related work

in the past few years, many proposals have been made to add more power or    exibility to neural
networks, especially via the concept of augmented memory [10, 16, 21] or augmented arithmetic
units [13, 14]. our work is not concerned with memory or arithmetic components but it allows more
   exibility in the model so that it can dynamically produce outputs as data come in.
our work is related to traditional id170 methods, commonplace in id103.
the work bears similarity to id48-dnn [11] and ctc [7] systems. an important aspect of these
approaches is that the model makes predictions at every input time step. a weakness of these models
is that they typically assume conditional independence between the predictions at each output step.
sequence-to-sequence models represent a breakthrough where no such assumptions are made     the
output sequence is generated by next step prediction, conditioning on the entire input sequence and
the partial output sequence generated so far [5, 6, 3]. figure 1(a) shows the high-level picture of this
architecture. however, as can be seen from the    gure, these models have a limitation in that they have
to wait until the end of the speech utterance to start decoding. this property makes them unattractive
for real time id103 and online translation. bahdanau et. al. [2] attempt to rectify this for
id103 by using a moving windowed attention, but they do not provide a mechanism to
address the situation that arises when no output can be produced from the windowed segment of data.
figure 1(b) shows the difference between our method and sequence-to-sequence models.
a strongly related model is the sequence transducer [8, 9]. this model augments the ctc model
by combining the transcription model with a prediction model. the prediction model is akin to a
language model and operates only on the output tokens, as a next step prediction model. this gives

2

ylyiy2y1xlxix2x1neural networkyi-1y1<s>yl-1yl</s><e><e>xlxbw+wxbwx1y2ymencodertransducerymym+1ym+1<e>transducerwfigure 2: an overview of the neural transducer architecture for speech. the input acoustic sequence is
processed by the encoder to produce hidden state vectors hi at each time step i, i = 1       l. the transducer
receives a block of inputs at each step and produces up to m output tokens using the sequence-to-sequence model
over this input. the transducer maintains its state across the blocks through the use of recurrent connections
to the previous output time steps. the    gure above shows the transducer producing tokens for block b. the
subsequence emitted in this block is ymym+1ym+2.

the model more expressiveness compared to ctc which makes independent predictions at every time
step. however, unlike the model presented in this paper, the two models in the sequence transducer
operate independently     the model does not provide a mechanism by which the prediction network
features at one time step would change the transcription network features in the future, and vice versa.
our model, in effect both generalizes this model and the sequence to sequence model.
our formulation requires inferring alignments during training. however, our results indicate that this
can be done relatively fast, and with little loss of accuracy, even on a small dataset where no effort
was made at id173. further, if alignments are given, as is easily done of   ine for various tasks,
the model is able to train relatively fast, without this id136 step.

3 methods

in this section we describe the model in more detail. please refer to figure 2 for an overview.

3.1 model

w (cid:101) be the number of blocks.

let x1      l be the input data that is l time steps long, where xi represents the features at input time
step i. let w be the block size, i.e., the periodicity with which the transducer emits output tokens,
and n = (cid:100) l
let   y1      s be the target sequence, corresponding to the input sequence. further, let the transducer
produce a sequence of k outputs,   yi      (i+k), where 0     k < m, for any input block. each such
sequence is padded with the <e> symbol, that is added to the vocabulary. it signi   es that the
transducer may proceed and consume data from the next block. when no symbols are produced for a
block, this symbol is akin to the blank symbol of ctc.
the sequence   y1      s can be transduced from the input from various alignments. let y be the set
of all alignments of the output sequence   y1      s to the input blocks. let y1      (s+b))     y be any
such alignment. note that the length of y is b more than the length of   y, since there are b end
of block symbols, <e>, in y. however, the number of sequences y matching to   y is much larger,

3

   b   2ymym+2ym+1ym-1ym-2cmencodersm-1smsm+1ymym+1sm+2h(b-1)wsm+3h(b-1)w+1h(b-1)w+2hbwhbw+1+ym+3h   m+1h   m+2h   m+3wattentiontransducereb-1=m-1eb=m+2ym-1ym+2   1h   m-1h   mx(b-1)w+1xbwxbw+1x(b-1)w(cid:17)

(1)

|x1      b(cid:48)w , y1      eb(cid:48)   1
(cid:1)

corresponding to all possible alignments of   y to the blocks. the block that element yi is aligned
to can be inferred simply by counting the number of <e> symbols that came before index i. let,
eb, b     1       n be the index of the last token in y emitted in the bth block. note that e0 = 0 and
en = (s + b). thus yeb =<e> for each block b.

in this section, we show how to compute p(cid:0)y1      (s+b))|x1      l

(cid:1). later, in section 3.5 we show how

to compute, and maximize p (  y1      s|x1      l).
we    rst compute the id203 of l compute the id203 of seeing output sequence y1      eb by the
end of block b as follows:

p (y1      eb|x1      bw ) = p (y1      e1|x1      w )

p

y(eb(cid:48)   1+1)      e(cid:48)

b

(cid:16)

b(cid:89)

b(cid:48)=2

each of the terms in this equation is itself computed by the chain rule decomposition, i.e., for any
block b,

p(cid:0)y(eb   1+1)      eb|x1      bw , y1      eb   1

eb(cid:89)
the next step id203 terms, p(cid:0)ym|x1      bw , y1      (m   1)

(cid:1) =

m=e(b   1)+1

p(cid:0)ym|x1      bw , y1      (m   1)
(cid:1), in equation 2 are computed by the

(2)

transducer using the encoding of the input x1      bw computed by the encoder, and the label pre   x
y1      (m   1) that was input into the transducer, at previous emission steps. we describe this in more
detail in the next subsection.

3.2 next step prediction

(cid:0)sm, h((b   1)w +1)      bw ;   (cid:1)

we again refer the reader to figure 2 for this discussion. the example shows a transducer with two
hidden layers, with units sm and h(cid:48)
m at output step m. in the    gure, the next step prediction is shown
for block b. for this block, the index of the    rst output symbol is m = eb   1 + 1, and the index of the
last output symbol is m + 2 (i.e. eb = m + 2).
the transducer computes the next step prediction, using parameters,   , of the neural network through
the following sequence of steps:

m,   )

m   1, [cm; sm] ;   )

(cid:1) = fsof tmax (ym; h(cid:48)

sm = frn n (sm   1, [cm   1; ym   1] ;   )
cm = fcontext
h(cid:48)
m = frn n (h(cid:48)

p(cid:0)ym|x1      bw , y1      (m   1)
(cid:0)sm, h((b   1)w +1)      bw ;   (cid:1) is the context function, that computes the input to the trans-

(3)
(4)
(5)
(6)
where frn n (am   1, bm;   ) is the recurrent neural network function (such as an lstm or
a sigmoid or tanh id56) that computes the state vector am for a layer at a step using the
recurrent state vector am   1 at the last time step, and input bm at the current time step;2
fsof tmax (  ; am;   ) is the softmax distribution computed by a softmax layer, with input vector am;
and fcontext
ducer at output step m from the state sm at the current time step, and the features h((b   1)w +1)      bw
of the encoder for the current input block, b. we experimented with different ways of computing
the context vector     with and without an attention mechanism. these are described subsequently in
section 3.3.
note that since the encoder is an id56, h(b   1)w      bw is actually a function of the entire input, x1      bw
so far. correspondingly, sm is a function of the labels emitted so far, and the entire input seen so far.3
similarly, h(cid:48)

m is a function of the labels emitted so far and the entire input seen so far.

3.3 computing fcontext

we    rst describe how the context vector is computed by an attention model similar to earlier
work [5, 1, 3]. we call this model the mlp-attention model.

2note that for lstm, we would have to additionally factor in cell states from the previous states - we have

ignored this in the notation for purpose of clarity. the exact details are easily worked out.

3for the    rst output step of a block it includes only the input seen until the end of the last block.

4

in this model the context vector cm is in computed in two steps -    rst a normalized attention vector
  m is computed from the state sm of the transducer and next the hidden states h(b   1)w +1      bw
of the encoder for the current block are linearly combined using    and used as the context vector.
to compute   m, a multi-layer id88 computes a scalar value, em
for each pair of transducer
j
state sm and encoder h(b   1)w +j. the attention vector is computed from the scalar values, em
j ,
j = 1       w . formally:

em
j = fattention
  m = sof tmax ([em

(cid:0)sm, h(b   1)w +j;   (cid:1)
w(cid:88)

2 ;       em
w ])

1 ; em

  m
j h(b   1)w +j

cm =

(7)
(8)

(9)

j=1

j = st

mh(b   1)w +j.

we also experimented with using a simpler model for fattention that computed em
we refer to this model as dot-attention model.
both of these id12 have two shortcomings. firstly there is no explicit mechanism
that requires the attention model to move its focus forward, from one output time step to the next.
secondly, the energies computed as inputs to the softmax function, for different input frames j are
independent of each other at each time step, and thus cannot modulate (e.g., enhance or suppress)
each other, other than through the softmax function. chorowski et. al. [6] ameliorate the second
problem by using a convolutional operator that affects the attention at one time step using the attention
at the last time step.
we attempt to address these two shortcomings using a new attention mechanism. in this model,
instead of feeding [em
w ] into a softmax, we feed them into a recurrent neural network with
one hidden layer that outputs the softmax attention vector at each time step. thus the model should
be able to modulate the attention vector both within a time step and across time steps. this attention
model is thus more general than the convolutional operator of chorowski et. al. (2015), but it can
only be applied to the case where the context window size is constant. we refer to this model as
lstm-attention.

2 ;       em

1 ; em

3.4 addressing end of blocks

since the model only produces a small sequence of output tokens in each block, we have to address the
mechanism for shifting the transducer from one block to the next. we experimented with three distinct
ways of doing this. in the    rst approach, we introduced no explicit mechanism for end-of-blocks,
hoping that the transducer neural network would implicitly learn a model from the training data. in
the second approach we added end-of-block symbols, <e>, to the label sequence to demarcate the end
of blocks, and we added this symbol to the target dictionary. thus the softmax function in equation 6
implicitly learns to either emit a token, or to move the transducer forward to the next block. in the
third approach, we model moving the transducer forward, using a separate logistic function of the
attention vector. the target of the logistic function is 0 or 1 depending on whether the current step is
the last step in the block or not.

3.5 training

in this section we show how the neural transducer model can be trained.
the id203 of the output sequence   y1..s, given x1      l is as follows4:

p (  y1      s|x1      l) =

p(cid:0)y1      (s+b))|x1      l

(cid:1)

(cid:88)

y   y

(10)

in theory, we can train the model by maximizing the log of equation 10. the gradient for the log
likelihood can easily be expressed as follows:

p(cid:0)y1      (s+b))|x1      l,   y1      s

(cid:1) d

log p(cid:0)y1      (s+b)|x1      l

(cid:1)

(11)

log p (  y1      s|x1      l) =

d
d  

d  

(cid:88)

y   y

4note that this equation implicitly incorporates the prior for alignments within the equation

5

each of the latter term in the sum on the right hand side can be computed, by id26, using
y as the target of the model. however, the marginalization is intractable because of the sum over a
combinatorial number of alignments. alternatively, the gradient can be approximated by sampling

from the posterior distribution (i.e. p(cid:0)y1      (s+b))|x1      l,   y1      s

(cid:1)). however, we found this had very

large noise in the learning and the gradients were often too biased, leading to the models that rarely
achieved decent accuracy.
instead, we attempted to maximize the id203 in equation 10 by computing the sum over only one
term - corresponding to the y1      s with the highest posterior id203. unfortunately, even doing this
exactly is computationally infeasible because the number of possible alignments is combinatorially
large and the problem of    nding the best alignment cannot be decomposed to easier subproblems. so
we use an algorithm that    nds the approximate best alignment with a id145-like
algorithm that we describe in the next paragraph.
at each block, b, for each output position j, this algorithm keeps track of the approximate best
hypothesis h(j, b) that represents the best partial alignment of the input sequence   y1      j to the partial
input x1      bw . each hypothesis, keeps track of the best alignment y1      (j+b) that it represents, and
the recurrent states of the decoder at the last time step, corresponding to this alignment. at block
b + 1, all hypotheses h(j, b), j <= min (b (m     1) , s) are extended by at most m tokens using
their recurrent states, to compute h(j, b + 1), h(j + 1, b + 1)       h(j + m, b + 1)5. for each position
j(cid:48), j(cid:48) <= min ((b + 1) (m     1) , s) the highest log id203 hypothesis h(j(cid:48), b + 1) is kept6. the
alignment from the best hypothesis h(s, b) at the last block is used for training.
in theory, we need to compute the alignment for each sequence when it is trained, using the model
parameters at that time. in practice, we batch the alignment id136 steps, using parallel tasks,
and cache these alignments. thus alignments are computed less frequently than the model updates -
typically every 100-300 sequences. this procedure has the    avor of experience replay from deep
id23 work [12].

3.6

id136

for id136, given the input acoustics x1      l, and the model parameters,   , we    nd the sequence of
labels y1..m that maximizes the id203 of the labels, conditioned on the data, i.e.,

log p(cid:0)ye(b   1)+1      eb|x1      bw , y1      e(b   1)

(cid:1)

n(cid:88)

b=1

(12)

  y1      s = arg max

y1      s(cid:48) ,e1      n

exact id136 in this scheme is computationally expensive because the expression for log id203
does not permit decomposition into smaller terms that can be independently computed. instead, each
candidate, y1  s(cid:48), would have to be tested independently, and the best sequence over an exponentially
large number of sequences would have to be discovered. hence, we use a id125 heuristic to
   nd the    best    set of candidates. to do this, at each output step m, we keep a heap of alternative n
best pre   xes, and extend each one by one symbol, trying out all the possible alternative extensions,
keeping only the best n extensions. included in the id125 is the act of moving the attention to
the next input block. the id125 ends either when the sequence is longer than a pre-speci   ed
threshold, or when the end of token symbol is produced at the last block.

4 experiments and results

4.1 addition toy task

we experimented with the neural transducer on the toy task of adding two three-digit decimal
numbers. the second number is presented in the reverse order, and so is the target output. thus the
model can produce the    rst output as soon as the    rst digit of the second number is observed. the
model is able to learn this task with a very small number of units (both encoder and transducer are 1
layer unidirectional lstm id56s with 100 units).

5note the minutiae that each of these extensions ends with <e> symbol.
6we also experimented with sampling from the extensions in proportion to the probabilities, but this did not

always improve results.

6

as can be seen below, the model learns to output the digits as soon as the required information is
available. occasionally the model waits an extra step to output its target symbol. we show results
(blue) for four different examples (red). a block window size of w=1 was used, with m=8.

2
<e>
1
<e>

+
<e>
7
<e>

7
<e>
4
<e>

2

9<e>

+
<e>

5

2<e>

3
<e>

<s>
5<e>
<s>

771<e>

2
<e>
4
<e>

2
<e>
0
<e>

7
<e>
+
<e>

+
<e>
2
<e>

3
<e>
6

2<e>

<s>

032<e>

2

0<e>

<s>
3<e>

the model achieves an error rate of 0% after 500k examples.

4.2 timit

we used timit, a standard benchmark for id103, for our larger experiments. log mel
   lterbanks were computed every 10ms as inputs to the system. the targets were the 60 phones
de   ned for the timit dataset (h# were relabelled as pau).
we used stochastic id119 with momentum with a batch size of one utterance per training
step. an initial learning rate of 0.05, and momentum of 0.9 was used. the learning rate was reduced
by a factor of 0.5 every time the average log prob over the validation set decreased 7. the decrease
was applied for a maximum of 4 times. the models were trained for 50 epochs and the parameters
from the epochs with the best dev set log prob were used for decoding.
we trained a neural transducer with three layer lstm id56 coupled to a three lstm layer
unidirectional encoder id56, and achieved a per of 20.8% on the timit test set. this model
used the lstm attention mechanism. alignments were generated from a model that was updated
after every 300 steps of momentum updates. interestingly, the alignments generated by the model
are very similar to the alignments produced by a gaussian mixture model-hidden markov model
(gmm-id48) system that we trained using the kaldi toolkit     even though the model was trained
entirely discriminatively. the small differences in alignment correspond to an occasional phoneme
emitted slightly later by our model, compared to the gmm-id48 system.
we also trained models using alignments generated from the gmm-id48 model trained on kaldi.
the frame level alignments from kaldi were converted into block level alignments by assigning each
phone in the sequence to the block it was last observed in. the same architecture model described
above achieved an accuracy of 19.8% with these alignments.
we did further experiments to assess the properties of the model. in order to avoid the computation
associated with    nding the best alignments, we ran these experiments using the gmm-id48
alignments.
table 1 shows a comparison of our method against a basic implementation of a sequence-to-sequence
model that produces outputs for each block independent of the other blocks, and concatenates the
produced sequences. here, the sequence-to-sequence model produces the output conditioned on the
state of the encoder at the end of the block. both models used an encoder with two layers of 250
lstm cells, without attention. the standard sequence-to-sequence model performs signi   cantly
worse than our model     the recurrent connections of the transducer across blocks are clearly helpful
in improving the accuracy of the model.

table 1: impact of maintaining recurrent state of transducer across blocks on the per. this table shows that
maintaining the state of the transducer across blocks leads to much better results. for this experiment, a block
size (w) of 15 frames was used. the reported number is the median of three different runs.

w block-recurrence per
34.3
15
15
20.6

no
yes

figure 3 shows the impact of block size on the accuracy of the different transducer variants that we
used. see section 3.3 for a description of the {dot,mlp,lstm}-id12. all models used
a two lstm layer encoder and a two lstm layer transducer. the model is sensitive to the choice of

7note the timit provides a validation set, called the dev set. we use these terms interchangeably.

7

the block size, when no attention is used. however, it can be seen that with an appropriate choice of
window size (w=8), the neural transducer without attention can match the accuracy of the attention
based neural transducers. further exploration of this con   guration should lead to improved results.
when attention is used in the transducer, the precise value of the block size becomes less important.
the lstm-based attention model seems to be more consistent compared to the other attention
mechanisms we explored. since this model performed best with w=25, we used this con   guration
for subsequent experiments.

figure 3: impact of the number of frames (w) in a block and attention mechanism on per. figure shows the
per on the validation set as function of w, with and without the use of different types of attention mechanisms.
each number is the median value from three experiments.

table 2 explores the impact of the number of layers in the transducer and the encoder on the per.
a three layer encoder coupled to a three layer transducer performs best on average. four layer
transducers produced results with higher spread in accuracy     possibly because of the more dif   cult
optimization involved. thus, the best average per we achieved (over 3 runs) was 19.8% on the
timit test set. these results could probably be improved with other id173 techniques, as
reported by [6] but we did not pursue those avenues in this paper.

table 2: impact of architecture on per. table shows the per on the dev set as function of the number of layers
(2 or 3) in the encoder and the number of layers in the transducer (1-4).
2
19.2
18.5

# of layers in encoder / transducer

4
18.8
19.4

3
18.9
18.2

2
3

1

for a comparison with previously published sequence-to-sequence models on this task, we used a
three layer bidirectional lstm encoder with 250 lstm cells in each direction and achieved a per
of 18.7%. by contrast, the best reported results using previous sequence-to-sequence models are
17.6% [6]. however, this result comes with more careful training techniques than we attempted for
this work. given the high variance in results from run to run on timit, these numbers are quite
promising.

5 discussion

one of the important side-effects of our model using partial conditioning with a blocked transducer
is that it naturally alleviates the problem of    losing attention    suffered by sequence-to-sequence
models. because of this, sequence-to-sequence models perform worse on longer utterances [6, 3].
this problem is automatically tackled in our model because each new block automatically shifts the
attention monotonically forward. within a block, the model learns to move attention forward from
one step to the next, and the attention mechanism rarely suffers, because both the size of a block, and
the number of output steps for a block are relatively small. as a result, error in attention in one block,
has minimal impact on the predictions at subsequent blocks.
finally, we note that increasing the block size, w , so that it is as large as the input utterance makes
the model similar to vanilla end-to-end models [5, 3].

8

51015202530window size (w)1920212223242526phone error rate (per)no-attentiondot-attentionmlp-attentionlstm-attention6 conclusion

we have introduced a new model that uses partial conditioning on inputs to generate output sequences.
this allows the model to produce output as input arrives. this is useful for id103
systems and will also be crucial for future generations of online speech translation systems. further it
can be useful for performing transduction over long sequences     something that is possibly dif   cult
for sequence-to-sequence models. we applied the model to a toy task of addition, and to a phone
recognition task and showed that is can produce results comparable to the state of the art from
sequence-to-sequence models.

references
[1] dzmitry bahdanau, kyunghyun cho, and yoshua bengio. id4 by jointly learning

to align and translate. in international conference on learning representations, 2015.

[2] dzmitry bahdanau, jan chorowski, dmitriy serdyuk, philemon brakel, and yoshua bengio. end-to-end

attention-based large vocabulary id103. in http://arxiv.org/abs/1508.04395, 2015.

[3] william chan, navdeep jaitly, quoc v le, and oriol vinyals. listen, attend and spell. arxiv preprint

arxiv:1508.01211, 2015.

[4] kyunghyun cho, bart van merrienboer, caglar gulcehre, dzmitry bahdanau, fethi bougares, holger
schwen, and yoshua bengio. learning phrase representations using id56 encoder-decoder for statistical
machine translation. in conference on empirical methods in natural language processing, 2014.

[5] jan chorowski, dzmitry bahdanau, kyunghyun cho, and yoshua bengio. end-to-end continuous speech
recognition using attention-based recurrent nn: first results. in neural information processing systems:
workshop deep learning and representation learning workshop, 2014.

[6] jan chorowski, dzmitry bahdanau, dmitriy serdyuk, kyunghyun cho, and yoshua bengio. attention-

based models for id103. in neural information processing systems, 2015.

[7] alan graves, abdel-rahman mohamed, and geoffrey hinton. id103 with deep recurrent neural
networks. in acoustics, speech and signal processing (icassp), 2013 ieee international conference on,
pages 6645   6649. ieee, 2013.

[8] alex graves. sequence transduction with recurrent neural networks. in international conference on

machine learning: representation learning workshop, 2012.

[9] alex graves, abdel-rahman mohamed, and geoffrey hinton. id103 with deep recurrent
neural networks. in ieee international conference on acoustics, speech and signal processing, 2013.
[10] alex graves, greg wayne, and ivo danihelka. id63s. arxiv preprint arxiv:1410.5401,

2014.

[11] geoffrey hinton, li deng, dong yu, george e. dahl, abdel-rahman mohamed, navdeep jaitly, andrew
senior, vincent vanhoucke, patrick nguyen, tara n. sainath, and brian kingsbury. deep neural networks
for acoustic modeling in id103: the shared views of four research groups. signal processing
magazine, ieee, 29(6):82   97, 2012.

[12] volodymyr mnih, koray kavukcuoglu, david silver, alex graves, ioannis antonoglou, daan wierstra,
and martin a. riedmiller. playing atari with deep id23. corr, abs/1312.5602, 2013.
[13] arvind neelakantan, quoc v le, and ilya sutskever. neural programmer: inducing latent programs with

id119. arxiv preprint arxiv:1511.04834, 2015.

[14] scott reed and nando de freitas. neural programmer-interpreters. arxiv preprint arxiv:1511.06279,

2015.

[15] alessandro sordoni, michel galley, michael auli, chris brockett, yangfeng ji, margaret mitchell, jian-
yun nie, jianfeng gao, and bill dolan. a neural network approach to context-sensitive generation of
conversational responses. arxiv preprint arxiv:1506.06714, 2015.

[16] sainbayar sukhbaatar, jason weston, rob fergus, et al. end-to-end memory networks. in advances in

neural information processing systems, pages 2431   2439, 2015.

[17] ilya sutskever, oriol vinyals, and quoc v. le. sequence to sequence learning with neural networks. in

neural information processing systems, 2014.

[18] oriol vinyals, lukasz kaiser, terry koo, slav petrov, ilya sutskever, and geoffrey hinton. grammar as a

foreign language. in nips, 2015.

[19] oriol vinyals and quoc v. le. a neural conversational model. in icml deep learning workshop, 2015.

9

[20] oriol vinyals, alexander toshev, samy bengio, and dumitru erhan. show and tell: a neural image

caption generator. in ieee conference on id161 and pattern recognition, 2015.

[21] wojciech zaremba and ilya sutskever. id23 id63s. arxiv preprint

arxiv:1505.00521, 2015.

10

