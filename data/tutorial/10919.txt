the ubuntu dialogue corpus: a large dataset for research in

unstructured multi-turn dialogue systems

ryan lowe   *, nissan pow*, iulian v. serban    and joelle pineau*

   department of computer science and operations research, universi   de montr  al, montreal, canada

*school of computer science, mcgill university, montreal, canada

6
1
0
2

 

b
e
f
4

 

 
 
]
l
c
.
s
c
[
 
 

3
v
9
0
9
8
0

.

6
0
5
1
:
v
i
x
r
a

abstract

this paper introduces the ubuntu dia-
logue corpus, a dataset containing almost
1 million multi-turn dialogues, with a to-
tal of over 7 million utterances and 100
million words. this provides a unique re-
source for research into building dialogue
managers based on neural language mod-
els that can make use of large amounts
of unlabeled data. the dataset has both
the multi-turn property of conversations
in the dialog state tracking challenge
datasets, and the unstructured nature of in-
teractions from microblog services such
as twitter. we also describe two neural
learning architectures suitable for analyz-
ing this dataset, and provide benchmark
performance on the task of selecting the
best next response.

1

introduction

the ability for a computer to converse in a nat-
ural and coherent manner with a human has long
been held as one of the primary objectives of arti   -
cial intelligence (ai). in this paper we consider the
problem of building dialogue agents that have the
ability to interact in one-on-one multi-turn con-
versations on a diverse set of topics. we primar-
ily target unstructured dialogues, where there is
no a priori logical representation for the informa-
tion exchanged during the conversation. this is in
contrast to recent systems which focus on struc-
tured dialogue tasks, using a slot-   lling represen-
tation [10, 27, 32].

we observe that in several sub   elds of ai   
id161, id103, machine
translation   fundamental break-throughs were
achieved in recent years using machine learning

   the    rst two authors contributed equally.

methods, more speci   cally with neural architec-
tures [1]; however, it is worth noting that many
of the most successful approaches, in particular
convolutional and recurrent neural networks, were
known for many years prior.
it is therefore rea-
sonable to attribute this progress to three major
factors: 1) the public distribution of very large
rich datasets [5], 2) the availability of substantial
computing power, and 3) the development of new
training methods for neural architectures, in par-
ticular leveraging unlabeled data. similar progress
has not yet been observed in the development of
dialogue systems. we hypothesize that this is due
to the lack of suf   ciently large datasets, and aim
to overcome this barrier by providing a new large
corpus for research in multi-turn conversation.

the new ubuntu dialogue corpus consists of
almost one million two-person conversations ex-
tracted from the ubuntu chat logs1, used to receive
technical support for various ubuntu-related prob-
lems. the conversations have an average of 8 turns
each, with a minimum of 3 turns. all conversa-
tions are carried out in text form (not audio). the
dataset is orders of magnitude larger than struc-
tured corpuses such as those of the dialogue state
tracking challenge [32]. it is on the same scale as
recent datasets for solving problems such as ques-
tion answering and analysis of microblog services,
such as twitter [22, 25, 28, 33], but each conversa-
tion in our dataset includes several more turns, as
well as longer utterances. furthermore, because
it targets a speci   c domain, namely technical sup-
port, it can be used as a case study for the devel-
opment of ai agents in targeted applications, in
contrast to chatbox agents that often lack a well-
de   ned goal [26].

in addition to the corpus, we present learning
architectures suitable for analyzing this dataset,
ranging from the simple frequency-inverse docu-

1these logs are available from 2004 to 2015 at http:

//irclogs.ubuntu.com/

ment frequency (tf-idf) approach, to more so-
phisticated neural models including a recurrent
neural network (id56) and a long short-term
memory (lstm) architecture. we provide bench-
mark performance of these algorithms,
trained
with our new corpus, on the task of selecting the
best next response, which can be achieved with-
out requiring any human labeling. the dataset is
ready for public release2. the code developed for
the empirical results is also available3.

2 related work
we brie   y review existing dialogue datasets, and
some of the more recent learning architectures
used for both structured and unstructured dia-
logues. this is by no means an exhaustive list
(due to space constraints), but surveys resources
most related to our contribution. a list of datasets
discussed is provided in table 1.

2.1 dialogue datasets
the switchboard dataset [8], and the dialogue
state tracking challenge (dstc) datasets [32]
have been used to train and validate dialogue man-
agement systems for interactive information re-
trieval. the problem is typically formalized as a
slot    lling task, where agents attempt to predict
the goal of a user during the conversation. these
datasets have been signi   cant resources for struc-
tured dialogues, and have allowed major progress
in this    eld, though they are quite small compared
to datasets currently used for training neural archi-
tectures.

recently, a few datasets have been used con-
taining unstructured dialogues extracted from
twitter4. ritter et al. [21] collected 1.3 million
conversations; this was extended in [28] to take ad-
vantage of longer contexts by using a-b-a triples.
shang et al. [25] used data from a similar chinese
website called weibo5. however to our knowl-
edge, these datasets have not been made public,
and furthermore, the post-reply format of such mi-
croblogging services is perhaps not as represen-
tative of natural dialogue between humans as the
continuous stream of messages in a chat room. in

2note that a new version of

is now
available:
https://github.com/rkadlec/
ubuntu-ranking-dataset-creator.
this ver-
sion makes some adjustments and    xes some bugs from the
   rst version.

the dataset

3http://github.com/npow/ubottu
4https://twitter.com/
5http://www.weibo.com/

fact, ritter et al. estimate that only 37% of posts
on twitter are    conversational in nature   , and 69%
of their collected data contained exchanges of only
length 2 [21]. we hypothesize that chat-room style
messaging is more closely correlated to human-to-
human dialogue than micro-blogging websites, or
forum-based sites such as reddit.

part of the ubuntu chat logs have previously
been aggregated into a dataset, called the ubuntu
chat corpus [30]. however that resource pre-
serves the multi-participant structure and thus is
less amenable to the investigation of more tradi-
tional two-party conversations.

also weakly related to our contribution is the
problem of question-answer systems.
several
datasets of question-answer pairs are available [3],
however these interactions are much shorter than
what we seek to study.

2.2 learning architectures

most dialogue research has historically focused
on structured slot-   lling tasks [24]. various ap-
proaches were proposed, yet few attempts lever-
age more recent developments in neural learning
architectures. a notable exception is the work of
henderson et al. [11], which proposes an id56
structure, initialized with a denoising autoencoder,
to tackle the dstc 3 domain.

work on unstructured dialogues, recently pi-
oneered by ritter et al. [22], proposed a re-
sponse generation model for twitter data based on
ideas from id151. this
is shown to give superior performance to previ-
ous information retrieval (e.g. nearest neighbour)
approaches [14]. this idea was further devel-
oped by sordoni et al. [28] to exploit information
from a longer context, using a structure similar to
the recurrent neural network encoder-decoder
model [4]. this achieves rather poor performance
on a-b-a twitter triples when measured by the
id7 score (a standard for machine translation),
yet performs comparatively better than the model
of ritter et al. [22]. their results are also veri   ed
with a human-subject study. a similar encoder-
decoder framework is presented in [25]. this
model uses one id56 to transform the input to
some vector representation, and another id56 to
   decode    this representation to a response by gen-
erating one word at a time. this model is also eval-
uated in a human-subject study, although much
smaller in size than in [28]. overall, these models

dataset
switchboard [8]

dstc1 [32]

dstc2 [10]

dstc3 [9]

dstc4[13]

twitter
corpus [21]
twitter triple
corpus [28]
sina weibo [25]

ubuntu dialogue
corpus

human-human

human-computer

human-computer

human-computer

type

spoken

spoken

spoken

spoken

spoken

human-human

human-human

micro-blog

human-human

micro-blog

human-human

micro-blog

human-human

chat

task
various

state

tracking

state

tracking

state

tracking

state

tracking

next utterance

generation

next utterance

generation

next utterance

generation

next utterance
classi   cation

# dialogues

# utterances

2,400

15,000

3,000

2,265

35

   

210,000

24,000

15,000

   

1,300,000

3,000,000

29,000,000

87,000,000

4,435,959

8,871,918

# words
3,000,000

   

   

   

   

   

   

930,000

7,100,000

100,000,000

description
telephone conversations
on pre-speci   ed topics
bus ride information
system
restaurant booking
system
tourist information
system
21 hours of tourist info
exchange over skype
post/ replies extracted
from twitter
a-b-a triples from
twitter replies
post/ reply pairs extracted
from weibo
extracted from ubuntu
chat logs

table 1: a selection of structured and unstructured large-scale datasets applicable to dialogue systems.
faded datasets are not publicly available. the last entry is our contribution.

highlight the potential of neural learning architec-
tures for interactive systems, yet so far they have
been limited to very short conversations.

3 the ubuntu dialogue corpus

we seek a large dataset for research in dialogue
systems with the following properties:
    two-way (or dyadic) conversation, as op-
posed to multi-participant chat, preferably
human-human.
    large number of conversations; 105     106
is typical of datasets used for neural-network
learning in other areas of ai.
    many conversations with several turns (more
    task-speci   c domain, as opposed to chatbot

than 3).

systems.

all of these requirements are satis   ed by the
ubuntu dialogue corpus presented in this paper.

3.1 ubuntu chat logs
the ubuntu chat logs refer to a collection of logs
from ubuntu-related chat rooms on the freenode
internet relay chat (irc) network. this protocol
allows for real-time chat between a large number
of participants. each chat room, or channel, has
a particular topic, and every channel participant
can see all the messages posted in a given chan-
nel. many of these channels are used for obtaining
technical support with various ubuntu issues.

as the contents of each channel are moderated,
most interactions follow a similar pattern. a new
user joins the channel, and asks a general ques-
tion about a problem they are having with ubuntu.
then, another more experienced user replies with

a potential solution, after    rst addressing the    user-
name    of the    rst user. this is called a name men-
tion [29], and is done to avoid confusion in the
channel     at any given time during the day, there
can be between 1 and 20 simultaneous conversa-
tions happening in some channels.
in the most
popular channels, there is almost never a time
when only one conversation is occurring; this ren-
ders it particularly problematic to extract dyadic
dialogues. a conversation between a pair of users
generally stops when the problem has been solved,
though some users occasionally continue to dis-
cuss a topic not related to ubuntu.

despite the nature of the chat room being a con-
stant stream of messages from multiple users, it is
through the fairly rigid structure in the messages
that we can extract the dialogues between users.
figure 4 shows an example chat room conversa-
tion from the #ubuntu channel as well as the ex-
tracted dialogues, which illustrates how users usu-
ally state the username of the intended message
recipient before writing their reply (we refer to all
replies and initial questions as    utterances   ). for
example, it is clear that users    taru    and    kuja   
are engaged in a dialogue, as are users    old    and
   bur[n]er   , while user    _pm    is asking an initial
question, and    livecd    is perhaps elaborating on
a previous comment.

3.2 dataset creation
in order to create the ubuntu dialogue corpus,
   rst a method had to be devised to extract dyadic
dialogues from the chat room multi-party conver-
sations. the    rst step was to separate every mes-
sage into 4-tuples of (time, sender, recipient, utter-
ance). given these 4-tuples, it is straightforward to

group all tuples where there is a matching sender
and recipient. although it is easy to separate the
time and the sender from the rest,    nding the in-
tended recipient of the message is not always triv-
ial.
3.2.1 recipient identi   cation
while in most cases the recipient is the    rst word
of the utterance, it is sometimes located at the end,
or not at all in the case of initial questions. fur-
thermore, some users choose names correspond-
ing to common english words, such as    the    or
   stop   , which could lead to many false positives.
in order to solve this issue, we create a dictionary
of usernames from the current and previous days,
and compare the    rst word of each utterance to its
entries.
if a match is found, and the word does
not correspond to a very common english word6,
it is assumed that this user was the intended recip-
ient of the message. if no matches are found, it is
assumed that the message was an initial question,
and the recipient value is left empty.
3.2.2 utterance creation
the dialogue extraction algorithm works back-
wards from the    rst response to    nd the initial
question that was replied to, within a time frame
of 3 minutes. a    rst response is identi   ed by the
presence of a recipient name (someone from the
recent conversation history). the initial question
is identi   ed to be the most recent utterance by the
recipient identi   ed in the    rst response.

all utterances that do not qualify as a    rst re-
sponse or an initial question are discarded; initial
questions that do not generate any response are
also discarded. we additionally discard conversa-
tions longer than    ve utterances where one user
says more than 80% of the utterances, as these are
typically not representative of real chat dialogues.
finally, we consider only extracted dialogues that
consist of 3 turns or more to encourage the model-
ing of longer-term dependencies.

to alleviate the problem of    holes    in the dia-
logue, where one user does not address the other
explicitly, as in figure 5, we check whether each
user talks to someone else for the duration of their
conversation. if not, all non-addressed utterances
are added to the dialogue. an example conversa-
tion along with the extracted dialogues is shown
in figure 5. note that we also concatenate all con-
secutive utterances from a given user.

6we use the gnu aspell spell checking dictionary.

figure 1: plot of number of conversations with a
given number of turns. both axes use a log scale.

# dialogues (human-human)

# utterances (in total)

# words (in total)

min. # turns per dialogue
avg. # turns per dialogue
avg. # words per utterance

median conversation length (min)

930,000
7,100,000
100,000,000

7.71
10.34

3

6

table 2: properties of ubuntu dialogue corpus.

we do not apply any further pre-processing (e.g.
id121, id30) to the data as released in
the ubuntu dialogue corpus. however the use of
pre-processing is standard for most nlp systems,
and was also used in our analysis (see section 4.)

3.2.3 special cases and limitations
it is often the case that a user will post an ini-
tial question, and multiple people will respond to
it with different answers.
in this instance, each
conversation between the    rst user and the user
who replied is treated as a separate dialogue. this
has the unfortunate side-effect of having the ini-
tial question appear multiple times in several dia-
logues. however the number of such cases is suf-
   ciently small compared to the size of the dataset.
another issue to note is that the utterance post-
ing time is not considered for segmenting conver-
sations between two users. even if two users have
a conversation that spans multiple hours, or even
days, this is treated as a single dialogue. however,
such dialogues are rare. we include the posting
time in the corpus so that other researchers may
   lter as desired.

3.3 dataset statistics
table 2 summarizes properties of the ubuntu dia-
logue corpus. one of the most important features

of the ubuntu chat logs is its size. this is cru-
cial for research into building dialogue managers
based on neural architectures. another important
characteristic is the number of turns in these dia-
logues. the distribution of the number of turns is
shown in figure 1. it can be seen that the num-
ber of dialogues and turns per dialogue follow an
approximate power law relationship.

3.4 test set generation
we set aside 2% of the ubuntu dialogue corpus
conversations (randomly selected) to form a test
set that can be used for evaluation of response se-
lection algorithms. compared to the rest of the
corpus, this test set has been further processed to
extract a pair of (context, response,    ag) triples
from each dialogue. the    ag is a boolean vari-
able indicating whether or not the response was the
actual next utterance after the given context. the
response is a target (output) utterance which we
aim to correctly identify. the context consists of
the sequence of utterances appearing in dialogue
prior to the response. we create a pair of triples,
where one triple contains the correct response (i.e.
the actual next utterance in the dialogue), and the
other triple contains a false response, sampled ran-
domly from elsewhere within the test set. the    ag
is set to 1 in the    rst case and to 0 in the second
case. an example pair is shown in table 3. to
make the task harder, we can move from pairs of
responses (one correct, one incorrect) to a larger
set of wrong responses (all with    ag=0). in our
experiments below, we consider both the case of 1
wrong response and 10 wrong responses.

context
well, can i move the drives?
__eos__ ah not like that

well, can i move the drives?
__eos__ ah not like that

response
i guess i could just
get an enclosure and
copy via usb
you can use "ps ax"
and "kill (pid #)"

flag

1

0

table 3: test set example with (context, reply,
   ag) format. the    __eos__    tag is used to denote
the end of an utterance within the context.

since we want to learn to predict all parts of a
conversation, as opposed to only the closing state-
ment, we consider various portions of context for
the conversations in the test set. the context size is
determined stochastically using a simple formula:

c = min(t     1, n     1),

here, c denotes the maximum desired context
size, which we set to c = 20. the last term is
the desired minimum context size, which we set
to be 2. parameter t is the actual length of that
dialogue (thus the constraint that c     t     1), and
n is a random number corresponding to the ran-
domly sampled context length, that is selected to
be inversely proportional to c.

in practice, this leads to short test dialogues
having short contexts, while longer dialogues are
often broken into short or medium-length seg-
ments, with the occasional long context of 10 or
more turns.

3.5 evaluation metric
we consider the task of best response selection.
this can be achieved by processing the data as de-
scribed in section 3.4, without requiring any hu-
man labels. this classi   cation task is an adapta-
tion of the recall and precision metrics previously
applied to dialogue datasets [24].

a family of metrics often used in language tasks
is recall@k (denoted r@1 r@2, r@5 below).
here the agent is asked to select the k most likely
responses, and it is correct if the true response is
among these k candidates. only the r@1 metric
is relevant in the case of binary classi   cation (as
in the table 3 example).

although a language model that performs well
on response classi   cation is not a gauge of good
performance on next utterance generation, we hy-
pothesize that improvements on a model with re-
gards to the classi   cation task will eventually lead
to improvements for the generation task. see sec-
tion 6 for further discussion of this point.

4 learning architectures for

unstructured dialogues

to provide further evidence of the value of
our dataset for research into neural architectures
for dialogue managers, we provide performance
benchmarks for two neural learning algorithms, as
well as one naive baseline. the approaches con-
sidered are: tf-idf, recurrent neural networks
(id56), and long short-term memory (lstm).
prior to applying each method, we perform stan-
dard pre-processing of the data using the nltk7
library and twitter tokenizer8 to parse each utter-
ance. we use generic tags for various word cat-

where n =

10c

  

+ 2,        u nif (c/2, 10c)

7www.nltk.org/
8http://www.ark.cs.cmu.edu/tweetnlp/

egories, such as names, locations, organizations,
urls, and system paths.

to train the id56 and lstm architectures, we
process the full training ubuntu dialogue corpus
into the same format as the test set described in
section 3.4, extracting (context, response,    ag)
triples from dialogues. for the training set, we
do not sample the context length, but instead con-
sider each utterance (starting at the 3rd one) as a
potential response, with the previous utterances as
its context. so a dialogue of length 10 yields 8
training examples. since these are overlapping,
they are clearly not independent, but we consider
this a minor issue given the size of the dataset (we
further alleviate the issue by shuf   ing the training
examples). negative responses are selected at ran-
dom from the rest of the training data.

4.1 tf-idf
term frequency-inverse document frequency is a
statistic that intends to capture how important a
given word is to some document, which in our case
is the context [20]. it is a technique often used in
document classi   cation and information retrieval.
the    term-frequency    term is simply a count of the
number of times a word appears in a given context,
while the    inverse document frequency    term puts
a penalty on how often the word appears elsewhere
in the corpus. the    nal score is calculated as the
product of these two terms, and has the form:

t   df(w, d, d) = f (w, d)  log

n

|{d     d : w     d}| ,

where f (w, d) indicates the number of times word
w appeared in context d, n is the total number
of dialogues, and the denominator represents the
number of dialogues in which the word w appears.
for classi   cation, the tf-idf vectors are    rst
calculated for the context and each of the candi-
date responses. given a set of candidate response
vectors, the one with the highest cosine similarity
to the context vector is selected as the output. for
recall@k, the top k responses are returned.

4.2 id56
recurrent neural networks are a variant of neural
networks that allows for time-delayed directed cy-
cles between units [17]. this leads to the forma-
tion of an internal state of the network, ht, which
allows it to model time-dependent data. the in-
ternal state is updated at each time step as some

figure 2: diagram of our model. the id56s have
tied weights. c, r are the last hidden states from
the id56s. ci, ri are word vectors for the context
and response, i < t. we consider contexts up to a
maximum of t = 160.

function of the observed variables xt, and the hid-
den state at the previous time step ht   1. wx and
wh are matrices associated with the input and hid-
den state.

ht = f (whht   1 + wxxt).

a diagram of an id56 can be seen in figure 2.
id56s have been the primary building block of
many current neural language models [22, 28],
which use id56s for an encoder and decoder. the
   rst id56 is used to encode the given context,
and the second id56 generates a response by us-
ing beam-search, where its initial hidden state is
biased using the    nal hidden state from the    rst
id56. in our work, we are concerned with classi-
   cation of responses, instead of generation. we
build upon the approach in [2], which has also
been recently applied to the problem of question
answering [33].

we utilize a siamese network consisting of two
id56s with tied weights to produce the embed-
dings for the context and response. given some
input context and response, we compute their em-
beddings     c, r     rd, respectively     by feeding
the id27s one at a time into its respec-
tive id56. id27s are initialized using
the pre-trained vectors (common crawl, 840b to-
kens from [19]), and    ne-tuned during training.
the hidden state of the id56 is updated at each
step, and the    nal hidden state represents a sum-
mary of the input utterance. using the    nal hid-
den states from both id56s, we then calculate the
id203 that this is a valid pair:

p(   ag = 1|c, r, m ) =   (ct m r + b),

l =    (cid:88)

n

where the bias b and the matrix m     rd  d are
learned model parameters. this can be thought
of as a generative approach; given some input re-
sponse, we generate a context with the product
c(cid:48) = m r, and measure the similarity to the actual
context using the dot product. this is converted
to a id203 with the sigmoid function. the
model is trained by minimizing the cross id178
of all labeled (context, response) pairs [33]:

log p(   agn|cn, rn, m ) +

||   = ||2

f

  
2

where ||  ||2
f is the frobenius norm of    = {m, b}.
in our experiments, we use    = 0 for computa-
tional simplicity.

for training, we used a 1:1 ratio between true re-
sponses (   ag = 1), and negative responses (   ag=0)
drawn randomly from elsewhere in the training
set. the id56 architecture is set to 1 hidden layer
with 50 neurons. the wh matrix is initialized us-
ing orthogonal weights [23], while wx is initial-
ized using a uniform distribution with values be-
tween -0.01 and 0.01. we use adam as our opti-
mizer [15], with gradients clipped to 10. we found
that weight initialization as well as the choice of
optimizer were critical for training the id56s.

4.3 lstm
in addition to the id56 model, we consider the
same architecture but changed the hidden units
to long-short term memory (lstm) units [12].
lstms were introduced in order to model longer-
term dependencies. this is accomplished using a
series of gates that determine whether a new in-
put should be remembered, forgotten (and the old
value retained), or used as output. the error sig-
nal can now be fed back inde   nitely into the gates
of the lstm unit. this helps overcome the van-
ishing and exploding gradient problems in stan-
dard id56s, where the error gradients would oth-
erwise decrease or increase at an exponential rate.
in training, we used 1 hidden layer with 200 neu-
rons. the hyper-parameter con   guration (includ-
ing number of neurons) was optimized indepen-
dently for id56s and lstms using a validation
set extracted from the training data.

5 empirical results
the results for the tf-idf, id56, and lstm mod-
els are shown in table 4. the models were eval-
uated using both 1 (1 in 2) and 9 (1 in 10) false

examples. of course, the recall@2 and recall@5
are not relevant in the binary classi   cation case9.

method

1 in 2 r@1
1 in 10 r@1
1 in 10 r@2
1 in 10 r@5

tf-idf
id56 lstm
65.9% 76.8% 87.8%
41.0% 40.3% 60.4%
54.5% 54.7% 74.5%
70.8% 81.9% 92.6%

table 4: results for the three algorithms using var-
ious recall measures for binary (1 in 2) and 1 in 10
(1 in 10) next utterance classi   cation %.

we observe that the lstm outperforms both
the id56 and tf-idf on all id74.
it is interesting to note that tf-idf actually out-
performs the id56 on the recall@1 case for the
1 in 10 classi   cation. this is most likely due to
the limited ability of the id56 to take into account
long contexts, which can be overcome by using the
lstm. an example output of the lstm where the
response is correctly classi   ed is shown in table 5.
we also show, in figure 3, the increase in per-
formance of the lstm as the amount of data used
for training increases. this con   rms the impor-
tance of having a large training set.

context
""any apache hax around ? i just deleted all of
__path__ - which package provides it ?",
"recon   guring apache do n   t solve it ?"
ranked responses
1. "does n   t seem to, no"
2. "you can log in but not transfer    les ?"

flag

1
0

table 5: example showing the ranked responses
from the lstm. each utterance is shown after pre-
processing steps.

6 discussion

this paper presents the ubuntu dialogue corpus,
a large dataset for research in unstructured multi-
turn dialogue systems. we describe the construc-
tion of the dataset and its properties. the availabil-
ity of a dataset of this size opens up several inter-
esting possibilities for research into dialogue sys-
tems based on rich neural-network architectures.
we present preliminary results demonstrating use
of this dataset to train an id56 and an lstm for
the task of selecting the next best response in a

9note that these results are on the original dataset. results
on the new dataset should not be compared to the old dataset;
baselines on the new dataset will be released shortly.

6.3 state tracking and utterance generation
the work described here focuses on the task of re-
sponse selection. this can be seen as an interme-
diate step between slot    lling and utterance gener-
ation. in slot    lling, the set of candidate outputs
(states) is identi   ed a priori through knowledge
engineering, and is typically smaller than the set
of responses considered in our work. when the
set of candidate responses is close to the size of
the dataset (e.g. all utterances ever recorded), then
we are quite close to the response generation case.
there are several reasons not to proceed directly
to response generation. first, it is likely that cur-
rent algorithms are not yet able to generate good
results for this task, and it is preferable to tackle
metrics for which we can make progress. second,
we do not yet have a suitable metric for evaluat-
ing performance in the response generation case.
one option is to use the id7 [18] or meteor
[16] scores from machine translation. however,
using id7 to evaluate dialogue systems has been
shown to give extremely low scores [28], due to
the large space of potential sensible responses [7].
further, since the id7 score is calculated us-
ing id165s [18], it would provide a very low
score for reasonable responses that do not have
any words in common with the ground-truth next
utterance.

alternatively, one could measure the difference
between the generated utterance and the actual
sentence by comparing their representations in
some embedding (or semantic) space. however,
different models inevitably use different embed-
dings, necessitating a standardized embedding for
evaluation purposes. such a standardized embed-
dings has yet to be created.

another possibility is to use human subjects to
score automatically generated responses, but time
and expense make this a highly impractical option.
in summary, while it is possible that current lan-
guage models have outgrown the use of slot    ll-
ing as a metric, we are currently unable to mea-
sure their ability in next utterance generation in
a standardized, meaningful and inexpensive way.
this motivates our choice of response selection as
a useful metric for the time being.

acknowledgments

the authors gratefully acknowledge    nancial sup-
port for this work by the samsung advanced
institute of technology (sait) and the natural

figure 3: the lstm (with 200 hidden units),
showing recall@1 for the 1 in 10 classi   cation,
with increasing dataset sizes.

conversation; we obtain signi   cantly better results
with the lstm architecture. there are several in-
teresting directions for future work.

6.1 conversation disentanglement

our approach to conversation disentanglement
consists of a small set of rules. more sophisticated
techniques have been proposed, such as training a
maximum-id178 classi   er to cluster utterances
into separate dialogues [6]. however, since we
are not trying to replicate the exact conversation
between two users, but only to retrieve plausible
natural dialogues, the heuristic method presented
in this paper may be suf   cient. this seems sup-
ported through qualitative examination of the data,
but could be the subject of more formal evaluation.

6.2 altering test set dif   culty

one of the interesting properties of the response
selection task is the ability to alter the task dif-
   culty in a controlled manner. we demonstrated
this by moving from 1 to 9 false responses, and
by varying the recall@k parameter. in the future,
instead of choosing false responses randomly, we
will consider selecting false responses that are
similar to the actual response (e.g. as measured by
cosine similarity). a dialogue model that performs
well on this more dif   cult task should also manage
to capture a more    ne-grained semantic meaning
of sentences, as compared to a model that naively
picks replies with the most words in common with
the context such as tf-idf.

sciences and engineering research council of
canada (nserc). we would like to thank lau-
rent charlin for his input into this paper, as well as
gabriel forgues and eric crawford for interesting
discussions.

references

[1] y. bengio, a. courville, and p. vincent.
representation learning: a review and new
pattern analysis and ma-
perspectives.
chine intelligence, ieee transactions on,
35(8):1798   1828, 2013.

[2] a. bordes, j. weston, and n. usunier. open
id53 with weakly supervised
embedding models. in mlkdd, pages 165   
180. springer, 2014.
j. boyd-graber, b. satinoff, h. he, and
h. daume. besting the quiz master: crowd-
sourcing incremental classi   cation games. in
emnlp, 2012.

[3]

[4] k. cho, b. van merrienboer, c. gulcehre,
f. bougares, h. schwenk, and y. ben-
gio. learning phrase representations using
id56 encoder-decoder for statistical machine
translation. arxiv preprint arxiv:1406.1078,
2014.
j. deng, w. dong, r. socher, l.j. li, k. li,
and l. fei-fei. id163: a large-scale hier-
archical image database. in cvpr, 2009.

[5]

[6] m. elsner and e. charniak. you talking to
me? a corpus and algorithm for conversa-
in acl, pages 834   
tion disentanglement.
842, 2008.

[7] m. galley, c. brockett, a. sordoni, y. ji,
m. auli, c. quirk, m. mitchell, j. gao, and
b. dolan. deltaid7: a discriminative metric
for generation tasks with intrinsically diverse
arxiv preprint arxiv:1506.06863,
targets.
2015.
j.j. godfrey, e.c. holliman, and j. mc-
daniel.
switchboard: telephone speech
corpus for research and development.
in
icassp, 1992.

[8]

[9] m. henderson, b. thomson, and j. williams.
dialog state tracking challenge 2 & 3, 2014.
[10] m. henderson, b. thomson, and j. williams.
the second dialog state tracking challenge.
in sigdial, page 263, 2014.

[11] m. henderson, b. thomson, and s. young.
word-based dialog state tracking with recur-

rent neural networks. in sigdial, page 292,
2014.

[12] s. hochreiter and j. schmidhuber. long
short-term memory. neural computation,
9(8):1735   1780, 1997.

[13] dialog state tracking challenge 4.
[14] s. jafarpour, c. burges, and a. ritter. filter,
rank, and transfer the knowledge: learning
to chat. advances in ranking, 10, 2010.

[15] d.p. kingma and j. ba.

adam: a
method for stochastic optimization. corr,
abs/1412.6980, 2014.

[16] a. lavie and m.j. denkowski. the me-
teor metric for automatic evaluation of
machine translation. machine translation,
23(2-3):105   115, 2009.

[17] l.r. medsker and l.c. jain. recurrent neu-
ral networks. design and applications, 2001.
[18] k. papineni, s. roukos, t. ward, and w.j.
zhu. id7: a method for automatic evalua-
tion of machine translation. in acl, 2002.

[19] j. pennington, r. socher, and c.d. manning.
glove: global vectors for word representa-
tion. in emnlp, 2014.

[20] j. ramos. using tf-idf to determine word rel-
evance in document queries. in icml, 2003.
[21] a. ritter, c. cherry, and w. dolan. unsu-
pervised modeling of twitter conversations.
2010.

[22] a. ritter, c. cherry, and w. dolan. data-
driven response generation in social media.
in emnlp, pages 583   593, 2011.

[23] a.m. saxe, j.l. mcclelland, and s. ganguli.
exact solutions to the nonlinear dynamics
of learning in deep linear neural networks.
arxiv preprint arxiv:1312.6120, 2013.

[24] j. schatzmann, k. georgila, and s. young.
quantitative evaluation of user simulation
techniques for spoken dialogue systems. in
sigdial, 2005.

[25] l. shang, z. lu, and h. li.

neural
responding machine for short-text conver-
arxiv preprint arxiv:1503.02364,
sation.
2015.

[26] b. a. shawar and e. atwell. chatbots: are
in ldv forum, vol-

they really useful?
ume 22, pages 29   49, 2007.

[27] s. singh, d. litman, m. kearns, and
m. walker. optimizing dialogue manage-
ment with id23: experi-
ments with the njfun system. journal of

arti   cial intelligence research, 16:105   133,
2002.

[28] a. sordoni, m. galley, m. auli, c. brock-
ett, y. ji, m. mitchell, j.y. nie, j. gao,
and w. dolan. a neural network approach
to context-sensitive generation of conversa-
tional responses. 2015.

[29] d.c. uthus and d.w. aha. extending word
highlighting in multiparticipant chat. tech-
nical report, dtic document, 2013.

[30] d.c. uthus and d.w aha. the ubuntu chat
corpus for multiparticipant chat analysis. in
aaai spring symposium on analyzing mi-
crotext, pages 99   102, 2013.

[31] h. wang, z. lu, h. li, and e. chen. a
dataset for research on short-text conversa-
tions. in emnlp, 2013.

[32] j. williams, a. raux, d. ramachandran, and
a. black. the dialog state tracking chal-
lenge. in sigdial, pages 404   413, 2013.

[33] l. yu, k. m. hermann, p. blunsom,
deep learning for an-
arxiv preprint

and s. pulman.
swer sentence selection.
arxiv:1412.1632, 2014.

[34] m.d. zeiler.

adadelta:

learning rate method.
arxiv:1212.5701, 2012.

an adaptive
arxiv preprint

appendix a: dialogue excerpts

time
03:44

03:45
03:45
03:45

03:45

03:45
03:45
03:45

03:46

03:46
sender

old

bur[n]er

kuja
taru
kuja

taru
kuja

taru

user
old

kuja
taru

bur[n]er

kuja

taru

livecd

kuja

_pm

taru
recipient

old

taru
kuja
taru

kuja
taru

kuja

utterance
i dont run graphical ubuntu,
i run ubuntu server.
taru: haha sucker.
kuja: ?
old: you can use "ps ax"
and "kill (pid#)"
taru: anyways, you made
the changes right?
kuja: yes.
or killall speedlink
taru: then from the terminal
type: sudo apt-get update
if i install the beta version,
how can i update it when
the    nal version comes out?
kuja: i did.
utterance
i dont run graphical ubuntu,
i run ubuntu server.
you can use "ps ax" and
"kill (pid#)"
haha sucker.
?
anyways, you made the
changes right?
yes.
then from the terminal type:
sudo apt-get update
i did.

figure 4: example chat room conversation from
the #ubuntu channel of the ubuntu chat logs
(top), with the disentangled conversations for the
ubuntu dialogue corpus (bottom).

time
[12:21]
[12:21]
[12:21]
[12:21]
[12:21]
[12:21]
[12:21]
[12:21]
[12:22]

user
dell
cucho
rc
rc
dell
dell
rc
dell
dell

[12:22]

cucho

sender

recipient

dell
cucho
dell

cucho

dell
rc

dell

dell
cucho

dell

dell

rc

utterance
well, can i move the drives?
dell: ah not like that
dell: you can   t move the drives
dell: de   nitely not
ok
lol
this is the problem with raid:)
rc haha yeah
cucho, i guess i could
just get an enclosure
and copy via usb...
dell: i would advise you to get
the disk

utterance
well, can i move the drives?
ah not like that
i guess i could just get an
enclosure and copy via usb
i would advise you to get the
disk
well, can i move the drives?
you can   t move the drives.
de   nitely not. this is
the problem with raid :)
haha yeah

figure 5: example of before (top box) and after
(bottom box) the algorithm adds and concatenates
utterances in dialogue extraction. since rc only
addresses dell, all of his utterances are added,
however this is not done for dell as he addresses
both rc and cucho.

