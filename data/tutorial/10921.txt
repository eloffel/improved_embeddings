learning from real users: rating dialogue success with neural networks for

id23 in spoken dialogue systems

pei-hao su, david vandyke, milica ga  si  c, dongho kim,

nikola mrk  si  c, tsung-hsien wen and steve young

department of engineering, university of cambridge, cambridge, uk

{phs26, djv27, mg436, dk449, nm480, thw28, sjy}@cam.ac.uk

5
1
0
2

 

g
u
a
3
1

 

 
 
]

g
l
.
s
c
[
 
 

1
v
6
8
3
3
0

.

8
0
5
1
:
v
i
x
r
a

abstract

to train a statistical spoken dialogue system (sds) it is essen-
tial that an accurate method for measuring task success is avail-
able. to date training has relied on presenting a task to either
simulated or paid users and inferring the dialogue   s success by
observing whether this presented task was achieved or not. our
aim however is to be able to learn from real users acting under
their own volition, in which case it is non-trivial to rate the suc-
cess as any prior knowledge of the task is simply unavailable.
user feedback may be utilised but has been found to be incon-
sistent. hence, here we present two neural network models that
evaluate a sequence of turn-level features to rate the success of
a dialogue. importantly these models make no use of any prior
knowledge of the user   s task. the models are trained on dia-
logues generated by a simulated user and the best model is then
used to train a policy on-line which is shown to perform at least
as well as a baseline system using prior knowledge of the user   s
task. we note that the models should also be of interest for eval-
uating sds and for monitoring a dialogue in rule-based sds.
index terms: spoken dialogue systems, real users, reward pre-
diction, dialogue success classi   cation, neural network

1. introduction

the dialogue manager is the core component of a spoken dia-
logue system (sds). it controls the interaction between the sys-
tem and the user, and is central to the overall quality of the user
experience. casting an sds as a partially observable markov
decision process (pomdp) has been shown to be bene   cial by
allowing the dialogue manager to be optimised to plan and act
under the uncertainty created by noisy id103 and
semantic decoding [1, 2]. the pomdp policy dictating the ac-
tions taken by the sds is trained in an episodic reinforcement
learning (rl) framework [3] whereby the agent receives a re-
inforcement signal after each dialogue (episode) re   ecting how
well it performed.

the goal of this paper is to demonstrate that an sds can be
trained via interactions with real users where no direct knowl-
edge of the user   s goals is known at any point in the dialogue.
in all previous works the training of an sds has been done with
either recruited subjects [4, 5] who are presented with a pre-
de   ned task to complete, or via simulated users [6, 7, 8, 9, 10]
who randomly sample a goal over the speci   c ontology. in both
cases, the speci   c prior knowledge of the user   s goal is used to
calculate an objective measure (obj) of whether the sds com-
pleted the task or not. in real world systems prior knowledge of
the user   s goal is simply not available, making any calculation
of an    objective    measure nearly impossible1. knowledge of
task success or failure is essential however for training an sds.

one approach to this problem is to ask the user for feedback
at the completion of each dialogue. yang et al. [11] proposed
using collaborative    ltering to infer user preferences given a set
of user-rated dialogues. however these ratings were very noisy
[12] which lead to slow learning and poor policies [13]. also in
real-world systems it is not clear that a user would be coopera-
tive enough to provide feedback once the dialogue is completed.
other research related to this problem includes the par-
adise framework [14] presented by walker et al. for evaluat-
ing a dialogue, where a linear function of task completion and
prede   ned dialogue costs were used for inferring user satisfac-
tion. however, as noted above, task completion is not directly
computable with real users and concerns relating to the theoret-
ical motivation of the model have also be raised [15]. a frame-
work that does potentially enable the training of sds with real
users was presented by asri et al. [16, 17], whereby a reward
function was learnt over a summary state space based on dia-
logue data labelled by experts for task success. however, no
attempt was made to learn a policy with real users.

when training an sds with paid users given speci   c tasks,
a common issue is that they are not motivated by a real informa-
tion need. as a consequence, they often2 fail to follow exactly
the presented goal, resulting in obj=failure even though the
sds may have actually provided everything asked of it. in order
not to penalise the sds by learning with such dialogues we have
previously also asked the user for their opinion of whether they
achieved the task goals thereby obtaining a subjective success
rating (subj). then for policy learning, only those dialogues for
which obj=subj [18] are used, the remainder being discarded.
with real users it is not possible however to calculate obj since
the true goal of the user can not be known. it is therefore essen-
tial to    nd effective methods for computing rewards with real
users when the underlying task is unknown.

this paper investigates the use of neural networks to rate
task success automatically on-line by tracking the dialogue as
it evolves. in section 2, two types of neural networks are de-
scribed, recurrent neural nets (id56s) and convolutional neural
nets (id98s), and the choice of features used to track the dia-
logue are discussed along with the different types of predictions

1we note that this is not a problem faced in training agents in many
common pomdp tasks: episode success in grid-worlds, games or pole-
balancing is well de   ned and easily computed [3]. in comparison, di-
alogue is an ill-posed problem for which it is non-trivial to classify the
success of an episode when there is no prior knowledge of the user   s
goal. there is even ambiguity as to what the label success means for a
dialogue. our de   nition of success is based on the performance of the
dialogue agent, speci   cally whether it provided all of the information
asked of it for a domain entity satisfying the users constraints, e.g. the
phone number for a cheap restaurant in the north.

2this case occurs in our experience at least 20% of the time [13].

the models are trained to produce. the experimental evalua-
tion is then presented in section 3. two performance metrics
are computed to evaluate the trained nn models: accuracy in
estimated task success and the root mean square error in esti-
mating the reward function. performance in on-line learning
with (paid) users is then assessed and the effectiveness of the
neural network-based reward rating is demonstrated. finally,
conclusions are presented in section 4.

2. neural network dialogue classi   cation

two types of neural network (nn) models were investigated for
determining the    nal reward given to the reinforcement learn-
ing agent. the structures of these models are described in sub-
sections 2.2, 2.3 and 2.4. first though we discuss their shared
feature inputs and training data.

2.1. training data, dialogue features and generalisation
the data used to train all models was collected by training sev-
eral gaussian process policies [4] from scratch with an agenda-
based simulated user [9, 10]. the labels of success or failure
for each dialogue were computed based on an objective criteria
of whether or not the agent met the simulated users    goals gen-
erated at the start of each dialogue. the reinforcement signals
used during policy training were simply to give a -1 reward at
each turn to promote speed, and a    nal reward of +20 at com-
pletion if the dialogue was successful, otherwise 0. the return
(cumulative reward) r is therefore calculated as:

r = 20    1success     n

(1)

where n is the number of turns in a dialogue and 1success is an
indicator function for success.

for all models, a domain speci   c feature vector was ex-
tracted at each turn3 consisting of the following concatenated
sections: one-hot encoding of the user   s top-ranked dialogue
act, the real-valued belief state vector formed by concatenat-
ing the distributions over all goal, method and history variables
[19], one-hot encoding of the summary system action, and the
turn number. this is shown in figure 1.

figure 1: feature vector ft extracted at each turn t.

this form of feature vector was motivated by considering the
primary information a human would require to read a transcrip-
tion and rate the success of the dialogue. the inclusion of the
full belief vector, plus user and systems actions makes this fea-
ture vector domain and system dependent.

the goal with these nn models is to enable policy learn-
ing with real users by not requiring any prior knowledge of the
users    goal. their rating predictions are used directly to pro-
vide the rl feedback to the dialogue agent. hence they should
consider the information requested by the user over the whole
dialogue and ideally evaluate whether the policy provided ev-
erything that was asked for or not. it is expected that by training
the nn models on data from the simulated users evaluated by
the objective measure, they will generalise to be able to provide
this ideal rating when assessing dialogues with real users whose
goals are not known (and hence the objective assessment can not
be calculated). the reason to expect the models to generalise in

3turn here means system + user exchange.

figure 2: schematic of the two nn predictive models. an un-
rolled view of the id56 (top) and id98 model (bottom). the
feature vectors extracted at turns t = 1, . . . , n are labelled ft.

this way is that the simulated users have prede   ned tasks and in-
form the system meticulously about all of them. hence, the ob-
jective measure of task completion indicates exactly whether or
not the system provided the information requested of it. there-
fore by training on these supervised learning pairs of data gener-
ated by the simulated user and ratings provided by the objective
measure, the resulting nn predictive model should be a good
detector of whether or not the system provided what the user
requested from it. this is the desired indicator of the system   s
behaviour and a good reinforcement signal for policy learning.
dialogues of course vary in their total number of turns. by
extracting this feature vector at each turn a variable size set is
obtained for each dialogue. the two nn models we investigate
both make a single prediction for the whole dialogue, but do so
in different ways, in particular with respect to how they handle
this variable length sequence.

2.2. recurrent neural network model
the recurrent neural network (id56) model [20] is a subclass
of neural network that has feedback connections from one time
step to another. the ability to succinctly capture and retain his-
tory information makes it suitable for modelling sequential data
with temporal dependencies. it has been shown to be success-
ful in various natural language processing tasks such as lan-
guage modelling [21, 22, 23] and spoken language understand-
ing (slu) [24].

here the id56 model is adopted to manage the variable
length of each dialogue by simply updating its hidden layer ht
with the input feature vectors ft at each turn t. once the dia-
logue ends the hidden layer is then connected to an output layer
to make a single prediction of the whole dialogue as depicted in
the top half of figure 2.

2.3. convolutional neural network model
also investigated was a convolutional neural network (id98)
[25] which has been successfully used for image classi   cation
[26] and on sequential modelling problems such as sentiment la-
belling of sentences [27]. here the id98 makes predictions by

considering the whole dialogue as a matrix formed by append-
ing turn based feature vectors. on completion of the dialogue,
a convolutional    lter of size (f, w ), where f is the turn based
feature dimension and w is a width across time, is applied in a
narrow convolution across the dialogue matrix. multiple    lters
are used, each of which creates its own feature map. a max-
pooling operation then reduces each of the feature map vectors
to a scalar. finally, the resulting scalars are concatenated and
feed into a standard multi-layer id88 (mlp), which may
consist of multiple layers. this process is shown in the bottom
half of figure 2, where 4 feature maps are employed.

for the id98, the mapping of the variable size input to a
   xed size is provided by the pooling operation applied to the
feature map outputs. the dialogue matrix is padded with w    1
zero vectors on each side to allow a narrow convolution to al-
ways be performed (even if the dialogue has only 1 turn). im-
portantly this also allows the convolutional    lter to move across
time (turns) and consider turn sequences of differing lengths.

2.4. id56 & id98 shared output layer

the id56 and id98 models share the same network structure in
their    nal layer, and this structure is determined by the choice
of supervised training targets, of which three types were con-
sidered, all derived from the described data.

1) in the    rst case the nn models are classi   ers which are
trained to predict the obj success or failure label for each di-
alogue. the targets are {0, 1} and the    nal layer of the nn
models outputs a scalar through a sigmoid activation function
and is trained with a cross-id178 loss. the outputs from this
network is a id203 p that the dialogue is a success, and the
hard class label predicted by the model is taken as 1 if p > 0.5,
else 0. this hard label is used to determine whether to give a
   nal reward of +20 during policy learning, as per eqn. (1).

in the other two cases, given that our goal is to provide the
   nal rl reward for policy learning, we also investigate predict-
ing this reward directly.

2) the second case is a multiclass classi   cation problem
where the class labels are integers representing the possible re-
turns for the whole dialogue. the number of different returns
possible with eqn.
(1) is constrained by setting a maximum
number of allowable turns for a dialogue. a softmax activation
is used in the    nal layer of the nn models with a cross-id178
loss. the one-hot encoding of the target distributions are con-
volved by a discrete gaussian kernel in order to smooth and
reduce the magnitude of the return prediction errors.

3) the third case is a regression problem with the actual re-
turn value used as the training target. the    nal layer of the nn
models have no non-linearity (activation) and the whole model
is trained with a mean-square-error (mse) id168. dur-
ing policy learning with cases 2 & 3 a per-turn penalty of 0
would be used, since these models predict the return rather than
the    nal reward and so implicitly include the total number of
turns penalty in the predicted return.

3. experiments
3.1. domain and shared sds components

the shared core components of the sds used over all ex-
periments were a domain independent asr, a confusion net-
work (cnet) semantic input decoder [28], the buds [19] belief
state tracker that factorises the dialogue state using a dynamic
id110 and a template based id86 of the systems se-
mantic actions. all policies are trained by gp-sarsa [4] and
the summary action space contains 20 actions.

with this ontology, the number of elements in each of the
four segments of the feature vector used by the nn models were
21, 575, 20, 1 respectively for the user act, full belief state, sys-
tem act and turn number. this resulted in a vector of f = 617
components at each turn. the turn number was expressed as a
percentage of the maximum number of allowed turns, here 30.
the one-hot user dialogue act encoding was formed by taking
only the most likely user act estimated by the cnet decoder.

3.2. results: neural network training
in this section results of training the two nn models4 on the
simulated user [9] dialogues scored by the obj measure are pre-
sented. two training sets were used consisting of 18k and 1k
dialogues. in all cases a separate validation set consisting of
1k dialogues was used for controlling over   tting. training and
validation sets were approximately balanced regarding objec-
tive success/failure labels and collected at a 15% semantic error
rate (ser). prediction results are shown in figure 3 on two test
sets; testa: 1k dialogues, balanced regarding objective labels,
at 15% ser and testb: 12k dialogues, containing 3 gp policies
trained from scratch on 1000 dialogues, collected at an ser of
0, 15, 30 and 45 as the data occurred (i.e. with no balancing
regarding labels).

we used three different targets (cost functions) as described
in section 2.4 to train both the id56 and id98 models. eqn. (1)
was used to calculate the return from the binary success classi-
   cation (case 1 in 2.4); for cases 2 and 3 the success label was
inferred from eqn. (1). the results are depicted in figure 3,
where the left y-axis is the success classi   cation accuracy (bar
plot), and the right y-axis is the root-mean-square-error (rmse)
of the return (scatter plot).

we see that the id56 outperformed the id98 in most cases.
when using the large training set (18k, sub-   gures 1 & 3) all
models obtained over 93% success label accuracy while the
id56 more accurately estimated the return, getting within       3
of the objective return targets on testa and within       5 on
testb. without a simulated user it may not be possible to access
18k labelled training dialogues so results are also presented
when training the models (with exactly the same structures) on
only 1k dialogues. sub-   gures 2 & 4 show that the models are
reasonably robust to this large reduction in the amount of train-
ing data, with the binary classi   cation models being the most
accurate and again the id56 outperforming the id98.

these results give con   dence that the nn models, sequen-
tially evaluating turn level features, are able to serve as good
dialogue success detectors. the results on set testb also show
that the models can perform well in environments with varying
error rates as would be encountered in real operating environ-
ments.

in all experiments the cambridge restaurant domain was used,
which consists of approximately 150 venues each having 6 at-
tributes (slots) of which 3 can be used by the system to constrain
the search and the remaining 3 are informable properties once a
database entity has been found.

4all nn models were implemented using the theano library [29,
30]. the id56 hidden layer used 300 units with sigmoid activations
for all cases. the id98 created 50 feature maps with    lters of width
w = 30, and a 2 layer ffnn where the size of the 1st layer was 300
in case 2 and 50 otherwise. stochastic id119 (per dialogue)
was used for training.

figure 3: nn model training results: prediction of id56 and id98 models trained on 18k and 1k dialogues and tested on sets testa
and testb (see text). results of success/failure label accuracy (left axis) are represented as bars, and rmse (right axis) as scatters.

3.3. results: on-line policy training with the id56 model
based on the above results,
the binary id56 classi   cation
model was selected for training policies on-line. two systems
were trained on-line by users recruited via amazon mechani-
cal turk5. firstly, a baseline system was trained which used
knowledge of the set tasks to compute the reward as described
in section 1, and secondly a system was trained using only the
id56 to compute the reward signal. three policies were trained
for each system, then averaged to reduce noise. learning began
from a random policy in all cases.

figure 4 shows the on-line learning curve of the reward and
number of turns when training the systems with 500 dialogues.
for both plots, the moving average was calculated using a win-
dow of 100 dialogues and each result was the average of the
three policies in order to reduce noise. it can be seen that the
id56 system was able to learn at least as good a policy as the
baseline system. further, the baseline system actually required
    850 dialogues (due to discarding cases where obj(cid:54)=subj),
while the id56 system used every dialogue and was therefore
more ef   cient and less costly.

in order to evaluate the resulting policies, we collected a
further 600 dialogues, turning off policy learning and asking
the mechanical turkers to rate, in addition to subj, the quality
of the dialogue by answering the question    do you think this
dialogue was successful?    on a 6-point likert scale. each of the
3 policies trained for the baseline and id56 systems received
100 dialogues and the average quality rating (interpreted as a
number between 0 and 5) is shown in table 1 along with one
standard error. we report only the quality and subj since the
obj can be misleading due to turkers not explicitly following
the task, as highlighted in section 1. the results indicate that
the id56 dialogue success classi   er was able to train a policy
at least as well as the baseline system even though the baseline
was trained via direct use of the prior knowledge of the users
goal and selected only dialogues where obj=subj to learn from.

table 1: subjective evaluations of the trained baseline and id56
policies. quality: 6-point likert scale, subj: binary rating.

quality (0-5)
subj (%)

baseline
3.77    0.087
84.9    2.2

id56

3.94    0.068
89.5    1.7

5although our motivation is to train with real users and the nn mod-
els we have introduced now enable this, we are restricted here to using
mechanical turkers since we do not have an actual service or product
to attract real users to.

figure 4: learning curve with reward and number of turns dur-
ing on-line policy optimisation. the baseline system (black
line) updates the policy only when the subj and obj measures
agreed. the green line shows training under the id56 dialogue
success predictor. yellow and blue lines are standard errors.

4. conclusions

this paper has investigated the use of neural networks for rat-
ing success in a spoken dialogue system. both id56s and id98s
were shown to be capable of good performance when substan-
tial training data is available, but id56s were more robust when
training data was limited. when compared to a baseline (which
used prior knowledge of the users goal) for on-line policy learn-
ing with real users, the id56 delivered slightly improved per-
formance suggesting that this approach does provide a way of
training real-world systems on-line with users whose goals are
unknown.

currently work is focused on investigating less domain spe-
ci   c features, the dependence on the simulated user, transfer-
ring the id56 models to new domains, and using them for re-
ward shaping [31] to speed up policy learning. we note    nally
that the models should also be helpful for rule based sds to
adjust behaviour or know when to hand control from the com-
puter agent to a human to retrieve a failing dialogue, and for
evaluation of sds generally.

5. acknowledgement

p.-h. su is supported by cambridge trust and the ministry of
education, taiwan. d. vandyke and t.-h. wen are supported
by toshiba research europe ltd, cambridge research lab.

[19] b. thomson and s. young,    bayesian update of dialogue state:
a pomdp framework for spoken dialogue systems.    computer
speech and language, vol. 24, pp. 562   588, 2010.

[20] m. lukoeviius and h. jaeger,    reservoir computing approaches
to recurrent neural network training,    computer science review,
vol. 3, no. 3, pp. 127     149, 2009.

[21] t. mikolov, m. kara     at, l. burget, j. cernock`y, and s. khudan-
pur,    recurrent neural network based language model.    in inter-
speech 2010, 11th annual conference of the international speech
communication association, makuhari, chiba, japan, september
26-30, 2010, 2010, pp. 1045   1048.

[22] t. mikolov, s. kombrink, l. burget, j. h. cernocky, and s. khu-
danpur,    extensions of recurrent neural network language model,   
in acoustics, speech and signal processing (icassp), 2011 ieee
international conference on.

ieee, 2011, pp. 5528   5531.

[23] a. karpathy and l. fei-fei,    deep visual-semantic alignments for
generating image descriptions,    corr, vol. abs/1412.2306, 2014.
[24] g. mesnil, y. dauphin, k. yao, y. bengio, l. deng, d. hakkani-
tur, x. he, l. heck, g. tur, d. yu, and g. zweig,    using re-
current neural networks for slot    lling in spoken language under-
standing,    ieee/acm transactions on audio, speech, and lan-
guage processing, march 2015.

[25] y. lecun and y. bengio,    the handbook of brain theory and neu-
ral networks,    m. a. arbib, ed. cambridge, ma, usa: mit
press, 1998, ch. convolutional networks for images, speech, and
time series, pp. 255   258.

[26] y. lecun, l. bottou, y. bengio, and p. haffner,    gradient-based
learning applied to document recognition,    in proceedings of the
ieee, 1998, pp. 2278   2324.

[27] n. kalchbrenner, e. grefenstette, and p. blunsom,    a convolu-
tional neural network for modelling sentences,    proceedings of
the 52nd annual meeting of the association for computational
linguistics, june 2014.

[28] m. henderson, m. ga  si  c, b. thomson, p. tsiakoulis, k. yu, and
s. young,    discriminative spoken language understanding us-
ing word confusion networks,    in spoken language technology
workshop, 2012. ieee, 2012.

[29] j. bergstra, o. breuleux, f. bastien, p. lamblin, r. pascanu,
g. desjardins, j. turian, d. warde-farley, and y. bengio,
   theano: a cpu and gpu math expression compiler,    in pro-
ceedings of
the python for scienti   c computing conference
(scipy), jun. 2010, oral presentation.

[30] f. bastien, p. lamblin, r. pascanu, j. bergstra, i. j. goodfellow,
a. bergeron, n. bouchard, and y. bengio,    theano: new features
and speed improvements,    deep learning and unsupervised fea-
ture learning nips 2012 workshop, 2012.

[31] e. ferreira and f. lef`evre,    social signal and user adaptation in
id23-based dialogue management,    in proceed-
ings of the 2nd workshop on machine learning for interactive
systems: bridging the gap between perception, action and com-
munication, ser. mlis    13. new york, ny, usa: acm, 2013,
pp. 61   69.

6. references

[1] j. d. williams and s. young,    partially observable markov deci-
sion processes for spoken id71,    computer speech and
language, vol. 21, no. 2, pp. 393   422, 2007.

[2] s. young, m. ga  sic, b. thomson, and j. williams,    pomdp-based
statistical spoken dialogue systems: a review,    in proc of the
ieee, vol. 99, 2013, pp. 1   20.

[3] r. s. sutton and a. g. barto, id23: an intro-

duction. mit press, 1999.

[4] m. ga  si  c and s. young,    gaussian processes for pomdp-based

dialogue manager optimisation,    taslp, vol. 22, 2014.

[5] m. ga  si  c, d. kim, p. tsiakoulis, c. breslin, m. henderson,
m. szummer, b. thomson, and s. j. young,    incremental on-line
adaptation of pomdp-based dialogue managers to extended do-
mains,    in interspeech 2014, 15th annual conference of the inter-
national speech communication association, singapore, septem-
ber 14-18, 2014, 2014, pp. 140   144.

[6] o. lemon and o. pietquin,    machine learning for spoken dia-
logue systems,    in in proceedings of the european conference
on speech communication and technologies (interspeech07), an-
vers, 2007.

[7] l. daubigney, m. geist, s. chandramohan, and o. pietquin,    a
comprehensive id23 framework for dialogue
management optimization,    selected topics in signal processing,
ieee journal of, vol. 6, no. 8, pp. 891   902, 2012.

[8] e. levin, r. pieraccini, and w. eckert,    a stochastic model of
human-machine interaction for learning dialog strategies,    speech
and audio processing, ieee transactions on, vol. 8, no. 1, pp.
11   23, jan 2000.

[9] j. schatzmann and s. young,    the hidden agenda user simulation
model,    audio, speech, and language processing, ieee transac-
tions on, vol. 17, no. 4, pp. 733   747, may 2009.

[10] s. keizer, m. ga  si  c, f. jurcicek, f. mairesse, b. thomson, k. yu,
and s. young, proceedings of the sigdial 2010 conference.
association for computational linguistics, 2010, ch. parameter
estimation for agenda-based user simulation, pp. 116   123.

[11] z. yang, g. levow, and h. meng,    predicting user satisfaction in
spoken dialog system evaluation with collaborative    ltering,    se-
lected topics in signal processing, ieee journal of, vol. 6, no. 99,
pp. 971   981, 2012.

[12] c. daniel, m. viering, j. metz, o. kroemer, and j. peters,    active
reward learning,    in proceedings of robotics science & systems,
2014.

[13] m. ga  si  c, f. jurcicek, b. thomson, k. yu, and s. young,    on-line
policy optimisation of spoken dialogue systems via live interac-
tion with human subjects,    in automatic id103 and
understanding (asru), 2011 ieee workshop on, dec 2011, pp.
312   317.

[14] m. a. walker, d. j. litman, c. a. kamm, and a. abella,    par-
adise: a framework for evaluating spoken dialogue agents,    in
proceedings of the eighth conference on european chapter of
the association for computational linguistics. association for
computational linguistics, 1997, pp. 271   280.

[15] l. larsen,    issues in the evaluation of spoken dialogue systems
using objective and subjective measures,    in automatic speech
recognition and understanding, 2003. asru    03. 2003 ieee
workshop on, nov 2003, pp. 209   214.

[16] l. e. asri, r. laroche, and o. pietquin,    reward function learn-
ing for dialogue management,    in proceedings of the sixth start-
ing arti   cial intelligence research symposium (stairs 2012),
montpellier (france), august 2012, pp. 95     106.

[17]       ,    task completion id21 for reward id136,    in

proc of mlis, 2014.

[18] m. ga  si  c, c. breslin, m. henderson, d. kim, m. szummer,
b. thomson, p. tsiakoulis, and s. j. young,    on-line policy opti-
misation of bayesian spoken dialogue systems via human interac-
tion,    in ieee international conference on acoustics, speech and
signal processing, icassp 2013, vancouver, bc, canada, may
26-31, 2013, 2013, pp. 8367   8371.

