qanus: an open-source question-answering platform

jun-ping ng

department of computer science
national university of singapore
junping@comp.nus.edu.sg

min-yen kan

department of computer science
national university of singapore
kanmy@comp.nus.edu.sg

5
1
0
2

 

n
a
j
 

1

 
 
]

r

i
.
s
c
[
 
 

1
v
1
1
3
0
0

.

1
0
5
1
:
v
i
x
r
a

abstract

in this paper, we motivate the need for
a publicly available, generic software
framework for question-answering (qa)
systems. we present an open-source qa
framework qanus which researchers can
leverage on to build new qa systems eas-
ily and rapidly. the framework imple-
ments much of the code that will other-
wise have been repeated across different
qa systems. to demonstrate the utility
and practicality of the framework, we fur-
ther present a fully functioning factoid qa
system qa-sys built on top of qanus.
introduction

1
there has been much research into question-
answering (qa) over the past decades. however
the community is still lacking qa systems which
are readily available for use. this translates into a
high barrier of entry for researchers who are new
to the    eld. the absence of easily accessible sys-
tems also means that there is a lack of credible,
reproducible baseline systems against which new
qa systems can be evaluated.

to address the highlighted limitations, we are
releasing an open-source, java-based, qa frame-
work qanus (pronounced kay-ness). qanus
is a framework on which new qa systems can
be easily and rapidly developed. qanus makes
it easy to build new qa systems as only a min-
imal set of components needs to be implemented
on top of the provided framework. to demonstrate
the utility and practicality of qanus, a reference
implementation of a qa system qa-sys has also
been developed using the framework. qa-sys is
also made available to the community. when it
matures, it can serve as an accessible, reproducible
baseline system for evaluations.

to ensure the availability of the system to the
community, as well as to maximise the bene   ts

of any derivative projects for everyone, qanus is
released under the open software license (osl)
v3.0.

2 related work

there has been previous efforts in generalis-
ing the architecture of qa systems. hirschman
and gaizauskas (2001) for example described a
pipelined approach to qa (hg-01), where differ-
ent stages are combined serially into a qa system.
figure 1 highlights the different stages in their
pipeline vis-a-vis the stages found in qanus.
the informal correspondence between the various
stages of the two pipelines are also shown in the
   gure.

figure 1: comparing pipeline stages of hg-01
and qanus.

the architecture of hg-01 is slanted towards
qa systems based on current state-of-the-art in-
formation retrieval (ir) techniques. these tech-
niques typically involve manipulating the lexical
and syntactic form of natural language text and
do not attempt to comprehend the semantics ex-
pressed by the text. systems which make use
of these techniques (hickl et al., 2007; y. chali,
2007) have been able to perform ahead of their
peers in the text retrieval conference (trec)
qa tracks (dang et al., 2007).

in ir-based systems, answer processing re-
volves around units of information stored in doc-
uments. to re   ect the importance of this organi-
sation two separate stages (c) candidate document
selection and (d) candidate document analysis are
described in hirschman   s architecture. further, (f)
answer generation is included as they considered
interactive qa systems which could participate in
a dialogue with end-users.

not all qa systems are ir-centric however,
and interactive qa systems are likely not immi-
nent given the limitations of natural language un-
derstanding and generation. qanus thus gen-
eralises stages (c), (d) and (e) into one to avoid
over-committing to any particular architecture or
paradigm, and leaves out (f).

another important point of comparison is that
qanus is an implemented, functional qa archi-
tecture whereas hg-01 serves mainly as a general
discussion and introduction to the architecture of
qa systems.

though few in numbers, some qa systems have
previously been made available to the commu-
nity. one such system is aranea1 (lin, 2007).
aranea is a factoid qa system which seeks to
exploit the redundancy of data on the web and
has achieved credible performances at past trec
evaluations. aranea is not designed however as
a generic qa platform. we argue that a frame-
work such as qanus which is designed from the
start with extensibility and    exibility in mind will
greatly reduce the effort needed for any such cus-
tomisation.

qanda by mitre2 is another qa system
which has featured in the trec qa track. it has a
project page on sourceforge. however currently
only one module of the system is made available
for download. we are at the time of writing unable
to verify if there are plans for the release of the rest
of the system in the near future.

3 qanus framework

the qanus framework adopts a pipelined ap-
proach to qa. the pipeline consists of four stages
executed serially.. the stages include (1) informa-
tion source preparation, (2) question processing,
(3) answer retrieval and (4) evaluation. within
the framework we have implemented much of the

1available

at
http://www.umiacs.umd.edu/   jimmylin/downloads/index.html

download

for

2http://www.openchannelsoftware.org/projects/qanda

programming code that will otherwise have been
repeated across different qa systems. the frame-
work can thus be likened to a foundation on top of
which components can be added to obtain a com-
plete qa system.

figure 2 illustrates a complete qa system built
with the framework. the upper-half of the    gure
delineates clearly the key classes that constitute
the four stages of the framework listed earlier. the
bottom-half of the    gure shows additional compo-
nents that can be added to the framework to com-
plete the qa system. for completeness, the input
and output to the various stages of the system are
also depicted as shaded boxes at the bottom of the
   gure.

a

the

share

stages

two main classes.

the top half of figure 2 shows that each
common architec-
of
ture, composed of
the
frameworkcontroller is responsible for
directing the program    ow and managing any
input and output required or produced by the
stage.
it also invokes appropriate methods in
the latter to process any input sent to the stage.
the frameworkengine class provides the
required processing that is needed on the various
pieces of input to the stage. the processing that is
required in each stage differs. for example, in the
information source preparation stage, processing
may involve part-of-speech tagging an input
corpus, while in question processing, processing
may instead be classifying the expected answer
type of the posed questions.

due to space constraints, the individual inter-
faces and function calls presented by qanus are
not explained in detail here. the full documenta-
tion together with the source code for the frame-
work are available at the qanus download site3.
we brie   y explain the operations that may be
carried out in each stage. note that this descrip-
tion serves merely as a guide, and users of the
framework have full    exibility in deciding the op-
erations to be carried out at each stage.
information source preparation.

in this
stage, an information source from which answers
are to be obtained is set up. the framework is
not restricted to any particular type of informa-
tion source. depending on the required needs and
speci   cations, the eventual information source can
be as varied as a lucene4 index of the source

3http://junbin.com/qanus
4open-source text search engine written in java

figure 2: full qa system with qanus framework and additional components.

documents, a full-   edged ontology or the inter-
net. any necessary pre-processing to set up the
information source is done here. note that this
stage prepares static information sources. using
the web dynamically as an information source is
done in the subsequent answer retrieval stage.

question processing.

typically, questions
posed to the system need to be parsed and un-
derstood before answers can be found. neces-
sary question processing is carried out here. typ-
ical operations here can include forming a query
suitable for the information source from the posed
questions, question classi   cation to determine the
expected answer type, as well as part-of-speech
tagging and parsing. the outputs of these various
operations are stored so that they can subsequently
be used by the next stage in the qa pipeline.

answer retrieval. the answer retrieval stage
makes use of the annotations from the question
processing stage, and looks up the information
source for suitable answers to the posed questions.
incorporating candidate answers from dynamic
sources, such as the web or online databases, can
also be incorporated here. proper answer strings
that can answer the questions are extracted in this
stage.
if desired, answer validation can be per-
formed as well.

evaluation. with the three stages above,
qanus already provides the support necessary
for a fully functional qa system. the evalua-
tion stage is introduced to complement the ear-
lier stages and ease the veri   cation of the perfor-
mance of the developed qa system. it is optional
and may be omitted if desired. the evaluation
stage cross-checks the answers computed previ-

ously by the answer retrieval stage with a set of
gold-standard answers. the results of the evalua-
tion are then output for easy review.

3.1 additional components
the four stages of the qanus framework es-
tablish the    ow of data through the entire qa
pipeline, and form the backbone of any instanti-
ated qa system. to realise the framework and ob-
tain a fully functional qa system, additional com-
ponents such as those shown in the bottom half of
figure 2 must be coupled to the qanus frame-
work.

the classes in the framework enforce the re-
quired interfaces that need to be adhered to by
these additional components. by following the
speci   ed interfaces, any desired functionality can
be plugged into the framework.

to give a better picture of how these compo-
nents can be easily added to the qanus frame-
work to complete a qa system,
let us walk
through an example for the question process-
ing (qp) stage.
the mini-
mum set of components that need to be im-
plemented for qp include the qpcontroller,
questioninputhandler, and qpengine.

from figure 2,

qpcontroller. qpcontroller inherits from
the qpframeworkcontroller component of
the qanus framework. this component is re-
sponsible for initializing and integrating any text
processing modules that will be used to process
input questions with the framework.
suppose
we want to perform part-of-speech tagging on
the input questions, a part-of-speech component
module needs to be created in qpcontroller.

qpcontroller next noti   es the qpengine
component about this part-of-speech tagger com-
ponent.

questioninputhandler. this component is re-
sponsible for reading in provided input questions.
the implementation is thus dependent on how the
input questions are formatted and presented.

qpengine. this component is derived from
the qpframeworkengine component of the
qanus framework.
it makes use of the ear-
lier questioninputhandler component to
read in input questions, and invokes any text
processing modules registered with it by the
qpcontroller to annotate the question text.

it is useful to emphasise here the ease and    exi-
bility provided by the qanus framework: (1) the
abstraction provided by the framework greatly re-
duces the amount of code that needs to be written
for a qa system. only a minimal set of customi-
sation needs to be carried out to complete the im-
plementation of the qp stage. (2) the framework
is suf   ciently    exible to allow for a range of qa
systems to be built. in the explanation here, only
a part-of-speech tagger is described. depending
on requirements, other text processing algorithms
and techniques can also be incorporated.

4

implementation of qa-sys

to demonstrate the utility and practicality of the
qanus framework, we have developed a qa sys-
tem, referenced to as qa-sys on top of the frame-
work. the implementation of qa-sys is included
when downloading qanus to serve as an effec-
tive reference implementation and help reduce the
learning curve for researchers in using the frame-
work.

qa-sys is a fully functioning qa system de-
veloped to run on the well-known dataset from the
trec 2007 qa track (dang et al., 2007). qa-
sys makes use of ir-based techniques to perform
the qa task. as can be seen later, this includes
making use of a text search engine to perform doc-
ument lookup, as well as lexicon-based techniques
including id39 for answer re-
trieval. an ir-based approach is adopted because
it has been shown to turn in credible performances
as explained earlier (hickl et al., 2007; y. chali,
2007).

conforming to the description of the qanus
framework, figure 3 shows the various classes that
have been implemented as part of qa-sys. this

   gure is similar to figure 2, which shows possi-
ble components needed to obtain a complete qa
system.

information source preparation. similar to
the participating machines of the trec 2007 qa
track, qa-sys makes use of the aquaint-2 cor-
pus5 which is stored in xml format. a xml
parser aquaintxmlparser is written to inter-
face the corpus with qanus. lucenewriter
makes use of lucene to build an index of the
input corpus. we will subsequently make use of
this index to retrieve documents relevant to posed
questions in the later stages of the qa pipeline.

question processing.

in this stage, qa-
sys attempts to classify the expected answer
type of the input questions based on the tax-
onomy described in li and roth (2002) with
questionclassifier. we built the classi   er
used by training the stanford classi   er (manning
and klein, 2003) on the data described in li and
roth (2002). the classi   cation assigned to each
question is stored and passed on to the answer re-
trieval stage.

answer retrieval. to look up answers to
the posed questions, qa-sys form a query out
of the question by dropping stop-words found in
the question. lucenequery uses this query to
search through the lucene index built earlier in
the information source preparation stage. doc-
uments retrieved by the lucene search engine
are then broken down into individual passages.
answerretrieval scores each of these pas-
sages using a variety of heuristics such as by tab-
ulating the occurrences of the query terms within
the passages.

from the ranked passages, answer candidates
are extracted depending on the expected answer
type previously determined in question process-
ing. for a question seeking a person name for
example, a named entity recogniser (finkel et al.,
2005) is used to extract candidate people names
from the ranked passages. for other expected an-
swer types such as dates, hand-written regular ex-
pressions are used to aid in the extraction of an-
swer candidates.

finally, the answer candidates are ranked based
again on a set of heuristics which include the prox-
imity of the candidates within the ranked pas-

5the corpus is not included with the download for qa-
sys as it is the intellectual property of the linguistic data
consortium.

figure 3: actual components implemented in qa-sys on top of the qanus framework.

sages to the query terms for example. the high-
est ranked candidate is returned as the preferred
answer.

evaluation. the evaluation stage provided by
the qanus framework makes it possible to eas-
ily test the performance of qa-sys. currently
qa-sys supports only factoid questions, and so
the evaluation metric used here is factoid accuracy
(dang et al., 2007), de   ned as:

accuracy =

no. of correctly answer questions
total no. of test factoid questions

which
factoidaccuracyevaluator.

implemented

is

in

the top system in the trec 2007 qa
track lymbapa07 and the tenth-placed system
quanta achieved accuracy scores of 0.706 and
0.206 respectively. qa-sys currently obtains an
accuracy of 0.119.

there is room for improvement before qa-sys
can catch up with the state-of-the-art. the current
implementation is simplistic and does not do much
processing of the input questions, nor does it per-
form elaborate ranking of retrieved documents. as
work on the system progresses and more sophis-
ticated components are included into the system,
qa-sys should be able to achieve better results.

5 future work
qanus and qa-sys are currently under devel-
opment. qanus is relatively mature, having un-
dergone several iterations of improvements and
our work is now focused on improving the perfor-
mance and functionalities of qa-sys.

performance. conventionally, qa systems
have been benchmarked against the systems par-
ticipating in the trec qa track. however re-
cently the qa track has been dropped from both
trec and the text analysis conference (tac).
as the years go by, the results from the qa track
will age and become irrelevant. there is also a
trend towards the use of the web as an aid for qa.
the web is dynamic and any such qa system will
likely not generate the same results in different in-
stances of time. for useful benchmarking, it is
thus important to be able to use a baseline sys-
tem which makes use of the internet at the same
time instance as the qa system being compared
to. having access to such a baseline system is thus
critical and essential. this is the niche that qa-
sys serves to address.. when the performance
of qa-sys catches up with the state-of-the-art,
it will be a useful baseline system against which
other qa systems can be evaluated against.

to boost performance, more work needs to be
done for the question processing and answer re-
trieval stages. there are plans to include a query
expansion component which will be helpful in
boosting the precision of the documents retrieved
by lucene. to improve on answer retrieval, soft
patterns as described in cui et al. (2007) can re-
place the current hard hand-written patterns used
in the system. more advanced measures like the
use of dependency relations (cui et al., 2005) can
also be adopted to improve on the current passage
ranking implementation.

list questions. besides performance, it will
also be useful to expand the functionalities of qa-
sys. it does not handle list questions for the mo-

ment. an implementation based on the use of re-
dundancies found within the source text (banko et
al., 2002; lin, 2007) is being considered.

internet front-end. an online demonstra-
tion of qa-sys is currently hosted online6 and
supports querying over a pre-indexed aquaint-
2 corpus or the internet. the answer retrieval
component working with data from the internet
is rudimentary and lacks techniques to process
the noise that accompanies data downloaded from
the internet.
it will be useful to improve on
this internet-querying component by adding better
post-processing over the retrieved data.

6 conclusion

the lack of community-available qa systems has
made it dif   cult to create new qa systems and
perform comparisons across published studies.
this motivated our work on an open-source qa
framework qanus. the framework implements
much of the code needed for a qa system and re-
duces the development effort needed to build new
systems. it is carefully designed to be    exible and
supports the use of a wide range of qa techniques.
as a demonstration of the utility and practical-
ity of qanus, we have also implemented a fully
functional factoid qa system qa-sys on top of
the framework. our goal is to improve qa-sys so
that it will serve as a useful and accessible baseline
to benchmark future qa systems and technologies
against. through this work, we hope to lower the
high barriers of entry facing new qa researchers
and reduce the time needed for them to begin pro-
ductive research in this area.

initional id53. acm transactions
on information systems, 25(2), april.

[dang et al.2007] hoa trang dang, diane kelly, and
jimmy lin. 2007. overview of the trec 2007
in proceedings of the
id53 track.
text retrieval conference.

[finkel et al.2005] jenny rose finkel, trond grenager,
and christopher manning.
incorporating
non-local information into information extraction
in proceedings of
systems by id150.
the annual meeting of the association for compu-
tational linguistics, pages 363   370.

2005.

[hickl et al.2007] andrew hickl, kirk roberts, bryan
rink, jeremy bensley, tobias jungen, ying shi, and
john williams. 2007. id53 with
lccs chaucer-2 at trec 2007. in proceedings
of text retrieval conference.

[hirschman and gaizauskas2001] l. hirschman and
r. gaizauskas. 2001. natural language question
answering: the view from here. natural lan-
guage engineering, 7, issue 4:275   300, december.

[li and roth2002] xin li and dan roth. 2002. learn-
in international confer-

ing question classi   ers.
ence on computational linguistics.

[lin2007] jimmy lin. 2007. an exploration of the
principles underlying redundancy-based factoid
id53. acm transactions on infor-
mation systems, 27(2):1   55.

[manning and klein2003] christopher manning and
dan klein. 2003. optimization, maxent models,
and conditional estimation without magic. in pro-
ceedings of the conference of the north american
chapter of the association for computational lin-
guistics on human language technology: tutorials.

[y. chali2007] s. r. joty y. chali. 2007. university of
lethbridge   s participation in trec 2007 qa track.
in proceedings of text retrieval conference.

references
[banko et al.2002] m. banko, e. brill, s. dumais, and
j. lin. 2002. askmsr: id53 us-
in proceedings of aaai
ing the worldwide web.
spring symposium on mining answers from texts
and knowledge bases, pages 7   9.

[cui et al.2005] hang cui, renxu sun, keya li, min-
yen kan, and tat-seng chua. 2005. question an-
swering passage retrieval using dependency rela-
tions. in proceedings of the international acm si-
gir conference on research and development in
information retrieval, pages 400   407, new york,
usa.

[cui et al.2007] hang cui, min-yen kan, and tat-seng
chua. 2007. soft pattern matching models for def-
6http://wing.comp.nus.edu.sg/   junping/qanus/online/main.php

