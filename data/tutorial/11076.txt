learning dictionaries for id39 using

minimal supervision

arvind neelakantan

department of computer science

university of massachusetts, amherst

amherst, ma, 01003

michael collins

department of computer science

columbia university

new-york, ny 10027, usa

arvind@cs.umass.edu

mcollins@cs.columbia.edu

5
1
0
2

 
r
p
a
4
2

 

 
 
]
l
c
.
s
c
[
 
 

1
v
0
5
6
6
0

.

4
0
5
1
:
v
i
x
r
a

abstract

this paper describes an approach for au-
tomatic construction of dictionaries for
id39 (ner) using
large amounts of unlabeled data and a few
seed examples. we use canonical cor-
relation analysis (cca) to obtain lower
dimensional embeddings (representations)
for candidate phrases and classify these
phrases using a small number of labeled
examples. our method achieves 16.5%
and 11.3% f-1 score improvement over
co-training on disease and virus ner re-
spectively. we also show that by adding
candidate phrase embeddings as features
in a sequence tagger gives better perfor-
mance compared to using word embed-
dings.
introduction

1
several works (e.g., ratinov and roth, 2009; co-
hen and sarawagi, 2004) have shown that inject-
ing dictionary matches as features in a sequence
tagger results in signi   cant gains in ner perfor-
mance. however, building these dictionaries re-
quires a huge amount of human effort and it is of-
ten dif   cult to get good coverage for many named
entity types. the problem is more severe when we
consider named entity types such as gene, virus
and disease, because of the large (and growing)
number of names in use, the fact that the names are
heavily abbreviated and multiple names are used
to refer to the same entity (leaman et al., 2010;
dogan and lu, 2012). also, these dictionaries can
only be built by domain experts, making the pro-
cess very expensive.

this paper describes an approach for automatic
construction of dictionaries for ner using large

amounts of unlabeled data and a small number
of seed examples. our approach consists of two
steps. first, we collect a high recall, low preci-
sion list of candidate phrases from the large unla-
beled data collection for every named entity type
using simple rules.
in the second step, we con-
struct an accurate dictionary of named entities by
removing the noisy candidates from the list ob-
tained in the    rst step. this is done by learning a
classi   er using the lower dimensional, real-valued
cca (hotelling, 1935) embeddings of the can-
didate phrases as features and training it using a
small number of labeled examples. the classi   er
we use is a binary id166 which predicts whether a
candidate phrase is a named entity or not.

we compare our method to a widely used semi-
supervised algorithm based on co-training (blum
and mitchell, 1998). the dictionaries are    rst
evaluated on virus (genia, 2003) and disease
(dogan and lu, 2012) ner by using them directly
in dictionary based taggers. we also give results
comparing the dictionaries produced by the two
semi-supervised approaches with dictionaries that
are compiled manually. the effectiveness of the
dictionaries are also measured by injecting dictio-
nary matches as features in a conditional random
field (crf) based tagger. the results indicate
that our approach with minimal supervision pro-
duces dictionaries that are comparable to dictio-
naries compiled manually. finally, we also com-
pare the quality of the candidate phrase embed-
dings with id27s (dhillon et al., 2011)
by adding them as features in a crf based se-
quence tagger.

2 background
we    rst give background on canonical correla-
tion analysis (cca), and then give background on

crfs for the ner problem.

2.1 canonical correlation analysis (cca)
the input to cca consists of n paired observa-
tions (x1, z1), . . . , (xn, zn) where xi     rd1, zi    
rd2 (   i     {1, 2, . . . , n}) are the feature represen-
tations for the two views of a data point. cca
simultaneously learns projection matrices   1    
rd1  k,   2     rd2  k (k is a small number) which
are used to obtain the lower dimensional represen-
tations (  x1,   z1), . . . , (  xn,   zn) where   xi =   t
1 xi    
rk,   zi =   t
2 zi     rk,    i     {1, 2, . . . , n}.   1,   2
are chosen to maximize the correlation between   xi
and   zi,    i     {1, 2, . . . , n}.
consider the setting where we have a label for
the data point along with it   s two views and ei-
ther view is suf   cient to make accurate predic-
tions. kakade and foster
(2007) and sridharan
and kakade (2008) give strong theoretical guaran-
tees when the lower dimensional embeddings from
cca are used for predicting the label of the data
point. this setting is similar to the one considered
in co-training (collins and singer, 1999) but there
is no assumption of independence between the two
views of the data point. also, it is an exact al-
gorithm unlike the algorithm given in collins and
singer (1999). since we are using lower dimen-
sional embeddings of the data point for prediction,
we can learn a predictor with fewer labeled exam-
ples.

2.2 crfs for id39
crf based sequence taggers have been used for
a number of ner tasks (e.g., mccallum and li,
2003) and in particular for biomedical ner (e.g.,
mcdonald and pereira, 2005; burr settles, 2004)
because they allow a great deal of    exibility in the
features which can be included. the input to a
crf tagger is a sentence (w1, w2, . . . , wn) where
wi,    i     {1, 2, . . . , n} are words in the sentence.
the output is a sequence of tags y1, y2, . . . , yn
where yi     {b, i, o},    i     {1, 2, . . . , n}. b
is the tag given to the    rst word in a named entity,
i is the tag given to all words except the    rst word
in a named entity and o is the tag given to all other
words. we used the standard ner baseline fea-
tures (e.g., dhillon et al., 2011; ratinov and roth,
2009) which include:

    current word wi and its lexical features
which include whether the word is capital-
ized and whether all the characters are cap-

in window of

italized. pre   x and suf   xes of the word wi
were also added.
two
    word tokens
around the current word which include
wi   2, wi   1, wi+1, wi+2 and also the capital-
ization pattern in the window.
    previous two predictions yi   1 and yi   2.

size

the effectiveness of the dictionaries are evaluated
by adding dictionary matches as features along
with the baseline features (ratinov and roth,
2009; cohen and sarawagi, 2004) in the crf tag-
ger. we also compared the quality of the candi-
date phrase embeddings with the word-level em-
beddings by adding them as features (dhillon et
al., 2011) along with the baseline features in the
crf tagger.

3 method

this section describes the two steps in our ap-
proach: obtaining candidate phrases and classify-
ing them.

3.1 obtaining candidate phrases
we used the full text of 110,369 biomedical pub-
lications in the biomed central corpus1 to get the
high recall, low precision list of candidate phrases.
the advantages of using this huge collection of
publications are obvious: almost all (including
rare) named entities related to the biomedical do-
main will be mentioned and contains more re-
cent developments than a structured resource like
wikipedia. the challenge however is that these
publications are unstructured and hence it is a dif-
   cult task to construct accurate dictionaries using
them with minimal supervision.

the list of virus candidate phrases were ob-
tained by extracting phrases that occur between
   the    and    virus    in the simple pattern    the ...
virus    during a single pass over the unlabeled doc-
ument collection. this noisy list had a lot of virus
names such as in   uenza, human immunode   ciency
and epstein-barr along with phrases that are not
virus names, like mutant, same, new, and so on.

a similar rule like    the ... disease    did not give
a good coverage of disease names since it is not
the common way of how diseases are mentioned
in publications. so we took a different approach

1the

corpus

can

be

downloaded

at

http://www.biomedcentral.com/about/datamining

to obtain the noisy list of disease names. we col-
lected every sentence in the unlabeled data col-
lection that has the word    disease    in it and ex-
tracted noun phrases2 following the patterns    dis-
eases like ....   ,    diseases such as ....    ,    diseases in-
cluding ....    ,    diagnosed with ....   ,    patients with
....    and    suffering from ....   .

3.2 classi   cation of candidate phrases
having found the list of candidate phrases, we
now describe how noisy words are    ltered out
from them. we gather (spelling, context) pairs for
every instance of a candidate phrase in the unla-
beled data collection. spelling refers to the can-
didate phrase itself while context includes three
words each to the left and the right of the candidate
phrase in the sentence. the spelling and the con-
text of the candidate phrase provide a natural split
into two views which multi-view algorithms like
co-training and cca can exploit. the only super-
vision in our method is to provide a few spelling
seed examples (10 in the case of virus, 18 in the
case of disease), for example, human immunode   -
ciency is a virus and mutant is not a virus.
3.2.1 approach using cca embeddings
we use cca described in the previous section
to obtain lower dimensional embeddings for the
candidate phrases using the (spelling, context)
views. unlike previous works such as dhillon et
al. (2011) and dhillon et al. (2012), we use cca to
learn embeddings for candidate phrases instead of
all words in the vocabulary so that we don   t miss
named entities which have two or more words.

let the number of (spelling, context) pairs be n
(sum of total number of instances of every can-
didate phrase in the unlabeled data collection).
first, we map the spelling and context to high-
dimensional feature vectors. for the spelling view,
we de   ne a feature for every candidate phrase and
also a boolean feature which indicates whether the
phrase is capitalized or not. for the context view,
we use features similar to dhillon et al. (2011)
where a feature for every word in the context in
conjunction with its position is de   ned. each
of the n (spelling, context) pairs are mapped to
a pair of high-dimensional feature vectors to get
n paired observations (x1, z1), . . . , (xn, zn) with
xi     rd1, zi     rd2,    i     {1, 2, . . . , n} (d1, d2
are the feature space dimensions of the spelling

2noun

http://www.umiacs.umd.edu/   hal/tagchunk/

phrases

were

obtained

using

and context view respectively). using cca3, we
learn the projection matrices   1     rd1  k,   2    
rd2  k (k << d1 and k << d2 ) and obtain
1 xi     rk,   i    
spelling view projections   xi =   t
{1, 2, . . . , n}. the k-dimensional spelling view
projection of any instance of a candidate phrase
is used as it   s embedding4.

the k-dimensional candidate phrase embed-
dings are used as features to learn a binary id166
with the seed spelling examples given in    gure 1
as training data. the binary id166 predicts whether
a candidate phrase is a named entity or not. since
the value of k is small, a small number of labeled
examples are suf   cient to train an accurate clas-
si   er. the learned id166 is used to    lter out the
noisy phrases from the list of candidate phrases
obtained in the previous step.

to summarize, our approach for classifying

candidate phrases has the following steps:

    input: n (spelling, context) pairs, spelling
seed examples.
    each of the n (spelling, context) pairs are
mapped to a pair of high-dimensional fea-
ture vectors to get n paired observations
(x1, z1), . . . , (xn, zn) with xi     rd1, zi    
rd2,    i     {1, 2, . . . , n}.
    using cca, we learn the projection matri-
ces   1     rd1  k,   2     rd2  k and ob-
tain spelling view projections   xi =   t
1 xi    
rk,   i     {1, 2, . . . , n}.
    the embedding of a candidate phrase is given
by the k-dimensional spelling view projec-
tion of any instance of the candidate phrase.
    we learn a binary id166 with the candi-
date phrase embeddings as features and the
spelling seed examples given in    gure 1 as
training data. using this id166, we predict
whether a candidate phrase is a named entity
or not.

3.2.2 approach based on co-training
we discuss here brie   y the dl-cotrain algorithm
(collins and singer, 1999) which is based on co-
training (blum and mitchell, 1998), to classify
3similar to dhillon et al. (2012) we used the method given
in halko et al. (2011) to perform the svd computation in
cca for practical considerations.

4note that a candidate phrase gets the same spelling view
projection across it   s different instances since the spelling
features of a candidate phrase are identical across it   s in-
stances.

figure 1: seed spelling examples

candidate phrases. we compare our approach us-
ing cca embeddings with this approach. here,
two decision list of rules are learned simultane-
ously one using the spelling view and the other
using the context view.
the rules using the
spelling view are of the form: full-string=human
immunode   ciency     virus, full-string=mutant    
in the context view, we
not a virus and so on.
used bigram5 rules where we considered all pos-
sible bigrams using the context. the rules are of
two types: one which gives a positive label, for
example, full-string=human immunode   ciency    
virus and the other which gives a negative label,
for example, full-string=mutant     not a virus.
the dl-cotrain algorithm is as follows:

    input: (spelling, context) pairs for every in-
stance of a candidate phrase in the corpus, m
specifying the number of rules to be added in
every iteration, precision threshold  , spelling
seed examples.
    algorithm:

1. initialize the spelling decision list using
the spelling seed examples given in    g-
ure 1 and set i = 1.

2. label the entire input collection using the

learned decision list of spelling rules.

3. add i    m new context rules of each
type to the decision list of context rules
using the current labeled data. the
rules are added using the same criterion
as given in collins and singer (1999),
i.e., among the rules whose strength is
greater than the precision threshold  ,
the ones which are seen more often with
the corresponding label in the input data
collection are added.

5we tried using unigram rules but they were very weak
predictors and the performance of the algorithm was poor
when they were considered.

4. label the entire input collection using the

learned decision list of context rules.

5. add i    m new spelling rules of each
type to the decision list of spelling rules
using the current labeled data. the rules
are added using the same criterion as in
step 3. set i = i+1. if rules were added
in the previous iteration, return to step 2.

the algorithm is run until no new rules are left to
be added. the spelling decision list along with
its strength (collins and singer, 1999) is used to
construct the dictionaries. the phrases present in
the spelling rules which give a positive label and
whose strength is greater than the precision thresh-
old, were added to the dictionary of named enti-
ties. we found the parameters m and   dif   cult
to tune and they could signi   cantly affect the per-
formance of the algorithm. we give more details
regarding this in the experiments section.

4 related work

previously, collins and singer (1999) introduced
a multi-view, semi-supervised algorithm based on
co-training (blum and mitchell, 1998) for collect-
ing names of people, organizations and locations.
this algorithm makes a strong independence as-
sumption about the data and employs many heuris-
tics to greedily optimize an objective function.
this greedy approach also introduces new param-
eters that are often dif   cult to tune.

in other works such as toral and mu  noz (2006)
and kazama and torisawa (2007) external struc-
tured resources like wikipedia have been used to
construct dictionaries. even though these meth-
ods are fairly successful they suffer from a num-
ber of drawbacks especially in the biomedical do-
main. the main drawback of these approaches is
that it is very dif   cult to accurately disambiguate
ambiguous entities especially when the entities are

   virusseedspellingexamples   virusnames:humanimmunode   ciency,hepatitisc,in   uenza,epstein-barr,hepatitisb   non-virusnames:mutant,same,wildtype,parental,recombinant   diseaseseedspellingexamples   diseasenames:tumor,malaria,breastcancer,cancer,iddm,dm,a-t,tumors,vhl   non-diseasenames:cells,patients,study,data,expression,breast,brca1,protein,mutant1abbreviations (kazama and torisawa, 2007). for
example, dm is the abbreviation for the disease
diabetes mellitus and the disambiguation page for
dm in wikipedia associates it to more than 50 cat-
egories since dm can be expanded to doctor of
management, dichroic mirror, and so on, each of
it belonging to a different category. due to the
rapid growth of wikipedia, the number of enti-
ties that have disambiguation pages is growing fast
and it is increasingly dif   cult to retrieve the article
we want. also, it is tough to understand these ap-
proaches from a theoretical standpoint.

dhillon et al. (2011) used cca to learn word
embeddings and added them as features in a se-
quence tagger. they show that cca learns bet-
ter id27s than cw embeddings (col-
lobert and weston , 2008), hierarchical log-linear
(hlbl) embeddings (mnih and hinton, 2007)
and embeddings learned from many other tech-
niques for ner and chunking. unlike pca, a
widely used id84 technique,
cca is invariant to linear transformations of the
data. our approach is motivated by the theoreti-
cal result in kakade and foster
(2007) which is
developed in the co-training setting. we directly
use the cca embeddings to predict the label of
a data point instead of using them as features in
a sequence tagger. also, we learn cca embed-
dings for candidate phrases instead of all words in
the vocabulary since named entities often contain
more than one word. dhillon et al. (2012) learn
a multi-class id166 using the cca word embed-
dings to predict the pos tag of a word type. we
extend this technique to ner by learning a binary
id166 using the cca embeddings of a high recall,
low precision list of candidate phrases to predict
whether a candidate phrase is a named entity or
not.

5 experiments

in this section, we give experimental results on
virus and disease ner.

5.1 data
the noisy lists of both virus and disease names
were obtained from the biomed central corpus.
this corpus was also used to get the collection of
(spelling, context) pairs which are the input to the
cca procedure and the dl-cotrain algorithm de-
scribed in the previous section. we obtained cca
embeddings for the 100, 000 most frequently oc-

curring word types in this collection along with
every word type present in the training and de-
velopment data of the virus and the disease ner
dataset. these id27s are similar to the
ones described in dhillon et al. (2011) and dhillon
et al. (2012).

we used the virus annotations in the ge-
nia corpus (genia, 2003) for our experiments.
the dataset contains 18,546 annotated sentences.
we randomly selected 8,546 sentences for train-
ing and the remaining sentences were randomly
split equally into development and testing sen-
tences. the training sentences are used only for
experiments with the sequence taggers. previ-
ously, zhang et al. (2004) tested their id48-based
named entity recognizer on this data. for disease
ner, we used the recent disease corpus (dogan
and lu, 2012) and used the same training, devel-
opment and test data split given by them. we used
a sentence segmenter6 to get sentence segmented
data and stanford tokenizer7 to tokenize the data.
similar to dogan and lu (2012), all the different
disease categories were    attened into one single
category of disease mentions. the development
data was used to tune the hyperparameters and the
methods were evaluated on the test data.

5.2 results using a dictionary-based tagger
first, we compare the dictionaries compiled us-
ing different methods by using them directly in
a dictionary-based tagger. this is a simple and
informative way to understand the quality of the
dictionaries before using them in a crf-tagger.
since these taggers can be trained using a hand-
ful of training examples, we can use them to build
ner systems even when there are no labeled sen-
tences to train. the input to a dictionary tagger is
a list of named entities and a sentence. if there is
an exact match between a phrase in the input list
to the words in the given sentence then it is tagged
as a named entity. all other words are labeled as
non-entities. we evaluated the performance of the
following methods for building dictionaries:

    candidate list: this dictionary contains all
the candidate phrases that were obtained us-
ing the method described in section 3.1. the
noisy list of virus candidates and disease can-
didates had 3,100 and 60,080 entries respec-
tively.

6https://pypi.python.org/pypi/text-sentence/0.13
7http://nlp.stanford.edu/software/tokenizer.shtml

method

candidate list

manual

co-training

cca

virus ner

disease ner

precision recall f-1 score precision recall f-1 score

2.20
42.69
48.33
57.24

69.58
68.75
66.46
68.33

4.27
52.67
55.96
62.30

4.86
51.39
58.87
38.34

60.32
45.08
23.17
44.55

8.99
48.03
33.26
41.21

table 1: precision, recall, f- 1 scores of dictionary-based taggers

    manual: manually constructed dictionaries,
which requires a large amount of human ef-
fort, are employed for the task. we used the
list of virus names given in wikipedia8. un-
fortunately, abbreviations of virus names are
not present in this list and we could not    nd
any other more complete list of virus names.
hence, we constructed abbreviations by con-
catenating the    rst letters of all the strings in
a virus name, for every virus name given in
the wikipedia list.
for diseases, we used the list of disease
names given in the uni   ed medical lan-
guage system (umls) metathesaurus. this
dictionary has been widely used in disease
ner (e.g., dogan and lu, 2012; leaman et
al., 2010)9.
    co-training: the dictionaries are con-
structed using the dl-cotrain algorithm de-
scribed previously.
the parameters used
were m = 5 and   = 0.95 as given in collins
and singer (1999). the phrases present in
the spelling rules which give a positive label
and whose strength is greater than the preci-
sion threshold, were added to the dictionary
of named entities.
in our experiment to construct a dictionary
of virus names, the algorithm stopped after
just 12 iterations and hence the dictionary had
only 390 virus names. this was because there
were no spelling rules with strength greater
than 0.95 to be added. we tried varying
both the parameters but in all cases, the algo-
rithm did not progress after a few iterations.
we adopted a simple heuristic to increase the
coverage of virus names by using the strength
of the spelling rules obtained after the 12th it-
eration. all spelling rules that give a positive

8http://en.wikipedia.org/wiki/list of viruses
9the list of disease names from umls can be found at

https://sites.google.com/site/fmchowdhury2/bioenex .

label and which has a strength greater than
   were added to the decision list of spelling
rules. the phrases present in these rules are
added to the dictionary. we picked the    pa-
rameter from the set [0.1, 0.2, 0.3, 0.4, 0.5,
0.6, 0.7, 0.8, 0.9] using the development data.
the co-training algorithm for constructing
the dictionary of disease names ran for close
to 50 iterations and hence we obtained bet-
ter coverage for disease names. we still used
the same heuristic of adding more named en-
tities using the strength of the rule since it
performed better.
    cca: using the cca embeddings of the
candidate phrases10 as features we learned a
binary id16611 to predict whether a candidate
phrase is a named entity or not. we consid-
ered using 10 to 30 dimensions of candidate
phrase embeddings and the regularizer was
picked from the set [0.0001, 0.001, 0.01, 0.1,
1, 10, 100]. both the regularizer and the num-
ber of dimensions to be used were tuned us-
ing the development data.

table 1 gives the results of the dictionary based
taggers using the different methods described
above. as expected, when the noisy list of candi-
date phrases are used as dictionaries the recall of
the system is quite high but the precision is very
low. the low precision of the wikipedia virus
lists was due to the heuristic used to obtain ab-
breviations which produced a few noisy abbrevia-
tions but this heuristic was crucial to get a high re-
call. the list of disease names from umls gives
a low recall because the list does not contain many
disease abbreviations and composite disease men-
tions such as breast and ovarian cancer. the pres-

10the performance of the dictionaries learned from word
embeddings was very poor and we do not report it   s perfor-
mance here.

11we used libid166 (http://www.csie.ntu.edu.tw/   cjlin/libid166/)

in our id166 experiments

figure 2: virus and disease ner f-1 scores for varying training data size when dictionaries obtained
from different methods are injected

ence of ambiguous abbreviations affected the ac-
curacy of this dictionary.

the virus dictionary constructed using the cca
embeddings was very accurate and the false pos-
itives were mainly due to ambiguous phrases,
for example, in the phrase hiv replication, hiv
which usually refers to the name of a virus is
tagged as a rna molecule. the accuracy of the
disease dictionary produced using cca embed-
dings was mainly affected by noisy abbreviations.
we can see that the dictionaries obtained us-
ing cca embeddings perform better than the dic-
tionaries obtained from co-training on both dis-
ease and virus ner even after improving the co-
training algorithm   s coverage using the heuristic
described in this section. it is important to note
that the dictionaries constructed using the cca
embeddings and a small number of labeled exam-
ples performs competitively with dictionaries that
are entirely built by domain experts. these re-
sults show that by using the cca based approach
we can build ner systems that give reasonable
performance even for dif   cult named entity types
with almost no supervision.

5.3 results using a crf tagger

we did two sets of experiments using a crf tag-
ger. in the    rst experiment, we add dictionary fea-
tures to the crf tagger while in the second ex-
periment we add the embeddings as features to the
crf tagger. the same baseline model is used in
both the experiments whose features are described

in section 2.2. for both the crf12 experiments
the regularizers from the set [0.0001, 0.001, 0.01,
0.1, 1.0, 10.0] were considered and it was tuned
on the development set.

5.3.1 dictionary features
here, we inject dictionary matches as features
(e.g., ratinov and roth, 2009; cohen and
sarawagi, 2004) in the crf tagger. given a dic-
tionary of named entities, every word in the input
sentence has a dictionary feature associated with
it. when there is an exact match between a phrase
in the dictionary with the words in the input sen-
tence, the dictionary feature of the    rst word in
the named entity is set to b and the dictionary fea-
ture of the remaining words in the named entity
is set to i. the dictionary feature of all the other
words in the input sentence which are not part of
any named entity in the dictionary is set to o. the
effectiveness of the dictionaries constructed from
various methods are compared by adding dictio-
nary match features to the crf tagger. these dic-
tionary match features were added along with the
baseline features.

figure 2 indicates that the dictionary features in
general are helpful to the crf model. we can see
that the dictionaries produced from our approach
using cca are much more helpful than the dictio-
naries produced from co-training especially when
there are fewer labeled sentences to train. simi-
lar to the dictionary tagger experiments discussed

12we used crfsuite (www.chokkan.org/software/crfsuite/)

for our experiments with crfs.

01000200030004000500060007000800090000.50.550.60.650.70.750.80.85number of training sentencesf   1 scorevirus ner  baselinemanualco   trainingcca01000200030004000500060000.450.50.550.60.650.70.750.8f   1 scorenumber of training sentencesdisease ner  baselinemanualco   trainingcca1figure 3: virus and disease ner f-1 scores for varying training data size when embeddings obtained
from different methods are used as features

previously, the dictionaries produced from our ap-
proach performs competitively with dictionaries
that are entirely built by domain experts.

5.3.2 embedding features
the quality of the candidate phrase embeddings
are compared with id27s by adding
the embeddings as features in the crf tagger.
along with the baseline features, cca-word
model adds id27s as features while the
cca-phrase model adds candidate phrase em-
beddings as features. cca-word model is similar
to the one used in dhillon et al. (2011).

we considered adding 10, 20, 30, 40 and 50 di-
mensional id27s as features for every
training data size and the best performing model
on the development data was picked for the exper-
iments on the test data. for candidate phrase em-
beddings we used the same number of dimensions
that was used for training the id166s to construct
the best dictionary.

when candidate phrase embeddings are ob-
tained using cca, we do not have embeddings
for words which are not in the list of candidate
phrases. also, a candidate phrase having more
than one word has a joint representation, i.e., the
phrase    human immunode   ciency    has a lower
dimensional representation while the words    hu-
man    and    immunode   ciency    do not have their
own lower dimensional representations (assuming
they are not part of the candidate list). to over-
come this issue, we used a simple technique to dif-
ferentiate between candidate phrases and the rest

of the words. let x be the highest real valued can-
didate phrase embedding and the candidate phrase
embedding be a d dimensional real valued vector.
if a candidate phrase occurs in a sentence, the em-
beddings of that candidate phrase are added as fea-
tures to the    rst word of that candidate phrase. if
the candidate phrase has more than one word, the
other words in the candidate phrase are given an
embedding of dimension d with each dimension
having the value 2    x. all the other words are
given an embedding of dimension d with each di-
mension having the value 4    x.
figure 3 shows that almost always the candi-
date phrase embeddings help the crf model. it is
also interesting to note that sometimes the word-
level embeddings have an adverse affect on the
performance of the crf model. the cca-phrase
model performs signi   cantly better than the other
two models when there are fewer labeled sen-
tences to train and the separation of the candidate
phrases from the other words seems to have helped
the crf model.
6 conclusion
we described an approach for automatic construc-
tion of dictionaries for ner using minimal super-
vision. compared to the previous approaches, our
method is free from overly-stringent assumptions
about the data, uses svd that can be solved ex-
actly and achieves better empirical performance.
our approach which uses a small number of seed
examples performs competitively with dictionar-
ies that are compiled manually.

01000200030004000500060007000800090000.50.550.60.650.70.750.80.85f   1 scorenumber of training sentencesvirus ner  baselinecca   wordcca   phrase01000200030004000500060000.450.50.550.60.650.70.750.8number of training sentencesf   1 scoredisease ner  baselinecca   wordcca   phrase1acknowledgments
we are grateful to alexander rush, alexandre
passos and the anonymous reviewers for their
useful feedback. this work was supported by
the intelligence advanced research projects ac-
tivity (iarpa) via department of interior na-
tional business center (doi/nbc) contract num-
ber d11pc20153. the u.s. government is autho-
rized to reproduce and distribute reprints for gov-
ernmental purposes notwithstanding any copy-
right annotation thereon. the views and conclu-
sions contained herein are those of the authors and
should not be interpreted as necessarily represent-
ing the of   cial policies or endorsements, either ex-
pressed or implied, of iarpa, doi/nbc, or the
u.s. government.

references
[mccallum and li2003] andrew mccallum and wei
li. early results for id39 with
id49, feature induction and
web-enhanced lexicons. 2003. conference on nat-
ural language learning (conll).

[mnih and hinton2007] andriy mnih and geoffrey
hinton. three new id114 for statistical
language modelling. 2007.
international confer-
ence on machine learning (icml).

[toral and mu  noz2006] antonio toral

and rafael
mu  noz. a proposal to automatically build and
maintain gazetteers for id39
by using wikipedia. 2006. workshop on new text
wikis and blogs and other dynamic text sources.

[blum and mitchell1998] avrin blum and tom m.
mitchell. combining labeled and unlabeled data
with co-training. 1998. conference on learning
theory (colt).

[burr settles2004] burr settles.

biomedical named
entity recognition using conditional random
fields and rich feature sets. 2004.
international
joint workshop on natural language processing in
biomedicine and its applications (nlpba).

[hotelling1935] h. hotelling. canonical correlation
analysis (cca) 1935. journal of educational psy-
chology.

[zhang et al.2004] jie zhang, dan shen, guodong
enhancing
zhou, jian su and chew-lim tan.
id48-based biomedical id39
by studying special phenomena. 2004. journal of
biomedical informatics.

[kazama and torisawa2007] junichi kazama and ken-
taro torisawa. exploiting wikipedia as external
knowledge for id39. 2007.
association for computational linguistics (acl).

[sridharan and kakade2008] karthik sridharan and
sham m. kakade. an information theoretic frame-
work for multi-view learning. 2008. conference
on learning theory (colt).

[ratinov and roth2009] lev ratinov and dan roth.
design challenges and misconceptions in named
entity recognition. 2009. conference on natural
language learning (conll).

[collins and singer1999] michael collins and yoram
singer. unsupervised models for named entity
classi   cation. 1999.
in proceedings of the joint
sigdat conference on empirical methods in nat-
ural language processing and very large corpora.

[halko et al.2011] nathan halko, per-gunnar martins-
son, joel a. tropp. finding structure with random-
ness: probabilistic algorithms for constructing ap-
proximate matrix decompositions. 2011. society
for industrial and applied mathematics.

[dhillon et al.2011] paramveer s. dhillon, dean foster
and lyle ungar. multi-view learning of word em-
beddings via cca. 2011. advances in neural in-
formation processing systems (nips).

[dhillon et al.2012] paramveer dhillon, jordan rodu,
dean foster and lyle ungar. two step cca: a
new spectral method for estimating vector models of
words. 2012. international conference on machine
learning (icml).

[dogan and lu2012] rezarta islamaj dogan and zhiy-
ong lu. an improved corpus of disease mentions in
pubmed citations. 2012. workshop on biomedical
natural language processing, association for com-
putational linguistics (acl).

[leaman et al.2010] robert

leaman,

christopher
miller and graciela gonzalez. enabling recogni-
tion of diseases in biomedical text with machine
learning: corpus and benchmark. 2010. work-
shop on biomedical natural language processing,
association for computational linguistics (acl).

[collobert and weston 2008] ronan collobert and ja-
son weston. a uni   ed architecture for natural lan-
guage processing: deep neural networks with mul-
titask learning. 2008. international conference on
machine learning (icml).

[mcdonald and pereira2005] ryan mcdonald and fer-
nando pereira. identifying gene and protein men-
tions in text using id49.
2005. bmc bioinformatics.

[genia2003] jin-dong kim, tomoko ohta, yuka
tateisi and jun   ichi tsujii. genia corpus - a
semantically annotated corpus for bio-textmining.
2003. ismb.

[kakade and foster 2007] sham m. kakade and dean
p. foster. multi-view regression via canonical cor-
relation analysis. 2007. conference on learning
theory (colt).

[cohen and sarawagi2004] william w. cohen and
sunita sarawagi. exploiting dictionaries in named
entity extraction: combining semi-markov extrac-
tion processes and data integration methods. 2004.
semi-markov extraction processes and data inte-
gration methods, proceedings of kdd.

