watsonsim: overview of a id53 engine

sean gallagher, wlodek zadrozny, walid shalaby, and adarsh avadhani

the university of north carolina at charlotte

{sgalla19,wzadrozn,wshalaby,amanhuna}@uncc.edu

4
1
0
2
 
c
e
d
2

 

 
 
]
l
c
.
s
c
[
 
 

1
v
9
7
8
0

.

2
1
4
1
:
v
i
x
r
a

abstract
the objective of the project is to design and run a system
to answer jeopardy questions, similar to watson.
in the
course of a semester, we developed an open source question
answering system using the indri, lucene, bing and google
search engines, apache uima, opennlp, and weka among
many additional modules. by the end of the semester, we
achieved 18% accuracy on jeopardy questions, and work has
not stopped since then.

introduction

1.
given the time constraint, we prioritized our e   ort, starting
with a minimal working subset of the functionality necessary
to answer a question. consequently, the    rst demonstration
consisted of indexing and querying wikipedia with lucene,
using titles as answers. from there, we added supporting
passage retrieval, question classi   cation, additional sources,
evidence scoring, scoring models, and so on.

as a team, we were coordinated into smaller groups, where
each group specialized in one facet of the pipeline. in total,
there were teams for source acquisition, search and query
generation, machine learning and scoring, and group inte-
gration.

development started without apache uima, because at the
time we were not familiar with it. midway through the
semester, developers were split as to whether the project
should be refactored to use uima but we opted to retain
our existing solution. whether this was optimal remains a
signi   cant question.

2. data sources
2.1 of   ine sources
data collection is a major part of the id53
process, and occupied a large fraction of e   ort expended
by the team. the greatest focus was on retrieving, clean-
ing, processing and indexing wikipedia materials. these

included the full texts of all wikipedia articles from the
publicly available xml dump, where redirects were removed
and indexed only as synonyms to their target articles    titles.
page view statistics for 100 days of wikipedia tra   c were
chosen at random by a prng and made into a histogram
to determine page popularity, for use as a score. two cor-
pora of wikipedia texts were made, where one is a subset
intended to allow running the machine on underpowered ma-
chines or for those with slow internet connections who could
not download the full indices.

more collections were also made available, including the full
text of wikiquotes, and the works of shakespeare, which
were indexed to match titles with works and to match char-
acter   s line with their respective names.

2.2 online sources
unlike ibm watson, our team is not limited to o   ine data
sources. most notably, we use web search engines such as
google and bing. google query limits made mass searches
of the magnitude necessary for passage retrieval impractical,
even when the results were cached and every team member
used their daily quotas continuously. at some point a su   -
cient number of results would have been reached, were it not
for the issue that the queries changed continuously in an ef-
fort to improve result quality. as a result, the google search
plugin is available but not used in performance measures.

the situation with bing is similar but less extreme. the
bing automated search quota at the time of this writing is
5000 per month, as opposed to the google search quota of
100 per day. the longer interval available with bing was
only su   cient to allow the team to make two performance
measurements over the course of the semester, but doing
so required less team coordination. as a result, there are
performance measurements available for bing.

3. data usage
we used the wikipedia reduced and full texts, along with
wikiquotes full text, and the shakespeare full texts as soon
as they were available.

wikipedia redirects were easily integrated, but added very
many generally unhelpful candidate answers. while it added
6% binary recall (from 22% to 28%), it caused a 30% drop in
mean reciprocal rank (from 0.6469 to 0.3483), which dropped
the overall accuracy at that point by 6% (from 12% to 6%).

4. text analysis
4.1 query generation
there are two major question analysis pipelines, and one
additional obsolete pipeline. the selection of which pipeline
a question would follow was made according to its category,
of which there were a small prede   ned set. the category was
decided at the time the question is constructed, by running
a set of manually developed id157. afterward,
the default pipeline would choose a more speci   c path of
analysis.

the    rst and most common pipeline analyzes questions as
factoids, or general trivia. queries along this pipeline are
weighted to favor question text found in the document con-
tent, but disfavor question text found in the title. by de-
fault, all querying engines except google are used in the
initial stage of the factoid pipeline, and bing and lucene
querying engines are available for the later passage retrieval
query stage. no con   guration of the indri search engine was
found where querying speed was too slow to allow passage
search; the average query in every case cost approximately
4 seconds, but over 100,000 queries were necessary for even
the reduced-size performance measuring set of 100 questions,
which was too much delay for rapid development.

the second pipeline is more speci   c, targeting only    ll-in-
the-blank style questions. answer-level queries are gener-
ated in generally the same manner as the factoid pipeline,
with the exception that strings of underscores are removed
before querying. resulting titles are parsed to eliminate
common strings, such that the only remaining text from the
candidate answer is the content of the string beginning at
the    rst blank in the question and ending at the last blank in
the question. it was assumed that including the known text
between blanks was acceptable. this may or may not have
been the case when judged for correctness automatically,
since the overlapping content between blanks may have con-
tained strings not on the list of stopwords. following answer
extraction, passage results and candidate answers were then
scored according to the same set of scorers as the factoid
pipeline. this was a matter of some debate in the team
since the relevancy of    ll-in-the-blank passage results was
likely not a function of the content of the passages. in the
end, the converged pipeline was chosen, for simplicity more
than any other factor.

the third and least signi   cant pipeline was designed to tar-
get quotes. the answer query was unweighted according to
document titles and contents, and made no changes to the
default scorers. its di   erence was that the query would be
directed only toward the wikiquotes dataset, in order to re-
duce false positives. the solution may have been successful
were it not for lack of encapsulation. it was eventually re-
verted, in part to allow more e   cient development of the
   ll-in-the-blank pipeline.

4.2 supporting passage scoring
supporting passages receive a number of scores, which are
intended to be indications of how much evidence the pas-
sage gives toward the correctness of the answer for which
it was retrieved. some scores are taken from the original
search engines; this is the case for both o   ine search en-
gines, lucene and indri. lucene bases its score on term

frequency-inverse document frequency (tf-idf) and the
vector space model, whereas indri scores are based on bayesian
[4] [2] the team expected that these
id136 networks.
models would generate substantially di   erent results, which
is supported by resulting accuracy. using indri raised binary
recall from 13% with only lucene to 21% with both engines,
as measured from the    rst 10 results from each engine.

online search engines do not provide scores for their search
results in publicly available apis, and neither is it known
how their scores are calculated. however, result ranks are
still available and are included for scoring. the usefulness of
these scores is diminished on the account that nearly every
search will have the same minimum, maximum, and mean
scores. only queries su   ciently rare as to return no re-
sponses are meaningful in this context.

passages are also subjected to a number of id165 compar-
isons. first, the passage text, candidate answer text, and
question text are all    ltered according to the default lucene
english analyzer, which includes id30 and stopword re-
moval. unigrams, bigrams, skip-bigrams, and trigrams are
all taken from the each text, and the number of common
id165s is for each variety. unigrams receive raw counts as
well as frequency relative to the sum of the lengths of the
texts. this suite of related scorers provided the strongest
boost to ranking found in the project.

additional scorers take an approach similar to the id165
models, but in place of id165s, they search for the num-
ber of common phrase subtrees taken from the open- and
corenlp parsers. notably, this scorer applies to any length
phrase, and the weight of the phrases found in common
increases in relation to its length , because large common
phrases will consist of smaller common subphrases, each of
which are counted.

4.3 pluggable ranking
watsonsim was originally designed for use with mahout, and
it was thought that specialized machine learning would be
necessary. but early experiments involved weka, for which
some integrating scripts were made. later it became a type
of its own, a learner, and    nally was rewritten as a re-
searcher. under all of these names, the function was the
same, simply to convert a large    xed-length vector of scores
into one    oating-point score representing overall con   dence
in the candidate answer. until the researcher revision, the
machine learning plugin was fed the entire vector of scores,
and the only preprocessing to be done was to order the scores
in a consistent manner. it was postulated that there were
too many variables that did not represent actually distinct
concepts; the scores of the    rst passage of evidence for a can-
didate answer are conceptually related to the scores for the
second passage, which indicated that a single score needed to
be made from both. in this revision was added a feature to
take the minimum, maximum, and mean of evidence scores.
using weka allowed a relatively simple way to replace one
machine learning algorithm with another, where logistic re-
gression was indicated to be the best choice. na    ve bayesian
classi   ers performed very poorly, but later results showed
that weka   s default implementation of the multilayer per-
ceptron was marginally more accurate.

table 1: results using all sources except google

recall of rank 1
recall in top 3
recall in full candidate answer set
mrr
total questions
total candidate answers
total runtime

187 (18.70%)
278 (27.80%)
497 (49.70%)
0.5072
1000
46881
23562.1203

5. dependencies

1. java jdk version 8.

2. gradle 2 or newer for dependency management, and

an internet connection when    rst installing.

3. the sources database, which at the time of this writing

is available online

average was much lower, around 47 distinct candidates per
question.

the mean reciprocal rank was only slightly more compli-
cated. for every question for which there was at least one
correct answer, the reciprocal rank of the    rst correct answer
was recorded. then the mean was taken of this list of recip-
rocals. questions without correct answers were eliminated
from the calculation because the calculation was unclear,
and because the mrr was meant as a measure of interest
to the scoring team, whereas recall was a measure of interest
to the search team. mixing the two would have made col-
laboration more complicated. the end result is that mrr
is calculated to be:

1

r(q)

x

q   q

|q|

4. lucene and indri indexes, which are included as part

of the extended sources.

where

5. a bing account, which you must make yourself.

6. at least about 1.5gb of memory.

    q is the set of questions for which there exists at least

one correct answer among the candidates

7. at least 50gb of free disk space, preferably more.

    r(q) is the rank of the    rst correct answer for question

6. performance evaluation
the performance tests are executed using a junit test that
automates queries to the default pipeline, so everything needed
to run the default pipeline is also needed to evaluate the per-
formance. you will also need a way to run junit tests. you
may use gradle test, or you may    nd eclipse more to your
liking.

7. current performance
the performance tests for watsonsim are created by taking
a set of jeopardy! questions with known correct answers,
running them through the default pipeline, and collecting
statistics on the resulting ranked candidate answer lists.
these data were tabulated and uploaded online. the follow-
ing data were taken from the peak that watsonsim accom-
plished, shortly before the end of the spring 2014 semester.

candidate answers were marked as correct or incorrect based
on whether the candidate and known correct answers both
contained the same unordered set of words after    ltering as
done by the lucene englishanalyzer. after all candidate
answers were marked as correct or incorrect, the    recall of
rank 1    was calculated as:

count of correct answers in rank 1

question count

   recall of top 3    is similar, with correct answers in ranks
1, 2 or 3, indexing from 1. the number of answers varied
signi   cantly; some questions had no candidate answers, and
there was a limit of 90 total, 50 from bing, 20 from lucene,
and 20 from indri. in practice, multiple engines would return
similar results, which were detected and merged. so the

q

8. next steps

1. sources other than wikipedia should be explored. the

answers to many questions are not contained in wikipedia,
even if the search was perfect. however, such large
corpora of plain, generally accurate, textual data are
rare.

2. answers should be extracted from document contents
in addition to the titles. semantic models as men-
tioned later may be able to assist in this process by gen-
erating important related phrases from a document.

3. work on prismatic search is underway but not com-
plete. simple questions may be directly handled by
sentences already existing in the corpus.

4. scorers that require every passage to undergo nlp-
based parsing are included but impractically slow. pars-
ing should be improved or severely limited in order to
provide scores in a reasonable timeframe.

5. unstructured information management architecture
(uima) is only weakly integrated into the watsonsim
pipelines, because the pipelines were designed before
the uima architecture was known to the team. uima
may be superior to the pipeline system designed in
watsonsim on two grounds. uima is readily horizon-
tally scalable and compatible with multiple languages,
which may make interaction with foreign libraries like
indri faster, more e   cient, and more intuitive. also,
some systems are already based on it, such as stanford
corenlp, which was considered as an alternative op-
tion to the inconveniently unperformant dependency
parser found in opennlp.

6. watsonsim could bene   t from more sophisticated scor-
ing. whereas id165 similarities are closely scruti-
nized, synonymy and polysemy are completely ignored.
several scripts were written to generate distributional
semantic models for watsonsim but none were com-
plete enough to warrant inclusion. several projects
have previously explored knowledge management through
distributional semantic models, such as jobimtext which
may be an excellent candidate for inclusion [1]. id97,
a similar project uses id65 to model
relations between phrases, allowing an interesting arith-
metical approach to metaphor. in such a vector space,
   king    -    man    +    woman    is a very close approxima-
tion to the vector for    queen    [3].

7. o   ine querying with indri is signi   cantly more accu-
rate than with lucene alone. lucene alone has 13%
binary recall in the    rst 10 results, whereas indri and
lucene together have 21% binary recall on the same
data sources. however, indri performance is too poor
in watsonsim to be practical as a passage retrieval
engine. it seems this must be the result of improper
con   guration, but no team member could reveal any
error.

9. conclusions
watsonsim shows that it is feasible for a small team on
a deadline to create a working id53 system
based on existing search technologies, online sources, natu-
ral language processing tools, and readily available machine
learning toolkits.

as in many projects of this type, a great portion of the time
is spent on collecting and cleaning the target data. the
easily parsed format of wikipedia as well as the accessible
apis o   ered by google and microsoft are in part responsible
for reducing the time to the    rst demonstration. as for
developing the overall pipeline, extensive documentation of
watson from ibm has proven helpful and a large in   uence
on the design of the project.

10. acknowledgments
we would like to acknowledge ibm for contributing lecture
material, as well was the following students    substantial con-
tributions: chris gibson, dhaval patel, elliot mersch, ja-
gan vujjini, jonathan shuman, ken overholt, phani rahul,
varsha devadas

11. references
[1] c. biemann. jobimtext project.

http://sourceforge.net/projects/jobimtext/, 2014.

[2] d. fisher. indri retrieval model.

http://sourceforge.net/p/lemur/wiki/indri retrieval
model/, 2012.

[3] t. mikolav. id97 project.

https://code.google.com/p/id97/, 2014.

[4] r. muir. lucene similarity class reference.

http://lucene.apache.org/core/4 9 0/core/org/apache/lucene/search/similarities/tfidfsimilarity.html,
2014.

