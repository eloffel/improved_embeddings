   #[1]meta [2]meta [3]meta

   iframe: [4]https://www.googletagmanager.com/ns.html?id=gtm-tr6twrh

   iframe: [5]https://www.googletagmanager.com/ns.html?id=gtm-tr6twrh

create a new account

   email
   ____________________
   register
   [6]returning user

   can't sign in? forgot your password?

   enter your email address below and we will send you the reset
   instructions
   email
   _______________
   submit
   [7]cancel

   if the address matches an existing account you will receive an email
   with instructions to reset your password
   [8]close

   can't sign in? forgot your username?

   enter your email address below and we will send you your username
   email
   _______________
   submit
   [9]cancel

   if the address matches an existing account you will receive an email
   with instructions to retrieve your username
   [10]close

change password

   old password
   ____________________
   new password
   ____________________
   too short weak medium strong very strong too long
   submit
   [11]cancel

password changed successfully

   your password has been changed
   [12]close

login to your account
     __________________________________________________________________

   username
   _______________
   [13]forgot username?
   password
   ____________________
   [14]forgot password?
   keep me logged in
   [ ]
   login
   new user
   institutional login
   [15][mitpress-logo-main-1483476130433.svg]
   [16]the mit pressjournals

     * [17]books
     * [18]journals
     * [19]digital
     * [20]resources
          + [21]for librarians
               o [22]institutional activation
               o [23]institutional license agreement
               o [24]usage stats
               o [25]document delivery
               o [26]mit press journals vpat
               o [27]join our librarian mailing list
               o [28]librarian faq
         [29]quick guides
               o [30]2019 institutional pricing
               o [31]2019 institutional package options and pricing
               o [32]single issue price list
          + [33]for authors
               o [34]submitting publication agreements
               o [35]author posting guidelines
               o [36]copyright information
               o [37]author reprints
               o [38]publishing open access
               o [39]nih public access policy
               o [40]author discounts
               o [41]the mit press and kudos
         [42]quick guides
               o [43]guide1
               o [44]guide2
               o [45]guide3
          + [46]request permissions
         [47]give to the frank urbanowski fund
         [48]trade sales
         [49]advertising info
         [50]release schedule
         [51]faq
         [52]terminated journals
          +
     * [53]about
          + the mit press is a leading publisher of books and journals at
            the intersection of science, technology, and the arts. mit
            press books and journals are known for their intellectual
            daring, scholarly standards, and distinctive design.

[54]about mitpj statement

[55]statement of publication ethics

[56]events & conferences

[57]publishing services

[58]mit press journals staff

[59]how we use analytics
          +
     * [60]contact
          + location
            the mit press
            one rogers street
            cambridge, ma 02142-1209
            [fpo-map-1493476240117.png]
          + phone
            (800) 207-8354
            (us & canada)
            (617) 253-2889
            (outside us and canada)
            (617) 577-1545
            fax
            mit press business hours are m-f, 9:00 a.m. - 5:00 p.m.
            eastern time
            connect
               o [61]facebook
               o [62]twitter
               o [63]google +
               o [64]pinterest
               o [65]instagram
               o [66]youtube
          + [67]send us a message
         quick email links
               o [68]change your address
               o [69]advertising inquiries
               o [70]list exchange & purchasing
               o [71]rights & permissions
               o [72]payments & wire transfer
               o [73]license agreements & consortia
               o [74]subscriptions & back issues
               o [75]electronic access queries
            to submit proposals to either launch new journals or bring an
            existing journal to mit press, please contact director for
            journals and open access, [76]nick lindsay. to submit an
            article please follow the submission guidelines for the
            appropriate journal(s).
          +

   [77]sign in / register
     * [78]enter words / phrases / doi / isbn / authors / keywords / etc.
       computational lingui _______________ _______________
       _______________ _______________
       ____________________ (button)
       search [79]advanced search
     *
     * 0

     * [80]home >
     * [81]computational linguistics >
     * [82]list of issues >
     * [83]volume 41 , no. 2 >
     * lexicalization and generative power in id35

   article navigation
   [84]previous [85]next
   publication cover

more about computational linguistics

   [86][arrow-button-1488499533633.svg]

journal resources

   [87]editorial info
   [88]abstracting and indexing
   [89]release schedule
   [90]advertising info
     __________________________________________________________________

author resources

   [91]submission guidelines
   [92]publication agreement
   [93]author reprints
     __________________________________________________________________

reader resources

   [94]rights and permissions
   [95]most read
   [96]most cited

metrics

   [97][arrow-button-1488499533633.svg]

article metrics

altmetric

   about article usage data:

   lorem ipsum dolor sit amet, consectetur adipiscing elit. aenean euismod
   bibendum laoreet. proin gravida dolor sit amet lacus accumsan et
   viverra justo commodo. proin sodales pulvinar tempor. cum sociis
   natoque penatibus et magnis dis parturient montes, nascetur ridiculus
   mus.

open access

   [98][arrow-button-1488499533633.svg]
   [open-access-1493356222797.svg]

   computational linguistics computational linguistics is open access. all
   content is freely available in electronic format (full text html, pdf,
   and pdf plus) to readers across the globe. all articles are published
   under a [99]cc by-nc-nd 4.0 license. for more information on allowed
   uses, please view the cc license.
   [100]support oa at mitp

lexicalization and generative power in id35

   [101]marco kuhlmann, [102]alexander koller and [103]giorgio satta
   posted online june 17, 2015
   [104]https://doi.org/10.1162/coli_a_00219

computational linguistics

   volume 41 | issue 2 | june 2015
   p.215-247
   [105][preview-1489555631417.svg] download options
   [arrow-button-1488499533633.svg]

lexicalization and generative power in id35

   [106]marco kuhlmann, [107]alexander koller and [108]giorgio satta
   [109]https://doi.org/10.1162/coli_a_00219
   received: december 04, 2013
   accepted: november 25, 2014
   published online: june 17, 2015
     * [110]full text
     * [111]authors
     * [112]pdf
     * [113]pdf plus

abstract

   section:
   [choose________________________]
   [114]next section

   the weak equivalence of id35 (id35) and
   tree-adjoining grammar (tag) is a central result of the literature on
   mildly context-sensitive grammar formalisms. however, the categorial
   formalism for which this equivalence has been established differs
   significantly from the versions of id35 that are in use today. in
   particular, it allows restriction of combinatory rules on a per grammar
   basis, whereas modern id35 assumes a universal set of rules, isolating
   all cross-linguistic variation in the lexicon. in this article we
   investigate the formal significance of this difference. our main result
   is that lexicalized versions of the classical id35 formalism are
   strictly less powerful than tag.
      2015 association for computational linguistics
   1.   introduction
   section:
   [choose________________________]
   [115]previous section [116]next section

   since the late 1970s, several grammar formalisms have been proposed
   that extend the power of context-free grammars in restricted ways. the
   two most prominent members of this class of    mildly context-sensitive   
   formalisms (a term coined by joshi [117]1985) are tree-adjoining
   grammar (tag; joshi and schabes [118]1997) and combinatory categorial
   grammar (id35; steedman [119]2000; steedman and baldridge [120]2011).
   both formalisms have been applied to a broad range of linguistic
   phenomena, and are being widely used in computational linguistics and
   natural language processing.

   in a seminal paper, vijay-shanker and weir ([121]1994) showed that tag,
   id35, and two other mildly context-sensitive formalisms   head grammar
   (pollard [122]1984) and linear indexed grammar (gazdar [123]1987)   all
   characterize the same class of string languages. however, when citing
   this result it is sometimes overlooked that the result applies to a
   version of id35 that is quite different from the versions that are in
   practical use today. the goal of this article is to contribute to a
   better understanding of the significance of this difference.

   the difference between    classical    id35 as formalized by vijay-shanker
   and weir ([124]1994) and the modern perspective may be illustrated with
   the combinatory rule of backward-crossed composition. the general form
   of this rule looks as follows:

   this rule is frequently used in the analysis of heavy np shift, as in
   the sentence kahn blocked skillfully a powerful shot by rivaldo
   (example from baldridge [125]2002). however, backward crossed
   composition cannot be universally active in english as this would cause
   the grammar to also accept strings such as *a powerful by rivaldo shot,
   which is witnessed by the derivation in [126]figure 1. to solve this
   problem, in the id35 formalism of vijay-shanker and weir ([127]1994),
   one may restrict backward-crossed composition to instances where x and
   y are both verbal categories   that is, functions into the category s of
   sentences (cf. steedman [128]2000, section 4.2.2). with this
   restriction the unwanted derivation in [129]figure 1 can be blocked,
   and a powerful shot by rivaldo is still accepted as grammatical. other
   syntactic phenomena require other grammar-specific restrictions,
   including the complete ban of certain combinatory rules (cf. steedman
   [130]2000, section 4.2.1).
   [131]figure
   figure   1    overgeneration caused by unrestricted backward crossed
   composition.

   over the past 20 years, id35 has evolved to put more emphasis on
   supporting fully lexicalized grammars (baldridge and kruijff [132]2003;
   steedman and baldridge [133]2011), in which as much grammatical
   information as possible is pushed into the lexicon. this follows the
   tradition of other frameworks such as lexicalized tree-adjoining
   grammar (ltag) and head-driven phrase structure grammar (hpsg).
   grammar-specific rule restrictions are not connected to individual
   lexicon entries, and are therefore avoided. instead, recent versions of
   id35 have introduced a new, lexicalized control mechanism in the form of
   modalities or slash types. the basic idea here is that combinatory
   rules only apply if the slashes in their input categories have the
   right types. for instance, the modern version of backward-crossed
   composition (steedman and baldridge [134]2011) takes the following
   form, where    is a slash type that allows crossed but not harmonic
   composition:

   the derivation in [135]figure 1 can now be blocked by assigning the
   slash in the category of powerful a type that is incompatible with   ,
   and thus cannot feed into type-aware backward-crossed composition as an
   input category. this    modalization    of grammatical composition, which
   imports some of the central ideas from the type-logical tradition of
   categorial grammar (moortgat [136]2011) into the id35 framework, is
   attractive because it isolates the control over the applicability of
   combinatory rules in the lexicon. quoting steedman and baldridge
   ([137]2011, p. 186):

   without typed slashes, language-specific restrictions or even bans on
   some combinatory rules are necessary in order to block certain
   ungrammatical word orders. with them, the combinatory rules are truly
   universal: the grammar of every language utilizes exactly the same set
   of rules, without modification, thereby leaving all cross-linguistic
   variation in the lexicon. as such, id35 is a fully lexicalized grammar
   formalism.

   the stated goal is thus to express all linguistically relevant
   restrictions on the use of combinatory rules in terms of lexically
   specified, typed slashes. but to what extent can this goal actually be
   achieved? so far, there have been only partial answers   even when, as in
   the formalism of vijay-shanker and weir ([138]1994), we restrict
   ourselves to the rules of composition, but exclude other rules such as
   type-raising and substitution. baldridge and kruijff ([139]2003) note
   that the machinery of their multi-modal formalism can be simulated by
   rule restrictions, which shows that this version of lexicalized id35 is
   at most as expressive as the classical formalism. at the other end of
   the spectrum, we have shown in previous work that a    pure    form of
   lexicalized id35 with neither rule restrictions nor slash types is
   strictly less expressive (kuhlmann, koller, and satta [140]2010). the
   general question of whether    classical    id35 (rule restrictions) and
      modern    id35 (slash types instead of rule restrictions) are weakly
   equivalent has remained open.

   in this article, we answer this question. our results are summarized in
   [141]figure 2. after setting the stage ([142]section 2), we first
   pinpoint the exact type of rule restrictions that make the classical
   id35 formalism weakly equivalent to tag ([143]section 3). we do so by
   focusing on a class of grammars that we call prefix-closed. unlike the
      pure    grammars that we studied in earlier work, prefix-closed grammars
   do permit rule restrictions (under certain conditions that seem to be
   satisfied by linguistic grammars). we show that the generative power of
   prefix-closed id35 depends on its ability to express target
   restrictions, which are exactly the functions-into type of restrictions
   that are needed to block the derivation in [144]figure 1. we prove that
   the full class of prefix-closed id35s is weakly equivalent to tag, and
   the subclass that cannot express target restrictions is strictly less
   powerful. this result significantly sharpens the picture of the
   generative capacity of id35.
   [145]figure
   figure   2    summary of the results in this article. vw-id35 is the
   formalism of vijay-shanker and weir ([146]1994).

   in a further step ([147]section 4), we then prove that for at least one
   popular incarnation of modern, lexicalized id35, slash types are
   strictly less expressive than rule restrictions. more specifically, we
   look at a variant of id35 consisting of the composition rules
   implemented in openid35 (white [148]2013), the most widely used
   development platform for id35 grammars. we show that this formalism is
   (almost) prefix-closed and cannot express target restrictions, which
   enables us to apply our generative capacity result from the first step.
   the same result holds for (the composition-only fragment of) the
   formalism of baldridge and kruijff ([149]2003). thus we find that, at
   least with existing means, the weak equivalence result of vijay-shanker
   and weir cannot be obtained for lexicalized id35. we conclude the
   article by discussing the implications of our results ([150]section 5).
   2.   background
   section:
   [choose________________________]
   [151]previous section [152]next section

   in this section we provide the technical background of the article. we
   introduce the basic architecture of id35, present the formalism of
   vijay-shanker and weir ([153]1994), and set the points of reference for
   our results about generative capacity.
   2.1   basic architecture of id35

   the two central components of id35 are a lexicon that associates words
   with categories, and rules that specify how categories can be combined.
   taken together, these components give rise to derivations, such as the
   one shown in [154]figure 3.
   [155]figure
   figure   3    a sample derivation (adapted from steedman [156]2012).

   lexicon. a category is a syntactic type that identifies a constituent
   as either    complete    or    incomplete.    the categories of complete
   constituents are taken to be primitives; the categories of incomplete
   constituents are modeled as (curried) functions that specify the type
   and the direction of their arguments. every category is projected from
   the lexicon, which is a finite collection of word   category pairs. to
   give examples (taken from steedman [157]2012), an english intransitive
   verb such as walks has a category that identifies it as a function
   seeking a (subject) noun phrase to its left (indicated by a backward
   slash) and returning a complete sentence; and a transitive verb such as
   admires has a category that identifies it as a function seeking an
   (object) noun phrase to its right (indicated by a forward slash) and
   returning a constituent that acts as an intransitive verb. we denote
   lexical assignment using the    colon equals    operator:

   formally, the set of categories is built over a finite set of atomic
   categories, the primitive syntactic types. it is the smallest set such
   that
   1.   

   if then ;
   2.   

   if then and .
   we use the letters a, b, c to denote atomic categories, the letters x,
   y, z to denote arbitrary categories, and the symbol | to denote slashes
   (forward or backward). we treat slashes as left-associative operators
   and omit unnecessary parentheses. by this convention, every category x
   can be written in the form

   where m     0, a is an atomic category that we call the target of x, and
   the |[i]x[i] are slash   category pairs that we call the arguments of x.
   intuitively, the target of x is the atomic category that is obtained
   after x has been applied to all of its arguments. we use the greek
   letters   ,   ,    to denote (potentially empty) sequences of arguments.
   the number m is called the arity of the category x.

   rules. categories can combine under a number of rules; this gives rise
   to derivations such as the one shown in [158]figure 3. each rule
   specifies an operation that assembles two input categories into an
   output category. the two most basic rules of id35 are the directed
   versions of function application:

   formally, a rule is a syntactic object in which the letters x, y, z act
   as variables for categories. a rule instance is obtained by
   substituting concrete categories for all variables in the rule. for
   example, the derivation in [159]figure 3 contains the following
   instances of function application. we denote rule instances by using a
   triple arrow instead of the double arrow in our notation for rules.

   application rules give rise to derivations equivalent to those of
   context-free grammar. indeed, versions of categorial grammar where
   application is the only mode of combination, such as ab-grammar
   (ajdukiewicz [160]1935; bar-hillel, gaifman, and shamir [161]1960), can
   only generate context-free languages. id35 can be more powerful because
   it also includes other rules, derived from the combinators of
   combinatory logic (curry, feys, and craig [162]1958). in this article,
   as in most of the formal work on id35, we restrict our attention to the
   rules of (generalized) composition, which are based on the b
   combinator.[163]^1

   the general form of composition rules is shown in [164]figure 4. in
   each rule, the two input categories are distinguished into one primary
   (shaded) and one secondary input category. the number n of outermost
   arguments of the secondary input category is called the degree of the
   rule.[165]^2 in particular, for n = 0 we obtain the rules of function
   application. in contexts where we refer to both application and
   composition, we use the latter term for composition rules with degree n
   > 0.
   [166]figure
   figure   4    general form of composition rules (primary input category
   shaded), where n     0 and |[i]     {/, \}.

   derivation trees. derivation trees can now be schematically defined as
   in [167]figure 5. they contain two types of branchings: unary
   branchings correspond to lexicon entries; binary branchings correspond
   to rule instances. the yield of a derivation tree is the left-to-right
   concatenation of its leaves.
   [168]figure
   figure   5    schematic definition of the set of derivation trees of a
   grammar g.
   2.2   classical id35

   we now define the classical id35 formalism that was studied by
   vijay-shanker and weir ([169]1994) and originally introduced by weir
   and joshi ([170]1988). as mentioned in [171]section 1, the central
   feature of this formalism is its ability to impose restrictions on the
   applicability of combinatory rules. specifically, a restricted rule is
   a rule annotated with constraints that
   (a)   

   restrict the target of the primary input category; and/or
   (b)   

   restrict the secondary input category, either in parts or in its
   entirety.
   every grammar lists a finite number of restricted rules (where one and
   the same base rule may occur with several different restrictions). a
   valid rule instance is an instance that is compatible with at least one
   of the restricted rules.

   example 1

   linguistic grammars make frequent use of rule restrictions. to exclude
   the undesired derivation in [172]figure 1 we restricted backward
   crossed composition to instances where both the primary and the
   secondary input category are functions into the category of sentences,
   s. writing target for the function that returns the target of a
   category, the restricted rule can be written as

   in the following definition we write    for the empty string.

   definition 1

   a id35 in the sense of vijay-shanker and weir
   ([173]1994), or vw-id35 for short, is a structure

   where    is a finite vocabulary, is a finite set of atomic categories,
   the lexicon := is a finite relation between the sets   [  ] =        {  } and
   , r is a finite set of (possibly) restricted rules, and is a
   distinguished atomic category.

   a derivation tree of g consists of lexicon entries and valid instances
   of rules from r. the grammar g generates a string w if there exists a
   derivation tree whose yield is w and whose root node is labeled with
   the distinguished atomic category s. the language l(g) generated by g
   is the set of all generated strings.

   example 2

   we specify a vw-id35 that generates the language

   let   [1] = {a, b, c}, , s[1] = s, and let :=[1] consist of the entries

   finally, let r[1] consist of the following rules:
   1.   

   forward and backward application.
   2.   

   forward and backward composition of degree 1.
   3.   

   forward and backward composition of degree 2.
   each of these rules is restricted to instances where the target of the
   primary input category is s. a sample derivation of g[1] is shown in
   [174]figure 6. by contrast, [175]figure 7 shows a derivation that is
   not valid in g[1] because it uses application rules in which the target
   of the primary input category is b or c (rather than s).
   [176]figure
   figure   6    a sample derivation of the grammar g[1] from example 2.
   [177]figure
   figure   7    a derivation rendered ungrammatical by the rule restrictions
   in g[1].

   example 3

   ab-grammar is a categorial grammar formalism in which forward and
   backward application are the only combinatory rules that are allowed.
   furthermore, it does not support rule restrictions.[178]^3 every
   ab-grammar can therefore be written as a vw-id35 that allows all
   instances of application, but no other rules.

   the following lemmas establish two fundamental properties of vw-id35
   that we shall use at several places in this article. both of them are
   minor variants of lemmas proved by vijay-shanker and weir ([179]1994)
   (lemma 3.1 and lemma 3.2) and were previously stated by weir and joshi
   ([180]1988).

   lemma 1

   the set of arguments that occur in the derivations of a vw-id35 is
   finite.

   proof

   no composition rule creates new arguments: every argument that occurs
   in an output category already occurs in one of the input categories.
   therefore, every argument must come from some word   category pair in the
   lexicon, of which there are only finitely many.

   lemma 2

   the set of secondary input categories that occur in the derivations of
   a vw-id35 is finite.

   proof

   every secondary input category is obtained by substituting concrete
   categories for the variables that occur in the non-shaded component of
   one of the rules specified in [181]figure 4. after the substitution,
   all of these categories occur as part of arguments. then, with lemma 1,
   we deduce that the substituted categories come from a finite set. at
   the same time, each grammar specifies a finite set of rules. this means
   that there are only finitely many ways to obtain a secondary input
   category.

   when specifying vw-id35s, we find it convenient sometimes to provide an
   explicit list of valid rule instances, rather than a textual
   description of rule restrictions. for this we use a special type of
   restricted rule that we call templates. a template is a restricted rule
   that simultaneously fixes both
   (a)   

   the target of the primary input category of the rule, and
   (b)   

   the entire secondary input category.
   we illustrate the idea with an example.

   example 4

   we list the templates that correspond to the rule instances in the
   derivation from [182]figure 6. (the grammar allows other instances that
   are not listed here.) we use the symbol     as a placeholder for that
   part of a primary input category that is unconstrained by rule
   restrictions, and therefore may consist of an arbitrary sequence of
   arguments.

   for example, template (1) characterizes backward application (<^0)
   where the target of the primary input category is s and the secondary
   input category is a, and template (4) characterizes forward composition
   of degree 2 (>^2) where the target of the primary input category is s
   and the secondary input category is b/c/b.

   note that every vw-id35 can be specified using a finite set of
   templates: it has a finite set of combinatory rules; the set of
   possible targets of the primary input category of each rule is finite
   because each target is an atomic category; and the set of possible
   secondary input categories is finite because of lemma 2.
   2.3   tree-adjoining grammar

   in this article we are interested in the generative power of id35, in
   particular in its relation to that of tree-adjoining grammar. we
   therefore provide a compact introduction to tag. for more details, we
   refer to joshi and schabes ([183]1997).

   elementary trees. tree-adjoining grammar is a formalism for generating
   trees. these trees can be characterized as rooted, ordered trees in
   which internal nodes are labeled with nonterminal symbols   including a
   distinguished start symbol s   and leaf nodes are labeled with
   nonterminals, terminals, or the empty string. every grammar specifies a
   finite set of such trees; these are called elementary trees. there are
   two types: initial trees and auxiliary trees. they differ in that
   auxiliary trees have a distinguished nonterminal-labeled leaf node,
   called foot node; this node is conventionally marked with an asterisk.
   an elementary tree whose root node is labeled with a nonterminal a is
   called an a-tree.

   substitution and adjunction. new trees may be derived by combining
   other trees using two operations called substitution and adjunction.
   substitution replaces some leaf node of a given tree with an initial
   tree (or a tree derived from an initial tree). adjunction replaces some
   internal node u of a given tree with an auxiliary tree (or a tree
   derived from an auxiliary tree); the subtree with root u replaces the
   foot node of the auxiliary tree. all replacements are subject to the
   condition that the node being replaced and the root of the tree that
   replaces it are labeled with the same nonterminal.

   generated languages. the tree language generated by a tag is the set of
   all trees that can be derived from its initial s-trees. derivations are
   considered complete only if they satisfy additional, node-specific
   constraints. in particular, substitution is obligatory at every node
   where it is possible, and adjunction may be specified as either
   obligatory (oa, obligatory adjunction) or forbidden (na, null
   adjunction) at a given node. in derived trees corresponding to complete
   derivations, all leaf nodes are labeled with terminal symbols. the
   left-to-right concatenation of these symbols forms the yield of the
   tree, and the yields of all trees in the tree language form the string
   language generated by the tag.

   example 5

   [184]figure 8 shows a tag that generates the language l[1] = {a^nb^nc^n
   | n     1} defined in example 2. derivations start with adjoining the
   auxiliary tree t[2] at the root of the initial tree t[1]. new trees can
   be derived by repeatedly adjoining t[2] at an s-node.
   [185]figure
   figure   8    a tag that generates the language l[1] = {a^nb^nc^n | n     1}.
   2.4   generative capacity of classical id35

   vijay-shanker and weir ([186]1994) proved the following:

   theorem 1

   vw-id35 and tag are weakly equivalent.

   the inclusion of the vw-id35 languages in the tag languages follows from
   a chain of inclusions that connects vw-id35 and tag via linear indexed
   grammar (lig; gazdar [187]1987) and head grammar (hg; pollard
   [188]1984). all of these inclusions were proved by vijay-shanker and
   weir ([189]1994). here we sketch a proof of the inclusion of the tag
   languages in the vw-id35 languages. our proof closely follows that of
   weir ([190]1988, section 5.2.2), whose construction we shall return to
   when establishing our own results.

   lemma 3

   the tag languages are included in the vw-id35 languages.

   proof (sketch)

   we are given a tag g and construct a weakly equivalent vw-id35 g   . the
   basic idea is to make the lexical categories of g    correspond to the
   elementary trees of g, and to set up the combinatory rules and their
   restrictions in such a way that the derivations of g    correspond to
   derivations of g.

   vocabulary, atomic categories. the vocabulary of g    is the set of all
   terminal symbols of g; the set of atomic categories consists of all
   symbols of the form a^t, where either a is a nonterminal symbol of g
   and t     {a, c}, or a is a terminal symbol of g and t = a. the
   distinguished atomic category of g    is s^a, where s is the start symbol
   of g.

   lexicon. one may assume (cf. vijay-shanker, weir, and joshi [191]1986)
   that g is in the normal form shown in [192]figure 9. in this normal
   form there is a single initial s-tree, and all remaining elementary
   trees are auxiliary trees of one of five possible types. for each such
   tree, one constructs two lexicon entries for the empty string    as
   specified in [193]figure 9. additionally, for each terminal symbol x of
   g, one constructs a lexicon entry x := x^a.
   [194]figure
   figure   9    correspondence between elementary trees and lexical
   categories in the proof of lemma 3.

   rules. the rules of g    are forward and backward application and forward
   and backward composition of degree at most 2. they are used to simulate
   adjunction operations in derivations of g: application simulates
   adjunction into nodes to the left or right of the foot node;
   composition simulates adjunction into nodes above the foot node.
   without restrictions, these rules would allow derivations that do not
   correspond to derivations of g. therefore, rules are restricted such
   that an argument of the form |a^t can be eliminated by means of an
   application rule only if t = a, and by means of a composition rule only
   if t = c. this enforces two properties that are central for the
   correctness of the construction (weir [195]1988, p. 119): first, the
   secondary input category in every instance of composition is a category
   that has just been introduced from the lexicon. second, categories
   cannot be combined in arbitrary orders. the rule restrictions are:
   1.   

   forward and backward application are restricted to instances where both
   the target of the primary input category and the entire secondary input
   category take the form a^a.
   2.   

   forward and backward composition are restricted to instances where the
   target of the primary input category takes the form a^a and the target
   of the secondary input category takes the form a^c.
   using our template notation, the restricted rules can be written as in
   [196]figure 10.
   [197]figure
   figure   10    restricted rules used in the proof of lemma 3. we write for
   the union of the nonterminal symbols and terminal symbols of the tag g,
   and let , t     {a, c}.

   as an aside we note that the proof of lemma 3 makes heavy use of the
   ability of vw-id35 to assign lexicon entries to the empty string. such
   lexicon entries violate one of the central linguistic principles of
   id35, the principle of adjacency, according to which combinatory rules
   may only apply to phonologically realized entities (steedman [198]2000,
   p. 54). it is an interesting question for future research whether a
   version of vw-id35 without lexicon entries for the empty string remains
   weakly equivalent to tag.
   3.   relevance of target restrictions in prefix-closed id35
   section:
   [choose___________________________]
   [199]previous section [200]next section

   in this section we present the central technical results of this
   article. we study a class of vw-id35s that we call prefix-closed and
   show that for this class, weak equivalence with tag stands and falls
   with the ability to specify target restrictions.
   3.1   prefix-closed grammars

   rule restrictions are important tools in grammars for natural language;
   but not all of their potential uses have obvious linguistic
   motivations. for instance, one could write a grammar that permits all
   compositions with a functional category a/b as the secondary input
   category, but rules out application with the    shorter    category a. such
   constraints do not seem to be used in linguistically motivated
   grammars; for example, none of the grammars developed by steedman
   ([201]2000) needs them. in prefix-closed grammars, this use of rule
   restrictions is explicitly barred.

   definition 2

   a vw-id35 is prefix-closed if it satisfies the following implication:

   and similarly for backward rules.

   note that prefix-closed grammars still allow some types of rule
   restrictions. the crucial property is that, if a certain combinatory
   rule applies at all, then it also applies to combinations where the
   secondary input category has already been applied to some (k     n) or
   even all (k > n) of its arguments.

   example 6

   we illustrate prefix-closedness using some examples:
   1.   

   every ab-grammar (when seen as a vw-id35) is trivially prefix-closed; in
   these grammars, n = 0.
   2.   

   the    pure    grammars that we considered in our earlier work (kuhlmann,
   koller, and satta [202]2010) are trivially prefix-closed.
   3.   

   the grammar g[1] from example 2 is prefix-closed.
   4.   

   the grammars constructed in the proof of lemma 3 are not prefix-closed;
   they do not allow the following instances of application, where the
   secondary input category is of the form b^c (rather than b^a):

   example 7

   the linguistic intuition underlying prefix-closed grammars is that if
   such a grammar allows us to delay the combination of a functor and its
   argument (via composition), then it also allows us to combine the
   functor and its argument immediately (via application). to illustrate
   this intuition, consider [203]figure 11, which shows two derivations
   related to the discussion of word order in swiss german subordinate
   clauses (shieber [204]1985):

   derivation (5) (simplified from steedman and baldridge [205]2011, p.
   201) starts by composing the tensed verb h  lfed into the infinitive
   aastriche and then applies the resulting category to the accusative
   argument of the infinitive, es huus. prefix-closedness implies that, if
   the combination of h  lfed and aastriche is allowed when the latter is
   still waiting for es huus, then it must also be allowed if es huus has
   already been found. thus prefix-closedness predicts derivation (6), and
   along with it the alternative word order

   this word order is in fact grammatical (shieber [206]1985, pp.
   338   339).
   [207]figure
   figure   11    prefix-closedness predicts different word orders for swiss
   german subordinate clauses.
   3.2   generative capacity of prefix-closed grammars

   we now show that the restriction to prefix-closed grammars does not
   change the generative capacity of vw-id35.

   theorem 2

   prefix-closed vw-id35 and tag are weakly equivalent.

   proof

   every prefix-closed vw-id35 is a vw-id35, therefore the inclusion follows
   from theorem 1. to show that every tag language can be generated by a
   prefix-closed vw-id35, we recall the construction of a weakly equivalent
   vw-id35 for a given tag that we sketched in the proof of lemma 3. as
   already mentioned in example 6, the grammar g    constructed there is not
   prefix-closed. however, we can make it prefix-closed by explicitly
   allowing the    missing    rule instances:

   we shall now argue that this modification does not actually change the
   language generated by g   . the only categories that qualify as secondary
   input categories of the new instances are atomic categories of the form
   b^c where b is a nonterminal of the tag g. now the lexical categories
   of g    either are of the form x^a (where x is a terminal symbol) or are
   non-atomic. categories of the form b^c are not among the derived
   categories of g    either, as the combinatory rules only yield output
   categories whose targets have the form b^a. this means that the new
   rule instances can never be used in a complete derivation of g   , and
   therefore do not change the generated language. thus we have a
   construction that turns a tag into a weakly equivalent prefix-closed
   vw-id35.
   3.3   prefix-closed grammars without target restrictions

   in this section we shall see that the weak equivalence between
   prefix-closed vw-id35 and tag depends on the ability to restrict the
   target of the primary input category in a combinatory rule. these are
   the restrictions that we referred to as constraints of type (a) in
   [208]section 2.2. we say that a grammar that does not make use of these
   constraints is without target restrictions. this property can be
   formally defined as follows.

   definition 3

   a vw-id35 is without target restrictions if it satisfies the following
   implication:

   and similarly for backward rules.

   example 8

   1.   

   every ab-grammar is without target restrictions; it allows forward and
   backward application for every primary input category.
   2.   

   the grammar g[1] from example (2) is not without target restrictions,
   because its rules are restricted to primary input categories with
   target s.

   target restrictions on the primary input category are useful in id35s
   for natural languages; recall our discussion of backward-crossed
   composition in [209]section 1. as we shall see, target restrictions are
   also relevant from a formal point of view: if we require vw-id35s to be
   without target restrictions, then we lose some of their weak generative
   capacity. this is the main technical result of this article. for its
   proof we need the following standard concept from formal language
   theory:

   definition 4

   two languages l and l    are parikh-equivalent if for every string w     l
   there exists a permuted version w    of w such that w        l   , and vice
   versa.

   theorem 3

   the languages generated by prefix-closed vw-id35 without target
   restrictions are properly included in the tag languages.

   proof

   every prefix-closed vw-id35 without target restrictions is a vw-id35, so
   the inclusion follows from theorem 1. to see that the inclusion is
   proper, consider the tag language l[1] = {a^nb^nc^n | n     1} from
   example 5. we are interested in sublanguages l        l[1] that are
   parikh-equivalent to the full language l[1]. this property is trivially
   satisfied by l[1] itself. moreover, it is not hard to see that l[1] is
   in fact the only sublanguage of l[1] that has this property. now in
   [210]section 3.4 we shall prove a central lemma (lemma 6), which
   asserts that, if we assume that l[1] is generated by a prefix-closed
   vw-id35 without target restrictions, then at least one of the
   parikh-equivalent sublanguages of l[1] must be context-free. because
   l[1] is the only such sublanguage, this would give us proof that l[1]
   is context-free; but we know it is not. therefore we conclude that l[1]
   is not generated by a prefix-closed vw-id35 without target restrictions.

   before turning to the proof of the central lemma (lemma 6), we
   establish two other results about the languages generated by grammars
   without target restrictions.

   lemma 4

   the languages generated by prefix-closed vw-id35 without target
   restrictions properly include the context-free languages.

   proof

   inclusion follows from the fact that ab-grammars (which generate all
   context-free languages) are prefix-closed vw-id35s without target
   restrictions. to see that the inclusion is proper, consider a grammar
   g[2] that is like g[1] but does not have any rule restrictions. this
   grammar is trivially prefix-closed and without target restrictions; it
   is actually    pure    in the sense of kuhlmann, koller, and satta
   ([211]2010). the language l[2] = l(g[2]) contains all the strings in
   l[1] = {a^nb^nc^n | n     1}, together with other strings, including the
   string bbbacacac, whose derivation we showed in [212]figure 7. it is
   not hard to see that all of these additional strings have an equal
   number of as, bs, and cs. we can therefore write l[1] as an
   intersection of l[2] and a regular language: l[1] = l[2]     a*b*c*. to
   obtain a contradiction, suppose that l[2] is context-free; then because
   of the fact that context-free languages are closed under intersection
   with regular languages, the language l[1] would be context-free as
   well   but we know it is not. therefore we conclude that l[2] is not
   context-free either.

   lemma 5

   the class of languages generated by prefix-closed vw-id35 without target
   restrictions is not closed under intersection with regular languages.

   proof

   if the class of languages generated by prefix-closed vw-id35 without
   target restrictions was closed under intersection with regular
   languages, then with l[2] (the language mentioned in the previous
   proof) it would also include the language l[1] = l[2]     a*b*c*.
   however, from the proof of theorem 3 we know that l[1] is not generated
   by any prefix-closed vw-id35 without target restrictions.
   3.4   proof of the main lemma for vw-id35

   we shall now prove the central lemma that we used in the proof of
   theorem 3.

   lemma 6 (main lemma for vw-id35)

   for every language l that is generated by some prefix-closed vw-id35
   without target restrictions, there is a sublanguage l        l[1] such that
   1.   

   l    and l are parikh-equivalent, and
   2.   

   l    is context-free.

   throughout this section, we let g be some arbitrary prefix-closed
   vw-id35 without target restrictions. the basic idea is to transform the
   derivations of g into a certain special form, and to prove that the
   transformed derivations yield a context-free language. the
   transformation is formalized by the rewriting system in [213]figure
   12.[214]^4 to see how the rules of this system work, consider rule r1;
   the other rules are symmetric. rule r1 rewrites an entire derivation
   into another derivation. it states that, whenever we have a situation
   where a category of the form x/y is combined with a category of the
   form y  /z by means of composition, and the resulting category is
   combined with a category z by means of application, then we may just as
   well first combine y  /z with z, and then use the resulting category as
   a secondary input category together with x/y.
   [215]figure
   figure   12    rewriting rules used in the transformation.

   note that r1 and r2 produce a new derivation for the original sentence,
   whereas r3 and r4 produce a derivation that yields a permutation of
   that sentence: the order of the substrings corresponding to the
   categories z and x/y (in the case of rule r3) or x\y (in the case of
   rule r4) is reversed. in particular, r3 captures the relation between
   the two derivations of swiss german word orders shown in [216]figure
   11: applying r3 to derivation (5) gives derivation (6). importantly
   though, while the transformation may reorder the yield of a derivation,
   every transformed derivation still is a derivation of g.

   example 9

   if we take the derivation in [217]figure 6 and exhaustively apply the
   rewriting rules from [218]figure 12, then the derivation that we obtain
   is the one in [219]figure 7. note that although the latter derivation
   is not grammatical with respect to the grammar g[1] from example 2, it
   is grammatical with respect to the grammar g[2] from the proof of lemma
   4, which is without target restrictions.

   it is instructive to compare the rewriting rules in [220]figure 12 to
   the rules that establish the normal form of eisner ([221]1996). this
   normal form is used in practical id35 parsers to solve the problem of
      spurious ambiguity,    where one and the same semantic interpretation
   (which in id35 takes the form of a lambda term) has multiple syntactic
   derivation trees. it is established by rewriting rules such as the
   following:

   the rules in [222]figure 12 have much in common with the eisner rules;
   yet there are two important differences. first, as already mentioned,
   our rules (in particular, rules r3 and r4) may reorder the yield of a
   derivation, whereas eisner's normal form preserves yields. second, our
   rules decrease the degrees of the involved composition operations,
   whereas eisner's rules may in fact increase them. to see this, note
   that the left-hand side of derivation (7) involves a composition of
   degree |  | + 1 (   ), whereas the right-hand side involves a composition
   of degree |  | + |  | (      ). this means that rewriting will increase the
   degree in situations where |  | > 1. in contrast, our rules only fire in
   the case where the combination with z happens by means of an
   application, that is, if |  | = 0. under this condition, each rewrite
   step is guaranteed to decrease the degree of the composition. we will
   use this observation in the proof of lemma 7.
   3.4.1   properties of the transformation

   the next two lemmas show that the rewriting system in [223]figure 12
   implements a total function on the derivations of g.

   lemma 7

   the rewriting system is terminating and confluent: rewriting a
   derivation ends after a finite number of steps, and different rewriting
   orders all result in the same output.

   proof

   to argue that the system is terminating, we note that each rewriting
   step decreases the arity of one secondary input category in the
   derivation by one unit, while all other secondary input categories are
   left unchanged. as an example, consider rewriting under r1. the
   secondary input categories in the scope of that rule are y  /z and z on
   the left-hand side and y    and z on the right-hand side. here the arity
   of y    equals the arity of y  /z, minus one. because the system is
   terminating, to see that it is also confluent, it suffices to note that
   the left-hand sides of the rewrite rules do not overlap.

   lemma 8

   the rewriting system transforms derivations of g into derivations of g.

   proof

   we prove the stronger result that every rewriting step transforms
   derivations of g into derivations of g. we only consider rewriting
   under r1; the arguments for the other rules are similar. assume that r1
   is applied to a derivation of g. the rule instances in the scope of the
   left-hand side of r1 take the following form:

   turning to the right-hand side, the rule instances in the rewritten
   derivation are

   the relation between instances (8) and (11) is the characteristic
   relation of prefix-closed grammars (definition 2): if instance (8) is
   valid, then because g is prefix-closed, instance (11) is valid as well.
   similarly, the relation between instances (9) and (10) is the
   characteristic relation of grammars without target restrictions
   (definition 3): if instance (9) is valid, then because g is without
   target restrictions, instance (10) is valid as well. we conclude that
   if r1 is applied to a derivation of g, then the result is another
   derivation of g.

   combining lemma 7 and lemma 8, we see that for every derivation d of g,
   exhaustive application of the rewriting rules produces another uniquely
   determined derivation of g. we shall refer to this derivation as r(d).
   a transformed derivation is any derivation d    such that d    = r(d) for
   some derivation d.
   3.4.2   language inclusion and parikh-equivalence

   lemma 9

   the yields of the transformed derivations are a subset of and
   parikh-equivalent to l(g).

   proof

   let be the set of yields of the transformed derivations. every string
   is obtained from a string w     l(g) by choosing some derivation d of w,
   rewriting this derivation into the transformed derivation r(d), and
   taking the yield. inclusion then follows from lemma 8. because of the
   permuting rules r3 and r4, the strings w and w    will in general be
   different. what we can say, however, is that w and w    will be equal up
   to permutation. thus we have established that and l(g) are
   parikh-equivalent.

   what remains in order to prove lemma 6 is to show that the yields of
   the transformed derivations form a context-free language.
   3.4.3   context-freeness of the sublanguage

   in a derivation tree, every node except the root node is labeled with
   either the primary or the secondary input category of a combinatory
   rule. we refer to these two types of nodes as primary nodes and
   secondary nodes, respectively. to simplify our presentation, we shall
   treat the root node as a secondary node. we restrict our attention to
   derivation trees for strings in l(g); in these trees, the root node is
   labeled with the distinguished atomic category s. for a leaf node u,
   the projection path of u is the path that starts at the parent of u and
   ends at the first secondary node that is encountered on the way towards
   the root node. we denote a projection path as a sequence x[1],    , x[n]
   (n     1), where x[1] is the category at the parent of u and x[n] is the
   category at the secondary node. note that the category x[1] is taken
   from the lexicon, while every other category is derived by combining
   the preceding category on the path with some secondary input category
   (not on the path) by means of some combinatory rule.

   example 10

   in the derivation in [224]figure 6, the projection path of the first b
   goes all the way to the root, while all other projection paths have
   length 1, starting and ending with a lexical category. in [225]figure
   7, the projection path of the first b ends at the root, while the
   projection paths of the remaining bs end at the nodes with category b,
   and the projection paths of the cs end at the nodes with category c.

   a projection path x[1],    , x[n] is split if it can be segmented into
   two parts

   such that the first part only uses application rules and the second
   part only uses composition rules. note that any part may consist of a
   single category only, in which case no combinatory rule is used in that
   part. if n = 1, then the path is trivially split. all projection paths
   in [226]figures 6 and [227]7 are split, except for the path of the
   first b in [228]figure 6, which alternates between composition (with
   c\a) and application (with a).

   lemma 10

   in transformed derivations, every projection path is split.

   proof

   we show that as long as a derivation d contains a projection path that
   is not split, it can be rewritten. a projection path that is not split
   contains three adjacent categories u, v, w, such that v is derived by
   means of a composition with primary input u, and w is derived by means
   of an application with primary input v. suppose that both the
   composition and the application are forward. (the arguments for the
   other three cases are similar.) then u can be written as x/y for some
   category x and argument /y, v can be written as x  /z for some argument
   /z and some (possibly empty) sequence of arguments   , and w can be
   written as x  . we can then convince ourselves that d contains the
   following configuration, which matches the left-hand side of rewriting
   rule r1:

   lemma 11

   the set of all categories that occur in transformed derivations is
   finite.

   proof

   every category that occurs in transformed derivations occurs on some of
   its projection paths. consider any such path. by lemma 10 we know that
   this path is split; its two parts, here called p[1] and p[2], are
   visualized in [229]figure 13. we now reason about the arities of the
   categories in these two parts.
   1.   

   because p[1] only uses application, the arities in this part get
   smaller and smaller until they reach their minimum at x[s]. this means
   that the arities of p[1] are bounded by the arity of the first category
   on the path, which is a category from the lexicon.
   2.   

   because p[2] only uses composition, the arities in this part either get
   larger or stay the same until they reach a maximum at x[n]. this means
   that the arities of p[2] are bounded by the arity of the last category
   on the path, which is either the distinguished atomic category s or a
   secondary input category.
   thus the arities of our chosen path are bounded by the maximum of three
   grammar-specific constants: the maximal arity of a lexical category,
   the arity of s (which is 0), and the maximal arity of a secondary input
   category. the latter value is well-defined because there are only
   finitely many such categories (by lemma 2). let k be the maximum among
   the three constants, and let be the set of all categories of the form
   a|[m]x[m]     |[1]x[1] where a is an atomic category of g, m     k, and
   each |[i]x[i] is an argument that may occur in derivations of g. the
   set contains all categories that occur on some projection path, and
   therefore all categories that occur in transformed derivations, but it
   may also include other categories. as there are only finitely many
   atomic categories and finitely many arguments (lemma 1), we conclude
   that the set , and hence the set of categories that occur in
   transformed derivations, are finite as well.
   [230]figure
   figure   13    illustration of the argument used in the proof of lemma 11.

   lemma 12

   the transformed derivations yield a context-free language.

   proof

   we construct a context-free grammar h that generates the set of yields
   of the transformed derivations. to simplify the presentation, we first
   construct a grammar h    that generates a superset of .

   construction of h   . the construction of the grammar h    is the same as
   the construction in the classical proof that showed the
   context-freeness of ab-grammars, by bar-hillel, gaifman, and shamir
   ([231]1960): the production rules of h    are set up to correspond to the
   valid rule instances of g. the reason that this construction is not
   useful for vw-id35s in general is that these may admit infinitely many
   rule instances, whereas a context-free grammar can only have finitely
   many productions. the set of rule instances may be infinite because
   vw-id35 has access to composition rules (specifically, rules of degrees
   greater than 1); in contrast, ab-grammars are restricted to
   application. crucially though, by lemma 11 we know that as long as we
   are interested only in transformed derivations it is sufficient to use
   a finite number of rule instances   more specifically those whose input
   and output categories are included in the set of arity-bounded
   categories. thus for every instance x/y y       x   where all three
   categories are in , we construct a production

   and similarly for backward rules. (we enclose categories in square
   brackets for clarity.) in addition, for every lexicon entry    := x in g
   we add to h    a production [x]       . as the terminal alphabet of h    we
   choose the vocabulary of g; as the nonterminal alphabet we choose the
   set ; and as the start symbol we choose the distinguished atomic
   category s. every transformed derivation of g corresponds (in an
   obvious way) to some derivation in h   , which proves that . conversely,
   every derivation of h    represents a derivation of g (though not
   necessarily a transformed derivation), thus l(h   )     l(g).

   construction of h. the chain of inclusions is sufficient to prove lemma
   6: because and l(g) are parikh-equivalent (which we observed at the
   beginning of [232]section 3.4.2), so are l(h   ) and l(g), which means
   that l(h   ) satisfies all of the properties claimed in lemma 6, even
   though this does not suffice to prove our current lemma. however, once
   h    is given, it is not hard to also obtain a grammar h that generates
   exactly . for this, we need to filter out derivations whose projection
   paths do not have the characteristic property of transformed
   derivations that we established in lemma 10. (it is not hard to see
   that every derivation that does have this property is a transformed
   derivation.) we annotate the left-hand side nonterminals in the
   productions of h    with a flag t     {a, c} to reflect whether the
   corresponding category has been derived by means of application (t = a)
   or composition (t = c); the value of this flag is simply the type of
   combinatory rule that gave rise to the production. the nonterminals in
   the right-hand sides are annotated in all possible ways, except that
   the following combinations are ruled out:

   these combinations represent exactly the cases where the output
   category of a composition rule is used as the primary input category of
   an application rule, which are the cases that violate the    split   
   property that we established in lemma 10.

   this concludes the proof of lemma 6, and therefore the proof of theorem
   3.
   3.5   discussion

   theorem 3 pinpoints the exact mechanism that vw-id35 uses to achieve
   weak equivalence to tag: at least for the class of prefix-closed
   grammars, tag equivalence is achieved if and only if we allow target
   restrictions. although target restrictions are frequently used in
   linguistically motivated grammars, it is important and perhaps
   surprising to realize that they are indeed necessary to achieve the
   full generative capacity of vw-id35.

   in the grammar formalisms folklore, the generative capacity of id35 is
   often attributed to generalized composition, and indeed we have seen
   (in lemma 4) that even grammars without target restrictions can
   generate non-context-free languages such as l(g[2]). however, our
   results show that composition by itself is not enough to achieve weak
   equivalence with tag: the yields of the transformed derivations from
   [233]section 3.4 form a context-free language despite the fact that
   these derivations may still contain compositions, including
   compositions of degree n > 2. in addition to composition, vw-id35 also
   needs target restrictions to exert enough control on word order to
   block unwanted permutations. one way to think about this is that target
   restrictions can enforce alternations of composition and application
   (as in the derivation shown in [234]figure 6), while transformed
   derivations are characterized by projection paths without such
   alternations (lemma 10).

   we can sharpen the picture even more by observing that the target
   restrictions that are crucial for the generative capacity of vw-id35 are
   not those on generalized composition, but those on function
   application. to see this we can note that the proof of lemma 8 goes
   through also only if application rules such as (9) and (10) are without
   target restrictions. this means that we have the following
   qualification of theorem 1.

   lemma 13

   prefix-closed vw-id35 is weakly equivalent to tag only because it
   supports target restrictions on forward and backward application.

   this finding is unexpected indeed   for instance, no grammar in steedman
   ([235]2000) uses target restrictions on the application rules.
   4.   generative capacity of multimodal id35
   section:
   [choose___________________________]
   [236]previous section [237]next section

   after clarifying the mechanisms that    classical    id35 uses to achieve
   weak equivalence with tag, we now turn our attention to    modern,   
   multimodal versions of id35 (baldridge and kruijff [238]2003; steedman
   and baldridge [239]2011). these versions emphasize the use of fully
   lexicalized grammars in which no rule restrictions are allowed, and
   instead equip slashes with types in order to control the use of the
   combinatory rules. our central question is whether the use of slash
   types is sufficient to recover the expressiveness that we lose by
   giving up rule restrictions.

   we need to fix a specific variant of multimodal id35 to study this
   question formally. published works on multimodal id35 differ with
   respect to the specific inventories of slash types they assume. some
   important details, such as a precise definition of generalized
   composition with slash types, are typically not discussed at all. in
   this article we define a variant of multimodal id35 which we call o-id35.
   this formalism extends our definition of vw-id35 (definition 1) with the
   slash inventory and the composition rules of the popular openid35
   grammar development system (white [240]2013). our technical result is
   that the main lemma (lemma 6) also holds for o-id35. with this we can
   conclude that the answer to our question is negative: slash types are
   not sufficient to replace rule restrictions; o-id35 is strictly less
   powerful than tag. although this is primarily a theoretical result, at
   the end of this section we also discuss its implications for practical
   grammar development.
   4.1   multimodal id35

   we define o-id35 as a formalism that extends vw-id35 with the slash types
   of openid35, but abandons rule restrictions. note that openid35 has a
   number of additional features that affect the generative capacity; we
   discuss these in [241]section 4.4.

   slash types. like other incarnations of multimodal id35, o-id35 uses an
   enriched notion of categories where every slash has a type. there are
   eight such types:[242]^5

   the basic idea behind these types is as follows. slashes with type *
   can only be used to instantiate application rules. type     also licenses
   harmonic composition rules, and type    also licenses crossed
   composition rules. type    is the least restrictive type and can be used
   to instantiate all rules. the remaining types refine the system by
   incorporating a dimension of directionality. the exact type   rule
   compatibilities are specified in [243]figure 14.
   [244]figure
   figure   14    compatibility of slash types with combinatory rules.

   inertness. o-id35 is distinguished from other versions of multimodal
   id35, such as that of baldridge and kruijff ([245]2003), in that every
   slash not only has a type but also an inertness status. inertness was
   introduced by baldridge ([246]2002, section 8.2.2) as an implementation
   of the    antecedent government    (ant) feature of steedman ([247]1996),
   which is used to control the word order in certain english relative
   clauses. it is a two-valued feature. arguments whose slash type has
   inertness status + are called active; arguments whose slash type has
   inertness status     are called inert. only active arguments can be
   eliminated by means of combinatory rules; however, an inert argument
   can still be consumed as part of a secondary input category. for
   example, the following instance of application is valid because the
   outermost slash of the primary input category has inertness status +:

   we use the notations and to denote the forward and backward slashes
   with slash type t and inertness status s.

   rules. all o-id35 grammars share a fixed set of combinatory rules, shown
   in [248]figure 15. every grammar uses all rules, up to some
   grammar-specific bound on the degree of generalized composition. as
   mentioned earlier, a combinatory rule can only be instantiated if the
   slashes of the input categories have compatible types. additionally,
   all composition rules require the slashes of the secondary input
   category to have a uniform direction. this is a somewhat peculiar
   feature of openid35, and is in contrast to vw-id35 and other versions of
   id35, which also allow composition rules with mixed directions.
   [249]figure
   figure   15    the rules of o-id35. for a rule to apply, all slashes in the
   scope of the rule must have one of the specified compatible types (cf.
   figure 14). the predicates left(t)/right(t) are true if and only if t
   is equal to either a left/right type or one of the four undirected core
   types.

   composition rules are classified into harmonic and crossed forms. this
   distinction is based on the direction of the slashes in the secondary
   input category. if these have the same direction as the outermost slash
   of the primary input category, then the rule is called harmonic;
   otherwise it is called crossed.[250]^6

   when a rule is applied, in most cases the arguments of the secondary
   input category are simply copied into the output category, as in
   vw-id35. the one exception happens for crossed composition rules if not
   all slash directions match the direction of their slash type (left or
   right). in this case, the arguments of the secondary input category
   become inert. thus the inertness status of an argument may change over
   the course of a derivation   but only from active to inert, not back
   again.

   definition 5

   a multimodal id35 in the sense of openid35, or
   o-id35 for short, is a structure

   where    is a finite vocabulary, is a finite set of atomic categories,
   := is a finite relation between    and the set of (multimodal)
   categories over , d     0 is the maximal degree of generalized
   composition, and s     a is a distinguished atomic category.

   we generalize the notions of rule instances, derivation trees, and
   generated language to categories over slashes with types and inertness
   statuses in the obvious way: instead of two slashes, we now have one
   slash for every combination of a direction, type, and inertness status.
   similarly, we generalize the concepts of a grammar being prefix-closed
   (definition 2) and without target restrictions (definition 3) to o-id35.
   4.2   generative capacity

   we now investigate the generative capacity of o-id35. we start with the
   (unsurprising) observation that o-id35 can describe non-context-free
   languages.

   lemma 14

   the languages generated by o-id35 properly include the context-free
   languages.

   proof

   inclusion follows from the fact that every ab-grammar can be written as
   an o-id35 with only application (d = 0). to show that the inclusion is
   proper, we use the same argument as in the proof of lemma 4. the
   grammar g[2] that we constructed there can be turned into an equivalent
   o-id35 by decorating each slash with   , the least restrictive type, and
   setting its inertness status to +.

   what is less obvious is whether o-id35 generates the same class of
   languages as vw-id35 and tag. our main result is that this is not the
   case.

   theorem 4

   the languages generated by o-id35 are properly included in the tag
   languages.

   o-id35 without inertness. to approach theorem 4, we set inertness aside
   for a moment and focus on the use of the slash types as a mechanism for
   imposing rule restrictions. each of the rules in [251]figure 15
   requires all of the slash types of the n outermost arguments of its
   secondary input category to be compatible with the rule, in the sense
   specified in [252]figure 14. if we now remove one or more of these
   arguments from a valid rule instance, then the new instance is clearly
   still valid, as we have reduced the number of potential violations of
   the type   rule compatibility. this shows that the rule system is
   prefix-closed. as none of the rules is conditioned on the target of the
   primary input category, the rule system is even without target
   restrictions. with these two properties established, theorem 4 can be
   proved by literally the same arguments as those that we gave in
   [253]section 3. thus we see directly that the theorem holds for
   versions of multi-modal id35 without inertness, such as the formalism of
   baldridge and kruijff ([254]2003).

   o-id35 with inertness. in the general case, the situation is complicated
   by the fact that the crossed composition rules change the inertness
   status of some argument categories if the slash types have conflicting
   directions. this means that the crossed composition rules in o-id35 are
   not entirely prefix-closed, as illustrated by the following example.

   example 11

   consider the following two rule instances:

   instance (12) is a valid instance of forward crossed composition.
   prefix-closedness would require instance (13) to be valid as well; but
   it is not. in instance (12) the inertness status of is changed for the
   only reason that the slash type of does not match the required
   direction. in instance (13) the argument is not present, and therefore
   the inertness status of is not changed, but is carried over to the
   output category.

   we therefore have to prove that the following analogue of lemma 6 holds
   for o-id35:

   lemma 2 (main lemma for o-id35)

   for every language l generated by some o-id35 there is a sublanguage l   
       l such that
   1.   

   l    and l are parikh-equivalent, and
   2.   

   l    is context-free.
   this lemma implies that the language l[1] = {a^nb^nc^n | n     1} from
   example 2 cannot be generated by o-id35 (but by prefix-closed vw-id35
   with target restrictions, and by tag). the argument is the same as in
   the proof of theorem 3.
   4.3   proof of the main lemma for o-id35

   the proof of lemma 15 adapts the rewriting system from [255]figure 12.
   we simply let each rewriting step copy the type and inertness status of
   each slash from the left-hand side to the right-hand side of the
   rewriting rule. with this change, it is easy to verify that the proofs
   of lemma 7 (termination and confluence), lemma 10 (projection paths in
   transformed derivations are split), lemma 11 (transformed derivations
   contain a finite number of categories), and lemma 12 (transformed
   derivations yield a context-free language) go through without problems.
   the proof of lemma 8, however, is not straightforward, because of the
   dynamic nature of the inertness statuses. we therefore restate the
   lemma for o-id35:

   lemma 16

   the rewriting system transforms o-id35 derivations into o-id35
   derivations.

   proof

   as in the proof of lemma 8 we establish the stronger result that the
   claimed property holds for every single rewriting step. we only give
   the argument for rewriting under r3, which involves instances of
   forward crossed composition. the argument for r4 is analogous, and r1
   and r2 are simpler cases because they involve harmonic composition,
   where the inertness status does not change.

   suppose that r3 is applied to a derivation of some o-id35. in their most
   general form, the rule instances in the scope of the left-hand side of
   r3 may be written as follows, where the function    is defined as
   specified in [256]figure 15:

   here instance (14) is an instance of forward-crossed composition, so
   each of the types t[i] is compatible with that rule. because the two
   marked arguments are identical, we have   (s[1]) = +. this is only
   possible if the inertness statuses of the slashes do not change in the
   context of derivation (14), that is, if   (s[i]) = s[i] for all 1     i    
   n. note that in this case, t[0] is either a right type or one of the
   four undirected core types, and each t[1],     , t[n] is either a left
   type or a core type. we can now alternatively write instances (14) and
   (15) as

   then the rule instances in the rewritten derivation can be written as
   follows:

   here instance (16) is clearly a valid instance of backward application.
   based on our earlier observations about the t[i] and their
   compatibility with crossed composition, we also see that instance (17)
   is a valid instance of forward crossed composition (if n > 1), or of
   forward application (if n = 1).

   this completes the proof of lemma 15. to finish the proof of theorem 4
   we have to also establish the inclusion of the o-id35 languages in the
   tag languages. this is a known result for other dialects of multimodal
   id35 (baldridge and kruijff [257]2003), but o-id35 once again requires
   some extra work because of inertness.

   lemma 17

   the o-id35 languages are included in the tag languages.

   proof (sketch)

   it suffices to show that the o-id35 languages are included in the class
   of languages generated by lig (gazdar [258]1987); the claim then
   follows from the weak equivalence of lig and tag. vijay-shanker and
   weir ([259]1994, [260]section 3.1) present a construction that
   transforms an arbitrary vw-id35 into a weakly equivalent lig. it is
   straightforward to adapt their construction to o-id35. as we do not have
   the space here to define lig, we only provide a sketch of the adapted
   construction.

   as in the case of vw-id35, the valid instances of an o-id35 rule can be
   written down using our template notation. the adapted construction
   converts each such template into a production rule of a weakly
   equivalent lig. consider for instance the following instance of forward
   crossed composition from example 11:

   this template is converted into the following lig rule. we adopt the
   notation of vijay-shanker and weir ([261]1994) and write        for the
   tail of a stack of unbounded size.

   in this way, every o-id35 can be written as a weakly equivalent lig.
   4.4   discussion

   in this section we have shown that the languages generated by o-id35 are
   properly included in the languages generated by tag, and equivalently,
   in the languages generated by vw-id35. this means that the multimodal
   machinery of openid35 is not powerful enough to express the rule
   restrictions of vw-id35 in a fully lexicalized way. the result is easy
   to obtain for o-id35 without inertness, which is prefix-closed and
   without target restrictions; but it is remarkably robust in that it
   also applies to o-id35 with inertness, which is not prefix-closed. as we
   have already mentioned, the result carries over also to other
   multimodal versions of id35, such as the formalism of baldridge and
   kruijff ([262]2003).

   our result has implications for practical grammar development with
   openid35. to illustrate this, recall example 7, which showed that every
   vw-id35 without target restrictions for swiss german that allows
   cross   serial word orders as in derivation (5) also permits alternative
   word orders, as in derivation (6). by lemma 15, this remains true for
   o-id35 or weaker multimodal formalisms. this is not a problem in the
   case of swiss german, where the alternative word orders are
   grammatical. however, there is at least one language, dutch, where
   dependencies in subordinate clauses must cross. for this case, our
   result shows that the modalized composition rules of openid35 are not
   powerful enough to write adequate grammars. consider the following
   classical example:

   the straightforward derivation of the cross   serial dependencies in this
   sentence (adapted from steedman [263]2000, p. 141) is exemplified in
   [264]figure 16. it takes the same form as derivation (5) for swiss
   german: the verbs and their np arguments lie on a single,
   right-branching path projected from the tensed verb zag. this
   projection path is not split; specifically, it starts with a
   composition that produces a category which acts as the primary input
   category of an application. as a consequence, the derivation can be
   transformed (by our rewriting rule r3) in exactly the same way as
   instance (5) could be transformed into derivation (6). the crucial
   difference is that the yield of the transformed derivation, *ik cecilia
   zag de paarden voeren, is not a grammatical clause of dutch.
   [265]figure
   figure   16    straightforward derivation of dutch cross   serial
   dependencies.

   to address the problem of ungrammatical word orders in dutch
   subordinate clauses, the vw-id35 grammar of steedman ([266]2000) and the
   multimodal id35 grammar of baldridge ([267]2002, section 5.3.1) resort
   to combinatorial rules other than composition. in particular, they
   assume that all complement noun phrases undergo obligatory
   type-raising, and become primary input categories of application rules.
   this gives rise to derivations such as the one shown in [268]figure 17,
   which cannot be transformed using our rewriting rules because the
   result of the forward crossed composition >^1 now is a secondary rather
   than a primary input category. as a consequence, this grammar is
   capable of enforcing the obligatory cross-serial dependencies of dutch.
   however, it is important to note that it requires type-raising over
   arbitary categories with target s (observe the increasingly complex
   type-raised categories for the nps). this kind of type-raising is
   allowed in many variants of id35, including the full formalism
   underlying openid35. vw-id35 and o-id35, however, are limited to
   generalized composition, and can only support derivations like the one
   in [269]figure 17 if all the type-raised categories for the noun
   phrases are available in the lexicon. the unbounded type-raising
   required by the steedman   baldridge analysis of dutch would translate
   into an infinite lexicon, and so this analysis is not possible in
   vw-id35 and o-id35.

   we conclude by discussing the impact of several other constructs of
   openid35 that we have not captured in o-id35. first, openid35 allows us to
   use generalized composition rules of arbitrary degree; there is no
   upper bound d on the composition degree as in an o-id35 grammar. it is
   known that this extends the generative capacity of id35 beyond that of
   tag (weir [270]1988). second, openid35 allows categories to be annotated
   with feature structures. this has no impact on the generative capacity,
   as the features must take values from finite domains and can therefore
   be compiled into the atomic categories of the grammar. finally, openid35
   includes the combinatory rules of substitution and coordination, as
   well as multiset slashes, another extension frequently used in
   linguistic grammars. we have deliberately left these constructs out of
   o-id35 to establish the most direct comparison to the literature on
   vw-id35. it is conceivable that their inclusion could restore the weak
   equivalence to tag, but a proof of this result would require a
   non-trivial extension of the work of vijay-shanker and weir
   ([271]1994). regarding multiset slashes, it is also worth noting that
   these were introduced with the expressed goal of allowing more flexible
   word order, whereas restoration of weak equivalence would require more
   controlled word order.
   [272]figure
   figure   17    derivation of dutch cross   serial dependencies with
   type-raised noun complements.
   5.   conclusion
   section:
   [choose________________________]
   [273]previous section [274]next section

   in this article we have contributed two technical results to the
   literature on id35. first, we have refined the weak equivalence result
   for id35 and tag (vijay-shanker and weir [275]1994) by showing that
   prefix-closed grammars are weakly equivalent to tag only if target
   restrictions are allowed. second, we have shown that o-id35, the formal,
   composition-only core of openid35, is not weakly equivalent to tag.
   these results point to a tension in id35 between lexicalization and
   generative capacity: lexicalized versions of the framework are less
   powerful than classical versions, which allow rule restrictions.

   what conclusions one draws from these technical results depends on the
   perspective. one way to look at id35 is as a system for defining formal
   languages. under this view, one is primarily interested in results on
   generative capacity and parsing complexity such as those obtained by
   vijay-shanker and weir ([276]1993, [277]1994). here, our results
   clarify the precise mechanisms that make id35 weakly equivalent to tag.
   perhaps surprisingly, it is not the availability of generalized
   composition rules by itself that explains the generative power of id35,
   but the ability to constrain the interaction between generalized
   composition and function application by means of target restrictions.

   on the other hand, one may be interested in id35 primarily as a
   formalism for developing grammars for natural languages (steedman
   [278]2000; baldridge [279]2002; steedman [280]2012). from this point of
   view, the suitability of id35 for the development of lexicalized
   grammars has been amply demonstrated. however, our technical results
   still serve as important reminders that extra care must be taken to
   avoid overgeneration when designing a grammar. in particular, it is
   worth double-checking that an openid35 grammar does not generate word
   orders that the grammar developer did not intend. here the rewriting
   system that we presented in [281]figure 12 can serve as a useful tool:
   a grammar developer can take any derivation for a grammatical sentence,
   transform the derivation according to our rewriting rules, and check
   whether the transformed derivation still yields a grammatical sentence.

   it remains an open question how the conflicting desires for generative
   capacity and lexicalization might be reconciled. a simple answer is to
   add some lexicalized method for enforcing target restrictions to id35,
   specifically on the application rules. however, we are not aware that
   this idea has seen widespread use in the id35 literature, so it may not
   be called for empirically. alternatively, one might modify the rules of
   o-id35 in such a way that they are no longer prefix-closed   for example,
   by introducing some new slash type. finally, it is possible that the
   constructs of openid35 that we set aside in o-id35 (such as type-raising,
   substitution, and multiset slashes) might be sufficient to achieve the
   generative capacity of classical id35 and tag. a detailed study of the
   expressive power of these constructs would make an interesting avenue
   for future research.
   acknowledgments
   section:
   [choose________________________]
   [282]previous section [283]next section

   we are grateful to mark steedman and jason baldridge for enlightening
   discussions of the material presented in this article, and to the four
   anonymous reviewers of the article for their detailed and constructive
   comments.
   notes
   section:
   [choose________________________]
   [284]previous section [285]next section

   1    this means that we ignore other rules required for linguistic
   analysis, in particular type-raising (from the t combinator),
   substitution (from the s combinator), and coordination.

   2    the literature on id35 assumes a bound on n; for english, steedman
   ([286]2000, p. 42) puts n     3. adding rules of unbounded degree
   increases the generative capacity of the formalism weir and joshi
   ([287]1988).

   3    also, ab-grammar does not support lexicon entries for the empty
   string.

   4    recall that we use the greek letter    to denote a (possibly empty)
   sequence of arguments.

   5    the type system of openid35 is an extension of the system used by
   baldridge ([288]2002).

   6    in versions of id35 that allow rules with mixed slash directions, the
   distinction between harmonic and crossed is made based on the direction
   of the innermost slash of the secondary input category, |[i].
   references
   section:
   [choose________________________]
   [289]previous section [290]next section
   ajdukiewicz, kazimierz. 1935. die syntaktische konnexit  t. studia
   philosophica, 1:1   27. [291]google scholar
   baldridge, jason. 2002. lexically specified derivational control in
   id35. ph.d. thesis, university of edinburgh,
   edinburgh, uk. [292]google scholar
   baldridge, jason and geert-jan m. kruijff. 2003. multi-modal
   combinatory categorical grammar. in tenth conference of the european
   chapter of the association for computational linguistics (eacl), pages
   211   218, budapest. [293]google scholar
   bar-hillel, yehoshua, haim gaifman, and eli shamir. 1960. on categorial
   and phrase structure grammars. bulletin of the research council of
   israel, 9f(1):1   16. reprinted in yehoshua bar-hillel. language and
   information: selected essays on their theory and application, pages
   99   115. addison-wesley, 1964. [294]google scholar
   curry, haskell b., robert feys, and william craig. 1958. combinatory
   logic. volume 1. studies in logic and the foundations of mathematics.
   north-holland. [295]google scholar
   eisner, jason. 1996. efficient normal-form parsing for combinatory
   categorial grammar. in proceedings of the 34th annual meeting of the
   association for computational linguistics (acl), pages 79   86, santa
   cruz, ca. [296]crossref, [297]google scholar
   gazdar, gerald. 1987. applicability of indexed grammars to natural
   language. in uwe reyle and christian rohrer, editors, natural language
   parsing and linguistic theories. d. reidel, pages 69   94. [298]google
   scholar
   joshi, aravind k. 1985. id34s: how much
   context-sensitivity is required to provide reasonable structural
   descriptions? in david r. dowty, lauri karttunen, and arnold m. zwicky,
   editors, natural language parsing. cambridge university press, pages
   206   250. [299]google scholar
   joshi, aravind k. and yves schabes. 1997. tree-adjoining grammars. in
   grzegorz rozenberg and arto salomaa, editors, handbook of formal
   languages, volume 3. springer, pages 69   123. [300]google scholar
   kuhlmann, marco, alexander koller, and giorgio satta. 2010. the
   importance of rule restrictions in id35. in proceedings of the 48th
   annual meeting of the association for computational linguistics (acl),
   pages 534   543, uppsala. [301]google scholar
   moortgat, michael. 2011. categorial type logics. in johan van benthem
   and alice ter meulen, editors, handbook of logic and language.
   elsevier, second edition, chapter 2, pages 95   179. [302]google scholar
   pollard, carl j. 1984. generalized phrase structure grammars, head
   grammars, and natural language. ph.d. thesis, stanford university.
   [303]google scholar
   shieber, stuart m. 1985. evidence against the context-freeness of
   natural language. linguistics and philosophy, 8(3):333   343.
   [304]crossref, [305]google scholar
   steedman, mark. 1996. surface structure and interpretation, volume 30
   of linguistic inquiry monographs. mit press. [306]google scholar
   steedman, mark. 2000. the syntactic process. mit press. [307]google
   scholar
   steedman, mark. 2012. taking scope. mit press. [308]google scholar
   steedman, mark and jason baldridge. 2011. combinatory categorial
   grammar. in robert d. borsley and kersti b  rjars, editors,
   non-transformational syntax: formal and explicit models of grammar.
   blackwell, chapter 5, pages 181   224. [309]google scholar
   vijay-shanker, k. and david j. weir. 1993. parsing some constrained
   grammar formalisms. computational linguistics, 19(4):591   636.
   [310]google scholar
   vijay-shanker, k. and david j. weir. 1994. the equivalence of four
   extensions of context-free grammars. mathematical systems theory,
   27(6):511   546. [311]crossref, [312]google scholar
   vijay-shanker, k., david j. weir, and aravind k. joshi. 1986. tree
   adjoining and head wrapping. in proceedings of the eleventh
   international conference on computational linguistics (coling), pages
   202   207, bonn. [313]google scholar
   weir, david j. 1988. characterizing mildly context-sensitive grammar
   formalisms. ph.d. thesis, university of pennsylvania. [314]google
   scholar
   weir, david j. and aravind k. joshi. 1988. combinatory categorial
   grammars: generative power and relationship to linear context-free
   rewriting systems. in proceedings of the 26th annual meeting of the
   association for computational linguistics (acl), pages 278   285,
   buffalo, ny. [315]crossref, [316]google scholar
   white, michael. 2013. openid35: the opennlp id35 library.
   [317]http://openid35.sourceforge.net/ accessed november 13, 2013.
   [318]google scholar
   marco kuhlmann*
   link  ping university
   alexander koller**
   university of potsdam
   giorgio satta   
   university of padua

   *department of computer and information science, link  ping university,
   581 83 link  ping, sweden. e-mail: [319][email protected].

   **department of linguistics, karl-liebknecht-str. 24   25, university of
   potsdam, 14476 potsdam, germany. e-mail: [320][email protected].

      department of information engineering, university of padua, via
   gradenigo 6/a, 35131 padova, italy. e-mail: [321][email protected].
   [322]https://doi.org/10.1162/coli_a_00219
     * [323]abstract
     * [324]full text
     * [325]authors

abstract

   section:
   [choose________________________]
   [326]next section

   the weak equivalence of id35 (id35) and
   tree-adjoining grammar (tag) is a central result of the literature on
   mildly context-sensitive grammar formalisms. however, the categorial
   formalism for which this equivalence has been established differs
   significantly from the versions of id35 that are in use today. in
   particular, it allows restriction of combinatory rules on a per grammar
   basis, whereas modern id35 assumes a universal set of rules, isolating
   all cross-linguistic variation in the lexicon. in this article we
   investigate the formal significance of this difference. our main result
   is that lexicalized versions of the classical id35 formalism are
   strictly less powerful than tag.
      2015 association for computational linguistics
   1.   introduction
   section:
   [choose________________________]
   [327]previous section [328]next section

   since the late 1970s, several grammar formalisms have been proposed
   that extend the power of context-free grammars in restricted ways. the
   two most prominent members of this class of    mildly context-sensitive   
   formalisms (a term coined by joshi [329]1985) are tree-adjoining
   grammar (tag; joshi and schabes [330]1997) and combinatory categorial
   grammar (id35; steedman [331]2000; steedman and baldridge [332]2011).
   both formalisms have been applied to a broad range of linguistic
   phenomena, and are being widely used in computational linguistics and
   natural language processing.

   in a seminal paper, vijay-shanker and weir ([333]1994) showed that tag,
   id35, and two other mildly context-sensitive formalisms   head grammar
   (pollard [334]1984) and linear indexed grammar (gazdar [335]1987)   all
   characterize the same class of string languages. however, when citing
   this result it is sometimes overlooked that the result applies to a
   version of id35 that is quite different from the versions that are in
   practical use today. the goal of this article is to contribute to a
   better understanding of the significance of this difference.

   the difference between    classical    id35 as formalized by vijay-shanker
   and weir ([336]1994) and the modern perspective may be illustrated with
   the combinatory rule of backward-crossed composition. the general form
   of this rule looks as follows:

   this rule is frequently used in the analysis of heavy np shift, as in
   the sentence kahn blocked skillfully a powerful shot by rivaldo
   (example from baldridge [337]2002). however, backward crossed
   composition cannot be universally active in english as this would cause
   the grammar to also accept strings such as *a powerful by rivaldo shot,
   which is witnessed by the derivation in [338]figure 1. to solve this
   problem, in the id35 formalism of vijay-shanker and weir ([339]1994),
   one may restrict backward-crossed composition to instances where x and
   y are both verbal categories   that is, functions into the category s of
   sentences (cf. steedman [340]2000, section 4.2.2). with this
   restriction the unwanted derivation in [341]figure 1 can be blocked,
   and a powerful shot by rivaldo is still accepted as grammatical. other
   syntactic phenomena require other grammar-specific restrictions,
   including the complete ban of certain combinatory rules (cf. steedman
   [342]2000, section 4.2.1).
   [343]figure
   figure   1    overgeneration caused by unrestricted backward crossed
   composition.

   over the past 20 years, id35 has evolved to put more emphasis on
   supporting fully lexicalized grammars (baldridge and kruijff [344]2003;
   steedman and baldridge [345]2011), in which as much grammatical
   information as possible is pushed into the lexicon. this follows the
   tradition of other frameworks such as lexicalized tree-adjoining
   grammar (ltag) and head-driven phrase structure grammar (hpsg).
   grammar-specific rule restrictions are not connected to individual
   lexicon entries, and are therefore avoided. instead, recent versions of
   id35 have introduced a new, lexicalized control mechanism in the form of
   modalities or slash types. the basic idea here is that combinatory
   rules only apply if the slashes in their input categories have the
   right types. for instance, the modern version of backward-crossed
   composition (steedman and baldridge [346]2011) takes the following
   form, where    is a slash type that allows crossed but not harmonic
   composition:

   the derivation in [347]figure 1 can now be blocked by assigning the
   slash in the category of powerful a type that is incompatible with   ,
   and thus cannot feed into type-aware backward-crossed composition as an
   input category. this    modalization    of grammatical composition, which
   imports some of the central ideas from the type-logical tradition of
   categorial grammar (moortgat [348]2011) into the id35 framework, is
   attractive because it isolates the control over the applicability of
   combinatory rules in the lexicon. quoting steedman and baldridge
   ([349]2011, p. 186):

   without typed slashes, language-specific restrictions or even bans on
   some combinatory rules are necessary in order to block certain
   ungrammatical word orders. with them, the combinatory rules are truly
   universal: the grammar of every language utilizes exactly the same set
   of rules, without modification, thereby leaving all cross-linguistic
   variation in the lexicon. as such, id35 is a fully lexicalized grammar
   formalism.

   the stated goal is thus to express all linguistically relevant
   restrictions on the use of combinatory rules in terms of lexically
   specified, typed slashes. but to what extent can this goal actually be
   achieved? so far, there have been only partial answers   even when, as in
   the formalism of vijay-shanker and weir ([350]1994), we restrict
   ourselves to the rules of composition, but exclude other rules such as
   type-raising and substitution. baldridge and kruijff ([351]2003) note
   that the machinery of their multi-modal formalism can be simulated by
   rule restrictions, which shows that this version of lexicalized id35 is
   at most as expressive as the classical formalism. at the other end of
   the spectrum, we have shown in previous work that a    pure    form of
   lexicalized id35 with neither rule restrictions nor slash types is
   strictly less expressive (kuhlmann, koller, and satta [352]2010). the
   general question of whether    classical    id35 (rule restrictions) and
      modern    id35 (slash types instead of rule restrictions) are weakly
   equivalent has remained open.

   in this article, we answer this question. our results are summarized in
   [353]figure 2. after setting the stage ([354]section 2), we first
   pinpoint the exact type of rule restrictions that make the classical
   id35 formalism weakly equivalent to tag ([355]section 3). we do so by
   focusing on a class of grammars that we call prefix-closed. unlike the
      pure    grammars that we studied in earlier work, prefix-closed grammars
   do permit rule restrictions (under certain conditions that seem to be
   satisfied by linguistic grammars). we show that the generative power of
   prefix-closed id35 depends on its ability to express target
   restrictions, which are exactly the functions-into type of restrictions
   that are needed to block the derivation in [356]figure 1. we prove that
   the full class of prefix-closed id35s is weakly equivalent to tag, and
   the subclass that cannot express target restrictions is strictly less
   powerful. this result significantly sharpens the picture of the
   generative capacity of id35.
   [357]figure
   figure   2    summary of the results in this article. vw-id35 is the
   formalism of vijay-shanker and weir ([358]1994).

   in a further step ([359]section 4), we then prove that for at least one
   popular incarnation of modern, lexicalized id35, slash types are
   strictly less expressive than rule restrictions. more specifically, we
   look at a variant of id35 consisting of the composition rules
   implemented in openid35 (white [360]2013), the most widely used
   development platform for id35 grammars. we show that this formalism is
   (almost) prefix-closed and cannot express target restrictions, which
   enables us to apply our generative capacity result from the first step.
   the same result holds for (the composition-only fragment of) the
   formalism of baldridge and kruijff ([361]2003). thus we find that, at
   least with existing means, the weak equivalence result of vijay-shanker
   and weir cannot be obtained for lexicalized id35. we conclude the
   article by discussing the implications of our results ([362]section 5).
   2.   background
   section:
   [choose________________________]
   [363]previous section [364]next section

   in this section we provide the technical background of the article. we
   introduce the basic architecture of id35, present the formalism of
   vijay-shanker and weir ([365]1994), and set the points of reference for
   our results about generative capacity.
   2.1   basic architecture of id35

   the two central components of id35 are a lexicon that associates words
   with categories, and rules that specify how categories can be combined.
   taken together, these components give rise to derivations, such as the
   one shown in [366]figure 3.
   [367]figure
   figure   3    a sample derivation (adapted from steedman [368]2012).

   lexicon. a category is a syntactic type that identifies a constituent
   as either    complete    or    incomplete.    the categories of complete
   constituents are taken to be primitives; the categories of incomplete
   constituents are modeled as (curried) functions that specify the type
   and the direction of their arguments. every category is projected from
   the lexicon, which is a finite collection of word   category pairs. to
   give examples (taken from steedman [369]2012), an english intransitive
   verb such as walks has a category that identifies it as a function
   seeking a (subject) noun phrase to its left (indicated by a backward
   slash) and returning a complete sentence; and a transitive verb such as
   admires has a category that identifies it as a function seeking an
   (object) noun phrase to its right (indicated by a forward slash) and
   returning a constituent that acts as an intransitive verb. we denote
   lexical assignment using the    colon equals    operator:

   formally, the set of categories is built over a finite set of atomic
   categories, the primitive syntactic types. it is the smallest set such
   that
   1.   

   if then ;
   2.   

   if then and .
   we use the letters a, b, c to denote atomic categories, the letters x,
   y, z to denote arbitrary categories, and the symbol | to denote slashes
   (forward or backward). we treat slashes as left-associative operators
   and omit unnecessary parentheses. by this convention, every category x
   can be written in the form

   where m     0, a is an atomic category that we call the target of x, and
   the |[i]x[i] are slash   category pairs that we call the arguments of x.
   intuitively, the target of x is the atomic category that is obtained
   after x has been applied to all of its arguments. we use the greek
   letters   ,   ,    to denote (potentially empty) sequences of arguments.
   the number m is called the arity of the category x.

   rules. categories can combine under a number of rules; this gives rise
   to derivations such as the one shown in [370]figure 3. each rule
   specifies an operation that assembles two input categories into an
   output category. the two most basic rules of id35 are the directed
   versions of function application:

   formally, a rule is a syntactic object in which the letters x, y, z act
   as variables for categories. a rule instance is obtained by
   substituting concrete categories for all variables in the rule. for
   example, the derivation in [371]figure 3 contains the following
   instances of function application. we denote rule instances by using a
   triple arrow instead of the double arrow in our notation for rules.

   application rules give rise to derivations equivalent to those of
   context-free grammar. indeed, versions of categorial grammar where
   application is the only mode of combination, such as ab-grammar
   (ajdukiewicz [372]1935; bar-hillel, gaifman, and shamir [373]1960), can
   only generate context-free languages. id35 can be more powerful because
   it also includes other rules, derived from the combinators of
   combinatory logic (curry, feys, and craig [374]1958). in this article,
   as in most of the formal work on id35, we restrict our attention to the
   rules of (generalized) composition, which are based on the b
   combinator.[375]^1

   the general form of composition rules is shown in [376]figure 4. in
   each rule, the two input categories are distinguished into one primary
   (shaded) and one secondary input category. the number n of outermost
   arguments of the secondary input category is called the degree of the
   rule.[377]^2 in particular, for n = 0 we obtain the rules of function
   application. in contexts where we refer to both application and
   composition, we use the latter term for composition rules with degree n
   > 0.
   [378]figure
   figure   4    general form of composition rules (primary input category
   shaded), where n     0 and |[i]     {/, \}.

   derivation trees. derivation trees can now be schematically defined as
   in [379]figure 5. they contain two types of branchings: unary
   branchings correspond to lexicon entries; binary branchings correspond
   to rule instances. the yield of a derivation tree is the left-to-right
   concatenation of its leaves.
   [380]figure
   figure   5    schematic definition of the set of derivation trees of a
   grammar g.
   2.2   classical id35

   we now define the classical id35 formalism that was studied by
   vijay-shanker and weir ([381]1994) and originally introduced by weir
   and joshi ([382]1988). as mentioned in [383]section 1, the central
   feature of this formalism is its ability to impose restrictions on the
   applicability of combinatory rules. specifically, a restricted rule is
   a rule annotated with constraints that
   (a)   

   restrict the target of the primary input category; and/or
   (b)   

   restrict the secondary input category, either in parts or in its
   entirety.
   every grammar lists a finite number of restricted rules (where one and
   the same base rule may occur with several different restrictions). a
   valid rule instance is an instance that is compatible with at least one
   of the restricted rules.

   example 1

   linguistic grammars make frequent use of rule restrictions. to exclude
   the undesired derivation in [384]figure 1 we restricted backward
   crossed composition to instances where both the primary and the
   secondary input category are functions into the category of sentences,
   s. writing target for the function that returns the target of a
   category, the restricted rule can be written as

   in the following definition we write    for the empty string.

   definition 1

   a id35 in the sense of vijay-shanker and weir
   ([385]1994), or vw-id35 for short, is a structure

   where    is a finite vocabulary, is a finite set of atomic categories,
   the lexicon := is a finite relation between the sets   [  ] =        {  } and
   , r is a finite set of (possibly) restricted rules, and is a
   distinguished atomic category.

   a derivation tree of g consists of lexicon entries and valid instances
   of rules from r. the grammar g generates a string w if there exists a
   derivation tree whose yield is w and whose root node is labeled with
   the distinguished atomic category s. the language l(g) generated by g
   is the set of all generated strings.

   example 2

   we specify a vw-id35 that generates the language

   let   [1] = {a, b, c}, , s[1] = s, and let :=[1] consist of the entries

   finally, let r[1] consist of the following rules:
   1.   

   forward and backward application.
   2.   

   forward and backward composition of degree 1.
   3.   

   forward and backward composition of degree 2.
   each of these rules is restricted to instances where the target of the
   primary input category is s. a sample derivation of g[1] is shown in
   [386]figure 6. by contrast, [387]figure 7 shows a derivation that is
   not valid in g[1] because it uses application rules in which the target
   of the primary input category is b or c (rather than s).
   [388]figure
   figure   6    a sample derivation of the grammar g[1] from example 2.
   [389]figure
   figure   7    a derivation rendered ungrammatical by the rule restrictions
   in g[1].

   example 3

   ab-grammar is a categorial grammar formalism in which forward and
   backward application are the only combinatory rules that are allowed.
   furthermore, it does not support rule restrictions.[390]^3 every
   ab-grammar can therefore be written as a vw-id35 that allows all
   instances of application, but no other rules.

   the following lemmas establish two fundamental properties of vw-id35
   that we shall use at several places in this article. both of them are
   minor variants of lemmas proved by vijay-shanker and weir ([391]1994)
   (lemma 3.1 and lemma 3.2) and were previously stated by weir and joshi
   ([392]1988).

   lemma 1

   the set of arguments that occur in the derivations of a vw-id35 is
   finite.

   proof

   no composition rule creates new arguments: every argument that occurs
   in an output category already occurs in one of the input categories.
   therefore, every argument must come from some word   category pair in the
   lexicon, of which there are only finitely many.

   lemma 2

   the set of secondary input categories that occur in the derivations of
   a vw-id35 is finite.

   proof

   every secondary input category is obtained by substituting concrete
   categories for the variables that occur in the non-shaded component of
   one of the rules specified in [393]figure 4. after the substitution,
   all of these categories occur as part of arguments. then, with lemma 1,
   we deduce that the substituted categories come from a finite set. at
   the same time, each grammar specifies a finite set of rules. this means
   that there are only finitely many ways to obtain a secondary input
   category.

   when specifying vw-id35s, we find it convenient sometimes to provide an
   explicit list of valid rule instances, rather than a textual
   description of rule restrictions. for this we use a special type of
   restricted rule that we call templates. a template is a restricted rule
   that simultaneously fixes both
   (a)   

   the target of the primary input category of the rule, and
   (b)   

   the entire secondary input category.
   we illustrate the idea with an example.

   example 4

   we list the templates that correspond to the rule instances in the
   derivation from [394]figure 6. (the grammar allows other instances that
   are not listed here.) we use the symbol     as a placeholder for that
   part of a primary input category that is unconstrained by rule
   restrictions, and therefore may consist of an arbitrary sequence of
   arguments.

   for example, template (1) characterizes backward application (<^0)
   where the target of the primary input category is s and the secondary
   input category is a, and template (4) characterizes forward composition
   of degree 2 (>^2) where the target of the primary input category is s
   and the secondary input category is b/c/b.

   note that every vw-id35 can be specified using a finite set of
   templates: it has a finite set of combinatory rules; the set of
   possible targets of the primary input category of each rule is finite
   because each target is an atomic category; and the set of possible
   secondary input categories is finite because of lemma 2.
   2.3   tree-adjoining grammar

   in this article we are interested in the generative power of id35, in
   particular in its relation to that of tree-adjoining grammar. we
   therefore provide a compact introduction to tag. for more details, we
   refer to joshi and schabes ([395]1997).

   elementary trees. tree-adjoining grammar is a formalism for generating
   trees. these trees can be characterized as rooted, ordered trees in
   which internal nodes are labeled with nonterminal symbols   including a
   distinguished start symbol s   and leaf nodes are labeled with
   nonterminals, terminals, or the empty string. every grammar specifies a
   finite set of such trees; these are called elementary trees. there are
   two types: initial trees and auxiliary trees. they differ in that
   auxiliary trees have a distinguished nonterminal-labeled leaf node,
   called foot node; this node is conventionally marked with an asterisk.
   an elementary tree whose root node is labeled with a nonterminal a is
   called an a-tree.

   substitution and adjunction. new trees may be derived by combining
   other trees using two operations called substitution and adjunction.
   substitution replaces some leaf node of a given tree with an initial
   tree (or a tree derived from an initial tree). adjunction replaces some
   internal node u of a given tree with an auxiliary tree (or a tree
   derived from an auxiliary tree); the subtree with root u replaces the
   foot node of the auxiliary tree. all replacements are subject to the
   condition that the node being replaced and the root of the tree that
   replaces it are labeled with the same nonterminal.

   generated languages. the tree language generated by a tag is the set of
   all trees that can be derived from its initial s-trees. derivations are
   considered complete only if they satisfy additional, node-specific
   constraints. in particular, substitution is obligatory at every node
   where it is possible, and adjunction may be specified as either
   obligatory (oa, obligatory adjunction) or forbidden (na, null
   adjunction) at a given node. in derived trees corresponding to complete
   derivations, all leaf nodes are labeled with terminal symbols. the
   left-to-right concatenation of these symbols forms the yield of the
   tree, and the yields of all trees in the tree language form the string
   language generated by the tag.

   example 5

   [396]figure 8 shows a tag that generates the language l[1] = {a^nb^nc^n
   | n     1} defined in example 2. derivations start with adjoining the
   auxiliary tree t[2] at the root of the initial tree t[1]. new trees can
   be derived by repeatedly adjoining t[2] at an s-node.
   [397]figure
   figure   8    a tag that generates the language l[1] = {a^nb^nc^n | n     1}.
   2.4   generative capacity of classical id35

   vijay-shanker and weir ([398]1994) proved the following:

   theorem 1

   vw-id35 and tag are weakly equivalent.

   the inclusion of the vw-id35 languages in the tag languages follows from
   a chain of inclusions that connects vw-id35 and tag via linear indexed
   grammar (lig; gazdar [399]1987) and head grammar (hg; pollard
   [400]1984). all of these inclusions were proved by vijay-shanker and
   weir ([401]1994). here we sketch a proof of the inclusion of the tag
   languages in the vw-id35 languages. our proof closely follows that of
   weir ([402]1988, section 5.2.2), whose construction we shall return to
   when establishing our own results.

   lemma 3

   the tag languages are included in the vw-id35 languages.

   proof (sketch)

   we are given a tag g and construct a weakly equivalent vw-id35 g   . the
   basic idea is to make the lexical categories of g    correspond to the
   elementary trees of g, and to set up the combinatory rules and their
   restrictions in such a way that the derivations of g    correspond to
   derivations of g.

   vocabulary, atomic categories. the vocabulary of g    is the set of all
   terminal symbols of g; the set of atomic categories consists of all
   symbols of the form a^t, where either a is a nonterminal symbol of g
   and t     {a, c}, or a is a terminal symbol of g and t = a. the
   distinguished atomic category of g    is s^a, where s is the start symbol
   of g.

   lexicon. one may assume (cf. vijay-shanker, weir, and joshi [403]1986)
   that g is in the normal form shown in [404]figure 9. in this normal
   form there is a single initial s-tree, and all remaining elementary
   trees are auxiliary trees of one of five possible types. for each such
   tree, one constructs two lexicon entries for the empty string    as
   specified in [405]figure 9. additionally, for each terminal symbol x of
   g, one constructs a lexicon entry x := x^a.
   [406]figure
   figure   9    correspondence between elementary trees and lexical
   categories in the proof of lemma 3.

   rules. the rules of g    are forward and backward application and forward
   and backward composition of degree at most 2. they are used to simulate
   adjunction operations in derivations of g: application simulates
   adjunction into nodes to the left or right of the foot node;
   composition simulates adjunction into nodes above the foot node.
   without restrictions, these rules would allow derivations that do not
   correspond to derivations of g. therefore, rules are restricted such
   that an argument of the form |a^t can be eliminated by means of an
   application rule only if t = a, and by means of a composition rule only
   if t = c. this enforces two properties that are central for the
   correctness of the construction (weir [407]1988, p. 119): first, the
   secondary input category in every instance of composition is a category
   that has just been introduced from the lexicon. second, categories
   cannot be combined in arbitrary orders. the rule restrictions are:
   1.   

   forward and backward application are restricted to instances where both
   the target of the primary input category and the entire secondary input
   category take the form a^a.
   2.   

   forward and backward composition are restricted to instances where the
   target of the primary input category takes the form a^a and the target
   of the secondary input category takes the form a^c.
   using our template notation, the restricted rules can be written as in
   [408]figure 10.
   [409]figure
   figure   10    restricted rules used in the proof of lemma 3. we write for
   the union of the nonterminal symbols and terminal symbols of the tag g,
   and let , t     {a, c}.

   as an aside we note that the proof of lemma 3 makes heavy use of the
   ability of vw-id35 to assign lexicon entries to the empty string. such
   lexicon entries violate one of the central linguistic principles of
   id35, the principle of adjacency, according to which combinatory rules
   may only apply to phonologically realized entities (steedman [410]2000,
   p. 54). it is an interesting question for future research whether a
   version of vw-id35 without lexicon entries for the empty string remains
   weakly equivalent to tag.
   3.   relevance of target restrictions in prefix-closed id35
   section:
   [choose___________________________]
   [411]previous section [412]next section

   in this section we present the central technical results of this
   article. we study a class of vw-id35s that we call prefix-closed and
   show that for this class, weak equivalence with tag stands and falls
   with the ability to specify target restrictions.
   3.1   prefix-closed grammars

   rule restrictions are important tools in grammars for natural language;
   but not all of their potential uses have obvious linguistic
   motivations. for instance, one could write a grammar that permits all
   compositions with a functional category a/b as the secondary input
   category, but rules out application with the    shorter    category a. such
   constraints do not seem to be used in linguistically motivated
   grammars; for example, none of the grammars developed by steedman
   ([413]2000) needs them. in prefix-closed grammars, this use of rule
   restrictions is explicitly barred.

   definition 2

   a vw-id35 is prefix-closed if it satisfies the following implication:

   and similarly for backward rules.

   note that prefix-closed grammars still allow some types of rule
   restrictions. the crucial property is that, if a certain combinatory
   rule applies at all, then it also applies to combinations where the
   secondary input category has already been applied to some (k     n) or
   even all (k > n) of its arguments.

   example 6

   we illustrate prefix-closedness using some examples:
   1.   

   every ab-grammar (when seen as a vw-id35) is trivially prefix-closed; in
   these grammars, n = 0.
   2.   

   the    pure    grammars that we considered in our earlier work (kuhlmann,
   koller, and satta [414]2010) are trivially prefix-closed.
   3.   

   the grammar g[1] from example 2 is prefix-closed.
   4.   

   the grammars constructed in the proof of lemma 3 are not prefix-closed;
   they do not allow the following instances of application, where the
   secondary input category is of the form b^c (rather than b^a):

   example 7

   the linguistic intuition underlying prefix-closed grammars is that if
   such a grammar allows us to delay the combination of a functor and its
   argument (via composition), then it also allows us to combine the
   functor and its argument immediately (via application). to illustrate
   this intuition, consider [415]figure 11, which shows two derivations
   related to the discussion of word order in swiss german subordinate
   clauses (shieber [416]1985):

   derivation (5) (simplified from steedman and baldridge [417]2011, p.
   201) starts by composing the tensed verb h  lfed into the infinitive
   aastriche and then applies the resulting category to the accusative
   argument of the infinitive, es huus. prefix-closedness implies that, if
   the combination of h  lfed and aastriche is allowed when the latter is
   still waiting for es huus, then it must also be allowed if es huus has
   already been found. thus prefix-closedness predicts derivation (6), and
   along with it the alternative word order

   this word order is in fact grammatical (shieber [418]1985, pp.
   338   339).
   [419]figure
   figure   11    prefix-closedness predicts different word orders for swiss
   german subordinate clauses.
   3.2   generative capacity of prefix-closed grammars

   we now show that the restriction to prefix-closed grammars does not
   change the generative capacity of vw-id35.

   theorem 2

   prefix-closed vw-id35 and tag are weakly equivalent.

   proof

   every prefix-closed vw-id35 is a vw-id35, therefore the inclusion follows
   from theorem 1. to show that every tag language can be generated by a
   prefix-closed vw-id35, we recall the construction of a weakly equivalent
   vw-id35 for a given tag that we sketched in the proof of lemma 3. as
   already mentioned in example 6, the grammar g    constructed there is not
   prefix-closed. however, we can make it prefix-closed by explicitly
   allowing the    missing    rule instances:

   we shall now argue that this modification does not actually change the
   language generated by g   . the only categories that qualify as secondary
   input categories of the new instances are atomic categories of the form
   b^c where b is a nonterminal of the tag g. now the lexical categories
   of g    either are of the form x^a (where x is a terminal symbol) or are
   non-atomic. categories of the form b^c are not among the derived
   categories of g    either, as the combinatory rules only yield output
   categories whose targets have the form b^a. this means that the new
   rule instances can never be used in a complete derivation of g   , and
   therefore do not change the generated language. thus we have a
   construction that turns a tag into a weakly equivalent prefix-closed
   vw-id35.
   3.3   prefix-closed grammars without target restrictions

   in this section we shall see that the weak equivalence between
   prefix-closed vw-id35 and tag depends on the ability to restrict the
   target of the primary input category in a combinatory rule. these are
   the restrictions that we referred to as constraints of type (a) in
   [420]section 2.2. we say that a grammar that does not make use of these
   constraints is without target restrictions. this property can be
   formally defined as follows.

   definition 3

   a vw-id35 is without target restrictions if it satisfies the following
   implication:

   and similarly for backward rules.

   example 8

   1.   

   every ab-grammar is without target restrictions; it allows forward and
   backward application for every primary input category.
   2.   

   the grammar g[1] from example (2) is not without target restrictions,
   because its rules are restricted to primary input categories with
   target s.

   target restrictions on the primary input category are useful in id35s
   for natural languages; recall our discussion of backward-crossed
   composition in [421]section 1. as we shall see, target restrictions are
   also relevant from a formal point of view: if we require vw-id35s to be
   without target restrictions, then we lose some of their weak generative
   capacity. this is the main technical result of this article. for its
   proof we need the following standard concept from formal language
   theory:

   definition 4

   two languages l and l    are parikh-equivalent if for every string w     l
   there exists a permuted version w    of w such that w        l   , and vice
   versa.

   theorem 3

   the languages generated by prefix-closed vw-id35 without target
   restrictions are properly included in the tag languages.

   proof

   every prefix-closed vw-id35 without target restrictions is a vw-id35, so
   the inclusion follows from theorem 1. to see that the inclusion is
   proper, consider the tag language l[1] = {a^nb^nc^n | n     1} from
   example 5. we are interested in sublanguages l        l[1] that are
   parikh-equivalent to the full language l[1]. this property is trivially
   satisfied by l[1] itself. moreover, it is not hard to see that l[1] is
   in fact the only sublanguage of l[1] that has this property. now in
   [422]section 3.4 we shall prove a central lemma (lemma 6), which
   asserts that, if we assume that l[1] is generated by a prefix-closed
   vw-id35 without target restrictions, then at least one of the
   parikh-equivalent sublanguages of l[1] must be context-free. because
   l[1] is the only such sublanguage, this would give us proof that l[1]
   is context-free; but we know it is not. therefore we conclude that l[1]
   is not generated by a prefix-closed vw-id35 without target restrictions.

   before turning to the proof of the central lemma (lemma 6), we
   establish two other results about the languages generated by grammars
   without target restrictions.

   lemma 4

   the languages generated by prefix-closed vw-id35 without target
   restrictions properly include the context-free languages.

   proof

   inclusion follows from the fact that ab-grammars (which generate all
   context-free languages) are prefix-closed vw-id35s without target
   restrictions. to see that the inclusion is proper, consider a grammar
   g[2] that is like g[1] but does not have any rule restrictions. this
   grammar is trivially prefix-closed and without target restrictions; it
   is actually    pure    in the sense of kuhlmann, koller, and satta
   ([423]2010). the language l[2] = l(g[2]) contains all the strings in
   l[1] = {a^nb^nc^n | n     1}, together with other strings, including the
   string bbbacacac, whose derivation we showed in [424]figure 7. it is
   not hard to see that all of these additional strings have an equal
   number of as, bs, and cs. we can therefore write l[1] as an
   intersection of l[2] and a regular language: l[1] = l[2]     a*b*c*. to
   obtain a contradiction, suppose that l[2] is context-free; then because
   of the fact that context-free languages are closed under intersection
   with regular languages, the language l[1] would be context-free as
   well   but we know it is not. therefore we conclude that l[2] is not
   context-free either.

   lemma 5

   the class of languages generated by prefix-closed vw-id35 without target
   restrictions is not closed under intersection with regular languages.

   proof

   if the class of languages generated by prefix-closed vw-id35 without
   target restrictions was closed under intersection with regular
   languages, then with l[2] (the language mentioned in the previous
   proof) it would also include the language l[1] = l[2]     a*b*c*.
   however, from the proof of theorem 3 we know that l[1] is not generated
   by any prefix-closed vw-id35 without target restrictions.
   3.4   proof of the main lemma for vw-id35

   we shall now prove the central lemma that we used in the proof of
   theorem 3.

   lemma 6 (main lemma for vw-id35)

   for every language l that is generated by some prefix-closed vw-id35
   without target restrictions, there is a sublanguage l        l[1] such that
   1.   

   l    and l are parikh-equivalent, and
   2.   

   l    is context-free.

   throughout this section, we let g be some arbitrary prefix-closed
   vw-id35 without target restrictions. the basic idea is to transform the
   derivations of g into a certain special form, and to prove that the
   transformed derivations yield a context-free language. the
   transformation is formalized by the rewriting system in [425]figure
   12.[426]^4 to see how the rules of this system work, consider rule r1;
   the other rules are symmetric. rule r1 rewrites an entire derivation
   into another derivation. it states that, whenever we have a situation
   where a category of the form x/y is combined with a category of the
   form y  /z by means of composition, and the resulting category is
   combined with a category z by means of application, then we may just as
   well first combine y  /z with z, and then use the resulting category as
   a secondary input category together with x/y.
   [427]figure
   figure   12    rewriting rules used in the transformation.

   note that r1 and r2 produce a new derivation for the original sentence,
   whereas r3 and r4 produce a derivation that yields a permutation of
   that sentence: the order of the substrings corresponding to the
   categories z and x/y (in the case of rule r3) or x\y (in the case of
   rule r4) is reversed. in particular, r3 captures the relation between
   the two derivations of swiss german word orders shown in [428]figure
   11: applying r3 to derivation (5) gives derivation (6). importantly
   though, while the transformation may reorder the yield of a derivation,
   every transformed derivation still is a derivation of g.

   example 9

   if we take the derivation in [429]figure 6 and exhaustively apply the
   rewriting rules from [430]figure 12, then the derivation that we obtain
   is the one in [431]figure 7. note that although the latter derivation
   is not grammatical with respect to the grammar g[1] from example 2, it
   is grammatical with respect to the grammar g[2] from the proof of lemma
   4, which is without target restrictions.

   it is instructive to compare the rewriting rules in [432]figure 12 to
   the rules that establish the normal form of eisner ([433]1996). this
   normal form is used in practical id35 parsers to solve the problem of
      spurious ambiguity,    where one and the same semantic interpretation
   (which in id35 takes the form of a lambda term) has multiple syntactic
   derivation trees. it is established by rewriting rules such as the
   following:

   the rules in [434]figure 12 have much in common with the eisner rules;
   yet there are two important differences. first, as already mentioned,
   our rules (in particular, rules r3 and r4) may reorder the yield of a
   derivation, whereas eisner's normal form preserves yields. second, our
   rules decrease the degrees of the involved composition operations,
   whereas eisner's rules may in fact increase them. to see this, note
   that the left-hand side of derivation (7) involves a composition of
   degree |  | + 1 (   ), whereas the right-hand side involves a composition
   of degree |  | + |  | (      ). this means that rewriting will increase the
   degree in situations where |  | > 1. in contrast, our rules only fire in
   the case where the combination with z happens by means of an
   application, that is, if |  | = 0. under this condition, each rewrite
   step is guaranteed to decrease the degree of the composition. we will
   use this observation in the proof of lemma 7.
   3.4.1   properties of the transformation

   the next two lemmas show that the rewriting system in [435]figure 12
   implements a total function on the derivations of g.

   lemma 7

   the rewriting system is terminating and confluent: rewriting a
   derivation ends after a finite number of steps, and different rewriting
   orders all result in the same output.

   proof

   to argue that the system is terminating, we note that each rewriting
   step decreases the arity of one secondary input category in the
   derivation by one unit, while all other secondary input categories are
   left unchanged. as an example, consider rewriting under r1. the
   secondary input categories in the scope of that rule are y  /z and z on
   the left-hand side and y    and z on the right-hand side. here the arity
   of y    equals the arity of y  /z, minus one. because the system is
   terminating, to see that it is also confluent, it suffices to note that
   the left-hand sides of the rewrite rules do not overlap.

   lemma 8

   the rewriting system transforms derivations of g into derivations of g.

   proof

   we prove the stronger result that every rewriting step transforms
   derivations of g into derivations of g. we only consider rewriting
   under r1; the arguments for the other rules are similar. assume that r1
   is applied to a derivation of g. the rule instances in the scope of the
   left-hand side of r1 take the following form:

   turning to the right-hand side, the rule instances in the rewritten
   derivation are

   the relation between instances (8) and (11) is the characteristic
   relation of prefix-closed grammars (definition 2): if instance (8) is
   valid, then because g is prefix-closed, instance (11) is valid as well.
   similarly, the relation between instances (9) and (10) is the
   characteristic relation of grammars without target restrictions
   (definition 3): if instance (9) is valid, then because g is without
   target restrictions, instance (10) is valid as well. we conclude that
   if r1 is applied to a derivation of g, then the result is another
   derivation of g.

   combining lemma 7 and lemma 8, we see that for every derivation d of g,
   exhaustive application of the rewriting rules produces another uniquely
   determined derivation of g. we shall refer to this derivation as r(d).
   a transformed derivation is any derivation d    such that d    = r(d) for
   some derivation d.
   3.4.2   language inclusion and parikh-equivalence

   lemma 9

   the yields of the transformed derivations are a subset of and
   parikh-equivalent to l(g).

   proof

   let be the set of yields of the transformed derivations. every string
   is obtained from a string w     l(g) by choosing some derivation d of w,
   rewriting this derivation into the transformed derivation r(d), and
   taking the yield. inclusion then follows from lemma 8. because of the
   permuting rules r3 and r4, the strings w and w    will in general be
   different. what we can say, however, is that w and w    will be equal up
   to permutation. thus we have established that and l(g) are
   parikh-equivalent.

   what remains in order to prove lemma 6 is to show that the yields of
   the transformed derivations form a context-free language.
   3.4.3   context-freeness of the sublanguage

   in a derivation tree, every node except the root node is labeled with
   either the primary or the secondary input category of a combinatory
   rule. we refer to these two types of nodes as primary nodes and
   secondary nodes, respectively. to simplify our presentation, we shall
   treat the root node as a secondary node. we restrict our attention to
   derivation trees for strings in l(g); in these trees, the root node is
   labeled with the distinguished atomic category s. for a leaf node u,
   the projection path of u is the path that starts at the parent of u and
   ends at the first secondary node that is encountered on the way towards
   the root node. we denote a projection path as a sequence x[1],    , x[n]
   (n     1), where x[1] is the category at the parent of u and x[n] is the
   category at the secondary node. note that the category x[1] is taken
   from the lexicon, while every other category is derived by combining
   the preceding category on the path with some secondary input category
   (not on the path) by means of some combinatory rule.

   example 10

   in the derivation in [436]figure 6, the projection path of the first b
   goes all the way to the root, while all other projection paths have
   length 1, starting and ending with a lexical category. in [437]figure
   7, the projection path of the first b ends at the root, while the
   projection paths of the remaining bs end at the nodes with category b,
   and the projection paths of the cs end at the nodes with category c.

   a projection path x[1],    , x[n] is split if it can be segmented into
   two parts

   such that the first part only uses application rules and the second
   part only uses composition rules. note that any part may consist of a
   single category only, in which case no combinatory rule is used in that
   part. if n = 1, then the path is trivially split. all projection paths
   in [438]figures 6 and [439]7 are split, except for the path of the
   first b in [440]figure 6, which alternates between composition (with
   c\a) and application (with a).

   lemma 10

   in transformed derivations, every projection path is split.

   proof

   we show that as long as a derivation d contains a projection path that
   is not split, it can be rewritten. a projection path that is not split
   contains three adjacent categories u, v, w, such that v is derived by
   means of a composition with primary input u, and w is derived by means
   of an application with primary input v. suppose that both the
   composition and the application are forward. (the arguments for the
   other three cases are similar.) then u can be written as x/y for some
   category x and argument /y, v can be written as x  /z for some argument
   /z and some (possibly empty) sequence of arguments   , and w can be
   written as x  . we can then convince ourselves that d contains the
   following configuration, which matches the left-hand side of rewriting
   rule r1:

   lemma 11

   the set of all categories that occur in transformed derivations is
   finite.

   proof

   every category that occurs in transformed derivations occurs on some of
   its projection paths. consider any such path. by lemma 10 we know that
   this path is split; its two parts, here called p[1] and p[2], are
   visualized in [441]figure 13. we now reason about the arities of the
   categories in these two parts.
   1.   

   because p[1] only uses application, the arities in this part get
   smaller and smaller until they reach their minimum at x[s]. this means
   that the arities of p[1] are bounded by the arity of the first category
   on the path, which is a category from the lexicon.
   2.   

   because p[2] only uses composition, the arities in this part either get
   larger or stay the same until they reach a maximum at x[n]. this means
   that the arities of p[2] are bounded by the arity of the last category
   on the path, which is either the distinguished atomic category s or a
   secondary input category.
   thus the arities of our chosen path are bounded by the maximum of three
   grammar-specific constants: the maximal arity of a lexical category,
   the arity of s (which is 0), and the maximal arity of a secondary input
   category. the latter value is well-defined because there are only
   finitely many such categories (by lemma 2). let k be the maximum among
   the three constants, and let be the set of all categories of the form
   a|[m]x[m]     |[1]x[1] where a is an atomic category of g, m     k, and
   each |[i]x[i] is an argument that may occur in derivations of g. the
   set contains all categories that occur on some projection path, and
   therefore all categories that occur in transformed derivations, but it
   may also include other categories. as there are only finitely many
   atomic categories and finitely many arguments (lemma 1), we conclude
   that the set , and hence the set of categories that occur in
   transformed derivations, are finite as well.
   [442]figure
   figure   13    illustration of the argument used in the proof of lemma 11.

   lemma 12

   the transformed derivations yield a context-free language.

   proof

   we construct a context-free grammar h that generates the set of yields
   of the transformed derivations. to simplify the presentation, we first
   construct a grammar h    that generates a superset of .

   construction of h   . the construction of the grammar h    is the same as
   the construction in the classical proof that showed the
   context-freeness of ab-grammars, by bar-hillel, gaifman, and shamir
   ([443]1960): the production rules of h    are set up to correspond to the
   valid rule instances of g. the reason that this construction is not
   useful for vw-id35s in general is that these may admit infinitely many
   rule instances, whereas a context-free grammar can only have finitely
   many productions. the set of rule instances may be infinite because
   vw-id35 has access to composition rules (specifically, rules of degrees
   greater than 1); in contrast, ab-grammars are restricted to
   application. crucially though, by lemma 11 we know that as long as we
   are interested only in transformed derivations it is sufficient to use
   a finite number of rule instances   more specifically those whose input
   and output categories are included in the set of arity-bounded
   categories. thus for every instance x/y y       x   where all three
   categories are in , we construct a production

   and similarly for backward rules. (we enclose categories in square
   brackets for clarity.) in addition, for every lexicon entry    := x in g
   we add to h    a production [x]       . as the terminal alphabet of h    we
   choose the vocabulary of g; as the nonterminal alphabet we choose the
   set ; and as the start symbol we choose the distinguished atomic
   category s. every transformed derivation of g corresponds (in an
   obvious way) to some derivation in h   , which proves that . conversely,
   every derivation of h    represents a derivation of g (though not
   necessarily a transformed derivation), thus l(h   )     l(g).

   construction of h. the chain of inclusions is sufficient to prove lemma
   6: because and l(g) are parikh-equivalent (which we observed at the
   beginning of [444]section 3.4.2), so are l(h   ) and l(g), which means
   that l(h   ) satisfies all of the properties claimed in lemma 6, even
   though this does not suffice to prove our current lemma. however, once
   h    is given, it is not hard to also obtain a grammar h that generates
   exactly . for this, we need to filter out derivations whose projection
   paths do not have the characteristic property of transformed
   derivations that we established in lemma 10. (it is not hard to see
   that every derivation that does have this property is a transformed
   derivation.) we annotate the left-hand side nonterminals in the
   productions of h    with a flag t     {a, c} to reflect whether the
   corresponding category has been derived by means of application (t = a)
   or composition (t = c); the value of this flag is simply the type of
   combinatory rule that gave rise to the production. the nonterminals in
   the right-hand sides are annotated in all possible ways, except that
   the following combinations are ruled out:

   these combinations represent exactly the cases where the output
   category of a composition rule is used as the primary input category of
   an application rule, which are the cases that violate the    split   
   property that we established in lemma 10.

   this concludes the proof of lemma 6, and therefore the proof of theorem
   3.
   3.5   discussion

   theorem 3 pinpoints the exact mechanism that vw-id35 uses to achieve
   weak equivalence to tag: at least for the class of prefix-closed
   grammars, tag equivalence is achieved if and only if we allow target
   restrictions. although target restrictions are frequently used in
   linguistically motivated grammars, it is important and perhaps
   surprising to realize that they are indeed necessary to achieve the
   full generative capacity of vw-id35.

   in the grammar formalisms folklore, the generative capacity of id35 is
   often attributed to generalized composition, and indeed we have seen
   (in lemma 4) that even grammars without target restrictions can
   generate non-context-free languages such as l(g[2]). however, our
   results show that composition by itself is not enough to achieve weak
   equivalence with tag: the yields of the transformed derivations from
   [445]section 3.4 form a context-free language despite the fact that
   these derivations may still contain compositions, including
   compositions of degree n > 2. in addition to composition, vw-id35 also
   needs target restrictions to exert enough control on word order to
   block unwanted permutations. one way to think about this is that target
   restrictions can enforce alternations of composition and application
   (as in the derivation shown in [446]figure 6), while transformed
   derivations are characterized by projection paths without such
   alternations (lemma 10).

   we can sharpen the picture even more by observing that the target
   restrictions that are crucial for the generative capacity of vw-id35 are
   not those on generalized composition, but those on function
   application. to see this we can note that the proof of lemma 8 goes
   through also only if application rules such as (9) and (10) are without
   target restrictions. this means that we have the following
   qualification of theorem 1.

   lemma 13

   prefix-closed vw-id35 is weakly equivalent to tag only because it
   supports target restrictions on forward and backward application.

   this finding is unexpected indeed   for instance, no grammar in steedman
   ([447]2000) uses target restrictions on the application rules.
   4.   generative capacity of multimodal id35
   section:
   [choose___________________________]
   [448]previous section [449]next section

   after clarifying the mechanisms that    classical    id35 uses to achieve
   weak equivalence with tag, we now turn our attention to    modern,   
   multimodal versions of id35 (baldridge and kruijff [450]2003; steedman
   and baldridge [451]2011). these versions emphasize the use of fully
   lexicalized grammars in which no rule restrictions are allowed, and
   instead equip slashes with types in order to control the use of the
   combinatory rules. our central question is whether the use of slash
   types is sufficient to recover the expressiveness that we lose by
   giving up rule restrictions.

   we need to fix a specific variant of multimodal id35 to study this
   question formally. published works on multimodal id35 differ with
   respect to the specific inventories of slash types they assume. some
   important details, such as a precise definition of generalized
   composition with slash types, are typically not discussed at all. in
   this article we define a variant of multimodal id35 which we call o-id35.
   this formalism extends our definition of vw-id35 (definition 1) with the
   slash inventory and the composition rules of the popular openid35
   grammar development system (white [452]2013). our technical result is
   that the main lemma (lemma 6) also holds for o-id35. with this we can
   conclude that the answer to our question is negative: slash types are
   not sufficient to replace rule restrictions; o-id35 is strictly less
   powerful than tag. although this is primarily a theoretical result, at
   the end of this section we also discuss its implications for practical
   grammar development.
   4.1   multimodal id35

   we define o-id35 as a formalism that extends vw-id35 with the slash types
   of openid35, but abandons rule restrictions. note that openid35 has a
   number of additional features that affect the generative capacity; we
   discuss these in [453]section 4.4.

   slash types. like other incarnations of multimodal id35, o-id35 uses an
   enriched notion of categories where every slash has a type. there are
   eight such types:[454]^5

   the basic idea behind these types is as follows. slashes with type *
   can only be used to instantiate application rules. type     also licenses
   harmonic composition rules, and type    also licenses crossed
   composition rules. type    is the least restrictive type and can be used
   to instantiate all rules. the remaining types refine the system by
   incorporating a dimension of directionality. the exact type   rule
   compatibilities are specified in [455]figure 14.
   [456]figure
   figure   14    compatibility of slash types with combinatory rules.

   inertness. o-id35 is distinguished from other versions of multimodal
   id35, such as that of baldridge and kruijff ([457]2003), in that every
   slash not only has a type but also an inertness status. inertness was
   introduced by baldridge ([458]2002, section 8.2.2) as an implementation
   of the    antecedent government    (ant) feature of steedman ([459]1996),
   which is used to control the word order in certain english relative
   clauses. it is a two-valued feature. arguments whose slash type has
   inertness status + are called active; arguments whose slash type has
   inertness status     are called inert. only active arguments can be
   eliminated by means of combinatory rules; however, an inert argument
   can still be consumed as part of a secondary input category. for
   example, the following instance of application is valid because the
   outermost slash of the primary input category has inertness status +:

   we use the notations and to denote the forward and backward slashes
   with slash type t and inertness status s.

   rules. all o-id35 grammars share a fixed set of combinatory rules, shown
   in [460]figure 15. every grammar uses all rules, up to some
   grammar-specific bound on the degree of generalized composition. as
   mentioned earlier, a combinatory rule can only be instantiated if the
   slashes of the input categories have compatible types. additionally,
   all composition rules require the slashes of the secondary input
   category to have a uniform direction. this is a somewhat peculiar
   feature of openid35, and is in contrast to vw-id35 and other versions of
   id35, which also allow composition rules with mixed directions.
   [461]figure
   figure   15    the rules of o-id35. for a rule to apply, all slashes in the
   scope of the rule must have one of the specified compatible types (cf.
   figure 14). the predicates left(t)/right(t) are true if and only if t
   is equal to either a left/right type or one of the four undirected core
   types.

   composition rules are classified into harmonic and crossed forms. this
   distinction is based on the direction of the slashes in the secondary
   input category. if these have the same direction as the outermost slash
   of the primary input category, then the rule is called harmonic;
   otherwise it is called crossed.[462]^6

   when a rule is applied, in most cases the arguments of the secondary
   input category are simply copied into the output category, as in
   vw-id35. the one exception happens for crossed composition rules if not
   all slash directions match the direction of their slash type (left or
   right). in this case, the arguments of the secondary input category
   become inert. thus the inertness status of an argument may change over
   the course of a derivation   but only from active to inert, not back
   again.

   definition 5

   a multimodal id35 in the sense of openid35, or
   o-id35 for short, is a structure

   where    is a finite vocabulary, is a finite set of atomic categories,
   := is a finite relation between    and the set of (multimodal)
   categories over , d     0 is the maximal degree of generalized
   composition, and s     a is a distinguished atomic category.

   we generalize the notions of rule instances, derivation trees, and
   generated language to categories over slashes with types and inertness
   statuses in the obvious way: instead of two slashes, we now have one
   slash for every combination of a direction, type, and inertness status.
   similarly, we generalize the concepts of a grammar being prefix-closed
   (definition 2) and without target restrictions (definition 3) to o-id35.
   4.2   generative capacity

   we now investigate the generative capacity of o-id35. we start with the
   (unsurprising) observation that o-id35 can describe non-context-free
   languages.

   lemma 14

   the languages generated by o-id35 properly include the context-free
   languages.

   proof

   inclusion follows from the fact that every ab-grammar can be written as
   an o-id35 with only application (d = 0). to show that the inclusion is
   proper, we use the same argument as in the proof of lemma 4. the
   grammar g[2] that we constructed there can be turned into an equivalent
   o-id35 by decorating each slash with   , the least restrictive type, and
   setting its inertness status to +.

   what is less obvious is whether o-id35 generates the same class of
   languages as vw-id35 and tag. our main result is that this is not the
   case.

   theorem 4

   the languages generated by o-id35 are properly included in the tag
   languages.

   o-id35 without inertness. to approach theorem 4, we set inertness aside
   for a moment and focus on the use of the slash types as a mechanism for
   imposing rule restrictions. each of the rules in [463]figure 15
   requires all of the slash types of the n outermost arguments of its
   secondary input category to be compatible with the rule, in the sense
   specified in [464]figure 14. if we now remove one or more of these
   arguments from a valid rule instance, then the new instance is clearly
   still valid, as we have reduced the number of potential violations of
   the type   rule compatibility. this shows that the rule system is
   prefix-closed. as none of the rules is conditioned on the target of the
   primary input category, the rule system is even without target
   restrictions. with these two properties established, theorem 4 can be
   proved by literally the same arguments as those that we gave in
   [465]section 3. thus we see directly that the theorem holds for
   versions of multi-modal id35 without inertness, such as the formalism of
   baldridge and kruijff ([466]2003).

   o-id35 with inertness. in the general case, the situation is complicated
   by the fact that the crossed composition rules change the inertness
   status of some argument categories if the slash types have conflicting
   directions. this means that the crossed composition rules in o-id35 are
   not entirely prefix-closed, as illustrated by the following example.

   example 11

   consider the following two rule instances:

   instance (12) is a valid instance of forward crossed composition.
   prefix-closedness would require instance (13) to be valid as well; but
   it is not. in instance (12) the inertness status of is changed for the
   only reason that the slash type of does not match the required
   direction. in instance (13) the argument is not present, and therefore
   the inertness status of is not changed, but is carried over to the
   output category.

   we therefore have to prove that the following analogue of lemma 6 holds
   for o-id35:

   lemma 2 (main lemma for o-id35)

   for every language l generated by some o-id35 there is a sublanguage l   
       l such that
   1.   

   l    and l are parikh-equivalent, and
   2.   

   l    is context-free.
   this lemma implies that the language l[1] = {a^nb^nc^n | n     1} from
   example 2 cannot be generated by o-id35 (but by prefix-closed vw-id35
   with target restrictions, and by tag). the argument is the same as in
   the proof of theorem 3.
   4.3   proof of the main lemma for o-id35

   the proof of lemma 15 adapts the rewriting system from [467]figure 12.
   we simply let each rewriting step copy the type and inertness status of
   each slash from the left-hand side to the right-hand side of the
   rewriting rule. with this change, it is easy to verify that the proofs
   of lemma 7 (termination and confluence), lemma 10 (projection paths in
   transformed derivations are split), lemma 11 (transformed derivations
   contain a finite number of categories), and lemma 12 (transformed
   derivations yield a context-free language) go through without problems.
   the proof of lemma 8, however, is not straightforward, because of the
   dynamic nature of the inertness statuses. we therefore restate the
   lemma for o-id35:

   lemma 16

   the rewriting system transforms o-id35 derivations into o-id35
   derivations.

   proof

   as in the proof of lemma 8 we establish the stronger result that the
   claimed property holds for every single rewriting step. we only give
   the argument for rewriting under r3, which involves instances of
   forward crossed composition. the argument for r4 is analogous, and r1
   and r2 are simpler cases because they involve harmonic composition,
   where the inertness status does not change.

   suppose that r3 is applied to a derivation of some o-id35. in their most
   general form, the rule instances in the scope of the left-hand side of
   r3 may be written as follows, where the function    is defined as
   specified in [468]figure 15:

   here instance (14) is an instance of forward-crossed composition, so
   each of the types t[i] is compatible with that rule. because the two
   marked arguments are identical, we have   (s[1]) = +. this is only
   possible if the inertness statuses of the slashes do not change in the
   context of derivation (14), that is, if   (s[i]) = s[i] for all 1     i    
   n. note that in this case, t[0] is either a right type or one of the
   four undirected core types, and each t[1],     , t[n] is either a left
   type or a core type. we can now alternatively write instances (14) and
   (15) as

   then the rule instances in the rewritten derivation can be written as
   follows:

   here instance (16) is clearly a valid instance of backward application.
   based on our earlier observations about the t[i] and their
   compatibility with crossed composition, we also see that instance (17)
   is a valid instance of forward crossed composition (if n > 1), or of
   forward application (if n = 1).

   this completes the proof of lemma 15. to finish the proof of theorem 4
   we have to also establish the inclusion of the o-id35 languages in the
   tag languages. this is a known result for other dialects of multimodal
   id35 (baldridge and kruijff [469]2003), but o-id35 once again requires
   some extra work because of inertness.

   lemma 17

   the o-id35 languages are included in the tag languages.

   proof (sketch)

   it suffices to show that the o-id35 languages are included in the class
   of languages generated by lig (gazdar [470]1987); the claim then
   follows from the weak equivalence of lig and tag. vijay-shanker and
   weir ([471]1994, [472]section 3.1) present a construction that
   transforms an arbitrary vw-id35 into a weakly equivalent lig. it is
   straightforward to adapt their construction to o-id35. as we do not have
   the space here to define lig, we only provide a sketch of the adapted
   construction.

   as in the case of vw-id35, the valid instances of an o-id35 rule can be
   written down using our template notation. the adapted construction
   converts each such template into a production rule of a weakly
   equivalent lig. consider for instance the following instance of forward
   crossed composition from example 11:

   this template is converted into the following lig rule. we adopt the
   notation of vijay-shanker and weir ([473]1994) and write        for the
   tail of a stack of unbounded size.

   in this way, every o-id35 can be written as a weakly equivalent lig.
   4.4   discussion

   in this section we have shown that the languages generated by o-id35 are
   properly included in the languages generated by tag, and equivalently,
   in the languages generated by vw-id35. this means that the multimodal
   machinery of openid35 is not powerful enough to express the rule
   restrictions of vw-id35 in a fully lexicalized way. the result is easy
   to obtain for o-id35 without inertness, which is prefix-closed and
   without target restrictions; but it is remarkably robust in that it
   also applies to o-id35 with inertness, which is not prefix-closed. as we
   have already mentioned, the result carries over also to other
   multimodal versions of id35, such as the formalism of baldridge and
   kruijff ([474]2003).

   our result has implications for practical grammar development with
   openid35. to illustrate this, recall example 7, which showed that every
   vw-id35 without target restrictions for swiss german that allows
   cross   serial word orders as in derivation (5) also permits alternative
   word orders, as in derivation (6). by lemma 15, this remains true for
   o-id35 or weaker multimodal formalisms. this is not a problem in the
   case of swiss german, where the alternative word orders are
   grammatical. however, there is at least one language, dutch, where
   dependencies in subordinate clauses must cross. for this case, our
   result shows that the modalized composition rules of openid35 are not
   powerful enough to write adequate grammars. consider the following
   classical example:

   the straightforward derivation of the cross   serial dependencies in this
   sentence (adapted from steedman [475]2000, p. 141) is exemplified in
   [476]figure 16. it takes the same form as derivation (5) for swiss
   german: the verbs and their np arguments lie on a single,
   right-branching path projected from the tensed verb zag. this
   projection path is not split; specifically, it starts with a
   composition that produces a category which acts as the primary input
   category of an application. as a consequence, the derivation can be
   transformed (by our rewriting rule r3) in exactly the same way as
   instance (5) could be transformed into derivation (6). the crucial
   difference is that the yield of the transformed derivation, *ik cecilia
   zag de paarden voeren, is not a grammatical clause of dutch.
   [477]figure
   figure   16    straightforward derivation of dutch cross   serial
   dependencies.

   to address the problem of ungrammatical word orders in dutch
   subordinate clauses, the vw-id35 grammar of steedman ([478]2000) and the
   multimodal id35 grammar of baldridge ([479]2002, section 5.3.1) resort
   to combinatorial rules other than composition. in particular, they
   assume that all complement noun phrases undergo obligatory
   type-raising, and become primary input categories of application rules.
   this gives rise to derivations such as the one shown in [480]figure 17,
   which cannot be transformed using our rewriting rules because the
   result of the forward crossed composition >^1 now is a secondary rather
   than a primary input category. as a consequence, this grammar is
   capable of enforcing the obligatory cross-serial dependencies of dutch.
   however, it is important to note that it requires type-raising over
   arbitary categories with target s (observe the increasingly complex
   type-raised categories for the nps). this kind of type-raising is
   allowed in many variants of id35, including the full formalism
   underlying openid35. vw-id35 and o-id35, however, are limited to
   generalized composition, and can only support derivations like the one
   in [481]figure 17 if all the type-raised categories for the noun
   phrases are available in the lexicon. the unbounded type-raising
   required by the steedman   baldridge analysis of dutch would translate
   into an infinite lexicon, and so this analysis is not possible in
   vw-id35 and o-id35.

   we conclude by discussing the impact of several other constructs of
   openid35 that we have not captured in o-id35. first, openid35 allows us to
   use generalized composition rules of arbitrary degree; there is no
   upper bound d on the composition degree as in an o-id35 grammar. it is
   known that this extends the generative capacity of id35 beyond that of
   tag (weir [482]1988). second, openid35 allows categories to be annotated
   with feature structures. this has no impact on the generative capacity,
   as the features must take values from finite domains and can therefore
   be compiled into the atomic categories of the grammar. finally, openid35
   includes the combinatory rules of substitution and coordination, as
   well as multiset slashes, another extension frequently used in
   linguistic grammars. we have deliberately left these constructs out of
   o-id35 to establish the most direct comparison to the literature on
   vw-id35. it is conceivable that their inclusion could restore the weak
   equivalence to tag, but a proof of this result would require a
   non-trivial extension of the work of vijay-shanker and weir
   ([483]1994). regarding multiset slashes, it is also worth noting that
   these were introduced with the expressed goal of allowing more flexible
   word order, whereas restoration of weak equivalence would require more
   controlled word order.
   [484]figure
   figure   17    derivation of dutch cross   serial dependencies with
   type-raised noun complements.
   5.   conclusion
   section:
   [choose________________________]
   [485]previous section [486]next section

   in this article we have contributed two technical results to the
   literature on id35. first, we have refined the weak equivalence result
   for id35 and tag (vijay-shanker and weir [487]1994) by showing that
   prefix-closed grammars are weakly equivalent to tag only if target
   restrictions are allowed. second, we have shown that o-id35, the formal,
   composition-only core of openid35, is not weakly equivalent to tag.
   these results point to a tension in id35 between lexicalization and
   generative capacity: lexicalized versions of the framework are less
   powerful than classical versions, which allow rule restrictions.

   what conclusions one draws from these technical results depends on the
   perspective. one way to look at id35 is as a system for defining formal
   languages. under this view, one is primarily interested in results on
   generative capacity and parsing complexity such as those obtained by
   vijay-shanker and weir ([488]1993, [489]1994). here, our results
   clarify the precise mechanisms that make id35 weakly equivalent to tag.
   perhaps surprisingly, it is not the availability of generalized
   composition rules by itself that explains the generative power of id35,
   but the ability to constrain the interaction between generalized
   composition and function application by means of target restrictions.

   on the other hand, one may be interested in id35 primarily as a
   formalism for developing grammars for natural languages (steedman
   [490]2000; baldridge [491]2002; steedman [492]2012). from this point of
   view, the suitability of id35 for the development of lexicalized
   grammars has been amply demonstrated. however, our technical results
   still serve as important reminders that extra care must be taken to
   avoid overgeneration when designing a grammar. in particular, it is
   worth double-checking that an openid35 grammar does not generate word
   orders that the grammar developer did not intend. here the rewriting
   system that we presented in [493]figure 12 can serve as a useful tool:
   a grammar developer can take any derivation for a grammatical sentence,
   transform the derivation according to our rewriting rules, and check
   whether the transformed derivation still yields a grammatical sentence.

   it remains an open question how the conflicting desires for generative
   capacity and lexicalization might be reconciled. a simple answer is to
   add some lexicalized method for enforcing target restrictions to id35,
   specifically on the application rules. however, we are not aware that
   this idea has seen widespread use in the id35 literature, so it may not
   be called for empirically. alternatively, one might modify the rules of
   o-id35 in such a way that they are no longer prefix-closed   for example,
   by introducing some new slash type. finally, it is possible that the
   constructs of openid35 that we set aside in o-id35 (such as type-raising,
   substitution, and multiset slashes) might be sufficient to achieve the
   generative capacity of classical id35 and tag. a detailed study of the
   expressive power of these constructs would make an interesting avenue
   for future research.
   acknowledgments
   section:
   [choose________________________]
   [494]previous section [495]next section

   we are grateful to mark steedman and jason baldridge for enlightening
   discussions of the material presented in this article, and to the four
   anonymous reviewers of the article for their detailed and constructive
   comments.
   notes
   section:
   [choose________________________]
   [496]previous section [497]next section

   1    this means that we ignore other rules required for linguistic
   analysis, in particular type-raising (from the t combinator),
   substitution (from the s combinator), and coordination.

   2    the literature on id35 assumes a bound on n; for english, steedman
   ([498]2000, p. 42) puts n     3. adding rules of unbounded degree
   increases the generative capacity of the formalism weir and joshi
   ([499]1988).

   3    also, ab-grammar does not support lexicon entries for the empty
   string.

   4    recall that we use the greek letter    to denote a (possibly empty)
   sequence of arguments.

   5    the type system of openid35 is an extension of the system used by
   baldridge ([500]2002).

   6    in versions of id35 that allow rules with mixed slash directions, the
   distinction between harmonic and crossed is made based on the direction
   of the innermost slash of the secondary input category, |[i].
   references
   section:
   [choose________________________]
   [501]previous section [502]next section
   ajdukiewicz, kazimierz. 1935. die syntaktische konnexit  t. studia
   philosophica, 1:1   27. [503]google scholar
   baldridge, jason. 2002. lexically specified derivational control in
   id35. ph.d. thesis, university of edinburgh,
   edinburgh, uk. [504]google scholar
   baldridge, jason and geert-jan m. kruijff. 2003. multi-modal
   combinatory categorical grammar. in tenth conference of the european
   chapter of the association for computational linguistics (eacl), pages
   211   218, budapest. [505]google scholar
   bar-hillel, yehoshua, haim gaifman, and eli shamir. 1960. on categorial
   and phrase structure grammars. bulletin of the research council of
   israel, 9f(1):1   16. reprinted in yehoshua bar-hillel. language and
   information: selected essays on their theory and application, pages
   99   115. addison-wesley, 1964. [506]google scholar
   curry, haskell b., robert feys, and william craig. 1958. combinatory
   logic. volume 1. studies in logic and the foundations of mathematics.
   north-holland. [507]google scholar
   eisner, jason. 1996. efficient normal-form parsing for combinatory
   categorial grammar. in proceedings of the 34th annual meeting of the
   association for computational linguistics (acl), pages 79   86, santa
   cruz, ca. [508]crossref, [509]google scholar
   gazdar, gerald. 1987. applicability of indexed grammars to natural
   language. in uwe reyle and christian rohrer, editors, natural language
   parsing and linguistic theories. d. reidel, pages 69   94. [510]google
   scholar
   joshi, aravind k. 1985. id34s: how much
   context-sensitivity is required to provide reasonable structural
   descriptions? in david r. dowty, lauri karttunen, and arnold m. zwicky,
   editors, natural language parsing. cambridge university press, pages
   206   250. [511]google scholar
   joshi, aravind k. and yves schabes. 1997. tree-adjoining grammars. in
   grzegorz rozenberg and arto salomaa, editors, handbook of formal
   languages, volume 3. springer, pages 69   123. [512]google scholar
   kuhlmann, marco, alexander koller, and giorgio satta. 2010. the
   importance of rule restrictions in id35. in proceedings of the 48th
   annual meeting of the association for computational linguistics (acl),
   pages 534   543, uppsala. [513]google scholar
   moortgat, michael. 2011. categorial type logics. in johan van benthem
   and alice ter meulen, editors, handbook of logic and language.
   elsevier, second edition, chapter 2, pages 95   179. [514]google scholar
   pollard, carl j. 1984. generalized phrase structure grammars, head
   grammars, and natural language. ph.d. thesis, stanford university.
   [515]google scholar
   shieber, stuart m. 1985. evidence against the context-freeness of
   natural language. linguistics and philosophy, 8(3):333   343.
   [516]crossref, [517]google scholar
   steedman, mark. 1996. surface structure and interpretation, volume 30
   of linguistic inquiry monographs. mit press. [518]google scholar
   steedman, mark. 2000. the syntactic process. mit press. [519]google
   scholar
   steedman, mark. 2012. taking scope. mit press. [520]google scholar
   steedman, mark and jason baldridge. 2011. combinatory categorial
   grammar. in robert d. borsley and kersti b  rjars, editors,
   non-transformational syntax: formal and explicit models of grammar.
   blackwell, chapter 5, pages 181   224. [521]google scholar
   vijay-shanker, k. and david j. weir. 1993. parsing some constrained
   grammar formalisms. computational linguistics, 19(4):591   636.
   [522]google scholar
   vijay-shanker, k. and david j. weir. 1994. the equivalence of four
   extensions of context-free grammars. mathematical systems theory,
   27(6):511   546. [523]crossref, [524]google scholar
   vijay-shanker, k., david j. weir, and aravind k. joshi. 1986. tree
   adjoining and head wrapping. in proceedings of the eleventh
   international conference on computational linguistics (coling), pages
   202   207, bonn. [525]google scholar
   weir, david j. 1988. characterizing mildly context-sensitive grammar
   formalisms. ph.d. thesis, university of pennsylvania. [526]google
   scholar
   weir, david j. and aravind k. joshi. 1988. combinatory categorial
   grammars: generative power and relationship to linear context-free
   rewriting systems. in proceedings of the 26th annual meeting of the
   association for computational linguistics (acl), pages 278   285,
   buffalo, ny. [527]crossref, [528]google scholar
   white, michael. 2013. openid35: the opennlp id35 library.
   [529]http://openid35.sourceforge.net/ accessed november 13, 2013.
   [530]google scholar
   marco kuhlmann*
   link  ping university
   alexander koller**
   university of potsdam
   giorgio satta   
   university of padua

   *department of computer and information science, link  ping university,
   581 83 link  ping, sweden. e-mail: [531][email protected].

   **department of linguistics, karl-liebknecht-str. 24   25, university of
   potsdam, 14476 potsdam, germany. e-mail: [532][email protected].

      department of information engineering, university of padua, via
   gradenigo 6/a, 35131 padova, italy. e-mail: [533][email protected].
   [534]forthcoming
   [535][preview-1489555631417.svg] download options
   [arrow-button-1488499533633.svg]

lexicalization and generative power in id35

   [536]marco kuhlmann, [537]alexander koller and [538]giorgio satta
   [539]https://doi.org/10.1162/coli_a_00219
   received: december 04, 2013
   accepted: november 25, 2014
   published online: june 17, 2015
     * [540]full text
     * [541]authors
     * [542]pdf
     * [543]pdf plus

abstract

   section:
   [choose________________________]
   [544]next section

   the weak equivalence of id35 (id35) and
   tree-adjoining grammar (tag) is a central result of the literature on
   mildly context-sensitive grammar formalisms. however, the categorial
   formalism for which this equivalence has been established differs
   significantly from the versions of id35 that are in use today. in
   particular, it allows restriction of combinatory rules on a per grammar
   basis, whereas modern id35 assumes a universal set of rules, isolating
   all cross-linguistic variation in the lexicon. in this article we
   investigate the formal significance of this difference. our main result
   is that lexicalized versions of the classical id35 formalism are
   strictly less powerful than tag.
      2015 association for computational linguistics
   1.   introduction
   section:
   [choose________________________]
   [545]previous section [546]next section

   since the late 1970s, several grammar formalisms have been proposed
   that extend the power of context-free grammars in restricted ways. the
   two most prominent members of this class of    mildly context-sensitive   
   formalisms (a term coined by joshi [547]1985) are tree-adjoining
   grammar (tag; joshi and schabes [548]1997) and combinatory categorial
   grammar (id35; steedman [549]2000; steedman and baldridge [550]2011).
   both formalisms have been applied to a broad range of linguistic
   phenomena, and are being widely used in computational linguistics and
   natural language processing.

   in a seminal paper, vijay-shanker and weir ([551]1994) showed that tag,
   id35, and two other mildly context-sensitive formalisms   head grammar
   (pollard [552]1984) and linear indexed grammar (gazdar [553]1987)   all
   characterize the same class of string languages. however, when citing
   this result it is sometimes overlooked that the result applies to a
   version of id35 that is quite different from the versions that are in
   practical use today. the goal of this article is to contribute to a
   better understanding of the significance of this difference.

   the difference between    classical    id35 as formalized by vijay-shanker
   and weir ([554]1994) and the modern perspective may be illustrated with
   the combinatory rule of backward-crossed composition. the general form
   of this rule looks as follows:

   this rule is frequently used in the analysis of heavy np shift, as in
   the sentence kahn blocked skillfully a powerful shot by rivaldo
   (example from baldridge [555]2002). however, backward crossed
   composition cannot be universally active in english as this would cause
   the grammar to also accept strings such as *a powerful by rivaldo shot,
   which is witnessed by the derivation in [556]figure 1. to solve this
   problem, in the id35 formalism of vijay-shanker and weir ([557]1994),
   one may restrict backward-crossed composition to instances where x and
   y are both verbal categories   that is, functions into the category s of
   sentences (cf. steedman [558]2000, section 4.2.2). with this
   restriction the unwanted derivation in [559]figure 1 can be blocked,
   and a powerful shot by rivaldo is still accepted as grammatical. other
   syntactic phenomena require other grammar-specific restrictions,
   including the complete ban of certain combinatory rules (cf. steedman
   [560]2000, section 4.2.1).
   [561]figure
   figure   1    overgeneration caused by unrestricted backward crossed
   composition.

   over the past 20 years, id35 has evolved to put more emphasis on
   supporting fully lexicalized grammars (baldridge and kruijff [562]2003;
   steedman and baldridge [563]2011), in which as much grammatical
   information as possible is pushed into the lexicon. this follows the
   tradition of other frameworks such as lexicalized tree-adjoining
   grammar (ltag) and head-driven phrase structure grammar (hpsg).
   grammar-specific rule restrictions are not connected to individual
   lexicon entries, and are therefore avoided. instead, recent versions of
   id35 have introduced a new, lexicalized control mechanism in the form of
   modalities or slash types. the basic idea here is that combinatory
   rules only apply if the slashes in their input categories have the
   right types. for instance, the modern version of backward-crossed
   composition (steedman and baldridge [564]2011) takes the following
   form, where    is a slash type that allows crossed but not harmonic
   composition:

   the derivation in [565]figure 1 can now be blocked by assigning the
   slash in the category of powerful a type that is incompatible with   ,
   and thus cannot feed into type-aware backward-crossed composition as an
   input category. this    modalization    of grammatical composition, which
   imports some of the central ideas from the type-logical tradition of
   categorial grammar (moortgat [566]2011) into the id35 framework, is
   attractive because it isolates the control over the applicability of
   combinatory rules in the lexicon. quoting steedman and baldridge
   ([567]2011, p. 186):

   without typed slashes, language-specific restrictions or even bans on
   some combinatory rules are necessary in order to block certain
   ungrammatical word orders. with them, the combinatory rules are truly
   universal: the grammar of every language utilizes exactly the same set
   of rules, without modification, thereby leaving all cross-linguistic
   variation in the lexicon. as such, id35 is a fully lexicalized grammar
   formalism.

   the stated goal is thus to express all linguistically relevant
   restrictions on the use of combinatory rules in terms of lexically
   specified, typed slashes. but to what extent can this goal actually be
   achieved? so far, there have been only partial answers   even when, as in
   the formalism of vijay-shanker and weir ([568]1994), we restrict
   ourselves to the rules of composition, but exclude other rules such as
   type-raising and substitution. baldridge and kruijff ([569]2003) note
   that the machinery of their multi-modal formalism can be simulated by
   rule restrictions, which shows that this version of lexicalized id35 is
   at most as expressive as the classical formalism. at the other end of
   the spectrum, we have shown in previous work that a    pure    form of
   lexicalized id35 with neither rule restrictions nor slash types is
   strictly less expressive (kuhlmann, koller, and satta [570]2010). the
   general question of whether    classical    id35 (rule restrictions) and
      modern    id35 (slash types instead of rule restrictions) are weakly
   equivalent has remained open.

   in this article, we answer this question. our results are summarized in
   [571]figure 2. after setting the stage ([572]section 2), we first
   pinpoint the exact type of rule restrictions that make the classical
   id35 formalism weakly equivalent to tag ([573]section 3). we do so by
   focusing on a class of grammars that we call prefix-closed. unlike the
      pure    grammars that we studied in earlier work, prefix-closed grammars
   do permit rule restrictions (under certain conditions that seem to be
   satisfied by linguistic grammars). we show that the generative power of
   prefix-closed id35 depends on its ability to express target
   restrictions, which are exactly the functions-into type of restrictions
   that are needed to block the derivation in [574]figure 1. we prove that
   the full class of prefix-closed id35s is weakly equivalent to tag, and
   the subclass that cannot express target restrictions is strictly less
   powerful. this result significantly sharpens the picture of the
   generative capacity of id35.
   [575]figure
   figure   2    summary of the results in this article. vw-id35 is the
   formalism of vijay-shanker and weir ([576]1994).

   in a further step ([577]section 4), we then prove that for at least one
   popular incarnation of modern, lexicalized id35, slash types are
   strictly less expressive than rule restrictions. more specifically, we
   look at a variant of id35 consisting of the composition rules
   implemented in openid35 (white [578]2013), the most widely used
   development platform for id35 grammars. we show that this formalism is
   (almost) prefix-closed and cannot express target restrictions, which
   enables us to apply our generative capacity result from the first step.
   the same result holds for (the composition-only fragment of) the
   formalism of baldridge and kruijff ([579]2003). thus we find that, at
   least with existing means, the weak equivalence result of vijay-shanker
   and weir cannot be obtained for lexicalized id35. we conclude the
   article by discussing the implications of our results ([580]section 5).
   2.   background
   section:
   [choose________________________]
   [581]previous section [582]next section

   in this section we provide the technical background of the article. we
   introduce the basic architecture of id35, present the formalism of
   vijay-shanker and weir ([583]1994), and set the points of reference for
   our results about generative capacity.
   2.1   basic architecture of id35

   the two central components of id35 are a lexicon that associates words
   with categories, and rules that specify how categories can be combined.
   taken together, these components give rise to derivations, such as the
   one shown in [584]figure 3.
   [585]figure
   figure   3    a sample derivation (adapted from steedman [586]2012).

   lexicon. a category is a syntactic type that identifies a constituent
   as either    complete    or    incomplete.    the categories of complete
   constituents are taken to be primitives; the categories of incomplete
   constituents are modeled as (curried) functions that specify the type
   and the direction of their arguments. every category is projected from
   the lexicon, which is a finite collection of word   category pairs. to
   give examples (taken from steedman [587]2012), an english intransitive
   verb such as walks has a category that identifies it as a function
   seeking a (subject) noun phrase to its left (indicated by a backward
   slash) and returning a complete sentence; and a transitive verb such as
   admires has a category that identifies it as a function seeking an
   (object) noun phrase to its right (indicated by a forward slash) and
   returning a constituent that acts as an intransitive verb. we denote
   lexical assignment using the    colon equals    operator:

   formally, the set of categories is built over a finite set of atomic
   categories, the primitive syntactic types. it is the smallest set such
   that
   1.   

   if then ;
   2.   

   if then and .
   we use the letters a, b, c to denote atomic categories, the letters x,
   y, z to denote arbitrary categories, and the symbol | to denote slashes
   (forward or backward). we treat slashes as left-associative operators
   and omit unnecessary parentheses. by this convention, every category x
   can be written in the form

   where m     0, a is an atomic category that we call the target of x, and
   the |[i]x[i] are slash   category pairs that we call the arguments of x.
   intuitively, the target of x is the atomic category that is obtained
   after x has been applied to all of its arguments. we use the greek
   letters   ,   ,    to denote (potentially empty) sequences of arguments.
   the number m is called the arity of the category x.

   rules. categories can combine under a number of rules; this gives rise
   to derivations such as the one shown in [588]figure 3. each rule
   specifies an operation that assembles two input categories into an
   output category. the two most basic rules of id35 are the directed
   versions of function application:

   formally, a rule is a syntactic object in which the letters x, y, z act
   as variables for categories. a rule instance is obtained by
   substituting concrete categories for all variables in the rule. for
   example, the derivation in [589]figure 3 contains the following
   instances of function application. we denote rule instances by using a
   triple arrow instead of the double arrow in our notation for rules.

   application rules give rise to derivations equivalent to those of
   context-free grammar. indeed, versions of categorial grammar where
   application is the only mode of combination, such as ab-grammar
   (ajdukiewicz [590]1935; bar-hillel, gaifman, and shamir [591]1960), can
   only generate context-free languages. id35 can be more powerful because
   it also includes other rules, derived from the combinators of
   combinatory logic (curry, feys, and craig [592]1958). in this article,
   as in most of the formal work on id35, we restrict our attention to the
   rules of (generalized) composition, which are based on the b
   combinator.[593]^1

   the general form of composition rules is shown in [594]figure 4. in
   each rule, the two input categories are distinguished into one primary
   (shaded) and one secondary input category. the number n of outermost
   arguments of the secondary input category is called the degree of the
   rule.[595]^2 in particular, for n = 0 we obtain the rules of function
   application. in contexts where we refer to both application and
   composition, we use the latter term for composition rules with degree n
   > 0.
   [596]figure
   figure   4    general form of composition rules (primary input category
   shaded), where n     0 and |[i]     {/, \}.

   derivation trees. derivation trees can now be schematically defined as
   in [597]figure 5. they contain two types of branchings: unary
   branchings correspond to lexicon entries; binary branchings correspond
   to rule instances. the yield of a derivation tree is the left-to-right
   concatenation of its leaves.
   [598]figure
   figure   5    schematic definition of the set of derivation trees of a
   grammar g.
   2.2   classical id35

   we now define the classical id35 formalism that was studied by
   vijay-shanker and weir ([599]1994) and originally introduced by weir
   and joshi ([600]1988). as mentioned in [601]section 1, the central
   feature of this formalism is its ability to impose restrictions on the
   applicability of combinatory rules. specifically, a restricted rule is
   a rule annotated with constraints that
   (a)   

   restrict the target of the primary input category; and/or
   (b)   

   restrict the secondary input category, either in parts or in its
   entirety.
   every grammar lists a finite number of restricted rules (where one and
   the same base rule may occur with several different restrictions). a
   valid rule instance is an instance that is compatible with at least one
   of the restricted rules.

   example 1

   linguistic grammars make frequent use of rule restrictions. to exclude
   the undesired derivation in [602]figure 1 we restricted backward
   crossed composition to instances where both the primary and the
   secondary input category are functions into the category of sentences,
   s. writing target for the function that returns the target of a
   category, the restricted rule can be written as

   in the following definition we write    for the empty string.

   definition 1

   a id35 in the sense of vijay-shanker and weir
   ([603]1994), or vw-id35 for short, is a structure

   where    is a finite vocabulary, is a finite set of atomic categories,
   the lexicon := is a finite relation between the sets   [  ] =        {  } and
   , r is a finite set of (possibly) restricted rules, and is a
   distinguished atomic category.

   a derivation tree of g consists of lexicon entries and valid instances
   of rules from r. the grammar g generates a string w if there exists a
   derivation tree whose yield is w and whose root node is labeled with
   the distinguished atomic category s. the language l(g) generated by g
   is the set of all generated strings.

   example 2

   we specify a vw-id35 that generates the language

   let   [1] = {a, b, c}, , s[1] = s, and let :=[1] consist of the entries

   finally, let r[1] consist of the following rules:
   1.   

   forward and backward application.
   2.   

   forward and backward composition of degree 1.
   3.   

   forward and backward composition of degree 2.
   each of these rules is restricted to instances where the target of the
   primary input category is s. a sample derivation of g[1] is shown in
   [604]figure 6. by contrast, [605]figure 7 shows a derivation that is
   not valid in g[1] because it uses application rules in which the target
   of the primary input category is b or c (rather than s).
   [606]figure
   figure   6    a sample derivation of the grammar g[1] from example 2.
   [607]figure
   figure   7    a derivation rendered ungrammatical by the rule restrictions
   in g[1].

   example 3

   ab-grammar is a categorial grammar formalism in which forward and
   backward application are the only combinatory rules that are allowed.
   furthermore, it does not support rule restrictions.[608]^3 every
   ab-grammar can therefore be written as a vw-id35 that allows all
   instances of application, but no other rules.

   the following lemmas establish two fundamental properties of vw-id35
   that we shall use at several places in this article. both of them are
   minor variants of lemmas proved by vijay-shanker and weir ([609]1994)
   (lemma 3.1 and lemma 3.2) and were previously stated by weir and joshi
   ([610]1988).

   lemma 1

   the set of arguments that occur in the derivations of a vw-id35 is
   finite.

   proof

   no composition rule creates new arguments: every argument that occurs
   in an output category already occurs in one of the input categories.
   therefore, every argument must come from some word   category pair in the
   lexicon, of which there are only finitely many.

   lemma 2

   the set of secondary input categories that occur in the derivations of
   a vw-id35 is finite.

   proof

   every secondary input category is obtained by substituting concrete
   categories for the variables that occur in the non-shaded component of
   one of the rules specified in [611]figure 4. after the substitution,
   all of these categories occur as part of arguments. then, with lemma 1,
   we deduce that the substituted categories come from a finite set. at
   the same time, each grammar specifies a finite set of rules. this means
   that there are only finitely many ways to obtain a secondary input
   category.

   when specifying vw-id35s, we find it convenient sometimes to provide an
   explicit list of valid rule instances, rather than a textual
   description of rule restrictions. for this we use a special type of
   restricted rule that we call templates. a template is a restricted rule
   that simultaneously fixes both
   (a)   

   the target of the primary input category of the rule, and
   (b)   

   the entire secondary input category.
   we illustrate the idea with an example.

   example 4

   we list the templates that correspond to the rule instances in the
   derivation from [612]figure 6. (the grammar allows other instances that
   are not listed here.) we use the symbol     as a placeholder for that
   part of a primary input category that is unconstrained by rule
   restrictions, and therefore may consist of an arbitrary sequence of
   arguments.

   for example, template (1) characterizes backward application (<^0)
   where the target of the primary input category is s and the secondary
   input category is a, and template (4) characterizes forward composition
   of degree 2 (>^2) where the target of the primary input category is s
   and the secondary input category is b/c/b.

   note that every vw-id35 can be specified using a finite set of
   templates: it has a finite set of combinatory rules; the set of
   possible targets of the primary input category of each rule is finite
   because each target is an atomic category; and the set of possible
   secondary input categories is finite because of lemma 2.
   2.3   tree-adjoining grammar

   in this article we are interested in the generative power of id35, in
   particular in its relation to that of tree-adjoining grammar. we
   therefore provide a compact introduction to tag. for more details, we
   refer to joshi and schabes ([613]1997).

   elementary trees. tree-adjoining grammar is a formalism for generating
   trees. these trees can be characterized as rooted, ordered trees in
   which internal nodes are labeled with nonterminal symbols   including a
   distinguished start symbol s   and leaf nodes are labeled with
   nonterminals, terminals, or the empty string. every grammar specifies a
   finite set of such trees; these are called elementary trees. there are
   two types: initial trees and auxiliary trees. they differ in that
   auxiliary trees have a distinguished nonterminal-labeled leaf node,
   called foot node; this node is conventionally marked with an asterisk.
   an elementary tree whose root node is labeled with a nonterminal a is
   called an a-tree.

   substitution and adjunction. new trees may be derived by combining
   other trees using two operations called substitution and adjunction.
   substitution replaces some leaf node of a given tree with an initial
   tree (or a tree derived from an initial tree). adjunction replaces some
   internal node u of a given tree with an auxiliary tree (or a tree
   derived from an auxiliary tree); the subtree with root u replaces the
   foot node of the auxiliary tree. all replacements are subject to the
   condition that the node being replaced and the root of the tree that
   replaces it are labeled with the same nonterminal.

   generated languages. the tree language generated by a tag is the set of
   all trees that can be derived from its initial s-trees. derivations are
   considered complete only if they satisfy additional, node-specific
   constraints. in particular, substitution is obligatory at every node
   where it is possible, and adjunction may be specified as either
   obligatory (oa, obligatory adjunction) or forbidden (na, null
   adjunction) at a given node. in derived trees corresponding to complete
   derivations, all leaf nodes are labeled with terminal symbols. the
   left-to-right concatenation of these symbols forms the yield of the
   tree, and the yields of all trees in the tree language form the string
   language generated by the tag.

   example 5

   [614]figure 8 shows a tag that generates the language l[1] = {a^nb^nc^n
   | n     1} defined in example 2. derivations start with adjoining the
   auxiliary tree t[2] at the root of the initial tree t[1]. new trees can
   be derived by repeatedly adjoining t[2] at an s-node.
   [615]figure
   figure   8    a tag that generates the language l[1] = {a^nb^nc^n | n     1}.
   2.4   generative capacity of classical id35

   vijay-shanker and weir ([616]1994) proved the following:

   theorem 1

   vw-id35 and tag are weakly equivalent.

   the inclusion of the vw-id35 languages in the tag languages follows from
   a chain of inclusions that connects vw-id35 and tag via linear indexed
   grammar (lig; gazdar [617]1987) and head grammar (hg; pollard
   [618]1984). all of these inclusions were proved by vijay-shanker and
   weir ([619]1994). here we sketch a proof of the inclusion of the tag
   languages in the vw-id35 languages. our proof closely follows that of
   weir ([620]1988, section 5.2.2), whose construction we shall return to
   when establishing our own results.

   lemma 3

   the tag languages are included in the vw-id35 languages.

   proof (sketch)

   we are given a tag g and construct a weakly equivalent vw-id35 g   . the
   basic idea is to make the lexical categories of g    correspond to the
   elementary trees of g, and to set up the combinatory rules and their
   restrictions in such a way that the derivations of g    correspond to
   derivations of g.

   vocabulary, atomic categories. the vocabulary of g    is the set of all
   terminal symbols of g; the set of atomic categories consists of all
   symbols of the form a^t, where either a is a nonterminal symbol of g
   and t     {a, c}, or a is a terminal symbol of g and t = a. the
   distinguished atomic category of g    is s^a, where s is the start symbol
   of g.

   lexicon. one may assume (cf. vijay-shanker, weir, and joshi [621]1986)
   that g is in the normal form shown in [622]figure 9. in this normal
   form there is a single initial s-tree, and all remaining elementary
   trees are auxiliary trees of one of five possible types. for each such
   tree, one constructs two lexicon entries for the empty string    as
   specified in [623]figure 9. additionally, for each terminal symbol x of
   g, one constructs a lexicon entry x := x^a.
   [624]figure
   figure   9    correspondence between elementary trees and lexical
   categories in the proof of lemma 3.

   rules. the rules of g    are forward and backward application and forward
   and backward composition of degree at most 2. they are used to simulate
   adjunction operations in derivations of g: application simulates
   adjunction into nodes to the left or right of the foot node;
   composition simulates adjunction into nodes above the foot node.
   without restrictions, these rules would allow derivations that do not
   correspond to derivations of g. therefore, rules are restricted such
   that an argument of the form |a^t can be eliminated by means of an
   application rule only if t = a, and by means of a composition rule only
   if t = c. this enforces two properties that are central for the
   correctness of the construction (weir [625]1988, p. 119): first, the
   secondary input category in every instance of composition is a category
   that has just been introduced from the lexicon. second, categories
   cannot be combined in arbitrary orders. the rule restrictions are:
   1.   

   forward and backward application are restricted to instances where both
   the target of the primary input category and the entire secondary input
   category take the form a^a.
   2.   

   forward and backward composition are restricted to instances where the
   target of the primary input category takes the form a^a and the target
   of the secondary input category takes the form a^c.
   using our template notation, the restricted rules can be written as in
   [626]figure 10.
   [627]figure
   figure   10    restricted rules used in the proof of lemma 3. we write for
   the union of the nonterminal symbols and terminal symbols of the tag g,
   and let , t     {a, c}.

   as an aside we note that the proof of lemma 3 makes heavy use of the
   ability of vw-id35 to assign lexicon entries to the empty string. such
   lexicon entries violate one of the central linguistic principles of
   id35, the principle of adjacency, according to which combinatory rules
   may only apply to phonologically realized entities (steedman [628]2000,
   p. 54). it is an interesting question for future research whether a
   version of vw-id35 without lexicon entries for the empty string remains
   weakly equivalent to tag.
   3.   relevance of target restrictions in prefix-closed id35
   section:
   [choose___________________________]
   [629]previous section [630]next section

   in this section we present the central technical results of this
   article. we study a class of vw-id35s that we call prefix-closed and
   show that for this class, weak equivalence with tag stands and falls
   with the ability to specify target restrictions.
   3.1   prefix-closed grammars

   rule restrictions are important tools in grammars for natural language;
   but not all of their potential uses have obvious linguistic
   motivations. for instance, one could write a grammar that permits all
   compositions with a functional category a/b as the secondary input
   category, but rules out application with the    shorter    category a. such
   constraints do not seem to be used in linguistically motivated
   grammars; for example, none of the grammars developed by steedman
   ([631]2000) needs them. in prefix-closed grammars, this use of rule
   restrictions is explicitly barred.

   definition 2

   a vw-id35 is prefix-closed if it satisfies the following implication:

   and similarly for backward rules.

   note that prefix-closed grammars still allow some types of rule
   restrictions. the crucial property is that, if a certain combinatory
   rule applies at all, then it also applies to combinations where the
   secondary input category has already been applied to some (k     n) or
   even all (k > n) of its arguments.

   example 6

   we illustrate prefix-closedness using some examples:
   1.   

   every ab-grammar (when seen as a vw-id35) is trivially prefix-closed; in
   these grammars, n = 0.
   2.   

   the    pure    grammars that we considered in our earlier work (kuhlmann,
   koller, and satta [632]2010) are trivially prefix-closed.
   3.   

   the grammar g[1] from example 2 is prefix-closed.
   4.   

   the grammars constructed in the proof of lemma 3 are not prefix-closed;
   they do not allow the following instances of application, where the
   secondary input category is of the form b^c (rather than b^a):

   example 7

   the linguistic intuition underlying prefix-closed grammars is that if
   such a grammar allows us to delay the combination of a functor and its
   argument (via composition), then it also allows us to combine the
   functor and its argument immediately (via application). to illustrate
   this intuition, consider [633]figure 11, which shows two derivations
   related to the discussion of word order in swiss german subordinate
   clauses (shieber [634]1985):

   derivation (5) (simplified from steedman and baldridge [635]2011, p.
   201) starts by composing the tensed verb h  lfed into the infinitive
   aastriche and then applies the resulting category to the accusative
   argument of the infinitive, es huus. prefix-closedness implies that, if
   the combination of h  lfed and aastriche is allowed when the latter is
   still waiting for es huus, then it must also be allowed if es huus has
   already been found. thus prefix-closedness predicts derivation (6), and
   along with it the alternative word order

   this word order is in fact grammatical (shieber [636]1985, pp.
   338   339).
   [637]figure
   figure   11    prefix-closedness predicts different word orders for swiss
   german subordinate clauses.
   3.2   generative capacity of prefix-closed grammars

   we now show that the restriction to prefix-closed grammars does not
   change the generative capacity of vw-id35.

   theorem 2

   prefix-closed vw-id35 and tag are weakly equivalent.

   proof

   every prefix-closed vw-id35 is a vw-id35, therefore the inclusion follows
   from theorem 1. to show that every tag language can be generated by a
   prefix-closed vw-id35, we recall the construction of a weakly equivalent
   vw-id35 for a given tag that we sketched in the proof of lemma 3. as
   already mentioned in example 6, the grammar g    constructed there is not
   prefix-closed. however, we can make it prefix-closed by explicitly
   allowing the    missing    rule instances:

   we shall now argue that this modification does not actually change the
   language generated by g   . the only categories that qualify as secondary
   input categories of the new instances are atomic categories of the form
   b^c where b is a nonterminal of the tag g. now the lexical categories
   of g    either are of the form x^a (where x is a terminal symbol) or are
   non-atomic. categories of the form b^c are not among the derived
   categories of g    either, as the combinatory rules only yield output
   categories whose targets have the form b^a. this means that the new
   rule instances can never be used in a complete derivation of g   , and
   therefore do not change the generated language. thus we have a
   construction that turns a tag into a weakly equivalent prefix-closed
   vw-id35.
   3.3   prefix-closed grammars without target restrictions

   in this section we shall see that the weak equivalence between
   prefix-closed vw-id35 and tag depends on the ability to restrict the
   target of the primary input category in a combinatory rule. these are
   the restrictions that we referred to as constraints of type (a) in
   [638]section 2.2. we say that a grammar that does not make use of these
   constraints is without target restrictions. this property can be
   formally defined as follows.

   definition 3

   a vw-id35 is without target restrictions if it satisfies the following
   implication:

   and similarly for backward rules.

   example 8

   1.   

   every ab-grammar is without target restrictions; it allows forward and
   backward application for every primary input category.
   2.   

   the grammar g[1] from example (2) is not without target restrictions,
   because its rules are restricted to primary input categories with
   target s.

   target restrictions on the primary input category are useful in id35s
   for natural languages; recall our discussion of backward-crossed
   composition in [639]section 1. as we shall see, target restrictions are
   also relevant from a formal point of view: if we require vw-id35s to be
   without target restrictions, then we lose some of their weak generative
   capacity. this is the main technical result of this article. for its
   proof we need the following standard concept from formal language
   theory:

   definition 4

   two languages l and l    are parikh-equivalent if for every string w     l
   there exists a permuted version w    of w such that w        l   , and vice
   versa.

   theorem 3

   the languages generated by prefix-closed vw-id35 without target
   restrictions are properly included in the tag languages.

   proof

   every prefix-closed vw-id35 without target restrictions is a vw-id35, so
   the inclusion follows from theorem 1. to see that the inclusion is
   proper, consider the tag language l[1] = {a^nb^nc^n | n     1} from
   example 5. we are interested in sublanguages l        l[1] that are
   parikh-equivalent to the full language l[1]. this property is trivially
   satisfied by l[1] itself. moreover, it is not hard to see that l[1] is
   in fact the only sublanguage of l[1] that has this property. now in
   [640]section 3.4 we shall prove a central lemma (lemma 6), which
   asserts that, if we assume that l[1] is generated by a prefix-closed
   vw-id35 without target restrictions, then at least one of the
   parikh-equivalent sublanguages of l[1] must be context-free. because
   l[1] is the only such sublanguage, this would give us proof that l[1]
   is context-free; but we know it is not. therefore we conclude that l[1]
   is not generated by a prefix-closed vw-id35 without target restrictions.

   before turning to the proof of the central lemma (lemma 6), we
   establish two other results about the languages generated by grammars
   without target restrictions.

   lemma 4

   the languages generated by prefix-closed vw-id35 without target
   restrictions properly include the context-free languages.

   proof

   inclusion follows from the fact that ab-grammars (which generate all
   context-free languages) are prefix-closed vw-id35s without target
   restrictions. to see that the inclusion is proper, consider a grammar
   g[2] that is like g[1] but does not have any rule restrictions. this
   grammar is trivially prefix-closed and without target restrictions; it
   is actually    pure    in the sense of kuhlmann, koller, and satta
   ([641]2010). the language l[2] = l(g[2]) contains all the strings in
   l[1] = {a^nb^nc^n | n     1}, together with other strings, including the
   string bbbacacac, whose derivation we showed in [642]figure 7. it is
   not hard to see that all of these additional strings have an equal
   number of as, bs, and cs. we can therefore write l[1] as an
   intersection of l[2] and a regular language: l[1] = l[2]     a*b*c*. to
   obtain a contradiction, suppose that l[2] is context-free; then because
   of the fact that context-free languages are closed under intersection
   with regular languages, the language l[1] would be context-free as
   well   but we know it is not. therefore we conclude that l[2] is not
   context-free either.

   lemma 5

   the class of languages generated by prefix-closed vw-id35 without target
   restrictions is not closed under intersection with regular languages.

   proof

   if the class of languages generated by prefix-closed vw-id35 without
   target restrictions was closed under intersection with regular
   languages, then with l[2] (the language mentioned in the previous
   proof) it would also include the language l[1] = l[2]     a*b*c*.
   however, from the proof of theorem 3 we know that l[1] is not generated
   by any prefix-closed vw-id35 without target restrictions.
   3.4   proof of the main lemma for vw-id35

   we shall now prove the central lemma that we used in the proof of
   theorem 3.

   lemma 6 (main lemma for vw-id35)

   for every language l that is generated by some prefix-closed vw-id35
   without target restrictions, there is a sublanguage l        l[1] such that
   1.   

   l    and l are parikh-equivalent, and
   2.   

   l    is context-free.

   throughout this section, we let g be some arbitrary prefix-closed
   vw-id35 without target restrictions. the basic idea is to transform the
   derivations of g into a certain special form, and to prove that the
   transformed derivations yield a context-free language. the
   transformation is formalized by the rewriting system in [643]figure
   12.[644]^4 to see how the rules of this system work, consider rule r1;
   the other rules are symmetric. rule r1 rewrites an entire derivation
   into another derivation. it states that, whenever we have a situation
   where a category of the form x/y is combined with a category of the
   form y  /z by means of composition, and the resulting category is
   combined with a category z by means of application, then we may just as
   well first combine y  /z with z, and then use the resulting category as
   a secondary input category together with x/y.
   [645]figure
   figure   12    rewriting rules used in the transformation.

   note that r1 and r2 produce a new derivation for the original sentence,
   whereas r3 and r4 produce a derivation that yields a permutation of
   that sentence: the order of the substrings corresponding to the
   categories z and x/y (in the case of rule r3) or x\y (in the case of
   rule r4) is reversed. in particular, r3 captures the relation between
   the two derivations of swiss german word orders shown in [646]figure
   11: applying r3 to derivation (5) gives derivation (6). importantly
   though, while the transformation may reorder the yield of a derivation,
   every transformed derivation still is a derivation of g.

   example 9

   if we take the derivation in [647]figure 6 and exhaustively apply the
   rewriting rules from [648]figure 12, then the derivation that we obtain
   is the one in [649]figure 7. note that although the latter derivation
   is not grammatical with respect to the grammar g[1] from example 2, it
   is grammatical with respect to the grammar g[2] from the proof of lemma
   4, which is without target restrictions.

   it is instructive to compare the rewriting rules in [650]figure 12 to
   the rules that establish the normal form of eisner ([651]1996). this
   normal form is used in practical id35 parsers to solve the problem of
      spurious ambiguity,    where one and the same semantic interpretation
   (which in id35 takes the form of a lambda term) has multiple syntactic
   derivation trees. it is established by rewriting rules such as the
   following:

   the rules in [652]figure 12 have much in common with the eisner rules;
   yet there are two important differences. first, as already mentioned,
   our rules (in particular, rules r3 and r4) may reorder the yield of a
   derivation, whereas eisner's normal form preserves yields. second, our
   rules decrease the degrees of the involved composition operations,
   whereas eisner's rules may in fact increase them. to see this, note
   that the left-hand side of derivation (7) involves a composition of
   degree |  | + 1 (   ), whereas the right-hand side involves a composition
   of degree |  | + |  | (      ). this means that rewriting will increase the
   degree in situations where |  | > 1. in contrast, our rules only fire in
   the case where the combination with z happens by means of an
   application, that is, if |  | = 0. under this condition, each rewrite
   step is guaranteed to decrease the degree of the composition. we will
   use this observation in the proof of lemma 7.
   3.4.1   properties of the transformation

   the next two lemmas show that the rewriting system in [653]figure 12
   implements a total function on the derivations of g.

   lemma 7

   the rewriting system is terminating and confluent: rewriting a
   derivation ends after a finite number of steps, and different rewriting
   orders all result in the same output.

   proof

   to argue that the system is terminating, we note that each rewriting
   step decreases the arity of one secondary input category in the
   derivation by one unit, while all other secondary input categories are
   left unchanged. as an example, consider rewriting under r1. the
   secondary input categories in the scope of that rule are y  /z and z on
   the left-hand side and y    and z on the right-hand side. here the arity
   of y    equals the arity of y  /z, minus one. because the system is
   terminating, to see that it is also confluent, it suffices to note that
   the left-hand sides of the rewrite rules do not overlap.

   lemma 8

   the rewriting system transforms derivations of g into derivations of g.

   proof

   we prove the stronger result that every rewriting step transforms
   derivations of g into derivations of g. we only consider rewriting
   under r1; the arguments for the other rules are similar. assume that r1
   is applied to a derivation of g. the rule instances in the scope of the
   left-hand side of r1 take the following form:

   turning to the right-hand side, the rule instances in the rewritten
   derivation are

   the relation between instances (8) and (11) is the characteristic
   relation of prefix-closed grammars (definition 2): if instance (8) is
   valid, then because g is prefix-closed, instance (11) is valid as well.
   similarly, the relation between instances (9) and (10) is the
   characteristic relation of grammars without target restrictions
   (definition 3): if instance (9) is valid, then because g is without
   target restrictions, instance (10) is valid as well. we conclude that
   if r1 is applied to a derivation of g, then the result is another
   derivation of g.

   combining lemma 7 and lemma 8, we see that for every derivation d of g,
   exhaustive application of the rewriting rules produces another uniquely
   determined derivation of g. we shall refer to this derivation as r(d).
   a transformed derivation is any derivation d    such that d    = r(d) for
   some derivation d.
   3.4.2   language inclusion and parikh-equivalence

   lemma 9

   the yields of the transformed derivations are a subset of and
   parikh-equivalent to l(g).

   proof

   let be the set of yields of the transformed derivations. every string
   is obtained from a string w     l(g) by choosing some derivation d of w,
   rewriting this derivation into the transformed derivation r(d), and
   taking the yield. inclusion then follows from lemma 8. because of the
   permuting rules r3 and r4, the strings w and w    will in general be
   different. what we can say, however, is that w and w    will be equal up
   to permutation. thus we have established that and l(g) are
   parikh-equivalent.

   what remains in order to prove lemma 6 is to show that the yields of
   the transformed derivations form a context-free language.
   3.4.3   context-freeness of the sublanguage

   in a derivation tree, every node except the root node is labeled with
   either the primary or the secondary input category of a combinatory
   rule. we refer to these two types of nodes as primary nodes and
   secondary nodes, respectively. to simplify our presentation, we shall
   treat the root node as a secondary node. we restrict our attention to
   derivation trees for strings in l(g); in these trees, the root node is
   labeled with the distinguished atomic category s. for a leaf node u,
   the projection path of u is the path that starts at the parent of u and
   ends at the first secondary node that is encountered on the way towards
   the root node. we denote a projection path as a sequence x[1],    , x[n]
   (n     1), where x[1] is the category at the parent of u and x[n] is the
   category at the secondary node. note that the category x[1] is taken
   from the lexicon, while every other category is derived by combining
   the preceding category on the path with some secondary input category
   (not on the path) by means of some combinatory rule.

   example 10

   in the derivation in [654]figure 6, the projection path of the first b
   goes all the way to the root, while all other projection paths have
   length 1, starting and ending with a lexical category. in [655]figure
   7, the projection path of the first b ends at the root, while the
   projection paths of the remaining bs end at the nodes with category b,
   and the projection paths of the cs end at the nodes with category c.

   a projection path x[1],    , x[n] is split if it can be segmented into
   two parts

   such that the first part only uses application rules and the second
   part only uses composition rules. note that any part may consist of a
   single category only, in which case no combinatory rule is used in that
   part. if n = 1, then the path is trivially split. all projection paths
   in [656]figures 6 and [657]7 are split, except for the path of the
   first b in [658]figure 6, which alternates between composition (with
   c\a) and application (with a).

   lemma 10

   in transformed derivations, every projection path is split.

   proof

   we show that as long as a derivation d contains a projection path that
   is not split, it can be rewritten. a projection path that is not split
   contains three adjacent categories u, v, w, such that v is derived by
   means of a composition with primary input u, and w is derived by means
   of an application with primary input v. suppose that both the
   composition and the application are forward. (the arguments for the
   other three cases are similar.) then u can be written as x/y for some
   category x and argument /y, v can be written as x  /z for some argument
   /z and some (possibly empty) sequence of arguments   , and w can be
   written as x  . we can then convince ourselves that d contains the
   following configuration, which matches the left-hand side of rewriting
   rule r1:

   lemma 11

   the set of all categories that occur in transformed derivations is
   finite.

   proof

   every category that occurs in transformed derivations occurs on some of
   its projection paths. consider any such path. by lemma 10 we know that
   this path is split; its two parts, here called p[1] and p[2], are
   visualized in [659]figure 13. we now reason about the arities of the
   categories in these two parts.
   1.   

   because p[1] only uses application, the arities in this part get
   smaller and smaller until they reach their minimum at x[s]. this means
   that the arities of p[1] are bounded by the arity of the first category
   on the path, which is a category from the lexicon.
   2.   

   because p[2] only uses composition, the arities in this part either get
   larger or stay the same until they reach a maximum at x[n]. this means
   that the arities of p[2] are bounded by the arity of the last category
   on the path, which is either the distinguished atomic category s or a
   secondary input category.
   thus the arities of our chosen path are bounded by the maximum of three
   grammar-specific constants: the maximal arity of a lexical category,
   the arity of s (which is 0), and the maximal arity of a secondary input
   category. the latter value is well-defined because there are only
   finitely many such categories (by lemma 2). let k be the maximum among
   the three constants, and let be the set of all categories of the form
   a|[m]x[m]     |[1]x[1] where a is an atomic category of g, m     k, and
   each |[i]x[i] is an argument that may occur in derivations of g. the
   set contains all categories that occur on some projection path, and
   therefore all categories that occur in transformed derivations, but it
   may also include other categories. as there are only finitely many
   atomic categories and finitely many arguments (lemma 1), we conclude
   that the set , and hence the set of categories that occur in
   transformed derivations, are finite as well.
   [660]figure
   figure   13    illustration of the argument used in the proof of lemma 11.

   lemma 12

   the transformed derivations yield a context-free language.

   proof

   we construct a context-free grammar h that generates the set of yields
   of the transformed derivations. to simplify the presentation, we first
   construct a grammar h    that generates a superset of .

   construction of h   . the construction of the grammar h    is the same as
   the construction in the classical proof that showed the
   context-freeness of ab-grammars, by bar-hillel, gaifman, and shamir
   ([661]1960): the production rules of h    are set up to correspond to the
   valid rule instances of g. the reason that this construction is not
   useful for vw-id35s in general is that these may admit infinitely many
   rule instances, whereas a context-free grammar can only have finitely
   many productions. the set of rule instances may be infinite because
   vw-id35 has access to composition rules (specifically, rules of degrees
   greater than 1); in contrast, ab-grammars are restricted to
   application. crucially though, by lemma 11 we know that as long as we
   are interested only in transformed derivations it is sufficient to use
   a finite number of rule instances   more specifically those whose input
   and output categories are included in the set of arity-bounded
   categories. thus for every instance x/y y       x   where all three
   categories are in , we construct a production

   and similarly for backward rules. (we enclose categories in square
   brackets for clarity.) in addition, for every lexicon entry    := x in g
   we add to h    a production [x]       . as the terminal alphabet of h    we
   choose the vocabulary of g; as the nonterminal alphabet we choose the
   set ; and as the start symbol we choose the distinguished atomic
   category s. every transformed derivation of g corresponds (in an
   obvious way) to some derivation in h   , which proves that . conversely,
   every derivation of h    represents a derivation of g (though not
   necessarily a transformed derivation), thus l(h   )     l(g).

   construction of h. the chain of inclusions is sufficient to prove lemma
   6: because and l(g) are parikh-equivalent (which we observed at the
   beginning of [662]section 3.4.2), so are l(h   ) and l(g), which means
   that l(h   ) satisfies all of the properties claimed in lemma 6, even
   though this does not suffice to prove our current lemma. however, once
   h    is given, it is not hard to also obtain a grammar h that generates
   exactly . for this, we need to filter out derivations whose projection
   paths do not have the characteristic property of transformed
   derivations that we established in lemma 10. (it is not hard to see
   that every derivation that does have this property is a transformed
   derivation.) we annotate the left-hand side nonterminals in the
   productions of h    with a flag t     {a, c} to reflect whether the
   corresponding category has been derived by means of application (t = a)
   or composition (t = c); the value of this flag is simply the type of
   combinatory rule that gave rise to the production. the nonterminals in
   the right-hand sides are annotated in all possible ways, except that
   the following combinations are ruled out:

   these combinations represent exactly the cases where the output
   category of a composition rule is used as the primary input category of
   an application rule, which are the cases that violate the    split   
   property that we established in lemma 10.

   this concludes the proof of lemma 6, and therefore the proof of theorem
   3.
   3.5   discussion

   theorem 3 pinpoints the exact mechanism that vw-id35 uses to achieve
   weak equivalence to tag: at least for the class of prefix-closed
   grammars, tag equivalence is achieved if and only if we allow target
   restrictions. although target restrictions are frequently used in
   linguistically motivated grammars, it is important and perhaps
   surprising to realize that they are indeed necessary to achieve the
   full generative capacity of vw-id35.

   in the grammar formalisms folklore, the generative capacity of id35 is
   often attributed to generalized composition, and indeed we have seen
   (in lemma 4) that even grammars without target restrictions can
   generate non-context-free languages such as l(g[2]). however, our
   results show that composition by itself is not enough to achieve weak
   equivalence with tag: the yields of the transformed derivations from
   [663]section 3.4 form a context-free language despite the fact that
   these derivations may still contain compositions, including
   compositions of degree n > 2. in addition to composition, vw-id35 also
   needs target restrictions to exert enough control on word order to
   block unwanted permutations. one way to think about this is that target
   restrictions can enforce alternations of composition and application
   (as in the derivation shown in [664]figure 6), while transformed
   derivations are characterized by projection paths without such
   alternations (lemma 10).

   we can sharpen the picture even more by observing that the target
   restrictions that are crucial for the generative capacity of vw-id35 are
   not those on generalized composition, but those on function
   application. to see this we can note that the proof of lemma 8 goes
   through also only if application rules such as (9) and (10) are without
   target restrictions. this means that we have the following
   qualification of theorem 1.

   lemma 13

   prefix-closed vw-id35 is weakly equivalent to tag only because it
   supports target restrictions on forward and backward application.

   this finding is unexpected indeed   for instance, no grammar in steedman
   ([665]2000) uses target restrictions on the application rules.
   4.   generative capacity of multimodal id35
   section:
   [choose___________________________]
   [666]previous section [667]next section

   after clarifying the mechanisms that    classical    id35 uses to achieve
   weak equivalence with tag, we now turn our attention to    modern,   
   multimodal versions of id35 (baldridge and kruijff [668]2003; steedman
   and baldridge [669]2011). these versions emphasize the use of fully
   lexicalized grammars in which no rule restrictions are allowed, and
   instead equip slashes with types in order to control the use of the
   combinatory rules. our central question is whether the use of slash
   types is sufficient to recover the expressiveness that we lose by
   giving up rule restrictions.

   we need to fix a specific variant of multimodal id35 to study this
   question formally. published works on multimodal id35 differ with
   respect to the specific inventories of slash types they assume. some
   important details, such as a precise definition of generalized
   composition with slash types, are typically not discussed at all. in
   this article we define a variant of multimodal id35 which we call o-id35.
   this formalism extends our definition of vw-id35 (definition 1) with the
   slash inventory and the composition rules of the popular openid35
   grammar development system (white [670]2013). our technical result is
   that the main lemma (lemma 6) also holds for o-id35. with this we can
   conclude that the answer to our question is negative: slash types are
   not sufficient to replace rule restrictions; o-id35 is strictly less
   powerful than tag. although this is primarily a theoretical result, at
   the end of this section we also discuss its implications for practical
   grammar development.
   4.1   multimodal id35

   we define o-id35 as a formalism that extends vw-id35 with the slash types
   of openid35, but abandons rule restrictions. note that openid35 has a
   number of additional features that affect the generative capacity; we
   discuss these in [671]section 4.4.

   slash types. like other incarnations of multimodal id35, o-id35 uses an
   enriched notion of categories where every slash has a type. there are
   eight such types:[672]^5

   the basic idea behind these types is as follows. slashes with type *
   can only be used to instantiate application rules. type     also licenses
   harmonic composition rules, and type    also licenses crossed
   composition rules. type    is the least restrictive type and can be used
   to instantiate all rules. the remaining types refine the system by
   incorporating a dimension of directionality. the exact type   rule
   compatibilities are specified in [673]figure 14.
   [674]figure
   figure   14    compatibility of slash types with combinatory rules.

   inertness. o-id35 is distinguished from other versions of multimodal
   id35, such as that of baldridge and kruijff ([675]2003), in that every
   slash not only has a type but also an inertness status. inertness was
   introduced by baldridge ([676]2002, section 8.2.2) as an implementation
   of the    antecedent government    (ant) feature of steedman ([677]1996),
   which is used to control the word order in certain english relative
   clauses. it is a two-valued feature. arguments whose slash type has
   inertness status + are called active; arguments whose slash type has
   inertness status     are called inert. only active arguments can be
   eliminated by means of combinatory rules; however, an inert argument
   can still be consumed as part of a secondary input category. for
   example, the following instance of application is valid because the
   outermost slash of the primary input category has inertness status +:

   we use the notations and to denote the forward and backward slashes
   with slash type t and inertness status s.

   rules. all o-id35 grammars share a fixed set of combinatory rules, shown
   in [678]figure 15. every grammar uses all rules, up to some
   grammar-specific bound on the degree of generalized composition. as
   mentioned earlier, a combinatory rule can only be instantiated if the
   slashes of the input categories have compatible types. additionally,
   all composition rules require the slashes of the secondary input
   category to have a uniform direction. this is a somewhat peculiar
   feature of openid35, and is in contrast to vw-id35 and other versions of
   id35, which also allow composition rules with mixed directions.
   [679]figure
   figure   15    the rules of o-id35. for a rule to apply, all slashes in the
   scope of the rule must have one of the specified compatible types (cf.
   figure 14). the predicates left(t)/right(t) are true if and only if t
   is equal to either a left/right type or one of the four undirected core
   types.

   composition rules are classified into harmonic and crossed forms. this
   distinction is based on the direction of the slashes in the secondary
   input category. if these have the same direction as the outermost slash
   of the primary input category, then the rule is called harmonic;
   otherwise it is called crossed.[680]^6

   when a rule is applied, in most cases the arguments of the secondary
   input category are simply copied into the output category, as in
   vw-id35. the one exception happens for crossed composition rules if not
   all slash directions match the direction of their slash type (left or
   right). in this case, the arguments of the secondary input category
   become inert. thus the inertness status of an argument may change over
   the course of a derivation   but only from active to inert, not back
   again.

   definition 5

   a multimodal id35 in the sense of openid35, or
   o-id35 for short, is a structure

   where    is a finite vocabulary, is a finite set of atomic categories,
   := is a finite relation between    and the set of (multimodal)
   categories over , d     0 is the maximal degree of generalized
   composition, and s     a is a distinguished atomic category.

   we generalize the notions of rule instances, derivation trees, and
   generated language to categories over slashes with types and inertness
   statuses in the obvious way: instead of two slashes, we now have one
   slash for every combination of a direction, type, and inertness status.
   similarly, we generalize the concepts of a grammar being prefix-closed
   (definition 2) and without target restrictions (definition 3) to o-id35.
   4.2   generative capacity

   we now investigate the generative capacity of o-id35. we start with the
   (unsurprising) observation that o-id35 can describe non-context-free
   languages.

   lemma 14

   the languages generated by o-id35 properly include the context-free
   languages.

   proof

   inclusion follows from the fact that every ab-grammar can be written as
   an o-id35 with only application (d = 0). to show that the inclusion is
   proper, we use the same argument as in the proof of lemma 4. the
   grammar g[2] that we constructed there can be turned into an equivalent
   o-id35 by decorating each slash with   , the least restrictive type, and
   setting its inertness status to +.

   what is less obvious is whether o-id35 generates the same class of
   languages as vw-id35 and tag. our main result is that this is not the
   case.

   theorem 4

   the languages generated by o-id35 are properly included in the tag
   languages.

   o-id35 without inertness. to approach theorem 4, we set inertness aside
   for a moment and focus on the use of the slash types as a mechanism for
   imposing rule restrictions. each of the rules in [681]figure 15
   requires all of the slash types of the n outermost arguments of its
   secondary input category to be compatible with the rule, in the sense
   specified in [682]figure 14. if we now remove one or more of these
   arguments from a valid rule instance, then the new instance is clearly
   still valid, as we have reduced the number of potential violations of
   the type   rule compatibility. this shows that the rule system is
   prefix-closed. as none of the rules is conditioned on the target of the
   primary input category, the rule system is even without target
   restrictions. with these two properties established, theorem 4 can be
   proved by literally the same arguments as those that we gave in
   [683]section 3. thus we see directly that the theorem holds for
   versions of multi-modal id35 without inertness, such as the formalism of
   baldridge and kruijff ([684]2003).

   o-id35 with inertness. in the general case, the situation is complicated
   by the fact that the crossed composition rules change the inertness
   status of some argument categories if the slash types have conflicting
   directions. this means that the crossed composition rules in o-id35 are
   not entirely prefix-closed, as illustrated by the following example.

   example 11

   consider the following two rule instances:

   instance (12) is a valid instance of forward crossed composition.
   prefix-closedness would require instance (13) to be valid as well; but
   it is not. in instance (12) the inertness status of is changed for the
   only reason that the slash type of does not match the required
   direction. in instance (13) the argument is not present, and therefore
   the inertness status of is not changed, but is carried over to the
   output category.

   we therefore have to prove that the following analogue of lemma 6 holds
   for o-id35:

   lemma 2 (main lemma for o-id35)

   for every language l generated by some o-id35 there is a sublanguage l   
       l such that
   1.   

   l    and l are parikh-equivalent, and
   2.   

   l    is context-free.
   this lemma implies that the language l[1] = {a^nb^nc^n | n     1} from
   example 2 cannot be generated by o-id35 (but by prefix-closed vw-id35
   with target restrictions, and by tag). the argument is the same as in
   the proof of theorem 3.
   4.3   proof of the main lemma for o-id35

   the proof of lemma 15 adapts the rewriting system from [685]figure 12.
   we simply let each rewriting step copy the type and inertness status of
   each slash from the left-hand side to the right-hand side of the
   rewriting rule. with this change, it is easy to verify that the proofs
   of lemma 7 (termination and confluence), lemma 10 (projection paths in
   transformed derivations are split), lemma 11 (transformed derivations
   contain a finite number of categories), and lemma 12 (transformed
   derivations yield a context-free language) go through without problems.
   the proof of lemma 8, however, is not straightforward, because of the
   dynamic nature of the inertness statuses. we therefore restate the
   lemma for o-id35:

   lemma 16

   the rewriting system transforms o-id35 derivations into o-id35
   derivations.

   proof

   as in the proof of lemma 8 we establish the stronger result that the
   claimed property holds for every single rewriting step. we only give
   the argument for rewriting under r3, which involves instances of
   forward crossed composition. the argument for r4 is analogous, and r1
   and r2 are simpler cases because they involve harmonic composition,
   where the inertness status does not change.

   suppose that r3 is applied to a derivation of some o-id35. in their most
   general form, the rule instances in the scope of the left-hand side of
   r3 may be written as follows, where the function    is defined as
   specified in [686]figure 15:

   here instance (14) is an instance of forward-crossed composition, so
   each of the types t[i] is compatible with that rule. because the two
   marked arguments are identical, we have   (s[1]) = +. this is only
   possible if the inertness statuses of the slashes do not change in the
   context of derivation (14), that is, if   (s[i]) = s[i] for all 1     i    
   n. note that in this case, t[0] is either a right type or one of the
   four undirected core types, and each t[1],     , t[n] is either a left
   type or a core type. we can now alternatively write instances (14) and
   (15) as

   then the rule instances in the rewritten derivation can be written as
   follows:

   here instance (16) is clearly a valid instance of backward application.
   based on our earlier observations about the t[i] and their
   compatibility with crossed composition, we also see that instance (17)
   is a valid instance of forward crossed composition (if n > 1), or of
   forward application (if n = 1).

   this completes the proof of lemma 15. to finish the proof of theorem 4
   we have to also establish the inclusion of the o-id35 languages in the
   tag languages. this is a known result for other dialects of multimodal
   id35 (baldridge and kruijff [687]2003), but o-id35 once again requires
   some extra work because of inertness.

   lemma 17

   the o-id35 languages are included in the tag languages.

   proof (sketch)

   it suffices to show that the o-id35 languages are included in the class
   of languages generated by lig (gazdar [688]1987); the claim then
   follows from the weak equivalence of lig and tag. vijay-shanker and
   weir ([689]1994, [690]section 3.1) present a construction that
   transforms an arbitrary vw-id35 into a weakly equivalent lig. it is
   straightforward to adapt their construction to o-id35. as we do not have
   the space here to define lig, we only provide a sketch of the adapted
   construction.

   as in the case of vw-id35, the valid instances of an o-id35 rule can be
   written down using our template notation. the adapted construction
   converts each such template into a production rule of a weakly
   equivalent lig. consider for instance the following instance of forward
   crossed composition from example 11:

   this template is converted into the following lig rule. we adopt the
   notation of vijay-shanker and weir ([691]1994) and write        for the
   tail of a stack of unbounded size.

   in this way, every o-id35 can be written as a weakly equivalent lig.
   4.4   discussion

   in this section we have shown that the languages generated by o-id35 are
   properly included in the languages generated by tag, and equivalently,
   in the languages generated by vw-id35. this means that the multimodal
   machinery of openid35 is not powerful enough to express the rule
   restrictions of vw-id35 in a fully lexicalized way. the result is easy
   to obtain for o-id35 without inertness, which is prefix-closed and
   without target restrictions; but it is remarkably robust in that it
   also applies to o-id35 with inertness, which is not prefix-closed. as we
   have already mentioned, the result carries over also to other
   multimodal versions of id35, such as the formalism of baldridge and
   kruijff ([692]2003).

   our result has implications for practical grammar development with
   openid35. to illustrate this, recall example 7, which showed that every
   vw-id35 without target restrictions for swiss german that allows
   cross   serial word orders as in derivation (5) also permits alternative
   word orders, as in derivation (6). by lemma 15, this remains true for
   o-id35 or weaker multimodal formalisms. this is not a problem in the
   case of swiss german, where the alternative word orders are
   grammatical. however, there is at least one language, dutch, where
   dependencies in subordinate clauses must cross. for this case, our
   result shows that the modalized composition rules of openid35 are not
   powerful enough to write adequate grammars. consider the following
   classical example:

   the straightforward derivation of the cross   serial dependencies in this
   sentence (adapted from steedman [693]2000, p. 141) is exemplified in
   [694]figure 16. it takes the same form as derivation (5) for swiss
   german: the verbs and their np arguments lie on a single,
   right-branching path projected from the tensed verb zag. this
   projection path is not split; specifically, it starts with a
   composition that produces a category which acts as the primary input
   category of an application. as a consequence, the derivation can be
   transformed (by our rewriting rule r3) in exactly the same way as
   instance (5) could be transformed into derivation (6). the crucial
   difference is that the yield of the transformed derivation, *ik cecilia
   zag de paarden voeren, is not a grammatical clause of dutch.
   [695]figure
   figure   16    straightforward derivation of dutch cross   serial
   dependencies.

   to address the problem of ungrammatical word orders in dutch
   subordinate clauses, the vw-id35 grammar of steedman ([696]2000) and the
   multimodal id35 grammar of baldridge ([697]2002, section 5.3.1) resort
   to combinatorial rules other than composition. in particular, they
   assume that all complement noun phrases undergo obligatory
   type-raising, and become primary input categories of application rules.
   this gives rise to derivations such as the one shown in [698]figure 17,
   which cannot be transformed using our rewriting rules because the
   result of the forward crossed composition >^1 now is a secondary rather
   than a primary input category. as a consequence, this grammar is
   capable of enforcing the obligatory cross-serial dependencies of dutch.
   however, it is important to note that it requires type-raising over
   arbitary categories with target s (observe the increasingly complex
   type-raised categories for the nps). this kind of type-raising is
   allowed in many variants of id35, including the full formalism
   underlying openid35. vw-id35 and o-id35, however, are limited to
   generalized composition, and can only support derivations like the one
   in [699]figure 17 if all the type-raised categories for the noun
   phrases are available in the lexicon. the unbounded type-raising
   required by the steedman   baldridge analysis of dutch would translate
   into an infinite lexicon, and so this analysis is not possible in
   vw-id35 and o-id35.

   we conclude by discussing the impact of several other constructs of
   openid35 that we have not captured in o-id35. first, openid35 allows us to
   use generalized composition rules of arbitrary degree; there is no
   upper bound d on the composition degree as in an o-id35 grammar. it is
   known that this extends the generative capacity of id35 beyond that of
   tag (weir [700]1988). second, openid35 allows categories to be annotated
   with feature structures. this has no impact on the generative capacity,
   as the features must take values from finite domains and can therefore
   be compiled into the atomic categories of the grammar. finally, openid35
   includes the combinatory rules of substitution and coordination, as
   well as multiset slashes, another extension frequently used in
   linguistic grammars. we have deliberately left these constructs out of
   o-id35 to establish the most direct comparison to the literature on
   vw-id35. it is conceivable that their inclusion could restore the weak
   equivalence to tag, but a proof of this result would require a
   non-trivial extension of the work of vijay-shanker and weir
   ([701]1994). regarding multiset slashes, it is also worth noting that
   these were introduced with the expressed goal of allowing more flexible
   word order, whereas restoration of weak equivalence would require more
   controlled word order.
   [702]figure
   figure   17    derivation of dutch cross   serial dependencies with
   type-raised noun complements.
   5.   conclusion
   section:
   [choose________________________]
   [703]previous section [704]next section

   in this article we have contributed two technical results to the
   literature on id35. first, we have refined the weak equivalence result
   for id35 and tag (vijay-shanker and weir [705]1994) by showing that
   prefix-closed grammars are weakly equivalent to tag only if target
   restrictions are allowed. second, we have shown that o-id35, the formal,
   composition-only core of openid35, is not weakly equivalent to tag.
   these results point to a tension in id35 between lexicalization and
   generative capacity: lexicalized versions of the framework are less
   powerful than classical versions, which allow rule restrictions.

   what conclusions one draws from these technical results depends on the
   perspective. one way to look at id35 is as a system for defining formal
   languages. under this view, one is primarily interested in results on
   generative capacity and parsing complexity such as those obtained by
   vijay-shanker and weir ([706]1993, [707]1994). here, our results
   clarify the precise mechanisms that make id35 weakly equivalent to tag.
   perhaps surprisingly, it is not the availability of generalized
   composition rules by itself that explains the generative power of id35,
   but the ability to constrain the interaction between generalized
   composition and function application by means of target restrictions.

   on the other hand, one may be interested in id35 primarily as a
   formalism for developing grammars for natural languages (steedman
   [708]2000; baldridge [709]2002; steedman [710]2012). from this point of
   view, the suitability of id35 for the development of lexicalized
   grammars has been amply demonstrated. however, our technical results
   still serve as important reminders that extra care must be taken to
   avoid overgeneration when designing a grammar. in particular, it is
   worth double-checking that an openid35 grammar does not generate word
   orders that the grammar developer did not intend. here the rewriting
   system that we presented in [711]figure 12 can serve as a useful tool:
   a grammar developer can take any derivation for a grammatical sentence,
   transform the derivation according to our rewriting rules, and check
   whether the transformed derivation still yields a grammatical sentence.

   it remains an open question how the conflicting desires for generative
   capacity and lexicalization might be reconciled. a simple answer is to
   add some lexicalized method for enforcing target restrictions to id35,
   specifically on the application rules. however, we are not aware that
   this idea has seen widespread use in the id35 literature, so it may not
   be called for empirically. alternatively, one might modify the rules of
   o-id35 in such a way that they are no longer prefix-closed   for example,
   by introducing some new slash type. finally, it is possible that the
   constructs of openid35 that we set aside in o-id35 (such as type-raising,
   substitution, and multiset slashes) might be sufficient to achieve the
   generative capacity of classical id35 and tag. a detailed study of the
   expressive power of these constructs would make an interesting avenue
   for future research.
   acknowledgments
   section:
   [choose________________________]
   [712]previous section [713]next section

   we are grateful to mark steedman and jason baldridge for enlightening
   discussions of the material presented in this article, and to the four
   anonymous reviewers of the article for their detailed and constructive
   comments.
   notes
   section:
   [choose________________________]
   [714]previous section [715]next section

   1    this means that we ignore other rules required for linguistic
   analysis, in particular type-raising (from the t combinator),
   substitution (from the s combinator), and coordination.

   2    the literature on id35 assumes a bound on n; for english, steedman
   ([716]2000, p. 42) puts n     3. adding rules of unbounded degree
   increases the generative capacity of the formalism weir and joshi
   ([717]1988).

   3    also, ab-grammar does not support lexicon entries for the empty
   string.

   4    recall that we use the greek letter    to denote a (possibly empty)
   sequence of arguments.

   5    the type system of openid35 is an extension of the system used by
   baldridge ([718]2002).

   6    in versions of id35 that allow rules with mixed slash directions, the
   distinction between harmonic and crossed is made based on the direction
   of the innermost slash of the secondary input category, |[i].
   references
   section:
   [choose________________________]
   [719]previous section [720]next section
   ajdukiewicz, kazimierz. 1935. die syntaktische konnexit  t. studia
   philosophica, 1:1   27. [721]google scholar
   baldridge, jason. 2002. lexically specified derivational control in
   id35. ph.d. thesis, university of edinburgh,
   edinburgh, uk. [722]google scholar
   baldridge, jason and geert-jan m. kruijff. 2003. multi-modal
   combinatory categorical grammar. in tenth conference of the european
   chapter of the association for computational linguistics (eacl), pages
   211   218, budapest. [723]google scholar
   bar-hillel, yehoshua, haim gaifman, and eli shamir. 1960. on categorial
   and phrase structure grammars. bulletin of the research council of
   israel, 9f(1):1   16. reprinted in yehoshua bar-hillel. language and
   information: selected essays on their theory and application, pages
   99   115. addison-wesley, 1964. [724]google scholar
   curry, haskell b., robert feys, and william craig. 1958. combinatory
   logic. volume 1. studies in logic and the foundations of mathematics.
   north-holland. [725]google scholar
   eisner, jason. 1996. efficient normal-form parsing for combinatory
   categorial grammar. in proceedings of the 34th annual meeting of the
   association for computational linguistics (acl), pages 79   86, santa
   cruz, ca. [726]crossref, [727]google scholar
   gazdar, gerald. 1987. applicability of indexed grammars to natural
   language. in uwe reyle and christian rohrer, editors, natural language
   parsing and linguistic theories. d. reidel, pages 69   94. [728]google
   scholar
   joshi, aravind k. 1985. id34s: how much
   context-sensitivity is required to provide reasonable structural
   descriptions? in david r. dowty, lauri karttunen, and arnold m. zwicky,
   editors, natural language parsing. cambridge university press, pages
   206   250. [729]google scholar
   joshi, aravind k. and yves schabes. 1997. tree-adjoining grammars. in
   grzegorz rozenberg and arto salomaa, editors, handbook of formal
   languages, volume 3. springer, pages 69   123. [730]google scholar
   kuhlmann, marco, alexander koller, and giorgio satta. 2010. the
   importance of rule restrictions in id35. in proceedings of the 48th
   annual meeting of the association for computational linguistics (acl),
   pages 534   543, uppsala. [731]google scholar
   moortgat, michael. 2011. categorial type logics. in johan van benthem
   and alice ter meulen, editors, handbook of logic and language.
   elsevier, second edition, chapter 2, pages 95   179. [732]google scholar
   pollard, carl j. 1984. generalized phrase structure grammars, head
   grammars, and natural language. ph.d. thesis, stanford university.
   [733]google scholar
   shieber, stuart m. 1985. evidence against the context-freeness of
   natural language. linguistics and philosophy, 8(3):333   343.
   [734]crossref, [735]google scholar
   steedman, mark. 1996. surface structure and interpretation, volume 30
   of linguistic inquiry monographs. mit press. [736]google scholar
   steedman, mark. 2000. the syntactic process. mit press. [737]google
   scholar
   steedman, mark. 2012. taking scope. mit press. [738]google scholar
   steedman, mark and jason baldridge. 2011. combinatory categorial
   grammar. in robert d. borsley and kersti b  rjars, editors,
   non-transformational syntax: formal and explicit models of grammar.
   blackwell, chapter 5, pages 181   224. [739]google scholar
   vijay-shanker, k. and david j. weir. 1993. parsing some constrained
   grammar formalisms. computational linguistics, 19(4):591   636.
   [740]google scholar
   vijay-shanker, k. and david j. weir. 1994. the equivalence of four
   extensions of context-free grammars. mathematical systems theory,
   27(6):511   546. [741]crossref, [742]google scholar
   vijay-shanker, k., david j. weir, and aravind k. joshi. 1986. tree
   adjoining and head wrapping. in proceedings of the eleventh
   international conference on computational linguistics (coling), pages
   202   207, bonn. [743]google scholar
   weir, david j. 1988. characterizing mildly context-sensitive grammar
   formalisms. ph.d. thesis, university of pennsylvania. [744]google
   scholar
   weir, david j. and aravind k. joshi. 1988. combinatory categorial
   grammars: generative power and relationship to linear context-free
   rewriting systems. in proceedings of the 26th annual meeting of the
   association for computational linguistics (acl), pages 278   285,
   buffalo, ny. [745]crossref, [746]google scholar
   white, michael. 2013. openid35: the opennlp id35 library.
   [747]http://openid35.sourceforge.net/ accessed november 13, 2013.
   [748]google scholar
   marco kuhlmann*
   link  ping university
   alexander koller**
   university of potsdam
   giorgio satta   
   university of padua

   *department of computer and information science, link  ping university,
   581 83 link  ping, sweden. e-mail: [749][email protected].

   **department of linguistics, karl-liebknecht-str. 24   25, university of
   potsdam, 14476 potsdam, germany. e-mail: [750][email protected].

      department of information engineering, university of padua, via
   gradenigo 6/a, 35131 padova, italy. e-mail: [751][email protected].
   [752]favorite [favorite-1488499760477.svg]
   track citations [notify-me-alert-1488499750013.svg]
   [753]download citation [download2-1490507427013.svg]
   [754]rss toc [rss-1488924357683.svg]

   [755]rss citation [rss-1488924357683.svg]
   [756]submit your article
   [757]support oa at mitp [open-access-1493356222797.svg]

   [758][mitpress-logo-main-1483476130433.svg]
     * [759]journals [760]books
     * [761]terms & conditions
     * [762]privacy statement
     * [763]contact us

     * us
          + one rogers street cambridge ma 02142-1209
     * uk
          + suite 2, 1 duchess street london, w1w 6an, uk
     * connect
          + [764]facebook
          + [765]twitter
          + [766]google +
          + [767]pinterest
          + [768]instagram
          + [769]youtube
     *
          +    2019 the mit press
          + technology partner:[770] atypon systems, inc.
          + [771]crossref member
          + [772]counter member
          + the mit press colophon is registered in the u.s. patent and
            trademark office.
          + [773]site help

references

   visible links
   1. https://doi.org/10.1162/coli_a_00219
   2. https://doi.org/10.1162/coli_a_00219
   3. https://doi.org/10.1162/coli_a_00219
   4. https://www.googletagmanager.com/ns.html?id=gtm-tr6twrh
   5. https://www.googletagmanager.com/ns.html?id=gtm-tr6twrh
   6. https://www.mitpressjournals.org/action/showlogin
   7. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
   8. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
   9. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
  10. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
  11. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
  12. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
  13. https://www.mitpressjournals.org/action/requestusername
  14. https://www.mitpressjournals.org/action/requestresetpassword
  15. https://www.mitpressjournals.org/
  16. http://www.mitpressjournals.org/
  17. https://mitpress.mit.edu/
  18. https://www.mitpressjournals.org/action/showpublications
  19. https://www.mitpressjournals.org/digital
  20. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
  21. https://www.mitpressjournals.org/librarians
  22. https://www.mitpressjournals.org/action/institutionadminactivation
  23. https://www.mitpressjournals.org/pb-assets/pdfs/journals institutional license-1548442853093.pdf
  24. https://www.mitpressjournals.org/action/showinstitutionusagereport
  25. https://www.mitpressjournals.org/document_delivery
  26. https://www.mitpressjournals.org/pb-assets/pdfs/vpat_mitp_journals-1507061346287.pdf
  27. https://www.mitpressjournals.org/subscribe
  28. https://www.mitpressjournals.org/inst_getting_started
  29. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
  30. https://www.mitpressjournals.org/pb-assets/pdfs/2019 mitpj institution price list-1541020584043.pdf
  31. https://www.mitpressjournals.org/pb-assets/pdfs/2019 mitpj package pricelist-1541020593767.pdf
  32. https://www.mitpressjournals.org/pb-assets/pdfs/2018 mitpj single issue price list-1513815652483.pdf
  33. https://www.mitpressjournals.org/for_authors
  34. https://www.mitpressjournals.org/for_authors#subpubagreements
  35. https://www.mitpressjournals.org/for_authors#authorposting
  36. https://www.mitpressjournals.org/for_authors#copyright
  37. https://www.mitpressjournals.org/for_authors#authorreprints
  38. https://www.mitpressjournals.org/for_authors#publishingoa
  39. https://www.mitpressjournals.org/for_authors#nihpublicaccess
  40. https://www.mitpressjournals.org/for_authors#authordiscounts
  41. https://www.mitpressjournals.org/for_authors#kudos
  42. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
  43. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
  44. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
  45. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
  46. https://www.mitpressjournals.org/rights_permission
  47. https://mitpress.mit.edu/giving/
  48. https://www.mitpressjournals.org/trade_sales
  49. https://www.mitpressjournals.org/advertising
  50. https://www.mitpressjournals.org/schedule
  51. https://www.mitpressjournals.org/faq
  52. https://www.mitpressjournals.org/terminated_journals
  53. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
  54. https://www.mitpressjournals.org/aboutmitpj
  55. https://www.mitpressjournals.org/ethics
  56. https://www.mitpressjournals.org/events
  57. https://www.mitpressjournals.org/publishing_services
  58. https://www.mitpressjournals.org/mitpj-staff
  59. https://www.mitpressjournals.org/analytics
  60. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
  61. https://www.facebook.com/mitpress
  62. http://www.twitter.com/mitpress
  63. https://plus.google.com/106848724929282487337?prsrc=3
  64. https://www.pinterest.com/mitpress/
  65. https://www.instagram.com/mitpress/
  66. https://www.youtube.com/channel/uceh0hmlpjgw2dn0ntmd0fcq
  67. https://www.mitpressjournals.org/contact_info
  68. https://mitpressjournals.mit.edu/shop/customer/account/
  69. https://www.mitpressjournals.org/cdn-cgi/l/email-protection#84eeebf1f6eae5e8f7a9e5e0f7c4e9edf0aae1e0f1
  70. https://www.mitpressjournals.org/cdn-cgi/l/email-protection#e48e8b91968a858897c98d8a828ba4898d90ca818091
  71. https://www.mitpressjournals.org/cdn-cgi/l/email-protection#b4dedbc1c6dad5d8c799c6ddd3dcc0c7f4d9ddc09ad1d0c1
  72. https://www.mitpressjournals.org/cdn-cgi/l/email-protection#2349475340500e544a514650634e4a570d464756
  73. https://www.mitpressjournals.org/cdn-cgi/l/email-protection#fc96988c9f8fd190959f99928f998fbc919588d2999889
  74. https://www.mitpressjournals.org/cdn-cgi/l/email-protection#117b7e64637f707d623c7262517c78653f747564
  75. https://www.mitpressjournals.org/cdn-cgi/l/email-protection#452f2a30372b2429366824262620363605282c316b202130
  76. https://www.mitpressjournals.org/cdn-cgi/l/email-protection#8fe1e3e6e1ebfceef6cfe2e6fba1eaebfa
  77. https://www.mitpressjournals.org/action/showlogin?uri=/doi/10.1162/coli_a_00219
  78. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
  79. https://www.mitpressjournals.org/search/advanced
  80. https://www.mitpressjournals.org/
  81. https://www.mitpressjournals.org/loi/coli
  82. https://www.mitpressjournals.org/loi/coli
  83. https://www.mitpressjournals.org/toc/coli/41/2
  84. http://www.mitpressjournals.org/doi/abs/10.1162/coli_a_00218
  85. http://www.mitpressjournals.org/doi/abs/10.1162/coli_a_00220
  86. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
  87. https://www.mitpressjournals.org/journals/coli/editorial
  88. https://www.mitpressjournals.org/journals/coli/aandi
  89. https://www.mitpressjournals.org/schedule
  90. https://www.mitpressjournals.org/advertising
  91. http://cljournal.org/
  92. https://www.mitpressjournals.org/pb-assets/pdfs/coli-permission-form_sept2018-1536787440293.pdf
  93. http://www.mitpressjournals.org/for_authors#authorreprints
  94. https://www.mitpressjournals.org/rights_permission
  95. https://www.mitpressjournals.org/action/showmostreadarticles?journalcode=coli
  96. https://www.mitpressjournals.org/action/showmostcitedarticles?journalcode=coli
  97. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
  98. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
  99. https://creativecommons.org/licenses/by-nc-nd/4.0/
 100. https://giving.mit.edu/taxonomy/term/79#3920880
 101. https://www.mitpressjournals.org/author/kuhlmann,+marco
 102. https://www.mitpressjournals.org/author/koller,+alexander
 103. https://www.mitpressjournals.org/author/satta,+giorgio
 104. https://doi.org/10.1162/coli_a_00219
 105. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 106. https://www.mitpressjournals.org/author/kuhlmann,+marco
 107. https://www.mitpressjournals.org/author/koller,+alexander
 108. https://www.mitpressjournals.org/author/satta,+giorgio
 109. https://doi.org/10.1162/coli_a_00219
 110. https://www.mitpressjournals.org/doi/full/10.1162/coli_a_00219
 111. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#authors-content
 112. http://www.mitpressjournals.org/doi/pdf/10.1162/coli_a_00219
 113. http://www.mitpressjournals.org/doi/pdfplus/10.1162/coli_a_00219
 114. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i1
 115. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#abstract
 116. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i8
 117. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 118. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 119. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 120. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 121. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 122. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 123. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 124. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 125. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 126. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 127. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 128. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 129. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 130. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 131. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 132. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 133. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 134. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 135. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 136. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 137. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 138. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 139. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 140. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 141. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 142. javascript:popref('s2')
 143. javascript:popref('s3')
 144. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 145. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 146. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 147. javascript:popref('s4')
 148. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 149. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 150. javascript:popref('s5')
 151. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i1
 152. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i41
 153. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 154. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 155. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 156. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 157. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 158. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 159. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 160. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 161. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 162. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 163. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#fn4
 164. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 165. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#fn5
 166. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 167. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 168. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 169. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 170. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 171. javascript:popref('s1')
 172. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 173. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 174. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 175. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 176. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 177. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 178. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#fn6
 179. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 180. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 181. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 182. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 183. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 184. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 185. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 186. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 187. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 188. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 189. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 190. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 191. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 192. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 193. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 194. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 195. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 196. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 197. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 198. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 199. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i8
 200. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i71
 201. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 202. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 203. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 204. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 205. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 206. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 207. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 208. javascript:popref('s2b')
 209. javascript:popref('s1')
 210. javascript:popref('s3d')
 211. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 212. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 213. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 214. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#fn7
 215. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 216. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 217. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 218. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 219. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 220. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 221. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 222. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 223. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 224. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 225. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 226. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 227. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 228. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 229. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 230. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 231. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 232. javascript:popref('s3d2')
 233. javascript:popref('s3d')
 234. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 235. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 236. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i41
 237. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i98
 238. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 239. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 240. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 241. javascript:popref('s4d')
 242. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#fn8
 243. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 244. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 245. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 246. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 247. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 248. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 249. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 250. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#fn9
 251. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 252. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 253. javascript:popref('s3')
 254. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 255. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 256. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 257. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 258. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 259. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 260. javascript:popref('s3a')
 261. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 262. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 263. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 264. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 265. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 266. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 267. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 268. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 269. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 270. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 271. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 272. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 273. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i71
 274. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i99
 275. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 276. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 277. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 278. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 279. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 280. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 281. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 282. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i98
 283. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i100
 284. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i99
 285. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i101
 286. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 287. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 288. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 289. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i100
 290. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#citart1
 291. http://scholar.google.com/scholar?hl=en&q=ajdukiewicz,+kazimierz.+1935.++die+syntaktische+konnexit  t.+studia+philosophica,+1:1   27.
 292. http://scholar.google.com/scholar?hl=en&q=baldridge,+jason.+2002.+lexically+specified+derivational+control+in+combinatory+categorial+grammar.+ph.d.+thesis,+university+of+edinburgh,+edinburgh,+uk.
 293. http://scholar.google.com/scholar?hl=en&q=baldridge,+jason+and+geert-jan+m.+kruijff.+2003.++multi-modal+combinatory+categorical+grammar.+in+tenth+conference+of+the+european+chapter+of+the+association+for+computational+linguistics+(eacl),+pages+211   218,+budapest.
 294. http://scholar.google.com/scholar?hl=en&q=bar-hillel,+yehoshua,+haim+gaifman,+and+eli+shamir.+1960.++on+categorial+and+phrase+structure+grammars.+bulletin+of+the+research+council+of+israel,+9f(1):1   16.+reprinted+in+yehoshua+bar-hillel.+language+and+information:+selected+essays+on+their+theory+and+application,+pages+99   115.+addison-wesley,+1964.
 295. http://scholar.google.com/scholar?hl=en&q=curry,+haskell+b.,+robert+feys,+and+william+craig.+1958.+combinatory+logic.+volume+1.+studies+in+logic+and+the+foundations+of+mathematics.+north-holland.
 296. https://www.mitpressjournals.org/servlet/linkout?suffix=r6&dbid=16&doi=10.1162/coli_a_00219&key=10.3115/981863.981874
 297. http://scholar.google.com/scholar?hl=en&q=eisner,+jason.+1996.++efficient+normal-form+parsing+for+combinatory+categorial+grammar.+in+proceedings+of+the+34th+annual+meeting+of+the+association+for+computational+linguistics+(acl),+pages+79   86,+santa+cruz,+ca.
 298. http://scholar.google.com/scholar?hl=en&q=gazdar,+gerald.+1987.++applicability+of+indexed+grammars+to+natural+language.+in+uwe+reyle+and+christian+rohrer,+editors,+natural+language+parsing+and+linguistic+theories.+d.+reidel,+pages+69   94.
 299. http://scholar.google.com/scholar?hl=en&q=joshi,+aravind+k.+1985.++tree+adjoining+grammars:+how+much+context-sensitivity+is+required+to+provide+reasonable+structural+descriptions?+in+david+r.+dowty,+lauri+karttunen,+and+arnold+m.+zwicky,+editors,+natural+language+parsing.+cambridge+university+press,+pages+206   250.
 300. http://scholar.google.com/scholar?hl=en&q=joshi,+aravind+k.+and+yves+schabes.+1997.++tree-adjoining+grammars.+in+grzegorz+rozenberg+and+arto+salomaa,+editors,+handbook+of+formal+languages,+volume+3.+springer,+pages+69   123.
 301. http://scholar.google.com/scholar?hl=en&q=kuhlmann,+marco,+alexander+koller,+and+giorgio+satta.+2010.++the+importance+of+rule+restrictions+in+id35.+in+proceedings+of+the+48th+annual+meeting+of+the+association+for+computational+linguistics+(acl),+pages+534   543,+uppsala.
 302. http://scholar.google.com/scholar?hl=en&q=moortgat,+michael.+2011.++categorial+type+logics.+in+johan+van+benthem+and+alice+ter+meulen,+editors,+handbook+of+logic+and+language.+elsevier,+second+edition,+chapter+2,+pages+95   179.
 303. http://scholar.google.com/scholar?hl=en&q=pollard,+carl+j.+1984.+generalized+phrase+structure+grammars,+head+grammars,+and+natural+language.+ph.d.+thesis,+stanford+university.
 304. https://www.mitpressjournals.org/servlet/linkout?suffix=r13&dbid=16&doi=10.1162/coli_a_00219&key=10.1007/bf00630917
 305. http://scholar.google.com/scholar?hl=en&q=shieber,+stuart+m.+1985.++evidence+against+the+context-freeness+of+natural+language.+linguistics+and+philosophy,+8(3):333   343.
 306. http://scholar.google.com/scholar?hl=en&q=steedman,+mark.+1996.+surface+structure+and+interpretation,+volume+30+of+linguistic+inquiry+monographs.+mit+press.
 307. http://scholar.google.com/scholar?hl=en&q=steedman,+mark.+2000.+the+syntactic+process.+mit+press.
 308. http://scholar.google.com/scholar?hl=en&q=steedman,+mark.+2012.+taking+scope.+mit+press.
 309. http://scholar.google.com/scholar?hl=en&q=steedman,+mark+and+jason+baldridge.+2011.++combinatory+categorial+grammar.+in+robert+d.+borsley+and+kersti+b  rjars,+editors,+non-transformational+syntax:+formal+and+explicit+models+of+grammar.+blackwell,+chapter+5,+pages+181   224.
 310. http://scholar.google.com/scholar?hl=en&q=vijay-shanker,+k.+and+david+j.+weir.+1993.++parsing+some+constrained+grammar+formalisms.+computational+linguistics,+19(4):591   636.
 311. https://www.mitpressjournals.org/servlet/linkout?suffix=r19&dbid=16&doi=10.1162/coli_a_00219&key=10.1007/bf01191624
 312. http://scholar.google.com/scholar?hl=en&q=vijay-shanker,+k.+and+david+j.+weir.+1994.++the+equivalence+of+four+extensions+of+context-free+grammars.+mathematical+systems+theory,+27(6):511   546.
 313. http://scholar.google.com/scholar?hl=en&q=vijay-shanker,+k.,+david+j.+weir,+and+aravind+k.+joshi.+1986.++tree+adjoining+and+head+wrapping.+in+proceedings+of+the+eleventh+international+conference+on+computational+linguistics+(coling),+pages+202   207,+bonn.
 314. http://scholar.google.com/scholar?hl=en&q=weir,+david+j.+1988.+characterizing+mildly+context-sensitive+grammar+formalisms.+ph.d.+thesis,+university+of+pennsylvania.
 315. https://www.mitpressjournals.org/servlet/linkout?suffix=r22&dbid=16&doi=10.1162/coli_a_00219&key=10.3115/982023.982057
 316. http://scholar.google.com/scholar?hl=en&q=weir,+david+j.+and+aravind+k.+joshi.+1988.++combinatory+categorial+grammars:+generative+power+and+relationship+to+linear+context-free+rewriting+systems.+in+proceedings+of+the+26th+annual+meeting+of+the+association+for+computational+linguistics+(acl),+pages+278   285,+buffalo,+ny.
 317. http://openid35.sourceforge.net/
 318. http://scholar.google.com/scholar?hl=en&q=white,+michael.+2013.++openid35:+the+opennlp+id35+library.+http://openid35.sourceforge.net/+accessed+november+13,+2013.
 319. https://www.mitpressjournals.org/cdn-cgi/l/email-protection#e18c8093828ecf8a94898d8c808f8fa18d8894cf9284
 320. https://www.mitpressjournals.org/cdn-cgi/l/email-protection#a2c9cdcecec7d0e2cecbccc58cd7cccb8fd2cdd6d1c6c3cf8cc6c7
 321. https://www.mitpressjournals.org/cdn-cgi/l/email-protection#96e5f7e2e2f7d6f2f3ffb8e3f8ffe6f2b8ffe2
 322. https://doi.org/10.1162/coli_a_00219
 323. https://www.mitpressjournals.org/doi/abs/10.1162/coli_a_00219
 324. https://www.mitpressjournals.org/doi/full/10.1162/coli_a_00219
 325. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#authors-content
 326. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i1
 327. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#abstract
 328. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i8
 329. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 330. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 331. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 332. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 333. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 334. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 335. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 336. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 337. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 338. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 339. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 340. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 341. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 342. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 343. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 344. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 345. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 346. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 347. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 348. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 349. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 350. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 351. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 352. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 353. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 354. javascript:popref('s2')
 355. javascript:popref('s3')
 356. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 357. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 358. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 359. javascript:popref('s4')
 360. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 361. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 362. javascript:popref('s5')
 363. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i1
 364. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i41
 365. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 366. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 367. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 368. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 369. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 370. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 371. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 372. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 373. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 374. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 375. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#fn4
 376. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 377. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#fn5
 378. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 379. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 380. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 381. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 382. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 383. javascript:popref('s1')
 384. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 385. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 386. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 387. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 388. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 389. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 390. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#fn6
 391. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 392. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 393. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 394. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 395. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 396. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 397. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 398. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 399. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 400. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 401. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 402. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 403. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 404. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 405. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 406. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 407. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 408. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 409. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 410. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 411. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i8
 412. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i71
 413. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 414. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 415. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 416. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 417. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 418. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 419. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 420. javascript:popref('s2b')
 421. javascript:popref('s1')
 422. javascript:popref('s3d')
 423. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 424. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 425. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 426. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#fn7
 427. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 428. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 429. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 430. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 431. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 432. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 433. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 434. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 435. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 436. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 437. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 438. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 439. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 440. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 441. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 442. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 443. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 444. javascript:popref('s3d2')
 445. javascript:popref('s3d')
 446. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 447. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 448. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i41
 449. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i98
 450. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 451. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 452. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 453. javascript:popref('s4d')
 454. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#fn8
 455. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 456. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 457. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 458. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 459. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 460. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 461. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 462. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#fn9
 463. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 464. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 465. javascript:popref('s3')
 466. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 467. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 468. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 469. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 470. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 471. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 472. javascript:popref('s3a')
 473. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 474. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 475. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 476. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 477. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 478. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 479. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 480. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 481. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 482. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 483. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 484. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 485. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i71
 486. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i99
 487. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 488. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 489. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 490. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 491. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 492. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 493. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 494. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i98
 495. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i100
 496. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i99
 497. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i101
 498. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 499. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 500. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 501. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i100
 502. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#citart1
 503. http://scholar.google.com/scholar?hl=en&q=ajdukiewicz,+kazimierz.+1935.++die+syntaktische+konnexit  t.+studia+philosophica,+1:1   27.
 504. http://scholar.google.com/scholar?hl=en&q=baldridge,+jason.+2002.+lexically+specified+derivational+control+in+combinatory+categorial+grammar.+ph.d.+thesis,+university+of+edinburgh,+edinburgh,+uk.
 505. http://scholar.google.com/scholar?hl=en&q=baldridge,+jason+and+geert-jan+m.+kruijff.+2003.++multi-modal+combinatory+categorical+grammar.+in+tenth+conference+of+the+european+chapter+of+the+association+for+computational+linguistics+(eacl),+pages+211   218,+budapest.
 506. http://scholar.google.com/scholar?hl=en&q=bar-hillel,+yehoshua,+haim+gaifman,+and+eli+shamir.+1960.++on+categorial+and+phrase+structure+grammars.+bulletin+of+the+research+council+of+israel,+9f(1):1   16.+reprinted+in+yehoshua+bar-hillel.+language+and+information:+selected+essays+on+their+theory+and+application,+pages+99   115.+addison-wesley,+1964.
 507. http://scholar.google.com/scholar?hl=en&q=curry,+haskell+b.,+robert+feys,+and+william+craig.+1958.+combinatory+logic.+volume+1.+studies+in+logic+and+the+foundations+of+mathematics.+north-holland.
 508. https://www.mitpressjournals.org/servlet/linkout?suffix=r6&dbid=16&doi=10.1162/coli_a_00219&key=10.3115/981863.981874
 509. http://scholar.google.com/scholar?hl=en&q=eisner,+jason.+1996.++efficient+normal-form+parsing+for+combinatory+categorial+grammar.+in+proceedings+of+the+34th+annual+meeting+of+the+association+for+computational+linguistics+(acl),+pages+79   86,+santa+cruz,+ca.
 510. http://scholar.google.com/scholar?hl=en&q=gazdar,+gerald.+1987.++applicability+of+indexed+grammars+to+natural+language.+in+uwe+reyle+and+christian+rohrer,+editors,+natural+language+parsing+and+linguistic+theories.+d.+reidel,+pages+69   94.
 511. http://scholar.google.com/scholar?hl=en&q=joshi,+aravind+k.+1985.++tree+adjoining+grammars:+how+much+context-sensitivity+is+required+to+provide+reasonable+structural+descriptions?+in+david+r.+dowty,+lauri+karttunen,+and+arnold+m.+zwicky,+editors,+natural+language+parsing.+cambridge+university+press,+pages+206   250.
 512. http://scholar.google.com/scholar?hl=en&q=joshi,+aravind+k.+and+yves+schabes.+1997.++tree-adjoining+grammars.+in+grzegorz+rozenberg+and+arto+salomaa,+editors,+handbook+of+formal+languages,+volume+3.+springer,+pages+69   123.
 513. http://scholar.google.com/scholar?hl=en&q=kuhlmann,+marco,+alexander+koller,+and+giorgio+satta.+2010.++the+importance+of+rule+restrictions+in+id35.+in+proceedings+of+the+48th+annual+meeting+of+the+association+for+computational+linguistics+(acl),+pages+534   543,+uppsala.
 514. http://scholar.google.com/scholar?hl=en&q=moortgat,+michael.+2011.++categorial+type+logics.+in+johan+van+benthem+and+alice+ter+meulen,+editors,+handbook+of+logic+and+language.+elsevier,+second+edition,+chapter+2,+pages+95   179.
 515. http://scholar.google.com/scholar?hl=en&q=pollard,+carl+j.+1984.+generalized+phrase+structure+grammars,+head+grammars,+and+natural+language.+ph.d.+thesis,+stanford+university.
 516. https://www.mitpressjournals.org/servlet/linkout?suffix=r13&dbid=16&doi=10.1162/coli_a_00219&key=10.1007/bf00630917
 517. http://scholar.google.com/scholar?hl=en&q=shieber,+stuart+m.+1985.++evidence+against+the+context-freeness+of+natural+language.+linguistics+and+philosophy,+8(3):333   343.
 518. http://scholar.google.com/scholar?hl=en&q=steedman,+mark.+1996.+surface+structure+and+interpretation,+volume+30+of+linguistic+inquiry+monographs.+mit+press.
 519. http://scholar.google.com/scholar?hl=en&q=steedman,+mark.+2000.+the+syntactic+process.+mit+press.
 520. http://scholar.google.com/scholar?hl=en&q=steedman,+mark.+2012.+taking+scope.+mit+press.
 521. http://scholar.google.com/scholar?hl=en&q=steedman,+mark+and+jason+baldridge.+2011.++combinatory+categorial+grammar.+in+robert+d.+borsley+and+kersti+b  rjars,+editors,+non-transformational+syntax:+formal+and+explicit+models+of+grammar.+blackwell,+chapter+5,+pages+181   224.
 522. http://scholar.google.com/scholar?hl=en&q=vijay-shanker,+k.+and+david+j.+weir.+1993.++parsing+some+constrained+grammar+formalisms.+computational+linguistics,+19(4):591   636.
 523. https://www.mitpressjournals.org/servlet/linkout?suffix=r19&dbid=16&doi=10.1162/coli_a_00219&key=10.1007/bf01191624
 524. http://scholar.google.com/scholar?hl=en&q=vijay-shanker,+k.+and+david+j.+weir.+1994.++the+equivalence+of+four+extensions+of+context-free+grammars.+mathematical+systems+theory,+27(6):511   546.
 525. http://scholar.google.com/scholar?hl=en&q=vijay-shanker,+k.,+david+j.+weir,+and+aravind+k.+joshi.+1986.++tree+adjoining+and+head+wrapping.+in+proceedings+of+the+eleventh+international+conference+on+computational+linguistics+(coling),+pages+202   207,+bonn.
 526. http://scholar.google.com/scholar?hl=en&q=weir,+david+j.+1988.+characterizing+mildly+context-sensitive+grammar+formalisms.+ph.d.+thesis,+university+of+pennsylvania.
 527. https://www.mitpressjournals.org/servlet/linkout?suffix=r22&dbid=16&doi=10.1162/coli_a_00219&key=10.3115/982023.982057
 528. http://scholar.google.com/scholar?hl=en&q=weir,+david+j.+and+aravind+k.+joshi.+1988.++combinatory+categorial+grammars:+generative+power+and+relationship+to+linear+context-free+rewriting+systems.+in+proceedings+of+the+26th+annual+meeting+of+the+association+for+computational+linguistics+(acl),+pages+278   285,+buffalo,+ny.
 529. http://openid35.sourceforge.net/
 530. http://scholar.google.com/scholar?hl=en&q=white,+michael.+2013.++openid35:+the+opennlp+id35+library.+http://openid35.sourceforge.net/+accessed+november+13,+2013.
 531. https://www.mitpressjournals.org/cdn-cgi/l/email-protection#b5d8d4c7d6da9bdec0ddd9d8d4dbdbf5d9dcc09bc6d0
 532. https://www.mitpressjournals.org/cdn-cgi/l/email-protection#acc7c3c0c0c9deecc0c5c2cb82d9c2c581dcc3d8dfc8cdc182c8c9
 533. https://www.mitpressjournals.org/cdn-cgi/l/email-protection#fe8d9f8a8a9fbe9a9b97d08b90978e9ad0978a
 534. https://www.mitpressjournals.org/forthcoming/coli
 535. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 536. https://www.mitpressjournals.org/author/kuhlmann,+marco
 537. https://www.mitpressjournals.org/author/koller,+alexander
 538. https://www.mitpressjournals.org/author/satta,+giorgio
 539. https://doi.org/10.1162/coli_a_00219
 540. https://www.mitpressjournals.org/doi/full/10.1162/coli_a_00219
 541. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#authors-content
 542. http://www.mitpressjournals.org/doi/pdf/10.1162/coli_a_00219
 543. http://www.mitpressjournals.org/doi/pdfplus/10.1162/coli_a_00219
 544. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i1
 545. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#abstract
 546. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i8
 547. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 548. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 549. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 550. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 551. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 552. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 553. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 554. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 555. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 556. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 557. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 558. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 559. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 560. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 561. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 562. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 563. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 564. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 565. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 566. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 567. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 568. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 569. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 570. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 571. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 572. javascript:popref('s2')
 573. javascript:popref('s3')
 574. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 575. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 576. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 577. javascript:popref('s4')
 578. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 579. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 580. javascript:popref('s5')
 581. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i1
 582. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i41
 583. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 584. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 585. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 586. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 587. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 588. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 589. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 590. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 591. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 592. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 593. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#fn4
 594. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 595. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#fn5
 596. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 597. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 598. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 599. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 600. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 601. javascript:popref('s1')
 602. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 603. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 604. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 605. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 606. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 607. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 608. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#fn6
 609. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 610. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 611. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 612. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 613. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 614. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 615. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 616. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 617. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 618. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 619. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 620. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 621. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 622. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 623. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 624. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 625. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 626. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 627. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 628. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 629. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i8
 630. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i71
 631. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 632. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 633. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 634. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 635. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 636. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 637. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 638. javascript:popref('s2b')
 639. javascript:popref('s1')
 640. javascript:popref('s3d')
 641. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 642. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 643. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 644. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#fn7
 645. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 646. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 647. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 648. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 649. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 650. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 651. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 652. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 653. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 654. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 655. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 656. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 657. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 658. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 659. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 660. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 661. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 662. javascript:popref('s3d2')
 663. javascript:popref('s3d')
 664. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 665. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 666. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i41
 667. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i98
 668. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 669. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 670. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 671. javascript:popref('s4d')
 672. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#fn8
 673. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 674. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 675. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 676. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 677. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 678. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 679. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 680. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#fn9
 681. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 682. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 683. javascript:popref('s3')
 684. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 685. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 686. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 687. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 688. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 689. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 690. javascript:popref('s3a')
 691. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 692. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 693. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 694. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 695. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 696. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 697. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 698. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 699. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 700. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 701. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 702. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 703. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i71
 704. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i99
 705. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 706. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 707. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 708. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 709. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 710. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 711. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 712. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i98
 713. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i100
 714. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i99
 715. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i101
 716. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 717. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 718. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 719. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#_i100
 720. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219#citart1
 721. http://scholar.google.com/scholar?hl=en&q=ajdukiewicz,+kazimierz.+1935.++die+syntaktische+konnexit  t.+studia+philosophica,+1:1   27.
 722. http://scholar.google.com/scholar?hl=en&q=baldridge,+jason.+2002.+lexically+specified+derivational+control+in+combinatory+categorial+grammar.+ph.d.+thesis,+university+of+edinburgh,+edinburgh,+uk.
 723. http://scholar.google.com/scholar?hl=en&q=baldridge,+jason+and+geert-jan+m.+kruijff.+2003.++multi-modal+combinatory+categorical+grammar.+in+tenth+conference+of+the+european+chapter+of+the+association+for+computational+linguistics+(eacl),+pages+211   218,+budapest.
 724. http://scholar.google.com/scholar?hl=en&q=bar-hillel,+yehoshua,+haim+gaifman,+and+eli+shamir.+1960.++on+categorial+and+phrase+structure+grammars.+bulletin+of+the+research+council+of+israel,+9f(1):1   16.+reprinted+in+yehoshua+bar-hillel.+language+and+information:+selected+essays+on+their+theory+and+application,+pages+99   115.+addison-wesley,+1964.
 725. http://scholar.google.com/scholar?hl=en&q=curry,+haskell+b.,+robert+feys,+and+william+craig.+1958.+combinatory+logic.+volume+1.+studies+in+logic+and+the+foundations+of+mathematics.+north-holland.
 726. https://www.mitpressjournals.org/servlet/linkout?suffix=r6&dbid=16&doi=10.1162/coli_a_00219&key=10.3115/981863.981874
 727. http://scholar.google.com/scholar?hl=en&q=eisner,+jason.+1996.++efficient+normal-form+parsing+for+combinatory+categorial+grammar.+in+proceedings+of+the+34th+annual+meeting+of+the+association+for+computational+linguistics+(acl),+pages+79   86,+santa+cruz,+ca.
 728. http://scholar.google.com/scholar?hl=en&q=gazdar,+gerald.+1987.++applicability+of+indexed+grammars+to+natural+language.+in+uwe+reyle+and+christian+rohrer,+editors,+natural+language+parsing+and+linguistic+theories.+d.+reidel,+pages+69   94.
 729. http://scholar.google.com/scholar?hl=en&q=joshi,+aravind+k.+1985.++tree+adjoining+grammars:+how+much+context-sensitivity+is+required+to+provide+reasonable+structural+descriptions?+in+david+r.+dowty,+lauri+karttunen,+and+arnold+m.+zwicky,+editors,+natural+language+parsing.+cambridge+university+press,+pages+206   250.
 730. http://scholar.google.com/scholar?hl=en&q=joshi,+aravind+k.+and+yves+schabes.+1997.++tree-adjoining+grammars.+in+grzegorz+rozenberg+and+arto+salomaa,+editors,+handbook+of+formal+languages,+volume+3.+springer,+pages+69   123.
 731. http://scholar.google.com/scholar?hl=en&q=kuhlmann,+marco,+alexander+koller,+and+giorgio+satta.+2010.++the+importance+of+rule+restrictions+in+id35.+in+proceedings+of+the+48th+annual+meeting+of+the+association+for+computational+linguistics+(acl),+pages+534   543,+uppsala.
 732. http://scholar.google.com/scholar?hl=en&q=moortgat,+michael.+2011.++categorial+type+logics.+in+johan+van+benthem+and+alice+ter+meulen,+editors,+handbook+of+logic+and+language.+elsevier,+second+edition,+chapter+2,+pages+95   179.
 733. http://scholar.google.com/scholar?hl=en&q=pollard,+carl+j.+1984.+generalized+phrase+structure+grammars,+head+grammars,+and+natural+language.+ph.d.+thesis,+stanford+university.
 734. https://www.mitpressjournals.org/servlet/linkout?suffix=r13&dbid=16&doi=10.1162/coli_a_00219&key=10.1007/bf00630917
 735. http://scholar.google.com/scholar?hl=en&q=shieber,+stuart+m.+1985.++evidence+against+the+context-freeness+of+natural+language.+linguistics+and+philosophy,+8(3):333   343.
 736. http://scholar.google.com/scholar?hl=en&q=steedman,+mark.+1996.+surface+structure+and+interpretation,+volume+30+of+linguistic+inquiry+monographs.+mit+press.
 737. http://scholar.google.com/scholar?hl=en&q=steedman,+mark.+2000.+the+syntactic+process.+mit+press.
 738. http://scholar.google.com/scholar?hl=en&q=steedman,+mark.+2012.+taking+scope.+mit+press.
 739. http://scholar.google.com/scholar?hl=en&q=steedman,+mark+and+jason+baldridge.+2011.++combinatory+categorial+grammar.+in+robert+d.+borsley+and+kersti+b  rjars,+editors,+non-transformational+syntax:+formal+and+explicit+models+of+grammar.+blackwell,+chapter+5,+pages+181   224.
 740. http://scholar.google.com/scholar?hl=en&q=vijay-shanker,+k.+and+david+j.+weir.+1993.++parsing+some+constrained+grammar+formalisms.+computational+linguistics,+19(4):591   636.
 741. https://www.mitpressjournals.org/servlet/linkout?suffix=r19&dbid=16&doi=10.1162/coli_a_00219&key=10.1007/bf01191624
 742. http://scholar.google.com/scholar?hl=en&q=vijay-shanker,+k.+and+david+j.+weir.+1994.++the+equivalence+of+four+extensions+of+context-free+grammars.+mathematical+systems+theory,+27(6):511   546.
 743. http://scholar.google.com/scholar?hl=en&q=vijay-shanker,+k.,+david+j.+weir,+and+aravind+k.+joshi.+1986.++tree+adjoining+and+head+wrapping.+in+proceedings+of+the+eleventh+international+conference+on+computational+linguistics+(coling),+pages+202   207,+bonn.
 744. http://scholar.google.com/scholar?hl=en&q=weir,+david+j.+1988.+characterizing+mildly+context-sensitive+grammar+formalisms.+ph.d.+thesis,+university+of+pennsylvania.
 745. https://www.mitpressjournals.org/servlet/linkout?suffix=r22&dbid=16&doi=10.1162/coli_a_00219&key=10.3115/982023.982057
 746. http://scholar.google.com/scholar?hl=en&q=weir,+david+j.+and+aravind+k.+joshi.+1988.++combinatory+categorial+grammars:+generative+power+and+relationship+to+linear+context-free+rewriting+systems.+in+proceedings+of+the+26th+annual+meeting+of+the+association+for+computational+linguistics+(acl),+pages+278   285,+buffalo,+ny.
 747. http://openid35.sourceforge.net/
 748. http://scholar.google.com/scholar?hl=en&q=white,+michael.+2013.++openid35:+the+opennlp+id35+library.+http://openid35.sourceforge.net/+accessed+november+13,+2013.
 749. https://www.mitpressjournals.org/cdn-cgi/l/email-protection#afc2ceddccc081c4dac7c3c2cec1c1efc3c6da81dcca
 750. https://www.mitpressjournals.org/cdn-cgi/l/email-protection#2b404447474e596b4742454c055e4542065b445f584f4a46054f4e
 751. https://www.mitpressjournals.org/cdn-cgi/l/email-protection#601301141401200405094e150e0910044e0914
 752. https://www.mitpressjournals.org/personalize/addfavoritepublication?doi=10.1162/coli_a_00219
 753. https://www.mitpressjournals.org/action/showcitformats?doi=10.1162/coli_a_00219
 754. https://www.mitpressjournals.org/action/showfeed?jc=coli&type=etoc&feed=rss
 755. https://www.mitpressjournals.org/action/showfeed?jc=coli&doi=10.1162/coli_a_00219&type=citrack&feed=rss
 756. https://www.mitpressjournals.org/journals/coli/sub
 757. https://giving.mit.edu/taxonomy/term/79#3920880
 758. https://www.mitpressjournals.org/
 759. http://www.mitpressjournals.org/action/showpublications
 760. http://mitpress.mit.edu/
 761. https://www.mitpressjournals.org/terms
 762. https://www.mitpressjournals.org/privacy
 763. https://www.mitpressjournals.org/contact_info
 764. https://www.facebook.com/mitpress
 765. http://www.twitter.com/mitpress
 766. https://plus.google.com/106848724929282487337?prsrc=3
 767. https://www.pinterest.com/mitpress/
 768. https://www.instagram.com/mitpress/
 769. https://www.youtube.com/channel/uceh0hmlpjgw2dn0ntmd0fcq
 770. https://www.atypon.com/
 771. https://www.crossref.org/
 772. https://www.projectcounter.org/
 773. https://www.mitpressjournals.org/help/main

   hidden links:
 775. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 776. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 777. https://www.mitpressjournals.org/action/oauth/linkedin?start=1&redirecturi=%2fdoi%2f10.1162%2fcoli_a_00219
 778. https://www.mitpressjournals.org/action/oauth/facebook?start=1&redirecturi=%2fdoi%2f10.1162%2fcoli_a_00219
 779. https://www.mitpressjournals.org/action/oauth/twitter?start=1&redirecturi=%2fdoi%2f10.1162%2fcoli_a_00219
 780. https://www.mitpressjournals.org/action/registration
 781. https://www.mitpressjournals.org/action/ssostart?redirecturi=%2fdoi%2f10.1162%2fcoli_a_00219
 782. https://www.mitpressjournals.org/doi/10.1162/coli_a_00219
 783. https://www.mitpressjournals.org/action/showlogin?uri=%2fdoi%2f10.1162%2fcoli_a_00219
 784. https://www.mitpressjournals.org/action/showcart?flowid=1
 785. javascript:popref('s2')
 786. javascript:popref('s3')
 787. javascript:popref('s3d')
 788. javascript:popref('s4')
 789. javascript:popref('s4d')
 790. javascript:popref('s5')
 791. javascript:popref('s1')
 792. javascript:popref('s2')
 793. javascript:popref('s2b')
 794. javascript:popref('s3')
 795. javascript:popref('s3a')
 796. javascript:popref('s3d')
 797. javascript:popref('s3d2')
 798. javascript:popref('s4')
 799. javascript:popref('s4d')
 800. javascript:popref('s5')
 801. javascript:popref('s1')
 802. javascript:popref('s2')
 803. javascript:popref('s2b')
 804. javascript:popref('s3')
 805. javascript:popref('s3a')
 806. javascript:popref('s3d')
 807. javascript:popref('s3d2')
 808. javascript:popref('s4')
 809. javascript:popref('s4d')
 810. javascript:popref('s5')
 811. https://www.mitpressjournals.org/action/addcitationalert?doi=10.1162/coli_a_00219&referrer=10.1162/coli_a_00219
