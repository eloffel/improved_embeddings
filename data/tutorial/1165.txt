http://tiny.cc/amrtutorial

the logic of amr 
practical, uni   ed, graph-based 
sentence semantics for nlp

nathan schneider 
jeff flanigan 
tim o   gorman

university of edinburgh 
cmu 
cu-boulder

the logic of amr

    part i: the amr formalism (tim & nathan) 

coffee break 

    part ii: algorithms and applications (jeff)

introduction to the  
abstract meaning 
representation (amr)

http://tiny.cc/amrtutorial

if you are here early, go to the amr editor and try to log in: 

http://tiny.cc/amreditor 

1

why does amr matter now?

    amr is a semantic representation aimed at large-
scale human annotation in order to build a giant 
semantics bank. !

    we do a practical, replicable amount of abstraction 

(limited canonicalization). 

    capture many aspects of meaning in a single 

simple data structure. 

2

hasn   t this been done 

before?

    linguistics/cl have formalized semantics for a long 

time. 

    a form of amr has been around for a long time too 

(langkilde and knight 1998).  

    it changed a lot since 1998 (add propbank, etc.) 

and we actually built a corpus of amrs.

3

contemporary amr

    banarescu et al. 
(2013) laid out the 
fundamentals of the 
annotation scheme 
we   ll describe today.

4

roadmap for part i

    fundamentals of the amr representation 

    hands-on practice i: representing basic examples 

    advanced topics and linguistic phenomena 

    comparison to other representations 

    hands-on practice ii: doing real, complex text

5

penman notation

    we use penman notation (bateman 1990). 
    a way of representing a directed    
graph in a simple, tree-like form. 

d/dog

!
                 the dog is eating a bone    
!
(e / eat-01 
    :arg0 (d / dog) 
    :arg1 (b / bone))

arg0

e/eat-01

a

r

g

1

b/bone

6

penman notation

    the edges (arg0 and arg1) are relations 
    each node in the graph has a variable!
    they are labeled with concepts!
    d / dog means    d is an    

arg0

d/dog

instance of dog    

!
   the dog is eating a bone    
(e / eat-01 
    :arg0 (d / dog) 
    :arg1 (b / bone))

e/eat-01

a

r

g

1

b/bone

7

penman notation

!

    concepts are technically    

edges (this matters in part 2)   
arg0

!
!
   the dog is eating a bone    
(e / eat-01 
    :arg0 (d / dog) 
    :arg1 (b / bone))

dog

d

eat-01

e

a

r

g

1

bone

b

8

reentrancy

    what if something is referenced multiple 

times?   

    notice how dog has two incoming roles 

now.  

w/want-01

    to do this in penman format,    

repeat the variable.  we call this a 
reentrancy.   

   the dog wants to eat the bone   

(want-01 
    :arg0 (d / dog) 
    :arg1 (e / eat-01 
         :arg0 d!
         :arg1 (b / bone)))

9

arg0

d/dog

a

r

g

1

arg0

e/eat-01

a

r

g

1

b/bone

reentrancy

    it does not matter where the concept label goes.   
              the dog wants to eat the bone    
!
(want-01 
    :arg0 (d / dog) 
    :arg1 (e /eat-01 
         :arg0 d!
         :arg1 (b / bone)))

!
!
(want-01 
    :arg0 d 
    :arg1 (e /eat-01 
         :arg0 (d / dog) !
         :arg1 (b / bone)))

10

inverse relations and focus
    what about    the dog ate the bone that he found   ? 

!

!

!

d/dog

arg0

a

r

g

0

e/eat-01

f/   nd-01

a

r

g

1

arg1

b/bone

    how do we know what goes on top? 
    how do we get these into the amr format?!

11

inverse relations and focus
    we call    what goes on top    the focus. 
    conceptually, the main assertion.!
    linguistically, often the head.  

    for a sentence, usually the main verb.

12

inverse relations and focus
the hotel the man is at 
the man at the hotel 

f 
o 
c 
u 
s

f 
o 
c 
u 
s

the dog ran
f 
o 
c 
u 
s

the dog that ran

f 
o 
c 
u 
s

13

inverse relations and focus
the man at the hotel 

f 
o 
c 
u 
s

the dog ran
f 
o 
c 
u 
s

(m / man 
      :location (h / hotel))

(r / ran-01 
      :arg0 (d / dog))

14

inverse relations and focus
the hotel the man is at 

f 
o 
c 
u 
s

(h / hotel 
      :??? (m / man))

(d / dog 
      :???? (r / ran-01))

the dog that ran

f 
o 
c 
u 
s

15

inverse relations and focus
the hotel the man is at 

(h / hotel 
      :location-of (m / man))

(d / dog 
      :arg0-of (r / ran-01))

16

f 
o 
c 
u 
s

the dog that ran

f 
o 
c 
u 
s

inverse relations and focus
    this is a notational trick:  x arg0-of y = y arg0 x 
    often used for relative clauses. 
    these are equivalent for smatch scoring purposes 

too.

17

reviewing the format

    imagine a graph for    the dog ate the bone that he found   

eat-01

arg0

dog

a

r

g

1

bone

a

r

g

0

arg1

   nd-01

       the dog ate the bone that he found   

18

reviewing the format

(e / eat-01    )

    find the focus

focus

eat-01

arg0

dog

a

r

g

1

bone

a

r

g

0

arg1

   nd-01

       the dog ate the bone that he found   

19

reviewing the format

(e / eat-01  
      :arg0 (d / dog) 
      :arg1 (b / bone))

    add entities

focus

eat-01

arg0

dog

a

r

g

1

bone

a

r

g

0

arg1

   nd-01

       the dog ate the bone that he found   

20

reviewing the format

    invert a relation if needed

focus

eat-01

arg0

(e / eat-01  
      :arg0 (d / dog) 
      :arg1 (b / bone 
                  :arg1-of (f /    nd-01)))
dog

a

r

g

1

bone

a

r

g

0

arg1-of

   nd-01

       the dog ate the bone that he found   

21

reviewing the format

    add reentrancies

focus

eat-01

(e / eat-01  
      :arg0 (d / dog) 
      :arg1 (b / bone) 
                  :arg1-of (f /    nd-01 
                                     :arg0 d)))
dog

arg0

a

r

g

1

bone

a

r

g

0

arg1-of

   nd-01

       the dog ate the bone that he found   

22

constant

    some relations, called 

constants, get no variable. 

    the editor does this 

automatically for certain 
contexts. 

    this happens for negation.

23

   the dog did not eat the bone    
(e /eat-01 :polarity - 
    :arg0 (d / dog) 
    :arg1 (b / bone))

constant

    some relations, called 

constants, get no variable. 

    the editor does this 

automatically for certain 
contexts. 

    this happens for numbers. 

   the dog ate four bones    
(e /eat-01 
    :arg0 (d / dog) 
    :arg1 (b / bone :quant 4))

(to create a concept starting with a nonalphabetic 
character, type    !    before the concept)

24

constant

    some relations, called 

constants, get no variable. 

    the editor does this 

automatically for certain 
contexts. 

    this happens for  names  
!

25

   fido the dog    
(d / dog  
    :name (n / name :op1 "fido"))

concepts vs. constants

    a concept is a type. for every concept node there will 

be    1 instance variable/node. 

    an instance can be mentioned multiple times.  

    multiple instances of the same concept can be 

mentioned. 

    constants are singleton nodes: no variable, just a 

value. speci   c non-core roles allow constant values. 

!

26

    that   s amr notation!  let   s review before 

discussing how we annotate amrs.   

concept

constant

variable
(e / eat-01!

     :arg0 (d / dog) 
     :arg1 (b / bone :quant 4!
                     :arg1-of (f /    nd-01 
                              :arg0 d)))   
inverse relation

reentrancy

27

   
   
   
   
propbank lexicon

    predicates use the     
propbank inventory.!
    each frame presents 

annotators with a list of 
senses. 

    each sense has   
its own de   nitions for its 
numbered (core) 
arguments

28

propbank lexicon

    we generalize across parts of speech and 

etymologically related words:   
 

my fear of snakes 
fear-01 
i am fearful of snakes       fear-01 
i fear snakes   
fear-01 
 
i   m afraid of snakes  
fear-01
    but we don   t generalize over synonyms:

 
 

 

 

my fear of snakes 
i   m terri   ed of snakes       terrify-01 
snakes creep me out    creep_out-03

fear-01 

 

 

29

   
   
   
id30 concepts

    non-predicates don   t have propbank frames. 

they are simply stemmed. 

    all concepts drop plurality, articles, and tense.    

a cat 
the cat 
cats 

the cats 

!

(c / cat)

eating 
eats 
ate 

will eat 

!

(e / eat-01)

30

   
   
why drop articles?

    all mentions of a term go to the same variable, 

including pronouns and later nominal mentions.!

i saw a nice dog and noticed he was eating a bone

!

!

!

(d / dog  
    :mod nice)

is    d    inde   nite   
or de   nite?

    we do capture demonstratives:

this house

31

(h / house  
    :mod (t / this))

id30 concepts

    pronouns that do not have a coreferent nominal 

mention are made nominative and used as 
normal concepts. 

the man saved himself he saved himself

he saved me

(s / save-01 
     :arg0 (m / man) 
     :arg1 m)

(s / save-01 
     :arg0 (h / he) 
     :arg1 h)

(s / save-01 
     :arg0 (h / he) 
     :arg1 (i / i))

32

why drop tense?

    english verbal tense doesn   t generalize well 
cross-linguistically; not available for nominal 
predicates. 

    richer time representation might have required 

looking beyond a sentence. 

    keep a simple representation.

33

the man described the mission as a disaster. 
the man   s description of the mission: disaster. 
as the man described it, the mission was a disaster. 
the man described the mission as disastrous.

(d / describe-01 
      :arg0 (m / man) 
      :arg1 (m2 / mission) 
      :arg2 (d / disaster))

34

non-core role inventory

    if a semantic role is not in 

the core roles for a roleset, 
amr provides an inventory 
of non-core roles 

    these express things 
like :time, :manner, :part,    
:location, :frequency!

    inventory on handout, or in 

editor (the [roles] button)

35

non-core role inventory
    we use :mod for attribution, and :domain is the inverse   

of mod (:domain = :mod-of)
the yummy food 

there is yummy food 

(f / food 
    :mod (y / yummy)) 
seeing the yummy food 

seeing the food that is yummy 

(s / see-01 
    :arg1 (f / food 
        :mod (y / yummy))) 

36

the yumminess of the food 

the food is yummy 
(y / yummy 
    :domain (f / food)) 

seeing that the food is yummy 

(s / see-01 
    :arg1 (y / yummy 
        :domain (f / food))) 

non-core role inventory
    this is also used for attribute/predicative demonstratives   

and nominals
this house 
(h / house 
    :mod (t / this)) 

a monster truck 
(t / truck 
    :mod (m / monster)) 

the truck is a monster 

(m / monster 
    :domain (t / truck)) 

37

non-core roles: :op#

    some relations need to have an ordered list of 

arguments, but don   t have speci   c meanings for 
each entry. 

    we use :op1, :op2, :op3,     for these

38

:op# for coordination

    we use this for coordination: 
    apples and bananas

(a / and   
           :op1 (a2 / apple)   
           :op2 (b / banana))

39

    barack obama 

:op# for names
(p / person    
      :name (n / name    
           :op1 "barack"    
           :op2 "obama"))

!

!

    obama

(p / person    
      :name (n / name    
           :op1 "obama"))

40

named entities

    barack obama   

    entities with names get   

special treatment! 

(p / person    
      :name (n / name    
           :op1 "barack"    
           :op2 "obama"))

    we assign a named entity type from our ontology. 
    70+ categories like person, criminal-organization, 

newspaper, city, food-dish, conference!

    see your handout, or the [ne types] button in the 

editor

41

named entities

    barack obama   

    entities with names get   

special treatment! 

(p / person    
      :name (n / name    
           :op1 "barack"    
           :op2 "obama"))

    each gets a :name relation to a name node!
    that node gets :op# relations to the strings of 

their name as used in the sentence.

42

named entities

    if there is a more speci   c descriptor present in 

the sentence, we use that instead of the ne 
inventory.!
    a kleenex 

!

    a kleenex tissue

(p / product    
      :name (n / name    
           :op1 "kleenex"))
(t / tissue    
      :name (n / name    
           :op1 "kleenex"))

43

wiki   cation

    in a second pass of annotation, we add :wiki 

relations. 

    barack obama 

!

!

(p / person    
      :name (n / name    
           :op1 "barack"    
           :op2 "obama")   
      :wiki barack_obama)

    http://en.wikipedia.org/wiki/barack_obama

44

measurable entities

    we also have special entity types we use for 

normalizable entities. 

   tuesday the 19th   

      ve bucks   

(d / date-entity 
      :weekday (t / tuesday) 
      :day 19)

(m / monetary-quantity 
     :unit dollar 
     :quant 5)

45

measurable entities

    we also have special entity types we use for 

normalizable entities. 

   $3 / gallon   

:unit dollar 
:quant 3) 

(r / rate-entity-91 
 
 
 
 
 
 
    

:arg1 (m / monetary-quantity 
 
 
:arg2 (v / volume-quantity 
 
 

:unit gallon 
:quant 1)) 
46

hands-on annotation!

go to the amr editor: 
http://tiny.cc/amreditor 

47

load the tutorial sentences

48

select    naacl tutorial   

49

it should look like this

50

commands

use    top <concept>    to make a top node

51

commands

click on    like    to select the right sense

52

commands

new relation: <variable> :<role> <concept>

53

commands

anything after the third element is made into a name

54

commands

make reentrancies with <variable> :<role> <variable>

55

commands

when you are done, use    save and load next   

56

try the next sentence!  

we will walk through it momentarily

57

amr annotation:   
special topics

http://tiny.cc/amrtutorial

congratulations!    

you now know how to amr simple sentences.

   
but: english is a wily opponent.

    copulas, light verbs 

    prepositions 

    derivational morphology 

    relational nouns 

    coordination & clausal 

connectives 

    modality 

    non-declarative 

sentences 

    questions 

    comparisons 

    quanti   cation 

    subsets 

    rei   cation

3

light semantics

    we try to eliminate purely grammatical words. e.g.: 

    copulas: i am happy   

(h / happy :domain (i / i)) 

    light verbs: i   m taking a bath   

(b / bathe-01 :arg0 (i / i))   

4

   
   
heavy prepositions

    most prepositions mark a (core or non-core) role. some 
add crucial additional information meriting a concept: 
    at the school: :location (s / school) 
    next to the school:    
    between the school and the house:    

:location (n / next-to :op1 (s / school)) 
:location (b / between :op1 (s / school)    
                                     :op2 (h / house)) 

    at the time of the war: :time (w / war) 
    after the war: :time (a / after :op1 (w / war))

5

typical uses of inverse roles

    relative clauses: someone who sifts thistles 
    derivational morphology 

    participles: thistle-sifting person 
    nominalizations: thistle sifter 

concept may be implicit

    (p / person   

    :arg0-of (s / sift-01   
                        :arg1 (t / thistle)))

6

compositionality criterion

    we only    decompose    derivational morphology if 

a relative clause paraphrase is possible: 
    teacher = person who teaches   

(p / person :arg0-of (t / teach-01)) 
    professor     person who professes   

(p / professor)

7

   
   
compositionality criterion

    often core roles are available for modi   ers: 

    math teacher / teacher of math    

                     = person who teaches math   
(p / person :arg0-of (t / teach-01    
                                     :arg1 (m / math))) 

    math professor     person who professes math   

(p / professor :mod (m / math))

8

   
   
compositionality criterion

    sometimes it is dif   cult to draw a line, but we do 

our best: 
    opinion = thing that is opined   

(t / thing :arg1-of (o / opine-01)) 
    profession     thing that is professed   

(p / profession)

9

   
   
hallucinating relations

    sometimes we have to    hallucinate    a relationship 

that the grammar underspeci   es. 
    e.g., possessives and noun-noun compounds 
can express many different kinds of relations

10

relational nouns

    special predicates for individual   group and 

individual   individual relations:
he is a pilot for twa   
he is a twa pilot   
(h / have-org-role-91    
    :arg0 (h2 / he)    
    :arg1 (c / company   
      :name (n / name :op1 "twa"))   
    :arg2 (p / pilot))

i am your father   

(h / have-rel-role-91    
    :arg0 (i / i)    
    :arg1 (y / you)   
    :arg2 (f / father))

11

   
   
   
coordination & clausal 

connectives

12

example connectivesamr treatmentandandororbutcontrast)01because; due to; on account of:cause(in order) to; so (that):purposeif:conditionunless:condition1(   1:polarity1))although; despite:concessioncoordination

    the most common patterns:   
x, y, or z    
x, y, and z    
(o1/1or1   
(a1/1and1   
111:op1 x    
111:op1 x    
      :op2 y    
      :op2 y    
      :op3 z)
      :op3 z)

       and   ,    or    take 2 or more 

conjuncts in sequence as :op#

13

x but y    
(c1/1contrast)011   
111:arg1 x    
      :arg2 y)

   
   
   
   
   
   
   
   
   
coordination

14

coordination

    rachael ray    nds inspiration in cooking her family and 

her dog.   
(i1/1inspire)01   
111:arg01(c1/1cook)01   
111111111111:arg01p   
111111111111:arg11(a1/1and   
111111111111111111111:op11(f1/1family1   
11111111111111111111111111111:arg1)of1(h1/1have)org)role)911   
11111111111111111111111111111111111111111:arg01p1   
11111111111111111111111111111111111111111:arg21(m1/1member)))   
111111111111111111111:op21(d1/1dog1:poss1p)))   
111:arg11(p1/1person1:name1(n1/1name1:op11"rachael"1:op21"ray")))

15

   
coordination

    rachael ray    nds inspiration in cooking her family and 

her dog.   
(i1/1inspire)01   
111:arg01(c1/1cook)01   
111111111111:arg01p   
111111111111:arg11(a1/1and   
111111111111111111111:op11(f1/1family1   
11111111111111111111111111111:arg1)of1(h1/1have)org)role)911   
11111111111111111111111111111111111111111:arg01p1   
11111111111111111111111111111111111111111:arg21(m1/1member)))   
111111111111111111111:op21(d1/1dog1:poss1p)))   
111:arg11(p1/1person1:name1(n1/1name1:op11"rachael"1:op21"ray")))

16

   
coordination

    rachael ray    nds inspiration in cooking her family and 

her dog.   
(i1/1inspire)01   
111:arg01(c1/1cook)01   
111111111111:arg01p   
111111111111:arg11(a1/1and   
111111111111111111111:op11(f1/1family1   
11111111111111111111111111111:arg1)of1(h1/1have)org)role)911   
11111111111111111111111111111111111111111:arg01p1   
11111111111111111111111111111111111111111:arg21(m1/1member)))   
111111111111111111111:op21(d1/1dog1:poss1p)))   
111:arg11(p1/1person1:name1(n1/1name1:op11"rachael"1:op21"ray")))

17

   
coordination

    rachael ray    nds inspiration in cooking her family and 

her dog.   
(i1/1inspire)01   
111:arg01(c1/1cook)01   
111111111111:arg01p   
111111111111:arg11(a1/1and   
111111111111111111111:op11(f1/1family1   
11111111111111111111111111111:arg1)of1(h1/1have)org)role)911   
11111111111111111111111111111111111111111:arg01p1   
11111111111111111111111111111111111111111:arg21(m1/1member)))   
111111111111111111111:op21(d1/1dog1:poss1p)))   
111:arg11(p1/1person1:name1(n1/1name1:op11"rachael"1:op21"ray")))

x   s family = family of 
which x is a member

18

   
coordination

    rachael ray    nds inspiration in cooking, her family, and 

her dog.   
(i1/1inspire)01   
111:arg01(a1/1and   
111111111111:op11(c1/1cook)01   
11111111111111111111:arg01p)   
111111111111:op21(f1/1family1   
1111111111111111111:arg1)of1(h1/1have)org)role)911   
1111111111111111111111111111111:arg01p1   
1111111111111111111111111111111:arg21(m1/1member)))   
111111111111:op31(d1/1dog1:poss1p))   
111:arg11(p1/1person1:name1(n1/1name1:op11"rachael"1:op21"ray")))

19

   
coordination:    
shared core args

    we invited and then disinvited the students.   

(a1/1and   
111:op11(i1/1invite)01   
11111111111:arg01(w1/1we)   
11111111111:arg11(s1/1student))   
111:op21(d1/1disinvite)01   
11111111111:arg01w   
11111111111:arg11s   
11111111111:time1(t1/1then)))

20

   
coordination:    

shared non-core args

    yesterday we invited and then disinvited the students.   

(a1/1and   
111:op11(i1/1invite)01   
11111111111:arg01(w1/1we)   
11111111111:arg11(s1/1student))   
111:op21(d1/1disinvite)01   
11111111111:arg01w   
11111111111:arg11s   
11111111111:time1(t1/1then))   
111:time1(y1/1yesterday))

21

   
coordination:    
copied predicates

    we invited the students and then the professors.   

(a1/1and   
111:op11(i1/1invite)01   
11111111111:arg01(w1/1we)   
11111111111:arg11(s1/1student))   
111:op21(i21/1invite)01   
11111111111:arg01w   
11111111111:arg11(p1/1professor)   
11111111111:time1(t1/1then)))

22

   
modal concepts

    you can leave.   
you may leave.   
it   s all right for you to leave.   
(p1/1permit)01   
111:arg11(l1/1leave)01   
111111111111:arg01(y1/1you))1

    i can see russia from my house!   

i   m able to see russia from my house!   
(p1/1possible   
111:domain1(s1/1see)01   
11111111111111:arg01(i1/1i)   
11111111111111:arg11(c1/1country1:name1(n1/1name1:op11"russia"))   
11111111111111:location1(h1/1house1:poss1i)))

23

   
   
speech acts
wish)01

:mode1imperative
(question as request)

able to
may
might
can
could
will
would
must
shall
should
likely to
probably

24

permit)01

possible

(future tense is 
omitted from amr)

infer)01

obligate)01

recommend)01

likely

sentence types

25

typeamr treatmentindicative (declarative)(default)imperative (command):mode1imperative1(with you arg if implied subject)interjection:mode1expressiveyes-no question:mode1interrogativewh-questionamr)unknownquotation without speech verb(s1/1say)011:arg01<speaker>1   )vocative(s1/1say)011:arg21<addressee>1   )polite (   please   , etc.):polite1+questions: yes-no

    are you worried?   

(w1/1worry)01   
111:arg01(y1/1you)   
111:mode1interrogative)

26

   
questions: wh
    why worry? (what is the point of worrying?)   

(w1/1worry)01   
111:arg01(y1/1you)   
111:purpose1(a1/1amr)unknown))1

    what   s the problem?   

(p1/1problem   
111:domain1(a1/1amr)unknown))1

think of amr)unknown as 
an in situ question 
pronoun. structurally, the 
amr is the same as a 
declarative sentence.

    how many peppers did peter piper pick?   

(p1/1pick)10   
111:arg01(p21/1person1:name1(n1/1name1:op11"peter"1:op21"piper"))   
111:arg11(p31/1pepper   
1111111111111:quant1(a1/1amr)unknown)))

27

   
   
   
comparison

have-degree-91!
arg1: attribute 
arg2: domain, entity 
characterized by attribute 
arg3: degree itself 
arg4: compared-to 
arg5: consequence, 
result of degree

    the treatment of comparative constructions is 

changing. 

    apples are redder than bananas.   

old way:   
(r1/1red   
111:domain1(a1/1apple)   
111:degree1(m1/1more)   
111:compared)to1(b1/1banana))

new way:   
(r1/1red   
111:arg1)of1(h1/1have)degree)91   
111111111:arg21(a1/1apple)   
111111111:arg31(m1/1more)   
111111111:arg41(b1/1banana)))

28

   
   
   
quanti   cation

    two apples   

(a1/1apple   
111:quant12)1

    a lot of apples   

(a1/1apple   
111:quant1(l1/1lot))1

    all apples are fruit.   

only explicit quanti   ers 
are included in the amr.
    apples are fruit.   

(f1/1fruit   
111:domain1(a1/1apple   
11111111111111:quant1(a1/1all)))

(f1/1fruit   
111:domain1(a1/1apple))

29

   
   
   
   
sets

include-91 -    subset   !
arg1: subset (or member) 
arg2: superset 
arg3: relative size of subset 
compared to superset

    special predicate include-91 for explicitly 

mentioned sets1

    (i ate) 5 of the 12 donuts   

(d1/1donut1:quant15   
111:arg1)of1(i1/1include)91   
111111111111111:arg21(d21/1donut1:quant112)))1

    42% of the donuts   

(d1/1donut   
111:arg1)of1(i1/1include)91   
111111111111111:arg21(d21/1donut)   
111111111111111:arg31(p1/1percentage)entity1:value142)))

30

   
   
rei   cation

be-located-at-91 - 
   rei   cation of :location   !
arg1: entity 
arg2: location

    the man at the store   

(m / man :location (s / store)) 

    what about: the man always at the store? 

    need to    modify    the relation! 
    solution: convert (   reify   ) the relation w/ a special frame 

(m / man    
     :arg1-of (b / be-located-at-91    
                         :arg2 (s / store)   
                         :time (a / always)))

31

   
rei   cation

be-located-at-91 - 
   rei   cation of :location   !
arg1: entity 
arg2: location

    rei   cation also allows a relational predicate to be focused. 
    the man is at the store.   

(b / be-located-at-91    
    :arg1 (m / man)    
    :arg2 (s / store)) 

    i think the man is at the store.   

(t / think-01    
   :arg0 (i / i)    
   :arg1 (b / be-located-at-91    
                  :arg1 (m / man)    
                  :arg2 (s / store)))

32

   
   
rei   cation

be-located-at-91 - 
   rei   cation of :location   !
arg1: entity 
arg2: location

    every role has a designated rei   cation   either a verb 

frame or a special -91 frame. 
    have-purpose-91, have-polarity-91, have-part-91,     
    have-topic-91 concern-02 

    these slides are about semantics.   

(c / concern-02   
    :arg0 (s / slide :mod (t / this))   
    :arg1 (s2 / semantics))
33

   
english is a wily opponent.

    copulas, light verbs 

    prepositions 

    derivational morphology 

    relational nouns 

    coordination & clausal 

connectives 

    modality 

    non-declarative 

sentences 

    questions 

    comparisons 

    quanti   cation 

    subsets 

    rei   cation

34

other phenomena

    many other patterns for speci   c phenomena are 

documented in the amr dictionary. e.g.: 
    we   ll eat like kings     resemble-01 
    (banarescu et al., 2013)     publication-91

35

amr dictionary

36

further amr documentation

    homepage: http://amr.isi.edu/ 
    guidelines: https://github.com/amrisi/amr-

guidelines/blob/master/amr.md 

    editor help pages, especially amr dictionary 
(http://www.isi.edu/~ulf/amr/lib/amr-dict.html) 
    editor release search (rs1query) to check 

existing amrs for a precedent

37

amr data

38

real data

    thus far: mostly made-up examples 

    real sentences tend to be longer, but amred 

using the same principles

39

real data

    we need to borrow 55% of the hammer price until 

we can get planning permission for restoration 
which will allow us to get a mortgage.

40

real data

control structure

    we need to borrow 55% of the hammer price until 

we can get planning permission for restoration 
which will allow us to get a mortgage.

41

real data

subset     include-91

    we need to borrow 55% of the hammer price until 

we can get planning permission for restoration 
which will allow us to get a mortgage.

42

real data

temporal connective

    we need to borrow 55% of the hammer price until 

we can get planning permission for restoration 
which will allow us to get a mortgage.

43

real data

    we need to borrow 55% of the hammer price until 

we can get planning permission for restoration 
which will allow us to get a mortgage.

modal

44

real data

    we need to borrow 55% of the hammer price until 

we can get planning permission for restoration 
which will allow us to get a mortgage.

deverbals     event predicates

45

real data

we need to borrow 55% of the hammer price until we can get planning permission for restoration 
which will allow us to get a mortgage.   
(n / need-01   
      :arg0 (w / we)   
      :arg1 (b / borrow-01   
            :arg0 w   
            :arg1 (p / percentage-entity :value 55   
                  :arg1-of (i / include-91   
                        :arg2 (p2 / price   
                              :mod (h / hammer))))   
            :time (u / until   
                  :op1 (p3 / possible   
                        :domain (g / get-01   
                              :arg0 w   
                              :arg1 (p4 / permit-01   
                                    :arg1 (p5 / plan-01)   
                                    :purpose-of (r / restore-01)   
                                    :arg0-of (a / allow-01   
                                          :arg1 (m / mortgage-01   
                                                :arg0 w))))))))

46

   
real data

we need to borrow 55% of the hammer price until we can get planning permission for restoration 
which will allow us to get a mortgage.   
(n / need-01   
      :arg0 (w / we)   
      :arg1 (b / borrow-01   
            :arg0 w   
            :arg1 (p / percentage-entity :value 55   
                  :arg1-of (i / include-91   
                        :arg2 (p2 / price   
                              :mod (h / hammer))))   
            :time (u / until   
                  :op1 (p3 / possible   
                        :domain (g / get-01   
                              :arg0 w   
                              :arg1 (p4 / permit-01   
                                    :arg1 (p5 / plan-01)   
                                    :purpose-of (r / restore-01)   
                                    :arg0-of (a / allow-01   
                                          :arg1 (m / mortgage-01   
                                                :arg0 w))))))))

47

   
real data

we need to borrow 55% of the hammer price until we can get planning permission for restoration 
which will allow us to get a mortgage.   
(n / need-01   
      :arg0 (w / we)   
      :arg1 (b / borrow-01   
            :arg0 w   
            :arg1 (p / percentage-entity :value 55   
                  :arg1-of (i / include-91   
                        :arg2 (p2 / price   
                              :mod (h / hammer))))   
            :time (u / until   
                  :op1 (p3 / possible   
                        :domain (g / get-01   
                              :arg0 w   
                              :arg1 (p4 / permit-01   
                                    :arg1 (p5 / plan-01)   
                                    :purpose-of (r / restore-01)   
                                    :arg0-of (a / allow-01   
                                          :arg1 (m / mortgage-01   
                                                :arg0 w))))))))

48

   
datasets

amr bank: the little prince!

(novel   english translation)

ldc releases!

(news, discussion forums,    )

+

= 15k amrs    

(with more to come!)

49

datasets: details

1,500 amrs 

et al. 2015. 

cycles 

    amr bank (release 1.4; http://amr.isi.edu/download/amr-bank-v1.4.txt) 
    english translation of le petit prince (the little prince), freely downloadable. 

    amr public release 1.0 (ldc2014t12): largest public release w/ 13,051 amrs 
    deft release 3 (ldc2013e117): evaluation data in flanigan et al. 2014, wang 

    deft release 4 (ldc2014e41): largest release w/ 18,779 amrs total 
    deft release 5 (sep. 2015) will include wiki   cation, (pretty much) no directed 

    small (100-amr) sets of czech and chinese amrs have been annotated. 
    vanderwende et al. (2015) data to appear: several languages, automatically 

    propbank will soon all be converted to amr style (mapping nominalizations to 

converted from logical forms 

verbs, etc.) and re-released.

50

working with amr data

    amrs are stored in a plain text format (in penman 

notation) 

    script for loading them into a python data structure: 

https://github.com/nschneid/amr-hackathon/tree/
master/src 
    also accepts aligned amrs from the isi aligner

51

amr    
vs.    

other formalisms

52

amr strengths

    abstracting away from morphological & syntactic 
variability!

    predicate-argument structures 

    core + non-core roles 
    named entities & values 

    coreference (w/in sentence) 

    modality

53

amr limitations

    no    deep    lexical semantics 

    fruit/berry, buy/sell, kill/die are formally unrelated 

    no deep treatment of quanti   cation & scope 
    (almost) no information structure 
    nothing across sentences in a discourse   yet

54

design decisions

    amr annotations are not tied to individual words 

or any syntactic derivation 

    practicality for human annotators is primary 

    amr makes no compromises for (current) 

algorithms 

    single structure rather than many layers 
    extensive documentation and tool support

55

detailed comparison

    see    other formalisms    slides

56

(cid:38)(cid:82)(cid:80)(cid:83)(cid:68)(cid:85)(cid:76)(cid:86)(cid:82)(cid:81)(cid:3)(cid:16)(cid:3)(cid:54)(cid:72)(cid:80)(cid:68)(cid:81)(cid:87)(cid:76)(cid:70)(cid:3)(cid:53)(cid:82)(cid:79)(cid:72)(cid:86)
(cid:36)(cid:48)(cid:53)(cid:29)(cid:3)(cid:26)(cid:19)(cid:14)(cid:3)(cid:81)(cid:82)(cid:81)(cid:16)(cid:70)(cid:82)(cid:85)(cid:72)(cid:3)(cid:85)(cid:82)(cid:79)(cid:72)(cid:86)(cid:15)(cid:3)(cid:80)(cid:68)(cid:81)(cid:92)(cid:3)(cid:89)(cid:72)(cid:85)(cid:69)(cid:16)(cid:86)(cid:72)(cid:81)(cid:86)(cid:72)(cid:3)(cid:86)(cid:83)(cid:72)(cid:70)(cid:76)(cid:73)(cid:76)(cid:70)(cid:3)(cid:85)(cid:82)(cid:79)(cid:72)(cid:86)(cid:3)
(cid:11)(cid:88)(cid:83)(cid:3)(cid:87)(cid:82)(cid:3)(cid:24)(cid:3)(cid:68)(cid:85)(cid:74)(cid:86)(cid:18)(cid:85)(cid:82)(cid:79)(cid:72)(cid:86)(cid:72)(cid:87)(cid:15)(cid:3)(cid:80)(cid:82)(cid:85)(cid:72)(cid:3)(cid:87)(cid:75)(cid:68)(cid:81)(cid:3)(cid:20)(cid:19)(cid:15)(cid:19)(cid:19)(cid:19)(cid:3)(cid:85)(cid:82)(cid:79)(cid:72)(cid:86)(cid:72)(cid:87)(cid:86)(cid:12)
(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)
(cid:41)(cid:85)(cid:68)(cid:80)(cid:72)(cid:49)(cid:72)(cid:87)(cid:29)(cid:3)(cid:79)(cid:68)(cid:85)(cid:74)(cid:72)(cid:3)(cid:76)(cid:81)(cid:89)(cid:72)(cid:81)(cid:87)(cid:82)(cid:85)(cid:92)(cid:3)(cid:82)(cid:73)(cid:3)(cid:73)(cid:85)(cid:68)(cid:80)(cid:72)(cid:16)(cid:86)(cid:83)(cid:72)(cid:70)(cid:76)(cid:73)(cid:76)(cid:70)(cid:3)(cid:85)(cid:82)(cid:79)(cid:72)(cid:86)
(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:57)(cid:72)(cid:85)(cid:69)(cid:49)(cid:72)(cid:87)(cid:29)(cid:3)(cid:76)(cid:81)(cid:89)(cid:72)(cid:81)(cid:87)(cid:82)(cid:85)(cid:92)(cid:3)(cid:82)(cid:73)(cid:3)(cid:87)(cid:75)(cid:72)(cid:80)(cid:68)(cid:87)(cid:76)(cid:70)(cid:3)(cid:85)(cid:82)(cid:79)(cid:72)(cid:86)
(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:42)(cid:85)(cid:82)(cid:81)(cid:76)(cid:81)(cid:74)(cid:72)(cid:81)(cid:3)(cid:48)(cid:72)(cid:68)(cid:81)(cid:76)(cid:81)(cid:74)(cid:3)(cid:37)(cid:68)(cid:81)(cid:78)(cid:29)(cid:3)(cid:57)(cid:72)(cid:85)(cid:69)(cid:49)(cid:72)(cid:87)(cid:3)(cid:76)(cid:81)(cid:89)(cid:72)(cid:81)(cid:87)(cid:82)(cid:85)(cid:92)

(cid:48)(cid:82)(cid:86)(cid:87)(cid:3)(cid:82)(cid:87)(cid:75)(cid:72)(cid:85)(cid:86)(cid:29)(cid:3)(cid:86)(cid:80)(cid:68)(cid:79)(cid:79)(cid:3)(cid:76)(cid:81)(cid:89)(cid:72)(cid:81)(cid:87)(cid:82)(cid:85)(cid:92)(cid:3)(cid:82)(cid:73)(cid:3)(cid:85)(cid:82)(cid:79)(cid:72)(cid:86)(cid:3)(cid:11)(cid:68)(cid:74)(cid:72)(cid:81)(cid:87)(cid:15)(cid:3)(cid:87)(cid:75)(cid:72)(cid:80)(cid:72)(cid:15)(cid:3)(cid:72)(cid:87)(cid:70)(cid:17)(cid:12)
(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)

(cid:38)(cid:82)(cid:80)(cid:83)(cid:68)(cid:85)(cid:76)(cid:86)(cid:82)(cid:81)(cid:3)(cid:16)(cid:3)(cid:54)(cid:72)(cid:81)(cid:86)(cid:72)(cid:3)(cid:47)(cid:72)(cid:91)(cid:76)(cid:70)(cid:82)(cid:81)

(cid:42)(cid:85)(cid:82)(cid:81)(cid:76)(cid:81)(cid:74)(cid:72)(cid:81)(cid:3)(cid:48)(cid:72)(cid:68)(cid:81)(cid:76)(cid:81)(cid:74)(cid:3)(cid:37)(cid:68)(cid:81)(cid:78)(cid:29)(cid:3)(cid:11)(cid:68)(cid:88)(cid:87)(cid:82)(cid:80)(cid:68)(cid:87)(cid:76)(cid:70)(cid:12)(cid:3)(cid:58)(cid:82)(cid:85)(cid:71)(cid:49)(cid:72)(cid:87)(cid:3)(cid:86)(cid:92)(cid:81)(cid:86)(cid:72)(cid:87)(cid:86)
(cid:41)(cid:85)(cid:68)(cid:80)(cid:72)(cid:49)(cid:72)(cid:87)(cid:18)(cid:56)(cid:38)(cid:38)(cid:36)(cid:29)(cid:3)(cid:48)(cid:68)(cid:85)(cid:78)(cid:3)(cid:86)(cid:72)(cid:81)(cid:86)(cid:72)(cid:86)(cid:3)(cid:69)(cid:92)(cid:3)(cid:73)(cid:85)(cid:68)(cid:80)(cid:72)(cid:18)(cid:86)(cid:70)(cid:85)(cid:76)(cid:83)(cid:87)(cid:15)(cid:3)(cid:81)(cid:82)(cid:87)(cid:3)(cid:79)(cid:72)(cid:80)(cid:80)(cid:68)
(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)
(cid:36)(cid:48)(cid:53)(cid:3)(cid:18)(cid:51)(cid:85)(cid:82)(cid:83)(cid:37)(cid:68)(cid:81)(cid:78)(cid:29)(cid:3)(cid:70)(cid:82)(cid:68)(cid:85)(cid:86)(cid:72)(cid:16)(cid:74)(cid:85)(cid:68)(cid:76)(cid:81)(cid:72)(cid:71)(cid:3)(cid:86)(cid:72)(cid:81)(cid:86)(cid:72)(cid:86)(cid:3)(cid:11)(cid:74)(cid:72)(cid:87)(cid:3)(cid:75)(cid:76)(cid:74)(cid:75)(cid:3)(cid:44)(cid:55)(cid:36)(cid:12)
(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:51)(cid:85)(cid:68)(cid:74)(cid:88)(cid:72)(cid:3)(cid:39)(cid:72)(cid:83)(cid:72)(cid:81)(cid:71)(cid:72)(cid:81)(cid:70)(cid:92)(cid:3)(cid:55)(cid:37)(cid:29)(cid:3)(cid:89)(cid:68)(cid:79)(cid:72)(cid:81)(cid:70)(cid:92)(cid:3)(cid:79)(cid:72)(cid:91)(cid:76)(cid:70)(cid:82)(cid:81)(cid:3)(cid:85)(cid:82)(cid:79)(cid:72)(cid:86)(cid:72)(cid:87)(cid:86)

(cid:48)(cid:82)(cid:86)(cid:87)(cid:3)(cid:82)(cid:87)(cid:75)(cid:72)(cid:85)(cid:86)(cid:29)(cid:3)(cid:88)(cid:81)(cid:71)(cid:76)(cid:86)(cid:68)(cid:80)(cid:69)(cid:76)(cid:74)(cid:88)(cid:68)(cid:87)(cid:72)(cid:71)(cid:3)(cid:70)(cid:82)(cid:81)(cid:70)(cid:72)(cid:83)(cid:87)(cid:86)(cid:3)(cid:68)(cid:86)(cid:3)(cid:83)(cid:85)(cid:72)(cid:71)(cid:76)(cid:70)(cid:68)(cid:87)(cid:72)(cid:86)
(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)

(cid:38)(cid:82)(cid:80)(cid:83)(cid:68)(cid:85)(cid:76)(cid:86)(cid:82)(cid:81)(cid:3)(cid:16)(cid:3)(cid:40)(cid:81)(cid:87)(cid:76)(cid:87)(cid:76)(cid:72)(cid:86)

(cid:36)(cid:48)(cid:53)(cid:29)(cid:3)(cid:53)(cid:76)(cid:70)(cid:75)(cid:3)(cid:81)(cid:68)(cid:80)(cid:72)(cid:71)(cid:3)(cid:72)(cid:81)(cid:87)(cid:76)(cid:87)(cid:92)(cid:3)(cid:82)(cid:81)(cid:87)(cid:82)(cid:79)(cid:82)(cid:74)(cid:92)(cid:3)(cid:11)(cid:20)(cid:19)(cid:19)(cid:14)(cid:3)(cid:87)(cid:92)(cid:83)(cid:72)(cid:86)(cid:12)(cid:15)(cid:3)(cid:90)(cid:76)(cid:78)(cid:76)(cid:73)(cid:76)(cid:70)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)

(cid:42)(cid:36)(cid:47)(cid:40)(cid:18)(cid:50)(cid:81)(cid:87)(cid:82)(cid:81)(cid:82)(cid:87)(cid:72)(cid:86)(cid:3)(cid:36)(cid:81)(cid:81)(cid:82)(cid:87)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:86)(cid:29)(cid:3)(cid:21)(cid:28)(cid:3)(cid:87)(cid:92)(cid:83)(cid:72)(cid:86)(cid:15)(cid:3)(cid:25)(cid:23)(cid:3)(cid:86)(cid:88)(cid:69)(cid:87)(cid:92)(cid:83)(cid:72)(cid:86)
(cid:3)(cid:3)(cid:3)(cid:3)(cid:42)(cid:85)(cid:82)(cid:81)(cid:76)(cid:81)(cid:74)(cid:72)(cid:81)(cid:3)(cid:48)(cid:72)(cid:68)(cid:81)(cid:76)(cid:81)(cid:74)(cid:3)(cid:37)(cid:68)(cid:81)(cid:78)(cid:29)(cid:3)(cid:26)(cid:3)(cid:49)(cid:40)(cid:3)(cid:87)(cid:92)(cid:83)(cid:72)(cid:86)
(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:39)(cid:82)(cid:80)(cid:68)(cid:76)(cid:81)(cid:16)(cid:86)(cid:83)(cid:72)(cid:70)(cid:76)(cid:73)(cid:76)(cid:70)(cid:3)(cid:11)(cid:36)(cid:38)(cid:40)(cid:18)(cid:56)(cid:48)(cid:47)(cid:54)(cid:18)(cid:72)(cid:87)(cid:70)(cid:17)(cid:12)(cid:29)(cid:3)(cid:85)(cid:76)(cid:70)(cid:75)(cid:30)(cid:3)(cid:81)(cid:82)(cid:87)(cid:3)(cid:68)(cid:79)(cid:79)(cid:3)(cid:72)(cid:81)(cid:87)(cid:76)(cid:87)(cid:76)(cid:72)(cid:86)

(cid:50)(cid:87)(cid:75)(cid:72)(cid:85)(cid:86)(cid:29)(cid:3)(cid:81)(cid:82)(cid:3)(cid:72)(cid:81)(cid:87)(cid:76)(cid:87)(cid:92)(cid:3)(cid:87)(cid:92)(cid:83)(cid:76)(cid:81)(cid:74)
(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)

(cid:38)(cid:82)(cid:80)(cid:83)(cid:68)(cid:85)(cid:76)(cid:86)(cid:82)(cid:81)(cid:3)(cid:16)(cid:3)(cid:36)(cid:79)(cid:76)(cid:74)(cid:81)(cid:80)(cid:72)(cid:81)(cid:87)(cid:3)(cid:90)(cid:76)(cid:87)(cid:75)(cid:3)(cid:87)(cid:72)(cid:91)(cid:87)

(cid:39)(cid:72)(cid:72)(cid:83)(cid:69)(cid:68)(cid:81)(cid:78)(cid:30)(cid:3)(cid:42)(cid:85)(cid:82)(cid:81)(cid:76)(cid:81)(cid:74)(cid:72)(cid:81)(cid:3)(cid:48)(cid:72)(cid:68)(cid:81)(cid:76)(cid:81)(cid:74)(cid:3)(cid:37)(cid:68)(cid:81)(cid:78)(cid:29)(cid:3)(cid:54)(cid:72)(cid:80)(cid:68)(cid:81)(cid:87)(cid:76)(cid:70)(cid:86)(cid:3)(cid:79)(cid:76)(cid:81)(cid:78)(cid:72)(cid:71)(cid:3)(cid:88)(cid:83)(cid:3)(cid:87)(cid:82)(cid:3)
(cid:68)(cid:3)(cid:87)(cid:75)(cid:72)(cid:82)(cid:85)(cid:92)(cid:3)(cid:82)(cid:73)(cid:3)(cid:76)(cid:87)(cid:86)(cid:3)(cid:71)(cid:72)(cid:85)(cid:76)(cid:89)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:73)(cid:85)(cid:82)(cid:80)(cid:3)(cid:86)(cid:92)(cid:81)(cid:87)(cid:68)(cid:91)(cid:3)(cid:11)(cid:43)(cid:51)(cid:54)(cid:42)(cid:30)(cid:3)(cid:38)(cid:38)(cid:42)(cid:12)

(cid:51)(cid:85)(cid:82)(cid:83)(cid:37)(cid:68)(cid:81)(cid:78)(cid:15)(cid:3)(cid:54)(cid:72)(cid:80)(cid:68)(cid:81)(cid:87)(cid:76)(cid:70)(cid:3)(cid:55)(cid:85)(cid:72)(cid:72)(cid:69)(cid:68)(cid:81)(cid:78)(cid:29)(cid:3)(cid:74)(cid:85)(cid:82)(cid:88)(cid:81)(cid:71)(cid:72)(cid:71)(cid:3)(cid:76)(cid:81)(cid:3)(cid:51)(cid:55)(cid:37)
(cid:48)(cid:82)(cid:86)(cid:87)(cid:3)(cid:82)(cid:87)(cid:75)(cid:72)(cid:85)(cid:86)(cid:29)(cid:3)(cid:54)(cid:82)(cid:80)(cid:72)(cid:3)(cid:79)(cid:76)(cid:81)(cid:78)(cid:3)(cid:87)(cid:82)(cid:3)(cid:90)(cid:82)(cid:85)(cid:71)(cid:86)(cid:3)(cid:76)(cid:81)(cid:3)(cid:86)(cid:72)(cid:81)(cid:87)(cid:72)(cid:81)(cid:70)(cid:72)

(cid:36)(cid:48)(cid:53)(cid:29)(cid:3)(cid:49)(cid:82)(cid:3)(cid:68)(cid:79)(cid:76)(cid:74)(cid:81)(cid:80)(cid:72)(cid:81)(cid:87)(cid:3)(cid:87)(cid:82)(cid:3)(cid:87)(cid:72)(cid:91)(cid:87)(cid:3)(cid:11)(cid:83)(cid:79)(cid:68)(cid:81)(cid:3)(cid:87)(cid:82)(cid:3)(cid:85)(cid:72)(cid:79)(cid:72)(cid:68)(cid:86)(cid:72)(cid:3)(cid:68)(cid:3)(cid:73)(cid:72)(cid:90)(cid:3)(cid:68)(cid:79)(cid:76)(cid:74)(cid:81)(cid:80)(cid:72)(cid:81)(cid:87)(cid:86)(cid:12)
(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)

(cid:38)(cid:82)(cid:80)(cid:83)(cid:68)(cid:85)(cid:76)(cid:86)(cid:82)(cid:81)(cid:3)(cid:16)(cid:3)(cid:47)(cid:82)(cid:74)(cid:76)(cid:70)(cid:18)(cid:54)(cid:70)(cid:82)(cid:83)(cid:72)(cid:18)(cid:40)(cid:81)(cid:87)(cid:68)(cid:76)(cid:79)(cid:80)(cid:72)(cid:81)(cid:87)(cid:86)

(cid:39)(cid:72)(cid:72)(cid:83)(cid:69)(cid:68)(cid:81)(cid:78)(cid:30)(cid:3)(cid:42)(cid:85)(cid:82)(cid:81)(cid:76)(cid:81)(cid:74)(cid:72)(cid:81)(cid:3)(cid:48)(cid:72)(cid:68)(cid:81)(cid:76)(cid:81)(cid:74)(cid:3)(cid:37)(cid:68)(cid:81)(cid:78)(cid:29)(cid:3)(cid:54)(cid:72)(cid:80)(cid:68)(cid:81)(cid:87)(cid:76)(cid:70)(cid:86)(cid:3)(cid:74)(cid:85)(cid:82)(cid:88)(cid:81)(cid:71)(cid:86)(cid:3)
(cid:82)(cid:88)(cid:87)(cid:3)(cid:76)(cid:81)(cid:3)(cid:79)(cid:82)(cid:74)(cid:76)(cid:70)(cid:68)(cid:79)(cid:3)(cid:73)(cid:82)(cid:85)(cid:80)(cid:68)(cid:79)(cid:76)(cid:86)(cid:80)(cid:86)(cid:3)(cid:11)(cid:39)(cid:53)(cid:55)(cid:3)(cid:68)(cid:81)(cid:71)(cid:3)(cid:48)(cid:53)(cid:54)(cid:15)(cid:3)(cid:85)(cid:72)(cid:86)(cid:83)(cid:72)(cid:70)(cid:87)(cid:76)(cid:89)(cid:72)(cid:79)(cid:92)(cid:12)

(cid:36)(cid:48)(cid:53)(cid:3)(cid:72)(cid:81)(cid:87)(cid:68)(cid:76)(cid:79)(cid:80)(cid:72)(cid:81)(cid:87)(cid:29)(cid:3)(cid:79)(cid:76)(cid:81)(cid:78)(cid:68)(cid:74)(cid:72)(cid:3)(cid:69)(cid:72)(cid:87)(cid:90)(cid:72)(cid:72)(cid:81)(cid:3)(cid:76)(cid:87)(cid:86)(cid:3)(cid:79)(cid:72)(cid:91)(cid:76)(cid:70)(cid:82)(cid:81)(cid:3)(cid:68)(cid:81)(cid:71)(cid:3)(cid:57)(cid:72)(cid:85)(cid:69)(cid:49)(cid:72)(cid:87)(cid:3)
(cid:80)(cid:68)(cid:92)(cid:3)(cid:68)(cid:79)(cid:79)(cid:82)(cid:90)(cid:3)(cid:85)(cid:76)(cid:70)(cid:75)(cid:3)(cid:71)(cid:72)(cid:70)(cid:82)(cid:80)(cid:83)(cid:82)(cid:86)(cid:76)(cid:87)(cid:76)(cid:82)(cid:81)

(cid:36)(cid:48)(cid:53)(cid:3)(cid:86)(cid:70)(cid:82)(cid:83)(cid:72)(cid:29)(cid:3)(cid:49)(cid:82)(cid:3)(cid:86)(cid:70)(cid:82)(cid:83)(cid:72)(cid:3)(cid:82)(cid:73)(cid:3)(cid:84)(cid:88)(cid:68)(cid:81)(cid:87)(cid:76)(cid:73)(cid:76)(cid:70)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)

(cid:38)(cid:82)(cid:80)(cid:83)(cid:68)(cid:85)(cid:76)(cid:86)(cid:82)(cid:81)(cid:3)(cid:16)(cid:3)(cid:54)(cid:76)(cid:93)(cid:72)(cid:3)(cid:68)(cid:81)(cid:71)(cid:3)(cid:52)(cid:88)(cid:68)(cid:79)(cid:76)(cid:87)(cid:92)

(cid:36)(cid:48)(cid:53)(cid:29)(cid:3)(cid:20)(cid:27)(cid:15)(cid:26)(cid:26)(cid:28)(cid:3)(cid:86)(cid:72)(cid:81)(cid:87)(cid:72)(cid:81)(cid:70)(cid:72)(cid:86)(cid:15)(cid:3)(cid:74)(cid:82)(cid:72)(cid:86)(cid:3)(cid:69)(cid:72)(cid:92)(cid:82)(cid:81)(cid:71)(cid:3)(cid:81)(cid:72)(cid:90)(cid:86)(cid:90)(cid:76)(cid:85)(cid:72)(cid:15)(cid:3)(cid:73)(cid:88)(cid:79)(cid:79)(cid:92)(cid:3)(cid:80)(cid:68)(cid:81)(cid:88)(cid:68)(cid:79)
(cid:51)(cid:85)(cid:68)(cid:74)(cid:88)(cid:72)(cid:3)(cid:39)(cid:72)(cid:83)(cid:72)(cid:81)(cid:71)(cid:72)(cid:81)(cid:70)(cid:92)(cid:3)(cid:55)(cid:37)(cid:29)(cid:3)(cid:58)(cid:54)(cid:45)(cid:3)(cid:76)(cid:81)(cid:3)(cid:38)(cid:93)(cid:72)(cid:70)(cid:75)(cid:3)(cid:68)(cid:81)(cid:71)(cid:3)(cid:40)(cid:81)(cid:74)(cid:79)(cid:76)(cid:86)(cid:75)(cid:15)(cid:3)(cid:80)(cid:68)(cid:81)(cid:88)(cid:68)(cid:79)

(cid:39)(cid:72)(cid:72)(cid:83)(cid:69)(cid:68)(cid:81)(cid:78)(cid:30)(cid:3)(cid:42)(cid:85)(cid:82)(cid:81)(cid:76)(cid:81)(cid:74)(cid:72)(cid:81)(cid:3)(cid:48)(cid:72)(cid:68)(cid:81)(cid:76)(cid:81)(cid:74)(cid:3)(cid:37)(cid:68)(cid:81)(cid:78)(cid:29)(cid:3)(cid:47)(cid:68)(cid:85)(cid:74)(cid:72)(cid:30)(cid:3)(cid:68)(cid:88)(cid:87)(cid:82)(cid:80)(cid:68)(cid:87)(cid:76)(cid:70)(cid:3)
(cid:83)(cid:68)(cid:85)(cid:86)(cid:72)(cid:86)(cid:3)(cid:90)(cid:76)(cid:87)(cid:75)(cid:3)(cid:75)(cid:88)(cid:80)(cid:68)(cid:81)(cid:3)(cid:70)(cid:82)(cid:85)(cid:85)(cid:72)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)(cid:18)(cid:73)(cid:72)(cid:72)(cid:71)(cid:69)(cid:68)(cid:70)(cid:78)(cid:17)
(cid:56)(cid:38)(cid:38)(cid:36)(cid:29)(cid:3)(cid:73)(cid:88)(cid:79)(cid:79)(cid:92)(cid:3)(cid:80)(cid:68)(cid:81)(cid:88)(cid:68)(cid:79)(cid:15)(cid:3)(cid:20)(cid:25)(cid:19)(cid:78)(cid:3)(cid:87)(cid:82)(cid:78)(cid:72)(cid:81)(cid:86)(cid:3)

(cid:53)(cid:76)(cid:70)(cid:75)(cid:3)(cid:86)(cid:72)(cid:80)(cid:68)(cid:81)(cid:87)(cid:76)(cid:70)(cid:3)(cid:86)(cid:92)(cid:86)(cid:87)(cid:72)(cid:80)(cid:86)(cid:3)(cid:90)(cid:76)(cid:87)(cid:75)(cid:3)(cid:79)(cid:76)(cid:87)(cid:87)(cid:79)(cid:72)(cid:3)(cid:68)(cid:73)(cid:73)(cid:76)(cid:79)(cid:76)(cid:68)(cid:87)(cid:72)(cid:71)(cid:3)(cid:71)(cid:68)(cid:87)(cid:68)(cid:29)(cid:3)(cid:55)(cid:48)(cid:53)(cid:15)(cid:3)(cid:47)(cid:38)(cid:54)(cid:15)(cid:3)
(cid:17)(cid:17)(cid:17)(cid:3)

part%ii:%

algorithms%and%applica4ons%

speaker:%je   rey%flanigan%

1%

intro%

       you%know%how%to%annotate%amrs%
       now,%we%want%to%use%them!%
       to%use%amrs,%we%need%automa4c%parsers&
       but%   rst:%alignment&
       evalua0on%(interiannotator%agreement,%parser%

output)%
       and%also:%

       graph&grammars&(like%id18s,%but%for%graphs)%
       applica0ons&

2%

alignment%

parsing%

kevin

knight

likes

to semantically

parse

sentences

  

like-01

semantics

parse-00

sentence

person

name

name

op1

op2

kevin

knight

root

root

like-01

arg0

arg0

person

name

arg1

parse-00

mod

arg1

semantics

sentence

name

op1

op2

kevin

knight

evalua4on%

graph%grammars%

applica4ons%

a

instance

d

instance

arg0

arg1

want-01

b

arg0

c
instance

instance

arg0

arg1

want-01

e

instance

f
instance

boy

go-01

boy

book

analysis

interlingua

amr

cross-lingual

parser

generation

source

target

3%

outline%

       alignment%
       parsing%
       evalua4on%
       graph%grammars%and%automata%
       applica4ons%

4%

alignment:%mo4va4on%

       amr%annota4on%has%no%explicit%alignment%to%

sentence%

       training%data%has%whole%sentence%   %amr%graph%pairs%
       for%generaliza4on%performance,%need%   neigrained%
correspondence%between%words%and%pieces%of%amr%

       alignments%provide%this%correspondence%

need%alignments%to%train%parsers,%etc%

5%

alignment%

the tour was a surprise offer made by north korea in november. 

(t / thing 
    :arg0-of (s / surprise-01) 
    :arg1-of (o / offer-01 
        :arg0 (c / country 
            :name (n / name 
                :op1    north    
                :op2    korea   )) 
        :time (d / date-entity 
                :month 11)) 
    :domain (t2 / tour-01)) 

       align%concepts%with%words%
       can%also%align%edges%with%func4on%words%%

6%

alignment%

       alignment%
       mo4va4on%
       jamr   s&rule:based&aligner&
       isi%em%aligner%

       parsing%
       evalua4on%
       graph%grammars%and%automata%
       applica4ons%

7%

jamr%aligner%(flanigan%et%al,%2014)%

       aligns%graph%fragments%to%spans%of%words%(edges%not%

in%fragments%are%unaligned)%

       uses%a%set%of%handcra]ed%rules%
       uses%lemma4zer,%string%edit%distance%to%match%

concepts%with%words%

       rules%for:%named%en44es,%date%en44es,%special%
concepts,%nega4on,%degrees,%etc%(15%total%rules)%

8%

jamr%aligner%

for%each%rule%

       greedily%align%concepts%in%a%depth%   rst%traversal%of%the%

amr%graph%

       rules%are%applied%in%a%speci   ed%order%

9%

jamr%aligner%

iaea accepted north korea    s proposal in november. 

(a / accept-01 
    :arg0 (o / organization 
        :arg0 (n / name 
            :op1    iaea   )) 
    :arg1 (t2 / thing 
        :arg1-of (p / propose-01 
            :arg0 (c / country 
                :name (n2 / name 
                    :op1    north    
                    :op2    korea   )))) 
    :time (d / date-entity 
            :month 11)) 

10%

jamr%aligner%

rule%1)%%date%en4ty%

iaea accepted north korea    s proposal in november. 

(a / accept-01 
    :arg0 (o / organization 
        :arg0 (n / name 
            :op1    iaea   )) 
    :arg1 (t2 / thing 
        :arg1-of (p / propose-01 
            :arg0 (c / country 
                :name (n2 / name 
                    :op1    north    
                    :op2    korea   )))) 
    :time (d / date-entity 
            :month 11)) 

11%

jamr%aligner%

rule%3)%%named%en4ty%

iaea accepted north korea    s proposal in november. 

(a / accept-01 
    :arg0 (o / organization 
        :arg0 (n / name 
            :op1    iaea   )) 
    :arg1 (t2 / thing 
        :arg1-of (p / propose-01 
            :arg0 (c / country 
                :name (n2 / name 
                    :op1    north    
                    :op2    korea   )))) 
    :time (d / date-entity 
            :month 11)) 

12%

jamr%aligner%

rule%5)%%single%concept%(use%lemma)%

iaea accepted north korea    s proposal in november. 

(a / accept-01 
    :arg0 (o / organization 
        :arg0 (n / name 
            :op1    iaea   )) 
    :arg1 (t2 / thing 
        :arg1-of (p / propose-01 
            :arg0 (c / country 
                :name (n2 / name 
                    :op1    north    
                    :op2    korea   )))) 
    :time (d / date-entity 
            :month 11)) 

jamr%aligner%

rule%6)%%fuzzy%single%concept%(longest%string%pre   x%>%4)%

iaea accepted north korea    s proposal in november. 

(a / accept-01 
    :arg0 (o / organization 
        :arg0 (n / name 
            :op1    iaea   )) 
    :arg1 (t2 / thing 
        :arg1-of (p / propose-01 
            :arg0 (c / country 
                :name (n2 / name 
                    :op1    north    
                    :op2    korea   )))) 
    :time (d / date-entity 
            :month 11)) 

jamr%aligner%

rule%10)%personiof/thingiof%

iaea accepted north korea    s proposal in november. 

(a / accept-01 
    :arg0 (o / organization 
        :arg0 (n / name 
            :op1    iaea   )) 
    :arg1 (t2 / thing 
        :arg1-of (p / propose-01 
            :arg0 (c / country 
                :name (n2 / name 
                    :op1    north    
                    :op2    korea   )))) 
    :time (d / date-entity 
            :month 11)) 

15%

jamr%aligner%

iaea accepted north korea    s proposal in november. 

(a / accept-01 
    :arg0 (o / organization 
        :arg0 (n / name 
            :op1    iaea   )) 
    :arg1 (t2 / thing 
        :arg1-of (p / propose-01 
            :arg0 (c / country 
                :name (n2 / name 
                    :op1    north    
                    :op2    korea   )))) 
    :time (d / date-entity 
            :month 11)) 

16%

jamr%aligner%

evaluate%on%200%handialigned%sentences:%
f1:%90% %
extracted%concept%table%

%precision:%92% %

%recall:%89%%%

8       critical => (critical) 
2       critical => (criticize-01) 
1       critically => (critical) 
1       criticised => (criticize-01) 
14      criticism => (criticize-01) 
30      criticized => (criticize-01) 
1       critics => (critic) 
4       critics => (person :arg0-of (criticize-01)) 
5       crop => (crop) 
5       crops => (crop) 
3       cross => (cross) 
15      cross => (cross-02) 
3       cross => (cross-border) 
2       cross => (cross-strait) 
1       crossed => (cross-00) 
2       crossing => (cross-02) 

17%

isi%aligner%(pourdamghani%et%al,%2014)%

       aligns%each%concept%or%edge%to%at%most%one%word%
       learns%from%data%using%em%
       inspired%by%mt%alignment%models%
       basic%idea:%convert%graph%to%linear%string,%use%word%

alignment%model%

18%

isi%aligner%

iaea accepted north korea    s proposal in november. 

(a / accept-01 
    :arg0 (o / organization 
        :name (n / name 
            :op1    iaea   )) 
    :arg1 (t2 / thing 
        :arg1-of (p / propose-01 
            :arg0 (c / country 
                :name (n2 / name 
                    :op1    north    
                    :op2    korea   )))) 
    :time (d / date-entity 
            :month 11)) 

19%

isi%aligner%

iaea accepted north korea    s proposal in november. 

accept-01 :arg0 organization :name name :op1 
   iaea    :arg1 thing :arg1-of propose-01 :arg0 
country :name name :op1    north    :op2    korea    :time 
date-entity :month 11 

linearize%the%amr%using%a%

depthi   rst%traversal%

20%

isi%aligner%

iaea accepted north korea proposal in november 

accept organization name iaea thing propose-01 
country name north korea :time date-entity 11 

english:%remove%stop%words%

amr:%remove%special%concepts,%rela4ons%that%don   t%

usually%align,%quotes,%and%sense%tags%

21%

isi%aligner%

iaea      acce     nort     kore    prop      in      nove 

acce orga name iaea thin prop coun name nort kore :time date 11 

both:%lowercase%and%stem%to%the%   rst%four%legers%

isi%aligner%

iaea      acce     nort     kore    prop      in      nove 

acce orga name iaea thin prop coun name nort kore :time date 11 

run%ibm%alignment%models%with%a%symmetriza4on%

constraint,%and%project%to%amr%graph%

%

alignments&are&1:to:many&

23%

alignment:%summary%

alignment%type%

jamr&aligner&
graph%fragment%to%span%
of%words%
no%
no%
hgps://github.com/
j   anigan/jamr%

aligns%edges%
learned%from%data%
gold%standard%
available%
f1%score%on%concepts*% 90%%(spans)%
f1%score%on%rela4ons*% na%

isi&aligner&
each%concept%or%edge%
to%at%most%one%word%
yes%
yes%
hgp://amr.isi.edu/
research.html%
89.8%%
49.3%%

*jamr%and%isi%not%directly%comparable,%since%di   erent%gold%standard%

in%general,%the%desired%type%of%alignment%

will%depend%on%the%applica4on%

24%

parsing%

       alignment%
       parsing&

       graphibased%parsing%

       structured%predic4on%
       concept%iden4   ca4on%
       rela4on%iden4   ca4on%

       experiments%

       transi4onibased%parsing%
       parsing%using%syntaxibased%mt%%

       evalua4on%
       graph%grammars%and%automata%
       applica4ons%

       maximum%spanning%connected%graph%algorithm%(mscg)%
       graph%determinism%constraints%using%lagrangian%relaxa4on%

25%

parsing%

kevin knight likes to semantically parse sentences. 

(l / like-01 
    :arg0 (p / person 
        :name (n / name 
            :op1    kevin    
            :op2    knight   )) 
    :arg1 (p2 / parse-00 
        :arg0 p 
        :arg1 (s / sentence) 
        :mod (s2 / semantics))) 

26%

jamr%overview%(flanigan%et%al,%2014)%

input%

kevin

knight

likes

to semantically

parse

sentences

  

like-01

semantics

parse-00

sentence

person

name

name

op1

op2

kevin

knight

root

root

like-01

arg0

arg0

person

name

arg1

parse-00

mod

arg1

semantics

sentence

name

op1

op2

kevin

knight

27%

jamr%overview%

input%

kevin

knight

likes

to semantically

parse

sentences

concept%id%

rela4on%id%

  

like-01

semantics

parse-00

sentence

person

name

name

op1

op2

kevin

knight

root

root

like-01

arg0

arg0

person

name

arg1

parse-00

mod

arg1

semantics

sentence

name

op1

op2

kevin

knight

28%

jamr%overview%

input%

kevin

knight

likes

to semantically

parse

sentences

concept%id%

rela4on%id%

  

like-01

semantics

parse-00

sentence

person

name

name

op1

op2

kevin

knight

root

root

like-01

arg0

arg0

person

name

arg1

parse-00

mod

arg1

semantics

sentence

name

op1

op2

kevin

knight

29%

concept%iden4   ca4on%

kevin

knight

likes

to semantically

parse

sentences

30%

concept%iden4   ca4on%

kevin

knight

likes

to semantically
  

parse

sentences

like-01

semantics

parse-00

sentence

person

name

name

op1

op2

kevin

knight

31%

kevin

knight

  
person
name

  

person
name

name
op1

name
op1

kevin

knight

person

name

name

op1

op2

kevin

knight

concept%iden4   ca4on%
parse

to semantically
  

  

likes
  

  

sentences

  

like-01

like-02

semantics

parse-00

sentence

thing

arg1

parse-00

extracted%concept%table%
7    likes => like-01 
1    likes => like-02 
2    parse => parse-00 
1    parse => (thing :arg1-of (parse00) 
1    semantically => semantics 
2    sentences => sentence 

32%

kevin

knight

  
person
name

  

person
name

name
op1

name
op1

kevin

knight

person

name

name

op1

op2

kevin

knight

concept%iden4   ca4on%
parse

semantically

likes
  

to
  

  

  

sentences

  

like-01

like-02

semantics

parse-00

sentence

thing

arg1

parse-00

33%

concept%iden4   ca4on%
parse

to semantically
  

  
.2%

semantics

sentences

  
.1%

sentence

likes
  
like-01
.5%

like-02
.4%

  
.1%

parse-00

thing

i.3%
arg1

parse-00

local%score%=%how%much%the%model%
wants%to%include%this%fragment%
="model_weights"b"local_features"

kevin

knight

  
person
.5%
name

  

person
.7%
name

name
op1

name
op1

kevin

knight

person

name

1.8%

name

op1

op2

kevin

knight

zerothiorder%model%

34%

kevin

knight

  
person
name

  

person
name

name
op1

name
op1

kevin

knight

person

name

name

op1

op2

kevin

knight

concept%iden4   ca4on%
parse

semantically

likes
  

to
  

  

  

sentences

  

like-01

like-02

semantics

parse-00

sentence

thing

arg1

parse-00

35%

training%

       adagrad%structured%id88%

learning%rate%

   t+1
i =    t

i  

   
t0=1 gt0

i

gt
i

qpt

model%weight%component%i%at%step%t+1%

gradient%

36%

training%

       adagrad%structured%id88%

learning%rate%

   t+1
i =    t

i  

   
t0=1 gt0

i

gt
i

qpt

model%weight%component%i%at%step%t+1%

gradient%

i = f eati(xt,   yt)   f eati(xt, yt)
gt

input%

predicted%output%

gold%output%

37%

rela4on%iden4   ca4on%

       evalua4on%
       alignment%
       parsing%

       graphibased%parsing%

       concept%iden4   ca4on%
       rela0on&iden0   ca0on&

       experiments%

       transi4onibased%parsing%
       parsing%using%syntaxibased%mt%

       graph%grammars%and%automata%
       applica4ons%

       maximum%spanning%connected%graph%algorithm%(mscg)%
       graph%determinism%constraints%using%lagrangian%relaxa4on%

38%

rela4on%iden4   ca4on%

like-01

semantics

parse-00

sentence

person

name

name

op1

op2

kevin

knight

root

root

like-01

arg0

arg0

person

name

arg1

parse-00

mod

arg1

semantics

sentence

name

op1

op2

kevin

knight

39%

rela4on%iden4   ca4on%

like-01

semantics

parse-00

sentence

person

name

name

op1

op2

kevin

knight

root

root

like-01

arg0

arg0

person

name

arg1

parse-00

mod

arg1

semantics

sentence

name

op1

op2

kevin

knight

40%

dense%graph%

like-01

person

parse-00

name

sentence

semantics

kevin

41%

dense%graph%

like-01

person

parse-00

name

sentence

semantics

kevin

       all%possible%edges%between%all%nodes%
       edges%w/%weights%

42%

dense%graph%

like-01

person

parse-00

name

sentence

semantics

kevin

edge%weight%=%how%much%the%model%wants%to%
include%that%edge%in%the%output%graph%

43%

dense%graph%

like-01

person

parse-00

name

sentence

semantics

kevin

output%graph%=%max%subgraph%with%
constraints%on%welliformedness%

44%

dense%graph%

like-01

person

parse-00

name

sentence

semantics

kevin

z binary%vector,%indicates%which%edges%are%selected%

  real%vector,%contains%the%edge%weights%

45%

max%subgraph%

like-01

person

parse-00

name

sentence

semantics

kevin

rela4on%id%

op4miza4on%problem%

 t z

max
z2g

set%of%graphs%sa4sfying%the%constraints%

46%

output%graph%proper4es%(constraints)%

       preserving%
       simple%
       spanning%(all%nodes)%
       connected%
       determinis4c%

47%

output%graph%proper4es%(constraints)%

       preserving%
       simple%
       spanning%(all%nodes)%
       connected%
       determinis4c%

set%
z

set%

g

48%

dense%graph%

like-01

person

parse-00

name

sentence

semantics

kevin

49%

reduced%graph%for%clarity%

like-01

person

parse-00

name

sentence

semantics

kevin

50%

constraint:%preserving%

like-01

parse-00

person

name

name

sentence

semantics

op1

kevin

51%

constraint:%simple%

person

name

like-01

parse-00

sentence

semantics

name

op1

kevin

52%

with%weights%and%labels%shown%

3

arg0

like-01

arg1
1

arg1
-1

person

name

arg0
1
-9
mod
-9
-4
mod

arg1

-9
mod

parse-00
arg1
-3

mod
-9

sentence

semantics

name

op1

kevin

53%

maximum%weighted%subgraph%

like-01

3

1

-1

1
-9

parse-00

-3

-9

-4

person

name

-9

name

op1

sentence

-9

semantics

kevin

54%

maximum%weighted%subgraph%

like-01

1

-1

3

1
-9

parse-00

-3

-9

-4

person

name

 t z = 5

-9

name

op1

sentence

-9

semantics

kevin

55%

maximum%weighted%subgraph%

like-01

1

-1

3

1
-9

parse-00

-3

-9

-4

person

name

 t z = 5

-9

name

op1

sentence

-9

semantics

kevin

constraint:%graph%must%be%connected%

56%

maximum%spanning,%connected%subgraph%

(mscg)%
3

person

like-01

1

-1

1
-9

name

-9

name

op1

parse-00

-3

-9

-4

sentence

-9

semantics

kevin

57%

maximum%spanning,%connected%subgraph%

(mscg)%
3

person

like-01

1

-1

1
-9

name

-9

name

op1

parse-00

-3

-9

-4

sentence

-9

semantics

kevin

58%

maximum%spanning,%connected%subgraph%

like-01

1

-1

parse-00

-4

-9

sentence

(mscg)%
3

person

1
-9

-9

name

-9

name

op1

semantics

kevin

59%

maximum%spanning,%connected%subgraph%

like-01

1

-1

parse-00

-4

-9

sentence

(mscg)%
3

person

1
-9

-9

name

-9

name

op1

semantics

kevin

60%

maximum%spanning,%connected%subgraph%

(mscg)%
3

1

name

person

 t z = 0

like-01

1

-1

parse-00

-4

sentence

semantics

name

op1

kevin

61%

maximum%spanning,%connected%subgraph%

(mscg)%

person

name

like-01

arg0

arg1

arg1

parse-00

arg0

mod

sentence

semantics

name

op1

kevin

constraint:%graph%must%be%determinis4c%

62%

determinism%constraints%

person

name

like-01

arg0

arg1

arg1

parse-00

arg0

mod

sentence

semantics

name

op1

kevin

63%

determinism%constraints%

z

z

1

2

arg1    !2
arg1    !1

+ z

+ z

1

2

arg1    !3
arg1    !3
...

+ . . .     1
+ . . .     1

64%

determinism%constraints%

z

z

1

2

arg1    !2
arg1    !1

+ z

+ z

1

2

arg1    !3
arg1    !3
...

+ . . .     1
+ . . .     1

az     b

65%

determinism%constraints%

max
z2z
s.t.%%%%%sa4s   es%

z

 t z

az     b

preserving,%simple,%
connected,%spanning%

determinism&
constraints&

solve%using%lagrangian%relaxa4on%

66%

lagrangian%relaxa4on%tutorial%

max
z2z
s.t.%%%%%sa4s   es%

z

 t z

az     b

67%

lagrangian%relaxa4on%tutorial%

 t z

easy%(know%
how%to%solve)%

max
z2z
s.t.%%%%%sa4s   es%

z

az     b

68%

lagrangian%relaxa4on%tutorial%
easy%

max
z2z
s.t.%%%%%sa4s   es%

z

 t z

az     b

but%this%makes%it%
hard%

69%

lagrangian%relaxa4on%tutorial%
easy%

max
z2z
s.t.%%%%%sa4s   es%

z

 t z

az     b

problem%#1%
hard%%

but%this%makes%it%
hard%

70%

lagrangian%relaxa4on%tutorial%
easy%

max
z2z
s.t.%%%%%sa4s   es%

z

 t z

az     b

problem%#1%
hard%%

but%this%makes%it%
hard%

min
  0

 t z +  t (b   az)

max
z2z
lagrange%mul4pliers%   %0%

71%

lagrangian%relaxa4on%tutorial%
easy%

max
z2z
s.t.%%%%%sa4s   es%

z

 t z

az     b

problem%#1%
hard%%

but%this%makes%it%
hard%

min
  0

max
z2z

 t z +  t (b   az)

add%to%original%objec4ve%

72%

lagrangian%relaxa4on%tutorial%
easy%

max
z2z
s.t.%%%%%sa4s   es%

z

 t z

az     b

problem%#1%
hard%%

but%this%makes%it%
hard%

min
  0

max
z2z

 t z +  t (b   az)
minimize%over% 

73%

lagrangian%relaxa4on%tutorial%
easy%

 t z

max
z2z
s.t.%%%%%sa4s   es%

z

az     b
   

problem%#1%
hard%%

but%this%makes%it%
hard%

min
  0

max
z2z

 t z +  t (b   az)

problem%#2%
easy%

not%always%equivalent,%as%we%shall%see%

74%

solving%problem%#2%

       problem%#2%(aka%   lagrange%dual   ):%

 t z +  t (b   az)

min
  0

max
z2z
 

       for%a%given%%%%,%the%max%can%be%solved%using%algorithm%

given%before%(preprocessing%+%mscg)%

       to%minimize%over%lambda%

      use%subgradient%descent%

75%

solving%problem%#2%

       problem%#2%(aka%   lagrange%dual   ):%

 t z +  t (b   az)

min
  0

max
z2z
 

       for%a%given%%%%,%the%max%can%be%solved%using%algorithm%

given%before%(preprocessing%+%mscg)%

       to%minimize%over%lambda%

      use%subgradient%descent%

if%constraints%are%not%sa4s   ed%at%minimum,%
then%problem%#1%   %problem%#2%

76%

a]er%subgradient%descent%

like-01

arg0

arg1

arg0

person

name

 t z =  2

parse-00

arg1

mod

sentence

semantics

name

op1

kevin

77%

summary:%output%graph%proper4es%

       maximum%weight%
       preserving%
       simple%
       spanning%(all%nodes)%
       connected%
       determinis4c%

78%

features%&%training%

       features%

       edge%bias%
       edge%label%
       head%concept,%tail%concept,%head%word,%tail%word%
       dependency%path%(dependency%edge%labels%and%pos%on%the%
       various%distance%features%
       within%fragment%edge%indicator%
       various%conjunc4ons%of%above%features%

shortest%path%between%any%two%words%in%the%span)%

       weights%trained%using%adagrad%structured%id88%

79%

experiments%

       alignment%
       parsing%

       graphibased%parsing%

       concept%iden4   ca4on%
       rela4on%iden4   ca4on%

       experiments&

       transi4onibased%parsing%
       parsing%using%syntaxibased%mt%

       evalua4on%
       graph%grammars%and%automata%
       applica4ons%

       maximum%spanning%connected%graph%algorithm%(mscg)%
       graph%determinism%constraints%using%lagrangian%relaxa4on%

80%

experiments%

acl&2014&
80%%smatch%

now&

81%%smatch%

58%%smatch%

62%%smatch%

full%system%
(gold%
concepts)%
full%system%

       data:%ldc2013e117%

       4,000%training%instances%
       2,000%test%
       2,000%dev%

81%

transi4onibased%amr%parsing%(wang%et%al,%naacl%2015)%

       convert%dependency%tree%into%amr%graph%
       mo4va4on:%only%a%few%di   erence%between%syntac4c%

dependencies%and%amr%
dependency%tree%

amr%graph%

(graphic%thanks%to%chuan%wang)%

82%

transi4onibased%amr%parsing%

       ac4ons%applied%to%graph%in%postiorder%traversal%
       parser%ac4ons%

processed%node)%

       next:edge:lr&(agach%edge%and%move%to%next%word)%
       swap:lr&(swap%nodes%and%agach%with%edge)%
       reattachk:lr&(delete%edge%and%reagach%to%already%
       replace:head&(replace%node%with%another%node)%
       reentrancek:lr&(agach%edge%to%already%processed%node)%
       merge%(merge%two%nodes)%
       next:node:lc&(label%with%concept%and%move%to%next%word)%
       delete:node&(deletes%a%word)%

83%

transi4onibased%amr%parsing%

(graphic%thanks%to%chuan%wang)%

84%

amr%parsing%using%syntaxibased%mt%(pust%et%al,%2015)%

       idea:%already%have%sophis4cated%stringitoitree%

syntac4c%mt%systems.%%use%them%for%amr%parsing%
       approach:%convert%amr%graphs%into%trees%suitable%

for%training%stringitoitree%mt%systems%

       important%features:%

       language%model%on%the%linearized%amr%
       seman4c%categories%built%using%id138%%

       large%performance%gains%jamr%(7%smatch%points)%

85%

evalua4on%

       alignment%
       parsing%
       evalua0on&
       graph%grammars%and%automata%
       applica4ons%

86%

evalua4on:%smatch%(cai%&%knight,%2013)%

want-01

arg0

arg1

want-01

arg0

arg1

boy

arg0

go-01

boy

book

want%a%number%which%indicates%the%

similarity%between%two%graphs%

87%

evalua4on:%smatch%

want-01

arg0

arg1

boy

arg0

go-01

(a / want-01 
    :arg0 (b / boy 
    :arg1 (c / go-01 
        :arg0 b))    

a

instance

arg0

arg1

want-01

b

arg0

c
instance

instance

boy

go-01

amr%graph%w/%explicit%instance%edges%

88%

evalua4on:%smatch%

a

instance

d

instance

arg0

arg1

want-01

b

arg0

c
instance

instance

arg0

arg1

want-01

e

instance

f
instance

boy

go-01

boy

book

89%

evalua4on:%smatch%

instance

want-01

arg0

arg1

instance

arg0

instance

instance

arg0

arg1

want-01

instance

instance

boy

go-01

boy

book

consider%an%alignment%between%the%nodes%

90%

evalua4on:%smatch%

instance

want-01

arg0

arg1

instance

arg0

instance

instance

arg0

arg1

want-01

instance

instance

boy

go-01

boy

book

fiscore%=%f1%of%iden4cal%matching%edges%
%%%%%%%%%%%%%=%2%match/(total1%+%total2)%
%%%%%%%%%%%%%=%2%/%(6%+%5)%=%.18%

91%

evalua4on:%smatch%

instance

want-01

arg0

arg1

instance

arg0

instance

instance

arg0

arg1

want-01

instance

instance

boy

go-01

boy

book

smatch%score%=%%maximum%fiscore%over%all%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%possible%alignments%%

np%hard%=>%approximate%id136%to%   nd%
highest%scoring%alignment%

92%

evalua4on:%smatch%

instance

want-01

arg0

arg1

instance

arg0

instance

instance

arg0

arg1

want-01

instance

instance

boy

go-01

boy

book

smatch%score%=%%8%/%(6%+%5)%=%.73%

highest%scoring%alignment%

93%

evalua4on:%smatch%

instance

want-01

arg0

arg1

instance

arg0

instance

instance

arg0

arg1

want-01

instance

instance

boy

go-01

boy

book

mul4ilingual%version%of%smatch:%amrica%
demo%by%naomi%saphra%at%naacl%2015%

94%

roadmap%

       alignment%
       parsing%
       evalua4on%
       graph&grammars&and&automata&

       background:%id18s%and%tree%subs4tu4on%grammars%
       hyperedge%replacement%grammars%(hrgs)%
       directed%acyclic%graph%(dag)%automata%

       applica4ons%

95%

mo4va4on%for%graph%grammars%

       string%and%tree%grammars,%automata,%transducers,%

etc%widely%used%in%nlp%applica4ons%
       phrase%structure%parsers,%syntac4c%mt%systems%

       seman4cs%(like%amr)%is%represented%as%graphs%

we%would%like%grammars,%automata,%
transducers,%etc%over%graphs%

96%

context%free%grammar%(id18)%

grammar%

1)    s%i>%np%vp%
2)    np%i>%we%
3)    vp%i>%v%np%
4)    v%i>%want%
5)    v%i>%like%
6)    np%i>%ice%cream%

&&

97%

context%free%grammar%(id18)%

grammar%

1)    s%i>%np%vp%
2)    np%i>%we%
3)    vp%i>%v%np%
4)    v%i>%want%
5)    v%i>%like%
6)    np%i>%ice%cream%

&&

example%deriva4on%
%%%%%%%s%

98%

context%free%grammar%(id18)%

grammar%

1)    s%i>%np%vp%
2)    np%i>%we%
3)    vp%i>%v%np%
4)    v%i>%want%
5)    v%i>%like%
6)    np%i>%ice%cream%

&&

example%deriva4on%
%%%%%%%s%
(cid:1)1%np%vp%

99%

context%free%grammar%(id18)%

grammar%

1)    s%i>%np%vp%
2)    np%i>%we%
3)    vp%i>%v%np%
4)    v%i>%want%
5)    v%i>%like%
6)    np%i>%ice%cream%

&&

example%deriva4on%
%%%%%%%s%
(cid:1)1%np%vp%
(cid:1)3%np%v%np%

100%

context%free%grammar%(id18)%

grammar%

1)    s%i>%np%vp%
2)    np%i>%we%
3)    vp%i>%v%np%
4)    v%i>%want%
5)    v%i>%like%
6)    np%i>%ice%cream%

&&

example%deriva4on%
%%%%%%%s%
(cid:1)1%np%vp%
(cid:1)3%np%v%np%
(cid:1)4%np%like%np%

101%

context%free%grammar%(id18)%

grammar%

1)    s%i>%np%vp%
2)    np%i>%we%
3)    vp%i>%v%np%
4)    v%i>%want%
5)    v%i>%like%
6)    np%i>%ice%cream%

&&

example%deriva4on%
%%%%%%%s%
(cid:1)1%np%vp%
(cid:1)3%np%v%np%
(cid:1)4%np%like%np%
(cid:1)6%np%like%ice%cream%

102%

context%free%grammar%(id18)%

grammar%

1)    s%i>%np%vp%
2)    np%i>%we%
3)    vp%i>%v%np%
4)    v%i>%want%
5)    v%i>%like%
6)    np%i>%ice%cream%

&&

example%deriva4on%
%%%%%%%s%
(cid:1)1%np%vp%
(cid:1)3%np%v%np%
(cid:1)4%np%like%np%
(cid:1)6%np%like%ice%cream%
(cid:1)2%we%like%ice%cream%

103%

context%free%grammar%(id18)%

deriva4on%

example%deriva4on%
%%%%%%%s%
(cid:1)1%np%vp%
(cid:1)3%np%v%np%
(cid:1)4%np%like%np%
(cid:1)6%np%like%ice%cream%
(cid:1)2%we%like%ice%cream%

grammar%

1)    s%i>%np%vp%
2)    np%i>%we%
3)    vp%i>%v%np%
4)    v%i>%want%
5)    v%i>%like%
6)    np%i>%ice%cream%

&&

104%

context%free%grammar%(id18)%

deriva4on%

grammar%

1)    s%i>%np%vp%
2)    np%i>%we%
3)    vp%i>%v%np%
4)    v%i>%want%
5)    v%i>%like%
6)    np%i>%ice%cream%

&&

example%deriva4on%
%%%%%%%s%
(cid:1)1%np%vp%
(cid:1)3%np%v%np%
(cid:1)4%np%like%np%
(cid:1)6%np%like%ice%cream%
(cid:1)2%we%like%ice%cream%

yield%=%string&

105%

context%free%grammar%(id18)%

grammar%

1)    s%i>%np%vp%
2)    np%i>%we%
3)    vp%i>%v%np%
4)    v%i>%want%
5)    v%i>%like%
6)    np%i>%ice%cream%

deriva4on%
tree%

example%deriva4on%%%

s

v
like

vp

np

ice cream

np

we

yield%=%string&

&&

language%over%strings%(yield),%and%
trees%(deriva4ons)%

106%

np

grammar%
s
%
%
%
%
%
%
%

like

v

np
we
np

s

np

np

ice cream

tree%subs4tu4on%grammar%(tsg)%

example%deriva4on%

vp

np

s

(cid:15482)

np

s

v

vp

(cid:15482)

np

np

we

s

v

vp

np

like

like

np

(cid:15482)

we

s

v

vp

np

like

ice cream

produc4on%

107%

np

grammar%
s
%
%
%
%
%
%
%

like

v

np
we
np

s

np

np

ice cream

tree%subs4tu4on%grammar%(tsg)%

example%deriva4on%

vp

np

s

(cid:15482)

np

s

v

vp

(cid:15482)

np

np

we

s

v

vp

np

like

like

np

(cid:15482)

we

s

v

vp

np

like

ice cream

produc4on%

108%

np

grammar%
s
%
%
%
%
%
%
%

like

v

np
we
np

s

np

np

ice cream

tree%subs4tu4on%grammar%(tsg)%

example%deriva4on%

vp

np

s

(cid:15482)

np

s

v

vp

(cid:15482)

np

np

we

s

v

vp

np

like

like

np

(cid:15482)

we

s

v

vp

np

like

ice cream

produc4on%

109%

np

grammar%
s
%
%
%
%
%
%
%

like

v

np
we
np

s

np

np

ice cream

tree%subs4tu4on%grammar%(tsg)%

example%deriva4on%

vp

np

s

(cid:15482)

np

s

v

vp

(cid:15482)

np

np

we

s

v

vp

np

like

like

np

(cid:15482)

we

s

v

vp

np

like

ice cream

produc4on%

110%

np

grammar%
s
%
%
%
%
%
%
%

like

v

np
we
np

s

np

np

ice cream

tree%subs4tu4on%grammar%(tsg)%

example%deriva4on%

vp

np

s

(cid:15482)

np

s

v

vp

(cid:15482)

np

np

we

s

v

vp

np

like

like

np

(cid:15482)

we

s

v

vp

np

like

ice cream

derived%
tree%

111%

hyperedge%replacement%grammar%(hrg)%

grammar%rules%(some%of%them)%

(   gure%from%chiang%et%al,%2013)%

112%

hyperedge%replacement%grammar%(hrg)%

grammar%rules%(some%of%them)%

(   gure%from%chiang%et%al,%2013)%

113%

hyperedge%replacement%grammar%(hrg)%

grammar%rules%(some%of%them)%

(   gure%from%chiang%et%al,%2013)%

114%

hyperedge%replacement%grammar%(hrg)%

grammar%rules%(some%of%them)%

(   gure%from%chiang%et%al,%2013)%

115%

dag%automata%

(kamimura%and%slutzki,%1981.%quernheim%and%knight,%2012)%%

q

q

q

arg0

arg1

want-01

q

q

rewrite%rule%
(   explicit%rule   )%

boy

merge%rule%
(   implicit%rule   )%

two%or%more%states%can%merge%rule%

116%

dag%automata%

arg0

arg1

want-01

q

q

arg1

q

boy

117%

dag%automata%

arg0

arg1

want-01

q

arg0

arg1

believe-01

q

q

boy

q

118%

dag%automata%

arg0

arg1

want-01

q

arg0

arg1

believe-01

q

arg0

arg1

want-01

q

q

boy

119%

dag%automata%

arg1

want-01

arg0

arg0

arg1

believe-01

arg0

want-01

arg1

q

boy

120%

dag%automata%

arg1

want-01

arg0

believe-01

arg1

arg0

arg0

want-01

arg1

q

boy

girl

121%

extensions%

       weighted%and%probabilis4c%grammars%
       synchronous%grammars%and%transducers%

       useful%for%building%parsers,%generators,%and%mt%systems%

122%

recent/ongoing%work%

       improved%parsing%algorithms%(chiang%et%al,%2013)%
       applica4ons%to%parsing%and%genera4on%(braune%et%al,%

2014)%and%mt%(jones%et%al,%2012)%

       implementa4ons%

       hyperedge%replacement%grammars:%bolinas%(chiang%et%al,%

2013;%jones%et%al,%2012)%

       dag%automata:%dagger%(quernheim%&%knight,%2012)%

123%

alignment%

parsing%

kevin

knight

likes

to semantically

parse

sentences

  

like-01

semantics

parse-00

sentence

person

name

name

op1

op2

kevin

knight

root

root

like-01

arg0

arg0

person

name

arg1

parse-00

mod

arg1

semantics

sentence

name

op1

op2

kevin

knight

evalua4on%

graph%grammars%

applica4ons%

a

instance

d

instance

arg0

arg1

want-01

b

arg0

c
instance

instance

arg0

arg1

want-01

e

instance

f
instance

boy

go-01

boy

book

analysis

interlingua

amr

cross-lingual

parser

generation

source

target

124%

applica4ons%

       alignment%
       parsing%
       evalua4on%
       graph%grammars%and%automata%
       applica0ons&

       mt,%summariza4on,%en4ty%linking%

125%

machine%transla4on%

analysis

interlingua

amr

cross-lingual

parser

generation

source

target

126%

summariza4on%(liu%et%al,%naacl%2015)%

document%sentences%

(input)%

document%amrs%

(run%parser)%

summary%amr%
(select%nodes%
and%edges)%

summary%(generate)%

127%

unsupervised%en4ty%linking%with%amr%(pan%et%al,%

naacl%2015)%

       link%en4ty%men4ons%in%text%to%knowledge%base%
       look%at%context%to%disambiguate%men4on%
       uses%amr%graphs%as%context%to%build%knowledge%

networks:%

amr%context%performs%
much%beger%than%srl%
context%for%unsupervised%
en4ty%linking%

128%

amr%at%naacl%2015%

       talks%

       posters%

       fei%liu,%je   rey%flanigan,%sam%thomson,%norman%sadeh,%noah%a.%smith.%
"toward"abstrac7ve"summariza7on"using"seman7c"representa7ons"%
       xiaoman%pan,%taylor%cassidy,%ulf%hermjakob,%heng%ji,%kevin%knight.%
"unsupervised"en7ty"linking"with"abstract"meaning"representa7on%

       chuan%wang,%nianwen%xue,%sameer%pradhan.%"a"transi7ondbased"

algorithm"for"amr"parsing"%

       demonstra4ons%

       lucy%vanderwende,%arul%menezes%and%chris%quirk.%"an"amr"parser"for"

english,"french,"german,"spanish"and"japanese"and"a"new"amrd
annotated"corpus"%

       naomi%saphra%and%adam%lopez.%"amrica:"an"amr"inspector"for"crossd

language"alignments"%

129%

resources%

       amr&website:%hgp://amr.isi.edu%
       jamr:%hgps://github.com/j   anigan/jamr%
       transi0on:based&parser:%
hgps://github.com/juicechuan/amrparsing/%
       bolinas&toolkit:%
hgp://www.isi.edu/publica4ons/licensedisw/bolinas/%
       dagger&tookit:%
hgp://www.ims.uniistuggart.de/~daniel/dagger%

130%

(t / thank-01!
    :arg1 (y / you))!

thanks%to:%miguel%ballesteros,%david%chaing,%
shay%cohen,%chris%dyer,%kevin%knight,%lingpeng%
kong,%fei%liu,%noah%smith,%sam%thomson,%and%

chuan%wang%

131%

(cid:5)(cid:9)(cid:7)(cid:1)
(cid:6)(cid:7)(cid:10)(cid:1)
(cid:11)(cid:8)(cid:1)
(cid:2)(cid:3)(cid:4)

(with apologies to    the zen of python   )

(l#/#love(01#
###:arg0#(p#/#person##
############:name#(n#/#name#:op1#"theodore"))#
###:arg1#(s#/#system##
############:arg0(of#(o#/#operate(01#
########################:arg1#(c#/#computer#
#################################:poss#p))))

one graph to rule them all.

(l#/#love(01#
###:arg0#(p#/#person##
############:name#(n#/#name#:op1#"theodore"))#
###:arg1#(s#/#system##
############:arg0(of#(o#/#operate(01#
########################:arg1#(c#/#computer#
#################################:poss#p))))

one graph to rule them all.

defragmented semantics in (basically) a rooted dag.

(l#/#love(01#
###:arg0#(p#/#person##
############:name#(n#/#name#:op1#"theodore"))#
###:arg1#(s#/#system##
############:arg0(of#(o#/#operate(01#
########################:arg1#(c#/#computer#
#################################:poss#p))))

one graph to rule them all.

defragmented semantics in (basically) a rooted dag.

amr is not in the derivation business.

(l#/#love(01#
###:arg0#(p#/#person##
############:name#(n#/#name#:op1#"theodore"))#
###:arg1#(s#/#system##
############:arg0(of#(o#/#operate(01#
########################:arg1#(c#/#computer#
#################################:poss#p))))

entity and event variables give 

coreference for free.

(l#/#love(01#
###:arg0#(p#/#person##
############:name#(n#/#name#:op1#"theodore"))#
###:arg1#(s#/#system##
############:arg0(of#(o#/#operate(01#
########################:arg1#(c#/#computer#
#################################:part(of#p))))

deep is better than shallow.    

(paraphrases should have the same amr.)

   but practicality (for annotation) beats purity.

theodore is in love with his computer   s operating system. 

theodore loves his computer   s operating system. 

the operating system of theodore   s computer is loved by him.

theodore adores the operating system in his computer. 

theodore is romantically involved with his operating system.

it doesn   t have to be an interlingua,    
so long as it is more logical than english.

there should be one and preferably only 

one obvious way to amr it.

amr is a canonical form.

the annotator experience matters.

the annotator experience matters.

the annotator experience matters.

morphosyntactic sugar    
is considered unhealthy.

(d#/#decide(01#
###:arg0#(h#/#he)#
###:mod#(p#/#politics)#
###:manner#(t#/#think(01#:polarity#(#
##############:arg0#h))

he made a thoughtless political decision.

verbs (events)    

are better than nouns (plain concepts).

adjectives are better than adverbs.

adjective frames are better than :mod.
core roles are better than non-core roles.

anything is better than :prep(x!

(p#/#president)

the president

(p#/#person#:arg0(of#(p2#/#preside(01))

the person who presides

verbs (events)    

are better than nouns (plain concepts).

(except when the meaning is noncompositional.)

adjectives are better than adverbs.

adjective frames are better than :mod.
core roles are better than non-core roles.

anything is better than :prep(x!

(p#/#person#
###:arg0(of#(h#/#have(org(role(91#
###############:arg1#(   russia   )#
###############:arg2#(p2#/#president)))

the russian president

occasionally you need to hallucinate    

to fill in the gaps.

(m#/#meal#
###:arg1(of#(c#/#cost(01#
###############:arg2#(m2#/#monetary(quantity#
#########################:quant#3#
#########################:unit#(d#/#dollar))))

a $3 meal 

a meal that costs $3

(g#/#government(organization#
###:arg0(of#(g2#/#govern(01#
################:arg1#(   china   )))
the chinese government 
the government of china

a government is a government(

organization that governs.

(g#/#government(organization#
###:arg0(of#(g2#/#govern(01)#
###:mod#(f#/#federal))

the federal government

the sentence is a starting point.    
it should not be a straightjacket.

in the future, amr will pay better attention to 

cross-sentence/discourse phenomena.

amr does not compromise for algorithmic 
expedience. (algorithms will have to catch up!)

http://amr.isi.edu

!

!

!

!

!

!

!

!

!

amr bibliography 

banarescu, laura, claire bonial, shu cai, madalina georgescu, kira grif   tt, ulf hermjakob, kevin 
knight, philipp koehn, martha palmer & nathan schneider. 2013. abstract meaning 
representation for sembanking. proceedings of the 7th linguistic annotation workshop and 
interoperability with discourse, 178   186. so   a, bulgaria: association for computational linguistics. 
http://www.aclweb.org/anthology/w13-2322.!

banarescu, laura, claire bonial, shu cai, madalina georgescu, kira grif   tt, ulf hermjakob, kevin 
knight, philipp koehn, martha palmer & nathan schneider. 2014. abstract meaning 
representation (amr) 1.2 speci   cation. https://github.com/amrisi/amr-guidelines/blob/
b0fd2d6321ed4c9e9fa202b307cceeae36b8c25b/amr.md.!

bonial, claire, julia bonn, kathryn conger, jena d. hwang & martha palmer. 2014. propbank: 
semantics of new predicate types. in nicoletta calzolari, khalid choukri, thierry declerck, hrafn 
loftsson, bente maegaard, joseph mariani, asuncion moreno, jan odijk & stelios piperidis (eds.), 
proceedings of the ninth international conference on language resources and evaluation, 3013   3019. 
reykjav  k, iceland: european language resources association (elra). http://www.lrec-
conf.org/proceedings/lrec2014/pdf/1012_paper.pdf.!

braune, fabienne, daniel bauer & kevin knight. 2014. mapping between english strings and 
reentrant semantic graphs. in nicoletta calzolari, khalid choukri, thierry declerck, hrafn 
loftsson, bente maegaard, joseph mariani, asuncion moreno, jan odijk & stelios piperidis (eds.), 
proceedings of the ninth international conference on language resources and evaluation. reykjav  k, 
iceland: european language resources association (elra). http://www.lrec-conf.org/
proceedings/lrec2014/pdf/1080_paper.pdf.!

cai, shu & kevin knight. 2013. smatch: an evaluation metric for semantic feature structures. 
proceedings of the 51st annual meeting of the association for computational linguistics, 748   752. so   a, 
bulgaria: association for computational linguistics. http://www.aclweb.org/anthology/
p13-2131.!

chiang, david, jacob andreas, daniel bauer, karl moritz hermann, bevan jones & kevin knight. 
2013. parsing graphs with hyperedge replacement grammars. proceedings of the 51st annual 
meeting of the association for computational linguistics, 924   932. so   a, bulgaria: association for 
computational linguistics. http://www.aclweb.org/anthology/p13-1091.!

flanigan, jeffrey, sam thomson, jaime carbonell, chris dyer & noah a. smith. 2014. a 
discriminative graph-based parser for the id15. proceedings of the 
52nd annual meeting of the association for computational linguistics, 1426   1436. baltimore, maryland, 
usa: association for computational linguistics. http://www.aclweb.org/anthology/p14-1134.!

jones, bevan, jacob andreas, daniel bauer, karl moritz hermann & kevin knight. 2012. 
semantics-based machine translation with hyperedge replacement grammars. proceedings of 
coling 2012, 1359   1376. mumbai, india: the coling 2012 organizing committee. http://
www.aclweb.org/anthology/c12-1083.!

knight, kevin, laura baranescu, claire bonial, madalina georgescu, kira grif   tt, ulf hermjakob, 
daniel marcu, martha palmer & nathan schneider. 2014. id15 
(amr) annotation release 1.0. philadelphia, pennsylvania, usa: linguistic data consortium. 
https://catalog.ldc.upenn.edu/ldc2014t12.!

!
!

!

!
!

!

!
!

!

!

!!

koller, alexander. 2015. semantic construction with graph grammars. proceedings of the 11th 
international conference on computational semantics, 228   238. london, uk: association for 
computational linguistics. http://www.aclweb.org/anthology/w15-0127.!

langkilde, irene & kevin knight. 1998. generation that exploits corpus-based statistical 
knowledge. proceedings of the 36th annual meeting of the association for computational linguistics and 
the 17th international conference on computational linguistics, 704   710. montreal, quebec, canada: 
association for computational linguistics. http://dl.acm.org/citation.cfm?id=980963.!

liu, fei, jeffrey flanigan, sam thomson, norman sadeh & noah a. smith. 2015. toward 
abstractive summarization using semantic representations. proceedings of the 2015 conference of the 
north american chapter of the association for computational linguistics: human language technologies, 
1077   1086. denver, colorado: association for computational linguistics. http://
www.aclweb.org/anthology/n15-1114.!

palmer, martha, daniel gildea & paul kingsbury. 2005. the proposition bank: an annotated 
corpus of semantic roles. computational linguistics 31(1). 71   106. doi:10.1162/0891201053630264. 
http://dx.doi.org/10.1162/0891201053630264.!

pan, xiaoman, taylor cassidy, ulf hermjakob, heng ji & kevin knight. 2015. unsupervised entity 
linking with id15. proceedings of the 2015 conference of the north 
american chapter of the association for computational linguistics: human language technologies, 1130   
1139. denver, colorado: association for computational linguistics. http://www.aclweb.org/
anthology/n15-1119.!

pourdamghani, nima, yang gao, ulf hermjakob & kevin knight. 2014. aligning english strings 
with id15 graphs. proceedings of the 2014 conference on empirical 
methods in natural language processing, 425   429. doha, qatar: association for computational 
linguistics. http://www.aclweb.org/anthology/d14-1048.!

pust, michael, ulf hermjakob, kevin knight, daniel marcu & jonathan may. 2015. using syntax-
based machine translation to parse english into id15. arxiv:
1504.06665 [cs]. http://arxiv.org/abs/1504.06665.!

quernheim, daniel & kevin knight. 2012. towards probabilistic acceptors and transducers for 
feature structures. proceedings of the sixth workshop on syntax, semantics and structure in statistical 
translation, 76   85. jeju, republic of korea: association for computational linguistics. http://
www.aclweb.org/anthology/w12-4209.!

saphra, naomi & adam lopez. 2015. amrica: an amr inspector for cross-language 
alignments. proceedings of the 2015 conference of the north american chapter of the association for 
computational linguistics: demonstrations, 36   40. denver, colorado: association for computational 
linguistics. http://www.aclweb.org/anthology/n15-3008.!

schneider, nathan, vivek srikumar, jena d. hwang & martha palmer. 2015. a hierarchy with, of, 
and for preposition supersenses. proceedings of the 9th linguistic annotation workshop, 112   123. 
denver, colorado, usa: association for computational linguistics. http://www.aclweb.org/
anthology/w15-1612.!

!

!

!

vanderwende, lucy, arul menezes & chris quirk. 2015. an amr parser for english, french, 
german, spanish and japanese and a new amr-annotated corpus. proceedings of the 2015 
conference of the north american chapter of the association for computational linguistics: 
demonstrations, 26   30. denver, colorado: association for computational linguistics. http://
www.aclweb.org/anthology/n15-3006.!

wang, chuan, nianwen xue & sameer pradhan. 2015. a transition-based algorithm for amr 
parsing. proceedings of the 2015 conference of the north american chapter of the association for 
computational linguistics: human language technologies, 366   375. denver, colorado: association for 
computational linguistics. http://www.aclweb.org/anthology/n15-1040.!

werling, keenon, gabor angeli & christopher d. manning. 2015. robust subgraph generation 
improves id15 parsing. proceedings of the 53rd annual meeting of the 
association for computational linguistics and the 7th international joint conference on natural language 
processing of the asian federation of natural language processing. beijing, china. to appear.!

xue, nianwen, ondrej bojar, jan hajic, martha palmer, zdenka uresova & xiuhong zhang. 2014. 
not an interlingua, but close: comparison of english amrs to chinese and czech. in nicoletta 
calzolari, khalid choukri, thierry declerck, hrafn loftsson, bente maegaard, joseph mariani, !
asuncion moreno, jan odijk & stelios piperidis (eds.), proceedings of the ninth international 
conference on language resources and evaluation, 1765   1772. reykjav  k, iceland: european language 
resources association (elra). http://www.lrec-conf.org/proceedings/lrec2014/pdf/
384_paper.pdf.

amr editor command line 

editing 
   

    adding   stuff   

    start   the   amr:      top   concept   
    attach   a   new   concept   under   a   variable   v:      v   :rel   concept   
    attach   a   new   ne   under   a   variable:      v   :rel   type   parts   of   name   
    add   a   new   relation   between   two   existing   variables:      v   :rel   v2   

    changing   stuff   

    move   a   variable   under   another   one:      v   :rel   v2-        
    change   the   relation   between   two   variables:      v   :newrel   v2-        
    select   a   propbank   frame:   add   as   a   plain   concept,   click   on   the   blue   link,   then   
click   on   the   frame   you   want   to   add   a   sense   number   (the   link   in   the   amr   will   
turn   green).   (if   you   know   the   sense   number   in   advance   you   can   enter   it   as   the   
concept   name.)   

    rename   a   concept:      rc   v   new-     concept   
    delete   the   primary   occurrence   of   a   variable   and   everything   under   it   that   is   not   

used   elsewhere:      del   v   

    delete   dummy   nodes   (unused   suggestions   from   preprocessor):      dd   

    undo   last   action:      u   
    save   changes:      save   
    save   and   continue   to   the   next   sentence:   click   the   button   

documentation 

    open   the   list   of   non-  core   roles   and   special   frames:      roles   
    open   the   list   of   entity   types:      types   
    open   the   amr   dictionary:      dict   
    open   the   amr   guidelines:      guidelines   
    search   all   release   amrs:      rs   query   

