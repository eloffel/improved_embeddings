recent advances in id33

tutorial, eacl, april 27th, 2014

ryan mcdonald1

joakim nivre2

1google inc., usa/uk

e-mail: ryanmcd@google.com

2uppsala university, sweden

e-mail: joakim.nivre@lingfil.uu.se

recent advances in id33

1(54)

overview of the tutorial

introduction

(cid:73) introduction to id33 (joakim)
(cid:73) graph-based parsing post-2008 (ryan)
(cid:73) transition-based parsing post-2008 (joakim)
(cid:73) summary and    nal thoughts (ryan)

recent advances in id33

2(54)

introduction

transition-based id33

con   guration:

initial:

terminal:

shift:

reduce:

right-arc(k):

left-arc(k):

(s, b, a)
([ ], [0, 1, . . . , n],{ })
(s, [ ], a)

(s, i|b, a)     (s|i, b, a)
(s|i, b, a)     (s, b, a)
(s|i, j|b, a)     (s|i|j, b, a     {(i, j, k)})
(s|i, j|b, a)     (s, j|b, a     {(j, i, k)})

    economic news had little e   ect

amod

amod

nsubj

dobj

prep

adj

noun verb

adj

noun

p

pmod

amod

on    nancial markets .
.
prep

noun

adj

recent advances in id33

3(54)

overview

introduction

(cid:73) improved learning and id136

(cid:73) id125 and id170
(cid:73) id145
(cid:73) easy-   rst parsing
(cid:73) dynamic oracles

(cid:73) non-projective parsing

(cid:73) online reordering
(cid:73) multiplanar parsing

(cid:73) joint morphological and syntactic analysis

recent advances in id33

4(54)

the basic idea

transition-based id33

(cid:73) de   ne a transition system for id33
(cid:73) learn a model for scoring possible transitions
(cid:73) parse by searching for the optimal transition sequence

recent advances in id33

5(54)

arc-eager transition system [nivre 2003]

transition-based id33

con   guration:

initial:

terminal:

shift:

reduce:

right-arc(k):

left-arc(k):

[s = stack, b = bu   er, a = arcs]

(s, b, a)
([ ], [0, 1, . . . , n],{ })
(s, [ ], a)

(s, i|b, a)     (s|i, b, a)
(s|i, b, a)     (s, b, a)
(s|i, j|b, a)     (s|i|j, b, a     {(i, j, k)})
(s|i, j|b, a)     (s, j|b, a     {(j, i, k)})
s|i = stack with top i and remainder s
j|b = bu   er with head j and remainder b
h(i, a) = i has a head in a

notation:

h(i, a)

  h(i, a)     i (cid:54)= 0

recent advances in id33

6(54)

example transition sequence

transition-based id33

[root]s [economic, news, had, little, e   ect, on,    nancial, markets, .]b

root economic news had little e   ect
noun

noun verb

adj

adj

on    nancial markets .
.
prep

noun

adj

recent advances in id33

7(54)

example transition sequence

transition-based id33

[root, economic]s [news, had, little, e   ect, on,    nancial, markets, .]b

root economic news had little e   ect
noun

noun verb

adj

adj

on    nancial markets .
.
prep

noun

adj

recent advances in id33

7(54)

example transition sequence

transition-based id33

[root]s [news, had, little, e   ect, on,    nancial, markets, .]b

amod

root economic news had little e   ect
noun

noun verb

adj

adj

on    nancial markets .
.
prep

noun

adj

recent advances in id33

7(54)

example transition sequence

transition-based id33

[root, news]s [had, little, e   ect, on,    nancial, markets, .]b

amod

root economic news had little e   ect
noun

noun verb

adj

adj

on    nancial markets .
.
prep

noun

adj

recent advances in id33

7(54)

example transition sequence

transition-based id33

[root]s [had, little, e   ect, on,    nancial, markets, .]b

amod

nsubj

root economic news had little e   ect
noun

noun verb

adj

adj

on    nancial markets .
.
prep

noun

adj

recent advances in id33

7(54)

example transition sequence

transition-based id33

[root, had]s [little, e   ect, on,    nancial, markets, .]b

root

amod

nsubj

root economic news had little e   ect
noun

noun verb

adj

adj

on    nancial markets .
.
prep

noun

adj

recent advances in id33

7(54)

example transition sequence

transition-based id33

[root, had, little]s [e   ect, on,    nancial, markets, .]b

root

amod

nsubj

root economic news had little e   ect
noun

noun verb

adj

adj

on    nancial markets .
.
prep

noun

adj

recent advances in id33

7(54)

example transition sequence

transition-based id33

[root, had]s [e   ect, on,    nancial, markets, .]b

root

amod

nsubj

amod

root economic news had little e   ect
noun

noun verb

adj

adj

on    nancial markets .
.
prep

noun

adj

recent advances in id33

7(54)

example transition sequence

transition-based id33

[root, had, e   ect]s [on,    nancial, markets, .]b

root

dobj

amod

nsubj

amod

root economic news had little e   ect
noun

noun verb

adj

adj

on    nancial markets .
.
prep

noun

adj

recent advances in id33

7(54)

example transition sequence

transition-based id33

[root, had, e   ect, on]s [   nancial, markets, .]b

root

dobj

amod

nsubj

amod

prep

root economic news had little e   ect
noun

noun verb

adj

adj

on    nancial markets .
.
prep

noun

adj

recent advances in id33

7(54)

example transition sequence

transition-based id33

[root, had, e   ect, on,    nancial]s [markets, .]b

root

dobj

amod

nsubj

amod

prep

root economic news had little e   ect
noun

noun verb

adj

adj

on    nancial markets .
.
prep

noun

adj

recent advances in id33

7(54)

example transition sequence

transition-based id33

[root, had, e   ect, on]s [markets, .]b

root

dobj

amod

nsubj

amod

prep

amod

root economic news had little e   ect
noun

noun verb

adj

adj

on    nancial markets .
.
prep

noun

adj

recent advances in id33

7(54)

example transition sequence

transition-based id33

[root, had, e   ect, on, markets]s [.]b

root

dobj

pmod

amod

nsubj

amod

prep

amod

root economic news had little e   ect
noun

noun verb

adj

adj

on    nancial markets .
.
prep

noun

adj

recent advances in id33

7(54)

example transition sequence

transition-based id33

[root, had, e   ect, on]s [.]b

root

dobj

pmod

amod

nsubj

amod

prep

amod

root economic news had little e   ect
noun

noun verb

adj

adj

on    nancial markets .
.
prep

noun

adj

recent advances in id33

7(54)

example transition sequence

transition-based id33

[root, had, e   ect]s [.]b

root

dobj

pmod

amod

nsubj

amod

prep

amod

root economic news had little e   ect
noun

noun verb

adj

adj

on    nancial markets .
.
prep

noun

adj

recent advances in id33

7(54)

example transition sequence

transition-based id33

[root, had]s [.]b

root

dobj

pmod

amod

nsubj

amod

prep

amod

root economic news had little e   ect
noun

noun verb

adj

adj

on    nancial markets .
.
prep

noun

adj

recent advances in id33

7(54)

example transition sequence

transition-based id33

[root, had, .]s [ ]b

root

p

dobj

pmod

amod

nsubj

amod

prep

amod

root economic news had little e   ect
noun

noun verb

adj

adj

on    nancial markets .
.
prep

noun

adj

recent advances in id33

7(54)

arc-standard transition system [nivre 2004]

transition-based id33

con   guration:

initial:

terminal:

shift:

right-arc(k):

left-arc(k):

[s = stack, b = bu   er, a = arcs]

(s, b, a)
([ ], [0, 1, . . . , n],{ })
([0], [ ], a)

(s, i|b, a)     (s|i, b, a)
(s|i|j, b, a)     (s|i, b, a     {(i, j, k)})
(s|i|j, b, a)     (s|j, b, a     {(j, i, k)})

i (cid:54)= 0

recent advances in id33

8(54)

greedy id136

transition-based id33

(cid:73) given an oracle o that correctly predicts the next transition

o(c), parsing is deterministic:

c     ([ ]s , [0, 1, . . . , n]b ,{ })

parse(w1, . . . , wn)
1
2 while bc (cid:54)= [ ]
3
t     o(c)
4
c     t(c)
5

return g = ({0, 1, . . . , n}, ac )

(cid:73) complexity given by upper bound on number of transitions
(cid:73) parsing in o(n) time for the arc-eager transition system

recent advances in id33

9(54)

from oracles to classi   ers

transition-based id33

(cid:73) an oracle can be approximated by a (linear) classi   er:

o(c) = argmax

w    f(c, t)
(cid:73) history-based feature representation f(c, t)
(cid:73) weight vector w learned from treebank data

t

recent advances in id33

10(54)

transition-based id33

feature representation

(cid:73) features over input tokens relative to s and b

con   guration

[root, had, e   ect]s

[on,    nancial, markets, .]b

root

dobj

amod

nsubj

amod

root economic news had little e   ect
noun
root

noun verb

adj

adj

on    nancial markets .
prep
.

noun

adj

features
pos(s2) = root
pos(s1) = verb
pos(s0) = noun
pos(b0) = prep
pos(b1) = adj
pos(b2) = noun

recent advances in id33

11(54)

transition-based id33

feature representation

(cid:73) features over input tokens relative to s and b

con   guration

[root, had, e   ect]s

[on,    nancial, markets, .]b

root

dobj

amod

nsubj

amod

root economic news had little e   ect
noun
root

noun verb

adj

adj

on    nancial markets .
prep
.

noun

adj

features
word(s2) = root
word(s1) = had
word(s0) = e   ect
word(b0) = on
word(b1) =    nancial
word(b2) = markets

recent advances in id33

11(54)

feature representation

transition-based id33

(cid:73) features over input tokens relative to s and b
(cid:73) features over the (partial) dependency graph de   ned by a

con   guration

[root, had, e   ect]s

[on,    nancial, markets, .]b

root

dobj

amod

nsubj

amod

root economic news had little e   ect
noun
root

noun verb

adj

adj

on    nancial markets .
prep
.

noun

adj

features
dep(s1)
= root
dep(lc(s1)) = nsubj
dep(rc(s1)) = dobj
dep(s0)
= dobj
dep(lc(s0) = amod
dep(rc(s0) = nil

recent advances in id33

11(54)

feature representation

transition-based id33

(cid:73) features over input tokens relative to s and b
(cid:73) features over the (partial) dependency graph de   ned by a
(cid:73) features over the (partial) transition sequence

con   guration

[root, had, e   ect]s

[on,    nancial, markets, .]b

root

dobj

amod

nsubj

amod

root economic news had little e   ect
noun
root

noun verb

adj

adj

on    nancial markets .
prep
.

noun

adj

features
ti   1 = right-arc(dobj)
ti   2 = left-arc(amod)
ti   3 = shift
ti   4 = right-arc(root)
ti   5 = left-arc(nsubj)
ti   6 = shift

recent advances in id33

11(54)

feature representation

transition-based id33

(cid:73) features over input tokens relative to s and b
(cid:73) features over the (partial) dependency graph de   ned by a
(cid:73) features over the (partial) transition sequence

con   guration

[root, had, e   ect]s

[on,    nancial, markets, .]b

root

dobj

amod

nsubj

amod

root economic news had little e   ect
noun
root

noun verb

adj

adj

on    nancial markets .
prep
.

noun

adj

features
ti   1 = right-arc(dobj)
ti   2 = left-arc(amod)
ti   3 = shift
ti   4 = right-arc(root)
ti   5 = left-arc(nsubj)
ti   6 = shift

(cid:73) feature representation unconstrained by parsing algorithm

recent advances in id33

11(54)

local learning

transition-based id33

(cid:73) given a treebank:

(cid:73) reconstruct oracle transition sequence for each sentence
(cid:73) construct training data set d = {(c, t)| o(c) = t}
(cid:73) maximize accuracy of local predictions o(c) = t

(cid:73) any (unstructured) classi   er will do (id166s are popular)
(cid:73) training is local and restricted to oracle con   gurations

recent advances in id33

12(54)

greedy, local, transition-based parsing

transition-based id33

(cid:73) advantages:

(cid:73) highly e   cient parsing     linear time complexity with constant

time oracles and transitions

(cid:73) rich history-based feature representations     no rigid

constraints from id136 algorithm

(cid:73) drawback:

(cid:73) sensitive to search errors and error propagation due to greedy

id136 and local learning

(cid:73) the major question in transition-based parsing has been how

to improve learning and id136, while maintaining high
e   ciency and rich feature models

recent advances in id33

13(54)

id125

improved learning and id136

(cid:73) maintain the k best hypotheses [johansson and nugues 2006]:

parse(w1, . . . , wn)
1 beam     {([ ]s , [0, 1, . . . , n]b ,{ })}
2 while    c     beam [bc (cid:54)= [ ]]
3
4
5
6
7

beam     top(k, newbeam)
return g = ({0, 1, . . . , n}, atop(1, beam))

foreach c     beam
foreach t

add(t(c), newbeam)

(cid:73) note:

(cid:73) score(c0, . . . , cm) =(cid:80)m

(cid:73) simple combination of locally normalized classi   er scores
(cid:73) marginal gains in accuracy

i=1 w    f(ci   1, ti )

recent advances in id33

14(54)

improved learning and id136

id170

(cid:73) parsing as id170 [zhang and clark 2008]:

(cid:73) minimize loss over entire transition sequence
(cid:73) use id125 to    nd highest-scoring sequence

(cid:73) factored feature representations:

m(cid:88)

f(c0, . . . , cm) =

f(ci   1, ti )

i=1

(cid:73) online learning from oracle transition sequences:

(cid:73) structured id88 [collins 2002]
(cid:73) early update [collins and roark 2004]
(cid:73) max-violation update [huang et al. 2012]

recent advances in id33

15(54)

beam size and training iterations

improved learning and id136

[zhang and clark 2008]

recent advances in id33

16(54)

the best of two worlds?

improved learning and id136

(cid:73) like graph-based id33 (mstparser):
(cid:73) global learning     minimize loss over entire sentence
(cid:73) non-greedy search     accuracy increases with beam size
(cid:73) like (old school) transition-based parsing (maltparser):

(cid:73) highly e   cient     complexity still linear for    xed beam size
(cid:73) rich features     no constraints from parsing algorithm

recent advances in id33

17(54)

precision by dependency length

improved learning and id136

[zhang and nivre 2012]

recent advances in id33

18(54)

24681012140.40.50.60.70.80.9mstmaltzpareven richer feature models

improved learning and id136

zpar malt
89.37
92.18
baseline
   0.14
+0.07
+distance
+0.24
0.00
+valency
   0.29
+unigrams
+0.40
+third-order +0.18
0.00
+0.07 +0.06
+label set
extended
93.14
89.00

[zhang and nivre 2011, zhang and nivre 2012]

(cid:73) adding graph-based features may require special techniques

[zhang and clark 2008, bohnet and kuhn 2012]

recent advances in id33

19(54)

id145

improved learning and id136

(cid:73) if id125 reduces search errors, why not exact id136?
(cid:73) id145 for transition-based parsers:

(cid:73) using a graph-structured stack [huang and sagae 2010]
(cid:73) using push-computations [kuhlmann et al. 2011]

(cid:73) adds constraints on feature representations

recent advances in id33

20(54)

deduction system for arc-eager parsing

improved learning and id136

items:

goal:

axiom:

rules:

[i b, j]     (s, i|b, a)    

(cid:40)

b =

    (s|i, j|b(cid:48), a(cid:48))

1 if [[h(i)     a(cid:48)]]

0 otherwise

[00, n + 1]
[00, 1]

shift:
reduce:
right-arc:
left-arc:

[i b, j]     [j 0, j + 1]
[i b, m]     [m1, j]     [i b, j]
[i b, j]     [j 1, j + 1]
[i b, m]     [m0, j]     [i b, j]

[kuhlmann et al. 2011]

recent advances in id33

21(54)

theory and practice

improved learning and id136

(cid:73) theoretical results:

(cid:73) arc-eager parsing in o(n3) time (cf. eisner)
(cid:73) arc-standard parsing in o(n5) time (cf. cky)

(cid:73) in practice:

(cid:73) results hold only for very simplistic feature models
(cid:73) practical implementations use id125
(cid:73) bene   ts from ambiguity packing

[huang and sagae 2010]

recent advances in id33

22(54)

 2370 2373 2376 2379 2382 2385 2388 2391 2394 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35avg. model scoreb=16b=64dpnon-dp 92.2 92.3 92.4 92.5 92.6 92.7 92.8 92.9 93 93.1 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35dependency accuracyb=16b=64dpnon-dp(a)searchqualityvs.time(fullmodel)(b)parsingaccuracyvs.time(fullmodel) 2290 2295 2300 2305 2310 2315 2320 2325 2330 2335 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35avg. model scoreb=16b=64dpnon-dp 88.5 89 89.5 90 90.5 91 91.5 92 92.5 93 93.5 2280 2300 2320 2340 2360 2380 2400dependency accuracyfull, dpfull, non-dpedge-factor, dpedge-factor, non-dp(c)searchqualityvs.time(edge-factoredmodel)(d)correlationb/wparsing(y)andsearch(x)figure5:speedcomparisonsbetweendpandnon-dp,withbeamsizebranging2 16fordpand2 64fornon-dp.speedismeasuredbyavg.parsingtime(secs)persentenceonxaxis.withthesamelevelofsearchqualityorparsingaccuracy,dp(atb=16)is 4.8timesfasterthannon-dp(atb=64)withthefullmodelinplots(a)-(b),or 8timesfasterwiththesimpli   ededge-factoredmodelinplot(c).plot(d)showsthe(roughlylinear)correlationbetweenparsingaccuracyandsearchquality(avg.modelscore).10010210410610810101012 0 10 20 30 40 50 60 70number of trees exploredsentence lengthdp forestnon-dp (16) 93 94 95 96 97 98 99 64 32 16 8 4 1oracle precision kdp forest (98.15)dp k-best in forestnon-dp k-best in beam(a)sizesofsearchspaces(b)oracleprecisionondevfigure6:dpsearchesoveraforestofexponentiallymanytrees,whichalsoproducesbetterandlongerk-bestlistswithhigheroracles,whilenon-dponlyexploresbtreesallowedinthebeam(b=16here).1083 2370 2373 2376 2379 2382 2385 2388 2391 2394 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35avg. model scoreb=16b=64dpnon-dp 92.2 92.3 92.4 92.5 92.6 92.7 92.8 92.9 93 93.1 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35dependency accuracyb=16b=64dpnon-dp(a)searchqualityvs.time(fullmodel)(b)parsingaccuracyvs.time(fullmodel) 2290 2295 2300 2305 2310 2315 2320 2325 2330 2335 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35avg. model scoreb=16b=64dpnon-dp 88.5 89 89.5 90 90.5 91 91.5 92 92.5 93 93.5 2280 2300 2320 2340 2360 2380 2400dependency accuracyfull, dpfull, non-dpedge-factor, dpedge-factor, non-dp(c)searchqualityvs.time(edge-factoredmodel)(d)correlationb/wparsing(y)andsearch(x)figure5:speedcomparisonsbetweendpandnon-dp,withbeamsizebranging2 16fordpand2 64fornon-dp.speedismeasuredbyavg.parsingtime(secs)persentenceonxaxis.withthesamelevelofsearchqualityorparsingaccuracy,dp(atb=16)is 4.8timesfasterthannon-dp(atb=64)withthefullmodelinplots(a)-(b),or 8timesfasterwiththesimpli   ededge-factoredmodelinplot(c).plot(d)showsthe(roughlylinear)correlationbetweenparsingaccuracyandsearchquality(avg.modelscore).10010210410610810101012 0 10 20 30 40 50 60 70number of trees exploredsentence lengthdp forestnon-dp (16) 93 94 95 96 97 98 99 64 32 16 8 4 1oracle precision kdp forest (98.15)dp k-best in forestnon-dp k-best in beam(a)sizesofsearchspaces(b)oracleprecisionondevfigure6:dpsearchesoveraforestofexponentiallymanytrees,whichalsoproducesbetterandlongerk-bestlistswithhigheroracles,whilenon-dponlyexploresbtreesallowedinthebeam(b=16here).1083the need for speed

improved learning and id136

(cid:73) id125 helps but slows down the parser
(cid:73) id145 in addition constrains feature model
(cid:73) what can we do to maintain the highest speed?

(cid:73) easy-   rst parsing     give up left-to-right incremental search
(cid:73) dynamic oracles     learn how to recover from errors

(cid:73) these two ideas can be combined

recent advances in id33

23(54)

easy-first non-directional parsing

improved learning and id136

(cid:73) process dependencies from easy to hard (not left to right) and

from local to global (bottom up) [goldberg and elhadad 2010]

con   guration:

initial:

terminal:

[l = list, a = arcs]

(l, a)
([0, 1, . . . , n],{ })
([0], a)

attach-right(i, k):
([v1, . . . , vm], a)     ([v1, . . . , vi   1, vi+1, . . . , vm], a     {(vi+1, vi , k)})
attach-left(i, k):
([v1, . . . , vm], a)     ([v1, . . . , vi , vi+2, . . . , vm], a     {(vi , vi+1, k)})

recent advances in id33

24(54)

parsing algorithm

improved learning and id136

(cid:73) given an oracle o that selects the highest-con   dence

transition o(c), parsing is deterministic:

parse(w1, . . . , wn)
1
c     ([0, 1, . . . , n],{ })
2 while length(lc ) > 1
3
4
5

t     o(c)
c     t(c)

return g = ({0, 1, . . . , n}, ac )

(cid:73) number of possible transitions grows with sentence length
(cid:73) parsing in o(n log n) time with priority heap

recent advances in id33

25(54)

parsing example

improved learning and id136

[goldberg and elhadad 2010]

recent advances in id33

26(54)

(1)attachright(2)abrownfoxjumpedwithjoy-157-27-68403-197-47-152-2432313(2)attachright(1)afoxbrownjumpedwithjoy-52314-1590-176-14624612(3)attachright(1)foxabrownjumpedwithjoy-133270-149-15424610(4)attachleft(2)jumpedfoxabrownwithjoy-161-435186-2(5)attachleft(1)jumpedfoxabrownwithjoy430-232(6)jumpedfoxabrownwithjoyfigure1:parsingthesentence   abrownfoxjumpedwithjoy   .roundedarcsrepresentpossibleactions.tionallyintensivesampling-basedmethods(naka-gawa,2007).asaresult,thesemodels,whileaccu-rate,areslow(o(n3)forprojective,   rst-ordermod-els,higherpolynomialsforhigher-ordermodels,andworseforrichertree-featuremodels).weproposeanewcategoryofdependencypars-ingalgorithms,inspiredby(shenetal.,2007):non-directionaleasy-   rstparsing.thisisagreedy,de-terministicparsingapproach,whichrelaxestheleft-to-rightprocessingorderoftransition-basedpars-ingalgorithms.bydoingso,weallowtheex-plicitincorporationofrichstructuralfeaturesde-rivedfrombothsidesoftheattachmentpoint,andimplicitlytakeintoaccounttheentirepreviouslyde-rivedstructureofthewholesentence.thisexten-sionallowstheincorporationofmuchricherfeaturesthanthoseavailabletotransition-andespeciallytograph-basedparsers,andgreatlyreducesthelocal-ityoftransition-basedalgorithmdecisions.ontheotherhand,itisstillagreedy,best-   rstalgorithid113adingtoanef   cientimplementation.wepresentaconcreteo(nlogn)parsingalgo-rithm,whichsigni   cantlyoutperformsstate-of-the-arttransition-basedparsers,whileclosingthegaptograph-basedparsers.2easy-   rstparsingwhenhumanscomprehendanaturallanguagesen-tence,theyarguablydoitinanincremental,left-to-rightmanner.however,whenhumansconsciouslyannotateasentencewithsyntacticstructure,theyhardlyeverworkin   xedleft-to-rightorder.rather,theystartbybuildingseveralisolatedconstituentsbymakingeasyandlocalattachmentdecisionsandonlythencombinetheseconstituentsintobiggerconstituents,jumpingback-and-forthoverthesen-tenceandproceedingfromeasytoharderphenom-enatoanalyze.whengettingtotheharderdecisionsalotofstructureisalreadyinplace,andthisstruc-turecanbeusedindecidingacorrectattachment.ourparserfollowsasimilarkindofannotationprocess:startingfromeasyattachmentdecisions,andproceedingtoharderandharderones.whenmakinglaterdecisions,theparserhasaccesstotheentirestructurebuiltinearlierstages.duringthetrainingprocess,theparserlearnsitsownnotionofeasyandhard,andlearnstodeferspeci   ckindsofdecisionsuntilmorestructureisavailable.3parsingalgorithmour(projective)parsingalgorithmbuildstheparsetreebottomup,usingtwokindsofactions:at-tachleft(i)andattachright(i).theseactionsareappliedtoalistofpartialstructuresp1,...,pk,calledpending,whichisinitializedwiththenwordsofthesentencew1,...,wn.eachac-oracles revisited

improved learning and id136

(cid:73) how do we train the easy-   rst parser?
(cid:73) recall our training procedure for greedy parsers:

(cid:73) reconstruct oracle transition sequence for each sentence
(cid:73) construct training data set d = {(c, t)| o(c) = t}
(cid:73) maximize accuracy of local predictions o(c) = t

(cid:73) presupposes a unique optimal transition for each con   guration

(cid:73) does not make sense for the easy-   rst parser
(cid:73) turns out to be a bad idea in general

recent advances in id33

27(54)

online learning with a conventional oracle

improved learning and id136

for j in 1..n

for i in 1..k

learn({t1, . . . , tn})
1 w     0.0
2
3
4
5
6
7
8
9
10
11

return w

t   
to     o(c, ti )
if t   

c     ([ ], [0, 1, . . . , nj ],{ })
while bc (cid:54)= [ ]
    argmaxt w    f(c, t)
(cid:54)= to
w     w + f(c, to)     f(c, t   )
c     to(c)

recent advances in id33

28(54)

online learning with a conventional oracle

improved learning and id136

for j in 1..n

for i in 1..k

learn({t1, . . . , tn})
1 w     0.0
2
3
4
5
6
7
8
9
10
11

return w

t   
to     o(c, ti )
if t   

c     ([ ], [0, 1, . . . , nj ],{ })
while bc (cid:54)= [ ]
    argmaxt w    f(c, t)
(cid:54)= to
w     w + f(c, to)     f(c, t   )
c     to(c)

(cid:73) oracle o(c, ti ) returns the optimal transition for c and ti

recent advances in id33

28(54)

conventional oracle for arc-eager parsing

improved learning and id136

                     

o(c, t ) =

(cid:73) correct:

left-arc
right-arc
reduce
shift

if top(sc )        rst(bc ) in t
if top(sc )        rst(bc ) in t
if    v < top(sc ) : v        rst(bc ) in t
otherwise

(cid:73) derives t in a con   guration sequence co,t = c0, . . . , cm

(cid:73) problems:

(cid:73) deterministic: ignores other derivations of t
(cid:73) incomplete: valid only for con   gurations in co,t

recent advances in id33

29(54)

improved learning and id136

oracle parse

transitions:

stack
[ ]

bu   er
[root, he, sent, her, a, letter, .]

arcs

root

p

dobj

nsubj

iobj

det

root he
root pron

sent
verb

a
her
pron det

letter
noun

.
.

recent advances in id33

30(54)

improved learning and id136

oracle parse

transitions: sh

stack
[root]

bu   er
[he, sent, her, a, letter, .]

arcs

root

p

dobj

nsubj

iobj

det

root he
root pron

sent
verb

a
her
pron det

letter
noun

.
.

recent advances in id33

30(54)

oracle parse

improved learning and id136

transitions: sh-ra

stack
[root, he]

bu   er
[sent, her, a, letter, .]

root

p

dobj

nsubj

iobj

det

root he
root pron

sent
verb

a
her
pron det

letter
noun

.
.

arcs

root

root

       sent

recent advances in id33

30(54)

oracle parse

improved learning and id136

transitions: sh-ra-la

stack
[root]

bu   er
[sent, her, a, letter, .]

root

p

dobj

nsubj

iobj

det

root he
root pron

sent
verb

a
her
pron det

letter
noun

.
.

arcs

root

he

root

sbj

       sent
       sent

recent advances in id33

30(54)

improved learning and id136

arcs

root

root

sbj

       sent
       sent

oracle parse

transitions: sh-ra-la-sh

stack
[root, sent]

bu   er
[her, a, letter, .]

he

root

p

dobj

nsubj

iobj

det

root he
root pron

sent
verb

a
her
pron det

letter
noun

.
.

recent advances in id33

30(54)

oracle parse

transitions: sh-ra-la-sh-ra

stack
[root, sent, her]

bu   er
[a, letter, .]

root

p

dobj

nsubj

iobj

det

root he
root pron

sent
verb

a
her
pron det

letter
noun

.
.

improved learning and id136

arcs

root

he

sent

root

sbj

       sent
       sent
       her

iobj

recent advances in id33

30(54)

oracle parse

improved learning and id136

transitions: sh-ra-la-sh-ra-sh

stack
[root, sent, her, a] [letter, .]

bu   er

root

p

dobj

nsubj

iobj

det

root he
root pron

sent
verb

a
her
pron det

letter
noun

.
.

arcs

root

root

sbj

       sent
       sent
       her

iobj

he

sent

recent advances in id33

30(54)

oracle parse

improved learning and id136

transitions: sh-ra-la-sh-ra-sh-la

stack
[root, sent, her]

bu   er
[letter, .]

root

p

dobj

nsubj

iobj

det

root he
root pron

sent
verb

a
her
pron det

letter
noun

.
.

arcs

root

sbj

he

root

       sent
       sent
sent
       her
a det
       letter

iobj

recent advances in id33

30(54)

oracle parse

improved learning and id136

transitions: sh-ra-la-sh-ra-sh-la-re

stack
[root, sent]

bu   er
[letter, .]

root

p

dobj

nsubj

iobj

det

root he
root pron

sent
verb

a
her
pron det

letter
noun

.
.

arcs

root

sbj

he

root

       sent
       sent
sent
       her
a det
       letter

iobj

recent advances in id33

30(54)

oracle parse

improved learning and id136

transitions: sh-ra-la-sh-ra-sh-la-re-ra

stack
[root, sent, letter] [.]

bu   er

root

p

dobj

nsubj

iobj

det

root he
root pron

sent
verb

a
her
pron det

letter
noun

.
.

arcs

root

sbj

iobj

he

root

       sent
       sent
sent
       her
a det
       letter
sent

dobj

       letter

recent advances in id33

30(54)

oracle parse

improved learning and id136

transitions: sh-ra-la-sh-ra-sh-la-re-ra-re

stack
[root, sent]

bu   er
[.]

root

p

dobj

nsubj

iobj

det

root he
root pron

sent
verb

a
her
pron det

letter
noun

.
.

arcs

root

sbj

iobj

he

root

       sent
       sent
sent
       her
a det
       letter
sent

dobj

       letter

recent advances in id33

30(54)

oracle parse

improved learning and id136

transitions: sh-ra-la-sh-ra-sh-la-re-ra-re-ra

stack
[root, sent, .]

bu   er
[ ]

root

p

dobj

nsubj

iobj

det

root he
root pron

sent
verb

a
her
pron det

letter
noun

.
.

arcs

root

sbj

iobj

he

root

       sent
       sent
sent
       her
a det
       letter
sent
sent

       letter
       .

dobj

p

recent advances in id33

30(54)

non-determinisim

improved learning and id136

transitions:

sh-ra-la-sh-ra-sh-la-re-ra-re-ra
sh-ra-la-sh-ra

stack
[root, sent, her]

bu   er
[a, letter, .]

root

p

dobj

nsubj

iobj

det

root she
root pron

sent him a
pron det
verb

letter
noun

.
.

arcs

root

root

sbj

       sent
       sent
       her

iobj

he

sent

recent advances in id33

31(54)

non-determinisim

improved learning and id136

transitions:

sh-ra-la-sh-ra-sh-la-re-ra-re-ra
sh-ra-la-sh-ra-re

stack
[root, sent]

bu   er
[a, letter, .]

root

p

dobj

nsubj

iobj

det

root she
root pron

sent him a
pron det
verb

letter
noun

.
.

arcs

root

root

sbj

       sent
       sent
       her

iobj

he

sent

recent advances in id33

31(54)

non-determinisim

improved learning and id136

transitions:

sh-ra-la-sh-ra-sh-la-re-ra-re-ra
sh-ra-la-sh-ra-re-sh

stack
[root, sent, a]

bu   er
[letter, .]

root

p

dobj

nsubj

iobj

det

root she
root pron

sent him a
pron det
verb

letter
noun

.
.

arcs

root

root

sbj

       sent
       sent
       her

iobj

he

sent

recent advances in id33

31(54)

non-determinisim

improved learning and id136

transitions:

sh-ra-la-sh-ra-sh-la-re-ra-re-ra
sh-ra-la-sh-ra-re-sh-la

stack
[root, sent]

bu   er
[letter, .]

root

p

dobj

nsubj

iobj

det

root she
root pron

sent him a
pron det
verb

letter
noun

.
.

arcs

root

sbj

he

root

       sent
       sent
       her
sent
a det
       letter

iobj

recent advances in id33

31(54)

non-determinisim

improved learning and id136

transitions:

sh-ra-la-sh-ra-sh-la-re-ra-re-ra
sh-ra-la-sh-ra-re-sh-la-ra

stack
[root, sent, letter] [.]

bu   er

root

p

dobj

nsubj

iobj

det

root she
root pron

sent him a
pron det
verb

letter
noun

.
.

arcs

root

sbj

iobj

he

root

       sent
       sent
       her
sent
a det
       letter
sent

dobj

       letter

recent advances in id33

31(54)

non-determinisim

improved learning and id136

transitions:

sh-ra-la-sh-ra-sh-la-re-ra-re-ra
sh-ra-la-sh-ra-re-sh-la-ra-re

stack
[root, sent]

bu   er
[.]

root

p

dobj

nsubj

iobj

det

root she
root pron

sent him a
pron det
verb

letter
noun

.
.

arcs

root

sbj

iobj

he

root

       sent
       sent
       her
sent
a det
       letter
sent

dobj

       letter

recent advances in id33

31(54)

non-determinisim

improved learning and id136

transitions:

sh-ra-la-sh-ra-sh-la-re-ra-re-ra
sh-ra-la-sh-ra-re-sh-la-ra-re-ra

stack
[root, sent, .]

bu   er
[ ]

root

p

dobj

nsubj

iobj

det

root she
root pron

sent him a
pron det
verb

letter
noun

.
.

arcs

root

sbj

iobj

he

root

       sent
       sent
       her
sent
a det
       letter
sent
sent

       letter
       .

dobj

p

recent advances in id33

31(54)

improved learning and id136

non-optimality

transitions:

sh-ra-la-sh-ra-sh-la-re-ra-re-ra
sh-ra-la-sh

stack
[root, sent]

bu   er
[her, a, letter, .]

root

p

dobj

nsubj

iobj

det

root she
root pron

sent him a
verb
pron det

letter
noun

.
.

arcs

root

he

root

sbj

       sent
       sent

recent advances in id33

32(54)

improved learning and id136

non-optimality

transitions:

sh-ra-la-sh-ra-sh-la-re-ra-re-ra
sh-ra-la-sh-sh

stack
[root, sent, her]

bu   er
[a, letter, .]

root

p

dobj

nsubj

iobj

det

root she
root pron

sent him a
verb
pron det

letter
noun

.
.

arcs

root

he

root

sbj

       sent
       sent

recent advances in id33

32(54)

improved learning and id136

non-optimality

transitions:

sh-ra-la-sh-ra-sh-la-re-ra-re-ra
sh-ra-la-sh-sh-sh

stack
[root, sent, her, a]

bu   er
[letter, .]

he

root

p

dobj

nsubj

iobj

det

root she
root pron

sent him a
verb
pron det

letter
noun

.
.

arcs

root

root

sbj

       sent
       sent

recent advances in id33

32(54)

improved learning and id136

non-optimality

transitions:

sh-ra-la-sh-ra-sh-la-re-ra-re-ra
sh-ra-la-sh-sh-sh-la

stack
[root, sent, her]

bu   er
[letter, .]

root

p

dobj

nsubj

iobj

det

root she
root pron

sent him a
verb
pron det

letter
noun

.
.

arcs

root

sbj

root

       sent
he
       sent
a det
       letter

recent advances in id33

32(54)

improved learning and id136

non-optimality

transitions:

sh-ra-la-sh-ra-sh-la-re-ra-re-ra
sh-ra-la-sh-sh-sh-la-sh

stack
[root, sent, her, letter]

bu   er
[.]

root

p

dobj

nsubj

iobj

det

root she
root pron

sent him a
verb
pron det

letter
noun

.
.

arcs

root

sbj

root

       sent
he
       sent
a det
       letter

recent advances in id33

32(54)

improved learning and id136

non-optimality

transitions:

sh-ra-la-sh-ra-sh-la-re-ra-re-ra
sh-ra-la-sh-sh-sh-la-sh-sh [3/6]

stack
[root, sent, letter, .]

bu   er
[ ]

root

p

dobj

nsubj

iobj

det

root she
root pron

sent him a
verb
pron det

letter
noun

.
.

arcs

root

sbj

root

       sent
he
       sent
a det
       letter

recent advances in id33

32(54)

improved learning and id136

non-optimality

transitions:

sh-ra-la-sh-ra-sh-la-re-ra-re-ra
sh-ra-la-sh-sh-sh-la-sh-sh [3/6]
sh-ra-la-sh-sh-sh-la

stack
[root, sent, her]

bu   er
[letter, .]

root

p

dobj

nsubj

iobj

det

root she
root pron

sent him a
verb
pron det

letter
noun

.
.

arcs

root

sbj

root

       sent
he
       sent
a det
       letter

recent advances in id33

32(54)

non-optimality

improved learning and id136

transitions:

stack
[root, sent]

root

sh-ra-la-sh-ra-sh-la-re-ra-re-ra
sh-ra-la-sh-sh-sh-la-sh-sh [3/6]
sh-ra-la-sh-sh-sh-la-la

bu   er
[letter, .]

p

dobj

arcs

root

sbj

root

       sent
he
       sent
a det
       letter
her
       letter

?

nsubj

iobj

det

root she
root pron

sent him a
verb
pron det

letter
noun

.
.

recent advances in id33

32(54)

improved learning and id136

non-optimality

transitions:

sh-ra-la-sh-ra-sh-la-re-ra-re-ra
sh-ra-la-sh-sh-sh-la-sh-sh [3/6]
sh-ra-la-sh-sh-sh-la-la-ra

stack
[root, sent, letter]

bu   er
[.]

root

p

dobj

nsubj

iobj

det

root she
root pron

sent him a
verb
pron det

letter
noun

.
.

arcs

root

sbj

root

       sent
he
       sent
a det
       letter
       letter
her
       letter

sent

dobj

?

recent advances in id33

32(54)

non-optimality

improved learning and id136

sh-ra-la-sh-ra-sh-la-re-ra-re-ra
sh-ra-la-sh-sh-sh-la-sh-sh [3/6]
sh-ra-la-sh-sh-sh-la-la-ra-re

transitions:

stack
[root, sent]

root

bu   er
[.]

p

dobj

nsubj

iobj

det

root she
root pron

sent him a
verb
pron det

letter
noun

.
.

arcs

root

sbj

root

       sent
he
       sent
a det
       letter
       letter
her
       letter

sent

dobj

?

recent advances in id33

32(54)

non-optimality

improved learning and id136

transitions:

sh-ra-la-sh-ra-sh-la-re-ra-re-ra
sh-ra-la-sh-sh-sh-la-sh-sh [3/6]
sh-ra-la-sh-sh-sh-la-la-ra-re-ra [5/6]

stack
[root, sent, .]

bu   er
[ ]

root

p

dobj

nsubj

iobj

det

root she
root pron

sent him a
verb
pron det

letter
noun

.
.

arcs

root

sbj

root

       sent
he
       sent
a det
       letter
       letter
her
       letter
       .

sent
sent

dobj

p

?

recent advances in id33

32(54)

dynamic oracles

improved learning and id136

(cid:73) optimality:

(cid:73) oracle:

(cid:73) a transition is optimal if the best tree remains reachable
(cid:73) best tree = argmint (cid:48) l(t , t (cid:48))
(cid:73) boolean function o(c, t, t ) = true if t is optimal for c and t
(cid:73) non-deterministic: more than one transition can be optimal
(cid:73) complete: correct for all con   gurations

(cid:73) new problem:

(cid:73) how do we know which trees are reachable?

recent advances in id33

33(54)

reachability for arcs and trees

improved learning and id136

(cid:73) arc reachability:

(cid:73) an arc wi     wj is reachable in c i    wi     wj     ac ,
or wi     sc     bc and wj     bc (same for wi     wj )

(cid:73) tree reachability:

(cid:73) a (projective) tree t is reachable in c i    every arc in t is

reachable in c

(cid:73) arc-decomposable systems [goldberg and nivre 2013]:

(cid:73) tree reachability reduces to arc reachability
(cid:73) holds for some transition systems but not all

(cid:73) arc-eager and easy-   rst are arc-decomposable
(cid:73) arc-standard is not decomposable

recent advances in id33

34(54)

improved learning and id136

oracles for arc-decomposable systems

o(c, t, t ) =

if [r(c)     r(t(c))]     t =    

false otherwise

(cid:26) true

true

otherwise

o(c, la, t ) =

arc-eager

where r(c)     {a | a is an arc reachable in c }
(cid:26) false if    w     bc : s     w     t (except s     b)
(cid:26) false if    w     sc : w     b     t (except s     b)
(cid:26) false if    w     bc : s     w     t
(cid:26) false if    w     sc : w     b     t

o(c, ra, t ) =

o(c, sh, t ) =

o(c, re, t ) =

otherwise

otherwise

true

true

true

otherwise

notation:

s = node on top of the stack s
b =    rst node in the bu   er b

recent advances in id33

35(54)

online learning with a dynamic oracle

improved learning and id136

for j in 1..n

for i in 1..k

learn({t1, . . . , tn})
1 w     0.0
2
3
4
5
6
7
8
9
10
11

return w

c     ([ ]s , [w1, . . . , wnj ]b ,{ })
while bc (cid:54)= [ ]
    argmaxt w    f(c, t)

t   
to     argmaxt   {t|o(c,t,ti )} w    f(c, t)
if t   
c     choice(to(c), t   (c))

(cid:54)= to
w     w + f(c, to)     f(c, t   )

recent advances in id33

36(54)

online learning with a dynamic oracle

improved learning and id136

for j in 1..n

for i in 1..k

learn({t1, . . . , tn})
1 w     0.0
2
3
4
5
6
7
8
9
10
11

return w

c     ([ ]s , [w1, . . . , wnj ]b ,{ })
while bc (cid:54)= [ ]
    argmaxt w    f(c, t)

t   
to     argmaxt   {t|o(c,t,ti )} w    f(c, t)
if t   
c     choice(to(c), t   (c))

(cid:54)= to
w     w + f(c, to)     f(c, t   )

(cid:73) ambiguity: use model score to break ties
(cid:73) exploration: follow model prediction even if not optimal

recent advances in id33

36(54)

improved learning and id136

[goldberg and nivre 2012]

recent advances in id33

37(54)

ambiguity and exploration

improved learning and id136

(cid:73) lessons from dynamic oracles:

(cid:73) do not hide spurious ambiguity from the parser     exploit it
(cid:73) let the parser explore the consequences of its own mistakes

(cid:73) related work:

(cid:73) id64 [choi and palmer 2011]
(cid:73) selectional branching [choi and mccallum 2013]
(cid:73) non-monotonic parsing [honnibal et al. 2013]
(cid:73) dynamic parsing strategy [sartorio et al. 2013]

recent advances in id33

38(54)

summary: learning and id136

improved learning and id136

(cid:73) id125 and id170:

(cid:73) explores a larger search space at training and parsing time
(cid:73) can be combined with id145

(cid:73) dynamic oracles:

(cid:73) explores a larger search space only at training time
(cid:73) can be combined with selectional branching and with    exible

transition systems (easy-   rst, dynamic, non-monotonic)

recent advances in id33

39(54)

non-projective parsing

non-projective parsing

(cid:73) so far only projective parsing models
(cid:73) non-projective parsing harder even with greedy id136

(cid:73) non-projective: n(n     1) arcs to consider     o(n2)
(cid:73) projective: at most 2(n     1) arcs to consider     o(n)
(cid:73) conjecture: arc-decomposability presupposes projectivity

(cid:73) also harder to construct dynamic oracles

recent advances in id33

40(54)

previous approaches

non-projective parsing

(cid:73) pseudo-projective parsing [nivre and nilsson 2005]

(cid:73) preprocess training data, post-process parser output
(cid:73) approximate encoding with incomplete coverage
(cid:73) relatively high precision but low recall

(cid:73) extended arc transitions [attardi 2006]

(cid:73) transitions that add arcs between non-adjacent subtrees
(cid:73) upper bound on arc degree (limited to local relations)
(cid:73) exact id145 algorithm [cohen et al. 2011]

(cid:73) list-based algorithms [covington 2001, nivre 2007]

(cid:73) consider all word pairs instead of adjacent subtrees
(cid:73) increases parsing complexity (and training time)
(cid:73) improved accuracy and e   ciency by adding    projective

transitions    [choi and palmer 2011]

recent advances in id33

41(54)

novel approaches

non-projective parsing

(cid:73) online reordering [nivre 2009, nivre et al. 2009]:

(cid:73) reorder words during parsing to make tree projective
(cid:73) add a special transition for swapping adjacent words
(cid:73) quadratic time in the worst case but linear in the best case

(cid:73) multiplanar parsing [g  omez-rodr    guez and nivre 2010]:

(cid:73) factor dependency trees into k planes without crossing arcs
(cid:73) use k stacks to parse each plane separately
(cid:73) linear time parsing with constant k

recent advances in id33

42(54)

non-projective parsing

projectivity and word order

(cid:73) projectivity is a property of a dependency tree only in relation

to a particular word order

(cid:73) words can always be reordered to make the tree projective
(cid:73) given a dependency tree t = (v , a, <), let the projective

order <p be the order de   ned by an inorder traversal of t with
respect to < [vesel  a et al. 2004]

root

det

root a hearing
root det
1

noun

0

2

prep

aux

p

tmod

pobj

det

scheduled

verb

7

on
prep

3

the
det
4

issue
noun

5

today
adv
8

.
.
9

nsubj

is
verb

6

recent advances in id33

43(54)

non-projective parsing

projectivity and word order

(cid:73) projectivity is a property of a dependency tree only in relation

to a particular word order

(cid:73) words can always be reordered to make the tree projective
(cid:73) given a dependency tree t = (v , a, <), let the projective

order <p be the order de   ned by an inorder traversal of t with
respect to < [vesel  a et al. 2004]

root

det

root a hearing
root det
1

noun

0

2

prep

aux

p

tmod

pobj

det

scheduled

verb

7

on
prep

3

the
det
4

issue
noun

5

today
adv
8

.
.
9

nsubj

is
verb

6

recent advances in id33

43(54)

non-projective parsing

projectivity and word order

(cid:73) projectivity is a property of a dependency tree only in relation

to a particular word order

(cid:73) words can always be reordered to make the tree projective
(cid:73) given a dependency tree t = (v , a, <), let the projective

order <p be the order de   ned by an inorder traversal of t with
respect to < [vesel  a et al. 2004]

root

det

root a hearing
root det
1

noun

0

2

prep

aux

p

tmod

pobj

det

scheduled

verb

7

on
prep

3

the
det
4

issue
noun

5

today
adv
8

.
.
9

nsubj

is
verb

6

recent advances in id33

43(54)

non-projective parsing

projectivity and word order

(cid:73) projectivity is a property of a dependency tree only in relation

to a particular word order

(cid:73) words can always be reordered to make the tree projective
(cid:73) given a dependency tree t = (v , a, <), let the projective

order <p be the order de   ned by an inorder traversal of t with
respect to < [vesel  a et al. 2004]

root

det

root a hearing
root det
1

noun

0

2

prep

aux

p

tmod

pobj

det

scheduled

verb

7

on
prep

3

the
det
4

issue
noun

5

today
adv
8

.
.
9

nsubj

is
verb

6

recent advances in id33

43(54)

non-projective parsing

projectivity and word order

(cid:73) projectivity is a property of a dependency tree only in relation

to a particular word order

(cid:73) words can always be reordered to make the tree projective
(cid:73) given a dependency tree t = (v , a, <), let the projective

order <p be the order de   ned by an inorder traversal of t with
respect to < [vesel  a et al. 2004]

root

det

root a hearing
root det
1

noun

0

2

prep

aux

p

tmod

pobj

det

scheduled

verb

7

on
prep

3

the
det
4

issue
noun

5

today
adv
8

.
.
9

nsubj

is
verb

6

recent advances in id33

43(54)

non-projective parsing

projectivity and word order

(cid:73) projectivity is a property of a dependency tree only in relation

to a particular word order

(cid:73) words can always be reordered to make the tree projective
(cid:73) given a dependency tree t = (v , a, <), let the projective

order <p be the order de   ned by an inorder traversal of t with
respect to < [vesel  a et al. 2004]

root

det

root a hearing
root det
1

noun

0

2

prep

aux

p

tmod

pobj

det

scheduled

verb

7

on
prep

3

the
det
4

issue
noun

5

today
adv
8

.
.
9

nsubj

is
verb

6

recent advances in id33

43(54)

non-projective parsing

projectivity and word order

(cid:73) projectivity is a property of a dependency tree only in relation

to a particular word order

(cid:73) words can always be reordered to make the tree projective
(cid:73) given a dependency tree t = (v , a, <), let the projective

order <p be the order de   ned by an inorder traversal of t with
respect to < [vesel  a et al. 2004]

root

det

root a hearing
root det
1

noun

0

2

prep

aux

p

tmod

pobj

det

scheduled

verb

7

on
prep

3

the
det
4

issue
noun

5

today
adv
8

.
.
9

nsubj

is
verb

6

recent advances in id33

43(54)

non-projective parsing

projectivity and word order

(cid:73) projectivity is a property of a dependency tree only in relation

to a particular word order

(cid:73) words can always be reordered to make the tree projective
(cid:73) given a dependency tree t = (v , a, <), let the projective

order <p be the order de   ned by an inorder traversal of t with
respect to < [vesel  a et al. 2004]

root

det

root a hearing
root det
1

noun

0

2

prep

aux

p

tmod

pobj

det

scheduled

verb

7

on
prep

3

the
det
4

issue
noun

5

today
adv
8

.
.
9

nsubj

is
verb

6

recent advances in id33

43(54)

non-projective parsing

projectivity and word order

(cid:73) projectivity is a property of a dependency tree only in relation

to a particular word order

(cid:73) words can always be reordered to make the tree projective
(cid:73) given a dependency tree t = (v , a, <), let the projective

order <p be the order de   ned by an inorder traversal of t with
respect to < [vesel  a et al. 2004]

root

det

root a hearing
root det
1

noun

0

2

prep

aux

p

tmod

pobj

det

scheduled

verb

7

on
prep

3

the
det
4

issue
noun

5

today
adv
8

.
.
9

nsubj

is
verb

6

recent advances in id33

43(54)

non-projective parsing

projectivity and word order

(cid:73) projectivity is a property of a dependency tree only in relation

to a particular word order

(cid:73) words can always be reordered to make the tree projective
(cid:73) given a dependency tree t = (v , a, <), let the projective

order <p be the order de   ned by an inorder traversal of t with
respect to < [vesel  a et al. 2004]

root

det

root a hearing
root det
1

noun

0

2

prep

aux

p

tmod

pobj

det

scheduled

verb

7

on
prep

3

the
det
4

issue
noun

5

today
adv
8

.
.
9

nsubj

is
verb

6

recent advances in id33

43(54)

non-projective parsing

projectivity and word order

(cid:73) projectivity is a property of a dependency tree only in relation

to a particular word order

(cid:73) words can always be reordered to make the tree projective
(cid:73) given a dependency tree t = (v , a, <), let the projective

order <p be the order de   ned by an inorder traversal of t with
respect to < [vesel  a et al. 2004]

root

det

root a hearing
root det
1

noun

0

2

prep

aux

p

tmod

pobj

det

scheduled

verb

7

on
prep

3

the
det
4

issue
noun

5

today
adv
8

.
.
9

nsubj

is
verb

6

recent advances in id33

43(54)

non-projective parsing

projectivity and word order

(cid:73) projectivity is a property of a dependency tree only in relation

to a particular word order

(cid:73) words can always be reordered to make the tree projective
(cid:73) given a dependency tree t = (v , a, <), let the projective

order <p be the order de   ned by an inorder traversal of t with
respect to < [vesel  a et al. 2004]

root

det

root a hearing
root det
1

noun

0

2

prep

aux

p

tmod

pobj

det

scheduled

verb

7

on
prep

3

the
det
4

issue
noun

5

today
adv
8

.
.
9

nsubj

is
verb

6

recent advances in id33

43(54)

non-projective parsing

projectivity and word order

(cid:73) projectivity is a property of a dependency tree only in relation

to a particular word order

(cid:73) words can always be reordered to make the tree projective
(cid:73) given a dependency tree t = (v , a, <), let the projective

order <p be the order de   ned by an inorder traversal of t with
respect to < [vesel  a et al. 2004]

root

det

root a hearing
root det
1

noun

0

2

prep

aux

p

tmod

pobj

det

scheduled

verb

7

on
prep

3

the
det
4

issue
noun

5

today
adv
8

.
.
9

nsubj

is
verb

6

recent advances in id33

43(54)

non-projective parsing

projectivity and word order

(cid:73) projectivity is a property of a dependency tree only in relation

to a particular word order

(cid:73) words can always be reordered to make the tree projective
(cid:73) given a dependency tree t = (v , a, <), let the projective

order <p be the order de   ned by an inorder traversal of t with
respect to < [vesel  a et al. 2004]

root

det

root a hearing
root det
1

noun

0

2

prep

aux

p

tmod

pobj

det

scheduled

verb

7

on
prep

3

the
det
4

issue
noun

5

today
adv
8

.
.
9

nsubj

is
verb

6

recent advances in id33

43(54)

non-projective parsing

projectivity and word order

(cid:73) projectivity is a property of a dependency tree only in relation

to a particular word order

(cid:73) words can always be reordered to make the tree projective
(cid:73) given a dependency tree t = (v , a, <), let the projective

order <p be the order de   ned by an inorder traversal of t with
respect to < [vesel  a et al. 2004]

root

det

root a hearing
root det
1

noun

0

2

prep

aux

p

tmod

pobj

det

scheduled

verb

7

on
prep

3

the
det
4

issue
noun

5

today
adv
8

.
.
9

nsubj

is
verb

6

recent advances in id33

43(54)

non-projective parsing

projectivity and word order

(cid:73) projectivity is a property of a dependency tree only in relation

to a particular word order

(cid:73) words can always be reordered to make the tree projective
(cid:73) given a dependency tree t = (v , a, <), let the projective

order <p be the order de   ned by an inorder traversal of t with
respect to < [vesel  a et al. 2004]

root

det

root a hearing
root det
1

noun

0

2

prep

aux

p

tmod

pobj

det

scheduled

verb

7

on
prep

3

the
det
4

issue
noun

5

today
adv
8

.
.
9

nsubj

is
verb

6

recent advances in id33

43(54)

non-projective parsing

projectivity and word order

(cid:73) projectivity is a property of a dependency tree only in relation

to a particular word order

(cid:73) words can always be reordered to make the tree projective
(cid:73) given a dependency tree t = (v , a, <), let the projective

order <p be the order de   ned by an inorder traversal of t with
respect to < [vesel  a et al. 2004]

root

det

root a hearing
root det
1

noun

0

2

prep

aux

p

tmod

pobj

det

scheduled

verb

7

on
prep

3

the
det
4

issue
noun

5

today
adv
8

.
.
9

nsubj

is
verb

6

recent advances in id33

43(54)

non-projective parsing

projectivity and word order

(cid:73) projectivity is a property of a dependency tree only in relation

to a particular word order

(cid:73) words can always be reordered to make the tree projective
(cid:73) given a dependency tree t = (v , a, <), let the projective

order <p be the order de   ned by an inorder traversal of t with
respect to < [vesel  a et al. 2004]

root

det

root a hearing
root det
1

noun

0

2

prep

aux

p

tmod

pobj

det

scheduled

verb

7

on
prep

3

the
det
4

issue
noun

5

today
adv
8

.
.
9

nsubj

is
verb

6

recent advances in id33

43(54)

non-projective parsing

transition system for online reordering

con   guration:

initial:

terminal:

shift:

right-arc(k):

left-arc(k):

swap:

[s = stack, b = bu   er, a = arcs]

(s, b, a)
([ ], [0, 1, . . . , n],{ })
([0], [ ], a)

(s, i|b, a)     (s|i, b, a)
(s|i|j, b, a)     (s|i, b, a     {(i, j, k)})
(s|i|j, b, a)     (s|j, b, a     {(j, i, k)})
(s|i|j, b, a)     (s|j, i|b, a)

i (cid:54)= 0

0 < i < j

recent advances in id33

44(54)

non-projective parsing

transition system for online reordering

con   guration:

initial:

terminal:

shift:

right-arc(k):

left-arc(k):

swap:

[s = stack, b = bu   er, a = arcs]

(s, b, a)
([ ], [0, 1, . . . , n],{ })
([0], [ ], a)

(s, i|b, a)     (s|i, b, a)
(s|i|j, b, a)     (s|i, b, a     {(i, j, k)})
(s|i|j, b, a)     (s|j, b, a     {(j, i, k)})
(s|i|j, b, a)     (s|j, i|b, a)

i (cid:54)= 0

0 < i < j

(cid:73) transition-based parsing with two interleaved processes:

1. sort words into projective order <p
2. build tree t by connecting adjacent subtrees

(cid:73) t is projective with respect to <p but not (necessarily) <

recent advances in id33

44(54)

example transition sequence

non-projective parsing

[ ]s [root, a, hearing, is, scheduled, on, the, issue, today, .]b

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root]s [a, hearing, is, scheduled, on, the, issue, today, .]b

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root, a]s [hearing, is, scheduled, on, the, issue, today, .]b

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root, a, hearing]s [is, scheduled, on, the, issue, today, .]b

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root, hearing]s [is, scheduled, on, the, issue, today, .]b

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root, hearing, is]s [scheduled, on, the, issue, today, .]b

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root, hearing, is, scheduled]s [on, the, issue, today, .]b

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root, hearing, scheduled]s [on, the, issue, today, .]b

det

aux

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root, hearing, scheduled, on]s [the, issue, today, .]b

det

aux

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root, hearing, scheduled, on, the]s [issue, today, .]b

det

aux

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root, hearing, scheduled, on, the, issue]s [today, .]b

det

aux

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root, hearing, scheduled, on, issue]s [today, .]b

det

aux

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root, hearing, scheduled, on]s [today, .]b

det

aux

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root, hearing, on]s [scheduled, today, .]b

det

aux

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root, hearing]s [scheduled, today, .]b

prep

aux

det

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root, hearing, scheduled]s [today, .]b

prep

aux

det

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root, scheduled]s [today, .]b

nsubj

prep

aux

det

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root, scheduled, today]s [.]b

nsubj

prep

aux

det

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root, scheduled]s [.]b

nsubj

prep

aux

det

tmod

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root, scheduled, .]s [ ]b

nsubj

prep

aux

det

tmod

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root, scheduled]s [ ]b

nsubj

prep

aux

det

p

tmod

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

example transition sequence

non-projective parsing

[root]s [ ]b

root

det

nsubj

prep

aux

tmod

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

45(54)

non-projective parsing

analysis

(cid:73) correctness:

(cid:73) sound and complete for the class of non-projective trees

(cid:73) complexity for greedy or id125 parsing:

(cid:73) quadratic running time in the worst case
(cid:73) linear running time in the average case

(cid:73) works well with id125 and id170

czech

german

projective
reordering

las uas las uas
88.5
80.8
83.9
90.9

86.3
89.1

86.2
88.7

[bohnet and nivre 2012]

recent advances in id33

46(54)

multiplanarity

non-projective parsing

(cid:73) multiplanarity is based on the notion of planarity:

(cid:73) a dependency graph is planar if it has no crossing arcs
(cid:73) a dependency graph is k-planar if it can be decomposed into

(at most) k planar graphs [yli-jyr  a 2003]

(cid:73) in most treebanks, well over 99% of the trees are at most

2-planar [g  omez-rodr    guez and nivre 2010]

(cid:73) we can parse k-planar graphs in linear time using k stacks

recent advances in id33

47(54)

1-planar transition system

non-projective parsing

con   guration:

initial:

terminal:

shift:

reduce:

right-arc(k):

left-arc(k):

[s = stack, b = bu   er, a = arcs]

(s, b, a)
([ ], [0, 1, . . . , n],{ })
(s, [ ], a)

(s, i|b, a)     (s|i, b, a)
(s|i, b, a)     (s, b, a)
(s|i, j|b, a)     (s|i, j|b, a     {(i, j, k)})
(s|i, j|b, a)     (s|i, j|b, a     {(j, i, k)})

  h(j, a)
  h(i, a)     i (cid:54)= 0

(cid:73) similar to the arc-eager system except:

(cid:73) reduce does not require popped node to have a head
(cid:73) left-arc/right-arc do not a   ect s or b

recent advances in id33

48(54)

non-projective parsing

2-planar transition system

con   guration: (s1, s2, b, a)

[s1 = stack 1, s2 = stack 2]

initial:

terminal:

shift:

reduce:

right-arc(k):

left-arc(k):

switch:

([ ], [ ], [0, 1, . . . , n],{ })
(s1, s2, [ ], a)

(s1, s2, i|b, a)     (s1|i, s2|i, b, a)
(s1|i, s2, b, a)     (s1, s2, b, a)
(s1|i, s2, j|b, a)     (s1|i, s2, j|b, a     {(i, j, k)})
(s1|i, s2, j|b, a)     (s1|i, s2, j|b, a     {(j, i, k)})
(s1, s2, b, a)     (s2, s1, b, a)

  h(j, a)
  h(i, a)     i (cid:54)= 0

(cid:73) similar to 1-planar system except:

(cid:73) shift pushes a node to both stacks
(cid:73) left-arc/right-arc/reduce only a   ect s1
(cid:73) switch swaps s1 and s2

recent advances in id33

49(54)

example transition sequence

non-projective parsing

[root, a, hearing, is, scheduled, on, the, issue, today, .]b

[ ]s1

[ ]s2

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

example transition sequence

non-projective parsing

[root]s1

[a, hearing, is, scheduled, on, the, issue, today, .]b

[root]s2

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

example transition sequence

non-projective parsing

[root, a]s1

[hearing, is, scheduled, on, the, issue, today, .]b

[root, a]s2

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

example transition sequence

non-projective parsing

[root, a]s1

[hearing, is, scheduled, on, the, issue, today, .]b

[root, a]s2

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

example transition sequence

non-projective parsing

[root]s1

[hearing, is, scheduled, on, the, issue, today, .]b

[root, a]s2

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

example transition sequence

non-projective parsing

[root, hearing]s1

[is, scheduled, on, the, issue, today, .]b

[root, a, hearing]s2

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

example transition sequence

non-projective parsing

[root, hearing, is]s1

[scheduled, on, the, issue, today, .]b

[root, a, hearing, is]s2

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

example transition sequence

non-projective parsing

[root, hearing, is]s1

[scheduled, on, the, issue, today, .]b

[root, a, hearing, is]s2

det

aux

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

example transition sequence

non-projective parsing

[root, hearing]s1

[scheduled, on, the, issue, today, .]b

[root, a, hearing, is]s2

det

aux

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

example transition sequence

non-projective parsing

[root, hearing]s1

[scheduled, on, the, issue, today, .]b

[root, a, hearing, is]s2

det

nsubj

aux

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

non-projective parsing

example transition sequence

[root]s1

[scheduled, on, the, issue, today, .]b

[root, a, hearing, is]s2

det

nsubj

aux

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

non-projective parsing

example transition sequence

[root]s1

[scheduled, on, the, issue, today, .]b

[root, a, hearing, is]s2

root

det

nsubj

aux

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

non-projective parsing

example transition sequence

[root, scheduled]s1

[on, the, issue, today, .]b

[root, a, hearing, is, scheduled]s2

root

det

nsubj

aux

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

example transition sequence

non-projective parsing

[root, a, hearing, is, scheduled]s1

[on, the, issue, today, .]b

[root, scheduled]s2

root

det

nsubj

aux

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

non-projective parsing

example transition sequence

[root, a, hearing, is]s1

[on, the, issue, today, .]b

[root, scheduled]s2

root

det

nsubj

aux

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

non-projective parsing

example transition sequence

[root, a, hearing]s1

[on, the, issue, today, .]b

[root, scheduled]s2

root

det

nsubj

aux

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

non-projective parsing

example transition sequence

[root, a, hearing]s1

[on, the, issue, today, .]b

[root, scheduled]s2

root

det

nsubj

prep

aux

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

non-projective parsing

example transition sequence

[root, a, hearing, on]s1

[the, issue, today, .]b

[root, scheduled, on]s2

root

det

nsubj

prep

aux

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

non-projective parsing

example transition sequence

[root, a, hearing, on, the]s1

[issue, today, .]b

[root, scheduled, on, the]s2

root

det

nsubj

prep

aux

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

non-projective parsing

example transition sequence

[root, a, hearing, on, the]s1

[issue, today, .]b

[root, scheduled, on, the]s2

root

det

nsubj

prep

aux

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

non-projective parsing

example transition sequence

[root, a, hearing, on]s1

[issue, today, .]b

[root, scheduled, on, the]s2

root

det

nsubj

prep

aux

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

non-projective parsing

example transition sequence

[root, a, hearing, on]s1

[issue, today, .]b

[root, scheduled, on, the]s2

root

det

nsubj

prep

aux

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

non-projective parsing

example transition sequence

[root, a, hearing, on, issue]s1

[today, .]b

[root, scheduled, on, the, issue]s2

root

det

nsubj

prep

aux

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

non-projective parsing

example transition sequence

[root, scheduled, on, the, issue]s1

[today, .]b

[root, a, hearing, on, issue]s2

root

det

nsubj

prep

aux

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

non-projective parsing

example transition sequence

[root, scheduled, on, the]s1

[today, .]b

[root, a, hearing, on, issue]s2

root

det

nsubj

prep

aux

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

non-projective parsing

example transition sequence

[root, scheduled, on]s1

[today, .]b

[root, a, hearing, on, issue]s2

root

det

nsubj

prep

aux

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

example transition sequence

non-projective parsing

[root, scheduled]s1

[today, .]b

[root, a, hearing, on, issue]s2

root

det

nsubj

prep

aux

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

example transition sequence

non-projective parsing

[root, scheduled]s1

[today, .]b

[root, a, hearing, on, issue]s2

root

det

nsubj

prep

aux

tmod

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

non-projective parsing

example transition sequence

[root, scheduled, today]s1

[.]b

[root, a, hearing, on, issue, today]s2

root

det

nsubj

prep

aux

tmod

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

non-projective parsing

example transition sequence

[root, scheduled]s1

[.]b

[root, a, hearing, on, issue, today]s2

root

det

nsubj

prep

aux

tmod

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

non-projective parsing

example transition sequence

[root, scheduled]s1

[.]b

[root, a, hearing, on, issue, today]s2

root

det

nsubj

prep

aux

p

tmod

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

non-projective parsing

example transition sequence

[root, scheduled, .]s1

[ ]b

[root, a, hearing, on, issue, today, .]s2

root

det

nsubj

prep

aux

p

tmod

pobj

det

root a hearing
root det

noun

is
verb

scheduled

verb

on
prep

the
det

issue
noun

today
adv

.
.

recent advances in id33

50(54)

morphology and syntax

joint morphological and syntactic analysis

(cid:73) morphological analysis in id33:

(cid:73) crucially assumed as input, not predicted by the parser
(cid:73) pipeline approach may lead to error propagation
(cid:73) most pid18-based parsers at least predict their own tags

(cid:73) recent interest in joint models for morphology and syntax:
(cid:73) graph-based [mcdonald 2006, lee et al. 2011, li et al. 2011]
(cid:73) transition-based [hatori et al. 2011, bohnet and nivre 2012]

(cid:73) can improve both morphology and syntax

recent advances in id33

51(54)

transition system for morphology and syntax

joint morphological and syntactic analysis

con   guration:

initial:

terminal:

[m = morphology]

(s, b, m, a)
([ ], [0, 1, . . . , n],{ },{ })
([0], [ ], m, a)

shift(p):

right-arc(k):

left-arc(k):

swap:

(s, i|b, m, a)     (s|i, b, m     {(i, m)}, a)
(s|i|j, b, m, a)     (s|i, b, m, a     {(i, j, k)})
(s|i|j, b, m, a)     (s|j, b, m, a     {(j, i, k)})
(s|i|j, b, m, a)     (s|j, i|b, m, a)

i (cid:54)= 0

0 < i < j

recent advances in id33

52(54)

transition system for morphology and syntax

joint morphological and syntactic analysis

con   guration:

initial:

terminal:

[m = morphology]

(s, b, m, a)
([ ], [0, 1, . . . , n],{ },{ })
([0], [ ], m, a)

shift(p):

right-arc(k):

left-arc(k):

swap:

(s, i|b, m, a)     (s|i, b, m     {(i, m)}, a)
(s|i|j, b, m, a)     (s|i, b, m, a     {(i, j, k)})
(s|i|j, b, m, a)     (s|j, b, m, a     {(j, i, k)})
(s|i|j, b, m, a)     (s|j, i|b, m, a)

i (cid:54)= 0

0 < i < j

(cid:73) transition-based parsing with three interleaved processes:
(cid:73) assign morphology when words are shifted onto the stack
(cid:73) optionally sort words into projective order <p
(cid:73) build dependency tree t by connecting adjacent subtrees

recent advances in id33

52(54)

joint morphological and syntactic analysis

parsing richly in   ected languages

(cid:73) full morphological analysis: lemma + postag + features

(cid:73) id125 and structured predication
(cid:73) parser selects from k best tags + features
(cid:73) rule-based morphology provides additional features

(cid:73) id74:

(cid:73) pm = morphology (postag + features)
(cid:73) las = labeled attachment score

czech

finnish

german hungarian russian
pm las pm las pm las pm las pm las
pipeline 93.0 83.1 88.8 79.9 89.1 91.8 96.1 88.4 92.6 87.4
joint
94.4 83.5 91.6 82.5 91.2 92.1 97.4 89.1 95.1 88.0

[bohnet et al. 2013]

recent advances in id33

53(54)

summary

conclusion

(cid:73) transition-based parsing:

(cid:73) e   cient parsing using heuristic id136
(cid:73) unconstrained history-based feature models

(cid:73) recent advances in synergy:

(cid:73) id125 and id170
(cid:73) easy-   rst parsing and dynamic oracles
(cid:73) online reordering for non-projective trees
(cid:73) joint morphological and syntactic analysis

recent advances in id33

54(54)

references and further reading

references and further reading
(cid:73) giuseppe attardi. 2006. experiments with a multilanguage non-projective

dependency parser. in proceedings of the 10th conference on computational
natural language learning (conll), pages 166   170.

(cid:73) bernd bohnet and jonas kuhn. 2012. the best of both worlds     a graph-based

completion model for transition-based parsers. in proceedings of the 13th
conference of the european chpater of the association for computational
linguistics (eacl), pages 77   87.

(cid:73) bernd bohnet and joakim nivre. 2012. a transition-based system for joint
part-of-speech tagging and labeled non-projective id33. in
proceedings of the 2012 joint conference on empirical methods in natural
language processing and computational natural language learning, pages
1455   1465.

(cid:73) bernd bohnet, joakim nivre, igor boguslavsky, rich  ard farkas, filip ginter, and

jan haji  c. 2013. joint morphological and syntactic analysis for richly in   ected
languages. transactions of the association for computational linguistics,
1:415   428.

(cid:73) jinho d. choi and andrew mccallum. 2013. transition-based id33

with selectional branching. in proceedings of the 51st annual meeting of the
association for computational linguistics (volume 1: long papers), pages
1052   1062.

recent advances in id33

54(54)

references and further reading

(cid:73) jinho d. choi and martha palmer. 2011. getting the most out of transition-based
id33. in proceedings of the 49th annual meeting of the association
for computational linguistics: human language technologies, pages 687   692.

(cid:73) shay b. cohen, carlos g  omez-rodr    guez, and giorgio satta. 2011. exact id136

for generative probabilistic non-projective id33. in proceedings of
the 2011 conference on empirical methods in natural language processing, pages
1234   1245.

(cid:73) michael collins and brian roark. 2004. incremental parsing with the id88

algorithm. in proceedings of the 42nd annual meeting of the association for
computational linguistics (acl), pages 112   119.

(cid:73) michael collins. 2002. discriminative training methods for id48:

theory and experiments with id88 algorithms. in proceedings of the
conference on empirical methods in natural language processing (emnlp),
pages 1   8.

(cid:73) michael a. covington. 2001. a fundamental algorithm for id33. in

proceedings of the 39th annual acm southeast conference, pages 95   102.

(cid:73) yoav goldberg and michael elhadad. 2010. an e   cient algorithm for easy-   rst

non-directional id33. in human language technologies: the 2010
annual conference of the north american chapter of the association for
computational linguistics (naacl hlt), pages 742   750.

recent advances in id33

54(54)

references and further reading

(cid:73) yoav goldberg and joakim nivre. 2012. a dynamic oracle for arc-eager dependency

parsing. in proceedings of coling 2012, pages 959   976.

(cid:73) yoav goldberg and joakim nivre. 2013. training deterministic parsers with
non-deterministic oracles. transactions of the association for computational
linguistics, 1:403   414.

(cid:73) carlos g  omez-rodr    guez and joakim nivre. 2010. a transition-based parser for

2-planar dependency structures. in proceedings of the 48th annual meeting of the
association for computational linguistics, pages 1492   1501.

(cid:73) jun hatori, takuya matsuzaki, yusuke miyao, and jun   ichi tsujii. 2011.

incremental joint id52 and id33 in chinese. in proceedings of
5th international joint conference on natural language processing (ijcnlp),
pages 1216   1224.

(cid:73) matthew honnibal, yoav goldberg, and mark johnson. 2013. a non-monotonic

arc-eager transition system for id33. in proceedings of the
seventeenth conference on computational natural language learning, pages
163   172.

(cid:73) liang huang and kenji sagae. 2010. id145 for linear-time

incremental parsing. in proceedings of the 48th annual meeting of the association
for computational linguistics (acl), pages 1077   1086.

recent advances in id33

54(54)

references and further reading

(cid:73) liang huang, suphan fayong, and yang guo. 2012. structured id88 with

inexact search. in proceedings of the 2012 conference of the north american
chapter of the association for computational linguistics: human language
technologies, pages 142   151.

(cid:73) richard johansson and pierre nugues. 2006. investigating multilingual dependency

parsing. in proceedings of the tenth conference on computational natural
language learning (conll), pages 206   210.

(cid:73) marco kuhlmann, carlos g  omez-rodr    guez, and giorgio satta. 2011. dynamic

programming algorithms for transition-based dependency parsers. in proceedings of
the 49th annual meeting of the association for computational linguistics (acl),
pages 673   682.

(cid:73) john lee, jason naradowsky, and david a. smith. 2011. a discriminative model
for joint id60 and id33. in proceedings of
the 29th annual meeting of the association for computational linguistics (acl),
pages 885   894.

(cid:73) zhenghua li, min zhang, wanxiang che, ting liu, wenliang chen, and haizhou

li. 2011. joint models for chinese id52 and id33. in
proceedings of the conference on empirical methods in natural language
processing (emnlp), pages 1180   1191.

recent advances in id33

54(54)

references and further reading

(cid:73) ryan mcdonald. 2006. discriminative training and spanning tree algorithms for

id33. university of pennsylvania. ph.d. thesis, phd thesis.

(cid:73) joakim nivre and jens nilsson. 2005. pseudo-projective id33. in
proceedings of the 43rd annual meeting of the association for computational
linguistics (acl), pages 99   106.

(cid:73) joakim nivre, marco kuhlmann, and johan hall. 2009. an improved oracle for

id33 with online reordering. in proceedings of the 11th international
conference on parsing technologies (iwpt   09), pages 73   76.

(cid:73) joakim nivre. 2003. an e   cient algorithm for projective id33. in

gertjan van noord, editor, proceedings of the 8th international workshop on
parsing technologies (iwpt), pages 149   160.

(cid:73) joakim nivre. 2004. incrementality in deterministic id33. in frank
keller, stephen clark, matthew crocker, and mark steedman, editors, proceedings
of the workshop on incremental parsing: bringing engineering and cognition
together (acl), pages 50   57.

(cid:73) joakim nivre. 2007. incremental non-projective id33. in

proceedings of human language technologies: the annual conference of the
north american chapter of the association for computational linguistics
(naacl-hlt), pages 396   403.

recent advances in id33

54(54)

references and further reading

(cid:73) joakim nivre. 2009. non-projective id33 in expected linear time. in

proceedings of the 47th annual meeting of the association for computational
linguistics (acl), pages 351   359.

(cid:73) francesco sartorio, giorgio satta, and joakim nivre. 2013. a transition-based
dependency parser using a dynamic parsing strategy. in proceedings of the 51st
annual meeting of the association for computational linguistics (volume 1: long
papers), pages 135   144.

(cid:73) katerina vesel  a, havelka jiri, and eva hajicov  a. 2004. condition of projectivity in

the underlying dependency structures. in proceedings of the 20th international
conference on computational linguistics (coling), pages 289   295.

(cid:73) anssi yli-jyr  a. 2003. multiplanarity     a model for dependency structures in

treebanks. in proceedings of the second workshop on treebanks and linguistic
theories (tlt), pages 189   200.

(cid:73) yue zhang and stephen clark. 2008. a tale of two parsers: investigating and

combining graph-based and transition-based id33. in proceedings of
the conference on empirical methods in natural language processing (emnlp),
pages 562   571.

(cid:73) yue zhang and joakim nivre. 2011. transition-based parsing with rich non-local

features. in proceedings of the 29th annual meeting of the association for
computational linguistics (acl), pages 188   193.

recent advances in id33

54(54)

(cid:73) yue zhang and joakim nivre. 2012. analyzing the e   ect of global learning and
beam-search on transition-based id33. in proceedings of coling
2012: posters, pages 1391   1400.

references and further reading

recent advances in id33

54(54)

