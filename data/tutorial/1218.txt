uni   cation grammars

shuly wintner

department of computer science

university of haifa

haifa, israel

l-universit`a ta    malta, october 2008

introduction

introduction

overview

grammatical formalisms: a formal, mathematical and computational
model for (the structure of) natural languages
uni   cation grammars: a general formalism underlying various
linguistic theories

lexical functional grammar (lfg)
head-driven phrase structure grammar (hpsg)
some variants of id35, tag, ...

this course: linguistic motivation; mathematical infrastructure;
linguistic applications

this is an introductory course...

the book (francez and wintner, forthcoming)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

2 / 420

plan

introduction

overview

syntax: the structure of natural languages

linguistic formalisms
constituency
some syntactic phenomena

context-free grammars

basic de   nitions: grammars, forms, derivations, languages...
derivation trees
structural ambiguity
generative capacity
id18s and natural languages

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

3 / 420

plan

introduction

overview

feature structures

motivation
feature graphs
subsumption
feature structures
attribute-value matrices

uni   cation

feature structure uni   cation
feature graph uni   cation
generalization

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

4 / 420

plan

introduction

overview

extending feature structures

multi-rooted feature graphs
multi-rooted feature structures
multi-avms

uni   cation grammars

uni   cation in context
forms and grammar rules
derivations
languages
derivation tress

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

5 / 420

plan

introduction

overview

linguistic applications

agreement
case control
subcategorization
long-distance dependencies
control
coordination

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

6 / 420

plan

introduction

overview

computational aspects

the expressivity of uni   cation grammars

extensions and open problems

restricted versions of uni   cation grammars
typed uni   cation grammars
development of large-scale grammars
grammar engineering

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

7 / 420

linguistic formalisms

syntax

linguistic formalisms

syntax is the    eld of linguistics that studies the structure of natural
languages.

why should there be any mathematics involved with linguistic
theories?

a linguistic formalism is a (formal) language, with which claims
about (natural, but also formal) languages can be made.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

8 / 420

syntax

syntax

structure

the underlying assumption is that languages have structure: not all
sequences of words over the given alphabet are valid; and when a
sequence of words is valid (grammatical ), a natural structure can be
induced on it.

it is useful to think of this structure as a tree (although we shall see
other structures later).

given a sentence in some language, not all possible trees de   ne the
structure that native speakers of the language intuitively recognize.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

9 / 420

natural languages have structure

syntax

structure

even though i klaw through the valley of the shadow of death, i will
raef no evil

even though i walk through the valley of the shadow of death, i will
fear no evil

even though i ordinary through the valley of the shadow of death, i
will slowly no evil

even though i slowly gaze through the valley of the shadow of death, i
will unsurprisingly do no evil

even though i walk through the valley of the shadow of death, i will
fear no evil

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

10 / 420

natural languages have structure

syntax

structure

natural languages are in   nite:

the water put out the    re

the water put out the    re, that burned the stick

the water put out the    re, that burned the stick, that hit the dog

the water put out the    re, that burned the stick, that hit the dog,
that chased the cat

but it is possible to characterize an in   nite set with    nite expressions.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

11 / 420

natural languages have structure

syntax

structure

intuitively, words combine to form phrases:

(jacob (served (seven years) (for rachel))),
and (they seemed to him but a few days
(because of ((the love) (he had for her)))).

but not:

(jacob served) seven (years for) rachel,
and they (seemed to) him but
(a few days because) of the love he had for her.

phrases which correspond to our native speaker intuitions are called
constituents.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

12 / 420

determining constituents

syntax

constituency

the criteria for de   ning constituents are sometimes fuzzy.

the main criterion is equivalent distribution: if two word sequences
are mutually interchangeable in every context, preserving
grammaticality, then both are constituents and both have the same
grammatical category.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

13 / 420

determining constituents

syntax

constituency

certain grammatical operations apply only to constituents:

topicalization:

for rachel, jacob served seven years

cleft:

it was for rachel that jacob served seven years

interjection:

jacob served seven years, the bible tells us, for rachel

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

14 / 420

determining constituents

syntax

constituency

certain grammatical operations apply only to constituents:

question formation:

how long did jacob serve for rachel?

coordination:

jacob served seven years for rachel,
and they seemed to him but a few days

anaphors refer to constituents:

... and for leah, too

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

15 / 420

types of constituents

syntax

constituency

inducing structure on a grammatical string is done recursively,
starting with the words.

to this end, words are classi   ed into categories according to their
distribution.

in many languages, words are classi   ed into substantial and
functional categories.

substantial: table, dogs, walked, purple, quickly
functional: the, in, or

another classi   cation is according to whether the category is open or
close.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

16 / 420

types of constituents

syntax

constituency

word categories (parts of speech):

n
v
adj
adv
p
d
pron
propn proper noun

noun
verb
adjective
adverb
preposition
determiner
pronoun

table, dogs, justice, oak
run, climb, love, ignore
green, fast, mild, imaginary
quickly, well, alone
in, to, of, after, in spite of
a, the, all, some
i, you, she, theirs, our
jacob, ibm, haifa

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

17 / 420

constituents

syntax

constituency

phrases are projections of word categories:

noun phrases are headed by nouns:
table     round table     the round table
    the round table in the corner
    the round table in the corner that we sat at yesterday

verb phrases are headed by verbs:
climbed     climbed a tree     climbed a tree yesterday
    recklessly climbed a tree yesterday

adjectival phrases are headed by adjectives:
high     rather high / higher than me / high as a tree

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

18 / 420

constituents

syntax

constituency

phrases consist of a head and additional complements and adjuncts.
the phrase is a projection of its head.

complements are required by the head, and are mandatory. adjuncts
are optional, and can be iterated.

example: john drinks a cup of milk every morning

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

19 / 420

syntactic phenomena

syntax

syntactic phenomena

agreement

subcategorization

case assignment

unbounded dependencies

subject/object control

coordination

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

20 / 420

a gradual description of language fragments

syntax

syntactic phenomena

e0 is a small fragment of english consisting of very simple sentences,
constructed with only intransitive and transitive (but no ditransitive)
verbs, common nouns, proper names, pronouns and determiners.

typical sentences are:

a sheep drinks
rachel herds the sheep
jacob loves her

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

21 / 420

a gradual description of language fragments

syntax

syntactic phenomena

similar strings are not e0- (and, hence, english-) sentences:

   rachel feed the sheep
   rachel feeds herds the sheep
   the shepherds feeds the sheep
   rachel feeds
   jacob loves she
   jacob loves rachel she
   them herd the sheep

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

22 / 420

a gradual description of language fragments

syntax

syntactic phenomena

there are constraints on the combination of phrases in e0:

the subject and the predicate must agree on number and person: if
the subject is a third person singular, so must the verb be.

objects complement only     and all     the transitive verbs.

when a pronoun is used, it is in the nominative case if it is in the
subject position, and in the accusative case if it is an object.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

23 / 420

subcategorization

syntax

syntactic phenomena

e1 is a fragment of english, based on e0, in which verbs are classi   ed
to subclasses according to the complements they    require   :

laban gave jacob his daughter
jacob promised laban to marry leah
laban persuaded jacob to promise him to marry leah

similar strings that violate this constraint are:

   rachel feeds jacob the sheep
   jacob saw to marry leah

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

24 / 420

control

syntax

syntactic phenomena

with the addition of in   nitival complements in e1, e2 can capture
constraints of argument control in english:

jacob promised laban to work seven years
laban persuaded jacob to work seven years

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

25 / 420

long distance dependencies

syntax

syntactic phenomena

another extension of e1 is e3, typical sentences of which are:

the shepherd wondered whom jacob loved    .
the shepherd wondered whom laban thought jacob loved    .
the shepherd wondered whom laban thought rachel claimed
jacob loved    .

an attempt to replace the gap with an explicit noun phrase results in
ungrammaticality:

   the shepherd wondered who jacob loved rachel.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

26 / 420

long distance dependencies

syntax

syntactic phenomena

the gap need not be in the object position:

jacob wondered who     loved leah
jacob wondered who laban believed     loved leah

again, an explicit noun phrase    lling the gap results in
ungrammaticality:

   jacob wondered who the shepherd loved leah

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

27 / 420

long distance dependencies

syntax

syntactic phenomena

more than one gap may be present in a sentence (and, hence, more
than one    ller):

this is the well which jacob is likely to     draw water from    
it was leah that jacob worked for     without loving    

in some languages (e.g., norwegian) there is no (principled) bound on
the number of gaps that can occur in a single clause.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

28 / 420

long distance dependencies

syntax

syntactic phenomena

there are other fragments of english in which long distance
dependencies are manifested in other forms.

topicalization:

rachel, jacob loved    

rachel, every shepherd knew jacob loved    

another example is interrogative sentences:

who did jacob love    ?
who did laban believe jacob loved    ?

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

29 / 420

coordination

syntax

syntactic phenomena

coordination is accounted for in the language fragment e4:
no man lift up his [hand] or [foot] in all the land of egypt
jacob saw [rachel] and [the sheep of laban]
jacob [went on his journey] and
[came to the land of the people of the east]
jacob [went near], and [rolled the stone from the well   s mouth], and
[watered the    ock of laban his mother   s brother].
every [speckled] and [spotted] sheep
leah was [tender eyed] but [not beautiful]
[leah had four sons], but [rachel was barren]
she said to jacob,    [give me children], or [i shall die]!   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

30 / 420

the goals of syntactic analysis

syntax

syntactic phenomena

given a natural language sentence, syntactic analysis provides a
structural description of the sentence.

to do so, one must have a model of the structure of the language.

syntax is concerned with a formulation of the structure of natural
languages. an example of a syntactic formalism is context-free
grammars.

in id18s, the structure of sentences is modeled by derivation trees.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

31 / 420

context-free grammars

basic de   nitions

context-free grammars

de   nition (context-free grammars)

a context-free grammar (id18) is a four-tuple h  , v , s, pi, where:

   is a    nite, non-empty set of terminals, the alphabet;

v is a    nite, non-empty set of grammar variables (categories, or
non-terminal symbols), such that        v =    ;
s     v is the start symbol;
p is a    nite set of production rules, each of the form a       , where
a     v and        (v       )   .

for a rule a       , a is the rule   s head and    is its body.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

32 / 420

context-free grammars

basic de   nitions

context-free grammars

example (id18 example)

   = {the, cat, in, hat}
v = {d, n, p, np, pp}
the start symbol is np
the rules:

d     the
n     cat
n     hat
p     in

np     d n
pp     p np
np     np pp

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

33 / 420

context-free grammars

basic de   nitions

context-free grammars: language

each non-terminal symbol in a grammar denotes a language.
a rule such as n     cat implies that the language denoted by the
non-terminal n includes the alphabet symbol cat.

the symbol cat here is a single, atomic alphabet symbol, and not a
string of symbols: the alphabet of this example consists of natural
language words, not of natural language letters.
for a more complex rule such as np     d n, the language denoted
by np contains the concatenation of the language denoted by d with
that denoted by n: l(np)     l(d)    l(n).

matters become more complicate when we consider recursive rules
such as np     np pp.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

34 / 420

context-free grammars

basic de   nitions

context-free grammars: derivation

given a grammar g = hv ,   , p, si, we de   ne the set of forms to be
(v       )   : the set of all sequences of terminal and non-terminal
symbols.

derivation is a relation that holds between two forms, each a
sequence of grammar symbols.

de   nition (derivation)
a form    derives a form   , denoted by          , if and only if    =   l a  r
and    =   l   c   r and a       c is a rule in p.

a is called the selected symbol. the rule a        is said to be
applicable to   .

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

35 / 420

context-free grammars

basic de   nitions

derivation

example (forms)

the set of non-terminals of g is v = {d, n, p, np, pp} and the set of
terminals is    = {the, cat, in, hat}.
the set of forms therefore contains all the (in   nitely many) sequences of
elements from v and   , such as hi, hnpi, hd cat p d hati, hd ni,
hthe cat in the hati, etc.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

36 / 420

context-free grammars

basic de   nitions

derivation

example (derivation)

let us start with a simple form, hnpi. observe that it can be written as
  l np  r , where both   l and   r are empty. observe also that np is the
head of some grammar rule: the rule np     d n. therefore, the form is a
good candidate for derivation: if we replace the selected symbol np with
the body of the rule, while preserving its environment, we get
  l d n  r = d n. therefore, hnpi     hd ni.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

37 / 420

context-free grammars

basic de   nitions

derivation

example (derivation)

we now apply the same process to hd ni. this time the selected symbol
is d (we could have selected n, of course). the left context is again
empty, while the right context is   r = n. as there exists a grammar rule
whose head is d, namely d     the, we can replace the rule   s head by its
body, preserving the context, and obtain the form hthe ni. hence
hd ni     hthe ni.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

38 / 420

context-free grammars

basic de   nitions

derivation

example (derivation)

given the form hthe ni, there is exactly one non-terminal that we can
select, namely n. however, there are two rules that are headed by n:
n     cat and n     hat. we can select either of these rules to show that
both hthe ni     hthe cati and hthe ni     hthe hati.
since the form hthe cati consists of terminal symbols only, no
non-terminal can be selected and hence it derives no form.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

39 / 420

context-free grammars

basic de   nitions

extended derivation

  

k   g    if    derives    in k steps:

      g   1    g   2    g . . .    g   k and
  k =   .

the re   exive-transitive closure of       g     is           g    :   
for some k     0.
a g -derivation is a sequence of forms   1, . . . ,   n, such that for
every i , 1     i < n,   i    g   i +1.

      g    if   

k   g   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

40 / 420

context-free grammars

basic de   nitions

extended derivation: example

example (derivation)

(1)
(2)
(3)

hnpi     hd ni
hd ni     hthe ni
hthe ni     hthe cati

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

41 / 420

context-free grammars

basic de   nitions

extended derivation: example

example (derivation)
therefore, we trivially have:

(4)
(5)
(6)

hnpi
hd ni
hthe ni

       hd ni
       hthe ni
       hthe cati

from (2) and (6) we get

(7)

hd ni

       hthe cati

and from (1) and (7) we get

(7)

hnpi

       hthe cati

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

42 / 420

context-free grammars

basic de   nitions

languages

de   nition (senential forms)

a form    is a sentential form of a grammar g i    s
derived in g from the start symbol.

      g   , i.e., it can be

de   nition (language)

the (formal) language generated by a grammar g with respect to a
category name (non-terminal) a is la(g ) = {w | a
generated by the grammar is l(g ) = ls (g ).

       w }. the language

de   nition (context-free languages)
a language that can be generated by some id18 is a context-free language
and the class of context-free languages is the set of languages every
member of which can be generated by some id18. if no id18 can generate
a language l, l is said to be trans-context-free.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

43 / 420

context-free grammars

basic de   nitions

language of a grammar

example (language)

for the example grammar (with np the start symbol):

d     the
n     cat
n     hat
p     in

np     d n
pp     p np
np     np pp

it is fairly easy to see that l(d) = {the}.
similarly, l(p) = {in} and l(n) = {cat, hat}.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

44 / 420

context-free grammars

basic de   nitions

language of a grammar

example (language)
it is more di   cult to de   ne the languages denoted by the non-terminals
np and pp, although is should be straight-forward that the latter is
obtained by concatenating {in} with the former.
proposition: l(np) is the denotation of the regular expression

the    (cat + hat)    (in   the    (cat + hat))   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

45 / 420

context-free grammars

basic de   nitions

language: a formal example ge

example (language)

l(ge ) = {anbn | n     0}.

s     va s vb
s       
va     a
vb     b

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

46 / 420

context-free grammars

basic de   nitions

recursion

the language l(ge ) is in   nite: it includes an in   nite number of
words; ge is a    nite grammar.
to be able to produce in   nitely many words with a    nite number of
rules, a grammar must be recursive: there must be at least one rule
whose body contains a symbol, from which the head of the rule can
be derived.
put formally, a grammar h  , v , s, pi is recursive if there exists a
chain of rules, p1, . . . , pn     p, such that for every 1 < i     n, the head
of pi +1 occurs in the body of pi , and the head of p1 occurs in the
body of pn.
in ge, the recursion is simple: the chain of rules is of length 0,
namely the rule s     va s vb is in itself recursive.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

47 / 420

context-free grammars

derivation trees

derivation tree

sometimes derivations provide more information than is actually
needed. in particular, sometimes two derivations of the same string
di   er not in the rules that were applied but only in the order in which
they were applied.
starting with the form hnpi it is possible to derive the string the cat
in two ways:

(1)
(2)

hnpi     hd ni     hd cati     hthe cati
hnpi     hd ni     hthe ni     hthe cati

since both derivations use the same rules to derive the same string, it
is sometimes useful to collapse such    equivalent    derivations into
one. to this end the notion of derivation trees is introduced.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

48 / 420

context-free grammars

derivation trees

derivation tree

a derivation tree (sometimes called parse tree, or simply tree) is a
visual aid in depicting derivations, and a means for imposing structure
on a grammatical string.

trees consist of vertices and branches; a designated vertex, the root
of the tree, is depicted on the top. then, branches are simply
connections between two vertices.

intuitively, trees are depicted    upside down   , since their root is at the
top and their leaves are at the bottom.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

49 / 420

context-free grammars

derivation trees

derivation tree

example (derivation tree)
an example for a derivation tree for the string the cat in the hat:

np

np

pp

d

n

p

np

d

n

the

cat

in

the hat

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

50 / 420

context-free grammars

derivation trees

derivation tree

formally, a tree consists of a    nite set of vertices and a    nite set of
branches (or arcs), each of which is an ordered pair of vertices.

in addition, a tree has a designated vertex, the root, which has two
properties: it is not the target of any arc, and every other vertex is
accessible from it (by following one or more branches).

when talking about trees we sometimes use family notation: if a
vertex v has a branch leaving it which leads to some vertex u, then
we say that v is the mother of u and u is the daughter, or child, of v .
if u has two daughters, we refer to them as sisters.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

51 / 420

context-free grammars

derivation trees

derivation trees

derivation trees are de   ned with respect to some grammar g , and must
obey the following conditions:

1 every vertex has a label, which is either a terminal symbol, a

2

3

non-terminal symbol or   ;

the label of the root is the start symbol;

if a vertex v has an outgoing branch, its label must be a non-terminal
symbol, the head of some grammar rule; and the elements in body of
the same rule must be the labels of the children of v , in the same
order;

4

if a vertex is labeled   , it is the only child of its mother.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

52 / 420

context-free grammars

derivation trees

derivation trees

a leaf is a vertex with no outgoing branches.

a tree induces a natural    left-to-right    order on its leaves; when read
from left to right, the sequence of leaves is called the frontier, or yield
of the tree.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

53 / 420

context-free grammars

derivation trees

correspondence between trees and derivations

derivation trees correspond very closely to derivations.

for a form   , a non-terminal symbol a derives    if and only if    is
the yield of some parse tree whose root is a.

sometimes there exist di   erent derivations of the same string that
correspond to a single tree. in fact, the tree representation collapses
exactly those derivations that di   er from each other only in the order
in which rules are applied.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

54 / 420

context-free grammars

derivation trees

correspondence between trees and derivations

np

np

pp

d

n

p

np

d

n

the

cat

in

the hat

each non-leaf vertex in the tree corresponds to some grammar rule (since
it must be labeled by the head of some rule, and its children must be
labeled by the body of the same rule).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

55 / 420

context-free grammars

derivation trees

correspondence between trees and derivations

this tree represents the following derivations (among others):

(1) np     np pp     d n pp     d n p np

    d n p d n     the n p d n
    the cat p d n     the cat in d n
    the cat in the n     the cat in the hat

(2) np     np pp     d n pp     the n pp

    the cat pp     the cat p np
    the cat in np     the cat in d n
    the cat in the n     the cat in the hat
(3) np     np pp     np p np     np p d n

    np p d hat     np p the hat
    np in the hat     d n in the hat
    d cat in the hat     the cat in the hat

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

56 / 420

context-free grammars

derivation trees

correspondence between trees and derivations

while exactly the same rules are applied in each derivation (the rules
are uniquely determined by the tree), they are applied in di   erent
orders.

in particular, derivation (2) is a leftmost derivation: in every step the
leftmost non-terminal symbol of a derivation is expanded.

similarly, derivation (3) is rightmost.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

57 / 420

context-free grammars

ambiguity

ambiguity

sometimes, however, di   erent derivations (of the same string!)
correspond to di   erent trees.

this can happen only when the derivations di   er in the rules which
they apply.

when more than one tree exists for some string, we say that the
string is ambiguous.

ambiguity is a major problem when grammars are used for certain
formal languages, in particular programming languages. but for
natural languages, ambiguity is unavoidable as it corresponds to
properties of the natural language itself.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

58 / 420

context-free grammars

ambiguity

ambiguity: example

consider again the example grammar and the following string:

the cat in the hat in the hat

intuitively, there can be (at least) two readings for this string: one in
which a certain cat wears a hat-in-a-hat, and one in which a certain
cat-in-a-hat is inside a hat:

((the cat in the hat) in the hat)
(the cat in (the hat in the hat))

this distinction in intuitive meaning is re   ected in the grammar, and
hence two di   erent derivation trees, corresponding to the two
readings, are available for this string:

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

59 / 420

context-free grammars

ambiguity

ambiguity: example

np

np

np

pp

pp

d

n

p

np

p

np

d

n

d

n

the

cat

in

the hat

in the hat

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

60 / 420

context-free grammars

ambiguity

ambiguity: example

np

np

pp

d

n

p

np

np

pp

p

np

d

n

d

n

the

cat

in

the hat

in the hat

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

61 / 420

context-free grammars

ambiguity

ambiguity: example

using linguistic terminology, in the left tree the second occurrence of
the prepositional phrase in the hat modi   es the noun phrase the cat
in the hat, whereas in the right tree it only modi   es the (   rst
occurrence of) the noun phrase the hat.

this situation is known as syntactic or structural ambiguity.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

62 / 420

context-free grammars

generative capacity

grammar equivalence

it is common in formal language theory to relate di   erent grammars
that generate the same language by an equivalence relation:
two grammars g1 and g2 (over the same alphabet   ) are
equivalent (denoted g1     g2) i    l(g1) = l(g2).
we refer to this relation as weak equivalence, as it only relates the
generated languages. equivalent grammars may attribute totally
di   erent syntactic structures to members of their (common)
languages.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

63 / 420

context-free grammars

generative capacity

grammar equivalence

example (equivalent grammars, di   erent trees)
following are two di   erent tree structures that are attributed to the string
aabb by the grammars ge and gf , respectively.

s

s

s

s

va va s vb vb

a

a

  

b

b

a a

  

b b

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

64 / 420

context-free grammars

generative capacity

grammar equivalence

example (structural ambiguity)
a grammar, garith, for simple arithmetic expressions:

s     a | b | c | s + s | s     s

two di   erent trees can be associated by garith with the string a + b     c:

s

s

s

s

s

s

a + b

   

s

c

s

s

a + b

   

s

c

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

65 / 420

context-free grammars

generative capacity

grammar equivalence

weak equivalence relation is stated in terms of the generated
language.

consequently, equivalent grammars do not have to be described in
the same formalism for them to be equivalent.

we will later see how grammars, speci   ed in di   erent formalisms, can
be compared.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

66 / 420

context-free grammars

id18s and natural languages

normal form

it is convenient to divide grammar rules into two classes: one that
contains only phrasal rules of the form a       , where        v    , and
another that contains only terminal rules of the form b        where
         .

it turns out that every id18 is equivalent to some id18 of this form.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

67 / 420

context-free grammars

id18s and natural languages

normal form

a grammar g is in phrasal/terminal normal form i    for every
production a        of g , either        v     or          .
productions of the form a        are called terminal rules, and a is
said to be a pre-terminal category, the lexical entry of   .
productions of the form a       , where        v    , are called phrasal
rules.

furthermore, every category is either pre-terminal or phrasal, but not
both.
for a phrasal rule with    = a1          an, w = w1          wn, w     la(g ) and
wi     lai (g ) for i = 1, . . . , n, we say that w is a phrase of category a,
and each wi is a sub-phrase (of w ) of category ai .
a sub-phrase wi of w is also called a constituent of w .

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

68 / 420

context-free grammars

id18s and natural languages

context-free grammars for natural languages

context-free grammars can be used for a variety of syntactic
constructions, including some non-trivial phenomena such as
unbounded dependencies, extraction, extraposition etc.

however, some (formal) languages are not context-free, and therefore
there are certain sets of strings that cannot be generated by
context-free grammars.

the interesting question, of course, involves natural languages: are
there natural languages that are not context-free? are context-free
grammars su   cient for generating every natural language?

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

69 / 420

context-free grammars

id18s and natural languages

a context-free grammar, g0, for e0

example
a context-free grammar, g0, for e0

    np vp

s
vp     v
vp     v np
np     d n
np     pron
np     propn
d
n
v

    the, a, two, every, . . .
    sheep, lamb, lambs, shepherd, water . . .
    sleep, sleeps, love, loves, feed, feeds, herd, herds, . . .

pron     i, me, you, he, him, she, her, it, we, us, they, them
propn     rachel, jacob, . . .

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

70 / 420

context-free grammars

id18s and natural languages

context-free grammars for natural languages

there are two major problems with this grammar.

1

2

it ignores the valence of verbs: there is no distinction among
subcategories of verbs, and an intransitive verb such as sleep might
occur with a noun phrase complement, while a transitive verb such as
love might occur without one. in such a case we say that the
grammar overgenerates: it generates strings that are not in the
intended language.

there is no treatment of subject   verb agreement, so that a singular
subject such as the cat might be followed by a plural form of verb
such as smile. this is another case of overgeneration.

both problems are easy to solve.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

71 / 420

context-free grammars

id18s and natural languages

problems of g0

over-generation (agreement constraints are not imposed):

   rachel feed the sheep
   the shepherds feeds the sheep
   rachel feeds
   jacob loves she
   them herd the sheep

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

72 / 420

context-free grammars

id18s and natural languages

problems of g0

over-generation (subcategorization constraints are not imposed):

the lambs sleep
jacob loves rachel
   the lambs sleep the sheep
   jacob loves

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

73 / 420

context-free grammars

id18s and natural languages

problems of g0

example (over-generation)

s

np

vp

d

n

v

the

lambs

sleeps

np

pron

they

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

74 / 420

context-free grammars

id18s and natural languages

verb valence

to account for valence, we can replace the non-terminal symbol v by
a set of symbols: vtrans, vintrans, vditrans etc.

we must also change the grammar rules accordingly:

example

vp     vintrans
vp     vtrans np
vp     vditrans np np

vintrnas     sleep, sleeps
vtrans     love, loves
vditrans     give, gives

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

75 / 420

context-free grammars

id18s and natural languages

agreement

to account for agreement, we can again extend the set of
non-terminal symbols such that categories that must agree re   ect in
the non-terminal that is assigned for them the features on which they
agree.

in the very simple case of english, it is su   cient to multiply the set of
   nominal    and    verbal    categories, so that we get dsg, dpl, nsg,
npl, npsg, nppl, vsg, vlp, vpsg, vppl etc. we must also change
the set of rules accordingly:

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

76 / 420

agreement

example

context-free grammars

id18s and natural languages

nsg     lamb
nsg     sheep
vsg     sleeps
vsg     smiles
vsg     loves
vsg     saw
dsg     a

npl     lambs
npl     sheep
vpl     sleep
vpl     smile
vpl     love
vpl     saw
dpl     two

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

77 / 420

context-free grammars

id18s and natural languages

agreement

example

s     npsg vpsg
npsg     dsg nsg
vpsg     vsg
vpsg     vpsg np

s     nppl vppl
nppl     dpl npl
vppl     vpl
vppl     vppl np

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

78 / 420

context-free grammars

id18s and natural languages

methodological properties of the id18 formalism

1 concatenation is the only string combination operation

2 phrase structure is the only syntactic relationship

3 the terminal symbols have no properties

4 non-terminal symbols (grammar variables) are atomic

5 most of the information encoded in a grammar lies in the production

rules

6 any attempt of extending the grammar with a semantics requires

extra means.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

79 / 420

context-free grammars

id18s and natural languages

alternative methodological properties

1 concatenation is not necessarily the only way by which phrases may

be combined to yield other phrases.

2 even if concatenation is the sole string operation, other syntactic

relationships are being put forward.

3 modern computational formalisms for expressing grammars adhere to

an approach called lexicalism.

4 some formalisms do not retain any context-free backbone. however,

if one is present, its categories are not atomic.

5 the expressive power added to the formalisms allows also a certain

way for representing semantic information.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

80 / 420

feature structures

introduction

feature structures

motivated by the violations of the context-free grammar g0, we
would like to extend the id18 formalism with additional mechanisms
that will facilitate the expression of information that is missing in g0
in a uniform and compact way.

the core idea is to incorporate into the grammar properties of
symbols, in terms of which the violations of g0 were stated.
properties are represented by means of feature structures.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

81 / 420

feature structures

introduction

overview

an overview of feature structures, motivating their use as a
representation of linguistic information
four di   erent views of these entities:

feature graphs
feature structures
abstract feature structures
attribute-value matrices (avms)

feature structures in a broader context.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

82 / 420

feature structures motivation

motivation

words in natural languages have properties

we want to model these properties in the lexicon

we would like to associate with words not just atomic symbols, as in
id18s, but rather structural information that re   ects their properties.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

83 / 420

feature structures motivation

a simple lexicon

example (a simple lexicon)

sg

lamb:

pers :

(cid:20)num :
third(cid:21)
(cid:20)num :
pers :    rst(cid:21)
dreams: (cid:20)num :
third(cid:21)

pers :

sg

sg

i:

pers :

lambs:

(cid:20)num :
(cid:20)num :
dreams: (cid:20)num :

sheep:

pers :

pers :

pl

[ ]

third(cid:21)
third(cid:21)
third(cid:21)

sg

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

84 / 420

feature structures motivation

feature structures

feature structures map features into values, which are themselves
feature structures

a special case of feature structures are atoms, which represent
structureless values.

for example, to deal with number (and impose its agreement), we
use a feature num, and a set of atomic feature structures {sg,pl} as
its values, representing singularity and plurality, respectively.

when a value is not atomic, it is complex.

a complex value is, recursively, a feature structure consisting of
features and values.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

85 / 420

feature structures motivation

a complex feature structure

example (a complex feature structure)

loves:

vtype :

agr :

   
   

transitive

(cid:20)num :

pers :

sg

   
third(cid:21)
   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

86 / 420

feature structures motivation

grouping features

deciding how to group features is up to the grammar designer, and is
intended to capture syntactic generalizations.

if number and person    go together    in formulating restrictions, it is
more appropriate to group them as in this example.

moreover, such a grouping might be bene   cial when feature
structures are being modi   ed.

processes of derivation and parsing (the application of grammar
rules) are able to manipulate feature structures to re   ect application
of such constraints.

when the properties of some feature structure are changed, it is
possible to change the value of only one feature, namely agr, rather
than specify two separate changes for each subfeature.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

87 / 420

feature structures motivation

grouping features

in the example lexicon, the lexical ambiguity of sheep is represented
by an empty feature structure as the value of the num feature.

this is interpreted as the value of this feature being unconstrained.

however, it would have been useful to be able to state that the only
possible values for this feature are, say, sg and pl.
there are at least two di   erent ways to specify such information:

by listing a set of values for the feature;
or by restricting its value to a certain    type    of permissible values.

we do not explore the former solution here.

the latter solution is employed by typed feature structure formalisms.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

88 / 420

feature structures motivation

adding features to phrases

words are not the only linguistic entities that have properties; words
are combined into phrases, and those also have properties which can
be modeled by feature:value pairs.

for example, the noun phrase a sheep has the value sg for the num
feature, while two sheep has the value pl for num.

consequently, grammar non-terminals, too, must be decorated with
features, representing the endowment of phrases of this category with
that feature.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

89 / 420

feature structures

feature graphs

feature graphs

the informal discussion of feature structures above depicted them
using a representation, called attribute-value matrices (avms), which
is common in the linguistic literature.

we begin the discussion of feature structures by de   ning the concept
of feature graphs, using well-known concepts of id207.

a graph view of feature structures facilitates computational
processing because so many properties of graphs are well understood
and because graphs lend themselves to e   cient processing.

we will return to avms and discuss their correspondence with feature
graphs later on.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

90 / 420

feature structures

feature graphs

de   nitions

feature graphs are de   ned over a signature consisting of non-empty,
   nite, disjoint sets feats of features and atoms of atoms.

features are used to encode properties of (linguistic) objects, such as
number, gender etc.

atoms are used for the (atomic) values of such features, as in plural,
feminine etc.

we use a convention of depicting features in small capitals and
atoms in italics.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

91 / 420

feature structures

feature graphs

signature

de   nition (signature)

a signature is a structure s = hatoms, featsi, where atoms is a    nite
set of atoms and feats is a    nite set of features.

we assume some    xed signature throughout this presentation.

meta-variables f , g (with or without subscripts or superscripts) range
over features, and a, b, etc. over atoms.

we usually assume that both feats and atoms are non-empty (and
sometimes even assume that they include more than one element
each).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

92 / 420

feature structures

feature graphs

feature graphs

de   nition (feature graphs)

a feature graph a = hqa,   qa,   a,   ai is a    nite, directed, connected,
labeled graph consisting of a    nite, nonempty set of nodes qa (such that
qa     feats = qa     atoms =    ), a root   qa     qa, a partial function
  a : qa    feats     qa specifying the arcs such that every node q     qa
is accessible from   qa, and a partial function, marking some of the sinks:
  a : qs     atoms, where qs = {q     qa |   a(q, f )    for every f }.
given a signature of features feats and atoms atoms, let
g(feats, atoms) be the set of all feature graphs over the signature.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

93 / 420

feature structures

feature graphs

feature graphs

example (feature graphs)

the graph displayed below is hq,   q,   ,   i, where
q = {q0, q1, q2, q3},   q = q0,   (q0, agr) = q1,   (q1, num) =
q2,   (q1, pers) = q3, qs = {q2, q3},   (q2) = pl,   (q3) = third.

num

q2

pl

agr

q1

q0

pers

q3

third

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

94 / 420

feature structures

feature graphs

feature graphs

the arcs of a feature graph are thus labeled by features.

the root is a designated node from which all other nodes are
accessible (through   ); note that nothing prevents the root from
having incoming arcs.

sink nodes (nodes with no outgoing edges) can be marked by an
atom, but can also be unmarked.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

95 / 420

feature structures

feature graphs

feature graphs

we use meta-variables a, b (with or without subscripts) to refer to
feature graphs.

we use q,   q,   ,   , to refer to constituents of feature graphs.

when displaying feature graphs, the root is depicted as a grey-colored
node, usually at the top or the left side of the graph.

the identities of the nodes are arbitrary, and we use generic names
such as q0, q1 etc. to refer to them.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

96 / 420

feature structures

feature graphs

feature graphs

example (feature graphs)
in the following graph, the leaves q2 and q3 bear no marking; in other
words, the marking function    is unde   ned for the two sinks in its domain.

num

q2

agr

q1

q0

pers

q3

the graph displayed above is hq,   q,   ,   i, where q = {q0, q1, q2, q3},   q =
q0,   (q0, agr) = q1,   (q1, num) = q2,   (q1, pers) = q3, qs = {q2, q3},
and    is unde   ned for its entire domain.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

97 / 420

feature structures

feature graphs

feature graphs

a feature graph is empty if it consists of a single unmarked node
with no arcs.

a feature graph is atomic if it consists of a single marked node with
no arcs.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

98 / 420

feature structures

feature graphs

empty and atomic feature graphs

example (empty and atomic feature graphs)

a, an empty feature graph: q0

b, an atomic feature graph: q0

pl

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

99 / 420

feature structures

feature graphs

paths

the concept of paths is natural when graphs are concerned.

a path (over feats) is a    nite sequence of features, and the set
paths = feats    is the collection of all paths.
meta-variables   ,    (with or without subscripts) range over paths.
   is the empty path, denoted also by    hi   .
the length of a path    is denoted |  |.
for example, if feats = {a, b} then paths includes
  , hai, hbi, ha,b,ai, hb,b,b,b,a,bi, etc.

while a path is a purely syntactic notion (every sequence of features
constitutes a path), interesting paths are those that can be interpreted
as actual paths in some graph, leading from the root to some node.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

100 / 420

feature structures

feature graphs

paths

the de   nition of    is therefore extended to paths: given a feature
graph a = hqa,   qa,   a,   ai, de   ne     a : qa    paths     qa as follows:

    a(q,   ) = q
    a(q, f   ) =     a(  a(q, f ),   )

(de   ned only if   a(q, f )   )

since for every node q     qa and every feature f     feats,
  a(q, f) =     a(q, hfi), we identify      with    in the future and use only
the latter. when the index (a) is clear from the context, it is omitted.
when   a(q,   ) = q    we say that    leads (in a) from q to q   .

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

101 / 420

feature structures

feature graphs

paths

de   nition (paths)

the paths of a feature graph a are   (a) = {       paths |   a(  qa,   )   }.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

102 / 420

feature structures

feature graphs

paths

example (paths)
consider the following feature graph, a:

num

q2

pl

agr

q1

q0

pers

q3

third

its paths are

  (a) = {  , hagri, hagr numi, hagr persi}

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

103 / 420

feature structures

feature graphs

path values

of particular interest are paths which lead from the root of a feature
graph to some node in the graph.

for such paths we de   ne the notion of a value, which is the
sub-graph whose root is the node at the end of the path.

it would have been possible to de   ne as value the node itslef, rather
than the sub-graph is induces; the choice is a matter of taste, as
moving from one view of values to another is trivial.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

104 / 420

feature structures

feature graphs

path values

de   nition (path value)

for a feature graph a = hqa,   qa,   a,   ai and a path          (a), the value
vala(  ) of    in a is a feature graph b = hqb ,   qb ,   b ,   b i, over the same
signature as a, where:

  qb =   a(  qa,   )
qb = {q        qa | for some      ,   a(  qb ,      ) = q   } (qb is the set of
nodes reachable from   qb )
for every feature f and for every q        qb,   b (q   , f) =   a(q   , f ) (  b is
the restriction of   a to qb )
for every q        qb,   b(q   ) =   a(q   ) (  b is the restriction of   a to qb )

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

105 / 420

feature structures

feature graphs

paths

example (paths)
consider the following feature graph, a:

num

q2

pl

agr

q1

q0

pers

q3

third

its paths are

  (a) = {  , hagri, hagr numi, hagr persi}

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

106 / 420

feature structures

feature graphs

path values

example (path values)

the value of the path hagri in a is:

num

q2

pl

vala(hagri) =

q1

pers

q3

third

and the value of the path hagr numi in a is:

vala(hagr numi) = q2

pl

note that, for example, the value of hagr pers numi in a is unde   ned.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

107 / 420

feature structures

feature graphs

reentrancy

the de   nition of path values raises the question of when two paths
have equal values.

we distinguish between paths which lead to one and the same node,
and those whose values are isomorphic but not identical.

the former case is called reentrancy.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

108 / 420

feature structures

feature graphs

reentrancy

de   nition (reentrancy)

let a = hq,   q,   ,   i be a feature graph. two paths   1,   2       (a) are
reentrant in a, denoted   1
vala(  1) = vala(  2). a feature graph a is reentrant i    there exist two
distinct paths   1,   2       (a) such that   1

a
!   2, i      (  q,   1) =   (  q,   2), implying

a
!   2.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

109 / 420

feature structures

feature graphs

reentrancy

example (a reentrant feature graph)

this feature graph, a, is reen-
trant because   a(q0, hagri) =
  a(q0, hsubj,agri)

q0

agr

q1

num

q2

pl

subj

q4

agr

pers

q3

third

the (single) value of the
(di   erent) paths hagri and
hsubj agri in a is:

num

q2

pl

q1

pers

q3

third

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

110 / 420

feature structures

feature graphs

reentrancy

the notion of reentrancy touches on the issue of the distinction
between type- and token-identity.

two feature graphs are token identical if their components (i.e., their
sets of nodes, roots, transition functions and atom marking functions)
are identical.

they are type-identical if they are isomorphic, not necessarily
requiring their nodes to be identical.

we will discuss feature graph isomorphism later.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

111 / 420

feature structures

feature graphs

cicles

early feature structure based formalisms used to employ only acyclic
feature graphs.

however, modern ones usually allow (or even require) feature
structures to be possibly cyclic.

while the linguistic motivation for cyclic feature structures is limited,
there is good practical motivation for allowing them: when
implementing a system for manipulating feature graphs, it is usually
easier to support cycles than to guarantee that all the graphs in a
system are acyclic.

the reason is that uni   cation, which is the major operation de   ned
on feature graphs, can yield a cyclic graph even when its operands are
acyclic.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

112 / 420

feature structures

feature graphs

cicles

de   nition (cycles)

a feature graph a = hqa,   qa,   a,   ai is cyclic if two paths   1,   2       (a),
where   1 is a proper subsequence of   2, are reentrant:   1
acyclic otherwise.

a
!   2. a is

note that cyclicity is a special case of reentrancy (every cyclic feature
graph is reentrant, but not vice versa).

a corollary of the de   nition is that when a feature graph is cyclic, it
has at least one node q such that   (q,   ) = q for some non-empty
path   .

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

113 / 420

feature structures

feature graphs

cicles

example (a cyclic feature graph)

following is a cyclic feature graph, c :

q0

f

q1

h

g

q2

a

the value of the path hfi in c , as well as the values of the (in   nitely
many) paths hf hni, for n     0, is the same feature graph:

h

g

q1

q2

a

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

114 / 420

feature structures

feature graph subsumption

feature graph isomorphism

since feature graphs are just a special case of directed, labeled
graphs, we can adapt the well-de   ned notion of graph isomorphism to
feature graphs.

informally, two graphs are isomorphic when they have the same
structure; the identites of their nodes may di   er without a   ecting the
structure.

in our case, we require also that the labels of sink nodes be identical
in order for two graphs to be considered isomorphic.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

115 / 420

feature structures

feature graph subsumption

feature graph isomorphism

de   nition (feature graph isomorphism)

two feature graphs a = hqa,   qa,   a,   ai and b = hqb ,   qb ,   b ,   bi are
isomorphic, denoted a     b, i    there exists a one-to-one and onto
mapping i : qa     qb, called an isomorphism, such that:

i (  qa) =   qb ;
for all q1, q2     qa and f     feats,   a(q1, f ) = q2 i   
  b (i (q1), f ) = i (q2); and
for all q     qa,   a(q) =   b(i (q)) (either both are unde   ned, or both
are de   ned and equal).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

116 / 420

feature structures

feature graph subsumption

feature graph subsumption

de   nition (subsumption)

let a1 = hq1,   q1,   1,   1i and a2 = hq2,   q2,   2,   2i be two feature graphs.
a1 subsumes a2 (denoted by a1     a2) i    there exists a total function
h : q1     q2, called a subsumption morphism, such that

h(  q1) =   q2
for every q     q1 and for every f such that   1(q, f )   ,
h(  1(q, f )) =   2(h(q), f )
for every q     q1, if   1(q)    then   1(q) =   2(h(q)).

if a1     a2 then a1 is said to subsume, or be more general than a2; a2 is
subsumed by, or is more speci   c than, a1.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

117 / 420

feature structures

feature graph subsumption

subsumption

the morphism h associates with every node in q1 a node in q2; if an
arc labeled f connects q with q   , then such an arc connects h(q) with
h(q   ).
in other words,    and h commute, as depicted in the following
diagram, where   -arcs are depicted using solid lines, whereas
h-mappings are depicted using dashed lines:

   :

f

h

h

f

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

118 / 420

feature structures

feature graph subsumption

subsumption

in addition, if a node q     q1 is marked by an atom, then its image
h(q) must be marked by the same atom (recall that only sinks can be
thus marked).
note that if a sink in q1 is not marked, there is no constraint on its
image (in particular, it can be a non-sink).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

119 / 420

feature structures

feature graph subsumption

subsumption morphism

example (subsumption morphism)

a1

  q

q

f

h

h

a2

h(  q)

h(q)

h

q   

f

h(q   )

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

120 / 420

feature structures

feature graph subsumption

subsumption morphism

example (subsumption)

a :

qa
0

agr

qa
1

pers

num

qa
2

third

qa
3

qb
2

pl

b :

qb
0

agr

qb
1

num

subj

qb
4

agr

pers

qb
3

third

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

121 / 420

feature structures

feature graph subsumption

subsumption morphism

4 in the example.

2 is not marked by an atom (that is, it is
2 , is marked as pl .

indeed, b can   and does   have nodes that do not correspond to
nodes in a: such is qb
in addition, while the sink qa
a variable), its image in b, qb
notice that no subsumption morphism can be de   ned from qb to
qa, since there is no node into which qb
in particular, it cannot be mapped to the root of a since this would
necessitate an arc from qa
0 to itself (as the root of a would be the
image of both qb
4 and qb
0 ).
trying to take h   1 as an inverse subsumption morphism will fail both
because of qb
2 , violating the last
clause of the subsumption relation (a marked sink must be mapped to
a sink with the same mark).
we conclude that b 6    a.

4 and because it would map qb

4 can be mapped.

2 to qa

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

122 / 420

feature structures

feature graph subsumption

subsumption

given a feature structure, what modi   cations can be made to it in
order for it to become more speci   c? three di   erent kinds of
modi   cations are possible:

1 adding arcs;
2 adding reentrancies;
3 marking unmarked sinks by some atom.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

123 / 420

feature structures

feature graph subsumption

subsumption

example (subsumption as an order on information)

num

num

   

   

sg    

num1

sg    

num2

sg

num

num

num

pl

pl

sg

per

third

num1

num2

sg

adding arcs

adding atomic marks

adding arcs

adding reentrancies

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

124 / 420

feature structures

feature graph subsumption

subsumption

lemma

if a     b then   (a)       (b).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

125 / 420

feature structures

feature graph subsumption

subsumption

lemma

if a     b then for each          (a), if   a(  a(  qa,   ))    then   b (  b (  qb ,   ))   
and   a(  a(  qa,   )) =   b(  b (  qb ,   )).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

126 / 420

feature structures

feature graph subsumption

subsumption

lemma

if a     b and   1,   2 are reentrant in a (that is,   1
reentrant in b (that is,   1

b
!   2).

a
!   2) then   1,   2 are

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

127 / 420

feature structures

feature graph subsumption

subsumption

corollary

if a     b, then:

  (a)       (b)
for each          (a), if   a(  a(  qa,   ))    then   b(  b (  qb ,   ))    and
  a(  a(  qa,   )) =   b(  b (  qb ,   ))
a
!   2 then   1

for each   1,   2       (a), if   1
a is reentrant/cyclic then so is b).

b
!   2 (and, therefore, if

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

128 / 420

feature structures

feature graph subsumption

subsumption

theorem
if a is an atomic feature graph and a     b, then a     b.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

129 / 420

feature structures

feature graph subsumption

subsumption

theorem
subsumption has a least element: there exists a feature graph a such that
for all feature graph b, a     b.

proof.
consider the (empty) feature graph a = h{q0}, q0,   ,   i, where    and    are
unde   ned for their entire domains. for every feature graph b, a     b by
mapping (through h) the root q0 to the root of b,   qb . the two clauses of
the de   nition of subsumption hold vacuously.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

130 / 420

feature structures

feature graph subsumption

subsumption

theorem
subsumption is re   exive: for every feature graph a, a     a.

proof.
take h to be the identity function that maps every node in a to itself.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

131 / 420

feature structures

feature graph subsumption

subsumption

theorem
subsumption is transitive: if a     b and b     c then a     c .

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

132 / 420

feature structures

feature graph subsumption

subsumption

theorem
subsumption is not antisymmetric: if a     b and b     a then not
necessarily a = b.

proof.
consider the feature graphs a = h{  qa},   qa,   ,   i and b = h{  qb },   qb ,   ,   i,
where    and    are unde   ned for their entire domains, and where   qa 6=   qb .
trivially, both a     b and b     a, but a 6= b.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

133 / 420

feature structures

feature graph subsumption

subsumption

thus, feature graph subsumption forms a partial pre-order on feature
graphs.

it is a pre-order since it is not antisymmetric; it is partial as there are
feature graphs that are incomparable with respect to subsumption.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

134 / 420

feature structures

feature graph subsumption

subsumption

example (feature graph subsumption is a partial relation)

feature graphs can be incomparable due to inconsistency (contradicting
information) or to complementary information.

sg

sg

num

num

6   
6   

6   
6   

6   
6   

pl

pl

num

pers

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

135 / 420

feature structures

feature graph subsumption

subsumption

there is a clear connection between feature graph isomorphism and
feature graph subsumption:

theorem

a     b i    a     b and b     a.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

136 / 420

feature structures

feature structures

feature structures

feature graphs are a useful notation but they are too discriminating.

usually, the importance of the identities of the nodes in a graph is
inferior to the structure of the graph (including the labels on its
nodes and arcs).

it is therefore bene   cial to collapse feature graphs which only di   er in
the identities of their nodes into an equivalence class.

the de   nition of feature structures as equivalence classes of
isomorphic feature graphs facilitates a view which emphasizes the
structure and ignores the irrelevant information encoded in the nodes.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

137 / 420

feature structures

feature structures

feature structures

de   nition (feature structures)
given a signature of features feats and atoms atoms, let fs = g|    be
the collection of equivalence classes in g(feats, atoms) with respect to
feature graph isomorphism. a feature structure is any member of fs.

we use meta-variables fs to range over feature structures.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

138 / 420

feature structures

feature structures

feature structures

theorem

let fs be a feature structure and let a     fs, b     fs be two feature graphs
in fs. then:

  (a) =   (b)
for each          (a),   a(  a(  qa,   ))    i      b(  b (  qb ,   ))    and
  a(  a(  qa,   )) =   b(  b (  qb ,   ))

for each   1,   2       (a),   1
reentrant/cyclic i    b is reentrant/cyclic).

a
!   2 i      1

b
!   2 (and, therefore, a is

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

139 / 420

feature structures

feature structures

feature structures

de   nition
let fs be a feature structure. then the paths of fs are de   ned as
  (fs) =   (a) for some a     fs.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

140 / 420

feature structures

feature structures

feature structures

from now on, we will usually refer to feature structures through some
feature graph representative, taking care that all de   nitions are
representative independent.

as an example, we can lift the de   nition of reentrancy from feature
graphs to feature structures in the natural way:

de   nition (feature structure reentrancy)
two paths   1,   2 are reentrant in a feature structure fs, denoted
a
!   2 for some a     fs. fs is reentrant if for some
  1
  1 6=   2,   1

fs
!   2, if   1
fs
!   2.

the de   nition is independent of the representative a.

feature structure cyclicity is de   ned in a similar way.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

141 / 420

feature structures

feature structures

feature structures

as another example, we lift the de   nition of subsumption from
feature graphs to feature structures:

de   nition (feature structure subsumption)

if fs1 and fs2 are feature structures, fs1 subsumes fs2, denoted fs1      fs2, i   
for some a     fs1 and some b     fs2, a     b.

since feature structure subsumption is de   ned in terms of a
representative, we must show that the de   nition is representative
independent.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

142 / 420

feature structures

feature structures

feature structures

lemma

the de   nition of feature structure subsumption is independent of the
representative: if a     a    and b     b     then a     b i    a        b    .

proof.
assume that a     a    through an isomorphism ia : qa     qa    and b     b    
through an isomorphism ib : qb     qb   . if a     b there exists a
   1 is a
subsumption morphism h : qa     qb. then h    = ib     h     ia
subsumption morphism mapping qa    to qb    (the proof is left as an
exercise), and hence fs(a   )      fs(b    ). the other direction (if fs(a   )      fs(b    )
then fs(a)      fs(b)) is completely symmetric.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

143 / 420

feature structures

feature structures

feature structures

corollary

if fsa and fsb are feature structures, fsa      fsb i    for every a     fsa and
every b     fsb , a     b.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

144 / 420

feature structures

feature structures

feature structures

like feature graph subsumption, feature structure subsumption is
re   exive and transitive; these properties can be easily established
from their counterparts in the feature graph case.

however, unlike feature graphs, feature structure subsumption is
antisymmetric:

theorem

if fs1      fs2 and fs2      fs1, then fs1 = fs2.

therefore, subsumption is a partial order on feature structures.
in the sequel we will sometimes use the           symbol to denote both
feature graph and feature structure subsumption, when the type of
the arguments of the relation is clear.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

145 / 420

feature structures

feature structures

feature graphs and feature structures

example (feature graphs and feature structures)

feature graph

feature structure

a1

   

a2     a   
2

[  ]   

   

[  ]   

   

   

fs1 = [a1]   

     

fs2 = [a2]   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

146 / 420

feature structures

attribute-value matrices

avms

we now return to attribute-value matrices (avms).

this is the view that we will adopt for depicting feature structures
(and grammars based on them), both because they are easy to
present on paper and because of their centrality in existing literature.

like feature graphs, avms are de   ned over a signature of features
and atoms, which we    x below.

in addition, avms make use of variables, also called tags below.
meta-variables x , y , z , etc. range over over variables.

variables are used to encode sharing of values, as will be clear
presently.

when avms are concerned, we follow the convention of the linguistic
literature by which variables are natural numbers, depicted in boxes,
e.g., 3 .

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

147 / 420

feature structures

attribute-value matrices

avms

de   nition (avms)

given a signature s, the set avms(s) of avms over s is the least set
satisfying the following two clauses:

1 m = xa     avms(s) for any a     atoms and x     tags; m is said

to be atomic and x is the tag of m, denoted tag (m) = x .

2 m = x [f1 : m1, . . . , fn : mn]     avms(s) for n     0, x     tags,
f1, . . . , fn     feats and m1, . . . , mn     avms(s), where fi
6= fj if
i 6= j. m is said to be complex, and x is the tag of m, denoted
tag (m) = x . if n = 0, m = x [] is an empty avm.

note that two avms which di   er only in their tag are distinct: if x 6= y ,

x (cid:2)        (cid:3) 6= y (cid:2)        (cid:3). in particular, there is no unique empty avm. note also

that the same variable can be used more than once in an avm.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

148 / 420

feature structures

attribute-value matrices

avms

example (avms)

consider a signature consisting of atoms = {a} and feats = {f,g}.
then m1 = 4 a is an avm by the    rst clause of the de   nition, m2 = 2 [ ] is

second clause (using m1 as the value of f, so that fval(m3, f) = m1), and

4 a(cid:3) is an avm by the

an empty avm by the second clause, m3 = 3 (cid:2)f :
4 a(cid:3)
(cid:21)

m4 = 2 (cid:20)g :

3 (cid:2)f :

2 [ ]

f :

is an avm by the second clause, as is

m5 = 4 (cid:20)g :

f :

3 (cid:2)f :

2 [ ]

4 a(cid:3)
(cid:21)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

149 / 420

feature structures

attribute-value matrices

avms

meta-variables m, with or without subscripts, range over avms; the
parameter s is omitted when it is clear from the context.
the domain of an avm m, denoted dom(m), is unde   ned when m is
atomic, and {f1, . . . , fn} when m is complex (hence, dom(m) is
empty for an empty avm).
the value of some feature f     feats in m, denoted fval(m, f ), is
de   ned if f = fi     dom(m), in which case it is mi , and unde   ned
otherwise.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

150 / 420

feature structures

attribute-value matrices

sub-avms

de   nition (sub-avms)

given an avm m, its sub-avms are subavm(m), de   ned as:

1 subavm(xa) = {xa}

2 subavm(x [f1 : m1, . . . , fn : mn]) = x [f1 : m1, . . . , fn : mn] s

   1   i    nsubavm(mi )

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

151 / 420

feature structures

attribute-value matrices

avms

de   nition (tags)

given an avm m, its tags tags(m) are de   ned as:

1 tags(xa) = {x }
2 tags(x [f1 : m1, . . . , fn : mn]) = x    1   i    n tags(mi )

de   nition (tagset)

the tagset of an avm m and a tag x     tags(m) is the set of sub-avms
of m (including m itself) which are tagged by x :
tagset(m, x ) = {m         subavm(m) | tag (m    ) = x }.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

152 / 420

avms

example (avms)
let:

feature structures

attribute-value matrices

m4 = 2 (cid:20)g :

f :

3 (cid:2)f :

2 [ ]

4 a(cid:3)
(cid:21)

fval(m4, f) = 2 [ ]. observe that tags(m4) = { 2 , 3 , 4 }. also,

tagset(m4, 4 ) is { 4 a}, tagset(m4, 3 ) is { 3 (cid:2)f :

tagset(m4, 2 ) is {m4, 2 [ ]}.
trivially, tag (m4) = 2 .

4 a(cid:3)} and

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

153 / 420

avms

example (avms)

let:

feature structures

attribute-value matrices

m5 = 4 (cid:20)g :

f :

3 (cid:2)f :

2 [ ]

4 a(cid:3)
(cid:21)

that tags(m5) = { 2 , 3 , 4 }.also tagset(m5, 2 ) = { 2 [ ]},

similarly, fval(m5, f) = 2 [ ], whereas fval(m5, g) = 3 (cid:2)f :
tagset(m5, 3 ) = { 3 (cid:2)f :

4 a(cid:3)} and tagset(m5, 4 ) = {m5, 4 a}.

trivially, tag (m5) = 4 .

4 a(cid:3). observe

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

154 / 420

feature structures

attribute-value matrices

avms

example (avms)
as another example, consider the avm

m6 = 1 (cid:2)f :

1 (cid:2)f :

1 (cid:2)f :

here, tags(m6) = { 1 }, and tagset(m6, 1 ) is:

1 [ ](cid:3)(cid:3)(cid:3)

{m6, 1 (cid:2)f :

of course, tag (m6) = 1 .

1 (cid:2)f :

1 [ ](cid:3)(cid:3) , 1 (cid:2)f :

1 [ ](cid:3) , 1 [ ]}

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

155 / 420

feature structures

attribute-value matrices

well-formed avms

consider some avm m = 1 (cid:20)f1 :

f2 :

2 m1

2 m2(cid:21) where m1 6= m2.

both m1 and m2 are sub-avms of m, and both have the same tag,
although they are di   erent.

in other words, the recursive de   nition of avms allows two di   erent,
contradicting avms to be in the tagset of the same variable.

to eliminate such cases, we de   ne well-formed avms as follows:

de   nition (well-formed avms)

an avm m is well-formed i    for every variable x     tags(m),
tagset(m, x ) includes at most one non-empty avm.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

156 / 420

feature structures

attribute-value matrices

variable associations

henceforth, we only consider well-formed avms.

this allows us to provide a concise interpretation of shared values in
avms: we wish to make explicit the special role that multiple
occurrences of the same variable in a single avm play.

to this end, we would like to say that the association of a variable
x     tags(m) in an avm m, written assoc(m, x ), is the avm which
is tagged by x ; if, in a given avm m, a variable x occurs exactly
once, then assoc(m, x ) is a single, unique value.

if, however, x occurs more than once in m, special care is required.
recall that for well-formed avms, at most one of these multiple
occurrences is associated with a non-empty avm.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

157 / 420

feature structures

attribute-value matrices

variable associations

de   nition (variable association)

for a variable x     tags(m), the association of x in m, denoted
assoc(m, x ), is the single non-empty avm in tagset(m, x ); if only x [ ]
is a member of tagset(m, x ), then assoc(m, x ) = x [ ].

note that assoc assigns exactly one sub-avm of m to each variable
occurring in m, independently of the number of occurrences of the
variable in m or the size of tagset(m, x ).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

158 / 420

feature structures

attribute-value matrices

variable associations

example (variable association)
consider the well-formed avm

m = 2 (cid:20)g :

f :

3 (cid:2)f :

2 [ ]

4 a(cid:3)
(cid:21)

assoc(m, 4 ) = 4 a. the two occurrences of the variable 2 have one and

observe that assoc(m, 2 ) = m, assoc(m, 3 ) = 3 (cid:2)f :
the same association. for m     = 4 (cid:2)f :

4 a(cid:3) and
4 [ ](cid:3), assoc(m    , 4 ) = m    .

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

159 / 420

feature structures

attribute-value matrices

avm paths

de   nition (avm paths)

let m be an avm. let arcs(m) be de   ned as:
arcs(m) = {hx , f , y i | x , y     tags(m), f     dom(assoc(m, x )) and
tag (fval(assoc(m, x ), f )) = y }. let arcs* be the extension of arcs to
paths, de   ned (recursively) by:

for all x     tags(m), hx ,   , x i     arcs*(m)
if hx , f , y i     arcs(m) then hx , f , y i     arcs*(m)
if hx , f , y i     arcs(m) and hy ,   , z i     arcs*(m) then
hx , f      , z i     arcs*(m)

the paths of m, denoted   (m), is the set {   | x = tag (m) and for some
variable y     tags(m), hx ,   , y i     arcs*(m)}.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

160 / 420

feature structures

attribute-value matrices

paths

example (paths)

consider again the avm

m = 2 (cid:20)g :

f :

3 (cid:2)f :

2 [ ]

4 a(cid:3)
(cid:21)

observe that arcs(m) = {h 2 , g, 3 i, h 2 , f, 2 i, h 3 , f, 4 i}. therefore,
arcs*(m) includes, in addition to the elements of arcs(m), also
h 2 ,   , 2 i, h 2 , hgfi, 4 i and, due to the multiple occurrence of 2 , the
in   nitely many triples h 2 , fi    hg,fi, 4 i for any i     0.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

161 / 420

feature structures

attribute-value matrices

path values

de   nition (path values)

the value of a path    in an avm m, denoted pval(m,   ), is assoc(m, y ),
where y is such that htag (m),   , y i     arcs*(m). this is well de   ned
since arcs* is functional. similarly, pval is partial since arcs* is partial.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

162 / 420

feature structures

attribute-value matrices

path values

example (path values)

in the avm

m = 2 (cid:20)g :

f :

pval(m,   ) = m; pval(m, hgi) = 3 (cid:2)f :

pval(m, hfi) = pval(m, hffi) = pval(m, hfffi) = m. pval(m, hggi) is
unde   ned.

2 [ ]

3 (cid:2)f :
4 a(cid:3)
(cid:21)
4 a(cid:3); and

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

163 / 420

feature structures

attribute-value matrices

reentrancy

de   nition (reentrancy)
two paths   1 and   2 are reentrant in an avm m if
pval(m,   1) = pval(m,   2), denoted also   1
reentrant if there exist two distinct paths   1,   2 such that   1

m
!   2. an avm m is

m
!   2.

in the avm m of the previous example,   
pval(m,   ) = pval(m, hfi) = m.

m
! hfi because

de   nition (cyclic avms)

an avm m is cyclic if two paths   1,   2       (m), where   1 is a proper
subsequence of   2, are reentrant:   1

m
!   2.

m of the previous example is therefore cyclic, e.g., by the paths    and hfi.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

164 / 420

feature structures

attribute-value matrices

reentrancy

example (a reentrant avm)

the following avm is reentrant but not cyclic:

0    
      

agr :

subj :

pers :

1 (cid:20)num :
4 (cid:2)agr :

2 pl

   
3 third(cid:21)
      
1(cid:3)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

165 / 420

feature structures

attribute-value matrices

conventions

we introduce three conventions regarding the depiction of
well-formed avms, motivated by the fact that variables are used
primarily to indicate value sharing.

if a variable occurs more than once then its value is explicated only
once; where this value is explicated (i.e., next to which occurrence of
the variable) is immaterial.

variables which occur only once can be omitted.

the empty avm is sometimes omitted when it is associated with a
variable.

the    rst convention is crucial in the case of cyclic avms: there is no
   nite representation of cyclic avms unless this convention is adopted.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

166 / 420

feature structures

attribute-value matrices

conventions

example (shorthand notation for avms)
consider the following avm:

f :
g :
h :

6    
   

3 [ ]

4 (cid:2)h :

2 [ ]

   
3 a(cid:3)
   

notice that it is well-formed, since the only variable occurring more than
once ( 3 ) is associated with a non-empty value (a) only once.

we can therefore leave only one occurrence of the value explicit

the tag 2 is associated with the empty feature structure, which can
be omitted

finally, the tags 4 and 6 occur only once, so they can be omitted

this is the conventional form of the avm.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

167 / 420

feature structures

attribute-value matrices

avm subsumption

de   nition (avm subsumption)

let m1, m2 be avms over the same signature. m1 subsumes m2,
denoted m1 (cid:22) m2, if there exists a total function
h : tags(m1)     tags(m2) such that:

1 h(tag (m1)) = tag (m2)

2

3

for every hx , f , y i     arcs(m1), hh(x ), f , h(y )i     arcs(m2)
for every x     tags(m1), if assoc(m1, x ) is atomic then
assoc(m2, h(x )) is atomic, with the same atom.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

168 / 420

feature structures

attribute-value matrices

avm subsumption

lemma
if m1 (cid:22) m2 through h and hx ,   , y i     arcs*(m1) then
hh(x ),   , h(y )i     arcs*(m2).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

169 / 420

feature structures

attribute-value matrices

avm subsumption

corollary

if m1 (cid:22) m2 then   (m1)       (m2) and if   1

m1
!   2 then   1

m2
!   2.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

170 / 420

feature structures

attribute-value matrices

avm isomorphism

when two avms are identical up to the variables which occur in
them, one avm can be obtained from the other by a systematic
renaming of the variables;

we say that the two avms are isomorphic.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

171 / 420

feature structures

attribute-value matrices

avm isomorphism

example (isomorphic avms)

let

m1 = 2 (cid:20)g :

f :

3 (cid:2)f :

2 [ ]

4 a(cid:3)
(cid:21)

m2 = 22 (cid:20)g :

f :

23 (cid:2)f :

22 [ ]

24 a(cid:3)
(cid:21)

then m2 can be obtained from m1 by systematically replacing 22 for 2 ,
23 for 2 and 24 for 4 .

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

172 / 420

feature structures

attribute-value matrices

renaming

of course, one must be careful renaming variables, especially when
the same variable may occur in both avms.

for example, if m = 2 (cid:2)f :
m = 2 (cid:2)f :

2 a(cid:3) which is not even well-formed.

1 a(cid:3) then renaming 1 to 2 will result in

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

173 / 420

feature structures

attribute-value matrices

avm isomorphism

theorem
if m1 and m2 are isomorphic avms then both m1 (cid:22) m2 and m2 (cid:22) m1.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

174 / 420

feature structures

attribute-value matrices

avm equivalence

another case of avm equivalence is induced by the convention by
which if a variable occurs more than once in an avm then its value is
explicated only once.

a consequence of this convention is that two avms which di   er only
with respect to where the (single) value of some multiply occurring
variable is explicated subsume each other, as they induce the same
set of arcs.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

175 / 420

feature structures

attribute-value matrices

avm equivalence

example (avm equivalence)

m1 and m2 di   er only in the instance of 0 whose value is explicated:

m1 = 0    
   

agr :

subj :

pers :

1 (cid:20)num :
4 (cid:2)agr :

2 pl

3 third(cid:21)
   
   
1(cid:3)

m2 = 0    
   

agr :

subj :

1

4 (cid:20)agr :

1 (cid:20)num :

pers :

2 pl

   
3 third(cid:21)(cid:21)
   

then m1 (cid:22) m2 and m2 (cid:22) m1.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

176 / 420

feature structures

attribute-value matrices

avm equivalence

theorem

let m and m     be two avms such that x     tags(m)     tags(m    ), and
assume that x occurs twice in m and in m     (that is, |tagset(m, x )| > 1
and |tagset(m    , x )| > 1). if m and m     are identical up to the choice of
which instance of x in them is explicated, then m (cid:22) m     and m     (cid:22) m.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

177 / 420

feature structures

attribute-value matrices

avm equivalence

de   nition (renaming)

let m1 and m2 be two avms. m2 is a renaming of m1, denoted
m1     m2, i    m1 (cid:22) m2 and m2 (cid:22) m1.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

178 / 420

feature structures

attribute-value matrices

avm equivalence

example (avm renamings)

the following two avms are renamings of each other:

m1 = 0    
   

agr :

subj :

m2 = 10    
   

agr :

subj :

11

14 (cid:20)agr :

2 pl

pers :

1 (cid:20)num :
4 (cid:2)agr :

3 third(cid:21)
   
   
1(cid:3)
11 (cid:20)num :

pers :

12 pl

   
13 third(cid:21)(cid:21)
   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

179 / 420

feature structures

the correspondence between feature graphs and avms

the correspondence between feature graphs and avms

avms are the entities that the linguistic literature employs to depict
feature structures;

feature graphs are well-understood mathematical entities to which
various results of id207 can be applied.

we de   ne the relationship between these two views.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

180 / 420

feature structures

the correspondence between feature graphs and avms

from avms to feature graphs

we formalize the correspondence between avms and feature graphs
by presenting a mapping,   , which embodies the relation between an
avm and its feature graph image.

informally, a given avm m is mapped to a concrete graph whose
nodes are the variables occurring in the avm, tags(m).

the root of the graph is the variable tagging the entire avm; and the
arcs are determined using the function val .

atomic avms are mapped to single nodes, labeled by the atom, with
no outgoing arcs.

empty avms are mapped to a graph having just one node, bearing
no label and having no outgoing features.

complex avms are mapped to graphs whose nodes, including the
root, may have outgoing arcs, where the arcs    labels correspond to
features.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

181 / 420

feature structures

the correspondence between feature graphs and avms

from avms to feature graphs

de   nition (avm to graph mapping)

let m be a well-formed avm. the feature graph image of m is
  (m) = hq,   q,   ,   i, where:

q = tags(m)

  q = tag (m)
for all x     tags(m) and f     feats,   (x , f ) = y i   
hx , f , y i     arcs(m), and
for all x     tags(m) and a     atoms,   (x ) = a i    assoc(m, x ) is
the atomic avm xa, and is unde   ned otherwise.

note that if m1 and m2 are two avms which di   er only in the order of
the    rows    of feature   value pairs, they will be mapped by    to exactly the
same feature graph.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

182 / 420

feature structures

the correspondence between feature graphs and avms

from avms to feature graphs

example (avm to graph mapping)

let

m = 3    
   

f :

g :

1 (cid:2)f1 :
2 (cid:20)g1 :

g2 :

9 a

7 a(cid:3)
   
1 [ ](cid:21)
   

m is well-formed. the associa-
tions of the variables of m are:

variable association
1

9 a

7 a(cid:3)
1 [ ](cid:21)
1 (cid:2)f1 :
2 (cid:20)g1 :

g2 :

g2 :
f :

1 (cid:2)f1 :
2 (cid:20)g1 :
3    
   

g :

7 a
9 a

9 a

7 a(cid:3)
   
1 [ ](cid:21)
   

2

3

7

9

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

183 / 420

feature structures

the correspondence between feature graphs and avms

from avms to feature graphs

example (avm to graph mapping)

the feature graph image of m is   (m) = hq,   q,   ,   i where
q = { 3 , 1 , 7 , 2 , 9 },   q = 3 ,   ( 7 ) =   ( 9 ) = a (and    is unde   ned
elsewhere), and    is given by:   ( 3 , f) = 1 ,   ( 3 , g) = 2 ,   ( 1 , f1) = 7 ,
  ( 2 , g1) = 9 ,   ( 2 , g2) = 1 and    is unde   ned elsewhere.

  (m) =

3

f1

g1

7

9

a

a

f

g

g2

1

2

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

184 / 420

feature structures

the correspondence between feature graphs and avms

from avms to feature graphs

example (avm to graph mapping)

a reentrant avm and its feature graph image:

m = 0    
   

agr :

subj :

pers :

1 (cid:20)num :
4 (cid:2)agr :

2 pl

3 third(cid:21)
   
   
1(cid:3)

  (m) =

0

agr

1

num

2

pl

subj

4

agr

pers

3

third

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

185 / 420

feature structures

the correspondence between feature graphs and avms

from avms to feature graphs

example (avm to graph mapping in the face of cycles)

let m be the (cyclic) avm

m = 3 (cid:2)f :

3 [ ](cid:3)

where tags(m) = { 3 }. observe that m is well-formed, as the only
variable that occurs more than once in m, namely 3 , has only one
non-empty avm associated with it: m itself. the graph   (m) will
therefore be hq,   q,   ,   i, where q = { 3 },   q = 3 ,   ( 3 ) is unde   ned and
  ( 3 , f) = 3 ,    unde   ned elsewhere. this graph is:

  (m) = 3

f

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

186 / 420

feature structures

the correspondence between feature graphs and avms

from avms to feature graphs

lemma

if m is an avm and a =   (m) is its feature graph image, then for all
x , y     tags(m) and        paths, hx ,   , y i     arcs*(m) i   
  a(x ,   ) = y .

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

187 / 420

feature structures

the correspondence between feature graphs and avms

from avms to feature graphs

corollary

if m is an avm and a =   (m) is its feature graph image, then
  (m)
!   2.

  (m) =   (a) and for all   1,   2     paths,   1

m
!   2 i      1

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

188 / 420

feature structures

the correspondence between feature graphs and avms

from avms to feature graphs

theorem

for all avms m1, m2, m1 (cid:22) m2 i      (m1)       (m2).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

189 / 420

feature structures

the correspondence between feature graphs and avms

from avms to feature graphs

corollary
for all avms m1, m2, m1     m2 i      (m1)       (m2).

this concludes the    rst direction of the correspondence between avms
and feature graphs.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

190 / 420

feature structures

the correspondence between feature graphs and avms

from feature graphs to avms

for the reverse direction, we de   ne a mapping,   , from feature graphs
to avms.

as above, there should be a correspondence between nodes in the
graph and variables in the avm.

but note that while the nodes of a feature graph are part of the
de   nition of the graph, avms are de   ned over a universal set of
variables.

we must therefore pre-de   ne a set of variables, called v below, for
each avm m, to serve as tags(m).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

191 / 420

feature structures

the correspondence between feature graphs and avms

from feature graphs to avms

in addition, avms exhibit a degree of freedom which is not present in
feature graphs;

this is due to the fact that multiple occurrences of the same variable
can be explicated along with any of the instances of the variable.

to overcome this di   culty, we    rst introduce the notion of
arborescence.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

192 / 420

feature structures

the correspondence between feature graphs and avms

arborescence

de   nition
given a feature graph a = hq,   q,   ,   i, a tree    = hq, e i, where e       , is
an arborescence of a if    is a minimum spanning directed tree of a,
rooted in   q.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

193 / 420

feature structures

the correspondence between feature graphs and avms

arborescence

informally, an arborescence of a given feature graph is a tree
consisting of the nodes of the graph and the minimum number of arcs
required for de   ning some shortest possible path from the root to
each of the nodes in the graph.

since feature graphs are connected and each node is accessible from
the root, such a tree always exists, but it is not necessarily unique.

a simple algorithm for producing an arborescence scans the tree, from
the root, in some order, and marks each node by the length of the
shortest path from the root to that node, marking additionally the
incoming arcs to the node that are parts of minimum length paths.

then, for each node with in-degree greater than 1, only a single
marked arc is retained.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

194 / 420

feature structures

the correspondence between feature graphs and avms

arborescence

example (arborescence)

let a be the graph: a =

q3

f

g

g2

q1

q2

f1

g1

then the following trees are arborescences of a:

q7

a

q9

q1

q3

f

g

f1

g1

q7

a

q9

q1

q2

f1

g1

q7

a

q9

q3

g2

g

q2

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

195 / 420

feature structures

the correspondence between feature graphs and avms

arborescence

de   nition (feature graph to avm mapping)

let a = hq,   q,   ,   i be a feature graph and let    = hq, e i be an arborescense of
a. let v     tags be a set of |q| variables and i : q     v be a one-to-one
mapping. for each node q     q, de   ne m   

i (q) as:

if   (q, f )    for all f     feats and   (q)   , then m   

i (q) = i (q) [ ]

if   (q, f )    for all f     feats and   (q) = a, then m   

i (q) = i (q)a

if   (q, fi ) = qi for 1     i     n , where n is the out-degree of q, then

m   

i (q) = i (q)   
      

f1 :   1
...
...
fn :   n

   
      

where   i = m   
  i = i (qi ) otherwise.

i (qi ) if hq, fi , qi i     e ,

the avm expression of a with respect to an arborescence    is     

i (a) = m   

i (  q).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

196 / 420

feature structures

the correspondence between feature graphs and avms

feature graph to avm mapping

example (feature graph to avm mapping)

let a be the graph: a =

let    = hq, e i be:

q3

f1

q1

g2

g1

q7

a

q9

q2

f1

g1

q7

a

q9

f

g

q1

q2

q3

f

g

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

197 / 420

feature structures

the correspondence between feature graphs and avms

feature graph to avm mapping

example (feature graph to avm mapping)

since q = {q1, q2, q3, q7, q9} we select a set of    ve variables from tags;
say, v = { 1 , 2 , 3 , 7 , 9 }. we de   ne a one-to-one mapping i from q to v ;
here, the function which maps qi to i .
to compute the avm expression of a (with respect to    and i ) we start
with the sinks of the graph: nodes with no outgoing edges. there are two
such nodes in a, namely q7 and q9. by the de   nition,
m   
m   

i (q7) = i (q7)a = 7 a. then,

i (q9) = i (q9) [ ] = 9 [ ], and m   
i (q1) = i (q1)(cid:2)f1 : m   

i (q7)(cid:3) = 1 (cid:2)f1 :

7 a(cid:3).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

198 / 420

feature structures

the correspondence between feature graphs and avms

feature graph to avm mapping

example (feature graph to avm mapping)
more interestingly,

m   

i (q2) = i (q2)(cid:20)g1 : m   

i (q1) (cid:21) = 2 (cid:20)g1 :
i (q9)

g2 :

g2 :

9 [ ]
1

(cid:21) .

note how the value of 1 is not explicated, as the arc hq2, g2, q1i is not
included in    . finally,

m = m   

i (q3) = i (q3)(cid:20)f : m   

g : m   

i (q1)

i (q2)(cid:21) = 3    
   

f :

g :

1 (cid:2)f1 :
2 (cid:20)g1 :

g2 :

7 a(cid:3)

9 [ ]
1

   
(cid:21)
   

observe that the result is a well-formed avm, and that the reentrancy in
a is re   ected in m.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

199 / 420

feature structures

the correspondence between feature graphs and avms

feature graph to avm mapping

example (feature graph to avm mapping)
had we chosen the other arborescence of a, the resulting avm would
have been:

f :

g :

3    
   

1

2 (cid:20)g1 :

g2 :

9 [ ]

1 (cid:2)f1 :

   
(cid:21)
   
7 a(cid:3)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

200 / 420

feature structures

the correspondence between feature graphs and avms

feature graph to avm mapping

example (feature graph to avm mapping in the face of cycles)

let a be the following graph, whose unique arborescence is    :

a = q0

f

g

q1

   = q0

f

q1

de   ne v = { 0 , 1 } and i maps qi to i . m   
m = m   

i (q0) = 0 (cid:2)f : m   

i (q1)(cid:3) = 0 (cid:2)f :

i (q1) = 1 (cid:2)g :
1 (cid:2)g :
0(cid:3)(cid:3).

0(cid:3), and hence

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

201 / 420

feature structures

the correspondence between feature graphs and avms

feature graph to avm mapping

recall that the function   , mapping a feature graph to an avm, is
dependent on    , the arborescence chosen for the graph.

when a given feature graph a has several di   erent arborescences, it
has several di   erent avm expressions.

however, these expressions are not arbitrarily di   erent; in fact, they
are all renamings of each other.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

202 / 420

feature structures

the correspondence between feature graphs and avms

feature graph to avm mapping

lemma
let a = hq,   q,   ,   i be a feature graph and let
  1 = hq1, e1i,   2 = hq2, e2i be two arborescenses of a. let
v1, v2     tags be two sets of |q| variables and i1, i2 : q     v be two
one-to-one mapping. then     1
i1

(a) and     2
i2

(a) are renamings of each other.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

203 / 420

feature structures

the correspondence between feature graphs and avms

feature graph to avm mapping

lemma

if a = hq,   q,   ,   i is a feature graph and m =     
expressions, then for all q1, q2     q and f     feats,   a(q1, f ) = q2 i   
hi (q1), f , i (q2)i     arcs(m).

i (a) is any one of its avm

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

204 / 420

feature structures

the correspondence between feature graphs and avms

feature graph to avm mapping

corollary

if a is a feature graph and m =     
then:

i (a) is any one of its avm expressions,

  (a) =   (m);

for every path   , pval(m,   ) is an atomic avm with the atom a i   
vala(  ) is the graph h{  q},   q,   ,   i for some node   q, where    is
unde   ned and   (  q) = a; and

for every   1,   2,   1

a
!   2 i      1

m
!   2.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

205 / 420

feature structures

the correspondence between feature graphs and avms

feature graph to avm mapping

corollary

if a is a feature graph and m1 =     1
i1
expressions, then m1     m2.

(a), m2 =     2
i2

(a) are two of its avm

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

206 / 420

feature structures

the correspondence between feature graphs and avms

feature graph to avm mapping

theorem

for all feature graphs a1 = hq1,   q1,   1,   1i, a2 = hq2,   q2,   2,   2i, a1     a2
i    for all arborescences   1,   2 of a1 and a2, respectively, and mappings
i1, i2,     1
i1

(a1) (cid:22)     2
i2

(a2).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

207 / 420

feature structures

the correspondence between feature graphs and avms

feature graph to avm mapping

corollary
for all feature graphs a1, a2, a1     a2 i      (a1)       (a2).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

208 / 420

feature structures

the correspondence between feature graphs and avms

avms, feature graphs, feature structures and afss

example (avms, feature graphs, feature structures and afss)

avm

feature graph

feature structure

afs

  

[  ]   

abs

m1

(cid:22)

  ,       

m2     m    
2
  ,   

a1

   

a2     a   
2

   

   

fs1 = [a1]   

f1 = abs(a1)

     

  (cid:22)

fs2 = [a2]   

f2 = abs(a2)

conc

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

209 / 420

uni   cation

uni   cation motivation

we presented di   erent views of feature structures, with
correspondences among them.

for each of the views, a subsumption relation was de   ned in a natural
way.

we now de   ne the operation of uni   cation for these views.

the subsumption relation compares the information content of
feature structures.

uni   cation combines the information that is contained in two
(compatible) feature structures.

we use the term    uni   cation    to refer to both the operation and its
result. whenever two feature structures are related, they are assumed
to be over the same signature.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

210 / 420

uni   cation

uni   cation motivation

the mathematical interpretation of    combining    two members of a
partially ordered set is to take the least upper bound of the two
operands with respect to the partial order; in our case, subsumption.

indeed, feature structure uni   cation is exactly that.

however, since subsumption is antisymmetric for feature structures
and afss but not for feature graphs and avms, a unique least upper
bound cannot be guaranteed for all four views.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

211 / 420

feature structure uni   cation

uni   cation

feature structure uni   cation

de   nition (feature structure uni   cation)
two feature structures fs1 and fs2 are consistent if they have an upper
bound (with respect to subsumption), and inconsistent otherwise. if fs1
and fs2 are consistent, their uni   cation, denoted fs1      fs2, is their least
upper bound with respect to subsumption.

if two feature structures have an upper bound, they have a (unique) least
upper bound.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

212 / 420

feature graph uni   cation

uni   cation

feature graph uni   cation

while the de   nition of uni   cation as least upper bound is useful
mathematically, it does not tells us how to compute the uni   cation of
two given feature structures.

to this end, we provide a constructive de   nition in terms of feature
graphs, which induces an algorithm for computing uni   cation.

for reasons that will be clear presently, we require that the two
feature graphs be node-disjoint.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

213 / 420

feature graph uni   cation

uni   cation

feature graph uni   cation

de   nition

let a = hqa,   qa,   a,   ai and b = hqb ,   qb ,   b ,   bi with qa     qb =     be
u
       be the least equivalence relation on qa     qb
two feature graphs. let    
such that:
u
      qb

  qa
for every q1, q2     qa     qb and f     feats, if
q1
(  a       b )(q1, f )

u
    q2, (  a       b )(q1, f )    and (  a       b )(q2, f )   , then

u
    (  a       b )(q2, f )

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

214 / 420

feature graph uni   cation

uni   cation

feature graph uni   cation

u
       relation partitions the nodes of qa     qb to equivalence

the    
classes such that both roots are in the same class, and if some feature
is de   ned for two nodes in one class, then the two nodes this feature
leads to are also in one (possibly di   erent) class.

clearly, the number of equivalence classes (called the index of
   nite.
the requirement that qa and qb be disjoint is essential here: we
would want two nodes to be in the same equivalence class with
respect to    
allowed a non-empty intersection of nodes,    
di   erent relation.

u
       only if they comply with the above de   nition; if we
u
       could have been a

u
   ) is

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

215 / 420

the

u
    relation

uni   cation

feature graph uni   cation

a :

b :

g

f

f

qa
0

qb
0

num

qa
1

qa
2

sg

pers

qb
1

qb
2

3rd

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

216 / 420

the

u
    relation

uni   cation

feature graph uni   cation

h

qa
2

g

qa
1

qb
1

a :

b :

qa
0

qb
0

f

g

f

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

217 / 420

type-respecting relation

uni   cation

feature graph uni   cation

de   nition
a binary relation           over the nodes of two feature structures qa     qb is
said to be type respecting i    for every node q     qa     qb, if
(  a       b)(q)    and (  a       b)(q) = a, then for every node q    such that
q     q   , q    is a sink and either (  a       b )(q   )    or (  a       b)(q   ) = a.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

218 / 420

type-respecting relation

uni   cation

feature graph uni   cation

u
       not type respecting?

when is    
the above condition can hold for a node q     qa     qb only if
(  a       b)(q)   ; that is, q must be a sink in either a or b.
the type respecting condition requires that all nodes that are
equivalent to q be sinks, either unmarked or marked by the same
atom.

since this is the only requirement, the relation is not type respecting
if it maps two nodes, one of which is a marked sink and the other of
which is either a non-sink or a sink with a di   erent label, to the same
equivalence class.

a non-type respecting    

u
       is the only source for uni   cation failure.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

219 / 420

type respecting

u
    relation

uni   cation

feature graph uni   cation

a :

b :

g

f

f

qa
0

qb
0

num

qa
1

qa
2

sg

pers

qb
1

qb
2

3rd

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

220 / 420

feature graph uni   cation

uni   cation

feature graph uni   cation

lemma

if a and b have a common upper bound c , such that a     c through the
morphism ha and b     c through the morphism hb, and if qa     qa and
qb     qb are such that qa

u
    qb , then ha(qa) = hb (qb ).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

221 / 420

feature graph uni   cation

uni   cation

feature graph uni   cation

de   nition (feature graph uni   cation)

let a and b be two feature graphs such that qa and qb are disjoint. the
uni   cation of a and b, denoted a     b, is de   ned only if    
in which case it is the feature graph hq,   q,   ,   i, where:

u
       is type respecting,

q = {[q] u

   

| q     (qa     qb )}

  q = [  q1] u

   

(= [  q2] u

   

)

  ([q] u

   

  ([q] u

   

   

undef.

, f ) = (cid:26) [q      ] u
) = (cid:26) (  a       b )(q   )

unde   ned

if there exists q        [q] u
if (  a       b )(q   , f )    for all q        [q] u

   

   

s.t. (  a       b )(q   , f ) = q      

if there exists q        [q] u
if (  a       b )(q   )    for all q        [q] u

   

s.t. (  a       b )(q   )   

   

u
    is not type respecting, a and b are inconsistent.

if

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

222 / 420

feature graph uni   cation

uni   cation

feature graph uni   cation

a :

b :

g
g

f
f

f

qa
0

qb
0

num
num

qa
1

qa
2

sg

pers
pers

qb
1

qb
2

3rd

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

223 / 420

uni   cation

uni   cation

feature graph uni   cation

to see that the result of uni   cation is indeed a feature graph, observe
that

hq,   q,   ,   i is connected because both a and b are connected;
it is    nite since both a and b are (and hence the number of
equivalence classes is    nite);
and    labels only sinks, since

u
    is type respecting.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

224 / 420

uni   cation

uni   cation

feature graph uni   cation

example (uni   cation combines information)

num

q0

q1

sg

   

q3

num

= q6

pers

q5

3rd

pers

q7

sg

q8

3rd

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

225 / 420

uni   cation

uni   cation

feature graph uni   cation

example (uni   cation is absorbing)

num

q0

q1

sg

   

q3

num

pers

q4

sg

q5

3rd

num

= q6

pers

q7

sg

q8

3rd

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

226 / 420

uni   cation with reentrancies

uni   cation

feature graph uni   cation

subj

num

pers

sg

3rd

obj

subj

obj

subj

obj

num

pers

sg

3rd

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

227 / 420

uni   cation

feature graph uni   cation

uni   cation

theorem

if a and b are inconsistent, they do not have a common upper bound.
otherwise, c = a     b is a minimal upper bound of a and b with respect
to (feature graph) subsumption.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

228 / 420

uni   cation

uni   cation

feature graph uni   cation

the previous theorem connects feature graph uni   cation with feature
structure uni   cation.
in order to compute fs = fs1      fs2, simply compute a = a1     a2,
where a1     fs1 and a2     fs2, and take fs = [a]   .

theorem
for all feature graphs a1, a2, if a = a1     a2 then [a]    = [a1]         [a2]   .

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

229 / 420

uni   cation as a computational process

uni   cation

uni   cation as a computational process

uni   cation, as de   ned above, turns out to be very e   cient to
implement.

several algorithms for feature structure uni   cation have been
proposed.

we present a simple algorithm, based directly on the de   nition, for
unifying two feature graphs.

the algorithm uses two operations, known as union and    nd, to
manipulate equivalence classes.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

230 / 420

uni   cation as a computational process

uni   cation

uni   cation as a computational process

feature graphs are implemented using the following data structure:
each node q is a record (or structure) with the    elds:

label, specifying   (q) (if de   ned); and
feats, specifying   , which is a list of pairs, consisting of features and
pointers to nodes.

a node q is a sink if and only if q.feats is empty, and only such nodes
are labeled.
if   (q)   , the    eld label is nil.

the functions is labeled and is sink receive a node record and return
true if and only if the node is labeled or has no outgoing edges,
respectively.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

231 / 420

uni   cation as a computational process

uni   cation

uni   cation as a computational process

to implement the union-   nd algorithm, an additional    eld, class, is
added to nodes.

it is used to point to the equivalence class of the node.

upon initialization of the algorithm, for every node q, q.class points
back to q, indicating that each node is a separate equivalence class.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

232 / 420

uni   cation as a computational process

uni   cation

uni   cation as a computational process

example (internal representation of a feature graph)

qa
0

f

g

qa
1

h

qa
2

sg

label : nil
feats :
class :

hf, gi

label : nil
hhi
feats :
class :

sg
hi

label :
feats :
class :

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

233 / 420

uni   cation as a computational process

uni   cation

uni   cation as a computational process

the    nd operation receives a node and returns a unique, canonical
representative of its equivalence class

also, union receives two (representatives of) classes and merges them
by setting the equivalence class of all members of the second class to
that of the    rst.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

234 / 420

uni   cation algorithm

uni   cation

uni   cation as a computational process

example (uni   cation algorithm)

input: two feature graphs a and b

output: if fs(a) and fs(b) are uni   able, then a representative of
fs(a)     fs(b), else fail.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

235 / 420

uni   cation

uni   cation as a computational process

uni   cation algorithm

example (uni   cation algorithm)

s    {h  qa,   qb i}
while s 6=    

select a pair hq1, q2i     s ; s    s \ {hq1, q2i}
q1        nd(q1); q2        nd(q2)
if q1 6= q2 then

if (is labeled(q1) and not is sink(q2)), or
(is labeled(q2) and not is sink(q1)), or
(is labeled(q1) and is labeled(q2) and q1.label 6= q2.label) then fail

else

union(q1, q2)
if (is sink(q1) and is sink(q2) and is labeled(q2)) then q1.label     q2.label
for each hf , qi     q2.feats

if there is some hf , pi     q1.feats then

s    s     {hp, qi}

else

add hf , qi to q1.feats

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

236 / 420

uni   cation algorithm

uni   cation

uni   cation as a computational process

upon termination of the algorithm, the original inputs are modi   ed.
the result is obtained by considering the equivalence class of   q1 as a
root, and computing the graph that is accessible from it.

such algorithms, that modify their inputs, are called destructive.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

237 / 420

uni   cation algorithm: correctness

uni   cation

uni   cation as a computational process

lemma
the uni   cation algorithm terminates.

lemma
the uni   cation algorithm computes a     b.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

238 / 420

uni   cation algorithm: complexity

uni   cation

uni   cation as a computational process

every iteration of the loop merges two (di   erent) equivalence classes
into one.

if the inputs are feature graphs consisting of fewer than n nodes, the
number of equivalence classes in the result is bounded by 2n.

thus, union can be executed at most 2n times.

there are two calls to    nd in each iteration, so the number of    nd
operations is bounded by 4n.

with the appropriate data structures for implementing equivalence
classes it can be proven that o(n) operations of union and    nd can
be done in (o(c(n)    n), where c(n) is the inverse ackerman
function, which can be considered a constant for realistic n-s.

therefore, the uni   cation algorithm is quasi-linear.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

239 / 420

uni   cation algorithm

uni   cation

uni   cation as a computational process

the algorithm is destructive: the input feature graphs are modi   ed.

this might pose a problem: the inputs might be necessary for further
uses; even worse, when the uni   cation fails, the inputs might be lost.

to overcome the problem, the inputs to uni   cation must be copied
before they are uni   ed, and copying of graphs is an expensive
operation.

as an alternative solution, there exist non-destructive uni   cation
algorithms whose theoretical complexity (and actual run-time) is not
worse than the algorithm we have presented.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

240 / 420

generalization

uni   cation

generalization

uni   cation is an information-combining operator: when two feature
structures are compatible, their uni   cation can be informally seen as
a union of the information both structures encode.

sometimes, however, a dual operation is useful, analogous to the
intersection of the information encoded in feature structures.

this operation, which is much less frequently used in computational
linguistics, is referred to as anti-uni   cation, or generalization.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

241 / 420

generalization

uni   cation

generalization

de   ned over pairs of feature structures, generalization (denoted    ) is
the operation that returns the most speci   c (or least general) feature
structure that is still more general than both arguments.

in terms of the subsumption ordering, generalization is the greatest
lower bound (glb) of two feature structures.

unlike uni   cation, generalization can never fail.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

242 / 420

generalization

uni   cation

generalization

de   nition (generalization)

the generalization (or anti-uni   cation) of two feature structures fs1 and
fs2, denoted fs1      fs2, is the greatest lower bound of fs1 and fs2.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

243 / 420

uni   cation

generalization

generalization

example (generalization)

generalization reduces information:

(cid:2)num :

sg(cid:3)      (cid:2)pers :

di   erent atoms are inconsistent:

third(cid:3) = [ ]

(cid:2)num :

sg(cid:3)      (cid:2)num : pl(cid:3) = (cid:2)num :

[ ](cid:3)

generalization is restricting:

(cid:2)num :

sg(cid:3)      (cid:20)num :

pers :

sg

third(cid:21) = (cid:2)num :

sg(cid:3)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

244 / 420

generalization

uni   cation

generalization

example (generalization)

empty feature structures are zero elements:

[ ]      (cid:2)agr :

reentrancies can be lost:

(cid:2)num :

sg(cid:3)(cid:3) = [ ]

(cid:20)f :

g :

1 (cid:2)num :

1

sg(cid:3)

(cid:21)      (cid:20)f :

g :

(cid:2)num :
(cid:2)num :

(cid:21) = (cid:20)f :

g :

sg(cid:3)
sg(cid:3)

(cid:2)num :
(cid:2)num :

sg(cid:3)
(cid:21)
sg(cid:3)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

245 / 420

uni   cation grammars

introduction

uni   cation grammars

feature structures are the building blocks with which uni   cation
grammars are built, as they serve as the counterpart of the terminal
and non-terminal symbols in id18s.

in order to de   ne grammars and derivations, one needs some
extension of feature structures to sequences thereof.
multi-rooted feature structures are aimed at capturing complex,
ordered information and are used for representing rules and sentential
forms of uni   cation grammars.

multi-rooted feature graphs, a natural extension of feature graphs
multi-rooted feature structures, which are equivalence classes of
isomorphic multi-rooted feature graphs
multi-avms, which are an extension of avms, and show how they
correspond to multi-rooted graphs.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

246 / 420

uni   cation grammars

introduction

uni   cation grammars

uni   cation in context

forms and grammar rules

derivation

languages

derivation tress

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

247 / 420

uni   cation grammars motivation

motivation

a na    ve attempt to augment context-free rules with feature structures
could have been to add to each rule a sequence of feature structures,
with an element for each element in the cf skeleton

however, rules cannot be thought of simply as sequences of feature
structures

the reason is possible reentrancies among elements of such
sequences, or in other words, among di   erent categories in a single
rule

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

248 / 420

uni   cation grammars motivation

motivation

example (rule)
as a motivating example, consider a rule intending to account for
agreement on number between the subject and the verb of english
sentences:

(cid:2)cat :

s(cid:3)     (cid:20)cat :

num :

np

4 (cid:21) (cid:20)cat :

num :

vp

4 (cid:21)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

249 / 420

uni   cation grammars motivation

motivation

the di   culty in extending feature structures to sequences thereof is
the possible sharing of information among di   erent elements of the
intended sequence
this sharing takes di   erent forms across the various views

in the case of multi-avms, the scope of variables (i.e., tags) is
extended from a single avm to a sequence
in multi-rooted feature graphs this is expressed by the possibility of two
paths, leaving two di   erent roots, leading to the same node
in the case of abstract multi-rooted structures, the reentrancy relation
must account for possible reentrancies across elements

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

250 / 420

uni   cation grammars motivation

sequences

two methods for representing rules (and sentential forms based upon
them)

one approach is to use (single) feature structures for representing
   sequences    of feature structures.
dedicated features are used to encode substructures of a feature
structure, and the order among them:

example

s(cid:3)

1 :

(cid:2)cat :
   
2 : (cid:20)cat :
3 : (cid:20)cat :

               

num : 6

num : 6

np

vp

   
(cid:21)
(cid:21)

               

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

251 / 420

uni   cation grammars motivation

sequences

in this example, the special features 1, 2 and 3 are used to encode
the left-hand side, the    rst element and the last element of the right
hand side of the rule, respectively
the main advantage of this approach is that the existing apparatus of
feature structures su   ces for representing rules as well
however, there are several drawbacks to this solution:

the signature must be augmented to include additional atoms for
representing categories, and special features to encode positions
dedicated features (e.g., 1, 2 and 3) are required to have a special
meaning
the set feats must be considered an ordered set in order for it to be
mapped to the ordered substructure of such feature structures.
the number of such dedicated features that are needed is unbounded,
in contradiction to our assumption that the set feats is    nite.
when feature structures are typed this results in an unbounded
number of types, too

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

252 / 420

uni   cation grammars motivation

sequences

a di   erent solution to this problem can be based on the observation
that feature structures can be used to represent lists.

a list can be simply represented as a feature structure having two
features, named, say, first and rest:

example (feature structure encoding of a list)

first : 1

   
rest :    
         
   

first : 2

rest :

(cid:20)first : 3

rest :

   
   
         
elist(cid:21)
   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

253 / 420

uni   cation grammars motivation

sequences

a representation of the motivating example with list could be:

example (list representation of a rule)

first :

rest :

   

                     

np

s(cid:3)

num : 6

(cid:2)cat :
(cid:21)
first : (cid:20)cat :
   
first : (cid:20)cat :
rest :    
   

               

rest :

num : 6
elist

   
   
(cid:21)
   
   

                     
               

vp

similar problems arise with the list representation:, the features first
and rest are acquired a special, irregular meaning

there is no    direct access    to elements of a rule

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

254 / 420

uni   cation grammars multi-rooted feature graphs

multi-rooted feature graphs

we extend feature graphs to multi-rooted feature graphs (mrgs).

multi-rooted feature graphs are de   ned over the same signature
(feats and atoms), which is assumed to be    xed

de   nition (multi-rooted feature graphs)
a multi-rooted feature graph (mrg) is a pair h   r, g i where
g = hq,   ,   i is a    nite, directed, labeled graph consisting of a non-empty,
   nite set q of nodes (disjoint of feats and atoms), a partial function
   : q    feats     q specifying the arcs and a labeling function    marking
some of the sinks, and where   r is an ordered list of distinguished nodes in
q called roots. g is not necessarily connected, but the union of all the
nodes reachable from all the roots in   r is required to yield exactly q. the
length of an mrg is the number of its roots, |   r|.    denotes the empty
mrg, where q =    .

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

255 / 420

uni   cation grammars multi-rooted feature graphs

multi-rooted feature graphs

example (multi-rooted feature graphs)

the following is an mrg, in which the shaded nodes (ordered from left to
right) constitute the list of roots,   r

q1

q2

cat

cat

q3

cat

q4

s

q5

agr

np

agr

q6

vp

q7

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

256 / 420

uni   cation grammars multi-rooted feature graphs

multi-rooted feature graphs

a multi-rooted feature graph is a directed, not necessarily connected,
labeled graph with a designated sequence of nodes called roots

it is a natural extension of feature graphs, the only di   erence being
that the single root of a feature graph is extended here to a list in
order to model the required structured information
meta-variables ~a range over mrgs, and q,   ,    and   r     over their
constituents

we do not distinguish between an mrg of length 1 and a feature
graph

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

257 / 420

uni   cation grammars multi-rooted feature graphs

multi-rooted feature graphs

natural relations can be de   ned between mrgs and feature graphs
first, note that if ~a = h   r, g i is an mrg and   qi is a root in   r then   qi
naturally induces a feature graph ~a|i = hqi ,   qi ,   i ,   i i, where:

qi is the set of nodes reachable from   qi
  i =   |qi (the restriction of    to qi )
  i =   |qi (the restriction of    to qi ).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

258 / 420

uni   cation grammars multi-rooted feature graphs

multi-rooted feature graphs

one can view an mrg ~a = h   r, g i as an ordered sequence
ha1, . . . , ani of (not necessarily disjoint) feature graphs, where
ai = ~a|i for 1     i     n
note that such an ordered list of feature structures is not a sequence
in the mathematical sense:

removing a node accessible from one root can result in this node being
removed from the graph accessible from some other root

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

259 / 420

uni   cation grammars multi-rooted feature graphs

subgraphs

although mrgs are not element-disjoint sequences, it is possible to
de   ne substructures of them

the roots of an mrg form a sequence of nodes

taking just a subsequence of the roots, and considering only the
subgraph they induce (that is, the nodes that are accessible from
these roots), a notion of substructure is naturally obtained

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

260 / 420

uni   cation grammars multi-rooted feature graphs

subgraphs

de   nition (induced subgraphs)

the subgraph of a non-empty mrg ~a = h   r, g i, induced by j, k and
denoted ~aj ...k , is de   ned only if 1     i     j     n, in which case it is the
mrg h   r    , g    i where   r     = hqj , . . . , qk i, g     = hq    ,      ,      i and

q     = {q |   (  q,   ) = q} for some   q       r     and some   
     (q, f ) =   (q, f ) for every q     q    
     (q) =   (q) for every q     q    

when the sequence is of length 1 we write ~ai for ~ai ...i . as we identify a
feature graph with an mrg of length 1, ~ai = ~a|i .

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

261 / 420

uni   cation grammars multi-rooted feature graphs

mrgs

since mrgs are a natural extension of feature graphs, many of
concepts de   ned for the latter can be extended to the former

the transition function    is extended from single features to paths
the set of paths of an mrg
the function val, associating a value with each path in a feature
graph, is extended to mrgs.
reentrancy and cyclicity
isomorphism and subsumption

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

262 / 420

uni   cation grammars multi-rooted feature graphs

mrg paths

de   nition (mrg paths)
the paths of a multi feature graph ~a are

  (~a) = {hi ,   i |        paths and   (  qi ,   )   }

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

263 / 420

uni   cation grammars multi-rooted feature graphs

mrg path values

de   nition (path value)
the value of a path hi ,   i in an mrg ~a, denoted by val~a(hi ,   i), is de   ned
if and only if   ~a(  qi ,   )   , in which case it is the feature graph val~a|i

(  ).

note that the value of a path in an mrg is a (single-rooted) feature
graph, not an mrg. in particular, val~a(hi ,   i) may include nodes which
are roots in ~a but are not the root of the resulting feature graph. clearly,
an mrg may have two paths hi1,   1i and hi2,   2i where   1 =   2 even
though i1 6= i2.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

264 / 420

uni   cation grammars multi-rooted feature graphs

mrg path values

example (path value)

~a, where   r = hq0, q1, q2i

val~a(h2, hfii)

f

q1

q4

g

h

q0

q3

f

h

q6

a

f

q2

q5

h

q7

b

q4

g

h

q6

a

q7

b

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

265 / 420

uni   cation grammars multi-rooted feature graphs

mrg reentrancy

~a
! hj,   2i, if they

two mrg paths are reentrant, denoted hi ,   1i
share the same value:   ~a(  qi ,   1) =   ~a(  qj ,   2)
a multi-rooted feature graph is reentrant if it has two distinct paths
(possibly leaving di   erent roots) that are reentrant
an mrg ~a is cyclic if two paths hi ,   1i, hi ,   2i       (~a), where   1 is a
proper subsequence of   2, are reentrant: hi ,   1i
here, the two paths must have the same index i , although they may
   pass through    elements of ~a other than the i -th one

~a
! hi ,   2i

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

266 / 420

uni   cation grammars multi-rooted feature graphs

a cyclic mrg

example (a cyclic mrg)

the following mrg ~a = h   r, g i, where   r = hq0, q1, q2i, is cyclic:

q1

q4

f

f

h

q2

q5

q7

h

q0

g

q3

f

h

q6

g

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

267 / 420

uni   cation grammars multi-rooted feature graphs

multi-rooted feature graph isomorphism

de   nition (multi-rooted feature graph isomorphism)
two mrgs ~a1 = h   r1, g1i and ~a2 = h   r2, g2i are isomorphic, denoted
~a1 ~   ~a2, i    they are of the same length, n, and there exists a one-to-one
mapping i : q1     q2, called an isomorphism, such that:

i (  q1j ) =   q2j for all 1     j     n;
for all q1, q2     q1 and f     feats,   1(q1, f ) = q2 i   
  2(i (q1), f ) = i (q2); and
for all q     q1,   1(q) =   2(i (q)) (either both are unde   ned, or both
are de   ned and equal).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

268 / 420

uni   cation grammars multi-rooted feature graphs

subsumption of multi-rooted feature graphs

de   nition (subsumption of multi-rooted feature graphs)
an mrg ~a = h   r, g i subsumes an mrg ~a    = h   r    , g    i, denoted ~a~   ~a   , if
|   r| = |   r    | and there exists a total function h : q     q     such that:

for every root   qi       r, h(  qi ) =   q   
i
for every q     q and f     feats, if   (q, f )    then
h(  (q, f )) =      (h(q), f )
for every q     q, if   (q)    then   (q) =      (h(q))

the only di   erence from feature graph subsumption is that h is required
to map each of the roots in   r to its corresponding root in   r    . notice that
in order for two mrgs to be related by subsumption they must be of the
same length.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

269 / 420

uni   cation grammars multi-rooted feature graphs

subsumption of multi-rooted feature graphs

example (mrg subsumption)
feature graph subsumption can have three di   erent e   ects: if a     b,
then b can have additional arcs, additional reentrancies or more marked
atoms. the same holds for mrgs, with the observation that additional
reentrancies can now occur among paths that originate at di   erent roots:

f

g

~   

6 ~   

f

g

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

270 / 420

uni   cation grammars multi-rooted feature graphs

subsumption of multi-rooted feature graphs

example (mrg subsumption)

let ~a and ~a    be the following two mrgs. then ~a~   ~a    but not ~a    ~   ~a.

cat

np

cat

np

~a

~a   

a

g

r

a g r

n u m

sg

p

e

r

s

a

g

r

a g r

n u m

sg

p

e

r

s

c
a
t

vp

r
g
a

m
u
n

3rd

sg

t
a
c

vp

3rd

agr

c

a

t

p

e

rs

c

a

t

np

3rd

np

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

271 / 420

uni   cation grammars multi-rooted feature graphs

multi-rooted feature structures

since mrg isomorphism is an equivalence relation, the notion of
multi-rooted feature structures is well de   ned:

de   nition (multi-rooted feature structures)
given a signature of features feats and atoms atoms, let
~g(feats, atoms) be the set of all multi-rooted feature graphs over the
signature. let ~g|    be the collection of equivalence classes in
g(feats, atoms) with respect to feature graph isomorphism. a
multi-rooted feature structure (mrs) is a member of ~g|   . we use
meta-variables mrs to range over mrss.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

272 / 420

uni   cation grammars multi-avms

multi-avms

de   nition
given a signature s, a multi-avm (mavm) of length n     0 is a
sequence hm1, . . . , mni such that for each i , 1     i     n, mi is an avm
over the signature.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

273 / 420

uni   cation grammars multi-avms

multi-avms

meta-variables ~m range over multi-avms

the sub-avms of ~m are subavm( ~m) = s1   i    n subavm(mi )

similarly to what we did for avms, we de   ne the set of tags
occurring in a multi-avm ~m as tags( ~m)

note that if ~m = hm1, . . . , mni then tags( ~m) = s1   i    n tags(mi )

(where the union is not necessarily disjoint)
also, the set of sub-avms of ~m (including ~m itself) which are tagged
by the same variable x is tagset( ~m, x )

here, too, tagset( ~m, x ) = s1   i    n tagset(mi , x )

we usually do not distinguish between a multi-avm of length 1 and
an avm

when depicting mavms graphically, we sometimes suppress the
angular brackets which enclose the sequence of avms.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

274 / 420

uni   cation grammars multi-avms

multi-avms

well-formedness and variable association are extended from avms to
mavms in the natural way:

de   nition (well-formed mavms)
a multi-avm ~m is well-formed i    for every variable x     tags( ~m),
tagset( ~m, x ) includes at most one non-empty avm.

de   nition (variable association)
the association of a variable x in ~m, denoted assoc( ~m, x ), is the single
non-empty avm in tagset( ~m, x ); if all the members of tagset( ~m, x ) are
empty, then assoc( ~m, x ) = x [ ].

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

275 / 420

uni   cation grammars multi-avms

multi-avms

example (multi-avms)

consider the following multi-avm ~m, whose length is 3:

(cid:28) 2 (cid:2)f :

9 (cid:2)h :

1 [ ](cid:3)(cid:3) , 1 (cid:20)f :

8 (cid:20)g :

h :

7 a

2 [ ](cid:21)(cid:21) , 6 (cid:2)f :

5 (cid:2)h :

2 [ ](cid:3)(cid:3)(cid:29)

tags( ~m) = { 1 , 2 , 5 , 6 , 7 , 8 , 9 }. ~m is well-formed:
8 (cid:20)g :

h :

tagset( ~m, 1 ) = (cid:26) 1 [ ] , 1 (cid:20)f :
tagset( ~m, 2 ) = (cid:8) 2 [ ] , 2 (cid:2)f :

therefore,

7 a

2 [ ](cid:21)(cid:21)(cid:27)

9 (cid:2)h :

1 [ ](cid:3)(cid:3)(cid:9)
2 [ ](cid:21)(cid:21) , assoc( ~m, 2 ) = 2 (cid:2)f :

7 a

9 (cid:2)h :

1 [ ](cid:3)(cid:3)

assoc( ~m, 1 ) = 1 (cid:20)f :

8 (cid:20)g :

h :

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

276 / 420

uni   cation grammars multi-avms

multi-avms

the same variable can tag di   erent sub-avms of di   erent elements in
the sequence
in other words, the scope of variables is extended from single avms
to multi-avms
this leads to an interpretation of variables (in multi-avms) which
hampers the view of multi-avms as sequences of avms
recall that we interpret multiple occurrence of the same variable
within a single avm as denoting value sharing; hence the de   nition of
well-formed avms, and the convention that when a variable occurs
more than once in an avm, its association can be stipulated next to
any of its occurrences
as in the other views, when multi-avms are concerned, this
convention implies that removing an element from a multi-avm can
a   ect other elements, in contradiction to the usual concept of
sequences

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

277 / 420

uni   cation grammars multi-avms

mavm arcs

the sets arcs and arcs* are naturally extended from avms to
mavms

crucially, an arc can connect two tags which occur in di   erent
members of the mavm.

example (multi-avm arcs)
in the mavm ~m of the example, the set of arcs includes:

{h 2 , f, 9 i, h 1 , f, 8 i, h 8 , h, 2 i}     arcs( ~m)

hence, in particular, h 1 , hfhfi, 9 i     arcs*( ~m)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

278 / 420

uni   cation grammars multi-avms

mavm paths

when de   ning the paths of a multi-avm, some caution is required
for an avm m,   (m) is de   ned as {   | x = tag (m) and for some
variable y     tags(m), hx ,   , y i     arcs*(m)}

in case of mavms, there are several elements from which x can be
chosen

hence, we de   ne the set of mavm paths relative to an additional
parameter, the index of the element in the mavm from which the
path leaves.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

279 / 420

uni   cation grammars multi-avms

mavm paths

de   nition (multi-avm paths)

if ~m = hm1, . . . , mni is an mavm of length n, then its paths are the set
  ( ~m) = {hi ,   i | 1     i     n, x = tag (mi ) and for some variable
y     tags( ~m), hx ,   , y i     arcs*( ~m)}. if n = 0,   ( ~m) =    .

example (multi-avm paths)
in the mavm ~m of the example, the set of paths includes h2, hfgii but
not h1, hfgii. more interestingly, {hi , hfhik i | k     0 and
1     i     3}       ( ~m).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

280 / 420

uni   cation grammars multi-avms

mavm path values

de   nition (path values)

the value of a path hi ,   i in a multi-avm ~m, denoted pval( ~m, hi ,   i), is
assoc(m, y ), where y is such that htag ( ~m),   , y i     arcs*( ~m).

of course, one path can have several values when it leaves di   erent
elements of a multi-avm: in general, pval( ~m, hi ,   i) 6= pval( ~m, hj,   i) if
i 6= j.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

281 / 420

uni   cation grammars multi-avms

mavm path values

example (path values)
consider again ~m of the example. examples of path values include
pval( ~m, h2, hf gii) = 7 a and pval( ~m, h1, hf h f gii) = 7 a. observe that
in order to fully stipulate the value of some paths, one must combine
sub-avms of more than one element of the multi-avm. for example,

pval( ~m, h2, hf hii) = 1 (cid:20)f :

8 (cid:20)g :

h :

7 a

2 (cid:2)f :

9 (cid:2)h :

(cid:21)(cid:21)
1 [ ](cid:3)(cid:3)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

282 / 420

uni   cation grammars multi-avms

mavm reentrancy

a multi-avm is reentrant if it has two distinct paths which share the
same value; these two paths may well be    rooted    in two di   erent
elements of the mavm
an mavm ~m is cyclic if two paths hi ,   1i, hi ,   2i       ( ~m), where   1
is a proper subsequence of   2, are reentrant: hi ,   1i
here, the two paths must have the same index i , although they may
   pass through    elements of ~m other than the i -th one.

~m
! hi ,   2i

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

283 / 420

uni   cation grammars multi-avms

mavm reentrancy

example (multi-avm reentrancy)
consider again the mamv ~m of the example. it is reentrant, since
pval(h1, hfhii) = pval(h2,   i). furthermore, it is cyclic since
pval(h1, hfhfhii) = pval(h1,   i).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

284 / 420

uni   cation grammars multi-avms

mavm subsumption

de   nition (multi-avm subsumption)
let ~m, ~m     be two mavms of the same length n and over the same
signature. ~m subsumes ~m    , denoted ~m ~(cid:22) ~m    , if the following conditions
hold:

1

2

for all i , 1     i     n, mi (cid:22) m    
i ;

if hi ,   1i

~m
! hj,   2i then hi ,   1i

~m    
! hj,   2i.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

285 / 420

uni   cation grammars multi-avms

mavm subsumption

example (mavm subsumption)

let ~m and ~m     be the following two mavms (of length 3):

~m :

1   cat :

agr :

~m     : 1   cat :

agr :

np

4     2 2
4
4     2 2
4

cat :

vp

agr :

4   num :

pers :

sg

3rd   

cat :

vp

agr :

4   num :

pers :

sg

3rd   

agr :

cat :

3
5 3 2
4
3
5 3   cat :

agr :

np

6   num :

pers :

sg

3rd   

3
5

np

4    

np

then ~m (cid:22) ~m     but not ~m     (cid:22) ~m.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

286 / 420

uni   cation grammars multi-avms

mavm subsumption

the second clause of the de   nition may seem redundant: if for all i ,
1     i     n, mi (cid:22) m    
i , then in particular all the reentrancies of mi are
all reentrancies in m    
i ; why then is the second clause necessary?
the answer lies in the possibility of reentrancies across elements in
multi-avms

such reentrancies are a    global    property of multi-avms, which is
not re   ected in any of the elements in isolation

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

287 / 420

uni   cation grammars multi-avms

mavm renaming

de   nition (renaming)
let ~m1 and ~m2 be two mavms. ~m2 is a renaming of ~m1, denoted
~m1 ~    ~m2, i    ~m1 ~(cid:22) ~m2 and ~m2 ~(cid:22) ~m1.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

288 / 420

uni   cation grammars multi-avms

multi-avm to mrg mapping

de   nition (multi-avm to mrg mapping)
let ~m = hm1, . . . , mni be a well-formed multi-avm of length n. the
mrg image of ~m is   ( ~m) = h   r, g i, with   r = h  q1, . . . ,   qni and
g = hq,   ,   i, where:

q = tags( ~m)
  qi = tag (mi ) for 1     i     n
for all x     tags( ~m) and f     feats,   (x , f ) = y if
hx , f , y i     arcs( ~m), and
for all x     tags( ~m) and a     atoms,   (x ) = a if assoc( ~m, x ) is the
atomic avm x (a), and is unde   ned otherwise.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

289 / 420

uni   cation grammars multi-avms

multi-avm to mrg mapping

example (multi-avm to multi-rooted feature graph mapping)
consider the following multi-avm ~m:
8 (cid:20)g :

2 [ ](cid:21)(cid:21)

1 (cid:20)f :

h :

7 a

2 (cid:2)f :

9 (cid:2)h :

1 [ ](cid:3)(cid:3)

6 (cid:2)f :

5 (cid:2)h :

2 [ ](cid:3)(cid:3)

observe that it is well-formed, as the variables that occur more than once
( 1 and 2 ) have only one non-empty occurrence each. the set of variables
of ~m is tags( ~m) = { 1 , 2 , 5 , 6 , 7 , 8 , 9 }, which will also be the set of
nodes q in   ( ~m). the sequence of roots   r is the sequence of variables
tagging the avm elements of ~m, namely h 2 , 1 , 6 i.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

290 / 420

uni   cation grammars multi-avms

multi-avm to mrg mapping

example (multi-avm to multi-rooted feature graph mapping)
the obtained graph is:

f

6

5

h

1

8

f

g

7

a

2

9

f

h

h

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

291 / 420

uni   cation grammars multi-avms

multi-avm to mrg mapping

proposition
let ~m1, ~m2 be two multi-avms. then:

  ( ~m) =   (  ( ~m))

~m
hi ,   1i
! hj,   2i i    hi ,   1i
~m1 ~(cid:22) ~m2 i      ( ~m1)~     ( ~m2)

  ( ~m)
! hj,   2i

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

292 / 420

uni   cation grammars

uni   cation revisited

uni   cation revisited

we de   ned the uni   cation operation for feature structures
we now extend the de   nition to multi-rooted structures; we de   ne
two variants of the operation:

one which uni   es two same-length structures and produces their least
upper bound with respect to subsumption
uni   cation in context, which combines the information in two feature
structures, each of which may be an element in a larger structure

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

293 / 420

uni   cation grammars

uni   cation revisited

two amrs uni   cation operations

example (two amrs uni   cation operations)

[ ]
[ ]

[ ]
[ ]

[ ]
[ ]

        
        

[ ]

[ ]

[ ]

        

[ ]
[ ]

[ ]

[ ]
[ ]
[ ]
[ ]

[ ]

[ ]

[ ]

[ ]

same-length amrs uni   cation

uni   cation in context

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

294 / 420

uni   cation grammars

uni   cation revisited

mrs uni   cation

example (mrs uni   cation)

let

then

n
4

cat :
num :
case : nom

cat :
num :
case :

n
pl
[ ]

   = (cid:20)cat :

num :

   = (cid:20)cat :

d

d

4(cid:21)   
   
num : pl(cid:21)   
   
4 pl(cid:21)   
   

num :

d

          = (cid:20)cat :

4(cid:21)

v

v

num :

   
   (cid:20)cat :
   
num : pl(cid:21)
   (cid:20)cat :
   
   (cid:20)cat :

num :

v

4(cid:21)

n
4

cat :
num :
case : nom

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

295 / 420

uni   cation grammars

uni   cation revisited

uni   cation in context

example (uni   cation in context)

let

   = (cid:20)f :

g :

1 a

2 [ ](cid:21)(cid:2)h :

2(cid:3) ,

   = (cid:20)f :

g :

3 [ ]

4 b (cid:21)(cid:2)h :

3(cid:3)

unifying the    rst element in    with the    rst element in    in the contexts
of    and   , we obtain (  , 1)     (  , 1) = (     ,      ):

      = (cid:20)f :

g :

1 a

2 b(cid:21)(cid:2)h :

2(cid:3) ,

      = (cid:20)f :

g :

3 a

4 b(cid:21)(cid:2)h :

3(cid:3)

note that both operands of the uni   cation are modi   ed.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

296 / 420

uni   cation grammars

uni   cation revisited

uni   cation in context

theorem

if h     ,      i = (  , i )     (  , j) then      i =      j =   i       j .

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

297 / 420

uni   cation grammars

uni   cation revisited

uni   cation in context

theorem

let   ,    be two amrss and i , j be indexes such that i     len(  ) and
j     len(  ). then h     ,      i = (  , i )     (  , j) i   
{         | |     ~             and   j   (cid:22)        i } and
      = min   ~   
{         |      ~             and   i   (cid:22)        j }.
      = min   ~   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

298 / 420

uni   cation grammars

rules and grammars

rules and grammars

like id18s, uni   cation grammars are de   ned over an
alphabet

as the grammars that are of most interest to us are of natural
languages, and since sentences in natural languages are not just
strings of symbols, but rather strings of words, we add to the
signature an alphabet, a    xed set words of words (in addition to
the    xed sets feats and atoms)
meta-variables wi , wj etc. are used to refer to elements of words, w
to refer to strings over words.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

299 / 420

uni   cation grammars

rules and grammars

rules and grammars

we also adopt here the distinction between phrasal and terminal rules

the former cannot have elements of words in their bodies; the
latter have only a single word as their body

we refer to the collection of terminal rules as the lexicon: it
associates with terminals, members of words, (abstract) feature
structures that are their categories
for every word wi     words the lexicon speci   es a    nite set of
abstract feature structures l(wi )
if l(wi ) is a singleton then wi is unambiguous, and if it is empty then
wi is not a member of the language de   ned by the lexicon.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

300 / 420

uni   cation grammars

rules and grammars

lexicon

de   nition (lexicon)
given a signature of features feats and atoms atoms, and a set
words of terminal symbols, a lexicon is a    nite-range function
l : words     2afs(feats,atoms).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

301 / 420

uni   cation grammars

rules and grammars

lexicon

example (lexicon)
following is a lexicon l over a signature consisting of
feats = {cat,num,case}, atoms = {d, n, v, sg, pl}, and
words = {two, sheep, sleep}:

d

l(two) = (cid:26)(cid:20)cat :
l(sleep) = (cid:26)(cid:20)cat :

num : pl(cid:21)(cid:27) l(sheep) =       
   
num : pl(cid:21)(cid:27)

v

cat :
num :
case :

   
   

n
[ ]
[ ]

      
   
   
   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

302 / 420

uni   cation grammars

rules and grammars

lexicon

example (lexicon)

an an alternative to the previous lexical entry of sheep above, the
grammar writer may prefer the following lexical entry:

l(sheep) =       
   
   
   

cat :
num :
case :

n
sg
[ ]

    ,   
   
   

cat :
num :
case :

n
pl
[ ]

      
   
   
   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

303 / 420

uni   cation grammars

rules and grammars

lexicon

example (lexicon, rule-format)

to depict the lexicon speci   cation above, we usually use the following
notation:

sheep        
   

cat :
num :
case :

n
sg
[ ]

   
   

sheep        
   

cat :
num :
case :

n
pl
[ ]

   
   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

304 / 420

uni   cation grammars

rules and grammars

lexicon

when a string of words w is given, it is possible to construct an
amrs   w for the lexical entries of the words in w , such that no two
elements of   w share paths
such an amrs is simply the concatenation of the lexical entries of
the words in w

in general, there may be several such amrss, as each word in w can
have multiple elements in its category

the set of such amrss is the pre-terminals of w

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

305 / 420

uni   cation grammars

rules and grammars

pre-terminals

de   nition (pre-terminals)

let w = w1 . . . wn     words+. ptw (j, k) is de   ned i    1     j, k     n, in
which case it is the set of amrss {haj    aj+1          aki | ai     l(wi ) for
j     i     k}. if j > k (i.e., w =   ), then ptw (j, k) = {  }. the subscript w
is omitted when it is clear from the context.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

306 / 420

uni   cation grammars

rules and grammars

pre-terminals

example (pre-terminals)

consider the string of words w = two sheep sleep and the lexicon of the
previous example. there is exactly one element in ptw (1, 3); this is the
amrs

d

num : pl(cid:21)   
(cid:20)cat :
   

cat :
num :
case :

n
[ ]
[ ]

d

   
   (cid:20)cat :
num : pl(cid:21)

notice that there is no sharing of variables among di   erent feature
structures in this amrs. as amrss are depicted using multi-avms here,
the variables in the above multi-avm are chosen such that unintended
reentrancies are avoided.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

307 / 420

uni   cation grammars

rules and grammars

pre-terminals

example (pre-terminals)
now assume that the word sheep is represented as an ambiguous word: its
category contains two feature structures, namely

l(sheep) =       
   

cat :
num :
case :

   
   

n
sg
[ ]

   
   

,

cat :
num :
case :

   
   

then ptw (1, 3) has two members:

n
pl
[ ]

      
   
   
   

d

num : pl(cid:21)   
(cid:20)cat :
   
num : pl(cid:21)   
(cid:20)cat :
   

d

cat :
num :
case :
cat :
num :
case :

                        
                     

n
sg
[ ]
n
pl
[ ]

d

   
(cid:20)cat :
num : pl(cid:21) ,
   
   
   (cid:20)cat :
num : pl(cid:21)

d

                        
                     

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

308 / 420

uni   cation grammars

rules and grammars

rules

de   nition (rules)

a (phrasal) rule is an amrs of length n > 0 with a distinguished    rst
element. if    is a rule then   1 is its head and   2..n is its body. we adopt
a convention of depicting rules with an arrow (   ) separating the head
from the body.

since a rule is simply an amrs, there can be reentrancies among its
elements: both between the head and (some element of) the body
and among elements in its body.

notice that the de   nition supports   -rules, i.e., rules with null bodies

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

309 / 420

uni   cation grammars

rules and grammars

rules

example (rules as amrss)

as every amrs can be interpreted as a rule, so can the following:

(cid:2)cat :

s(cid:3)     (cid:20)cat : np
4 (cid:21)

agr :

(cid:20)cat :

agr :

v

4(cid:21)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

310 / 420

uni   cation grammars

rules and grammars

rules

example (rules as amrss)
rules can also propagate information between the mother and any of the
daughters using reentrancies between paths originating in the head of the
rule and paths originating from one of the body elements, as below.

(cid:20)cat :

subj :

s

1(cid:21)     1 (cid:20)cat : np
2 (cid:21)

agr :

(cid:20)cat :

agr :

v

2(cid:21)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

311 / 420

uni   cation grammars

rules and grammars

rules

the rules of the example employ feature structures that include the
feature cat, encoding the major part-of-speech category of phrases

while this is useful and natural, it is by no means obligatory

uni   cation rules can encode such information in other ways (e.g., via
a di   erent feature, or as a collection of features); or they may not
encode it at all

in the general case, a uni   cation rule is not required to have a
context-free skeleton, a feature whose values constitute a context-free
backbone that drives the derivation

some uni   cation-based grammar theories do indeed maintain a
context-free skeleton (lfg is a notable example), while others (like
hpsg) do not

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

312 / 420

uni   cation grammars

rules and grammars

rules

we introduce a shorthand notation in the presentation of grammars:

when two rules have the same head, we list the head only once and
separate the bodies of the di   erent rules with    |    (following the
convention of context-free grammars)

note, however, that the scope of variables is still limited to a single
rule, so that multiple occurrences of the same variable within the
bodies of two di   erent rules are unrelated

additionally, we may use the same variable (e.g., 4 ) in several rules

it should be clear by now that these multiple uses are unrelated to
each other, as the scope of variables is limited to a single rule

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

313 / 420

uni   cation grammars

rules and grammars

uni   cation grammars

de   nition (uni   cation grammars)

a uni   cation grammar (ug) g = (l, r, as ) over a signature atoms of
atoms and feats of features consists of a lexicon l, a    nite set of rules
r and a start symbol as that is an abstract feature structure.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

314 / 420

uni   cation grammars

rules and grammars

uni   cation grammars

example (gu, a uni   cation grammar)

s(cid:3)

       
   

np
4

cat :
num :
case : nom

   
    (cid:20)cat :

num :

v

4(cid:21)

np
4

2

np
4

2

   
   
   
   

n
4

2

   
   

    (cid:20)cat :

num :

       
   

cat :
num :
case :

cat :
num :
case :

d

4(cid:21)    
   
   
   

pron
4

2

cat :
num :
case :

(cid:2)cat :
   
   
   
   

cat :
num :
case :

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

315 / 420

uni   cation grammars

rules and grammars

uni   cation grammars

example (gu, a uni   cation grammar)

sleep     (cid:20)cat :

num : pl(cid:21)

v

sleeps     (cid:20)cat :

num :

v

sg(cid:21)

lamb        
   
she        
   

cat :
num :
case :

n
sg
[ ]

   
   

pron
sg

cat :
num :
case : nom

a

    (cid:20)cat :

num :

d

sg(cid:21)

   
   

n
pl
[ ]

cat :
num :
case :

lambs        
   
    her        
   
   
two     (cid:20)cat :
num : pl(cid:21)

pron
cat :
num :
sg
case : acc

d

   
   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

316 / 420

uni   cation grammars

derivations

derivations

the language generated by ugs is de   ned in a parallel way to the
de   nition of languages generated by context-free grammars:

   rst, we de   ne derivations, analogously to the context-free derivations

the re   exive transitive closure of the derivation relation is the basis
for the de   nition of languages
for the following discussion    x a particular grammar g = (l, r, as )

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

317 / 420

uni   cation grammars

derivations

derivations

derivation is a relation that holds between two forms,   1 and   2,
each of which is an amrs
to de   ne it formally, two concepts have to be taken care of:

an element of   1 has to be matched against the head of some
grammar rule,   
the body of    must replace the selected element in   1, thus producing
  2

matching involves uni   cation, and uni   cation must be computed in
context: that is, when the selected element of   1 is uni   ed with the
head of   , other elements in   1 or in    may be a   ected due to
reentrancy

this possibility must be taken care of when replacing the selected
element with the body of   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

318 / 420

uni   cation grammars

derivations

derivations

de   nition (derivation)

an amrs   1 of length k derives an amrs   2 (denoted   1       2) i    for
some j     k and some rule        r of length n,

(  1, j)     (  , 1) = (     
  2 is the replacement of the j-th element of   1 with the body of   
(details suppressed)

1,      ), and

the re   exive transitive closure of           is              . we write   
derives    in l steps.

l       when   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

319 / 420

uni   cation grammars

derivations

derivation step

example (derivation step)
suppose that

  1 =    
   

np
1

cat :
num :
case : nom

   
   (cid:20)cat :

num :

v

1(cid:21)

is a (sentential) form and that

   =    
   

cat :
num :
case :

np
2

3

   
   

    (cid:20)cat :

num :

d

2(cid:21)   
   

cat :
num :
case :

n
2

3

   
   

is a rule. assume further that the selected element j in   1 is the    rst one.
applying the rule    to the form   1, it is possible to construct a derivation
  1       2.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

320 / 420

uni   cation grammars

derivations

derivation step

example (derivation step)
first, compute (  1, 1)     (  , 1) = (     

     

1 =    
   

np
1

cat :
num :
case : nom

      =    
   

cat :
num :
case :

np
2
3 nom

1(cid:21)

v

num :

1,      ):
   
   (cid:20)cat :
2(cid:21)   
(cid:20)cat :
   

   
   

num :

d

cat :
num :
case :

n
2

3

   
   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

321 / 420

uni   cation grammars

derivations

derivation step

example (derivation step)
now, the    rst element of      
results in a new amrs,   2, of length 3: the    rst two elements are the
body of      , and the last element is the remainder of      
1, after its    rst
element has been eliminated; that is, the last element of      
1. a simple
replacement would have resulted in the following amrs:

1 is replaced by the body of      . this operation

(cid:20)cat :

num :

d

2(cid:21)   
   

cat :
num :
case :

n
2
3 nom

   
   (cid:20)cat :

num :

v

1(cid:21)

obviously, this is not the expected result!

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

322 / 420

uni   cation grammars

derivations

derivation step

example (derivation step)

since the path (1, num) in   1 is reentrant with (2, num) (indicated by the
tag 1 ), and since the path (1, num) in the rule    is reentrant with the
paths (2, num) and (3, num) (the tag 3 ), one would expect that the
sharing between the num values of the noun phrase and the verb phrase in
  1 would manifest itself as a sharing between this feature   s values of the
determiner, the noun and the verb phrase in   2.
this is what the last clause in the de   nition of derivation guarantees. the
result is:

  2 = (cid:20)cat :

num :

d

4(cid:21)   
   

cat :
num :
case :

n
4
5 nom

   
   (cid:20)cat :

num :

v

4(cid:21)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

323 / 420

uni   cation grammars

derivations

derivation

example (derivation)

consider the grammar gu. a derivation with gu can start with a form of
length 1, consisting of

  1 = (cid:2)cat :

s(cid:3)

the single element of this amrs uni   es with the head of the    rst rule in
the grammar, trivially. substitution is again trivial, and the next form in
the derivation is the body of the    rst rule:

  2 =    
   

np
1

cat :
num :
case : nom

   
   (cid:20)cat :

num :

v

1(cid:21)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

324 / 420

uni   cation grammars

derivations

derivation

example (derivation)
since the rule    of that example is indeed in gu, a derivable form from   2
is:

  3 = (cid:20)cat :

num :

d

4(cid:21)   
   

n
4

cat :
num :
case : nom

   
   (cid:20)cat :

num :

v

4(cid:21)

thus, we obtain   1       2       3, and hence   1

         3.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

325 / 420

uni   cation grammars

derivations

derivation

example (derivation)

consider the form   3 and one of the amrss in ptw (1, 3):

  3 = (cid:20)cat :

num :

d

4(cid:21)   
   
num : pl(cid:21)   
   

d

cat :
num :
case : nom

n
4

cat :
num :
case :

n
pl
[ ]

4(cid:21)

v

num :

(cid:20)cat :

   
   
   
   (cid:20)cat :
num : pl(cid:21)

d

   = (cid:20)cat :

the former contains information that is accumulated during derivations; the
latter re   ect information from the lexical entries of the words in w .

          = (cid:20)cat :

num :

d

4 pl(cid:21)   
   

cat :
num :
case : nom

n
4

   
   

(cid:20)cat :

num :

v

4(cid:21)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

326 / 420

uni   cation grammars

derivations

language

de   nition (language)
the language of a uni   cation grammar g is
l(g ) = {w     words    | w = w1          wn and there exist an amrs    such
that as

          and an amrs        ptw (1, n) such that           is de   ned}.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

327 / 420

uni   cation grammars

derivations

language

example (language)

consider the grammar gu and the string the sheep sleep. the form   3 is
derivable from the start symbol of the grammar. this form is uni   able
with one of the members of ptw (1, 3). hence the string the sheep sleep is
a member of l(gu).

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

328 / 420

uni   cation grammars

derivation trees

derivation trees

in order to depict derivations graphically we extend the notion of
derivation trees, de   ned for context-free grammars, to uni   cation
grammars

informally, we would like a tree to be a structure whose elements are
feature structures

however, care must be taken when the scope of reentrancies in a tree
is concerned: in order for information to be shared among all nodes in
a tree, this scope is extended to the entire tree

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

329 / 420

uni   cation grammars

derivation trees

derivation trees

rather than de   ne a new mathematical entity, corresponding to a
tree whose nodes are feature structures with the scope of reentrancies
extended to the entire structure, we reuse in the following de   nition
the concept of multi-rooted structures (more precisely, amrss)

in order to impose a tree structure on amrss we simply pair them
with a tree whose nodes are integers, such that each node in the tree
serves as an index into the amrs

in this way, all the existing de   nitions which refer to amrss can be
naturally used when reasoning about trees

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

330 / 420

uni   cation grammars

derivation trees

derivation trees

de   nition (uni   cation trees)

given a signature s = hatoms, featsi, a uni   cation tree is an ordered
tree whose nodes are avms over s, where the scope of reentrancies is
extended to the entire tree. a subtree is a particular node of the tree,
along with all its descendants (and the edges connecting them). formally,
a uni   cation tree is a pair h  ,    i, where    is an amrs over s, say of
length l for some l     n, and    is a tree over the nodes {1, 2, . . . , l}.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

331 / 420

uni   cation grammars

derivation trees

derivation trees

example (uni   cation tree)

following is a uni   cation tree, depicted as a tree of avms:

(cid:2)cat :

s(cid:3)

cat :
num :
case :

   
   

np
4
2 nom

   
   

(cid:20)cat :

num :

d

4(cid:21)    
   

cat :
num :
case :

n
4
2 nom

   
    (cid:20)cat :

num :

v

4(cid:21)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

332 / 420

uni   cation grammars

derivation trees

derivation trees

example (uni   cation tree)

formally, this tree is a pair h  ,   i, where    is a tree over {1, 2, 3, 4, 5} and    is an
amrs of length 5:

   = 1

2

3

4 5

   = (cid:2)cat :

cat :
num :
case :

   
   

s(cid:3)

np
4
2 nom

   
   

(cid:20)cat :

num :

d

4(cid:21)   
   

cat :
num :
case :

n
4
2 nom

   
   

(cid:20)cat :

num :

v

4(cid:21)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

333 / 420

uni   cation grammars

derivation trees

uni   cation derivation trees

de   nition (uni   cation derivation trees)
a uni   cation derivation tree induced by a uni   cation grammar
g = (r, as ) is a uni   cation tree de   ned recursively as follows:

has ,    i is a uni   cation derivation tree, where    is the tree consisting
of the single node {1};
if h  ,    i is a uni   cation derivation tree and h     ,       i extends h  ,    i,
then h     ,       i is also a uni   cation derivation tree.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

334 / 420

uni   cation grammars

derivation trees

uni   cation derivation trees

example (uni   cation derivation trees)
a uni   cation derivation tree with the grammar gu can be built

incrementally as follows. the start symbol of the grammar is (cid:2)cat :

therefore, an initial derivation tree would be h  1, {1}i, the start symbol
itself.
then, by using the    rst grammar rule, the following tree, h  2,   2i, can be
obtained:

s(cid:3);

(cid:20)cat :

num :

s

4(cid:21)

np
4

cat :
num :
case : nom

   
   

   
    (cid:20)cat :

num :

v

4(cid:21)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

335 / 420

uni   cation grammars

derivation trees

uni   cation derivation trees

example (uni   cation derivation trees)
next, by applying the second grammar rule to the leftmost node on the
frontier of h  2,   2i, the following tree, h  3,   3i, is obtained:

(cid:20)cat :

num :

s

4(cid:21)

np
cat :
num :
4 sg
case : nom

   
   

   
   
(cid:20)cat :

num :

d

4(cid:21)    
   

cat :
num :
case :

n
4

2

   
    (cid:20)cat :

num :

v

4(cid:21)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

336 / 420

uni   cation grammars

derivation trees

complete derivation trees

as in the context-free case, the frontier of uni   cation derivation trees
does not have to correspond to any lexical item

of course, in order for trees to represent complete derivations, we are
particularly interested in such trees whose frontier is uni   able with a
sequence of pre-terminals

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

337 / 420

uni   cation grammars

derivation trees

complete derivation trees

de   nition (complete derivation trees)

a uni   cation derivation tree h  ,    i is complete if the frontier of    is
j1, . . . , jn and there exist a word w     words    of length n and an amrs
       ptw (1, n) such that        h  i ,   j1, . . . ,   jn i is de   ned.

note that there may be more than one qualifying amrs in ptw (1, n); the
de   nition only requires one. of course, di   erent amrss in ptw (1, n) will
correspond to di   erent interpretations of the input string (resulting from
ambiguous lexical entries of the words)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

338 / 420

uni   cation grammars

derivation trees

complete derivation trees

example (complete derivation trees)
consider the grammar gu and the string w = two lambs sleep. the tree of
the previous example is complete. its frontier is uni   able with the
following amrs:

d

num : pl(cid:21)   
(cid:20)cat :
   

cat :
num :
case :

n
pl
2

v

   
   (cid:20)cat :
num : pl(cid:21)     ptw (1, 3)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

339 / 420

uni   cation grammars

derivation trees

lexicalized derivation trees

it is sometimes useful to depict a tree whose leaves already re   ect the
additional information obtained by actually unifying the frontier of a
complete derivation tree with ptw
we call such trees lexicalized
it is easy to see that for every lexicalized tree h  ,    i there exists a
complete derivation tree h     ,       i such that        =    and         ~      

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

340 / 420

uni   cation grammars

derivation trees

lexicalized derivation trees

de   nition (lexicalized derivation trees)

let h  ,    i be a complete derivation tree induced by a uni   cation grammar
g = (r, as ) and let w ,    be as in the de   nition of complete trees. a
lexicalized derivation tree induced by g on w is the uni   cation tree
h     ,    i, where       is obtained from    by unifying the frontier of    with   .

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

341 / 420

uni   cation grammars

derivation trees

lexicalized derivation trees

example (lexicalized derivation tree)

a tree induced by the grammar gu on the string two lambs sleep:

s(cid:3)

(cid:2)cat :
   
   

np
4
2 nom

cat :
num :
case :

   
   
4 pl(cid:21)    
   

d

(cid:20)cat :

num :

cat :
num :
case :

n
4
2 nom

   
    (cid:20)cat :

num :

v

4(cid:21)

two

sheep

sleep

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

342 / 420

linguistic applications

introduction

linguistic applications

we now put the theory to use, by accounting for several of the
linguistic phenomena that motivated ugs

uni   cation grammars facilitate the expression of linguistic
generalizations
this is mediated through two main mechanisms:

the notion of grammatical category is expressed via feature structures,
thereby allowing for complex categories as    rst-class citizens of the
grammatical theory
reentrancy provides a concise machinery for expressing    movement   ,
or more generally, relations that hold in a deeper level than a
phrase-structure tree

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

343 / 420

linguistic applications

introduction

phenomena

agreement

case control

subcategorization

long-distance dependencies

control

coordination

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

344 / 420

linguistic applications

a basic grammar

a basic grammar

example (a context-free grammar g0:)

    np vp

s
vp     v | v np
np     d n | pron | propn
    the, a, two, every, . . .
d
    sheep, lamb, lambs, shepherd, water . . .
n
    sleep, sleeps, love, loves, feed, feeds, herd, herds, . . .
v

pron     i, me, you, he, him, she, her, it, we, us, they, them
propn     rachel, jacob, . . .

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

345 / 420

linguistic applications

a basic grammar

every id18 is a ug

observe that any context-free grammar is a special case of a
uni   cation grammar

the non-terminal symbols of the id18 can be modeled by atoms
a more general view of g0 as a uni   cation grammar can encode the
fact that the non-terminal symbols represent grammatical categories

this can be done using a single feature, e.g., cat, whose values are
the non-terminals of g0

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

346 / 420

linguistic applications

a basic grammar

g    

0, a basic uni   cation grammar

0, a basic uni   cation grammar)

example (g    
following is a uni   cation grammar, g    
where feats = {cat} and atoms = {s, np, vp, v, d, n, pron, propn}:

0, over a signature hfeats, atomsi

1

2

3

4

s(cid:3)     (cid:2)cat : np(cid:3) (cid:2)cat : vp(cid:3)
(cid:2)cat :
(cid:2)cat : vp(cid:3)     (cid:2)cat : v(cid:3)
(cid:2)cat : vp(cid:3)     (cid:2)cat : v(cid:3) (cid:2)cat : np(cid:3)
(cid:2)cat : np(cid:3)     (cid:2)cat : d(cid:3) (cid:2)cat : n(cid:3)

5, 6 (cid:2)cat : np(cid:3)     (cid:2)cat : pron(cid:3) | (cid:2)cat : propn(cid:3)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

347 / 420

linguistic applications

a basic grammar

g    

0, a basic uni   cation grammar

example (g    

0, a basic uni   cation grammar)

sleep     (cid:2)cat : v(cid:3)
love     (cid:2)cat : v(cid:3)
feed     (cid:2)cat : v(cid:3)
lamb     (cid:2)cat : n(cid:3)
    (cid:2)cat : pron(cid:3)
they     (cid:2)cat : pron(cid:3)
rachel     (cid:2)cat : propn(cid:3)

she

a

    (cid:2)cat : d(cid:3)

give     (cid:2)cat : v(cid:3)
tell     (cid:2)cat : v(cid:3)
feeds     (cid:2)cat : v(cid:3)
lambs     (cid:2)cat : n(cid:3)
her     (cid:2)cat : pron(cid:3)
them     (cid:2)cat : pron(cid:3)
jacob     (cid:2)cat : propn(cid:3)
two     (cid:2)cat : d(cid:3)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

348 / 420

linguistic applications

a basic grammar

derivation trees induced by g    
0

example (derivation trees induced by g    
0)
the grammar g    

0 induces the following tree on the string the sheep love her:

(cid:2)cat : np(cid:3)

(cid:2)cat :

s(cid:3)

(cid:2)cat : vp(cid:3)

(cid:2)cat : d(cid:3)

(cid:2)cat : n(cid:3)

(cid:2)cat : v(cid:3)

(cid:2)cat : np(cid:3)
(cid:2)cat : pron(cid:3)

the

sheep

love

her

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

349 / 420

linguistic applications

a basic grammar

derivation trees induced by g    
0

example (derivation trees induced by g    
0)
not surprisingly, an isomorphic derivation tree is induced by the grammar
on the ungrammatical string    the lambs sleeps they:

(cid:2)cat : np(cid:3)

(cid:2)cat :

s(cid:3)

(cid:2)cat : vp(cid:3)

(cid:2)cat : d(cid:3)

(cid:2)cat : n(cid:3)

(cid:2)cat : v(cid:3)

(cid:2)cat : np(cid:3)
(cid:2)cat : pron(cid:3)

the

lambs

sleeps

they

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

350 / 420

linguistic applications

imposing agreemnt

gagr, accounting for agreement on number

example (gagr, accounting for agreement on number)

num :

3

1

2

(cid:2)cat :
(cid:20)cat :
(cid:20)cat :
(cid:20)cat :
5, 6 (cid:20)cat :

4

num :

num :

num :

num :

num :

vp

vp

s(cid:3)     (cid:20)cat :
4 (cid:21)     (cid:20)cat :
4 (cid:21)     (cid:20)cat :
4 (cid:21)     (cid:20)cat :
4 (cid:21)     (cid:20)cat :

np

np

num :

num :

num :

vp

4 (cid:21)

v

v

np

num :

4 (cid:21) (cid:20)cat :
4(cid:21)
4(cid:21) (cid:2)cat : np(cid:3)
4(cid:21) (cid:20)cat :
4(cid:21)
(cid:21) | (cid:20)cat :

num :

num :

pron
4

n

d

propn
4

(cid:21)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

351 / 420

linguistic applications

imposing agreemnt

gagr, accounting for agreement on number

v

example (gagr, accounting for agreement on number)
give     (cid:20)cat :
tell     (cid:20)cat :
feeds     (cid:20)cat :

sleep     (cid:20)cat :
love     (cid:20)cat :
feed     (cid:20)cat :

num : pl(cid:21)
num : pl(cid:21)
num : pl(cid:21)

num : pl(cid:21)
num : pl(cid:21)
sg(cid:21)

num :

v

v

v

v

v

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

352 / 420

linguistic applications

imposing agreemnt

gagr, accounting for agreement on number

n

n

she

pron

num :

example (gagr, accounting for agreement on number)
lambs     (cid:20)cat :
    (cid:20)cat :
them     (cid:20)cat :
jacob     (cid:20)cat :
two     (cid:20)cat :

lamb     (cid:20)cat :
    (cid:20)cat :
they     (cid:20)cat :
rachel     (cid:20)cat :
    (cid:20)cat :

sg(cid:21)
sg (cid:21)
(cid:21)
(cid:21)

num : pl(cid:21)
sg (cid:21)
(cid:21)
(cid:21)

num : pl(cid:21)

propn
sg

propn
sg

num : pl

num : pl

sg(cid:21)

num :

num :

num :

num :

num :

pron

pron

pron

her

d

d

a

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

353 / 420

linguistic applications

imposing agreemnt

gagr generates a cf language

example (a context-free grammar g1)

s     ssg | spl

ssg     npsg vpsg

npsg     dsg nsg

spl     nppl vppl

nppl     dpl npl

npsg     pronsg | propnsg

nppl     pronpl | propnpl

vpsg     vsg

vppl     vpl

vpsg     vsg npsg | vsg nppl

vppl     vpl npsg | vpl nppl

dsg     a

dpl     two

nsg     lamb | sheep |         

npl     lambs | sheep |         

pronsg     she | her |         

propnsg     rachel | jacob |         

vsg     sleeps |         

vpl     sleep |         

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

354 / 420

linguistic applications

imposing agreemnt

gagr generates a cf language

while gagr is a uni   cation grammar, the language it generates is
context free
but the equivalent id18 is inferior to the uni   cation grammar:

the linguistic description is distorted: information regarding number,
which is determined by the words themselves, is encoded in g1 by the
way they are derived (in other words, g1 accounts for lexical knowledge
by means of phrase-structure rules)
several linguistic generalizations are lost: the context-free grammar
induces two di   erent trees on a lamb sleeps and two lambs sleep

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

355 / 420

linguistic applications

imposing agreemnt

ug and linguistic generalizations

one natural notion of    linguistic generalization    emerges: the ability
to formulate a linguistic restriction by means of a single rule, instead
of by a collection of    similar    rules
in this sense, gagr captures the agreement generalization, while g1
does not

multiplying out all the possible values of a particular feature, and
converting a uni   cation grammar to an equivalent context-free
grammar in this way, is not always possible

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

356 / 420

linguistic applications

imposing case control

imposing case control

add a feature to the signature, case, to the feature structures
associated with nominal categories: nouns, pronouns, proper names
and noun phrases

the lexical entries of pronouns must specify their case, which is overt
and explicit: we use the value nom for nominative case, whereas acc
stands for accusative

as for proper names and nouns, their lexical entries are simply
underspeci   ed with respect to case

use the values of the case feature in the grammar to impose
constraints of case control

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

357 / 420

linguistic applications

imposing case control

gcase, accounting for case control

example (gcase, accounting for case control)
   
    (cid:20)cat :

cat :
num :
case : nom

       
   

np
4

num :

vp

4 (cid:21)

num :

num :

2

3

1

(cid:2)cat :
(cid:20)cat :
(cid:20)cat :
   
   
5, 6    
   

4

cat :
num :
case :

cat :
num :
case :

vp

s(cid:3)
4 (cid:21)     (cid:20)cat :
4 (cid:21)     (cid:20)cat :

vp

num :

num :

np
4
2

np
4
2

   
   
   
   

num :

    (cid:20)cat :
       
   

cat :
num :
case :

cat :
num :
case :
cat :
num :
case :

v

v

4(cid:21)
4(cid:21)    
   
4(cid:21)    
   
   
   

pron
4
2

d

cat :
num :
case :

|    
   

np
3
acc
n
4
2

   
   

   
   

propn
4
2

   
   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

358 / 420

linguistic applications

imposing case control

gcase, accounting for case control

example (gcase, accounting for case control)

sleep       cat :

num :

feed       cat :

num :

v

pl   

v

pl   

sleeps       cat :

num :

feeds       cat :

num :

v

sg   

v

sg   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

359 / 420

linguistic applications

imposing case control

gcase, accounting for case control

example (gcase, accounting for case control)

she

lamb     2
4
    2
4
    2
4

they

cat :
num :
case :

cat :
num :
case :

cat :
num :
case :

n
sg
[ ]

3
5

pron
sg
nom

pron
pl
nom

rachel       cat :
      cat :

num :

num :

a

propn
sg

d

sg   

3
5
3
5
   

her

lambs     2
4
    2
4
them     2
4

cat :
num :
case :

cat :
num :
case :

cat :
num :
case :

n
pl
[ ]

3
5

pron
sg
acc

pron
pl
acc

num :

jacob       cat :
      cat :

two

num :

propn
sg

d

pl   

3
5
3
5
   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

360 / 420

linguistic applications

imposing case control

derivation tree with case control

example (derivation tree with case control)

cat :
num :
case :

2
4
4 pl   

d

  cat :

num :

np
4
3 nom

  cat :
3
5
2
4

cat :
num :
case :

s  

num :

  cat :
3
5   cat :

num :

n
4
3

vp

v

4    
4    2
4
2
4

cat :
num :
case :

np
2
5 acc

cat :
num :
case :

pron
2 pl
5

3
5
3
5

the

shepherds

feed

them

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

361 / 420

linguistic applications

imposing case control

derivation tree with case control

example (derivation tree with case control)
this tree represents a derivation which starts with the initial symbol,

(cid:2)cat :
      =

s(cid:3), and ends with multi-avm      , where

the

(cid:2)num :

4(cid:3)

shepherds
4

case : nom(cid:21)
(cid:20)num :

feed

(cid:2)num :

4(cid:3)

them

case : acc(cid:21)
(cid:20)num :

2

this multi-avm is uni   able with (but not identical to!) the sequence of
lexical entries of the words in the sentence, which is:

   =

the

(cid:2)num :

[ ](cid:3)

shepherds
pl

(cid:20)num :

case :

[ ](cid:21)

feed

(cid:2)num : pl(cid:3)

them

(cid:20)num :
case : acc(cid:21)

pl

hence the sentence is in the language generated by the grammar.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

362 / 420

linguistic applications

imposing subcategorization constraints

imposing subcategorization constraints

a na    ve solution to the subcategorization problem
intransitive verbs (with no object): sleep, walk, run, laugh, . . .
transitive verbs (with a nominal object): feed, love, eat, . . .

lexical entries of verbs are extended such that their subcategorization
is speci   ed

the rules that involve verbs and verb phrases are extended

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

363 / 420

linguistic applications

imposing subcategorization constraints

gsubcat, a na    ve account of verb subcategorization

example (gsubcat, a na    ve account of verb subcategorization)

1

2

  cat :
  cat :

num :

4

3

num :

cat :
num :
case :

  cat :
2
4
5, 6 2
4

cat :
num :
case :

vp

vp

    2
s  
4
4         2
4
4         2
4
3
5
3
5

np
4
2

np
4
2

cat :
num :
case :

np
4
nom

cat :
num :
subcat :

cat :
num :
subcat :

vp

4    

3
5

num :

  cat :
3
5
2
4

3
5

v
4
intrans

v
4
trans

cat :
num :
case :

cat :
num :
case :

n
4
2

3
5

np
4
acc

3
5

cat :
num :
case :

| 2
4

propn
4
2

3
5

num :

      cat :
    2
4

cat :
num :
case :

d

4    2
4
3
5

pron
4
2

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

364 / 420

linguistic applications

imposing subcategorization constraints

gsubcat, a na    ve account of verb subcategorization

example (gsubcat, a na    ve account of verb subcategorization)

sleep        
   
feed        
   

cat :
num :
subcat :

cat :
num :
subcat :

v
pl
intrans

v
pl
trans

   
   

    sleeps        
   
   
feeds        
   

cat :
num :
subcat :

cat :
num :
subcat :

v
sg
intrans

   
   

v
sg
trans

   
   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

365 / 420

linguistic applications

imposing subcategorization constraints

gsubcat, a na    ve account of verb subcategorization

example (gsubcat, a na    ve account of verb subcategorization)
3
5

cat :
num :
case :

cat :
num :
case :

n
sg
[ ]

n
pl
[ ]

3
5

she

lamb     2
4
    2
4
    2
4

they

cat :
num :
case :

cat :
num :
case :

pron
sg
nom

pron
pl
nom

3
5
3
5
   

her

lambs     2
4
    2
4
them     2
4

cat :
num :
case :

cat :
num :
case :

pron
sg
acc

pron
pl
acc

3
5
3
5
   

rachel       cat :

num :

propn
sg

jacob       cat :

num :

propn
sg

a

      cat :

num :

d

sg   

two

      cat :

num :

d

pl   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

366 / 420

linguistic applications

subcategorization lists

subcategorization lists

the previous account of subcategorization is na    ve

di   erent verbs subcategorize for di   erent kinds of complements:
noun phrases, in   nitival verb phrases, sentences etc.

some verbs require more than one complement

the idea is to store in the lexical entry of each verb not an atomic
feature indicating its subcategory, but rather a list of categories,
indicating the appropriate complements of the verb

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

367 / 420

linguistic applications

subcategorization lists

lexical entries of some verbs using subcategorization lists

example (lexical entries of some verbs using subcategorization lists)

sleep        
   
love        
   
give        
   
tell        
   

cat :
subcat :
num :

cat :
subcat :
num :

cat :
subcat :
num :

cat :
subcat :
num :

v
elist
pl

   
   

v

   
h(cid:2)cat : np(cid:3)i
   

pl

v

pl

   
h(cid:2)cat : np(cid:3) ,(cid:2)cat : np(cid:3)i
   
   
s(cid:3)i
   

h(cid:2)cat : np(cid:3) ,(cid:2)cat :

pl

v

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

368 / 420

linguistic applications

subcategorization lists

subcategorization lists

the grammar rules must be modi   ed to re   ect the additional wealth
of information in the lexical entries

due to this wealth there can be a dramatic reduction in the number
of grammar rules necessary for handling verbs

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

369 / 420

linguistic applications

subcategorization lists

vp rules using subcategorization lists

example (vp rules using subcategorization lists)

(cid:2)cat :
(cid:20)cat :

subcat :

subcat :

s(cid:3)    (cid:2)cat : np(cid:3) (cid:20)cat :
2(cid:21)      
subcat : (cid:20)first :
   

rest :

cat :

v

v

v

elist(cid:21)

(cid:2)cat :

2

   
4(cid:3)
    (cid:2)cat :
(cid:21)

4(cid:3)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

370 / 420

linguistic applications

subcategorization lists

a derivation tree

example (a derivation tree)

   cat :

s  

   cat :

subcat :

   cat :

np  

  cat :

subcat :

v

h   cat :

1    ,   cat :

   cat :

subcat :

v

hi   

v

2   i   
h   cat :
2   i      cat :

1 np      cat :

2 np  

rachel

gave

the sheep

water

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

371 / 420

linguistic applications

subcategorization lists

a derivation tree

example (a derivation tree)

   c :

s  

" c :

sc :

v

hh c :

1 i ,h c :
told

np  " c : v

sc : hh c :

   c :
jacob

   c :

sc :

v

hi   

2 ii#
2 ii#h c :

1 npi   c :
he

laban

np  " c :

sc :

h c :

v

v

sc :

2 si
hi   
   c :
3 ii#h c :

hh c :
loved

3 npi
rachel

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

372 / 420

linguistic applications

subcategorization lists

subcategorization imposes case constraints

in the above grammar, categories on subcategorization lists are
represented as an atomic symbol

this is a simpli   cation; the method outlined here can be used with
more complex encodings of categories

for example, the lexical entry of the german verb geben (to give) can
state that the    rst complement must be in the dative case, whereas
the second must be accusative

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

373 / 420

linguistic applications

subcategorization lists

subcategorization imposes case constraints

example (subcategorization imposes case constraints)

gebe
give

ich
i
i give the dog the bone

dem
the(dat)

hund
dog

den
the(acc)

knochen
bone

   ich
i

gebe
give

den
the(acc)

hund
dog

den
the(acc)

knochen
bone

   ich
i

gebe
give

dem
the(dat)

hund
dog

dem
the(dat)

knochen
bone

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

374 / 420

linguistic applications

subcategorization lists

subcategorization imposes case constraints

example (subcategorization imposes case constraints)
the lexical entry of gebe, then, could be:

v

cat :

l(gebe) =    
subcat : (cid:28)(cid:20)cat :
         

num :

sg

np

case : dat(cid:21) ,(cid:20)cat :

np

   
case : acc(cid:21)(cid:29)
         

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

375 / 420

linguistic applications

subcategorization lists

subcategorization imposes case constraints

in order to account for subcategorization of complex information
(rather than of atomic category symbols), the vp rule which
manipulates subcategorization lists has to be slightly modi   ed

the revised rule re   ects the fact that the subcategorized information
is not the value of the cat feature, but rather the entire verb
complement:

(cid:20)cat :

subcat :

v

cat :

2(cid:21)        
subcat : (cid:20)first :
   

rest :

v

3

   
2(cid:21)
    3 [ ]

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

376 / 420

linguistic applications

subcategorization lists

g3, a complete e2-grammar

example (g3, a complete e2-grammar)

  cat :

s  

cat :
num :
subcat :

cat :
num :
case :

cat :
num :
case :

np
4
2

np
4
2

2
4
2
4
2
4

3
5

v
4
2

3
5
3
5

subcat :

cat :
num :
case :

cat :
num :

    2
4
    2
664

      cat :

num :

    2
4

cat :
num :
case :

np
4
nom

3
5

2
4

cat :
num :
subcat :

v
4
elist

3
5

v
4

d

rest :

cat :
num :
case :

  first :
4    2
4
3
5

pron
4
2

| 2
4

3

3
775
2   
3
5

n
4
2

3 [ ]

propn
4
2

3
5

cat :
num :
case :

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

377 / 420

linguistic applications

subcategorization lists

g3, a complete e2-grammar

example (g3, a complete e2-grammar)

give    

sleep     2
4
2
664
2
664
2
664

love    

tell

   

cat :
subcat :
num :

v
elist
pl

3
5

cat :

v

subcat :

num :

cat :

subcat :

num :

cat :

subcat :

h   cat :

case :

pl

v

pl

v

h   cat :

case :

num :

pl

h   cat :

case :

np

acc   i

3
775

np

acc    ,   cat :

np  i

np

acc    ,   cat :

s  i

3
775

3
775

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

378 / 420

linguistic applications

subcategorization lists

g3, a complete e2-grammar

example (g3, a complete e2-grammar)

lamb

she

    2
4
    2
4

cat :
num :
case :

cat :
num :
case :

n
sg
2

3
5

pron
sg
nom

rachel        cat :

num :

propn
sg

3
5
   

lambs     2
4
    2
4

her

cat :
num :
case :

cat :
num :
case :

jacob       cat :

num :

n
pl
2

3
5

pron
sg
acc

propn
sg

3
5
   

a

       cat :

num :

d

sg   

two

      cat :

num :

d

pl   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

379 / 420

linguistic applications

long distance dependencies

long distance dependencies

encoding grammatical categories as feature structures is very useful
in the treatment of unbounded dependencies

such phenomena involve a    missing    constituent that is realized
outside the clause from which it is missing, as in:
the shepherd wondered whom jacob loved    .

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

380 / 420

linguistic applications

long distance dependencies

long distance dependencies

phrases such as whom jacob loved     or who     loved rachel are
sentences, with a constituent which is    moved    from its default
position and realized as a wh-pronoun in front of the phrase

we represent such phrases by using the category s

but to distinguish them from declarative sentences we add a feature,
que, to the category

the value of que is    +    in sentences with an interrogative pronoun
realizing a transposed constituent

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

381 / 420

linguistic applications

long distance dependencies

long distance dependencies

we also add a lexical entry for the pronoun whom:

whom        
   

cat :
pron
case : acc
que : +

   
   

finally, we update the rule that derives pronouns such that it
propagate the value of que from the lexicon to higher projections of
the pronoun:

cat :
num :
case :
que :

   
         

np
1

3
5

   
         

       
         

cat :
num :
case :
que :

pron
1

3
5

   
         

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

382 / 420

linguistic applications

long distance dependencies

long-distance dependencies

we extend g3 with two additional rules, based on the    rst two rules
of g3:

(3) (cid:20)cat :

slash :

(4)

cat :
num :
subcat :
slash :

   
         

s

np
1

   
   

cat :
num :
case : nom

4(cid:21)        
   
       
         
subcat : (cid:20)first :

cat :
num :

   
         

rest :

v
1

v
1

2

4

   
         
2(cid:21)

4

cat :
num :
subcat :
slash :

   
         

v
1
elist
4

   
         

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

383 / 420

linguistic applications

long distance dependencies

a derivation tree for jacob loved    

example (a derivation tree for jacob loved    )

  cat :

slash :

s

4   

cat :
num :
case :

2
4

np
1
2

3
5

cat :
num :
slash :
subcat :

2
664

v
1
4
8

3
775

cat :
num :
case :

2
4

propn
1 sg
2 nom

3
5

2

66664

cat :
num :

v
1

subcat : 2
4

first :

4   cat :

case :

np

acc   

rest :

8 elist

3

77775

3
5

jacob

loved

   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

384 / 420

linguistic applications

long distance dependencies

long-distance dependencies

a rule for creating    complete    sentences by combining the missing
category with a    slashed    sentence

the rule does not commit as to the category of the dislocated
element; it simply combines any category with a sentence in which
this very same category is missing, provided that this category is
marked as    que +   

the value of que is propagated to the mother to indicate that the
sentence is interrogative rather than declarative:

(5) (cid:20)cat :

que :

s

5(cid:21)     4 (cid:2)que :

5 +(cid:3) (cid:20)cat :

slash :

s

4(cid:21)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

385 / 420

linguistic applications

long distance dependencies

a derivation tree for whom jacob loved    

example (a derivation tree for whom jacob loved    )

  cat :

que :

s

5   
  cat :

slash :

s

4   

cat :
case :
que :

4 2
4

np
3
5

3
5

cat :
num :
case :

2
4

np
1
2

3
5

cat :
case :
que :

2
4

pron
3 acc
5 +

3
5

cat :
num :
case :

2
4

propn
1 sg
2 nom

3
5

cat :
num :
slash :
subcat :

cat :
num :
subcat :

2
664
2
4

3
775
3
5

v
1
4
elist

v
1

   4  

whom

jacob

loved

   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

386 / 420

linguistic applications

long distance dependencies

long-distance dependencies

in order to derive the full sentence

rachel wondered whom jacob loved    

we need a lexical entry for the verb wondered

it is a verb, so its category is v, and as it subcategorizes for an
interrogative sentence, its subcategory is a list of a single member, a
sentence whose que feature is    +   :

wondered        
         

cat :
num :

subcat :

v
[ ]

   
         
h(cid:20)cat :
que : +(cid:21)i

s

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

387 / 420

linguistic applications

long distance dependencies

a derivation tree for rachel wondered whom jacob loved    

example (a derivation tree for rachel wondered whom jacob loved    )

(cid:2)cat :

s(cid:3)

cat :
num :
case :

np
3
4 nom

cat :
num :
case :

propn
3 sg
4

   
   
   
   

   
   
   
   

cat :
num :
subcat :

   
   
   
   

v
3
h 1 i

v
3
elist

   
   

1 (cid:20)cat :
que : +(cid:21)

s

cat :
num :
subcat :

   
   

rachel

wondered

whom jacob loved    

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

388 / 420

linguistic applications

long distance dependencies

long-distance dependencies

in the previous example the    ller of the gap is realized immediately to
the left of the clause in which the gap occurs

this need not always be the case: unbounded dependencies can hold
across several clause boundaries

typical examples are:

the shepherd wondered whom jacob loved    .
the shepherd wondered whom laban thought jacob loved    .
the shepherd wondered whom
laban thought leah claimed jacob loved    .

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

389 / 420

linguistic applications

long distance dependencies

long-distance dependencies

also, the dislocated constituent does not have to be an object:

the shepherd wondered who     loved rachel.
the shepherd wondered who laban thought     loved rachel.
the shepherd wondered who
laban thought leah claimed     loved rachel.

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

390 / 420

linguistic applications

long distance dependencies

long-distance dependencies

the solution we proposed for the simple case of unbounded
dependencies can be easily extended to the more complex examples
the solution amounts to three components:

a slash introduction rule
slash propagation rules
a gap    ller rule

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

391 / 420

linguistic applications

long distance dependencies

long-distance dependencies

in order to account for    ller-gap relations that hold across several
clauses, all that needs to be done is to add more slash propagation
rules

for example, in

the shepherd wondered whom laban thought jacob loved    .

the slash is introduced by the verb phrase loved    , and is propagated
to the sentence jacob loved     by rule (3)

this sentence is the object of the verb thought; therefore, we need a
rule that propagates the value of slash from a sentential object to
the verb phrase of which it is an object

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

392 / 420

linguistic applications

long distance dependencies

long-distance dependencies

example (long-distance dependencies)

(6)

cat :
num :
subcat :
slash :

   
         

v
1
12
4

   
         

       
         

cat :
num :

v
1

subcat : (cid:20)first :

rest :

8

12(cid:21)

   
         

8 (cid:2)slash :

4(cid:3)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

393 / 420

linguistic applications

long distance dependencies

long-distance dependencies

example (long-distance dependencies)
then, the slash is propagated from the verb phrase thought jacob loved    
to the sentence laban thought jacob loved    :

(7) (cid:20)cat :

slash :

s

4(cid:21)        
   

np
5

cat :
num :
case : nom

   
   

cat :
num :
subcat :
slash :

   
         

v
5
elist
4

   
         

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

394 / 420

linguistic applications

long distance dependencies

long-distance dependencies

example (a derivation tree for whom laban thought jacob loved    )

" cat :

que :

s

6 #

" cat :

slash :

s

4 #
2
6664

cat :

num :

slash :

sc :

v
5
4
12 elist

3
7775
8 " cat :

slash :

cat :

case :

que :

4 2
64

np
3
6

cat :

case :

que :

2
64

pron
3 acc
6 +

cat :

num :

case :

2
64

cat :

num :

case :

3
75
2
3
64
75

np
5
9

3
75

propn
5 sg
9 nom

whom

laban

cat :

num :

sc :

3
75

2
6664

v
5
" first :
thought

rest :

3
7775

2
64

8

12 #

cat :

num :

case :

2
64

cat :

num :

case :

np
1
2

3
75

propn
1 sg
2 nom

jacob

2
6664
2
3
64
75

s

4 #

cat :

num :

slash :
sc :

v
1
4
elist

cat :

num :

v
1
d 4e
loved    

sc :

3
7775
3
75

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

395 / 420

linguistic applications

long distance dependencies

long-distance dependencies

example (long-distance dependencies)
finally, to account for gaps in the subject position, all that is needed is an
additional slash introduction rule:

s

cat :

(8)    
slash :    
         
   

np
1

cat :
num :
case : nom

   
   
         
   

       
   

cat :
num :
subcat :

v
1
elist

   
   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

396 / 420

linguistic applications

long distance dependencies

long-distance dependencies

example (a derivation tree for who     loved rachel)

   cat :

que :

s

6    

cat :
num :
slash :

2
4

cat :
num :
subcat :

2
4

s
1
4

3
5

v
1
elist

3
5
8   cat :

case :

np

2    

cat :
num :
subcat :

2
4

v
1 sg
h 8 i

3
5

cat :
num :
case :

2
4

propn
6 sg
2 acc

3
5

cat :
case :
que :

np
3 nom
6

cat :
case :
que :

pron
3 nom
6

4 2
4
2
4

3
5
3
5

who

   

loved

rachel

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

397 / 420

linguistic applications

subject and object control

subject and object control

di   erences between the    understood    subjects of the in   nitive verb
phrase to work seven years in the following sentences:

jacob promised laban to work seven years
laban persuaded jacob to work seven years

the di   erences between the two example sentences stem from
di   erences in the matrix verbs:

promise is a subject control verb;
persuade is object control

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

398 / 420

linguistic applications

subject and object control

g4: explicit subj values

example (g4: explicit subj values)

   cat :

s  

    1 2
4

cat :
case :
num :

np
nom
7

3
5

cat :
num :
subcat :
subj :

2
664

v
7
elist
1

3
775

cat :
num :
subcat :
subj :

v
7
4
1

3
775

   

cat :
num :

v
7

subcat :

subj :

  first :

rest :
1

2

66664

cat :
num :
case :

cat :
num :
case :

np
7
6

np
7
6

3
5
3
5

      cat :

num :

    2
4

cat :
num :
case :

d

cat :
num :
case :

7     2
4
5 | 2
3
4

pron
7
6

2
664
2
4
2
4

2 [ ]

3

77775

2

4    

n
7
6

3
5

cat :
num :
case :

propn
7
6

3
5

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

399 / 420

linguistic applications

subject and object control

g4: explicit subj values

example (g4: explicit subj values)

cat :
subcat :

v
elist

sleep    

give    

2
6664
2

666664

subj :

num :

cat :

subcat :

subj :

num :

love    

3
7775

  cat :

case :

np

nom   

pl

v

case :

h   cat :
  cat :

case :

pl

np

acc    ,   cat :
nom   

np

np  i

np

acc   i
nom   

np

3

777775

cat :

v

subcat :

subj :

num :

case :

h   cat :
  cat :

case :

pl

2

666664
777775

3

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

400 / 420

linguistic applications

subject and object control

g4: explicit subj values

example (g4: explicit subj values)

lamb        
   
       
   

she

cat :
num :
case :

n
sg
6

   
   

pron
sg

cat :
num :
case : nom

rachel     (cid:20)cat :

num :

propn
sg

cat :
num :
case :

lambs        
   
    her        
   
   
(cid:21) jacob     (cid:20)cat :

num :

pron
pl

cat :
num :
case : acc

   
   
(cid:21)

propn
sg

n
pl
6

   
   

a

    (cid:20)cat :

num :

d

sg(cid:21)

two     (cid:20)cat :

num : pl(cid:21)

d

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

401 / 420

linguistic applications

subject and object control

in   nitival verb phrases

the next step is to account for in   nitival verb phrases

this can be easily done by adding a new feature, vform, to verbal
projections

the values of this feature can represent the form of the verb:    n for
   nite verbs and inf for in   nitival ones

to work        
         

cat :
vform :
subcat :
subj :

v
inf
elist

   
         
(cid:2)cat : np(cid:3)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

402 / 420

linguistic applications

subject and object control

the lexical entry of promise

example (the lexical entry of promise)

promised    

cat :
vform :

subcat :

subj :

num :

   

                                 

v
   n

np

case : acc(cid:21) ,   
h(cid:20)cat :
   
1 (cid:20)cat :
case : nom(cid:21)

np

cat :
vform :
subj :

v
inf
1

   
   

[ ]

i

   

                                 

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

403 / 420

linguistic applications

subject and object control

a derivation tree for jacob promised laban to work

example (a derivation tree for jacob promised laban to work)

   cat :

s  

cat :
vform :

subj :
subcat :

2
664

v
   n
1
elist

3
775

cat :
vform :

subj :

subcat :

2
6664

v
   n
1
h 2 , 3 i

3
7775

cat :
vform :

subj :

subcat :

2
6664

1 " cat :

case :

np

6 nom#

" cat :

case :

propn
6

#

v
   n
1
h 3 i

3
7775
2 " cat :

case :

np

7 acc#

" cat :

case :

propn
7

#

jacob

promised

laban

3 2
4

cat :
vform :

subj :

to work

v
inf
1

3
5

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

404 / 420

linguistic applications

subject and object control

the lexical entry of persuade

example (the lexical entry of persuade)

persuaded    

cat :
vform :

subcat :

subj :

num :

   

                                 

v
   n

np

case : acc(cid:21) ,   
h 1 (cid:20)cat :
   
(cid:20)cat :
case : nom(cid:21)

np

cat :
vform :
subj :

v
inf
1

[ ]

i

   
   

   

                                 

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

405 / 420

linguistic applications

constituent coordination

constituent coordination

n: no man lift up his [hand] or [foot] in all the land of egypt

np: jacob saw [rachel] and [the sheep of laban]

vp: jacob [went on his journey] and

[came to the land of the people of the east]

vp: jacob [went near], and

[rolled the stone from the well   s mouth], and
[watered the    ock of laban his mother   s brother].

adj: every [speckled] and [spotted] sheep

adjp: leah was [tender eyed] but [not beautiful]

s: [leah had four sons], but [rachel was barren]

s: she said to jacob,    [give me children], or [i shall die]!   

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

406 / 420

linguistic applications

constituent coordination

coordination in id18

example (coordination in id18)

s     s conj s
np     np conj np
vp     vp conj vp
...
conj     and, or, but, . . .

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

407 / 420

linguistic applications

constituent coordination

coordination in ug

example (coordination in ug)

(cid:2)cat :

1(cid:3)     (cid:2)cat :

1(cid:3)(cid:2)cat :

conj(cid:3)(cid:2)cat :

1(cid:3)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

408 / 420

linguistic applications

constituent coordination

coordination in ug

example (coordination)

   cat :

1 v  

cat :
num :
sc :

2
4

1
[ ]
elist

3
5

cat :
num :
sc :

2
4

1
[ ]
elist

3
5

cat :
num :
sc :

2
4

v
[ ]
h 2 i

3
5

2    cat :

num :

np

sg      cat :

2
conj  
4

cat :
num :
sc :

v
[ ]
h 3 i

3
5

3    cat :

num :

np

[ ]    

rolled

the stone

and

watered

the sheep

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

409 / 420

linguistic applications

constituent coordination

tough issues in coordination

coordination of conjunctions

properties of the conjoined phrases

coordination of unlikes

non-constituent coordination

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

410 / 420

linguistic applications

constituent coordination

coordination

example (ruling out coordination in ug)

1

(cid:20)cat :
conj :    (cid:21)     (cid:20)cat :

conj : +(cid:21)(cid:2)cat :

1

conj(cid:3)(cid:20)cat :

conj : +(cid:21)

1

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

411 / 420

linguistic applications

constituent coordination

coordination

example (properties of the conjoined phrases)

cat :
num :
pers :
gen :

2
664

1 np
??
??
??

3
775

  cat :

conj  

cat :
num :
pers :
gen :

2
664

  cat :

num :

cat :
num :
pers :
gen :

2
664

1
4
2
8

3
775

cat :
num :
pers :
gen :

2
664

pron
4
2 second
8

3
775

1
6
3
7

3
775
6    2
664

d

cat :
num :
pers :
gen :

n
6 sg
3 third
7

3
775

you

and

a

lamb

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

412 / 420

linguistic applications

constituent coordination

coordination

example (coordination of unlikes)

joseph became wealthy
joseph became a minister
joseph became [wealthy and a minister]
joseph grew wealthy
   joseph grew a minister
   joseph grew [wealthy and a minister]

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

413 / 420

linguistic applications

constituent coordination

coordination

example (coordination of unlikes)

(cid:2)cat :

1     2(cid:3)     (cid:2)cat :

1(cid:3)

where           is the generalization operator

(cid:2)cat :

conj(cid:3)

(cid:2)cat :

2(cid:3)

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

414 / 420

linguistic applications

constituent coordination

coordination

example (coordination of unlikes)

  cat :

  v : +    

  subcat :

cat :

  n : +  
  v : +  

   

  cat :

  n : +    

  cat :

n : +      
  v : +

  cat :

conj  

  cat :

n : +      
  v :    

became

wealthy

and

a minister

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

415 / 420

linguistic applications

constituent coordination

coordination

example (coordination of unlikes)

   c :

   v :

+    

sc :

   c :
   v :
   n :
+   3
+  
5   c :

+

+  
+     
c     c :

sc :

and

c :

sc :

2
4

   v :
   v :
grew

n :

   v :
   n :

+        c :
+  
remained

n :

   v :
wealthy

   c :
   n :
+         c :

+

+    
c     c :

and

+       

n :

   v :    
a minister

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

416 / 420

linguistic applications

constituent coordination

coordination

example (non-constituent coordination)

rachel gave the sheep [grass] and [water]
rachel gave [the sheep grass] and [the lambs water]
rachel [kissed] and jacob [hugged] binyamin

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

417 / 420

linguistic applications

uni   cation grammars facilitate linguistic generalizations

uni   cation grammars facilitate linguistic generalizations

compared with context-free grammars, uni   cation grammars provide
much better means for expressing linguistic generalizations

verb subcategorization
coordination

uni   cation grammars also provide much more informative structures
than id18s

agreement
subject/object control

uni   cation grammars provide a very powerful tool for expressing what
other linguistic theories would call    movement   

gap      ller constructions
unbounded dependencies

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

418 / 420

extensions and open problems

summary

extensions and open problems

restricted versions of uni   cation grammars

o   -line parsability
context-free and mildly-context-sensitive uni   cation grammars
polynomially-arsable uni   cation grammars

typed uni   cation grammars

type hierarchies
appropriateness speci   cation
type id136

development of large-scale grammars

grammar engineering
modularity, information encapsulation, separate compilation, ...

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

419 / 420

thank you

summary

extensions and open problems

c(cid:13)shuly wintner (university of haifa)

uni   cation grammars

c(cid:13)copyrighted material

420 / 420

