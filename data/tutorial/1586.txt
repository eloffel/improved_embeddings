(p) a matter of horn clauses (1/3) 

 

 

v(eats). 

n(john). 

s(xy) :- n(x), v(y). 

 
n(mary). 

a horn clause, named for logician alfred horn, is a notation used in mathematics and in logic programs such 
as prolog. horn clauses offer a flexible way to write the rules of grammar for a language. this problem will 
introduce you to horn clause notation and ask you to use the notation to describe english and swiss german. 
 
let's start with english, since you already know it. to capture a simple fragment of english, we might say that 
a sentence consists of a noun followed by a verb. if we write s to mean sentence, n to mean noun, and v to 
mean verb, the following horn clause captures this intuition: 
 
 
 
this rule says that if we have a noun x and a verb y, we can make a sentence by putting x and y together in 
that order. horn clauses with the    :-    symbol are called rules, and they tell us how to derive the thing on the 
left side of the    :-    from the things on the right side of the    :-   . note that the labels s, n, and v don't affect how 
the rule behaves; they are simply chosen to help us remember what we're representing. 
 
however, so far we haven't given ourselves any nouns or verbs, so we can't make a sentence. the following 
horn clauses give us nouns and verbs to work with: 
 
 
 
for example, the first clause says that    mary" is a noun. horn clauses without the    :-    symbol are called facts, 
because they tell us things that we know are true without doing any work. 
 
using our facts and our lone rule, we can derive the following sentences: 
 
 
 
we can extend our grammar to account for subject-verb agreement in english. sg means singular and pl 
means plural. 
 
 
 
 
note that we can derive the sentences s(mary sleeps) and s(dogs sleep), but because we have no way to put 
an nsg together with a vpl, we can't derive s(mary sleep). 
 
p1. the rules above can only generate a fixed, finite number of sentences, but there is no clear upper limit 
on the length of grammatical english sentences. for example, consider the following sentences: 
 
 
 
 
 
 
 

 
we helped mary help john paint the house. 
we helped mary help john help kim paint the house. 
we helped mary help john help kim help john paint the house. 
we let mary let john let kim paint the house. 
we let mary help john let kim paint the house. 
we let mary help john help kim let mary help john let mary paint the house. 

s(xy) :- nsg(x), vsg(y).  
nsg(mary). 

s(xy) :- npl(x), vpl(y). 
vsg(sleeps). 

s(mary sleeps). 

s(mary eats).   

s(john sleeps).  

s(john eats). 

vpl(sleep). 

npl(dogs). 

v(sleeps). 

 
 

 

 

 

 

 

(p) a matter of horn clauses (2/3) 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

clearly we can keep extending these sentences as long as we want; they will still be grammatical, even if they 
are a bit awkward. 
 
to make things easier for you, we only want you to account for the underlined parts of the sentences. it's 
easy but tedious to extend the grammar to account for the entire sentences. write a set of rules and facts 
that will generate all the possible combinations of    help   ,    let   ,    john   , and    kim    that will fit in the sentenc-
es above. for example, you should be able to derive s(help john let kim let john). 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
p2. let's look at similar sentences in swiss german: 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

jan s  it das mer de hans em jan em hans de jan em hans de jan es huus l  nd h  lfe h  lfe laa h  lfe laa  
aastriiche. 
jan says that we let hans help jan help hans let jan help hans let jan paint the house. 

jan s  it das mer em hans em jan em hans em jan es huus h  lfed h  lfe h  lfe h  lfe aastriiche. 
jan says that we helped hans help jan help hans help jan paint the house. 

jan s  it das mer em hans em jan em hans es huus h  lfed h  lfe h  lfe aastriiche. 
jan says that we helped hans help jan help hans paint the house. 

jan s  it das mer de hans em jan de hans es huus l  nd h  lfe laa aastriiche. 
jan says that we let hans help jan let hans paint the house. 

jan s  it das mer em hans em jan es huus h  lfed h  lfe aastriiche. 
jan says that we helped hans help jan paint the house. 

jan s  it das mer de hans de jan es huus l  nd laa aastriiche. 
jan says that we let hans let jan paint the house. 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

(p) a matter of horn clauses (3/3) 

r(wy, xz) :- t(w, x), t(y, z). 

it turns out that the formalism described above cannot generate the swiss german data. however, a simple 
extension can. instead of manipulating a single phrase or sentence, we allow ourselves to manipulate a pair 
of phrases or sentences: 
 
 
 
this says that if the pair (w, x) is a t (whatever that may be), and the pair (y, z) is also a t, then the pair  
(wy, xz) is an r (whatever that may be). at the end of the day, we can smash the pair into a single sentence: 
 
 
 
for example, suppose we add the fact t(the, cat). then the first rule lets us derive r(the the, cat cat), and the 
second rule lets us derive s(the the cat cat). 
 
use this extension to describe the swiss german data. again, to make your life easier, you only need to gen-
erate the underlined part of the sentences. for example, you should be able to derive s(de hans em jan em 
hans laa h  lfe h  lfe). 
 
 
 

s(xy) :- r(x, y). 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

