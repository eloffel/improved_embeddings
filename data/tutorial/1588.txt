(k) the dualization game (1/5) 

entry state 

turing machines are a type of abstract computing machine first described by alan turing1 in 1936. although 
they have a very simple design, turing machines are very powerful     in fact, every computational task that a 
modern computer is capable of can also (theoretically) be done by a turing machine.  
 
 
 
 
 
 
 
turing machines consist of a tape (a series of cells, infinite in both directions, each containing a blank or a 
symbol), and a head, which reads a particular cell on the tape and performs an operation according to the 
   state    it is in: either writing something in that cell, moving left or right, both of these, or neither. a turing 
machine is defined by its instructions, which determine what operations it performs. below are the instruc-
tions for a particular turing machine. note that the symbol     indicates a blank on the tape; it is not the zero 
in state names (0):  
 
 
 
 
 
 
 
this turing machine deletes all w   s on a given tape. so, if the machine were fed this tape: 
 
 
 
   the tape would look like this when the machine was finished: 
 
 
 
this transformation can be summarized as: 
 
 
some things to note: 
     turing machines always start on the leftmost non-blank space on the tape 
    
     a turing machine will only stop if it arrives at a halt state or if there are insufficient instructions to 

awtzw     atz   (blanks within the letter sequence are not transcribed) 

input tapes always contain a single string of symbols, unbroken by blanks 

[otherwise] 

exit state 

halt 

write 

[n/a] 

[n/a] 

[n/a] 

move 

read 

s0 

s0 

s0 

s0 

s0 

w 

    

    

r 

r 

proceed 

     the initial state of a turing machine is always s0 
 
turing machines can operate on strings of 0   s and 1   s, on arbitrary strings of letters (like above), or on words 
    in this last case, turing machines can be used to perform useful linguistic tasks.  
 
 
1alan turing (1912-1954) was a british mathematician and logician who played a crucial role in the foundation 
of the field of computer science. he was the subject of the recent biopic    the imitation game   . 

(k) the dualization game (2/5) 

 

 

 

 

s 

r 

    

s0 

s0 

s0 

read 

move 

[n/a] 

[n/a] 

write 

halt 

exit state 

entry state 

entry state 

cat     cats 

[otherwise] 

apple     apples 

microscope     microscopes 

* fox     foxs  (* indicates an unsuccessful transformation) 

here is a simple turing machine designed for the english language, called pluralizing machine 1.0: 
 
 
 
 
 
this machine makes the following successful (i.e., linguistically valid) transformations: 
 
 
however, this machine also makes the following unsuccessful (i.e., linguistically invalid) transformation: 
 
 
the machines shown so far have used only a single state, s0 (not including the halt state). turing machines 
that perform more complex tasks, however, will require multiple states, each with its own set of instructions. 
in multi-state machines, some lines of instructions will cause the machine to change state     in other words, 
exit the line in a different state than it entered.  
 
consider pluralizing machine 2.0: 
 
 
 
 
 
 
 
 
 
 
 
in addition to making the successful transformations made by pluralizing machine 1.0, this machine also makes 
successful transformations for many new words, including    fox   : 
 
 
k1. give three more english words for which pluralizing machine 2.0 makes successful transformations, but 
that pluralizing machine 1.0 transforms unsuccessfully. try to take advantage of all the added capabilities of 
the new machine.  
 
 
 
k2. pluralizing machine 2.0 is not without its faults: what outputs does this machine give for the inputs    quiz    
and    child   ?  

fox     foxes 

[otherwise] 

[otherwise] 

[otherwise] 

[otherwise] 

exit state 

halt 

write 

[n/a] 

[n/a] 

[n/a] 

[n/a] 

[n/a] 

x, s, z 

move 

read 

s0 

s0 

s0 

s1 

s1 

s2 

s3 

s1 

s2 

s3 

s3 

    

r 

r 

r 

r 

l 

e 

s 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

quiz: 

 

 

 

 

 

child: 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

of course, turing machines can deal with any written language     not just english. the remaining turing ma-
chines in this problem perform tasks in navajo     a language in the na-den   family, spoken primarily in arizo-
na, utah, and new mexico. with almost 170,000 speakers, navajo is the most widely-spoken indigenous lan-
guage in the united states. 

(k) the dualization game (3/5) 

 

 

 

 

 

 

 

english 

english 

navajo 

navajo 

you (pl.) play  

you (du.) play  

people (pl.) drink it  

people (du.) drink it  

they (pl.) are greedy  

they (du.) are greedy  

we (pl.) are on the run  

people (pl.) imitate him  

people (du.) imitate him  

naahn    
jidl      
biyahodiily    s   we (du.) frighten him  
  ch    h  d  elni'  
bijil'      
naniich    

nidaahn   
dajidl      
biyadahodiily    s   we (pl.) frighten him  
  ch    dah  d  elni'  
bidajil'      
nidaniich    

consider the following verb forms from the navajo language. note:   , ', and y are consonants in navajo.  an 
accent above a vowel, as in   , indicates high tone, pronounced with raised pitch. a hook beneath a vowel, as 
in   , indicates that the vowel is nasal, pronounced through the mouth and nose. in the eyes of a turing ma-
chine, vowels that differ in tone or nasality are entirely different symbols. 
 
 
 
 
 
 
 
 
 
 
 
sam designs a turing machine to transform the plural (pl.) form of a navajo verb into its dual (du.) form. a 
dual verb has exactly two people/entities as its subject, and in navajo this form contrasts with singular verbs 
(one person as subject) and plural verbs (three or more people as subject). here is sam   s dualizer machine 
1.0: 
 
 
 
 
 
 
  
k3. sam   s dualizer machine 1.0 makes successful transformations for only four of the six plural verbs given 
above. identify the other two, for which the machine makes unsuccessful transformations, and show the ma-
chine   s output. 
 
 
 
 
 
 
 

we (du.) are on the run  

[otherwise]      

  output:   

  output:   

[otherwise] 

entry state 

exit state 

halt 

write 

[n/a] 

[n/a] 

move 

verb: 

verb: 

read 

s0 

s0 

s0 

s1 

s1 

    

r 

r 

d 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

(k) the dualization game (4/5) 

 

 

 

 

 

 

 

 

 

 

i 

d 

r 

r 

    

s5 

s4 

s4 

s5 

s3 

s3 

s2 

s1 

s4 

s3 

s2 

s1 

s0 

s0 

s0 

read 

move 

[n/a] 

[n/a] 

[n/a] 

[n/a] 

[n/a] 

[n/a] 

[n/a] 

[n/a] 

write 

halt 

halt 

halt 

exit state 

entry state 

[otherwise] 

[otherwise] 

[otherwise] 

[otherwise] 

here is the outline of dualizer machine 2.0: 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
k4. fill in the blanks of dualizer machine 2.0. the machine should make successful transformations for all six 
of the verbs given above.  
 
 
next, consider this set of navajo verbs, with their english translation 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
sam intends to design a second-personizer machine that will transform the    i    form of each verb (the first-
person singular form) to the    you (sg.)    (second-person singular) form.  

  yii  ts'i    
  ni  h        h  
  ii  ch    h  

yiists'i    
yishh        h  
iishch    h  

you (sg.) entwine them 

you (sg.) extinguish it 

you (sg.) scrape it off 

you (sg.) sew it shut 

you (sg.) dye it red 

you (sg.) destroy it 

you (sg.) bleach it 

you (sg.) break it 

you (sg.) fill it up 

you (sg.) melt it 

i entwine them 

d  di'nishkaad  

you (sg.) read 

i extinguish it 

i scrape it off 

i sew it shut 

d  di'n    kaad  

yishchx    h  

n  'iishg    h  

i dye it red 

i destroy it 

  a  k'  i  gis  

hadishbin  

i bleach it 

n  'ii  g    h  

ni  chx    h 

yishd    h  

i break it 

i fill it up 

a  k'  isgis  

nists    s  

      n    ta'  

had    bin  

n    ts    s  

    n  shta'  

ni  d    h  

i melt it 

navajo 

navajo 

english 

english 

i read 

 

 

 

 

 

 

 

(k) the dualization game (5/5) 

 

 

 

 

 

 

 

 

 

 

 

l 

l 

r 

    

s4 

s3 

s3 

s3 

s2 

s2 

s1 

s2 

s1 

s1 

s0 

s0 

s0 

read 

move 

[n/a] 

[n/a] 

[n/a] 

write 

halt 

exit state 

entry state 

[otherwise] 

[otherwise] 

[otherwise] 

[otherwise] 

here is an outline of sam   s second-personizer machine: 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
k5. fill in the blanks of sam   s second-personizer machine. this machine should be able to successfully trans-
form every verb above from its first-person form to its second-person form.  
 
here are two last navajo verbs, with their english translations: 
 
 
 
 
 
 
k6. only one of the two verbs above is transformed successfully by the second-personizer machine. which 
verb do you think will be transformed unsuccessfully, and what will the machine output for this verb?  

navajo 
    s  n  sts'        '  
bigh  n  shd    h  

i sift it (as flour) 

[otherwise] 

[otherwise] 

english 

i listen 

halt 

halt 

halt 

[n/a] 

[n/a] 

[n/a] 

[n/a] 

[n/a] 

s4 

s4 

s4 

s5 

s5 

 

 

 

 

verb: 

 

 

 

 

 

 

 

 

  output:   

 

 

 

 

 

 

 

 

 

