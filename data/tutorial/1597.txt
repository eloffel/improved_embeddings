your name:                                                                             registration # 

(l) transducing runes (1/5) [10 points] 

before the roman alphabet was introduced to northern europe, much of scandinavia and what is 

 
now great britain used a writing system called runic. these symbols have recently gained increasing popular-
ity because the fantasy author j.r.r. tolkien adapted an anglo-saxon runic writing called futhorc in his series 
lord of the rings (and the hobbit). 
 
 
is written in) into runes. this is not a simple substitution, however, because there is not a one-to-one con-
nection between roman letters and runes. for example, these words become the following runes. to make 
things cleaner, we're assuming that every word written in roman characters is followed by a # to mark the 
end of the word. you can assume that every input latin word will be terminated by a #, and that this be-
comes           in runes. 
 

this problem is about mathematical constructs that we can use to turn roman text (i.e., what english 

 

 

 

 

 

 

 

 

 

roman  

runic 

sat# 

eat# 

heat# 

east# 

 

 

 

 

 

 

a 

ea 

specifically, there are a number of runes that are equivalent to two roman characters. to keep things 

 
simple, we'll start with a very limited alphabet. 
 
 
 
 
 
 
 
 
 
 
 
 
 
processing (e.g., to remove suffixes and prefixes from words) in natural language processing technology. 

 
the tool that we're going to use is called a transducer, a logical tool that is used in morphological 

ee 

th 

st 

# 

h 

e 

s 

t 

 

 

 

 

 

 

 

 

your name:                                                                             registration # 

(l) transducing runes (2/5) 

which transition we use is based on the input we receive. when we transition, we also can output. in 

in this problem, our input is roman characters. for example, if we're in the    start    state and see ei-

the key components of a transducer are states, transitions, inputs, and outputs. we always start in 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
the    start    state. in the example transducer below, this is the right circle with the label    start    inside it. we 
transition to different states based on the input that we get. 
 
ther h, a, or t, then we transition from the    start    state to the    start    state (simple!). if, however, we were in 
the    start    state and saw the character e, we would transition to state    1   . 
 
the start state, 
 
    
 
    
 
    
 
    
 
     but if we see e we output nothing. 
 
 
transitions are depicted with an arrow. each arrow has a label that shows the input and output. to 
the left of the colon (:) is the input, and the output is to the right (possibly empty, as in the case of e in the 
start state). 
different states can have different transitions; we output different runes based on input. in state    1   ; 
 
  , which allows us to turn the input of e followed by a into the 
for example, if we then see a, we output 
correct rune. thus, if we're in state    1    it means that we might need to turn a sequence of characters into 
a single rune, but we won't know for sure until we see the next character. 
 
you get outputs that match the example runes. 

if you're unclear on the concept, trace eat# and heat# through this simple transducer and make sure 

if we see # we output 

if we see h we output 

if we see a we output 

if we see t we output 

; 

; 

; 

; 

your name:                                                                             registration # 

(l) transducing runes (3/5) 

l1. below is a transducer for the letters a, e, h, s, t, and #. given a sequence of roman characters, give the 

states that you would visit while transducing those characters. the first is done as an example. 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

a)  he# 

start 

start 

1 

start 

b) 

stash# 

start 

c)  heath# 

start 

d) 

thee# 

start 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

your name:                                                                             registration # 

(l) transducing runes (4/5) 

l2. we're going to make our transducer a little more complicated, by adding additional runes. the additional 

runes we'll add correspond to the letters n, g, and ng. 

 

 

 

 

 
 
 
 
it. instead, we'll show transitions that were in the previous transducer in gray without the inputs and outputs. 
we also won't give the outputs for some of the transitions; some of the outputs have been replaced by bold, 
upper-case, underlined roman letters; you'll fill in those missing runes on the next page. 

below is what this transducer looks like. it's getting more complex, so we're not going to show all of 

ng 

n 

g 

 

 

your name:                                                                             registration # 

(l) transducing runes (5/5) 

 

 

 

 

 

 

 
 
 

_____  

_____  

_____  

(f) t : g 

(e) n : e 

(b) g : b 

(a) g : a 

(c) h : c 

what is the correct output for the transitions in the above transducer? use the numbered runes be-

 
low. caution: answers can be repeated, outputs may require more than one rune, and order matters. 
 
 
 
 
 
 
 
 
 
 
1. 
 
 
l3. consider the number of states and transitions in a transducer needed to represent different alphabets.  
the table has the number of states and transitions for the transducers previously shown (don   t forget 
about the end of the word marked #). 

(d) a : d 

(g) n : h 

_____  

_____  

_____ 

_____ 

 
2. 

5. 

3. 

4. 

6. 

7. 

8. 

 
 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

transducer  single runes 

double runes 

states 

transitions 

a 

b 

c 

d 

          (a),             (e), 
          (h),             (t) 

          (a),              (e), 
          (h),              (s), 
          (t) 

          (a),               (e), 
          (h),               (g), 
          (n),               (s), 
          (t) 

          (a),                (d), 
          (e),                (h), 
          (g),                (n), 
          (s),                (t) 

             (ea),             (ee) 

              (ea),           (ee), 
              (st),            (th) 

              (ea),           (ee),    
              (ng),           (st), 
              (th) 

              (ea),           (ee), 
              (nd),           (ng), 
              (st),            (th) 

2 

4 

5 

? 

10 

24 

? 

? 

a)  how many transitions does transducer c have? 

b)  how many states does transducer d have? 

c)  how many transitions does transducer d have? 

 

 

 

 

 

