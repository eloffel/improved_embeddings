   [1]view on github

concrete

thrift definitions, making hlt data specifications concrete

getting started

   in this document, we   ll work toward getting users started with
   concrete. this document is not intended to be comprehensive tutorial,
   but rather a starting point for exploration.

what is concrete?

   concrete is a data serialization format for nlp. it replaces ad-hoc
   xml, csv, or programming language-specific serialization as a way of
   storing document- and sentence- level annotations. concrete is based on
   apache thrift and thus works cross-platform and in almost all popular
   programming languages, including javascript, c++, java, and python. to
   learn more about design considerations and motivation, have a look at
   the white paper, [2]ferraro et al. (2014). the details of the data
   format (schema) are described [3]here.

   in addition to data serialization, we provide concretely annotated
   data! we   ve done the hard work of running a variety of tools, such as,
   stanford   s nlp pipeline and hltcoe/jhu nlp tools, on an abundance of
   data. for more information on data release, see the concrete homepage.

table of contents

     * [4]getting started
          + [5]what is concrete?
          + [6]data format
          + [7]table of contents
          + [8]quick start
               o [9]step 0: install concrete-python
               o [10]step 1: get some data.
               o [11]step 2: what   s in this file?
     * [12]programming with concrete
          + [13]java

data format

capturing document structure

   a [14]communication is the primary document model. a communication   s
   full document text is stored in the communication.text string field; a
   communication   s id may be a headline, url, or some other
   identifying/characterizing feature. communications have [15]sections,
   which themselves have [16]sentences. a sentence has a [17]id121,
   which is where [18]dependencyparses, constituent [19]parses, and other
   sentence-level (syntactic) structures are stored. token-level
   annotations, like part of speech and named entity labels, are stored as
   [20]tokentaggings within a id121. all of these structures and
   annotation objects have a unique identifier ([21]uuid). uuids act as
   pointers: they allow annotations to be cross-referenced with others.

global annotations

   semantic, discourse and coreference annotations can cut across
   different sentences. therefore, they are stored at the communication
   level. semantic and discourse annotations, like frame semantic parses,
   are stored as [22]situationmentions within [23]situationmentionsets,
   while individual mentions of entities are stored as [24]entitymentions
   within [25]entitymentionsets. while entitymentions and
   situationmentions both can ground out in specific tokens (using uuids
   to cross-reference), situationmentions can ground out in entitymentions
   or, recursively, other situationmentions. if coreference decisions are
   made, then individual mentions can be clustered together into either
   [26]situationsets or [27]entitysets.

quick start

   now we   re going to step through how to look at some concrete data. this
   is meant to get our feet wet. it will not cover the all of the
   annotation types listed above in [28]data format. it relies on the
   concrete-python utility library, which also has a number of useful
   utility (command line) scripts.

   we   ve also provided a docker image containing the latest concrete, and
   java and python libraries. this can be found on [29]dockerhub:
$ docker pull hltcoe/concrete
$ docker run -i -t hltcoe/concrete:latest /bin/bash
#

step 0: install concrete-python

   first step, install the python utility library, either directly to your
   machine
$ pip install concrete

   or by running the docker image, as above.

step 1: get some data.

wget 'https://github.com/hltcoe/quicklime/blob/master/agiga_dog-bites-man.concre
te?raw=true' -o example.concrete

step 2: what   s in this file?

2.1 quicklime communication viewer

   regardless of how you   re ingesting the data, it   s probably a good idea
   to view the contents of a .comm file using quicklime. it stands up a
   mini-webserver that visualizes the data. install quicklime using:
pip install quicklime

   to view a concrete file:
$ qlook.py <path-to>/example.concrete
listening on http://localhost:8080/
hit ctrl-c to quit.

   now, open your web browser and go to the link printed to the screen
   http://localhost:8080/. for more information about the quicklime
   project, check out the [30]quicklime github repo.

2.2 command-line tools

   in addition to quicklime, concrete-inspect.py is another tool for
   viewing the contents of concrete files. this utility was made available
   when you installed concrete-python, so you can use it in any directory.
   below is some example usage. for further usage, use the script   s --help
   option.

2.2.1 conll-style output.

$ concrete-inspect.py example.concrete --pos --ner --lemmas --dependency
index token     lemma    pos ner    head
----- -----     -----    --- ---    ----
1     john      john     nnp person 4
2        s           s       pos o      1
3     daughter  daughter nn  o      4
4     mary      mary     nnp person 5
5     expressed express  vbd o      0
6     sorrow    sorrow   nn  o      5
7     .         .        .   o

2.2.2 parse tree

$ concrete-inspect.py example.concrete --treebank
(root
  (s (np (np (nnp john)
             (pos    s))
         (nn daughter)
         (nnp mary))
     (vp (vbd expressed)
         (np (nn sorrow)))
     (. .)))

programming with concrete

java

installation

   if you   re using java, you would use the following dependencies from
   maven central, which correspond to the v.4.4.4 tag of the concrete-java
   github repo: https://github.com/hltcoe/concrete-java
<dependency>
  <groupid>edu.jhu.hlt</groupid>
  <artifactid>concrete-core</artifactid>
  <version>4.4</version>
</dependency>
<dependency>
  <groupid>edu.jhu.hlt</groupid>
  <artifactid>concrete-util</artifactid>
  <version>4.4.4</version>
</dependency>

read a communication from a file

   you can read in a concrete file to a communication object as follows.
compactcommunicationserializer ser = new compactcommunicationserializer();
communication comm = ser.frompathstring(commfile.getabsolutepath());

iterate over sentences

   from there, you can just walk the communication object as you would any
   other in java. the [31]thrift spec defines the data structures. for
   example, you could iterate through the sentences as follows.
for (section csection : comm.getsectionlist()) {
    for (sentence csent : csection.getsentencelist()) {
        id121 ctoks = csent.getid121();
        // ...do something with the sentence...
    }
}

get the entities and situations

   to get the entities and situations you   d do something like this:
// get the entities.
list<entitymentionset> cemslist = comm.getentitymentionsetlist();
entitymentionset cems = cemslist.get(0); // since there's only one.
// get the relations.
list<situationmentionset> csmslist = comm.getsituationmentionsetlist();
situationmentionset csms = csmslist.get(0); // since there's only one.

   concrete maintained by [32]hltcoe

   published with [33]github pages

references

   1. https://github.com/hltcoe/concrete
   2. http://cs.jhu.edu/~ferraro/papers/ferraro-concrete-2014.pdf
   3. http://hltcoe.github.io/concrete/schema/
   4. http://hltcoe.github.io/concrete/#getting-started
   5. http://hltcoe.github.io/concrete/#what-is-concrete?
   6. http://hltcoe.github.io/concrete/#data-format
   7. http://hltcoe.github.io/concrete/#table-of-contents
   8. http://hltcoe.github.io/concrete/#quick-start
   9. http://hltcoe.github.io/concrete/#step-0-install-concrete-python
  10. http://hltcoe.github.io/concrete/#step-1-get-some-data.
  11. http://hltcoe.github.io/concrete/#step-2-what's-in-this-file?
  12. http://hltcoe.github.io/concrete/#programming-with-concrete
  13. http://hltcoe.github.io/concrete/#java
  14. http://hltcoe.github.io/concrete/schema/communication.html#struct_communication
  15. http://hltcoe.github.io/concrete/schema/structure.html#struct_section
  16. http://hltcoe.github.io/concrete/schema/structure.html#struct_sentence
  17. http://hltcoe.github.io/concrete/schema/structure.html#struct_id121
  18. http://hltcoe.github.io/concrete/schema/structure.html#struct_dependencyparse
  19. http://hltcoe.github.io/concrete/schema/structure.html#struct_parse
  20. http://hltcoe.github.io/concrete/schema/structure.html#struct_tokentagging
  21. http://hltcoe.github.io/concrete/schema/uuid.html#struct_uuid
  22. http://hltcoe.github.io/concrete/schema/situations.html#struct_situationmention
  23. http://hltcoe.github.io/concrete/schema/situations.html#struct_situationmentionset
  24. http://hltcoe.github.io/concrete/schema/entities.html#struct_entitymention
  25. http://hltcoe.github.io/concrete/schema/entities.html#struct_entitymentionset
  26. http://hltcoe.github.io/concrete/schema/situations.html#struct_situationset
  27. http://hltcoe.github.io/concrete/schema/entities.html#struct_entityset
  28. http://hltcoe.github.io/concrete/#data-format
  29. https://hub.docker.com/r/hltcoe/concrete/
  30. https://github.com/hltcoe/quicklime
  31. http://hltcoe.github.io/concrete/schema/communication.html
  32. https://github.com/hltcoe
  33. https://pages.github.com/
