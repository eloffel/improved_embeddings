id35 
(id35) 

categories 

    categories = types 

    primitive categories 

    n, np, s, pp, etc 

    functions 

    a combination of primitive categories 
    s/np,   (s/np) / (s/np),   etc 
    v, vp, adverb, pp, etc 

 

 
 

combinatory rules 

    application 

    forward application:   x/y  y     x 
    backward application:   y  x\y      x 

    composition 

    forward composition:   x/y  y/z      x/z 
    backward composition:   x\y  y\z      x\z 
    forward crossing composition:   x/y  y\z      x\z 
    backward crossing composition:   x\y  y/z      x/z 

    type-raising 

    forward type-raising:   x     y / (y\x) 
    backward type-raising:   x     y \ (y/x) 

    coordination <&> 

    x  conj  x     x 

 

combinatory rules 1 : application 
    forward application    >    

    x/y   y        x 
    (s\np) / np   np       s\np 

 

    backward application    <    

    y   x\y        x 
    np   s\np         s 

function 
    likes := (s\np) / np 

    a transitive verb is a function from nps into predicate s. 
that is, it accepts two nps as arguments and results in s. 
 

    vp or intransitive verb:   s\np 
    transitive verb:   (s\np) / np 
    adverb:   (s\np) \ (s\np) 
    pp:   ((s\np) \ (s\np)) / np 
            (np\np) / np 

id35 derivation: 

id18 derivation: 

examples from prof. julia hockenmaier 

combinatory rules 

    application 

    forward application:   x/y  y     x 
    backward application:   y  x\y      x 

    composition 

    forward composition:   x/y  y/z      x/z 
    backward composition:   x\y  y\z      x\z 
    forward crossing composition:   x/y  y\z      x\z 
    backward crossing composition:   x\y  y/z      x/z 

    type-raising 

    forward type-raising:   x     y / (y\x) 
    backward type-raising:   x     y \ (y/x) 

    coordination <&> 

    x  conj  x     x 

 

combinatory rules 4 : coordination 
    x conj x     x 

 

    alternatively, we can express coordination by defining 

conjunctions as functions as follows: 
 

    and :=  (x\x) / x 

coordination with id35 

examples from prof. mark steedman 

coordination with id35 

    application 

    forward application:   x/y  y     x 
    backward application:   y  x\y      x 

coordination with id35 

    application 

    forward application:   x/y  y     x 
    backward application:   y  x\y      x 

combinatory rules 

    application 

    forward application:   x/y  y     x 
    backward application:   y  x\y      x 

    composition 

    forward composition:   x/y  y/z      x/z 
    backward composition:   x\y  y\z      x\z 
    forward crossing composition:   x/y  y\z      x\z 
    backward crossing composition:   x\y  y/z      x/z 

    type-raising 

    forward type-raising:   x     y / (y\x) 
    backward type-raising:   x     y \ (y/x) 

    coordination <&> 

    x  conj  x     x 

 

coordination with id35 

    application 

    forward application:   x/y  y     x 
    backward application:   y  x\y      x 

    composition 

    forward composition:   x/y  y/z      x/z 
    backward composition:   x\y  y\z      x\z 
    forward crossing composition:   x/y  y\z      x\z 
    backward crossing composition:   x\y  y/z      x/z 
 

coordination with id35 

    application 

    forward application:   x/y  y     x 
    backward application:   y  x\y      x 

    composition 

    forward composition:   x/y  y/z      x/z 
    backward composition:   x\y  y\z      x\z 
    forward crossing composition:   x/y  y\z      x\z 
    backward crossing composition:   x\y  y/z      x/z 
 

combinatory rules 

    application 

    forward application:   x/y  y     x 
    backward application:   y  x\y      x 

    composition 

    forward composition:   x/y  y/z      x/z 
    backward composition:   x\y  y\z      x\z 
    forward crossing composition:   x/y  y\z      x\z 
    backward crossing composition:   x\y  y/z      x/z 

    type-raising 

    forward type-raising:   x     y / (y\x) 
    backward type-raising:   x     y \ (y/x) 

    coordination <&> 

    x  conj  x     x 

 

combinatory rules 3 : type-raising 
    turns an argument into a function 

 

    forward type-raising: x     t / (t\x) 
    backward type-raising:   x     t \ (t/x) 

 

for instance    
    subject type-raising:   np      s / (s \ np) 
    object type-raising:   np     (s\np) \ ((s\np) / np) 

 

combinatory rules 3 : type-raising 

    application 

    forward application:   x/y  y     x 
    backward application:   y  x\y      x 

    type-raising 

    forward type-raising:   x     y / (y\x) 
    backward type-raising:   x     y \ (y/x) 
    subject type-raising:   np      s / (s \ np) 
    object type-raising:   np     (s\np) \ ((s\np) / np) 

    coordination <&> 

    x  conj  x     x 

 

combinatory rules 3 : type-raising 

id34  
(tag) 

some slides are from prof. julia hockenmaier 

tag rule 1: substitution 

tag rule 2: adjunction 

the effect of adjunction 

example: tag lexicon 

example: tag derivation 

example: tag derivation 

example: tag derivation 

cross-serial dependencies 

    dutch and swiss-german 
    comparison to regular grammar and id18? 

 
 

