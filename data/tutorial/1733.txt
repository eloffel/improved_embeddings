   this app works best with javascript enabled.

   [1]

spacy

   [menu____]
     * [2]usage
     * [3]models
     * [4]api
     * [5]universe
     *

   ____________________

industrial-strength
natural language
processing

in python

fastest in the world

   spacy excels at large-scale information extraction tasks. it's written
   from the ground up in carefully memory-managed cython. independent
   research has confirmed that spacy is the fastest in the world. if your
   application needs to process entire web dumps, spacy is the library you
   want to be using.
   [6]facts & figures

get things done

   spacy is designed to help you do real work     to build real products, or
   gather real insights. the library respects your time, and tries to
   avoid wasting it. it's easy to install, and its api is simple and
   productive. we like to think of spacy as the ruby on rails of natural
   language processing.
   [7]get started

deep learning

   spacy is the best way to prepare text for deep learning. it
   interoperates seaid113ssly with tensorflow, pytorch, scikit-learn, gensim
   and the rest of python's awesome ai ecosystem. with spacy, you can
   easily construct linguistically sophisticated statistical models for a
   variety of nlp problems.
   [8]read more

edit the code & try spacy
# pip install spacy
# python -m spacy download en_core_web_sm

import spacy

# load english tokenizer, tagger, parser, ner and word vectors
nlp = spacy.load("en_core_web_sm")

# process whole documents
text = ("when sebastian thrun started working on self-driving cars at "
        "google in 2007, few people outside of the company took him "
        "seriously.    i can tell you very senior ceos of major american "
        "car companies would shake my hand and turn away because i wasn   t "
        "worth talking to,    said thrun, in an interview with recode earlier "
        "this week.")
doc = nlp(text)

# analyze syntax
print("noun phrases:", [chunk.text for chunk in doc.noun_chunks])
print("verbs:", [token.lemma_ for token in doc if token.pos_ == "verb"])

# find named entities, phrases and concepts
for entity in doc.ents:
    print(entity.text, entity.label_)

features

     * non-destructive id121
     * id39
     * support for 49+ languages
     * 16 statistical models for 9 languages
     * pre-trained word vectors
     * easy deep learning integration
     * part-of-speech tagging
     * labelled id33
     * syntax-driven sentence segmentation
     * built in visualizers for syntax and ner
     * convenient string-to-hash mapping
     * export to numpy data arrays
     * efficient binary serialization
     * easy model packaging and deployment
     * state-of-the-art speed
     * robust, rigorously evaluated accuracy

   join us in berlin

[9]spacy irl 2019: two days of nlp

   we're pleased to invite the spacy community and other folks working on
   natural language processing to berlin this summer for a small and
   intimate event july 5-6, 2019. the event includes a hands-on training
   day for teams using spacy in production, followed by a one-track
   conference. we've booked a beautiful venue, hand-picked an awesome
   lineup of speakers and scheduled plenty of social time to get to know
   each other and exchange ideas.
   [10]get tickets

   from the makers of spacy

[11]prodigy: radically efficient machine teaching

   prodigy is an annotation tool so efficient that data scientists can do
   the annotation themselves, enabling a new level of rapid iteration.
   whether you're working on entity recognition, intent detection or image
   classification, prodigy can help you train and evaluate your models
   faster. stream in your own examples or real-world data from live apis,
   update your model in real-time and chain models together to build more
   complex systems.
   [12]try it out
   spacy is trusted by

   [13]and many more
   featured on

   new in v2.1

[14]bert-style language model pretraining

   learn more from small training corpora by initializing your models with
   knowledge from raw text. the new pretrain command teaches spacy's id98
   model to predict words based on their context, producing
   representations of words in contexts. if you've seen google's bert
   system or fast.ai's ulmfit, spacy's pretraining is similar     but much
   more efficient. it's still experimental, but users are already
   reporting good results, so give it a try!
   [15]read more

benchmarks

   in 2015, independent researchers from emory university and yahoo! labs
   showed that spacy offered the fastest syntactic parser in the world and
   that its accuracy was within 1% of the best available ([16]choi et al.,
   2015). spacy v2.0, released in 2017, is more accurate than any of the
   systems choi et al. evaluated.

   [17]see details
     system   year    language     accuracy speed (wps)
   spacy v2.x 2017 python / cython     92.6        n/a
   spacy v1.x 2015 python / cython     91.8      13,963
   clearnlp   2015 java                91.7      10,271
   corenlp    2015 java                89.6       8,602
   mate       2015 java                92.5         550
   turbo      2015 c++                 92.4         349
     * spacy
     * [18]usage
     * [19]models
     * [20]api
     * [21]universe

     * support
     * [22]issue tracker
     * [23]stack overflow
     * [24]reddit user group
     * [25]gitter chat

     * connect
     * [26]twitter
     * [27]github
     * [28]blog

     * stay in the loop!
     * receive updates about new releases, tutorials and more.
     * ____________________
       ____________________ (button) sign up

      2016-2019 [29]explosion ai[30]legal / imprint

references

   visible links
   1. https://spacy.io/
   2. https://spacy.io/usage
   3. https://spacy.io/models
   4. https://spacy.io/api
   5. https://spacy.io/universe
   6. https://spacy.io/usage/facts-figures
   7. https://spacy.io/usage
   8. https://spacy.io/usage/training
   9. https://irl.spacy.io/2019
  10. https://irl.spacy.io/2019
  11. https://prodi.gy/
  12. https://prodi.gy/
  13. https://github.com/explosion/spacy/stargazers
  14. https://spacy.io/usage/v2-1
  15. https://spacy.io/usage/v2-1
  16. https://aclweb.org/anthology/p/p15/p15-1038.pdf
  17. https://spacy.io/usage/facts-figures#benchmarks
  18. https://spacy.io/usage
  19. https://spacy.io/models
  20. https://spacy.io/api
  21. https://spacy.io/universe
  22. https://github.com/explosion/spacy/issues
  23. http://stackoverflow.com/questions/tagged/spacy
  24. https://www.reddit.com/r/spacynlp/
  25. https://gitter.im/explosion/spacy
  26. https://twitter.com/spacy_io
  27. https://github.com/explosion/spacy
  28. https://explosion.ai/blog
  29. https://explosion.ai/
  30. https://explosion.ai/legal

   hidden links:
  32. https://github.com/explosion/spacy
  33. https://www.airbnb.com/
  34. https://www.quora.com/
  35. https://www.retriever.no/
  36. https://www.stitchfix.com/
  37. https://chartbeat.com/
  38. https://appenai.org/
  39. https://www.recode.net/2017/6/22/15855492/ai-artificial-intelligence-nonprofit-good-human-chatbots-machine-learning
  40. https://www.washingtonpost.com/news/wonk/wp/2016/05/18/googles-new-artificial-intelligence-cant-understand-these-sentences-can-you/
  41. http://www.bbc.co.uk/rd/blog/2017-08-irfs-weeknotes-number-250
  42. https://www.microsoft.com/developerblog/2016/09/13/training-a-classifier-for-relation-extraction-from-medical-literature/
  43. https://venturebeat.com/2017/01/27/4-ai-startups-that-analyze-customer-reviews/
  44. https://www.thoughtworks.com/radar/tools
  45. https://explosion.ai/
