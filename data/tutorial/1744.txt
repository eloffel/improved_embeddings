   [1]fork me on github

tsnejs demo

   intro
   id167 is a visualization algorithm that embeds things in 2 or 3
   dimensions according to some desired distances. if you have some data
   and you can measure their pairwise differences, id167 visualization can
   help you identify various clusters.
   example
   in the example below, we identified 500 most followed accounts on
   twitter, downloaded 200 of their tweets and computed distances
   similarities between them based on the types of things they talk about
   (bigram tfidf dot products). these similarities are then fed to id167
   and visualized in 2 dimensions. people who use similar words and
   phrases will be nearby in the visualization. i documented the creation
   of this demo in a [2]blog post.
   go ahead, pan and zoom around with mouse!
   (note if nothing is showing up: it can take a while to load all
   images...)
   second example
   in a second example, we take id27s that are trained using an
   unsupervised learning algorithm and visualize them using id167. head
   [3]over here to see it!
   javascript library
   the tsnejs library implements id167 algorithm and can be downloaded
   from [4]github. the api looks as follows:
var opt = {epsilon: 10}; // epsilon is learning rate (10 = default)
var tsne = new tsnejs.tsne(opt); // create a tsne instance

// initialize data. here we have 3 points and some example pairwise dissimilarit
ies
var dists = [[1.0, 0.1, 0.2], [0.1, 1.0, 0.3], [0.2, 0.1, 1.0]];
tsne.initdatadist(dists);

for(var k = 0; k < 500; k++) {
  tsne.step(); // every time you call this, solution gets better
}

var y = tsne.getsolution(); // y is an array of 2-d points that you can plot

   embed your csv data with web demo
   using the [5]web demo here you can run id167 on your data, in csv
   format.
   algorithm details
   the algorithm is described in this paper:
   l.j.p. van der maaten and g.e. hinton.
   visualizing high-dimensional data using id167. journal of machine
   learning research 9(nov):2579-2605, 2008.
   [6][ pdf ] [7][ supplemental material (24mb) ]
   in short, the algorithm computes a matrix p that is related to
   distances between all elements in the original space. the variables of
   the problem are the embedding point locations, which similarily rise to
   their own distance matrix q. the algorithm's cost function then
   minimizes the difference between p and q.
   about
   maintained by [8]@karpathy.

references

   1. https://github.com/karpathy/tsnejs
   2. http://karpathy.github.io/2014/07/02/visualizing-top-tweeps-with-id167-in-javascript/
   3. https://cs.stanford.edu/people/karpathy/tsnejs/wordvecs.html
   4. https://github.com/karpathy/tsnejs
   5. https://cs.stanford.edu/people/karpathy/tsnejs/csvdemo.html
   6. http://jmlr.csail.mit.edu/papers/volume9/vandermaaten08a/vandermaaten08a.pdf
   7. http://jmlr.csail.mit.edu/papers/volume9/vandermaaten08a/vandermaaten08a-supplement.pdf
   8. https://twitter.com/karpathy
