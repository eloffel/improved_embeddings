combinatory categorial 

grammar 

constraining surface realisation in 

openid35 

recommended reading 

       michael white. 2006. 

efficient realization of coordinate structures in 
id35. research on 
language and computation, 4(1):39   75.  

       mark steedman and jason baldridge. combinatory 

categorial grammar. to appear in robert borsley and 
kersti borjars (eds.) constraint-based approaches to 
grammar: alternatives to transformational syntax. oxford: 
blackwell. pdf (will appear in february 2011.) 

openid35 surface realisation 

categorial grammar 

sentence plan 

openid35 

realiser 

lexicon 

grammar 

surface text 

sentence plans are 
hybrid logic 
dependency structures 
 
what do the grammar 
and lexicon look like? 

categorial grammars are lexicalised grammars 
       a grammar is just a    dictionary    
       there are no language-specific grammar rules 
       a grammar is a mapping from words to structures 

restaurant 

food 

 

 

serves 

 
the 

mapping not 
one-to-one! 

lexicalised grammars 

categorial grammars (cgs) 

many kinds of lexicalised grammar 
       categorial grammars (including id35s) 
       lexicalised id34s (ltags) 
       id18s in greibach normal form 

i.e. a set of word-category pairs 

a cg is a mapping from words to categories 
      
 
what do categories look like? 

lexicalised grammars are more efficient than 

arbitrary id18s for id86 

       search space is simpler (koller & striegnitz, 2002) 

categories 

two kinds of category 
 
          atomic    categories 
          complex    categories 
 

restaurant 

food 

 

 

serves 

 
the 

atomic categories 

each cg is built around a finite set of atomic 

categories 

       simple, non-composite, atomic symbols 
       similar to the symbols of a id18 

examples:  
       s     sentence/clause 
       np     noun phrase 
       n - noun 
       pp     preposition phrase 

atomic categories in xml 

use atomcat elements with a type attribute 
 

<atomcat type=   s   /> 
 
<atomcat type=   np   /> 

 
 

complex categories 

       complex categories are built up from atomic 

category symbols 

       from any finite set of atomic categories, can 
construct an infinite set of complex categories 
using two operators 
      directional slash operators:  / and \ 

 
traditional arithmetic notation is a useful analogy 

arithmetic notation 

recursive definition 

arithmetic notation gives us a finite set of digits 
       0, 1, 2, . . ., 9 

and a small set of operators for describing an infinite 

set of numbers:  e.g., 

       concatenation:   23, 456, 92789 
       addition:   2+7, 7+23, 456+65 
       subtraction:   45 - 6, (2+6) - (67- 34) 

categories are defined recursively 
 
atomic categories constitute the    base    
       every atomic category is also a category 
 
the recursion involves the slash operators 
      
      

if x and y are both categories, then so is (x/y) 
if x and y are both categories, then so is (x\y) 

simple examples 

embedded examples 

category 
(s\np) 
(np/n) 
(n\n) 
(pp/np) 
(pp\np) 

meaning 

verb phrase, intransitive verb 

determiner 

noun post-modifier, relative clause 

preposition 
postposition 

category 
((s\np)/np) 

((s\np)/np)/np 

((n\n)/np) 

((s\np)\(s\np)) 

((s\np)\((s\np)/np)) 

((n\n)/(s\np)) 

meaning 

transitive verb 
ditransitive verb 

post-nominal preposition 

adverb 

reflexive pronoun 
relative pronoun 

notational conveniences 

complex categories in xml 

drop outermost parentheses 
       (s\np)         s\np 
       ((n\n)/(s\np))          (n\n)/(s\np) 

assume left associativity of / and \ 
       ((s\np)/np)/np         s\np/np/np 
       (n\n)/(s\np)         n\n/(s\np) 

how to represent s\np: 
 
<complexcat> 
  <atomcat type=   s   /> 
  <slash dir=   \   /> 
  <atomcat type=   np   /> 
</complexcat> 

s\np/np in xml 

n\n/(s\np) in xml 

<complexcat> 
  <atomcat type=   s   /> 
  <slash dir=   \   /> 
  <atomcat type=   np   /> 
  <slash dir=   /   /> 
  <atomcat type=   np   /> 
</complexcat> 

<complexcat> 
  <atomcat type=   n   /> 
  <slash dir=   \   /> 
  <atomcat type=   n   /> 
  <slash dir=   /   /> 
  <complexcat> 
    <atomcat type=   s   /> 
    <slash dir=   \   /> 
    <atomcat type=   np   /> 
  </complexcat> 
</complexcat> 

categories - summary 

what does x/y mean? 

  

the kind of word or phrase that combines with 

a following y to form an x. 

atomic 

categories 

slash operators 

complex 
categories 

x/y 

y 

x 

this rule is called forward application. 

determiners 

prepositions 

result 

argument 

the 

np / n 

restaurant 

n 

np 

in 

pp/np 

the restaurant 

np 

pp 

determiner:  word that combines with a 
following n to give an np, i.e., an np/n. 

preposition:  word that combines with a 
following np to give a pp, i.e., a pp/np. 

derivations 

attributive adjectives 

in 

pp/np 

the 
np/n 

restaurant 

n 

np 

pp 

great 
n/n 

food 
n 

n 

attributive adjective:  word that combines 
with a following n to give another n, i.e., an 
n/n. 

adjective stacking 

what does x\y mean? 

great 
n/n 

italian 
n/n 

restaurant 

n 

n 

n 

the kind of word or phrase that combines with 

a preceding y to form an x. 

y 

x\y 

x 

this rule is called backward application. 

intransitive verbs 

postpositions 

giovanni   s 

np 

rocks 
s\np 

s 

one floor 

np 

above 
pp\np 

pp 

intransitive verb:  word that combines with 
a preceding np to give an s, i.e., an s\np. 

postposition:  word that combines with a 
preceding np to give a pp, i.e., a pp\np. 

transitive verbs 

relative pronouns 

giovanni   s 

np 

serves 
s\np/np 

pasta 
np 

restaurant 

n 

that 

n\n/(s\np) 

rocks 
s\np 

s\np 

s 

n\n 

n 

transitive verb:  word that combines with a 
following np to give an intransitive verb, s\np. 

relative pronoun:  word that combines 
with a following intransitive verb s\np to 
give a noun postmodifier n\n. 

adverbs 

the story so far 

giovanni   s 

np 

totally 

s\np/(s\np) 

rocks 
s\np 

s\np 

s 

adverb:  word that combines with a 
following intransitive verb s\np to give 
another intransitive verb s\np. 

       a categorial grammar is a mapping from 

words to categories 

       categories can be atomic or complex 
       words are combined into phrases by forward 

and backward application 

our lexicon 

giovanni   s :- np 
pasta :- np 
serves :- s\np/np 
rocks :- s\np 
restaurant :- n 
great :- n/n  
a : np/n 
that :- n\n/(s\np) 

what does our grammar do? 

       it tells us which strings of words are 

grammatical and which are not. 

       it assigns derivational structure to the 

grammatical strings. 

       but what about semantics? 

remember hlds? 

       the input to the openid35 realiser is a hybrid 

logic dependency structure 

       so our categorial lexicon needs to include 

hlds in some way 

       we need to be able to relate the grammatical 

sentences with their hlds (interpretation) 

       and also to relate hldss to the grammatical 
sentences that can realise them (generation) 

adding hlds to our lexicon 

two steps: 
 
1.    add a nominal to each atomic category symbol 

2.    add a set of elementary predications of hybrid 

logic to each lexical category 

 
then relax and let forward and backward application 

(i.e. unification) take care of the rest! 

our lexicon again 

1. adding nominals to categories 

giovanni   s :- np 
pasta :- np 
serves :- s\np/np 
rocks :- s\np 
restaurant :- n 
great :- n/n  
a : np/n 
that :- n\n/(s\np) 

adding nominals in xml 

  <atomcat type=   np   /> 
 
 
  <atomcat type=   np   > 
    <fs> 
      <feat attr=   index   > 
 
          
 
      </feat> 
    </fs> 
  </atomcat> 
 

 </lf> 

 <lf> 

 

 

 <nomvar name=   x   /> 

       subscripts to atomic category symbols 
       referential indices:  unique labels for 
object or event evoked by the word 
       by convention, use x, y, z for objects, 
and e, f, g for events 
       coindexed nominals indicate the 
referent of the argument is the same as 
referent of result, e.g.,    great    

giovanni   s :- npx 
pasta :- npx 
serves :- se\npx/npy 
rocks :- se\npx 
restaurant :- nx 
great :- nx/nx  
a : npx/nx 
that :- nx\nx/(se\npx) 

nominal coindexation in xml 

nx\nx 

<complexcat> 
  <atomcat type=   n   > 
    <fs> 
      <feat attr=   index   > 
        <lf> <nomvar name=   x   /> </lf> 
      </feat> 
    </fs> 
  </atomcat> 
  <slash dir=   \   > 
 <atomcat type=   n   > 
    <fs> 
      <feat attr=   index   > 
        <lf> <nomvar name=   x   /> </lf> 
      </feat> 
    </fs> 
  </atomcat> 
</complexcat> 

2. adding eps to categories 

giovanni   s :- npx : @x giovanni   s 
pasta :- npx : @x pasta 
serves :- se\npx/npy : @e serve, @e <agent> x,  

@e <theme> y 

rocks :- se\npx : @e great, @e <theme> x 
restaurant :- nx : @e restaurant, @e <theme> x 
great :- nx/nx : @e great, @e <theme> x 
a : npx/nx :  
that :- nx\nx/(se\npx) : 

intransitive verbs 

giovanni   s 

npy   

@y giovanni   s 

rocks 
se\npx   

@e great, @e <theme> x 

se : @e great, @e <theme> x, @x giovanni   s 

  
   

transitive verbs 

attributive adjectives 

giovanni   s 
npw   
 

@w giovanni   s 

serves 

se\npx/npy  
@e serve  
@e <agent> x 
@e <theme> y 

pasta 
npv   
@v pasta 
 

se\npx  

@e serve, @e <agent> x 
@e <theme> y, @y pasta  
se : @e serve, @e <agent> x, @e <theme> y, 

@x giovanni   s, @y pasta  

 

great 
nz/nz 
 @g great 
@g <theme> z 

italian 
ny/ny  

@f italian 
@f <theme> y 

restaurant 

nx  

@e restaurant  
@e <theme> x 

@e restaurant, @e <theme> x, 

@f italian, @f <theme> x 

nx : @e restaurant, @e <theme> x,  

@f italian, @f <theme> x, @g great, @g <theme> x 

nx  

 
 
 

so where are we? 

       we(cid:1)ve seen how to define a lexicon in cg 
       we(cid:1)ve learned about two important operators in 

cg, i.e., forward and backward application 
       we(cid:1)ve seen how to combine words both  

       syntactically (derivations, unification), and 
       semantically (set union of elementary predications) 
       but, id35 gives us 

much more 

forward type raising 

x 

t 

y/(y\x) 

john 
np 

s/(s\np) 

t 

from cg to id35 

id35 is an    extension    of cg. 
 
id35 has more rules: 
       forward and backward type raising  
       forward and backward composition 

everything else remains the same - 
       in particular the hlds representations. 

type raising 

       id35 includes type-raising rules, which turn arguments into 

functions over functions over such arguments 

       forward type raising 

 
       example: 

x 

y/(y\x) 

t 

john 

np 

s/(s\np) 

t 

       the rules are order preserving.  here we turn an np into a 

rightward looking function over leftward functions, 
preserving the linear order of constituents 

 multiple derivations 

q1:   i know what restaurant serves french food, but what 

a1:

restaurant serves italian food?   
 babbo      serves      italian food. 
np 

s\np/np 

np 

s\np 

q2:   i know what kind of food pierre(cid:1)s serves, but what kind of 

a2:

food does babbo serve? 
 babbo      serves       italian food. 
np 

s\np/np 

np 

t 

s/(s\np) 

forward composition 

x/y 

y/z 

b 

x/z 

john 

s/(s\np) 

likes 
(s\np)/np 
b 

s/np 

s/np 

id35 is more flexible 

id35 is more flexible  

id35 generates more sentences: 
 
       object relative clauses      
    a restaurant that [john likes]s/np    

       right node raising      
    [john likes]s/np but [charles hates]s/np 
giovanni   s    

id35 allows one sentence to be derived in 

many ways - 

 
       reflecting different intonation patterns 

       allowing incremental (i.e. left-branching) 

derivations from a right-branching lexicon  

further reading 

       jason baldridge and geert-jan kruijff. 2003.    multi-modal 
id35   . in proceedings of eacl 
2003.  

       mike white and jason baldridge. 2003.    adapting chart 

realization to id35   . in proceedings of eid86 2003. 

       jason baldridge and geert-jan kruijff. 2002.    coupling id35 
with hybrid logic dependency semantics   . in proceedings of 
acl 2002. 

 

