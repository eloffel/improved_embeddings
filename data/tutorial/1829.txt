hands-on quest++

carolina scarton, gustavo paetzold and lucia specia

university of she   eld

https://github.com/ghpaetzold/questplusplus

coling, osaka, 11 dec 2016

de   nition

goal: framework to explore features for qe

de   nition

goal: framework to explore features for qe

(cid:73) feature extractors: for 150+ features of all types: java

de   nition

goal: framework to explore features for qe

(cid:73) feature extractors: for 150+ features of all types: java
(cid:73) machine learning: wrappers for a number of algorithms in
the scikit-learn toolkit, grid search, feature selection: python

de   nition

goal: framework to explore features for qe

(cid:73) feature extractors: for 150+ features of all types: java
(cid:73) machine learning: wrappers for a number of algorithms in
the scikit-learn toolkit, grid search, feature selection: python

open source: http://www.quest.dcs.shef.ac.uk/

de   nition

new release: word and document-level feature extraction and
machine learning added

de   nition

new release: word and document-level feature extraction and
machine learning added

(cid:73) feature extractors: 40 features for word-level and 79

features for document-level

de   nition

new release: word and document-level feature extraction and
machine learning added

(cid:73) feature extractors: 40 features for word-level and 79

features for document-level

(cid:73) machine learning: support to id49

(crf) added for word-level models

de   nition

new release: word and document-level feature extraction and
machine learning added

(cid:73) feature extractors: 40 features for word-level and 79

features for document-level

(cid:73) machine learning: support to id49

(crf) added for word-level models

(cid:73) another important improvement: changes on the core

functionalities

system and baseline features required

(cid:73) java 8 (openjdk or oracle versions)

system and baseline features required

(cid:73) java 8 (openjdk or oracle versions)
(cid:73) sentence and word-level baseline features

(cid:73) perl 5 (or above)
(cid:73) srilm
(cid:73) tokenizer and truecaser (from moses toolkit)

system and baseline features required

(cid:73) java 8 (openjdk or oracle versions)
(cid:73) sentence and word-level baseline features

(cid:73) perl 5 (or above)
(cid:73) srilm
(cid:73) tokenizer and truecaser (from moses toolkit)

(cid:73) word-level features

(cid:73) stanford core nlp 3.5.1 models
(cid:73) stanford core nlp spanish model
(cid:73) universal id138 plugin

basic usage - sentence-level

java -cp quest++.jar shef.mt.sentencelevelfeatureextractor
-tok -case true
-lang <<lang source>> <<lang target>>
-input <<input source>> <<input target>>
-con   g <<con   g    le>>

input    les

(cid:73) word and sentence levels:    le with one sentence per line

input    les

(cid:73) word and sentence levels:    le with one sentence per line
(cid:73) document level:    le with paths for documents

input    les

(cid:73) word and sentence levels:    le with one sentence per line
(cid:73) document level:    le with paths for documents

files from source and target should have the same number
of lines

folders

(cid:73) src: source code
(cid:73) lang resources: folder containing all language resources

required for the features

(cid:73) lib: external libraries needed for feature extraction
(cid:73) con   g: con   guration    les for running quest++
(cid:73) input: auxiliary input folder
(cid:73) output: output folder

adding a new feature

(cid:73) example with sentence-level feature extractor

adding a new feature

(cid:73) example with sentence-level feature extractor
(cid:73) new feature: complex words per sentence (averaged by the

length of sentence)

adding a new feature

(cid:73) example with sentence-level feature extractor
(cid:73) new feature: complex words per sentence (averaged by the

length of sentence)

(cid:73) language resource: list of simple words (lsw)

adding a new feature

(cid:73) example with sentence-level feature extractor
(cid:73) new feature: complex words per sentence (averaged by the

length of sentence)

(cid:73) language resource: list of simple words (lsw)
(cid:73) idea: count words not in the lsw and normalise by number

of words in the sentence

adding a new feature

(cid:73) creating a processor for the new feature

(cid:73) package: shef.mt.tools

adding a new feature

(cid:73) creating a processor for the new feature

(cid:73) package: shef.mt.tools
(cid:73) function: prepare resources to be used by features

adding a new feature

(cid:73) creating a processor for the new feature

(cid:73) package: shef.mt.tools
(cid:73) function: prepare resources to be used by features
(cid:73) extends resourceprocessor class: add the resources to the

sentence (processnextsentence method)

adding a new feature

(cid:73) creating a processor for the new feature

(cid:73) package: shef.mt.tools
(cid:73) function: prepare resources to be used by features
(cid:73) extends resourceprocessor class: add the resources to the

sentence (processnextsentence method)

(cid:73) it is useful because a unique processor can be used by several

features

adding a new feature

(cid:73) create a new java class called
complexwordsprocessor.java

(cid:73) package: shef.mt.tools

adding a new feature

(cid:73) create a new java class called
complexwordsprocessor.java

(cid:73) package: shef.mt.tools
(cid:73) extends: resourceprocessor class

adding a new feature

(cid:73) create a new java class called
complexwordsprocessor.java

(cid:73) package: shef.mt.tools
(cid:73) extends: resourceprocessor class
(cid:73) read the lsw and store it on a arraylist

adding a new feature

(cid:73) creating a class for the new feature
(cid:73) package: shef.mt.features.impl.bb

adding a new feature

(cid:73) creating a class for the new feature
(cid:73) package: shef.mt.features.impl.bb
(cid:73) extends feature class: run method - feature extraction itself

adding a new feature

(cid:73) creating a class for the new feature
(cid:73) package: shef.mt.features.impl.bb
(cid:73) extends feature class: run method - feature extraction itself
(cid:73) feature classes are usually named following a number order

(e.g. feature1001, feature1002)

adding a new feature

(cid:73) create a new java class called feature7001.java

(cid:73) package: shef.mt.features.impl.bb

adding a new feature

(cid:73) create a new java class called feature7001.java

(cid:73) package: shef.mt.features.impl.bb
(cid:73) extends: feature class

adding a new feature

(cid:73) create a new java class called feature7001.java

(cid:73) package: shef.mt.features.impl.bb
(cid:73) extends: feature class
(cid:73) get the arraylist from the complexwordsprocessor class

and calculate the feature

adding a new feature

(cid:73) create a new java class called feature7001.java

(cid:73) package: shef.mt.features.impl.bb
(cid:73) extends: feature class
(cid:73) get the arraylist from the complexwordsprocessor class

and calculate the feature

(cid:73) also de   ne the resource that will be required for this feature

adding a new feature

(cid:73) feature con   guration    le
(cid:73) folder: con   g/features

adding a new feature

(cid:73) feature con   guration    le
(cid:73) folder: con   g/features
(cid:73) xml    le with the featureset that will be executed

adding a new feature

(cid:73) feature con   guration    le

(cid:73) create a    le named features complex words.xml inside the

folder con   g/features

adding a new feature

(cid:73) feature con   guration    le

(cid:73) create a    le named features complex words.xml inside the

folder con   g/features

(cid:73) add the new feature to this    le

adding a new feature

(cid:73) con   guration    le
(cid:73) folder: con   g

adding a new feature

(cid:73) con   guration    le
(cid:73) folder: con   g
(cid:73) for sentence-level: con   g.sentence-level.properties

adding a new feature

(cid:73) con   guration    le
(cid:73) folder: con   g
(cid:73) for sentence-level: con   g.sentence-level.properties
(cid:73) contains basic con   guration for the system and paths to

resources and tools

adding a new feature

(cid:73) con   guration    le

(cid:73) add the resource source.simplewords to the con   guration    le

adding a new feature

(cid:73) con   guration    le

(cid:73) add the resource source.simplewords to the con   guration    le
(cid:73) change the option featurecon   g to the path to

features complex words.xml

adding a new feature

(cid:73) sentencelevelprocessorfactory.java

(cid:73) package: shef.mt.tools

adding a new feature

(cid:73) sentencelevelprocessorfactory.java

(cid:73) package: shef.mt.tools
(cid:73) function: create all processors required by the features

adding a new feature

(cid:73) sentencelevelprocessorfactory.java

(cid:73) package: shef.mt.tools
(cid:73) function: create all processors required by the features
(cid:73) only generate processors that will be used (improvement of

quest++)

adding a new feature

(cid:73) sentencelevelprocessorfactory.java

(cid:73) package: shef.mt.tools
(cid:73) function: create all processors required by the features
(cid:73) only generate processors that will be used (improvement of

quest++)

(cid:73) it is the connection between features and con   guration    le

adding a new feature

(cid:73) sentencelevelprocessorfactory.java

(cid:73) package: shef.mt.tools

adding a new feature

(cid:73) sentencelevelprocessorfactory.java

(cid:73) package: shef.mt.tools
(cid:73) add an if block containing the calling to a method called

getcomplexwordsprocessor

adding a new feature

(cid:73) sentencelevelprocessorfactory.java

(cid:73) package: shef.mt.tools
(cid:73) add an if block containing the calling to a method called

getcomplexwordsprocessor

(cid:73) implement getcomplexwordsprocessor method

build

(cid:73) netbeans 8.1
(cid:73) ant    -dplatforms.jdk 1.8.home=/usr/lib/jvm/java-8-

<<version>>   

run

java -cp quest++.jar
shef.mt.sentencelevelfeatureextractor
-tok -case true
-lang <<lang source>> <<lang target>>
-input <<input source>> <<input target>>
-con   g <<con   g    le>>
check the    le output.txt inside output/test

system requirements

(cid:73) python 2.7.6 (or above - only 2.7 stable distributions)

system requirements

(cid:73) python 2.7.6 (or above - only 2.7 stable distributions)
(cid:73) scipy and numpy (scipy >=0.9 and numpy >=1.6.1)
(cid:73) scikit-learn (version 0.15.2)
(cid:73) pyyaml

system requirements

(cid:73) python 2.7.6 (or above - only 2.7 stable distributions)
(cid:73) scipy and numpy (scipy >=0.9 and numpy >=1.6.1)
(cid:73) scikit-learn (version 0.15.2)
(cid:73) pyyaml
(cid:73) gpy
(cid:73) crfsuite

folders

(cid:73) learning: main folder
(cid:73) con   g: con   guration    les
(cid:73) src: source code    les
(cid:73) data: example data (same format as output of feature

extractor) + scores

run

python src/learn model.py con   g/<<con   g    le>>

machine learning algorithms

(cid:73) svr
(cid:73) svc
(cid:73) lassocv
(cid:73) lassorlars
(cid:73) lassorlarscv
(cid:73) gp (implemented using gpy - need some code update)
(cid:73) crf (implemented using crfsuite)

adding a machine learning algorithm

exemple using an algorithm from scikit-learn

adding a machine learning algorithm

exemple using an algorithm from scikit-learn

(cid:73) algorithm: ridge: linear least squares with l2 id173

adding a machine learning algorithm

exemple using an algorithm from scikit-learn

(cid:73) algorithm: ridge: linear least squares with l2 id173
(cid:73) package: sklearn.linear.model.ridge

adding a machine learning algorithm

exemple using an algorithm from scikit-learn

(cid:73) algorithm: ridge: linear least squares with l2 id173
(cid:73) package: sklearn.linear.model.ridge
(cid:73) idea: include the algorithm on the available code

adding a machine learning algorithm

learn model.py

(cid:73) main class of quest++ machine learning module

adding a machine learning algorithm

learn model.py

(cid:73) main class of quest++ machine learning module
(cid:73) method: set learning method(con   g, x train, y train)

adding a machine learning algorithm

learn model.py

(cid:73) main class of quest++ machine learning module
(cid:73) method: set learning method(con   g, x train, y train)
(cid:73) create estimators for the new algorithm

con   guration    le

(cid:73) folder: con   g

con   guration    le

(cid:73) folder: con   g
(cid:73) files follows the yaml format

con   guration    le

(cid:73) folder: con   g
(cid:73) files follows the yaml format
(cid:73) open the    le svr.id18 to see an example

con   guration    le

(cid:73) folder: con   g
(cid:73) files follows the yaml format
(cid:73) open the    le svr.id18 to see an example

create a new    le called ridge.id18 and follow the structured
yaml to provide parameters for the model

run

python src/learn model.py con   g/ridge.id18

hands-on quest++

carolina scarton, gustavo paetzold and lucia specia

university of she   eld

https://github.com/ghpaetzold/questplusplus

coling, osaka, 11 dec 2016

