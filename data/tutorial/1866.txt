            turboparser (dependency parser with id135)

   [turbo-parser.png] this page provides a link to turboparser, a free
   multilingual dependency parser developed by [1]andr   martins.
   it is based on joint work with [2]noah smith, [3]m  rio figueiredo,
   [4]eric xing, [5]pedro aguiar.

  background

   id33 is a lightweight syntactic formalism that relies on
   lexical relationships between words. nonprojective dependency grammars
   may generate languages that are not context-free, offering a formalism
   that is arguably more adequate for some natural languages. statistical
   parsers, learned from treebanks, have achieved the best performance in
   this task. while only local models (arc-factored) allow for exact
   id136, it has been shown that including non-local features and
   performing approximate id136 can greatly increase performance.

   this package contains a c++ implementation of a dependency parser based
   on the papers [1,2,3,4,5] below. the latest version of this package
   also contains c++ implementations of a pos tagger, a semantic role
   labeler, a entity tagger, a coreference resolver, and a constituent
   (phrase-based) parser. the relevant references are the papers [6,7,8,9]
   below.

   this package allows:
     * learning a parser/tagger/semantic parser/entity tagger/coreference
       resolver from a treebank,
     * running a parser/tagger/semantic parser/entity tagger/coreference
       resolver on new data,
     * evaluating the results against a gold-standard.

  demo

     * [6]ark syntactic & id29 demo

  news

   we released turboparser v2.3 on november 6th, 2015! this version
   introduces some new features:
     * a named entity recognizer (turboentityrecognizer) based on the
       illinois entity tagger (ref. [7] below).
     * a coreference resolver (turbocoreferenceresolver) based on the
       berkeley coreference resolution system (ref. [8] below).
     * a constituent parser based on dependency-to-constituent reduction,
       implementing ref. [9] below.
     * a dependency labeler, turbodependencylabeler, that can optionally
       be applied after the dependency parser.
     * compatibility with ms windows (using msvc) and with c++0x.

   we released turboparser v2.2 on june 26th, 2014! this version
   introduces some new features:
     * a python wrapper for the tagger and parser (requires cython 0.19).
     * a semantic role labeler (turbosemanticparser) implementing ref. [6]
       below.

   we released turboparser v2.1 on may 23th, 2013! this version introduces
   some new features:
     * the full model has now third-order parts for grand-siblings and
       tri-siblings (see ref. [5] below).
     * compatibility with ms windows (using msvc).

   we released turboparser v2.0 on september 20th, 2012! this version
   introduces a number of new features:
     * the parser does not depend anymore on cplex (or any other non-free
       lp solver). instead, the decoder is now based on [7]ad3, our free
       library for approximate map id136.
     * the parser now outputs dependency labels along with the backbone
       structure.
     * as a bonus, we now provide a trainable part-of-speech tagger,
       called turbotagger, which can be used in standalone mode, or to
       provide part-of-speech tags as input for the parser. turbotagger
       has state-of-the-art accuracy for english (97.3% on section 23 of
       the id32) and is fast (~40,000 tokens per second).
     * the parser is much faster than in previous versions. you may choose
       among a basic arc-factored parser (~4,300 tokens per second), a
       standard second-order model with consecutive sibling and
       grandparent features (the default; ~1,200 tokens per second), and a
       full model with head bigram and arbitrary sibling features (~900
       tokens per second).

   note: the runtimes above are approximate, and based on experiments with
   a desktop machine with a intel core i7 cpu 3.4 ghz and 8gb ram.

   to run this software, you need a standard c++ compiler. this software
   has the following external dependencies: [8]ad3, a library for
   approximate map id136; [9]eigen, a template library for linear
   algebra; [10]google-glog, a library for logging; [11]gflags, a library
   for commandline flag processing. all these libraries are free software
   and are provided as tarballs in this package.

   this software has been tested in several linux platforms. it has also
   successfully compiled in mac os x and ms windows (using msvc).

  further reading

   the main technical ideas behind this software appear in the papers:

   [1]  andr   f. t. martins, noah a. smith, and eric p. xing.
   [12]concise integer id135 formulations for dependency
   parsing.
   annual meeting of the association for computational linguistics
   (acl'09), singapore, august 2009.
   [2]  andr   f. t. martins, noah a. smith, and eric p. xing.
   [13]polyhedral outer approximations with application to natural
   language parsing.
   international conference on machine learning (icml'09), montreal,
   canada, june 2009.
   [3]  andr   f. t. martins, noah a. smith, eric p. xing, m  rio a. t.
   figueiredo, pedro m. q. aguiar.
   [14]turboparsers: id33 by approximate variational
   id136.
   empirical methods in natural language processing (emnlp'10), boston,
   usa, october 2010.
   [4]  andr   f. t. martins, noah a. smith, m  rio a. t. figueiredo, pedro
   m. q. aguiar.
   [15]id209 with many overlapping components.
   empirical methods in natural language processing (emnlp'11), edinburgh,
   uk, july 2011.
   [5]  andr   f. t. martins, miguel b. almeida, noah a. smith.
   [16]turning on the turbo: fast third-order non-projective turbo
   parsers.
   in annual meeting of the association for computational linguistics
   (acl'13), sofia, bulgaria, august 2013.
   [6]  andr   f. t. martins and mariana s. c. almeida.
   [17]priberam: a turbo semantic parser with second order features.
   in international workshop on semantic evaluation (semeval), task 8:
   broad-coverage semantic id33, dublin, august 2014.
   [7]  lev ratinov and dan roth.
   [18]design challenges and misconceptions in id39.
   in international conference on natural language learning (conll'09),
   2009.
   [8]  greg durrett and dan klein.
   [19]easy victories and uphill battles in coreference resolution.
   empirical methods in natural language processing (emnlp'13), 2013.
   [9]  daniel f.-gonz  lez and andr   f. t. martins.
   [20]parsing as reduction.
   in annual meeting of the association for computational linguistics
   (acl'15), beijing, china, august 2015.

  download

   the latest version of turboparser is [21]turboparser v2.3.0
   [~5.4mb,.tar.gz format]. see the [22]readme file for instructions for
   compilation, running, and file formatting. it does not include the data
   sets used in the papers; for information about how to get these data
   sets, please go to [23]http://nextens.uvt.nl/~conll. bear in mind that
   some data sets must be separately licensed through the [24]ldc.

   in addition, we provide separately the following pre-trained models
   (notice that these are very large files):
     * an english tagger trained on the sections 02-21 of the penn
       treebank. click [25]here to download this model [~3.3mb, .tar.gz
       format]. then, uncompress this model and save it in a local folder
       (e.g. as models/english_proj_tagger.model). to tag a new file
       <input-file>, type:
       ./turbotagger --test \
       --file_model=models/english_proj_tagger.model \
       --file_test=<input-file> \
       --file_prediction=<output-file> \
       --logtostderr
       check the [26]readme for file formatting instructions and
       additional options.
     * first, second, and third-order english parsers trained on the
       sections 02-21 of the id32, with dependencies extracted
       using the head-rules of yamada and matsumoto, through
       [27]penn2malt. click [28]here to download these models [~1.8gb,
       .tar.gz format]. uncompress this file and save the models in a
       local folder (e.g. as
       models/english_proj_parser_model-{basic,standard,full}.model). to
       parse a new file <input-file> in conll format, type:
       ./turboparser --test \
       --file_model=models/english_proj_parser_model-standard.model \
       --file_test=<input-file> \
       --file_prediction=<output-file> \
       --logtostderr
       check the [29]readme for file formatting instructions and
       additional options.
     * first, second, and third-order arabic parsers trained in the arabic
       dataset provided in the conll-x shared task. click [30]here to
       download these models [~520 mb, .tar.gz format]. uncompress this
       file and save the models in a local folder (e.g. as
       models/arabic_model-{basic,standard,full}.model). to parse a new
       file <input-file> in conll format, type:
       ./turboparser --test \
       --file_model=models/arabic_parser_model-standard.model \
       --file_test=<input-file> \
       --file_prediction=<output-file> \
       --logtostderr
       check the [31]readme for file formatting instructions and
       additional options.
     * taggers and parsers for [32]kinyarwanda and [33]malagasy. there is
       a [34]readme specifically for these models. they require
       turboparser v. 2.0.2.
     * farsi parser trained on the [35]dadegan persian treebank. click
       [36]here to download the model [~530 mb, .tar.gz format]. this
       model requires turboparser v 2.0.2. associated farsi nlp tools can
       be found [37]here.
     * parsers that generate stanford-style dependencies can be found
       [38]here.
     * a parser trained on the english web treebank for stanford basic
       dependencies can be found [39]here.

   finally, a script "parse.sh" is provided in this package that allows
   you to tag and parse free text (in english, one sentence per line) with
   the models above. just type:

   ./scripts/parse.sh <filename>

   where <filename> is a text file with one sentence per line. if no
   filename is specified, it parses stdin, so e.g.

   echo "i solved the problem with statistics." | ./scripts/parse.sh

   yields

   1       i               _       prp     prp     _       2       sub
   2       solved          _       vbd     vbd     _       0       root
   3       the             _       dt      dt      _       4       nmod
   4       problem         _       nn      nn      _       2       obj
   5       with            _       in      in      _       2       vmod
   6       statistics      _       nns     nns     _       5       pmod
   7       .               _       .       .       _       2       p

   older versions:
     * [40]turboparser v2.2.0 [~2.8mb,.tar.gz format].
     * [41]turboparser v2.1.0 [~2.5mb,.tar.gz format].
     * [42]turboparser v2.0.2 [~2.5mb,.tar.gz format].
     * [43]turboparser v2.0.1 [~2.5mb,.tar.gz format].
     * [44]turboparser v2.0 [~3.2mb,.tar.gz format].
     * [45]turboparser v0.1 [~2.5mb,.tar.gz format]. along with this
       distribution, we released an [46]english parser trained on the
       sections 02-21 of the id32, with dependencies extracted
       using the head-rules of yamada and matsumoto [~1.2 gb, .tar.gz
       format]; [47]another english parser trained in the dataset provided
       in the conll 2008 shared task [~1.4 gb, .tar.gz format]; an
       [48]arabic parser trained in the conll-x dataset [~225 mb, .tar.gz
       format]; a [49]script to apply these models to parse new data.

  contributing to turboparser

   for questions, bug fixes and comments, please e-mail afm [at]
   cs.cmu.edu.

   to contribute to turboparser, you can fork the following github
   repository: [50]http://github.com/andre-martins/turboparser.

   to receive announcements about updates to turboparser, [51]join the
   ark-tools mailing list.

  acknowledgments

   a. m. was supported by a fct/icti grant through the cmu-portugal
   program, and by priberam. this work was partially supported by the fet
   programme (eu fp7), under the simbad project (contract 213250), by
   national science foundation grant iis-1054319, and by the qnrf grant
   nprp 08-485-1-083.

references

   1. http://www.cs.cmu.edu/~afm
   2. http://www.cs.cmu.edu/~nasmith
   3. http://www.lx.it.pt/~mtf
   4. http://www.cs.cmu.edu/~epxing
   5. http://www.isr.ist.utl.pt/~aguiar
   6. http://demo.ark.cs.cmu.edu/parse
   7. http://www.ark.cs.cmu.edu/ad3
   8. http://www.ark.cs.cmu.edu/ad3
   9. http://eigen.tuxfamily.org/
  10. http://code.google.com/p/google-glog/
  11. http://code.google.com/p/gflags/
  12. http://www.cs.cmu.edu/~afm/home_files/acl2009.pdf
  13. http://www.cs.cmu.edu/~afm/home_files/icml2009.pdf
  14. http://www.cs.cmu.edu/~afm/home_files/emnlp2010.pdf
  15. http://www.cs.cmu.edu/~afm/home_files/emnlp2011b.pdf
  16. http://www.cs.cmu.edu/~afm/home_files/acl2013short.pdf
  17. http://www.cs.cmu.edu/~afm/home_files/semeval2014_task8.pdf
  18. http://cogcomp.cs.illinois.edu/papers/ratinovro09.pdf
  19. http://www.eecs.berkeley.edu/~gdurrett/papers/durrett-klein-emnlp2013.pdf
  20. http://www.cs.cmu.edu/~afm/home_files/acl2015_reduction.pdf
  21. http://www.cs.cmu.edu/~afm/turboparser/turboparser-2.3.0.tar.gz
  22. http://www.cs.cmu.edu/~afm/turboparser/readme
  23. http://nextens.uvt.nl/~conll
  24. http://www.ldc.upenn.edu/
  25. http://www.cs.cmu.edu/~ark/turboparser/sample_models/english_proj_tagger.tar.gz
  26. http://www.cs.cmu.edu/~afm/turboparser/readme
  27. http://w3.msi.vxu.se/~nivre/research/penn2malt.html
  28. http://www.cs.cmu.edu/~ark/turboparser/sample_models/english_proj_parser.tar.gz
  29. http://www.cs.cmu.edu/~afm/turboparser/readme
  30. http://www.cs.cmu.edu/~ark/turboparser/sample_models/arabic_parser.tar.gz
  31. http://www.cs.cmu.edu/~afm/turboparser/readme
  32. http://www.cs.cmu.edu/~ark/turboparser/nasmith_models/kin-turbo-v1.0.tgz
  33. http://www.cs.cmu.edu/~ark/turboparser/nasmith_models/mlg-turbo-v1.0.tgz
  34. http://www.cs.cmu.edu/~ark/turboparser/nasmith_models/readme
  35. http://dadegan.ir/en
  36. http://www.cs.cmu.edu/~ark/turboparser/sample_models/farsi_parser.tar.gz
  37. https://github.com/wfeely/farsinlptools
  38. http://www.ark.cs.cmu.edu/tbsd/
  39. http://www.cs.cmu.edu/~ark/lexsem/#syntax
  40. http://www.cs.cmu.edu/~afm/turboparser/turboparser-2.2.0.tar.gz
  41. http://www.cs.cmu.edu/~afm/turboparser/turboparser-2.1.0.tar.gz
  42. http://www.cs.cmu.edu/~afm/turboparser/turboparser-2.0.2.tar.gz
  43. http://www.cs.cmu.edu/~afm/turboparser/turboparser-2.0.1.tar.gz
  44. http://www.cs.cmu.edu/~afm/turboparser/turboparser-2.0.tar.gz
  45. http://www.cs.cmu.edu/~afm/turboparser/turboparser-0.1.tar.gz
  46. http://www.cs.cmu.edu/~ark/turboparser/turboparser-0.1/sample_models/english_proj.tar.gz
  47. http://www.cs.cmu.edu/~ark/turboparser/turboparser-0.1/sample_models/english.tar.gz
  48. http://www.cs.cmu.edu/~ark/turboparser/turboparser-0.1/sample_models/arabic.tar.gz
  49. http://www.cs.cmu.edu/~ark/turboparser/turboparser-0.1/sample_models/run_pretrained.sh
  50. http://github.com/andre-martins/turboparser
  51. https://mailman.srv.cs.cmu.edu/mailman/listinfo/ark-tools
