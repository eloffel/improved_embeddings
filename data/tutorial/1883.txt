   #[1]github [2]recent commits to camr:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]6
     * [35]star [36]63
     * [37]fork [38]37

[39]c-amr/[40]camr

   [41]code [42]issues 11 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   transition-based tree-to-graph amr parser
     * [47]75 commits
     * [48]1 branch
     * [49]1 release
     * [50]fetching contributors
     * [51]gpl-2.0

    1. [52]python 99.3%
    2. [53]shell 0.7%

   (button) python shell
   branch: master (button) new pull request
   [54]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/c
   [55]download zip

downloading...

   want to be notified of new releases in c-amr/camr?
   [56]sign in [57]sign up

launching github desktop...

   if nothing happens, [58]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [59]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [60]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [61]download the github extension for visual studio
   and try again.

   (button) go back
   [62]@juicechuan
   [63]juicechuan [64]fix readme
   latest commit [65]6431b0b feb 19, 2018
   [66]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [67]common
   [68]feature
   [69]importlib
   [70]lib
   [71]resources [72]adding country id172 list; v1.3 result for
   semeval jan 22, 2016
   [73]rules
   [74]scripts
   [75]stanfordnlp
   [76]temp
   [77].ds_store
   [78].gitignore
   [79]aligner.py
   [80]license.md
   [81]readme.md [82]fix readme feb 18, 2018
   [83]amr_parsing.py
   [84]constants.py
   [85]depparser.py
   [86]graphstate.py
   [87]model.py
   [88]newstate.py
   [89]oracle.py
   [90]parser.py
   [91]id88.py
   [92]preprocessing.py [93]fix preprocessing bug jun 14, 2017
   [94]span.py

readme.md

camr: a transition-based amr parser

   camr is a transition-based, tree-to-graph parser for the [95]abstract
   meaning representation of a sentence. it is a product of an on-going
   collaboration between the [96]chinese language processing group at
   brandeis university and [97]cemantix.org

   reference:
     * chuan wang, nianwen xue, and sameer pradhan.2015. [98]a
       transition-based algorithm for amr parsing. in proceedings of the
       2015 conference of the north american chapter of the association
       for computational linguistics: human language technologies, pages
       366   375, denver, colorado, may   june. association for computational
       linguistics.

@inproceedings{wang-xue-pradhan:2015:naacl-hlt,
  author    = {wang, chuan  and  xue, nianwen  and  pradhan, sameer},
  title     = {a transition-based algorithm for amr parsing},
  booktitle = {proceedings of the 2015 conference of the north american chapter
of the association for computational linguistics: human language technologies},
  month     = {may--june},
  year      = {2015},
  address   = {denver, colorado},
  publisher = {association for computational linguistics},
  pages     = {366--375},
  url       = {http://www.aclweb.org/anthology/n15-1040}
}

     * chuan wang, nianwen xue, and sameer pradhan.2015. [99]boosting
       transition-based amr parsing with refined actions and auxiliary
       analyzers. in proceedings of the 53rd annual meeting of the
       association for computational linguistics and the 7th international
       joint conference on natural language processing (short papers),
       pages 857-862, beijing, china, july 26-31, 2015. association for
       computational linguistics.

@inproceedings{wang-xue-pradhan:2015:acl-ijcnlp,
  author    = {wang, chuan  and  xue, nianwen  and  pradhan, sameer},
  title     = {boosting transition-based amr parsing with refined actions and au
xiliary analyzers},
  booktitle = {proceedings of the 53rd annual meeting of the association for com
putational linguistics and the 7th international joint conference on natural lan
guage processing (volume 2: short papers)},
  month     = {july},
  year      = {2015},
  address   = {beijing, china},
  publisher = {association for computational linguistics},
  pages     = {857--862},
  url       = {http://www.aclweb.org/anthology/p15-2141}
}

     * chuan wang, nianwen xue, sameer pradhan, xiaoman pan, and heng ji.
       2016. [100]camr at semeval-2016 task 8: an extended
       transition-based amr parser. in proceedings of the 10th
       international workshop on semantic evaluation (semeval 2016), san
       diego, california, june. association for computational linguistics.

@inproceedings{wang-etal:2016:semeval,
  author    = {wang, chuan  and  pradhan, sameer  and  pan, xiaoman  and  ji, he
ng  and  xue, nianwen},
  title     = {camr at semeval-2016 task 8: an extended transition-based amr par
ser},
  booktitle = {proceedings of the 10th international workshop on semantic evalua
tion (semeval-2016)},
  month     = {june},
  year      = {2016},
  address   = {san diego, california},
  publisher = {association for computational linguistics},
  pages     = {1173--1178},
  url       = {http://www.aclweb.org/anthology/s16-1181}
}

updates

   09-2016 we have included the retrain instruction.

   08-2016 we have released new model trained on bigger dataset.

dependencies

   first download the project:
  git clone https://github.com/juicechuan/amrparsing.git

   here we use a modified version of the [101]stanford corenlp python
   wrapper, [102]charniak parser and [103]stanford corenlp toolkit. to
   setup dependencies, run the following script:
  ./scripts/config.sh

     note: for mac users, there are some problems when installing the
     charniak parser python module bllipparser. we recommend to use linux
     system in order to utilize the charniak parser. also you may need
     [104]swig to successfully install bllipparser.

parsing with pre-trained model

   the input data format for parsing should be raw document with one
   sentence per line.

preprocessing

   to preprocess the data, run:
  python amr_parsing.py -m preprocess [input_sentence_file]

   this will give you the tokenized sentences(.tok), pos tag and name
   entity (.prp) and dependency structure (.charniak.parse.dep) (generated
   by charniak parser and stanford dependency converter).

     note: the parser will try to read the preprocessed file with the
     above suffix. so if the preprocessing is not complete, do remove all
     the cached file and then re-run this step.

parsing

   download the following model:

   [105]ldc2014t12: trained on training set of ldc2014t12.

   [106]semeval2016: trained on training set of semeval 2016 task 8.

   uncompress the model file, then use the following command to parse the
   sentence:
  python amr_parsing.py -m parse --model [model_file] [input_sentence_file] 2>lo
g/error.log

   this will give your the parsed amr file(.parsed) in the same directory
   of your input sentence file.

     note: these models doesn't incorporate the semantic role label
     feature, so it will give you slightly lower results reported in the
     papers. we are working on integrating the srl system into the
     pipeline.

retrain the parser

   if you would like to retrain the parser, you first have to obtain the
   alignment in the following section.

alignment

   if you have annotated amr file, you could first run the preprocessing
   step:
python amr_parsing.py -m preprocess --amrfmt amr [input_amr_file]

   this will generate a tokenized amr file (.amr.tok) (which has :tok tag
   in the comments). then you can run the following command to get the
   aligned amr file(.aligned)
./scripts/jamr_align.sh [input_amr_tok_file]

     note: we use [107]jamr to get the alignment between sentence and its
     amr annotation. you need to download and set up jamr.

retrain

   to retrain the model with the provided feature template
   basic_abt_brown_feats.templates , use the following command:
  python2.7 amr_parsing.py -m train --amrfmt amr --verblist --smatcheval --model
 [path_to_save_model] -iter [iter_number] --feat ./feature/basic_abt_brown_feats
.templates [path_to_train_amr_file] -d [path_to_dev_amr_file] > [log_file] 2>&1
&

   the parser will be trained using basic feature template mentioned in
   our naacl 2015 paper.

     note:
     * since in the preprocessing step we don't include the semantic role
       labeling feature, it wouldn't replicate the optimal results.
     * if you want to retrain the model with different features, you will
       have to get your hands dirty with the feature template file with
       examples defined in temp/ folder and modify the feature functions
       in model.py/newstate.py.

     *    2019 github, inc.
     * [108]terms
     * [109]privacy
     * [110]security
     * [111]status
     * [112]help

     * [113]contact github
     * [114]pricing
     * [115]api
     * [116]training
     * [117]blog
     * [118]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [119]reload to refresh your
   session. you signed out in another tab or window. [120]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/c-amr/camr/commits/master.atom
   3. https://github.com/c-amr/camr#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/c-amr/camr
  32. https://github.com/join
  33. https://github.com/login?return_to=/c-amr/camr
  34. https://github.com/c-amr/camr/watchers
  35. https://github.com/login?return_to=/c-amr/camr
  36. https://github.com/c-amr/camr/stargazers
  37. https://github.com/login?return_to=/c-amr/camr
  38. https://github.com/c-amr/camr/network/members
  39. https://github.com/c-amr
  40. https://github.com/c-amr/camr
  41. https://github.com/c-amr/camr
  42. https://github.com/c-amr/camr/issues
  43. https://github.com/c-amr/camr/pulls
  44. https://github.com/c-amr/camr/projects
  45. https://github.com/c-amr/camr/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/c-amr/camr/commits/master
  48. https://github.com/c-amr/camr/branches
  49. https://github.com/c-amr/camr/releases
  50. https://github.com/c-amr/camr/graphs/contributors
  51. https://github.com/c-amr/camr/blob/master/license.md
  52. https://github.com/c-amr/camr/search?l=python
  53. https://github.com/c-amr/camr/search?l=shell
  54. https://github.com/c-amr/camr/find/master
  55. https://github.com/c-amr/camr/archive/master.zip
  56. https://github.com/login?return_to=https://github.com/c-amr/camr
  57. https://github.com/join?return_to=/c-amr/camr
  58. https://desktop.github.com/
  59. https://desktop.github.com/
  60. https://developer.apple.com/xcode/
  61. https://visualstudio.github.com/
  62. https://github.com/juicechuan
  63. https://github.com/c-amr/camr/commits?author=juicechuan
  64. https://github.com/c-amr/camr/commit/6431b0bc3cd588d8a7a4cc3f4138ff1c331e8a47
  65. https://github.com/c-amr/camr/commit/6431b0bc3cd588d8a7a4cc3f4138ff1c331e8a47
  66. https://github.com/c-amr/camr/tree/6431b0bc3cd588d8a7a4cc3f4138ff1c331e8a47
  67. https://github.com/c-amr/camr/tree/master/common
  68. https://github.com/c-amr/camr/tree/master/feature
  69. https://github.com/c-amr/camr/tree/master/importlib
  70. https://github.com/c-amr/camr/tree/master/lib
  71. https://github.com/c-amr/camr/tree/master/resources
  72. https://github.com/c-amr/camr/commit/6f255f89e5829e6d8c465d2f0ae77318e6a46386
  73. https://github.com/c-amr/camr/tree/master/rules
  74. https://github.com/c-amr/camr/tree/master/scripts
  75. https://github.com/c-amr/camr/tree/master/stanfordnlp
  76. https://github.com/c-amr/camr/tree/master/temp
  77. https://github.com/c-amr/camr/blob/master/.ds_store
  78. https://github.com/c-amr/camr/blob/master/.gitignore
  79. https://github.com/c-amr/camr/blob/master/aligner.py
  80. https://github.com/c-amr/camr/blob/master/license.md
  81. https://github.com/c-amr/camr/blob/master/readme.md
  82. https://github.com/c-amr/camr/commit/6431b0bc3cd588d8a7a4cc3f4138ff1c331e8a47
  83. https://github.com/c-amr/camr/blob/master/amr_parsing.py
  84. https://github.com/c-amr/camr/blob/master/constants.py
  85. https://github.com/c-amr/camr/blob/master/depparser.py
  86. https://github.com/c-amr/camr/blob/master/graphstate.py
  87. https://github.com/c-amr/camr/blob/master/model.py
  88. https://github.com/c-amr/camr/blob/master/newstate.py
  89. https://github.com/c-amr/camr/blob/master/oracle.py
  90. https://github.com/c-amr/camr/blob/master/parser.py
  91. https://github.com/c-amr/camr/blob/master/id88.py
  92. https://github.com/c-amr/camr/blob/master/preprocessing.py
  93. https://github.com/c-amr/camr/commit/12f6e2f9836d8204057c5fa8bf457551d3a7886a
  94. https://github.com/c-amr/camr/blob/master/span.py
  95. http://amr.isi.edu/
  96. http://www.cs.brandeis.edu/~clp/lab/home.html
  97. http://cemantix.org/
  98. http://aclweb.org/anthology/n/n15/n15-1040.pdf
  99. https://aclweb.org/anthology/p/p15/p15-2141.pdf
 100. http://m-mitchell.com/naacl-2016/semeval/pdf/semeval163.pdf
 101. https://github.com/dasmith/stanford-corenlp-python
 102. https://github.com/bllip/bllip-parser
 103. http://nlp.stanford.edu/software/corenlp.shtml
 104. http://www.swig.org/
 105. http://www.cs.brandeis.edu/~cwang24/files/amr-anno-1.0.train.m.tar.gz
 106. http://www.cs.brandeis.edu/~cwang24/files/amr-semeval-all.train.m.tar.gz
 107. https://github.com/jflanigan/jamr
 108. https://github.com/site/terms
 109. https://github.com/site/privacy
 110. https://github.com/security
 111. https://githubstatus.com/
 112. https://help.github.com/
 113. https://github.com/contact
 114. https://github.com/pricing
 115. https://developer.github.com/
 116. https://training.github.com/
 117. https://github.blog/
 118. https://github.com/about
 119. https://github.com/c-amr/camr
 120. https://github.com/c-amr/camr

   hidden links:
 122. https://github.com/
 123. https://github.com/c-amr/camr
 124. https://github.com/c-amr/camr
 125. https://github.com/c-amr/camr
 126. https://help.github.com/articles/which-remote-url-should-i-use
 127. https://github.com/c-amr/camr#camr-a-transition-based-amr-parser
 128. https://github.com/c-amr/camr#updates
 129. https://github.com/c-amr/camr#dependencies
 130. https://github.com/c-amr/camr#parsing-with-pre-trained-model
 131. https://github.com/c-amr/camr#preprocessing
 132. https://github.com/c-amr/camr#parsing
 133. https://github.com/c-amr/camr#retrain-the-parser
 134. https://github.com/c-amr/camr#alignment
 135. https://github.com/c-amr/camr#retrain
 136. https://github.com/
