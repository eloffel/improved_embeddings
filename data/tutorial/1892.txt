   #[1]github [2]recent commits to skip-thoughts:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]3
     * [35]star [36]26
     * [37]fork [38]4

[39]kyunghyuncho/[40]skip-thoughts

   [41]code [42]pull requests 0 [43]projects 0 [44]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [45]sign up
   no description, website, or topics provided.
     * [46]6 commits
     * [47]1 branch
     * [48]0 releases
     * [49]fetching contributors

    1. [50]python 100.0%

   (button) python
   branch: master (button) new pull request
   [51]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/k
   [52]download zip

downloading...

   want to be notified of new releases in kyunghyuncho/skip-thoughts?
   [53]sign in [54]sign up

launching github desktop...

   if nothing happens, [55]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [56]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [57]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [58]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [59]permalink
   type            name            latest commit message commit time
        failed to load latest commit information.
        [60].gitignore
        [61]readme.md
        [62]eval_classification.py
        [63]eval_msrp.py
        [64]eval_rank.py
        [65]eval_sick.py
        [66]eval_trec.py
        [67]skipthoughts.py

readme.md

skip-thoughts

   sent2vec encoder from the paper [68]skip-thought vectors. the training
   code and data will be released at a later date.

dependencies

   this code is written in python. to use it you will need:
     * python 2.7
     * theano 0.7
     * a recent version of [69]numpy and [70]scipy
     * [71]scikit-learn
     * [72]nltk 3
     * [73]keras (for semantic-relatedness experiments only)

getting started

   you will first need to download the model files and id27s.
   the embedding files (utable and btable) are quite large (>2gb) so make
   sure there is enough space available. the encoder vocabulary can be
   found in dictionary.txt.
wget http://www.cs.toronto.edu/~rkiros/models/dictionary.txt
wget http://www.cs.toronto.edu/~rkiros/models/utable.npy
wget http://www.cs.toronto.edu/~rkiros/models/btable.npy
wget http://www.cs.toronto.edu/~rkiros/models/uni_skip.npz
wget http://www.cs.toronto.edu/~rkiros/models/uni_skip.npz.pkl
wget http://www.cs.toronto.edu/~rkiros/models/bi_skip.npz
wget http://www.cs.toronto.edu/~rkiros/models/bi_skip.npz.pkl

   note to toronto users: you should be able to run the code as is from
   any machine, without having to download.

   once these are downloaded, open skipthoughts.py and set the paths to
   the above files (path_to_models and path_to_tables). now you are ready
   to go. make sure to set the theano_flags device if you want to use cpu
   or gpu.

   open up ipython and run the following:
import skipthoughts
model = skipthoughts.load_model()

   now suppose you have a list of sentences x, where each entry is a
   string that you would like to encode. to get vectors, just run the
   following:
vectors = skipthoughts.encode(x)

   vectors is a numpy array with as many rows as the length of x, and each
   row is 4800 dimensional (combine-skip model, from the paper). the first
   2400 dimensions is the uni-skip model, and the last 2400 is the bi-skip
   model. we highly recommend using the combine-skip vectors, as they are
   almost universally the best performing in the paper experiments.

   as the vectors are being computed, it will print some numbers. the code
   works by extracting vectors in batches of sentences that have the same
   length - so the number corresponds to the current length being
   processed. if you want to turn this off, set verbose=false when calling
   encode.

   the rest of the document will describe how to run the experiments from
   the paper. for these, create a folder called 'data' to store each of
   the datasets.

trec question-type classification

   download the dataset from
   [74]http://cogcomp.cs.illinois.edu/data/qa/qc/ (train_5500.label and
   trec_10.label) and put these into the data directory. to obtain the
   test set result using the best chosen hyperparameter from cv, run the
   following:
import eval_trec
eval_trec.evaluate(model, evalcv=false, evaltest=true)

   this should give you a result of 92.2%, as in the paper. alternatively,
   you can set evalcv=true to do 10-fold cross-validation on the training
   set. it should find the same hyperparameter and report the same
   accuracy as above.

image-sentence ranking

   the file eval_rank.py is used for the coco image-sentence ranking
   experiments. to use this, you need to prepare 3 lists: one each for
   training, development and testing. each list should consist of 3
   entries. the first entry is a list of sentences, the second entry is a
   numpy array of image features for the corresponding sentences (e.g.
   oxfordnet/vgg) and the third entry is a numpy array of skip-thought
   vectors for the corresponding sentences.

   to train a model, open eval_rank.py and set the hyperparameters as
   desired in the trainer function. then simply run:
import eval_rank
eval_rank.trainer(train, dev)

   where train and dev are the lists you created. the model will train for
   the maximum numbers of epochs specified and periodically compute ranks
   on the development set. if the ranks improve, it will save the model.
   after training is done, you can evaluate a saved model by calling the
   evaluate function:
eval_rank.evaluate(dev, saveto, evaluate=true)

   this will load a saved model from the 'saveto' path and evaluate on the
   development set (alternatively, past the test list instead to evaluate
   on the test set).

   pre-computed coco features will be made available at a later date, once
   i find a suitable place to host them. note that this ranking code is
   generic, it can be applied with other tasks but you may need to modify
   the evaluation code accordingly.

semantic-relatedness

   download the semeval 2014 task 1 (sick) dataset from
   [75]http://alt.qcri.org/semeval2014/task1/index.php?id=data-and-tools
   (training data, trial data and test data with annotations) and put
   these into the data directory. then run the following:
import eval_sick
eval_sick.evaluate(model, evaltest=true)

   this will train a model using the trial dataset to early stop on
   pearson correlation. after stopping, it will evaluate the result on the
   test set. it should output the following results:
test pearson: 0.858463714763
test spearman: 0.791613731617
test mse: 0.26871638445

   for this experiment, you will need to have keras installed in order for
   it to work.

paraphrase detection

   download the microsoft research paraphrase corpus and put it in the
   data directory. there should be two files, msr_paraphrase_train.txt and
   msr_paraphrase_test.txt. to obtain the test set result using the best
   chosen hyperparameter from cv, run the following:
import eval_msrp
eval_msrp.evaluate(model, evalcv=false, evaltest=true, use_feats=true)

   this will evaluate on the test set using the best chosen hyperparamter
   from cv. i get the following results:
test accuracy: 0.75768115942
test f1: 0.829526916803

   alternatively, turning on evalcv will perform 10-fold cv on the
   training set, and should output the same result after.

binary classification benchmarks

   the file eval_classification.py is used for evaluation on the binary
   classification tasks (rt, cr, subj and mpqa). you can download these
   datasets from [76]http://nlp.stanford.edu/~sidaw/home/projects:nbid166 .
   if you want to use nb features, you will need to get nbid166.py from
   [77]https://github.com/mesnilgr/nbid166 . included is a function for
   nested cross-validation, since it is standard practice to report
   10-fold cv on these datasets. see the nested cv docstring for
   additional details on how to format the datasets and use the code.

a note about the eos (end-of-sentence) token

   by default the eos token is not used when encoding, even though it was
   used in training. we found that this results in slightly better
   performance across all tasks, assuming the sentences end with proper
   puctuation. if this is not the case, we highly recommend using the eos
   token (which can be applied with use_eos=true in the encode function).
   for example, the semantic-relatedness sentences have been stripped of
   periods, so we used the eos token in those experiments. if ever in
   doubt, consider it as an extra hyperparameter.

reference

   if you found this code useful, please cite the following paper:

   ryan kiros, yukun zhu, ruslan salakhutdinov, richard s. zemel, antonio
   torralba, raquel urtasun, and sanja fidler. "skip-thought vectors."
   arxiv preprint arxiv:1506.06726 (2015).
@article{kiros2015skip,
  title={skip-thought vectors},
  author={kiros, ryan and zhu, yukun and salakhutdinov, ruslan and zemel, richar
d s and torralba, antonio and urtasun, raquel and fidler, sanja},
  journal={arxiv preprint arxiv:1506.06726},
  year={2015}
}

license

   (tbd)

     *    2019 github, inc.
     * [78]terms
     * [79]privacy
     * [80]security
     * [81]status
     * [82]help

     * [83]contact github
     * [84]pricing
     * [85]api
     * [86]training
     * [87]blog
     * [88]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [89]reload to refresh your
   session. you signed out in another tab or window. [90]reload to refresh
   your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/kyunghyuncho/skip-thoughts/commits/master.atom
   3. https://github.com/kyunghyuncho/skip-thoughts#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/kyunghyuncho/skip-thoughts
  32. https://github.com/join
  33. https://github.com/login?return_to=/kyunghyuncho/skip-thoughts
  34. https://github.com/kyunghyuncho/skip-thoughts/watchers
  35. https://github.com/login?return_to=/kyunghyuncho/skip-thoughts
  36. https://github.com/kyunghyuncho/skip-thoughts/stargazers
  37. https://github.com/login?return_to=/kyunghyuncho/skip-thoughts
  38. https://github.com/kyunghyuncho/skip-thoughts/network/members
  39. https://github.com/kyunghyuncho
  40. https://github.com/kyunghyuncho/skip-thoughts
  41. https://github.com/kyunghyuncho/skip-thoughts
  42. https://github.com/kyunghyuncho/skip-thoughts/pulls
  43. https://github.com/kyunghyuncho/skip-thoughts/projects
  44. https://github.com/kyunghyuncho/skip-thoughts/pulse
  45. https://github.com/join?source=prompt-code
  46. https://github.com/kyunghyuncho/skip-thoughts/commits/master
  47. https://github.com/kyunghyuncho/skip-thoughts/branches
  48. https://github.com/kyunghyuncho/skip-thoughts/releases
  49. https://github.com/kyunghyuncho/skip-thoughts/graphs/contributors
  50. https://github.com/kyunghyuncho/skip-thoughts/search?l=python
  51. https://github.com/kyunghyuncho/skip-thoughts/find/master
  52. https://github.com/kyunghyuncho/skip-thoughts/archive/master.zip
  53. https://github.com/login?return_to=https://github.com/kyunghyuncho/skip-thoughts
  54. https://github.com/join?return_to=/kyunghyuncho/skip-thoughts
  55. https://desktop.github.com/
  56. https://desktop.github.com/
  57. https://developer.apple.com/xcode/
  58. https://visualstudio.github.com/
  59. https://github.com/kyunghyuncho/skip-thoughts/tree/618db78c36788aaa87b90ab3fcad9518bcb74374
  60. https://github.com/kyunghyuncho/skip-thoughts/blob/master/.gitignore
  61. https://github.com/kyunghyuncho/skip-thoughts/blob/master/readme.md
  62. https://github.com/kyunghyuncho/skip-thoughts/blob/master/eval_classification.py
  63. https://github.com/kyunghyuncho/skip-thoughts/blob/master/eval_msrp.py
  64. https://github.com/kyunghyuncho/skip-thoughts/blob/master/eval_rank.py
  65. https://github.com/kyunghyuncho/skip-thoughts/blob/master/eval_sick.py
  66. https://github.com/kyunghyuncho/skip-thoughts/blob/master/eval_trec.py
  67. https://github.com/kyunghyuncho/skip-thoughts/blob/master/skipthoughts.py
  68. http://arxiv.org/abs/1506.06726
  69. http://www.numpy.org/
  70. http://www.scipy.org/
  71. http://scikit-learn.org/stable/index.html
  72. http://www.nltk.org/
  73. https://github.com/fchollet/keras
  74. http://cogcomp.cs.illinois.edu/data/qa/qc/
  75. http://alt.qcri.org/semeval2014/task1/index.php?id=data-and-tools
  76. http://nlp.stanford.edu/~sidaw/home/projects:nbid166
  77. https://github.com/mesnilgr/nbid166
  78. https://github.com/site/terms
  79. https://github.com/site/privacy
  80. https://github.com/security
  81. https://githubstatus.com/
  82. https://help.github.com/
  83. https://github.com/contact
  84. https://github.com/pricing
  85. https://developer.github.com/
  86. https://training.github.com/
  87. https://github.blog/
  88. https://github.com/about
  89. https://github.com/kyunghyuncho/skip-thoughts
  90. https://github.com/kyunghyuncho/skip-thoughts

   hidden links:
  92. https://github.com/
  93. https://github.com/kyunghyuncho/skip-thoughts
  94. https://github.com/kyunghyuncho/skip-thoughts
  95. https://github.com/kyunghyuncho/skip-thoughts
  96. https://help.github.com/articles/which-remote-url-should-i-use
  97. https://github.com/kyunghyuncho/skip-thoughts#skip-thoughts
  98. https://github.com/kyunghyuncho/skip-thoughts#dependencies
  99. https://github.com/kyunghyuncho/skip-thoughts#getting-started
 100. https://github.com/kyunghyuncho/skip-thoughts#trec-question-type-classification
 101. https://github.com/kyunghyuncho/skip-thoughts#image-sentence-ranking
 102. https://github.com/kyunghyuncho/skip-thoughts#semantic-relatedness
 103. https://github.com/kyunghyuncho/skip-thoughts#paraphrase-detection
 104. https://github.com/kyunghyuncho/skip-thoughts#binary-classification-benchmarks
 105. https://github.com/kyunghyuncho/skip-thoughts#a-note-about-the-eos-end-of-sentence-token
 106. https://github.com/kyunghyuncho/skip-thoughts#reference
 107. https://github.com/kyunghyuncho/skip-thoughts#license
 108. https://github.com/
