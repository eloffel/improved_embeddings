            tinker with a neural network right here in your browser.
                don   t worry, you can   t break it. we promise.

   (button) replay (button) play_arrow pause (button) skip_next
   epoch
   learning rate
   [0.00001]
   activation
   [relu___]
   id173
   [none]
   id173 rate
   [0____]
   problem type
   [classification]

data

   which dataset do you want to use?
   ratio of training to test data:  xx%

   noise:  xx

   batch size:  xx

   (button) regenerate

features

   which properties do you want to feed in?
   click anywhere to edit.
   weight/bias is 0.2 ____________________.
   this is the output from one neuron. hover to see it larger.
   the outputs are mixed with varying weights, shown by the thickness of
   the lines.

   (button) add (button) remove

output

   test loss
   training loss
   colors shows data, neuron and weight values.
   [x] show test data [x] discretize output

   (button) keyboard_arrow_down

um, what is a neural network?

   it   s a technique for building a computer program that learns from data.
   it is based very loosely on how we think the human brain works. first,
   a collection of software    neurons    are created and connected together,
   allowing them to send messages to each other. next, the network is
   asked to solve a problem, which it attempts to do over and over, each
   time strengthening the connections that lead to success and diminishing
   those that lead to failure. for a more detailed introduction to neural
   networks, michael nielsen   s [1]neural networks and deep learning is a
   good place to start. for a more technical overview, try [2]deep
   learning by ian goodfellow, yoshua bengio, and aaron courville.

this is cool, can i repurpose it?

   please do! we   ve open sourced it on [3]github with the hope that it can
   make neural networks a little more accessible and easier to learn.
   you   re free to use it in any way that follows our [4]apache license.
   and if you have any suggestions for additions or changes, please [5]let
   us know.

   we   ve also provided some controls below to enable you tailor the
   playground to a specific topic or lesson. just choose which features
   you   d like to be visible below then save [6]this link, or [7]refresh
   the page.

what do all the colors mean?

   orange and blue are used throughout the visualization in slightly
   different ways, but in general orange shows negative values while blue
   shows positive values.

   the data points (represented by small circles) are initially colored
   orange or blue, which correspond to positive one and negative one.

   in the hidden layers, the lines are colored by the weights of the
   connections between neurons. blue shows a positive weight, which means
   the network is using that output of the neuron as given. an orange line
   shows that the network is assiging a negative weight.

   in the output layer, the dots are colored orange or blue depending on
   their original values. the background color shows what the network is
   predicting for a particular area. the intensity of the color shows how
   confident that prediction is.

what library are you using?

   we wrote a tiny neural network [8]library that meets the demands of
   this educational visualization. for real-world applications, consider
   the [9]tensorflow library.

credits

   this was created by daniel smilkov and shan carter. this is a
   continuation of many people   s previous work     most notably andrej
   karpathy   s [10]convnet.js demo and chris olah   s [11]articles about
   neural networks. many thanks also to d. sculley for help with the
   original idea and to fernanda vi  gas and martin wattenberg and the rest
   of the [12]big picture and [13]google brain teams for feedback and
   guidance.

   [14]source on github

references

   visible links
   1. http://neuralnetworksanddeeplearning.com/index.html
   2. http://www.deeplearningbook.org/
   3. https://github.com/tensorflow/playground
   4. https://github.com/tensorflow/playground/blob/master/license
   5. https://github.com/tensorflow/playground/issues
   6. http://playground.tensorflow.org/
   7. javascript:location.reload();
   8. https://github.com/tensorflow/playground/blob/master/src/nn.ts
   9. https://www.tensorflow.org/
  10. http://cs.stanford.edu/people/karpathy/convnetjs/demo/classify2d.html
  11. http://colah.github.io/posts/2014-03-nn-manifolds-topology/
  12. https://research.google.com/bigpicture/
  13. https://research.google.com/teams/brain/
  14. https://github.com/tensorflow/playground

   hidden links:
  16. https://github.com/tensorflow/playground
  17. https://www.tensorflow.org/
