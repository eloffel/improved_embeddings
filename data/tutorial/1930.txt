   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]insight data
     * [9]about insight
     * [10]data science
     * [11]data engineering
     * [12]health data
     * [13]ai
     * [14]data pm
     * [15]devops
     __________________________________________________________________

   [1*bgpehx4w49flohmvxd-j4a.png]

graph-based machine learning: part i

community detection at scale

   [16]go to the profile of sebastien dery
   [17]sebastien dery (button) blockedunblock (button) followfollowing
   oct 16, 2016

   during the seven-week [18]insight data engineering fellows program
   recent grads and experienced software engineers learn the [19]latest
   open source technologies by building a data platform to handle large,
   real-time datasets.

   [20]sebastien dery (now a machine learning engineer at apple) discusses
   his project on community detection on large datasets.
     __________________________________________________________________

     #tltr: graph-based machine learning is a powerful tool that can
     easily be merged into ongoing efforts. using modularity as an
     optimization goal provides a principled approach to community
     detection. local modularity increment can be tweaked to your own
     dataset to reflect interpretable quantities. this is useful in many
     scenarios, making it a prime candidate for your everyday toolbox.

   many important problems can be represented and studied using
   graphs         social networks, interacting bacterias, brain network modules,
   hierarchical image id91 and many more.

   if we accept graphs as a basic means of structuring and analyzing data
   about the world, we shouldn   t be surprised to see them being widely
   used in machine learning as a powerful tool that can enable intuitive
   properties and power a lot of useful features. graph-based machine
   learning is destined to become a resilient piece of logic, transcending
   a lot of other techniques. see more in this recent [21]blog post from
   google research

   this post explores the tendencies of nodes in a graph to spontaneously
   form clusters of internally dense linkage (hereby termed    community   );
   a remarkable and almost universal property of biological networks. this
   is particularly interesting knowing that a lot of information can be
   extrapolated from a node   s neighbor (e.g. think id126,
   respondent analysis, portfolio id91). so how can we extract this
   kind of information?

   community detection aims to partition a graph into clusters of densely
   connected nodes, with the nodes belonging to different communities
   being only sparsely connected.
   [1*fvgpu47jjkrvkdiyqeodkw.png]
   graph analytics concerns itself with the study of nodes (depicted as
   disks) and their interactions with other nodes (lines). community
   detection aims to classify nodes by their    clique   .

      is it the same as id91?   
     * short answer: yes.
     * long answer: for all intents and purposes, yes it is.

   so why shouldn   t i just use my good old id116? you absolutely should,
   unless your data and requirements don   t work well with that algorithm   s
   assumptions, namely:
    1. k number of clusters
    2. sum of squared error (sse) as the right optimization cost
    3. all variable have the same variance
    4. the variance of the distribution of each attribute is spherical

   [22]for a more in-depth look click here.

   first off, let   s drop this idea of sse and choose a more relevant
   notation of what we   re looking for: the internal versus external
   relationships between nodes of a community. let   s discuss the notion of
   modularity.
   [1*nw85hvwyavrdyxwdt-nxaw.png]
   where: nc is the number of communities; lc number of edges within; dc
   sum of vertex degree; and m the size of the graph (number of edges). we
   will be using this equation as a global metric of goodness during our
   search for an optimal partitioning. in a nutshell: higher score will be
   given to a community configuration offering higher internal versus
   external linkage.

   so all i have to do is optimize this and we   re done, right?

   a major problem in the theoretical formulation of this optimization
   scheme is that we need an all-knowing knowledge of the graph topology
   (geometric properties and spatial relations). this is rather, let   s
   say, [23]intractable. apparently we can   t do any better than to try all
   possible subsets of the vertices and check to see which, if any, form
   communities. the problem of [24]finding the largest clique in a graph
   is thus said to be np-hard.

   however, several algorithms have been proposed over the years to find
   reasonably good partitions in reasonable amounts of time, each with its
   own particular flavor. this post focuses on a specific family of
   algorithms called agglomerative. these algorithms work very simply by
   collecting (or merging) nodes together. this has a lot of advantages
   since it typically only requires a knowledge of first degree neighbors
   and small incremental merging steps, to bring the global solution
   towards stepwise equilibriums.

   you might point out that the modularity metric gives a global
   perspective on the state of the graph and not a local indicator. so,
   how does this translate to the small local increment that i just
   mentioned?

   the basic approach does indeed consists of iteratively merging nodes
   that optimize a local modularity so let   s go ahead and define that as
   well:
   [1*ubyxf2qs9axbzuahs6bqnw.png]
   where    in is the sum of weighted links inside c,    tot sum of weighted
   links incident to nodes in c, ki sum of weighted links incident to node
   i, ki, in sum of weighted links going from i to nodes in c and m a
   normalizing factor as the sum of weighted links for the whole graph.
   (sorry, [25]medium doesn   t allow subscript and superscript)

   this is part of the magic for me as this local optimization function
   can easily be translated to an interpretable metric within the domain
   of your graph. for example,
     * community strength: sum of weighted link within a community.
     * community popularity: sum of weighted link incident to nodes within
       a specific community.
     * node belonging: sum of weighted link from a node to a community.

   there   s also nothing stopping from adding more terms to the previous
   equation that are specific to your dataset. in other words, the
   weighted links can be a function of the type of nodes computed
   on-the-fly (useful if you   re dealing with a multidimensional graph with
   various types of relationships and nodes).
   [1*23iej6cf9fyd-alfn-iwfq.png]
   example of converging iterations before the compress phase

   now that we   re all set with our optimization function and local cost,
   the typical agglomerative strategy consists of two iterative phases
   (transfer and compress). assuming a weighted network of n nodes, we
   begin by assigning a different community to each node of the network.
    1. transfer: for each node i, consider its neighbors j and evaluate
       the gain in modularity by swapping c_i for c_j. the greedy process
       transfers the node into the neighboring community, maximizing the
       gain in modularity (assuming the gain is positive). if no positive
       gain is possible, the node i stays in its original community. this
       process is applied to all nodes until no individual move can
       improve the modularity (i.e. a local maxima of modularity is
       attained         a state of equilibrium).
    2. compress: building a new network whose nodes are the communities
       found during the first phase; a process termed compression (see
       figure below). to do so, edge weights between communities are
       computed as the sum of the internal edges between nodes in the
       corresponding two communities.

   [1*np0ipbz79vx9h86duixfna.png]
   agglomerative process: phase one converges to a local equilibrium of
   local modularity. phase two consist in compressing the graph for the
   next iteration, thus reducing the number of nodes to consider and
   incidentally computation time as well.

   now the tricky part: as this is a [26]greedy algorithm, you   ll have to
   define a stopping criteria based on your case scenario and the data at
   hand.

   how to define this criteria? it can be a lot of things: a maximum
   number of iterations, a minimum modularity gain during the transfer
   phase, or any other relevant piece of information related to your data
   that would inform you that it needs to stop.

   still not sure when to stop? just make sure you save every intermediate
   step of the iterative process somewhere, let the optimization run until
   there   s only one node left in your graph, and then look back at your
   data! the interesting part is that by keeping track of each step, you
   also profit from a hierarchical view of your communities which can be
   further explored and leveraged.

   in a [27]follow up post, i will discuss how we can achieve this on a
   distributed system using spark graphx, part of my project while at the
   [28]insight data engineering fellows program.
   [29][0803.0476] fast unfolding of communities in large networks
   abstract: we propose a simple method to extract the community structure
   of large networks. our method is a heuristic   arxiv.org
     __________________________________________________________________

   want to learn spark, machine learning with graphs, and other big data
   tools from top data engineers in silicon valley or new york? the
   [30]insight data engineering fellows program is a free 7-week
   professional training where you can build cutting edge big data
   platforms and transition to a career in data engineering at top teams
   like facebook, uber, slack and squarespace.

   [31]learn more about the program and [32]apply today.

     * [33]big data
     * [34]data science
     * [35]machine learning
     * [36]social network analysis
     * [37]insight data engineering

   (button)
   (button)
   (button) 106 claps
   (button) (button) (button) 1 (button) (button)

     (button) blockedunblock (button) followfollowing
   [38]go to the profile of sebastien dery

[39]sebastien dery

   master of layers, protector of the graph, wielder of knowledge.
   #openscience #nobullshit

     (button) follow
   [40]insight data

[41]insight data

   insight fellows program - your bridge to a thriving career

     * (button)
       (button) 106
     * (button)
     *
     *

   [42]insight data
   never miss a story from insight data, when you sign up for medium.
   [43]learn more
   never miss a story from insight data
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://blog.insightdatascience.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/6e2bd8926a0
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://blog.insightdatascience.com/graph-based-machine-learning-6e2bd8926a0&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://blog.insightdatascience.com/graph-based-machine-learning-6e2bd8926a0&source=--------------------------nav_reg&operation=register
   8. https://blog.insightdatascience.com/?source=logo-lo_n0bkhzvdaxok---d02e65779d7b
   9. https://blog.insightdatascience.com/tagged/about-insight
  10. https://blog.insightdatascience.com/tagged/insight-data-science
  11. https://blog.insightdatascience.com/tagged/insight-data-engineering
  12. https://blog.insightdatascience.com/tagged/insight-health-data
  13. https://blog.insightdatascience.com/tagged/insight-ai
  14. https://blog.insightdatascience.com/tagged/insight-data-pm
  15. https://blog.insightdatascience.com/tagged/insight-devops
  16. https://blog.insightdatascience.com/@sderymail?source=post_header_lockup
  17. https://blog.insightdatascience.com/@sderymail
  18. http://insightdataengineering.com/apply?utm_source=id91parti&utm_campaign=17a&utm_medium=blog
  19. http://insightdataengineering.com/blog/pipeline_map.html
  20. https://ca.linkedin.com/in/sebastiendery
  21. https://research.googleblog.com/2016/10/graph-powered-machine-learning-at-google.html
  22. http://varianceexplained.org/r/kmeans-free-lunch/
  23. https://en.wikipedia.org/wiki/computational_complexity_theory
  24. https://jeremykun.com/2014/05/19/community-detection-in-graphs-a-casual-tour/
  25. https://medium.com/@medium
  26. https://en.wikipedia.org/wiki/greedy_algorithm
  27. https://medium.com/@sderymail/graph-based-machine-learning-part-2-f7096c801bec#.2eknj6ivq
  28. http://insightdataengineering.com/?utm_source=id91parti&utm_campaign=17a&utm_medium=blog
  29. https://arxiv.org/abs/0803.0476
  30. http://insightdataengineering.com/?utm_source=id91parti&utm_campaign=17a&utm_medium=blog
  31. http://insightdataengineering.com/?utm_source=id91parti&utm_campaign=17a&utm_medium=blog
  32. http://insightdataengineering.com/apply?utm_source=id91parti&utm_campaign=17a&utm_medium=blog
  33. https://blog.insightdatascience.com/tagged/big-data?source=post
  34. https://blog.insightdatascience.com/tagged/data-science?source=post
  35. https://blog.insightdatascience.com/tagged/machine-learning?source=post
  36. https://blog.insightdatascience.com/tagged/social-network-analysis?source=post
  37. https://blog.insightdatascience.com/tagged/insight-data-engineering?source=post
  38. https://blog.insightdatascience.com/@sderymail?source=footer_card
  39. https://blog.insightdatascience.com/@sderymail
  40. https://blog.insightdatascience.com/?source=footer_card
  41. https://blog.insightdatascience.com/?source=footer_card
  42. https://blog.insightdatascience.com/
  43. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  45. https://arxiv.org/abs/0803.0476
  46. https://medium.com/p/6e2bd8926a0/share/twitter
  47. https://medium.com/p/6e2bd8926a0/share/facebook
  48. https://medium.com/p/6e2bd8926a0/share/twitter
  49. https://medium.com/p/6e2bd8926a0/share/facebook
