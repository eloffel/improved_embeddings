   #[1]the data science lab    feed [2]the data science lab    comments feed
   [3]the data science lab    id91 with id116 in python comments
   feed [4]a peek at the orcid registry public data file [5]on moocs and
   the audacious [6]alternate [7]alternate [8]the data science lab
   [9]wordpress.com

[10]the data science lab

   experiments with data

     * [11]about
     * [12]contact
     * [13]archives

   december 12, 2013

id91 with id116 in python

   a very common task in data analysis is that of grouping a set of
   objects into subsets such that all elements within a group are more
   similar among them than they are to the others. the practical
   applications of such a procedure are many: given a medical image of a
   group of cells, a id91 algorithm could aid in [14]identifying the
   centers of the cells; looking at the gps data of a user   s mobile
   device, their more frequently visited locations within a certain radius
   can be revealed; for any set of [15]unlabeled observations, id91
   helps establish the existence of some sort of structure that might
   indicate that the data is separable.

mathematical background

   the id116 algorithm takes a dataset x of n points as input, together
   with a parameter k specifying how many clusters to create. the output
   is a set of k cluster centroids and a labeling of x that assigns each
   of the points in x to a unique cluster. all points within a cluster are
   closer in distance to their centroid than they are to any other
   centroid.

   the mathematical condition for the k clusters c_k and the k centroids
   \mu_k can be expressed as:

   minimize \displaystyle \sum_{k=1}^k \sum_{\mathrm{x}_n \in c_k}
   ||\mathrm{x}_n - \mu_k ||^2 with respect to \displaystyle c_k, \mu_k .

lloyd   s algorithm

   finding the solution is unfortunately [16]np hard. nevertheless, an
   iterative method known as lloyd   s algorithm exists that converges
   (albeit to a local minimum) in few steps. the procedure alternates
   between two operations. (1) once a set of centroids \mu_k is available,
   the clusters are updated to contain the points closest in distance to
   each centroid. (2) given a set of clusters, the centroids are
   recalculated as the means of all points belonging to a cluster.

   \displaystyle c_k = \{\mathrm{x}_n : ||\mathrm{x}_n - \mu_k|| \leq
   \mathrm{\,\,all\,\,} ||\mathrm{x}_n - \mu_l||\}\qquad(1)

   \displaystyle \mu_k = \frac{1}{c_k}\sum_{\mathrm{x}_n \in
   c_k}\mathrm{x}_n\qquad(2)

   the two-step procedure continues until the assignments of clusters and
   centroids no longer change. as already mentioned, the convergence is
   guaranteed but the solution might be a local minimum. in practice, the
   algorithm is run multiple times and averaged. for the starting set of
   centroids, several methods can be employed, for instance random
   assignation.

   below is a simple implementation of lloyd   s algorithm for performing
   id116 id91 in python:
import numpy as np

def cluster_points(x, mu):
    clusters  = {}
    for x in x:
        bestmukey = min([(i[0], np.linalg.norm(x-mu[i[0]])) \
                    for i in enumerate(mu)], key=lambda t:t[1])[0]
        try:
            clusters[bestmukey].append(x)
        except keyerror:
            clusters[bestmukey] = [x]
    return clusters

def reevaluate_centers(mu, clusters):
    newmu = []
    keys = sorted(clusters.keys())
    for k in keys:
        newmu.append(np.mean(clusters[k], axis = 0))
    return newmu

def has_converged(mu, oldmu):
    return (set([tuple(a) for a in mu]) == set([tuple(a) for a in oldmu])

def find_centers(x, k):
    # initialize to k random centers
    oldmu = random.sample(x, k)
    mu = random.sample(x, k)
    while not has_converged(mu, oldmu):
        oldmu = mu
        # assign all points in x to clusters
        clusters = cluster_points(x, mu)
        # reevaluate centers
        mu = reevaluate_centers(oldmu, clusters)
    return(mu, clusters)

id91 in action

   let   s see the algorithm in action! for an ensemble of 100 random points
   on the plane, we set the id116 function to find 7 clusters. the code
   converges in 7 iterations after initializing with random centers. in
   the following plots, dots correspond to the target data points x and
   stars represent the centroids \mu_k of the clusters. each cluster is
   distinguished by a different color.

   [17]p_n100_k7

   the initial configuration of points for the algorithm is created as
   follows:
import random

def init_board(n):
    x = np.array([(random.uniform(-1, 1), random.uniform(-1, 1)) for i in range(
n)])
    return x

   for a configuration with twice as many points and a target of 3
   clusters, often the algorithm needs more iterations to converge.

   [18]p_n200_k3

   obviously, an ensemble of randomly generated points does not possess a
   natural cluster-like structure. to make things slightly more tricky, we
   want to modify the function that generates our initial data points to
   output a more interesting structure. the following routine constructs a
   specified number of gaussian distributed clusters with random
   variances:
def init_board_gauss(n, k):
    n = float(n)/k
    x = []
    for i in range(k):
        c = (random.uniform(-1, 1), random.uniform(-1, 1))
        s = random.uniform(0.05,0.5)
        x = []
        while len(x) < n:
            a, b = np.array([np.random.normal(c[0], s), np.random.normal(c[1], s
)])
            # continue drawing points from the distribution in the range [-1,1]
            if abs(a) < 1 and abs(b) < 1:
                x.append([a,b])
        x.extend(x)
    x = np.array(x)[:n]
    return x

   let us look at a data set constructed as x = init_board_gauss(200,3): 7
   iterations are needed to find the 3 centroids.

   [19]p_n200_k3_g

   if the target distribution is disjointedly clustered and only one
   instantiation of lloyd   s algorithm is used, the danger exists that the
   local minimum reached is not the optimal solution. this is shown in the
   example below, where initial data using very peaked gaussians is
   constructed:

   [20]p_n100_k9_g

   the yellow and black stars serve two different clusters each, while the
   orange, red and blue centroids are cramped within one unique blob due
   to an unfortunate random initialization. for this type of cases, a
   cleverer election of initial clusters should help.

   to finalize our [21]table-top experiment on id116 id91, we
   might want to take a look at what happens when the original data space
   is densely populated:

   [22]p_n2000_k15_

   the id116 algorithm induces a partition of the observations
   corresponding to a [23]voronoi tessellation generated by the k
   centroids. and it is certainly very pretty!

table-top data experiment take-away message

   lloyd   s two-step implementation of the id116 algorithm allows to
   cluster data points into groups represented by a centroid. this
   technique is employed in many facets of machine learning, from
   unsupervised learning algorithms to id84 problems.
   the general id91 problem is np hard, but the iterative procedure
   converges always, albeit to a local minimum. proper initialization of
   the centroids is important. additionally, this algorithm does not
   supply information as to which k for the id116 is optimal; that has
   to be found out by alternative methods.

   update: we explore the gap statistic as a method to determine the
   optimal k for id91 in this post: [24]finding the k in id116
   id91 and the f(k) method: [25]selection of k in id116
   id91, reloaded.

   update: for a proper initialization of the centroids at the start of
   the id116 algorithm, we implement the [26]improved id116++ seeding
   procedure.
   advertisements

share!

     * [27]twitter
     * [28]facebook
     *

like this:

   like loading...

related

   written by [29]datasciencelab posted in [30]experiments tagged with
   [31]id91, [32]id116, [33]lloyd's algorithm, [34]python,
   [35]unsupervised learning

87 comments

   [36]older comments
    1.
   [37]june 23, 2017 - 1:44 am [38]heating and cooling
       i have been browsing online for over 4 hours today, but i haven   t
       found any interesting article like yours. in my opinion, if all
       site owners and bloggers write good articles like what you have
       done, the web will be a lot more useful than ever before.
       [39]reply
    2.
   [40]june 27, 2017 - 10:28 am the man
       finally a blog on id116 with python without a    one-liner    scikit
       approach.
       [41]reply
    3.
   [42]july 10, 2017 - 11:12 pm [43]david r dewhurst
       just fyi: your objective function uses ||y     f(x)||, but that   s the
       norm, not the squared norm. so actually you   re implementing lloyd   s
       for k-medians! it should be ||y     f(x)||^2. great work anyway.
       [44]reply
    4.
   [45]july 14, 2017 - 1:30 am anonymous
       how to put these pictures out   
       [46]reply
    5. july 28, 2017 - 4:31 am pingback: [47]baby steps     ground zero
    6.
   [48]august 6, 2017 - 10:45 am ahmed
       excellent article. this is the first page that i come across not
       using sklearn.
       [49]reply
    7.
   [50]august 31, 2017 - 10:43 pm [51]jesse grillo
       i check your page every few days. a excellent article. you have the
       best ideas.
       [52]reply
    8.
   [53]september 27, 2017 - 3:30 pm anonymous
       may i ask how did you get this animation effect of those points?
       thanks a lot!
       [54]reply
    9.
   [55]november 7, 2017 - 5:00 am [56]m. wilsonsoftware consultant
       awesome issues here. i am very glad to look your post.
       thank you so much and i am looking forward
       to touch you. will you please drop me a mail?
       [57]reply
   10.
   [58]december 9, 2017 - 2:28 pm daniel
       first, i   d like to congratulate for the post, it   s very didactic!
       but, i   m having trouble in execute your lloyd   s algorithm,
       specifically in the find_centers function. i tried in python 3.6
       (2017) and in 2.7 (2015) and both had gave me the same error:
       def find_centers(x, k):
       ^
       syntaxerror: invalid syntax
       i   ve just copied the code and execute the program to see if it
       works. if anyone can help me on this problem i   ll be pleased.
       [59]reply
          +
        [60]january 31, 2018 - 4:30 am anonymous
            just missing a bracket in the previous statement.
            [61]reply
               o
             [62]march 15, 2019 - 3:21 am anonymous
                 where?thanks a lot
          +
        [63]march 15, 2019 - 3:20 am anonymous
            have you solved your problem yet?i meet the same problem
            [64]reply
   11. december 10, 2017 - 6:59 pm pingback: [65]coding resources, or:
       things i wish i   d known when i started | sarahhewittsblog
   12.
   [66]december 13, 2017 - 3:28 pm nabil
       there is an issue that i found: that code return either the k
       clusters or less than k while we want exactly k clusters. i think
       the problem is in cluster_points function.
       [67]reply
   13. december 15, 2017 - 2:34 pm pingback: [68]machine learning with
       tensorflow for beginners     how to install, run and understand basic
       machine learning demos     knowm.org
   14.
   [69]january 16, 2018 - 4:22 pm [70]drinkadvisor app
       i discovered your page on my website feed. you have made my day!
       you already know this but you are someones reason to smile.
       [71]reply
   15.
   [72]january 23, 2018 - 9:06 am [73]elden deneal
       i am realy extremely pleased to visit your blog. now i am found
       which i actually want.
       [74]reply
   16.
   [75]february 7, 2018 - 1:23 pm anonymous
       i am very new to python and id116. can you please show me the
       code to visualize the results. thanks
       [76]reply
   17.
   [77]march 12, 2018 - 12:44 pm anonymous
                                                                                  
       typeerror traceback (most recent call last)
       in ()
       2 k=3
       3 x = init_board_gauss(n,k)
          -> 4 find_centers(x,k)
       in find_centers(x, k)
       2 # initialize to k random centers
       3 oldmu = random.sample(list(x), k)
          -> 4 mu = random.sample(x, k)
       5 while not has_converged(mu, oldmu):
       6 oldmu = mu
       ~\appdata\local\continuum\anaconda3\lib\random.py in sample(self,
       population, k)
       312 population = tuple(population)
       313 if not isinstance(population, _sequence):
          > 314 raise typeerror(   population must be a sequence or set. for
       dicts, use list(d).   )
       315 randbelow = self._randbelow
       316 n = len(population)
       typeerror: population must be a sequence or set. for dicts, use
       list(d).
       hi guys!
       i am gettig this error when i tried to run this code on python3
       environment. can anyone help me sovle this error?
       [78]reply
          +
        [79]april 4, 2018 - 6:13 pm esteban beltr  n
            the find_centers function error is due to missing a
            parenthesis at the end of the line -> return (set([tuple(a)
            for a in mu]) == set([tuple(a) for a in oldmu])
            [80]reply
   18.
   [81]april 4, 2018 - 6:13 pm esteban beltr  n
       the find_centers function error is due to missing a parenthesis at
       the end of the line -> return (set([tuple(a) for a in mu]) ==
       set([tuple(a) for a in oldmu])
       [82]reply
   19. july 4, 2018 - 5:40 pm pingback: [83]python                         |             
   20.
   [84]november 27, 2018 - 3:09 pm [85]tumatemtica
       buenas. la secci  n para cluster_point use (x,3) con x un conjunto
       de datos aleatorios y me lanza:
       typeerror traceback (most recent call last)
       in ()
          -> 1 cluster_points(x,3)
       in cluster_points(x, mu)
       2 clusters = {}
       3 for x in x:
          -> 4 bestmukey = min([(i[0], np.linalg.norm(x-mu[i[0]])) for i in
       enumerate(mu)], key=lambda t:t[1])[0]
       5 try:
       6 clusters[bestmukey].append(x)
       typeerror:    int    object is not iterable
       me pueden explicar si uso parametros errones y cuales debo utilizar
       [86]reply
   21. january 29, 2019 - 9:31 am pingback: [87]kmeans         python          
                      jquery                        vue      
   22.
   [88]february 3, 2019 - 7:59 pm lemuel nothling
       hello
       seo link building is a process that requires a lot of time fo
       wordpress.com
       if you aren   t using seo software then you will know the amount of
       work load involved in creating accounts, confirming emails and
       submitting your contents to thousands of websites in proper time
       and completely automated.
       with this software the link submission process will be the easiest
       task and completely automated, you will be able to build unlimited
       number of links and increase traffic to your websites which will
       lead to a higher number of customers and much more sales for you.
       with the best user interface ever, you just need to have simple
       software knowledge and you will easily be able to make your own seo
       link building campaigns.
       the best seo software you will ever own, and we can confidently say
       that there is no other software on the market that can compete with
       such intelligent and fully automatic features.
       the friendly user interface, smart tools and the simplicity of the
       tasks are making this software the best tool on the market.
       if you   re interested, contact me ==> [89]seosubmitter@mail.com
       regards,
       lemuel
       [90]reply

   [91]older comments

post a comment [92]cancel reply

   enter your comment here...

   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________

   fill in your details below or click an icon to log in:
     *
     *
     *

       iframe: [93]googleplus-sign-in

     *
     *

   [94]gravatar
   email (address never made public)
   ____________________
   name
   ____________________
   website
   ____________________
   wordpress.com logo

   you are commenting using your wordpress.com account. ( [95]log out /
   [96]change )
   google photo

   you are commenting using your google account. ( [97]log out /
   [98]change )
   twitter picture

   you are commenting using your twitter account. ( [99]log out /
   [100]change )
   facebook photo

   you are commenting using your facebook account. ( [101]log out /
   [102]change )
   [103]cancel

   connecting to %s

   [ ] notify me of new comments via email.

   [ ] notify me of new posts via email.

   post comment

   [104]a peek at the orcid registry public data file
   [105]on moocs and the audacious

the data science lab

   this blog is a collection of articles on data science topics, machine
   learning, visualization and fun experiments with data.

recent posts

     * [106]2014 in review
     * [107]selection of k in id116 id91, reloaded
     * [108]improved seeding for id91 with id116++
     * [109]machine learning classics: the id88
     * [110]list comprehension in python

data science lab tweets

   [111]my tweets

data science lab tags

   [112]animations [113]authorship attribution [114]automata
   [115]id91 [116]coursera [117]courses [118]data exploration
   [119]edx [120]game of life [121]gap statistic [122]general
   [123]initialization [124]id116 [125]linear classifier [126]list
   comprehension [127]lloyd's algorithm [128]machine learning
   [129]matplotlib [130]mooc [131]pandas [132]id88 [133]plotting
   [134]python [135]supervised learning [136]udacity [137]unsupervised
   learning [138]video [139]visualization

   [140]follow the data science lab on wordpress.com

rss

     * [141]rss - posts

   [142]blog at wordpress.com.


   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   post to
   [143]cancel reblog post

   close and accept privacy & cookies: this site uses cookies. by
   continuing to use this website, you agree to their use.
   to find out more, including how to control cookies, see here:
   [144]cookie policy

   iframe: [145]likes-master

   %d bloggers like this:

references

   visible links
   1. https://datasciencelab.wordpress.com/feed/
   2. https://datasciencelab.wordpress.com/comments/feed/
   3. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/feed/
   4. https://datasciencelab.wordpress.com/2013/12/05/a-peek-at-the-orcid-registry-public-data-file/
   5. https://datasciencelab.wordpress.com/2013/12/17/on-moocs-and-the-audacious/
   6. https://public-api.wordpress.com/oembed/?format=json&url=https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/&for=wpcom-auto-discovery
   7. https://public-api.wordpress.com/oembed/?format=xml&url=https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/&for=wpcom-auto-discovery
   8. https://datasciencelab.wordpress.com/osd.xml
   9. https://s1.wp.com/opensearch.xml
  10. https://datasciencelab.wordpress.com/
  11. https://datasciencelab.wordpress.com/about/
  12. https://datasciencelab.wordpress.com/contact/
  13. https://datasciencelab.wordpress.com/archives/
  14. http://www.academia.edu/2496077/automatic_segmentation_of_skin_cancer_images_using_adaptive_color_id91
  15. http://en.wikipedia.org/wiki/unsupervised_learning
  16. http://en.wikipedia.org/wiki/np-hard
  17. https://datasciencelab.files.wordpress.com/2013/12/p_n100_k7.gif
  18. https://datasciencelab.files.wordpress.com/2013/12/p_n200_k3.gif
  19. https://datasciencelab.files.wordpress.com/2013/12/p_n200_k3_g.gif
  20. https://datasciencelab.files.wordpress.com/2013/12/p_n100_k9_g.gif
  21. https://datasciencelab.wordpress.com/category/experiments/
  22. https://datasciencelab.files.wordpress.com/2013/12/p_n2000_k15_.gif
  23. http://en.wikipedia.org/wiki/voronoi_diagram
  24. https://datasciencelab.wordpress.com/2013/12/27/finding-the-k-in-id116-id91/
  25. https://datasciencelab.wordpress.com/2014/01/21/selection-of-k-in-id116-id91-reloaded/
  26. https://datasciencelab.wordpress.com/2014/01/15/improved-seeding-for-id91-with-id116/
  27. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?share=twitter
  28. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?share=facebook
  29. https://datasciencelab.wordpress.com/author/datasciencelab/
  30. https://datasciencelab.wordpress.com/category/experiments/
  31. https://datasciencelab.wordpress.com/tag/id91/
  32. https://datasciencelab.wordpress.com/tag/id116/
  33. https://datasciencelab.wordpress.com/tag/lloyds-algorithm/
  34. https://datasciencelab.wordpress.com/tag/python/
  35. https://datasciencelab.wordpress.com/tag/unsupervised-learning/
  36. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-1/#comments
  37. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-776
  38. http://y.saudhosting.com/elbourneheatingandcooling63001
  39. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?replytocom=776#respond
  40. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-783
  41. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?replytocom=783#respond
  42. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-794
  43. https://daviddewhurst.github.io/
  44. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?replytocom=794#respond
  45. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-799
  46. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?replytocom=799#respond
  47. https://tradingeric.wordpress.com/2017/07/28/baby-steps/
  48. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-831
  49. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?replytocom=831#respond
  50. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-849
  51. http://jessecciuxwrc.livejournal.com/profile
  52. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?replytocom=849#respond
  53. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-893
  54. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?replytocom=893#respond
  55. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-940
  56. http://www.amyusan.com/
  57. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?replytocom=940#respond
  58. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-959
  59. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?replytocom=959#respond
  60. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-1011
  61. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?replytocom=1011#respond
  62. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-1964
  63. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-1963
  64. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?replytocom=1963#respond
  65. https://sarahhewittsblog.wordpress.com/2017/12/10/coding-resources-or-things-i-wish-id-known-when-i-started/
  66. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-964
  67. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?replytocom=964#respond
  68. https://knowm.org/machine-learning-with-tensorflow-for-beginners-how-to-install-run-and-understand-basic-machine-learning-demos/
  69. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-1002
  70. https://appdg8eqfrfgm.tumblr.com/
  71. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?replytocom=1002#respond
  72. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-1005
  73. http://www.magistamagasin.com/
  74. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?replytocom=1005#respond
  75. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-1016
  76. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?replytocom=1016#respond
  77. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-1069
  78. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?replytocom=1069#respond
  79. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-1097
  80. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?replytocom=1097#respond
  81. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-1096
  82. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?replytocom=1096#respond
  83. https://codertw.com/            /359686/
  84. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-1702
  85. http://gravatar.com/tumatemtica
  86. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?replytocom=1702#respond
  87. https://www.jqhtml.com/29485.html
  88. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-2/#comment-1933
  89. mailto:seosubmitter@mail.com
  90. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/?replytocom=1933#respond
  91. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/comment-page-1/#comments
  92. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/#respond
  93. https://public-api.wordpress.com/connect/?googleplus-sign-in=https://datasciencelab.wordpress.com&color_scheme=light
  94. https://gravatar.com/site/signup/
  95. javascript:highlandercomments.doexternallogout( 'wordpress' );
  96. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/
  97. javascript:highlandercomments.doexternallogout( 'googleplus' );
  98. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/
  99. javascript:highlandercomments.doexternallogout( 'twitter' );
 100. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/
 101. javascript:highlandercomments.doexternallogout( 'facebook' );
 102. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/
 103. javascript:highlandercomments.cancelexternalwindow();
 104. https://datasciencelab.wordpress.com/2013/12/05/a-peek-at-the-orcid-registry-public-data-file/
 105. https://datasciencelab.wordpress.com/2013/12/17/on-moocs-and-the-audacious/
 106. https://datasciencelab.wordpress.com/2014/12/31/2014-in-review/
 107. https://datasciencelab.wordpress.com/2014/01/21/selection-of-k-in-id116-id91-reloaded/
 108. https://datasciencelab.wordpress.com/2014/01/15/improved-seeding-for-id91-with-id116/
 109. https://datasciencelab.wordpress.com/2014/01/10/machine-learning-classics-the-id88/
 110. https://datasciencelab.wordpress.com/2014/01/08/list-comprehension-in-python/
 111. https://twitter.com/408172415013761025
 112. https://datasciencelab.wordpress.com/tag/animations/
 113. https://datasciencelab.wordpress.com/tag/authorship-attribution/
 114. https://datasciencelab.wordpress.com/tag/automata/
 115. https://datasciencelab.wordpress.com/tag/id91/
 116. https://datasciencelab.wordpress.com/tag/coursera/
 117. https://datasciencelab.wordpress.com/tag/courses/
 118. https://datasciencelab.wordpress.com/tag/data-exploration/
 119. https://datasciencelab.wordpress.com/tag/edx/
 120. https://datasciencelab.wordpress.com/tag/game-of-life/
 121. https://datasciencelab.wordpress.com/tag/gap-statistic/
 122. https://datasciencelab.wordpress.com/tag/general/
 123. https://datasciencelab.wordpress.com/tag/initialization/
 124. https://datasciencelab.wordpress.com/tag/id116/
 125. https://datasciencelab.wordpress.com/tag/linear-classifier/
 126. https://datasciencelab.wordpress.com/tag/list-comprehension/
 127. https://datasciencelab.wordpress.com/tag/lloyds-algorithm/
 128. https://datasciencelab.wordpress.com/tag/machine-learning/
 129. https://datasciencelab.wordpress.com/tag/matplotlib/
 130. https://datasciencelab.wordpress.com/tag/mooc/
 131. https://datasciencelab.wordpress.com/tag/pandas/
 132. https://datasciencelab.wordpress.com/tag/id88/
 133. https://datasciencelab.wordpress.com/tag/plotting/
 134. https://datasciencelab.wordpress.com/tag/python/
 135. https://datasciencelab.wordpress.com/tag/supervised-learning/
 136. https://datasciencelab.wordpress.com/tag/udacity/
 137. https://datasciencelab.wordpress.com/tag/unsupervised-learning/
 138. https://datasciencelab.wordpress.com/tag/video/
 139. https://datasciencelab.wordpress.com/tag/visualization/
 140. https://datasciencelab.wordpress.com/
 141. https://datasciencelab.wordpress.com/feed/
 142. https://wordpress.com/?ref=footer_blog
 143. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/
 144. https://automattic.com/cookies
 145. https://widgets.wp.com/likes/master.html?ver=20190321#ver=20190321

   hidden links:
 147. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/#comment-form-guest
 148. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/#comment-form-load-service:wordpress.com
 149. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/#comment-form-load-service:twitter
 150. https://datasciencelab.wordpress.com/2013/12/12/id91-with-id116-in-python/#comment-form-load-service:facebook
