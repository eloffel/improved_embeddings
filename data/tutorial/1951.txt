   #[1]the glowing python - atom [2]the glowing python - rss [3]the
   glowing python - atom

   [4]the glowing python

   a collection of sloppy snippets for scientific computing and data
   visualization in python.

thursday, april 5, 2012

k- means id91 with scipy

   id116 id91 is a method for finding clusters and cluster centers
   in a set of unlabeled data. intuitively, we might think of a cluster as
   comprising a group of data points whose inter-point distances are small
   compared with the distances to points outside of the cluster. given an
   initial set of k centers, the id116 algorithm alternates the two
   steps:
     * for each center we identify the subset of training points (its
       cluster) that is closer to it than any other center;
     * the means of each feature for the data points in each cluster are
       computed, and this mean vector becomes the new center for that
       cluster.

   these two steps are iterated until the centers no longer move or the
   assignments no longer change. then, a new point x can be assigned to
   the cluster of the closest prototype.
   the scipy library provides a good implementation of the id116
   algorithm. let's see how to use it:
from pylab import plot,show
from numpy import vstack,array
from numpy.random import rand
from scipy.cluster.vq import kmeans,vq

# data generation
data = vstack((rand(150,2) + array([.5,.5]),rand(150,2)))

# computing id116 with k = 2 (2 clusters)
centroids,_ = kmeans(data,2)
# assign each sample to a cluster
idx,_ = vq(data,centroids)

# some plotting using numpy's logical indexing
plot(data[idx==0,0],data[idx==0,1],'ob',
     data[idx==1,0],data[idx==1,1],'or')
plot(centroids[:,0],centroids[:,1],'sg',markersize=8)
show()

   the result should be as follows:
   [5][kmeans.png]
   in this case we splitted the data in 2 clusters, the blue points have
   been assigned to the first and the red ones to the second. the squares
   are the centers of the clusters.
   let's see try to split the data in 3 clusters:
# now with k = 3 (3 clusters)
centroids,_ = kmeans(data,3)
idx,_ = vq(data,centroids)

plot(data[idx==0,0],data[idx==0,1],'ob',
     data[idx==1,0],data[idx==1,1],'or',
     data[idx==2,0],data[idx==2,1],'og') # third cluster points
plot(centroids[:,0],centroids[:,1],'sm',markersize=8)
show()

   this time the the result is as follows:
   [6][kmeans3.png]
   [7]email this[8]blogthis![9]share to twitter[10]share to
   facebook[11]share to pinterest
   labels: [12]ai, [13]id91, [14]data mining, [15]scipy,
   [16]statistics

59 comments:

    1. emi[17]december 14, 2012 at 2:10 am
       your blog is awesome and has helped me discover all kinds of useful
       tidbits in scipy and numpy. thank you!
       reply[18]delete
       replies
            reply
    2. [19]alexandre guerra[20]march 15, 2013 at 12:42 pm
       thanks for the post. i have used kmeans to identify clusters
       (rings) in a matrix of sea surface height. the objective is to
       identify the rings and to determine their centroids. but kmeans
       requires as input parameter the number of clusters to be sought.
       that is a problem because i usually do not know previously how many
       rings will be present in the area. so, i was wondering how to avoid
       this kmeans limitation. do you have any idea?
       regards,
       alex
       reply[21]delete
       replies
         1. [22]justglowing[23]march 15, 2013 at 1:03 pm
            hello alexandre,
            how to find a good choice for k is a studied problem in
            machine learning. i suggest you to read this paper:
            http://books.nips.cc/papers/files/nips16/nips2003_aa36.pdf
            thanks for your comment!
            [24]delete
            replies
                 reply
            reply
    3. anonymous[25]may 4, 2013 at 4:20 pm
       from where did you get the module "from scipy.cluster.vq import
       kmeans,vq"? where can i get it?
       this stuff looks great, btw.
       reply[26]delete
       replies
         1. [27]justglowing[28]may 4, 2013 at 4:34 pm
            it come with the scipy installation:
            http://docs.scipy.org/doc/scipy/reference/cluster.vq.html#modu
            le-scipy.cluster.vq
            [29]delete
            replies
                 reply
            reply
    4. anonymous[30]may 13, 2013 at 11:10 pm
       excellent blog, jg. i love it. i use it and recommend it to others.
       one question. many of the id116 tutorials that i've found rely on
       self-made, perfectly configured data -- i.e., they'll "generate"
       numbers in just the form necessary to get an easy id116
       id91. whereas in the real world many of us are using id116
       to cluster documents (using nlp) or other information that requires
       a great deal of work/formatting before we can even use id116. for
       example, on documents first one must create a vector (tf-idf for
       instance) and then complete a similarity measurement (euclidean for
       instance).
       thus, the greatest challenge to performing a id116 is often just
       getting the data into a format that the kmeans calls can work with.
       for instance, tutorials always seem to have their data in the
       following list-within-a-list format:[[number1, number2], [number1,
       number2], [number1, number2], [number1, number2]... ]. how would
       you recommend getting documents (i.e., natural language) into that
       format? note that cosine similarity performed on a tf-idf vector
       always returns a single list, which isn't "clusterable" (to my
       knowledge).
       any help appreciated and thank you in advance for all of your work.
       reply[31]delete
       replies
         1. [32]justglowing[33]may 14, 2013 at 10:38 am
            hello,
            you could take a look to the vector space models. those models
            make you able to build a fixed length vector using the
            frequencies of some words you're interested in. this post is a
            good introduction:
            http://pyevolve.sourceforge.net/wordpress/?p=1589
            [34]delete
            replies
                 reply
         2. anonymous[35]may 14, 2013 at 4:14 pm
            i'll check it out. thanks much, jg.
            [36]delete
            replies
                 reply
            reply
    5. anonymous[37]june 7, 2013 at 11:12 am
       i am not able to view the result what can be done..
       show() command is not working
       reply[38]delete
       replies
         1. anonymous[39]june 7, 2013 at 2:12 pm
            sorted out..
            [40]delete
            replies
                 reply
            reply
    6. anonymous[41]july 28, 2013 at 1:33 pm
       excellent! help me much to understand id116 id91.
       is it possible to use this in a capacitated-vrp (vehicle routing
       problem) ?
       in which, each node has "demand", and there is a fixed vehicle's
       "capacity".
       subject to: sum of all node's demands (in a cluster) is
       smaller-or-equal to vehicle's capacity.
       any helps very much appreciated. thank you.
       reply[42]delete
       replies
         1. anonymous[43]july 28, 2013 at 2:16 pm
            i mean as explained in here, "cluster-first route-second
            method"
            http://neo.lcc.uma.es/vrp/solution-methods/heuristics/cluster-
            first-route-second-method/
            thanks...
            [44]delete
            replies
                 reply
            reply
    7. anonymous[45]december 15, 2013 at 9:55 pm
       this is excellent material, and your code explaining how to use the
       scipy implementation is beautiful and clear. just recently i've
       implemented the algorithm in python myself, it's a lot of fun to
       play around with configurations to see the id91 in action:
       http://datasciencelab.wordpress.com/2013/12/12/id91-with-k-me
       ans-in-python/
       reply[46]delete
       replies
            reply
    8. [47]sergeant hartman[48]march 25, 2014 at 9:17 am
       could you please discuss a bit the role of 'whitening' which seems
       to be kind of highly reccommended by the scipy tutorial?
       reply[49]delete
       replies
         1. [50]justglowing[51]march 25, 2014 at 5:34 pm
            hi, you can find some general information about the whitening
            transformation here:
            http://en.wikipedia.org/wiki/whitening_transformation
            usually, when you have a data matrix, you use whitening in
            order to have unit variance across all the samples. this
            operation could improve the result of the id116 algorithm.
            [52]delete
            replies
                 reply
            reply
    9. [53]way112[54]april 8, 2014 at 6:03 pm
       thank you very much for your post, it's very helpful. here, your
       dataset has two variables that you partition into 2 and then 3
       clusters, so it makes sense to plot the id116 clusters like this,
       with 1 variable on x-axis and one on the y-axis. but what about if
       your dataset has more dimensions? do you have any suggestions about
       ways to look at the output under these circumstances?
       thanks,
       ss
       reply[55]delete
       replies
         1. [56]justglowing[57]april 8, 2014 at 6:08 pm
            hi, if you have more than two variables and you need to
            visualize your data in a 2d space, you need a dimensionality
            reduction method. here's an example on how to use isomap:
            http://glowingpython.blogspot.co.uk/2012/05/manifold-learning-
            on-handwritten-digits.html
            [58]delete
            replies
                 reply
         2. [59]way112[60]april 8, 2014 at 6:25 pm
            interesting, i'll check it out. thanks for the speedy
            response!
            [61]delete
            replies
                 reply
            reply
   10. [62]way112[63]april 8, 2014 at 6:24 pm
       this comment has been removed by the author.
       reply[64]delete
       replies
            reply
   11. anonymous[65]june 9, 2014 at 10:04 pm
       this post has been very helpful. thank you very much
       reply[66]delete
       replies
            reply
   12. anonymous[67]august 21, 2014 at 5:54 pm
       if i would like say 100 clusters from id116, too many to do the
       plotting by hand as you have in this example, how would you
       visualise/plot the results from the id91?
       reply[68]delete
       replies
         1. [69]justglowing[70]august 21, 2014 at 5:56 pm
            you have to defined a list with a color for each cluster and
            plot each cluster separately with a for loop choosing the
            appropriate color each time.
            [71]delete
            replies
                 reply
            reply
   13. [72]carl joseph[73]september 5, 2014 at 12:46 pm
       great post.
       do you know of anything similar that can find clusters in 3d space?
       for example, i have a set of particles each with x, y, z
       co-ordinates. how would i go about finding clusters (of various
       densities) in such a dataset?
       any thoughts or ideas?
       reply[74]delete
       replies
         1. [75]justglowing[76]september 5, 2014 at 12:48 pm
            kmeans works in 3d spaces. you just have to modify the input
            matrix.
            [77]delete
            replies
                 reply
         2. [78]carl joseph[79]september 5, 2014 at 12:51 pm
            fantastic. will investigate it further. thanks.
            [80]delete
            replies
                 reply
            reply
   14. anonymous[81]october 7, 2014 at 7:00 pm
       nice demonstration. but can you tell me how to use this
       scipy.cluster.vq module to generate codebook for an array of mfcc
       feature vectors. i've extracted the mfcc feature vectors (13
       coefficients) ...now i wish to use vq to perform pattern matching
       stuff. any idea ?
       reply[82]delete
       replies
         1. [83]justglowing[84]october 8, 2014 at 1:20 pm
            of course, you could cluster your mfcc vectors in order to
            find similarities in some parts of your signal. but the
            applications that you can realize are related to the kind of
            signal you have (speech, music, ...).
            [85]delete
            replies
                 reply
            reply
   15. anonymous[86]october 24, 2014 at 6:59 pm
       this comment has been removed by a blog administrator.
       reply[87]delete
       replies
            reply
   16. [88]shambhulingayya.n.d[89]october 24, 2014 at 7:03 pm
       hi i have a problem using k-mean id91 with scipy.
       i have a set of data as x-axis and y-axis
       [[-0.0365, 0.0121],
       [ 0.0623, -0.0019],
       [ 0.0352, -0.0007],
       [ 0.0609, -0.0096]]
       if i use the k-mean function from matlab it clusters it properly(i
       mean as it is expected) i.e 1st row and last row comes under one
       cluster and middle two rows comes under one cluster.
       but, when i use scipy as it is told in this blog, results are not
       as expected i.e 1st row comes under one cluster and last 3 rows
       comes under another cluster. can any one pls tell me why is it so?
       tnx in advance:)
       reply[90]delete
       replies
         1. [91]justglowing[92]october 25, 2014 at 6:17 pm
            hi shambhulingayya, just try to plot your data. you'll see
            that your first sample is an outlier (it's even the only one
            with a negative x and a positive y) and that the other 3
            samples are close each other. the id91 provided by scipy
            makes more sense to me.
            [93]delete
            replies
                 reply
         2. [94]shambhulingayya.n.d[95]october 25, 2014 at 7:49 pm
            well, btw fyi, i am using it for pattern recognition. the data
            sets i mentioned above are the output from the pca(reduced
            dimensional dataset).
            but, in reality my patterns which i know by it's appearances
            are, (1st and 4th) are similar and (2nd and 4th are similar).
            why i am doubting this because, if i cluster the same data
            using matlab then, id91 is happening perfectly right i.e
            1st and 4th under one cluster and 2nd and 3rd under another
            cluster.
            any thoughts in this...?
            [96]delete
            replies
                 reply
         3. [97]shambhulingayya.n.d[98]october 25, 2014 at 9:15 pm
            fyi, here r the k-mean output of matlab and python which
            differ each other for same data set
            matlab -
            https://drive.google.com/file/d/0b4xlqnqhjpjiuwp2mfrlu3f4awm/v
            iew?usp=sharing
            python -
            https://drive.google.com/file/d/0b4xlqnqhjpjiawfgc0hvnddgm3c/v
            iew?usp=sharing
            [99]delete
            replies
                 reply
         4. [100]justglowing[101]october 26, 2014 at 6:19 pm
            try to use the same starting centroids and the same number of
            iterations on both the implementations.
            [102]delete
            replies
                 reply
            reply
   17. [103]shambhulingayya.n.d[104]october 25, 2014 at 8:05 pm
       this comment has been removed by the author.
       reply[105]delete
       replies
            reply
   18. anonymous[106]february 26, 2015 at 4:51 pm
       very informative blog! could you please tell me how to identify
       which cluster stands for what? for eg, if i have 4 features for
       t-shirt sizes (age, weight, height, gender) and if i get 3
       clusters, how to find which cluster out of the 3 stands for small
       size, medium size and large size?
       reply[107]delete
       replies
         1. [108]justglowing[109]february 26, 2015 at 5:32 pm
            the values of the centroids represent your variables. if you
            look at them you will be able to understand which centroid
            represents the size of the related cluster.
            [110]delete
            replies
                 reply
            reply
   19. [111]mohan pradhan[112]february 28, 2015 at 6:43 am
       i am new to scipy. can any one tell me how do i extract the data
       points belonging to each cluster? here is the code-
       data = vstack(arr1)
       centroids,_ = kmeans(data,4)
       idx,_ = vq(data,centroids)
       plot(data[idx==0,0],data[idx==0,1],'ob',data[idx==1,0],data[idx==1,
       1],'or',data[idx==2,0],data[idx==2,1],'og',data[idx==3,0],data[idx=
       =3,1],'oy')
       plot(centroids[:,0],centroids[:,1],'sg',markersize=8)
       reply[113]delete
       replies
            reply
   20. bdavis[114]april 23, 2015 at 9:29 pm
       thank you so much for this writeup. it has helped me dip my toes
       into kmeans and scipy. i look forward to continuing.
       i had one quick question about labeling points. i have k=8 as my
       best fit for my data, and can differentiate the clusters well. i
       imported data from a pandas dataframe with an index, then
       subsequently into a numpy array to perform id91 and
       plotting-by-idx. can you suggest a method to take the index.values
       from the dataframe and label the plot accordingly so i can
       associate the specific points with their sample of origin?
       reply[115]delete
       replies
         1. [116]justglowing[117]april 23, 2015 at 9:34 pm
            i bdavis, dataframe has the attribute index which gives what
            you probably want.
            [118]delete
            replies
                 reply
         2. bdavis[119]april 23, 2015 at 9:48 pm
            thank you for the prompt reply!
            i am able to obtain the ordered index, no problem. i am having
            difficulty integrating the sample titles contained within with
            the logical index plotting methods you implement. i was trying
            to iterate over it in a list, but associating it with the
            coordinates within the cluster data is elusive.
            [120]delete
            replies
                 reply
            reply
   21. anonymous[121]july 17, 2015 at 10:47 pm
       what is the similarity measure of this implementation of id116?
       thank you.
       reply[122]delete
       replies
         1. [123]justglowing[124]july 18, 2015 at 10:21 am
            hi, this algorithm uses the euclidian distance.
            [125]delete
            replies
                 reply
         2. [126]l.[127]september 4, 2015 at 7:54 am
            hey.
            is it possible to use some other metrics like pearson
            correlation?
            or can i use precalculated distance matrix for the id91?
            [128]delete
            replies
                 reply
         3. [129]justglowing[130]september 4, 2015 at 9:37 am
            hi l, not with this implementation.
            [131]delete
            replies
                 reply
            reply
   22. [132]chelligue thabet[133]september 20, 2015 at 12:15 am
       works perfectly for me. thanks
       reply[134]delete
       replies
            reply
   23. [135]unknown[136]october 19, 2015 at 5:14 pm
       hey
       every time you perform the algo, the centroid number happens to
       change making the plots colouring different at every run. does
       anybody knows how to fix that?
       thank you
       reply[137]delete
       replies
         1. [138]justglowing[139]october 19, 2015 at 5:15 pm
            the initial centroid are randomly chosen. you can fix the
            initial random seed using this function: numpy.random.seed
            [140]delete
            replies
                 reply
         2. [141]poan emmanuel[142]october 19, 2015 at 5:51 pm
            thanks a lot, it's a nice trick.
            another question, when you get the centroids from the "whiten"
            data, how do you get back the real values for these centroids?
            ... maybe not clear as a question
            [143]delete
            replies
                 reply
         3. [144]justglowing[145]october 19, 2015 at 5:54 pm
            it depends on how you "whithen" your data. if you simply
            removed the mean and divided by the standard deviation, you
            can just multiply by the old standard deviation and add the
            old mean again.
            [146]delete
            replies
                 reply
         4. anonymous[147]october 19, 2015 at 6:28 pm
            ok, i used python whiten which just divide each column by its
            std ... i thought it subtract the mean firstly to get a
            standard score... thats why i couldnt get back to my real
            data. thanks a lot !
            [148]delete
            replies
                 reply
            reply
   24. [149]unknown[150]february 25, 2016 at 6:42 pm
       can you teach me how to do a texture-based image segmentation using
       kmeans id91
       reply[151]delete
       replies
         1. [152]justglowing[153]february 25, 2016 at 7:18 pm
            hi, have a look at this post:
            http://glowingpython.blogspot.co.uk/2012/07/color-quantization
            .html
            [154]delete
            replies
                 reply
         2. [155]liu jason[156]february 25, 2016 at 7:23 pm
            is there any posts about how to create a filter bank by using
            scipy function?
            [157]delete
            replies
                 reply
         3. [158]justglowing[159]february 25, 2016 at 7:33 pm
            no, sorry :)
            [160]delete
            replies
                 reply
            reply
   25. [161]pra-[162]july 8, 2016 at 5:02 pm
       is it possible to use mahalanobis distance instead euclidean
       distance for id116 id91 ?
       reply[163]delete
       replies
            reply
   26. [164]pra-[165]july 8, 2016 at 5:03 pm
       is it possible to use mahalanobis distance instead euclidean
       distance for id116 id91 ?
       reply[166]delete
       replies
         1. [167]justglowing[168]july 8, 2016 at 6:49 pm
            hi pra, scipy doesn't allow you to specify a custom distance
            function, but you may want to give a look to this answer:
            http://stackoverflow.com/questions/16274788/id116-and-mahala
            nobis-distance
            [169]delete
            replies
                 reply
            reply
   27. anonymous[170]june 15, 2017 at 10:47 am
       such a great example! anyway, i have one question. can we use
       id116 for id91 a connected undirected graph?
       reply[171]delete
       replies
         1. [172]justglowing[173]june 15, 2017 at 11:44 am
            there are variants of id116 that work on graphs, i
            suggestion you to have a look at the library networkx.
            [174]delete
            replies
                 reply
            reply

   add comment
   load more...

   [175]newer post [176]older post [177]home
   subscribe to: [178]post comments (atom)

   [ins: :ins]

tweet this blog!

   [179]tweet

follow the glowing python

                                     on
                           [180][twitter_logo.jpg]

   [181]follow @justglowing

things you can find here

   [182]3d [183]ai [184]algorithms [185]andrews [186]animation
   [187]approximation [188]arrow [189]audio [190]automata [191]beer
   [192]binary [193]book [194]boxplot [195]calendar [196]carbon emissions
   [197]choice [198]classification [199]id91 [200]color [201]complex
   numbers [202]conway [203]corner [204]crawler [205]cross-validation
   [206]curves [207]data mining [208]data structures [209]datetime
   [210]id90 [211]derivative [212]dice [213]eigenvectors
   [214]energy [215]environment [216]facebook [217]features selection
   [218]feed [219]fft [220]files [221]filtering [222]fitting [223]football
   [224]forecast [225]fourier [226]fractal [227]geometric_transform
   [228]gif [229]ginput [230]gmail [231]google [232]hdf5 [233]heatmap
   [234]histogram [235]image [236]imap [237]impalib [238]information
   retrieval [239]integral [240]interactive [241]interpolation
   [242]ipython [243]irc [244]jit [245]joblib [246]json [247]jukowski
   [248]id116 [249]keras [250]knn [251]life [252]id202 [253]lsa
   [254]machine learning [255]map [256]math [257]matplotlib
   [258]minimization [259]moving average [260]mp3 [261]multithreading
   [262]natural language [263]network analysis [264]networking [265]neural
   network [266]nlp [267]numba [268]number theory [269]numpy [270]oop
   [271]opencv [272]optimization [273]outliers [274]id95 [275]pandas
   [276]parallelization [277]pca [278]persistence [279]pi [280]picking
   [281]pickle [282]plotly [283]plotting [284]prediction [285]prices
   [286]id203 [287]pylab [288]quadrature [289]random [290]re
   [291]reflection [292]regex [293]regression [294]review [295]rolling
   windws [296]rotation [297]rss [298]scikit-learn [299]scipy
   [300]scraping [301]seaborn [302]search [303]sequences
   [304]serialization [305]shape [306]signal [307]sklearn [308]socket
   [309]sorting [310]sound [311]speech [312]spider [313]spirals
   [314]stacked plot [315]statistics [316]stereo vision [317]stft
   [318]storage [319]string [320]structures analysis [321]summarization
   [322]id166 [323]tangent [324]tax [325]text to speech [326]time series
   [327]timestamp [328]transformation [329]twitter [330]urllib [331]vector
   [332]visualization [333]wav [334]wikipedia [335]xml

followers

looking for a snippet?

   __________ search

archive

     * [336]     [337]2019 (4)
          + [338]     [339]mar (3)
          + [340]     [341]jan (1)

     * [342]     [343]2018 (2)
          + [344]     [345]jun (1)
          + [346]     [347]may (1)

     * [348]     [349]2017 (4)
          + [350]     [351]oct (1)
          + [352]     [353]jul (1)
          + [354]     [355]jun (1)
          + [356]     [357]apr (1)

     * [358]     [359]2016 (1)
          + [360]     [361]may (1)

     * [362]     [363]2015 (3)
          + [364]     [365]oct (1)
          + [366]     [367]apr (1)
          + [368]     [369]jan (1)

     * [370]     [371]2014 (9)
          + [372]     [373]nov (1)
          + [374]     [375]oct (1)
          + [376]     [377]sep (1)
          + [378]     [379]aug (2)
          + [380]     [381]may (1)
          + [382]     [383]apr (1)
          + [384]     [385]feb (1)
          + [386]     [387]jan (1)

     * [388]     [389]2013 (20)
          + [390]     [391]dec (1)
          + [392]     [393]nov (1)
          + [394]     [395]sep (1)
          + [396]     [397]jul (2)
          + [398]     [399]jun (2)
          + [400]     [401]may (2)
          + [402]     [403]apr (2)
          + [404]     [405]mar (3)
          + [406]     [407]feb (3)
          + [408]     [409]jan (3)

     * [410]     [411]2012 (23)
          + [412]     [413]dec (2)
          + [414]     [415]nov (2)
          + [416]     [417]oct (1)
          + [418]     [419]sep (2)
          + [420]     [421]aug (1)
          + [422]     [423]jul (2)
          + [424]     [425]may (2)
          + [426]     [427]apr (3)
               o [428]k-nearest neighbour classifier
               o [429]k-nearest neighbor search
               o [430]k- means id91 with scipy
          + [431]     [432]mar (3)
          + [433]     [434]feb (2)
          + [435]     [436]jan (3)

     * [437]     [438]2011 (62)
          + [439]     [440]dec (4)
          + [441]     [442]nov (4)
          + [443]     [444]oct (3)
          + [445]     [446]sep (4)
          + [447]     [448]aug (3)
          + [449]     [450]jul (9)
          + [451]     [452]jun (6)
          + [453]     [454]may (16)
          + [455]     [456]apr (13)

quote

     the greatest value of a picture is that it forces us to notice what
     we never expected to see

   john tukey

subscribe to

   [arrow_dropdown.gif] posts
   [457][subscribe-netvibes.png] [458][subscribe-yahoo.png]
   [459][icon_feed12.png] atom
   [arrow_dropdown.gif] posts
   [arrow_dropdown.gif] comments
   [460][subscribe-netvibes.png] [461][subscribe-yahoo.png]
   [462][icon_feed12.png] atom
   [arrow_dropdown.gif] comments
   the glowing python is just glowing ;). powered by [463]blogger.

references

   visible links
   1. https://glowingpython.blogspot.com/feeds/posts/default
   2. https://glowingpython.blogspot.com/feeds/posts/default?alt=rss
   3. https://glowingpython.blogspot.com/feeds/3774863542873600393/comments/default
   4. https://glowingpython.blogspot.com/
   5. https://1.bp.blogspot.com/-w6y9wgirrdm/t3ynnnowjwi/aaaaaaaaaus/6_9uxix4dt0/s1600/kmeans.png
   6. https://2.bp.blogspot.com/-ngqa6zvo2vu/t3ynxdsnvbi/aaaaaaaaau4/i2tv1mozrne/s1600/kmeans3.png
   7. https://www.blogger.com/share-post.g?blogid=1693014329567144872&postid=3774863542873600393&target=email
   8. https://www.blogger.com/share-post.g?blogid=1693014329567144872&postid=3774863542873600393&target=blog
   9. https://www.blogger.com/share-post.g?blogid=1693014329567144872&postid=3774863542873600393&target=twitter
  10. https://www.blogger.com/share-post.g?blogid=1693014329567144872&postid=3774863542873600393&target=facebook
  11. https://www.blogger.com/share-post.g?blogid=1693014329567144872&postid=3774863542873600393&target=pinterest
  12. https://glowingpython.blogspot.com/search/label/ai
  13. https://glowingpython.blogspot.com/search/label/id91
  14. https://glowingpython.blogspot.com/search/label/data mining
  15. https://glowingpython.blogspot.com/search/label/scipy
  16. https://glowingpython.blogspot.com/search/label/statistics
  17. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1355451000513#c8274241739719863029
  18. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=8274241739719863029
  19. https://www.blogger.com/profile/04495854403025396214
  20. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1363351321897#c7176480063654367918
  21. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=7176480063654367918
  22. https://www.blogger.com/profile/17212021288715206641
  23. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1363352590351#c6709776473972832004
  24. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=6709776473972832004
  25. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1367680811362#c7577388767665977169
  26. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=7577388767665977169
  27. https://www.blogger.com/profile/17212021288715206641
  28. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1367681679837#c8136629923049095952
  29. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=8136629923049095952
  30. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1368483008473#c11548027828316187
  31. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=11548027828316187
  32. https://www.blogger.com/profile/17212021288715206641
  33. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1368524319330#c8373970442591924252
  34. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=8373970442591924252
  35. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1368544441351#c5220902506136026059
  36. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=5220902506136026059
  37. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1370599932276#c5513283128963971031
  38. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=5513283128963971031
  39. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1370610728094#c608038807024347937
  40. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=608038807024347937
  41. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1375014784706#c4900061712911187375
  42. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=4900061712911187375
  43. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1375017366816#c5166990274076355170
  44. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=5166990274076355170
  45. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1387144545133#c7200347487893815829
  46. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=7200347487893815829
  47. https://www.blogger.com/profile/08013599701036410550
  48. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1395739059215#c6720110913901558115
  49. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=6720110913901558115
  50. https://www.blogger.com/profile/17212021288715206641
  51. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1395768875231#c6029612545461984894
  52. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=6029612545461984894
  53. https://www.blogger.com/profile/09188860634858662535
  54. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1396976607301#c7020657575900593151
  55. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=7020657575900593151
  56. https://www.blogger.com/profile/17212021288715206641
  57. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1396976915066#c7906558929323865745
  58. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=7906558929323865745
  59. https://www.blogger.com/profile/09188860634858662535
  60. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1396977902575#c3593341081148666342
  61. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=3593341081148666342
  62. https://www.blogger.com/profile/09188860634858662535
  63. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1396977862588#c4642335190170403747
  64. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=4642335190170403747
  65. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1402347899323#c4536512619162907988
  66. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=4536512619162907988
  67. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1408640053061#c642902024785261049
  68. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=642902024785261049
  69. https://www.blogger.com/profile/17212021288715206641
  70. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1408640198133#c1137478906496851790
  71. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=1137478906496851790
  72. https://www.blogger.com/profile/08899860115031812669
  73. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1409917578543#c2867931311294982054
  74. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=2867931311294982054
  75. https://www.blogger.com/profile/17212021288715206641
  76. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1409917702136#c5086423264196252751
  77. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=5086423264196252751
  78. https://www.blogger.com/profile/08899860115031812669
  79. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1409917864294#c2231326952118926776
  80. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=2231326952118926776
  81. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1412704804556#c5002459760701428319
  82. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=5002459760701428319
  83. https://www.blogger.com/profile/17212021288715206641
  84. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1412770820354#c3962882559297008574
  85. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=3962882559297008574
  86. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1414173559334#c6308652607642116568
  87. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=6308652607642116568
  88. https://www.blogger.com/profile/07563687472203473606
  89. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1414173805559#c7225286578015228004
  90. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=7225286578015228004
  91. https://www.blogger.com/profile/17212021288715206641
  92. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1414257423049#c1074000542778731085
  93. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=1074000542778731085
  94. https://www.blogger.com/profile/07563687472203473606
  95. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1414262945805#c1420770765365218724
  96. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=1420770765365218724
  97. https://www.blogger.com/profile/07563687472203473606
  98. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1414268145949#c1518878124401145820
  99. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=1518878124401145820
 100. https://www.blogger.com/profile/17212021288715206641
 101. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1414347576849#c5817152422939708314
 102. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=5817152422939708314
 103. https://www.blogger.com/profile/07563687472203473606
 104. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1414263913062#c3746802654338347475
 105. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=3746802654338347475
 106. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1424969507628#c8530714631341726573
 107. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=8530714631341726573
 108. https://www.blogger.com/profile/17212021288715206641
 109. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1424971933389#c3694429271741154946
 110. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=3694429271741154946
 111. https://www.blogger.com/profile/15806264167045735051
 112. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1425105805336#c3443453761322823314
 113. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=3443453761322823314
 114. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1429820995013#c760146484566624924
 115. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=760146484566624924
 116. https://www.blogger.com/profile/17212021288715206641
 117. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1429821268638#c4027178384445636481
 118. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=4027178384445636481
 119. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1429822107002#c3531548072861990175
 120. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=3531548072861990175
 121. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1437169629549#c4513100045202046567
 122. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=4513100045202046567
 123. https://www.blogger.com/profile/17212021288715206641
 124. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1437211262152#c2057557075376076664
 125. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=2057557075376076664
 126. https://www.blogger.com/profile/09195148519347260077
 127. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1441349643573#c1163898165626579039
 128. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=1163898165626579039
 129. https://www.blogger.com/profile/17212021288715206641
 130. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1441355850434#c5427531086240909503
 131. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=5427531086240909503
 132. https://www.blogger.com/profile/00236754307877532061
 133. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1442704551514#c5723511723232367251
 134. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=5723511723232367251
 135. https://www.blogger.com/profile/11824488695828128334
 136. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1445271253006#c5931230268786415654
 137. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=5931230268786415654
 138. https://www.blogger.com/profile/17212021288715206641
 139. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1445271347401#c1209760058206409756
 140. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=1209760058206409756
 141. https://www.blogger.com/profile/11824488695828128334
 142. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1445273480523#c1703563145963535976
 143. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=1703563145963535976
 144. https://www.blogger.com/profile/17212021288715206641
 145. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1445273648395#c5852644602663254983
 146. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=5852644602663254983
 147. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1445275705190#c457921301602888201
 148. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=457921301602888201
 149. https://www.blogger.com/profile/08823660780907631277
 150. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1456425743201#c8229018115314015128
 151. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=8229018115314015128
 152. https://www.blogger.com/profile/17212021288715206641
 153. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1456427931488#c356520826708322372
 154. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=356520826708322372
 155. https://www.blogger.com/profile/08823660780907631277
 156. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1456428202637#c5310705316372227230
 157. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=5310705316372227230
 158. https://www.blogger.com/profile/17212021288715206641
 159. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1456428799028#c4029907170751817928
 160. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=4029907170751817928
 161. https://www.blogger.com/profile/17063587261046153568
 162. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1467993779919#c1178628721529182610
 163. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=1178628721529182610
 164. https://www.blogger.com/profile/17063587261046153568
 165. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1467993787838#c8566572474455639608
 166. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=8566572474455639608
 167. https://www.blogger.com/profile/17212021288715206641
 168. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1468000179217#c3317899660189075899
 169. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=3317899660189075899
 170. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1497520043476#c6043336153867857378
 171. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=6043336153867857378
 172. https://www.blogger.com/profile/17212021288715206641
 173. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html?showcomment=1497523467120#c2927353320478292868
 174. https://www.blogger.com/delete-comment.g?blogid=1693014329567144872&postid=2927353320478292868
 175. https://glowingpython.blogspot.com/2012/04/k-nearest-neighbor-search.html
 176. https://glowingpython.blogspot.com/2012/03/linear-regression-with-numpy.html
 177. https://glowingpython.blogspot.com/
 178. https://glowingpython.blogspot.com/feeds/3774863542873600393/comments/default
 179. https://twitter.com/share
 180. http://twitter.com/justglowing
 181. https://twitter.com/justglowing
 182. https://glowingpython.blogspot.com/search/label/3d
 183. https://glowingpython.blogspot.com/search/label/ai
 184. https://glowingpython.blogspot.com/search/label/algorithms
 185. https://glowingpython.blogspot.com/search/label/andrews
 186. https://glowingpython.blogspot.com/search/label/animation
 187. https://glowingpython.blogspot.com/search/label/approximation
 188. https://glowingpython.blogspot.com/search/label/arrow
 189. https://glowingpython.blogspot.com/search/label/audio
 190. https://glowingpython.blogspot.com/search/label/automata
 191. https://glowingpython.blogspot.com/search/label/beer
 192. https://glowingpython.blogspot.com/search/label/binary
 193. https://glowingpython.blogspot.com/search/label/book
 194. https://glowingpython.blogspot.com/search/label/boxplot
 195. https://glowingpython.blogspot.com/search/label/calendar
 196. https://glowingpython.blogspot.com/search/label/carbon emissions
 197. https://glowingpython.blogspot.com/search/label/choice
 198. https://glowingpython.blogspot.com/search/label/classification
 199. https://glowingpython.blogspot.com/search/label/id91
 200. https://glowingpython.blogspot.com/search/label/color
 201. https://glowingpython.blogspot.com/search/label/complex numbers
 202. https://glowingpython.blogspot.com/search/label/conway
 203. https://glowingpython.blogspot.com/search/label/corner
 204. https://glowingpython.blogspot.com/search/label/crawler
 205. https://glowingpython.blogspot.com/search/label/cross-validation
 206. https://glowingpython.blogspot.com/search/label/curves
 207. https://glowingpython.blogspot.com/search/label/data mining
 208. https://glowingpython.blogspot.com/search/label/data structures
 209. https://glowingpython.blogspot.com/search/label/datetime
 210. https://glowingpython.blogspot.com/search/label/id90
 211. https://glowingpython.blogspot.com/search/label/derivative
 212. https://glowingpython.blogspot.com/search/label/dice
 213. https://glowingpython.blogspot.com/search/label/eigenvectors
 214. https://glowingpython.blogspot.com/search/label/energy
 215. https://glowingpython.blogspot.com/search/label/environment
 216. https://glowingpython.blogspot.com/search/label/facebook
 217. https://glowingpython.blogspot.com/search/label/features selection
 218. https://glowingpython.blogspot.com/search/label/feed
 219. https://glowingpython.blogspot.com/search/label/fft
 220. https://glowingpython.blogspot.com/search/label/files
 221. https://glowingpython.blogspot.com/search/label/filtering
 222. https://glowingpython.blogspot.com/search/label/fitting
 223. https://glowingpython.blogspot.com/search/label/football
 224. https://glowingpython.blogspot.com/search/label/forecast
 225. https://glowingpython.blogspot.com/search/label/fourier
 226. https://glowingpython.blogspot.com/search/label/fractal
 227. https://glowingpython.blogspot.com/search/label/geometric_transform
 228. https://glowingpython.blogspot.com/search/label/gif
 229. https://glowingpython.blogspot.com/search/label/ginput
 230. https://glowingpython.blogspot.com/search/label/gmail
 231. https://glowingpython.blogspot.com/search/label/google
 232. https://glowingpython.blogspot.com/search/label/hdf5
 233. https://glowingpython.blogspot.com/search/label/heatmap
 234. https://glowingpython.blogspot.com/search/label/histogram
 235. https://glowingpython.blogspot.com/search/label/image
 236. https://glowingpython.blogspot.com/search/label/imap
 237. https://glowingpython.blogspot.com/search/label/impalib
 238. https://glowingpython.blogspot.com/search/label/information retrieval
 239. https://glowingpython.blogspot.com/search/label/integral
 240. https://glowingpython.blogspot.com/search/label/interactive
 241. https://glowingpython.blogspot.com/search/label/interpolation
 242. https://glowingpython.blogspot.com/search/label/ipython
 243. https://glowingpython.blogspot.com/search/label/irc
 244. https://glowingpython.blogspot.com/search/label/jit
 245. https://glowingpython.blogspot.com/search/label/joblib
 246. https://glowingpython.blogspot.com/search/label/json
 247. https://glowingpython.blogspot.com/search/label/jukowski
 248. https://glowingpython.blogspot.com/search/label/id116
 249. https://glowingpython.blogspot.com/search/label/keras
 250. https://glowingpython.blogspot.com/search/label/knn
 251. https://glowingpython.blogspot.com/search/label/life
 252. https://glowingpython.blogspot.com/search/label/id202
 253. https://glowingpython.blogspot.com/search/label/lsa
 254. https://glowingpython.blogspot.com/search/label/machine learning
 255. https://glowingpython.blogspot.com/search/label/map
 256. https://glowingpython.blogspot.com/search/label/math
 257. https://glowingpython.blogspot.com/search/label/matplotlib
 258. https://glowingpython.blogspot.com/search/label/minimization
 259. https://glowingpython.blogspot.com/search/label/moving average
 260. https://glowingpython.blogspot.com/search/label/mp3
 261. https://glowingpython.blogspot.com/search/label/multithreading
 262. https://glowingpython.blogspot.com/search/label/natural language
 263. https://glowingpython.blogspot.com/search/label/network analysis
 264. https://glowingpython.blogspot.com/search/label/networking
 265. https://glowingpython.blogspot.com/search/label/neural network
 266. https://glowingpython.blogspot.com/search/label/nlp
 267. https://glowingpython.blogspot.com/search/label/numba
 268. https://glowingpython.blogspot.com/search/label/number theory
 269. https://glowingpython.blogspot.com/search/label/numpy
 270. https://glowingpython.blogspot.com/search/label/oop
 271. https://glowingpython.blogspot.com/search/label/opencv
 272. https://glowingpython.blogspot.com/search/label/optimization
 273. https://glowingpython.blogspot.com/search/label/outliers
 274. https://glowingpython.blogspot.com/search/label/id95
 275. https://glowingpython.blogspot.com/search/label/pandas
 276. https://glowingpython.blogspot.com/search/label/parallelization
 277. https://glowingpython.blogspot.com/search/label/pca
 278. https://glowingpython.blogspot.com/search/label/persistence
 279. https://glowingpython.blogspot.com/search/label/pi
 280. https://glowingpython.blogspot.com/search/label/picking
 281. https://glowingpython.blogspot.com/search/label/pickle
 282. https://glowingpython.blogspot.com/search/label/plotly
 283. https://glowingpython.blogspot.com/search/label/plotting
 284. https://glowingpython.blogspot.com/search/label/prediction
 285. https://glowingpython.blogspot.com/search/label/prices
 286. https://glowingpython.blogspot.com/search/label/id203
 287. https://glowingpython.blogspot.com/search/label/pylab
 288. https://glowingpython.blogspot.com/search/label/quadrature
 289. https://glowingpython.blogspot.com/search/label/random
 290. https://glowingpython.blogspot.com/search/label/re
 291. https://glowingpython.blogspot.com/search/label/reflection
 292. https://glowingpython.blogspot.com/search/label/regex
 293. https://glowingpython.blogspot.com/search/label/regression
 294. https://glowingpython.blogspot.com/search/label/review
 295. https://glowingpython.blogspot.com/search/label/rolling windws
 296. https://glowingpython.blogspot.com/search/label/rotation
 297. https://glowingpython.blogspot.com/search/label/rss
 298. https://glowingpython.blogspot.com/search/label/scikit-learn
 299. https://glowingpython.blogspot.com/search/label/scipy
 300. https://glowingpython.blogspot.com/search/label/scraping
 301. https://glowingpython.blogspot.com/search/label/seaborn
 302. https://glowingpython.blogspot.com/search/label/search
 303. https://glowingpython.blogspot.com/search/label/sequences
 304. https://glowingpython.blogspot.com/search/label/serialization
 305. https://glowingpython.blogspot.com/search/label/shape
 306. https://glowingpython.blogspot.com/search/label/signal
 307. https://glowingpython.blogspot.com/search/label/sklearn
 308. https://glowingpython.blogspot.com/search/label/socket
 309. https://glowingpython.blogspot.com/search/label/sorting
 310. https://glowingpython.blogspot.com/search/label/sound
 311. https://glowingpython.blogspot.com/search/label/speech
 312. https://glowingpython.blogspot.com/search/label/spider
 313. https://glowingpython.blogspot.com/search/label/spirals
 314. https://glowingpython.blogspot.com/search/label/stacked plot
 315. https://glowingpython.blogspot.com/search/label/statistics
 316. https://glowingpython.blogspot.com/search/label/stereo vision
 317. https://glowingpython.blogspot.com/search/label/stft
 318. https://glowingpython.blogspot.com/search/label/storage
 319. https://glowingpython.blogspot.com/search/label/string
 320. https://glowingpython.blogspot.com/search/label/structures analysis
 321. https://glowingpython.blogspot.com/search/label/summarization
 322. https://glowingpython.blogspot.com/search/label/id166
 323. https://glowingpython.blogspot.com/search/label/tangent
 324. https://glowingpython.blogspot.com/search/label/tax
 325. https://glowingpython.blogspot.com/search/label/text to speech
 326. https://glowingpython.blogspot.com/search/label/time series
 327. https://glowingpython.blogspot.com/search/label/timestamp
 328. https://glowingpython.blogspot.com/search/label/transformation
 329. https://glowingpython.blogspot.com/search/label/twitter
 330. https://glowingpython.blogspot.com/search/label/urllib
 331. https://glowingpython.blogspot.com/search/label/vector
 332. https://glowingpython.blogspot.com/search/label/visualization
 333. https://glowingpython.blogspot.com/search/label/wav
 334. https://glowingpython.blogspot.com/search/label/wikipedia
 335. https://glowingpython.blogspot.com/search/label/xml
 336. javascript:void(0)
 337. https://glowingpython.blogspot.com/2019/
 338. javascript:void(0)
 339. https://glowingpython.blogspot.com/2019/03/
 340. javascript:void(0)
 341. https://glowingpython.blogspot.com/2019/01/
 342. javascript:void(0)
 343. https://glowingpython.blogspot.com/2018/
 344. javascript:void(0)
 345. https://glowingpython.blogspot.com/2018/06/
 346. javascript:void(0)
 347. https://glowingpython.blogspot.com/2018/05/
 348. javascript:void(0)
 349. https://glowingpython.blogspot.com/2017/
 350. javascript:void(0)
 351. https://glowingpython.blogspot.com/2017/10/
 352. javascript:void(0)
 353. https://glowingpython.blogspot.com/2017/07/
 354. javascript:void(0)
 355. https://glowingpython.blogspot.com/2017/06/
 356. javascript:void(0)
 357. https://glowingpython.blogspot.com/2017/04/
 358. javascript:void(0)
 359. https://glowingpython.blogspot.com/2016/
 360. javascript:void(0)
 361. https://glowingpython.blogspot.com/2016/05/
 362. javascript:void(0)
 363. https://glowingpython.blogspot.com/2015/
 364. javascript:void(0)
 365. https://glowingpython.blogspot.com/2015/10/
 366. javascript:void(0)
 367. https://glowingpython.blogspot.com/2015/04/
 368. javascript:void(0)
 369. https://glowingpython.blogspot.com/2015/01/
 370. javascript:void(0)
 371. https://glowingpython.blogspot.com/2014/
 372. javascript:void(0)
 373. https://glowingpython.blogspot.com/2014/11/
 374. javascript:void(0)
 375. https://glowingpython.blogspot.com/2014/10/
 376. javascript:void(0)
 377. https://glowingpython.blogspot.com/2014/09/
 378. javascript:void(0)
 379. https://glowingpython.blogspot.com/2014/08/
 380. javascript:void(0)
 381. https://glowingpython.blogspot.com/2014/05/
 382. javascript:void(0)
 383. https://glowingpython.blogspot.com/2014/04/
 384. javascript:void(0)
 385. https://glowingpython.blogspot.com/2014/02/
 386. javascript:void(0)
 387. https://glowingpython.blogspot.com/2014/01/
 388. javascript:void(0)
 389. https://glowingpython.blogspot.com/2013/
 390. javascript:void(0)
 391. https://glowingpython.blogspot.com/2013/12/
 392. javascript:void(0)
 393. https://glowingpython.blogspot.com/2013/11/
 394. javascript:void(0)
 395. https://glowingpython.blogspot.com/2013/09/
 396. javascript:void(0)
 397. https://glowingpython.blogspot.com/2013/07/
 398. javascript:void(0)
 399. https://glowingpython.blogspot.com/2013/06/
 400. javascript:void(0)
 401. https://glowingpython.blogspot.com/2013/05/
 402. javascript:void(0)
 403. https://glowingpython.blogspot.com/2013/04/
 404. javascript:void(0)
 405. https://glowingpython.blogspot.com/2013/03/
 406. javascript:void(0)
 407. https://glowingpython.blogspot.com/2013/02/
 408. javascript:void(0)
 409. https://glowingpython.blogspot.com/2013/01/
 410. javascript:void(0)
 411. https://glowingpython.blogspot.com/2012/
 412. javascript:void(0)
 413. https://glowingpython.blogspot.com/2012/12/
 414. javascript:void(0)
 415. https://glowingpython.blogspot.com/2012/11/
 416. javascript:void(0)
 417. https://glowingpython.blogspot.com/2012/10/
 418. javascript:void(0)
 419. https://glowingpython.blogspot.com/2012/09/
 420. javascript:void(0)
 421. https://glowingpython.blogspot.com/2012/08/
 422. javascript:void(0)
 423. https://glowingpython.blogspot.com/2012/07/
 424. javascript:void(0)
 425. https://glowingpython.blogspot.com/2012/05/
 426. javascript:void(0)
 427. https://glowingpython.blogspot.com/2012/04/
 428. https://glowingpython.blogspot.com/2012/04/k-nearest-neighbour-classifier.html
 429. https://glowingpython.blogspot.com/2012/04/k-nearest-neighbor-search.html
 430. https://glowingpython.blogspot.com/2012/04/id116-id91-with-scipy.html
 431. javascript:void(0)
 432. https://glowingpython.blogspot.com/2012/03/
 433. javascript:void(0)
 434. https://glowingpython.blogspot.com/2012/02/
 435. javascript:void(0)
 436. https://glowingpython.blogspot.com/2012/01/
 437. javascript:void(0)
 438. https://glowingpython.blogspot.com/2011/
 439. javascript:void(0)
 440. https://glowingpython.blogspot.com/2011/12/
 441. javascript:void(0)
 442. https://glowingpython.blogspot.com/2011/11/
 443. javascript:void(0)
 444. https://glowingpython.blogspot.com/2011/10/
 445. javascript:void(0)
 446. https://glowingpython.blogspot.com/2011/09/
 447. javascript:void(0)
 448. https://glowingpython.blogspot.com/2011/08/
 449. javascript:void(0)
 450. https://glowingpython.blogspot.com/2011/07/
 451. javascript:void(0)
 452. https://glowingpython.blogspot.com/2011/06/
 453. javascript:void(0)
 454. https://glowingpython.blogspot.com/2011/05/
 455. javascript:void(0)
 456. https://glowingpython.blogspot.com/2011/04/
 457. https://www.netvibes.com/subscribe.php?url=https://glowingpython.blogspot.com/feeds/posts/default
 458. https://add.my.yahoo.com/content?url=https://glowingpython.blogspot.com/feeds/posts/default
 459. https://glowingpython.blogspot.com/feeds/posts/default
 460. https://www.netvibes.com/subscribe.php?url=https://glowingpython.blogspot.com/feeds/3774863542873600393/comments/default
 461. https://add.my.yahoo.com/content?url=https://glowingpython.blogspot.com/feeds/3774863542873600393/comments/default
 462. https://glowingpython.blogspot.com/feeds/3774863542873600393/comments/default
 463. https://www.blogger.com/

   hidden links:
 465. https://www.blogger.com/post-edit.g?blogid=1693014329567144872&postid=3774863542873600393&from=pencil
 466. https://www.blogger.com/comment-iframe.g?blogid=1693014329567144872&postid=3774863542873600393
 467. https://www.blogger.com/rearrange?blogid=1693014329567144872&widgettype=adsense&widgetid=adsense1&action=editwidget&sectionid=sidebar-right-1
 468. https://www.blogger.com/rearrange?blogid=1693014329567144872&widgettype=html&widgetid=html1&action=editwidget&sectionid=sidebar-right-1
 469. https://www.blogger.com/rearrange?blogid=1693014329567144872&widgettype=text&widgetid=text1&action=editwidget&sectionid=sidebar-right-1
 470. https://www.blogger.com/rearrange?blogid=1693014329567144872&widgettype=image&widgetid=image1&action=editwidget&sectionid=sidebar-right-1
 471. https://www.blogger.com/rearrange?blogid=1693014329567144872&widgettype=label&widgetid=label1&action=editwidget&sectionid=sidebar-right-1
 472. https://www.blogger.com/rearrange?blogid=1693014329567144872&widgettype=followers&widgetid=followers1&action=editwidget&sectionid=sidebar-right-1
 473. https://www.blogger.com/rearrange?blogid=1693014329567144872&widgettype=blogsearch&widgetid=blogsearch1&action=editwidget&sectionid=sidebar-right-1
 474. https://www.blogger.com/rearrange?blogid=1693014329567144872&widgettype=blogarchive&widgetid=blogarchive1&action=editwidget&sectionid=sidebar-right-1
 475. https://www.blogger.com/rearrange?blogid=1693014329567144872&widgettype=text&widgetid=text3&action=editwidget&sectionid=footer-2-1
 476. https://www.blogger.com/rearrange?blogid=1693014329567144872&widgettype=subscribe&widgetid=subscribe2&action=editwidget&sectionid=footer-2-2
 477. https://www.blogger.com/rearrange?blogid=1693014329567144872&widgettype=attribution&widgetid=attribution1&action=editwidget&sectionid=footer-3
