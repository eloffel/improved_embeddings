   #[1]github [2]recent commits to openid35:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]16
     * [35]star [36]161
     * [37]fork [38]37

[39]openid35/[40]openid35

   [41]code [42]issues 2 [43]pull requests 6 [44]projects 0 [45]wiki
   [46]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [47]sign up
   openid35 library for parsing and realization with id35
   [48]http://openid35.sourceforge.net/
     * [49]53 commits
     * [50]2 branches
     * [51]1 release
     * [52]fetching contributors
     * [53]lgpl-2.1

    1. [54]java 58.2%
    2. [55]xslt 20.0%
    3. [56]c++ 14.6%
    4. [57]python 6.7%
    5. [58]shell 0.2%
    6. [59]css 0.1%
    7. other 0.2%

   (button) java xslt c++ python shell css other
   branch: master (button) new pull request
   [60]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/o
   [61]download zip

downloading...

   want to be notified of new releases in openid35/openid35?
   [62]sign in [63]sign up

launching github desktop...

   if nothing happens, [64]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [65]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [66]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [67]download the github extension for visual studio
   and try again.

   (button) go back
   [68]@mwhite14850
   [69]mwhite14850 [70]merge pull request [71]#18 [72]from
   shoeffner/fix/id35-editor (button)    
removes outdated id35-editor.py in favor of the correct id35_editor.py

   latest commit [73]7748e95 dec 30, 2018
   [74]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [75]bin
   [76]id35-format-grammars [77]version 0.9.5 with lib binaries ignored.
   mar 25, 2013
   [78]id35bank
   [79]devel [80]version 0.9.5 with lib binaries ignored. mar 25, 2013
   [81]docs [82]merge branch 'master' of
   [83]https://github.com/openid35/openid35 mar 27, 2015
   [84]grammars
   [85]images [86]version 0.9.5 with lib binaries ignored. mar 25, 2013
   [87]lib
   [88]src
   [89]test [90]version 0.9.5 with lib binaries ignored. mar 25, 2013
   [91].gitignore [92]included vocab.flm files from release, revised
   permissions. sep 15, 2014
   [93]authors [94]version 0.9.5 with lib binaries ignored. mar 25, 2013
   [95]changes [96]updated sourceforge home page with github transition
   news. mar 25, 2013
   [97]license
   [98]readme.md
   [99]sample_grammars
   [100]todo
   [101]build.xml

readme.md

openid35

   openid35 is a system for parsing and generating text using
   [102]id35 for syntax and [103]hybrid logic
   dependency semantics for, well, the semantic representation.

   if that seems like a mouthful, don't worry too much about the details
   right now. you can get started [104]installing openid35 and [105]working
   with openid35 using the tid35 utility right now.

   if, on the other hand, you want to start understanding what that
   mouthful means, johanna moore at the university of edinburgh has some
   [106]helpful course notes on id86 in general and openid35 in particular.

project information

   see changes for a description of the project status. also see the
   openid35 web site and wiki at ut austin:
     * [107]http://openid35.sf.net
     * [108]http://www.utcompling.com/wiki/openid35

   this readme.md file contains the configuration and build instructions.
   next you'll probably want to look at the tutorial on writing grammars
   in the human-friendly 'dot id35' syntax on [109]the ut austin openid35
   wiki.

   after that it may be helpful to look at the "native" grammar
   specification in "specifying grammars for openid35: a rough guide" in
   docs/grammars-rough-guide.pdf, as well as the sample_grammars file for
   descriptions of the sample grammars that come with the distribution,
   including ones using the dotid35 syntax. a (somewhat dated) programmer's
   guide to using the openid35 realizer appears in
   docs/realizer-manual.pdf.

   this release also includes a broad english coverage grammar from the
   id35bank and associated statistical models; see docs/id35bank-readme for
   details.

requirements

     * version 1.6 or later of the java 2 sdk ([110]http://java.sun.com)
     * for id352xml and other tools, python version 2.4 to 2.7
       ([111]http://www.python.org)

libraries

   if you're working with the latest source version from github, you'll
   need to download the external libraries from the latest release, as
   github discourages including binaries in their repos:
     * download the [112]latest release of openid35 from sourceforge
     * unpack the archive and copy over the files from openid35/lib/, as
       well as openid35/id35bank/bin/ner/nerapp.jar
     * build the latest source as described further below

configuring your environment variables

   the easiest thing to do is to set the environment variables java_home
   and openid35_home to the relevant locations on your system. set
   java_home to match the top level directory containing the java
   installation you want to use.

   for example, on windows:
c:\> set java_home=c:\program files\jdk1.6.0_04

   or on unix:
% setenv java_home /usr/local/java
  (csh)
> export java_home=/usr/java
  (ksh, bash)

   on windows, to get these settings to persist, it's actually easiest to
   set your environment variables through the system properties from the
   control panel. for example, under winxp, go to control panel, click on
   system properties, choose the advanced tab, click on environment
   variables, and add your settings in the user variables area.

   next, likewise set openid35_home to be the top level directory where you
   unzipped the download. in unix, type pwd in the directory where this
   file is and use the path given to you by the shell as openid35_home. you
   can set this in the same manner as for java_home above.

   next, add the directory openid35_home/bin to your path. for example, you
   can set the path in your .bashrc file as follows:
> export path="$path:$openid35_home/bin"

   on windows, you should also add the python main directory to your path.

   finally, if you are going to use [113]kenlm with very large language
   models for realization with id35bank-extracted grammars on linux, you'll
   also need to set the library load path:
> export ld_library_path=$ld_library_path:$openid35_home/lib

   once you have taken care of these things, you should be able to build
   and use the openid35 library.

   note: spaces are allowed in java_home but not in openid35_home. to set
   an environment variable with spaces in it, you need to put quotes
   around the value when on unix, but you must not do this when under
   windows.

increasing java memory limit

   if you're working with a broad coverage grammar and statistical parsing
   or realization models, you'll probably need to increase the default
   memory limit for running openid35's tools. you can do so by editing
   bin/id35-env[.bat], increasing the java_mem environment variable at the
   end of this script. for training id88 models in memory, you may
   need 16g; for realization with the very large gigaword 5-gram model,
   you may need 8g; otherwise, for parsing and realization with
   id35bank-derived models, 4g or possibly even 2g should suffice; finally,
   for small grammars 512m or 256m should be ok.

trying it out

   if you've managed to configure the system, you should be able to change
   to the directory for the "tiny" sample grammar and run tid35 (for text
   id35), the command-line tool for interactively testing grammars:
> cd grammars
> cd tiny
> tid35 (windows/unix)

   provided tid35 starts properly, it loads the grammar files, parses them,
   and shows the command-line interface (at which point you can type :h
   for help or :q to quit).

   if you trouble starting up tid35, make sure you have set the environment
   variables properly, and that the tid35 script (located in openid35/bin)
   calls the right shell environment (top-line of the script; to solve the
   problem, either comment out this line or correct the path).

visualizing semantic graphs

   semantic dependency graphs in testbed files can be visualized with the
   help of graphviz's dot tool. first, download and install [114]graphviz.
   then, use tid35 to create a testbed files with logical forms in it. for
   example, you can try some examples in the worldcup sample grammar and
   save them to a file using the command ':2tb tb.xml'. then make a
   directory to store the visualized graphs. finally, run the
   id35-draw-graph tool as shown below:
> cd grammars/worldcup
> tid35 (parse examples, save using ':2tb tb.xml')
> mkdir graphs
> id35-draw-graph -i tb.xml -v graphs/g

   you can also show the semantic classes or word indices using the -c or
   -w options, respectively. the graphs can be displayed with any pdf
   display tool.

   note that the graph visualization requires the logical forms to be
   stored in an xml node-rel format for graphs, as in the worldcup or
   routes sample grammars. see sample_grammars for more information.

creating disjunctive logical forms

   this release includes a new disjunctivizer package, for creating a
   disjunctive lf xml structure based on an lf graph difference. an lf
   graph difference is a characterization of the difference between two
   hybrid logic dependency semantics graphs and an alignment between them
   in terms of the edits needed to make one into the other: inserts,
   deletes, and substitutions. see the build file for junit tests that
   illustrate how to use the package.

generating grammar documentation

   openid35 includes a tool for generating html documentation of the xml
   files that specify a grammar. it can be run either from the
   id35-grammardoc script in the bin/ directory, or as an ant task. an
   example of how to incorporate grammardoc into an ant build file is
   given in the "tiny" grammar (grammars/tiny/build.xml), in a build
   target called document.

building the system from source

   the openid35 build system is based on apache ant. ant is a little but
   very handy tool that uses a build file written in xml (build.xml) as
   building instructions. building the java portion of openid35 is
   accomplished using the script id35-build; this works under windows and
   unix, but requires that you run it from the top-level directory (where
   the build.xml file is located). if everything is right and all the
   required packages are visible, this action will generate a file called
   openid35.jar in the ./lib directory.

   note that you should not build from source by invoking 'ant' directly.
   instead, you should use id35-build as shown below (unix), after ensuring
   that you've set openid35_home, java_home and updated your path (the
   id35-build script invokes ant with various parameters that aren't set
   properly if ant is invoked from the command line):
> cd $openid35_home
> id35-build

working with the eclipse ide

   the eclipse ide can be used for editing the java source code, though
   setup can be a bit tricky. the most reliable method seems to be as
   follows. first, follow the instructions above for building the source
   from the command line. then, in eclipse, choose file|new|java project
   to create a new java project, and give it a name, such as 'openid35'.
   leave the default settings as they are, and click next. then choose
   link additional source and browse to the folder src/ in the directory
   where you installed openid35 (i.e. $openid35_home/src). you'll need to
   give this location a new name, such as 'src2' ('src' is already taken
   by default). the final step is to add external jars under the libraries
   tab. from openid35's lib directory (i.e. $openid35_home/lib), choose all
   of the .jar files. at this point, you should be able to hit finish and
   the code should compile in eclipse.

   note that with eclipse's default settings, the code will compile in
   your eclipse workspace, which is separate from your openid35
   installation (this is a good thing, as eclipse uses a bin/ directory
   for compiled java classes, whereas openid35 uses bin/ for command-line
   scripts). thus, once you have made a round of changes in eclipse and
   are ready to try them out in openid35, go back to the command line in
   $openid35_home and invoke id35-build to re-build the openid35.jar file.
   this will make your changes available in openid35's programs, such as
   tid35.

bug reports

   please report bugs at by creating [115]an issue with a description of
   the problem.

     *    2019 github, inc.
     * [116]terms
     * [117]privacy
     * [118]security
     * [119]status
     * [120]help

     * [121]contact github
     * [122]pricing
     * [123]api
     * [124]training
     * [125]blog
     * [126]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [127]reload to refresh your
   session. you signed out in another tab or window. [128]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/openid35/openid35/commits/master.atom
   3. https://github.com/openid35/openid35#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/openid35/openid35
  32. https://github.com/join
  33. https://github.com/login?return_to=/openid35/openid35
  34. https://github.com/openid35/openid35/watchers
  35. https://github.com/login?return_to=/openid35/openid35
  36. https://github.com/openid35/openid35/stargazers
  37. https://github.com/login?return_to=/openid35/openid35
  38. https://github.com/openid35/openid35/network/members
  39. https://github.com/openid35
  40. https://github.com/openid35/openid35
  41. https://github.com/openid35/openid35
  42. https://github.com/openid35/openid35/issues
  43. https://github.com/openid35/openid35/pulls
  44. https://github.com/openid35/openid35/projects
  45. https://github.com/openid35/openid35/wiki
  46. https://github.com/openid35/openid35/pulse
  47. https://github.com/join?source=prompt-code
  48. http://openid35.sourceforge.net/
  49. https://github.com/openid35/openid35/commits/master
  50. https://github.com/openid35/openid35/branches
  51. https://github.com/openid35/openid35/releases
  52. https://github.com/openid35/openid35/graphs/contributors
  53. https://github.com/openid35/openid35/blob/master/license
  54. https://github.com/openid35/openid35/search?l=java
  55. https://github.com/openid35/openid35/search?l=xslt
  56. https://github.com/openid35/openid35/search?l=c++
  57. https://github.com/openid35/openid35/search?l=python
  58. https://github.com/openid35/openid35/search?l=shell
  59. https://github.com/openid35/openid35/search?l=css
  60. https://github.com/openid35/openid35/find/master
  61. https://github.com/openid35/openid35/archive/master.zip
  62. https://github.com/login?return_to=https://github.com/openid35/openid35
  63. https://github.com/join?return_to=/openid35/openid35
  64. https://desktop.github.com/
  65. https://desktop.github.com/
  66. https://developer.apple.com/xcode/
  67. https://visualstudio.github.com/
  68. https://github.com/mwhite14850
  69. https://github.com/openid35/openid35/commits?author=mwhite14850
  70. https://github.com/openid35/openid35/commit/7748e9540456003590efa70a24d257df1f999d1b
  71. https://github.com/openid35/openid35/pull/18
  72. https://github.com/openid35/openid35/commit/7748e9540456003590efa70a24d257df1f999d1b
  73. https://github.com/openid35/openid35/commit/7748e9540456003590efa70a24d257df1f999d1b
  74. https://github.com/openid35/openid35/tree/7748e9540456003590efa70a24d257df1f999d1b
  75. https://github.com/openid35/openid35/tree/master/bin
  76. https://github.com/openid35/openid35/tree/master/id35-format-grammars
  77. https://github.com/openid35/openid35/commit/d5eb065e0ce4eaefc089cb5b1f71f1e911f26f8d
  78. https://github.com/openid35/openid35/tree/master/id35bank
  79. https://github.com/openid35/openid35/tree/master/devel
  80. https://github.com/openid35/openid35/commit/d5eb065e0ce4eaefc089cb5b1f71f1e911f26f8d
  81. https://github.com/openid35/openid35/tree/master/docs
  82. https://github.com/openid35/openid35/commit/bbc4c7e8e8b6742ef775b4c412c322773c7bd5de
  83. https://github.com/openid35/openid35
  84. https://github.com/openid35/openid35/tree/master/grammars
  85. https://github.com/openid35/openid35/tree/master/images
  86. https://github.com/openid35/openid35/commit/d5eb065e0ce4eaefc089cb5b1f71f1e911f26f8d
  87. https://github.com/openid35/openid35/tree/master/lib
  88. https://github.com/openid35/openid35/tree/master/src
  89. https://github.com/openid35/openid35/tree/master/test
  90. https://github.com/openid35/openid35/commit/d5eb065e0ce4eaefc089cb5b1f71f1e911f26f8d
  91. https://github.com/openid35/openid35/blob/master/.gitignore
  92. https://github.com/openid35/openid35/commit/59642fd803b4f5c5eec5f91d951e201f4ef4dcd9
  93. https://github.com/openid35/openid35/blob/master/authors
  94. https://github.com/openid35/openid35/commit/d5eb065e0ce4eaefc089cb5b1f71f1e911f26f8d
  95. https://github.com/openid35/openid35/blob/master/changes
  96. https://github.com/openid35/openid35/commit/41541cf863919c6968ec6eb9a99c5f8f6ac36d93
  97. https://github.com/openid35/openid35/blob/master/license
  98. https://github.com/openid35/openid35/blob/master/readme.md
  99. https://github.com/openid35/openid35/blob/master/sample_grammars
 100. https://github.com/openid35/openid35/blob/master/todo
 101. https://github.com/openid35/openid35/blob/master/build.xml
 102. https://en.wikipedia.org/wiki/combinatory_categorial_grammar
 103. https://www.aclweb.org/anthology/p02-1041
 104. https://davehowcroft.com/post/installing-openid35/
 105. https://davehowcroft.com/post/getting-started-with-openid35/
 106. https://www.inf.ed.ac.uk/teaching/courses/id86/
 107. http://openid35.sf.net/
 108. http://www.utcompling.com/wiki/openid35
 109. http://www.utcompling.com/wiki/openid35/visid35-tutorial
 110. http://java.sun.com/
 111. http://www.python.org/
 112. https://sourceforge.net/projects/openid35/
 113. https://kheafield.com/code/kenlm/
 114. http://www.graphviz.org/
 115. https://github.com/openid35/openid35/issues
 116. https://github.com/site/terms
 117. https://github.com/site/privacy
 118. https://github.com/security
 119. https://githubstatus.com/
 120. https://help.github.com/
 121. https://github.com/contact
 122. https://github.com/pricing
 123. https://developer.github.com/
 124. https://training.github.com/
 125. https://github.blog/
 126. https://github.com/about
 127. https://github.com/openid35/openid35
 128. https://github.com/openid35/openid35

   hidden links:
 130. https://github.com/
 131. https://github.com/openid35/openid35
 132. https://github.com/openid35/openid35
 133. https://github.com/openid35/openid35
 134. https://help.github.com/articles/which-remote-url-should-i-use
 135. https://github.com/openid35/openid35#openid35
 136. https://github.com/openid35/openid35#project-information
 137. https://github.com/openid35/openid35#requirements
 138. https://github.com/openid35/openid35#libraries
 139. https://github.com/openid35/openid35#configuring-your-environment-variables
 140. https://github.com/openid35/openid35#increasing-java-memory-limit
 141. https://github.com/openid35/openid35#trying-it-out
 142. https://github.com/openid35/openid35#visualizing-semantic-graphs
 143. https://github.com/openid35/openid35#creating-disjunctive-logical-forms
 144. https://github.com/openid35/openid35#generating-grammar-documentation
 145. https://github.com/openid35/openid35#building-the-system-from-source
 146. https://github.com/openid35/openid35#working-with-the-eclipse-ide
 147. https://github.com/openid35/openid35#bug-reports
 148. https://github.com/
