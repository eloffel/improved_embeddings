nlp

introduction to nlp

classic parsing methods

s -> np vp
np -> dt n | np pp
pp -> prp np
vp -> v np | vp pp
dt -> 'a' | 'the'
n -> 'child' | 'cake' | 'fork'
prp -> 'with' | 'to'
v -> 'saw' | 'ate'

parsing as search

    there are two types of constraints on the 

    therefore, two general approaches to 

parses
    from the input sentence
    from the grammar
parsing
    top-down
    bottom-up

top down parsing

s

s -> np vp
np -> dt n | np pp
pp -> prp np
vp -> v np | vp pp
dt -> 'a' | 'the'
n -> 'child' | 'cake' | 'fork'
prp -> 'with' | 'to'
v -> 'saw' | 'ate'

top down parsing

s

np

vp

s -> np vp
np -> dt n | np pp
pp -> prp np
vp -> v np | vp pp
dt -> 'a' | 'the'
n -> 'child' | 'cake' | 'fork'
prp -> 'with' | 'to'
v -> 'saw' | 'ate'

top down parsing

s

np

np

pp

vp

s -> np vp
np -> dt n | np pp
pp -> prp np
vp -> v np | vp pp
dt -> 'a' | 'the'
n -> 'child' | 'cake' | 'fork'
prp -> 'with' | 'to'
v -> 'saw' | 'ate'

top down parsing

s

np

np

pp

vp

s -> np vp
np -> dt n | np pp
pp -> prp np
vp -> v np | vp pp
dt -> 'a' | 'the'
n -> 'child' | 'cake' | 'fork'
prp -> 'with' | 'to'
v -> 'saw' | 'ate'

top down parsing

s

np

dt

n

vp

s -> np vp
np -> dt n | np pp
pp -> prp np
vp -> v np | vp pp
dt -> 'a' | 'the'
n -> 'child' | 'cake' | 'fork'
prp -> 'with' | 'to'
v -> 'saw' | 'ate'

top down parsings -> np vp

s

np

dt

the

n

child

vp

ate

vp

np

dt

the

n

cake

np -> dt n | np pp
pp -> prp np
vp -> v np | vp pp
dt -> 'a' | 'the'
n -> 'child' | 'cake' | 'fork'
prp -> 'with' | 'to'
v -> 'saw' | 'ate'

np

prp

with

pp

np

dt

the

n

fork

bottom up parsings -> np vp

s

np -> dt n | np pp
pp -> prp np
vp -> v np | vp pp
dt -> 'a' | 'the'
n -> 'child' | 'cake' | 'fork'
prp -> 'with' | 'to'
v -> 'saw' | 'ate'

np

vp

np

np

dt

the

n

child

vp

ate

dt

the

n

cake

prp

with

pp

dt

the

np

n

fork

bottom up vs. top down methods
    bottom up

    explores options that won   t lead to a full parse
    example: shift-reduce (srparser in nltk)
    example: cky (cocke-kasami-younger)

    top down

    explores options that don   t match the full sentence
    example: recursive descent (rdparser in nltk)
    example: earley parser
    id145

    caches of intermediate results (memoization) 

recursive descent parser

   

in nltk
>>> from nltk.app import rdparser;
>>> rdparser())

introduction to nlp

id132

id132

    a bottom-up parser
    shiftoperation
    reduce-noperation

    tries to match the rhs of a production until it can build an s
    each word in the input sentence is pushed onto a stack
    if the top nwords on the top of the stack match the rhs of a 
production, then they are popped and replaced by the lhs of 
the production 

    breadth-first search
    stopping condition

    the process stops when the input sentence has been 

processed and s has been popped from the stack

id132 example
[ * the child ate the cake]
s [ 'the' * child ate the cake]
r [ dt * child ate the cake]
s [ dt 'child' * ate the cake]
r [ dt n * ate the cake]
r [ np * ate the cake]
s [ np 'ate' * the cake]
r [ np v * the cake]
s [ np v 'the' * cake]
r [ np v dt * cake]
s [ np v dt 'cake' * ]
r [ np v dt n * ]
r [ np v np * ]
r [ np vp * ]
r [ s * ]

(s (np (dt the) (n child)) (vp (v ate) (np (dt the) (n cake))))

id132

   

in nltk
>>> from nltk.app import srparser;
>>> srparser())

nlp

