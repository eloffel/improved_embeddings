nlp

introduction to nlp

cocke-kasami-younger (cky) parsing

notes on left recursion

    problematic for many parsing methods
    infinite loops when expanding
    but appropriate linguistically

    np -> dt n
    np -> pn
    dt -> np    s
    mary   s mother   s sister   s friend

chart parsing

    top-down parsers have problems with expanding 

the same non-terminal
    in particular, pre-terminals such as pos
    bad idea to use top-down (recursive descent) parsing as is
generating locally feasible subtrees that are not 
viable globally

    bottom-up parsers have problems with 

    chart parsing will address these issues

id145

    motivation

    a lot of the work is repeated
    caching intermediate results improves the complexity

    id145

    building a parse for a substring [i,j] based on all parses [i,k] 

and [k, j] that are included in it.

    complexity

    o(n3) for recognizing an input string of length n

id145

    cky (cocke-kasami-younger)

    bottom-up
    requires a normalized (binarized) grammar

    earley parser

    top-down
    more complicated
    (separate lecture)

cky algorithm

function cky (sentence w, grammar g) returns table

for i in 1..length(w) do
for j in 2..length(w) do

table[i-1,i] = {a|a->wi in g}
for i in j-2 down to 0 do

for k in (i+1) to (j-1) do

table[i,j] = table[i,j] union {a|a->bc in g, b in 

table [i,k], c in table [k,j]}

if the start symbol s is in table [0,n] then w is in l(g)

example

["the", "child", "ate", "the", "cake", "with", "the", "fork"]

s -> np vp
np -> dt n | np pp
pp -> prp np
vp -> v np | vp pp
dt -> 'a' | 'the'
n -> 'child' | 'cake' | 'fork'
prp -> 'with' | 'to'
v -> 'saw' | 'ate'

the

child

ate

the

cake

with

the

fork

dt

the

child

ate

the

cake

with

the

fork

dt

the

n

child

ate

the

cake

with

the

fork

dt

the

child

np

n

ate

the

cake

with

the

fork

dt

the

child

np

n

ate

the

cake

with

the

fork

dt

the

child

np

n

ate

v

the

cake

with

the

fork

dt

the

child

np

n

ate

v

the

dt

cake

with

the

fork

dt

the

child

np

n

ate

v

the

dt

n

cake

with

the

fork

dt

the

child

np

n

ate

v

the

dt

cake

np

n

with

the

fork

dt

the

child

np

n

ate

v

the

dt

cake

np

n

with

the

fork

dt

the

child

np

n

ate

v

the

dt

cake

vp

np

n

with

the

fork

dt

the

child

np

n

ate

v

the

dt

cake

vp

np

n

with

the

fork

dt

the

child

np

n

ate

s

vp

np

n

v

the

dt

cake

with

the

fork

dt

the

child

np

n

ate

s

vp

np

n

v

the

dt

cake

with

the

fork

dt

the

child

np

n

ate

s

vp

np

n

v

the

dt

cake

with

prp

the

fork

dt

the

child

np

n

ate

s

vp

np

n

v

the

dt

cake

with

prp

the

dt

fork

np

pp

np

n

dt

the

child

np

n

ate

s

vp

np

n

v

the

dt

cake

with

prp

the

dt

fork

vp

np

pp

np

n

dt

the

child

np

n

ate

s

vp

np

n

v

the

dt

cake

with

prp

the

dt

fork

vp

np

pp

np

n

dt

the

child

np

n

ate

s

vp

np

n

v

the

dt

cake

with

prp

the

dt

fork

s

vp

np

pp

np

n

dt

the

child

np

n

ate

v

the

[0]  dt [1]   n [2] ==> [0]  np [2]
[3]  dt [4]   n [5] ==> [3]  np [5]
[6]  dt [7]   n [8] ==> [6]  np [8]
[2]   v [3]  np [5] ==> [2]  vp [5]
[5] prp [6]  np [8] ==> [5]  pp [8]
[0]  np [2]  vp [5] ==> [0]   s [5]
[3]  np [5]  pp [8] ==> [3]  np [8]
[2]   v [3]  np [8] ==> [2]  vp [8]
[2]  vp [5]  pp [8] ==> [2]  vp [8]
[0]  np [2]  vp [8] ==> [0]   s [8]

s

vp

np

n

dt

cake

with

prp

the

dt

fork

s

vp

np

pp

np

n

what is the meaning of each of these sentences?

(s

(np (dt the) (n child))
(vp

(vp (v ate) (np (dt the) (n cake)))
(pp (prp with) (np (dt the) (n fork)))))

(s

(s

(np (dt the) (n child))
(vp

(vp (v ate) (np (dt the) (n cake)))
(pp (prp with) (np (dt the) (n fork)))))

(np (dt the) (n child))
(vp

(v ate)
(np

(np (dt the) (n cake))
(pp (prp with) (np (dt the) (n fork))))))

complexity of cky

    space complexity
    single parse

    there are o(n2) cells in the table

    each cell requires a linear lookup.
    total time complexity is o(n3)

    all parses

    total time complexity is exponential

a longer example

["take", "this", "book"]

s -> np vp | aux np vp | vp
np -> pron | det nom
nom -> n | nom n | nom pp
pp -> prp np
vp -> v | v np | vp pp
det -> 'the' | 'a' | 'this'
pron -> 'he' | 'she'
n -> 'book' | 'boys' | 'girl'
prp -> 'with' | 'in'
v -> 'takes' | 'take'

non-binary productions

["take", "this", "book"]

s -> np vp | aux np vp | vp
np -> pron | det nom
nom -> n | nom n | nom pp
pp -> prp np
vp -> v | v np | vp pp
det -> 'the' | 'a' | 'this'
pron -> 'he' | 'she'
n -> 'book' | 'boys' | 'girl'
prp -> 'with' | 'in'
v -> 'takes' | 'take'

chomsky normal form (cnf)

    all rules have to be in binary form:
    this introduces new non-terminals for 

    x    y z    or    x    w
    hybrid rules
    n-ary rules
    unary rules
    epsilon rules (e.g., np    e)
ullman p. 152)

    any id18 can be converted to cnf (see aho & 

atis grammar

original version

s     np vp
s     aux np vp

s     vp

np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     vp pp
pp     prep np

from jurafsky and martin

atis grammar in cnf

original version

s     np vp
s     aux np vp

s     vp

np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     vp pp
pp     prep np

cnf version

s     np vp
s     x1 vp
x1     aux np
s     book | include | prefer
s     verb np
s     vp pp
np     i  | he | she | me
np     houston | nwa
np     det nominal
nominal     book | flight | meal | money
nominal     nominal noun
nominal     nominal pp
vp     book | include | prefer
vp     verb np
vp     vp pp
pp     prep np

atis grammar in cnf

original version

s     np vp
s     aux np vp

s     vp

np     pronoun
np     proper-noun
np     det nominal
nominal     noun
nominal     nominal noun
nominal     nominal pp
vp     verb
vp     verb np
vp     vp pp
pp     prep np

cnf version

s     np vp
s     x1 vp
x1     aux np
s     book | include | prefer
s     verb np
s     vp pp
np     i  | he | she | me
np     houston | nwa
np     det nominal
nominal     book | flight | meal | money
nominal     nominal noun
nominal     nominal pp
vp     book | include | prefer
vp     verb np
vp     vp pp
pp     prep np

chomsky normal form

    all rules have to be in binary form:
    new non-terminals for hybrid rules, n-ary and unary 

    x    y z    or    x    w
rules:
    inf-vp    to vp     becomes

    s    vp      vp    verb    vp    verb np      vp    verb pp       becomes

    s    aux np vp     becomes

inf-vp    to

   
    to    to
s    r1 vp

   
    r1    aux np

s    book 
s    buy
s    r2 pp
s    verb pp    

   
   
   
   
    etc.

issues with cky

    weak equivalence only

    same language, different structure
    if the grammar had to be converted to cnf, then the final 
    however, it can be converted back using a specific 

parse tree doesn   t match the original grammar
procedure

    syntactic ambiguity

    (deterministic) cky has no way to perform syntactic 

disambiguation

notes

    demo:
    recognizing vs. parsing

    http://lxmls.it.pt/2015/cky.html

    recognizing just means determining if the string is part of 
    parsing is more complicated     it involves producing a 

the language defined by the id18
parse tree 

nlp

