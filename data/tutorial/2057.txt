nlp

introduction to nlp

earley parser

earley parser

    problems with left recursion in top-down parsing
    vp    vp pp
    background

    developed by jay earley in 1970
    no need to convert the grammar to cnf
    left to right
    complexity

    faster than o(n3) in many cases

earley parser

    looks for both full and partial constituents
    when reading word k, it has already identified all 
hypotheses that are consistent with words 1 to k-
1

    example:

    s [i,j]    aux . np vp
    np [j,k]    n
    s [i,k]    aux np . vp

earley parser

it uses a id145 table, just like 
cky

   
    example entry in column 1

    [0:1] vp -> vp . pp
    created when processing word 1
    corresponds to words 0 to 1 (these words correspond to 
the vp part of the rhs of the rule)
    the dot separates the completed (known) part from the 
incomplete (and possibly unattainable) part

earley parser

    three types of entries

       scan        for words
       predict        for non-terminals
       complete        otherwise 

earley parser algorithm

figure from jurafsky and martin

earley parser algorithm

figure from jurafsky and martin

s -> np vp
s -> aux np vp
s -> vp
np -> pron
np -> det nom
nom -> n
nom -> nom n
nom -> nom pp
pp -> prp np
vp -> v
vp -> v np
vp -> vp pp    

det -> 'the'
det -> 'a'
det -> 'this'
pron -> 'he'
pron -> 'she'
n -> 'book'
n -> 'boys'
n -> 'girl'
prp -> 'with'
prp -> 'in'
v -> 'takes'
v -> 'take'

|.    take   .    this   .    book   .|
|[-----------]           .           .| [0:1] 'take'
|.           [-----------]           .| [1:2] 'this'
|.           .           [-----------]| [2:3] 'book   

example created using nltk

|.    take   .    this   .    book   .|
|[-----------]           .           .| [0:1] 'take'
|.           [-----------]           .| [1:2] 'this'
|.           .           [-----------]| [2:3] 'book'
|>           .           .           .| [0:0] s  -> * np vp
|>           .           .           .| [0:0] s  -> * aux np vp
|>           .           .           .| [0:0] s  -> * vp
|>           .           .           .| [0:0] vp -> * v
|>           .           .           .| [0:0] vp -> * v np
|>           .           .           .| [0:0] vp -> * vp pp
|>           .           .           .| [0:0] v  -> * 'take'
|>           .           .           .| [0:0] np -> * pron
|>           .           .           .| [0:0] np -> * det nom

|.    take   .    this   .    book   .|
|[-----------]           .           .| [0:1] 'take'
|.           [-----------]           .| [1:2] 'this'
|.           .           [-----------]| [2:3] 'book'
|>           .           .           .| [0:0] s  -> * np vp
|>           .           .           .| [0:0] s  -> * aux np vp
|>           .           .           .| [0:0] s  -> * vp
|>           .           .           .| [0:0] vp -> * v
|>           .           .           .| [0:0] vp -> * v np
|>           .           .           .| [0:0] vp -> * vp pp
|>           .           .           .| [0:0] v  -> * 'take'
|>           .           .           .| [0:0] np -> * pron
|>           .           .           .| [0:0] np -> * det nom
|[-----------]           .           .| [0:1] v  -> 'take' *
|[-----------]           .           .| [0:1] vp -> v *
|[----------->           .           .| [0:1] vp -> v * np
|.           >           .           .| [1:1] np -> * pron
|.           >           .           .| [1:1] np -> * det nom

|.           >           .           .| [1:1] det -> * 'this   
|[-----------]           .           .| [0:1] s  -> vp *
|[----------->           .           .| [0:1] vp -> vp * pp
|.           >           .           .| [1:1] pp -> * prp np
|.           [-----------]           .| [1:2] det -> 'this' *
|.           [----------->           .| [1:2] np -> det * nom
|.           .           >           .| [2:2] nom -> * n
|.           .           >           .| [2:2] nom -> * nom n
|.           .           >           .| [2:2] nom -> * nom pp
|.           .           >           .| [2:2] n  -> * 'book'
|.           .           [-----------]| [2:3] n  -> 'book' *
|.           .           [-----------]| [2:3] nom -> n *
|.           [-----------------------]| [1:3] np -> det nom *
|.           .           [----------->| [2:3] nom -> nom * n
|.           .           [----------->| [2:3] nom -> nom * pp
|.           .           .           >| [3:3] pp -> * prp np
|[===================================]| [0:3] vp -> v np *
|[===================================]| [0:3] s  -> vp *
|[----------------------------------->| [0:3] vp -> vp * pp
(s (vp (v take) (np (det this) (nom (n book)))))

nltk demo

    nltk demo:

import nltk
nltk.parse.chart.demo(2, print_times=false, trace=1, sent='i saw a 
dog', numparses=1)

notes

    cky fills the table with phantom constituents
    problem, especially for long sentences
    earley only keeps entries that are consistent with the 
input up to a given word
    so far, we only have a recognizer
    for parsing, we need to add backpointers
just like with cky, there is no disambiguation of the 
   
entire sentence
    time complexity
    niterations of size o(n2), therefore o(n3)
    for unambiguous grammars, each iteration is of size o(n), 

therefore o(n2)

nlp

