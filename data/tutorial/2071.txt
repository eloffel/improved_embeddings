nlp

introduction to nlp

id35 

(id35)

id35 

(id35)

    complex types
    e.g., x/yand x\y
    these take an argument of type yand return an object of type x. 
    x/y     means that y should appear on the right
    x\y     means that y should appear on the left

structure of id35

    categories
    combinatory rules
    lexicon

id35 rules

    function composition

    x/y   y/z   ->   x/z
    x\y   z\x   ->   z\y
    x/y   y\z   ->   x\z
    x/y   z\x   ->   z/y

    type raising
    x -> y/(y\x)
    x -> y\(y/x)
    coordination

example

example from jonathan kummerfeld, aleka blackwell, and patrick littell

expressive power

    id35s can generate the language anbncndn, n>0 
   

interesting examples:
    i like new york
    i like and hate new york
    i like and would rather be in new york
    i gave a book to chen and a laptop to jorge
    i want chen to stay and jorge to leave
    i like and chen hates, new york

    where are the verb phrases?

examples from steedman 1996

examples from steedman 1996

examples from steedman 1996

id35 in nltk

from nltk.id35 import chart, lexicon
lex = lexicon.parselexicon('''
:- s, np, n, vp
det :: np/n
pro :: np
modal :: s\\np/vp
tv :: vp/np
dtv :: tv/np
the => det
that => det
that => np
i => pro
you => pro
we => pro
chef => n
cake => n
children => n
dough => n

http://www.nltk.org/howto/id35.html

will => modal
should => modal
might => modal
must => modal
and => var\\.,var/.,var
to => vp[to]/vp
without => (vp\\vp)/vp[ing]
be => tv
cook => tv
eat => tv
cooking => vp[ing]/np
give => dtv
is => (s\\np)/np
prefer => (s\\np)/np
which => (n\\n)/(s/np)
persuade => (vp/vp[to])/np
''')

id35 in nltk

parser = chart.id35chartparser(lex, chart.defaultruleset)
for parse in parser.parse("you prefer that cake".split()):

chart.printid35derivation(parse)
break

you    prefer      that   cake 
np   ((s\np)/np)  (np/n)   n   
-----
np

-------------
((s\np)/np)

--------
(np/n)

------
-------------->
--------------------------->
--------------------------------<

np

n

(s\np)
s

http://www.nltk.org/howto/id35.html

for parse in parser.parse("that is the cake which you prefer".split()): 

chart.printid35derivation(parse)
break

that      is        the    cake      which       you    prefer    
np   ((s\np)/np)  (np/n)   n    ((n\n)/(s/np))  np   ((s\np)/np) 
------
np

-------------
((s\np)/np)

--------
(np/n)

------

n

----------------
((n\n)/(s/np))

-----
np
----->t
(s/(s\np))

-------------
((s\np)/np)
(s/np)

------------------>b
---------------------------------->
----------------------------------------<
------------------------------------------------>
------------------------------------------------------------->
-------------------------------------------------------------------<

(n\n)
n

np

(s\np)
s

http://www.nltk.org/howto/id35.html

id35

    naclo problem from 2014
    authors: jonathan kummerfeld, aleka blackwell, and patrick 
    http://www.nacloweb.org/resources/problems/2014/n2014
    http://www.nacloweb.org/resources/problems/2014/n2014
    http://www.nacloweb.org/resources/problems/2014/n2014
    http://www.nacloweb.org/resources/problems/2014/n2014

littell
-o.pdf
-os.pdf
-p.pdf
-ps.pdf

id35 problem in naclo

id35

id35

answer

id35

id35

id35

id35

id35

id35

id35 parsing

    cky works fine
    http://openid35.sourceforge.net/

http://4.easy-id35.appspot.com/do_parse?sentence=fruit+flies+like+a+banana&nbest=5

exercise

    how do you represent the following categories in 

id35
    nouns             
    adjectives     
    articles          
    prepositions  
    transitive verbs
    intransitive verbs

exercise

    how do you represent the following categories in 

id35
    nouns             n
    adjectives      n/n
    articles           np/n
    prepositions   (np\np)/np
    transitive verbs (s\np)/np
    intransitive verbs

id35 for dutch cross-serial dependencies

    because i1 cecilia2 henk3 the hippopotamuses4 saw1 help2 feed3,4.

[example from stephen clark]

notes

    id35 is mildly context-sensitive

    it can handle some phenomena that are not id18
    but it can be parsed efficiently
    id35 rules are monotonic
    complexity

    movement is not allowed

    o(n3)     with restricted type raising
    unbounded     with unrestricted type raising
calculus

    id35 gets closer to semantics and lambda 

id35bank

    hockenmaier

and steedman (2005)

nlp

