nlp

text similarity

morphological similarity:

id30

morphological similarity

    words with the same root:

    scan (base form)
    scans, scanned, scanning (inflected forms)
    scanner (derived forms, suffixes)
    rescan (derived forms, prefixes)
    rescanned (combinations)

id30

    definition

    to stem a word is to reduce it to a base form, called the 
stem, after removing various suffixes and endings and, 
sometimes, performing some additional transformations

    examples

    scanned    scan
    indication    indicate

    note

    in practice, prefixes are sometimes preserved, so rescan

will not be stemmed to scan

porter   s id30 method

    history:

    porter   s id30 method is a rule-based algorithm 
introduced by martin porter in 1980
    the paper (   an algorithm for suffix stripping   ) has been 
cited more than 7,000 times according to google scholar
input:
    the input is an individual word. the word is then 

transformed in a series of steps to its stem

   

    accuracy:

    the method is not always accurate

porter   s algorithm

    example 1: 

    input = computational
    output = comput

    example 2:

    input = computer
    output = comput
way

    the two input words end up stemmed the same 

porter   s algorithm

    the measureof a word is an indication of the 

number of syllables in it
    each sequence of consonants is denoted by c
    each sequence of vowels is denoted as v
    the initial c and the final v are optional
    so, each word is represented as [c]vcvc ... [v], or 
[c](vc){m}[v], where mis its measure

examples of measures

    m=0: i, aaa, id98, to, glee
    m=1: or, east, brick, street, dogma
    m=2: opal, eastern, dogmas
    m=3: easternmost, dogmatic

porter   s algorithm

    transformation patterns

    the initial word is then checked against a sequence of 

transformation patterns, in order.

    example

nation.
    actions

    (m>0) ation   ->  ate       
medication    ->  medicate
    note that this pattern matches medicationand dedication, but not 

    whenever a pattern matches, the word is transformed and the 

algorithm restarts from the beginning of the list of patterns with 
the transformed word.
    if no pattern matches, the algorithm stops and outputs the most 
recently transformed version of the word.

example rules

    step 1a

sses -> ss       
ies  -> i               lies     ->  li
ss   -> ss              press    ->  press
s    ->                  lots     ->  lot

presses  ->  press

    step 1b

(m>0) eed -> ee          refereed      ->  referee

(doesn   t apply to bleed since m(   bl   )=0)

example rules

   

step 2

->  inflate

(m>0) ational ->  ate           inflational
(m>0) tional  ->  tion          notional       ->  notion
(m>0) izer    ->  ize       
nebulizer      ->  nebulize
(m>0) entli   ->  ent       
intelligentli
(m>0) ousli   ->  ous     
analogousli
(m>0) ization ->  ize     
realization    ->  realize
(m>0) ation   ->  ate     
predication 
->  predicate
(m>0) ator    ->  ate    
indicator      ->  indicate
(m>0) iveness ->  ive           attentiveness  ->  attentive
(m>0) aliti   ->  al      
(m>0) biliti  ->  ble    

->  real
->  able

realiti
abiliti

->  intelligent
->  analogous

   

   

example rules

step 3 
(m>0) icate -> ic             replicate -> replic
(m>0) ative ->                 informative -> inform 
(m>0) alize -> al 
(m>0) ical -> ic              electrical -> electric 
(m>0) ful ->    
blissful -> bliss 
(m>0) ness ->                 tightness -> tight

realize -> real 

step 4 
(m>1) al ->    
appraisal -> apprais
(m>1) ance ->    
conductance -> conduct 
(m>1) er ->    
container -> contain 
(m>1) ic ->    
electric -> electr
(m>1) able ->                  countable -> count 
irresistible -> irresist
(m>1) ible ->    
displacement -> displac
(m>1) ement ->    
(m>1) ment ->    
investment -> invest 
(m>1) ent ->                   respondent -> respond

examples

    example 1: 

    input = computational
    step 2: replace ationalwith ate: computate
    step 4: replace atewith   : comput
    output = comput
    input = computer
    step 4: replace erwith   : comput
    output = comput

    example 2:

    the two input words end up stemmed the same way

external pointers

    online demo
    martin porter   s official site

    http://text-processing.com/demo/stem/

    http://tartarus.org/martin/porterstemmer/

    how will the porter stemmer stem these words?

quiz
construction
?
increasing
?
unexplained
?
differentiable ?

    check the porter paper (or the code for the 
stemmer) in order to answer these questions.
is the output what you expected? 
    if not, explain why.

   

answers to the quiz
construction
?
increasing
?
unexplained
?
differentiable ?

construction construct
increasing
unexplain
unexplained
differentiable differenti

increas

naclo problem

    thorny stems, naclo 2008 problem by eric breck

    http://www.nacloweb.org/resources/problems/2008/n200

8-h.pdf

solution to the naclo problem

    thorny stems

hs.pdf

    http://www.nacloweb.org/resources/problems/2008/n2008-

nlp

