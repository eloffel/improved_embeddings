                                 [senna.jpg]

                                     senna

   senna is a software distributed under a [1]non-commercial license,
   which outputs a host of natural language processing (nlp) predictions:
   part-of-speech (pos) tags, chunking (chk), name entity recognition
   (ner), id14 (srl) and syntactic parsing (psg).

   senna is fast because it uses a simple architecture, self-contained
   because it does not rely on the output of existing nlp system, and
   accurate because it offers state-of-the-art or near state-of-the-art
   performance.

   senna is written in ansi c, with about 3500 lines of code. it requires
   about 200mb of ram and should run on any ieee floating point computer.

   proceed to the [2]download page. read the [3]compilation section in you
   want to compile senna yourself. try out a [4]sanity check. and read
   about the [5]usage.

new in senna v3.0 (august 2011)

   here are the main changes compared to senna v2.0:
     * syntactic parsing.
     * we now include our original id27s, used to trained each
       task.
     * bug correction: now outputs correctly tokens made of numbers
       (instead of replacing numbers by "0").
     * option -offsettags, which outputs start/end offsets (in the
       sentence) of each token.

   disclaimer: our id27s differ from [6]joseph turian's
   embeddings (even though it is unfortunate they have been called
   "collobert & weston embeddings" in several papers). our embeddings have
   been trained for about 2 months, over wikipedia.

details

   senna's details concerning pos, chk, ner and srl tasks are included in
   a [7]jmlr paper. later, the techniques have been extended and applied
   to syntactic parsing (psg), and published in a aistats paper. if you
   use senna, please consider citing these appropriate papers.

   r. collobert, j. weston, l. bottou, m. karlen, k. kavukcuoglu and p.
   kuksa. [8]natural language processing (almost) from scratch, journal of
   machine learning research (jmlr), 2011.

   r. collobert. [9]deep learning for efficient discriminative parsing, in
   international conference on artificial intelligence and statistics
   (aistats), 2011.

download

   senna sources are provided so you can adapt senna to your needs (under
   our license constraints), and assess its simplicity.

   we also provide binaries for a couple of platforms, in the same
   archive. the name of the executable for each platform is given as
   follow:
     * linux 64 bits: senna-linux64
     * windows 32 bits: senna-win32.exe
     * mac os x snow leopard intel 64 bits: senna-osx

   everything is included in a single tar-gzipped file (185mb). proceed to
   the [10]download page.

compilation

   compiling senna is straightforward, as it is written in ansi c and does
   not require external libraries. for speed it is however recommended to
   use the [11]intel mkl library.

  linux

   in linux/unix/macos x systems, use gcc compiler:
gcc -o senna -o3 -ffast-math *.c

   you might want to add additional suitable optimization flags for your
   platform. senna also compiles fine with the intel compiler (icc).

   if speed is critical, we recommend to compile senna with the intel mkl
   library, which provides a very efficient blas. add the definition
   use_mkl_blas, as well as correct mkl libraries and include path.
gcc -o senna -o3 -ffast-math *.c -duse_mkl_blas [...]

   senna also compiles with atlas blas. on our platform, the handcrafted
   code compiled with the gcc command line shown above was faster.
   however, if you want to use it, you can compile it with:
gcc -o senna -o3 -ffast-math *.c -duse_atlas_blas [...]

  mac os x

   assuming you installed the xcode tools (which are provided on the mac
   os x dvd/cds), simply compile with gcc:
gcc -o senna -o3 -ffast-math *.c -duse_apple_blas -framework accelerate

   this will compile against apple blas libraries included in your system.
   as for linux, it is recommended to use intel mkl library instead of
   apple blas libraries. the following command line can be invoked
   (replacing the dots by the correct library and include paths):
gcc -o senna -o3 -ffast-math *.c -duse_mkl_blas [...]

  windows

   senna compiles fine under windows. you will have to create a win32
   console project under microsoft visual studio (you can download the
   [12]express edition). add all the includes and c file into the project,
   and build the solution. you can also use the command line (after
   opening a visual studio command prompt) in the following way:
cl /o2 /fesenna.exe *.c

   we recommend to use intel mkl for speed. see your mkl manual for adding
   proper libraries and includes. add also the preprocessor definition
   use_mkl_blas in the project. using the command line, it would be:
cl /o2 /fesenna.exe *.c /duse_mkl_blas [...]

sanity check

   run in a console the following command:
senna < sanity-test-input.txt > sanity-test-result.txt

   senna should create a file sanity-test-result.txt which should be
   identical to the provided sanity-test-output.txt file.

   the file sanity-test-input.txt comes from the [13]conll 2000 chunking
   testing set. senna will output all tags for this file. it should run in
   about 90 seconds on a decent computer (using mkl).

usage

   senna reads input sentences from the standard input and outputs tags
   into the standard output. the most likely command line usage for senna
   is therefore:
senna [options] < input.txt > output.txt

   of course you can run senna in an interactive mode without the "pipes"
   < and >.

   each input line is considered as a sentence. senna has its own
   tokenizer for separating words, which can be deactivated with the
   -usrtokens option.

   senna outputs one line per "token", with all the corresponding tags (in
   iobes format) on the same line. an empty line is inserted between each
   output sentence. the first column is the token. tags for all task then
   follow by default (pos, chk, ner and srl). tags for srl are preceded by
   a column which indicates if senna considered the token as a srl verb or
   not ("-"). then, there is one column per srl verb.

   senna supports the following options:
     * -h
       display an inline help.
     * -verbose
       display model informations (on the standard error output, so it
       does not mess up the tag outputs).
     * -notokentags
       do not output tokens (first output column).
     * -offsettags
       output start/end character offset (in the sentence), for each
       token.
     * -iobtags
       output iob tags instead of iobes.
     * -brackettags
       output 'bracket' tags instead of iobes.
     * -path <path>
       specify the path to the senna data/ and hash/ directories, if you
       do not run senna in its original directory. the path must end by
       "/".
     * -usrtokens
       use user's tokens (space separated) instead of senna tokenizer.
     * -posvbs
       use verbs outputed by the pos tagger instead of srl style verbs for
       srl task. you might want to use this, as the srl training task
       ignore some verbs (many "be" and "have") which might be not what
       you want.
     * -usrvbs <file>
       use user's verbs (given in <file>) instead of senna verbs for srl
       task. the file must contain one line per token, with an empty line
       between each sentence. a line which is not a "-" corresponds to a
       verb.
     * -pos
       -chk
       -ner
       -srl
       -psg
       instead of outputing tags for all tasks, senna will output tags for
       the specified (one or more) tasks.

remarks

   senna does not handle -lrb-, -rrb-, ... [14]tokens. please, replace
   these tokens in your input text by the appropriate (, ), .... not
   replacing these tokens will have an impact on performance (for e.g.,
   pos accuracy goes down, from 97.29% to 97.00%).

performance

   we report here senna performance in per-word accuracy for pos, and f1
   score for all the other tasks. timing corresponds to the time needed by
   senna to pass over the given test data set (macbook pro i7, 2.8ghz,
   intel mkl). for psg, f1 score is the one over all sentences (for
   sentences with less than 40 words, we get 88.5%).

   task benchmark performance timing (s)
   part of speech (pos) [15](toutanova et al, 2003) (accuracy) 97.29% 3
   chunking (chk) [16]conll 2000 (f1) 94.32% 2
   name entity recognition (ner) [17]conll 2003 (f1) 89.59% 2
   id14 (srl) [18]conll 2005 (f1) 75.49% 36
   syntactic parsing (psg) [19]id32 (f1) 87.92% 74

feedback

   please email to [20]ronan collobert for any problem report or positive
   feedback. we will be glad to hear from you.

references

   1. http://ronan.collobert.com/senna/license.html
   2. http://ronan.collobert.com/senna/download.html
   3. http://ronan.collobert.com/senna/#compilation
   4. http://ronan.collobert.com/senna/#check
   5. http://ronan.collobert.com/senna/#usage
   6. http://metaoptimize.com/projects/wordreprs
   7. http://www.jmlr.org/
   8. http://ronan.collobert.com/pub/matos/2011_nlp_jmlr.pdf
   9. http://ronan.collobert.com/pub/matos/2011_parsing_aistats.pdf
  10. http://ronan.collobert.com/senna/download.html
  11. http://software.intel.com/en-us/intel-mkl
  12. http://www.microsoft.com/express
  13. http://www.cnts.ua.ac.be/conll2000/chunking
  14. http://www.cis.upenn.edu/~treebank/id121.html
  15. http://nlp.stanford.edu/pubs/tagging.pdf
  16. http://www.cnts.ua.ac.be/conll2000/chunking
  17. http://www.cnts.ua.ac.be/conll2003/ner
  18. http://www.lsi.upc.edu/~srlconll
  19. http://acl.ldc.upenn.edu/j/j93/j93-2004.pdf
  20. mailto:ronan [at] collobert [dot] com
