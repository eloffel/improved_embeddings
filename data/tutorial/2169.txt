   #[1]chris mccormick

[2]chris mccormick    [3]about    [4]tutorials    [5]archive

google's trained id97 model in python

   12 apr 2016

   in this post i   m going to describe how to get google   s pre-trained
   id97 model up and running in python to play with.

   as an interface to id97, i decided to go with a python package
   called gensim. gensim appears to be a popular nlp package, and has some
   nice documentation and tutorials, including for id97.

   you can download google   s pre-trained model [6]here. it   s 1.5gb! it
   includes word vectors for a vocabulary of 3 million words and phrases
   that they trained on roughly 100 billion words from a google news
   dataset. the vector length is 300 features.

   loading this model using gensim is a piece of cake; you just need to
   pass in the path to the model file (update the path in the code below
   to wherever you   ve placed the file).
import gensim

# load google's pre-trained id97 model.
model = gensim.models.id97.load_id97_format('./model/googlenews-vectors-
negative300.bin', binary=true)

   however, if you   re running 32-bit python (like i was) you   re going to
   get a memory error!

   this is because gensim allocates a big matrix to hold all of the word
   vectors, and if you do the math   
3 million words * 300 features * 4bytes/feature = ~3.35gb

      that   s a big matrix!

   assuming you   ve got a 64-bit machine and a decent amount of ram (i   ve
   got 16gb; maybe you could get away with 8gb?), your best bet is to
   switch to 64-bit python. i had a little trouble with this   see my notes
   down at the end of the post.

inspecting the model

   i have a small python project on github called [7]inspect_id97 that
   loads google   s model, and inspects a few different properties of it.

   if you   d like to browse the 3m word list in google   s pre-trained model,
   you can just look at the text files in the [8]vocabulary folder of that
   project. i split the word list across 50 files, and each text file
   contains 100,000 entries from the model. i split it up like this so
   your editor wouldn   t completely choke (hopefully) when you try to open
   them. the words are stored in their original order   i haven   t sorted the
   list alphabetically. i don   t know what determined the original order.

   here are some the questions i had about the vocabulary, which i
   answered in this project:
     * does it include stop words?
          + answer: some stop words like    a   ,    and   ,    of    are excluded,
            but others like    the   ,    also   ,    should    are included.
     * does it include misspellings of words?
          + answer: yes. for instance, it includes both    mispelled    and
               misspelled      the latter is the correct one.
     * does it include commonly paired words?
          + answer: yes. for instance, it includes    soviet_union    and
               new_york   .
     * does it include numbers?
          + answer: not directly; e.g., you won   t find    100   . but it does
            include entries like    ###mhz_ddr2_sdram    where i   m assuming
            the    #    are intended to match any digit.

   here   s a selection of 30    terms    from the vocabulary. pretty weird
   stuff in there!
al_qods
surendra_pal
leaflet
guitar_harmonica
yeoval
suhardi
voatm
streaming_coverage
vawda
lisa_vanderpump
nevern
saleema
saleemi
rbracken@centredaily.com
yellow_wagtails
p_&c;
chicopee_mass._wwlp
gardiners_rd
nevers
stocks_advance_paced
iit_alumnus
popery
kapumpa
fashionably_rumpled
wdtv_live
articles_##v_##w
yerga
weegs
paris_ipn_euronext
##bfm_audio_simon

64-bit python on windows

   it took me some effort get a 64-bit python setup with gensim up and
   running, so i thought i   d share my steps.

   i had been using python(x, y) to get a nice machine learning-oriented
   python environment up and running. however, there doesn   t appear to be
   a 64-bit release of python(x, y) yet   

   i found a package called winpython that does include 64-bit support. it
   looks to be actively supported, and includes all of the features i
   cared about from python(x, y) (it includes the spyder ide and
   scikit-learn with all its dependencies).

   head over to the homepage for winpython [9]here. i initially tried
   winpython for python 3.5, but ran into some issues, and ended up just
   going with python 2.7, which worked fine!

   you may already have this, but for python 2.7 you will need the
   [10]microsoft visual c++ 2008 redistributable package (x64).

   i   m using the following version: [11]winpython-64bit-2.7.10.3

   you can extract winpython wherever you want; i put mine right under c:.

   winpython doesn   t put itself in the windows registry or on the system
   path; however, it does include some batch scripts for doing this. look
   under c:\winpython-64bit-3.5.1.2\scripts\ and you   ll find env.bat and
   register_python.bat.

   open a windows command prompt and run those two batch scripts. then, in
   the same command window, you can install gensim easily by executing the
   following on the command line: easy_install -u gensim

   that should do it! with any luck, you should now be able to run the
   python code at the top of the post to import google   s model.
   [ins: :ins]
   please enable javascript to view the [12]comments powered by disqus.

related posts

     * [13]the inner workings of id97 12 mar 2019
     * [14]applying id97 to recommenders and advertising 15 jun 2018
     * [15]product quantizers for id92 tutorial part 2 22 oct 2017

      2019. all rights reserved.

references

   1. http://mccormickml.com/atom.xml
   2. http://mccormickml.com/
   3. http://mccormickml.com/about/
   4. http://mccormickml.com/tutorials/
   5. http://mccormickml.com/archive/
   6. https://drive.google.com/file/d/0b7xkcwpi5kdynlnuttlss21pqmm/edit?usp=sharing
   7. https://github.com/chrisjmccormick/inspect_id97
   8. https://github.com/chrisjmccormick/inspect_id97/tree/master/vocabulary
   9. https://winpython.github.io/
  10. https://www.microsoft.com/en-us/download/details.aspx?id=15336
  11. https://sourceforge.net/projects/winpython/files/winpython_2.7/2.7.10.3/winpython-64bit-2.7.10.3.exe/download
  12. https://disqus.com/?ref_noscript
  13. http://mccormickml.com/2019/03/12/the-inner-workings-of-id97/
  14. http://mccormickml.com/2018/06/15/applying-id97-to-recommenders-and-advertising/
  15. http://mccormickml.com/2017/10/22/product-quantizer-tutorial-part-2/
