[1]convnetjs denoising autoencoder demo

description

   all the other demos are examples of supervised learning, so in this
   demo i wanted to show an example of unsupervised learning. we are going
   to train an autoencoder on mnist digits.

   an autoencoder is a regression task where the network is asked to
   predict its input (in other words, model the identity function). sounds
   simple enough, except the network has a tight bottleneck of a few
   neurons in the middle (in the default example only two!), forcing it to
   create effective representations that compress the input into a
   low-dimensional code that can be used by the decoder to reproduce the
   original input.

   report questions/bugs/suggestions to [2]@karpathy.

training stats

   current image: [] pause
   learning rate: ____________________ change
   save network snapshot as json
   init network from json snapshot

   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   loss:
   clear graph

   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   reload
   in the visualization below the x and y axis are the firings of neurons
   at some layer for every digit. of special interest is visualizing the
   bottleneck layer because we think of this layer as the compressed code
   of every digit. for example, when the network sees the digit 8 (which
   is 784 numbers that give the pixel values), it compresses that down to
   2 numbers: the firing of neuron 1 and firing of neuron 2. these two
   values are enough for the decoder network that follows to reproduce all
   784 original numbers. as an example, suppose the 8 activates neurons 1
   and 2 to 0.5 and 0.9, we would plot that digit 8 at position (0.5, 0.9)
   in the visualization.
   cycle through visualized neurons at selected layer (if more than 2)

network visualization

references

   1. http://cs.stanford.edu/people/karpathy/convnetjs/
   2. https://twitter.com/karpathy
