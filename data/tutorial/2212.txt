
   [keras-logo-small.jpg] keras documentation
   ____________________
     * [1]home
          + [2]you have just found keras.
          + [3]guiding principles
          + [4]getting started: 30 seconds to keras
          + [5]installation
          + [6]configuring your keras backend
          + [7]support
          + [8]why this name, keras?

     * [9]why use keras

   getting started
     * [10]guide to the sequential model
     * [11]guide to the functional api
     * [12]faq

   models
     * [13]about keras models
     * [14]sequential
     * [15]model (functional api)

   layers
     * [16]about keras layers
     * [17]core layers
     * [18]convolutional layers
     * [19]pooling layers
     * [20]locally-connected layers
     * [21]recurrent layers
     * [22]embedding layers
     * [23]merge layers
     * [24]advanced activations layers
     * [25]id172 layers
     * [26]noise layers
     * [27]layer wrappers
     * [28]writing your own keras layers

   preprocessing
     * [29]sequence preprocessing
     * [30]text preprocessing
     * [31]image preprocessing

     * [32]losses

     * [33]metrics

     * [34]optimizers

     * [35]activations

     * [36]callbacks

     * [37]datasets

     * [38]applications

     * [39]backend

     * [40]initializers

     * [41]regularizers

     * [42]constraints

     * [43]visualization

     * [44]scikit-learn api

     * [45]utils

     * [46]contributing

   examples
     * [47]addition id56
     * [48]baby id56
     * [49]baby memnn
     * [50]cifar-10 id98
     * [51]cifar-10 id98-capsule
     * [52]cifar-10 id98 with augmentation (tf)
     * [53]cifar-10 resnet
     * [54]convolution filter visualization

   [55]keras documentation
     * [56]docs   
     * home
     * [57]edit on github
     __________________________________________________________________

keras: the python deep learning library

   [keras-logo-2018-large-1200.png]

you have just found keras.

   keras is a high-level neural networks api, written in python and
   capable of running on top of [58]tensorflow, [59]cntk, or [60]theano.
   it was developed with a focus on enabling fast experimentation. being
   able to go from idea to result with the least possible delay is key to
   doing good research.

   use keras if you need a deep learning library that:
     * allows for easy and fast prototyping (through user friendliness,
       modularity, and extensibility).
     * supports both convolutional networks and recurrent networks, as
       well as combinations of the two.
     * runs seaid113ssly on cpu and gpu.

   read the documentation at [61]keras.io.

   keras is compatible with: python 2.7-3.6.
     __________________________________________________________________

guiding principles

     * user friendliness. keras is an api designed for human beings, not
       machines. it puts user experience front and center. keras follows
       best practices for reducing cognitive load: it offers consistent &
       simple apis, it minimizes the number of user actions required for
       common use cases, and it provides clear and actionable feedback
       upon user error.
     * modularity. a model is understood as a sequence or a graph of
       standalone, fully configurable modules that can be plugged together
       with as few restrictions as possible. in particular, neural layers,
       cost functions, optimizers, initialization schemes, activation
       functions and id173 schemes are all standalone modules
       that you can combine to create new models.
     * easy extensibility. new modules are simple to add (as new classes
       and functions), and existing modules provide ample examples. to be
       able to easily create new modules allows for total expressiveness,
       making keras suitable for advanced research.
     * work with python. no separate models configuration files in a
       declarative format. models are described in python code, which is
       compact, easier to debug, and allows for ease of extensibility.
     __________________________________________________________________

getting started: 30 seconds to keras

   the core data structure of keras is a model, a way to organize layers.
   the simplest type of model is the [62]sequential model, a linear stack
   of layers. for more complex architectures, you should use the [63]keras
   functional api, which allows to build arbitrary graphs of layers.

   here is the sequential model:
from keras.models import sequential

model = sequential()

   stacking layers is as easy as .add():
from keras.layers import dense

model.add(dense(units=64, activation='relu', input_dim=100))
model.add(dense(units=10, activation='softmax'))

   once your model looks good, configure its learning process with
   .compile():
model.compile(loss='categorical_crossid178',
              optimizer='sgd',
              metrics=['accuracy'])

   if you need to, you can further configure your optimizer. a core
   principle of keras is to make things reasonably simple, while allowing
   the user to be fully in control when they need to (the ultimate control
   being the easy extensibility of the source code).
model.compile(loss=keras.losses.categorical_crossid178,
              optimizer=keras.optimizers.sgd(lr=0.01, momentum=0.9, nesterov=tru
e))

   you can now iterate on your training data in batches:
# x_train and y_train are numpy arrays --just like in the scikit-learn api.
model.fit(x_train, y_train, epochs=5, batch_size=32)

   alternatively, you can feed batches to your model manually:
model.train_on_batch(x_batch, y_batch)

   evaluate your performance in one line:
loss_and_metrics = model.evaluate(x_test, y_test, batch_size=128)

   or generate predictions on new data:
classes = model.predict(x_test, batch_size=128)

   building a id53 system, an image classification model, a
   id63, or any other model is just as fast. the ideas
   behind deep learning are simple, so why should their implementation be
   painful?

   for a more in-depth tutorial about keras, you can check out:
     * [64]getting started with the sequential model
     * [65]getting started with the functional api

   in the [66]examples folder of the repository, you will find more
   advanced models: question-answering with memory networks, text
   generation with stacked lstms, etc.
     __________________________________________________________________

installation

   before installing keras, please install one of its backend engines:
   tensorflow, theano, or cntk. we recommend the tensorflow backend.
     * [67]tensorflow installation instructions.
     * [68]theano installation instructions.
     * [69]cntk installation instructions.

   you may also consider installing the following optional dependencies:
     * [70]cudnn (recommended if you plan on running keras on gpu).
     * hdf5 and [71]h5py (required if you plan on saving keras models to
       disk).
     * [72]graphviz and [73]pydot (used by [74]visualization utilities to
       plot model graphs).

   then, you can install keras itself. there are two ways to install
   keras:
     * install keras from pypi (recommended):

sudo pip install keras

   if you are using a virtualenv, you may want to avoid using sudo:
pip install keras

     * alternatively: install keras from the github source:

   first, clone keras using git:
git clone https://github.com/keras-team/keras.git

   then, cd to the keras folder and run the install command:
cd keras
sudo python setup.py install
     __________________________________________________________________

configuring your keras backend

   by default, keras will use tensorflow as its tensor manipulation
   library. [75]follow these instructions to configure the keras backend.
     __________________________________________________________________

support

   you can ask questions and join the development discussion:
     * on the [76]keras google group.
     * on the [77]keras slack channel. use [78]this link to request an
       invitation to the channel.

   you can also post bug reports and feature requests (only) in [79]github
   issues. make sure to read [80]our guidelines first.
     __________________________________________________________________

why this name, keras?

   keras (          ) means horn in greek. it is a reference to a literary
   image from ancient greek and latin literature, first found in the
   odyssey, where dream spirits (oneiroi, singular oneiros) are divided
   between those who deceive men with false visions, who arrive to earth
   through a gate of ivory, and those who announce a future that will come
   to pass, who arrive through a gate of horn. it's a play on the words
              (horn) /              (fulfill), and               (ivory) /                        
   (deceive).

   keras was initially developed as part of the research effort of project
   oneiros (open-ended neuro-electronic intelligent robot operating
   system).

     "oneiroi are beyond our unravelling --who can be sure what tale they
     tell? not all that men look for comes to pass. two gates there are
     that give passage to fleeting oneiroi; one is made of horn, one of
     ivory. the oneiroi that pass through sawn ivory are deceitful,
     bearing a message that will not be fulfilled; those that come out
     through polished horn have truth behind them, to be accomplished for
     men who see them." homer, odyssey 19. 562 ff (shewring translation).
     __________________________________________________________________

   [81]next
     __________________________________________________________________

   built with [82]mkdocs using a [83]theme provided by [84]read the docs.

   [85]github [86]next   

references

   visible links
   1. https://keras.io/./
   2. https://keras.io/#you-have-just-found-keras
   3. https://keras.io/#guiding-principles
   4. https://keras.io/#getting-started-30-seconds-to-keras
   5. https://keras.io/#installation
   6. https://keras.io/#configuring-your-keras-backend
   7. https://keras.io/#support
   8. https://keras.io/#why-this-name-keras
   9. https://keras.io/why-use-keras/
  10. https://keras.io/getting-started/sequential-model-guide/
  11. https://keras.io/getting-started/functional-api-guide/
  12. https://keras.io/getting-started/faq/
  13. https://keras.io/models/about-keras-models/
  14. https://keras.io/models/sequential/
  15. https://keras.io/models/model/
  16. https://keras.io/layers/about-keras-layers/
  17. https://keras.io/layers/core/
  18. https://keras.io/layers/convolutional/
  19. https://keras.io/layers/pooling/
  20. https://keras.io/layers/local/
  21. https://keras.io/layers/recurrent/
  22. https://keras.io/layers/embeddings/
  23. https://keras.io/layers/merge/
  24. https://keras.io/layers/advanced-activations/
  25. https://keras.io/layers/id172/
  26. https://keras.io/layers/noise/
  27. https://keras.io/layers/wrappers/
  28. https://keras.io/layers/writing-your-own-keras-layers/
  29. https://keras.io/preprocessing/sequence/
  30. https://keras.io/preprocessing/text/
  31. https://keras.io/preprocessing/image/
  32. https://keras.io/losses/
  33. https://keras.io/metrics/
  34. https://keras.io/optimizers/
  35. https://keras.io/activations/
  36. https://keras.io/callbacks/
  37. https://keras.io/datasets/
  38. https://keras.io/applications/
  39. https://keras.io/backend/
  40. https://keras.io/initializers/
  41. https://keras.io/regularizers/
  42. https://keras.io/constraints/
  43. https://keras.io/visualization/
  44. https://keras.io/scikit-learn-api/
  45. https://keras.io/utils/
  46. https://keras.io/contributing/
  47. https://keras.io/examples/addition_id56/
  48. https://keras.io/examples/babi_id56/
  49. https://keras.io/examples/babi_memnn/
  50. https://keras.io/examples/cifar10_id98/
  51. https://keras.io/examples/cifar10_id98_capsule/
  52. https://keras.io/examples/cifar10_id98_tfaugment2d/
  53. https://keras.io/examples/cifar10_resnet/
  54. https://keras.io/examples/conv_filter_visualization/
  55. https://keras.io/./
  56. https://keras.io/./
  57. https://github.com/keras-team/keras/tree/master/docs
  58. https://github.com/tensorflow/tensorflow
  59. https://github.com/microsoft/cntk
  60. https://github.com/theano/theano
  61. https://keras.io/
  62. https://keras.io/getting-started/sequential-model-guide
  63. https://keras.io/getting-started/functional-api-guide
  64. https://keras.io/getting-started/sequential-model-guide
  65. https://keras.io/getting-started/functional-api-guide
  66. https://github.com/keras-team/keras/tree/master/examples
  67. https://www.tensorflow.org/install/
  68. http://deeplearning.net/software/theano/install.html#install
  69. https://docs.microsoft.com/en-us/cognitive-toolkit/setup-cntk-on-your-machine
  70. https://docs.nvidia.com/deeplearning/sdk/cudnn-install/
  71. http://docs.h5py.org/en/latest/build.html
  72. https://graphviz.gitlab.io/download/
  73. https://github.com/erocarrera/pydot
  74. https://keras.io/visualization/
  75. https://keras.io/backend/
  76. https://groups.google.com/forum/#!forum/keras-users
  77. https://kerasteam.slack.com/
  78. https://keras-slack-autojoin.herokuapp.com/
  79. https://github.com/keras-team/keras/issues
  80. https://github.com/keras-team/keras/blob/master/contributing.md
  81. https://keras.io/why-use-keras/
  82. https://www.mkdocs.org/
  83. https://github.com/snide/sphinx_rtd_theme
  84. https://readthedocs.org/
  85. http://github.com/keras-team/keras/
  86. https://keras.io/why-use-keras/

   hidden links:
  88. https://keras.io/
