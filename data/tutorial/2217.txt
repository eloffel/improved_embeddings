   #[1]analytics vidhya    feed [2]analytics vidhya    comments feed
   [3]analytics vidhya    tutorial: optimizing neural networks using keras
   (with image recognition case study) comments feed [4]alternate
   [5]alternate

   iframe: [6]//googletagmanager.com/ns.html?id=gtm-mpsm42v

   [7]new certified ai & ml blackbelt program (beginner to master) -
   enroll today @ launch offer (coupon: blackbelt10)

   (button) search______________
     * [8]learn
          + [9]blog archive
               o [10]machine learning
               o [11]deep learning
               o [12]career
               o [13]stories
          + [14]datahack radio
          + [15]infographics
          + [16]training
          + [17]learning paths
               o [18]sas business analyst
               o [19]learn data science on r
               o [20]data science in python
               o [21]data science in weka
               o [22]data visualization with tableau
               o [23]data visualization with qlikview
               o [24]interactive data stories with d3.js
          + [25]glossary
     * [26]engage
          + [27]discuss
          + [28]events
          + [29]datahack summit 2018
          + [30]datahack summit 2017
          + [31]student datafest
          + [32]write for us
     * [33]compete
          + [34]hackathons
     * [35]get hired
          + [36]jobs
     * [37]courses
          + [38]id161 using deep learning
          + [39]natural language processing using python
          + [40]introduction to data science
          + [41]microsoft excel
          + [42]more courses
     * [43]contact

     *
     *
     *
     *

     * [44]home
     * [45]blog archive
     * [46]trainings
     * [47]discuss
     * [48]datahack
     * [49]jobs
     * [50]corporate

     *

   [51]analytics vidhya - learn everything about analytics

learn everything about analytics

   [52][black-belt-2.gif]
   [53][black-belt-2.gif]
   [54][black-belt-2.gif]
   (button) search______________

   [55]analytics vidhya - learn everything about analytics
     * [56]learn
          + [57]blog archive
               o [58]machine learning
               o [59]deep learning
               o [60]career
               o [61]stories
          + [62]datahack radio
          + [63]infographics
          + [64]training
          + [65]learning paths
               o [66]sas business analyst
               o [67]learn data science on r
               o [68]data science in python
               o [69]data science in weka
               o [70]data visualization with tableau
               o [71]data visualization with qlikview
               o [72]interactive data stories with d3.js
          + [73]glossary
     * [74]engage
          + [75]discuss
          + [76]events
          + [77]datahack summit 2018
          + [78]datahack summit 2017
          + [79]student datafest
          + [80]write for us
     * [81]compete
          + [82]hackathons
     * [83]get hired
          + [84]jobs
     * [85]courses
          + [86]id161 using deep learning
          + [87]natural language processing using python
          + [88]introduction to data science
          + [89]microsoft excel
          + [90]more courses
     * [91]contact

   [92]home [93]machine learning [94]tutorial: optimizing neural networks
   using keras (with image recognition case study)

   [95]machine learning[96]python

tutorial: optimizing neural networks using keras (with image recognition case
study)

   [97]faizan shaikh, october 12, 2016

introduction

   in my [98]previous article, i discussed the implementation of neural
   networks using tensorflow. continuing the series of articles on neural
   network libraries, i have decided to throw light on keras     supposedly
   the best deep learning library so far.

   i have been working on deep learning for sometime now and according to
   me, the most difficult thing when dealing with neural networks is the
   never-ending range of parameters to tune. with increase in depth of a
   neural network, it becomes increasingly difficult to take care of all
   the parameters. mostly, people rely on intuition and experience to tune
   it. in reality, research is still rampant on this topic.

   [99]deep-learning-1

   thankfully we have keras, which takes care of a lot of this hard work
   and provides an easier interface!

   in this article, i am going to share my experience of working in deep
   learning. we will begin with an overview of keras, its features and
   differentiation over other libraries. we will then, look at a simple
   implementation of neural networks in keras. and then, i will take you
   through a hands-on exercise on parameter tuning in neural networks.


table of contents

    1. [100]keras : overview
    2. [101]keras: advantages
    3. [102]keras: limitations
    4. [103]general way to solve problems with neural networks
    5. [104]starting with a simple keras implementation on    identify the
       digits   
    6. [105]hyperparameters to look out for in neural networks
    7. [106]getting your hands dirty (parameter tuning)
    8. [107]where to go from here?
    9. [108]additional resources


1. keras : overview

   [109]keras-logo-small

   keras is a high level library, used specially for building neural
   network models. it is written in python and is compatible with both
   python     2.7 & 3.5. keras was specifically developed for fast execution
   of ideas. it has a simple and highly modular interface, which makes it
   easier to create even complex neural network models. this library
   abstracts low level libraries, namely theano and tensorflow so that,
   the user is free from    implementation details    of these libraries.

   the key features of keras are:

     * modularity : modules necessary for building a neural network are
       included in a simple interface so that keras is easier to use for
       the end user.
     * minimalistic : implementation is short and concise.
     * extensibility : it   s very easy to write a new module for keras and
       makes it suitable for advance research.


2. keras : advantages

   being a high level library and its simpler interface, keras certainly
   shines as one of the best deep learning library available. few features
   of keras, which stands out in comparison with other libraries are:

     * in comparison to theano and tensorflow, it takes in all the
       advantages of both of these libraries and tries to give a better
          user experience   .
     * as keras is a python library, it is more accessible to general
       public because of python   s inherent simplicity as a programming
       language.
     * a similar library in comparison to keras is lasagne, but having
       used both i can say that keras is much easier to use.

   given the above reasons, it is no surprise that keras is increasingly
   becoming popular as a deep learning library.


3. keras : limitations

     * i think that having a dependency on low level libraries like theano
       / tensorflow is a double edged sword. this is because keras cannot
       go    out of the realms    of these libraries. for example, both theano
       and tensorflow do not support gpus other than nvidia (currently).
       and hence, keras too doesn   t have the corresponding support.
     * also unlike lasagne, keras completely abstracts the low level
       languages. so, it is less flexible when it comes to building custom
       operations.
     * the last point i   ll make is that keras is relatively new. the first
       version was released in early 2015, and it has undergone many
       changes since then. although keras is already used in production,
       but you should think twice before deploying keras models for
       productions.


4. general way to solve problems with neural networks

   neural networks is a special type of machine learning (ml) algorithm.
   so, like every ml algorithm, it follows the usual ml workflow of data
   preprocessing, model building and model evaluation. for the sake of
   conciseness, i have listed out a to-d0 list of how to approach a neural
   network problem.
     * check if it is a problem where neural network gives you uplift over
       traditional algorithms (refer to the checklist in the section
       above)
     * do a survey of which neural network architecture is most suitable
       for the required problem
     * define neural network architecture through whichever language /
       library you choose.
     * convert data to right format and divide it in batches
     * pre-process the data according to your needs
     * augment data to increase size and make better trained models
     * feed batches to neural network
     * train and monitor changes in training and validation data sets
     * test your model, and save it for future use


5. starting with a simple keras implementation on    identify the digits   

   before starting this experiment, make sure you have keras installed in
   your system. refer the [110]official installation guide. we will use
   tensorflow for backend, so make sure you have this done in your config
   file. if not, follow the steps given [111]here.

   here, we solve our deep learning practice problem     [112]identify the
   digits.  let   s take a look at our problem statement:

   our problem is an image recognition problem, to identify digits from a
   given 28 x 28 image. we have a subset of images for training and the
   rest for testing our model. so first, download the train and test
   files. the dataset contains a zipped file of all the images and both
   the train.csv and test.csv have the name of corresponding train and
   test images. any additional features are not provided in the datasets,
   just the raw images are provided in    .png    format.

   let   s start:

step 0: getting ready

   a) import all the necessary libraries
%pylab inline
import os
import numpy as np
import pandas as pd
from scipy.misc import imread
from sklearn.metrics import accuracy_score

import tensorflow as tf
import keras


   b) let   s set a seed value, so that we can control our models randomness
# to stop potential randomness
seed = 128
rng = np.random.randomstate(seed)

   c) the first step is to set directory paths, for safekeeping!
root_dir = os.path.abspath('../..')
data_dir = os.path.join(root_dir, 'data')
sub_dir = os.path.join(root_dir, 'sub')
# check for existence
os.path.exists(root_dir)
os.path.exists(data_dir)
os.path.exists(sub_dir)


step 1: data loading and preprocessing

   a) now let us read our datasets. these are in .csv formats, and have a
   filename along with the appropriate labels
train = pd.read_csv(os.path.join(data_dir, 'train', 'train.csv'))
test = pd.read_csv(os.path.join(data_dir, 'test.csv'))

sample_submission = pd.read_csv(os.path.join(data_dir, 'sample_submission.csv'))

train.head()

     filename label
   0 0.png    4
   1 1.png    9
   2 2.png    1
   3 3.png    7
   4 4.png    3


   b) let us see what our data looks like! we read our image and display
   it.
img_name = rng.choice(train.filename)
filepath = os.path.join(data_dir, 'train', 'images', 'train', img_name)

img = imread(filepath, flatten=true)

pylab.imshow(img, cmap='gray')
pylab.axis('off')
pylab.show()

   [113]3

   c) the above image is represented as numpy array, as seen below

   [114]one

   d) for easier data manipulation, let   s store all our images as numpy
   arrays
temp = []
for img_name in train.filename:
    image_path = os.path.join(data_dir, 'train', 'images', 'train', img_name)
    img = imread(image_path, flatten=true)
    img = img.astype('float32')
    temp.append(img)

train_x = np.stack(temp)

train_x /= 255.0
train_x = train_x.reshape(-1, 784).astype('float32')

temp = []
for img_name in test.filename:
    image_path = os.path.join(data_dir, 'train', 'images', 'test', img_name)
    img = imread(image_path, flatten=true)
    img = img.astype('float32')
    temp.append(img)

test_x = np.stack(temp)

test_x /= 255.0
test_x = test_x.reshape(-1, 784).astype('float32')

train_y = keras.utils.np_utils.to_categorical(train.label.values)


   e) as this is a typical ml problem, to test the proper functioning of
   our model we create a validation set. let   s take a split size of 70:30
   for train set vs validation set
split_size = int(train_x.shape[0]*0.7)

train_x, val_x = train_x[:split_size], train_x[split_size:]
train_y, val_y = train_y[:split_size], train_y[split_size:]
train.label.ix[split_size:]


step 2: model building

   a) now comes the main part! let us define our neural network
   architecture. we define a neural network with 3 layers  input, hidden
   and output. the number of neurons in input and output are fixed, as the
   input is our 28 x 28 image and the output is a 10 x 1 vector
   representing the class. we take 50 neurons in the hidden layer. here,
   we use [115]adam as our optimization algorithms, which is an efficient
   variant of id119 algorithm. there are a number of other
   optimizers available in keras (refer [116]here). in case you don   t
   understand any of these terminologies, check out the [117]article on
   fundamentals of neural network to know more in depth of how it works.
# define vars
input_num_units = 784
hidden_num_units = 50
output_num_units = 10

epochs = 5
batch_size = 128

# import keras modules

from keras.models import sequential
from keras.layers import dense

# create model
model = sequential([
  dense(output_dim=hidden_num_units, input_dim=input_num_units, activation='relu
'),
  dense(output_dim=output_num_units, input_dim=hidden_num_units, activation='sof
tmax'),
])

# compile the model with necessary attributes
model.compile(loss='categorical_crossid178', optimizer='adam', metrics=['accur
acy'])

   b) it   s time to train our model
trained_model = model.fit(train_x, train_y, nb_epoch=epochs, batch_size=batch_si
ze, validation_data=(val_x, val_y))

   [118]training_keras


step 3: model evaluation

   a) to test our model with our own eyes, let   s visualize its predictions
pred = model.predict_classes(test_x)

img_name = rng.choice(test.filename)
filepath = os.path.join(data_dir, 'train', 'images', 'test', img_name)

img = imread(filepath, flatten=true)

test_index = int(img_name.split('.')[0]) - train.shape[0]

print "prediction is: ", pred[test_index]

pylab.imshow(img, cmap='gray')
pylab.axis('off')
pylab.show()

prediction is:  8
[119] 8

   b) we see that our model performs well even on being very simple. now
   we create a submission with our model
sample_submission.filename = test.filename; sample_submission.label = pred
sample_submission.to_csv(os.path.join(sub_dir, 'sub02.csv'), index=false)


6. hyperparameters to look out for in neural networks

   [120]dl_meme3 i feel that, hyperparameter tuning is the hardest in
   neural network in comparison to any other machine learning algorithm.
   you would be insane to apply grid search, as there are numerous
   parameters when it comes to tuning a neural network.

   note: i have discussed a few more details, on when to apply neural
   networks in the following article [121]an introduction to implementing
   neural networks using tensorflow

   some important parameters to look out for while optimizing neural
   networks are:
     * type of architecture
     * number of layers
     * number of neurons in a layer
     * id173 parameters
     * learning rate
     * type of optimization / id26 technique to use
     * dropout rate
     * weight sharing

   also, there may be many more hyperparameters depending on the type of
   architecture. for example, if you use a convolutional neural network,
   you would have to look at hyperparameters like convolutional filter
   size, pooling value, etc.

   the best way to pick good parameters is to understand your problem
   domain. research the previously applied techniques on your data, and
   most importantly  ask experienced people for insights to the problem.
   it   s the only way you can try to ensure you get a    good enough    neural
   network model.

   here are some resources for tips and tricks for training neural
   networks. ([122]resource 1, [123]resource 2, [124]resource 3)


7. getting your hands dirty

   let us take our knowledge of hyperparameters and start tweaking our
   neural network model.
     * as we did before, we redo all the pre-requisite things. let   s
       import the modules

%pylab inline

import os
import numpy as np
import pandas as pd
from scipy.misc import imread
from sklearn.metrics import accuracy_score
import tensorflow as tf
import keras

from keras.models import sequential
from keras.layers import dense, activation, dropout, convolution2d, flatten, max
pooling2d, reshape, inputlayer
     * as before, set seed value

# to stop potential randomness
seed = 128
rng = np.random.randomstate(seed)
     * set paths for further use

root_dir = os.path.abspath('../..')
data_dir = os.path.join(root_dir, 'data')
sub_dir = os.path.join(root_dir, 'sub')

# check for existence
os.path.exists(root_dir)
os.path.exists(data_dir)
os.path.exists(sub_dir)
     * read the datasets and convert them to usable form

train = pd.read_csv(os.path.join(data_dir, 'train', 'train.csv'))
test = pd.read_csv(os.path.join(data_dir, 'test.csv'))

sample_submission = pd.read_csv(os.path.join(data_dir, 'sample_submission.csv'))

temp = []
for img_name in train.filename:
  image_path = os.path.join(data_dir, 'train', 'images', 'train', img_name)
  img = imread(image_path, flatten=true)
  img = img.astype('float32')
  temp.append(img)

train_x = np.stack(temp)

train_x /= 255.0
train_x = train_x.reshape(-1, 784).astype('float32')

temp = []
for img_name in test.filename:
  image_path = os.path.join(data_dir, 'train', 'images', 'test', img_name)
  img = imread(image_path, flatten=true)
  img = img.astype('float32')
  temp.append(img)

test_x = np.stack(temp)

test_x /= 255.0
test_x = test_x.reshape(-1, 784).astype('float32')

train_y = keras.utils.np_utils.to_categorical(train.label.values)
     * divide our train data into training and validation

split_size = int(train_x.shape[0]*0.7)

train_x, val_x = train_x[:split_size], train_x[split_size:]
train_y, val_y = train_y[:split_size], train_y[split_size:]
     * let   s start our tweaking! lets change our model to be    wide   , i.e.
       increase the number of neurons in our hidden layer

# define vars
input_num_units = 784
hidden_num_units = 500
output_num_units = 10
epochs = 5
batch_size = 128

model = sequential([
 dense(output_dim=hidden_num_units, input_dim=input_num_units, activation='relu'
),

 dense(output_dim=output_num_units, input_dim=hidden_num_units, activation='soft
max'),
])
     *  let   s test this model

model.compile(loss='categorical_crossid178', optimizer='adam', metrics=['accur
acy'])

trained_model_500 = model.fit(train_x, train_y, nb_epoch=epochs, batch_size=batc
h_size, validation_data=(val_x, val_y))

   [125]trained_500
     * we see that this model performs significantly better than before!
       now instead of    wide   , we try making our model    deep   . we add four
       more hidden layers with 50 neurons each

# define vars
input_num_units = 784
hidden1_num_units = 50
hidden2_num_units = 50
hidden3_num_units = 50
hidden4_num_units = 50
hidden5_num_units = 50
output_num_units = 10

epochs = 5
batch_size = 128

model = sequential([
 dense(output_dim=hidden1_num_units, input_dim=input_num_units, activation='relu
'),
 dense(output_dim=hidden2_num_units, input_dim=hidden1_num_units, activation='re
lu'),
 dense(output_dim=hidden3_num_units, input_dim=hidden2_num_units, activation='re
lu'),
 dense(output_dim=hidden4_num_units, input_dim=hidden3_num_units, activation='re
lu'),
 dense(output_dim=hidden5_num_units, input_dim=hidden4_num_units, activation='re
lu'),

dense(output_dim=output_num_units, input_dim=hidden5_num_units, activation='soft
max'),
 ])
     *  any guesses on how this model would perform?

model.compile(loss='categorical_crossid178', optimizer='adam', metrics=['accur
acy'])

trained_model_5d = model.fit(train_x, train_y, nb_epoch=epochs, batch_size=batch
_size, validation_data=(val_x, val_y))

   [126]train_5d
     * looks like we didn   t get what we expected. this may be because our
       model may be overfitting. to deal with this, we use a method called
       dropout. dropout is essentially randomly turning off parts of the
       model so that it does not    overlearn    a concept (to read more about
       dropout, check out the [127]article on core concepts of neural
       networks)

# define vars
input_num_units = 784
hidden1_num_units = 50
hidden2_num_units = 50
hidden3_num_units = 50
hidden4_num_units = 50
hidden5_num_units = 50
output_num_units = 10

epochs = 5
batch_size = 128

dropout_ratio = 0.2

model = sequential([
 dense(output_dim=hidden1_num_units, input_dim=input_num_units, activation='relu
'),
 dropout(dropout_ratio),
 dense(output_dim=hidden2_num_units, input_dim=hidden1_num_units, activation='re
lu'),
 dropout(dropout_ratio),
 dense(output_dim=hidden3_num_units, input_dim=hidden2_num_units, activation='re
lu'),
 dropout(dropout_ratio),
 dense(output_dim=hidden4_num_units, input_dim=hidden3_num_units, activation='re
lu'),
 dropout(dropout_ratio),
 dense(output_dim=hidden5_num_units, input_dim=hidden4_num_units, activation='re
lu'),
 dropout(dropout_ratio),

dense(output_dim=output_num_units, input_dim=hidden5_num_units, activation='soft
max'),
 ])
     * now let   s check our accuracy

model.compile(loss='categorical_crossid178', optimizer='adam', metrics=['accur
acy'])

trained_model_5d_with_drop = model.fit(train_x, train_y, nb_epoch=epochs, batch_
size=batch_size, validation_data=(val_x, val_y))

   [128]train_5d_with_drop
     * something seems off. it seems that our model is not performing well
       enough. one reason may be because we are not training our model to
       its full potential. increase our training epochs to 50 and check it
       out!

# define vars
input_num_units = 784
hidden1_num_units = 50
hidden2_num_units = 50
hidden3_num_units = 50
hidden4_num_units = 50
hidden5_num_units = 50
output_num_units = 10

epochs = 50
batch_size = 128
model = sequential([
 dense(output_dim=hidden1_num_units, input_dim=input_num_units, activation='relu
'),
 dropout(0.2),
 dense(output_dim=hidden2_num_units, input_dim=hidden1_num_units, activation='re
lu'),
 dropout(0.2),
 dense(output_dim=hidden3_num_units, input_dim=hidden2_num_units, activation='re
lu'),
 dropout(0.2),
 dense(output_dim=hidden4_num_units, input_dim=hidden3_num_units, activation='re
lu'),
 dropout(0.2),
 dense(output_dim=hidden5_num_units, input_dim=hidden4_num_units, activation='re
lu'),
 dropout(0.2),

dense(output_dim=output_num_units, input_dim=hidden5_num_units, activation='soft
max'),
])
     * well i   m excited to see what will happen. are you?

model.compile(loss='categorical_crossid178', optimizer='adam', metrics=['accur
acy'])

trained_model_5d_with_drop_more_epochs = model.fit(train_x, train_y, nb_epoch=ep
ochs, batch_size=batch_size, validation_data=(val_x, val_y))

   [129]train_drop_with_more_epoch
     * yes! this is good. we see an increase in accuracy. (as an optional
       assignment, you could try increasing number of epochs to train
       more) let   s try another thing, we make our model both deep and
       wide! we also implement all the tweaks that we learnt before. for
       the purpose of getting faster results, we reduce the training
       epochs. but you are free to increase them if you want.

# define vars
input_num_units = 784
hidden1_num_units = 500
hidden2_num_units = 500
hidden3_num_units = 500
hidden4_num_units = 500
hidden5_num_units = 500
output_num_units = 10

epochs = 25
batch_size = 128

model = sequential([
 dense(output_dim=hidden1_num_units, input_dim=input_num_units, activation='relu
'),
 dropout(0.2),
 dense(output_dim=hidden2_num_units, input_dim=hidden1_num_units, activation='re
lu'),
 dropout(0.2),
 dense(output_dim=hidden3_num_units, input_dim=hidden2_num_units, activation='re
lu'),
 dropout(0.2),
 dense(output_dim=hidden4_num_units, input_dim=hidden3_num_units, activation='re
lu'),
 dropout(0.2),
 dense(output_dim=hidden5_num_units, input_dim=hidden4_num_units, activation='re
lu'),
 dropout(0.2),

dense(output_dim=output_num_units, input_dim=hidden5_num_units, activation='soft
max'),
 ])
     * forgive me for the spoliers, but its clear that our model would be
       better than all our models before. [130]dl_meme2 still lets check
       it out

model.compile(loss='categorical_crossid178', optimizer='adam', metrics=['accur
acy'])

trained_model_deep_n_wide = model.fit(train_x, train_y, nb_epoch=epochs, batch_s
ize=batch_size, validation_data=(val_x, val_y))

   [131]train_model_deep_n_wide
     *  seems like we broke all the records! lets submit this model to the
       solution checker

pred = model.predict_classes(test_x)
 sample_submission.filename = test.filename; sample_submission.label = pred
 sample_submission.to_csv(os.path.join(sub_dir, 'sub03.csv'), index=false)
     *  as a last tweak, we will try changing the type of our model. until
       now we made multilayer id88s (mlp). let   s now change it to a
       convolutional neural network. (to get an in-depth introduction to
       convolutional neural network (id98), go through [132]this article).
       one thing necessary for running a id98 is that it requires to be
       arranged in a specific format. so let   s reshape our data and feed
       it to our id98.

# reshape data

train_x_temp = train_x.reshape(-1, 28, 28, 1)
val_x_temp = val_x.reshape(-1, 28, 28, 1)

# define vars
input_shape = (784,)
input_reshape = (28, 28, 1)

conv_num_filters = 5
conv_filter_size = 5

pool_size = (2, 2)

hidden_num_units = 50
output_num_units = 10

epochs = 5
batch_size = 128

model = sequential([
 inputlayer(input_shape=input_reshape),

 convolution2d(25, 5, 5, activation='relu'),
 maxpooling2d(pool_size=pool_size),

 convolution2d(25, 5, 5, activation='relu'),
 maxpooling2d(pool_size=pool_size),

 convolution2d(25, 4, 4, activation='relu'),

 flatten(),

 dense(output_dim=hidden_num_units, activation='relu'),

 dense(output_dim=output_num_units, input_dim=hidden_num_units, activation='soft
max'),
])

model.compile(loss='categorical_crossid178', optimizer='adam', metrics=['accur
acy'])

trained_model_conv = model.fit(train_x_temp, train_y, nb_epoch=epochs, batch_siz
e=batch_size, validation_data=(val_x_temp, val_y))

   [133]train_id98

   this result blows your mind, doesn   t it. even with such small training
   time, the performance is way better! this proves that a better
   architecture can certainly boost your performance when dealing with
   neural networks.

   it   s time to let go of the training wheels. there   s many things you can
   try, so many tweaks to do. try this on your end and let us know how it
   goes!


8. where to go from here?

   now, you have a basic overview of keras and a hands-on experience of
   implementing neural networks. there is still much more you can do. for
   example, i really like the implementation of [134]keras to build image
   analogies. in this project, the authors train a neural network to
   understand an image, and recreate learnt attributes to another image.
   as seen below, the first two images are given as input, where the model
   trains on the first image and on giving input as second image, gives
   output as the third image.

   [135]season-xfer

   neural network tuning is still considered as a    dark art   . so, don   t
   expect that you would get the best model in your first try. build,
   evaluate and reiterate, this is how you would be a better neural
   network practitioner.

   another point you should know that there are other methods to ensure
   that you would get a    good enough    neural network model without
   training it from scratch. techniques like pre-training and transfer
   learning, are essential to know when you are implementing neural
   network models to solve real life problems.


9. additional resources

     * [136]keras official repository
     * [137]a curated list of keras resources
     * [138]keras user group


end notes

   i hope you found this article helpful. now, it   s time for you to
   practice and read as much as you can. good luck! if you have any
   recommendations / suggestions on neural networks, i   d love to interact
   with you in comments. if you have any more doubts or queries feel to
   drop in your comments below. try out the practice problem [139]identify
   the digits yourself and let me know what was your experience.

you can test your skills and knowledge. check out [140]live competitions and
compete with best data scientists from all over the world.

   you can also read this article on analytics vidhya's android app
   [141]get it on google play

share this:

     * [142]click to share on linkedin (opens in new window)
     * [143]click to share on facebook (opens in new window)
     * [144]click to share on twitter (opens in new window)
     * [145]click to share on pocket (opens in new window)
     * [146]click to share on reddit (opens in new window)
     *

like this:

   like loading...

related articles

   [ins: :ins]

   tags : [147]deep learning, [148]implementation of neural networks,
   [149]keras, [150]keras using tensorflow, [151]neural network,
   [152]neural networks, [153]neural networks using tensorflow,
   [154]parameter tuning, [155]parameter tuning in keras, [156]python
   next article

data science consultant rwe     gurgaon / pune ( 5-8 years of experience )

   previous article

exclusive interview with sr data scientist, paytm     rohan rao (datahack
summit     workshop speaker)

[157]faizan shaikh

   faizan is a data science enthusiast and a deep learning rookie. a
   recent comp. sc. undergrad, he aims to utilize his skills to push the
   boundaries of ai research.
     *
     *

   this article is quite old and you might not get a prompt response from
   the author. we request you to post this comment on analytics vidhya's
   [158]discussion portal to get your queries resolved

35 comments

     * dr venugopala rao manneni says:
       [159]october 13, 2016 at 6:11 am
       very useful for the people who is looking for nn with python. keras
       is the power ful package for nn when compared to other packages
       available
       [160]reply
          + faizan shaikh says:
            [161]october 13, 2016 at 9:20 am
            thanks! hope it helps others too
            [162]reply
     * pradeep says:
       [163]october 13, 2016 at 9:46 am
       hi great article thank you . one clarification i am unable to
       install tensorflow in windows is it only for mac? thanks
       [164]reply
          + faizan shaikh says:
            [165]october 13, 2016 at 10:48 am
            hello pradeep.
            unfortunately windows is still not supported now (october
            2016: refer this issue
            [166]https://github.com/tensorflow/tensorflow/issues/17). on
            the other hand, you could try installing linux on virtual
            machine or in a docker container. (for docker refer here
            [167]http://www.netinstructions.com/how-to-install-and-run-ten
            sorflow-on-a-windows-pc/)
            [168]reply
     * venkat says:
       [169]october 13, 2016 at 1:56 pm
       hello faizan,
       i have been following your posts on deep learning, they are simple
       and easy to follow. could you please help me with the hardware
       (cost effective for students) requirement for deep learning, so
       that it can run data sets listed here
       [170]https://github.com/christoschristofidis/awesome-deep-learning.
       [171]reply
          + faizan shaikh says:
            [172]october 13, 2016 at 2:52 pm
            hello venkat. its great that your following the articles. do
            hold on as there are may more of these to come!
            to answer your question; small or medium datasets are runnable
            on a typical laptop given enough time. i personally have an
            hp-pavilion laptop with i5 processor, 4gb ram and 2gb nvidia
            gt740m. for bigger datasets like id163 which have hundreds
            of gbs i would suggest you move on to bigger machines. as you
            are still a student, you could request your college for a
            machine with good specs. for my be project, i used my
            college   s workstation (i7, 8gb ram, 12 gb nvidia titan x)
            i wrote a note on how to setup your machine for deep learning,
            do go through it (step 1 of this article
            [173]https://www.analyticsvidhya.com/blog/2016/08/deep-learnin
            g-path/)
            [174]reply
     * anna huras says:
       [175]november 6, 2016 at 1:39 am
       can id98 be used for non-2d problem such as a general regression
       problem(one y and many x)? if so, could you provide an example
       code?
       [176]reply
          + faizan shaikh says:
            [177]november 7, 2016 at 7:30 am
            hi anna, transferring your question here so that we can have a
            discussion. ( link:
            [178]https://discuss.analyticsvidhya.com/t/can-id98-be-used-for
            -non-2d-problems/13013?u=jalfaizy )
            [179]reply
     * mayank satnalika says:
       [180]december 15, 2016 at 8:52 pm
       i   m unable to train the model and get the following error ( on
       jupyter notebook python 2.7):
       exception: error when checking model input: expected dense_input_5
       to have 2 dimensions, but got array with shape (24010, 28, 28)
       [181]reply
          + mayank satnalika says:
            [182]december 15, 2016 at 8:56 pm
            sorry did not follow the reshape step.
            now getting the following
            exception: error when checking model target: expected dense_14
            to have shape (none, 10) but got array with shape (34301, 1)
            [183]reply
               o faizan shaikh says:
                 [184]january 13, 2017 at 1:53 pm
                 hi mayank
                 did you follow this step?
                 train_y =
                 keras.utils.np_utils.to_categorical(train.label.values)
                 [185]reply
     * jayanta says:
       [186]january 30, 2017 at 11:03 am
       i am trying with 100 x 100 size images. so, i have put 10000 as
       input to the first layer. the reshape
       train_x.reshape(-1,10000).astype(float32)
       gives an error as the total size of new array should be unchanged.
       [187]reply
          + faizan shaikh says:
            [188]february 2, 2017 at 8:12 am
            there must be an issue with the input you are giving. could
            you print the original shape of train_x and revert back here?
            [189]reply
     * gudddu says:
       [190]march 8, 2017 at 4:10 am
       hi faizan,
       where is dataset? how can i download it?
       [191]reply
          + faizan shaikh says:
            [192]march 8, 2017 at 9:29 am
            hey! you can find the dataset here
            [193]https://datahack.analyticsvidhya.com/contest/practice-pro
            blem-identify-the-digits/ . the dataset is part of practice
            problem
            [194]reply
               o liron liron says:
                 [195]august 14, 2017 at 10:09 pm
                 i didn   t find the files (train.csv and test.csv) in the
                 link above. can you explain where they are?
                 maybe i need to convert the files in the link?
                 [196]reply
                    # faizan shaikh says:
                      [197]august 18, 2017 at 3:18 pm
                      you would have to register in this competition first
                      to access the data
                      [198]https://datahack.analyticsvidhya.com/contest/pr
                      actice-problem-identify-the-digits/
                      [199]reply
     * max william says:
       [200]april 8, 2017 at 11:15 am
       hello pradeep.
       windows is now supported i am referring to tensorflow
       best regards,
       max
       [201]reply
          + faizan shaikh says:
            [202]may 24, 2017 at 9:07 am
            thanks max for sharing the news
            [203]reply
     * gutchapa says:
       [204]may 10, 2017 at 6:04 pm
       where is the zip files mentioned in this article.? the linik given
       takes to mnist dataset.. not the train.csv or test.csv please
       provide the link
       [205]reply
          + faizan shaikh says:
            [206]may 24, 2017 at 9:06 am
            you can find them here
            [207]https://datahack.analyticsvidhya.com/contest/practice-pro
            blem-identify-the-digits
            [208]reply
     * pradanuari says:
       [209]may 13, 2017 at 5:15 pm
       hi!
       i absolutely love your tutorial! but would you mind to give
       tutorial for how to tune the number of hidden layer?
       thanks
       [210]reply
          + faizan shaikh says:
            [211]may 24, 2017 at 9:04 am
            great idea. thanks for the feedback
            [212]reply
     * dharmesh says:
       [213]june 27, 2017 at 9:55 pm
       hi thanks for helpful article!
       q: can   t see usage of trained_model_5d in the code. would be gr8 if
       explained briefly.
       thanks
       [214]reply
          + faizan shaikh says:
            [215]july 8, 2017 at 5:45 pm
            hi dharmesh,
            when you call model.fit() function, it returns a history of
            training accuracies and losses over all the training epochs.
            this is helpful when you try to evaluate whether your model is
            learning or not.
            [216]reply
     * quincyqiang says:
       [217]july 28, 2017 at 1:29 pm
       error:input arrays should have the same number of samples as target
       arrays. found 196000 input samples and 49000 target samples.
       the number of train_x data is 196000,
       however train_y is 49000
       train_y = keras.utils.np_utils.to_categorical(train.label.values)
       [218]reply
          + faizan shaikh says:
            [219]august 18, 2017 at 3:21 pm
            hi,
            are you running the code on the same dataset or a different
            one?
            [220]reply
          + glipka says:
            [221]march 14, 2018 at 9:36 pm
            i had the same problem . i forgot to code flatten = true in
            imread
            [222]reply
     * freeza says:
       [223]december 6, 2017 at 5:58 pm
       hi , the output i get on this part of code is false . what exactly
       does this code do?
       root_dir = os.path.abspath(   ../..   )
       data_dir = os.path.join(root_dir,    data   )
       sub_dir = os.path.join(root_dir,    sub   )
       # check for existence
       os.path.exists(root_dir)
       os.path.exists(data_dir)
       os.path.exists(sub_dir)
       [224]reply
          + faizan shaikh says:
            [225]december 7, 2017 at 2:09 pm
            the code checks if you have set the paths correctly. if not,
            it gives you false value
            [226]reply
     * jibran jamal says:
       [227]february 13, 2018 at 3:30 pm
       hello faizan,
       may i please now whether is it possible to install keras in
       anaconda (python 3.6) on windows 10 ?
       [228]reply
          + faizan shaikh says:
            [229]march 27, 2018 at 4:26 pm
            hey     yes it can be installed
            [230]reply
     * balaji says:
       [231]march 26, 2018 at 12:51 pm
       not able to extract csv dataset to train.
       [232]reply
          + faizan shaikh says:
            [233]march 27, 2018 at 4:50 pm
            hi balaji     you have to extract the train.zip file, which in
            turn gives you train.csv file and    train    folder. the    train   
            folder contains images to train from.
            [234]reply
     * sp says:
       [235]may 20, 2018 at 1:41 am
       thank you,
       easiest way to learn keras. will recommend it to anyone. very well
       explained.
       [236]reply

   [ins: :ins]

top analytics vidhya users

   rank                  name                  points
   1    [1.jpg?date=2019-04-05] [237]srk       3924
   2    [2.jpg?date=2019-04-05] [238]mark12    3510
   3    [3.jpg?date=2019-04-05] [239]nilabha   3261
   4    [4.jpg?date=2019-04-05] [240]nitish007 3237
   5    [5.jpg?date=2019-04-05] [241]tezdhar   3082
   [242]more user rankings
   [ins: :ins]
   [ins: :ins]

popular posts

     * [243]24 ultimate data science projects to boost your knowledge and
       skills (& can be accessed freely)
     * [244]understanding support vector machine algorithm from examples
       (along with code)
     * [245]essentials of machine learning algorithms (with python and r
       codes)
     * [246]a complete tutorial to learn data science with python from
       scratch
     * [247]7 types of regression techniques you should know!
     * [248]6 easy steps to learn naive bayes algorithm (with codes in
       python and r)
     * [249]a simple introduction to anova (with applications in excel)
     * [250]stock prices prediction using machine learning and deep
       learning techniques (with python codes)

   [ins: :ins]

recent posts

   [251]top 5 machine learning github repositories and reddit discussions
   from march 2019

[252]top 5 machine learning github repositories and reddit discussions from
march 2019

   april 4, 2019

   [253]id161 tutorial: a step-by-step introduction to image
   segmentation techniques (part 1)

[254]id161 tutorial: a step-by-step introduction to image
segmentation techniques (part 1)

   april 1, 2019

   [255]nuts and bolts of id23: introduction to temporal
   difference (td) learning

[256]nuts and bolts of id23: introduction to temporal
difference (td) learning

   march 28, 2019

   [257]16 opencv functions to start your id161 journey (with
   python code)

[258]16 opencv functions to start your id161 journey (with python
code)

   march 25, 2019

   [259][ds-finhack.jpg]

   [260][hikeathon.png]

   [av-white.d14465ee4af2.png]

analytics vidhya

     * [261]about us
     * [262]our team
     * [263]career
     * [264]contact us
     * [265]write for us

   [266]about us
   [267]   
   [268]our team
   [269]   
   [270]careers
   [271]   
   [272]contact us

data scientists

     * [273]blog
     * [274]hackathon
     * [275]discussions
     * [276]apply jobs
     * [277]leaderboard

companies

     * [278]post jobs
     * [279]trainings
     * [280]hiring hackathons
     * [281]advertising
     * [282]reach us

   don't have an account? [283]sign up here.

join our community :

   [284]46336 [285]followers
   [286]20224 [287]followers
   [288]followers
   [289]7513 [290]followers
   ____________________ >

      copyright 2013-2019 analytics vidhya.
     * [291]privacy policy
     * [292]terms of use
     * [293]refund policy

   don't have an account? [294]sign up here

   iframe: [295]likes-master

   %d bloggers like this:

   [loading.gif]
   ____________________

   ____________________

   ____________________
   [button input] (not implemented)_________________

   download resource

join the nextgen data science ecosystem

     * learn: get access to some of the best courses on data science
       created by us
     * engage: interact with thousands of data science professionals
       across the globe!
     * compete: compete in our hackathons and win exciting prizes
     * get hired: get information of jobs in data science community and
       build your profile

   [296](button) join now

   subscribe!

   iframe: [297]likes-master

   %d bloggers like this:

   [loading.gif]
   ____________________

   ____________________

   ____________________
   [button input] (not implemented)_________________

   download resource

join the nextgen data science ecosystem

     * learn: get access to some of the best courses on data science
       created by us
     * engage: interact with thousands of data science professionals
       across the globe!
     * compete: compete in our hackathons and win exciting prizes
     * get hired: get information of jobs in data science community and
       build your profile

   [298](button) join now

   subscribe!

references

   visible links
   1. https://www.analyticsvidhya.com/feed/
   2. https://www.analyticsvidhya.com/comments/feed/
   3. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/feed/
   4. https://www.analyticsvidhya.com/wp-json/oembed/1.0/embed?url=https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/
   5. https://www.analyticsvidhya.com/wp-json/oembed/1.0/embed?url=https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/&format=xml
   6. https://googletagmanager.com/ns.html?id=gtm-mpsm42v
   7. https://courses.analyticsvidhya.com/bundles/ai-blackbelt-beginner-to-master?utm_source=blog&utm_medium=flashstrip
   8. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/
   9. https://www.analyticsvidhya.com/blog-archive/
  10. https://www.analyticsvidhya.com/blog/category/machine-learning/
  11. https://www.analyticsvidhya.com/blog/category/deep-learning/
  12. https://www.analyticsvidhya.com/blog/category/career/
  13. https://www.analyticsvidhya.com/blog/category/stories/
  14. https://www.analyticsvidhya.com/blog/category/podcast/
  15. https://www.analyticsvidhya.com/blog/category/infographics/
  16. https://courses.analyticsvidhya.com/?utm_source=home_blog_navbar
  17. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/
  18. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-business-analyst-sas/
  19. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-r-data-science/
  20. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-data-science-python/
  21. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/weka-gui-learn-machine-learning/
  22. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/tableau-learning-path/
  23. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/qlikview-learning-path/
  24. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/newbie-d3-js-expert-complete-path-create-interactive-visualization-d3-js/
  25. https://www.analyticsvidhya.com/glossary-of-common-statistics-and-machine-learning-terms/
  26. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/
  27. https://discuss.analyticsvidhya.com/
  28. https://www.analyticsvidhya.com/blog/category/events/
  29. https://www.analyticsvidhya.com/datahack-summit-2018/
  30. https://www.analyticsvidhya.com/datahacksummit/
  31. https://www.analyticsvidhya.com/student-datafest-2018/?utm_source=homepage_menu
  32. http://www.analyticsvidhya.com/about-me/write/
  33. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/
  34. https://datahack.analyticsvidhya.com/contest/all
  35. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/
  36. https://www.analyticsvidhya.com/jobs/
  37. https://courses.analyticsvidhya.com/
  38. https://courses.analyticsvidhya.com/courses/computer-vision-using-deep-learning/?utm_source=blog-navbar&utm_medium=web
  39. https://courses.analyticsvidhya.com/courses/natural-language-processing-nlp/?utm_source=blog-navbar&utm_medium=web
  40. https://courses.analyticsvidhya.com/courses/introduction-to-data-science-2/?utm_source=blog-navbar&utm_medium=web
  41. https://courses.analyticsvidhya.com/courses/microsoft-excel-beginners-to-advanced/?utm_source=blog-navbar&utm_medium=web
  42. https://courses.analyticsvidhya.com/collections/?utm_source=blog-navbar&utm_medium=web
  43. https://www.analyticsvidhya.com/contact/
  44. https://www.analyticsvidhya.com/
  45. https://www.analyticsvidhya.com/blog-archive/
  46. https://courses.analyticsvidhya.com/?utm_source=home_blog_navbar
  47. https://discuss.analyticsvidhya.com/
  48. https://datahack.analyticsvidhya.com/
  49. https://www.analyticsvidhya.com/jobs/
  50. https://www.analyticsvidhya.com/corporate/
  51. https://www.analyticsvidhya.com/blog/
  52. https://courses.analyticsvidhya.com/bundles/ai-blackbelt-beginner-to-master?utm_source=avtopbanner&utm_medium=display
  53. https://courses.analyticsvidhya.com/bundles/ai-blackbelt-beginner-to-master?utm_source=avtopbanner&utm_medium=display
  54. https://courses.analyticsvidhya.com/bundles/ai-blackbelt-beginner-to-master?utm_source=avtopbanner&utm_medium=display
  55. https://www.analyticsvidhya.com/blog/
  56. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/
  57. https://www.analyticsvidhya.com/blog-archive/
  58. https://www.analyticsvidhya.com/blog/category/machine-learning/
  59. https://www.analyticsvidhya.com/blog/category/deep-learning/
  60. https://www.analyticsvidhya.com/blog/category/career/
  61. https://www.analyticsvidhya.com/blog/category/stories/
  62. https://www.analyticsvidhya.com/blog/category/podcast/
  63. https://www.analyticsvidhya.com/blog/category/infographics/
  64. https://courses.analyticsvidhya.com/?utm_source=home_blog_navbar
  65. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/
  66. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-business-analyst-sas/
  67. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-r-data-science/
  68. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-data-science-python/
  69. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/weka-gui-learn-machine-learning/
  70. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/tableau-learning-path/
  71. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/qlikview-learning-path/
  72. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/newbie-d3-js-expert-complete-path-create-interactive-visualization-d3-js/
  73. https://www.analyticsvidhya.com/glossary-of-common-statistics-and-machine-learning-terms/
  74. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/
  75. https://discuss.analyticsvidhya.com/
  76. https://www.analyticsvidhya.com/blog/category/events/
  77. https://www.analyticsvidhya.com/datahack-summit-2018/
  78. https://www.analyticsvidhya.com/datahacksummit/
  79. https://www.analyticsvidhya.com/student-datafest-2018/?utm_source=homepage_menu
  80. http://www.analyticsvidhya.com/about-me/write/
  81. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/
  82. https://datahack.analyticsvidhya.com/contest/all
  83. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/
  84. https://www.analyticsvidhya.com/jobs/
  85. https://courses.analyticsvidhya.com/
  86. https://courses.analyticsvidhya.com/courses/computer-vision-using-deep-learning/?utm_source=blog-navbar&utm_medium=web
  87. https://courses.analyticsvidhya.com/courses/natural-language-processing-nlp/?utm_source=blog-navbar&utm_medium=web
  88. https://courses.analyticsvidhya.com/courses/introduction-to-data-science-2/?utm_source=blog-navbar&utm_medium=web
  89. https://courses.analyticsvidhya.com/courses/microsoft-excel-beginners-to-advanced/?utm_source=blog-navbar&utm_medium=web
  90. https://courses.analyticsvidhya.com/collections/?utm_source=blog-navbar&utm_medium=web
  91. https://www.analyticsvidhya.com/contact/
  92. https://www.analyticsvidhya.com/
  93. https://www.analyticsvidhya.com/blog/category/machine-learning/
  94. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/
  95. https://www.analyticsvidhya.com/blog/category/machine-learning/
  96. https://www.analyticsvidhya.com/blog/category/python-2/
  97. https://www.analyticsvidhya.com/blog/author/jalfaizy/
  98. https://www.analyticsvidhya.com/blog/2016/10/an-introduction-to-implementing-neural-networks-using-tensorflow/
  99. https://www.analyticsvidhya.com/wp-content/uploads/2016/10/deep-learning-1.png
 100. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#one
 101. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#two
 102. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#three
 103. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#four
 104. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#five
 105. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#six
 106. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#seven
 107. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#eight
 108. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#nine
 109. https://www.analyticsvidhya.com/wp-content/uploads/2016/10/keras-logo-small.jpg
 110. https://keras.io/#installation
 111. https://keras.io/backend/
 112. https://datahack.analyticsvidhya.com/contest/practice-problem-identify-the-digits/
 113. https://www.analyticsvidhya.com/wp-content/uploads/2016/10/3.png
 114. https://www.analyticsvidhya.com/wp-content/uploads/2016/10/one.png
 115. https://arxiv.org/abs/1412.6980
 116. https://keras.io/optimizers/
 117. https://www.analyticsvidhya.com/blog/2016/03/introduction-deep-learning-fundamentals-neural-networks/
 118. https://www.analyticsvidhya.com/wp-content/uploads/2016/10/training_keras.png
 119. https://www.analyticsvidhya.com/wp-content/uploads/2016/10/8.png
 120. https://www.analyticsvidhya.com/wp-content/uploads/2016/10/dl_meme3.jpg
 121. https://www.analyticsvidhya.com/blog/2016/10/an-introduction-to-implementing-neural-networks-using-tensorflow/
 122. http://cs231n.github.io/neural-networks-3/#baby
 123. https://www.quora.com/machine-learning-what-are-some-tips-and-tricks-for-training-deep-neural-networks
 124. https://arxiv.org/abs/1206.5533
 125. https://www.analyticsvidhya.com/wp-content/uploads/2016/10/trained_500.png
 126. https://www.analyticsvidhya.com/wp-content/uploads/2016/10/train_5d.png
 127. https://www.analyticsvidhya.com/blog/2016/08/evolution-core-concepts-deep-learning-neural-networks/
 128. https://www.analyticsvidhya.com/wp-content/uploads/2016/10/train_5d_with_drop.png
 129. https://www.analyticsvidhya.com/wp-content/uploads/2016/10/train_drop_with_more_epoch.png
 130. https://www.analyticsvidhya.com/wp-content/uploads/2016/10/dl_meme2.jpg
 131. https://www.analyticsvidhya.com/wp-content/uploads/2016/10/train_model_deep_n_wide.png
 132. https://www.analyticsvidhya.com/blog/2016/04/deep-learning-computer-vision-introduction-convolution-neural-networks/
 133. https://www.analyticsvidhya.com/wp-content/uploads/2016/10/train_id98.png
 134. https://github.com/awentzonline/image-analogies
 135. https://www.analyticsvidhya.com/wp-content/uploads/2016/10/season-xfer.jpg
 136. https://keras.io/
 137. https://github.com/fchollet/keras-resources
 138. https://groups.google.com/forum/#!forum/keras-users
 139. https://datahack.analyticsvidhya.com/contest/practice-problem-identify-the-digits/
 140. http://datahack.analyticsvidhya.com/contest/all
 141. https://play.google.com/store/apps/details?id=com.analyticsvidhya.android&utm_source=blog_article&utm_campaign=blog&pcampaignid=mkt-other-global-all-co-prtnr-py-partbadge-mar2515-1
 142. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/?share=linkedin
 143. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/?share=facebook
 144. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/?share=twitter
 145. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/?share=pocket
 146. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/?share=reddit
 147. https://www.analyticsvidhya.com/blog/tag/deep-learning/
 148. https://www.analyticsvidhya.com/blog/tag/implementation-of-neural-networks/
 149. https://www.analyticsvidhya.com/blog/tag/keras/
 150. https://www.analyticsvidhya.com/blog/tag/keras-using-tensorflow/
 151. https://www.analyticsvidhya.com/blog/tag/neural-network/
 152. https://www.analyticsvidhya.com/blog/tag/neural-networks/
 153. https://www.analyticsvidhya.com/blog/tag/neural-networks-using-tensorflow/
 154. https://www.analyticsvidhya.com/blog/tag/parameter-tuning/
 155. https://www.analyticsvidhya.com/blog/tag/parameter-tuning-in-keras/
 156. https://www.analyticsvidhya.com/blog/tag/python/
 157. https://www.analyticsvidhya.com/blog/author/jalfaizy/
 158. https://discuss.analyticsvidhya.com/
 159. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-117123
 160. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-117123
 161. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-117129
 162. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-117129
 163. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-117130
 164. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-117130
 165. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-117136
 166. https://github.com/tensorflow/tensorflow/issues/17
 167. http://www.netinstructions.com/how-to-install-and-run-tensorflow-on-a-windows-pc/
 168. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-117136
 169. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-117140
 170. https://github.com/christoschristofidis/awesome-deep-learning
 171. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-117140
 172. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-117144
 173. https://www.analyticsvidhya.com/blog/2016/08/deep-learning-path/
 174. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-117144
 175. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-118007
 176. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-118007
 177. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-118052
 178. https://discuss.analyticsvidhya.com/t/can-id98-be-used-for-non-2d-problems/13013?u=jalfaizy
 179. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-118052
 180. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-119805
 181. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-119805
 182. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-119806
 183. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-119806
 184. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-120982
 185. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-120982
 186. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-121846
 187. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-121846
 188. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-122030
 189. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-122030
 190. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-124299
 191. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-124299
 192. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-124310
 193. https://datahack.analyticsvidhya.com/contest/practice-problem-identify-the-digits/
 194. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-124310
 195. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-134297
 196. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-134297
 197. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-134617
 198. https://datahack.analyticsvidhya.com/contest/practice-problem-identify-the-digits/
 199. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-134617
 200. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-126382
 201. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-126382
 202. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-129120
 203. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-129120
 204. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-128415
 205. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-128415
 206. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-129119
 207. https://datahack.analyticsvidhya.com/contest/practice-problem-identify-the-digits
 208. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-129119
 209. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-128564
 210. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-128564
 211. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-129118
 212. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-129118
 213. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-131211
 214. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-131211
 215. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-131712
 216. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-131712
 217. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-133085
 218. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-133085
 219. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-134618
 220. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-134618
 221. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-151904
 222. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-151904
 223. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-146470
 224. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-146470
 225. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-146615
 226. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-146615
 227. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-151353
 228. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-151353
 229. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-152209
 230. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-152209
 231. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-152179
 232. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-152179
 233. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-152212
 234. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-152212
 235. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-153406
 236. https://www.analyticsvidhya.com/blog/2016/10/tutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study/#comment-153406
 237. https://datahack.analyticsvidhya.com/user/profile/srk
 238. https://datahack.analyticsvidhya.com/user/profile/mark12
 239. https://datahack.analyticsvidhya.com/user/profile/nilabha
 240. https://datahack.analyticsvidhya.com/user/profile/nitish007
 241. https://datahack.analyticsvidhya.com/user/profile/tezdhar
 242. https://datahack.analyticsvidhya.com/top-competitor/?utm_source=blog-navbar&utm_medium=web
 243. https://www.analyticsvidhya.com/blog/2018/05/24-ultimate-data-science-projects-to-boost-your-knowledge-and-skills/
 244. https://www.analyticsvidhya.com/blog/2017/09/understaing-support-vector-machine-example-code/
 245. https://www.analyticsvidhya.com/blog/2017/09/common-machine-learning-algorithms/
 246. https://www.analyticsvidhya.com/blog/2016/01/complete-tutorial-learn-data-science-python-scratch-2/
 247. https://www.analyticsvidhya.com/blog/2015/08/comprehensive-guide-regression/
 248. https://www.analyticsvidhya.com/blog/2017/09/naive-bayes-explained/
 249. https://www.analyticsvidhya.com/blog/2018/01/anova-analysis-of-variance/
 250. https://www.analyticsvidhya.com/blog/2018/10/predicting-stock-price-machine-learningnd-deep-learning-techniques-python/
 251. https://www.analyticsvidhya.com/blog/2019/04/top-5-machine-learning-github-reddit/
 252. https://www.analyticsvidhya.com/blog/2019/04/top-5-machine-learning-github-reddit/
 253. https://www.analyticsvidhya.com/blog/2019/04/introduction-image-segmentation-techniques-python/
 254. https://www.analyticsvidhya.com/blog/2019/04/introduction-image-segmentation-techniques-python/
 255. https://www.analyticsvidhya.com/blog/2019/03/reinforcement-learning-temporal-difference-learning/
 256. https://www.analyticsvidhya.com/blog/2019/03/reinforcement-learning-temporal-difference-learning/
 257. https://www.analyticsvidhya.com/blog/2019/03/opencv-functions-computer-vision-python/
 258. https://www.analyticsvidhya.com/blog/2019/03/opencv-functions-computer-vision-python/
 259. https://datahack.analyticsvidhya.com/contest/ltfs-datascience-finhack-an-online-hackathon/?utm_source=sticky_banner1&utm_medium=display
 260. https://datahack.analyticsvidhya.com/contest/hikeathon/?utm_source=sticky_banner2&utm_medium=display
 261. http://www.analyticsvidhya.com/about-me/
 262. https://www.analyticsvidhya.com/about-me/team/
 263. https://www.analyticsvidhya.com/career-analytics-vidhya/
 264. https://www.analyticsvidhya.com/contact/
 265. https://www.analyticsvidhya.com/about-me/write/
 266. http://www.analyticsvidhya.com/about-me/
 267. https://www.analyticsvidhya.com/about-me/team/
 268. https://www.analyticsvidhya.com/about-me/team/
 269. https://www.analyticsvidhya.com/about-me/team/
 270. https://www.analyticsvidhya.com/career-analytics-vidhya/
 271. https://www.analyticsvidhya.com/about-me/team/
 272. https://www.analyticsvidhya.com/contact/
 273. https://www.analyticsvidhya.com/blog
 274. https://datahack.analyticsvidhya.com/
 275. https://discuss.analyticsvidhya.com/
 276. https://www.analyticsvidhya.com/jobs/
 277. https://datahack.analyticsvidhya.com/users/
 278. https://www.analyticsvidhya.com/corporate/
 279. https://trainings.analyticsvidhya.com/
 280. https://datahack.analyticsvidhya.com/
 281. https://www.analyticsvidhya.com/contact/
 282. https://www.analyticsvidhya.com/contact/
 283. https://datahack.analyticsvidhya.com/signup/
 284. https://www.facebook.com/analyticsvidhya/
 285. https://www.facebook.com/analyticsvidhya/
 286. https://twitter.com/analyticsvidhya
 287. https://twitter.com/analyticsvidhya
 288. https://plus.google.com/+analyticsvidhya
 289. https://in.linkedin.com/company/analytics-vidhya
 290. https://in.linkedin.com/company/analytics-vidhya
 291. https://www.analyticsvidhya.com/privacy-policy/
 292. https://www.analyticsvidhya.com/terms/
 293. https://www.analyticsvidhya.com/refund-policy/
 294. https://id.analyticsvidhya.com/accounts/signup/
 295. https://widgets.wp.com/likes/master.html?ver=201914#ver=201914
 296. https://id.analyticsvidhya.com/accounts/login/?next=https://www.analyticsvidhya.com/blog/&utm_source=blog-subscribe&utm_medium=web
 297. https://widgets.wp.com/likes/master.html?ver=201914#ver=201914
 298. https://id.analyticsvidhya.com/accounts/login/?next=https://www.analyticsvidhya.com/blog/&utm_source=blog-subscribe&utm_medium=web

   hidden links:
 300. https://www.facebook.com/analyticsvidhya
 301. https://twitter.com/analyticsvidhya
 302. https://plus.google.com/+analyticsvidhya/posts
 303. https://in.linkedin.com/company/analytics-vidhya
 304. https://www.analyticsvidhya.com/blog/2016/10/data-science-consultant-rwe-gurgaon-pune-5-8-years-of-experience/
 305. https://www.analyticsvidhya.com/blog/2016/10/exclusive-interview-ama-with-data-scientist-rohan-rao-analytics-vidhya-rank-4/
 306. https://www.analyticsvidhya.com/blog/author/jalfaizy/
 307. https://www.linkedin.com/in/faizankshaikh
 308. http://github.com/faizankshaikh
 309. http://www.edvancer.in/certified-data-scientist-with-python-course?utm_source=av&utm_medium=avads&utm_campaign=avadsnonfc&utm_content=pythonavad
 310. https://www.facebook.com/analyticsvidhya/
 311. https://twitter.com/analyticsvidhya
 312. https://plus.google.com/+analyticsvidhya
 313. https://plus.google.com/+analyticsvidhya
 314. https://in.linkedin.com/company/analytics-vidhya
 315. https://www.addtoany.com/add_to/facebook?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2016%2f10%2ftutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study%2f&linkname=tutorial%3a%20optimizing%20neural%20networks%20using%20keras%20%28image%20recognition%29
 316. https://www.addtoany.com/add_to/twitter?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2016%2f10%2ftutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study%2f&linkname=tutorial%3a%20optimizing%20neural%20networks%20using%20keras%20%28image%20recognition%29
 317. https://www.addtoany.com/add_to/linkedin?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2016%2f10%2ftutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study%2f&linkname=tutorial%3a%20optimizing%20neural%20networks%20using%20keras%20%28image%20recognition%29
 318. https://www.addtoany.com/add_to/flipboard?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2016%2f10%2ftutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study%2f&linkname=tutorial%3a%20optimizing%20neural%20networks%20using%20keras%20%28image%20recognition%29
 319. https://www.addtoany.com/add_to/whatsapp?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2016%2f10%2ftutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study%2f&linkname=tutorial%3a%20optimizing%20neural%20networks%20using%20keras%20%28image%20recognition%29
 320. https://www.addtoany.com/add_to/facebook?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2016%2f10%2ftutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study%2f&linkname=tutorial%3a%20optimizing%20neural%20networks%20using%20keras%20%28image%20recognition%29
 321. https://www.addtoany.com/add_to/twitter?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2016%2f10%2ftutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study%2f&linkname=tutorial%3a%20optimizing%20neural%20networks%20using%20keras%20%28image%20recognition%29
 322. https://www.addtoany.com/add_to/linkedin?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2016%2f10%2ftutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study%2f&linkname=tutorial%3a%20optimizing%20neural%20networks%20using%20keras%20%28image%20recognition%29
 323. https://www.addtoany.com/add_to/flipboard?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2016%2f10%2ftutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study%2f&linkname=tutorial%3a%20optimizing%20neural%20networks%20using%20keras%20%28image%20recognition%29
 324. https://www.addtoany.com/add_to/whatsapp?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2016%2f10%2ftutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study%2f&linkname=tutorial%3a%20optimizing%20neural%20networks%20using%20keras%20%28image%20recognition%29
 325. javascript:void(0);
 326. javascript:void(0);
 327. https://www.addtoany.com/add_to/facebook?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2016%2f10%2ftutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study%2f&linkname=tutorial%3a%20optimizing%20neural%20networks%20using%20keras%20%28image%20recognition%29
 328. https://www.addtoany.com/add_to/twitter?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2016%2f10%2ftutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study%2f&linkname=tutorial%3a%20optimizing%20neural%20networks%20using%20keras%20%28image%20recognition%29
 329. https://www.addtoany.com/add_to/linkedin?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2016%2f10%2ftutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study%2f&linkname=tutorial%3a%20optimizing%20neural%20networks%20using%20keras%20%28image%20recognition%29
 330. https://www.addtoany.com/add_to/flipboard?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2016%2f10%2ftutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study%2f&linkname=tutorial%3a%20optimizing%20neural%20networks%20using%20keras%20%28image%20recognition%29
 331. https://www.addtoany.com/add_to/whatsapp?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2016%2f10%2ftutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study%2f&linkname=tutorial%3a%20optimizing%20neural%20networks%20using%20keras%20%28image%20recognition%29
 332. https://www.addtoany.com/add_to/facebook?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2016%2f10%2ftutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study%2f&linkname=tutorial%3a%20optimizing%20neural%20networks%20using%20keras%20%28image%20recognition%29
 333. https://www.addtoany.com/add_to/twitter?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2016%2f10%2ftutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study%2f&linkname=tutorial%3a%20optimizing%20neural%20networks%20using%20keras%20%28image%20recognition%29
 334. https://www.addtoany.com/add_to/linkedin?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2016%2f10%2ftutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study%2f&linkname=tutorial%3a%20optimizing%20neural%20networks%20using%20keras%20%28image%20recognition%29
 335. https://www.addtoany.com/add_to/flipboard?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2016%2f10%2ftutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study%2f&linkname=tutorial%3a%20optimizing%20neural%20networks%20using%20keras%20%28image%20recognition%29
 336. https://www.addtoany.com/add_to/whatsapp?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2016%2f10%2ftutorial-optimizing-neural-networks-using-keras-with-image-recognition-case-study%2f&linkname=tutorial%3a%20optimizing%20neural%20networks%20using%20keras%20%28image%20recognition%29
 337. javascript:void(0);
 338. javascript:void(0);
