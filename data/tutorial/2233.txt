   #[1]peekaboo - atom [2]peekaboo - rss [3]peekaboo - atom

[4]peekaboo

   andy's id161 and machine learning blog

friday, january 25, 2013

machine learning cheat sheet (for scikit-learn)

   as you hopefully have heard, we at [5]scikit-learn are doing a [6]user
   survey (which is still open by the way).
   one of the requests there was to provide some sort of flow chart on how
   to do machine learning.
   as this is clearly impossible, i went to work straight away.
   this is the result:
   [7][drop_shadows_background.png]
   [edit2]
   clarification: with ensemble classifiers and ensemble regressors i mean
   id79s, extremely randomized trees, gradient boosted trees, and
   the soon-to-be-come weight boosted trees (adaboost).
   [/edit2]
   needless to say, this sheet is completely authoritative.
   thanks to rob zinkov for pointing out an error in one yes/no decision.
   more seriously: this is actually my work flow / train of thoughts
   whenever i try to solve a new problem. basically, start simple first.
   if this doesn't work out, try something more complicated.
   the chart above includes the intersection of all algorithms that are in
   scikit-learn and the ones that i find most useful in practice.
   only that i always start out with "just looking". to make any of the
   algorithms actually work, you need to do the right preprocessing of
   your data - which is much more of an art than picking the right
   algorithm imho.
   anyhow, enjoy ;)
   [edit3]
   you can find the svg and dia file i used [8]here. i doubt this
   qualifies as a creative work, but to make, i put this under [9]cc0
   license, which translates to "public domain" in the us.
   [/edit3]
   [edit]
   as some people commented about id170 not being included
   in the chart:  there is [10]id166struct, which is a great library and has
   interfaces to many languages, but is only free for non-comercial use.
   there is also the library i'm working on, [11]pystruct, which i will
   write about on another day ;)
   the chart is not really comprehensive, as i focused on scikit-learn.
   otherwise i certainly would have included neural networks ;)
   [/edit]
   posted by
   [12]unknown at [13]7:38 pm
   [14]email this[15]blogthis![16]share to twitter[17]share to
   facebook[18]share to pinterest
   labels: [19]kaggle, [20]machine learning, [21]python, [22]scikit-learn,
   [23]teaching

55 comments:

    1. [24]linas[25]january 26, 2013 at 5:43 am
       "looking for structure" leads to "tough luck". i notice that
       program learning doesn't appear anywhere on the chart. am i missing
       something?
       (disclaimer: i work on a program learning system, to learn
       structure.)
       reply[26]delete
       replies
         1. [27]andreas mueller[28]january 26, 2013 at 9:15 am
            i don't really know about program learning. the reason that
            "looking for structure" leads to "tough luck" is 1) i only
            listed algorithms that are implemented in sklearn 2) if you
            need a flow-chart to know what to do, i don't think you will
            be successful in working with structured models ;)
            [29]delete
            replies
                 reply
            reply
    2. [30]ga  l[31]january 26, 2013 at 11:39 am
       fucking awesome.we need this in the scikit-learn documentation.
       this is an svg edited with inkscape, right?
       reply[32]delete
       replies
         1. [33]andreas mueller[34]january 26, 2013 at 4:51 pm
            i started out with dia and then did some modifications in
            inkscape. you can find both files here:
            https://gist.github.com/4642976 :)
            [35]delete
            replies
                 reply
         2. anonymous[36]july 7, 2015 at 11:03 am
            hi please give me any simple problem for doing ph.d in id166
            [37]delete
            replies
                 reply
            reply
    3. [38]3nigma[39]january 26, 2013 at 2:20 pm
       sweet ! ... comprehensive indeed. thanks!
       reply[40]delete
       replies
            reply
    4. anonymous[41]january 27, 2013 at 7:26 am
       is this based on eh... data?
       reply[42]delete
       replies
         1. [43]andreas mueller[44]january 27, 2013 at 11:45 am
            which part do you mean? most arrows tell you which class of
            algorithms to use. mean shift doesn't take the number of
            clusters as parameter. that is a fact and doesn't need data.
            that stochastic and online algorithms scale to more data is
            based on runtime analysis. the number that i choose for
            branching is just a rule of thumb and naturally depends on the
            problem at hand.
            the sequence of algorithms (linear id166 -> knn -> id166)
            is based on runtime complexity, the simplicity of the
            algorithm (you can read that as vc dimension if you want), the
            robustness and the ease of use.
            so as far as i can see, the most arbitrary choice i did was
            which algorithms to include. as i said, that was governed by
            the availability in scikit-learn and my personal experience.
            if you want more data, maybe look at the top then algorithms
            in data mining:
            http://www.cs.uvm.edu/~icdm/algorithms/10algorithms-08.pdf
            they mostly select the same algorithms as i did (in areas that
            both they and me covered)
            [45]delete
            replies
                 reply
            reply
    5. anonymous[46]january 27, 2013 at 11:37 am
       this is nice. for ease of reading, it would have been better to be
       consistent in choice of ">" or "<"
       reply[47]delete
       replies
         1. [48]andreas mueller[49]january 27, 2013 at 11:46 am
            true. well, i did that for all the important ones downstream,
            but missed the >50 one :-/
            [50]delete
            replies
                 reply
            reply
    6. [51]lode nachtergaele[52]january 27, 2013 at 2:17 pm
       why is the id79 technique not in this graph ?
       reply[53]delete
       replies
         1. [54]andreas mueller[55]january 27, 2013 at 2:19 pm
            it is. only not very explicit. i'll correct this. the ensemble
            classifiers and ensemble regressors refer to id79,
            extremely randomized trees and gradient boosted trees (and
            weight boosted trees as soon as they are added).
            [56]delete
            replies
                 reply
            reply
    7. [57]d  enan softi  [58]january 27, 2013 at 2:48 pm
       great! very helpful.
       thank you.
       reply[59]delete
       replies
            reply
    8. [60]x[61]january 27, 2013 at 4:35 pm
       thanks for posting this! as someone with a programming background
       but not really a machine learning background this is quite helpful.
       reply[62]delete
       replies
            reply
    9. [63]vijayakumar ramdoss[64]january 27, 2013 at 6:08 pm
       great effort, thanks for sharing with all
       reply[65]delete
       replies
            reply
   10. [66]craig corcoran[67]january 27, 2013 at 8:54 pm
       very nice. imho, there should be some consideration for the
       dimensionality and sparsity of the data, not just number of
       samples. in many (non-kernel based) algorithms, such as least
       squares regression, dimensionality is the limiting factor, and you
       only need to be able to make a single pass over the data.
       reply[68]delete
       replies
         1. [69]andreas mueller[70]january 27, 2013 at 11:30 pm
            you are right, there are many other factors to consider.
            clearly this is just a very rough guide.
            in my personal experience, i have never had a problem with
            large numbers of features. but that obviously depends on you
            setting. i worked with image data, where there are usually
            <10k features, and text data, which is very sparse.
            [71]delete
            replies
                 reply
            reply
   11. [72]celeste[73]january 28, 2013 at 11:27 am
       couldn't dbscan be used in the instance within id91 -->
       unknown number of categroies --> under 10k samples? also, how do
       you know the order of magnitude of the sample size needed in all of
       these cases?
       thanks :)
       reply[74]delete
       replies
         1. [75]andreas mueller[76]january 28, 2013 at 11:35 am
            yes, dbscan could be used there. i am not very experienced
            with that algorithm, though, and therefore it would not be my
            first choice - maybe it should be ;)
            there is now way to tell how many samples you need.
            the number of samples are estimates where the algorithms are
            computationally feasible. if you try to run a kernel id166 on
            500k samples, you will probably wait a week (if not run out of
            memory first) and then see that you didn't choose the right
            bandwidth gamma.
            the <50 is a pretty arbitrary lower limit. someone on reddit
            suggests "call a statistician" instead of getting more data,
            which definitely is an alternative. this is not really the
            regime for which these algorithms were designed.
            [77]delete
            replies
                 reply
         2. anonymous[78]may 25, 2013 at 2:49 pm
            actually dbscan with a good index (k-d-tree, r-tree) should
            scale well into the millions of objects.
            [79]delete
            replies
                 reply
            reply
   12. anonymous[80]january 29, 2013 at 4:39 pm
       if you were going to include neural networks on your chart, about
       where would you put them?
       reply[81]delete
       replies
         1. [82]andreas mueller[83]january 29, 2013 at 4:43 pm
            my first impulse would be to put them into the svc/svr and
            ensemble method boxes for classification and regression. but
            actually they scale even to very large datasets.
            arguably they are a bit harder to get right than id166s and
            id79s. so maybe there would be arrows going from id166s
            and kernel approximation going to nns.
            [84]delete
            replies
                 reply
            reply
   13. anonymous[85]january 30, 2013 at 1:40 am
       hi,
       cool chart and info! which tool did you use to create the chart?
       thanks!!
       reply[86]delete
       replies
         1. [87]andreas mueller[88]january 30, 2013 at 9:23 am
            dia and inkscape, though i wasn't very happy with that.
            [89]delete
            replies
                 reply
            reply
   14. anonymous[90]january 30, 2013 at 7:53 pm
       awesome...two paws up!
       reply[91]delete
       replies
            reply
   15. [92]ceo[93]february 3, 2013 at 3:00 am
       thank you.
       reply[94]delete
       replies
            reply
   16. anonymous[95]february 6, 2013 at 2:09 pm
       now make this into a (meta-)algorithm
       reply[96]delete
       replies
            reply
   17. [97]dijun luo[98]february 15, 2013 at 5:48 pm
       this is very interesting. but when an algorithm does not work, we
       can also try different ways to normalize the data before switching
       to another algorithm. sometimes id172 helps a lot.
       reply[99]delete
       replies
            reply
   18. [100]jesse[101]february 20, 2013 at 10:03 pm
       this is totally useful for those of us who are getting started with
       kaggle.com competitions, thanks for making it!
       reply[102]delete
       replies
            reply
   19. [103]andreas loizou[104]march 9, 2013 at 10:56 am
       great info!! :)
       i have a problem though, despite of looking the picture...
       i want to use any algorithm from weka at the following problem, but
       i do not know how should i preprocess my data, or one running well
       algorithm.
       i have some data of the houses, like their size(in square meters),
       if they use aircondition, how many residents live in, i have their
       electricity consumption as well. i want to train any machine
       learning algorithm to the dataset above, in order to create a model
       that estimates the houses consumption.
       i tried many different algorithms (using weka), but i did not have
       good results. i was said that id166s could solve this problem, with
       the right preprocessing. however, i did not have good results
       either.
       can anyone help me, in the way i should approach this problem,
       because i am really stuck?
       thanks in advance
       reply[105]delete
       replies
            reply
   20. [106]devendra[107]april 17, 2013 at 5:57 am
       i guess being bayesian is the tough luck case.. :p
       reply[108]delete
       replies
            reply
   21. anonymous[109]april 22, 2013 at 1:40 am
       hi,
       i have a very big and resourceful data on an e-commerce site i run
       and i wanted to group my clients into frequency buyers and discover
       groups of preferences among them. i have some categories of
       products and they buy on one or more categories.
       so far, most machine learning algorithms are explained in depth
       mathematically wise. but i am having trouble transforming my data
       into something to feed these algorithms.
       in your post you said that preprocessing data is an art. where can
       i read something useful to guide me through that ?
       thanks in advance,
       bruno
       reply[110]delete
       replies
         1. [111]andreas mueller[112]april 22, 2013 at 9:32 am
            hi bruno. unfortunately i don't know of any good resources on
            preprocessing. my best guess would be "machine learning for
            hackers", as this is more geared towards the practitioner. i
            haven't read it, though, and it is for r.
            i heard rumors of some machine learning guru working on a
            scikit-learn book, that would also be more on the practical
            side. not sure if this would come out this year, though.
            for the moment, my best advise would be to get a machine
            learner / data scientist to work with you ;)
            cheers,
            andy
            [113]delete
            replies
                 reply
            reply
   22. anonymous[114]may 17, 2013 at 11:18 pm
       this is awesome and helpful.
       by the way, what do you mean by "just looking", and why did it go
       to the dimension reduction? does it mean that you only want have a
       overview on the data?
       reply[115]delete
       replies
         1. [116]andreas mueller[117]may 20, 2013 at 12:41 pm
            basically i use id84 and manifold learning
            mainly for visualization. i project down to 2 dimensions and
            then do a scatter plot.
            [118]delete
            replies
                 reply
            reply
   23. anonymous[119]june 6, 2013 at 2:15 pm
       in the lower left 'id91' blob, the rightmost '<10k' question
       has 'yes' pointing to "meanshift vbgmm", and 'no' to "tough luck".
       shouldn't that be the other way around? :)
       reply[120]delete
       replies
         1. [121]andreas mueller[122]june 6, 2013 at 2:18 pm
            errr... no? with few examples you can do something, with more
            it is harder (though dbscan might do it, not in sklearn
            currently though).
            [123]delete
            replies
                 reply
            reply
   24. [124]nivedita muthusubramanian[125]june 13, 2013 at 2:14 pm
       hello, this was very very helpful.by right processing of data can u
       please explain what do you mean by that because currently i am
       working on text classification using id75 . i have 20
       categories . i am confused how my dataset should be . can you
       please explain that part ? thanks in advance
       reply[126]delete
       replies
            reply
   25. [127]conrad lee[128]june 13, 2013 at 4:13 pm
       meanshift should scale well beyond 10k samples. i've used it on
       datasets with millions of samples (you need to use bin_seeding).
       disclaimer: i sped up the meanshift implementaion a few years ago,
       so i'm slightly offended to see you label it as only appropriate
       for <10k samples :-)
       reply[129]delete
       replies
         1. [130]andreas mueller[131]june 17, 2013 at 9:17 am
            oh, i'm sorry. maybe i used the old implementation :-/ we
            should have an example of large-scale id91 in sklearn!
            if i find time, i'll play around with it.
            [132]delete
            replies
                 reply
            reply
   26. [133]kaos bola[134]july 9, 2013 at 6:19 am
       thanks for posting this! as someone with a programming background
       but not really a machine learning background this is quite helpful.
       reply[135]delete
       replies
            reply
   27. [136]anthony landreth[137]august 28, 2013 at 8:42 pm
       great post. what are the advantages to trying linear svc before
       naive bayes when working with text data?
       reply[138]delete
       replies
         1. [139]andreas mueller[140]august 28, 2013 at 8:49 pm
            thanks :)
            you got me, there is not really a reason. probably the
            take-away message is that i just try linear svc before
            thinking about the problem at all ;)
            naive bayes might be a more natural first choice, but would
            make the graph slightly more complicated (it would have linear
            svc in two places). i would say i'd prefer algorithms that are
            less sensitive to hyper-parameters more but i have too little
            experience with nb to know if it is more sensitive to alpha
            than linearsvc is to c.
            [141]delete
            replies
                 reply
            reply
   28. anonymous[142]november 16, 2013 at 5:34 pm
       awesome
       reply[143]delete
       replies
            reply
   29. anonymous[144]september 1, 2014 at 11:57 am
       this looks very similar to the map described on dlib c++ machine
       learning library page. http://dlib.net/ml_guide.svg
       reply[145]delete
       replies
         1. [146]andreas mueller[147]september 7, 2014 at 2:39 pm
            yeah, daniel said he liked the idea so he created one for his
            lib, too :)
            [148]delete
            replies
                 reply
            reply
   30. [149]shalin siriwaradhana[150]november 14, 2014 at 8:45 am
       i don't know about you guys, but this is the most complex flowchart
       diagram i've ever seen. however i did not see that it was drawn
       with [151]flowchart symbols . still its legit
       reply[152]delete
       replies
            reply
   31. [153]shalin siriwaradhana[154]january 5, 2015 at 11:44 am
       it would have been better if you had drawn this from a [155]flow
       chart tool like creately for the tutorial. its ok though! thanks
       for sharing..
       reply[156]delete
       replies
         1. [157]andreas mueller[158]january 5, 2015 at 3:17 pm
            it is drawn with a flow chart tool, dia ;)
            [159]delete
            replies
                 reply
            reply
   32. [160]                         [161]november 3, 2015 at 8:43 am
       this comment has been removed by the author.
       reply[162]delete
       replies
            reply
   33. [163]ahmed ragab[164]january 20, 2016 at 3:15 pm
       this comment has been removed by the author.
       reply[165]delete
       replies
            reply
   34. [166]shalin siriwaradhana[167]february 8, 2016 at 6:06 am
       just found this, please contribute these diagrams to [168]creately
       diagram community.
       reply[169]delete
       replies
            reply
   35. [170]osanyin deji[171]november 3, 2017 at 1:25 pm
       everytime i want to use mglearn.discrete_scatter(x[:, 0], x[:, 1],
       y) to plot on my own data set whihc is made up of 17 features and
       target variable 0 & 1, i keep getting this error:
       line 42, in mglearn.discrete_scatter(x[:, 0], x[:, 1], y_train)
       file
       "c:\users\dejavu\anaconda2\lib\site-packages\pandas\core\frame.py",
       line 2062, in __getitem__
       return self._getitem_column(key)
       file
       "c:\users\dejavu\anaconda2\lib\site-packages\pandas\core\frame.py",
       line 2069, in _getitem_column
       return self._get_item_cache(key)
       file
       "c:\users\dejavu\anaconda2\lib\site-packages\pandas\core\generic.py
       ", line 1532, in _get_item_cache
       res = cache.get(item)
       typeerror: unhashable type
       reply[172]delete
       replies
         1. [173]andreas mueller[174]november 4, 2017 at 7:11 pm
            if you have issues with mglearn, please use the mglearn issue
            tracker: https://github.com/amueller/mglearn
            what's the type of x[:, 0], x[:, 1] and y? these are supposed
            to be numpy arrays of float.
            [175]delete
            replies
                 reply
         2. [176]andreas mueller[177]november 4, 2017 at 7:12 pm
            (y is supposed to be integer)
            [178]delete
            replies
                 reply
            reply

   add comment
   load more...

   [179]newer post [180]older post [181]home
   subscribe to: [182]post comments (atom)

popular posts

     * [183]machine learning cheat sheet (for scikit-learn)
       as you hopefully have heard, we at scikit-learn are doing a user
       survey (which is still open by the way). one of the requests there
       was t...
     * [184]a wordcloud in python
       last week i was at pycon de , the german python conference. after
       hacking on scikit-learn a lot last week, i decided to to something
       differe...
     * [185]kernel approximations for efficient id166s (and other feature
       extraction methods) [update]
       recently we added another method for kernel approximation, the
       nystr  m method, to scikit-learn , which will be featured in the
       upcoming 0.1...
     * [186]mnist for ever....
       [update] this post is a bit old, but many people still seem
       interested. so just a short update: nowadays i would use python and
       scikit-learn...
     * [187]graphcuts for python: pygco (slight update)
       i have been using the excellent gco library for energy minimization
       with graph cuts for quite some time. finally i got around to clean
       up /...
     * [188]recap of my first kaggle competition: detecting insults in
       social commentary [update 3]
       recently i entered my first kaggle competition - for those who
       don't know it, it is a site running machine learning competitions.
       a dat...
     * [189]python things you never need: empty lambda functions
       ever wanted to create an empty python function in-line? no? me
       neither. but my coworker does... we found the answer: <pre> x =
       l...
     * [190]machine learning toolkits
       wow. so much to read today . while following link upon link, i
       found so many great toolkits that i think it is worth listing them
       here. on...
     * [191]pystruct: more id170 with python
       some time ago i wrote about a structured learning project i have
       been working on for some time, called pystruct . after not working
       on it ...
     * [192]structured id166 and structured id88 for crf learning in
       python
       [edit: if you are reading this now, have a look at
       pystruct.github.io . the project matured quit a bit in the
       meantime.]  today i pushed s...

links

     * [193]scikit-learn
     * [194]me on twitter
     * [195]my university website

pages

     * [196]home
     * [197]favourite code
     * [198]favourite readings

search this blog

   __________ search

   awesome inc. theme. powered by [199]blogger.

references

   visible links
   1. http://peekaboo-vision.blogspot.com/feeds/posts/default
   2. http://peekaboo-vision.blogspot.com/feeds/posts/default?alt=rss
   3. http://peekaboo-vision.blogspot.com/feeds/2208224658557676900/comments/default
   4. http://peekaboo-vision.blogspot.com/
   5. http://scikit-learn.org/dev/
   6. https://docs.google.com/spreadsheet/viewform?formkey=dfdyegnhmzlcrwzudldpmezlz1b1yke6mq#gid=0
   7. http://1.bp.blogspot.com/-me24epzpzim/uqlwtwurfxi/aaaaaaaaanw/w3eetiroa80/s1600/drop_shadows_background.png
   8. https://gist.github.com/amueller/4642976
   9. https://gist.github.com/amueller/4642976
  10. http://www.cs.cornell.edu/people/tj/id166_light/id166_struct.html
  11. https://github.com/amueller/pystruct
  12. https://plus.google.com/112544080214919445884
  13. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html
  14. https://www.blogger.com/share-post.g?blogid=7345806147365425073&postid=2208224658557676900&target=email
  15. https://www.blogger.com/share-post.g?blogid=7345806147365425073&postid=2208224658557676900&target=blog
  16. https://www.blogger.com/share-post.g?blogid=7345806147365425073&postid=2208224658557676900&target=twitter
  17. https://www.blogger.com/share-post.g?blogid=7345806147365425073&postid=2208224658557676900&target=facebook
  18. https://www.blogger.com/share-post.g?blogid=7345806147365425073&postid=2208224658557676900&target=pinterest
  19. http://peekaboo-vision.blogspot.com/search/label/kaggle
  20. http://peekaboo-vision.blogspot.com/search/label/machine learning
  21. http://peekaboo-vision.blogspot.com/search/label/python
  22. http://peekaboo-vision.blogspot.com/search/label/scikit-learn
  23. http://peekaboo-vision.blogspot.com/search/label/teaching
  24. https://www.blogger.com/profile/06727140737389197948
  25. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359175420161#c7664038403930734805
  26. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=7664038403930734805
  27. https://www.blogger.com/profile/10177962095394942563
  28. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359188105252#c1017367461591074787
  29. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=1017367461591074787
  30. https://www.blogger.com/profile/12853093900244667247
  31. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359196780864#c3249997809435105215
  32. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=3249997809435105215
  33. https://www.blogger.com/profile/10177962095394942563
  34. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359215468765#c2142630827529176337
  35. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=2142630827529176337
  36. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1436259808820#c8601686571722571345
  37. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=8601686571722571345
  38. https://www.blogger.com/profile/11715364072739702775
  39. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359206457649#c6710726609640373849
  40. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=6710726609640373849
  41. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359267967861#c8633814474446755459
  42. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=8633814474446755459
  43. https://www.blogger.com/profile/10177962095394942563
  44. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359283547266#c8453617374063990135
  45. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=8453617374063990135
  46. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359283039401#c7388130734464666029
  47. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=7388130734464666029
  48. https://www.blogger.com/profile/10177962095394942563
  49. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359283616945#c3089285068212324935
  50. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=3089285068212324935
  51. https://www.blogger.com/profile/15954114607504297643
  52. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359292666309#c6635102970457121490
  53. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=6635102970457121490
  54. https://www.blogger.com/profile/10177962095394942563
  55. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359292775729#c5784499840272761346
  56. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=5784499840272761346
  57. https://www.blogger.com/profile/01928290648495695829
  58. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359294539237#c8525597949907634046
  59. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=8525597949907634046
  60. https://www.blogger.com/profile/06529725872860738749
  61. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359300911322#c6670032681821605847
  62. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=6670032681821605847
  63. https://www.blogger.com/profile/15338498300054277130
  64. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359306527652#c5850280104842802282
  65. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=5850280104842802282
  66. https://www.blogger.com/profile/15215462133114191799
  67. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359316447370#c6776507801809040752
  68. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=6776507801809040752
  69. https://www.blogger.com/profile/10177962095394942563
  70. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359325837737#c9065541155387494753
  71. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=9065541155387494753
  72. https://www.blogger.com/profile/04774885518332646454
  73. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359368839160#c6834998216126710091
  74. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=6834998216126710091
  75. https://www.blogger.com/profile/10177962095394942563
  76. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359369309392#c3479360564941590558
  77. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=3479360564941590558
  78. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1369486162334#c9201306725139317966
  79. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=9201306725139317966
  80. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359473951750#c1945085858858411461
  81. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=1945085858858411461
  82. https://www.blogger.com/profile/10177962095394942563
  83. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359474196778#c2970975485794890304
  84. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=2970975485794890304
  85. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359506444534#c8955669579216667879
  86. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=8955669579216667879
  87. https://www.blogger.com/profile/10177962095394942563
  88. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359534200503#c2326887746781018070
  89. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=2326887746781018070
  90. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359572021345#c2293332722411774620
  91. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=2293332722411774620
  92. https://www.blogger.com/profile/04023770209178671427
  93. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1359856830609#c5044549322186509239
  94. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=5044549322186509239
  95. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1360156187434#c7516154599127477983
  96. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=7516154599127477983
  97. https://sites.google.com/site/dijunluo/
  98. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1360946937286#c657675259945979557
  99. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=657675259945979557
 100. https://www.blogger.com/profile/12484398939904936793
 101. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1361394219438#c5733062011820607722
 102. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=5733062011820607722
 103. https://www.blogger.com/profile/08225490729521522043
 104. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1362822961738#c1691189969567165982
 105. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=1691189969567165982
 106. https://www.blogger.com/profile/00635176017294278878
 107. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1366171034496#c5893159407690957096
 108. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=5893159407690957096
 109. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1366587626497#c5680823931226855933
 110. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=5680823931226855933
 111. https://www.blogger.com/profile/10177962095394942563
 112. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1366615949101#c39842242264722209
 113. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=39842242264722209
 114. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1368825504999#c6559447614087088869
 115. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=6559447614087088869
 116. https://www.blogger.com/profile/10177962095394942563
 117. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1369046482484#c1816868014030560934
 118. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=1816868014030560934
 119. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1370520937696#c7920663291294710819
 120. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=7920663291294710819
 121. https://www.blogger.com/profile/10177962095394942563
 122. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1370521106345#c1537017482379515352
 123. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=1537017482379515352
 124. https://www.blogger.com/profile/04785802504917480536
 125. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1371125695630#c2515894758652222824
 126. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=2515894758652222824
 127. https://www.blogger.com/profile/04623813430580769333
 128. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1371132807072#c2999223735188288618
 129. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=2999223735188288618
 130. https://www.blogger.com/profile/10177962095394942563
 131. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1371453455354#c4893965947945620105
 132. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=4893965947945620105
 133. http://kaosbola-murah.com/
 134. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1373343547105#c5264353152006250296
 135. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=5264353152006250296
 136. https://www.blogger.com/profile/16471204495430624000
 137. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1377715336648#c580458670243537935
 138. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=580458670243537935
 139. https://www.blogger.com/profile/10177962095394942563
 140. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1377715740790#c7767254870067930779
 141. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=7767254870067930779
 142. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1384619692149#c3812026308370804157
 143. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=3812026308370804157
 144. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1409565467634#c7836088120182715062
 145. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=7836088120182715062
 146. https://www.blogger.com/profile/10177962095394942563
 147. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1410093569409#c5859670620297902854
 148. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=5859670620297902854
 149. https://www.blogger.com/profile/01134034541170679170
 150. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1415951122193#c2042621650317835356
 151. http://creately.com/diagram-type/objects/flowcharts
 152. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=2042621650317835356
 153. https://www.blogger.com/profile/01134034541170679170
 154. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1420454652960#c5499047757475736447
 155. javascript:void(0);
 156. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=5499047757475736447
 157. https://www.blogger.com/profile/10177962095394942563
 158. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1420467447291#c6208871339322083922
 159. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=6208871339322083922
 160. https://www.blogger.com/profile/06097016813116203771
 161. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1446536609070#c5046202839263086275
 162. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=5046202839263086275
 163. https://www.blogger.com/profile/03554561833328869115
 164. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1453299305823#c6903607149764892564
 165. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=6903607149764892564
 166. https://www.blogger.com/profile/01134034541170679170
 167. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1454907965907#c3023913448273073676
 168. http://creately.com/
 169. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=3023913448273073676
 170. https://www.blogger.com/profile/16373646147784913193
 171. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1509711934533#c7642384878948118244
 172. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=7642384878948118244
 173. https://www.blogger.com/profile/10177962095394942563
 174. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1509819117885#c7947386010815431577
 175. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=7947386010815431577
 176. https://www.blogger.com/profile/10177962095394942563
 177. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html?showcomment=1509819138882#c2688132120509659660
 178. https://www.blogger.com/delete-comment.g?blogid=7345806147365425073&postid=2688132120509659660
 179. http://peekaboo-vision.blogspot.com/2013/01/pystruct-more-structured-prediction.html
 180. http://peekaboo-vision.blogspot.com/2013/01/scikit-learn-013-released-we-want-your.html
 181. http://peekaboo-vision.blogspot.com/
 182. http://peekaboo-vision.blogspot.com/feeds/2208224658557676900/comments/default
 183. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html
 184. http://peekaboo-vision.blogspot.com/2012/11/a-wordcloud-in-python.html
 185. http://peekaboo-vision.blogspot.com/2012/12/kernel-approximations-for-efficient.html
 186. http://peekaboo-vision.blogspot.com/2010/09/mnist-for-ever.html
 187. http://peekaboo-vision.blogspot.com/2012/05/graphcuts-for-python-pygco.html
 188. http://peekaboo-vision.blogspot.com/2012/09/recap-of-my-first-kaggle-competition.html
 189. http://peekaboo-vision.blogspot.com/2010/10/python-things-you-never-need-empty.html
 190. http://peekaboo-vision.blogspot.com/2010/11/machine-learning-toolkits.html
 191. http://peekaboo-vision.blogspot.com/2013/01/pystruct-more-structured-prediction.html
 192. http://peekaboo-vision.blogspot.com/2012/06/structured-id166-and-structured.html
 193. http://scikit-learn.org/dev
 194. https://twitter.com/t3kcit
 195. http://www.ais.uni-bonn.de/~amueller/
 196. http://peekaboo-vision.blogspot.com/
 197. http://peekaboo-vision.blogspot.com/p/helpful-code.html
 198. http://peekaboo-vision.blogspot.com/p/papers.html
 199. https://www.blogger.com/

   hidden links:
 201. https://www.blogger.com/post-edit.g?blogid=7345806147365425073&postid=2208224658557676900&from=pencil
 202. https://www.blogger.com/comment-iframe.g?blogid=7345806147365425073&postid=2208224658557676900
 203. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html
 204. http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html
 205. http://peekaboo-vision.blogspot.com/2012/11/a-wordcloud-in-python.html
 206. http://peekaboo-vision.blogspot.com/2012/12/kernel-approximations-for-efficient.html
 207. http://peekaboo-vision.blogspot.com/2010/09/mnist-for-ever.html
 208. http://peekaboo-vision.blogspot.com/2012/05/graphcuts-for-python-pygco.html
 209. http://peekaboo-vision.blogspot.com/2012/09/recap-of-my-first-kaggle-competition.html
 210. http://peekaboo-vision.blogspot.com/2012/06/structured-id166-and-structured.html
 211. http://www.blogger.com/rearrange?blogid=7345806147365425073&widgettype=popularposts&widgetid=popularposts1&action=editwidget&sectionid=sidebar-right-1
 212. http://www.blogger.com/rearrange?blogid=7345806147365425073&widgettype=linklist&widgetid=linklist1&action=editwidget&sectionid=sidebar-right-1
 213. http://www.blogger.com/rearrange?blogid=7345806147365425073&widgettype=pagelist&widgetid=pagelist1&action=editwidget&sectionid=sidebar-right-1
 214. http://www.blogger.com/rearrange?blogid=7345806147365425073&widgettype=blogsearch&widgetid=blogsearch1&action=editwidget&sectionid=sidebar-right-1
 215. http://www.blogger.com/rearrange?blogid=7345806147365425073&widgettype=attribution&widgetid=attribution1&action=editwidget&sectionid=footer-3
