   iframe: [1]https://www.googletagmanager.com/ns.html?id=gtm-mp366cc

gensim logo

   [2]gensim
   gensim tagline

get expert help from the gensim authors

       [3]consulting in machine learning & nlp

       commercial document similarity engine: [4]scaletext.ai

       [5]corporate trainings in python data science and deep learning
     * [6]home
     * [7]tutorials
     * [8]install
     * [9]support
     * [10]api
     * [11]about

   tutorials

tutorials[12]  

   the tutorials are organized as a series of examples that highlight
   various features of gensim. it is assumed that the reader is familiar
   with the [13]python language, has [14]installed gensim and read the
   [15]introduction.

   the examples are divided into parts on:
     * [16]corpora and vector spaces
          + [17]from strings to vectors
          + [18]corpus streaming     one document at a time
          + [19]corpus formats
          + [20]compatibility with numpy and scipy
     * [21]topics and transformations
          + [22]transformation interface
          + [23]available transformations
     * [24]similarity queries
          + [25]similarity interface
          + [26]where next?
     * [27]experiments on the english wikipedia
          + [28]preparing the corpus
          + [29]latent semantic analysis
          + [30]id44
     * [31]distributed computing
          + [32]why distributed computing?
          + [33]prerequisites
          + [34]core concepts
          + [35]available distributed algorithms

preliminaries[36]  

   all the examples can be directly copied to your python interpreter
   shell. [37]ipython   s cpaste command is especially handy for copypasting
   code fragments, including the leading >>> characters.

   gensim uses python   s standard logging module to log various stuff at
   various priority levels; to activate logging (this is optional), run
>>> import logging
>>> logging.basicconfig(format='%(asctime)s : %(levelname)s : %(message)s', leve
l=logging.info)

quick example[38]  

   first, let   s import gensim and create a small corpus of nine documents
   and twelve features [39][1]:
>>> corpus = [[(0, 1.0), (1, 1.0), (2, 1.0)],
>>>           [(2, 1.0), (3, 1.0), (4, 1.0), (5, 1.0), (6, 1.0), (8, 1.0)],
>>>           [(1, 1.0), (3, 1.0), (4, 1.0), (7, 1.0)],
>>>           [(0, 1.0), (4, 2.0), (7, 1.0)],
>>>           [(3, 1.0), (5, 1.0), (6, 1.0)],
>>>           [(9, 1.0)],
>>>           [(9, 1.0), (10, 1.0)],
>>>           [(9, 1.0), (10, 1.0), (11, 1.0)],
>>>           [(8, 1.0), (10, 1.0), (11, 1.0)]]

   in gensim a corpus is simply an object which, when iterated over,
   returns its documents represented as sparse vectors. in this case we   re
   using a list of list of tuples. if you   re not familiar with the
   [40]vector space model, we   ll bridge the gap between raw strings,
   corpora and sparse vectors in the next tutorial on [41]corpora and
   vector spaces.

   if you   re familiar with the vector space model, you   ll probably know
   that the way you parse your documents and convert them to vectors has
   major impact on the quality of any subsequent applications.

   note

   in this example, the whole corpus is stored in memory, as a python
   list. however, the corpus interface only dictates that a corpus must
   support iteration over its constituent documents. for very large
   corpora, it is advantageous to keep the corpus on disk, and access its
   documents sequentially, one at a time. all the operations and
   transformations are implemented in such a way that makes them
   independent of the size of the corpus, memory-wise.

   next, let   s initialize a transformation:
>>> from gensim import models
>>>
>>> tfidf = models.tfidfmodel(corpus)

   a transformation is used to convert documents from one vector
   representation into another:
>>> vec = [(0, 1), (4, 1)]
>>> print(tfidf[vec])
[(0, 0.8075244), (4, 0.5898342)]

   here, we used [42]tf-idf, a simple transformation which takes documents
   represented as bag-of-words counts and applies a weighting which
   discounts common terms (or, equivalently, promotes rare terms). it also
   scales the resulting vector to unit length (in the [43]euclidean norm).

   transformations are covered in detail in the tutorial on [44]topics and
   transformations.

   to transform the whole corpus via tfidf and index it, in preparation
   for similarity queries:
>>> from gensim import similarities
>>>
>>> index = similarities.sparsematrixsimilarity(tfidf[corpus], num_features=12)

   and to query the similarity of our query vector vec against every
   document in the corpus:
>>> sims = index[tfidf[vec]]
>>> print(list(enumerate(sims)))
[(0, 0.4662244), (1, 0.19139354), (2, 0.24600551), (3, 0.82094586), (4, 0.0), (5
, 0.0), (6, 0.0), (7, 0.0), (8, 0.0)]

   how to read this output? document number zero (the first document) has
   a similarity score of 0.466=46.6%, the second document has a similarity
   score of 19.1% etc.

   thus, according to tfidf id194 and cosine similarity
   measure, the most similar to our query document vec is document no. 3,
   with a similarity score of 82.1%. note that in the tfidf
   representation, any documents which do not share any common features
   with vec at all (documents no. 4   8) get a similarity score of 0.0. see
   the [45]similarity queries tutorial for more detail.
     __________________________________________________________________

   [46][1] this is the same corpus as used in [47]deerwester et al.
   (1990): indexing by latent semantic analysis, table 2.

   smaller gensim logo [48]gensim footer image
      copyright 2009-now, [49]radim   eh    ek
   last updated on jan 31, 2019.
     * [50]home
     * |
     * [51]tutorials
     * |
     * [52]install
     * |
     * [53]support
     * |
     * [54]api
     * |
     * [55]about

   [56]tweet @gensim_py
   support:
   [57]stay informed via gensim mailing list: ____________________________
   subscribe

references

   1. https://www.googletagmanager.com/ns.html?id=gtm-mp366cc
   2. https://radimrehurek.com/gensim/index.html
   3. https://rare-technologies.com/
   4. https://scaletext.com/
   5. https://rare-technologies.com/corporate-training/
   6. https://radimrehurek.com/gensim/index.html
   7. https://radimrehurek.com/gensim/tutorial.html
   8. https://radimrehurek.com/gensim/install.html
   9. https://radimrehurek.com/gensim/support.html
  10. https://radimrehurek.com/gensim/apiref.html
  11. https://radimrehurek.com/gensim/about.html
  12. https://radimrehurek.com/gensim/tutorial.html#tutorials
  13. https://www.python.org/
  14. https://radimrehurek.com/gensim/install.html
  15. https://radimrehurek.com/gensim/intro.html
  16. https://radimrehurek.com/gensim/tut1.html
  17. https://radimrehurek.com/gensim/tut1.html#from-strings-to-vectors
  18. https://radimrehurek.com/gensim/tut1.html#corpus-streaming-one-document-at-a-time
  19. https://radimrehurek.com/gensim/tut1.html#corpus-formats
  20. https://radimrehurek.com/gensim/tut1.html#compatibility-with-numpy-and-scipy
  21. https://radimrehurek.com/gensim/tut2.html
  22. https://radimrehurek.com/gensim/tut2.html#transformation-interface
  23. https://radimrehurek.com/gensim/tut2.html#available-transformations
  24. https://radimrehurek.com/gensim/tut3.html
  25. https://radimrehurek.com/gensim/tut3.html#similarity-interface
  26. https://radimrehurek.com/gensim/tut3.html#where-next
  27. https://radimrehurek.com/gensim/wiki.html
  28. https://radimrehurek.com/gensim/wiki.html#preparing-the-corpus
  29. https://radimrehurek.com/gensim/wiki.html#latent-semantic-analysis
  30. https://radimrehurek.com/gensim/wiki.html#latent-dirichlet-allocation
  31. https://radimrehurek.com/gensim/distributed.html
  32. https://radimrehurek.com/gensim/distributed.html#why-distributed-computing
  33. https://radimrehurek.com/gensim/distributed.html#prerequisites
  34. https://radimrehurek.com/gensim/distributed.html#core-concepts
  35. https://radimrehurek.com/gensim/distributed.html#available-distributed-algorithms
  36. https://radimrehurek.com/gensim/tutorial.html#preliminaries
  37. http://ipython.scipy.org/
  38. https://radimrehurek.com/gensim/tutorial.html#quick-example
  39. https://radimrehurek.com/gensim/tutorial.html# 
  40. https://en.wikipedia.org/wiki/vector_space_model
  41. https://radimrehurek.com/gensim/tut1.html
  42. https://en.wikipedia.org/wiki/tf   idf
  43. https://en.wikipedia.org/wiki/norm_(mathematics)#euclidean_norm
  44. https://radimrehurek.com/gensim/tut2.html
  45. https://radimrehurek.com/gensim/tut3.html
  46. https://radimrehurek.com/gensim/tutorial.html#id1
  47. http://www.cs.bham.ac.uk/~pxt/ida/lsa_ind.pdf
  48. https://radimrehurek.com/gensim/index.html
  49. https://radimrehurek.com/cdn-cgi/l/email-protection#9be9fafff2f6e9fef3eee9fef0dbe8fee1f5faf6b5f8e1
  50. https://radimrehurek.com/gensim/index.html
  51. https://radimrehurek.com/gensim/tutorial.html
  52. https://radimrehurek.com/gensim/install.html
  53. https://radimrehurek.com/gensim/support.html
  54. https://radimrehurek.com/gensim/apiref.html
  55. https://radimrehurek.com/gensim/about.html
  56. https://twitter.com/gensim_py
  57. https://groups.google.com/group/gensim
