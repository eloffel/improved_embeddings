   #[1]github [2]recent commits to nlqa:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]9
     * [35]star [36]32
     * [37]fork [38]27

[39]jcoreyes/[40]nlqa

   [41]code [42]issues 2 [43]pull requests 0 [44]projects 0 [45]insights
   branch: master
   (button) create new file [46]find file [47]history
   [48]nlqa/qanta/
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [49]permalink
   type           name           latest commit message commit time
        [50]..
        failed to load latest commit information.
        [51]classify
        [52]data
        [53]preprocess
        [54]id56
        [55]util
        [56]license
        [57]readme
        [58]evaluate_qanta.py
        [59]qanta.py
        [60]single_proc_qanta.py

readme

--------------------------------------------------------------------------------
-------------------
    code for qanta, described in the following paper:
    a neural network for factoid id53 over paragraphs
    mohit iyyer, jordan boyd-graber, leonardo claudino, richard socher, and hal
daum   iii.
    empirical methods in natural language processing (emnlp), 2014

    contact mohit at miyyer@umd.edu for questions or comments.
--------------------------------------------------------------------------------
-------------------


what is it?
--------------------------------------------------------------------------------
-------------------
    qanta is a "id53 neural network with trans-sentential averagin
g".
    enclosed in this package is code to train qanta along with
    two datasets (history and literature questions). we also provide code to
    evaluate trained models and transform other data into the format that qanta
requires.


dependencies:
--------------------------------------------------------------------------------
-------------------
    - python (mine: 2.7.7), numpy (mine: 1.8.1), scikit-learn (mine: 0.14.1), nl
tk (mine: 2.0.4)
    - tip: an easy way to get all the dependencies at once is to download the fr
ee anaconda
      python distribution: [61]http://continuum.io/downloads

    - people have encountered bugs with numpy versions older than 1.7 and older
sklearn versions,
      but newer versions shouldn't cause any problems. let me know if you run in
to any issues.


data specifics:
--------------------------------------------------------------------------------
-------------------
    since we used proprietary data from naqt in the experiments reported in our
paper,
    the provided datasets are significantly smaller than the ones we used.
    in particular, the history dataset contains 1,713 questions (8,149 sentences
) and
    the literature dataset contains 2,246 questions (10,552 sentences). these qu
estions (and
    questions from other categories) are publically available at:
    [62]https://code.google.com/p/protobowl/downloads/detail?name=shuffled.json

        sample question:
            this author describes the last neanderthals being killed by homo sap
iens in his the
            inheritors, and a lone british naval officer hallucinates survival o
n a barren rock
            in his pincher martin. in another of his novels, the title entity sp
eaks to simon
            atop a wooden stick; later in that novel, the followers of jack stea
l piggy's
            glasses and break the conch shell of ralph, their former chief. for
10 points,
            name this british author who described boys on a formerly deserted i
sland in his
            lord of the flies.

        a: lord of the flies


how do i train a model?
--------------------------------------------------------------------------------
-------------------
    - to train a model on the history dataset with default parameters, use the f
ollowing command:
        python qanta.py

    - to train a model on the literature dataset, use this command:
        python qanta.py -data 'data/lit_split' -we 'data/lit_we' -b 341 -o 'mode
ls/lit_params'

    - for detailed explanation of qanta's hyperparameters, use the help command:
        python qanta.py -h

    - you can get better performance to a point (along with a longer training ti
me) by increasing
      the number of training epochs. for the results reported in the paper i ran
 the script for
      50 epochs. you can also train faster by increasing the number of cores use
d (default=6,
      change as per your machine's specs).

    - the resulting model is pickled and dumped into the models directory.


okay, i've trained a model. how do i evaluate it?
--------------------------------------------------------------------------------
-------------------
    - use the evaluate script (see following example):
        python evaluate_qanta.py -data data/hist_split -model models/hist_params

    - this script will train a model on qanta's learned representations and outp
ut both overall
      accuracy as well as accuracy at each sentence position of the question. in
 addition, it
      will train bow and bow-dt baseline models (as described in the paper) for
comparison.

    - as a point of comparison, i get around 60% accuracy on the history dataset
 and 54% accuracy on
      literature with qanta, which beats the bow-dt baseline by 10-15% and the b
ow baseline by ~20%.
      this shows that qanta is still effective on smaller datasets.


that's cool. but how do i feed my own data into qanta?
--------------------------------------------------------------------------------
-------------------
    - a preprocessing script has been provided to dependency parse your own ques
tions and
      convert them into the tree format required by qanta. you'll need to downlo
ad the stanford parser
      ([63]http://nlp.stanford.edu/software/lex-parser.shtml) to run the scripts
. also, a modified version
      of the parsing script lexparser.sh has been provided to output only typed
dependencies.


great. what if i want to modify qanta's code for my own task?
--------------------------------------------------------------------------------
-------------------
    - a single processor version of qanta has been provided along with a toy dat
aset for development
      purposes. if you mess with the propagation functions in id56/propagation.py
, you'll want to
      check your gradients on the toy dataset by running the following command:
        python single_proc_qanta.py


what should i cite if i use this code?
--------------------------------------------------------------------------------
-------------------
    @inproceedings{iyyer:boyd-graber:claudino:socher:daume-2014,
            title = {a neural network for factoid id53 over paragr
aphs},
            author = {mohit iyyer and jordan boyd-graber and leonardo claudino a
nd richard socher
            and hal daume iii},
            booktitle = {empirical methods in natural language processing},
            year = {2014},
            location = {doha, qatar},
        }

     *    2019 github, inc.
     * [64]terms
     * [65]privacy
     * [66]security
     * [67]status
     * [68]help

     * [69]contact github
     * [70]pricing
     * [71]api
     * [72]training
     * [73]blog
     * [74]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [75]reload to refresh your
   session. you signed out in another tab or window. [76]reload to refresh
   your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/jcoreyes/nlqa/commits/master.atom
   3. https://github.com/jcoreyes/nlqa/tree/master/qanta#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/jcoreyes/nlqa/tree/master/qanta
  32. https://github.com/join
  33. https://github.com/login?return_to=/jcoreyes/nlqa
  34. https://github.com/jcoreyes/nlqa/watchers
  35. https://github.com/login?return_to=/jcoreyes/nlqa
  36. https://github.com/jcoreyes/nlqa/stargazers
  37. https://github.com/login?return_to=/jcoreyes/nlqa
  38. https://github.com/jcoreyes/nlqa/network/members
  39. https://github.com/jcoreyes
  40. https://github.com/jcoreyes/nlqa
  41. https://github.com/jcoreyes/nlqa
  42. https://github.com/jcoreyes/nlqa/issues
  43. https://github.com/jcoreyes/nlqa/pulls
  44. https://github.com/jcoreyes/nlqa/projects
  45. https://github.com/jcoreyes/nlqa/pulse
  46. https://github.com/jcoreyes/nlqa/find/master
  47. https://github.com/jcoreyes/nlqa/commits/master/qanta
  48. https://github.com/jcoreyes/nlqa
  49. https://github.com/jcoreyes/nlqa/tree/de878a2518b1f08e585c5fda4a90d41448947ffd/qanta
  50. https://github.com/jcoreyes/nlqa
  51. https://github.com/jcoreyes/nlqa/tree/master/qanta/classify
  52. https://github.com/jcoreyes/nlqa/tree/master/qanta/data
  53. https://github.com/jcoreyes/nlqa/tree/master/qanta/preprocess
  54. https://github.com/jcoreyes/nlqa/tree/master/qanta/id56
  55. https://github.com/jcoreyes/nlqa/tree/master/qanta/util
  56. https://github.com/jcoreyes/nlqa/blob/master/qanta/license
  57. https://github.com/jcoreyes/nlqa/blob/master/qanta/readme
  58. https://github.com/jcoreyes/nlqa/blob/master/qanta/evaluate_qanta.py
  59. https://github.com/jcoreyes/nlqa/blob/master/qanta/qanta.py
  60. https://github.com/jcoreyes/nlqa/blob/master/qanta/single_proc_qanta.py
  61. http://continuum.io/downloads
  62. https://code.google.com/p/protobowl/downloads/detail?name=shuffled.json
  63. http://nlp.stanford.edu/software/lex-parser.shtml
  64. https://github.com/site/terms
  65. https://github.com/site/privacy
  66. https://github.com/security
  67. https://githubstatus.com/
  68. https://help.github.com/
  69. https://github.com/contact
  70. https://github.com/pricing
  71. https://developer.github.com/
  72. https://training.github.com/
  73. https://github.blog/
  74. https://github.com/about
  75. https://github.com/jcoreyes/nlqa/tree/master/qanta
  76. https://github.com/jcoreyes/nlqa/tree/master/qanta

   hidden links:
  78. https://github.com/
  79. https://github.com/jcoreyes/nlqa/tree/master/qanta
  80. https://github.com/jcoreyes/nlqa/tree/master/qanta
  81. https://github.com/jcoreyes/nlqa/tree/master/qanta
  82. https://github.com/
