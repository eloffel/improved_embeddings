libid166 -- a library for support vector machines

chih-chung chang and [1]chih-jen lin
   _______________________________________________________________________

   [new.gif] version 3.23 released on july 15, 2018. it conducts some
   minor fixes.
   [new.gif] [2]libid166 tools provides many extensions of libid166. please
   check it if you need some functions not supported in libid166.
   [new.gif] we now have a nice page [3]libid166 data sets providing
   problems in libid166 format.
   [new.gif] [4]a practical guide to id166 classification is available now!
   (mainly written for beginners)
   we now have an easy script (easy.py) for users who know nothing about
   id166. it makes everything automatic--from data scaling to parameter
   selection.
   the parameter selection tool grid.py generates the following contour of
   cross-validation accuracy. to use this tool, you also need to install
   [5]python and [6]gnuplot.

                              [heart_scale.png]

   to see the importance of parameter selection, please see our [7]guide
   for beginners.
   [new.gif] using libid166, our group is the winner of ijid98 2001 challenge
   (two of the three competitions), eunite world wide competition on
   electricity load prediction, [8]nips 2003 feature selection challenge
   (third place), [9]wcci 2008 causation and prediction challenge (one of
   the two winners), and [10]active learning challenge 2010 (2nd place).
     __________________________________________________________________

  introduction

   libid166 is an integrated software for support vector classification,
   (c-svc, [11]nu-svc), regression (epsilon-svr, [12]nu-svr) and
   distribution estimation ([13]one-class id166). it supports multi-class
   classification.

   since version 2.8, it implements an smo-type algorithm proposed in this
   paper:
   r.-e. fan, p.-h. chen, and c.-j. lin. [14]working set selection using
   second order information for training id166. journal of machine learning
   research 6, 1889-1918, 2005. you can also find a pseudo code there.
   ([15]how to cite libid166)

   our goal is to help users from other fields to easily use id166 as a
   tool. libid166 provides a simple interface where users can easily link it
   with their own programs. main features of libid166 include
     * different id166 formulations
     * efficient multi-class classification
     * cross validation for model selection
     * id203 estimates
     * various kernels (including precomputed kernel matrix)
     * weighted id166 for unbalanced data
     * both c++ and [16]java sources
     * [17]gui demonstrating id166 classification and regression
     * [18]python, [19]r, [20]matlab, [21]perl, [22]ruby, [23]weka,
       [24]common lisp, [25]clisp, [26]haskell, [27]ocaml, [28]labview,
       and [29]php interfaces. [30]c# .net code and [31]cuda extension is
       available.
       it's also included in some data mining environments:
       [32]rapidminer, [33]pcp, and [34]lionsolver.
     * automatic model selection which can generate contour of cross
       validation accuracy.
     __________________________________________________________________

  download libid166 the current release (version 3.23, july 2017) of libid166 can be
  obtained by downloading the [35]zip file or [36]tar.gz file. you can also
  check this [37]github directory. please e-mail us if you have problems to
  download the file.

   the package includes the source code of the library in c++ and java,
   and a simple program for scaling training data. a readme file with
   detailed explanation is provided. for ms windows users, there is a
   sub-directory in the zip file containing binary executable files.
   precompiled java class archive is also included.

   please read the [38]copyright notice before using libid166.
     __________________________________________________________________

  graphic interface here is a simple applet demonstrating id166 classification and
  regression.
  click on the drawing area and use ``change'' to change class of data. then use
  ``run'' to see the results.

      (button) change (button) run (button) clear -t 2 -c 100_________

   examples of options: -s 0 -c 10 -t 1 -g 1 -r 1 -d 3
   classify a binary data with polynomial kernel (u'v+1)^3 and c = 10

options:
-s id166_type : set type of id166 (default 0)
        0 -- c-svc
        1 -- nu-svc
        2 -- one-class id166
        3 -- epsilon-svr
        4 -- nu-svr
-t kernel_type : set type of id81 (default 2)
        0 -- linear: u'*v
        1 -- polynomial: (gamma*u'*v + coef0)^degree
        2 -- radial basis function: exp(-gamma*|u-v|^2)
        3 -- sigmoid: tanh(gamma*u'*v + coef0)
-d degree : set degree in id81 (default 3)
-g gamma : set gamma in id81 (default 1/num_features)
-r coef0 : set coef0 in id81 (default 0)
-c cost : set the parameter c of c-svc, epsilon-svr, and nu-svr (default 1)
-n nu : set the parameter nu of nu-svc, one-class id166, and nu-svr (default 0.5)
-p epsilon : set the epsilon in id168 of epsilon-svr (default 0.1)
-m cachesize : set cache memory size in mb (default 100)
-e epsilon : set tolerance of termination criterion (default 0.001)
-h shrinking: whether to use the shrinking heuristics, 0 or 1 (default 1)
-b id203_estimates: whether to train a svc or svr model for id203 es
timates, 0 or 1 (default 0)
-wi weight: set the parameter c of class i to weight*c, for c-svc (default 1)

the k in the -g option means the number of attributes in the input data.

   to install this tool, please read the readme file in the package. there
   are windows, x, and java versions in the package.
     __________________________________________________________________

  additional information ([39]how to cite libid166)

   [40]frequently asked questions (faq) and [41]change log

   references of libid166:
     * official implementation document:
       c.-c. chang and c.-j. lin. libid166 : a library for support vector
       machines. acm transactions on intelligent systems and technology,
       2:27:1--27:27, 2011.
       [42]pdf, [43]ps.gz, [44]acm digital lib.
     * instructions for using libid166 are in the readme files in the main
       directory and some sub-directories.
     * a guide for beginners:
       c.-w. hsu, c.-c. chang, c.-j. lin. [45]a practical guide to support
       vector classification
     * an [46]introductory video for windows users.
     * other implementation documents:
       r.-e. fan, p.-h. chen, and c.-j. lin. [47]working set selection
       using the second order information for training id166. journal of
       machine learning research 6, 1889-1918, 2005. you can also find a
       pseudo code there.
     * [48]other documents written by users. (including some non-english
       documents)

   for more information about nu-id166 and one-class id166 , please see
     * b. sch  lkopf, a. smola, r. williamson, and p. l. bartlett. new
       support vector algorithms. neural computation, 12, 2000, 1207-1245.
     * b. sch  lkopf, j. platt, j. shawe-taylor, a. j. smola, and r. c.
       williamson. estimating the support of a high-dimensional
       distribution. neural computation, 13, 2001, 1443-1471.
     __________________________________________________________________

  interfaces and extensions to libid166

   language description maintainers and their affiliation supported libid166
   version link
   java java code close to libid166 c code. libid166 authors at national
   taiwan university. the latest included in [49]libid166 package
   java refactored java code for faster training/testing. [50]david
   soergel at university of california, berkeley. 2.88 [51]jlibid166
   matlab and octave a simple matlab and octave interface libid166 authors
   at national taiwan university. the latest included in [52]libid166
   package
   matlab an old version (no longer available) junshui ma and stanley
   ahalt at ohio state university 2.33 [53]dead link
   r please install by typing install.packages('e1071') at r command line
   prompt. ([54]document and [55]examples). [56]david meyer at the
   wirtschaftsuniversit  t wien (vienna university of economics and
   business administration) 3.17 [57]www
   python a python interface has been included in libid166 since version
   2.33. initiated by [58]carl staelin at hp labs. updated/maintained by
   libid166 authors. the latest included in [59]libid166 package
   python and c# interfaces provided in the framework pcid166 uwe schmitt
   from germany 2.71 [60]pcid166
   perl   matthew laird at simon fraser university, canada and saul rosa
   3.12 [61]perl-libid166
   ruby ruby language bindings for libid166 c. florian ebeling and rimas
   silkaitis 3.18 [62]rb-libid166
   ruby
   a ruby interface via swig tom zeng 2.9 [63]libid166-ruby-swig
   weka   yasser el-manzalawy and vasant honavar at iowa state university.
   2.8 [64]wlid166
   node.js   nicolas panel 3.20 [65]node.js interface
   javascript port of libid166 for javascript daniel kostro the latest
   [66]port for javascript
   scilab   holger nahrstaedt from the technical university of berlin 3.11
   [67]scilab interface
   common lisp common lisp wrapper of libid166 [68]g  bor melis 2.88
   [69]common lisp wrapper
   [70]clisp an [71]ffi-based interface distributed with clisp [72]sam
   steingold 2.9 [73]clisp libid166 module
   [74]haskell a haskell binding to libid166 paulo tanimoto 3.1 [75]haskell
   binding
   [76]ocaml a ocaml binding to libid166 oliver gu 3.16 [77]ocaml binding
   nimrod libid166 wrapper for [78]nimrod andreas rumpf 3.12 [79]libid166
   wrapper
   .net libid166 for .net nicolas panel 3.17 [80]libid166-net
   .net .net conversion of libid166 [81]matthew johnson 2.89 [82]id166.net
   cuda libid166 accelerated with gpu using the cuda framework a.
   athanasopoulos, a. dimou, v. mezaris, and i. kompatsiaris at certh-iti
   3.0 [83]mklab
   cell libid166 accelerated using cell processors [84]moreno marzolla at
   university of bologna, italy 2.89 [85]libid166_cbe
   labview labview interface to libid166. both windows/linux are supported.
   oystein sture 3.20 [86]labview interface
   c# c# wrapper of libid166 can erhan 3.20 [87]github directory
   php libid166 binding for php ian barber the latest (libid166 must be
   installed first) [88]php binding
   julia svr in julia [89]velimir v vesselinov 3.22 [90]svr in julia
   android libid166 on android [91]yu-chih tung at univ of michigan 3.20
   [92]libid166 on androis
   gretl gretl wrapper for libid166 [93]allin cottrell at wake forest
   university 3.22 [94]gretl wrapper for libid166
   go libid166 in go ed walker 3.18 [95]libid166 in go
     __________________________________________________________________

   acknowledgments: this work was supported in part by the national
   science council of taiwan via the grant nsc 89-2213-e-002-106. the
   authors thank [96]their group members and users for helpful discussion
   and comments. please send comments and suggestions to [97]chih-jen lin.

references

   1. https://www.csie.ntu.edu.tw/~cjlin/index.html
   2. https://www.csie.ntu.edu.tw/~cjlin/libid166tools
   3. https://www.csie.ntu.edu.tw/~cjlin/libid166tools/datasets
   4. https://www.csie.ntu.edu.tw/~cjlin/papers/guide/guide.pdf
   5. http://www.python.org/download/
   6. http://www.gnuplot.info/
   7. https://www.csie.ntu.edu.tw/~cjlin/papers/guide/guide.pdf
   8. http://clopinet.com/isabelle/projects/nips2003/
   9. http://www.causality.inf.ethz.ch/home.php
  10. http://www.causality.inf.ethz.ch/activelearning.php
  11. https://www.csie.ntu.edu.tw/~cjlin/libid166/#nuandone
  12. https://www.csie.ntu.edu.tw/~cjlin/libid166/#nuandone
  13. https://www.csie.ntu.edu.tw/~cjlin/libid166/#nuandone
  14. https://www.csie.ntu.edu.tw/~cjlin/papers/quadworkset.pdf
  15. https://www.csie.ntu.edu.tw/~cjlin/libid166/faq.html#f203
  16. https://www.csie.ntu.edu.tw/~cjlin/libid166/#java
  17. https://www.csie.ntu.edu.tw/~cjlin/libid166/#gui
  18. https://www.csie.ntu.edu.tw/~cjlin/libid166/#python
  19. https://www.csie.ntu.edu.tw/~cjlin/libid166/#r
  20. https://www.csie.ntu.edu.tw/~cjlin/libid166/#matlab
  21. https://www.csie.ntu.edu.tw/~cjlin/libid166/#perl
  22. https://www.csie.ntu.edu.tw/~cjlin/libid166/#ruby
  23. https://www.csie.ntu.edu.tw/~cjlin/libid166/#weka
  24. https://www.csie.ntu.edu.tw/~cjlin/libid166/#lisp
  25. https://www.csie.ntu.edu.tw/~cjlin/libid166/#clisp
  26. https://www.csie.ntu.edu.tw/~cjlin/libid166/#haskell
  27. https://www.csie.ntu.edu.tw/~cjlin/libid166/#ocaml
  28. https://www.csie.ntu.edu.tw/~cjlin/libid166/#labview
  29. https://www.csie.ntu.edu.tw/~cjlin/libid166/#php
  30. https://www.csie.ntu.edu.tw/~cjlin/libid166/#csharp
  31. https://www.csie.ntu.edu.tw/~cjlin/libid166/#cuda
  32. http://rapid-i.com/
  33. http://pcp.sourceforge.net/
  34. http://lionoso.org/
  35. http://www.csie.ntu.edu.tw/~cjlin/cgi-bin/libid166.cgi?+http://www.csie.ntu.edu.tw/~cjlin/libid166+zip
  36. http://www.csie.ntu.edu.tw/~cjlin/cgi-bin/libid166.cgi?+http://www.csie.ntu.edu.tw/~cjlin/libid166+tar.gz
  37. https://github.com/cjlin1/libid166
  38. http://www.csie.ntu.edu.tw/~cjlin/libid166/copyright
  39. https://www.csie.ntu.edu.tw/~cjlin/libid166/faq.html#f203
  40. https://www.csie.ntu.edu.tw/~cjlin/libid166/faq.html
  41. https://www.csie.ntu.edu.tw/~cjlin/libid166/log
  42. https://www.csie.ntu.edu.tw/~cjlin/papers/libid166.pdf
  43. https://www.csie.ntu.edu.tw/~cjlin/papers/libid166.ps.gz
  44. http://portal.acm.org/citation.cfm?id=1961199&cfid=29950432&cftoken=30974232
  45. https://www.csie.ntu.edu.tw/~cjlin/papers/guide/guide.pdf
  46. http://www.youtube.com/watch?v=gepwtnaqck8
  47. https://www.csie.ntu.edu.tw/~cjlin/papers/quadworkset.pdf
  48. https://www.csie.ntu.edu.tw/~cjlin/libid166/otherdocuments/index.html
  49. https://www.csie.ntu.edu.tw/~cjlin/libid166/#download
  50. http://www.davidsoergel.com/
  51. http://dev.davidsoergel.com/trac/jlibid166/
  52. https://www.csie.ntu.edu.tw/~cjlin/libid166/#download
  53. http://eewww.eng.ohio-state.edu/~maj/osu_id166/
  54. http://cran.r-project.org/web/packages/e1071/e1071.pdf
  55. https://www.csie.ntu.edu.tw/~cjlin/libid166/r_example.html
  56. http://wi.wu-wien.ac.at/home/meyer/
  57. http://cran.r-project.org/web/packages/e1071/index.html
  58. http://www.hpl.hp.com/personal/carl_staelin
  59. https://www.csie.ntu.edu.tw/~cjlin/libid166/#download
  60. http://public.procoders.net/pcid166/
  61. https://github.com/rosasaul/algorithm-id166
  62. https://rubygems.org/gems/rb-libid166
  63. http://github.com/tomz/libid166-ruby-swig/tree/master
  64. http://www.cs.iastate.edu/~yasser/wlid166/
  65. https://github.com/nicolaspanel/node-id166/tree/master
  66. https://github.com/mljs/libid166
  67. http://atoms.scilab.org/toolboxes/libid166
  68. http://quotenil.com/
  69. http://www.cliki.net/cl-libid166
  70. http://clisp.cons.org/
  71. http://clisp.cons.org/impnotes/dffi.html
  72. http://sds.podval.org/
  73. http://clisp.cons.org/impnotes/libid166.html
  74. http://www.haskell.org/
  75. http://hackage.haskell.org/package/bindings-id166
  76. http://caml.inria.fr/
  77. https://bitbucket.org/ogu/libid166-ocaml/
  78. http://nimrod-lang.org/
  79. http://nimrod-lang.org/libid166.html
  80. https://github.com/nicolaspanel/libid166.net
  81. http://www.matthewajohnson.org/
  82. http://www.matthewajohnson.org/software/id166.html
  83. http://mklab.iti.gr/project/gpu-libid166
  84. http://www.moreno.marzolla.name/
  85. http://www.moreno.marzolla.name/software/id166cell/
  86. https://github.com/oysstu/labview-libid166
  87. https://github.com/ccerhan/libid166sharp
  88. http://pecl.php.net/package/id166
  89. http://ees.lanl.gov/monty
  90. https://github.com/madsjulia/svr.jl
  91. https://yctung.github.io/
  92. https://github.com/yctung/androidlibid166
  93. http://users.wfu.edu/cottrell/
  94. http://ricardo.ecn.wfu.edu/pub/gretl/id166/gretl-id166.pdf
  95. https://github.com/ewalker544/libid166-go
  96. http://www.csie.ntu.edu.tw/~cjlin/libid166/acknowledgements
  97. https://www.csie.ntu.edu.tw/~cjlin/index.html
