cs 3813/718  spring 2014

advanced programming

professor liang huang
huang@cs.qc.cuny.edu

course homepage: 

http://acl.cs.qc.edu/~lhuang/advprg

logistics

    coordinates:   mw 9:15-10:30am  sb a135b
    personnel
    instructor   prof. liang huang         huang@cs
    ta              dr. lemao liu              lemaoliu@gmail.com  
    admin        xiuyi huang                 xiuyi@cs
    for questions, always email both instructor and ta!
    of   ce hours (subject to change!)
    mw 10:40-11:15am  sb a227
    additional of   ce hours available before quizzes/exams

2

academic integrity

    an automatic f if you   re caught on any of these:
    copying another person   s code for hw/project
    copying code from online resources for hw/project
    discussions with others for take-home quiz/exams
    cheating during quizzes/exams
    any other cheating behavior de   ned by university
    catching cheating is easier than you thought! :-)
    i will report every single case to the university

3

textbooks

    main text
    clrs, introduction to algorithms, 3rd edi. (2nd edi. is also    ne)
    additional textbooks
    kleinberg and tardos, algorithm design
    how to think like a computer scientist: learning python

4

this course is about...

    implementation of some of the most important algorithms
    review of id206
    ef   cient python implementations
    preparation for industrial interviews and your career
    if you get an a in this course, i guarantee you a position in 
google, facebook, amazon, or microsoft
    if you get an a- => summer internship w/ them
    preparation for programming contests
    many hw questions are taken from contest problems

5

this course is not about...

    programming
    i assume you   re    uent in c++ and java
    we will use python but that   s not the focus of this course
    data structures
    i assume you   re good in data structures

6

tentative schedule

1. python tutorial, basic data structures and sorting
    hw 1 out on t 1/28: divide & conquer, qsort/qselect, msort, bsts
    quiz 1 on w 2/5 => check if you have enough prerequisite background
    hw 2 out on m 2/17: heaps & heapsort, hash, balanced bsts
2. id145
    hw 3 out on m 2/24 (simple chain dp); hw4 out on m 3/3 (tree dp)
    midterm on m 3/17
3. graph algorithms
    hw 5 out on m 3/24 (dfs/bfs, sccs)
    quiz 2 on m 4/9 (right before spring break)
    hw 6 out on m 4/28 (dijkstra, kruskal, prim)

7

grades

    programming homework: 5% x 6 = 30%
    electronic submission; work individually: only high-level discussions 

are ok, and you have to declare who you discussed with

    grading is mostly black-box: you should follow strict i/o formats!
    please work on linux or mac; we do not provide windows support
    late penalty: you can submit only one hw late for 24 hours.
    quizzes: 10% x 2 = 20%   midterm: 20%    final project: 20%
    class participation: 10%
    asking/answering questions in class
    catching/   xing bugs in slides/exams/hw & other suggestions

8

why python?

    because it   s easy and great fun!
    only 15 years old, yet very popular now
    a wide-range of applications, esp. in ai and web
    extremely easy to learn
    many schools have shifted their intro-courses to python 
    fast to write
    much shorter code compared to c, c++, and java
    easy to read and maintain
    more english-like syntax and a smaller semantic-gap

9

on to python...

   hello, world   

    c

#include <stdio.h>

int main(int argc, char ** argv) 
{ 
!printf(   hello, world!\n   );
}
    java
public class hello 
{
!public static void main(string argv[])
!{
! !system.out.println(   hello, world!   );
!}
}

    now in python

print    hello, world!   

11

printing an array

void print_array(char* a[], int len)
{
!int i;
!for (i = 0; i < len; i++)
!{
! !printf(   %s\n   , a[i]);
!}
}

for element in list:
! print element

only indentations
no { ... } blocks!

or even simpler:
print list

has to specify len, 

and only for one type (char*)

c
python

for ...  in ... :
	

...

no c-style for-loops!
	


for (i = 0; i < 10; i++)

12

reversing an array

static int[] reverse_array(int a[])
{
!int [] temp = new int[ a.length ];
!for (int i = 0; i < len; i++)
!{
! !temp [i] = a [a.length - i - 1];
!}
!return temp;
}
def rev(a):
! if a == []:
! ! return []
! else:
! ! return rev(a[1:]) + [a[0]] 

def ...(...):
	

...

java
python

no need to specify argument 

and return types!

python will    gure it out.

(dynamically typed)

or even simpler:
a.reverse()

a without a[0]

singleton list

built-in list-processing function

13

quick-sort

if (low >= high) return;
int p = partition(low, high);
sort(low, p);
sort(p + 1, high);

public void sort(int low, int high)
{
!
!
!
!
}
void swap(int i, int j)
{!
!int
!a
!a
}

[i] = a[j];
[j] = temp;

 temp = a[i];

 (i < j)

 pivot = a[low];
 i = low - 1;
 j = high + 1;

int partition(int low, int high)
{
!int
!int
!int
!while
!{
!
!
!
!}
!return
}

++; while (a[i] < pivot) i++;
--; while (a[j] > pivot) j--;
 (i < j) swap(i, j);

!i
!j
!if

 j;

{x | x     a, x < pivot}

java
python

for x in a if x < pivot ]
for x in a[1:] if x >= pivot]

return  sort(left)  + [pivot] +  sort(right)

smaller semantic-gap!

how about return [sort(left)] + [pivot] + [sort(right)]   got an error??

14

return []

def sort(a):
!
!
!
!
!
!
!

if a == []:
!
else:
!pivot = a[0]! !
!left  = [x 
!right = [x 
!

python is...

    a scripting language (strong in text-processing)
    interpreted, like perl, but much more elegant
    a very high-level language (closer to human semantics)
    almost like pseudo-code!
    procedural (like c, pascal, basic, and many more)
    but also object-oriented (like c++ and java)
    and even functional! (like ml/ocaml, lisp/scheme, haskell, etc.)
    from today, you should use python for everything
    not just for scripting, but for serious coding!

15

let   s take a closer look...

python interpreter

    three ways to run a python program
>>> for i in range(5):
1. interactive
...     print i,
    like drjava
... 
0 1 2 3 4
2. (default) save to a    le, say,  foo.py
    in command-line:   python foo.py
3. add a special line pointing to the default interpreter
    add #!/usr/bin/env python to the top of foo.py
    make foo.py executable (chmod +x foo.py)
    in the command-line:   ./foo.py

17

the right version of python

    we will use the latest version 2.7 (e.g. 2.7.3)
    python 3.x is a very different experimental branch...
    your default machine is    cs12.cs.qc.cuny.edu   , where 
your default    python    is already 2.7
    or you can install 2.7 on your own mac/windows
    ta will help you with installations and versions

bash-2.0$ python
python 2.7.1 (#1, jan 22 2010, 18:59:00) 
[gcc 3.3 20030304 (apple computer, inc. build 1495)] on darwin
type "help", "copyright", "credits" or "license" for more information.
>>>

[<lhuang@mac os x:~>] which python
/library/frameworks/python.framework/versions/2.7/bin/python

18

basic python syntax

numbers and strings
    like java, python has built-in (atomic) types
    numbers (int, float), bool, string, list, etc.
    numeric operators: + - * / ** % 
>>> a = 5
>>> b = 3
>>> type (5)
<type 'int'>
>>> a += 4
>>> a
9
no i++ or ++i

>>> c = 1.5
>>> 5/2
2
>>> 5/2.
2.5
>>> 5 ** 2
25

>>> s =    hey   
>>> s +     guys    
'hey guys'
>>> len(s)
3
>>> s[0]
'h'
>>> s[-1]
'y'

>>> from __future__ import division
>>> 5/2
2.5

recommended!

20

assignments and comparisons

>>> a = b = 0
>>> a
0
>>> b
0

>>> a, b = 3, 5
>>> a + b
8
>>> (a, b) = (3, 5)
>>> a + b
>>> 8
>>> a, b = b, a
(swap)

>>> a = b = 0
>>> a == b
true
>>> type (3 == 5)
<type 'bool'>
>>> "my" == 'my'
true

>>> (1, 2) == (1, 2)
true

>>> 1, 2 == 1, 2
???
(1, false, 2)

21

for loops and range()
    for always iterates through a list or sequence
>>> sum = 0
>>> for i in range(10):
...     sum += i
... 
>>> print sum
45

foreach (string word : words)
!system.out.println(word)

java 1.5 

>>> for word in ["welcome", "to", "python"]:
...     print word,
... 
welcome to python

>>> range(5), range(4,6), range(1,7,2)
([0, 1, 2, 3, 4], [4, 5], [1, 3, 5])

22

while loops
    very similar to  while in java and c
    but be careful
    in behaves differently in for and  while
    break statement, same as in java/c
>>> a, b = 0, 1
>>> while b <= 5:
...       print b
...       a, b = b, a+b
... 
1
1
2
3
5

simultaneous
assignment

   bonacci series

23

conditionals

>>> if x < 10 and x >= 0:
...     print x, "is a digit"
...
>>> false and false or true
true
>>> not true
false

>>> if 4 > 5:
...     print "foo"
... else:
...     print "bar"
... 
bar

>>> print    foo    if 4 > 5 else    bar   
...
>>> bar

conditional expr since python 2.5

c/java

printf( (4>5)?    foo    :    bar   );

24

if ... elif ... else

>>> a = "foo"
>>> if a in ["blue", "yellow", "red"]:
...     print a + " is a color"
... else:
...! ! if a in ["us", "china"]:
...     !! ! print a + " is a country"
... ! ! else:
...! ! ! ! print "i don't know what   , a,    is!"
... 
i don't know what foo is!

>>> if a in ...:
...     print ...
... elif a in ...:
...     print ...
... else:
...     print ... 

c/java

case    blue   :
case    yellow   :
case    red   :
!print ...; break;
case    us   :
case    china   :
!print ...; break;
else:
!print ...; 

switch (a) {
!
!
!
!
!
!
!
!
!
}
! !

25

break, continue and else

    break and continue borrowed from c/java
    special else in loops
    when loop terminated normally (i.e., not by break)
    very handy in testing a set of properties

|| func(n)

>>> for n in range(2, 10):
...     for x in range(2, n):
...         if n % x == 0:
...             break
...     else:
...         print n,
... 

prime numbers

for (n=2; n<10; n++) {
!good = true;
!for (x=2; x<n; x++)
! !if (n % x == 0) {
! ! !good = false;
c/java
! ! !break;
! !}
!if (good)
! !printf(   %d    , n);
}  

if (x==n)

26

de   ning a function def

    no type declarations needed! wow!
    python will    gure it out at run-time
    you get a run-time error for type violation
    well, python does not have a compile-error at all

>>> def fact(n):
...   if n == 0:
...       return 1
...   else:
...       return n * fact(n-1)
... 
>>> fact(4)
24

27

fibonacci revisited

>>> a, b = 0, 1
>>> while b <= 5:
...       print b
...       a, b = b, a+b
... 
1
1
2
3
5

def fib(n):
! if n <= 1:
! ! return n
! else:
! ! return fib (n-1) + fib (n-2)

conceptually cleaner, but much slower!

>>> fib(5)
5
>>> fib(6)
8

28

default values

>>> def add(a, l=[]):
...    return l + [a]
... 
>>> add(1)
[1]

>>> add(1,1)
error!

>>> add(add(1))
[[1]]

>>> add(add(1), add(1))
???
[1, [1]]

lists are heterogenous!

29

approaches to typing

    strongly typed: types are strictly enforced. no implicit 

type conversion

- weakly typed: not strictly enforced
- statically typed: type-checking done at compile-time
    dynamically typed: types are inferred at runtime

weak

strong

static

c, c++

java, pascal

dynamic

perl, vb

python, ocaml

30

lists

heterogeneous variable-sized array

a = [1,'python', [2,'4']]

basic list operations

    length, subscript, and slicing

>>> a = [1,'python', [2,'4']]
>>> len(a)
3
>>> a[2][1]
'4'
>>> a[3]
indexerror!
>>> a[-2]
'python' 
>>> a[1:2]
['python']

>>> a[0:3:2]
[1, [2, '4']]

>>> a[:-1]
[1, 'python']

>>> a[0:3:]
[1, 'python', [2, '4']]

>>> a[0::2]
[1, [2, '4']]

>>> a[::]
[1, 'python', [2, '4']]

>>> a[:]
[1, 'python', [2, '4']]

32

+, extend, +=, append

    extend (+=) and append mutates the list!

>>> a = [1,'python', [2,'4']]
>>> a + [2]
[1, 'python', [2, '4'], 2]
>>> a.extend([2, 3])
>>> a
[1, 'python', [2, '4'], 2, 3]
same as a += [2, 3]

>>> a.append('5')
>>> a
[1, 'python', [2, '4'], 2, 3, '5']
>>> a[2].append('xtra')
>>> a
[1, 'python', [2, '4', 'xtra'], 2, 3, '5']

33

comparison and reference

    as in java, comparing built-in types is by value
    by contrast, comparing objects is by reference

>>> [1, '2'] == [1, '2']
true
>>> a = b = [1, '2']
>>> a == b
true
>>> a is b
true
>>> b [1] = 5
>>> a
[1, 5]
>>> a = 4
>>> b
[1, 5]
>>> a is b
>>> false

>>> c = b [:]
>>> c
[1, 5]
>>> c == b
true
>>> c is b
false

slicing gets 
a shallow copy

>>> b[:0] = [2]
>>> b
[2, 1, 5]
>>> b[1:3]=[]
>>> b
[2]
>>> a = b
>>> b += [1]
>>> a is b
true

insertion

deletion

a += b means
a.extend(b)  

not

a = a + b !!

34

list comprehension

>>> a = [1, 5, 2, 3, 4 , 6]
>>> [x*2 for x in a]
[2, 10, 4, 6, 8, 12]

>>> [x for x in a if \
... len( [y for y in a if y < x] ) == 3 ]
[4]

4th smallest element

>>> a = range(2,10)
>>> [x*x for x in a if \
... [y for y in a if y < x and (x % y == 0)] == [] ]
???
[4, 9, 25, 49]

square of prime numbers

35

list comprehensions

>>> vec = [2, 4, 6]
>>> [[x,x**2] for x in vec]
[[2, 4], [4, 16], [6, 36]]

>>> [x, x**2 for x in vec]
syntaxerror: invalid syntax

>>> [(x, x**2) for x in vec]
[(2, 4), (4, 16), (6, 36)]

>>> vec1 = [2, 4, 6]
>>> vec2 = [4, 3, -9]
>>> [x*y for x in vec1 for y in vec2]
[8, 6, -18, 16, 12, -36, 24, 18, -54]

>>> [x+y for x in vec1 for y in vec2]
[6, 5, -7, 8, 7, -5, 10, 9, -3]

(cross product)

>>> [vec1[i]*vec2[i] for i in range(len(vec1))]
[8, 12, -54]

should use zip instead!

(dot product)

36

strings

sequence of characters

basic string operations

    join, split, strip
    upper(), lower()

>>> s = " this is  a  python course. \n"
>>> words = s.split()
>>> words
['this', 'is', 'a', 'python', 'course.']
>>> s.strip()
'this is  a  python course.'
>>> " ".join(words)
'this is a python course.'
>>> "; ".join(words).split("; ")
['this', 'is', 'a', 'python', 'course.']
>>> s.upper()
' this is  a  python course. \n'

http://docs.python.org/lib/string-methods.html

38

basic search/replace in string

>>> "this is a course".find("is")
2
>>> "this is a course".find("is a")
5
>>> "this is a course".find("is at")
-1

>>> "this is a course".replace("is", "was")
'thwas was a course'
>>> "this is a course".replace(" is", " was")
'this was a course'
>>> "this is a course".replace("was", "were")
'this is a course'

these operations are much faster than regexps!

39

string formatting

>>> print    %.2f%%    % 97.2363
97.24% 

>>> s = '%s has %03d quote types.' % ("python", 2)
>>> print s
python has 002 quote types.

40

sequence types

    list, tuple, str;     buffer, xrange, unicode

>>> lists = [[]] * 3
>>> lists
[[], [], []]

>>> lists[0].append(3)
>>> lists
[[3], [3], [3]]

41

the tricky *

>>> [1, 2] * 3
[1, 2, 1, 2, 1, 2]

>>> [] * 3
[]

>>> [[]] * 3
[[], [], []]

>>> a = [3]
>>> b = a * 3
>>> b
[3, 3, 3]

>>> a[0] = 4
>>> b
[3, 3, 3]

>>> a = [[3]]
>>> b = a * 3
>>> b
[[3], [3], [3]]

>>> a[0][0] = 4
[[4], [4], [4]]

>>> a[0] = 5
>>> b
[[4], [4], [4]]

>>> a = [3]
>>> b = [a] * 3
>>> b
[[3], [3], [3]]

>>> a[0] = 4
>>> b
[[4], [4], [4]] 

>>> b[1] = 5
>>> b
[[4], 5, [4]]

>>> b[0] += [2]
[[4, 2], 5, [4, 2]]

>>> " " * 3
"   "

>>> "- " * 3
"- - - "

42

pythonic styles

    do not write ...                 when you can write ...

for key in d.keys():
if d.has_key(key):
i = 0 
for x in a:
    ...
    i += 1
a[0:len(a) - i]
for line in \
    sys.stdin.readlines():
for x in a:
    print x,
print

s = ""
for i in range(lev):
    s += " "
print s

for key in d:
if key in d:

for i, x in enumerate(a):

a[:-i]

for line in sys.stdin:

print " ".join(map(str, a))

print " " * lev

43

tuples

immutable lists

tuples and equality

    caveat: singleton tuple
    ==, is, is not

a += (1,2)  # new copy
a += [1,2]  # in-place

>>> (1, 'a')        
(1, 'a')
>>> (1)
1
>>> [1]
[1]
>>> (1,)
(1,)
>>> [1,]
[1]
>>> (5) + (6)
11
>>> (5,)+ (6,)
(5, 6)

>>> 1, 2 == 1, 2
(1, false, 2)
>>> (1, 2) == (1, 2)
true
>>> (1, 2) is (1, 2)
false
>>> "ab" is "ab"
true
>>> [1] is [1]  
false
>>> 1 is 1
true
>>> true is true
true

45

comparison
    between the same type:    lexicographical   
    between different types: arbitrary
    cmp(): three-way <, >, ==
    c: strcmp(s, t),   java: a.compareto(b)

>>> (1, 'ab') < (1, 'ac')
true
>>> (1, ) < (1, 'ac')
true
>>> [1] < [1, 'ac']
true
>>> 1 < true 
false
>>> true < 1
false

>>> [1] < [1, 2] < [1, 3]
true
>>> [1] == [1,] == [1.0]
true
>>> cmp ( (1, ), (1, 2) )
-1
>>> cmp ( (1, ), (1, ) )
0
>>> cmp ( (1, 2), (1, ) )
1

46

enumerate

>>> words = ['this', 'is', 'python']
>>> i = 0
>>> for word in words:
...     i += 1 
...     print i, word
... 
1 this
2 is
3 python

>>> for i, word in enumerate(words):
...     print i+1, word
... 

    how to enumerate two lists/tuples simultaneously?

47

zip and _

>>> a = [1, 2]
>>> b = ['a', 'b']

>>> zip (a,b)
[(1, 'a'), (2, 'b')]

>>> zip(a,b,a)
[(1, 'a', 1), (2, 'b', 2)]

>>> zip ([1], b)
[(1, 'a')]

>>> a = ['p', 'q']; b = [[2, 3], [5, 6]]
>>> for i, (x, [_, y]) in enumerate(zip(a, b)):
...!!
...
0 p 3
1 q 6

print i, x, y

48

zip and list comprehensions

>>> vec1 = [2, 4, 6]
>>> vec2 = [4, 3, -9]
>>> [(x, y) for x in vec1 for y in vec2]
[(2, 4), (2, 3), (2, -9), (4, 4), (4, 3), (4, -9), (6, 4), 
(6, 3), (6, -9)]

>>> [(vec1[i], vec2[i]) for i in range(len(vec1))]
[(2, 4), (4, 3), (6, -9)]

>>> sum([vec1[i]*vec2[i] for i in range(len(vec1))]
-34

>>> sum([x*y for (x,y) in zip(vec1, vec2)])
-34

>>> sum([v[0]*v[1] for v in zip(vec1, vec2)])
-34

49

how to implement zip?

binary zip: easy

>>> def myzip(a,b):
...     if a == [] or b == []:
...             return []
...     return [(a[0], b[0])] + myzip(a[1:], b[1:])
... 

>>> myzip([1,2], ['a','b'])
[(1, 'a'), (2, 'b')]
>>> myzip([1,2], ['b'])
[(1, 'b')]

how to deal with arbitrarily many arguments?

50

dictionaries

(heterogeneous) hash maps

constructing dicts

    key : value pairs

>>> d = {'a': 1, 'b': 2, 'c': 1}
>>> d['b']
2
>>> d['b'] = 3
>>> d['b']
3
>>> d['e']
keyerror!
>>> d.has_key('a')
true
>>> 'a' in d
true
>>> d.keys()
['a', 'c', 'b']
>>> d.values()
[1, 1, 3]

52

other constructions
    zipping, list comprehension, keyword argument
    dump to a list of tuples

>>> d = {'a': 1, 'b': 2, 'c': 1}
>>> keys = ['b', 'c', 'a']
>>> values = [2,  1,   1 ]
>>> e = dict (zip (keys, values))
>>> d == e
true
>>> d.items()
[('a', 1), ('c', 1), ('b', 2)]

>>> f = dict( [(x, x**2) for x in values] )
>>> f
{1: 1, 2: 4}

>>> g = dict(a=1, b=2, c=1)
>>> g == d
true

53

default values

    counting frequencies

>>> def incr(d, key):
...     if key not in d:
...             d[key] = 1
...     else:
...             d[key] += 1
... 

>>> def incr(d, key):
...!!
... 

d[key] = d.get(key, 0) + 1

>>> incr(d, 'z')
>>> d
{'a': 1, 'c': 1, 'b': 2, 'z': 1}
>>> incr(d, 'b')
>>> d
{'a': 1, 'c': 1, 'b': 3, 'z': 1}

54

defaultdict
    best feature introduced in python 2.5

>>> from collections import defaultdict
>>> d = defaultdict(int)
>>> d['a']
0
>>> d['b'] += 1
>>> d
{'a': 0, 'b': 1}

>>> d = defaultdict(list)
>>> d['b'] += [1]
>>> d
{'b': [1]}

>>> d = defaultdict(lambda : <expr>)

55

mapping type

defaultdict behaves like setdefault, not get (following stl)

http://docs.python.org/lib/typesmapping.html

56

sets

identity maps, unordered collection

sets

    [] for lists, () for tuples, {} for dicts, and {} for sets (2.7)
    construction from lists, tuples, dicts (keys), and strs
    in, not in, add, remove

>>> a = {1, 2}
a
>> set([1, 2])
>>> a = set((1,2))
>>> a
set([1, 2])
>>> b = set([1,2])
>>> a == b
true
>>> c = set({1:'a', 2:'b'})
>>> c
set([1, 2])

>>> type({})
   dict     # not set!

>>> a = set()
>>> 1 in a
false
>>> a.add(1)
>>> a.add('b')
>>> a
set([1, 'b'])
>>> a.remove(1)
>>> a
set(['b'])

58

set operations

    union, intersection, difference, is_subset, etc..
>>> a = set('abracadabra')
>>> b = set('alacazam')
>>> a                                  
set(['a', 'r', 'b', 'c', 'd'])
>>> a - b                              
set(['r', 'd', 'b'])
>>> a | b                              
set(['a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'])
>>> a & b                              
set(['a', 'c'])
>>> a ^ b                              
set(['r', 'd', 'b', 'm', 'z', 'l'])
>>> a |= b
>>> a
set(['a', 'c', 'b', 'd', 'm', 'l', 'r', 'z'])

demo

59

set and frozenset type

60

basic import and i/o

import and i/o

    similar to import in java
    file i/o much easier than java
import sys
for line in sys.stdin:
!print line.split()

demo

or

from sys import *
for line in stdin:
!print line.split()

import system;

java

import system.*;

>>> f = open("my.in", "rt")
>>> g = open("my.out", "wt")
>>> for line in f:
...     print >> g, line,
... g.close()

to read a line:
line = f.readline()
to read all the lines:
lines = f.readlines()

   le copy

note this comma!

62

import and __main__

    multiple source    les (modules)
    c:  #include    my.h   
    java: import my
    demo

foo.py

demo

def pp(a):
!print        .join(a)

if __name__ ==    __main__   :
!from sys import *
!a = stdin.readline()
!pp (a.split())

    handy for debugging

>>> import foo
>>> pp([1,2,3])
1 2 3

interactive

63

quiz

    palindromes
    read in a string from standard input, and print true if it is a 

abcba

palindrome, print false if otherwise

def palindrome(s):

  if _____________:

len(s) <= 1
    return true

    return _____________ and palindrome(________)

s[0] == s[-1]

s[1:-1]

if __name__ == '__main__':

    ___________
import sys
    s = sys.stdin.readline().________
    print palindrome(s)

strip()

64

functional programming

map and    lter

    intuition: function as data
    we have already seen functional programming a lot!
    list comprehension, custom comparison function
map(f, a)
filter(p, a)

[ f(x) for x in a ]
[ x for x in a if p(x) ]

map(f, filter(p, a))

[ f(x) for x in a if p(x) ]

>>> map(int, ['1','2'])
[1, 2]
>>> " ".join(map(str, [1,2]))
1 2

>>> def is_even(x):
...     return x % 2 == 0
... 
>>> filter(is_even, [-1, 0])
[0]

demo

66

lambda

    map/   lter in one line for custom functions?
       anonymous inline function   
    borrowed from lisp, scheme, ml, ocaml

>>> f = lambda x: x*2 
>>> f(1)
2
>>> map (lambda x: x**2, [1, 2])
[1, 4]
>>> filter (lambda x: x > 0, [-1, 1])
[1]
>>> g = lambda x,y : x+y
>>> g(5,6)
11
>>> map (lambda (x,y): x+y, [(1,2), (3,4)])
[3, 7]

demo

67

more on lambda

>>> f = lambda : "good!"
>>> f
<function <lambda> at 0x381730>
>>> f()
'good!'

lazy evaluation

>>> a = [5, 1, 2, 6, 4]
>>> a.sort(lambda x,y : y - x)
>>> a
[6, 5, 4, 2, 1]

custom comparison

>>> a = defaultdict(lambda : 5)
>>> a[1]
5
>>> a = defaultdict(lambda : defaultdict(int))
>>> a[1][   b   ]
demo
0

68

basic sorting

sort() is in-place,
but sorted() returns new copy

>>> a = [5, 2, 3, 1, 4]
>>> sorted(a)
[1, 2, 3, 4, 5]
>>> a
[5, 2, 3, 1, 4]

>>> a = [5, 2, 3, 1, 4]
>>> a.sort()
>>> print a
[1, 2, 3, 4, 5]

>>> a = [5, 2, 3, 1, 4]
>>> a.sort(reverse=true)
>>> a
[5, 4, 3, 2, 1]

>>> a = [5, 2, 3, 1, 4]
>>> a.sort()
>>> a.reverse()
>>> a
[5, 4, 3, 2, 1]

69

built-in and custom cmp

>>> a = [5, 2, 3, 1, 4]
>>> def mycmp(a, b):
        return b-a

>>> sorted(a, mycmp)
[5, 4, 3, 2, 1]
>>> sorted(a, lambda x,y: y-x)
[5, 4, 3, 2, 1]

>>> a = zip([1,2,3], [6,4,5])
>>> a.sort(lambda (_,y1), (__, y2): y1-y2)
>>> a
[(2, 4), (3, 5), (1, 6)]
>>> a.sort(lambda (_,y1), (_, y2): y1-y2)
syntaxerror: duplicate argument '_' in function definition

demo

70

sorting by keys or key mappings

>>> a = "this is a test string from andrew".split()
>>> a.sort(key=str.lower)
>>> a
['a', 'andrew', 'from', 'is', 'string', 'test', 'this']

>>> import operator 
>>> l = [('c', 2), ('d', 1), ('a', 4), ('b', 3), ('b', 1)]

>>> l.sort(key=operator.itemgetter(1))
>>> l
[('d', 1), ('b', 1), ('c', 2), ('b', 3), ('a', 4)]

>>> sorted(l, key=operator.itemgetter(1, 0))
[('b', 1), ('d', 1), ('c', 2), ('b', 3), ('a', 4)]

demo

>>> operator.itemgetter(1,0)((1, 2, 3))
(2, 1)

sort by two keys

71

lambda for key mappings

    you can use lambda for both custom cmp and key map

>>> a = "this is a test string from andrew".split()
>>> a.sort(lambda x, y: cmp(x.lower(), y.lower()))
>>> a
['a', 'andrew', 'from', 'is', 'string', 'test', 'this']

>>> a.sort(key=lambda x: x.lower())
 
>>> l = [('c', 2), ('d', 1), ('a', 4), ('b', 3), ('b', 1)]

>>> l.sort(key=lambda (_, y): y)
>>> l
[('d', 1), ('b', 1), ('c', 2), ('b', 3), ('a', 4)]

>>> sorted(l, key=lambda (x, y): (y, x))
[('b', 1), ('d', 1), ('c', 2), ('b', 3), ('a', 4)]

72

decorate-sort-undecorate

>>> words = "this is a test string from andrew.".split()

>>> deco = [ (word.lower(), i, word) for i, word in \ 
... enumerate(words) ]

>>> deco.sort()

>>> new_words = [ word for _, _, word in deco ]

>>> print new_words
['a', 'andrew.', 'from', 'is', 'string', 'test', 'this']

    most general
    faster than custom cmp (or custom key map) -- why?
    stable sort (by supplying index)

demo

73

sorting: summary

    3 ways: key mapping, custom cmp function, decoration
    decoration is most general, key mapping least general
    decoration is faster than key mapping & cmp function
    decoration only needs o(n) key mappings
    other two need o(nlogn) key mappings -- or o(n2) for insertsort
    real difference when key mapping is slow
    decoration is stable

74

memoized recursion v1

    fibonacci revisited

def fib(n):
   a, b = 1, 1
   for _ in range(n-1):
      a, b = b, a+b
   return b

def fib(n):
! if n <= 1:
! ! return n
! else:
! ! return fib (n-1) + fib (n-2)

fibs = {0:1, 1:1}
def fib(n):
! if n in fibs:
! ! return fibs[n]
! fibs[n] = fib(n-1) + fib(n-2)
! return fibs[n]

can we get rid of the global variable?

75

memoized recursion v2

    fibonacci revisited

def fib(n):
   a, b = 1, 1
   for _ in range(n-1):
      a, b = b, a+b
   return b

def fib(n):
! if n <= 1:
! ! return n
! else:
! ! return fib (n-1) + fib (n-2)

def fib(n, fibs={0:1, 1:1}):
! if n not in fibs:

!fibs[n] = fib(n-1, 

! return fibs[n]

fibs) + fib(n-2, fibs)

76

memoized recursion v3

    fibonacci revisited

def fib(n):
   a, b = 1, 1
   for _ in range(n-1):
      a, b = b, a+b
   return b

draw the tree!

>>> fib(3)
1 {1: 1}
0 {0: 1, 1: 1}
2 {0: 1, 1: 1, 2: 2}
3 {0: 1, 1: 1, 2: 2, 3: 3}
3
>>> fib(2)
2
>>> print fibs
error!

def fib(n, fibs={0:1, 1:1}):
! if n not in fibs:

!fibs[n] = 

fib(n-1) + fib(n-2)

#! ! print n, fibs
! return fibs[n]

the fibs variable has a weird closure!! feature or bug?

most people think it   s a bug, but python inventor argues it   s a feature.

77

memoized recursion v4

    fibonacci revisited

def fib(n):
   a, b = 1, 1
   for _ in range(n-1):
      a, b = b, a+b
   return b

>>> fib(4)
{0: 1, 1: 1, 2: 2}
{0: 1, 1: 1, 2: 2, 3: 3}
{0: 1, 1: 1, 2: 2, 3: 3, 4: 5}
5
>>> fib(3)
{0: 1, 1: 1, 2: 2}
{0: 1, 1: 1, 2: 2, 3: 3}
3

def fib(n, fibs=none):
!if fibs is none:
! !fibs = {0:1, 1:1}
! if n not in fibs:

#! ! print n, fibs
! return fibs[n]

!fibs[n] = 

fib(n-1, fibs) + fib(n-2, fibs)

this is so far the cleanest way to avoid this bug.

78

mutable types are not hashable

    mutables: list, dict, set
    immutables: tuple, string, int,    oat, frozenset, ...
    only recursively immutable objects are hashable
    your own class objects are hashable (but be careful...)
>>> {{1}: 2}
typeerror: unhashable type: 'set'

>>> {{1:2}: 2}
typeerror: unhashable type: 'dict'

>>> {frozenset([1]): 2}
{frozenset([1]): 2}

>>> {frozenset([1, [2]]): 2}
typeerror: unhashable type: 'list'

79

implementation / speed

    lists, tuples, and strings
    random access: o(1)
    insertion/deletion/in: o(n)
    dict and set
    in/random access: almost o(1)
    insertion/deletion: almost o(1)
    but no linear ordering!
    try %timeit in ipython!

$ ipython

in [22]: b = set(range(100))

in [23]: %timeit 78 in b
10000000 loops, best of 3: 58 ns per loop

in [24]: %timeit 8 in b
10000000 loops, best of 3: 58.2 ns per loop

in [25]: c = range(100)

in [26]: %timeit 78 in c
1000000 loops, best of 3: 1.45 us per loop

in [28]: %timeit 0 in c
10000000 loops, best of 3: 52 ns per loop

80

pythonic styles

    do not write ...                 when you can write ...

for key in d.keys():
if d.has_key(key):
i = 0 
for x in a:
    ...
    i += 1
a[0:len(a) - i]
for line in \
    sys.stdin.readlines():
for x in a:
    print x,
print

s = ""
for i in range(lev):
    s += " "
print s

for key in d:
if key in d:

for i, x in enumerate(a):

a[:-i]

for line in sys.stdin:

print " ".join(map(str, a))

print " " * lev

81

