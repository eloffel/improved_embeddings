cmu scs

large graph mining:

power tools and a practitioner   s guide

task 8: hadoop and tera/peta byte graphs

faloutsos, miller, tsourakakis

cmu

kdd '09

faloutsos, miller, tsourakakis

p8-1

cmu scs

outline

introduction     motivation
   
    task 1: node importance 
    task 2: community detection
    task 3: recommendations
    task 4: connection sub-graphs
    task 5: mining graphs over time
    task 6: virus/influence propagation
    task 7: spectral id207
    task 8: tera/peta graph mining: hadoop
    observations     patterns of real graphs
    conclusions

kdd '09

faloutsos, miller, tsourakakis

p8-2

cmu scs

scalability

    how about if graph/tensor does not fit in 

core?

    how about handling huge graphs?

kdd '09

faloutsos, miller, tsourakakis

p8-3

cmu scs

scalability

    how about if graph/tensor does not fit in 

core?

    [   met   : kolda, sun, icmd   08, best paper 

award]

    how about handling huge graphs?

kdd '09

faloutsos, miller, tsourakakis

p8-4

cmu scs

scalability

    google: > 450,000 processors in clusters of 
~2000 processors each [barroso, dean, h  lzle,
   web search for a planet: the google cluster 
architecture    ieee micro 2003]

    yahoo: 5pb of data [fayyad, kdd   07]

    problem: machine failures, on a daily basis

    how to parallelize data mining tasks, then?

kdd '09

faloutsos, miller, tsourakakis

p8-5

cmu scs

scalability

    google: > 450,000 processors in clusters of ~2000 
processors each [barroso, dean, h  lzle,    web search for 
a planet: the google cluster architecture    ieee micro 
2003]

    yahoo: 5pb of data [fayyad, kdd   07]

    problem: machine failures, on a daily basis

    how to parallelize data mining tasks, then?

    a: map/reduce     hadoop (open-source clone)  

http://hadoop.apache.org/

kdd '09

faloutsos, miller, tsourakakis

p8-6

cmu scs

2    intro to hadoop

    master-slave architecture; n-way replication 

(default n=3)

       group by    of sql (in parallel, fault-tolerant way)
    e.g, find histogram of word frequency

    compute local histograms
    then merge into global histogram

select course-id, count(*)
from enrollment
group by course-id

kdd '09

faloutsos, miller, tsourakakis

p8-7

cmu scs

2    intro to hadoop

    master-slave architecture; n-way replication 

(default n=3)

       group by    of sql (in parallel, fault-tolerant way)
    e.g, find histogram of word frequency

    compute local histograms
    then merge into global histogram

select course-id, count(*)
from enrollment
group by course-id

reduce

map

kdd '09

faloutsos, miller, tsourakakis

p8-8

cmu scs

input data
(on hdfs)

read

split 0
split 1
split 2

user

program

fork

fork

fork

master

assign
map

assign
reduce

local
write

mapper

mapper

mapper

reducer

write

reducer

remote read,
sort

output

file 0

output

file 1

by default: 3-way replication;
late/dead machines: ignored, transparently (!)

kdd '09

faloutsos, miller, tsourakakis

p8-9

cmu scs

d.i.s.c. 

       data intensive scientific computing    [r. 

bryant, cmu]

       big data   

    www.cs.cmu.edu/~bryant/pubdir/cmu-cs-07-

128.pdf

kdd '09

faloutsos, miller, tsourakakis

p8-10

cmu scs

analysis of a large graph

~200gb (yahoo crawl) - degree distribution: 

    in 12 minutes with 50 machines

    many link spams at out-degree 1200

kdd '09

faloutsos, miller, tsourakakis

p8-11

cmu scs

conclusions

    hadoop: promising architecture for 

tera/peta scale graph mining

resources:

    http://hadoop.apache.org/core/

    http://hadoop.apache.org/pig/

higher-level language for data processing

kdd '09

faloutsos, miller, tsourakakis

p8-12

cmu scs

references

    jeffrey dean and sanjay ghemawat, mapreduce: 

simplified data processing on large clusters, osdi'04 

    christopher olston, benjamin reed, utkarsh srivastava, ravi

kumar, andrew tomkins: pig latin: a not-so-foreign language 

for data processing. sigmod 2008: 1099-1110

kdd '09

faloutsos, miller, tsourakakis

p8-13

