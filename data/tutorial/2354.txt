the nltk    

framenet lexicon api

nathan schneider, university of edinburgh 

may 31, 2015     framenet tutorial at naacl-hlt

1

rationale

    do you ever lie awake at night with questions like: 
    what lemmas are the most ambiguous (have lus 

in the most frames)? 

    what frame elements include    location    in their 

name? 

    what pairs of frames are linked by the 

causative_of relation?

2

rationale

    do you ever want to access the framenet lexicon 

programmatically from python?

3

from   nltk.corpus   import   framenet   as   fn

    nltk (bird, klein, & loper 2009; www.nltk.org) is a 
python toolkit for accessing linguistic datasets and 
running nlp tools 
    open-source, community-driven, widely used 

    nltk now contains an api for the framenet lexicon 

    contributed by chuck wooters & nathan 

schneider in sep. 2013

4

setup

1. install nltk. 

    see http://www.nltk.org/install.html 
    mac/unix, if you have pip:    
sudo   pip   install   -     u   nltk 

2. invoke interactive python on the command line and type:   

import   nltk   
nltk.download("framenet")   
this will download framenet 1.5 to your nltk home 
directory (default: nltk_data in your home directory). 

3. in your program (or at the python prompt), type:   

from   nltk.corpus   import   framenet   as   fn

5

api entry points

    frames([nameregex])   
    frame(exactname)   
    frames_by_lemma(lemmaregex)   

    lus([nameregex])   

    fes([nameregex])   

    semtypes()   
    propagate_semtypes()   

    frame_relations([frame,   [frame2,]]   [type])   
    frame_relation_types()   
    fe_relations()

6

example 1:    noise    frames

>>>   fn.frames('noise')   

[<frame   id=801   name=cause_to_make_noise>,   <frame   id=60   
name=motion_noise>,      ]   

>>>   [f.name   for   f   in   fn.frames('noise')]   

['cause_to_make_noise',   'motion_noise',   'make_noise',   
   communication_noise']   

>>>   [f.name   for   f   in   fn.frames('(?i)noise')]   

['cause_to_make_noise',   'noise_makers',   
'motion_noise',   'make_noise',   'communication_noise']

7

example 2: noise_makers

>>>   fn.frame('noise_makers')   

frame   (1017):   noise_makers   

[definition]   
      the   noise_maker   is   an   artifact   used   to   produce   sound,   especially   
      for   musical   effect.      'the   church   bells   rang'   'the   car   alarm   went   
      off   again'   'i   have   never   played   an   acoustic      guitar.'   'each   
      artist   personally   owns   a   steinway   and   has   chosen   to   perform   on   
      the   steinway   piano   professionally'   

[semtypes]   0   semantic   types   

[framerelations]   1   frame   relations   
      <parent=artifact   -     -        inheritance   -     >   child=noise_makers>

   

8

example 2: noise_makers

attributes of the frame: for a 

>>>   fn.frame('noise_makers')   

frame   (1017):   noise_makers   

frame f, access as 
f.definition, etc.
[definition]   
      the   noise_maker   is   an   artifact   used   to   produce   sound,   especially   
      for   musical   effect.      'the   church   bells   rang'   'the   car   alarm   went   
      off   again'   'i   have   never   played   an   acoustic      guitar.'   'each   
      artist   personally   owns   a   steinway   and   has   chosen   to   perform   on   
      the   steinway   piano   professionally'   

[semtypes]   0   semantic   types   

[framerelations]   1   frame   relations   
      <parent=artifact   -     -        inheritance   -     >   child=noise_makers>

   

9

example 2: noise_makers

      

[lexunit]   10   lexical   units   
      alarm.n   (11243),   bell.n   (10211),   cello.n   (10217),   drum.n   (10216),   
      guitar.n   (10210),   piano.n   (10213),   rattle.n   (10214),   saxophone.n   
      (10218),   siren.n   (10212),   xylophone.n   (10215)   

[fe]   8   frame   elements   
                                    core:   noise_maker   (6043)   
                  peripheral:   creator   (6045),   ground   (6050),   material   (6049),   
name   (6047),   time_of_creation   (6046),   type   (6048),   use   (6044)   

[fecoresets]   0   frame   element   core   sets

10

example 2: noise_makers

      

database ids for direct 
lookup: fn.lu(10216), etc.

[lexunit]   10   lexical   units   
      alarm.n   (11243),   bell.n   (10211),   cello.n   (10217),   drum.n   (10216),   
      guitar.n   (10210),   piano.n   (10213),   rattle.n   (10214),   saxophone.n   
      (10218),   siren.n   (10212),   xylophone.n   (10215)   

[fe]   8   frame   elements   
                                    core:   noise_maker   (6043)   
                  peripheral:   creator   (6045),   ground   (6050),   material   (6049),   
name   (6047),   time_of_creation   (6046),   type   (6048),   use   (6044)   

[fecoresets]   0   frame   element   core   sets

11

example 2: noise_makers

      

f.lexunit and f.fe are 

actually dicts

[lexunit]   10   lexical   units   
      alarm.n   (11243),   bell.n   (10211),   cello.n   (10217),   drum.n   (10216),   
      guitar.n   (10210),   piano.n   (10213),   rattle.n   (10214),   saxophone.n   
      (10218),   siren.n   (10212),   xylophone.n   (10215)   

[fe]   8   frame   elements   
                                    core:   noise_maker   (6043)   
                  peripheral:   creator   (6045),   ground   (6050),   material   (6049),   
name   (6047),   time_of_creation   (6046),   type   (6048),   use   (6044)   

[fecoresets]   0   frame   element   core   sets

12

example 2: noise_makers

>>>   f   =   fn.frame('noise_makers')   

>>>   f.fe   
{'creator':   <fe   id=6045   name=creator>,   'ground':   <fe   id=6050   
name=ground>,   'material':   <fe   id=6049   name=material>,   'name':   <fe   
id=6047   name=name>,   'noise_maker':   <fe   id=6043   name=noise_maker>,   
'time_of_creation':   <fe   id=6046   name=time_of_creation>,   'type':   
<fe   id=6048   name=type>,   'use':   <fe   id=6044   name=use>}   

>>>   f.fe['noise_maker'].definition   
u'this   fe   identifies   the   entity   or   substance   that   is   designed   to   
produce   sound.'   

>>>   f.lexunit.keys()   
['alarm.n',   'guitar.n',   'rattle.n',   'cello.n',   'drum.n',   
'saxophone.n',   'xylophone.n',   'piano.n',   'siren.n',   'bell.n']

13

about the framenet api

    pretty-print displays so the lexicon is browsable in 

interactive python. 

    data structures echo the lexicon structure. 

    each frame, fe, lu, semantic type, and frame relation is 

a structured object. 

    framenet is stored in a lot of xml    les. under the hood, 
the api loads things lazily and caches them in memory. 
    when a program    rst iterates over all frames, it will take 

a few seconds.

14

pretty{list,dict}

>>>   fn.frames('noise')   
[<frame   id=801   name=cause_to_make_noise>,   <frame   id=60   
name=motion_noise>,   ...]   
>>>   type(fn.frames('noise'))   
<class   'nltk.corpus.reader.framenet.prettylist'>   

    prettylist does 2 things: limits the number of elements 

shown, and suppresses printing of their full details 
    otherwise, it is just a list   

    similarly, prettydict suppresses printing of its values    

details

15

ex 3:    location    fes

>>>   fn.fes('location')   

[<fe   id=82   name=location>,   <fe   id=4532   
name=location_of_appearance>,   ...]   

>>>   {fe.name   for   fe   in   fn.fes("location")}   

set(['location_of_tester',   'location_of_perceiver',   
'orientational_location',   'location',   'normal_location',   
'relative_location',   'location_of_source',   'body_location',   
'host_location',   'location_of_confinement',   
'location_of_representation',   'location_of_participant',   
'location_of_sound_source',   'constant_location',   
'holding_location',   'location_of_communicator',   
'location_of_expressor',   'useful_location',   
'location_of_inspector',   'connected_locations',   
'fixed_location',   'location_of_protagonist',   
'holding_location',   'target_location',   'location_of_event',   
'undesirable_location',   'location_of_appearance'])

16

ex 3:    location    fes

>>>   for   fe   in   fn.fes("location"):   
...         print(fe.frame.name+'.'+fe.name)   
...   
posture.location   
coming_up_with.location_of_appearance   
perception_active.location_of_perceiver   
appearance.location_of_perceiver   
make_noise.location_of_source   
perception_experience.location_of_perceiver   
adorning.location   
containers.relative_location   
dimension.location   
residence.location   
observable_body_parts.orientational_location   
locale_by_ownership.relative_location   
hair_configuration.location

17   

ex 4: frame relations

>>>   fn.frame_relations(type='causative_of')   

[<causative=apply_heat   -     -        causative_of   -     >   inchoative/
state=absorb_heat>,   <causative=attaching   -     -        causative_of   -     >   
inchoative/state=inchoative_attaching>,   ...]   

>>>   fn.frame_relations(frame='make_noise',   type='causative_of')   

[<causative=cause_to_make_noise   -     -        causative_of   -     >   inchoative/
state=make_noise>]   

>>>   fn.frame_relations(frame='cause_to_make_noise',   
frame2='transitive_action')   

[<parent=transitive_action   -     -        inheritance   -     >   
child=cause_to_make_noise>]

18

ex 5: -ish adjective lus

>>>   for   lu   in   fn.lus('ish.a$'):   
...         print(lu._short_repr())   
...   
<lu   id=14144   name=feverish.a>   
<lu   id=7238   name=peckish.a>   
<lu   id=12391   name=finnish.a>   
<lu   id=397   name=foolish.a>   
<lu   id=14898   name=turkish.a>   
<lu   id=9013   name=lavish.a>   
<lu   id=6590   name=boorish.a>   
<lu   id=10074   name=youngish.a>   
<lu   id=10075   name=oldish.a>   
<lu   id=6558   name=churlish.a>   
<lu   id=13887   name=irish.a>
19

ex 6: ambiguous lemmas

>>>   all_lus   =   fn.lus()   
>>>   all_lus[0].name   

'cause.v'   

>>>   from   collections   import   counter   
>>>   c   =   counter([lu.name   for   lu   in   all_lus])   

>>>   c.most_common(10)   

[('in.prep',   10),   ('rise.v',   9),   ('make.v',   9),   ('swing.v',   9),   ('cut.v',   8),   
('cool.a',   8),   ('tie.v',   8),   ('take.v',   8),   ('get.v',   8),   ('call.v',   8)]   

>>>   '   '.join(f.name   for   f   in   fn.frames_by_lemma('call'))   

'request   memory   being_named   contacting   cause_to_start   body_mark   domain   
deserving   claim_ownership   evoking   temporal_pattern   remembering_experience   
labeling   referring_by_name   simple_naming   visiting'

20

ex 7: frames with most fes

>>>   c   =   counter({f.name:   len(f.fe)   for   f   in   fn.frames()})   

>>>   c.most_common(10)   

[('traversing',   32),   ('quitting_a_place',   26),   ('setting_out',   26),   
('cause_harm',   25),   ('intentional_traversing',   25),   
('cause_bodily_experience',   25),   ('travel',   25),   ('invading',   25),   
('operate_vehicle',   24),   ('departing',   24)]   

>>>   c   =   counter(fe.frame.name   for   fe   in   fn.fes()   if   fe.coretype=='core')   

>>>   c.most_common(10)   

[('education_teaching',   11),   ('motion_scenario',   10),   
('performers_and_roles',   10),   ('rite',   9),   ('cause_motion',   9),   
('behind_the_scenes',   9),   ('change_position_on_a_scale',   8),   
('traversing',   8),   ('cotheme',   8),   ('passing',   8)]

21

conclusion

    nltk provides a nice api for the framenet lexicon 

    setup is easy 
    great for interactive browsing 
    also great for using within programs 

 www.nltk.org

    now you can sleep at night! 

    no nice api for the annotations   yet!

22

coming attractions

    api for annotations is in the works! will support fn 1.6. 
    lexicographic exemplar sentences stored in lu object: 

lu.exemplars (all), lu.subcorpus (organized by subcorpus) 

    full-text sentences stored in full-text document object: 

doc.sentence; individual frame annotations stored in 
sentence.annotationset 

    new entry points: sents(), exemplars([lunameregex]), 

ft_sents([docnameregex]), 
annotations([lunameregex]), docs([docnameregex])

23

preview: exemplar sentence

>>>   fn.exemplars('revenge')[6]   

exemplar   sentence   (929673):   

[sentno]   0   
[apos]   59057935   
[lu]   (6066)   revenge.v   in   revenge   
[annotationset]   2   annotation   sets   
[pos]   9   tags   
[pos_tagset]   bnc   
[gf]   1   relations   
[pt]   1   phrases   

[text]   +   [target]   +   [fe]   +   [fe2]   

`   this   poor   murdered   girl   must   be   revenged   .   
      -     -     -     -     -     -     -     -     -     -     -     -     -     -     -     -     -     -     -     -     -     -     -                                ********   
      injured_party                                                                                    [avenger:cni,   
                                    -     -     -     -     -     -     -     -        
                                    injury   

offender:ini,   punishment:ini]

24

preview: exemplar sentence

>>>   fn.exemplars('revenge')[6].fe   
#   first   fe   layer   (machine-     readable)   

([(2,   25,   'injured_party')],   {'offender':   'ini',   'avenger':   'cni',   
'punishment':   'ini'})   

>>>   fn.exemplars('revenge')[6].pos   

[(0,   1,   'puq'),   (2,   6,   'dt0'),   (7,   11,   'aj0'),   (12,   20,   'aj0'),   (21,   25,   
'nn1'),   (26,   30,   'vm0'),   (31,   33,   'vbi'),   (34,   42,   'vvn'),   (43,   44,   'pun')]   

>>>   fn.exemplars('revenge')[6].annotationset[0]   
#   annotationset[0]   for   a   human-     readable   display   of   pos   

pos   annotation   set   (1313221)   bnc   in   sentence   929673:   

`         this   poor   murdered   girl   must   be      revenged   .   
-              -     -     -     -        -     -     -     -        -     -     -     -     -     -     -     -        -     -     -     -        -     -     -     -        -     -           -     -     -     -     -     -     -     -        -        
puq   dt0      aj0      aj0                  nn1      vm0      vbi   vvn                  pun

25

preview: full-text sentence

>>>   fn.ft_sents()[3]   

full-     text   sentence   (4097611)   in   northkorea_nuclearcapabilities:   

[pos]   14   tags   

[pos_tagset]   penn   

[text]   +   [annotationset]   

therefore   ,   obtaining   reliable   open   source   information   on   such   
                                    -     -     -     -     -     -     -     -     -        -     -     -     -     -     -     -     -        -     -     -     -                             -     -     -     -     -     -     -     -     -     -     -        
                                    [1]                     [6]                  [5]                           [2]   

next slide

programs   is   very   challenging   .   
                                                   -     -     -     -     -     -     -     -     -     -     -        
                                                   [4]

26

preview: full-text sentence

>>>   fn.ft_sents()[3].annotationset[2]   

annotation   set   (6528785):   

[lu]   (12537)   information.n   in   information   
[gf]   2   relations   
[pt]   2   phrases   

[text]   +   [target]   +   [fe]   

therefore   ,   obtaining   reliable   open   source   information   on   such   
                                                                                             -     -     -     -     -     -     -     -     -     -     -        ===========   -     -     -     -     -     -     -     -        
                                                                                             means_of_ga   information   topic   

programs   is   very   challenging   .   
-     -     -     -     -     -     -     -        

   (means_of_ga=means_of_gathering)

27

target/denoted fe

