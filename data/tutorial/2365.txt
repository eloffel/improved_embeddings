[1]caffe

   deep learning framework by [2]bair

   created by
   [3]yangqing jia
   lead developer
   [4]evan shelhamer
     * [5]view on github

caffe

   caffe is a deep learning framework made with expression, speed, and
   modularity in mind. it is developed by berkeley ai research ([6]bair)
   and by community contributors. [7]yangqing jia created the project
   during his phd at uc berkeley. caffe is released under the [8]bsd
   2-clause license.

   check out our web image classification [9]demo!

why caffe?

   expressive architecture encourages application and innovation. models
   and optimization are defined by configuration without hard-coding.
   switch between cpu and gpu by setting a single flag to train on a gpu
   machine then deploy to commodity clusters or mobile devices.

   extensible code fosters active development. in caffe   s first year, it
   has been forked by over 1,000 developers and had many significant
   changes contributed back. thanks to these contributors the framework
   tracks the state-of-the-art in both code and models.

   speed makes caffe perfect for research experiments and industry
   deployment. caffe can process over 60m images per day with a single
   nvidia k40 gpu*. that   s 1 ms/image for id136 and 4 ms/image for
   learning and more recent library versions and hardware are faster
   still. we believe that caffe is among the fastest convnet
   implementations available.

   community: caffe already powers academic research projects, startup
   prototypes, and even large-scale industrial applications in vision,
   speech, and multimedia. join our community of brewers on the
   [10]caffe-users group and [11]github.

   * with the ilsvrc2012-winning [12]supervision model and prefetching io.

documentation

     * [13]diy deep learning for vision with caffe and [14]caffe in a day
       tutorial presentation of the framework and a full-day crash course.
     * [15]tutorial documentation
       practical guide and framework reference.
     * [16]arxiv / acm mm    14 paper
       a 4-page report for the acm multimedia open source competition
       (arxiv:1408.5093v1).
     * [17]installation instructions
       tested on ubuntu, red hat, os x.
     * [18]model zoo
       bair suggests a standard distribution format for caffe models, and
       provides trained models.
     * [19]developing & contributing
       guidelines for development and contributing to caffe.
     * [20]api documentation
       developer documentation automagically generated from code comments.
     * [21]benchmarking
       comparison of id136 and learning for different networks and
       gpus.

notebook examples

     * [22]image classification and filter visualization
       instant recognition with a pre-trained model and a tour of the net
       interface for visualizing features and parameters layer-by-layer.
     * [23]learning lenet
       define, train, and test the classic lenet with the python
       interface.
     * [24]fine-tuning for style recognition
       fine-tune the id163-trained caffenet on new data.
     * [25]off-the-shelf sgd for classification
       use caffe as a generic sgd optimizer to train id28
       on non-image hdf5 data.
     * [26]multilabel classification with python data layer
       multilabel classification on pascal voc using a python data layer.
     * [27]editing model parameters
       how to do net surgery and manually change model parameters for
       custom use.
     * [28]r-id98 detection
       run a pretrained model as a detector in python.
     * [29]siamese network embedding
       extracting features and plotting the siamese network embedding.

command line examples

     * [30]id163 tutorial
       train and test "caffenet" on id163 data.
     * [31]lenet mnist tutorial
       train and test "lenet" on the mnist handwritten digit data.
     * [32]cifar-10 tutorial
       train and test caffe on cifar-10 data.
     * [33]fine-tuning for style recognition
       fine-tune the id163-trained caffenet on the "flickr style"
       dataset.
     * [34]feature extraction with caffe c++ code.
       extract caffenet / alexnet features using the caffe utility.
     * [35]caffenet c++ classification example
       a simple example performing image classification using the
       low-level c++ api.
     * [36]web demo
       image classification demo running as a flask web server.
     * [37]siamese network tutorial
       train and test a siamese network on mnist data.

citing caffe

   please cite caffe in your publications if it helps your research:
@article{jia2014caffe,
  author = {jia, yangqing and shelhamer, evan and donahue, jeff and karayev, ser
gey and long, jonathan and girshick, ross and guadarrama, sergio and darrell, tr
evor},
  journal = {arxiv preprint arxiv:1408.5093},
  title = {caffe: convolutional architecture for fast feature embedding},
  year = {2014}
}

   if you do publish a paper where caffe helped your research, we
   encourage you to cite the framework for tracking by [38]google scholar.

contacting us

   join the [39]caffe-users group to ask questions and discuss methods and
   models. this is where we talk about usage, installation, and
   applications.

   framework development discussions and thorough bug reports are
   collected on [40]issues.

acknowledgements

   the bair caffe developers would like to thank nvidia for gpu donation,
   a9 and amazon web services for a research grant in support of caffe
   development and reproducible research in deep learning, and bair pi
   [41]trevor darrell for guidance.

   the bair members who have contributed to caffe are (alphabetical by
   first name): [42]carl doersch, [43]eric tzeng, [44]evan shelhamer,
   [45]jeff donahue, [46]jon long, [47]philipp kr  henb  hl, [48]ronghang
   hu, [49]ross girshick, [50]sergey karayev, [51]sergio guadarrama,
   [52]takuya narihira, and [53]yangqing jia.

   the open-source community plays an important and growing role in
   caffe   s development. check out the github [54]project pulse for recent
   activity and the [55]contributors for the full list.

   we sincerely appreciate your interest and contributions! if you   d like
   to contribute, please read the [56]developing & contributing guide.

   yangqing would like to give a personal thanks to the nvidia academic
   program for providing gpus, [57]oriol vinyals for discussions along the
   journey, and bair pi [58]trevor darrell for advice.

references

   1. http://caffe.berkeleyvision.org/
   2. http://bair.berkeley.edu/
   3. http://daggerfs.com/
   4. http://imaginarynumber.net/
   5. https://github.com/bvlc/caffe
   6. http://bair.berkeley.edu/
   7. http://daggerfs.com/
   8. https://github.com/bvlc/caffe/blob/master/license
   9. http://demo.caffe.berkeleyvision.org/
  10. https://groups.google.com/forum/#!forum/caffe-users
  11. https://github.com/bvlc/caffe/
  12. http://www.image-net.org/challenges/lsvrc/2012/supervision.pdf
  13. https://docs.google.com/presentation/d/1uekxvgrvvxg9oudh_uic5g71umscnplvarswer41psu/edit#slide=id.p
  14. https://docs.google.com/presentation/d/1hxgdeq8mpkthapb-rlmyyq723iwzq9ur6gjo71yig0y/edit#slide=id.gc2fcdcce7_216_0
  15. http://caffe.berkeleyvision.org/tutorial
  16. http://arxiv.org/abs/1408.5093
  17. http://caffe.berkeleyvision.org/installation.html
  18. http://caffe.berkeleyvision.org/model_zoo.html
  19. http://caffe.berkeleyvision.org/development.html
  20. http://caffe.berkeleyvision.org/doxygen/annotated.html
  21. https://docs.google.com/spreadsheets/d/1yp4rqhpt7mkxopbpzyeufeflneldagxssbqkp5ukdgq/edit#gid=0
  22. http://nbviewer.ipython.org/github/bvlc/caffe/blob/master/examples/00-classification.ipynb
  23. http://nbviewer.ipython.org/github/bvlc/caffe/blob/master/examples/01-learning-lenet.ipynb
  24. http://nbviewer.ipython.org/github/bvlc/caffe/blob/master/examples/02-fine-tuning.ipynb
  25. http://nbviewer.ipython.org/github/bvlc/caffe/blob/master/examples/brewing-logreg.ipynb
  26. http://nbviewer.ipython.org/github/bvlc/caffe/blob/master/examples/pascal-multilabel-with-datalayer.ipynb
  27. http://nbviewer.ipython.org/github/bvlc/caffe/blob/master/examples/net_surgery.ipynb
  28. http://nbviewer.ipython.org/github/bvlc/caffe/blob/master/examples/detection.ipynb
  29. http://nbviewer.ipython.org/github/bvlc/caffe/blob/master/examples/siamese/mnist_siamese.ipynb
  30. http://caffe.berkeleyvision.org/gathered/examples/id163.html
  31. http://caffe.berkeleyvision.org/gathered/examples/mnist.html
  32. http://caffe.berkeleyvision.org/gathered/examples/cifar10.html
  33. http://caffe.berkeleyvision.org/gathered/examples/finetune_flickr_style.html
  34. http://caffe.berkeleyvision.org/gathered/examples/feature_extraction.html
  35. http://caffe.berkeleyvision.org/gathered/examples/cpp_classification.html
  36. http://caffe.berkeleyvision.org/gathered/examples/web_demo.html
  37. http://caffe.berkeleyvision.org/gathered/examples/siamese.html
  38. https://scholar.google.com/citations?view_op=view_citation&hl=en&citation_for_view=-ltrsm0aaaaj:u5hhmvd_uo8c
  39. https://groups.google.com/forum/#!forum/caffe-users
  40. https://github.com/bvlc/caffe/issues
  41. http://www.eecs.berkeley.edu/~trevor/
  42. http://www.carldoersch.com/
  43. https://github.com/erictzeng
  44. http://imaginarynumber.net/
  45. http://jeffdonahue.com/
  46. https://github.com/longjon
  47. http://www.philkr.net/
  48. http://ronghanghu.com/
  49. http://www.cs.berkeley.edu/~rbg/
  50. http://sergeykarayev.com/
  51. http://www.eecs.berkeley.edu/~sguada/
  52. https://github.com/tnarihi
  53. http://daggerfs.com/
  54. https://github.com/bvlc/caffe/pulse
  55. https://github.com/bvlc/caffe/graphs/contributors
  56. http://caffe.berkeleyvision.org/development.html
  57. http://www1.icsi.berkeley.edu/~vinyals/
  58. http://www.eecs.berkeley.edu/~trevor/
