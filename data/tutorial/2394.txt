[1]2016 naacl ws: human-computer qa [2]2016 naacl ws: human-computer qa

     * [3]overview
     * [4]accepted papers
     * [5]anti-harassment policy
     * [6]important dates
     * [7]invited speakers
     * [8]people
     * [9]schedule (marina 2)
     * shared task
     * [10]sitemap

shared task

   papers
   if you're planning on participating in the shared task, you're strongly
   encouraged to [11]submit a paper describing your system (but you're not
   required).  the paper deadline is before the competition, as we will
   have an in-person competition before naacl.
   task
   the basic overview of interactions are:
   1. get a user id and api key
   here: [12]http://qb.boydgraber.org/register
   2. client connects to the server and obtains a list of question ids
   3. for each question, client requests as many words as it wants (by
   word id) and then submits an answer
   evaluation server
   we have a server to accept your answers to a set of [13]questions.
   before starting, read the [14]documentation for the server and client
   code. next, see [15]this simple demo system for an example of how to
   receive question text from the server and submit answers. the
   documentation also contains information on how to run the server
   locally, as well as a [16]list of all api calls that can be made from
   the client.
   currently, the server is loaded with a validation set (the questions
   that we used in our matchup with ken jennings), and users are allowed
   to submit an unlimited number of answers per question. however, users
   are only permitted only a single submission per question for the test
   set. check out the [17]leaderboard to see how well you're doing on the
   validation set!
   training data / examples
   download [18]quiz bowl question data to train and validate your system.
   this data also comes with preprocessed text versions of the wikipedia
   pages associated with each answer in the training set. we encourage the
   use of external data in addition to what we have provided.
   test set
   the test set will have possible answers from any wikipedia page.
   however, many of the answers will likely be in the train set (the same
   things get asked about again and again). you should expect around 80%
   of test questions to be about answers in the train set; an example test
   set can be found [19]here. the questions will be written by quiz bowl
   writers based on the [20]standard high school distribution.
   important: the sample code provided answers all available questions in
   the 'dev' fold.  you can answer 'dev' questions as many times as you
   like.  however, 'test' questions can only be answered once.  so be very
   careful when querying the text of test questions and providing your
   answers.
   evaluation
   we will evaluate systems (and humans) in pairwise competition.  the
   system that gives a correct answer first (i.e., after requesting the
   fewest number of words) gets 10 or 15 points (15 points are available
   for early, correct buzzes).  a system that gives an incorrect answer
   first will lose 5 points.  there is no penalty for guessing at the end
   of a question.  the system with the higher overall score wins.  we
   reserve the right to combine systems for our exhibition match against a
   human team.
   problems
   if you have trouble with the code, please [21]file an issue.  for more
   general questions, please [22]join the e-mail list.
   comments
   like this website? university of colorado at boulder users can make
   there own with this [23]simple template.

   [24]sign in|[25]recent site activity|[26]report abuse|[27]print
   page|powered by [28]google sites

references

   1. https://sites.google.com/a/colorado.edu/2016-naacl-ws-human-computer-qa/
   2. https://sites.google.com/a/colorado.edu/2016-naacl-ws-human-computer-qa/
   3. https://sites.google.com/a/colorado.edu/2016-naacl-ws-human-computer-qa/home
   4. https://sites.google.com/a/colorado.edu/2016-naacl-ws-human-computer-qa/accepted-papers
   5. https://sites.google.com/a/colorado.edu/2016-naacl-ws-human-computer-qa/anti-harassment-policy
   6. https://sites.google.com/a/colorado.edu/2016-naacl-ws-human-computer-qa/important-dates
   7. https://sites.google.com/a/colorado.edu/2016-naacl-ws-human-computer-qa/invited-speakers
   8. https://sites.google.com/a/colorado.edu/2016-naacl-ws-human-computer-qa/people
   9. https://sites.google.com/a/colorado.edu/2016-naacl-ws-human-computer-qa/schedule
  10. https://sites.google.com/a/colorado.edu/2016-naacl-ws-human-computer-qa/system/app/pages/sitemap/hierarchy
  11. https://sites.google.com/a/colorado.edu/2016-naacl-ws-human-computer-qa/home
  12. http://qb.boydgraber.org/register
  13. http://qb.boydgraber.org/qb-api/v1/questions
  14. https://github.com/pinafore/qb-api
  15. https://github.com/pinafore/qb-api/blob/master/web/demo.py
  16. http://petstore.swagger.io/?url=https://raw.githubusercontent.com/pinafore/qb-api/master/swagger.json
  17. http://qb.boydgraber.org/
  18. http://cs.umd.edu/~miyyer/data/question_data.tar.gz
  19. https://github.com/pinafore/qb/blob/master/data/expo.csv
  20. https://www.naqt.com/hs/distribution.jsp
  21. https://github.com/pinafore/qb-api/issues
  22. https://groups.google.com/forum/#!forum/naacl2016-human-comp-qa
  23. https://sites.google.com/a/colorado.edu/faculty-profile-template/
  24. https://accounts.google.com/servicelogin?continue=https://sites.google.com/a/colorado.edu/2016-naacl-ws-human-computer-qa/shared-task&service=jotspot
  25. https://sites.google.com/a/colorado.edu/2016-naacl-ws-human-computer-qa/system/app/pages/recentchanges
  26. https://sites.google.com/a/colorado.edu/2016-naacl-ws-human-computer-qa/system/app/pages/reportabuse
  27. javascript:;
  28. http://sites.google.com/site
