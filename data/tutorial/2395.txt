   #[1]clips research center: latest news

   [2]skip to navigation
   [3]home
   [4]clips

search

   search this site: _______________
   search
   [5]home    

pattern

   pattern is a web mining module for the python programming language.

   it has tools for data mining (google, twitter and wikipedia api, a web
   crawler, a html dom parser), natural language processing
   (part-of-speech taggers, id165 search, id31, id138),
   machine learning (vector space model, id91, id166), network
   analysis and <canvas> visualization.

   the module is free, well-document and bundled with 50+ examples and
   350+ unit tests.
     __________________________________________________________________

download

   [6]download pattern 2.6 | [7]download (.zip, 23mb)
     * requires: python 2.5+ on windows | mac | linux
     * licensed under [8]bsd
     * latest releases: [9]2.6 | [10]2.5 | [11]2.4 | [12]2.3 | [13]2.2
       | [14]2.1 | [15]2.0
     * authors:
        tom de smedt (tom at organisms.be)
        walter daelemans

   reference: de smedt, t. & daelemans, w. (2012).
   pattern for python. journal of machine learning research, 13:
   2031   2035.

   sha256 checksum of the .zip:
   003aa285adc23b72255ca8b9f052c6a2644b245b3a9666af007e086428a950be
   [16]tweet

     __________________________________________________________________

modules

     * [17]pattern.web
     * [18]pattern.db
     * [19]pattern.en | [20]es | [21]de | [22]fr | [23]it | [24]nl
     * [25]pattern.search
     * [26]pattern.vector
     * [27]pattern.graph

   helper modules
     * [28]pattern.metrics
     * [29]canvas.js

   command-line
     * [30]command-line interface

contribute

     * [31]developer documentation
     * [32]github repository
     * [33]google group

   paypal - the safer, easier way to pay online!

     __________________________________________________________________

installation

   pattern is written for python 2.5+ (no support for python 3 yet). the
   module has no external dependencies, except lsa in the pattern.vector
   module, which requires [34]numpy (installed by default on mac os x).

   to install pattern so that the module is available in all python
   scripts, from the command line do:
> cd pattern-2.6
> python setup.py install

   if you have pip, you can automatically download and install from the
   pypi repository:
> pip install pattern

   if none of the above works, you can make python aware of the module in
   three ways:
     * put the pattern subfolder in the .zip archive in the same folder as
       your script.
     * put the pattern subfolder in the standard location for modules so
       it is available to all scripts:
       c:\python27\lib\site-packages\ (windows),
       /library/python/2.7/site-packages/ (mac),   
       /usr/lib/python2.7/site-packages/ (unix).
     * add the location of the module to sys.path in your python script,
       before importing it:

>>> import sys; sys.path.append('/users/tom/desktop/pattern')
>>> from pattern.web import twitter

     __________________________________________________________________

quick overview

pattern.web

   the [35]pattern.web module is a web toolkit that contains api's
   (google, gmail, bing, twitter, facebook, wikipedia, wiktionary,
   dbpedia, flickr, ...), a robust html dom parser and a web crawler.
>>> from pattern.web import twitter, plaintext
>>>
>>> twitter = twitter(language='en')
>>> for tweet in twitter.search('"more important than"', cached=false):
>>>    print plaintext(tweet.text)

'the mobile web is more important than mobile apps.'
'start slowly, direction is more important than speed.'
'imagination is more important than knowledge. - albert einstein'
...

pattern.en

   the [36]pattern.en module is a natural language processing (nlp)
   toolkit for english. because language is ambiguous (e.g., i can     a
   can) it uses statistical approaches + id157. this means
   that it is fast, quite accurate and occasionally incorrect. it has a
   part-of-speech tagger that identifies word types (e.g., noun, verb,
   adjective), word inflection (conjugation, singularization) and a
   id138 api.
>>> from pattern.en import parse
>>>
>>> s = 'the mobile web is more important than mobile apps.'
>>> s = parse(s, relations=true, lemmata=true)
>>> print s

'the/dt/b-np/o/np-sbj-1/the mobile/jj/i-np/o/np-sbj-1/mobile' ...

   word      tag chunk role id pnp lemma
   the       dt  np    sbj  1  -   the
   mobile    jj  np^   sbj  1  -   mobile
   web       nn  np^   sbj  1  -   web
   is        vbz vp    -    1  -   be
   more      rbr adjp  -    -  -   more
   important jj  adjp^ -    -  -   important
   than      in  pp    -    -  pnp than
   mobile    jj  np    -    -  pnp mobile
   apps      nns np^   -    -  pnp app
   .         .   -     -    -  -   .

   the text has been annotated with word types, for example nouns (nn),
   verbs(vb), adjectives (jj) and determiners (dt), word types
   (e.g., sentence subject sbj) and prepositional noun phrases (pnp). to
   iterate over the parts in the tagged text we can construct a parse
   tree.
>>> from pattern.en import parsetree
>>>
>>> s = 'the mobile web is more important than mobile apps.'
>>> s = parsetree(s)
>>> for sentence in s:
>>>     for chunk in sentence.chunks:
>>>         for word in chunk.words:
>>>             print word,
>>>         print

word(u'the/dt') word(u'mobile/jj') word(u'web/nn')
word(u'is/vbz')
word(u'more/rbr') word(u'important/jj')
word(u'than/in')
word(u'mobile/jj') word(u'apps/nns')

   parsers for spanish, french, italian, german and dutch are also
   available:
   [37]pattern.es | [38]pattern.fr | [39]pattern.it
   | [40]pattern.de | [41]pattern.nl

pattern.search

   the [42]pattern.search module contains a search algorithm to retrieve
   sequences of words (called id165s) from tagged text.
>>> from pattern.en import parsetree
>>> from pattern.search import search
>>>
>>> s = 'the mobile web is more important than mobile apps.'
>>> s = parsetree(s, relations=true, lemmata=true)
>>>
>>> for match in search('np be rb?+ important than np', s):
>>>     print match.constituents()[-1], '=>', \
>>>           match.constituents()[0]

chunk('mobile apps/np') => chunk('the mobile web/np-sbj-1')

   the search pattern np be rb?+ important than np means any noun phrase
   (np) followed by the verb to be, followed by zero or more adverbs (rb,
   e.g., much, more), followed by the words important than, followed by
   any noun phrase. it will also match "the mobile web will be much less
   important than mobile apps" and other grammatical variations.

pattern.vector

   the [43]pattern.vector module is a toolkit for machine learning, based
   on a vector space model of bag-of-words documents with weighted
   features (e.g., tf-idf) and distance metrics (e.g., cosine similarity,
   infogain). models can be used for id91 (id116, hierarchical),
   classification (naive bayes, id88, id92, id166) and latent semantic
   analysis (lsa).
>>> from pattern.web    import twitter
>>> from pattern.en     import tag
>>> from pattern.vector import knn, count
>>>
>>> twitter, knn = twitter(), knn()
>>>
>>> for i in range(1, 10):
>>>     for tweet in twitter.search('#win or #fail', start=i, count=100):
>>>         s = tweet.text.lower()
>>>         p = '#win' in s and 'win' or 'fail'
>>>         v = tag(s)
>>>         v = [word for word, pos in v if pos == 'jj'] # jj = adjective
>>>         v = count(v)
>>>         if v:
>>>             knn.train(v, type=p)
>>>
>>> print knn.classify('sweet potato burger')
>>> print knn.classify('stupid autocorrect')

'win'
'fail'

   this example trains a classifier on adjectives mined from twitter.
   first, tweets with hashtag #win or #fail are mined. for example: "$20
   tip off a sweet little old lady today #win". the word part-of-speech
   tags are parsed, keeping only adjectives. each tweet is transformed to
   a vector, a dictionary of adjective     count items, labeled win or fail.
   the classifier uses the vectors to learn which other, unknown tweets
   look more like win (e.g., sweet potato burger) or more like fail (e.g.,
   stupid autocorrect).

pattern.graph

   the [44]pattern.graph module provides a graph data structure that
   represents relations between nodes (e.g., terms, concepts). graphs can
   be exported as html <canvas> animations ([45]demo). in the example
   below, more central nodes (= more incoming traffic) are colored in
   blue.

>>> from pattern.web    import bing, plaintext
>>> from pattern.en     import parsetree
>>> from pattern.search import search
>>> from pattern.graph  import graph
>>>
>>> g = graph()
>>> for i in range(10):
>>>     for result in bing().search('"more important than"', start=i+1, count=50
):
>>>         s = r.text.lower()
>>>         s = plaintext(s)
>>>         s = parsetree(s)
>>>         p = '{np} (vp) more important than {np}'
>>>         for m in search(p, s):
>>>             x = m.group(1).string # np left
>>>             y = m.group(2).string # np right
>>>             if x not in g:
>>>                 g.add_node(x)
>>>             if y not in g:
>>>                 g.add_node(y)
>>>             g.add_edge(g[x], g[y], stroke=(0,0,0,0.75)) # r,g,b,a
>>>
>>> g = g.split()[0] # largest subgraph.
>>>
>>> for n in g.sorted()[:40]: # sort by node.weight.
>>>     n.fill = (0, 0.5, 1, 0.75 * n.weight)
>>>
>>> g.export('test', directed=true, weighted=0.6)

   some relations (= edges) could use some extra post-processing, e.g., in
   nothing is more important than life, nothing is not more important than
   life.

     __________________________________________________________________

case studies

   case studies with hands-on source code examples.


     modeling creativity with a semantic network of common sense (2013)
   this case study offers a computational model of creativity, by
   representing the mind as a semantic network of common sense, using
   [46]pattern.graph & [47]web.
   [48]read more   


     using wiktionary to build an italian part-of-speech tagger (2013)
   this case study demonstrates how a part-of-speech tagger for italian
   (see [49]pattern.it) can be built by mining wiktionary and wikipedia.
   [50]read more   


     using wikicorpus and nltk to build a spanish part-of-speech tagger
   (2012)
   this case study demonstrates how a part-of-speech tagger for spanish
   (see [51]pattern.es) can be built by using nltk and the freely
   available wikicorpus.
   [52]read more   


     belgian elections, twitter id31 (2010)
   this case study uses id31 (e.g., positive or negative
   tone) on 7,500 dutch and french tweets (see [53]pattern.web
   | [54]nl | [55]fr) in the weeks before the belgian 2010 elections.
   [56]read more   


     web mining and visualization (2010)
   this case study uses a number of different approaches to mine,
   correlate and visualize about 6,000 google news items and 70,000
   tweets.
   [57]read more   
     * [58]home
     * [59]news
     * [60]projects
     * [61]people
     * [62]demos
     * [63]resources
     * [64]publications

primary links

     * [65]home
     * [66]news
     * [67]projects
     * [68]people
     * [69]demos
     * [70]resources
     * [71]publications

   [72]facebook [73]twitter

user login

   username: * _______________
   password: * _______________
   [ ] remember me
   log in
     * [74]request new password

research groups

     * [75]computational linguistics
     * [76]id146
     * [77]language processing

software

     * [78]timbl
     * [79]mbsp
     * [80]pattern

books & publications

     * [81]clips technical report series (ctrs)
     * [82]memory-based language processing
     * [83]early computational linguistics archive

events

     * [84]clips colloquia
     * [85]atila
     * [86]clif

contact

     * [87]walter daelemans
     * [88]steven gillis
     * [89]dominiek sandra

   last updated: friday, june 22, 2018 - 16:12 |   2010 clips research
   center | powered by [90]drupal

references

   visible links
   1. http://www.clips.ua.ac.be/news/feed
   2. https://www.clips.uantwerpen.be/pages/pattern#navigation
   3. https://www.clips.uantwerpen.be/
   4. https://www.clips.uantwerpen.be/
   5. https://www.clips.uantwerpen.be/
   6. https://www.clips.uantwerpen.be/media/pattern-2.6.zip
   7. https://www.clips.uantwerpen.be/media/pattern-2.6.zip
   8. http://www.linfo.org/bsdlicense.html
   9. https://www.clips.uantwerpen.be/media/pattern-2.6.zip
  10. https://www.clips.uantwerpen.be/media/pattern-2.5.zip
  11. https://www.clips.uantwerpen.be/media/pattern-2.4.zip
  12. https://www.clips.uantwerpen.be/media/pattern-2.3.zip
  13. https://www.clips.uantwerpen.be/media/pattern-2.2.zip
  14. https://www.clips.uantwerpen.be/media/pattern-2.1.zip
  15. https://www.clips.uantwerpen.be/media/pattern-2.0.zip
  16. http://twitter.com/share
  17. https://www.clips.uantwerpen.be/pages/pattern-web
  18. https://www.clips.uantwerpen.be/pages/pattern-db
  19. https://www.clips.uantwerpen.be/pages/pattern-en
  20. https://www.clips.uantwerpen.be/pages/pattern-es
  21. https://www.clips.uantwerpen.be/pages/pattern-de
  22. https://www.clips.uantwerpen.be/pages/pattern-fr
  23. https://www.clips.uantwerpen.be/pages/pattern-it
  24. https://www.clips.uantwerpen.be/pages/pattern-nl
  25. https://www.clips.uantwerpen.be/pages/pattern-search
  26. https://www.clips.uantwerpen.be/pages/pattern-vector
  27. https://www.clips.uantwerpen.be/pages/pattern-graph
  28. https://www.clips.uantwerpen.be/pages/pattern-metrics
  29. https://www.clips.uantwerpen.be/pages/pattern-canvas
  30. https://www.clips.uantwerpen.be/pages/pattern-shell
  31. https://www.clips.uantwerpen.be/pages/pattern-dev
  32. https://github.com/clips/pattern
  33. http://groups.google.com/group/pattern-for-python
  34. http://numpy.scipy.org/
  35. https://www.clips.uantwerpen.be/pages/pattern-web
  36. https://www.clips.uantwerpen.be/pages/pattern-en
  37. https://www.clips.uantwerpen.be/pages/pattern-es
  38. https://www.clips.uantwerpen.be/pages/pattern-fr
  39. https://www.clips.uantwerpen.be/pages/pattern-it
  40. https://www.clips.uantwerpen.be/pages/pattern-de
  41. https://www.clips.uantwerpen.be/pages/pattern-nl
  42. https://www.clips.uantwerpen.be/pages/pattern-search
  43. https://www.clips.uantwerpen.be/pages/pattern-vector
  44. https://www.clips.uantwerpen.be/pages/pattern-graph
  45. https://www.clips.uantwerpen.be/media/pattern-graph
  46. https://www.clips.uantwerpen.be/pages/pattern-graph
  47. https://www.clips.uantwerpen.be/pages/pattern-web
  48. https://www.clips.uantwerpen.be/pages/modeling-creativity-with-a-semantic-network-of-common-sense
  49. https://www.clips.uantwerpen.be/pages/pattern-it
  50. https://www.clips.uantwerpen.be/pages/using-wiktionary-to-build-an-italian-part-of-speech-tagger
  51. https://www.clips.uantwerpen.be/pages/pattern-es
  52. https://www.clips.uantwerpen.be/pages/using-wikicorpus-nltk-to-build-a-spanish-part-of-speech-tagger
  53. https://www.clips.uantwerpen.be/pages/pattern-web
  54. https://www.clips.uantwerpen.be/pages/pattern-nl
  55. https://www.clips.uantwerpen.be/pages/pattern-fr
  56. https://www.clips.uantwerpen.be/pages/pattern-examples-elections
  57. https://www.clips.uantwerpen.be/pages/pattern-examples-100days
  58. https://www.clips.uantwerpen.be/
  59. https://www.uantwerpen.be/en/rg/clips/news-and-events/
  60. https://www.uantwerpen.be/en/rg/clips/projects-and-publica/projects/
  61. https://www.uantwerpen.be/en/rg/clips/research-mission-and-members/members/
  62. https://www.uantwerpen.be/en/rg/clips/projects-and-publica/demos/
  63. https://www.clips.uantwerpen.be/resources
  64. https://www.uantwerpen.be/en/rg/clips/projects-and-publica/publications/
  65. https://www.clips.uantwerpen.be/
  66. https://www.uantwerpen.be/en/rg/clips/news-and-events/
  67. https://www.uantwerpen.be/en/rg/clips/projects-and-publica/projects/
  68. https://www.uantwerpen.be/en/rg/clips/research-mission-and-members/members/
  69. https://www.uantwerpen.be/en/rg/clips/projects-and-publica/demos/
  70. https://www.clips.uantwerpen.be/resources
  71. https://www.uantwerpen.be/en/rg/clips/projects-and-publica/publications/
  72. https://www.facebook.com/clips.ua
  73. https://twitter.com/clipsua
  74. https://www.clips.uantwerpen.be/user/password
  75. https://www.clips.uantwerpen.be/computational-linguistics
  76. https://www.clips.uantwerpen.be/language-acquisition
  77. https://www.clips.uantwerpen.be/language-processing
  78. http://ilk.uvt.nl/timbl/
  79. https://www.clips.uantwerpen.be/pages/mbsp
  80. https://www.clips.uantwerpen.be/pages/pattern
  81. https://www.clips.uantwerpen.be/ctrs
  82. http://ilk.uvt.nl/mblp/
  83. https://www.clips.uantwerpen.be/archive
  84. https://www.clips.uantwerpen.be/colloquia
  85. https://www.clips.uantwerpen.be/pages/atila-2011
  86. http://clif.esat.kuleuven.be/
  87. mailto:walter.daelemans@ua.ac.be
  88. mailto:steven.gillis@ua.ac.be
  89. mailto:dominiek.sandra@ua.ac.be
  90. http://drupal.org/

   hidden links:
  92. https://www.clips.uantwerpen.be/pages/modeling-creativity-with-a-semantic-network-of-common-sense
  93. https://www.clips.uantwerpen.be/pages/using-wiktionary-to-build-an-italian-part-of-speech-tagger
  94. https://www.clips.uantwerpen.be/pages/using-wikicorpus-nltk-to-build-a-spanish-part-of-speech-tagger
  95. https://www.clips.uantwerpen.be/pages/pattern-examples-elections
  96. https://www.clips.uantwerpen.be/pages/pattern-examples-100days
