   #[1]github [2]recent commits to nnblocks:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]3
     * [35]star [36]17
     * [37]fork [38]7

[39]nnblocks/[40]nnblocks

   [41]code [42]issues 23 [43]pull requests 0 [44]projects 0 [45]wiki
   [46]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [47]sign up
   a framework to build and train linguistics neural models
     * [48]112 commits
     * [49]2 branches
     * [50]0 releases
     * [51]fetching contributors
     * [52]gpl-3.0

    1. [53]python 100.0%

   (button) python
   branch: master (button) new pull request
   [54]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/n
   [55]download zip

downloading...

   want to be notified of new releases in nnblocks/nnblocks?
   [56]sign in [57]sign up

launching github desktop...

   if nothing happens, [58]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [59]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [60]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [61]download the github extension for visual studio
   and try again.

   (button) go back
   frederico tommasi caroli
   frederico tommasi caroli [62]trainsupervisor small changes
   latest commit [63]fb44380 apr 8, 2016
   [64]permalink
   type       name                latest commit message           commit time
        failed to load latest commit information.
        [65]nnb
        [66].gitignore
        [67]license.txt
        [68]readme.md   [69]update readme.md                     nov 13, 2015
        [70]setup.py    [71]changes to dependency and more inits dec 4, 2015

readme.md

   #nnblocks nnblocks is a framework to build and train any kind of exotic
   neural networks architectures. it is made to be:
     * easy to use
     * easy to expand with new model blocks
     * full of auxiliary tools for your neural network

   please refer to the [72]user guide for more information on instalation
   and usage.

   ###example: let's say you have 3 input vectors as matrix lines. this
   will be the nn input. you want to pass it through a multilayer
   id88, then a recurrent neural network and finnaly get the last
   vector of the result. i.e.: ####code:
import nnb
import numpy as np

#the input vectors will have size 3
input_vecs = np.arange(9)
input_vecs.resize(3,3)

input_layer = nnb.inputlayer(ndim=2)
p_layer1 = nnb.id88layer(insize=3, outsize=5)
p_layer2 = nnb.id88layer(insize=5, outsize=3)
id56 = nnb.recurrentneuralnetwork(insize=3, outsize=3)

#join everything
final_model = input_layer | p_layer1 | p_layer2 | id56[-1]

#compiling the feedforward function
feedforward = final_model.compile()
feedforward(input_vecs)

   ###another (more advanced) example: now let's implement a matrix-vector
   id56 (mv-id56), just as described in socher's work
   ([73]http://www.aclweb.org/anthology/d12-1110). this example is way
   more complicated than the last, but is an awesome example to
   demonstrate the power of nnblocks. first of all, let's understand the
   architecture:
     * the inputs will be a composition tree, represented by a matrix of
       children indexes, and a vector of word indexes, that will be later
       translated to word vectors and word matrices
     * each node in a recursive tree will generate it's word vector using
       the vectors and matrices of it's children. each node will also
       produce a new matrix for the vector generated. for details on this
       step please read the original paper.
     * a softmax classifier can be put on top of each node. this
       classifier will be fed with the generated vector of that node.

   now a step-by-step for the code:
import nnb
import numpy as np

#15 word vectors of size 5
word_vecs = np.random.random(size=(15,5))
#15 word matrices of size 5x5
word_mats = np.random.random(size=(15,5,5))

   here we just initialize some of our network's parameters, where
     * word_vecs is all of our vocabulary vectors
     * word_mats is all of our vocabulary matrices

   the rest of the parameters will be handled by nnblocks' models. we need
   to declare these parameters here because they don't fit in any of
   nnblocks already implemented models. this sounds like a bad thing, but
   it's actually a big plus that you can plug in your own parameters and
   use them in the network easily.
comp_tree = nnb.inputlayer(ndim=2, dtype='int32')
word_index = nnb.inputlayer(ndim=1, dtype='int32')

   now we initialize our network's inputs.
     * comp_tree is the composition tree to be followed by the recursive
       tree. each line of the matrix represents a node in the tree and
       each column represents a child of that node. since each node has
       two children, the matrix has shape (n, 2), where n is the number of
       internal nodes
     * word_index is a vector representing the sentence to be composed.
       each element in the vector is a word index

   now we shall start to build the actual model. we will first focus on
   building the model that will do the composition on each node of the
   tree.
words_comp = \
    nnb.custommodel(fn=lambda x, x, y, y: [x.dot(y), y.dot(x)]) | \
    nnb.concatenationmodel(axis=0) | \
    nnb.id88layer(insize=10, outsize=5)

matrix_comp = \
    nnb.slicemodel(slice=[1, 3]) | \
    nnb.concatenationmodel(axis=1) | \
    nnb.id88layer(insize=10, outsize=5, activation_func=lambda x: x)

comp_model = words_comp & matrix_comp

   now comp_model, receiving two word vectors and matrices, will output a
   composed word vector and a composed word matrix. the
   recursiveneuralnetwork will take care of passing these inputs to our
   model. again, if you want to understand how the composition is made,
   read the original paper.

   now the rest of the code:
id56 = nnb.recursiveneuralnetwork(comp_model=comp_model)
vec_picker = nnb.picker(choices=word_vecs)
matrix_picker = nnb.picker(choices=word_mats)

id56_inputs = comp_tree & (word_index | vec_picker) & (word_index | matrix_picker
)
all = id56_inputs | id56
#we are interested only in the composed vectors
composed_vectors = all[0]

#if we wanted to put a softmax layer on top of each node:
#classifications = composed_vectors | nnb.softmaxlayer(insize=5, outsize=num_cla
sses)

   at last we finished our model. now we can use nnblocks' tools to train
   our network!

     *    2019 github, inc.
     * [74]terms
     * [75]privacy
     * [76]security
     * [77]status
     * [78]help

     * [79]contact github
     * [80]pricing
     * [81]api
     * [82]training
     * [83]blog
     * [84]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [85]reload to refresh your
   session. you signed out in another tab or window. [86]reload to refresh
   your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/nnblocks/nnblocks/commits/master.atom
   3. https://github.com/nnblocks/nnblocks#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/nnblocks/nnblocks
  32. https://github.com/join
  33. https://github.com/login?return_to=/nnblocks/nnblocks
  34. https://github.com/nnblocks/nnblocks/watchers
  35. https://github.com/login?return_to=/nnblocks/nnblocks
  36. https://github.com/nnblocks/nnblocks/stargazers
  37. https://github.com/login?return_to=/nnblocks/nnblocks
  38. https://github.com/nnblocks/nnblocks/network/members
  39. https://github.com/nnblocks
  40. https://github.com/nnblocks/nnblocks
  41. https://github.com/nnblocks/nnblocks
  42. https://github.com/nnblocks/nnblocks/issues
  43. https://github.com/nnblocks/nnblocks/pulls
  44. https://github.com/nnblocks/nnblocks/projects
  45. https://github.com/nnblocks/nnblocks/wiki
  46. https://github.com/nnblocks/nnblocks/pulse
  47. https://github.com/join?source=prompt-code
  48. https://github.com/nnblocks/nnblocks/commits/master
  49. https://github.com/nnblocks/nnblocks/branches
  50. https://github.com/nnblocks/nnblocks/releases
  51. https://github.com/nnblocks/nnblocks/graphs/contributors
  52. https://github.com/nnblocks/nnblocks/blob/master/license.txt
  53. https://github.com/nnblocks/nnblocks/search?l=python
  54. https://github.com/nnblocks/nnblocks/find/master
  55. https://github.com/nnblocks/nnblocks/archive/master.zip
  56. https://github.com/login?return_to=https://github.com/nnblocks/nnblocks
  57. https://github.com/join?return_to=/nnblocks/nnblocks
  58. https://desktop.github.com/
  59. https://desktop.github.com/
  60. https://developer.apple.com/xcode/
  61. https://visualstudio.github.com/
  62. https://github.com/nnblocks/nnblocks/commit/fb443805cb0aa9fbedbc4fac7457bd15732d6037
  63. https://github.com/nnblocks/nnblocks/commit/fb443805cb0aa9fbedbc4fac7457bd15732d6037
  64. https://github.com/nnblocks/nnblocks/tree/fb443805cb0aa9fbedbc4fac7457bd15732d6037
  65. https://github.com/nnblocks/nnblocks/tree/master/nnb
  66. https://github.com/nnblocks/nnblocks/blob/master/.gitignore
  67. https://github.com/nnblocks/nnblocks/blob/master/license.txt
  68. https://github.com/nnblocks/nnblocks/blob/master/readme.md
  69. https://github.com/nnblocks/nnblocks/commit/fd4fd2a882cf8afa382f87b0de10a5736aa9e733
  70. https://github.com/nnblocks/nnblocks/blob/master/setup.py
  71. https://github.com/nnblocks/nnblocks/commit/acc0def9414776a6aaf2e62ea309bdf62c8bb407
  72. https://github.com/nnblocks/nnblocks/wiki/user-guide
  73. http://www.aclweb.org/anthology/d12-1110
  74. https://github.com/site/terms
  75. https://github.com/site/privacy
  76. https://github.com/security
  77. https://githubstatus.com/
  78. https://help.github.com/
  79. https://github.com/contact
  80. https://github.com/pricing
  81. https://developer.github.com/
  82. https://training.github.com/
  83. https://github.blog/
  84. https://github.com/about
  85. https://github.com/nnblocks/nnblocks
  86. https://github.com/nnblocks/nnblocks

   hidden links:
  88. https://github.com/
  89. https://github.com/nnblocks/nnblocks
  90. https://github.com/nnblocks/nnblocks
  91. https://github.com/nnblocks/nnblocks
  92. https://help.github.com/articles/which-remote-url-should-i-use
  93. https://camo.githubusercontent.com/c1e38ce5a719d256c48afdc67ab0c583b498b24f/687474703a2f2f692e696d6775722e636f6d2f5737707233694c2e706e673f31
  94. https://github.com/
