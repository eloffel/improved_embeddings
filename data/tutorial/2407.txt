   #[1]kdnuggets: analytics, big data, data mining and data science feed
   [2]kdnuggets    feed [3]kdnuggets    comments feed [4]kdnuggets   
   implementing neural networks in javascript comments feed [5]innovation
   in data analytics, help shape singapore   s smart nation [6]deep learning
   and neuromorphic chips

kdnuggets

     [7]subscribe to kdnuggets news  | [8]twitter    [9]facebook
   [10]linkedin  |  [11]contact
   ____________________ search
   [menu-30.png]
   [search-icon.png]
     * [12]software
     * [13]news/blog
     * [14]top stories
     * [15]opinions
     * [16]tutorials
     * [17]jobs
     * [18]companies
     * [19]courses
     * [20]datasets
     * [21]education
     * [22]certificates
     * [23]meetings
     * [24]webinars


   [25]kdnuggets home    [26]news    [27]2016    [28]may    [29]tutorials,
   overviews    implementing neural networks in javascript ( [30]16:n18 )

implementing neural networks in javascript

   [31][prv.gif] previous post
   [32]next post [nxt.gif]


   tags: [33]javascript, [34]mnist, [35]neural networks

   javascript is one of the most prevalent and fastest growing languages
   in existence today. get a quick introduction to implementing neural
   networks in the language, and direction on where to go from here.
     __________________________________________________________________

   by tine wiederer, webkid.io.

   neural networks provide the possibility to solve complicated non linear
   problems. they can be used in various areas such as signal
   classification, forecasting timeseries and pattern recognition. a
   neural network is a model inspired by the human brain and consists of
   multiple connected neurons. the network consists of a layer of input
   neurons (where the information goes in), a layer of output neurons
   (where the result can be taken from) and a number of so called hidden
   layers in between:

   neuronal network scheme

   for getting a deeper understanding, i recommend checking out [36]neural
   networks and deep learning.

   within the last years, multiple javascript frameworks were developed
   that can help you to create, train and use neural networks for
   different purposes. in this blog post, you will learn how to set up a
   network and use it for classifying images.

   a common example for getting started with neural networks is the
   classification of handwritten digits. to achieve good results, a
   network has to be trained properly. therefore, we need a set of data
   called a training set. in our example, we will use the mnist numbers, a
   set of thousands of 28x28px binary images of handwritten numbers from 0
   to 9:

                                mnist numbers

   the mnist database containing 60,000 examples for training and 10,000
   examples for testing can be downloaded from [37]lecun   s website.
   instead of downloading the database and converting the data to actual
   images, we can use the helpful library [38]mnist digits, which creates
   test- and training sets automatically.
const mnist = require('mnist');

const set = mnist.set(700, 20);

const trainingset = set.training;
const testset = set.test;

   the above code creates a training set of 700 images and a testset with
   20 elements. when creating the sets manually, it is important to make
   sure there are no duplicate elements in the sets. if you   re using the
   mnist digits library, this is checked automatically.

   after creating the data for training and testing, we can set up the
   network. we will use the library [39]synaptic.js, which gives us the
   possibility to create a neural network and configure various
   parameters. first of all, we have to determine how many input and
   output neurons are needed. as the size of each image is 28x28px, the
   number of pixels the network has to take as input is 28 x 28 = 784. the
   digits should be assigned to one of ten classes, so the number of
   output neurons will be 10. furthermore, the network should have at
   least one hidden layer, which in this example is set to consist of 100
   neurons.

   the following code sets up the network described above:
const synaptic = require('synaptic');

const layer = synaptic.layer;
const network = synaptic.network;
const trainer = synaptic.trainer;

const inputlayer = new layer(784);
const hiddenlayer = new layer(100);
const outputlayer = new layer(10);

inputlayer.project(hiddenlayer);
hiddenlayer.project(outputlayer);

const mynetwork = new network({
    input: inputlayer,
    hidden: [hiddenlayer],
    output: outputlayer
});

   to train the network with our training set, we can use the trainer
   provided by synaptic.js. the [40]train() function takes the data used
   for the training and a list of parameters for the configuration of the
   trainer.
const trainer = new trainer(mynetwork);
trainer.train(trainingset, {
    rate: .2,
    iterations: 20,
    error: .1,
    shuffle: true,
    log: 1,
    cost: trainer.cost.cross_id178
});

   as options, you can set the    rate   , which is the learning rate for the
   training. the    iterations    define, after how many iterations the
   training determines. the    error    is the minimum error that can be
   reached during the training, if it is achieved, the training stops. by
   setting the    shuffle    option, you can specify if the training set is
   ordered randomly or not. you can find more detailed information about
   all possible options in the [41]synaptic.js documentation.

   to get the general idea, in this example we set the maximum number of
   iterations to 20 to make sure we don   t have to wait for hours before
   the training is finished. note that the network won   t be trained very
   well after only 20 iterations. to get better results, you   ll have to
   increase the number and be patient.

   if you want to see the progress of training, you can use the    log   
   option to print out the current error of the network. the lower the
   error, the better the network is trained.

                                  error log

   you might notice that the error fluctuates a bit instead of shrinking
   constantly, but on the whole it gets smaller. if this is not the case,
   you can try working with a smaller learning rate.

   after the training is finished, the testset can be used to check how
   good the classification by the network works. for this, we can use
   the[42]activate() function of the network, which takes the element to
   classify as parameter. to check the result, it can be printed out and
   compared to the expected output.
console.log(mynetwork.activate(testset[0].input));
console.log(testset[0].output);

   please note that the results achieved by the network in this example
   are not great. only around 50% of the elements in the training set get
   classified correctly. this is because of the small training set and the
   low number of iterations used in the training. to improve the results,
   the number of elements in the training set and the iterations for the
   training should be increased. warning: this will cause the training to
   take quite a while longer!

   besides from the common mnist example, there are many other
   applications in which neural networks can be useful. another
   interesting experiment that uses synaptic.js is the [43]t-rex ml
   player in which a neural network learns the t-rex game.

   if you want to have a look at similar javascript libraries for creating
   neural networks, here are some other projects you should check out:
     * [44]convnetjs
     * [45]mind.js
     * [46]brain.js

   bio: [47]tine wiederer studied media and computing in berlin. now she
   works as a data scientist and front-end developer at [48]webkid.io.

   [49]original. reposted with permission.

   related:
     * [50]learning to code neural networks
     * [51]a neural network in 11 lines of python
     * [52]fastest growing programming languages and computing frameworks
     __________________________________________________________________

   [53][prv.gif] previous post
   [54]next post [nxt.gif]
     __________________________________________________________________

top stories past 30 days

                                              most popular
    1. [55]another 10 free must-read books for machine learning and data
       science
    2. [56]9 must-have skills you need to become a data scientist, updated
    3. [57]who is a typical data scientist in 2019?
    4. [58]the pareto principle for data scientists
    5. [59]what no one will tell you about data science job applications
    6. [60]19 inspiring women in ai, big data, data science, machine
       learning
    7. [61]my favorite mind-blowing machine learning/ai breakthroughs

                                                most shared
    1. [62]id158s optimization using genetic algorithm
       with python
    2. [63]who is a typical data scientist in 2019?
    3. [64]8 reasons why you should get a microsoft azure certification
    4. [65]the pareto principle for data scientists
    5. [66]r vs python for data visualization
    6. [67]how to work in data science, ai, big data
    7. [68]the deep learning toolset     an overview

[69]latest news

     * [70]statistical thinking for industrial problem solving (st...
     * [71]from business intelligence to machine intelligence
     * [72]what is missing when ai makes a decision?
     * [73]spatio-temporal statistics: a primer
     * [74]another 10 free must-see courses for machine learning a...
     * [75]download your datax guide to ai in marketing

   [76]kdnuggets home    [77]news    [78]2016    [79]may    [80]tutorials,
   overviews    implementing neural networks in javascript ( [81]16:n18 )
      2019 kdnuggets. [82]about kdnuggets.  [83]privacy policy. [84]terms
   of service

   [85]subscribe to kdnuggets news
   [86][tw_c48.png] [87]facebook [88]linkedin
   x

   [envelope.png] [89]get kdnuggets, a leading newsletter on ai, data
   science, and machine learning
   email: ______________________________
   sign up
   leave this field empty if you're human: ____________________

references

   visible links
   1. https://www.kdnuggets.com/feed/
   2. https://www.kdnuggets.com/feed
   3. https://www.kdnuggets.com/comments/feed
   4. https://www.kdnuggets.com/2016/05/implementing-neural-networks-javascript.html/feed
   5. https://www.kdnuggets.com/2016/05/singapore-innovation-data-analytics-smart-nation.html
   6. https://www.kdnuggets.com/2016/05/deep-learning-neuromorphic-chips.html
   7. https://www.kdnuggets.com/news/subscribe.html
   8. https://twitter.com/kdnuggets
   9. https://www.facebook.com/kdnuggets
  10. https://www.linkedin.com/groups/54257/
  11. https://www.kdnuggets.com/contact.html
  12. https://www.kdnuggets.com/software/index.html
  13. https://www.kdnuggets.com/news/index.html
  14. https://www.kdnuggets.com/news/top-stories.html
  15. https://www.kdnuggets.com/opinions/index.html
  16. https://www.kdnuggets.com/tutorials/index.html
  17. https://www.kdnuggets.com/jobs/index.html
  18. https://www.kdnuggets.com/companies/index.html
  19. https://www.kdnuggets.com/courses/index.html
  20. https://www.kdnuggets.com/datasets/index.html
  21. https://www.kdnuggets.com/education/index.html
  22. https://www.kdnuggets.com/education/analytics-data-mining-certificates.html
  23. https://www.kdnuggets.com/meetings/index.html
  24. https://www.kdnuggets.com/webcasts/index.html
  25. https://www.kdnuggets.com/
  26. https://www.kdnuggets.com/news/index.html
  27. https://www.kdnuggets.com/2016/index.html
  28. https://www.kdnuggets.com/2016/05/index.html
  29. https://www.kdnuggets.com/2016/05/tutorials.html
  30. https://www.kdnuggets.com/2016/n18.html
  31. https://www.kdnuggets.com/2016/05/singapore-innovation-data-analytics-smart-nation.html
  32. https://www.kdnuggets.com/2016/05/deep-learning-neuromorphic-chips.html
  33. https://www.kdnuggets.com/tag/javascript
  34. https://www.kdnuggets.com/tag/mnist
  35. https://www.kdnuggets.com/tag/neural-networks
  36. http://neuralnetworksanddeeplearning.com/
  37. http://yann.lecun.com/exdb/mnist/
  38. https://github.com/cazala/mnist
  39. http://synaptic.juancazala.com/#/
  40. https://github.com/cazala/synaptic/wiki/trainer#train
  41. https://github.com/cazala/synaptic/wiki/trainer#options
  42. https://github.com/cazala/synaptic/wiki/networks#activate
  43. https://github.com/amaneureka/t-rex
  44. https://github.com/karpathy/convnetjs
  45. http://www.mindjs.net/
  46. https://github.com/harthur-org/brain.js
  47. https://twitter.com/errorroutine
  48. http://webkid.io/
  49. http://blog.webkid.io/neural-networks-in-javascript/
  50. https://www.kdnuggets.com/2016/01/learning-to-code-neural-networks.html
  51. https://www.kdnuggets.com/2015/10/neural-network-python-tutorial.html
  52. https://www.kdnuggets.com/2016/03/ranking-growth-programming-languages.html
  53. https://www.kdnuggets.com/2016/05/singapore-innovation-data-analytics-smart-nation.html
  54. https://www.kdnuggets.com/2016/05/deep-learning-neuromorphic-chips.html
  55. https://www.kdnuggets.com/2019/03/another-10-free-must-read-books-for-machine-learning-and-data-science.html
  56. https://www.kdnuggets.com/2018/05/simplilearn-9-must-have-skills-data-scientist.html
  57. https://www.kdnuggets.com/2019/03/typical-data-scientist-2019.html
  58. https://www.kdnuggets.com/2019/03/pareto-principle-data-scientists.html
  59. https://www.kdnuggets.com/2019/03/data-science-job-applications.html
  60. https://www.kdnuggets.com/2019/03/women-ai-big-data-science-machine-learning.html
  61. https://www.kdnuggets.com/2019/03/favorite-ml-ai-breakthroughs.html
  62. https://www.kdnuggets.com/2019/03/artificial-neural-networks-optimization-genetic-algorithm-python.html
  63. https://www.kdnuggets.com/2019/03/typical-data-scientist-2019.html
  64. https://www.kdnuggets.com/2019/03/simplilearn-8-reasons-microsoft-azure-certification.html
  65. https://www.kdnuggets.com/2019/03/pareto-principle-data-scientists.html
  66. https://www.kdnuggets.com/2019/03/r-vs-python-data-visualization.html
  67. https://www.kdnuggets.com/2019/03/work-data-science-ai-big-data.html
  68. https://www.kdnuggets.com/2019/03/deep-learning-toolset-overview.html
  69. https://www.kdnuggets.com/news/index.html
  70. https://www.kdnuggets.com/2019/04/jmp-statistical-thinking-free-online-course.html
  71. https://www.kdnuggets.com/2019/04/datarobot-from-business-intelligence-machine-intelligence.html
  72. https://www.kdnuggets.com/2019/04/ai-makes-decision.html
  73. https://www.kdnuggets.com/2019/04/spatio-temporal-statistics-primer.html
  74. https://www.kdnuggets.com/2019/04/another-10-free-must-see-courses-machine-learning-data-science.html
  75. https://www.kdnuggets.com/2019/04/datax-download-guide-ai-marketing.html
  76. https://www.kdnuggets.com/
  77. https://www.kdnuggets.com/news/index.html
  78. https://www.kdnuggets.com/2016/index.html
  79. https://www.kdnuggets.com/2016/05/index.html
  80. https://www.kdnuggets.com/2016/05/tutorials.html
  81. https://www.kdnuggets.com/2016/n18.html
  82. https://www.kdnuggets.com/about/index.html
  83. https://www.kdnuggets.com/news/privacy-policy.html
  84. https://www.kdnuggets.com/terms-of-service.html
  85. https://www.kdnuggets.com/news/subscribe.html
  86. https://twitter.com/kdnuggets
  87. https://facebook.com/kdnuggets
  88. https://www.linkedin.com/groups/54257
  89. https://www.kdnuggets.com/news/subscribe.html

   hidden links:
  91. https://www.kdnuggets.com/
  92. https://www.kdnuggets.com/
