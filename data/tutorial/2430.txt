   #[1]github [2]recent commits to annualreview-complearning:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]6
     * [35]star [36]68
     * [37]fork [38]29

[39]cgpotts/[40]annualreview-complearning

   [41]code [42]issues 0 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   demonstration code for liang and potts 2015
     * [47]22 commits
     * [48]1 branch
     * [49]0 releases
     * [50]fetching contributors
     * [51]gpl-2.0

    1. [52]python 100.0%

   (button) python
   branch: master (button) new pull request
   [53]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/c
   [54]download zip

downloading...

   want to be notified of new releases in
   cgpotts/annualreview-complearning?
   [55]sign in [56]sign up

launching github desktop...

   if nothing happens, [57]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [58]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [59]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [60]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [61]permalink
   type         name         latest commit message commit time
        failed to load latest commit information.
        [62].gitignore
        [63]license
        [64]readme.md
        [65]__init__.py
        [66]distributed.py
        [67]evenodd.py
        [68]grammar.py
        [69]learning.py
        [70]requirements.txt
        [71]semdata.py
        [72]synthesis.py

readme.md

bringing machine learning and id152 together

   demonstration code for the paper

   liang, percy and christopher potts. 2014. [73]bringing machine learning
   and id152 together. annual review of linguistics
   1(1): 355   376.

   the purpose of the code is just to illustrate how the algorithms work,
   as an aid to understanding the paper and developing new models that
   synthesize compositionality and machine learning.

   all of the files contain detailed explanations and documentation, with
   cross references to the paper. evenodd.py, grammar.py, synthesis.py run
   demos corresponding to examples and discussions from the paper.

   the current verson has been tested with python 2.7 and python 3.5. the
   only other requirement is numpy 1.10 or greater, and that dependency is
   only for the neural network in distributed.py.

code snippets

   build the gold-standard grammar and use it for parsing:
from grammar import grammar, gold_lexicon, rules, functions
gram = grammar(gold_lexicon, rules, functions)
gram.gen('minus two plus three')

   and interpretation:
for lf in gram.gen('minus two plus three'):
    print gram.sem(lf)

   check out the crazy things that the crude grammar does with the simple
   example (it creates 486 logical forms):
from synthesis import crude_lexicon
crude_gram = grammar(crude_lexicon, rules, functions)
crude_gram.gen('minus two plus three')

   train a id29 model using the default training set from
   semdata.py and the crude grammar as a starting point:
from semdata import sem_train
from synthesis import phi_sem
from learning import sgd
# for id29, the denotations are ignored:
semparse_train = [[x,y] for x, y, d in sem_train]

# the space of output classes is determined by gen:
weights = sgd(d=semparse_train, phi=phi_sem, classes=crude_gram.gen)

   and now see that the crude grammar plus the learned weights deliver a
   right result for 'minus two plus three' (the training set happens to
   favor the second parse in the list returned by the gold grammar gram):
from learning import predict
predict(x='minus two plus three', w=weights, phi=phi_sem, classes=crude_gram.gen
)

   for id29 with the trees/derivations as latent variables,
   and for learning from denotations, see synthesis.evaluate_interpretive
   and synthesis.evaluate_latent_semparse.

grammar.py

   implements a simple interpreted context-free grammar formalism in which
   each nonterminal node is a tuple (s, r) where s is the syntactic
   category and r is the logical form representation. the user supplies a
   lexicon, a rule-set, and possibly a set of functions that, together
   with python itself, make the logical forms interpretable as python
   code.

semdata.py

   uses grammar.py to create training and testing data for the semantic
   models.

learning.py

   the core learning framework from section 3.2 of the paper.

evenodd.py

   a simple supervised learning example using learning.py. the examples
   correspond to table 3 in the paper.

synthesis.py

   implements three different theories for learning compositional
   semantics. all are illustrated with the same feature function and
   train/test data.
     * basic id29, in which we learn from and predict entire
       tree-structure logical forms. this involves no latent variables;
       optimization is with sgd. this is the focus of section 4.1 of the
       paper.
     * learning from denotations, in which the tree-structural logical
       forms are latent variables; optimization is with latentsgd. this is
       the focus of section 4.2 of the paper.
     * latent variable id29, in which we learn from and
       predict only the root node of the logical form, making the tree
       structure a hidden variable. this is not covered in detail in the
       paper due to space constraints, but it achieves a richer connection
       with the literature on id29. to make things
       interesting, we add a type-lifting rule to the grammar for this
       example, so that individual logical forms correspond to multiple
       derivations.

     *    2019 github, inc.
     * [74]terms
     * [75]privacy
     * [76]security
     * [77]status
     * [78]help

     * [79]contact github
     * [80]pricing
     * [81]api
     * [82]training
     * [83]blog
     * [84]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [85]reload to refresh your
   session. you signed out in another tab or window. [86]reload to refresh
   your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/cgpotts/annualreview-complearning/commits/master.atom
   3. https://github.com/cgpotts/annualreview-complearning#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/cgpotts/annualreview-complearning
  32. https://github.com/join
  33. https://github.com/login?return_to=/cgpotts/annualreview-complearning
  34. https://github.com/cgpotts/annualreview-complearning/watchers
  35. https://github.com/login?return_to=/cgpotts/annualreview-complearning
  36. https://github.com/cgpotts/annualreview-complearning/stargazers
  37. https://github.com/login?return_to=/cgpotts/annualreview-complearning
  38. https://github.com/cgpotts/annualreview-complearning/network/members
  39. https://github.com/cgpotts
  40. https://github.com/cgpotts/annualreview-complearning
  41. https://github.com/cgpotts/annualreview-complearning
  42. https://github.com/cgpotts/annualreview-complearning/issues
  43. https://github.com/cgpotts/annualreview-complearning/pulls
  44. https://github.com/cgpotts/annualreview-complearning/projects
  45. https://github.com/cgpotts/annualreview-complearning/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/cgpotts/annualreview-complearning/commits/master
  48. https://github.com/cgpotts/annualreview-complearning/branches
  49. https://github.com/cgpotts/annualreview-complearning/releases
  50. https://github.com/cgpotts/annualreview-complearning/graphs/contributors
  51. https://github.com/cgpotts/annualreview-complearning/blob/master/license
  52. https://github.com/cgpotts/annualreview-complearning/search?l=python
  53. https://github.com/cgpotts/annualreview-complearning/find/master
  54. https://github.com/cgpotts/annualreview-complearning/archive/master.zip
  55. https://github.com/login?return_to=https://github.com/cgpotts/annualreview-complearning
  56. https://github.com/join?return_to=/cgpotts/annualreview-complearning
  57. https://desktop.github.com/
  58. https://desktop.github.com/
  59. https://developer.apple.com/xcode/
  60. https://visualstudio.github.com/
  61. https://github.com/cgpotts/annualreview-complearning/tree/97f100f30f5703e3c0779b3ffcff968eaa7b2fa3
  62. https://github.com/cgpotts/annualreview-complearning/blob/master/.gitignore
  63. https://github.com/cgpotts/annualreview-complearning/blob/master/license
  64. https://github.com/cgpotts/annualreview-complearning/blob/master/readme.md
  65. https://github.com/cgpotts/annualreview-complearning/blob/master/__init__.py
  66. https://github.com/cgpotts/annualreview-complearning/blob/master/distributed.py
  67. https://github.com/cgpotts/annualreview-complearning/blob/master/evenodd.py
  68. https://github.com/cgpotts/annualreview-complearning/blob/master/grammar.py
  69. https://github.com/cgpotts/annualreview-complearning/blob/master/learning.py
  70. https://github.com/cgpotts/annualreview-complearning/blob/master/requirements.txt
  71. https://github.com/cgpotts/annualreview-complearning/blob/master/semdata.py
  72. https://github.com/cgpotts/annualreview-complearning/blob/master/synthesis.py
  73. http://www.stanford.edu/~cgpotts/manuscripts/liang-potts-semantics.pdf
  74. https://github.com/site/terms
  75. https://github.com/site/privacy
  76. https://github.com/security
  77. https://githubstatus.com/
  78. https://help.github.com/
  79. https://github.com/contact
  80. https://github.com/pricing
  81. https://developer.github.com/
  82. https://training.github.com/
  83. https://github.blog/
  84. https://github.com/about
  85. https://github.com/cgpotts/annualreview-complearning
  86. https://github.com/cgpotts/annualreview-complearning

   hidden links:
  88. https://github.com/
  89. https://github.com/cgpotts/annualreview-complearning
  90. https://github.com/cgpotts/annualreview-complearning
  91. https://github.com/cgpotts/annualreview-complearning
  92. https://help.github.com/articles/which-remote-url-should-i-use
  93. https://github.com/cgpotts/annualreview-complearning#bringing-machine-learning-and-compositional-semantics-together
  94. https://github.com/cgpotts/annualreview-complearning#code-snippets
  95. https://github.com/cgpotts/annualreview-complearning#grammarpy
  96. https://github.com/cgpotts/annualreview-complearning#semdatapy
  97. https://github.com/cgpotts/annualreview-complearning#learningpy
  98. https://github.com/cgpotts/annualreview-complearning#evenoddpy
  99. https://github.com/cgpotts/annualreview-complearning#synthesispy
 100. https://github.com/
