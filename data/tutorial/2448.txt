   #[1]github [2]recent commits to dive-into-machine-learning:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]0
     * [35]star [36]8
     * [37]fork [38]1,680

[39]rhiever/[40]dive-into-machine-learning forked from
[41]hangtwenty/dive-into-machine-learning

   [42]code [43]pull requests 0 [44]projects 0 [45]insights
   [46]permalink
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [47]sign up
   branch: master
   [48]dive-into-machine-learning/readme.md
   [49]find file copy path
   fetching contributors   
   cannot retrieve contributors at this time
   229 lines (137 sloc) 21.1 kb
   [50]raw [51]blame [52]history
   (button) (button)

   hi there! this guide is for you:
     * you're new to machine learning
     * you can understand and write python code. (if you want to learn
       python, try [53]dive into python.)

   i learned python by hacking first, and getting serious later. i wanted
   to do this with machine learning. if this is your style, join me in
   getting a bit ahead of yourself.

   note: there are several fields within "data," and machine learning is
   just one. it's good to know the context: [54]what is the difference
   between data analytics, data analysis, data mining, data science,
   machine learning, and big data?

get your feet wet!

   i suggest you get your feet wet asap. you'll boost your confidence.

tools you'll need

     * [55]python. (i'm using 2.7.5) and [56]pip, the python package
       manager
     * [57]ipython and ipython notebook. pip install "ipython[notebook]"
     * some scientific computing packages: pip install scikit-learn pandas
       matplotlib numpy

   if you're only using python for scientific computing, you can grab
   these tools in one convenient package: [58]anaconda.

let's go!

   [59]learn how to use ipython notebook (5-10 minutes). (you can
   [60]learn by screencast instead.)

   now, follow along with this brief exercise (10 minutes): [61]an
   introduction to machine learning with scikit-learn. do it in ipython or
   ipython notebook. it'll really boost your confidence.

   i'll wait...

what just happened?

   you just classified some hand-written digits using [62]scikit-learn.
   neat huh?

   [63]scikit-learn is the go-to library for machine learning in python.
   [64]some recognizable logos use it, including spotify and evernote.
   machine learning is complex. you'll be glad your tools are simple.

   i encourage you to look at the [65]scikit-learn homepage and spend
   about 5 minutes looking over the names of the strategies
   (classification, regression, etc.), and their applications. don't click
   through yet! just get a glimpse of the vocabulary.

immerse yourself

a few useful things to know about machine learning

   read [66]a few useful things to know about machine learning by pedro
   domingos. it's densely packed with valuable information, but not
   opaque. the author understands that there's a lot of "black art" and
   folk wisdom, and they invite you in.

   take your time with this one. take notes. don't worry if you don't
   understand it all yet.

   the whole paper is packed with value, but i want to call out two
   points:
     * data alone is not enough. this is where science meets art in
       machine-learning. quoting domingos: "... the need for knowledge in
       learning should not be surprising. machine learning is not magic;
       it can   t get something from nothing. what it does is get more from
       less. programming, like all engineering, is a lot of work: we have
       to build everything from scratch. learning is more like farming,
       which lets nature do most of the work. farmers combine seeds with
       nutrients to grow crops. learners combine knowledge with data to
       grow programs."
     * more data beats a cleverer algorithm. listen up, programmers. we
       like cool tools. resist the temptation to reinvent the wheel, or to
       over-engineer solutions. your starting point is to [67]do the
       simplest thing that could possibly work. quoting domingos: "suppose
       you   ve constructed the best set of features you can, but the
       classifiers you   re getting are still not accurate enough. what can
       you do now? there are two main choices: design a better learning
       algorithm, or gather more data. [...] as a rule of thumb, a dumb
       algorithm with lots and lots of data beats a clever one with modest
       amounts of it. (after all, machine learning is all about letting
       data do the heavy lifting.)"

   so knowledge and data are critical. focus your efforts on those, before
   fussing about algorithms. in practice, this means that unless you have
   to increase complexity, you should continue to [68]do simple things;
   don't rush to neural networks just because they're cool. to improve
   your model, get more data and use your knowledge of the problem to
   manipulate the data. you should spend most of your time on these steps.
   only optimize your choice of algorithms after you've got enough data,
   and you've processed it well.

   [69]what has the most impact in machine learning

   (the image above was inspired by a slide from [70]alex pinto's talk,
   "secure because math: a deep-dive on ml-based monitoring.)

talking machines

   subscribe to [71]talking machines, a podcast about machine learning.
   it's great. it's a low-effort, high-yield way to learn more.

   i suggest this listening order:
     * start with the [72]"starting simple" episode. it supports what we
       read from domingos. ryan adams talks about starting simple, as
       discussed above. adams also stresses the importance of feature
       engineering. feature engineering is an exercise of the "knowledge"
       domingos writes about.
     * then, start over from the first episode

play to learn

   pick one of these ipython notebooks and play along. (or maybe two. but
   move onto your main course afterward!)
     * [73]face recognition on a subset of the labeled faces in the wild
     * [74]machine learning from disaster: using titanic data,
       "demonstrates basic data munging, analysis, and visualization
       techniques. shows examples of supervised machine learning
       techniques."
     * [75]election forecasting: a replication of the model nate silver
       used to make [76]predictions about the 2012 us presidential
       election for the new york times)
     * clicksecurity's "data hacking" series (thanks [77]aaron)
          + [78]detect algorithmically generated domains
          + [79]detect sql injection
          + [80]java class file analysis: is this java code malicious or
            benign?
     * if you want more of a data science bent, pick a notebook from
       [81]this excellent list of data science ipython notebooks.
       "continually updated data science python notebooks: spark, hadoop
       mapreduce, hdfs, aws, kaggle, scikit-learn, matplotlib, pandas,
       numpy, scipy, and various command lines."
     * or more generic tutorials/overviews ...
          + [82]tutorial introduction to machine learning with sklearn
          + [83]an introduction to supervised learning via scikit learn
          + [84]an introduction to unsupervised learning via scikit learn

   there are more places to find great ipython notebooks:
     * [85]a gallery of interesting ipython notebooks (wiki page on
       github): statistics, machine learning and data science
     * [86]fabian pedregosa's larger, automatic gallery

dive deeper: coursework

your main course

   [87]prof. andrew ng (stanford)'s online course machine learning is the
   free online course i see recommended the most.

   it's helpful if you decide on a pet project to play around with, as you
   go, so you have a way to apply your knowledge. you could use one of
   these [88]awesome public datasets. and remember, ipython notebook is
   your friend.

   also, the book [89]elements of statistical learning comes up
   frequently, but is usually referred to as a "reference" not an
   introduction. it's free, so download or bookmark it!

alternative main courses

   here are some other free online courses i've [90]seen recommended.
   (machine learning, data science, and related topics.)
     * [91]machine learning by prof. pedro domingos of the university of
       washington. domingos wrote the paper [92]"a few useful things to
       know about machine learning" quoted earlier in this guide. (thanks
       to [93]paperwork on hn.)
     * [94]advanced statistical computing (vanderbilt, bios8366) -- great
       option, highly interactive (lots of ipython notebook material)
     * [95]data science (harvard, cs109)
     * [96]data science (general assembly)
     * data science courses as ipython notebooks:
          + [97]practical data science
          + [98]learn data science (an entire self-directed course!)
          + supplementary material:
            [99]donnemartin/data-science-ipython-notebooks. "continually
            updated data science python notebooks: spark, hadoop
            mapreduce, hdfs, aws, kaggle, scikit-learn, matplotlib,
            pandas, numpy, scipy, and various command lines."

learn pandas well

   if you're focusing on python, you should get more familiar with pandas.
     * essential: [100]10 minutes to pandas
     * essential: [101]things in pandas i wish i'd had known earlier
       (ipython notebook)
     * [102]useful pandas snippets
     * here are some docs i found especially helpful as i continued
       learning:
          + [103]cookbook
          + [104]data structures, esp. [105]dataframe section
          + [106]reshaping by pivoting dataframes
          + [107]computational tools and [108]stackexchange thread: "what
            is covariance in plain language?"
          + [109]group by (split, apply, and combine dataframes)
          + [110]visualizing your dataframes

cheat sheets

   bookmark these cheat sheets:
     * [111]scikit-learn algorithm cheat sheet
     * [112]metacademy: a package manager for [machine learning]
       knowledge. a mind map of machine learning concepts, with great
       detail on each.

more topics

data science

     * [113]an entire self-directed course in data science, as a ipython
       notebook
     * extremely accessible data science book: [114]data smart by john
       foreman
     * [115]data science workflow: overview and challenges (read the
       article & the comment by joseph mccarthy)
     * fun little ipython notebook: [116]web scraping indeed.com for key
       data science job skills

many more specialized topics

   check out [117]gideon wulfsohn's [118]excellent introduction to machine
   learning for specialized knowledge on many topics... including
   [119]ensemble methods, [120]apache spark, [121]neural networks,
   [122]id23, [123]natural language processing
   ([124]id56, [125]lda, [126]id97), [127]id170,
   [128]deep learning, [129]distributed systems (hadoop ecosystem),
   id114 ([130]id48), [131]hyper parameter
   optimization, [132]gpu acceleration (theano), [133]id161,
   internet of things, and visualization.

   here's an ipython notebook book about [134]probabilistic programming
   and bayesian methods for hackers: "an intro to bayesian methods and
   probabilistic programming from a computation/understanding-first,
   mathematics-second point of view."

questions, answers, chats

   for now, the best stackexchange site is [135]stats.stackexchange.com    
   machine-learning. (there's also [136]datascience.stackexchange.com, but
   it's still in beta.) and there's [137]/r/machinelearning. there are
   also many relevant discussions on quora, for example: [138]what is the
   difference between data analytics, data analysis, data mining, data
   science, machine learning, and big data?

   you should also [139]join the gitter channel for scikit-learn!

assorted opinions and other resources

   the rest of the stuff that might not be structured enough for a course,
   but seems important to know.

risks

   "machine learning systems automatically learn programs from data."
   pedro domingos, in [140]a few useful things to know about machine
   learning. the programs you generate will require maintenance. like any
   way of creating programs faster, you can rack up technical debt.

   really essential:
     * [141]surviving data science "at the speed of hype" by john foreman,
       data scientist at mailchimp
     * [142]11 clever methods of overfitting and how to avoid them

   a worthwhile paper: [143]machine learning: the high-interest credit
   card of technical debt. here's the abstract:

     machine learning offers a fantastically powerful toolkit for
     building complex systems quickly. this paper argues that it is
     dangerous to think of these quick wins as coming for free. using the
     framework of technical debt, we note that it is remarkably easy to
     incur massive ongoing maintenance costs at the system level when
     applying machine learning. the goal of this paper is highlight
     several machine learning specific risk factors and design patterns
     to be avoided or refactored where possible. these include boundary
     erosion, entanglement, hidden feedback loops, undeclared consumers,
     data dependencies, changes in the external world, and a variety of
     system-level anti-patterns.

   and a few more articles:
     * [144]the perilous world of machine learning for fun and profit:
       pipeline jungles and hidden feedback loops
     * [145]the high cost of maintaining machine learning systems

an anecdote from a popular music streaming service

   if you're using machine learning for unscientific reasons, like
   benefiting users ... as always you've got to keep your users in mind.

   i have a friend who worked at <redacted> music streaming service. this
   company used machine learning in their recommendation and radio
   services. he complained about the way the company scored the radio
   feature's performance. there was disagreement about what should be
   scored. they used a metric, "no song skips." but why? sure that
   indicates the recommendation wasn't awful, what if you want to measure
   engagement? other metrics could measure positive engagement:
   "favorites," shares, listening time, or whether the listener returns to
   the radio station later. measuring "no skips" might work for the
   passive listener, but the engaged listener is different. perhaps the
   engaged listener will skip 5 songs, but find 20 songs they love and
   come back to the service later.

   my takeaway: if you use machine learning to benefit your users, you
   must understand your users. you must understand which kind of user
   you're trying to benefit. without the right measurement, you can't
   optimize your users' experiences.

machine learning in internet security

   there was a great blackhat webcast on this topic, [146]secure because
   math: understanding machine learning-based security products. slides
   are [147]there, [148]video recording is here. equally relevant to
   infosec and appsec.

big data?

   scaling data analysis is a familiar problem now, and there's no
   shortage of ways to address it. [149]beware needless hype and companies
   that want to sell you flashy, proprietary solutions. you can do it all
   with open-source tools. even if you contract it, you consider looking
   for contractors who use known good stacks. no news here.

   here are some obvious tools to reach for:
     * [150]apache spark.
          + i mean, hell, [151]spark has dataframes and easy
            co-operability with pandas!
          + berkeley has [152]a course on scalable machine learning,
            focusing on apache spark.
     * [153]netflixoss (see "big data tools")
          + [154]netflix: surus and scorepmml
          + [155]"big data" on the netflixoss blog

   also: [156]10 things statistics taught us about big data analysis

et cetera

   for machine-learning libraries that might not be on github, there's
   [157]mloss (machine learning open source software). seems to feature
   many academic libraries.

   [158]kaggle has really exciting [159]competitions and a [160]data
   science job board.

   lastly, here are other guides to machine learning:
     * [161]machine learning for developers is another good introduction.
       it introduces machine learning for a developer audience using
       smile, a machine learning library that can be used both in java and
       scala.
     * [162]materials for learning machine learning by jack simpson
     * [163]how to machine learn by [164]gideon wulfsohn
          + features links to find meetups about ml
          + features links to "deeper dive" specialized topics
     * [your guide here]

   ____________________ (button) go

     *    2019 github, inc.
     * [165]terms
     * [166]privacy
     * [167]security
     * [168]status
     * [169]help

     * [170]contact github
     * [171]pricing
     * [172]api
     * [173]training
     * [174]blog
     * [175]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [176]reload to refresh your
   session. you signed out in another tab or window. [177]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/rhiever/dive-into-machine-learning/commits/master.atom
   3. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/rhiever/dive-into-machine-learning/blob/master/readme.md
  32. https://github.com/join
  33. https://github.com/login?return_to=/rhiever/dive-into-machine-learning
  34. https://github.com/rhiever/dive-into-machine-learning/watchers
  35. https://github.com/login?return_to=/rhiever/dive-into-machine-learning
  36. https://github.com/rhiever/dive-into-machine-learning/stargazers
  37. https://github.com/login?return_to=/rhiever/dive-into-machine-learning
  38. https://github.com/rhiever/dive-into-machine-learning/network/members
  39. https://github.com/rhiever
  40. https://github.com/rhiever/dive-into-machine-learning
  41. https://github.com/hangtwenty/dive-into-machine-learning
  42. https://github.com/rhiever/dive-into-machine-learning
  43. https://github.com/rhiever/dive-into-machine-learning/pulls
  44. https://github.com/rhiever/dive-into-machine-learning/projects
  45. https://github.com/rhiever/dive-into-machine-learning/pulse
  46. https://github.com/rhiever/dive-into-machine-learning/blob/30f6b2c27f23b0d182ef920be26df79a20045e34/readme.md
  47. https://github.com/join?source=prompt-blob-show
  48. https://github.com/rhiever/dive-into-machine-learning
  49. https://github.com/rhiever/dive-into-machine-learning/find/master
  50. https://github.com/rhiever/dive-into-machine-learning/raw/master/readme.md
  51. https://github.com/rhiever/dive-into-machine-learning/blame/master/readme.md
  52. https://github.com/rhiever/dive-into-machine-learning/commits/master/readme.md
  53. http://www.diveintopython.net/
  54. http://www.quora.com/what-is-the-difference-between-data-analytics-data-analysis-data-mining-data-science-machine-learning-and-big-data-1
  55. https://www.python.org/downloads/
  56. https://pip.pypa.io/en/latest/installing.html
  57. http://ipython.org/install.html
  58. https://store.continuum.io/cshop/anaconda/
  59. http://opentechschool.github.io/python-data-intro/core/notebook.html
  60. https://www.youtube.com/watch?v=qb7ft68tca8
  61. http://scikit-learn.org/stable/tutorial/basic/tutorial.html
  62. https://github.com/rhiever/dive-into-machine-learning/blob/master
  63. http://scikit-learn.org/stable/index.html
  64. http://scikit-learn.org/stable/testimonials/testimonials.html
  65. http://scikit-learn.org/stable/index.html
  66. http://homes.cs.washington.edu/~pedrod/papers/cacm12.pdf
  67. http://www.artima.com/intv/simplest3.html
  68. http://c2.com/cgi/wiki?dosimplethings
  69. https://camo.githubusercontent.com/61e30cc7709455dfa780cc2b0bc4d104b52c7e3c/687474703a2f2f69313338312e70686f746f6275636b65742e636f6d2f616c62756d732f61683234302f68616e677477656e74792f53637265656e25323053686f74253230323031352d30332d3035253230617425323031302e30382e3130253230504d5f7a7073716e6c6a6b7174352e706e67
  70. https://www.youtube.com/watch?v=tyvcvzejhhq
  71. http://www.thetalkingmachines.com/
  72. http://www.thetalkingmachines.com/blog/2015/4/23/starting-simple-and-machine-learning-in-meds
  73. http://nbviewer.ipython.org/github/ogrisel/notebooks/blob/master/labeled faces in the wild recognition.ipynb
  74. http://agconti.github.io/kaggle-titanic/
  75. https://github.com/jseabold/538model
  76. http://fivethirtyeight.blogs.nytimes.com/fivethirtyeights-2012-forecast/
  77. http://github.com/hummus
  78. http://nbviewer.ipython.org/github/clicksecurity/data_hacking/blob/master/dga_detection/dga_domain_detection.ipynb
  79. http://nbviewer.ipython.org/github/clicksecurity/data_hacking/blob/master/sql_injection/sql_injection.ipynb
  80. http://nbviewer.ipython.org/github/clicksecurity/data_hacking/blob/master/java_classification/java_classification.ipynb
  81. https://github.com/donnemartin/data-science-ipython-notebooks
  82. http://amueller.github.com/sklearn_tutorial
  83. http://bugra.github.io/work/notes/2014-11-22/an-introduction-to-supervised-learning-scikit-learn/
  84. http://bugra.github.io/work/notes/2014-11-16/an-introduction-to-unsupervised-learning-scikit-learn/
  85. https://github.com/ipython/ipython/wiki/a-gallery-of-interesting-ipython-notebooks#statistics-machine-learning-and-data-science
  86. http://nb.bianp.net/sort/views/
  87. https://www.coursera.org/course/ml
  88. https://github.com/caesar0301/awesome-public-datasets
  89. http://statweb.stanford.edu/~tibs/elemstatlearn/
  90. https://docs.google.com/document/d/1yn6bvdrenayc8b0fjq84yzdflqmeepj7s0xc-9_26r0/
  91. https://www.coursera.org/course/machlearning
  92. https://homes.cs.washington.edu/~pedrod/papers/cacm12.pdf
  93. https://news.ycombinator.com/item?id=9563501
  94. http://strongid136.com/bios8366/lectures.html
  95. http://cs109.github.io/2014/
  96. https://github.com/justmarkham/dat3
  97. http://radimrehurek.com/data_science_python/
  98. http://learnds.com/
  99. https://github.com/donnemartin/data-science-ipython-notebooks
 100. http://pandas.pydata.org/pandas-docs/stable/10min.html
 101. http://nbviewer.ipython.org/github/rasbt/python_reference/blob/master/tutorials/things_in_pandas.ipynb
 102. http://www.swegler.com/becky/blog/2014/08/06/useful-pandas-snippets/
 103. http://pandas.pydata.org/pandas-docs/stable/cookbook.html
 104. http://pandas.pydata.org/pandas-docs/stable/dsintro.html
 105. http://pandas.pydata.org/pandas-docs/stable/dsintro.html#dataframe
 106. http://pandas.pydata.org/pandas-docs/version/0.15.0/reshaping.html
 107. http://pandas.pydata.org/pandas-docs/stable/computation.html
 108. http://stats.stackexchange.com/questions/29713/what-is-covariance-in-plain-language
 109. http://pandas.pydata.org/pandas-docs/stable/groupby.html
 110. http://pandas.pydata.org/pandas-docs/version/0.15.0/visualization.html
 111. http://scikit-learn.org/stable/tutorial/machine_learning_map/
 112. http://hunch.net/?p=2714
 113. http://learnds.com/
 114. http://www.john-foreman.com/data-smart-book.html
 115. http://cacm.acm.org/blogs/blog-cacm/169199-data-science-workflow-overview-and-challenges/fulltext
 116. http://nbviewer.ipython.org/github/jmsteinw/notebooks/blob/master/indeedjobs.ipynb
 117. http://gwulfs.github.io/
 118. https://docs.google.com/document/d/1yn6bvdrenayc8b0fjq84yzdflqmeepj7s0xc-9_26r0
 119. http://www.quora.com/how-do-random-forests-work-in-laymans-terms
 120. https://spark.apache.org/examples.html
 121. https://www.coursera.org/course/neuralnets
 122. http://pybrain.org/
 123. https://nltk.org/
 124. https://github.com/indicodatasolutions/passage
 125. http://bugra.github.io/work/notes/2015-02-21/topic-modeling-for-the-uninitiated/
 126. http://radimrehurek.com/2014/02/id97-tutorial/
 127. https://pystruct.github.io/
 128. https://www.youtube.com/watch?v=s75edacxhkk
 129. http://web.stanford.edu/class/cs246/
 130. http://www.autonlab.org/tutorials/id48.html
 131. https://github.com/hyperopt/hyperopt
 132. http://deeplearning.net/software/theano/tutorial/using_gpu.html
 133. http://deeplearning.net/tutorial/lenet.html
 134. http://camdavidsonpilon.github.io/probabilistic-programming-and-bayesian-methods-for-hackers/
 135. http://stats.stackexchange.com/questions/tagged/machine-learning?sort=frequent&pagesize=15
 136. http://datascience.stackexchange.com/
 137. http://www.reddit.com/r/machinelearning
 138. http://www.quora.com/what-is-the-difference-between-data-analytics-data-analysis-data-mining-data-science-machine-learning-and-big-data-1
 139. https://gitter.im/scikit-learn/scikit-learn
 140. http://homes.cs.washington.edu/~pedrod/papers/cacm12.pdf
 141. http://www.john-foreman.com/blog/surviving-data-science-at-the-speed-of-hype
 142. http://hunch.net/?p=22
 143. https://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/43146.pdf
 144. http://www.john-foreman.com/blog/the-perilous-world-of-machine-learning-for-fun-and-profit-pipeline-jungles-and-hidden-feedback-loops
 145. http://www.kdnuggets.com/2015/01/high-cost-machine-learning-technical-debt.html
 146. https://www.blackhat.com/html/webcast/02192015-secure-because-math.html
 147. https://www.blackhat.com/html/webcast/02192015-secure-because-math.html
 148. https://attendee.gotowebinar.com/recording/80449431422110210
 149. http://www.john-foreman.com/blog/surviving-data-science-at-the-speed-of-hype
 150. https://spark.apache.org/
 151. http://databricks.com/blog/2015/02/17/introducingdataframes-in-spark-for-large-scale-data-science.html
 152. https://www.edx.org/course/scalable-machine-learning-uc-berkeleyx-cs190-1x#.voc70vpf_lq
 153. http://netflix.github.io/#repo
 154. http://techblog.netflix.com/2015/01/introducing-surus-and-scorepmml.html
 155. http://techblog.netflix.com/search/label/big data
 156. http://simplystatistics.org/2014/05/22/10-things-statistics-taught-us-about-big-data-analysis/
 157. http://mloss.org/software/
 158. http://www.kaggle.com/
 159. http://www.kaggle.com/competitions
 160. http://www.kaggle.com/jobs
 161. http://xyclade.github.io/machinelearning/
 162. http://www.jacksimpson.co/2015/06/07/materials-for-learning-machine-learning/
 163. https://docs.google.com/document/d/1yn6bvdrenayc8b0fjq84yzdflqmeepj7s0xc-9_26r0/edit
 164. http://gwulfs.github.io/
 165. https://github.com/site/terms
 166. https://github.com/site/privacy
 167. https://github.com/security
 168. https://githubstatus.com/
 169. https://help.github.com/
 170. https://github.com/contact
 171. https://github.com/pricing
 172. https://developer.github.com/
 173. https://training.github.com/
 174. https://github.blog/
 175. https://github.com/about
 176. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md
 177. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md

   hidden links:
 179. https://github.com/
 180. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md
 181. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md
 182. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md
 183. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#get-your-feet-wet
 184. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#tools-youll-need
 185. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#lets-go
 186. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#what-just-happened
 187. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#immerse-yourself
 188. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#a-few-useful-things-to-know-about-machine-learning
 189. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#talking-machines
 190. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#play-to-learn
 191. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#dive-deeper-coursework
 192. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#your-main-course
 193. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#alternative-main-courses
 194. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#learn-pandas-well
 195. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#cheat-sheets
 196. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#more-topics
 197. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#data-science
 198. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#many-more-specialized-topics
 199. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#questions-answers-chats
 200. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#assorted-opinions-and-other-resources
 201. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#risks
 202. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#an-anecdote-from-a-popular-music-streaming-service
 203. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#machine-learning-in-internet-security
 204. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#big-data
 205. https://github.com/rhiever/dive-into-machine-learning/blob/master/readme.md#et-cetera
 206. https://github.com/
