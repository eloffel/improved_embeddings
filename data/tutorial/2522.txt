   #[1]rss: 40 latest updates [2]rss: 40 newest packages [3]pypi

   [4]skip to main content (button) switch to mobile version

   warning: some features may not work without javascript. please try
   enabling it if you encounter problems.

   [5]pypi
   search pypi ____________________ (button) search

   [6]help [7]donate [8]log in [9]register

   search pypi ____________________ (button) search

goose-extractor 1.0.25

   pip install goose-extractor (button) copy pip instructions
   [10]latest version

   last released: jan 3, 2015

   html content / article extractor, web scrapping

navigation

   [11]project description [12]release history [13]download files

project links

   [14]homepage

statistics

   github statistics: stars: forks: open issues/prs:

   view statistics for this project via [15]libraries.io, or by using
   [16]google bigquery

meta

   license: apache software license (apache)

   author: [17]xavier grangier

   tags: scrapping, extractor, web scrapping

maintainers

   [18]avatar for grangier from gravatar.com [19]grangier

classifiers

   development status
          [20]4 - beta

   environment
          [21]other environment

   intended audience
          [22]developers

   license
          [23]osi approved :: apache software license

   operating system
          [24]macos :: macos x
          [25]microsoft :: windows
          [26]posix

   programming language
          [27]python
          [28]python :: 2
          [29]python :: 2.6
          [30]python :: 2.7

   topic
          [31]internet
          [32]software development :: libraries :: python modules
          [33]utilities

   [34]project description [35]project details [36]release history
   [37]download files

project description

intro

   goose was originally an article extractor written in java that has most
   recently (aug2011) been converted to a [38]scala project.

   this is a complete rewrite in python. the aim of the software is to
   take any news article or article-type web page and not only extract
   what is the main body of the article but also all meta data and most
   probable image candidate.

   goose will try to extract the following information:
     * main text of an article
     * main image of article
     * any youtube/vimeo movies embedded in article
     * meta description
     * meta tags

   the python version was rewritten by:
     * xavier grangier

licensing

   if you find goose useful or have issues please drop me a line. i   d love
   to hear how you   re using it or what features should be improved

   goose is licensed by gravity.com under the apache 2.0 license, see the
   license file for more details

setup

mkvirtualenv --no-site-packages goose
git clone https://github.com/grangier/python-goose.git
cd python-goose
pip install -r requirements.txt
python setup.py install

take it for a spin

>>> from goose import goose
>>> url = 'http://edition.id98.com/2012/02/22/world/europe/uk-occupy-london/index
.html?hpt=ieu_c2'
>>> g = goose()
>>> article = g.extract(url=url)
>>> article.title
u'occupy london loses eviction fight'
>>> article.meta_description
"occupy london protesters who have been camped outside the landmark st. paul's c
athedral for the past four months lost their court bid to avoid eviction wednesd
ay in a decision made by london's court of appeal."
>>> article.cleaned_text[:150]
(id98) -- occupy london protesters who have been camped outside the landmark st.
paul's cathedral for the past four months lost their court bid to avoi
>>> article.top_image.src
http://i2.cdn.turner.com/id98/dam/assets/111017024308-occupy-london-st-paul-s-cat
hedral-story-top.jpg

configuration

   there are two ways to pass configuration to goose. the first one is to
   pass goose a configuration() object. the second one is to pass a
   configuration dict.

   for instance, if you want to change the useragent used by goose just
   pass :
>>> g = goose({'browser_user_agent': 'mozilla'})

   switching parsers : goose can now be use with lxml html parser or lxml
   soup parser. by default the html parser is used. if you want to use the
   soup parser pass it in the configuration dict :
>>> g = goose({'browser_user_agent': 'mozilla', 'parser_class':'soup'})

goose is now language aware

   for example scrapping a spanish content page with correct meta language
   tags
>>> from goose import goose
>>> url = 'http://sociedad.elpais.com/sociedad/2012/10/27/actualidad/1351332873_
157836.html'
>>> g = goose()
>>> article = g.extract(url=url)
>>> article.title
u'las listas de espera se agravan'
>>> article.cleaned_text[:150]
u'los recortes pasan factura a los pacientes. de diciembre de 2010 a junio de 20
12 las listas de espera para operarse aumentaron un 125%. hay m\xe1s ciudad'

   some pages don   t have correct meta language tags, you can force it
   using configuration :
>>> from goose import goose
>>> url = 'http://www.elmundo.es/elmundo/2012/10/28/espana/1351388909.html'
>>> g = goose({'use_meta_language': false, 'target_language':'es'})
>>> article = g.extract(url=url)
>>> article.cleaned_text[:150]
u'importante golpe a la banda terrorista eta en francia. la guardia civil ha det
enido en un hotel de macon, a 70 kil\xf3metros de lyon, a izaskun lesaka y '

   passing {   use_meta_language   : false,    target_language   :   es   } will force
   as configuration will force the spanish language

video extraction

>>> import goose
>>> url = 'http://www.liberation.fr/politiques/2013/08/12/journee-de-jeux-pour-a
yrault-dans-les-jardins-de-matignon_924350'
>>> g = goose.goose({'target_language':'fr'})
>>> article = g.extract(url=url)
>>> article.movies
[<goose.videos.videos.video object at 0x25f60d0>]
>>> article.movies[0].src
'http://sa.kewego.com/embed/vp/?language_code=fr&playerkey=1764a824c13c&configke
y=dcc707ec373f&suffix=&sig=9bc77afb496s&autostart=false'
>>> article.movies[0].embed_code
'<iframe src="http://sa.kewego.com/embed/vp/?language_code=fr&amp;playerkey=1764
a824c13c&amp;configkey=dcc707ec373f&amp;suffix=&amp;sig=9bc77afb496s&amp;autosta
rt=false" frameborder="0" scrolling="no" width="476" height="357"/>'
>>> article.movies[0].embed_type
'iframe'
>>> article.movies[0].width
'476'
>>> article.movies[0].height
'357'

goose in chinese

   some users want to use goose for chinese content. chinese word
   segmentation is way more difficult to deal with than occidental
   languages. chinese needs a dedicated stopword analyser that need to be
   passed to the config object
>>> from goose import goose
>>> from goose.text import stopwordschinese
>>> url  = 'http://www.bbc.co.uk/zhongwen/simp/chinese_news/2012/12/121210_hongk
ong_politics.shtml'
>>> g = goose({'stopwords_class': stopwordschinese})
>>> article = g.extract(url=url)
>>> print article.cleaned_text[:150]
                                                                                                                                                

                        12   10                                                                                                                              

                                                                                                                                 

goose in arabic

   in order to use goose in arabic you have to use the stopwordsarabic
   class.
>>> from goose import goose
>>> from goose.text import stopwordsarabic
>>> url = 'http://arabic.id98.com/2013/middle_east/8/3/syria.clashes/index.html'
>>> g = goose({'stopwords_class': stopwordsarabic})
>>> article = g.extract(url=url)
>>> print article.cleaned_text[:150]
                      (id98) --                                                                                                          
                                        "                   "                                                                  

goose in korean

   in order to use goose in korean you have to use the stopwordskorean
   class.
>>> from goose import goose
>>> from goose.text import stopwordskorean
>>> url='http://news.donga.com/3/all/20131023/58406128/1'
>>> g = goose({'stopwords_class':stopwordskorean})
>>> article = g.extract(url=url)
>>> print article.cleaned_text[:150]
                                                                                        (www.digitalemc.com).
14                                                                                                                                                                  .
                                                                

known issues

     * there are some issues with unicode urls.
     * cookie handling : some websites need cookie handling. at the moment
       the only work around is to use the raw_html extraction. for
       instance ;

>>> import urllib2
>>> import goose
>>> url = "http://www.nytimes.com/2013/08/18/world/middleeast/pressure-by-us-fai
led-to-sway-egypts-leaders.html?hp"
>>> opener = urllib2.build_opener(urllib2.httpcookieprocessor())
>>> response = opener.open(url)
>>> raw_html = response.read()
>>> g = goose.goose()
>>> a = g.extract(raw_html=raw_html)
>>> a.cleaned_text
u'cairo \u2014 for a moment, at least, american and european diplomats trying to
 defuse the volatile standoff in egypt thought they had a breakthrough.\n\nas t'

todo

     * video html5 tag extraction

project details

project links

   [39]homepage

statistics

   github statistics: stars: forks: open issues/prs:

   view statistics for this project via [40]libraries.io, or by using
   [41]google bigquery

meta

   license: apache software license (apache)

   author: [42]xavier grangier

   tags: scrapping, extractor, web scrapping

maintainers

   [43]avatar for grangier from gravatar.com [44]grangier

classifiers

   development status
          [45]4 - beta

   environment
          [46]other environment

   intended audience
          [47]developers

   license
          [48]osi approved :: apache software license

   operating system
          [49]macos :: macos x
          [50]microsoft :: windows
          [51]posix

   programming language
          [52]python
          [53]python :: 2
          [54]python :: 2.6
          [55]python :: 2.7

   topic
          [56]internet
          [57]software development :: libraries :: python modules
          [58]utilities

release history [59]release notifications

   this version
   history node
   [60]

   1.0.25

   jan 3, 2015
   history node
   [61]

   1.0.24

   dec 31, 2014
   history node
   [62]

   1.0.23

   dec 30, 2014
   history node
   [63]

   1.0.22

   sep 14, 2014
   history node
   [64]

   1.0.21

   sep 14, 2014
   history node
   [65]

   1.0.20

   jul 14, 2014
   history node
   [66]

   1.0.19

   jun 29, 2014
   history node
   [67]

   1.0.17

   may 9, 2014
   history node
   [68]

   1.0.15

   may 2, 2014
   history node
   [69]

   1.0.14

   may 2, 2014
   history node
   [70]

   1.0.13

   may 1, 2014
   history node
   [71]

   1.0.12

   apr 23, 2014
   history node
   [72]

   1.0.11

   apr 21, 2014
   history node
   [73]

   1.0.9

   apr 21, 2014
   history node
   [74]

   1.0.8

   feb 2, 2014
   history node
   [75]

   1.0.7

   feb 2, 2014
   history node
   [76]

   1.0.6

   dec 30, 2013
   history node
   [77]

   1.0.2

   aug 12, 2013
   history node
   [78]

   1.0.1

   aug 4, 2013

download files

   download the file for your platform. if you're not sure which to
   choose, learn more about [79]installing packages.
   filename, size & hash [80]sha256 hash help file type python version
   upload date
   [81]goose-extractor-1.0.25.tar.gz (63.0 kb) copy sha256 hash sha256
   source none jan 3, 2015

   logo

     * help
     * [82]installing packages
     * [83]uploading packages
     * [84]user guide
     * [85]faqs

     * about pypi
     * [86]pypi on twitter
     * [87]infrastructure dashboard
     * [88]package index name retention
     * [89]our sponsors

     * contributing to pypi
     * [90]bugs and feedback
     * [91]contribute on github
     * [92]development credits

     * using pypi
     * [93]code of conduct
     * [94]report security issue
     * [95]privacy policy
     * [96]terms of use
     __________________________________________________________________

   status: [97]all systems operational

   developed and maintained by the python community, for the python
   community.
   [98]donate today!

      2019 [99]python software foundation

   (button) desktop version

   supported by
   [100]elastic elastic search [101]pingdom pingdom monitoring [102]google
   google bigquery [103]sentry sentry error logging [104]aws aws cloud
   computing [105]datadog datadog monitoring [106]fastly fastly cdn
   [107]signalfx signalfx supporter [108]digicert digicert ev certificate
   [109]statuspage statuspage status page

references

   1. https://pypi.org/rss/updates.xml
   2. https://pypi.org/rss/packages.xml
   3. https://pypi.org/opensearch.xml
   4. https://pypi.org/project/goose-extractor/#content
   5. https://pypi.org/
   6. https://pypi.org/help/
   7. https://donate.pypi.org/
   8. https://pypi.org/account/login/
   9. https://pypi.org/account/register/
  10. https://pypi.org/project/goose-extractor/
  11. https://pypi.org/project/goose-extractor/#description
  12. https://pypi.org/project/goose-extractor/#history
  13. https://pypi.org/project/goose-extractor/#files
  14. https://github.com/grangier/python-goose
  15. https://libraries.io/pypi/goose-extractor
  16. https://packaging.python.org/guides/analyzing-pypi-package-downloads/
  17. mailto:grangier@gmail.com
  18. https://pypi.org/user/grangier/
  19. https://pypi.org/user/grangier/
  20. https://pypi.org/search/?c=development+status+::+4+-+beta
  21. https://pypi.org/search/?c=environment+::+other+environment
  22. https://pypi.org/search/?c=intended+audience+::+developers
  23. https://pypi.org/search/?c=license+::+osi+approved+::+apache+software+license
  24. https://pypi.org/search/?c=operating+system+::+macos+::+macos+x
  25. https://pypi.org/search/?c=operating+system+::+microsoft+::+windows
  26. https://pypi.org/search/?c=operating+system+::+posix
  27. https://pypi.org/search/?c=programming+language+::+python
  28. https://pypi.org/search/?c=programming+language+::+python+::+2
  29. https://pypi.org/search/?c=programming+language+::+python+::+2.6
  30. https://pypi.org/search/?c=programming+language+::+python+::+2.7
  31. https://pypi.org/search/?c=topic+::+internet
  32. https://pypi.org/search/?c=topic+::+software+development+::+libraries+::+python+modules
  33. https://pypi.org/search/?c=topic+::+utilities
  34. https://pypi.org/project/goose-extractor/#description
  35. https://pypi.org/project/goose-extractor/#data
  36. https://pypi.org/project/goose-extractor/#history
  37. https://pypi.org/project/goose-extractor/#files
  38. https://github.com/gravitylabs/goose
  39. https://github.com/grangier/python-goose
  40. https://libraries.io/pypi/goose-extractor
  41. https://packaging.python.org/guides/analyzing-pypi-package-downloads/
  42. mailto:grangier@gmail.com
  43. https://pypi.org/user/grangier/
  44. https://pypi.org/user/grangier/
  45. https://pypi.org/search/?c=development+status+::+4+-+beta
  46. https://pypi.org/search/?c=environment+::+other+environment
  47. https://pypi.org/search/?c=intended+audience+::+developers
  48. https://pypi.org/search/?c=license+::+osi+approved+::+apache+software+license
  49. https://pypi.org/search/?c=operating+system+::+macos+::+macos+x
  50. https://pypi.org/search/?c=operating+system+::+microsoft+::+windows
  51. https://pypi.org/search/?c=operating+system+::+posix
  52. https://pypi.org/search/?c=programming+language+::+python
  53. https://pypi.org/search/?c=programming+language+::+python+::+2
  54. https://pypi.org/search/?c=programming+language+::+python+::+2.6
  55. https://pypi.org/search/?c=programming+language+::+python+::+2.7
  56. https://pypi.org/search/?c=topic+::+internet
  57. https://pypi.org/search/?c=topic+::+software+development+::+libraries+::+python+modules
  58. https://pypi.org/search/?c=topic+::+utilities
  59. https://pypi.org/help/#project-release-notifications
  60. https://pypi.org/project/goose-extractor/1.0.25/
  61. https://pypi.org/project/goose-extractor/1.0.24/
  62. https://pypi.org/project/goose-extractor/1.0.23/
  63. https://pypi.org/project/goose-extractor/1.0.22/
  64. https://pypi.org/project/goose-extractor/1.0.21/
  65. https://pypi.org/project/goose-extractor/1.0.20/
  66. https://pypi.org/project/goose-extractor/1.0.19/
  67. https://pypi.org/project/goose-extractor/1.0.17/
  68. https://pypi.org/project/goose-extractor/1.0.15/
  69. https://pypi.org/project/goose-extractor/1.0.14/
  70. https://pypi.org/project/goose-extractor/1.0.13/
  71. https://pypi.org/project/goose-extractor/1.0.12/
  72. https://pypi.org/project/goose-extractor/1.0.11/
  73. https://pypi.org/project/goose-extractor/1.0.9/
  74. https://pypi.org/project/goose-extractor/1.0.8/
  75. https://pypi.org/project/goose-extractor/1.0.7/
  76. https://pypi.org/project/goose-extractor/1.0.6/
  77. https://pypi.org/project/goose-extractor/1.0.2/
  78. https://pypi.org/project/goose-extractor/1.0.1/
  79. https://packaging.python.org/installing/
  80. https://pip.pypa.io/en/stable/reference/pip_install/#hash-checking-mode
  81. https://files.pythonhosted.org/packages/ab/f3/2e89688e4e1d8786e542ea460431f24f1392d885e60303dc20d476a96424/goose-extractor-1.0.25.tar.gz
  82. https://packaging.python.org/installing/
  83. https://packaging.python.org/tutorials/packaging-projects/
  84. https://packaging.python.org/
  85. https://pypi.org/help/
  86. https://twitter.com/pypi
  87. https://dtdg.co/pypi
  88. https://www.python.org/dev/peps/pep-0541/
  89. https://pypi.org/sponsors/
  90. https://pypi.org/help/#feedback
  91. https://github.com/pypa/warehouse
  92. https://github.com/pypa/warehouse/graphs/contributors
  93. https://www.pypa.io/en/latest/code-of-conduct/
  94. https://pypi.org/security/
  95. https://www.python.org/privacy/
  96. https://pypi.org/policy/terms-of-use/
  97. https://status.python.org/
  98. https://donate.pypi.org/
  99. https://www.python.org/psf/
 100. https://www.elastic.co/
 101. https://www.pingdom.com/
 102. https://cloud.google.com/
 103. https://getsentry.com/for/python
 104. https://aws.amazon.com/
 105. https://www.datadoghq.com/
 106. https://www.fastly.com/
 107. https://www.signalfx.com/
 108. https://www.digicert.com/
 109. https://statuspage.io/
