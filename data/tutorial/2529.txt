   #[1]github [2]recent commits to fasttext:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]908
     * [35]star [36]17,930
     * [37]fork [38]3,378

[39]facebookresearch/[40]fasttext

   [41]code [42]issues 169 [43]pull requests 45 [44]projects 0
   [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   library for fast text representation and classification.
     * [47]327 commits
     * [48]4 branches
     * [49]3 releases
     * [50]40 contributors
     * [51]mit

    1. [52]html 72.1%
    2. [53]javascript 9.9%
    3. [54]c++ 8.2%
    4. [55]python 5.3%
    5. [56]css 2.1%
    6. [57]shell 2.1%
    7. other 0.3%

   (button) html javascript c++ python css shell other
   branch: master (button) new pull request
   [58]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/f
   [59]download zip

downloading...

   want to be notified of new releases in facebookresearch/fasttext?
   [60]sign in [61]sign up

launching github desktop...

   if nothing happens, [62]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [63]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [64]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [65]download the github extension for visual studio
   and try again.

   (button) go back
   [66]@edouardgrave [67]@facebook-github-bot
   [68]edouardgrave and [69]facebook-github-bot [70]fix broken urls
   (button)    
summary: fix some broken urls in fasttext documentation

reviewed by: ajoulin

differential revision: d14785955

fbshipit-source-id: 34f5c6ffc852471887d99cfa9a9f22f5afca0a1d

   latest commit [71]294daf1 apr 5, 2019
   [72]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [73].circleci [74]update circle-ci debian releases and python images
   apr 1, 2019
   [75]alignment [76]fix broken urls apr 4, 2019
   [77]crawl [78]corrected url for lid models in the scripts to process
   cc. feb 22, 2019
   [79]docs [80]corrected typo in analogy dataset url. mar 22, 2019
   [81]python [82]base class for matrices feb 22, 2019
   [83]scripts [84]re-licensing fasttext to mit dec 18, 2018
   [85]src [86]fix compilation issues on wheezy feb 25, 2019
   [87]tests [88]changing path to publicly-hosted pre-trained files. jan
   25, 2019
   [89]website [90]footer language : default to en ([91]#581[92]) dec 20,
   2018
   [93].gitignore [94]corrected gitignore aug 3, 2016
   [95]cmakelists.txt [96]separating loss and gradient computation from
   model feb 22, 2019
   [97]code_of_conduct.md [98]adding code of conduct file ([99]#769[100])
   mar 28, 2019
   [101]contributing.md [102]re-licensing fasttext to mit dec 18, 2018
   [103]license [104]re-licensing fasttext to mit dec 18, 2018
   [105]manifest.in [106]setup.py to support packaging and replace throw
   with exit nov 28, 2017
   [107]makefile [108]fix makefile feb 22, 2019
   [109]readme.md
   [110]classification-example.sh [111]re-licensing fasttext to mit dec
   18, 2018
   [112]classification-results.sh [113]re-licensing fasttext to mit dec
   18, 2018
   [114]eval.py [115]re-licensing fasttext to mit dec 18, 2018
   [116]get-wikimedia.sh [117]re-licensing fasttext to mit dec 18, 2018
   [118]quantization-example.sh [119]update the readme may 2, 2017
   [120]runtests.py [121]re-licensing fasttext to mit dec 18, 2018
   [122]setup.id18 [123]setup.py to support packaging and replace throw
   with exit nov 28, 2017
   [124]setup.py [125]set environment variable macosx_deployment_target to
   be consistent wi    apr 4, 2019
   [126]wikifil.pl [127]corrected brace escaping in perl script mar 13,
   2017
   [128]word-vector-example.sh [129]re-licensing fasttext to mit dec 18,
   2018

readme.md

fasttext

   [130]fasttext is a library for efficient learning of word
   representations and sentence classification.

   [131]circleci

table of contents

     * [132]resources
          + [133]models
          + [134]supplementary data
          + [135]faq
          + [136]cheatsheet
     * [137]requirements
     * [138]building fasttext
          + [139]getting the source code
          + [140]building fasttext using make (preferred)
          + [141]building fasttext using cmake
          + [142]building fasttext for python
     * [143]example use cases
          + [144]word representation learning
          + [145]obtaining word vectors for out-of-vocabulary words
          + [146]text classification
     * [147]full documentation
     * [148]references
          + [149]enriching word vectors with subword information
          + [150]bag of tricks for efficient text classification
          + [151]fasttext.zip: compressing text classification models
     * [152]join the fasttext community
     * [153]license

resources

models

     * recent state-of-the-art [154]english word vectors.
     * word vectors for [155]157 languages trained on wikipedia and crawl.
     * models for [156]id46 and [157]various supervised
       tasks.

supplementary data

     * the preprocessed [158]yfcc100m data used in [2].

faq

   you can find [159]answers to frequently asked questions on our
   [160]website.

cheatsheet

   we also provide a [161]cheatsheet full of useful one-liners.

requirements

   we are continuously building and testing our library, cli and python
   bindings under various docker images using [162]circleci.

   generally, fasttext builds on modern mac os and linux distributions.
   since it uses some c++11 features, it requires a compiler with good
   c++11 support. these include :
     * (g++-4.7.2 or newer) or (clang-3.3 or newer)

   compilation is carried out using a makefile, so you will need to have a
   working make. if you want to use cmake you need at least version 2.8.9.

   one of the oldest distributions we successfully built and tested the
   cli under is [163]debian jessie.

   for the word-similarity evaluation script you will need:
     * python 2.6 or newer
     * numpy & scipy

   for the python bindings (see the subdirectory python) you will need:
     * python version 2.7 or >=3.4
     * numpy & scipy
     * [164]pybind11

   one of the oldest distributions we successfully built and tested the
   python bindings under is [165]debian jessie.

   if these requirements make it impossible for you to use fasttext,
   please open an issue and we will try to accommodate you.

building fasttext

   we discuss building the latest stable version of fasttext.

getting the source code

   you can find our [166]latest stable release in the usual place.

   there is also the master branch that contains all of our most recent
   work, but comes along with all the usual caveats of an unstable branch.
   you might want to use this if you are a developer or power-user.

building fasttext using make (preferred)

$ wget https://github.com/facebookresearch/fasttext/archive/v0.2.0.zip
$ unzip v0.2.0.zip
$ cd fasttext-0.2.0
$ make

   this will produce object files for all the classes as well as the main
   binary fasttext. if you do not plan on using the default system-wide
   compiler, update the two macros defined at the beginning of the
   makefile (cc and includes).

building fasttext using cmake

   for now this is not part of a release, so you will need to clone the
   master branch.
$ git clone https://github.com/facebookresearch/fasttext.git
$ cd fasttext
$ mkdir build && cd build && cmake ..
$ make && make install

   this will create the fasttext binary and also all relevant libraries
   (shared, static, pic).

building fasttext for python

   for now this is not part of a release, so you will need to clone the
   master branch.
$ git clone https://github.com/facebookresearch/fasttext.git
$ cd fasttext
$ pip install .

   for further information and introduction see python/readme.md

example use cases

   this library has two main use cases: word representation learning and
   text classification. these were described in the two papers [167]1 and
   [168]2.

word representation learning

   in order to learn word vectors, as described in [169]1, do:
$ ./fasttext skipgram -input data.txt -output model

   where data.txt is a training file containing utf-8 encoded text. by
   default the word vectors will take into account character id165s from
   3 to 6 characters. at the end of optimization the program will save two
   files: model.bin and model.vec. model.vec is a text file containing the
   word vectors, one per line. model.bin is a binary file containing the
   parameters of the model along with the dictionary and all hyper
   parameters. the binary file can be used later to compute word vectors
   or to restart the optimization.

obtaining word vectors for out-of-vocabulary words

   the previously trained model can be used to compute word vectors for
   out-of-vocabulary words. provided you have a text file queries.txt
   containing words for which you want to compute vectors, use the
   following command:
$ ./fasttext print-word-vectors model.bin < queries.txt

   this will output word vectors to the standard output, one vector per
   line. this can also be used with pipes:
$ cat queries.txt | ./fasttext print-word-vectors model.bin

   see the provided scripts for an example. for instance, running:
$ ./word-vector-example.sh

   will compile the code, download data, compute word vectors and evaluate
   them on the rare words similarity dataset rw [thang et al. 2013].

text classification

   this library can also be used to train supervised text classifiers, for
   instance for id31. in order to train a text classifier
   using the method described in [170]2, use:
$ ./fasttext supervised -input train.txt -output model

   where train.txt is a text file containing a training sentence per line
   along with the labels. by default, we assume that labels are words that
   are prefixed by the string __label__. this will output two files:
   model.bin and model.vec. once the model was trained, you can evaluate
   it by computing the precision and recall at k (p@k and r@k) on a test
   set using:
$ ./fasttext test model.bin test.txt k

   the argument k is optional, and is equal to 1 by default.

   in order to obtain the k most likely labels for a piece of text, use:
$ ./fasttext predict model.bin test.txt k

   or use predict-prob to also get the id203 for each label
$ ./fasttext predict-prob model.bin test.txt k

   where test.txt contains a piece of text to classify per line. doing so
   will print to the standard output the k most likely labels for each
   line. the argument k is optional, and equal to 1 by default. see
   classification-example.sh for an example use case. in order to
   reproduce results from the paper [171]2, run classification-results.sh,
   this will download all the datasets and reproduce the results from
   table 1.

   if you want to compute vector representations of sentences or
   paragraphs, please use:
$ ./fasttext print-sentence-vectors model.bin < text.txt

   this assumes that the text.txt file contains the paragraphs that you
   want to get vectors for. the program will output one vector
   representation per line in the file.

   you can also quantize a supervised model to reduce its memory usage
   with the following command:
$ ./fasttext quantize -output model

   this will create a .ftz file with a smaller memory footprint. all the
   standard functionality, like test or predict work the same way on the
   quantized models:
$ ./fasttext test model.ftz test.txt

   the quantization procedure follows the steps described in [172]3. you
   can run the script quantization-example.sh for an example.

full documentation

   invoke a command without arguments to list available arguments and
   their default values:
$ ./fasttext supervised
empty input or output path.

the following arguments are mandatory:
  -input              training file path
  -output             output file path

the following arguments are optional:
  -verbose            verbosity level [2]

the following arguments for the dictionary are optional:
  -mincount           minimal number of word occurrences [1]
  -mincountlabel      minimal number of label occurrences [0]
  -wordngrams         max length of word ngram [1]
  -bucket             number of buckets [2000000]
  -minn               min length of char ngram [0]
  -maxn               max length of char ngram [0]
  -t                  sampling threshold [0.0001]
  -label              labels prefix [__label__]

the following arguments for training are optional:
  -lr                 learning rate [0.1]
  -lrupdaterate       change the rate of updates for the learning rate [100]
  -dim                size of word vectors [100]
  -ws                 size of the context window [5]
  -epoch              number of epochs [5]
  -neg                number of negatives sampled [5]
  -loss               id168 {ns, hs, softmax} [softmax]
  -thread             number of threads [12]
  -pretrainedvectors  pretrained word vectors for supervised learning []
  -saveoutput         whether output params should be saved [0]

the following arguments for quantization are optional:
  -cutoff             number of words and ngrams to retain [0]
  -retrain            finetune embeddings if a cutoff is applied [0]
  -qnorm              quantizing the norm separately [0]
  -qout               quantizing the classifier [0]
  -dsub               size of each sub-vector [2]

   defaults may vary by mode. (word-representation modes skipgram and cbow
   use a default -mincount of 5.)

references

   please cite [173]1 if using this code for learning word representations
   or [174]2 if using for text classification.

enriching word vectors with subword information

   [1] p. bojanowski*, e. grave*, a. joulin, t. mikolov, [175]enriching
   word vectors with subword information
@article{bojanowski2017enriching,
  title={enriching word vectors with subword information},
  author={bojanowski, piotr and grave, edouard and joulin, armand and mikolov, t
omas},
  journal={transactions of the association for computational linguistics},
  volume={5},
  year={2017},
  issn={2307-387x},
  pages={135--146}
}

bag of tricks for efficient text classification

   [2] a. joulin, e. grave, p. bojanowski, t. mikolov, [176]bag of tricks
   for efficient text classification
@inproceedings{joulin2017bag,
  title={bag of tricks for efficient text classification},
  author={joulin, armand and grave, edouard and bojanowski, piotr and mikolov, t
omas},
  booktitle={proceedings of the 15th conference of the european chapter of the a
ssociation for computational linguistics: volume 2, short papers},
  month={april},
  year={2017},
  publisher={association for computational linguistics},
  pages={427--431},
}

fasttext.zip: compressing text classification models

   [3] a. joulin, e. grave, p. bojanowski, m. douze, h. j  gou, t. mikolov,
   [177]fasttext.zip: compressing text classification models
@article{joulin2016fasttext,
  title={fasttext.zip: compressing text classification models},
  author={joulin, armand and grave, edouard and bojanowski, piotr and douze, mat
thijs and j{\'e}gou, h{\'e}rve and mikolov, tomas},
  journal={arxiv preprint arxiv:1612.03651},
  year={2016}
}

   (* these authors contributed equally.)

join the fasttext community

     * facebook page:
       [178]https://www.facebook.com/groups/1174547215919768
     * google group:
       [179]https://groups.google.com/forum/#!forum/fasttext-library
     * contact: [180]egrave@fb.com, [181]bojanowski@fb.com,
       [182]ajoulin@fb.com, [183]tmikolov@fb.com

   see the contributing file for information about how to help out.

license

   fasttext is mit-licensed.

     *    2019 github, inc.
     * [184]terms
     * [185]privacy
     * [186]security
     * [187]status
     * [188]help

     * [189]contact github
     * [190]pricing
     * [191]api
     * [192]training
     * [193]blog
     * [194]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [195]reload to refresh your
   session. you signed out in another tab or window. [196]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/facebookresearch/fasttext/commits/master.atom
   3. https://github.com/facebookresearch/fasttext#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/facebookresearch/fasttext
  32. https://github.com/join
  33. https://github.com/login?return_to=/facebookresearch/fasttext
  34. https://github.com/facebookresearch/fasttext/watchers
  35. https://github.com/login?return_to=/facebookresearch/fasttext
  36. https://github.com/facebookresearch/fasttext/stargazers
  37. https://github.com/login?return_to=/facebookresearch/fasttext
  38. https://github.com/facebookresearch/fasttext/network/members
  39. https://github.com/facebookresearch
  40. https://github.com/facebookresearch/fasttext
  41. https://github.com/facebookresearch/fasttext
  42. https://github.com/facebookresearch/fasttext/issues
  43. https://github.com/facebookresearch/fasttext/pulls
  44. https://github.com/facebookresearch/fasttext/projects
  45. https://github.com/facebookresearch/fasttext/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/facebookresearch/fasttext/commits/master
  48. https://github.com/facebookresearch/fasttext/branches
  49. https://github.com/facebookresearch/fasttext/releases
  50. https://github.com/facebookresearch/fasttext/graphs/contributors
  51. https://github.com/facebookresearch/fasttext/blob/master/license
  52. https://github.com/facebookresearch/fasttext/search?l=html
  53. https://github.com/facebookresearch/fasttext/search?l=javascript
  54. https://github.com/facebookresearch/fasttext/search?l=c++
  55. https://github.com/facebookresearch/fasttext/search?l=python
  56. https://github.com/facebookresearch/fasttext/search?l=css
  57. https://github.com/facebookresearch/fasttext/search?l=shell
  58. https://github.com/facebookresearch/fasttext/find/master
  59. https://github.com/facebookresearch/fasttext/archive/master.zip
  60. https://github.com/login?return_to=https://github.com/facebookresearch/fasttext
  61. https://github.com/join?return_to=/facebookresearch/fasttext
  62. https://desktop.github.com/
  63. https://desktop.github.com/
  64. https://developer.apple.com/xcode/
  65. https://visualstudio.github.com/
  66. https://github.com/edouardgrave
  67. https://github.com/facebook-github-bot
  68. https://github.com/facebookresearch/fasttext/commits?author=edouardgrave
  69. https://github.com/facebookresearch/fasttext/commits?author=facebook-github-bot
  70. https://github.com/facebookresearch/fasttext/commit/294daf1c447d1091b5dedc7d669606f5d4527e9c
  71. https://github.com/facebookresearch/fasttext/commit/294daf1c447d1091b5dedc7d669606f5d4527e9c
  72. https://github.com/facebookresearch/fasttext/tree/294daf1c447d1091b5dedc7d669606f5d4527e9c
  73. https://github.com/facebookresearch/fasttext/tree/master/.circleci
  74. https://github.com/facebookresearch/fasttext/commit/36b147d6f071085619dbdd95a5e4e9cd2b0518e3
  75. https://github.com/facebookresearch/fasttext/tree/master/alignment
  76. https://github.com/facebookresearch/fasttext/commit/294daf1c447d1091b5dedc7d669606f5d4527e9c
  77. https://github.com/facebookresearch/fasttext/tree/master/crawl
  78. https://github.com/facebookresearch/fasttext/commit/ddb5e06e3b5bae043e5aec988af05323ecc26393
  79. https://github.com/facebookresearch/fasttext/tree/master/docs
  80. https://github.com/facebookresearch/fasttext/commit/162bae385cd30774634f92c1a841195c2cad9d26
  81. https://github.com/facebookresearch/fasttext/tree/master/python
  82. https://github.com/facebookresearch/fasttext/commit/c35edc3a26b4f0d2b67a18f2f8eb21209a7420a5
  83. https://github.com/facebookresearch/fasttext/tree/master/scripts
  84. https://github.com/facebookresearch/fasttext/commit/7842495a4d64c7a3bb4339d45d6e64321d002ed8
  85. https://github.com/facebookresearch/fasttext/tree/master/src
  86. https://github.com/facebookresearch/fasttext/commit/51e6738d734286251b6ad02e4fdbbcfe5b679382
  87. https://github.com/facebookresearch/fasttext/tree/master/tests
  88. https://github.com/facebookresearch/fasttext/commit/0a5759475265705b485fa9fae4d1186d248049aa
  89. https://github.com/facebookresearch/fasttext/tree/master/website
  90. https://github.com/facebookresearch/fasttext/commit/3c4a3ea5f59480377ad82ad39e7b8b4c10d29280
  91. https://github.com/facebookresearch/fasttext/pull/581
  92. https://github.com/facebookresearch/fasttext/commit/3c4a3ea5f59480377ad82ad39e7b8b4c10d29280
  93. https://github.com/facebookresearch/fasttext/blob/master/.gitignore
  94. https://github.com/facebookresearch/fasttext/commit/569577e38557be9c44cb2b7feeb14b326cfc1266
  95. https://github.com/facebookresearch/fasttext/blob/master/cmakelists.txt
  96. https://github.com/facebookresearch/fasttext/commit/9ddcabd04f2a263b87074dd54cb3f99ed955f2f2
  97. https://github.com/facebookresearch/fasttext/blob/master/code_of_conduct.md
  98. https://github.com/facebookresearch/fasttext/commit/4ad49e97ad4f364fc5eb424df0591ccf042f7c61
  99. https://github.com/facebookresearch/fasttext/pull/769
 100. https://github.com/facebookresearch/fasttext/commit/4ad49e97ad4f364fc5eb424df0591ccf042f7c61
 101. https://github.com/facebookresearch/fasttext/blob/master/contributing.md
 102. https://github.com/facebookresearch/fasttext/commit/7842495a4d64c7a3bb4339d45d6e64321d002ed8
 103. https://github.com/facebookresearch/fasttext/blob/master/license
 104. https://github.com/facebookresearch/fasttext/commit/7842495a4d64c7a3bb4339d45d6e64321d002ed8
 105. https://github.com/facebookresearch/fasttext/blob/master/manifest.in
 106. https://github.com/facebookresearch/fasttext/commit/a0fa139c06957e4e75f45372179287ba4a6671f7
 107. https://github.com/facebookresearch/fasttext/blob/master/makefile
 108. https://github.com/facebookresearch/fasttext/commit/4d6a80b02f721d16a5830a419a51b134d7520539
 109. https://github.com/facebookresearch/fasttext/blob/master/readme.md
 110. https://github.com/facebookresearch/fasttext/blob/master/classification-example.sh
 111. https://github.com/facebookresearch/fasttext/commit/7842495a4d64c7a3bb4339d45d6e64321d002ed8
 112. https://github.com/facebookresearch/fasttext/blob/master/classification-results.sh
 113. https://github.com/facebookresearch/fasttext/commit/7842495a4d64c7a3bb4339d45d6e64321d002ed8
 114. https://github.com/facebookresearch/fasttext/blob/master/eval.py
 115. https://github.com/facebookresearch/fasttext/commit/7842495a4d64c7a3bb4339d45d6e64321d002ed8
 116. https://github.com/facebookresearch/fasttext/blob/master/get-wikimedia.sh
 117. https://github.com/facebookresearch/fasttext/commit/7842495a4d64c7a3bb4339d45d6e64321d002ed8
 118. https://github.com/facebookresearch/fasttext/blob/master/quantization-example.sh
 119. https://github.com/facebookresearch/fasttext/commit/80a49bd724fe41cff6a159a2f88fc58685f0a8f9
 120. https://github.com/facebookresearch/fasttext/blob/master/runtests.py
 121. https://github.com/facebookresearch/fasttext/commit/7842495a4d64c7a3bb4339d45d6e64321d002ed8
 122. https://github.com/facebookresearch/fasttext/blob/master/setup.id18
 123. https://github.com/facebookresearch/fasttext/commit/a0fa139c06957e4e75f45372179287ba4a6671f7
 124. https://github.com/facebookresearch/fasttext/blob/master/setup.py
 125. https://github.com/facebookresearch/fasttext/commit/ebf807422ace063cf27cf841a32e951f5a5b669d
 126. https://github.com/facebookresearch/fasttext/blob/master/wikifil.pl
 127. https://github.com/facebookresearch/fasttext/commit/3e4a9011cc1e346bad6ab390cbea9cc13465f1a8
 128. https://github.com/facebookresearch/fasttext/blob/master/word-vector-example.sh
 129. https://github.com/facebookresearch/fasttext/commit/7842495a4d64c7a3bb4339d45d6e64321d002ed8
 130. https://fasttext.cc/
 131. https://circleci.com/gh/facebookresearch/fasttext/tree/master
 132. https://github.com/facebookresearch/fasttext#resources
 133. https://github.com/facebookresearch/fasttext#models
 134. https://github.com/facebookresearch/fasttext#supplementary-data
 135. https://github.com/facebookresearch/fasttext#faq
 136. https://github.com/facebookresearch/fasttext#cheatsheet
 137. https://github.com/facebookresearch/fasttext#requirements
 138. https://github.com/facebookresearch/fasttext#building-fasttext
 139. https://github.com/facebookresearch/fasttext#getting-the-source-code
 140. https://github.com/facebookresearch/fasttext#building-fasttext-using-make-preferred
 141. https://github.com/facebookresearch/fasttext#building-fasttext-using-cmake
 142. https://github.com/facebookresearch/fasttext#building-fasttext-for-python
 143. https://github.com/facebookresearch/fasttext#example-use-cases
 144. https://github.com/facebookresearch/fasttext#word-representation-learning
 145. https://github.com/facebookresearch/fasttext#obtaining-word-vectors-for-out-of-vocabulary-words
 146. https://github.com/facebookresearch/fasttext#text-classification
 147. https://github.com/facebookresearch/fasttext#full-documentation
 148. https://github.com/facebookresearch/fasttext#references
 149. https://github.com/facebookresearch/fasttext#enriching-word-vectors-with-subword-information
 150. https://github.com/facebookresearch/fasttext#bag-of-tricks-for-efficient-text-classification
 151. https://github.com/facebookresearch/fasttext#fasttextzip-compressing-text-classification-models
 152. https://github.com/facebookresearch/fasttext#join-the-fasttext-community
 153. https://github.com/facebookresearch/fasttext#license
 154. https://fasttext.cc/docs/en/english-vectors.html
 155. https://github.com/facebookresearch/fasttext/blob/master/docs/crawl-vectors.md
 156. https://fasttext.cc/docs/en/language-identification.html#content
 157. https://fasttext.cc/docs/en/supervised-models.html#content
 158. https://fasttext.cc/docs/en/dataset.html#content
 159. https://fasttext.cc/docs/en/faqs.html#content
 160. https://fasttext.cc/
 161. https://fasttext.cc/docs/en/cheatsheet.html#content
 162. https://circleci.com/
 163. https://www.debian.org/releases/jessie/
 164. https://github.com/pybind/pybind11
 165. https://www.debian.org/releases/jessie/
 166. https://github.com/facebookresearch/fasttext/releases/latest
 167. https://github.com/facebookresearch/fasttext#enriching-word-vectors-with-subword-information
 168. https://github.com/facebookresearch/fasttext#bag-of-tricks-for-efficient-text-classification
 169. https://github.com/facebookresearch/fasttext#enriching-word-vectors-with-subword-information
 170. https://github.com/facebookresearch/fasttext#bag-of-tricks-for-efficient-text-classification
 171. https://github.com/facebookresearch/fasttext#bag-of-tricks-for-efficient-text-classification
 172. https://github.com/facebookresearch/fasttext#fasttextzip-compressing-text-classification-models
 173. https://github.com/facebookresearch/fasttext#enriching-word-vectors-with-subword-information
 174. https://github.com/facebookresearch/fasttext#bag-of-tricks-for-efficient-text-classification
 175. https://arxiv.org/abs/1607.04606
 176. https://arxiv.org/abs/1607.01759
 177. https://arxiv.org/abs/1612.03651
 178. https://www.facebook.com/groups/1174547215919768
 179. https://groups.google.com/forum/#!forum/fasttext-library
 180. mailto:egrave@fb.com
 181. mailto:bojanowski@fb.com
 182. mailto:ajoulin@fb.com
 183. mailto:tmikolov@fb.com
 184. https://github.com/site/terms
 185. https://github.com/site/privacy
 186. https://github.com/security
 187. https://githubstatus.com/
 188. https://help.github.com/
 189. https://github.com/contact
 190. https://github.com/pricing
 191. https://developer.github.com/
 192. https://training.github.com/
 193. https://github.blog/
 194. https://github.com/about
 195. https://github.com/facebookresearch/fasttext
 196. https://github.com/facebookresearch/fasttext

   hidden links:
 198. https://github.com/
 199. https://github.com/facebookresearch/fasttext
 200. https://github.com/facebookresearch/fasttext
 201. https://github.com/facebookresearch/fasttext
 202. https://help.github.com/articles/which-remote-url-should-i-use
 203. https://github.com/facebookresearch/fasttext#fasttext
 204. https://github.com/facebookresearch/fasttext#table-of-contents
 205. https://github.com/facebookresearch/fasttext#resources
 206. https://github.com/facebookresearch/fasttext#models
 207. https://github.com/facebookresearch/fasttext#supplementary-data
 208. https://github.com/facebookresearch/fasttext#faq
 209. https://github.com/facebookresearch/fasttext#cheatsheet
 210. https://github.com/facebookresearch/fasttext#requirements
 211. https://github.com/facebookresearch/fasttext#building-fasttext
 212. https://github.com/facebookresearch/fasttext#getting-the-source-code
 213. https://github.com/facebookresearch/fasttext#building-fasttext-using-make-preferred
 214. https://github.com/facebookresearch/fasttext#building-fasttext-using-cmake
 215. https://github.com/facebookresearch/fasttext#building-fasttext-for-python
 216. https://github.com/facebookresearch/fasttext#example-use-cases
 217. https://github.com/facebookresearch/fasttext#word-representation-learning
 218. https://github.com/facebookresearch/fasttext#obtaining-word-vectors-for-out-of-vocabulary-words
 219. https://github.com/facebookresearch/fasttext#text-classification
 220. https://github.com/facebookresearch/fasttext#full-documentation
 221. https://github.com/facebookresearch/fasttext#references
 222. https://github.com/facebookresearch/fasttext#enriching-word-vectors-with-subword-information
 223. https://github.com/facebookresearch/fasttext#bag-of-tricks-for-efficient-text-classification
 224. https://github.com/facebookresearch/fasttext#fasttextzip-compressing-text-classification-models
 225. https://github.com/facebookresearch/fasttext#join-the-fasttext-community
 226. https://github.com/facebookresearch/fasttext#license
 227. https://github.com/
