   #[1]github [2]recent commits to langid.py:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]58
     * [35]star [36]1,259
     * [37]fork [38]216

[39]saffsd/[40]langid.py

   [41]code [42]issues 15 [43]pull requests 2 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   stand-alone id46 system
     * [47]242 commits
     * [48]5 branches
     * [49]0 releases
     * [50]fetching contributors
     * [51]view license

    1. [52]python 100.0%

   (button) python
   branch: master (button) new pull request
   [53]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/s
   [54]download zip

downloading...

   want to be notified of new releases in saffsd/langid.py?
   [55]sign in [56]sign up

launching github desktop...

   if nothing happens, [57]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [58]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [59]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [60]download the github extension for visual studio
   and try again.

   (button) go back
   [61]@saffsd
   [62]saffsd [63]merge pull request [64]#61 [65]from paczesiowa/master
   (button)    
optimize id172 - slight change in output (epsilon ~e-18), about 30x spee
dup on relevant code.

   latest commit [66]4153583 jul 15, 2017
   [67]permalink
   type      name         latest commit message   commit time
        failed to load latest commit information.
        [68]langid     [69]optimize id172 jul 9, 2017
        [70]features
        [71]license
        [72]readme.rst
        [73]setup.id18
        [74]setup.py   [75]version bump to 1.1.6  apr 5, 2016

readme.rst

langid.py readme

introduction

   langid.py is a standalone id46 (langid) tool.

   the design principles are as follows:
    1. fast
    2. pre-trained over a large number of languages (currently 97)
    3. not sensitive to domain-specific features (e.g. html/xml markup)
    4. single .py file with minimal dependencies
    5. deployable as a web service

   all that is required to run langid.py is >= python 2.7 and numpy. the
   main script langid/langid.py is cross-compatible with both python2 and
   python3, but the accompanying training tools are still python2-only.

   langid.py is wsgi-compliant. langid.py will use fapws3 as a web server
   if available, and default to wsgiref.simple_server otherwise.

   langid.py comes pre-trained on 97 languages (iso 639-1 codes given):

     af, am, an, ar, as, az, be, bg, bn, br, bs, ca, cs, cy, da, de, dz,
     el, en, eo, es, et, eu, fa, fi, fo, fr, ga, gl, gu, he, hi, hr, ht,
     hu, hy, id, is, it, ja, jv, ka, kk, km, kn, ko, ku, ky, la, lb, lo,
     lt, lv, mg, mk, ml, mn, mr, ms, mt, nb, ne, nl, nn, no, oc, or, pa,
     pl, ps, pt, qu, ro, ru, rw, se, si, sk, sl, sq, sr, sv, sw, ta, te,
     th, tl, tr, ug, uk, ur, vi, vo, wa, xh, zh, zu

   the training data was drawn from 5 different sources:
     * jrc-acquis
     * clueweb 09
     * wikipedia
     * reuters rcv2
     * debian i18n

usage

     langid.py [options]

   options:

   -h, --help
   show this help message and exit
   -s, --serve
   launch web service
   --host=host
   host/ip to bind to
   --port=port
   port to listen on
   -v
   increase verbosity (repeat for greater effect)
   -m model
   load model from file
   -l langs, --langs=langs
     comma-separated set of target iso639 language codes (e.g en,de)
   -r, --remote
   auto-detect ip address for remote access
   -b, --batch
   specify a list of files on the command line
   --demo
   launch an in-browser demo application
   -d, --dist
   show full distribution over languages
   -u url, --url=url
     langid of url
   --line
   process pipes line-by-line rather than as a document
   -n, --normalize
     normalize confidence scores to id203 values

   the simplest way to use langid.py is as a command-line tool, and you
   can invoke using python langid.py. if you installed langid.py as a
   python module (e.g. via pip install langid), you can invoke langid
   instead of python langid.py -n (the two are equivalent). this will
   cause a prompt to display. enter text to identify, and hit enter:
>>> this is a test
('en', -54.41310358047485)
>>> questa e una prova
('it', -35.41771221160889)

   langid.py can also detect when the input is redirected (only tested
   under linux), and in this case will process until eof rather than until
   newline like in interactive mode:
python langid.py < readme.rst
('en', -22552.496054649353)

   the value returned is the unnormalized id203 estimate for the
   language. calculating the exact id203 estimate is disabled by
   default, but can be enabled through a flag:
python langid.py -n < readme.rst
('en', 1.0)

   more details are provided in this readme in the section on id203
   id172.

   you can also use langid.py as a python library:
# python
python 2.7.2+ (default, oct  4 2011, 20:06:09)
[gcc 4.6.1] on linux2
type "help", "copyright", "credits" or "license" for more information.
>>> import langid
>>> langid.classify("this is a test")
('en', -54.41310358047485)

   finally, langid.py can use python's built-in wsgiref.simple_server (or
   fapws3 if available) to provide id46 as a web
   service. to do this, launch python langid.py -s, and access
   [76]http://localhost:9008/detect . the web service supports get, post
   and put. if get is performed with no data, a simple html forms
   interface is displayed.

   the response is generated in json, here is an example:
{"responsedata": {"confidence": -54.41310358047485, "language": "en"}, "response
details": null, "responsestatus": 200}

   a utility such as curl can be used to access the web service:
# curl -d "q=this is a test" localhost:9008/detect
{"responsedata": {"confidence": -54.41310358047485, "language": "en"}, "response
details": null, "responsestatus": 200}

   you can also use http put:
# curl -t readme.rst localhost:9008/detect
  % total    % received % xferd  average speed   time    time     time  current
                               dload  upload   total   spent    left  speed
100  2871  100   119  100  2752    117   2723  0:00:01  0:00:01 --:--:--  2727
{"responsedata": {"confidence": -22552.496054649353, "language": "en"}, "respons
edetails": null, "responsestatus": 200}

   if no "q=xxx" key-value pair is present in the http post payload,
   langid.py will interpret the entire file as a single query. this allows
   for redirection via curl:
# echo "this is a test" | curl -d @- localhost:9008/detect
{"responsedata": {"confidence": -54.41310358047485, "language": "en"}, "response
details": null, "responsestatus": 200}

   langid.py will attempt to discover the host ip address automatically.
   often, this is set to localhost(127.0.1.1), even though the machine has
   a different external ip address. langid.py can attempt to automatically
   discover the external ip address. to enable this functionality, start
   langid.py with the -r flag.

   langid.py supports constraining of the output language set using the -l
   flag and a comma-separated list of iso639-1 language codes (the -n flag
   enables id203 id172):
# python langid.py -n -l it,fr
>>> io non parlo italiano
('it', 0.99999999988965627)
>>> je ne parle pas fran  ais
('fr', 1.0)
>>> i don't speak english
('it', 0.92210605672341062)

   when using langid.py as a library, the set_languages method can be used
   to constrain the language set:
python
python 2.7.2+ (default, oct  4 2011, 20:06:09)
[gcc 4.6.1] on linux2
type "help", "copyright", "credits" or "license" for more information.
>>> import langid
>>> langid.classify("i do not speak english")
('en', 0.57133487679900674)
>>> langid.set_languages(['de','fr','it'])
>>> langid.classify("i do not speak english")
('it', 0.99999835791478453)
>>> langid.set_languages(['en','it'])
>>> langid.classify("i do not speak english")
('en', 0.99176190378750373)

batch mode

   langid.py supports batch mode processing, which can be invoked with the
   -b flag. in this mode, langid.py reads a list of paths to files to
   classify as arguments. if no arguments are supplied, langid.py reads
   the list of paths from stdin, this is useful for using langid.py with
   unix utilities such as find.

   in batch mode, langid.py uses multiprocessing to invoke multiple
   instances of the classifier, utilizing all available cpus to classify
   documents in parallel.

id203 id172

   the probabilistic model implemented by langid.py involves the
   multiplication of a large number of probabilities. for computational
   reasons, the actual calculations are implemented in the log-id203
   space (a common numerical technique for dealing with vanishingly small
   probabilities). one side-effect of this is that it is not necessary to
   compute a full id203 in order to determine the most probable
   language in a set of candidate languages. however, users sometimes find
   it helpful to have a "confidence" score for the id203 prediction.
   thus, langid.py implements a re-id172 that produces an output
   in the 0-1 range.

   langid.py disables id203 id172 by default. for
   command-line usages of langid.py, it can be enabled by passing the -n
   flag. for id203 id172 in library use, the user must
   instantiate their own languageidentifier. an example of such usage is
   as follows:
>> from langid.langid import languageidentifier, model
>> identifier = languageidentifier.from_modelstring(model, norm_probs=true)
>> identifier.classify("this is a test")
('en', 0.9999999909903544)

training a model

   we provide a full set of training tools to train a model for langid.py
   on user-supplied data. the system is parallelized to fully utilize
   modern multiprocessor machines, using a sharding technique similar to
   mapreduce to allow parallelization while running in constant memory.

   the full training can be performed using the tool train.py. for
   research purposes, the process has been broken down into indiviual
   steps, and command-line drivers for each step are provided. this allows
   the user to inspect the intermediates produced, and also allows for
   some parameter tuning without repeating some of the more expensive
   steps in the computation. by far the most expensive step is the
   computation of information gain, which will make up more than 90% of
   the total computation time.

   the tools are:
    1. index.py - index a corpus. produce a list of file, corpus, language
       pairs.
    2. tokenize.py - take an index and tokenize the corresponding files
    3. dffeatureselect.py - choose features by document frequency
    4. igweight.py - compute the ig weights for language and for domain
    5. ldfeatureselect.py - take the ig weights and use them to select a
       feature set
    6. scanner.py - build a scanner on the basis of a feature set
    7. nbtrain.py - learn nb parameters using an indexed corpus and a
       scanner

   the tools can be found in langid/train subfolder.

   each tool can be called with --help as the only parameter to provide an
   overview of the functionality.

   to train a model, we require multiple corpora of monolingual documents.
   each document should be a single file, and each file should be in a
   2-deep folder hierarchy, with language nested within domain. for
   example, we may have a number of english files:

     ./corpus/domain1/en/file1.txt ./corpus/domainx/en/001-file.xml

   to use default settings, very few parameters need to be provided. given
   a corpus in the format described above at ./corpus, the following is an
   example set of invocations that would result in a model being trained,
   with a brief description of what each step does.

   to build a list of training documents:
python index.py ./corpus

   this will create a directory corpus.model, and produces a list of paths
   to documents in the corpus, with their associated language and domain.

   we then tokenize the files using the default byte id165 tokenizer:
python tokenize.py corpus.model

   this runs each file through the tokenizer, tabulating the frequency of
   each token according to language and domain. this information is
   distributed into buckets according to a hash of the token, such that
   all the counts for any given token will be in the same bucket.

   the next step is to identify the most frequent tokens by document
   frequency:
python dffeatureselect.py corpus.model

   this sums up the frequency counts per token in each bucket, and
   produces a list of the highest-df tokens for use in the ig calculation
   stage. note that this implementation of dffeatureselect assumes byte
   id165 id121, and will thus select a fixed number of features
   per ngram order. if id121 is replaced with a word-based
   tokenizer, this should be replaced accordingly.

   we then compute the ig weights of each of the top features by df. this
   is computed separately for domain and for language:
python igweight.py -d corpus.model
python igweight.py -lb corpus.model

   based on the ig weights, we compute the ld score for each token:
python ldfeatureselect.py corpus.model

   this produces the final list of ld features to use for building the nb
   model.

   we then assemble the scanner:
python scanner.py corpus.model

   the scanner is a compiled dfa over the set of features that can be used
   to count the number of times each of the features occurs in a document
   in a single pass over the document. this dfa is built using
   aho-corasick string matching.

   finally, we learn the actual naive bayes parameters:
python nbtrain.py corpus.model

   this performs a second pass over the entire corpus, tokenizing it with
   the scanner from the previous step, and computing the naive bayes
   parameters p(c) and p(t|c). it then compiles the parameters and the
   scanner into a model compatible with langid.py.

   in this example, the final model will be at the following path:
./corpus.model/model

   this model can then be used in langid.py by invoking it with the -m
   command-line option as follows:

     python langid.py -m ./corpus.model/model

   it is also possible to edit langid.py directly to embed the new model
   string.

read more

   langid.py is based on our published research. [1] describes the ld
   feature selection technique in detail, and [2] provides more detail
   about the module langid.py itself. [3] compares the speed of langid.py
   to google's chrome cld2, as well as my own pure-c implementation and
   the authors' implementation on specialized hardware.

   [1] lui, marco and timothy baldwin (2011) cross-domain feature
   selection for id46, in proceedings of the fifth
   international joint conference on natural language processing (ijcnlp
   2011), chiang mai, thailand, pp. 553   561. available from
   [77]http://www.aclweb.org/anthology/i11-1062

   [2] lui, marco and timothy baldwin (2012) langid.py: an off-the-shelf
   id46 tool, in proceedings of the 50th annual meeting
   of the association for computational linguistics (acl 2012), demo
   session, jeju, republic of korea. available from
   [78]www.aclweb.org/anthology/p12-3005

   [3] kenneth heafield and rohan kshirsagar and santiago barona (2015)
   id46 and modeling in specialized hardware, in
   proceedings of the 53rd annual meeting of the association for
   computational linguistics and the 7th international joint conference on
   natural language processing (volume 2: short papers). available from
   [79]http://aclweb.org/anthology/p15-2063

contact

   marco lui <[80]saffsd@gmail.com>

   i appreciate any feedback, and i'm particularly interested in hearing
   about places where langid.py is being used. i would love to know more
   about situations where you have found that langid.py works well, and
   about any shortcomings you may have found.

acknowledgements

   thanks to aitzol for help with packaging langid.py for pypi. thanks to
   pquentin for suggestions and improvements to packaging.

related implementations

   dawid weiss has ported langid.py to java, with a particular focus on
   speed and memory use. available from
   [81]https://github.com/carrotsearch/langid-java

   i have written a pure-c version of langid.py, which an external
   evaluation (see read more) has found to be up to 20x as fast as the
   pure python implementation here. available from
   [82]https://github.com/saffsd/langid.c

   i have also written a javascript version of langid.py which runs
   entirely in the browser. available from
   [83]https://github.com/saffsd/langid.js

changelog

   v1.0:

          + initial release

   v1.1:

          + reorganized internals to implement a languageidentifier class

   v1.1.2:

          + added a 'langid' entry point

   v1.1.3:

          + made classify and rank return python data types rather than
            numpy ones

   v1.1.4:

          + added set_languages to __init__.py, fixing #10 (and properly
            fixing #8)

   v1.1.5:

          + remove dev tag
          + add pypi classifiers, fixing #34 (thanks to pquentin)

   v1.1.6:

          + make nb_numfeats an int, fixes #46, thanks to @remibolcom

     *    2019 github, inc.
     * [84]terms
     * [85]privacy
     * [86]security
     * [87]status
     * [88]help

     * [89]contact github
     * [90]pricing
     * [91]api
     * [92]training
     * [93]blog
     * [94]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [95]reload to refresh your
   session. you signed out in another tab or window. [96]reload to refresh
   your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/saffsd/langid.py/commits/master.atom
   3. https://github.com/saffsd/langid.py#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/saffsd/langid.py
  32. https://github.com/join
  33. https://github.com/login?return_to=/saffsd/langid.py
  34. https://github.com/saffsd/langid.py/watchers
  35. https://github.com/login?return_to=/saffsd/langid.py
  36. https://github.com/saffsd/langid.py/stargazers
  37. https://github.com/login?return_to=/saffsd/langid.py
  38. https://github.com/saffsd/langid.py/network/members
  39. https://github.com/saffsd
  40. https://github.com/saffsd/langid.py
  41. https://github.com/saffsd/langid.py
  42. https://github.com/saffsd/langid.py/issues
  43. https://github.com/saffsd/langid.py/pulls
  44. https://github.com/saffsd/langid.py/projects
  45. https://github.com/saffsd/langid.py/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/saffsd/langid.py/commits/master
  48. https://github.com/saffsd/langid.py/branches
  49. https://github.com/saffsd/langid.py/releases
  50. https://github.com/saffsd/langid.py/graphs/contributors
  51. https://github.com/saffsd/langid.py/blob/master/license
  52. https://github.com/saffsd/langid.py/search?l=python
  53. https://github.com/saffsd/langid.py/find/master
  54. https://github.com/saffsd/langid.py/archive/master.zip
  55. https://github.com/login?return_to=https://github.com/saffsd/langid.py
  56. https://github.com/join?return_to=/saffsd/langid.py
  57. https://desktop.github.com/
  58. https://desktop.github.com/
  59. https://developer.apple.com/xcode/
  60. https://visualstudio.github.com/
  61. https://github.com/saffsd
  62. https://github.com/saffsd/langid.py/commits?author=saffsd
  63. https://github.com/saffsd/langid.py/commit/4153583eaeeadd88212a69ab5fa61a41283ae59b
  64. https://github.com/saffsd/langid.py/pull/61
  65. https://github.com/saffsd/langid.py/commit/4153583eaeeadd88212a69ab5fa61a41283ae59b
  66. https://github.com/saffsd/langid.py/commit/4153583eaeeadd88212a69ab5fa61a41283ae59b
  67. https://github.com/saffsd/langid.py/tree/4153583eaeeadd88212a69ab5fa61a41283ae59b
  68. https://github.com/saffsd/langid.py/tree/master/langid
  69. https://github.com/saffsd/langid.py/commit/c17520cd8fea8dc848a56205749a77dd4f7f75bd
  70. https://github.com/saffsd/langid.py/blob/master/features
  71. https://github.com/saffsd/langid.py/blob/master/license
  72. https://github.com/saffsd/langid.py/blob/master/readme.rst
  73. https://github.com/saffsd/langid.py/blob/master/setup.id18
  74. https://github.com/saffsd/langid.py/blob/master/setup.py
  75. https://github.com/saffsd/langid.py/commit/d1bb7811421861e7e14aef39292860f9a0931211
  76. http://localhost:9008/detect
  77. http://www.aclweb.org/anthology/i11-1062
  78. http://www.aclweb.org/anthology/p12-3005
  79. http://aclweb.org/anthology/p15-2063
  80. mailto:saffsd@gmail.com
  81. https://github.com/carrotsearch/langid-java
  82. https://github.com/saffsd/langid.c
  83. https://github.com/saffsd/langid.js
  84. https://github.com/site/terms
  85. https://github.com/site/privacy
  86. https://github.com/security
  87. https://githubstatus.com/
  88. https://help.github.com/
  89. https://github.com/contact
  90. https://github.com/pricing
  91. https://developer.github.com/
  92. https://training.github.com/
  93. https://github.blog/
  94. https://github.com/about
  95. https://github.com/saffsd/langid.py
  96. https://github.com/saffsd/langid.py

   hidden links:
  98. https://github.com/
  99. https://github.com/saffsd/langid.py
 100. https://github.com/saffsd/langid.py
 101. https://github.com/saffsd/langid.py
 102. https://help.github.com/articles/which-remote-url-should-i-use
 103. https://github.com/saffsd/langid.py#langidpy-readme
 104. https://github.com/saffsd/langid.py#introduction
 105. https://github.com/saffsd/langid.py#usage
 106. https://github.com/saffsd/langid.py#batch-mode
 107. https://github.com/saffsd/langid.py#id203-id172
 108. https://github.com/saffsd/langid.py#training-a-model
 109. https://github.com/saffsd/langid.py#read-more
 110. https://github.com/saffsd/langid.py#contact
 111. https://github.com/saffsd/langid.py#acknowledgements
 112. https://github.com/saffsd/langid.py#related-implementations
 113. https://github.com/saffsd/langid.py#changelog
 114. https://github.com/
