   (button) toggle navigation [1]colah's blog
     * [2]blog
     * [3]about
     * [4]contact

data.list recursion illustrated

   posted on february 12, 2015

   [5]functional programming, [6]haskell, [7]visualization

   data.list is a standard haskell library. it provides lots of really
   helpful functions for working with lists.

   in particular, data.list provides functions for particular patterns of
   recursion on lists. some of them, such as map, are familiar to many
   programmers. but there are lots of subtle variations, and it   s hard to
   keep them all straight.

   the goal of this blog post is to provide a convenient reference to
   quickly understand all these different functions, with a couple of
   pretty pictures.

folds

   folds combine all the elements of a list into a single value. for
   example, if you want to add up all the elements of a list you could
   fold the addition function over the list.

   there are two choices one needs to make when doing a fold:
     * should i start on the right side, or the left side?
     * do i have a starting value? (for example, if i   m adding up the
       numbers in a list, i can start with zero and add each new value.)

   there are four versions of fold, corresponding to each pair of choices.

foldl

   foldl
     __________________________________________________________________

   foldl :: (b -> a -> b)

   -> b -> [a] -> b

foldr

   foldr
     __________________________________________________________________

   foldr :: (a -> b -> b)

   -> b -> [a] -> b

foldl1

   foldl1
     __________________________________________________________________

   foldl1 :: (a -> a -> a)

   -> [a] -> a

foldr1

   foldr1
     __________________________________________________________________

   foldr1 :: (a -> a -> a)

   -> [a] -> a

scans

   scans are kind of like folds with history. as they combine the elements
   of the input list, they remember every intermediary step and produce a
   list from those.

   there is a scan corresponding to every version of fold.

scanl

   scanl
     __________________________________________________________________

   scanl :: (b -> a -> b)

   -> b -> [a] -> [b]

scanr

   scanr
     __________________________________________________________________

   scanr :: (a -> b -> b)

   -> b -> [a] -> [b]

scanl1

   scanl1
     __________________________________________________________________

   scanl1 :: (a -> a -> a)

   -> [a] -> [a]

scanr1

   scanr1
     __________________________________________________________________

   scanr1 :: (a -> a -> a)

   -> [a] -> [a]

maps

   maps look at every element of a list and produce a corresponding
   output.

   the basic map function just looks at the list element, but there are
   also accumulating maps that either get information from the left or
   right.

map

   map
     __________________________________________________________________

   map :: (a -> c) -> [a] -> [c]

mapaccuml

   mapaccuml
     __________________________________________________________________

   mapaccuml ::

   (b -> a -> (b, c)) ->

   b -> [a] -> (b, [c])

mapaccumr

   mapaccumr
     __________________________________________________________________

   mapaccumr ::

   (b -> a -> (b, c)) ->

   b -> [a] -> (b, [c])

   accumulating maps are kind of elegant because they contain a lot of
   other functions. for example, if you let \(b=()\), you get regular map.
   and if you let \(c=()\) you get foldr/foldl. finally, if you let
   \(a=()\), you get something very close to unfold from the following
   section.

unfolds

   where folds take a list and produce a single value, unfolds take a
   single value and produce a list.

   data.list only provides unfoldr. it is called unfoldr because it is the
   dual of foldr, even though it actually starts on the left.

n/a

unfoldr

   unfoldr
     __________________________________________________________________

   unfoldr :: (b -> maybe (c, b))

   -> b -> [c]
   subscribe to the [8]rss feed. built by [9]oinkina with [10]hakyll using
   [11]bootstrap, [12]mathjax, and [13]disqus.

   enable javascript for footnotes, disqus comments, and other cool stuff.

references

   visible links
   1. http://colah.github.io/
   2. http://colah.github.io/
   3. http://colah.github.io/about.html
   4. http://colah.github.io/contact.html
   5. http://colah.github.io/posts/tags/functional_programming.html
   6. http://colah.github.io/posts/tags/haskell.html
   7. http://colah.github.io/posts/tags/visualization.html
   8. http://colah.github.io/rss.xml
   9. https://github.com/oinkina
  10. http://jaspervdj.be/hakyll
  11. http://getbootstrap.com/
  12. http://www.mathjax.org/
  13. http://disqus.com/

   hidden links:
  15. https://hackage.haskell.org/package/base-4.7.0.2/docs/data-list.html#v:foldl
  16. https://hackage.haskell.org/package/base-4.7.0.2/docs/data-list.html#v:foldr
  17. https://hackage.haskell.org/package/base-4.7.0.2/docs/data-list.html#v:foldl1
  18. https://hackage.haskell.org/package/base-4.7.0.2/docs/data-list.html#v:foldr1
  19. https://hackage.haskell.org/package/base-4.7.0.2/docs/data-list.html#v:scanl
  20. https://hackage.haskell.org/package/base-4.7.0.2/docs/data-list.html#v:scanr
  21. https://hackage.haskell.org/package/base-4.7.0.2/docs/data-list.html#v:scanl1
  22. https://hackage.haskell.org/package/base-4.7.0.2/docs/data-list.html#v:scanr1
  23. https://hackage.haskell.org/package/base-4.7.0.2/docs/data-list.html#v:map
  24. https://hackage.haskell.org/package/base-4.7.0.2/docs/data-list.html#v:mapaccuml
  25. https://hackage.haskell.org/package/base-4.7.0.2/docs/data-list.html#v:mapaccumr
  26. https://hackage.haskell.org/package/base-4.7.0.2/docs/data-list.html#v:unfoldr
