   #[1]github [2]recent commits to fasttext.py:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]49
     * [35]star [36]992
     * [37]fork [38]231

[39]salestock/[40]fasttext.py

   [41]code [42]issues 59 [43]pull requests 7 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   a python interface for facebook fasttext
   [47]text-classification [48]fasttext [49]classifier
   [50]machine-learning [51]facebook-fasttext
     * [52]183 commits
     * [53]3 branches
     * [54]16 releases
     * [55]fetching contributors
     * [56]bsd-3-clause

    1. [57]c++ 54.5%
    2. [58]python 32.8%
    3. [59]shell 5.9%
    4. [60]makefile 5.2%
    5. [61]perl 1.6%

   (button) c++ python shell makefile perl
   branch: master (button) new pull request
   [62]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/s
   [63]download zip

downloading...

   want to be notified of new releases in salestock/fasttext.py?
   [64]sign in [65]sign up

launching github desktop...

   if nothing happens, [66]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [67]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [68]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [69]download the github extension for visual studio
   and try again.

   (button) go back
   [70]@pyk
   [71]pyk [72]update readme.md
   latest commit [73]ed48073 jan 31, 2018
   [74]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [75]examples [76]examples: fix typo ([77]#133[78]) jun 14, 2017
   [79]fasttext [80]fasttext/interface.cc: fixed ifstream not loading
   binary files correc    may 21, 2017
   [81]test [82]add pretrained word vectors support ([83]#93[84]) nov 10,
   2016
   [85].gitignore
   [86].travis.yml
   [87]contributing.md
   [88]license
   [89]manifest.in
   [90]makefile
   [91]readme.md
   [92]readme.rst
   [93]requirements.txt
   [94]setup.py [95]update 0.8.2 to 0.8.3 ([96]#111[97]) feb 14, 2017
   [98]update-fasttext.sh

readme.md

fasttext [99]build status [100]pypi version

   fasttext is a python interface for [101]facebook fasttext.

update

   the [102]fasttext pypi is now maintained by facebook ai research team.
   read the documentation here: [103]fasttext python binding.

requirements

   fasttext support python 2.6 or newer. it requires [104]cython in order
   to build the c++ extension.

installation

pip install fasttext

example usage

   this package has two main use cases: word representation learning and
   text classification.

   these were described in the two papers [105]1 and [106]2.

word representation learning

   in order to learn word vectors, as described in [107]1, we can use
   fasttext.skipgram and fasttext.cbow function like the following:
import fasttext

# skipgram model
model = fasttext.skipgram('data.txt', 'model')
print model.words # list of words in dictionary

# cbow model
model = fasttext.cbow('data.txt', 'model')
print model.words # list of words in dictionary

   where data.txt is a training file containing utf-8 encoded text. by
   default the word vectors will take into account character id165s from
   3 to 6 characters.

   at the end of optimization the program will save two files: model.bin
   and model.vec.

   model.vec is a text file containing the word vectors, one per line.
   model.bin is a binary file containing the parameters of the model along
   with the dictionary and all hyper parameters.

   the binary file can be used later to compute word vectors or to restart
   the optimization.

   the following fasttext(1) command is equivalent
# skipgram model
./fasttext skipgram -input data.txt -output model

# cbow model
./fasttext cbow -input data.txt -output model

obtaining word vectors for out-of-vocabulary words

   the previously trained model can be used to compute word vectors for
   out-of-vocabulary words.
print model['king'] # get the vector of the word 'king'

   the following fasttext(1) command is equivalent:
echo "king" | ./fasttext print-vectors model.bin

   this will output the vector of word king to the standard output.

load pre-trained model

   we can use fasttext.load_model to load pre-trained model:
model = fasttext.load_model('model.bin')
print model.words # list of words in dictionary
print model['king'] # get the vector of the word 'king'

text classification

   this package can also be used to train supervised text classifiers and
   load pre-trained classifier from fasttext.

   in order to train a text classifier using the method described in
   [108]2, we can use the following function:
classifier = fasttext.supervised('data.train.txt', 'model')

   equivalent as fasttext(1) command:
./fasttext supervised -input data.train.txt -output model

   where data.train.txt is a text file containing a training sentence per
   line along with the labels. by default, we assume that labels are words
   that are prefixed by the string __label__.

   we can specify the label prefix with the label_prefix param:
classifier = fasttext.supervised('data.train.txt', 'model', label_prefix='__labe
l__')

   equivalent as fasttext(1) command:
./fasttext supervised -input data.train.txt -output model -label '__label__'

   this will output two files: model.bin and model.vec.

   once the model was trained, we can evaluate it by computing the
   precision at 1 (p@1) and the recall on a test set using classifier.test
   function:
result = classifier.test('test.txt')
print 'p@1:', result.precision
print 'r@1:', result.recall
print 'number of examples:', result.nexamples

   this will print the same output to stdout as:
./fasttext test model.bin test.txt

   in order to obtain the most likely label for a list of text, we can use
   classifer.predict method:
texts = ['example very long text 1', 'example very longtext 2']
labels = classifier.predict(texts)
print labels

# or with the id203
labels = classifier.predict_proba(texts)
print labels

   we can specify k value to get the k-best labels from classifier:
labels = classifier.predict(texts, k=3)
print labels

# or with the id203
labels = classifier.predict_proba(texts, k=3)
print labels

   this interface is equivalent as fasttext(1) predict command. the same
   model with the same input set will have the same prediction.

api documentation

skipgram model

   train & load skipgram model
model = fasttext.skipgram(params)

   list of available params and their default value:
input_file     training file path (required)
output         output file path (required)
lr             learning rate [0.05]
lr_update_rate change the rate of updates for the learning rate [100]
dim            size of word vectors [100]
ws             size of the context window [5]
epoch          number of epochs [5]
min_count      minimal number of word occurences [5]
neg            number of negatives sampled [5]
word_ngrams    max length of word ngram [1]
loss           id168 {ns, hs, softmax} [ns]
bucket         number of buckets [2000000]
minn           min length of char ngram [3]
maxn           max length of char ngram [6]
thread         number of threads [12]
t              sampling threshold [0.0001]
silent         disable the log output from the c++ extension [1]
encoding       specify input_file encoding [utf-8]


   example usage:
model = fasttext.skipgram('train.txt', 'model', lr=0.1, dim=300)

cbow model

   train & load cbow model
model = fasttext.cbow(params)

   list of available params and their default value:
input_file     training file path (required)
output         output file path (required)
lr             learning rate [0.05]
lr_update_rate change the rate of updates for the learning rate [100]
dim            size of word vectors [100]
ws             size of the context window [5]
epoch          number of epochs [5]
min_count      minimal number of word occurences [5]
neg            number of negatives sampled [5]
word_ngrams    max length of word ngram [1]
loss           id168 {ns, hs, softmax} [ns]
bucket         number of buckets [2000000]
minn           min length of char ngram [3]
maxn           max length of char ngram [6]
thread         number of threads [12]
t              sampling threshold [0.0001]
silent         disable the log output from the c++ extension [1]
encoding       specify input_file encoding [utf-8]


   example usage:
model = fasttext.cbow('train.txt', 'model', lr=0.1, dim=300)

load pre-trained model

   file .bin that previously trained or generated by fasttext can be
   loaded using this function
model = fasttext.load_model('model.bin', encoding='utf-8')

attributes and methods for the model

   skipgram and cbow model have the following atributes & methods
model.model_name       # model name
model.words            # list of words in the dictionary
model.dim              # size of word vector
model.ws               # size of context window
model.epoch            # number of epochs
model.min_count        # minimal number of word occurences
model.neg              # number of negative sampled
model.word_ngrams      # max length of word ngram
model.loss_name        # id168 name
model.bucket           # number of buckets
model.minn             # min length of char ngram
model.maxn             # max length of char ngram
model.lr_update_rate   # rate of updates for the learning rate
model.t                # value of sampling threshold
model.encoding         # encoding of the model
model[word]            # get the vector of specified word

supervised model

   train & load the classifier
classifier = fasttext.supervised(params)

   list of available params and their default value:
input_file                      training file path (required)
output                          output file path (required)
label_prefix                    label prefix ['__label__']
lr                              learning rate [0.1]
lr_update_rate                  change the rate of updates for the learning rate
 [100]
dim                             size of word vectors [100]
ws                              size of the context window [5]
epoch                           number of epochs [5]
min_count                       minimal number of word occurences [1]
neg                             number of negatives sampled [5]
word_ngrams                     max length of word ngram [1]
loss                            id168 {ns, hs, softmax} [softmax]
bucket                          number of buckets [0]
minn                            min length of char ngram [0]
maxn                            max length of char ngram [0]
thread                          number of threads [12]
t                               sampling threshold [0.0001]
silent                          disable the log output from the c++ extension [1
]
encoding                        specify input_file encoding [utf-8]
pretrained_vectors              pretrained word vectors (.vec file) for supervis
ed learning []


   example usage:
classifier = fasttext.supervised('train.txt', 'model', label_prefix='__myprefix_
_',
                                 thread=4)

load pre-trained classifier

   file .bin that previously trained or generated by fasttext can be
   loaded using this function.
./fasttext supervised -input train.txt -output classifier -label 'some_prefix'

classifier = fasttext.load_model('classifier.bin', label_prefix='some_prefix')

test classifier

   this is equivalent as fasttext(1) test command. the test using the same
   model and test set will produce the same value for the precision at one
   and the number of examples.
result = classifier.test(params)

# properties
result.precision # precision at one
result.recall    # recall at one
result.nexamples # number of test examples

   the param k is optional, and equal to 1 by default.

predict the most-likely label of texts

   this interface is equivalent as fasttext(1) predict command.

   texts is an array of string
labels = classifier.predict(texts, k)

# or with id203
labels = classifier.predict_proba(texts, k)

   the param k is optional, and equal to 1 by default.

attributes and methods for the classifier

   classifier have the following atributes & methods
classifier.labels                  # list of labels
classifier.label_prefix            # prefix of the label
classifier.dim                     # size of word vector
classifier.ws                      # size of context window
classifier.epoch                   # number of epochs
classifier.min_count               # minimal number of word occurences
classifier.neg                     # number of negative sampled
classifier.word_ngrams             # max length of word ngram
classifier.loss_name               # id168 name
classifier.bucket                  # number of buckets
classifier.minn                    # min length of char ngram
classifier.maxn                    # max length of char ngram
classifier.lr_update_rate          # rate of updates for the learning rate
classifier.t                       # value of sampling threshold
classifier.encoding                # encoding that used by classifier
classifier.test(filename, k)       # test the classifier
classifier.predict(texts, k)       # predict the most likely label
classifier.predict_proba(texts, k) # predict the most likely label include their
 id203

   the param k for classifier.test, classifier.predict and
   classifier.predict_proba is optional, and equal to 1 by default.

references

enriching word vectors with subword information

   [1] p. bojanowski*, e. grave*, a. joulin, t. mikolov, [109]enriching
   word vectors with subword information
@article{bojanowski2016enriching,
  title={enriching word vectors with subword information},
  author={bojanowski, piotr and grave, edouard and joulin, armand and mikolov, t
omas},
  journal={arxiv preprint arxiv:1607.04606},
  year={2016}
}

bag of tricks for efficient text classification

   [2] a. joulin, e. grave, p. bojanowski, t. mikolov, [110]bag of tricks
   for efficient text classification
@article{joulin2016bag,
  title={bag of tricks for efficient text classification},
  author={joulin, armand and grave, edouard and bojanowski, piotr and mikolov, t
omas},
  journal={arxiv preprint arxiv:1607.01759},
  year={2016}
}

   (* these authors contributed equally.)

join the fasttext community

     * facebook page:
       [111]https://www.facebook.com/groups/1174547215919768
     * google group:
       [112]https://groups.google.com/forum/#!forum/fasttext-library

     *    2019 github, inc.
     * [113]terms
     * [114]privacy
     * [115]security
     * [116]status
     * [117]help

     * [118]contact github
     * [119]pricing
     * [120]api
     * [121]training
     * [122]blog
     * [123]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [124]reload to refresh your
   session. you signed out in another tab or window. [125]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/salestock/fasttext.py/commits/master.atom
   3. https://github.com/salestock/fasttext.py#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/salestock/fasttext.py
  32. https://github.com/join
  33. https://github.com/login?return_to=/salestock/fasttext.py
  34. https://github.com/salestock/fasttext.py/watchers
  35. https://github.com/login?return_to=/salestock/fasttext.py
  36. https://github.com/salestock/fasttext.py/stargazers
  37. https://github.com/login?return_to=/salestock/fasttext.py
  38. https://github.com/salestock/fasttext.py/network/members
  39. https://github.com/salestock
  40. https://github.com/salestock/fasttext.py
  41. https://github.com/salestock/fasttext.py
  42. https://github.com/salestock/fasttext.py/issues
  43. https://github.com/salestock/fasttext.py/pulls
  44. https://github.com/salestock/fasttext.py/projects
  45. https://github.com/salestock/fasttext.py/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/topics/text-classification
  48. https://github.com/topics/fasttext
  49. https://github.com/topics/classifier
  50. https://github.com/topics/machine-learning
  51. https://github.com/topics/facebook-fasttext
  52. https://github.com/salestock/fasttext.py/commits/master
  53. https://github.com/salestock/fasttext.py/branches
  54. https://github.com/salestock/fasttext.py/releases
  55. https://github.com/salestock/fasttext.py/graphs/contributors
  56. https://github.com/salestock/fasttext.py/blob/master/license
  57. https://github.com/salestock/fasttext.py/search?l=c++
  58. https://github.com/salestock/fasttext.py/search?l=python
  59. https://github.com/salestock/fasttext.py/search?l=shell
  60. https://github.com/salestock/fasttext.py/search?l=makefile
  61. https://github.com/salestock/fasttext.py/search?l=perl
  62. https://github.com/salestock/fasttext.py/find/master
  63. https://github.com/salestock/fasttext.py/archive/master.zip
  64. https://github.com/login?return_to=https://github.com/salestock/fasttext.py
  65. https://github.com/join?return_to=/salestock/fasttext.py
  66. https://desktop.github.com/
  67. https://desktop.github.com/
  68. https://developer.apple.com/xcode/
  69. https://visualstudio.github.com/
  70. https://github.com/pyk
  71. https://github.com/salestock/fasttext.py/commits?author=pyk
  72. https://github.com/salestock/fasttext.py/commit/ed4807359d31296f444f895d26200140b8ce10b4
  73. https://github.com/salestock/fasttext.py/commit/ed4807359d31296f444f895d26200140b8ce10b4
  74. https://github.com/salestock/fasttext.py/tree/ed4807359d31296f444f895d26200140b8ce10b4
  75. https://github.com/salestock/fasttext.py/tree/master/examples
  76. https://github.com/salestock/fasttext.py/commit/5e1a01379d46b38c1948df95514d31882f238d7a
  77. https://github.com/salestock/fasttext.py/pull/133
  78. https://github.com/salestock/fasttext.py/commit/5e1a01379d46b38c1948df95514d31882f238d7a
  79. https://github.com/salestock/fasttext.py/tree/master/fasttext
  80. https://github.com/salestock/fasttext.py/commit/2e21e38ca1ebcbb658e884c68206ed6f2182a666
  81. https://github.com/salestock/fasttext.py/tree/master/test
  82. https://github.com/salestock/fasttext.py/commit/77bdf69ee97a7446e314b342b129c5d46e9e4e29
  83. https://github.com/salestock/fasttext.py/pull/93
  84. https://github.com/salestock/fasttext.py/commit/77bdf69ee97a7446e314b342b129c5d46e9e4e29
  85. https://github.com/salestock/fasttext.py/blob/master/.gitignore
  86. https://github.com/salestock/fasttext.py/blob/master/.travis.yml
  87. https://github.com/salestock/fasttext.py/blob/master/contributing.md
  88. https://github.com/salestock/fasttext.py/blob/master/license
  89. https://github.com/salestock/fasttext.py/blob/master/manifest.in
  90. https://github.com/salestock/fasttext.py/blob/master/makefile
  91. https://github.com/salestock/fasttext.py/blob/master/readme.md
  92. https://github.com/salestock/fasttext.py/blob/master/readme.rst
  93. https://github.com/salestock/fasttext.py/blob/master/requirements.txt
  94. https://github.com/salestock/fasttext.py/blob/master/setup.py
  95. https://github.com/salestock/fasttext.py/commit/8f9d33c0dfced409078f4d7210c2210b8f7e623d
  96. https://github.com/salestock/fasttext.py/pull/111
  97. https://github.com/salestock/fasttext.py/commit/8f9d33c0dfced409078f4d7210c2210b8f7e623d
  98. https://github.com/salestock/fasttext.py/blob/master/update-fasttext.sh
  99. https://travis-ci.org/salestock/fasttext.py
 100. https://badge.fury.io/py/fasttext
 101. https://github.com/facebookresearch/fasttext
 102. https://pypi.python.org/pypi/fasttext
 103. https://github.com/facebookresearch/fasttext/tree/master/python
 104. https://pypi.python.org/pypi/cython/
 105. https://github.com/salestock/fasttext.py#enriching-word-vectors-with-subword-information
 106. https://github.com/salestock/fasttext.py#bag-of-tricks-for-efficient-text-classification
 107. https://github.com/salestock/fasttext.py#enriching-word-vectors-with-subword-information
 108. https://github.com/salestock/fasttext.py#bag-of-tricks-for-efficient-text-classification
 109. https://arxiv.org/pdf/1607.04606v1.pdf
 110. https://arxiv.org/pdf/1607.01759v2.pdf
 111. https://www.facebook.com/groups/1174547215919768
 112. https://groups.google.com/forum/#!forum/fasttext-library
 113. https://github.com/site/terms
 114. https://github.com/site/privacy
 115. https://github.com/security
 116. https://githubstatus.com/
 117. https://help.github.com/
 118. https://github.com/contact
 119. https://github.com/pricing
 120. https://developer.github.com/
 121. https://training.github.com/
 122. https://github.blog/
 123. https://github.com/about
 124. https://github.com/salestock/fasttext.py
 125. https://github.com/salestock/fasttext.py

   hidden links:
 127. https://github.com/
 128. https://github.com/salestock/fasttext.py
 129. https://github.com/salestock/fasttext.py
 130. https://github.com/salestock/fasttext.py
 131. https://help.github.com/articles/which-remote-url-should-i-use
 132. https://github.com/salestock/fasttext.py#fasttext--
 133. https://github.com/salestock/fasttext.py#update
 134. https://github.com/salestock/fasttext.py#requirements
 135. https://github.com/salestock/fasttext.py#installation
 136. https://github.com/salestock/fasttext.py#example-usage
 137. https://github.com/salestock/fasttext.py#word-representation-learning
 138. https://github.com/salestock/fasttext.py#obtaining-word-vectors-for-out-of-vocabulary-words
 139. https://github.com/salestock/fasttext.py#load-pre-trained-model
 140. https://github.com/salestock/fasttext.py#text-classification
 141. https://github.com/salestock/fasttext.py#api-documentation
 142. https://github.com/salestock/fasttext.py#skipgram-model
 143. https://github.com/salestock/fasttext.py#cbow-model
 144. https://github.com/salestock/fasttext.py#load-pre-trained-model-1
 145. https://github.com/salestock/fasttext.py#attributes-and-methods-for-the-model
 146. https://github.com/salestock/fasttext.py#supervised-model
 147. https://github.com/salestock/fasttext.py#load-pre-trained-classifier
 148. https://github.com/salestock/fasttext.py#test-classifier
 149. https://github.com/salestock/fasttext.py#predict-the-most-likely-label-of-texts
 150. https://github.com/salestock/fasttext.py#attributes-and-methods-for-the-classifier
 151. https://github.com/salestock/fasttext.py#references
 152. https://github.com/salestock/fasttext.py#enriching-word-vectors-with-subword-information
 153. https://github.com/salestock/fasttext.py#bag-of-tricks-for-efficient-text-classification
 154. https://github.com/salestock/fasttext.py#join-the-fasttext-community
 155. https://github.com/
