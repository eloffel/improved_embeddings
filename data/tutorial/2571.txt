   #[1]bitbucket

     *
     *
     *
     *
     *
     *
     *
     *
     *
     *

     *
     *
     *
     *
     *
     *
     *

    1. [2]richard penman
    2. [3]sitescraper

overview

   (button) clone in sourcetree
   (button) clone in sourcetree

   [4]atlassian sourcetree is a free git and mercurial client for windows.

   [5]atlassian sourcetree is a free git and mercurial client for mac.
   (button) https https ssh https://bitbucket.or
   last updated
   language
   access level
   2015-03-26
   python
   read
   0
   open prs
     __________________________________________________________________

   1
   branch
   4
   watchers
     __________________________________________________________________

   2
   forks

overview

   sitescraper extracts the data you want from webpages. no programming or
   html knowledge is required.

   for an in depth analysis of how it works have a browse of [6]this
   unpublished paper.

example

   here is a simple example to show how sitescraper works:
>>> from sitescraper import sitescraper
>>> ss = sitescraper()
>>> url = 'http://www.amazon.com/s/ref=nb_ss_gw?url=search-alias%3daps&field-key
words=python&x=0&y=0'
>>> data = ["amazon.com: python", ["learning python, 3rd edition",
     "programming in python 3: a complete introduction to the python language (d
eveloper's library)",
     "python in a nutshell, second edition (in a nutshell (o'reilly))"]]
>>> ss.add(url, data)
>>> # we can add multiple example cases, but this is a simple example so 1 will
do (i generally use 3)
>>> # ss.add(url2, data2)
>>> ss.scrape('http://www.amazon.com/s/ref=nb_ss_gw?url=search-alias%3daps&field
-keywords=linux&x=0&y=0')
["amazon.com: linux", ["a practical guide to linux(r) commands, editors, and she
ll programming",
"linux pocket guide",
"linux in a nutshell (in a nutshell (o'reilly))",
'practical guide to ubuntu linux (versions 8.10 and 8.04), a (2nd edition)',
'linux bible, 2008 edition: boot up to ubuntu, fedora, knoppix, debian, opensuse
, and 11 other distributions']]

explanation

   as you may have figured out, this example extracts the book titles from
   an amazon search. all sitescraper requires is the titles from one
   example search and then it can build a model to extract the titles from
   future amazon searches.

   (to run this example first update the titles to what amazon now returns
   and for more robust results provide a number of example cases.)

model format

   internally sitescraper models the data in a webpage using [7]xpaths.
   here is an example xpath:
/html[1]/body[1]/div[position()>1]/ul[@class='big']/li

   this xpath will match all list elements within an unordered list of
   class 'big' within the second and following divs (index starts from 0)
   within the body of the html document.

install

   sitescraper is written in pure [8]python but depends on version 2 of
   [9]lxml (for the html module). currently many linux repositories
   provide the old version 1, which means you may need to [10]build from
   source. for example ubuntu up to version 8.04 used version 1 but 8.10
   onwards uses version 2. this dependency is a pain but it is a [11]very
   [12]useful library.

   a zip file is available for download but this is usually out of date.
   better to checkout the [13]svn repository.

future goals

   some goals for the future:
     * remove lxml dependency so that sitescraper is pure python and can
       work on google app engine. this would be possible by replacing lxml
       with a pure python parser like [14]html5lib. alternatively i could
       integrate work from [15]this project, which uses xpath on
       unstructured html without the need for a parser.
     * instead of absolute xpath's from the root of the document generate
       relative xpath's around a tag with an id (eg:
       //div[@id="abc"]../table/tr/td). such xpaths are more stable.
     * better handling of unicode characters. currently sitescraper skips
       any characters it can't decode.
     * refactor the xpath module, which is somewhat messy now.
     * firebug always includes tbody in the xpath whether the tag exists
       in the html or not. allow this.

regression tests

   included with sitescraper are a set of [16]test cases ([17]in
   testdata/) that successfully extract data from stock sites, news sites,
   weather sites, web forums, and search engines.

   each regression test has: a few example webpages from a website the
   desired data from each webpage * and a list of the xpaths that will
   locate the desired data see [18]here for an example. the script
   [19]test.py runs the regression tests and reports which tests fail.

license

   sitescraper is licensed under the [20]lgpl license, which means you are
   free to use it in any project (including commercial) but must publish
   modifications you make to sitescraper.

contact

   you can ask questions or tell me how you have used sitescraper by
   emailing me at richard@[21]webscraping.com. i am particularly
   interested to hear from you if you have a webpage that fails and ideas
   how to improve sitescraper to scrape it correctly.

recent activity

   repo activity is currently unavailable.

help

   ____________________
     * [22]online help
     * [23]learn git
     * [24]keyboard shortcuts
     * [25]bitbucket tutorials
     * [26]site status
     * [27]support

references

   visible links
   1. https://bitbucket.org/opensearch.xml
   2. https://bitbucket.org/richardpenman/
   3. https://bitbucket.org/richardpenman/sitescraper
   4. http://www.sourcetreeapp.com/?utm_source=internal&utm_medium=link&utm_campaign=clone_repo_win
   5. http://www.sourcetreeapp.com/?utm_source=internal&utm_medium=link&utm_campaign=clone_repo_mac
   6. http://sitescraper.googlecode.com/files/sitescraper.pdf
   7. http://www.w3.org/tr/xpath
   8. http://www.python.org/
   9. http://codespeak.net/lxml/
  10. http://codespeak.net/lxml/build.html
  11. http://blog.ianbicking.org/2008/12/10/lxml-an-underappreciated-web-scraping-library/
  12. http://blog.ianbicking.org/2008/03/30/python-html-parser-performance/
  13. http://code.google.com/p/sitescraper/source/checkout
  14. http://code.google.com/p/html5lib/
  15. http://code.google.com/p/webscraping/source/browse/xpath.py
  16. http://en.wikipedia.org/wiki/regression_testing regression
  17. http://code.google.com/p/sitescraper/source/browse/#svn/trunk/testdata
  18. http://code.google.com/p/sitescraper/source/browse/trunk/testdata/amazon/__init__.py
  19. http://code.google.com/p/sitescraper/source/browse/trunk/test.py
  20. http://www.gnu.org/licenses/lgpl.html
  21. http://webscraping.com/
  22. https://confluence.atlassian.com/x/bgozdq
  23. https://www.atlassian.com/git?utm_source=bitbucket&utm_medium=link&utm_campaign=help_dropdown&utm_content=learn_git
  24. https://bitbucket.org/richardpenman/sitescraper/
  25. https://confluence.atlassian.com/x/q4sflq
  26. https://status.bitbucket.org/
  27. https://support.atlassian.com/bitbucket-cloud/

   hidden links:
  29. https://bitbucket.org/richardpenman/sitescraper/pull-requests/
  30. https://bitbucket.org/richardpenman/sitescraper/branches/
  31. https://bitbucket.org/richardpenman/sitescraper/#followers
  32. https://bitbucket.org/richardpenman/sitescraper/#forks
  33. https://bitbucket.org/richardpenman/sitescraper/rss
