   [1]introduction to computational linguistics

   [2]tools
   programming tools

   python pointers
   starting
   python

   start up python and import the sys module:
% python
>>> from sys import *

   python.org

   [3]python.org: the place to start
   python book
   online

   [4]dive into python book site.
   this site has online copies of an excellent introduction to python that
   assumes knowledge of some other programming language. in other words,
   it doesn't teach you how to program. but it doesn't assume any
   particular body of arcane programming knowledge either. it is lucid,
   clear, unpretentious and supplied with copious examples.
   hint: download diveintopython-pdf-5.4.zip to get a pdf of the book plus
   a directory of examples referred to in the text.
        [5]dive into python: local copy

   especially notable: appendix a. further reading. a great list of
   elementary discussions on various topics.
        tutorial
             [6]tutorial
            wiki
            excellent quick start discussions for beginners and more
            advanced programmers as well. good place for a quick review of
            builtins and library methods for some data type, such as
            strings or lists.
             [7]wikibooks on python
            gentle
            inro
            a nice discussion of a lot of topics, targeting developers.
             [8]active-venture.com
            reference
            manual
             [9]python reference manual
            libraries,
            builtins
              1. [10]python library reference [11]library ref: exceptions
                 documentation.
              2. [12]built in function docs
            beginners to
            programming
            josh cogliati's non-programmers' tutorial for python:
             [13]non-programmers tutorial for python
            this also includes a lot of discussion targeted for beginning
            programmers, but goes a bit further conceptually:
             [14]how to think like a computer scientist
            python for
            linguists
            still in draft form, but available online:
             [15]ron zacharski's python for linguists
            rumor has it mark johnson is working on abook with a similar
            concept.
            not for beginners. not specifically targeting linguists but
            definitely focused on the topics of most interest to
            linguists:
             david mertz's [16]text processing in python
            donations tearfully accepted. this also a book. info on the
            site. buy the book.
            python apps
            computational
            linguistics
            natural language toolkit (nltk).
             [17]nltk home page
            style guide
            it doesn't really matter whether your code works or not.
            what really matters is that it fit snugly around your hips:
             [18]python style guide
            knowledge
            base
            [19]python knowledgebase: this has a google-style search
            engine and faq list. and code snippets and hints....
            python cookbook
            full of useful tidbits (and code snippets!):
             [20]python cookbook
            but subjects covered tend to be rather advanced.
            doc strings:
            method specific
            documentation
            functions shd be defined with __doc__ strings.
            these can be read by printing the function's doc string:
             print open.__doc__
            shows all you want to want to know about opening a file.
            you shd do this with your own functions, of course. here's
            how:
def hello_world (guy):
  """hello_world(guy)

     prints hello world, guy
     guy a string.
     no matter what."""
  print 'hello world, %s.' % guy

            now run it:
>>> hello_world('fred')
hello world, fred

            now read about it:
>>> print hello_world.__doc__
hello world(guy)

     prints hello world, guy.
     guy a string.
     no matter what.

            further help:
              1. [21]python.org's pep 257 document defines doc string
                 conventions.
              2. [22]python style guide discusses how to write a good doc
                 string.
              3. [23]python tutorial discusses [24]conventions for spacing
                 in doc strings (this is actually the most concise and
                 useful).
            dictionaries
              1. [25]introduction to dictionaries
              2. [26]python cookbook recipe for sorting a dictionary by
                 keys (the key-value pairs of a dictionary are unordered,
                 so if you want a list ordered by key, here's how)
              3. [27]python knowledge base: a lot of example code using
                 dictionaries.
            floating point
            odds and ends about arithmetiic, of relevance to those using
            log probs:
              1. a href="http://python.openrubas.org/peps/pep-0754.html">
                 floating point special values: discussion of infinity and
                 the like.
              2. [28]reference manual: expressions. syntax of basic
                 arithmetic expressions can be fond here.
              3. [29]math module functions here

references

   visible links
   1. http://www-rohan.sdsu.edu/dept/linguist/lol.html
   2. http://www.sdsu.edu/
   3. http://www.python.org/
   4. http://diveintopython.org/
   5. https://gawron.sdsu.edu/compling/tools/diveintopython-5.4/diveintopython.pdf
   6. http://www.python.org/doc/tut/tut.html
   7. http://en.wikibooks.org/wiki/programming:python
   8. http://python.active-venture.com/
   9. http://www.python.org/doc/current/ref/ref.html
  10. http://www.python.org/doc/current/lib/lib.html
  11. http://www.python.org/doc/current/lib/module-exceptions.html
  12. http://www.python.org/doc/current/lib/built-in-funcs.html
  13. http://honors.montana.edu/~jjc/easytut/easytut/
  14. http://www.ibiblio.org/obp/thinkcspy/
  15. http://www.zacharski.org/python/
  16. http://gnosis.cx/tpip/
  17. http://nltk.sourceforge.net/
  18. http://www.python.org/doc/essays/styleguide.html
  19. http://www.faqts.com/knowledge_base/index.phtml/fid/199/
  20. http://aspn.activestate.com/aspn/python/cookbook/
  21. http://www.python.org/peps/pep-0257.html
  22. http://www.python.org/doc/essays/styleguide.html
  23. http://www.python.org/doc/current/tut/tut.html
  24. http://www.python.org/doc/current/tut/node6.html#section006750000000000000000
  25. http://www.ibiblio.org/obp/thinkcspy/chap10.htm
  26. http://aspn.activestate.com/aspn/python/cookbook/recipe/52306
  27. http://www.faqts.com/knowledge-base/index.phtml/fid/541
  28. http://www.python.org/doc/current/ref/expressions.html
  29. http://docs.python.org/lib/module-math.html

   hidden links:
  31. http://www-rohan.sdsu.edu/~gawron/compling/tools
