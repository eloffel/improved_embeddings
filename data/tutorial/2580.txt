   #[1]github [2]recent commits to markovify:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]64
     * [35]star [36]1,934
     * [37]fork [38]212

[39]jsvine/[40]markovify

   [41]code [42]issues 1 [43]pull requests 9 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   a simple, extensible markov chain generator.
     * [47]199 commits
     * [48]8 branches
     * [49]24 releases
     * [50]fetching contributors
     * [51]mit

    1. [52]python 100.0%

   (button) python
   branch: master (button) new pull request
   [53]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/j
   [54]download zip

downloading...

   want to be notified of new releases in jsvine/markovify?
   [55]sign in [56]sign up

launching github desktop...

   if nothing happens, [57]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [58]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [59]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [60]download the github extension for visual studio
   and try again.

   (button) go back
   [61]@whatrocks [62]@jsvine
   [63]whatrocks and [64]jsvine [65]add commencement speech generator
   project ([66]#100[67]) (button)    
h/t [68]@whatrocks

   latest commit [69]6968649 jul 31, 2018
   [70]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [71]markovify [72]fix [73]#90 [74]and bump to v0.7.1 dec 19, 2017
   [75]test [76]fix [77]#90 [78]and bump to v0.7.1 dec 19, 2017
   [79].gitignore
   [80].travis.yml [81]add .travis.yml and change supported py versions
   mar 24, 2017
   [82]license.txt [83]initial commit jan 2, 2015
   [84]manifest.in
   [85]readme.md
   [86]setup.py
   [87]tox.ini

readme.md

   [88]version [89]build status [90]code coverage [91]support python
   versions

markovify

   markovify is a simple, extensible markov chain generator. right now,
   its main use is for building markov models of large corpora of text,
   and generating random sentences from that. but, in theory, it could be
   used for [92]other applications.
     * [93]why markovify?
     * [94]installation
     * [95]basic usage
     * [96]advanced usage
     * [97]markovify in the wild
     * [98]thanks

why markovify?

   some reasons:
     * simplicity. "batteries included," but it's easy to override key
       methods.
     * models can be stored as json, allowing you to cache your results
       and save them for later.
     * text parsing and sentence generation methods are highly extensible,
       allowing you to set your own rules.
     * relies only on pure-python libraries, and very few of them.
     * tested on python 2.7, 3.4, 3.5, and 3.6.

installation

pip install markovify

basic usage

import markovify

# get raw text as string.
with open("/path/to/my/corpus.txt") as f:
    text = f.read()

# build the model.
text_model = markovify.text(text)

# print five randomly-generated sentences
for i in range(5):
    print(text_model.make_sentence())

# print three randomly-generated sentences of no more than 140 characters
for i in range(3):
    print(text_model.make_short_sentence(140))

   notes:
     * the usage examples here assume you're trying to markovify text. if
       you'd like to use the underlying markovify.chain class, which is
       not text-specific, check out [99]the (annotated) source code.
     * markovify works best with large, well-punctuated texts. if your
       text doesn't use .s to delineate sentences, put each sentence on a
       newline, and use the markovify.newlinetext class instead of
       markovify.text class.
     * if you've accidentally read your text as one long sentence,
       markovify will be unable to generate new sentences from it due to a
       lack of beginning and ending delimiters. this can happen if you've
       read a newline delimited file using the markovify.text command
       instead of markovify.newlinetext. to check this, the command [key
       for key in txt.chain.model.keys() if "___begin__" in key] command
       will return all of the possible sentence starting words, and should
       return more than one result.
     * by default, the make_sentence method tries, a maximum of 10 times
       per invocation, to make a sentence that doesn't overlap too
       much with the original text. if it is successful, the method
       returns the sentence as a string. if not, it returns none. to
       increase or decrease the number of attempts, use the tries keyword
       argument, e.g., call .make_sentence(tries=100).
     * by default, markovify.text tries to generate sentences that don't
       simply regurgitate chunks of the original text. the default rule is
       to suppress any generated sentences that exactly overlaps the
       original text by 15 words or 70% of the sentence's word count. you
       can change this rule by passing max_overlap_ratio and/or
       max_overlap_total to the make_sentence method. alternatively you
       can disable this check entirely by passing test_output as false.

advanced usage

specifying the model's state size

   by default, markovify.text uses a state size of 2. but you can
   instantiate a model with a different state size. e.g.,:
text_model = markovify.text(text, state_size=3)

combining models

   with markovify.combine(...), you can combine two or more markov chains.
   the function accepts two arguments:
     * models: a list of markovify objects to combine. can be instances of
       markovify.chain or markovify.text (or their subclasses), but all
       must be of the same type.
     * weights: optional. a list     the exact length of models     of ints or
       floats indicating how much relative emphasis to place on each
       source. default: [ 1, 1, ... ].

   for instance:
model_a = markovify.text(text_a)
model_b = markovify.text(text_b)

model_combo = markovify.combine([ model_a, model_b ], [ 1.5, 1 ])

   ... would combine model_a and model_b, but place 50% more weight on the
   connections from model_a.

extending markovify.text

   the markovify.text class is highly extensible; most methods can be
   overridden. for example, the following posifiedtext class uses nltk's
   part-of-speech tagger to generate a markov model that obeys sentence
   structure better than a naive model. (it works. but be warned: pos_tag
   is very slow.)
import markovify
import nltk
import re

class posifiedtext(markovify.text):
    def word_split(self, sentence):
        words = re.split(self.word_split_pattern, sentence)
        words = [ "::".join(tag) for tag in nltk.pos_tag(words) ]
        return words

    def word_join(self, words):
        sentence = " ".join(word.split("::")[0] for word in words)
        return sentence

   or, you can use [100]spacy which is [101]way faster:
import markovify
import re
import spacy

nlp = spacy.load("en")

class posifiedtext(markovify.text):
    def word_split(self, sentence):
        return ["::".join((word.orth_, word.pos_)) for word in nlp(sentence)]

    def word_join(self, words):
        sentence = " ".join(word.split("::")[0] for word in words)
        return sentence

   the most useful markovify.text models you can override are:
     * sentence_split
     * sentence_join
     * word_split
     * word_join
     * test_sentence_input
     * test_sentence_output

   for details on what they do, see [102]the (annotated) source code.

exporting

   it can take a while to generate a markov model from a large corpus.
   sometimes you'll want to generate once and reuse it later. to export a
   generated markovify.text model, use my_text_model.to_json(). for
   example:
corpus = open("sherlock.txt").read()

text_model = markovify.text(corpus, state_size=3)
model_json = text_model.to_json()
# in theory, here you'd save the json to disk, and then read it back later.

reconstituted_model = markovify.text.from_json(model_json)
reconstituted_model.make_short_sentence(140)

>>> 'it cost me something in foolscap, and i had no idea that he was a man of ev
il reputation among women.'

   you can also export the underlying markov chain on its own     i.e.,
   excluding the original corpus and the state_size metadata     via
   my_text_model.chain.to_json().

generating markovify.text models from very large corpora

   by default, the markovify.text class loads, and retains, the your
   textual corpus, so that it can compare generated sentences with the
   original (and only emit novel sentences). but, with very large corpora,
   loading the entire text at once (and retaining it) can be
   memory-intensive. to overcome this, you can (a) tell markovify not to
   retain the original:
with open("path/to/my/huge/corpus.txt") as f:
    text_model = markovify.text(f, retain_original=false)

print(text_model.make_sentence())

   and (b) read in the corpus line-by-line or file-by-file and combine
   them into one model at each step:
combined_model = none
for (dirpath, _, filenames) in os.walk("path/to/my/huge/corpus"):
    for filename in filenames:
        with open(os.path.join(dirpath, filename)) as f:
            model = markovify.text(f, retain_original=false)
            if combined_model:
                combined_model = markovify.combine(models=[combined_model, model
])
            else:
                combined_model = model

print(combined_model.make_sentence())

markovify in the wild

     * buzzfeed's [103]tom friedman sentence generator /
       [104]@mot_namdeirf.
     * [105]/u/user_simulator, a reddit bot that generates comments based
       on a user's comment history. [[106]code]
     * [107]subredditsimulator, which [108]uses markovify to generate
       random reddit submissions and comments based on a subreddit's
       previous activity. [[109]code]
     * [110]college crapplication, a web-app that generates college
       application essays. [[111]code]
     * [112]@markovpicard, a twitter bot based on star trek: the next
       generation transcripts. [[113]code]
     * [114]sekrits.herokuapp.com, a markovify-powered quiz that
       challenges you to tell the difference between "two file titles
       relating to matters of [australian] national security"     one real
       and one fake. [[115]code]
     * [116]hacker news simulator, which does what it says on the tin.
       [[117]code]
     * [118]stak attak, a "poetic stackoverflow answer generator."
       [[119]code]
     * [120]mashbot, a markovify-powered twitter bot attached to a
       printer. presented by [121]helen j burgess at babel toronto 2015.
       [[122]code]
     * [123]the mansfield reporter, "a simple device which can generate
       new text from some of history's greatest authors [...] running on a
       tiny raspberry pi, displaying through a tft screen from adafruit."
     * [124]twitter markov, a tool to "create markov chain ("_ebooks")
       accounts on twitter."
     * [125]@bern_trump_bot, "bernie sanders and donald trump driven by
       markov chains." [[126]code]
     * [127]@realtrumptalk, "a bot that uses the things that
       @realdonaldtrump tweets to create it's own tweets." [[128]code]
     * [129]taylor swift song generator, which does what it says.
       [[130]code]
     * [131]@bottalks / [132]ideasworthautomating.com. "tim generates
       talks on a broad spectrum of topics, based on the texts of slightly
       more coherent talks given under the auspices of his more famous big
       brother, who shall not be named here." [[133]code]
     * [134]internal security zones, "generative instructions for prison
       design & maintenance." [[135]code]
     * [136]miraculous ladybot. generates [137]miraculous ladybug
       fanfictions and posts them on tumblr. [[138]code]
     * [139]@haikubotto, "i'm a bot that writes haiku from literature.
       beep boop" [[140]code]
     * [141]chat simulator bot, a bot for telegram. [[142]code]
     * [143]emojipasta.club, "a web service that exposes restful endpoints
       for generating emojipastas, as well as a simple frontend for
       generating and tweeting emojipasta sentences." [[144]code]
     * [145]towel generator, "a system for generating sentences similar to
       those from the hitchhikers series of books." [[146]code]
     * [147]@mercurialbot, "a twitter bot that generates tweets based on
       its mood." [[148]code]
     * [149]becomeacurator.com, which "generates curatorial statements for
       contemporary art expositions, using markov chains and texts from
       galleries around the world." [[150]code]
     * [151]mannynotfound/interview-bot, "a python based terminal prompt
       app to automate the interview process."
     * [152]steam game generator, which "uses data from real steam games,
       randomized using markov chains." [[153]code]
     * [154]@dicedonionbot, which "generates new headlines by the onion by
       regurgitating and combining old headlines." [[155]code]
     * [156]@thought__leader, "thinking thoughts so you don't have to!"
       [[157]blog post]
     * [158]@_murakamibot and [159]@jamesjoycebot, bots that tweet haruki
       murakami and james joyce-like sentences. [[160]code]
     * [161]shartificialintelligence.com, "the world's first creative ad
       agency staffed entirely with copywriter robots." [[162]code]
     * [163]@nightvalefeed, which "generates tweets by combining
       [164]@nightvaleradio tweets with [165]@buzzfeed headlines."
       [[166]code]
     * [167]wynbot9000, which "mimics your friends on google hangouts."
       [[168]code]
     * [169]@sealdonaldtrump, "a twitter bot that sounds like
       @realdonaldtrump, with an aquatic twist." [[170]code]
     * [171]@veeceebot, which is "like vcs but better!" [[172]code]
     * [173]@mar_phil_bot, a twitter bot [174]trained on nietzsche,
       russell, kant, machiavelli, and plato. [[175]code]
     * [176]funzo-facts, a program that generates never-before-seen trivia
       based on jeopardy! questions. [[177]code]
     * [178]chains invent insanity, a [179]cards against humanity answer
       card generator. [[180]code]
     * [181]@candennisdream, a twitter bot that contemplates life by
       training on existential literature discussions. [[182]code]
     * [183]b-9 indifference, a program that generates a star trek: the
       next generation script of arbitrary length using markov chains
       trained on the show   s episode and movie scripts. [[184]code]
     * [185]adam, polish poetry generator. [[186]code]
     * [187]stackexchange simulator, which uses stackexchange's bulk data
       to generate random questions and answers. [[188]code]
     * [189]@bloggingbot, tweets sentences based on a corpus of 17 years
       of [190]blogging.
     * [191]commencement speech generator, generates "graduation
       speech"-style quotes from a dataset of the "greatest of all time"
       commencement speeches)

   have other examples? pull requests welcome.

thanks

   many thanks to the following github users for contributing code and/or
   ideas:
     * [192]@orf
     * [193]@deimos
     * [194]@cjmochrie
     * [195]@jaza
     * [196]@fitnr
     * [197]@andela-mfalade
     * [198]@ntratcliff
     * [199]@schollz
     * [200]@aalireza
     * [201]@bfontaine
     * [202]@tmsherman
     * [203]@wodim
     * [204]@eh11fx
     * [205]@ammgws
     * [206]@otakumegane
     * [207]@tsunaminoai
     * [208]@matthewscholefield
     * [209]@danmayer

   initially developed at [210]buzzfeed.

     *    2019 github, inc.
     * [211]terms
     * [212]privacy
     * [213]security
     * [214]status
     * [215]help

     * [216]contact github
     * [217]pricing
     * [218]api
     * [219]training
     * [220]blog
     * [221]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [222]reload to refresh your
   session. you signed out in another tab or window. [223]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/jsvine/markovify/commits/master.atom
   3. https://github.com/jsvine/markovify#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/jsvine/markovify
  32. https://github.com/join
  33. https://github.com/login?return_to=/jsvine/markovify
  34. https://github.com/jsvine/markovify/watchers
  35. https://github.com/login?return_to=/jsvine/markovify
  36. https://github.com/jsvine/markovify/stargazers
  37. https://github.com/login?return_to=/jsvine/markovify
  38. https://github.com/jsvine/markovify/network/members
  39. https://github.com/jsvine
  40. https://github.com/jsvine/markovify
  41. https://github.com/jsvine/markovify
  42. https://github.com/jsvine/markovify/issues
  43. https://github.com/jsvine/markovify/pulls
  44. https://github.com/jsvine/markovify/projects
  45. https://github.com/jsvine/markovify/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/jsvine/markovify/commits/master
  48. https://github.com/jsvine/markovify/branches
  49. https://github.com/jsvine/markovify/releases
  50. https://github.com/jsvine/markovify/graphs/contributors
  51. https://github.com/jsvine/markovify/blob/master/license.txt
  52. https://github.com/jsvine/markovify/search?l=python
  53. https://github.com/jsvine/markovify/find/master
  54. https://github.com/jsvine/markovify/archive/master.zip
  55. https://github.com/login?return_to=https://github.com/jsvine/markovify
  56. https://github.com/join?return_to=/jsvine/markovify
  57. https://desktop.github.com/
  58. https://desktop.github.com/
  59. https://developer.apple.com/xcode/
  60. https://visualstudio.github.com/
  61. https://github.com/whatrocks
  62. https://github.com/jsvine
  63. https://github.com/jsvine/markovify/commits?author=whatrocks
  64. https://github.com/jsvine/markovify/commits?author=jsvine
  65. https://github.com/jsvine/markovify/commit/6968649a4c5d80f8a1b2279734417348013789e5
  66. https://github.com/jsvine/markovify/pull/100
  67. https://github.com/jsvine/markovify/commit/6968649a4c5d80f8a1b2279734417348013789e5
  68. https://github.com/whatrocks
  69. https://github.com/jsvine/markovify/commit/6968649a4c5d80f8a1b2279734417348013789e5
  70. https://github.com/jsvine/markovify/tree/6968649a4c5d80f8a1b2279734417348013789e5
  71. https://github.com/jsvine/markovify/tree/master/markovify
  72. https://github.com/jsvine/markovify/commit/c41af53ea3b5dfbb693e48a71803f6fd280c71a4
  73. https://github.com/jsvine/markovify/issues/90
  74. https://github.com/jsvine/markovify/commit/c41af53ea3b5dfbb693e48a71803f6fd280c71a4
  75. https://github.com/jsvine/markovify/tree/master/test
  76. https://github.com/jsvine/markovify/commit/c41af53ea3b5dfbb693e48a71803f6fd280c71a4
  77. https://github.com/jsvine/markovify/issues/90
  78. https://github.com/jsvine/markovify/commit/c41af53ea3b5dfbb693e48a71803f6fd280c71a4
  79. https://github.com/jsvine/markovify/blob/master/.gitignore
  80. https://github.com/jsvine/markovify/blob/master/.travis.yml
  81. https://github.com/jsvine/markovify/commit/c9e9456cf53e90466abc4ea3531306597d8a15f9
  82. https://github.com/jsvine/markovify/blob/master/license.txt
  83. https://github.com/jsvine/markovify/commit/1261bef94e73af662ba4975cc667dbca3a6eb08a
  84. https://github.com/jsvine/markovify/blob/master/manifest.in
  85. https://github.com/jsvine/markovify/blob/master/readme.md
  86. https://github.com/jsvine/markovify/blob/master/setup.py
  87. https://github.com/jsvine/markovify/blob/master/tox.ini
  88. https://pypi.python.org/pypi/markovify
  89. https://travis-ci.org/jsvine/markovify
  90. https://coveralls.io/github/jsvine/markovify
  91. https://pypi.python.org/pypi/markovify
  92. http://en.wikipedia.org/wiki/markov_chain#applications
  93. https://github.com/jsvine/markovify#why-markovify
  94. https://github.com/jsvine/markovify#installation
  95. https://github.com/jsvine/markovify#basic-usage
  96. https://github.com/jsvine/markovify#advanced-usage
  97. https://github.com/jsvine/markovify#markovify-in-the-wild
  98. https://github.com/jsvine/markovify#thanks
  99. https://github.com/jsvine/markovify/blob/master/markovify/chain.py
 100. https://spacy.io/
 101. https://spacy.io/docs/api/#benchmarks
 102. https://github.com/jsvine/markovify/blob/master/markovify/text.py
 103. http://www.buzzfeed.com/jsvine/the-tom-friedman-sentence-generator
 104. https://twitter.com/mot_namdeirf
 105. https://www.reddit.com/user/user_simulator
 106. https://github.com/trambelus/usersim
 107. https://www.reddit.com/r/subredditsimulator
 108. https://www.reddit.com/r/subredditsimmeta/comments/3d910r/i_was_inspired_by_this_place_and_made_a_twitter/ct3vjp0
 109. https://github.com/deimos/subredditsimulator
 110. http://college-crapplication.appspot.com/
 111. https://github.com/mattr555/college-crapplication
 112. https://twitter.com/markovpicard
 113. https://github.com/rdsheppard95/markovpicard
 114. https://sekrits.herokuapp.com/
 115. https://sekrits.herokuapp.com/
 116. http://news.ycombniator.com/
 117. https://github.com/orf/hnewssimulator
 118. http://www.stakattak.me/
 119. https://github.com/theannielin/hackharvard
 120. https://twitter.com/mashomatic
 121. http://electric.press/mash/
 122. https://github.com/hyperrhiz/mashbot
 123. http://maxlupo.com/mansfield-reporter/
 124. https://github.com/fitnr/twitter_markov
 125. https://twitter.com/bern_trump_bot
 126. https://github.com/michaelmartinez/bern_trump_bot
 127. https://twitter.com/realtrumptalk
 128. https://github.com/castlecorp/trumptalk
 129. http://taytay.mlavin.org/
 130. https://github.com/caktus/taytay
 131. https://twitter.com/bottalks
 132. http://ideasworthautomating.com/
 133. https://github.com/alexislloyd/tedbot
 134. http://rebecca-ricks.com/2016/05/06/internal-security-zones/
 135. https://github.com/baricks/internal-security-zones
 136. http://miraculousladybot.tumblr.com/
 137. https://en.wikipedia.org/wiki/miraculous:_tales_of_ladybug_&_cat_noir
 138. https://github.com/veggiedefender/miraculousladybot
 139. https://twitter.com/haikubotto
 140. https://github.com/balysv/haikubotto
 141. http://www.telegram.me/chatsimulatorbot
 142. https://github.com/guyaglionby/chatsimulatorbot
 143. http://emojipasta.club/
 144. https://github.com/ntratcliff/emojipasta.club
 145. http://towel.labs.wasv.me/
 146. https://github.com/wastevensv/towelday
 147. https://twitter.com/mercurialbot
 148. https://github.com/brahmcapoor/mercury
 149. http://becomeacurator.com/
 150. https://github.com/jjcastro/markov-curatorial-generator
 151. https://github.com/mannynotfound/interview-bot
 152. http://applepinegames.com/tech/steam-game-generator
 153. https://github.com/applepinegames/steam_game_generator
 154. https://twitter.com/dicedonionbot
 155. https://github.com/mobeets/fake-onion
 156. https://twitter.com/thought__leader
 157. http://jordan-wright.com/blog/post/2016-04-08-i-automated-infosec-thought-leadership/
 158. https://twitter.com/_murakamibot
 159. https://twitter.com/jamesjoycebot
 160. https://github.com/tmkuba/markovbot
 161. http://www.shartificialintelligence.com/
 162. https://github.com/lesguessing/shartificial-intelligence
 163. https://twitter.com/nightvalefeed
 164. https://twitter.com/nightvaleradio
 165. https://twitter.com/buzzfeed
 166. https://github.com/stepjue/night-vale-buzzfeed
 167. https://github.com/ammgws/wynbot
 168. https://github.com/ammgws/wynbot
 169. https://twitter.com/sealdonaldtrump
 170. https://github.com/lukewrites/sealdonaldtrump
 171. https://twitter.com/veeceebot
 172. https://github.com/yasyf/vcbot
 173. https://twitter.com/mar_phil_bot
 174. http://gfleetwood.github.io/philosophy-bot/
 175. https://gist.github.com/gfleetwood/569804c4f2ab372746661996542a8065
 176. https://github.com/smalawi/funzo-facts
 177. https://github.com/smalawi/funzo-facts/blob/master/funzo_fact_gen.py
 178. http://chainsinventinsanity.com/
 179. https://cardsagainsthumanity.com/
 180. https://github.com/tuxotaku/chains-invent-insanity
 181. https://twitter.com/candennisdream
 182. https://github.com/giantslovedeathmetal/dennis_bot
 183. https://github.com/eoinnoble/b9-indifference
 184. https://github.com/eoinnoble/b9-indifference
 185. http://bziarkowski.pl/adam
 186. https://github.com/bziarkowski/adam
 187. https://se-simulator.lw1.at/
 188. https://github.com/findus23/se-simulator
 189. https://twitter.com/bloggingbot
 190. http://artlung.com/blog/2018/02/23/markov-chains-are-hilarious/
 191. https://github.com/whatrocks/markov-commencement-speech
 192. https://github.com/orf
 193. https://github.com/deimos
 194. https://github.com/cjmochrie
 195. https://github.com/jaza
 196. https://github.com/fitnr
 197. https://github.com/andela-mfalade
 198. https://github.com/ntratcliff
 199. https://github.com/schollz
 200. https://github.com/aalireza
 201. https://github.com/bfontaine
 202. https://github.com/tmsherman
 203. https://github.com/wodim
 204. https://github.com/eh11fx
 205. https://github.com/ammgws
 206. https://github.com/otakumegane
 207. https://github.com/tsunaminoai
 208. https://github.com/matthewscholefield
 209. https://github.com/danmayer
 210. https://www.buzzfeed.com/
 211. https://github.com/site/terms
 212. https://github.com/site/privacy
 213. https://github.com/security
 214. https://githubstatus.com/
 215. https://help.github.com/
 216. https://github.com/contact
 217. https://github.com/pricing
 218. https://developer.github.com/
 219. https://training.github.com/
 220. https://github.blog/
 221. https://github.com/about
 222. https://github.com/jsvine/markovify
 223. https://github.com/jsvine/markovify

   hidden links:
 225. https://github.com/
 226. https://github.com/jsvine/markovify
 227. https://github.com/jsvine/markovify
 228. https://github.com/jsvine/markovify
 229. https://help.github.com/articles/which-remote-url-should-i-use
 230. https://github.com/jsvine/markovify#markovify
 231. https://github.com/jsvine/markovify#why-markovify
 232. https://github.com/jsvine/markovify#installation
 233. https://github.com/jsvine/markovify#basic-usage
 234. https://github.com/jsvine/markovify#advanced-usage
 235. https://github.com/jsvine/markovify#specifying-the-models-state-size
 236. https://github.com/jsvine/markovify#combining-models
 237. https://github.com/jsvine/markovify#extending-markovifytext
 238. https://github.com/jsvine/markovify#exporting
 239. https://github.com/jsvine/markovify#generating-markovifytext-models-from-very-large-corpora
 240. https://github.com/jsvine/markovify#markovify-in-the-wild
 241. https://github.com/jsvine/markovify#thanks
 242. https://github.com/
