   #[1]github [2]recent commits to spf:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]12
     * [35]star [36]87
     * [37]fork [38]11

[39]clic-lab/[40]spf

   [41]code [42]issues 0 [43]pull requests 0 [44]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [45]sign up
   cornell id29 framework [46]http://yoavartzi.com/spf
   [47]natural-language-processing [48]semantic-parser
   [49]machine-learning
     * [50]42 commits
     * [51]1 branch
     * [52]0 releases
     * [53]fetching contributors
     * [54]gpl-2.0

    1. [55]java 95.7%
    2. [56]lex 3.9%
    3. other 0.4%

   (button) java lex other
   branch: master (button) new pull request
   [57]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/c
   [58]download zip

downloading...

   want to be notified of new releases in clic-lab/spf?
   [59]sign in [60]sign up

launching github desktop...

   if nothing happens, [61]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [62]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [63]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [64]download the github extension for visual studio
   and try again.

   (button) go back
   [65]@yoavartzi
   [66]yoavartzi [67]update readme.md
   latest commit [68]42359b6 mar 30, 2018
   [69]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [70].metadata
   [71]id35.lexicon.factored.lambda
   [72]id35.lexicon
   [73]id35
   [74]data.singlesentence.lex
   [75]data.singlesentence
   [76]data.situated.labeled
   [77]data.situated
   [78]data
   [79]exec
   [80]explat
   [81]genlex.id35.template
   [82]genlex.id35.unification
   [83]genlex.id35
   [84]geoquery
   [85]learn.simple
   [86]learn.situated
   [87]learn.validation
   [88]learn
   [89]lib
   [90]mr.lambda.id35
   [91]mr.lambda.exec.naive
   [92]mr.lambda
   [93]parser.id35.cky.genlex
   [94]parser.id35.cky
   [95]parser.id35.factoredlex
   [96]parser.id35.features.basic
   [97]parser.id35.features.lambda
   [98]parser.id35.joint.cky [99]relatively minor updates -- see
   changelog.md dec 24, 2016
   [100]parser.id35.joint.genlex
   [101]parser.id35.joint
   [102]parser.id35.lambda
   [103]parser.id35.normalform
   [104]parser.id35.rules.coordination.lambda
   [105]parser.id35.rules.coordination
   [106]parser.id35.rules.lambda
   [107]parser.id35.rules.skolem
   [108]parser.id35.rules
   [109]parser.id35
   [110]spfbase
   [111]spfdist
   [112]spfproxy
   [113]test.id35.lambda
   [114]test.exec
   [115]test
   [116]unittests
   [117]utils
   [118].gitignore
   [119]changelog.md
   [120]license
   [121]readme.md
   [122]version
   [123]build.properties
   [124]build.xml

readme.md

[125]cornell spf - cornell id29 framework

authors

   developed and maintained by [126]yoav artzi
   past contributors: [127]luke zettlemoyer, tom kwiatkowski, [128]kenton
   lee

tutorial

   see our acl 2013 tutorial for an introduction to id29 with
   id35s (id35s). the slides and videos are
   available [129]here.

discussion group

   please post all technical questions and inquiries in our the
   [[130]https://groups.google.com/d/forum/cornellspf](cornell spf google
   group).

attribution

   when using cornell spf, please acknowledge it by citing:

   [131]artzi, yoav (2016). cornell spf: cornell id29
   framework.

   [132]bibtex:
@misc{artzi:16spf,
    author = {yoav artzi},
    title = {{cornell spf: cornell id29 framework}},
    year = {2016},
    eprint = {arxiv:1311.3011},
}

   the article and bib file are both attached to the source code. when
   using specific algorithms please cite the appropriate work (see below).

validation-based learning, joint id136 and coarse-to-fine lexical
generation

   yoav artzi and luke zettlemoyer. [133]weakly supervised learning of
   semantic parsers for mapping instructions to actions. in transactions
   of the association for computational linguistics (tacl), 2013.

loss-sensitive learning

   yoav artzi and luke zettlemoyer. [134]id64 semantic parsers
   from conversations. in proceedings of the conference on empirical
   methods in natural language processing (emnlp), 2011.

unification-based genlex

   tom kwiatkowski, luke zettlemoyer, sharon goldwater, and mark steedman.
   [135]inducing probabilistic id35 grammars from logical form with
   higher-order unification. in proceedings of the conference on empirical
   methods in natural language processing (emnlp), 2010.

factored lexicons

   tom kwiatkowski, luke zettlemoyer, sharon goldwater, and mark steedman.
   [136]lexical generalization in id35 grammar induction for semantic
   parsing. in proceedings of the conference on empirical methods in
   natural language processing (emnlp), 2011.

template-based genlex

   luke zettlemoyer and michael collins. [137]online learning of relaxed
   id35 grammars for parsing to logical form. in proceedings of the joint
   conference on empirical methods in natural language processing and
   computational natural language learning (emnlp-conll), 2007.

   luke zettlemoyer and michael collins. [138]learning to map sentences to
   logical form: structured classification with probabilistic categorial
   grammars. in proceedings of the twenty first conference on uncertainty
   in artificial intelligence (uai), 2005.

documentation

   we are constantly updating this section. most of the documentation is
   within the code in the form of javadoc.

building

   to compile spf use: ant dist. the output jar file will be in the dist
   directory. you can also download the compiled jar file from the
   [139]downloads section.

running example experiments

   the framework contains an example experiment using the geoquery corpus.
   to use development fold 0 for testing, and training on the other folds,
   use: java -jar dist/spf-1.4.jar
   geoquery/experiments/template/dev.cross/dev.fold0.exp
   the log and output files are written to a newly generated directory in
   the experiment directory: geoquery/experiments/template/dev.cross/

   view the .exp file and see how it defines arguments and how it includes
   them from other files. another critical point of entry is the class
   edu.cornell.cs.lil.tiny.geoquery.geomain. the experiments platform
   (explat) is reviewed [below][explat].

working with the code

   the code is divided into many projects with dependencies between them.
   you can work with the code with in editor and build it with the
   accompanying ant script. however, we recommend using eclipse. each
   directory is an eclipse project and can be easily imported into
   eclipse. to do so select import from the file menu and choose existing
   projects into workspace. the root directory should be the code
   directory and all projects should be selected by default. the
   dependencies will be imported automatically. to successfully build spf
   in eclipse you will need to set the classpath variable tiny_repo to the
   code directory. to so go to preferences -> java -> build path ->
   classpath variables, add a new variable with the name tiny_repo and a
   folder value that points to the repository location.

getting to know the code

   there are two ways to use spf. the first is by simply calling the code
   in your own classes. to see how a complete experiment can be set up
   programmatically please see
   edu.cornell.cs.lil.tiny.geoquery.geoexpsimple. the main(string[])
   method in this class initializes the framework, instantiates all
   required objects for id136, learning and testing and launches the
   appropriate jobs in order. a slightly more robust way to conduct
   experiments is provided by the [explat][explat] internal experiments
   framework. the previously mentioned example experiments are using
   explat.

logging in spf

   spf's logging system should be initialized prior to using the
   framework. including the default output stream (e.g.,
   logger.default_log = new log(system.err);) and log threshold (e.g.,
   loglevel.setloglevel(loglevel.info);). only log messages of the set
   threshold or above will be logged. each log messages is prefixed by the
   originating class by default, to turn off this behavior use
   logger.setskipprefix(true);. when using [explat][explat], logging
   messages are printed to job specific files, which are stored in a
   special directory created for the experiment.

   all classes that output log messages include a public static object
   called log of type edu.cornell.cs.utils.log.ilogger. all logging
   messages within the class are created using the logger. this object
   also provides more granular control of the logging level. you may set a
   custom log level for each class. for example, to set the log level for
   the multi-threaded parser to debug use
   edu.cornell.cs.lil.tiny.parser.id35.cky.multi.multickyparser.log.setcust
   oid113vel(loglevel.debug). note that this will only affect the log
   messages created within this class, and not any parent or child
   classes.

   want to use the logging system in your own code or add new log
   messages? you can view the interface edu.cornell.cs.utils.log.ilogger
   to see what logging methods are available.

explat: spf's experiments platform

   explat is spf's experiments platform. it's intended to streamline
   experiments and help you avoid huge main(string[]) methods that just
   initialize one things after the other and are a pain to update.

   an explat experiments is defined by two parts: a backend class in the
   code and a .exp file. for example, consider the geoquery experiment
   accompanying spf. the class edu.cornell.cs.lil.tiny.geoquery.geoexp
   provides the backend code, while the .exp files in geoquery/experiments
   define the resources used and the jobs to be executed. for example, the
   file geoquery/experiments/template/test/test.exp defines the evaluation
   experiment. in this experiment we use the 10 development folds for
   training and test on the held-out set.

   each .exp file includes three sections separated by empty lines:
    1. global parameters
    2. resources
    3. jobs
       empty lines may not appear in any part of the .exp file or any
       included files, except to separate between the three sections. in
       general, each line includes a single directive. the include=<file>
       directive may be used at any point to include a file. the file is
       included in similar style to c include statements, meaning: the
       text is pasted instead of the include directive. the path of the
       included file should be relative to the location of the .exp file.
       each directive (line) is a white-space separated sequence of
       key-value pairs (key=value). to refer to the value of a previously
       defined parameters use %{parameter_name} in the value slot. the
       reference is resolved first in the local scope of the current
       directive, and if no parameter of that name is found, it is
       resolved in the scope of the global parameters. the parameters are
       read in sequence and the namespace of the current directive is
       updated in that order.

global parameters

   this section includes various parameters that may be used when defining
   resources and jobs later. each parameter is defined as a key-value
   directive: key=value. each directive defines a single parameter. the
   values are read as strings. the parameters are either used in the code
   or by the rest of the .exp file. for example, to see which parameters
   are used by the geoquery experiment, see the parameters read by the
   constructor of edu.cornell.cs.lil.tiny.geoquery.geoexp and the classes
   it extends.

resources

   each directive in this section defines a resource that can be used
   later, either in other resources or in jobs. the id parameter defines
   the name of the resource. resources ids may not override previously
   defined names. the type parameter defines the type of the resource. the
   available resources are registered in the code. for example, the class
   edu.cornell.cs.lil.tiny.geoquery.georesourcerepo is responsible for
   registering resources for the geoquery experiment. to use a resource
   its creator is registered. a creator is basically a factory that is
   able to get a directive in the form of parameters, interpret them and
   instantiate an object. the type() of each creator provides the type of
   the resource. the other key-value pairs provide various parameters that
   are interpreted by the resource creator. see the creators themselves
   for the available parameters. all creators implement the interface
   edu.cornell.cs.lil.tiny.explat.resources.iresourceobjectcreator. the
   resource creators each define a usage() function which documents the
   available parameters of the resource.

jobs

   each directive in this section defines a job to be executed. the type
   of the job is defined by the type parameter. the id of the job is
   defined by the id parameter. the jobs on which this job depends are
   defined by the dep parameter, which includes a comma-separated list of
   job ids. jobs are executed in parallel, unless a dependency is
   declared. the rest of the parameters define arguments for the job.
   these may refer to resources, global parameters or directly include
   values. job directives are interpreted by methods in the experiment
   class. for example, in the geoquery experiment the class
   edu.cornell.cs.lil.tiny.geoquery.geoexp includes a number of methods to
   read job directives and create jobs, see the method
   createjob(parameters) for the available job types and the methods that
   handle them.

working with logical expressions

   see logicallanguageservices for the main service class that is required
   for the logical language to work. most operations on logical
   expressions are done using the visitor design pattern, see
   ilogicalexpressionvisitor.

id35s (id35s) in spf

   id35 categories are represented by
   edu.cornell.cs.nlp.spf.id35.categories.category and the classes that
   extend it. the starting classes for id35 binary operations is
   edu.cornell.cs.nlp.spf.parser.id35.rules.ibinaryparserule and for unary
   operations edu.cornell.cs.nlp.spf.parser.id35.rules.iunaryparserule.

basic operations on categories

   see icategoryservices.

known issues

   the cky parser output doesn't marginalize properly over logical forms
   under certain conditions.
   the class ckyderivation stores a single cky chart cell, which means
   that it stores a single category (pairing of syntax and logical form).
   when the parser is defined to consider more than one syntactic category
   as a complete parse, it will often lead to different cky parses with
   the same logical form. this may lead to errors in computing a logical
   form's id203. to correctly compute the probably, collect the
   inside score of all ckyderivation objects with the same logical form,
   add their inside score and normalize.

troubleshooting

   i am getting nans and/or infinity values in my updates or an exception
   saying my updates are invalid.
   if you are using an exponentiated model with gradient updates, try to
   adjust the learning rate. with an exponentiated model the values might
   get too large and it's advised to scale them down.

   i am having trouble re-creating the results from kwiatkowski et al.
   2010 and kwiatkowski et al. 2011 with the unification-based genlex
   procedure.
   the unification code in spf is not identical to the original paper. the
   code for the original paper is available [140]online. if you want to
   re-create the results, this is the way to go. this code is basically a
   very old version of what spf started from. be warned, it's messy. the
   code in spf is doing a few things differently, including more liberal
   splitting and no support of certain features that the original code
   contains. we hope to bring spf's version of splitting closer to the
   original paper in the future.

   when using a factored lexicon, i sometimes see two lexical entries that
   have a similar structure factored into different lexical templates,
   although they should share the same template.
   this is a known issue in the implementation of factoring the current
   version of spf. we hope to update the framework soon with a fix, but
   have no concrete date. however, in practice, we noticed no degradation
   in performance due to this issue.

publications and projects using spf

   please let us know if you used spf in your published work and we will
   be happy to list it here.

   tom kwiatkowski, eunsol choi, yoav artzi and luke zettlemoyer.
   [141]scaling semantic parsers with on-the-fly ontology matching. in
   proceedings of the conference on empirical methods in natural language
   processing (emnlp), 2013.

   nicholas fitzgerald, yoav artzi and luke zettlemoyer. [142]learning
   distributions over logical forms for referring expression generation.
   in proceedings of the conference on empirical methods in natural
   language processing (emnlp), 2013. [143]code and data.

   yoav artzi and luke zettlemoyer. [144]weakly supervised learning of
   semantic parsers for mapping instructions to actions. in transactions
   of the association for computational linguistics (tacl), 2013.

acknowledgements

   we would like to thank our early users for helping making spf better
   (in alphabetical order):
   sebastian beschke, hamburg university
   eunsol choi, the university of washington
   nicholas fitzgerald, the university of washington
   jun ki lee, brown university kenton lee, the university of washington
   dipendra misra, cornell university
   gabriel schubiner, the university of washington
   adrienne wang, the university of washington

license

   cornell spf - the cornell id29 framework. copyright (c)
   2013 yoav artzi

   this program is free software; you can redistribute it and/or modify it
   under the terms of the gnu general public license as published by the
   free software foundation; either version 2 of the license, or any later
   version.

   this program is distributed in the hope that it will be useful, but
   without any warranty; without even the implied warranty of
   merchantability or fitness for a particular purpose. see the gnu
   general public license for more details.

   you should have received a copy of the gnu general public license along
   with this program; if not, write to the free software foundation, inc.,
   51 franklin street, fifth floor, boston, ma 02110-1301, usa.

     *    2019 github, inc.
     * [145]terms
     * [146]privacy
     * [147]security
     * [148]status
     * [149]help

     * [150]contact github
     * [151]pricing
     * [152]api
     * [153]training
     * [154]blog
     * [155]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [156]reload to refresh your
   session. you signed out in another tab or window. [157]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/clic-lab/spf/commits/master.atom
   3. https://github.com/clic-lab/spf#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/clic-lab/spf
  32. https://github.com/join
  33. https://github.com/login?return_to=/clic-lab/spf
  34. https://github.com/clic-lab/spf/watchers
  35. https://github.com/login?return_to=/clic-lab/spf
  36. https://github.com/clic-lab/spf/stargazers
  37. https://github.com/login?return_to=/clic-lab/spf
  38. https://github.com/clic-lab/spf/network/members
  39. https://github.com/clic-lab
  40. https://github.com/clic-lab/spf
  41. https://github.com/clic-lab/spf
  42. https://github.com/clic-lab/spf/issues
  43. https://github.com/clic-lab/spf/pulls
  44. https://github.com/clic-lab/spf/pulse
  45. https://github.com/join?source=prompt-code
  46. http://yoavartzi.com/spf
  47. https://github.com/topics/natural-language-processing
  48. https://github.com/topics/semantic-parser
  49. https://github.com/topics/machine-learning
  50. https://github.com/clic-lab/spf/commits/master
  51. https://github.com/clic-lab/spf/branches
  52. https://github.com/clic-lab/spf/releases
  53. https://github.com/clic-lab/spf/graphs/contributors
  54. https://github.com/clic-lab/spf/blob/master/license
  55. https://github.com/clic-lab/spf/search?l=java
  56. https://github.com/clic-lab/spf/search?l=lex
  57. https://github.com/clic-lab/spf/find/master
  58. https://github.com/clic-lab/spf/archive/master.zip
  59. https://github.com/login?return_to=https://github.com/clic-lab/spf
  60. https://github.com/join?return_to=/clic-lab/spf
  61. https://desktop.github.com/
  62. https://desktop.github.com/
  63. https://developer.apple.com/xcode/
  64. https://visualstudio.github.com/
  65. https://github.com/yoavartzi
  66. https://github.com/clic-lab/spf/commits?author=yoavartzi
  67. https://github.com/clic-lab/spf/commit/42359b6f14f120712f7b16d8063f531e2ef91a5a
  68. https://github.com/clic-lab/spf/commit/42359b6f14f120712f7b16d8063f531e2ef91a5a
  69. https://github.com/clic-lab/spf/tree/42359b6f14f120712f7b16d8063f531e2ef91a5a
  70. https://github.com/clic-lab/spf/tree/master/.metadata
  71. https://github.com/clic-lab/spf/tree/master/id35.lexicon.factored.lambda
  72. https://github.com/clic-lab/spf/tree/master/id35.lexicon
  73. https://github.com/clic-lab/spf/tree/master/id35
  74. https://github.com/clic-lab/spf/tree/master/data.singlesentence.lex
  75. https://github.com/clic-lab/spf/tree/master/data.singlesentence
  76. https://github.com/clic-lab/spf/tree/master/data.situated.labeled
  77. https://github.com/clic-lab/spf/tree/master/data.situated
  78. https://github.com/clic-lab/spf/tree/master/data
  79. https://github.com/clic-lab/spf/tree/master/exec
  80. https://github.com/clic-lab/spf/tree/master/explat
  81. https://github.com/clic-lab/spf/tree/master/genlex.id35.template
  82. https://github.com/clic-lab/spf/tree/master/genlex.id35.unification
  83. https://github.com/clic-lab/spf/tree/master/genlex.id35
  84. https://github.com/clic-lab/spf/tree/master/geoquery
  85. https://github.com/clic-lab/spf/tree/master/learn.simple
  86. https://github.com/clic-lab/spf/tree/master/learn.situated
  87. https://github.com/clic-lab/spf/tree/master/learn.validation
  88. https://github.com/clic-lab/spf/tree/master/learn
  89. https://github.com/clic-lab/spf/tree/master/lib
  90. https://github.com/clic-lab/spf/tree/master/mr.lambda.id35
  91. https://github.com/clic-lab/spf/tree/master/mr.lambda.exec.naive
  92. https://github.com/clic-lab/spf/tree/master/mr.lambda
  93. https://github.com/clic-lab/spf/tree/master/parser.id35.cky.genlex
  94. https://github.com/clic-lab/spf/tree/master/parser.id35.cky
  95. https://github.com/clic-lab/spf/tree/master/parser.id35.factoredlex
  96. https://github.com/clic-lab/spf/tree/master/parser.id35.features.basic
  97. https://github.com/clic-lab/spf/tree/master/parser.id35.features.lambda
  98. https://github.com/clic-lab/spf/tree/master/parser.id35.joint.cky
  99. https://github.com/clic-lab/spf/commit/6dba2cbbece0d7240c4ddbaad612497052a05a09
 100. https://github.com/clic-lab/spf/tree/master/parser.id35.joint.genlex
 101. https://github.com/clic-lab/spf/tree/master/parser.id35.joint
 102. https://github.com/clic-lab/spf/tree/master/parser.id35.lambda
 103. https://github.com/clic-lab/spf/tree/master/parser.id35.normalform
 104. https://github.com/clic-lab/spf/tree/master/parser.id35.rules.coordination.lambda
 105. https://github.com/clic-lab/spf/tree/master/parser.id35.rules.coordination
 106. https://github.com/clic-lab/spf/tree/master/parser.id35.rules.lambda
 107. https://github.com/clic-lab/spf/tree/master/parser.id35.rules.skolem
 108. https://github.com/clic-lab/spf/tree/master/parser.id35.rules
 109. https://github.com/clic-lab/spf/tree/master/parser.id35
 110. https://github.com/clic-lab/spf/tree/master/spfbase
 111. https://github.com/clic-lab/spf/tree/master/spfdist
 112. https://github.com/clic-lab/spf/tree/master/spfproxy
 113. https://github.com/clic-lab/spf/tree/master/test.id35.lambda
 114. https://github.com/clic-lab/spf/tree/master/test.exec
 115. https://github.com/clic-lab/spf/tree/master/test
 116. https://github.com/clic-lab/spf/tree/master/unittests
 117. https://github.com/clic-lab/spf/tree/master/utils
 118. https://github.com/clic-lab/spf/blob/master/.gitignore
 119. https://github.com/clic-lab/spf/blob/master/changelog.md
 120. https://github.com/clic-lab/spf/blob/master/license
 121. https://github.com/clic-lab/spf/blob/master/readme.md
 122. https://github.com/clic-lab/spf/blob/master/version
 123. https://github.com/clic-lab/spf/blob/master/build.properties
 124. https://github.com/clic-lab/spf/blob/master/build.xml
 125. http://yoavartzi.com/spf
 126. http://yoavartzi.com/
 127. http://homes.cs.washington.edu/~lsz/
 128. http://homes.cs.washington.edu/~kentonl/
 129. http://yoavartzi.com/tutorial
 130. https://groups.google.com/d/forum/cornellspf](cornell
 131. https://arxiv.org/abs/1311.3011
 132. http://yoavartzi.com/pub/az-arxiv.2013.bib
 133. http://yoavartzi.com/pub/az-tacl.2013.pdf
 134. http://yoavartzi.com/pub/az-emnlp.2011.pdf
 135. http://homes.cs.washington.edu/~lsz/papers/kzgs-emnlp2010.pdf
 136. http://homes.cs.washington.edu/~lsz/papers/kzgs-emnlp2011.pdf
 137. http://homes.cs.washington.edu/~lsz/papers/zc-emnlp07.pdf
 138. http://homes.cs.washington.edu/~lsz/papers/zc-uai05.pdf
 139. https://bitbucket.org/yoavartzi/spf/downloads
 140. https://homes.cs.washington.edu/~lsz/code/ubl.tgz
 141. http://yoavartzi.com/pub/kcaz-emnlp.2013.pdf
 142. http://yoavartzi.com/pub/faz-emnlp.2013.pdf
 143. http://yoavartzi.com/navi
 144. http://yoavartzi.com/pub/az-tacl.2013.pdf
 145. https://github.com/site/terms
 146. https://github.com/site/privacy
 147. https://github.com/security
 148. https://githubstatus.com/
 149. https://help.github.com/
 150. https://github.com/contact
 151. https://github.com/pricing
 152. https://developer.github.com/
 153. https://training.github.com/
 154. https://github.blog/
 155. https://github.com/about
 156. https://github.com/clic-lab/spf
 157. https://github.com/clic-lab/spf

   hidden links:
 159. https://github.com/
 160. https://github.com/clic-lab/spf
 161. https://github.com/clic-lab/spf
 162. https://github.com/clic-lab/spf
 163. https://help.github.com/articles/which-remote-url-should-i-use
 164. https://github.com/clic-lab/spf#cornell-spf---cornell-semantic-parsing-framework
 165. https://github.com/clic-lab/spf#authors
 166. https://github.com/clic-lab/spf#tutorial
 167. https://github.com/clic-lab/spf#discussion-group
 168. https://github.com/clic-lab/spf#attribution
 169. https://github.com/clic-lab/spf#validation-based-learning-joint-id136-and-coarse-to-fine-lexical-generation
 170. https://github.com/clic-lab/spf#loss-sensitive-learning
 171. https://github.com/clic-lab/spf#unification-based-genlex
 172. https://github.com/clic-lab/spf#factored-lexicons
 173. https://github.com/clic-lab/spf#template-based-genlex
 174. https://github.com/clic-lab/spf#documentation
 175. https://github.com/clic-lab/spf#building
 176. https://github.com/clic-lab/spf#running-example-experiments
 177. https://github.com/clic-lab/spf#working-with-the-code
 178. https://github.com/clic-lab/spf#getting-to-know-the-code
 179. https://github.com/clic-lab/spf#logging-in-spf
 180. https://github.com/clic-lab/spf#explat-spfs-experiments-platform
 181. https://github.com/clic-lab/spf#global-parameters
 182. https://github.com/clic-lab/spf#resources
 183. https://github.com/clic-lab/spf#jobs
 184. https://github.com/clic-lab/spf#working-with-logical-expressions
 185. https://github.com/clic-lab/spf#combinatory-categorial-grammars-id35s-in-spf
 186. https://github.com/clic-lab/spf#basic-operations-on-categories
 187. https://github.com/clic-lab/spf#known-issues
 188. https://github.com/clic-lab/spf#troubleshooting
 189. https://github.com/clic-lab/spf#publications-and-projects-using-spf
 190. https://github.com/clic-lab/spf#acknowledgements
 191. https://github.com/clic-lab/spf#license
 192. https://github.com/
