   #[1]github [2]recent commits to puck:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]28
     * [35]star [36]228
     * [37]fork [38]25

[39]dlwh/[40]puck

   [41]code [42]issues 1 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   puck is a lightning-fast parser for natural languages using gpus
   [47]http://www.scalanlp.org
     * [48]536 commits
     * [49]13 branches
     * [50]1 release
     * [51]fetching contributors
     * [52]apache-2.0

    1. [53]scala 82.9%
    2. [54]java 17.1%

   (button) scala java
   branch: master (button) new pull request
   [55]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/d
   [56]download zip

downloading...

   want to be notified of new releases in dlwh/puck?
   [57]sign in [58]sign up

launching github desktop...

   if nothing happens, [59]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [60]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [61]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [62]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [63]permalink
   type       name       latest commit message commit time
        failed to load latest commit information.
        [64]project
        [65]src
        [66]textgrammars
        [67].gitignore
        [68]license
        [69]readme.md
        [70]build.sbt

readme.md

puck [71]build status

   (c) 2014 david hall

   puck is a high-speed, high-accuracy parser for natural languages. it's
   (currently) designed for use with grammars trained with the berkeley
   parser and on nvidia cards. on recent-ish nvidia cards (e.g. a gtx
   680), around 400 sentences a second with a full berkeley grammar for
   length <= 40 sentences.

   puck is only useful if you plan on parsing a lot of sentences. on the
   order of a few thousand. also, it's designed for throughput, not
   latency.

   the current version is 0.2.

   puck is based on the research in two papers:
     * david hall, taylor berg-kirkpatrick, john canny, and dan klein.
       2014. better, faster, sparser gpu parsing. to appear in proceedings
       of the association for computational linguistics.
     * john canny, david hall, and dan klein. 2013. a multi-tera   op
       constiuency parser using gpus. in proceedings of empirical methods
       in natural language processing.

documentation

   puck has three main classes. the first is for compiling the gpu
   representation of a grammar, the second is for parsing with that
   grammar, and the third is for experimental use. running --help with any
   of these commands will list all options.

obtaining puck

   a prebuilt version of puck can be downloaded from
   [72]http://www.scalanlp.org/releases/puck-assembly-0.2.jar. plain text
   grammar files (needed to set up a parser) can be obtained from this
   repository in the textgrammars/ directory.

building puck

   this project can be built with sbt 0.23. run sbt assembly to create a
   fat jar in target/scala-2.10/

compiling a grammar

   the first step in using puck is to compile a grammar to gpu code. the
   best way to do this is to run the command
java -xmx4g -cp target/scala-2.10/puck-assembly-0.2.jar puck.parser.compilegramm
ar --textgrammarprefix textgrammars/wsj_1.gr:textgrammars/wsj_6.gr --grammar gra
mmar.grz

   this command will take a long time: up to an hour. when it's finished,
   this program will produce a parser equivalent to the one used in the
   2014 paper in a file called grammar.grz. the textgrammarprefix argument
   accepts a sequence of plain text grammars, separated by colons. we have
   provided the cascade of grammars used in the berkeley parser for
   english. in practice, using wsj_1 and wsj_6 gives you all the benefit
   for gpu grammars.

running the parser

   the parser can be run with:
java -xmx4g -cp target/scala-2.10/puck-assembly-0.2.jar puck.parser.runparser --
grammar grammar.grz <input files>

   this will output 1 tree per line to files named [input file
   name].parsed. by default it will skip sentences longer than 50 words,
   printing out "(())" instead. if no files are listed, it will read from
   standard input.

   if the sentences are already split up into one sentence per line, use
   --sentences newline. if the words are already tokenized into ptb
   tokens, use --tokens whitespace.

   initializing the parser can take 2-3 minutes, longer if it's your first
   time starting the parser. so this parser is only worth your time if you
   plan on parsing a lot of text. also note that you won't get 400
   sentences a second if you aren't parsing a lot of sentences.

experiments

   we benchmarked our parser by running it on the treebank.
java -cp target/scala-2.10/puck-assembly-0.2.jar puck.parser.clparser --maxparse
length 40 --treebank.path /path/to/treebank/wsj --maxlength 40 --numtoparse 2000
0  --reproject false --viterbi true  --cache false --textgrammarprefix textgramm
ars/wsj_1.gr:textgrammars/wsj_6.gr --mem 4g --device 680"

   should reproduce.

acknowledgements

   david hall is supported by a google phd fellowship. taylor
   berg-kirkpatrick is supported by a qualcomm fellowship. we gratefully
   acknowledge the support of nvidia corporation with the donation of the
   tesla k40 gpu used for this research.

     *    2019 github, inc.
     * [73]terms
     * [74]privacy
     * [75]security
     * [76]status
     * [77]help

     * [78]contact github
     * [79]pricing
     * [80]api
     * [81]training
     * [82]blog
     * [83]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [84]reload to refresh your
   session. you signed out in another tab or window. [85]reload to refresh
   your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/dlwh/puck/commits/master.atom
   3. https://github.com/dlwh/puck/#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/dlwh/puck
  32. https://github.com/join
  33. https://github.com/login?return_to=/dlwh/puck
  34. https://github.com/dlwh/puck/watchers
  35. https://github.com/login?return_to=/dlwh/puck
  36. https://github.com/dlwh/puck/stargazers
  37. https://github.com/login?return_to=/dlwh/puck
  38. https://github.com/dlwh/puck/network/members
  39. https://github.com/dlwh
  40. https://github.com/dlwh/puck
  41. https://github.com/dlwh/puck
  42. https://github.com/dlwh/puck/issues
  43. https://github.com/dlwh/puck/pulls
  44. https://github.com/dlwh/puck/projects
  45. https://github.com/dlwh/puck/pulse
  46. https://github.com/join?source=prompt-code
  47. http://www.scalanlp.org/
  48. https://github.com/dlwh/puck/commits/master
  49. https://github.com/dlwh/puck/branches
  50. https://github.com/dlwh/puck/releases
  51. https://github.com/dlwh/puck/graphs/contributors
  52. https://github.com/dlwh/puck/blob/master/license
  53. https://github.com/dlwh/puck/search?l=scala
  54. https://github.com/dlwh/puck/search?l=java
  55. https://github.com/dlwh/puck/find/master
  56. https://github.com/dlwh/puck/archive/master.zip
  57. https://github.com/login?return_to=https://github.com/dlwh/puck/
  58. https://github.com/join?return_to=/dlwh/puck
  59. https://desktop.github.com/
  60. https://desktop.github.com/
  61. https://developer.apple.com/xcode/
  62. https://visualstudio.github.com/
  63. https://github.com/dlwh/puck/tree/f8f0a0ac106afe70a9fb10fba21d8f3ad82706a2
  64. https://github.com/dlwh/puck/tree/master/project
  65. https://github.com/dlwh/puck/tree/master/src
  66. https://github.com/dlwh/puck/tree/master/textgrammars
  67. https://github.com/dlwh/puck/blob/master/.gitignore
  68. https://github.com/dlwh/puck/blob/master/license
  69. https://github.com/dlwh/puck/blob/master/readme.md
  70. https://github.com/dlwh/puck/blob/master/build.sbt
  71. https://travis-ci.org/dlwh/puck
  72. http://www.scalanlp.org/releases/puck-assembly-0.2.jar
  73. https://github.com/site/terms
  74. https://github.com/site/privacy
  75. https://github.com/security
  76. https://githubstatus.com/
  77. https://help.github.com/
  78. https://github.com/contact
  79. https://github.com/pricing
  80. https://developer.github.com/
  81. https://training.github.com/
  82. https://github.blog/
  83. https://github.com/about
  84. https://github.com/dlwh/puck/
  85. https://github.com/dlwh/puck/

   hidden links:
  87. https://github.com/
  88. https://github.com/dlwh/puck/
  89. https://github.com/dlwh/puck/
  90. https://github.com/dlwh/puck/
  91. https://help.github.com/articles/which-remote-url-should-i-use
  92. https://github.com/dlwh/puck/#puck-
  93. https://github.com/dlwh/puck/#documentation
  94. https://github.com/dlwh/puck/#obtaining-puck
  95. https://github.com/dlwh/puck/#building-puck
  96. https://github.com/dlwh/puck/#compiling-a-grammar
  97. https://github.com/dlwh/puck/#running-the-parser
  98. https://github.com/dlwh/puck/#experiments
  99. https://github.com/dlwh/puck/#acknowledgements
 100. https://github.com/
