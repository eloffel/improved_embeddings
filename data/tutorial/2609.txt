   #[1]github [2]recent commits to neuraltalk:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]458
     * [35]star [36]4,979
     * [37]fork [38]1,299

[39]karpathy/[40]neuraltalk

   [41]code [42]issues 25 [43]pull requests 3 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   neuraltalk is a python+numpy project for learning multimodal recurrent
   neural networks that describe images with sentences.
     * [47]33 commits
     * [48]1 branch
     * [49]0 releases
     * [50]fetching contributors

    1. [51]python 80.3%
    2. [52]html 11.4%
    3. [53]perl 5.2%
    4. [54]matlab 2.0%
    5. other 1.1%

   (button) python html perl matlab other
   branch: master (button) new pull request
   [55]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/k
   [56]download zip

downloading...

   want to be notified of new releases in karpathy/neuraltalk?
   [57]sign in [58]sign up

launching github desktop...

   if nothing happens, [59]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [60]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [61]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [62]download the github extension for visual studio
   and try again.

   (button) go back
   [63]@karpathy
   [64]karpathy [65]adding deprecation warning
   latest commit [66]c36bd0a nov 20, 2015
   [67]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [68]cv [69]first commit of code, phew nov 28, 2014
   [70]data [71]first commit of code, phew nov 28, 2014
   [72]eval [73]changing evaluation to use a perl script consistent with
   what the oth    jan 10, 2015
   [74]example_images [75]fix another typo jul 18, 2015
   [76]imageid56 [77]fix typos apr 22, 2015
   [78]matlab_features_reference [79]update to current matcaffe syntax nov
   14, 2015
   [80]python_features [81]extract_features.py fixed for caffe update nov
   10, 2015
   [82]status [83]first commit of code, phew nov 28, 2014
   [84]vis_resources [85]first commit of code, phew nov 28, 2014
   [86].gitignore [87]first commit of code, phew nov 28, 2014
   [88]readme.md
   [89]driver.py [90]adding ability to feed image only once in beginnning.
   works better. jan 9, 2015
   [91]eval_sentence_predictions.py
   [92]monitorcv.html [93]first commit of code, phew nov 28, 2014
   [94]predict_on_images.py [95]adding ability to predict on arbitrary
   images and the script that run    jan 27, 2015
   [96]py_caffe_feat_extract.py
   [97]requirements.txt
   [98]visualize_result_struct.html

readme.md

   #neuraltalk

   warning: deprecated. hi there, this code is now quite old and
   inefficient, and now deprecated. i am leaving it on github for
   educational purposes, but if you would like to run or train image
   captioning i warmly recommend my new code release [99]neuraltalk2.
   neuraltalk2 is written in [100]torch and is significantly (i mean,
   ~100x+) faster because it is batched and runs on the gpu. it also
   supports id98 finetuning, which helps a lot with performance.

   this project contains python+numpy source code for learning multimodal
   recurrent neural networks that describe images with sentences.

   this line of work was recently featured in a [101]new york times
   article and has been the subject of multiple academic papers from the
   research community over the last few months. this code currently
   implements the models proposed by [102]vinyals et al. from google (id98
   + lstm) and by [103]karpathy and fei-fei from stanford (id98 + id56).
   both models take an image and predict its sentence description with a
   recurrent neural network (either an lstm or an id56).

overview

   the pipeline for the project looks as follows:
     * the input is a dataset of images and 5 sentence descriptions that
       were collected with amazon mechanical turk. in particular, this
       code base is set up for [104]flickr8k, [105]flickr30k, and
       [106]mscoco datasets.
     * in the training stage, the images are fed as input to id56 and the
       id56 is asked to predict the words of the sentence, conditioned on
       the current word and previous context as mediated by the hidden
       layers of the neural network. in this stage, the parameters of the
       networks are trained with id26.
     * in the prediction stage, a witheld set of images is passed to id56
       and the id56 generates the sentence one word at a time. the results
       are evaluated with id7 score. the code also includes utilities for
       visualizing the results in html.

dependencies

   python 2.7, modern version of numpy/scipy, perl (if you want to do id7
   score evaluation), argparse module. most of these are okay to install
   with pip. to install all dependencies at once, run the command pip
   install -r requirements.txt

   i only tested this code with ubuntu 12.04, but i tried to make it as
   generic as possible (e.g. use of os module for file system interactions
   etc. so it might work on windows and mac relatively easily.)

   protip: you really want to link your numpy to use a blas implementation
   for its matrix operations. i use virtualenv and link numpy against a
   system installation of openblas. doing this will make this code almost
   an order of time faster because it relies very heavily on large matrix
   multiplies.

getting started

    1. get the code. $ git clone the repo and install the python
       dependencies
    2. get the data. i don't distribute the data in the git repo, instead
       download the data/ folder from [107]here. also, this download does
       not include the raw image files, so if you want to visualize the
       annotations on raw images, you have to obtain the images from
       flickr8k / flickr30k / coco directly and dump them into the
       appropriate data folder.
    3. train the model. run the training $ python driver.py (see many
       additional argument settings inside the file) and wait. you'll see
       that the learning code writes checkpoints into cv/ and periodically
       reports its status in status/ folder.
    4. monitor the training. the status can be inspected manually by
       reading the json and printing whatever you wish in a second
       process. in practice i run cross-validations on a cluster, so my
       cv/ folder fills up with a lot of checkpoints that i further filter
       and inspect with other scripts. i am including my cluster training
       status visualization utility as well if you like. run a local
       webserver (e.g. $ python -m simplehttpserver 8123) and then open
       monitorcv.html in your browser on
       http://localhost:8123/monitorcv.html, or whatever the web server
       tells you the path is. you will have to edit the file to setup the
       paths properly and point it at the right json files.
    5. evaluate model checkpoints. to evaluate a checkpoint from cv/, run
       the evaluate_sentence_predctions.py script and pass it the path to
       a checkpoint.
    6. visualize the predictions. use the included html file
       visualize_result_struct.html to visualize the json struct produced
       by the evaluation code. this will visualize the images and their
       predictions. note that you'll have to download the raw images from
       the individual dataset pages and place them into the corresponding
       data/ folder.

   lastly, note that this is currently research code, so a lot of the
   documentation is inside individual python files. if you wish to work
   with this code, you'll have to get familiar with it and be comfortable
   reading python code.

pretrained model

   some pretrained models can be found in the [108]neuraltalk model zoo.
   the slightly hairy part is that if you wish to apply these models to
   some arbitrary new image (one not from flickr8k/30k/coco) you have to
   first extract the id98 features. i use the 16-layer [109]vgg network
   from simonyan and zisserman, because the model is beautiful, powerful
   and available with [110]caffe. there is opportunity for putting the
   preprocessing and id136 into a single nice function that uses the
   python wrapper to get the features and then runs the pretrained
   sentence model. i might add this in the future.

using the model to predict on new images

   the code allows you to easily predict and visualize results of running
   the model on coco/flickr8k/flick30k images. if you want to run the code
   on arbitrary image (e.g. on your file system), things get a little more
   complicated because we need to first need to pipe your image through
   the vgg id98 to get the 4096-d activations on top.

   have a look inside the folder example_images for instructions on how to
   do this. currently, the code for extracting the raw features from each
   image is in matlab, so you will need it installed on your system. caffe
   also has a wrapper for python, but i wasn't yet able to use the python
   wrapper to exactly reproduce the features i get from matlab. the
   example_images will walk you through the process, and you will
   eventually use predict_on_images.py to run the prediction.

using your own data

   the input to the system is the data folder, which contains the
   flickr8k, flickr30k and mscoco datasets. in particular, each folder
   (e.g. data/flickr8k) contains a dataset.json file that stores the image
   paths and sentences in the dataset (all images, sentences, raw
   preprocessed tokens, splits, and the mappings between images and
   sentences). each folder additionally contains vgg_feats.mat , which is
   a .mat file that stores the id98 features from all images, one per row,
   using the vgg net from ilsvrc 2014. finally, there is the imgs/ folder
   that holds the raw images. i also provide the matlab script that i used
   to extract the features, which you may find helpful if you wish to use
   a different dataset. this is inside the matlab_features_reference/
   folder, and see the readme file in that folder for more information.

license

   bsd license.

     *    2019 github, inc.
     * [111]terms
     * [112]privacy
     * [113]security
     * [114]status
     * [115]help

     * [116]contact github
     * [117]pricing
     * [118]api
     * [119]training
     * [120]blog
     * [121]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [122]reload to refresh your
   session. you signed out in another tab or window. [123]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/karpathy/neuraltalk/commits/master.atom
   3. https://github.com/karpathy/neuraltalk#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/karpathy/neuraltalk
  32. https://github.com/join
  33. https://github.com/login?return_to=/karpathy/neuraltalk
  34. https://github.com/karpathy/neuraltalk/watchers
  35. https://github.com/login?return_to=/karpathy/neuraltalk
  36. https://github.com/karpathy/neuraltalk/stargazers
  37. https://github.com/login?return_to=/karpathy/neuraltalk
  38. https://github.com/karpathy/neuraltalk/network/members
  39. https://github.com/karpathy
  40. https://github.com/karpathy/neuraltalk
  41. https://github.com/karpathy/neuraltalk
  42. https://github.com/karpathy/neuraltalk/issues
  43. https://github.com/karpathy/neuraltalk/pulls
  44. https://github.com/karpathy/neuraltalk/projects
  45. https://github.com/karpathy/neuraltalk/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/karpathy/neuraltalk/commits/master
  48. https://github.com/karpathy/neuraltalk/branches
  49. https://github.com/karpathy/neuraltalk/releases
  50. https://github.com/karpathy/neuraltalk/graphs/contributors
  51. https://github.com/karpathy/neuraltalk/search?l=python
  52. https://github.com/karpathy/neuraltalk/search?l=html
  53. https://github.com/karpathy/neuraltalk/search?l=perl
  54. https://github.com/karpathy/neuraltalk/search?l=matlab
  55. https://github.com/karpathy/neuraltalk/find/master
  56. https://github.com/karpathy/neuraltalk/archive/master.zip
  57. https://github.com/login?return_to=https://github.com/karpathy/neuraltalk
  58. https://github.com/join?return_to=/karpathy/neuraltalk
  59. https://desktop.github.com/
  60. https://desktop.github.com/
  61. https://developer.apple.com/xcode/
  62. https://visualstudio.github.com/
  63. https://github.com/karpathy
  64. https://github.com/karpathy/neuraltalk/commits?author=karpathy
  65. https://github.com/karpathy/neuraltalk/commit/c36bd0aa23907638a1217f03a13bdba5e1a8cada
  66. https://github.com/karpathy/neuraltalk/commit/c36bd0aa23907638a1217f03a13bdba5e1a8cada
  67. https://github.com/karpathy/neuraltalk/tree/c36bd0aa23907638a1217f03a13bdba5e1a8cada
  68. https://github.com/karpathy/neuraltalk/tree/master/cv
  69. https://github.com/karpathy/neuraltalk/commit/2c99eac2075dc992fc14b437f81bafdcf74da6f6
  70. https://github.com/karpathy/neuraltalk/tree/master/data
  71. https://github.com/karpathy/neuraltalk/commit/2c99eac2075dc992fc14b437f81bafdcf74da6f6
  72. https://github.com/karpathy/neuraltalk/tree/master/eval
  73. https://github.com/karpathy/neuraltalk/commit/8336615152dd2b2c616f9c43a9417716c9cede77
  74. https://github.com/karpathy/neuraltalk/tree/master/example_images
  75. https://github.com/karpathy/neuraltalk/commit/b7b70a548d3826b0011b870acd29fcdaa685afc7
  76. https://github.com/karpathy/neuraltalk/tree/master/imageid56
  77. https://github.com/karpathy/neuraltalk/commit/4ce9272d5a4672a937a6b6920f94900d00db637e
  78. https://github.com/karpathy/neuraltalk/tree/master/matlab_features_reference
  79. https://github.com/karpathy/neuraltalk/commit/0782c89a5d1445a8b4cec12bf237224567b01fff
  80. https://github.com/karpathy/neuraltalk/tree/master/python_features
  81. https://github.com/karpathy/neuraltalk/commit/3da592c5163eef82a1d7ae8e4b8d81ab484b7e48
  82. https://github.com/karpathy/neuraltalk/tree/master/status
  83. https://github.com/karpathy/neuraltalk/commit/2c99eac2075dc992fc14b437f81bafdcf74da6f6
  84. https://github.com/karpathy/neuraltalk/tree/master/vis_resources
  85. https://github.com/karpathy/neuraltalk/commit/2c99eac2075dc992fc14b437f81bafdcf74da6f6
  86. https://github.com/karpathy/neuraltalk/blob/master/.gitignore
  87. https://github.com/karpathy/neuraltalk/commit/2c99eac2075dc992fc14b437f81bafdcf74da6f6
  88. https://github.com/karpathy/neuraltalk/blob/master/readme.md
  89. https://github.com/karpathy/neuraltalk/blob/master/driver.py
  90. https://github.com/karpathy/neuraltalk/commit/02511ebae4c7d109b8d4ba8b31c742be3ba2ffdf
  91. https://github.com/karpathy/neuraltalk/blob/master/eval_sentence_predictions.py
  92. https://github.com/karpathy/neuraltalk/blob/master/monitorcv.html
  93. https://github.com/karpathy/neuraltalk/commit/2c99eac2075dc992fc14b437f81bafdcf74da6f6
  94. https://github.com/karpathy/neuraltalk/blob/master/predict_on_images.py
  95. https://github.com/karpathy/neuraltalk/commit/4921991d0f5766294a8bb245b1d414da5a11f676
  96. https://github.com/karpathy/neuraltalk/blob/master/py_caffe_feat_extract.py
  97. https://github.com/karpathy/neuraltalk/blob/master/requirements.txt
  98. https://github.com/karpathy/neuraltalk/blob/master/visualize_result_struct.html
  99. https://github.com/karpathy/neuraltalk2
 100. http://torch.ch/
 101. http://www.nytimes.com/2014/11/18/science/researchers-announce-breakthrough-in-content-recognition-software.html
 102. http://arxiv.org/abs/1411.4555
 103. http://cs.stanford.edu/people/karpathy/deepimagesent/
 104. http://nlp.cs.illinois.edu/hockenmaiergroup/framing_image_description/kcca.html
 105. http://shannon.cs.illinois.edu/denotationgraph/
 106. http://mscoco.org/
 107. http://cs.stanford.edu/people/karpathy/deepimagesent/
 108. http://cs.stanford.edu/people/karpathy/neuraltalk/
 109. http://www.robots.ox.ac.uk/~vgg/research/very_deep/
 110. http://caffe.berkeleyvision.org/
 111. https://github.com/site/terms
 112. https://github.com/site/privacy
 113. https://github.com/security
 114. https://githubstatus.com/
 115. https://help.github.com/
 116. https://github.com/contact
 117. https://github.com/pricing
 118. https://developer.github.com/
 119. https://training.github.com/
 120. https://github.blog/
 121. https://github.com/about
 122. https://github.com/karpathy/neuraltalk
 123. https://github.com/karpathy/neuraltalk

   hidden links:
 125. https://github.com/
 126. https://github.com/karpathy/neuraltalk
 127. https://github.com/karpathy/neuraltalk
 128. https://github.com/karpathy/neuraltalk
 129. https://help.github.com/articles/which-remote-url-should-i-use
 130. https://github.com/karpathy/neuraltalk#overview
 131. https://github.com/karpathy/neuraltalk#dependencies
 132. https://github.com/karpathy/neuraltalk#getting-started
 133. https://github.com/karpathy/neuraltalk#pretrained-model
 134. https://github.com/karpathy/neuraltalk#using-the-model-to-predict-on-new-images
 135. https://github.com/karpathy/neuraltalk#using-your-own-data
 136. https://github.com/karpathy/neuraltalk#license
 137. https://github.com/
