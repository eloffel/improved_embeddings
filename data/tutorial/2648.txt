   #[1]pystruct 0.2.4 documentation [2]<no title>

   (button) [3]pystruct 0.2.4
     * [4]start
     * [5]installation
     * [6]introduction
     * [7]user guide
     * [8]examples
     * [9]api
     * [10]site

   ____________________

pystruct - structured learning in python[11]  

   pystruct aims at being an easy-to-use structured learning and
   prediction library. currently it implements only max-margin methods and
   a id88, but other algorithms might follow. the learning
   algorithms implemented in pystruct have various names, which are often
   used loosely or differently in different communities. common names are
   id49 (crfs), maximum-margin markov random fields
   (m3n) or structural support vector machines.

   if you are new to structured learning, have a look at [12]what is
   structured learning?.

   an overview of the different models can be found in [13]user guide.

   the goal of pystruct is to provide a well-documented tool for
   researchers as well as non-experts to make use of id170
   algorithms. the design tries to stay as close as possible to the
   interface and conventions of [14]scikit-learn.

   the current version is pystruct 0.2.4 which you can install via pip:

   pip install pystruct

   detailed installation instructions can be found under [15]installation.

   starting with this first stable release, pystruct will remain stable
   with respect to api and will provide backward compatibility.

   you can contact the authors either via the [16]mailing list or on
   [17]github.

citing[18]  

   if you find pystruct helpful, please cite [19]our paper:

   andreas c. mueller, sven behnke
   pystruct - id170 in python
   journal of machine learning, 2014
   [20]bibtex here

introduction[21]  

   in order to do learning with pystruct, you need to pick two or three
   things: a model structure, a learning algorithm and optionally an
   id136 algorithm. by constructing a learner object from a model, you
   get an object that can fit to training data and can predict for unseen
   data (just like scikit-learn estimators).

models, aka crfs[22]  

   these determine what your model looks like: its graph structure and its
   id168. there are several ready-to-use classes, for example for
   multi-label classification, chain crfs and more complex models. you can
   find a full list in the [23]models section of the references

learning algorithms[24]  

   these set the parameters in a model based on training data.

   learners are agnostic of the kind of model that is used, so all
   combinations are possible and new models can be defined (to include,
   e.g., higher-order potentials) without changing the learner.

   the current learning algorithms implement max margin learning and a
   id88. see the [25]learning section of the references.

id136 solvers[26]  

   these perform id136: they run your model on data in order to make
   predictions.

   there are some options to use different solvers for id136. a linear
   programming solver using cvxopt is included. i have python interfaces
   for several other methods on github, including libdai, qpbo, ad3.

   this is where the heavy lifting is done and in some sense these
   backends are interchangeable.

   currently i would recommend ad3 for very accurate solutions and qpbo
   for larger models. the the cutting plane solvers include an option
   (switch_to) to switch the solver to a stronger or exact solver when no
   constraints can be found using the previous solver (which should be a
   faster undergenerating solver, such as qpbo).

   [27]back to top

      copyright 2013, andreas mueller.
   created using [28]sphinx 1.3.3.

references

   1. http://pystruct.github.io/
   2. http://pystruct.github.io/auto_examples/index.html
   3. http://pystruct.github.io/
   4. http://pystruct.github.io/
   5. http://pystruct.github.io/installation.html
   6. http://pystruct.github.io/intro.html
   7. http://pystruct.github.io/user_guide.html
   8. http://pystruct.github.io/auto_examples/index.html
   9. http://pystruct.github.io/references.html
  10. http://pystruct.github.io/
  11. http://pystruct.github.io/#pystruct-structured-learning-in-python
  12. http://pystruct.github.io/intro.html#intro
  13. http://pystruct.github.io/user_guide.html#user-guide
  14. http://scikit-learn.org/dev
  15. http://pystruct.github.io/installation.html#installation
  16. https://groups.google.com/forum/#!forum/pystruct
  17. https://github.com/pystruct/pystruct
  18. http://pystruct.github.io/#citing
  19. http://jmlr.org/papers/volume15/mueller14a/mueller14a.pdf
  20. http://jmlr.org/papers/v15/mueller14a.bib
  21. http://pystruct.github.io/#introduction
  22. http://pystruct.github.io/#models-aka-crfs
  23. http://pystruct.github.io/references.html#models
  24. http://pystruct.github.io/#learning-algorithms
  25. http://pystruct.github.io/references.html#learning
  26. http://pystruct.github.io/#id136-solvers
  27. http://pystruct.github.io/
  28. http://sphinx-doc.org/
