   #[1]github [2]recent commits to id4py:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]15
     * [35]star [36]124
     * [37]fork [38]33

[39]lium-lst/[40]id4py

   [41]code [42]pull requests 0 [43]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [44]sign up
   id4py is a python framework based on dl4mt-tutorial to experiment with
   id4 pipelines.
   [45]https://lium-lst.github.io/id4py/
   [46]id4 [47]theano [48]python [49]neural-machine-translation
   [50]neural-mt [51]deep-learning
     * [52]1,463 commits
     * [53]2 branches
     * [54]1 release
     * [55]fetching contributors
     * [56]view license

    1. [57]python 99.6%
    2. [58]shell 0.4%

   (button) python shell
   branch: master (button) new pull request
   [59]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/l
   [60]download zip

downloading...

   want to be notified of new releases in lium-lst/id4py?
   [61]sign in [62]sign up

launching github desktop...

   if nothing happens, [63]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [64]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [65]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [66]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [67]permalink
   type      name      latest commit message commit time
        failed to load latest commit information.
        [68]bin
        [69]docs
        [70]examples
        [71]id4py
        [72]patches
        [73]scripts
        [74].gitignore
        [75]license.md
        [76]readme.md
        [77]setup.py

readme.md

   [78]id4py

   [79]license: mit

unmaintained

   this codebase is no longer maintained as we moved towards
   [80]id4pytorch.
     __________________________________________________________________

   if you use id4py, you may want to cite the following [81]paper:
@article{id4py2017,
  author    = {ozan caglayan and
               mercedes garc\'{i}a-mart\'{i}nez and
               adrien bardet and
               walid aransa and
               fethi bougares and
               lo\"{i}c barrault},
  title     = {id4py: a flexible toolkit for advanced id4
 systems},
  journal   = {prague bull. math. linguistics},
  volume    = {109},
  pages     = {15--28},
  year      = {2017},
  url       = {https://ufal.mff.cuni.cz/pbml/109/art-caglayan-et-al.pdf},
  doi       = {10.1515/pralin-2017-0035},
  timestamp = {tue, 12 sep 2017 10:01:08 +0100}
}
     __________________________________________________________________

list of important recent changes

     * model checkpoints were unnecessarily larger by 30% because of a
       storing format issue. this is fixed now by
       [82]https://github.com/lium-lst/id4py/commit/0721f34924d23b02caca52
       e8c3fcbcaafbb4ef41.

factored id4

     * attention_factors_seplogits.py is removed and its functionality is
       added to attention_factors model as a configuration switch:
       sep_h2olayer: true.

id4

     * tied_trg_emb: true/false is replaced with tied_emb: false/2way/3way
       to also support the sharing of "all" embeddings throughout the
       network.

introduction

   id4py is a suite of python tools, primarily based on the starter code
   provided in [83]dl4mt-tutorial for training id4
   networks using theano. the basic motivation behind forking
   dl4mt-tutorial was to create a framework where it would be easy to
   implement a new model by just copying and modifying an existing model
   class (or even inheriting from it and overriding some of its methods).

   to achieve this purpose, id4py tries to completely isolate training
   loop, id125, iteration and model definition:
     * id4-train script to start a training experiment
     * id4-translate to produce model-agnostic translations. you just pass
       a trained model's checkpoint file and it does its job.
     * id4-rescore to rescore translation hypotheses using an id4py model.
     * an abstract basemodel class to derive from to define your id4
       architecture.
     * an abstract iterator to derive from for your custom iterators.

   a non-exhaustive list of differences between id4py and dl4mt-tutorial
   is as follows:
     * no shell script, everything is in python
     * overhaul object-oriented refactoring of the code: clear separation
       of api and scripts that interface with the api
     * ini style configuration files to define everything regarding a
       training experiment
     * transparent cleanup mechanism to kill stale processes, remove
       temporary files
     * simultaneous logging of training details to stdout and log file
     * supports out-of-the-box id7, meteor and coco eval metrics
     * includes [84]subword-id4 utilities for training and applying bpe
       model (note: this may change as the upstream subword-id4 moves
       forward as well.)
     * plugin-like text filters for hypothesis post-processing (example:
       bpe, compound, char2words for char-id4)
     * early-stopping and checkpointing based on perplexity, id7 or
       meteor (ability to add new metrics easily)
     * single .npz file to store everything about a training experiment
     * automatic free gpu selection and reservation using nvidia-smi
     * shuffling support between epochs:
          + simple shuffle
          + [85]homogeneous batches of same-length samples to improve
            training speed
     * improved parallel translation decoding on cpu
     * forced decoding i.e. rescoring using id4
     * export decoding informations into json for further visualization of
       attention coefficients
     * improved numerical stability and reproducibility
     * glorot/xavier, he, orthogonal weight initializations
     * efficient sgd, adadelta, rmsprop and adam: single forward/backward
       theano function without intermediate variables
     * ability to stop updating a set of weights by recompiling optimizer
     * several recurrent blocks:
          + gru, conditional gru (cgru) and lstm
          + multimodal attentive cgru variants
     * [86]layer id172 support for gru
     * 2-way or 3-way [87]tied target embeddings
     * simple/non-recurrent dropout, l2 weight decay
     * training and validation loss id172 for comparable
       perplexities
     * initialization of a model with a pretrained id4 for further
       finetuning

models

   it is advised to check the actual model implementations for the most
   up-to-date informations as what is written may become outdated.

attentional id4: attention.py

   this is the basic attention based id4 from dl4mt-tutorial improved in
   different ways:
     * 3 forward dropout layers after source embeddings, source context
       and before softmax managed by the configuration parameters
       emb_dropout, ctx_dropout, out_dropout.
     * layer id172 for source encoder (layer_norm:true|false)
     * tied embeddings (tied_emb:false|2way|3way)

   this model uses the simple bitextiterator i.e. it directly reads plain
   parallel text files as defined in the experiment configuration file.
   please see [88]this monomodal example for usage.

multimodal id4 / image captioning: fusion*py

   these fusion models derived from attention.py and basefusion.py
   implement several multimodal id4 / image captioning architectures
   detailed in the following papers:

   [89]caglayan, ozan, et al. "does multimodality help human and machine
   for translation and image captioning?." arxiv preprint arxiv:1605.09186
   (2016).

   [90]caglayan, ozan, lo  c barrault, and fethi bougares. "multimodal
   attention for id4." arxiv preprint
   arxiv:1609.03976 (2016).

   the models are separated into 8 files implementing their own multimodal
   cgru differing in the way the attention is formulated in the decoder (4
   ways) x the way the multimodal contexts are fusioned (2 ways:
   sum/concat). these models also use a different data iterator, namely
   wmtiterator that requires converting the textual data into .pkl as in
   the [91]multimodal example.

   the wmtiterator only knows how to handle the resnet-50 convolutional
   features that we provide in the examples page. if you would like to use
   fc-style fixed-length vectors or other types of multimodal features,
   you need to write your own iterator.

factored id4: attention_factors.py

   the model file attention_factors.py corresponds to the following paper:

   [92]garc  a-mart  nez, mercedes, lo  c barrault, and fethi bougares.
   "factored id4." arxiv preprint arxiv:1609.04621
   (2016).

   in the examples folder of this repository, you can find data and a
   configuration file to run this model.

id56lm: id56lm.py

   this is a basic recurrent language model to be used with id4-test-lm
   utility.

requirements

   you need the following python libraries installed in order to use
   id4py:
     * numpy
     * theano >= 0.9
     * we recommend using anaconda python distribution which is equipped
       with intel mkl (math kernel library) greatly improving cpu decoding
       speeds during id125. with a correct compilation and
       installation, you should achieve similar performance with openblas
       as well but the setup procedure may be difficult to follow for
       inexperienced ones.
     * id4py only supports python 3.5+, please see [93]pythonclock.org
     * please note that meteor requires a java runtime so java should be
       in your $path.

additional data for meteor

   before installing id4py, you need to run scripts/get-meteor-data.sh to
   download meteor paraphrase files.

installation

$ python setup.py install

   note: when you add a new model under models/ it will not be directly
   available in runtime as it needs to be installed as well. to avoid
   re-installing each time, you can use development mode with python
   setup.py develop which will directly make python see the git folder as
   the library content.

ensuring reproducibility in theano

   (update: theano 1.0 includes a configuration option deterministic =
   more that obsoletes the below patch.)

   when we started to work on dl4mt-tutorial, we noticed an annoying
   reproducibility problem where multiple runs of the same experiment
   (same seed, same machine, same gpu) were not producing exactly the same
   training and validation losses after a few iterations.

   the solution that was [94]discussed in theano issues was to replace a
   non-deterministic gpu operation with its deterministic equivalent. to
   achieve this, you should patch your local theano v0.9.0 installation
   using [95]this patch unless upstream developers add a configuration
   option to .theanorc.

configuring theano

   here is a basic .theanorc file (note that the way you install cuda,
   cudnn may require some modifications):
[global]
# not so important as id4py will pick an available gpu
device = gpu0
# we use float32 everywhere
floatx = float32
# keep theano compilation in ram if you have a 7/24 available server
base_compiledir=/tmp/theano-%(user)s
# for theano >= 0.10, if you want exact same results for each run
# with same seed
deterministic=more

[cuda]
root = /opt/cuda-8.0

[dnn]
# make sure you use cudnn as well
enabled = auto
library_path = /opt/cudnn/cudnn-v5.1/lib64
include_path = /opt/cudnn/cudnn-v5.1/include

[lib]
# allocate 95% of gpu memory once
cnmem = 0.95

   you may also want to try the new gpu backend after installing
   [96]libgpuarray. in order to do so, pass gpuarray=1 into the
   environment when running id4-train:
$ gpuarray=1 id4-train -c <conf file> ...

checking blas configuration

   recent theano versions can automatically detect correct mkl flags. you
   should obtain a similar output after running the following command:
$ python -c 'import theano; print theano.config.blas.ldflags'
-l/home/ozancag/miniconda/lib -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -li
omp5 -lpthread -lm -lm -wl,-rpath,/home/ozancag/miniconda/lib

acknowledgements

   id4py includes code from the following projects:
     * [97]dl4mt-tutorial
     * scripts from [98]subword-id4
     * ensembling and alignment collection from [99]nematus
     * multi-id7.perl from [100]mosesdecoder
     * meteor v1.5 jar from [101]meteor
     * sorted data iterator, coco eval script and lstm from
       [102]arctic-captions
     * pycocoevalcap from [103]coco-caption

   see [104]license file for license information.

     *    2019 github, inc.
     * [105]terms
     * [106]privacy
     * [107]security
     * [108]status
     * [109]help

     * [110]contact github
     * [111]pricing
     * [112]api
     * [113]training
     * [114]blog
     * [115]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [116]reload to refresh your
   session. you signed out in another tab or window. [117]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/lium-lst/id4py/commits/master.atom
   3. https://github.com/lium-lst/id4py#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/lium-lst/id4py
  32. https://github.com/join
  33. https://github.com/login?return_to=/lium-lst/id4py
  34. https://github.com/lium-lst/id4py/watchers
  35. https://github.com/login?return_to=/lium-lst/id4py
  36. https://github.com/lium-lst/id4py/stargazers
  37. https://github.com/login?return_to=/lium-lst/id4py
  38. https://github.com/lium-lst/id4py/network/members
  39. https://github.com/lium-lst
  40. https://github.com/lium-lst/id4py
  41. https://github.com/lium-lst/id4py
  42. https://github.com/lium-lst/id4py/pulls
  43. https://github.com/lium-lst/id4py/pulse
  44. https://github.com/join?source=prompt-code
  45. https://lium-lst.github.io/id4py/
  46. https://github.com/topics/id4
  47. https://github.com/topics/theano
  48. https://github.com/topics/python
  49. https://github.com/topics/neural-machine-translation
  50. https://github.com/topics/neural-mt
  51. https://github.com/topics/deep-learning
  52. https://github.com/lium-lst/id4py/commits/master
  53. https://github.com/lium-lst/id4py/branches
  54. https://github.com/lium-lst/id4py/releases
  55. https://github.com/lium-lst/id4py/graphs/contributors
  56. https://github.com/lium-lst/id4py/blob/master/license.md
  57. https://github.com/lium-lst/id4py/search?l=python
  58. https://github.com/lium-lst/id4py/search?l=shell
  59. https://github.com/lium-lst/id4py/find/master
  60. https://github.com/lium-lst/id4py/archive/master.zip
  61. https://github.com/login?return_to=https://github.com/lium-lst/id4py
  62. https://github.com/join?return_to=/lium-lst/id4py
  63. https://desktop.github.com/
  64. https://desktop.github.com/
  65. https://developer.apple.com/xcode/
  66. https://visualstudio.github.com/
  67. https://github.com/lium-lst/id4py/tree/dc0a1618f217d5117d6abeacdc15a22443561acf
  68. https://github.com/lium-lst/id4py/tree/master/bin
  69. https://github.com/lium-lst/id4py/tree/master/docs
  70. https://github.com/lium-lst/id4py/tree/master/examples
  71. https://github.com/lium-lst/id4py/tree/master/id4py
  72. https://github.com/lium-lst/id4py/tree/master/patches
  73. https://github.com/lium-lst/id4py/tree/master/scripts
  74. https://github.com/lium-lst/id4py/blob/master/.gitignore
  75. https://github.com/lium-lst/id4py/blob/master/license.md
  76. https://github.com/lium-lst/id4py/blob/master/readme.md
  77. https://github.com/lium-lst/id4py/blob/master/setup.py
  78. https://github.com/lium-lst/id4py/blob/master/docs/logo.png?raw=true
  79. https://opensource.org/licenses/mit
  80. https://github.com/lium-lst/id4pytorch
  81. https://ufal.mff.cuni.cz/pbml/109/art-caglayan-et-al.pdf
  82. https://github.com/lium-lst/id4py/commit/0721f34924d23b02caca52e8c3fcbcaafbb4ef41
  83. https://github.com/nyu-dl/dl4mt-tutorial
  84. https://github.com/rsennrich/subword-id4
  85. https://github.com/kelvinxu/arctic-captions
  86. https://github.com/ryankiros/layer-norm
  87. https://arxiv.org/abs/1608.05859
  88. https://github.com/lium-lst/id4py/blob/master/examples/wmt16-mmt-task1/wmt16-mmt-task1-monomodal.conf
  89. https://arxiv.org/abs/1605.09186
  90. https://arxiv.org/abs/1609.03976
  91. https://github.com/lium-lst/id4py/blob/master/examples/wmt16-mmt-task1
  92. https://arxiv.org/abs/1609.04621
  93. http://pythonclock.org/
  94. https://github.com/theano/theano/issues/3029
  95. https://github.com/lium-lst/id4py/blob/master/patches/00-theano-advancedinctensor.patch
  96. https://github.com/theano/libgpuarray
  97. https://github.com/nyu-dl/dl4mt-tutorial
  98. https://github.com/rsennrich/subword-id4
  99. https://github.com/rsennrich/nematus
 100. https://github.com/moses-smt/mosesdecoder
 101. https://github.com/cmu-mtlab/meteor
 102. https://github.com/kelvinxu/arctic-captions
 103. https://github.com/tylin/coco-caption
 104. https://github.com/lium-lst/id4py/blob/master/license.md
 105. https://github.com/site/terms
 106. https://github.com/site/privacy
 107. https://github.com/security
 108. https://githubstatus.com/
 109. https://help.github.com/
 110. https://github.com/contact
 111. https://github.com/pricing
 112. https://developer.github.com/
 113. https://training.github.com/
 114. https://github.blog/
 115. https://github.com/about
 116. https://github.com/lium-lst/id4py
 117. https://github.com/lium-lst/id4py

   hidden links:
 119. https://github.com/
 120. https://github.com/lium-lst/id4py
 121. https://github.com/lium-lst/id4py
 122. https://github.com/lium-lst/id4py
 123. https://help.github.com/articles/which-remote-url-should-i-use
 124. https://github.com/lium-lst/id4py#unmaintained
 125. https://github.com/lium-lst/id4py#list-of-important-recent-changes
 126. https://github.com/lium-lst/id4py#factored-id4
 127. https://github.com/lium-lst/id4py#id4
 128. https://github.com/lium-lst/id4py#introduction
 129. https://github.com/lium-lst/id4py#models
 130. https://github.com/lium-lst/id4py#attentional-id4-attentionpy
 131. https://github.com/lium-lst/id4py#multimodal-id4--image-captioning-fusionpy
 132. https://github.com/lium-lst/id4py#factored-id4-attention_factorspy
 133. https://github.com/lium-lst/id4py#id56lm-id56lmpy
 134. https://github.com/lium-lst/id4py#requirements
 135. https://github.com/lium-lst/id4py#additional-data-for-meteor
 136. https://github.com/lium-lst/id4py#installation
 137. https://github.com/lium-lst/id4py#ensuring-reproducibility-in-theano
 138. https://github.com/lium-lst/id4py#configuring-theano
 139. https://github.com/lium-lst/id4py#checking-blas-configuration
 140. https://github.com/lium-lst/id4py#acknowledgements
 141. https://github.com/
