   [1]cs231n convolutional neural networks for visual recognition

   these notes accompany the stanford cs class [2]cs231n: convolutional
   neural networks for visual recognition.
   for questions/concerns/bug reports contact [3]justin johnson regarding
   the assignments, or contact [4]andrej karpathy regarding the course
   notes. you can also submit a pull request directly to our [5]git repo.
   we encourage the use of the [6]hypothes.is extension to annote comments
   and discuss these notes inline.
   spring 2019 assignments
   [7]assignment #1: image classification, knn, id166, softmax, neural
   network
   assignment #2: tba
   assignment #3: tba
   module 0: preparation
   [8]setup instructions
   [9]python / numpy tutorial
   [10]ipython notebook tutorial
   [11]google cloud tutorial
   [12]aws tutorial
   module 1: neural networks
   [13]image classification: data-driven approach, k-nearest neighbor,
   train/val/test splits
   l1/l2 distances, hyperparameter search, cross-validation
   [14]linear classification: support vector machine, softmax
   parameteric approach, bias trick, hinge loss, cross-id178 loss, l2
   id173, web demo
   [15]optimization: stochastic id119
   optimization landscapes, local search, learning rate,
   analytic/numerical gradient
   [16]id26, intuitions
   chain rule interpretation, real-valued circuits, patterns in gradient
   flow
   [17]neural networks part 1: setting up the architecture
   model of a biological neuron, id180, neural net
   architecture, representational power
   [18]neural networks part 2: setting up the data and the loss
   preprocessing, weight initialization, batch id172,
   id173 (l2/dropout), id168s
   [19]neural networks part 3: learning and evaluation
   gradient checks, sanity checks, babysitting the learning process,
   momentum (+nesterov), second-order methods, adagrad/rmsprop,
   hyperparameter optimization, model ensembles
   [20]putting it together: minimal neural network case study
   minimal 2d toy data example
   module 2: convolutional neural networks
   [21]convolutional neural networks: architectures, convolution / pooling
   layers
   layers, spatial arrangement, layer patterns, layer sizing patterns,
   alexnet/zfnet/vggnet case studies, computational considerations
   [22]understanding and visualizing convolutional neural networks
   tsne embeddings, deconvnets, data gradients, fooling convnets, human
   comparisons
   [23]id21 and fine-tuning convolutional neural networks

     * [24]cs231n
     * [25]cs231n
     * [26]karpathy@cs.stanford.edu

references

   1. http://cs231n.github.io/
   2. http://cs231n.stanford.edu/
   3. http://cs.stanford.edu/people/jcjohns/
   4. http://cs.stanford.edu/people/karpathy/
   5. https://github.com/cs231n/cs231n.github.io
   6. https://hypothes.is/
   7. http://cs231n.github.io/assignments2019/assignment1/
   8. http://cs231n.github.io/setup-instructions/
   9. http://cs231n.github.io/python-numpy-tutorial/
  10. http://cs231n.github.io/ipython-tutorial/
  11. https://github.com/cs231n/gcloud
  12. http://cs231n.github.io/aws-tutorial/
  13. http://cs231n.github.io/classification/
  14. http://cs231n.github.io/linear-classify/
  15. http://cs231n.github.io/optimization-1/
  16. http://cs231n.github.io/optimization-2/
  17. http://cs231n.github.io/neural-networks-1/
  18. http://cs231n.github.io/neural-networks-2/
  19. http://cs231n.github.io/neural-networks-3/
  20. http://cs231n.github.io/neural-networks-case-study/
  21. http://cs231n.github.io/convolutional-networks/
  22. http://cs231n.github.io/understanding-id98/
  23. http://cs231n.github.io/transfer-learning/
  24. https://github.com/cs231n
  25. https://twitter.com/cs231n
  26. mailto:karpathy@cs.stanford.edu
