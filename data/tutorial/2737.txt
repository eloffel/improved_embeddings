   [1]cs231n convolutional neural networks for visual recognition

   in this assignment you will practice putting together a simple image
   classification pipeline, based on the k-nearest neighbor or the
   id166/softmax classifier. the goals of this assignment are as follows:
     * understand the basic image classification pipeline and the
       data-driven approach (train/predict stages)
     * understand the train/val/test splits and the use of validation data
       for hyperparameter tuning.
     * develop proficiency in writing efficient vectorized code with numpy
     * implement and apply a k-nearest neighbor (knn) classifier
     * implement and apply a multiclass support vector machine (id166)
       classifier
     * implement and apply a softmax classifier
     * implement and apply a two layer neural network classifier
     * understand the differences and tradeoffs between these classifiers
     * get a basic understanding of performance improvements from using
       higher-level representations than raw pixels (e.g. color
       histograms, histogram of gradient (hog) features)

setup

   you can work on the assignment in one of two ways: locally on your own
   machine, or on a virtual machine through terminal.com.

working in the cloud on terminal

   terminal has created a separate subdomain to serve our class,
   [2]www.stanfordterminalcloud.com. register your account there. the
   assignment 1 snapshot can then be found [3]here. if you   re registered
   in the class you can contact the ta (see piazza for more information)
   to request terminal credits for use on the assignment. once you boot up
   the snapshot everything will be installed for you, and you   ll be ready
   to start on your assignment right away. we   ve written a small tutorial
   on terminal [4]here.

working locally

   get the code as a zip file [5]here. as for the dependencies:

   [option 1] use anaconda: the preferred approach for installing all the
   assignment dependencies is to use [6]anaconda, which is a python
   distribution that includes many of the most popular python packages for
   science, math, engineering and data analysis. once you install it you
   can skip all mentions of requirements and you   re ready to go directly
   to working on the assignment.

   [option 2] manual install, virtual environment: if you   d like to
   (instead of anaconda) go with a more manual and risky installation
   route you will likely want to create a [7]virtual environment for the
   project. if you choose not to use a virtual environment, it is up to
   you to make sure that all dependencies for the code are installed
   globally on your machine. to set up a virtual environment, run the
   following:
cd assignment1
sudo pip install virtualenv      # this may already be installed
virtualenv .env                  # create a virtual environment
source .env/bin/activate         # activate the virtual environment
pip install -r requirements.txt  # install dependencies
# work on the assignment for a while ...
deactivate                       # exit the virtual environment

   download data: once you have the starter code, you will need to
   download the cifar-10 dataset. run the following from the assignment1
   directory:
cd cs231n/datasets
./get_datasets.sh

   start ipython: after you have the cifar-10 data, you should start the
   ipython notebook server from the assignment1 directory. if you are
   unfamiliar with ipython, you should read our [8]ipython tutorial.

   note: if you are working in a virtual environment on osx, you may
   encounter errors with matplotlib due to the [9]issues described here.
   you can work around this issue by starting the ipython server using the
   start_ipython_osx.sh script from the assignment1 directory; the script
   assumes that your virtual environment is named .env.

submitting your work:

   whether you work on the assignment locally or using terminal, once you
   are done working run the collectsubmission.sh script; this will produce
   a file called assignment1.zip. upload this file to your dropbox on
   [10]the coursework page for the course.

q1: k-nearest neighbor classifier (20 points)

   the ipython notebook knn.ipynb will walk you through implementing the
   knn classifier.

q2: training a support vector machine (25 points)

   the ipython notebook id166.ipynb will walk you through implementing the
   id166 classifier.

q3: implement a softmax classifier (20 points)

   the ipython notebook softmax.ipynb will walk you through implementing
   the softmax classifier.

q4: two-layer neural network (25 points)

   the ipython notebook two_layer_net.ipynb will walk you through the
   implementation of a two-layer neural network classifier.

q5: higher level representations: image features (10 points)

   the ipython notebook features.ipynb will walk you through this
   exercise, in which you will examine the improvements gained by using
   higher-level representations as opposed to using raw pixel values.

q6: cool bonus: do something extra! (+10 points)

   implement, investigate or analyze something extra surrounding the
   topics in this assignment, and using the code you developed. for
   example, is there some other interesting question we could have asked?
   is there any insightful visualization you can plot? or anything fun to
   look at? or maybe you can experiment with a spin on the id168?
   if you try out something cool we   ll give you up to 10 extra points and
   may feature your results in the lecture.

     * [11]cs231n
     * [12]cs231n
     * [13]karpathy@cs.stanford.edu

references

   1. http://cs231n.github.io/
   2. https://www.stanfordterminalcloud.com/
   3. https://www.stanfordterminalcloud.com/snapshot/49f5a1ea15dc424aec19155b3398784d57c55045435315ce4f8b96b62819ef65
   4. http://cs231n.github.io/terminal-tutorial
   5. http://cs231n.stanford.edu/assignments/2016/winter1516_assignment1.zip
   6. https://www.continuum.io/downloads
   7. http://docs.python-guide.org/en/latest/dev/virtualenvs/
   8. http://cs231n.github.io/ipython-tutorial
   9. http://matplotlib.org/faq/virtualenv_faq.html
  10. https://coursework.stanford.edu/portal/site/w16-cs-231n-01/
  11. https://github.com/cs231n
  12. https://twitter.com/cs231n
  13. mailto:karpathy@cs.stanford.edu
