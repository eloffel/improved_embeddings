   [1]cs231n convolutional neural networks for visual recognition

   in this assignment you will implement recurrent networks, and apply
   them to image captioning on microsoft coco. we will also introduce the
   tinyid163 dataset, and use a pretrained model on this dataset to
   explore different applications of image gradients.

   the goals of this assignment are as follows:
     * understand the architecture of recurrent neural networks (id56s) and
       how they operate on sequences by sharing weights over time
     * understand the difference between vanilla id56s and long-short term
       memory (lstm) id56s
     * understand how to sample from an id56 at test-time
     * understand how to combine convolutional neural nets and recurrent
       nets to implement an image captioning system
     * understand how a trained convolutional network can be used to
       compute gradients with respect to the input image
     * implement and different applications of image gradients, including
       saliency maps, fooling images, class visualizations, feature
       inversion, and deepdream.

setup

   you can work on the assignment in one of two ways: locally on your own
   machine, or on a virtual machine through terminal.com.

working in the cloud on terminal

   terminal has created a separate subdomain to serve our class,
   [2]www.stanfordterminalcloud.com. register your account there. the
   assignment 3 snapshot can then be found [3]here. if you are registered
   in the class you can contact the ta (see piazza for more information)
   to request terminal credits for use on the assignment. once you boot up
   the snapshot everything will be installed for you, and you will be
   ready to start on your assignment right away. we have written a small
   tutorial on terminal [4]here.

working locally

   get the code as a zip file [5]here. as for the dependencies:

   [option 1] use anaconda: the preferred approach for installing all the
   assignment dependencies is to use [6]anaconda, which is a python
   distribution that includes many of the most popular python packages for
   science, math, engineering and data analysis. once you install it you
   can skip all mentions of requirements and you are ready to go directly
   to working on the assignment.

   [option 2] manual install, virtual environment: if you do not want to
   use anaconda and want to go with a more manual and risky installation
   route you will likely want to create a [7]virtual environment for the
   project. if you choose not to use a virtual environment, it is up to
   you to make sure that all dependencies for the code are installed
   globally on your machine. to set up a virtual environment, run the
   following:
cd assignment3
sudo pip install virtualenv      # this may already be installed
virtualenv .env                  # create a virtual environment
source .env/bin/activate         # activate the virtual environment
pip install -r requirements.txt  # install dependencies
# work on the assignment for a while ...
deactivate                       # exit the virtual environment

   download data: once you have the starter code, you will need to
   download the processed ms-coco dataset, the tinyid163 dataset, and
   the pretrained tinyid163 model. run the following from the
   assignment3 directory:
cd cs231n/datasets
./get_coco_captioning.sh
./get_tiny_id163_a.sh
./get_pretrained_model.sh

   compile the cython extension: convolutional neural networks require a
   very efficient implementation. we have implemented of the functionality
   using [8]cython; you will need to compile the cython extension before
   you can run the code. from the cs231n directory, run the following
   command:
python setup.py build_ext --inplace

   start ipython: after you have the data, you should start the ipython
   notebook server from the assignment3 directory. if you are unfamiliar
   with ipython, you should read our [9]ipython tutorial.

   note: if you are working in a virtual environment on osx, you may
   encounter errors with matplotlib due to the [10]issues described here.
   you can work around this issue by starting the ipython server using the
   start_ipython_osx.sh script from the assignment3 directory; the script
   assumes that your virtual environment is named .env.

submitting your work:

   whether you work on the assignment locally or using terminal, once you
   are done working run the collectsubmission.sh script; this will produce
   a file called assignment3.zip. upload this file under the assignments
   tab on [11]the coursework page for the course.

q1: image captioning with vanilla id56s (40 points)

   the ipython notebook id56_captioning.ipynb will walk you through the
   implementation of an image captioning system on ms-coco using vanilla
   recurrent networks.

q2: image captioning with lstms (35 points)

   the ipython notebook lstm_captioning.ipynb will walk you through the
   implementation of long-short term memory (lstm) id56s, and apply them to
   image captioning on ms-coco.

q3: image gradients: saliency maps and fooling images (10 points)

   the ipython notebook imagegradients.ipynb will introduce the
   tinyid163 dataset. you will use a pretrained model on this dataset
   to compute gradients with respect to the image, and use them to produce
   saliency maps and fooling images.

q4: image generation: classes, inversion, deepdream (15 points)

   in the ipython notebook imagegeneration.ipynb you will use the
   pretrained tinyid163 model to generate images. in particular you
   will generate class visualizations and implement feature inversion and
   deepdream.

q5: do something extra! (up to +10 points)

   given the components of the assignment, try to do something cool. maybe
   there is some way to generate images that we did not implement in the
   assignment?

     * [12]cs231n
     * [13]cs231n
     * [14]karpathy@cs.stanford.edu

references

   1. http://cs231n.github.io/
   2. https://www.stanfordterminalcloud.com/
   3. https://www.stanfordterminalcloud.com/snapshot/29054ca27bc2e8bda888709ba3d9dd07a172cbbf0824152aac49b14a018ffbe5
   4. http://cs231n.github.io/terminal-tutorial
   5. http://cs231n.stanford.edu/assignments/2016/winter1516_assignment3.zip
   6. https://www.continuum.io/downloads
   7. http://docs.python-guide.org/en/latest/dev/virtualenvs/
   8. http://cython.org/
   9. http://cs231n.github.io/ipython-tutorial
  10. http://matplotlib.org/faq/virtualenv_faq.html
  11. https://coursework.stanford.edu/portal/site/w15-cs-231n-01/
  12. https://github.com/cs231n
  13. https://twitter.com/cs231n
  14. mailto:karpathy@cs.stanford.edu
