   #[1]github [2]recent commits to reverb:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]67
     * [35]star [36]449
     * [37]fork [38]130

[39]knowitall/[40]reverb

   [41]code [42]issues 4 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   web-scale id10
   [47]http://reverb.cs.washington.edu/
     * [48]166 commits
     * [49]1 branch
     * [50]2 releases
     * [51]fetching contributors
     * [52]view license

    1. [53]java 99.9%
    2. [54]shell 0.1%

   (button) java shell
   branch: master (button) new pull request
   [55]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/k
   [56]download zip

downloading...

   want to be notified of new releases in knowitall/reverb?
   [57]sign in [58]sign up

launching github desktop...

   if nothing happens, [59]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [60]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [61]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [62]download the github extension for visual studio
   and try again.

   (button) go back
   [63]@scid48d
   [64]scid48d [65]merge pull request [66]#18 [67]from alterdego/master
   (button)    
fixed typos in readme.md

   latest commit [68]a87e2b9 mar 6, 2019
   [69]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [70]core [71]unexclude bsh. may 16, 2013
   [72]models [73]added reverb conf function training to models sep 5,
   2012
   [74].gitignore
   [75].travis.yml
   [76]license.txt
   [77]readme.md

readme.md

reverb

   reverb is a program that automatically identifies and extracts binary
   relationships from english sentences. reverb is designed for web-scale
   information extraction, where the target relations cannot be specified
   in advance and speed is important.

   reverb takes raw text as input, and outputs (argument1, relation
   phrase, argument2) triples. for example, given the sentence "bananas
   are an excellent source of potassium," reverb will extract the triple
   (bananas, be source of, potassium).

   more information is available at the reverb homepage:
   [78]http://reverb.cs.washington.edu

quick start

   if you want to run reverb on a small amount of text without modifying
   its source code, we provide an executable jar file that can be run from
   the command line. follow these steps to get started:
    1. download the latest reverb jar from
       [79]http://reverb.cs.washington.edu/reverb-latest.jar
    2. run java -xmx512m -jar reverb-latest.jar yourfile.txt.
    3. run java -xmx512m -jar reverb-latest.jar -h for more options.

building

   building reverb from source requires apache maven
   ([80]http://maven.apache.org). run this command to download the
   required dependencies, compile, and create a single executable jar
   file.
mvn clean compile assembly:single

   the compiled class files will be put in the target/classes directory.
   the single executable jar file will be written to
   target/reverb-core-*-jar-with-dependencies.jar where * is replaced with
   the version number.

command line interface

   once you have built reverb, you can run it from the command line.

   the command line interface to reverb takes plain text or html as input,
   and outputs a tab-separated table of output. each row in the output
   represents a single extracted (argument1, relation phrase, argument2)
   triple, plus metadata. the output has the following columns:
    1. the filename (or stdin if the source is standard input)
    2. the sentence number this extraction came from.
    3. argument1 words, space separated
    4. relation phrase words, space separated
    5. argument2 words, space separated
    6. the start index of argument1 in the sentence. for example, if the
       value is i, then the first word of argument1 is the i-1th word in
       the sentence.
    7. the end index of argument1 in the sentence. for example, if the
       value is j, then the last word of argument1 is the jth word in the
       sentence.
    8. the start index of relation phrase.
    9. the end index of relation phrase.
   10. the start index of argument2.
   11. the end index of argument2.
   12. the confidence that this extraction is correct. the higher the
       number, the more trustworthy this extraction is.
   13. the words of the sentence this extraction came from,
       space-separated.
   14. the part-of-speech tags for the sentence words, space-separated.
   15. the chunk tags for the sentence words, space separated. these
       represent a shallow parse of the sentence.
   16. a normalized version of arg1. see the binaryextractionnormalizer
       javadoc for details about how the id172 is done.
   17. a normalized version of rel.
   18. a normalized version of arg2.

   for example:
$ echo "bananas are an excellent source of potassium." |
    ./reverb -q | tr '\t' '\n' | cat -n
 1  stdin
 2  1
 3  bananas
 4  are an excellent source of
 5  potassium
 6  0
 7  1
 8  1
 9  6
10  6
11  7
12  0.9999999997341693
13  bananas are an excellent source of potassium .
14  nns vbp dt jj nn in nn .
15  b-np b-vp b-np i-np i-np i-np i-np o
16  bananas
17  be source of
18  potassium

   for a list of options to the command line interface to reverb, run
   reverb -h.

examples

running reverb on small set of files

./reverb file1 file2 file3 ...

running reverb on standard input

./reverb < input

running reverb on html files

   the --strip-html flag (short version: -s) removes tags from the input
   before running reverb.
./reverb --strip-html myfile.html

running reverb on a list of files

   you may have an entire directory structure that you want to run reverb
   on. reverb takes approximately 10 seconds to initialize, so it is not
   efficient to start a new process for each file. to pass reverb a list
   of paths, use the -f switch:
# run reverb on all files under mydir/
find mydir/ -type f | ./reverb -f

java interface

   to include reverb as a library in your own project, please take a look
   at the example class reverbexample in the
   src/main/java/edu/washington/cs/knowitall/examples directory.

   when running code that calls reverb, make sure to increase the java
   virtual machine heap size by passing the argument -xmx512m to java.
   reverb loads multiple models into memory, and will be significantly
   slower if the heap size is not large enough.

using eclipse

   to modify the reverb source code in eclipse, use apache maven to create
   the appropriate project files:
mvn eclipse:eclipse

   then, start eclipse and navigate to file > import. then, under general,
   select "existing projects into workspace". then point eclipse to the
   main reverb directory.

including reverb as a dependency

   if you want to start a new project that depends on reverb, first create
   a new skeleton project using maven. the following command will ask you
   to fill in the details of your project name, etc.:
mvn archetype:generate

   next, add reverb as a dependency. to make sure you are using the latest
   version of reverb, [81]consult maven central. do this by adding the
   following xml under the <project> element:
<dependencies>
  <dependency>
    <groupid>edu.washington.cs.knowitall</groupid>
    <artifactid>reverb-core</artifactid>
    <version>1.4.1</version>
  </dependency>
</dependencies>

   your final pom.xml file should look something like this:
<project xmlns="http://maven.apache.org/pom/4.0.0" xmlns:xsi="http://www.w3.org/
2001/xmlschema-instance"
  xsi:schemalocation="http://maven.apache.org/pom/4.0.0 http://maven.apache.org/
xsd/maven-4.0.0.xsd">
  <modelversion>4.0.0</modelversion>

  <groupid>mygroup</groupid>
  <artifactid>myartifact</artifactid>
  <version>1.0-snapshot</version>
  <packaging>jar</packaging>

  <name>myartifact</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceencoding>utf-8</project.build.sourceencoding>
  </properties>

  <dependencies>
    <dependency>
      <groupid>junit</groupid>
      <artifactid>junit</artifactid>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupid>edu.washington.cs.knowitall</groupid>
      <artifactid>reverb-core</artifactid>
      <version>1.4.1</version>
    </dependency>
  </dependencies>
</project>

   you should be able to include reverb in your code now. you can try this
   out by including import
   edu.washington.cs.knowitall.extractor.reverbextractor in your program.

retraining the confidence function

   reverb includes a class for training new confidence functions, given a
   list of labeled examples, called reverbclassifiertrainer. example code
   for training a new confidence function conffunction is shown below -
   the non-trivial part is likely to be converting your labeled data to an
   iterable<labeledbinaryextraction>.

   example pseudocode:
// provide your labeled data here
iterable<labeledbinaryextraction> mylabeleddata = ???
reverbclassifiertrainer trainer =
    new reverbclassifiertrainer(mylabeleddata);
logistic classifier = trainer.getclassifier();
reverbconffunction conffunction = new reverbconffunction(classifier);
 // conffunction is ready to use here.
double conf = conffunction.getconf(extraction);

   if you already have a list of binary labeled reverb extractions, it
   should be easy to convert them to chunkedbinaryextraction objects, and
   then to labeledbinaryextraction objects (see the constructors for these
   classes). also note that reverb includes a
   labeledbinaryextractionreader and writer class. you may wish to
   (re-)serialize your data using labeledbinaryextractionwriter - this
   will put it in the same format as all previous data used to train
   reverb confidence functions, and it will be easy to read in the future
   with labeledbinaryextractionreader.

help and contact

   for more information, please visit the reverb homepage at the
   university of washington: [82]http://reverb.cs.washington.edu.

faq

    1. how fast is reverb?
       you should really benchmark reverb yourself, but on my computer (a
       new computer in 2011) reverb processed 5000 high-quality web
       sentences in 21 s, or 238 sentences per second, in a single thread.
       reverb is easily parallelizable by processing different sentences
       concurrently.

contributors

     * anthony fader [83]http://www.cs.washington.edu/homes/afader
     * michael schmitz [84]http://www.schmitztech.com/
     * robert bart (rbart at cs.washington.edu)
     * janara christensen [85]http://www.cs.washington.edu/homes/janara
     * niranjan balasubramanian
       [86]http://www.cs.washington.edu/homes/niranjan
     * jonathan berant [87]http://www.cs.tau.ac.il/~jonatha6

citing reverb

   if you use reverb in your academic work, please cite reverb with the
   following bibtex citation:
@inproceedings{reverb2011,
  author =   {anthony fader and stephen soderland and oren etzioni},
  title =    {identifying relations for id10},
  booktitle =    {proceedings of the conference of empirical methods
                  in natural language processing ({emnlp} '11)},
  year =     {2011},
  month =    {july 27-31},
  address =  {edinburgh, scotland, uk}
}

     *    2019 github, inc.
     * [88]terms
     * [89]privacy
     * [90]security
     * [91]status
     * [92]help

     * [93]contact github
     * [94]pricing
     * [95]api
     * [96]training
     * [97]blog
     * [98]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [99]reload to refresh your
   session. you signed out in another tab or window. [100]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/knowitall/reverb/commits/master.atom
   3. https://github.com/knowitall/reverb/#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/knowitall/reverb
  32. https://github.com/join
  33. https://github.com/login?return_to=/knowitall/reverb
  34. https://github.com/knowitall/reverb/watchers
  35. https://github.com/login?return_to=/knowitall/reverb
  36. https://github.com/knowitall/reverb/stargazers
  37. https://github.com/login?return_to=/knowitall/reverb
  38. https://github.com/knowitall/reverb/network/members
  39. https://github.com/knowitall
  40. https://github.com/knowitall/reverb
  41. https://github.com/knowitall/reverb
  42. https://github.com/knowitall/reverb/issues
  43. https://github.com/knowitall/reverb/pulls
  44. https://github.com/knowitall/reverb/projects
  45. https://github.com/knowitall/reverb/pulse
  46. https://github.com/join?source=prompt-code
  47. http://reverb.cs.washington.edu/
  48. https://github.com/knowitall/reverb/commits/master
  49. https://github.com/knowitall/reverb/branches
  50. https://github.com/knowitall/reverb/releases
  51. https://github.com/knowitall/reverb/graphs/contributors
  52. https://github.com/knowitall/reverb/blob/master/license.txt
  53. https://github.com/knowitall/reverb/search?l=java
  54. https://github.com/knowitall/reverb/search?l=shell
  55. https://github.com/knowitall/reverb/find/master
  56. https://github.com/knowitall/reverb/archive/master.zip
  57. https://github.com/login?return_to=https://github.com/knowitall/reverb/
  58. https://github.com/join?return_to=/knowitall/reverb
  59. https://desktop.github.com/
  60. https://desktop.github.com/
  61. https://developer.apple.com/xcode/
  62. https://visualstudio.github.com/
  63. https://github.com/scid48d
  64. https://github.com/knowitall/reverb/commits?author=scid48d
  65. https://github.com/knowitall/reverb/commit/a87e2b9c142156f0626753b9bf354970512db826
  66. https://github.com/knowitall/reverb/pull/18
  67. https://github.com/knowitall/reverb/commit/a87e2b9c142156f0626753b9bf354970512db826
  68. https://github.com/knowitall/reverb/commit/a87e2b9c142156f0626753b9bf354970512db826
  69. https://github.com/knowitall/reverb/tree/a87e2b9c142156f0626753b9bf354970512db826
  70. https://github.com/knowitall/reverb/tree/master/core
  71. https://github.com/knowitall/reverb/commit/b69f85ad16cdef516885726054d7bf8f2e889022
  72. https://github.com/knowitall/reverb/tree/master/models
  73. https://github.com/knowitall/reverb/commit/7d01b3ed4894e4f5d35c0f22b15e8e7e89edbf35
  74. https://github.com/knowitall/reverb/blob/master/.gitignore
  75. https://github.com/knowitall/reverb/blob/master/.travis.yml
  76. https://github.com/knowitall/reverb/blob/master/license.txt
  77. https://github.com/knowitall/reverb/blob/master/readme.md
  78. http://reverb.cs.washington.edu/
  79. http://reverb.cs.washington.edu/reverb-latest.jar
  80. http://maven.apache.org/
  81. http://search.maven.org/#search|ga|1|reverb
  82. http://reverb.cs.washington.edu/
  83. http://www.cs.washington.edu/homes/afader
  84. http://www.schmitztech.com/
  85. http://www.cs.washington.edu/homes/janara
  86. http://www.cs.washington.edu/homes/niranjan
  87. http://www.cs.tau.ac.il/~jonatha6
  88. https://github.com/site/terms
  89. https://github.com/site/privacy
  90. https://github.com/security
  91. https://githubstatus.com/
  92. https://help.github.com/
  93. https://github.com/contact
  94. https://github.com/pricing
  95. https://developer.github.com/
  96. https://training.github.com/
  97. https://github.blog/
  98. https://github.com/about
  99. https://github.com/knowitall/reverb/
 100. https://github.com/knowitall/reverb/

   hidden links:
 102. https://github.com/
 103. https://github.com/knowitall/reverb/
 104. https://github.com/knowitall/reverb/
 105. https://github.com/knowitall/reverb/
 106. https://help.github.com/articles/which-remote-url-should-i-use
 107. https://github.com/knowitall/reverb/#reverb
 108. https://github.com/knowitall/reverb/#quick-start
 109. https://github.com/knowitall/reverb/#building
 110. https://github.com/knowitall/reverb/#command-line-interface
 111. https://github.com/knowitall/reverb/#examples
 112. https://github.com/knowitall/reverb/#running-reverb-on-small-set-of-files
 113. https://github.com/knowitall/reverb/#running-reverb-on-standard-input
 114. https://github.com/knowitall/reverb/#running-reverb-on-html-files
 115. https://github.com/knowitall/reverb/#running-reverb-on-a-list-of-files
 116. https://github.com/knowitall/reverb/#java-interface
 117. https://github.com/knowitall/reverb/#using-eclipse
 118. https://github.com/knowitall/reverb/#including-reverb-as-a-dependency
 119. https://github.com/knowitall/reverb/#retraining-the-confidence-function
 120. https://github.com/knowitall/reverb/#help-and-contact
 121. https://github.com/knowitall/reverb/#faq
 122. https://github.com/knowitall/reverb/#contributors
 123. https://github.com/knowitall/reverb/#citing-reverb
 124. https://github.com/
