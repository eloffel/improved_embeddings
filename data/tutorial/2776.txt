   #[1]github [2]recent commits to python-ucto:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]2
     * [35]star [36]24
     * [37]fork [38]3

[39]proycon/[40]python-ucto

   [41]code [42]issues 3 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   this is a python binding to the tokenizer ucto. tokenisation is one of
   the first step in almost any natural language processing task, yet it
   is not always as trivial a task as it appears to be. this binding makes
   the power of the ucto tokeniser available to python. ucto itself is
   regular-expression based, extensible, and advanced tokeniser writt   
   [47]nlp [48]computational-linguistics [49]python [50]tokenizer
   [51]text-processing [52]folia [53]nlp-library
     * [54]64 commits
     * [55]2 branches
     * [56]7 releases
     * [57]fetching contributors

    1. [58]python 100.0%

   (button) python
   branch: master (button) new pull request
   [59]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/p
   [60]download zip

downloading...

   want to be notified of new releases in proycon/python-ucto?
   [61]sign in [62]sign up

launching github desktop...

   if nothing happens, [63]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [64]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [65]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [66]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [67]permalink
   type           name           latest commit message commit time
        failed to load latest commit information.
        [68]readme.rst
        [69]example.py
        [70]example2.py
        [71]libfolia_classes.pxd
        [72]setup.id18
        [73]setup.py
        [74]ucto_classes.pxd
        [75]ucto_wrapper.pyx
        [76]ucto_wrapper2.pyx

readme.rst

   [77]http://applejack.science.ru.nl/lamabadge.php/python-ucto
   [78][68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3230303330333631
   2e737667]

ucto for python

   this is a python binding to the tokeniser ucto. tokenisation is one of
   the first step in almost any natural language processing task, yet it
   is not always as trivial a task as it appears to be. this binding makes
   the power of the ucto tokeniser available to python. ucto itself is a
   regular-expression based, extensible, and advanced tokeniser written in
   c++ ([79]https://languagemachines.github.io/ucto).

installation

easy

     * on debian/ubuntu linux: check if the package python-ucto or
       python3-ucto is available already.
     * on arch linux, use the python-ucto-git
       <[80]https://aur.archlinux.org/packages/python-ucto-git/>_ package
       from the arch user repository (aur).
     * in all other cases, for easy installation of both python-ucto as
       well as ucto itself, please use our lamachine distribution
       ([81]https://proycon.github.io/lamachine)

manual (advanced)

     * make sure to first install ucto itself
       ([82]https://languagemachines.github.io/ucto) and all its
       dependencies.
     * install cython if not yet available on your system: $ sudo apt-get
       cython cython3 (debian/ubuntu, may differ for others)
     * clone this repository and run: $ sudo python setup.py install (make
       sure to use the desired version of python)

   advanced note: if the ucto libraries and includes are installed in a
   non-standard location, you can set environment variables include_dirs
   and library_dirs to point to them prior to invocation of setup.py
   install.

usage

   import and instantiate the tokenizer class with a configuration file.
import ucto
configurationfile = "tokconfig-eng"
tokenizer = ucto.tokenizer(configurationfile)

   the configuration files supplied with ucto are named tokconfig-xxx
   where xxx corresponds to a three letter iso-639-3 language code. there
   is also a tokconfig-generic one that has no language-specific rules.
   alternatively, you can make and supply your own configuration file.
   note that for older versions of ucto you may need to provide the
   absolute path, but the latest versions will find the configurations
   supplied with ucto automatically. see [83]here for a list of available
   configuration in the latest version.

   the constructor for the tokenizer class takes the following keyword
   arguments:
     * lowercase (defaults to false) -- lowercase all text
     * uppercase (defaults to false) -- uppercase all text
     * sentenceperlineinput (defaults to false) -- set this to true if
       each sentence in your input is on one line already and you do not
       require further sentence boundary detection from ucto.
     * sentenceperlineoutput (defaults to false) -- set this if you want
       each sentence to be outputted on one line. has not much effect
       within the context of python.
     * sentencedetection (defaults to true) -- do sentence boundary
       detection.
     * paragraphdetection (defaults to true) -- do paragraph detection.
       paragraphs are simply delimited by an empty line.
     * quotedetection (defaults to false) -- set this if you want to
       enable the experimental quote detection, to detect quoted text
       (enclosed within some sort of single/double quote)
     * debug (defaults to false) -- enable verbose debug output

   text is passed to the tokeniser using the process() method, this method
   returns the number of tokens rather than the tokens itself. it may be
   called multiple times in sequence. the tokens themselves will be
   buffered in the tokenizer instance and can be obtained by iterating
   over it, after which the buffer will be cleared:
#pass the text (a str) (may be called multiple times),
tokenizer.process(text)

#read the tokenised data
for token in tokenizer:
    #token is an instance of ucto.token, serialise to string using str()
    print(str(token))

    #tokens remember whether they are followed by a space
    if token.isendofsentence():
        print()
    elif not token.nospace():
        print(" ",end="")

   the process() method takes a single string (str in python 3, unicode in
   python 2), as parameter. the string may contain newlines, and newlines
   are not necessary sentence bounds unless you instantiated the tokenizer
   with sentenceperlineinput=true.

   each token is an instance of ucto.token. it can be serialised to string
   using str() (python 3), as shown in the example above. in python 2, use
   unicode() instead.

   the following methods are available on ucto.token instances: *
   isendofsentence() -- returns a boolean indicating whether this is the
   last token of a sentence. * nospace() -- returns a boolean, if true
   there is no space following this token in the original input text. *
   isnewparagraph() -- returns true if this token is the start of a new
   paragraph. * isbeginofquote() * isendofquote() * tokentype -- this is
   an attribute, not a method. it contains the type or class of the token
   (e.g. a string like word, abbreviation, punctuation, url, email,
   smiley, etc..)

   in addition to the low-level process() method, the tokenizer can also
   read an input file and produce an output file, in the same fashion as
   ucto itself does when invoked from the command line. this is achieved
   using the tokenize(inputfilename, outputfilename) method:
tokenizer.tokenize("input.txt","output.txt")

   input and output files may be either plain text, or in the [84]folia
   xml format. upon instantiation of the tokenizer class, there are two
   keyword arguments to indicate this:
     * xmlinput or foliainput -- a boolean that indicates whether the
       input is folia xml (true) or plain text (false). defaults to false.
     * xmloutput or foliaoutput -- a boolean that indicates whether the
       input is folia xml (true) or plain text (false). defaults to false.

   an example for plain text input and folia output:
tokenizer = ucto.tokenizer(configurationfile, foliaoutput=true)
tokenizer.tokenize("input.txt", "ucto_output.folia.xml")

   folia documents retain all the information ucto can output, unlike the
   plain text representation. these documents can be read and manipulated
   from python using the pynlpl.formats.folia module, part of [85]pynlpl.
   folia is especially recommended if you intend to further enrich the
   document with linguistic annotation. a small example of reading ucto's
   folia output using this library follows, but consult the
   [86]documentation for more:
import pynlpl.formats.folia
doc = folia.document(file="ucto_output.folia.xml")
for paragraph in doc.paragraphs():
    for sentence in paragraph.sentence():
        for word in sentence.words()
            print(word.text(), end="")
            if word.space:
                print(" ", end="")
        print()
    print()

test and example

   run and inspect example.py (python 3) or example2.py (python 2) for
   examples.

     *    2019 github, inc.
     * [87]terms
     * [88]privacy
     * [89]security
     * [90]status
     * [91]help

     * [92]contact github
     * [93]pricing
     * [94]api
     * [95]training
     * [96]blog
     * [97]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [98]reload to refresh your
   session. you signed out in another tab or window. [99]reload to refresh
   your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/proycon/python-ucto/commits/master.atom
   3. https://github.com/proycon/python-ucto#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/proycon/python-ucto
  32. https://github.com/join
  33. https://github.com/login?return_to=/proycon/python-ucto
  34. https://github.com/proycon/python-ucto/watchers
  35. https://github.com/login?return_to=/proycon/python-ucto
  36. https://github.com/proycon/python-ucto/stargazers
  37. https://github.com/login?return_to=/proycon/python-ucto
  38. https://github.com/proycon/python-ucto/network/members
  39. https://github.com/proycon
  40. https://github.com/proycon/python-ucto
  41. https://github.com/proycon/python-ucto
  42. https://github.com/proycon/python-ucto/issues
  43. https://github.com/proycon/python-ucto/pulls
  44. https://github.com/proycon/python-ucto/projects
  45. https://github.com/proycon/python-ucto/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/topics/nlp
  48. https://github.com/topics/computational-linguistics
  49. https://github.com/topics/python
  50. https://github.com/topics/tokenizer
  51. https://github.com/topics/text-processing
  52. https://github.com/topics/folia
  53. https://github.com/topics/nlp-library
  54. https://github.com/proycon/python-ucto/commits/master
  55. https://github.com/proycon/python-ucto/branches
  56. https://github.com/proycon/python-ucto/releases
  57. https://github.com/proycon/python-ucto/graphs/contributors
  58. https://github.com/proycon/python-ucto/search?l=python
  59. https://github.com/proycon/python-ucto/find/master
  60. https://github.com/proycon/python-ucto/archive/master.zip
  61. https://github.com/login?return_to=https://github.com/proycon/python-ucto
  62. https://github.com/join?return_to=/proycon/python-ucto
  63. https://desktop.github.com/
  64. https://desktop.github.com/
  65. https://developer.apple.com/xcode/
  66. https://visualstudio.github.com/
  67. https://github.com/proycon/python-ucto/tree/1490d0957c60ad9a8c3aec7e6e2380cbc3203b6f
  68. https://github.com/proycon/python-ucto/blob/master/readme.rst
  69. https://github.com/proycon/python-ucto/blob/master/example.py
  70. https://github.com/proycon/python-ucto/blob/master/example2.py
  71. https://github.com/proycon/python-ucto/blob/master/libfolia_classes.pxd
  72. https://github.com/proycon/python-ucto/blob/master/setup.id18
  73. https://github.com/proycon/python-ucto/blob/master/setup.py
  74. https://github.com/proycon/python-ucto/blob/master/ucto_classes.pxd
  75. https://github.com/proycon/python-ucto/blob/master/ucto_wrapper.pyx
  76. https://github.com/proycon/python-ucto/blob/master/ucto_wrapper2.pyx
  77. http://applejack.science.ru.nl/languagemachines/
  78. https://zenodo.org/badge/latestdoi/20030361
  79. https://languagemachines.github.io/ucto
  80. https://aur.archlinux.org/packages/python-ucto-git/>_
  81. https://proycon.github.io/lamachine
  82. https://languagemachines.github.io/ucto
  83. https://github.com/languagemachines/uctodata/tree/master/config
  84. https://proycon.github.io/folia
  85. https://github.com/proycon/pynlpl
  86. http://pynlpl.readthedocs.io/en/latest/folia.html
  87. https://github.com/site/terms
  88. https://github.com/site/privacy
  89. https://github.com/security
  90. https://githubstatus.com/
  91. https://help.github.com/
  92. https://github.com/contact
  93. https://github.com/pricing
  94. https://developer.github.com/
  95. https://training.github.com/
  96. https://github.blog/
  97. https://github.com/about
  98. https://github.com/proycon/python-ucto
  99. https://github.com/proycon/python-ucto

   hidden links:
 101. https://github.com/
 102. https://github.com/proycon/python-ucto
 103. https://github.com/proycon/python-ucto
 104. https://github.com/proycon/python-ucto
 105. https://help.github.com/articles/which-remote-url-should-i-use
 106. https://github.com/proycon/python-ucto#ucto-for-python
 107. https://github.com/proycon/python-ucto#installation
 108. https://github.com/proycon/python-ucto#easy
 109. https://github.com/proycon/python-ucto#manual-advanced
 110. https://github.com/proycon/python-ucto#usage
 111. https://github.com/proycon/python-ucto#test-and-example
 112. https://github.com/
