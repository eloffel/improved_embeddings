   #[1]github [2]recent commits to keraflow:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]5
     * [35]star [36]27
     * [37]fork [38]3

[39]ipod825/[40]keraflow

   [41]code [42]issues 0 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   no description, website, or topics provided.
     * [47]17 commits
     * [48]1 branch
     * [49]0 releases
     * [50]fetching contributors
     * [51]view license

    1. [52]python 99.1%
    2. [53]shell 0.9%

   (button) python shell
   branch: master (button) new pull request
   [54]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/i
   [55]download zip

downloading...

   want to be notified of new releases in ipod825/keraflow?
   [56]sign in [57]sign up

launching github desktop...

   if nothing happens, [58]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [59]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [60]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [61]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [62]permalink
   type       name      latest commit message commit time
        failed to load latest commit information.
        [63]dev_scripts
        [64]docs
        [65]examples
        [66]keraflow
        [67]tests
        [68].gitignore
        [69].travis.yml
        [70]license
        [71]readme.md
        [72]setup.id18
        [73]setup.py

readme.md

keraflow: deep learning library for theano and tensorflow. keras follower.

   [74]build status [75]pypi version [76]license

why keraflow

     keras is a minimalist, highly modular neural networks library,
     written in python and capable of running on top of either
     [77]tensorflow or [78]theano. it was developed with a focus on
     enabling fast experimentation. being able to go from idea to result
     with the least possible delay is key to doing good research.

   as its official description, [79]keras serves as an excellent front-end
   for graph based deep learning framework. however, from the point of
   view of soft-engineering, its api design and its complicated internal
   mechanism makes it hard to understand and cumbersome to extend.
   therefore, i reimplement the core of keras to provide:
    1. a simpler tensor linkage mechanism for developers to understand it.
    2. a cleaner and more consistent api for user to use and extend it.
    3. some extra functionality not implemented in keras.

   for the full api reference, read the [80]online documentation. it is
   strongly recommended to read the [81]tutorials first to know the basics
   on building neural network models with keraflow.
     __________________________________________________________________

features

keras-like

     * uses both theano and tensorflow as backend.
     * provides various layers including convolution layers and recurrent
       layers.
     * decoupled regularizer, constraint, layer, optimizer... modules.
     * supports arbitrary connectivity schemes (including multi-input and
       multi-output training).

new features

     * a simpler tensor linkage mechnism.
     * an easier way of writing custmoized layers
          + no initial_weights, regularizers, constraints arguments for
            layers' __init__.
          + no get_config for layers' serialization.
          + existing layer are reusable to build new layers with the magic
            embed function.

   for more details about the difference between keraflow and keras,
   please refer to the [82]differences from keras.
     __________________________________________________________________

installation

   keraflow uses the following dependencies:
     * numpy, scipy, tqdm
     * pyyaml, hickle (optional, required if you use model saving/loading
       functions)
     * optional but recommended if you use id98s: cudnn.

   when using the theano backend:
     * theano
          + [83]see installation instructions.

   when using the tensorflow backend:
     * tensorflow
          + [84]see installation instructions.

   to install keraflow, cd to the keraflow folder and run the install
   command:
$ sudo pip install .

   you can also install keraflow from pypi:
$ sudo pip install keraflow
     __________________________________________________________________

documentation

    1. documentation uses [85]doxygen.
    2. follow the convention to use @ for special commands (param,
       package... etc.)
    3. installation

$ sudo apt-get install doxygen
$ sudo pip install doxypy

    4. documentation generation

$ cd docs
$ doxygen doxyfile
# open ./html/index.html with web browser
     __________________________________________________________________

differences from keras

a simpler tensor linkage mechanism

   two main things that makes keras complicated:
    1. keras determines layer input shape by back-tracing from output
       tensors to input tensors, which makes its tensor linkage process a
       recursive process.
    2. keras keeps track of tensor linkage by keeping two lists
       inbound_nodes and outbound_nodes in each layer. however,
       maintaining a list to keep track of linkage is usually a
       brain-killing job.

   keraflow, intead
    1. flows information (tensors and their shapes) from inputs to
       outputs, making tensor linkage a sequential process (well, at least
       a+b+c+d is more amiable than (a+(b+(c+d)))).
    2. uses only a list to keep track of tensor linkage, which is actually
       unnecessary if serilization is not a concern.

an easier way of writing custmoized layers

less arguments for layers' __init__

   check the constructor of dense layer:

   keras
def __init__(self, output_dim, init='glorot_uniform', activation='linear', weigh
ts=none, w_regularizer=none, b_regularizer=none, activity_regularizer=none, w_co
nstraint=none, b_constraint=none, bias=true, input_dim=none, **kwargs):

   keraflow
def __init__(self, output_dim, init='glorot_uniform', activation='linear', bias=
true, **kwargs):

   the signal of initial weights, regularizers, and constraints disappear
   since keraflow takes care of them in layer class. the signal of input
   dimension also disappears since keraflow force users to specify an
   input layer and their shape for all models.

   when creating a customized layer, users no longer need to write
   regularizers, constraints initialization code for the layer. special
   care for the input dimension is also unnecessary.

   one additional merit of abstracting initial_weights, regularizers,
   constraints initialization process in layer class is that keraflow
   easily (without adding too much code) enables users to initialize those
   of a layer with dictionary:
dense = dense(64, initial_weights={'w': w, 'b':b},
              regularizers={'w': 'l1', 'b':'l2'},
              constraints={'w': 'maxnorm', 'b':'unitnorm'})
dense = dense(64, initial_weights=[w, b],
              regularizers=['l1', 'l2'],
              constraints=['maxnorm', 'unitnorm'])

no get_config for serialization.

   every layer in keras has a get_config function, which is needed for
   serializing models. though its implementation is not necessary for
   customized layers, it would be good for developers to save the time
   implementing it just for serializing their models.

   keraflow takes care of this, every layer that fulfils some
   [86]constraints is naturally seizable.

embed existing layers to write new layers

   currently, in keras, when writing you own layers, even if you want to
   conduct similar operation of the dense layer, you still need to define
   some trainable parameters (write initialization code and add it to the
   layer's trainable parameters list) for that.

   in keraflow, you could simply write (in output function, the
   correspondence of get_output_for in keras):
self.embed(dense(output_dim))(input_tensor)

   everything is done!! the parameters of dense is automatically added as
   parameters of your layer and is updated during training. for more
   information, see [87]layer embedding
     __________________________________________________________________

contribute

environment setting

   to make keraflow compatible with both python2 & python3. we use
   [88]pyenv to build virtual environment. the shell script
   dev_scrips/install_dependency.sh could quickly sets up the testing
   environments.
# in project root directory (parent directory  of `dev_scripts`)
# two pyenv environment k2, k3 will be installed.
$ bash dev_scrips/install_dependency.sh

   note: the script does not add pyenv path in your script config file
   (e.g. ~/.zshrc). you will need to manually copy and paste the following
   into your shell config file so that the next time you log in, pyenv
   will be in the path:
export path="$home/.pyenv/bin:$path"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

   to quickly modify and run tests. run:
# install keraflow in developer mode
$ pyenv_version=k2 pip install -e .
$ pyenv_version=k3 pip install -e .
# in project root directory (parent directory  of `dev_scripts`)
$ bash dev_scripts/run_test.sh

flake8

   dev_scripts/run_test.sh checks syntax with flake8, if you fail on
   syntax check, you could use autopep8 to fix it:
$ pip install autopep8
$ autopep8 --recursive -i --select e128 keraflow  # fix all error no.128

   it is highly recommend you avoid these errors when writing them using
   some editor plugins. if you use vim (or neovim), i recommend installing
   flake8 and adopt the settings in this [89]gist. note that flask8 is
   required:
$ pip install flask8

     *    2019 github, inc.
     * [90]terms
     * [91]privacy
     * [92]security
     * [93]status
     * [94]help

     * [95]contact github
     * [96]pricing
     * [97]api
     * [98]training
     * [99]blog
     * [100]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [101]reload to refresh your
   session. you signed out in another tab or window. [102]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/ipod825/keraflow/commits/master.atom
   3. https://github.com/ipod825/keraflow#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/ipod825/keraflow
  32. https://github.com/join
  33. https://github.com/login?return_to=/ipod825/keraflow
  34. https://github.com/ipod825/keraflow/watchers
  35. https://github.com/login?return_to=/ipod825/keraflow
  36. https://github.com/ipod825/keraflow/stargazers
  37. https://github.com/login?return_to=/ipod825/keraflow
  38. https://github.com/ipod825/keraflow/network/members
  39. https://github.com/ipod825
  40. https://github.com/ipod825/keraflow
  41. https://github.com/ipod825/keraflow
  42. https://github.com/ipod825/keraflow/issues
  43. https://github.com/ipod825/keraflow/pulls
  44. https://github.com/ipod825/keraflow/projects
  45. https://github.com/ipod825/keraflow/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/ipod825/keraflow/commits/master
  48. https://github.com/ipod825/keraflow/branches
  49. https://github.com/ipod825/keraflow/releases
  50. https://github.com/ipod825/keraflow/graphs/contributors
  51. https://github.com/ipod825/keraflow/blob/master/license
  52. https://github.com/ipod825/keraflow/search?l=python
  53. https://github.com/ipod825/keraflow/search?l=shell
  54. https://github.com/ipod825/keraflow/find/master
  55. https://github.com/ipod825/keraflow/archive/master.zip
  56. https://github.com/login?return_to=https://github.com/ipod825/keraflow
  57. https://github.com/join?return_to=/ipod825/keraflow
  58. https://desktop.github.com/
  59. https://desktop.github.com/
  60. https://developer.apple.com/xcode/
  61. https://visualstudio.github.com/
  62. https://github.com/ipod825/keraflow/tree/d31ce6b4b01279763c5c90c42791a0e4ffc8ff3e
  63. https://github.com/ipod825/keraflow/tree/master/dev_scripts
  64. https://github.com/ipod825/keraflow/tree/master/docs
  65. https://github.com/ipod825/keraflow/tree/master/examples
  66. https://github.com/ipod825/keraflow/tree/master/keraflow
  67. https://github.com/ipod825/keraflow/tree/master/tests
  68. https://github.com/ipod825/keraflow/blob/master/.gitignore
  69. https://github.com/ipod825/keraflow/blob/master/.travis.yml
  70. https://github.com/ipod825/keraflow/blob/master/license
  71. https://github.com/ipod825/keraflow/blob/master/readme.md
  72. https://github.com/ipod825/keraflow/blob/master/setup.id18
  73. https://github.com/ipod825/keraflow/blob/master/setup.py
  74. https://travis-ci.org/ipod825/keraflow
  75. https://pypi.python.org/pypi/keraflow
  76. https://github.com/ipod825/keraflow/blob/master/license
  77. https://github.com/tensorflow/tensorflow
  78. https://github.com/theano/theano
  79. https://github.com/fchollet/keras
  80. https://ipod825.github.io/keraflow/docs/html/index.html
  81. https://ipod825.github.io/keraflow/docs/html/md_tutorials.html
  82. https://github.com/ipod825/keraflow#differences-from-keras
  83. http://deeplearning.net/software/theano/install.html#install
  84. https://github.com/tensorflow/tensorflow#download-and-setup
  85. https://www.stack.nl/~dimitri/doxygen/manual/docblocks.html
  86. https://ipod825.github.io/keraflow/docs/html/md_developer-guide.html#serialization_mechanism
  87. https://ipod825.github.io/keraflow/docs/html/md_developer-guide.html#layer_embedding
  88. https://github.com/yyuu/pyenv
  89. https://gist.github.com/ipod825/fbee70d8bd063f228951cd4b6f38f4df
  90. https://github.com/site/terms
  91. https://github.com/site/privacy
  92. https://github.com/security
  93. https://githubstatus.com/
  94. https://help.github.com/
  95. https://github.com/contact
  96. https://github.com/pricing
  97. https://developer.github.com/
  98. https://training.github.com/
  99. https://github.blog/
 100. https://github.com/about
 101. https://github.com/ipod825/keraflow
 102. https://github.com/ipod825/keraflow

   hidden links:
 104. https://github.com/
 105. https://github.com/ipod825/keraflow
 106. https://github.com/ipod825/keraflow
 107. https://github.com/ipod825/keraflow
 108. https://help.github.com/articles/which-remote-url-should-i-use
 109. https://github.com/ipod825/keraflow#keraflow-deep-learning-library-for-theano-and-tensorflow-keras-follower
 110. https://github.com/ipod825/keraflow#why-keraflow
 111. https://github.com/ipod825/keraflow#features
 112. https://github.com/ipod825/keraflow#keras-like
 113. https://github.com/ipod825/keraflow#new-features
 114. https://github.com/ipod825/keraflow#installation
 115. https://github.com/ipod825/keraflow#documentation
 116. https://github.com/ipod825/keraflow#differences-from-keras
 117. https://github.com/ipod825/keraflow#a-simpler-tensor-linkage-mechanism
 118. https://github.com/ipod825/keraflow#an-easier-way-of-writing-custmoized-layers
 119. https://github.com/ipod825/keraflow#less-arguments-for-layers-__init__
 120. https://github.com/ipod825/keraflow#no-get_config-for-serialization
 121. https://github.com/ipod825/keraflow#embed-existing-layers-to-write-new-layers
 122. https://github.com/ipod825/keraflow#contribute
 123. https://github.com/ipod825/keraflow#environment-setting
 124. https://github.com/ipod825/keraflow#flake8
 125. https://github.com/
