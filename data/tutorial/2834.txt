   (button) [1]ufldl tutorial

multi-layer neural network
     __________________________________________________________________

   consider a supervised learning problem where we have access to labeled
   training examples (x^{(i)}, y^{(i)}). neural networks give a way of
   defining a complex, non-linear form of hypotheses h_{w,b}(x), with
   parameters w,b that we can fit to our data.

   to describe neural networks, we will begin by describing the simplest
   possible neural network, one which comprises a single    neuron.    we will
   use the following diagram to denote a single neuron:

                             [singleneuron.png]

   this    neuron    is a computational unit that takes as input x_1, x_2, x_3
   (and a +1 intercept term), and outputs \textstyle h_{w,b}(x) = f(w^tx)
   = f(\sum_{i=1}^3 w_{i}x_i +b), where f : \re \mapsto \re is called the
   activation function. in these notes, we will choose f(\cdot) to be the
   sigmoid function:
   f(z) = \frac{1}{1+\exp(-z)}.

   thus, our single neuron corresponds exactly to the input-output mapping
   defined by id28.

   although these notes will use the sigmoid function, it is worth noting
   that another common choice for f is the hyperbolic tangent, or tanh,
   function:
   f(z) = \tanh(z) = \frac{e^z - e^{-z}}{e^z + e^{-z}}.

   recent research has found a different activation function, the
   rectified linear function, often works better in practice for deep
   neural networks. this activation function is different from sigmoid and
   \tanh because it is not bounded or continuously differentiable. the
   rectified linear activation function is given by,
   f(z) = \max(0,x).

   here are plots of the sigmoid, \tanh and rectified linear functions:

                         [activation_functions.png]

   the \tanh(z) function is a rescaled version of the sigmoid, and its
   output range is [-1,1] instead of [0,1]. the rectified linear function
   is piece-wise linear and saturates at exactly 0 whenever the input z is
   less than 0.

   note that unlike some other venues (including the openclassroom videos,
   and parts of cs229), we are not using the convention here of x_0=1.
   instead, the intercept term is handled separately by the parameter b.

   finally, one identity that   ll be useful later: if f(z) = 1/(1+\exp(-z))
   is the sigmoid function, then its derivative is given by f'(z) = f(z)
   (1-f(z)). (if f is the tanh function, then its derivative is given by
   f'(z) = 1- (f(z))^2.) you can derive this yourself using the definition
   of the sigmoid (or tanh) function. the rectified linear function has
   gradient 0 when z \leq 0 and 1 otherwise. the gradient is undefined at
   z=0, though this doesn   t cause problems in practice because we average
   the gradient over many training examples during optimization.

neural network model

   a neural network is put together by hooking together many of our simple
      neurons,    so that the output of a neuron can be the input of another.
   for example, here is a small neural network:

                              [network331.png]

   in this figure, we have used circles to also denote the inputs to the
   network. the circles labeled    +1    are called bias units, and correspond
   to the intercept term. the leftmost layer of the network is called the
   input layer, and the rightmost layer the output layer (which, in this
   example, has only one node). the middle layer of nodes is called the
   hidden layer, because its values are not observed in the training set.
   we also say that our example neural network has 3 input units (not
   counting the bias unit), 3 hidden units, and 1 output unit.

   we will let n_l denote the number of layers in our network; thus n_l=3
   in our example. we label layer l as l_l, so layer l_1 is the input
   layer, and layer l_{n_l} the output layer. our neural network has
   parameters (w,b) = (w^{(1)}, b^{(1)}, w^{(2)}, b^{(2)}), where we write
   w^{(l)}_{ij} to denote the parameter (or weight) associated with the
   connection between unit j in layer l, and unit i in layer l+1. (note
   the order of the indices.) also, b^{(l)}_i is the bias associated with
   unit i in layer l+1. thus, in our example, we have w^{(1)} \in
   \re^{3\times 3}, and w^{(2)} \in \re^{1\times 3}. note that bias units
   don   t have inputs or connections going into them, since they always
   output the value +1. we also let s_l denote the number of nodes in
   layer l (not counting the bias unit).

   we will write a^{(l)}_i to denote the activation (meaning output value)
   of unit i in layer l. for l=1, we also use a^{(1)}_i = x_i to denote
   the i-th input. given a fixed setting of the parameters w,b, our neural
   network defines a hypothesis h_{w,b}(x) that outputs a real number.
   specifically, the computation that this neural network represents is
   given by:
   \begin{align} a_1^{(2)} &= f(w_{11}^{(1)}x_1 + w_{12}^{(1)} x_2 +
   w_{13}^{(1)} x_3 + b_1^{(1)}) \\ a_2^{(2)} &= f(w_{21}^{(1)}x_1 +
   w_{22}^{(1)} x_2 + w_{23}^{(1)} x_3 + b_2^{(1)}) \\ a_3^{(2)} &=
   f(w_{31}^{(1)}x_1 + w_{32}^{(1)} x_2 + w_{33}^{(1)} x_3 + b_3^{(1)}) \\
   h_{w,b}(x) &= a_1^{(3)} = f(w_{11}^{(2)}a_1^{(2)} + w_{12}^{(2)}
   a_2^{(2)} + w_{13}^{(2)} a_3^{(2)} + b_1^{(2)}) \end{align}

   in the sequel, we also let z^{(l)}_i denote the total weighted sum of
   inputs to unit i in layer l, including the bias term (e.g., \textstyle
   z_i^{(2)} = \sum_{j=1}^n w^{(1)}_{ij} x_j + b^{(1)}_i), so that
   a^{(l)}_i = f(z^{(l)}_i).

   note that this easily lends itself to a more compact notation.
   specifically, if we extend the activation function f(\cdot) to apply to
   vectors in an element-wise fashion (i.e., f([z_1, z_2, z_3]) = [f(z_1),
   f(z_2), f(z_3)]), then we can write the equations above more compactly
   as:
   \begin{align} z^{(2)} &= w^{(1)} x + b^{(1)} \\ a^{(2)} &= f(z^{(2)})
   \\ z^{(3)} &= w^{(2)} a^{(2)} + b^{(2)} \\ h_{w,b}(x) &= a^{(3)} =
   f(z^{(3)}) \end{align}

   we call this step forward propagation. more generally, recalling that
   we also use a^{(1)} = x to also denote the values from the input layer,
   then given layer l   s activations a^{(l)}, we can compute layer l+1   s
   activations a^{(l+1)} as:
   \begin{align} z^{(l+1)} &= w^{(l)} a^{(l)} + b^{(l)} \\ a^{(l+1)} &=
   f(z^{(l+1)}) \end{align}

   by organizing our parameters in matrices and using matrix-vector
   operations, we can take advantage of fast id202 routines to
   quickly perform calculations in our network.

   we have so far focused on one example neural network, but one can also
   build neural networks with other architectures (meaning patterns of
   connectivity between neurons), including ones with multiple hidden
   layers. the most common choice is a \textstyle n_l-layered network
   where layer \textstyle 1 is the input layer, layer \textstyle n_l is
   the output layer, and each layer \textstyle l is densely connected to
   layer \textstyle l+1. in this setting, to compute the output of the
   network, we can successively compute all the activations in layer
   \textstyle l_2, then layer \textstyle l_3, and so on, up to layer
   \textstyle l_{n_l}, using the equations above that describe the forward
   propagation step. this is one example of a feedforward neural network,
   since the connectivity graph does not have any directed loops or
   cycles.

   neural networks can also have multiple output units. for example, here
   is a network with two hidden layers layers l_2 and l_3 and two output
   units in layer l_4:

                              [network3322.png]

   to train this network, we would need training examples (x^{(i)},
   y^{(i)}) where y^{(i)} \in \re^2. this sort of network is useful if
   there   re multiple outputs that you   re interested in predicting. (for
   example, in a medical diagnosis application, the vector x might give
   the input features of a patient, and the different outputs y_i   s might
   indicate presence or absence of different diseases.)

id26 algorithm

   suppose we have a fixed training set \{ (x^{(1)}, y^{(1)}), \ldots,
   (x^{(m)}, y^{(m)}) \} of m training examples. we can train our neural
   network using batch id119. in detail, for a single training
   example (x,y), we define the cost function with respect to that single
   example to be:
   \begin{align} j(w,b; x,y) = \frac{1}{2} \left\| h_{w,b}(x) - y
   \right\|^2. \end{align}

   this is a (one-half) squared-error cost function. given a training set
   of m examples, we then define the overall cost function to be:
   \begin{align} j(w,b) &= \left[ \frac{1}{m} \sum_{i=1}^m
   j(w,b;x^{(i)},y^{(i)}) \right] + \frac{\lambda}{2} \sum_{l=1}^{n_l-1}
   \; \sum_{i=1}^{s_l} \; \sum_{j=1}^{s_{l+1}} \left( w^{(l)}_{ji}
   \right)^2 \\ &= \left[ \frac{1}{m} \sum_{i=1}^m \left( \frac{1}{2}
   \left\| h_{w,b}(x^{(i)}) - y^{(i)} \right\|^2 \right) \right] +
   \frac{\lambda}{2} \sum_{l=1}^{n_l-1} \; \sum_{i=1}^{s_l} \;
   \sum_{j=1}^{s_{l+1}} \left( w^{(l)}_{ji} \right)^2 \end{align}

   the first term in the definition of j(w,b) is an average sum-of-squares
   error term. the second term is a id173 term (also called a
   weight decay term) that tends to decrease the magnitude of the weights,
   and helps prevent overfitting.

   (note: usually weight decay is not applied to the bias terms b^{(l)}_i,
   as reflected in our definition for j(w, b). applying weight decay to
   the bias units usually makes only a small difference to the final
   network, however. if you   ve taken cs229 (machine learning) at stanford
   or watched the course   s videos on youtube, you may also recognize this
   weight decay as essentially a variant of the bayesian id173
   method you saw there, where we placed a gaussian prior on the
   parameters and did map (instead of maximum likelihood) estimation.)

   the weight decay parameter \lambda controls the relative importance of
   the two terms. note also the slightly overloaded notation: j(w,b;x,y)
   is the squared error cost with respect to a single example; j(w,b) is
   the overall cost function, which includes the weight decay term.

   this cost function above is often used both for classification and for
   regression problems. for classification, we let y = 0 or 1 represent
   the two class labels (recall that the sigmoid activation function
   outputs values in [0,1]; if we were using a tanh activation function,
   we would instead use -1 and +1 to denote the labels). for regression
   problems, we first scale our outputs to ensure that they lie in the
   [0,1] range (or if we were using a tanh activation function, then the
   [-1,1] range).

   our goal is to minimize j(w,b) as a function of w and b. to train our
   neural network, we will initialize each parameter w^{(l)}_{ij} and each
   b^{(l)}_i to a small random value near zero (say according to a
   {normal}(0,\epsilon^2) distribution for some small \epsilon, say 0.01),
   and then apply an optimization algorithm such as batch gradient
   descent. since j(w, b) is a non-convex function, id119 is
   susceptible to local optima; however, in practice id119
   usually works fairly well. finally, note that it is important to
   initialize the parameters randomly, rather than to all 0   s. if all the
   parameters start off at identical values, then all the hidden layer
   units will end up learning the same function of the input (more
   formally, w^{(1)}_{ij} will be the same for all values of i, so that
   a^{(2)}_1 = a^{(2)}_2 = a^{(2)}_3 = \ldots for any input x). the random
   initialization serves the purpose of symmetry breaking.

   one iteration of id119 updates the parameters w,b as
   follows:
   \begin{align} w_{ij}^{(l)} &= w_{ij}^{(l)} - \alpha
   \frac{\partial}{\partial w_{ij}^{(l)}} j(w,b) \\ b_{i}^{(l)} &=
   b_{i}^{(l)} - \alpha \frac{\partial}{\partial b_{i}^{(l)}} j(w,b)
   \end{align}

   where \alpha is the learning rate. the key step is computing the
   partial derivatives above. we will now describe the id26
   algorithm, which gives an efficient way to compute these partial
   derivatives.

   we will first describe how id26 can be used to compute
   \textstyle \frac{\partial}{\partial w_{ij}^{(l)}} j(w,b; x, y) and
   \textstyle \frac{\partial}{\partial b_{i}^{(l)}} j(w,b; x, y), the
   partial derivatives of the cost function j(w,b;x,y) defined with
   respect to a single example (x,y). once we can compute these, we see
   that the derivative of the overall cost function j(w,b) can be computed
   as:
   \begin{align} \frac{\partial}{\partial w_{ij}^{(l)}} j(w,b) &= \left[
   \frac{1}{m} \sum_{i=1}^m \frac{\partial}{\partial w_{ij}^{(l)}} j(w,b;
   x^{(i)}, y^{(i)}) \right] + \lambda w_{ij}^{(l)} \\
   \frac{\partial}{\partial b_{i}^{(l)}} j(w,b) &= \frac{1}{m}\sum_{i=1}^m
   \frac{\partial}{\partial b_{i}^{(l)}} j(w,b; x^{(i)}, y^{(i)})
   \end{align}

   the two lines above differ slightly because weight decay is applied to
   w but not b.

   the intuition behind the id26 algorithm is as follows. given
   a training example (x,y), we will first run a    forward pass    to compute
   all the activations throughout the network, including the output value
   of the hypothesis h_{w,b}(x). then, for each node i in layer l, we
   would like to compute an    error term    \delta^{(l)}_i that measures how
   much that node was    responsible    for any errors in our output. for an
   output node, we can directly measure the difference between the
   network   s activation and the true target value, and use that to define
   \delta^{(n_l)}_i (where layer n_l is the output layer). how about
   hidden units? for those, we will compute \delta^{(l)}_i based on a
   weighted average of the error terms of the nodes that uses a^{(l)}_i as
   an input. in detail, here is the id26 algorithm:
    1. perform a feedforward pass, computing the activations for layers
       l_2, l_3, and so on up to the output layer l_{n_l}.
    2. for each output unit i in layer n_l (the output layer), set
       \begin{align} \delta^{(n_l)}_i = \frac{\partial}{\partial
       z^{(n_l)}_i} \;\; \frac{1}{2} \left\|y - h_{w,b}(x)\right\|^2 = -
       (y_i - a^{(n_l)}_i) \cdot f'(z^{(n_l)}_i) \end{align}
    3. for l = n_l-1, n_l-2, n_l-3, \ldots, 2
           for each node i in layer l, set
                \delta^{(l)}_i = \left( \sum_{j=1}^{s_{l+1}} w^{(l)}_{ji}
       \delta^{(l+1)}_j \right) f'(z^{(l)}_i)
    4. compute the desired partial derivatives, which are given as:

   \begin{align} \frac{\partial}{\partial w_{ij}^{(l)}} j(w,b; x, y) &=
   a^{(l)}_j \delta_i^{(l+1)} \\ \frac{\partial}{\partial b_{i}^{(l)}}
   j(w,b; x, y) &= \delta_i^{(l+1)}. \end{align}

   finally, we can also re-write the algorithm using matrix-vectorial
   notation. we will use    \textstyle \bullet    to denote the element-wise
   product operator (denoted .* in matlab or octave, and also called the
   hadamard product), so that if \textstyle a = b \bullet c, then
   \textstyle a_i = b_ic_i. similar to how we extended the definition of
   \textstyle f(\cdot) to apply element-wise to vectors, we also do the
   same for \textstyle f'(\cdot) (so that \textstyle f'([z_1, z_2, z_3]) =
   [f'(z_1), f'(z_2), f'(z_3)]).

   the algorithm can then be written:
    1. perform a feedforward pass, computing the activations for layers
       \textstyle l_2, \textstyle l_3, up to the output layer \textstyle
       l_{n_l}, using the equations defining the forward propagation steps
    2. for the output layer (layer \textstyle n_l), set
       \begin{align} \delta^{(n_l)} = - (y - a^{(n_l)}) \bullet
       f'(z^{(n_l)}) \end{align}
    3. for \textstyle l = n_l-1, n_l-2, n_l-3, \ldots, 2, set
       \begin{align} \delta^{(l)} = \left((w^{(l)})^t
       \delta^{(l+1)}\right) \bullet f'(z^{(l)}) \end{align}
    4. compute the desired partial derivatives:

   \begin{align} \nabla_{w^{(l)}} j(w,b;x,y) &= \delta^{(l+1)}
   (a^{(l)})^t, \\ \nabla_{b^{(l)}} j(w,b;x,y) &= \delta^{(l+1)}.
   \end{align}

   implementation note: in steps 2 and 3 above, we need to compute
   \textstyle f'(z^{(l)}_i) for each value of \textstyle i. assuming
   \textstyle f(z) is the sigmoid activation function, we would already
   have \textstyle a^{(l)}_i stored away from the forward pass through the
   network. thus, using the expression that we worked out earlier for
   \textstyle f'(z), we can compute this as \textstyle f'(z^{(l)}_i) =
   a^{(l)}_i (1- a^{(l)}_i).

   finally, we are ready to describe the full id119 algorithm.
   in the pseudo-code below, \textstyle \delta w^{(l)} is a matrix (of the
   same dimension as \textstyle w^{(l)}), and \textstyle \delta b^{(l)} is
   a vector (of the same dimension as \textstyle b^{(l)}). note that in
   this notation,    \textstyle \delta w^{(l)}    is a matrix, and in
   particular it isn   t    \textstyle \delta times \textstyle w^{(l)}.    we
   implement one iteration of batch id119 as follows:
    1. set \textstyle \delta w^{(l)} := 0, \textstyle \delta b^{(l)} := 0
       (matrix/vector of zeros) for all \textstyle l.
    2. for \textstyle i = 1 to \textstyle m,
         1. use id26 to compute \textstyle \nabla_{w^{(l)}}
            j(w,b;x,y) and \textstyle \nabla_{b^{(l)}} j(w,b;x,y).
         2. set \textstyle \delta w^{(l)} := \delta w^{(l)} +
            \nabla_{w^{(l)}} j(w,b;x,y).
         3. set \textstyle \delta b^{(l)} := \delta b^{(l)} +
            \nabla_{b^{(l)}} j(w,b;x,y).
    3. update the parameters:

   \begin{align} w^{(l)} &= w^{(l)} - \alpha \left[ \left(\frac{1}{m}
   \delta w^{(l)} \right) + \lambda w^{(l)}\right] \\ b^{(l)} &= b^{(l)} -
   \alpha \left[\frac{1}{m} \delta b^{(l)}\right] \end{align}

   to train our neural network, we can now repeatedly take steps of
   id119 to reduce our cost function \textstyle j(w,b).

references

   1. http://ufldl.stanford.edu/tutorial/
