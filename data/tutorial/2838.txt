   #[1]index [2]search [3]stacked denoising autoencoders (sda)
   [4]convolutional neural networks (lenet)

navigation

     * [5]index
     * [6]next |
     * [7]previous |
     * [8]deeplearning 0.1 documentation   

[9]table of contents

     * [10]denoising autoencoders (da)
          + [11]autoencoders
          + [12]denoising autoencoders
          + [13]putting it all together
          + [14]running the code

previous topic

   [15]convolutional neural networks (lenet)

next topic

   [16]stacked denoising autoencoders (sda)

this page

     * [17]show source

quick search

   ____________________
   go

denoising autoencoders (da)[18]  

   note

   this section assumes the reader has already read through
   [19]classifying mnist digits using id28 and
   [20]multilayer id88. additionally it uses the following theano
   functions and concepts: [21]t.tanh, [22]shared variables, [23]basic
   arithmetic ops, [24]t.grad, [25]random numbers, [26]floatx. if you
   intend to run the code on gpu also read [27]gpu.

   note

   the code for this section is available for download [28]here.

   the denoising autoencoder (da) is an extension of a classical
   autoencoder and it was introduced as a building block for deep networks
   in [29][vincent08]. we will start the tutorial with a short discussion
   on [30]autoencoders.

autoencoders[31]  

   see section 4.6 of [32][bengio09] for an overview of auto-encoders. an
   autoencoder takes an input \mathbf{x} \in [0,1]^d and first maps it
   (with an encoder) to a hidden representation \mathbf{y} \in [0,1]^{d'}
   through a deterministic mapping, e.g.:

   \mathbf{y} = s(\mathbf{w}\mathbf{x} + \mathbf{b})

   where s is a non-linearity such as the sigmoid. the latent
   representation \mathbf{y} , or code is then mapped back (with a
   decoder) into a reconstruction \mathbf{z} of the same shape as
   \mathbf{x} . the mapping happens through a similar transformation,
   e.g.:

   \mathbf{z} = s(\mathbf{w'}\mathbf{y} + \mathbf{b'})

   (here, the prime symbol does not indicate matrix transposition.)
   \mathbf{z} should be seen as a prediction of \mathbf{x} , given the
   code \mathbf{y} . optionally, the weight matrix \mathbf{w'} of the
   reverse mapping may be constrained to be the transpose of the forward
   mapping: \mathbf{w'} = \mathbf{w}^t . this is referred to as tied
   weights. the parameters of this model (namely \mathbf{w} , \mathbf{b} ,
   \mathbf{b'} and, if one doesn   t use tied weights, also \mathbf{w'} )
   are optimized such that the average reconstruction error is minimized.

   the reconstruction error can be measured in many ways, depending on the
   appropriate distributional assumptions on the input given the code. the
   traditional squared error l(\mathbf{x} \mathbf{z}) = || \mathbf{x} -
   \mathbf{z} ||^2 , can be used. if the input is interpreted as either
   bit vectors or vectors of bit probabilities, cross-id178 of the
   reconstruction can be used:

   l_{h} (\mathbf{x}, \mathbf{z}) = - \sum^d_{k=1}[\mathbf{x}_k \log
   \mathbf{z}_k + (1 - \mathbf{x}_k)\log(1 - \mathbf{z}_k)]

   the hope is that the code \mathbf{y} is a distributed representation
   that captures the coordinates along the main factors of variation in
   the data. this is similar to the way the projection on principal
   components would capture the main factors of variation in the data.
   indeed, if there is one linear hidden layer (the code) and the mean
   squared error criterion is used to train the network, then the k hidden
   units learn to project the input in the span of the first k principal
   components of the data. if the hidden layer is non-linear, the
   auto-encoder behaves differently from pca, with the ability to capture
   multi-modal aspects of the input distribution. the departure from pca
   becomes even more important when we consider stacking multiple encoders
   (and their corresponding decoders) when building a deep auto-encoder
   [33][hinton06].

   because \mathbf{y} is viewed as a lossy compression of \mathbf{x} , it
   cannot be a good (small-loss) compression for all \mathbf{x} .
   optimization makes it a good compression for training examples, and
   hopefully for other inputs as well, but not for arbitrary inputs. that
   is the sense in which an auto-encoder generalizes: it gives low
   reconstruction error on test examples from the same distribution as the
   training examples, but generally high reconstruction error on samples
   randomly chosen from the input space.

   we want to implement an auto-encoder using theano, in the form of a
   class, that could be afterwards used in constructing a stacked
   autoencoder. the first step is to create shared variables for the
   parameters of the autoencoder \mathbf{w} , \mathbf{b} and \mathbf{b'} .
   (since we are using tied weights in this tutorial, \mathbf{w}^t will be
   used for \mathbf{w'} ):
    def __init__(
        self,
        numpy_rng,
        theano_rng=none,
        input=none,
        n_visible=784,
        n_hidden=500,
        w=none,
        bhid=none,
        bvis=none
    ):
        """
        initialize the da class by specifying the number of visible units (the
        dimension d of the input ), the number of hidden units ( the dimension
        d' of the latent or hidden space ) and the corruption level. the
        constructor also receives symbolic variables for the input, weights and
        bias. such a symbolic variables are useful when, for example the input
        is the result of some computations, or when weights are shared between
        the da and an mlp layer. when dealing with sdas this always happens,
        the da on layer 2 gets as input the output of the da on layer 1,
        and the weights of the da are used in the second stage of training
        to construct an mlp.

        :type numpy_rng: numpy.random.randomstate
        :param numpy_rng: number random generator used to generate weights

        :type theano_rng: theano.tensor.shared_randomstreams.randomstreams
        :param theano_rng: theano random generator; if none is given one is
                     generated based on a seed drawn from `rng`

        :type input: theano.tensor.tensortype
        :param input: a symbolic description of the input or none for
                      standalone da

        :type n_visible: int
        :param n_visible: number of visible units

        :type n_hidden: int
        :param n_hidden:  number of hidden units

        :type w: theano.tensor.tensortype
        :param w: theano variable pointing to a set of weights that should be
                  shared belong the da and another architecture; if da should
                  be standalone set this to none

        :type bhid: theano.tensor.tensortype
        :param bhid: theano variable pointing to a set of biases values (for
                     hidden units) that should be shared belong da and another
                     architecture; if da should be standalone set this to none

        :type bvis: theano.tensor.tensortype
        :param bvis: theano variable pointing to a set of biases values (for
                     visible units) that should be shared belong da and another
                     architecture; if da should be standalone set this to none


        """
        self.n_visible = n_visible
        self.n_hidden = n_hidden

        # create a theano random generator that gives symbolic random values
        if not theano_rng:
            theano_rng = randomstreams(numpy_rng.randint(2 ** 30))

        # note : w' was written as `w_prime` and b' as `b_prime`
        if not w:
            # w is initialized with `initial_w` which is uniformely sampled
            # from -4*sqrt(6./(n_visible+n_hidden)) and
            # 4*sqrt(6./(n_hidden+n_visible))the output of uniform if
            # converted using asarray to dtype
            # theano.config.floatx so that the code is runable on gpu
            initial_w = numpy.asarray(
                numpy_rng.uniform(
                    low=-4 * numpy.sqrt(6. / (n_hidden + n_visible)),
                    high=4 * numpy.sqrt(6. / (n_hidden + n_visible)),
                    size=(n_visible, n_hidden)
                ),
                dtype=theano.config.floatx
            )
            w = theano.shared(value=initial_w, name='w', borrow=true)

        if not bvis:
            bvis = theano.shared(
                value=numpy.zeros(
                    n_visible,
                    dtype=theano.config.floatx
                ),
                borrow=true
            )

        if not bhid:
            bhid = theano.shared(
                value=numpy.zeros(
                    n_hidden,
                    dtype=theano.config.floatx
                ),
                name='b',
                borrow=true
            )

        self.w = w
        # b corresponds to the bias of the hidden
        self.b = bhid
        # b_prime corresponds to the bias of the visible
        self.b_prime = bvis
        # tied weights, therefore w_prime is w transpose
        self.w_prime = self.w.t
        self.theano_rng = theano_rng
        # if no input is given, generate a variable representing the input
        if input is none:
            # we use a matrix because we expect a minibatch of several
            # examples, each example being a row
            self.x = t.dmatrix(name='input')
        else:
            self.x = input

        self.params = [self.w, self.b, self.b_prime]

   note that we pass the symbolic input to the autoencoder as a parameter.
   this is so that we can concatenate layers of autoencoders to form a
   deep network: the symbolic output (the \mathbf{y} above) of layer k
   will be the symbolic input of layer k+1 .

   now we can express the computation of the latent representation and of
   the reconstructed signal:
    def get_hidden_values(self, input):
        """ computes the values of the hidden layer """
        return t.nnet.sigmoid(t.dot(input, self.w) + self.b)

    def get_reconstructed_input(self, hidden):
        """computes the reconstructed input given the values of the
        hidden layer

        """
        return t.nnet.sigmoid(t.dot(hidden, self.w_prime) + self.b_prime)

   and using these functions we can compute the cost and the updates of
   one stochastic id119 step:
    def get_cost_updates(self, corruption_level, learning_rate):
        """ this function computes the cost and the updates for one trainng
        step of the da """

        tilde_x = self.get_corrupted_input(self.x, corruption_level)
        y = self.get_hidden_values(tilde_x)
        z = self.get_reconstructed_input(y)
        # note : we sum over the size of a datapoint; if we are using
        #        minibatches, l will be a vector, with one entry per
        #        example in minibatch
        l = - t.sum(self.x * t.log(z) + (1 - self.x) * t.log(1 - z), axis=1)
        # note : l is now a vector, where each element is the
        #        cross-id178 cost of the reconstruction of the
        #        corresponding example of the minibatch. we need to
        #        compute the average of all these to get the cost of
        #        the minibatch
        cost = t.mean(l)

        # compute the gradients of the cost of the `da` with respect
        # to its parameters
        gparams = t.grad(cost, self.params)
        # generate the list of updates
        updates = [
            (param, param - learning_rate * gparam)
            for param, gparam in zip(self.params, gparams)
        ]

        return (cost, updates)

   we can now define a function that applied iteratively will update the
   parameters w, b and b_prime such that the reconstruction cost is
   approximately minimized.
    da = da(
        numpy_rng=rng,
        theano_rng=theano_rng,
        input=x,
        n_visible=28 * 28,
        n_hidden=500
    )

    cost, updates = da.get_cost_updates(
        corruption_level=0.,
        learning_rate=learning_rate
    )

    train_da = theano.function(
        [index],
        cost,
        updates=updates,
        givens={
            x: train_set_x[index * batch_size: (index + 1) * batch_size]
        }
    )

    start_time = timeit.default_timer()

    ############
    # training #
    ############

    # go through training epochs
    for epoch in range(training_epochs):
        # go through trainng set
        c = []
        for batch_index in range(n_train_batches):
            c.append(train_da(batch_index))

        print('training epoch %d, cost ' % epoch, numpy.mean(c, dtype='float64')
)

    end_time = timeit.default_timer()

    training_time = (end_time - start_time)

    print(('the no corruption code for file ' +
           os.path.split(__file__)[1] +
           ' ran for %.2fm' % ((training_time) / 60.)), file=sys.stderr)
    image = image.fromarray(
        tile_raster_images(x=da.w.get_value(borrow=true).t,
                           img_shape=(28, 28), tile_shape=(10, 10),
                           tile_spacing=(1, 1)))
    image.save('filters_corruption_0.png')

    # start-snippet-3
    #####################################
    # building the model corruption 30% #
    #####################################

    rng = numpy.random.randomstate(123)
    theano_rng = randomstreams(rng.randint(2 ** 30))

    da = da(
        numpy_rng=rng,
        theano_rng=theano_rng,
        input=x,
        n_visible=28 * 28,
        n_hidden=500
    )

    cost, updates = da.get_cost_updates(
        corruption_level=0.3,
        learning_rate=learning_rate
    )

    train_da = theano.function(
        [index],
        cost,
        updates=updates,
        givens={
            x: train_set_x[index * batch_size: (index + 1) * batch_size]
        }
    )

    start_time = timeit.default_timer()

    ############
    # training #
    ############

    # go through training epochs
    for epoch in range(training_epochs):
        # go through trainng set
        c = []
        for batch_index in range(n_train_batches):
            c.append(train_da(batch_index))

        print('training epoch %d, cost ' % epoch, numpy.mean(c, dtype='float64')
)

    end_time = timeit.default_timer()

    training_time = (end_time - start_time)

    print(('the 30% corruption code for file ' +
           os.path.split(__file__)[1] +
           ' ran for %.2fm' % (training_time / 60.)), file=sys.stderr)
    # end-snippet-3

    # start-snippet-4
    image = image.fromarray(tile_raster_images(
        x=da.w.get_value(borrow=true).t,
        img_shape=(28, 28), tile_shape=(10, 10),
        tile_spacing=(1, 1)))
    image.save('filters_corruption_30.png')
    # end-snippet-4

    os.chdir('../')


if __name__ == '__main__':
    test_da()

   if there is no constraint besides minimizing the reconstruction error,
   one might expect an auto-encoder with n inputs and an encoding of
   dimension n (or greater) to learn the identity function, merely mapping
   an input to its copy. such an autoencoder would not differentiate test
   examples (from the training distribution) from other input
   configurations.

   surprisingly, experiments reported in [34][bengio07] suggest that, in
   practice, when trained with stochastic id119, non-linear
   auto-encoders with more hidden units than inputs (called overcomplete)
   yield useful representations. (here,    useful    means that a network
   taking the encoding as input has low classification error.)

   a simple explanation is that stochastic id119 with early
   stopping is similar to an l2 id173 of the parameters. to
   achieve perfect reconstruction of continuous inputs, a one-hidden layer
   auto-encoder with non-linear hidden units (exactly like in the above
   code) needs very small weights in the first (encoding) layer, to bring
   the non-linearity of the hidden units into their linear regime, and
   very large weights in the second (decoding) layer. with binary inputs,
   very large weights are also needed to completely minimize the
   reconstruction error. since the implicit or explicit id173
   makes it difficult to reach large-weight solutions, the optimization
   algorithm finds encodings which only work well for examples similar to
   those in the training set, which is what we want. it means that the
   representation is exploiting statistical regularities present in the
   training set, rather than merely learning to replicate the input.

   there are other ways by which an auto-encoder with more hidden units
   than inputs could be prevented from learning the identity function,
   capturing something useful about the input in its hidden
   representation. one is the addition of sparsity (forcing many of the
   hidden units to be zero or near-zero). sparsity has been exploited very
   successfully by many [35][ranzato07] [36][lee08]. another is to add
   randomness in the transformation from input to reconstruction. this
   technique is used in restricted id82s (discussed later in
   [37]restricted id82s (rbm)), as well as in denoising
   auto-encoders, discussed below.

denoising autoencoders[38]  

   the idea behind denoising autoencoders is simple. in order to force the
   hidden layer to discover more robust features and prevent it from
   simply learning the identity, we train the autoencoder to reconstruct
   the input from a corrupted version of it.

   the denoising auto-encoder is a stochastic version of the auto-encoder.
   intuitively, a denoising auto-encoder does two things: try to encode
   the input (preserve the information about the input), and try to undo
   the effect of a corruption process stochastically applied to the input
   of the auto-encoder. the latter can only be done by capturing the
   statistical dependencies between the inputs. the denoising auto-encoder
   can be understood from different perspectives (the manifold learning
   perspective, stochastic operator perspective, bottom-up     information
   theoretic perspective, top-down     generative model perspective), all of
   which are explained in [39][vincent08]. see also section 7.2 of
   [40][bengio09] for an overview of auto-encoders.

   in [41][vincent08], the stochastic corruption process randomly sets
   some of the inputs (as many as half of them) to zero. hence the
   denoising auto-encoder is trying to predict the corrupted (i.e.
   missing) values from the uncorrupted (i.e., non-missing) values, for
   randomly selected subsets of missing patterns. note how being able to
   predict any subset of variables from the rest is a sufficient condition
   for completely capturing the joint distribution between a set of
   variables (this is how id150 works).

   to convert the autoencoder class into a denoising autoencoder class,
   all we need to do is to add a stochastic corruption step operating on
   the input. the input can be corrupted in many ways, but in this
   tutorial we will stick to the original corruption mechanism of randomly
   masking entries of the input by making them zero. the code below does
   just that:
    def get_corrupted_input(self, input, corruption_level):
        """this function keeps ``1-corruption_level`` entries of the inputs the
        same and zero-out randomly selected subset of size ``corruption_level``
        note : first argument of theano.rng.binomial is the shape(size) of
               random numbers that it should produce
               second argument is the number of trials
               third argument is the id203 of success of any trial

                this will produce an array of 0s and 1s where 1 has a
                id203 of 1 - ``corruption_level`` and 0 with
                ``corruption_level``

                the binomial function return int64 data type by
                default.  int64 multiplicated by the input
                type(floatx) always return float64.  to keep all data
                in floatx when floatx is float32, we set the dtype of
                the binomial to floatx. as in our case the value of
                the binomial is always 0 or 1, this don't change the
                result. this is needed to allow the gpu to work
                correctly as it only support float32 for now.

        """
        return self.theano_rng.binomial(size=input.shape, n=1,
                                        p=1 - corruption_level,
                                        dtype=theano.config.floatx) * input

   in the stacked autoencoder class ([42]stacked autoencoders) the weights
   of the da class have to be shared with those of a corresponding sigmoid
   layer. for this reason, the constructor of the da also gets theano
   variables pointing to the shared parameters. if those parameters are
   left to none, new ones will be constructed.

   the final denoising autoencoder class becomes:
class da(object):
    """denoising auto-encoder class (da)

    a denoising autoencoders tries to reconstruct the input from a corrupted
    version of it by projecting it first in a latent space and reprojecting
    it afterwards back in the input space. please refer to vincent et al.,2008
    for more details. if x is the input then equation (1) computes a partially
    destroyed version of x by means of a stochastic mapping q_d. equation (2)
    computes the projection of the input into the latent space. equation (3)
    computes the reconstruction of the input, while equation (4) computes the
    reconstruction error.

    .. math::

        \tilde{x} ~ q_d(\tilde{x}|x)                                     (1)

        y = s(w \tilde{x} + b)                                           (2)

        x = s(w' y  + b')                                                (3)

        l(x,z) = -sum_{k=1}^d [x_k \log z_k + (1-x_k) \log( 1-z_k)]      (4)

    """

    def __init__(
        self,
        numpy_rng,
        theano_rng=none,
        input=none,
        n_visible=784,
        n_hidden=500,
        w=none,
        bhid=none,
        bvis=none
    ):
        """
        initialize the da class by specifying the number of visible units (the
        dimension d of the input ), the number of hidden units ( the dimension
        d' of the latent or hidden space ) and the corruption level. the
        constructor also receives symbolic variables for the input, weights and
        bias. such a symbolic variables are useful when, for example the input
        is the result of some computations, or when weights are shared between
        the da and an mlp layer. when dealing with sdas this always happens,
        the da on layer 2 gets as input the output of the da on layer 1,
        and the weights of the da are used in the second stage of training
        to construct an mlp.

        :type numpy_rng: numpy.random.randomstate
        :param numpy_rng: number random generator used to generate weights

        :type theano_rng: theano.tensor.shared_randomstreams.randomstreams
        :param theano_rng: theano random generator; if none is given one is
                     generated based on a seed drawn from `rng`

        :type input: theano.tensor.tensortype
        :param input: a symbolic description of the input or none for
                      standalone da

        :type n_visible: int
        :param n_visible: number of visible units

        :type n_hidden: int
        :param n_hidden:  number of hidden units

        :type w: theano.tensor.tensortype
        :param w: theano variable pointing to a set of weights that should be
                  shared belong the da and another architecture; if da should
                  be standalone set this to none

        :type bhid: theano.tensor.tensortype
        :param bhid: theano variable pointing to a set of biases values (for
                     hidden units) that should be shared belong da and another
                     architecture; if da should be standalone set this to none

        :type bvis: theano.tensor.tensortype
        :param bvis: theano variable pointing to a set of biases values (for
                     visible units) that should be shared belong da and another
                     architecture; if da should be standalone set this to none


        """
        self.n_visible = n_visible
        self.n_hidden = n_hidden

        # create a theano random generator that gives symbolic random values
        if not theano_rng:
            theano_rng = randomstreams(numpy_rng.randint(2 ** 30))

        # note : w' was written as `w_prime` and b' as `b_prime`
        if not w:
            # w is initialized with `initial_w` which is uniformely sampled
            # from -4*sqrt(6./(n_visible+n_hidden)) and
            # 4*sqrt(6./(n_hidden+n_visible))the output of uniform if
            # converted using asarray to dtype
            # theano.config.floatx so that the code is runable on gpu
            initial_w = numpy.asarray(
                numpy_rng.uniform(
                    low=-4 * numpy.sqrt(6. / (n_hidden + n_visible)),
                    high=4 * numpy.sqrt(6. / (n_hidden + n_visible)),
                    size=(n_visible, n_hidden)
                ),
                dtype=theano.config.floatx
            )
            w = theano.shared(value=initial_w, name='w', borrow=true)

        if not bvis:
            bvis = theano.shared(
                value=numpy.zeros(
                    n_visible,
                    dtype=theano.config.floatx
                ),
                borrow=true
            )

        if not bhid:
            bhid = theano.shared(
                value=numpy.zeros(
                    n_hidden,
                    dtype=theano.config.floatx
                ),
                name='b',
                borrow=true
            )

        self.w = w
        # b corresponds to the bias of the hidden
        self.b = bhid
        # b_prime corresponds to the bias of the visible
        self.b_prime = bvis
        # tied weights, therefore w_prime is w transpose
        self.w_prime = self.w.t
        self.theano_rng = theano_rng
        # if no input is given, generate a variable representing the input
        if input is none:
            # we use a matrix because we expect a minibatch of several
            # examples, each example being a row
            self.x = t.dmatrix(name='input')
        else:
            self.x = input

        self.params = [self.w, self.b, self.b_prime]

    def get_corrupted_input(self, input, corruption_level):
        """this function keeps ``1-corruption_level`` entries of the inputs the
        same and zero-out randomly selected subset of size ``corruption_level``
        note : first argument of theano.rng.binomial is the shape(size) of
               random numbers that it should produce
               second argument is the number of trials
               third argument is the id203 of success of any trial

                this will produce an array of 0s and 1s where 1 has a
                id203 of 1 - ``corruption_level`` and 0 with
                ``corruption_level``

                the binomial function return int64 data type by
                default.  int64 multiplicated by the input
                type(floatx) always return float64.  to keep all data
                in floatx when floatx is float32, we set the dtype of
                the binomial to floatx. as in our case the value of
                the binomial is always 0 or 1, this don't change the
                result. this is needed to allow the gpu to work
                correctly as it only support float32 for now.

        """
        return self.theano_rng.binomial(size=input.shape, n=1,
                                        p=1 - corruption_level,
                                        dtype=theano.config.floatx) * input

    def get_hidden_values(self, input):
        """ computes the values of the hidden layer """
        return t.nnet.sigmoid(t.dot(input, self.w) + self.b)

    def get_reconstructed_input(self, hidden):
        """computes the reconstructed input given the values of the
        hidden layer

        """
        return t.nnet.sigmoid(t.dot(hidden, self.w_prime) + self.b_prime)

    def get_cost_updates(self, corruption_level, learning_rate):
        """ this function computes the cost and the updates for one trainng
        step of the da """

        tilde_x = self.get_corrupted_input(self.x, corruption_level)
        y = self.get_hidden_values(tilde_x)
        z = self.get_reconstructed_input(y)
        # note : we sum over the size of a datapoint; if we are using
        #        minibatches, l will be a vector, with one entry per
        #        example in minibatch
        l = - t.sum(self.x * t.log(z) + (1 - self.x) * t.log(1 - z), axis=1)
        # note : l is now a vector, where each element is the
        #        cross-id178 cost of the reconstruction of the
        #        corresponding example of the minibatch. we need to
        #        compute the average of all these to get the cost of
        #        the minibatch
        cost = t.mean(l)

        # compute the gradients of the cost of the `da` with respect
        # to its parameters
        gparams = t.grad(cost, self.params)
        # generate the list of updates
        updates = [
            (param, param - learning_rate * gparam)
            for param, gparam in zip(self.params, gparams)
        ]

        return (cost, updates)

putting it all together[43]  

   it is easy now to construct an instance of our da class and train it.
    # allocate symbolic variables for the data
    index = t.lscalar()    # index to a [mini]batch
    x = t.matrix('x')  # the data is presented as rasterized images

    #####################################
    # building the model corruption 30% #
    #####################################

    rng = numpy.random.randomstate(123)
    theano_rng = randomstreams(rng.randint(2 ** 30))

    da = da(
        numpy_rng=rng,
        theano_rng=theano_rng,
        input=x,
        n_visible=28 * 28,
        n_hidden=500
    )

    cost, updates = da.get_cost_updates(
        corruption_level=0.3,
        learning_rate=learning_rate
    )

    train_da = theano.function(
        [index],
        cost,
        updates=updates,
        givens={
            x: train_set_x[index * batch_size: (index + 1) * batch_size]
        }
    )

    start_time = timeit.default_timer()

    ############
    # training #
    ############

    # go through training epochs
    for epoch in range(training_epochs):
        # go through trainng set
        c = []
        for batch_index in range(n_train_batches):
            c.append(train_da(batch_index))

        print('training epoch %d, cost ' % epoch, numpy.mean(c, dtype='float64')
)

    end_time = timeit.default_timer()

    training_time = (end_time - start_time)

    print(('the 30% corruption code for file ' +
           os.path.split(__file__)[1] +
           ' ran for %.2fm' % (training_time / 60.)), file=sys.stderr)

   in order to get a feeling of what the network learned we are going to
   plot the filters (defined by the weight matrix). bear in mind, however,
   that this does not provide the entire story, since we neglect the
   biases and plot the weights up to a multiplicative constant (weights
   are converted to values between 0 and 1).

   to plot our filters we will need the help of tile_raster_images (see
   [44]plotting samples and filters) so we urge the reader to study it.
   also using the help of the python image library, the following lines of
   code will save the filters as an image:
    image = image.fromarray(tile_raster_images(
        x=da.w.get_value(borrow=true).t,
        img_shape=(28, 28), tile_shape=(10, 10),
        tile_spacing=(1, 1)))
    image.save('filters_corruption_30.png')

running the code[45]  

   to run the code:
python da.py

   the resulted filters when we do not use any noise are:
   _images/filters_corruption_0.png

   the filters for 30 percent noise:
   _images/filters_corruption_30.png

navigation

     * [46]index
     * [47]next |
     * [48]previous |
     * [49]deeplearning 0.1 documentation   

      copyright 2008--2010, lisa lab. last updated on jun 15, 2018. created
   using [50]sphinx 1.5.

references

   1. http://deeplearning.net/tutorial/genindex.html
   2. http://deeplearning.net/tutorial/search.html
   3. http://deeplearning.net/tutorial/sda.html
   4. http://deeplearning.net/tutorial/lenet.html
   5. http://deeplearning.net/tutorial/genindex.html
   6. http://deeplearning.net/tutorial/sda.html
   7. http://deeplearning.net/tutorial/lenet.html
   8. http://deeplearning.net/tutorial/contents.html
   9. http://deeplearning.net/tutorial/contents.html
  10. http://deeplearning.net/tutorial/da.html
  11. http://deeplearning.net/tutorial/da.html#autoencoders
  12. http://deeplearning.net/tutorial/da.html#denoising-autoencoders
  13. http://deeplearning.net/tutorial/da.html#putting-it-all-together
  14. http://deeplearning.net/tutorial/da.html#running-the-code
  15. http://deeplearning.net/tutorial/lenet.html
  16. http://deeplearning.net/tutorial/sda.html
  17. http://deeplearning.net/tutorial/_sources/da.txt
  18. http://deeplearning.net/tutorial/da.html#denoising-autoencoders-da
  19. http://deeplearning.net/tutorial/logreg.html
  20. http://deeplearning.net/tutorial/mlp.html
  21. http://deeplearning.net/software/theano/tutorial/examples.html?highlight=tanh
  22. http://deeplearning.net/software/theano/tutorial/examples.html#using-shared-variables
  23. http://deeplearning.net/software/theano/tutorial/adding.html#adding-two-scalars
  24. http://deeplearning.net/software/theano/tutorial/examples.html#computing-gradients
  25. http://deeplearning.net/software/theano/tutorial/examples.html#using-random-numbers
  26. http://deeplearning.net/software/theano/library/config.html#config.floatx
  27. http://deeplearning.net/software/theano/tutorial/using_gpu.html
  28. http://deeplearning.net/tutorial/code/da.py
  29. http://deeplearning.net/tutorial/references.html#vincent08
  30. http://deeplearning.net/tutorial/da.html#autoencoders
  31. http://deeplearning.net/tutorial/da.html#autoencoders
  32. http://deeplearning.net/tutorial/references.html#bengio09
  33. http://deeplearning.net/tutorial/references.html#hinton06
  34. http://deeplearning.net/tutorial/references.html#bengio07
  35. http://deeplearning.net/tutorial/references.html#ranzato07
  36. http://deeplearning.net/tutorial/references.html#lee08
  37. http://deeplearning.net/tutorial/rbm.html#rbm
  38. http://deeplearning.net/tutorial/da.html#denoising-autoencoders
  39. http://deeplearning.net/tutorial/references.html#vincent08
  40. http://deeplearning.net/tutorial/references.html#bengio09
  41. http://deeplearning.net/tutorial/references.html#vincent08
  42. http://deeplearning.net/tutorial/sda.html#stacked-autoencoders
  43. http://deeplearning.net/tutorial/da.html#putting-it-all-together
  44. http://deeplearning.net/tutorial/utilities.html#how-to-plot
  45. http://deeplearning.net/tutorial/da.html#running-the-code
  46. http://deeplearning.net/tutorial/genindex.html
  47. http://deeplearning.net/tutorial/sda.html
  48. http://deeplearning.net/tutorial/lenet.html
  49. http://deeplearning.net/tutorial/contents.html
  50. http://sphinx-doc.org/
