   #[1]github [2]recent commits to pymc:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]67
     * [35]star [36]813
     * [37]fork [38]212

[39]pymc-devs/[40]pymc

   [41]code [42]issues 13 [43]pull requests 1 [44]projects 0 [45]wiki
   [46]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [47]sign up
   pymc: bayesian stochastic modelling in python (deprecated: for pymc3:
   [48]https://github.com/pymc-devs/pymc3)
   [49]http://pymc-devs.github.com/pymc/
     * [50]2,726 commits
     * [51]10 branches
     * [52]15 releases
     * [53]fetching contributors
     * [54]afl-3.0

    1. [55]fortran 75.9%
    2. [56]python 16.2%
    3. [57]tex 7.2%
    4. [58]c 0.5%
    5. [59]shell 0.1%
    6. [60]ruby 0.1%

   (button) fortran python tex c shell ruby
   branch: master (button) new pull request
   [61]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/p
   [62]download zip

downloading...

   want to be notified of new releases in pymc-devs/pymc?
   [63]sign in [64]sign up

launching github desktop...

   if nothing happens, [65]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [66]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [67]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [68]download the github extension for visual studio
   and try again.

   (button) go back
   [69]@fonnesbeck
   [70]fonnesbeck [71]merge pull request [72]#193 [73]from
   pymc-devs/fix_py37 (button)    
await is a keyword in python 3.7. rename to await_lock.

   latest commit [74]c6e5302 feb 22, 2019
   [75]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [76]blas/blas
   [77]cephes
   [78]conda
   [79]devtools/build-vm/linux
   [80]docs [81]more version increments jan 15, 2018
   [82]lapack/double
   [83]pymc [84]await is a keyword in python 3.7. rename to await_lock.
   feb 22, 2019
   [85].gitignore
   [86].travis.yml
   [87]credits.rst
   [88]developers.txt [89]updated the install file with more recent
   version numbers. changed th    jan 6, 2010
   [90]license
   [91]manifest.in
   [92]readme.rst
   [93]builddocs [94]removed jss build steps from builddocs feb 11, 2012
   [95]builddpkg [96]ran code_maintenance may 6, 2009
   [97]buildosx
   [98]code_maintenance.py
   [99]epydoc.conf [100]changed :math:'blabla' to :math: (valid rest) in
   distributions.py. mi    apr 29, 2008
   [101]pymc-requirements
   [102]setup.py
   [103]setupegg.py
   [104]stdeb_all.id18

readme.rst

introduction

   version: 2.3.7
   authors: chris fonnesbeck
   anand patil
   david huard
   john salvatier
   web site: [105]https://github.com/pymc-devs/pymc
   documentation: [106]http://bit.ly/pymc_docs
   copyright: this document has been placed in the public domain.
   license: pymc is released under the academic free license.
   [107]https://secure.travis-ci.org/pymc-devs/pymc.png
   [108]http://img.shields.io/pypi/v/pymc.svg?style=flat
   [109]http://img.shields.io/badge/license-afl-blue.svg?style=flat

   note: the current version pymc (version 3) has been moved to its own
   repository called [110]pymc3. unless you have a good reason for using
   this package, we recommend all new users adopt pymc3.

purpose

   pymc is a python module that implements bayesian statistical models and
   fitting algorithms, including id115. its flexibility
   and extensibility make it applicable to a large suite of problems.
   along with core sampling functionality, pymc includes methods for
   summarizing output, plotting, goodness-of-fit and convergence
   diagnostics.

features

   pymc provides functionalities to make bayesian analysis as painless as
   possible. here is a short list of some of its features:
     * fits bayesian statistical models with id115 and
       other algorithms.
     * includes a large suite of well-documented statistical
       distributions.
     * uses numpy for numerics wherever possible.
     * includes a module for modeling gaussian processes.
     * sampling loops can be paused and tuned manually, or saved and
       restarted later.
     * creates summaries including tables and plots.
     * traces can be saved to the disk as plain text, python pickles,
       sqlite or mysql database, or hdf5 archives.
     * several convergence diagnostics are available.
     * extensible: easily incorporates custom step methods and unusual
       id203 distributions.
     * mcmc loops can be embedded in larger programs, and results can be
       analyzed with the full power of python.

what's new in version 2

   this second version of pymc benefits from a major rewrite effort.
   substantial improvements in code extensibility, user interface as well
   as in raw performance have been achieved. most notably, the pymc 2
   series provides:
     * new flexible object model and syntax (not backward-compatible).
     * reduced redundant computations: only relevant log-id203 terms
       are computed, and these are cached.
     * optimized id203 distributions.
     * new adaptive blocked metropolis step method.
     * much more!

usage

   first, define your model in a file, say mymodel.py (with comments, of
   course!):
# import relevant modules
import pymc
import numpy as np

# some data
n = 5 * np.ones(4, dtype=int)
x = np.array([-.86, -.3, -.05, .73])

# priors on unknown parameters
alpha = pymc.normal('alpha', mu=0, tau=.01)
beta = pymc.normal('beta', mu=0, tau=.01)

# arbitrary deterministic function of parameters
@pymc.deterministic
def theta(a=alpha, b=beta):
    """theta = logit^{-1}(a+b)"""
    return pymc.invlogit(a + b * x)

# binomial likelihood for data
d = pymc.binomial('d', n=n, p=theta, value=np.array([0., 1., 3., 5.]),
                  observed=true)

   save this file, then from a python shell (or another file in the same
   directory), call:
import pymc
import mymodel

s = pymc.mcmc(mymodel, db='pickle')
s.sample(iter=10000, burn=5000, thin=2)
pymc.matplot.plot(s)

   this example will generate 10000 posterior samples, thinned by a factor
   of 2, with the first half discarded as burn-in. the sample is stored in
   a python serialization (pickle) database.

history

   pymc began development in 2003, as an effort to generalize the process
   of building metropolis-hastings samplers, with an aim to making markov
   chain monte carlo (mcmc) more accessible to non-statisticians
   (particularly ecologists). the choice to develop pymc as a python
   module, rather than a standalone application, allowed the use mcmc
   methods in a larger modeling framework. by 2005, pymc was reliable
   enough for version 1.0 to be released to the public. a small group of
   regular users, most associated with the university of georgia, provided
   much of the feedback necessary for the refinement of pymc to a usable
   state.

   in 2006, david huard and anand patil joined chris fonnesbeck on the
   development team for pymc 2.0. this iteration of the software strives
   for more flexibility, better performance and a better end-user
   experience than any previous version of pymc.

   pymc 2.1 was released in early 2010. it contains numerous bugfixes and
   optimizations, as well as a few new features. this user guide is
   written for version 2.1.

relationship to other packages

   pymc in one of many general-purpose mcmc packages. the most prominent
   among them is [111]winbugs, which has made mcmc and with it bayesian
   statistics accessible to a huge user community. unlike pymc, winbugs is
   a stand-alone, self-contained application. this can be an attractive
   feature for users without much programming experience, but others may
   find it constraining. a related package is [112]jags, which provides a
   more unix-like implementation of the bugs language. other packages
   include [113]hierarchical bayes compiler and a number of [114]r
   packages of varying scope.

   it would be difficult to meaningfully benchmark pymc against these
   other packages because of the unlimited variety in bayesian id203
   models and flavors of the mcmc algorithm. however, it is possible to
   anticipate how it will perform in broad terms.

   pymc's number-crunching is done using a combination of
   industry-standard libraries (numpy and the id202 libraries on
   which it depends) and hand-optimized fortran routines. for models that
   are composed of variables valued as large arrays, pymc will spend most
   of its time in these fast routines. in that case, it will be roughly as
   fast as packages written entirely in c and faster than winbugs. for
   finer-grained models containing mostly scalar variables, it will spend
   most of its time in coordinating python code. in that case, despite our
   best efforts at optimization, pymc will be significantly slower than
   packages written in c and on par with or slower than winbugs. however,
   as fine-grained models are often small and simple, the total time
   required for sampling is often quite reasonable despite this poorer
   performance.

   we have chosen to spend time developing pymc rather than using an
   existing package primarily because it allows us to build and
   efficiently fit any model we like within a full-fledged python
   environment. we have emphasized extensibility throughout pymc's design,
   so if it doesn't meet your needs out of the box chances are you can
   make it do so with a relatively small amount of code. see the
   [115]testimonials page on the wiki for reasons why other users have
   chosen pymc.

getting started

   this guide provides all the information needed to install pymc, code a
   bayesian statistical model, run the sampler, save and visualize the
   results. in addition, it contains a list of the statistical
   distributions currently available. more [116]examples of usage as well
   as [117]tutorials are available from the pymc web site.

     *    2019 github, inc.
     * [118]terms
     * [119]privacy
     * [120]security
     * [121]status
     * [122]help

     * [123]contact github
     * [124]pricing
     * [125]api
     * [126]training
     * [127]blog
     * [128]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [129]reload to refresh your
   session. you signed out in another tab or window. [130]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/pymc-devs/pymc/commits/master.atom
   3. https://github.com/pymc-devs/pymc#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/pymc-devs/pymc
  32. https://github.com/join
  33. https://github.com/login?return_to=/pymc-devs/pymc
  34. https://github.com/pymc-devs/pymc/watchers
  35. https://github.com/login?return_to=/pymc-devs/pymc
  36. https://github.com/pymc-devs/pymc/stargazers
  37. https://github.com/login?return_to=/pymc-devs/pymc
  38. https://github.com/pymc-devs/pymc/network/members
  39. https://github.com/pymc-devs
  40. https://github.com/pymc-devs/pymc
  41. https://github.com/pymc-devs/pymc
  42. https://github.com/pymc-devs/pymc/issues
  43. https://github.com/pymc-devs/pymc/pulls
  44. https://github.com/pymc-devs/pymc/projects
  45. https://github.com/pymc-devs/pymc/wiki
  46. https://github.com/pymc-devs/pymc/pulse
  47. https://github.com/join?source=prompt-code
  48. https://github.com/pymc-devs/pymc3
  49. http://pymc-devs.github.com/pymc/
  50. https://github.com/pymc-devs/pymc/commits/master
  51. https://github.com/pymc-devs/pymc/branches
  52. https://github.com/pymc-devs/pymc/releases
  53. https://github.com/pymc-devs/pymc/graphs/contributors
  54. https://github.com/pymc-devs/pymc/blob/master/license
  55. https://github.com/pymc-devs/pymc/search?l=fortran
  56. https://github.com/pymc-devs/pymc/search?l=python
  57. https://github.com/pymc-devs/pymc/search?l=tex
  58. https://github.com/pymc-devs/pymc/search?l=c
  59. https://github.com/pymc-devs/pymc/search?l=shell
  60. https://github.com/pymc-devs/pymc/search?l=ruby
  61. https://github.com/pymc-devs/pymc/find/master
  62. https://github.com/pymc-devs/pymc/archive/master.zip
  63. https://github.com/login?return_to=https://github.com/pymc-devs/pymc
  64. https://github.com/join?return_to=/pymc-devs/pymc
  65. https://desktop.github.com/
  66. https://desktop.github.com/
  67. https://developer.apple.com/xcode/
  68. https://visualstudio.github.com/
  69. https://github.com/fonnesbeck
  70. https://github.com/pymc-devs/pymc/commits?author=fonnesbeck
  71. https://github.com/pymc-devs/pymc/commit/c6e530210bff4c0d7189b35b2c971bc53f93f7cd
  72. https://github.com/pymc-devs/pymc/pull/193
  73. https://github.com/pymc-devs/pymc/commit/c6e530210bff4c0d7189b35b2c971bc53f93f7cd
  74. https://github.com/pymc-devs/pymc/commit/c6e530210bff4c0d7189b35b2c971bc53f93f7cd
  75. https://github.com/pymc-devs/pymc/tree/c6e530210bff4c0d7189b35b2c971bc53f93f7cd
  76. https://github.com/pymc-devs/pymc/tree/master/blas/blas
  77. https://github.com/pymc-devs/pymc/tree/master/cephes
  78. https://github.com/pymc-devs/pymc/tree/master/conda
  79. https://github.com/pymc-devs/pymc/tree/master/devtools/build-vm/linux
  80. https://github.com/pymc-devs/pymc/tree/master/docs
  81. https://github.com/pymc-devs/pymc/commit/4a146f096c4fa455051ae2124da1e4324b41cad6
  82. https://github.com/pymc-devs/pymc/tree/master/lapack/double
  83. https://github.com/pymc-devs/pymc/tree/master/pymc
  84. https://github.com/pymc-devs/pymc/commit/142ae66dc34e1ed91bd8b2f087890f1a562f1c44
  85. https://github.com/pymc-devs/pymc/blob/master/.gitignore
  86. https://github.com/pymc-devs/pymc/blob/master/.travis.yml
  87. https://github.com/pymc-devs/pymc/blob/master/credits.rst
  88. https://github.com/pymc-devs/pymc/blob/master/developers.txt
  89. https://github.com/pymc-devs/pymc/commit/85eba171b2b937a44dcede6cbe05228e4cfb803a
  90. https://github.com/pymc-devs/pymc/blob/master/license
  91. https://github.com/pymc-devs/pymc/blob/master/manifest.in
  92. https://github.com/pymc-devs/pymc/blob/master/readme.rst
  93. https://github.com/pymc-devs/pymc/blob/master/builddocs
  94. https://github.com/pymc-devs/pymc/commit/ae3dc1358710c870e85b870760fd2d79b8e16d05
  95. https://github.com/pymc-devs/pymc/blob/master/builddpkg
  96. https://github.com/pymc-devs/pymc/commit/e2797a00f6ee9e8f22726ec9522dc73246bbcd0c
  97. https://github.com/pymc-devs/pymc/blob/master/buildosx
  98. https://github.com/pymc-devs/pymc/blob/master/code_maintenance.py
  99. https://github.com/pymc-devs/pymc/blob/master/epydoc.conf
 100. https://github.com/pymc-devs/pymc/commit/e4a58e36efcc575b6f84d0be506a54c7d4db521f
 101. https://github.com/pymc-devs/pymc/blob/master/pymc-requirements
 102. https://github.com/pymc-devs/pymc/blob/master/setup.py
 103. https://github.com/pymc-devs/pymc/blob/master/setupegg.py
 104. https://github.com/pymc-devs/pymc/blob/master/stdeb_all.id18
 105. https://github.com/pymc-devs/pymc
 106. http://bit.ly/pymc_docs
 107. http://travis-ci.org/pymc-devs/pymc
 108. https://pypi.python.org/pypi/pymc
 109. https://github.com/pymc-devs/pymc/blob/master/license
 110. https://github.com/pymc-devs/pymc3
 111. http://www.mrc-bsu.cam.ac.uk/bugs/
 112. http://www-ice.iarc.fr/~martyn/software/jags/
 113. http://www.cs.utah.edu/~hal/hbc/
 114. http://cran.r-project.org/web/packages/
 115. https://github.com/pymc-devs/pymc/wiki/testimonials
 116. https://github.com/pymc-devs/pymc/wiki
 117. http://pymc-devs.github.com/pymc/tutorial.html
 118. https://github.com/site/terms
 119. https://github.com/site/privacy
 120. https://github.com/security
 121. https://githubstatus.com/
 122. https://help.github.com/
 123. https://github.com/contact
 124. https://github.com/pricing
 125. https://developer.github.com/
 126. https://training.github.com/
 127. https://github.blog/
 128. https://github.com/about
 129. https://github.com/pymc-devs/pymc
 130. https://github.com/pymc-devs/pymc

   hidden links:
 132. https://github.com/
 133. https://github.com/pymc-devs/pymc
 134. https://github.com/pymc-devs/pymc
 135. https://github.com/pymc-devs/pymc
 136. https://help.github.com/articles/which-remote-url-should-i-use
 137. https://github.com/pymc-devs/pymc#introduction
 138. https://github.com/pymc-devs/pymc#purpose
 139. https://github.com/pymc-devs/pymc#features
 140. https://github.com/pymc-devs/pymc#whats-new-in-version-2
 141. https://github.com/pymc-devs/pymc#usage
 142. https://github.com/pymc-devs/pymc#history
 143. https://github.com/pymc-devs/pymc#relationship-to-other-packages
 144. https://github.com/pymc-devs/pymc#getting-started
 145. https://github.com/
