                         crf++: yet another crf toolkit

introduction

   crf++ is a simple, customizable, and open source implementation of
   [1]id49 (crfs) for segmenting/labeling sequential
   data. crf++ is designed for generic purpose and will be applied to a
   variety of nlp tasks, such as id39, information
   extraction and text chunking.

table of contents

     * [2]features
     * [3]news
     * [4]download

     * [5]source
     * [6]binary package for ms-windows

     [7]installation

     [8]usage
     * [9]training and test file formats
     * [10]preparing feature templates
     * [11]training (encoding)
     * [12]testing (decoding)

     [13]case studies

     [14]useful tips

     [15]to do

     [16]links

features

     * can redefine feature sets
     * written in c++ with stl
     * fast training based on [17]lbfgs, a quasi-newton algorithm for
       large scale numerical optimization problem
     * less memory usage both in training and testing
     * encoding/decoding in practical time
     * can perform n-best outputs
     * can perform single-best mira training
     * can output marginal probabilities for all candidates
     * available as an open source software

news

   2013-02-13: [18]crf++ 0.58 released

     * added createmodelfromarray() method to load model file from fixed
       buffer.
     * added gettemplate() method to get template string.

   2012-03-25
     * fixed build issue around libtool.
     * fixed c++11 compatible issue.

   2012-02-24
     * added crfpp:tagger::set_model() method.
     * fixed minor bugs

   2012-02-15: crf++ 0.55
     * added new crfpp:model class so that multiple threads can share
       single crf++ model.
     * added tagger::set_penalty and tagger::penalty() method for dual
       decompositon decoding
     * fixed crash bug on windows
     * fixed minor bugs

   2010-05-16: crf++ 0.54 released
     * fixed the bug in l1 id173. reported by fujii yasuhisa

   2009-05-06: crf++ 0.5 released
     * fixed build failure on libtool

   2009-04-19: crf++ 0.52
     * code clean up
     * replaced obsolete sstream with stringstream

   2007-07-12: crf++ 0.51
     * fixed a compilation error on gcc 4.3

   2007-12-09: crf++ 0.50
     * bug fix in --convert mode (could not generate model from text file)

   2007-08-18: crf++ 0.49
     * added setter/getter for nbest, cost_factor and vlevel to api

   2007-07-07: crf++ 0.48 released
     * support l1-crf. use -a crf-l1 option to enable l1 id173.

   2007-03-07: crf++ 0.47 released
     * fixed a bug in mira training

   2007-02-12: crf++ 0.46 released
     * changed the licence from lgpl to lgpl/bsd dual license
     * perl/ruby/python/java binding supports (see perl/ruby/python/java
       directory respectively)
     * code refactoring

   2006-11-26: crf++ 0.45
     * support 1-best mira training (use -a mira option)

   2006-08-18: crf++ 0.44
     * fixed a bug in feature extraction
     * allowed redundant spaces in training/test files
     * determined real column size by looking at template
     * added sample code of api (sdk/example.cpp)
     * described usage of each api function (crfpp.h)

   2006-08-07: crf++ 0.43
     * implemented several api functions to get lattice information
     * added -c option to control cost-factor

   2006-03-31: crf++ 0.42
     * fixed a bug in feature extraction

   2006-03-30: crf++ 0.41
     * support parallel training

   2006-03-21: crf++ 0.40
     * fixed a fatal memory leak bug
     * make crf++ api

   2005-10-29: crf++ 0.3
     * added -t option that enables you to have not only binary model but
       also text model
     * added -c option for converting a text model to a binary model

   2005-07-04: crf++ 0.2 released
     * fixed several bugs

   2005-05-28: crf++ 0.1 released
     * initial release

download

     * crf++ is free software; you can redistribute it and/or modify it
       under the terms of the [19]gnu lesser general public license or
       [20]new bsd license
     * please let [21]me know if you use crf++ for research purpose or
       find any research publications where crf++ is applied.
    source
          + crf++-0.58.tar.gz: [22]http
    binary package for ms-windows
          + [23]http

installation

     * requirements
          + c++ compiler (gcc 3.0 or higher)
     * how to make
% ./configure
% make
% su
# make install

       you can change default install path by using --prefix option of
       configure script.
       try --help option for finding out other options.

usage

  training and test file formats

   both the training file and the test file need to be in a particular
   format for crf++ to work properly. generally speaking, training and
   test file must consist of multiple tokens. in addition, a token
   consists of multiple (but fixed-numbers) columns. the definition of
   tokens depends on tasks, however, in most of typical cases, they simply
   correspond to words. each token must be represented in one line, with
   the columns separated by white space (spaces or tabular characters). a
   sequence of token becomes a sentence. to identify the boundary between
   sentences, an empty line is put.

   you can give as many columns as you like, however the number of columns
   must be fixed through all tokens. furthermore, there are some kinds of
   "semantics" among the columns. for example, 1st column is 'word',
   second column is 'pos tag' third column is 'sub-category of pos' and so
   on.

   the last column represents a true answer tag which is going to be
   trained by crf.

   here's an example of such a file: (data for conll shared task)
he        prp  b-np
reckons   vbz  b-vp
the       dt   b-np
current   jj   i-np
account   nn   i-np
deficit   nn   i-np
will      md   b-vp
narrow    vb   i-vp
to        to   b-pp
only      rb   b-np
#         #    i-np
1.8       cd   i-np
billion   cd   i-np
in        in   b-pp
september nnp  b-np
.         .    o

he        prp  b-np
reckons   vbz  b-vp
..

   there are 3 columns for each token.
     * the word itself (e.g. reckons);
     * part-of-speech associated with the word (e.g. vbz);
     * chunk(answer) tag represented in iob2 format;

   the following data is invalid, since the number of columns of second
   and third are 2. (they have no pos column.) the number of columns
   should be fixed.
he        prp  b-np
reckons   b-vp
the       b-np
current   jj   i-np
account   nn   i-np
..

  preparing feature templates

   as crf++ is designed as a general purpose tool, you have to specify the
   feature templates in advance. this file describes which features are
   used in training and testing.
     * template basic and macro
       each line in the template file denotes one template. in each
       template, special macro %x[row,col] will be used to specify a token
       in the input data. row specfies the relative position from the
       current focusing token and col specifies the absolute position of
       the column.
       here you can find some examples for the replacements
input: data
he        prp  b-np
reckons   vbz  b-vp
the       dt   b-np << current token
current   jj   i-np
account   nn   i-np

       template        expanded feature
       %x[0,0]         the
       %x[0,1]         dt
       %x[-1,0]        reckons
       %x[-2,1]        prp
       %x[0,0]/%x[0,1] the/dt
       abc%x[0,1]123   abcdt123
     * template type
       note also that there are two types of templates. the types are
       specified with the first character of templates.

     * unigram template: first character, 'u'
       this is a template to describe unigram features. when you give a
       template "u01:%x[0,1]", crf++ automatically generates a set of
       feature functions (func1 ... funcn) like:
func1 = if (output = b-np and feature="u01:dt") return 1 else return 0
func2 = if (output = i-np and feature="u01:dt") return 1 else return 0
func3 = if (output = o and feature="u01:dt") return 1  else return 0
....
funcxx = if (output = b-np and feature="u01:nn") return 1  else return 0
funcxy = if (output = o and feature="u01:nn") return 1  else return 0
...
       the number of feature functions generated by a template amounts to
       (l * n), where l is the number of output classes and n is the
       number of unique string expanded from the given template.
     * bigram template: first character, 'b'
       this is a template to describe bigram features. with this template,
       a combination of the current output token and previous output token
       (bigram) is automatically generated. note that this type of
       template generates a total of (l * l * n) distinct features, where
       l is the number of output classes and n is the number of unique
       features generated by the templates. when the number of classes is
       large, this type of templates would produce a tons of distinct
       features that would cause inefficiency both in training/testing.
     * what is the diffrence between unigram and bigram features?
       the words unigram/bigram are confusing, since a macro for
       unigram-features does allow you to write word-level bigram like
       %x[-1,0]%x[0,0]. here, unigram and bigram features mean uni/bigrams
       of output tags.

     * unigram: |output tag| x |all possible strings expanded with a
       macro|
     * bigram: |output tag| x |output tag| x |all possible strings
       expanded with a macro|

     identifiers for distinguishing relative positions

   you also need to put an identifier in templates when relative positions
   of tokens must be distinguished.

   in the following case, the macro "%x[-2,1]" and "%x[1,1]" will be
   replaced into "dt". but they indicates different "dt".
the       dt  b-np
pen       nn  i-np
is        vb  b-vp << current token
a         dt  b-np

   to distinguish both two, put an unique identifier (u01: or u02:) in the
   template:
u01:%x[-2,1]
u02:%x[1,1]

   in this case both two templates are regarded as different ones, as they
   are expanded into different features, "u01:dt" and "u02:dt". you can
   use any identifier whatever you like, but it is useful to use numerical
   numbers to manage them, because they simply correspond to feature ids.

   if you want to use "bag-of-words" feature, in other words, not to care
   the relative position of features, you don't need to put such
   identifiers.

     example

   here is the template example for [24]conll 2000 shared task and base-np
   chunking task. only one bigram template ('b') is used. this means that
   only combinations of previous output token and current token are used
   as bigram features. the lines starting from # or empty lines are
   discarded as comments
# unigram
u00:%x[-2,0]
u01:%x[-1,0]
u02:%x[0,0]
u03:%x[1,0]
u04:%x[2,0]
u05:%x[-1,0]/%x[0,0]
u06:%x[0,0]/%x[1,0]

u10:%x[-2,1]
u11:%x[-1,1]
u12:%x[0,1]
u13:%x[1,1]
u14:%x[2,1]
u15:%x[-2,1]/%x[-1,1]
u16:%x[-1,1]/%x[0,1]
u17:%x[0,1]/%x[1,1]
u18:%x[1,1]/%x[2,1]

u20:%x[-2,1]/%x[-1,1]/%x[0,1]
u21:%x[-1,1]/%x[0,1]/%x[1,1]
u22:%x[0,1]/%x[1,1]/%x[2,1]

# bigram
b

  training (encoding)

   use crf_learn command:
% crf_learn template_file train_file model_file

   where template_file and train_file are the files you need to prepare in
   advance. crf_learn generates the trained model file in model_file.

   crf_learn outputs the following information.
crf++: yet another crf tool kit
copyright(c) 2005 taku kudo, all rights reserved.

reading training data: 100.. 200.. 300.. 400.. 500.. 600.. 700.. 800..
done! 1.94 s

number of sentences: 823
number of features:  1075862
number of thread(s): 1
freq:                1
eta:                 0.00010
c:                   1.00000
shrinking size:      20
algorithm:           crf

iter=0 terr=0.99103 serr=1.00000 obj=54318.36623 diff=1.00000
iter=1 terr=0.35260 serr=0.98177 obj=44996.53537 diff=0.17161
iter=2 terr=0.35260 serr=0.98177 obj=21032.70195 diff=0.53257
iter=3 terr=0.23879 serr=0.94532 obj=13642.32067 diff=0.35138
iter=4 terr=0.15324 serr=0.88700 obj=8985.70071 diff=0.34134
iter=5 terr=0.11605 serr=0.80680 obj=7118.89846 diff=0.20775
iter=6 terr=0.09305 serr=0.72175 obj=5531.31015 diff=0.22301
iter=7 terr=0.08132 serr=0.68408 obj=4618.24644 diff=0.16507
iter=8 terr=0.06228 serr=0.59174 obj=3742.93171 diff=0.18953

     * iter: number of iterations processed
     * terr: error rate with respect to tags. (# of error tags/# of all
       tag)
     * serr: error rate with respect to sentences. (# of error sentences/#
       of all sentences)
     * obj: current object value. when this value converges to a fixed
       point, crf++ stops the iteration.
     * diff: relative difference from the previous object value.

   there are 4 major parameters to control the training condition
     * -a crf-l2 or crf-l1:
       changing the id173 algorithm. default setting is l2.
       generally speaking, l2 performs slightly better than l1, while the
       number of non-zero features in l1 is drastically smaller than that
       in l2.
     * -c float:
       with this option, you can change the hyper-parameter for the crfs.
       with larger c value, crf tends to overfit to the give training
       corpus. this parameter trades the balance between overfitting and
       underfitting. the results will significantly be influenced by this
       parameter. you can find an optimal value by using held-out data or
       more general model selection method such as cross validation.
     * -f num:
       this parameter sets the cut-off threshold for the features. crf++
       uses the features that occurs no less than num times in the given
       training data. the default value is 1. when you apply crf++ to
       large data, the number of unique features would amount to several
       millions. this option is useful in such cases.
     * -p num:
       if the pc has multiple cpus, you can make the training faster by
       using multi-threading. num is the number of threads.

   here is the example where these two parameters are used.
% crf_learn -f 3 -c 1.5 template_file train_file model_file

   since version 0.45, crf++ supports single-best mira training. mira
   training is used when -a mira option is set.
% crf_learn -a mira template train.data model
crf++: yet another crf tool kit
copyright(c) 2005 taku kudo, all rights reserved.

reading training data: 100.. 200.. 300.. 400.. 500.. 600.. 700.. 800..
done! 1.92 s

number of sentences: 823
number of features:  1075862
number of thread(s): 1
freq:                1
eta:                 0.00010
c:                   1.00000
shrinking size:      20
algorithm:           mira

iter=0 terr=0.11381 serr=0.74605 act=823 uact=0 obj=24.13498 kkt=28.00000
iter=1 terr=0.04710 serr=0.49818 act=823 uact=0 obj=35.42289 kkt=7.60929
iter=2 terr=0.02352 serr=0.30741 act=823 uact=0 obj=41.86775 kkt=5.74464
iter=3 terr=0.01836 serr=0.25881 act=823 uact=0 obj=47.29565 kkt=6.64895
iter=4 terr=0.01106 serr=0.17011 act=823 uact=0 obj=50.68792 kkt=3.81902
iter=5 terr=0.00610 serr=0.10085 act=823 uact=0 obj=52.58096 kkt=3.98915
iter=0 terr=0.11381 serr=0.74605 act=823 uact=0 obj=24.13498 kkt=28.00000
...

     * iter, terr, serror: same as crf training
     * act: number of active examples in working set
     * uact: number of examples whose dual parameters reach soft margin
       upper-bound c. 0 uact suggests that given training data was linear
       separable
     * obj: current object value, ||w||^2
     * kkt: max kkt violation value. when it gets 0.0, mira training
       finishes

   there are some parameters to control the mira training condition
     * -c float:
       changes soft margin parameter, which is an analogue to the soft
       margin parameter c in support vector machines. the definition is
       basically the same as -c option in crf training. with larger c
       value, mira tends to overfit to the give training corpus.
     * -f num:
       same as crf
     * -h num:
       changes shrinking size. when a training sentence is not used in
       updating parameter vector num times, we can consider that the
       instance doesn't contribute training any more. mira tries to remove
       such instances. the process is called "shrinking". when setting
       smaller num, shrinking occurs in early stage, which drastically
       reduces training time. however, too small num is not recommended.
       when training finishes, mira tries to go through all training
       examples again to know whether or not all kkt conditions are really
       satisfied. too small num would increase the chances of recheck.

  testing (decoding)

   use crf_test command:
% crf_test -m model_file test_files ...

   where model_file is the file crf_learncreates. in the testing, you
   don't need to specify the template file, because the model file has the
   same information for the template. test_file is the test data you want
   to assign sequential tags. this file has to be written in the same
   format as training file.

   here is an output of crf_test:
% crf_test -m model test.data
rockwell        nnp     b       b
international   nnp     i       i
corp.   nnp     i       i
's      pos     b       b
tulsa   nnp     i       i
unit    nn      i       i
..

   the last column is given (estimated) tag. if the 3rd column is true
   answer tag , you can evaluate the accuracy by simply seeing the
   difference between the 3rd and 4th columns.
     * verbose level
       the -v option sets verbose level. default value is 0. by increasing
       the level, you can have an extra information from crf++

     * level 1
       you can also have marginal probabilities for each tag (a kind of
       confidece measure for each output tag) and a conditional probably
       for the output (confidence measure for the entire output).
% crf_test -v1 -m model test.data| head
# 0.478113
rockwell        nnp     b       b/0.992465
international   nnp     i       i/0.979089
corp.   nnp     i       i/0.954883
's      pos     b       b/0.986396
tulsa   nnp     i       i/0.991966
...

       the first line "# 0.478113" shows the conditional probably for the
       output. also, each output tag has a id203 represented like
       "b/0.992465".
     * level 2
       you can also have marginal probabilities for all other candidates.
% crf_test -v2 -m model test.data
# 0.478113
rockwell        nnp     b       b/0.992465      b/0.992465      i/0.00144946
o/0.00608594
international   nnp     i       i/0.979089      b/0.0105273     i/0.979089
o/0.0103833
corp.   nnp     i       i/0.954883      b/0.00477976    i/0.954883      o/0.0403
37
's      pos     b       b/0.986396      b/0.986396      i/0.00655976    o/0.0070
4426
tulsa   nnp     i       i/0.991966      b/0.00787494    i/0.991966      o/0.0001
5949
unit    nn      i       i/0.996169      b/0.00283111    i/0.996169      o/0.0009
99975
..

     n-best outputs

   with the -n option, you can obtain n-best results sorted by the
   id155 of crf. with n-best output mode, crf++ first
   gives one additional line like "# n prob", where n means that rank of
   the output starting from 0 and prob denotes the id155
   for the output.

   note that crf++ sometimes discards enumerating n-best results if it
   cannot find candidates any more. this is the case when you give crf++ a
   short sentence.

   crf++ uses a combination of forward viterbi and backward id67.
   this combination yields the exact list of n-best results.

   here is the example of the n-best results.
% crf_test -n 20 -m model test.data
# 0 0.478113
rockwell        nnp     b       b
international   nnp     i       i
corp.   nnp     i       i
's      pos     b       b
...

# 1 0.194335
rockwell        nnp     b       b
international   nnp     i       i

tips

     * crf++ uses the exactly same data format as [25]yamcha uses. you may
       use both two toolkits for an input data and compare the performance
       between crf and id166
     * the output of crf++ is also compatible to [26]conll 2000 shared
       task. this allows us to use the perl script [27]conlleval.pl to
       evaluate system outputs. this script is very useful and give us a
       list of f-measures for all chunk types

case studies

   in the example directories, you can find three case studies, basenp
   chunking, text chunking, and japanese id39, to use
   crf++.

   in each directory, please try the following commands
 % crf_learn template train model
 % crf_test  -m model test

to do

     * support [28]semi-markov crf
     * support [29]piece-wise crf
     * provide useful c++/c api (currently no apis are available)

references

     * j. lafferty, a. mccallum, and f. pereira. [30]conditional random
       fields: probabilistic models for segmenting and labeling sequence
       data, in proc. of icml, pp.282-289, 2001
     * f. sha and f. pereira. [31]id66 with conditional random
       fields, in proc. of hlt/naacl 2003
     * [32]np chunking
     * [33]conll 2000 shared task: chunking
     __________________________________________________________________

   $id: index.html,v 1.23 2003/01/06 13:11:21 taku-ku exp $;


    taku@chasen.org

references

   1. http://www.cis.upenn.edu/~pereira/papers/crf.pdf
   2. https://taku910.github.io/crfpp/#features
   3. https://taku910.github.io/crfpp/#news
   4. https://taku910.github.io/crfpp/#download
   5. https://taku910.github.io/crfpp/#source
   6. https://taku910.github.io/crfpp/#windows
   7. https://taku910.github.io/crfpp/#install
   8. https://taku910.github.io/crfpp/#usage
   9. https://taku910.github.io/crfpp/#format
  10. https://taku910.github.io/crfpp/#templ
  11. https://taku910.github.io/crfpp/#training
  12. https://taku910.github.io/crfpp/#testing
  13. https://taku910.github.io/crfpp/#tips
  14. https://taku910.github.io/crfpp/#tips
  15. https://taku910.github.io/crfpp/#todo
  16. https://taku910.github.io/crfpp/#links
  17. http://www-fp.mcs.anl.gov/otc/guide/softwareguide/blurbs/lbfgs.html
  18. https://taku910.github.io/crfpp/#download
  19. http://www.gnu.org/copyleft/lesser.html
  20. http://www.opensource.org/licenses/bsd-license.php
  21. mailto:taku@chasen.org
  22. https://drive.google.com/folderview?id=0b4y35fiv1wh7fngtefhhqun2y1b5eujbnhzuemjyqv9vwlbub3jlx0xbdwvztwtsbvbneu0&usp=drive_web#list
  23. https://drive.google.com/folderview?id=0b4y35fiv1wh7fngtefhhqun2y1b5eujbnhzuemjyqv9vwlbub3jlx0xbdwvztwtsbvbneu0&usp=drive_web#list
  24. http://www.cnts.ua.ac.be/conll2000/chunking/
  25. http://chasen.org/~taku/software/yamcha/
  26. http://www.cnts.ua.ac.be/conll2000/chunking/
  27. http://www.cnts.ua.ac.be/conll2000/chunking/output.html
  28. http://www-2.cs.cmu.edu/~wcohen/postscript/semicrf.pdf
  29. http://www.cs.umass.edu/~mccallum/papers/lcrf-nips2004.pdf
  30. http://www.cis.upenn.edu/~pereira/papers/crf.pdf
  31. http://www.cis.upenn.edu/~feisha/pubs/shallow03.pdf
  32. http://staff.science.uva.nl/~erikt/research/np-chunking.html
  33. http://www.cnts.ua.ac.be/conll2000/chunking/
