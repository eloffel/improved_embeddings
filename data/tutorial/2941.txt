   [1]by jure leskovec [2]stanford university
   [3]snap logo
     * [4]snap for c++
          + [5]snap c++ main page
          + [6]snap c++ download
          + [7]snap c++ documentation
     * [8]snap for python
          + [9]snap.py python main page
          + [10]snap.py python download
          + [11]snap.py python documentation
     * [12]snap datasets
          + [13]large networks
          + [14]web datasets
          + [15]other resources
     * [16]biosnap datasets
     * [17]what's new
     * [18]people
     * [19]papers
     * [20]projects
          + [21]activity inequality
          + [22]agm
          + [23]conflict
          + [24]connie
          + [25]counseling
          + [26]crank
          + [27]decagon
          + [28]graphsage
          + [29]graphwave
          + [30]higher-order
          + [31]disinformation
          + [32]infopath
          + [33]lim
          + [34]mappr
          + [35]mambo
          + [36]memetracker
          + [37]ncp
          + [38]ne
          + [39]netinf
          + [40]nifty
          + [41]node2vec
          + [42]ohmnet
          + [43]pathways
          + [44]quotus
          + [45]ringo
          + [46]seismic
          + [47]snap
          + [48]snap.py
          + [49]snapvx
          + [50]temporal motifs
          + [51]ticc
          + [52]tipas
          + [53]tvgl
     * [54]citing snap
     * [55]links
     * [56]about
     * [57]contact us

   open positions
   open research positions in snap group are available at
   [58]undergraduate, graduate and [59]postdoctoral levels.

snap.py - snap for python

     * [60]about snap.py
     * [61]download and installation of snap.py
     * [62]documentation and support
     * [63]quick introduction to snap.py
     * [64]graph and network types
     * [65]manipulating graphs and networks
     * [66]input/output
     * [67]computing structural properties

about snap.py

   snap.py is a python interface for snap. snap is a general purpose, high
   performance system for analysis and manipulation of large networks.
   snap is written in c++ and optimized for maximum performance and
   compact graph representation. it easily scales to massive networks with
   hundreds of millions of nodes, and billions of edges.

   snap.py provides performance benefits of snap, combined with
   flexibility of python. most of the snap functionality is available via
   snap.py in python.

download and installation of snap.py

   the latest version of snap.py is 4.1 (jul 27, 2018). packages for
   macos, linux (as centos) and windows 64-bit are available at
   [68]snap.py download.

   snap.py requires that python 2.7.x is installed on your machine.
   prebuilt snap.py packages support the following versions of python:
     * macos: the system preinstalled version of python, anaconda python,
       homebrew python (packages from python.org will not work);
     * windows 64-bit: packages for 64-bit python from python.org (windows
       32-bit packages or python 32-bit will not work). python 2.7.x can
       be downloaded from the [69]python download page. make sure that you
       are using 64-bit python 2.7.x packages.
     * linux: the system version of python or packages from python.org.

   make sure that your operating system is 64-bit and that you are using
   64-bit versions of python 2.7.x.

   on windows, snap.py requires a 64-bit operating system version.
   [70]visual c++ redistributable for visual studio 2012 must be installed
   on the system. you need to download and install the 64-bit version
   vcredist_x64.exe, not 32-bit version vcredist_x86.exe.

   to install snap.py, download and unpack the package for your platform
   and run setup.py. see below for os specific instructions.

   snap.py is largely self-contained and requires external packages only
   for drawing and visualization. the following packages need to be
   installed on the system to support drawing and visualization in
   snap.py:
     * [71]gnuplot for plotting structural properties of networks (e.g.,
       degree distribution);
     * [72]graphviz for drawing and visualizing small graphs.

   set the system path variable, so that gnuplot and graphviz are
   available, or put the executables in the working directory.

installation of snap.py on macos

   on macos (supported releases are 10.9.5 or later), use the following
   commands:

   tar zxvf snap-4.1.0-4.1-macosx10.13.2-x64-py2.7.tar.gz cd
   snap-4.1.0-4.1-macosx10.13.2-x64-py2.7 # # execute one of the 'install'
   lines below # # for system python, execute the following line sudo
   python setup.py install # for anaconda and homebrew python, execute the
   following line - no 'sudo' python setup.py install


installation of snap.py on linux

   on linux, use the following commands:

   tar zxvf snap-4.1.0-4.1-centos6.5-x64-py2.6.tar.gz cd
   snap-4.1.0-4.1-centos6.5-x64-py2.6 sudo python setup.py install


installation of snap.py on windows 64-bit

   on windows, verify that your operating system is 64-bit and that a
   64-bit version of [73]visual c++ redistributable for visual studio 2012
   is installed, then unzip the snap.py package and install it with the
   following command in the command prompt:

   cd snap-4.1.0-4.1-win-x64-py2.7 python setup.py install


local install of snap.py

   if you want to use snap.py in a local directory without installing it
   system-wide, then download the corresponding snap.py package for your
   system, unpack, and copy files snap.py and _snap.so (or _snap.pyd) to
   your working directory.

documentation and support

   [74]snap.py tutorial and manual are available.

   snap.py is a python interface for snap, which is written in c++. most
   of the snap functionality is supported. for more details, check out
   [75]snap c++ documentation.

   a tutorial on [76]large scale network analytics with snap with a
   significant snap.py specific component was given at the [77]www2015
   conference in florence.

   use [78]snap and snap.py users mailing list for any questions or a
   discussion about snap.py installation, use, and development. to post to
   the group, send your message to snap-discuss at googlegroups dot com.

quick introduction to snap.py

   this document gives a quick introduction to a range of snap.py
   operations.

   several programs are available to demonstrate the use of snap.py. the
   programs are also useful as tests to confirm that your installation of
   snap.py is working correctly:
     * [79]quick_test.py: a quick test to confirm that snap.py works on
       your computer;
     * [80]intro.py: combines the code that is shown below on this page;
     * [81]tutorial.py: contains the code from snap.py tutorial;
     * [82]tneanet.py: demonstrates the use of the tneanet network class;
     * [83]cncom.py: demonstrates the use of functions for connected
       components;
     * [84]attributes.py: demonstrates the use of attributes in tneanet
       network class;
     * [85]test-gnuplot.py: a quick test to confirm that gnuplot works;
     * [86]test-graphviz.py: a quick test to confirm that graphviz works.

   the code from intro.py is explained in more details below.

   all the code assumes that snap.py has been imported by the python
   program. make sure that you execute this line in python before running
   any of the code below:

   import snap


graph and network types

   snap.py supports graphs and networks. graphs describe topologies. that
   is nodes with unique integer ids and directed/undirected/multiple edges
   between the nodes of the graph. networks are graphs with data on nodes
   and/or edges of the network. data types that reside on nodes and edges
   are simply passed as template parameters which provides a very fast and
   convenient way to implement various kinds of networks with rich data on
   nodes and edges.

   graph types in snap:

   tungraph: undirected graph (single edge between an unordered pair of
   nodes) tngraph: directed graph (single directed edge between an ordered
   pair of nodes)


   network types in snap:

   tneanet: directed multigraph with attributes for nodes and edges


graph creation

   example of how to create and use a directed graph:

   # create a graph pngraph g1 = snap.tngraph.new() g1.addnode(1)
   g1.addnode(5) g1.addnode(32) g1.addedge(1,5) g1.addedge(5,1)
   g1.addedge(5,32)


   nodes have explicit (and arbitrary) node ids. there is no restriction
   for node ids to be contiguous integers starting at 0. in tungraph and
   tngraph edges have no explicit ids -- edges are identified by a pair
   node ids.

   prefix p in the class name stands for a pointer, while t means a type.

   networks are created in the same way as graphs.

iterators

   many snap operations are based on node and edge iterators which allow
   for efficient implementation of algorithms that work on networks
   regardless of their type (directed, undirected, graphs, networks) and
   specific implementation.

   some examples of iterator usage in snap.py are shown below:

   # create a directed random graph on 100 nodes and 1k edges g2 =
   snap.genrndgnm(snap.pngraph, 100, 1000) # traverse the nodes for ni in
   g2.nodes(): print "node id %d with out-degree %d and in-degree %d" % (
   ni.getid(), ni.getoutdeg(), ni.getindeg()) # traverse the edges for ei
   in g2.edges(): print "edge (%d, %d)" % (ei.getsrcnid(), ei.getdstnid())
   # traverse the edges by nodes for ni in g2.nodes(): for id in
   ni.getoutedges(): print "edge (%d %d)" % (ni.getid(), id)


   in general node iterators provide the following functionality:

   getid(): return node id getoutdeg(): return out-degree of a node
   getindeg(): return in-degree of a node getoutnid(e): return node id of
   the endpoint of e-th out-edge getinnid(e): return node id of the
   endpoint of e-th in-edge isoutnid(int nid): do we point to node id n
   isinnid(n): does node id n point to us isnbrnid(n): is node n our
   neighbor


   for additional information on node and edge iterators, check out the
   [87]graph and network classes section in the snap.py reference manual.

input/output

   with snap it is easy to save and load networks in various formats.
   internally snap saves networks in compact binary format but functions
   for loading and saving networks in various other text and xml formats
   are also available (see gio.h).

   for example, snap.py code for saving and loading graphs looks as
   follows:

   # generate a network using forest fire model g3 =
   snap.genforestfire(1000, 0.35, 0.35) # save and load binary fout =
   snap.tfout("test.graph") g3.save(fout) fout.flush() fin =
   snap.tfin("test.graph") g4 = snap.tngraph.load(fin) # save and load
   from a text file snap.saveedgelist(g4, "test.txt", "save as
   tab-separated list of edges") g5 = snap.loadedgelist(snap.pngraph,
   "test.txt", 0, 1)


manipulating graphs and networks

   snap provides rich functionality to efficiently manipulate graphs and
   networks. most functions support all graph/network types.

   for example:

   # generate a network using forest fire model g6 =
   snap.genforestfire(1000, 0.35, 0.35) # convert to undirected graph g7 =
   snap.convertgraph(snap.pungraph,g6) wid35 = snap.getmxwcc(g6) # get a
   subgraph induced on nodes {0,1,2,3,4,5} subg = snap.getsubgraph(g6,
   snap.tintv.getv(0,1,2,3,4)) # get 3-core of g core3 = snap.getkcore(g6,
   3) # delete nodes of out degree 10 and in degree 5
   snap.deldegknodes(g6, 10, 5)


   for more details on snap.py functionality, check out the snap.py
   [88]manuals.

computing structural properties

   snap provides rich functionality to efficiently compute structural
   properties of networks. most functions support all graph/network types.

   for example:

   # generate a preferential attachment graph on 1000 nodes and node out
   degree of 3 g8 = snap.genprefattach(1000, 3) # vector of pairs of
   integers (size, count) cntv = snap.tintprv() # get distribution of
   connected components (component size, count) snap.getwccszcnt(g8, cntv)
   # get degree distribution pairs (degree, count) snap.getoutdeid197t(g8,
   cntv) # vector of floats eigv = snap.tfltv() # get first eigenvector of
   graph adjacency matrix snap.geteigvec(g8, eigv) # get diameter of g8
   snap.getbfsfulldiam(g8, 100) # count the number of triads in g8, get
   the id91 coefficient of g8 snap.gettriads(g8) snap.getclustcf(g8)


   for more details on snap.py functionality, check out the snap.py
   [89]manuals.

references

   1. http://cs.stanford.edu/~jure/
   2. http://www.stanford.edu/
   3. https://snap.stanford.edu/index.html
   4. https://snap.stanford.edu/snap/index.html
   5. https://snap.stanford.edu/snap/index.html
   6. https://snap.stanford.edu/snap/download.html
   7. https://snap.stanford.edu/snap/doc.html
   8. https://snap.stanford.edu/snappy/index.html
   9. https://snap.stanford.edu/snappy/index.html
  10. https://snap.stanford.edu/snappy/index.html#download
  11. https://snap.stanford.edu/snappy/index.html#docs
  12. https://snap.stanford.edu/data/index.html
  13. https://snap.stanford.edu/data/index.html
  14. https://snap.stanford.edu/data/other.html
  15. https://snap.stanford.edu/data/links.html
  16. https://snap.stanford.edu/biodata/index.html
  17. https://snap.stanford.edu/news.html
  18. https://snap.stanford.edu/people.html
  19. https://snap.stanford.edu/papers.html
  20. https://snap.stanford.edu/projects.html
  21. http://snap.stanford.edu/activity-inequality
  22. http://snap.stanford.edu/agm
  23. http://snap.stanford.edu/conflict
  24. http://snap.stanford.edu/connie
  25. http://snap.stanford.edu/counseling
  26. http://snap.stanford.edu/crank
  27. http://snap.stanford.edu/decagon
  28. http://snap.stanford.edu/graphsage
  29. http://snap.stanford.edu/graphwave
  30. http://snap.stanford.edu/higher-order
  31. http://snap.stanford.edu/hoax
  32. http://snap.stanford.edu/infopath
  33. http://snap.stanford.edu/lim
  34. http://snap.stanford.edu/mappr
  35. http://snap.stanford.edu/mambo
  36. http://snap.stanford.edu/memetracker
  37. http://snap.stanford.edu/ncp
  38. http://snap.stanford.edu/ne
  39. http://snap.stanford.edu/netinf
  40. http://snap.stanford.edu/nifty/
  41. http://snap.stanford.edu/node2vec
  42. http://snap.stanford.edu/ohmnet
  43. http://snap.stanford.edu/pathways
  44. http://snap.stanford.edu/quotus
  45. http://snap.stanford.edu/ringo
  46. http://snap.stanford.edu/seismic
  47. http://snap.stanford.edu/snap
  48. http://snap.stanford.edu/snappy
  49. http://snap.stanford.edu/snapvx
  50. http://snap.stanford.edu/temporal-motifs
  51. http://snap.stanford.edu/ticc
  52. http://snap.stanford.edu/tipas
  53. http://snap.stanford.edu/tvgl
  54. https://snap.stanford.edu/citing.html
  55. https://snap.stanford.edu/links.html
  56. https://snap.stanford.edu/about.html
  57. https://snap.stanford.edu/contact.html
  58. http://snap.stanford.edu/apply/index.php
  59. http://snap.stanford.edu/apply/index-postdoc.php
  60. https://snap.stanford.edu/snappy/#about
  61. https://snap.stanford.edu/snappy/#download
  62. https://snap.stanford.edu/snappy/#docs
  63. https://snap.stanford.edu/snappy/#introduction
  64. https://snap.stanford.edu/snappy/#types
  65. https://snap.stanford.edu/snappy/#manip
  66. https://snap.stanford.edu/snappy/#input
  67. https://snap.stanford.edu/snappy/#struct
  68. https://snap.stanford.edu/snappy/release
  69. http://www.python.org/download
  70. http://www.microsoft.com/en-us/download/details.aspx?id=30679
  71. http://www.gnuplot.info/
  72. http://www.graphviz.org/
  73. http://www.microsoft.com/en-us/download/details.aspx?id=30679
  74. https://snap.stanford.edu/snappy/doc/index.html
  75. http://snap.stanford.edu/snap/doc/snapuser-ref
  76. http://snap.stanford.edu/proj/snap-www/
  77. http://www.www2015.it/
  78. http://groups.google.com/group/snap-discuss
  79. https://snap.stanford.edu/snappy/file/quick_test.py
  80. https://snap.stanford.edu/snappy/file/intro.py
  81. https://snap.stanford.edu/snappy/file/tutorial.py
  82. https://snap.stanford.edu/snappy/file/tneanet.py
  83. https://snap.stanford.edu/snappy/file/cncom.py
  84. https://snap.stanford.edu/snappy/file/attributes.py
  85. https://snap.stanford.edu/snappy/file/test-gnuplot.py
  86. https://snap.stanford.edu/snappy/file/test-graphviz.py
  87. https://snap.stanford.edu/snappy/doc/reference/graphs.html
  88. https://snap.stanford.edu/snappy/doc/index.html
  89. https://snap.stanford.edu/snappy/doc/index.html
