   #[1]github [2]recent commits to dive-into-machine-learning:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]586
     * [35]star [36]9,203
     * [37]fork [38]1,680

[39]hangtwenty/[40]dive-into-machine-learning

   [41]code [42]issues 7 [43]pull requests 1 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   dive into machine learning with python jupyter notebook and
   scikit-learn! [47]http://hangtwenty.github.io/dive-into   
   [48]machine-learning [49]data-science [50]scikit-learn
   [51]ipython-notebook [52]deep-learning [53]jupyter-notebook [54]python
   [55]courses [56]learning [57]learning-by-doing [58]diy
     * [59]213 commits
     * [60]4 branches
     * [61]0 releases
     * [62]fetching contributors
     * [63]cc-by-4.0

   branch: master (button) new pull request
   [64]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/h
   [65]download zip

downloading...

   want to be notified of new releases in
   hangtwenty/dive-into-machine-learning?
   [66]sign in [67]sign up

launching github desktop...

   if nothing happens, [68]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [69]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [70]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [71]download the github extension for visual studio
   and try again.

   (button) go back
   [72]@hangtwenty
   [73]hangtwenty [74]reorganize the cloud-vendor course links
   latest commit [75]c34120b mar 18, 2019
   [76]permalink
 type       name                  latest commit message              commit time
      failed to load latest commit information.
      [77].travis.yml
      [78]license     [79]license: cc attribution 4.0 international jan 13, 2016
      [80]readme.md
      [81]_config.yml

readme.md

dive into machine learning [82]creative commons license [83]awesome

   hi there! this guide is for you:
     * you're new to [84]machine learning.
     * you know python. (at least the basics! if you want to learn more
       python, [85]try this)

   i learned python by hacking first, and getting serious later. i wanted
   to do this with machine learning. if this is your style, join me in
   getting a bit ahead of yourself.

   note: there are several fields within "data" and machine learning is
   just one. it's good to know the context: [86]what is the difference
   between data analytics, data analysis, data mining, data science,
   machine learning, and big data?

get your feet wet!

   i suggest you get your feet wet asap. you'll boost your confidence.

tools you'll need

     * [87]python. python 3 is the best option.
     * [88]ipython and the jupyter notebook. (fka ipython and ipython
       notebook.)
     * some scientific computing packages:
          + numpy
          + pandas
          + scikit-learn
          + matplotlib

   you can install python 3 and all of these packages in a few clicks with
   the [89]anaconda python distribution. anaconda is popular in data
   science and machine learning communities.

   if you're using python 2.7, don't worry. you don't have to migrate to
   python 3 just for this guide. also, if you're using pip/virtualenv
   instead of anaconda, that's alright too! and re: installing packages,
   this is a helpful doc: [90]conda vs. pip vs. virtualenv

let's go!

   [91]learn how to use ipython notebook (5-10 minutes). (you can
   [92]learn by screencast instead.)

   now, follow along with this brief exercise (10 minutes): [93]an
   introduction to machine learning with scikit-learn. do it in ipython or
   ipython notebook. it'll really boost your confidence.

   [94]i'll wait.

what just happened?

   you just classified some hand-written digits using [95]scikit-learn.
   neat huh?

   [96]scikit-learn is the go-to library for machine learning in python.
   [97]it's used widely. machine learning is hard. you'll be glad your
   tools are easy to work with.

   i encourage you to look at the [98]scikit-learn homepage and spend
   about 5 minutes looking over the names of the strategies
   (classification, regression, etc.), and their applications. don't click
   through yet! just get a glimpse of the vocabulary.

dive in

a visual introduction to machine learning

   let's learn a bit more about machine learning, and a couple of common
   ideas and concerns. read [99]"a visual introduction to machine
   learning, part 1" by [100]stephanie yee and [101]tony chu.

   [102]a visual introduction to machine learning, part 1

   it won't take long. it's a beautiful introduction ... try not to drool
   too much!

a few useful things to know about machine learning

   ok. let's dive deeper.

   read [103]"a few useful things to know about machine learning" by
   [104]prof. pedro domingos. it's densely packed with valuable
   information, but not opaque. the author understands that there's a lot
   of "black art" and folk wisdom, and they invite you in.

   take your time with this one. take notes. don't worry if you don't
   understand it all yet.

   the whole paper is packed with value, but i want to call out two
   points:
     * data alone is not enough. this is where science meets art in
       machine-learning. quoting domingos: "... the need for knowledge in
       learning should not be surprising. machine learning is not magic;
       it can   t get something from nothing. what it does is get more from
       less. programming, like all engineering, is a lot of work: we have
       to build everything from scratch. learning is more like farming,
       which lets nature do most of the work. farmers combine seeds with
       nutrients to grow crops. learners combine knowledge with data to
       grow programs."
     * more data beats a cleverer algorithm. listen up, programmers. we
       like cool tools. resist the temptation to reinvent the wheel, or to
       over-engineer solutions. your starting point is to [105]do the
       simplest thing that could possibly work. quoting domingos: "suppose
       you   ve constructed the best set of features you can, but the
       classifiers you   re getting are still not accurate enough. what can
       you do now? there are two main choices: design a better learning
       algorithm, or gather more data. [...] as a rule of thumb, a dumb
       algorithm with lots and lots of data beats a clever one with modest
       amounts of it. (after all, machine learning is all about letting
       data do the heavy lifting.)"

   when you work on a real machine learning problem, you should focus your
   efforts on your domain knowledge and data before optimizing your choice
   of algorithms. prefer to [106]do simple things until you have to
   increase complexity. you should not rush into neural networks because
   you think they're cool. to improve your model, get more data. then use
   your knowledge of the problem to [107]explore and process the data. you
   should only optimize the choice of algorithms after you have gathered
   enough data, and you've processed it well.

   [108]what has the most impact in machine learning

   (chart inspired by a slide from [109]alex pinto's talk, "secure because
   math: a deep-dive on ml-based monitoring".)

just about time for a break...

   before you take a break, grab some podcasts.

   first, download [110]an interview with prof. domingos on the data
   skeptic podcast (2018). prof. domingos wrote [111]the paper we read
   earlier. you might also start reading his book, [112]the master
   algorithm by prof. pedro domingos, a clear and accessible overview of
   machine learning.

   next, subscribe to more machine learning and data science podcasts!
   these are great, low-effort resources that you can casually learn more
   from. to [113]learn effectively, listen over time, with plenty of
   headspace. [114]do not speed up your podcasts!

   subscribe to [115]talking machines.

   i suggest this listening order:
     * download the [116]"starting simple" episode, and listen to that
       soon. it supports what we read from domingos. [117]ryan adams talks
       about starting simple, as we discussed above. adams also stresses
       the importance of feature engineering. feature engineering is an
       exercise of the "knowledge" domingos writes about. in a later
       episode, [118]they share many concrete tips for feature
       engineering.
     * then, over time, you can listen to the entire podcast series (start
       from the beginning).

   want to subscribe to more podcasts? here's [119]a good listicle of
   suggestions, [120]and another.

   ok! take a break, come back refreshed.
     __________________________________________________________________

play to learn

   next, pick one or two of these ipython notebooks and play along.
     * [121]face recognition on a subset of the labeled faces in the wild
     * [122]machine learning from disaster: using titanic data,
       "demonstrates basic data munging, analysis, and visualization
       techniques. shows examples of supervised machine learning
       techniques."
     * [123]election forecasting: a replication of the model [124]nate
       silver used to make predictions about the 2012 us presidential
       election for the new york times.
     * [125]an example machine learning notebook: "let's pretend we're
       working for a startup that just got funded to create a smartphone
       app that automatically identifies species of flowers from pictures
       taken on the smartphone. we've been tasked by our head of data
       science to create a demo machine learning model that takes four
       measurements from the flowers (sepal length, sepal width, petal
       length, and petal width) and identifies the species based on those
       measurements alone."
     * clicksecurity's "data hacking" series (thanks [126]hummus!)
          + [127]detect algorithmically generated domains
          + [128]detect sql injection
          + [129]java class file analysis: is this java code malicious or
            benign?
     * if you want more of a data science bent, pick a notebook from
       [130]this excellent list of data science ipython notebooks.
       "continually updated data science python notebooks: spark, hadoop
       mapreduce, hdfs, aws, kaggle, scikit-learn, matplotlib, pandas,
       numpy, scipy, and various command lines."
     * or more generic tutorials/overviews ...
          + [131]tutorial introduction to machine learning with sklearn
          + [132]an introduction to supervised learning via scikit learn
          + [133]an introduction to unsupervised learning via scikit learn

   there are more places to find great ipython notebooks:
     * [134]a gallery of interesting ipython notebooks (wiki page on
       github): statistics, machine learning and data science
     * [135]fabian pedregosa's larger, automatic gallery

   know another great notebook? please submit a pr!
     __________________________________________________________________

immerse yourself

   now you should be hooked, and hungry to learn more. pick one of the
   courses below and start on your way.

[136]recommended course: prof. andrew ng's machine learning on coursera

   [137]prof. andrew ng's [138]machine learning is a popular and esteemed
   free online course. i've seen it [139]recommended [140]often. [141]and
   [142]emphatically.

   it's helpful if you decide on a pet project to play around with, as you
   go, so you have a way to apply your knowledge. you could use one of
   these [143]awesome public datasets. and remember, ipython notebook is
   your friend.

   also, you should grab an in-depth textbook to use as a reference. the
   two best options are [144]understanding machine learning and
   [145]elements of statistical learning. you'll see these recommended as
   reference textbooks. [146]you only need to use one of the two options
   as your main reference; here's some context/comparison to help you pick
   which one is right for you. you can download each book free as pdfs at
   those links - so grab them!

tips for studying

     * busy schedule? read [147]ray li's review of prof. andrew ng's
       course for some helpful tips.
     * review some of the [148]"learning how to learn" videos. this is
       just about how to study in general. in the course, they
       [149]advocate the learn-by-doing approach, as we're doing here.
       you'll get various other tips that are easy to apply, but go a long
       way to make your time investment more effective.

other courses

   here are some other free online courses i've seen recommended. (machine
   learning, data science, and related topics.)
     * [150]prof. pedro domingos's introductory video series. domingos
       wrote the paper [151]"a few useful things to know about machine
       learning", recommended earlier in this guide.
     * kevin markham's video series, [152]intro to machine learning with
       scikit-learn, starts with what we've already covered, then
       continues on at a comfortable place. after the videos you could do
       markham's [153]general assembly's data science course. interactive.
       markham's course is also offered in-person in washington, dc.
     * [154]uc berkeley's data 8: the foundations of data science course
       and the textbook [155]computational and inferential thinking
       teaches critical concepts in data science.
          + the textbook also provides an academic definition of data
            science: "data science is about drawing useful conclusions
            from large and diverse data sets through exploration,
            prediction, and id136".
          + [156]foundations of data science online course based on data 8
            is now offered via edx too.
     * data science courses as ipython notebooks:
          + [157]practical data science
          + [158]learn data science (an entire self-directed course!)
          + supplementary material:
            [159]donnemartin/data-science-ipython-notebooks. "continually
            updated data science python notebooks: spark, hadoop
            mapreduce, hdfs, aws, kaggle, scikit-learn, matplotlib,
            pandas, numpy, scipy, and various command lines."
     * prof. mark a. girolami's [160]machine learning module (github
       mirror). good for people with a strong mathematics background.
     * surveys of data science courseware (a bit more choose your own
       adventure)
          + check out [161]jack golding's survey of data science
            courseware. includes coursera's [162]data science
            specialization with 9 courses in it. the specialization
            certificate isn't free, but you can take the courses 1-by-1
            for free if you don't care about the certificate. the survey
            also covers [163]harvard cs109 which i've seen recommended
            elsewhere.
          + [164]another epic quora thread: how can i become a data
            scientist?
          + data science weekly's [165]big list of data science resources
            has a [166]list of data science moocs
     * [167]advanced statistical computing (vanderbilt bios8366).
       interactive (lots of ipython notebook material)
     * [168]data science (harvard cs109)

getting help: questions, answers, chats

   start with the support forums and chats related to the course(s) you're
   taking.

   check out [169]datascience.stackexchange.com and
   [170]stats.stackexchange.com     such as the tag, machine-learning. there
   are some subreddits like [171]/r/machinelearning.

   there are also many relevant discussions on quora, for example:
   [172]what is the difference between data analytics, data analysis, data
   mining, data science, machine learning, and big data?

   for help and community in meatspace, seek out meetups. data science
   weekly's [173]big list of data science resources may help you.

supplement: learning pandas well

   you'll want to get more familiar with pandas.
     * essential: [174]10 minutes to pandas
     * essential: [175]things in pandas i wish i'd had known earlier
       (ipython notebook)
     * another helpful tutorial: [176]real world data cleanup with python
       and pandas
     * [177]video series from data school, about pandas. "reference guide
       to 30 common pandas tasks (plus 6 hours of supporting video)."
     * [178]useful pandas snippets
     * here are some docs i found especially helpful as i continued
       learning:
          + [179]cookbook
          + [180]data structures, esp. [181]dataframe section
          + [182]reshaping by pivoting dataframes
          + [183]computational tools and [184]stackexchange thread: "what
            is covariance in plain language?"
          + [185]group by (split, apply, and combine dataframes)
          + [186]visualizing your dataframes
     * bookmarks for later when you need to scale
          + [187]the odo library for converting between many formats.
          + [188]dask: a pandas-like interface, but for larger-than-memory
            data and "under the hood" parallelism. very interesting, but
            only needed when you're getting advanced.

supplement: cheat sheets

   some good cheat sheets i've come across. (please [189]submit a pull
   request to add other useful cheat sheets.)
     * [190]scikit-learn algorithm cheat sheet
     * [191]metacademy: a package manager for [machine learning]
       knowledge. a mind map of machine learning concepts, with great
       detail on each.
     * [192]matplotlib / pandas / python cheat sheets.

assorted opinions and other resources

more data science materials

   i'm not repeating the materials mentioned above, but here are some
   other data science resources:
     * extremely accessible data science book: [193]data smart by john
       foreman
     * [194]an entire self-directed course in data science, as a ipython
       notebook
     * [195]data science workflow: overview and challenges (read the
       article and also the comment by joseph mccarthy)
     * fun little ipython notebook: [196]web scraping indeed.com for key
       data science job skills
     * swami chandrasekaran's [197]"becoming a data scientist" is a
       concise, printable picture of a data science curriculum

bayesian statistics and machine learning

   from [198]the "bayesian machine learning" overview on metacademy:

     ... bayesian ideas have had a big impact in machine learning in the
     past 20 years or so because of the flexibility they provide in
     building structured models of real world phenomena. algorithmic
     advances and increasing computational resources have made it
     possible to fit rich, highly structured models which were previously
     considered intractable.

   you can learn more by studying one of the following resources. both
   resources use python, [199]pymc, and jupyter notebooks.
     * the free book, [200]probabilistic programming and bayesian methods
       for hackers. made with a "computation/understanding-first,
       mathematics-second point of view." it's available in print too!
     * [201]bayesian modelling in python

risks

   "machine learning systems automatically learn programs from data."
   pedro domingos, in [202]"a few useful things to know about machine
   learning." the programs you generate will require maintenance. like any
   way of creating programs faster, you can rack up [203]technical debt.

   here is the abstract of [204]machine learning: the high-interest credit
   card of technical debt:

     machine learning offers a fantastically powerful toolkit for
     building complex systems quickly. this paper argues that it is
     dangerous to think of these quick wins as coming for free. using the
     framework of technical debt, we note that it is remarkably easy to
     incur massive ongoing maintenance costs at the system level when
     applying machine learning. the goal of this paper is highlight
     several machine learning specific risk factors and design patterns
     to be avoided or refactored where possible. these include boundary
     erosion, entanglement, hidden feedback loops, undeclared consumers,
     data dependencies, changes in the external world, and a variety of
     system-level anti-patterns.

   if you're following this guide, you should read that paper. you can
   also [205]listen to a podcast episode interviewing one of the authors
   of this paper.

   a few more articles on the challenges running ml-powered systems in
   production:
     * [206]"rules of machine learning: best practices for [reliable] ml
       engineering," by martin zinkevich, regarding ml engineering
       practices and patterns in production at google. optional:
       [207]accompanying video.
     * [208]"what   s your ml test score? a rubric for ml production
       systems" by eric breck, shanqing cai, eric nielsen, michael salib,
       d. sculley, google.
     * [209]surviving data science "at the speed of hype" by john foreman,
       data scientist at mailchimp
     * [210]the high cost of maintaining machine learning systems
     * [211]11 clever methods of overfitting and how to avoid them
     * [212]the perilous world of machine learning for fun and profit:
       pipeline jungles and hidden feedback loops

welcome to the danger zone

   so you are dabbling with machine learning. you've got hacking skills.
   maybe you've got some "knowledge" in domingos' sense (some "substantive
   expertise" or "domain knowledge"). this diagram is modified slightly
   from drew conway's "data science venn diagram." it isn't a perfect fit
   for us, but it may get the point across:

   [213]drew conway's data science venn diagram, modified slightly

   please don't sell yourself as a machine learning expert while you're
   still in the danger zone. don't build bad products or publish junk
   science. (also please [214]don't be evil.) this guide can't tell you
   how you'll know you've "made it" into machine learning competence ...
   let alone expertise. it's hard to evaluate proficiency without schools
   or other institutions. this is a common problem for self-taught people.

towards expertise

   you need practice. [215]on hacker news, user olympus commented to say
   you could use competitions to practice and evaluate yourself.
   [216]kaggle and [217]chalearn are hubs for machine learning
   competitions. you can find some [218]examples of code for popular
   kaggle competitions here. for smaller exercises, [219]try hackerrank.

   you also need understanding. you should review what kaggle competition
   winners say about their solutions, [220]for example, the "no free
   hunch" blog. these might be over your head at first but once you're
   starting to understand and appreciate these, you know you're getting
   somewhere.

   competitions and challenges are just one way to practice. you shouldn't
   limit yourself, though - and you should also understand that
   [221]machine learning isn't all about kaggle competitions.

   here's a complementary way to practice: do practice studies.
    1. ask a question. start your own study. the [222]"most important
       thing in data science is the question" ([223]dr. jeff t. leek). so
       start with a question. then, find [224]real data. analyze it. then
       ...
    2. communicate results. when you have a novel finding, reach out for
       peer review.
    3. fix issues. learn. share what you learn.

   and repeat. re-phrasing this, it fits with the [225]scientific method:
   formulate a question (or problem statement), create a hypothesis,
   gather data, analyze the data, and communicate results. (you should
   [226]watch this video about the scientific method in data science,
   and/or [227]read this article.)

   how can you come up with interesting questions? here's one way. every
   sunday, [228]browse datasets and write down some questions. also, sign
   up for [229]data is plural, a newsletter of interesting datasets; look
   at these, datasets, and write down questions. stay curious. when a
   question inspires you, start a study.

   this advice, to do practice studies and learn from peer review, is
   based on [230]a conversation with [231]dr. randal s. olson. here's more
   advice from olson, [232]quoted with permission:

     i think the best advice is to tell people to always present their
     methods clearly and to avoid over-interpreting their results. part
     of being an expert is knowing that there's rarely a clear answer,
     especially when you're working with real data.

   as you repeat this process, your practice studies will become more
   scientific, interesting, and focused. the most important part of this
   process is peer review.

ask for peer review

   here are some communities where you can reach out for peer review:
     * [233]cross-validated: stats.stackexchange.com
     * [234]/r/dataisbeautiful
     * [235]/r/datascience
     * [236]/r/machinelearning
     * [237]hacker news: news.ycombinator.com. you'll probably want to
       submit as "show hn"

   post to any of those, and ask for feedback. you'll get feedback. you'll
   learn a ton. as experts review your work you will learn a lot about the
   field. you'll also be practicing a crucial skill: accepting critical
   feedback.

   when i read the feedback on my pull requests, first i repeat to myself,
   "i will not get defensive, i will not get defensive, i will not get
   defensive." you may want to do that before you read reviews of your
   machine learning work too.
     __________________________________________________________________

collaborate with domain experts!

   machine learning can be powerful, but it is not magic.

   whenever you apply machine learning to solve a problem, you are going
   to be working in some specific problem domain. to get good results, you
   or your team will need "substantive expertise" aka "domain knowledge."
   learn what you can, for yourself... but you should also collaborate.
   you'll have better results if you collaborate with domain experts.
   (what's a domain expert? see the [238]wikipedia entry, or [239]c2
   wiki's rather subjective but useful blurb.)

     a note about machine learning and user experience (ux)

   i couldn't say it better:

     machine learning won   t figure out what problems to solve. if you
     aren   t aligned with a human need, you   re just going to build a very
     powerful system to address a very small   or perhaps
     nonexistent   problem.

   quote is from [240]"the ux of ai" by josh lovejoy, whole article is a
   great read!

   in other words, [241]you are not the user.

   today we are [242]surrounded by software that utilizes machine
   learning. often, the results are directly user-facing, and intended to
   enhance ux.

   before you start working ml into your software, you should get a better
   understanding of ux, as well as how ml and ux can relate. as an
   informal way to get into this subject, start with this:
     * [243]rule #23 of martin zinkevich's rules of ml engineering: "you
       are not a typical end user."
     * there are some great [244]thoughtful discussions of this on quora

   then, if you you know a coworker or friend who works in ux, take them
   out for coffee or lunch and pick their brain. i think they'll have
   words of encouragement as well as caution. you won't be an expert by
   any means, but maybe it'll help you konw if/when to reach out for help,
   review, or guidance.

   spoiler: you should work with ux specialists whenever you can!

     a note about machine learning and security (infosec, appsec)

   there was a great blackhat webcast on this topic, [245]secure because
   math: understanding machine learning-based security products. slides
   are [246]here, [247]video recording is here. if you're using ml to
   recommend some media, overfitting could be harid113ss. if you're relying
   on ml to protect from threats, overfitting could be downright
   dangerous. check the full presentation if you are interested in this
   space.

   if you want to explore this space more deeply, there is a lot of
   reading material in the below links:
     * [248]security data science and machine learning guide
     * [249]awesome ml for cybersecurity
     * [250]awesome ai security
     * [251]awesome adversarial machine learning
     __________________________________________________________________

deep learning

   in early editions of this guide, there was no specific "deep learning"
   section. i omitted it intentionally. i think it is not effective for us
   to jump too far ahead. i also know that if you become an expert in
   traditional machine learning, you'll be capable of moving onto advanced
   subjects like deep learning, whether or not i've put that in this
   guide. we're just trying to get you started here!

   maybe this is a way to check your progress: ask yourself, does deep
   learning seem like magic? if so, take that as a sign that you aren't
   ready to work with it professionally. let the fascination motivate you
   to learn more. i have read some argue you can learn deep learning in
   isolation; i have read others recommend it's best to master traditional
   machine learning first. why not start with traditional machine
   learning, and develop your reasoning and intuition there? you'll only
   have an easier time learning deep learning after that. after all of it,
   you'll able to tackle all sorts of interesting problems.

   in any case, when you decide you're ready to dive into deep learning,
   here are some helpful resources.
     * [252]"have fun with [deep] learning" by david humphrey. this is an
       excellent way to "get ahead of yourself" and hack-first. then you
       will feel excited to move onto...
     * [253]prof. andrew ng's [254]courses on deep learning! there five
       courses, as part of the [255]deep learning specialization on
       coursera. these courses are part of his new venture,
       [256]deeplearning.ai
     * [257]machine learning crash course from google. google's
       fast-paced, practical introduction to machine learning which covers
       building deep neural networks with tensorflow.
     * [258]deep learning, a free book published mit press. by ian
       goodfellow, yoshua bengio and aaron courville
     * [259]yerevann's deep learning guide
     * [260]quora: "what are the best ways to pick up deep learning skills
       as an engineer?"     answered by greg brockman (co-founder & cto at
       openai, previously cto at stripe)
     * [261]sonnet - a python library built on top of tensorflow for
       building complex neural networks. made by google deepmind.
     * [262]build a deep learning model in 15 minutes using [263]lore.

"big" data?

   scaling data analysis is a familiar problem now, and there's no
   shortage of ways to address it. [264]beware needless hype and companies
   selling you flashy, proprietary solutions. you can do it all with
   open-source tools. even if "buy" instead of "build," you may want to
   buy from vendors who use known good stacks. no news here.

   there are [265]other lists of awesome machine learning tools, so i
   won't re-do all that. but in the big data section, i would be remiss if
   i didn't mention...
     * [266]apache spark. "mllib is apache spark's scalable machine
       learning library."
          + aside from the scalability, spark has great apis. and what's
            more, [267]spark has dataframes and easy co-operability with
            pandas!
          + berkeley has [268]a course on scalable machine learning,
            focusing on apache spark.

   if you are working with data-intensive applications at all, i'll
   recommend this book:
     * [269]designing data-intensive applications by martin kleppman. (you
       can start reading it online, free, via safari books.) it's not
       specific to machine learning, but you can bridge that gap yourself.

   lastly, here are some other useful links regarding big data and ml.
     * [270]10 things statistics taught us about big data analysis (and
       some more food for thought: [271]"what statisticians think about
       data scientists")
     * [272]"talking machines" #12: interviews prof. andrew ng (from
       [273]our main course, which has its own module on big data); this
       episode covers some problems relevant to high-dimensional data

     * [274]"talking machines" #15: "really really big data and machine
       learning in business"
     * free ebook, [275]getting data right: tackling the challenges of big
       data volume and variety by michael stonebraker, tom davenport,
       james markarian, and others, published by o'reilly. you can
       [276]listen to an accompanying podcast too.
     __________________________________________________________________

finding open-source libraries

     * bookmark [277]awesome-machine-learning, a curated list of
       [278]awesome machine learning libraries and software.
     * bookmark [279]pythonidae, a curated list of [280]awesome libraries
       and software in the python language - with a section on machine
       learning.
     * [281]tensorflow has been a [282]really big deal. people like you
       will do exciting things with tensorflow. it's a framework.
       frameworks can help you manage complexity. just remember this rule
       of thumb: "more data beats a cleverer algorithm" (domingos), no
       matter how cool your tools are. also note, tensorflow is not the
       only machine learning framework of its kind: [283]check this great,
       detailed comparison of tensorflow, torch, and theano. see also
       [284]newmu/theano-tutorials and [285]nlintz/tensorflow-tutorials.
       see also the section on deep learning above.
          + also, consider [286]lore. "lore is a python framework to make
            machine learning [especially deep learning] approachable for
            engineers and maintainable for data scientists."
     * for machine-learning libraries that might not be on pypi, github,
       etc., there's [287]mloss (machine learning open source software).
       seems to feature many academic libraries.
     * bookmark [288]julia.jl, a curated list of [289]awesome libraries
       and software in the julia language - with a section on machine
       learning.
     * [290]creativeai.net. ok not exactly about libraries, but this is
       often intriguing, and worth subscribing to ... warning, it's easy
       to get sucked in :)
     __________________________________________________________________

alternative ways to "dive into machine learning"

   here are some other guides to machine learning. they can be
   alternatives or complements to this guide.
     * [291]"how would your curriculum for a machine learning beginner
       look like?" by sebastian raschka. a selection of the core online
       courses and books for getting started with machine learning and
       gaining expert knowledge. it contextualizes raschka's own book,
       [292]python machine learning (which i would have linked to anyway!)
       see also [293]pattern_classification github repository maintained
       by the author, which contains ipython notebooks about various
       machine learning algorithms and various data science related
       resources.
     * [294]materials for learning machine learning by jack simpson
     * courses by cloud vendors (may be specific to their tools/platforms)
          + [295]machine learning crash course from google with tensorflow
            apis. this is google's fast-paced, practical introduction to
            machine learning which features a series of lessons with video
            lectures, real-world case studies, and hands-on practice
            exercises.
          + [296]amazon aws amazon have open up their internal training to
            the public and also offer certification. 30 courses - 45+
            hours of content.
     * [297]machine learning for developers is another good introduction,
       perhaps better if you're more familiar with java or scala. it
       introduces machine learning for a developer audience using smile, a
       machine learning library that can be used both in java and scala.
     * [298]example machine learning notebook, exercise, and guide by dr.
       randal s. olson. mentioned in notebooks section as well, but it has
       a similar goal to this guide (introduce you, and show you where to
       go next). rich "further reading" section.
     * [299]machine learning for software engineers by nam vu. it   s the
       top-down and results-first approach designed for software
       engineers.
     * for some news sources to follow, check out [300]sam debrule's list
       here.
     * [301]distill is a journal devoted to clear and interactive
       explanations of the lastest research in machine learning. they
       offer an alternative to traditional academic publishing that
       promotes accessibility and transparency in the field.
     * [your guide here]

     *    2019 github, inc.
     * [302]terms
     * [303]privacy
     * [304]security
     * [305]status
     * [306]help

     * [307]contact github
     * [308]pricing
     * [309]api
     * [310]training
     * [311]blog
     * [312]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [313]reload to refresh your
   session. you signed out in another tab or window. [314]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/hangtwenty/dive-into-machine-learning/commits/master.atom
   3. https://github.com/hangtwenty/dive-into-machine-learning#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/hangtwenty/dive-into-machine-learning
  32. https://github.com/join
  33. https://github.com/login?return_to=/hangtwenty/dive-into-machine-learning
  34. https://github.com/hangtwenty/dive-into-machine-learning/watchers
  35. https://github.com/login?return_to=/hangtwenty/dive-into-machine-learning
  36. https://github.com/hangtwenty/dive-into-machine-learning/stargazers
  37. https://github.com/login?return_to=/hangtwenty/dive-into-machine-learning
  38. https://github.com/hangtwenty/dive-into-machine-learning/network/members
  39. https://github.com/hangtwenty
  40. https://github.com/hangtwenty/dive-into-machine-learning
  41. https://github.com/hangtwenty/dive-into-machine-learning
  42. https://github.com/hangtwenty/dive-into-machine-learning/issues
  43. https://github.com/hangtwenty/dive-into-machine-learning/pulls
  44. https://github.com/hangtwenty/dive-into-machine-learning/projects
  45. https://github.com/hangtwenty/dive-into-machine-learning/pulse
  46. https://github.com/join?source=prompt-code
  47. http://hangtwenty.github.io/dive-into-machine-learning/
  48. https://github.com/topics/machine-learning
  49. https://github.com/topics/data-science
  50. https://github.com/topics/scikit-learn
  51. https://github.com/topics/ipython-notebook
  52. https://github.com/topics/deep-learning
  53. https://github.com/topics/jupyter-notebook
  54. https://github.com/topics/python
  55. https://github.com/topics/courses
  56. https://github.com/topics/learning
  57. https://github.com/topics/learning-by-doing
  58. https://github.com/topics/diy
  59. https://github.com/hangtwenty/dive-into-machine-learning/commits/master
  60. https://github.com/hangtwenty/dive-into-machine-learning/branches
  61. https://github.com/hangtwenty/dive-into-machine-learning/releases
  62. https://github.com/hangtwenty/dive-into-machine-learning/graphs/contributors
  63. https://github.com/hangtwenty/dive-into-machine-learning/blob/master/license
  64. https://github.com/hangtwenty/dive-into-machine-learning/find/master
  65. https://github.com/hangtwenty/dive-into-machine-learning/archive/master.zip
  66. https://github.com/login?return_to=https://github.com/hangtwenty/dive-into-machine-learning
  67. https://github.com/join?return_to=/hangtwenty/dive-into-machine-learning
  68. https://desktop.github.com/
  69. https://desktop.github.com/
  70. https://developer.apple.com/xcode/
  71. https://visualstudio.github.com/
  72. https://github.com/hangtwenty
  73. https://github.com/hangtwenty/dive-into-machine-learning/commits?author=hangtwenty
  74. https://github.com/hangtwenty/dive-into-machine-learning/commit/c34120b38e9bf03f183b229a5774453c5c0e6b68
  75. https://github.com/hangtwenty/dive-into-machine-learning/commit/c34120b38e9bf03f183b229a5774453c5c0e6b68
  76. https://github.com/hangtwenty/dive-into-machine-learning/tree/c34120b38e9bf03f183b229a5774453c5c0e6b68
  77. https://github.com/hangtwenty/dive-into-machine-learning/blob/master/.travis.yml
  78. https://github.com/hangtwenty/dive-into-machine-learning/blob/master/license
  79. https://github.com/hangtwenty/dive-into-machine-learning/commit/15d8afdd1c1cd4b8ad245079fba9aa1f819534f1
  80. https://github.com/hangtwenty/dive-into-machine-learning/blob/master/readme.md
  81. https://github.com/hangtwenty/dive-into-machine-learning/blob/master/_config.yml
  82. https://creativecommons.org/licenses/by/4.0/
  83. https://github.com/sindresorhus/awesome
  84. https://en.wikipedia.org/wiki/machine_learning
  85. https://github.com/hangtwenty/python-is-for-lovers
  86. http://www.quora.com/what-is-the-difference-between-data-analytics-data-analysis-data-mining-data-science-machine-learning-and-big-data-1
  87. https://www.python.org/
  88. http://ipython.org/
  89. https://www.anaconda.com/download/
  90. https://conda.io/docs/commands.html#conda-vs-pip-vs-virtualenv-commands
  91. http://opentechschool.github.io/python-data-intro/core/notebook.html
  92. https://www.youtube.com/watch?v=qb7ft68tca8
  93. http://scikit-learn.org/stable/tutorial/basic/tutorial.html
  94. http://scikit-learn.org/stable/tutorial/basic/tutorial.html
  95. http://scikit-learn.org/stable/index.html
  96. http://scikit-learn.org/stable/index.html
  97. http://scikit-learn.org/stable/testimonials/testimonials.html
  98. http://scikit-learn.org/stable/index.html
  99. http://www.r2d3.us/visual-intro-to-machine-learning-part-1/
 100. https://twitter.com/stephaniejyee
 101. https://twitter.com/tonyhschu/
 102. http://www.r2d3.us/visual-intro-to-machine-learning-part-1/
 103. http://homes.cs.washington.edu/~pedrod/papers/cacm12.pdf
 104. https://homes.cs.washington.edu/~pedrod/
 105. http://www.artima.com/intv/simplest3.html
 106. http://wiki.c2.com/?dosimplethings
 107. https://www.thetalkingmachines.com/episodes/software-and-statistics-machine-learning
 108. https://user-images.githubusercontent.com/2420688/29441212-798d2bba-837e-11e7-90b1-21daaf8d7b73.png
 109. https://www.youtube.com/watch?v=tyvcvzejhhq
 110. https://dataskeptic.com/blog/episodes/2018/the-master-algorithm
 111. http://homes.cs.washington.edu/~pedrod/papers/cacm12.pdf
 112. https://www.goodreads.com/book/show/24612233-the-master-algorithm
 113. https://www.coursera.org/learn/learning-how-to-learn
 114. https://www.theringer.com/2017/8/2/16095364/inefficiency-week-podcasts-speed-comprehension-f0ea43949e42
 115. http://www.thetalkingmachines.com/
 116. http://www.thetalkingmachines.com/episodes/starting-simple-and-machine-learning-meds
 117. http://people.seas.harvard.edu/~rpa/
 118. https://www.thetalkingmachines.com/episodes/software-and-statistics-machine-learning
 119. https://towardsdatascience.com/5-data-science-ai-and-machine-learning-podcasts-to-listen-to-now-e5078b18d184
 120. https://mty.ai/blog/the-best-ai-podcasts/
 121. http://nbviewer.jupyter.org/github/ogrisel/notebooks/blob/master/labeled faces in the wild recognition.ipynb
 122. http://agconti.github.io/kaggle-titanic/
 123. https://github.com/jseabold/538model
 124. https://fivethirtyeight.com/contributors/nate-silver/
 125. https://github.com/rhiever/data-analysis-and-machine-learning-projects/blob/master/example-data-science-notebook/example machine learning notebook.ipynb
 126. https://github.com/hummus
 127. http://nbviewer.jupyter.org/github/clicksecurity/data_hacking/blob/master/dga_detection/dga_domain_detection.ipynb
 128. http://nbviewer.jupyter.org/github/clicksecurity/data_hacking/blob/master/sql_injection/sql_injection.ipynb
 129. http://nbviewer.jupyter.org/github/clicksecurity/data_hacking/blob/master/java_classification/java_classification.ipynb
 130. https://github.com/donnemartin/data-science-ipython-notebooks
 131. http://amueller.github.io/sklearn_tutorial/
 132. http://bugra.github.io/work/notes/2014-11-22/an-introduction-to-supervised-learning-scikit-learn/
 133. http://bugra.github.io/work/notes/2014-11-16/an-introduction-to-unsupervised-learning-scikit-learn/
 134. https://github.com/ipython/ipython/wiki/a-gallery-of-interesting-ipython-notebooks#statistics-machine-learning-and-data-science
 135. https://web.archive.org/web/20180227081121/http://nb.bianp.net/sort/views/
 136. https://www.coursera.org/learn/machine-learning
 137. http://www.andrewng.org/about/
 138. https://www.coursera.org/learn/machine-learning
 139. https://www.quora.com/how-do-i-learn-machine-learning-1/answer/cory-hicks-1
 140. https://www.coursetalk.com/providers/coursera/courses/machine-learning?page=1&sort=-content_rating#reviews
 141. https://www.quora.com/how-do-i-learn-machine-learning-1/answer/xavier-amatriain
 142. https://www.forbes.com/sites/anthonykosner/2013/12/29/why-is-machine-learning-cs-229-the-most-popular-course-at-stanford/
 143. https://github.com/caesar0301/awesome-public-datasets
 144. http://www.cs.huji.ac.il/~shais/understandingmachinelearning/copy.html
 145. https://web.stanford.edu/~hastie/papers/eslii.pdf
 146. https://github.com/hangtwenty/dive-into-machine-learning/issues/29
 147. https://rayli.net/blog/data/coursera-machine-learning-review/
 148. https://www.coursera.org/learn/learning-how-to-learn/
 149. https://www.coursera.org/learn/learning-how-to-learn/lecture/8iubh/interview-with-dr-terrence-sejnowski
 150. https://homes.cs.washington.edu/~pedrod/
 151. https://homes.cs.washington.edu/~pedrod/papers/cacm12.pdf
 152. http://blog.kaggle.com/2015/04/08/new-video-series-introduction-to-machine-learning-with-scikit-learn/
 153. https://github.com/justmarkham/dat8
 154. http://data8.org/
 155. https://www.inferentialthinking.com/
 156. https://www.edx.org/professional-certificate/berkeleyx-foundations-of-data-science
 157. http://radimrehurek.com/data_science_python/
 158. http://learnds.com/
 159. https://github.com/donnemartin/data-science-ipython-notebooks
 160. https://github.com/josephmisiti/machine-learning-module
 161. https://www.quora.com/is-it-worth-it-to-pay-9-*-49-for-a-data-science-specialization-on-coursera/answer/jack-golding
 162. https://www.coursera.org/specializations/jhu-data-science
 163. http://cs109.github.io/2014/
 164. https://www.quora.com/how-can-i-become-a-data-scientist?redirected_qid=59455
 165. https://www.datascienceweekly.org/data-science-resources/the-big-list-of-data-science-resources
 166. https://www.datascienceweekly.org/data-science-resources/data-science-moocs
 167. http://strongid136.com/bios8366/lectures.html
 168. http://cs109.github.io/2014/
 169. https://datascience.stackexchange.com/
 170. https://stats.stackexchange.com/questions/tagged/machine-learning?sort=frequent&pagesize=15
 171. https://www.reddit.com/r/machinelearning
 172. http://www.quora.com/what-is-the-difference-between-data-analytics-data-analysis-data-mining-data-science-machine-learning-and-big-data-1
 173. http://www.datascienceweekly.org/data-science-resources/the-big-list-of-data-science-resources
 174. http://pandas.pydata.org/pandas-docs/stable/10min.html
 175. http://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/things_in_pandas.ipynb
 176. https://trendct.org/2016/08/05/real-world-data-cleanup-with-python-and-pandas/
 177. https://www.youtube.com/playlist?list=pl5-da3qgb5icid19w1mxlz0hq8ll5u3u9y
 178. http://www.swegler.com/becky/blog/2014/08/06/useful-pandas-snippets/
 179. http://pandas.pydata.org/pandas-docs/stable/cookbook.html
 180. http://pandas.pydata.org/pandas-docs/stable/dsintro.html
 181. http://pandas.pydata.org/pandas-docs/stable/dsintro.html#dataframe
 182. http://pandas.pydata.org/pandas-docs/version/0.15.0/reshaping.html
 183. http://pandas.pydata.org/pandas-docs/stable/computation.html
 184. https://stats.stackexchange.com/questions/29713/what-is-covariance-in-plain-language
 185. http://pandas.pydata.org/pandas-docs/stable/groupby.html
 186. http://pandas.pydata.org/pandas-docs/version/0.15.0/visualization.html
 187. http://odo.readthedocs.io/
 188. https://dask.org/
 189. https://github.com/hangtwenty/dive-into-machine-learning/pulls
 190. http://scikit-learn.org/stable/tutorial/machine_learning_map/
 191. http://hunch.net/?p=2714
 192. https://drive.google.com/drive/folders/0byirjae4kmttaghrcxkxnhhmy2m
 193. http://www.john-foreman.com/data-smart-book.html
 194. http://learnds.com/
 195. https://cacm.acm.org/blogs/blog-cacm/169199-data-science-workflow-overview-and-challenges/fulltext
 196. http://nbviewer.jupyter.org/github/jmsteinw/notebooks/blob/master/indeedjobs.ipynb
 197. http://nirvacana.com/thoughts/becoming-a-data-scientist/
 198. https://metacademy.org/roadmaps/rgrosse/bayesian_machine_learning
 199. https://github.com/pymc-devs/pymc
 200. http://camdavidsonpilon.github.io/probabilistic-programming-and-bayesian-methods-for-hackers/
 201. https://github.com/markdregan/bayesian-modelling-in-python
 202. http://homes.cs.washington.edu/~pedrod/papers/cacm12.pdf
 203. https://en.wikipedia.org/wiki/technical_debt
 204. https://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/43146.pdf
 205. https://softwareengineeringdaily.com/2015/11/17/machine-learning-and-technical-debt-with-d-sculley/
 206. http://martin.zinkevich.org/rules_of_ml/rules_of_ml.pdf
 207. http://cs.stanford.edu/~jsteinhardt/wildml2016nips/videos/1_2_martin.wmv
 208. https://0586f9b3-a-62cb3a1a-s-sites.googlegroups.com/site/wildml2016nips/sculleypaper1.pdf?attachauth=anoy7crrjdpoelseeyopu-wr0ev9engf3cm9lks0pab4j-ndquw9ge426ug2hm-0bz7qjjtlhvtpgwbp6zfnyye_2gwku5ackczaiukcthq9nt0jegpel5tct3apmscxkks8htqhjz-wen6vbq9xehh_m5heg49ozxsiigmzx7pvikxpnvvidoblnymvqokxuvx0-xnqthxu9cjewqh25vowdpji-vql1w==&attredirects=0
 209. http://www.john-foreman.com/blog/surviving-data-science-at-the-speed-of-hype
 210. http://www.kdnuggets.com/2015/01/high-cost-machine-learning-technical-debt.html
 211. http://hunch.net/?p=22
 212. http://www.john-foreman.com/blog/the-perilous-world-of-machine-learning-for-fun-and-profit-pipeline-jungles-and-hidden-feedback-loops
 213. http://drewconway.com/zia/2013/3/26/the-data-science-venn-diagram
 214. https://arstechnica.co.uk/security/2016/02/the-nsas-skynet-program-may-be-killing-thousands-of-innocent-people/
 215. https://news.ycombinator.com/item?id=10508565
 216. https://www.kaggle.com/competitions
 217. http://www.chalearn.org/
 218. https://github.com/apeeyush/machine-learning
 219. https://www.hackerrank.com/domains/ai/machine-learning/page/1
 220. http://blog.kaggle.com/
 221. https://jvns.ca/blog/2014/06/19/machine-learning-isnt-kaggle-competitions
 222. https://github.com/datasciencespecialization/courses/blob/master/01_datascientisttoolbox/03_02_whatisdata/index.rmd#the-data-is-the-second-most-important-thing
 223. https://github.com/jtleek
 224. https://github.com/caesar0301/awesome-public-datasets
 225. https://en.wikipedia.org/wiki/scientific_method
 226. http://101.datascience.community/2012/06/27/the-data-scientific-method/
 227. http://customerthink.com/getting-insights-using-data-science-skills-and-the-scientific-method/
 228. https://github.com/caesar0301/awesome-public-datasets
 229. https://tinyletter.com/data-is-plural
 230. https://github.com/hangtwenty/dive-into-machine-learning/issues/11#issuecomment-153934120
 231. http://www.randalolson.com/
 232. https://github.com/hangtwenty/dive-into-machine-learning/issues/11#issuecomment-154135498
 233. https://stats.stackexchange.com/
 234. https://reddit.com/r/dataisbeautiful
 235. https://reddit.com/r/datascience
 236. https://reddit.com/r/machinelearning
 237. https://news.ycombinator.com/
 238. https://en.wikipedia.org/wiki/subject-matter_expert
 239. http://wiki.c2.com/?domainexpert
 240. https://design.google/library/ux-ai/
 241. https://www.nngroup.com/articles/false-consensus/
 242. https://en.wikipedia.org/wiki/machine_learning#applications
 243. https://developers.google.com/machine-learning/guides/rules-of-ml/#human_analysis_of_the_system
 244. https://www.quora.com/search?q=machine+learning+ux
 245. https://www.blackhat.com/html/webcast/02192015-secure-because-math.html
 246. https://www.blackhat.com/html/webcast/02192015-secure-because-math.html
 247. https://attendee.gotowebinar.com/recording/80449431422110210
 248. http://www.covert.io/the-definitive-security-datascience-and-machinelearning-guide/
 249. https://github.com/jivoi/awesome-ml-for-cybersecurity
 250. https://github.com/randomadversary/awesome-ai-security
 251. https://github.com/yenchenlin/awesome-adversarial-machine-learning
 252. https://github.com/humphd/have-fun-with-machine-learning
 253. https://www.andrewng.org/about/
 254. https://www.coursera.org/specializations/deep-learning
 255. https://www.coursera.org/specializations/deep-learning
 256. https://www.deeplearning.ai/
 257. https://developers.google.com/machine-learning/crash-course/
 258. http://www.deeplearningbook.org/
 259. http://yerevann.com/a-guide-to-deep-learning/
 260. https://www.quora.com/what-are-the-best-ways-to-pick-up-deep-learning-skills-as-an-engineer
 261. https://github.com/deepmind/sonnet
 262. https://tech.instacart.com/how-to-build-a-deep-learning-model-in-15-minutes-a3684c6f71e
 263. https://github.com/instacart/lore/
 264. http://www.john-foreman.com/blog/surviving-data-science-at-the-speed-of-hype
 265. https://github.com/josephmisiti/awesome-machine-learning
 266. https://spark.apache.org/mllib/
 267. https://databricks.com/blog/2015/02/17/introducing-dataframes-in-spark-for-large-scale-data-science.html
 268. https://www.edx.org/course/scalable-machine-learning-uc-berkeleyx-cs190-1x#.voc70vpf_lq
 269. http://dataintensive.net/
 270. https://simplystatistics.org/2014/05/22/10-things-statistics-taught-us-about-big-data-analysis/
 271. http://www.datasciencecentral.com/profiles/blogs/what-statisticians-think-about-data-scientists
 272. http://www.thetalkingmachines.com/blog/2015/6/4/the-economic-impact-of-machine-learning-and-using-the-kernel-trick-to-dig-in-to-big-data
 273. https://www.coursera.org/learn/machine-learning
 274. http://www.thetalkingmachines.com/blog/2015/7/16/really-really-big-data-and-machine-learning-in-business
 275. https://www.tamr.com/landing-pages/getting-data-right/
 276. http://radar.oreilly.com/2015/06/the-future-of-data-at-scale.html
 277. https://github.com/josephmisiti/awesome-machine-learning
 278. https://github.com/bayandin/awesome-awesomeness
 279. https://github.com/svaksha/pythonidae/blob/master/ai.md#machine-learning
 280. https://github.com/bayandin/awesome-awesomeness
 281. https://www.tensorflow.org/
 282. https://news.ycombinator.com/item?id=10532957
 283. https://github.com/zer0n/deepframeworks
 284. https://github.com/newmu/theano-tutorials
 285. https://github.com/nlintz/tensorflow-tutorials
 286. https://github.com/instacart/lore/
 287. http://mloss.org/software/
 288. https://github.com/svaksha/julia.jl/blob/master/ai.md#machine-learning
 289. https://github.com/bayandin/awesome-awesomeness
 290. http://www.creativeai.net/
 291. https://sebastianraschka.com/faq/docs/ml-curriculum.html
 292. https://github.com/rasbt/python-machine-learning-book
 293. https://github.com/rasbt/pattern_classification
 294. http://jacksimpson.co/materials-for-learning-machine-learning/
 295. https://developers.google.com/machine-learning/crash-course/
 296. https://aws.amazon.com/training/learning-paths/machine-learning/
 297. http://xyclade.github.io/machinelearning/
 298. https://github.com/rhiever/data-analysis-and-machine-learning-projects/blob/master/example-data-science-notebook/example machine learning notebook.ipynb
 299. https://github.com/zuzoovn/machine-learning-for-software-engineers
 300. https://machinelearnings.co/a-humans-guide-to-machine-learning-e179f43b67a0
 301. https://distill.pub/about/
 302. https://github.com/site/terms
 303. https://github.com/site/privacy
 304. https://github.com/security
 305. https://githubstatus.com/
 306. https://help.github.com/
 307. https://github.com/contact
 308. https://github.com/pricing
 309. https://developer.github.com/
 310. https://training.github.com/
 311. https://github.blog/
 312. https://github.com/about
 313. https://github.com/hangtwenty/dive-into-machine-learning
 314. https://github.com/hangtwenty/dive-into-machine-learning

   hidden links:
 316. https://github.com/
 317. https://github.com/hangtwenty/dive-into-machine-learning
 318. https://github.com/hangtwenty/dive-into-machine-learning
 319. https://github.com/hangtwenty/dive-into-machine-learning
 320. https://help.github.com/articles/which-remote-url-should-i-use
 321. https://github.com/hangtwenty/dive-into-machine-learning#dive-into-machine-learning--
 322. https://github.com/hangtwenty/dive-into-machine-learning#get-your-feet-wet
 323. https://github.com/hangtwenty/dive-into-machine-learning#tools-youll-need
 324. https://github.com/hangtwenty/dive-into-machine-learning#lets-go
 325. https://github.com/hangtwenty/dive-into-machine-learning#what-just-happened
 326. https://github.com/hangtwenty/dive-into-machine-learning#dive-in
 327. https://github.com/hangtwenty/dive-into-machine-learning#a-visual-introduction-to-machine-learning
 328. https://github.com/hangtwenty/dive-into-machine-learning#a-few-useful-things-to-know-about-machine-learning
 329. https://github.com/hangtwenty/dive-into-machine-learning#just-about-time-for-a-break
 330. https://github.com/hangtwenty/dive-into-machine-learning#play-to-learn
 331. https://github.com/hangtwenty/dive-into-machine-learning#immerse-yourself
 332. https://github.com/hangtwenty/dive-into-machine-learning#recommended-course-prof-andrew-ngs-machine-learning-on-coursera
 333. https://github.com/hangtwenty/dive-into-machine-learning#tips-for-studying
 334. https://github.com/hangtwenty/dive-into-machine-learning#other-courses
 335. https://github.com/hangtwenty/dive-into-machine-learning#getting-help-questions-answers-chats
 336. https://github.com/hangtwenty/dive-into-machine-learning#supplement-learning-pandas-well
 337. https://github.com/hangtwenty/dive-into-machine-learning#supplement-cheat-sheets
 338. https://github.com/hangtwenty/dive-into-machine-learning#assorted-opinions-and-other-resources
 339. https://github.com/hangtwenty/dive-into-machine-learning#more-data-science-materials
 340. https://github.com/hangtwenty/dive-into-machine-learning#bayesian-statistics-and-machine-learning
 341. https://github.com/hangtwenty/dive-into-machine-learning#risks
 342. https://github.com/hangtwenty/dive-into-machine-learning#welcome-to-the-danger-zone
 343. https://github.com/hangtwenty/dive-into-machine-learning#towards-expertise
 344. https://github.com/hangtwenty/dive-into-machine-learning#ask-for-peer-review
 345. https://github.com/hangtwenty/dive-into-machine-learning#collaborate-with-domain-experts
 346. https://github.com/hangtwenty/dive-into-machine-learning#bow-a-note-about-machine-learning-and-user-experience-ux
 347. https://github.com/hangtwenty/dive-into-machine-learning#bow-a-note-about-machine-learning-and-security-infosec-appsec
 348. https://github.com/hangtwenty/dive-into-machine-learning#deep-learning
 349. https://github.com/hangtwenty/dive-into-machine-learning#big-data
 350. https://github.com/hangtwenty/dive-into-machine-learning#finding-open-source-libraries
 351. https://github.com/hangtwenty/dive-into-machine-learning#alternative-ways-to-dive-into-machine-learning
 352. https://github.com/
