   (button) toggle navigation
   [1][nav_logo.svg?v=479cefe8d932fb14a67b93911b97d70f]
     * [2]jupyter
     * [3]faq
     * [4]view as code
     * [5]python 2 kernel
     * [6]view on github
     * [7]execute on binder
     * [8]download notebook

    1. [9]python_reference
    2. [10]tutorials

   [11]sebastian raschka

   last updated 07/02/2016
     * [12]open in ipython nbviewer
     * [13]link to this ipython notebook on github
     * [14]link to the github repository python_reference
     __________________________________________________________________

   i would be happy to hear your comments and suggestions.
   please feel free to drop me a note via [15]twitter, [16]email, or
   [17]google+.
     __________________________________________________________________

key differences between python 2.7.x and python 3.x[18]  

   many beginning python users are wondering with which version of python
   they should start. my answer to this question is usually something
   along the lines "just go with the version your favorite tutorial was
   written in, and check out the differences later on."

   but what if you are starting a new project and have the choice to pick?
   i would say there is currently no "right" or "wrong" as long as both
   python 2.7.x and python 3.x support the libraries that you are planning
   to use. however, it is worthwhile to have a look at the major
   differences between those two most popular versions of python to avoid
   common pitfalls when writing the code for either one of them, or if you
   are planning to port your project.

sections[19]  

     * [20]using the __future__ module
     * [21]the print function
     * [22]integer division
     * [23]unicode
     * [24]xrange
     * [25]raising exceptions
     * [26]handling exceptions
     * [27]the next() function and .next() method
     * [28]for-loop variables and the global namespace leak
     * [29]comparing unorderable types
     * [30]parsing user inputs via input()
     * [31]returning iterable objects instead of lists
     * [32]banker's rounding
     * [33]more articles about python 2 and python 3

the __future__ module[34]  

   python 3.x introduced some python 2-incompatible keywords and features
   that can be imported via the in-built __future__ module in python 2. it
   is recommended to use __future__ imports it if you are planning python
   3.x support for your code. for example, if we want python 3.x's integer
   division behavior in python 2, we can import it via
from __future__ import division


   more features that can be imported from the __future__ module are
   listed in the table below:

   feature optional in mandatory in effect

   nested_scopes

   2.1.0b1

   2.2

   [35]pep 227: statically nested scopes </tr>

   generators

   2.2.0a1

   2.3

   [36]pep 255: simple generators </tr>

   division

   2.2.0a2

   3.0

   [37]pep 238: changing the division operator </tr>

   absolute_import

   2.5.0a1

   3.0

   [38]pep 328: imports: multi-line and absolute/relative </tr>

   with_statement

   2.5.0a1

   2.6

   [39]pep 343: the    with    statement </tr>

   print_function

   2.6.0a2

   3.0

   [40]pep 3105: make print a function </tr>

   unicode_literals

   2.6.0a2

   3.0

   [41]pep 3112: bytes literals in python 3000 </tr> </table>

                                  (source:
   [https://docs.python.org/2/library/__future__.html](https://docs.python
             .org/2/library/__future__.html#module-__future__))

   in [1]:
from platform import python_version

the print function[42]  

   [[43]back to the section-overview]

   very trivial, and the change in the print-syntax is probably the most
   widely known change, but still it is worth mentioning: python 2's print
   statement has been replaced by the print() function, meaning that we
   have to wrap the object that we want to print in parantheses.

   python 2 doesn't have a problem with additional parantheses, but in
   contrast, python 3 would raise a syntaxerror if we called the print
   function the python 2-way without the parentheses.

python 2[44]  

   in [3]:
print 'python', python_version()
print 'hello, world!'
print('hello, world!')
print "text", ; print 'print more text on the same line'

python 2.7.6
hello, world!
hello, world!
text print more text on the same line

python 3[45]  

   in [2]:
print('python', python_version())
print('hello, world!')

print("some text,", end="")
print(' print more text on the same line')

python 3.4.1
hello, world!
some text, print more text on the same line

   in [3]:
print 'hello, world!'

  file "<ipython-input-3-139a7c5835bd>", line 1
    print 'hello, world!'
                        ^
syntaxerror: invalid syntax

   note:

   printing "hello, world" above via python 2 looked quite "normal".
   however, if we have multiple objects inside the parantheses, we will
   create a tuple, since print is a "statement" in python 2, not a
   function call.
   in [2]:
print 'python', python_version()
print('a', 'b')
print 'a', 'b'

python 2.7.7
('a', 'b')
a b

integer division[46]  

   [[47]back to the section-overview]

   this change is particularly dangerous if you are porting code, or if
   you are executing python 3 code in python 2, since the change in
   integer-division behavior can often go unnoticed (it doesn't raise a
   syntaxerror).
   so, i still tend to use a float(3)/2 or 3/2.0 instead of a 3/2 in my
   python 3 scripts to save the python 2 guys some trouble (and vice
   versa, i recommend a from __future__ import division in your python 2
   scripts).

python 2[48]  

   in [4]:
print 'python', python_version()
print '3 / 2 =', 3 / 2
print '3 // 2 =', 3 // 2
print '3 / 2.0 =', 3 / 2.0
print '3 // 2.0 =', 3 // 2.0

python 2.7.6
3 / 2 = 1
3 // 2 = 1
3 / 2.0 = 1.5
3 // 2.0 = 1.0

python 3[49]  

   in [4]:
print('python', python_version())
print('3 / 2 =', 3 / 2)
print('3 // 2 =', 3 // 2)
print('3 / 2.0 =', 3 / 2.0)
print('3 // 2.0 =', 3 // 2.0)

python 3.4.1
3 / 2 = 1.5
3 // 2 = 1
3 / 2.0 = 1.5
3 // 2.0 = 1.0

unicode[50]  

   [[51]back to the section-overview]

   python 2 has ascii str() types, separate unicode(), but no byte type.

   now, in python 3, we finally have unicode (utf-8) strings, and 2 byte
   classes: byte and bytearrays.

python 2[52]  

   in [2]:
print 'python', python_version()

python 2.7.6

   in [3]:
print type(unicode('this is like a python3 str type'))

<type 'unicode'>

   in [4]:
print type(b'byte type does not exist')

<type 'str'>

   in [5]:
print 'they are really' + b' the same'

they are really the same

   in [7]:
print type(bytearray(b'bytearray oddly does exist though'))

<type 'bytearray'>

python 3[53]  

   in [6]:
print('python', python_version())
print('strings are now utf-8 \u03bcnico\u0394  !')

python 3.4.1
strings are now utf-8   nico    !

   in [8]:
print('python', python_version(), end="")
print(' has', type(b' bytes for storing data'))

python 3.4.1 has <class 'bytes'>

   in [11]:
print('and python', python_version(), end="")
print(' also has', type(bytearray(b'bytearrays')))

and python 3.4.1 also has <class 'bytearray'>

   in [13]:
'note that we cannot add a string' + b'bytes for data'

---------------------------------------------------------------------------
typeerror                                 traceback (most recent call last)
<ipython-input-13-d3e8942ccf81> in <module>()
----> 1 'note that we cannot add a string' + b'bytes for data'

typeerror: can't convert 'bytes' object to str implicitly

xrange[54]  

   [[55]back to the section-overview]

   the usage of xrange() is very popular in python 2.x for creating an
   iterable object, e.g., in a for-loop or
   list/set-dictionary-comprehension.
   the behavior was quite similar to a generator (i.e., "lazy
   evaluation"), but here the xrange-iterable is not exhaustible -
   meaning, you could iterate over it infinitely.

   thanks to its "lazy-evaluation", the advantage of the regular range()
   is that xrange() is generally faster if you have to iterate over it
   only once (e.g., in a for-loop). however, in contrast to 1-time
   iterations, it is not recommended if you repeat the iteration multiple
   times, since the generation happens every time from scratch!

   in python 3, the range() was implemented like the xrange() function so
   that a dedicated xrange() function does not exist anymore (xrange()
   raises a nameerror in python 3).
   in [5]:
import timeit

n = 10000
def test_range(n):
    return for i in range(n):
        pass

def test_xrange(n):
    for i in xrange(n):
        pass

python 2[56]  

   in [6]:
print 'python', python_version()

print '\ntiming range()'
%timeit test_range(n)

print '\n\ntiming xrange()'
%timeit test_xrange(n)

python 2.7.6

timing range()
1000 loops, best of 3: 433   s per loop


timing xrange()
1000 loops, best of 3: 350   s per loop

python 3[57]  

   in [7]:
print('python', python_version())

print('\ntiming range()')
%timeit test_range(n)

python 3.4.1

timing range()
1000 loops, best of 3: 520   s per loop

   in [5]:
print(xrange(10))

---------------------------------------------------------------------------
nameerror                                 traceback (most recent call last)
<ipython-input-5-5d8f9b79ea70> in <module>()
----> 1 print(xrange(10))

nameerror: name 'xrange' is not defined

the __contains__ method for range objects in python 3[58]  

   another thing worth mentioning is that range got a "new" __contains__
   method in python 3.x (thanks to [59]yuchen ying, who pointed this out).
   the __contains__ method can speedup "look-ups" in python 3.x range
   significantly for integer and boolean types.
   in [3]:
x = 10000000

   in [4]:
def val_in_range(x, val):
    return val in range(x)

   in [5]:
def val_in_xrange(x, val):
    return val in xrange(x)

   in [7]:
print('python', python_version())
assert(val_in_range(x, x/2) == true)
assert(val_in_range(x, x//2) == true)
%timeit val_in_range(x, x/2)
%timeit val_in_range(x, x//2)

python 3.4.1
1 loops, best of 3: 742 ms per loop
1000000 loops, best of 3: 1.19   s per loop

   based on the timeit results above, you see that the execution for the
   "look up" was about 60,000 faster when it was of an integer type rather
   than a float. however, since python 2.x's range or xrange doesn't have
   a __contains__ method, the "look-up speed" wouldn't be that much
   different for integers or floats:

   in [6]:
print 'python', python_version()
assert(val_in_xrange(x, x/2.0) == true)
assert(val_in_xrange(x, x/2) == true)
assert(val_in_range(x, x/2) == true)
assert(val_in_range(x, x//2) == true)
%timeit val_in_xrange(x, x/2.0)
%timeit val_in_xrange(x, x/2)
%timeit val_in_range(x, x/2.0)
%timeit val_in_range(x, x/2)

python 2.7.7
1 loops, best of 3: 285 ms per loop
1 loops, best of 3: 179 ms per loop
1 loops, best of 3: 658 ms per loop
1 loops, best of 3: 556 ms per loop

   below the "proofs" that the __contain__ method wasn't added to python
   2.x yet:
   in [8]:
print('python', python_version())
range.__contains__

python 3.4.1

   out[8]:
<slot wrapper '__contains__' of 'range' objects>

   in [7]:
print 'python', python_version()
range.__contains__

python 2.7.7

---------------------------------------------------------------------------
attributeerror                            traceback (most recent call last)
<ipython-input-7-05327350dafb> in <module>()
      1 print 'python', python_version()
----> 2 range.__contains__

attributeerror: 'builtin_function_or_method' object has no attribute '__contains
__'

   in [8]:
print 'python', python_version()
xrange.__contains__

python 2.7.7

---------------------------------------------------------------------------
attributeerror                            traceback (most recent call last)
<ipython-input-8-7d1a71bfee8e> in <module>()
      1 print 'python', python_version()
----> 2 xrange.__contains__

attributeerror: type object 'xrange' has no attribute '__contains__'

note about the speed differences in python 2 and 3[60]  

   some people pointed out the speed difference between python 3's range()
   and python2's xrange(). since they are implemented the same way one
   would expect the same speed. however the difference here just comes
   from the fact that python 3 generally tends to run slower than python
   2.
   in [3]:
def test_while():
    i = 0
    while i < 20000:
        i += 1
    return

   in [4]:
print('python', python_version())
%timeit test_while()

python 3.4.1
100 loops, best of 3: 2.68 ms per loop

   in [6]:
print 'python', python_version()
%timeit test_while()

python 2.7.6
1000 loops, best of 3: 1.72 ms per loop

raising exceptions[61]  

   [[62]back to the section-overview]

   where python 2 accepts both notations, the 'old' and the 'new' syntax,
   python 3 chokes (and raises a syntaxerror in turn) if we don't enclose
   the exception argument in parentheses:

python 2[63]  

   in [7]:
print 'python', python_version()

python 2.7.6

   in [8]:
raise ioerror, "file error"

---------------------------------------------------------------------------
ioerror                                   traceback (most recent call last)
<ipython-input-8-25f049caebb0> in <module>()
----> 1 raise ioerror, "file error"

ioerror: file error

   in [9]:
raise ioerror("file error")

---------------------------------------------------------------------------
ioerror                                   traceback (most recent call last)
<ipython-input-9-6f1c43f525b2> in <module>()
----> 1 raise ioerror("file error")

ioerror: file error

python 3[64]  

   in [9]:
print('python', python_version())

python 3.4.1

   in [10]:
raise ioerror, "file error"

  file "<ipython-input-10-25f049caebb0>", line 1
    raise ioerror, "file error"
                 ^
syntaxerror: invalid syntax

   the proper way to raise an exception in python 3:
   in [11]:
print('python', python_version())
raise ioerror("file error")

python 3.4.1

---------------------------------------------------------------------------
oserror                                   traceback (most recent call last)
<ipython-input-11-c350544d15da> in <module>()
      1 print('python', python_version())
----> 2 raise ioerror("file error")

oserror: file error

handling exceptions[65]  

   [[66]back to the section-overview]

   also the handling of exceptions has slightly changed in python 3. in
   python 3 we have to use the "as" keyword now

python 2[67]  

   in [10]:
print 'python', python_version()
try:
    let_us_cause_a_nameerror
except nameerror, err:
    print err, '--> our error message'

python 2.7.6
name 'let_us_cause_a_nameerror' is not defined --> our error message

python 3[68]  

   in [12]:
print('python', python_version())
try:
    let_us_cause_a_nameerror
except nameerror as err:
    print(err, '--> our error message')

python 3.4.1
name 'let_us_cause_a_nameerror' is not defined --> our error message

the next() function and .next() method[69]  

   [[70]back to the section-overview]

   since next() (.next()) is such a commonly used function (method), this
   is another syntax change (or rather change in implementation) that is
   worth mentioning: where you can use both the function and method syntax
   in python 2.7.5, the next() function is all that remains in python 3
   (calling the .next() method raises an attributeerror).

python 2[71]  

   in [11]:
print 'python', python_version()

my_generator = (letter for letter in 'abcdefg')

next(my_generator)
my_generator.next()

python 2.7.6

   out[11]:
'b'

python 3[72]  

   in [13]:
print('python', python_version())

my_generator = (letter for letter in 'abcdefg')

next(my_generator)

python 3.4.1

   out[13]:
'a'

   in [14]:
my_generator.next()

---------------------------------------------------------------------------
attributeerror                            traceback (most recent call last)
<ipython-input-14-125f388bb61b> in <module>()
----> 1 my_generator.next()

attributeerror: 'generator' object has no attribute 'next'

for-loop variables and the global namespace leak[73]  

   [[74]back to the section-overview]

   good news is: in python 3.x for-loop variables don't leak into the
   global namespace anymore!

   this goes back to a change that was made in python 3.x and is described
   in [75]what   s new in python 3.0 as follows:

   "list comprehensions no longer support the syntactic form [... for var
   in item1, item2, ...]. use [... for var in (item1, item2, ...)]
   instead. also note that list comprehensions have different semantics:
   they are closer to syntactic sugar for a generator expression inside a
   list() constructor, and in particular the loop control variables are no
   longer leaked into the surrounding scope."

python 2[76]  

   in [12]:
print 'python', python_version()

i = 1
print 'before: i =', i

print 'comprehension: ', [i for i in range(5)]

print 'after: i =', i

python 2.7.6
before: i = 1
comprehension:  [0, 1, 2, 3, 4]
after: i = 4

python 3[77]  

   in [15]:
print('python', python_version())

i = 1
print('before: i =', i)

print('comprehension:', [i for i in range(5)])

print('after: i =', i)

python 3.4.1
before: i = 1
comprehension: [0, 1, 2, 3, 4]
after: i = 1

comparing unorderable types[78]  

   [[79]back to the section-overview]

   another nice change in python 3 is that a typeerror is raised as
   warning if we try to compare unorderable types.

python 2[80]  

   in [2]:
print 'python', python_version()
print "[1, 2] > 'foo' = ", [1, 2] > 'foo'
print "(1, 2) > 'foo' = ", (1, 2) > 'foo'
print "[1, 2] > (1, 2) = ", [1, 2] > (1, 2)

python 2.7.6
[1, 2] > 'foo' =  false
(1, 2) > 'foo' =  true
[1, 2] > (1, 2) =  false

python 3[81]  

   in [16]:
print('python', python_version())
print("[1, 2] > 'foo' = ", [1, 2] > 'foo')
print("(1, 2) > 'foo' = ", (1, 2) > 'foo')
print("[1, 2] > (1, 2) = ", [1, 2] > (1, 2))

python 3.4.1

---------------------------------------------------------------------------
typeerror                                 traceback (most recent call last)
<ipython-input-16-a9031729f4a0> in <module>()
      1 print('python', python_version())
----> 2 print("[1, 2] > 'foo' = ", [1, 2] > 'foo')
      3 print("(1, 2) > 'foo' = ", (1, 2) > 'foo')
      4 print("[1, 2] > (1, 2) = ", [1, 2] > (1, 2))

typeerror: unorderable types: list() > str()

parsing user inputs via input()[82]  

   [[83]back to the section-overview]

   fortunately, the input() function was fixed in python 3 so that it
   always stores the user inputs as str objects. in order to avoid the
   dangerous behavior in python 2 to read in other types than strings, we
   have to use raw_input() instead.

python 2[84]  

python 2.7.6
[gcc 4.0.1 (apple inc. build 5493)] on darwin
type "help", "copyright", "credits" or "license" for more information.

>>> my_input = input('enter a number: ')

enter a number: 123

>>> type(my_input)
<type 'int'>

>>> my_input = raw_input('enter a number: ')

enter a number: 123

>>> type(my_input)
<type 'str'>

python 3[85]  

python 3.4.1
[gcc 4.2.1 (apple inc. build 5577)] on darwin
type "help", "copyright", "credits" or "license" for more information.
>>> my_input = input('enter a number: ')

enter a number: 123

>>> type(my_input)
<class 'str'>
</pre></div>



returning iterable objects instead of lists[86]  

   [[87]back to the section-overview]

   as we have already seen in the [88]xrange section, some functions and
   methods return iterable objects in python 3 now - instead of lists in
   python 2.

   since we usually iterate over those only once anyway, i think this
   change makes a lot of sense to save memory. however, it is also
   possible - in contrast to generators - to iterate over those multiple
   times if needed, it is aonly not so efficient.

   and for those cases where we really need the list-objects, we can
   simply convert the iterable object into a list via the list() function.

python 2[89]  

   in [2]:
print 'python', python_version()

print range(3)
print type(range(3))

python 2.7.6
[0, 1, 2]
<type 'list'>

python 3[90]  

   in [7]:
print('python', python_version())

print(range(3))
print(type(range(3)))
print(list(range(3)))

python 3.4.1
range(0, 3)
<class 'range'>
[0, 1, 2]

   some more commonly used functions and methods that don't return lists
   anymore in python 3:
     * zip()
     * map()
     * filter()
     * dictionary's .keys() method
     * dictionary's .values() method
     * dictionary's .items() method

banker's rounding[91]  

   [[92]back to the section-overview]

   python 3 adopted the now standard way of rounding decimals when it
   results in a tie (.5) at the last significant digits. now, in python 3,
   decimals are rounded to the nearest even number. although it's an
   inconvenience for code portability, it's supposedly a better way of
   rounding compared to rounding up as it avoids the bias towards large
   numbers. for more information, see the excellent wikipedia articles and
   paragraphs:
     * [93]https://en.wikipedia.org/wiki/rounding#round_half_to_even
     * [94]https://en.wikipedia.org/wiki/ieee_floating_point#roundings_to_
       nearest

python 2[95]  

   in [5]:
print 'python', python_version()

python 2.7.12

   in [6]:
round(15.5)

   out[6]:
16.0

   in [7]:
round(16.5)

   out[7]:
17.0

python 3[96]  

   in [4]:
print('python', python_version())

python 3.5.1

   in [5]:
round(15.5)

   out[5]:
16

   in [6]:
round(16.5)

   out[6]:
16

more articles about python 2 and python 3[97]  

   [[98]back to the section-overview]

   here is a list of some good articles concerning python 2 and 3 that i
   would recommend as a follow-up.

   // porting to python 3
     * [99]should i use python 2 or python 3 for my development activity?
     * [100]what   s new in python 3.0
     * [101]porting to python 3
     * [102]porting python 2 code to python 3
     * [103]how keep python 3 moving forward

   // pro and anti python 3
     * [104]10 awesome features of python that you can't use because you
       refuse to upgrade to python 3
     * [105]everything you did not want to know about unicode in python 3
     * [106]python 3 is killing python
     * [107]python 3 can revive python
     * [108]python 3 is fine

   in [ ]:


   this website does not host notebooks, it only renders notebooks
   available on other websites.

   delivered by [109]fastly, rendered by [110]rackspace

   nbviewer github [111]repository.

   nbviewer version: [112]33c4683

   nbconvert version: [113]5.4.0

   rendered (fri, 05 apr 2019 18:20:25 utc)

references

   1. https://nbviewer.jupyter.org/
   2. http://jupyter.org/
   3. https://nbviewer.jupyter.org/faq
   4. https://nbviewer.jupyter.org/format/script/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb
   5. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb
   6. https://github.com/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb
   7. https://mybinder.org/v2/gh/rasbt/python_reference/master?filepath=tutorials/key_differences_between_python_2_and_3.ipynb
   8. https://raw.githubusercontent.com/rasbt/python_reference/master/tutorials/key_differences_between_python_2_and_3.ipynb
   9. https://nbviewer.jupyter.org/github/rasbt/python_reference/tree/master
  10. https://nbviewer.jupyter.org/github/rasbt/python_reference/tree/master/tutorials
  11. http://sebastianraschka.com/
  12. http://nbviewer.ipython.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb?create=1
  13. https://github.com/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb
  14. https://github.com/rasbt/python_reference
  15. https://twitter.com/rasbt
  16. https://nbviewer.jupyter.org/cdn-cgi/l/email-protection#8fede3faeaf8e0e0ebfbfdeaeacfe8e2eee6e3a1ece0e2
  17. https://plus.google.com/118404394130788869227
  18. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#key-differences-between-python-2.7.x-and-python-3.x
  19. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#sections
  20. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#future_module
  21. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#the-print-function
  22. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#integer-division
  23. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#unicode
  24. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#xrange
  25. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#raising-exceptions
  26. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#handling-exceptions
  27. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#the-next-function-and-next-method
  28. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#for-loop-variables-and-the-global-namespace-leak
  29. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#comparing-unorderable-types
  30. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#parsing-user-inputs-via-input
  31. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#returning-iterable-objects-instead-of-lists
  32. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#banker's-rounding
  33. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#more-articles-about-python-2-and-python-3
  34. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#the-__future__-module
  35. http://www.python.org/dev/peps/pep-0227
  36. http://www.python.org/dev/peps/pep-0255
  37. http://www.python.org/dev/peps/pep-0238
  38. http://www.python.org/dev/peps/pep-0328
  39. http://www.python.org/dev/peps/pep-0343
  40. http://www.python.org/dev/peps/pep-3105
  41. http://www.python.org/dev/peps/pep-3112
  42. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#the-print-function
  43. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#sections
  44. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-2
  45. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-3
  46. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#integer-division
  47. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#sections
  48. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-2
  49. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-3
  50. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#unicode
  51. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#sections
  52. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-2
  53. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-3
  54. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#xrange
  55. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#sections
  56. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-2
  57. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-3
  58. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#the-__contains__-method-for-range-objects-in-python-3
  59. https://github.com/yegle
  60. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#note-about-the-speed-differences-in-python-2-and-3
  61. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#raising-exceptions
  62. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#sections
  63. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-2
  64. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-3
  65. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#handling-exceptions
  66. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#sections
  67. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-2
  68. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-3
  69. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#the-next()-function-and-.next()-method
  70. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#sections
  71. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-2
  72. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-3
  73. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#for-loop-variables-and-the-global-namespace-leak
  74. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#sections
  75. https://docs.python.org/3/whatsnew/3.0.html
  76. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-2
  77. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-3
  78. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#comparing-unorderable-types
  79. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#sections
  80. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-2
  81. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-3
  82. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#parsing-user-inputs-via-input()
  83. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#sections
  84. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-2
  85. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-3
  86. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#returning-iterable-objects-instead-of-lists
  87. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#sections
  88. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#xrange
  89. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-2
  90. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-3
  91. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#banker's-rounding
  92. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#sections
  93. https://en.wikipedia.org/wiki/rounding#round_half_to_even
  94. https://en.wikipedia.org/wiki/ieee_floating_point#roundings_to_nearest
  95. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-2
  96. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#python-3
  97. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#more-articles-about-python-2-and-python-3
  98. https://nbviewer.jupyter.org/github/rasbt/python_reference/blob/master/tutorials/key_differences_between_python_2_and_3.ipynb#sections
  99. https://wiki.python.org/moin/python2orpython3
 100. https://docs.python.org/3.0/whatsnew/3.0.html
 101. http://python3porting.com/differences.html
 102. https://docs.python.org/3/howto/pyporting.html
 103. http://nothingbutsnark.svbtle.com/my-view-on-the-current-state-of-python-3
 104. http://asmeurer.github.io/python3-presentation/slides.html#1
 105. http://lucumr.pocoo.org/2014/5/12/everything-about-unicode/
 106. https://medium.com/@deliciousrobots/5d2ad703365d/
 107. https://medium.com/p/2a7af4788b10
 108. http://sealedabstract.com/rants/python-3-is-fine/
 109. http://www.fastly.com/
 110. https://developer.rackspace.com/?nbviewer=awesome
 111. https://github.com/jupyter/nbviewer
 112. https://github.com/jupyter/nbviewer/commit/33c4683164d5ee4c92dbcd53afac7f13ef033c54
 113. https://github.com/jupyter/nbconvert/releases/tag/5.4.0
