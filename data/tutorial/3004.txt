   #[1]github [2]recent commits to parlai:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]254
     * [35]star [36]4,376
     * [37]fork [38]819

[39]facebookresearch/[40]parlai

   [41]code [42]issues 11 [43]pull requests 9 [44]projects 3 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   a framework for training and evaluating ai models on a variety of
   openly available dialogue datasets. [47]https://parl.ai
     * [48]2,522 commits
     * [49]34 branches
     * [50]0 releases
     * [51]fetching contributors
     * [52]mit

    1. [53]python 85.2%
    2. [54]html 7.9%
    3. [55]javascript 5.2%
    4. [56]css 0.9%
    5. [57]lua 0.6%
    6. [58]shell 0.2%

   (button) python html javascript css lua shell
   branch: master (button) new pull request
   [59]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/f
   [60]download zip

downloading...

   want to be notified of new releases in facebookresearch/parlai?
   [61]sign in [62]sign up

launching github desktop...

   if nothing happens, [63]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [64]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [65]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [66]download the github extension for visual studio
   and try again.

   (button) go back
   [67]@jackurb
   [68]jackurb [69][mturk] adding more support for 1 person static tasks.
   ([70]#1610[71]) (button)    
* [mturk] support for static tasks

* [mturk] getting v0 running

* little bugs

* removing a comment

* lint

* addressing comments

* small socketmanager concurrency fix

* removing demo task before commit

* keep contextview

* removing mention of demo from readme

   latest commit [72]f1f8996 apr 5, 2019
   [73]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [74].circleci
   [75]docs [76][circleci] build website step, and squash with master.
   ([77]#1609[78]) apr 4, 2019
   [79]examples
   [80]parlai
   [81]projects [82][wizard] zoo fix ([83]#1589[84]) mar 29, 2019
   [85]tests
   [86]website [87][circleci] build website step, and squash with master.
   ([88]#1609[89]) apr 4, 2019
   [90].flake8 [91]fix broken flake8 due to upstream upgrade.
   ([92]#1264[93]) nov 1, 2018
   [94].gitignore [95]ignore data/ when it is a symlink. ([96]#1578[97])
   mar 26, 2019
   [98]code_of_conduct.md
   [99]contributing.md
   [100]license [101]relicense parlai from bsd+patents to mit
   ([102]#1359[103]) jan 16, 2019
   [104]manifest.in [105]react frontend ([106]#1281[107]) nov 14, 2018
   [108]news.md
   [109]readme.md [110][circleci] build website step, and squash with
   master. ([111]#1609[112]) apr 4, 2019
   [113]requirements.txt
   [114]setup.py [115][circleci] conditional tests ([116]#1601[117]) apr
   3, 2019
   [118]task_list.inc

readme.md

                              [119][parlai.png]

   [120]circleci
     __________________________________________________________________

   parlai (pronounced    par-lay   ) is a framework for dialogue ai research,
   implemented in python.

   its goal is to provide researchers:
     * a unified framework for sharing, training and testing dialogue
       models
     * many popular datasets available all in one place -- from
       open-domain chitchat to visual id53.
     * a wide set of reference models -- from retrieval baselines to
       transformers.
     * seaid113ss integration of [121]amazon mechanical turk for data
       collection and human evaluation
     * integration with [122]facebook messenger to connect agents with
       humans in a chat interface

   many [123]tasks are supported, including popular datasets such as
   [124]squad, [125]babi tasks, [126]ms marco, [127]mctest, [128]wikiqa,
   [129]webquestions, [130]simplequestions, [131]wikimovies, [132]qaid98 &
   qadailymail, [133]cbt, [134]booktest, [135]babi dialogue tasks,
   [136]ubuntu dialogue, [137]opensubtitles, [138]cornell movie,
   [139]vqa-coco2014, [140]visdial and [141]clevr. see [142]here for the
   current complete task list.

   included are examples of training neural models with [143]pytorch, with
   batch training on gpu or hogwild training on cpus. using
   [144]tensorflow or other frameworks instead is also straightforward.

   our aim is for the number of tasks and agents that train on them to
   grow in a community-based way.

   parlai is described in the following paper: [145]   parlai: a dialog
   research software platform", arxiv:1705.06476.

   see the [146]news page for the latest additions & updates, and the
   website [147]http://parl.ai for further docs.

goals

   unified framework for evaluation of dialogue models
     * downloads tasks/datasets on demand and provides the same simple
       interface to them
     * unifies dataset input and evaluation frameworks/metrics
     * agents/ directory encourages researchers to submit their training
       code to the repository to share with others
     * aids reproducibility

   end goal is general dialogue, which includes many different skills
     * seaid113ssly combines simulated and real language tasks
     * encourages multi-task model development & evaluation
     * helps to reduce overfitting of models to specific datasets

   end goal is real dialogue with people
     * train and evaluate on live dialogue with humans via mechanical turk
       or messenger
     * easy setup for connecting turkers with your dialogue agent
     * allow to compare different research groups turk experiments

   set of datasets to bootstrap a working dialogue model for human
   interaction
     * motivates building new datasets that will go in the repository

properties

     * all datasets look like natural dialogue: a single format / api.
     * both fixed datasets (conversation logs) and interactive (online/rl)
       tasks.
     * both real and simulated tasks.
     * supports other media, e.g. visual in vqa.
     * can use mechanical turk to run / collect data / evaluate.
     * python framework.
     * examples of training with pytorch.
     * supports batch and hogwild training and evaluation of models.

basic examples

   note: if any of these examples fail, check the [148]requirements
   section to see if you have missed something.

   display 10 random examples from task 1 of the "1k training examples"
   babi task:
python examples/display_data.py -t babi:task1k:1

   displays 100 random examples from multi-tasking on the babi task and
   the squad dataset at the same time:
python examples/display_data.py -t babi:task1k:1,squad -ne 100

   evaluate on the babi test set with a human agent (using the local
   keyboard as input):
python examples/eval_model.py -m local_human -t babi:task1k:1 -dt valid

   evaluate an ir baseline model on the validation set of the movies
   subreddit dataset:
python examples/eval_model.py -m ir_baseline -t "#moviedd-reddit" -dt valid

   display the predictions of that same ir baseline model:
python examples/display_model.py -m ir_baseline -t "#moviedd-reddit" -dt valid

   train a id195 model on the "10k training examples" babi task 1 with
   batch size of 32 examples until accuracy reaches 95% on validation
   (requires pytorch):
python examples/train_model.py -t babi:task10k:1 -m id195 -mf /tmp/model_s2s -
bs 32 -vtim 30 -vcut 0.95

   trains an attentive lstm model on the squad dataset with a batch size
   of 32 examples (pytorch and regex):
python examples/train_model.py -m drqa -t squad -bs 32 -mf /tmp/model_drqa

   tests an existing attentive lstm model (drqa reader) on the squad
   dataset from our model zoo:
python examples/eval_model.py -t squad -mf "models:drqa/squad/model"

   talk to a convai2 baseline kvmemnn model from the model zoo:
python projects/convai2/interactive.py -mf models:convai2/kvmemnn/model

requirements

   parlai currently requires python3.

   dependencies of the core modules are listed in requirement.txt.

   some models included (in parlai/agents) have additional requirements.

installing parlai

   run the following commands to clone the repository and install parlai:
git clone https://github.com/facebookresearch/parlai.git ~/parlai
cd ~/parlai; python setup.py develop

   this will link the cloned directory to your site-packages.

   this is the recommended installation procedure, as it provides ready
   access to the examples and allows you to modify anything you might
   need. this is especially useful if you if you want to submit another
   task to the repository.

   all needed data will be downloaded to ~/parlai/data, and any non-data
   files (such as the memnn code) if requested will be downloaded to
   ~/parlai/downloads. if you need to clear out the space used by these
   files, you can safely delete these directories and any files needed
   will be downloaded again.

worlds, agents and teachers

   the main concepts (classes) in parlai:
     * world - defines the environment (can be very simple, just two
       agents talking to each other).
     * agent     an agent in the world, e.g. the learner. (there can be
       multiple learners.)
     * teacher     a type of agent that talks to the learner, implements one
       of the listed before.

   after defining a world and the agents in it, a main loop can be run for
   training, testing or displaying, which calls the function
   world.parley(). the skeleton of an example main is given in the left
   panel, and the actual code for parley() on the right.

                               [149][main.png]

actions and observations

   all agents (including teachers) speak to each other with a single
   format -- the observation/action object (a python dict). this is used
   to pass text, labels, rewards, and more between agents. it   s the same
   object type when talking (acting) or listening (observing), but a
   different view (i.e. with different values in the fields).

   the observation/action dict fields are as follows (or see [150]the
   documentation):

                           [151][act-obs-dict.png]

   each of these fields are technically optional, depending on your
   dataset, though the 'text' field will most likely be used in nearly all
   exchanges.

   note: during validation and testing, the labels field is renamed
   eval_labels     this way, the model won   t accidentally train on the
   labels, but they are still available for calculating model-side loss.

   for a fixed supervised learning dataset like babi, a typical exchange
   from the training set might be as follows (the test set would not
   include labels):
teacher: {
    'text': 'sam went to the kitchen\npat gave sam the milk\nwhere is the milk?'
,
    'labels': ['kitchen'],
    'label_candidates': ['hallway', 'kitchen', 'bathroom'],
    'episode_done': false
}
student: {
    'text': 'hallway'
}
teacher: {
    'text': 'sam went to the hallway\npat went to the bathroom\nwhere is the mil
k?',
    'labels': ['hallway'],
    'label_candidates': ['hallway', 'kitchen', 'bathroom'],
    'episode_done': true
}
student: {
    'text': 'hallway'
}
teacher: {
    ... # starts next episode
}
...

code

   the code is set up into several main directories:
     * core: contains the primary code for the framework
     * agents: contains agents which can interact with the different tasks
       (e.g. machine learning models)
     * examples: contains a few basic examples of different loops
       (building dictionary, train/eval, displaying data)
     * tasks: contains code for the different tasks available from within
       parlai
     * mturk: contains code for setting up mechanical turk, as well as
       sample mturk tasks
     * messenger: contains code for interfacing with facebook messenger
     * zoo: contains code to directly download and use pretrained models
       from our model zoo

   each directory is described in more detail below, ordered by
   dependencies.

core

   the core library contains the following files:
     * agents.py: this file contains a few basic agents which can be
       extended by your own model
          + agent: base class for all other agents, implements the act()
            method which receives an observation table and returns a table
            in response
          + teacher: child of agent, also implements the report method for
            returning metrics. tasks implement the teacher class
          + multitaskteacher: creates a set of teachers based on a "task
            string" passed to the teacher, creating multiple teachers
            within it and alternating between them
          + create_task_teacher: instantiate a teacher from a given task
            string (e.g. 'babi:task:1' or 'squad')
     * build_data.py: basic utilities for setting up data for tasks. you
       can override if your filesystem needs different functionality.
     * dict.py: contains code for building general nlp-style dictionaries
       from observations
          + dictionaryagent: agent which tracks the index and frequency of
            words in a dictionary, and can parse a sentence into indices
            into its dictionary or back
     * metrics.py: computes id74, e.g. ranking metrics, etc.
     * params.py: uses argparse to interpret command line arguments for
       parlai
     * teachers.py: contains teachers that deal with dialogue-based tasks,
       as well as data classes for storing data
          + fixeddialogteacher: base class for a teacher that utilizes
            fixed data
          + dialogteacher: base class for a teacher doing dialogue with
            fixed chat logs
          + parlaidialogteacher: a teacher that implements a simple
            standard text format for many tasks (non-visual tasks only)
     * thread_utils.py: utility classes/functions for use in hogwild
       multithreading (multiprocessing)
          + sharedtable: provides a lock-protected, shared-memory,
            dictionary-like interface for keeping track of metrics
     * worlds.py: contains a set of basic worlds for tasks to take place
       inside
          + world: base class for all other worlds, implements parley,
            shutdown, __enter__, and __exit__
          + dialogpartnerworld: default world for turn-based two-agent
            communication
          + multiagentdialogworld: round-robin turn-based agent
            communication for two or more agents
          + hogwildworld: default world for setting up a separate world
            for every thread when using multiple threads (processes)

agents

   the agents directory contains agents that have been approved into the
   parlai framework for shared use. we encourage you to contribute new
   ones! some agents currently available within [152]this directory:
     * drqa: an attentive [153]lstm model drqa implemented in pytorch that
       has competitive results on the squad dataset amongst others.
     * fairseq: [154]an attentive sequence to sequence model using
       convolutions
     * id195: a generic id195 model with various options
     * ibm_id195: ibm sequence to sequence model
     * language_model: an id56 language model
     * memnn: code for an end-to-end memory network
     * mlb_vqa: a visual id53 model based on [155]this paper
     * starspace: a simple supervised embedding approach which is a strong
       baseline based on [156]this paper.
     * tfidf_retriever a simple retrieval based model, also useful as a
       first step for retrieving information as input to another model.
     * ir_baseline: simple information retrieval baseline that scores
       candidate responses with [157]tfidf-weighted matching
     * repeat_label: basic class for merely repeating all data sent to it
       (e.g. for piping to a file, debugging)
     * remote_agent: basic class for any agent connecting over zmq
     * local_human: takes input from the keyboard as the act() function of
       the agent, so a human can act in the environment

   see the [158]directory for the complete list.

examples

   [159]this directory contains a few particular examples of basic loops.
     * base_train.py: very simple example shows the outline of a
       training/validation loop using the default agent parent class
     * display_data.py: uses agent.repeat_label to display data from a
       particular task provided on the command-line
     * display_model.py: shows the predictions of a provided model on a
       particular task provided on the command-line
     * eval_model.py: uses the named agent to compute id74
       data for a particular task provided on the command-line
     * build_dict.py: build a dictionary from a particular task provided
       on the command-line using core.dict.dictionaryagent

tasks

   our first release included the following datasets (shown in the left
   panel), and accessing one of them is as simple as specifying the name
   of the task as a command line option, as shown in the dataset display
   utility (right panel):

                              [160][tasks2.png]

   over 20 tasks were supported in the first release, including popular
   datasets such as squad, babi tasks, mctest, wikiqa, webquestions,
   simplequestions, wikimovies, qaid98, qadailymail, cbt, booktest, babi
   dialog tasks, ubuntu, opensubtitles, cornell movie, vqa-coco2014. since
   then, several datasets have been added such as vqav2, visdial,
   mnist_qa, personalized dialog, insuranceqa, ms marco, triviaqa, and
   clevr. see [161]here for the current complete task list.

   choosing a task in parlai is as easy as specifying it on the command
   line, as shown in the above image (right). if the dataset has not been
   used before, parlai will automatically download it. as all datasets are
   treated in the same way in parlai (with a single dialogue api), a
   dialogue agent can in principle switch training and testing between any
   of them. even better, one can specify many tasks at once
   (multi-tasking) by simply providing a comma-separated list, e.g. the
   command line    -t babi,squad   , to use those two datasets, or even all
   the qa datasets at once (-t #qa) or indeed every task in parlai at once
   (-t #all). the aim is to make it easy to build and evaluate very rich
   dialogue models.

   each task folder contains:
     * build.py file for setting up data for the task (downloading data,
       etc, only done the first time requested, and not downloaded if the
       task is not used).
     * agents.py file which contains default or special teacher classes
       used by core.create_task to instantiate these classes from
       command-line arguments (if desired).
     * worlds.py file can optionally be added for tasks that need to
       define new/complex environments.

   to add your own task, see the [162]tutorial.

mturk

   an important part of parlai is seaid113ss integration with mechanical
   turk for data collection, training and evaluation.

   human turkers are also viewed as agents in parlai and hence
   person-person, person-bot, or multiple people and bots in group chat
   can all converse within the standard framework, switching out the roles
   as desired with no code changes to the agents. this is because turkers
   also receive and send via a (pretty printed) version of the same
   interface, using the fields of the observation/action dict.

   we currently provide three examples: collecting data, human evaluation
   of a bot, and round-robin chat between local humans and remote turkers.

                              [163][mturk.png]

   the mturk library contains the following directories:
     * core: this directory contains the core code for setting up aws
       backend that supports the mturk chat interface, code for hit
       creation and approval, and the wrapper class mturkagent which
       encapsulates the mturk interface into a standard agent class.
     * tasks: this directory contains three sample mturk tasks.
          + qa_data_collection: get questions and answers from turkers,
            given a random paragraph from squad.
          + model_evaluator: ask turkers to evaluate the information
            retrieval baseline model on the reddit movie dialogue dataset.
          + multi_agent_dialog: round-robin chat between two local human
            agents and two turkers.

   to run an mturk task:
     * first ensure that the task directory is in parlai/mturk/tasks/.
     * then, run its run.py file with proper flags: python run.py -nc
       <num_conversations> -r <reward> [--sandbox]/[--live]. use --sandbox
       to run the task in mturk sandbox mode before pushing it live.

   to add your own mturk task:
     * create a new folder within the mturk/tasks directory for your new
       task
     * implement task_config.py, with at least the following fields in the
       task_config dictionary:
          + hit_title: a short and descriptive title about the kind of
            task the hit contains. on the amazon mechanical turk web site,
            the hit title appears in search results, and everywhere the
            hit is mentioned.
          + hit_description: a description includes detailed information
            about the kind of task the hit contains. on the amazon
            mechanical turk web site, the hit description appears in the
            expanded view of search results, and in the hit and assignment
            screens.
          + hit_keywords: one or more words or phrases that describe the
            hit, separated by commas. on mturk website, these words are
            used in searches to find hits.
          + task_description: a detailed task description that will be
            shown on the hit task preview page and on the left side of the
            chat page. supports html formatting.
     * implement run.py, with code for setting up and running the world
       where mturkagent lives in.
     * (optional) implement worlds.py, with a world class that extends
       from world.

   please see [164]the mturk tutorial to learn more about the mturk
   examples and how to create and run your own task.

messenger

   please see [165]the facebook messenger tutorial to learn more about how
   to use parlai with facebook messenger.

support

   if you have any questions, bug reports or feature requests, please
   don't hesitate to post on our [166]github issues page.

the team

   parlai is currently maintained by emily dinan, alexander h. miller,
   stephen roller, kurt shuster, jack urbanek and jason weston. a
   non-exhaustive list of other major contributors includes: will feng,
   adam fisch, jiasen lu, antoine bordes, devi parikh, dhruv batra, filipe
   de avila belbute peres and chao pan.

citation

   please cite the [167]arxiv paper if you use parlai in your work:
@article{miller2017parlai,
  title={parlai: a dialog research software platform},
  author={{miller}, a.~h. and {feng}, w. and {fisch}, a. and {lu}, j. and {batra
}, d. and {bordes}, a. and {parikh}, d. and {weston}, j.},
  journal={arxiv preprint arxiv:{1705.06476}},
  year={2017}
}

license

   parlai is mit licensed. see the license file for details.

     *    2019 github, inc.
     * [168]terms
     * [169]privacy
     * [170]security
     * [171]status
     * [172]help

     * [173]contact github
     * [174]pricing
     * [175]api
     * [176]training
     * [177]blog
     * [178]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [179]reload to refresh your
   session. you signed out in another tab or window. [180]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/facebookresearch/parlai/commits/master.atom
   3. https://github.com/facebookresearch/parlai#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/facebookresearch/parlai
  32. https://github.com/join
  33. https://github.com/login?return_to=/facebookresearch/parlai
  34. https://github.com/facebookresearch/parlai/watchers
  35. https://github.com/login?return_to=/facebookresearch/parlai
  36. https://github.com/facebookresearch/parlai/stargazers
  37. https://github.com/login?return_to=/facebookresearch/parlai
  38. https://github.com/facebookresearch/parlai/network/members
  39. https://github.com/facebookresearch
  40. https://github.com/facebookresearch/parlai
  41. https://github.com/facebookresearch/parlai
  42. https://github.com/facebookresearch/parlai/issues
  43. https://github.com/facebookresearch/parlai/pulls
  44. https://github.com/facebookresearch/parlai/projects
  45. https://github.com/facebookresearch/parlai/pulse
  46. https://github.com/join?source=prompt-code
  47. https://parl.ai/
  48. https://github.com/facebookresearch/parlai/commits/master
  49. https://github.com/facebookresearch/parlai/branches
  50. https://github.com/facebookresearch/parlai/releases
  51. https://github.com/facebookresearch/parlai/graphs/contributors
  52. https://github.com/facebookresearch/parlai/blob/master/license
  53. https://github.com/facebookresearch/parlai/search?l=python
  54. https://github.com/facebookresearch/parlai/search?l=html
  55. https://github.com/facebookresearch/parlai/search?l=javascript
  56. https://github.com/facebookresearch/parlai/search?l=css
  57. https://github.com/facebookresearch/parlai/search?l=lua
  58. https://github.com/facebookresearch/parlai/search?l=shell
  59. https://github.com/facebookresearch/parlai/find/master
  60. https://github.com/facebookresearch/parlai/archive/master.zip
  61. https://github.com/login?return_to=https://github.com/facebookresearch/parlai
  62. https://github.com/join?return_to=/facebookresearch/parlai
  63. https://desktop.github.com/
  64. https://desktop.github.com/
  65. https://developer.apple.com/xcode/
  66. https://visualstudio.github.com/
  67. https://github.com/jackurb
  68. https://github.com/facebookresearch/parlai/commits?author=jackurb
  69. https://github.com/facebookresearch/parlai/commit/f1f8996429d99d57ee07fd39617735e9f6931150
  70. https://github.com/facebookresearch/parlai/pull/1610
  71. https://github.com/facebookresearch/parlai/commit/f1f8996429d99d57ee07fd39617735e9f6931150
  72. https://github.com/facebookresearch/parlai/commit/f1f8996429d99d57ee07fd39617735e9f6931150
  73. https://github.com/facebookresearch/parlai/tree/f1f8996429d99d57ee07fd39617735e9f6931150
  74. https://github.com/facebookresearch/parlai/tree/master/.circleci
  75. https://github.com/facebookresearch/parlai/tree/master/docs
  76. https://github.com/facebookresearch/parlai/commit/8d71825f08e3b5aa6a150c09446a5d28caeb0482
  77. https://github.com/facebookresearch/parlai/pull/1609
  78. https://github.com/facebookresearch/parlai/commit/8d71825f08e3b5aa6a150c09446a5d28caeb0482
  79. https://github.com/facebookresearch/parlai/tree/master/examples
  80. https://github.com/facebookresearch/parlai/tree/master/parlai
  81. https://github.com/facebookresearch/parlai/tree/master/projects
  82. https://github.com/facebookresearch/parlai/commit/91cd07c33f745553dd9c6d26d065b7307edb500c
  83. https://github.com/facebookresearch/parlai/pull/1589
  84. https://github.com/facebookresearch/parlai/commit/91cd07c33f745553dd9c6d26d065b7307edb500c
  85. https://github.com/facebookresearch/parlai/tree/master/tests
  86. https://github.com/facebookresearch/parlai/tree/master/website
  87. https://github.com/facebookresearch/parlai/commit/8d71825f08e3b5aa6a150c09446a5d28caeb0482
  88. https://github.com/facebookresearch/parlai/pull/1609
  89. https://github.com/facebookresearch/parlai/commit/8d71825f08e3b5aa6a150c09446a5d28caeb0482
  90. https://github.com/facebookresearch/parlai/blob/master/.flake8
  91. https://github.com/facebookresearch/parlai/commit/c3bc4b19f05dada1284c8bc7c7f9360d2cd984b9
  92. https://github.com/facebookresearch/parlai/pull/1264
  93. https://github.com/facebookresearch/parlai/commit/c3bc4b19f05dada1284c8bc7c7f9360d2cd984b9
  94. https://github.com/facebookresearch/parlai/blob/master/.gitignore
  95. https://github.com/facebookresearch/parlai/commit/7b5ea83b98b9ccf75ae5ed31e7d92a4a5764f7ad
  96. https://github.com/facebookresearch/parlai/pull/1578
  97. https://github.com/facebookresearch/parlai/commit/7b5ea83b98b9ccf75ae5ed31e7d92a4a5764f7ad
  98. https://github.com/facebookresearch/parlai/blob/master/code_of_conduct.md
  99. https://github.com/facebookresearch/parlai/blob/master/contributing.md
 100. https://github.com/facebookresearch/parlai/blob/master/license
 101. https://github.com/facebookresearch/parlai/commit/d80573384feb589f4246bba39e6c2ec85cefb97b
 102. https://github.com/facebookresearch/parlai/pull/1359
 103. https://github.com/facebookresearch/parlai/commit/d80573384feb589f4246bba39e6c2ec85cefb97b
 104. https://github.com/facebookresearch/parlai/blob/master/manifest.in
 105. https://github.com/facebookresearch/parlai/commit/7011a5461832440c83ac3af0b15384c389055e44
 106. https://github.com/facebookresearch/parlai/pull/1281
 107. https://github.com/facebookresearch/parlai/commit/7011a5461832440c83ac3af0b15384c389055e44
 108. https://github.com/facebookresearch/parlai/blob/master/news.md
 109. https://github.com/facebookresearch/parlai/blob/master/readme.md
 110. https://github.com/facebookresearch/parlai/commit/8d71825f08e3b5aa6a150c09446a5d28caeb0482
 111. https://github.com/facebookresearch/parlai/pull/1609
 112. https://github.com/facebookresearch/parlai/commit/8d71825f08e3b5aa6a150c09446a5d28caeb0482
 113. https://github.com/facebookresearch/parlai/blob/master/requirements.txt
 114. https://github.com/facebookresearch/parlai/blob/master/setup.py
 115. https://github.com/facebookresearch/parlai/commit/bee71e383e34335d2d8aa1e8a5c19a59aea70569
 116. https://github.com/facebookresearch/parlai/pull/1601
 117. https://github.com/facebookresearch/parlai/commit/bee71e383e34335d2d8aa1e8a5c19a59aea70569
 118. https://github.com/facebookresearch/parlai/blob/master/task_list.inc
 119. https://github.com/facebookresearch/parlai/blob/master/docs/source/\_static/img/parlai.png
 120. https://circleci.com/gh/facebookresearch/parlai/tree/master
 121. https://www.mturk.com/mturk/welcome
 122. http://www.parl.ai/docs/tutorial_messenger.html
 123. https://github.com/facebookresearch/parlai/blob/master/parlai/tasks/task_list.py
 124. https://rajpurkar.github.io/squad-explorer/
 125. https://arxiv.org/abs/1502.05698
 126. http://www.msmarco.org/
 127. https://www.microsoft.com/en-us/research/publication/mctest-challenge-dataset-open-domain-machine-comprehension-text/
 128. https://www.microsoft.com/en-us/download/details.aspx?id=52419
 129. http://www.aclweb.org/anthology/d13-1160
 130. https://arxiv.org/abs/1506.02075
 131. https://arxiv.org/abs/1606.03126
 132. https://arxiv.org/abs/1506.03340
 133. https://arxiv.org/abs/1511.02301
 134. https://arxiv.org/abs/1610.00956
 135. https://arxiv.org/abs/1605.07683
 136. https://arxiv.org/abs/1506.08909
 137. http://opus.lingfil.uu.se/opensubtitles.php
 138. https://www.cs.cornell.edu/~cristian/cornell_movie-dialogs_corpus.html
 139. http://visualqa.org/
 140. https://arxiv.org/abs/1611.08669
 141. http://cs.stanford.edu/people/jcjohns/clevr/
 142. https://github.com/facebookresearch/parlai/blob/master/parlai/tasks/task_list.py
 143. http://pytorch.org/
 144. https://www.tensorflow.org/
 145. https://arxiv.org/abs/1705.06476
 146. https://github.com/facebookresearch/parlai/blob/master/news.md
 147. http://parl.ai/
 148. https://github.com/facebookresearch/parlai#requirements
 149. https://github.com/facebookresearch/parlai/blob/master/docs/source/\_static/img/main.png
 150. http://parl.ai/docs/observations.html
 151. https://github.com/facebookresearch/parlai/blob/master/docs/source/\_static/img/act-obs-dict.png
 152. https://github.com/facebookresearch/parlai/tree/master/parlai/agents
 153. https://arxiv.org/abs/1704.00051
 154. https://arxiv.org/abs/1705.03122
 155. https://arxiv.org/abs/1610.04325
 156. https://arxiv.org/abs/1709.03856
 157. https://en.wikipedia.org/wiki/tf   idf
 158. https://github.com/facebookresearch/parlai/tree/master/parlai/agents
 159. https://github.com/facebookresearch/parlai/tree/master/examples
 160. https://github.com/facebookresearch/parlai/blob/master/docs/source/\_static/img/tasks2.png
 161. https://github.com/facebookresearch/parlai/blob/master/parlai/tasks/task_list.py
 162. http://www.parl.ai/docs/tutorial_task.html
 163. https://github.com/facebookresearch/parlai/blob/master/docs/source/\_static/img/mturk.png
 164. http://parl.ai/docs/tutorial_mturk.html
 165. http://parl.ai/docs/tutorial_messenger.html
 166. https://github.com/facebookresearch/parlai/issues
 167. https://arxiv.org/abs/1705.06476
 168. https://github.com/site/terms
 169. https://github.com/site/privacy
 170. https://github.com/security
 171. https://githubstatus.com/
 172. https://help.github.com/
 173. https://github.com/contact
 174. https://github.com/pricing
 175. https://developer.github.com/
 176. https://training.github.com/
 177. https://github.blog/
 178. https://github.com/about
 179. https://github.com/facebookresearch/parlai
 180. https://github.com/facebookresearch/parlai

   hidden links:
 182. https://github.com/
 183. https://github.com/facebookresearch/parlai
 184. https://github.com/facebookresearch/parlai
 185. https://github.com/facebookresearch/parlai
 186. https://help.github.com/articles/which-remote-url-should-i-use
 187. https://github.com/facebookresearch/parlai#goals
 188. https://github.com/facebookresearch/parlai#properties
 189. https://github.com/facebookresearch/parlai#basic-examples
 190. https://github.com/facebookresearch/parlai#requirements
 191. https://github.com/facebookresearch/parlai#installing-parlai
 192. https://github.com/facebookresearch/parlai#worlds-agents-and-teachers
 193. https://github.com/facebookresearch/parlai#actions-and-observations
 194. https://github.com/facebookresearch/parlai#code
 195. https://github.com/facebookresearch/parlai#core
 196. https://github.com/facebookresearch/parlai#agents
 197. https://github.com/facebookresearch/parlai#examples
 198. https://github.com/facebookresearch/parlai#tasks
 199. https://github.com/facebookresearch/parlai#mturk
 200. https://github.com/facebookresearch/parlai#messenger
 201. https://github.com/facebookresearch/parlai#support
 202. https://github.com/facebookresearch/parlai#the-team
 203. https://github.com/facebookresearch/parlai#citation
 204. https://github.com/facebookresearch/parlai#license
 205. https://github.com/
