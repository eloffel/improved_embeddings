   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]artificial intelligence
   [7]become a member[8]sign in[9]get started

machine learning is fun!

the world   s easiest introduction to machine learning

   [10]go to the profile of adam geitgey
   [11]adam geitgey (button) blockedunblock (button) followfollowing
   may 5, 2014
     __________________________________________________________________

   update: this article is part of a series. check out the full series:
   [12]part 1, [13]part 2, [14]part 3, [15]part 4, [16]part 5, [17]part 6,
   [18]part 7 and [19]part 8! you can also read this article in [20]         ,
   [21]portugu  s, [22]portugu  s (alternate), [23]t  rk  e, [24]fran  ais,
   [25]          , [26]                        , [27]espa  ol (m  xico), [28]espa  ol (espa  a),
   [29]polski, [30]italiano, [31]         , [32]              , [33]          , [34]ti   ng
   vi   t or [35]          .

   giant update: [36]i   ve written a new book based on these articles! it
   not only expands and updates all my articles, but it has tons of brand
   new content and lots of hands-on coding projects. [37]check it out now!

   have you heard people talking about machine learning but only have a
   fuzzy idea of what that means? are you tired of nodding your way
   through conversations with co-workers? let   s change that!
     __________________________________________________________________

   this guide is for anyone who is curious about machine learning but has
   no idea where to start. i imagine there are a lot of people who tried
   reading [38]the wikipedia article, got frustrated and gave up wishing
   someone would just give them a high-level explanation. that   s what this
   is.

   the goal is be accessible to anyone         which means that there   s a lot of
   generalizations. but who cares? if this gets anyone more interested in
   ml, then mission accomplished.
     __________________________________________________________________

what is machine learning?

   machine learning is the idea that there are generic algorithms that can
   tell you something interesting about a set of data without you having
   to write any custom code specific to the problem. instead of writing
   code, you feed data to the generic algorithm and it builds its own
   logic based on the data.

   for example, one kind of algorithm is a classification algorithm. it
   can put data into different groups. the same classification algorithm
   used to recognize handwritten numbers could also be used to classify
   emails into spam and not-spam without changing a line of code. it   s the
   same algorithm but it   s fed different training data so it comes up with
   different classification logic.
   [1*yxiclxzdjqvjz0tqhcv5zw.png]
   this machine learning algorithm is a black box that can be re-used for
   lots of different classification problems.

      machine learning    is an umbrella term covering lots of these kinds of
   generic algorithms.

two kinds of machine learning algorithms

   you can think of machine learning algorithms as falling into one of two
   main categories         supervised learning and unsupervised learning. the
   difference is simple, but really important.

supervised learning

   let   s say you are a real estate agent. your business is growing, so you
   hire a bunch of new trainee agents to help you out. but there   s a
   problem         you can glance at a house and have a pretty good idea of what
   a house is worth, but your trainees don   t have your experience so they
   don   t know how to price their houses.

   to help your trainees (and maybe free yourself up for a vacation), you
   decide to write a little app that can estimate the value of a house in
   your area based on it   s size, neighborhood, etc, and what similar
   houses have sold for.

   so you write down every time someone sells a house in your city for 3
   months. for each house, you write down a bunch of details         number of
   bedrooms, size in square feet, neighborhood, etc. but most importantly,
   you write down the final sale price:
   [1*zwyx9nwsdfanow4jorhdkq.png]
   this is our    training data.   

   using that training data, we want to create a program that can estimate
   how much any other house in your area is worth:
   [1*v0oxzloptpu13mvvrlzjja.png]
   we want to use the training data to predict the prices of other houses.

   this is called supervised learning. you knew how much each house sold
   for, so in other words, you knew the answer to the problem and could
   work backwards from there to figure out the logic.

   to build your app, you feed your training data about each house into
   your machine learning algorithm. the algorithm is trying to figure out
   what kind of math needs to be done to make the numbers work out.

   this kind of like having the answer key to a math test with all the
   arithmetic symbols erased:
   [1*sihyxajqs3t6towqj6fzpw.png]
   oh no! a devious student erased the arithmetic symbols from the
   teacher   s answer key!

   from this, can you figure out what kind of math problems were on the
   test? you know you are supposed to    do something    with the numbers on
   the left to get each answer on the right.

   in supervised learning, you are letting the computer work out that
   relationship for you. and once you know what math was required to solve
   this specific set of problems, you could answer to any other problem of
   the same type!

unsupervised learning

   let   s go back to our original example with the real estate agent. what
   if you didn   t know the sale price for each house? even if all you know
   is the size, location, etc of each house, it turns out you can still do
   some really cool stuff. this is called unsupervised learning.
   [1*mujw2yl4-obi25xuks7_bg.png]
   even if you aren   t trying to predict an unknown number (like price),
   you can still do interesting things with machine learning.

   this is kind of like someone giving you a list of numbers on a sheet of
   paper and saying    i don   t really know what these numbers mean but maybe
   you can figure out if there is a pattern or grouping or
   something         good luck!   

   so what could do with this data? for starters, you could have an
   algorithm that automatically identified different market segments in
   your data. maybe you   d find out that home buyers in the neighborhood
   near the local college really like small houses with lots of bedrooms,
   but home buyers in the suburbs prefer 3-bedroom houses with lots of
   square footage. knowing about these different kinds of customers could
   help direct your marketing efforts.

   another cool thing you could do is automatically identify any outlier
   houses that were way different than everything else. maybe those
   outlier houses are giant mansions and you can focus your best sales
   people on those areas because they have bigger commissions.

   supervised learning is what we   ll focus on for the rest of this post,
   but that   s not because unsupervised learning is any less useful or
   interesting. in fact, unsupervised learning is becoming increasingly
   important as the algorithms get better because it can be used without
   having to label the data with the correct answer.

   side note: there are lots of [39]other types of machine learning
   algorithms. but this is a pretty good place to start.

that   s cool, but does being able to estimate the price of a house really
count as    learning   ?

   as a human, your brain can approach most any situation and learn how to
   deal with that situation without any explicit instructions. if you sell
   houses for a long time, you will instinctively have a    feel    for the
   right price for a house, the best way to market that house, the kind of
   client who would be interested, etc. the goal of [40]strong ai research
   is to be able to replicate this ability with computers.

   but current machine learning algorithms aren   t that good yet         they
   only work when focused a very specific, limited problem. maybe a better
   definition for    learning    in this case is    figuring out an equation to
   solve a specific problem based on some example data   .

   unfortunately    machine figuring out an equation to solve a specific
   problem based on some example data    isn   t really a great name. so we
   ended up with    machine learning    instead.

   of course if you are reading this 50 years in the future and we   ve
   figured out the algorithm for strong ai, then this whole post will all
   seem a little quaint. maybe stop reading and go tell your robot servant
   to go make you a sandwich, future human.

let   s write that program!

   so, how would you write the program to estimate the value of a house
   like in our example above? think about it for a second before you read
   further.

   if you didn   t know anything about machine learning, you   d probably try
   to write out some basic rules for estimating the price of a house like
   this:
def estimate_house_sales_price(num_of_bedrooms, sqft, neighborhood):
  price = 0
  # in my area, the average house costs $200 per sqft
  price_per_sqft = 200
  if neighborhood == "hipsterton":
    # but some areas cost a bit more
    price_per_sqft = 400
  elif neighborhood == "skid row":
    # and some areas cost less
    price_per_sqft = 100
  # start with a base price estimate based on how big the place is
  price = price_per_sqft * sqft
  # now adjust our estimate based on the number of bedrooms
  if num_of_bedrooms == 0:
    # studio apartments are cheap
    price = price         20000
  else:
    # places with more bedrooms are usually
    # more valuable
    price = price + (num_of_bedrooms * 1000)
 return price

   if you fiddle with this for hours and hours, you might end up with
   something that sort of works. but your program will never be perfect
   and it will be hard to maintain as prices change.

   wouldn   t it be better if the computer could just figure out how to
   implement this function for you? who cares what exactly the function
   does as long is it returns the correct number:
def estimate_house_sales_price(num_of_bedrooms, sqft, neighborhood):
  price = <computer, plz do some math for me>
  return price

   one way to think about this problem is that the price is a delicious
   stew and the ingredients are the number of bedrooms, the square footage
   and the neighborhood. if you could just figure out how much each
   ingredient impacts the final price, maybe there   s an exact ratio of
   ingredients to stir in to make the final price.

   that would reduce your original function (with all those crazy if   s and
   else   s) down to something really simple like this:
def estimate_house_sales_price(num_of_bedrooms, sqft, neighborhood):
 price = 0
 # a little pinch of this
 price += num_of_bedrooms * .841231951398213
 # and a big pinch of that
 price += sqft * 1231.1231231
 # maybe a handful of this
 price += neighborhood * 2.3242341421
 # and finally, just a little extra salt for good measure
 price += 201.23432095
 return price

   notice the magic numbers in bold         .841231951398213, 1231.1231231,
   2.3242341421, and 201.23432095. these are our weights. if we could just
   figure out the perfect weights to use that work for every house, our
   function could predict house prices!

   a dumb way to figure out the best weights would be something like this:

step 1:

   start with each weight set to 1.0:
def estimate_house_sales_price(num_of_bedrooms, sqft, neighborhood):
  price = 0
  # a little pinch of this
  price += num_of_bedrooms * 1.0
  # and a big pinch of that
  price += sqft * 1.0
  # maybe a handful of this
  price += neighborhood * 1.0
  # and finally, just a little extra salt for good measure
  price += 1.0
  return price

step 2:

   run every house you know about through your function and see how far
   off the function is at guessing the correct price for each house:
   [1*dih1jjrdpqf0njswka1qgw.png]
   use your function to predict a price for each house.

   for example, if the first house really sold for $250,000, but your
   function guessed it sold for $178,000, you are off by $72,000 for that
   single house.

   now add up the squared amount you are off for each house you have in
   your data set. let   s say that you had 500 home sales in your data set
   and the square of how much your function was off for each house was a
   grand total of $86,123,373. that   s how    wrong    your function currently
   is.

   now, take that sum total and divide it by 500 to get an average of how
   far off you are for each house. call this average error amount the cost
   of your function.

   if you could get this cost to be zero by playing with the weights, your
   function would be perfect. it would mean that in every case, your
   function perfectly guessed the price of the house based on the input
   data. so that   s our goal         get this cost to be as low as possible by
   trying different weights.

step 3:

   repeat step 2 over and over with every single possible combination of
   weights. whichever combination of weights makes the cost closest to
   zero is what you use. when you find the weights that work, you   ve
   solved the problem!

mind blowage time

   that   s pretty simple, right? well think about what you just did. you
   took some data, you fed it through three generic, really simple steps,
   and you ended up with a function that can guess the price of any house
   in your area. watch out, zillow!

   but here   s a few more facts that will blow your mind:
    1. research in many fields (like linguistics/translation) over the
       last 40 years has shown that these generic learning algorithms that
          stir the number stew    (a phrase i just made up) out-perform
       approaches where real people try to come up with explicit rules
       themselves. the    dumb    approach of machine learning eventually
       beats human experts.
    2. the function you ended up with is totally dumb. it doesn   t even
       know what    square feet    or    bedrooms    are. all it knows is that it
       needs to stir in some amount of those numbers to get the correct
       answer.
    3. it   s very likely you   ll have no idea why a particular set of
       weights will work. so you   ve just written a function that you don   t
       really understand but that you can prove will work.
    4. imagine that instead of taking in parameters like    sqft    and
          num_of_bedrooms   , your prediction function took in an array of
       numbers. let   s say each number represented the brightness of one
       pixel in an image captured by camera mounted on top of your car.
       now let   s say that instead of outputting a prediction called
          price   , the function outputted a prediction called
          degrees_to_turn_steering_wheel   . you   ve just made a function that
       can steer your car by itself!

   pretty crazy, right?

what about that whole    try every number    bit in step 3?

   ok, of course you can   t just try every combination of all possible
   weights to find the combo that works the best. that would literally
   take forever since you   d never run out of numbers to try.

   to avoid that, mathematicians have figured out lots of [41]clever ways
   to quickly find good values for those weights without having to try
   very many. here   s one way:

   first, write a simple equation that represents step #2 above:
   [1*4j82aaiugqkkumkchlmwjq.png]
   this is your cost function.

   now let   s re-write exactly the same equation, but using a bunch of
   machine learning math jargon (that you can ignore for now):
   [1*zybomovq5zov0ztc4a3usa.png]
      is what represents your current weights. j(  ) means the    cost for
   your current weights   .

   this equation represents how wrong our price estimating function is for
   the weights we currently have set.

   if we graph this cost equation for all possible values of our weights
   for number_of_bedrooms and sqft, we   d get a graph that might look
   something like this:
   [1*uorfgyflbsmtvfso9hli1a.png]
   the graph of our cost function looks like a bowl. the vertical axis
   represents the cost.

   in this graph, the lowest point in blue is where our cost is the
   lowest         thus our function is the least wrong. the highest points are
   where we are most wrong. so if we can find the weights that get us to
   the lowest point on this graph, we   ll have our answer!
   [1*prsh6efjmfqdmfelj1ht8g.png]

   so we just need to adjust our weights so we are    walking down hill    on
   this graph towards the lowest point. if we keep making small
   adjustments to our weights that are always moving towards the lowest
   point, we   ll eventually get there without having to try too many
   different weights.

   if you remember anything from calculus, you might remember that if you
   take the derivative of a function, it tells you the slope of the
   function   s tangent at any point. in other words, it tells us which way
   is downhill for any given point on our graph. we can use that knowledge
   to walk downhill.

   so if we calculate a partial derivative of our cost function with
   respect to each of our weights, then we can subtract that value from
   each weight. that will walk us one step closer to the bottom of the
   hill. keep doing that and eventually we   ll reach the bottom of the hill
   and have the best possible values for our weights. (if that didn   t make
   sense, don   t worry and keep reading).

   that   s a high level summary of one way to find the best weights for
   your function called batch id119. don   t be afraid to [42]dig
   deeper if you are interested on learning the details.

   when you use a machine learning library to solve a real problem, all of
   this will be done for you. but it   s still useful to have a good idea of
   what is happening.

what else did you conveniently skip over?

   the three-step algorithm i described is called multivariate linear
   regression. you are estimating the equation for a line that fits
   through all of your house data points. then you are using that equation
   to guess the sales price of houses you   ve never seen before based where
   that house would appear on your line. it   s a really powerful idea and
   you can solve    real    problems with it.

   but while the approach i showed you might work in simple cases, it
   won   t work in all cases. one reason is because house prices aren   t
   always simple enough to follow a continuous line.

   but luckily there are lots of ways to handle that. there are plenty of
   other machine learning algorithms that can handle non-linear data (like
   [43]neural networks or [44]id166s with [45]kernels). there are also ways
   to use id75 more cleverly that allow for more complicated
   lines to be fit. in all cases, the same basic idea of needing to find
   the best weights still applies.

   also, i ignored the idea of overfitting. it   s easy to come up with a
   set of weights that always works perfectly for predicting the prices of
   the houses in your original data set but never actually works for any
   new houses that weren   t in your original data set. but there are ways
   to deal with this (like [46]id173 and using a
   [47]cross-validation data set). learning how to deal with this issue is
   a key part of learning how to apply machine learning successfully.

   in other words, while the basic concept is pretty simple, it takes some
   skill and experience to apply machine learning and get useful results.
   but it   s a skill that any developer can learn!

is machine learning magic?

   once you start seeing how easily machine learning techniques can be
   applied to problems that seem really hard (like handwriting
   recognition), you start to get the feeling that you could use machine
   learning to solve any problem and get an answer as long as you have
   enough data. just feed in the data and watch the computer magically
   figure out the equation that fits the data!

   but it   s important to remember that machine learning only works if the
   problem is actually solvable with the data that you have.

   for example, if you build a model that predicts home prices based on
   the type of potted plants in each house, it   s never going to work.
   there just isn   t any kind of relationship between the potted plants in
   each house and the home   s sale price. so no matter how hard it tries,
   the computer can never deduce a relationship between the two.
   [1*n6pxrovoeoedfell2hdxba.png]
   you can only model relationships that actually exist.

   so remember, if a human expert couldn   t use the data to solve the
   problem manually, a computer probably won   t be able to either. instead,
   focus on problems where a human could solve the problem, but where it
   would be great if a computer could solve it much more quickly.

how to learn more about machine learning

   in my mind, the biggest problem with machine learning right now is that
   it mostly lives in the world of academia and commercial research
   groups. there isn   t a lot of easy to understand material out there for
   people who would like to get a broad understanding without actually
   becoming experts. but it   s getting a little better every day.

   if you want to try out what you   ve learned in this article, i made
   [48]a course that walks you through every step of this article,
   including writing all the code. give it a try!

   if you want to go deeper, andrew ng   s free [49]machine learning class
   on coursera is pretty amazing as a next step. i highly recommend it. it
   should be accessible to anyone who has a comp. sci. degree and who
   remembers a very minimal amount of math.

   also, you can play around with tons of machine learning algorithms by
   downloading and installing [50]scikit-learn. it   s a python framework
   that has    black box    versions of all the standard algorithms.
     __________________________________________________________________

   if you liked this article, please consider signing up for my machine
   learning is fun! newsletter:

   iframe: [51]/media/8e44dc920f5299cf3fffec4fa04c7b49?postid=80ea3ec3c471

   also, please check out the [52]full-length course version of this
   article. it covers everything in this article in more detail, including
   writing the actual code in python. you can get a free 30-day trial to
   watch the course [53]if you sign up with this link.

   you can also follow me on twitter at [54]@ageitgey, [55]email me
   directly or [56]find me on linkedin. i   d love to hear from you if i can
   help you or your team with machine learning.

   now continue on to [57]machine learning is fun part 2!

     * [58]machine learning

   (button)
   (button)
   (button) 67k claps
   (button) (button) (button) 225 (button) (button)

     (button) blockedunblock (button) followfollowing
   [59]go to the profile of adam geitgey

[60]adam geitgey

   interested in computers and machine learning. likes to write about it.

     * (button)
       (button) 67k
     * (button)
     *
     *

   [61]go to the profile of adam geitgey
   never miss a story from adam geitgey, when you sign up for medium.
   [62]learn more
   never miss a story from adam geitgey
   (button) blockedunblock (button) followget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://medium.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/80ea3ec3c471
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/topic/artificial-intelligence
   7. https://medium.com/membership?source=upgrade_membership---nav_full
   8. https://medium.com/m/signin?redirect=https://medium.com/@ageitgey/machine-learning-is-fun-80ea3ec3c471&source=--------------------------nav_reg&operation=login
   9. https://medium.com/m/signin?redirect=https://medium.com/@ageitgey/machine-learning-is-fun-80ea3ec3c471&source=--------------------------nav_reg&operation=register
  10. https://medium.com/@ageitgey?source=post_header_lockup
  11. https://medium.com/@ageitgey
  12. https://medium.com/@ageitgey/machine-learning-is-fun-80ea3ec3c471
  13. https://medium.com/@ageitgey/machine-learning-is-fun-part-2-a26a10b68df3
  14. https://medium.com/@ageitgey/machine-learning-is-fun-part-3-deep-learning-and-convolutional-neural-networks-f40359318721
  15. https://medium.com/@ageitgey/machine-learning-is-fun-part-4-modern-face-recognition-with-deep-learning-c3cffc121d78
  16. https://medium.com/@ageitgey/machine-learning-is-fun-part-5-language-translation-with-deep-learning-and-the-magic-of-sequences-2ace0acca0aa
  17. https://medium.com/@ageitgey/machine-learning-is-fun-part-6-how-to-do-speech-recognition-with-deep-learning-28293c162f7a
  18. https://medium.com/@ageitgey/abusing-generative-adversarial-networks-to-make-8-bit-pixel-art-e45d9b96cee7
  19. https://medium.com/@ageitgey/machine-learning-is-fun-part-8-how-to-intentionally-trick-neural-networks-b55da32b7196
  20. https://medium.com/ai-business/                        -part-1-f7a7957dbe3b#.wim44eo1e
  21. http://portal.tcu.gov.br/inovatcu/noticias/aprendizado-de-maquina-e-divertido.htm
  22. https://medium.com/@josenildo_silva/aprendizagem-de-m  quina-  -divertido-8fe1513ce59f
  23. https://medium.com/turkce/makine-    renimi-e  lencelidir-2ad33ae37bea
  24. https://medium.com/@alexis.anzieu/samuser-avec-le-machine-learning-a40159bb0546
  25. https://medium.com/@jongdae.lim/      -      -machine-learning-   -         -part-1-9a0297198ad8
  26. http://www.saif.online/single-post/2016/09/22/                -            -    -            -    -              -          -machine-learning
  27. https://blog.chatbot.mx/el-machine-learning-es-divertido-parte-1/
  28. http://www.jesushurtado.es/2016/12/12/machine-learning-espanol-divertido-parte-1/
  29. https://medium.com/@maciej.matyka/nauczanie-maszynowe-jest-zabawne-fc9af0080cda
  30. https://medium.com/botsupply/il-machine-learning-  -divertente-parte-1-97d4bce99a06
  31. https://zhuanlan.zhihu.com/p/24339995
  32. http://algotravelling.com/ru/                -                -      -            -1/
  33. https://medium.com/@jongdae.lim/      -      -machine-learning-   -         -part-1-9a0297198ad8
  34. https://viblo.asia/p/machine-learning-that-thu-vi-1-du-doan-gia-nha-dat-gam5y91w5db
  35. http://zerotohero.ir/8984/              -          -    -        -        -      -      
  36. https://www.machinelearningisfun.com/get-the-book/
  37. https://www.machinelearningisfun.com/get-the-book/
  38. http://en.wikipedia.org/wiki/machine_learning
  39. http://en.wikipedia.org/wiki/machine_learning#algorithm_types
  40. http://en.wikipedia.org/wiki/strong_ai
  41. http://en.wikipedia.org/wiki/gradient_descent
  42. http://hbfs.wordpress.com/2012/04/24/introduction-to-gradient-descent/
  43. http://en.wikipedia.org/wiki/artificial_neural_network
  44. http://en.wikipedia.org/wiki/support_vector_machine
  45. http://en.wikipedia.org/wiki/kernel_trick
  46. http://en.wikipedia.org/wiki/id173_(mathematics)#id173_in_statistics_and_machine_learning
  47. http://en.wikipedia.org/wiki/cross-validation_(statistics)
  48. https://www.lynda.com/data-science-tutorials/machine-learning-essential-training-value-estimations/548594-2.html?lpk35=9149&utm_medium=ldc-partner&utm_source=cmprc&utm_content=524&utm_campaign=cd20575&bid=524&aid=cd20575
  49. https://www.coursera.org/course/ml
  50. http://scikit-learn.org/stable/
  51. https://medium.com/media/8e44dc920f5299cf3fffec4fa04c7b49?postid=80ea3ec3c471
  52. https://www.lynda.com/data-science-tutorials/machine-learning-essential-training-value-estimations/548594-2.html?lpk35=9149&utm_medium=ldc-partner&utm_source=cmprc&utm_content=524&utm_campaign=cd20575&bid=524&aid=cd20575
  53. https://www.lynda.com/trial/adamgeitgey
  54. https://twitter.com/ageitgey
  55. mailto:ageitgey@gmail.com
  56. https://www.linkedin.com/in/ageitgey
  57. https://medium.com/@ageitgey/machine-learning-is-fun-part-2-a26a10b68df3
  58. https://medium.com/tag/machine-learning?source=post
  59. https://medium.com/@ageitgey?source=footer_card
  60. https://medium.com/@ageitgey
  61. https://medium.com/@ageitgey
  62. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  64. https://medium.com/p/80ea3ec3c471/share/twitter
  65. https://medium.com/p/80ea3ec3c471/share/facebook
  66. https://medium.com/p/80ea3ec3c471/share/twitter
  67. https://medium.com/p/80ea3ec3c471/share/facebook
