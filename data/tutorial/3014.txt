
     * home

   [1]home
   [2]about pyke
   [3]logic programming
   [4]knowledge bases
   [5]pyke syntax
   [6]using pyke
   [7]examples
   [8]pycon 2008 paper
   [9]pyke project page
   please make a donation:
   [10]support this project
   hosted by:
   [11]get python knowledge engine (pyke) at sourceforge.net. fast, secure
   and free open source software downloads

welcome to pyke

release 1.1

   pyke introduces a form of [12]logic programming (inspired by
   [13]prolog) to the python community by providing a knowledge-based
   id136 engine (expert system) written in 100% python.

   unlike prolog, pyke integrates with python allowing you to invoke pyke
   from python and intermingle python statements and expressions within
   your expert system rules.

   pyke was developed to significantly raise the bar on code reuse. here's
   how it works:
    1. you write a set of python functions, and a set of pyke [14]rules to
       direct the configuration and combination of these functions.
    2. these functions refer to pyke [15]pattern variables within the
       function body.
    3. pyke may instantiate each of your functions multiple times,
       providing a different set of constant values for each of the
       pattern variables used within the function body. each of these
       instances appears as a different function.
    4. pyke then automatically assembles these customized functions into a
       complete program (function call graph) to meet a specific need or
       use case. pyke calls this function call graph a [16]plan.

   in this way, pyke provides a way to radically customize and adapt your
   python code for a specific purpose or use case.

   doing this essentially makes pyke a very high-level compiler. and
   taking this approach also produces dramatic increases in performance.

   and pyke is very successful at this, providing order of magnitude
   improvements in:
     * code adaptability (or customization),
     * code reuse and
     * performance

   pyke does not replace python, nor is meant to compete with python.
   python is an excellent general purpose programming language, that
   allows you to "program in the small".

   pyke builds upon python by also giving you tools to directly
   [17]program in the large.

   oh, and pyke uses logic programming to do all of this. so if you're
   interested in logic programming or id109, well pyke has that
   too...

pyke on google groups

   please join [18]pyke on google groups for questions and discussion!

faq

   there is also an [19]faq list on the sourceforge [20]wiki, to make it
   easy to contribute.

more:

   [21]about pyke

   what pyke does for you, its features, steps to using pyke and
   installation.
   [22]logic programming tutorial

   a tutorial on logic programming in pyke, including statements, pattern
   matching and rules.
   [23]knowledge bases

   knowledge is made up of both facts and rules. these are gathered into
   named repositories called knowledge bases.
   [24]pyke syntax

   the syntax of pyke's three different kinds of source files.
   [25]using pyke

   how your python program calls pyke.
   [26]examples

   an overview of the examples provided with pyke.
   [27]applying expert system technology to code reuse with pyke

   paper presented at the pycon 2008 conference in chicago.
   copyright    2007-2009 bruce frederiksen

   page last modified thu, mar 04 2010.

references

   1. http://pyke.sourceforge.net/index.html
   2. http://pyke.sourceforge.net/about_pyke/index.html
   3. http://pyke.sourceforge.net/logic_programming/index.html
   4. http://pyke.sourceforge.net/knowledge_bases/index.html
   5. http://pyke.sourceforge.net/pyke_syntax/index.html
   6. http://pyke.sourceforge.net/using_pyke/index.html
   7. http://pyke.sourceforge.net/examples.html
   8. http://pyke.sourceforge.net/pycon2008-paper.html
   9. http://sourceforge.net/projects/pyke/
  10. http://sourceforge.net/donate/index.php?group_id=207724
  11. http://sourceforge.net/projects/pyke
  12. http://en.wikipedia.org/wiki/logic_programming
  13. http://en.wikipedia.org/wiki/prolog
  14. http://pyke.sourceforge.net/logic_programming/rules/backward_chaining.html
  15. http://pyke.sourceforge.net/logic_programming/pattern_matching/pattern_variables.html
  16. http://pyke.sourceforge.net/logic_programming/plans.html
  17. http://portal.acm.org/citation.cfm?id=808431
  18. http://groups.google.com/group/pyke
  19. http://sourceforge.net/apps/trac/pyke/wiki/faq
  20. http://sourceforge.net/apps/trac/pyke/wiki
  21. http://pyke.sourceforge.net/about_pyke/index.html
  22. http://pyke.sourceforge.net/logic_programming/index.html
  23. http://pyke.sourceforge.net/knowledge_bases/index.html
  24. http://pyke.sourceforge.net/pyke_syntax/index.html
  25. http://pyke.sourceforge.net/using_pyke/index.html
  26. http://pyke.sourceforge.net/examples.html
  27. http://pyke.sourceforge.net/pycon2008-paper.html
