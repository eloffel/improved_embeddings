   (button) toggle navigation
   [1][nav_logo.svg?v=479cefe8d932fb14a67b93911b97d70f]
     * [2]jupyter
     * [3]faq
     * [4]view as code
     * [5]python 3 kernel
     * [6]download notebook

   python

sympy[7]  

   sympy is a package for symbolic calculations in python, similar to
   mathematica. it works with expressions containing symbols.
   in [1]:
from sympy import *
init_printing()

   symbols are basic bricks used to construct expressions. each symbol has
   a name used for printing expressions. objects of the class symbol
   should be created and assigned to python variables in order to be used
   in expressions. the symbol name and the name of the variable to which
   this symbol is assigned are two independent things, and one may write
   abc=symbol('xyz'). but then one has to write abc in input expressions,
   while sympy will write xyz in output ones, producing unnecessary
   confusion. the python variable name should better be the same as the
   symbol name.

   in languages specifically designed for symbolic calculations, such as
   mathematica, if a variable to which nothing has been assigned is used,
   it automatically means a symbol with the same name. python has not been
   designed for symbolic calculations. if you use a variable to which
   nothing has been assigned, you will get an error message. symbol
   objects have to be created explicitly.
   in [2]:
x=symbol('x')

   in [3]:
a=x**2-1
a

   out[3]:
   $$x^{2} - 1$$

   several symbols can be defined at once. the string is split at spaces.
   in [4]:
y,z=symbols('y z')

   let's substitute $y+1$ for $x$.
   in [5]:
a.subs(x,y+1)

   out[5]:
   $$\left(y + 1\right)^{2} - 1$$

polynomials and rational functions[8]  

   sympy does not expand brackets automatically. the function expand is
   used for this.
   in [6]:
a=(x+y-z)**6
a

   out[6]:
   $$\left(x + y - z\right)^{6}$$
   in [7]:
a=expand(a)
a

   out[7]:
   $$x^{6} + 6 x^{5} y - 6 x^{5} z + 15 x^{4} y^{2} - 30 x^{4} y z + 15
   x^{4} z^{2} + 20 x^{3} y^{3} - 60 x^{3} y^{2} z + 60 x^{3} y z^{2} - 20
   x^{3} z^{3} + 15 x^{2} y^{4} - 60 x^{2} y^{3} z + 90 x^{2} y^{2} z^{2}
   - 60 x^{2} y z^{3} + 15 x^{2} z^{4} + 6 x y^{5} - 30 x y^{4} z + 60 x
   y^{3} z^{2} - 60 x y^{2} z^{3} + 30 x y z^{4} - 6 x z^{5} + y^{6} - 6
   y^{5} z + 15 y^{4} z^{2} - 20 y^{3} z^{3} + 15 y^{2} z^{4} - 6 y z^{5}
   + z^{6}$$

   degree of the polynomial $a$ in $x$.
   in [8]:
degree(a,x)

   out[8]:
   $$6$$

   let's collect terms with same power of $x$ together.
   in [9]:
collect(a,x)

   out[9]:
   $$x^{6} + x^{5} \left(6 y - 6 z\right) + x^{4} \left(15 y^{2} - 30 y z
   + 15 z^{2}\right) + x^{3} \left(20 y^{3} - 60 y^{2} z + 60 y z^{2} - 20
   z^{3}\right) + x^{2} \left(15 y^{4} - 60 y^{3} z + 90 y^{2} z^{2} - 60
   y z^{3} + 15 z^{4}\right) + x \left(6 y^{5} - 30 y^{4} z + 60 y^{3}
   z^{2} - 60 y^{2} z^{3} + 30 y z^{4} - 6 z^{5}\right) + y^{6} - 6 y^{5}
   z + 15 y^{4} z^{2} - 20 y^{3} z^{3} + 15 y^{2} z^{4} - 6 y z^{5} +
   z^{6}$$

   any polynomial with integer coefficients can be factorized into
   polynomials with integer coefficients (which cannot be factorized
   further). there exist efficient algorithms to do this.
   in [10]:
a=factor(a)
a

   out[10]:
   $$\left(x + y - z\right)^{6}$$

   sympy does not automatically cancel ratios of polynomials by their
   greatest common divisor. the function cancel is used for this.
   in [11]:
a=(x**3-y**3)/(x**2-y**2)
a

   out[11]:
   $$\frac{x^{3} - y^{3}}{x^{2} - y^{2}}$$
   in [12]:
cancel(a)

   out[12]:
   $$\frac{x^{2} + x y + y^{2}}{x + y}$$

   sympy does not automatically bring sums of rational expressions to
   common denominator. the function together is used for this.
   in [13]:
a=y/(x-y)+x/(x+y)
a

   out[13]:
   $$\frac{x}{x + y} + \frac{y}{x - y}$$
   in [14]:
together(a)

   out[14]:
   $$\frac{x \left(x - y\right) + y \left(x + y\right)}{\left(x - y\right)
   \left(x + y\right)}$$

   the function simplify tries to rewrite an expression in a simplest
   form. this concept is not well defined (different forms may be
   considered simplest in different contexts), and there exists no
   algorithm for such simplification. the function simplify works
   heuristically, and it is not possible to guess in advance what
   simplifications it will try. it is very convenient in interactive
   sessions in order to check if it will succeed in rewriting an
   expression in some reasonably good form. but it is not desirable to use
   it in programs. there one should better use more specialized functions
   which perform well defined expression transformations.
   in [15]:
simplify(a)

   out[15]:
   $$\frac{x^{2} + y^{2}}{x^{2} - y^{2}}$$

   partial fraction decomposition with respect to $x$.
   in [16]:
apart(a,x)

   out[16]:
   $$- \frac{y}{x + y} + \frac{y}{x - y} + 1$$

   let's substitute some values for the symbils $x$ and $y$.
   in [17]:
a=a.subs({x:1,y:2})
a

   out[17]:
   $$- \frac{5}{3}$$

   and how much is it numerically?
   in [18]:
a.n()

   out[18]:
   $$-1.66666666666667$$

elementary functions[9]  

   sympy automatically applies simplifications of elementary functions
   which are correct everywhere.
   in [19]:
sin(-x)

   out[19]:
   $$- \sin{\left (x \right )}$$
   in [20]:
cos(pi/4),tan(5*pi/6)

   out[20]:
   $$\left ( \frac{\sqrt{2}}{2}, \quad - \frac{\sqrt{3}}{3}\right )$$

   sympy can work with floating point numbers having arbitrarily high
   precision. here is $\pi$ with 100 significant digits.
   in [21]:
pi.n(100)

   out[21]:
   $$3.1415926535897932384626433832795028841971693993751058209749445923078
   16406286208998628034825342117068$$

   e is the base of natural logarithms.
   in [22]:
log(1),log(e)

   out[22]:
   $$\left ( 0, \quad 1\right )$$
   in [23]:
exp(log(x)),log(exp(x))

   out[23]:
   $$\left ( x, \quad \log{\left (e^{x} \right )}\right )$$

   why not $x$? try $x=2\pi i$.
   in [24]:
sqrt(0)

   out[24]:
   $$0$$
   in [25]:
sqrt(x)**4,sqrt(x**4)

   out[25]:
   $$\left ( x^{2}, \quad \sqrt{x^{4}}\right )$$

   why not $x^2$? try $x=i$.

   symbols can have certain properties. e.g., they can be positive. then
   sympy can simplify square roots better.
   in [26]:
p,q=symbols('p q',positive=true)
sqrt(p**2)

   out[26]:
   $$p$$
   in [27]:
sqrt(12*x**2*y),sqrt(12*p**2*y)

   out[27]:
   $$\left ( 2 \sqrt{3} \sqrt{x^{2} y}, \quad 2 \sqrt{3} p \sqrt{y}\right
   )$$

   let the symbol $n$ be integer (i is the imaginary unit).
   in [28]:
n=symbol('n',integer=true)
exp(2*pi*i*n)

   out[28]:
   $$1$$

   the method rewrite tries to rewrite an expression in terms of a given
   function.
   in [29]:
cos(x).rewrite(exp),exp(i*x).rewrite(cos)

   out[29]:
   $$\left ( \frac{e^{i x}}{2} + \frac{1}{2} e^{- i x}, \quad i \sin{\left
   (x \right )} + \cos{\left (x \right )}\right )$$
   in [30]:
asin(x).rewrite(log)

   out[30]:
   $$- i \log{\left (i x + \sqrt{- x^{2} + 1} \right )}$$

   the function trigsimp tries to rewrite a trigonometric expression in a
   simplest form. in programs it is better to use more specialized
   functions.
   in [31]:
trigsimp(2*sin(x)**2+3*cos(x)**2)

   out[31]:
   $$\cos^{2}{\left (x \right )} + 2$$

   the function expand_trig expands sines and cosines of sums and multiple
   angles.
   in [32]:
expand_trig(sin(x-y)),expand_trig(sin(2*x))

   out[32]:
   $$\left ( \sin{\left (x \right )} \cos{\left (y \right )} - \sin{\left
   (y \right )} \cos{\left (x \right )}, \quad 2 \sin{\left (x \right )}
   \cos{\left (x \right )}\right )$$

   the inverse transformation, rewriting products and powers of sines and
   cosines into expressions linear in these functions, is needed more
   often. suppose we work with a truncated fourier series.
   in [33]:
a1,a2,b1,b2=symbols('a1 a2 b1 b2')
a=a1*cos(x)+a2*cos(2*x)+b1*sin(x)+b2*sin(2*x)
a

   out[33]:
   $$a_{1} \cos{\left (x \right )} + a_{2} \cos{\left (2 x \right )} +
   b_{1} \sin{\left (x \right )} + b_{2} \sin{\left (2 x \right )}$$

   we want to square it and get a truncated fourier series again.
   in [34]:
a=(a**2).rewrite(exp).expand().rewrite(cos).expand()
a

   out[34]:
   $$\frac{a_{1}^{2}}{2} \cos{\left (2 x \right )} + \frac{a_{1}^{2}}{2} +
   a_{1} a_{2} \cos{\left (x \right )} + a_{1} a_{2} \cos{\left (3 x
   \right )} + a_{1} b_{1} \sin{\left (2 x \right )} + a_{1} b_{2}
   \sin{\left (x \right )} + a_{1} b_{2} \sin{\left (3 x \right )} +
   \frac{a_{2}^{2}}{2} \cos{\left (4 x \right )} + \frac{a_{2}^{2}}{2} -
   a_{2} b_{1} \sin{\left (x \right )} + a_{2} b_{1} \sin{\left (3 x
   \right )} + a_{2} b_{2} \sin{\left (4 x \right )} - \frac{b_{1}^{2}}{2}
   \cos{\left (2 x \right )} + \frac{b_{1}^{2}}{2} + b_{1} b_{2}
   \cos{\left (x \right )} - b_{1} b_{2} \cos{\left (3 x \right )} -
   \frac{b_{2}^{2}}{2} \cos{\left (4 x \right )} + \frac{b_{2}^{2}}{2}$$
   in [35]:
a.collect([cos(x),cos(2*x),cos(3*x),sin(x),sin(2*x),sin(3*x)])

   out[35]:
   $$\frac{a_{1}^{2}}{2} + a_{1} b_{1} \sin{\left (2 x \right )} +
   \frac{a_{2}^{2}}{2} \cos{\left (4 x \right )} + \frac{a_{2}^{2}}{2} +
   a_{2} b_{2} \sin{\left (4 x \right )} + \frac{b_{1}^{2}}{2} -
   \frac{b_{2}^{2}}{2} \cos{\left (4 x \right )} + \frac{b_{2}^{2}}{2} +
   \left(\frac{a_{1}^{2}}{2} - \frac{b_{1}^{2}}{2}\right) \cos{\left (2 x
   \right )} + \left(a_{1} a_{2} - b_{1} b_{2}\right) \cos{\left (3 x
   \right )} + \left(a_{1} a_{2} + b_{1} b_{2}\right) \cos{\left (x \right
   )} + \left(a_{1} b_{2} - a_{2} b_{1}\right) \sin{\left (x \right )} +
   \left(a_{1} b_{2} + a_{2} b_{1}\right) \sin{\left (3 x \right )}$$

   the function expand_log transforms logarithms of products and powers
   (of positive quantities) into sums of logarithms; logcombine performs
   the inverse transformation.
   in [36]:
a=expand_log(log(p*q**2))
a

   out[36]:
   $$\log{\left (p \right )} + 2 \log{\left (q \right )}$$
   in [37]:
logcombine(a)

   out[37]:
   $$\log{\left (p q^{2} \right )}$$

   the function expand_power_exp rewrites powers whose exponents are sums
   via products of powers.
   in [38]:
expand_power_exp(x**(p+q))

   out[38]:
   $$x^{p} x^{q}$$

   the function expand_power_base rewrites powers whose bases are products
   via products of powers.
   in [39]:
expand_power_base((x*y)**n)

   out[39]:
   $$x^{n} y^{n}$$

   the function powsimp performs the inverse transformations.
   in [40]:
powsimp(exp(x)*exp(2*y)),powsimp(x**n*y**n)

   out[40]:
   $$\left ( e^{x + 2 y}, \quad \left(x y\right)^{n}\right )$$

   new symbolic functions can be introduced. they may have an arbitrary
   numbers of arguments.
   in [41]:
f=function('f')
f(x)+f(x,y)

   out[41]:
   $$f{\left (x \right )} + f{\left (x,y \right )}$$

expression structure[10]  

   internally expressions are are trees. the function srepr returns a
   string representing this tree.
   in [42]:
srepr(x+1)

   out[42]:
"add(symbol('x'), integer(1))"

   in [43]:
srepr(x-1)

   out[43]:
"add(symbol('x'), integer(-1))"

   in [44]:
srepr(x-y)

   out[44]:
"add(symbol('x'), mul(integer(-1), symbol('y')))"

   in [45]:
srepr(2*x*y/3)

   out[45]:
"mul(rational(2, 3), symbol('x'), symbol('y'))"

   in [46]:
srepr(x/y)

   out[46]:
"mul(symbol('x'), pow(symbol('y'), integer(-1)))"

   one may use the functions add, mul, pow, etc. instead of the binary
   operations +, *, **, etc.
   in [47]:
mul(x,pow(y,-1))

   out[47]:
   $$\frac{x}{y}$$
   in [48]:
srepr(f(x,y))

   out[48]:
"function('f')(symbol('x'), symbol('y'))"

   the attribute func is the top-level function of an expression, and args
   is the list of its agruments.
   in [49]:
a=2*x*y**2
a.func

   out[49]:
sympy.core.mul.mul

   in [50]:
a.args

   out[50]:
   $$\left ( 2, \quad x, \quad y^{2}\right )$$
   in [51]:
for i in a.args:
    print(i)

2
x
y**2

   the function subs substitutes an expression for a symbol.
   in [52]:
a.subs(y,2)

   out[52]:
   $$8 x$$

   it can perform substitutions for several symbols. to this end, one
   calls it with a list of tuples or a dictionary.
   in [53]:
a.subs([(x,pi),(y,2)])

   out[53]:
   $$8 \pi$$
   in [54]:
a.subs({x:pi,y:2})

   out[54]:
   $$8 \pi$$

   it can substitute not only for a symbol but also for a subexpression -
   a function with arguments.
   in [55]:
a=f(x)+f(y)
a.subs(f(y),1)

   out[55]:
   $$f{\left (x \right )} + 1$$
   in [56]:
(2*x*y*z).subs(x*y,z)

   out[56]:
   $$2 z^{2}$$
   in [57]:
(x+x**2+x**3+x**4).subs(x**2,y)

   out[57]:
   $$x^{3} + x + y^{2} + y$$

   substitutions are performed sequentially. in this case, first $x$ is
   replaced by $y$ producing $y^3+y^2$; then $y$ is replaced by $x$ in
   this result.
   in [58]:
a=x**2+y**3
a.subs([(x,y),(y,x)])

   out[58]:
   $$x^{3} + x^{2}$$

   interchanging these substitutions leads to a different result.
   in [59]:
a.subs([(y,x),(x,y)])

   out[59]:
   $$y^{3} + y^{2}$$

   but if one calls subs with the keyword parameter simultaneous=true, all
   substitutions are preformed simultaneously. in this way one can, e.g.,
   interchange $x$ and $y$.
   in [60]:
a.subs([(x,y),(y,x)],simultaneous=true)

   out[60]:
   $$x^{3} + y^{2}$$

   a function can be replaced by another function.
   in [61]:
g=function('g')
a=f(x)+f(y)
a.subs(f,g)

   out[61]:
   $$g{\left (x \right )} + g{\left (y \right )}$$

   the method replace searches for subexpressions matching a pattern (with
   wildcards) and replaces them by a given expression.
   in [62]:
a=wild('a')
(f(x)+f(x+y)).replace(f(a),a**2)

   out[62]:
   $$x^{2} + \left(x + y\right)^{2}$$
   in [63]:
(f(x,x)+f(x,y)).replace(f(a,a),a**2)

   out[63]:
   $$x^{2} + f{\left (x,y \right )}$$
   in [64]:
a=x**2+y**2
a.replace(x,x+1)

   out[64]:
   $$y^{2} + \left(x + 1\right)^{2}$$

   only a complete subtree can match a pattern, not a subset of factors in
   a product or a smaller power in a larger one.
   in [65]:
a=2*x*y*z
a.replace(x*y,z)

   out[65]:
   $$2 x y z$$
   in [66]:
(x+x**2+x**3+x**4).replace(x**2,y)

   out[66]:
   $$x^{4} + x^{3} + x + y$$

solving equations[11]  

   in [67]:
a,b,c,d,e,f=symbols('a b c d e f')

   an equation is represented by the function eq with two arguments. the
   function solve returns a list of solutions.
   in [68]:
solve(eq(a*x,b),x)

   out[68]:
   $$\left [ \frac{b}{a}\right ]$$

   instead of equations, one may pass just expressions to solve; they mean
   equations <expression>=0.
   in [69]:
solve(a*x+b,x)

   out[69]:
   $$\left [ - \frac{b}{a}\right ]$$

   a square equation has 2 solutions.
   in [70]:
solve(a*x**2+b*x+c,x)

   out[70]:
   $$\left [ \frac{1}{2 a} \left(- b + \sqrt{- 4 a c + b^{2}}\right),
   \quad - \frac{1}{2 a} \left(b + \sqrt{- 4 a c + b^{2}}\right)\right ]$$

   a system of linear equations.
   in [71]:
solve([a*x+b*y-e,c*x+d*y-f],[x,y])

   out[71]:
   $$\left \{ x : \frac{- b f + d e}{a d - b c}, \quad y : \frac{a f - c
   e}{a d - b c}\right \}$$

   the function roots returns roots of a polynomial together with their
   multiplicities.
   in [72]:
roots(x**3-3*x+2,x)

   out[72]:
   $$\left \{ -2 : 1, \quad 1 : 2\right \}$$

   the function solve_poly_system solves systems of polynomial equations
   by constructing their gr  bner bases.
   in [73]:
p1=x**2+y**2-1
p2=4*x*y-1
solve_poly_system([p1,p2],x,y)

   out[73]:
   $$\left [ \left ( 4 \left(-1 - \sqrt{- \frac{\sqrt{3}}{4} +
   \frac{1}{2}}\right) \sqrt{- \frac{\sqrt{3}}{4} + \frac{1}{2}} \left(-
   \sqrt{- \frac{\sqrt{3}}{4} + \frac{1}{2}} + 1\right), \quad - \sqrt{-
   \frac{\sqrt{3}}{4} + \frac{1}{2}}\right ), \quad \left ( - 4 \left(-1 +
   \sqrt{- \frac{\sqrt{3}}{4} + \frac{1}{2}}\right) \sqrt{-
   \frac{\sqrt{3}}{4} + \frac{1}{2}} \left(\sqrt{- \frac{\sqrt{3}}{4} +
   \frac{1}{2}} + 1\right), \quad \sqrt{- \frac{\sqrt{3}}{4} +
   \frac{1}{2}}\right ), \quad \left ( 4 \left(-1 -
   \sqrt{\frac{\sqrt{3}}{4} + \frac{1}{2}}\right) \sqrt{\frac{\sqrt{3}}{4}
   + \frac{1}{2}} \left(- \sqrt{\frac{\sqrt{3}}{4} + \frac{1}{2}} +
   1\right), \quad - \sqrt{\frac{\sqrt{3}}{4} + \frac{1}{2}}\right ),
   \quad \left ( - 4 \left(-1 + \sqrt{\frac{\sqrt{3}}{4} +
   \frac{1}{2}}\right) \sqrt{\frac{\sqrt{3}}{4} + \frac{1}{2}}
   \left(\sqrt{\frac{\sqrt{3}}{4} + \frac{1}{2}} + 1\right), \quad
   \sqrt{\frac{\sqrt{3}}{4} + \frac{1}{2}}\right )\right ]$$

series[12]  

   in [74]:
exp(x).series(x,0,5)

   out[74]:
   $$1 + x + \frac{x^{2}}{2} + \frac{x^{3}}{6} + \frac{x^{4}}{24} +
   \mathcal{o}\left(x^{5}\right)$$

   a series can start from a negative power.
   in [75]:
cot(x).series(x,n=5)

   out[75]:
   $$\frac{1}{x} - \frac{x}{3} - \frac{x^{3}}{45} +
   \mathcal{o}\left(x^{5}\right)$$

   and even run over half-integer powers.
   in [76]:
sqrt(x*(1-x)).series(x,n=5)

   out[76]:
   $$\sqrt{x} - \frac{x^{\frac{3}{2}}}{2} - \frac{x^{\frac{5}{2}}}{8} -
   \frac{x^{\frac{7}{2}}}{16} - \frac{5 x^{\frac{9}{2}}}{128} +
   \mathcal{o}\left(x^{5}\right)$$
   in [77]:
log(gamma(1+x)).series(x,n=6).rewrite(zeta)

   out[77]:
   $$- \gamma x + \frac{\pi^{2} x^{2}}{12} - \frac{x^{3}
   \zeta\left(3\right)}{3} + \frac{\pi^{4} x^{4}}{360} - \frac{x^{5}
   \zeta\left(5\right)}{5} + \mathcal{o}\left(x^{6}\right)$$

   let's prepare 3 series.
   in [78]:
sinx=series(sin(x),x,0,8)
sinx

   out[78]:
   $$x - \frac{x^{3}}{6} + \frac{x^{5}}{120} - \frac{x^{7}}{5040} +
   \mathcal{o}\left(x^{8}\right)$$
   in [79]:
cosx=series(cos(x),x,n=8)
cosx

   out[79]:
   $$1 - \frac{x^{2}}{2} + \frac{x^{4}}{24} - \frac{x^{6}}{720} +
   \mathcal{o}\left(x^{8}\right)$$
   in [80]:
tanx=series(tan(x),x,n=8)
tanx

   out[80]:
   $$x + \frac{x^{3}}{3} + \frac{2 x^{5}}{15} + \frac{17 x^{7}}{315} +
   \mathcal{o}\left(x^{8}\right)$$

   products and ratios of series are not calculated automatically, the
   function series should be applied to them.
   in [81]:
series(tanx*cosx,n=8)

   out[81]:
   $$x - \frac{x^{3}}{6} + \frac{x^{5}}{120} - \frac{x^{7}}{5040} +
   \mathcal{o}\left(x^{8}\right)$$
   in [82]:
series(sinx/cosx,n=8)

   out[82]:
   $$x + \frac{x^{3}}{3} + \frac{2 x^{5}}{15} + \frac{17 x^{7}}{315} +
   \mathcal{o}\left(x^{8}\right)$$

   and this series should be equal to 1. but since sinx and cosx are known
   only with a limited accuracy, we obtain 1 with the same accuracy.
   in [83]:
series(sinx**2+cosx**2,n=8)

   out[83]:
   $$1 + \mathcal{o}\left(x^{8}\right)$$

   here the leading terms have canceled, and the result can be obtained
   only with a lower accuracy.
   in [84]:
series((1-cosx)/x**2,n=6)

   out[84]:
   $$\frac{1}{2} - \frac{x^{2}}{24} + \frac{x^{4}}{720} +
   \mathcal{o}\left(x^{6}\right)$$

   series can be differentiated and integrated.
   in [85]:
diff(sinx,x)

   out[85]:
   $$1 - \frac{x^{2}}{2} + \frac{x^{4}}{24} - \frac{x^{6}}{720} +
   \mathcal{o}\left(x^{7}\right)$$
   in [86]:
integrate(cosx,x)

   out[86]:
   $$x - \frac{x^{3}}{6} + \frac{x^{5}}{120} - \frac{x^{7}}{5040} +
   \mathcal{o}\left(x^{9}\right)$$

   a series (starting from a small term) can be substituted for an
   expansion variable in another series. here are $\sin(\tan(x))$ and
   $\tan(\sin(x))$.
   in [87]:
st=series(sinx.subs(x,tanx),n=8)
st

   out[87]:
   $$x + \frac{x^{3}}{6} - \frac{x^{5}}{40} - \frac{55 x^{7}}{1008} +
   \mathcal{o}\left(x^{8}\right)$$
   in [88]:
ts=series(tanx.subs(x,sinx),n=8)
ts

   out[88]:
   $$x + \frac{x^{3}}{6} - \frac{x^{5}}{40} - \frac{107 x^{7}}{5040} +
   \mathcal{o}\left(x^{8}\right)$$
   in [89]:
series(ts-st,n=8)

   out[89]:
   $$\frac{x^{7}}{30} + \mathcal{o}\left(x^{8}\right)$$

   it is not possible to substitute a numerical value for the expansion
   variable in a series (and hence to plot it). to this end one has to
   remove the $\mathcal{o}$ term first, transforming a series into a
   polynomial.
   in [90]:
sinx.removeo()

   out[90]:
   $$- \frac{x^{7}}{5040} + \frac{x^{5}}{120} - \frac{x^{3}}{6} + x$$

derivatives[13]  

   in [91]:
a=x*sin(x+y)
diff(a,x)

   out[91]:
   $$x \cos{\left (x + y \right )} + \sin{\left (x + y \right )}$$
   in [92]:
diff(a,y)

   out[92]:
   $$x \cos{\left (x + y \right )}$$

   the second derivative in $x$ and the first one in $y$.
   in [93]:
diff(a,x,2,y)

   out[93]:
   $$- x \cos{\left (x + y \right )} + 2 \sin{\left (x + y \right )}$$

   expressions with undefined functions can be differentiated.
   in [94]:
a=x*f(x**2)
b=diff(a,x)
b

   out[94]:
   $$2 x^{2} \left. \frac{d}{d \xi_{1}} f{\left (\xi_{1} \right )}
   \right|_{\substack{ \xi_{1}=x^{2} }} + f{\left (x^{2} \right )}$$

   what's this?
   in [95]:
print(b)

2*x**2*subs(derivative(f(_xi_1), _xi_1), (_xi_1,), (x**2,)) + f(x**2)

   the function derivative represents an unevaluated derivative. it can be
   evaluated by the method doit.
   in [96]:
a=derivative(sin(x),x)
eq(a,a.doit())

   out[96]:
   $$\frac{d}{d x} \sin{\left (x \right )} = \cos{\left (x \right )}$$

integrals[14]  

   in [97]:
integrate(1/(x*(x**2-2)**2),x)

   out[97]:
   $$\frac{1}{4} \log{\left (x \right )} - \frac{1}{8} \log{\left (x^{2} -
   2 \right )} - \frac{1}{4 x^{2} - 8}$$
   in [98]:
integrate(1/(exp(x)+1),x)

   out[98]:
   $$x - \log{\left (e^{x} + 1 \right )}$$
   in [99]:
integrate(log(x),x)

   out[99]:
   $$x \log{\left (x \right )} - x$$
   in [100]:
integrate(x*sin(x),x)

   out[100]:
   $$- x \cos{\left (x \right )} + \sin{\left (x \right )}$$
   in [101]:
integrate(x*exp(-x**2),x)

   out[101]:
   $$- \frac{e^{- x^{2}}}{2}$$
   in [102]:
a=integrate(x**x,x)
a

   out[102]:
   $$\int x^{x}\, dx$$

   this is an unevaluated integral.
   in [103]:
print(a)

integral(x**x, x)

   in [104]:
a=integral(sin(x),x)
eq(a,a.doit())

   out[104]:
   $$\int \sin{\left (x \right )}\, dx = - \cos{\left (x \right )}$$

   definite integrals.
   in [105]:
integrate(sin(x),(x,0,pi))

   out[105]:
   $$2$$

   oo means $\infty$.
   in [106]:
integrate(exp(-x**2),(x,0,oo))

   out[106]:
   $$\frac{\sqrt{\pi}}{2}$$
   in [107]:
integrate(log(x)/(1-x),(x,0,1))

   out[107]:
   $$- \frac{\pi^{2}}{6}$$

summing series[15]  

   in [108]:
summation(1/n**2,(n,1,oo))

   out[108]:
   $$\frac{\pi^{2}}{6}$$
   in [109]:
summation((-1)**n/n**2,(n,1,oo))

   out[109]:
   $$- \frac{\pi^{2}}{12}$$
   in [110]:
summation(1/n**4,(n,1,oo))

   out[110]:
   $$\frac{\pi^{4}}{90}$$

   an unevaluated sum is denoted sum.
   in [111]:
a=sum(x**n/factorial(n),(n,0,oo))
eq(a,a.doit())

   out[111]:
   $$\sum_{n=0}^{\infty} \frac{x^{n}}{n!} = e^{x}$$

limits[16]  

   in [112]:
limit((tan(sin(x))-sin(tan(x)))/x**7,x,0)

   out[112]:
   $$\frac{1}{30}$$

   this limit is easy: just expand the numerator and the denominator into
   series. things become more difficult if $x=0$ is an essential
   singularity. let's calculate one-sided limits.
   in [113]:
limit((tan(sin(x))-sin(tan(x)))/(x**7+exp(-1/x)),x,0,'+')

   out[113]:
   $$\frac{1}{30}$$
   in [114]:
limit((tan(sin(x))-sin(tan(x)))/(x**7+exp(-1/x)),x,0,'-')

   out[114]:
   $$0$$

differential equations[17]  

   in [115]:
t=symbol('t')
x=function('x')
p=function('p')

   first order.
   in [116]:
dsolve(diff(x(t),t)+x(t),x(t))

   out[116]:
   $$x{\left (t \right )} = c_{1} e^{- t}$$

   second order.
   in [117]:
dsolve(diff(x(t),t,2)+x(t),x(t))

   out[117]:
   $$x{\left (t \right )} = c_{1} \sin{\left (t \right )} + c_{2}
   \cos{\left (t \right )}$$

   a system of first-order equations.
   in [118]:
dsolve((diff(x(t),t)-p(t),diff(p(t),t)+x(t)))

   out[118]:
   $$\left [ x{\left (t \right )} = c_{1} \sin{\left (t \right )} + c_{2}
   \cos{\left (t \right )}, \quad p{\left (t \right )} = c_{1} \cos{\left
   (t \right )} - c_{2} \sin{\left (t \right )}\right ]$$

id202[18]  

   in [119]:
a,b,c,d,e,f=symbols('a b c d e f')

   a matrix can be constructed from a list of lists.
   in [120]:
m=matrix([[a,b,c],[d,e,f]])
m

   out[120]:
   $$\left[\begin{matrix}a & b & c\\d & e & f\end{matrix}\right]$$
   in [121]:
m.shape

   out[121]:
   $$\left ( 2, \quad 3\right )$$

   a row matrix.
   in [122]:
matrix([[1,2,3]])

   out[122]:
   $$\left[\begin{matrix}1 & 2 & 3\end{matrix}\right]$$

   a column matrix.
   in [123]:
matrix([1,2,3])

   out[123]:
   $$\left[\begin{matrix}1\\2\\3\end{matrix}\right]$$

   a matrix can be constructed from a function.
   in [124]:
def g(i,j):
    return rational(1,i+j+1)
matrix(3,3,g)

   out[124]:
   $$\left[\begin{matrix}1 & \frac{1}{2} & \frac{1}{3}\\\frac{1}{2} &
   \frac{1}{3} & \frac{1}{4}\\\frac{1}{3} & \frac{1}{4} &
   \frac{1}{5}\end{matrix}\right]$$

   or from an undefined function.
   in [125]:
g=function('g')
m=matrix(3,3,g)
m

   out[125]:
   $$\left[\begin{matrix}g{\left (0,0 \right )} & g{\left (0,1 \right )} &
   g{\left (0,2 \right )}\\g{\left (1,0 \right )} & g{\left (1,1 \right )}
   & g{\left (1,2 \right )}\\g{\left (2,0 \right )} & g{\left (2,1 \right
   )} & g{\left (2,2 \right )}\end{matrix}\right]$$
   in [126]:
m[1,2]

   out[126]:
   $$g{\left (1,2 \right )}$$
   in [127]:
m[1,2]=0
m

   out[127]:
   $$\left[\begin{matrix}g{\left (0,0 \right )} & g{\left (0,1 \right )} &
   g{\left (0,2 \right )}\\g{\left (1,0 \right )} & g{\left (1,1 \right )}
   & 0\\g{\left (2,0 \right )} & g{\left (2,1 \right )} & g{\left (2,2
   \right )}\end{matrix}\right]$$
   in [128]:
m[2,:]

   out[128]:
   $$\left[\begin{matrix}g{\left (2,0 \right )} & g{\left (2,1 \right )} &
   g{\left (2,2 \right )}\end{matrix}\right]$$
   in [129]:
m[:,1]

   out[129]:
   $$\left[\begin{matrix}g{\left (0,1 \right )}\\g{\left (1,1 \right
   )}\\g{\left (2,1 \right )}\end{matrix}\right]$$
   in [130]:
m[0:2,1:3]

   out[130]:
   $$\left[\begin{matrix}g{\left (0,1 \right )} & g{\left (0,2 \right
   )}\\g{\left (1,1 \right )} & 0\end{matrix}\right]$$

   a unit matrix.
   in [131]:
eye(3)

   out[131]:
   $$\left[\begin{matrix}1 & 0 & 0\\0 & 1 & 0\\0 & 0 &
   1\end{matrix}\right]$$

   a zero matrix.
   in [132]:
zeros(3)

   out[132]:
   $$\left[\begin{matrix}0 & 0 & 0\\0 & 0 & 0\\0 & 0 &
   0\end{matrix}\right]$$
   in [133]:
zeros(2,3)

   out[133]:
   $$\left[\begin{matrix}0 & 0 & 0\\0 & 0 & 0\end{matrix}\right]$$

   a diagonal matrix.
   in [134]:
diag(1,2,3)

   out[134]:
   $$\left[\begin{matrix}1 & 0 & 0\\0 & 2 & 0\\0 & 0 &
   3\end{matrix}\right]$$
   in [135]:
m=matrix([[a,1],[0,a]])
diag(1,m,2)

   out[135]:
   $$\left[\begin{matrix}1 & 0 & 0 & 0\\0 & a & 1 & 0\\0 & 0 & a & 0\\0 &
   0 & 0 & 2\end{matrix}\right]$$

   operations with matrices.
   in [136]:
a=matrix([[a,b],[c,d]])
b=matrix([[1,2],[3,4]])
a+b

   out[136]:
   $$\left[\begin{matrix}a + 1 & b + 2\\c + 3 & d + 4\end{matrix}\right]$$
   in [137]:
a*b,b*a

   out[137]:
   $$\left ( \left[\begin{matrix}a + 3 b & 2 a + 4 b\\c + 3 d & 2 c + 4
   d\end{matrix}\right], \quad \left[\begin{matrix}a + 2 c & b + 2 d\\3 a
   + 4 c & 3 b + 4 d\end{matrix}\right]\right )$$
   in [138]:
a*b-b*a

   out[138]:
   $$\left[\begin{matrix}3 b - 2 c & 2 a + 3 b - 2 d\\- 3 a - 3 c + 3 d &
   - 3 b + 2 c\end{matrix}\right]$$
   in [139]:
simplify(a**(-1))

   out[139]:
   $$\left[\begin{matrix}\frac{d}{a d - b c} & - \frac{b}{a d - b c}\\-
   \frac{c}{a d - b c} & \frac{a}{a d - b c}\end{matrix}\right]$$
   in [140]:
det(a)

   out[140]:
   $$a d - b c$$

eigenvalues and eigenvectors[19]  

   in [141]:
x=symbol('x',real=true)

   in [142]:
m=matrix([[(1-x)**3*(3+x),4*x*(1-x**2),-2*(1-x**2)*(3-x)],
          [4*x*(1-x**2),-(1+x)**3*(3-x),2*(1-x**2)*(3+x)],
          [-2*(1-x**2)*(3-x),2*(1-x**2)*(3+x),16*x]])
m

   out[142]:
   $$\left[\begin{matrix}\left(- x + 1\right)^{3} \left(x + 3\right) & 4 x
   \left(- x^{2} + 1\right) & \left(- x + 3\right) \left(2 x^{2} -
   2\right)\\4 x \left(- x^{2} + 1\right) & - \left(- x + 3\right) \left(x
   + 1\right)^{3} & \left(x + 3\right) \left(- 2 x^{2} + 2\right)\\\left(-
   x + 3\right) \left(2 x^{2} - 2\right) & \left(x + 3\right) \left(- 2
   x^{2} + 2\right) & 16 x\end{matrix}\right]$$
   in [143]:
det(m)

   out[143]:
   $$0$$

   this means that this matrix has a null space (this matrix transforms
   vectors from this subspace into 0). let's find a basis of this
   subspace.
   in [144]:
v=m.nullspace()
len(v)

   out[144]:
   $$1$$

   it is one-dimensional.
   in [145]:
v=simplify(v[0])
v

   out[145]:
   $$\left[\begin{matrix}- \frac{2}{x - 1}\\\frac{2}{x +
   1}\\1\end{matrix}\right]$$

   let's check.
   in [146]:
simplify(m*v)

   out[146]:
   $$\left[\begin{matrix}0\\0\\0\end{matrix}\right]$$

   the eigenvalues and their multiplicities.
   in [147]:
m.eigenvals()

   out[147]:
   $$\left \{ 0 : 1, \quad - \left(x^{2} + 3\right)^{2} : 1, \quad
   \left(x^{2} + 3\right)^{2} : 1\right \}$$

   if both eigenvalues and corresponding eigenvectors are needed, the
   method eigenvects is used. it returns a list of tuples. in each tuple
   the zeroth element is an eigenvalue, the first one is its multiplicity,
   and the last one is a list of corresponding basis eigenvectors (their
   number is the multiplicity).
   in [148]:
v=m.eigenvects()
len(v)

   out[148]:
   $$3$$
   in [149]:
for i in range(len(v)):
    v[i][2][0]=simplify(v[i][2][0])
v

   out[149]:
   $$\left [ \left ( 0, \quad 1, \quad \left [ \left[\begin{matrix}-
   \frac{2}{x - 1}\\\frac{2}{x + 1}\\1\end{matrix}\right]\right ]\right ),
   \quad \left ( - \left(x^{2} + 3\right)^{2}, \quad 1, \quad \left [
   \left[\begin{matrix}\frac{x}{2} + \frac{1}{2}\\\frac{x + 1}{x -
   1}\\1\end{matrix}\right]\right ]\right ), \quad \left ( \left(x^{2} +
   3\right)^{2}, \quad 1, \quad \left [ \left[\begin{matrix}\frac{x - 1}{x
   + 1}\\- \frac{x}{2} + \frac{1}{2}\\1\end{matrix}\right]\right ]\right
   )\right ]$$

   let's check.
   in [150]:
for i in range(len(v)):
    z=m*v[i][2][0]-v[i][0]*v[i][2][0]
    pprint(simplify(z))

   0   
       
   0   
       
   0   
   0   
       
   0   
       
   0   
   0   
       
   0   
       
   0   

jordan normal form[20]  

   in [151]:
m=matrix([[rational(13,9),-rational(2,9),rational(1,3),rational(4,9),rational(2,
3)],
          [-rational(2,9),rational(10,9),rational(2,15),-rational(2,9),-rational
(11,15)],
          [rational(1,5),-rational(2,5),rational(41,25),-rational(2,5),rational(
12,25)],
          [rational(4,9),-rational(2,9),rational(14,15),rational(13,9),-rational
(2,15)],
          [-rational(4,15),rational(8,15),rational(12,25),rational(8,15),rationa
l(34,25)]])
m

   out[151]:
   $$\left[\begin{matrix}\frac{13}{9} & - \frac{2}{9} & \frac{1}{3} &
   \frac{4}{9} & \frac{2}{3}\\- \frac{2}{9} & \frac{10}{9} & \frac{2}{15}
   & - \frac{2}{9} & - \frac{11}{15}\\\frac{1}{5} & - \frac{2}{5} &
   \frac{41}{25} & - \frac{2}{5} & \frac{12}{25}\\\frac{4}{9} & -
   \frac{2}{9} & \frac{14}{15} & \frac{13}{9} & - \frac{2}{15}\\-
   \frac{4}{15} & \frac{8}{15} & \frac{12}{25} & \frac{8}{15} &
   \frac{34}{25}\end{matrix}\right]$$

   the method m.jordan_form() returns a couple of matrices, the
   transformation matrix $p$ and the jordan form $j$: $m = p j p^{-1}$.
   in [152]:
p,j=m.jordan_form()
j

   out[152]:
   $$\left[\begin{matrix}1 & 0 & 0 & 0 & 0\\0 & 2 & 1 & 0 & 0\\0 & 0 & 2 &
   0 & 0\\0 & 0 & 0 & 1 - i & 0\\0 & 0 & 0 & 0 & 1 +
   i\end{matrix}\right]$$
   in [153]:
p=simplify(p)
p

   out[153]:
   $$\left[\begin{matrix}-2 & \frac{10}{9} & 0 & \frac{5 i}{12} & -
   \frac{5 i}{12}\\-2 & - \frac{5}{9} & 0 & - \frac{5 i}{6} & \frac{5
   i}{6}\\0 & 0 & \frac{4}{3} & - \frac{3}{4} & - \frac{3}{4}\\1 &
   \frac{10}{9} & 0 & - \frac{5 i}{6} & \frac{5 i}{6}\\0 & 0 & 1 & 1 &
   1\end{matrix}\right]$$

   let's check.
   in [154]:
z=p*j*p**(-1)-m
simplify(z)

   out[154]:
   $$\left[\begin{matrix}0 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 0\\0 & 0 & 0 &
   0 & 0\\0 & 0 & 0 & 0 & 0\\0 & 0 & 0 & 0 & 0\end{matrix}\right]$$

plots[21]  

   sympy uses matplotlib. however, it distributes $x$ points adaptively,
   not uniformly.
   in [155]:
%matplotlib inline

   a single function.
   in [156]:
plot(sin(x)/x,(x,-10,10))

   [8eyknekdknhaaaaaelftksuqmcc ]
   out[156]:
<sympy.plotting.plot.plot at 0xaf87e90c>

   several functions.
   in [157]:
plot(x,x**2,x**3,(x,0,2))

   [ieioueaxeckxcvwiijlggv9ejmco8iui5bgffhgr
   hkpalyksyxt4ruryzp8dpmik3qhnbfsaaaaasuvork5cyii= ]
   out[157]:
<sympy.plotting.plot.plot at 0xb136652c>

   some additional plotting functions can be imported from sympy.plotting.
   in [158]:
from sympy.plotting import (plot_parametric,plot_implicit,
                            plot3d,plot3d_parametric_line,
                            plot3d_parametric_surface)

   a parametric plot - a lissajous curve.
   in [159]:
t=symbol('t')
plot_parametric(sin(2*t),cos(3*t),(t,0,2*pi),
                title='lissajous',xlabel='x',ylabel='y')

   [0ugmack8c2amb4
   vkc2imggc6twafydfxeua9ymxcyvvwauv0ovanawqbcajgltkcie1ntsozg5d4pg4wxkqvz
   kqvma
   ngawqim1+v7zezvskwbarkib9agwfsb+apne5ibvmms0rka7uzqajcan0za4rqprudfaiws
   0go0b
   o5w4rqprudfaiws0go0bo5w4rqprudfaiws0go0bo5w4rqprudfaiws0go0b839pngerfcy
   5bgaa aabjru5erkjggg== ]
   out[159]:
<sympy.plotting.plot.plot at 0xaf709d0c>

   an implicit plot - a circle.
   in [160]:
plot_implicit(x**2+y**2-1,(x,-1,1),(y,-1,1))

   [wbuigaubxkzvgaaaabjru5erkjggg== ]
   out[160]:
<sympy.plotting.plot.plot at 0xaf76e1ec>

   a surface. if it is not inline but in a separaye window, you can rotate
   it with your mouse.
   in [161]:
plot3d(x*y,(x,-2,2),(y,-2,2))

   [whbl1m71itpigaaaabjru5e rkjggg== ]
   out[161]:
<sympy.plotting.plot.plot at 0xaf71ad2c>

   several surfaces.
   in [162]:
plot3d(x**2+y**2,x*y,(x,-2,2),(y,-2,2))

   [ vu8llwzjaksaaaaasuvork5cyii= ]
   out[162]:
<sympy.plotting.plot.plot at 0xaf5a6f4c>

   a parametric space curve - a spiral.
   in [163]:
a=0.1
plot3d_parametric_line(cos(t),sin(t),a*t,(t,0,4*pi))

   [xmggqi94mppaaaaaelf tksuqmcc ]
   out[163]:
<sympy.plotting.plot.plot at 0xaf7d962c>

   a parametric surface - a torus.
   in [164]:
u,v=symbols('u v')
a=0.3
plot3d_parametric_surface((1+a*cos(u))*cos(v),
                          (1+a*cos(u))*sin(v),a*sin(u),
                          (u,0,2*pi),(v,0,2*pi))

   [cpmnab+mh+waaaabj ru5erkjggg== ]
   out[164]:
<sympy.plotting.plot.plot at 0xaf664e4c>

   this website does not host notebooks, it only renders notebooks
   available on other websites.

   delivered by [22]fastly, rendered by [23]rackspace

   nbviewer github [24]repository.

   nbviewer version: [25]33c4683

   nbconvert version: [26]5.4.0

   rendered (fri, 05 apr 2019 18:21:08 utc)

references

   1. https://nbviewer.jupyter.org/
   2. http://jupyter.org/
   3. https://nbviewer.jupyter.org/faq
   4. https://nbviewer.jupyter.org/format/script/url/www.inp.nsk.su/~grozin/python/sympy.ipynb
   5. https://nbviewer.jupyter.org/url/www.inp.nsk.su/~grozin/python/sympy.ipynb
   6. http://www.inp.nsk.su/~grozin/python/sympy.ipynb
   7. https://nbviewer.jupyter.org/url/www.inp.nsk.su/~grozin/python/sympy.ipynb#sympy
   8. https://nbviewer.jupyter.org/url/www.inp.nsk.su/~grozin/python/sympy.ipynb#polynomials-and-rational-functions
   9. https://nbviewer.jupyter.org/url/www.inp.nsk.su/~grozin/python/sympy.ipynb#elementary-functions
  10. https://nbviewer.jupyter.org/url/www.inp.nsk.su/~grozin/python/sympy.ipynb#expression-structure
  11. https://nbviewer.jupyter.org/url/www.inp.nsk.su/~grozin/python/sympy.ipynb#solving-equations
  12. https://nbviewer.jupyter.org/url/www.inp.nsk.su/~grozin/python/sympy.ipynb#series
  13. https://nbviewer.jupyter.org/url/www.inp.nsk.su/~grozin/python/sympy.ipynb#derivatives
  14. https://nbviewer.jupyter.org/url/www.inp.nsk.su/~grozin/python/sympy.ipynb#integrals
  15. https://nbviewer.jupyter.org/url/www.inp.nsk.su/~grozin/python/sympy.ipynb#summing-series
  16. https://nbviewer.jupyter.org/url/www.inp.nsk.su/~grozin/python/sympy.ipynb#limits
  17. https://nbviewer.jupyter.org/url/www.inp.nsk.su/~grozin/python/sympy.ipynb#differential-equations
  18. https://nbviewer.jupyter.org/url/www.inp.nsk.su/~grozin/python/sympy.ipynb#linear-algebra
  19. https://nbviewer.jupyter.org/url/www.inp.nsk.su/~grozin/python/sympy.ipynb#eigenvalues-and-eigenvectors
  20. https://nbviewer.jupyter.org/url/www.inp.nsk.su/~grozin/python/sympy.ipynb#jordan-normal-form
  21. https://nbviewer.jupyter.org/url/www.inp.nsk.su/~grozin/python/sympy.ipynb#plots
  22. http://www.fastly.com/
  23. https://developer.rackspace.com/?nbviewer=awesome
  24. https://github.com/jupyter/nbviewer
  25. https://github.com/jupyter/nbviewer/commit/33c4683164d5ee4c92dbcd53afac7f13ef033c54
  26. https://github.com/jupyter/nbconvert/releases/tag/5.4.0
