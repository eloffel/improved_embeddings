   #[1]github [2]recent commits to python-zpar:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]20
     * [35]star [36]44
     * [37]fork [38]13

[39]educationaltestingservice/[40]python-zpar

   [41]code [42]issues 2 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   a python wrapper around the zpar parser for english.
   [47]python [48]parser [49]zpar [50]syntax
     * [51]154 commits
     * [52]2 branches
     * [53]13 releases
     * [54]fetching contributors
     * [55]mit

    1. [56]python 52.9%
    2. [57]c++ 34.9%
    3. [58]makefile 12.2%

   (button) python c++ makefile
   branch: master (button) new pull request
   [59]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/e
   [60]download zip

downloading...

   want to be notified of new releases in
   educationaltestingservice/python-zpar?
   [61]sign in [62]sign up

launching github desktop...

   if nothing happens, [63]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [64]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [65]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [66]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [67]permalink
   type       name      latest commit message commit time
        failed to load latest commit information.
        [68].circleci
        [69]examples
        [70]src
        [71]tests
        [72]zpar
        [73].gitignore
        [74]license
        [75]manifest.in
        [76]makefile
        [77]readme.rst
        [78]conda.yaml
        [79]setup.py

readme.rst

introduction

   [80]circleci build status

   python-zpar is a python wrapper around the [81]zpar parser. zpar was
   written by [82]yue zhang while he was at oxford university. according
   to its home page: zpar is a statistical natural language parser, which
   performs syntactic analysis tasks including id40,
   part-of-speech tagging and parsing. zpar supports multiple languages
   and multiple grammar formalisms. zpar has been most heavily developed
   for chinese and english, while it provides generic support for other
   languages. zpar is fast, processing above 50 sentences per second using
   the standard penn teebank (wall street journal) data.

   i wrote python-zpar since i needed a fast and efficient parser for my
   nlp work which is primarily done in python and not c++. i wanted to be
   able to use this parser directly from python without having to create a
   bunch of files and running them through subprocesses. python-zpar not
   only provides a simply python wrapper but also provides an xml-rpc zpar
   server to make batch-processing of large files easier.

   python-zpar uses [83]ctypes, a very cool foreign function library
   bundled with python that allows calling functions in c dlls or shared
   libraries directly.

   important: as of now, python-zpar only works with the english zpar
   models since the interface to the chinese models is different than the
   english ones. pull requests are welcome!

installation

   currently, python-zpar only works on 64-bit linux and os x systems.
   those are the two platforms i use everyday. i am happy to try to get
   python-zpar working on other platforms over time. pull requests are
   welcome!

   in order for python-zpar to work, it requires c functions that can be
   called directly. since the only user-exposed entry point in zpar is the
   command line client, i needed to write a shared library that would have
   functions built on top of the zpar functionality but expose them in a
   way that ctypes could understand.

   therefore, in order to build python-zpar from scratch, we need to
   download the zpar source, patch it with new functionality and compile
   the shared library. all of this happens automatically when you install
   with pip:
pip install python-zpar

if you are using macos

    1. on macos, the installation will only work with gcc installed using
       either [84]macports or [85]homebrew. the zpar source cannot be
       compiled with clang. if you are having trouble compiling the code
       after cloning the repository or installing the package using pip,
       you can try to explicitly override the c++ compiler:

cxx=<path to c++ compiler> make -e

     or
cxx=<path to c++ compiler> pip install python-zpar

     if you are curious about what the c functions in the shared library
     module look like, see src/zpar.lib.cpp.
    2. if you are using macos mojave, you will need an extra step before
       running the pip install command above. starting with mojave, apple
       has stopped installing the c/c++ system header files into
       /usr/include. as a workaround, they have provided the package
       /library/developer/commandlinetools/packages/macos_sdk_headers_for_
       macos_10.14.pkg that you must install to get the system headers
       back in the usual place before python-zpar can be compiled. for
       more details, please read the command line tools section of the
       [86]xcode 10 release notes

usage

   to use python-zpar, you need the english models for zpar. they can be
   downloaded from the zpar release page [87]here. there are three models:
   a part-of-speech tagger, a constituency parser, and a dependency
   parser. for the purpose of the examples below, the models are in the
   english-models directory in the current directory.

   here's a small example of how to use python-zpar:
from six import print_
from zpar import zpar

# use the zpar wrapper as a context manager
with zpar('english-models') as z:

    # get the parser and the dependency parser models
    tagger = z.get_tagger()
    depparser = z.get_depparser()

    # tag a sentence
    tagged_sent = tagger.tag_sentence("i am going to the market.")
    print_(tagged_sent)

    # tag an already tokenized sentence
    tagged_sent = tagger.tag_sentence("do n't you want to come with me to the ma
rket ?", tokenize=false)
    print_(tagged_sent)

    # get the dependency parse of an already tagged sentence
    dep_parsed_sent = depparser.dep_parse_tagged_sentence("i/prp am/vbp going/vb
g to/to the/dt market/nn ./.")
    print_(dep_parsed_sent)

    # get the dependency parse of an already tokenized sentence
    dep_parsed_sent = depparser.dep_parse_sentence("do n't you want to come with
 me to the market ?", tokenize=false)
    print_(dep_parsed_sent)

    # get the dependency parse of an already tokenized sentence
    # and include lemma information (assuming you have nltk as well
    # as its id138 corpus installed)
    dep_parsed_sent = depparser.dep_parse_sentence("do n't you want to come with
 me to the market ?", tokenize=false, with_lemmas=true)
    print_(dep_parsed_sent)

   the above code sample produces the following output:
i/prp am/vbp going/vbg to/to the/dt market/nn ./.

do/vbp n't/rb you/prp want/vbp to/to come/vb with/in me/prp to/to the/dt market/
nn ?/.

i       prp   1    sub
am      vbp   -1   root
going   vbg   1    vc
to      to    2    vmod
the     dt    5    nmod
market  nn    3    pmod
.       .     1    p

do      vbp  -1  root
n't     rb   0   vmod
you     prp  0   sub
want    vbp  0   vmod
to      to   5   vmod
come    vb   3   vmod
with    in   5   vmod
me      prp  6   pmod
to      to   5   vmod
the     dt   10  nmod
market  nn   8   pmod
?       .    0   p

do      vbp  -1  root   do
n't     rb   0   vmod   n't
you     prp  0   sub    you
want    vbp  0   vmod   want
to      to   5   vmod   to
come    vb   3   vmod   come
with    in   5   vmod   with
me      prp  6   pmod   me
to      to   5   vmod   to
the     dt   10  nmod   the
market  nn   8   pmod   market
?       .    0   p      ?

   detailed usage with comments is shown in the included file
   examples/zpar_example.py. run python zpar_example.py -h to see a list
   of all available options.

zpar server

   the package also provides an python xml-rpc implementation of a zpar
   server that makes it easier to process multiple sentences and files by
   loading the models just once (via the ctypes interface) and allowing
   clients to connect and request analyses. the implementation is in the
   executable zpar_server that is installed when you install the package.
   the server is quite flexible and allows loading only the models that
   you need. here's an example of how to start the server with only the
   tagger and the dependency parser models loaded:
$> zpar_server --modeldir english-models --models tagger parser depparser
info:initializing server ...
loading tagger from english-models/tagger
loading model... done.
loading constituency parser from english-models/conparser
loading scores... done. (65.9334s)
loading dependency parser from english-models/depparser
loading scores... done. (14.9623s)
info:registering introspection ...
info:starting server on port 8859...

   run zpar_server -h to see a list of all options.

   once the server is running, you can connect to it using a client. an
   example client is included in the file examples/zpar_client.py which
   can be run as follows (note that if you specified a custom host and
   port when running the server, you'd need to specify the same here):
$> cd examples
$> python zpar_client.py

info:attempting connection to http://localhost:8859
info:tagging "don't you want to come with me to the market?"
info:output: do/vbp n't/rb you/prp want/vbp to/to come/vb with/in me/prp to/to t
he/dt market/nn ?/.
info:tagging "do n't you want to come to the market with me ?"
info:output: do/vbp n't/rb you/prp want/vbp to/to come/vb to/to the/dt market/nn
 with/in me/prp ?/.
info:parsing "don't you want to come with me to the market?"
info:output: (sq (vbp do) (rb n't) (np (prp you)) (vp (vbp want) (s (vp (to to)
(vp (vb come) (pp (in with) (np (prp me))) (pp (to to) (np (dt the) (nn market))
))))) (. ?))
info:dep parsing "do n't you want to come to the market with me ?"
info:output: do vbp -1  root
n't rb  0   vmod
you prp 0   sub
want    vbp 0   vmod
to  to  5   vmod
come    vb  3   vmod
to  to  5   vmod
the dt  8   nmod
market  nn  6   pmod
with    in  5   vmod
me  prp 9   pmod
?   .   0   p

info:tagging file /users/nmadnani/work/python-zpar/examples/test.txt into test.t
ag
info:parsing file /users/nmadnani/work/python-zpar/examples/test_tokenized.txt i
nto test.parse

   note that python-zpar and all of the example scripts should work with
   both python 2.7 and python 3.4. i have tested python-zpar on both linux
   and mac but not on windows.

node.js version

   if you want to use zpar in your node.js app, check out my other project
   [88]node-zpar.

license

   although python-zpar is licensed under the mit license - which means
   that you can do whatever you want with the wrapper code - zpar itself
   is licensed under gpl v3.

todo

    1. improve error handling on both the python and c side.
    2. expose more functionality, e.g., chinese id40, parsing
       etc.
    3. may be look into using [89]cffi instead of ctypes.

     *    2019 github, inc.
     * [90]terms
     * [91]privacy
     * [92]security
     * [93]status
     * [94]help

     * [95]contact github
     * [96]pricing
     * [97]api
     * [98]training
     * [99]blog
     * [100]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [101]reload to refresh your
   session. you signed out in another tab or window. [102]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/educationaltestingservice/python-zpar/commits/master.atom
   3. https://github.com/educationaltestingservice/python-zpar#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/educationaltestingservice/python-zpar
  32. https://github.com/join
  33. https://github.com/login?return_to=/educationaltestingservice/python-zpar
  34. https://github.com/educationaltestingservice/python-zpar/watchers
  35. https://github.com/login?return_to=/educationaltestingservice/python-zpar
  36. https://github.com/educationaltestingservice/python-zpar/stargazers
  37. https://github.com/login?return_to=/educationaltestingservice/python-zpar
  38. https://github.com/educationaltestingservice/python-zpar/network/members
  39. https://github.com/educationaltestingservice
  40. https://github.com/educationaltestingservice/python-zpar
  41. https://github.com/educationaltestingservice/python-zpar
  42. https://github.com/educationaltestingservice/python-zpar/issues
  43. https://github.com/educationaltestingservice/python-zpar/pulls
  44. https://github.com/educationaltestingservice/python-zpar/projects
  45. https://github.com/educationaltestingservice/python-zpar/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/topics/python
  48. https://github.com/topics/parser
  49. https://github.com/topics/zpar
  50. https://github.com/topics/syntax
  51. https://github.com/educationaltestingservice/python-zpar/commits/master
  52. https://github.com/educationaltestingservice/python-zpar/branches
  53. https://github.com/educationaltestingservice/python-zpar/releases
  54. https://github.com/educationaltestingservice/python-zpar/graphs/contributors
  55. https://github.com/educationaltestingservice/python-zpar/blob/master/license
  56. https://github.com/educationaltestingservice/python-zpar/search?l=python
  57. https://github.com/educationaltestingservice/python-zpar/search?l=c++
  58. https://github.com/educationaltestingservice/python-zpar/search?l=makefile
  59. https://github.com/educationaltestingservice/python-zpar/find/master
  60. https://github.com/educationaltestingservice/python-zpar/archive/master.zip
  61. https://github.com/login?return_to=https://github.com/educationaltestingservice/python-zpar
  62. https://github.com/join?return_to=/educationaltestingservice/python-zpar
  63. https://desktop.github.com/
  64. https://desktop.github.com/
  65. https://developer.apple.com/xcode/
  66. https://visualstudio.github.com/
  67. https://github.com/educationaltestingservice/python-zpar/tree/7d8e3ebe65fa2982313b3097a13e6137894df000
  68. https://github.com/educationaltestingservice/python-zpar/tree/master/.circleci
  69. https://github.com/educationaltestingservice/python-zpar/tree/master/examples
  70. https://github.com/educationaltestingservice/python-zpar/tree/master/src
  71. https://github.com/educationaltestingservice/python-zpar/tree/master/tests
  72. https://github.com/educationaltestingservice/python-zpar/tree/master/zpar
  73. https://github.com/educationaltestingservice/python-zpar/blob/master/.gitignore
  74. https://github.com/educationaltestingservice/python-zpar/blob/master/license
  75. https://github.com/educationaltestingservice/python-zpar/blob/master/manifest.in
  76. https://github.com/educationaltestingservice/python-zpar/blob/master/makefile
  77. https://github.com/educationaltestingservice/python-zpar/blob/master/readme.rst
  78. https://github.com/educationaltestingservice/python-zpar/blob/master/conda.yaml
  79. https://github.com/educationaltestingservice/python-zpar/blob/master/setup.py
  80. https://circleci.com/gh/educationaltestingservice/python-zpar
  81. http://www.sutd.edu.sg/cmsresource/faculty/yuezhang/zpar.html
  82. http://www.sutd.edu.sg/yuezhang.aspx
  83. https://docs.python.org/3.4/library/ctypes.html
  84. http://www.macports.org/
  85. http://brew.sh/
  86. https://developer.apple.com/documentation/xcode_release_notes/xcode_10_release_notes
  87. https://github.com/frcchang/zpar/releases/tag/v0.7.5
  88. http://github.com/educationaltestingservice/node-zpar
  89. https://cffi.readthedocs.org/
  90. https://github.com/site/terms
  91. https://github.com/site/privacy
  92. https://github.com/security
  93. https://githubstatus.com/
  94. https://help.github.com/
  95. https://github.com/contact
  96. https://github.com/pricing
  97. https://developer.github.com/
  98. https://training.github.com/
  99. https://github.blog/
 100. https://github.com/about
 101. https://github.com/educationaltestingservice/python-zpar
 102. https://github.com/educationaltestingservice/python-zpar

   hidden links:
 104. https://github.com/
 105. https://github.com/educationaltestingservice/python-zpar
 106. https://github.com/educationaltestingservice/python-zpar
 107. https://github.com/educationaltestingservice/python-zpar
 108. https://help.github.com/articles/which-remote-url-should-i-use
 109. https://github.com/educationaltestingservice/python-zpar#introduction
 110. https://github.com/educationaltestingservice/python-zpar#installation
 111. https://github.com/educationaltestingservice/python-zpar#if-you-are-using-macos
 112. https://github.com/educationaltestingservice/python-zpar#usage
 113. https://github.com/educationaltestingservice/python-zpar#zpar-server
 114. https://github.com/educationaltestingservice/python-zpar#nodejs-version
 115. https://github.com/educationaltestingservice/python-zpar#license
 116. https://github.com/educationaltestingservice/python-zpar#todo
 117. https://github.com/
