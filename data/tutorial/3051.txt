   #[1]github [2]recent commits to dl4mt-c2c:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]13
     * [35]star [36]144
     * [37]fork [38]50

[39]nyu-dl/[40]dl4mt-c2c

   [41]code [42]issues 3 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   no description, website, or topics provided.
     * [47]16 commits
     * [48]1 branch
     * [49]0 releases
     * [50]fetching contributors
     * [51]bsd-3-clause

    1. [52]python 86.4%
    2. [53]perl 8.3%
    3. [54]emacs lisp 3.5%
    4. [55]shell 0.5%
    5. [56]smalltalk 0.4%
    6. [57]ruby 0.3%
    7. other 0.6%

   (button) python perl emacs lisp shell smalltalk ruby other
   branch: master (button) new pull request
   [58]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/n
   [59]download zip

downloading...

   want to be notified of new releases in nyu-dl/dl4mt-c2c?
   [60]sign in [61]sign up

launching github desktop...

   if nothing happens, [62]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [63]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [64]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [65]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [66]permalink
   type      name      latest commit message commit time
        failed to load latest commit information.
        [67]bpe2char
        [68]char2char
        [69]preprocess
        [70]translate
        [71]license
        [72]readme.md

readme.md

fully character-level id4

   theano implementation of the models described in the paper [73]fully
   character-level id4 without explicit
   segmentation.

   we present code for training and decoding four different models:
    1. bilingual bpe2char (from [74]chung et al., 2016).
    2. bilingual char2char
    3. multilingual bpe2char
    4. multilingual char2char

dependencies

python

     * theano
     * numpy
     * nltk

gpu

     * cuda (we recommend using the latest version. the version 8.0 was
       used in all our experiments.)

related code

     * for preprocessing and evaluation, we used scripts from [75]moses.
     * this code is based on [76]subword-id4 and [77]dl4mt-cdec.

downloading datasets & pre-trained models

   the original wmt'15 corpora can be downloaded from [78]here. for the
   preprocessed corpora used in our experiments, see below.
     * wmt'15 preprocessed corpora
          + [79]standard version (for bilingual models, 3.5gb)
          + [80]cyrillic converted to latin (for multilingual models,
            2.6gb)

   to obtain the pre-trained top-performing models, see below.
     * [81]pre-trained models (6.0gb): tarball updated on nov 21st 2016.
       the cs-en bi-char2char model in the previous tarball was not the
       best-performing model.

training details

using gpus

   do the following before executing train*.py.
$ export theano_flags=device=gpu,floatx=float32

   with space permitting on your gpu, it may speed up training to use
   cnmem:
$ export theano_flags=device=gpu,floatx=float32,lib.cnmem=0.95,allow_gc=false

   on a pre-2016 titan x gpu with 12gb ram, our bpe2char models were
   trained with cnmem. our char2char models (both bilingual and
   multilingual) were trained without cnmem (due to lack of ram).

training models

   before executing the following, modify train*.py such that the correct
   directory containing wmt15 corpora is referenced.

bilingual bpe2char

$ python bpe2char/train_bi_bpe2char.py -translate <language_pair>

bilingual char2char

$ python char2char/train_bi_char2char.py -translate <language_pair>

multilingual bpe2char

$ python bpe2char/train_multi_bpe2char.py

multilingual char2char

$ python char2char/train_multi_char2char.py

checkpoint

   to resume training a model from a checkpoint, simply append -re_load
   and -re_load_old_setting above. make sure the checkpoint resides in the
   correct directory (.../dl4mt-c2c/models).

using custom datasets

   to train your models using your own dataset (and not the wmt'15
   corpus), you first need to learn your vocabulary using
   build_dictionary_char.py or build_dictionary_word.py for char2char or
   bpe2char model, respectively. for the bpe2char model, you additionally
   need to learn your bpe segmentation rules on the source corpus using
   the subword-id4 repository (see below).

decoding

decoding wmt'15 validation / test files

   before executing the following, modify translate*.py such that the
   correct directory containing wmt15 corpora is referenced.
$ export theano_flags=device=gpu,floatx=float32,lib.cnmem=0.95,allow_gc=false
$ python translate/translate_bpe2char.py -model <path_to_model.npz> -translate <
language_pair> -saveto <destination> -which <valid/test_set> # for bpe2char mode
ls
$ python translate/translate_char2char.py -model <path_to_model.npz> -translate
<language_pair> -saveto <destination> -which <valid/test_set> # for char2char mo
dels

   when choosing which pre-trained model to give to -model, make sure to
   choose e.g. .grads.123000.npz. the models with .grads in their names
   are the optimal models and you should be decoding from those.

decoding an arbitrary file

   remove -which <valid/test_set> and append -source <path_to_source>.

   if you choose to decode your own source file, make sure it is:
    1. properly tokenized (using preprocess/preprocess.sh).
    2. bpe-tokenized for bpe2char models.
    3. cyrillic characters should be converted to latin for multilingual
       models.

decoding multilingual models

   append -many (of course, provide a path to a multilingual model for
   -model).

evaluation

   we use the script from moses to compute the id7 score. the reference
   translations can be found in .../wmt15.
perl preprocess/multi-id7.perl reference.txt < model_output.txt

extra

extracting & applying bpe rules

   clone the subword-id4 repository.
git clone https://github.com/rsennrich/subword-id4

   use following commands (find more information in [82]subword-id4)
./learn_bpe.py -s {num_operations} < {train_file} > {codes_file}
./apply_bpe.py -c {codes_file} < {test_file}

converting cyrillic to latin

$ python preprocess/iso.py russian_source.txt

   will produce an output at russian_source.txt.iso9.

citation

@article{lee:16,
  author    = {jason lee and kyunghyun cho and thomas hofmann},
  title     = {fully character-level id4 without explicit
 segmentation},
  year      = {2016},
  journal   = {arxiv preprint arxiv:1610.03017},
}

     *    2019 github, inc.
     * [83]terms
     * [84]privacy
     * [85]security
     * [86]status
     * [87]help

     * [88]contact github
     * [89]pricing
     * [90]api
     * [91]training
     * [92]blog
     * [93]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [94]reload to refresh your
   session. you signed out in another tab or window. [95]reload to refresh
   your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/nyu-dl/dl4mt-c2c/commits/master.atom
   3. https://github.com/nyu-dl/dl4mt-c2c#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/nyu-dl/dl4mt-c2c
  32. https://github.com/join
  33. https://github.com/login?return_to=/nyu-dl/dl4mt-c2c
  34. https://github.com/nyu-dl/dl4mt-c2c/watchers
  35. https://github.com/login?return_to=/nyu-dl/dl4mt-c2c
  36. https://github.com/nyu-dl/dl4mt-c2c/stargazers
  37. https://github.com/login?return_to=/nyu-dl/dl4mt-c2c
  38. https://github.com/nyu-dl/dl4mt-c2c/network/members
  39. https://github.com/nyu-dl
  40. https://github.com/nyu-dl/dl4mt-c2c
  41. https://github.com/nyu-dl/dl4mt-c2c
  42. https://github.com/nyu-dl/dl4mt-c2c/issues
  43. https://github.com/nyu-dl/dl4mt-c2c/pulls
  44. https://github.com/nyu-dl/dl4mt-c2c/projects
  45. https://github.com/nyu-dl/dl4mt-c2c/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/nyu-dl/dl4mt-c2c/commits/master
  48. https://github.com/nyu-dl/dl4mt-c2c/branches
  49. https://github.com/nyu-dl/dl4mt-c2c/releases
  50. https://github.com/nyu-dl/dl4mt-c2c/graphs/contributors
  51. https://github.com/nyu-dl/dl4mt-c2c/blob/master/license
  52. https://github.com/nyu-dl/dl4mt-c2c/search?l=python
  53. https://github.com/nyu-dl/dl4mt-c2c/search?l=perl
  54. https://github.com/nyu-dl/dl4mt-c2c/search?l=emacs-lisp
  55. https://github.com/nyu-dl/dl4mt-c2c/search?l=shell
  56. https://github.com/nyu-dl/dl4mt-c2c/search?l=smalltalk
  57. https://github.com/nyu-dl/dl4mt-c2c/search?l=ruby
  58. https://github.com/nyu-dl/dl4mt-c2c/find/master
  59. https://github.com/nyu-dl/dl4mt-c2c/archive/master.zip
  60. https://github.com/login?return_to=https://github.com/nyu-dl/dl4mt-c2c
  61. https://github.com/join?return_to=/nyu-dl/dl4mt-c2c
  62. https://desktop.github.com/
  63. https://desktop.github.com/
  64. https://developer.apple.com/xcode/
  65. https://visualstudio.github.com/
  66. https://github.com/nyu-dl/dl4mt-c2c/tree/7655c0edc2fbc113fa856e9916592f4662059099
  67. https://github.com/nyu-dl/dl4mt-c2c/tree/master/bpe2char
  68. https://github.com/nyu-dl/dl4mt-c2c/tree/master/char2char
  69. https://github.com/nyu-dl/dl4mt-c2c/tree/master/preprocess
  70. https://github.com/nyu-dl/dl4mt-c2c/tree/master/translate
  71. https://github.com/nyu-dl/dl4mt-c2c/blob/master/license
  72. https://github.com/nyu-dl/dl4mt-c2c/blob/master/readme.md
  73. https://arxiv.org/abs/1610.03017
  74. https://arxiv.org/abs/1603.06147
  75. https://github.com/moses-smt/mosesdecoder
  76. http://arxiv.org/abs/1508.07909
  77. https://github.com/nyu-dl/dl4mt-cdec
  78. http://www.statmt.org/wmt15/translation-task.html
  79. https://drive.google.com/open?id=0bxmeq91vzapqam5pc2ltq1bbttq
  80. https://drive.google.com/open?id=0bxmeq91vzapqs0oxtdjinng5b1k
  81. https://drive.google.com/open?id=0bxmeq91vzapqcgx4vgi2n3dmnee
  82. https://github.com/rsennrich/subword-id4
  83. https://github.com/site/terms
  84. https://github.com/site/privacy
  85. https://github.com/security
  86. https://githubstatus.com/
  87. https://help.github.com/
  88. https://github.com/contact
  89. https://github.com/pricing
  90. https://developer.github.com/
  91. https://training.github.com/
  92. https://github.blog/
  93. https://github.com/about
  94. https://github.com/nyu-dl/dl4mt-c2c
  95. https://github.com/nyu-dl/dl4mt-c2c

   hidden links:
  97. https://github.com/
  98. https://github.com/nyu-dl/dl4mt-c2c
  99. https://github.com/nyu-dl/dl4mt-c2c
 100. https://github.com/nyu-dl/dl4mt-c2c
 101. https://help.github.com/articles/which-remote-url-should-i-use
 102. https://github.com/nyu-dl/dl4mt-c2c#fully-character-level-neural-machine-translation
 103. https://github.com/nyu-dl/dl4mt-c2c#dependencies
 104. https://github.com/nyu-dl/dl4mt-c2c#python
 105. https://github.com/nyu-dl/dl4mt-c2c#gpu
 106. https://github.com/nyu-dl/dl4mt-c2c#related-code
 107. https://github.com/nyu-dl/dl4mt-c2c#downloading-datasets--pre-trained-models
 108. https://github.com/nyu-dl/dl4mt-c2c#training-details
 109. https://github.com/nyu-dl/dl4mt-c2c#using-gpus
 110. https://github.com/nyu-dl/dl4mt-c2c#training-models
 111. https://github.com/nyu-dl/dl4mt-c2c#bilingual-bpe2char
 112. https://github.com/nyu-dl/dl4mt-c2c#bilingual-char2char
 113. https://github.com/nyu-dl/dl4mt-c2c#multilingual-bpe2char
 114. https://github.com/nyu-dl/dl4mt-c2c#multilingual-char2char
 115. https://github.com/nyu-dl/dl4mt-c2c#checkpoint
 116. https://github.com/nyu-dl/dl4mt-c2c#using-custom-datasets
 117. https://github.com/nyu-dl/dl4mt-c2c#decoding
 118. https://github.com/nyu-dl/dl4mt-c2c#decoding-wmt15-validation--test-files
 119. https://github.com/nyu-dl/dl4mt-c2c#decoding-an-arbitrary-file
 120. https://github.com/nyu-dl/dl4mt-c2c#decoding-multilingual-models
 121. https://github.com/nyu-dl/dl4mt-c2c#evaluation
 122. https://github.com/nyu-dl/dl4mt-c2c#extra
 123. https://github.com/nyu-dl/dl4mt-c2c#extracting--applying-bpe-rules
 124. https://github.com/nyu-dl/dl4mt-c2c#converting-cyrillic-to-latin
 125. https://github.com/nyu-dl/dl4mt-c2c#citation
 126. https://github.com/
