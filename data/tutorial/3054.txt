   #[1]github [2]recent commits to proppr:working

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]28
     * [35]star [36]121
     * [37]fork [38]46

[39]teamcohen/[40]proppr

   [41]code [42]issues 2 [43]pull requests 0 [44]projects 0 [45]wiki
   [46]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [47]sign up
   graph-algorithm id136s over local groundings of id85
   programs
     * [48]801 commits
     * [49]16 branches
     * [50]3 releases
     * [51]fetching contributors
     * [52]apache-2.0

    1. [53]java 66.7%
    2. [54]python 30.2%
    3. [55]perl 1.5%
    4. other 1.6%

   (button) java python perl other
   branch: working (button) new pull request
   [56]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/t
   [57]download zip

downloading...

   want to be notified of new releases in teamcohen/proppr?
   [58]sign in [59]sign up

launching github desktop...

   if nothing happens, [60]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [61]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [62]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [63]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [64]permalink
   type         name         latest commit message commit time
        failed to load latest commit information.
        [65]conf
        [66]doc
        [67]examples
        [68]lib
        [69]my_program
        [70]scripts
        [71]sparsegraphtools
        [72]src
        [73]theano
        [74]tutorial
        [75].gitignore
        [76]changelog
        [77]ideas.txt
        [78]license.md
        [79]notes.txt
        [80]readme
        [81]build.xml
        [82]init.sh

readme

for regular updates, subscribe to our google group at: [83]https://groups.google
.com/forum/#!forum/proppr

==============
2.0 quickstart
==============

1. write a rulefile as *.ppr:

$ cat > test.ppr
predict(x,y) :- hasword(x,w),islabel(y),related(w,y)  {r}.
related(w,y) :- {w(w,y)}.
^d

2. compile a rulefile:

$ python src/scripts/compile.py serialize test.ppr | tee test.wam
0               comment predict(-1,-2) :- hasword(-1,-3), islabel(-2), related(-
3,-2) {r}  #v:['x', 'y', 'w'].
1       predict/2       allocate        3       ['w', 'y', 'x']
2               initfreevar     -1      -2
3               initfreevar     -2      -1
4               fclear
5               fpushstart      r       0
6               freport
7               pushboundvar    -1
8               pushfreevar     -3
9               callp   hasword/2
10              pushboundvar    -2
11              callp   islabel/1
12              pushboundvar    -3
13              pushboundvar    -2
14              callp   related/2
15              returnp
16              comment related(-1,-2) :-  {w(-1,-2)}  #v:['w', 'y'].
17      related/2       allocate        2       ['y', 'w']
18              initfreevar     -1      -2
19              initfreevar     -2      -1
20              fclear
21              fpushstart      w       2
22              fpushboundvar   -1
23              fpushboundvar   -2
24              freport
25              returnp

3. write arity-2 facts in a database file as *.graph:

$ cat > test.graph
hasword dh      a
hasword dh      pricy
hasword dh      doll
hasword dh      house
hasword ft      a
hasword ft      little
hasword ft      red
hasword ft      fire
hasword ft      truck
hasword rw      a
hasword rw      red
hasword rw      wagon
hasword sc      a
hasword sc      pricy
hasword sc      red
hasword sc      sports
hasword sc      car
...
^d

4. write arity-n facts in a database file as *.cfacts:

$ cat > test.cfacts
islabel neg
islabel pos
^d

5. write training examples:

$ cat > test_train.data
predict(dh,y)   -predict(dh,neg)        +predict(dh,pos)
predict(ft,y)   -predict(ft,neg)        +predict(ft,pos)
predict(rw,y)   -predict(rw,neg)        +predict(rw,pos)
predict(sc,y)   -predict(sc,neg)        +predict(sc,pos)
...
^d

6. ground training examples:

$ java -cp conf:bin:lib/* edu.cmu.ml.proppr.grounder --programfiles test.wam:tes
t.graph:test.cfacts --queries test_train.data --grounded test_train.grounded
time 461 msec
done.

7. train parameters:

$ java -cp conf:bin:lib/* edu.cmu.ml.proppr.trainer --train test_train.grounded
--params test.wts
 info [trainer] edu.cmu.ml.proppr.util.moduleconfiguration:
  walker: edu.cmu.ml.proppr.learn.l2posneglosstrainedsrw
 trainer: edu.cmu.ml.proppr.trainer
weighting scheme: edu.cmu.ml.proppr.learn.tools.reluweightingscheme

 info [trainer] training model parameters on test_train.grounded...
 info [trainer] epoch 1 ...
 info [trainer] epoch 2 ...
 info [trainer] epoch 3 ...
 info [trainer] epoch 4 ...
 info [trainer] epoch 5 ...
 info [trainer] finished training in 650 ms
 info [trainer] saving parameters to test.wts...

8. write testing examples:

$ cat > test_testing.data
predict(pb,y)   -predict(pb,neg)        +predict(pb,pos)
predict(yc,y)   -predict(yc,neg)        +predict(yc,pos)
predict(rb2,y)  -predict(rb2,neg)       +predict(rb2,pos)
...
^d

9. get untrained rankings:

$ java -cp conf:bin:lib/* edu.cmu.ml.proppr.queryanswerer --programfiles test.wa
m:test.graph:test.cfacts --queries test_testing.data --solutions pre.testing.sol
utions.txt
edu.cmu.ml.proppr.queryanswerer.queryanswererconfiguration:
  prover: edu.cmu.ml.proppr.prove.dprprover
weighting scheme: edu.cmu.ml.proppr.learn.tools.reluweightingscheme

 info [queryanswerer] running queries from test_testing.data; saving results to
pre.testing.solutions.txt
 info [queryanswerer] querying: predict(pb,-1)  #v:[?].
 info [queryanswerer] writing 2 solutions...
 info [queryanswerer] querying: predict(yc,-1)  #v:[?].
 info [queryanswerer] writing 2 solutions...
 info [queryanswerer] querying: predict(rb2,-1)  #v:[?].
 info [queryanswerer] writing 2 solutions...
 info [queryanswerer] querying: predict(rp,-1)  #v:[?].
 info [queryanswerer] writing 2 solutions...
 info [queryanswerer] querying: predict(bp,-1)  #v:[?].
 info [queryanswerer] writing 2 solutions...
 info [queryanswerer] querying: predict(he,-1)  #v:[?].
 info [queryanswerer] writing 2 solutions...
 info [queryanswerer] querying: predict(wt,-1)  #v:[?].
 info [queryanswerer] writing 2 solutions...

10. measure untrained performance:

$ python scripts/answermetrics.py --data test_testing.data --answers pre.testing
.solutions.txt --metric mrr --metric recall
==============================================================================
metric mrr (mean reciprocal rank): averages 1/rank for all positive answers
. micro: 0.5
. macro: 0.5
. details:
. .  predict(he,-1)  #v:[?].    0.5
. .  predict(pb,-1)  #v:[?].    0.5
. .  predict(yc,-1)  #v:[?].    0.5
. .  predict(bp,-1)  #v:[?].    0.5
. .  predict(rb2,-1)  #v:[?].   0.5
. .  predict(wt,-1)  #v:[?].    0.5
. .  predict(rp,-1)  #v:[?].    0.5
==============================================================================
metric recall (recall): fraction of positive examples that are proposed as solut
ions anywhere in the ranking
. micro: 1.0
. macro: 1.0
. details:
. .  predict(he,-1)  #v:[?].    1.0
. .  predict(pb,-1)  #v:[?].    1.0
. .  predict(yc,-1)  #v:[?].    1.0
. .  predict(bp,-1)  #v:[?].    1.0
. .  predict(rb2,-1)  #v:[?].   1.0
. .  predict(wt,-1)  #v:[?].    1.0
. .  predict(rp,-1)  #v:[?].    1.0

11. get trained rankings (note --params; --solutions):

$ java -cp conf:bin:lib/* edu.cmu.ml.proppr.queryanswerer --programfiles test.wa
m:test.graph:test.cfacts --queries test_testing.data --solutions post.testing.so
lutions.txt --params test.wts
edu.cmu.ml.proppr.queryanswerer.queryanswererconfiguration:
  prover: edu.cmu.ml.proppr.prove.dprprover
weighting scheme: edu.cmu.ml.proppr.learn.tools.reluweightingscheme

 info [queryanswerer] running queries from test_testing.data; saving results to
post.testing.solutions.txt
 info [queryanswerer] querying: predict(pb,-1)  #v:[?].
 info [queryanswerer] writing 2 solutions...
 info [queryanswerer] querying: predict(yc,-1)  #v:[?].
 info [queryanswerer] writing 2 solutions...
 info [queryanswerer] querying: predict(rb2,-1)  #v:[?].
 info [queryanswerer] writing 2 solutions...
 info [queryanswerer] querying: predict(rp,-1)  #v:[?].
 info [queryanswerer] writing 2 solutions...
 info [queryanswerer] querying: predict(bp,-1)  #v:[?].
 info [queryanswerer] writing 2 solutions...
 info [queryanswerer] querying: predict(he,-1)  #v:[?].
 info [queryanswerer] writing 2 solutions...
 info [queryanswerer] querying: predict(wt,-1)  #v:[?].
 info [queryanswerer] writing 2 solutions...

12. measure trained performance:

$ python scripts/answermetrics.py --data test_testing.data --answers post.testin
g.solutions.txt --metric mrr --metric recall
==============================================================================
metric mrr (mean reciprocal rank): averages 1/rank for all positive answers
. micro: 1.0
. macro: 1.0
. details:
. .  predict(he,-1)  #v:[?].    1.0
. .  predict(pb,-1)  #v:[?].    1.0
. .  predict(yc,-1)  #v:[?].    1.0
. .  predict(bp,-1)  #v:[?].    1.0
. .  predict(rb2,-1)  #v:[?].   1.0
. .  predict(wt,-1)  #v:[?].    1.0
. .  predict(rp,-1)  #v:[?].    1.0
==============================================================================
metric recall (recall): fraction of positive examples that are proposed as solut
ions anywhere in the ranking
. micro: 1.0
. macro: 1.0
. details:
. .  predict(he,-1)  #v:[?].    1.0
. .  predict(pb,-1)  #v:[?].    1.0
. .  predict(yc,-1)  #v:[?].    1.0
. .  predict(bp,-1)  #v:[?].    1.0
. .  predict(rb2,-1)  #v:[?].   1.0
. .  predict(wt,-1)  #v:[?].    1.0
. .  predict(rp,-1)  #v:[?].    1.0



==============================================
proppr: programming with personalized id95
==============================================
this is a java package for using graph walk algorithms to perform id136 task
s over local groundings of id85 programs. the package makes use of
parallelization to substantially speed processing, making it practical even for
large databases.

contents:
1. build
2. run
   2.0. overview of java main() classes
        2.0.0. grounder: construct a proof graph for each query
        2.0.1. trainer: train feature weights on the proof graphs
        2.0.2. queryanswerer: generate [un]trained ranked candidate solutions fo
r queries
   2.1. utilities
        2.1.0. compiler.py: convert proppr rulefiles (.ppr) to wam instructions
(.wam)
        2.1.1. answermetrics.py: measure performance
        2.1.2. sparsegraphtools: construct memory- and cpu-efficient proppr data
bases
3. use
   3.0. developing a proppr program and database
   3.1. typical workflow for experiments

1. build
========

proppr $ ant clean build


2. run
======

for all run phases, control logging output using conf/log4j.properties.


2.0. run: java main classes
===========================

edu.cmu.ml.proppr.grounder
edu.cmu.ml.proppr.trainer
edu.cmu.ml.proppr.queryanswerer


2.0.0. run: main classes: grounder
==================================

$ java -cp conf:bin:lib/* edu.cmu.ml.proppr.grounder --queries \
        inputfile --grounded outputfile.grounded --programfiles \
        file.wam:file.cfacts:file.graph [--ternaryindex true|false] \
        [--threads integer] [--prover ppr[:depth] | \
        dpr[:eps[:alph[:strat]]] | tr[:depth] ]

grounder will read the list of queries from inputfile, the wam program
from file.wam, and the various database plugin files file.cfacts and
file.graph, and produce the proof graph for each query in
outputfile.grounded.

optional parameters:

 * if your database contains facts of arity 3 or more, use
`--ternaryindex true` to spend some memory and increase the speed of
lookups.

 * if you are on a multi-core machine, set --threads up to (#cores-2)
to ground queries in parallel (one thread is used as the controller,
one for writing output, and the others are worker threads).

 * the default prover is dpr:1e-4:0.1, which will fail in graphs with
a maximum out degree >10. reduce alpha to 1/(max out degree) to suit
your dataset.


2.0.1. run: main classes: trainer
====================================

$ java -cp conf:bin:lib/* edu.cmu.ml.proppr.trainer --train inputfile.grounded
        --params outputfile [--threads integer] [--epochs integer]
        [--tracelosses] [--force] [--weightingscheme linear | sigmoid
        | tanh | relu | exp]

trainer will read the grounded proof graphs from inputfile.grounded, then perfor
m stochastic id119 to optimize the weights assigned to the edge label
s, storing the resulting parameter vector in outputfile.

optional arguments:

 * if you are on a multicore machine, specify --threads up to (#cores-2) and pro
ppr will process examples in parallel (1 controller thread, 1 thread for managin
g output, n worker threads). training is threadsafe, but currently (fall 2014) p
rograms with a small number of non-db features (or a large number of db lookups)
 may experience reduced parallelization speedup due to resource contention.

* increase or decrease the number of training iterations using --epochs.

* turn on --tracelosses to view a readout of log loss and id173 loss ev
ery epoch.

* turn on --force to use different settings for training than were used for grou
nding (not recommended unless you know what you're doing)

* set --weightingscheme to your desired wrapper function, controlling how the we
ight of an edge is computed from its features.


2.2. run: utilities
===================

2.2.0. run: utilities: queryanswerer
====================================

if you want to use a program to answer a series of queries, you can
use the queryanswerer class.  if you are running this step you should
already have a compiled program and a file containing a list of
queries, one per line.  each query is a single goal.

proppr $ cat testcases/family.queries
sim(william,x)
sim(rachel,x)

proppr $ java edu.cmu.ml.proppr.queryanswerer \
  --programfiles testcases/family.cfacts:testcases/family.crules \
  --queries testcases/family.queries --output answers.txt
 info [component] loading from file 'testcases/family.cfacts' with alpha=0.0 ...
 info [component] loading from file 'testcases/family.crules' with alpha=0.0 ...

proppr $ cat answers.txt
# proved        sim(william,-1) 47 msec
1       0.8838968104504825      -1=c[william]
2       0.035512510088781264    -1=c[lottie]
3       0.035512510088781264    -1=c[rachel]
4       0.035512510088781264    -1=c[sarah]
5       0.002391414820793351    -1=c[poppy]
6       0.0017935611155950133   -1=c[lucas]
7       0.0017935611155950133   -1=c[charlotte]
8       0.0017935611155950133   -1=c[caroline]
9       0.0017935611155950133   -1=c[elizabeth]
# proved        sim(rachel,-1)  18 msec
1       0.9094251636624519      -1=c[rachel]
2       0.0452874181687741      -1=c[caroline]
3       0.0452874181687741      -1=c[elizabeth]


2.2.1. run: utilities: prompt
=============================

an interactive prompt can be useful while debugging logic program issues, becaus
e you can examine a single query in detail. if you are running this step you sho
uld already have a compiled program.

starting up the prompt:

"""
proppr $ java -cp conf/:bin/:lib/* edu.cmu.ml.proppr.prove.prompt --programfiles
 ${programfiles%:}
starting up beanshell...
prv set: edu.cmu.ml.proppr.prove.tracingdfsprover@57fdc2d
 info [component] loading from file 'kbp_prototype/doc.crules' with alpha=0.0 ..
.
 info [component] loading from file 'kbp_prototype/kb.cfacts' with alpha=0.0 ...
 info [component] loading from file 'kbp_prototype/lp_predicate_sf_eng_001-50doc
.graph' with alpha=0.0 ...
lp set: edu.cmu.ml.proppr.prove.logicprogram@2225a091

type 'help();' for help, 'quit();' to quit; 'list();' for a variable listing.

beanshell 2.0b4 - by pat niemeyer (pat@pat.net)
bsh %
"""

when it starts up, prompt instantiates the logic program from the command line a
s 'lp', and a default prover which prints a depth-first-search-style proof of a
query (default maximum depth is 5). you can specify a different prover on the co
mmand line if you wish. for information on built-in commands and interpreter syn
tax, type 'help();':

"""
bsh % help();
this is a beanshell, a command-line interpreter for java. a full beanshell manua
l is available at <[84]http://www.beanshell.org/manual/contents.html>.

type java statements and expressions at the prompt. don't forget semicolons.

type 'help();' for help, 'quit();' to quit; 'list();' for a variable listing.

'show();' will toggle automatic printing of the results of expressions. otherwis
e you must use 'print( expr );' to see results.

'javap( x );' will list the fields and methods available on an object. be warned
; beanshell has trouble locating methods that are only defined on the superclass
.

'[sol = ]run(prover,logicprogram,"functor(arg,arg,...,arg)")' will prove the ass
ociated state.

'pretty(sol)' will list solutions first, then intermediate states in descending
weight order.

bsh %
"""


3. file formats
===============

****** file format: *.rules

example:
predict(x,y) :- hasword(x,w),islabel(y),related(w,y)  #r.
related(w,y) :- # w(w,y).

grammar:
    line= rhs ':-' lhs ('#' featurelist)? '.'
    rhs= goal
    lhs=
      |= goal (',' goal)*
    featurelist=
              |= goal (',' goal)*
    goal= functor
       |= functor '(' arglist ')'
    arglist= constantarglist
          |= variablearglist
          |= constantarglist ',' variablearglist
    constantarglist= constantarg (',' constantarg)*
    variablearglist= variablearg (',' variablearg)*
    constantarg= [a-z][a-za-z0-9]*
    variablearg= [a-z][a-za-z0-9]*
    functor= [a-z][a-za-z0-9]*

****** file format: *.facts

example:
islabel(pos)
islabel(neg)

grammar:
    line= goal

****** file format: *.graph

example:
hasword bk      punk
hasword bk      queen
hasword bk      barbie
hasword bk      and
hasword bk      ken
hasword rb      a
hasword rb      little
hasword rb      red
hasword rb      bike
hasword mv      a
hasword mv      big
hasword mv      7-seater
hasword mv      minivan
hasword mv      with
hasword mv      an
hasword mv      automatic
hasword mv      transmission
hasword hs      a
hasword hs      big
hasword hs      house
hasword hs      in
hasword hs      the
hasword hs      suburbs
hasword hs      with
hasword hs      crushing
hasword hs      mortgage

grammar:
    line= edge '\t' sourcenode '\t' destnode
    edge= functor
    sourcenode,destnode= constantarg

****** file format: *.data

example:
predict(bk,y)   -predict(bk,neg)        +predict(bk,pos)
predict(rb,y)   -predict(rb,neg)        +predict(rb,pos)
predict(mv,y)   +predict(mv,neg)        -predict(mv,pos)
predict(hs,y)   +predict(hs,neg)        -predict(hs,pos)

grammar:
    line= query '\t' examplelist
    query= goal
    examplelist= example ('\t' example)*
    example= positiveexample
          |= negativeexample
    positiveexample= '+' goal
    negativeexample= '-' goal

     *    2019 github, inc.
     * [85]terms
     * [86]privacy
     * [87]security
     * [88]status
     * [89]help

     * [90]contact github
     * [91]pricing
     * [92]api
     * [93]training
     * [94]blog
     * [95]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [96]reload to refresh your
   session. you signed out in another tab or window. [97]reload to refresh
   your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/teamcohen/proppr/commits/working.atom
   3. https://github.com/teamcohen/proppr#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/teamcohen/proppr
  32. https://github.com/join
  33. https://github.com/login?return_to=/teamcohen/proppr
  34. https://github.com/teamcohen/proppr/watchers
  35. https://github.com/login?return_to=/teamcohen/proppr
  36. https://github.com/teamcohen/proppr/stargazers
  37. https://github.com/login?return_to=/teamcohen/proppr
  38. https://github.com/teamcohen/proppr/network/members
  39. https://github.com/teamcohen
  40. https://github.com/teamcohen/proppr
  41. https://github.com/teamcohen/proppr
  42. https://github.com/teamcohen/proppr/issues
  43. https://github.com/teamcohen/proppr/pulls
  44. https://github.com/teamcohen/proppr/projects
  45. https://github.com/teamcohen/proppr/wiki
  46. https://github.com/teamcohen/proppr/pulse
  47. https://github.com/join?source=prompt-code
  48. https://github.com/teamcohen/proppr/commits/working
  49. https://github.com/teamcohen/proppr/branches
  50. https://github.com/teamcohen/proppr/releases
  51. https://github.com/teamcohen/proppr/graphs/contributors
  52. https://github.com/teamcohen/proppr/blob/working/license.md
  53. https://github.com/teamcohen/proppr/search?l=java
  54. https://github.com/teamcohen/proppr/search?l=python
  55. https://github.com/teamcohen/proppr/search?l=perl
  56. https://github.com/teamcohen/proppr/find/working
  57. https://github.com/teamcohen/proppr/archive/working.zip
  58. https://github.com/login?return_to=https://github.com/teamcohen/proppr
  59. https://github.com/join?return_to=/teamcohen/proppr
  60. https://desktop.github.com/
  61. https://desktop.github.com/
  62. https://developer.apple.com/xcode/
  63. https://visualstudio.github.com/
  64. https://github.com/teamcohen/proppr/tree/2e0d978f96c2377ef3d26b80c17f38d2804f496c
  65. https://github.com/teamcohen/proppr/tree/working/conf
  66. https://github.com/teamcohen/proppr/tree/working/doc
  67. https://github.com/teamcohen/proppr/tree/working/examples
  68. https://github.com/teamcohen/proppr/tree/working/lib
  69. https://github.com/teamcohen/proppr/tree/working/my_program
  70. https://github.com/teamcohen/proppr/tree/working/scripts
  71. https://github.com/teamcohen/proppr/tree/working/sparsegraphtools
  72. https://github.com/teamcohen/proppr/tree/working/src
  73. https://github.com/teamcohen/proppr/tree/working/theano
  74. https://github.com/teamcohen/proppr/tree/working/tutorial
  75. https://github.com/teamcohen/proppr/blob/working/.gitignore
  76. https://github.com/teamcohen/proppr/blob/working/changelog
  77. https://github.com/teamcohen/proppr/blob/working/ideas.txt
  78. https://github.com/teamcohen/proppr/blob/working/license.md
  79. https://github.com/teamcohen/proppr/blob/working/notes.txt
  80. https://github.com/teamcohen/proppr/blob/working/readme
  81. https://github.com/teamcohen/proppr/blob/working/build.xml
  82. https://github.com/teamcohen/proppr/blob/working/init.sh
  83. https://groups.google.com/forum/#!forum/proppr
  84. http://www.beanshell.org/manual/contents.html
  85. https://github.com/site/terms
  86. https://github.com/site/privacy
  87. https://github.com/security
  88. https://githubstatus.com/
  89. https://help.github.com/
  90. https://github.com/contact
  91. https://github.com/pricing
  92. https://developer.github.com/
  93. https://training.github.com/
  94. https://github.blog/
  95. https://github.com/about
  96. https://github.com/teamcohen/proppr
  97. https://github.com/teamcohen/proppr

   hidden links:
  99. https://github.com/
 100. https://github.com/teamcohen/proppr
 101. https://github.com/teamcohen/proppr
 102. https://github.com/teamcohen/proppr
 103. https://help.github.com/articles/which-remote-url-should-i-use
 104. https://github.com/
