intro

     * [1]about this site
     * [2]what can you do with ai?
     * [3]how we picked our examples

guides

     * [4]a little history
     * [5]defining ai terms
     * [6]giving your software ai superpowers
     * [7]natural language processing
     * [8]id161
     * [9]training your own models
     * [10]neural network architectures
     * [11]ways in which machines learn
     * [12]code: (re-)training a model
     * [13]code: adding ai to your mobile app

where to next?

     * [14]software and services
     * [15]datasets
     * [16]videos, tutorials, and blogs
     * [17]books, papers, and research

   menu

natural language processing

   natural language processing (nlp) will enable better understanding all
   around: we'll talk to our computers; our computers will understand us;
   and we'll have the [18]star trek universal communicator in our ears
   translating any language into our native language in real time (and
   vice versa).

   before we get to long, philosophical, and emotional natural
   conversations with our computers (as in the movie [19]her, we can build
   a lot of extremely useful language-enabled applications that help do
   things like understand whether someone is getting angry on a support
   call, write better job descriptions, and disambiguating words whose
   meaning change depending on context (see this wikipedia page for a
   [20]fun list of examples including one of my favorite perfectly
   grammatical sentences: [21]buffalo buffalo buffalo buffalo buffalo
   buffalo buffalo buffalo.

   scroll down this page to see modern ai services in action figuring out
   the emotional tilt of a sentence, translating english into chinese, and
   more.

   this branch of ai includes such capabilities as:
     * automatic id103 (asr), which converts what you say
       into computer-readable text, also called "speech to text"
     * text to speech, which goes the other way and gives computer an
       increasingly human-sounding voice
     * language detection which figures out what language a document is
       written in
     * machine translation, which translates text from any language to any
       language. some language pairs work better than others, mostly
       because of the availability of data sets.
     * id31, which figures out the emotional tilt of text
     * entity extraction, which highlights all the "things, places,
       people, and products" in a piece of text
     * information extraction, which finds relationships between extracted
       entities, such as "who did what to whom and how did they do it"?
     * document analysis, which categorizes documents, figures out what
       they are talking about (id96), and makes the content easy
       to search (find documents about "fund raising" even if the
       documents never contain that exact phrase)
     * id86, which generates well-formed sentences
       so that when you are chatting with your bot, it sounds like a real
       person
     * summarization, which generates readable summaries of arbitrary text
       documents, preserving as much of the meaning as possible
     * id53, which answers questions from people about a
       dataset. part of the challenge is figuring out which questions mean
       the same thing. in bots, a hot topic these days is "intent
       categorization", which is about trying to figure out what the user
       is trying to accomplish (e.g., book a flight, schedule a meeting,
       make a withdrawal)

   let's explore a few of these capabilities by calling real-world apis,
   some from the open source community and others from the major public
   cloud providers such as google, microsoft, and ibm. you can type your
   own sentence or use of our pre-canned examples. check the"i'm not a
   robot" box, and hit analyze. click on the api name to see the results
   that come back. it's fun! for example, click the ibm watson developer
   cloud answer for id31. it's like the entire cast (and
   friends) of pixar's [22]inside out is evaluating your sentence.

   also, a quick shout out to the fabulous delip rao ([23]@deliprao) of
   [24]joostware for his review of this entire guide, but especially this
   section. delip knows nlp, among many other ai technologies. thanks,
   delip!

id31

   a common natural language processing task involves understanding the
   affect or sentiment of text, also known as id31. for
   example, the following sentences:
     * "seeing the f-117 nighthawk was cool."
     * "airplanes with the shape of hawks are cool."
     * "seeing a hawk flying at night is cool."

   all use similar nouns, have significantly different meanings, but
   communicate a similar feeling, or sentiment. understanding sentiment
   without depending on, or even understanding, meaning, can be extremely
   useful. for example, a system can monitor conversations of customers
   with technical support and derive a general degree of "happiness",
   "anger" or other emotions expressed in the communication.

   to see responses from different services to the same query, check out
   our [25]comparison page for sentiment apis.

entity analysis and extraction

   another important area in nlp deals with language entities. types of
   analysis range from understanding syntax to extracting actual entities,
   identifying and labeling them by type (e.g. person, organization,
   location, events, product, etc). as in other cases the response data,
   structure, and accuracy varies wildly from one service to the next.

   to see responses from different services to the same query, check out
   our [26]comparison page for entity apis.

a key feature: retraining

   a key element to look at is whether the service in question supports
   training for new intents or models. many general purpose text analysis
   systems don   t go further, but more focused services, like
   [27]https://recast.ai and [28]https://api.ai do. when looking at the
   example results you will notice that "out of the box" those services
   respond with fewer or no entities, compared to the services of google
   and others. the key difference is that they are oriented towards
   supporting conversations and custom entity and training sets. so while
   they may require some more work to be immediately useful, they are
   actually more powerful in the long run since they support evolution and
   customization specific to a domain or niche.

language analysis and detection

   while automated translation is an interesting application, language
   detection is a service that can be useful in many different situations
       imagine, instead of having to ask a person what language they   d like
   to choose, they can simply speak or write and a service can use that
   information to automatically route to the correct language.

   to see responses from different services to the same query, see the
   [29]comparison page for language analysis apis.

language generation and translation

   generating language allows a computer to interact with humans in their
   own language. generating spoken language is generally called speech
   synthesis. it's important to note that understanding speech or language
   is not required for generating it.

   translating between languages may or may not involve understanding, and
   may also involve different degrees of flexibility.

api examples

   here   s a collection of api examples referenced in this section

   iframe: [30]/test/phrase/sentiment-analysis

   iframe: [31]/test/phrase/entity-analysis

   iframe: [32]/test/phrase/language-analysis

   iframe: [33]/test/phrase/language-translation

    1. [34]giving your software ai superpowers
    2. [35]vision

   [36]follow @a16z on github [37]fork a16z/ai on github

references

   visible links
   1. http://aiplaybook.a16z.com/docs/intro/getting-started
   2. http://aiplaybook.a16z.com/docs/intro/survey-goals
   3. http://aiplaybook.a16z.com/docs/intro/survey-parameters
   4. http://aiplaybook.a16z.com/docs/guides/ai
   5. http://aiplaybook.a16z.com/docs/guides/ai-terms
   6. http://aiplaybook.a16z.com/docs/guides/ai-using
   7. http://aiplaybook.a16z.com/docs/guides/nlp
   8. http://aiplaybook.a16z.com/docs/guides/vision
   9. http://aiplaybook.a16z.com/docs/guides/dl
  10. http://aiplaybook.a16z.com/docs/guides/dl-architectures
  11. http://aiplaybook.a16z.com/docs/guides/dl-learning
  12. http://aiplaybook.a16z.com/docs/guides/dl-start
  13. http://aiplaybook.a16z.com/docs/guides/dl-app
  14. http://aiplaybook.a16z.com/docs/reference/software
  15. http://aiplaybook.a16z.com/docs/reference/datasets
  16. http://aiplaybook.a16z.com/docs/reference/links
  17. http://aiplaybook.a16z.com/docs/reference/bibliography
  18. http://memory-alpha.wikia.com/wiki/universal_translator
  19. http://www.imdb.com/title/tt1798709/
  20. https://en.wikipedia.org/wiki/list_of_linguistic_example_sentences
  21. https://en.wikipedia.org/wiki/buffalo_buffalo_buffalo_buffalo_buffalo_buffalo_buffalo_buffalo
  22. http://www.imdb.com/title/tt2096673/
  23. http://twitter.com/deliprao
  24. http://joostware.com/
  25. http://aiplaybook.a16z.com/test/phrase/sentiment-analysis
  26. http://aiplaybook.a16z.com/test/phrase/entity-analysis
  27. https://recast.ai/
  28. https://api.ai/
  29. http://aiplaybook.a16z.com/test/phrase/language-analysis
  30. http://aiplaybook.a16z.com/test/phrase/sentiment-analysis
  31. http://aiplaybook.a16z.com/test/phrase/entity-analysis
  32. http://aiplaybook.a16z.com/test/phrase/language-analysis
  33. http://aiplaybook.a16z.com/test/phrase/language-translation
  34. http://aiplaybook.a16z.com/docs/guides/ai-using
  35. http://aiplaybook.a16z.com/docs/guides/vision
  36. https://github.com/a16z
  37. https://github.com/a16z/ai/fork

   hidden links:
  39. http://aiplaybook.a16z.com/
  40. http://aiplaybook.a16z.com/
