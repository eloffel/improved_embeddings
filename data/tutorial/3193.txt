   #[1]github [2]recent commits to bist-parser:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]20
     * [35]star [36]216
     * [37]fork [38]82

[39]elikip/[40]bist-parser

   [41]code [42]pull requests 3 [43]projects 0 [44]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [45]sign up
   graph-based and transition-based dependency parsers based on bilstms
   [46]dependency-parser [47]natural-language-processing
     * [48]33 commits
     * [49]1 branch
     * [50]0 releases
     * [51]fetching contributors
     * [52]apache-2.0

    1. [53]python 51.7%
    2. [54]perl 48.3%

   (button) python perl
   branch: master (button) new pull request
   [55]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/e
   [56]download zip

downloading...

   want to be notified of new releases in elikip/bist-parser?
   [57]sign in [58]sign up

launching github desktop...

   if nothing happens, [59]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [60]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [61]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [62]download the github extension for visual studio
   and try again.

   (button) go back
   [63]@elikip
   [64]elikip [65]create readme.md
   latest commit [66]4cd6a29 jun 12, 2017
   [67]permalink
   type        name        latest commit message commit time
        failed to load latest commit information.
        [68]barchybrid/src
        [69]bmstparser/src
        [70]license
        [71]readme.md

readme.md

bist parsers

graph & transition based dependency parsers using bilstm feature extractors.

   the techniques behind the parser are described in the paper [72]simple
   and accurate id33 using bidirectional lstm feature
   representations. futher materials could be found [73]here.

required software

     * python 2.7 interpreter
     * [74]dynet library

train a parsing model

   the software requires having a training.conll and development.conll
   files formatted according to the [75]conll data format. for the faster
   graph-based parser change directory to bmstparser (1200 words/sec), and
   for the more accurate transition-based parser change directory to
   barchybrid (800 word/sec). the benchmark was performed on a mac book
   pro with i7 processor. the graph-based parser acheives an accuracy of
   93.8 uas and the transition-based parser an accuracy of 94.7 uas on the
   standard id32 dataset (standford dependencies). the
   transition-based parser requires no part-of-speech tagging and setting
   all the tags to nn will produce the expected accuracy. the model and
   param files achieving those scores are available for download
   ([76]graph-based model, [77]transition-based model). the trained models
   include improvements beyond those described in the paper, to be
   published soon.

   to train a parsing model with for either parsing architecture type the
   following at the command prompt:
python src/parser.py --dynet-seed 123456789 [--dynet-mem xxxx] --outdir [results
 directory] --train training.conll --dev development.conll --epochs 30 --lstmdim
s 125 --lstmlayers 2 [--extrn extrn.vectors] --bibi-lstm

   we use the same external embedding used in [78]transition-based
   id33 with stack long short-term memory which can be
   downloaded from the authors [79]github repository and [80]directly
   here.

   if you are training a transition-based parser then for optimal results
   you should add the following to the command prompt --k 3 --usehead
   --userl. these switch will set the stack to 3 elements; use the bilstm
   of the head of trees on the stack as feature vectors; and add the
   bilstm of the right/leftmost children to the feature vectors.

   note 1: you can run it without pos embeddings by setting the pos
   embedding dimensions to zero (--pembedding 0).

   note 2: the reported test result is the one matching the highest
   development score.

   note 3: the parser calculates (after each iteration) the accuracies
   excluding punctuation symbols by running the eval.pl script from the
   conll-x shared task and stores the results in directory specified by
   the --outdir.

   note 4: the external embeddings parameter is optional and better not
   used when train/predicting a graph-based model.

parse data with your parsing model

   the command for parsing a test.conll file formatted according to the
   [81]conll data format with a previously trained model is:
python src/parser.py --predict --outdir [results directory] --test test.conll [-
-extrn extrn.vectors] --model [trained model file] --params [param file generate
 during training]

   the parser will store the resulting conll file in the out directory
   (--outdir).

   note 1: if you are using the arc-hybrid trained model we provided
   please use the --extrn flag and specify the location of the external
   embeddings file.

   note 2: if you are using the first-order trained model we provided
   please do not use the --extrn flag.

citation

   if you make use of this software for research purposes, we'll
   appreciate citing the following:
@article{dblp:journals/tacl/kiperwasserg16,
    author    = {eliyahu kiperwasser and yoav goldberg},
    title     = {simple and accurate id33 using bidirectional {lst
m}
           feature representations},
    journal   = {{tacl}},
    volume    = {4},
    pages     = {313--327},
    year      = {2016},
    url       = {https://transacl.org/ojs/index.php/tacl/article/view/885},
    timestamp = {tue, 09 aug 2016 14:51:09 +0200},
    biburl    = {http://dblp.uni-trier.de/rec/bib/journals/tacl/kiperwasserg16},
    bibsource = {dblp computer science bibliography, http://dblp.org}
}

forks

   [82]bist-pytorch: a pytorch implementation of the bist parsers (for
   graph based parser only).

   [83]bist-covington: a neural implementation of the covington's
   algorithm for non-projective id33. it extends the
   original bist transition-based a greedy parser by including a dynamic
   oracle for non-projective parsing to mitigate error propagation.

   [84]uppsala parser: a transition-based parser for universal
   dependencies with bilstm word and character representations.

license

   this software is released under the terms of the [85]apache license,
   version 2.0.

contact

   for questions and usage issues, please contact [86]elikip@gmail.com

credits

   [87]eliyahu kiperwasser

   [88]yoav goldberg

     *    2019 github, inc.
     * [89]terms
     * [90]privacy
     * [91]security
     * [92]status
     * [93]help

     * [94]contact github
     * [95]pricing
     * [96]api
     * [97]training
     * [98]blog
     * [99]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [100]reload to refresh your
   session. you signed out in another tab or window. [101]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/elikip/bist-parser/commits/master.atom
   3. https://github.com/elikip/bist-parser#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/elikip/bist-parser
  32. https://github.com/join
  33. https://github.com/login?return_to=/elikip/bist-parser
  34. https://github.com/elikip/bist-parser/watchers
  35. https://github.com/login?return_to=/elikip/bist-parser
  36. https://github.com/elikip/bist-parser/stargazers
  37. https://github.com/login?return_to=/elikip/bist-parser
  38. https://github.com/elikip/bist-parser/network/members
  39. https://github.com/elikip
  40. https://github.com/elikip/bist-parser
  41. https://github.com/elikip/bist-parser
  42. https://github.com/elikip/bist-parser/pulls
  43. https://github.com/elikip/bist-parser/projects
  44. https://github.com/elikip/bist-parser/pulse
  45. https://github.com/join?source=prompt-code
  46. https://github.com/topics/dependency-parser
  47. https://github.com/topics/natural-language-processing
  48. https://github.com/elikip/bist-parser/commits/master
  49. https://github.com/elikip/bist-parser/branches
  50. https://github.com/elikip/bist-parser/releases
  51. https://github.com/elikip/bist-parser/graphs/contributors
  52. https://github.com/elikip/bist-parser/blob/master/license
  53. https://github.com/elikip/bist-parser/search?l=python
  54. https://github.com/elikip/bist-parser/search?l=perl
  55. https://github.com/elikip/bist-parser/find/master
  56. https://github.com/elikip/bist-parser/archive/master.zip
  57. https://github.com/login?return_to=https://github.com/elikip/bist-parser
  58. https://github.com/join?return_to=/elikip/bist-parser
  59. https://desktop.github.com/
  60. https://desktop.github.com/
  61. https://developer.apple.com/xcode/
  62. https://visualstudio.github.com/
  63. https://github.com/elikip
  64. https://github.com/elikip/bist-parser/commits?author=elikip
  65. https://github.com/elikip/bist-parser/commit/4cd6a29d6c737ff29cb61c0e51532a9d60c4818c
  66. https://github.com/elikip/bist-parser/commit/4cd6a29d6c737ff29cb61c0e51532a9d60c4818c
  67. https://github.com/elikip/bist-parser/tree/4cd6a29d6c737ff29cb61c0e51532a9d60c4818c
  68. https://github.com/elikip/bist-parser/tree/master/barchybrid/src
  69. https://github.com/elikip/bist-parser/tree/master/bmstparser/src
  70. https://github.com/elikip/bist-parser/blob/master/license
  71. https://github.com/elikip/bist-parser/blob/master/readme.md
  72. https://www.transacl.org/ojs/index.php/tacl/article/viewfile/885/198
  73. http://elki.cc/#/article/simple and accurate id33 using bidirectional lstm feature representations
  74. https://github.com/clab/dynet/tree/master/python
  75. http://ilk.uvt.nl/conll/#dataformat
  76. https://www.dropbox.com/sh/v9cbshnmb36km6v/aadgbs9hb9vy0o-ubzw9abbka/bestfirstorder.tar.gz?dl=0
  77. https://www.dropbox.com/sh/v9cbshnmb36km6v/aacepp3dlqejnra_qypmll93a/bestarchybrid.tar.gz?dl=0
  78. http://arxiv.org/abs/1505.08075
  79. https://github.com/clab/lstm-parser/
  80. https://drive.google.com/file/d/0b8neszodphlsdwf2s1ayb1rktxc/view?usp=sharing
  81. http://ilk.uvt.nl/conll/#dataformat
  82. https://github.com/wddabc/bist-parser
  83. https://github.com/aghie/lys-fastparse
  84. https://github.com/uppsalanlp/uuparser
  85. http://www.apache.org/licenses/license-2.0
  86. mailto:elikip@gmail.com
  87. http://elki.cc/
  88. https://www.cs.bgu.ac.il/~yoavg/uni/
  89. https://github.com/site/terms
  90. https://github.com/site/privacy
  91. https://github.com/security
  92. https://githubstatus.com/
  93. https://help.github.com/
  94. https://github.com/contact
  95. https://github.com/pricing
  96. https://developer.github.com/
  97. https://training.github.com/
  98. https://github.blog/
  99. https://github.com/about
 100. https://github.com/elikip/bist-parser
 101. https://github.com/elikip/bist-parser

   hidden links:
 103. https://github.com/
 104. https://github.com/elikip/bist-parser
 105. https://github.com/elikip/bist-parser
 106. https://github.com/elikip/bist-parser
 107. https://help.github.com/articles/which-remote-url-should-i-use
 108. https://github.com/elikip/bist-parser#bist-parsers
 109. https://github.com/elikip/bist-parser#graph--transition-based-dependency-parsers-using-bilstm-feature-extractors
 110. https://github.com/elikip/bist-parser#required-software
 111. https://github.com/elikip/bist-parser#train-a-parsing-model
 112. https://github.com/elikip/bist-parser#parse-data-with-your-parsing-model
 113. https://github.com/elikip/bist-parser#citation
 114. https://github.com/elikip/bist-parser#forks
 115. https://github.com/elikip/bist-parser#license
 116. https://github.com/elikip/bist-parser#contact
 117. https://github.com/elikip/bist-parser#credits
 118. https://github.com/
