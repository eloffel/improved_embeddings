   #[1]springboard blog    a beginner   s guide to neural networks in python
   comments feed [2]alternate [3]alternate

   iframe: [4]https://www.googletagmanager.com/ns.html?id=gtm-mx6wg5

   learn about springboard
     * about springboard
     * [5]the springboard experience
     * [6]meet your mentor
     * [7]student success stories

     * skills tracks
     * [8]introduction to data science
     * [9]intermediate data science: python
     * [10]business analytics
     * [11]ux design
     * [12]introduction to cybersecurity
     * [13]digital marketing for professionals

     * career tracks
     * [14]data science career track job guarantee
     * [15]digital marketing career track
     * [16]cybersecurity career track
     * [17]ux career track job guarantee
     * [18]ai/machine learning career track job guarantee

   [19][logo-long.png]
   ____________________
   (button) subscribe
     * [20]data science
     * [21]design
     * [22]business & marketing
     * [23]cybersecurity
     * [24]ai/machine learning
     * [25]news
     *

     *
     * [26]data science
     * [27]design
     * [28]business & marketing
     * [29]cybersecurity
     * [30]ai/machine learning
     * [31]news
     * ____________________
       (button) subscribe

   ____________________ search

   [32]home    [33]ai/machine learning    a beginner   s guide to neural
   networks in python

   march 21, 2017

a beginner   s guide to neural networks in python

   jose portilla
     * 8
     * 8
     * 4
     * 9
     * 9

     * 38
       shares
     *
     *
     *
     *
     *

building a neural network in python

i   m jose portilla and i [34]teach thousands of students on udemy about data
science and programming and i also conduct [35]in-person programming and data
science training, for more info you can reach me at training at
pieriandata.com.

   the code and data for this tutorial is at [36]springboard   s blog
   tutorials repository, if you want to follow along.

   the most popular machine learning library for python is [37]scikit
   learn. the latest version (0.18) now has built in support for neural
   network models! in this article we will learn how neural networks work
   and how to implement them with the python programming language and the
   latest version of scikit-learn! [38]basic understanding of python is
   necessary to understand this article, and it would also be helpful (but
   not necessary) to have some experience with sci-kit learn.

neural networks

   neural networks are a machine learning framework that attempts to mimic
   the learning pattern of natural biological neural networks: you can
   think of them as a crude approximation of what we assume the human mind
   is doing when it is learning. biological neural networks have
   interconnected neurons with dendrites that receive inputs, then based
   on these inputs they produce an output signal through an axon to
   another neuron. we will try to mimic this process through the use of
   id158s (ann), which we will just refer to as neural
   networks from now on. neural networks are the foundation of deep
   learning, a subset of machine learning that is responsible for some of
   the most exciting technological advances today! the process of creating
   a neural network in python begins with the most basic form, a single
   id88. let   s start by explaining the single id88!

the id88

   let   s start our discussion by talking about the id88! a
   id88 has one or more inputs, a bias, an activation function, and
   a single output. the id88 receives inputs, multiplies them by
   some weight, and then passes them into an activation function to
   produce an output. there are many possible id180 to
   choose from, such as the logistic function, a trigonometric function, a
   step function etc. we must also make sure to add a [39]bias to the
   id88, a constant weight outside of the inputs that allows us to
   achieve better fit for our predictive models. check out the diagram
   below for a visualization of a id88:

   neural network in python

   once we have the output we can compare it to a known label and adjust
   the weights accordingly (the weights usually start off with random
   initialization values). we keep repeating this process until we have
   reached a maximum number of allowed iterations, or an acceptable error
   rate.

   to create a neural network, we simply begin to add layers of
   id88s together, creating a multi-layer id88 model of a
   neural network. you   ll have an input layer which directly takes in your
   data and an output layer which will create the resulting outputs. any
   layers in between are known as hidden layers because they don   t
   directly    see    the feature inputs within the data you feed in or the
   outputs. for a visualization of this check out the diagram below
   (source: wikipedia).

   neural network in python

   keep in mind that due to their nature, neural networks tend to work
   better on gpus than on cpu. the sci-kit learn framework isn   t built for
   gpu optimization. if you want to continue using gpus and distributed
   models, take a look at some other frameworks, such as google   s open
   sourced [40]tensorflow.

   let   s move on to actually creating a neural network with python and
   sci-kit learn!

scikit-learn

   in order to follow along with this tutorial, you   ll need to have the
   latest version of scikit learn (>0.18) installed! it is easily
   installable either through pip or conda, but you can reference the
   [41]official installation documentation for complete details on this.

anaconda and ipython notebook

   one easy way of getting scikit-learn and all of the tools you need to
   have to do this exercise is by using anaconda   s ipython notebook
   software. [42]this tutorial will help you get started with these tools
   so you can build a neural network in python within.

data

   for this analysis we will cover one of life   s most important topics    
   wine! all joking aside, [43]wine fraud is a very real thing. let   s see
   if a neural network in python can help with this problem! we will use
   the wine data set from the uci machine learning repository. it has
   various chemical features of different wines, all grown in the same
   region in italy, but the data is labeled by three different possible
   cultivars. we will try to build a model that can classify what cultivar
   a wine belongs to based on its chemical features using neural networks.
   you can get the data [44]here or find other free [45]data sets here.

   first let   s import the dataset! we   ll use the names feature of pandas
   to make sure that the column names associated with the data come
   through.
   in [11]:
import pandas as pd
wine = pd.read_csv('wine_data.csv', names = ["cultivator", "alchol", "malic_acid
", "ash", "alcalinity_of_ash", "magnesium", "total_phenols", "falvanoids", "nonf
lavanoid_phenols", "proanthocyanins", "color_intensity", "hue", "od280", "prolin
e"])

   let   s check out the data:
   in [9]:
wine.head()

   out[9] (we   ve cut some columns from this output in the interests of
   formatting for this blog post     you should see more):
     cultivator alchol malic_acid ash
   0 1          14.23  1.71       2.43
   1 1          13.20  1.78       2.14
   2 1          13.16  2.36       2.67
   3 1          14.37  1.95       2.50
   4 1          13.24  2.59       2.87
   in [12]:
wine.describe().transpose()

   out[12] (we   ve cut the standard deviation (std) and count columns from
   this output in the interests of formatting for this blog post):
                           mean     min     25%      50%     75%      max
        cultivator      1.938202   1.00   1.0000   2.000   3.0000   3.00
          alchol        13.000618  11.03  12.3625  13.050  13.6775  14.83
        malic_acid      2.336348   0.74   1.6025   1.865   3.0825   5.80
           ash          2.366517   1.36   2.2100   2.360   2.5575   3.23
    alcalinity_of_ash   19.494944  10.60  17.2000  19.500  21.5000  30.00
        magnesium       99.741573  70.00  88.0000  98.000  107.0000 162.00
      total_phenols     2.295112   0.98   1.7425   2.355   2.8000   3.88
        falvanoids      2.029270   0.34   1.2050   2.135   2.8750   5.08
   nonflavanoid_phenols 0.361854   0.13   0.2700   0.340   0.4375   0.66
     proanthocyanins    1.590899   0.41   1.2500   1.555   1.9500   3.58
     color_intensity    5.058090   1.28   3.2200   4.690   6.2000   13.00
           hue          0.957449   0.48   0.7825   0.965   1.1200   1.71
          od280         2.611685   1.27   1.9375   2.780   3.1700   4.00
         proline        746.893258 278.00 500.5000 673.500 985.0000 1680.00
   in [13]:
# 178 data points with 13 features and 1 label column
wine.shape

   out[13]:
(178, 14)

   let   s set up our data and our labels:
   in [14]:
x = wine.drop('cultivator',axis=1)
y = wine['cultivator']

train test split

   let   s split our data into training and testing sets, this is done
   easily with scikit learn   s train_test_split function from
   model_selection:
   in [15]:
from sklearn.model_selection import train_test_split

   in [16]:
x_train, x_test, y_train, y_test = train_test_split(x, y)

id174

   the neural network in python may have difficulty converging before the
   maximum number of iterations allowed if the data is not normalized.
   multi-layer id88 is sensitive to feature scaling, so it is highly
   recommended to scale your data. note that you must apply the same
   scaling to the test set for meaningful results. there are a lot of
   different methods for id172 of data, we will use the built-in
   standardscaler for standardization.
   in [17]:
from sklearn.preprocessing import standardscaler

   in [18]:
scaler = standardscaler()

   in [19]:
# fit only to the training data
scaler.fit(x_train)

   out[19]:
standardscaler(copy=true, with_mean=true, with_std=true)

   in [20]:
# now apply the transformations to the data:
x_train = scaler.transform(x_train)
x_test = scaler.transform(x_test)

training the model

   now it is time to train our model. scikit learn makes this incredibly
   easy, by using estimator objects. in this case we will import our
   estimator (the multi-layer id88 classifier model) from the
   neural_network library of scikit-learn!
   in [21]:
from sklearn.neural_network import mlpclassifier

   next we create an instance of the model, there are a lot of parameters
   you can choose to define and customize here, we will only define the
   hidden_layer_sizes. for this parameter you pass in a tuple consisting
   of the number of neurons you want at each layer, where the nth entry in
   the tuple represents the number of neurons in the nth layer of the mlp
   model. there are many ways to choose these numbers, but for simplicity
   we will choose 3 layers with the same number of neurons as there are
   features in our data set along with 500 max iterations.
   in [24]:
mlp = mlpclassifier(hidden_layer_sizes=(13,13,13),max_iter=500)

   now that the model has been made we can fit the training data to our
   model, remember that this data has already been processed and scaled:
   in [25]:
mlp.fit(x_train,y_train)

   out[25]:
mlpclassifier(activation='relu', alpha=0.0001, batch_size='auto', beta_1=0.9,
       beta_2=0.999, early_stopping=false, epsilon=1e-08,
       hidden_layer_sizes=(13, 13, 13), learning_rate='constant',
       learning_rate_init=0.001, max_iter=500, momentum=0.9,
       nesterovs_momentum=true, power_t=0.5, random_state=none,
       shuffle=true, solver='adam', tol=0.0001, validation_fraction=0.1,
       verbose=false, warm_start=false)

   you can see the output that shows the default values of the other
   parameters in the model. i encourage you to play around with them and
   discover what effects they have on your neural network in python!

predictions and evaluation

   now that we have a model it is time to use it to get predictions! we
   can do this simply with the predict() method off of our fitted model:
   in [26]:
predictions = mlp.predict(x_test)

   now we can use scikit-learn   s built in metrics such as a classification
   report and confusion matrix to evaluate how well our model performed:
   in [27]:
from sklearn.metrics import classification_report,confusion_matrix

   in [28]:
print(confusion_matrix(y_test,predictions))

[[17  0  0]
 [ 0 14  1]
 [ 0  0 13]]

   in [29]:
print(classification_report(y_test,predictions))

             precision    recall  f1-score   support

          1       1.00      1.00      1.00        17
          2       1.00      0.93      0.97        15
          3       0.93      1.00      0.96        13

avg / total       0.98      0.98      0.98        45

   not bad! looks like we only misclassified one bottle of wine in our
   test data! this is pretty good considering how few lines of code we had
   to write for our neural network in python. the downside however to
   using a multi-layer id88 model is how difficult it is to
   interpret the model itself. the weights and biases won   t be easily
   interpretable in relation to which features are important to the model
   itself.

   however, if you do want to extract the mlp weights and biases after
   training your model, you use its public attributes coefs_ and
   intercepts_.

   coefs_ is a list of weight matrices, where weight matrix at index i
   represents the weights between layer i and layer i+1.

   intercepts_ is a list of bias vectors, where the vector at index i
   represents the bias values added to layer i+1.
   in [30]:
len(mlp.coefs_)

   out[30]:
4

   in [31]:
len(mlp.coefs_[0])

   out[31]:
13

   in [32]:
len(mlp.intercepts_[0])

   out[32]:
13

conclusion

   hopefully you   ve enjoyed this brief discussion on neural networks! try
   playing around with the number of hidden layers and neurons and see how
   they effect the results of your neural network in python!

   want to learn more? you can check out my python for data science and
   machine learning course on udemy! get it for 90% off at this link:
   [46]https://www.udemy.com/python-for-data-science-and-machine-learning-
   bootcamp/

   if you are looking for corporate in-person training, feel free to
   contact me at: training at pieriandata.com.

   please feel free to follow along with the code [47]here and leave
   comments below if you have any questions!
     __________________________________________________________________

   jose portilla

you might also be interested in...

   [48]ai/machine learning
   [49]41 essential machine learning interview questions

   machine learning interview questions are an integral part of the data
   science interview and the path to becoming a data scientist, machine
   learning engineer, or data engineer. springboard created a free guide
   to data science interviews, so we know exactly how they can trip up
   candidates! in order to help resolve that, here is a curated and [   ]
   [50](button) read more
   [51]ai/machine learning
   [52]introducing the first machine learning course with a job guarantee

   from amazon   s shockingly on-target shopping recommendations to google   s
   increasingly sophisticated translation tools, artificial intelligence
   (ai) is no longer the stuff of sci-fi   it   s become a regular part of
   every consumer   s daily life. this mainstream adoption of ai-powered
   products coupled with ever-bigger bets by tech and tech-adjacent
   companies has led to an ai talent shortage that many [   ]
   [53](button) read more
   [54]ai/machine learning
   [55]id75 in python: a tutorial

   in this tutorial, we will be building a basic id75 that
   will indicate if there is a positive or negative relationship between
   two variables. interested in more advanced frameworks?  view our
   tutorial on neural networks in python. understanding id75
   a id75 is a good tool for quick predictive analysis: for
   example, the price [   ]
   [56](button) read more

   skills tracks
     * [57]introduction to data science
     * [58]intermediate data science: python
     * [59]business analytics
     * [60]ux design
     * [61]introduction to cybersecurity
     * [62]digital marketing for professionals

   career tracks
     * [63]data science career track
     * [64]digital marketing career track
     * [65]cybersecurity career track
     * [66]ux career track
     * [67]ai/machine learning career track

   resources
     * [68]free learning paths
     * [69]e-books and guides
     * [70]view all resources

   about us
     * [71]about the company
     * [72]meet the team
     * [73]jobs
     * [74]become a mentor
     * [75]hire our students
     * [76]corporate training

   contact us
     * [77]frequently asked questions
     * [78]contact us

   student discounts
     * [79]career tracks
     * [80]skills tracks

   [81]like us on facebook
   [82]tweet us on twitter
   [83]read our stories on medium

   copyright 2019
   [84]terms [85]privacy [86]conduct

   resources
     * [87]free learning paths
     * [88]e-books and guides
     * [89]view all resources

   about us
     * [90]about the company
     * [91]meet the team
     * [92]jobs
     * [93]become a mentor
     * [94]hire our students
     * [95]corporate training

     * [96]become a mentor
     * [97]hire our students
     * [98]corporate training

   contact us
     * [99]frequently asked questions
     * [100]contact us

   student discounts
     * [101]career tracks
     * [102]skills tracks

   [103]like us on facebook
   [104]tweet us on twitter
   [105]read our stories on medium

   copyright 2019
   [106]terms [107]privacy [108]conduct

   [pixel?tag=viewcontent&noscript=1]

references

   visible links
   1. https://www.springboard.com/blog/beginners-guide-neural-network-in-python-scikit-learn-0-18/feed/
   2. https://www.springboard.com/blog/wp-json/oembed/1.0/embed?url=https://www.springboard.com/blog/beginners-guide-neural-network-in-python-scikit-learn-0-18/
   3. https://www.springboard.com/blog/wp-json/oembed/1.0/embed?url=https://www.springboard.com/blog/beginners-guide-neural-network-in-python-scikit-learn-0-18/&format=xml
   4. https://www.googletagmanager.com/ns.html?id=gtm-mx6wg5
   5. https://www.springboard.com/how-it-works/overview
   6. https://www.springboard.com/mentors
   7. https://www.springboard.com/success
   8. https://www.springboard.com/workshops/data-science
   9. https://www.springboard.com/workshops/data-science-intensive
  10. https://www.springboard.com/workshops/analytics
  11. https://www.springboard.com/workshops/ux-design
  12. https://www.springboard.com/workshops/cybersecurity
  13. https://workshops.springboard.com/marketing-skills-track/
  14. https://www.springboard.com/workshops/data-science-career-track
  15. https://www.springboard.com/workshops/marketing-career-track
  16. https://www.springboard.com/workshops/cybersecurity-career-track/
  17. https://www.springboard.com/workshops/ux-career-track
  18. https://www.springboard.com/workshops/ai-machine-learning-career-track
  19. https://www.springboard.com/blog/
  20. https://www.springboard.com/blog/category/data-science
  21. https://www.springboard.com/blog/category/design
  22. https://www.springboard.com/blog/category/business-and-marketing
  23. https://www.springboard.com/blog/category/cybersecurity
  24. https://www.springboard.com/blog/category/ai-machine-learning
  25. https://www.springboard.com/blog/category/news
  26. https://www.springboard.com/blog/category/data-science
  27. https://www.springboard.com/blog/category/design
  28. https://www.springboard.com/blog/category/business-and-marketing
  29. https://www.springboard.com/blog/category/cybersecurity
  30. https://www.springboard.com/blog/category/ai-machine-learning
  31. https://www.springboard.com/blog/category/news
  32. https://www.springboard.com/blog/
  33. https://www.springboard.com/blog/category/ai-machine-learning/
  34. https://www.udemy.com/python-for-data-science-and-machine-learning-bootcamp/
  35. http://www.pieriandata.com/
  36. https://github.com/rogerh91/springboard-blog-tutorials/blob/master/neural networks /jmportilla_springboard_blog_neural_network.ipynb
  37. http://scikit-learn.org/
  38. https://springboard.com/workshops/data-science-intensive
  39. https://stackoverflow.com/questions/2480650/role-of-bias-in-neural-networks
  40. https://github.com/tensorflow/tensorflow
  41. http://scikit-learn.org/stable/install.html
  42. https://www.safaribooksonline.com/blog/2013/12/12/start-ipython-notebook/
  43. https://en.wikipedia.org/wiki/wine_fraud
  44. https://archive.ics.uci.edu/ml/datasets/wine
  45. https://www.springboard.com/blog/free-public-data-sets-data-science-project/
  46. https://www.udemy.com/python-for-data-science-and-machine-learning-bootcamp/
  47. https://github.com/rogerh91/springboard-blog-tutorials/blob/master/neural networks /jmportilla_springboard_blog_neural_network.ipynb
  48. https://www.springboard.com/blog/category/ai-machine-learning
  49. https://www.springboard.com/blog/machine-learning-interview-questions/
  50. https://www.springboard.com/blog/machine-learning-interview-questions/
  51. https://www.springboard.com/blog/category/ai-machine-learning
  52. https://www.springboard.com/blog/ai-machine-learning-career-track/
  53. https://www.springboard.com/blog/ai-machine-learning-career-track/
  54. https://www.springboard.com/blog/category/ai-machine-learning
  55. https://www.springboard.com/blog/linear-regression-in-python-a-tutorial/
  56. https://www.springboard.com/blog/linear-regression-in-python-a-tutorial/
  57. https://www.springboard.com/workshops/data-science
  58. https://www.springboard.com/workshops/data-science-intensive
  59. https://www.springboard.com/workshops/analytics
  60. https://www.springboard.com/workshops/ux-design
  61. https://www.springboard.com/workshops/cybersecurity
  62. https://workshops.springboard.com/marketing-skills-track/
  63. https://www.springboard.com/workshops/data-science-career-track
  64. https://www.springboard.com/workshops/marketing-career-track
  65. https://www.springboard.com/workshops/cybersecurity-career-track/
  66. https://www.springboard.com/workshops/ux-career-track/
  67. https://www.springboard.com/workshops/ai-machine-learning-career-track/
  68. https://www.springboard.com/resources/learning-paths
  69. https://www.springboard.com/resources/ebooks
  70. https://www.springboard.com/resources/
  71. https://www.springboard.com/about#about-us-section
  72. https://www.springboard.com/about#team-section
  73. https://www.springboard.com/join-us
  74. https://mentor.springboard.com/
  75. https://hire.springboard.com/
  76. https://learn.springboard.com/corporate-training/
  77. https://studentfaq.springboard.com/
  78. https://www.springboard.com/contact
  79. https://springboard-career.studentbeans.com/us
  80. https://springboard-skill.studentbeans.com/us
  81. https://www.facebook.com/springboard/
  82. https://twitter.com/springboard/
  83. https://medium.springboard.com/
  84. https://www.springboard.com/legal/terms
  85. https://www.springboard.com/legal/privacy
  86. https://www.springboard.com/legal/conduct
  87. https://www.springboard.com/resources/learning-paths
  88. https://www.springboard.com/resources/ebooks
  89. https://www.springboard.com/resources/
  90. https://www.springboard.com/about#about-us-section
  91. https://www.springboard.com/about#team-section
  92. https://www.springboard.com/join-us
  93. https://mentor.springboard.com/
  94. https://hire.springboard.com/
  95. https://learn.springboard.com/corporate-training/
  96. https://mentor.springboard.com/
  97. https://hire.springboard.com/
  98. https://learn.springboard.com/corporate-training/
  99. https://studentfaq.springboard.com/
 100. https://www.springboard.com/contact
 101. https://springboard-career.studentbeans.com/us
 102. https://springboard-skill.studentbeans.com/us
 103. https://www.facebook.com/springboard/
 104. https://twitter.com/springboard/
 105. https://medium.springboard.com/
 106. https://www.springboard.com/legal/terms
 107. https://www.springboard.com/legal/privacy
 108. https://www.springboard.com/legal/conduct

   hidden links:
 110. https://www.springboard.com/blog/beginners-guide-neural-network-in-python-scikit-learn-0-18/
 111. https://www.springboard.com/blog/beginners-guide-neural-network-in-python-scikit-learn-0-18/
 112. https://www.springboard.com/blog/beginners-guide-neural-network-in-python-scikit-learn-0-18/
 113. https://www.springboard.com/workshops/ai-machine-learning-career-track/?source=blog&medium=post&campaign=aic
 114. https://www.springboard.com/blog/machine-learning-interview-questions/
 115. https://www.springboard.com/blog/ai-machine-learning-career-track/
 116. https://www.springboard.com/blog/linear-regression-in-python-a-tutorial/
 117. https://www.springboard.com/
 118. https://www.springboard.com/
