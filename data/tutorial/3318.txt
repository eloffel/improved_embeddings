   #[1]github [2]recent commits to image-analogies:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]138
     * [35]star [36]3,328
     * [37]fork [38]283

[39]awentzonline/[40]image-analogies

   [41]code [42]issues 20 [43]pull requests 2 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   generate image analogies using neural matching and blending.
     * [47]125 commits
     * [48]4 branches
     * [49]1 release
     * [50]fetching contributors
     * [51]mit

    1. [52]python 100.0%

   (button) python
   branch: master (button) new pull request
   [53]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/a
   [54]download zip

downloading...

   want to be notified of new releases in awentzonline/image-analogies?
   [55]sign in [56]sign up

launching github desktop...

   if nothing happens, [57]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [58]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [59]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [60]download the github extension for visual studio
   and try again.

   (button) go back
   [61]@awentzonline
   [62]awentzonline [63]bump to 0.1.2
   latest commit [64]0666261 dec 3, 2016
   [65]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [66]examples [67]simple style-a-gif example mar 22, 2016
   [68]image_analogy [69]scale a image to size of b images under
   tensorflow dec 4, 2016
   [70]scripts [71]add parameters for the number of patch matching steps
   to perform mar 15, 2016
   [72].gitignore [73]fix package name and gitignore mar 14, 2016
   [74]license.txt [75]added license mar 10, 2016
   [76]readme.md
   [77]requirements.txt
   [78]setup.py

readme.md

neural image analogies

   [79]image of arch [80]image of sugar steve [81]image of season transfer
   [82]image of trump

   this is basically an implementation of this [83]"image analogies"
   paper, in our case, we use feature maps from vgg16. the patch matching
   and blending is inspired by the method described in [84]"combining
   markov random fields and convolutional neural networks for image
   synthesis". effects similar to that paper can be achieved by turning
   off the analogy loss (or leave it on!) --analogy-w=0 and turning on the
   b/b' content weighting via the --b-content-w parameter. also, instead
   of using brute-force patch matching we use the [85]patchmatch algorithm
   to approximate the best patch matches. brute-force matching can be
   re-enabled by setting --model=brute

   the initial code was adapted from the keras "neural style transfer"
   example.

   the example arch images are from the [86]"image analogies" website.
   they have some other good examples from their own implementation which
   are worth a look. their paper discusses the various applications of
   image analogies so you might want to take a look for inspiration.

installation

   this requires either [87]tensorflow or [88]theano. if you don't have a
   gpu you'll want to use tensorflow. gpu users may find to theano to be
   faster at the expense of longer startup times. here's the [89]theano
   gpu guide.

   here's how to [90]configure the backend with keras and set your default
   device (e.g. cpu, gpu0).

   to install via [91]virtualenv run the following commands.
virtualenv venv
source venv/bin/activate
pip install neural-image-analogies

   if you have trouble with the above method, follow these directions to
   [92]install latest keras and theano or tensorflow

   the script make_image_analogy.py should now be on your path.

   before running this script, download the [93]weights for the vgg16
   model. this file contains only the convolutional layers of vgg16 which
   is 10% of the full size. [94]original source of full weights. the
   script assumes the weights are in the current working directory. if you
   place them somewhere else make sure to pass the
   --vgg-weights=<location-of-the-weights.h5> parameter or set the
   vgg_weight_path environment variable.

   example script usage: make_image_analogy.py image-a image-a-prime
   image-b prefix_for_output

   e.g.:

   make_image_analogy.py images/arch-mask.jpg images/arch.jpg
   images/arch-newmask.jpg out/arch

   the examples directory has a script, render_example.sh which accepts an
   example name prefix and, optionally the location of your vgg weights.

   ./render_example.sh arch /path/to/your/weights.h5

   currently, a and a' must be the same size, the same holds for b and b'.
   output size is the same as image b, unless specified otherwise.

it's too slow

   if you're not using a gpu, use tensorflow. my macbook pro with with can
   render a 512x512 image in approximately 12 minutes using tensorflow and
   --mrf-w=0. here are some other options which mostly trade quality for
   speed.
     * if you're using theano enable openmp threading by using env
       variables theano_flags='openmp=1' omp_num_threads=<cpu_num>. you
       can read more about multi-core support [95]here.
     * set --mrf-w=0 to skip optimization of local coherence
     * use fewer feature layers by setting --mrf-layers=conv4_1 and/or
       --analogy-layers=conv4_1 (or other layers) which will consider half
       as many feature layers.
     * generate a smaller image by either using a smaller source image b,
       or setting the --width or --height parameters.
     * ensure you're not using --model=brute which needs a powerful gpu

i want it to look better

   the default settings are somewhat lowered to give the average user a
   better chance at generating something on whatever computer they may
   have. if you have a powerful gpu then here are some options for nicer
   output:
     * --model=brute will turn on brute-force patch-matching and will be
       done on gpu. this is theano-only (default=patchmatch)
     * --patch-size=3 this will allow for much nicer-looking details
       (default=1)
     * --mrf-layers=conv1_1,conv2_1,... add more layers to the mix (also
       analogy-layers and content-layers)

parameters

     * --width sets image output max width
     * --height sets image output max height
     * --scales run at n different scales
     * --iters number of iterations per scale
     * --min-scale smallest scale to iterate
     * --mrf-w weight for mrf loss between a' and b'
     * --analogy-w weight for analogy loss
     * --b-content-w weight for content loss between b and b'
     * --tv-w weight for total variation loss
     * --vgg-weights path to vgg16 weights
     * --a-scale-mode method of scaling a and a' relative to b
     *
          + 'match': force a to be the same size as b regardless of aspect
            ratio (former default)
     *
          + 'ratio': apply scale imposed by width/height params on b to a
            (current default)
     *
          + 'none': leave a/a' alone
     * --a-scale additional scale factor for a and a'
     * --pool-mode pooling style used by vgg
     *
          + 'avg': average pooling - generally smoother results
     *
          + 'max': max pooling - more noisy but maybe that's what you want
            (original default)
     * --contrast adjust the contrast of the output by removing the bottom
       x percentile and scaling by the (100 - x)th percentile. defaults to
       0.02
     * --output-full output all intermediate images at full size
       regardless of actual scale
     * --analogy-layers comma-separated list of layer names to be used for
       the analogy loss (default: "conv3_1,conv_4_1")
     * --mrf-layers comma-separated list of layer names to be used for the
       mrf loss (default: "conv3_1,conv_4_1")
     * --content-layers comma-separated list of layer names to be used for
       the content loss (default: "conv3_1,conv_4_1")
     * --patch-size patch size used for matching (default: 1)
     * --use-full-analogy match on all of the analogy patches, instead of
       combining them into one image (slower/more memory but maybe more
       accurate)
     * --model select the patch matching model ('patchmatch' or 'brute')
       patchmatch is the default and requires less gpu memory but is less
       accurate then brute.
     * --nstyle-w weight for neural style loss between a' and b'
     * --nstyle-layers comma-separated list of layer names to be used for
       the neural style the analogy loss is the amount of influence of b
       -> a -> a' -> b'. it's a structure-preserving mapping of image b
       into a' via a.

   the mrf loss (or "local coherence") is the influence of b' -> a' -> b'.
   in the parlance of style transfer, this is the style loss which gives
   texture to the image.

   the b/b' content loss is set to 0.0 by default. you can get effects
   similar to id98mrf by turning this up and setting analogy weight to
   zero. or leave the analogy loss on for some extra style guidance.

   if you'd like to only visualize the analogy target to see what's
   happening, set the mrf and content loss to zero: --mrf-w=0
   --content-w=0 this is also much faster as mrf loss is the slowest part
   of the algorithm.

license

   the code for this implementation is provided under the mit license.

   the suggested vgg16 weights are originally from [96]here and are
   licensed [97]http://creativecommons.org/licenses/by-nc/4.0/ open a
   ticket if you have a suggestion for a more free-as-in-free-speech
   license.

   the attributions for the example art can be found in
   examples/images/attributions.md

     *    2019 github, inc.
     * [98]terms
     * [99]privacy
     * [100]security
     * [101]status
     * [102]help

     * [103]contact github
     * [104]pricing
     * [105]api
     * [106]training
     * [107]blog
     * [108]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [109]reload to refresh your
   session. you signed out in another tab or window. [110]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/awentzonline/image-analogies/commits/master.atom
   3. https://github.com/awentzonline/image-analogies#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/awentzonline/image-analogies
  32. https://github.com/join
  33. https://github.com/login?return_to=/awentzonline/image-analogies
  34. https://github.com/awentzonline/image-analogies/watchers
  35. https://github.com/login?return_to=/awentzonline/image-analogies
  36. https://github.com/awentzonline/image-analogies/stargazers
  37. https://github.com/login?return_to=/awentzonline/image-analogies
  38. https://github.com/awentzonline/image-analogies/network/members
  39. https://github.com/awentzonline
  40. https://github.com/awentzonline/image-analogies
  41. https://github.com/awentzonline/image-analogies
  42. https://github.com/awentzonline/image-analogies/issues
  43. https://github.com/awentzonline/image-analogies/pulls
  44. https://github.com/awentzonline/image-analogies/projects
  45. https://github.com/awentzonline/image-analogies/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/awentzonline/image-analogies/commits/master
  48. https://github.com/awentzonline/image-analogies/branches
  49. https://github.com/awentzonline/image-analogies/releases
  50. https://github.com/awentzonline/image-analogies/graphs/contributors
  51. https://github.com/awentzonline/image-analogies/blob/master/license.txt
  52. https://github.com/awentzonline/image-analogies/search?l=python
  53. https://github.com/awentzonline/image-analogies/find/master
  54. https://github.com/awentzonline/image-analogies/archive/master.zip
  55. https://github.com/login?return_to=https://github.com/awentzonline/image-analogies
  56. https://github.com/join?return_to=/awentzonline/image-analogies
  57. https://desktop.github.com/
  58. https://desktop.github.com/
  59. https://developer.apple.com/xcode/
  60. https://visualstudio.github.com/
  61. https://github.com/awentzonline
  62. https://github.com/awentzonline/image-analogies/commits?author=awentzonline
  63. https://github.com/awentzonline/image-analogies/commit/066626149ccb96b0a0488ca7ea4fc992aa62b727
  64. https://github.com/awentzonline/image-analogies/commit/066626149ccb96b0a0488ca7ea4fc992aa62b727
  65. https://github.com/awentzonline/image-analogies/tree/066626149ccb96b0a0488ca7ea4fc992aa62b727
  66. https://github.com/awentzonline/image-analogies/tree/master/examples
  67. https://github.com/awentzonline/image-analogies/commit/8ba417f59ffadf1e1193073977f9e4f476744a7c
  68. https://github.com/awentzonline/image-analogies/tree/master/image_analogy
  69. https://github.com/awentzonline/image-analogies/commit/bc4e88f1ea62d93b797bf8187f17726bdee78468
  70. https://github.com/awentzonline/image-analogies/tree/master/scripts
  71. https://github.com/awentzonline/image-analogies/commit/8215be10de41135cee698335ddf68bdbef4cafcd
  72. https://github.com/awentzonline/image-analogies/blob/master/.gitignore
  73. https://github.com/awentzonline/image-analogies/commit/4b6a620b949749e660004036fd5e8ce3b307953b
  74. https://github.com/awentzonline/image-analogies/blob/master/license.txt
  75. https://github.com/awentzonline/image-analogies/commit/5e07ec553fc946ed27eb909e1f6273b6170cb7c2
  76. https://github.com/awentzonline/image-analogies/blob/master/readme.md
  77. https://github.com/awentzonline/image-analogies/blob/master/requirements.txt
  78. https://github.com/awentzonline/image-analogies/blob/master/setup.py
  79. https://raw.githubusercontent.com/awentzonline/image-analogies/master/examples/images/image-analogy-explanation.jpg
  80. https://raw.githubusercontent.com/awentzonline/image-analogies/master/examples/images/sugarskull-analogy.jpg
  81. https://raw.githubusercontent.com/awentzonline/image-analogies/master/examples/images/season-xfer.jpg
  82. https://raw.githubusercontent.com/awentzonline/image-analogies/master/examples/images/trump-image-analogy.jpg
  83. http://www.mrl.nyu.edu/projects/image-analogies/index.html
  84. http://arxiv.org/abs/1601.04589
  85. http://gfx.cs.princeton.edu/gfx/pubs/barnes_2009_par/index.php
  86. http://www.mrl.nyu.edu/projects/image-analogies/tbn.html
  87. https://www.tensorflow.org/versions/r0.7/get_started/os_setup.html
  88. http://deeplearning.net/software/theano/install.html
  89. http://deeplearning.net/software/theano/tutorial/using_gpu.html
  90. http://keras.io/backend/
  91. https://virtualenv.readthedocs.org/en/latest/installation.html
  92. http://keras.io/#installation
  93. https://github.com/awentzonline/image-analogies/releases/download/v0.0.5/vgg16_weights.h5
  94. https://gist.github.com/baraldilorenzo/07d7802847aaad0a35d3
  95. http://deeplearning.net/software/theano/tutorial/multi_cores.html
  96. https://gist.github.com/ksimonyan/211839e770f7b538e2d8
  97. http://creativecommons.org/licenses/by-nc/4.0/
  98. https://github.com/site/terms
  99. https://github.com/site/privacy
 100. https://github.com/security
 101. https://githubstatus.com/
 102. https://help.github.com/
 103. https://github.com/contact
 104. https://github.com/pricing
 105. https://developer.github.com/
 106. https://training.github.com/
 107. https://github.blog/
 108. https://github.com/about
 109. https://github.com/awentzonline/image-analogies
 110. https://github.com/awentzonline/image-analogies

   hidden links:
 112. https://github.com/
 113. https://github.com/awentzonline/image-analogies
 114. https://github.com/awentzonline/image-analogies
 115. https://github.com/awentzonline/image-analogies
 116. https://help.github.com/articles/which-remote-url-should-i-use
 117. https://github.com/awentzonline/image-analogies#neural-image-analogies
 118. https://github.com/awentzonline/image-analogies#installation
 119. https://github.com/awentzonline/image-analogies#its-too-slow
 120. https://github.com/awentzonline/image-analogies#i-want-it-to-look-better
 121. https://github.com/awentzonline/image-analogies#parameters
 122. https://github.com/awentzonline/image-analogies#license
 123. https://github.com/
