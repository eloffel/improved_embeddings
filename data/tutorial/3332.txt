   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]chatbots magazine
     * [9]   subscribe to our newsletter
     * [10]       submit an article
     * [11]     tutorials
     * [12]octane ai for shopify
     __________________________________________________________________

contextual chatbots with tensorflow

in conversations, context is king! we   ll build a chatbot framework using
tensorflow and add some context handling to show how this can be approached.

   [13]go to the profile of gk_
   [14]gk_ (button) blockedunblock (button) followfollowing
   may 6, 2017
   [1*uupriva-tutyz0mxvkgovg.jpeg]
      whole world in your hand            betty newman-maguire
   ([15]http://www.bettynewmanmaguire.ie/)

   ever wonder why most chatbots lack conversational [16]context?

   how is this possible given the importance of context in nearly all
   conversations?

   we   re going to create a [17]chatbot framework and build a
   conversational model for an island moped rental shop. the chatbot for
   this small business needs to handle simple questions about hours of
   operation, reservation options and so on. we also want it to handle
   contextual responses such as inquiries about same-day rentals. getting
   this right [18]could save a vacation!

   we   ll be working through 3 steps:
     * we   ll transform conversational intent definitions to a tensorflow
       model
     * next, we will build a chatbot framework to process responses
     * lastly, we   ll show how basic context can be incorporated into our
       response processor

   we   ll be using [19]tflearn, a layer above [20]tensorflow, and of course
   [21]python. as always we   ll use [22]ipython notebook as a tool to
   facilitate our work.
     __________________________________________________________________

transform conversational intent definitions to a tensorflow model

   the complete notebook for our first step is [23]here.

   a chatbot framework needs a structure in which conversational intents
   are defined. one clean way to do this is with a json file, like
   [24]this.
   [1*pcbw_y4act750-ll98iw2q.png]
   chatbot intents

   each conversational intent contains:
     * a tag (a unique name)
     * patterns (sentence patterns for our neural network text classifier)
     * responses (one will be used as a response)

   and later on we   ll add some basic contextual elements.

   first we take care of our imports:

   iframe: [25]/media/0563c6b8104913b534fd16fdc486da16?postid=4391749d0077

   have a look at    [26]deep learning in 7 lines of code    for a primer or
   [27]here if you need to demystify tensorflow.

   iframe: [28]/media/68236ef42c894b4c0900c1ec7ad71338?postid=4391749d0077

   with our intents json [29]file loaded, we can now begin to organize our
   documents, words and classification classes.

   iframe: [30]/media/2a48331e07a255064d047132b51cff45?postid=4391749d0077

   we create a list of documents (sentences), each sentence is a list of
   stemmed words and each document is associated with an intent (a class).
27 documents
9 classes ['goodbye', 'greeting', 'hours', 'mopeds', 'opentoday', 'payments', 'r
ental', 'thanks', 'today']
44 unique stemmed words ["'d", 'a', 'ar', 'bye', 'can', 'card', 'cash', 'credit'
, 'day', 'do', 'doe', 'good', 'goodby', 'hav', 'hello', 'help', 'hi', 'hour', 'h
ow', 'i', 'is', 'kind', 'lat', 'lik', 'mastercard', 'mop', 'of', 'on', 'op', 're
nt', 'see', 'tak', 'thank', 'that', 'ther', 'thi', 'to', 'today', 'we', 'what',
'when', 'which', 'work', 'you']

   the stem    tak    will match    take   ,    taking   ,    takers   , etc. we could
   clean the words list and remove useless entries but this will suffice
   for now.

   unfortunately this data structure won   t work with tensorflow, we need
   to transform it further: from documents of words into tensors of
   numbers.

   iframe: [31]/media/0553e0c616014bf392bd036c6732ebd3?postid=4391749d0077

   notice that our data is shuffled. tensorflow will take some of this and
   use it as test data to gauge accuracy for a newly fitted model.

   if we look at a single x and y list element, we see    [32]bag of words   
   arrays, one for the intent pattern, the other for the intent class.
train_x example: [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1
]
train_y example: [0, 0, 1, 0, 0, 0, 0, 0, 0]

   we   re ready to build our model.

   iframe: [33]/media/c90883b0516ddbe5c59960c12a04bc64?postid=4391749d0077

   iframe: [34]/media/4f03dbc6fad890015ca99acb24bc41d7?postid=4391749d0077

   this is the same tensor structure as we used in our 2-layer neural
   network in [35]our    toy    example. watching the model fit our training
   data never gets old   
   [1*5uiqnedbzsytxj81weu-vg.gif]
   interactive build of a model in tflearn

   to complete this section of work, we   ll save (   pickle   ) our model and
   documents so the next notebook can use them.

   iframe: [36]/media/d6eaa02acf16507f6bf47815ecb23a4e?postid=4391749d0077
     __________________________________________________________________

   [1*f9sq7i_paupq9u4pbtpt4w.jpeg]

building our chatbot framework

   the complete notebook for our second step is [37]here.

   we   ll build a simple state-machine to handle responses, using our
   intents model (from the previous step) as our classifier. that   s
   [38]how chatbots work.

     a contextual chatbot framework is a classifier within a
     state-machine.

   after loading the same imports, we   ll un-pickle our model and documents
   as well as reload our intents file. remember our chatbot framework is
   separate from our model build         you don   t need to rebuild your model
   unless the intent patterns change. with several hundred intents and
   thousands of patterns the model could take several minutes to build.

   iframe: [39]/media/03e94d2e84af363ed737e68833d53a85?postid=4391749d0077

   next we will load our saved tensorflow (tflearn framework) model.
   notice you first need to define the tensorflow model structure just as
   we did in the previous section.

   iframe: [40]/media/dde626a167114d1937fcd595aac14b55?postid=4391749d0077

   before we can begin processing intents, we need a way to produce a
   bag-of-words from user input. this is the same technique as we used
   earlier to create our training documents.

   iframe: [41]/media/454f2f3dbbc3f19d575f92db4cce8ee7?postid=4391749d0077

p = bow("is your shop open today?", words)
print (p)
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0
 1 0 0 0 0 0 1 0]

   we are now ready to build our response processor.

   iframe: [42]/media/ebf5ac58f4e2f14b9d7ee2efd65268a6?postid=4391749d0077

   each sentence passed to response() is classified. our classifier uses
   model.predict() and is lighting fast. the probabilities returned by the
   model are lined-up with our intents definitions to produce a list of
   potential responses.

   if one or more classifications are above a threshold, we see if a tag
   matches an intent and then process that. we   ll treat our classification
   list as a stack and pop off the stack looking for a suitable match
   until we find one, or it   s empty.

   let   s look at a classification example, the most likely tag and its
   id203 are returned.
classify('is your shop open today?')
[('opentoday', 0.9264171123504639)]

   notice that    is your shop open today?    is not one of the patterns for
   this intent:    patterns   : [   are you open today?   ,    when do you open
   today?   ,    what are your hours today?   ] however the terms    open    and
      today    proved irresistible to our model (they are prominent in the
   chosen intent).

   we can now generate a chatbot response from user-input:
response('is your shop open today?')
our hours are 9am-9pm every day

   and other context-free responses   
response('do you take cash?')
we accept visa, mastercard and amex
response('what kind of mopeds do you rent?')
we rent yamaha, piaggio and vespa mopeds
response('goodbye, see you later')
bye! come back again soon.
     __________________________________________________________________

   [1*rrqh1mt6r73nq6lo6vtz2w.jpeg]

   let   s work in some basic context into our moped rental chatbot
   conversation.

contextualization

   we want to handle a question about renting a moped and ask if the
   rental is for today. that clarification question is a simple contextual
   response. if the user responds    today    and the context is the rental
   timeframe then it   s best they call the rental company   s 1   800 #. no
   time to waste.

   to achieve this we will add the notion of    state    to our framework.
   this is comprised of a data-structure to maintain state and specific
   code to manipulate it while processing intents.

   because the state of our state-machine needs to be easily persisted,
   restored, copied, etc. it   s important to keep it all in a data
   structure such as a dictionary.

   here   s our response process with basic contextualization:

   iframe: [43]/media/9f7b600047007401fa822a1f47b77365?postid=4391749d0077

   our context state is a dictionary, it will contain state for each user.
   we   ll use some unique identified for each user (eg. cell #). this
   allows our framework and state-machine to maintain state for multiple
   users simultaneously.

     # create a data structure to hold user context
     context = {}

   the context handlers are added within the intent processing flow, shown
   again below:

   iframe: [44]/media/f2574c013c161259e4c5c81c0d0f1369?postid=4391749d0077

   if an intent wants to set context, it can do so:

     {   tag   :    rental   ,
         patterns   : [   can we rent a moped?   ,    i   d like to rent a moped   ,    
     ],
         responses   : [   are you looking to rent today or later this week?   ],
         context_set   :    rentalday   
      }

   if another intent wants to be contextually linked to a context, it can
   do that:

     {   tag   :    today   ,
         patterns   : [   today   ],
         responses   : [   for rentals today please call 1   800-mymoped   ,    ],
        context_filter   :    rentalday   
      }

   in this way, if a user just typed    today    out of the blue (no context),
   our    today    intent won   t be processed. if they enter    today    as a
   response to our clarification question (intent tag:   rental   ) then the
   intent is processed.
response('we want to rent a moped')
are you looking to rent today or later this week?
response('today')
same-day rentals please call 1-800-mymoped

   our context state changed:
context
{'123': 'rentalday'}

   we defined our    greeting    intent to clear context, as is often the case
   with small-talk. we add a    show_details    parameter to help us see
   inside.
response("hi there!", show_details=true)
context: ''
tag: greeting
good to see you again

   let   s try the    today    input once again, a few notable things here   
response('today')
we're open every day from 9am-9pm
classify('today')
[('today', 0.5322513580322266), ('opentoday', 0.2611265480518341)]

   first, our response to the context-free    today    was different. our
   classification produced 2 suitable intents, and the    opentoday    was
   selected because the    today    intent, while higher id203, was
   bound to a context that no longer applied. context matters!
response("thanks, your great")
happy to help!
     __________________________________________________________________

   [1*ysxoywba2fii9g98uxp1pw.jpeg]

   a few things to consider now that contextualization is happening   

with state comes statefulness

   that   s right, your chatbot will no longer be happy as a stateless
   service.

   unless you want to reconstitute state, reload your model and
   documents         with every call to your chatbot framework, you   ll need to
   make it stateful.

   this isn   t that difficult. you can run a stateful chatbot framework in
   its own process and call it using an rpc (remote procedure call) or rmi
   (remote method invocation), i recommend [45]pyro.
   [1*hpbusvovqsyvy-nhbcoiaq.jpeg]
   rmi client and server setup

   the user-interface (client) is typically stateless, eg. http or sms.

   your chatbot client will make a pyro function call, which your stateful
   service will handle. voila!

   [46]here   s a step-by-step guide to build a twilio sms chatbot client,
   and [47]here   s one for fb messenger.

thou shalt not store state in local variables

   all state information must be placed in a data structure such as a
   dictionary, easily persisted, reloaded, or copied atomically.

   each user   s conversation will carry context which will be carried
   statefully for that user. the user id can be their cell #, a facebook
   user id, or some other unique identifier.

   there are scenarios where a user   s conversational state needs to be
   copied (by value) and then restored as a result of intent processing.
   if your state machine carries state across variables within your
   framework you will have a difficult time making this work in real life
   scenarios.

     python dictionaries are your friend.
     __________________________________________________________________

   so now you have a chatbot framework, a recipe for making it a stateful
   service, and a starting-point for adding context. most chatbot
   frameworks [48]in the future will treat context seaid113ssly.

   think of creative ways for intents to impact and react to different
   context settings. your users    context dictionary can contain a
   wide-variety of conversation context.

   enjoy!
   [1*7nbwvuncp1sd5zhvqelg_q.jpeg]
   credit: [49]https://wickedgoodweb.com

   iframe: [50]/media/c90883b0516ddbe5c59960c12a04bc64?postid=4391749d0077

   [1*mtobivqsczojw0msn2h5sw.gif]
           clap below to recommend this article to others        
   [51][1*rrjuc6jw61ap1uwsa-yitq.png]
   [52][1*ogaa3icxv3ds-rk2sq4oxa.png]
   [53][1*1xecgp_cgz1wglaldrhlwq.png]

     * [54]chatbots
     * [55]tensorflow
     * [56]artificial intelligence
     * [57]python
     * [58]tech

   (button)
   (button)
   (button) 5k claps
   (button) (button) (button) 71 (button) (button)

     (button) blockedunblock (button) followfollowing
   [59]go to the profile of gk_

[60]gk_

   philosopher, entrepreneur, investor

     (button) follow
   [61]chatbots magazine

[62]chatbots magazine

   chatbots, ai, nlp, facebook messenger, slack, telegram, and more.

     * (button)
       (button) 5k
     * (button)
     *
     *

   [63]chatbots magazine
   never miss a story from chatbots magazine, when you sign up for medium.
   [64]learn more
   never miss a story from chatbots magazine
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://chatbotsmagazine.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/4391749d0077
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://chatbotsmagazine.com/contextual-chat-bots-with-tensorflow-4391749d0077&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://chatbotsmagazine.com/contextual-chat-bots-with-tensorflow-4391749d0077&source=--------------------------nav_reg&operation=register
   8. https://chatbotsmagazine.com/?source=logo-lo_hmv4hj75zdqr---d6dc2c824f17
   9. https://chatbotsmagazine.com/chatbots-magazine-is-created-with-by-700-bot-innovators-from-around-the-world-16cf4a1e388a
  10. https://chatbotsmagazine.com/be-featured-in-front-of-thousands-of-people-interested-in-bots-e7040c4080df
  11. https://chatbotsmagazine.com/tutorials/home
  12. https://apps.shopify.com/octane-ai-messenger-marketing
  13. https://chatbotsmagazine.com/@gk_?source=post_header_lockup
  14. https://chatbotsmagazine.com/@gk_
  15. http://www.bettynewmanmaguire.ie/
  16. https://chatbotsmagazine.com/maintaining-context-in-chatbots-2016b6a5b7c6
  17. https://chatbotsmagazine.com/design-framework-for-chatbots-aa27060c4ea3
  18. https://medium.com/p/how-a-messaging-app-saved-my-vacation-192b031a96f5
  19. http://tflearn.org/
  20. https://www.tensorflow.org/
  21. https://www.python.org/
  22. https://ipython.org/notebook.html
  23. https://github.com/ugik/notebooks/blob/master/tensorflow chat-bot model.ipynb
  24. https://github.com/ugik/notebooks/blob/master/intents.json
  25. https://chatbotsmagazine.com/media/0563c6b8104913b534fd16fdc486da16?postid=4391749d0077
  26. https://chatbotslife.com/deep-learning-in-7-lines-of-code-7879a8ef8cfb
  27. https://chatbotslife.com/tensorflow-demystified-80987184faf7
  28. https://chatbotsmagazine.com/media/68236ef42c894b4c0900c1ec7ad71338?postid=4391749d0077
  29. https://github.com/ugik/notebooks/blob/master/intents.json
  30. https://chatbotsmagazine.com/media/2a48331e07a255064d047132b51cff45?postid=4391749d0077
  31. https://chatbotsmagazine.com/media/0553e0c616014bf392bd036c6732ebd3?postid=4391749d0077
  32. https://en.wikipedia.org/wiki/bag-of-words_model
  33. https://chatbotsmagazine.com/media/c90883b0516ddbe5c59960c12a04bc64?postid=4391749d0077
  34. https://chatbotsmagazine.com/media/4f03dbc6fad890015ca99acb24bc41d7?postid=4391749d0077
  35. https://chatbotslife.com/deep-learning-in-7-lines-of-code-7879a8ef8cfb
  36. https://chatbotsmagazine.com/media/d6eaa02acf16507f6bf47815ecb23a4e?postid=4391749d0077
  37. https://github.com/ugik/notebooks/blob/master/tensorflow chat-bot response.ipynb
  38. https://medium.freecodecamp.com/how-chat-bots-work-dfff656a35e2
  39. https://chatbotsmagazine.com/media/03e94d2e84af363ed737e68833d53a85?postid=4391749d0077
  40. https://chatbotsmagazine.com/media/dde626a167114d1937fcd595aac14b55?postid=4391749d0077
  41. https://chatbotsmagazine.com/media/454f2f3dbbc3f19d575f92db4cce8ee7?postid=4391749d0077
  42. https://chatbotsmagazine.com/media/ebf5ac58f4e2f14b9d7ee2efd65268a6?postid=4391749d0077
  43. https://chatbotsmagazine.com/media/9f7b600047007401fa822a1f47b77365?postid=4391749d0077
  44. https://chatbotsmagazine.com/media/f2574c013c161259e4c5c81c0d0f1369?postid=4391749d0077
  45. http://pythonhosted.org/pyro4/
  46. https://chatbotslife.com/build-a-working-sms-chat-bot-in-10-minutes-b8278d80cc7a
  47. https://chatbotnewsdaily.com/build-a-facebook-messenger-chat-bot-in-10-minutes-5f28fe0312cd
  48. https://medium.com/@gk_/the-future-of-messaging-apps-590720cfa792
  49. https://wickedgoodweb.com/seo-context-is-king/
  50. https://chatbotsmagazine.com/media/c90883b0516ddbe5c59960c12a04bc64?postid=4391749d0077
  51. https://docs.google.com/forms/d/e/1faipqlsfjdqer7zbrbfqvx6mouqahjk4lrcy3z9z6ppxln7f1xi12dg/viewform?c=0&w=1
  52. https://chatbotsmagazine.com/be-featured-in-front-of-thousands-of-people-interested-in-bots-e7040c4080df#.hswzhzpp9
  53. https://chatbotsmagazine.com/want-to-receive-the-best-chatbot-related-content-in-your-medium-feed-20a9c11f11b6#.1t1yhwcyz
  54. https://chatbotsmagazine.com/tagged/chatbots?source=post
  55. https://chatbotsmagazine.com/tagged/tensorflow?source=post
  56. https://chatbotsmagazine.com/tagged/artificial-intelligence?source=post
  57. https://chatbotsmagazine.com/tagged/python?source=post
  58. https://chatbotsmagazine.com/tagged/tech?source=post
  59. https://chatbotsmagazine.com/@gk_?source=footer_card
  60. https://chatbotsmagazine.com/@gk_
  61. https://chatbotsmagazine.com/?source=footer_card
  62. https://chatbotsmagazine.com/?source=footer_card
  63. https://chatbotsmagazine.com/
  64. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  66. https://medium.com/p/4391749d0077/share/twitter
  67. https://medium.com/p/4391749d0077/share/facebook
  68. https://medium.com/p/4391749d0077/share/twitter
  69. https://medium.com/p/4391749d0077/share/facebook
