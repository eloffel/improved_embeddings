   #[1]indico    feed [2]indico    comments feed [3]indico    python deep
   learning frameworks reviewed comments feed [4]alternate [5]alternate

   [6]indico (button)
     * use cases
          + [7]sales & support
          + [8]finance & operations
          + [9]legal & compliance
     * [10]approach
     * roles
          + [11]cio/cto/it
          + [12]sme/business analyst
          + [13]data scientists
          + [14]application developers
     * [15]product
     * [16]login

     * use cases
          + [17]sales & support
          + [18]finance & operations
          + [19]legal & compliance
     * [20]approach
     * roles
          + [21]cio/cto/it
          + [22]sme/business analyst
          + [23]data scientists
          + [24]application developers
     * [25]product
     * [26]login

     * [27]about
          + [28]our story
          + [29]leadership
          + [30]contact us
          + [31]news & events
          + [32]careers
     * [33]support
     * [34]resources
          + [35]blog
          + [36]documentation
     * [37]pricing & packaging

     * [38]home
     *
     * [39]blog
     *
     * python deep learning frameworks reviewed

python deep learning frameworks reviewed

   january 31, 2017 / data science, developers, machine learning,
   tutorials

   i recently stumbled across an old data science stack exchange answer of
   mine on the topic of the [40]   best python library for neural networks   ,
   and it struck me how much the python deep learning ecosystem has
   evolved over the course of the past 2.5 years. the library i
   recommended in july 2014, pylearn2, is no longer actively developed or
   maintained, but a whole host of deep learning libraries have sprung up
   to take its place. each has its own strengths and weaknesses. we   ve
   used most of the technologies on this list in production or development
   at indico, but for the few that we haven   t, i   ll pull from the
   experiences of others to help give a clear, comprehensive picture of
   the python deep learning ecosystem of 2017.

   in particular, we   ll be looking at:
     * theano
     * lasagne
     * blocks
     * tensorflow
     * keras
     * mxnet
     * pytorch
     __________________________________________________________________

[41]theano

description:

   theano is a python library that allows you to define, optimize, and
   evaluate mathematical expressions involving multi-dimensional arrays
   efficiently. it works with gpus and performs efficient symbolic
   differentiation.

documentation:

   [42]http://deeplearning.net/software/theano/

summary:

   theano is the numerical computing workhorse that powers many of the
   other deep learning frameworks on our list. it was built by fr  d  ric
   bastien and the excellent research team behind the university of
   montreal   s lab, mila. its api is quite low level, and in order to write
   effective theano you need to be quite familiar with the algorithms that
   are hidden away behind the scenes in other frameworks. theano is a
   go-to library if you have substantial academic machine learning
   expertise, are looking for very fine grained control of your models, or
   want to implement a novel or unusual model. in general, theano trades
   ease of use for flexibility.

pros:

     * flexible
     * performant if used properly

cons:

     * [43]theano is no longer being maintained     
     * substantial learning curve
     * lower level api
     * compiling complex symbolic graphs can be slow

resources:

     * [44]installation guide
     * [45]official theano tutorial
     * [46]theano slideshow and practice exercises
     * [47]from id75 to id98s with theano
     * [48]introduction to deep learning with python & theano (mnist video
       tutorial)
     __________________________________________________________________

[49]lasagne

description:

   lightweight library for building and training neural networks in
   theano.

documentation:

   [50]http://lasagne.readthedocs.org/

summary:

   since theano aims first and foremost to be a library for symbolic
   mathematics, lasagne offers abstractions on top of theano that make it
   more suitable for deep learning. it   s written and maintained primarily
   by sander dieleman, a current deepmind research scientist. instead of
   specifying network models in terms of function relationships between
   symbolic variables, lasagne allows users to think at the layer level,
   offering building blocks like    conv2dlayer    and    dropoutlayer    for
   users to work with. lasagne requires little sacrifice in terms of
   flexibility while providing a wealth of common components to help with
   layer definition, layer initialization, model id173, model
   monitoring, and model training.

pros:

     * still very flexible
     * higher layer of abstraction than theano
     * docs and code contain an assortment of pasta puns

cons:

     * smaller community

resources:

     * [51]official github page
     * [52]official installation guide
     * [53]official lasagne tutorial
     * [54]example lasagne code
     __________________________________________________________________

[55]blocks

description:

   a theano framework for building and training neural networks.

documentation:

   [56]http://blocks.readthedocs.io/en/latest/

summary:

   similar to lasagne, blocks is a shot at adding a layer of abstraction
   on top of theano to facilitate cleaner, simpler, more standardized
   definitions of deep learning models than writing raw theano. it   s
   written by the university of montreal   s lab, mila     some of the same
   folks who contributed to the building of theano and its first high
   level interface to neural network definitions, the deceased pylearn2.
   it   s a bit more flexible than lasagne at the cost of having a slightly
   more difficult learning curve to use effectively. among other things,
   blocks has excellent support for recurrent neural network
   architectures, so it   s worth a look if you   re interested in exploring
   that genre of model. alongside tensorflow, blocks is the library of
   choice for many of the apis we   ve deployed to production at indico.

pros:

     * still very flexible
     * higher layer of abstraction than theano
     * very well tested

cons:

     * substantial learning curve
     * smaller community

resources:

     * [57]official installation guide
     * [58]arxiv paper on the design of the blocks library
     * [59]a reddit discussion on the differences between blocks and
       lasagne
     * [60]block   s sister library for data pipelines, fuel
     __________________________________________________________________

[61]tensorflow

description:

   an open source software library for numerical computation using data
   flow graphs.

documentation:

   [62]https://www.tensorflow.org/api_docs/python/

summary:

   tensorflow is a blend between lower level, symbolic computation
   libraries like theano, and higher level, network specification
   libraries like blocks and lasagne. although it   s the newest member of
   the python deep learning library collection, it likely has garnered the
   largest active community because it   s backed by the google brain team.
   it offers support for running machine learning models across multiple
   gpus, provides utilities for efficient data pipelining, and has
   built-in modules for the inspection, visualization, and serialization
   of models. more recently, the tensorflow team decided to incorporate
   support for keras, the next deep learning library on our list. the
   community seems to agree that although [63]tensorflow has its
   shortcomings, the sheer size of its community and the massive amount of
   momentum behind the project mean that learning tensorflow is a safe
   bet. consequently, tensorflow is our deep learning library of choice
   today at indico.

pros:

     * backed by software giant google
     * very large community
     * low level and high level interfaces to network training
     * faster model compilation than theano-based options
     * clean multi-gpu support

cons:

     * initially slower at many benchmarks than theano-based options,
       although tensorflow is catching up.
     * id56 support is still outclassed by theano

resources:

     * [64]official tensorflow website
     * [65]download and setup guide
     * [66]indico   s take on tensorflow
     * [67]a collection of tensorflow tutorials
     * [68]a udacity machine learning course taught using tensorflow
     * [69]tensorflow mnist tutorial
     * [70]tensorflow data input
     __________________________________________________________________

[71]keras

description:

   deep learning library for python. convnets, recurrent neural networks,
   and more. runs on theano or tensorflow.

documentation:

   [72]https://keras.io/

summary:

   keras is probably the highest level, most user friendly library of the
   bunch. it   s written and maintained by francis chollet, another member
   of the google brain team. it allows users to choose whether the models
   they build are executed on theano   s or tensorflow   s symbolic graph.
   keras    user interface is torch-inspired, so if you have prior
   experience with machine learning in lua, keras is definitely worth a
   look. thanks in part to excellent documentation and its relative ease
   of use, the keras community is quite large and very active. recently,
   the tensorflow team announced plans to ship with keras support built
   in, so soon keras will be a subset of the tensorflow project.

pros:

     * your choice of a theano or tensorflow backend
     * intuitive, high level interface
     * easier learning curve

cons:

     * less flexible, more prescriptive than other options

resources:

     * [73]official installation guide
     * [74]keras users google group
     * [75]repository of keras examples
     * [76]instructions for using keras with docker
     * [77]repository of keras tutorials by application area
     __________________________________________________________________

[78]mxnet

description:

   mxnet is a deep learning framework designed for both efficiency and
   flexibility.

documentation:

   [79]http://mxnet.io/api/python/index.html#python-api-reference

summary:

   mxnet is amazon   s library of choice for deep learning, and is perhaps
   the most performant library of the bunch. it has a data flow graph
   similar to theano and tensorflow, offers good support for multi-gpu
   configurations, has higher level model building blocks similar to that
   of lasagne and blocks, and can run on just about any hardware you can
   imagine (including mobile phones). python support is just the tip of
   the iceberg     mxnet also offers interfaces to r, julia, c++, scala,
   matlab, and javascript. choose mxnet if you   re looking for performance
   that   s second to none, but you must be willing to deal with a few of
   mxnet   s quirks to get you there.

pros:

     * blazing fast benchmarks
     * extremely flexible

cons:

     * smallest community
     * steeper learning curve than theano

resources:

     * [80]official getting started guide
     * [81]indico   s intro to mxnet
     * [82]repository of mxnet examples
     * [83]amazon   s cto   s take on mxnet
     * [84]mxnet arxiv paper
     __________________________________________________________________

[85]pytorch

description:

   tensors and dynamic neural networks in python with strong gpu
   acceleration.

documentation:

   [86]http://pytorch.org/docs/

summary:

   released just over a week ago, pytorch is the new kid on the block in
   our list of deep learning frameworks for python. it   s a loose port of
   lua   s torch library to python, and is notable because it   s backed by
   the facebook artificial intelligence research team (fair), and because
   it   s [87]designed to handle dynamic computation graphs     a feature
   absent from the likes of theano, tensorflow, and derivatives. the jury
   is still out on what role pytorch will play in the python deep learning
   ecosystem, but all signs point to pytorch being a very respectable
   alternative to the other frameworks on our list.

pros:

     * organizational backing from facebook
     * clean support for dynamic graphs
     * blend of high level and low level apis

cons:

     * much less mature than alternatives (in their own words        we are in
       an early-release beta. expect some adventures.   )
     * limited references / resources outside of the official
       documentation

resources:

     * [88]official pytorch homepage
     * [89]pytorch twitter feed
     * [90]repository of pytorch examples
     * [91]repository of pytorch tutorials
     __________________________________________________________________

   got a question? reach out to us via the chat bubble or through
   [92]contact@indico.io!

author

madison may

other categories

     * [93]announcements
     * [94]ask slater
     * [95]business
     * [96]data science
     * [97]developers
     * [98]featured writers
     * [99]hackathon spotlight
     * [100]image data use case
     * [101]indico
     * [102]machine learning
     * [103]opinion piece
     * [104]text data use case
     * [105]tutorials
     * [106]uncategorized

related posts

   [107]how intelligent process automation drives growth & roi in the
   financial services industry

   business, data science, text data use case

   indico | april 4, 2019

[108]how intelligent process automation drives growth & roi in the financial
services industry

     financial services organizations have immense pressure to operate in
   highly regulated environments in terms of data security and auditory
   [   ]

   [109]view now
   [110]product feature spotlight: teach

   business, data science, tutorials

   indico | march 11, 2019

[111]product feature spotlight: teach

   when it comes to machine learning, clients are rarely satisfied with
   one-size-fits-all, pre-trained machine learning models. it makes
   perfect sense. [   ]

   [112]view now
   [113]should we remove duplicates from a data-set while training a
   machine learning algorithm (shallow and/or deep methods)?

   ask slater, machine learning

   slater victoroff | february 6, 2019

[114]should we remove duplicates from a data-set while training a machine
learning algorithm (shallow and/or deep methods)?

     it   depends. mostly it depends on what your goals are and what your
   dataset looks like. there are two big [   ]

   [115]view now

don't miss a post!

subscribe to indico's monthly newsletter to receive the latest blog posts and
ai industry news.

   [116]subscribe

   [117]indico

   enterprise ai solutions for automating business workflows that depend
   on unstructured content.
   [118]we're hiring
     * [119]about us
     * [120]our story
     * [121]leadership
     * [122]contact us

     * [123]approach

     * [124]news & events

     * [125]support

     * [126]use cases
     * [127]sales & support
     * [128]finance & operations
     * [129]legal & compliance

     * [130]roles
     * [131]cio/cto/it
     * [132]sme/business analyst
     * [133]data scientist
     * [134]application developer

     * [135]resources
     * [136]blog
     * [137]documentation

     * [138]product
     * [139]pricing & packaging

     * [140]careers

     * [141]about us
     * [142]our story
     * [143]leadership
     * [144]contact us

     * [145]approach

     * [146]news & events

     * [147]support

     * [148]use cases
     * [149]sales & support
     * [150]finance & operations
     * [151]legal & compliance

     * [152]roles
     * [153]cio/cto/it
     * [154]sme/business analyst
     * [155]data scientist
     * [156]application developer

     * [157]resources
     * [158]blog
     * [159]documentation

     * [160]product
     * [161]pricing & packaging

     * [162]careers

   copyright    2019 indico data solutions, inc.

   [163]terms & conditions
     * [164]twitter
     * [165]linkedin
     * [166]facebook
     * [167]youtube

     * [168]twitter
     * [169]linkedin
     * [170]facebook
     * [171]youtube

   copyright    2019 indico

   [172]terms & conditions

   [173]to the top!

subscribe to indico blog

   (button)   
   ____________________ submit

   this website collects personal data and uses cookies to improve
   services. by using this site, you agree to our [174]terms & conditions
   and [175]privacy policy.[176]i agree

   indico

   indico indico

references

   visible links
   1. https://indico.io/feed/
   2. https://indico.io/comments/feed/
   3. https://indico.io/blog/python-deep-learning-frameworks-reviewed/feed/
   4. https://indico.io/wp-json/oembed/1.0/embed?url=https://indico.io/blog/python-deep-learning-frameworks-reviewed/
   5. https://indico.io/wp-json/oembed/1.0/embed?url=https://indico.io/blog/python-deep-learning-frameworks-reviewed/&format=xml
   6. https://indico.io/
   7. https://indico.io/usecases/sales-support/
   8. https://indico.io/usecases/finance-operations/
   9. https://indico.io/usecases/legal-compliance/
  10. https://indico.io/approach/
  11. https://indico.io/roles/cio/
  12. https://indico.io/roles/business-analysts/
  13. https://indico.io/roles/data-scientists/
  14. https://indico.io/roles/application-developers/
  15. https://indico.io/product/
  16. https://auth.indico.io/register
  17. https://indico.io/usecases/sales-support/
  18. https://indico.io/usecases/finance-operations/
  19. https://indico.io/usecases/legal-compliance/
  20. https://indico.io/approach/
  21. https://indico.io/roles/cio/
  22. https://indico.io/roles/business-analysts/
  23. https://indico.io/roles/data-scientists/
  24. https://indico.io/roles/application-developers/
  25. https://indico.io/product/
  26. https://auth.indico.io/register
  27. https://indico.io/about/
  28. https://indico.io/about/#our-story
  29. https://indico.io/about/#leadership
  30. https://indico.io/about/#contact
  31. https://indico.io/news-events/
  32. https://indico.io/careers/
  33. https://indico.io/support/
  34. https://indico.io/resources/
  35. https://indico.io/blog/
  36. https://indico.io/docs
  37. https://indico.io/product/pricing/
  38. https://indico.io/
  39. https://indico.io/blog/
  40. http://datascience.stackexchange.com/a/695/684
  41. https://github.com/theano/theano
  42. http://deeplearning.net/software/theano/
  43. https://groups.google.com/forum/m/?#!topic/theano-users/7poq8bzutby
  44. http://deeplearning.net/software/theano/install.html
  45. http://deeplearning.net/software/theano/tutorial/
  46. https://github.com/goodfeli/theano_exercises
  47. https://github.com/newmu/theano-tutorials
  48. https://indico.io/blog/introduction-to-deep-learning-with-python-and-theano-2/
  49. https://github.com/lasagne/lasagne
  50. http://lasagne.readthedocs.org/
  51. https://github.com/lasagne/lasagne
  52. http://lasagne.readthedocs.io/en/latest/user/installation.html
  53. http://lasagne.readthedocs.io/en/latest/user/tutorial.html
  54. https://github.com/lasagne/lasagne/tree/master/examples
  55. https://github.com/mila-udem/blocks
  56. http://blocks.readthedocs.io/en/latest/
  57. http://blocks.readthedocs.io/en/latest/setup.html
  58. https://arxiv.org/pdf/1506.00619.pdf
  59. https://www.reddit.com/r/machinelearning/comments/4kpztm/lasagne_vs_blocks_for_deep_learning/
  60. https://github.com/mila-udem/fuel
  61. https://github.com/tensorflow/tensorflow
  62. https://www.tensorflow.org/api_docs/python/
  63. https://indico.io/blog/the-good-bad-ugly-of-tensorflow/
  64. https://www.tensorflow.org/
  65. https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md
  66. https://indico.io/blog/the-good-bad-ugly-of-tensorflow/
  67. https://github.com/nlintz/tensorflow-tutorials
  68. https://www.udacity.com/course/deep-learning--ud730
  69. https://www.tensorflow.org/tutorials/mnist/beginners/
  70. https://indico.io/blog/tensorflow-data-inputs-part1-placeholders-protobufs-queues/
  71. https://github.com/fchollet/keras
  72. https://keras.io/
  73. https://keras.io/#installation
  74. https://groups.google.com/forum/#!forum/keras-users
  75. https://github.com/fchollet/keras/tree/master/examples
  76. https://github.com/fchollet/keras/tree/master/docker
  77. https://github.com/fchollet/keras-resources
  78. https://github.com/dmlc/mxnet
  79. http://mxnet.io/api/python/index.html#python-api-reference
  80. http://mxnet.io/get_started/
  81. https://indico.io/blog/getting-started-with-mxnet/
  82. https://github.com/dmlc/mxnet/tree/master/example
  83. http://www.allthingsdistributed.com/2016/11/mxnet-default-framework-deep-learning-aws.html
  84. https://arxiv.org/abs/1512.01274
  85. https://github.com/pytorch/pytorch
  86. http://pytorch.org/docs/
  87. http://pytorch.org/about/#dynamic-neural-networks-tape-based-autograd
  88. http://pytorch.org/
  89. https://twitter.com/pytorch
  90. https://github.com/pytorch/examples
  91. https://github.com/pytorch/tutorials
  92. mailto:contact@indico.io
  93. https://indico.io/blog/category/announcements
  94. https://indico.io/blog/category/ask-slater
  95. https://indico.io/blog/category/business
  96. https://indico.io/blog/category/data-science
  97. https://indico.io/blog/category/developers
  98. https://indico.io/blog/category/featured-writers
  99. https://indico.io/blog/category/hackathon-spotlight
 100. https://indico.io/blog/category/image-data-use-case
 101. https://indico.io/blog/category/indico
 102. https://indico.io/blog/category/machine-learning
 103. https://indico.io/blog/category/opinion-piece
 104. https://indico.io/blog/category/text-data-use-case
 105. https://indico.io/blog/category/tutorials
 106. https://indico.io/blog/category/uncategorized
 107. https://indico.io/blog/webinar-how-intelligent-process-automation-drives-growth-roi-in-the-financial-services-industry/
 108. https://indico.io/blog/webinar-how-intelligent-process-automation-drives-growth-roi-in-the-financial-services-industry/
 109. https://indico.io/blog/webinar-how-intelligent-process-automation-drives-growth-roi-in-the-financial-services-industry/
 110. https://indico.io/blog/product-feature-spotlight-teach/
 111. https://indico.io/blog/product-feature-spotlight-teach/
 112. https://indico.io/blog/product-feature-spotlight-teach/
 113. https://indico.io/blog/should-we-remove-duplicates-ask-slater/
 114. https://indico.io/blog/should-we-remove-duplicates-ask-slater/
 115. https://indico.io/blog/should-we-remove-duplicates-ask-slater/
 116. https://info.indico.io/subscribe-indico-newsletters?hs_preview=yldubdns-6383039198
 117. https://indico.io/
 118. https://indico.io/careers/
 119. https://indico.io/about/
 120. https://indico.io/about/#our-story
 121. https://indico.io/about/#leadership
 122. https://indico.io/about/#contact
 123. https://indico.io/approach/
 124. https://indico.io/news-events/
 125. https://indico.io/support/
 126. https://indico.io/blog/python-deep-learning-frameworks-reviewed/
 127. https://indico.io/usecases/sales-support/
 128. https://indico.io/usecases/finance-operations/
 129. https://indico.io/usecases/legal-compliance/
 130. https://indico.io/blog/python-deep-learning-frameworks-reviewed/
 131. https://indico.io/roles/cio/
 132. https://indico.io/roles/business-analysts/
 133. https://indico.io/roles/data-scientists/
 134. https://indico.io/roles/application-developers/
 135. https://indico.io/resources/
 136. https://indico.io/blog/
 137. https://indico.io/docs
 138. https://indico.io/product/
 139. https://indico.io/product/pricing/
 140. https://indico.io/careers/
 141. https://indico.io/about/
 142. https://indico.io/about/#our-story
 143. https://indico.io/about/#leadership
 144. https://indico.io/about/#contact
 145. https://indico.io/approach/
 146. https://indico.io/news-events/
 147. https://indico.io/support/
 148. https://indico.io/blog/python-deep-learning-frameworks-reviewed/
 149. https://indico.io/usecases/sales-support/
 150. https://indico.io/usecases/finance-operations/
 151. https://indico.io/usecases/legal-compliance/
 152. https://indico.io/blog/python-deep-learning-frameworks-reviewed/
 153. https://indico.io/roles/cio/
 154. https://indico.io/roles/business-analysts/
 155. https://indico.io/roles/data-scientists/
 156. https://indico.io/roles/application-developers/
 157. https://indico.io/resources/
 158. https://indico.io/blog/
 159. https://indico.io/docs
 160. https://indico.io/product/
 161. https://indico.io/product/pricing/
 162. https://indico.io/careers/
 163. https://indico.io/terms/
 164. https://twitter.com/indicodata
 165. https://www.linkedin.com/company/indico-data-solutions
 166. https://www.facebook.com/indicodatasolutions/
 167. https://www.youtube.com/channel/ucguuwm6papkeftgfmnofthw/videos
 168. https://twitter.com/indicodata
 169. https://www.linkedin.com/company/indico-data-solutions
 170. https://www.facebook.com/indicodatasolutions/
 171. https://www.youtube.com/channel/ucguuwm6papkeftgfmnofthw/videos
 172. https://indico.io/terms/
 173. https://indico.io/blog/python-deep-learning-frameworks-reviewed/
 174. https://indico.io/terms
 175. https://indico.io/terms/#privacy
 176. https://indico.io/blog/python-deep-learning-frameworks-reviewed/

   hidden links:
 178. https://indico.io/blog/python-deep-learning-frameworks-reviewed/
