   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]ai2 blog
   [7]ai2 blog
   [8]sign in[9]get started
     __________________________________________________________________

alexaid122, a finite-state machine python library for building complex
alexa skills

   [10]go to the profile of vu ha
   [11]vu ha (button) blockedunblock (button) followfollowing
   may 11, 2017

   question to alexa:

     alexa, are state machines the secret behind your skills?

why?

   in building alexa skills, developers have a number of toolkits to
   choose from. for javascript developers, the alexa team offers [12]the
   official nodejs sdk, which provides support for handling session
   attributes, skill state persistence, response building, and behavior
   modeling. for pythonistas, john wheeler   s [13]flask-ask seems to be the
   go-to option, as it is built on top of flask, a popular micro-framework
   for building web applications. while these tools are excellent choices,
   they leave out a key aspect of (modeling) complex conversational logics
   with more than a handful of intents and states: [14]finite-state
   machine (id122). enters [15]alexaid122, an open-source python library from
   the allen institute of artificial intelligence. the elevator pitch for
   alexid122 is:

   with alexaid122, developers can model dialog agents with first-class
   concepts such as states, attributes, transition, and actions. alexaid122
   also provides visualization and other tools to help understand, test,
   debug, and maintain complex id122 conversations.

how?

   id122 is a fairly straightforward concept that many developers and
   computer scientists are familiar with. according to [16]wikipedia, it
   is    an abstract machine that can be in exactly one of a finite number
   of states at any given time. the id122 can change from one state to
   another in response to some external inputs; the change from one state
   to another is called a transition. a id122 is defined by a list of its
   states, its initial state, and the conditions for each transition   . in
   the context of modeling dialogs, these concepts carry the following
   meaning:
     * a state (sometimes approximately modeled with context, e.g. in
       google   s [17]api.ai action sdk) is the state of the dialog.
       examples are initial state, end state, waiting for some user input,
       and so on. states are often annotated with attributes, such as
       previously provided intent/slot values. alexa uses
       request['session']['attributes']construct to pass such attributes
       back and forth with a skill   s backend.
     * external inputs are user inputs. alexa user inputs typically arrive
       to the id122 in the form of parsed intent and slot values. external
       inputs are also called triggers or events in id122 parlance.
     * user inputs are handled by a skill developer by writing
       intent-handling logic that makes a transition to a new state.

   for complex dialogs, the id122 approach offers an attractive modeling
   paradigm, enabling the developer to focus on the essentials of the
   dialog logic. when we started prototyping alexa skills at the
   institute, our initial prototypes started out as a straightforward
   collection of intent handlers. as our prototypes evolved, these intent
   handlers grew in complexity, specifically in the number of if-then-else
   statements and the depths that these statement are nested in. these
   nested statements are effectively handlers of different states and
   contexts, routing for example a simple    yes    user confirmation
   directive to the appropriate logic depending on the dialog state. we
   saw that this can quickly become a challenge to write, test, debug, and
   maintain all but the most simple kind of dialogs, and an id122 approach
   would be highly desirable.

   after some research, we settled on using [18]tal yarkoni   s python id122
   library called [19]transitions. here   s an example of how alexaid122 is
   used to build an alexa (meta) [20]skill that helps users search for
   skills. the dialog enters the state below when the user is informed
   about a skill that may match her need.

   iframe: [21]/media/023a0402ba6b75299ce1da7f7ddd35b2?postid=61c3af5a299d

   example of using alexaid122 to implement state transition logic. the
   state    has_result    can be reached via different routes with
   corresponding conditions and prepare/after actions.

   note how we captured a number of ways the dialog enters this state in a
   succinct, declarative way! alexaid122   s github [22]repo contains the
   complete implementation of the search meta skill.

what else?

   in addition, we made the following decisions:
     * we wrote a id122 [23]validation tool that performs a thorough check
       of the following: 1) all alexa intents have corresponding
       events/triggers in the id122. 2) all states have either inbound or
       outbound transitions. 3) all transitions are specified with valid
       source and destination states. 4) all conditions and prepare/after
       actions are handled with methods in the policy class. once the id122
       passes validation, we can be confident that the dialog agent is
       free from a large number of coding error cases.
     * in addition to the visualization feature of transitions (via
       [24]pygraphviz), we wrote a simple tostring formatting utility for
       id122 which we found to be easier to use than a complex diagram.
       check out an [25]example of this format.
     * voicelabs analytics is supported out of the box. voicelabs is
       indispensable for skill developers to understand how users interact
       with their skills so as to continually fine-tune them and optimize
       user experience and retention. voicelabs    [26]last path for example
       helps identify if the users request something that the skill did
       not support, if the user were confused, repeating themselves,
       getting frustrated, etc. this type of analytics insight dovetails
       perfectly with alexaid122   s features. a potential evolution for
       voicelabs is to support id122-based dialog agents, for example by
       visualizing states and transitions instead of intents.
     * alexaid122 is light-weight and agnostic with respect to the choice of
       web frameworks. our example skill is written with flask, but
       cherrypy, pyramid, etc. are also straightforward to use with
       alexaid122.
     * as we were getting started with a new research dialog project at
       the institute, python 3.6 hit the shelves (last month, amazon
       [27]announced support for python 3.6 in their lambda serverless
       offering         how timely!). we adopt it due to more extensive support
       for type hinting and string interpolation. string interpolation is
       just so [28]handy in writing speech patterns, essentially obviates
       the need for templating solutions (such as jinja) that keep speech
       assets separated from code. see which option you prefer:

   iframe: [29]/media/03950e2e9a36d41ed7849efdf9285dd9?postid=61c3af5a299d

   string interpolation is handy for alexa speech templating
     * alexaid122 development was based on audrey roy greenfeld   s
       [30]cookiecutter-pypackage from which we picked support for
       tox/pytest/flake8 and pypi & travis integration.

when not?

   for developers building skills with only a couple of intents and dialog
   turns, alexaid122 would not be as compelling. for those interested in
   taking a crack at the [31]alexa prize, building a social bot that can
   hold a conversation for 20 minutes, alexaid122 may not be a good fit
   either (we dread to think about designing an id122 for 20 minutes chat).
   for other scenarios, give alexaid122 a try and see if you like it. we
   like it a lot for our skill search meta skill.

what   s next?

   [32]alexaid122   s github repo has more detailed documentation and includes
   an id122-based implementation of an alexa skill that helps users search
   for skills. we   d love to hear your feedbacks, suggestions, and pull
   requests.

   looking farther into the future, let   s take a look at the following
   schematic diagram of spoken id71, taken from a recent
   [33]research paper on the institute   s semantic scholar   s service:
   [1*oi54310xvhohgq8ln8uw9q.png]

   see if you can spot the role of the id122 in this diagram!

   the concept of state machine is front and center in (spoken) dialog
   research. historically, research focused on modeling and handling
   uncertainty that comes from speech and language understanding errors
   using the decision-theoretic [34]framework of (partially observable)
   markov decision process. this framework assumes hand-crafted states and
   transitions. recent trends in deep id23 and
   end-to-end neural training of id71 aim to overcome the
   expensive hand-crafted id122 by attempting to learn directly from data
   (the no-pipeline crowd). the [35]reality check is however telling us
   that most commercially deployed id71 are still scripted with
   rules, with explicit id122 modeling optional.

   the field of ai dialog agents is perhaps at its most exciting point in
   a long time. big players are betting heavily on a future with
   ubiquitous voice-first experience (google assistants, microsoft
   cortana, apple siri, in addition to amazon alexa). startups are
   experimenting with a dizzying array of conversation-based user
   experiences. the gap between industry and research remains large, but
   hopefully will shrink in the future. with alexaid122 we hope to play a
   small part in shrinking this gap. perhaps the answer to the question

     alexa, are state machines the secret behind your skills?

   could one day be:

     you nailed it, it   s called alexaid122!

     * [36]artificial intelligence
     * [37]programming
     * [38]chatbots
     * [39]conversational ui
     * [40]alexa

   (button)
   (button)
   (button) 110 claps
   (button) (button) (button) 1 (button) (button)

     (button) blockedunblock (button) followfollowing
   [41]go to the profile of vu ha

[42]vu ha

   search guy who built [43]http://semanticscholar.org. currently advising
   startups on real-world ai at [44]http://allenai.org/incubator.html.
   more at [45]https://vha14.com.

     (button) follow
   [46]ai2 blog

[47]ai2 blog

   the allen institute for artificial intelligence | ai for the common
   good

     * (button)
       (button) 110
     * (button)
     *
     *

   [48]ai2 blog
   never miss a story from ai2 blog, when you sign up for medium.
   [49]learn more
   never miss a story from ai2 blog
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://medium.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/61c3af5a299d
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/ai2-blog?source=avatar-lo_ud3ybmk1gvy3-43dbc3406ef1
   7. https://medium.com/ai2-blog?source=logo-lo_ud3ybmk1gvy3---43dbc3406ef1
   8. https://medium.com/m/signin?redirect=https://medium.com/ai2-blog/alexaid122-a-finite-state-machine-python-library-for-building-complex-alexa-skills-61c3af5a299d&source=--------------------------nav_reg&operation=login
   9. https://medium.com/m/signin?redirect=https://medium.com/ai2-blog/alexaid122-a-finite-state-machine-python-library-for-building-complex-alexa-skills-61c3af5a299d&source=--------------------------nav_reg&operation=register
  10. https://medium.com/@vha14?source=post_header_lockup
  11. https://medium.com/@vha14
  12. https://github.com/alexa/alexa-skills-kit-sdk-for-nodejs
  13. https://github.com/johnwheeler/flask-ask
  14. https://en.wikipedia.org/wiki/finite-state_machine
  15. http://github.com/allenai/alexaid122
  16. https://en.wikipedia.org/wiki/finite-state_machine
  17. https://docs.api.ai/docs/concept-contexts
  18. http://www.talyarkoni.org/blog/2014/10/29/yet-another-python-state-machine-and-why-you-might-care/
  19. https://github.com/tyarkoni/transitions
  20. https://github.com/allenai/alexaid122/tree/master/tests/skillsearch
  21. https://medium.com/media/023a0402ba6b75299ce1da7f7ddd35b2?postid=61c3af5a299d
  22. https://github.com/allenai/alexaid122
  23. https://github.com/allenai/alexaid122/blob/master/alexaid122/utils.py
  24. https://pygraphviz.github.io/
  25. https://github.com/allenai/alexaid122/blob/master/tests/skillsearch/machine.txt
  26. http://voicelabs.co/2017/02/16/announcing-last-path-by-voicelabs/
  27. https://aws.amazon.com/about-aws/whats-new/2017/04/aws-lambda-supports-python-3-6/
  28. https://github.com/allenai/alexaid122/blob/master/alexaid122/policy.py#l67
  29. https://medium.com/media/03950e2e9a36d41ed7849efdf9285dd9?postid=61c3af5a299d
  30. https://github.com/audreyr/cookiecutter-pypackage
  31. https://developer.amazon.com/alexaprize/apply
  32. https://github.com/allenai/alexaid122
  33. https://www.semanticscholar.org/paper/pomdp-based-statistical-spoken-dialog-systems-a-young-gasic/84b520a8d6de79f62bb095b565d077e95bfb6f5b/figure/0
  34. https://www.semanticscholar.org/paper/pomdp-based-statistical-spoken-dialog-systems-a-young-gasic/84b520a8d6de79f62bb095b565d077e95bfb6f5b
  35. https://www.semanticscholar.org/paper/challenges-in-building-highly-interactive-dialog-ward-devault/aa56a0339dd655f51807faa640500f73d325552d
  36. https://medium.com/tag/artificial-intelligence?source=post
  37. https://medium.com/tag/programming?source=post
  38. https://medium.com/tag/chatbots?source=post
  39. https://medium.com/tag/conversational-ui?source=post
  40. https://medium.com/tag/alexa?source=post
  41. https://medium.com/@vha14?source=footer_card
  42. https://medium.com/@vha14
  43. http://semanticscholar.org/
  44. http://allenai.org/incubator.html
  45. https://vha14.com/
  46. https://medium.com/ai2-blog?source=footer_card
  47. https://medium.com/ai2-blog?source=footer_card
  48. https://medium.com/ai2-blog
  49. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  51. https://medium.com/p/61c3af5a299d/share/twitter
  52. https://medium.com/p/61c3af5a299d/share/facebook
  53. https://medium.com/p/61c3af5a299d/share/twitter
  54. https://medium.com/p/61c3af5a299d/share/facebook
