    #[1]index [2]search [3]kur 0.6.0 documentation [4]installing kur

   [5]kur
   0.6
   ____________________
     * [6]installing kur
     * [7]examples: in depth
     * [8]tutorial from scratch: data and model
     * [9]using kur for real
     * [10]kurfile specification
     * [11]containers: layers & operators
     * [12]kur python api
     * [13]frequently asked questions
     * [14]troubleshooting
     * [15]contributing to kur
     * [16]upcoming features
     * [17]building documentation

   [18]kur
     * [19]docs   
     * kur: descriptive deep learning
     * [20]view page source
     __________________________________________________________________

   [21]https://kur.deepgram.com/images/logo.png

kur: descriptive deep learning[22]  

   [23]build [24]license [25]python [26]gitter

introduction[27]  

   welcome to kur! you   ve found the future of deep learning!
     * install kur easily with pip install kur.
     * design, train, and evaluate models without ever needing to code.
     * describe your model with easily understandable concepts.
     * quickly explore better versions of your model with the power of
       [28]jinja2 to automate kurfile specification.
     * supports theano, tensorflow, and pytorch, and supports multi-gpu
       out-of-the-box.
     * kur is open source and available at [29]github
     * coming soon: share your models on [30]kurhub, making it incredibly
       easy to collaborate on models and learn from others.

   here   s a good list to follow:
     * start [31]installing kur
     * jump into the [32]quick examples
     * absorb the [33]in depth examples
     * then build your own model in the [34]tutorial from scratch: data
       and model

   like us? share!
     * [35]facebook
     * [36]google+
     * [37]linkedin
     * [38]twitter

what is kur?[39]  

   kur is a system for quickly building and applying state-of-the-art deep
   learning models to new and exciting problems. kur was designed to
   appeal to the entire machine learning community, from novices to
   veterans. it uses specification files that are simple to read and
   author, meaning that you can get started building sophisticated models
   without ever needing to code. even so, kur exposes a friendly and
   extensible api to support advanced deep learning architectures or
   workflows. excited? jump straight into the [40]examples: in depth.

how is kur different?[41]  

   kur represents a new paradigm for thinking about, building, and using
   state of the art deep learning models. rather than thinking about your
   architecture as a series of tensor operations (tanh(w * x + b)) and
   getting lost in all the details, you can focus on describing the
   architecture you want to instantiate. kur does the rest.

   the kur philosophy is that you should describe your model once and
   simply. simple doesn   t mean brainless, nor does it imply that you are
   limited in what you can do. by    simple    we mean that models should be
   simple to use, simply to modify, and simple to share. a flexible, more
   general model is elegant. and this makes it easier to reuse in new
   contexts or to share with the community. kur   s power lies in quickly
   making models that are both flexible and reusable.

aside: brief history lesson[42]  

   decades ago, researchers wrote low-level code using highly optimized
   id202 libraries and ran the code on cpus. after the rise of
   general purpose computing on gpus (gpgpu), researchers modified their
   code to use cuda or opencl. although this code was functionally
   identical, gpu computing represented an incredible breakthrough in
   efficiency, as these new machine learning models could train and
   predict in fractions of the time compared to cpus. problematically,
   these programs were relatively hard-coded; exploring different
   hyperparameters or architectures typically required detailed knowledge
   of the code, and was fraught with ugly and bug-prone hacks.

   eventually, computer scientists began abstracting away the low-level,
   dirty details of highly-optimized cuda code, and projects like
   [43]theano and [44]tensorflow were born. these tools are incredible in
   that they hide many of the implementation details of working with
   hardware (i.e., cpus and gpus), and instead expose higher-level tensor
   operations to the developer. even then, the developer is forced to
   choose between building up higher-level abstractions of deep learning
   primitives, or devolving to the rigid or hacked models of earlier
   years. projects like [45]keras and [46]lasagna emerged organically,
   driven by a need to more quickly and intuitively develop deep learning
   models. their primary genius is in providing an api that maps to the
   way people actually think about the components of a deep learning
   network (e.g., as a    lstm layer    rather than as a series of tensor
   operations).

   kur is the natural progression of these tools and abstrations. it
   allows you, the researcher, to get straight to the heart of deep
   learning: develop that awesome model you   ve been dreaming about in a
   few short lines. and best of all, you craft your model with high-level
   abstractions rather than having to think about annoying questions like:
     * which language should i use?
     * which backend is the best?
     * what if i want to quickly test different model configurations?

indices and tables[47]  

   contents:
     * [48]installing kur
     * [49]examples: in depth
     * [50]tutorial from scratch: data and model
     * [51]using kur for real
     * [52]kurfile specification
     * [53]containers: layers & operators
     * [54]kur python api
     * [55]frequently asked questions
     * [56]troubleshooting
     * [57]contributing to kur
     * [58]upcoming features
     * [59]building documentation

     * [60]index
     * [61]module index
     * [62]search page

   [63]next
     __________________________________________________________________

      copyright 2016, deepgram.
   built with [64]sphinx using a [65]theme provided by [66]read the docs.

references

   1. https://kur.deepgram.com/genindex.html
   2. https://kur.deepgram.com/search.html
   3. https://kur.deepgram.com/
   4. https://kur.deepgram.com/install.html
   5. https://kur.deepgram.com/
   6. https://kur.deepgram.com/install.html
   7. https://kur.deepgram.com/in_depth_examples.html
   8. https://kur.deepgram.com/tutorial.html
   9. https://kur.deepgram.com/getting_started.html
  10. https://kur.deepgram.com/specification.html
  11. https://kur.deepgram.com/containers.html
  12. https://kur.deepgram.com/api.html
  13. https://kur.deepgram.com/faq.html
  14. https://kur.deepgram.com/troubleshooting.html
  15. https://kur.deepgram.com/contributing.html
  16. https://kur.deepgram.com/upcoming.html
  17. https://kur.deepgram.com/build_docs.html
  18. https://kur.deepgram.com/
  19. https://kur.deepgram.com/
  20. https://kur.deepgram.com/_sources/index.rst.txt
  21. https://deepgram.com/
  22. https://kur.deepgram.com/#kur-descriptive-deep-learning
  23. https://travis-ci.org/deepgram/kur
  24. https://github.com/deepgram/kur/blob/master/license
  25. https://kur.deepgram.com/installing.html
  26. https://gitter.im/deepgram-kur/lobby
  27. https://kur.deepgram.com/#introduction
  28. http://jinja.pocoo.org/
  29. http://www.github.com/deepgram/kur
  30. http://www.kurhub.com/
  31. https://kur.deepgram.com/install.html#install-kur
  32. https://kur.deepgram.com/quick_start_examples.html#quick-examples
  33. https://kur.deepgram.com/in_depth_examples.html#in-depth-examples
  34. https://kur.deepgram.com/tutorial.html
  35. https://www.facebook.com/sharer/sharer.php?u=https://kur.deepgram.com
  36. https://plus.google.com/share?url=https://kur.deepgram.com
  37. https://www.linkedin.com/sharearticle?mini=true&url=https://kur.deepgram.com&title=kur - descriptive deep learning&summary=kur is the future of deep learning: advanced ai without programming!&source=
  38. https://twitter.com/home?status=@deepgramai has released the future of deep learning. https://kur.deepgram.com #kur
  39. https://kur.deepgram.com/#what-is-kur
  40. https://kur.deepgram.com/in_depth_examples.html#in-depth-examples
  41. https://kur.deepgram.com/#how-is-kur-different
  42. https://kur.deepgram.com/#aside-brief-history-lesson
  43. https://kur.deepgram.com/deeplearning.net/software/theano/
  44. https://www.tensorflow.org/
  45. https://keras.io/
  46. https://github.com/lasagne/lasagne
  47. https://kur.deepgram.com/#indices-and-tables
  48. https://kur.deepgram.com/install.html
  49. https://kur.deepgram.com/in_depth_examples.html
  50. https://kur.deepgram.com/tutorial.html
  51. https://kur.deepgram.com/getting_started.html
  52. https://kur.deepgram.com/specification.html
  53. https://kur.deepgram.com/containers.html
  54. https://kur.deepgram.com/api.html
  55. https://kur.deepgram.com/faq.html
  56. https://kur.deepgram.com/troubleshooting.html
  57. https://kur.deepgram.com/contributing.html
  58. https://kur.deepgram.com/upcoming.html
  59. https://kur.deepgram.com/build_docs.html
  60. https://kur.deepgram.com/genindex.html
  61. https://kur.deepgram.com/py-modindex.html
  62. https://kur.deepgram.com/search.html
  63. https://kur.deepgram.com/install.html
  64. http://sphinx-doc.org/
  65. https://github.com/snide/sphinx_rtd_theme
  66. https://readthedocs.org/
