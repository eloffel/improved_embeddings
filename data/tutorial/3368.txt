   #[1]github [2]recent commits to neural-doodle:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]334
     * [35]star [36]9,059
     * [37]fork [38]803

[39]alexjc/[40]neural-doodle

   [41]code [42]issues 45 [43]pull requests 2 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   turn your two-bit doodles into fine artworks with deep neural networks,
   generate seaid113ss textures from photos, transfer style from one image
   to another, perform example-based upscaling, but wait... there's more!
   (an implementation of semantic style transfer.)
     * [47]122 commits
     * [48]5 branches
     * [49]1 release
     * [50]fetching contributors
     * [51]agpl-3.0

    1. [52]python 96.3%
    2. [53]shell 3.7%

   (button) python shell
   branch: master (button) new pull request
   [54]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/a
   [55]download zip

downloading...

   want to be notified of new releases in alexjc/neural-doodle?
   [56]sign in [57]sign up

launching github desktop...

   if nothing happens, [58]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [59]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [60]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [61]download the github extension for visual studio
   and try again.

   (button) go back
   [62]@alexjc
   [63]alexjc [64]switching license to agpl for the new code. models are
   non-commercial    (button)    
    and attribution.

   latest commit [65]b2fac92 may 13, 2016
   [66]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [67]docker [68]docker: simplifying folder structure for easier
   documentation, output    may 3, 2016
   [69]docs [70]better gif resolution/compression for docker image. may 5,
   2016
   [71]samples [72]adding portraits from paper and semantic maps, modified
   to be compati    apr 15, 2016
   [73].gitignore
   [74]license
   [75]readme.rst
   [76]docker-cpu.df
   [77]docker-gpu.df
   [78]doodle.py [79]fix for implicit imports. may 4, 2016
   [80]requirements.txt [81]new requirement after matplotlib was removed.
   may 4, 2016

readme.rst

neural doodle

   [82]docs/workflow.gif

   use a deep neural network to borrow the skills of real artists and turn
   your two-bit doodles into masterpieces! this project is an
   implementation of [83]semantic style transfer (champandard, 2016),
   based on the [84]neural patches algorithm (li, 2016). read more about
   the motivation in this [85]in-depth article and watch this [86]workflow
   video for inspiration.

   the doodle.py script generates a new image by using one, two, three or
   four images as inputs depending what you're trying to do: the original
   style and its annotation, and a target content image (optional) with
   its annotation (a.k.a. your doodle). the algorithm extracts annotated
   patches from the style image, and incrementally transfers them over to
   the target image based on how closely they match.

   note: making a #neuraldoodle is a skill. the parameters in the script
   were adjusted to work well by default and with the examples below. for
   new images, you may need to adjust values and modify on your input data
   too. it takes practice, but you can reach almost photo-realistic
   results if you iterate! ([87]ask for advice here or see examples.)
    1. [88]examples & usage
    2. [89]installation
    3. [90]troubleshooting
    4. [91]frequent questions

   important: this project is possible thanks to the [92]nucl.ai
   conference on creative ai, july 18-20. join us in vienna!

   [93]python version [94]license type [95]project stars
     __________________________________________________________________

   [96]docs/landscape_example.png

1. examples & usage

   the main script is called doodle.py, which you can run with python 3.4+
   (see setup below). the --device argument that lets you specify which
   gpu or cpu to use. for the samples above, here are the performance
   results:
     * gpu rendering     assuming you have cuda setup and enough on-board
       ram, the process should complete in 3 to 8 minutes, even with twice
       the iteration count.
     * cpu rendering     this will take hours and hours, even up to 12h on
       older hardware. to match quality it'd take twice the time. do
       multiple runs in parallel!

   the default is to use cpu, if you have nvidia card setup with cuda
   already try gpu0. on the cpu, you can also set environment variable to
   omp_num_threads=4, but we've found the speed improvements to be
   minimal.

1.a) image analogy

   the algorithm is built for style transfer, but can also generate image
   analogies that we call a #neuraldoodle; use the hashtag if you post
   your images! example files are included in the #/samples/ folder.
   execute with these commands:
# synthesize a coastline as if painted by monet. this uses "*_sem.png" masks for
 both images.
python3 doodle.py --style samples/monet.jpg --output samples/coastline.png \
                  --device=cpu --iterations=40

# generate a scene around a lake in the style of a renoir painting.
python3 doodle.py --style samples/renoir.jpg --output samples/landscape.png \
                  --device=gpu0 --iterations=80

   notice the renoir results look a little better than the monet. some
   rotational variations of the source image could improve the quality of
   the arch outline in particular.

1.b) style transfer

   if you want to transfer the style given a source style with
   annotations, and a target content image with annotations, you can use
   the following command lines. in all cases, the semantic map is loaded
   and used if it's found under the *_sem.png filename that matches the
   input file.
# synthesize a portrait of seth johnson like a gogh portrait. this uses "*_sem.p
ng" masks for both images.
python3 doodle.py --style samples/gogh.jpg --content samples/seth.png \
                  --output sethasgogh.png --device=cpu --phases=4 --iterations=4
0

# generate what a photo of vincent van gogh would look like, using seth's portra
it as reference.
python3 doodle.py --style samples/seth.jpg --content samples/gogh.png \
                  --output goghasseth.png --device=gpu0 --phases=4 --iterations=
80

   to perform regular style transfer without semantic annotations, simply
   delete or rename the files with the semantic maps. the photo is
   originally by [97]seth johnson, and the concept for this style transfer
   by [98]kyle mcdonald.

   [99]docs/portraits_example.jpg

1.c) texture synthesis

   for synthesizing bitmap textures, you only need an input style without
   anotations and without target output. in this case, you simply specify
   one input style image and the output file as follows:
# first synthesis uses a darker noise pattern as seed.
python3 doodle.py --style samples/wall.jpg --output wall.png\
                  --seed=noise --seed-range=0:128 --iterations=50 --phases=3

# second synthesis uses a lighter noise pattern as seed.
python3 doodle.py --style samples/wall.jpg --output wall.png\
                  --seed=noise --seed-range=192:255 --iterations=50 --phases=3

   you can also control the output resolution using --output-size=512x512
   parameter   which also depends on the memory you have available. by
   default the size will be the same as the style image.

   [100]docs/textures_example.jpg

1.d) script parameters

   you can configure the algorithm using the following parameters. type
   python3 doodle.py --help for the full list of options, or see the
   source code.
     * --style-weight=50.0     weight of style relative to content.
     * --style-layers=3_1,4_1     the layers to match style patches.
     * --semantic-weight=1.0     global weight of semantics vs. features.
     * --smoothness=1.0     weight of image smoothing scheme.
     * --seed=noise     seed image path, "noise" or "content".
     * --print-every=10     how often to log statistics to stdout.
     * --save-every=10     how frequently to save png into frames.

2. installation & setup

   [101]docs/dockerconsole.gif

2.a) using docker image (recommended)

   the easiest way to get up-and-running is to [102]install docker. then,
   you should be able to downloand and run the pre-built image using the
   docker command line tool. find out more about the alexjc/neural-doodle
   image on its [103]docker hub page.

   the easiest way to run the script from the docker image is to setup an
   easy access command called doodle. this will automatically:
     * mount the frames folder from current directory into the instance
       for visualization.
     * expose the samples folder from the current directory so the script
       can access files!

   this is how you can do it in your terminal console on osx or linux:
# setup the alias. put this in your .bash_rc or .zshrc file so it's available at
 startup.
alias doodle="docker run -v $(pwd)/samples:/nd/samples -v $(pwd)/frames:/nd/fram
es \
                         -it alexjc/neural-doodle"

# now run any of the examples above using this alias, without the `.py` extensio
n.
doodle --help

   if you want to run on your nvidia gpu, you can instead use the image
   alexjc/neural-doodle:gpu which comes with cuda and cudnn pre-installed
   in the image. see the scripts in docker/*.sh for how to setup your host
   machine. (advanced)

2.b) manual installation (optional)

   this project requires python 3.4+ and you'll also need numpy and scipy
   (numerical computing libraries) as well as python3-dev installed
   system-wide. if you want more detailed instructions, follow these:
    1. [104]linux installation of lasagne (intermediate)
    2. [105]mac osx installation of lasagne (advanced)
    3. [106]windows installation of lasagne (expert)

   afterward fetching the repository, you can run the following commands
   from your terminal to setup a local environment:
# create a local environment for python 3.x to install dependencies here.
python3 -m venv pyvenv --system-site-packages

# if you're using bash, make this the active version of python.
source pyvenv/bin/activate

# setup the required dependencies simply using the pip module.
python3 -m pip install --ignore-installed -r requirements.txt

   after this, you should have scikit-image, theano and lasagne installed
   in your virtual environment. you'll also need to download this
   [107]pre-trained neural network (vgg19, 80mb) and put it in the same
   folder as the script to run. once you're done you can just delete the
   #/pyvenv/ folder.

   [108]docs/coastline_example.png

3. troubleshooting problems

it's running out of gpu ram, throwing memoryerror. help!

   you'll need a good nvidia card with cuda to run this software on gpu,
   ideally 2gb / 4gb or better still, 8gb to 12gb for larger resolutions.
   the code does work on cpu by default, so use that as fallback since you
   likely have more system ram!

   to improve memory consumption, you can also install nvidia's cudnn
   library version 3.0 or 4.0. this allows convolutional neural networks
   to run faster and save space in gpu ram.

   fix: use --device=cpu to use main system memory.

how much gpu is being used? it doesn't seem very fast...

   first make sure cuda is installed correctly and environment variables
   are set, then reinstall theano. if everything is setup correctly, the
   gpu should be used regularly as the gradient calculations are
   offloaded. if you run nvidia's monitoring tool it looks something like
   this:

   the third column is the utilitazition of compute resources, and the
   fourth column is the use of memory. if memory is under-used you can
   increase resolution! if compute is under allocated too you can try
   running multiple scripts in parallel!

   fix: run nvidia-smi dmon and check the sm column.

can't install or unable to find pgen, not compiling formal grammar.

   there's a python extension compiler called cython, and it's missing or
   inproperly installed. try getting it directly from the system package
   manager rather than pip.

   fix: sudo apt-get install cython3

notimplementederror: abstractconv2d theano optimization failed.

   this happens when you're running without a gpu, and the cpu libraries
   were not found (e.g. libblas). the neural network expressions cannot be
   evaluated by theano and it's raising an exception.

   fix: sudo apt-get install libblas-dev libopenblas-dev

typeerror: max_pool_2d() got an unexpected keyword argument 'mode'

   you need to install lasagne and theano directly from the versions
   specified in requirements.txt, rather than from the pip versions. these
   alternatives are older and don't have the required features.

   fix: python3 -m pip install -r requirements.txt

valueerror: unknown locale: utf-8

   it seems your terminal is misconfigured and not compatible with the way
   python treats locales. you may need to change this in your .bash_rc or
   other startup script. alternatively, this command will fix it once for
   this shell instance.

   fix: export lc_all=en_us.utf-8

error: the optimization diverged and nans were encountered.

   it's possible there's a platform bug in the underlying libraries or
   compiler, which has been reported on macos el capitan. it's not clear
   how to fix it, but you can try to disable optimizations to prevent the
   bug. (see [109]issue #8.)

   fix: use --safe-mode flag to disable optimizations.

4. frequent questions

q: when will this be possible in realtime? i want it as filter!

   related algorithms have shown this is possible in realtime   if you're
   willing to accept slightly lower quality:
     * [110]texture networks: feed-forward synthesis of textures and
       stylized images
     * [111]perceptual losses for real-time style transfer and
       super-resolution
     * [112]precomputed real-time texture synthesis with markovian
       id3

   this project is not designed for real-time use, the focus is on
   quality. the code in this repository is ideal for training realtime
   capable networks.

q: is there an application for this? i want to download it!

   there are many online services that provide basic style transfer with
   neural networks. we run [113]@deepforger, a twitter & facebook bot with
   web interface, that can take your requests too. it takes time to make
   forgeries, so there's a queue... be patient!
     __________________________________________________________________

   [114]python version [115]license type [116]project stars

     *    2019 github, inc.
     * [117]terms
     * [118]privacy
     * [119]security
     * [120]status
     * [121]help

     * [122]contact github
     * [123]pricing
     * [124]api
     * [125]training
     * [126]blog
     * [127]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [128]reload to refresh your
   session. you signed out in another tab or window. [129]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/alexjc/neural-doodle/commits/master.atom
   3. https://github.com/alexjc/neural-doodle#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/alexjc/neural-doodle
  32. https://github.com/join
  33. https://github.com/login?return_to=/alexjc/neural-doodle
  34. https://github.com/alexjc/neural-doodle/watchers
  35. https://github.com/login?return_to=/alexjc/neural-doodle
  36. https://github.com/alexjc/neural-doodle/stargazers
  37. https://github.com/login?return_to=/alexjc/neural-doodle
  38. https://github.com/alexjc/neural-doodle/network/members
  39. https://github.com/alexjc
  40. https://github.com/alexjc/neural-doodle
  41. https://github.com/alexjc/neural-doodle
  42. https://github.com/alexjc/neural-doodle/issues
  43. https://github.com/alexjc/neural-doodle/pulls
  44. https://github.com/alexjc/neural-doodle/projects
  45. https://github.com/alexjc/neural-doodle/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/alexjc/neural-doodle/commits/master
  48. https://github.com/alexjc/neural-doodle/branches
  49. https://github.com/alexjc/neural-doodle/releases
  50. https://github.com/alexjc/neural-doodle/graphs/contributors
  51. https://github.com/alexjc/neural-doodle/blob/master/license
  52. https://github.com/alexjc/neural-doodle/search?l=python
  53. https://github.com/alexjc/neural-doodle/search?l=shell
  54. https://github.com/alexjc/neural-doodle/find/master
  55. https://github.com/alexjc/neural-doodle/archive/master.zip
  56. https://github.com/login?return_to=https://github.com/alexjc/neural-doodle
  57. https://github.com/join?return_to=/alexjc/neural-doodle
  58. https://desktop.github.com/
  59. https://desktop.github.com/
  60. https://developer.apple.com/xcode/
  61. https://visualstudio.github.com/
  62. https://github.com/alexjc
  63. https://github.com/alexjc/neural-doodle/commits?author=alexjc
  64. https://github.com/alexjc/neural-doodle/commit/b2fac92b27dea18cf1ab8438c981b3537fa9ad06
  65. https://github.com/alexjc/neural-doodle/commit/b2fac92b27dea18cf1ab8438c981b3537fa9ad06
  66. https://github.com/alexjc/neural-doodle/tree/b2fac92b27dea18cf1ab8438c981b3537fa9ad06
  67. https://github.com/alexjc/neural-doodle/tree/master/docker
  68. https://github.com/alexjc/neural-doodle/commit/c8b0c1aee76a71d2355aed8995ebf458ce25c79a
  69. https://github.com/alexjc/neural-doodle/tree/master/docs
  70. https://github.com/alexjc/neural-doodle/commit/95d7c8964c998c24391757a1ecbed78d08509bd0
  71. https://github.com/alexjc/neural-doodle/tree/master/samples
  72. https://github.com/alexjc/neural-doodle/commit/c3a13c7b990235afd41c6c01b1d023f795a81f10
  73. https://github.com/alexjc/neural-doodle/blob/master/.gitignore
  74. https://github.com/alexjc/neural-doodle/blob/master/license
  75. https://github.com/alexjc/neural-doodle/blob/master/readme.rst
  76. https://github.com/alexjc/neural-doodle/blob/master/docker-cpu.df
  77. https://github.com/alexjc/neural-doodle/blob/master/docker-gpu.df
  78. https://github.com/alexjc/neural-doodle/blob/master/doodle.py
  79. https://github.com/alexjc/neural-doodle/commit/3cd02288fa2d658ff2ab95745742d1a5359378bc
  80. https://github.com/alexjc/neural-doodle/blob/master/requirements.txt
  81. https://github.com/alexjc/neural-doodle/commit/714da3302301687cad1afa5943a88d8a30448a70
  82. https://github.com/alexjc/neural-doodle/blob/master/docs/workflow.gif
  83. http://arxiv.org/abs/1603.01768
  84. http://arxiv.org/abs/1601.04589
  85. https://nucl.ai/blog/neural-doodles/
  86. https://www.youtube.com/watch?v=fu2fzx4w3mi
  87. https://github.com/alexjc/neural-doodle/issues?q=label:advice
  88. https://github.com/alexjc/neural-doodle#1-examples--usage
  89. https://github.com/alexjc/neural-doodle#2-installation--setup
  90. https://github.com/alexjc/neural-doodle#3-troubleshooting-problems
  91. https://github.com/alexjc/neural-doodle#4-frequent-questions
  92. http://events.nucl.ai/
  93. https://www.python.org/
  94. https://github.com/alexjc/neural-doodle/blob/master/license
  95. https://github.com/alexjc/neural-doodle/stargazers
  96. https://github.com/alexjc/neural-doodle/blob/master/docs/landscape_example.png
  97. http://sethjohnson.tumblr.com/post/655063019/this-was-a-project-for-an-art-history-class-turns
  98. https://twitter.com/kcimc
  99. https://github.com/alexjc/neural-doodle/blob/master/docs/portraits_example.jpg
 100. https://github.com/alexjc/neural-doodle/blob/master/docs/textures_example.jpg
 101. https://github.com/alexjc/neural-doodle/blob/master/docs/dockerconsole.gif
 102. https://www.docker.com/
 103. https://hub.docker.com/r/alexjc/neural-doodle/
 104. https://github.com/lasagne/lasagne/wiki/from-zero-to-lasagne-on-ubuntu-14.04
 105. http://deeplearning.net/software/theano/install.html#mac-os
 106. https://github.com/lasagne/lasagne/wiki/from-zero-to-lasagne-on-windows-7-(64-bit)
 107. https://github.com/alexjc/neural-doodle/releases/download/v0.0/vgg19_conv.pkl.bz2
 108. https://github.com/alexjc/neural-doodle/blob/master/docs/coastline_example.png
 109. https://github.com/alexjc/neural-doodle/issues/8
 110. http://arxiv.org/abs/1603.03417
 111. http://arxiv.org/abs/1603.08155
 112. http://arxiv.org/abs/1604.04382
 113. https://deepforger.com/
 114. https://www.python.org/
 115. https://github.com/alexjc/neural-doodle/blob/master/license
 116. https://github.com/alexjc/neural-doodle/stargazers
 117. https://github.com/site/terms
 118. https://github.com/site/privacy
 119. https://github.com/security
 120. https://githubstatus.com/
 121. https://help.github.com/
 122. https://github.com/contact
 123. https://github.com/pricing
 124. https://developer.github.com/
 125. https://training.github.com/
 126. https://github.blog/
 127. https://github.com/about
 128. https://github.com/alexjc/neural-doodle
 129. https://github.com/alexjc/neural-doodle

   hidden links:
 131. https://github.com/
 132. https://github.com/alexjc/neural-doodle
 133. https://github.com/alexjc/neural-doodle
 134. https://github.com/alexjc/neural-doodle
 135. https://help.github.com/articles/which-remote-url-should-i-use
 136. https://github.com/alexjc/neural-doodle#neural-doodle
 137. https://github.com/alexjc/neural-doodle#1-examples--usage
 138. https://github.com/alexjc/neural-doodle#1a-image-analogy
 139. https://github.com/alexjc/neural-doodle#1b-style-transfer
 140. https://github.com/alexjc/neural-doodle#1c-texture-synthesis
 141. https://github.com/alexjc/neural-doodle#1d-script-parameters
 142. https://github.com/alexjc/neural-doodle#2-installation--setup
 143. https://github.com/alexjc/neural-doodle#2a-using-docker-image-recommended
 144. https://github.com/alexjc/neural-doodle#2b-manual-installation-optional
 145. https://github.com/alexjc/neural-doodle#3-troubleshooting-problems
 146. https://github.com/alexjc/neural-doodle#its-running-out-of-gpu-ram-throwing-memoryerror-help
 147. https://github.com/alexjc/neural-doodle#how-much-gpu-is-being-used-it-doesnt-seem-very-fast
 148. https://github.com/alexjc/neural-doodle#cant-install-or-unable-to-find-pgen-not-compiling-formal-grammar
 149. https://github.com/alexjc/neural-doodle#notimplementederror-abstractconv2d-theano-optimization-failed
 150. https://github.com/alexjc/neural-doodle#typeerror-max_pool_2d-got-an-unexpected-keyword-argument-mode
 151. https://github.com/alexjc/neural-doodle#valueerror-unknown-locale-utf-8
 152. https://github.com/alexjc/neural-doodle#error-the-optimization-diverged-and-nans-were-encountered
 153. https://github.com/alexjc/neural-doodle#4-frequent-questions
 154. https://github.com/alexjc/neural-doodle#q-when-will-this-be-possible-in-realtime-i-want-it-as-filter
 155. https://github.com/alexjc/neural-doodle#q-is-there-an-application-for-this-i-want-to-download-it
 156. https://github.com/
