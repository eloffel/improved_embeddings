   #[1]github [2]recent commits to neural-storyteller:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]135
     * [35]star [36]2,707
     * [37]fork [38]484

[39]ryankiros/[40]neural-storyteller

   [41]code [42]issues 31 [43]pull requests 2 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   a recurrent neural network for generating little stories about images
     * [47]25 commits
     * [48]1 branch
     * [49]0 releases
     * [50]fetching contributors

    1. [51]python 100.0%

   (button) python
   branch: master (button) new pull request
   [52]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/r
   [53]download zip

downloading...

   want to be notified of new releases in ryankiros/neural-storyteller?
   [54]sign in [55]sign up

launching github desktop...

   if nothing happens, [56]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [57]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [58]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [59]download the github extension for visual studio
   and try again.

   (button) go back
   [60]@ryankiros
   [61]ryankiros [62]merge pull request [63]#5 [64]from yknzhu/master
   (button)    
adding cpu support

   latest commit [65]61e12a7 nov 15, 2015
   [66]permalink
   type         name         latest commit message  commit time
        failed to load latest commit information.
        [67]images          [68]images             nov 2, 2015
        [69].gitignore
        [70]readme.md
        [71]config.py
        [72]decoder.py
        [73]embedding.py
        [74]generate.py     [75]update config      nov 13, 2015
        [76]search.py       [77]bug in id125 nov 3, 2015
        [78]skipthoughts.py

readme.md

neural-storyteller

   neural-storyteller is a recurrent neural network that generates little
   stories about images. this repository contains code for generating
   stories with your own images, as well as instructions for training new
   models.

   [79][ex1.jpg]
   *we were barely able to catch the breeze at the beach , and it felt as
   if someone stepped out of my mind . she was in love with him for the
   first time in months , so she had no intention of escaping . the sun
   had risen from the ocean , making her feel more alive than normal . she
   's beautiful , but the truth is that i do n't know what to do . the sun
   was just starting to fade away , leaving people scattered around the
   atlantic ocean . i d seen the men in his life , who guided me at the
   beach once more .*

   [80]samim has made an awesome blog post with lots of results [81]here.

   some more results from an older model trained on adventure books can be
   found [82]here.

   the whole approach contains 4 components:
     * [83]skip-thought vectors
     * [84]image-sentence embeddings
     * [85]conditional neural language models
     * style shifting (described in this project)

   the 'style-shifting' operation is what allows our model to transfer
   standard image captions to the style of stories from novels. the only
   source of supervision in our models is from [86]microsoft coco
   captions. that is, we did not collect any new training data to directly
   predict stories given images.

   style shifting was inspired by [87]a neural algorithm of artistic style
   but the technical details are completely different.

how does it work?

   we first train a recurrent neural network (id56) decoder on romance
   novels. each passage from a novel is mapped to a skip-thought vector.
   the id56 then conditions on the skip-thought vector and aims to generate
   the passage that it has encoded. we use romance novels collected from
   the bookcorpus [88]dataset.

   parallel to this, we train a visual-semantic embedding between coco
   images and captions. in this model, captions and images are mapped into
   a common vector space. after training, we can embed new images and
   retrieve captions.

   given these models, we need a way to bridge the gap between retrieved
   image captions and passages in novels. that is, if we had a function f
   that maps a collection of image caption vectors x to a book passage
   vector f(x), then we could feed f(x) to the decoder to get our story.
   there is no such parallel data, so we need to construct f another way.

   it turns out that skip-thought vectors have some intriguing properties
   that allow us to construct f in a really simple way. suppose we have 3
   vectors: an image caption x, a "caption style" vector c and a "book
   style" vector b. then we define f as

   f(x) = x - c + b

   which intuitively means: keep the "thought" of the caption, but replace
   the image caption style with that of a story. then, we simply feed f(x)
   to the decoder.

   how do we construct c and b? here, c is the mean of the skip-thought
   vectors for microsoft coco training captions. we set b to be the mean
   of the skip-thought vectors for romance novel passages that are of
   length > 100.

what kind of biases work?

   skip-thought vectors are sensitive to:
     * length (if you bias by really long passages, it will decode really
       long stories)
     * punctuation
     * vocabulary
     * syntactic style (loosely speaking)

   for the last point, if you bias using text all written the same way the
   stories you get will also be written the same way.

what can the decoder be trained on?

   we use romance novels, but that is because we have over 14 million
   passages to train on. anything should work, provided you have a lot of
   text! if you want to train your own decoder, you can use the code
   available [89]here any models trained there can be substituted here.

dependencies

   this code is written in python. to use it you will need:
     * python 2.7
     * a recent version of [90]numpy and [91]scipy
     * [92]lasagne
     * a version of theano that lasagne supports

   for running on cpu, you will need to install [93]caffe and its python
   interface.

getting started

   you will first need to download some pre-trained models and style
   vectors. most of the materials are available in a single compressed
   file, which you can obtain by running
wget http://www.cs.toronto.edu/~rkiros/neural_storyteller.zip

   included is a pre-trained decoder on romance novels, the decoder
   dictionary, caption and romance style vectors, ms coco training
   captions and a pre-trained image-sentence embedding model.

   next, you need to obtain the pre-trained skip-thoughts encoder. go
   [94]here and follow the instructions on the main page to obtain the
   pre-trained model.

   finally, we need the vgg-19 convnet parameters. you can obtain them by
   running
wget https://s3.amazonaws.com/lasagne/recipes/pretrained/id163/vgg19.pkl

   note that this model is for non-commercial use only. once you have all
   the materials, open config.py and specify the locations of all of the
   models and style vectors that you downloaded.

   for running on cpu, you will need to download the vgg-19 prototxt and
   model by:
wget http://www.robots.ox.ac.uk/~vgg/software/very_deep/caffe/vgg_ilsvrc_19_laye
rs.caffemodel
wget https://gist.githubusercontent.com/ksimonyan/3785162f95cd2d5fee77/raw/bb2b4
fe0a9bb0669211cf3d0bc949dfdda173e9e/vgg_ilsvrc_19_layers_deploy.prototxt

   you also need to modify pycaffe and model path in config.py, and modify
   the flag in line 8 as:
flag_cpu_mode = true

generating a story

   the images directory contains some sample images that you can try the
   model on. in order to generate a story, open ipython and run the
   following:
import generate
z = generate.load_all()
generate.story(z, './images/ex1.jpg')

   if everything works, it will first print out the nearest coco captions
   to the image (predicted by the visual-semantic embedding model). then
   it will print out a story.

generation options

   there are 2 knobs that can be tuned for generation: the number of
   retrieved captions to condition on as well as the id125 width.
   the defaults are
generate.story(z, './images/ex1.jpg', k=100, bw=50)

   where k is the number of captions to condition on and bw is the beam
   width. these are reasonable defaults but playing around with these can
   give you very different outputs! the higher the beam width, the longer
   it takes to generate a story.

   if you bias by song lyrics, you can turn on the lyric flag which will
   print the output in multiple lines by comma delimiting.
   neural_storyteller.zip contains an additional bias vector called
   swift_style.npy which is the mean of skip-thought vectors across taylor
   swift lyrics. if you point path_to_posbias to this vector in config.py,
   you can generate captions in the style of taylor swift lyrics. for
   example:
generate.story(z, './images/ex1.jpg', lyric=true)

   should output
you re the only person on the beach right now
you know
i do n't think i will ever fall in love with you
and when the sea breeze hits me
i thought
hey

reference

   this project does not have any associated paper with it. if you found
   this code useful, please consider citing:

   ryan kiros, yukun zhu, ruslan salakhutdinov, richard s. zemel, antonio
   torralba, raquel urtasun, and sanja fidler. "skip-thought vectors."
   arxiv preprint arxiv:1506.06726 (2015).
@article{kiros2015skip,
  title={skip-thought vectors},
  author={kiros, ryan and zhu, yukun and salakhutdinov, ruslan and zemel, richar
d s and torralba, antonio and urtasun, raquel and fidler, sanja},
  journal={arxiv preprint arxiv:1506.06726},
  year={2015}
}

   if you also use the bookcorpus data for training new models, please
   also consider citing:

   yukun zhu, ryan kiros, richard zemel, ruslan salakhutdinov, raquel
   urtasun, antonio torralba, sanja fidler. "aligning books and movies:
   towards story-like visual explanations by watching movies and reading
   books." arxiv preprint arxiv:1506.06724 (2015).
@article{zhu2015aligning,
    title={aligning books and movies: towards story-like visual explanations by
watching movies and reading books},
    author={zhu, yukun and kiros, ryan and zemel, richard and salakhutdinov, rus
lan and urtasun, raquel and torralba, antonio and fidler, sanja},
    journal={arxiv preprint arxiv:1506.06724},
    year={2015}
}

     *    2019 github, inc.
     * [95]terms
     * [96]privacy
     * [97]security
     * [98]status
     * [99]help

     * [100]contact github
     * [101]pricing
     * [102]api
     * [103]training
     * [104]blog
     * [105]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [106]reload to refresh your
   session. you signed out in another tab or window. [107]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/ryankiros/neural-storyteller/commits/master.atom
   3. https://github.com/ryankiros/neural-storyteller#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/ryankiros/neural-storyteller
  32. https://github.com/join
  33. https://github.com/login?return_to=/ryankiros/neural-storyteller
  34. https://github.com/ryankiros/neural-storyteller/watchers
  35. https://github.com/login?return_to=/ryankiros/neural-storyteller
  36. https://github.com/ryankiros/neural-storyteller/stargazers
  37. https://github.com/login?return_to=/ryankiros/neural-storyteller
  38. https://github.com/ryankiros/neural-storyteller/network/members
  39. https://github.com/ryankiros
  40. https://github.com/ryankiros/neural-storyteller
  41. https://github.com/ryankiros/neural-storyteller
  42. https://github.com/ryankiros/neural-storyteller/issues
  43. https://github.com/ryankiros/neural-storyteller/pulls
  44. https://github.com/ryankiros/neural-storyteller/projects
  45. https://github.com/ryankiros/neural-storyteller/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/ryankiros/neural-storyteller/commits/master
  48. https://github.com/ryankiros/neural-storyteller/branches
  49. https://github.com/ryankiros/neural-storyteller/releases
  50. https://github.com/ryankiros/neural-storyteller/graphs/contributors
  51. https://github.com/ryankiros/neural-storyteller/search?l=python
  52. https://github.com/ryankiros/neural-storyteller/find/master
  53. https://github.com/ryankiros/neural-storyteller/archive/master.zip
  54. https://github.com/login?return_to=https://github.com/ryankiros/neural-storyteller
  55. https://github.com/join?return_to=/ryankiros/neural-storyteller
  56. https://desktop.github.com/
  57. https://desktop.github.com/
  58. https://developer.apple.com/xcode/
  59. https://visualstudio.github.com/
  60. https://github.com/ryankiros
  61. https://github.com/ryankiros/neural-storyteller/commits?author=ryankiros
  62. https://github.com/ryankiros/neural-storyteller/commit/61e12a7a0453bdc62013c7c07b7f7c331059d360
  63. https://github.com/ryankiros/neural-storyteller/pull/5
  64. https://github.com/ryankiros/neural-storyteller/commit/61e12a7a0453bdc62013c7c07b7f7c331059d360
  65. https://github.com/ryankiros/neural-storyteller/commit/61e12a7a0453bdc62013c7c07b7f7c331059d360
  66. https://github.com/ryankiros/neural-storyteller/tree/61e12a7a0453bdc62013c7c07b7f7c331059d360
  67. https://github.com/ryankiros/neural-storyteller/tree/master/images
  68. https://github.com/ryankiros/neural-storyteller/commit/52b5635b0f3b994335fd087fe800103fae4f1a97
  69. https://github.com/ryankiros/neural-storyteller/blob/master/.gitignore
  70. https://github.com/ryankiros/neural-storyteller/blob/master/readme.md
  71. https://github.com/ryankiros/neural-storyteller/blob/master/config.py
  72. https://github.com/ryankiros/neural-storyteller/blob/master/decoder.py
  73. https://github.com/ryankiros/neural-storyteller/blob/master/embedding.py
  74. https://github.com/ryankiros/neural-storyteller/blob/master/generate.py
  75. https://github.com/ryankiros/neural-storyteller/commit/b626b22ae9e03d5acfdad08e644962a74922392c
  76. https://github.com/ryankiros/neural-storyteller/blob/master/search.py
  77. https://github.com/ryankiros/neural-storyteller/commit/cd5d8bf86312e08d0eb6cb3f89f761556703e68c
  78. https://github.com/ryankiros/neural-storyteller/blob/master/skipthoughts.py
  79. https://github.com/ryankiros/neural-storyteller/blob/master/images/ex1.jpg
  80. http://samim.io/
  81. https://medium.com/@samim/generating-stories-about-images-d163ba41e4ed
  82. http://www.cs.toronto.edu/~rkiros/adv_l.html
  83. https://github.com/ryankiros/skip-thoughts
  84. https://github.com/ryankiros/visual-semantic-embedding
  85. https://github.com/ryankiros/skip-thoughts/tree/master/decoding
  86. http://mscoco.org/
  87. http://arxiv.org/abs/1508.06576
  88. http://www.cs.toronto.edu/~mbweb/
  89. https://github.com/ryankiros/skip-thoughts/tree/master/decoding
  90. http://www.numpy.org/
  91. http://www.scipy.org/
  92. https://github.com/lasagne/lasagne
  93. http://caffe.berkeleyvision.org/
  94. https://github.com/ryankiros/skip-thoughts
  95. https://github.com/site/terms
  96. https://github.com/site/privacy
  97. https://github.com/security
  98. https://githubstatus.com/
  99. https://help.github.com/
 100. https://github.com/contact
 101. https://github.com/pricing
 102. https://developer.github.com/
 103. https://training.github.com/
 104. https://github.blog/
 105. https://github.com/about
 106. https://github.com/ryankiros/neural-storyteller
 107. https://github.com/ryankiros/neural-storyteller

   hidden links:
 109. https://github.com/
 110. https://github.com/ryankiros/neural-storyteller
 111. https://github.com/ryankiros/neural-storyteller
 112. https://github.com/ryankiros/neural-storyteller
 113. https://help.github.com/articles/which-remote-url-should-i-use
 114. https://github.com/ryankiros/neural-storyteller#neural-storyteller
 115. https://github.com/ryankiros/neural-storyteller#how-does-it-work
 116. https://github.com/ryankiros/neural-storyteller#what-kind-of-biases-work
 117. https://github.com/ryankiros/neural-storyteller#what-can-the-decoder-be-trained-on
 118. https://github.com/ryankiros/neural-storyteller#dependencies
 119. https://github.com/ryankiros/neural-storyteller#getting-started
 120. https://github.com/ryankiros/neural-storyteller#generating-a-story
 121. https://github.com/ryankiros/neural-storyteller#generation-options
 122. https://github.com/ryankiros/neural-storyteller#reference
 123. https://github.com/
