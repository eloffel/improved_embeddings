   #[1]github [2]recent commits to sounder:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]8
     * [35]star [36]106
     * [37]fork [38]17

[39]slapbot/[40]sounder

   [41]code [42]issues 0 [43]pull requests 1 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   an intent recognizing algorithm to predict the intent of a given text.
   [47]https://slapbot.github.io/documentati   
   [48]algorithm [49]intent-prediction [50]string-manipulation
   [51]speech-recognition [52]python
     * [53]11 commits
     * [54]1 branch
     * [55]0 releases
     * [56]fetching contributors
     * [57]mit

    1. [58]python 100.0%

   (button) python
   branch: master (button) new pull request
   [59]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/s
   [60]download zip

downloading...

   want to be notified of new releases in slapbot/sounder?
   [61]sign in [62]sign up

launching github desktop...

   if nothing happens, [63]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [64]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [65]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [66]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [67]permalink
   type       name      latest commit message commit time
        failed to load latest commit information.
        [68]docs
        [69]sounder
        [70].gitignore
        [71]license.rst
        [72]manifest.in
        [73]readme.md
        [74]setup.id18
        [75]setup.py

readme.md

sounder api

   this section is dedicated to the sounder library api, which is an
   abstraction of the [76]sounder algorithm, to read the full paper
   explaining how sounder works and can be incoporated in the project as
   well as where it can be used at, kindly refer here: [77]sounder
   explained, [78]pdf version
     * [79]installation
     * [80]instantiate class
     * [81]search method
     * [82]id203 method
     * [83]filter method
     * [84]practical usage
     __________________________________________________________________

installation

   installing sounder library into your application is easy as pie with
   pip package manager, allowing you to do a simple command from your
   favorite command line as follows:
pip install sounder
     __________________________________________________________________

instantiate class

   the first and the foremost thing to do is to import the class like so.
from sounder import sounder

   and then simply instantiating the class.
sounder = sounder([['facebook', 'notifications'], ['twitter', 'notifications']])

   you can pass dataset as a positional argument(optional) to the sounder
   constructor, or set it later down the line using set_module() method
   which returns self.
sounder.set_dataset([['facebook', 'notifications'], ['twitter', 'notifications']
])

   as you can already notice, in order to use search method, the dataset
   needs to be 2 dimensional list, containing string elements.
     __________________________________________________________________

search method

   search(query, dataset=none, metaphone=false) method takes a positional
   argument(compulsory), a query which needs to be a list composed of
   string that needs to be searched through the dataset, like so.
sounder = sounder([['facebook', 'notifications'], ['twitter', 'notifications'],
['note', 'something']])
index = sounder.search(['trackbook', 'notifs'])

   search method always returns back the index which it found to be most
   probable to be identical for your given set of data. in this case index
   will equate to 0.

   this method take other optional arguments as follows:
     * dataset : it's simply the dataset, in case you don't want set
       dataset while instantiating the class, no problem just pass it as a
       another argument. though again it needs to be a double dimensional
       list.
     * metaphone : it defaults to false, resonating to the fact that you
       don't want to use metaphones in addition to the master algorithm.
       on true state, all the dataset and query is first transformed to
       metaphones and then inputted to the algorithm increasing efficiency
       in cases where input data is quite randomized or uses generic
       terms.
     __________________________________________________________________

id203 method

   id203(query, dataset=none, metaphone=false, detailed=false,
   prediction=false) method takes again a single positional argument which
   is the query that needs to be compared with the dataset. (a list
   composed of strings.), like so.
sounder = sounder([['facebook', 'notifications'], ['twitter', 'notifications'],
['note', 'something']])
chances = sounder.id203(['trackbook', 'notifs'])

   id203 method returns result depending on the optional parameters
   under given cases:
     * no optional argument passed : it returns the list the size of the
       dataset, composed of id203 that the query list is most
       probable to the dataset, resulting from a value between 0.0 to
       100.0 where 0.0 refers to nothing matches, and 100.0 to everything
       matches.
     * detailed : if detailed argument is set to true, then it returns
       back the size of the dataset in a nested list format, where the
       first element is the id203 that the query list is most
       probable to the dataset, while the second element is an another
       list the size of the ith data of dataset, consisting the
       probabiltiy that jth word of the ith data was found on the query by
       solving assignment problem, resulting from a value between 0.0 to
       100.0 where 0.0 refers to nothing matches.
     * prediction : if set to true, it returns back a dict, with keys
       chances and index suggesting which index of the dataset is most
       probable to the the given query in terms of similarity while
       chances denoting to a value between 0.0 to 100.0 where 0.0 refers
       to nothing matches.

   two other arguments that can be set are :
     * dataset : again, in case you didn't set the dataset on the
       instantiation, fear not, just pass it as an argument. one more
       thing, this time it doesn't necessarily needs to be a double
       dimensional list if you're just comparing two lists of string
       elements. like so.
  information = sounder.id203(['trackbook'], dataset=['facebook'])

   sounder basically internally map it into double dimensional list
   automatically, giving you the leverage to compare any two lists of
   words.
     * metaphones : again, it's exactly the same as for search method.
     __________________________________________________________________

filter method

   filter(query, reserved_sub_words=none) is basically a utility provided
   you to filter the stop words out of your string, for instance, "hey
   stephanie, what is the time right now?" would filter away ['hey',
   'what', 'is', 'the'] since they don't hold higher meaning, leaving
   behind key_words like ['stephanie', 'time', 'right', 'now']

   this method is just a utility to help you do the entire intent
   recognization from single library, but you're free to use any kind of
   system. it returns back a dictionary with keys such as sub_words and
   key_words, resonating to stop words found in the string and keywords
   found in it in a list form respectively.
     * reserved_sub_words : is the filter that is used to filter out the
       stop words, you can pass your own filter in the method itself or
       through using set_filter(reserved_sub_words) method which returns
       the self instance. note : make sure the filter is a dictionary of
       all the words that you consider as stop words. default is as
       follows:
  {
      "what", "where", "which", "how", "when", "who",
      "is", "are", "makes", "made", "make", "did", "do",
      "to", "the", "of", "from", "against", "and", "or",
      "you", "me", "we", "us", "your", "my", "mine", 'yours',
      "could", "would", "may", "might", "let", "possibly",
      'tell', "give", "told", "gave", "know", "knew",
      'a', 'am', 'an', 'i', 'like', 'has', 'have', 'need',
      'will', 'be', "this", 'that', "for"
  }
     __________________________________________________________________

practical usage

   [85]this algorithm is the brain of [86]stephanie, an open-source
   platform built specifically for voice-controlled application as well as
   to automate daily tasks imitating much of an virtual assistant's work.

     *    2019 github, inc.
     * [87]terms
     * [88]privacy
     * [89]security
     * [90]status
     * [91]help

     * [92]contact github
     * [93]pricing
     * [94]api
     * [95]training
     * [96]blog
     * [97]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [98]reload to refresh your
   session. you signed out in another tab or window. [99]reload to refresh
   your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/slapbot/sounder/commits/master.atom
   3. https://github.com/slapbot/sounder#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/slapbot/sounder
  32. https://github.com/join
  33. https://github.com/login?return_to=/slapbot/sounder
  34. https://github.com/slapbot/sounder/watchers
  35. https://github.com/login?return_to=/slapbot/sounder
  36. https://github.com/slapbot/sounder/stargazers
  37. https://github.com/login?return_to=/slapbot/sounder
  38. https://github.com/slapbot/sounder/network/members
  39. https://github.com/slapbot
  40. https://github.com/slapbot/sounder
  41. https://github.com/slapbot/sounder
  42. https://github.com/slapbot/sounder/issues
  43. https://github.com/slapbot/sounder/pulls
  44. https://github.com/slapbot/sounder/projects
  45. https://github.com/slapbot/sounder/pulse
  46. https://github.com/join?source=prompt-code
  47. https://slapbot.github.io/documentation/resources/algorithm/
  48. https://github.com/topics/algorithm
  49. https://github.com/topics/intent-prediction
  50. https://github.com/topics/string-manipulation
  51. https://github.com/topics/speech-recognition
  52. https://github.com/topics/python
  53. https://github.com/slapbot/sounder/commits/master
  54. https://github.com/slapbot/sounder/branches
  55. https://github.com/slapbot/sounder/releases
  56. https://github.com/slapbot/sounder/graphs/contributors
  57. https://github.com/slapbot/sounder/blob/master/license.rst
  58. https://github.com/slapbot/sounder/search?l=python
  59. https://github.com/slapbot/sounder/find/master
  60. https://github.com/slapbot/sounder/archive/master.zip
  61. https://github.com/login?return_to=https://github.com/slapbot/sounder
  62. https://github.com/join?return_to=/slapbot/sounder
  63. https://desktop.github.com/
  64. https://desktop.github.com/
  65. https://developer.apple.com/xcode/
  66. https://visualstudio.github.com/
  67. https://github.com/slapbot/sounder/tree/5bbfbed88caeb2f6757737e0483de17c0552f048
  68. https://github.com/slapbot/sounder/tree/master/docs
  69. https://github.com/slapbot/sounder/tree/master/sounder
  70. https://github.com/slapbot/sounder/blob/master/.gitignore
  71. https://github.com/slapbot/sounder/blob/master/license.rst
  72. https://github.com/slapbot/sounder/blob/master/manifest.in
  73. https://github.com/slapbot/sounder/blob/master/readme.md
  74. https://github.com/slapbot/sounder/blob/master/setup.id18
  75. https://github.com/slapbot/sounder/blob/master/setup.py
  76. https://slapbot.github.io/documentation/resources/algorithm
  77. https://slapbot.github.io/documentation/resources/algorithm
  78. https://slapbot.github.io/documentation/resources/algorithm/sounder.pdf
  79. https://github.com/slapbot/sounder#installation
  80. https://github.com/slapbot/sounder#instantiate
  81. https://github.com/slapbot/sounder#search
  82. https://github.com/slapbot/sounder#id203
  83. https://github.com/slapbot/sounder#filter
  84. https://github.com/slapbot/sounder#practical-usage
  85. https://github.com/slapbot/sounder#practical-usage
  86. https://slapbot.github.io/
  87. https://github.com/site/terms
  88. https://github.com/site/privacy
  89. https://github.com/security
  90. https://githubstatus.com/
  91. https://help.github.com/
  92. https://github.com/contact
  93. https://github.com/pricing
  94. https://developer.github.com/
  95. https://training.github.com/
  96. https://github.blog/
  97. https://github.com/about
  98. https://github.com/slapbot/sounder
  99. https://github.com/slapbot/sounder

   hidden links:
 101. https://github.com/
 102. https://github.com/slapbot/sounder
 103. https://github.com/slapbot/sounder
 104. https://github.com/slapbot/sounder
 105. https://help.github.com/articles/which-remote-url-should-i-use
 106. https://github.com/slapbot/sounder#sounder-api
 107. https://github.com/slapbot/sounder#installation
 108. https://github.com/slapbot/sounder#instantiate-class
 109. https://github.com/slapbot/sounder#search-method
 110. https://github.com/slapbot/sounder#id203-method
 111. https://github.com/slapbot/sounder#filter-method
 112. https://github.com/slapbot/sounder#practical-usage
 113. https://github.com/
