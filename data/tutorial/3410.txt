   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]google cloud platform - community
     * [9]this week in gcp
     * [10]containers
     * [11]virtualization
     * [12]platform as a service
     * [13]data
     * [14]machine learning
     * [15]iot
     * [16]more
     __________________________________________________________________

deep learning with keras on google compute engine

   [17]go to the profile of cole murray
   [18]cole murray (button) blockedunblock (button) followfollowing
   feb 13, 2017
   [1*uxfc5fcbdsl0tjg4t8psvw.png]
   inception v3 architecture

     inception, a model developed by google is a deep id98. against the
     id163 dataset (a common dataset for measuring image recognition
     performance) it performed top-5 error 3.47%.

   in this tutorial, you   ll use the pre-trained inception model to provide
   predictions on images uploaded to a web server.
   [1*_hztfenpen-jlsn9edyojw.gif]
   demo

   you   ll use:
     * keras for image prediction running on google compute engine
     * google cloud storage to store the uploaded images
     * app engine w/flask for your front-end web server.

overview

     * keras inception v3 prediction
     * deploy on compute engine w/ [19]docker & [20]google container
       registry
     * flask front-end webserver

prereqs:

     * basic machine learning understanding
     * basic flask understanding
     * google cloud sdk installed ([21]https://cloud.google.com/sdk/)

keras

     [22]keras is a high-level neural networks library, written in python
     and capable of running on top of either [23]tensorflow or
     [24]theano. it was developed with a focus on enabling fast
     experimentation. being able to go from idea to result with the least
     possible delay is key to doing good research.

   below, the inception model is loaded with keras. keras holds a cache
   directory of the models pre-trained weights. on first use, keras will
   download these weights into ~/.keras/models/.

   you   ll create a predict function with accepts a base64 encoded image
   file. inception v3 requires images to be 299 x 299. after loading the
   image, it is expanded into a vector and pre-processed.

   first, install the dependencies
$ pip install -r requirements.txt

   iframe: [25]/media/596c0c5c2fa20354e0f63ca693cf67bf?postid=a54918b0058

   iframe: [26]/media/a8a1bb9e649035eeca8b251bfdca0a16?postid=a54918b0058

serving predictions

   with the model loaded, create a web server that can accept base64
   encoded images using flask.

   iframe: [27]/media/b0b976d9e351e646f13c4f6eff0af954?postid=a54918b0058

   you now have image-recognition as a service! let   s test it out locally
   before deploying. first, start the server. then make a post request to
   the prediction service. [28]sample image
$ python main.py
(in another terminal window)
$ (echo -n '{"data": "'; base64 cat.jpg; echo '"}') |
curl -x post -h "content-type: application/json" -d @- [29]http://0.0.0.0:8080

   if everything is working correctly, you   ll see a response back
{
    predictions   : [
 {
    description   :    tiger_cat   ,
    label   :    n02123159   ,
    id203   : 55.242210626602173
 },
 {
    description   :    tabby   ,
    label   :    n02123045   ,
    id203   : 25.407189130783081
 },
 {
    description   :    egyptian_cat   ,
    label   :    n02124075   ,
    id203   : 10.042409598827362
 }
 ]
}

deployment

   you   ve got the model created and generating predictions. time to deploy
   the model to google compute engine using docker. you   ll use a few
   different technologies gunicorn, nginx, and supervisor. below, a
   dockerfile and a few configuration files will set up and serve the
   prediction api.

   after creating the docker image, you   ll push it to google container
   registry.

   for docker to copy the files correctly, structure the directory:
|____dockerfile
|____nginx.conf
|____requirements.txt
|____service
| |____main.py
| |____model.py
|____supervisord.conf

   iframe: [30]/media/e8844b4b46b843b5decc2b91b1579903?postid=a54918b0058

   iframe: [31]/media/afb8ff998864d39ac30562a14c2bde02?postid=a54918b0058

   iframe: [32]/media/eac11ecf8cf2fef0f2ed8439da6d4ccb?postid=a54918b0058

   iframe: [33]/media/ebfc5ba5051b9b017d7f133dae9ed8ae?postid=a54918b0058

   you   ve built and pushed the docker image to google container registry.
   from here, create the server and pull down the previously created
   docker image. first, you   ll enable the api

     https://console.developers.google.com/apis/api/compute_component/ove
     rview?project=project_id

$ gcloud compute firewall-rules create default-allow-http --allow=tcp:80 --targe
t-tags http-server
$ gcloud compute instances create predict-service --machine-type=n1-standard-1 -
-zone=us-central1-c --tags=http-server
$ gcloud compute ssh predict-service --zone=us-central1-c
$ curl -ssl [34]https://get.docker.com | sh
$ sudo gcloud docker pull gcr.io/project_id/predict_service:latest

   finally, run it!
$ sudo docker run -td -p 80:80 gcr.io/project_id/predict-service

   if all went well, after a short bit, you   ll have a running prediction
   service. you can use the curl command above to confirm it   s working.
   let   s build a quick front-end to visualize our predictions.
     __________________________________________________________________

google app engine front end server

   [1*am7vzkrigkvk-0gvyla3ba.png]

cloud storage

   create a bucket to upload images received from the front-end. we modify
   the permissions of the bucket to give read access to anyone on the
   internet.
$ gsutil mb gs://my-unique-bucket-identifier

   add this snippet to your project. it is an abstraction around google
   cloud storage you   ll use when uploading files. first, we   ll install our
   dependencies

   iframe: [35]/media/ff500d5d90a3e8686301739b94acc94c?postid=a54918b0058

   requirements.txt

   app engine requires libraries to be installed into a folder for
   deployment. you   ll download the gcloud storage client as well.
$ git clone [36]https://github.com/googlecloudplatform/appengine-gcs-client.git
$ pip install -r requirements.txt -t lib
$ pip install googleappenginecloudstorageclient -t lib

   iframe: [37]/media/a47b998418f418e50fc9420ea1ff4b18?postid=a54918b0058
     __________________________________________________________________

upload file & predict

   first, let   s create our config file. here, you   ll insert your project
   and storage bucket you created earlier. you   ll also need to insert your
   prediction services ipv4 address. in the networking tab, click reserve
   static instance address on our machine.
   [1*j8da1tsxx8g6mezqhxne-g.png]
   reserve static address for prediction service

   config.py
project_id = 'project_id'
max_content_length = 8 * 1024 * 1024
allowed_extensions = set(['png', 'jpg', 'jpeg', 'gif'])
prediction_service_url = 'http://your.server.ip.here:80'

   iframe: [38]/media/c51503e0b25fc0ede4cf049f214f5804?postid=a54918b0058

   app.yaml

   iframe: [39]/media/740dfd1c0d37395d9dcc47c90aa69649?postid=a54918b0058

   appengine_config.py

   below, you   ll create the front-end web server using flask. this web
   server will be deployed to google app engine.

   iframe: [40]/media/eb2978757ac2a8082aa1c24bed852651?postid=a54918b0058

   copy the below templates into /templates:

   iframe: [41]/media/178a82ecd246e5b42c99a6fddff62a22?postid=a54918b0058

   base.html

   iframe: [42]/media/98c9924a65645128515e58455ee22dab?postid=a54918b0058

   form.html

   iframe: [43]/media/8e6bfa8acde3792bce467e4d97de0f94?postid=a54918b0058

   view.html

   last step, let   s deploy to google app engine.
gcloud app deploy
     __________________________________________________________________

conclusion

   that   s it! you   ve created a flask web server that will present the user
   with a form to upload photos. these photos are uploaded to google cloud
   storage and sent to our image prediction api.

   complete code here:
   [44]colemurray/keras-inception-v3-tutorial
   contribute to keras-inception-v3-tutorial development by creating an
   account on github.github.com
git clone [45]https://github.com/colemurray/keras-inception-v3-tutorial.git --re
cursive

     if you liked the tutorial, follow & recommend!

     interested in id126s, node, android, or react? check
     out my other tutorials:

     - [46]id126s with spark on google dataproc
     - [47]deploy node to google cloud
     -[48] android impression tracking in recyclerviews
     - [49]react & flux in es6

     other places to find me:

     twitter: [50]https://twitter.com/_colemurray

     * [51]machine learning
     * [52]deep learning
     * [53]python
     * [54]docker
     * [55]cloud computing

   (button)
   (button)
   (button) 792 claps
   (button) (button) (button) 8 (button) (button)

     (button) blockedunblock (button) followfollowing
   [56]go to the profile of cole murray

[57]cole murray

   machine learning engineer | personalization @ amazon |
   [58]https://murraycole.com

     (button) follow
   [59]google cloud platform - community

[60]google cloud platform - community

   a collection of technical articles published or curated by google cloud
   platform developer advocates. the views expressed are those of the
   authors and don't necessarily reflect those of google.

     * (button)
       (button) 792
     * (button)
     *
     *

   [61]google cloud platform - community
   never miss a story from google cloud platform - community, when you
   sign up for medium. [62]learn more
   never miss a story from google cloud platform - community
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://medium.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/a54918b0058
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://medium.com/google-cloud/keras-inception-v3-on-google-compute-engine-a54918b0058&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://medium.com/google-cloud/keras-inception-v3-on-google-compute-engine-a54918b0058&source=--------------------------nav_reg&operation=register
   8. https://medium.com/google-cloud?source=logo-lo_fztqixvdcr0d---e52cf94d98af
   9. https://medium.com/google-cloud/weekly/home
  10. https://medium.com/google-cloud/tagged/kubernetes
  11. https://medium.com/google-cloud/tagged/google-compute-engine
  12. https://medium.com/google-cloud/tagged/google-app-engine
  13. https://medium.com/google-cloud/tagged/bigquery
  14. https://medium.com/google-cloud/tagged/machine-learning
  15. https://medium.com/google-cloud/tagged/iot
  16. https://cloud.google.com/blog/
  17. https://medium.com/@colemurray?source=post_header_lockup
  18. https://medium.com/@colemurray
  19. https://www.docker.com/
  20. https://cloud.google.com/container-registry/
  21. https://cloud.google.com/sdk/
  22. https://keras.io/
  23. https://github.com/tensorflow/tensorflow
  24. https://github.com/theano/theano
  25. https://medium.com/media/596c0c5c2fa20354e0f63ca693cf67bf?postid=a54918b0058
  26. https://medium.com/media/a8a1bb9e649035eeca8b251bfdca0a16?postid=a54918b0058
  27. https://medium.com/media/b0b976d9e351e646f13c4f6eff0af954?postid=a54918b0058
  28. https://files.graphiq.com/stories/t2/tiny_cat_12573_8950.jpg
  29. http://0.0.0.0:8080/
  30. https://medium.com/media/e8844b4b46b843b5decc2b91b1579903?postid=a54918b0058
  31. https://medium.com/media/afb8ff998864d39ac30562a14c2bde02?postid=a54918b0058
  32. https://medium.com/media/eac11ecf8cf2fef0f2ed8439da6d4ccb?postid=a54918b0058
  33. https://medium.com/media/ebfc5ba5051b9b017d7f133dae9ed8ae?postid=a54918b0058
  34. https://get.docker.com/
  35. https://medium.com/media/ff500d5d90a3e8686301739b94acc94c?postid=a54918b0058
  36. https://github.com/googlecloudplatform/appengine-gcs-client
  37. https://medium.com/media/a47b998418f418e50fc9420ea1ff4b18?postid=a54918b0058
  38. https://medium.com/media/c51503e0b25fc0ede4cf049f214f5804?postid=a54918b0058
  39. https://medium.com/media/740dfd1c0d37395d9dcc47c90aa69649?postid=a54918b0058
  40. https://medium.com/media/eb2978757ac2a8082aa1c24bed852651?postid=a54918b0058
  41. https://medium.com/media/178a82ecd246e5b42c99a6fddff62a22?postid=a54918b0058
  42. https://medium.com/media/98c9924a65645128515e58455ee22dab?postid=a54918b0058
  43. https://medium.com/media/8e6bfa8acde3792bce467e4d97de0f94?postid=a54918b0058
  44. https://github.com/colemurray/keras-inception-v3-tutorial
  45. https://github.com/colemurray/keras-inception-v3-tutorial
  46. https://medium.com/google-cloud/recommendation-systems-with-spark-on-google-dataproc-bbb276c0dafd#.bjfwbbt1s
  47. https://medium.com/google-cloud/node-to-google-cloud-compute-engine-in-25-minutes-7188830d884e#.uzpd6tz7f
  48. https://medium.com/@colemurray/how-to-track-impressions-e371f0a91f0#.dopjf841m
  49. https://medium.com/@colemurray/react-flux-in-es6-pt-1-2-e2a7b4aa074e#.lttn8owu2
  50. https://twitter.com/_colemurray
  51. https://medium.com/tag/machine-learning?source=post
  52. https://medium.com/tag/deep-learning?source=post
  53. https://medium.com/tag/python?source=post
  54. https://medium.com/tag/docker?source=post
  55. https://medium.com/tag/cloud-computing?source=post
  56. https://medium.com/@colemurray?source=footer_card
  57. https://medium.com/@colemurray
  58. https://murraycole.com/
  59. https://medium.com/google-cloud?source=footer_card
  60. https://medium.com/google-cloud?source=footer_card
  61. https://medium.com/google-cloud
  62. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  64. https://github.com/colemurray/keras-inception-v3-tutorial
  65. https://medium.com/p/a54918b0058/share/twitter
  66. https://medium.com/p/a54918b0058/share/facebook
  67. https://medium.com/p/a54918b0058/share/twitter
  68. https://medium.com/p/a54918b0058/share/facebook
