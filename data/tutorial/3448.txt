   #[1]jay alammar - visualizing machine learning one concept at a time

   [2][1007956?s=460&v=4]

[3]jay alammar

   visualizing machine learning one concept at a time

   [4]blog [5]about

a visual and interactive guide to the basics of neural networks

   discussions: [6]hacker news (63 points, 8 comments), [7]reddit
   r/programming (312 points, 37 comments)
   [nns_2_variables.png]

   update: part 2 is now live: [8]a visual and interactive look at basic
   neural network math

motivation

   i   m not a machine learning expert. i   m a software engineer by training
   and i   ve had little interaction with ai. i had always wanted to delve
   deeper into machine learning, but never really found my    in   . that   s
   why when google open sourced tensorflow in november 2015, i got super
   excited and knew it was time to jump in and start the learning journey.
   not to sound dramatic, but to me, it actually felt kind of like
   prometheus handing down fire to mankind from the mount olympus of
   machine learning. in the back of my head was the idea that the entire
   field of big data and technologies like hadoop were vastly accelerated
   when google researchers released their map reduce paper. this time it   s
   not a paper     it   s the actual software they use internally after years
   and years of evolution.

   so i started learning what i can about the basics of the topic, and saw
   the need for gentler resources for people with no experience in the
   field. this is my attempt at that.

start here

   let   s start with a simple example. say you   re helping a friend who
   wants to buy a house. she was quoted $400,000 for a 2000 sq ft house
   (185 meters). is this a good price or not?

   it   s not easy to tell without a frame of reference. so you ask your
   friends who have bought houses in that same neighborhoods, and you end
   up with three data points:
   area (sq ft) (x) price (y)
   2,104            399,900
   1,600            329,900
   2,400            369,000

   personally, my first instinct would be to get the average price per sq
   ft. that comes to $180 per sq ft.

   welcome to your first neural network! now it   s not quite at siri level
   yet, but now you know the fundamental building block. and it looks like
   this:
   [simple_nn_1.png]

   diagrams like this show you the structure of the network and how it
   calculates a prediction. the calculation starts from the input node at
   the left. the input value flows to the right. it gets multiplied by the
   weight and the result becomes our output.

   multiplying 2,000 sq ft by 180 gives us $360,000. that   s all there is
   to it at this level. calculating the prediction is simple
   multiplication. but before that, we needed to think about the weight
   we   ll be multiplying by. here we started with an average, later we   ll
   look at better algorithms that can scale as we get more inputs and more
   complicated models. finding the weight is our    training    stage. so
   whenever you hear of someone    training    a neural network, it just means
   finding the weights we use to calculate the prediction.
   [nns_formula_no_bias.png]

   this is a form of prediction. this is a simple predictive model that
   takes an input, does a calculation, and gives an output (since the
   output can be of continuous values, the technical name for what we have
   would be a    regression model   )

   let us visualize this process (for simplicity, let   s switch our price
   unit from $1 to $1000. now our weight is 0.180 rather than 180):

harder, better, faster, stronger

   can we do better than estimate the price based on the average of our
   data points? let   s try. let   s first define what it means to be better
   in this scenario. if we apply our model to the three data points we
   have, how good of a job would it do?

   that   s quite a bit of yellow. yellow is bad. yellow is error. we want
   to shrink yellow as much as we can.
   area (x) price ($1000) (y_) prediction (y) y_-y (y_-y)  
   2,104    399.9              379            21   449
   1,600    329.9              288            42   1756
   2,400    369                432            -63  3969
                                          average: 2,058

   here we can see the actual price value, the predicted price value, and
   the difference between them. then we   ll need to average these
   differences so we have a number that tells us how much error there is
   in this prediction model. the problem is, the 3rd row has -63 as its
   value. we have to deal with this negative value if we want to use the
   difference between the prediction and price as our error measuring
   stick. that   s one reason why we introduce an additional column that
   shows the error squared, thus getting rid of the negative value.

   this is now our definition of doing better     a better model is one that
   has less error. error is measured as the average of the errors for each
   point in our data set. for each point, the error is measured by the
   difference between the actual value and the predicted value, raised to
   the power of 2. this is called [9]mean square error. using it as a
   guide to train our model makes it our id168 (also, cost
   function).

   now that we defined our measuring stick for what makes a better model,
   let   s experiment with a couple more weight values and compare them with
   our average pick:

   we can't improve much on the model by varying the weight any more. but
   if we add a bias we can find values that improve the model.

   our lines can better approximate our values now that we have this b
   value added to the line formula. in this context, we call it a    bias   .
   this makes our neural network look like this:
   [nns_bias.png]

   we can generalize it by saying that a neural network with one input and
   one output (spoiler warning: and no hidden layers) looks like this:
   [nns_bias_2.png]

   in this graph, w and b are values we find during the training process.
   x is the input we plug into the formula (area in sq ft in our example).
   y is the predicted price.

   calculating a prediction now uses this formula:
   [nns_formula.png]

   so our current model calculates predictions by plugging in the area of
   house as x in this formula:
   [nns_formula_ex.png]

train your dragon

   how about you take a crack at training our toy neural network? minimize
   the id168 by tweaking the weight and bias dials. can you get an
   error value below 799?
   error

   weight 0
   bias   0

automation

   congratulations on manually training your first neural network! let   s
   look at how to automate this training process. below is another example
   with an additional autopilot-like functionality. these are the gd step
   buttons. they use an algorithm called    id119    to try to step
   towards the correct weight and bias values that minimize the loss
   function.
   [button input] (not implemented)_______ [button input] (not
   implemented)____________ [button input] (not implemented)_____________
   error

   weight 0
   bias   0

   the two new graphs are to help you track the error values as you fiddle
   with the parameters (weight and bias) of the model. it   s important to
   keep track of the error as the training process is all about reducing
   this error as much possible.

   how does id119 know where its next step should be? calculus.
   you see, knowing the function we   re minimizing (our id168, the
   average of (y_ - y)   for all our data points), and knowing the current
   inputs into it (the current weight and bias), the derivatives of the
   id168 tell us which direction to nudge w and b in order to
   minimize the error.

   learn more about id119 and how to use it to calculate the
   new weights & bias in the first lectures of coursera   s [10]machine
   learning course.

and then there were two

   is the size of the house the only variable that goes into how much it
   costs? obviously there are many other factors. let   s add another
   variable and see how we can adjust our neural network to it.

   say your friend does a bit more research and finds a bunch more data
   points. she also finds out how many bathrooms each house has:
   area (sq ft) (x1) bathrooms (x2) price (y)
   2,104             3              399,900
   1,600             3              329,900
   2,400             3              369,000
   1,416             2              232,000
   3,000             4              539,900
   1,985             4              299,900
   1,534             3              314,900
   1,427             3              198,999
   1,380             3              212,000
   1,494             3              242,500

   our neural network with two variables looks like this:
   [nns_2_variables.png]

   we now have to find two weights (one for each input) and one bias to
   create our new model.

   calculating y looks like this:
   [nns_formula_two_variables.png]

   but how do we find w1 and w2? this is a little trickier than when we
   only had to worry about one weight value. how much does having an extra
   bathroom change how we predict the value of a home?

   take a stab at finding the right weights and bias. you will start here
   to see the complexity we start getting into as the number of our inputs
   increase. we start losing the ability to create simple 2d shapes that
   allow us to visualize the model at a glance. instead, we   ll have to
   mainly rely on how the error value is evolving as we tweak our model
   parameters.
   [button input] (not implemented)_______ [button input] (not
   implemented)____________ [button input] (not implemented)_____________
   error

   weight #1 0
   weight #2 0
   bias      0

   our trusty id119 is here to help once again. it still is
   valuable in helping us find the right weights and bias.

features

   now that you   ve seen neural networks with one and two features, you can
   sort of figure out how to add additional features and use them to
   calculate your predictions. the number of weights will continue to
   grow, and our implementation of id119 will have to be
   tweaked as we add each feature so that it can update the new weights
   associated with the new feature.

   it   s important to note here that we don   t blindly feed the network
   everything we know about our examples. we have to be selective about
   which features we feed the model. feature selection/processing is an
   entire discipline with its own set of best practices and
   considerations. if you want to see an example of the process of
   examining a dataset to choose which features to feed a prediction
   model, check out [11]a journey through titanic. it   s a notebook where
   [12]omar el gabry narrates his process for solving kaggle   s titanic
   challenge. kaggle makes available the passenger   s manifest of the
   titanic including data like name, sex, age, cabin, and whether the
   person survived or not. the challenge is to build a model that predicts
   whether a person survived or not given their other information.

classification

   let   s continue to tweak our example. assume your friend gives you a
   list of houses. this time, she has labeled which ones she thinks have a
   good size and number of bathrooms:
   area (sq ft) (x1) bathrooms (x2) label (y)
   2,104             3              good
   1,600             3              good
   2,400             3              good
   1,416             2              bad
   3,000             4              bad
   1,985             4              good
   1,534             3              bad
   1,427             3              good
   1,380             3              good
   1,494             3              good

   she needs you to use this to create a model to predict whether she
   would like a house or not given its size and number of bathrooms. you
   will use this list above to build the model, then she will use the
   model to classify many other houses. one additional change in the
   process, is that she has another list of 10 houses she has labeled, but
   she   s keeping it from you. that other list would be used to evaluate
   your model after you   ve trained it     thus trying to ensure your model
   grasps the conditions that actually make her like the features of the
   house.

   the neural networks we   ve been toying around with until now are all
   doing    regression        they calculate and output a    continuous    value
   (the output can be 4, or 100.6, or 2143.342343). in practice, however,
   neural networks are more often used in    classification    type problems.
   in these problems, the neural network   s output has to be from a set of
   discrete values (or    classes   ) like    good    or    bad   . how this works out
   in practice, is that we   ll have a model that will say that it   s 75%
   sure that a house is    good    rather than just spit out    good    or    bad   .
   [android_tensorflow_classifier_results.jpg] the tensorflow app i
   discussed in my [13]previous post is a good example for a
   classification model in practice.

   one way we can transform the network we   ve seen into a classification
   network is to have it output two values     one for each class (our
   classes now being    good    and    bad   ). we then pass these values through
   an operation called    [14]softmax   . the output of softmax is the
   id203 of each class. for example, say that layer of the network
   outputs 2 for    good    and 4 for    bad   , if we feed [2, 4] to softmax, it
   will return [0.11, 0.88] as the output. which translates the values to
   say the network is 88% sure that the inputted value is    bad    and our
   friend would not like that house.

   softmax takes an array and outputs an array of the same length. notice
   that its outputs are all positive and sum up to 1     which is useful
   when we   re outputting a id203 value. also notice that even though
   4 is double 2, its id203 is not only double, but is eight times
   that of 2. this is a useful property that exaggerates the difference in
   output thus improving our training process.
                                output
   softmax([ 1 ])        [ 1 ]
   softmax([ 1, 1 ])     [ 0.5, 0.5 ]
   softmax([ 0, 1 ])     [ 0.26, 0.73 ]
   softmax([ 2, 4 ])     [ 0.11, 0.88 ]
   softmax([ 5, 10 ])    [ 0.007, 0.993 ]
   softmax([ -1, 0, 1 ]) [ 0.09, 0.24, 0.66 ]
   softmax([ 1, 2, 4 ])  [ 0.04, 0.11, 0.84 ]

   as you can see in the last two rows, softmax extends to any number of
   inputs. so now if our friend adds a third label (say    good, but i   ll
   have to airbnb one room   ), softmax scales to accomedate that change.

   take a second to explore the shape of the network as you vary the
   number of features (x1, x2, x3   etc) (which can be area, number of
   bathrooms, price, proximity to school/work   etc) and vary the number of
   classes (y1, y2, y3   etc) (which can be    too expensive   ,    good deal   ,
      good if i airbnb   ,    too small   ):
   features (x):
   (button) 2___________________ (button)
   classes (y):
   (button) 2___________________ (button)

   you can see an example of how to create and train this network using
   tensorflow in [15]this notebook i created to accompany this post.

true motivation

   if you have reached this far, i have to reveal to you another
   motivation of mine to write this post. this post is meant as an even
   gentler intro to tensorflow tutorials. if you start working through
   [16]mnist for ml beginners now, and come across this graph:
   [softmax-regression-scalargraph.png] i wrote this post to prepare
   people without machine learning experience for this graph in the
   tensorflow introductory tutorial. that's why i simulated its visual
   style.

   i hope you would feel prepared and that you have an understanding of
   this system and how it works. if you want to start tinkering with code,
   feel free to pick up from the intro [17]tutorial and teach a neural
   network how to detect handwritten digits.

   you should also continue your education by learning the theoretical and
   mathematical underpinnings of the concepts we discussed here. good
   questions to ask now include:
     * what other kinds of cost functions exist? which are better for
       which applications?
     * what   s the algorithm to actually calculate new weights using
       id119?
     * what are the applications for machine learning in the fields you   re
       already knowledgeable about? what new magic can you wield by mixing
       this spell with others in your spell book?

   great learning resources include:
     * coursera   s [18]machine learning course by [19]andrew ng. this is
       the one i started with. starts with regression then moves to
       classification and neural networks.
     * coursera   s [20]neural networks for machine learning by [21]geoffrey
       hinton. more focused on neural networks and its visual
       applications.
     * stanford   s [22]cs231n: convolutional neural networks for visual
       recognition by [23]andrej karpathy. it   s interesting to see some
       advanced concepts and the state of the art in visual recognition
       using deep neural networks.
     * the [24]neural network zoo is a great resource to learn more about
       the different types of neural networks.

acknowledgements

   thanks to [25]yasmine alfouzan, [26]ammar alammar, [27]khalid alnuaim,
   [28]fahad alhazmi, [29]mazen melibari, and [30]hadeel al-negheimish for
   their assistance in reviewing previous versions of this post.

   please contact me on [31]twitter with any corrections or feedback.
   written on december 14, 2016

subscribe to get notified about upcoming posts by email

   email address ____________________
   ____________________
   subscribe

references

   visible links
   1. https://jalammar.github.io/feed.xml
   2. https://jalammar.github.io/
   3. https://jalammar.github.io/
   4. https://jalammar.github.io/
   5. https://jalammar.github.io/about
   6. https://news.ycombinator.com/item?id=13183171
   7. https://www.reddit.com/r/programming/comments/5igdix/a_visual_and_interactive_guide_to_the_basics_of/
   8. https://jalammar.github.io/feedforward-neural-networks-visual-interactive/
   9. http://mste.illinois.edu/patel/amar430/meansquare.html
  10. https://www.coursera.org/learn/machine-learning
  11. https://www.kaggle.com/omarelgabry/titanic/a-journey-through-titanic
  12. https://twitter.com/omar_elgabry
  13. https://jalammar.github.io/supercharging-android-apps-using-tensorflow/
  14. https://rasbt.github.io/mlxtend/user_guide/classifier/softmaxregression/
  15. https://github.com/jalammar/simpletensorflowclassificationexample/blob/master/basic classification example with tensorflow.ipynb
  16. https://www.tensorflow.org/versions/r0.10/tutorials/mnist/beginners/index.html
  17. https://www.tensorflow.org/versions/r0.10/tutorials/mnist/beginners/index.html
  18. https://www.coursera.org/learn/machine-learning
  19. https://twitter.com/andrewyng
  20. https://www.coursera.org/learn/neural-networks
  21. https://en.wikipedia.org/wiki/geoffrey_hinton
  22. https://www.youtube.com/watch?v=g-pvxujd6qg&list=plljy-ebtnft6eumxfyrinrs07mcwn5uia
  23. https://twitter.com/karpathy
  24. http://www.asimovinstitute.org/neural-network-zoo/
  25. https://www.linkedin.com/in/yasmine-alfouzan-b05ba317
  26. https://twitter.com/a3ammar
  27. https://www.linkedin.com/in/khalidalnuaim
  28. https://twitter.com/fahd09
  29. https://www.linkedin.com/in/mkhdev
  30. https://www.linkedin.com/in/hadeel-al-negheimish-4a73abb3
  31. https://twitter.com/jalammar

   hidden links:
  33. https://github.com/jalammar
  34. https://www.linkedin.com/in/jalammar
  35. https://www.twitter.com/jalammar
