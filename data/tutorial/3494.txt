   #[1]analytics vidhya    feed [2]analytics vidhya    comments feed
   [3]analytics vidhya    ultimate guide to understand & implement natural
   language processing (with codes in python) comments feed [4]alternate
   [5]alternate

   iframe: [6]//googletagmanager.com/ns.html?id=gtm-mpsm42v

   [7]new certified ai & ml blackbelt program (beginner to master) -
   enroll today @ launch offer (coupon: blackbelt10)

   (button) search______________
     * [8]learn
          + [9]blog archive
               o [10]machine learning
               o [11]deep learning
               o [12]career
               o [13]stories
          + [14]datahack radio
          + [15]infographics
          + [16]training
          + [17]learning paths
               o [18]sas business analyst
               o [19]learn data science on r
               o [20]data science in python
               o [21]data science in weka
               o [22]data visualization with tableau
               o [23]data visualization with qlikview
               o [24]interactive data stories with d3.js
          + [25]glossary
     * [26]engage
          + [27]discuss
          + [28]events
          + [29]datahack summit 2018
          + [30]datahack summit 2017
          + [31]student datafest
          + [32]write for us
     * [33]compete
          + [34]hackathons
     * [35]get hired
          + [36]jobs
     * [37]courses
          + [38]id161 using deep learning
          + [39]natural language processing using python
          + [40]introduction to data science
          + [41]microsoft excel
          + [42]more courses
     * [43]contact

     *
     *
     *
     *

     * [44]home
     * [45]blog archive
     * [46]trainings
     * [47]discuss
     * [48]datahack
     * [49]jobs
     * [50]corporate

     *

   [51]analytics vidhya - learn everything about analytics

learn everything about analytics

   [52][black-belt-2.gif]
   [53][black-belt-2.gif]
   [54][black-belt-2.gif]
   (button) search______________

   [55]analytics vidhya - learn everything about analytics
     * [56]learn
          + [57]blog archive
               o [58]machine learning
               o [59]deep learning
               o [60]career
               o [61]stories
          + [62]datahack radio
          + [63]infographics
          + [64]training
          + [65]learning paths
               o [66]sas business analyst
               o [67]learn data science on r
               o [68]data science in python
               o [69]data science in weka
               o [70]data visualization with tableau
               o [71]data visualization with qlikview
               o [72]interactive data stories with d3.js
          + [73]glossary
     * [74]engage
          + [75]discuss
          + [76]events
          + [77]datahack summit 2018
          + [78]datahack summit 2017
          + [79]student datafest
          + [80]write for us
     * [81]compete
          + [82]hackathons
     * [83]get hired
          + [84]jobs
     * [85]courses
          + [86]id161 using deep learning
          + [87]natural language processing using python
          + [88]introduction to data science
          + [89]microsoft excel
          + [90]more courses
     * [91]contact

   [92]home [93]machine learning [94]ultimate guide to understand &
   implement natural language processing (with codes in python)

   [95]machine learning[96]nlp[97]python

ultimate guide to understand & implement natural language processing (with
codes in python)

   [98]shivam bansal, january 12, 2017

introduction

   according to industry estimates, only 21% of the available data is
   present in structured form. data is being generated as we speak, as we
   tweet, as we send messages on whatsapp and in various other activities.
   majority of this data exists in the textual form, which is highly
   unstructured in nature.

   few notorious examples include     tweets / posts on social media, user
   to user chat conversations, news, blogs and articles, product or
   services reviews and patient records in the healthcare sector. a few
   more recent ones includes chatbots and other voice driven bots.

   despite having high dimension data, the information present in it is
   not directly accessible unless it is processed (read and understood)
   manually or analyzed by an automated system.

   in order to produce significant and actionable insights from text data,
   it is important to get acquainted with the techniques and principles of
   [99]natural language processing (nlp).

   so, if you plan to create chatbots this year, or you want to use the
   power of unstructured text, this guide is the right starting point.
   this guide unearths the concepts of natural language processing, its
   techniques and implementation. the aim of the article is to teach the
   concepts of natural language processing and apply it on real data set.
   moreover, we also have a video based [100]course on nlp with 3 real
   life projects.

   [image-6.png]


table of contents

    1. introduction to nlp
    2. text preprocessing
          + noise removal
          + lexicon id172
               o lemmatization
               o id30
          + object standardization
    3. text to features (feature engineering on text data)
          + syntactical parsing
               o dependency grammar
               o id52
          + entity parsing
               o phrase detection
               o id39
               o topic modelling
               o id165s
          + statistical features
               o tf     idf
               o frequency / density features
               o readability features
          + id27s
    4. important tasks of nlp
          + text classification
          + text matching
               o levenshtein distance
               o phonetic matching
               o flexible string matching
          + coreference resolution
          + other problems
    5. important nlp libraries


1. introduction to natural language processing

   nlp is a branch of data science that consists of systematic processes
   for analyzing, understanding, and deriving information from the text
   data in a smart and efficient manner. by utilizing nlp and its
   components, one can organize the massive chunks of text data, perform
   numerous automated tasks and solve a wide range of problems such as    
   id54, machine translation, id39,
   relationship extraction, id31, id103, and
   topic segmentation etc.

   before moving further, i would like to explain some terms that are used
   in the article:
     * id121     process of converting a text into tokens
     * tokens     words or entities present in the text
     * text object     a sentence or a phrase or a word or an article


   steps to install nltk and its data:

   install pip: run in terminal:
    sudo easy_install pip

   install nltk: run in terminal :
    sudo pip install -u nltk

   download nltk data: run python shell (in terminal) and write the
   following code:
```
import nltk  nltk.download() ```

   follow the instructions on screen and download the desired package or
   collection. other libraries can be directly installed using pip.


2. text preprocessing

   since, text is the most unstructured form of all the available data,
   various types of noise are present in it and the data is not readily
   analyzable without any pre-processing. the entire process of cleaning
   and standardization of text, making it noise-free and ready for
   analysis is known as text preprocessing.

   it is predominantly comprised of three steps:
     * noise removal
     * lexicon id172
     * object standardization

   the following image shows the architecture of text preprocessing
   pipeline.

   [image-1.png]

2.1 noise removal

   any piece of text which is not relevant to the context of the data and
   the end-output can be specified as the noise.

   for example     language stopwords (commonly used words of a language    
   is, am, the, of, in etc), urls or links, social media entities
   (mentions, hashtags), punctuations and industry specific words. this
   step deals with removal of all types of noisy entities present in the
   text.

   a general approach for noise removal is to prepare a dictionary of
   noisy entities, and iterate the text object by tokens (or by words),
   eliminating those tokens which are present in the noise dictionary.

   following is the python code for the same purpose.
```

# sample code to remove noisy words from a text

noise_list = ["is", "a", "this", "..."]
def _remove_noise(input_text):
    words = input_text.split()
    noise_free_words = [word for word in words if word not in noise_list]
    noise_free_text = " ".join(noise_free_words)
    return noise_free_text

_remove_noise("this is a sample text")
>>> "sample text"
```

   another approach is to use the id157 while dealing with
   special patterns of noise. we have explained id157 in
   detail in one of our [101]previous article. following python code
   removes a regex pattern from the input text:
```

# sample code to remove a regex pattern
import re

def _remove_regex(input_text, regex_pattern):
    urls = re.finditer(regex_pattern, input_text)
    for i in urls:
        input_text = re.sub(i.group().strip(), '', input_text)
    return input_text

regex_pattern = "#[\w]*"

_remove_regex("remove this #hashtag from analytics vidhya", regex_pattern)
>>> "remove this  from analytics vidhya"

```


2.2 lexicon id172

   another type of textual noise is about the multiple representations
   exhibited by single word.

   for example        play   ,    player   ,    played   ,    plays    and    playing    are the
   different variations of the word        play   , though they mean different
   but contextually all are similar. the step converts all the disparities
   of a word into their normalized form (also known as lemma).
   id172 is a pivotal step for feature engineering with text as it
   converts the high dimensional features (n different features) to the
   low dimensional space (1 feature), which is an ideal ask for any ml
   model.

   the most common lexicon id172 practices are :
     * id30:  id30 is a rudimentary rule-based process of
       stripping the suffixes (   ing   ,    ly   ,    es   ,    s    etc) from a word.
     * lemmatization: lemmatization, on the other hand, is an organized &
       step by step procedure of obtaining the root form of the word, it
       makes use of vocabulary (dictionary importance of words) and
       morphological analysis (word structure and grammar relations).

   below is the sample code that performs lemmatization and id30 using
   python   s popular library     nltk.
```

from nltk.stem.id138 import id138lemmatizer
lem = id138lemmatizer()

from nltk.stem.porter import porterstemmer
stem = porterstemmer()

word = "multiplying"
lem.lemmatize(word, "v")
>> "multiply"
stem.stem(word)
>> "multipli"

```


2.3 object standardization

   text data often contains words or phrases which are not present in any
   standard lexical dictionaries. these pieces are not recognized by
   search engines and models.

   some of the examples are     acronyms, hashtags with attached words, and
   colloquial slangs. with the help of id157 and manually
   prepared data dictionaries, this type of noise can be fixed, the code
   below uses a dictionary lookup method to replace social media slangs
   from a text.
```
lookup_dict = {'rt':'retweet', 'dm':'direct message', "awsm" : "awesome", "luv"
:"love", "..."}
def _lookup_words(input_text):
    words = input_text.split()
    new_words = []
    for word in words:
        if word.lower() in lookup_dict:
            word = lookup_dict[word.lower()]
        new_words.append(word) new_text = " ".join(new_words)
        return new_text

_lookup_words("rt this is a retweeted tweet by shivam bansal")
>> "retweet this is a retweeted tweet by shivam bansal"

```

   apart from three steps discussed so far, other types of text
   preprocessing includes encoding-decoding noise, id131, and
   id147 etc. the detailed article about preprocessing and
   its methods is given in one of my previous [102]article.


3.text to features (feature engineering on text data)

   to analyse a preprocessed data, it needs to be converted into features.
   depending upon the usage, text features can be constructed using
   assorted techniques     syntactical parsing, entities / id165s /
   word-based features, statistical features, and id27s. read on
   to understand these techniques in detail.

3.1 syntactic parsing

   syntactical parsing invol ves the analysis of words in the sentence for
   grammar and their arrangement in a manner that shows the relationships
   among the words. dependency grammar and part of speech tags are the
   important attributes of text syntactics.

   dependency trees     sentences are composed of some words sewed together.
   the relationship among the words in a sentence is determined by the
   basic dependency grammar. dependency grammar is a class of syntactic
   text analysis that deals with (labeled) asymmetrical binary relations
   between two lexical items (words). every relation can be represented in
   the form of a triplet (relation, governor, dependent). for example:
   consider the sentence        bills on ports and immigration were submitted
   by senator brownback, republican of kansas.    the relationship among the
   words can be observed in the form of a tree representation as shown:

   [image-2.png] the tree shows that    submitted    is the root word of this
   sentence, and is linked by two sub-trees (subject and object subtrees).
   each subtree is a itself a dependency tree with relations such as    
   (   bills    <->    ports    <by>    proposition    relation), (   ports    <->
      immigration    <by>    conjugation    relation).

   this type of tree, when parsed recursively in top-down manner gives
   grammar relation triplets as output which can be used as features for
   many nlp problems like entity wise id31, actor & entity
   identification, and text classification. the python wrapper
   [103]stanfordcorenlp (by stanford nlp group, only commercial license)
   and nltk dependency grammars can be used to generate dependency trees.

   id52     apart from the grammar relations, every word
   in a sentence is also associated with a part of speech (pos) tag
   (nouns, verbs, adjectives, adverbs etc). the pos tags defines the usage
   and function of a word in the sentence. h ere is a list of all possible
   pos-tags defined by pennsylvania university. following code using nltk
   performs id52 annotation on input text. (it provides several
   implementations, the default one is id88 tagger)
```
from nltk import word_tokenize, pos_tag
text = "i am learning natural language processing on analytics vidhya"
tokens = word_tokenize(text)
print pos_tag(tokens)
>>> [('i', 'prp'), ('am', 'vbp'), ('learning', 'vbg'), ('natural', 'nnp'),('lang
uage', 'nnp'),
('processing', 'nnp'), ('on', 'in'), ('analytics', 'nnp'),('vidhya', 'nnp')]
```

   id52 is used for many important purposes in nlp:

   a.id51: some language words have multiple meanings
   according to their usage. for example, in the two sentences below:

   i.    please book my flight for delhi   

   ii.    i am going to read this book in the flight   

      book    is used with different context, however the part of speech tag
   for both of the cases are different. in sentence i, the word    book    is
   used as v erb, while in ii it is used as no un. ([104]lesk algorithm is
   also us ed for similar purposes)

   b.improving word-based features: a learning model could learn different
   contexts of a word when used word as the features, however if the part
   of speech tag is linked with them, the context is preserved, thus
   making strong features. for example:

   sentence -   book my flight, i will read this book   

   tokens     (   book   , 2), (   my   , 1), (   flight   , 1), (   i   , 1), (   will   , 1),
   (   read   , 1), (   this   , 1)

   tokens with pos     (   book_vb   , 1), (   my_prp$   , 1), (   flight_nn   , 1),
   (   i_prp   , 1), (   will_md   , 1), (   read_vb   , 1), (   this_dt   , 1),
   (   book_nn   , 1)

   c. id172 and lemmatization: pos tags are the basis of
   lemmatization process for converting a word to its base form (lemma).

   d.efficient stopword removal : p os tags are also useful in efficient
   removal of stopwords.

   for example, there are some tags which always define the low frequency
   / less important words of a language. for example: (in        within   ,
      upon   ,    except   ), (cd        one   ,   two   ,    hundred   ), (md        may   ,    mu st   
   etc)


3.2 entity extraction (entities as features)

   entities are defined as the most important chunks of a sentence     noun
   phrases, verb phrases or both. entity detection algorithms are
   generally ensemble models of rule based parsing, dictionary lookups,
   id52 and id33. the applicability of entity
   detection can be seen in the automated id70, content analyzers and
   consumer insights.

     [image-3.png]

   topic modelling & id39 are the two key entity
   detection methods in nlp.

a. id39 (ner)

   the process of detecting the named entities such as person names,
   location names, company names etc from the text is called as ner. for
   example :

   sentence     sergey brin, the manager of google inc. is walking in the
   streets of new york.

   named entities      (    person    :    sergey brin    ), (   org    :    google
   inc.   ), (   location    :    new york   )

   a typical ner model consists of three blocks:

   noun phrase identification: this step deals with extracting all the
   noun phrases from a text using id33 and part of speech
   tagging.

   phrase classification: this is the classification step in which all the
   extracted noun phrases are classified into respective categories
   (locations, names etc). google maps api provides a good path to
   disambiguate locations, then, the open databases from dbpedia,
   wikipedia can be used to identify person names or company names. apart
   from this, one can curate the lookup tables and dictionaries by
   combining information from different sources.

   entity disambiguation: sometimes it is possible that entities are
   misclassified, hence creating a validation layer on top of the results
   is useful. use of id13s can be exploited for this purposes.
   the popular id13s are     google id13, ibm watson
   and wikipedia.


b. id96

   id96 is a process of automatically identifying the topics
   present in a text corpus, it derives the hidden patterns among the
   words in the corpus in an unsupervised manner. topics are defined as    a
   repeating pattern of co-occurring terms in a corpus   . a good topic
   model results in        health   ,    doctor   ,    patient   ,    hospital    for a
   topic     healthcare, and    farm   ,    crops   ,    wheat    for a topic    
      farming   .

   id44 (lda) is the most popular topic modelling
   technique, following is the code to implement id96 using lda
   in python. for a detailed explanation about its working and
   implementation, check the complete article [105]here.
```
doc1 = "sugar is bad to consume. my sister likes to have sugar, but not my fathe
r."
doc2 = "my father spends a lot of time driving my sister around to dance practic
e."
doc3 = "doctors suggest that driving may cause increased stress and blood pressu
re."
doc_complete = [doc1, doc2, doc3]
doc_clean = [doc.split() for doc in doc_complete]

import gensim from gensim
import corpora

# creating the term dictionary of our corpus, where every unique term is assigne
d an index.
dictionary = corpora.dictionary(doc_clean)

# converting list of documents (corpus) into document term matrix using dictiona
ry prepared above.
doc_term_matrix = [dictionary.doc2bow(doc) for doc in doc_clean]

# creating the object for lda model using gensim library
lda = gensim.models.ldamodel.ldamodel

# running and training lda model on the document term matrix
ldamodel = lda(doc_term_matrix, num_topics=3,  word = dictionary, passes=50)

# results
print(ldamodel.print_topics())

```


c.  id165s as features

   a combination of n words together are called id165s. n grams (n > 1)
   are generally more informative as compared to words (unigrams) as
   features. also, bigrams (n = 2) are considered as the most important
   features of all the others. the following code generates bigram of a
   text.
```
def generate_ngrams(text, n):
    words = text.split()
    output = []
    for i in range(len(words)-n+1):
        output.append(words[i:i+n])
    return output

>>> generate_ngrams('this is a sample text', 2)
# [['this', 'is'], ['is', 'a'], ['a', 'sample'], , ['sample', 'text']]
```


3.3 statistical features

   text data can also be quantified directly into numbers using several
   techniques described in this section:

a.  term frequency     inverse document frequency (tf     idf)

   tf-idf is a weighted model commonly used for information retrieval
   problems. it aims to convert the text documents into vector models on
   the basis of occurrence of words in the documents without taking
   considering the exact ordering. for example     let say there is a
   dataset of n text documents, in any document    d   , tf and idf will be
   defined as    

   term frequency (tf)     tf for a term    t    is defined as the count of a
   term    t    in a document    d   

   inverse document frequency (idf)     idf for a term is defined as
   logarithm of ratio of total documents available in the corpus and
   number of documents containing the term t.

   tf . idf     tf idf formula gives the relative importance of a term in a
   corpus (list of documents), given by the following formula below.
   following is the code using python   s scikit learn package to convert a
   text into tf idf vectors:

   [image-4.png]
```
from sklearn.feature_extraction.text import tfidfvectorizer
obj = tfidfvectorizer()
corpus = ['this is sample document.', 'another random document.', 'third sample
document text']
x = obj.fit_transform(corpus)
print x
>>>
(0, 1) 0.345205016865
(0, 4) ... 0.444514311537
(2, 1) 0.345205016865
(2, 4) 0.444514311537
```

   the model creates a vocabulary dictionary and assigns an index to each
   word. each row in the output contains a tuple (i,j) and a tf-idf value
   of word at index j in document i.


b. count / density / readability features

   count or density based features can also be used in models and
   analysis. these features might seem trivial but shows a great impact in
   learning models. some of the features are: word count, sentence count,
   punctuation counts and industry specific word counts. other types of
   measures include readability measures such as syllable counts, smog
   index and flesch reading ease. refer to [106]textstat library to create
   such features.


3.4 id27 (text vectors)

   id27 is the modern way of representing words as vectors. the
   aim of id27 is to redefine the high dimensional word features
   into low dimensional feature vectors by preserving the contextual
   similarity in the corpus. they are widely used in deep learning models
   such as convolutional neural networks and recurrent neural networks.

   [107]id97 and [108]glove are the two popular models to create word
   embedding of a text. these models takes a text corpus as input and
   produces the word vectors as output.

   id97 model is composed of preprocessing module, a shallow neural
   network model called continuous bag of words and another shallow neural
   network model called skip-gram. these models are widely used for all
   other nlp problems. it first constructs a vocabulary from the training
   corpus and then learns id27 representations. following code
   using gensim package prepares the id27 as the vectors.
```
from gensim.models import id97
sentences = [['data', 'science'], ['vidhya', 'science', 'data', 'analytics'],['m
achine', 'learning'], ['deep', 'learning']]

# train the model on your corpus
model = id97(sentences, min_count = 1)

print model.similarity('data', 'science')
>>> 0.11222489293

print model['learning']
>>> array([ 0.00459356  0.00303564 -0.00467622  0.00209638, ...])

```

   they can be used as feature vectors for ml model, used to measure text
   similarity using cosine similarity techniques, words id91 and
   text classification techniques.


4. important tasks of nlp

   this section talks about different use cases and problems in the field
   of natural language processing.

4.1 text classification

   text classification is one of the classical problem of nlp. notorious
   examples include     email spam identification, topic classification of
   news, sentiment classification and organization of web pages by search
   engines.

   text classification, in common words is defined as a technique to
   systematically classify a text object (document or sentence) in one of
   the fixed category. it is really helpful when the amount of data is too
   large, especially for organizing, information filtering, and storage
   purposes.

   a typical natural language classifier consists of two parts: (a)
   training (b) prediction as shown in image below. firstly the text input
   is processes and features are created. the machine learning models then
   learn these features and is used for predicting against the new text.

   [image-5.png]

   here is a code that uses naive bayes classifier using text blob library
   (built on top of nltk).
```
from textblob.classifiers import naivebayesclassifier as nbc
from textblob import textblob
training_corpus = [
                   ('i am exhausted of this work.', 'class_b'),
                   ("i can't cooperate with this", 'class_b'),
                   ('he is my badest enemy!', 'class_b'),
                   ('my management is poor.', 'class_b'),
                   ('i love this burger.', 'class_a'),
                   ('this is an brilliant place!', 'class_a'),
                   ('i feel very good about these dates.', 'class_a'),
                   ('this is my best work.', 'class_a'),
                   ("what an awesome view", 'class_a'),
                   ('i do not like this dish', 'class_b')]
test_corpus = [
                ("i am not feeling well today.", 'class_b'),
                ("i feel brilliant!", 'class_a'),
                ('gary is a friend of mine.', 'class_a'),
                ("i can't believe i'm doing this.", 'class_b'),
                ('the date was good.', 'class_a'), ('i do not enjoy my job', 'cl
ass_b')]

model = nbc(training_corpus)
print(model.classify("their codes are amazing."))
>>> "class_a"
print(model.classify("i don't like their computer."))
>>> "class_b"
print(model.accuracy(test_corpus))
>>> 0.83
```

   scikit.learn also provides a pipeline framework for text
   classification:
```
from sklearn.feature_extraction.text
import tfidfvectorizer from sklearn.metrics
import classification_report
from sklearn import id166

# preparing data for id166 model (using the same training_corpus, test_corpus from
 naive bayes example)
train_data = []
train_labels = []
for row in training_corpus:
    train_data.append(row[0])
    train_labels.append(row[1])

test_data = []
test_labels = []
for row in test_corpus:
    test_data.append(row[0])
    test_labels.append(row[1])

# create feature vectors
vectorizer = tfidfvectorizer(min_df=4, max_df=0.9)
# train the feature vectors
train_vectors = vectorizer.fit_transform(train_data)
# apply model on test data
test_vectors = vectorizer.transform(test_data)

# perform classification with id166, kernel=linear
model = id166.svc(kernel='linear')
model.fit(train_vectors, train_labels)
prediction = model.predict(test_vectors)
>>> ['class_a' 'class_a' 'class_b' 'class_b' 'class_a' 'class_a']

print (classification_report(test_labels, prediction))
```

   the text classification model are heavily dependent upon the quality
   and quantity of features, while applying any machine learning model it
   is always a good practice to include more and more training data. h ere
   are some tips that i wrote about improving the text classification
   accuracy in one of my previous article.


4.2 text matching / similarity

   one of the important areas of nlp is the matching of text objects to
   find similarities. important applications of text matching includes
   automatic id147, data de-duplication and genome analysis
   etc.

   a number of text matching techniques are available depending upon the
   requirement. this section describes the important techniques in detail.

   a. levenshtein distance     the levenshtein distance between two strings
   is defined as the minimum number of edits needed to transform one
   string into the other, with the allowable edit operations being
   insertion, deletion, or substitution of a single character. following
   is the implementation for efficient memory computations.
```
def levenshtein(s1,s2):
    if len(s1) > len(s2):
        s1,s2 = s2,s1
    distances = range(len(s1) + 1)
    for index2,char2 in enumerate(s2):
        newdistances = [index2+1]
        for index1,char1 in enumerate(s1):
            if char1 == char2:
                newdistances.append(distances[index1])
            else:
                 newdistances.append(1 + min((distances[index1], distances[index
1+1], newdistances[-1])))
        distances = newdistances
    return distances[-1]

print(levenshtein("analyze","analyse"))
```

   b. phonetic matching     a phonetic matching algorithm takes a keyword as
   input (person   s name, location name etc) and produces a character
   string that identifies a set of words that are (roughly) phonetically
   similar. it is very useful for searching large text corpuses,
   correcting spelling errors and matching relevant names. soundex and
   metaphone are two main phonetic algorithms used for this purpose.
   python   s module fuzzy is used to compute soundex strings for different
   words, for example    
```
import fuzzy
soundex = fuzzy.soundex(4)
print soundex('ankit')
>>>    a523   
print soundex('aunkit')
>>>    a523   
```

   c. flexible string matching     a complete text matching system includes
   different algorithms pipelined together to compute variety of text
   variations. id157 are really helpful for this purposes as
   well. another common techniques include     exact string matching,
   lemmatized matching, and compact matching (takes care of spaces,
   punctuation   s, slangs etc).

   d. cosine similarity     w hen the text is represented as vector
   notation, a general cosine similarity can also be applied in order to
   measure vectorized similarity. following code converts a text to
   vectors (using term frequency) and applies cosine similarity to provide
   closeness among two text.
```
import math
from collections import counter
def get_cosine(vec1, vec2):
    common = set(vec1.keys()) & set(vec2.keys())
    numerator = sum([vec1[x] * vec2[x] for x in common])

    sum1 = sum([vec1[x]**2 for x in vec1.keys()])
    sum2 = sum([vec2[x]**2 for x in vec2.keys()])
    denominator = math.sqrt(sum1) * math.sqrt(sum2)

    if not denominator:
        return 0.0
    else:
        return float(numerator) / denominator

def text_to_vector(text):
    words = text.split()
    return counter(words)

text1 = 'this is an article on analytics vidhya'
text2 = 'article on analytics vidhya is about natural language processing'

vector1 = text_to_vector(text1)
vector2 = text_to_vector(text2)
cosine = get_cosine(vector1, vector2)
>>> 0.62
```

4.3 coreference resolution

   coreference resolution is a process of finding relational links among
   the words (or phrases) within the sentences. consider an example
   sentence:     donald went to john   s office to see the new table. he
   looked at it for an hour.   

   humans can quickly figure out that    he    denotes donald (and not john),
   and that    it    denotes the table (and not john   s office). coreference
   resolution is the component of nlp that does this job automatically. it
   is used in document summarization, id53, and information
   extraction. stanford corenlp provides a python [109]wrapper for
   commercial purposes.


4.4 other nlp problems / tasks

     * text summarization     given a text article or paragraph, summarize
       it automatically to produce most important and relevant sentences
       in order.
     * machine translation     automatically translate text from one human
       language to another by taking care of grammar, semantics and
       information about the real world, etc.
     * id86 and understanding     convert information
       from computer databases or semantic intents into readable human
       language is called language generation. converting chunks of text
       into more logical structures that are easier for computer programs
       to manipulate is called language understanding.
     * id42     given an image representing printed
       text, determine the corresponding text.
     * document to information     this involves parsing of textual data
       present in documents (websites, files, pdfs and images) to
       analyzable and clean format.


5. important libraries for nlp (python)

     * scikit-learn: machine learning in python
     * natural language toolkit (nltk): the complete toolkit for all nlp
       techniques.
     * pattern     a web mining module for the with tools for nlp and
       machine learning.
     * textblob     easy to use nl p tools api, built on top of nltk and
       pattern.
     * spacy     industrial strength n lp with python and cython.
     * gensim     topic modelling for humans
     * stanford core nlp     nlp services and packages by stanford nlp
       group.


projects

   now, its time to take the plunge and actually play with some other real
   datasets. so are you ready to take on the challenge? accelerate your
   nlp journey with the following practice problems:
   [110]practice problem: identify the sentiments identify the sentiment
   of tweets
   [111]practice problem : twitter id31 to detect hate
   speech in tweets


end notes

   i hope this tutorial will help you maximize your efficiency when
   starting with natural language processing in python. i am sure this not
   only gave you an idea about basic techniques but it also showed you how
   to implement some of the more sophisticated techniques available today.
   if you come across any difficulty while practicing python, or you have
   any thoughts / suggestions / feedback please feel free to post them in
   the comments below.

   this article was contributed by shivam bansal who is the winner of
   [112]blogathon 2. we will soon be publishing other top two blogs from
   the competition [113]blogathon 2. so, stay tuned!

[114]learn, [115]compete, hack and [116]get hired!

   you can also read this article on analytics vidhya's android app
   [117]get it on google play

share this:

     * [118]click to share on linkedin (opens in new window)
     * [119]click to share on facebook (opens in new window)
     * [120]click to share on twitter (opens in new window)
     * [121]click to share on pocket (opens in new window)
     * [122]click to share on reddit (opens in new window)
     *

like this:

   like loading...

related articles

   [ins: :ins]

   tags : [123]coreference resolution, [124]entity parsing, [125]feature
   engineering, [126]lexicon id172, [127]natural language,
   [128]natural language processing, [129]nlp, [130]nlp libraries,
   [131]noise removal, [132]object standardization, [133]python,
   [134]stanford nlp, [135]syntactical parsing, [136]text classification,
   [137]text matching, [138]text preprocessing, [139]id27
   next article

id31 of twitter posts on chennai floods using python

   previous article

data scientist- chennai (4-6 years of experience)

[140]shivam bansal

   shivam bansal is a data scientist with exhaustive experience in natural
   language processing and machine learning in several domains. he is
   passionate about learning and always looks forward to solving
   challenging analytical problems.
     *
     *
     *

   this article is quite old and you might not get a prompt response from
   the author. we request you to post this comment on analytics vidhya's
   [141]discussion portal to get your queries resolved

57 comments

     * [142]ankit gupta says:
       [143]january 12, 2017 at 9:28 am
       hi shivam,
       nice article for beginner like me in nlp.
       regards,
       [144]reply
          + [145]shivam bansal says:
            [146]january 12, 2017 at 10:42 am
            thanks ankit.
            [147]reply
               o prasad says:
                 [148]march 17, 2017 at 5:38 am
                 hi i need document similarity in r
                 [149]reply
     * [150]peer says:
       [151]january 12, 2017 at 9:53 am
       great blogpost! brief in format but comprehensive in content.
       awesome!
       [152]reply
          + [153]shivam bansal says:
            [154]january 12, 2017 at 10:41 am
            thanks      glad that you liked it
            [155]reply
     * shub says:
       [156]january 12, 2017 at 1:50 pm
       great article, looking forward for more.
       [157]reply
     * syaamantak das says:
       [158]january 12, 2017 at 5:15 pm
       please provide this in printable pdf format. thanks for the awesome
       article. regards.
       [159]reply
     * simon says:
       [160]january 12, 2017 at 7:44 pm
       thanks for the great overview of an interesting topic
       [161]reply
     * abhishek singh rathore says:
       [162]january 13, 2017 at 2:18 am
       great article !! thanks for this     
       [163]reply
     * rahul kulkarni says:
       [164]january 13, 2017 at 3:44 am
       congratulations shivam.
       a great tutorial, i enjoyed reading it.
       i would also suggest you to look at spacy once. i feel spacy is
       catching up a lot these days.
       no complains.. this article is awesome and is already in my
       favorite list. 5 out 5. i wish i got this last year when i started
       learning and working on nlp. great tutorial for beginners.
       am sure you might have also looked at spacy. a comparison tutorial
       would be a great one.
       [165]reply
          + [166]shivam bansal says:
            [167]january 16, 2017 at 6:39 am
            hey rahul, thanks.
            yes, i have gone through spacy, but not used it thoroughly.
            will plan out a comparison tutorial for sure.
            [168]reply
     * niranjan says:
       [169]january 13, 2017 at 5:56 am
       hello shivam,
       thanks for such a very nice article.
       i have one question regarding langauge translation library textblob
       in python which i have been using to translate text from other
       language to english. but it seems to be not working properly. i
       used it before that time it was working fine now i am getting an
       error    httperror: http error 503: service unavailable   . i am using
       python 2.7.13.
       could you please help me on this. i would really appreciate it.
       thanks,
       niranjan
       [170]reply
          + [171]shivam bansal says:
            [172]january 16, 2017 at 6:51 am
            hi niranjan, textblob   s language translation and detection
            services are powered by google translate api. there are some
            validations and limits, for example     it only accepts strings
            with more than 2 words else it raises the error. also, make
            sure that your internet connection is proper. you can use
            langdetect ([173]https://pypi.python.org/pypi/langdetect) in
            case it is not fixed.
            [174]reply
               o niranjan says:
                 [175]january 20, 2017 at 7:24 pm
                 thanks. i will try that one.
                 [176]reply
     * nss says:
       [177]january 13, 2017 at 8:25 am
       hi shivam,
       noise removal section     to remove a regex pattern
       don   t you think regex pattern code is a bit redundant ? infact
       regex_pattern=   #[\w]*    will do the same job as your code. there is
       no need to explicitly provide alpha-numeric characters in the
       square brackets because this is what \w stands for .
       please tell me if i am wrong.
       and a great article by the way. a lot to learn from.
       neeraj
       [178]reply
          + [179]shivam bansal says:
            [180]january 16, 2017 at 6:54 am
            hey nss, thanks for pointing out, updated.
            [181]reply
     * shan says:
       [182]january 13, 2017 at 12:36 pm
       nice and informative article.
       i have tried the following :
       from sklearn.feature_extraction.text import tfidfvectorizer
       obj = tfidfvectorizer()
       corpus = [   this is sample document.   ,    another random document.   ,
          third sample document text   ]
       x = obj.fit_transform(corpus)
       print x
       (0, 1) 0.345205016865
       (0, 4) 0.444514311537
       (0, 2) 0.58448290102
       (0, 7) 0.58448290102
       (1, 3) 0.652490884513
       (1, 0) 0.652490884513
       (1, 1) 0.385371627466
       (2, 5) 0.58448290102
       (2, 6) 0.58448290102
       (2, 1) 0.345205016865
       (2, 4) 0.444514311537
       as u said, tuple (i,j) is tf-idf value of word at index j in
       document i.
       what does (0,7) explains ?
       [183]reply
          + [184]shivam bansal says:
            [185]january 16, 2017 at 7:26 am
            hey shan, thanks.
            tf-idf vectorizer converts a collection of raw documents to a
            matrix of tf-idf features. it is a two step process     creating
            count vectors of each term and then transforming them into
            vectors.
            when u run the code with this input (the    .    are removed)
            corpus = [   this sample document   ,    another random document   ,
               third sample document text   ]
            the output will be:
            (0, 1) 0.425440538971
            (0, 3) 0.547832154927
            (0, 6) 0.720333449055
            (1, 2) 0.652490884513
            (1, 0) 0.652490884513
            (1, 1) 0.385371627466
            (2, 4) 0.58448290102
            (2, 5) 0.58448290102
            (2, 1) 0.345205016865
            (2, 3) 0.444514311537
            this is the tf-idf matrix representation of the corpus. a
            cleaner representation will be something like:
            0 1 2 3 4 5 6 7
            0 x x x
            1 y y y
            2 z z z z
            now, the value at (0,6) position in this matrix defines the
            tf-idf vector for a word 6th index (in the overall corpus
            vocabulary) and in the document 0.
            you can also check that word at    1    index is    document    which
            is common in this matrix as well as in the corpus.
            hope it clears.
            [186]reply
     * [187]gautam says:
       [188]january 14, 2017 at 8:36 pm
       hi, nice article and immensely helpful, so a hearty thank you.
       one quick question,
       i faced an issue with fuzzy package as i didn   t see any package
       from anaconda on windows. there is fuzzywuzzy but that doesn   t have
       soundex function, any suggestion?
       [189]reply
          + [190]shivam bansal says:
            [191]january 16, 2017 at 7:08 am
            you can directly download the package from this link
            [192]https://bitbucket.org/yougov/fuzzy/src
            and install it by running    python setup.py install   
            [193]reply
     * eureka says:
       [194]january 18, 2017 at 12:35 pm
       awesome structure and overview !
       many thanks
       [195]reply
     * [196]nainika says:
       [197]january 25, 2017 at 2:52 pm
       this information is impressive; i am inspired with your post
       writing style & how continuously you describe this topic. after
       reading your post, thanks for taking the time to discuss this, i
       feel happy about it and i love learning more about this topic.
       [198]reply
          + [199]shivam bansal says:
            [200]january 26, 2017 at 6:48 pm
            thanks nainika, glad that you liked it     
            [201]reply
     * [202]                           23      20170201    |                 says:
       [203]february 1, 2017 at 3:18 pm
       [   ]
                      https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to
       -understand-implement-natural-language    [   ]
       [204]reply
     * shashi says:
       [205]march 15, 2017 at 10:33 am
       this is simply fantastic explanation and very much helpful for
       beginners like me who is still crawling.
       [206]reply
     * prakhar kushwah says:
       [207]march 22, 2017 at 8:32 am
       hie sir,
       very nice article.
       i have a question..if i want to have a word count of all the nouns
       present in a book   then..how can we proceed with python..
       [208]reply
     * [209]kunal says:
       [210]march 28, 2017 at 12:28 pm
       hello,
       i have proposed a project about text summarization so, what should
       i start with or how to go about it
       [211]reply
     * anchal singhania says:
       [212]march 29, 2017 at 2:20 pm
       hi shivam,
       i am running a document similarity algorithm in rapid miner, i am
       trying to see the similarity between two documents( one containing
       game attributes) and another containing games played at the user
       level. but the similarity between the two documents is not coming
       distinct.( for all the possible combination the value is coming as
       1.4) hence not able to rank the documents. please help as soon as
       possible.
       thanks and regards
       anchal singhania
       [213]reply
     * dr. kaid113sh sharma says:
       [214]april 6, 2017 at 8:34 am
       hello sir
       its very helpful
       thanks for posting valuable information
       [215]reply
     * b. drakshayani says:
       [216]may 18, 2017 at 4:50 pm
       it is a very good article. thanks you very much for posting such a
       good article. i have doubt in semantics phase i. e how semantic
       grammar is useful for nap with coding plz
       [217]reply
     * manisha singh says:
       [218]june 24, 2017 at 4:59 pm
       nice article.:-).
       how can i proceed in this in ai therapist . in which a user enters
       his day routine in few sentences and get d output if he/she
       requires a therapist or not
       [219]reply
     * aryan arora says:
       [220]june 26, 2017 at 5:37 pm
       hi shivam,
       thanks for publishing a detailed road map for nlp beginners. also
       please let me know best and quick way to learn python( any good
       book or tutorials)?
       thanks
       aryan
       [221]reply
     * mark says:
       [222]july 8, 2017 at 5:12 am
       hi, thanks for an amazing tutorial. i have two questions regarding
       text classification tasks.
       1) what is the minium size of training documents in order to be
       sure that your ml algorithm is doing a good classification?
       2) what are some tips to improve text classification accuracy? for
       example if i use tf-idf to vectorize text, can i use only the
       features with highest tf-idf for classification porpouses?
       thanks in advance.
       [223]reply
     * jack sheffield says:
       [224]july 18, 2017 at 7:23 pm
       great breakdown, thanks for writing this. for anyone who wants to
       learn more about implementing natural language processing code,
       check out this course on experfy.
       [225]https://www.experfy.com/training/courses/marketing-analytics-t
       ext-analysis-recommendation-systems
       i just finished and it   s been such a helpful resource for learning
       this
       [226]reply
     * vyom bani says:
       [227]july 20, 2017 at 11:02 pm
       great article!
       can you suggest some beginner nlp projects?
       thank you.
       [228]reply
     * rahul says:
       [229]august 2, 2017 at 1:16 pm
       hi shivam,
       first off, thank you for taking time to share what you know. its
       quite well written and practical. i was wondering if you have come
       across a list of all nlp techniques/algorithms/approaches to
       different problems nlp can solve, etc that i could perhaps use as a
       checklist. e.g. for id31 = you can use x,y,z
       techniques, for relationship extraction, you can follow a,b,c
       approaches. hope you get my question here.
       because i am approaching nlp from a hitchhikers point of view, i am
       looking to solve a very specific problem which is extracting
       information from blogs and would much rather go about it by
       attacking the problem rather than learning everything all the
       techniques in nlp and then approach the problem.
       hoping you can advise.
       thanks again for the article
       [230]reply
     * [231]abhishek sharma says:
       [232]august 3, 2017 at 1:51 am
       awesome, thanks for sharing.
       [233]reply
     * sachin bansal says:
       [234]august 5, 2017 at 1:32 am
       definitely a good article to start nlp   .     
       [235]reply
     * narkm says:
       [236]august 9, 2017 at 2:01 am
       thanks greatly for this beautiful tutorial.
       does anyone have an idea about textrank algorithms ?
       [237]reply
     * vallabh says:
       [238]august 22, 2017 at 4:55 pm
       thank you so much. that was one of the most logically connected and
       clear explanation that i have have gone through in the recent past.
       thank you so much for this.!     
       [239]reply
     * ajinkya says:
       [240]september 14, 2017 at 5:46 pm
       hi shivam,
       is there any api or anything which will do nlp to sql query? or any
       guess how to do it?
       [241]reply
     * aarti pitekar says:
       [242]september 15, 2017 at 5:23 pm
       hi,
       thanks for this artical it is really helpful.
       i just have one query can update data in existing corpus like nltk
       or stanford.
       [243]reply
     * sonal says:
       [244]october 4, 2017 at 12:22 am
       hello, sir i am doing masters project on word sense disambiguity
       can you please give a code on a single paragraph by performing all
       the preprocessing steps.
       [245]reply
     * [246]introducing the natural language processing library for apache
       spark - data science tidings says:
       [247]october 19, 2017 at 10:11 pm
       [   ] as features in machine learning workflows. if you   re not
       familiar with these terms, this guide to understanding nlp tasks is
       a good [   ]
       [248]reply
     * ishan soni says:
       [249]november 16, 2017 at 8:27 pm
       @shivam, do you some code examples using bigrams or trigrams for
       id31 or text classification for that matter.?
       [250]reply
     * [251]drillseo says:
       [252]november 24, 2017 at 6:12 pm
       thanks for the article, it is very helpful
       [253]reply
     * shekhar says:
       [254]november 27, 2017 at 7:21 pm
       @shivam :
       i am a beginner in python / ml
       i am planning to create a chat bot due to personal interest.
       can you please suggest what is the process behind the creation ?
       [255]reply
     * [256]natural language processing library for apache spark     free to
       use - wordpress today says:
       [257]december 2, 2017 at 9:26 pm
       [   ] as features in machine learning workflows. if you   re not
       familiar with these terms, this guide to understanding nlp tasks is
       a good [   ]
       [258]reply
     * [259]nlp fundamentals: where humans team up with machines to help
       it speak | copy paste programmers says:
       [260]december 13, 2017 at 6:06 am
       [   ]
       [261]https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to
       -understand-implement-natural-language&#8230; [   ]
       [262]reply
     * anik says:
       [263]january 18, 2018 at 5:15 pm
       nice and simple article on nlp
       [264]reply
     * naruto says:
       [265]april 2, 2018 at 12:31 pm
       thank you so much for thi   great blog. it give me a overview on nlp
       area!
       [266]reply
     * aravindan says:
       [267]april 8, 2018 at 9:33 pm
       i would like to thank for this resourceful post. i am impressed
       with the content and explanation. thanks a lot for sharing your
       knowledge and your investment of time. thanks again!!!
       [268]reply
          + aishwarya singh says:
            [269]april 9, 2018 at 1:00 am
            hi aravindan,
            glad you found this useful!
            [270]reply
     * mohammed abdul raoof says:
       [271]april 18, 2018 at 12:24 pm
       it is very helpful to me
       [272]reply
     * vedika parvez says:
       [273]may 5, 2018 at 1:29 am
       hello,
       your article was very informative and interesting.
       however, i have a question     is it possible to run in parallel
       multiple feature engineering methods on the same data at the same
       time?
       for e.g. can i run pos methods from syntactical parsing, phrase
       detection and ner from entity parsing, and id27s on the
       same corpus and receive comprehensible solutions from this
       combination of feature extraction methods?
       [274]reply
     * ashok kumar says:
       [275]may 22, 2018 at 3:24 pm
       hi
       nice article
       i tried following the same syntax in jupyter
       lem.lemmatize (word,   v   )
       but got different output as    v    and not    multiply   
       pls clarify
       [276]reply
     * raghu palem says:
       [277]may 22, 2018 at 11:07 pm
       simple and clear explanation.
       thank you   
       [278]reply

   [ins: :ins]

top analytics vidhya users

   rank                  name                  points
   1    [1.jpg?date=2019-04-05] [279]srk       3924
   2    [2.jpg?date=2019-04-05] [280]mark12    3510
   3    [3.jpg?date=2019-04-05] [281]nilabha   3261
   4    [4.jpg?date=2019-04-05] [282]nitish007 3237
   5    [5.jpg?date=2019-04-05] [283]tezdhar   3082
   [284]more user rankings
   [ins: :ins]
   [ins: :ins]

popular posts

     * [285]24 ultimate data science projects to boost your knowledge and
       skills (& can be accessed freely)
     * [286]understanding support vector machine algorithm from examples
       (along with code)
     * [287]essentials of machine learning algorithms (with python and r
       codes)
     * [288]a complete tutorial to learn data science with python from
       scratch
     * [289]7 types of regression techniques you should know!
     * [290]6 easy steps to learn naive bayes algorithm (with codes in
       python and r)
     * [291]a simple introduction to anova (with applications in excel)
     * [292]stock prices prediction using machine learning and deep
       learning techniques (with python codes)

   [ins: :ins]

recent posts

   [293]top 5 machine learning github repositories and reddit discussions
   from march 2019

[294]top 5 machine learning github repositories and reddit discussions from
march 2019

   april 4, 2019

   [295]id161 tutorial: a step-by-step introduction to image
   segmentation techniques (part 1)

[296]id161 tutorial: a step-by-step introduction to image
segmentation techniques (part 1)

   april 1, 2019

   [297]nuts and bolts of id23: introduction to temporal
   difference (td) learning

[298]nuts and bolts of id23: introduction to temporal
difference (td) learning

   march 28, 2019

   [299]16 opencv functions to start your id161 journey (with
   python code)

[300]16 opencv functions to start your id161 journey (with python
code)

   march 25, 2019

   [301][ds-finhack.jpg]

   [302][hikeathon.png]

   [av-white.d14465ee4af2.png]

analytics vidhya

     * [303]about us
     * [304]our team
     * [305]career
     * [306]contact us
     * [307]write for us

   [308]about us
   [309]   
   [310]our team
   [311]   
   [312]careers
   [313]   
   [314]contact us

data scientists

     * [315]blog
     * [316]hackathon
     * [317]discussions
     * [318]apply jobs
     * [319]leaderboard

companies

     * [320]post jobs
     * [321]trainings
     * [322]hiring hackathons
     * [323]advertising
     * [324]reach us

   don't have an account? [325]sign up here.

join our community :

   [326]46336 [327]followers
   [328]20224 [329]followers
   [330]followers
   [331]7513 [332]followers
   ____________________ >

      copyright 2013-2019 analytics vidhya.
     * [333]privacy policy
     * [334]terms of use
     * [335]refund policy

   don't have an account? [336]sign up here

   iframe: [337]likes-master

   %d bloggers like this:

   [loading.gif]
   ____________________

   ____________________

   ____________________
   [button input] (not implemented)_________________

   download resource

join the nextgen data science ecosystem

     * learn: get access to some of the best courses on data science
       created by us
     * engage: interact with thousands of data science professionals
       across the globe!
     * compete: compete in our hackathons and win exciting prizes
     * get hired: get information of jobs in data science community and
       build your profile

   [338](button) join now

   subscribe!

   iframe: [339]likes-master

   %d bloggers like this:

   [loading.gif]
   ____________________

   ____________________

   ____________________
   [button input] (not implemented)_________________

   download resource

join the nextgen data science ecosystem

     * learn: get access to some of the best courses on data science
       created by us
     * engage: interact with thousands of data science professionals
       across the globe!
     * compete: compete in our hackathons and win exciting prizes
     * get hired: get information of jobs in data science community and
       build your profile

   [340](button) join now

   subscribe!

references

   visible links
   1. https://www.analyticsvidhya.com/feed/
   2. https://www.analyticsvidhya.com/comments/feed/
   3. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/feed/
   4. https://www.analyticsvidhya.com/wp-json/oembed/1.0/embed?url=https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/
   5. https://www.analyticsvidhya.com/wp-json/oembed/1.0/embed?url=https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/&format=xml
   6. https://googletagmanager.com/ns.html?id=gtm-mpsm42v
   7. https://courses.analyticsvidhya.com/bundles/ai-blackbelt-beginner-to-master?utm_source=blog&utm_medium=flashstrip
   8. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/
   9. https://www.analyticsvidhya.com/blog-archive/
  10. https://www.analyticsvidhya.com/blog/category/machine-learning/
  11. https://www.analyticsvidhya.com/blog/category/deep-learning/
  12. https://www.analyticsvidhya.com/blog/category/career/
  13. https://www.analyticsvidhya.com/blog/category/stories/
  14. https://www.analyticsvidhya.com/blog/category/podcast/
  15. https://www.analyticsvidhya.com/blog/category/infographics/
  16. https://courses.analyticsvidhya.com/?utm_source=home_blog_navbar
  17. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/
  18. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-business-analyst-sas/
  19. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-r-data-science/
  20. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-data-science-python/
  21. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/weka-gui-learn-machine-learning/
  22. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/tableau-learning-path/
  23. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/qlikview-learning-path/
  24. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/newbie-d3-js-expert-complete-path-create-interactive-visualization-d3-js/
  25. https://www.analyticsvidhya.com/glossary-of-common-statistics-and-machine-learning-terms/
  26. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/
  27. https://discuss.analyticsvidhya.com/
  28. https://www.analyticsvidhya.com/blog/category/events/
  29. https://www.analyticsvidhya.com/datahack-summit-2018/
  30. https://www.analyticsvidhya.com/datahacksummit/
  31. https://www.analyticsvidhya.com/student-datafest-2018/?utm_source=homepage_menu
  32. http://www.analyticsvidhya.com/about-me/write/
  33. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/
  34. https://datahack.analyticsvidhya.com/contest/all
  35. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/
  36. https://www.analyticsvidhya.com/jobs/
  37. https://courses.analyticsvidhya.com/
  38. https://courses.analyticsvidhya.com/courses/computer-vision-using-deep-learning/?utm_source=blog-navbar&utm_medium=web
  39. https://courses.analyticsvidhya.com/courses/natural-language-processing-nlp/?utm_source=blog-navbar&utm_medium=web
  40. https://courses.analyticsvidhya.com/courses/introduction-to-data-science-2/?utm_source=blog-navbar&utm_medium=web
  41. https://courses.analyticsvidhya.com/courses/microsoft-excel-beginners-to-advanced/?utm_source=blog-navbar&utm_medium=web
  42. https://courses.analyticsvidhya.com/collections/?utm_source=blog-navbar&utm_medium=web
  43. https://www.analyticsvidhya.com/contact/
  44. https://www.analyticsvidhya.com/
  45. https://www.analyticsvidhya.com/blog-archive/
  46. https://courses.analyticsvidhya.com/?utm_source=home_blog_navbar
  47. https://discuss.analyticsvidhya.com/
  48. https://datahack.analyticsvidhya.com/
  49. https://www.analyticsvidhya.com/jobs/
  50. https://www.analyticsvidhya.com/corporate/
  51. https://www.analyticsvidhya.com/blog/
  52. https://courses.analyticsvidhya.com/bundles/ai-blackbelt-beginner-to-master?utm_source=avtopbanner&utm_medium=display
  53. https://courses.analyticsvidhya.com/bundles/ai-blackbelt-beginner-to-master?utm_source=avtopbanner&utm_medium=display
  54. https://courses.analyticsvidhya.com/bundles/ai-blackbelt-beginner-to-master?utm_source=avtopbanner&utm_medium=display
  55. https://www.analyticsvidhya.com/blog/
  56. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/
  57. https://www.analyticsvidhya.com/blog-archive/
  58. https://www.analyticsvidhya.com/blog/category/machine-learning/
  59. https://www.analyticsvidhya.com/blog/category/deep-learning/
  60. https://www.analyticsvidhya.com/blog/category/career/
  61. https://www.analyticsvidhya.com/blog/category/stories/
  62. https://www.analyticsvidhya.com/blog/category/podcast/
  63. https://www.analyticsvidhya.com/blog/category/infographics/
  64. https://courses.analyticsvidhya.com/?utm_source=home_blog_navbar
  65. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/
  66. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-business-analyst-sas/
  67. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-r-data-science/
  68. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/learning-path-data-science-python/
  69. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/weka-gui-learn-machine-learning/
  70. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/tableau-learning-path/
  71. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/qlikview-learning-path/
  72. https://www.analyticsvidhya.com/learning-paths-data-science-business-analytics-business-intelligence-big-data/newbie-d3-js-expert-complete-path-create-interactive-visualization-d3-js/
  73. https://www.analyticsvidhya.com/glossary-of-common-statistics-and-machine-learning-terms/
  74. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/
  75. https://discuss.analyticsvidhya.com/
  76. https://www.analyticsvidhya.com/blog/category/events/
  77. https://www.analyticsvidhya.com/datahack-summit-2018/
  78. https://www.analyticsvidhya.com/datahacksummit/
  79. https://www.analyticsvidhya.com/student-datafest-2018/?utm_source=homepage_menu
  80. http://www.analyticsvidhya.com/about-me/write/
  81. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/
  82. https://datahack.analyticsvidhya.com/contest/all
  83. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/
  84. https://www.analyticsvidhya.com/jobs/
  85. https://courses.analyticsvidhya.com/
  86. https://courses.analyticsvidhya.com/courses/computer-vision-using-deep-learning/?utm_source=blog-navbar&utm_medium=web
  87. https://courses.analyticsvidhya.com/courses/natural-language-processing-nlp/?utm_source=blog-navbar&utm_medium=web
  88. https://courses.analyticsvidhya.com/courses/introduction-to-data-science-2/?utm_source=blog-navbar&utm_medium=web
  89. https://courses.analyticsvidhya.com/courses/microsoft-excel-beginners-to-advanced/?utm_source=blog-navbar&utm_medium=web
  90. https://courses.analyticsvidhya.com/collections/?utm_source=blog-navbar&utm_medium=web
  91. https://www.analyticsvidhya.com/contact/
  92. https://www.analyticsvidhya.com/
  93. https://www.analyticsvidhya.com/blog/category/machine-learning/
  94. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/
  95. https://www.analyticsvidhya.com/blog/category/machine-learning/
  96. https://www.analyticsvidhya.com/blog/category/nlp/
  97. https://www.analyticsvidhya.com/blog/category/python-2/
  98. https://www.analyticsvidhya.com/blog/author/shivam5992/
  99. https://courses.analyticsvidhya.com/courses/natural-language-processing-nlp?utm_source=blog&utm_medium=ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python
 100. https://courses.analyticsvidhya.com/courses/natural-language-processing-nlp?utm_source=blog&utm_medium=ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python
 101. https://www.analyticsvidhya.com/blog/2015/06/regular-expression-python/
 102. https://www.analyticsvidhya.com/blog/2014/11/text-data-cleaning-steps-python/
 103. http://stanfordnlp.github.io/corenlp/
 104. https://en.wikipedia.org/wiki/lesk_algorithm
 105. https://www.analyticsvidhya.com/blog/2016/08/beginners-guide-to-topic-modeling-in-python/
 106. https://github.com/shivam5992/textstat
 107. https://code.google.com/archive/p/id97/
 108. http://nlp.stanford.edu/projects/glove/
 109. https://github.com/wordseer/stanford-corenlp-python
 110. https://datahack.analyticsvidhya.com/contest/linguipedia-codefest-natural-language-processing-1/?utm_source=ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python&utm_medium=blog
 111. https://datahack.analyticsvidhya.com/contest/practice-problem-twitter-sentiment-analysis/?utm_source=ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python&utm_medium=blog
 112. https://datahack.analyticsvidhya.com/contest/blogathon-ii/
 113. https://datahack.analyticsvidhya.com/contest/blogathon-ii/
 114. https://www.analyticsvidhya.com/blog
 115. https://datahack.analyticsvidhya.com/
 116. https://www.analyticsvidhya.com/jobs/#/user/
 117. https://play.google.com/store/apps/details?id=com.analyticsvidhya.android&utm_source=blog_article&utm_campaign=blog&pcampaignid=mkt-other-global-all-co-prtnr-py-partbadge-mar2515-1
 118. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/?share=linkedin
 119. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/?share=facebook
 120. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/?share=twitter
 121. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/?share=pocket
 122. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/?share=reddit
 123. https://www.analyticsvidhya.com/blog/tag/coreference-resolution/
 124. https://www.analyticsvidhya.com/blog/tag/entity-parsing/
 125. https://www.analyticsvidhya.com/blog/tag/feature-engineering/
 126. https://www.analyticsvidhya.com/blog/tag/lexicon-id172/
 127. https://www.analyticsvidhya.com/blog/tag/natural-language/
 128. https://www.analyticsvidhya.com/blog/tag/natural-language-processing/
 129. https://www.analyticsvidhya.com/blog/tag/nlp/
 130. https://www.analyticsvidhya.com/blog/tag/nlp-libraries/
 131. https://www.analyticsvidhya.com/blog/tag/noise-removal/
 132. https://www.analyticsvidhya.com/blog/tag/object-standardization/
 133. https://www.analyticsvidhya.com/blog/tag/python/
 134. https://www.analyticsvidhya.com/blog/tag/stanford-nlp/
 135. https://www.analyticsvidhya.com/blog/tag/syntactical-parsing/
 136. https://www.analyticsvidhya.com/blog/tag/text-classification/
 137. https://www.analyticsvidhya.com/blog/tag/text-matching/
 138. https://www.analyticsvidhya.com/blog/tag/text-preprocessing/
 139. https://www.analyticsvidhya.com/blog/tag/word-embedding/
 140. https://www.analyticsvidhya.com/blog/author/shivam5992/
 141. https://discuss.analyticsvidhya.com/
 142. https://www.facebook.com/app_scoped_user_id/1107394225967405/
 143. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120923
 144. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120923
 145. http://shivambansal.com/
 146. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120930
 147. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120930
 148. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-124911
 149. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-124911
 150. https://pernor.wordpress.com/
 151. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120924
 152. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120924
 153. http://shivambansal.com/
 154. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120929
 155. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120929
 156. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120935
 157. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120935
 158. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120944
 159. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120944
 160. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120949
 161. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120949
 162. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120957
 163. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120957
 164. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120958
 165. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120958
 166. http://shivambansal.com/
 167. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121080
 168. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121080
 169. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120961
 170. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120961
 171. http://shivambansal.com/
 172. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121081
 173. https://pypi.python.org/pypi/langdetect
 174. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121081
 175. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121333
 176. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121333
 177. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120966
 178. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120966
 179. http://shivambansal.com/
 180. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121082
 181. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121082
 182. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120980
 183. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-120980
 184. http://shivambansal.com/
 185. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121085
 186. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121085
 187. http://test/
 188. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121031
 189. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121031
 190. http://shivambansal.com/
 191. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121083
 192. https://bitbucket.org/yougov/fuzzy/src
 193. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121083
 194. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121226
 195. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121226
 196. http://infofaces.com/us-it-tech-staffing-agency/
 197. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121604
 198. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121604
 199. http://shivambansal.com/
 200. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121673
 201. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121673
 202. http://www.shellsec.com/news/36001.html
 203. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121970
 204. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-121970
 205. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-124803
 206. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-124803
 207. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-125353
 208. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-125353
 209. http://na/
 210. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-125685
 211. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-125685
 212. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-125781
 213. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-125781
 214. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-126259
 215. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-126259
 216. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-128737
 217. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-128737
 218. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-131045
 219. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-131045
 220. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-131141
 221. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-131141
 222. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-131691
 223. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-131691
 224. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-132338
 225. https://www.experfy.com/training/courses/marketing-analytics-text-analysis-recommendation-systems
 226. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-132338
 227. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-132524
 228. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-132524
 229. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-133473
 230. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-133473
 231. http://pyhackblog.wordpress.com/
 232. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-133536
 233. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-133536
 234. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-133695
 235. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-133695
 236. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-133924
 237. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-133924
 238. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-134898
 239. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-134898
 240. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-137140
 241. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-137140
 242. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-137222
 243. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-137222
 244. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-138645
 245. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-138645
 246. http://datasciencetidings.com/introducing-the-natural-language-processing-library-for-apache-spark/
 247. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-140134
 248. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-140134
 249. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-144025
 250. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-144025
 251. https://www.drillseo.com/
 252. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-144577
 253. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-144577
 254. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-145130
 255. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-145130
 256. https://www.wordpress-today.com/2017/11/28/natural-language-processing-library-for-apache-spark-free-to-use/
 257. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-146000
 258. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-146000
 259. http://copypasteprogrammers.com/nlp-fundamental-where-humans-team-up-with-machines-to-help-it-speak-ac8c6dbaba88/
 260. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-147368
 261. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language&#8230
 262. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-147368
 263. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-150829
 264. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-150829
 265. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-152310
 266. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-152310
 267. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-152455
 268. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-152455
 269. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-152456
 270. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-152456
 271. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-152646
 272. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-152646
 273. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-153050
 274. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-153050
 275. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-153467
 276. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-153467
 277. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-153476
 278. https://www.analyticsvidhya.com/blog/2017/01/ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python/#comment-153476
 279. https://datahack.analyticsvidhya.com/user/profile/srk
 280. https://datahack.analyticsvidhya.com/user/profile/mark12
 281. https://datahack.analyticsvidhya.com/user/profile/nilabha
 282. https://datahack.analyticsvidhya.com/user/profile/nitish007
 283. https://datahack.analyticsvidhya.com/user/profile/tezdhar
 284. https://datahack.analyticsvidhya.com/top-competitor/?utm_source=blog-navbar&utm_medium=web
 285. https://www.analyticsvidhya.com/blog/2018/05/24-ultimate-data-science-projects-to-boost-your-knowledge-and-skills/
 286. https://www.analyticsvidhya.com/blog/2017/09/understaing-support-vector-machine-example-code/
 287. https://www.analyticsvidhya.com/blog/2017/09/common-machine-learning-algorithms/
 288. https://www.analyticsvidhya.com/blog/2016/01/complete-tutorial-learn-data-science-python-scratch-2/
 289. https://www.analyticsvidhya.com/blog/2015/08/comprehensive-guide-regression/
 290. https://www.analyticsvidhya.com/blog/2017/09/naive-bayes-explained/
 291. https://www.analyticsvidhya.com/blog/2018/01/anova-analysis-of-variance/
 292. https://www.analyticsvidhya.com/blog/2018/10/predicting-stock-price-machine-learningnd-deep-learning-techniques-python/
 293. https://www.analyticsvidhya.com/blog/2019/04/top-5-machine-learning-github-reddit/
 294. https://www.analyticsvidhya.com/blog/2019/04/top-5-machine-learning-github-reddit/
 295. https://www.analyticsvidhya.com/blog/2019/04/introduction-image-segmentation-techniques-python/
 296. https://www.analyticsvidhya.com/blog/2019/04/introduction-image-segmentation-techniques-python/
 297. https://www.analyticsvidhya.com/blog/2019/03/reinforcement-learning-temporal-difference-learning/
 298. https://www.analyticsvidhya.com/blog/2019/03/reinforcement-learning-temporal-difference-learning/
 299. https://www.analyticsvidhya.com/blog/2019/03/opencv-functions-computer-vision-python/
 300. https://www.analyticsvidhya.com/blog/2019/03/opencv-functions-computer-vision-python/
 301. https://datahack.analyticsvidhya.com/contest/ltfs-datascience-finhack-an-online-hackathon/?utm_source=sticky_banner1&utm_medium=display
 302. https://datahack.analyticsvidhya.com/contest/hikeathon/?utm_source=sticky_banner2&utm_medium=display
 303. http://www.analyticsvidhya.com/about-me/
 304. https://www.analyticsvidhya.com/about-me/team/
 305. https://www.analyticsvidhya.com/career-analytics-vidhya/
 306. https://www.analyticsvidhya.com/contact/
 307. https://www.analyticsvidhya.com/about-me/write/
 308. http://www.analyticsvidhya.com/about-me/
 309. https://www.analyticsvidhya.com/about-me/team/
 310. https://www.analyticsvidhya.com/about-me/team/
 311. https://www.analyticsvidhya.com/about-me/team/
 312. https://www.analyticsvidhya.com/career-analytics-vidhya/
 313. https://www.analyticsvidhya.com/about-me/team/
 314. https://www.analyticsvidhya.com/contact/
 315. https://www.analyticsvidhya.com/blog
 316. https://datahack.analyticsvidhya.com/
 317. https://discuss.analyticsvidhya.com/
 318. https://www.analyticsvidhya.com/jobs/
 319. https://datahack.analyticsvidhya.com/users/
 320. https://www.analyticsvidhya.com/corporate/
 321. https://trainings.analyticsvidhya.com/
 322. https://datahack.analyticsvidhya.com/
 323. https://www.analyticsvidhya.com/contact/
 324. https://www.analyticsvidhya.com/contact/
 325. https://datahack.analyticsvidhya.com/signup/
 326. https://www.facebook.com/analyticsvidhya/
 327. https://www.facebook.com/analyticsvidhya/
 328. https://twitter.com/analyticsvidhya
 329. https://twitter.com/analyticsvidhya
 330. https://plus.google.com/+analyticsvidhya
 331. https://in.linkedin.com/company/analytics-vidhya
 332. https://in.linkedin.com/company/analytics-vidhya
 333. https://www.analyticsvidhya.com/privacy-policy/
 334. https://www.analyticsvidhya.com/terms/
 335. https://www.analyticsvidhya.com/refund-policy/
 336. https://id.analyticsvidhya.com/accounts/signup/
 337. https://widgets.wp.com/likes/master.html?ver=201914#ver=201914
 338. https://id.analyticsvidhya.com/accounts/login/?next=https://www.analyticsvidhya.com/blog/&utm_source=blog-subscribe&utm_medium=web
 339. https://widgets.wp.com/likes/master.html?ver=201914#ver=201914
 340. https://id.analyticsvidhya.com/accounts/login/?next=https://www.analyticsvidhya.com/blog/&utm_source=blog-subscribe&utm_medium=web

   hidden links:
 342. https://www.facebook.com/analyticsvidhya
 343. https://twitter.com/analyticsvidhya
 344. https://plus.google.com/+analyticsvidhya/posts
 345. https://in.linkedin.com/company/analytics-vidhya
 346. https://datahack.analyticsvidhya.com/contest/linguipedia-codefest-natural-language-processing-1/?utm_source=ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python&utm_medium=blog
 347. https://datahack.analyticsvidhya.com/contest/practice-problem-twitter-sentiment-analysis/?utm_source=ultimate-guide-to-understand-implement-natural-language-processing-codes-in-python&utm_medium=blog
 348. https://www.analyticsvidhya.com/blog/2017/01/sentiment-analysis-of-twitter-posts-on-chennai-floods-using-python/
 349. https://www.analyticsvidhya.com/blog/2017/01/data-scientist-chennai-4-6-years-of-experience/
 350. https://www.analyticsvidhya.com/blog/author/shivam5992/
 351. https://twitter.com/shivamshaz
 352. https://www.linkedin.com/in/shivambansal1
 353. https://github.com/shivam5992
 354. http://www.edvancer.in/certified-data-scientist-with-python-course?utm_source=av&utm_medium=avads&utm_campaign=avadsnonfc&utm_content=pythonavad
 355. https://www.facebook.com/analyticsvidhya/
 356. https://twitter.com/analyticsvidhya
 357. https://plus.google.com/+analyticsvidhya
 358. https://plus.google.com/+analyticsvidhya
 359. https://in.linkedin.com/company/analytics-vidhya
 360. https://www.addtoany.com/add_to/facebook?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2017%2f01%2fultimate-guide-to-understand-implement-natural-language-processing-codes-in-python%2f&linkname=ultimate%20guide%20to%20understand%20%26amp%3b%20implement%20natural%20language%20processing
 361. https://www.addtoany.com/add_to/twitter?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2017%2f01%2fultimate-guide-to-understand-implement-natural-language-processing-codes-in-python%2f&linkname=ultimate%20guide%20to%20understand%20%26amp%3b%20implement%20natural%20language%20processing
 362. https://www.addtoany.com/add_to/linkedin?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2017%2f01%2fultimate-guide-to-understand-implement-natural-language-processing-codes-in-python%2f&linkname=ultimate%20guide%20to%20understand%20%26amp%3b%20implement%20natural%20language%20processing
 363. https://www.addtoany.com/add_to/flipboard?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2017%2f01%2fultimate-guide-to-understand-implement-natural-language-processing-codes-in-python%2f&linkname=ultimate%20guide%20to%20understand%20%26amp%3b%20implement%20natural%20language%20processing
 364. https://www.addtoany.com/add_to/whatsapp?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2017%2f01%2fultimate-guide-to-understand-implement-natural-language-processing-codes-in-python%2f&linkname=ultimate%20guide%20to%20understand%20%26amp%3b%20implement%20natural%20language%20processing
 365. https://www.addtoany.com/add_to/facebook?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2017%2f01%2fultimate-guide-to-understand-implement-natural-language-processing-codes-in-python%2f&linkname=ultimate%20guide%20to%20understand%20%26amp%3b%20implement%20natural%20language%20processing
 366. https://www.addtoany.com/add_to/twitter?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2017%2f01%2fultimate-guide-to-understand-implement-natural-language-processing-codes-in-python%2f&linkname=ultimate%20guide%20to%20understand%20%26amp%3b%20implement%20natural%20language%20processing
 367. https://www.addtoany.com/add_to/linkedin?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2017%2f01%2fultimate-guide-to-understand-implement-natural-language-processing-codes-in-python%2f&linkname=ultimate%20guide%20to%20understand%20%26amp%3b%20implement%20natural%20language%20processing
 368. https://www.addtoany.com/add_to/flipboard?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2017%2f01%2fultimate-guide-to-understand-implement-natural-language-processing-codes-in-python%2f&linkname=ultimate%20guide%20to%20understand%20%26amp%3b%20implement%20natural%20language%20processing
 369. https://www.addtoany.com/add_to/whatsapp?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2017%2f01%2fultimate-guide-to-understand-implement-natural-language-processing-codes-in-python%2f&linkname=ultimate%20guide%20to%20understand%20%26amp%3b%20implement%20natural%20language%20processing
 370. javascript:void(0);
 371. javascript:void(0);
 372. https://www.addtoany.com/add_to/facebook?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2017%2f01%2fultimate-guide-to-understand-implement-natural-language-processing-codes-in-python%2f&linkname=ultimate%20guide%20to%20understand%20%26amp%3b%20implement%20natural%20language%20processing
 373. https://www.addtoany.com/add_to/twitter?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2017%2f01%2fultimate-guide-to-understand-implement-natural-language-processing-codes-in-python%2f&linkname=ultimate%20guide%20to%20understand%20%26amp%3b%20implement%20natural%20language%20processing
 374. https://www.addtoany.com/add_to/linkedin?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2017%2f01%2fultimate-guide-to-understand-implement-natural-language-processing-codes-in-python%2f&linkname=ultimate%20guide%20to%20understand%20%26amp%3b%20implement%20natural%20language%20processing
 375. https://www.addtoany.com/add_to/flipboard?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2017%2f01%2fultimate-guide-to-understand-implement-natural-language-processing-codes-in-python%2f&linkname=ultimate%20guide%20to%20understand%20%26amp%3b%20implement%20natural%20language%20processing
 376. https://www.addtoany.com/add_to/whatsapp?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2017%2f01%2fultimate-guide-to-understand-implement-natural-language-processing-codes-in-python%2f&linkname=ultimate%20guide%20to%20understand%20%26amp%3b%20implement%20natural%20language%20processing
 377. https://www.addtoany.com/add_to/facebook?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2017%2f01%2fultimate-guide-to-understand-implement-natural-language-processing-codes-in-python%2f&linkname=ultimate%20guide%20to%20understand%20%26amp%3b%20implement%20natural%20language%20processing
 378. https://www.addtoany.com/add_to/twitter?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2017%2f01%2fultimate-guide-to-understand-implement-natural-language-processing-codes-in-python%2f&linkname=ultimate%20guide%20to%20understand%20%26amp%3b%20implement%20natural%20language%20processing
 379. https://www.addtoany.com/add_to/linkedin?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2017%2f01%2fultimate-guide-to-understand-implement-natural-language-processing-codes-in-python%2f&linkname=ultimate%20guide%20to%20understand%20%26amp%3b%20implement%20natural%20language%20processing
 380. https://www.addtoany.com/add_to/flipboard?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2017%2f01%2fultimate-guide-to-understand-implement-natural-language-processing-codes-in-python%2f&linkname=ultimate%20guide%20to%20understand%20%26amp%3b%20implement%20natural%20language%20processing
 381. https://www.addtoany.com/add_to/whatsapp?linkurl=https%3a%2f%2fwww.analyticsvidhya.com%2fblog%2f2017%2f01%2fultimate-guide-to-understand-implement-natural-language-processing-codes-in-python%2f&linkname=ultimate%20guide%20to%20understand%20%26amp%3b%20implement%20natural%20language%20processing
 382. javascript:void(0);
 383. javascript:void(0);
