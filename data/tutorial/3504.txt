   iframe: [1]https://www.googletagmanager.com/ns.html?id=gtm-wxcxdvk

     * [2]docs
     * [3]blog
     * [4]community
     * [5]download
     * [6]github

   [7]ja

   [8]neural network console >
     * [9]top
     * [10]docs
     * [11]blog
     * [12]community
     * [13]download
     * [14]github

   [15]japanese

   [16]neural network console >

   by sony

   an open source software to make research,
   development and implementation of neural network more efficient.
     * [17]get started

news

news

features

     * write less do more
       neural network libraries allows you to define a computation graph
       (neural network) intuitively with less amount of code.
     * dynamic computation graph support
       dynamic computation graph used enables flexible runtime network
       construction. the library can use both paradigms of static and
       dynamic graph.
     * run anywhere
       we develop the library by keeping portability in mind. we run cis
       for linux and windows.
     * device ready
       most of the code of the library is written in c++11. by using c++11
       core api, you could deploy it onto embedded devices.
     * easy to add a new function
       we have a nice function abstraction as well as a code template
       generator for writing a new function. those allow developers write
       a new function with less coding.
     * multi-target device acceleration as plugin
       a new device code can be added as a plugin without any modification
       of the library code. cuda is actually implemented as a plugin
       extension.

products with sony   s deep learning

     *

real estate price estimate
       neural network libraries is used in real estate price estimate
       engine of sony real estate corporation. the library realizes the
       solution that statistically estimates signed price in buying and
       selling real estate, analyzing massive data with unique algorism
       developed based on evaluation know-how and knowledge of sony real
       estate corporation. the solution is utilized in various businesses
       of sony real estate corporation such as    ouchi direct   ,    real
       estate property search map    and    automatic evaluation   .
     *

gesture sensitivity
       the library is used in an intuitive gesture sensitivity function of
       sony mobile communications    xperia ear   . based on data from several
       sensors embedded in xperia ear, you can just use a nod of the head
       to confirm a command - answering yes/no, answering/declining the
       phone call, cancelling text-to-speech reading of notifications,
       skipping/rewinding a song track.
     *

image recognition (user identification, face tracking, etc.)
       the library is used to realize image recognition of sony   s
       entertainment robot "aibo"    ers-1000   . in the image recognition
       through fish-eye cameras installed at the nose, the library is
       actively utilized for user identification, face tracking, charge
       stand recognition, generic object recognition, etc. these features
       and various inbuilt sensors enable its adaptable behavior.

write less do more

   you can define a computation graph (neural network) intuitively with
   less amount of code.
   defining a two layered neural network with softmax loss only requires
   the following simple 5 lines of code.

x = nn.variable(input_shape)
t = nn.variable(target_shape)
h = f.tanh(pf.affine(x, hidden_size, name='affine1'))
y = pf.affine(h, target_size, name='affine2')
loss = f.mean(f.softmax_cross_id178(y, t))


   forward/backward call executes the computation graph.

x.d = some_data
t.d = some_target
loss.forward()
loss.backward()


   parameter management system called parameter_scope enables flexible
   parameter sharing.
   the following code block demonstrates how we write a simple elman
   recurrent neural network.

h = h0 = nn.variable(hidden_shape)
x_list = [nn.variable(input_shape) for i in range(input_length)]
for x in x_list:
    # parameter scopes are reused over loop,
    # which means parameters are shared for all iteration.
    with nn.parameter_scope('id56_cell'):
        h = f.tanh(pf.affine(f.concatenate(x, h, axis=1), hidden_size))

y = pf.affine(h, target_size, name='affine')


dynamic computation graph support

   static computation graph which has been used in general is a method to
   build a computation graph before executing the graph. on the other
   hand, dynamic computation graph enables flexible runtime network
   construction. the library can use both paradigms of static and dynamic
   graph. here is a dynamic computation graph example in the library.

x = nn.variable(input_shape)
x.d = some_data
t = nn.variable(target_shape)
t.d = some_target

with nn.auto_forward():
    h = f.relu(pf.convolution(x, hidden_size, (3, 3), pad=(1, 1), name='conv0'))
    for i in range(num_stochatic_layers):
        if np.random.rand() < layer_drop_ratio:
            continue  # stochastically drop a layer.
        h2 = f.relu(pf.convolution(x, hidden_size, (3, 3), pad=(1, 1),
                                   name='conv%d' % (i + 1)))
        h = f.add2(h, h2)
    y = pf.affine(h, target_size, name='classification')
    loss = f.mean(f.softmax_cross_id178(y, t))

# backward computation can also be done in dynamically executed graph.
loss.backward()


   the memory caching system implemented in the library enables fast
   execution without memory allocation overhead.

ready for more?

   we have just briefly introduced the most basic features of the library.
   docs will cover them and other advanced features with much finer
   details, so make sure to read through it all!!!!

   [18]docs

the new deep learning experience

neural network console

   not just train and evaluate.
   you can design neural networks with fast and intuitive gui.

   [19]dl.sony.com

   [20]neural network libraries
     * [21]terms of use
     * [22]privacy policy
     * [23]cookies
     * [24]about us

      2017 sony network communications inc.

references

   visible links
   1. https://www.googletagmanager.com/ns.html?id=gtm-wxcxdvk
   2. http://nnabla.readthedocs.io/en/latest/
   3. https://blog.nnabla.org/
   4. https://nnabla.org/community/
   5. https://github.com/sony/nnabla/releases
   6. https://github.com/sony/nnabla
   7. https://nnabla.org/ja/
   8. https://dl.sony.com/
   9. https://nnabla.org/
  10. http://nnabla.readthedocs.io/en/latest/
  11. https://blog.nnabla.org/
  12. https://nnabla.org/community/
  13. https://github.com/sony/nnabla/releases
  14. https://github.com/sony/nnabla
  15. https://nnabla.org/ja/
  16. https://dl.sony.com/
  17. https://github.com/sony/nnabla
  18. http://nnabla.readthedocs.io/en/latest/
  19. https://dl.sony.com/
  20. https://nnabla.org/
  21. https://nnabla.org/terms/
  22. http://www.sonynetwork.co.jp/corporation/en/privacy/
  23. https://nnabla.org/cookie/
  24. http://www.sonynetwork.co.jp/corporation/en/

   hidden links:
  26. https://nnabla.org/
