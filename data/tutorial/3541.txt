   #[1]github [2]recent commits to jprocessing:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]9
     * [35]star [36]115
     * [37]fork [38]29

[39]kevincobain2000/[40]jprocessing

   [41]code [42]issues 4 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   japanese natural langauge processing libraries
   [47]http://readthedocs.org/docs/jprocessi   
   [48]nlp [49]japanese [50]word-sense-disambiguation [51]wsd
     * [52]31 commits
     * [53]2 branches
     * [54]0 releases
     * [55]fetching contributors
     * [56]bsd-2-clause

    1. [57]openedge abl 99.8%
    2. [58]python 0.2%

   (button) openedge abl python
   branch: master (button) new pull request
   [59]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/k
   [60]download zip

downloading...

   want to be notified of new releases in kevincobain2000/jprocessing?
   [61]sign in [62]sign up

launching github desktop...

   if nothing happens, [63]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [64]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [65]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [66]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [67]permalink
   type       name      latest commit message commit time
        failed to load latest commit information.
        [68]docs
        [69]scripts
        [70]src
        [71].gitignore
        [72]license.txt
        [73]manifest.in
        [74]readme
        [75]readme.rst
        [76]setup.py

readme.rst

japanese nlp library

   [77]back to home

   contents
     * [78]1   requirements
          + [79]1.1   links
          + [80]1.2   install
          + [81]1.3   history
     * [82]2   libraries and modules
          + [83]2.1   tokenize jtokenize.py
          + [84]2.2   cabocha jcabocha.py
          + [85]2.3   kanji / katakana /hiragana to tokenized romaji
            jconvert.py
          + [86]2.4   longest common string japanese jprocessing.py
          + [87]2.5   similarity between two sentences jprocessing.py
     * [88]3   edict japanese dictionary search with example sentences
          + [89]3.1   sample ouput demo
          + [90]3.2   edict dictionary and example sentences parser.
          + [91]3.3   charset
          + [92]3.4   links
          + [93]3.5   edict_search.py
          + [94]3.6   edict_examples.py
     * [95]4   id31 japanese text
          + [96]4.1   id138 files download links
          + [97]4.2   how to use
          + [98]4.3   japanese word polarity score
     * [99]5   contacts

[100]1   requirements

     * third party dependencies
          + cabocha japanese morphological parser
            [101]http://sourceforge.net/projects/cabocha/
     * python dependencies
          + python 2.6.* or above

[102]1.1   links

     * all code at jprocessing repo [103]github

     * [104]documentation and [105]homepage and [106]sphinx

     * [107]pypi python package

clone git@github.com:kevincobain2000/jprocessing.git

[108]1.2   install

   in terminal
bash$ python setup.py install

[109]1.3   history

     * 0.2

          + id31 of japanese text

     *

        0.1

               o morphologically tokenize japanese sentence
               o kanji / hiragana / katakana to romaji converter
               o edict dictionary search - borrowed
               o edict examples search - incomplete
               o sentence similarity between two jp sentences
               o run cabocha(iso--8859-1 configured) in python.
               o longest common string between sentences
               o kanji to katakana pronunciation
               o hiragana, katakana chart parser

[110]2   libraries and modules

[111]2.1   tokenize jtokenize.py

   in python
>>> from jnlp.jtokenize import jtokenize
>>> input_sentence = u'                                                                           '
>>> list_of_tokens = jtokenize(input_sentence)
>>> print list_of_tokens
>>> print '--'.join(list_of_tokens).encode('utf-8')

   returns:
... [u'\u79c1', u'\u306f', u'\u5f7c', u'\u3092', u'\uff15'...]
...    --   --   --   --   --   --   --   --         --      --   --   --         --   --   --   --         --   

   katakana pronunciation:
>>> print '--'.join(jreads(input_sentence)).encode('utf-8')
...          --   --      --   --   --      --      --   --         --      --      --   --               --   --      --   --         --   

[112]2.2   cabocha jcabocha.py

   run [113]cabocha with original eucjp or is0-8859-1 configured encoding,
   with utf8 python
     * if cobocha is configured as utf8 then see this
       [114]http://nltk.googlecode.com/svn/trunk/doc/book-jp/ch12.html#cab
       ocha

>>> from jnlp.jcabocha import cabocha
>>> print cabocha(input_sentence).encode('utf-8')

   output:
<sentence>
 <chunk id="0" link="8" rel="d" score="0.971639" head="0" func="1">
  <tok id="0" read="         " base="   " pos="      -         -      " ctype="" cform="" ne="o">   </to
k>
  <tok id="1" read="   " base="   " pos="      -         " ctype="" cform="" ne="o">   </tok>
 </chunk>
 <chunk id="1" link="2" rel="d" score="0.488672" head="2" func="3">
  <tok id="2" read="      " base="   " pos="      -         -      " ctype="" cform="" ne="o">   </tok
>
  <tok id="3" read="   " base="   " pos="      -         -      " ctype="" cform="" ne="o">   </tok>
 </chunk>
 <chunk id="2" link="8" rel="d" score="2.25834" head="6" func="6">
  <tok id="4" read="   " base="   " pos="      -   " ctype="" cform="" ne="b-date">   </tok>
  <tok id="5" read="      " base="   " pos="      -      -         " ctype="" cform="" ne="i-date">
   </tok>
  <tok id="6" read="      " base="   " pos="      -            " ctype="" cform="" ne="i-date">   </
tok>
  <tok id="7" read="   " base="   " pos="      -      " ctype="" cform="" ne="o">   </tok>
 </chunk>

[115]2.3   kanji / katakana /hiragana to tokenized romaji jconvert.py

   uses data/katakanachart.txt and parses the chart. see
   [116]katakanachart.
>>> from jnlp.jconvert import *
>>> input_sentence = u'                                                                                    '
>>> print ' '.join(tokenizedromaji(input_sentence))
>>> print tokenizedromaji(input_sentence)

...kisyoutyou ga ni ichi nichi gozen yon ji yon hachi hun  hapyou si ta tenki ga
ikyou ni yoru to
...[u'kisyoutyou', u'ga', u'ni', u'ichi', u'nichi', u'gozen',...]

   katakanachart.txt
     * [117]katakanachartfile and [118]hiraganachartfile

[119]2.4   longest common string japanese jprocessing.py

   on english strings
>>> from jnlp.jprocessing import long_substr
>>> a = 'once upon a time in italy'
>>> b = 'thre was a time in america'
>>> print long_substr(a, b)

   output
...a time in

   on japanese strings
>>> a = u'                                    '
>>> b = u'                                    '
>>> print long_substr(a, b).encode('utf-8')

   output
...               

[120]2.5   similarity between two sentences jprocessing.py

   uses minhash by checking the overlap
   [121]http://en.wikipedia.org/wiki/minhash
   english strings:
>>> from jnlp.jprocessing import similarities
>>> s = similarities()
>>> a = 'there was'
>>> b = 'there is'
>>> print s.minhash(a,b)
...0.444444444444

   japanese strings:
>>> from jnlp.jprocessing import *
>>> a = u'                        '
>>> b = u'                              '
>>> print s.minhash(' '.join(jtokenize(a)), ' '.join(jtokenize(b)))
...0.210526315789

[122]3   edict japanese dictionary search with example sentences

[123]3.1   sample ouput demo

[124]3.2   edict dictionary and example sentences parser.

   this package uses the [125]edict and [126]kanjidic dictionary files.
   these files are the property of the electronic dictionary research and
   development [127]group , and are used in conformance with the group's
   [128]licence .

   edict parser by paul goins, see edict_search.py edict example sentences
   parse by query, pulkit kathuria, see edict_examples.py edict examples
   pickle files are provided but latest example files can be downloaded
   from the links provided.

[129]3.3   charset

   two files
     * utf8 charset example file if not using src/jnlp/data/edict_examples
       to convert eucjp/iso-8859-1 to utf8
iconv -f eucjp -t utf-8 path/to/edict_examples > path/to/save_with_utf-8

     * iso-8859-1 edict_dictionary file

   outputs example sentences for a query in japanese only for ambiguous
   words.

[130]3.4   links

   latest dictionary files can be downloaded [131]here

[132]3.5   edict_search.py

   author: paul goins license included [133]linktooriginal:

   for all entries of sense definitions
>>> from jnlp.edict_search import *
>>> query = u'         '
>>> edict_path = 'src/jnlp/data/edict-yy-mm-dd'
>>> kp = parser(edict_path)
>>> for i, entry in enumerate(kp.search(query)):
...     print entry.to_string().encode('utf-8')

[134]3.6   edict_examples.py

   note: only outputs the examples sentences for ambiguous words (if word
   has one or more senses)
   author: pulkit kathuria
>>> from jnlp.edict_examples import *
>>> query = u'         '
>>> edict_path = 'src/jnlp/data/edict-yy-mm-dd'
>>> edict_examples_path = 'src/jnlp/data/edict_examples'
>>> search_with_example(edict_path, edict_examples_path, query)

   output
         

sense (1) to recognize;
  ex:01                         *   *               we appreciate his talent.

sense (2) to observe;
  ex:01                         *   *                  we have detected an abnormality on your x-ray.

sense (3) to admit;
  ex:01                               *   *         mother approved my plan.
  ex:02                               *   *                     mother will never approve of my marriage.
  ex:03                               *   *                     father will never approve of my marriage.
  ex:04                                           *   *            he doesn't approve of women smoking.
  ...

[135]4   id31 japanese text

   this section covers (1) id31 on japanese text using word
   sense disambiguation, [136]id138-jp (japanese word net file name
   wnjpn-all.tab), [137]sentiid138 (english sentiid138 file name
   sentiid138_3.*.txt).

[138]4.1   id138 files download links

    1. [139]http://nlpwww.nict.go.jp/wn-ja/eng/downloads.html
    2. [140]http://sentiid138.isti.cnr.it/

[141]4.2   how to use

   the following classifier is baseline, which works as simple mapping of
   eng to japanese using id138 and classify on polarity score using
   sentiid138.
     * (adnouns, nouns, verbs, .. all included)
     * no wsd module on japanese sentence
     * uses word as its common sense for polarity score

>>> from jnlp.jsentiments import *
>>> jp_wn = '../../../../data/wnjpn-all.tab'
>>> en_swn = '../../../../data/sentiid138_3.0.0_20100908.txt'
>>> classifier = sentiment()
>>> classifier.train(en_swn, jp_wn)
>>> text = u'                                                            '
>>> print classifier.baseline(text)
...pos score = 0.625 neg score = 0.125
...text is positive

[142]4.3   japanese word polarity score

>>> from jnlp.jsentiments import *
>>> jp_wn = '_dicts/wnjpn-all.tab' #path to japanese word net
>>> en_swn = '_dicts/sentiid138_3.0.0_20100908.txt' #path to sentiid138
>>> classifier = sentiment()
>>> sentiid138, jpid138  = classifier.train(en_swn, jp_wn)
>>> positive_score = sentiid138[jpid138[u'      ']][0]
>>> negative_score = sentiid138[jpid138[u'      ']][1]
>>> print 'pos score = {0}, neg score = {1}'.format(positive_score, negative_sco
re)
...pos score = 0.625, neg score = 0.0

[143]5   contacts

     author: pulkit[at]jaist.ac.jp [change at with @]

     *    2019 github, inc.
     * [144]terms
     * [145]privacy
     * [146]security
     * [147]status
     * [148]help

     * [149]contact github
     * [150]pricing
     * [151]api
     * [152]training
     * [153]blog
     * [154]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [155]reload to refresh your
   session. you signed out in another tab or window. [156]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/kevincobain2000/jprocessing/commits/master.atom
   3. https://github.com/kevincobain2000/jprocessing#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/kevincobain2000/jprocessing
  32. https://github.com/join
  33. https://github.com/login?return_to=/kevincobain2000/jprocessing
  34. https://github.com/kevincobain2000/jprocessing/watchers
  35. https://github.com/login?return_to=/kevincobain2000/jprocessing
  36. https://github.com/kevincobain2000/jprocessing/stargazers
  37. https://github.com/login?return_to=/kevincobain2000/jprocessing
  38. https://github.com/kevincobain2000/jprocessing/network/members
  39. https://github.com/kevincobain2000
  40. https://github.com/kevincobain2000/jprocessing
  41. https://github.com/kevincobain2000/jprocessing
  42. https://github.com/kevincobain2000/jprocessing/issues
  43. https://github.com/kevincobain2000/jprocessing/pulls
  44. https://github.com/kevincobain2000/jprocessing/projects
  45. https://github.com/kevincobain2000/jprocessing/pulse
  46. https://github.com/join?source=prompt-code
  47. http://readthedocs.org/docs/jprocessing/en/latest/
  48. https://github.com/topics/nlp
  49. https://github.com/topics/japanese
  50. https://github.com/topics/word-sense-disambiguation
  51. https://github.com/topics/wsd
  52. https://github.com/kevincobain2000/jprocessing/commits/master
  53. https://github.com/kevincobain2000/jprocessing/branches
  54. https://github.com/kevincobain2000/jprocessing/releases
  55. https://github.com/kevincobain2000/jprocessing/graphs/contributors
  56. https://github.com/kevincobain2000/jprocessing/blob/master/license.txt
  57. https://github.com/kevincobain2000/jprocessing/search?l=openedge-abl
  58. https://github.com/kevincobain2000/jprocessing/search?l=python
  59. https://github.com/kevincobain2000/jprocessing/find/master
  60. https://github.com/kevincobain2000/jprocessing/archive/master.zip
  61. https://github.com/login?return_to=https://github.com/kevincobain2000/jprocessing
  62. https://github.com/join?return_to=/kevincobain2000/jprocessing
  63. https://desktop.github.com/
  64. https://desktop.github.com/
  65. https://developer.apple.com/xcode/
  66. https://visualstudio.github.com/
  67. https://github.com/kevincobain2000/jprocessing/tree/68b2627b825013631dd475c37c8769d5d2a1eb3e
  68. https://github.com/kevincobain2000/jprocessing/tree/master/docs
  69. https://github.com/kevincobain2000/jprocessing/tree/master/scripts
  70. https://github.com/kevincobain2000/jprocessing/tree/master/src
  71. https://github.com/kevincobain2000/jprocessing/blob/master/.gitignore
  72. https://github.com/kevincobain2000/jprocessing/blob/master/license.txt
  73. https://github.com/kevincobain2000/jprocessing/blob/master/manifest.in
  74. https://github.com/kevincobain2000/jprocessing/blob/master/readme
  75. https://github.com/kevincobain2000/jprocessing/blob/master/readme.rst
  76. https://github.com/kevincobain2000/jprocessing/blob/master/setup.py
  77. http://www.jaist.ac.jp/~s1010205
  78. https://github.com/kevincobain2000/jprocessing#requirements
  79. https://github.com/kevincobain2000/jprocessing#links
  80. https://github.com/kevincobain2000/jprocessing#install
  81. https://github.com/kevincobain2000/jprocessing#history
  82. https://github.com/kevincobain2000/jprocessing#libraries-and-modules
  83. https://github.com/kevincobain2000/jprocessing#tokenize-jtokenize-py
  84. https://github.com/kevincobain2000/jprocessing#cabocha-jcabocha-py
  85. https://github.com/kevincobain2000/jprocessing#kanji-katakana-hiragana-to-tokenized-romaji-jconvert-py
  86. https://github.com/kevincobain2000/jprocessing#longest-common-string-japanese-jprocessing-py
  87. https://github.com/kevincobain2000/jprocessing#similarity-between-two-sentences-jprocessing-py
  88. https://github.com/kevincobain2000/jprocessing#edict-japanese-dictionary-search-with-example-sentences
  89. https://github.com/kevincobain2000/jprocessing#sample-ouput-demo
  90. https://github.com/kevincobain2000/jprocessing#edict-dictionary-and-example-sentences-parser
  91. https://github.com/kevincobain2000/jprocessing#charset
  92. https://github.com/kevincobain2000/jprocessing#id1
  93. https://github.com/kevincobain2000/jprocessing#edict-search-py
  94. https://github.com/kevincobain2000/jprocessing#edict-examples-py
  95. https://github.com/kevincobain2000/jprocessing#sentiment-analysis-japanese-text
  96. https://github.com/kevincobain2000/jprocessing#id138-files-download-links
  97. https://github.com/kevincobain2000/jprocessing#how-to-use
  98. https://github.com/kevincobain2000/jprocessing#japanese-word-polarity-score
  99. https://github.com/kevincobain2000/jprocessing#contacts
 100. https://github.com/kevincobain2000/jprocessing# 
 101. http://sourceforge.net/projects/cabocha/
 102. https://github.com/kevincobain2000/jprocessing# 
 103. https://github.com/kevincobain2000/jprocessing
 104. http://www.jaist.ac.jp/~s1010205/jnlp
 105. http://www.jaist.ac.jp/~s1010205/
 106. http://readthedocs.org/docs/jprocessing/en/latest/
 107. http://pypi.python.org/pypi/jprocessing/0.1
 108. https://github.com/kevincobain2000/jprocessing# 
 109. https://github.com/kevincobain2000/jprocessing# 
 110. https://github.com/kevincobain2000/jprocessing# 
 111. https://github.com/kevincobain2000/jprocessing# 
 112. https://github.com/kevincobain2000/jprocessing# 
 113. http://code.google.com/p/cabocha/
 114. http://nltk.googlecode.com/svn/trunk/doc/book-jp/ch12.html#cabocha
 115. https://github.com/kevincobain2000/jprocessing# 
 116. https://github.com/kevincobain2000/jprocessing#katakanachart
 117. https://raw.github.com/kevincobain2000/jprocessing/master/src/jnlp/data/katakanachart.txt
 118. https://raw.github.com/kevincobain2000/jprocessing/master/src/jnlp/data/hiraganachart.txt
 119. https://github.com/kevincobain2000/jprocessing# 
 120. https://github.com/kevincobain2000/jprocessing# 
 121. http://en.wikipedia.org/wiki/minhash
 122. https://github.com/kevincobain2000/jprocessing# 
 123. https://github.com/kevincobain2000/jprocessing# 
 124. https://github.com/kevincobain2000/jprocessing# 
 125. http://www.csse.monash.edu.au/~jwb/edict.html
 126. http://www.csse.monash.edu.au/~jwb/kanjidic.html
 127. http://www.edrdg.org/
 128. http://www.edrdg.org/edrdg/licence.html
 129. https://github.com/kevincobain2000/jprocessing# 
 130. https://github.com/kevincobain2000/jprocessing# 
 131. http://www.csse.monash.edu.au/~jwb/edict.html
 132. https://github.com/kevincobain2000/jprocessing# 
 133. http://repo.or.cz/w/jbparse.git/blame/8e42831ca5f721c0320b27d7d83cb553d6e9c68f:/jbparse/edict.py
 134. https://github.com/kevincobain2000/jprocessing# 
 135. https://github.com/kevincobain2000/jprocessing# 
 136. http://nlpwww.nict.go.jp/wn-ja/eng/downloads.html
 137. http://sentiid138.isti.cnr.it/
 138. https://github.com/kevincobain2000/jprocessing# 0
 139. http://nlpwww.nict.go.jp/wn-ja/eng/downloads.html
 140. http://sentiid138.isti.cnr.it/
 141. https://github.com/kevincobain2000/jprocessing# 1
 142. https://github.com/kevincobain2000/jprocessing# 2
 143. https://github.com/kevincobain2000/jprocessing# 3
 144. https://github.com/site/terms
 145. https://github.com/site/privacy
 146. https://github.com/security
 147. https://githubstatus.com/
 148. https://help.github.com/
 149. https://github.com/contact
 150. https://github.com/pricing
 151. https://developer.github.com/
 152. https://training.github.com/
 153. https://github.blog/
 154. https://github.com/about
 155. https://github.com/kevincobain2000/jprocessing
 156. https://github.com/kevincobain2000/jprocessing

   hidden links:
 158. https://github.com/
 159. https://github.com/kevincobain2000/jprocessing
 160. https://github.com/kevincobain2000/jprocessing
 161. https://github.com/kevincobain2000/jprocessing
 162. https://help.github.com/articles/which-remote-url-should-i-use
 163. https://github.com/kevincobain2000/jprocessing#japanese-nlp-library
 164. https://github.com/kevincobain2000/jprocessing#1requirements
 165. https://github.com/kevincobain2000/jprocessing#11links
 166. https://github.com/kevincobain2000/jprocessing#12install
 167. https://github.com/kevincobain2000/jprocessing#13history
 168. https://github.com/kevincobain2000/jprocessing#2libraries-and-modules
 169. https://github.com/kevincobain2000/jprocessing#21tokenize-jtokenizepy
 170. https://github.com/kevincobain2000/jprocessing#22cabocha-jcabochapy
 171. https://github.com/kevincobain2000/jprocessing#23kanji--katakana-hiragana-to-tokenized-romaji-jconvertpy
 172. https://github.com/kevincobain2000/jprocessing#24longest-common-string-japanese-jprocessingpy
 173. https://github.com/kevincobain2000/jprocessing#25similarity-between-two-sentences-jprocessingpy
 174. https://github.com/kevincobain2000/jprocessing#3edict-japanese-dictionary-search-with-example-sentences
 175. https://github.com/kevincobain2000/jprocessing#31sample-ouput-demo
 176. https://github.com/kevincobain2000/jprocessing#32edict-dictionary-and-example-sentences-parser
 177. https://github.com/kevincobain2000/jprocessing#33charset
 178. https://github.com/kevincobain2000/jprocessing#34links
 179. https://github.com/kevincobain2000/jprocessing#35edict_searchpy
 180. https://github.com/kevincobain2000/jprocessing#36edict_examplespy
 181. https://github.com/kevincobain2000/jprocessing#4sentiment-analysis-japanese-text
 182. https://github.com/kevincobain2000/jprocessing#41id138-files-download-links
 183. https://github.com/kevincobain2000/jprocessing#42how-to-use
 184. https://github.com/kevincobain2000/jprocessing#43japanese-word-polarity-score
 185. https://github.com/kevincobain2000/jprocessing#5contacts
 186. https://github.com/
