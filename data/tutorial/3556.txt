   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]hacker noon
     * [9]latest
     * [10]editors' choice
     * [11]terms faq
     * [12]sign up for 2.0
     * [13]future of search
     __________________________________________________________________

learning ai if you suck at math         p6         math notation made easy!

   go to the profile of daniel jeffries
   [14]daniel jeffries (button) blockedunblock (button) followfollowing
   mar 15, 2017
   [1*b6wg86qovyfrvy0olgghoq.jpeg]

   if you   ve followed parts [15]1, [16]2, [17]3, [18]4, [19]5 and [20]7 of
   this series you know that you really don   t need a lot of math to get
   started with ai. you can dive right in with practical tutorials and
   books on the subject.

   however, there are lots of reasons to learn mathematical notation.

   maybe you just want to stretch yourself and learn a new skill? learning
   something outside of your comfort zone is a fantastic way to keep your
   mind sharp.

   or perhaps you   d like to start reading a few of the papers on
   [21]arxiv? you might even want to implement an exciting new research
   paper idea instead of waiting for someone else to put it on github.

   to do that you   ll need to know how to read those funny little symbols.

   maybe the greatest reasons to learn math notation is that it let   s you
   express complex ideas in a very compact way.

   without it, it would take pages and pages to explain every equation.

   yet even with all the resources out there it can still be intimidating
   to face a string of those alien characters.

   have no fear. i   m here to help.

   i   ll show you that learning these symbols is not as hard as you think.
   but there are a few things holding you back.

   first, if you   re like me, you hated math as a kid. i   ve discovered the
   key reason is that my teachers never bothered to answer the most
   important question:

   why?

   why am i doing this? how does this apply to my life?

   they just slapped a bunch of equations on the board and told me to
   memorize them. that didn   t work for me and i   m betting it doesn   t work
   for you.

   the good news is that if you   re interested in the exciting field of ai
   it   s a great answer to that question!

   now you have a reason to learn and apply it to real world problems. the
      why    is because you want to write a better image recognition program
   or an interface that understands natural language! maybe you even want
   to write your own algorithms some day?

   the second thing holding you back is the plethora of horrible
   explanations out there. the fact is most people are not very good at
   explaining things. most of the time people define math terms with more
   math terms. this creates a kind of infinite loop of misunderstanding.
   it   s like defining the word    elephant    by saying    an elephant is like
   an elephant.    great. now i understand. not!

   i   ll help you get to firmer ground by relating it to the real world and
   using analogies to things that you already know.
   [1*nqmh_0vq80ff4lnf435iuq.jpeg]

   i won   t be able to cover all the symbols you need in one article, so
   you   ll want to pick up this super compact guide to math symbols,
   [22]mathematical notation: a guide for engineers and scientists by
   edward r. scheinerman, if you haven   t already. (it was a late addition
   to my first [23]learning ai if you suck at math article, but it   s
   become one of my most frequently used books. it   s filled with
   highlights and dog eared pages. as my knowledge of various math
   disciplines expands i find myself going back to that book again and
   again.

   let   s get rolling.

   to start with, what is an algorithm?

   it   s really nothing more than a series of steps to solve a particular
   problem. you use algorithms all the time whether you know it or not.

   if you need to pack lunch for the kids, drop them off at school and get
   your dry cleaning before heading to work you   ve outlined a series of
   steps unconsciously to get from the kitchen to the office. that   s an
   algorithm. if your boss gives you six assignments that are competing
   for your time, you have to figure out the best way to finish them
   before the end of the day by choosing which ones to do first, second,
   in parallel, etc. that   s an algorithm.

   why is that important? because an equation is just a series of steps to
   solve a problem too.

   let   s start with some easy symbols and build up to some equations.

   math is about transforming things. we have an input and an output. we
   plug some things into the variables in our equation, iterate through
   the steps and get an output. computers are the same way. now, most of
   the magic behind neural nets comes from three branches of math:
     * id202
     * set theory
     * calculus

   what   s a set? it   s a collection of things, usually enclosed by curly
   brackets {} or square brackets. (math peeps don   t always agree on the
   best symbols for everything):
   [1*cyleiq_7calowa62wqp6ow.jpeg]
   a set

   remember that [24]we looked at tensors in part 4? that   s a set.
   [1*ia5magzgp7_zjx7x1avnog.jpeg]

   a set is usually indicated by a capital letter variable such as a or b
   or v or w. the letter itself doesn   t much matter as long as you   re
   consistent.

   however there are certain capital letters and symbols reserved for
   important, well known sets of numbers, such as:

       = an empty set ( a set with nothing in it yet ). by the way that
   symbol is a greek letter called    phi   . greek letters are used
   frequently in math. [25]you can see their upper and lowercase versions
   here.

   r = all real numbers (real numbers are pretty much every number that
   exists, including integers, fractions, transcendental numbers like pi
   (  )(3.14159265   ) but not including imaginary numbers (made up numbers
   to solve impossible equations) and infinity.

   z = all the integers (whole numbers without fractions, -1,-2, 0, 1, 2,
   3 etc)

   you can see a list of all the major reserved letters at the [26]math is
   fun website.

   all of these are sets and some of them are subsets, meaning they are
   wholly contained within the larger set like so:
   [1*icdwomitqdnnwtd56odx8q.png]
   go ahead and look up what q and n mean!

   in this case we would say that z (integers) is a subset of r (real
   numbers.)

   we could write that as such:
     * a is a subset of ( included in) b:

   [1*mjblf1pvcrmiqnq7lfxy5q.jpeg]
     * conversely, b is a superset of (or includes) a:

   [1*sap4-fdwosobul5d0hx1gg.jpeg]

   now why would i care if set b contains all of set a? good question.

   imagine that one set contains all the people who live in the united
   states, along with their age, address, etc. now imagine that the other
   set contains people who have higher incidences of heart disease. the
   overlap of the two sets could tell me what areas of the country have
   more problems with heart disease.

   each set has elements inside of it. what   s an element? just a part of
   the bigger set. let   s take a look at our tensor again.
   [1*di5dtlvhu4671a_xyj916w.jpeg]

   we denote elements of a set with a small italics variable, such as x.
   we use the weird looking e like symbol (though not an e) to denote that
   an element is a part of a set. we could write that as such:
   [1*coqh1aa1uyv6mfyierbopa.jpeg]

   that means x is an element of set a.

   we could also say x is not an element of a:.
   [1*-y9aohpbbcilfv8n80kbtq.jpeg]

   the better you get at reading these symbols the more you can
   intelligently    talk through    the string of characters in your mind.
   when you see the above now you can say    x is not an element of set a   .
   the better you can articulate what you   re reading the closer you are to
   understanding it.

   now, of course it   s impractical to write out all the elements of a set,
   so we might write out all the elements in a series in a special way. so
   let   s say we had a series of numbers increasing by one each time. we
   would write that as:

   x = {1,2,3,4   n}

   the dots just mean that the series continues until n, where n is a
   stand in variable for the    end of the series.    so if n = 10, the set
   contains the range of numbers from 1 to 10. if n = 100, that is the
   range of numbers from 1 to 100.

equation crazy

   sets are interesting when we transform them with id202. you
   already know most of the major algebra symbols like + for addition
   and         for subtraction.

   let   s look at two new symbols and an equation. first the symbols:
   [1*ftstk6-vhncwdl_lfufjtw.jpeg]

   what is a sum? it   s the addition of all the numbers in a series. let   s
   say we had a vector set a (remember that a vector is a single row or
   column of numbers) that contains: {1,2,3,4,5}.

   the sum of that series would be:

   1 + 2 + 3 + 4 + 5 = 15

   the product is multiplication of all the numbers. so if we take the
   same set a we get:

   1 x 2 x 3 x 4 x 5 =120

   we can represent an sum equation on a series of numbers compactly like
   this:
   [1*-pkp6_gqvcp5drphty1xhw.jpeg]

   so how do we read that? simple. check this out:
   [1*pvlogurtbcfot-joavexeq.jpeg]

   we start at the bottom with j, which is a variable. we move to the
   right and plug j into our expression. lastly, we know the series stops
   at the number given on the top. let   s see an example.
   [1*qean3-0jou1vdgc_wsw5aa.jpeg]

   if you   re a programmer, you might recognize this is a for loop!

   let   s create a little function for this equation in python:
def sum_x_range(x):
 j = 1
 output = []   # creates an empty list
 for k in range(0,5):  # starts a for loop
  z = x**j      # raises x to the power of j
  j = j + 1     # raises j by 1 until it hits n which is 5
  output.append[z]   # append the output to a list
 return sum(output)  # sum all the numbers in the list
print (sum_x_range(2))   # call the function with input 2 for x

   forgive my hideous python folks, but i   m going for clear, not compact.

   the ** symbol means to raise to the power of j. the function takes the
   variable x, which i supplied as 2. it then loops from 0 to 5 raising x
   by the power 1,2,3,4, 5 and appending those numbers to a list. it then
   runs a sum on that list to get the answer: 62

enter the matrix

   remember that a 2d tensor is called a matrix. it   s basically a
   spreadsheet, with rows and columns. first, you need to know how to
   refer to different parts of the matrix. this graphic lays it all out
   for you:
   [1*hobavg7xjxjfkqrdllcsyw.jpeg]

   to start we have a matrix a, which is denoted by a capital letter.

   that matrix has m rows and n columns, so we say it is an m x n matrix,
   using small, italics letters.

   rows are horizontal, aka left to right. (don   t be confused by the
   arrows, which point to i and j not the row   s direction. again rows are
   horizontal!)

   columns are vertical, aka up and down.

   in this case we have 4 x 5 matrix (aka a 2d tensor) because we have 4
   rows and 5 columns.

   each box is an element of the matrix. the position of those elements is
   indicated by a little italics a as well as a row indicator i and a
   column indicator j.

   so the 4 in the top row, second column is indicated by a1,2. the 3 in
   the second row, first column is a2,1.

   we won   t have time to go over all the types of matrix math here, but
   let   s take a look at one type to get your feet wet.

   the dot product is a very common operation in neural networks so let   s
   see it in action.

dot, dot, dot

   the dot product is how we multiply one matrix by another matrix.

   the dot product operation is symbolized by, you guessed it, a dot.

   a . b

   that   s the dot product of two scalars (aka single numbers), which are
   individual elements inside our matrix.

   we multiply matching elements between matrices of the same size and
   shape and then sum up.

   want to see the formula for multiplying one vector by another?
   [1*xuhspaqbvjeepktzyqftvq.jpeg]

   take a deep breath. you got this!

   we know all these symbols now.

   this is the formula for multiplying two equal length vectors. remember
   from [27]part 4 of learning ai if you suck at math         tensors
   illustrated with cats that a vector is a single row or column of
   numbers. each row or column is an individual vector in our matrix.

   basically we start at element one in matrix a and multiply it by
   element one in matrix b. then we move on to element a2 multiplied by
   element b2. we do this for all the elements until we reach the end,
      n   , and then sum them up (aka add them together).

   let   s see a visual representation of that in action.
   [1*nylc61bic9qosjbhfty41a.jpeg]

   now we can plug these numbers into our formula:
   [1*p4lmgakprruij0fde866la.jpeg]

   here   s another example for the next number in the output matrix.
   [1*md49o1hwwgburru_jsgid35.jpeg]
   [1*fzpb_nnwtq0qglutv51cbq.jpeg]

   here   s the final matrix after we   ve done all the math:
   [1*dsec4vcm_ap1r9w8hjqvng.jpeg]

   these examples come from the amazing [28]math is fun website. that site
   has a ton of great examples. i haven   t found any place that does it
   better so far.

   i added in the formulas to aid your understanding of reading formulas
   since they tend to skip over those so as not to confuse people. but you
   don   t have to be confused anymore.

winning learning strategies

   i want to finish up with a few strategies to help you learn faster.

   i   m an autodidact, which means i like to teach things to myself. i
   learn better when i have time to slow down and time to explore on my
   own. i make mistakes. my last article was a good example, as i had to
   correct a few bits.

   but here   s the thing about mistakes: they   re a good thing!

   they   re part of the process. there   s no getting around them, so just
   embrace them. if you   re making mistakes you   re learning. if you aren   t,
   you aren   t! simple as that.

   there   s an old joke in engineering.

   if you want to get the right answer, don   t ask for help. instead post
   the wrong answer and watch how many engineers jump in to correct you!

   engineers just can   t let wrong answers stand!

   it   s an old trick but it works well.

   it   s also important to note that you probably can   t read the
   [29]mathematical notation book unless you   ve plugged your way through
   some of the other books i outlined in [30]learning ai if you suck at
   math         part one or if you have a background in calculus, algebra and
   some geometry. you need a background for the terminology to make sense.
   however, i recommend getting the book anyway, because as you work
   through the other books, you can use it as a reference guide.

   i also recommend taking a slow approach. there   s no race here! you get
   no points for half-assing it. if you skip over a term you don   t
   understand, you   ll only end up having to go back to it.

   so stop, take your time to look up every symbol you don   t understand.
   it   s a slow and at times frustrating approach. but as you build up more
   and more knowledge it starts to go faster. you   ll find yourself
   understanding terms you never imagined you could ever understand.

   also, know that you   ll have to look things up from multiple locations.
   let   s face it, most people are not good teachers. they may understand
   the material but that doesn   t mean they can make it accessible to
   others. teaching is an art. that   s why the math is fun site is vastly
   superior to wikipedia when you are starting out. wikipedia is    correct   
   but often dry, hard to understand and sometimes confusing. as you learn
   more about this maybe you can even make wikipedia better.

   keep all these things in mind and you can   t go wrong in your ai
   learning adventures!

   ############################################

   be sure to check out the rest of this ongoing series. feel free to
   follow me because you want to be the first the read the latest articles
   as soon as they hit the press.

   [31]learning ai if you suck at math         part 1         this article guides you
   through the essential books to read if you were never a math fan but
   you   re learning it as an adult.

   [32]learning ai if you suck at math         part 2         practical
   projects         this article guides you through getting started with your
   first projects.

   [33]learning ai if you suck at math         part 3         building an ai dream
   machine         this article guides you through getting a powerful deep
   learning machine setup and installed with all the latest and greatest
   frameworks.

   [34]learning ai if you suck at math         part 4         tensors illustrated
   (with cats!)         this one answers the ancient mystery: what the hell is a
   tensor?

   [35]learning ai if you suck at math         part 5         deep learning and
   convolutional neural nets in plain english         here we create our first
   python program and explore the inner workings of neural networks!

   [36]learning ai if you suck at math         part 6         math notation made
   easy         still struggling to understand those funny little symbols? let   s
   change that now!

   [37]learning ai if you suck at math         part 7         the magic of natural
   language processing         understand how google and siri understand what
   you   re mumbling.

   ############################################

   if you enjoyed this tutorial, i   d love it if you could clap it up to
   recommend it to others. after that please feel free email the article
   off to a friend! thanks much.

   ############################################

   if you love my work please [38]do me the honor of visiting my patreon
   page because that   s how we change the future together. help me
   disconnect from the matrix and i   ll repay your generosity a hundred
   fold by focusing all my time and energy on writing, research and
   delivering amazing content for you and world.

   ###########################################
   [1*aotvcrh8vp0kdfi3-hmthg.png]

   a bit about me: i   m an author, engineer and serial entrepreneur. during
   the last two decades, i   ve covered a broad range of tech from linux to
   virtualization and containers.

   [39]you might like a copy of my first novel, the scorpion game, because
   it   s free. readers have called it    the first serious competition to
   neuromancer    and    like a double shot of fine whiskey after drinking
   watered down beer for weeks.   

   you can also [40]join my private facebook group, the nanopunk posthuman
   assassins, where we discuss all things tech, sci-fi, fantasy and more.

   ############################################

   i occasionally make coin from the links in my articles but i only
   recommend things that i own, use and love. check my [41]full policy
   here.

   ############################################

   thanks for reading!
   [42][1*0hqoaabq7xgpt-oyngiubg.png]
   [43][1*vgw1jka6hgnvwztsfmlnpg.png]
   [44][1*gkbpq1ruui0fvk2um_i4tq.png]

     [45]hacker noon is how hackers start their afternoons. we   re a part
     of the [46]@ami family. we are now [47]accepting submissions and
     happy to [48]discuss advertising & sponsorship opportunities.

     if you enjoyed this story, we recommend reading our [49]latest tech
     stories and [50]trending tech stories. until next time, don   t take
     the realities of the world for granted!

   [1*35tcjopcvq6lbb3i6wegqw.jpeg]

     * [51]machine learning
     * [52]artificial intelligence
     * [53]education
     * [54]mathematics
     * [55]ai if you suck at math

   (button)
   (button)
   (button) 723 claps
   (button) (button) (button) 9 (button) (button)

     (button) blockedunblock (button) followfollowing
   go to the profile of daniel jeffries

[56]daniel jeffries

   medium member since mar 2017

   i am an author, futurist, systems architect, and thinker.

     (button) follow
   [57]hacker noon

[58]hacker noon

   how hackers start their afternoons.

     * (button)
       (button) 723
     * (button)
     *
     *

   [59]hacker noon
   never miss a story from hacker noon, when you sign up for medium.
   [60]learn more
   never miss a story from hacker noon
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://hackernoon.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/1277d76a1fe5
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://hackernoon.com/learning-ai-if-you-suck-at-math-p6-math-notation-made-easy-1277d76a1fe5&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://hackernoon.com/learning-ai-if-you-suck-at-math-p6-math-notation-made-easy-1277d76a1fe5&source=--------------------------nav_reg&operation=register
   8. https://hackernoon.com/?source=logo-lo_mozypm8z7wtx---3a8144eabfe3
   9. https://hackernoon.com/latest-tech-stories/home
  10. https://hackernoon.com/editors-top-tech-stories/home
  11. https://hackernoon.com/your-most-frequently-asked-questions-about-our-terms-of-service-how-to-opt-out-and-more-66abf239a151
  12. https://hackernoon.com/sign-up-for-hacker-noon-2-0-9ff1ea0b60cc
  13. https://community.hackernoon.com/t/what-will-replace-google-search/992/14
  14. https://hackernoon.com/@dan.jeffries
  15. https://hackernoon.com/learning-ai-if-you-suck-at-math-8bdfb4b79037#.wb9byq3o3
  16. https://hackernoon.com/learning-ai-if-you-suck-at-math-part-two-practical-projects-47d7a1e4e21f#.x87xwbgx0
  17. https://hackernoon.com/learning-ai-if-you-suck-at-math-p3-building-an-ai-dream-machine-or-budget-friendly-special-d5a3023140ef#.9xzlb0cee
  18. https://hackernoon.com/learning-ai-if-you-suck-at-math-p4-tensors-illustrated-with-cats-27f0002c9b32#.g606budcf
  19. https://hackernoon.com/learning-ai-if-you-suck-at-math-p5-deep-learning-and-convolutional-neural-nets-in-plain-english-cda79679bbe3#.xjah79lsd
  20. https://hackernoon.com/learning-ai-if-you-suck-at-math-p7-the-magic-of-natural-language-processing-f3819a689386
  21. https://arxiv.org/list/cs.ai/recent
  22. http://amzn.to/2mvgwep
  23. https://hackernoon.com/learning-ai-if-you-suck-at-math-8bdfb4b79037#.wb9byq3o3
  24. https://hackernoon.com/learning-ai-if-you-suck-at-math-p4-tensors-illustrated-with-cats-27f0002c9b32#.g606budcf
  25. https://en.wikipedia.org/wiki/greek_letters_used_in_mathematics,_science,_and_engineering
  26. http://www.mathsisfun.com/sets/number-types.html
  27. https://hackernoon.com/learning-ai-if-you-suck-at-math-p4-tensors-illustrated-with-cats-27f0002c9b32#.g606budcf
  28. http://www.mathsisfun.com/algebra/matrix-multiplying.html
  29. http://amzn.to/2mvgwep
  30. https://hackernoon.com/learning-ai-if-you-suck-at-math-8bdfb4b79037#.wb9byq3o3
  31. https://hackernoon.com/learning-ai-if-you-suck-at-math-8bdfb4b79037#.ng7ggn5d9
  32. https://hackernoon.com/learning-ai-if-you-suck-at-math-part-two-practical-projects-47d7a1e4e21f#.yo1o1ar5h
  33. https://hackernoon.com/learning-ai-if-you-suck-at-math-p3-building-an-ai-dream-machine-or-budget-friendly-special-d5a3023140ef#.6frka033t
  34. https://hackernoon.com/learning-ai-if-you-suck-at-math-p4-tensors-illustrated-with-cats-27f0002c9b32#.2jpelkuhd
  35. https://hackernoon.com/learning-ai-if-you-suck-at-math-p5-deep-learning-and-convolutional-neural-nets-in-plain-english-cda79679bbe3#.xjah79lsd
  36. https://hackernoon.com/learning-ai-if-you-suck-at-math-p6-math-notation-made-easy-1277d76a1fe5
  37. https://hackernoon.com/learning-ai-if-you-suck-at-math-p7-the-magic-of-natural-language-processing-f3819a689386
  38. https://www.patreon.com/danjeffries
  39. http://meuploads.com/join-my-readers-group/
  40. https://www.facebook.com/groups/1736763229929363/
  41. http://meuploads.com/disclosure/
  42. http://bit.ly/hackernoonfb
  43. https://goo.gl/k7xybx
  44. https://goo.gl/4ofytp
  45. http://bit.ly/hackernoon
  46. http://bit.ly/atamiatami
  47. http://bit.ly/hackernoonsubmission
  48. mailto:partners@amipublications.com
  49. http://bit.ly/hackernoonlatestt
  50. https://hackernoon.com/trending
  51. https://hackernoon.com/tagged/machine-learning?source=post
  52. https://hackernoon.com/tagged/artificial-intelligence?source=post
  53. https://hackernoon.com/tagged/education?source=post
  54. https://hackernoon.com/tagged/mathematics?source=post
  55. https://hackernoon.com/tagged/ai-if-you-suck-at-math?source=post
  56. https://hackernoon.com/@dan.jeffries
  57. https://hackernoon.com/?source=footer_card
  58. https://hackernoon.com/?source=footer_card
  59. https://hackernoon.com/
  60. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  62. https://hackernoon.com/@dan.jeffries?source=post_header_lockup
  63. https://medium.com/p/1277d76a1fe5/share/twitter
  64. https://medium.com/p/1277d76a1fe5/share/facebook
  65. https://hackernoon.com/@dan.jeffries?source=footer_card
  66. https://medium.com/p/1277d76a1fe5/share/twitter
  67. https://medium.com/p/1277d76a1fe5/share/facebook
