
   [1]

the stanford natural language processing group

the stanford nlp group

     * [2]people
     * [3]publications
     * [4]research blog
     * [5]software
     * [6]teaching
     * [7]local

                            stanford dependencies

      [8]universal dependencies | [9]download | [10]about | [11]ongoing
       projects | [12]sd for english | [13]sd for chinese | [14]other
         languages | [15]other parsers | [16]mailing lists | [17]gui

universal dependencies

   since version 3.5.2 the [18]stanford parser and [19]stanford corenlp
   output grammatical relations in the universal dependencies v1
   representation by default. take a look at the [20]universal
   dependencies v1 documentation for a detailed description of the v1
   representation, its set of relations, and links to dependency treebank
   downloads. you might also want to look at the [21]the current (v2)
   universal dependencies documentation, but we have yet to update our
   tools to this representation. more information on the universal
   dependencies converter and the enhanced representation can be found in
   [22]this paper.

   if you have an english constituency treebank in id32
   (s-expression) format in the file or directory treebank, you can use
   our code to convert it to a file of basic universal dependencies in
   [23]conll-u format with this command:

     java -mx1g edu.stanford.nlp.trees.ud.universaldependenciesconverter
     -treefile treebank > treebank.conllu

stanford dependencies

   we also still support the original stanford dependencies representation
   as described on this page and in the [24]original papers. to output
   relations in the original stanford dependencies representation use the
   -originaldependencies option when running the parser or the
   -parse.originaldependencies option when running a corenlp pipeline with
   the pid18 parser. if you are using the [25]neural network dependency
   parser and want to get the original stanford dependencies, you have to
   use the model trained on a corpus annotated with the stanford
   dependencies representation using the following option:

     -depparse.model "edu/stanford/nlp/models/parser/nndep/english_sd.gz"

download

   the dependency code is part of the stanford parser. go [26]here to
   download a version.

about

   stanford dependencies provides a representation of grammatical
   relations between words in a sentence. they have been designed to be
   easily understood and effectively used by people who want to extract
   textual relations. stanford dependencies (sd) are triplets: name of the
   relation, governor and dependent. the standard dependencies for the
   sentence bills on ports and immigration were submitted by senator
   brownback, republican of kansas are given below, as well as two
   graphical representations: the standard dependencies (collapsed and
   propagated) and the basic dependency representation in which each word
   in the sentence (except the head of the sentence) is the dependent of
   one other word (no collapsing, no propagation).

   dependencies for bills on ports and immigration were submitted by
   senator brownback, republican of kansas figure 1. standard stanford
   dependencies (collapsed and propagated) figure 2. basic dependencies

     nsubjpass(submitted, bills)
     auxpass(submitted, were)
     agent(submitted, brownback)
     nn(brownback, senator)
     appos(brownback, republican)
     prep_of(republican, kansas)
     prep_on(bills, ports)
     conj_and(ports, immigration)
     prep_on(bills, immigration)

   [brownback_ccprocessed.png] [brownback-uncollapsed.png]

ongoing projects

   we created a gold standard dependency corpus on top of the english web
   treebank ([27]ldc2012t13). we manually annotated 254,830 words with
   [28]sd for english. the effort is meant to address the scarcity of both
   gold standard dependency corpora for english and annotated resources
   for parsing web test. this resource is described here:

     natalia silveira, timothy dozat, marie-catherine de marneffe, samuel
     r. bowman, miriam connor, john bauer and christopher d. manning.
     2014. [29]a gold standard dependency corpus for english. in lrec
     2014.

   this annotation effort has led to refinements of stanford dependencies.
   we describe changes to the standard and propose analyses for a few
   syntactic constructions of interest, to be found in the following
   paper:

     marie-catherine de marneffe, miriam connor, natalia silveira, samuel
     r. bowman, timothy dozat and christopher d. manning. 2013. [30]more
     constructions, more genres: extending stanford dependencies. in
     depling 2013.

   we are now primarily working on an improved taxonomy to capture
   grammatical relations across languages, including morphologically rich
   ones. a first version of this new standard, called universal
   dependencies, is described here:

     marie-catherine de marneffe, natalia silveira, timothy dozat, katri
     haverinen, filip ginter, joakim nivre, and christopher d. manning.
     2014. [31]universal stanford dependencies: a cross-linguistic
     typology. in lrec 2014.

   a more recent version of universal dependencies is described in the
   following two papers:

     joakim nivre, marie-catherine de marneffe, filip ginter, yoav
     goldberg, jan haji  , christopher d. manning, ryan mcdonald, slav
     petrov, sampo pyysalo, natalia silveira, reut tsarfaty, and daniel
     zeman. 2016. [32]universal dependencies v1: a multilingual treebank
     collection. in lrec 2016.

     sebastian schuster and christopher d. manning. 2016. [33]enhanced
     english universal dependencies: an improved representation for
     natural language understanding tasks. in lrec 2016.

   the most up to date version of universal depencies is documented online
   at [34]http://www.universaldependencies.org.

sd for english

   the english version of the stanford dependencies has been developed by
   marie-catherine de marneffe, bill maccartney, and christopher manning.
   all details about the english dependencies can be found in the manual:

     marie-catherine de marneffe and christopher d. manning. 2008.
     [35]stanford dependencies manual.

   the [36]manual contains a description of all the existing english
   grammatical relations in the representation. it explains the
   differences between the five types of representation available, and how
   such types of representation can be obtained. it also gives references
   to further discussion and use of the stanford dependencies. the
   dependencies are produced using hand-written [37]tregex patterns over
   phrase-structure trees as described in:

     marie-catherine de marneffe, bill maccartney and christopher d.
     manning. 2006. [38]generating typed dependency parses from phrase
     structure parses. in lrec 2006.

   the main ideas motivating the stanford dependency representation appear
   in this paper:

     marie-catherine de marneffe and christopher d. manning. 2008.
     [39]the stanford typed dependencies representation. in coling 2008
     workshop on cross-framework and cross-domain parser evaluation.

   the definition of the set of dependencies has evolved a little over the
   years, and the particular patterns used to convert phrase structure
   trees to dependencies have been improved quite a bit. hence, if you are
   publishing a paper using stanford dependencies, we really appreciate it
   if you could indicate precisely which version you are using. this is
   easily done by citing the version of the stanford parser code used.

   in practice, the dependencies can be obtained using our software in two
   ways. either by using the [40]stanford parser with the -outputformat
   typeddependencies option on raw text, or directly on phrase-structure
   trees using the englishgrammaticalstructure class available in the
   parser package. if you have an english constituency treebank in penn
   treebank (s-expression) format in the file or directory treebank, you
   can use our code to convert it to a file of basic stanford dependencies
   in conll-x format with this command:

     java -mx1g edu.stanford.nlp.trees.englishgrammaticalstructure -basic
     -keeppunct -conllx -treefile treebank > treebank.sd

   for english, five different variants of the dependencies are available,
   and different options can be used to get these. the default
   representation is the "ccprocessed" one, which collapses and propagates
   dependencies (as shown in figure 1, in contrast to figure 2, which
   shows the "basic" dependencies, which are not collapsed nor
   propagated). for more details, refer to section 5 of the [41]stanford
   dependencies manual.

   here are some examples of stanford dependencies representations of
   sentences, originating from the [42]coling 2008 workshop on
   cross-framework and cross-domain parser evaluation:
   [43]required-wsj02.stanford, [44]optional-wsj02.stanford,
   [45]genia.stanford. only the required wsj set were hand-verified; the
   representations in the other two sets were automatically generated.

   a corpus of english biomedical texts, with hand-corrected annotations
   in a slight variant of the stanford typed dependency format is
   available from [46]the bioinfer project.

sd for chinese

   stanford dependencies are also available for chinese. the chinese
   dependencies have been developed by huihsin tseng and pi-chuan chang. a
   brief description of the chinese grammatical relations can be found in
   [47]this paper.
   if you have a version of the ldc chinese treebank (or some other
   chinese constituency treebank in id32 s-expression format) in
   the file or directory treebank, you can use our code to convert it to a
   file of basic chinse stanford dependencies in conll-x format with this
   command:

     java -mx1g
     edu.stanford.nlp.trees.international.pennchinese.chinesegrammaticals
     tructure -basic -keeppunct -conllx -treefile treebank > treebank.csd

other languages

   versions of stanford dependencies have also been developed by outside
   groups for a number of other languages. two prominent examples are
   [48]finnish (the turku dependency treebank) and [49]persian (the
   uppsala persian dependency treebank). there is now a multi-site effort
   to produce dependency treebanks over a broad range of languages
   adopting a compatible dependency taxonomy. more details about this
   universal dependency treebank can be found in the lrec 2014 and lrec
   2016 papers mentioned above, in [50]the current treebank release, and
   in new [51]documentation.

other parsers

   while the original and canonical approach to generating the stanford
   dependencies is using the stanford parser, there are now many other
   parsers which produce them, which may offer better speed or precision.
   any phrase structure parser that constructs ptb style trees can be
   used, in addition to any trainable dependency parser. when using an
   alternative phrase structure parser, the stanford parser class
   englishgrammaticalstructure is used to extract dependencies from the
   resulting constituent parse trees. trainable dependency parsers can
   produce the basic stanford dependency representation. this is a
   projective variant of the stanford dependencies that can be transformed
   into the default representation, ccprocessed, using
   englishgrammaticalstructure.

   the table below summarizes some methods for generating the stanford
   dependencies along with the speed and accuracy of each approach on
   section 22 of the id32. links are provided to the
   corresponding software packages and trained parsing models (some of the
   dependency models were trained by us). all the accuracies and timings
   here are for sds corresponding to stanford parser version 1.6.2. the
   tree or basic dependency output is in each case converted to
   ccprocessed dependencies using our englishgrammaticalstructure class,
   and then evaluation is on ccprocessed dependencies. (i.e., you cannot
   directly compare these numbers with results on recovering stanford
   basic dependencies, which is an easier task.)

   approach labeled attachment (f1) time (mm:ss) links
   constituent
   charniak-johnson default (t210) 89.1 11:18 [52][software]
   t50 86.7   3:32
   t10 75.7   2:17
   berkeley parser 87.9 10:14 [53][software][54][model]
   bikel 85.3 29:57 [55][software][56][model data]
   stanford (englishpid18) 84.2 11:05 [57][software]
   dependency
   ensemble malt 82.4   1:56 [58][software][59][model] [[60]paper]
   maltparser nivre eager, id166 poly deg:2 81.1   3:23
   [61][software][62][model we built/used] [63][english maltparser model]
   [64][english maltparser]
   nivre eager, liblinear 76.2   0:16 [65][software][66][model we
   built/used] [67][english maltparser model] [68][english maltparser]
   mstparser (eisner) 78.8   6:01 [69][software][70][model]
   relex 48.1 31:38 [71][software]
   easy-first parser [72][software]

   the charniak-johnson parser includes a model for parsing english. the
   bikel parser requires users to train their own model, which can be done
   using the included train-from-observed utility and the model data
   linked above. the relex package is rule-based and provides a stanford
   dependency compatibility mode.

   for the dependency parsers, part-of-speech (pos) tags were generated
   using the [73]stanford pos tagger and the included left3words-wsj-0-18
   model. times represent the total time required to produce the
   dependencies including: id52 (if applicable), parsing, and
   extraction of the ccprocessed stanford dependency representation.
   benchmarking was done on a dual cpu intel xeon e5520. multithreading
   was disabled for the charniak-johnson parser, in order to obtain a per
   cpu-core estimate of parsing speed.

   in general, all parsers were run in their default out-of-the-box
   configurations. but, in addition, for the charniak-johnson parser, the
   table above also shows the speed and accuracy trade-offs from varying
   the amount of search by setting different t values (by default t =
   210). the charniak-johnson parser allows users to trade off parsing
   accuracy for speed by adjusting how liberal the system is about
   expanding edges after the best-first-search has found one complete
   parse of the sentence: they constrain themselves to only examine
   tval/10 times more edges in search of a better parse.

   for more information about these parsing accuracy vs. speed trade-offs
   when generating stanford dependencies, see:

     [74]daniel cer, [75]marie-catherine de marneffe, [76]daniel
     jurafsky, and [77]christopher d. manning. 2010. parsing to stanford
     dependencies: trade-offs between speed and accuracy. in [78]7th
     international conference on language resources and evaluation
     ([79]lrec 2010). [[80]pdf, [81]bib]

mailing lists

   to ask questions about the dependencies, you can use the same lists as
   for the parser, each @lists.stanford.edu:
    1. parser-user this is the best list to post to in order to ask
       questions, make announcements, or for discussion among parser
       users. join the list via [82]this webpage or by emailing
       parser-user-join@lists.stanford.edu. (leave the subject and message
       body empty.) you can also [83]look at the list archives.
    2. parser-announce this list will be used only to announce new parser
       versions. so it will be very low volume (expect 1-3 message a
       year). join the list via [84]this webpage or by emailing
       parser-announce-join@lists.stanford.edu. (leave the subject and
       message body empty.)
    3. parser-support this list goes only to the parser maintainers. it's
       a good address for licensing questions, etc. for general use and
       support questions, you're better off joining and using parser-user.
       you cannot join parser-support, but you can mail questions to
       parser-support@lists.stanford.edu.

gui

   bernard bou developed a gui focusing on the typed dependencies,
   including an editor:

     [85]grammarscope: stanford parser grammatical relation browser

   we now have a nice visualization of stanford dependencies in our
   [86]online stanford corenlp demo, provided by [87]brat.

stanford nlp group

   gates computer science building
   353 serra mall
   stanford, ca 94305-9020
   [88]directions and parking

affiliated groups

     * [89]stanford ai lab
     * [90]stanford infolab
     * [91]csli

connect

     * [92]stack overflow
     * [93]github
     * [94]twitter

local links

   [95]nlp lunch    [96]nlp reading group
   [97]nlp seminar    [98]calendar
   [99]javanlp ([100]javadocs)    [101]machines
   [102]ai speakers    [103]q&a

references

   visible links
   1. https://nlp.stanford.edu/
   2. https://nlp.stanford.edu/people/
   3. https://nlp.stanford.edu/pubs/
   4. https://nlp.stanford.edu/blog/
   5. https://nlp.stanford.edu/software/
   6. https://nlp.stanford.edu/teaching/
   7. https://nlp.stanford.edu/new_local/
   8. https://nlp.stanford.edu/software/stanford-dependencies.shtml#universal
   9. https://nlp.stanford.edu/software/stanford-dependencies.shtml#download
  10. https://nlp.stanford.edu/software/stanford-dependencies.shtml#about
  11. https://nlp.stanford.edu/software/stanford-dependencies.shtml#ongoing
  12. https://nlp.stanford.edu/software/stanford-dependencies.shtml#english
  13. https://nlp.stanford.edu/software/stanford-dependencies.shtml#chinese
  14. https://nlp.stanford.edu/software/stanford-dependencies.shtml#languages
  15. https://nlp.stanford.edu/software/stanford-dependencies.shtml#methods
  16. https://nlp.stanford.edu/software/stanford-dependencies.shtml#mail
  17. https://nlp.stanford.edu/software/stanford-dependencies.shtml#gui
  18. http://nlp.stanford.edu/software/lex-parser.html
  19. http://nlp.stanford.edu/software/corenlp.html
  20. http://universaldependencies.org/docsv1/
  21. http://universaldependencies.github.com/docs/
  22. http://nlp.stanford.edu/~sebschu/pubs/schuster-manning-lrec2016.pdf
  23. http://universaldependencies.org/format.html
  24. https://nlp.stanford.edu/software/stanford-dependencies.shtml#english
  25. http://nlp.stanford.edu/software/nndep.html
  26. http://nlp.stanford.edu/software/lex-parser.html#download
  27. https://catalog.ldc.upenn.edu/ldc2012t13
  28. https://nlp.stanford.edu/software/stanford-dependencies.shtml#english
  29. http://nlp.stanford.edu/pubs/gold_lrec14.pdf
  30. http://www.ling.ohio-state.edu/~mcdm/papers/depling.pdf
  31. http://nlp.stanford.edu/pubs/usd_lrec14_paper_camera_ready.pdf
  32. http://nlp.stanford.edu/pubs/nivre2016ud.pdf
  33. http://nlp.stanford.edu/~sebschu/pubs/schuster-manning-lrec2016.pdf
  34. http://www.universaldependencies.org/
  35. https://nlp.stanford.edu/software/dependencies_manual.pdf
  36. https://nlp.stanford.edu/software/dependencies_manual.pdf
  37. https://nlp.stanford.edu/software/tregex.html
  38. http://nlp.stanford.edu/pubs/lrec06_dependencies.pdf
  39. http://nlp.stanford.edu/pubs/dependencies-coling08.pdf
  40. http://nlp.stanford.edu/software/lex-parser.html
  41. https://nlp.stanford.edu/software/dependencies_manual.pdf
  42. http://lingo.stanford.edu/events/08/pe/
  43. https://nlp.stanford.edu/software/stanford-dependencies/required-wsj02.stanford
  44. https://nlp.stanford.edu/software/stanford-dependencies/optional-wsj02.stanford
  45. https://nlp.stanford.edu/software/stanford-dependencies/genia.stanford
  46. http://mars.cs.utu.fi/bioinfer/
  47. http://nlp.stanford.edu/pubs/ssst09-chang.pdf
  48. http://bionlp.utu.fi/fintreebank.html
  49. http://stp.lingfil.uu.se/~mojgan/updt.html
  50. http://www.universaldependencies.org/
  51. http://www.universaldependencies.org/
  52. ftp://ftp.cs.brown.edu/pub/nlparser/reranking-parseraug06.tar.gz
  53. http://code.google.com/p/berkeleyparser/
  54. http://berkeleyparser.googlecode.com/files/eng_sm5.gr
  55. http://www.cis.upenn.edu/~dbikel/software.html#stat-parser
  56. http://www.cis.upenn.edu/~dbikel/download/dbparser/wsj-02-21.observed.gz
  57. http://nlp.stanford.edu/software/lex-parser.html
  58. http://www.surdeanu.name/mihai/ensemble/index.php
  59. http://www.surdeanu.name/mihai/ensemble/models.tar.gz
  60. http://nlp.stanford.edu/pubs/naacl10-parsing-surdeanu.pdf
  61. http://maltparser.org/
  62. http://nlp.stanford.edu/software/stanford-dependencies/nivre_eager_simkernel.mco
  63. http://maltparser.org/mco/english_parser/engmalt.poly.mco
  64. http://maltparser.org/mco/english_parser/engmalt.html
  65. http://maltparser.org/
  66. http://nlp.stanford.edu/software/stanford-dependencies/nivre_eager.mco
  67. http://maltparser.org/mco/english_parser/engmalt.linear.mco
  68. http://maltparser.org/mco/english_parser/engmalt.html
  69. http://maltparser.org/
  70. http://nlp.stanford.edu/software/stanford-dependencies/mst-eisner.mod.gz
  71. http://opencog.org/wiki/relex
  72. http://www.cs.bgu.ac.il/~yoavg/software/sdparser/
  73. http://nlp.stanford.edu/software/tagger.html
  74. http://www.dmcer.net/
  75. http://www.stanford.edu/~mcdm/
  76. http://www.stanford.edu/~jurafsky/
  77. http://nlp.stanford.edu/~manning/
  78. http://www.lrec-conf.org/lrec2010/
  79. http://www.lrec-conf.org/lrec2010/
  80. https://nlp.stanford.edu/pubs/lrecstanforddeps_final_final.pdf
  81. https://nlp.stanford.edu/pubs/lrecstanforddeps_final_final.bib
  82. https://mailman.stanford.edu/mailman/listinfo/parser-user
  83. https://mailman.stanford.edu/pipermail/parser-user/
  84. https://mailman.stanford.edu/mailman/listinfo/parser-announce
  85. http://grammarscope.sourceforge.net/
  86. http://nlp.stanford.edu:8080/corenlp/
  87. http://brat.nlplab.org/
  88. http://forum.stanford.edu/visitors/directions/gates.php
  89. http://ai.stanford.edu/
  90. http://infolab.stanford.edu/
  91. https://www-csli.stanford.edu/
  92. http://stackoverflow.com/tags/stanford-nlp
  93. https://github.com/stanfordnlp/corenlp
  94. https://twitter.com/stanfordnlp
  95. https://nlp.stanford.edu/local/nlp_lunch.shtml
  96. http://nlp.stanford.edu/read/
  97. http://nlp.stanford.edu/seminar/
  98. https://nlp.stanford.edu/local/calendar.shtml
  99. https://nlp.stanford.edu/javanlp/
 100. https://nlp.stanford.edu/nlp/javadoc/javanlp/
 101. https://nlp.stanford.edu/local/machines.shtml
 102. http://ai.stanford.edu/portfolio-view/distinguished-speaker-series
 103. https://nlp.stanford.edu/local/qa/

   hidden links:
 105. https://nlp.stanford.edu/software/stanford-dependencies.shtml
