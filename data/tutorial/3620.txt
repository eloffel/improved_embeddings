 [frown.gif] three sins of authors in computer science and math [frown.gif]

   over the last seven years, i've read perhaps four hundred papers in
   computer science and math. thirty or so were well-written. these
   anomalies aside, extracting meaning from most of the papers was like
   sucking a camel through the eye of the proverbial needle upon which a
   thousand angels were dancing on my head, if i mix my metaphors right.

   most of us learn how to write technical articles by osmosis. after
   reading a hundred or so papers, we unconsciously pick up the common
   patterns of the field and begin to imitate them. this phenomenon is
   largely beneficial, but there are several truly odious habits that are
   almost universally and inadvertently adopted without critical
   evaluation. hence, i've distilled below a few of my opinions on what i
   see in the math and computing literature, and on how you can avoid
   annoying me in the future.

   i realize that the first priority of computer scientists and
   mathematicians is not literary artistry. i am not complaining about
   mere bad writing; any scientific field will have its fair share, and
   i'm quite willing to accept the occasional incoherent paragraph and
   unlabeled axis as the price i have to pay for being more employable
   than a literature major. rather, my complaints here are about bad
   writing that's considered good. the crimes i enumerate below are
   practices that are accepted or encouraged and occasionally even
   enforced. some are sins that even good authors feel obliged to commit.

   all of the specific examples i give are taken from papers published in
   refereed conferences or journals; most of these papers have, in my
   opinion, high technical merit.

  grandmothering

   every paper needs an introduction. in fact, the introduction is the
   most important part of your paper, because few of your readers will
   ever read beyond it. and there's not much hope that any of them will if
   you don't grab their attention from the start. so it's a mystery why so
   many papers begin with twaddle like this excerpt from a conference on
   high performance computing.

     massively parallel computers (mpcs), characterized by their scalable
     architectures, are a viable platform on which to solve the so-called
     grand-challenge problems. these distributed-memory systems are
     expandable and can achieve a proportional performance increase
     without changing the basic architecture. in order to take full
     advantage of scalable hardware, the application software must also
     be scalable to exploit the increased computing capacity.

   if you find your thoughts drifting away, don't feel bad; we have
   evidence that the authors felt the same way - consider the
   near-meaninglessness of the second sentence. the real weakness, though,
   is that this extreme form of ``grandmothering'' has no other function
   than to tell you something you already know, and wouldn't be
   comprehensible if you didn't already know. the paragraph is entirely
   superfluous to any reader who knows the meanings of ``scalable'' and
   ``grand-challenge problems.'' other readers, who don't know the
   buzzwords, are discouraged from continuing. everybody loses.

   i'm not going to give you the usual advice that you fuss and fret over
   your introduction until it's perfectly attuned to the psychological
   motivations of every potential reader. if everybody had time to do
   that, bad writing wouldn't be a problem. instead, i'm going to offer
   advice that will save you time: get to the point!

   the authors of the excerpt above should recognize that the primary
   objective of the first paragraph is to explain the purpose of their
   paper and thereby interest you in reading the second paragraph. but
   they don't. they understand that an introduction is obligatory, but
   they don't really know what to do with one, and they're too timid to
   jump directly to the central idea of their paper - perhaps they've
   never seen anyone else do that. but, hey, all the other supercomputing
   papers they've ever read start with the same paragraph, so it can't be
   too bad, right?

   a more subtle form of grandmothering appears in this excerpt from a
   id202 conference.

     in recent years, the study of preconditioners for iterative methods
     for solving large linear systems of equations, arising from
     discretizations of stationary boundary value problems of
     mathematical physics, has become a major focus of numerical analysts
     and engineers. ...

   in a paper directed at newcomers to the field, this introductory
   sentence might be appropriate. however, the bulk of the paper is
   accessible only to those sufficiently expert in the field to know
   everything in the first two paragraphs of the introduction cold. so why
   bother?

   rather than telling the reader what the paper is about, this author
   begins by explaining how important and interesting his field of study
   is. this is an awful (and awfully common) habit. to justify your work
   by pointing out that it's ``a major focus of numerical analysts and
   engineers'' betrays a little insecurity, and isn't a good justification
   anyway.

   in conclusion, every column inch devoted to convincing parallel
   computing experts of the importance of scalability, or introducing
   preconditioners to multigrid gurus, is fifteen seconds brutally stolen
   from their lifespans.

  a table of contents in a paragraph

   at the end of many introductions, i find an oozing cyst like this
   moribund specimen:

     this paper is organized as follows. in section 2, we describe local
     transformations in k dimensions. in section 3, we describe an
     incremental approach for constructing k-d delaunay triangulations
     using local transformations. in section 4, we prove that this
     approach always constructs a delaunay triangulation. in section 5,
     we describe three algorithms and a data structure based on this
     approach. in section 6, we discuss the time complexities of the
     algorithms and present experimental results from our implementation
     of these algorithms.

   upon close examination one finds that this is really a table of
   contents, in paragraph format and without page numbers (yechh). it's
   choppy and, even though there is some logical flow from one sentence to
   the next, it's difficult to read. it's barely useful as an index
   anyway, as it does little more than repeat the section titles, which
   are more easily absorbed by skimming the article. i've learned to skip
   these eyesores without so much as a direct glance, and i bet you have
   too. unfortunately, they've become institutionalized, and some
   researchers even hold them up as a staple of proper technical writing.
   i bet these same people wear polyester to the lab each day.

   some readers, having had no better medium from which to form a sense of
   aesthetics, might not see why i find these shotgun summaries so
   atrocious. allow me to put forth a better alternative. the odd thing
   about the paragraph quoted above is that it appears at the end of an
   otherwise well-written two-page introduction. i submit that the
   references to each section of the paper should have been folded into
   the introduction, each appearing in its logical place. the sections of
   the paper follow a clear logical progression; the introduction should
   echo that progression, and include references to sections of the paper
   as appropriate. if it is clumsy to have the introduction echo the paper
   precisely, it's okay to refer to a few sections out of order.

   furthermore, each section number should be listed after its
   description, and not before. the formula is ``get them interested, then
   tell them where the information is.'' nobody on the face of the earth
   gives a damn what section 5 is about. but once you've got them
   interested in the cool results, they'll wanna know where to find them.
   a sentence beginning, ``in section 5, we...'' is off-putting because
   there's no compelling reason to discuss section 5 before its contents.
   you should write every sentence as if they'll toss your paper if the
   first half of the sentence isn't interesting.

   don't mention your ``conclusions'' section at all unless you want to
   point out something specific about it. your readers can find it without
   your help, thank you.

   i shan't torture you by rewriting the author's entire introduction, but
   here's a sample paragraph, lifted from the middle of the introduction,
   which i've modified (by adding three words) to give some idea of what i
   have in mind. it still doesn't sound as good as it would had the
   introduction been written from scratch with my suggestions in mind, but
   it'll do.

     we are interested in algorithms that can construct k-d delaunay
     triangulations...[five and a half sentences omitted]. in this paper,
     we prove that local transformations can be used to construct k-d
     delaunay triangulations using an incremental approach, and present
     algorithms in section 5 that are k-d versions of those in [13].

   (actually, i wouldn't have written it like this. for a single author to
   refer to himself as ``we'' is a custom that continues to mystify me,
   and i don't agree that ``[13]'' is a noun. but enough, already.)

  conclusions that don't

   what's wrong with this excerpt, which occurs at the beginning of a
   section entitled ``conclusions''?

     we have proven tight bounds on the cardinality of a triangulation in
     terms of local feature size and the smallest angle, up to constant
     factors. we have also shown that two triangulations with similar
     local feature size must have similar cardinality, up to a 1/  
     factor.

   the answer? why, it's not a conclusion at all. it's an introduction.
   indeed, all the information in these two sentences can be found in this
   paper's introduction, and in its abstract too.

   i once read a paper in which the conclusions were an almost exact copy
   of the introduction, changing only the tense of the verbs. that's
   unforgivable.

   a lot of people have picked up the misconception that they should
   conclude their paper with a summary. the dictum is, ``tell them what
   you're going to tell them, then tell them, then tell them what you told
   them.'' well, yes, yes, and no.

   conclusions should synthesize the results of your paper and separate
   what is significant from what is not. ideally, they should add new
   information and observations that put your results in perspective.
   here's a simple test: if somebody reads your conclusions before reading
   the rest of your paper, will they fully understand them? if the answer
   is ``yes,'' there's probably something wrong. a good conclusion says
   things that become significant after the paper has been read. a good
   conclusion gives perspective to sights that haven't yet been seen at
   the introduction. a conclusion is about the implications of what the
   reader has learned. of course, a conclusion is also an excellent place
   for conjectures, wish lists, and open problems.

   if you don't have any conclusions, be honest with yourself and don't
   write a ``conclusions'' section. you've probably been indoctrinated
   with the notion that it's bad to end a paper without conclusions. i
   absolutely disagree. but whether it's bad or not, it's surely worse to
   end a paper without conclusions and yet include a section entitled
   ``conclusions'' anyway.

  a postscript on fbas

   really bad acronyms, or fbas, are spawned by fnpls (nerdy project
   leaders) when naming new systems. i cannot comprehend why projects like
   ftmps and numachine were not given more charming monikers such as
   infectoid or puggsley or vomitsauce. these names would stick in
   people's minds as ftmps can never dream.
     __________________________________________________________________


    [1]jonathan shewchuk, 1997
    [sig.gif]

references

   1. http://www.cs.berkeley.edu/~jrs
