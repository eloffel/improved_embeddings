   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]become a member[7]sign in[8]get started
     __________________________________________________________________

medical image analysis with deep learning         i

   [9]go to the profile of taposh dutta-roy
   [10]taposh dutta-roy (button) blockedunblock (button) followfollowing
   mar 18, 2017
   [1*57e5i14kqdrihlkuwlvayw.jpeg]

   analyzing images and videos, and using them in various applications
   such as self driven cars, drones etc. with underlying deep learning
   techniques has been the new research frontier. the recent research
   papers such as    [11]a neural algorithm of artistic style   , show how a
   styles can be transferred from an artist and applied to an image, to
   create a new image. other papers such as    [12]generative adversarial
   networks    (gan) and    [13]wasserstein gan    have paved the path to
   develop models that can learn to create data that is similar to data
   that we give them. thus opening up the world to semi-supervised
   learning and paving the path to a future of unsupervised learning.

   while these research areas are still on the generic images, our goal is
   to use these research into medical images to help healthcare. we need
   to start with some basics. in this article, i start with basics of
   image processing, basics of medical image format data and visualize
   some medical data. in the next article i will deep dive into some
   convolutional neural nets and use them with [14]keras for predicting
   lung cancer.

basic image processing (using python)

   there are a variety of image processing libraries, however [15]opencv
   (open id161) has become mainstream due to its large community
   support and availability in c++, java and python. i prefer using opencv
   using jupyter notebook.

   install opencv using: pip install opencv-python or install directly
   from the source from opencv.org
   [1*8gb6h21kw1xpv5yjebsloa.png]
   installing opencv

   now open your jupyter notebook and confirm you can import cv2. you will
   also need numpy and matplotlib to view your plots inside the notebook.
   [1*tw_9hz6iqrltbnpa3t-_ca.png]

   now, lets check if you can open an image and view it on your notebook
   using the code below.
   [1*xrlhjaaqu6vfov-srtlohq.png]
   example image load through opencv

   basic face detection

   lets, do something fun such as detecting a face. to detect face we will
   use an open source xml stump-based 20x20 gentle adaboost frontal face
   detector originally created by rainer lienhart. a good post with
   details on haar-cascade detection is [16]here.
   [1*-fu-ev90amfkqtiogokhyq.png]
   face detection using opencv

   there are a lot of examples for image processing using opencv in the
   docs section.
   [17]http://docs.opencv.org/trunk/d6/d00/tutorial_py_root.html. i leave
   it up to the reader to play with more examples. now that we know the
   basics of image processing, lets move to the next level of
   understanding medical image format.

medical image data format

   medical images follow [18]digital imaging and communications (dicom) as
   a standard solution for storing and exchanging medical image-data. the
   first version of this standard was released in 1985. since then there
   are several changes made. this standard uses a file format and a
   communications protocol.
     * file format         all patient medical images are saved in the dicom
       file format. this format has [19]phi (protected health information)
       about the patient such as         name, sex, age in addition to other
       image related data such as equipment used to capture the image and
       some context to the medical treatment. medical imaging equipments
       create dicom files. doctors use dicom viewers, computer software
       applications that can display dicom images, read and to diagnose
       the findings in the images.
     * communications protocol         the dicom communication protocol is used
       to search for imaging studies in the archive and restore imaging
       studies to the workstation in order to display it. all medical
       imaging applications that are connected to the hospital network use
       the dicom protocol to exchange information, mainly dicom images but
       also patient and procedure information. there are also more
       advanced network commands that are used to control and follow the
       treatment, schedule procedures, report statuses and share the
       workload between doctors and imaging devices.

   a very good blog that goes into details of the dicom standard is
   [20]here

analyze dicom images

   a very good python package used for analyzing dicom images is pydicom.
   in this section, we will see how to render a dicom image on a jupyter
   notebook.

   install opencv using: pip install pydicom

   after you install pydicom package, go back to the jupyter notebook. in
   the notebook, import the dicom package and other packages as shown
   below.
   [1*i53slb3lamgxl5wqjz-rja.png]

   we also use other packages such as pandas, scipy, skimage, mpl_toolkit
   for data processing and analysis.
   [1*dxp_yfg6cqs4thlceprjqw.png]

   there   s a wealth of freely available dicom datasets online but here   s a
   few that should help you get started:
     * [21]kaggle competitions and datasets: this is my personal favorite.
       check out the data for [22]lung cancer competition and diabetes
       retinopathy.
     * [23]dicom library : dicom library is a free online medical dicom
       image or video file sharing service for educational and scientific
       purposes.
     * [24]osirix datasets: provides a large range of human datasets
       acquired through a variety of imaging modalities.
     * [25]visible human datasets: parts of the [26]visible human project
       are somehow freely distributed here which is weird cause
       [27]getting that data is neither free nor hassle-free.
     * [28]the zubal phantom: this website offers multiple datasets of two
       human males in ct and mri which are freely distributed.

   download the dicom files and load them on your jupyter notebook.
   [1*7qca2us6f7d6dhj7addm3a.png]

   now, load the dicom images into a list.
   [1*cmcmmsxoy_ji5j68yh7kna.png]

   step 1 : basic viewing of dicom image in jupyter
   [1*xo7zqwzk_slqm4xu0yy95a.png]

   in the first line we load the 1st dicom file, which we   re gonna use as
   a reference named refds, to extract metadata and whose filename is
   first in the lstfilesdcm list.
   [1*c9gmjeo1styykpy7ao1b8q.png]

   we then calculate the total dimensions of the 3d numpy array which are
   equal to (number of pixel rows in a slice) x (number of pixel columns
   in a slice) x (number of slices) along the x, y, and z cartesian axes.
   lastly, we use the pixelspacing and slicethickness attributes to
   calculate the spacing between pixels in the three axes. we store the
   array dimensions in constpixeldims and the spacing in constpixelspacing
   [1].
   [1*y0cdtlzl_0cnkm3crcmz8a.png]
   [1*y2fdn31ukpktw59kbier1g.png]
   [1*lsja3-_iothkao_uhhswjg.png]

   step 2: looking into details of dicom format

   the unit of measurement in ct scans is the hounsfield unit (hu), which
   is a measure of radiodensity. ct scanners are carefully calibrated to
   accurately measure this. a detailed understanding on this can be found
   [29]here.

   each pixel is assigned a numerical value (ct number), which is the
   average of all the attenuation values contained within the
   corresponding voxel. this number is compared to the attenuation value
   of water and displayed on a scale of arbitrary units named hounsfield
   units (hu) after sir godfrey hounsfield.

   this scale assigns water as an attenuation value (hu) of zero. the
   range of ct numbers is 2000 hu wide although some modern scanners have
   a greater range of hu up to 4000. each number represents a shade of
   grey with +1000 (white) and    1000 (black) at either end of the
   spectrum.
   [1*hnn99mqnjnkgmbolxyznvg.png]
   hounsfield scale [credits: [30]   introduction to ct physics    (pdf).
   elsevierhealth.com.]

   some scanners have cylindrical scanning bounds, but the output image is
   square. the pixels that fall outside of these bounds get the fixed
   value -2000.
   [1*kejxyh0vpfoj_dxkbc1pra.jpeg]
   ct scanner image [credits : [31]   introduction to ct physics    (pdf).
   elsevierhealth.com.]

   the first step usually is setting these values to 0. next, let   s go
   back to hu units, by multiplying with the rescale slope and adding the
   intercept (which are conveniently stored in the metadata of the
   scans!).

   in the next part, we will use kaggle   s lung cancer data-set and
   convolution neural nets using keras. we will build upon the information
   provided by this article to go to the next one.

   acknowledgements :
    1. [32]https://pyscience.wordpress.com/2014/09/08/dicom-in-python-impo
       rting-medical-image-data-into-numpy-with-pydicom-and-vtk/
    2. [33]http://www.osirix-viewer.com/resources/dicom-image-library/
    3. [34]http://wearables.cc.gatech.edu/paper_of_week/viola01rapid.pdf
    4. [35]http://adilmoujahid.com/posts/2016/06/introduction-deep-learnin
       g-python-caffe/
    5. [36]http://dicomiseasy.blogspot.com/
    6. [37]https://www.kaggle.com/c/data-science-bowl-2017
    7. [38]http://docs.opencv.org/trunk/d6/d00/tutorial_py_root.html
    8. kaggle community for all the different scripts and support

     * [39]machine learning
     * [40]data science
     * [41]image processing
     * [42]dicom

   (button)
   (button)
   (button) 782 claps
   (button) (button) (button) 5 (button) (button)

     (button) blockedunblock (button) followfollowing
   [43]go to the profile of taposh dutta-roy

[44]taposh dutta-roy

     * (button)
       (button) 782
     * (button)
     *
     *

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://medium.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/23d518abf531
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/membership?source=upgrade_membership---nav_full
   7. https://medium.com/m/signin?redirect=https://medium.com/@taposhdr/medical-image-analysis-with-deep-learning-i-23d518abf531&source=--------------------------nav_reg&operation=login
   8. https://medium.com/m/signin?redirect=https://medium.com/@taposhdr/medical-image-analysis-with-deep-learning-i-23d518abf531&source=--------------------------nav_reg&operation=register
   9. https://medium.com/@taposhdr?source=post_header_lockup
  10. https://medium.com/@taposhdr
  11. https://arxiv.org/abs/1508.06576
  12. https://arxiv.org/abs/1406.2661
  13. https://arxiv.org/pdf/1701.07875
  14. https://keras.io/
  15. http://opencv.org/
  16. http://docs.opencv.org/trunk/d7/d8b/tutorial_py_face_detection.html
  17. http://docs.opencv.org/trunk/d6/d00/tutorial_py_root.html
  18. http://en.wikipedia.org/wiki/dicom
  19. https://en.wikipedia.org/wiki/protected_health_information
  20. http://dicomiseasy.blogspot.com/
  21. http://www.kaggle.com/
  22. https://www.kaggle.com/c/data-science-bowl-2017/data
  23. http://www.dicomlibrary.com/
  24. http://www.osirix-viewer.com/datasets/
  25. https://mri.radiology.uiowa.edu/visible_human_datasets.html
  26. http://www.nlm.nih.gov/research/visible/visible_human.html
  27. http://www.nlm.nih.gov/research/visible/getting_data.html
  28. http://noodle.med.yale.edu/zubal/
  29. https://web.archive.org/web/20070926231241/http://www.intl.elsevierhealth.com/e-books/pdf/940.pdf
  30. https://web.archive.org/web/20070926231241/http://www.intl.elsevierhealth.com/e-books/pdf/940.pdf
  31. https://web.archive.org/web/20070926231241/http://www.intl.elsevierhealth.com/e-books/pdf/940.pdf
  32. https://pyscience.wordpress.com/2014/09/08/dicom-in-python-importing-medical-image-data-into-numpy-with-pydicom-and-vtk/
  33. http://www.osirix-viewer.com/resources/dicom-image-library/
  34. http://wearables.cc.gatech.edu/paper_of_week/viola01rapid.pdf
  35. http://adilmoujahid.com/posts/2016/06/introduction-deep-learning-python-caffe/
  36. http://dicomiseasy.blogspot.com/2012/08/chapter-12-pixel-data.html
  37. https://www.kaggle.com/c/data-science-bowl-2017
  38. http://docs.opencv.org/trunk/d6/d00/tutorial_py_root.html
  39. https://medium.com/tag/machine-learning?source=post
  40. https://medium.com/tag/data-science?source=post
  41. https://medium.com/tag/image-processing?source=post
  42. https://medium.com/tag/dicom?source=post
  43. https://medium.com/@taposhdr?source=footer_card
  44. https://medium.com/@taposhdr

   hidden links:
  46. https://medium.com/p/23d518abf531/share/twitter
  47. https://medium.com/p/23d518abf531/share/facebook
  48. https://medium.com/p/23d518abf531/share/twitter
  49. https://medium.com/p/23d518abf531/share/facebook
