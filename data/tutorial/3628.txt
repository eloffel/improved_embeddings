   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]become a member[7]sign in[8]get started
     __________________________________________________________________

medical image analysis with deep learning         iii

   [9]go to the profile of taposh dutta-roy
   [10]taposh dutta-roy (button) blockedunblock (button) followfollowing
   may 8, 2017
   [1*nuge-1sdanbe4actbafhmq.png]

   in the [11]last article we will talk about basics of deep learning from
   the lens of convolutional neural nets. in this article we will
   focus         basic deep learning using [12]keras and [13]theano. we will do
   2 examples one using keras for basic predictive analytics and other a
   simple example of image analysis using vgg.

   i have realized that this topic is broad and deep and will need a few
   more articles. in the next few articles we will discuss difference
   between [14]dicom and [15]nifti formats for medical imaging , expand
   our learning further and discuss how to use deep learning for 2d lung
   segmentation analysis. we then move to analyze 3d lung segmentation. we
   will also discuss how medical image analysis was done prior deep
   learning and how we can do it now. i would also like to welcome and
   thank my new partners who will help me with putting this all
   together         [16]flavio trolese, partner at [17]4quant, [18]kevin mader,
   co-founder of [19]4quant and lecturer at eth zurich and cyriac joshy.

   in this article we will discuss keras and use two examples one showing
   how to use keras for simple predictive analysis tasks and other doing a
   image analysis.

   what is keras?

   from the keras website         keras is a deep learning library for
   [20]theanos and [21]tensor flow.
   [1*wmntaurtw7duotmymoggxw.png]
   keras api running on top of theano and tensorflow

   keras is a high-level neural networks api, written in python and
   capable of running on top of either [22]tensorflow or [23]theano. it
   was developed with a focus on enabling fast experimentation.

   what is theano and tensor flow?

   theano as stated by dr. [24]james bergstra et.al. at scipy 2010, is a
   cpu and gpu math expression compiler. it is a python library that
   allows you to define, optimize, and evaluate mathematical expressions
   involving multi-dimensional arrays efficiently. theano is a joint work
   done by some high profile researchers such as [25]yoshua bengio and
   others montereal institute for learning algorithms (mila). a very good
   tutorial on theano at scipy 2010 is [26]here. the picture below shows a
   comparison of theano on gpu and cpu vs a few other tools as of 2010.
   this was published in the original paper [27]   theano: a cpu and gpu
   math compiler in python   
   [1*-nuedh_lvxkiyx1i_ao9vq.png]
   theano: a cpu and gpu math compiler in python
   james bergstra, olivier breuleux, fr  d  ric bastien, pascal lamblin,
   razvan pascanu, guillaume desjardins,
   joseph turian, david warde-farley, yoshua bengio

   there are several other libraries built on top of theano, including
   pylearn2 and groundhog (also developed by [28]mila), lasagne, and
   [29]blocks and fuel.
   [30]scipy 2010 - james bergstra - transparent gpu computing with
   theano : free download & streaming    
   scipy 2010 day 1 main track 4 james bergstra, olivier breuleux,
   frederic bastien, pascal lamblin, razvan pascanu   archive.org

   [31]tensorflow was developed by researchers and engineers working on
   the google brain team within google   s machine intelligence research
   organization. it was developed for conducting machine learning and deep
   neural networks research, but the system is general enough to be
   applicable in a wide variety of other domains as well. [32]tensorflow   ,
   as stated from their website is an open source software library for
   numerical computation using data flow graphs. nodes in the graph
   represent mathematical operations, while the graph edges represent the
   multidimensional data arrays ([33]tensors) communicated between them.
   visually the code would like the figure shown below [[34]source]
   [1*wmeowizfvnuaudhmkefumw.png]
   tensorflow: large-scale machine learning on heterogeneous distributed
   systems

   example of predictive analytics with keras

   in this example we will use [35]sonar data set from uci website to do a
   simple predictive model. in the code below, we get data directly from
   the uci website and split it in 60:40 ratio for training vs testing. we
   use keras for predictive modeling and sklearn for label encoding.
   [1*dt1g9wuf3t8mxhpy2gsqnw.png]

   in the next snippet of code we read the data-set and see the data using
   the functions we defined above. we print the data-set and find out that
   our dependent variable needs encoding.
   [1*vykgkiyke-fgd3ju6-zmua.png]

   we use [36]labelencoder from scikit-learn to do label encoding to
   covert r and m into numbers 0 and 1. the generic process of doing this
   is called one-hot encoding. one hot encoding transforms categorical
   features to a format that works better with algorithms. in this example
   our y variable was categorical with values    r    and    m   . using the label
   encoder we converted this into    1    and    0   .
   [1*oeay6ncsamjy5fbayxxzww.png]
   label encoder from scikit-learn

   we then create a model using keras.
   [1*90u7qz9sf4stqfsendw13w.png]

     the accuracy using simplistic model without any pre-processing is
     81.64%

   example image analysis with keras

   in order to explain image processing with [37]keras, we will use data
   from kaggle competition         [38]dogs and cats. the goal of this
   competition is to develop an algorithm to classify whether images
   contain either a dog or a cat. this task is easy for humans, dogs, and
   cats but not for computers. in this challenge there are 25,000 labelled
   dog and cat photos available for training, and 12,500 in the test set
   that we have to try to label for this competition. according to the
   kaggle web-site, when this competition was launched (end of 2013):

      state of the art: the current literature suggests machine classifiers
   can score above 80% accuracy on this task   . so if we can beat 80%, then
   we will be at the cutting edge as at 2013!

   i highly recommend [39]mooc from fast.ai for more details, learning
   next steps and cutting edge research on the deep-learning. i have
   referred fast.ai for the code below as well as it serves an excellent
   starting point.
   [1*2x-27cwdleilsvv_ke5fow.png]

   step 1: setting it up

   download the data from kaggle website for the [40]dogs and cats, and
   save it on your laptop. for the example in this article i am running
   the code on my mac.
   [1*2rtcidt2naep9zmgf3goha.png]
   basic set-up

   jeremy howard, in his class has provided a utility python file that
   helps to get the basic functions encapsulated. for the initial part we
   will use this utility file. the file is available [41]here. as we go
   into more details we will unpack this file and see whats behind it.
   [1*evixpc1u58xkvuqz8z70lw.png]

   step 2: using vgg

   our first step is simply to use a model that has been fully created for
   us, which can recognize a wide variety (1,000 categories) of images. we
   will use    vgg   , which won the 2014 id163 competition, and is a very
   simple model to create and understand. the vgg id163 team created
   both a larger, slower, slightly more accurate model (vgg 19) and a
   smaller, faster model (vgg 16). we will be using vgg 16 since the much
   slower performance of vgg19 is generally not worth the very minor
   improvement in accuracy.

   we have created a python class, vgg16, which makes using the vgg 16
   model very straightforward. vgg16 is also available from fast.ai   s
   github details are [42]here.
   [1*fwxwfm1jsrbkyizsei-sya.png]

   step 3: instantiate vgg
   [1*0wiyr2l6j2wlcfcmpwypgw.png]

   vgg16 is built on top of keras (which we will be learning much more
   about shortly!), a flexible, easy to use deep learning library that
   sits on top of theano or tensorflow. keras reads groups of images and
   labels in batches, using a fixed directory structure, where images from
   each category for training must be placed in a separate folder.

   let   s grab batches of data from our training folder:
   [1*ql1xu_rhvxgafymm-tylza.png]
   [1*7afiqrglkk3lfhkhpyvdzw.png]

   step 4: predict dog vs cats
   [1*bbw59eiiaqiuwna06ykeuq.png]

   step 5: summing it up and code files   

   to sum this up for this article, the approach for dogs and cats
   classification that i recommend is    
   [1*dcp4cbf3-qzlr2rol04cxa.png]

   conclusion

   if you are with me this far, then you have taken the theory we
   discussed in last article and done some practical programming. if you
   follow the instructions above and do the two examples, you have done
   your first predictive model using keras and done image analysis as
   well. due to the length of the code, i have not discussed the details
   in here, but have linked them. if you review the links and have
   questions, please feel to reach out to me or fast.ai (for dogs-cats
   image analysis)

   references:
   [43]keras documentation
   keras: deep learning library for theano and tensorflowkeras.io
   [44]welcome - theano 0.9.0 documentation
   theano is a python library that allows you to define, optimize, and
   evaluate mathematical expressions involving multi   deeplearning.net
   [45]develop your first neural network in python with keras step-by-step
   - machine learning mastery
   keras is a powerful easy-to-use python library for developing and
   evaluating deep learning models. it wraps
   the   machinelearningmastery.com

   [46]http://svn.ucc.asn.au:8080/oxinabox/uni%20notes/honours/background%
   20reading/theano_scipy2010.pdf
   [47]one hot encoding for machine learning
   many learning algorithms either learn a single weight per feature, or
   they use distances between samples. the former is   stackoverflow.com

   [48]https://github.com/fastai/courses/blob/master/deeplearning1/nbs/uti
   ls.py

   [49]https://github.com/gur9000/deep_mri_brain_extraction

     * [50]machine learning
     * [51]deep learning

   (button)
   (button)
   (button) 71 claps
   (button) (button) (button) (button)

     (button) blockedunblock (button) followfollowing
   [52]go to the profile of taposh dutta-roy

[53]taposh dutta-roy

     * (button)
       (button) 71
     * (button)
     *
     *

   [54]go to the profile of taposh dutta-roy
   never miss a story from taposh dutta-roy, when you sign up for medium.
   [55]learn more
   never miss a story from taposh dutta-roy
   (button) blockedunblock (button) followget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://medium.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/eb01cc219aa2
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/membership?source=upgrade_membership---nav_full
   7. https://medium.com/m/signin?redirect=https://medium.com/@taposhdr/medical-image-analysis-with-deep-learning-iii-eb01cc219aa2&source=--------------------------nav_reg&operation=login
   8. https://medium.com/m/signin?redirect=https://medium.com/@taposhdr/medical-image-analysis-with-deep-learning-iii-eb01cc219aa2&source=--------------------------nav_reg&operation=register
   9. https://medium.com/@taposhdr?source=post_header_lockup
  10. https://medium.com/@taposhdr
  11. https://medium.com/@taposhdr/medical-image-analysis-with-deep-learning-ii-166532e964e6
  12. https://keras.io/
  13. http://deeplearning.net/software/theano/
  14. http://dicom.nema.org/
  15. https://nifti.nimh.nih.gov/
  16. https://www.linkedin.com/in/flavio-trolese-836a2b6/
  17. http://4quant.com/
  18. https://www.linkedin.com/in/kevinmader/
  19. http://4quant.com/
  20. http://deeplearning.net/software/theano/
  21. https://www.tensorflow.org/
  22. https://github.com/tensorflow/tensorflow
  23. https://github.com/theano/theano
  24. http://www.eng.uwaterloo.ca/~jbergstr/
  25. http://www.iro.umontreal.ca/~bengioy/yoshua_en/
  26. https://archive.org/details/scipy2010-jamesbergstra-transparentgpucomputingwiththeano
  27. http://svn.ucc.asn.au:8080/oxinabox/uni notes/honours/background reading/theano_scipy2010.pdf
  28. https://mila.umontreal.ca/en/cours/
  29. https://arxiv.org/pdf/1506.00619.pdf
  30. https://archive.org/details/scipy2010-jamesbergstra-transparentgpucomputingwiththeano
  31. http://download.tensorflow.org/paper/whitepaper2015.pdf
  32. https://www.tensorflow.org/
  33. https://www.doitpoms.ac.uk/tlplib/tensors/what_is_tensor.php
  34. http://download.tensorflow.org/paper/whitepaper2015.pdf
  35. https://archive.ics.uci.edu/ml/machine-learning-databases/undocumented/connectionist-bench/sonar/
  36. http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.labelencoder.html
  37. https://keras.io/
  38. https://www.kaggle.com/c/dogs-vs-cats
  39. http://www.fast.ai/
  40. https://www.kaggle.com/c/dogs-vs-cats
  41. https://github.com/fastai/courses/blob/master/deeplearning1/nbs/utils.py
  42. https://github.com/fastai/courses/blob/master/deeplearning1/nbs/vgg16.py
  43. https://keras.io/
  44. http://deeplearning.net/software/theano/
  45. http://machinelearningmastery.com/tutorial-first-neural-network-python-keras/
  46. http://svn.ucc.asn.au:8080/oxinabox/uni notes/honours/background reading/theano_scipy2010.pdf
  47. http://stackoverflow.com/questions/17469835/one-hot-encoding-for-machine-learning
  48. https://github.com/fastai/courses/blob/master/deeplearning1/nbs/utils.py
  49. https://github.com/gur9000/deep_mri_brain_extraction
  50. https://medium.com/tag/machine-learning?source=post
  51. https://medium.com/tag/deep-learning?source=post
  52. https://medium.com/@taposhdr?source=footer_card
  53. https://medium.com/@taposhdr
  54. https://medium.com/@taposhdr
  55. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  57. https://archive.org/details/scipy2010-jamesbergstra-transparentgpucomputingwiththeano
  58. https://keras.io/
  59. http://deeplearning.net/software/theano/
  60. http://machinelearningmastery.com/tutorial-first-neural-network-python-keras/
  61. http://stackoverflow.com/questions/17469835/one-hot-encoding-for-machine-learning
  62. https://medium.com/p/eb01cc219aa2/share/twitter
  63. https://medium.com/p/eb01cc219aa2/share/facebook
  64. https://medium.com/p/eb01cc219aa2/share/twitter
  65. https://medium.com/p/eb01cc219aa2/share/facebook
