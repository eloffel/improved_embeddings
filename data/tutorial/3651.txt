   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]technology, invention, app, and more
   [7]technology, invention, app, and more
   [8]sign in[9]get started
     __________________________________________________________________

how to build a simple neural network in 9 lines of python code

   [10]go to the profile of milo spencer-harper
   [11]milo spencer-harper (button) blockedunblock (button)
   followfollowing
   jul 20, 2015
   [1*4-4xkutzopk59wov6e-rcg.jpeg]

   as part of my quest to learn about ai, i set myself the [12]goal of
   building a simple neural network in python. to ensure i truly
   understand it, i had to build it from scratch without using a neural
   network library. thanks to an [13]excellent blog post by andrew trask i
   achieved my goal. here it is in just 9 lines of code:

   iframe: [14]/media/dcf7eb45caedb7a5a43514299e18cbc6?postid=cc8f23647ca1

   in this blog post, i   ll explain how i did it, so you can build your
   own. i   ll also provide a longer, but more beautiful version of the
   source code. [15]and i   ve created a video version of this blog post as
   well.

   but first, what is a neural network? the human brain consists of 100
   billion cells called neurons, connected together by synapses. if
   sufficient synaptic inputs to a neuron fire, that neuron will also
   fire. we call this process    thinking   .
   [1*hdwhvfz5t0kajiaizjkr1w.png]
   diagram 1

   we can model this process by creating a neural network on a computer.
   it   s not necessary to model the biological complexity of the human
   brain at a molecular level, just its higher level rules. we use a
   mathematical technique called matrices, which are grids of numbers. to
   make it really simple, we will just model a single neuron, with three
   inputs and one output.

   we   re going to train the neuron to solve the problem below. the first
   four examples are called a training set. can you work out the pattern?
   should the    ?    be 0 or 1?
   [1*neooklji8xbkqh4cfbzu1q.png]
   diagram 2

   you might have noticed, that the output is always equal to the value of
   the leftmost input column. therefore the answer is the    ?    should be 1.

   training process

   but how do we teach our neuron to answer the question correctly? we
   will give each input a weight, which can be a positive or negative
   number. an input with a large positive weight or a large negative
   weight, will have a strong effect on the neuron   s output. before we
   start, we set each weight to a random number. then we begin the
   training process:
    1. take the inputs from a training set example, adjust them by the
       weights, and pass them through a special formula to calculate the
       neuron   s output.
    2. calculate the error, which is the difference between the neuron   s
       output and the desired output in the training set example.
    3. depending on the direction of the error, adjust the weights
       slightly.
    4. repeat this process 10, 000 times.

   [1*-1trga6dueaafjzv3k0mgw.jpeg]
   diagram 3

   eventually the weights of the neuron will reach an optimum for the
   training set. if we allow the neuron to think about a new situation,
   that follows the same pattern, it should make a good prediction.

   formula for calculating the neuron   s output

   you might be wondering, what is the special formula for calculating the
   neuron   s output? first we take the weighted sum of the neuron   s inputs,
   which is:
   [1*rv7-cfkmmbyfcxkkpcbayq.png]

   next we normalise this, so the result is between 0 and 1. for this, we
   use a mathematically convenient function, called the sigmoid function:
   [1*5il5glo0gamypklqq_z0aa.png]

   if plotted on a graph, the sigmoid function draws an s shaped curve.
   [1*sk6hjhszcwte8gqtkne1yg.png]
   diagram 4

   so by substituting the first equation into the second, the final
   formula for the output of the neuron is:
   [1*7ydyg6fc6f6zmmx3l0zgsq.png]

   you might have noticed that we   re not using a minimum firing threshold,
   to keep things simple.

   formula for adjusting the weights

   during the training cycle (diagram 3), we adjust the weights. but how
   much do we adjust the weights by? we can use the    error weighted
   derivative    formula:
   [1*sqbjpbbcct3ltqlpedr1eg.png]

   why this formula? first we want to make the adjustment proportional to
   the size of the error. secondly, we multiply by the input, which is
   either a 0 or a 1. if the input is 0, the weight isn   t adjusted.
   finally, we multiply by the gradient of the sigmoid curve (diagram 4).
   to understand this last one, consider that:
    1. we used the sigmoid curve to calculate the output of the neuron.
    2. if the output is a large positive or negative number, it signifies
       the neuron was quite confident one way or another.
    3. from diagram 4, we can see that at large numbers, the sigmoid curve
       has a shallow gradient.
    4. if the neuron is confident that the existing weight is correct, it
       doesn   t want to adjust it very much. multiplying by the sigmoid
       curve gradient achieves this.

   the gradient of the sigmoid curve, can be found by taking the
   derivative:
   [1*hdhm9u3_wjwbpmwulg3d3g.png]

   so by substituting the second equation into the first equation, the
   final formula for adjusting the weights is:
   [1*jow4wvwnop6rtij7vnq0gq.png]

   there are alternative formulae, which would allow the neuron to learn
   more quickly, but this one has the advantage of being fairly simple.

   constructing the python code

   although we won   t use a neural network library, we will import four
   methods from a python mathematics library called numpy. these are:
     * exp         the natural exponential
     * array         creates a matrix
     * dot         multiplies matrices
     * random         gives us random numbers

   for example we can use the array() method to represent the training set
   shown earlier:

   iframe: [16]/media/0be09aa277b309a37f99468fe85b3032?postid=cc8f23647ca1

   the    .t    function, transposes the matrix from horizontal to vertical.
   so the computer is storing the numbers like this.
   [1*2vaykewnikxu-gfy3bbh_w.png]

   ok. i think we   re ready for the more beautiful version of the source
   code. once i   ve given it to you, i   ll conclude with some final
   thoughts.

   i have added comments to my source code to explain everything, line by
   line. note that in each iteration we process the entire training set
   simultaneously. therefore our variables are matrices, which are grids
   of numbers. here is a complete working example written in python:

   iframe: [17]/media/72eb92b993f66102acc49e56f06f5c16?postid=cc8f23647ca1

   the code is also available here:
   [18]https://github.com/miloharper/simple-neural-network. please note
   that if you are using python 3, you will need to replace the command
      xrange    with    range   .

   final thoughts

   try running the neural network using this terminal command:

   python main.py

   you should get a result that looks like:

   iframe: [19]/media/edab732b9ed227056eb40c333264fc56?postid=cc8f23647ca1

   we did it! we built a simple neural network using python!

   first the neural network assigned itself random weights, then trained
   itself using the training set. then it considered a new situation [1,
   0, 0] and predicted 0.99993704. the correct answer was 1. so very
   close!

   traditional computer programs normally can   t learn. what   s amazing
   about neural networks is that they can learn, adapt and respond to new
   situations. just like the human mind.

   of course that was just 1 neuron performing a very simple task. but
   what if we hooked millions of these neurons together? could we one day
   create something conscious?

   are you interested in learning more? due to the huge success of this
   blog post, i   ve created an online course    [20]how to build a neural
   network in 77 lines of python code   . for readers of this blog post,
   i   ve created a special discount code medium77, which will give you 76%
   off:

   [21]https://www.udemy.com/machine-learning-build-a-neural-network-in-77
   -lines-of-code/?couponcode=medium77

     * [22]neural networks
     * [23]python
     * [24]artificial intelligence

   (button)
   (button)
   (button) 10.4k claps
   (button) (button) (button) 76 (button) (button)

     (button) blockedunblock (button) followfollowing
   [25]go to the profile of milo spencer-harper

[26]milo spencer-harper

   studied economics at oxford university. founder of [27]www.moju.io.
   interested in politics and ai.

     (button) follow
   [28]technology, invention, app, and more

[29]technology, invention, app, and more

   technology trends and new invention? follow this collection to update
   the latest trend! [update] as a collection editor, i don   t have any
   permission to add your articles in the wild. please submit your article
   and i will approve. also, follow this collection, please.

     * (button)
       (button) 10.4k
     * (button)
     *
     *

   [30]technology, invention, app, and more
   never miss a story from technology, invention, app, and more, when you
   sign up for medium. [31]learn more
   never miss a story from technology, invention, app, and more
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://medium.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/cc8f23647ca1
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/technology-invention-and-more?source=avatar-lo_a76jnsz75fzd-7804d7b91ee8
   7. https://medium.com/technology-invention-and-more?source=logo-lo_a76jnsz75fzd---7804d7b91ee8
   8. https://medium.com/m/signin?redirect=https://medium.com/technology-invention-and-more/how-to-build-a-simple-neural-network-in-9-lines-of-python-code-cc8f23647ca1&source=--------------------------nav_reg&operation=login
   9. https://medium.com/m/signin?redirect=https://medium.com/technology-invention-and-more/how-to-build-a-simple-neural-network-in-9-lines-of-python-code-cc8f23647ca1&source=--------------------------nav_reg&operation=register
  10. https://medium.com/@miloharper?source=post_header_lockup
  11. https://medium.com/@miloharper
  12. https://medium.com/@miloharper/how-to-create-a-mind-the-secret-of-human-thought-revealed-6211bbdb092a
  13. http://iamtrask.github.io/2015/07/12/basic-python-network/
  14. https://medium.com/media/dcf7eb45caedb7a5a43514299e18cbc6?postid=cc8f23647ca1
  15. https://www.udemy.com/machine-learning-build-a-neural-network-in-77-lines-of-code/?couponcode=medium77
  16. https://medium.com/media/0be09aa277b309a37f99468fe85b3032?postid=cc8f23647ca1
  17. https://medium.com/media/72eb92b993f66102acc49e56f06f5c16?postid=cc8f23647ca1
  18. https://github.com/miloharper/simple-neural-network
  19. https://medium.com/media/edab732b9ed227056eb40c333264fc56?postid=cc8f23647ca1
  20. https://www.udemy.com/machine-learning-build-a-neural-network-in-77-lines-of-code/?couponcode=medium77
  21. https://www.udemy.com/machine-learning-build-a-neural-network-in-77-lines-of-code/?couponcode=medium77
  22. https://medium.com/tag/neural-networks?source=post
  23. https://medium.com/tag/python?source=post
  24. https://medium.com/tag/artificial-intelligence?source=post
  25. https://medium.com/@miloharper?source=footer_card
  26. https://medium.com/@miloharper
  27. http://www.moju.io/
  28. https://medium.com/technology-invention-and-more?source=footer_card
  29. https://medium.com/technology-invention-and-more?source=footer_card
  30. https://medium.com/technology-invention-and-more
  31. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  33. https://medium.com/p/cc8f23647ca1/share/twitter
  34. https://medium.com/p/cc8f23647ca1/share/facebook
  35. https://medium.com/p/cc8f23647ca1/share/twitter
  36. https://medium.com/p/cc8f23647ca1/share/facebook
