    #[1]data dependence    feed [2]data dependence    comments feed [3]data
   dependence    an introduction to scientific python     matplotlib comments
   feed [4]alternate [5]alternate

     * [6]home
     * [7]top resources
     * [8]what is this blog?
     * [9]who are you?
     * [10]got something to say?

   [11]data dependence

   learn about programming and data science with me. covering topics such
   as python programming, machine learning, developer productivity and
   more.

     * [12]home
     * [13]top resources
     * [14]what is this blog?
     * [15]who are you?
     * [16]got something to say?

   scientific python - matplotlib

an introduction to scientific python     matplotlib

   by [17]8 comments

   one of the most popular uses for python, especially in recent years is
   data processing, analysis and visualisation. this then leads topics
   such as the analysis of    big data    which has many applications in
   pretty much every type of business you can imagine, and a personal
   interest of mine; machine learning.

   python has a vast array of powerful tools available to help with this
   processing, analysis and visualisation of data and is one of the main
   reasons that python has gained such momentum in the scientific world.

   in this series of posts, we will take a look at the main libraries used
   in scientific python and learn how to use them to bend data to our
   will. we won   t just be learning to churn out template code however, we
   will also learn a bit of the maths behind it so that we can understand
   what is going on a little better.

   so let   s kick things off with a incredibly useful little number that we
   will be using throughout this series of posts; matplotlib.

what is matplotlib?

   simply put it   s a graphing library for python. it has a humongous array
   of tools that you can use to create anything from simple scatter plots,
   to sin curves, to 3d graphs. it is used heavily in the scientific
   python community for data visualisation.

   you can read more about the ideas behind matplotlib on their
   [18]website, but i especially recommend taking a look at their
   [19]gallery to see the amazing things you can pull off with this
   library.

plotting a simple graph

   to get started we will plot a simple sin wave from 0 to 2 pi. you will
   notice that we are using numpy here, don   t worry too much about it for
   now if you don   t know how to use it; we will be covering numpy in the
   next post.

   python

   import matplotlib.pyplot as plt_____________________________
   import numpy as np__________________________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   2
   import matplotlib.pyplot as plt
   import numpy as np

   these are the imports we will be using. as i   ve mentioned in a previous
   [20]post (and [21]others) the    from x import *    way of importing is not
   good. we don   t want to be typing out matplotlib.pyplot and numpy all
   the time though, they are long, so we will use the above compromise.
   python

   # basic plotting.___________________________________________
   x = np.linspace(0, 2 * np.pi, 50)___________________________
   plt.plot(x, np.sin(x)) # without the first x, array indices 
   plt.show() # show the graph.________________________________
   1
   2
   3
   4
   # basic plotting.
   x = np.linspace(0, 2 * np.pi, 50)
   plt.plot(x, np.sin(x)) # without the first x, array indices will be
   used on the x axis.
   plt.show() # show the graph.

   the above code will produce a simple sin curve. the    np.linspace(0, 2 *
   np.pi, 50)    bit of code produces an array of 50 evenly spaced numbers
   from 0 to 2 pi.

   the plot command is the short and sweet line of code that actually
   creates the graph. note that without the first x argument used here,
   instead of the x axis going fro 0 to 2 pi, it would instead use the
   array indices used in the x variable instead.

   the final bit of code plt.show() displays the graph, without this
   nothing will appear.

   you will get something like this:
   [22][basic_plotting-1.png?resize=400%2c300]

plotting two datasets on one graph

   a lot of the time you will want to plot more than one dataset on a
   graph. in matplotlib this is simple.
   python

   # plotting two data sets on one graph.______________________
   x = np.linspace(0, 2 * np.pi, 50)___________________________
   plt.plot(x, np.sin(x),______________________________________
           x, np.sin(2 * x))___________________________________
   plt.show()__________________________________________________
   1
   2
   3
   4
   5
   # plotting two data sets on one graph.
   x = np.linspace(0, 2 * np.pi, 50)
   plt.plot(x, np.sin(x),
           x, np.sin(2 * x))
   plt.show()

   the above code plots both the graphs for sin(x) and sin(2x). it is
   pretty much the same as the previous code for plotting one dataset,
   except this time inside the same plt.plot() call, we define another
   dataset separated by a comma.

   you will end up with a graph with two lines on like this:
   [23][plotting_two_datasets-1.png?resize=400%2c300]

customising the look of lines

   when having multiple datasets on one graph it is useful to be able to
   change the look of the plotted lines to make differentiating between
   the datasets easier.
   python

   # customising the look of lines.____________________________
   x = np.linspace(0, 2 * np.pi, 50)___________________________
   plt.plot(x, np.sin(x), 'r-o',_______________________________
           x, np.cos(x), 'g--')________________________________
   plt.show()__________________________________________________
   1
   2
   3
   4
   5
   # customising the look of lines.
   x = np.linspace(0, 2 * np.pi, 50)
   plt.plot(x, np.sin(x), 'r-o',
           x, np.cos(x), 'g--')
   plt.show()

   in the above code you can see two examples of different line stylings;
      r-o    and    g      . the letters    r    and    g    are the line colours and the
   following symbols are the line and marker styles. for example    -o   
   creates a solid line with dots on and           creates a dashed line. as
   with most of the aspects of matplotlib, the best thing to do here is
   play.

     colours:
     blue        b   
     green        g   
     red        r   
     cyan        c   
     magenta        m   
     yellow        y   
     black        k    (   b    is taken by blue so the last letter is used)
     white         w   

     lines:
     solid line        -   
     dashed              
     dotted        .   
     dash-dotted        -:   

     often used markers:
     point        .   
     pixel        ,   
     circle        o   
     square        s   
     triangle        ^   
     for more markers click [24]here.

   you will end up with something like this:
   [25][line_customisation-1.png?resize=400%2c300]

using subplots

   subplots allow you to plot multiple graphs in one window.
   python

   # using subplot.____________________________________________
   x = np.linspace(0, 2 * np.pi, 50)___________________________
   plt.subplot(2, 1, 1) # (row, column, active area)___________
   plt.plot(x, np.sin(x), 'r')_________________________________
   plt.subplot(2, 1, 2)________________________________________
   plt.plot(x, np.cos(x), 'g')_________________________________
   plt.show()__________________________________________________
   1
   2
   3
   4
   5
   6
   7
   # using subplot.
   x = np.linspace(0, 2 * np.pi, 50)
   plt.subplot(2, 1, 1) # (row, column, active area)
   plt.plot(x, np.sin(x), 'r')
   plt.subplot(2, 1, 2)
   plt.plot(x, np.cos(x), 'g')
   plt.show()

   when using subplots, we plot datasets as in the previous examples but
   with one extra step. before calling the plot() function, we first call
   the subplot() function. the first argument is the number of rows you
   want the subplot to have, the second is the number of columns and the
   third is the active area.

   the active area is the current subplot you are working on now and are
   numbered from left to right, up to down. for example in a 4  4 grid of
   subplots, the active area 6 would be (2,2) on the grid.

   you should have two graphs like this:
   [26][subplot-1.png?resize=400%2c300]

simple scatter graphs

   scatter graphs are a collection of points that are not connected by a
   line. again, matplotlib makes this a trivial task.
   python

   # simple scatter plotting.__________________________________
   x = np.linspace(0, 2 * np.pi, 50)___________________________
   y = np.sin(x)_______________________________________________
   plt.scatter(x,y)____________________________________________
   plt.show()__________________________________________________
   1
   2
   3
   4
   5
   # simple scatter plotting.
   x = np.linspace(0, 2 * np.pi, 50)
   y = np.sin(x)
   plt.scatter(x,y)
   plt.show()

   as the above code shows, all you do is call the scatter() function and
   pass it two arrays of x and y coordinates. note that this can also be
   reproduced by using the plot command with the line styling    bo   .

   you should end up with a graph with no line like so:
   [27][scatter_plot-1.png?resize=400%2c300]

colour map scatter graphs

   another graph you might want to produced is a colour mapped scatter
   graph. here we will vary the colour and the size of each point
   according to the data and add a colour bar too.
   python

   # colormap scatter plotting.________________________________
   x = np.random.rand(1000)____________________________________
   y = np.random.rand(1000)____________________________________
   size = np.random.rand(1000) * 50____________________________
   colour = np.random.rand(1000)_______________________________
   plt.scatter(x, y, size, colour)_____________________________
   plt.colorbar()______________________________________________
   plt.show()__________________________________________________
   1
   2
   3
   4
   5
   6
   7
   8
   # colormap scatter plotting.
   x = np.random.rand(1000)
   y = np.random.rand(1000)
   size = np.random.rand(1000) * 50
   colour = np.random.rand(1000)
   plt.scatter(x, y, size, colour)
   plt.colorbar()
   plt.show()

   in the above code you can see np.random.rand(1000) a lot, the reason
   for this is that we are simply randomly generating data to plot.

   as before we use the same scatter() function, but this time pass it an
   extra two arguments, the size and the colour of the point we want to
   plot. by doing this, the points plotted on the graph will vary in size
   and colour depending on the data we pass.

   we then add a colour bar with the function colorbar().

   you will end up with a colourful scatter graph that will look something
   like this:
   [28][colormap_scatter-1.png?resize=400%2c300]

histograms

   histograms are another type of graph that are used frequently and again
   can be created with very few lines of code.
   python

   # histograms________________________________________________
   x = np.random.randn(1000)___________________________________
   plt.hist(x, 50)_____________________________________________
   plt.show()__________________________________________________
   1
   2
   3
   4
   # histograms
   x = np.random.randn(1000)
   plt.hist(x, 50)
   plt.show()

   a histogram is one of the simplest types of graphs to plot in
   matplotlib. all you need to do is pass the hist() function an array of
   data. the second argument specifies the amount of bins to use. bins are
   intervals of values that our data will fall into. the more bins, the
   more bars.

   you will now have a histogram like the following:
   [29][histogram-1.png?resize=400%2c300]

titles, labels and legends

   when quickly bringing up graphs for your own sake, you might not always
   need to label your graphs. however, when producing a graph that will be
   shown to other people, adding titles, labels and legends is a must.
   python

   # adding a title, axis labels and legend.___________________
   x = np.linspace(0, 2 * np.pi, 50)___________________________
   plt.plot(x, np.sin(x), 'r-x', label='sin(x)')_______________
   plt.plot(x, np.cos(x), 'g-^', label='cos(x)')_______________
   plt.legend() # display the legend.__________________________
   plt.xlabel('rads') # add a label to the x-axis._____________
   plt.ylabel('amplitude') # add a label to the y-axis.________
   plt.title('sin and cos waves') # add a graph title._________
   plt.show()__________________________________________________
   1
   2
   3
   4
   5
   6
   7
   8
   9
   # adding a title, axis labels and legend.
   x = np.linspace(0, 2 * np.pi, 50)
   plt.plot(x, np.sin(x), 'r-x', label='sin(x)')
   plt.plot(x, np.cos(x), 'g-^', label='cos(x)')
   plt.legend() # display the legend.
   plt.xlabel('rads') # add a label to the x-axis.
   plt.ylabel('amplitude') # add a label to the y-axis.
   plt.title('sin and cos waves') # add a graph title.
   plt.show()

   to add legends to our graph, inside the plot() function we add the
   named argument    label    and assign it what we want the line to be
   labelled with. we then call the legend() function and a legend will be
   placed on our graph.

   to add a title and labels all we have to do is use the self explanatory
   title(), xlabel() and ylabel() functions and we are done.

   you should now have a titled, labelled and legended graph like this:
   [30][labeling-1.png?resize=400%2c300]

   this should be enough to get you going with visualisation of data using
   matplotlib and python, but is by no means exhaustive. one thing i
   strongly recommend you to do, as it really helped me get to grips with
   this tool, is to just play. plot a few graphs, play with styling and
   subplots and you will know your way around matplotlib in no time at
   all.

   this has been a post on data visualisation with matplotlib and python,
   the first in series of posts on scientific python. i hope you have
   managed to learn something and feel more comfortable with the
   matplotlib library now.

don't forget to share and follow!

   remember, don't forget to share this post so that other people can see
   it too! also, make sure you [31]subscribe to this blog's mailing list,
   follow me on [32]twitter and add me on [33]google+ so that you don't
   miss out on any useful posts!

   i read all comments, so if you have something to say, something to
   share or questions and the like, leave a comment below!

   [34][pinit_fg_en_rect_red_28.png]
   [35]jamal moir

   jamal works as a developer for a tokyo-based start up. he has a
   particular love for python and likes to dabble in data science.

share this:

     * [36]click to share on twitter (opens in new window)
     * [37]click to share on facebook (opens in new window)
     * [38]click to share on google+ (opens in new window)
     *

related

   filed under: [39]data science, [40]programming tagged with: [41]data
   science, [42]matplotlib, [43]python, [44]scientific

   search this website  search

follow me

subscribe

don't miss out on any useful posts. subscribe!

   ____________________
   ____________________
   subscribe

popular posts

     * [45]creating attractive and informative map visualisations in
       python with basemap [46]creating attractive and informative map
       visualisations in python with basemap
     * [47]an introduction to scientific python - pandas [48]an
       introduction to scientific python     pandas
     * [49]how to build a gui in python 3.5 [50]how to build a gui in
       python 3.5
     * an introduction to scientific python - matplotlib an introduction
       to scientific python     matplotlib
     * [51]write pythonic code like a seasoned developer; the course
       everyone new to python desperately needs to take [52]write pythonic
       code like a seasoned developer; the course everyone new to python
       desperately needs to take

   copyright    2019    [53]metro pro theme on [54]genesis framework   
   [55]wordpress    [56]log in

references

   1. https://www.datadependence.com/feed/
   2. https://www.datadependence.com/comments/feed/
   3. https://www.datadependence.com/2016/04/scientific-python-matplotlib/feed/
   4. https://www.datadependence.com/wp-json/oembed/1.0/embed?url=https://www.datadependence.com/2016/04/scientific-python-matplotlib/
   5. https://www.datadependence.com/wp-json/oembed/1.0/embed?url=https://www.datadependence.com/2016/04/scientific-python-matplotlib/&format=xml
   6. http://www.datadependence.com/
   7. https://www.datadependence.com/top-resources/
   8. https://www.datadependence.com/about/
   9. https://www.datadependence.com/who-are-you/
  10. https://www.datadependence.com/contact-us/
  11. https://www.datadependence.com/
  12. http://www.datadependence.com/
  13. https://www.datadependence.com/top-resources/
  14. https://www.datadependence.com/about/
  15. https://www.datadependence.com/who-are-you/
  16. https://www.datadependence.com/contact-us/
  17. https://www.datadependence.com/2016/04/scientific-python-matplotlib/#comments
  18. http://matplotlib.org/
  19. http://matplotlib.org/gallery.html
  20. http://www.datadependence.com/?p=19
  21. http://www.datadependence.com/?p=11
  22. https://i1.wp.com/2.bp.blogspot.com/-vs9khxhpaq0/vx8bh6vyjmi/aaaaaaaac3m/ju7-x7sfyiy7y4v-sljqgnrolstnldfgwclcb/s1600/basic_plotting.png?ssl=1
  23. https://i0.wp.com/2.bp.blogspot.com/-dxcwog-mowy/vx8f-srdoni/aaaaaaaac3k/fc0bv86b_lipayq-lik8vywbdhnomyaygclcb/s1600/plotting_two_datasets.png?ssl=1
  24. http://matplotlib.org/api/markers_api.html
  25. https://i2.wp.com/2.bp.blogspot.com/-syypwswe8wo/vx8ggt4cfvi/aaaaaaaac3o/qlbaw5rb2sgkkn6rdkhius1ysfyi9lmxwclcb/s1600/line_customisation.png?ssl=1
  26. https://i1.wp.com/3.bp.blogspot.com/-qj25uc76pki/vx8gyv4gxdi/aaaaaaaac3s/3uzlsvbigywkrrojlqequ1at9xi3k2fkqclcb/s1600/subplot.png?ssl=1
  27. https://i2.wp.com/1.bp.blogspot.com/-p_lnwsgm0se/vx8giey0agi/aaaaaaaac30/cpg3-56n04s-vzh23exy5cplafwktcv7aclcb/s1600/scatter_plot.png?ssl=1
  28. https://i0.wp.com/1.bp.blogspot.com/-h5k-ulmp0m8/vx8gvbzc1fi/aaaaaaaac38/0kszxum08fii1yfaaodrn4ztxbtacdhzgclcb/s1600/colormap_scatter.png?ssl=1
  29. https://i2.wp.com/1.bp.blogspot.com/-mov5v-3embi/vx8g6clgbdi/aaaaaaaac4a/42f3uzl36ren1-14stovvpczbxw_nz4cqclcb/s1600/histogram.png?ssl=1
  30. https://i0.wp.com/1.bp.blogspot.com/--zjiqwfcxmg/vx8hdfo0yti/aaaaaaaac4i/ychxd42hglmhfcrumwf1daozqyrjep56aclcb/s1600/labeling.png?ssl=1
  31. http://eepurl.com/b7iuf5
  32. https://twitter.com/jamal_moir
  33. https://plus.google.com/101283112845335349608
  34. http://www.pinterest.com/pin/create/button/
  35. https://www.datadependence.com/author/jamal/
  36. https://www.datadependence.com/2016/04/scientific-python-matplotlib/?share=twitter
  37. https://www.datadependence.com/2016/04/scientific-python-matplotlib/?share=facebook
  38. https://www.datadependence.com/2016/04/scientific-python-matplotlib/?share=google-plus-1
  39. https://www.datadependence.com/category/data-science/
  40. https://www.datadependence.com/category/programming/
  41. https://www.datadependence.com/tag/data-science/
  42. https://www.datadependence.com/tag/matplotlib/
  43. https://www.datadependence.com/tag/python/
  44. https://www.datadependence.com/tag/scientific/
  45. https://www.datadependence.com/2016/06/creating-map-visualisations-in-python/
  46. https://www.datadependence.com/2016/06/creating-map-visualisations-in-python/
  47. https://www.datadependence.com/2016/05/scientific-python-pandas/
  48. https://www.datadependence.com/2016/05/scientific-python-pandas/
  49. https://www.datadependence.com/2016/04/how-to-build-gui-in-python-3/
  50. https://www.datadependence.com/2016/04/how-to-build-gui-in-python-3/
  51. https://www.datadependence.com/2016/07/write-pythonic-code-like-a-seasoned-developer/
  52. https://www.datadependence.com/2016/07/write-pythonic-code-like-a-seasoned-developer/
  53. http://my.studiopress.com/themes/metro/
  54. https://www.studiopress.com/
  55. https://wordpress.org/
  56. https://www.datadependence.com/wp-login.php
