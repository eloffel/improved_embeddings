   #[1]github [2]recent commits to pytorch-examples:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]132
     * [35]star [36]2,642
     * [37]fork [38]555

[39]jcjohnson/[40]pytorch-examples

   [41]code [42]issues 9 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   simple examples to introduce pytorch
     * [47]31 commits
     * [48]2 branches
     * [49]0 releases
     * [50]4 contributors
     * [51]mit

    1. [52]python 100.0%

   (button) python
   branch: master (button) new pull request
   [53]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/j
   [54]download zip

downloading...

   want to be notified of new releases in jcjohnson/pytorch-examples?
   [55]sign in [56]sign up

launching github desktop...

   if nothing happens, [57]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [58]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [59]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [60]download the github extension for visual studio
   and try again.

   (button) go back
   [61]@jcjohnson
   [62]jcjohnson [63]change size_average to reduction, and make a note
   about sums vs means    (button)    
    in mseloss

   latest commit [64]73a662b oct 24, 2018
   [65]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [66]autograd
   [67]nn [68]change size_average to reduction, and make a note about sums
   vs means    oct 24, 2018
   [69]tensor [70]update code for pytorch 0.4 apr 18, 2018
   [71].gitignore [72]initial commit jan 23, 2017
   [73]license
   [74]readme.md
   [75]readme_raw.md
   [76]build_readme.py

readme.md

   this repository introduces the fundamental concepts of [77]pytorch
   through self-contained examples.

   at its core, pytorch provides two main features:
     * an n-dimensional tensor, similar to numpy but can run on gpus
     * automatic differentiation for building and training neural networks

   we will use a fully-connected relu network as our running example. the
   network will have a single hidden layer, and will be trained with
   id119 to fit random data by minimizing the euclidean
   distance between the network output and the true output.

   note: these examples have been update for pytorch 0.4, which made
   several major changes to the core pytorch api. most notably, prior to
   0.4 tensors had to be wrapped in variable objects to use autograd; this
   functionality has now been added directly to tensors, and variables are
   now deprecated.

table of contents

     * [78]warm-up: numpy
     * [79]pytorch: tensors
     * [80]pytorch: autograd
     * [81]pytorch: defining new autograd functions
     * [82]tensorflow: static graphs
     * [83]pytorch: nn
     * [84]pytorch: optim
     * [85]pytorch: custom nn modules
     * [86]pytorch: control flow and weight sharing

warm-up: numpy

   before introducing pytorch, we will first implement the network using
   numpy.

   numpy provides an n-dimensional array object, and many functions for
   manipulating these arrays. numpy is a generic framework for scientific
   computing; it does not know anything about computation graphs, or deep
   learning, or gradients. however we can easily use numpy to fit a
   two-layer network to random data by manually implementing the forward
   and backward passes through the network using numpy operations:
# code in file tensor/two_layer_net_numpy.py
import numpy as np

# n is batch size; d_in is input dimension;
# h is hidden dimension; d_out is output dimension.
n, d_in, h, d_out = 64, 1000, 100, 10

# create random input and output data
x = np.random.randn(n, d_in)
y = np.random.randn(n, d_out)

# randomly initialize weights
w1 = np.random.randn(d_in, h)
w2 = np.random.randn(h, d_out)

learning_rate = 1e-6
for t in range(500):
  # forward pass: compute predicted y
  h = x.dot(w1)
  h_relu = np.maximum(h, 0)
  y_pred = h_relu.dot(w2)

  # compute and print loss
  loss = np.square(y_pred - y).sum()
  print(t, loss)

  # backprop to compute gradients of w1 and w2 with respect to loss
  grad_y_pred = 2.0 * (y_pred - y)
  grad_w2 = h_relu.t.dot(grad_y_pred)
  grad_h_relu = grad_y_pred.dot(w2.t)
  grad_h = grad_h_relu.copy()
  grad_h[h < 0] = 0
  grad_w1 = x.t.dot(grad_h)

  # update weights
  w1 -= learning_rate * grad_w1
  w2 -= learning_rate * grad_w2

pytorch: tensors

   numpy is a great framework, but it cannot utilize gpus to accelerate
   its numerical computations. for modern deep neural networks, gpus often
   provide speedups of [87]50x or greater, so unfortunately numpy won't be
   enough for modern deep learning.

   here we introduce the most fundamental pytorch concept: the tensor. a
   pytorch tensor is conceptually identical to a numpy array: a tensor is
   an n-dimensional array, and pytorch provides many functions for
   operating on these tensors. any computation you might want to perform
   with numpy can also be accomplished with pytorch tensors; you should
   think of them as a generic tool for scientific computing.

   however unlike numpy, pytorch tensors can utilize gpus to accelerate
   their numeric computations. to run a pytorch tensor on gpu, you use the
   device argument when constructing a tensor to place the tensor on a
   gpu.

   here we use pytorch tensors to fit a two-layer network to random data.
   like the numpy example above we manually implement the forward and
   backward passes through the network, using operations on pytorch
   tensors:
# code in file tensor/two_layer_net_tensor.py
import torch

device = torch.device('cpu')
# device = torch.device('cuda') # uncomment this to run on gpu

# n is batch size; d_in is input dimension;
# h is hidden dimension; d_out is output dimension.
n, d_in, h, d_out = 64, 1000, 100, 10

# create random input and output data
x = torch.randn(n, d_in, device=device)
y = torch.randn(n, d_out, device=device)

# randomly initialize weights
w1 = torch.randn(d_in, h, device=device)
w2 = torch.randn(h, d_out, device=device)

learning_rate = 1e-6
for t in range(500):
  # forward pass: compute predicted y
  h = x.mm(w1)
  h_relu = h.clamp(min=0)
  y_pred = h_relu.mm(w2)

  # compute and print loss; loss is a scalar, and is stored in a pytorch tensor
  # of shape (); we can get its value as a python number with loss.item().
  loss = (y_pred - y).pow(2).sum()
  print(t, loss.item())

  # backprop to compute gradients of w1 and w2 with respect to loss
  grad_y_pred = 2.0 * (y_pred - y)
  grad_w2 = h_relu.t().mm(grad_y_pred)
  grad_h_relu = grad_y_pred.mm(w2.t())
  grad_h = grad_h_relu.clone()
  grad_h[h < 0] = 0
  grad_w1 = x.t().mm(grad_h)

  # update weights using id119
  w1 -= learning_rate * grad_w1
  w2 -= learning_rate * grad_w2

pytorch: autograd

   in the above examples, we had to manually implement both the forward
   and backward passes of our neural network. manually implementing the
   backward pass is not a big deal for a small two-layer network, but can
   quickly get very hairy for large complex networks.

   thankfully, we can use [88]automatic differentiation to automate the
   computation of backward passes in neural networks. the autograd package
   in pytorch provides exactly this functionality. when using autograd,
   the forward pass of your network will define a computational graph;
   nodes in the graph will be tensors, and edges will be functions that
   produce output tensors from input tensors. backpropagating through this
   graph then allows you to easily compute gradients.

   this sounds complicated, it's pretty simple to use in practice. if we
   want to compute gradients with respect to some tensor, then we set
   requires_grad=true when constructing that tensor. any pytorch
   operations on that tensor will cause a computational graph to be
   constructed, allowing us to later perform id26 through the
   graph. if x is a tensor with requires_grad=true, then after
   id26 x.grad will be another tensor holding the gradient of x
   with respect to some scalar value.

   sometimes you may wish to prevent pytorch from building computational
   graphs when performing certain operations on tensors with
   requires_grad=true; for example we usually don't want to backpropagate
   through the weight update steps when training a neural network. in such
   scenarios we can use the torch.no_grad() context manager to prevent the
   construction of a computational graph.

   here we use pytorch tensors and autograd to implement our two-layer
   network; now we no longer need to manually implement the backward pass
   through the network:
# code in file autograd/two_layer_net_autograd.py
import torch

device = torch.device('cpu')
# device = torch.device('cuda') # uncomment this to run on gpu

# n is batch size; d_in is input dimension;
# h is hidden dimension; d_out is output dimension.
n, d_in, h, d_out = 64, 1000, 100, 10

# create random tensors to hold input and outputs
x = torch.randn(n, d_in, device=device)
y = torch.randn(n, d_out, device=device)

# create random tensors for weights; setting requires_grad=true means that we
# want to compute gradients for these tensors during the backward pass.
w1 = torch.randn(d_in, h, device=device, requires_grad=true)
w2 = torch.randn(h, d_out, device=device, requires_grad=true)

learning_rate = 1e-6
for t in range(500):
  # forward pass: compute predicted y using operations on tensors. since w1 and
  # w2 have requires_grad=true, operations involving these tensors will cause
  # pytorch to build a computational graph, allowing automatic computation of
  # gradients. since we are no longer implementing the backward pass by hand we
  # don't need to keep references to intermediate values.
  y_pred = x.mm(w1).clamp(min=0).mm(w2)

  # compute and print loss. loss is a tensor of shape (), and loss.item()
  # is a python number giving its value.
  loss = (y_pred - y).pow(2).sum()
  print(t, loss.item())

  # use autograd to compute the backward pass. this call will compute the
  # gradient of loss with respect to all tensors with requires_grad=true.
  # after this call w1.grad and w2.grad will be tensors holding the gradient
  # of the loss with respect to w1 and w2 respectively.
  loss.backward()

  # update weights using id119. for this step we just want to mutate
  # the values of w1 and w2 in-place; we don't want to build up a computational
  # graph for the update steps, so we use the torch.no_grad() context manager
  # to prevent pytorch from building a computational graph for the updates
  with torch.no_grad():
    w1 -= learning_rate * w1.grad
    w2 -= learning_rate * w2.grad

    # manually zero the gradients after running the backward pass
    w1.grad.zero_()
    w2.grad.zero_()

pytorch: defining new autograd functions

   under the hood, each primitive autograd operator is really two
   functions that operate on tensors. the forward function computes output
   tensors from input tensors. the backward function receives the gradient
   of the output tensors with respect to some scalar value, and computes
   the gradient of the input tensors with respect to that same scalar
   value.

   in pytorch we can easily define our own autograd operator by defining a
   subclass of torch.autograd.function and implementing the forward and
   backward functions. we can then use our new autograd operator by
   constructing an instance and calling it like a function, passing
   tensors containing input data.

   in this example we define our own custom autograd function for
   performing the relu nonlinearity, and use it to implement our two-layer
   network:
# code in file autograd/two_layer_net_custom_function.py
import torch

class myrelu(torch.autograd.function):
  """
  we can implement our own custom autograd functions by subclassing
  torch.autograd.function and implementing the forward and backward passes
  which operate on tensors.
  """
  @staticmethod
  def forward(ctx, x):
    """
    in the forward pass we receive a context object and a tensor containing the
    input; we must return a tensor containing the output, and we can use the
    context object to cache objects for use in the backward pass.
    """
    ctx.save_for_backward(x)
    return x.clamp(min=0)

  @staticmethod
  def backward(ctx, grad_output):
    """
    in the backward pass we receive the context object and a tensor containing
    the gradient of the loss with respect to the output produced during the
    forward pass. we can retrieve cached data from the context object, and must
    compute and return the gradient of the loss with respect to the input to the
    forward function.
    """
    x, = ctx.saved_tensors
    grad_x = grad_output.clone()
    grad_x[x < 0] = 0
    return grad_x


device = torch.device('cpu')
# device = torch.device('cuda') # uncomment this to run on gpu

# n is batch size; d_in is input dimension;
# h is hidden dimension; d_out is output dimension.
n, d_in, h, d_out = 64, 1000, 100, 10

# create random tensors to hold input and output
x = torch.randn(n, d_in, device=device)
y = torch.randn(n, d_out, device=device)

# create random tensors for weights.
w1 = torch.randn(d_in, h, device=device, requires_grad=true)
w2 = torch.randn(h, d_out, device=device, requires_grad=true)

learning_rate = 1e-6
for t in range(500):
  # forward pass: compute predicted y using operations on tensors; we call our
  # custom relu implementation using the myrelu.apply function
  y_pred = myrelu.apply(x.mm(w1)).mm(w2)

  # compute and print loss
  loss = (y_pred - y).pow(2).sum()
  print(t, loss.item())

  # use autograd to compute the backward pass.
  loss.backward()

  with torch.no_grad():
    # update weights using id119
    w1 -= learning_rate * w1.grad
    w2 -= learning_rate * w2.grad

    # manually zero the gradients after running the backward pass
    w1.grad.zero_()
    w2.grad.zero_()

tensorflow: static graphs

   pytorch autograd looks a lot like tensorflow: in both frameworks we
   define a computational graph, and use automatic differentiation to
   compute gradients. the biggest difference between the two is that
   tensorflow's computational graphs are static and pytorch uses dynamic
   computational graphs.

   in tensorflow, we define the computational graph once and then execute
   the same graph over and over again, possibly feeding different input
   data to the graph. in pytorch, each forward pass defines a new
   computational graph.

   static graphs are nice because you can optimize the graph up front; for
   example a framework might decide to fuse some graph operations for
   efficiency, or to come up with a strategy for distributing the graph
   across many gpus or many machines. if you are reusing the same graph
   over and over, then this potentially costly up-front optimization can
   be amortized as the same graph is rerun over and over.

   one aspect where static and dynamic graphs differ is control flow. for
   some models we may wish to perform different computation for each data
   point; for example a recurrent network might be unrolled for different
   numbers of time steps for each data point; this unrolling can be
   implemented as a loop. with a static graph the loop construct needs to
   be a part of the graph; for this reason tensorflow provides operators
   such as tf.scan for embedding loops into the graph. with dynamic graphs
   the situation is simpler: since we build graphs on-the-fly for each
   example, we can use normal imperative flow control to perform
   computation that differs for each input.

   to contrast with the pytorch autograd example above, here we use
   tensorflow to fit a simple two-layer net:
# code in file autograd/tf_two_layer_net.py
import tensorflow as tf
import numpy as np

# first we set up the computational graph:

# n is batch size; d_in is input dimension;
# h is hidden dimension; d_out is output dimension.
n, d_in, h, d_out = 64, 1000, 100, 10

# create placeholders for the input and target data; these will be filled
# with real data when we execute the graph.
x = tf.placeholder(tf.float32, shape=(none, d_in))
y = tf.placeholder(tf.float32, shape=(none, d_out))

# create variables for the weights and initialize them with random data.
# a tensorflow variable persists its value across executions of the graph.
w1 = tf.variable(tf.random_normal((d_in, h)))
w2 = tf.variable(tf.random_normal((h, d_out)))

# forward pass: compute the predicted y using operations on tensorflow tensors.
# note that this code does not actually perform any numeric operations; it
# merely sets up the computational graph that we will later execute.
h = tf.matmul(x, w1)
h_relu = tf.maximum(h, tf.zeros(1))
y_pred = tf.matmul(h_relu, w2)

# compute loss using operations on tensorflow tensors
loss = tf.reduce_sum((y - y_pred) ** 2.0)

# compute gradient of the loss with respect to w1 and w2.
grad_w1, grad_w2 = tf.gradients(loss, [w1, w2])

# update the weights using id119. to actually update the weights
# we need to evaluate new_w1 and new_w2 when executing the graph. note that
# in tensorflow the the act of updating the value of the weights is part of
# the computational graph; in pytorch this happens outside the computational
# graph.
learning_rate = 1e-6
new_w1 = w1.assign(w1 - learning_rate * grad_w1)
new_w2 = w2.assign(w2 - learning_rate * grad_w2)

# now we have built our computational graph, so we enter a tensorflow session to
# actually execute the graph.
with tf.session() as sess:
  # run the graph once to initialize the variables w1 and w2.
  sess.run(tf.global_variables_initializer())

  # create numpy arrays holding the actual data for the inputs x and targets y
  x_value = np.random.randn(n, d_in)
  y_value = np.random.randn(n, d_out)
  for _ in range(500):
    # execute the graph many times. each time it executes we want to bind
    # x_value to x and y_value to y, specified with the feed_dict argument.
    # each time we execute the graph we want to compute the values for loss,
    # new_w1, and new_w2; the values of these tensors are returned as numpy
    # arrays.
    loss_value, _, _ = sess.run([loss, new_w1, new_w2],
                                feed_dict={x: x_value, y: y_value})
    print(loss_value)

pytorch: nn

   computational graphs and autograd are a very powerful paradigm for
   defining complex operators and automatically taking derivatives;
   however for large neural networks raw autograd can be a bit too
   low-level.

   when building neural networks we frequently think of arranging the
   computation into layers, some of which have learnable parameters which
   will be optimized during learning.

   in tensorflow, packages like [89]keras, [90]tensorflow-slim, and
   [91]tflearn provide higher-level abstractions over raw computational
   graphs that are useful for building neural networks.

   in pytorch, the nn package serves this same purpose. the nn package
   defines a set of modules, which are roughly equivalent to neural
   network layers. a module receives input tensors and computes output
   tensors, but may also hold internal state such as tensors containing
   learnable parameters. the nn package also defines a set of useful loss
   functions that are commonly used when training neural networks.

   in this example we use the nn package to implement our two-layer
   network:
# code in file nn/two_layer_net_nn.py
import torch

device = torch.device('cpu')
# device = torch.device('cuda') # uncomment this to run on gpu

# n is batch size; d_in is input dimension;
# h is hidden dimension; d_out is output dimension.
n, d_in, h, d_out = 64, 1000, 100, 10

# create random tensors to hold inputs and outputs
x = torch.randn(n, d_in, device=device)
y = torch.randn(n, d_out, device=device)

# use the nn package to define our model as a sequence of layers. nn.sequential
# is a module which contains other modules, and applies them in sequence to
# produce its output. each linear module computes output from input using a
# linear function, and holds internal tensors for its weight and bias.
# after constructing the model we use the .to() method to move it to the
# desired device.
model = torch.nn.sequential(
          torch.nn.linear(d_in, h),
          torch.nn.relu(),
          torch.nn.linear(h, d_out),
        ).to(device)

# the nn package also contains definitions of popular id168s; in this
# case we will use mean squared error (mse) as our id168. setting
# reduction='sum' means that we are computing the *sum* of squared errors rather
# than the mean; this is for consistency with the examples above where we
# manually compute the loss, but in practice it is more common to use mean
# squared error as a loss by setting reduction='elementwise_mean'.
loss_fn = torch.nn.mseloss(reduction='sum')

learning_rate = 1e-4
for t in range(500):
  # forward pass: compute predicted y by passing x to the model. module objects
  # override the __call__ operator so you can call them like functions. when
  # doing so you pass a tensor of input data to the module and it produces
  # a tensor of output data.
  y_pred = model(x)

  # compute and print loss. we pass tensors containing the predicted and true
  # values of y, and the id168 returns a tensor containing the loss.
  loss = loss_fn(y_pred, y)
  print(t, loss.item())

  # zero the gradients before running the backward pass.
  model.zero_grad()

  # backward pass: compute gradient of the loss with respect to all the learnabl
e
  # parameters of the model. internally, the parameters of each module are store
d
  # in tensors with requires_grad=true, so this call will compute gradients for
  # all learnable parameters in the model.
  loss.backward()

  # update the weights using id119. each parameter is a tensor, so
  # we can access its data and gradients like we did before.
  with torch.no_grad():
    for param in model.parameters():
      param.data -= learning_rate * param.grad

pytorch: optim

   up to this point we have updated the weights of our models by manually
   mutating tensors holding learnable parameters. this is not a huge
   burden for simple optimization algorithms like stochastic gradient
   descent, but in practice we often train neural networks using more
   sophisiticated optimizers like adagrad, rmsprop, adam, etc.

   the optim package in pytorch abstracts the idea of an optimization
   algorithm and provides implementations of commonly used optimization
   algorithms.

   in this example we will use the nn package to define our model as
   before, but we will optimize the model using the adam algorithm
   provided by the optim package:
# code in file nn/two_layer_net_optim.py
import torch

# n is batch size; d_in is input dimension;
# h is hidden dimension; d_out is output dimension.
n, d_in, h, d_out = 64, 1000, 100, 10

# create random tensors to hold inputs and outputs.
x = torch.randn(n, d_in)
y = torch.randn(n, d_out)

# use the nn package to define our model and id168.
model = torch.nn.sequential(
          torch.nn.linear(d_in, h),
          torch.nn.relu(),
          torch.nn.linear(h, d_out),
        )
loss_fn = torch.nn.mseloss(reduction='sum')

# use the optim package to define an optimizer that will update the weights of
# the model for us. here we will use adam; the optim package contains many other
# optimization algoriths. the first argument to the adam constructor tells the
# optimizer which tensors it should update.
learning_rate = 1e-4
optimizer = torch.optim.adam(model.parameters(), lr=learning_rate)
for t in range(500):
  # forward pass: compute predicted y by passing x to the model.
  y_pred = model(x)

  # compute and print loss.
  loss = loss_fn(y_pred, y)
  print(t, loss.item())

  # before the backward pass, use the optimizer object to zero all of the
  # gradients for the tensors it will update (which are the learnable weights
  # of the model)
  optimizer.zero_grad()

  # backward pass: compute gradient of the loss with respect to model parameters
  loss.backward()

  # calling the step function on an optimizer makes an update to its parameters
  optimizer.step()

pytorch: custom nn modules

   sometimes you will want to specify models that are more complex than a
   sequence of existing modules; for these cases you can define your own
   modules by subclassing nn.module and defining a forward which receives
   input tensors and produces output tensors using other modules or other
   autograd operations on tensors.

   in this example we implement our two-layer network as a custom module
   subclass:
# code in file nn/two_layer_net_module.py
import torch

class twolayernet(torch.nn.module):
  def __init__(self, d_in, h, d_out):
    """
    in the constructor we instantiate two nn.linear modules and assign them as
    member variables.
    """
    super(twolayernet, self).__init__()
    self.linear1 = torch.nn.linear(d_in, h)
    self.linear2 = torch.nn.linear(h, d_out)

  def forward(self, x):
    """
    in the forward function we accept a tensor of input data and we must return
    a tensor of output data. we can use modules defined in the constructor as
    well as arbitrary (differentiable) operations on tensors.
    """
    h_relu = self.linear1(x).clamp(min=0)
    y_pred = self.linear2(h_relu)
    return y_pred

# n is batch size; d_in is input dimension;
# h is hidden dimension; d_out is output dimension.
n, d_in, h, d_out = 64, 1000, 100, 10

# create random tensors to hold inputs and outputs
x = torch.randn(n, d_in)
y = torch.randn(n, d_out)

# construct our model by instantiating the class defined above.
model = twolayernet(d_in, h, d_out)

# construct our id168 and an optimizer. the call to model.parameters()
# in the sgd constructor will contain the learnable parameters of the two
# nn.linear modules which are members of the model.
loss_fn = torch.nn.mseloss(reduction='sum')
optimizer = torch.optim.sgd(model.parameters(), lr=1e-4)
for t in range(500):
  # forward pass: compute predicted y by passing x to the model
  y_pred = model(x)

  # compute and print loss
  loss = loss_fn(y_pred, y)
  print(t, loss.item())

  # zero gradients, perform a backward pass, and update the weights.
  optimizer.zero_grad()
  loss.backward()
  optimizer.step()

pytorch: control flow + weight sharing

   as an example of dynamic graphs and weight sharing, we implement a very
   strange model: a fully-connected relu network that on each forward pass
   chooses a random number between 1 and 4 and uses that many hidden
   layers, reusing the same weights multiple times to compute the
   innermost hidden layers.

   for this model can use normal python flow control to implement the
   loop, and we can implement weight sharing among the innermost layers by
   simply reusing the same module multiple times when defining the forward
   pass.

   we can easily implement this model as a module subclass:
# code in file nn/dynamic_net.py
import random
import torch

class dynamicnet(torch.nn.module):
  def __init__(self, d_in, h, d_out):
    """
    in the constructor we construct three nn.linear instances that we will use
    in the forward pass.
    """
    super(dynamicnet, self).__init__()
    self.input_linear = torch.nn.linear(d_in, h)
    self.middle_linear = torch.nn.linear(h, h)
    self.output_linear = torch.nn.linear(h, d_out)

  def forward(self, x):
    """
    for the forward pass of the model, we randomly choose either 0, 1, 2, or 3
    and reuse the middle_linear module that many times to compute hidden layer
    representations.

    since each forward pass builds a dynamic computation graph, we can use norma
l
    python control-flow operators like loops or conditional statements when
    defining the forward pass of the model.

    here we also see that it is perfectly safe to reuse the same module many
    times when defining a computational graph. this is a big improvement from lu
a
    torch, where each module could be used only once.
    """
    h_relu = self.input_linear(x).clamp(min=0)
    for _ in range(random.randint(0, 3)):
      h_relu = self.middle_linear(h_relu).clamp(min=0)
    y_pred = self.output_linear(h_relu)
    return y_pred


# n is batch size; d_in is input dimension;
# h is hidden dimension; d_out is output dimension.
n, d_in, h, d_out = 64, 1000, 100, 10

# create random tensors to hold inputs and outputs.
x = torch.randn(n, d_in)
y = torch.randn(n, d_out)

# construct our model by instantiating the class defined above
model = dynamicnet(d_in, h, d_out)

# construct our id168 and an optimizer. training this strange model with
# vanilla stochastic id119 is tough, so we use momentum
criterion = torch.nn.mseloss(reduction='sum')
optimizer = torch.optim.sgd(model.parameters(), lr=1e-4, momentum=0.9)
for t in range(500):
  # forward pass: compute predicted y by passing x to the model
  y_pred = model(x)

  # compute and print loss
  loss = criterion(y_pred, y)
  print(t, loss.item())

  # zero gradients, perform a backward pass, and update the weights.
  optimizer.zero_grad()
  loss.backward()
  optimizer.step()

     *    2019 github, inc.
     * [92]terms
     * [93]privacy
     * [94]security
     * [95]status
     * [96]help

     * [97]contact github
     * [98]pricing
     * [99]api
     * [100]training
     * [101]blog
     * [102]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [103]reload to refresh your
   session. you signed out in another tab or window. [104]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/jcjohnson/pytorch-examples/commits/master.atom
   3. https://github.com/jcjohnson/pytorch-examples#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/jcjohnson/pytorch-examples
  32. https://github.com/join
  33. https://github.com/login?return_to=/jcjohnson/pytorch-examples
  34. https://github.com/jcjohnson/pytorch-examples/watchers
  35. https://github.com/login?return_to=/jcjohnson/pytorch-examples
  36. https://github.com/jcjohnson/pytorch-examples/stargazers
  37. https://github.com/login?return_to=/jcjohnson/pytorch-examples
  38. https://github.com/jcjohnson/pytorch-examples/network/members
  39. https://github.com/jcjohnson
  40. https://github.com/jcjohnson/pytorch-examples
  41. https://github.com/jcjohnson/pytorch-examples
  42. https://github.com/jcjohnson/pytorch-examples/issues
  43. https://github.com/jcjohnson/pytorch-examples/pulls
  44. https://github.com/jcjohnson/pytorch-examples/projects
  45. https://github.com/jcjohnson/pytorch-examples/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/jcjohnson/pytorch-examples/commits/master
  48. https://github.com/jcjohnson/pytorch-examples/branches
  49. https://github.com/jcjohnson/pytorch-examples/releases
  50. https://github.com/jcjohnson/pytorch-examples/graphs/contributors
  51. https://github.com/jcjohnson/pytorch-examples/blob/master/license
  52. https://github.com/jcjohnson/pytorch-examples/search?l=python
  53. https://github.com/jcjohnson/pytorch-examples/find/master
  54. https://github.com/jcjohnson/pytorch-examples/archive/master.zip
  55. https://github.com/login?return_to=https://github.com/jcjohnson/pytorch-examples
  56. https://github.com/join?return_to=/jcjohnson/pytorch-examples
  57. https://desktop.github.com/
  58. https://desktop.github.com/
  59. https://developer.apple.com/xcode/
  60. https://visualstudio.github.com/
  61. https://github.com/jcjohnson
  62. https://github.com/jcjohnson/pytorch-examples/commits?author=jcjohnson
  63. https://github.com/jcjohnson/pytorch-examples/commit/73a662bbe9fce257ec8c3cdbb44a8112a42d39f3
  64. https://github.com/jcjohnson/pytorch-examples/commit/73a662bbe9fce257ec8c3cdbb44a8112a42d39f3
  65. https://github.com/jcjohnson/pytorch-examples/tree/73a662bbe9fce257ec8c3cdbb44a8112a42d39f3
  66. https://github.com/jcjohnson/pytorch-examples/tree/master/autograd
  67. https://github.com/jcjohnson/pytorch-examples/tree/master/nn
  68. https://github.com/jcjohnson/pytorch-examples/commit/73a662bbe9fce257ec8c3cdbb44a8112a42d39f3
  69. https://github.com/jcjohnson/pytorch-examples/tree/master/tensor
  70. https://github.com/jcjohnson/pytorch-examples/commit/e1bfa13e4ad39a05e9c3b11a488860b18da29a4c
  71. https://github.com/jcjohnson/pytorch-examples/blob/master/.gitignore
  72. https://github.com/jcjohnson/pytorch-examples/commit/d28debf55819d03cf90b19bc0b150c9e32a772f0
  73. https://github.com/jcjohnson/pytorch-examples/blob/master/license
  74. https://github.com/jcjohnson/pytorch-examples/blob/master/readme.md
  75. https://github.com/jcjohnson/pytorch-examples/blob/master/readme_raw.md
  76. https://github.com/jcjohnson/pytorch-examples/blob/master/build_readme.py
  77. https://github.com/pytorch/pytorch
  78. https://github.com/jcjohnson/pytorch-examples#warm-up-numpy
  79. https://github.com/jcjohnson/pytorch-examples#pytorch-tensors
  80. https://github.com/jcjohnson/pytorch-examples#pytorch-autograd
  81. https://github.com/jcjohnson/pytorch-examples#pytorch-defining-new-autograd-functions
  82. https://github.com/jcjohnson/pytorch-examples#tensorflow-static-graphs
  83. https://github.com/jcjohnson/pytorch-examples#pytorch-nn
  84. https://github.com/jcjohnson/pytorch-examples#pytorch-optim
  85. https://github.com/jcjohnson/pytorch-examples#pytorch-custom-nn-modules
  86. https://github.com/jcjohnson/pytorch-examples#pytorch-control-flow--weight-sharing
  87. https://github.com/jcjohnson/id98-benchmarks
  88. https://en.wikipedia.org/wiki/automatic_differentiation
  89. https://github.com/fchollet/keras
  90. https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/slim
  91. http://tflearn.org/
  92. https://github.com/site/terms
  93. https://github.com/site/privacy
  94. https://github.com/security
  95. https://githubstatus.com/
  96. https://help.github.com/
  97. https://github.com/contact
  98. https://github.com/pricing
  99. https://developer.github.com/
 100. https://training.github.com/
 101. https://github.blog/
 102. https://github.com/about
 103. https://github.com/jcjohnson/pytorch-examples
 104. https://github.com/jcjohnson/pytorch-examples

   hidden links:
 106. https://github.com/
 107. https://github.com/jcjohnson/pytorch-examples
 108. https://github.com/jcjohnson/pytorch-examples
 109. https://github.com/jcjohnson/pytorch-examples
 110. https://help.github.com/articles/which-remote-url-should-i-use
 111. https://github.com/jcjohnson/pytorch-examples#table-of-contents
 112. https://github.com/jcjohnson/pytorch-examples#warm-up-numpy
 113. https://github.com/jcjohnson/pytorch-examples#pytorch-tensors
 114. https://github.com/jcjohnson/pytorch-examples#pytorch-autograd
 115. https://github.com/jcjohnson/pytorch-examples#pytorch-defining-new-autograd-functions
 116. https://github.com/jcjohnson/pytorch-examples#tensorflow-static-graphs
 117. https://github.com/jcjohnson/pytorch-examples#pytorch-nn
 118. https://github.com/jcjohnson/pytorch-examples#pytorch-optim
 119. https://github.com/jcjohnson/pytorch-examples#pytorch-custom-nn-modules
 120. https://github.com/jcjohnson/pytorch-examples#pytorch-control-flow--weight-sharing
 121. https://github.com/
