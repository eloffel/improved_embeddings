   #[1]betterexplained    feed [2]betterexplained    comments feed
   [3]betterexplained    an intuitive guide to id202 comments feed

   [4]betterexplained betterexplained
   ____________________
      
   menu

     * [5]home
     * [6]all articles
     * [7]popular
     * [8]calculus guide
     * [9]contact
     * [10]newsletter
     * [11]about
     * [12]feedback

   ____________________
      

an intuitive guide to id202

   [13]home   [14]math, [15]popular   an intuitive guide to id202

   despite two id202 classes, my knowledge consisted of
      matrices, determinants, eigen something something   .

   why? well, let   s try this course format:
     * name the course id202 but focus on things called matrices
       and vectors
     * teach concepts like row/column order with mnemonics instead of
       explaining the reasoning
     * favor abstract examples (2d vectors! 3d vectors!) and avoid
       real-world topics until the final week

   the survivors are physicists, graphics programmers and other
   masochists. we missed the key insight:

   id202 gives you mini-spreadsheets for your math equations.

   we can take a table of data (a matrix) and create updated tables from
   the original. it   s the power of a spreadsheet written as an equation.

   here   s the id202 introduction i wish i had, with a real-world
   stock market example.

what   s in a name?

      algebra    means, roughly,    relationships   . grade-school algebra
   explores the relationship between unknown numbers. without knowing x
   and y, we can still work out that $(x + y)^2 = x^2 + 2xy + y^2$.

      id202    means, roughly,    line-like relationships   . let   s
   clarify a bit.

   straight lines are predictable. imagine a rooftop: move forward 3
   horizontal feet (relative to the ground) and you might rise 1 foot in
   elevation (the slope! rise/run = 1/3). move forward 6 feet, and you   d
   expect a rise of 2 feet. contrast this with climbing a dome: each
   horizontal foot forward raises you a different amount.

   lines are nice and predictable:
     * if 3 feet forward has a 1-foot rise, then going 10x as far should
       give a 10x rise (30 feet forward is a 10-foot rise)
     * if 3 feet forward has a 1-foot rise, and 6 feet has a 2-foot rise,
       then (3 + 6) feet should have a (1 + 2) foot rise

   in math terms, an operation f is linear if scaling inputs scales the
   output, and adding inputs adds the outputs:

   \begin{aligned} f(ax) &= a \cdot f(x) \\ f(x + y) &= f(x) + f(y)
   \end{aligned}

   in our example, $f(x)$ calculates the rise when moving forward x feet,
   and the properties hold:

   \displaystyle{f(10 \cdot 3) = 10 \cdot f(3) = 10}

   \displaystyle{f(3+6) = f(3) + f(6) = 3}

linear operations

   an operation is a calculation based on some inputs. which operations
   are linear and predictable? multiplication, it seems.

   exponents ($f(x) = x^2$) aren   t predictable: $10^2$ is 100, but $20^2$
   is 400. we doubled the input but quadrupled the output.

   surprisingly, regular addition isn   t linear either. consider the    add
   three    function $f(x) = x + 3$:

   \begin{aligned} f(10) &= 13 \\ f(20) &= 23 \end{aligned}

   we doubled the input and did not double the output. (yes, $f(x) = x +
   3$ happens to be the equation for an offset line, but it   s still not
      linear    because $f(10) \neq 10 \cdot f(1)$. fun.)

   so, what types of functions are actually linear? plain-old scaling by a
   constant, or functions that look like: $f(x) = ax$. in our roof
   example, $a = 1/3$.

   but life isn   t too boring. we can still combine multiple linear
   functions ($a, b, c$) into a larger one, $g$:

   \displaystyle{g(x,y,z) = a(x) + b(y) + c(z) = ax + by + cz }

   $g$ is still linear, since doubling the input continues to double the
   output:

   \displaystyle{g(2x, 2y, 2z) = a(2x) + b(2y) + c(2z) = 2(ax + by + cz) =
   2 \cdot g(x, y, z)}

   we have    mini arithmetic   : multiply inputs by a constant, and add the
   results. it   s actually useful because we can split inputs apart,
   analyze them individually, and combine the results:

   \displaystyle{g(x,y,z) = g(x,0,0) + g(0,y,0) + g(0,0,z)}

   if we allowed non-linear operations (like $x^2$) we couldn   t split our
   work: $(a+b)^2 \neq a^2 + b^2$. limiting ourselves to linear operations
   has its advantages.

organizing inputs and operations

   most courses hit you in the face with the details of a matrix.    ok
   kids, let   s learn to speak. select a subject, verb and object. next,
   conjugate the verb. then, add the prepositions      

   no! grammar is not the focus. what   s the key idea?
     * we have a bunch of inputs to track
     * we have predictable, linear operations to perform (our
          mini-arithmetic   )
     * we generate a result, perhaps transforming it again

   ok. first, how should we track a bunch of inputs? how about a list:
x
y
z

   not bad. we could write it (x, y, z) too     hang onto that thought.

   next, how should we track our operations? remember, we only have    mini
   arithmetic   : multiplications by a constant, with a final addition. if
   our operation $f$ behaves like this:

   \displaystyle{f(x, y, z) = 3x + 4y + 5z}

   we could abbreviate the entire function as (3, 4, 5). we know to
   multiply the first input by the first value, the second input by the
   second value, etc., and add the result.

   only need the first input?

   \displaystyle{g(x, y, z) = 3x + 0y + 0z = (3, 0, 0)}

   let   s spice it up: how should we handle multiple sets of inputs? let   s
   say we want to run operation f on both (a, b, c) and (x, y, z). we
   could try this:

   \displaystyle{f(a, b, c, x, y, z) = ?}

   but it won   t work: f expects 3 inputs, not 6. we should separate the
   inputs into groups:
1st input  2nd input
--------------------
a          x
b          y
c          z

   much neater.

   and how could we run the same input through several operations? have a
   row for each operation:
f: 3 4 5
g: 3 0 0

   neat. we   re getting organized: inputs in vertical columns, operations
   in horizontal rows.

visualizing the matrix

   words aren   t enough. here   s how i visualize inputs, operations, and
   outputs:

   id202 reference

   imagine    pouring    each input through each operation:

   id202 pour in

   as an input passes an operation, it creates an output item. in our
   example, the input (a, b, c) goes against operation f and outputs 3a +
   4b + 5c. it goes against operation g and outputs 3a + 0 + 0.

   time for the red pill. a matrix is a shorthand for our diagrams:

   \text{i}\text{nputs} = a = \begin{bmatrix}
   \text{i}\text{nput1}&\text{i}\text{nput2}\end{bmatrix} =
   \begin{bmatrix}a & x\\b & y\\c & z\end{bmatrix}

   \text{operations} = m = \begin{bmatrix}\text{operation1}\\
   \text{operation2}\end{bmatrix} = \begin{bmatrix}3 & 4 & 5\\3 & 0 &
   0\end{bmatrix}

   a matrix is a single variable representing a spreadsheet of inputs or
   operations.

   trickiness #1: the reading order

   instead of an input => matrix => output flow, we use function notation,
   like y = f(x) or f(x) = y. we usually write a matrix with a capital
   letter (f), and a single input column with lowercase (x). because we
   have several inputs (a) and outputs (b), they   re considered matrices
   too:

   \displaystyle{ma = b}

   \begin{bmatrix}3 & 4 & 5\\3 & 0 & 0\end{bmatrix} \begin{bmatrix}a &
   x\\b & y\\c & z\end{bmatrix} = \begin{bmatrix}3a + 4b + 5c & 3x + 4y +
   5z\\ 3a & 3x\end{bmatrix}

   trickiness #2: the numbering

   matrix size is measured as rxc: row count, then column count, and
   abbreviated    m x n    (i hear ya,    r x c    would be easier to remember).
   items in the matrix are referenced the same way: a[ij] is the ith row
   and jth column (i hear ya,    i    and    j    are easily confused on a
   chalkboard). mnemonics are ok with context, and here   s what i use:
     * rc, like roman centurion or rc cola
     * use an    l    shape. count down the l, then across

   why does rc ordering make sense? our operations matrix is 2  3 and our
   input matrix is 3  2. writing them together:
[operation matrix] [input matrix]
[operation count x operation size] [input size x input count]
[m x n] [p x q] = [m x q]
[2 x 3] [3 x 2] = [2 x 2]

   notice the matrices touch at the    size of operation    and    size of
   input    (n = p). they should match! if our inputs have 3 components, our
   operations should expect 3 items. in fact, we can only multiply
   matrices when n = p.

   the output matrix has m operation rows for each input, and q inputs,
   giving a    m x q    matrix.

fancier operations

   let   s get comfortable with operations. assuming 3 inputs, we can whip
   up a few 1-operation matrices:
     * adder: [1 1 1]
     * averager: [1/3 1/3 1/3]

   the    adder    is just a + b + c. the    averager    is similar: (a + b + c)/3
   = a/3 + b/3 + c/3.

   try these 1-liners:
     * first-input only: [1 0 0]
     * second-input only: [0 1 0]
     * third-input only: [0 0 1]

   and if we merge them into a single matrix:
[1 0 0]
[0 1 0]
[0 0 1]

   whoa     it   s the    identity matrix   , which copies 3 inputs to 3 outputs,
   unchanged. how about this guy?
[1 0 0]
[0 0 1]
[0 1 0]

   he reorders the inputs: (x, y, z) becomes (x, z, y).

   and this one?
[2 0 0]
[0 2 0]
[0 0 2]

   he   s an input doubler. we could rewrite him to 2*i (the identity
   matrix) if we were so inclined.

   and yes, when we decide to treat inputs as vector coordinates, the
   operations matrix will transform our vectors. here   s a [16]few
   examples:
     * scale: make all inputs bigger/smaller
     * skew: make certain inputs bigger/smaller
     * flip: make inputs negative
     * rotate: make new coordinates based on old ones (east becomes north,
       north becomes west, etc.)

   these are geometric interpretations of multiplication, and how to warp
   a vector space. just remember that vectors are examples of data to
   modify.

a non-vector example: stock market portfolios

   let   s practice id202 in the real world:
     * input data: stock portfolios with dollars in apple, google and
       microsoft stock
     * operations: the changes in company values after a news event
     * output: updated portfolios

   and a bonus output: let   s make a new portfolio listing the net
   profit/loss from the event.

   normally, we   d track this in a spreadsheet. let   s learn to think with
   id202:
     * the input vector could be (\$apple, \$google, \$microsoft), showing
       the dollars in each stock. (oh! these dollar values could come from
       another matrix that multiplied the number of shares by their price.
       fancy that!)
     * the 4 output operations should be: update apple value, update
       google value, update microsoft value, compute profit

   visualize the problem. imagine running through each operation:

   id202 stock example

   the key is understanding why we   re setting up the matrix like this, not
   blindly crunching numbers.

   got it? let   s introduce the scenario.

   suppose a secret idevice is launched: apple jumps 20%, google drops 5%,
   and microsoft stays the same. we want to adjust each stock value, using
   something similar to the identity matrix:
new apple     [1.2  0      0]
new google    [0    0.95   0]
new microsoft [0    0      1]

   the new apple value is the original, increased by 20% (google = 5%
   decrease, microsoft = no change).

   oh wait! we need the overall profit:

   total change = (.20 * apple) + (-.05 * google) + (0 * microsoft)

   our final operations matrix:
new apple       [1.2  0      0]
new google      [0    0.95   0]
new microsoft   [0    0      1]
total profit    [.20  -.05   0]

   making sense? three inputs enter, four outputs leave. the first three
   operations are a    modified copy    and the last brings the changes
   together.

   now let   s feed in the portfolios for alice \$1000, \$1000, \$1000) and
   bob \$500, \$2000, \$500). we can crunch the numbers by hand, or use a
   wolfram alpha ([17]calculation):

   matrix stock computation

   (note: inputs should be in columns, but it   s easier to type rows. the
   transpose operation, indicated by t (tau), converts rows to columns.)

   the final numbers: alice has \$1200 in aapl, \$950 in goog, \$1000 in
   msft, with a net profit of \$150. bob has \$600 in aapl, \$1900 in
   goog, and \$500 in msft, with a net profit of \$0.

   what   s happening? we   re doing math with our own spreadsheet. linear
   algebra emerged in the 1800s yet spreadsheets were invented in the
   1980s. i blame the gap on poor id202 education.

historical notes: solving simultaneous equations

   an early use of tables of numbers (not yet a    matrix   ) was bookkeeping
   for linear systems:

   \begin{aligned} x + 2y + 3z &= 3 \\ 2x + 3y + 1z &= -10 \\ 5x + -y + 2z
   &= 14 \end{aligned}

   becomes

   \begin{bmatrix}1 & 2 & 3\\2 & 3 & 1\\5 & -1 & 2\end{bmatrix}
   \begin{bmatrix}x \\y \\ z \end{bmatrix} = \begin{bmatrix}3 \\ -10 \\ 14
   \end{bmatrix}

   we can avoid hand cramps by adding/subtracting rows in the matrix and
   output, vs. rewriting the full equations. as the matrix evolves into
   the identity matrix, the values of x, y and z are revealed on the
   output side.

   this process, called gauss-jordan elimination, saves time. however,
   id202 is mainly about matrix transformations, not solving
   large sets of equations (it   d be like using excel for your shopping
   list).

terminology, determinants, and eigenstuff

   words have technical categories to describe their use (nouns, verbs,
   adjectives). matrices can be similarly subdivided.

   descriptions like    upper-triangular   ,    symmetric   ,    diagonal    are the
   shape of the matrix, and influence their transformations.

   the determinant is the    size    of the output transformation. if the
   input was a unit vector (representing area or volume of 1), the
   determinant is the size of the transformed area or volume. a
   determinant of 0 means matrix is    destructive    and cannot be reversed
   (similar to multiplying by zero: information was lost).

   the eigenvector and eigenvalue represent the    axes    of the
   transformation.

   consider spinning a globe: every location faces a new direction, except
   the poles.

   an    eigenvector    is an input that doesn   t change direction when it   s
   run through the matrix (it points    along the axis   ). and although the
   direction doesn   t change, the size might. the eigenvalue is the amount
   the eigenvector is scaled up or down when going through the matrix.

   (my intuition here is weak, and i   d like to explore more. here   s a
   [18]nice diagram and [19]video.)

matrices as inputs

   a funky thought: we can treat the operations matrix as inputs!

   think of a recipe as a list of commands (add 2 cups of sugar, 3 cups of
   flour   ).

   what if we want the metric version? take the instructions, treat them
   like text, and convert the units. the recipe is    input    to modify. when
   we   re done, we can follow the instructions again.

   an operations matrix is similar: commands to modify. applying one
   operations matrix to another gives a new operations matrix that applies
   both transformations, in order.

   if n is    adjust for portfolio for news    and t is    adjust portfolio for
   taxes    then applying both:

   tn = x

   means    create matrix x, which first adjusts for news, and then adjusts
   for taxes   . whoa! we didn   t need an input portfolio, we applied one
   matrix directly to the other.

   the beauty of id202 is representing an entire spreadsheet
   calculation with a single letter. want to apply the same transformation
   a few times? use n^2 or n^3.

can we use regular addition, please?

   yes, because you asked nicely. our    mini arithmetic    seems limiting:
   multiplications, but no addition? time to expand our brains.

   imagine adding a dummy entry of 1 to our input: (x, y, z) becomes (x,
   y, z, 1).

   now our operations matrix has an extra, known value to play with! if we
   want x + 1 we can write:
[1 0 0 1]

   and x + y - 3 would be:
[1 1 0 -3]

   huzzah!

   want the geeky explanation? we   re pretending our input exists in a
   1-higher dimension, and put a    1    in that dimension. we skew that
   higher dimension, which looks like a slide in the current one. for
   example: take input (x, y, z, 1) and run it through:
[1 0 0 1]
[0 1 0 1]
[0 0 1 1]
[0 0 0 1]

   the result is (x + 1, y + 1, z + 1, 1). ignoring the 4th dimension,
   every input got a +1. we keep the dummy entry, and can do more slides
   later.

   mini-arithmetic isn   t so limited after all.

onward

   i   ve overlooked some id202 subtleties, and i   m not too
   concerned. why?

   these metaphors are helping me think with matrices, more than the
   classes i    aced   . i can finally respond to    why is id202
   useful?    with    why are spreadsheets useful?   

   they   re not, unless you want a tool used to attack nearly every
   real-world problem. ask a businessman if they   d rather donate a kidney
   or be banned from excel forever. that   s the impact of id202
   we   ve overlooked: efficient notation to bring spreadsheets into our
   math equations.

   happy math.

other posts in this series

    1. [20]a visual, intuitive guide to imaginary numbers
    2. [21]intuitive arithmetic with complex numbers
    3. [22]understanding why complex multiplication works
    4. [23]intuitive guide to angles, degrees and radians
    5. [24]intuitive understanding of euler's formula
    6. [25]an interactive guide to the fourier transform
    7. [26]intuitive understanding of sine waves
    8. [27]an intuitive guide to id202
    9. [28]a programmer's intuition for id127
   10. [29]imaginary multiplication vs. imaginary exponents

   [30]88 comments

in this series

    1. [31]a visual, intuitive guide to imaginary numbers
    2. [32]intuitive arithmetic with complex numbers
    3. [33]understanding why complex multiplication works
    4. [34]intuitive guide to angles, degrees and radians
    5. [35]intuitive understanding of euler's formula
    6. [36]an interactive guide to the fourier transform
    7. [37]intuitive understanding of sine waves
    8. [38]an intuitive guide to id202
    9. [39]a programmer's intuition for id127
   10. [40]imaginary multiplication vs. imaginary exponents

about the site

   betterexplained helps 450k monthly readers with friendly, insightful
   math lessons ([41]more).
   [ins: :ins] [ins: :ins] [ins: :ins] [ins: :ins] [ins: :ins] [ins: :ins]
   [ins: :ins] [ins: :ins]

      if you can't explain it simply, you don't understand it well enough.   
      einstein ([42]more) | [43]privacy | [44]cc-by-nc-sa
   [45]twitter[46]youtube[47]reddit[48]rss

   iframe: [49]https://www.googletagmanager.com/ns.html?id=gtm-82fl

references

   visible links
   1. https://betterexplained.com/feed/
   2. https://betterexplained.com/comments/feed/
   3. https://betterexplained.com/articles/linear-algebra-guide/feed/
   4. https://betterexplained.com/
   5. https://betterexplained.com/
   6. https://betterexplained.com/archives/
   7. https://betterexplained.com/cheatsheet/
   8. https://betterexplained.com/guides/calculus/
   9. https://betterexplained.com/contact/
  10. https://betterexplained.com/newsletter/
  11. https://betterexplained.com/about/
  12. https://betterexplained.com/feedback/
  13. https://betterexplained.com/
  14. https://betterexplained.com/articles/category/math/
  15. https://betterexplained.com/articles/category/popular/
  16. http://blog.stata.com/2011/03/03/understanding-matrices-intuitively-part-1/
  17. https://www.wolframalpha.com/input/?i=++++{{1.2,0,0},{0,0.95,0},{0,0,1},{.2,+-.05,+0}}+.+transpose([{1000,+1000,+1000},{500,2000,500}])
  18. https://en.wikipedia.org/wiki/file:eigenvectors.gif
  19. https://www.youtube.com/watch?v=wxcrcnbcsja
  20. https://betterexplained.com/articles/a-visual-intuitive-guide-to-imaginary-numbers/
  21. https://betterexplained.com/articles/intuitive-arithmetic-with-complex-numbers/
  22. https://betterexplained.com/articles/understanding-why-complex-multiplication-works/
  23. https://betterexplained.com/articles/intuitive-guide-to-angles-degrees-and-radians/
  24. https://betterexplained.com/articles/intuitive-understanding-of-eulers-formula/
  25. https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/
  26. https://betterexplained.com/articles/intuitive-understanding-of-sine-waves/
  27. https://betterexplained.com/articles/linear-algebra-guide/
  28. https://betterexplained.com/articles/matrix-multiplication/
  29. https://betterexplained.com/articles/imaginary-multiplication-exponents/
  30. https://betterexplained.com/articles/linear-algebra-guide/#comments
  31. https://betterexplained.com/articles/a-visual-intuitive-guide-to-imaginary-numbers/
  32. https://betterexplained.com/articles/intuitive-arithmetic-with-complex-numbers/
  33. https://betterexplained.com/articles/understanding-why-complex-multiplication-works/
  34. https://betterexplained.com/articles/intuitive-guide-to-angles-degrees-and-radians/
  35. https://betterexplained.com/articles/intuitive-understanding-of-eulers-formula/
  36. https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/
  37. https://betterexplained.com/articles/intuitive-understanding-of-sine-waves/
  38. https://betterexplained.com/articles/linear-algebra-guide/
  39. https://betterexplained.com/articles/matrix-multiplication/
  40. https://betterexplained.com/articles/imaginary-multiplication-exponents/
  41. https://betterexplained.com/about/
  42. https://betterexplained.com/philosophy
  43. https://betterexplained.com/privacy
  44. https://betterexplained.com/about
  45. https://twitter.com/betterexplained
  46. https://www.youtube.com/user/betterexplained
  47. https://reddit.com/r/betterexplained
  48. https://betterexplained.com/feed/
  49. https://www.googletagmanager.com/ns.html?id=gtm-82fl

   hidden links:
  51. https://betterexplained.com/articles/linear-algebra-guide/
