# -*- coding: utf-8 -*-
"""
translation with a sequence to sequence network and attention
*************************************************************
**author**: `sean robertson <https://github.com/spro/practical-pytorch>`_

in this project we will be teaching a neural network to translate from
french to english.

::

    [key: > input, = target, < output]

    > il est en train de peindre un tableau .
    = he is painting a picture .
    < he is painting a picture .

    > pourquoi ne pas essayer ce vin delicieux ?
    = why not try that delicious wine ?
    < why not try that delicious wine ?

    > elle n est pas poete mais romanciere .
    = she is not a poet but a novelist .
    < she not not a poet but a novelist .

    > vous etes trop maigre .
    = you re too skinny .
    < you re all alone .

... to varying degrees of success.

this is made possible by the simple but powerful idea of the `sequence
to sequence network <http://arxiv.org/abs/1409.3215>`__, in which two
recurrent neural networks work together to transform one sequence to
another. an encoder network condenses an input sequence into a vector,
and a decoder network unfolds that vector into a new sequence.

.. figure:: /_static/img/seq-seq-images/id195.png
   :alt:

to improve upon this model we'll use an `attention
mechanism <https://arxiv.org/abs/1409.0473>`__, which lets the decoder
learn to focus over a specific range of the input sequence.

**recommended reading:**

i assume you have at least installed pytorch, know python, and
understand tensors:

-  http://pytorch.org/ for installation instructions
-  :doc:`/beginner/deep_learning_60min_blitz` to get started with pytorch in general
-  :doc:`/beginner/pytorch_with_examples` for a wide and deep overview
-  :doc:`/beginner/former_torchies_tutorial` if you are former lua torch user


it would also be useful to know about sequence to sequence networks and
how they work:

-  `learning phrase representations using id56 encoder-decoder for
   id151 <http://arxiv.org/abs/1406.1078>`__
-  `sequence to sequence learning with neural
   networks <http://arxiv.org/abs/1409.3215>`__
-  `id4 by jointly learning to align and
   translate <https://arxiv.org/abs/1409.0473>`__
-  `a neural conversational model <http://arxiv.org/abs/1506.05869>`__

you will also find the previous tutorials on
:doc:`/intermediate/char_id56_classification_tutorial`
and :doc:`/intermediate/char_id56_generation_tutorial`
helpful as those concepts are very similar to the encoder and decoder
models, respectively.

and for more, read the papers that introduced these topics:

-  `learning phrase representations using id56 encoder-decoder for
   id151 <http://arxiv.org/abs/1406.1078>`__
-  `sequence to sequence learning with neural
   networks <http://arxiv.org/abs/1409.3215>`__
-  `id4 by jointly learning to align and
   translate <https://arxiv.org/abs/1409.0473>`__
-  `a neural conversational model <http://arxiv.org/abs/1506.05869>`__


**requirements**
"""
from __future__ import unicode_literals, print_function, division
from io import open
import unicodedata
import string
import re
import random

import torch
import torch.nn as nn
from torch import optim
import torch.nn.functional as f

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

######################################################################
# loading data files
# ==================
#
# the data for this project is a set of many thousands of english to
# french translation pairs.
#
# `this question on open data stack
# exchange <http://opendata.stackexchange.com/questions/3888/dataset-of-sentences-translated-into-many-languages>`__
# pointed me to the open translation site http://tatoeba.org/ which has
# downloads available at http://tatoeba.org/eng/downloads - and better
# yet, someone did the extra work of splitting language pairs into
# individual text files here: http://www.manythings.org/anki/
#
# the english to french pairs are too big to include in the repo, so
# download to ``data/eng-fra.txt`` before continuing. the file is a tab
# separated list of translation pairs:
#
# ::
#
#     i am cold.    j'ai froid.
#
# .. note::
#    download the data from
#    `here <https://download.pytorch.org/tutorial/data.zip>`_
#    and extract it to the current directory.

######################################################################
# similar to the character encoding used in the character-level id56
# tutorials, we will be representing each word in a language as a one-hot
# vector, or giant vector of zeros except for a single one (at the index
# of the word). compared to the dozens of characters that might exist in a
# language, there are many many more words, so the encoding vector is much
# larger. we will however cheat a bit and trim the data to only use a few
# thousand words per language.
#
# .. figure:: /_static/img/seq-seq-images/word-encoding.png
#    :alt:
#
#


######################################################################
# we'll need a unique index per word to use as the inputs and targets of
# the networks later. to keep track of all this we will use a helper class
# called ``lang`` which has word     index (``word2index``) and index     word
# (``index2word``) dictionaries, as well as a count of each word
# ``word2count`` to use to later replace rare words.
#

sos_token = 0
eos_token = 1


class lang:
    def __init__(self, name):
        self.name = name
        self.word2index = {}
        self.word2count = {}
        self.index2word = {0: "sos", 1: "eos"}
        self.n_words = 2  # count sos and eos

    def addsentence(self, sentence):
        for word in sentence.split(' '):
            self.addword(word)

    def addword(self, word):
        if word not in self.word2index:
            self.word2index[word] = self.n_words
            self.word2count[word] = 1
            self.index2word[self.n_words] = word
            self.n_words += 1
        else:
            self.word2count[word] += 1


######################################################################
# the files are all in unicode, to simplify we will turn unicode
# characters to ascii, make everything lowercase, and trim most
# punctuation.
#

# turn a unicode string to plain ascii, thanks to
# http://stackoverflow.com/a/518232/2809427
def unicodetoascii(s):
    return ''.join(
        c for c in unicodedata.normalize('nfd', s)
        if unicodedata.category(c) != 'mn'
    )

# lowercase, trim, and remove non-letter characters


def normalizestring(s):
    s = unicodetoascii(s.lower().strip())
    s = re.sub(r"([.!?])", r" \1", s)
    s = re.sub(r"[^a-za-z.!?]+", r" ", s)
    return s


######################################################################
# to read the data file we will split the file into lines, and then split
# lines into pairs. the files are all english     other language, so if we
# want to translate from other language     english i added the ``reverse``
# flag to reverse the pairs.
#

def readlangs(lang1, lang2, reverse=false):
    print("reading lines...")

    # read the file and split into lines
    lines = open('data/%s-%s.txt' % (lang1, lang2), encoding='utf-8').\
        read().strip().split('\n')

    # split every line into pairs and normalize
    pairs = [[normalizestring(s) for s in l.split('\t')] for l in lines]

    # reverse pairs, make lang instances
    if reverse:
        pairs = [list(reversed(p)) for p in pairs]
        input_lang = lang(lang2)
        output_lang = lang(lang1)
    else:
        input_lang = lang(lang1)
        output_lang = lang(lang2)

    return input_lang, output_lang, pairs


######################################################################
# since there are a *lot* of example sentences and we want to train
# something quickly, we'll trim the data set to only relatively short and
# simple sentences. here the maximum length is 10 words (that includes
# ending punctuation) and we're filtering to sentences that translate to
# the form "i am" or "he is" etc. (accounting for apostrophes replaced
# earlier).
#

max_length = 10

eng_prefixes = (
    "i am ", "i m ",
    "he is", "he s ",
    "she is", "she s",
    "you are", "you re ",
    "we are", "we re ",
    "they are", "they re "
)


def filterpair(p):
    return len(p[0].split(' ')) < max_length and \
        len(p[1].split(' ')) < max_length and \
        p[1].startswith(eng_prefixes)


def filterpairs(pairs):
    return [pair for pair in pairs if filterpair(pair)]


######################################################################
# the full process for preparing the data is:
#
# -  read text file and split into lines, split lines into pairs
# -  normalize text, filter by length and content
# -  make word lists from sentences in pairs
#

def preparedata(lang1, lang2, reverse=false):
    input_lang, output_lang, pairs = readlangs(lang1, lang2, reverse)
    print("read %s sentence pairs" % len(pairs))
    pairs = filterpairs(pairs)
    print("trimmed to %s sentence pairs" % len(pairs))
    print("counting words...")
    for pair in pairs:
        input_lang.addsentence(pair[0])
        output_lang.addsentence(pair[1])
    print("counted words:")
    print(input_lang.name, input_lang.n_words)
    print(output_lang.name, output_lang.n_words)
    return input_lang, output_lang, pairs


input_lang, output_lang, pairs = preparedata('eng', 'fra', true)
print(random.choice(pairs))


######################################################################
# the id195 model
# =================
#
# a recurrent neural network, or id56, is a network that operates on a
# sequence and uses its own output as input for subsequent steps.
#
# a `sequence to sequence network <http://arxiv.org/abs/1409.3215>`__, or
# id195 network, or `encoder decoder
# network <https://arxiv.org/pdf/1406.1078v3.pdf>`__, is a model
# consisting of two id56s called the encoder and decoder. the encoder reads
# an input sequence and outputs a single vector, and the decoder reads
# that vector to produce an output sequence.
#
# .. figure:: /_static/img/seq-seq-images/id195.png
#    :alt:
#
# unlike sequence prediction with a single id56, where every input
# corresponds to an output, the id195 model frees us from sequence
# length and order, which makes it ideal for translation between two
# languages.
#
# consider the sentence "je ne suis pas le chat noir"     "i am not the
# black cat". most of the words in the input sentence have a direct
# translation in the output sentence, but are in slightly different
# orders, e.g. "chat noir" and "black cat". because of the "ne/pas"
# construction there is also one more word in the input sentence. it would
# be difficult to produce a correct translation directly from the sequence
# of input words.
#
# with a id195 model the encoder creates a single vector which, in the
# ideal case, encodes the "meaning" of the input sequence into a single
# vector     a single point in some n dimensional space of sentences.
#


######################################################################
# the encoder
# -----------
#
# the encoder of a id195 network is a id56 that outputs some value for
# every word from the input sentence. for every input word the encoder
# outputs a vector and a hidden state, and uses the hidden state for the
# next input word.
#
# .. figure:: /_static/img/seq-seq-images/encoder-network.png
#    :alt:
#
#

class encoderid56(nn.module):
    def __init__(self, input_size, hidden_size):
        super(encoderid56, self).__init__()
        self.hidden_size = hidden_size

        self.embedding = nn.embedding(input_size, hidden_size)
        self.gru = nn.gru(hidden_size, hidden_size)

    def forward(self, input, hidden):
        embedded = self.embedding(input).view(1, 1, -1)
        output = embedded
        output, hidden = self.gru(output, hidden)
        return output, hidden

    def inithidden(self):
        return torch.zeros(1, 1, self.hidden_size, device=device)

######################################################################
# the decoder
# -----------
#
# the decoder is another id56 that takes the encoder output vector(s) and
# outputs a sequence of words to create the translation.
#


######################################################################
# simple decoder
# ^^^^^^^^^^^^^^
#
# in the simplest id195 decoder we use only last output of the encoder.
# this last output is sometimes called the *context vector* as it encodes
# context from the entire sequence. this context vector is used as the
# initial hidden state of the decoder.
#
# at every step of decoding, the decoder is given an input token and
# hidden state. the initial input token is the start-of-string ``<sos>``
# token, and the first hidden state is the context vector (the encoder's
# last hidden state).
#
# .. figure:: /_static/img/seq-seq-images/decoder-network.png
#    :alt:
#
#

class decoderid56(nn.module):
    def __init__(self, hidden_size, output_size):
        super(decoderid56, self).__init__()
        self.hidden_size = hidden_size

        self.embedding = nn.embedding(output_size, hidden_size)
        self.gru = nn.gru(hidden_size, hidden_size)
        self.out = nn.linear(hidden_size, output_size)
        self.softmax = nn.logsoftmax(dim=1)

    def forward(self, input, hidden):
        output = self.embedding(input).view(1, 1, -1)
        output = f.relu(output)
        output, hidden = self.gru(output, hidden)
        output = self.softmax(self.out(output[0]))
        return output, hidden

    def inithidden(self):
        return torch.zeros(1, 1, self.hidden_size, device=device)

######################################################################
# i encourage you to train and observe the results of this model, but to
# save space we'll be going straight for the gold and introducing the
# attention mechanism.
#


######################################################################
# attention decoder
# ^^^^^^^^^^^^^^^^^
#
# if only the context vector is passed betweeen the encoder and decoder,
# that single vector carries the burden of encoding the entire sentence.
#
# attention allows the decoder network to "focus" on a different part of
# the encoder's outputs for every step of the decoder's own outputs. first
# we calculate a set of *attention weights*. these will be multiplied by
# the encoder output vectors to create a weighted combination. the result
# (called ``attn_applied`` in the code) should contain information about
# that specific part of the input sequence, and thus help the decoder
# choose the right output words.
#
# .. figure:: https://i.imgur.com/1152pyf.png
#    :alt:
#
# calculating the attention weights is done with another feed-forward
# layer ``attn``, using the decoder's input and hidden state as inputs.
# because there are sentences of all sizes in the training data, to
# actually create and train this layer we have to choose a maximum
# sentence length (input length, for encoder outputs) that it can apply
# to. sentences of the maximum length will use all the attention weights,
# while shorter sentences will only use the first few.
#
# .. figure:: /_static/img/seq-seq-images/attention-decoder-network.png
#    :alt:
#
#

class attndecoderid56(nn.module):
    def __init__(self, hidden_size, output_size, dropout_p=0.1, max_length=max_length):
        super(attndecoderid56, self).__init__()
        self.hidden_size = hidden_size
        self.output_size = output_size
        self.dropout_p = dropout_p
        self.max_length = max_length

        self.embedding = nn.embedding(self.output_size, self.hidden_size)
        self.attn = nn.linear(self.hidden_size * 2, self.max_length)
        self.attn_combine = nn.linear(self.hidden_size * 2, self.hidden_size)
        self.dropout = nn.dropout(self.dropout_p)
        self.gru = nn.gru(self.hidden_size, self.hidden_size)
        self.out = nn.linear(self.hidden_size, self.output_size)

    def forward(self, input, hidden, encoder_outputs):
        embedded = self.embedding(input).view(1, 1, -1)
        embedded = self.dropout(embedded)

        attn_weights = f.softmax(
            self.attn(torch.cat((embedded[0], hidden[0]), 1)), dim=1)
        attn_applied = torch.bmm(attn_weights.unsqueeze(0),
                                 encoder_outputs.unsqueeze(0))

        output = torch.cat((embedded[0], attn_applied[0]), 1)
        output = self.attn_combine(output).unsqueeze(0)

        output = f.relu(output)
        output, hidden = self.gru(output, hidden)

        output = f.log_softmax(self.out(output[0]), dim=1)
        return output, hidden, attn_weights

    def inithidden(self):
        return torch.zeros(1, 1, self.hidden_size, device=device)


######################################################################
# .. note:: there are other forms of attention that work around the length
#   limitation by using a relative position approach. read about "local
#   attention" in `effective approaches to attention-based neural machine
#   translation <https://arxiv.org/abs/1508.04025>`__.
#
# training
# ========
#
# preparing training data
# -----------------------
#
# to train, for each pair we will need an input tensor (indexes of the
# words in the input sentence) and target tensor (indexes of the words in
# the target sentence). while creating these vectors we will append the
# eos token to both sequences.
#

def indexesfromsentence(lang, sentence):
    return [lang.word2index[word] for word in sentence.split(' ')]


def tensorfromsentence(lang, sentence):
    indexes = indexesfromsentence(lang, sentence)
    indexes.append(eos_token)
    return torch.tensor(indexes, dtype=torch.long, device=device).view(-1, 1)


def tensorsfrompair(pair):
    input_tensor = tensorfromsentence(input_lang, pair[0])
    target_tensor = tensorfromsentence(output_lang, pair[1])
    return (input_tensor, target_tensor)


######################################################################
# training the model
# ------------------
#
# to train we run the input sentence through the encoder, and keep track
# of every output and the latest hidden state. then the decoder is given
# the ``<sos>`` token as its first input, and the last hidden state of the
# encoder as its first hidden state.
#
# "teacher forcing" is the concept of using the real target outputs as
# each next input, instead of using the decoder's guess as the next input.
# using teacher forcing causes it to converge faster but `when the trained
# network is exploited, it may exhibit
# instability <http://minds.jacobs-university.de/sites/default/files/uploads/papers/esntutorialrev.pdf>`__.
#
# you can observe outputs of teacher-forced networks that read with
# coherent grammar but wander far from the correct translation -
# intuitively it has learned to represent the output grammar and can "pick
# up" the meaning once the teacher tells it the first few words, but it
# has not properly learned how to create the sentence from the translation
# in the first place.
#
# because of the freedom pytorch's autograd gives us, we can randomly
# choose to use teacher forcing or not with a simple if statement. turn
# ``teacher_forcing_ratio`` up to use more of it.
#

teacher_forcing_ratio = 0.5


def train(input_tensor, target_tensor, encoder, decoder, encoder_optimizer, decoder_optimizer, criterion, max_length=max_length):
    encoder_hidden = encoder.inithidden()

    encoder_optimizer.zero_grad()
    decoder_optimizer.zero_grad()

    input_length = input_tensor.size(0)
    target_length = target_tensor.size(0)

    encoder_outputs = torch.zeros(max_length, encoder.hidden_size, device=device)

    loss = 0

    for ei in range(input_length):
        encoder_output, encoder_hidden = encoder(
            input_tensor[ei], encoder_hidden)
        encoder_outputs[ei] = encoder_output[0, 0]

    decoder_input = torch.tensor([[sos_token]], device=device)

    decoder_hidden = encoder_hidden

    use_teacher_forcing = true if random.random() < teacher_forcing_ratio else false

    if use_teacher_forcing:
        # teacher forcing: feed the target as the next input
        for di in range(target_length):
            decoder_output, decoder_hidden, decoder_attention = decoder(
                decoder_input, decoder_hidden, encoder_outputs)
            loss += criterion(decoder_output, target_tensor[di])
            decoder_input = target_tensor[di]  # teacher forcing

    else:
        # without teacher forcing: use its own predictions as the next input
        for di in range(target_length):
            decoder_output, decoder_hidden, decoder_attention = decoder(
                decoder_input, decoder_hidden, encoder_outputs)
            topv, topi = decoder_output.topk(1)
            decoder_input = topi.squeeze().detach()  # detach from history as input

            loss += criterion(decoder_output, target_tensor[di])
            if decoder_input.item() == eos_token:
                break

    loss.backward()

    encoder_optimizer.step()
    decoder_optimizer.step()

    return loss.item() / target_length


######################################################################
# this is a helper function to print time elapsed and estimated time
# remaining given the current time and progress %.
#

import time
import math


def asminutes(s):
    m = math.floor(s / 60)
    s -= m * 60
    return '%dm %ds' % (m, s)


def timesince(since, percent):
    now = time.time()
    s = now - since
    es = s / (percent)
    rs = es - s
    return '%s (- %s)' % (asminutes(s), asminutes(rs))


######################################################################
# the whole training process looks like this:
#
# -  start a timer
# -  initialize optimizers and criterion
# -  create set of training pairs
# -  start empty losses array for plotting
#
# then we call ``train`` many times and occasionally print the progress (%
# of examples, time so far, estimated time) and average loss.
#

def trainiters(encoder, decoder, n_iters, print_every=1000, plot_every=100, learning_rate=0.01):
    start = time.time()
    plot_losses = []
    print_loss_total = 0  # reset every print_every
    plot_loss_total = 0  # reset every plot_every

    encoder_optimizer = optim.sgd(encoder.parameters(), lr=learning_rate)
    decoder_optimizer = optim.sgd(decoder.parameters(), lr=learning_rate)
    training_pairs = [tensorsfrompair(random.choice(pairs))
                      for i in range(n_iters)]
    criterion = nn.nllloss()

    for iter in range(1, n_iters + 1):
        training_pair = training_pairs[iter - 1]
        input_tensor = training_pair[0]
        target_tensor = training_pair[1]

        loss = train(input_tensor, target_tensor, encoder,
                     decoder, encoder_optimizer, decoder_optimizer, criterion)
        print_loss_total += loss
        plot_loss_total += loss

        if iter % print_every == 0:
            print_loss_avg = print_loss_total / print_every
            print_loss_total = 0
            print('%s (%d %d%%) %.4f' % (timesince(start, iter / n_iters),
                                         iter, iter / n_iters * 100, print_loss_avg))

        if iter % plot_every == 0:
            plot_loss_avg = plot_loss_total / plot_every
            plot_losses.append(plot_loss_avg)
            plot_loss_total = 0

    showplot(plot_losses)


######################################################################
# plotting results
# ----------------
#
# plotting is done with matplotlib, using the array of loss values
# ``plot_losses`` saved while training.
#

import matplotlib.pyplot as plt
plt.switch_backend('agg')
import matplotlib.ticker as ticker
import numpy as np


def showplot(points):
    plt.figure()
    fig, ax = plt.subplots()
    # this locator puts ticks at regular intervals
    loc = ticker.multiplelocator(base=0.2)
    ax.yaxis.set_major_locator(loc)
    plt.plot(points)


######################################################################
# evaluation
# ==========
#
# evaluation is mostly the same as training, but there are no targets so
# we simply feed the decoder's predictions back to itself for each step.
# every time it predicts a word we add it to the output string, and if it
# predicts the eos token we stop there. we also store the decoder's
# attention outputs for display later.
#

def evaluate(encoder, decoder, sentence, max_length=max_length):
    with torch.no_grad():
        input_tensor = tensorfromsentence(input_lang, sentence)
        input_length = input_tensor.size()[0]
        encoder_hidden = encoder.inithidden()

        encoder_outputs = torch.zeros(max_length, encoder.hidden_size, device=device)

        for ei in range(input_length):
            encoder_output, encoder_hidden = encoder(input_tensor[ei],
                                                     encoder_hidden)
            encoder_outputs[ei] += encoder_output[0, 0]

        decoder_input = torch.tensor([[sos_token]], device=device)  # sos

        decoder_hidden = encoder_hidden

        decoded_words = []
        decoder_attentions = torch.zeros(max_length, max_length)

        for di in range(max_length):
            decoder_output, decoder_hidden, decoder_attention = decoder(
                decoder_input, decoder_hidden, encoder_outputs)
            decoder_attentions[di] = decoder_attention.data
            topv, topi = decoder_output.data.topk(1)
            if topi.item() == eos_token:
                decoded_words.append('<eos>')
                break
            else:
                decoded_words.append(output_lang.index2word[topi.item()])

            decoder_input = topi.squeeze().detach()

        return decoded_words, decoder_attentions[:di + 1]


######################################################################
# we can evaluate random sentences from the training set and print out the
# input, target, and output to make some subjective quality judgements:
#

def evaluaterandomly(encoder, decoder, n=10):
    for i in range(n):
        pair = random.choice(pairs)
        print('>', pair[0])
        print('=', pair[1])
        output_words, attentions = evaluate(encoder, decoder, pair[0])
        output_sentence = ' '.join(output_words)
        print('<', output_sentence)
        print('')


######################################################################
# training and evaluating
# =======================
#
# with all these helper functions in place (it looks like extra work, but
# it makes it easier to run multiple experiments) we can actually
# initialize a network and start training.
#
# remember that the input sentences were heavily filtered. for this small
# dataset we can use relatively small networks of 256 hidden nodes and a
# single gru layer. after about 40 minutes on a macbook cpu we'll get some
# reasonable results.
#
# .. note::
#    if you run this notebook you can train, interrupt the kernel,
#    evaluate, and continue training later. comment out the lines where the
#    encoder and decoder are initialized and run ``trainiters`` again.
#

hidden_size = 256
encoder1 = encoderid56(input_lang.n_words, hidden_size).to(device)
attn_decoder1 = attndecoderid56(hidden_size, output_lang.n_words, dropout_p=0.1).to(device)

trainiters(encoder1, attn_decoder1, 75000, print_every=5000)

######################################################################
#

evaluaterandomly(encoder1, attn_decoder1)


######################################################################
# visualizing attention
# ---------------------
#
# a useful property of the attention mechanism is its highly interpretable
# outputs. because it is used to weight specific encoder outputs of the
# input sequence, we can imagine looking where the network is focused most
# at each time step.
#
# you could simply run ``plt.matshow(attentions)`` to see attention output
# displayed as a matrix, with the columns being input steps and rows being
# output steps:
#

output_words, attentions = evaluate(
    encoder1, attn_decoder1, "je suis trop froid .")
plt.matshow(attentions.numpy())


######################################################################
# for a better viewing experience we will do the extra work of adding axes
# and labels:
#

def showattention(input_sentence, output_words, attentions):
    # set up figure with colorbar
    fig = plt.figure()
    ax = fig.add_subplot(111)
    cax = ax.matshow(attentions.numpy(), cmap='bone')
    fig.colorbar(cax)

    # set up axes
    ax.set_xticklabels([''] + input_sentence.split(' ') +
                       ['<eos>'], rotation=90)
    ax.set_yticklabels([''] + output_words)

    # show label at every tick
    ax.xaxis.set_major_locator(ticker.multiplelocator(1))
    ax.yaxis.set_major_locator(ticker.multiplelocator(1))

    plt.show()


def evaluateandshowattention(input_sentence):
    output_words, attentions = evaluate(
        encoder1, attn_decoder1, input_sentence)
    print('input =', input_sentence)
    print('output =', ' '.join(output_words))
    showattention(input_sentence, output_words, attentions)


evaluateandshowattention("elle a cinq ans de moins que moi .")

evaluateandshowattention("elle est trop petit .")

evaluateandshowattention("je ne crains pas de mourir .")

evaluateandshowattention("c est un jeune directeur plein de talent .")


######################################################################
# exercises
# =========
#
# -  try with a different dataset
#
#    -  another language pair
#    -  human     machine (e.g. iot commands)
#    -  chat     response
#    -  question     answer
#
# -  replace the embeddings with pre-trained id27s such as id97 or
#    glove
# -  try with more layers, more hidden units, and more sentences. compare
#    the training time and results.
# -  if you use a translation file where pairs have two of the same phrase
#    (``i am test \t i am test``), you can use this as an autoencoder. try
#    this:
#
#    -  train as an autoencoder
#    -  save only the encoder network
#    -  train a new decoder for translation from there
#
