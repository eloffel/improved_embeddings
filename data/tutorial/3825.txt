{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\ntranslation with a sequence to sequence network and attention\n*************************************************************\n**author**: `sean robertson <https://github.com/spro/practical-pytorch>`_\n\nin this project we will be teaching a neural network to translate from\nfrench to english.\n\n::\n\n    [key: > input, = target, < output]\n\n    > il est en train de peindre un tableau .\n    = he is painting a picture .\n    < he is painting a picture .\n\n    > pourquoi ne pas essayer ce vin delicieux ?\n    = why not try that delicious wine ?\n    < why not try that delicious wine ?\n\n    > elle n est pas poete mais romanciere .\n    = she is not a poet but a novelist .\n    < she not not a poet but a novelist .\n\n    > vous etes trop maigre .\n    = you re too skinny .\n    < you re all alone .\n\n... to varying degrees of success.\n\nthis is made possible by the simple but powerful idea of the `sequence\nto sequence network <http://arxiv.org/abs/1409.3215>`__, in which two\nrecurrent neural networks work together to transform one sequence to\nanother. an encoder network condenses an input sequence into a vector,\nand a decoder network unfolds that vector into a new sequence.\n\n.. figure:: /_static/img/seq-seq-images/id195.png\n   :alt:\n\nto improve upon this model we'll use an `attention\nmechanism <https://arxiv.org/abs/1409.0473>`__, which lets the decoder\nlearn to focus over a specific range of the input sequence.\n\n**recommended reading:**\n\ni assume you have at least installed pytorch, know python, and\nunderstand tensors:\n\n-  http://pytorch.org/ for installation instructions\n-  :doc:`/beginner/deep_learning_60min_blitz` to get started with pytorch in general\n-  :doc:`/beginner/pytorch_with_examples` for a wide and deep overview\n-  :doc:`/beginner/former_torchies_tutorial` if you are former lua torch user\n\n\nit would also be useful to know about sequence to sequence networks and\nhow they work:\n\n-  `learning phrase representations using id56 encoder-decoder for\n   id151 <http://arxiv.org/abs/1406.1078>`__\n-  `sequence to sequence learning with neural\n   networks <http://arxiv.org/abs/1409.3215>`__\n-  `id4 by jointly learning to align and\n   translate <https://arxiv.org/abs/1409.0473>`__\n-  `a neural conversational model <http://arxiv.org/abs/1506.05869>`__\n\nyou will also find the previous tutorials on\n:doc:`/intermediate/char_id56_classification_tutorial`\nand :doc:`/intermediate/char_id56_generation_tutorial`\nhelpful as those concepts are very similar to the encoder and decoder\nmodels, respectively.\n\nand for more, read the papers that introduced these topics:\n\n-  `learning phrase representations using id56 encoder-decoder for\n   id151 <http://arxiv.org/abs/1406.1078>`__\n-  `sequence to sequence learning with neural\n   networks <http://arxiv.org/abs/1409.3215>`__\n-  `id4 by jointly learning to align and\n   translate <https://arxiv.org/abs/1409.0473>`__\n-  `a neural conversational model <http://arxiv.org/abs/1506.05869>`__\n\n\n**requirements**\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "from __future__ import unicode_literals, print_function, division\nfrom io import open\nimport unicodedata\nimport string\nimport re\nimport random\n\nimport torch\nimport torch.nn as nn\nfrom torch import optim\nimport torch.nn.functional as f\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "loading data files\n==================\n\nthe data for this project is a set of many thousands of english to\nfrench translation pairs.\n\n`this question on open data stack\nexchange <http://opendata.stackexchange.com/questions/3888/dataset-of-sentences-translated-into-many-languages>`__\npointed me to the open translation site http://tatoeba.org/ which has\ndownloads available at http://tatoeba.org/eng/downloads - and better\nyet, someone did the extra work of splitting language pairs into\nindividual text files here: http://www.manythings.org/anki/\n\nthe english to french pairs are too big to include in the repo, so\ndownload to ``data/eng-fra.txt`` before continuing. the file is a tab\nseparated list of translation pairs:\n\n::\n\n    i am cold.    j'ai froid.\n\n.. note::\n   download the data from\n   `here <https://download.pytorch.org/tutorial/data.zip>`_\n   and extract it to the current directory.\n\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "similar to the character encoding used in the character-level id56\ntutorials, we will be representing each word in a language as a one-hot\nvector, or giant vector of zeros except for a single one (at the index\nof the word). compared to the dozens of characters that might exist in a\nlanguage, there are many many more words, so the encoding vector is much\nlarger. we will however cheat a bit and trim the data to only use a few\nthousand words per language.\n\n.. figure:: /_static/img/seq-seq-images/word-encoding.png\n   :alt:\n\n\n\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "we'll need a unique index per word to use as the inputs and targets of\nthe networks later. to keep track of all this we will use a helper class\ncalled ``lang`` which has word \u2192 index (``word2index``) and index \u2192 word\n(``index2word``) dictionaries, as well as a count of each word\n``word2count`` to use to later replace rare words.\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "sos_token = 0\neos_token = 1\n\n\nclass lang:\n    def __init__(self, name):\n        self.name = name\n        self.word2index = {}\n        self.word2count = {}\n        self.index2word = {0: \"sos\", 1: \"eos\"}\n        self.n_words = 2  # count sos and eos\n\n    def addsentence(self, sentence):\n        for word in sentence.split(' '):\n            self.addword(word)\n\n    def addword(self, word):\n        if word not in self.word2index:\n            self.word2index[word] = self.n_words\n            self.word2count[word] = 1\n            self.index2word[self.n_words] = word\n            self.n_words += 1\n        else:\n            self.word2count[word] += 1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "the files are all in unicode, to simplify we will turn unicode\ncharacters to ascii, make everything lowercase, and trim most\npunctuation.\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "# turn a unicode string to plain ascii, thanks to\n# http://stackoverflow.com/a/518232/2809427\ndef unicodetoascii(s):\n    return ''.join(\n        c for c in unicodedata.normalize('nfd', s)\n        if unicodedata.category(c) != 'mn'\n    )\n\n# lowercase, trim, and remove non-letter characters\n\n\ndef normalizestring(s):\n    s = unicodetoascii(s.lower().strip())\n    s = re.sub(r\"([.!?])\", r\" \\1\", s)\n    s = re.sub(r\"[^a-za-z.!?]+\", r\" \", s)\n    return s"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "to read the data file we will split the file into lines, and then split\nlines into pairs. the files are all english \u2192 other language, so if we\nwant to translate from other language \u2192 english i added the ``reverse``\nflag to reverse the pairs.\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "def readlangs(lang1, lang2, reverse=false):\n    print(\"reading lines...\")\n\n    # read the file and split into lines\n    lines = open('data/%s-%s.txt' % (lang1, lang2), encoding='utf-8').\\\n        read().strip().split('\\n')\n\n    # split every line into pairs and normalize\n    pairs = [[normalizestring(s) for s in l.split('\\t')] for l in lines]\n\n    # reverse pairs, make lang instances\n    if reverse:\n        pairs = [list(reversed(p)) for p in pairs]\n        input_lang = lang(lang2)\n        output_lang = lang(lang1)\n    else:\n        input_lang = lang(lang1)\n        output_lang = lang(lang2)\n\n    return input_lang, output_lang, pairs"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "since there are a *lot* of example sentences and we want to train\nsomething quickly, we'll trim the data set to only relatively short and\nsimple sentences. here the maximum length is 10 words (that includes\nending punctuation) and we're filtering to sentences that translate to\nthe form \"i am\" or \"he is\" etc. (accounting for apostrophes replaced\nearlier).\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "max_length = 10\n\neng_prefixes = (\n    \"i am \", \"i m \",\n    \"he is\", \"he s \",\n    \"she is\", \"she s\",\n    \"you are\", \"you re \",\n    \"we are\", \"we re \",\n    \"they are\", \"they re \"\n)\n\n\ndef filterpair(p):\n    return len(p[0].split(' ')) < max_length and \\\n        len(p[1].split(' ')) < max_length and \\\n        p[1].startswith(eng_prefixes)\n\n\ndef filterpairs(pairs):\n    return [pair for pair in pairs if filterpair(pair)]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "the full process for preparing the data is:\n\n-  read text file and split into lines, split lines into pairs\n-  normalize text, filter by length and content\n-  make word lists from sentences in pairs\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "def preparedata(lang1, lang2, reverse=false):\n    input_lang, output_lang, pairs = readlangs(lang1, lang2, reverse)\n    print(\"read %s sentence pairs\" % len(pairs))\n    pairs = filterpairs(pairs)\n    print(\"trimmed to %s sentence pairs\" % len(pairs))\n    print(\"counting words...\")\n    for pair in pairs:\n        input_lang.addsentence(pair[0])\n        output_lang.addsentence(pair[1])\n    print(\"counted words:\")\n    print(input_lang.name, input_lang.n_words)\n    print(output_lang.name, output_lang.n_words)\n    return input_lang, output_lang, pairs\n\n\ninput_lang, output_lang, pairs = preparedata('eng', 'fra', true)\nprint(random.choice(pairs))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "the id195 model\n=================\n\na recurrent neural network, or id56, is a network that operates on a\nsequence and uses its own output as input for subsequent steps.\n\na `sequence to sequence network <http://arxiv.org/abs/1409.3215>`__, or\nid195 network, or `encoder decoder\nnetwork <https://arxiv.org/pdf/1406.1078v3.pdf>`__, is a model\nconsisting of two id56s called the encoder and decoder. the encoder reads\nan input sequence and outputs a single vector, and the decoder reads\nthat vector to produce an output sequence.\n\n.. figure:: /_static/img/seq-seq-images/id195.png\n   :alt:\n\nunlike sequence prediction with a single id56, where every input\ncorresponds to an output, the id195 model frees us from sequence\nlength and order, which makes it ideal for translation between two\nlanguages.\n\nconsider the sentence \"je ne suis pas le chat noir\" \u2192 \"i am not the\nblack cat\". most of the words in the input sentence have a direct\ntranslation in the output sentence, but are in slightly different\norders, e.g. \"chat noir\" and \"black cat\". because of the \"ne/pas\"\nconstruction there is also one more word in the input sentence. it would\nbe difficult to produce a correct translation directly from the sequence\nof input words.\n\nwith a id195 model the encoder creates a single vector which, in the\nideal case, encodes the \"meaning\" of the input sequence into a single\nvector \u2014 a single point in some n dimensional space of sentences.\n\n\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "the encoder\n-----------\n\nthe encoder of a id195 network is a id56 that outputs some value for\nevery word from the input sentence. for every input word the encoder\noutputs a vector and a hidden state, and uses the hidden state for the\nnext input word.\n\n.. figure:: /_static/img/seq-seq-images/encoder-network.png\n   :alt:\n\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "class encoderid56(nn.module):\n    def __init__(self, input_size, hidden_size):\n        super(encoderid56, self).__init__()\n        self.hidden_size = hidden_size\n\n        self.embedding = nn.embedding(input_size, hidden_size)\n        self.gru = nn.gru(hidden_size, hidden_size)\n\n    def forward(self, input, hidden):\n        embedded = self.embedding(input).view(1, 1, -1)\n        output = embedded\n        output, hidden = self.gru(output, hidden)\n        return output, hidden\n\n    def inithidden(self):\n        return torch.zeros(1, 1, self.hidden_size, device=device)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "the decoder\n-----------\n\nthe decoder is another id56 that takes the encoder output vector(s) and\noutputs a sequence of words to create the translation.\n\n\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "simple decoder\n^^^^^^^^^^^^^^\n\nin the simplest id195 decoder we use only last output of the encoder.\nthis last output is sometimes called the *context vector* as it encodes\ncontext from the entire sequence. this context vector is used as the\ninitial hidden state of the decoder.\n\nat every step of decoding, the decoder is given an input token and\nhidden state. the initial input token is the start-of-string ``<sos>``\ntoken, and the first hidden state is the context vector (the encoder's\nlast hidden state).\n\n.. figure:: /_static/img/seq-seq-images/decoder-network.png\n   :alt:\n\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "class decoderid56(nn.module):\n    def __init__(self, hidden_size, output_size):\n        super(decoderid56, self).__init__()\n        self.hidden_size = hidden_size\n\n        self.embedding = nn.embedding(output_size, hidden_size)\n        self.gru = nn.gru(hidden_size, hidden_size)\n        self.out = nn.linear(hidden_size, output_size)\n        self.softmax = nn.logsoftmax(dim=1)\n\n    def forward(self, input, hidden):\n        output = self.embedding(input).view(1, 1, -1)\n        output = f.relu(output)\n        output, hidden = self.gru(output, hidden)\n        output = self.softmax(self.out(output[0]))\n        return output, hidden\n\n    def inithidden(self):\n        return torch.zeros(1, 1, self.hidden_size, device=device)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "i encourage you to train and observe the results of this model, but to\nsave space we'll be going straight for the gold and introducing the\nattention mechanism.\n\n\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "attention decoder\n^^^^^^^^^^^^^^^^^\n\nif only the context vector is passed betweeen the encoder and decoder,\nthat single vector carries the burden of encoding the entire sentence.\n\nattention allows the decoder network to \"focus\" on a different part of\nthe encoder's outputs for every step of the decoder's own outputs. first\nwe calculate a set of *attention weights*. these will be multiplied by\nthe encoder output vectors to create a weighted combination. the result\n(called ``attn_applied`` in the code) should contain information about\nthat specific part of the input sequence, and thus help the decoder\nchoose the right output words.\n\n.. figure:: https://i.imgur.com/1152pyf.png\n   :alt:\n\ncalculating the attention weights is done with another feed-forward\nlayer ``attn``, using the decoder's input and hidden state as inputs.\nbecause there are sentences of all sizes in the training data, to\nactually create and train this layer we have to choose a maximum\nsentence length (input length, for encoder outputs) that it can apply\nto. sentences of the maximum length will use all the attention weights,\nwhile shorter sentences will only use the first few.\n\n.. figure:: /_static/img/seq-seq-images/attention-decoder-network.png\n   :alt:\n\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "class attndecoderid56(nn.module):\n    def __init__(self, hidden_size, output_size, dropout_p=0.1, max_length=max_length):\n        super(attndecoderid56, self).__init__()\n        self.hidden_size = hidden_size\n        self.output_size = output_size\n        self.dropout_p = dropout_p\n        self.max_length = max_length\n\n        self.embedding = nn.embedding(self.output_size, self.hidden_size)\n        self.attn = nn.linear(self.hidden_size * 2, self.max_length)\n        self.attn_combine = nn.linear(self.hidden_size * 2, self.hidden_size)\n        self.dropout = nn.dropout(self.dropout_p)\n        self.gru = nn.gru(self.hidden_size, self.hidden_size)\n        self.out = nn.linear(self.hidden_size, self.output_size)\n\n    def forward(self, input, hidden, encoder_outputs):\n        embedded = self.embedding(input).view(1, 1, -1)\n        embedded = self.dropout(embedded)\n\n        attn_weights = f.softmax(\n            self.attn(torch.cat((embedded[0], hidden[0]), 1)), dim=1)\n        attn_applied = torch.bmm(attn_weights.unsqueeze(0),\n                                 encoder_outputs.unsqueeze(0))\n\n        output = torch.cat((embedded[0], attn_applied[0]), 1)\n        output = self.attn_combine(output).unsqueeze(0)\n\n        output = f.relu(output)\n        output, hidden = self.gru(output, hidden)\n\n        output = f.log_softmax(self.out(output[0]), dim=1)\n        return output, hidden, attn_weights\n\n    def inithidden(self):\n        return torch.zeros(1, 1, self.hidden_size, device=device)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"alert alert-info\"><h4>note</h4><p>there are other forms of attention that work around the length\n  limitation by using a relative position approach. read about \"local\n  attention\" in `effective approaches to attention-based neural machine\n  translation <https://arxiv.org/abs/1508.04025>`__.</p></div>\n\ntraining\n========\n\npreparing training data\n-----------------------\n\nto train, for each pair we will need an input tensor (indexes of the\nwords in the input sentence) and target tensor (indexes of the words in\nthe target sentence). while creating these vectors we will append the\neos token to both sequences.\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "def indexesfromsentence(lang, sentence):\n    return [lang.word2index[word] for word in sentence.split(' ')]\n\n\ndef tensorfromsentence(lang, sentence):\n    indexes = indexesfromsentence(lang, sentence)\n    indexes.append(eos_token)\n    return torch.tensor(indexes, dtype=torch.long, device=device).view(-1, 1)\n\n\ndef tensorsfrompair(pair):\n    input_tensor = tensorfromsentence(input_lang, pair[0])\n    target_tensor = tensorfromsentence(output_lang, pair[1])\n    return (input_tensor, target_tensor)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "training the model\n------------------\n\nto train we run the input sentence through the encoder, and keep track\nof every output and the latest hidden state. then the decoder is given\nthe ``<sos>`` token as its first input, and the last hidden state of the\nencoder as its first hidden state.\n\n\"teacher forcing\" is the concept of using the real target outputs as\neach next input, instead of using the decoder's guess as the next input.\nusing teacher forcing causes it to converge faster but `when the trained\nnetwork is exploited, it may exhibit\ninstability <http://minds.jacobs-university.de/sites/default/files/uploads/papers/esntutorialrev.pdf>`__.\n\nyou can observe outputs of teacher-forced networks that read with\ncoherent grammar but wander far from the correct translation -\nintuitively it has learned to represent the output grammar and can \"pick\nup\" the meaning once the teacher tells it the first few words, but it\nhas not properly learned how to create the sentence from the translation\nin the first place.\n\nbecause of the freedom pytorch's autograd gives us, we can randomly\nchoose to use teacher forcing or not with a simple if statement. turn\n``teacher_forcing_ratio`` up to use more of it.\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "teacher_forcing_ratio = 0.5\n\n\ndef train(input_tensor, target_tensor, encoder, decoder, encoder_optimizer, decoder_optimizer, criterion, max_length=max_length):\n    encoder_hidden = encoder.inithidden()\n\n    encoder_optimizer.zero_grad()\n    decoder_optimizer.zero_grad()\n\n    input_length = input_tensor.size(0)\n    target_length = target_tensor.size(0)\n\n    encoder_outputs = torch.zeros(max_length, encoder.hidden_size, device=device)\n\n    loss = 0\n\n    for ei in range(input_length):\n        encoder_output, encoder_hidden = encoder(\n            input_tensor[ei], encoder_hidden)\n        encoder_outputs[ei] = encoder_output[0, 0]\n\n    decoder_input = torch.tensor([[sos_token]], device=device)\n\n    decoder_hidden = encoder_hidden\n\n    use_teacher_forcing = true if random.random() < teacher_forcing_ratio else false\n\n    if use_teacher_forcing:\n        # teacher forcing: feed the target as the next input\n        for di in range(target_length):\n            decoder_output, decoder_hidden, decoder_attention = decoder(\n                decoder_input, decoder_hidden, encoder_outputs)\n            loss += criterion(decoder_output, target_tensor[di])\n            decoder_input = target_tensor[di]  # teacher forcing\n\n    else:\n        # without teacher forcing: use its own predictions as the next input\n        for di in range(target_length):\n            decoder_output, decoder_hidden, decoder_attention = decoder(\n                decoder_input, decoder_hidden, encoder_outputs)\n            topv, topi = decoder_output.topk(1)\n            decoder_input = topi.squeeze().detach()  # detach from history as input\n\n            loss += criterion(decoder_output, target_tensor[di])\n            if decoder_input.item() == eos_token:\n                break\n\n    loss.backward()\n\n    encoder_optimizer.step()\n    decoder_optimizer.step()\n\n    return loss.item() / target_length"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "this is a helper function to print time elapsed and estimated time\nremaining given the current time and progress %.\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "import time\nimport math\n\n\ndef asminutes(s):\n    m = math.floor(s / 60)\n    s -= m * 60\n    return '%dm %ds' % (m, s)\n\n\ndef timesince(since, percent):\n    now = time.time()\n    s = now - since\n    es = s / (percent)\n    rs = es - s\n    return '%s (- %s)' % (asminutes(s), asminutes(rs))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "the whole training process looks like this:\n\n-  start a timer\n-  initialize optimizers and criterion\n-  create set of training pairs\n-  start empty losses array for plotting\n\nthen we call ``train`` many times and occasionally print the progress (%\nof examples, time so far, estimated time) and average loss.\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "def trainiters(encoder, decoder, n_iters, print_every=1000, plot_every=100, learning_rate=0.01):\n    start = time.time()\n    plot_losses = []\n    print_loss_total = 0  # reset every print_every\n    plot_loss_total = 0  # reset every plot_every\n\n    encoder_optimizer = optim.sgd(encoder.parameters(), lr=learning_rate)\n    decoder_optimizer = optim.sgd(decoder.parameters(), lr=learning_rate)\n    training_pairs = [tensorsfrompair(random.choice(pairs))\n                      for i in range(n_iters)]\n    criterion = nn.nllloss()\n\n    for iter in range(1, n_iters + 1):\n        training_pair = training_pairs[iter - 1]\n        input_tensor = training_pair[0]\n        target_tensor = training_pair[1]\n\n        loss = train(input_tensor, target_tensor, encoder,\n                     decoder, encoder_optimizer, decoder_optimizer, criterion)\n        print_loss_total += loss\n        plot_loss_total += loss\n\n        if iter % print_every == 0:\n            print_loss_avg = print_loss_total / print_every\n            print_loss_total = 0\n            print('%s (%d %d%%) %.4f' % (timesince(start, iter / n_iters),\n                                         iter, iter / n_iters * 100, print_loss_avg))\n\n        if iter % plot_every == 0:\n            plot_loss_avg = plot_loss_total / plot_every\n            plot_losses.append(plot_loss_avg)\n            plot_loss_total = 0\n\n    showplot(plot_losses)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "plotting results\n----------------\n\nplotting is done with matplotlib, using the array of loss values\n``plot_losses`` saved while training.\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\nplt.switch_backend('agg')\nimport matplotlib.ticker as ticker\nimport numpy as np\n\n\ndef showplot(points):\n    plt.figure()\n    fig, ax = plt.subplots()\n    # this locator puts ticks at regular intervals\n    loc = ticker.multiplelocator(base=0.2)\n    ax.yaxis.set_major_locator(loc)\n    plt.plot(points)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "evaluation\n==========\n\nevaluation is mostly the same as training, but there are no targets so\nwe simply feed the decoder's predictions back to itself for each step.\nevery time it predicts a word we add it to the output string, and if it\npredicts the eos token we stop there. we also store the decoder's\nattention outputs for display later.\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "def evaluate(encoder, decoder, sentence, max_length=max_length):\n    with torch.no_grad():\n        input_tensor = tensorfromsentence(input_lang, sentence)\n        input_length = input_tensor.size()[0]\n        encoder_hidden = encoder.inithidden()\n\n        encoder_outputs = torch.zeros(max_length, encoder.hidden_size, device=device)\n\n        for ei in range(input_length):\n            encoder_output, encoder_hidden = encoder(input_tensor[ei],\n                                                     encoder_hidden)\n            encoder_outputs[ei] += encoder_output[0, 0]\n\n        decoder_input = torch.tensor([[sos_token]], device=device)  # sos\n\n        decoder_hidden = encoder_hidden\n\n        decoded_words = []\n        decoder_attentions = torch.zeros(max_length, max_length)\n\n        for di in range(max_length):\n            decoder_output, decoder_hidden, decoder_attention = decoder(\n                decoder_input, decoder_hidden, encoder_outputs)\n            decoder_attentions[di] = decoder_attention.data\n            topv, topi = decoder_output.data.topk(1)\n            if topi.item() == eos_token:\n                decoded_words.append('<eos>')\n                break\n            else:\n                decoded_words.append(output_lang.index2word[topi.item()])\n\n            decoder_input = topi.squeeze().detach()\n\n        return decoded_words, decoder_attentions[:di + 1]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "we can evaluate random sentences from the training set and print out the\ninput, target, and output to make some subjective quality judgements:\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "def evaluaterandomly(encoder, decoder, n=10):\n    for i in range(n):\n        pair = random.choice(pairs)\n        print('>', pair[0])\n        print('=', pair[1])\n        output_words, attentions = evaluate(encoder, decoder, pair[0])\n        output_sentence = ' '.join(output_words)\n        print('<', output_sentence)\n        print('')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "training and evaluating\n=======================\n\nwith all these helper functions in place (it looks like extra work, but\nit makes it easier to run multiple experiments) we can actually\ninitialize a network and start training.\n\nremember that the input sentences were heavily filtered. for this small\ndataset we can use relatively small networks of 256 hidden nodes and a\nsingle gru layer. after about 40 minutes on a macbook cpu we'll get some\nreasonable results.\n\n.. note::\n   if you run this notebook you can train, interrupt the kernel,\n   evaluate, and continue training later. comment out the lines where the\n   encoder and decoder are initialized and run ``trainiters`` again.\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "hidden_size = 256\nencoder1 = encoderid56(input_lang.n_words, hidden_size).to(device)\nattn_decoder1 = attndecoderid56(hidden_size, output_lang.n_words, dropout_p=0.1).to(device)\n\ntrainiters(encoder1, attn_decoder1, 75000, print_every=5000)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "evaluaterandomly(encoder1, attn_decoder1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "visualizing attention\n---------------------\n\na useful property of the attention mechanism is its highly interpretable\noutputs. because it is used to weight specific encoder outputs of the\ninput sequence, we can imagine looking where the network is focused most\nat each time step.\n\nyou could simply run ``plt.matshow(attentions)`` to see attention output\ndisplayed as a matrix, with the columns being input steps and rows being\noutput steps:\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "output_words, attentions = evaluate(\n    encoder1, attn_decoder1, \"je suis trop froid .\")\nplt.matshow(attentions.numpy())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "for a better viewing experience we will do the extra work of adding axes\nand labels:\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "def showattention(input_sentence, output_words, attentions):\n    # set up figure with colorbar\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    cax = ax.matshow(attentions.numpy(), cmap='bone')\n    fig.colorbar(cax)\n\n    # set up axes\n    ax.set_xticklabels([''] + input_sentence.split(' ') +\n                       ['<eos>'], rotation=90)\n    ax.set_yticklabels([''] + output_words)\n\n    # show label at every tick\n    ax.xaxis.set_major_locator(ticker.multiplelocator(1))\n    ax.yaxis.set_major_locator(ticker.multiplelocator(1))\n\n    plt.show()\n\n\ndef evaluateandshowattention(input_sentence):\n    output_words, attentions = evaluate(\n        encoder1, attn_decoder1, input_sentence)\n    print('input =', input_sentence)\n    print('output =', ' '.join(output_words))\n    showattention(input_sentence, output_words, attentions)\n\n\nevaluateandshowattention(\"elle a cinq ans de moins que moi .\")\n\nevaluateandshowattention(\"elle est trop petit .\")\n\nevaluateandshowattention(\"je ne crains pas de mourir .\")\n\nevaluateandshowattention(\"c est un jeune directeur plein de talent .\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "exercises\n=========\n\n-  try with a different dataset\n\n   -  another language pair\n   -  human \u2192 machine (e.g. iot commands)\n   -  chat \u2192 response\n   -  question \u2192 answer\n\n-  replace the embeddings with pre-trained id27s such as id97 or\n   glove\n-  try with more layers, more hidden units, and more sentences. compare\n   the training time and results.\n-  if you use a translation file where pairs have two of the same phrase\n   (``i am test \\t i am test``), you can use this as an autoencoder. try\n   this:\n\n   -  train as an autoencoder\n   -  save only the encoder network\n   -  train a new decoder for translation from there\n\n\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.6"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}