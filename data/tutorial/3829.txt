    #[1]index [2]search [3]classifying names with a character-level id56
   [4]chatbot tutorial

     * [5]get started
     * [6]features
     * [7]ecosystem
     * [8]blog
     * [9]tutorials
     * [10]docs
     * [11]resources
     * [12]github

   table of contents

   1.0.0.dev20190327
   ____________________

   getting started
     * [13]deep learning with pytorch: a 60 minute blitz
     * [14]data loading and processing tutorial
     * [15]learning pytorch with examples
     * [16]id21 tutorial
     * [17]deploying a id195 model with the hybrid frontend
     * [18]saving and loading models
     * [19]what is torch.nn really?

   image
     * [20]finetuning torchvision models
     * [21]spatial transformer networks tutorial
     * [22]neural transfer using pytorch
     * [23]adversarial example generation
     * [24]transfering a model from pytorch to caffe2 and mobile using
       onnx

   text
     * [25]chatbot tutorial
     * [26]generating names with a character-level id56
     * [27]classifying names with a character-level id56
     * [28]deep learning for nlp with pytorch
     * [29]translation with a sequence to sequence network and attention

   generative
     * [30]dcgan tutorial

   id23
     * [31]id23 (id25) tutorial

   extending pytorch
     * [32]creating extensions using numpy and scipy
     * [33]custom c++ and cuda extensions
     * [34]extending torchscript with custom c++ operators

   production usage
     * [35]writing distributed applications with pytorch
     * [36]pytorch 1.0 distributed trainer with amazon aws
     * [37]onnx live tutorial
     * [38]loading a pytorch model in c++

   pytorch in other languages
     * [39]using the pytorch c++ frontend

     * [40]tutorials >
     * generating names with a character-level id56
     * [41][view-page-source-icon.svg]

   shortcuts

   intermediate/char_id56_generation_tutorial
   [pytorch-colab.svg]
   run in google colab
   colab
   [pytorch-download.svg]
   download notebook
   notebook
   [pytorch-github.svg]
   view on github
   github

   note

   click [42]here to download the full example code

generating names with a character-level id56[43]  

   author: [44]sean robertson

   in the [45]last tutorial we used a id56 to classify names into their
   language of origin. this time we   ll turn around and generate names from
   languages.
> python sample.py russian rus
rovakov
uantov
shavakov

> python sample.py german ger
gerren
ereng
rosher

> python sample.py spanish spa
salla
parer
allan

> python sample.py chinese chi
chan
hang
iun

   we are still hand-crafting a small id56 with a few linear layers. the
   big difference is instead of predicting a category after reading in all
   the letters of a name, we input a category and output one letter at a
   time. recurrently predicting characters to form language (this could
   also be done with words or other higher order constructs) is often
   referred to as a    language model   .

   recommended reading:

   i assume you have at least installed pytorch, know python, and
   understand tensors:
     * [46]https://pytorch.org/ for installation instructions
     * [47]deep learning with pytorch: a 60 minute blitz to get started
       with pytorch in general
     * [48]learning pytorch with examples for a wide and deep overview
     * [49]pytorch for former torch users if you are former lua torch user

   it would also be useful to know about id56s and how they work:
     * [50]the unreasonable effectiveness of recurrent neural networks
       shows a bunch of real life examples
     * [51]understanding id137 is about lstms specifically but
       also informative about id56s in general

   i also suggest the previous tutorial, [52]classifying names with a
   character-level id56

preparing the data[53]  

   note

   download the data from [54]here and extract it to the current
   directory.

   see the last tutorial for more detail of this process. in short, there
   are a bunch of plain text files data/names/[language].txt with a name
   per line. we split lines into an array, convert unicode to ascii, and
   end up with a dictionary {language: [names ...]}.
from __future__ import unicode_literals, print_function, division
from io import open
import glob
import os
import unicodedata
import string

all_letters = string.ascii_letters + " .,;'-"
n_letters = len(all_letters) + 1 # plus eos marker

def findfiles(path): return glob.glob(path)

# turn a unicode string to plain ascii, thanks to https://stackoverflow.com/a/51
8232/2809427
def unicodetoascii(s):
    return ''.join(
        c for c in unicodedata.normalize('nfd', s)
        if unicodedata.category(c) != 'mn'
        and c in all_letters
    )

# read a file and split into lines
def readlines(filename):
    lines = open(filename, encoding='utf-8').read().strip().split('\n')
    return [unicodetoascii(line) for line in lines]

# build the category_lines dictionary, a list of lines per category
category_lines = {}
all_categories = []
for filename in findfiles('data/names/*.txt'):
    category = os.path.splitext(os.path.basename(filename))[0]
    all_categories.append(category)
    lines = readlines(filename)
    category_lines[category] = lines

n_categories = len(all_categories)

if n_categories == 0:
    raise runtimeerror('data not found. make sure that you downloaded data '
        'from https://download.pytorch.org/tutorial/data.zip and extract it to '
        'the current directory.')

print('# categories:', n_categories, all_categories)
print(unicodetoascii("o'n    l"))

   out:
# categories: 18 ['italian', 'german', 'portuguese', 'chinese', 'greek', 'polish
', 'french', 'english', 'spanish', 'arabic', 'czech', 'russian', 'irish', 'dutch
', 'scottish', 'vietnamese', 'korean', 'japanese']
o'neal

creating the network[55]  

   this network extends [56]the last tutorial   s id56 with an extra argument
   for the category tensor, which is concatenated along with the others.
   the category tensor is a one-hot vector just like the letter input.

   we will interpret the output as the id203 of the next letter.
   when sampling, the most likely output letter is used as the next input
   letter.

   i added a second linear layer o2o (after combining hidden and output)
   to give it more muscle to work with. there   s also a dropout layer,
   which [57]randomly zeros parts of its input with a given id203
   (here 0.1) and is usually used to fuzz inputs to prevent overfitting.
   here we   re using it towards the end of the network to purposely add
   some chaos and increase sampling variety.
import torch
import torch.nn as nn

class id56(nn.module):
    def __init__(self, input_size, hidden_size, output_size):
        super(id56, self).__init__()
        self.hidden_size = hidden_size

        self.i2h = nn.linear(n_categories + input_size + hidden_size, hidden_siz
e)
        self.i2o = nn.linear(n_categories + input_size + hidden_size, output_siz
e)
        self.o2o = nn.linear(hidden_size + output_size, output_size)
        self.dropout = nn.dropout(0.1)
        self.softmax = nn.logsoftmax(dim=1)

    def forward(self, category, input, hidden):
        input_combined = torch.cat((category, input, hidden), 1)
        hidden = self.i2h(input_combined)
        output = self.i2o(input_combined)
        output_combined = torch.cat((hidden, output), 1)
        output = self.o2o(output_combined)
        output = self.dropout(output)
        output = self.softmax(output)
        return output, hidden

    def inithidden(self):
        return torch.zeros(1, self.hidden_size)

training[58]  

preparing for training[59]  

   first of all, helper functions to get random pairs of (category, line):
import random

# random item from a list
def randomchoice(l):
    return l[random.randint(0, len(l) - 1)]

# get a random category and random line from that category
def randomtrainingpair():
    category = randomchoice(all_categories)
    line = randomchoice(category_lines[category])
    return category, line

   for each timestep (that is, for each letter in a training word) the
   inputs of the network will be (category, current letter, hidden state)
   and the outputs will be (next letter, next hidden state). so for each
   training set, we   ll need the category, a set of input letters, and a
   set of output/target letters.

   since we are predicting the next letter from the current letter for
   each timestep, the letter pairs are groups of consecutive letters from
   the line - e.g. for "abcd<eos>" we would create (   a   ,    b   ), (   b   ,    c   ),
   (   c   ,    d   ), (   d   ,    eos   ).

   the category tensor is a [60]one-hot tensor of size <1 x n_categories>.
   when training we feed it to the network at every timestep - this is a
   design choice, it could have been included as part of initial hidden
   state or some other strategy.
# one-hot vector for category
def categorytensor(category):
    li = all_categories.index(category)
    tensor = torch.zeros(1, n_categories)
    tensor[0][li] = 1
    return tensor

# one-hot matrix of first to last letters (not including eos) for input
def inputtensor(line):
    tensor = torch.zeros(len(line), 1, n_letters)
    for li in range(len(line)):
        letter = line[li]
        tensor[li][0][all_letters.find(letter)] = 1
    return tensor

# longtensor of second letter to end (eos) for target
def targettensor(line):
    letter_indexes = [all_letters.find(line[li]) for li in range(1, len(line))]
    letter_indexes.append(n_letters - 1) # eos
    return torch.longtensor(letter_indexes)

   for convenience during training we   ll make a randomtrainingexample
   function that fetches a random (category, line) pair and turns them
   into the required (category, input, target) tensors.
# make category, input, and target tensors from a random category, line pair
def randomtrainingexample():
    category, line = randomtrainingpair()
    category_tensor = categorytensor(category)
    input_line_tensor = inputtensor(line)
    target_line_tensor = targettensor(line)
    return category_tensor, input_line_tensor, target_line_tensor

training the network[61]  

   in contrast to classification, where only the last output is used, we
   are making a prediction at every step, so we are calculating loss at
   every step.

   the magic of autograd allows you to simply sum these losses at each
   step and call backward at the end.
criterion = nn.nllloss()

learning_rate = 0.0005

def train(category_tensor, input_line_tensor, target_line_tensor):
    target_line_tensor.unsqueeze_(-1)
    hidden = id56.inithidden()

    id56.zero_grad()

    loss = 0

    for i in range(input_line_tensor.size(0)):
        output, hidden = id56(category_tensor, input_line_tensor[i], hidden)
        l = criterion(output, target_line_tensor[i])
        loss += l

    loss.backward()

    for p in id56.parameters():
        p.data.add_(-learning_rate, p.grad.data)

    return output, loss.item() / input_line_tensor.size(0)

   to keep track of how long training takes i am adding a
   timesince(timestamp) function which returns a human readable string:
import time
import math

def timesince(since):
    now = time.time()
    s = now - since
    m = math.floor(s / 60)
    s -= m * 60
    return '%dm %ds' % (m, s)

   training is business as usual - call train a bunch of times and wait a
   few minutes, printing the current time and loss every print_every
   examples, and keeping store of an average loss per plot_every examples
   in all_losses for plotting later.
id56 = id56(n_letters, 128, n_letters)

n_iters = 100000
print_every = 5000
plot_every = 500
all_losses = []
total_loss = 0 # reset every plot_every iters

start = time.time()

for iter in range(1, n_iters + 1):
    output, loss = train(*randomtrainingexample())
    total_loss += loss

    if iter % print_every == 0:
        print('%s (%d %d%%) %.4f' % (timesince(start), iter, iter / n_iters * 10
0, loss))

    if iter % plot_every == 0:
        all_losses.append(total_loss / plot_every)
        total_loss = 0

   out:
0m 20s (5000 5%) 2.4604
0m 39s (10000 10%) 2.5436
0m 58s (15000 15%) 3.5756
1m 18s (20000 20%) 2.8927
1m 37s (25000 25%) 2.1367
1m 56s (30000 30%) 2.8145
2m 16s (35000 35%) 2.9543
2m 35s (40000 40%) 1.9376
2m 54s (45000 45%) 2.7938
3m 14s (50000 50%) 2.0641
3m 33s (55000 55%) 2.6410
3m 52s (60000 60%) 2.3062
4m 11s (65000 65%) 1.9914
4m 30s (70000 70%) 2.7852
4m 49s (75000 75%) 2.2239
5m 9s (80000 80%) 3.1641
5m 28s (85000 85%) 1.5472
5m 47s (90000 90%) 2.5374
6m 6s (95000 95%) 2.7880
6m 25s (100000 100%) 2.3317

plotting the losses[62]  

   plotting the historical loss from all_losses shows the network
   learning:
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

plt.figure()
plt.plot(all_losses)

   ../_images/sphx_glr_char_id56_generation_tutorial_001.png

sampling the network[63]  

   to sample we give the network a letter and ask what the next one is,
   feed that in as the next letter, and repeat until the eos token.
     * create tensors for input category, starting letter, and empty
       hidden state
     * create a string output_name with the starting letter
     * up to a maximum output length,
          + feed the current letter to the network
          + get the next letter from highest output, and next hidden state
          + if the letter is eos, stop here
          + if a regular letter, add to output_name and continue
     * return the final name

   note

   rather than having to give it a starting letter, another strategy would
   have been to include a    start of string    token in training and have the
   network choose its own starting letter.
max_length = 20

# sample from a category and starting letter
def sample(category, start_letter='a'):
    with torch.no_grad():  # no need to track history in sampling
        category_tensor = categorytensor(category)
        input = inputtensor(start_letter)
        hidden = id56.inithidden()

        output_name = start_letter

        for i in range(max_length):
            output, hidden = id56(category_tensor, input[0], hidden)
            topv, topi = output.topk(1)
            topi = topi[0][0]
            if topi == n_letters - 1:
                break
            else:
                letter = all_letters[topi]
                output_name += letter
            input = inputtensor(letter)

        return output_name

# get multiple samples from one category and multiple starting letters
def samples(category, start_letters='abc'):
    for start_letter in start_letters:
        print(sample(category, start_letter))

samples('russian', 'rus')

samples('german', 'ger')

samples('spanish', 'spa')

samples('chinese', 'chi')

   out:
roverin
uantonov
sakonov
gerren
eren
roure
salla
parer
artan
chan
han
iun

exercises[64]  

     * try with a different dataset of category -> line, for example:
          + fictional series -> character name
          + part of speech -> word
          + country -> city
     * use a    start of sentence    token so that sampling can be done
       without choosing a start letter
     * get better results with a bigger and/or better shaped network
          + try the nn.lstm and nn.gru layers
          + combine multiple of these id56s as a higher level network

   total running time of the script: ( 6 minutes 26.093 seconds)
   [65]download python source code: char_id56_generation_tutorial.py
   [66]download jupyter notebook: char_id56_generation_tutorial.ipynb

   [67]gallery generated by sphinx-gallery

   [68]next [chevron-right-orange.svg] [69][chevron-right-orange.svg]
   previous
     __________________________________________________________________

   was this helpful?
   yes
   no
   thank you
     __________________________________________________________________

      copyright 2017, pytorch.
   built with [70]sphinx using a [71]theme provided by [72]read the docs.
     * [73]generating names with a character-level id56
          + [74]preparing the data
          + [75]creating the network
          + [76]training
               o [77]preparing for training
               o [78]training the network
               o [79]plotting the losses
          + [80]sampling the network
          + [81]exercises

   [tr?id=243028289693773&amp;ev=pageview &amp;noscript=1]

docs

   access comprehensive developer documentation for pytorch
   [82]view docs

tutorials

   get in-depth tutorials for beginners and advanced developers
   [83]view tutorials

resources

   find development resources and get your questions answered
   [84]view resources

     * [85]pytorch
     * [86]get started
     * [87]features
     * [88]ecosystem
     * [89]blog
     * [90]resources

     * [91]support
     * [92]tutorials
     * [93]docs
     * [94]discuss
     * [95]github issues
     * [96]slack
     * [97]contributing

     * follow us
     * email address ____________________
       ____________________
       submit

   to analyze traffic and optimize your experience, we serve cookies on
   this site. by clicking or navigating, you agree to allow our usage of
   cookies. as the current maintainers of this site, facebook   s cookies
   policy applies. learn more, including about available controls:
   [98]cookies policy.
   [pytorch-x.svg]

     * [99]get started
     * [100]features
     * [101]ecosystem
     * [102]blog
     * [103]tutorials
     * [104]docs
     * [105]resources
     * [106]github

references

   visible links
   1. https://pytorch.org/tutorials/genindex.html
   2. https://pytorch.org/tutorials/search.html
   3. https://pytorch.org/tutorials/intermediate/char_id56_classification_tutorial.html
   4. https://pytorch.org/tutorials/beginner/chatbot_tutorial.html
   5. https://pytorch.org/get-started
   6. https://pytorch.org/features
   7. https://pytorch.org/ecosystem
   8. https://pytorch.org/blog/
   9. https://pytorch.org/tutorials
  10. https://pytorch.org/docs/stable/index.html
  11. https://pytorch.org/resources
  12. https://github.com/pytorch/pytorch
  13. https://pytorch.org/tutorials/beginner/deep_learning_60min_blitz.html
  14. https://pytorch.org/tutorials/beginner/data_loading_tutorial.html
  15. https://pytorch.org/tutorials/beginner/pytorch_with_examples.html
  16. https://pytorch.org/tutorials/beginner/transfer_learning_tutorial.html
  17. https://pytorch.org/tutorials/beginner/deploy_id195_hybrid_frontend_tutorial.html
  18. https://pytorch.org/tutorials/beginner/saving_loading_models.html
  19. https://pytorch.org/tutorials/beginner/nn_tutorial.html
  20. https://pytorch.org/tutorials/beginner/finetuning_torchvision_models_tutorial.html
  21. https://pytorch.org/tutorials/intermediate/spatial_transformer_tutorial.html
  22. https://pytorch.org/tutorials/advanced/neural_style_tutorial.html
  23. https://pytorch.org/tutorials/beginner/fgsm_tutorial.html
  24. https://pytorch.org/tutorials/advanced/super_resolution_with_caffe2.html
  25. https://pytorch.org/tutorials/beginner/chatbot_tutorial.html
  26. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html
  27. https://pytorch.org/tutorials/intermediate/char_id56_classification_tutorial.html
  28. https://pytorch.org/tutorials/beginner/deep_learning_nlp_tutorial.html
  29. https://pytorch.org/tutorials/intermediate/id195_translation_tutorial.html
  30. https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html
  31. https://pytorch.org/tutorials/intermediate/reinforcement_q_learning.html
  32. https://pytorch.org/tutorials/advanced/numpy_extensions_tutorial.html
  33. https://pytorch.org/tutorials/advanced/cpp_extension.html
  34. https://pytorch.org/tutorials/advanced/torch_script_custom_ops.html
  35. https://pytorch.org/tutorials/intermediate/dist_tuto.html
  36. https://pytorch.org/tutorials/beginner/aws_distributed_training_tutorial.html
  37. https://pytorch.org/tutorials/advanced/onnxlive.html
  38. https://pytorch.org/tutorials/advanced/cpp_export.html
  39. https://pytorch.org/tutorials/advanced/cpp_frontend.html
  40. https://pytorch.org/tutorials/index.html
  41. https://pytorch.org/tutorials/_sources/intermediate/char_id56_generation_tutorial.rst.txt
  42. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html#sphx-glr-download-intermediate-char-id56-generation-tutorial-py
  43. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html#generating-names-with-a-character-level-id56
  44. https://github.com/spro/practical-pytorch
  45. https://pytorch.org/tutorials/intermediate/char_id56_classification_tutorial.html
  46. https://pytorch.org/
  47. https://pytorch.org/tutorials/beginner/deep_learning_60min_blitz.html
  48. https://pytorch.org/tutorials/beginner/pytorch_with_examples.html
  49. https://pytorch.org/tutorials/beginner/former_torchies_tutorial.html
  50. https://karpathy.github.io/2015/05/21/id56-effectiveness/
  51. https://colah.github.io/posts/2015-08-understanding-lstms/
  52. https://pytorch.org/tutorials/intermediate/char_id56_classification_tutorial.html
  53. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html#preparing-the-data
  54. https://download.pytorch.org/tutorial/data.zip
  55. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html#creating-the-network
  56. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html#creating-the-network
  57. https://arxiv.org/abs/1207.0580
  58. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html#training
  59. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html#preparing-for-training
  60. https://en.wikipedia.org/wiki/one-hot
  61. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html#training-the-network
  62. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html#plotting-the-losses
  63. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html#sampling-the-network
  64. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html#exercises
  65. https://pytorch.org/tutorials/_downloads/8167177b6dd8ddf05bb9fe58744ac406/char_id56_generation_tutorial.py
  66. https://pytorch.org/tutorials/_downloads/a35c00bb5afae3962e1e7869c66872fa/char_id56_generation_tutorial.ipynb
  67. https://sphinx-gallery.readthedocs.io/
  68. https://pytorch.org/tutorials/intermediate/char_id56_classification_tutorial.html
  69. https://pytorch.org/tutorials/beginner/chatbot_tutorial.html
  70. http://sphinx-doc.org/
  71. https://github.com/rtfd/sphinx_rtd_theme
  72. https://readthedocs.org/
  73. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html
  74. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html#preparing-the-data
  75. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html#creating-the-network
  76. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html#training
  77. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html#preparing-for-training
  78. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html#training-the-network
  79. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html#plotting-the-losses
  80. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html#sampling-the-network
  81. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html#exercises
  82. https://pytorch.org/docs/stable/index.html
  83. https://pytorch.org/tutorials
  84. https://pytorch.org/resources
  85. https://pytorch.org/
  86. https://pytorch.org/get-started
  87. https://pytorch.org/features
  88. https://pytorch.org/ecosystem
  89. https://pytorch.org/blog/
  90. https://pytorch.org/resources
  91. https://pytorch.org/support
  92. https://pytorch.org/tutorials
  93. https://pytorch.org/docs/stable/index.html
  94. https://discuss.pytorch.org/
  95. https://github.com/pytorch/pytorch/issues
  96. https://pytorch.slack.com/
  97. https://github.com/pytorch/pytorch/blob/master/contributing.md
  98. https://www.facebook.com/policies/cookies/
  99. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html
 100. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html
 101. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html
 102. https://pytorch.org/blog/
 103. https://pytorch.org/tutorials
 104. https://pytorch.org/docs/stable/index.html
 105. https://pytorch.org/resources
 106. https://github.com/pytorch/pytorch

   hidden links:
 108. https://pytorch.org/
 109. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html
 110. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html
 111. https://pytorch.org/
 112. https://www.facebook.com/pytorch
 113. https://twitter.com/pytorch
 114. https://pytorch.org/
 115. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html
