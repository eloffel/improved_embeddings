    #[1]index [2]search [3]sequence models and long-short term memory
   networks [4]deep learning with pytorch

     * [5]get started
     * [6]features
     * [7]ecosystem
     * [8]blog
     * [9]tutorials
     * [10]docs
     * [11]resources
     * [12]github

   table of contents

   1.0.0.dev20190327
   ____________________

   getting started
     * [13]deep learning with pytorch: a 60 minute blitz
     * [14]data loading and processing tutorial
     * [15]learning pytorch with examples
     * [16]id21 tutorial
     * [17]deploying a id195 model with the hybrid frontend
     * [18]saving and loading models
     * [19]what is torch.nn really?

   image
     * [20]finetuning torchvision models
     * [21]spatial transformer networks tutorial
     * [22]neural transfer using pytorch
     * [23]adversarial example generation
     * [24]transfering a model from pytorch to caffe2 and mobile using
       onnx

   text
     * [25]chatbot tutorial
     * [26]generating names with a character-level id56
     * [27]classifying names with a character-level id56
     * [28]deep learning for nlp with pytorch
     * [29]translation with a sequence to sequence network and attention

   generative
     * [30]dcgan tutorial

   id23
     * [31]id23 (id25) tutorial

   extending pytorch
     * [32]creating extensions using numpy and scipy
     * [33]custom c++ and cuda extensions
     * [34]extending torchscript with custom c++ operators

   production usage
     * [35]writing distributed applications with pytorch
     * [36]pytorch 1.0 distributed trainer with amazon aws
     * [37]onnx live tutorial
     * [38]loading a pytorch model in c++

   pytorch in other languages
     * [39]using the pytorch c++ frontend

     * [40]tutorials >
     * [41]deep learning for nlp with pytorch >
     * id27s: encoding lexical semantics
     * [42][view-page-source-icon.svg]

   shortcuts

   beginner/nlp/word_embeddings_tutorial
   [pytorch-colab.svg]
   run in google colab
   colab
   [pytorch-download.svg]
   download notebook
   notebook
   [pytorch-github.svg]
   view on github
   github

   note

   click [43]here to download the full example code

id27s: encoding lexical semantics[44]  

   id27s are dense vectors of real numbers, one per word in your
   vocabulary. in nlp, it is almost always the case that your features are
   words! but how should you represent a word in a computer? you could
   store its ascii character representation, but that only tells you what
   the word is, it doesn   t say much about what it means (you might be able
   to derive its part of speech from its affixes, or properties from its
   capitalization, but not much). even more, in what sense could you
   combine these representations? we often want dense outputs from our
   neural networks, where the inputs are \(|v|\) dimensional, where \(v\)
   is our vocabulary, but often the outputs are only a few dimensional (if
   we are only predicting a handful of labels, for instance). how do we
   get from a massive dimensional space to a smaller dimensional space?

   how about instead of ascii representations, we use a one-hot encoding?
   that is, we represent the word \(w\) by
   \[\overbrace{\left[ 0, 0, \dots, 1, \dots, 0, 0 \right]}^\text{|v|
   elements}\]

   where the 1 is in a location unique to \(w\). any other word will have
   a 1 in some other location, and a 0 everywhere else.

   there is an enormous drawback to this representation, besides just how
   huge it is. it basically treats all words as independent entities with
   no relation to each other. what we really want is some notion of
   similarity between words. why? let   s see an example.

   suppose we are building a language model. suppose we have seen the
   sentences
     * the mathematician ran to the store.
     * the physicist ran to the store.
     * the mathematician solved the open problem.

   in our training data. now suppose we get a new sentence never before
   seen in our training data:
     * the physicist solved the open problem.

   our language model might do ok on this sentence, but wouldn   t it be
   much better if we could use the following two facts:
     * we have seen mathematician and physicist in the same role in a
       sentence. somehow they have a semantic relation.
     * we have seen mathematician in the same role in this new unseen
       sentence as we are now seeing physicist.

   and then infer that physicist is actually a good fit in the new unseen
   sentence? this is what we mean by a notion of similarity: we mean
   semantic similarity, not simply having similar orthographic
   representations. it is a technique to combat the sparsity of linguistic
   data, by connecting the dots between what we have seen and what we
   haven   t. this example of course relies on a fundamental linguistic
   assumption: that words appearing in similar contexts are related to
   each other semantically. this is called the [45]distributional
   hypothesis.

getting dense id27s[46]  

   how can we solve this problem? that is, how could we actually encode
   semantic similarity in words? maybe we think up some semantic
   attributes. for example, we see that both mathematicians and physicists
   can run, so maybe we give these words a high score for the    is able to
   run    semantic attribute. think of some other attributes, and imagine
   what you might score some common words on those attributes.

   if each attribute is a dimension, then we might give each word a
   vector, like this:
   \[ q_\text{mathematician} = \left[ \overbrace{2.3}^\text{can run},
   \overbrace{9.4}^\text{likes coffee}, \overbrace{-5.5}^\text{majored in
   physics}, \dots \right]\]
   \[ q_\text{physicist} = \left[ \overbrace{2.5}^\text{can run},
   \overbrace{9.1}^\text{likes coffee}, \overbrace{6.4}^\text{majored in
   physics}, \dots \right]\]

   then we can get a measure of similarity between these words by doing:
   \[\text{similarity}(\text{physicist}, \text{mathematician}) =
   q_\text{physicist} \cdot q_\text{mathematician}\]

   although it is more common to normalize by the lengths:
   \[ \text{similarity}(\text{physicist}, \text{mathematician}) =
   \frac{q_\text{physicist} \cdot q_\text{mathematician}} {\|
   q_\text{physicist} \| \| q_\text{mathematician} \|} = \cos (\phi)\]

   where \(\phi\) is the angle between the two vectors. that way,
   extremely similar words (words whose embeddings point in the same
   direction) will have similarity 1. extremely dissimilar words should
   have similarity -1.

   you can think of the sparse one-hot vectors from the beginning of this
   section as a special case of these new vectors we have defined, where
   each word basically has similarity 0, and we gave each word some unique
   semantic attribute. these new vectors are dense, which is to say their
   entries are (typically) non-zero.

   but these new vectors are a big pain: you could think of thousands of
   different semantic attributes that might be relevant to determining
   similarity, and how on earth would you set the values of the different
   attributes? central to the idea of deep learning is that the neural
   network learns representations of the features, rather than requiring
   the programmer to design them herself. so why not just let the word
   embeddings be parameters in our model, and then be updated during
   training? this is exactly what we will do. we will have some latent
   semantic attributes that the network can, in principle, learn. note
   that the id27s will probably not be interpretable. that is,
   although with our hand-crafted vectors above we can see that
   mathematicians and physicists are similar in that they both like
   coffee, if we allow a neural network to learn the embeddings and see
   that both mathematicians and physicists have a large value in the
   second dimension, it is not clear what that means. they are similar in
   some latent semantic dimension, but this probably has no interpretation
   to us.

   in summary, id27s are a representation of the *semantics* of
   a word, efficiently encoding semantic information that might be
   relevant to the task at hand. you can embed other things too: part of
   speech tags, parse trees, anything! the idea of feature embeddings is
   central to the field.

id27s in pytorch[47]  

   before we get to a worked example and an exercise, a few quick notes
   about how to use embeddings in pytorch and in deep learning programming
   in general. similar to how we defined a unique index for each word when
   making one-hot vectors, we also need to define an index for each word
   when using embeddings. these will be keys into a lookup table. that is,
   embeddings are stored as a \(|v| \times d\) matrix, where \(d\) is the
   dimensionality of the embeddings, such that the word assigned index
   \(i\) has its embedding stored in the \(i\)   th row of the matrix. in
   all of my code, the mapping from words to indices is a dictionary named
   word_to_ix.

   the module that allows you to use embeddings is torch.nn.embedding,
   which takes two arguments: the vocabulary size, and the dimensionality
   of the embeddings.

   to index into this table, you must use torch.longtensor (since the
   indices are integers, not floats).
# author: robert guthrie

import torch
import torch.nn as nn
import torch.nn.functional as f
import torch.optim as optim

torch.manual_seed(1)

word_to_ix = {"hello": 0, "world": 1}
embeds = nn.embedding(2, 5)  # 2 words in vocab, 5 dimensional embeddings
lookup_tensor = torch.tensor([word_to_ix["hello"]], dtype=torch.long)
hello_embed = embeds(lookup_tensor)
print(hello_embed)

   out:
tensor([[ 0.6614,  0.2669,  0.0617,  0.6213, -0.4519]],
       grad_fn=<embeddingbackward>)

an example: id165 id38[48]  

   recall that in an id165 language model, given a sequence of words
   \(w\), we want to compute
   \[p(w_i | w_{i-1}, w_{i-2}, \dots, w_{i-n+1} )\]

   where \(w_i\) is the ith word of the sequence.

   in this example, we will compute the id168 on some training
   examples and update the parameters with id26.
context_size = 2
embedding_dim = 10
# we will use shakespeare sonnet 2
test_sentence = """when forty winters shall besiege thy brow,
and dig deep trenches in thy beauty's field,
thy youth's proud livery so gazed on now,
will be a totter'd weed of small worth held:
then being asked, where all thy beauty lies,
where all the treasure of thy lusty days;
to say, within thine own deep sunken eyes,
were an all-eating shame, and thriftless praise.
how much more praise deserv'd thy beauty's use,
if thou couldst answer 'this fair child of mine
shall sum my count, and make my old excuse,'
proving his beauty by succession thine!
this were to be new made when thou art old,
and see thy blood warm when thou feel'st it cold.""".split()
# we should tokenize the input, but we will ignore that for now
# build a list of tuples.  each tuple is ([ word_i-2, word_i-1 ], target word)
trigrams = [([test_sentence[i], test_sentence[i + 1]], test_sentence[i + 2])
            for i in range(len(test_sentence) - 2)]
# print the first 3, just so you can see what they look like
print(trigrams[:3])

vocab = set(test_sentence)
word_to_ix = {word: i for i, word in enumerate(vocab)}


class ngramlanguagemodeler(nn.module):

    def __init__(self, vocab_size, embedding_dim, context_size):
        super(ngramlanguagemodeler, self).__init__()
        self.embeddings = nn.embedding(vocab_size, embedding_dim)
        self.linear1 = nn.linear(context_size * embedding_dim, 128)
        self.linear2 = nn.linear(128, vocab_size)

    def forward(self, inputs):
        embeds = self.embeddings(inputs).view((1, -1))
        out = f.relu(self.linear1(embeds))
        out = self.linear2(out)
        log_probs = f.log_softmax(out, dim=1)
        return log_probs


losses = []
loss_function = nn.nllloss()
model = ngramlanguagemodeler(len(vocab), embedding_dim, context_size)
optimizer = optim.sgd(model.parameters(), lr=0.001)

for epoch in range(10):
    total_loss = 0
    for context, target in trigrams:

        # step 1. prepare the inputs to be passed to the model (i.e, turn the wo
rds
        # into integer indices and wrap them in tensors)
        context_idxs = torch.tensor([word_to_ix[w] for w in context], dtype=torc
h.long)

        # step 2. recall that torch *accumulates* gradients. before passing in a
        # new instance, you need to zero out the gradients from the old
        # instance
        model.zero_grad()

        # step 3. run the forward pass, getting log probabilities over next
        # words
        log_probs = model(context_idxs)

        # step 4. compute your id168. (again, torch wants the target
        # word wrapped in a tensor)
        loss = loss_function(log_probs, torch.tensor([word_to_ix[target]], dtype
=torch.long))

        # step 5. do the backward pass and update the gradient
        loss.backward()
        optimizer.step()

        # get the python number from a 1-element tensor by calling tensor.item()
        total_loss += loss.item()
    losses.append(total_loss)
print(losses)  # the loss decreased every iteration over the training data!

   out:
[(['when', 'forty'], 'winters'), (['forty', 'winters'], 'shall'), (['winters', '
shall'], 'besiege')]
[519.5212135314941, 517.0080056190491, 514.5102577209473, 512.0265784263611, 509
.55575942993164, 507.0958049297333, 504.64737462997437, 502.2097544670105, 499.7
8197979927063, 497.36371421813965]

exercise: computing id27s: continuous bag-of-words[49]  

   the continuous bag-of-words model (cbow) is frequently used in nlp deep
   learning. it is a model that tries to predict words given the context
   of a few words before and a few words after the target word. this is
   distinct from id38, since cbow is not sequential and does
   not have to be probabilistic. typcially, cbow is used to quickly train
   id27s, and these embeddings are used to initialize the
   embeddings of some more complicated model. usually, this is referred to
   as pretraining embeddings. it almost always helps performance a couple
   of percent.

   the cbow model is as follows. given a target word \(w_i\) and an \(n\)
   context window on each side, \(w_{i-1}, \dots, w_{i-n}\) and \(w_{i+1},
   \dots, w_{i+n}\), referring to all context words collectively as \(c\),
   cbow tries to minimize
   \[-\log p(w_i | c) = -\log \text{softmax}(a(\sum_{w \in c} q_w) + b)\]

   where \(q_w\) is the embedding for word \(w\).

   implement this model in pytorch by filling in the class below. some
   tips:
     * think about which parameters you need to define.
     * make sure you know what shape each operation expects. use .view()
       if you need to reshape.

context_size = 2  # 2 words to the left, 2 to the right
raw_text = """we are about to study the idea of a computational process.
computational processes are abstract beings that inhabit computers.
as they evolve, processes manipulate other abstract things called data.
the evolution of a process is directed by a pattern of rules
called a program. people create programs to direct processes. in effect,
we conjure the spirits of the computer with our spells.""".split()

# by deriving a set from `raw_text`, we deduplicate the array
vocab = set(raw_text)
vocab_size = len(vocab)

word_to_ix = {word: i for i, word in enumerate(vocab)}
data = []
for i in range(2, len(raw_text) - 2):
    context = [raw_text[i - 2], raw_text[i - 1],
               raw_text[i + 1], raw_text[i + 2]]
    target = raw_text[i]
    data.append((context, target))
print(data[:5])


class cbow(nn.module):

    def __init__(self):
        pass

    def forward(self, inputs):
        pass

# create your model and train.  here are some functions to help you make
# the data ready for use by your module


def make_context_vector(context, word_to_ix):
    idxs = [word_to_ix[w] for w in context]
    return torch.tensor(idxs, dtype=torch.long)


make_context_vector(data[0][0], word_to_ix)  # example

   out:
[(['we', 'are', 'to', 'study'], 'about'), (['are', 'about', 'study', 'the'], 'to
'), (['about', 'to', 'the', 'idea'], 'study'), (['to', 'study', 'idea', 'of'], '
the'), (['study', 'the', 'of', 'a'], 'idea')]

   total running time of the script: ( 0 minutes 0.641 seconds)
   [50]download python source code: word_embeddings_tutorial.py
   [51]download jupyter notebook: word_embeddings_tutorial.ipynb

   [52]gallery generated by sphinx-gallery

   [53]next [chevron-right-orange.svg] [54][chevron-right-orange.svg]
   previous
     __________________________________________________________________

   was this helpful?
   yes
   no
   thank you
     __________________________________________________________________

      copyright 2017, pytorch.
   built with [55]sphinx using a [56]theme provided by [57]read the docs.
     * [58]id27s: encoding lexical semantics
          + [59]getting dense id27s
          + [60]id27s in pytorch
          + [61]an example: id165 id38
          + [62]exercise: computing id27s: continuous
            bag-of-words

   [tr?id=243028289693773&amp;ev=pageview &amp;noscript=1]

docs

   access comprehensive developer documentation for pytorch
   [63]view docs

tutorials

   get in-depth tutorials for beginners and advanced developers
   [64]view tutorials

resources

   find development resources and get your questions answered
   [65]view resources

     * [66]pytorch
     * [67]get started
     * [68]features
     * [69]ecosystem
     * [70]blog
     * [71]resources

     * [72]support
     * [73]tutorials
     * [74]docs
     * [75]discuss
     * [76]github issues
     * [77]slack
     * [78]contributing

     * follow us
     * email address ____________________
       ____________________
       submit

   to analyze traffic and optimize your experience, we serve cookies on
   this site. by clicking or navigating, you agree to allow our usage of
   cookies. as the current maintainers of this site, facebook   s cookies
   policy applies. learn more, including about available controls:
   [79]cookies policy.
   [pytorch-x.svg]

     * [80]get started
     * [81]features
     * [82]ecosystem
     * [83]blog
     * [84]tutorials
     * [85]docs
     * [86]resources
     * [87]github

references

   visible links
   1. https://pytorch.org/tutorials/genindex.html
   2. https://pytorch.org/tutorials/search.html
   3. https://pytorch.org/tutorials/beginner/nlp/sequence_models_tutorial.html
   4. https://pytorch.org/tutorials/beginner/nlp/deep_learning_tutorial.html
   5. https://pytorch.org/get-started
   6. https://pytorch.org/features
   7. https://pytorch.org/ecosystem
   8. https://pytorch.org/blog/
   9. https://pytorch.org/tutorials
  10. https://pytorch.org/docs/stable/index.html
  11. https://pytorch.org/resources
  12. https://github.com/pytorch/pytorch
  13. https://pytorch.org/tutorials/beginner/deep_learning_60min_blitz.html
  14. https://pytorch.org/tutorials/beginner/data_loading_tutorial.html
  15. https://pytorch.org/tutorials/beginner/pytorch_with_examples.html
  16. https://pytorch.org/tutorials/beginner/transfer_learning_tutorial.html
  17. https://pytorch.org/tutorials/beginner/deploy_id195_hybrid_frontend_tutorial.html
  18. https://pytorch.org/tutorials/beginner/saving_loading_models.html
  19. https://pytorch.org/tutorials/beginner/nn_tutorial.html
  20. https://pytorch.org/tutorials/beginner/finetuning_torchvision_models_tutorial.html
  21. https://pytorch.org/tutorials/intermediate/spatial_transformer_tutorial.html
  22. https://pytorch.org/tutorials/advanced/neural_style_tutorial.html
  23. https://pytorch.org/tutorials/beginner/fgsm_tutorial.html
  24. https://pytorch.org/tutorials/advanced/super_resolution_with_caffe2.html
  25. https://pytorch.org/tutorials/beginner/chatbot_tutorial.html
  26. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html
  27. https://pytorch.org/tutorials/intermediate/char_id56_classification_tutorial.html
  28. https://pytorch.org/tutorials/beginner/deep_learning_nlp_tutorial.html
  29. https://pytorch.org/tutorials/intermediate/id195_translation_tutorial.html
  30. https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html
  31. https://pytorch.org/tutorials/intermediate/reinforcement_q_learning.html
  32. https://pytorch.org/tutorials/advanced/numpy_extensions_tutorial.html
  33. https://pytorch.org/tutorials/advanced/cpp_extension.html
  34. https://pytorch.org/tutorials/advanced/torch_script_custom_ops.html
  35. https://pytorch.org/tutorials/intermediate/dist_tuto.html
  36. https://pytorch.org/tutorials/beginner/aws_distributed_training_tutorial.html
  37. https://pytorch.org/tutorials/advanced/onnxlive.html
  38. https://pytorch.org/tutorials/advanced/cpp_export.html
  39. https://pytorch.org/tutorials/advanced/cpp_frontend.html
  40. https://pytorch.org/tutorials/index.html
  41. https://pytorch.org/tutorials/beginner/deep_learning_nlp_tutorial.html
  42. https://pytorch.org/tutorials/_sources/beginner/nlp/word_embeddings_tutorial.rst.txt
  43. https://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html#sphx-glr-download-beginner-nlp-word-embeddings-tutorial-py
  44. https://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html#word-embeddings-encoding-lexical-semantics
  45. https://en.wikipedia.org/wiki/distributional_semantics
  46. https://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html#getting-dense-word-embeddings
  47. https://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html#word-embeddings-in-pytorch
  48. https://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html#an-example-id165-language-modeling
  49. https://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html#exercise-computing-word-embeddings-continuous-bag-of-words
  50. https://pytorch.org/tutorials/_downloads/8807094f6210189fde9923211274dc82/word_embeddings_tutorial.py
  51. https://pytorch.org/tutorials/_downloads/e6a250a908acf3362a7ae511adf55881/word_embeddings_tutorial.ipynb
  52. https://sphinx-gallery.readthedocs.io/
  53. https://pytorch.org/tutorials/beginner/nlp/sequence_models_tutorial.html
  54. https://pytorch.org/tutorials/beginner/nlp/deep_learning_tutorial.html
  55. http://sphinx-doc.org/
  56. https://github.com/rtfd/sphinx_rtd_theme
  57. https://readthedocs.org/
  58. https://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html
  59. https://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html#getting-dense-word-embeddings
  60. https://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html#word-embeddings-in-pytorch
  61. https://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html#an-example-id165-language-modeling
  62. https://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html#exercise-computing-word-embeddings-continuous-bag-of-words
  63. https://pytorch.org/docs/stable/index.html
  64. https://pytorch.org/tutorials
  65. https://pytorch.org/resources
  66. https://pytorch.org/
  67. https://pytorch.org/get-started
  68. https://pytorch.org/features
  69. https://pytorch.org/ecosystem
  70. https://pytorch.org/blog/
  71. https://pytorch.org/resources
  72. https://pytorch.org/support
  73. https://pytorch.org/tutorials
  74. https://pytorch.org/docs/stable/index.html
  75. https://discuss.pytorch.org/
  76. https://github.com/pytorch/pytorch/issues
  77. https://pytorch.slack.com/
  78. https://github.com/pytorch/pytorch/blob/master/contributing.md
  79. https://www.facebook.com/policies/cookies/
  80. https://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html
  81. https://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html
  82. https://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html
  83. https://pytorch.org/blog/
  84. https://pytorch.org/tutorials
  85. https://pytorch.org/docs/stable/index.html
  86. https://pytorch.org/resources
  87. https://github.com/pytorch/pytorch

   hidden links:
  89. https://pytorch.org/
  90. https://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html
  91. https://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html
  92. https://pytorch.org/
  93. https://www.facebook.com/pytorch
  94. https://twitter.com/pytorch
  95. https://pytorch.org/
  96. https://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html
