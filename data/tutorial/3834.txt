    #[1]index [2]search [3]translation with a sequence to sequence network
   and attention [4]sequence models and long-short term memory networks

     * [5]get started
     * [6]features
     * [7]ecosystem
     * [8]blog
     * [9]tutorials
     * [10]docs
     * [11]resources
     * [12]github

   table of contents

   1.0.0.dev20190327
   ____________________

   getting started
     * [13]deep learning with pytorch: a 60 minute blitz
     * [14]data loading and processing tutorial
     * [15]learning pytorch with examples
     * [16]id21 tutorial
     * [17]deploying a id195 model with the hybrid frontend
     * [18]saving and loading models
     * [19]what is torch.nn really?

   image
     * [20]finetuning torchvision models
     * [21]spatial transformer networks tutorial
     * [22]neural transfer using pytorch
     * [23]adversarial example generation
     * [24]transfering a model from pytorch to caffe2 and mobile using
       onnx

   text
     * [25]chatbot tutorial
     * [26]generating names with a character-level id56
     * [27]classifying names with a character-level id56
     * [28]deep learning for nlp with pytorch
     * [29]translation with a sequence to sequence network and attention

   generative
     * [30]dcgan tutorial

   id23
     * [31]id23 (id25) tutorial

   extending pytorch
     * [32]creating extensions using numpy and scipy
     * [33]custom c++ and cuda extensions
     * [34]extending torchscript with custom c++ operators

   production usage
     * [35]writing distributed applications with pytorch
     * [36]pytorch 1.0 distributed trainer with amazon aws
     * [37]onnx live tutorial
     * [38]loading a pytorch model in c++

   pytorch in other languages
     * [39]using the pytorch c++ frontend

     * [40]tutorials >
     * [41]deep learning for nlp with pytorch >
     * advanced: making dynamic decisions and the bi-lstm crf
     * [42][view-page-source-icon.svg]

   shortcuts

   beginner/nlp/advanced_tutorial
   [pytorch-colab.svg]
   run in google colab
   colab
   [pytorch-download.svg]
   download notebook
   notebook
   [pytorch-github.svg]
   view on github
   github

   note

   click [43]here to download the full example code

advanced: making dynamic decisions and the bi-lstm crf[44]  

dynamic versus static deep learning toolkits[45]  

   pytorch is a dynamic neural network kit. another example of a dynamic
   kit is [46]dynet (i mention this because working with pytorch and dynet
   is similar. if you see an example in dynet, it will probably help you
   implement it in pytorch). the opposite is the static tool kit, which
   includes theano, keras, tensorflow, etc. the core difference is the
   following:
     * in a static toolkit, you define a computation graph once, compile
       it, and then stream instances to it.
     * in a dynamic toolkit, you define a computation graph for each
       instance. it is never compiled and is executed on-the-fly

   without a lot of experience, it is difficult to appreciate the
   difference. one example is to suppose we want to build a deep
   constituent parser. suppose our model involves roughly the following
   steps:
     * we build the tree bottom up
     * tag the root nodes (the words of the sentence)
     * from there, use a neural network and the embeddings of the words to
       find combinations that form constituents. whenever you form a new
       constituent, use some sort of technique to get an embedding of the
       constituent. in this case, our network architecture will depend
       completely on the input sentence. in the sentence    the green cat
       scratched the wall   , at some point in the model, we will want to
       combine the span \((i,j,r) = (1, 3, \text{np})\) (that is, an np
       constituent spans word 1 to word 3, in this case    the green cat   ).

   however, another sentence might be    somewhere, the big fat cat
   scratched the wall   . in this sentence, we will want to form the
   constituent \((2, 4, np)\) at some point. the constituents we will want
   to form will depend on the instance. if we just compile the computation
   graph once, as in a static toolkit, it will be exceptionally difficult
   or impossible to program this logic. in a dynamic toolkit though, there
   isn   t just 1 pre-defined computation graph. there can be a new
   computation graph for each instance, so this problem goes away.

   dynamic toolkits also have the advantage of being easier to debug and
   the code more closely resembling the host language (by that i mean that
   pytorch and dynet look more like actual python code than keras or
   theano).

bi-lstm conditional random field discussion[47]  

   for this section, we will see a full, complicated example of a bi-lstm
   conditional random field for named-entity recognition. the lstm tagger
   above is typically sufficient for part-of-speech tagging, but a
   sequence model like the crf is really essential for strong performance
   on ner. familiarity with crf   s is assumed. although this name sounds
   scary, all the model is is a crf but where an lstm provides the
   features. this is an advanced model though, far more complicated than
   any earlier model in this tutorial. if you want to skip it, that is
   fine. to see if you   re ready, see if you can:
     * write the recurrence for the viterbi variable at step i for tag k.
     * modify the above recurrence to compute the forward variables
       instead.
     * modify again the above recurrence to compute the forward variables
       in log-space (hint: log-sum-exp)

   if you can do those three things, you should be able to understand the
   code below. recall that the crf computes a id155. let
   \(y\) be a tag sequence and \(x\) an input sequence of words. then we
   compute
   \[p(y|x) = \frac{\exp{(\text{score}(x, y)})}{\sum_{y'}
   \exp{(\text{score}(x, y')})}\]

   where the score is determined by defining some log potentials \(\log
   \psi_i(x,y)\) such that
   \[\text{score}(x,y) = \sum_i \log \psi_i(x,y)\]

   to make the partition function tractable, the potentials must look only
   at local features.

   in the bi-lstm crf, we define two kinds of potentials: emission and
   transition. the emission potential for the word at index \(i\) comes
   from the hidden state of the bi-lstm at timestep \(i\). the transition
   scores are stored in a \(|t|x|t|\) matrix \(\textbf{p}\), where \(t\)
   is the tag set. in my implementation, \(\textbf{p}_{j,k}\) is the score
   of transitioning to tag \(j\) from tag \(k\). so:
   \[\text{score}(x,y) = \sum_i \log \psi_\text{emit}(y_i \rightarrow x_i)
   + \log \psi_\text{trans}(y_{i-1} \rightarrow y_i)\]
   \[= \sum_i h_i[y_i] + \textbf{p}_{y_i, y_{i-1}}\]

   where in this second expression, we think of the tags as being assigned
   unique non-negative indices.

   if the above discussion was too brief, you can check out [48]this write
   up from michael collins on crfs.

implementation notes[49]  

   the example below implements the forward algorithm in log space to
   compute the partition function, and the viterbi algorithm to decode.
   id26 will compute the gradients automatically for us. we
   don   t have to do anything by hand.

   the implementation is not optimized. if you understand what is going
   on, you   ll probably quickly see that iterating over the next tag in the
   forward algorithm could probably be done in one big operation. i wanted
   to code to be more readable. if you want to make the relevant change,
   you could probably use this tagger for real tasks.
# author: robert guthrie

import torch
import torch.autograd as autograd
import torch.nn as nn
import torch.optim as optim

torch.manual_seed(1)

   helper functions to make the code more readable.
def argmax(vec):
    # return the argmax as a python int
    _, idx = torch.max(vec, 1)
    return idx.item()


def prepare_sequence(seq, to_ix):
    idxs = [to_ix[w] for w in seq]
    return torch.tensor(idxs, dtype=torch.long)


# compute log sum exp in a numerically stable way for the forward algorithm
def log_sum_exp(vec):
    max_score = vec[0, argmax(vec)]
    max_score_broadcast = max_score.view(1, -1).expand(1, vec.size()[1])
    return max_score + \
        torch.log(torch.sum(torch.exp(vec - max_score_broadcast)))

   create model
class bilstm_crf(nn.module):

    def __init__(self, vocab_size, tag_to_ix, embedding_dim, hidden_dim):
        super(bilstm_crf, self).__init__()
        self.embedding_dim = embedding_dim
        self.hidden_dim = hidden_dim
        self.vocab_size = vocab_size
        self.tag_to_ix = tag_to_ix
        self.tagset_size = len(tag_to_ix)

        self.word_embeds = nn.embedding(vocab_size, embedding_dim)
        self.lstm = nn.lstm(embedding_dim, hidden_dim // 2,
                            num_layers=1, bidirectional=true)

        # maps the output of the lstm into tag space.
        self.hidden2tag = nn.linear(hidden_dim, self.tagset_size)

        # matrix of transition parameters.  entry i,j is the score of
        # transitioning *to* i *from* j.
        self.transitions = nn.parameter(
            torch.randn(self.tagset_size, self.tagset_size))

        # these two statements enforce the constraint that we never transfer
        # to the start tag and we never transfer from the stop tag
        self.transitions.data[tag_to_ix[start_tag], :] = -10000
        self.transitions.data[:, tag_to_ix[stop_tag]] = -10000

        self.hidden = self.init_hidden()

    def init_hidden(self):
        return (torch.randn(2, 1, self.hidden_dim // 2),
                torch.randn(2, 1, self.hidden_dim // 2))

    def _forward_alg(self, feats):
        # do the forward algorithm to compute the partition function
        init_alphas = torch.full((1, self.tagset_size), -10000.)
        # start_tag has all of the score.
        init_alphas[0][self.tag_to_ix[start_tag]] = 0.

        # wrap in a variable so that we will get automatic backprop
        forward_var = init_alphas

        # iterate through the sentence
        for feat in feats:
            alphas_t = []  # the forward tensors at this timestep
            for next_tag in range(self.tagset_size):
                # broadcast the emission score: it is the same regardless of
                # the previous tag
                emit_score = feat[next_tag].view(
                    1, -1).expand(1, self.tagset_size)
                # the ith entry of trans_score is the score of transitioning to
                # next_tag from i
                trans_score = self.transitions[next_tag].view(1, -1)
                # the ith entry of next_tag_var is the value for the
                # edge (i -> next_tag) before we do log-sum-exp
                next_tag_var = forward_var + trans_score + emit_score
                # the forward variable for this tag is log-sum-exp of all the
                # scores.
                alphas_t.append(log_sum_exp(next_tag_var).view(1))
            forward_var = torch.cat(alphas_t).view(1, -1)
        terminal_var = forward_var + self.transitions[self.tag_to_ix[stop_tag]]
        alpha = log_sum_exp(terminal_var)
        return alpha

    def _get_lstm_features(self, sentence):
        self.hidden = self.init_hidden()
        embeds = self.word_embeds(sentence).view(len(sentence), 1, -1)
        lstm_out, self.hidden = self.lstm(embeds, self.hidden)
        lstm_out = lstm_out.view(len(sentence), self.hidden_dim)
        lstm_feats = self.hidden2tag(lstm_out)
        return lstm_feats

    def _score_sentence(self, feats, tags):
        # gives the score of a provided tag sequence
        score = torch.zeros(1)
        tags = torch.cat([torch.tensor([self.tag_to_ix[start_tag]], dtype=torch.
long), tags])
        for i, feat in enumerate(feats):
            score = score + \
                self.transitions[tags[i + 1], tags[i]] + feat[tags[i + 1]]
        score = score + self.transitions[self.tag_to_ix[stop_tag], tags[-1]]
        return score

    def _viterbi_decode(self, feats):
        backpointers = []

        # initialize the viterbi variables in log space
        init_vvars = torch.full((1, self.tagset_size), -10000.)
        init_vvars[0][self.tag_to_ix[start_tag]] = 0

        # forward_var at step i holds the viterbi variables for step i-1
        forward_var = init_vvars
        for feat in feats:
            bptrs_t = []  # holds the backpointers for this step
            viterbivars_t = []  # holds the viterbi variables for this step

            for next_tag in range(self.tagset_size):
                # next_tag_var[i] holds the viterbi variable for tag i at the
                # previous step, plus the score of transitioning
                # from tag i to next_tag.
                # we don't include the emission scores here because the max
                # does not depend on them (we add them in below)
                next_tag_var = forward_var + self.transitions[next_tag]
                best_tag_id = argmax(next_tag_var)
                bptrs_t.append(best_tag_id)
                viterbivars_t.append(next_tag_var[0][best_tag_id].view(1))
            # now add in the emission scores, and assign forward_var to the set
            # of viterbi variables we just computed
            forward_var = (torch.cat(viterbivars_t) + feat).view(1, -1)
            backpointers.append(bptrs_t)

        # transition to stop_tag
        terminal_var = forward_var + self.transitions[self.tag_to_ix[stop_tag]]
        best_tag_id = argmax(terminal_var)
        path_score = terminal_var[0][best_tag_id]

        # follow the back pointers to decode the best path.
        best_path = [best_tag_id]
        for bptrs_t in reversed(backpointers):
            best_tag_id = bptrs_t[best_tag_id]
            best_path.append(best_tag_id)
        # pop off the start tag (we dont want to return that to the caller)
        start = best_path.pop()
        assert start == self.tag_to_ix[start_tag]  # sanity check
        best_path.reverse()
        return path_score, best_path

    def neg_log_likelihood(self, sentence, tags):
        feats = self._get_lstm_features(sentence)
        forward_score = self._forward_alg(feats)
        gold_score = self._score_sentence(feats, tags)
        return forward_score - gold_score

    def forward(self, sentence):  # dont confuse this with _forward_alg above.
        # get the emission scores from the bilstm
        lstm_feats = self._get_lstm_features(sentence)

        # find the best path, given the features.
        score, tag_seq = self._viterbi_decode(lstm_feats)
        return score, tag_seq

   run training
start_tag = "<start>"
stop_tag = "<stop>"
embedding_dim = 5
hidden_dim = 4

# make up some training data
training_data = [(
    "the wall street journal reported today that apple corporation made money".s
plit(),
    "b i i i o o o b i o o".split()
), (
    "georgia tech is a university in georgia".split(),
    "b i o o o o b".split()
)]

word_to_ix = {}
for sentence, tags in training_data:
    for word in sentence:
        if word not in word_to_ix:
            word_to_ix[word] = len(word_to_ix)

tag_to_ix = {"b": 0, "i": 1, "o": 2, start_tag: 3, stop_tag: 4}

model = bilstm_crf(len(word_to_ix), tag_to_ix, embedding_dim, hidden_dim)
optimizer = optim.sgd(model.parameters(), lr=0.01, weight_decay=1e-4)

# check predictions before training
with torch.no_grad():
    precheck_sent = prepare_sequence(training_data[0][0], word_to_ix)
    precheck_tags = torch.tensor([tag_to_ix[t] for t in training_data[0][1]], dt
ype=torch.long)
    print(model(precheck_sent))

# make sure prepare_sequence from earlier in the lstm section is loaded
for epoch in range(
        300):  # again, normally you would not do 300 epochs, it is toy data
    for sentence, tags in training_data:
        # step 1. remember that pytorch accumulates gradients.
        # we need to clear them out before each instance
        model.zero_grad()

        # step 2. get our inputs ready for the network, that is,
        # turn them into tensors of word indices.
        sentence_in = prepare_sequence(sentence, word_to_ix)
        targets = torch.tensor([tag_to_ix[t] for t in tags], dtype=torch.long)

        # step 3. run our forward pass.
        loss = model.neg_log_likelihood(sentence_in, targets)

        # step 4. compute the loss, gradients, and update the parameters by
        # calling optimizer.step()
        loss.backward()
        optimizer.step()

# check predictions after training
with torch.no_grad():
    precheck_sent = prepare_sequence(training_data[0][0], word_to_ix)
    print(model(precheck_sent))
# we got it!

   out:
(tensor(2.6907), [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1])
(tensor(20.4906), [0, 1, 1, 1, 2, 2, 2, 0, 1, 2, 2])

exercise: a new id168 for discriminative tagging[50]  

   it wasn   t really necessary for us to create a computation graph when
   doing decoding, since we do not backpropagate from the viterbi path
   score. since we have it anyway, try training the tagger where the loss
   function is the difference between the viterbi path score and the score
   of the gold-standard path. it should be clear that this function is
   non-negative and 0 when the predicted tag sequence is the correct tag
   sequence. this is essentially structured id88.

   this modification should be short, since viterbi and score_sentence are
   already implemented. this is an example of the shape of the computation
   graph depending on the training instance. although i haven   t tried
   implementing this in a static toolkit, i imagine that it is possible
   but much less straightforward.

   pick up some real data and do a comparison!

   total running time of the script: ( 0 minutes 23.601 seconds)
   [51]download python source code: advanced_tutorial.py
   [52]download jupyter notebook: advanced_tutorial.ipynb

   [53]gallery generated by sphinx-gallery

   [54]next [chevron-right-orange.svg] [55][chevron-right-orange.svg]
   previous
     __________________________________________________________________

   was this helpful?
   yes
   no
   thank you
     __________________________________________________________________

      copyright 2017, pytorch.
   built with [56]sphinx using a [57]theme provided by [58]read the docs.
     * [59]advanced: making dynamic decisions and the bi-lstm crf
          + [60]dynamic versus static deep learning toolkits
          + [61]bi-lstm conditional random field discussion
          + [62]implementation notes
          + [63]exercise: a new id168 for discriminative tagging

   [tr?id=243028289693773&amp;ev=pageview &amp;noscript=1]

docs

   access comprehensive developer documentation for pytorch
   [64]view docs

tutorials

   get in-depth tutorials for beginners and advanced developers
   [65]view tutorials

resources

   find development resources and get your questions answered
   [66]view resources

     * [67]pytorch
     * [68]get started
     * [69]features
     * [70]ecosystem
     * [71]blog
     * [72]resources

     * [73]support
     * [74]tutorials
     * [75]docs
     * [76]discuss
     * [77]github issues
     * [78]slack
     * [79]contributing

     * follow us
     * email address ____________________
       ____________________
       submit

   to analyze traffic and optimize your experience, we serve cookies on
   this site. by clicking or navigating, you agree to allow our usage of
   cookies. as the current maintainers of this site, facebook   s cookies
   policy applies. learn more, including about available controls:
   [80]cookies policy.
   [pytorch-x.svg]

     * [81]get started
     * [82]features
     * [83]ecosystem
     * [84]blog
     * [85]tutorials
     * [86]docs
     * [87]resources
     * [88]github

references

   visible links
   1. https://pytorch.org/tutorials/genindex.html
   2. https://pytorch.org/tutorials/search.html
   3. https://pytorch.org/tutorials/intermediate/id195_translation_tutorial.html
   4. https://pytorch.org/tutorials/beginner/nlp/sequence_models_tutorial.html
   5. https://pytorch.org/get-started
   6. https://pytorch.org/features
   7. https://pytorch.org/ecosystem
   8. https://pytorch.org/blog/
   9. https://pytorch.org/tutorials
  10. https://pytorch.org/docs/stable/index.html
  11. https://pytorch.org/resources
  12. https://github.com/pytorch/pytorch
  13. https://pytorch.org/tutorials/beginner/deep_learning_60min_blitz.html
  14. https://pytorch.org/tutorials/beginner/data_loading_tutorial.html
  15. https://pytorch.org/tutorials/beginner/pytorch_with_examples.html
  16. https://pytorch.org/tutorials/beginner/transfer_learning_tutorial.html
  17. https://pytorch.org/tutorials/beginner/deploy_id195_hybrid_frontend_tutorial.html
  18. https://pytorch.org/tutorials/beginner/saving_loading_models.html
  19. https://pytorch.org/tutorials/beginner/nn_tutorial.html
  20. https://pytorch.org/tutorials/beginner/finetuning_torchvision_models_tutorial.html
  21. https://pytorch.org/tutorials/intermediate/spatial_transformer_tutorial.html
  22. https://pytorch.org/tutorials/advanced/neural_style_tutorial.html
  23. https://pytorch.org/tutorials/beginner/fgsm_tutorial.html
  24. https://pytorch.org/tutorials/advanced/super_resolution_with_caffe2.html
  25. https://pytorch.org/tutorials/beginner/chatbot_tutorial.html
  26. https://pytorch.org/tutorials/intermediate/char_id56_generation_tutorial.html
  27. https://pytorch.org/tutorials/intermediate/char_id56_classification_tutorial.html
  28. https://pytorch.org/tutorials/beginner/deep_learning_nlp_tutorial.html
  29. https://pytorch.org/tutorials/intermediate/id195_translation_tutorial.html
  30. https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html
  31. https://pytorch.org/tutorials/intermediate/reinforcement_q_learning.html
  32. https://pytorch.org/tutorials/advanced/numpy_extensions_tutorial.html
  33. https://pytorch.org/tutorials/advanced/cpp_extension.html
  34. https://pytorch.org/tutorials/advanced/torch_script_custom_ops.html
  35. https://pytorch.org/tutorials/intermediate/dist_tuto.html
  36. https://pytorch.org/tutorials/beginner/aws_distributed_training_tutorial.html
  37. https://pytorch.org/tutorials/advanced/onnxlive.html
  38. https://pytorch.org/tutorials/advanced/cpp_export.html
  39. https://pytorch.org/tutorials/advanced/cpp_frontend.html
  40. https://pytorch.org/tutorials/index.html
  41. https://pytorch.org/tutorials/beginner/deep_learning_nlp_tutorial.html
  42. https://pytorch.org/tutorials/_sources/beginner/nlp/advanced_tutorial.rst.txt
  43. https://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html#sphx-glr-download-beginner-nlp-advanced-tutorial-py
  44. https://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html#advanced-making-dynamic-decisions-and-the-bi-lstm-crf
  45. https://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html#dynamic-versus-static-deep-learning-toolkits
  46. https://github.com/clab/dynet
  47. https://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html#bi-lstm-conditional-random-field-discussion
  48. http://www.cs.columbia.edu/~mcollins/crf.pdf
  49. https://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html#implementation-notes
  50. https://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html#exercise-a-new-loss-function-for-discriminative-tagging
  51. https://pytorch.org/tutorials/_downloads/a2291799554f898f27a7cc6043d9c324/advanced_tutorial.py
  52. https://pytorch.org/tutorials/_downloads/b3265db81c2bf86cc3e2b0dcdaddc850/advanced_tutorial.ipynb
  53. https://sphinx-gallery.readthedocs.io/
  54. https://pytorch.org/tutorials/intermediate/id195_translation_tutorial.html
  55. https://pytorch.org/tutorials/beginner/nlp/sequence_models_tutorial.html
  56. http://sphinx-doc.org/
  57. https://github.com/rtfd/sphinx_rtd_theme
  58. https://readthedocs.org/
  59. https://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html
  60. https://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html#dynamic-versus-static-deep-learning-toolkits
  61. https://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html#bi-lstm-conditional-random-field-discussion
  62. https://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html#implementation-notes
  63. https://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html#exercise-a-new-loss-function-for-discriminative-tagging
  64. https://pytorch.org/docs/stable/index.html
  65. https://pytorch.org/tutorials
  66. https://pytorch.org/resources
  67. https://pytorch.org/
  68. https://pytorch.org/get-started
  69. https://pytorch.org/features
  70. https://pytorch.org/ecosystem
  71. https://pytorch.org/blog/
  72. https://pytorch.org/resources
  73. https://pytorch.org/support
  74. https://pytorch.org/tutorials
  75. https://pytorch.org/docs/stable/index.html
  76. https://discuss.pytorch.org/
  77. https://github.com/pytorch/pytorch/issues
  78. https://pytorch.slack.com/
  79. https://github.com/pytorch/pytorch/blob/master/contributing.md
  80. https://www.facebook.com/policies/cookies/
  81. https://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html
  82. https://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html
  83. https://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html
  84. https://pytorch.org/blog/
  85. https://pytorch.org/tutorials
  86. https://pytorch.org/docs/stable/index.html
  87. https://pytorch.org/resources
  88. https://github.com/pytorch/pytorch

   hidden links:
  90. https://pytorch.org/
  91. https://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html
  92. https://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html
  93. https://pytorch.org/
  94. https://www.facebook.com/pytorch
  95. https://twitter.com/pytorch
  96. https://pytorch.org/
  97. https://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html
