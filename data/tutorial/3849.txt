   (button) toggle navigation
   [1][nav_logo.svg?v=479cefe8d932fb14a67b93911b97d70f]
     * [2]jupyter
     * [3]faq
     * [4]view as code
     * [5]python 2 kernel
     * [6]view on github
     * [7]execute on binder
     * [8]download notebook

    1. [9]numerical-python-book-code
    2. [10]ch12-code-listing.ipynb

chapter 12: data processing and analysis with pandas[11]  

   robert johansson

   source code listings for [12]numerical python - a practical techniques
   approach for industry (isbn 978-1-484205-54-9).

   the source code listings can be downloaded from
   [13]http://www.apress.com/9781484205549
   in [1]:
%matplotlib inline
import matplotlib.pyplot as plt

   in [2]:
import numpy as np

   in [3]:
import pandas as pd

   in [4]:
pd.set_option('display.mpl_style', 'default')

series object[14]  

   in [5]:
s = pd.series([909976, 8615246, 2872086, 2273305])

   in [6]:
s

   out[6]:
0     909976
1    8615246
2    2872086
3    2273305
dtype: int64

   in [7]:
type(s)

   out[7]:
pandas.core.series.series

   in [8]:
s.dtype

   out[8]:
dtype('int64')

   in [9]:
s.index

   out[9]:
int64index([0, 1, 2, 3], dtype='int64')

   in [10]:
s.values

   out[10]:
array([ 909976, 8615246, 2872086, 2273305])

   in [11]:
s.index = ["stockholm", "london", "rome", "paris"]

   in [12]:
s.name = "population"

   in [13]:
s

   out[13]:
stockholm     909976
london       8615246
rome         2872086
paris        2273305
name: population, dtype: int64

   in [14]:
s = pd.series([909976, 8615246, 2872086, 2273305],
              index=["stockholm", "london", "rome", "paris"], name="population")

   in [15]:
s["london"]

   out[15]:
8615246

   in [16]:
s.stockholm

   out[16]:
909976

   in [17]:
s[["paris", "rome"]]

   out[17]:
paris    2273305
rome     2872086
name: population, dtype: int64

   in [18]:
s.median(), s.mean(), s.std()

   out[18]:
(2572695.5, 3667653.25, 3399048.5005155364)

   in [19]:
s.min(), s.max()

   out[19]:
(909976, 8615246)

   in [20]:
s.quantile(q=0.25), s.quantile(q=0.5), s.quantile(q=0.75)

   out[20]:
(1932472.75, 2572695.5, 4307876.0)

   in [21]:
s.describe()

   out[21]:
count          4.000000
mean     3667653.250000
std      3399048.500516
min       909976.000000
25%      1932472.750000
50%      2572695.500000
75%      4307876.000000
max      8615246.000000
name: population, dtype: float64

   in [22]:
fig, axes = plt.subplots(1, 4, figsize=(12, 3))

s.plot(ax=axes[0], kind='line', title="line")
s.plot(ax=axes[1], kind='bar', title="bar")
s.plot(ax=axes[2], kind='box', title="box")
s.plot(ax=axes[3], kind='pie', title="pie")

fig.tight_layout()
fig.savefig("ch12-series-plot.pdf")
fig.savefig("ch12-series-plot.png")

   [brjjjsugrkpsblb+u4kaadabpbcafhi+fllki4uvkndg9ls0isdv7xe3llzzqydaaaiuts
   q
   aqaaaiaqxjfbaaaaaahbfimaaaaaeiiobgeaaaagbfemagaaaeaiohgeaaaagbd0f14olxw
   v0lbk aaaaaelftksuqmcc ]

dataframe object[15]  

   in [23]:
df = pd.dataframe([[909976, 8615246, 2872086, 2273305],
                   ["sweden", "united kingdom", "italy", "france"]])

   in [24]:
df

   out[24]:
       0          1           2       3
   0 909976 8615246        2872086 2273305
   1 sweden united kingdom italy   france
   in [25]:
df = pd.dataframe([[909976, "sweden"],
                   [8615246, "united kingdom"],
                   [2872086, "italy"],
                   [2273305, "france"]])

   in [26]:
df

   out[26]:
        0          1
   0 909976  sweden
   1 8615246 united kingdom
   2 2872086 italy
   3 2273305 france
   in [27]:
df.index = ["stockholm", "london", "rome", "paris"]

   in [28]:
df.columns = ["population", "state"]

   in [29]:
df

   out[29]:
             population     state
   stockholm 909976     sweden
    london   8615246    united kingdom
     rome    2872086    italy
     paris   2273305    france
   in [30]:
df = pd.dataframe([[909976, "sweden"],
                   [8615246, "united kingdom"],
                   [2872086, "italy"],
                   [2273305, "france"]],
                  index=["stockholm", "london", "rome", "paris"],
                  columns=["population", "state"])

   in [31]:
df

   out[31]:
             population     state
   stockholm 909976     sweden
    london   8615246    united kingdom
     rome    2872086    italy
     paris   2273305    france
   in [32]:
df = pd.dataframe({"population": [909976, 8615246, 2872086, 2273305],
                   "state": ["sweden", "united kingdom", "italy", "france"]},
                  index=["stockholm", "london", "rome", "paris"])

   in [33]:
df

   out[33]:
             population     state
   stockholm 909976     sweden
    london   8615246    united kingdom
     rome    2872086    italy
     paris   2273305    france
   in [34]:
df.index

   out[34]:
index([u'stockholm', u'london', u'rome', u'paris'], dtype='object')

   in [35]:
df.columns

   out[35]:
index([u'population', u'state'], dtype='object')

   in [36]:
df.values

   out[36]:
array([[909976, 'sweden'],
       [8615246, 'united kingdom'],
       [2872086, 'italy'],
       [2273305, 'france']], dtype=object)

   in [37]:
df.population

   out[37]:
stockholm     909976
london       8615246
rome         2872086
paris        2273305
name: population, dtype: int64

   in [38]:
df["population"]

   out[38]:
stockholm     909976
london       8615246
rome         2872086
paris        2273305
name: population, dtype: int64

   in [39]:
type(df.population)

   out[39]:
pandas.core.series.series

   in [40]:
df.population.stockholm

   out[40]:
909976

   in [41]:
type(df.ix)

   out[41]:
pandas.core.indexing._ixindexer

   in [42]:
df.ix["stockholm"]

   out[42]:
population    909976
state         sweden
name: stockholm, dtype: object

   in [43]:
type(df.ix["stockholm"])

   out[43]:
pandas.core.series.series

   in [44]:
df.ix[["paris", "rome"]]

   out[44]:
         population state
   paris 2273305    france
   rome  2872086    italy
   in [45]:
df.ix[["paris", "rome"], "population"]

   out[45]:
paris    2273305
rome     2872086
name: population, dtype: int64

   in [46]:
df.ix["paris", "population"]

   out[46]:
2273305

   in [47]:
df.mean()

   out[47]:
population    3667653.25
dtype: float64

   in [48]:
df.info()

<class 'pandas.core.frame.dataframe'>
index: 4 entries, stockholm to paris
data columns (total 2 columns):
population    4 non-null int64
state         4 non-null object
dtypes: int64(1), object(1)
memory usage: 96.0+ bytes

   in [49]:
df.dtypes

   out[49]:
population     int64
state         object
dtype: object

   in [50]:
df.head()

   out[50]:
             population     state
   stockholm 909976     sweden
    london   8615246    united kingdom
     rome    2872086    italy
     paris   2273305    france
   in [51]:
!head -n5 /home/rob/datasets/european_cities.csv

rank,city,state,official population,date of census/estimate
1,london[2], united kingdom,"8,615,246",1 june 2014
2,berlin, germany,"3,437,916",31 may 2014
3,madrid, spain,"3,165,235",1 january 2014
4,rome, italy,"2,872,086",30 september 2014

larger dataset[16]  

   in [52]:
df_pop = pd.read_csv("european_cities.csv")

   in [53]:
df_pop.head()

   out[53]:
     rank   city        state      population date of census/estimate
   0 1    london[2] united kingdom 8,615,246  1 june 2014
   1 2    berlin    germany        3,437,916  31 may 2014
   2 3    madrid    spain          3,165,235  1 january 2014
   3 4    rome      italy          2,872,086  30 september 2014
   4 5    paris     france         2,273,305  1 january 2013
   in [54]:
df_pop = pd.read_csv("european_cities.csv", delimiter=",", encoding="utf-8", hea
der=0)

   in [55]:
df_pop.info()

<class 'pandas.core.frame.dataframe'>
int64index: 105 entries, 0 to 104
data columns (total 5 columns):
rank                       105 non-null int64
city                       105 non-null object
state                      105 non-null object
population                 105 non-null object
date of census/estimate    105 non-null object
dtypes: int64(1), object(4)
memory usage: 4.9+ kb

   in [56]:
df_pop.head()

   out[56]:
     rank   city        state      population date of census/estimate
   0 1    london[2] united kingdom 8,615,246  1 june 2014
   1 2    berlin    germany        3,437,916  31 may 2014
   2 3    madrid    spain          3,165,235  1 january 2014
   3 4    rome      italy          2,872,086  30 september 2014
   4 5    paris     france         2,273,305  1 january 2013
   in [57]:
df_pop["numericpopulation"] = df_pop.population.apply(lambda x: int(x.replace(",
", "")))

   in [58]:
df_pop["state"].values[:3]

   out[58]:
array([u' united kingdom', u' germany', u' spain'], dtype=object)

   in [59]:
df_pop["state"] = df_pop["state"].apply(lambda x: x.strip())

   in [60]:
df_pop.head()

   out[60]:
   rank city state population date of census/estimate numericpopulation
   0 1 london[2] united kingdom 8,615,246 1 june 2014 8615246
   1 2 berlin germany 3,437,916 31 may 2014 3437916
   2 3 madrid spain 3,165,235 1 january 2014 3165235
   3 4 rome italy 2,872,086 30 september 2014 2872086
   4 5 paris france 2,273,305 1 january 2013 2273305
   in [61]:
df_pop.dtypes

   out[61]:
rank                        int64
city                       object
state                      object
population                 object
date of census/estimate    object
numericpopulation           int64
dtype: object

   in [62]:
df_pop2 = df_pop.set_index("city")

   in [63]:
df_pop2 = df_pop2.sort_index()

   in [64]:
df_pop2.head()

   out[64]:
           rank    state    population date of census/estimate numericpopulation
   city
  aarhus   92   denmark     326,676    1 october 2014          326676
 alicante  86   spain       334,678    1 january 2012          334678
 amsterdam 23   netherlands 813,562    31 may 2014             813562
  antwerp  59   belgium     510,610    1 january 2014          510610
  athens   34   greece      664,046    24 may 2011             664046
   in [65]:
df_pop2.head()

   out[65]:
           rank    state    population date of census/estimate numericpopulation
   city
  aarhus   92   denmark     326,676    1 october 2014          326676
 alicante  86   spain       334,678    1 january 2012          334678
 amsterdam 23   netherlands 813,562    31 may 2014             813562
  antwerp  59   belgium     510,610    1 january 2014          510610
  athens   34   greece      664,046    24 may 2011             664046
   in [66]:
df_pop3 = df_pop.set_index(["state", "city"]).sortlevel(0)

   in [67]:
df_pop3.head(7)

   out[67]:
                       rank population date of census/estimate numericpopulation
  state       city
 austria     vienna    7    1,794,770  1 january 2015          1794770
 belgium    antwerp    59   510,610    1 january 2014          510610
          brussels[17] 16   1,175,831  1 january 2014          1175831
 bulgaria   plovdiv    84   341,041    31 december 2013        341041
             sofia     14   1,291,895  14 december 2014        1291895
             varna     85   335,819    31 december 2013        335819
 croatia     zagreb    24   790,017    31 march 2011           790017
   in [68]:
df_pop3.ix["sweden"]

   out[68]:
              rank population date of census/estimate numericpopulation
      city
   gothenburg 53   528,014    31 march 2013           528014
     malm      102  309,105    31 march 2013           309105
   stockholm  20   909,976    31 january 2014         909976
   in [69]:
df_pop3.ix[("sweden", "gothenburg")]

   out[69]:
rank                                  53
population                       528,014
date of census/estimate    31 march 2013
numericpopulation                 528014
name: (sweden, gothenburg), dtype: object

   in [70]:
df_pop.set_index("city").sort(["state", "numericpopulation"], ascending=[false,
true]).head()

   out[70]:
   rank state population date of census/estimate numericpopulation
   city
   nottingham 103 united kingdom 308,735 30 june 2012 308735
   wirral 97 united kingdom 320,229 30 june 2012 320229
   coventry 94 united kingdom 323,132 30 june 2012 323132
   wakefield 91 united kingdom 327,627 30 june 2012 327627
   leicester 87 united kingdom 331,606 30 june 2012 331606
   in [71]:
city_counts = df_pop.state.value_counts()

   in [72]:
city_counts.name = "# cities in top 105"

   in [73]:
df_pop3 = df_pop[["state", "city", "numericpopulation"]].set_index(["state", "ci
ty"])

   in [74]:
df_pop4 = df_pop3.sum(level="state").sort("numericpopulation", ascending=false)

   in [75]:
df_pop4.head()

   out[75]:
                  numericpopulation
       state
   united kingdom 16011877
      germany     15119548
       spain      10041639
       italy      8764067
       poland     6267409
   in [76]:
df_pop5 = (df_pop.drop("rank", axis=1)
                 .groupby("state").sum()
                 .sort("numericpopulation", ascending=false))

   in [77]:
df_pop5.head()

   out[77]:
                  numericpopulation
       state
   united kingdom 16011877
      germany     15119548
       spain      10041639
       italy      8764067
       poland     6267409
   in [78]:
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))

city_counts.plot(kind='barh', ax=ax1)
ax1.set_xlabel("# cities in top 105")
df_pop5.numericpopulation.plot(kind='barh', ax=ax2)
ax2.set_xlabel("total pop. in top 105 cities")

fig.tight_layout()
fig.savefig("ch12-state-city-counts-sum.pdf")

   [j7zgaaaabjru5erkjggg== ]

time series[17]  

basics[18]  

   in [79]:
import datetime

   in [80]:
pd.date_range("2015-1-1", periods=31)

   out[80]:
datetimeindex(['2015-01-01', '2015-01-02', '2015-01-03', '2015-01-04',
               '2015-01-05', '2015-01-06', '2015-01-07', '2015-01-08',
               '2015-01-09', '2015-01-10', '2015-01-11', '2015-01-12',
               '2015-01-13', '2015-01-14', '2015-01-15', '2015-01-16',
               '2015-01-17', '2015-01-18', '2015-01-19', '2015-01-20',
               '2015-01-21', '2015-01-22', '2015-01-23', '2015-01-24',
               '2015-01-25', '2015-01-26', '2015-01-27', '2015-01-28',
               '2015-01-29', '2015-01-30', '2015-01-31'],
              dtype='datetime64[ns]', freq='d', tz=none)

   in [81]:
pd.date_range(datetime.datetime(2015, 1, 1), periods=31)

   out[81]:
datetimeindex(['2015-01-01', '2015-01-02', '2015-01-03', '2015-01-04',
               '2015-01-05', '2015-01-06', '2015-01-07', '2015-01-08',
               '2015-01-09', '2015-01-10', '2015-01-11', '2015-01-12',
               '2015-01-13', '2015-01-14', '2015-01-15', '2015-01-16',
               '2015-01-17', '2015-01-18', '2015-01-19', '2015-01-20',
               '2015-01-21', '2015-01-22', '2015-01-23', '2015-01-24',
               '2015-01-25', '2015-01-26', '2015-01-27', '2015-01-28',
               '2015-01-29', '2015-01-30', '2015-01-31'],
              dtype='datetime64[ns]', freq='d', tz=none)

   in [82]:
pd.date_range("2015-1-1 00:00", "2015-1-1 12:00", freq="h")

   out[82]:
datetimeindex(['2015-01-01 00:00:00', '2015-01-01 01:00:00',
               '2015-01-01 02:00:00', '2015-01-01 03:00:00',
               '2015-01-01 04:00:00', '2015-01-01 05:00:00',
               '2015-01-01 06:00:00', '2015-01-01 07:00:00',
               '2015-01-01 08:00:00', '2015-01-01 09:00:00',
               '2015-01-01 10:00:00', '2015-01-01 11:00:00',
               '2015-01-01 12:00:00'],
              dtype='datetime64[ns]', freq='h', tz=none)

   in [83]:
ts1 = pd.series(np.arange(31), index=pd.date_range("2015-1-1", periods=31))

   in [84]:
ts1.head()

   out[84]:
2015-01-01    0
2015-01-02    1
2015-01-03    2
2015-01-04    3
2015-01-05    4
freq: d, dtype: int64

   in [85]:
ts1["2015-1-3"]

   out[85]:
2

   in [86]:
ts1.index[2]

   out[86]:
timestamp('2015-01-03 00:00:00', offset='d')

   in [87]:
ts1.index[2].year, ts1.index[2].month, ts1.index[2].day

   out[87]:
(2015, 1, 3)

   in [88]:
ts1.index[2].nanosecond

   out[88]:
0

   in [89]:
ts1.index[2].to_pydatetime()

   out[89]:
datetime.datetime(2015, 1, 3, 0, 0)

   in [90]:
ts2 = pd.series(np.random.rand(2),
                index=[datetime.datetime(2015, 1, 1), datetime.datetime(2015, 2,
 1)])

   in [91]:
ts2

   out[91]:
2015-01-01    0.323774
2015-02-01    0.636933
dtype: float64

   in [92]:
periods = pd.periodindex([pd.period('2015-01'), pd.period('2015-02'), pd.period(
'2015-03')])

   in [93]:
ts3 = pd.series(np.random.rand(3), periods)

   in [94]:
ts3

   out[94]:
2015-01    0.023390
2015-02    0.998680
2015-03    0.451616
freq: m, dtype: float64

   in [95]:
ts3.index

   out[95]:
periodindex(['2015-01', '2015-02', '2015-03'], dtype='int64', freq='m')

   in [96]:
ts2.to_period('m')

   out[96]:
2015-01    0.323774
2015-02    0.636933
freq: m, dtype: float64

   in [97]:
pd.date_range("2015-1-1", periods=12, freq="m").to_period()

   out[97]:
periodindex(['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06',
             '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12'],
            dtype='int64', freq='m')

temperature time series example[19]  

   in [98]:
!head -n 5 temperature_outdoor_2014.tsv

1388530986      4.380000
1388531586      4.250000
1388532187      4.190000
1388532787      4.060000
1388533388      4.060000

   in [99]:
df1 = pd.read_csv('temperature_outdoor_2014.tsv', delimiter="\t", names=["time",
 "outdoor"])

   in [100]:
df2 = pd.read_csv('temperature_indoor_2014.tsv', delimiter="\t", names=["time",
"indoor"])

   in [101]:
df1.head()

   out[101]:
        time    outdoor
   0 1388530986 4.38
   1 1388531586 4.25
   2 1388532187 4.19
   3 1388532787 4.06
   4 1388533388 4.06
   in [102]:
df2.head()

   out[102]:
        time    indoor
   0 1388530986 21.94
   1 1388531586 22.00
   2 1388532187 22.00
   3 1388532787 22.00
   4 1388533388 22.00
   in [103]:
df1.time = (pd.to_datetime(df1.time.values, unit="s")
              .tz_localize('utc').tz_convert('europe/stockholm'))

   in [104]:
df1 = df1.set_index("time")

   in [105]:
df2.time = (pd.to_datetime(df2.time.values, unit="s")
              .tz_localize('utc').tz_convert('europe/stockholm'))

   in [106]:
df2 = df2.set_index("time")

   in [107]:
df1.head()

   out[107]:
                             outdoor
             time
   2014-01-01 00:03:06+01:00 4.38
   2014-01-01 00:13:06+01:00 4.25
   2014-01-01 00:23:07+01:00 4.19
   2014-01-01 00:33:07+01:00 4.06
   2014-01-01 00:43:08+01:00 4.06
   in [108]:
df1.index[0]

   out[108]:
timestamp('2014-01-01 00:03:06+0100', tz='europe/stockholm')

   in [109]:
fig, ax = plt.subplots(1, 1, figsize=(12, 4))
df1.plot(ax=ax)
df2.plot(ax=ax)

fig.tight_layout()
fig.savefig("ch12-timeseries-temperature-2014.pdf")

   [j9dhlvnvwvaagaaaabjru5erkjggg== ]
   in [110]:
# select january data

   in [111]:
df1.info()

<class 'pandas.core.frame.dataframe'>
datetimeindex: 49548 entries, 2014-01-01 00:03:06+01:00 to 2014-12-30 23:56:35+0
1:00
data columns (total 1 columns):
outdoor    49548 non-null float64
dtypes: float64(1)
memory usage: 774.2 kb

   in [112]:
df1_jan = df1[(df1.index > "2014-1-1") & (df1.index < "2014-2-1")]

   in [113]:
df1.index < "2014-2-1"

   out[113]:
array([ true,  true,  true, ..., false, false, false], dtype=bool)

   in [114]:
df1_jan.info()

<class 'pandas.core.frame.dataframe'>
datetimeindex: 4452 entries, 2014-01-01 00:03:06+01:00 to 2014-01-31 23:56:58+01
:00
data columns (total 1 columns):
outdoor    4452 non-null float64
dtypes: float64(1)
memory usage: 69.6 kb

   in [115]:
df2_jan = df2["2014-1-1":"2014-1-31"]

   in [116]:
fig, ax = plt.subplots(1, 1, figsize=(12, 4))

df1_jan.plot(ax=ax)
df2_jan.plot(ax=ax)

fig.tight_layout()
fig.savefig("ch12-timeseries-selected-month.pdf")

   [aokpcey5nrgaaaabjru5erkjg gg== ]
   in [117]:
# group by month

   in [118]:
df1_month = df1.reset_index()

   in [119]:
df1_month["month"] = df1_month.time.apply(lambda x: x.month)

   in [120]:
df1_month.head()

   out[120]:
               time            outdoor month
   0 2014-01-01 00:03:06+01:00 4.38    1
   1 2014-01-01 00:13:06+01:00 4.25    1
   2 2014-01-01 00:23:07+01:00 4.19    1
   3 2014-01-01 00:33:07+01:00 4.06    1
   4 2014-01-01 00:43:08+01:00 4.06    1
   in [121]:
df1_month = df1_month.groupby("month").aggregate(np.mean)

   in [122]:
df2_month = df2.reset_index()

   in [123]:
df2_month["month"] = df2_month.time.apply(lambda x: x.month)

   in [124]:
df2_month = df2_month.groupby("month").aggregate(np.mean)

   in [125]:
df_month = df1_month.join(df2_month)

   in [126]:
df_month.head(3)

   out[126]:
          outdoor   indoor
   month
     1   -1.776646 19.862590
     2   2.231613  20.231507
     3   4.615437  19.597748
   in [127]:
df_month = pd.concat([df.to_period("m").groupby(level=0).mean() for df in [df1,
df2]], axis=1)

   in [128]:
df_month.head(3)

   out[128]:
            outdoor   indoor
    time
   2014-01 -1.776646 19.862590
   2014-02 2.231613  20.231507
   2014-03 4.615437  19.597748
   in [129]:
fig, axes = plt.subplots(1, 2, figsize=(12, 4))

df_month.plot(kind='bar', ax=axes[0])
df_month.plot(kind='box', ax=axes[1])

fig.tight_layout()
fig.savefig("ch12-grouped-by-month.pdf")

   [4aaaaaelftksuqmcc ]
   in [130]:
df_month

   out[130]:
            outdoor   indoor
    time
   2014-01 -1.776646 19.862590
   2014-02 2.231613  20.231507
   2014-03 4.615437  19.597748
   2014-04 8.105193  22.149754
   2014-05 12.261396 26.332160
   2014-06 15.586955 28.687491
   2014-07 20.780314 30.605333
   2014-08 16.494823 28.099068
   2014-09 12.823905 26.950366
   2014-10 9.352000  23.379460
   2014-11 4.992142  20.610365
   2014-12 -0.058940 16.465674
   in [131]:
# resampling

   in [132]:
df1_hour = df1.resample("h")

   in [133]:
df1_hour.columns = ["outdoor (hourly avg.)"]

   in [134]:
df1_day = df1.resample("d")

   in [135]:
df1_day.columns = ["outdoor (daily avg.)"]

   in [136]:
df1_week = df1.resample("7d")

   in [137]:
df1_week.columns = ["outdoor (weekly avg.)"]

   in [138]:
df1_month = df1.resample("m")

   in [139]:
df1_month.columns = ["outdoor (monthly avg.)"]

   in [140]:
df_diff = (df1.resample("d").outdoor - df2.resample("d").indoor)

   in [141]:
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 6))

df1_hour.plot(ax=ax1, alpha=0.25)
df1_day.plot(ax=ax1)
df1_week.plot(ax=ax1)
df1_month.plot(ax=ax1)

df_diff.plot(ax=ax2)
ax2.set_title("temperature difference between outdoor and indoor")

fig.tight_layout()
fig.savefig("ch12-timeseries-resampled.pdf")

   [x8jqfko9ijknqaaaabjru5erkjg gg== ]
   in [142]:
fill_methods = [none, 'ffill', 'bfill']

   in [143]:
pd.concat([df1.resample("5min", fill_method=fm).rename(columns={"outdoor": fm})
           for fm in fill_methods], axis=1).head()

   out[143]:
                             none ffill bfill
             time
   2014-01-01 00:00:00+01:00 4.38 4.38  4.38
   2014-01-01 00:05:00+01:00 nan  4.38  4.25
   2014-01-01 00:10:00+01:00 4.25 4.25  4.25
   2014-01-01 00:15:00+01:00 nan  4.25  4.19
   2014-01-01 00:20:00+01:00 4.19 4.19  4.19

selected day[20]  

   in [144]:
df1_dec25 = df1[(df1.index < "2014-9-1") & (df1.index >= "2014-8-1")].resample("
d")

   in [145]:
df1_dec25 = df1.ix["2014-12-25"]

   in [146]:
df1_dec25.head(5)

   out[146]:
                             outdoor
             time
   2014-12-25 00:01:45+01:00 -4.88
   2014-12-25 00:11:45+01:00 -4.94
   2014-12-25 00:21:46+01:00 -5.06
   2014-12-25 00:31:47+01:00 -5.06
   2014-12-25 00:41:47+01:00 -5.12
   in [147]:
df2_dec25 = df2.ix["2014-12-25"]

   in [148]:
df2_dec25.head(5)

   out[148]:
                             indoor
             time
   2014-12-25 00:01:45+01:00 16.31
   2014-12-25 00:11:45+01:00 16.25
   2014-12-25 00:21:46+01:00 16.31
   2014-12-25 00:31:47+01:00 16.31
   2014-12-25 00:41:47+01:00 16.25
   in [149]:
df1_dec25.describe().t

   out[149]:
           count   mean      std     min    25%    50%    75%    max
   outdoor 144   -7.788819 1.456085 -10.06 -9.075 -7.75 -6.8625 -4.88
   in [150]:
fig, ax = plt.subplots(1, 1, figsize=(12, 4))

df1_dec25.plot(ax=ax)

fig.savefig("ch12-timeseries-selected-month.pdf")

   [qopontrozi56gaaaabjru5erkjggg== ]
   in [151]:
df1.index

   out[151]:
datetimeindex(['2014-01-01 00:03:06+01:00', '2014-01-01 00:13:06+01:00',
               '2014-01-01 00:23:07+01:00', '2014-01-01 00:33:07+01:00',
               '2014-01-01 00:43:08+01:00', '2014-01-01 00:53:08+01:00',
               '2014-01-01 01:03:09+01:00', '2014-01-01 01:13:09+01:00',
               '2014-01-01 01:23:10+01:00', '2014-01-01 01:33:26+01:00',
               ...
               '2014-12-30 22:26:30+01:00', '2014-12-30 22:36:31+01:00',
               '2014-12-30 22:46:31+01:00', '2014-12-30 22:56:32+01:00',
               '2014-12-30 23:06:32+01:00', '2014-12-30 23:16:33+01:00',
               '2014-12-30 23:26:33+01:00', '2014-12-30 23:36:34+01:00',
               '2014-12-30 23:46:35+01:00', '2014-12-30 23:56:35+01:00'],
              dtype='datetime64[ns]', name=u'time', length=49548, freq=none, tz=
'europe/stockholm')

seaborn statistical visualization library[21]  

   in [152]:
import seaborn as sns

   in [153]:
sns.set(style="darkgrid")

   in [154]:
#sns.set(style="whitegrid")

   in [155]:
df1 = pd.read_csv('temperature_outdoor_2014.tsv', delimiter="\t", names=["time",
 "outdoor"])
df1.time = pd.to_datetime(df1.time.values, unit="s").tz_localize('utc').tz_conve
rt('europe/stockholm')
df1 = df1.set_index("time").resample("10min")
df2 = pd.read_csv('temperature_indoor_2014.tsv', delimiter="\t", names=["time",
"indoor"])
df2.time = pd.to_datetime(df2.time.values, unit="s").tz_localize('utc').tz_conve
rt('europe/stockholm')
df2 = df2.set_index("time").resample("10min")
df_temp = pd.concat([df1, df2], axis=1)

   in [156]:
fig, ax = plt.subplots(1, 1, figsize=(8, 4))
df_temp.resample("d").plot(y=["outdoor", "indoor"], ax=ax)
fig.tight_layout()
fig.savefig("ch12-seaborn-plot.pdf")

   [woxvy6pum8+ jaaaaabjru5erkjggg== ]
   in [157]:
#sns.kdeplot(df_temp["outdoor"].dropna().values, shade=true, cumulative=true);

   in [158]:
sns.distplot(df_temp.to_period("m")["outdoor"]["2014-04"].dropna().values, bins=
50);
sns.distplot(df_temp.to_period("m")["indoor"]["2014-04"].dropna().values, bins=5
0);

plt.savefig("ch12-seaborn-distplot.pdf")

   [gw5fksaaaaabjru5erkjggg== ]
   in [159]:
with sns.axes_style("white"):
    sns.jointplot(df_temp.resample("h")["outdoor"].values,
                  df_temp.resample("h")["indoor"].values, kind="hex");

plt.savefig("ch12-seaborn-jointplot.pdf")

   [yiigonbiyiigovbiyiigovbiy
   iigovbiyiigovbiyiigovbiyiigovp4cenfrzwvhtzkaaaaasuvork5cyii= ]
   in [160]:
sns.kdeplot(df_temp.resample("h")["outdoor"].dropna().values,
            df_temp.resample("h")["indoor"].dropna().values, shade=false);

plt.savefig("ch12-seaborn-kdeplot.pdf")

   [whqtpymfnlxmqaaaabjru5erkjggg== ]
   in [163]:
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4))

sns.boxplot(df_temp.dropna(), ax=ax1, palette="pastel")
sns.violinplot(df_temp.dropna(), ax=ax2, palette="pastel")

fig.tight_layout()
fig.savefig("ch12-seaborn-boxplot-violinplot.pdf")

   [ p2wxfnzikanqaaaaaelftksuqmcc ]
   in [164]:
sns.violinplot(x=df_temp.dropna().index.month, y=df_temp.dropna().outdoor, color
="skyblue");

plt.savefig("ch12-seaborn-violinplot.pdf")

   [r3rast+kpfoaaaaasuvo rk5cyii= ]
   in [165]:
df_temp["month"] = df_temp.index.month
df_temp["hour"] = df_temp.index.hour

   in [166]:
df_temp.head()

   out[166]:
                             outdoor indoor month hour
             time
   2014-01-01 00:00:00+01:00 4.38    21.94  1     0
   2014-01-01 00:10:00+01:00 4.25    22.00  1     0
   2014-01-01 00:20:00+01:00 4.19    22.00  1     0
   2014-01-01 00:30:00+01:00 4.06    22.00  1     0
   2014-01-01 00:40:00+01:00 4.06    22.00  1     0
   in [167]:
table = pd.pivot_table(df_temp, values='outdoor', index=['month'], columns=['hou
r'], aggfunc=np.mean)

   in [168]:
table

   out[168]:
   hour 0 1 2 3 4 5 6 7 8 9 ... 14 15 16 17 18 19 20 21 22 23
   month
   1 -1.692312 -1.750162 -1.826649 -1.879086 -1.922527 -1.968065 -2.020914
   -2.035806 -2.101774 -2.001022 ... -1.457849 -1.696935 -1.814194
   -1.812258 -1.853297 -1.898432 -1.839730 -1.806486 -1.854462 -1.890811
   2 1.613690 1.521190 1.479405 1.464371 1.506407 1.485595 1.499167
   1.516946 1.669226 2.067725 ... 3.573593 3.360741 2.939390 2.501607
   2.357425 2.236190 2.204458 2.137619 2.024671 1.896190
   3 3.192366 2.866774 2.628000 2.524140 2.384140 2.235538 2.243387
   2.622258 3.419301 4.466290 ... 7.790323 7.930914 7.595892 6.770914
   5.731508 4.983784 4.437419 4.022312 3.657903 3.407258
   4 5.832738 5.336012 4.926667 4.597059 4.380000 4.109769 4.123699
   4.741437 5.878035 7.272299 ... 12.175556 12.500059 12.494483 12.361156
   11.989240 10.454881 8.857619 7.712619 6.974762 6.293512
   5 9.792204 9.369351 9.009839 8.670914 8.463387 8.446919 8.772324
   9.562742 10.723622 12.047717 ... 15.542581 15.744624 15.784839
   15.799570 17.009892 15.685161 13.632796 12.216290 11.291237 10.622849
   6 13.209556 12.792889 12.382889 11.967889 11.735778 11.886667 12.503778
   13.338167 14.343444 15.665475 ... 18.630556 18.866292 18.680611
   18.529832 20.057877 18.853389 16.969777 15.675111 14.658778 13.898167
   7 17.956344 17.348641 16.793152 16.309892 16.001559 15.986774 16.506613
   17.478226 18.850054 20.533763 ... 24.598441 25.030000 24.869194
   24.764409 26.155161 24.896505 22.550269 20.882649 19.699022 18.822634
   8 14.498205 13.960128 13.555128 12.995641 12.651410 12.485974 12.680130
   13.403506 14.578780 16.170833 ... 20.473810 20.292381 20.328795
   19.642436 19.373846 18.713462 17.034872 15.843590 15.146154 14.596667
   9 11.133000 10.725667 10.362444 9.976833 9.729333 9.503944 9.357500
   9.689778 10.600778 11.829106 ... 16.336983 16.828268 17.031056
   16.786983 15.853556 14.534637 13.350444 12.545278 11.954190 11.399056
   10 8.602011 8.490598 8.382486 8.257097 8.166774 8.140054 8.140161
   8.148333 8.410914 9.054946 ... 11.330323 11.189194 10.836865 10.361568
   9.781022 9.373441 9.134570 8.956505 8.820270 8.623297
   11 4.847111 4.765922 4.815642 4.773240 4.809611 4.785833 4.741222
   4.739778 4.794500 4.965389 ... 5.526034 5.342753 5.081250 5.056629
   4.959106 4.868111 4.833333 4.774389 4.720722 4.699722
   12 -0.366369 -0.390556 -0.447374 -0.370111 -0.353128 -0.319832
   -0.358667 -0.410278 -0.483167 -0.344667 ... 0.738944 0.367056 0.152167
   -0.106111 -0.182500 -0.244167 -0.290000 -0.305333 -0.302778 -0.325642

   12 rows    24 columns
   in [169]:
fig, ax = plt.subplots(1, 1, figsize=(8, 4))
sns.heatmap(table, ax=ax);

fig.tight_layout()
fig.savefig("ch12-seaborn-heatmap.pdf")

   [36zpqmngzc2zyoailxe
   lo0nrloglso+7rrr9ostt9yvr37llbeoqkhikpsbm6vjkyerbdu2yszm1kltp5oibqdnaet
   jawaa
   szg9aqaalkfoaaaalla0aaaasygaaacajrqnaadaeoogaabgcuudaacw5p8dtmkzhalheow
   aaaaa suvork5cyii= ]

versions[22]  

   in [170]:
%reload_ext version_information

   in [171]:
%version_information numpy, matplotlib, pandas, seaborn

   out[171]:
    software                      version
   python     2.7.10 64bit [gcc 4.2.1 (apple inc. build 5577)]
   ipython    3.2.1
   os         darwin 14.1.0 x86_64 i386 64bit
   numpy      1.9.2
   matplotlib 1.4.3
   pandas     0.16.2
   seaborn    0.6.0

   this website does not host notebooks, it only renders notebooks
   available on other websites.

   delivered by [23]fastly, rendered by [24]rackspace

   nbviewer github [25]repository.

   nbviewer version: [26]33c4683

   nbconvert version: [27]5.4.0

   rendered (fri, 05 apr 2019 18:32:08 utc)

references

   1. https://nbviewer.jupyter.org/
   2. http://jupyter.org/
   3. https://nbviewer.jupyter.org/faq
   4. https://nbviewer.jupyter.org/format/script/github/jrjohansson/numerical-python-book-code/blob/master/ch12-code-listing.ipynb
   5. https://nbviewer.jupyter.org/github/jrjohansson/numerical-python-book-code/blob/master/ch12-code-listing.ipynb
   6. https://github.com/jrjohansson/numerical-python-book-code/blob/master/ch12-code-listing.ipynb
   7. https://mybinder.org/v2/gh/jrjohansson/numerical-python-book-code/master?filepath=ch12-code-listing.ipynb
   8. https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/ch12-code-listing.ipynb
   9. https://nbviewer.jupyter.org/github/jrjohansson/numerical-python-book-code/tree/master
  10. https://nbviewer.jupyter.org/github/jrjohansson/numerical-python-book-code/tree/master/ch12-code-listing.ipynb
  11. https://nbviewer.jupyter.org/github/jrjohansson/numerical-python-book-code/blob/master/ch12-code-listing.ipynb#chapter-12:-data-processing-and-analysis-with-pandas
  12. http://www.apress.com/9781484205549
  13. http://www.apress.com/9781484205549
  14. https://nbviewer.jupyter.org/github/jrjohansson/numerical-python-book-code/blob/master/ch12-code-listing.ipynb#series-object
  15. https://nbviewer.jupyter.org/github/jrjohansson/numerical-python-book-code/blob/master/ch12-code-listing.ipynb#dataframe-object
  16. https://nbviewer.jupyter.org/github/jrjohansson/numerical-python-book-code/blob/master/ch12-code-listing.ipynb#larger-dataset
  17. https://nbviewer.jupyter.org/github/jrjohansson/numerical-python-book-code/blob/master/ch12-code-listing.ipynb#time-series
  18. https://nbviewer.jupyter.org/github/jrjohansson/numerical-python-book-code/blob/master/ch12-code-listing.ipynb#basics
  19. https://nbviewer.jupyter.org/github/jrjohansson/numerical-python-book-code/blob/master/ch12-code-listing.ipynb#temperature-time-series-example
  20. https://nbviewer.jupyter.org/github/jrjohansson/numerical-python-book-code/blob/master/ch12-code-listing.ipynb#selected-day
  21. https://nbviewer.jupyter.org/github/jrjohansson/numerical-python-book-code/blob/master/ch12-code-listing.ipynb#seaborn-statistical-visualization-library
  22. https://nbviewer.jupyter.org/github/jrjohansson/numerical-python-book-code/blob/master/ch12-code-listing.ipynb#versions
  23. http://www.fastly.com/
  24. https://developer.rackspace.com/?nbviewer=awesome
  25. https://github.com/jupyter/nbviewer
  26. https://github.com/jupyter/nbviewer/commit/33c4683164d5ee4c92dbcd53afac7f13ef033c54
  27. https://github.com/jupyter/nbconvert/releases/tag/5.4.0
