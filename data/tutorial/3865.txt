   #[1]neal caren    feed [2]neal caren    comments feed [3]an introduction
   to text analysis with python, part 2 [4]alternate [5]alternate

   [6]neal caren
   [7]skip to content
     * [8]home
     * [9]research
     * [10]teaching
     * [11]big data
     * [12]links

   [13]an introduction to text analysis with python, part 2    

an introduction to text analysis with python, part 1

   posted on [14]april 4, 2012 by [15]neal caren

   note: this is the first in a series of tutorials designed to provide
   social scientists with the skills to collect and analyze text data
   using the python programming language. the tutorials assume no prior
   knowledge of python or text analysis.

   in september of 2011, science magazine printed an [16]article by
   cornell sociologists scott golder and michael macy that examined how
   trends in positive and negative attitudes varied over the day and the
   week. to do this, they collected 500 million tweets produced by more
   than two million people. they found fascinating daily and weekly trends
   in attitudes. it   s a great example of the sort of interesting things
   social scientists can do with online social network data. more
   generally, the growth of what computer scientists call    big data   
   presents social scientists with unique opportunities for researching
   old questions, along with empowering us to ask new questions. while
   some of this big data is only numbers, much of it also consists of
   text. sociologists have long had tools to assist us in coding and
   analyzing dozens or even hundreds of text documents, but many of these
   tools are less useful when the number of documents is in the tens of
   thousands or millions. every sociology professor, graduate student and
   undergraduate in the united states working together couldn   t code even
   the 1% daily sample of tweets that twitter provides free to
   researchers. luckily, computer scientists have been working for quite a
   while on exactly this data problem   how do we collect, categorize and
   understand massive text databases.

   it turns out that while the volume of data in a study such as golder
   and macy   s is intimidating, doing a project of this sort isn   t that
   complicated for the typical social scientist. the major challenges are
   (1) collecting and managing the data, (2) turning the text into numbers
   of some sort, and (3) analyzing the numbers. the third step involves
   techniques familiar to many quantitative researchers. based on their
   [17]supplementary file, it appears golder and macy used stata to
   analyze the data.

   getting the twitter data isn   t that difficult, although it does involve
   dealing with the twitter application programming interface, or api, a
   task most social scientist have not been trained to do. if you   re
   wondering, facebook also has an api and you can use what are called
      web scraping    techniques to gather data from blogs and other websites
   too. i   ll discuss these topics in other tutorials.
   in this post and the next, i   ll walk through the basics of a popular
   way to convert text into meaningful numbers, using the same analytic
   strategy that golder and macy used. while you can do this sort of
   analysis using one of several different programs or languages, one
   commonly used for this sort of quantitative text analysis is python. it
   is free, used by millions (so there are lots of resources available),
   and relatively straightforward to learn. if you have a mac, it   s
   already on your computer! there are no pull down menus in python,
   though, so learning by fumbling around isn   t the best option. that   s
   what led me to write this series of tutorials.

   this initial tutorial is aimed at social scientists who may be familiar
   with some statistical package like spss, stata or sas, but haven   t used
   python. it walks through the basics of one type of text analysis using
   some sample text data, but swapping in your own data once you   ve got
   this up and running isn   t much harder.

python

   for the purposes of this walkthrough, i   m going to assume you are using
   a mac. if you aren   t (and even if you are), a great place to get python
   is through the [18]enthought python distribution, which is free for
   those in academia. in another post, i   ll talk about other ways to get
   python up and running. or, you can just google it.

   [as a side note, if you know what you are doing in python, some of the
   code here might make you scratch your head. this could be because i   ve
   only been using python for a short time. it could also be that
   sometimes i   m doing things the long way to demonstrate some python
   fundamentals. i   m also trying to code using the fewest number of new
   commands and options to keep things simple. finally, while trying to
   demonstrate a pythonic style of coding, i   m also trying to make it
   familiar to those who are used to analyzing data with stata or spss.
   but, if i include any mistakes, please leave a comment or email me. and
   if you just want the code for this id31, feel free to
   [19]download it.]

   there are two ways to run programs in python: by running a script you
   wrote, or through the command line. we   ll start with the command line.
   to begin, use spotlight (the eye glass in the upper right hand corner
   of your mac) to find    terminal   . double click on the    terminal    entry,
   and a potentially intimating little screen will greet you. type, python
   mid-campus-02203:~ nealcaren$ python

   and your computer should return something like:
   python 2.7.1 (r271:86882m, nov 30 2010, 10:35:34)
   [gcc 4.2.1 (apple inc. build 5664)] on darwin
   type "help", "copyright", "credits" or "license" for more information.
   >>>

   the    $    is where you type commands in terminal. the words before your
   dollar sign will be different than mine, depending on your current
   directory and other factors. on a windows machine, you are likely to
   see something like c:usersneal caren>[cci]. after you type [cci]python,
   a few lines describing your version of python will appear followed by
   the python promt,    >>>   . as you can see above, i   m running python 2.7,
   which is the current version as of this post. you might have python
   2.6, which is fine. you probably don   t have python 3.2, which is
   different and should be avoided for compatibility reasons. but not
   matter which operating system or version of python you have,>>> is the
   python prompt.

   before we go any further, you might want to know how to get out of
   python. just type exit, followed by an open and close parenthesis:
   >>> exit()

   this will bring you back to your operating system prompt. on a windows
   machine, you type exit without the parentheses and the command line
   will go away. on a mac, you can quit terminal like you would any other
   application, with either command-q or by selection    terminal-quit
   terminal    with your mouse.

strings

   pretend that the first tweet you wanted to analyze was,    we have some
   delightful new food in the cafeteria. awesome!!!    you might have a
   million more of these that you want to analyze, and we   ll get there
   eventually, but my coding style is to start simple and then slowly add
   complexity. in this case, a simple way to start is with one tweet. to
   tell python about your tweet, type:
   >>> tweet='we have some delightful new food in the cafeteria.
   awesome!!!'

   there are three things to note. first, don   t type or copy the    >>>   
   that is just to show you where you should type this command in python,
   and that it shouldn   t be indented. second, there is a space between the
      >>>    and the word       tweet      . don   t type or copy that space. it   s just
   there. python is very particular about spacing at the beginning of
   lines. so start typing or copying at the word    tweet   . third, the text
   is surrounded by a single quote (i.e. ') on each side. you can also use
   double quotes (i.e. ") or even triple single quotes (i.e. '''), but
   single quotes are the default python style for entering a string.

   to make sure that you typed the tweet correctly, you can type:
   >>> tweet

   python will respond with:
   'we have some delightful new food in the cafeteria. awesome!!!'

   you can get almost the same response using a print statement:
   >>> print tweet
   we have some delightful new food in the cafeteria. awesome!!!

   the only difference is that the first response was wrapped in single
   quotes and the second wasn   t. as a side note, the single quotes weren   t
   because you put them there. if you used double quotes, you would get
   the same thing:
   >>> tweet="we have some delightful new food in the cafeteria.
   awesome!!!"
   >>> tweet
   'we have some delightful new food in the cafeteria. awesome!!!'

lists

   now, following golder and macy, we need to decide if this is a positive
   or negative opinion. if we had a large sample of the tweets already
   coded by sentiment, would could try and figure out which words appeared
   more often in tweets we considered positive, and which words appeared
   more often in tweets we considered negative. in sociology, we might
   think about this in a regression framework. we want to predict whether
   the sentence is positive, negative, or neither, and we could use the
   presence or absence of words as predictors. in computer science, this
   would be considered a supervised learning classification problem. but
   we don   t have a sample precoded, so let   s save classification for
   another day.

   one straightforward way to approach the problem is to count the
   proportion of words that usually have a positive connotation and the
   proportion of words that have a negative connotation. this is a common
   analytic strategy in many fields, especially psychology. golder and
   macy   s twitter study used the lists of positive and negative words that
   are part of the [20]linguistic inquiry and word count (liwc) project.
   this data is only available commercially, so i won   t include it this
   tutorial. there   s a [21]similar dictionary that   s freely available, but
   we won   t use that just yet.

   for now, you can just make your own list of positive words. we   ll swap
   in the official list before we are done. off the top of my head, the
   words    good   ,    nice   ,    super   , and    fun    are words that i use when i   m
   trying to be positive. to put this list into python:
   >>> positive_words=['awesome','good','nice','super','fun']

      positive_words    is now the name of our list. there are only a few
   restrictions on what you can name your list (e.g., it can   t start with
   a number, or have spaces). to tell python that we are creating a list,
   you put everything in brackets. since the items in the list are
   strings, each goes in single quotes. the list form in python is roughly
   analogous to a variable in statistical programs.

   if you wanted to add an item to your list, you append the list:
   >>> positive_words.append('delightful')

   in this case, you start with the list name, followed by    .append   , and
   then in parenthesis write the item that you want to add to your list.
   if you are adding a string, you put it in quotes. otherwise, python
   will think you are referencing something like this:
   >>> positive_words.append(like)
   traceback (most recent call last):
   file "<stdin>", line 1, in <module>
   nameerror: name 'like' is not defined
   >>> newword='like'
   >>> positive_words.append(newword)

   after i got the error message, i created a new string call    newword   
   which contained the word that i wanted to append. i then added the word
      like    to our list by using the string   s name,    newword   . this is a
   pretty inefficient way to do things in this case, but useful in many
   other situations.

   lists are much more flexible than represented above. items can be
   longer than a single word (e.g.    super fun   ); strings and numbers can
   be in the same list (e.g., 3,   swell   ); and you can even put additional
   lists inside your list.

   if we want to see what was in the list we created above, we can print
   it:
   >>> print positive_words
   ['good', 'nice', 'super', 'fun', 'delightful', 'like']

   the brackets remind you that this is a list, and the items in the list
   are separated by commas.

   now create a list of negative words:
   >>> negative_words=['awful','lame','horrible','bad']
   >>> print negative_words
   ['awful', 'lame', 'horrible', 'bad']

   if you wanted to measure whether or not any emotion was expressed, you
   might create one list that combines all the positive and negative
   words. rather than retyping them, you can just combine the lists with a
   plus sign:
   >>> emotional_words=negative_words+positive_words
   >>> print emotional_words
   ['awful', 'lame', 'horrible', 'bad', 'good', 'nice', 'super', 'fun',
   'delightful', 'like']

from strings to lists

   later on, we   ll create a better list of positive and negative words,
   but for now let   s return to the original tweet. the default strategy
   for this sort of analysis is to examine each word in the sentence on
   its own, regardless of word ordering. this is called a    bag of words   
   model. it has some obvious drawbacks (e.g.    this was not fun.    will
   show up as positive because of the presence of the word    fun    unless
   you somehow model it   s negation.), but, with a few tweaks, these models
   can be about as good at classification as an undergraduate ra.

   since our unit of analysis is the word and not the sentence, we want to
   split our sentence into words. we can do that by using the split
   option:
   >>> words= tweet.split(' ')
   >>> print words
   ['we', 'have', 'some', 'delightful', 'new', 'food', 'in', 'the',
   'cafeteria.', 'awesome!!!']

   here, we   ve split our string    tweet   , making a cut every time there was
   a space. this new object is stored as    words   . as you can see from the
   results of the print command, the new object is displayed in brackets,
   so python has created    words    as a list. in order to see how long many
   words are in the sentence, you use the length command, which will
   return the number of objects in a list.
   >>> len(words)
   10

   this only works because we   ve split the sentence into a list of words.
   if we ask for the length of the original tweet, we get something less
   useful:
   >>> len(tweet)
   61

   python doesn   t know that you only care about words, so it defaulted to
   counting the number of characters.

loops

   our first goal is to go through our list of words and see if any of
   them show up in our list of positive words. for starters, we can loop
   over each of the words in our sentence with a    for    loop:
   >>> for word in words:
   ...     print word
   ...
   we
   have
   some
   delightful
   new
   food
   in
   the
   cafeteria.
   awesome!!!

   the    for    tells python that we are going to cycle through each element
   of a list.    word    is the name that i just made up that will hold each
   of the words.    in words    tells python which list we want to iterate
   through, and the colon ends a line that declares a loop. note that the
   second line begins with    ...    instead of    >>>   . python did that to
   remind you that you are inside a loop. the new line is also indented. i
   used a tab; others put four spaces. if you don   t indent, python will
   report an error:
   >>> for word in words:
   ... print words
   file "<stdin>", line 2
   print words
   ^
   indentationerror: expected an indented block

   note also the ... on the third line of the successful loop. when typing
   in the python command line you signal that you are done with a loop by
   hitting return without typing anything.

conditionals

   while this loop prints out each word (when the second line is
   appropriately tabbed), what we actually want to do is see if that word
   is the list of positive (or negative) words.
   >>> for word in words:
   ...     if word in positive_words:
   ...         print word
   ...
   delightful

   here, we include a conditional: we only move to the    print word    state
   if the value of    word    is in our list of positive words. so, the first
   time the loop cycles through and sees the value of    word    is    the   , so
   the loop skips the    print word    line. here, the    if    line ends in a
   colon and the lines that should only occur if the conditions are met
   are doubled indented   once as a result of the    for    and once because of
   the    if   .

   not bad work   although we   ll have to track down why    awesome    didn   t
   appear in the list. you   ll want to continue on to [22]part 2 of the
   tutorial. it would be part of this post, but the blog software seems to
   think i   ve written too much already and won   t display anymore lines.

about neal caren

   sociology
   [23]view all posts by neal caren    
   this entry was posted in [24]uncategorized and tagged [25]python,
   [26]sentiment, [27]tutorial. bookmark the [28]permalink.
   [29]an introduction to text analysis with python, part 2    

   comments are closed.
     * search for: ____________________ search
     * neal caren in an assistant professor of sociology at the university
       of north carolina, chapel hill.
       [30]email
       [31]twitter

     * note: header images found via google image search. i didn't take
       them.

   [32]neal caren
   [33]proudly powered by wordpress.

references

   1. http://nealcaren.web.unc.edu/feed/
   2. http://nealcaren.web.unc.edu/comments/feed/
   3. http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-2/
   4. http://nealcaren.web.unc.edu/wp-json/oembed/1.0/embed?url=http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-1/
   5. http://nealcaren.web.unc.edu/wp-json/oembed/1.0/embed?url=http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-1/&format=xml
   6. http://nealcaren.web.unc.edu/
   7. http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-1/#content
   8. http://nealcaren.web.unc.edu/
   9. http://nealcaren.web.unc.edu/research/
  10. http://nealcaren.web.unc.edu/teaching/
  11. http://nealcaren.web.unc.edu/big-data/
  12. http://nealcaren.web.unc.edu/links/
  13. http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-2/
  14. http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-1/
  15. http://nealcaren.web.unc.edu/author/ncaren/
  16. http://www.sciencemag.org/content/333/6051/1878
  17. http://www.sciencemag.org/content/333/6051/1878/suppl/dc1
  18. http://www.enthought.com/
  19. http://www.unc.edu/~ncaren/haphazard/sentiment.py
  20. http://liwc.net/
  21. http://www.cs.pitt.edu/mpqa/
  22. http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-2/
  23. http://nealcaren.web.unc.edu/author/ncaren/
  24. http://nealcaren.web.unc.edu/category/uncategorized/
  25. http://nealcaren.web.unc.edu/tag/python/
  26. http://nealcaren.web.unc.edu/tag/sentiment/
  27. http://nealcaren.web.unc.edu/tag/tutorial/
  28. http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-1/
  29. http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-2/
  30. mailto:neal.caren@unc.edu
  31. http://twitter.com/haphazardsoc
  32. http://nealcaren.web.unc.edu/
  33. http://wordpress.org/
