   #[1]neal caren    feed [2]neal caren    comments feed [3]an introduction
   to text analysis with python, part 1 [4]an introduction to text
   analysis with python, part 3 [5]alternate [6]alternate

   [7]neal caren
   [8]skip to content
     * [9]home
     * [10]research
     * [11]teaching
     * [12]big data
     * [13]links

   [14]    an introduction to text analysis with python, part 1
   [15]an introduction to text analysis with python, part 3    

an introduction to text analysis with python, part 2

   posted on [16]april 6, 2012 by [17]neal caren

   an [18]earlier tutorial looked at the basics of using python to analyze
   text data. in this posts, we   ll take actually compute the proportion of
   positive words in a tweet, after cleaning up the data bit.
   the other tutorial ended with a couple of stored strings, so if you are
   starting up python, you   ll want to store a couple of them:
   >>> tweet='we have some delightful new food in the cafeteria.
   awesome!!!'
   >>> postive_words=['awesome','good', 'nice', 'super', 'fun',
   'delightful']
   >>> negative_words=['awful','lame','horrible','bad']
   >>> words= tweet.split(' ')

   the prior post ended by printing out the positive words that it found
   in the tweet. we could make the print line a little more informative by
   adding some text that explains why it is randomly printing out the
   word,    delightful   .
   >>> for word in words:
   ...     if word in positive_words:
   ...         print word+'  is a positive word'
   ...
   delightful is a positive word

   when python sees a,    +   , it attempts to combine the two items. in this
   case, since both    word    and    is a positive word    are strings, the
   result is a longer string. this is the same logic that we used above to
   combine the two lists of words to create a longer list. this also works
   for combining two or more numbers, but, you can   t use this strategy to
   combine a string and a number:
   >>> 2+'delightful'
   traceback (most recent call last):
   file "&lt;stdin>", line 1, in &lt;module>
   typeerror: unsupported operand type(s) for +: 'int' and 'str'

   nicely, python tells you the line number where there was a problem and
   a semi-informative error message: you were trying to combine a integer
   and string, which python can   t do because it wouldn   t know what data
   type you would want to store it in. you could make this work by
   converting the number to a string :
   [code]>>> str(2)+   delightful   
   2delightful[/code]
   you aren   t limited to combining just two items, any number of like
   objects can be put together with the +.

preprocessing

   you might have noticed that while our loop matched    delightful   , it
   didn   t find    awesome   .  looking back at the list of words that printed
   when we printed every word in our tweet might provide some clues as to
   why this occurred. while we have    awesome    in our positive words list,
   we don   t have    awesome!!!    and python is looking for an exact match. in
   order to get the two versions to match, we would need to make the    a   
   lower case and remove the exclamation marks. this is called
   pre-processing or cleaning the data. shifting everything to lower case
   and stripping punctuation are the most common pre-processing tasks in
   natural language processing. other common things to do are [19]id30
   words, which attempts to find the root of the word (e.g.    running    and
      runs    both get reduced to    run   ) and removing little words like    the   ,
      and   , or    if   , which are known as [20]stop words.

   since removing capitalization and punctuation involves throwing away
   potentially meaningful variation, you should proceed with caution. for
   example, you might think that the    awesome!!!    is different from
      awesome   , that    wow    is different from    wow   , or that    cool!    is
   different from    cool?   . in machine learning (i technique i will discuss
   in more detail at a later point), this is part of the art of    feature
   selection   . social scientists have independent or explanatory variables
   that they use to explain their models, while computer scientists try to
   find the    features    with the most predictive power. in natural language
   processing, features can be more than the absence or presence of
   specific words. word count, presence of parts of words, sentence
   complexity, use of the passive voice, presence of emoticons, or any
   other text attribute that can be expressed as a number can be included
   as a feature. i   m a fan of starting with just the words to get a
   baseline model, and then seeing if you can improve on it. and in this
   case, we don   t have punctuation or non-lower cases words coded in our
   list of emotional words, so the decision is made for us.

   however, making strings lower case in python is simple:
   >>> tweet.lower()
   'we have some delightful new food in the cafeteria. awesome!!!'

   but we can   t do it with our list of words:
   >>> words.lower()
   file "<stdin>", line 1, in <module>
   attributeerror: 'list' object has no attribute 'lower'

   so we either have to make it lower case when it is a full sentence, or
   we can do it to each individual word:
   >>> for word in words:
   ...     print word.lower()
   ...
   we
   have
   some
   delightful
   new
   food
   in
   the
   cafeteria.
   awesome!!!

   updating our loop, we still don   t find awesome yet:
   >>> for word in words:
   ...     if word.lower() in positive_words:
   ...         print word.lower()+' is a positive word'
   ...
   delightful is a positive word

   this is because we have not removed the exclamation marks. if that was
   the only punctuation we wanted to remove, we could replace it with
   nothing:
   >>> print tweet.replace('!','')
   we have some delightful new food in the cafeteria. awesome

   python will let you use this technique to create a new string:
   >>> tweet_noex=tweet.replace('!','')
   >>> print tweet_noex
   we have some delightful new food in the cafeteria. awesome

   replace takes two options. the first is what you are looking for   in
   this case, the exclamation mark. the second is what you want to replace
   it with   in this case, nothing. as always, strings should be in
   quotation marks.

   the new string could even have the same name as your old string:
   >>> tweet=tweet.replace('!','')
   >>> print tweet
   we have some delightful new food in the cafeteria. awesome

   we   ve lost the original message, so this isn   t always the best policy.
   you might want to store your original string away some place for safe
   keeping, or create a new string name, such as    tweet_processed    that
   you update with each of your different preprocessing steps.

   more than one string operation can be included in the same statement,
   so we could remove all the punctuation from the tweet with something
   like:
    >>> tweet_processed=tweet.replace('!','').replace('.','')
   >>> print tweet_processed
   we have some delightful new food in the cafeteria awesome

   you could even append the    .lower()    operation to this and do all the
   cleaning in one line, but you might have trouble figuring out what you
   did a month later when you come back to your code if you combine
   different types of operations. but, if you wanted to, you could put it
   together like this:
   >>> tweet_processed=tweet.replace('!','').replace('.','')
   >>> tweet_processed=tweet_processed.lower()
   >>> words=tweet_processed.split(' ')
   >>> print words
   ['we', 'have', 'some', 'delightful', 'new', 'food', 'in', 'the',
   'cafeteria', 'awesome']

   the first line creates a new string tweet_processed that holds our
   original tweet minus the punctuation. note that the second line has
      tweet_processed    on both sides of the equal sign. if you kept
      tweet.lower()    on the right hand side you would just be throwing away
   the punctuation stripping that you did in the first line.

   while removing the period and exclamation mark work for this tweet, it
   isn   t a very good general solution, because it ignores the 30(!)
   other punctuation marks that could be used in a sentence. since we want
   to develop a script that works more generally, we want to use a
   technique that can be flexible enough to handle more than periods and
   exclamation marks.

importing modules

   python has built-in all the punctuation you need to account for in all
   cases. you can access them by typing:
   >>> from string import punctuation
   >>> print punctuation
   !"#$%&'()*+,-./:;<=>?@[]^_`{|}~

   most of python   s usefulness isn   t available to you when you start up
   the program. you need to selectively bring modules into memory. in this
   case, we are accessing the    string    module, which comes with your
   python. other modules are available from the web, and to do anything
   interesting with natural language processing, you   ll have to download
   and set some of them up.

   there are faster and more elegant solutions, but a straightforward way
   to remove the punctuations is to loop through our
   new punctuation string and replace each instance in our sentence with
   nothing. like this:
   >>> tweet_processed=tweet.lower()
   >>> for p in list(punctuation):
   ...     tweet_processed=tweet_processed.replace(p,'')
   ...
   >>> print tweet_processed
   we have some delightful new food in the cafeteria awesome
   >>> for word in words:
   ...     if word in positive_words:
   ...     print word + ' is a positive word'
   ...
   delightful is a positive word
   awesome is a positive word

   it worked! the first line created a new string that contained a
   lower-case version of the original tweet. the second line began a loop
   over all the punctuation marks that could potentially be in the
   sentence. since the punctuation item that we imported was original
   stored as a string, we have to convert it to a list, which can happen
   on this same line.  python   s default splitting is between individual
   characters, which works perfectly here. the remainder of the script is
   the same as used above.

putting it all together

   the original quantity of interest was the fraction of positive words in
   the sentence. we already computed the denominator of the fraction when
   we computed the length of the string words using the    len    command. one
   straightforward way to compute the numerator is with a counter that
   starts at zero and increases by one each time the loop finds a positive
   word.
   >>> positive_counter=0
   >>> tweet_processed=tweet.lower()
   >>> for p in list(punctuation):
   ...     tweet_processed=tweet_processed.replace(p,'')
   ...
   >>> print tweet_processed
   we have some delightful new food in the cafeteria awesome
   >>> for word in words:
   ...     if word in positive_words:
   ...         print word+ ' is a positive word'
   ...         positive_counter=positive_counter+1
   ...
   delightful is a positive word
   awesome is a positive word
   >>> print positive_counter
   2
   >>> positive_counter/len(words)
   0

   that worked out well, except at the end.  python default for division
   is to round down to the nearest integer when the figures involved are
   integers. while frustrating, it doesn   t actually impact you much
   because it has an easy fix: importing a different division calculator
   from the built in    future    module.
   >>> from __future__ import division
   >>> positive_counter/len(words)
   0.2

   note that future has two underscores in front of it and two underscores
   behind it.

   now that we have the complete code for calculating positive sentiment
   from a tweet, we just need to build it up so that it is useful for
   research purposes. this includes computing negative sentiment, looping
   over more than one tweet, incorporating a more complete dictionary, and
   exporting the results. we will look at those items in the [21]next
   tutorial. for now, you can just exit python by typing:
   >>> exit()

about neal caren

   sociology
   [22]view all posts by neal caren    
   this entry was posted in [23]uncategorized and tagged [24]python,
   [25]sentiment, [26]tutorial. bookmark the [27]permalink.
   [28]    an introduction to text analysis with python, part 1
   [29]an introduction to text analysis with python, part 3    

   comments are closed.
     * search for: ____________________ search
     * neal caren in an assistant professor of sociology at the university
       of north carolina, chapel hill.
       [30]email
       [31]twitter

     * note: header images found via google image search. i didn't take
       them.

   [32]neal caren
   [33]proudly powered by wordpress.

references

   1. http://nealcaren.web.unc.edu/feed/
   2. http://nealcaren.web.unc.edu/comments/feed/
   3. http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-1/
   4. http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-3/
   5. http://nealcaren.web.unc.edu/wp-json/oembed/1.0/embed?url=http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-2/
   6. http://nealcaren.web.unc.edu/wp-json/oembed/1.0/embed?url=http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-2/&format=xml
   7. http://nealcaren.web.unc.edu/
   8. http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-2/#content
   9. http://nealcaren.web.unc.edu/
  10. http://nealcaren.web.unc.edu/research/
  11. http://nealcaren.web.unc.edu/teaching/
  12. http://nealcaren.web.unc.edu/big-data/
  13. http://nealcaren.web.unc.edu/links/
  14. http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-1/
  15. http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-3/
  16. http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-2/
  17. http://nealcaren.web.unc.edu/author/ncaren/
  18. http://nealcaren.web.unc.edu/sentiment-classification-in-python-from-a-dictionary/
  19. http://en.wikipedia.org/wiki/id30
  20. http://en.wikipedia.org/wiki/stop_words
  21. http://nealcaren.web.unc.edu/sentiment-ii/
  22. http://nealcaren.web.unc.edu/author/ncaren/
  23. http://nealcaren.web.unc.edu/category/uncategorized/
  24. http://nealcaren.web.unc.edu/tag/python/
  25. http://nealcaren.web.unc.edu/tag/sentiment/
  26. http://nealcaren.web.unc.edu/tag/tutorial/
  27. http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-2/
  28. http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-1/
  29. http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-3/
  30. mailto:neal.caren@unc.edu
  31. http://twitter.com/haphazardsoc
  32. http://nealcaren.web.unc.edu/
  33. http://wordpress.org/
