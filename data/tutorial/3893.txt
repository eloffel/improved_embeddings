   [1]cs231n convolutional neural networks for visual recognition

   this is an introductory lecture designed to introduce people from
   outside of id161 to the image classification problem, and the
   data-driven approach. the table of contents:
     * [2]intro to image classification, data-driven approach, pipeline
     * [3]nearest neighbor classifier
          + [4]k-nearest neighbor
     * [5]validation sets, cross-validation, hyperparameter tuning
     * [6]pros/cons of nearest neighbor
     * [7]summary
     * [8]summary: applying knn in practice
     * [9]further reading

image classification

   motivation. in this section we will introduce the image classification
   problem, which is the task of assigning an input image one label from a
   fixed set of categories. this is one of the core problems in computer
   vision that, despite its simplicity, has a large variety of practical
   applications. moreover, as we will see later in the course, many other
   seemingly distinct id161 tasks (such as id164,
   segmentation) can be reduced to image classification.

   example. for example, in the image below an image classification model
   takes a single image and assigns probabilities to 4 labels, {cat, dog,
   hat, mug}. as shown in the image, keep in mind that to a computer an
   image is represented as one large 3-dimensional array of numbers. in
   this example, the cat image is 248 pixels wide, 400 pixels tall, and
   has three color channels red,green,blue (or rgb for short). therefore,
   the image consists of 248 x 400 x 3 numbers, or a total of 297,600
   numbers. each number is an integer that ranges from 0 (black) to 255
   (white). our task is to turn this quarter of a million numbers into a
   single label, such as    cat   .
   [classify.png]
   the task in image classification is to predict a single label (or a
   distribution over labels as shown here to indicate our confidence) for
   a given image. images are 3-dimensional arrays of integers from 0 to
   255, of size width x height x 3. the 3 represents the three color
   channels red, green, blue.

   challenges. since this task of recognizing a visual concept (e.g. cat)
   is relatively trivial for a human to perform, it is worth considering
   the challenges involved from the perspective of a id161
   algorithm. as we present (an inexhaustive) list of challenges below,
   keep in mind the raw representation of images as a 3-d array of
   brightness values:
     * viewpoint variation. a single instance of an object can be oriented
       in many ways with respect to the camera.
     * scale variation. visual classes often exhibit variation in their
       size (size in the real world, not only in terms of their extent in
       the image).
     * deformation. many objects of interest are not rigid bodies and can
       be deformed in extreme ways.
     * occlusion. the objects of interest can be occluded. sometimes only
       a small portion of an object (as little as few pixels) could be
       visible.
     * illumination conditions. the effects of illumination are drastic on
       the pixel level.
     * background clutter. the objects of interest may blend into their
       environment, making them hard to identify.
     * intra-class variation. the classes of interest can often be
       relatively broad, such as chair. there are many different types of
       these objects, each with their own appearance.

   a good image classification model must be invariant to the cross
   product of all these variations, while simultaneously retaining
   sensitivity to the inter-class variations.
   [challenges.jpeg]

   data-driven approach. how might we go about writing an algorithm that
   can classify images into distinct categories? unlike writing an
   algorithm for, for example, sorting a list of numbers, it is not
   obvious how one might write an algorithm for identifying cats in
   images. therefore, instead of trying to specify what every one of the
   categories of interest look like directly in code, the approach that we
   will take is not unlike one you would take with a child: we   re going to
   provide the computer with many examples of each class and then develop
   learning algorithms that look at these examples and learn about the
   visual appearance of each class. this approach is referred to as a
   data-driven approach, since it relies on first accumulating a training
   dataset of labeled images. here is an example of what such a dataset
   might look like:
   [trainset.jpg]
   an example training set for four visual categories. in practice we may
   have thousands of categories and hundreds of thousands of images for
   each category.

   the image classification pipeline. we   ve seen that the task in image
   classification is to take an array of pixels that represents a single
   image and assign a label to it. our complete pipeline can be formalized
   as follows:
     * input: our input consists of a set of n images, each labeled with
       one of k different classes. we refer to this data as the training
       set.
     * learning: our task is to use the training set to learn what every
       one of the classes looks like. we refer to this step as training a
       classifier, or learning a model.
     * evaluation: in the end, we evaluate the quality of the classifier
       by asking it to predict labels for a new set of images that it has
       never seen before. we will then compare the true labels of these
       images to the ones predicted by the classifier. intuitively, we   re
       hoping that a lot of the predictions match up with the true answers
       (which we call the ground truth).

nearest neighbor classifier

   as our first approach, we will develop what we call a nearest neighbor
   classifier. this classifier has nothing to do with convolutional neural
   networks and it is very rarely used in practice, but it will allow us
   to get an idea about the basic approach to an image classification
   problem.

   example image classification dataset: cifar-10. one popular toy image
   classification dataset is the [10]cifar-10 dataset. this dataset
   consists of 60,000 tiny images that are 32 pixels high and wide. each
   image is labeled with one of 10 classes (for example    airplane,
   automobile, bird, etc   ). these 60,000 images are partitioned into a
   training set of 50,000 images and a test set of 10,000 images. in the
   image below you can see 10 random example images from each one of the
   10 classes:
   [nn.jpg]
   left: example images from the [11]cifar-10 dataset. right: first column
   shows a few test images and next to each we show the top 10 nearest
   neighbors in the training set according to pixel-wise difference.

   suppose now that we are given the cifar-10 training set of 50,000
   images (5,000 images for every one of the labels), and we wish to label
   the remaining 10,000. the nearest neighbor classifier will take a test
   image, compare it to every single one of the training images, and
   predict the label of the closest training image. in the image above and
   on the right you can see an example result of such a procedure for 10
   example test images. notice that in only about 3 out of 10 examples an
   image of the same class is retrieved, while in the other 7 examples
   this is not the case. for example, in the 8th row the nearest training
   image to the horse head is a red car, presumably due to the strong
   black background. as a result, this image of a horse would in this case
   be mislabeled as a car.

   you may have noticed that we left unspecified the details of exactly
   how we compare two images, which in this case are just two blocks of 32
   x 32 x 3. one of the simplest possibilities is to compare the images
   pixel by pixel and add up all the differences. in other words, given
   two images and representing them as vectors \( i_1, i_2 \) , a
   reasonable choice for comparing them might be the l1 distance:

   where the sum is taken over all pixels. here is the procedure
   visualized:
   [nneg.jpeg]
   an example of using pixel-wise differences to compare two images with
   l1 distance (for one color channel in this example). two images are
   subtracted elementwise and then all differences are added up to a
   single number. if two images are identical the result will be zero. but
   if the images are very different the result will be large.

   let   s also look at how we might implement the classifier in code.
   first, let   s load the cifar-10 data into memory as 4 arrays: the
   training data/labels and the test data/labels. in the code below, xtr
   (of size 50,000 x 32 x 32 x 3) holds all the images in the training
   set, and a corresponding 1-dimensional array ytr (of length 50,000)
   holds the training labels (from 0 to 9):
xtr, ytr, xte, yte = load_cifar10('data/cifar10/') # a magic function we provide
# flatten out all images to be one-dimensional
xtr_rows = xtr.reshape(xtr.shape[0], 32 * 32 * 3) # xtr_rows becomes 50000 x 307
2
xte_rows = xte.reshape(xte.shape[0], 32 * 32 * 3) # xte_rows becomes 10000 x 307
2

   now that we have all images stretched out as rows, here is how we could
   train and evaluate a classifier:
nn = nearestneighbor() # create a nearest neighbor classifier class
nn.train(xtr_rows, ytr) # train the classifier on the training images and labels
yte_predict = nn.predict(xte_rows) # predict labels on the test images
# and now print the classification accuracy, which is the average number
# of examples that are correctly predicted (i.e. label matches)
print 'accuracy: %f' % ( np.mean(yte_predict == yte) )

   notice that as an evaluation criterion, it is common to use the
   accuracy, which measures the fraction of predictions that were correct.
   notice that all classifiers we will build satisfy this one common api:
   they have a train(x,y) function that takes the data and the labels to
   learn from. internally, the class should build some kind of model of
   the labels and how they can be predicted from the data. and then there
   is a predict(x) function, which takes new data and predicts the labels.
   of course, we   ve left out the meat of things - the actual classifier
   itself. here is an implementation of a simple nearest neighbor
   classifier with the l1 distance that satisfies this template:
import numpy as np

class nearestneighbor(object):
  def __init__(self):
    pass

  def train(self, x, y):
    """ x is n x d where each row is an example. y is 1-dimension of size n """
    # the nearest neighbor classifier simply remembers all the training data
    self.xtr = x
    self.ytr = y

  def predict(self, x):
    """ x is n x d where each row is an example we wish to predict label for """
    num_test = x.shape[0]
    # lets make sure that the output type matches the input type
    ypred = np.zeros(num_test, dtype = self.ytr.dtype)

    # loop over all test rows
    for i in xrange(num_test):
      # find the nearest training image to the i'th test image
      # using the l1 distance (sum of absolute value differences)
      distances = np.sum(np.abs(self.xtr - x[i,:]), axis = 1)
      min_index = np.argmin(distances) # get the index with smallest distance
      ypred[i] = self.ytr[min_index] # predict the label of the nearest example

    return ypred

   if you ran this code, you would see that this classifier only achieves
   38.6% on cifar-10. that   s more impressive than guessing at random
   (which would give 10% accuracy since there are 10 classes), but nowhere
   near human performance (which is [12]estimated at about 94%) or near
   state-of-the-art convolutional neural networks that achieve about 95%,
   matching human accuracy (see the [13]leaderboard of a recent kaggle
   competition on cifar-10).

   the choice of distance. there are many other ways of computing
   distances between vectors. another common choice could be to instead
   use the l2 distance, which has the geometric interpretation of
   computing the euclidean distance between two vectors. the distance
   takes the form:

   in other words we would be computing the pixelwise difference as
   before, but this time we square all of them, add them up and finally
   take the square root. in numpy, using the code from above we would need
   to only replace a single line of code. the line that computes the
   distances:
distances = np.sqrt(np.sum(np.square(self.xtr - x[i,:]), axis = 1))

   note that i included the np.sqrt call above, but in a practical nearest
   neighbor application we could leave out the square root operation
   because square root is a monotonic function. that is, it scales the
   absolute sizes of the distances but it preserves the ordering, so the
   nearest neighbors with or without it are identical. if you ran the
   nearest neighbor classifier on cifar-10 with this distance, you would
   obtain 35.4% accuracy (slightly lower than our l1 distance result).

   l1 vs. l2. it is interesting to consider differences between the two
   metrics. in particular, the l2 distance is much more unforgiving than
   the l1 distance when it comes to differences between two vectors. that
   is, the l2 distance prefers many medium disagreements to one big one.
   l1 and l2 distances (or equivalently the l1/l2 norms of the differences
   between a pair of images) are the most commonly used special cases of a
   [14]p-norm.

k - nearest neighbor classifier

   you may have noticed that it is strange to only use the label of the
   nearest image when we wish to make a prediction. indeed, it is almost
   always the case that one can do better by using what   s called a
   k-nearest neighbor classifier. the idea is very simple: instead of
   finding the single closest image in the training set, we will find the
   top k closest images, and have them vote on the label of the test
   image. in particular, when k = 1, we recover the nearest neighbor
   classifier. intuitively, higher values of k have a smoothing effect
   that makes the classifier more resistant to outliers:
   [knn.jpeg]
   an example of the difference between nearest neighbor and a 5-nearest
   neighbor classifier, using 2-dimensional points and 3 classes (red,
   blue, green). the colored regions show the decision boundaries induced
   by the classifier with an l2 distance. the white regions show points
   that are ambiguously classified (i.e. class votes are tied for at least
   two classes). notice that in the case of a nn classifier, outlier
   datapoints (e.g. green point in the middle of a cloud of blue points)
   create small islands of likely incorrect predictions, while the 5-nn
   classifier smooths over these irregularities, likely leading to better
   generalization on the test data (not shown). also note that the gray
   regions in the 5-nn image are caused by ties in the votes among the
   nearest neighbors (e.g. 2 neighbors are red, next two neighbors are
   blue, last neighbor is green).

   in practice, you will almost always want to use k-nearest neighbor. but
   what value of k should you use? we turn to this problem next.

validation sets for hyperparameter tuning

   the k-nearest neighbor classifier requires a setting for k. but what
   number works best? additionally, we saw that there are many different
   distance functions we could have used: l1 norm, l2 norm, there are many
   other choices we didn   t even consider (e.g. dot products). these
   choices are called hyperparameters and they come up very often in the
   design of many machine learning algorithms that learn from data. it   s
   often not obvious what values/settings one should choose.

   you might be tempted to suggest that we should try out many different
   values and see what works best. that is a fine idea and that   s indeed
   what we will do, but this must be done very carefully. in particular,
   we cannot use the test set for the purpose of tweaking hyperparameters.
   whenever you   re designing machine learning algorithms, you should think
   of the test set as a very precious resource that should ideally never
   be touched until one time at the very end. otherwise, the very real
   danger is that you may tune your hyperparameters to work well on the
   test set, but if you were to deploy your model you could see a
   significantly reduced performance. in practice, we would say that you
   overfit to the test set. another way of looking at it is that if you
   tune your hyperparameters on the test set, you are effectively using
   the test set as the training set, and therefore the performance you
   achieve on it will be too optimistic with respect to what you might
   actually observe when you deploy your model. but if you only use the
   test set once at end, it remains a good proxy for measuring the
   generalization of your classifier (we will see much more discussion
   surrounding generalization later in the class).

     evaluate on the test set only a single time, at the very end.

   luckily, there is a correct way of tuning the hyperparameters and it
   does not touch the test set at all. the idea is to split our training
   set in two: a slightly smaller training set, and what we call a
   validation set. using cifar-10 as an example, we could for example use
   49,000 of the training images for training, and leave 1,000 aside for
   validation. this validation set is essentially used as a fake test set
   to tune the hyper-parameters.

   here is what this might look like in the case of cifar-10:
# assume we have xtr_rows, ytr, xte_rows, yte as before
# recall xtr_rows is 50,000 x 3072 matrix
xval_rows = xtr_rows[:1000, :] # take first 1000 for validation
yval = ytr[:1000]
xtr_rows = xtr_rows[1000:, :] # keep last 49,000 for train
ytr = ytr[1000:]

# find hyperparameters that work best on the validation set
validation_accuracies = []
for k in [1, 3, 5, 10, 20, 50, 100]:

  # use a particular value of k and evaluation on validation data
  nn = nearestneighbor()
  nn.train(xtr_rows, ytr)
  # here we assume a modified nearestneighbor class that can take a k as input
  yval_predict = nn.predict(xval_rows, k = k)
  acc = np.mean(yval_predict == yval)
  print 'accuracy: %f' % (acc,)

  # keep track of what works on the validation set
  validation_accuracies.append((k, acc))

   by the end of this procedure, we could plot a graph that shows which
   values of k work best. we would then stick with this value and evaluate
   once on the actual test set.

     split your training set into training set and a validation set. use
     validation set to tune all hyperparameters. at the end run a single
     time on the test set and report performance.

   cross-validation. in cases where the size of your training data (and
   therefore also the validation data) might be small, people sometimes
   use a more sophisticated technique for hyperparameter tuning called
   cross-validation. working with our previous example, the idea is that
   instead of arbitrarily picking the first 1000 datapoints to be the
   validation set and rest training set, you can get a better and less
   noisy estimate of how well a certain value of k works by iterating over
   different validation sets and averaging the performance across these.
   for example, in 5-fold cross-validation, we would split the training
   data into 5 equal folds, use 4 of them for training, and 1 for
   validation. we would then iterate over which fold is the validation
   fold, evaluate the performance, and finally average the performance
   across the different folds.
   [cvplot.png]
   example of a 5-fold cross-validation run for the parameter k. for each
   value of k we train on 4 folds and evaluate on the 5th. hence, for each
   k we receive 5 accuracies on the validation fold (accuracy is the
   y-axis, each result is a point). the trend line is drawn through the
   average of the results for each k and the error bars indicate the
   standard deviation. note that in this particular case, the
   cross-validation suggests that a value of about k = 7 works best on
   this particular dataset (corresponding to the peak in the plot). if we
   used more than 5 folds, we might expect to see a smoother (i.e. less
   noisy) curve.

   in practice. in practice, people prefer to avoid cross-validation in
   favor of having a single validation split, since cross-validation can
   be computationally expensive. the splits people tend to use is between
   50%-90% of the training data for training and rest for validation.
   however, this depends on multiple factors: for example if the number of
   hyperparameters is large you may prefer to use bigger validation
   splits. if the number of examples in the validation set is small
   (perhaps only a few hundred or so), it is safer to use
   cross-validation. typical number of folds you can see in practice would
   be 3-fold, 5-fold or 10-fold cross-validation.
   [crossval.jpeg]
   common data splits. a training and test set is given. the training set
   is split into folds (for example 5 folds here). the folds 1-4 become
   the training set. one fold (e.g. fold 5 here in yellow) is denoted as
   the validation fold and is used to tune the hyperparameters.
   cross-validation goes a step further and iterates over the choice of
   which fold is the validation fold, separately from 1-5. this would be
   referred to as 5-fold cross-validation. in the very end once the model
   is trained and all the best hyperparameters were determined, the model
   is evaluated a single time on the test data (red).

   pros and cons of nearest neighbor classifier.

   it is worth considering some advantages and drawbacks of the nearest
   neighbor classifier. clearly, one advantage is that it is very simple
   to implement and understand. additionally, the classifier takes no time
   to train, since all that is required is to store and possibly index the
   training data. however, we pay that computational cost at test time,
   since classifying a test example requires a comparison to every single
   training example. this is backwards, since in practice we often care
   about the test time efficiency much more than the efficiency at
   training time. in fact, the deep neural networks we will develop later
   in this class shift this tradeoff to the other extreme: they are very
   expensive to train, but once the training is finished it is very cheap
   to classify a new test example. this mode of operation is much more
   desirable in practice.

   as an aside, the computational complexity of the nearest neighbor
   classifier is an active area of research, and several approximate
   nearest neighbor (ann) algorithms and libraries exist that can
   accelerate the nearest neighbor lookup in a dataset (e.g. [15]flann).
   these algorithms allow one to trade off the correctness of the nearest
   neighbor retrieval with its space/time complexity during retrieval, and
   usually rely on a pre-processing/indexing stage that involves building
   a kdtree, or running the id116 algorithm.

   the nearest neighbor classifier may sometimes be a good choice in some
   settings (especially if the data is low-dimensional), but it is rarely
   appropriate for use in practical image classification settings. one
   problem is that images are high-dimensional objects (i.e. they often
   contain many pixels), and distances over high-dimensional spaces can be
   very counter-intuitive. the image below illustrates the point that the
   pixel-based l2 similarities we developed above are very different from
   perceptual similarities:
   [samenorm.png]
   pixel-based distances on high-dimensional data (and images especially)
   can be very unintuitive. an original image (left) and three other
   images next to it that are all equally far away from it based on l2
   pixel distance. clearly, the pixel-wise distance does not correspond at
   all to perceptual or semantic similarity.

   here is one more visualization to convince you that using pixel
   differences to compare images is inadequate. we can use a visualization
   technique called [16]id167 to take the cifar-10 images and embed them
   in two dimensions so that their (local) pairwise distances are best
   preserved. in this visualization, images that are shown nearby are
   considered to be very near according to the l2 pixelwise distance we
   developed above:
   [pixels_embed_cifar10.jpg]
   cifar-10 images embedded in two dimensions with id167. images that are
   nearby on this image are considered to be close based on the l2 pixel
   distance. notice the strong effect of background rather than semantic
   class differences. click [17]here for a bigger version of this
   visualization.

   in particular, note that images that are nearby each other are much
   more a function of the general color distribution of the images, or the
   type of background rather than their semantic identity. for example, a
   dog can be seen very near a frog since both happen to be on white
   background. ideally we would like images of all of the 10 classes to
   form their own clusters, so that images of the same class are nearby to
   each other regardless of irrelevant characteristics and variations
   (such as the background). however, to get this property we will have to
   go beyond raw pixels.

summary

   in summary:
     * we introduced the problem of image classification, in which we are
       given a set of images that are all labeled with a single category.
       we are then asked to predict these categories for a novel set of
       test images and measure the accuracy of the predictions.
     * we introduced a simple classifier called the nearest neighbor
       classifier. we saw that there are multiple hyper-parameters (such
       as value of k, or the type of distance used to compare examples)
       that are associated with this classifier and that there was no
       obvious way of choosing them.
     * we saw that the correct way to set these hyperparameters is to
       split your training data into two: a training set and a fake test
       set, which we call validation set. we try different hyperparameter
       values and keep the values that lead to the best performance on the
       validation set.
     * if the lack of training data is a concern, we discussed a procedure
       called cross-validation, which can help reduce noise in estimating
       which hyperparameters work best.
     * once the best hyperparameters are found, we fix them and perform a
       single evaluation on the actual test set.
     * we saw that nearest neighbor can get us about 40% accuracy on
       cifar-10. it is simple to implement but requires us to store the
       entire training set and it is expensive to evaluate on a test
       image.
     * finally, we saw that the use of l1 or l2 distances on raw pixel
       values is not adequate since the distances correlate more strongly
       with backgrounds and color distributions of images than with their
       semantic content.

   in next lectures we will embark on addressing these challenges and
   eventually arrive at solutions that give 90% accuracies, allow us to
   completely discard the training set once learning is complete, and they
   will allow us to evaluate a test image in less than a millisecond.

summary: applying knn in practice

   if you wish to apply knn in practice (hopefully not on images, or
   perhaps as only a baseline) proceed as follows:
    1. preprocess your data: normalize the features in your data (e.g. one
       pixel in images) to have zero mean and unit variance. we will cover
       this in more detail in later sections, and chose not to cover data
       id172 in this section because pixels in images are usually
       homogeneous and do not exhibit widely different distributions,
       alleviating the need for data id172.
    2. if your data is very high-dimensional, consider using a
       id84 technique such as pca ([18]wiki ref,
       [19]cs229ref, [20]blog ref) or even [21]random projections.
    3. split your training data randomly into train/val splits. as a rule
       of thumb, between 70-90% of your data usually goes to the train
       split. this setting depends on how many hyperparameters you have
       and how much of an influence you expect them to have. if there are
       many hyperparameters to estimate, you should err on the side of
       having larger validation set to estimate them effectively. if you
       are concerned about the size of your validation data, it is best to
       split the training data into folds and perform cross-validation. if
       you can afford the computational budget it is always safer to go
       with cross-validation (the more folds the better, but more
       expensive).
    4. train and evaluate the knn classifier on the validation data (for
       all folds, if doing cross-validation) for many choices of k (e.g.
       the more the better) and across different distance types (l1 and l2
       are good candidates)
    5. if your knn classifier is running too long, consider using an
       approximate nearest neighbor library (e.g. [22]flann) to accelerate
       the retrieval (at cost of some accuracy).
    6. take note of the hyperparameters that gave the best results. there
       is a question of whether you should use the full training set with
       the best hyperparameters, since the optimal hyperparameters might
       change if you were to fold the validation data into your training
       set (since the size of the data would be larger). in practice it is
       cleaner to not use the validation data in the final classifier and
       consider it to be burned on estimating the hyperparameters.
       evaluate the best model on the test set. report the test set
       accuracy and declare the result to be the performance of the knn
       classifier on your data.

further reading

   here are some (optional) links you may find interesting for further
   reading:
     * [23]a few useful things to know about machine learning, where
       especially section 6 is related but the whole paper is a warmly
       recommended reading.
     * [24]recognizing and learning object categories, a short course of
       object categorization at iccv 2005.

     * [25]cs231n
     * [26]cs231n
     * [27]karpathy@cs.stanford.edu

references

   1. http://cs231n.github.io/
   2. http://cs231n.github.io/classification/#intro
   3. http://cs231n.github.io/classification/#nn
   4. http://cs231n.github.io/classification/#knn
   5. http://cs231n.github.io/classification/#val
   6. http://cs231n.github.io/classification/#procon
   7. http://cs231n.github.io/classification/#summary
   8. http://cs231n.github.io/classification/#summaryapply
   9. http://cs231n.github.io/classification/#reading
  10. http://www.cs.toronto.edu/~kriz/cifar.html
  11. http://www.cs.toronto.edu/~kriz/cifar.html
  12. http://karpathy.github.io/2011/04/27/manually-classifying-cifar10/
  13. http://www.kaggle.com/c/cifar-10/leaderboard
  14. http://planetmath.org/vectorpnorm
  15. http://www.cs.ubc.ca/research/flann/
  16. http://homepage.tudelft.nl/19j49/id167.html
  17. http://cs231n.github.io/assets/pixels_embed_cifar10_big.jpg
  18. http://en.wikipedia.org/wiki/principal_component_analysis
  19. http://cs229.stanford.edu/notes/cs229-notes10.pdf
  20. http://www.bigdataexaminer.com/understanding-dimensionality-reduction-principal-component-analysis-and-singular-value-decomposition/
  21. http://scikit-learn.org/stable/modules/random_projection.html
  22. http://www.cs.ubc.ca/research/flann/
  23. http://homes.cs.washington.edu/~pedrod/papers/cacm12.pdf
  24. http://people.csail.mit.edu/torralba/shortcourserloc/index.html
  25. https://github.com/cs231n
  26. https://twitter.com/cs231n
  27. mailto:karpathy@cs.stanford.edu
