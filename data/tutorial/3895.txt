   [1]cs231n convolutional neural networks for visual recognition

   in this assignment you will practice putting together a simple image
   classification pipeline, based on the k-nearest neighbor or the
   id166/softmax classifier. the goals of this assignment are as follows:
     * understand the basic image classification pipeline and the
       data-driven approach (train/predict stages)
     * understand the train/val/test splits and the use of validation data
       for hyperparameter tuning.
     * develop proficiency in writing efficient vectorized code with numpy
     * implement and apply a k-nearest neighbor (knn) classifier
     * implement and apply a multiclass support vector machine (id166)
       classifier
     * implement and apply a softmax classifier
     * implement and apply a two layer neural network classifier
     * understand the differences and tradeoffs between these classifiers
     * get a basic understanding of performance improvements from using
       higher-level representations than raw pixels (e.g. color
       histograms, histogram of gradient (hog) features)

setup

   you can work on the assignment in one of two ways: locally on your own
   machine, or on a virtual machine on google cloud.

working remotely on google cloud (recommended)

   note: after following these instructions, make sure you go to download
   data below (you can skip the working locally section).

   as part of this course, you can use google cloud for your assignments.
   we recommend this route for anyone who is having trouble with
   installation set-up, or if you would like to use better cpu/gpu
   resources than you may have locally. please see the set-up tutorial
   [2]here for more details. :)

working locally

   get the code as a zip file [3]here. as for the dependencies:

   installing python 3.5+: to use python3, make sure to install version
   3.5 or 3.6 on your local machine. if you are on mac os x, you can do
   this using [4]homebrew with brew install python3. you can find
   instructions for ubuntu [5]here.

   virtual environment: if you decide to work locally, we recommend using
   [6]virtual environment for the project. if you choose not to use a
   virtual environment, it is up to you to make sure that all dependencies
   for the code are installed globally on your machine. to set up a
   virtual environment, run the following:
cd assignment1
sudo pip install virtualenv      # this may already be installed
virtualenv -p python3 .env       # create a virtual environment (python3)
# note: you can also use "virtualenv .env" to use your default python (usually p
ython 2.7)
source .env/bin/activate         # activate the virtual environment
pip install -r requirements.txt  # install dependencies
# work on the assignment for a while ...
deactivate                       # exit the virtual environment

   note that every time you want to work on the assignment, you should run
   source .env/bin/activate (from within your assignment1 folder) to
   re-activate the virtual environment, and deactivate again whenever you
   are done.

download data:

   once you have the starter code (regardless of which method you choose
   above), you will need to download the cifar-10 dataset. run the
   following from the assignment1 directory:
cd cs231n/datasets
./get_datasets.sh

start ipython:

   after you have the cifar-10 data, you should start the ipython notebook
   server from the assignment1 directory, with the jupyter notebook
   command. (see the [7]google cloud tutorial for any additional steps you
   may need to do for setting this up, if you are working remotely)

   if you are unfamiliar with ipython, you can also refer to our
   [8]ipython tutorial.

some notes

   note 1: this year, the assignment1 code has been tested to be
   compatible with python versions 2.7, 3.5, 3.6 (it may work with other
   versions of 3.x, but we won   t be officially supporting them). you will
   need to make sure that during your virtualenv setup that the correct
   version of python is used. you can confirm your python version by (1)
   activating your virtualenv and (2) running which python.

   note 2: if you are working in a virtual environment on osx, you may
   potentially encounter errors with matplotlib due to the [9]issues
   described here. in our testing, it seems that this issue is no longer
   present with the most recent version of matplotlib, but if you do end
   up running into this issue you may have to use the start_ipython_osx.sh
   script from the assignment1 directory (instead of jupyter notebook
   above) to launch your ipython notebook server. note that you may have
   to modify some variables within the script to match your version of
   python/installation directory. the script assumes that your virtual
   environment is named .env.

submitting your work:

   whether you work on the assignment locally or using google cloud, once
   you are done working run the collectsubmission.sh script; this will
   produce a file called assignment1.zip. please submit this file on
   [10]canvas.

q1: k-nearest neighbor classifier (20 points)

   the ipython notebook knn.ipynb will walk you through implementing the
   knn classifier.

q2: training a support vector machine (25 points)

   the ipython notebook id166.ipynb will walk you through implementing the
   id166 classifier.

q3: implement a softmax classifier (20 points)

   the ipython notebook softmax.ipynb will walk you through implementing
   the softmax classifier.

q4: two-layer neural network (25 points)

   the ipython notebook two_layer_net.ipynb will walk you through the
   implementation of a two-layer neural network classifier.

q5: higher level representations: image features (10 points)

   the ipython notebook features.ipynb will walk you through this
   exercise, in which you will examine the improvements gained by using
   higher-level representations as opposed to using raw pixel values.

q6: cool bonus: do something extra! (+10 points)

   implement, investigate or analyze something extra surrounding the
   topics in this assignment, and using the code you developed. for
   example, is there some other interesting question we could have asked?
   is there any insightful visualization you can plot? or anything fun to
   look at? or maybe you can experiment with a spin on the id168?
   if you try out something cool we   ll give you up to 10 extra points and
   may feature your results in the lecture.

     * [11]cs231n
     * [12]cs231n
     * [13]karpathy@cs.stanford.edu

references

   1. http://cs231n.github.io/
   2. http://cs231n.github.io/gce-tutorial/
   3. http://cs231n.stanford.edu/assignments/2017/spring1617_assignment1.zip
   4. https://brew.sh/
   5. https://www.digitalocean.com/community/tutorials/how-to-install-python-3-and-set-up-a-local-programming-environment-on-ubuntu-16-04
   6. http://docs.python-guide.org/en/latest/dev/virtualenvs/
   7. http://cs231n.github.io/gce-tutorial/
   8. http://cs231n.github.io/ipython-tutorial
   9. http://matplotlib.org/faq/virtualenv_faq.html
  10. https://canvas.stanford.edu/courses/66461/
  11. https://github.com/cs231n
  12. https://twitter.com/cs231n
  13. mailto:karpathy@cs.stanford.edu
