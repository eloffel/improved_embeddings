   [1]cs231n convolutional neural networks for visual recognition

   in this assignment you will practice writing id26 code, and
   training neural networks and convolutional neural networks. the goals
   of this assignment are as follows:
     * understand neural networks and how they are arranged in layered
       architectures
     * understand and be able to implement (vectorized) id26
     * implement various update rules used to optimize neural networks
     * implement batch id172 for training deep networks
     * implement dropout to regularize networks
     * effectively cross-validate and find the best hyperparameters for
       neural network architecture
     * understand the architecture of convolutional neural networks and
       train gain experience with training these models on data

setup

   you can work on the assignment in one of two ways: locally on your own
   machine, or on a virtual machine on google cloud.

working remotely on google cloud (recommended)

   note: after following these instructions, make sure you go to working
   on the assignment below (you can skip the working locally section).

   as part of this course, you can use google cloud for your assignments.
   we recommend this route for anyone who is having trouble with
   installation set-up, or if you would like to use better cpu/gpu
   resources than you may have locally.

gpu resources

   a gpu will only help on question 5. please see the google cloud gpu
   set-up tutorial [2]here for instructions. the gpu instances are much
   more expensive, so use them only when needed.

   once you   ve got the cloud instance running, make sure to run the
   following line to enter the virtual environment that we prepared for
   you (you do not need to make your own virtual environment):
source /home/cs231n/myve35/bin/activate

   we strongly recommend using google cloud with gpu support for the
   question 5 of this assignment (the tensorflow or pytorch notebooks),
   since your training will go much, much faster. however, it will not
   help on any of the other questions.

working locally

   here   s how you install the necessary dependencies:

   (optional) installing gpu drivers: if you choose to work locally, you
   are at no disadvantage for the first parts of the assignment. for the
   last question, which is in tensorflow or pytorch, however, having a gpu
   will be a significant advantage. we recommend using a google cloud
   instance with a gpu, at least for this part. if you have your own
   nvidia gpu, however, and wish to use that, that   s fine     you   ll need to
   install the drivers for your gpu, install cuda, install cudnn, and then
   install either [3]tensorflow or [4]pytorch. you could theoretically do
   the entire assignment with no gpus, though this will make training much
   slower in the last part. however, our reference code runs in 10-15
   minutes on a dual-core laptop without a gpu, so it is certainly
   possible.

   installing python 3.5+: to use python3, make sure to install version
   3.5 or 3.6 on your local machine. if you are on mac os x, you can do
   this using [5]homebrew with brew install python3. you can find
   instructions for ubuntu [6]here.

   virtual environment: if you decide to work locally, we recommend using
   [7]virtual environment for the project. if you choose not to use a
   virtual environment, it is up to you to make sure that all dependencies
   for the code are installed globally on your machine. to set up a
   virtual environment, run the following:
cd assignment2
sudo pip install virtualenv      # this may already be installed
python3 -m venv .env                     # create a virtual environment (python3
)
source .env/bin/activate         # activate the virtual environment
pip install -r requirements.txt  # install dependencies
# note that this does not install tensorflow or pytorch,
# which you need to do yourself.

# work on the assignment for a while ...
# ... and when you're done:
deactivate                       # exit the virtual environment

   note that every time you want to work on the assignment, you should run
   source .env/bin/activate (from within your assignment2 folder) to
   re-activate the virtual environment, and deactivate again whenever you
   are done.

working on the assignment:

   get the code as a zip file [8]here.

download data:

   once you have the starter code (regardless of which method you choose
   above), you will need to download the cifar-10 dataset. run the
   following from the assignment2 directory:
cd cs231n/datasets
./get_datasets.sh

start ipython:

   after you have the cifar-10 data, you should start the ipython notebook
   server from the assignment2 directory, with the jupyter notebook
   command. (see the [9]google cloud tutorial for any additional steps you
   may need to do for setting this up, if you are working remotely)

   if you are unfamiliar with ipython, you can also refer to our
   [10]ipython tutorial.

some notes

   note 1: this year, the assignment2 code has been tested to be
   compatible with python versions 3.5 and 3.6 (it may work with other
   versions of 3.x, but we won   t be officially supporting them). for this
   assignment, we are not officially supporting python2. use it at your
   own risk. you will need to make sure that during your virtualenv setup
   that the correct version of python is used. you can confirm your python
   version by (1) activating your virtualenv and (2) running python
   --version.

   note 2: if you are working in a virtual environment on osx, you may
   potentially encounter errors with matplotlib due to the [11]issues
   described here. in our testing, it seems that this issue is no longer
   present with the most recent version of matplotlib, but if you do end
   up running into this issue you may have to use the start_ipython_osx.sh
   script from the assignment1 directory (instead of jupyter notebook
   above) to launch your ipython notebook server. note that you may have
   to modify some variables within the script to match your version of
   python/installation directory. the script assumes that your virtual
   environment is named .env.

submitting your work:

   whether you work on the assignment locally or using google cloud, once
   you are done working run the collectsubmission.sh script; this will
   produce a file called assignment2.zip. please submit this file on
   [12]canvas.

q1: fully-connected neural network (25 points)

   the ipython notebook fullyconnectednets.ipynb will introduce you to our
   modular layer design, and then use those layers to implement
   fully-connected networks of arbitrary depth. to optimize these models
   you will implement several popular update rules.

q2: batch id172 (25 points)

   in the ipython notebook batchid172.ipynb you will implement
   batch id172, and use it to train deep fully-connected networks.

q3: dropout (10 points)

   the ipython notebook dropout.ipynb will help you implement dropout and
   explore its effects on model generalization.

q4: convolutional networks (30 points)

   in the ipython notebook convolutionalnetworks.ipynb you will implement
   several new layers that are commonly used in convolutional networks.

q5: pytorch / tensorflow on cifar-10 (10 points)

   for this last part, you will be working in either tensorflow or
   pytorch, two popular and powerful deep learning frameworks. you only
   need to complete one of these two notebooks. you do not need to do
   both, but a very small amount of extra credit will be awarded to those
   who do.

   open up either pytorch.ipynb or tensorflow.ipynb. there, you will learn
   how the framework works, culminating in training a convolutional
   network of your own design on cifar-10 to get the best performance you
   can.

q5: do something extra! (up to +10 points)

   in the process of training your network, you should feel free to
   implement anything that you want to get better performance. you can
   modify the solver, implement additional layers, use different types of
   id173, use an ensemble of models, or anything else that comes
   to mind. if you implement these or other ideas not covered in the
   assignment then you will be awarded some bonus points.

     * [13]cs231n
     * [14]cs231n
     * [15]karpathy@cs.stanford.edu

references

   1. http://cs231n.github.io/
   2. http://cs231n.github.io/gce-tutorial-gpus/
   3. https://www.tensorflow.org/install/
   4. http://pytorch.org/
   5. https://brew.sh/
   6. https://www.digitalocean.com/community/tutorials/how-to-install-python-3-and-set-up-a-local-programming-environment-on-ubuntu-16-04
   7. http://docs.python-guide.org/en/latest/dev/virtualenvs/
   8. http://cs231n.stanford.edu/assignments/2017/spring1617_assignment2.zip
   9. http://cs231n.github.io/gce-tutorial/
  10. http://cs231n.github.io/ipython-tutorial
  11. http://matplotlib.org/faq/virtualenv_faq.html
  12. https://canvas.stanford.edu/courses/66461/
  13. https://github.com/cs231n
  14. https://twitter.com/cs231n
  15. mailto:karpathy@cs.stanford.edu
