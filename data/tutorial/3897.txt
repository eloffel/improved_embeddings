   [1]cs231n convolutional neural networks for visual recognition

   in this assignment you will implement recurrent networks, and apply
   them to image captioning on microsoft coco. you will also explore
   methods for visualizing the features of a pretrained model on id163,
   and also this model to implement style transfer. finally, you will
   train a generative adversarial network to generate images that look
   like a training dataset!

   the goals of this assignment are as follows:
     * understand the architecture of recurrent neural networks (id56s) and
       how they operate on sequences by sharing weights over time
     * understand and implement both vanilla id56s and long-short term
       memory (lstm) id56s
     * understand how to sample from an id56 language model at test-time
     * understand how to combine convolutional neural nets and recurrent
       nets to implement an image captioning system
     * understand how a trained convolutional network can be used to
       compute gradients with respect to the input image
     * implement and different applications of image gradients, including
       saliency maps, fooling images, class visualizations.
     * understand and implement style transfer.
     * understand how to train and implement a generative adversarial
       network (gan) to produce images that look like a dataset.

setup

   you can work on the assignment in one of two ways: locally on your own
   machine, or on a virtual machine on google cloud.

working remotely on google cloud (recommended)

   note: after following these instructions, make sure you go to working
   on the assignment below (you can skip the working locally section).

   as part of this course, you can use google cloud for your assignments.
   we recommend this route for anyone who is having trouble with
   installation set-up, or if you would like to use better cpu/gpu
   resources than you may have locally.

gpu resources

   gpus are not required for this assignment, but will help to speed up
   training and processing time for questions 3-5. please see the google
   cloud gpu set-up tutorial [2]here for instructions. the gpu instances
   are much more expensive, so use them only when needed. we only
   recommend a gpu for q5 (gans), q3 and q4 run in under a minute even on
   cpu, while q5 can take 30+ minutes for your model to converge on a cpu
   (versus under a minute on the google cloud gpus).

   once you   ve got the cloud instance running, make sure to run the
   following line to enter the virtual environment that we prepared for
   you (you do not need to make your own virtual environment):
source /home/cs231n/myve35/bin/activate

   we recommend using google cloud with gpu support for the question 5 of
   this assignment (the gan notebook), since your training will go much,
   much faster. however, it will not help at all for questions 1 and 2
   (id56 and lstm), and questions 3 and 4 are still fast on cpu (these
   notebook should run in a few minutes).

what do i do if my google cloud gpus disappeared?

   you might note that sometimes, your gpus are no longer accessible on
   your google cloud instance after you restart it. if this happens,
   please run the following commands in your assignment3 directory:
sudo apt-get remove unattended-upgrades
chmod u+x where_are_my_drivers.sh
./where_are_my_drivers.sh

   if this isn   t working, you can find more detailed instructions and
   manual ways of fixing this [3]here. you should follow the    ubuntu
   16.04    instructions.

working locally

   here   s how you install the necessary dependencies:

   (optional) installing gpu drivers: if you choose to work locally, you
   are at no disadvantage for the first parts of the assignment. for the
   last question, which is in tensorflow or pytorch, however, having a gpu
   will be a significant advantage. we recommend using a google cloud
   instance with a gpu, at least for this part. if you have your own
   nvidia gpu, however, and wish to use that, that   s fine     you   ll need to
   install the drivers for your gpu, install cuda, install cudnn, and then
   install either [4]tensorflow or [5]pytorch. you could theoretically do
   the entire assignment with no gpus, though this will make training much
   slower in the last part. however, our reference code runs in 10-15
   minutes on a dual-core laptop without a gpu, so it is certainly
   possible.

   installing python 3.5+: to use python3, make sure to install version
   3.5 or 3.6 on your local machine. if you are on mac os x, you can do
   this using [6]homebrew with brew install python3. you can find
   instructions for ubuntu [7]here.

   virtual environment: if you decide to work locally, we recommend using
   [8]virtual environment for the project. if you choose not to use a
   virtual environment, it is up to you to make sure that all dependencies
   for the code are installed globally on your machine. to set up a
   virtual environment, run the following:
cd assignment2
sudo pip install virtualenv      # this may already be installed
virtualenv -p python3 .env               # create a virtual environment (python3
)
source .env/bin/activate         # activate the virtual environment
pip install -r requirements.txt  # install dependencies
# note that this does not install tensorflow or pytorch,
# which you need to do yourself.

# work on the assignment for a while ...
# ... and when you're done:
deactivate                       # exit the virtual environment

   note that every time you want to work on the assignment, you should run
   source .env/bin/activate (from within your assignment3 folder) to
   re-activate the virtual environment, and deactivate again whenever you
   are done.

working on the assignment:

get the code as a zip file [9]here.

download data:

   once you have the starter code (regardless of which method you choose
   above), you will need to download the coco captioning data, pretrained
   squeezenet model (tensorflow-only), and a few id163 validation
   images. run the following from the assignment3 directory:
cd cs231n/datasets
./get_assignment3_data.sh

start ipython:

   after you have downloaded the data, you should start the ipython
   notebook server from the assignment3 directory, with the jupyter
   notebook command. (see the [10]google cloud tutorial for any additional
   steps you may need to do for setting this up, if you are working
   remotely)

   if you are unfamiliar with ipython, you can also refer to our
   [11]ipython tutorial.

some notes

   note 1: this year, the assignment3 code has been tested to be
   compatible with python versions 3.5 and 3.6 (it may work with other
   versions of 3.x, but we won   t be officially supporting them). for this
   assignment, we are not officially supporting python2. use it at your
   own risk. you will need to make sure that during your virtualenv setup
   that the correct version of python is used. you can confirm your python
   version by (1) activating your virtualenv and (2) running python
   --version.

   note 2: if you are working in a virtual environment on osx, you may
   potentially encounter errors with matplotlib due to the [12]issues
   described here. in our testing, it seems that this issue is no longer
   present with the most recent version of matplotlib, but if you do end
   up running into this issue you may have to use the start_ipython_osx.sh
   script from the assignment3 directory (instead of jupyter notebook
   above) to launch your ipython notebook server. note that you may have
   to modify some variables within the script to match your version of
   python/installation directory. the script assumes that your virtual
   environment is named .env.

submitting your work:

   whether you work on the assignment locally or using google cloud, once
   you are done working run the collectsubmission.sh script; this will
   produce a file called assignment3.zip. please submit this file on
   [13]canvas.

you can do questions 3, 4, and 5 in tensorflow or pytorch. there are two
versions of each notebook, with suffixes -tensorflow or -pytorch. no extra
credit will be awarded if you do a question in both tensorflow and pytorch.

q1: image captioning with vanilla id56s (25 points)

   the jupyter notebook id56_captioning.ipynb will walk you through the
   implementation of an image captioning system on ms-coco using vanilla
   recurrent networks.

q2: image captioning with lstms (30 points)

   the jupyter notebook lstm_captioning.ipynb will walk you through the
   implementation of long-short term memory (lstm) id56s, and apply them to
   image captioning on ms-coco.

q3: network visualization: saliency maps, class visualization, and fooling
images (15 points)

   the jupyter notebooks networkvisualization-tensorflow.ipynb
   /networkvisualization-pytorch.ipynb will introduce the pretrained
   squeezenet model, compute gradients with respect to images, and use
   them to produce saliency maps and fooling images. please complete only
   one of the notebooks (tensorflow or pytorch). no extra credit will be
   awardeded if you complete both notebooks.

q4: style transfer (15 points)

   in the jupyter notebooks
   styletransfer-tensorflow.ipynb/styletransfer-pytorch.ipynb you will
   learn how to create images with the content of one image but the style
   of another. please complete only one of the notebooks (tensorflow or
   pytorch). no extra credit will be awardeded if you complete both
   notebooks.

q5: id3 (15 points)

   in the jupyter notebooks gans-tensorflow.ipynb/gans-pytorch.ipynb you
   will learn how to generate images that match a training dataset, and
   use these models to improve classifier performance when training on a
   large amount of unlabeled data and a small amount of labeled data.
   please complete only one of the notebooks (tensorflow or pytorch). no
   extra credit will be awarded if you complete both notebooks.

     * [14]cs231n
     * [15]cs231n
     * [16]karpathy@cs.stanford.edu

references

   1. http://cs231n.github.io/
   2. http://cs231n.github.io/gce-tutorial-gpus/
   3. https://cloud.google.com/compute/docs/gpus/add-gpus#install-driver-script
   4. https://www.tensorflow.org/install/
   5. http://pytorch.org/
   6. https://brew.sh/
   7. https://www.digitalocean.com/community/tutorials/how-to-install-python-3-and-set-up-a-local-programming-environment-on-ubuntu-16-04
   8. http://docs.python-guide.org/en/latest/dev/virtualenvs/
   9. http://cs231n.stanford.edu/assignments/2017/spring1617_assignment3_v3.zip
  10. http://cs231n.github.io/gce-tutorial/
  11. http://cs231n.github.io/ipython-tutorial
  12. http://matplotlib.org/faq/virtualenv_faq.html
  13. https://canvas.stanford.edu/courses/66461/
  14. https://github.com/cs231n
  15. https://twitter.com/cs231n
  16. mailto:karpathy@cs.stanford.edu
