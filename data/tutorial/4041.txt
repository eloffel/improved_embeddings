cs229 lecture notes

andrew ng

part ix
the em algorithm

in the previous set of notes, we talked about the em algorithm as applied to
   tting a mixture of gaussians. in this set of notes, we give a broader view
of the em algorithm, and show how it can be applied to a large family of
estimation problems with latent variables. we begin our discussion with a
very useful result called jensen   s inequality

1 jensen   s inequality

let f be a function whose domain is the set of real numbers. recall that
f is a convex function if f(cid:48)(cid:48)(x)     0 (for all x     r). in the case of f taking
vector-valued inputs, this is generalized to the condition that its hessian h
is positive semi-de   nite (h     0). if f(cid:48)(cid:48)(x) > 0 for all x, then we say f is
strictly convex (in the vector-valued case, the corresponding statement is
that h must be positive de   nite, written h > 0). jensen   s inequality can
then be stated as follows:

theorem. let f be a convex function, and let x be a random variable.
then:

e[f (x)]     f (ex).

moreover, if f is strictly convex, then e[f (x)] = f (ex) holds true if and
only if x = e[x] with id203 1 (i.e., if x is a constant).

recall our convention of occasionally dropping the parentheses when writ-

ing expectations, so in the theorem above, f (ex) = f (e[x]).

for an interpretation of the theorem, consider the    gure below.

1

2

here, f is a convex function shown by the solid line. also, x is a random
variable that has a 0.5 chance of taking the value a, and a 0.5 chance of
taking the value b (indicated on the x-axis). thus, the expected value of x
is given by the midpoint between a and b.

we also see the values f (a), f (b) and f (e[x]) indicated on the y-axis.
moreover, the value e[f (x)] is now the midpoint on the y-axis between f (a)
and f (b). from our example, we see that because f is convex, it must be the
case that e[f (x)]     f (ex).

incidentally, quite a lot of people have trouble remembering which way
the inequality goes, and remembering a picture like this is a good way to
quickly    gure out the answer.
remark. recall that f is [strictly] concave if and only if    f is [strictly]
convex (i.e., f(cid:48)(cid:48)(x)     0 or h     0). jensen   s inequality also holds for concave
functions f , but with the direction of all the inequalities reversed (e[f (x)]    
f (ex), etc.).

2 the em algorithm

suppose we have an estimation problem in which we have a training set
{x(1), . . . , x(m)} consisting of m independent examples. we wish to    t the

ae[x]bf(a)f(b)f(ex)e[f(x)]f3

(1)

(2)

(3)

parameters of a model p(x, z) to the data, where the likelihood is given by

m(cid:88)
m(cid:88)

i=1

(cid:96)(  ) =

=

log p(x;   )

(cid:88)

log

p(x, z;   ).

i=1

z

but, explicitly    nding the maximum likelihood estimates of the parameters   
may be hard. here, the z(i)   s are the latent random variables; and it is often
the case that if the z(i)   s were observed, then id113
would be easy.

in such a setting, the em algorithm gives an e   cient method for max-
imum likelihood estimation. maximizing (cid:96)(  ) explicitly might be di   cult,
and our strategy will be to instead repeatedly construct a lower-bound on (cid:96)
(e-step), and then optimize that lower-bound (m-step).
z qi(z) = 1, qi(z)    

for each i, let qi be some distribution over the z   s ((cid:80)

0). consider the following:1

(cid:88)

i

log p(x(i);   ) =

(cid:88)
(cid:88)
    (cid:88)

=

i

i

log

(cid:88)
(cid:88)
(cid:88)

log

z(i)

z(i)

i

z(i)

p(x(i), z(i);   )

qi(z(i))

p(x(i), z(i);   )

qi(z(i))

qi(z(i)) log

p(x(i), z(i);   )

qi(z(i))

(cid:88)

the last step of this derivation used jensen   s inequality. speci   cally, f (x) =
log x is a concave function, since f(cid:48)(cid:48)(x) =    1/x2 < 0 over its domain x     r+.
also, the term

(cid:20)p(x(i), z(i);   )

(cid:21)

in the summation is just an expectation of the quantity(cid:2)p(x(i), z(i);   )/qi(z(i))(cid:3)

qi(z(i))

qi(z(i))

z(i)

with respect to z(i) drawn according to the distribution given by qi. by
jensen   s inequality, we have

(cid:20)p(x(i), z(i);   )

(cid:21)(cid:19)

qi(z(i))

(cid:20)

(cid:18) p(x(i), z(i);   )

(cid:19)(cid:21)

qi(z(i))

,

    ez(i)   qi

f

f

ez(i)   qi

(cid:18)

1if z were continuous, then qi would be a density, and the summations over z in our

discussion are replaced with integrals over z.

4

where the    z(i)     qi    subscripts above indicate that the expectations are
with respect to z(i) drawn from qi. this allowed us to go from equation (2)
to equation (3).

now, for any set of distributions qi, the formula (3) gives a lower-bound
on (cid:96)(  ). there   re many possible choices for the qi   s. which should we
choose? well, if we have some current guess    of the parameters, it seems
natural to try to make the lower-bound tight at that value of   . i.e., we   ll
make the inequality above hold with equality at our particular value of   .
(we   ll see later how this enables us to prove that (cid:96)(  ) increases monotonically
with successive iterations of em.)

to make the bound tight for a particular value of   , we need for the step
involving jensen   s inequality in our derivation above to hold with equality.
for this to be true, we know it is su   cient that the expectation be taken
over a    constant   -valued random variable. i.e., we require that

p(x(i), z(i);   )

qi(z(i))

= c

for some constant c that does not depend on z(i). this is easily accomplished
by choosing

qi(z(i))     p(x(i), z(i);   ).
z qi(z(i)) = 1 (because it is a distribution), this

actually, since we know (cid:80)

further tells us that

qi(z(i)) =

(cid:80)

p(x(i), z(i);   )
z p(x(i), z;   )

p(x(i), z(i);   )

=
p(x(i);   )
= p(z(i)|x(i);   )

thus, we simply set the qi   s to be the posterior distribution of the z(i)   s
given x(i) and the setting of the parameters   .

now, for this choice of the qi   s, equation (3) gives a lower-bound on the
loglikelihood (cid:96) that we   re trying to maximize. this is the e-step.
in the
m-step of the algorithm, we then maximize our formula in equation (3) with
respect to the parameters to obtain a new setting of the      s. repeatedly
carrying out these two steps gives us the em algorithm, which is as follows:

repeat until convergence {

5

(e-step) for each i, set

qi(z(i)) := p(z(i)|x(i);   ).

(m-step) set

   := arg max

  

(cid:88)

(cid:88)

i

z(i)

qi(z(i)) log

p(x(i), z(i);   )

qi(z(i))

.

}
how do we know if this algorithm will converge? well, suppose   (t) and
  (t+1) are the parameters from two successive iterations of em. we will now
prove that (cid:96)(  (t))     (cid:96)(  (t+1)), which shows em always monotonically im-
proves the log-likelihood. the key to showing this result lies in our choice of
the qi   s. speci   cally, on the iteration of em in which the parameters had
i (z(i)) := p(z(i)|x(i);   (t)). we
started out as   (t), we would have chosen q(t)
saw earlier that this choice ensures that jensen   s inequality, as applied to get
equation (3), holds with equality, and hence

(cid:88)

(cid:88)

i

z(i)

(cid:96)(  (t)) =

q(t)

i (z(i)) log

p(x(i), z(i);   (t))

q(t)

i (z(i))

.

the parameters   (t+1) are then obtained by maximizing the right hand side
of the equation above. thus,

q(t)

i (z(i)) log

q(t)

i (z(i)) log

p(x(i), z(i);   (t+1))

q(t)

i (z(i))

p(x(i), z(i);   (t))

q(t)

i (z(i))

(4)

(5)

(6)

this    rst inequality comes from the fact that

qi(z(i)) log

p(x(i), z(i);   )

qi(z(i))

holds for any values of qi and   , and in particular holds for qi = q(t)
,
i
   =   (t+1). to get equation (5), we used the fact that   (t+1) is chosen
explicitly to be

(cid:88)

(cid:88)

i

z(i)

arg max

  

qi(z(i)) log

p(x(i), z(i);   )

qi(z(i))

,

(cid:96)(  (t+1))     (cid:88)
    (cid:88)

i

(cid:88)
(cid:88)

z(i)

i

z(i)
= (cid:96)(  (t))

(cid:96)(  )    (cid:88)

(cid:88)

i

z(i)

6

and thus this formula evaluated at   (t+1) must be equal to or larger than the
same formula evaluated at   (t). finally, the step used to get (6) was shown
earlier, and follows from q(t)
i having been chosen to make jensen   s inequality
hold with equality at   (t).

hence, em causes the likelihood to converge monotonically. in our de-
scription of the em algorithm, we said we   d run it until convergence. given
the result that we just showed, one reasonable convergence test would be
to check if the increase in (cid:96)(  ) between successive iterations is smaller than
some tolerance parameter, and to declare convergence if em is improving
(cid:96)(  ) too slowly.

remark. if we de   ne

j(q,   ) =

(cid:88)

(cid:88)

i

z(i)

qi(z(i)) log

p(x(i), z(i);   )

qi(z(i))

,

then we know (cid:96)(  )     j(q,   ) from our previous derivation. the em can also
be viewed a coordinate ascent on j, in which the e-step maximizes it with
respect to q (check this yourself), and the m-step maximizes it with respect
to   .

3 mixture of gaussians revisited

armed with our general de   nition of the em algorithm, let   s go back to our
old example of    tting the parameters   ,    and    in a mixture of gaussians.
for the sake of brevity, we carry out the derivations for the m-step updates
only for    and   j, and leave the updates for   j as an exercise for the reader.
the e-step is easy. following our algorithm derivation above, we simply

calculate

j = qi(z(i) = j) = p (z(i) = j|x(i);   ,   ,   ).
w(i)

here,    qi(z(i) = j)    denotes the id203 of z(i) taking the value j under
the distribution qi.

next, in the m-step, we need to maximize, with respect to our parameters

7

p(x(i), z(i);   ,   ,   )

qi(z(i))

qi(z(i) = j) log

p(x(i)|z(i) = j;   ,   )p(z(i) = j;   )

(2  )n/2|  j|1/2 exp(cid:0)    1

1

qi(z(i) = j)
2(x(i)       j)t      1

j (x(i)       j)(cid:1)      j

w(i)
j

log

w(i)
j

  ,   ,   , the quantity

qi(z(i)) log

m(cid:88)

i=1

z(i)

(cid:88)
m(cid:88)
m(cid:88)

i=1

=

=

k(cid:88)
k(cid:88)

j=1

i=1

j=1

let   s maximize this with respect to   l. if we take the derivative with respect
to   l, we    nd

j (x(i)       j)(cid:1)      j

2(x(i)       j)t      1

w(i)
j

w(i)
j

1
2

(x(i)       j)t      1

j (x(i)       j)

m(cid:88)

k(cid:88)

i=1

j=1

     l

1

(2  )n/2|  j|1/2 exp(cid:0)    1
k(cid:88)

w(i)
j

log

m(cid:88)

=         l
m(cid:88)
m(cid:88)

1
2

i=1

=

=

i=1

i=1

j=1

l      l2  t
w(i)

l      1

(cid:0)     1

w(i)
l

l x(i)          1
l   l

l      1
l   l

l x(i)       t
(cid:1)
(cid:80)m
(cid:80)m

  l :=

i=1 w(i)
l x(i)
i=1 w(i)

l

,

setting this to zero and solving for   l therefore yields the update rule

which was what we had in the previous set of notes.

let   s do one more example, and derive the m-step update for the param-
eters   j. grouping together only the terms that depend on   j, we    nd that
we need to maximize

m(cid:88)

k(cid:88)

w(i)
j

log   j.

however, there is an additional constraint that the   j   s sum to 1, since they
represent the probabilities   j = p(z(i) = j;   ). to deal with the constraint

i=1

j=1

that(cid:80)k

j=1   j = 1, we construct the lagrangian

m(cid:88)

k(cid:88)

l(  ) =

w(i)
j

log   j +   (

i=1

j=1

j=1

8

  j     1),

k(cid:88)

where    is the lagrange multiplier.2 taking derivatives, we    nd

setting this to zero and solving, we get

  j =

. using the constraint that (cid:80)
i.e.,   j     (cid:80)m
j =(cid:80)m
(cid:80)k
that       =(cid:80)m
qi(z(i) = j), and since probabilities sum to 1, (cid:80)

j=1 w(i)

i=1 w(i)

i=1

j

have our m-step updates for the parameters   j:

i=1 1 = m. (this used the fact that w(i)

j   j = 1, we easily    nd
j =
j = 1.) we therefore

j w(i)

l(  ) =

   
     j

+   

i=1

w(i)
j
  j

m(cid:88)
(cid:80)m
i=1 w(i)
j     

m(cid:88)

i=1

  j :=

1
m

w(i)
j

.

the derivation for the m-step updates to   j are also entirely straightfor-

ward.

2we don   t need to worry about the constraint that   j     0, because as we   ll shortly see,

the solution we   ll    nd from this derivation will automatically satisfy that anyway.

