cs229 lecture notes

andrew ng

part xiii
id23 and
control

we now begin our study of id23 and adaptive control.

in supervised learning, we saw algorithms that tried to make their outputs
mimic the labels y given in the training set. in that setting, the labels gave
an unambiguous    right answer    for each of the inputs x.
in contrast, for
many sequential decision making and control problems, it is very di   cult to
provide this type of explicit supervision to a learning algorithm. for example,
if we have just built a four-legged robot and are trying to program it to walk,
then initially we have no idea what the    correct    actions to take are to make
it walk, and so do not know how to provide explicit supervision for a learning
algorithm to try to mimic.

in the id23 framework, we will instead provide our al-
gorithms only a reward function, which indicates to the learning agent when
it is doing well, and when it is doing poorly. in the four-legged walking ex-
ample, the reward function might give the robot positive rewards for moving
forwards, and negative rewards for either moving backwards or falling over.
it will then be the learning algorithm   s job to    gure out how to choose actions
over time so as to obtain large rewards.

id23 has been successful in applications as diverse as
autonomous helicopter    ight, robot legged locomotion, cell-phone network
routing, marketing strategy selection, factory control, and e   cient web-page
indexing. our study of id23 will begin with a de   nition of
the id100 (mdp), which provides the formalism in
which rl problems are usually posed.

1

2

1 id100

a markov decision process is a tuple (s, a, {psa},   , r), where:

    s is a set of states. (for example, in autonomous helicopter    ight, s
might be the set of all possible positions and orientations of the heli-
copter.)

    a is a set of actions. (for example, the set of all possible directions in

which you can push the helicopter   s control sticks.)

    psa are the state transition probabilities. for each state s     s and
action a     a, psa is a distribution over the state space. we   ll say more
about this later, but brie   y, psa gives the distribution over what states
we will transition to if we take action a in state s.

           [0, 1) is called the discount factor.

    r : s    a 7    r is the reward function. (rewards are sometimes also
written as a function of a state s only, in which case we would have
r : s 7    r).

the dynamics of an mdp proceeds as follows: we start in some state s0,
and get to choose some action a0     a to take in the mdp. as a result of our
choice, the state of the mdp randomly transitions to some successor state
s1, drawn according to s1     ps0a0. then, we get to pick another action a1.
as a result of this action, the state transitions again, now to some s2     ps1a1.
we then pick a2, and so on. . . . pictorially, we can represent this process as
follows:

s0

a0       s1

a1       s2

a2       s3

a3       . . .

upon visiting the sequence of states s0, s1, . . . with actions a0, a1, . . ., our

total payo    is given by

r(s0, a0) +   r(s1, a1) +   2r(s2, a2) +          .

or, when we are writing rewards as a function of the states only, this becomes

r(s0) +   r(s1) +   2r(s2) +          .

for most of our development, we will use the simpler state-rewards r(s),
though the generalization to state-action rewards r(s, a) o   ers no special
di   culties.

3

our goal in id23 is to choose actions over time so as to

maximize the expected value of the total payo   :

e(cid:2)r(s0) +   r(s1) +   2r(s2) +         (cid:3)

note that the reward at timestep t is discounted by a factor of   t. thus, to
make this expectation large, we would like to accrue positive rewards as soon
as possible (and postpone negative rewards as long as possible). in economic
applications where r(  ) is the amount of money made,    also has a natural
interpretation in terms of the interest rate (where a dollar today is worth
more than a dollar tomorrow).

a policy is any function    : s 7    a mapping from the states to the
actions. we say that we are executing some policy    if, whenever we are
in state s, we take action a =   (s). we also de   ne the value function for
a policy    according to

v   (s) = e(cid:2)r(s0) +   r(s1) +   2r(s2) +         (cid:12)(cid:12) s0 = s,   ].

v   (s) is simply the expected sum of discounted rewards upon starting in
state s, and taking actions according to   .1

given a    xed policy   , its value function v    satis   es the bellman equa-

tions:

v   (s) = r(s) +    xs      s

ps  (s)(s   )v   (s   ).

this says that the expected sum of discounted rewards v   (s) for starting
in s consists of two terms: first, the immediate reward r(s) that we get
rightaway simply for starting in state s, and second, the expected sum of
future discounted rewards. examining the second term in more detail, we
see that the summation term above can be rewritten es      ps  (s)[v   (s   )]. this
is the expected sum of discounted rewards for starting in state s   , where s   
is distributed according ps  (s), which is the distribution over where we will
end up after taking the    rst action   (s) in the mdp from state s. thus, the
second term above gives the expected sum of discounted rewards obtained
after the    rst step in the mdp.

bellman   s equations can be used to e   ciently solve for v   . speci   cally,
in a    nite-state mdp (|s| <    ), we can write down one such equation for
v   (s) for every state s. this gives us a set of |s| linear equations in |s|
variables (the unknown v   (s)   s, one for each state), which can be e   ciently
solved for the v   (s)   s.

1this notation in which we condition on    isn   t technically correct because    isn   t a

random variable, but this is quite standard in the literature.

we also de   ne the optimal value function according to

v    (s) = max

  

v   (s).

4

(1)

in other words, this is the best possible expected sum of discounted rewards
that can be attained using any policy. there is also a version of bellman   s
equations for the optimal value function:

v    (s) = r(s) + max
a   a

   xs      s

psa(s   )v    (s   ).

(2)

the    rst term above is the immediate reward as before. the second term
is the maximum over all actions a of the expected future sum of discounted
rewards we   ll get upon after action a. you should make sure you understand
this equation and see why it makes sense.

we also de   ne a policy       : s 7    a as follows:

     (s) = arg max

a   a xs      s

psa(s   )v    (s   ).

(3)

note that      (s) gives the action a that attains the maximum in the    max   
in equation (2).

it is a fact that for every state s and every policy   , we have

v    (s) = v      

(s)     v   (s).

the    rst equality says that the v      , the value function for      , is equal to the
optimal value function v     for every state s. further, the inequality above
says that         s value is at least a large as the value of any other other policy.
in other words,       as de   ned in equation (3) is the optimal policy.

note that       has the interesting property that it is the optimal policy
for all states s. speci   cally, it is not the case that if we were starting in
some state s then there   d be some optimal policy for that state, and if we
were starting in some other state s    then there   d be some other policy that   s
optimal policy for s   . speci   cally, the same policy       attains the maximum
in equation (1) for all states s. this means that we can use the same policy
      no matter what the initial state of our mdp is.

2 value iteration and policy iteration

we now describe two e   cient algorithms for solving    nite-state mdps. for
now, we will consider only mdps with    nite state and action spaces (|s| <
   , |a| <    ).

the    rst algorithm, value iteration, is as follows:

5

1. for each state s, initialize v (s) := 0.

2. repeat until convergence {

for every state, update v (s) := r(s) + maxa   a   ps    psa(s   )v (s   ).

}

this algorithm can be thought of as repeatedly trying to update the esti-
mated value function using bellman equations (2).

there are two possible ways of performing the updates in the inner loop of
the algorithm. in the    rst, we can    rst compute the new values for v (s) for
every state s, and then overwrite all the old values with the new values. this
is called a synchronous update. in this case, the algorithm can be viewed as
implementing a    bellman backup operator    that takes a current estimate of
the value function, and maps it to a new estimate. (see homework problem
for details.) alternatively, we can also perform asynchronous updates.
here, we would loop over the states (in some order), updating the values one
at a time.

under either synchronous or asynchronous updates, it can be shown that
value iteration will cause v to converge to v    . having found v    , we can
then use equation (3) to    nd the optimal policy.

apart from value iteration, there is a second standard algorithm for    nd-
ing an optimal policy for an mdp. the policy iteration algorithm proceeds
as follows:

1. initialize    randomly.

2. repeat until convergence {

(a) let v := v   .

(b) for each state s, let   (s) := arg maxa   aps    psa(s   )v (s   ).

}

thus, the inner-loop repeatedly computes the value function for the current
policy, and then updates the policy using the current value function. (the
policy    found in step (b) is also called the policy that is greedy with re-
spect to v .) note that step (a) can be done via solving bellman   s equations
as described earlier, which in the case of a    xed policy, is just a set of |s|
linear equations in |s| variables.

after at most a    nite number of iterations of this algorithm, v will con-

verge to v    , and    will converge to      .

6

both value iteration and policy iteration are standard algorithms for solv-
ing mdps, and there isn   t currently universal agreement over which algo-
rithm is better. for small mdps, policy iteration is often very fast and
converges with very few iterations. however, for mdps with large state
spaces, solving for v    explicitly would involve solving a large system of lin-
ear equations, and could be di   cult. in these problems, value iteration may
be preferred. for this reason, in practice value iteration seems to be used
more often than policy iteration.

3 learning a model for an mdp

so far, we have discussed mdps and algorithms for mdps assuming that the
state transition probabilities and rewards are known. in many realistic prob-
lems, we are not given state transition probabilities and rewards explicitly,
but must instead estimate them from data. (usually, s, a and    are known.)
for example, suppose that, for the inverted pendulum problem (see prob-
lem set 4), we had a number of trials in the mdp, that proceeded as follows:

(1)

a

0       s(1)
1

(1)

a

1       s(1)
2

(1)

a

2       s(1)
3

(2)

a

0       s(2)
1

(2)

a

1       s(2)
2

(2)

a

2       s(2)
3

(1)

a
3       . . .

(2)

a
3       . . .

s(1)
0

s(2)
0
. . .

i

here, s(j)

is the state we were at time i of trial j, and a(j)

is the cor-
responding action that was taken from that state. in practice, each of the
trials above might be run until the mdp terminates (such as if the pole falls
over in the inverted pendulum problem), or it might be run for some large
but    nite number of timesteps.

i

given this    experience    in the mdp consisting of a number of trials,
we can then easily derive the maximum likelihood estimates for the state
transition probabilities:

psa(s   ) =

#times took we action a in state s and got to s   

#times we took action a in state s

(4)

or, if the ratio above is    0/0      corresponding to the case of never having
taken action a in state s before   the we might simply estimate psa(s   ) to be
1/|s|. (i.e., estimate psa to be the uniform distribution over all states.)

note that, if we gain more experience (observe more trials) in the mdp,
there is an e   cient way to update our estimated state transition probabilities

7

using the new experience. speci   cally, if we keep around the counts for both
the numerator and denominator terms of (4), then as we observe more trials,
we can simply keep accumulating those counts. computing the ratio of these
counts then given our estimate of psa.

using a similar procedure, if r is unknown, we can also pick our estimate
of the expected immediate reward r(s) in state s to be the average reward
observed in state s.

having learned a model for the mdp, we can then use either value it-
eration or policy iteration to solve the mdp using the estimated transition
probabilities and rewards. for example, putting together model learning and
value iteration, here is one possible algorithm for learning in an mdp with
unknown state transition probabilities:

1. initialize    randomly.

2. repeat {

(a) execute    in the mdp for some number of trials.

(b) using the accumulated experience in the mdp, update our esti-

mates for psa (and r, if applicable).

(c) apply value iteration with the estimated state transition probabil-

ities and rewards to get a new estimated value function v .

(d) update    to be the greedy policy with respect to v .

}

we note that, for this particular algorithm, there is one simple optimiza-
tion that can make it run much more quickly. speci   cally, in the inner loop
of the algorithm where we apply value iteration, if instead of initializing value
iteration with v = 0, we initialize it with the solution found during the pre-
vious iteration of our algorithm, then that will provide value iteration with
a much better initial starting point and make it converge more quickly.

4 continuous state mdps

so far, we   ve focused our attention on mdps with a    nite number of states.
we now discuss algorithms for mdps that may have an in   nite number of
states. for example, for a car, we might represent the state as (x, y,   ,   x,   y,     ),
comprising its position (x, y); orientation   ; velocity in the x and y directions
  x and   y; and angular velocity     . hence, s = r6 is an in   nite set of states,

8

because there is an in   nite number of possible positions and orientations
for the car.2 similarly, the inverted pendulum you saw in ps4 has states
(x,   ,   x,     ), where    is the angle of the pole. and, a helicopter    ying in 3d
space has states of the form (x, y, z,   ,   ,   ,   x,   y,   z,     ,     ,     ), where here the roll
  , pitch   , and yaw    angles specify the 3d orientation of the helicopter.

in this section, we will consider settings where the state space is s = rn,

and describe ways for solving such mdps.

4.1 discretization

perhaps the simplest way to solve a continuous-state mdp is to discretize
the state space, and then to use an algorithm like value iteration or policy
iteration, as described previously.

for example, if we have 2d states (s1, s2), we can use a grid to discretize

the state space:

here, each grid cell represents a separate discrete state   s. we can then ap-
proximate the continuous-state mdp via a discrete-state one (   s, a, {p  sa},   , r),
where   s is the set of discrete states, {p  sa} are our state transition probabil-
ities over the discrete states, and so on. we can then use value iteration or
policy iteration to solve for the v    (  s) and      (  s) in the discrete state mdp
(   s, a, {p  sa},   , r). when our actual system is in some continuous-valued
state s     s and we need to pick an action to execute, we compute the
corresponding discretized state   s, and execute action      (  s).

this discretization approach can work well for many problems. however,
there are two downsides. first, it uses a fairly naive representation for v    

2technically,    is an orientation and so the range of    is better written        [     ,   ) than

       r; but for our purposes, this distinction is not important.

9

(and      ). speci   cally, it assumes that the value function is takes a constant
value over each of the discretization intervals (i.e., that the value function is
piecewise constant in each of the gridcells).

to better understand the limitations of such a representation, consider a

supervised learning problem of    tting a function to this dataset:

5.5

5

4.5

4

y

3.5

3

2.5

2

1.5

1

2

3

4

5

6

7

8

x

clearly, id75 would do    ne on this problem. however, if we
instead discretize the x-axis, and then use a representation that is piecewise
constant in each of the discretization intervals, then our    t to the data would
look like this:

5.5

5

4.5

4

y

3.5

3

2.5

2

1.5

1

2

3

4

5

6

7

8

x

this piecewise constant representation just isn   t a good representation for
many smooth functions. it results in little smoothing over the inputs, and no
generalization over the di   erent grid cells. using this sort of representation,
we would also need a very    ne discretization (very small grid cells) to get a
good approximation.

10

a second downside of this representation is called the curse of dimen-
sionality. suppose s = rn, and we discretize each of the n dimensions of the
state into k values. then the total number of discrete states we have is kn.
this grows exponentially quickly in the dimension of the state space n, and
thus does not scale well to large problems. for example, with a 10d state, if
we discretize each state variable into 100 values, we would have 10010 = 1020
discrete states, which is far too many to represent even on a modern desktop
computer.

as a rule of thumb, discretization usually works extremely well for 1d
and 2d problems (and has the advantage of being simple and quick to im-
plement). perhaps with a little bit of cleverness and some care in choosing
the discretization method, it often works well for problems with up to 4d
states. if you   re extremely clever, and somewhat lucky, you may even get it
to work for some 6d problems. but it very rarely works for problems any
higher dimensional than that.

4.2 value function approximation

we now describe an alternative method for    nding policies in continuous-
state mdps, in which we approximate v     directly, without resorting to dis-
cretization. this approach, caled value function approximation, has been
successfully applied to many rl problems.

4.2.1 using a model or simulator

to develop a value function approximation algorithm, we will assume that
we have a model, or simulator, for the mdp. informally, a simulator is
a black-box that takes as input any (continuous-valued) state st and action
at, and outputs a next-state st+1 sampled according to the state transition
probabilities pstat:

there   re several ways that one can get such a model. one is to use
physics simulation. for example, the simulator for the inverted pendulum

11

in ps4 was obtained by using the laws of physics to calculate what position
and orientation the cart/pole will be in at time t + 1, given the current state
at time t and the action a taken, assuming that we know all the parameters
of the system such as the length of the pole, the mass of the pole, and so
on. alternatively, one can also use an o   -the-shelf physics simulation software
package which takes as input a complete physical description of a mechanical
system, the current state st and action at, and computes the state st+1 of the
system a small fraction of a second into the future.3

an alternative way to get a model is to learn one from data collected in
the mdp. for example, suppose we execute m trials in which we repeatedly
take actions in an mdp, each trial for t timesteps. this can be done picking
actions at random, executing some speci   c policy, or via some other way of
choosing actions. we would then observe m state sequences like the following:

s(1)
0

(1)

a

0       s(1)
1

(1)

a

1       s(1)
2

(2)

a

0       s(2)
1

s(2)
0
        

(2)

a

1       s(2)
2

(1)

a
2               

(2)

a
2               

(1)

a

t    1       s(1)

t

(2)

a

t    1       s(2)

t

s(m)
0

(m)

a

0       s(m)

1

(m)

a

1       s(m)

2

(m)

a
2               

(m)

a

t    1       s(m)

t

we can then apply a learning algorithm to predict st+1 as a function of st
and at.

for example, one may choose to learn a linear model of the form

st+1 = ast + bat,

(5)

using an algorithm similar to id75. here, the parameters of the
model are the matrices a and b, and we can estimate them using the data
collected from our m trials, by picking

arg min
a,b

m

xi=1

t    1

xt=0 (cid:13)(cid:13)(cid:13)

t+1    (cid:16)as(i)
s(i)

t + ba(i)

2

.

t (cid:17)(cid:13)(cid:13)(cid:13)

(this corresponds to the maximum likelihood estimate of the parameters.)
having learned a and b, one option is to build a deterministic model,
in which given an input st and at, the output st+1 is exactly determined.

3open dynamics engine (http://www.ode.com) is one example of a free/open-source
physics simulator that can be used to simulate systems like the inverted pendulum, and
that has been a reasonably popular choice among rl researchers.

12

speci   cally, we always compute st+1 according to equation (5). alterna-
tively, we may also build a stochastic model, in which st+1 is a random
function of the inputs, by modelling it as

st+1 = ast + bat +   t,

where here   t is a noise term, usually modeled as   t     n (0,   ). (the covari-
ance matrix    can also be estimated from data in a straightforward way.)

here, we   ve written the next-state st+1 as a linear function of the current
state and action; but of course, non-linear functions are also possible. specif-
ically, one can learn a model st+1 = a  s(st) + b  a(at), where   s and   a are
some non-linear feature mappings of the states and actions. alternatively,
one can also use non-linear learning algorithms, such as locally weighted lin-
ear regression, to learn to estimate st+1 as a function of st and at. these
approaches can also be used to build either deterministic or stochastic sim-
ulators of an mdp.

4.2.2 fitted value iteration

we now describe the    tted value iteration algorithm for approximating
the value function of a continuous state mdp. in the sequel, we will assume
that the problem has a continuous state space s = rn, but that the action
space a is small and discrete.4

recall that in value iteration, we would like to perform the update

v (s)

:= r(s) +    max

a zs   

psa(s   )v (s   )ds   

= r(s) +    max

a

es      psa[v (s   )]

(6)

(7)

(in section 2, we had written the value iteration update with a summation

v (s) := r(s) +    maxaps    psa(s   )v (s   ) rather than an integral over states;

the new notation re   ects that we are now working in continuous states rather
than discrete states.)

the main idea of    tted value iteration is that we are going to approxi-
mately carry out this step, over a    nite sample of states s(1), . . . , s(m). specif-
ically, we will use a supervised learning algorithm   id75 in our

4in practice, most mdps have much smaller action spaces than state spaces. e.g., a car
has a 6d state space, and a 2d action space (steering and velocity controls); the inverted
pendulum has a 4d state space, and a 1d action space; a helicopter has a 12d state space,
and a 4d action space. so, discretizing ths set of actions is usually less of a problem than
discretizing the state space would have been.

13

description below   to approximate the value function as a linear or non-linear
function of the states:

v (s) =   t   (s).

here,    is some appropriate feature mapping of the states.

for each state s in our    nite sample of m states,    tted value itera-
tion will    rst compute a quantity y(i), which will be our approximation
to r(s) +    maxa es      psa[v (s   )] (the right hand side of equation 7). then,
it will apply a supervised learning algorithm to try to get v (s) close to
r(s) +    maxa es      psa[v (s   )] (or, in other words, to try to get v (s) close to
y(i)).

in detail, the algorithm is as follows:

1. randomly sample m states s(1), s(2), . . . s(m)     s.

2. initialize    := 0.

3. repeat {

for i = 1, . . . , m {

for each action a     a {

1, . . . , s   

sample s   
set q(a) = 1

k     ps(i)a (using a model of the mdp).
j=1 r(s(i)) +   v (s   
j)

// hence, q(a) is an estimate of r(s(i))+  es      p

[v (s   )].

s(i) a

k pk

}
set y(i) = maxa q(a).

// hence, y(i) is an estimate of r(s(i))+   maxa es      p

[v (s   )].

s(i) a

}

// in the original value iteration algorithm (over discrete states)
// we updated the value function according to v (s(i)) := y(i).
// in this algorithm, we want v (s(i))     y(i), which we   ll achieve

// using supervised learning (id75).

set    := arg min  

}

1

2 pm

i=1(cid:0)  t   (s(i))     y(i)(cid:1)2

14

above, we had written out    tted value iteration using id75 as
the algorithm to try to make v (s(i)) close to y(i). that step of the algorithm is
completely analogous to a standard supervised learning (regression) problem
in which we have a training set (x(1), y(1)), (x(2), y(2)), . . . , (x(m), y(m)), and
want to learn a function mapping from x to y; the only di   erence is that
here s plays the role of x. even though our description above used linear
regression, clearly other regression algorithms (such as locally weighted linear
regression) can also be used.

unlike value iteration over a discrete set of states,    tted value iteration
cannot be proved to always to converge. however, in practice, it often does
converge (or approximately converge), and works well for many problems.
note also that if we are using a deterministic simulator/model of the mdp,
then    tted value iteration can be simpli   ed by setting k = 1 in the algorithm.
this is because the expectation in equation (7) becomes an expectation over
a deterministic distribution, and so a single example is su   cient to exactly
compute that expectation. otherwise, in the algorithm above, we had to
draw k samples, and average to try to approximate that expectation (see the
de   nition of q(a), in the algorithm pseudo-code).

finally,    tted value iteration outputs v , which is an approximation to
v    . this implicitly de   nes our policy. speci   cally, when our system is in
some state s, and we need to choose an action, we would like to choose the
action

arg max

a

es      psa[v (s   )]

(8)

the process for computing/approximating this is similar to the inner-loop of
k     psa to
   tted value iteration, where for each action, we sample s   
approximate the expectation. (and again, if the simulator is deterministic,
we can set k = 1.)

1, . . . , s   

in practice, there   re often other ways to approximate this step as well.
for example, one very common case is if the simulator is of the form st+1 =
f (st, at) +   t, where f is some determinstic function of the states (such as
f (st, at) = ast + bat), and    is zero-mean gaussian noise. in this case, we
can pick the action given by

arg max

a

v (f (s, a)).

in other words, here we are just setting   t = 0 (i.e., ignoring the noise in
the simulator), and setting k = 1. equivalently, this can be derived from
equation (8) using the approximation

es   [v (s   )]     v (es   [s   ])

= v (f (s, a)),

(9)
(10)

15

where here the expection is over the random s        psa. so long as the noise
terms   t are small, this will usually be a reasonable approximation.

however, for problems that don   t lend themselves to such approximations,
having to sample k|a| states using the model, in order to approximate the
expectation above, can be computationally expensive.

