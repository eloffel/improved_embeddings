[1]convnetjs demo: toy 1d regression

   the simulation below is a 1-dimensional regression where a neural
   network is trained to regress to y coordinates for every given point x
   through an l2 loss. that is, the minimized cost function computes the
   squared difference between the predicted y-coordinate and the "correct"
   y coordinate. every 10th of a second, all points are fed to the network
   multiple times through the trainer class to train the network.

   the simulation below will eval() whatever you have in the text area and
   reload. feel free to explore and use convnetjs to instantiate your own
   network!

   report questions/bugs/suggestions to [2]@karpathy.

   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   change network
   number of points to generate: 20__________________ regenerate data

   add data points by clicking!
   [ ] also draw outputs of a layer (click layer button below) in red.
   browser not supported for canvas. get a real browser.

   go [3]back to convnetjs

references

   1. http://cs.stanford.edu/people/karpathy/convnetjs
   2. https://twitter.com/karpathy
   3. http://cs.stanford.edu/people/karpathy/convnetjs/
