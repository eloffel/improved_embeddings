   #[1]github [2]recent commits to deep_qa:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

   this repository has been archived by the owner. it is now read-only.
     * [33]watch [34]90
     * [35]star [36]396
     * [37]fork [38]133

[39]allenai/[40]deep_qa

   [41]code [42]issues 24 [43]pull requests 3 [44]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [45]sign up
   a deep nlp library, based on keras / tf, focused on id53
   (but useful for other nlp too)
   [46]deep-learning [47]question-answering [48]nlp
     * [49]956 commits
     * [50]5 branches
     * [51]2 releases
     * [52]fetching contributors
     * [53]apache-2.0

    1. [54]python 99.4%
    2. [55]shell 0.6%

   (button) python shell
   branch: master
   [56]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/a
   [57]download zip

downloading...

   want to be notified of new releases in allenai/deep_qa?
   [58]sign in [59]sign up

launching github desktop...

   if nothing happens, [60]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [61]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [62]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [63]download the github extension for visual studio
   and try again.

   (button) go back
   [64]@scid48d
   [65]scid48d [66]remove ecr urls from repository.
   latest commit [67]48b4340 may 21, 2018
   [68]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [69]build_tools [70]removed theano support per issue [71]#311
   [72]([73]#324[74]) apr 24, 2017
   [75]deep_qa [76]update tee_logger.py jan 24, 2018
   [77]doc
   [78]example_experiments [79]ok ([80]#409[81]) jun 27, 2017
   [82]scripts
   [83]tests
   [84].gitignore [85]several minor improvements ([86]#285[87]) apr 3,
   2017
   [88].pylintrc [89]multi input time distributed ([90]#207[91]) feb 20,
   2017
   [92].travis.yml
   [93]license
   [94]manifest.in
   [95]readme.md
   [96]circle.yml
   [97]codecov.yml
   [98]pytest.ini
   [99]requirements.txt
   [100]setup.id18
   [101]setup.py

readme.md

   [102]build status [103]documentation status [104]codecov

deprecated

   deepqa is built on top of keras. we've decided that [105]pytorch is a
   better platform for nlp research. we re-wrote deepqa into a pytorch
   library called [106]allennlp. there will be no more development of
   deepqa. but, we're pretty excited about allennlp - if you're doing deep
   learning for natural language processing, you should [107]check it out!

deepqa

   deepqa is a library for doing high-level nlp tasks with deep learning,
   particularly focused on various kinds of id53. deepqa is
   built on top of [108]keras and [109]tensorflow, and can be thought of
   as an interface to these systems that makes nlp easier.

   specifically, this library provides the following benefits over plain
   keras / tensorflow:
     * it is easy to get nlp right in deepqa.
          + in keras, there are a lot of issues around padding sequences
            and masking that are not handled well in the main keras code,
            and we have well-tested code that does the right thing for,
            e.g., computing attentions over padded sequences, padding all
            training instances to the same lengths (possibly dynamically
            by batch, to minimize computation wasted on padding tokens),
            or distributing text encoders across several sentences or
            words.
          + deepqa provides a nice, consistent api around building nlp
            models. this api has functionality around processing data
            instances, embedding words and/or characters, easily getting
            various kinds of sentence encoders, and so on. it makes
            building models for high-level nlp tasks easy.
     * deepqa provides a clean interface to training, validating, and
       debugging keras models. it is easy to experiment with variants of a
       model family just by changing some parameters in a json file. for
       example, the particulars of how words are represented, either with
       fixed glove vectors, fine-tuned id97 vectors, or a
       concatenation of those with a character-level id98, are all
       specified by parameters in a json file, not in your actual code.
       this makes it trivial to switch the details of your model based on
       the data that you're working with.
     * deepqa contains a number of state-of-the-art models, particularly
       focused around id53 systems (though we've dabbled in
       models for other tasks, as well). the actual model code for these
       systems is typically 50 lines or less.

running deepqa

setting up a development environment

   deepqa is built using python 3. the easiest way to set up a compatible
   environment is to use [110]conda. this will set up a virtual
   environment with the exact version of python used for development along
   with all the dependencies needed to run deepqa.
    1. [111]download and install conda.
    2. create a conda environment with python 3.
conda create -n deep_qa python=3.5

    3. now activate the conda environment.
source activate deep_qa

    4. install the required dependencies.
./scripts/install_requirements.sh

    5. set the pythonhashseed for repeatable experiments.
export pythonhashseed=2157

   you should now be able to test your installation with pytest -v.
   congratulations! you now have a development environment for deep_qa
   that uses tensorflow with cpu support. (for gpu support, see
   requirements.txt for information on how to install tensorflow-gpu).

using deepqa as an executable

   to train or evaluate a model using a clone of the deepqa repository,
   the recommended entry point is to use the [112]run_model.py script. the
   first argument to that script is a parameter file, described more
   below. the second argument determines the behavior, either training a
   model or evaluating a trained model against a test dataset. current
   valid options for the second argument are train and test (omitting the
   argument is the same as passing train).

   parameter files specify the model class you're using, model
   hyperparameters, training details, data files, data generator details,
   and many other things. you can see example parameter files in the
   [113]examples directory. you can get some notion of what parameters are
   available by looking through the [114]documentation.

   actually training a model will require input files, which you need to
   provide. we have a companion library, [115]deepqa experiments, which
   was originally designed to produce input files and run experiments, and
   can be used to generate required data files for most of the tasks we
   have models for. we're moving towards putting the data processing code
   directly into deepqa, so that deepqa experiments is not necessary, but
   for now, getting training data files in the right format is most easily
   [116]done with deepqa experiments.

using deepqa as a library

   if you are using deepqa as a library in your own code, it is still
   straightforward to run your model. instead of using the
   [117]run_model.py script to do the training/evaluation, you can do it
   yourself as follows:
from deep_qa import run_model, evaluate_model, load_model, score_dataset

# train a model given a json specification
run_model("/path/to/json/parameter/file")


# load a model given a json specification
loaded_model = load_model("/path/to/json/parameter/file")
# do some more exciting things with your model here!


# get predictions from a pre-trained model on some test data specified in the js
on parameters.
predictions = score_dataset("/path/to/json/parameter/file")
# compute your own metrics, or do id125, or whatever you want with the pre
dictions here.


# compute keras' metrics on a test dataset, using a pre-trained model.
evaluate_model("/path/to/json/parameter/file", ["/path/to/data/file"])

   the rest of the usage guidelines, examples, etc., are the same as when
   [118]working in a clone of the repository.

implementing your own models

   to implement a new model in deepqa, you need to subclass texttrainer.
   there is [119]documentation on what is necessary for this; see in
   particular the [120]abstract methods section. for a simple example of a
   fully functional model, see the [121]simple sequence tagger, which has
   about 20 lines of actual implementation code.

   in order to train, load and evaluate models which you have written
   yourself, simply pass an additional argument to the functions above and
   remove the model_class parameter from your json specification. for
   example:
from deep_qa import run_model
from .local_project import mygreatmodel

# train a model given a json specification (without a "model_class" attribute).
run_model("/path/to/json/parameter/file", model_class=mygreatmodel)

   if you're doing a new task, or a new variant of a task with a different
   input/output specification, you probably also need to implement an
   [122]instance type. the instance handles reading data from a file and
   converting it into numpy arrays that can be used for training and
   evaluation. this only needs to happen once for each input/output spec.

implemented models

   deepqa has implementations of state-of-the-art methods for a variety of
   tasks. here are a few of them:

reading comprehension

     * the attentive reader, from [123]teaching machines to read and
       comprehend, by hermann and others
     * gated attention reader from [124]gated attention readers for text
       comprehension,
     * bidirectional attention flow, from [125]bidirectional attention
       flow for machine comprehension,

entailment

     * decomposable attention, from [126]a decomposable attention model
       for natural language id136,

datasets

   this code allows for easy experimentation with the following datasets:
     * [127]ai2 elementary school science questions (no diagrams)
     * [128]the facebook children's book test dataset
     * [129]the facebook babi dataset
     * [130]the newsqa dataset
     * [131]the stanford id53 dataset (squad)
     * [132]the who did what dataset

   note that the data processing code for most of this currently lives in
   [133]deepqa experiments, however.

contributing

   if you use this code and think something could be improved, pull
   requests are very welcome. opening an issue is ok, too, but we can
   respond much more quickly to pull requests.

contributors

     * [134]matt gardner
     * [135]mark neumann
     * [136]nelson liu.
     * [137]pradeep dasigi (the initial author of this codebase)

license

   this code is released under the terms of the [138]apache 2 license.

     *    2019 github, inc.
     * [139]terms
     * [140]privacy
     * [141]security
     * [142]status
     * [143]help

     * [144]contact github
     * [145]pricing
     * [146]api
     * [147]training
     * [148]blog
     * [149]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [150]reload to refresh your
   session. you signed out in another tab or window. [151]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/allenai/deep_qa/commits/master.atom
   3. https://github.com/allenai/deep_qa#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/allenai/deep_qa
  32. https://github.com/join
  33. https://github.com/login?return_to=/allenai/deep_qa
  34. https://github.com/allenai/deep_qa/watchers
  35. https://github.com/login?return_to=/allenai/deep_qa
  36. https://github.com/allenai/deep_qa/stargazers
  37. https://github.com/login?return_to=/allenai/deep_qa
  38. https://github.com/allenai/deep_qa/network/members
  39. https://github.com/allenai
  40. https://github.com/allenai/deep_qa
  41. https://github.com/allenai/deep_qa
  42. https://github.com/allenai/deep_qa/issues
  43. https://github.com/allenai/deep_qa/pulls
  44. https://github.com/allenai/deep_qa/pulse
  45. https://github.com/join?source=prompt-code
  46. https://github.com/topics/deep-learning
  47. https://github.com/topics/question-answering
  48. https://github.com/topics/nlp
  49. https://github.com/allenai/deep_qa/commits/master
  50. https://github.com/allenai/deep_qa/branches
  51. https://github.com/allenai/deep_qa/releases
  52. https://github.com/allenai/deep_qa/graphs/contributors
  53. https://github.com/allenai/deep_qa/blob/master/license
  54. https://github.com/allenai/deep_qa/search?l=python
  55. https://github.com/allenai/deep_qa/search?l=shell
  56. https://github.com/allenai/deep_qa/find/master
  57. https://github.com/allenai/deep_qa/archive/master.zip
  58. https://github.com/login?return_to=https://github.com/allenai/deep_qa
  59. https://github.com/join?return_to=/allenai/deep_qa
  60. https://desktop.github.com/
  61. https://desktop.github.com/
  62. https://developer.apple.com/xcode/
  63. https://visualstudio.github.com/
  64. https://github.com/scid48d
  65. https://github.com/allenai/deep_qa/commits?author=scid48d
  66. https://github.com/allenai/deep_qa/commit/48b4340650ec70b801ec93adfdf651bde9c0546e
  67. https://github.com/allenai/deep_qa/commit/48b4340650ec70b801ec93adfdf651bde9c0546e
  68. https://github.com/allenai/deep_qa/tree/48b4340650ec70b801ec93adfdf651bde9c0546e
  69. https://github.com/allenai/deep_qa/tree/master/build_tools
  70. https://github.com/allenai/deep_qa/commit/9d6d63eb061c349e6d5e071717cb8e2c1f1ad865
  71. https://github.com/allenai/deep_qa/issues/311
  72. https://github.com/allenai/deep_qa/commit/9d6d63eb061c349e6d5e071717cb8e2c1f1ad865
  73. https://github.com/allenai/deep_qa/pull/324
  74. https://github.com/allenai/deep_qa/commit/9d6d63eb061c349e6d5e071717cb8e2c1f1ad865
  75. https://github.com/allenai/deep_qa/tree/master/deep_qa
  76. https://github.com/allenai/deep_qa/commit/f68ea03dcea44fc4eade2386eba7681ccd7f0056
  77. https://github.com/allenai/deep_qa/tree/master/doc
  78. https://github.com/allenai/deep_qa/tree/master/example_experiments
  79. https://github.com/allenai/deep_qa/commit/455c9242e47ce27c12e4829f16540c4ef200ed1d
  80. https://github.com/allenai/deep_qa/pull/409
  81. https://github.com/allenai/deep_qa/commit/455c9242e47ce27c12e4829f16540c4ef200ed1d
  82. https://github.com/allenai/deep_qa/tree/master/scripts
  83. https://github.com/allenai/deep_qa/tree/master/tests
  84. https://github.com/allenai/deep_qa/blob/master/.gitignore
  85. https://github.com/allenai/deep_qa/commit/b7f177afcc13d984fea768b8cf398c331550718d
  86. https://github.com/allenai/deep_qa/pull/285
  87. https://github.com/allenai/deep_qa/commit/b7f177afcc13d984fea768b8cf398c331550718d
  88. https://github.com/allenai/deep_qa/blob/master/.pylintrc
  89. https://github.com/allenai/deep_qa/commit/241e5d1b464e55ecebab3bf81d33ca9e3ceb0529
  90. https://github.com/allenai/deep_qa/pull/207
  91. https://github.com/allenai/deep_qa/commit/241e5d1b464e55ecebab3bf81d33ca9e3ceb0529
  92. https://github.com/allenai/deep_qa/blob/master/.travis.yml
  93. https://github.com/allenai/deep_qa/blob/master/license
  94. https://github.com/allenai/deep_qa/blob/master/manifest.in
  95. https://github.com/allenai/deep_qa/blob/master/readme.md
  96. https://github.com/allenai/deep_qa/blob/master/circle.yml
  97. https://github.com/allenai/deep_qa/blob/master/codecov.yml
  98. https://github.com/allenai/deep_qa/blob/master/pytest.ini
  99. https://github.com/allenai/deep_qa/blob/master/requirements.txt
 100. https://github.com/allenai/deep_qa/blob/master/setup.id18
 101. https://github.com/allenai/deep_qa/blob/master/setup.py
 102. https://travis-ci.org/allenai/deep_qa
 103. http://deep-qa.readthedocs.io/en/latest/?badge=latest
 104. https://codecov.io/gh/allenai/deep_qa
 105. http://pytorch.org/
 106. https://github.com/allenai/allennlp
 107. http://allennlp.org/
 108. https://keras.io/
 109. https://www.tensorflow.org/
 110. https://conda.io/
 111. https://conda.io/docs/download.html
 112. https://github.com/allenai/deep_qa/blob/master/scripts/run_model.py
 113. https://github.com/allenai/deep_qa/blob/master/example_experiments
 114. http://deep-qa.readthedocs.io/
 115. https://github.com/allenai/deep_qa_experiments
 116. https://github.com/allenai/deep_qa/issues/328#issuecomment-298176527
 117. https://github.com/allenai/deep_qa/blob/master/scripts/run_model.py
 118. https://github.com/allenai/deep_qa#working-in-a-clone-of-deepqa
 119. http://deep-qa.readthedocs.io/en/latest/training/text_trainer.html
 120. http://deep-qa.readthedocs.io/en/latest/training/text_trainer.html#abstract-methods
 121. https://github.com/allenai/deep_qa/blob/master/deep_qa/models/sequence_tagging/simple_tagger.py
 122. https://github.com/allenai/deep_qa/blob/master/deep_qa/data/instances/instance.py
 123. https://www.semanticscholar.org/paper/teaching-machines-to-read-and-comprehend-hermann-kocisk  /2cb8497f9214735ffd1bd57db645794459b8ff41
 124. https://www.semanticscholar.org/paper/gated-attention-readers-for-text-comprehension-dhingra-liu/200594f44c5618fa4121be7197c115f78e6e110f
 125. https://www.semanticscholar.org/paper/bidirectional-attention-flow-for-machine-seo-kembhavi/007ab5528b3bd310a80d553cccad4b78dc496b02
 126. https://www.semanticscholar.org/paper/a-decomposable-attention-model-for-natural-parikh-t  ckstr  m/07a9478e87a8304fc3267fa16e83e9f3bbd98b27
 127. http://allenai.org/data.html
 128. https://research.facebook.com/research/babi/
 129. https://research.facebook.com/research/babi/
 130. https://datasets.maluuba.com/newsqa
 131. https://rajpurkar.github.io/squad-explorer/
 132. https://tticnlp.github.io/who_did_what/
 133. https://github.com/allenai/deep_qa_experiments
 134. https://matt-gardner.github.io/
 135. http://markneumann.xyz/
 136. http://nelsonliu.me/
 137. http://www.cs.cmu.edu/~pdasigi/
 138. https://www.apache.org/licenses/license-2.0
 139. https://github.com/site/terms
 140. https://github.com/site/privacy
 141. https://github.com/security
 142. https://githubstatus.com/
 143. https://help.github.com/
 144. https://github.com/contact
 145. https://github.com/pricing
 146. https://developer.github.com/
 147. https://training.github.com/
 148. https://github.blog/
 149. https://github.com/about
 150. https://github.com/allenai/deep_qa
 151. https://github.com/allenai/deep_qa

   hidden links:
 153. https://github.com/
 154. https://github.com/allenai/deep_qa
 155. https://github.com/allenai/deep_qa
 156. https://github.com/allenai/deep_qa
 157. https://help.github.com/articles/which-remote-url-should-i-use
 158. https://github.com/allenai/deep_qa#deprecated
 159. https://github.com/allenai/deep_qa#deepqa
 160. https://github.com/allenai/deep_qa#running-deepqa
 161. https://github.com/allenai/deep_qa#setting-up-a-development-environment
 162. https://github.com/allenai/deep_qa#using-deepqa-as-an-executable
 163. https://github.com/allenai/deep_qa#using-deepqa-as-a-library
 164. https://github.com/allenai/deep_qa#implementing-your-own-models
 165. https://github.com/allenai/deep_qa#implemented-models
 166. https://github.com/allenai/deep_qa#reading-comprehension
 167. https://github.com/allenai/deep_qa#entailment
 168. https://github.com/allenai/deep_qa#datasets
 169. https://github.com/allenai/deep_qa#contributing
 170. https://github.com/allenai/deep_qa#contributors
 171. https://github.com/allenai/deep_qa#license
 172. https://github.com/
