    #[1]sigmoidal    feed [2]sigmoidal    comments feed [3]sigmoidal    deep
   learning chatbot     analysis and implementation comments feed
   [4]alternate [5]alternate

   [6]machine learning consulting and data science from sigmoidal.io
   machine learning consulting and data science from sigmoidal.io
   0

   [7]machine learning consulting and data science from sigmoidal.io
   machine learning consulting and data science from sigmoidal.io
     * blog

machine learning blog
       [8]see all entries
          + [9]natural language processing algorithms (nlp ai)
          + [10]artificial intelligence and machine learning for
            healthcare
          + [11]machine learning terms every manager should know
          + [12]machine learning for trading     topic overview
          + [13]deep learning for id161     going beyond image
            classification and regression
     * [14]company
     * use cases

ai business
use cases
          + [15]finance
            investment opportunities discovery
          + [16]trading
            ai choosing the most profitable portfolio
          + [17]ai in pharma
            finding drug side-effect reviews in social media
     * [18]contact us

   [19]schedule a call

deep learning chatbot     analysis and implementation

   deep learning chatbots analysis

   if you have a business with a heavy customer service demand, and you
   want to make your process more efficient, it   s time to think about
   introducing chatbots. in this blog post, we   ll cover some standard
   methods for implementing chatbots that can be used by any b2c business.

introduction

   any business oriented towards creating a top of the line customer
   experience needs a competent and comprehensive customer service
   department. in the past, offering a reliable phone number with an
   informed customer service team was enough to satisfy customers with
   questions and problems. however, in today   s modern world, customers
   tend to expect a new level of ease and speed whenever they need to
   contact your company with a problem. this fix-it-now attitude causes a
   lot of frustration with infolines and talking to consultants who are
   either uninformed or detached from the customer   s problems and needs.

   because of these shifting expectations, companies are starting to
   introduce a chat option as a means of instant contact with their
   clients. the chat option allows more freedom, allowing your customer to
   start a conversation whenever and wherever they need to, for as long as
   they need to. ideally, customers look for chats that are available 24/7
   and provide information on every type of customer issue.

   telecom companies, in particular, are turning to this option to deal
   with the high level of customer inquiries that they receive on a daily
   basis. our experience working directly with telecom companies on this
   issue has given our company a thorough understanding of how to make the
   process of using chatbots more efficient when dealing with high levels
   of chat volumes this blog post outlines the process and discusses tips
   on understanding how to make the technology behind chatbots work for
   your customer service needs.

automation and data preparation: preprocessing and building your ontology

   when creating a successful chatbot, your goal is to completely automate
   the process to minimize the need for human management as much as
   possible. to achieve this automation, there are two main options. he
   first option is to empower your consultants with answer suggestions
   provided by ai to facilitate customer service initiatives. this option
   still requires hiring and managing customer service teams. the second
   option is to completely replace all consultants with a chatbot,
   eliminating the need for customer service representatives altogether.
   we concentrate here on the second option, which is more demanding but
   provides a bigger payoff over time.

   so we are set: our goal is to build a chatbot which would
   satisfactorily converse with customers of your telecom company.

   in any task involving machine learning, the first step is to prepare
   data so that it can be correctly interpreted by the machine. in the
   case of creating a chatbot, the task consists of inputting thousands of
   existing interactions between customers and customer service
   representatives to teach the machine which words/phrases are sensitive
   to the industry     this process is called creating an ontology.

   the next step in the process is called pre-processing. this step is
   needed to incorporate grammar into machine understanding and it allows
   to identify any misspellings correctly within texts.

   pre-processing consists of tokenizing, id30 and lemmatizing the
   chats in order to render them readable to a bot. most often this can be
   done by freely available [20]nltk tool that you can find online. the
   final effect of preprocessing is that you create accessible parse trees
   of the company chats, serving as a reference for the bot.

chatbots

   once the ontology is created and the preprocessing is completed, it   s
   time to consider what kind of chatbot you would like to use. there are
   two main models for a chatbot:
    1. retrieval-based model     this kind of chatbot uses a repository of
       predefined responses. the programmer chooses an appropriate
       response based on context following a given heuristic, which can be
       either something very simple or quite complex depending on the
       situation.).
    2. generative model     a generative model chatbox doesn   t use any
       predefined repository. this kind of chatbot is more advanced,
       because it learns from scratch using a process called    deep
       learning.   

   the pro for using retrieval-based model is the fact that it won   t make
   grammatical mistakes, however, it will be rigid too, and thus not
   likely to appear    human   . generative models, however, don   t guarantee
   either to appear    human   , however they can adapt better to surprising
   demands and questions from customers.
   needless to say, a generative model is harder to perfect, and our
   current state of knowledge can get us only so far (the [21]turing test
   has not been passed yet!). for now, going with a generative model
   option means accepting that you won   t be able to build a perfect
   chatbot for every task.

   however, in the case of s, a customer service chat bot for telecom
   companies. the industry is specific enough that creating a successful
   generative model option is feasible.

   generative models, however, don   t guarantee either to appear    human   ,
   however they can adapt better to surprising demands and questions from
   customers.

   in order to see which option works best for you, you should start by
   performing a statistical analysis of the typical demands on your
   customer service department. by filtering chats by the length of the
   conversation, you can easily determine whether your inquiries tend to
   be complicated or simple. if most of your customer interactions are
   short and to the point, they can be pretty easily automated. in longer
   conversations, a machine needs to keep track of what was being said in
   previous paragraphs. this is often surprisingly difficult and will more
   likely require a generative model chatbot.

   let   s get back to our case. say you   ve performed a quick statistical
   analysis and it happened that around 65% of your chats are short (say
   10 lines or less). you are now opting for a retrieval-based model, so
   let   s see what we can do.

     chatbots are cool and interactive, but there   s more to nlp.
     [22]extracting info from natural text can be a gold mine!

deep learning

   at this point, your data is prepared and you have chosen the right kind
   of chatbot for your needs. you will have a sufficient [23]corpora of
   text on which your machine can learn, and you are ready to begin the
   process of teaching your bot. in the case of a retrieval model bot, the
   teaching process consists of taking in an input a context (a
   conversation with a client with all prior sentences) and outputting a
   potential answer based on what it read. google assistant is using
   retrieval-based model ([24]smart reply     google). which can help give
   you an idea of what it looks like.

   in order to process the data, which in the case of a telecom company
   would consist of words, it is better to first transform the data into
   numbers, because this is how the machine will eventually need to
   process the data. there are a couple of ways to do this. one way is by
   turning words into vectors to construct a new vocabulary. for example,
   the id97 ([25]id97) system learns vocabulary from a training
   data (the existing chats) and then associates a vector to each word in
   the training data. those vectors capture many linguistic properties,
   for example:
vector('paris')     vector('france') + vector('italy') = vector('rome')

   to view some examples of how words get converted into vectors you can
   visit this [26]id97 archive. another way to create a new vocabulary
   and turn your text corpus into vectors is by using tensorflow and
   tensorflow   s example format     you can find a tutorial on how to use it
   [27]here. another tool for word representation tool is [28]glove. all
   of these are convenient and relatively simple options for converting
   your text into vectors that your bot will be able to read and digest.

   the next step is to actually    teach    your chatbot how to answer
   specific questions. in a way, building a chatbot is similar to building
   a translator     giving answers to a given question is similar to
   translating from language to another. methods used for both tasks are
   also similar and requires the    deep learning    process discussed
   earlier. the goal is to train a machine to answer correctly given
   particular context. in particular, it should be able to answer
   something correctly even if it exists in previously unseen contexts. to
   do this, we need to build a correct architecture. there are a plethora
   of choices on the type of architecture you want to build, and it will
   depend on your needs and preferences which one you want to go with.

   tensorflow comes with the id195 module ([29]id195 tutorial) which
   consists of two recurrent neural networks (id56s): an encoder that
   processes the input and the decoder that generates the output. this
   option has the following standard architecture (a, b, c are inputted to
   the encoder,    go   , w, x, y, z inputs to the decoder):
   tensorflow id195

   with this model, you have a choice for each id56. a standard option is
   lstm cells     where lstm stands for long short-term memory. citing
   [30]the ubuntu dialogue corpus:

      lstms were introduced in order to model longer-term dependencies. this
   is accomplished using a series of gates that determine whether a new
   input should be remembered, forgotten (and the old value retained), or
   used as output. the error signal can now be fed back indefinitely into
   the gates of the lstm unit. this helps overcome the vanishing and
   exploding gradient problems in standard id56s, where the error gradients
   would otherwise decrease or increase at an exponential rate.   

   for a discussion of other possibilities (standard id56 or tf-idf) see
   [6], and table 4 for a comparison of the different choices available.
   lstm composition

   another possible architecture is dual encoder described in [31]deep
   learning for chatbots.
   dual encoder id56

   here   s how it works:
    1. both the context and the answer are turned into vectors (vectors of
       vectors of words). this conversion occurs during the data
       processing phase.
    2. both vectors (   embedded words   ) are put into the id56 word-by-word.
       this gives other vectors which capture the meaning of the context
       and the answer (they are referred to as c for context and a for an
       answer). you decide how large those vectors should be.
    3. vector c is multiplied with some matrix m to produce an answer a.
       the matrix m is learned during training (your weights).
    4. the predicted answer is, compared to the actual answer to measure
       its accuracy. the programmer applies regularisation functions
       (e.g., sigmoid) to convert the measurement into an actual
       id203.

   of course, this is just a tip of an iceberg. having an architecture is
   one thing, but tuning it to work well with our problem is a completely
   different issue. this is also very time consuming and needs to be dealt
   with care.

   you can also classify chatbots into vertical and horizontal types.
   vertical chatbots are closed-domain chatbots focused on particular
   application     this would be the case with a chatbot for a customer
   service department in the telecom industry. a horizontal chatbot is a
   general and open-domain bot like siri, alexa or google assistant.
   because of its more specific context and vocabulary, a vertical chatbot
   is easier to build than a horizontal one.

   one of the issues you will run into with vertical chatbots is the
   out-of-vocabulary problem. to fix this, you will need to supply your
   training set with all of the technical terms relevant to your
   business/application. however, in general, the id195 provides a
   simple way to build unsupervised vertical chatbots. ([32]unsupervised
   deep learning for vertical conversational chatbots).

conclusion

   chatbots are a wonderful customer service solution for companies that
   are inundated with requests every day and cannot afford to maintain an
   entire customer service department. though it may require an initial
   investment and some outsourcing to get the system installed correctly,
   implementing chatbots will ultimately cut costs in the long term, and
   give customers the 24/7 availability and freedom to connect with your
   company, improving the customer experience and increasing satisfaction.
   and that   s the most important of it all.

   if you are interested in adding chatbots to your customer service
   initiatives and need help with the next step, get in touch with us
   here.

   eager to read more articles like this one? [33]follow us on twitter!

   if you are interested in adding chatbots to your customer service
   initiatives and need help with the next step, get in touch with us
   here.

   we are here to help your business grow.

   references:
    1. smart reply (google) [34]https://arxiv.org/pdf/1606.04870.pdf
    2. id195 tutorial: [35]https://www.tensorflow.org/tutorials/id195
    3. id97: [36]https://code.google.com/archive/p/id97/
    4. [37]http://www.wildml.com/2016/07/deep-learning-for-chatbots-2-retr
       ieval-based-model-tensorflow/
    5. [38]https://chatbotsmagazine.com/unsupervised-deep-learning-for-ver
       tical-conversational-chatbots-c66f21b1e0f
    6. [39]https://arxiv.org/pdf/1506.08909.pdf

   tags: [40]deep learning for natural language processing (nlp)
   [41]share on facebook [42]share on twitter
     __________________________________________________________________

0 comments

leave a reply [43]cancel

   you must be [44]logged in to post a comment.

more recent stories

   [45]nlp
   02/08/2018 [46]natural language processing algorithms (nlp ai) [47]read
   more

   sigmoidal llc
   733 3rd avenue, 15th floor
   new york, ny, 10017
          [48](347) 779 2050
            [49][email protected]
     *
     *
     *
     *

   [software-5.jpg]

   so glad to see you sticking around!

   want to be the first one to receive the new stuff?

   enter your email address below and we'll send you the goodies straight
   to your inbox.
   ____________________
   (button) subscribe

   thank you for subscribing

   this means the world to us!

   spamming is not included! pinky promise.

   iframe: [50]https://www.googletagmanager.com/ns.html?id=gtm-ngj2l8w

references

   visible links
   1. https://sigmoidal.io/feed/
   2. https://sigmoidal.io/comments/feed/
   3. https://sigmoidal.io/chatbots-for-b2c-and-deep-learning/feed/
   4. https://sigmoidal.io/wp-json/oembed/1.0/embed?url=https://sigmoidal.io/chatbots-for-b2c-and-deep-learning/
   5. https://sigmoidal.io/wp-json/oembed/1.0/embed?url=https://sigmoidal.io/chatbots-for-b2c-and-deep-learning/&format=xml
   6. https://sigmoidal.io/
   7. https://sigmoidal.io/
   8. https://sigmoidal.io/blog
   9. https://sigmoidal.io/boosting-your-solutions-with-nlp/
  10. https://sigmoidal.io/artificial-intelligence-and-machine-learning-for-healthcare/
  11. https://sigmoidal.io/machine-learning-terminology-explained-top-8-must-know-concepts/
  12. https://sigmoidal.io/machine-learning-for-trading/
  13. https://sigmoidal.io/dl-computer-vision-beyond-classification/
  14. https://sigmoidal.io/company/
  15. https://sigmoidal.io/use-case-investment-opportunities-discovery/
  16. https://sigmoidal.io/use-case-portfolio-analysis-ai-choosing-the-most-profitable-portfolio/
  17. https://sigmoidal.io/artificial-intelligence-pharma/
  18. https://sigmoidal.io/contact-us/
  19. https://sigmoidal.io/contact-us
  20. http://www.nltk.org/
  21. http://en.wikipedia.org/wiki/turing_test
  22. https://sigmoidal.io/boosting-your-solutions-with-nlp/
  23. http://en.wikipedia.org/wiki/text_corpus
  24. http://arxiv.org/pdf/1606.04870.pdf
  25. http://code.google.com/archive/p/id97/
  26. http://code.google.com/archive/p/id97/
  27. http://www.wildml.com/2016/07/deep-learning-for-chatbots-2-retrieval-based-model-tensorflow/
  28. http://nlp.stanford.edu/projects/glove/
  29. http://www.tensorflow.org/tutorials/id195
  30. http://arxiv.org/pdf/1506.08909.pdf
  31. http://www.wildml.com/2016/07/deep-learning-for-chatbots-2-retrieval-based-model-tensorflow/
  32. http://chatbotsmagazine.com/unsupervised-deep-learning-for-vertical-conversational-chatbots-c66f21b1e0f
  33. https://twitter.com/sigmoidal_io
  34. https://arxiv.org/pdf/1606.04870.pdf
  35. https://www.tensorflow.org/tutorials/id195
  36. https://code.google.com/archive/p/id97/
  37. http://www.wildml.com/2016/07/deep-learning-for-chatbots-2-retrieval-based-model-tensorflow/
  38. https://chatbotsmagazine.com/unsupervised-deep-learning-for-vertical-conversational-chatbots-c66f21b1e0f
  39. https://arxiv.org/pdf/1506.08909.pdf
  40. https://sigmoidal.io/tag/nlp-text-processing/
  41. https://www.facebook.com/sharer/sharer.php?u=https://sigmoidal.io/chatbots-for-b2c-and-deep-learning/
  42. https://twitter.com/share?url=https://sigmoidal.io/chatbots-for-b2c-and-deep-learning/
  43. https://sigmoidal.io/chatbots-for-b2c-and-deep-learning/#respond
  44. https://sigmoidal.io/wp-login.php?redirect_to=https://sigmoidal.io/chatbots-for-b2c-and-deep-learning/
  45. https://sigmoidal.io/boosting-your-solutions-with-nlp/
  46. https://sigmoidal.io/boosting-your-solutions-with-nlp/
  47. https://sigmoidal.io/boosting-your-solutions-with-nlp/
  48. tel:+1-347-779-2050
  49. https://sigmoidal.io/cdn-cgi/l/email-protection#bbd3d2fbc8d2dcd6d4d2dfdad795d2d4
  50. https://www.googletagmanager.com/ns.html?id=gtm-ngj2l8w

   hidden links:
  52. https://sigmoidal.io/chatbots-for-b2c-and-deep-learning/
  53. https://sigmoidal.io/
  54. https://sigmoidal.io/chatbots-for-b2c-and-deep-learning/
  55. https://sigmoidal.io/chatbots-for-b2c-and-deep-learning/
  56. https://www.linkedin.com/company/17914183/
  57. https://web.facebook.com/sigmoidal
  58. https://www.youtube.com/channel/uckhgompnzyvxg2g5txnknxw/videos
  59. https://twitter.com/sigmoidal_io
  60. https://sigmoidal.io/chatbots-for-b2c-and-deep-learning/#start
  61. https://sigmoidal.io/chatbots-for-b2c-and-deep-learning/
