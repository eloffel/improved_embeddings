   [1]ideas [2]learning platform [3]conferences [4]shop
   search ____________________ submit
   [5]sign in

on our radar

   [6]ai
   [7]data
   [8]economy
   [9]operations
   [10]software architecture
   [11]software engineering
   [12]web programming
   [13]see all

   [14]ideas [15]learning platform [16]conferences [17]shop search
   ____________________ submit

on our radar

   [18]ai
   [19]data
   [20]economy
   [21]operations
   [22]software architecture
   [23]software engineering
   [24]web programming
   [25]see all

   [26]data

               how do i compare document similarity using python?

   learn how to use the gensim python library to determine the similarity
   between two or more documents.

   by [27]jonathan mugan

   april 18, 2017

   poster poster (source: [28]oreilly)

   learn more about common nlp tasks in jonathan mugan's video training
   course, [29]natural language text processing with python.

how do i find documents similar to a particular document?

we will use a library in python called [30]gensim.

import gensim
print(dir(gensim))

let's create some documents.

raw_documents = ["i'm taking the show on the road.",
                 "my socks are a force multiplier.",
             "i am the barber who cuts everyone's hair who doesn't cut their own
.",
             "legend has it that the mind is a mad monkey.",
            "i make my own fun."]
print("number of documents:",len(raw_documents))

we will use nltk to tokenize.

a document will now be a list of tokens.

from nltk.tokenize import word_tokenize
gen_docs = [[w.lower() for w in word_tokenize(text)]
            for text in raw_documents]
print(gen_docs)

we will create a dictionary from a list of documents. a dictionary maps every
word to a number.

dictionary = gensim.corpora.dictionary(gen_docs)
print(dictionary[5])
print(dictionary.token2id['road'])
print("number of words in dictionary:",len(dictionary))
for i in range(len(dictionary)):
    print(i, dictionary[i])

now we will create a corpus. a corpus is a list of bags of words. a
bag-of-words representation for a document just lists the number of times
each word occurs in the document.

corpus = [dictionary.doc2bow(gen_doc) for gen_doc in gen_docs]
print(corpus)

now we create a tf-idf model from the corpus. note that num_nnz is the number
of tokens.

tf_idf = gensim.models.tfidfmodel(corpus)
print(tf_idf)
s = 0
for i in corpus:
    s += len(i)
print(s)

now we will create a similarity measure object in tf-idf space.

   tf-idf stands for term frequency-inverse document frequency. term
   frequency is how often the word shows up in the document and inverse
   document fequency scales the value by how rare the word is in the
   corpus.
sims = gensim.similarities.similarity('/usr/workdir/',tf_idf[corpus],
                                      num_features=len(dictionary))
print(sims)
print(type(sims))

now create a query document and convert it to tf-idf.

query_doc = [w.lower() for w in word_tokenize("socks are a force for good.")]
print(query_doc)
query_doc_bow = dictionary.doc2bow(query_doc)
print(query_doc_bow)
query_doc_tf_idf = tf_idf[query_doc_bow]
print(query_doc_tf_idf)

we show an array of document similarities to query. we see that the second
document is the most similar with the overlapping of socks and force.

sims[query_doc_tf_idf]

exercise: make up some sentences and guess which ones are most similar in the
corpus. confirm by computing similarity.



exercise for later: download some of your emails and see which ones are most
similar to a new email you compose.

   article image: poster (source: [31]oreilly).
   tags: [32]questions

   share
    1. [33]tweet
    2.
    3.
     __________________________________________________________________

[34]jonathan mugan

   dr. mugan specializes in artificial intelligence and machine learning.
   his current research focuses in the area of deep learning, where he
   seeks to allow computers to acquire abstract representations that
   enable them to capture subtleties of meaning. dr. mugan received his
   ph.d. in computer science from the university of texas at austin. his
   thesis work was in the area of developmental robotics where he focused
   on the problem of how to build robots that can learn about the world in
   the same way that children do.
   [35]more
     __________________________________________________________________

   [36]side lever engine

   [37]data

[38]designing great data products

   the drivetrain approach: a four-step process for building data
   products.

   video
   [39]railway tracks

   [40]data

[41]the next 10 years of apache hadoop

   by [42]doug cutting[43]tom white[44]ben lorica

   doug cutting, tom white, and ben lorica explore hadoop's role over the
   coming decade.

   [45]rope

   [46]data

[47]data: emerging trends and technologies

   by [48]alistair croll

   how sensors, fast networks, ai, and distributed computing are affecting
   the data landscape

   [49]ben lorica

   [50]data

[51]data wrangling gets a fresh look

   by [52]ben lorica

   we are in the early days of productivity technology in data science

about us

     * [53]our company
     * [54]teach/speak/write
     * [55]careers
     * [56]customer service
     * [57]contact us

site map

     * [58]ideas
     * [59]learning
     * [60]topics
     * [61]all

     *
     *
     *
     *
     *

      2019 o'reilly media, inc. all trademarks and registered trademarks
   appearing on oreilly.com are the property of their respective owners.
   [62]terms of service     [63]privacy policy     [64]editorial independence

   animal

   iframe: [65]https://www.googletagmanager.com/ns.html?id=gtm-5p4v6z

references

   visible links
   1. https://www.oreilly.com/ideas
   2. https://learning.oreilly.com/
   3. http://www.oreilly.com/conferences/
   4. http://shop.oreilly.com/
   5. https://www.oreilly.com/sign-in.html
   6. https://www.oreilly.com/topics/ai
   7. https://www.oreilly.com/topics/data
   8. https://www.oreilly.com/topics/economy
   9. https://www.oreilly.com/topics/operations
  10. https://www.oreilly.com/topics/software-architecture
  11. https://www.oreilly.com/topics/software-engineering
  12. https://www.oreilly.com/topics/web-programming
  13. https://www.oreilly.com/topics
  14. https://www.oreilly.com/ideas
  15. https://learning.oreilly.com/
  16. http://www.oreilly.com/conferences/
  17. http://shop.oreilly.com/
  18. https://www.oreilly.com/topics/ai
  19. https://www.oreilly.com/topics/data
  20. https://www.oreilly.com/topics/economy
  21. https://www.oreilly.com/topics/operations
  22. https://www.oreilly.com/topics/software-architecture
  23. https://www.oreilly.com/topics/software-engineering
  24. https://www.oreilly.com/topics/web-programming
  25. https://www.oreilly.com/topics
  26. https://www.oreilly.com/topics/data
  27. https://www.oreilly.com/people/e95f6-jonathan-mugan
  28. https://www.oreilly.com/
  29. https://www.safaribooksonline.com/library/view/natural-language-text/9781491976487/
  30. https://radimrehurek.com/gensim/
  31. https://www.oreilly.com/
  32. https://www.oreilly.com/tags/question-series
  33. https://twitter.com/share
  34. https://www.oreilly.com/people/e95f6-jonathan-mugan
  35. https://www.oreilly.com/people/e95f6-jonathan-mugan
  36. https://www.oreilly.com/ideas/drivetrain-approach-data-products
  37. https://www.oreilly.com/topics/data
  38. https://www.oreilly.com/ideas/drivetrain-approach-data-products
  39. https://www.oreilly.com/ideas/the-next-10-years-of-apache-hadoop-strata-hadoop-world-london-2016
  40. https://www.oreilly.com/topics/data
  41. https://www.oreilly.com/ideas/the-next-10-years-of-apache-hadoop-strata-hadoop-world-london-2016
  42. https://www.oreilly.com/people/f81f6-doug-cutting
  43. https://www.oreilly.com/people/6304e-tom-white
  44. https://www.oreilly.com/people/4e7ad-ben-lorica
  45. https://www.oreilly.com/ideas/data-emerging-trends-and-technologies
  46. https://www.oreilly.com/topics/data
  47. https://www.oreilly.com/ideas/data-emerging-trends-and-technologies
  48. https://www.oreilly.com/people/60b49-alistair-croll
  49. https://www.oreilly.com/ideas/data-wrangling-gets-a-fresh-look
  50. https://www.oreilly.com/topics/data
  51. https://www.oreilly.com/ideas/data-wrangling-gets-a-fresh-look
  52. https://www.oreilly.com/people/4e7ad-ben-lorica
  53. http://oreilly.com/about/
  54. http://oreilly.com/work-with-us.html
  55. http://oreilly.com/careers/
  56. http://shop.oreilly.com/category/customer-service.do
  57. http://shop.oreilly.com/category/customer-service.do
  58. https://www.oreilly.com/ideas
  59. https://www.oreilly.com/topics/oreilly-learning
  60. https://www.oreilly.com/topics
  61. https://www.oreilly.com/all
  62. http://oreilly.com/terms/
  63. http://oreilly.com/privacy.html
  64. http://www.oreilly.com/about/editorial_independence.html
  65. https://www.googletagmanager.com/ns.html?id=gtm-5p4v6z

   hidden links:
  67. https://www.oreilly.com/
  68. https://www.facebook.com/oreilly/
  69. https://twitter.com/oreillymedia
  70. https://www.youtube.com/user/oreillymedia
  71. https://plus.google.com/+oreillymedia
  72. https://www.linkedin.com/company/oreilly-media
  73. https://www.oreilly.com/
