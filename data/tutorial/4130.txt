   [1]ideas [2]learning platform [3]conferences [4]shop
   search ____________________ submit
   [5]sign in

on our radar

   [6]ai
   [7]data
   [8]economy
   [9]operations
   [10]software architecture
   [11]software engineering
   [12]web programming
   [13]see all

   [14]ideas [15]learning platform [16]conferences [17]shop search
   ____________________ submit

on our radar

   [18]ai
   [19]data
   [20]economy
   [21]operations
   [22]software architecture
   [23]software engineering
   [24]web programming
   [25]see all

   [26]ai

         how to build a robot that    sees    with $100 and tensorflow

   adventures in deep learning, cheap hardware, and object recognition.

   by [27]lukas biewald

   september 21, 2016

   eye of providence. eye of providence. (source: [28]bureau of engraving
   and printing on wikimedia commons)

   object recognition is one of the most exciting areas in machine
   learning right now. computers have been able to recognize objects like
   faces or cats reliably for quite a while, but recognizing arbitrary
   objects within a larger image has been the holy grail of artificial
   intelligence. maybe the real surprise is that human brains recognize
   objects so well. we effortlessly convert photons bouncing off objects
   at slightly different frequencies into a spectacularly rich set of
   information about the world around us. machine learning still struggles
   with these simple tasks, but in the past few years, it   s gotten much
   better.

   deep learning and a large public training data set called [29]id163
   has made an impressive amount of progress toward object recognition.
   [30]tensorflow is a well-known framework that makes it very easy to
   implement deep learning algorithms on a variety of architectures.
   tensorflow is especially good at taking advantage of gpus, which in
   turn are also very good at running deep learning algorithms.

building my robot

   i wanted to build a robot that could recognize objects. years of
   experience building computer programs and doing test-driven development
   have turned me into a menace working on physical projects. in the real
   world, testing your buggy device can burn down your house, or at least
   fry your motor and force you to wait a couple of days for replacement
   parts to arrive.
   tensorflow raspberry pi architecture of the object-recognizing robot
   figure 1. architecture of the object-recognizing robot. image courtesy
   of lukas biewald.

   the new third generation [31]raspberry pi is perfect for this kind of
   project. it costs $36 on amazon.com and has wifi, a quad core cpu, and
   a gigabyte of ram. a $6 [32]microsd card can load [33]raspberian, which
   is basically [34]debian. see figure 1 for an overview of how all the
   components worked together, and see figure 2 for a photo of the pi.
   raspberry pi figure 2. raspberry pi running in my garage. image
   courtesy of lukas biewald.

   i love the [35]cheap robot chassis that sain smart makes for around
   $11. the chassis turns by spinning the wheels at different speeds,
   which works surprisingly well (see figure 3).
   robot chassis figure 3. robot chassis. image courtesy of lukas biewald.

   the one place i spent more money when cheaper options were available is
   the [36]adafruit motor hat (see figure 4). the dc motors run at a
   higher current than the raspberry pi can provide, so a separate
   controller is necessary, and the adafruit motor hat is super
   convenient. using the motor hat required a tiny bit of soldering, but
   the hardware is extremely forgiving, and adafruit provides a nice
   library and tutorial to control the motors over [37]i2c. initially, i
   used cheaper motor controllers, but i accidentally fried my pi, so i
   decided to order a better quality replacement.
   raspberry pi with motor hat and camera figure 4. raspberry pi with
   motor hat and camera. image courtesy of lukas biewald.

   a [38]$15 camera attaches right into the raspberry pi and provides a
   real-time video feed i can use to recognize objects. there are tons of
   awesome cameras available. i like the infrared cameras that offer night
   vision.

   the raspberry pi needs about 2 amps of current, but 3 amps is safer
   with the speaker we   re going to plug into it. iphone battery chargers
   work awesomely for this task. small chargers don   t actually output
   enough amps and can cause problems, but the [39]lumsing power bank
   works great and costs $18.

   a couple of [40]hc-[41]sr0[42]4 sonar sensors help the robot avoid
   crashing into things   you can buy five for $11.

   i added the cheapest usb speakers i could find, and used a bunch of zip
   ties, hot glue, and foam board to keep everything together. as an added
   bonus, i cut up some of the packaging materials the electronics came
   with and drew on them to give the robots some personality. i should
   note here that i actually built two robots (see figure 5) because i was
   experimenting with different chassis, cameras, sonar placement,
   software, and so forth, and ended up buying enough parts for two
   versions.
   my 4wd robot and her 2wd older brother figure 5. my 4wd robot (right)
   and his 2wd older sister. image courtesy of lukas biewald.

   once the robot is assembled, it   s time to make it smart. there are a
   million [43]tutorials for getting started with a raspberry pi online.
   if you   ve used linux, everything should be very familiar.

   for streaming the camera, the [44]rpi cam web interface works great.
   it   s super configurable and by default puts the latest image from the
   camera in a ram disk at /dev/shm/mjpeg/cam.jpg.

   if you want to stream the camera data to a webpage (very useful for
   debugging), you can install [45]nginx, an extremely fast open source
   webserver/proxy. i configured nginx to pass requests for the camera
   image directly to the file location and everything else to my
   webserver.
http {
   server {
      location / {
            proxy_pass http://unix:/home/pi/drive.sock;
         }
            location /cam.jpg {
                root /dev/shm/mjpeg;
         }
   }
}

   i then built a simple python webserver to spin the wheels of the robot
   based on keyboard commands that made for a nifty remote control car.

   as a side note, it   s fun to play with the sonar and the driving system
   to build a car that can maneuver around obstacles.

programming my robot

   finally, it   s time to install tensorflow. there are a couple of ways to
   do the installation, but tensorflow actually comes with a makefile that
   lets you build it right on the system. the [46]steps take a few hours
   and have quite a few dependencies, but they worked great for me.

   tensorflow comes with a prebuilt model called    inception    that performs
   object recognition. you can follow the [47]tutorial to get it running.

   running tensorflow/contrib/pi_examples/label_image/gen/bin/label_image
   on an image from the camera will output the top five guesses. the model
   works surprisingly well on a wide range of inputs, but it   s clearly
   missing an accurate    prior,    or a sense of what things it   s likely to
   see, and there are quite a lot of objects missing from the training
   data. for example, it consistently recognizes my laptop, even at funny
   angles, but if i point it at my basket of loose wires it consistently
   decides that it   s looking at a toaster. if the camera is blocked and it
   gets a dark or blurry image it usually decides that it   s looking at
   nematodes   clearly an artifact of the data it was trained on.
   robot plugged in figure 6. robot plugged into my keyboard and monitor.
   image courtesy of lukas biewald.

   finally, i connected the output to the [48]flite open source software
   package that does text to speech, so the robot can tell everyone what
   it   s seeing (see figure 6).

testing my robot

   here are my two homemade robots running deep learning to do object
   recognition.

   iframe: [49]https://www.youtube.com/embed/w6bm2v7lscs

final thoughts

   from 2003 to 2005, i worked in the stanford robotics lab, where the
   robots cost hundreds of thousands of dollars and couldn   t perform
   object recognition nearly as well as my robots. i   m excited to put this
   software on my drone and never have to look for my keys again.

   i   d also like to acknowledge all the people that helped with this fun
   project. my neighbors, chris van dyke and shruti gandhi, helped give
   the robot a friendly personality. my friend, ed mccullough,
   dramatically improved the hardware design and taught me the value of
   hot glue and foam board. pete warden, who works at google, helped get
   tensorflow compiling properly on the raspberry pi and provided amazing
   customer support.
   article image: eye of providence. (source: [50]bureau of engraving and
   printing on wikimedia commons).

   share
    1. [51]tweet
    2.
    3.
     __________________________________________________________________

   [52]lukas biewald

[53]lukas biewald

   lukas biewald is the founder of crowdflower. founded in 2009,
   crowdflower is a data enrichment platform that taps into an on-demand
   workforce to help companies collect training data and do
   human-in-the-loop machine learning. following his graduation from
   stanford university with a b.s. in mathematics and an m.s. in computer
   science, lukas led the search relevance team for yahoo! japan. he then
   worked as a senior data scientist at powerset, which was acquired by
   microsoft in 2008. lukas was featured in inc. magazine's 30 under 30
   list. lukas ...
   [54]more
     __________________________________________________________________

   [55]bots landscape.

   [56]ai

[57]infographic: the bot platform ecosystem

   by [58]jon bruner

   a look at the artificial intelligence and messaging platforms behind
   the fast-growing chatbot community

   video
   [59]vertical forest, milan.

   [60]ai

[61]evolve ai

   by [62]naveen rao

   naveen rao explains how intel nervana is evolving the ai stack from
   silicon to the cloud.

   [63]welcome sign at o'reilly ai conference 2016

   [64]ai

[65]highlights from the o'reilly ai conference in new york 2016

   by [66]mac slocum

   watch highlights covering artificial intelligence, machine learning,
   intelligence engineering, and more. from the o'reilly ai conference in
   new york 2016.

   video
   [67]close up of uber's self driving car in pittsburgh.

   [68]ai

[69]how ai is propelling driverless cars, the future of surface transport

   by [70]shahin farshchi

   shahin farshchi examines role artificial intelligence will play in
   driverless cars.

about us

     * [71]our company
     * [72]teach/speak/write
     * [73]careers
     * [74]customer service
     * [75]contact us

site map

     * [76]ideas
     * [77]learning
     * [78]topics
     * [79]all

     *
     *
     *
     *
     *

      2019 o'reilly media, inc. all trademarks and registered trademarks
   appearing on oreilly.com are the property of their respective owners.
   [80]terms of service     [81]privacy policy     [82]editorial independence

   animal

   iframe: [83]https://www.googletagmanager.com/ns.html?id=gtm-5p4v6z

references

   visible links
   1. https://www.oreilly.com/ideas
   2. https://learning.oreilly.com/
   3. http://www.oreilly.com/conferences/
   4. http://shop.oreilly.com/
   5. https://www.oreilly.com/sign-in.html
   6. https://www.oreilly.com/topics/ai
   7. https://www.oreilly.com/topics/data
   8. https://www.oreilly.com/topics/economy
   9. https://www.oreilly.com/topics/operations
  10. https://www.oreilly.com/topics/software-architecture
  11. https://www.oreilly.com/topics/software-engineering
  12. https://www.oreilly.com/topics/web-programming
  13. https://www.oreilly.com/topics
  14. https://www.oreilly.com/ideas
  15. https://learning.oreilly.com/
  16. http://www.oreilly.com/conferences/
  17. http://shop.oreilly.com/
  18. https://www.oreilly.com/topics/ai
  19. https://www.oreilly.com/topics/data
  20. https://www.oreilly.com/topics/economy
  21. https://www.oreilly.com/topics/operations
  22. https://www.oreilly.com/topics/software-architecture
  23. https://www.oreilly.com/topics/software-engineering
  24. https://www.oreilly.com/topics/web-programming
  25. https://www.oreilly.com/topics
  26. https://www.oreilly.com/topics/ai
  27. https://www.oreilly.com/people/c4de6-lukas-biewald
  28. https://commons.wikimedia.org/wiki/file:all_seeing_eye.jpg
  29. http://www.image-net.org/
  30. https://www.tensorflow.org/
  31. https://www.amazon.com/raspberry-pi-rasp-pi-3-model-motherboard/dp/b01cd5vc92
  32. https://www.amazon.com/silicon-power-microsdhc-class10-sp016gbsthbu1v20sp/dp/b00tdbltwk/ref=sr_1_3?s=pc&ie=utf8&qid=1473285120&sr=1-3&keywords=micro+sd+card+16
  33. https://en.wikipedia.org/wiki/raspbian
  34. https://en.wikipedia.org/wiki/debian
  35. https://www.amazon.com/sainsmart-smart-chassis-tracing-encoder/dp/b00ndxeum0/ref=sr_1_cc_1?s=aps&ie=utf8&qid=1473285343&sr=1-1-catcorr&keywords=sainsmart+chassis
  36. https://www.adafruit.com/products/2348?gclid=cj0keqjw9b6-brcq7yp34tvw_uubeiqakk3svwdaqw4i4uk0d0w2d0yqulnfo8z09ul57daeqsmje2gaau9e8p8haq
  37. https://en.wikipedia.org/wiki/i  c
  38. https://www.amazon.com/arducam-megapixels-sensor-ov5647-raspberry/dp/b012v1hep4/ref=sr_1_2?s=electronics&ie=utf8&qid=1473286363&sr=1-2&keywords=raspberry+pi+camera
  39. https://www.amazon.com/gp/product/b01du4e7ew/ref=oh_aui_detailpage_o08_s00?ie=utf8&psc=1
  40. https://www.amazon.com/cjrslrb  -ultrasonic-measuring-transducer-duemilanove/dp/b016xjabp0/ref=sr_1_3?s=automotive&ie=utf8&qid=1473286270&sr=1-3&keywords=hc+sr04
  41. https://www.amazon.com/cjrslrb  -ultrasonic-measuring-transducer-duemilanove/dp/b016xjabp0/ref=sr_1_3?s=automotive&ie=utf8&qid=1473286270&sr=1-3&keywords=hc+sr04
  42. https://www.amazon.com/cjrslrb  -ultrasonic-measuring-transducer-duemilanove/dp/b016xjabp0/ref=sr_1_3?s=automotive&ie=utf8&qid=1473286270&sr=1-3&keywords=hc+sr04
  43. http://www.imore.com/how-get-started-using-raspberry-pi
  44. http://elinux.org/rpi-cam-web-interface
  45. https://en.wikipedia.org/wiki/nginx
  46. https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/makefile#raspberry-pi
  47. https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/pi_examples
  48. http://www.festvox.org/flite/
  49. https://www.youtube.com/embed/w6bm2v7lscs
  50. https://commons.wikimedia.org/wiki/file:all_seeing_eye.jpg
  51. https://twitter.com/share
  52. https://www.oreilly.com/people/c4de6-lukas-biewald
  53. https://www.oreilly.com/people/c4de6-lukas-biewald
  54. https://www.oreilly.com/people/c4de6-lukas-biewald
  55. https://www.oreilly.com/ideas/infographic-the-bot-platform-ecosystem
  56. https://www.oreilly.com/topics/ai
  57. https://www.oreilly.com/ideas/infographic-the-bot-platform-ecosystem
  58. https://www.oreilly.com/people/b1d73-jon-bruner
  59. https://www.oreilly.com/ideas/evolve-ai
  60. https://www.oreilly.com/topics/ai
  61. https://www.oreilly.com/ideas/evolve-ai
  62. https://www.oreilly.com/people/14d38-naveen-rao
  63. https://www.oreilly.com/ideas/keynotes-from-ai-new-york-2016
  64. https://www.oreilly.com/topics/ai
  65. https://www.oreilly.com/ideas/keynotes-from-ai-new-york-2016
  66. https://www.oreilly.com/people/0d2c1-mac-slocum
  67. https://www.oreilly.com/ideas/how-ai-is-propelling-driverless-cars-the-future-of-surface-transport
  68. https://www.oreilly.com/topics/ai
  69. https://www.oreilly.com/ideas/how-ai-is-propelling-driverless-cars-the-future-of-surface-transport
  70. https://www.oreilly.com/people/c7521-shahin-farshchi
  71. http://oreilly.com/about/
  72. http://oreilly.com/work-with-us.html
  73. http://oreilly.com/careers/
  74. http://shop.oreilly.com/category/customer-service.do
  75. http://shop.oreilly.com/category/customer-service.do
  76. https://www.oreilly.com/ideas
  77. https://www.oreilly.com/topics/oreilly-learning
  78. https://www.oreilly.com/topics
  79. https://www.oreilly.com/all
  80. http://oreilly.com/terms/
  81. http://oreilly.com/privacy.html
  82. http://www.oreilly.com/about/editorial_independence.html
  83. https://www.googletagmanager.com/ns.html?id=gtm-5p4v6z

   hidden links:
  85. https://www.oreilly.com/
  86. https://www.facebook.com/oreilly/
  87. https://twitter.com/oreillymedia
  88. https://www.youtube.com/user/oreillymedia
  89. https://plus.google.com/+oreillymedia
  90. https://www.linkedin.com/company/oreilly-media
  91. https://www.oreilly.com/
