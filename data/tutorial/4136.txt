   [1]ideas [2]learning platform [3]conferences [4]shop
   search ____________________ submit
   [5]sign in

on our radar

   [6]ai
   [7]data
   [8]economy
   [9]operations
   [10]software architecture
   [11]software engineering
   [12]web programming
   [13]see all

   [14]ideas [15]learning platform [16]conferences [17]shop search
   ____________________ submit

on our radar

   [18]ai
   [19]data
   [20]economy
   [21]operations
   [22]software architecture
   [23]software engineering
   [24]web programming
   [25]see all

   [26]ai

                             a poet does tensorflow

   pete warden   s instructions on building a deep learning classifier
   looked so simple, i had to try it myself.

   by [27]mike loukides

   march 21, 2016

   "the encyclopedia americana" color montage of a variety of unidentified
   butterflies and moths, 1920. "the encyclopedia americana" color montage
   of a variety of unidentified butterflies and moths, 1920. (source:
   [28]wikimedia commons)

   after reading pete warden   s excellent [29]tensorflow for poets, i was
   impressed at how easy it seemed to build a working deep learning
   classifier. it was so simple that i had to try it myself.

   i have a lot of photos around, mostly of birds and butterflies. so, i
   decided to build a simple butterfly classifier. i chose butterflies
   because i didn   t have as many photos to work with, and because they
   were already fairly well sorted. i didn   t want to spend hours sorting a
   thousand or so bird pictures. according to pete, that   s the most
   laborious, time-consuming part of the process: getting your training
   data sorted.

   sorting was relatively easy: while i thought i   d need a database, or
   some csv file tagging the photos by filename, i only needed a simple
   directory structure: a top-level directory named butterflies, with a
   directory underneath for each kind of butterfly i was classifying.
   here   s what i ended up with:
# ls ../tf_files/butterflies/
painted lady black swallowtail monarch tiger swallowtail

   only four kinds of butterflies? unfortunately, yes. while you don   t
   need thousands of images, you do need at least a dozen or so in each
   directory. if you don   t, you   ll get divide-by-zero errors that will
   make you pull your hair out. pete   s code randomly separates the images
   you provide into a training set and a validation set. if either of
   those sets ends up empty, you   re in trouble. (pete, thanks for your
   help understanding this!) i ended up with a classifier that only knew
   about four kinds of butterflies because i had to throw out all the
   species where i only had six or seven (or one or two) photos. i may try
   adding some additional species back in later; i think i can find a few
   more.

   i   ll skip the setup ([30]see pete   s article for that). by using
   virtualbox and docker, he eliminates pain and agony building and
   installing the software, particularly if you   re using os x. if you run
   into strange errors, try going back to the git steps and rebuilding.
   tensorflow (tf) won   t survive docker disconnecting from the vm, so if
   that happens (for example, if you restart the vm), you   ll need to
   rebuild.

   here   s what i did to create the classifier; it   s straight from pete   s
   article, except for the name of the image directory. you can ignore the
      no files found    for the top-level directory (butterflies), but if you
   see this message for any of the subdirectories, you   re in trouble:
# bazel-bin/tensorflow/examples/image_retraining/retrain \
> --bottleneck_dir=/tf_files/bottlenecks \
> --model_dir=/tf_files/inception \
> --output_graph=/tf_files/retrained_graph.pb \
> --output_labels=/tf_files/retrained_labels.txt \
> --image_dir /tf_files/butterflies
looking for images in 'butterflies'
no files found
looking for images in 'black swallowtail'
looking for images in 'monarch'
looking for images in 'painted lady'
looking for images in 'tiger swallowtail'
100 bottleneck files created.
2016-03-14 01:46:08.962029: step 0: train accuracy = 31.0%
2016-03-14 01:46:08.962241: step 0: cross id178 = 1.311761
2016-03-14 01:46:09.137622: step 0: validation accuracy = 18.0%
    (lots of output deleted   )
final test accuracy = 100.0%
converted 2 variables to const ops.

   and here   s what happens when you actually do some classifying. here   s
   the image i   m trying to classify: an eastern tiger swallowtail.
   eastern tiger swallowtail image classification deep learning figure 1.
   eastern tiger swallowtail

   and here   s the result:
# bazel build tensorflow/examples/label_image:label_image && \
> bazel-bin/tensorflow/examples/label_image/label_image \
> --graph=/tf_files/retrained_graph.pb \
> --labels=/tf_files/retrained_labels.txt \
> --output_layer=final_result \
> --image=/tf_files/sample/img_5941-e.jpg
(lots of output)
info: elapsed time: 532.630s, critical path: 515.99s
i tensorflow/examples/label_image/main.cc:206] tiger swallowtail (1): 0.999395
i tensorflow/examples/label_image/main.cc:206] black swallowtail (2): 0.00033828
6
i tensorflow/examples/label_image/main.cc:206] monarch (0): 0.000144585
i tensorflow/examples/label_image/main.cc:206] painted lady (3): 0.000121789

   there   s a 99.9% chance that picture was a tiger swallowtail. not bad.
   was i just lucky, or did it really work? here   s another image, this
   time a trickier photo of a pair of monarchs:
   monarch butterfly image classification deep learning figure 2. pair of
   monarchs
# bazel build tensorflow/examples/label_image:label_image && \ bazel-bin/tensorf
low/examples/label_image/label_image \ --graph=/tf_files/retrained_graph.pb \ --
labels=/tf_files/retrained_labels.txt \
--output_layer=final_result \
--image=/tf_files/sample/mkl_2055.jpg
(not quite as much output)
info: elapsed time: 16.717s, critical path: 11.43s
i tensorflow/examples/label_image/main.cc:206] monarch (0): 0.875138
i tensorflow/examples/label_image/main.cc:206] painted lady (3): 0.117698
i tensorflow/examples/label_image/main.cc:206] tiger swallowtail (1): 0.0054633
i tensorflow/examples/label_image/main.cc:206] black swallowtail (2): 0.00170112

   tf isn   t as confident, but it still thinks the image is a monarch with
   a id203 of about 87%.

   i was surprised that tf worked so well. first, i thought that a
   successful classifier would need to be trained on thousands of photos,
   and i only had a hundred or so. you   d need thousands (or millions) if
   you   re building an app for google or facebook, but i had at most a
   couple dozen in each of the four categories. that proved to be enough
   for my purposes. second, the monarch is tricky; the butterflies are at
   a bad angle, and one is blurry because it was moving. i don   t know why
   i didn   t delete this image after shooting it, but it made a nice test
   case.

   pete pointed out that, if you don   t have many images, you can
   [31]improve the accuracy by using the --random_crop, --random_scale,
   and
   --random_brightness options. these make the classifier run much slower.
   in effect, they   re creating more images by distorting the images you   ve
   provided.

   deep learning isn   t magic, and playing with it will get you thinking
   about its limits. tensorflow doesn   t know anything about what it   s
   classifying; it   s just trying to find similar images. if you ask
   tensorflow to classify something, classify it will, whether or not that
   classification makes any sense. it doesn   t know the meaning of    i don   t
   know.    when i gave the butterfly classifier a skipper, one of a large
   and confusing family of small butterflies that doesn   t look remotely
   like anything in the training set, tf classified it as a black
   swallowtail with 80% confidence:
   skipper butterfly image classification deep learning figure 3. skipper
   butterfly

   of all the butterflies in the training set, the black swallowtail is
   probably the least similar (black swallowtails are, well, black). if i
   gave my classifier a snapshot of someone walking down the street, it
   would helpfully determine the set of butterfly photos to which the
   photo was most similar. can that be fixed? more training images, and
   more categories, would make classification more accurate, but wouldn   t
   deal with the    don   t know    problem. a larger training set might help
   identify a skipper (with enough photos, it could possibly even identify
   the type of skipper), but not a photo that   s completely unexpected.
   setting some sort of lower bound for confidence might help. for
   example, returning    don   t know    if the highest confidence is under 50%
   might be useful for building commercial applications. but that leaves
   behind a lot of nuance:    i don   t know, but it might be...    pete
   suggests that you can solve the    don   t know    problem by adding a random
   category that consists of miscellaneous photos unrelated to the photos
   in the    known    categories; this trick doesn   t sound like it should
   work, but it   s surprisingly effective.

   since tensorflow doesn   t really know anything about butterflies, or
   flowers, or birds, it might not be classifying based on what you think.
   it   s easy to think that tf is comparing butterflies, but it   s really
   just trying to find similar pictures. i don   t have many pictures of
   swallowtails sitting still on the pavement (i suspect this one was
   dying). but i have many pictures of butterflies feeding on those purple
   flowers. maybe tf identified the monarch correctly for the wrong
   reason. maybe tf classified the skipper as a black swallowtail because
   it was also sitting on a purple flower, like several of the
   swallowtails.

   likewise, tensorflow has no built-in sense of scale, nor should it.
   photography is really good at destroying information about size, unless
   you   re really careful about context. but for a human trying to identify
   something, size matters. swallowtails and monarchs are huge as
   butterflies go (tiger swallowtails are the largest butterflies in north
   america). there are many butterflies that are tiny, and many situations
   in which it   s important to know whether you   re looking at a butterfly
   with a wingspan of 2 centimeters or 3, or 15. a skipper is much smaller
   than any swallowtail, but my skipper was cropped so that it filled most
   of the image, and thus looked like a giant among butterflies. i doubt
   that there   s any way for a deep learning system to recover information
   about scale, aside from a very close analysis of the context.

   how does tensorflow deal with objects that look completely different
   from different angles? many butterflies look completely different top
   and bottom (dorsal and ventral, if you know the [32]lingo): for
   example, the [33]painted lady. if you   re not used to thinking about
   butterflies, you   re seeing the bottom when the wings are folded and
   pointing up; you   re seeing the top when the wings are open and out to
   the sides. can tf deal with this? given enough images, i suspect it
   could; it would be an interesting experiment. obviously, there would be
   no problem if you built your training set with    painted lady, dorsal   
   and    painted lady, ventral    as separate categories.

   finally, a thought about photography. the problem with butterflies (or
   birds, for that matter) is that you need to take dozens of pictures to
   get one good one. the animals won   t stay still for you. i save a lot of
   my pictures, but not all of them: i delete the images that aren   t
   focused, where the subject is moving, where it   s too small, or just
   doesn   t    look nice.    we   re spoiled by national geographic. for a
   classifier, i suspect that these bad shots are as useful as the good
   ones, and that human aesthetics make classification more difficult.
   save everything? if you   re planning on building a classifier, that   s
   the way to go.

   playing with tf was fun; i certainly didn   t build anything that could
   be used commercially, but i did get surprisingly good results with
   surprisingly little effort. now, onto the birds...can i beat
   [34]cornell ornithology lab's merlin?
   article image: "the encyclopedia americana" color montage of a variety
   of unidentified butterflies and moths, 1920. (source: [35]wikimedia
   commons).

   share
    1. [36]tweet
    2.
    3.
     __________________________________________________________________

   [37]mike loukides

[38]mike loukides

   mike loukides is vice president of content strategy for o'reilly media,
   inc. he's edited many highly regarded books on technical subjects that
   don't involve windows programming. he's particularly interested in
   programming languages, unix and what passes for unix these days, and
   system and network administration. mike is the author of system
   performance tuning and a coauthor of unix power tools. most recently,
   he's been fooling around with data and data analysis, languages like r,
   mathematica, and octave, and thinking about how to make books soc...
   [39]more
     __________________________________________________________________

   [40]bots landscape.

   [41]ai

[42]infographic: the bot platform ecosystem

   by [43]jon bruner

   a look at the artificial intelligence and messaging platforms behind
   the fast-growing chatbot community

   video
   [44]vertical forest, milan.

   [45]ai

[46]evolve ai

   by [47]naveen rao

   naveen rao explains how intel nervana is evolving the ai stack from
   silicon to the cloud.

   [48]welcome sign at o'reilly ai conference 2016

   [49]ai

[50]highlights from the o'reilly ai conference in new york 2016

   by [51]mac slocum

   watch highlights covering artificial intelligence, machine learning,
   intelligence engineering, and more. from the o'reilly ai conference in
   new york 2016.

   video
   [52]close up of uber's self driving car in pittsburgh.

   [53]ai

[54]how ai is propelling driverless cars, the future of surface transport

   by [55]shahin farshchi

   shahin farshchi examines role artificial intelligence will play in
   driverless cars.

about us

     * [56]our company
     * [57]teach/speak/write
     * [58]careers
     * [59]customer service
     * [60]contact us

site map

     * [61]ideas
     * [62]learning
     * [63]topics
     * [64]all

     *
     *
     *
     *
     *

      2019 o'reilly media, inc. all trademarks and registered trademarks
   appearing on oreilly.com are the property of their respective owners.
   [65]terms of service     [66]privacy policy     [67]editorial independence

   animal

   iframe: [68]https://www.googletagmanager.com/ns.html?id=gtm-5p4v6z

references

   visible links
   1. https://www.oreilly.com/ideas
   2. https://learning.oreilly.com/
   3. http://www.oreilly.com/conferences/
   4. http://shop.oreilly.com/
   5. https://www.oreilly.com/sign-in.html
   6. https://www.oreilly.com/topics/ai
   7. https://www.oreilly.com/topics/data
   8. https://www.oreilly.com/topics/economy
   9. https://www.oreilly.com/topics/operations
  10. https://www.oreilly.com/topics/software-architecture
  11. https://www.oreilly.com/topics/software-engineering
  12. https://www.oreilly.com/topics/web-programming
  13. https://www.oreilly.com/topics
  14. https://www.oreilly.com/ideas
  15. https://learning.oreilly.com/
  16. http://www.oreilly.com/conferences/
  17. http://shop.oreilly.com/
  18. https://www.oreilly.com/topics/ai
  19. https://www.oreilly.com/topics/data
  20. https://www.oreilly.com/topics/economy
  21. https://www.oreilly.com/topics/operations
  22. https://www.oreilly.com/topics/software-architecture
  23. https://www.oreilly.com/topics/software-engineering
  24. https://www.oreilly.com/topics/web-programming
  25. https://www.oreilly.com/topics
  26. https://www.oreilly.com/topics/ai
  27. https://www.oreilly.com/people/1b7da-mike-loukides
  28. https://commons.wikimedia.org/wiki/file:americana_1920_butterfly_-_butterflies_and_moths_(color).jpg
  29. https://www.oreilly.com/learning/tensorflow-for-poets
  30. https://www.oreilly.com/learning/tensorflow-for-poets
  31. https://www.tensorflow.org/versions/master/how_tos/image_retraining/index.html#distortions
  32. http://butterfly.ucdavis.edu/glossary
  33. http://www.butterfliesandmoths.org/species/vanessa-cardui
  34. http://merlin.allaboutbirds.org/photo-id/
  35. https://commons.wikimedia.org/wiki/file:americana_1920_butterfly_-_butterflies_and_moths_(color).jpg
  36. https://twitter.com/share
  37. https://www.oreilly.com/people/1b7da-mike-loukides
  38. https://www.oreilly.com/people/1b7da-mike-loukides
  39. https://www.oreilly.com/people/1b7da-mike-loukides
  40. https://www.oreilly.com/ideas/infographic-the-bot-platform-ecosystem
  41. https://www.oreilly.com/topics/ai
  42. https://www.oreilly.com/ideas/infographic-the-bot-platform-ecosystem
  43. https://www.oreilly.com/people/b1d73-jon-bruner
  44. https://www.oreilly.com/ideas/evolve-ai
  45. https://www.oreilly.com/topics/ai
  46. https://www.oreilly.com/ideas/evolve-ai
  47. https://www.oreilly.com/people/14d38-naveen-rao
  48. https://www.oreilly.com/ideas/keynotes-from-ai-new-york-2016
  49. https://www.oreilly.com/topics/ai
  50. https://www.oreilly.com/ideas/keynotes-from-ai-new-york-2016
  51. https://www.oreilly.com/people/0d2c1-mac-slocum
  52. https://www.oreilly.com/ideas/how-ai-is-propelling-driverless-cars-the-future-of-surface-transport
  53. https://www.oreilly.com/topics/ai
  54. https://www.oreilly.com/ideas/how-ai-is-propelling-driverless-cars-the-future-of-surface-transport
  55. https://www.oreilly.com/people/c7521-shahin-farshchi
  56. http://oreilly.com/about/
  57. http://oreilly.com/work-with-us.html
  58. http://oreilly.com/careers/
  59. http://shop.oreilly.com/category/customer-service.do
  60. http://shop.oreilly.com/category/customer-service.do
  61. https://www.oreilly.com/ideas
  62. https://www.oreilly.com/topics/oreilly-learning
  63. https://www.oreilly.com/topics
  64. https://www.oreilly.com/all
  65. http://oreilly.com/terms/
  66. http://oreilly.com/privacy.html
  67. http://www.oreilly.com/about/editorial_independence.html
  68. https://www.googletagmanager.com/ns.html?id=gtm-5p4v6z

   hidden links:
  70. https://www.oreilly.com/
  71. https://www.facebook.com/oreilly/
  72. https://twitter.com/oreillymedia
  73. https://www.youtube.com/user/oreillymedia
  74. https://plus.google.com/+oreillymedia
  75. https://www.linkedin.com/company/oreilly-media
  76. https://www.oreilly.com/
