   #[1]tensorflow

   (button)
   [2]tensorflow
     *

   [3]install [4]learn
     * [5]introduction
       new to tensorflow?
     * [6]tensorflow
       the core open source ml library
     * [7]for javascript
       tensorflow.js for ml using javascript
     * [8]for mobile & iot
       tensorflow lite for mobile and embedded devices
     * [9]for production
       tensorflow extended for end-to-end ml components
     * [10]swift for tensorflow (in beta)

   [11]api
     * api r1
     * [12]r1.13 (stable)
     * [13]r1.12
     * [14]r1.11
     * [15]r1.10
     * [16]r1.9
     * [17]more   

     * api r2
     * [18]r2.0 (preview)

   [19]resources
     * [20]models & datasets
       pre-trained models and datasets built by google and the community
     * [21]tools
       ecosystem of tools to help you use tensorflow
     * [22]libraries & extensions
       libraries and extensions built on tensorflow

   [23]community [24]why tensorflow
     * [25]about
     * [26]case studies

   ____________________
   (button)
   (button)
   [27]github
     * [28]tensorflow core

   [29]overview [30]tutorials [31]guide [32]tf 2.0 alpha

   (button)
     * [33]install
     * [34]learn
          + more
          + [35]overview
          + [36]tutorials
          + [37]guide
          + [38]tf 2.0 alpha
     * [39]api
          + more
     * [40]resources
          + more
     * [41]community
     * [42]why tensorflow
          + more
     * [43]github

     * [44]get started with tensorflow
     * learn and use ml
          + [45]overview
          + [46]basic classification
          + [47]text classification
          + [48]regression
          + [49]overfitting and underfitting
          + [50]save and restore models
     * research and experimentation
          + [51]overview
          + [52]eager execution
          + [53]automatic differentiation
          + [54]custom training: basics
          + [55]custom layers
          + [56]custom training: walkthrough
     * ml at production scale
          + [57]linear model with estimators
          + [58]wide and deep learning
          + [59]boosted trees
          + [60]boosted trees model understanding
          + [61]build a id98 using estimators
     * generative models
          + [62]translation with attention
          + [63]image captioning
          + [64]dcgan
          + [65]vae
     * images
          + [66]image recognition
          + [67]pix2pix
          + [68]neural style transfer
          + [69]image segmentation
          + [70]advanced id98
     * sequences
          + [71]text generation with an id56
          + [72]recurrent neural network
          + [73]drawing classification
          + [74]simple audio recognition
          + [75]id4
     * load data
          + [76]load images
          + [77]tfrecords and tf.example
     * data representation
          + [78]vector representations of words
          + [79]kernel methods
          + [80]large-scale linear models
          + [81]unicode
     * non-ml
          + [82]mandelbrot set
          + [83]partial differential equations

     * [84]introduction
     * [85]tensorflow
     * [86]for javascript
     * [87]for mobile & iot
     * [88]for production
     * [89]swift for tensorflow (in beta)

     * api r1
     * [90]r1.13 (stable)
     * [91]r1.12
     * [92]r1.11
     * [93]r1.10
     * [94]r1.9
     * [95]more   
     * api r2
     * [96]r2.0 (preview)

     * [97]models & datasets
     * [98]tools
     * [99]libraries & extensions

     * [100]about
     * [101]case studies

   watch talks from the 2019 tensorflow dev summit [102]watch now
     * [103]tensorflow
     * [104]learn
     * [105]tensorflow core
     * [106]tutorials

large-scale linear models with tensorflow

   [107]tf.estimator provides (among other things) a rich set of tools for
   working with linear models in tensorflow. this document provides an
   overview of those tools. it explains:
     * what a linear model is.
     * why you might want to use a linear model.
     * how estimators make it easy to build linear models in tensorflow.
     * how you can use estimators to combine linear models with. deep
       learning to get the advantages of both.

   read this overview to decide whether the estimator's linear model tools
   might be useful to you. then work through the [108]estimator wide and
   deep learning tutorial to give it a try. this overview uses code
   samples from the tutorial, but the tutorial walks through the code in
   greater detail.

   to understand this overview it will help to have some familiarity with
   basic machine learning concepts, and also with [109]estimators.

what is a linear model?

   a linear model uses a single weighted sum of features to make a
   prediction. for example, if you have [110]data on age, years of
   education, and weekly hours of work for a population, a model can learn
   weights for each of those numbers so that their weighted sum estimates
   a person's salary. you can also use linear models for classification.

   some linear models transform the weighted sum into a more convenient
   form. for example, [111]id28 plugs the weighted sum into
   the logistic function to turn the output into a value between 0 and 1.
   but you still just have one weight for each input feature.

why would you want to use a linear model?

   why would you want to use so simple a model when recent research has
   demonstrated the power of more complex neural networks with many
   layers?

   linear models:
     * train quickly, compared to deep neural nets.
     * can work well on very large feature sets.
     * can be trained with algorithms that don't require a lot of fiddling
       with learning rates, etc.
     * can be interpreted and debugged more easily than neural nets. you
       can examine the weights assigned to each feature to figure out
       what's having the biggest impact on a prediction.
     * provide an excellent starting point for learning about machine
       learning.
     * are widely used in industry.

how do estimators help you build linear models?

   you can build a linear model from scratch in tensorflow without the
   help of a special api. but estimators provides some tools that make it
   easier to build effective large-scale linear models.

feature columns and transformations

   much of the work of designing a linear model consists of transforming
   raw data into suitable input features. tensorflow uses the
   featurecolumn abstraction to enable these transformations.

   a featurecolumn represents a single feature in your data. a
   featurecolumn may represent a quantity like 'height', or it may
   represent a category like 'eye_color' where the value is drawn from a
   set of discrete possibilities like {'blue', 'brown', 'green'}.

   in the case of both continuous features like 'height' and categorical
   features like 'eye_color', a single value in the data might get
   transformed into a sequence of numbers before it is input into the
   model. the featurecolumn abstraction lets you manipulate the feature as
   a single semantic unit in spite of this fact. you can specify
   transformations and select features to include without dealing with
   specific indices in the tensors you feed into the model.

sparse columns

   categorical features in linear models are typically translated into a
   sparse vector in which each possible value has a corresponding index or
   id. for example, if there are only three possible eye colors you can
   represent 'eye_color' as a length 3 vector: 'brown' would become [1, 0,
   0], 'blue' would become [0, 1, 0] and 'green' would become [0, 0, 1].
   these vectors are called "sparse" because they may be very long, with
   many zeros, when the set of possible values is very large (such as all
   english words).

   while you don't need to use categorical columns to use the linear model
   tools provided by estimators, one of the strengths of linear models is
   their ability to deal with large sparse vectors. sparse features are a
   primary use case for the linear model tools provided by estimators.

encoding sparse columns

   featurecolumn handles the conversion of categorical values into vectors
   automatically, with code like this:
eye_color = tf.feature_column.categorical_column_with_vocabulary_list(
    "eye_color", vocabulary_list=["blue", "brown", "green"])

   where eye_color is the name of a column in your source data.

   you can also generate featurecolumns for categorical features for which
   you don't know all possible values. for this case you would use
   categorical_column_with_hash_bucket(), which uses a hash function to
   assign indices to feature values.
education = tf.feature_column.categorical_column_with_hash_bucket(
    "education", hash_bucket_size=1000)

feature crosses

   because linear models assign independent weights to separate features,
   they can't learn the relative importance of specific combinations of
   feature values. if you have a feature 'favorite_sport' and a feature
   'home_city' and you're trying to predict whether a person likes to wear
   red, your linear model won't be able to learn that baseball fans from
   st. louis especially like to wear red.

   you can get around this limitation by creating a new feature
   'favorite_sport_x_home_city'. the value of this feature for a given
   person is just the concatenation of the values of the two source
   features: 'baseball_x_stlouis', for example. this sort of combination
   feature is called a feature cross.

   the crossed_column() method makes it easy to set up feature crosses:
sport_x_city = tf.feature_column.crossed_column(
    ["sport", "city"], hash_bucket_size=int(1e4))

continuous columns

   you can specify a continuous feature like so:
age = tf.feature_column.numeric_column("age")

   although, as a single real number, a continuous feature can often be
   input directly into the model, tensorflow offers useful transformations
   for this sort of column as well.

bucketization

   bucketization turns a continuous column into a categorical column. this
   transformation lets you use continuous features in feature crosses, or
   learn cases where specific value ranges have particular importance.

   bucketization divides the range of possible values into subranges
   called buckets:
age_buckets = tf.feature_column.bucketized_column(
    age, boundaries=[18, 25, 30, 35, 40, 45, 50, 55, 60, 65])

   the bucket into which a value falls becomes the categorical label for
   that value.

input function

   featurecolumns provide a specification for the input data for your
   model, indicating how to represent and transform the data. but they do
   not provide the data itself. you provide the data through an input
   function.

   the input function must return a dictionary of tensors. each key
   corresponds to the name of a featurecolumn. each key's value is a
   tensor containing the values of that feature for all data instances.
   see [112]premade estimators for a more comprehensive look at input
   functions, and input_fn in the [113]wide and deep learning tutorial for
   an example implementation of an input function.

   the input function is passed to the train() and evaluate() calls that
   initiate training and testing, as described in the next section.

linear estimators

   tensorflow estimator classes provide a unified training and evaluation
   harness for regression and classification models. they take care of the
   details of the training and evaluation loops and allow the user to
   focus on model inputs and architecture.

   to build a linear estimator, you can use either the
   [114]tf.estimator.linearclassifier estimator or the
   [115]tf.estimator.linearregressor estimator, for classification and
   regression respectively.

   as with all tensorflow estimators, to run the estimator you just:
    1. instantiate the estimator class. for the two linear estimator
       classes, you pass a list of featurecolumns to the constructor.
    2. call the estimator's train() method to train it.
    3. call the estimator's evaluate() method to see how it does.

   for example:
e = tf.estimator.linearclassifier(
    feature_columns=[
        native_country, education, occupation, workclass, marital_status,
        race, age_buckets, education_x_occupation,
        age_buckets_x_race_x_occupation],
    model_dir=your_model_directory)
e.train(input_fn=input_fn_train, steps=200)
# evaluate for one step (one pass through the test data).
results = e.evaluate(input_fn=input_fn_test)

# print the stats for the evaluation.
for key in sorted(results):
    print("%s: %s" % (key, results[key]))

wide and deep learning

   the [116]tf.estimator module also provides an estimator class that lets
   you jointly train a linear model and a deep neural network. this novel
   approach combines the ability of linear models to "memorize" key
   features with the generalization ability of neural nets. use
   [117]tf.estimator.dnnlinearcombinedclassifier to create this sort of
   "wide and deep" model:
e = tf.estimator.dnnlinearcombinedclassifier(
    model_dir=your_model_dir,
    linear_feature_columns=wide_columns,
    dnn_feature_columns=deep_columns,
    dnn_hidden_units=[100, 50])

   for more information, see the [118]wide and deep learning tutorial.

   except as otherwise noted, the content of this page is licensed under
   the [119]creative commons attribution 3.0 license, and code samples are
   licensed under the [120]apache 2.0 license. for details, see the
   [121]google developers site policies. java is a registered trademark of
   oracle and/or its affiliates.

     * stay connected
          + [122]blog
          + [123]github
          + [124]twitter
          + [125]youtube
     * support
          + [126]issue tracker
          + [127]release notes
          + [128]stack overflow
          + [129]brand guidelines

     * [130]terms
     * [131]privacy

   [english_____]

references

   visible links
   1. https://www.tensorflow.org/s/opensearch.xml
   2. https://www.tensorflow.org/
   3. https://www.tensorflow.org/install
   4. https://www.tensorflow.org/learn
   5. https://www.tensorflow.org/learn
   6. https://www.tensorflow.org/overview
   7. https://www.tensorflow.org/js
   8. https://www.tensorflow.org/lite
   9. https://www.tensorflow.org/tfx
  10. https://www.tensorflow.org/swift
  11. https://www.tensorflow.org/api_docs/python/tf
  12. https://www.tensorflow.org/api_docs/python/tf
  13. https://www.tensorflow.org/versions/r1.12/api_docs/python/tf
  14. https://www.tensorflow.org/versions/r1.11/api_docs/python/tf
  15. https://www.tensorflow.org/versions/r1.10/api_docs/python/tf
  16. https://www.tensorflow.org/versions/r1.9/api_docs/python/tf
  17. https://www.tensorflow.org/versions
  18. https://www.tensorflow.org/versions/r2.0/api_docs/python/tf
  19. https://www.tensorflow.org/resources/models-datasets
  20. https://www.tensorflow.org/resources/models-datasets
  21. https://www.tensorflow.org/resources/tools
  22. https://www.tensorflow.org/resources/libraries-extensions
  23. https://www.tensorflow.org/community
  24. https://www.tensorflow.org/about
  25. https://www.tensorflow.org/about
  26. https://www.tensorflow.org/about/case-studies
  27. https://github.com/tensorflow
  28. https://www.tensorflow.org/overview
  29. https://www.tensorflow.org/overview
  30. https://www.tensorflow.org/tutorials
  31. https://www.tensorflow.org/guide
  32. https://www.tensorflow.org/alpha
  33. https://www.tensorflow.org/install
  34. https://www.tensorflow.org/learn
  35. https://www.tensorflow.org/overview
  36. https://www.tensorflow.org/tutorials
  37. https://www.tensorflow.org/guide
  38. https://www.tensorflow.org/alpha
  39. https://www.tensorflow.org/api_docs/python/tf
  40. https://www.tensorflow.org/resources/models-datasets
  41. https://www.tensorflow.org/community
  42. https://www.tensorflow.org/about
  43. https://github.com/tensorflow
  44. https://www.tensorflow.org/tutorials
  45. https://www.tensorflow.org/tutorials/keras
  46. https://www.tensorflow.org/tutorials/keras/basic_classification
  47. https://www.tensorflow.org/tutorials/keras/basic_text_classification
  48. https://www.tensorflow.org/tutorials/keras/basic_regression
  49. https://www.tensorflow.org/tutorials/keras/overfit_and_underfit
  50. https://www.tensorflow.org/tutorials/keras/save_and_restore_models
  51. https://www.tensorflow.org/tutorials/eager
  52. https://www.tensorflow.org/tutorials/eager/eager_basics
  53. https://www.tensorflow.org/tutorials/eager/automatic_differentiation
  54. https://www.tensorflow.org/tutorials/eager/custom_training
  55. https://www.tensorflow.org/tutorials/eager/custom_layers
  56. https://www.tensorflow.org/tutorials/eager/custom_training_walkthrough
  57. https://www.tensorflow.org/tutorials/estimators/linear
  58. https://github.com/tensorflow/models/tree/master/official/wide_deep
  59. https://www.tensorflow.org/tutorials/estimators/boosted_trees
  60. https://www.tensorflow.org/tutorials/estimators/boosted_trees_model_understanding
  61. https://www.tensorflow.org/tutorials/estimators/id98
  62. https://github.com/tensorflow/tensorflow/blob/r1.13/tensorflow/contrib/eager/python/examples/id4_with_attention/id4_with_attention.ipynb
  63. https://github.com/tensorflow/tensorflow/blob/r1.13/tensorflow/contrib/eager/python/examples/generative_examples/image_captioning_with_attention.ipynb
  64. https://github.com/tensorflow/tensorflow/blob/r1.13/tensorflow/contrib/eager/python/examples/generative_examples/dcgan.ipynb
  65. https://github.com/tensorflow/tensorflow/blob/r1.13/tensorflow/contrib/eager/python/examples/generative_examples/cvae.ipynb
  66. https://www.tensorflow.org/tutorials/images/hub_with_keras
  67. https://github.com/tensorflow/tensorflow/blob/r1.13/tensorflow/contrib/eager/python/examples/pix2pix/pix2pix_eager.ipynb
  68. https://github.com/tensorflow/models/blob/master/research/nst_blogpost/4_neural_style_transfer_with_eager_execution.ipynb
  69. https://github.com/tensorflow/models/blob/master/samples/outreach/blogs/segmentation_blogpost/image_segmentation.ipynb
  70. https://www.tensorflow.org/tutorials/images/deep_id98
  71. https://www.tensorflow.org/tutorials/sequences/text_generation
  72. https://www.tensorflow.org/tutorials/sequences/recurrent
  73. https://www.tensorflow.org/tutorials/sequences/recurrent_quickdraw
  74. https://www.tensorflow.org/tutorials/sequences/audio_recognition
  75. https://github.com/tensorflow/id4
  76. https://www.tensorflow.org/tutorials/load_data/images
  77. https://www.tensorflow.org/tutorials/load_data/tf_records
  78. https://www.tensorflow.org/tutorials/representation/id97
  79. https://www.tensorflow.org/tutorials/representation/kernel_methods
  80. https://www.tensorflow.org/tutorials/representation/linear
  81. https://www.tensorflow.org/tutorials/representation/unicode
  82. https://www.tensorflow.org/tutorials/non-ml/mandelbrot
  83. https://www.tensorflow.org/tutorials/non-ml/pdes
  84. https://www.tensorflow.org/learn
  85. https://www.tensorflow.org/overview
  86. https://www.tensorflow.org/js
  87. https://www.tensorflow.org/lite
  88. https://www.tensorflow.org/tfx
  89. https://www.tensorflow.org/swift
  90. https://www.tensorflow.org/api_docs/python/tf
  91. https://www.tensorflow.org/versions/r1.12/api_docs/python/tf
  92. https://www.tensorflow.org/versions/r1.11/api_docs/python/tf
  93. https://www.tensorflow.org/versions/r1.10/api_docs/python/tf
  94. https://www.tensorflow.org/versions/r1.9/api_docs/python/tf
  95. https://www.tensorflow.org/versions
  96. https://www.tensorflow.org/versions/r2.0/api_docs/python/tf
  97. https://www.tensorflow.org/resources/models-datasets
  98. https://www.tensorflow.org/resources/tools
  99. https://www.tensorflow.org/resources/libraries-extensions
 100. https://www.tensorflow.org/about
 101. https://www.tensorflow.org/about/case-studies
 102. https://www.youtube.com/playlist?list=plqy2h8rroyvzouyi26khmksjbedn3squb
 103. https://www.tensorflow.org/
 104. https://www.tensorflow.org/learn
 105. https://www.tensorflow.org/overview
 106. https://www.tensorflow.org/tutorials
 107. https://www.tensorflow.org/api_docs/python/tf/estimator
 108. https://github.com/tensorflow/models/tree/master/official/wide_deep
 109. https://www.tensorflow.org/guide/premade_estimators
 110. https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.names
 111. https://developers.google.com/machine-learning/glossary/#logistic_regression
 112. https://www.tensorflow.org/guide/premade_estimators#input_fn
 113. https://github.com/tensorflow/models/tree/master/official/wide_deep
 114. https://www.tensorflow.org/api_docs/python/tf/estimator/linearclassifier
 115. https://www.tensorflow.org/api_docs/python/tf/estimator/linearregressor
 116. https://www.tensorflow.org/api_docs/python/tf/estimator
 117. https://www.tensorflow.org/api_docs/python/tf/estimator/dnnlinearcombinedclassifier
 118. https://github.com/tensorflow/models/tree/master/official/wide_deep
 119. https://creativecommons.org/licenses/by/3.0/
 120. https://www.apache.org/licenses/license-2.0
 121. https://developers.google.com/site-policies
 122. https://medium.com/tensorflow
 123. https://github.com/tensorflow/
 124. https://twitter.com/tensorflow
 125. https://youtube.com/tensorflow
 126. https://github.com/tensorflow/tensorflow/issues
 127. https://github.com/tensorflow/tensorflow/blob/master/release.md
 128. https://stackoverflow.com/questions/tagged/tensorflow
 129. https://www.tensorflow.org/extras/tensorflow_brand_guidelines.pdf
 130. https://policies.google.com/terms
 131. https://policies.google.com/privacy

   hidden links:
 133. https://www.tensorflow.org/tutorials/representation/linear
 134. https://www.tensorflow.org/tutorials/representation/linear
 135. https://www.tensorflow.org/tutorials/representation/linear
 136. https://www.tensorflow.org/tutorials/representation/linear
