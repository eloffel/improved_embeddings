jmlr: workshop and conference proceedings 24:143   153, 2012 10th european workshop on id23

an investigation of imitation learning algorithms for

id170

andreas vlachos
computer laboratory, university of cambridge, uk.

andreas.vlachos@cl.cam.ac.uk

editor: marc peter deisenroth, csaba szepesv  ri, jan peters

abstract

in the imitation learning paradigm algorithms learn from expert demonstrations in order
to become able to accomplish a particular task. daum   iii et al. [2009] framed structured
prediction in this paradigm and developed the search-based id170 algorithm
(searn) which has been applied successfully to various natural language processing tasks
with state-of-the-art performance. recently, ross et al. [2011] proposed the dataset aggre-
gation algorithm (dagger) and compared it with searn in sequential prediction tasks.
in this paper, we compare these two algorithms in the context of a more complex structured
prediction task, namely biomedical event extraction. we demonstrate that dagger has
more stable performance and faster learning than searn, and that these advantages are
more pronounced in the parameter-free versions of the algorithms.
keywords: real-world applications, imitation learning, natural language processing,
id170.

1. introduction

imitation learning algorithms aim at learning controllers from demonstrations by human
experts [schaal, 1999; abbeel, 2008; syed, 2010]. unlike standard id23
algorithms [sutton and barto, 1996], they do not require the speci   cation of a reward func-
tion by the practitioner. instead, the algorithm observes a human expert perform a series of
actions to accomplish the task in question and learns a policy that    imitates    the expert with
the purpose of generalizing to unseen data. these actions have dependencies between them,
since earlier ones a   ect the input to the following ones and the algorithm needs to handle
the discrepancy between the actions of the expert in the demonstration during training and
the actions predicted by the learned controller during testing. imitation learning algorithms
have been applied successfully to a variety of domains and tasks including autonomous he-
licopter    ight [coates et al., 2008] and statistical dialog management [syed and schapire,
2007].

for id170 tasks in natural language processing (nlp) the output space
of an instance is a structured group of labels [smith, 2011]. for example, in part-of-speech
tagging the output for a sentence is a sequence of part-of-speech tags, or in handwriting
recognition the output is a sequence of characters. structures can often be more complex
than sequences, for example in syntactic id33 the output space for a sentence
is a set of labeled edges spanning the words. while learning methods such as conditional
random fields [la   erty et al., 2001] and markov logic networks [domingos and lowd,

c(cid:13) 2012 a. vlachos.

vlachos

2009] have been developed for id170, they are usually tailored to particular
structures so that they can perform parameter learning and id136 e   ciently. as a result,
a common approach that performs well in practice is to decompose id170
into multiple classi   cation tasks, in which each label of the structured output is predicted
by a classi   er.

under this prism, learning for id170 can be viewed as learning a controller
whose actions are to output each of the labels of the structured output. similar to the
controllers in id23, these actions have dependencies between them (e.g. in
part-of-speech tagging, determiners are commonly followed by nouns instead of verbs, or in
handwriting recognition some character sequences are more likely than others) which must
be taken into account in order to achieve good performance. the training signal commonly
provided is a set of labeled instances produced by a human expert, which is akin to the
human demonstrations in the imitation learning paradigm. daum   iii et al. [2009] proposed
an imitation learning algorithm1, search-based id170 (searn), that reduces
the problem of learning a model for id170 into learning a set of classi   ers.
this reduction enables searn to tackle id170 tasks with complex output
spaces, and it has been applied successfully to a variety of tasks including summarization
[daum   iii et al., 2009] and biomedical event extraction [vlachos and craven, 2011].

in this work, we investigate a novel imitation learning algorithm proposed by ross et al.
[2011], dataset aggregation (dagger) that also reduces the problem of learning structured
prediction to classi   cation learning. it was compared to searn on learning video game-
playing agents and handwriting recognition and was shown to be more stable and have
faster learning while achieving state-of-the-art performance.

in this paper we make the following contributions. we present searn and dagger in a
uni   ed description, highlighting the connections between imitation learning and structured
prediction. we then compare them in the context of biomedical event extraction [kim
et al., 2011], a task in which the structure of the output is more complex than a sequence
of labels, and con   rm the aforementioned advantages of dagger over searn which are
more pronounced in the parameter-free versions of the algorithms. furthermore, we explore
the e   ect of the learning rate on the balance between precision and recall achieved by the
algorithms. we believe that these contributions are relevant to applications of imitation
learning algorithms to other id170 tasks, as well as to the development and
evaluation of imitation learning algorithms.

2. imitation learning algorithms for id170

searn and dagger form the structured output prediction of an instance s as a sequence
of t actions   y1:t made by a learned policy h. each action   yt can use features from s and all
previous actions   y1:t   1, thus exploiting possible dependencies. the number of actions taken
for an instance is not de   ned in advance but it depends on the actions chosen.
algorithm 1 presents the training procedure for searn and dagger. both algorithms
require a set of labeled training instances s and a id168     that compares structured

1. searn infers rewards using the id168 and the labeled instances, therefore it is better described as
an apprenticeship learning algorithm [syed, 2010]. note though that this distinction between imitation
and apprenticeship learning is not consistent among authors [abbeel, 2008].

144

an investigation of imitation learning algorithms for id170

algorithm 1: imitation learning training
input: training data s, expert policy      , id168    ,
learning rate   , csc learner cscl
output: policy hn

1 examples e =    
2 for i = 1 to n do
p = (1       )i   1
3
current policy    = p      + (1     p)hi   1
if searn then

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

for s in s do

examples e =    
predict   (s) =   y1:t
for   yt in   (s) do

extract features   t = f (s,   y1:t   1)
foreach possible action yj

t do

if searn then

else

predict y   t+1:t =   (s|  y1:t   1, yj
t )
predict y   t+1:t =      (s|  y1:t   1, yj
t )
t , y   t+1:t )

t =    (  y1:t   1, yj

estimate cj

add (  t, ct) to e

learn a policy hi = cscl(e)
if searn then

hi =   pi

hi = hi

else

j=1

(1     )i   j
1   (1     )i hj

in addition,
output predictions of instances in s against the correct output for them.
an expert policy       must be speci   ed which is a function that returns the optimal action
  yt for the instances in the training data, which is akin to an expert demonstrating the
task. an action is optimal when it minimizes the loss over the instance given the previous
actions   y1:t   1 assuming that all future actions   yt+1:t are also optimal.       is typically derived
from the labeled training instances (e.g. in handwriting recognition       returns the correct
character for each position) and it must be able to deal with mistaken   y1:t   1. both algorithms
output a learned policy h that is a classi   er, which unlike the expert policy      , it can
generalize to unseen data. finally, the learning rate    and a cost sensitive classi   cation
(csc) learner (cscl) must be provided.
in csc each training instance has a vector of
misclassi   cation costs associated with it, thus rendering some mistakes on some instances
to be more expensive than others [domingos, 1999].

each training iteration of both algorithms begins by setting the id203 p (line 3) of
using       in the current policy   . in the    rst iteration only       is used but in later iterations

145

vlachos

   becomes stochastic as for each action we use       with id203 p and the learned policy
from the previous iteration hi   1 with id203 1     p (line 4). then    is used to predict
each instance s in the training data (line 8). for each s and each action   yt, a csc example
is generated (lines 10-17). the features   t are extracted from s and the previous actions
  y1:t   1 (line 10) and are desinged to be good predictors of the current action   yt. for example,
in part-of-speech tagging, commonly used features include the word whose part of speech
label we are predicting, the words preceding it and following it, as well as the label predicted
for the previous word. the cost for each possible action yj
t is estimated by predicting the
remaining actions y   t+1:t in s using either    or       (line 13 or 15) and calculating the loss
incurred given that action w.r.t. the correct output using     (line 16). the features for each
timestep together with the costs for each possible action at that timestep (  t, ct) form one
csc example (line 17). the csc examples obtained from all the training instances are
used by a csc learning algorithm to learn a policy hi (line 18) which is combined with the
previously learned ones to form the new policy hi.

in each iteration, the algorithm predicts the instances in the training data and estimates
the cost of each action. this procedure is commonly referred to as inverse reinforcement
learning [abbeel and ng, 2004], since unlike standard id23, an expert
policy is given but we try to learn the reward for each action (cost). note that the learned
policy from the previous iteration is used in generating the csc examples in predicting each
training data instance (line), as well as estimating the cost for each action in the case of
searn (line 13). the degree to which it is used depends on the id203 p set in the
beginning of each iteration. by gradually decreasing the use of the expert policy in the
current policy, both algorithms adapt the learned policy to its own predictions.

the main algorithmic di   erence between searn and dagger is in the learning of the
classi   ers hi in each iteration and in combining them into a policy hi. under searn, each hi
is learned using only the csc examples generated in iteration i (line 6) and is then combined
with the classi   ers learned in the previous iterations h1:i   1 according to the learning rate
   (line 20). on the other hand, dagger learns hi using csc examples from iterations
1 : i and uses it as the learned policy hi (line 22). thus dagger can combine the training
signal obtained from all iterations more    exibly, which results in faster learning and more
stable performance compared to searn.

another di   erence between the two algorithms is that dagger uses the expert policy
      to predict the remaining actions in y   t+1:t .2 this approach to costing had been proposed
by daum   iii et al. [2009] in the context of searn, referred to as optimal approximation.
the learning rate    determines how fast the current policy    moves away from      . a
special case is obtained when    = 1, also referred to as pure policy iteration or parameter-
free. in this case,       is used only in the    rst iteration to reproduce the correct output and
   only uses only the learned policy from the previous iteration hi   1. furthermore, the
classi   er combination under searn becomes the same as the one of dagger, i.e. only
the most recently learned classi   er is used. in this setting the algorithms cannot query      
after the    rst iteration, thus       does not need to handle mistakes in previous actions since
all actions are optimal in the    rst iteration. furthermore, the predictions in lines 8 and
12 become deterministic. however, relying only on the learned policy for action prediction

2. this fact was pointed out by a reviewer as it was not mentioned by ross et al. [2011].

146

an investigation of imitation learning algorithms for id170

beyond the    rst iteration (note that the cost estimation still uses the correct output via the
id168) renders the learning harder as the algorithms are given less supervision.

3. tackling biomedical event extraction with imitation learning

vlachos and craven [2012] developed a biomedical event extraction approach trained with
searn that achieved the second-best reported performance on the data from the recent
bionlp 2011 shared task (bionlp11st) [kim et al., 2011]. therefore, we decided to use
the bionlp11st setup to compare empirically searn and dagger. in this section we
describe brie   y the task and the approach, but the interested reader is referred to the article
by vlachos and craven [2012] for more details.

the term biomedical event extraction is used to refer to the task of extracting descrip-
tions of actions and relations among one or more entities from the biomedical literature.
in bionlp11st each event consists of a trigger and one or more arguments, the latter
being proteins or other events. protein names are annotated in advance and any token
in a sentence can be a trigger for one of the nine event types. depending on their event
types, triggers are assigned theme and cause arguments. in an example demonstrating the
complexity of the task, given the passage    . . . sq 22536 suppressed gp41-induced il-10 pro-
duction in monocytes   , systems should extract the three appropriately nested events listed
in figure 3.1(d). performance is measured using recall, precision and f-score over complete
events, i.e. the trigger, the event type and the arguments all must be correct in order to
obtain a true positive.

in our approach, we treat each sentence independently and decompose event extraction
in four stages: trigger recognition, theme assignment, cause assignment and event con-
struction (fig. 3.1).3 apart from the last one which is rule-based, each stage has its own
module to perform the classi   cation needed. the basic features used are extracted from the
lemmatization and the syntactic parse of the sentence. furthermore, we extract structural
features for each action from the previous ones, for example the trigger recognition label of
the previous token is used as a feature to predict the label for the current token.

the id168 sums the number of false positive and false negative events, following
the task evaluation. the expert policy for a sentence is derived from the correct events
contained in the training data and returns the action that minimizes the loss over the
sentence given the previous actions and assuming that all future actions are optimal. in
the    rst iteration it returns the actions required to reproduce the correct events in the
sentence. in subsequent iterations, in order to deal with mistakes in previous actions, it
avoids assigning arguments to incorrectly tagged triggers and avoids using incorrect events
as arguments of other events. it it important to note that the same events can be obtained
using di   erent sequences of actions and that the correct events in the training data specify
only one such sequence. for example in figure 3.1, token    sq    could have been tagged as a
trigger without assigning any arguments to it and we ould still obtain the correct events. in
order to resolve this ambiguity, we restrict the expert policy to return only the the triggers
that are necessary to produce the correct events.

3. while di   erent task decompositions are possible, this 4-stage decomposition is the most commonly used

one among the systems participating in bionlp11st.

147

vlachos

sq

22536

suppressed
neg_reg

gp41 -induced
pos_reg

il-10 production
gene_exp

(a) trigger recognition

theme

theme

theme

sq

22536

suppressed
neg_reg

gp41 -induced
pos_reg

il-10 production
gene_exp

(b) theme assignment

theme

theme

cause

theme

sq

22536

suppressed
neg_reg

gp41 -induced
pos_reg

il-10 production
gene_exp

(c) cause assignment

type

id
neg_reg
e1
e2
pos_reg
e3 gene_exp

trigger

theme cause

suppressed

induced

production

e2
e3
il-10

gp41

(d ) event construction

figure 3.1: the stages of our biomedical event extraction system.

the classi   ers learned for trigger recognition, theme assignment and cause assignment,
are unlikely to be able to replicate to the expert policy due to the di   culty of the tasks. in
such cases, the optimal approximation method for costing (line 15 in alg. 1) is unlikely to
estimate the cost of each action correctly, since the actions predicted by the learned policy
are likely to di   er from the ones returned by the expert policy. therefore, in our experiments
we use the searn-style cost estimation (line 13 in alg. 1) for both searn and dagger. in
order to restrict the e   ects of the stochasticity of this approach, we use the focused costing
method [vlachos and craven, 2011], in which the cost estimation for an action takes into
account only the part of the output graph connected with that action, thus limiting the part
of the structured output considered for this purpose.

the structure of the output space for the biomedical event extraction decomposition
described above is a sequence of tags de   ning triggers and their event types, combined
with a directed acyclic graph in which vertices correspond to triggers or proteins and edges
represent argument assignments. thus it is more complex than the handwriting recognition
task that was used in the comparison performed by ross et al. [2011] which is a sequential
tagging task. also, it is not amenable to several commonly used id170
methods which rely on the output structure being a sequence or a tree in order to perform
id136 e   ciently. furthermore, incorrect actions can prohibit other correct actions from

148

an investigation of imitation learning algorithms for id170

being taken, e.g.
if a token is incorrectly predicted not to be a trigger, it is impossible to
assign arguments to it. again, this is unlike sequential tagging tasks, where an incorrect
prediction of a token does not prohibit the correct prediction of the remaining ones. both
algorithms under comparison use the learned policies from previous iterations in order to
generate training examples (line 9 in alg 1), therefore incorrectly predicted actions can
inhibit the algorithm from reaching regions of the output space that could provide useful
csc examples. thus, the learning rate which determines how frequently the expert policy
is queried is likely to be more important for biomedical event extraction than it was in the
comparisons of ross et al. [2011].

4. experiments

in our experiments we run searn and dagger for 12 training iterations and perform
csc learning using the online passive-aggressive (pa) algorithm [crammer et al., 2006].
bionlp11st comprises three datasets     training, development and test     which consist
of    ve full articles each and 800, 150 and 260 abstracts respectively. we extract features
from the output of the syntactic parser by mcclosky [2010] as provided by the shared task
organizers [stenetorp et al., 2011]. the use of this publicly available resource allows for
easy replication of our experiments. while the correct output is provided for the training
and development datasets, evaluation on the test dataset is only possible once per day via a
webserver in order to maintain the fairness of comparisons between systems. however, since
we focus on comparing the algorithms in terms of stability and learning speed, we report
results on the development set.

initially we compare searn and dagger with learning rate equal to one. figure 4.1(a)
shows that the performance of dagger peaks after 6 iterations beyond which it remains
stable. on the other hand, the performance of searn oscillates between high recall/low
precision and low recall/high precision iterations (figures 4.1(b) and 4.1(c)). in particular,
in the    rst iteration searn learns theme and cause assignment components given correctly
identi   ed triggers only (the expert policy only returns those), but the trigger recognition
component learned returns many incorrect ones, thus resulting in high recall and low pre-
cision. this behaviour is reversed in the second iteration, in which the theme and cause
assignment components are learned so that they can accommodate for incorrectly recognized
triggers, but at the same time the trigger recognition component becomes extremely conser-
vative. this pattern holds for subsequent iterations, albeit progressively less pronounced. in
contrast, dagger can combine training signal from both iterations, thus its performance
improves faster and avoids such oscillating behaviour. the unstable behaviour of searn
a   ects the training time as well, since in the high recall/low precision iterations the algo-
rithm needs to consider many more actions during the cost-sensitive example generation
steps (lines 8-17 in alg. 1).

figure 4.1(b) shows a substantial drop in recall for both algorithms in the second iter-
ation. this is due to the learned policy in the    rst iteration being unable to replicate the
correct output without using the expert policy. this issue did not emerge in the experiments
of ross et al. [2011], but as explained in section 3, event extraction is likely to be a   ected by
it. using slower learning rates ameliorates this problem (figure 4.1(e)) and renders searn

149

vlachos

e
r
o
c
s
-
f

e
r
o
c
s
-
f

e
r
o
c
s
-
f

 55

 50

 45

 40

 35

 30

 55

 50

 45

 40

 35

 30

 55

 50

 45

 40

 35

 30

l
l

a
c
e
r

 55

 50

 45

 40

 35

 30

dagger(1)
searn(1)

dagger(1)
searn(1)

i

i

n
o
s
c
e
r
p

 80

 70

 60

 50

 40

 30

 20

dagger(1)
searn(1)

 0

 2

 4

 6

 8

 10

 0

 2

 4

 6

 8

 10

 0

 2

 4

 6

 8

 10

training iteration

training iteration

training iteration

(a)

(b)

(c)

l
l

a
c
e
r

 55

 50

 45

 40

 35

 30

dagger(0.3)
searn(0.3)

dagger(0.3)
searn(0.3)

 65
 60
 55
 50
 45
 40
 35
 30

dagger(0.3)
searn(0.3)

i

i

n
o
s
c
e
r
p

 0

 2

 4

 6

 8

 10

 0

 2

 4

 6

 8

 10

 0

 2

 4

 6

 8

 10

training iteration

training iteration

training iteration

(d)

(e)

(f )

e
r
o
c
s
-
f

 55

 50

 45

 40

 35

 30

dagger(0.7)
searn(0.7)

e
r
o
c
s
-
f

 55

 50

 45

 40

 35

 30

dagger(0.1)
searn(0.1)

dagger(0.1)
danofocus(0.1)

 0

 2

 4

 6

 8

 10

 0

 2

 4

 6

 8

 10

 0

 2

 4

 6

 8

 10

training iteration

training iteration

training iteration

(g)

(h)

(i)

figure 4.1: development dataset results for dagger(  ) and searn(  ) with various learn-

ing rates.

more stable, but dagger still learns faster for a range of learning rates (0.7, 0.3 and 0.1 in
figures 4.1(d), 4.1(g) and 4.1(h) respectively).

even though slower learning rates improve the performance for both searn and dag-
ger, the improvement for the latter is not as dramatic (about 1.5 points in f-score). as
discussed in sec. 2, when    < 1 action costing becomes stochastic, which can result in un-
reliable estimates. in our experiments we used the focused costing approach proposed by
vlachos and craven [2011], who reported that it improved the performance of searn by 4
f-score points. in figure 4.1(i) we compared the performance of dagger with and without
focused costing and we show that even though focused costing results in faster learning, the
di   erence in terms of f-score is smaller, approximately 2 points. in other words, dagger
is more robust w.r.t. the choice of action costing method. also note that using dagger
with    = 1 avoids introducing stochasticity in action costing, while unlike searn it remains
stable, thus it is more likely to be applicable to other id170 tasks.

150

an investigation of imitation learning algorithms for id170

5. conclusions - future work

in this paper we compared two imitation learning algorithms for id170,
searn and dagger. we presented them in a uni   ed description and evaluated them
on biomedical event extraction. we found that dagger is more stable and learns faster,
while being more robust with respect to the choice of learning rates and action costing.
these advantages are more pronounced in the parameter-free versions of the algorithms
which avoid stochastic cost estimates and need simpler expert policy de   nitions. finally,
we assessed the e   ect of the learning rate in complex id170 tasks in which
mistaken predictions can inhibit imitation learning algorithms from exploring useful parts of
the training data. our contributions should be relevant to applications of imitation learning
to other id170 tasks.

in future work, we will apply imitation learning algorithms to other complex struc-
tured prediction tasks. furthermore, we would like to explore and compare against other
id170 frameworks such as id170 cascades [weiss and taskar,
2010] and output space search [doppa et al., 2012] that also rely on reductions of structured
prediction learning to simpler problems.

acknowledgments

the research leading to these results has received funding from the european commu-
nity   s seventh framework programme (fp7/2007-2013) under grant agreement no. 270019
(spacebook project www.spacebook-project.eu).

references

pieter abbeel. apprenticeship learning and id23 with application to
robotic control. phd thesis, department of computer science, stanford university, 2008.

pieter abbeel and andrew y. ng. apprenticeship learning via inverse id23.
in proceedings of the 21st international conference on machine learning, pages 46   53,
2004.

adam coates, pieter abbeel, and andrew y. ng. learning for control from multiple demon-
strations. in proceedings of the 25th international conference on machine learning, pages
144   151, 2008.

koby crammer, ofer dekel, joseph keshet, shai shalev-shwartz, and yoram singer. online

passive-aggressive algorithms. journal of machine learning research, 7:551   585, 2006.

hal daum   iii, john langford, and daniel marcu. search-based id170.

machine learning, 75:297   325, 2009.

pedro domingos. metacost: a general method for making classi   ers cost-sensitive.

in
proceedings of the 5th international conference on knowledge discovery and data mining,
pages 155   164. association for computing machinery, 1999.

151

vlachos

pedro domingos and daniel lowd. markov logic: an interface layer for arti   cial in-
isbn 1598296922,

telligence. morgan and claypool publishers, 1st edition, 2009.
9781598296921.

janardhan rao doppa, alan fern, and prasad tadepalli. output space search for structured
in proceedings of the 29th international conference on machine learning,

prediction.
2012.

jin-dong kim, yue wang, toshihisa takagi, and akinori yonezawa. overview of the genia
event task in bionlp shared task 2011. in proceedings of the bionlp 2011 workshop
companion volume for shared task, pages 7   15, 2011.

john d. la   erty, andrew mccallum, and fernando pereira. conditional random    elds:
probabilistic models for segmenting and labeling sequence data. in proceedings of 18th
international conference in machine learning, pages 282   289. morgan kaufmann pub-
lishers inc., 2001.

david mcclosky. any domain parsing: automatic id20 for natural language

parsing. phd thesis, department of computer science, brown university, 2010.

st  phane ross, geo   rey j. gordon, and drew bagnell. a reduction of imitation learning
and id170 to no-regret online learning. in 14th international conference
on arti   cial intelligence and statistics, pages 627   635, 2011.

stefan schaal. is imitation learning the route to humanoid robots? trends in cognitive

sciences, 3(6):233   242, june 1999.

noah a. smith. linguistic structure prediction. synthesis lectures on human language

technologies. morgan and claypool, may 2011.

pontus stenetorp, goran topi  , sampo pyysalo, tomoko ohta, jin-dong kim, and jun   ichi
tsujii. bionlp shared task 2011: supporting resources. in proceedings of the bionlp
2011 workshop companion volume for shared task, 2011.

richard sutton and andrew barto. id23: an introduction. mit press,

1996.

umar syed. id23 without rewards. phd thesis, department of computer

science, princeton university, 2010.

umar syed and robert e. schapire. imitation learning with a value-based prior. in pro-
ceedings of the twenty-third conference on uncertainty in arti   cial intelligence, pages
384   391, 2007.

andreas vlachos and mark craven. search-based id170 applied to biomedical
event extraction. in proceedings of the fifteenth conference on computational natural
language learning, pages 49   57. association for computational linguistics, 2011.

andreas vlachos and mark craven. biomedical event extraction from abstracts and full
papers using search-based id170. bmc bioinformatics, 13(suppl. 11):s5,
2012.

152

an investigation of imitation learning algorithms for id170

david weiss and ben taskar. id170 cascades. in proceedings of the thir-

teenth international conference on arti   cial intelligence and statistics, 2010.

153

154

