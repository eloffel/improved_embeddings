   #[1]aws machine learning blog    train id4 models
   with sockeye comments feed [2]rss 2.0 feed

   [3]click here to return to amazon web services homepage
   [4]contact sales [5]support [6]english  [7]my account
   [8]sign up
     * [9]products
     * [10]solutions
     * [11]pricing
     * [12]documentation
     * [13]learn
     * [14]partner network
     * [15]aws marketplace
     * [16]explore more

   ____________________
     * [17]bahasa indonesia
     * [18]deutsch
     * [19]english
     * [20]espa  ol
     * [21]fran  ais
     * [22]italiano
     * [23]portugu  s
     * [24]ti   ng vi   t

     * [25]t  rk  e
     * [26]              
     * [27]         
     * [28]         
     * [29]         
     * [30]       (      )
     * [31]       (      )

     * [32]aws management console
     * [33]account settings
     * [34]billing & cost management
     * [35]security credentials
     * [36]aws personal health dashboard

   [37]click here to return to amazon web services homepage
   ____________________

     * [38]products
     * [39]solutions
     * [40]pricing
     * [41]introduction to aws
     * [42]getting started
     * [43]documentation
     * [44]training and certification
     * [45]developer center
     * [46]customer success
     * [47]partner network
     * [48]aws marketplace
     * [49]support
     * [50]log into console
     * [51]download the mobile app

   [52]blog home [53]category  [54]edition  [55]follow
   ____________________
   (button)
   [56]aws news [57]aws podcast
     __________________________________________________________________

   [58]architecture [59]aws partner network [60]aws marketplace [61]big
   data [62]business productivity [63]contact center [64]compute
   [65]database [66]desktop and application streaming [67]developer
   [68]devops [69]enterprise strategy [70]game tech [71]internet of things
   [72]machine learning [73]management tools [74]media [75]messaging &
   targeting [76]mobile [77]networking & content delivery [78]open source
   [79]public sector [80]sap [81]security, identity, & compliance
   [82]startups
   [83]china edition [84]france edition [85]germany edition [86]japan
   edition [87]korea edition [88]portuguese edition [89]russian edition
   [90]spanish edition [91]english edition
   [92]mailing list [93]rss feed [94]aws podcast

[95]aws machine learning blog

train id4 models with sockeye

   by felix hieber and tobias domhan | on 20 jul 2017 | [96]permalink |
   [97]comments | [98] share
     *
     *
     *
     *
     * https://aws.amazon.c

   have you ever wondered how you can use machine learning (ml) for
   translation? with our new framework, [99]sockeye, you can model machine
   translation (mt) and other sequence-to-sequence tasks. sockeye, which
   is built on [100]apache mxnet, does most of the heavy lifting for
   building, training, and running state-of-the-art sequence-to-sequence
   models.

   in natural language processing (nlp), many tasks revolve around solving
   sequence prediction problems. for example, in mt, the task is
   predicting a sequence of translated words, given a sequence of input
   words. models that perform this kind of task are often called
   sequence-to-sequence models. lately, deep neural networks (dnns) have
   significantly advanced the performance of these models. sockeye
   provides both a state-of-the-art implementation of neural machine
   translation (id4) models and a platform to conduct id4 research.

   sockeye is built on apache mxnet, a fast and scalable deep learning
   library. [101]the sockeye codebase leverages unique features from
   mxnet. for example, it mixes declarative and imperative programming
   styles through the symbolic and imperative mxnet apis. it also uses
   data parallelism to train models on multiple gpus.

   in this post, we provide an overview of id4, and then show how to use
   sockeye to train a minimal id4 model with attention.

how sequence-to-sequence models with attention work

   to understand what   s going on under the hood in sockeye, let   s take a
   look at the neural network architecture that many academic groups and
   industry commonly use.

   the network has three major components: the encoder, the decoder, and
   the attention mechanism. the encoder reads the source sentence one word
   at a time until the end of sentence (<eos>) and produces a hidden
   representation of the sentence. the encoder is often implemented as a
   recurrent neural network (id56), such as a long short-term memory (lstm)
   network.

   the decoder, which is also implemented as an id56, produces the target
   sentence one word at a time, starting with a beginning-of-sentence
   symbol (<bos>). it has access to the source sentence through an
   attention mechanism that generated a context vector. using the
   attention mechanism, the decoder can decide which words are most
   relevant for generating the next target word. this way, the decoder has
   access to the entire input sentence at all times.

   the next word that the network generates becomes an input to the
   decoder. the decoder produces the subsequent word based on the
   generated word and its hidden representation. the network continues
   generating words until it produces a special end-of-sentence symbol,
   <eos>.

sockeye: sequence-to-sequence modeling for mt with mxnet

   sockeye implements state-of-the-art sequence-to-sequence models in
   mxnet. it also provides appropriate default values for all of the
   hyperparameters for sequence-to-sequence models. for optimization, you
   don   t need to worry about stopping criteria, metric tracking, or weight
   initialization. you can simply run the provided training command line
   interface (cli).

   you can easily change the basic model architecture, including the
   following elements:
     * the id56 cell type (lstm or gru) and hidden state size
     * the number of id56 layers
     * the size of source and target sequence embeddings
     * the type of attention mechanism applied over the source encoding

   sockeye also supports more advanced features, such as:
     * id125 id136
     * easy ensembling of multiple models
     * residual connections between id56 layers ([102]wu et al., 2016)
     * lexical biasing of output layer predictions ([103]arthur et al.,
       2016)
     * modeling coverage ([104]tu et al., 2016)
     * context gating ([105]tu et al., 2017)
     * cross-id178 label smoothing (e.g., [106]pereyra et al., 2017)
     * layer id172 ([107]ba et al, 2016)

   for training, sockeye gives you full control over important
   optimization parameters. for example, you can set the optimizer types,
   learning rate, momentum, weight decay, and early-stopping conditions.
   sockeye tracks multiple metrics (including mt-specific metrics, like
   id7) on the training and validation data.

   we plan to continuously extend the sockeye feature set to provide
   researchers a platform for experimenting with new ideas for id4.

training a minimal model and using it for translation

   now, let   s train our first id4 model. we expect that the following
   commands are run on the shell of any unix like operating system like
   linux or mac os x.

get the dataset

   first, acquire a parallel corpus. a parallel corpus is a list of
   sentences and their translations. sockeye expects all input data to be
   tokens delimited with whitespace. before feeding data into sockeye,
   always run a tokenizer that separates words and punctuation. for this
   post, you download the tokenized training and development data from the
   2017 news translation task of the conference on machine translation
   (wmt).

   to download german and english parallel sentences from news articles,
   use the following shell commands:
curl http://data.statmt.org/wmt17/translation-task/preprocessed/de-en/corpus.tc.
de.gz | gunzip | head -n 1000000 > train.de
curl http://data.statmt.org/wmt17/translation-task/preprocessed/de-en/corpus.tc.
en.gz | gunzip | head -n 1000000 > train.en

   here we only use the first 1,000,000 sentences for training. in
   practice, you would train a model on a much larger dataset.

   to track quality metrics on unseen sentences during training, download
   a validation set:
curl http://data.statmt.org/wmt17/translation-task/preprocessed/de-en/dev.tgz |
tar xvzf -

   you now have the train.de and train.en files, which contain the
   parallel training sentences, and the newstest2016.tc.de and
   newstest2016.tc.en files, which contain the unseen validation
   sentences. it is important to evaluate the model on sentences that have
   not been seen during training, in order to correctly estimate how well
   it will perform on new sentences the model has not seen before.

install sockeye

   because the models are computationally expensive, we generally
   recommend running sockeye on a gpu. that said, you can run it on a
   computer without a gpu. if you want to run sockeye on the cpu, install
   it with the following command:
pip3 install sockeye

   note:

   when running sockeye on the cpu, be sure to add --use-cpu to all
   commands. otherwise, sockeye will try to run on a gpu and fail.

   if you have a gpu available, install sockeye for cuda 8.0 with the
   following command:
pip3 install sockeye --no-deps numpy mxnet-cu80==0.10.0

   to install it for cuda 7.5, use this command:
pip3 install sockeye --no-deps numpy mxnet-cu75==0.10.0

train the model

   now you   re all set to train your first german-to-english id4 model.
   start training by running the following command:
python3 -m sockeye.train -s train.de \
                        -t train.en \
                        -vs newstest2016.tc.de \
                        -vt newstest2016.tc.en \
                        --num-embed 128 \
                        --id56-num-hidden 512 \
                        --attention-type dot \
                        --dropout 0.5 \
                                                --word-min-count 10 \
                        -o model

   this trains a model with an embedding size of 128 and 512 hidden units.
   during training, sockeye regularly prints validation metrics.

   training with a single k80 gpu on a p2 instance takes about 13 hours.
   after training has finished, you can find all artifacts, such as the
   model parameters, in the directory called model.

translate

   after training the model, you can begin translation by feeding in
   tokenized sentences:
echo "das gr  ne haus ." | python3 -m sockeye.translate -m model 2>/dev/null

   this translates to    the green house.    try translating some more
   difficult sentences. be sure to feed in tokenized sentences, where the
   punctuation marks are separated from all words by whitespaces. notice
   that when the model doesn   t know a word, it represents it with the
   <unk> token.

   you can also visualize the attention network. for this, you need to
   install matplotlib as an additional dependency, if you haven   t already:
pip3 install matplotlib

   to create a file called align_1.png that visualizes the attention
   network, set the output-type to align_plot:
echo "das gr  ne haus ." | python3 -m sockeye.translate -m model --output-type al
ign_plot

   the output should look similar to this:

   for each word in the target, you see which word in the source that the
   network paid attention to. the attention doesn   t necessarily need to
   make sense for the model to produce high-quality translations. for a
   more complicated sentence, it looks something like this:

   you can see that the model figured out that the word    sprechen   
   corresponds to    discuss    in english, despite being in a very different
   position in the sentence. you can also see that the network didn   t know
   some words and represented them as <unk> tokens.

summary

   in this post, you learned about sequence-to-sequence models for id4.
   you also learned how to use sockeye, a sequence-to-sequence framework
   based on mxnet, to train and run a minimal id4 model.

   if you have questions or suggestions, leave a comment. if you run into
   any issues with sockeye, let us know through our [108]issue tracker on
   github.
     __________________________________________________________________

additional reading

   advance your skills even further. learn how to [109]deploy deep
   learning models on amazon ecs.

     __________________________________________________________________

about the authors

   felix hieber and tobias domhan are machine learning scientists at
   amazon in berlin. they work on machine translation and natural language
   processing to provide customers worldwide with content in their own
   language.





   tags: [110]apache mxnet, [111]natural language, [112]sockeye
   [113]view comments

   [114]create a free account
     * [115] twitter
     * [116] facebook
     * [117] podcast
     * [118] twitch
     * [119] aws blog
     * [120] rss news feed
     * [121] email updates

   aws & cloud computing
     * [122]what is cloud computing?
     * [123]what is caching?
     * [124]what is nosql?
     * [125]what is devops?
     * [126]what is docker?
     * [127]products & services
     * [128]customer success
     * [129]economics center
     * [130]architecture center
     * [131]security center
     * [132]what's new
     * [133]whitepapers
     * [134]aws blog
     * [135]events
     * [136]sustainable energy
     * [137]press releases
     * [138]aws in the news
     * [139]analyst reports
     * [140]legal

   solutions
     * [141]websites & website hosting
     * [142]business applications
     * [143]backup & recovery
     * [144]disaster recovery
     * [145]data archive
     * [146]devops
     * [147]serverless computing
     * [148]big data
     * [149]high performance computing
     * [150]mobile services
     * [151]digital marketing
     * [152]game development
     * [153]digital media
     * [154]government & education
     * [155]health
     * [156]financial services
     * [157]windows on aws
     * [158]retail
     * [159]power & utilities
     * [160]oil & gas
     * [161]automotive
     * [162]blockchain
     * [163]manufacturing

   resources & training
     * [164]developers
     * [165]java on aws
     * [166]javascript on aws
     * [167]mobile on aws
     * [168]php on aws
     * [169]python on aws
     * [170]ruby on aws
     * [171].net on aws
     * [172]sdks & tools
     * [173]aws marketplace
     * [174]user groups
     * [175]support plans
     * [176]service health dashboard
     * [177]discussion forums
     * [178]faqs
     * [179]documentation
     * [180]articles & tutorials
     * [181]quick starts

   manage your account
     * [182]management console
     * [183]billing & cost management
     * [184]subscribe to updates
     * [185]personal information
     * [186]payment method
     * [187]aws identity & access management
     * [188]security credentials
     * [189]request service limit increases
     * [190]contact us

   amazon web services is hiring.

   amazon web services (aws) is a dynamic, growing business unit within
   amazon.com. we are currently hiring software development engineers,
   product managers, account managers, solutions architects, support
   engineers, system engineers, designers and more. visit our [191]careers
   page to learn more.


   amazon is an equal opportunity employer     minority / women / disability
   / veteran / gender identity / sexual orientation / age.


   [192]an amazon.com company
     * language
     * [193]bahasa indonesia
     * [194]deutsch
     * [195]english
     * [196]espa  ol
     * [197]fran  ais
     * [198]italiano
     * [199]portugu  s
     * [200]ti   ng vi   t
     * [201]t  rk  e
     * [202]              
     * [203]         
     * [204]         
     * [205]         
     * [206]       (      )
     * [207]       (      )

     * [208]site terms
     * |
     * [209]privacy

      2019, amazon web services, inc. or its affiliates. all rights
   reserved.

references

   visible links
   1. https://aws.amazon.com/blogs/machine-learning/train-neural-machine-translation-models-with-sockeye/feed/
   2. https://aws.amazon.com/blogs/machine-learning/feed/
   3. https://aws.amazon.com/?nc2=h_lg
   4. https://aws.amazon.com/contact-us/?nc2=h_header
   5. https://console.aws.amazon.com/support/home?nc2=h_ql_cu
   6. https://aws.amazon.com/blogs/machine-learning/train-neural-machine-translation-models-with-sockeye/
   7. https://aws.amazon.com/blogs/machine-learning/train-neural-machine-translation-models-with-sockeye/
   8. https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct&src=default
   9. https://aws.amazon.com/products/?nc2=h_ql_prod
  10. https://aws.amazon.com/solutions/?nc2=h_ql_sol
  11. https://aws.amazon.com/pricing/?nc2=h_ql_pr
  12. https://docs.aws.amazon.com/index.html?nc2=h_ql_doc
  13. https://aws.amazon.com/getting-started/?nc2=h_ql_gs
  14. https://aws.amazon.com/partners/?nc2=h_ql_pn
  15. https://aws.amazon.com/marketplace/?nc2=h_ql_mp
  16. https://aws.amazon.com/contact-us/?nc2=h_header
  17. https://aws.amazon.com/id/?nc1=h_ls
  18. https://aws.amazon.com/de/?nc1=h_ls
  19. https://aws.amazon.com/?nc1=h_ls
  20. https://aws.amazon.com/es/?nc1=h_ls
  21. https://aws.amazon.com/fr/?nc1=h_ls
  22. https://aws.amazon.com/it/?nc1=h_ls
  23. https://aws.amazon.com/pt/?nc1=h_ls
  24. https://aws.amazon.com/vi/?nc1=f_ls
  25. https://aws.amazon.com/tr/?nc1=h_ls
  26. https://aws.amazon.com/ru/?nc1=h_ls
  27. https://aws.amazon.com/th/?nc1=f_ls
  28. https://aws.amazon.com/jp/?nc1=h_ls
  29. https://aws.amazon.com/ko/?nc1=h_ls
  30. https://aws.amazon.com/cn/?nc1=h_ls
  31. https://aws.amazon.com/tw/?nc1=h_ls
  32. https://console.aws.amazon.com/?nc2=h_m_mc
  33. https://portal.aws.amazon.com/gp/aws/manageyouraccount?nc2=h_m_ma
  34. https://console.aws.amazon.com/billing/home?nc2=h_m_bc
  35. https://console.aws.amazon.com/iam/home?nc2=h_m_sc#security_credential
  36. https://phd.aws.amazon.com/?nc2=h_m_sc
  37. https://aws.amazon.com/?nc2=h_lg
  38. https://aws.amazon.com/products/?nc2=h_mo
  39. https://aws.amazon.com/solutions/?nc2=h_mo
  40. https://aws.amazon.com/pricing/?nc2=h_mo
  41. https://aws.amazon.com/what-is-aws/?nc2=h_mo
  42. https://aws.amazon.com/getting-started/?nc2=h_mo
  43. https://aws.amazon.com/documentation/?nc2=h_mo
  44. https://aws.amazon.com/training/?nc2=h_mo
  45. https://aws.amazon.com/developer/?nc2=h_mo
  46. https://aws.amazon.com/solutions/case-studies/?nc2=h_mo
  47. https://aws.amazon.com/partners/?nc2=h_mo
  48. https://aws.amazon.com/marketplace/?nc2=h_mo
  49. https://console.aws.amazon.com/support/home?nc2=h_ql_cu
  50. https://console.aws.amazon.com/console/home
  51. https://aws.amazon.com/console/mobile/
  52. https://aws.amazon.com/blogs
  53. https://aws.amazon.com/blogs
  54. https://aws.amazon.com/blogs
  55. https://aws.amazon.com/blogs
  56. https://aws.amazon.com/blogs/aws/
  57. https://aws.amazon.com/podcasts/aws-podcast/?sc_ichannel=ha&sc_icampaign=acq_awsblognav&sc_icontent=categorynav
  58. https://aws.amazon.com/blogs/architecture/
  59. https://aws.amazon.com/blogs/apn/
  60. https://aws.amazon.com/blogs/awsmarketplace/
  61. https://aws.amazon.com/blogs/big-data/
  62. https://aws.amazon.com/blogs/business-productivity/
  63. https://aws.amazon.com/blogs/contact-center/
  64. https://aws.amazon.com/blogs/compute/
  65. https://aws.amazon.com/blogs/database/
  66. https://aws.amazon.com/blogs/desktop-and-application-streaming/
  67. https://aws.amazon.com/blogs/developer/
  68. https://aws.amazon.com/blogs/devops/
  69. https://aws.amazon.com/blogs/enterprise-strategy/
  70. https://aws.amazon.com/blogs/gametech/
  71. https://aws.amazon.com/blogs/iot/
  72. https://aws.amazon.com/blogs/machine-learning/
  73. https://aws.amazon.com/blogs/mt/
  74. https://aws.amazon.com/blogs/media/
  75. https://aws.amazon.com/blogs/messaging-and-targeting/
  76. https://aws.amazon.com/blogs/mobile/
  77. https://aws.amazon.com/blogs/networking-and-content-delivery/
  78. https://aws.amazon.com/blogs/opensource/
  79. https://aws.amazon.com/blogs/publicsector/
  80. https://aws.amazon.com/blogs/awsforsap/
  81. https://aws.amazon.com/blogs/security/
  82. https://aws.amazon.com/blogs/startups/
  83. https://aws.amazon.com/cn/blogs/china/
  84. https://aws.amazon.com/fr/blogs/france/
  85. https://aws.amazon.com/de/blogs/germany/
  86. https://aws.amazon.com/jp/blogs/news/
  87. https://aws.amazon.com/ko/blogs/korea/
  88. https://aws.amazon.com/pt/blogs/aws-brasil/
  89. https://aws.amazon.com/ru/blogs/rus/
  90. https://aws.amazon.com/es/blogs/aws-spanish/
  91. https://aws.amazon.com/blogs/
  92. https://pages.awscloud.com/communication-preferences?sc_ichannel=ha&sc_icampaign=multi_emailoptin&sc_isegment=en&sc_iplace=fl-nav&sc_icontent=subscribe_for_updates&trkcampaign=emailoptin&trk=blog
  93. http://feeds.feedburner.com/amazonwebservicesblog
  94. https://aws.amazon.com/podcasts/aws-podcast/?sc_ichannel=ha&sc_icampaign=acq_awsblognav&sc_icontent=follownav
  95. https://aws.amazon.com/blogs/machine-learning/
  96. https://aws.amazon.com/blogs/machine-learning/train-neural-machine-translation-models-with-sockeye/
  97. https://commenting.awsblogs.com/embed.html?disqus_shortname=amazon-ai-blog&disqus_identifier=1206&disqus_title=train+neural+machine+translation+models+with+sockeye&disqus_url=https://aws.amazon.com/blogs/machine-learning/train-neural-machine-translation-models-with-sockeye/
  98. https://aws.amazon.com/blogs/machine-learning/train-neural-machine-translation-models-with-sockeye/
  99. http://sockeye.readthedocs.io/en/latest/
 100. http://mxnet.io/
 101. https://github.com/awslabs/sockeye
 102. https://arxiv.org/abs/1609.08144
 103. https://arxiv.org/abs/1606.02006
 104. https://arxiv.org/abs/1601.04811
 105. https://arxiv.org/abs/1608.06043
 106. https://arxiv.org/abs/1701.06548
 107. https://arxiv.org/abs/1607.06450
 108. https://github.com/awslabs/sockeye/issues
 109. https://aws.amazon.com/blogs/ai/deploy-deep-learning-models-on-amazon-ecs/
 110. https://aws.amazon.com/blogs/machine-learning/tag/apache-mxnet/
 111. https://aws.amazon.com/blogs/machine-learning/tag/natural-language/
 112. https://aws.amazon.com/blogs/machine-learning/tag/sockeye/
 113. https://commenting.awsblogs.com/embed.html?disqus_shortname=amazon-ai-blog&disqus_identifier=1206&disqus_title=train+neural+machine+translation+models+with+sockeye&disqus_url=https://aws.amazon.com/blogs/machine-learning/train-neural-machine-translation-models-with-sockeye/
 114. https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
 115. https://twitter.com/awscloud?nc1=f_so_tw
 116. https://www.facebook.com/amazonwebservices?nc1=f_so_fb
 117. https://aws.amazon.com/podcasts/aws-podcast/
 118. https://www.twitch.tv/aws
 119. https://aws.amazon.com/blogs/
 120. https://aws.amazon.com/new/feed/
 121. https://pages.awscloud.com/communication-preferences?trk=homepage
 122. https://aws.amazon.com/what-is-cloud-computing/?nc1=f_cc
 123. https://aws.amazon.com/caching/?nc1=f_cc
 124. https://aws.amazon.com/nosql/?nc1=f_cc
 125. https://aws.amazon.com/devops/what-is-devops/?nc1=f_cc
 126. https://aws.amazon.com/docker/?nc1=f_cc
 127. https://aws.amazon.com/products/?nc1=f_cc
 128. https://aws.amazon.com/solutions/case-studies/?nc1=f_cc
 129. https://aws.amazon.com/economics/?nc1=f_cc
 130. https://aws.amazon.com/architecture/?nc1=f_cc
 131. https://aws.amazon.com/security/?nc1=f_cc
 132. https://aws.amazon.com/new/?nc1=f_cc
 133. https://aws.amazon.com/whitepapers/?nc1=f_cc
 134. https://aws.amazon.com/blogs/
 135. https://aws.amazon.com/about-aws/events/?nc1=f_cc
 136. https://aws.amazon.com/about-aws/sustainability/?nc1=f_cc
 137. https://press.aboutamazon.com/press-releases/aws?nc1=f_cc
 138. https://aws.amazon.com/about-aws/in-the-news/
 139. https://aws.amazon.com/resources/analyst-reports/?nc1=f_cc
 140. https://aws.amazon.com/legal/?nc1=f_cc
 141. https://aws.amazon.com/websites/?nc1=f_dr
 142. https://aws.amazon.com/business-applications/?nc1=f_dr
 143. https://aws.amazon.com/backup-restore/?nc1=f_dr
 144. https://aws.amazon.com/disaster-recovery/?nc1=f_dr
 145. https://aws.amazon.com/archive/?nc1=f_dr
 146. https://aws.amazon.com/devops/?nc1=f_dr
 147. https://aws.amazon.com/serverless/?nc1=f_dr
 148. https://aws.amazon.com/big-data/?nc1=f_dr
 149. https://aws.amazon.com/hpc/?nc1=f_dr
 150. https://aws.amazon.com/mobile/?nc1=f_dr
 151. https://aws.amazon.com/digital-marketing/?nc1=f_dr
 152. https://aws.amazon.com/gaming/?nc1=f_dr
 153. https://aws.amazon.com/digital-media/?nc1=f_dr
 154. https://aws.amazon.com/government-education/?nc1=f_dr
 155. https://aws.amazon.com/health/?nc1=f_dr
 156. https://aws.amazon.com/financial-services/?nc1=f_dr
 157. https://aws.amazon.com/windows/?nc1=f_dr
 158. https://aws.amazon.com/retail/?nc1=f_dr
 159. https://aws.amazon.com/power-and-utilities/?nc1=f_dr
 160. https://aws.amazon.com/oil-and-gas/?nc1=f_dr
 161. https://aws.amazon.com/automotive/?nc1=f_dr
 162. https://aws.amazon.com/blockchain/?nc1=f_dr
 163. https://aws.amazon.com/manufacturing/?nc1=f_dr
 164. https://aws.amazon.com/developer/?nc1=f_dr
 165. https://aws.amazon.com/java/?nc1=f_dr
 166. https://aws.amazon.com/javascript/?nc1=f_dr
 167. https://aws.amazon.com/mobile/?nc1=f_dr
 168. https://aws.amazon.com/php/?nc1=f_dr
 169. https://aws.amazon.com/python/?nc1=f_dr
 170. https://aws.amazon.com/ruby/?nc1=f_dr
 171. https://aws.amazon.com/net/
 172. https://aws.amazon.com/tools/?nc1=f_dr
 173. https://aws.amazon.com/marketplace/ref=mkt_ste_dev_resources_ftr?nc1=f_dr
 174. https://aws.amazon.com/usergroups/?nc1=f_dr
 175. https://aws.amazon.com/premiumsupport/?nc1=f_dr
 176. http://status.aws.amazon.com/?nc1=f_dr
 177. https://forums.aws.amazon.com/index.jspa?nc1=f_dr
 178. https://aws.amazon.com/faqs/?nc1=f_dr
 179. https://aws.amazon.com/documentation/?nc1=f_dr
 180. https://aws.amazon.com/articles/?nc1=f_dr
 181. https://aws.amazon.com/quickstart/?nc1=f_dr
 182. https://aws.amazon.com/console/?nc1=f_m
 183. https://console.aws.amazon.com/billing/home?nc1=f_m
 184. https://pages.awscloud.com/communication-preferences.html
 185. https://portal.aws.amazon.com/gp/aws/developer/account/index.html?action=edit-aws-profile&nc1=f_m
 186. https://portal.aws.amazon.com/gp/aws/developer/account/index.html?action=edit-payment-method&nc1=f_m
 187. https://aws.amazon.com/iam/?nc1=f_m
 188. https://console.aws.amazon.com/iam/home?action=access-key&nc1=f_m
 189. https://console.aws.amazon.com/support/home#/case/create?issuetype=service-limit-increase
 190. https://aws.amazon.com/contact-us/?nc1=f_m
 191. https://aws.amazon.com/careers/?nc1=f_hi
 192. http://www.amazon.com/
 193. https://aws.amazon.com/id/?nc1=h_ls
 194. https://aws.amazon.com/de/?nc1=f_ls
 195. https://aws.amazon.com/?nc1=f_ls
 196. https://aws.amazon.com/es/?nc1=f_ls
 197. https://aws.amazon.com/fr/?nc1=f_ls
 198. https://aws.amazon.com/it/?nc1=f_ls
 199. https://aws.amazon.com/pt/?nc1=f_ls
 200. https://aws.amazon.com/vi/?nc1=f_ls
 201. https://aws.amazon.com/tr/?nc1=h_ls
 202. https://aws.amazon.com/ru/?nc1=f_ls
 203. https://aws.amazon.com/th/?nc1=h_ls
 204. https://aws.amazon.com/jp/?nc1=f_ls
 205. https://aws.amazon.com/ko/?nc1=f_ls
 206. https://aws.amazon.com/cn/?nc1=f_ls
 207. https://aws.amazon.com/tw/?nc1=f_ls
 208. https://aws.amazon.com/terms/?nc1=f_pr
 209. https://aws.amazon.com/privacy/?nc1=f_pr

   hidden links:
 211. https://www.facebook.com/sharer/sharer.php?u=https://aws.amazon.com/blogs/machine-learning/train-neural-machine-translation-models-with-sockeye/
 212. https://twitter.com/intent/tweet/?text=train%20neural%20machine%20translation%20models%20with%20sockeye&via=awscloud&url=https://aws.amazon.com/blogs/machine-learning/train-neural-machine-translation-models-with-sockeye/
 213. https://www.linkedin.com/sharearticle?mini=true&title=train%20neural%20machine%20translation%20models%20with%20sockeye&source=amazon%20web%20services&summary=have%20you%20ever%20wondered%20how%20you%20can%20use%20machine%20learning%20%28ml%29%20for%20translation%3f%20with%20our%20new%20framework%2c%20sockeye%2c%20you%20can%20model%20machine%20translation%20%28mt%29%20and%20other%20sequence-to-sequence%20tasks.%20sockeye%2c%20which%20is%20built%20on%20apache%20mxnet%2c%20does%20most%20of%20the%20heavy%20lifting%20for%20building%2c%20training%2c%20and%20running%20state-of-the-art%20sequence-to-sequence%20models.%20in%20natural%20language%20processing%20%28nlp%29%2c%20many%20%5b%26hellip%3b%5d&url=https://aws.amazon.com/blogs/machine-learning/train-neural-machine-translation-models-with-sockeye/
 214. mailto:?subject=train%20neural%20machine%20translation%20models%20with%20sockeye&body=train%20neural%20machine%20translation%20models%20with%20sockeye%0a%0ahttps://aws.amazon.com/blogs/machine-learning/train-neural-machine-translation-models-with-sockeye/
