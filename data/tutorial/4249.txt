   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]grakn.ai
     * [9]machine learning
     * [10]biotech
     * [11]learn grakn
     * [12]announcements
     * [13]about
     * [14]grakn.ai
     __________________________________________________________________

populating grakn.ai with the world

this updated article describes how to move sql data into a grakn.ai knowledge
graph

   go to the profile of jo stichbury
   [15]jo stichbury (button) blockedunblock (button) followfollowing
   oct 21, 2016
   [1*5gfwmdn6urcr3ky-jy8taq.jpeg]
   image by [16]davecito is licensed under [17]cc by 2.0

     since the initial writing of this blog post, the process of
     migrating a dataset into a grakn id13 has changed. for
     the purpose of migration, please visit the examples with grakn
     clients [18]java, [19]node.js and [20]python.

   highly interconnected data from complex domains is challenging to
   model, maintain and query. with [21]grakn.ai, which is an open source,
   distributed knowledge base (think a graph database with an extra
   punch), building intelligent systems becomes dramatically easier.

   if you are thinking of trying grakn.ai, the chances are that you
   already have some data and want to see what our stack can do. this post
   shows how to move data from a sql database to grakn.ai, and how to use
   our visualiser to explore the data.

   i   m going to use a simple, well-known, example set of data about cities
   and countries of the world. in the course of this post, i will go
   through the basics of how to set up a sql database and make some simple
   queries (which you can omit if you   re already a sql user), then i will
   explain how to migrate the contents of the database into grakn.ai. i   ll
   use our declarative query language, to make the same [22]graql queries
   as shown in sql.

   i have used mysql for this example, although the grakn labs team have
   also tested with oracle and postgresql. the version of grakn.ai i used
   was 0.12.1 but, as ever, i recommend that you use the [23]latest
   version.

setting up mysql

   if you already have a mysql setup, you may want to skip ahead to    hello
   world    section.

   getting mysql installed is relatively straightforward. i followed
   [24]these instructions for macos x (downloading the installation
   package [25]here). it wasn   t totally clear how to start the mysql
   server (i eventually worked out that installation puts an icon in your
   system preferences menu). having started the server, you need to start
   the mysql shell from the terminal
mysql -u root -p

   on first use, change the temporary password it was installed with (i
   set my new password to root, which is the same as the username, so it
   was memorable).
alter user    root   @   localhost    identified by    root   ;

   hello world   

   once i had mysql set up, it was time to open the example world database
   from the command line, as described [26]here.
source [sql-path]/world.sql;

   it is a classic example dataset published by mysql that is easily
   understood and is commonly used by beginners to introduce them to sql
   queries (however, i cannot guarantee that the data it contains is
   accurate).

   using the following query to retrieve information about the columns of
   the city table:
describe city;

   iframe: [27]/media/24a90fa6e30745c323c220f9df8a9887?postid=5b2445aee60c

   as you can see, there are 5 columns in the table (confusingly shown as
   rows in the output): id, name, countrycode, district and population.
   the id is the primary key for the table, which uniquely identifies each
   record. this will be important later, when we migrate to grakn.

   the following statement gives us a peek at the first 10 items of city
   data:
select * from city limit 10;

   iframe: [28]/media/26ed313c325d74dd31a02bdbbd391ddd?postid=5b2445aee60c

   let   s get the information about a specific city: sydney, australia
select * from city where name = 'sydney';

   iframe: [29]/media/0e513e64d99ca38caf6fc10c0c997d96?postid=5b2445aee60c

   you can experiment in a similar way with the country and
   countrylanguage tables.

migrating to grakn.ai

   ok, you should have a reasonable handle on the data, so now let   s
   migrate it into grakn.ai. the first thing, if you   ve not done it
   already, is to follow the [30]quickstart guide to download grakn.ai and
   start the grakn engine.

ontology

   there are limitations on the sql format that prevent it from expressing
   the semantics of the data. by    semantic   , i mean that the meaning of
   the data cannot easily be encoded alongside the data itself. in
   contrast, a id13 is self-descriptive, or, simply put, it
   provides a single place to find the data and understand what it   s all
   about. to have the full benefit of a id13, we must write the
   ontology for the dataset.

   writing an ontology for every field in the sql tables will be too
   unwieldy so we will take just some of the data contained in the table,
   as follows:
insert
country sub entity
  has countrycode
  has name
  has surfacearea
  has indepyear
  has population
  has lifeexpectancy
  has gnp
  has gnpold
  has localname
  has governmentform
  has headofstate
  plays speaks-language
  plays contains-city;
city sub entity
  has population
  has name
  plays in-country;
language sub entity
  has name
  plays language-spoken;
name sub resource datatype string;
countrycode sub resource datatype string;
surfacearea sub resource datatype double;
indepyear sub resource datatype long;
population sub resource datatype long;
lifeexpectancy sub resource datatype double;
gnp sub resource datatype double;
gnpold sub resource datatype double;
localname sub resource datatype string;
governmentform sub resource datatype string;
headofstate sub resource datatype string;
iscapital sub resource datatype boolean;
isofficial sub resource datatype boolean;
percentage sub resource datatype double;
speaks sub relation
  relates speaks-language
  relates language-spoken
  has percentage
  has isofficial;

has-city sub relation
  relates contains-city
  relates in-country
  has iscapital;
speaks-language sub role;
language-spoken sub role;
contains-city sub role;
in-country sub role;

   we define 3 entities to represent country, city and language, and some
   relations between them (between language and country and country and
   city).

   in the terminal, load the ontology as follows:
<path-to-grakn.ai>/bin/graql.sh -f ./ontology.gql

   here   s a visual representation of the ontology:
   [1*vyw3_wvbqskyrejcvlx_hw.png]

migration templates

   once we have written and loaded the ontology for the dataset, we need
   to use the graql templating language to instruct the sql migrator on
   how the sql data is mapped to the above ontology. the sql migrator
   applies the templates we provide to the results of an sql query, to
   each row of results in turn, replacing the indicated sections in the
   template with the corresponding data. the column header is the key,
   while the content of each row at that column is the value.

   to migrate the country data, the template code is as follows:
insert $country isa country
  has name <name>
  has countrycode <code>
  if(<indepyear> != null) do { has indepyear <indepyear> }
  if(<population> != null) do { has population <population> }
  if(<lifeexpectancy> != null) do { has lifeexpectancy <lifeexpectancy> }
  if(<gnp> != null) do { has gnp <gnp> }
  if(<gnpold> != null) do { has gnpold <gnpold> }
  if(<localname> != null) do { has localname <localname>  }
  if(<governmentform> != null) do { has governmentform <governmentform> }
  if(<headofstate> != null) do { has headofstate <headofstate> };

   the language migration template:
insert $language isa language has name <language>;

   then, to insert a relation between the language and the countries in
   which it is spoken, there is a match-insert query, which matches a
   language and country, then builds a relation between them:56
match
  $language isa language has name <language>;
  $country isa country has countrycode <countrycode>;
insert
 $relation (speaks-language: $country, language-spoken: $language) isa speaks

  has isofficial if(<isofficial> = "f") do { false } else { true }
  has percentage <percentage>;t6

   for city migration, the template is as follows:
match
  $country isa country has countrycode <countrycode>;
insert
  $city isa city
  has name <name>
  has population <population>;
  (contains-city: $country, in-country: $city) isa has-city;

   to determine if it is the capital city:
if(<capital> != null) do {
match
  $country isa country has countrycode <code>;
  $city isa city has name <capital>;
  $rel (in-country: $country, contains-city: $city) isa has-city;
insert
  $rel has iscapital true;}

migration tools

   there are two ways in which you can migrate sql data into grakn.ai. you
   can use java to perform the migration in a few lines of code, which is
   described further in our sql migration example.

   alternatively, there is a shell script that you can call to apply the
   templates above to the sql data. in effect, the shell script calls a
   set of java functions so you don   t have to. i like this option, as java
   is not my natural habitat. the migration documentation shows the script
   options, which are as follows:
usage: migration.sh sql -template <arg> -driver <arg> -user <arg> -pass <arg> -l
ocation <arg> -keyspace <arg> [-help] [-no] [-batch <arg>] [-uri <arg>] [-retry
<arg>] [-v]

 -a,--active <arg>     number of tasks (batches) running on the server at any on
e time. default 25.
 -b,--batch <arg>      number of rows to execute in one
                            transaction. default 25.
 -c,--config <arg>     configuration file.
 -driver <arg>         jdbc driver
 -h,--help             print usage message.
 -k,--keyspace <arg>   grakn graph. required.
 -location <arg>       jdbc url (location of db)
 -n,--no               write to standard out.
 -pass <arg>           jdbc password
 -q,--query <arg>      sql query
 -r,--retry <arg>      retry sending tasks if engine is not available
 -t,--template <arg>   graql template to apply to the data.
 -u,--uri <arg>        location of grakn engine.
 -user <arg>           jdbc username
 -v,--verbose          print counts of migrated data.

   whether you use the shell script or java code, what you are doing in
   either case is extracting sql data using the jdbc api and importing it
   into a graph.

   for this example, running from within the
   examples/example-sql-migration/shell-migration directory of the
   grakn.ai installation, i called grakn   s migration.sh script on each of
   the templates shown above, passing in the appropriate query. for
   example, for the countries migration:
<path-to-grakn.ai>/bin/migration.sh sql -q "select * from country;" -location jd
bc:mysql://localhost:3306/world -user root -pass root -t ./templates/countries-t
emplate.gql -k grakn

   however, to make it simpler, you can chain them all together in a batch
   file, which i   ve done and simply call that:
./loader.sh <path-to-grakn.ai>

querying the graph

   we can now make queries on the graph as follows. let   s reproduce some
   of the queries we made previously in sql.
sql
select * from city limit 10;
graql
match $x isa city; offset 0; limit 10;

   if successful: you should see a list of 10 countries following the
   query.

   similarly, query for information about the city of sydney:
sql
select * from city where name =    sydney   ;
graql
match $x isa city, has name "sydney";

problems?

   the grakn team is super helpful in sorting out when things went wrong
   and, if you have any problems, please get in touch for help too. just
   make contact via our [31]community page, or leave a comment below or on
   our [32]slack channel.

   one issue that i hit on initially is that you need to make sure that
   you download the jdbc driver from [33]here and place the .jar file
   (mysql-connector-java-5.1.40-bin.jar) in the /lib directory of the
   grakn environment that you downloaded and set up.

visualising the data

   the grakn visualiser is a cool way to look at the resulting graph and
   explore the data. with the grakn engine running and the graph loaded,
   in your browser, navigate to [34]http://localhost:4567/ which will
   allow you to make queries on the graph. it   s a nice way of seeing how
   data is connected, which fits much better         in my view         with how i
   think about cities and countries, than a table with rows and columns.
   let   s explore    

   we can show 10 countries and their cities:
match $x isa has-city; offset 0; limit 10;

   in the grakn.ai visualiser:
   [1*owaydifehabbl-wsf_blow.png]

   further guidance on using the visualiser, which is rapidly evolving,
   can be found in the [35]grakn.ai documentation.

why?

   you may be wondering why i   ve bothered moving the data from a
   relational database into a grakn graph. after all, isn   t it fine as it
   is? well yes, and no. although id208 have benefits that
   include simplicity and familiarity, they also have limitations. if you
   are just doing basic read/writes on straightforward data, sql may well
   be adequate for your needs. but, remember that i chose a simple,
   familiar example specifically to make this article easy to follow. if
   you have a more complex domain with highly interconnected data, which
   is very probable in today   s information landscape, you will quickly see
   significant benefits, since describing the relationships within data is
   the primary characteristic of a graph database. in this aspect, a
   relational database cannot begin to provide the equivalent speed or
   flexibility as a graph.

   as a knowledge base, grakn.ai has an additional benefit over standard
   graph databases, since it allows complex data modeling, verification,
   scaling, querying and analysis. a key step is the definition of an
   ontology, which facilitates the modeling of complex datasets and
   guarantees information consistency. id136 rules allow the
   extraction of implicit information from explicit data, to achieve
   logical reasoning over the represented knowledge.

conclusion

   at the beginning of this article, i introduced grakn.ai as a graph
   database with extra punch. i have hardly scratched the surface of what
   it can do, but i hope i have at least shown that it is easy to set up a
   grakn graph with familiar data, and how to query and visualise it.

   there are a number of blog posts on [36]blog.grakn.ai that will give
   you a flavour of what grakn.ai can do, and an [37]faq that possibly
   answers some of the questions you may have! if it does not, please ask
   away in the comments below!
     __________________________________________________________________

if you enjoyed this article, please hit the heart button below or leave us a
comment. thank you!

     * [38]open source
     * [39]programming
     * [40]data science
     * [41]big data
     * [42]software development

   (button)
   (button)
   (button) 12 claps
   (button) (button) (button) (button)

     (button) blockedunblock (button) followfollowing
   go to the profile of jo stichbury

[43]jo stichbury

   medium member since feb 2019

   r  nin technology writer with an interest in ai. cat herder.
   dereferences null.

     (button) follow
   [44]grakn.ai

[45]grakn.ai

   the id13

     * (button)
       (button) 12
     * (button)
     *
     *

   [46]grakn.ai
   never miss a story from grakn.ai, when you sign up for medium.
   [47]learn more
   never miss a story from grakn.ai
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://blog.grakn.ai/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/5b2445aee60c
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://blog.grakn.ai/populating-mindmapsdb-with-the-world-5b2445aee60c&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://blog.grakn.ai/populating-mindmapsdb-with-the-world-5b2445aee60c&source=--------------------------nav_reg&operation=register
   8. https://blog.grakn.ai/?source=logo-lo_n4nx8jdbst8a---60f79844688a
   9. https://blog.grakn.ai/machine-learning/home
  10. https://blog.grakn.ai/biograkn/home
  11. https://blog.grakn.ai/learn/home
  12. https://blog.grakn.ai/announcements/home
  13. https://blog.grakn.ai/about
  14. https://grakn.ai/
  15. https://blog.grakn.ai/@fluffymaccoy
  16. https://www.flickr.com/photos/23465812@n00/
  17. https://creativecommons.org/licenses/by/2.0/
  18. http://dev.grakn.ai/docs/examples/phone-calls-migration-java
  19. http://dev.grakn.ai/docs/examples/phone-calls-migration-nodejs
  20. http://dev.grakn.ai/docs/examples/phone-calls-migration-python
  21. https://grakn.ai/
  22. http://dev.grakn.ai/docs/query/overview
  23. https://grakn.ai/download/latest
  24. http://dev.mysql.com/doc/mysql-getting-started/en/
  25. http://dev.mysql.com/downloads/mysql/
  26. https://dev.mysql.com/doc/world-setup/en/world-setup-installation.html
  27. https://blog.grakn.ai/media/24a90fa6e30745c323c220f9df8a9887?postid=5b2445aee60c
  28. https://blog.grakn.ai/media/26ed313c325d74dd31a02bdbbd391ddd?postid=5b2445aee60c
  29. https://blog.grakn.ai/media/0e513e64d99ca38caf6fc10c0c997d96?postid=5b2445aee60c
  30. http://dev.grakn.ai/docs/general/quickstart
  31. https://mindmaps.io/community.html
  32. https://grakn.ai/slack.html
  33. https://dev.mysql.com/downloads/connector/j/5.1.html
  34. http://localhost:4567/
  35. http://dev.grakn.ai/docs/workbase/overview
  36. https://blog.grakn.ai/
  37. https://blog.grakn.ai/grakn-ai-q-a-episode-1-33455f9549c8?source=collection_home---2------2-----------
  38. https://blog.grakn.ai/tagged/open-source?source=post
  39. https://blog.grakn.ai/tagged/programming?source=post
  40. https://blog.grakn.ai/tagged/data-science?source=post
  41. https://blog.grakn.ai/tagged/big-data?source=post
  42. https://blog.grakn.ai/tagged/software-development?source=post
  43. https://blog.grakn.ai/@fluffymaccoy
  44. https://blog.grakn.ai/?source=footer_card
  45. https://blog.grakn.ai/?source=footer_card
  46. https://blog.grakn.ai/
  47. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  49. https://blog.grakn.ai/@fluffymaccoy?source=post_header_lockup
  50. https://medium.com/p/5b2445aee60c/share/twitter
  51. https://medium.com/p/5b2445aee60c/share/facebook
  52. https://blog.grakn.ai/@fluffymaccoy?source=footer_card
  53. https://medium.com/p/5b2445aee60c/share/twitter
  54. https://medium.com/p/5b2445aee60c/share/facebook
