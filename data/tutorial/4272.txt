   #[1]github [2]recent commits to drqa:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]150
     * [35]star [36]3,102
     * [37]fork [38]654

[39]facebookresearch/[40]drqa

   [41]code [42]issues 32 [43]pull requests 1 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   reading wikipedia to answer open-domain questions
     * [47]51 commits
     * [48]1 branch
     * [49]0 releases
     * [50]fetching contributors
     * [51]view license

    1. [52]python 98.1%
    2. [53]shell 1.9%

   (button) python shell
   branch: master (button) new pull request
   [54]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/f
   [55]download zip

downloading...

   want to be notified of new releases in facebookresearch/drqa?
   [56]sign in [57]sign up

launching github desktop...

   if nothing happens, [58]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [59]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [60]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [61]download the github extension for visual studio
   and try again.

   (button) go back
   [62]@ajfisch
   [63]ajfisch [64]merge pull request [65]#206 [66]from ousou/master
   (button)    
fix prediction on cpu in docreader.

   latest commit [67]a03848d mar 13, 2019
   [68]permalink
   type          name             latest commit message    commit time
        failed to load latest commit information.
        [69]drqa
        [70]img                [71]initial commit         jul 26, 2017
        [72]scripts
        [73].gitignore
        [74]code_of_conduct.md
        [75]contributing.md    [76]update contributing.md mar 8, 2019
        [77]license
        [78]patents
        [79]readme.md
        [80]download.sh
        [81]install_corenlp.sh
        [82]requirements.txt
        [83]setup.py

readme.md

drqa

   this is a pytorch implementation of the drqa system described in the
   acl 2017 paper [84]reading wikipedia to answer open-domain questions.

quick links

     * [85]about
     * [86]demo
     * [87]installation
     * [88]components

machine reading at scale

                               [89][drqa.png]

   drqa is a system for reading comprehension applied to open-domain
   id53. in particular, drqa is targeted at the task of
   "machine reading at scale" (mrs). in this setting, we are searching for
   an answer to a question in a potentially very large corpus of
   unstructured documents (that may not be redundant). thus the system has
   to combine the challenges of document retrieval (finding the relevant
   documents) with that of machine comprehension of text (identifying the
   answers from those documents).

   our experiments with drqa focus on answering factoid questions while
   using wikipedia as the unique knowledge source for documents. wikipedia
   is a well-suited source of large-scale, rich, detailed information. in
   order to answer any question, one must first retrieve the few
   potentially relevant articles among more than 5 million, and then scan
   them carefully to identify the answer.

   note that drqa treats wikipedia as a generic collection of articles and
   does not rely on its internal graph structure. as a result, drqa can be
   straightforwardly applied to any collection of documents, as described
   in the retriever [90]readme.

   this repository includes code, data, and pre-trained models for
   processing and querying wikipedia as described in the paper -- see
   [91]trained models and data. we also list several different datasets
   for evaluation, see [92]qa datasets. note that this work is a
   refactored and more efficient version of the original code.
   reproduction numbers are very similar but not exact.

quick start: demo

   [93]install drqa and [94]download our models to start asking
   open-domain questions!

   run python scripts/pipeline/interactive.py to drop into an interactive
   session. for each question, the top span and the wikipedia paragraph it
   came from are returned.
>>> process('what is id53?')

top predictions:
+------+------------------------------------------------------------------------
----------------------------------+--------------------+--------------+---------
--+
| rank |                                                  answer
                                  |        doc         | answer score | doc scor
e |
+------+------------------------------------------------------------------------
----------------------------------+--------------------+--------------+---------
--+
|  1   | a computer science discipline within the fields of information retrieva
l and natural language processing | id53 |    1917.8    |   327.89
  |
+------+------------------------------------------------------------------------
----------------------------------+--------------------+--------------+---------
--+

contexts:
[ doc = id53 ]
id53 (qa) is a computer science discipline within the fields of
information retrieval and natural language processing (nlp), which is
concerned with building systems that automatically answer questions posed by
humans in a natural language.

>>> process('what is the answer to life, the universe, and everything?')

top predictions:
+------+--------+---------------------------------------------------+-----------
---+-----------+
| rank | answer |                        doc                        | answer sco
re | doc score |
+------+--------+---------------------------------------------------+-----------
---+-----------+
|  1   |   42   | phrases from the hitchhiker's guide to the galaxy |    47242
   |   141.26  |
+------+--------+---------------------------------------------------+-----------
---+-----------+

contexts:
[ doc = phrases from the hitchhiker's guide to the galaxy ]
the number 42 and the phrase, "life, the universe, and everything" have
attained cult status on the internet. "life, the universe, and everything" is
a common name for the off-topic section of an internet forum and the phrase is
invoked in similar ways to mean "anything at all". many chatbots, when asked
about the meaning of life, will answer "42". several online calculators are
also programmed with the question. google calculator will give the result to
"the answer to life the universe and everything" as 42, as will wolfram's
computational knowledge engine. similarly, duckduckgo also gives the result of
"the answer to the ultimate question of life, the universe and everything" as
42. in the online community second life, there is a section on a sim called
43. "42nd life." it is devoted to this concept in the book series, and several
attempts at recreating milliways, the restaurant at the end of the universe, wer
e made.

>>> process('who was the winning pitcher in the 1956 world series?')

top predictions:
+------+------------+------------------+--------------+-----------+
| rank |   answer   |       doc        | answer score | doc score |
+------+------------+------------------+--------------+-----------+
|  1   | don larsen | new york yankees |  4.5059e+06  |   278.06  |
+------+------------+------------------+--------------+-----------+

contexts:
[ doc = new york yankees ]
in 1954, the yankees won over 100 games, but the indians took the pennant with
an al record 111 wins; 1954 was famously referred to as "the year the yankees
lost the pennant". in , the dodgers finally beat the yankees in the world
series, after five previous series losses to them, but the yankees came back
strong the next year. on october 8, 1956, in game five of the 1956 world
series against the dodgers, pitcher don larsen threw the only perfect game in
world series history, which remains the only perfect game in postseason play
and was the only no-hitter of any kind to be pitched in postseason play until
roy halladay pitched a no-hitter on october 6, 2010.

   try some of your own! of course, drqa might provide alternative facts,
   so enjoy the ride.

installing drqa

   setting up drqa is easy!

   drqa requires linux/osx and python 3.5 or higher. it also requires
   installing [95]pytorch version 1.0. its other dependencies are listed
   in requirements.txt. cuda is strongly recommended for speed, but not
   necessary.

   run the following commands to clone the repository and install drqa:
git clone https://github.com/facebookresearch/drqa.git
cd drqa; pip install -r requirements.txt; python setup.py develop

   note: requirements.txt includes a subset of all the possible required
   packages. depending on what you want to run, you might need to install
   an extra package (e.g. spacy).

   if you use the corenlptokenizer or spacytokenizer you also need to
   download the stanford corenlp jars and spacy en model, respectively. if
   you use stanford corenlp, have the jars in your java classpath
   environment variable, or set the path programmatically with:
import drqa.tokenizers
drqa.tokenizers.set_default('corenlp_classpath', '/your/corenlp/classpath/*')

   important: the default [96]tokenizer is corenlp so you will need that
   in your classpath to run the readme examples.

   ex: export classpath=$classpath:/path/to/corenlp/download/*.

   if you do not already have a corenlp [97]download you can run:
./install_corenlp.sh

   verify that it runs:
from drqa.tokenizers import corenlptokenizer
tok = corenlptokenizer()
tok.tokenize('hello world').words()  # should complete immediately

   for convenience, the document reader, retriever, and pipeline modules
   will try to load default models if no model argument is given. see
   below for downloading these models.

trained models and data

   to download all provided trained models and data for wikipedia question
   answering, run:
./download.sh

   warning: this downloads a 7.5gb tarball (25gb untarred) and will take
   some time.

   this stores the data in data/ at the file paths specified in the
   various modules' defaults. this top-level directory can be modified by
   setting a drqa_data environment variable to point to somewhere else.

   default directory structure (see [98]embeddings for more info on
   additional downloads for training):
drqa
          data (or $drqa_data)
              datasets
                    squad-v1.1-<train/dev>.<txt/json>
                    webquestions-<train/test>.txt
                    freebase-entities.txt
                    curatedtrec-<train/test>.txt
                    wikimovies-<train/test/entities>.txt
              reader
                    multitask.mdl
                    single.mdl
              wikipedia
                  docs.db
                  docs-tfidf-ngram=2-hash=16777216-tokenizer=simple.npz

   default model paths for the different modules can also be modified
   programmatically in the code, e.g.:
import drqa.reader
drqa.reader.set_default('model', '/path/to/model')
reader = drqa.reader.predictor()  # default model loaded for prediction

document retriever

   tf-idf model using wikipedia (unigrams and bigrams, 2^24 bins, simple
   id121), evaluated on multiple datasets (test sets, dev set for
   squad):
     model       squad p@5 curatedtrec p@5 webquestions p@5 wikimovies p@5 size
[99]tf-idf model   78.0         87.6             75.0            69.8      ~13gb

   p@5 here is defined as the % of questions for which the answer segment
   appears in one of the top 5 documents.

document reader

   model trained only on squad, evaluated in the squad setting:
         model       squad dev em squad dev f1  size
   [100]single model     69.4         78.9     ~130mb

   model trained with distant supervision without ner/pos/lemma features,
   evaluated on multiple datasets (test sets, dev set for squad) in the
   full wikipedia setting:
   model squad em curatedtrec em webquestions em wikimovies em size
   [101]multitask model 29.5 27.2 18.5 36.9 ~270mb

wikipedia

   our full-scale experiments were conducted on the 2016-12-21 dump of
   english wikipedia. the dump was processed with the [102]wikiextractor
   and filtered for internal disambiguation, list, index, and outline
   pages (pages that are typically just links). we store the documents in
   an sqlite database for which drqa.retriever.docdb provides an
   interface.
      database    num. documents size
   [103]wikipedia   5,075,182    ~13gb

qa datasets

   the datasets used for drqa training and evaluation can be found here:
     * squad: [104]train, [105]dev
     * webquestions: [106]train, [107]test, [108]entities
     * wikimovies: [109]train/test/entities (rehosted in expected format
       from [110]https://research.fb.com/downloads/babi/)
     * curatedtrec: [111]train/test (rehosted in expected format from
       [112]https://github.com/brmson/dataset-factoid-curated)

format a

   the retriever/eval.py, pipeline/eval.py, and distant/generate.py
   scripts expect the datasets as a .txt file where each line is a json
   encoded qa pair, like so:
'{"question": "q1", "answer": ["a11", ..., "a1i"]}'
...
'{"question": "qn", "answer": ["an1", ..., "ani"]}'

   scripts to convert squad and webquestions to this format are included
   in scripts/convert. this is automatically done in download.sh.

format b

   the reader directory scripts expect the datasets as a .json file where
   the data is arranged like squad:
file.json
          "data"
                [i]
                    "paragraphs"
                          [j]
                              "context": "paragraph text"
                              "qas"
                                  [k]
                                      "answers"
                                            [l]
                                                "answer_start": n
                                                "text": "answer"
                                      "id": "<uuid>"
                                      "question": "paragraph question?"
                    "title": "document id"
          "version": 1.1

entity lists

   some datasets have (potentially large) candidate lists for selecting
   answers. for example, wikimovies' answers are omdb entries while
   webquestions is based on freebase. if we have known candidates, we can
   impose that all predicted answers must be in this list by discarding
   any higher scoring spans that are not.

drqa components

document retriever

   drqa is not tied to any specific type of retrieval system -- as long as
   it effectively narrows the search space and focuses on relevant
   documents.

   following classical qa systems, we include an efficient (non-machine
   learning) document retrieval system based on sparse, tf-idf weighted
   bag-of-word vectors. we use bags of hashed id165s (here, unigrams and
   bigrams).

   to see how to build your own such model on new documents, see the
   retriever [113]readme.

   to interactively query wikipedia:
python scripts/retriever/interactive.py --model /path/to/model

   if model is left out our [114]default model will be used (assuming it
   was [115]downloaded).

   to evaluate the retriever accuracy (% match in top 5) on a dataset:
python scripts/retriever/eval.py /path/to/format/a/dataset.txt --model /path/to/
model

document reader

   drqa's document reader is a multi-layer recurrent neural network
   machine comprehension model trained to do extractive question
   answering. that is, the model tries to find the answer to any question
   as a text span in one of the returned documents.

   the document reader was inspired by, and primarily trained on, the
   [116]squad dataset. it can also be used standalone on such squad-like
   tasks where a specific context is supplied with the question, the
   answer to which is contained in the context.

   to see how to train the document reader on squad, see the reader
   [117]readme.

   to interactively ask questions about text with a trained model:
python scripts/reader/interactive.py --model /path/to/model

   again, here model is optional; a [118]default model will be used if it
   is left out.

   to run model predictions on a dataset:
python scripts/reader/predict.py /path/to/format/b/dataset.json --model /path/to
/model

drqa pipeline

   the full system is linked together in drqa.pipeline.drqa.

   to interactively ask questions using the full drqa:
python scripts/pipeline/interactive.py

   optional arguments:
--reader-model    path to trained document reader model.
--retriever-model path to document retriever model (tfidf).
--doc-db          path to document db.
--tokenizer      string option specifying tokenizer type to use (e.g. 'corenlp')
.
--candidate-file  list of candidates to restrict predictions to, one candidate p
er line.
--no-cuda         use cpu only.
--gpu             specify gpu device id to use.

   to run predictions on a dataset:
python scripts/pipeline/predict.py /path/to/format/a/dataset.txt

   optional arguments:
--out-dir             directory to write prediction file to (<dataset>-<model>-p
ipeline.preds).
--reader-model        path to trained document reader model.
--retriever-model     path to document retriever model (tfidf).
--doc-db              path to document db.
--embedding-file      expand dictionary to use all pretrained embeddings in this
 file (e.g. all glove vectors to minimize unks at test time).
--candidate-file      list of candidates to restrict predictions to, one candida
te per line.
--n-docs              number of docs to retrieve per query.
--top-n               number of predictions to make per query.
--tokenizer           string option specifying tokenizer type to use (e.g. 'core
nlp').
--no-cuda             use cpu only.
--gpu                 specify gpu device id to use.
--parallel            use data parallel (split across gpu devices).
--num-workers         number of cpu processes (for tokenizing, etc).
--batch-size          document paragraph batching size (reduce in case of gpu oo
m).
--predict-batch-size  question batching size (reduce in case of cpu oom).

distant supervision (ds)

   drqa's performance improves significantly in the full-setting when
   provided with distantly supervised data from additional datasets. given
   question-answer pairs but no supporting context, we can use string
   matching heuristics to automatically associate paragraphs to these
   training examples.

     question: what u.s. state   s motto is    live free or die   ?

     answer: new hampshire

     ds document: live free or die    live free or die    is the official
     motto of the u.s. state of new hampshire, adopted by the state in
     1945. it is possibly the best-known of all state mottos, partly
     because it conveys an assertive independence historically found in
     american political philosophy and partly because of its contrast to
     the milder sentiments found in other state mottos.

   the scripts/distant directory contains code to generate and inspect
   such distantly supervised data. more information can be found in the
   distant supervision [119]readme.

tokenizers

   we provide a number of different tokenizer options for convenience.
   each has its own pros/cons based on how many dependencies it requires,
   overhead for running it, speed, and performance. for our reported
   experiments we used corenlp (but results are all similar).

   available tokenizers:
     * corenlptokenizer: uses [120]stanford corenlp (option: 'corenlp').
       we used v3.7.0. requires java 8.
     * spacytokenizer: uses [121]spacy (option: 'spacy').
     * regexptokenizer: custom regex-based ptb-style tokenizer (option:
       'regexp').
     * simpletokenizer: basic alpha-numeric/non-whitespace tokenizer
       (option: 'simple').

   see the [122]list of mappings between string option names and tokenizer
   classes.

citation

   please cite the acl paper if you use drqa in your work:
@inproceedings{chen2017reading,
  title={reading {wikipedia} to answer open-domain questions},
  author={chen, danqi and fisch, adam and weston, jason and bordes, antoine},
  booktitle={association for computational linguistics (acl)},
  year={2017}
}

drqa elsewhere

connection with parlai

   this implementation of the drqa document reader is closely related to
   the one found in [123]parlai. here, however, the work is extended to
   interact with the document retriever in the open-domain setting. on the
   other hand, the implementation in parlai is more general, and follows
   the appropriate api to work in more qa/dialog settings.

web ui

   [124]hamed zaghaghi has provided a wrapper for a [125]web ui.

license

   drqa is bsd-licensed. we also provide an additional patent grant.

     *    2019 github, inc.
     * [126]terms
     * [127]privacy
     * [128]security
     * [129]status
     * [130]help

     * [131]contact github
     * [132]pricing
     * [133]api
     * [134]training
     * [135]blog
     * [136]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [137]reload to refresh your
   session. you signed out in another tab or window. [138]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/facebookresearch/drqa/commits/master.atom
   3. https://github.com/facebookresearch/drqa#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/facebookresearch/drqa
  32. https://github.com/join
  33. https://github.com/login?return_to=/facebookresearch/drqa
  34. https://github.com/facebookresearch/drqa/watchers
  35. https://github.com/login?return_to=/facebookresearch/drqa
  36. https://github.com/facebookresearch/drqa/stargazers
  37. https://github.com/login?return_to=/facebookresearch/drqa
  38. https://github.com/facebookresearch/drqa/network/members
  39. https://github.com/facebookresearch
  40. https://github.com/facebookresearch/drqa
  41. https://github.com/facebookresearch/drqa
  42. https://github.com/facebookresearch/drqa/issues
  43. https://github.com/facebookresearch/drqa/pulls
  44. https://github.com/facebookresearch/drqa/projects
  45. https://github.com/facebookresearch/drqa/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/facebookresearch/drqa/commits/master
  48. https://github.com/facebookresearch/drqa/branches
  49. https://github.com/facebookresearch/drqa/releases
  50. https://github.com/facebookresearch/drqa/graphs/contributors
  51. https://github.com/facebookresearch/drqa/blob/master/license
  52. https://github.com/facebookresearch/drqa/search?l=python
  53. https://github.com/facebookresearch/drqa/search?l=shell
  54. https://github.com/facebookresearch/drqa/find/master
  55. https://github.com/facebookresearch/drqa/archive/master.zip
  56. https://github.com/login?return_to=https://github.com/facebookresearch/drqa
  57. https://github.com/join?return_to=/facebookresearch/drqa
  58. https://desktop.github.com/
  59. https://desktop.github.com/
  60. https://developer.apple.com/xcode/
  61. https://visualstudio.github.com/
  62. https://github.com/ajfisch
  63. https://github.com/facebookresearch/drqa/commits?author=ajfisch
  64. https://github.com/facebookresearch/drqa/commit/a03848d216aff1763da7dff5c8d20e35c6ab379e
  65. https://github.com/facebookresearch/drqa/pull/206
  66. https://github.com/facebookresearch/drqa/commit/a03848d216aff1763da7dff5c8d20e35c6ab379e
  67. https://github.com/facebookresearch/drqa/commit/a03848d216aff1763da7dff5c8d20e35c6ab379e
  68. https://github.com/facebookresearch/drqa/tree/a03848d216aff1763da7dff5c8d20e35c6ab379e
  69. https://github.com/facebookresearch/drqa/tree/master/drqa
  70. https://github.com/facebookresearch/drqa/tree/master/img
  71. https://github.com/facebookresearch/drqa/commit/a1082dbb34ced23fe601f2f5880e0c5ead3a144f
  72. https://github.com/facebookresearch/drqa/tree/master/scripts
  73. https://github.com/facebookresearch/drqa/blob/master/.gitignore
  74. https://github.com/facebookresearch/drqa/blob/master/code_of_conduct.md
  75. https://github.com/facebookresearch/drqa/blob/master/contributing.md
  76. https://github.com/facebookresearch/drqa/commit/6a0f98cb9db1c5091fa2e7e615c92c42851d16df
  77. https://github.com/facebookresearch/drqa/blob/master/license
  78. https://github.com/facebookresearch/drqa/blob/master/patents
  79. https://github.com/facebookresearch/drqa/blob/master/readme.md
  80. https://github.com/facebookresearch/drqa/blob/master/download.sh
  81. https://github.com/facebookresearch/drqa/blob/master/install_corenlp.sh
  82. https://github.com/facebookresearch/drqa/blob/master/requirements.txt
  83. https://github.com/facebookresearch/drqa/blob/master/setup.py
  84. https://arxiv.org/abs/1704.00051
  85. https://github.com/facebookresearch/drqa#machine-reading-at-scale
  86. https://github.com/facebookresearch/drqa#quick-start-demo
  87. https://github.com/facebookresearch/drqa#installing-drqa
  88. https://github.com/facebookresearch/drqa#drqa-components
  89. https://github.com/facebookresearch/drqa/blob/master/img/drqa.png
  90. https://github.com/facebookresearch/drqa/blob/master/scripts/retriever/readme.md
  91. https://github.com/facebookresearch/drqa#trained-models-and-data
  92. https://github.com/facebookresearch/drqa#qa-datasets
  93. https://github.com/facebookresearch/drqa#installing-drqa
  94. https://github.com/facebookresearch/drqa#trained-models-and-data
  95. http://pytorch.org/
  96. https://github.com/facebookresearch/drqa#tokenizers
  97. https://stanfordnlp.github.io/corenlp/index.html#download
  98. https://github.com/facebookresearch/drqa/blob/master/scripts/reader/readme.md#note-on-word-embeddings
  99. https://dl.fbaipublicfiles.com/drqa/docs-tfidf-ngram=2-hash=16777216-tokenizer=simple.npz.gz
 100. https://dl.fbaipublicfiles.com/drqa/single.mdl
 101. https://dl.fbaipublicfiles.com/drqa/multitask.mdl
 102. https://github.com/attardi/wikiextractor
 103. https://dl.fbaipublicfiles.com/drqa/docs.db.gz
 104. https://rajpurkar.github.io/squad-explorer/dataset/train-v1.1.json
 105. https://rajpurkar.github.io/squad-explorer/dataset/dev-v1.1.json
 106. http://nlp.stanford.edu/static/software/sempre/release-emnlp2013/lib/data/webquestions/dataset_11/webquestions.examples.train.json.bz2
 107. http://nlp.stanford.edu/static/software/sempre/release-emnlp2013/lib/data/webquestions/dataset_11/webquestions.examples.test.json.bz2
 108. https://dl.fbaipublicfiles.com/drqa/freebase-entities.txt.gz
 109. https://dl.fbaipublicfiles.com/drqa/wikimovies.tar.gz
 110. https://research.fb.com/downloads/babi/
 111. https://dl.fbaipublicfiles.com/drqa/curatedtrec.tar.gz
 112. https://github.com/brmson/dataset-factoid-curated
 113. https://github.com/facebookresearch/drqa/blob/master/scripts/retriever/readme.md
 114. https://github.com/facebookresearch/drqa#document-retriever-1
 115. https://github.com/facebookresearch/drqa#installing-drqa
 116. https://arxiv.org/abs/1606.05250
 117. https://github.com/facebookresearch/drqa/blob/master/scripts/reader/readme.md
 118. https://github.com/facebookresearch/drqa#document-reader-1
 119. https://github.com/facebookresearch/drqa/blob/master/scripts/distant/readme.md
 120. https://stanfordnlp.github.io/corenlp/
 121. https://spacy.io/
 122. https://github.com/facebookresearch/drqa/blob/master/drqa/tokenizers/__init__.py
 123. https://github.com/facebookresearch/parlai
 124. https://github.com/zaghaghi/
 125. https://github.com/zaghaghi/drqa-webui
 126. https://github.com/site/terms
 127. https://github.com/site/privacy
 128. https://github.com/security
 129. https://githubstatus.com/
 130. https://help.github.com/
 131. https://github.com/contact
 132. https://github.com/pricing
 133. https://developer.github.com/
 134. https://training.github.com/
 135. https://github.blog/
 136. https://github.com/about
 137. https://github.com/facebookresearch/drqa
 138. https://github.com/facebookresearch/drqa

   hidden links:
 140. https://github.com/
 141. https://github.com/facebookresearch/drqa
 142. https://github.com/facebookresearch/drqa
 143. https://github.com/facebookresearch/drqa
 144. https://help.github.com/articles/which-remote-url-should-i-use
 145. https://github.com/facebookresearch/drqa#drqa
 146. https://github.com/facebookresearch/drqa#quick-links
 147. https://github.com/facebookresearch/drqa#machine-reading-at-scale
 148. https://github.com/facebookresearch/drqa#quick-start-demo
 149. https://github.com/facebookresearch/drqa#installing-drqa
 150. https://github.com/facebookresearch/drqa#trained-models-and-data
 151. https://github.com/facebookresearch/drqa#document-retriever
 152. https://github.com/facebookresearch/drqa#document-reader
 153. https://github.com/facebookresearch/drqa#wikipedia
 154. https://github.com/facebookresearch/drqa#qa-datasets
 155. https://github.com/facebookresearch/drqa#format-a
 156. https://github.com/facebookresearch/drqa#format-b
 157. https://github.com/facebookresearch/drqa#entity-lists
 158. https://github.com/facebookresearch/drqa#drqa-components
 159. https://github.com/facebookresearch/drqa#document-retriever-1
 160. https://github.com/facebookresearch/drqa#document-reader-1
 161. https://github.com/facebookresearch/drqa#drqa-pipeline
 162. https://github.com/facebookresearch/drqa#distant-supervision-ds
 163. https://github.com/facebookresearch/drqa#tokenizers
 164. https://github.com/facebookresearch/drqa#citation
 165. https://github.com/facebookresearch/drqa#drqa-elsewhere
 166. https://github.com/facebookresearch/drqa#connection-with-parlai
 167. https://github.com/facebookresearch/drqa#web-ui
 168. https://github.com/facebookresearch/drqa#license
 169. https://github.com/
