   #[1]rss

     * [2]about
     * [3]software
     * [4]demos
     * [5]blog

   [displacy-ent-js.jpg]    [6]kemal   anl  

an open-source named entity visualiser for the modern web

   october 5, 2016    by ines montani

   id39 is a crucial technology for nlp. whatever
   you're doing with text, you usually want to handle names, numbers,
   dates and other entities differently from regular words. to help you
   make use of ner, we've released [7]displacy-ent.js. this post explains
   how the library works, and how to use it.

update (feburary 2018)

   as of [8]spacy v2.0, the displacy ent visualizer is integrated into the
   core library. it supports serving the visualizations in the browser,
   generating the raw markup or outputting the results in a jupyter
   notebook. for more details, see the [9]visualizers documentation.

   displacy ^ent is a lightweight and extensible library that fetches
   json-formatted named entity annotations and transforms them into
   semantic html. this way, the original text stays intact and we can rely
   on web standards and avoid extra dependencies. the [10]brat visualiser
   for example is great and comes with a lot of options, but it also
   requires a 500+ line stylesheet, three fonts and a total of 11
   javascript dependencies, including jquery with two plugins. this can be
   a bit heavy if you only want to show a simple, static visualisation, or
   implement a custom workflow.

   here's an example of a text rendered by [11]displacy ^ent:
   [12]view on codepen
   isn't person the wrong label for 'recode'?yes     but that also makes it
   a good example. no model is perfect. this example is hard because the
   entity hasn't been seen in the training data, and "interview with
   person" is more common than "interview with org".

   the labels are displayed and styled using only css selectors     and you
   can do some pretty powerful stuff with that. you'll see a few examples
   later on.

[13]using displacy-ent.js in your projects

   to use displacy ^ent, include displacy-ent.js and initialize a new
   instance specifying the api and settings. the parse(text, model, ents)
   method renders a parse generated by [14]spacy  s services, which you can
   download and run for free.a note on compatibilitydisplacy ent is
   written in ecmascript 6. for full, cross-browser compatibility, make
   sure to use a compiler like [15]babel. for more info, see this
   [16]compatibility table.
// your api
const api = 'http://localhost:8000';

// init displacy ent
const displacy = new displacyent(api, {
    container: '#displacy'
});

const text = 'when sebastian thrun started working on self-driving cars at googl
e in 2007, few people outside of the company took him seriously.';
const model = 'en';

// entities to visualise
const ents = ['person', 'org', 'date'];

// parse text
displacy.parse(text, model, ents);

   for a full list of available settings, see the [17]readme.
   alternatively, you can also use render(text, spans, ents) to manually
   render a json-formatted set of entity spans returned from our [18]rest
   service.

[19]example: using the static visualisation on your site

   if you're only looking to visualise the entities of a given text,
   there's no need to include any javascript at all. simply head over to
   our [20]demo and copy-paste the html and css. [21]codepen is a great
   tool to test this and see it in action immediately. displacy ^ent also
   logs the full html markup to the console.

[22]example: dynamically generate a visualisation

   let's say you want to add entity visualisation to a bunch of text on
   your site. you can do this by replacing the content of your container
   with the visualised output of displacy ^ent once the document has
   loaded:
usage exampleconst displacy = new displacyent('http://localhost:8000', {
    container: '#displacy',
    defaultmodel: 'en',
    defaultents: ['person', 'org', 'date']
});

// replace text in container with visualisation once document has loaded
document.addeventlistener('domcontentloaded', (ev) => {
    const text = document.queryselector('#displacy').textcontent;
    displacy.parse(text);
});

   note that this only grabs the textcontent and ignores line breaks,
   paragraphs and other html tags. as a workaround, you could replace line
   beaks and pargraphs with newlines in the container's innerhtml and then
   grab its textcontent:
hacky workaroundconst container = document.queryselector('#displacy');
container.innerhtml = container.innerhtml
                      .replace(/<br\s*[\/]?>/gi, '\n')
                      .replace(/<p[^>]*>/g, '')
                      .replace(/<\/p>/g, '\n\n');

displacy.parse(container.textcontent);

   stripping html in jsit might be tempting to add another regular
   expression to strip out all html tags in the first step. [23]don  t do
   this. id157 are not suitable to parse arbitrary html. but
   if you must, only do it on your content that you control.

   in general, i'd recommend to only use displacy ^ent on plain,
   unformatted text. if you're working with user input or other
   unpredictable content, opt for a [24]library to sanitise html and
   prevent xss.

[25]how displacy ^ent works

   displacy ^ent wraps the entities in the html5 <mark> element for
   [26]highlighted text. each entity is assigned the data attribute
   data-entity:
example markup<div class="entities">
    when <mark data-entity="person">sebastian thrun</mark> started working on se
lf-driving
    cars at <mark data-entity="org">google</mark> in <mark data-entity="date">20
07</mark>,
    few people outside of the company took him seriously.
</div>

   this is done using a simple javascript function. it takes the list of
   spans returned by the server, slices the original text into fragments
   and, if an entity should be visualised, wraps it in a <mark> tag and
   adds the right data attribute. the data attributes are then displayed
   after the entity in css using the :after pseudo-element:
example css/* display value of data-entity after entity */
[data-entity]:after {
    content: attr(data-entity);
    display: inline-block;
    vertical-align: middle;
    /* other visual styling */
}

/* style "person" entity */
[data-entity="person"] {
    background: rgb(166, 226, 45);
}

[data-entity="person"]:after {
    background: rgba(166, 226, 45, 0.2);
    border-color: rgb(166, 226, 45);
}

   with css, you have almost infinite possibilities to present the
   entities. here are a few examples with different colours, borders and
   hover effects:
   [27]view on codepen

   there's another cool thing you can do with advanced selectors: you can
   make it only show the entity label for the first instance, or rather,
   hide all other ones and only show them on hover:
   [28]view on codepen

   the trick here is the element ~ element selector that selects all
   elements following another element. basically, we're adding the label
   to all entities and then hiding it for all entities with
   data-entity="person" following another one, i.e. all except for the
   first.what about :first-of-type?my first instinct was to use the
   :first-of-type pseudo-class     but this doesn't work here, as it only
   selects for elements and not attributes. the ~ selector hack is
   currently the only way to make attribute queries like this possible.
css markup (excerpt)[data-entity="person"] {
    transition: opacity 0.25s ease;
}

[data-entity="person"] ~ [data-entity="person"]:after {
    opacity: 0;
}

[data-entity="person"] ~ [data-entity="person"]:hover:after {
    opacity: 1;
}

   this needs to be done for all occuring entity types. in my example, i
   used a simple sass loop to automate this:
sass loop (excerpt)$entities: ( person: #f44d61, org: #8e7dff, date: #2fbbab )

@each $entity, $color in $entities
    [data-entity="#{$entity}"] ~ [data-entity="#{$entity}"]
        &:after
            opacity: 0

        &:hover:after
            opacity: 1

[29]what's next?

   in the future, we're planning to add support for more annotation
   formats like [30]google  s nlp api and [31]corenlp. i'd also love to
   release more css themes for different entity styles. if you'd like to
   contribute one, check out the current sass template [32]here and feel
   free to submit a [33]pull request.

update (feburary 2018)

   as of [34]spacy v2.0, the displacy ent visualizer is integrated into
   the core library. it supports serving the visualizations in the
   browser, generating the raw markup or outputting the results in a
   jupyter notebook. for more details, see the [35]visualizers
   documentation.

   ines montani
   about the author

ines montani

   ines is a developer specialising in applications for ai technology.
   she's a core developer of the spacy natural language processing library
   and the prodigy annotation tool. before founding explosion ai, she was
   a freelance front-end developer and strategist, using her four years
   executive experience in ad sales and digital marketing.

read more

[36]introducing spacy v2.1

[37]explosion ai in 2017: our year in review

[38]introducing custom pipelines and extensions for spacy v2.0

[39]pseudo-rehearsal: a simple solution to catastrophic forgetting for nlp

[40]prodigy: a new tool for radically efficient machine teaching

[41]supervised learning is great     it   s data collection that   s broken

    about us

   explosion ai is a digital studio specialising in artificial
   intelligence and natural language processing. we   re the makers of
   spacy, the leading open-source nlp library.

    navigation

     * [42]home
     * [43]about
     * [44]software
     * [45]demos
     * [46]blog
     * [47]legal / imprint

    our software

     * [48]spacy
       industrial-strength nlp
     * [49]prodigy
       radically efficient machine teaching

   [50]see more    

references

   visible links
   1. https://explosion.ai/feed.xml
   2. https://explosion.ai/about
   3. https://explosion.ai/software
   4. https://explosion.ai/demos
   5. https://explosion.ai/blog
   6. https://dribbble.com/kemal
   7. https://demos.explosion.ai/displacy-ent
   8. https://spacy.io/usage/v2
   9. https://spacy.io/usage/visualizers
  10. http://brat.nlplab.org/embed.html
  11. https://demos.explosion.ai/displacy-ent
  12. https://codepen.io/undefined/alxpqo
  14. https://github.com/explosion/spacy-services
  15. https://github.com/babel/babel
  16. https://kangax.github.io/compat-table/es6/
  17. https://github.com/explosion/displacy#using-displacyentjs
  18. https://github.com/explosion/spacy-services
  20. https://demos.explosion.ai/displacy-ent
  21. https://codepen.io/
  23. http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454
  24. https://github.com/search?utf8=   &q=sanitize+html+js
  26. http://www.w3schools.com/tags/tag_mark.asp
  27. https://codepen.io/undefined/xepgkz
  28. https://codepen.io/undefined/peprmv
  30. https://cloud.google.com/natural-language/reference/rest/v1beta1/documents/annotatetext
  31. http://stanfordnlp.github.io/corenlp/
  32. https://github.com/explosion/displacy-ent/blob/master/assets/css/displacy-ent.sass
  33. https://github.com/explosion/displacy-ent/pulls
  34. https://spacy.io/usage/v2
  35. https://spacy.io/usage/visualizers
  36. https://explosion.ai/blog/spacy-v2-1
  37. https://explosion.ai/blog/year-in-review-2017
  38. https://explosion.ai/blog/spacy-v2-pipelines-extensions
  39. https://explosion.ai/blog/pseudo-rehearsal-catastrophic-forgetting
  40. https://explosion.ai/blog/prodigy-annotation-tool-active-learning
  41. https://explosion.ai/blog/supervised-learning-data-collection
  42. https://explosion.ai/
  43. https://explosion.ai/about
  44. https://explosion.ai/software
  45. https://explosion.ai/demos
  46. https://explosion.ai/blog
  47. https://explosion.ai/legal
  48. https://spacy.io/
  49. https://prodi.gy/
  50. https://explosion.ai/software

   hidden links:
  52. https://explosion.ai/
  53. mailto:ines@explosion.ai
  54. https://twitter.com/_inesmontani
  55. https://github.com/ines
  56. https://ines.io/
  57. https://explosion.ai/blog/spacy-v2-1
  58. https://explosion.ai/blog/year-in-review-2017
  59. https://explosion.ai/blog/spacy-v2-pipelines-extensions
  60. https://explosion.ai/blog/pseudo-rehearsal-catastrophic-forgetting
  61. https://explosion.ai/blog/prodigy-annotation-tool-active-learning
  62. https://explosion.ai/blog/supervised-learning-data-collection
  63. mailto:contact@explosion.ai
  64. https://twitter.com/explosion_ai
  65. https://github.com/explosion
  66. https://youtube.com/c/explosionai
  67. https://explosion.ai/feed
