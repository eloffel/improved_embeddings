   mcs        2017/6/5     19:42     page i     #1

mathematics for computer science

revised monday 5th june, 2017, 19:42

eric lehman

google inc.

f thomson leighton
department of mathematics

and the computer science and ai laboratory,

massachussetts institute of technology;

akamai technologies

albert r meyer

department of electrical engineering and computer science

and the computer science and ai laboratory,

massachussetts institute of technology

2017, eric lehman, f tom leighton, albert r meyer. this work is available under the

terms of the creative commons attribution-sharealike 3.0 license.

   mcs        2017/6/5     19:42     page ii     #2

   mcs        2017/6/5     19:42     page iii     #3

contents

i proofs

introduction 3

0.1 references

4
1 what is a proof? 5

9

8

5

propositions
predicates
the axiomatic method

1.1
1.2
1.3
1.4 our axioms
proving an implication
1.5
proving an    if and only if   
1.6
proof by cases
1.7
1.8
proof by contradiction
1.9 good proofs in practice
1.10 references

15

19

8

11

16
17

13

2 the well ordering principle 29

template for wop proofs
factoring into primes

2.1 well ordering proofs
2.2
2.3
2.4 well ordered sets
3 logical formulas 47

33

29

32

30

48

propositions from propositions
id118 in computer programs
equivalence and validity
the algebra of propositions
the sat problem 62
predicate formulas
63

3.1
3.2
3.3
3.4
3.5
3.6
3.7 references

57

54

68

52

4 mathematical data types 97

sets
97
sequences
functions

4.1
102
4.2
103
4.3
4.4 binary relations
4.5
finite cardinality

105
109

   mcs        2017/6/5     19:42     page iv     #4

iv

contents

strong induction
strong induction vs. induction vs. well ordering

140

147

131

5

6

induction 131
5.1 ordinary induction
5.2
5.3
state machines 167
6.1
6.2
6.3
6.4

states and transitions
the invariant principle
partial correctness & termination
the stable marriage problem 181

167
168

176

211

219

7 recursive data types 211

221

215

strings of matched brackets

7.1 recursive de   nitions and structural induction
7.2
7.3 recursive functions on nonnegative integers
7.4 arithmetic expressions
7.5 games as a recursive data type
7.6
in   nite sets 257
8.1
8.2
8.3
8.4 does all this really work?

in   nite cardinality
the halting problem 267
the logic of sets

induction in computer science

226

230

258

271

275

8

ii structures

introduction 299
9 number theory 301

301

313

306

the greatest common divisor
prime mysteries
the fundamental theorem of arithmetic

9.1 divisibility
9.2
9.3
9.4
9.5 alan turing
9.6 modular arithmetic
9.7 remainder arithmetic
9.8
9.9 multiplicative inverses and cancelling
9.10 euler   s theorem 333
9.11 rsa public key encryption

324
turing   s code (version 2.0)

327

338

322

318

315

329

   mcs        2017/6/5     19:42     page v     #5

v

contents

9.12 what has sat got to do with it?
9.13 references

341

340

10 directed graphs & partial orders 381

390

387

383
384

10.1 vertex degrees
10.2 walks and paths
10.3 adjacency matrices
10.4 walk relations
10.5 directed acyclic graphs & scheduling
10.6 partial orders
10.7 representing partial orders by set containment
404
10.8 linear orders
10.9 product orders
404
10.10 equivalence relations
10.11 summary of relational properties
10.12 references

391

405

409

399

407

11 communication networks 441

441

11.1 routing
11.2 routing measures
11.3 network designs
12 simple graphs 461

442
445

461

463

469

465

12.1 vertex adjacency and degrees
12.2 sexual demographics in america
12.3 some common graphs
12.4 isomorphism 466
12.5 bipartite graphs & matchings
12.6 coloring
12.7 walks in simple graphs
12.8 connectivity
12.9 special walks and tours
12.10 k-connected graphs
12.11 forests & trees
12.12 references

478

480

487

474

483

485

494
13 planar graphs 533

13.1 drawing graphs in the plane
13.2 de   nitions of planar graphs
13.3 euler   s formula
13.4 bounding the number of edges in a planar graph
13.5 returning to k5 and k3;3

533
533

544

546

403

545

   mcs        2017/6/5     19:42     page vi     #6

vi

contents

552

613

13.6 coloring planar graphs
13.7 classifying polyhedra
13.8 another characterization for planar graphs

547

549

iii counting

introduction 561
14 sums and asymptotics 563

564

576

14.1 the value of an annuity
14.2 sums of powers
570
14.3 approximating sums
572
14.4 hanging out over the edge
14.5 products
582
585
14.6 double trouble
14.7 asymptotic notation
15 cardinality rules 613

588

617

614

621
623

15.1 counting one thing by counting another
15.2 counting sequences
15.3 the generalized product rule
15.4 the division rule
15.5 counting subsets
15.6 sequences with repetitions
15.7 counting practice: poker hands
15.8 the pigeonhole principle
634
15.9 inclusion-exclusion
643
15.10 combinatorial proofs
649
15.11 references

629

625

653

16 generating functions 693

693

16.1 in   nite series
16.2 counting with generating functions
16.3 partial fractions
16.4 solving linear recurrences
16.5 formal power series
709
16.6 references

704

701

712

695

   mcs        2017/6/5     19:42     page vii     #7

vii

contents

iv id203

introduction 729
17 events and id203 spaces 731

731

17.1 let   s make a deal
17.2 the four step method
17.3 strange dice
17.4 the birthday principle
17.5 set theory and id203
17.6 references

741

754

732

748

750

18 id155 763
763
764

18.1 monty hall confusion
18.2 de   nition and notation
18.3 the four-step method for id155
18.4 why tree diagrams work
18.5 the law of total id203
18.6 simpson   s paradox
18.7 independence
780
18.8 mutual independence
18.9 id203 versus con   dence

768

778

782

786

776

19 random variables 815

766

815

19.1 random variable examples
19.2 independence
19.3 distribution functions
19.4 great expectations
827
19.5 linearity of expectation

817

839
20 deviation from the mean 871

819

20.1 markov   s theorem 871
20.2 chebyshev   s theorem 874
20.3 properties of variance
878
20.4 estimation by random sampling
20.5 con   dence in an estimation
20.6 sums of random variables
20.7 really great expectations

888
889
899

884

21 id93 923

21.1 gambler   s ruin

923

   mcs        2017/6/5     19:42     page viii     #8

viii

contents

21.2 id93 on graphs

933

v recurrences

introduction 951
22 recurrences 953

953

22.1 the towers of hanoi
22.2 merge sort
22.3 linear recurrences
22.4 divide-and-conquer recurrences
22.5 a feel for recurrences

960

974

956

967

bibliography 981
glossary of symbols 985
index 989

   mcs        2017/6/5     19:42     page 1     #9

i proofs

   mcs        2017/6/5     19:42     page 2     #10

   mcs        2017/6/5     19:42     page 3     #11

introduction

this text explains how to use mathematical models and methods to analyze prob-
lems that arise in computer science. proofs play a central role in this work because
the authors share a belief with most mathematicians that proofs are essential for
genuine understanding. proofs also play a growing role in computer science; they
are used to certify that software and hardware will always behave correctly, some-
thing that no amount of testing can do.

simply put, a proof is a method of establishing truth. like beauty,    truth    some-
times depends on the eye of the beholder, and it should not be surprising that what
constitutes a proof differs among    elds. for example, in the judicial system, legal
truth is decided by a jury based on the allowable evidence presented at trial. in the
business world, authoritative truth is speci   ed by a trusted person or organization,
or maybe just your boss. in    elds such as physics or biology, scienti   c truth is
con   rmed by experiment.1 in statistics, probable truth is established by statistical
analysis of sample data.

philosophical proof involves careful exposition and persuasion typically based
on a series of small, plausible arguments. the best example begins with    cogito
ergo sum,    a latin sentence that translates as    i think, therefore i am.    this phrase
comes from the beginning of a 17th century essay by the mathematician/philosopher,
ren  e descartes, and it is one of the most famous quotes in the world: do a web
search for it, and you will be    ooded with hits.

deducing your existence from the fact that you   re thinking about your existence
is a pretty cool and persuasive-sounding idea. however, with just a few more lines

1actually, only scienti   c falsehood can be demonstrated by an experiment   when the experiment
fails to behave as predicted. but no amount of experiment can con   rm that the next experiment won   t
fail. for this reason, scientists rarely speak of truth, but rather of theories that accurately predict past,
and anticipated future, experiments.

   mcs        2017/6/5     19:42     page 4     #12

4

0.1. references

of argument in this vein, descartes goes on to conclude that there is an in   nitely
bene   cent god. whether or not you believe in an in   nitely bene   cent god, you   ll
probably agree that any very short    proof    of god   s in   nite bene   cence is bound
to be far-fetched. so even in masterful hands, this approach is not reliable.

mathematics has its own speci   c notion of    proof.   

de   nition. a mathematical proof of a proposition is a chain of logical deductions
leading to the proposition from a base set of axioms.

the three key ideas in this de   nition are highlighted: proposition, logical deduc-
tion, and axiom. chapter 1 examines these three ideas along with some basic ways
of organizing proofs. chapter 2 introduces the well ordering principle, a basic
method of proof; later, chapter 5 introduces the closely related proof method of
induction.

if you   re going to prove a proposition, you   d better have a precise understand-
ing of what the proposition means. to avoid ambiguity and uncertain de   nitions
in ordinary language, mathematicians use language very precisely, and they often
express propositions using logical formulas; these are the subject of chapter 3.

the    rst three chapters assume the reader is familiar with a few mathematical
concepts like sets and functions. chapters 4 and 8 offer a more careful look at
such mathematical data types, examining in particular properties and methods for
proving things about in   nite sets. chapter 7 goes on to examine recursively de   ned
data types.

0.1 references

[14], [49], [1]

   mcs        2017/6/5     19:42     page 5     #13

1

what is a proof?

1.1 propositions

de   nition. a proposition is a statement (communication) that is either true or
false.

for example, both of the following statements are propositions. the    rst is true,

and the second is false.

proposition 1.1.1. 2 + 3 = 5.

proposition 1.1.2. 1 + 1 = 3.

being true or false doesn   t sound like much of a limitation, but it does exclude
statements such as    wherefore art thou romeo?    and    give me an a!    it also ex-
cludes statements whose truth varies with circumstance such as,    it   s    ve o   clock,   
or    the stock market will rise tomorrow.   

unfortunately it is not always easy to decide if a claimed proposition is true or

false:
claim 1.1.3. for every nonnegative integer n the value of n2 c n c 41 is prime.
(a prime is an integer greater than 1 that is not divisible by any other integer
greater than 1. for example, 2, 3, 5, 7, 11, are the    rst    ve primes.) let   s try some
numerical experimentation to check this proposition. let

we begin with p.0/ d 41, which is prime; then

p.n/ wwd n2 c n c 41:1

p.1/ d 43; p.2/ d 47; p.3/ d 53; : : : ; p.20/ d 461

(1.1)

are each prime. id48m, starts to look like a plausible claim. in fact we can keep
checking through n d 39 and con   rm that p.39/ d 1601 is prime.
but p.40/ d 402 c 40 c 41 d 41 (cid:1) 41, which is not prime. so claim 1.1.3
is false since it   s not true that p.n/ is prime for all nonnegative integers n.
in
fact, it   s not hard to show that no polynomial with integer coef   cients can map all
1the symbol wwd means    equal by de   nition.    it   s always ok simply to write    =    instead of wwd,

but reminding the reader that an equality holds by de   nition can be helpful.

   mcs        2017/6/5     19:42     page 6     #14

6

chapter 1 what is a proof?

nonnegative numbers into prime numbers, unless it   s a constant (see problem 1.26).
but this example highlights the point that, in general, you can   t check a claim about
an in   nite set by checking a    nite sample of its elements, no matter how large the
sample.

by the way, propositions like this about all numbers or all items of some kind are
so common that there is a special notation for them. with this notation, claim 1.1.3
would be
(1.2)
here the symbol 8 is read    for all.    the symbol n stands for the set of nonnegative
integers: 0, 1, 2, 3, . . . (ask your instructor for the complete list). the symbol    2   
is read as    is a member of,    or    belongs to,    or simply as    is in.    the period after
the n is just a separator between phrases.

8n 2 n: p.n/ is prime:

here are two even more extreme examples:

conjecture. [euler] the equation

a4 c b4 c c4 d d 4
has no solution when a; b; c; d are positive integers.

euler (pronounced    oiler   ) conjectured this in 1769. but the conjecture was
proved false 218 years later by noam elkies at a liberal arts school up mass ave.
the solution he found was a d 95800; b d 217519; c d 414560; d d 422481.
in logical notation, euler   s conjecture could be written,

8a 2 zc 8b 2 zc 8c 2 zc 8d 2 zc

: a4 c b4 c c4    d 4:

here, zc is a symbol for the positive integers. strings of 8   s like this are usually
abbreviated for easier reading:

8a; b; c; d 2 zc

: a4 c b4 c c4    d 4:

here   s another claim which would be hard to falsify by sampling: the smallest

possible x; y; z that satisfy the equality each have more than 1000 digits!
false claim. 313.x3 c y3/ d z3 has no solution when x; y; z 2 zc.
it   s worth mentioning a couple of further famous propositions whose proofs were

sought for centuries before    nally being discovered:
proposition 1.1.4 (four color theorem). every map can be colored with 4 colors
so that adjacent2 regions have different colors.

2two regions are adjacent only when they share a boundary segment of positive length. they are

not considered to be adjacent if their boundaries meet only at a few points.

   mcs        2017/6/5     19:42     page 7     #15

1.1. propositions

7

several incorrect proofs of this theorem have been published, including one that
stood for 10 years in the late 19th century before its mistake was found. a laborious
proof was    nally found in 1976 by mathematicians appel and haken, who used a
complex computer program to categorize the four-colorable maps. the program
left a few thousand maps uncategorized, which were checked by hand by haken
and his assistants   among them his 15-year-old daughter.

there was reason to doubt whether this was a legitimate proof   the proof was
too big to be checked without a computer. no one could guarantee that the com-
puter calculated correctly, nor was anyone enthusiastic about exerting the effort
to recheck the four-colorings of thousands of maps that were done by hand. two
decades later a mostly intelligible proof of the four color theorem was found,
though a computer is still needed to check four-colorability of several hundred spe-
cial maps.3

proposition 1.1.5 (fermat   s last theorem). there are no positive integers x, y
and z such that

xn c yn d zn

for some integer n > 2.

in a book he was reading around 1630, fermat claimed to have a proof for this
proposition, but not enough space in the margin to write it down. over the years,
the theorem was proved to hold for all n up to 4,000,000, but we   ve seen that this
shouldn   t necessarily inspire con   dence that it holds for all n. there is, after all,
a clear resemblance between fermat   s last theorem and euler   s false conjecture.
finally, in 1994, british mathematician andrew wiles gave a proof, after seven
years of working in secrecy and isolation in his attic. his proof did not    t in any
margin.4

finally, let   s mention another simply stated proposition whose truth remains un-

known.

conjecture 1.1.6 (goldbach). every even integer greater than 2 is the sum of two
primes.

goldbach   s conjecture dates back to 1742. it is known to hold for all numbers

up to 1018, but to this day, no one knows whether it   s true or false.

3the story of the proof of the four color theorem is told in a well-reviewed popular (non-
technical) book:    four colors suf   ce. how the map problem was solved.    robin wilson. princeton
univ. press, 2003, 276pp. isbn 0-691-11533-8.

4in fact, wiles    original proof was wrong, but he and several collaborators used his ideas to arrive
at a correct proof a year later. this story is the subject of the popular book, fermat   s enigma by
simon singh, walker & company, november, 1997.

   mcs        2017/6/5     19:42     page 8     #16

8

chapter 1 what is a proof?

for a computer scientist, some of the most important things to prove are the
correctness of programs and systems   whether a program or system does what it   s
supposed to. programs are notoriously buggy, and there   s a growing community
of researchers and practitioners trying to    nd ways to prove program correctness.
these efforts have been successful enough in the case of cpu chips that they are
now routinely used by leading chip manufacturers to prove chip correctness and
avoid some notorious past mistakes.

developing mathematical methods to verify programs and systems remains an

active research area. we   ll illustrate some of these methods in chapter 5.

1.2 predicates

a predicate can be understood as a proposition whose truth depends on the value
of one or more variables. so    n is a perfect square    describes a predicate, since you
can   t say if it   s true or false until you know what the value of the variable n happens
to be. once you know, for example, that n equals 4, the predicate becomes the true
proposition    4 is a perfect square   . remember, nothing says that the proposition
has to be true: if the value of n were 5, you would get the false proposition    5 is a
perfect square.   

like other propositions, predicates are often named with a letter. furthermore, a
function-like notation is used to denote a predicate supplied with speci   c variable
values. for example, we might use the name    p     for predicate above:

p .n/ wwd    n is a perfect square   ;

and repeat the remarks above by asserting that p .4/ is true, and p .5/ is false.

this notation for predicates is confusingly similar to ordinary function notation.
if p is a predicate, then p .n/ is either true or false, depending on the value of n.
on the other hand, if p is an ordinary function, like n2c1, then p.n/ is a numerical
quantity. don   t confuse these two!

1.3 the axiomatic method

the standard procedure for establishing truth in mathematics was invented by eu-
clid, a mathematician working in alexandria, egypt around 300 bc. his idea was
to begin with    ve assumptions about geometry, which seemed undeniable based on
direct experience. (for example,    there is a straight line segment between every

   mcs        2017/6/5     19:42     page 9     #17

1.4. our axioms

9

pair of points   .) propositions like these that are simply accepted as true are called
axioms.

starting from these axioms, euclid established the truth of many additional propo-
sitions by providing    proofs.    a proof is a sequence of logical deductions from
axioms and previously proved statements that concludes with the proposition in
question. you probably wrote many proofs in high school geometry class, and
you   ll see a lot more in this text.

there are several common terms for a proposition that has been proved. the

different terms hint at the role of the proposition within a larger body of work.

(cid:15) important true propositions are called theorems.
(cid:15) a lemma is a preliminary proposition useful for proving later propositions.
(cid:15) a corollary is a proposition that follows in just a few logical steps from a
theorem.

these de   nitions are not precise. in fact, sometimes a good lemma turns out to be
far more important than the theorem it was originally used to prove.

euclid   s axiom-and-proof approach, now called the axiomatic method, remains
the foundation for mathematics today. in fact, just a handful of axioms, called the
zermelo-fraenkel with choice axioms (zfc), together with a few logical deduction
rules, appear to be suf   cient to derive essentially all of mathematics. we   ll examine
these in chapter 8.

1.4 our axioms

the zfc axioms are important in studying and justifying the foundations of math-
ematics, but for practical purposes, they are much too primitive. proving theorems
in zfc is a little like writing programs in byte code instead of a full-   edged pro-
gramming language   by one reckoning, a formal proof in zfc that 2 c 2 d 4
requires more than 20,000 steps! so instead of starting with zfc, we   re going to
take a huge set of axioms as our foundation: we   ll accept all familiar facts from
high school math.

this will give us a quick launch, but you may    nd this imprecise speci   cation
of the axioms troubling at times. for example, in the midst of a proof, you may
start to wonder,    must i prove this little fact or can i take it as an axiom?    there
really is no absolute answer, since what   s reasonable to assume and what requires
proof depends on the circumstances and the audience. a good general guideline is
simply to be up front about what you   re assuming.

   mcs        2017/6/5     19:42     page 10     #18

10

chapter 1 what is a proof?

1.4.1 logical deductions
logical deductions, or id136 rules, are used to prove new propositions using
previously proved ones.

a fundamental id136 rule is modus ponens. this rule says that a proof of p

together with a proof that p implies q is a proof of q.

id136 rules are sometimes written in a funny notation. for example, modus

ponens is written:

rule.

p; p implies q

q

when the statements above the line, called the antecedents, are proved, then we
can consider the statement below the line, called the conclusion or consequent, to
also be proved.

a key requirement of an id136 rule is that it must be sound: an assignment
of truth values to the letters p , q, . . . , that makes all the antecedents true must
also make the consequent true. so if we start off with true axioms and apply sound
id136 rules, everything we prove will also be true.

there are many other natural, sound id136 rules, for example:

rule.

rule.

on the other hand,

non-rule.

p implies q; q implies r

p implies r

not.p / implies not.q/

q implies p

not.p / implies not.q/

p implies q

is not sound: if p is assigned t and q is assigned f, then the antecedent is true
and the consequent is not.

as with axioms, we will not be too formal about the set of legal id136 rules.
each step in a proof should be clear and    logical   ; in particular, you should state
what previously proved facts are used to derive each new conclusion.

   mcs        2017/6/5     19:42     page 11     #19

1.5. proving an implication

11

1.4.2 patterns of proof
in principle, a proof can be any sequence of logical deductions from axioms and
previously proved statements that concludes with the proposition in question. this
freedom in constructing a proof can seem overwhelming at    rst. how do you even
start a proof?

here   s the good news: many proofs follow one of a handful of standard tem-
plates. each proof has it own details, of course, but these templates at least provide
you with an outline to    ll in. we   ll go through several of these standard patterns,
pointing out the basic idea and common pitfalls and giving some examples. many
of these templates    t together; one may give you a top-level outline while others
help you at the next level of detail. and we   ll show you other, more sophisticated
proof techniques later on.

the recipes below are very speci   c at times, telling you exactly which words to
write down on your piece of paper. you   re certainly free to say things your own
way instead; we   re just giving you something you could say so that you   re never at
a complete loss.

1.5 proving an implication

propositions of the form    if p , then q    are called implications. this implication
is often rephrased as    p implies q.   

here are some examples:
(cid:15) (quadratic formula) if ax2 c bx c c d 0 and a    0, then

x d(cid:16)(cid:0)b   

p

 

b2 (cid:0) 4ac

=2a:

(cid:15) (goldbach   s conjecture 1.1.6 rephrased) if n is an even integer greater than
2, then n is a sum of two primes.
(cid:15) if 0   x   2, then (cid:0)x3 c 4x c 1 > 0.

there are a couple of standard methods for proving an implication.

1.5.1 method #1
in order to prove that p implies q:

1. write,    assume p .   

2. show that q logically follows.

   mcs        2017/6/5     19:42     page 12     #20

12

chapter 1 what is a proof?

example
theorem 1.5.1. if 0   x   2, then (cid:0)x3 c 4x c 1 > 0.
before we write a proof of this theorem, we have to do some scratchwork to
   gure out why it is true.
the inequality certainly holds for x d 0; then the left side is equal to 1 and
1 > 0. as x grows, the 4x term (which is positive) initially seems to have greater
magnitude than (cid:0)x3 (which is negative). for example, when x d 1, we have
4x d 4, but (cid:0)x3 d (cid:0)1 only. in fact, it looks like (cid:0)x3 doesn   t begin to dominate
until x > 2. so it seems the (cid:0)x3c 4x part should be nonnegative for all x between
0 and 2, which would imply that (cid:0)x3 c 4x c 1 is positive.
so far, so good. but we still have to replace all those    seems like    phrases with
solid, logical arguments. we can get a better handle on the critical (cid:0)x3 c 4x part
by factoring it, which is not too hard:

(cid:0)x3 c 4x d x.2 (cid:0) x/.2 c x/

aha! for x between 0 and 2, all of the terms on the right side are nonnegative. and
a product of nonnegative terms is also nonnegative. let   s organize this blizzard of
observations into a clean proof.
proof. assume 0   x   2. then x, 2(cid:0) x and 2c x are all nonnegative. therefore,
the product of these terms is also nonnegative. adding 1 to this product gives a
positive number, so:

x.2 (cid:0) x/.2 c x/ c 1 > 0

multiplying out on the left side proves that

(cid:0)x3 c 4x c 1 > 0

as claimed.

(cid:4)

there are a couple points here that apply to all proofs:
(cid:15) you   ll often need to do some scratchwork while you   re trying to    gure out
the logical steps of a proof. your scratchwork can be as disorganized as you
like   full of dead-ends, strange diagrams, obscene words, whatever. but
keep your scratchwork separate from your    nal proof, which should be clear
and concise.
(cid:15) proofs typically begin with the word    proof    and end with some sort of de-
limiter like (cid:3) or    qed.    the only purpose for these conventions is to clarify
where proofs begin and end.

   mcs        2017/6/5     19:42     page 13     #21

1.6. proving an    if and only if   

13

1.5.2 method #2 - prove the contrapositive
an implication (   p implies q   ) is logically equivalent to its contrapositive

not.q/ implies not.p / :

proving one is as good as proving the other, and proving the contrapositive is some-
times easier than proving the original statement. if so, then you can proceed as
follows:

1. write,    we prove the contrapositive:    and then state the contrapositive.

2. proceed as in method #1.

example
theorem 1.5.2. if r is irrational, then

p

r is also irrational.

a number is rational when it equals a quotient of integers    that is, if it equals
m=n for some integers m and n. if it   s not rational, then it   s called irrational. so
we must show that if r is not a ratio of integers, then
r is also not a ratio of
integers. that   s pretty convoluted! we can eliminate both not   s and simplify the
proof by using the contrapositive instead.
p
r is rational, then r is rational.

p
r is rational. then there exist integers m and n such that:

proof. we prove the contrapositive: if
p

assume that

p

r d m

n

squaring both sides gives:

r d m2
n2
since m2 and n2 are integers, r is also rational.

(cid:4)

1.6 proving an    if and only if   

many mathematical theorems assert that two statements are logically equivalent;
that is, one holds if and only if the other does. here is an example that has been
known for several thousand years:

two triangles have the same side lengths if and only if two side lengths
and the angle between those sides are the same.

the phrase    if and only if    comes up so often that it is often abbreviated    iff.   

   mcs        2017/6/5     19:42     page 14     #22

14

chapter 1 what is a proof?

1.6.1 method #1: prove each statement implies the other
the statement    p iff q    is equivalent to the two statements    p implies q    and
   q implies p .    so you can prove an    iff    by proving two implications:

1. write,    we prove p implies q and vice-versa.   

2. write,    first, we show p implies q.    do this by one of the methods in

section 1.5.

3. write,    now, we show q implies p .    again, do this by one of the methods

in section 1.5.

1.6.2 method #2: construct a chain of iffs
in order to prove that p is true iff q is true:

1. write,    we construct a chain of if-and-only-if implications.   

2. prove p is equivalent to a second statement which is equivalent to a third

statement and so forth until you reach q.

this method sometimes requires more ingenuity than the    rst, but the result can be
a short, elegant proof.

example
the standard deviation of a sequence of values x1; x2; : : : ; xn is de   ned to be:

s

.x1 (cid:0) (cid:22)/2 c .x2 (cid:0) (cid:22)/2 c (cid:1)(cid:1)(cid:1) c .xn (cid:0) (cid:22)/2

n

(1.3)

where (cid:22) is the average or mean of the values:

(cid:22) wwd x1 c x2 c (cid:1)(cid:1)(cid:1) c xn

n

theorem 1.6.1. the standard deviation of a sequence of values x1; : : : ; xn is zero
iff all the values are equal to the mean.

for example, the standard deviation of test scores is zero if and only if everyone

scored exactly the class average.

proof. we construct a chain of    iff    implications, starting with the statement that
the standard deviation (1.3) is zero:

.x1 (cid:0) (cid:22)/2 c .x2 (cid:0) (cid:22)/2 c (cid:1)(cid:1)(cid:1) c .xn (cid:0) (cid:22)/2

n

d 0:

(1.4)

s

   mcs        2017/6/5     19:42     page 15     #23

1.7. proof by cases

15

now since zero is the only number whose square root is zero, equation (1.4) holds
iff

.x1 (cid:0) (cid:22)/2 c .x2 (cid:0) (cid:22)/2 c (cid:1)(cid:1)(cid:1) c .xn (cid:0) (cid:22)/2 d 0:

(1.5)
squares of real numbers are always nonnegative, so every term on the left-hand
side of equation (1.5) is nonnegative. this means that (1.5) holds iff

every term on the left-hand side of (1.5) is zero.

(1.6)

but a term .xi (cid:0) (cid:22)/2 is zero iff xi d (cid:22), so (1.6) is true iff

every xi equals the mean.

(cid:4)

1.7 proof by cases

breaking a complicated proof into cases and proving each case separately is a com-
mon, useful proof strategy. here   s an amusing example.

let   s agree that given any two people, either they have met or not. if every pair
of people in a group has met, we   ll call the group a club. if every pair of people in
a group has not met, we   ll call it a group of strangers.
theorem. every collection of 6 people includes a club of 3 people or a group of 3
strangers.
proof. the proof is by case analysis5. let x denote one of the six people. there
are two cases:

1. among 5 other people besides x, at least 3 have met x.

2. among the 5 other people, at least 3 have not met x.

now, we have to be sure that at least one of these two cases must hold,6 but that   s
easy: we   ve split the 5 people into two groups, those who have shaken hands with
x and those who have not, so one of the groups must have at least half the people.

case 1: suppose that at least 3 people did meet x.
this case splits into two subcases:

5describing your approach at the outset helps orient the reader.
6part of a case analysis argument is showing that you   ve covered all the cases. this is often
obvious, because the two cases are of the form    p     and    not p .    however, the situation above is not
stated quite so simply.

   mcs        2017/6/5     19:42     page 16     #24

16

chapter 1 what is a proof?

case 1.1: no pair among those people met each other. then these
people are a group of at least 3 strangers. the theorem holds in this
subcase.
case 1.2: some pair among those people have met each other. then
that pair, together with x, form a club of 3 people. so the theorem
holds in this subcase.

this implies that the theorem holds in case 1.

case 2: suppose that at least 3 people did not meet x.
this case also splits into two subcases:

case 2.1: every pair among those people met each other. then these
people are a club of at least 3 people. so the theorem holds in this
subcase.
case 2.2: some pair among those people have not met each other.
then that pair, together with x, form a group of at least 3 strangers. so
the theorem holds in this subcase.

this implies that the theorem also holds in case 2, and therefore holds in all cases.
(cid:4)

1.8 proof by contradiction

in a proof by contradiction, or indirect proof, you show that if a proposition were
false, then some false fact would be true. since a false fact by de   nition can   t be
true, the proposition must be true.

proof by contradiction is always a viable approach. however, as the name sug-
gests, indirect proofs can be a little convoluted, so direct proofs are generally prefer-
able when they are available.

method: in order to prove a proposition p by contradiction:

1. write,    we use proof by contradiction.   

2. write,    suppose p is false.   

3. deduce something known to be false (a logical contradiction).

4. write,    this is a contradiction. therefore, p must be true.   

   mcs        2017/6/5     19:42     page 17     #25

1.9. good proofs in practice

17

p

p

2 is irrational.

example
2 is irrational. remember that a number is ra-
we   ll prove by contradiction that
tional if it is equal to a ratio of integers   for example, 3:5 d 7=2 and 0:1111(cid:1)(cid:1)(cid:1) d
1=9 are rational numbers.
theorem 1.8.1.
proof. we use proof by contradiction. suppose the claim is false, and
2 is ratio-
nal. then we can write
squaring both sides gives 2 d n2=d 2 and so 2d 2 d n2. this implies that n is a
multiple of 2 (see problems 1.15 and 1.16). therefore n2 must be a multiple of 4.
but since 2d 2 d n2, we know 2d 2 is a multiple of 4 and so d 2 is a multiple of 2.
this implies that d is a multiple of 2.

2 as a fraction n=d in lowest terms.

so, the numerator and denominator have 2 as a common factor, which contradicts
(cid:4)

the fact that n=d is in lowest terms. thus,

p
2 must be irrational.

p

p

1.9 good proofs in practice

one purpose of a proof is to establish the truth of an assertion with absolute cer-
tainty, and mechanically checkable proofs of enormous length or complexity can
accomplish this. but humanly intelligible proofs are the only ones that help some-
one understand the subject. mathematicians generally agree that important mathe-
matical results can   t be fully understood until their proofs are understood. that is
why proofs are an important part of the curriculum.

to be understandable and helpful, more is required of a proof than just logical
correctness: a good proof must also be clear. correctness and clarity usually go
together; a well-written proof is more likely to be a correct proof, since mistakes
are harder to hide.

in practice, the notion of proof is a moving target. proofs in a professional
research journal are generally unintelligible to all but a few experts who know all
the terminology and prior results used in the proof. conversely, proofs in the    rst
weeks of a beginning course like 6.042 would be regarded as tediously long-winded
by a professional mathematician. in fact, what we accept as a good proof later in
the term will be different from what we consider good proofs in the    rst couple
of weeks of 6.042. but even so, we can offer some general tips on writing good
proofs:

state your game plan. a good proof begins by explaining the general line of rea-
soning, for example,    we use case analysis    or    we argue by contradiction.   

   mcs        2017/6/5     19:42     page 18     #26

18

chapter 1 what is a proof?

keep a linear    ow. sometimes proofs are written like mathematical mosaics, with
juicy tidbits of independent reasoning sprinkled throughout. this is not good.
the steps of an argument should follow one another in an intelligible order.

a proof is an essay, not a calculation. many students initially write proofs the way
they compute integrals. the result is a long sequence of expressions without
explanation, making it very hard to follow. this is bad. a good proof usually
looks like an essay with some equations thrown in. use complete sentences.

avoid excessive symbolism. your reader is probably good at understanding words,
but much less skilled at reading arcane mathematical symbols. use words
where you reasonably can.

revise and simplify. your readers will be grateful.

introduce notation thoughtfully. sometimes an argument can be greatly simpli-
   ed by introducing a variable, devising a special notation, or de   ning a new
term. but do this sparingly, since you   re requiring the reader to remember
all that new stuff. and remember to actually de   ne the meanings of new
variables, terms, or notations; don   t just start using them!

structure long proofs. long programs are usually broken into a hierarchy of smaller

procedures. long proofs are much the same. when your proof needed facts
that are easily stated, but not readily proved, those fact are best pulled out
as preliminary lemmas. also, if you are repeating essentially the same argu-
ment over and over, try to capture that argument in a general lemma, which
you can cite repeatedly instead.

be wary of the    obvious.    when familiar or truly obvious facts are needed in a
proof, it   s ok to label them as such and to not prove them. but remember
that what   s obvious to you may not be   and typically is not   obvious to
your reader.
most especially, don   t use phrases like    clearly    or    obviously    in an attempt
to bully the reader into accepting something you   re having trouble proving.
also, go on the alert whenever you see one of these phrases in someone else   s
proof.

finish. at some point in a proof, you   ll have established all the essential facts
you need. resist the temptation to quit and leave the reader to draw the
   obvious    conclusion. instead, tie everything together yourself and explain
why the original claim follows.

   mcs        2017/6/5     19:42     page 19     #27

1.10. references

19

creating a good proof is a lot like creating a beautiful work of art.

in fact,
mathematicians often refer to really good proofs as being    elegant    or    beautiful.   
it takes a practice and experience to write proofs that merit such praises, but to
get you started in the right direction, we will provide templates for the most useful
proof techniques.

throughout the text there are also examples of bogus proofs   arguments that
look like proofs but aren   t. sometimes a bogus proof can reach false conclusions
because of missteps or mistaken assumptions. more subtle bogus proofs reach
correct conclusions, but do so in improper ways such as circular reasoning, leaping
to unjusti   ed conclusions, or saying that the hard part of the proof is    left to the
reader.    learning to spot the    aws in improper proofs will hone your skills at seeing
how each proof step follows logically from prior steps. it will also enable you to
spot    aws in your own proofs.

the analogy between good proofs and good programs extends beyond structure.
the same rigorous thinking needed for proofs is essential in the design of criti-
cal computer systems. when algorithms and protocols only    mostly work    due
to reliance on hand-waving arguments, the results can range from problematic to
catastrophic. an early example was the therac 25, a machine that provided radia-
tion therapy to cancer victims, but occasionally killed them with massive overdoses
due to a software race condition. a further example of a dozen years ago (august
2004) involved a single faulty command to a computer system used by united and
american airlines that grounded the entire    eet of both companies   and all their
passengers!

it is a certainty that we   ll all one day be at the mercy of critical computer systems
designed by you and your classmates. so we really hope that you   ll develop the
ability to formulate rock-solid logical arguments that a system actually does what
you think it should do!

1.10 references

[14], [1], [49], [18], [22]

   mcs        2017/6/5     19:42     page 20     #28

20

chapter 1 what is a proof?

problems for section 1.1

class problems
problem 1.1.
albert announces to his class that he plans to surprise them with a quiz sometime
next week.

his students    rst wonder if the quiz could be on friday of next week. they
reason that it can   t: if albert didn   t give the quiz before friday, then by midnight
thursday, they would know the quiz had to be on friday, and so the quiz wouldn   t
be a surprise any more.

next the students wonder whether albert could give the surprise quiz thursday.
they observe that if the quiz wasn   t given before thursday, it would have to be
given on the thursday, since they already know it can   t be given on friday. but
having    gured that out, it wouldn   t be a surprise if the quiz was on thursday either.
similarly, the students reason that the quiz can   t be on wednesday, tuesday, or
monday. namely, it   s impossible for albert to give a surprise quiz next week. all
the students now relax, having concluded that albert must have been bluf   ng. and
since no one expects the quiz, that   s why, when albert gives it on tuesday next
week, it really is a surprise!

what, if anything, do you think is wrong with the students    reasoning?

problem 1.2.
the pythagorean theorem says that if a and b are the lengths of the sides of a right
triangle, and c is the length of its hypotenuse, then
a2 c b2 d c2:

this theorem is so fundamental and familiar that we generally take it for granted.
but just being familiar doesn   t justify calling it    obvious      witness the fact that
people have felt the need to devise different proofs of it for milllenia.7
in this
problem we   ll examine a particularly simple    proof without words    of the theorem.
here   s the strategy. suppose you are given four different colored copies of a
right triangle with sides of lengths a, b and c, along with a suitably sized square,
as shown in figure 1.1.
(a) you will    rst arrange the square and four triangles so they form a c (cid:2) c square.
from this arrangement you will see that the square is .b (cid:0) a/ (cid:2) .b (cid:0) a/.

7over a hundred different proofs are listed on the mathematics website http://www.cut-the-

knot.org/pythagoras/.

   mcs        2017/6/5     19:42     page 21     #29

1.10. references

21

figure 1.1 right triangles and square.

(b) you will then arrange the same shapes so they form two squares, one a (cid:2) a
and the other b (cid:2) b.
you know that the area of an s (cid:2) s square is s2. so appealing to the principle that

area is preserved by rearranging,

you can now conclude that a2 c b2 d c2, as claimed.
this really is an elegant and convincing proof of the pythagorean theorem, but it
has some worrisome features. one concern is that there might be something special
about the shape of these particular triangles and square that makes the rearranging
possible   for example, suppose a d b?
(c) how would you respond to this concern?

(d) another concern is that a number of facts about right triangles, squares and
lines are being implicitly assumed in justifying the rearrangements into squares.
enumerate some of these assumed facts.

problem 1.3.
what   s going on here?!

1 dp

.(cid:0)1/.(cid:0)1/ d p(cid:0)1

p(cid:0)1 d(cid:16)p(cid:0)1

 2 d (cid:0)1:

1 d p

(a) precisely identify and explain the mistake(s) in this bogus proof.
(b) prove (correctly) that if 1 d (cid:0)1, then 2 d 1.

c b a    mcs        2017/6/5     19:42     page 22     #30

22

chapter 1 what is a proof?

(c) every positive real number r has two square roots, one positive and the other
r refers to the positive
negative. the standard convention is that the expression
square root of r. assuming familiar properties of multiplication of real numbers,
prove that for positive real numbers r and s,

p

p
rs d p

p

r

s:

problem 1.4.
identify exactly where the bugs are in each of the following bogus proofs.8
(a) bogus claim: 1=8 > 1=4:

bogus proof.

3 > 2

3 log10.1=2/ > 2 log10.1=2/
log10.1=2/3 > log10.1=2/2

.1=2/3 > .1=2/2;

and the claim now follows by the rules for multiplying fractions.
(b) bogus proof : 1   d $0:01 d .$0:1/2 d .10  /2 d 100   d $1: (cid:4)
(c) bogus claim: if a and b are two equal real numbers, then a d 0.

bogus proof.

a d b
a2 d ab

a2 (cid:0) b2 d ab (cid:0) b2
.a (cid:0) b/.a c b/ d .a (cid:0) b/b
a c b d b
a d 0:

8from [48], twenty years before the blackboard by michael stueben and diane sandford

(cid:4)

(cid:4)

   mcs        2017/6/5     19:42     page 23     #31

1.10. references

23

problem 1.5.
it   s a fact that the arithmetic mean is at least as large as the geometric mean,
namely,

p

(cid:21)

ab

a c b

2

for all nonnegative real numbers a and b. but there   s something objectionable
about the following proof of this fact. what   s the objection, and how would you    x
it?

bogus proof.

2

a c b

p
   (cid:21)
ab;
p
   (cid:21) 2
   (cid:21) 4ab;
   (cid:21) 0;
.a (cid:0) b/2 (cid:21) 0

a c b
a2 c 2ab c b2
a2 (cid:0) 2ab c b2

ab;

so

so

so

so
which we know is true.

the last statement is true because a (cid:0) b is a real number, and the square of a real
(cid:4)
number is never negative. this proves the claim.

practice problems
problem 1.6.
why does the    surprise    paradox of problem 1.1 present a philosophical problem
but not a mathematical one?

problems for section 1.5

homework problems
problem 1.7.
show that log7 n is either an integer or irrational, where n is a positive integer. use
whatever familiar facts about integers and primes you need, but explicitly state such
facts.

   mcs        2017/6/5     19:42     page 24     #32

24

chapter 1 what is a proof?

problems for section 1.7

practice problems
problem 1.8.
prove by cases that

for all real numbers r; s.

max.r; s/ c min.r; s/ d r c s

(*)

class problems
problem 1.9.
if we raise an irrational number to an irrational power, can the result be rational?
show that it can by considering

2 and arguing by cases.

p
2

p

problem 1.10.
prove by cases that

jr c sj   jrj c jsj

(1)

for all real numbers r; s.9

homework problems
problem 1.11. (a) suppose that

a c b c c d d;

where a; b; c; d are nonnegative integers.
let p be the assertion that d is even. let w be the assertion that exactly one among
a; b; c are even, and let t be the assertion that all three are even.
prove by cases that

(b) now suppose that

p iff   w or t   :

w2 c x2 c y2 d z2;

9the absolute value jrj of r equals whichever of r or (cid:0)r is not negative.

   mcs        2017/6/5     19:42     page 25     #33

1.10. references

25

where w; x; y; z are nonnegative integers. let p be the assertion that z is even, and
let r be the assertion that all three of w; x; y are even. prove by cases that

hint: an odd number equals 2m c 1 for some integer m, so its square equals
4.m2 c m/ c 1.

p iff r:

exam problems
problem 1.12.
prove that there is an irrational number a such that a

p
hint: consider 3

2

p
3 and argue by cases.

p

3 is rational.

problems for section 1.8

practice problems
problem 1.13.
prove that for any n > 0, if an is even, then a is even.

hint: contradiction.

problem 1.14.

prove that if a (cid:1) b d n, then either a or b must be   p

n, where a; b, and n are

nonnegative real numbers. hint: by contradiction, section 1.8.

problem 1.15.
let n be a nonnegative integer.
(a) explain why if n2 is even   that is, a multiple of 2   then n is even.

(b) explain why if n2 is a multiple of 3, then n must be a multiple of 3.

problem 1.16.
give an example of two distinct positive integers m; n such that n2 is a multiple of
m, but n is not a multiple of m. how about having m be less than n?

   mcs        2017/6/5     19:42     page 26     #34

26

chapter 1 what is a proof?

class problems
problem 1.17.
how far can you generalize the proof of theorem 1.8.1 that
example, how about

p

3?

p

2 is irrational? for

problem 1.18.
prove that log4 6 is irrational.

problem 1.19.
prove by contradiction that

p
hint: .

3 c p

p
3 c p
3 (cid:0) p

2/

p

2/.

2 is irrational.

problem 1.20.
here is a generalization of problem 1.17 that you may not have thought of:

lemma. let the coef   cients of the polynomial

a0 c a1x c a2x2 c (cid:1)(cid:1)(cid:1) c am(cid:0)1xm(cid:0)1 c xm

be integers. then any real root of the polynomial is either integral or irrational.

p
(a) explain why the lemma immediately implies that m
k is irrational whenever
k is not an mth power of some integer.

(b) carefully prove the lemma.
you may    nd it helpful to appeal to:
fact. if a prime p is a factor of some power of an integer, then it is a factor of that
integer.
you may assume this fact without writing down its proof, but see if you can explain
why it is true.

exam problems
problem 1.21.
prove that log9 12 is irrational.

   mcs        2017/6/5     19:42     page 27     #35

1.10. references

27

problem 1.22.
prove that log12 18 is irrational.

72 is irrational.)

p
problem 1.23.
a familiar proof that 3
72 is irrational depends on the fact that a certain equation
among those below is unsatis   able by integers a; b > 0. note that more than one
p
is unsatis   able. indicate the equation that would appear in the proof, and explain
why it is unsatis   able. (do not assume that 3
i. a2 d 72 c b2
ii. a3 d 72 c b3
iii. a2 d 72b2
iv. a3 d 72b3
v. a3 d 73b3
vi. .ab/3 d 72

homework problems
problem 1.24.
the fact that that there are irrational numbers a; b such that ab is rational was
proved in problem 1.9 by cases. unfortunately, that proof was nonconstructive: it
didn   t reveal a speci   c pair a; b with this property. but in fact, it   s easy to do this:
2 is irrational, and ab d 3 by de   nition. finish the proof that

let a wwd p
we know a d p

2 and b wwd 2 log2 3.

these values for a; b work, by showing that 2 log2 3 is irrational.

problem 1.25.
here is a different proof that
ical monthly, v.116, #1, jan. 2009, p.69:

p
2 is irrational, taken from the american mathemat-

proof. suppose for the sake of contradiction that
least integer q > 0 such that

(cid:16)p

 
2 (cid:0) 1

0

p
2 is rational, and choose the
0 wwd
0
q
(cid:4)

q is a nonnegative integer. let q
2 (cid:0) 1

(cid:16)p

 

q. clearly 0 < q

< q. but an easy computation shows that

is a nonnegative integer, contradicting the minimality of q.

(cid:16)p

 

2 (cid:0) 1

   mcs        2017/6/5     19:42     page 28     #36

28

chapter 1 what is a proof?

(a) this proof was written for an audience of college teachers, and at this point it
is a little more concise than desirable. write out a more complete version which
includes an explanation of each step.

(b) now that you have justi   ed the steps in this proof, do you have a preference
for one of these proofs over the other? why? discuss these questions with your
teammates for a few minutes and summarize your team   s answers on your white-
board.

problem 1.26.
for n d 40, the value of polynomial p.n/ wwd n2 c n c 41 is not prime, as noted
in section 1.1. but we could have predicted based on general principles that no
nonconstant polynomial can generate only prime numbers.
in particular, let q.n/ be a polynomial with integer coef   cients, and let cwwd q.0/
be the constant term of q.
(a) verify that q.cm/ is a multiple of c for all m 2 z.
(b) show that if q is nonconstant and c > 1, then as n ranges over the nonnegative
integers n there are in   nitely many q.n/ 2 z that are not primes.
hint: you may assume the familiar fact that the magnitude of any nonconstant
polynomial q.n/ grows unboundedly as n grows.
(c) conclude that for every nonconstant polynomial q there must be an n 2 n
such that q.n/ is not prime. hint: only one easy case remains.

   mcs        2017/6/5     19:42     page 29     #37

2

the well ordering principle

every nonempty set of nonnegative integers has a smallest element.

this statement is known as the well ordering principle (wop). do you believe
it? seems sort of obvious, right? but notice how tight it is: it requires a nonempty
set   it   s false for the empty set which has no smallest element because it has no
elements at all. and it requires a set of nonnegative integers   it   s false for the
set of negative integers and also false for some sets of nonnegative rationals   for
example, the set of positive rationals. so, the well ordering principle captures
something special about the nonnegative integers.

while the well ordering principle may seem obvious, it   s hard to see offhand
why it is useful. but in fact, it provides one of the most important proof rules in
discrete mathematics. in this chapter, we   ll illustrate the power of this proof method
with a few simple examples.

2.1 well ordering proofs

p

we actually have already taken the well ordering principle for granted in proving
2 is irrational. that proof assumed that for any positive integers m and n,
that
0
0 where
the fraction m=n can be written in lowest terms, that is, in the form m
0 are positive integers with no common prime factors. how do we know
0 and n
m
this is always possible?

=n

suppose to the contrary that there are positive integers m and n such that the
fraction m=n cannot be written in lowest terms. now let c be the set of positive
integers that are numerators of such fractions. then m 2 c , so c is nonempty. by
wop, there must be a smallest integer m0 2 c . so by de   nition of c , there is an
integer n0 > 0 such that

the fraction m0
n0

cannot be written in lowest terms.

this means that m0 and n0 must have a common prime factor, p > 1. but

m0=p
n0=p

d m0
n0

;

   mcs        2017/6/5     19:42     page 30     #38

30

chapter 2 the well ordering principle

so any way of expressing the left-hand fraction in lowest terms would also work for
m0=n0, which implies

the fraction m0=p
n0=p

cannot be in written in lowest terms either.

so by de   nition of c , the numerator m0=p is in c . but m0=p < m0, which
contradicts the fact that m0 is the smallest element of c .

since the assumption that c is nonempty leads to a contradiction, it follows that
c must be empty. that is, that there are no numerators of fractions that can   t be
written in lowest terms, and hence there are no such fractions at all.

we   ve been using the well ordering principle on the sly from early on!

2.2 template for wop proofs

more generally, there is a standard way to use well ordering to prove that some
property, p .n/ holds for every nonnegative integer n. here is a standard way to
organize such a well ordering proof:

to prove that    p .n/ is true for all n 2 n    using the well ordering principle:
(cid:15) de   ne the set c of counterexamples to p being true. speci   cally, de   ne

c wwd fn 2 n j not.p .n// is trueg:

(the notation fn j q.n/g means    the set of all elements n for which q.n/
is true.    see section 4.1.4.)
(cid:15) assume for proof by contradiction that c is nonempty.
(cid:15) by wop, there will be a smallest element n in c .
(cid:15) reach a contradiction somehow   often by showing that p .n/ is actually
true or by showing that there is another member of c that is smaller than
n. this is the open-ended part of the proof task.
(cid:15) conclude that c must be empty, that is, no counterexamples exist.

(cid:4)

2.2.1 summing the integers
let   s use this template to prove

   mcs        2017/6/5     19:42     page 31     #39

2.2. template for wop proofs

theorem 2.2.1.

1 c 2 c 3 c (cid:1)(cid:1)(cid:1) c n d n.n c 1/=2

for all nonnegative integers n.

31

(2.1)

first, we   d better address a couple of ambiguous special cases before they trip us

up:

(cid:15) if n d 1, then there is only one term in the summation, and so 1 c 2 c 3 c
(cid:1)(cid:1)(cid:1)c n is just the term 1. don   t be misled by the appearance of 2 and 3 or by
the suggestion that 1 and n are distinct terms!
(cid:15) if n d 0, then there are no terms at all in the summation. by convention, the
sum in this case is 0.

so, while the three dots notation, which is called an ellipsis, is convenient, you
have to watch out for these special cases where the notation is misleading.
in
fact, whenever you see an ellipsis, you should be on the lookout to be sure you
understand the pattern, watching out for the beginning and the end.

we could have eliminated the need for guessing by rewriting the left side of (2.1)

with summation notation:

nx

id1

i

or x

i:

1 i n

both of these expressions denote the sum of all values taken by the expression to
the right of the sigma as the variable i ranges from 1 to n. both expressions make
it clear what (2.1) means when n d 1. the second expression makes it clear that
when n d 0, there are no terms in the sum, though you still have to know the
convention that a sum of no numbers equals 0 (the product of no numbers is 1, by
the way).

ok, back to the proof:

proof. by contradiction. assume that theorem 2.2.1 is false. then, some nonneg-
ative integers serve as counterexamples to it. let   s collect them in a set:

c wwd fn 2 n j 1 c 2 c 3 c (cid:1)(cid:1)(cid:1) c n    n.n c 1/

g:

2

assuming there are counterexamples, c is a nonempty set of nonnegative integers.
so, by wop, c has a minimum element, which we   ll call c. that is, among the
nonnegative integers, c is the smallest counterexample to equation (2.1).
since c is the smallest counterexample, we know that (2.1) is false for n d c but
true for all nonnegative integers n < c. but (2.1) is true for n d 0, so c > 0. this

   mcs        2017/6/5     19:42     page 32     #40

32

chapter 2 the well ordering principle

means c (cid:0) 1 is a nonnegative integer, and since it is less than c, equation (2.1) is
true for c (cid:0) 1. that is,

1 c 2 c 3 c (cid:1)(cid:1)(cid:1) c .c (cid:0) 1/ d .c (cid:0) 1/c

:

2

but then, adding c to both sides, we get

1 c 2 c 3 c (cid:1)(cid:1)(cid:1) c .c (cid:0) 1/ c c d .c (cid:0) 1/c

2

c c d c2 (cid:0) c c 2c

2

d c.c c 1/

2

;

which means that (2.1) does hold for c, after all! this is a contradiction, and we
(cid:4)
are done.

2.3 factoring into primes

we   ve previously taken for granted the prime factorization theorem, also known
as the unique factorization theorem and the fundamental theorem of arithmetic,
which states that every integer greater than one has a unique1 expression as a prod-
uct of prime numbers. this is another of those familiar mathematical facts which
are taken for granted but are not really obvious on closer inspection. we   ll prove
the uniqueness of prime factorization in a later chapter, but well ordering gives an
easy proof that every integer greater than one can be expressed as some product of
primes.
theorem 2.3.1. every positive integer greater than one can be factored as a prod-
uct of primes.

proof. the proof is by wop.

let c be the set of all integers greater than one that cannot be factored as a
product of primes. we assume c is not empty and derive a contradiction.
if c is not empty, there is a least element n 2 c by wop. this n can   t be prime,
because a prime by itself is considered a (length one) product of primes, and no
such products are in c .
so n must be a product of two integers a and b where 1 < a; b < n. since a
and b are smaller than the smallest element in c , we know that a; b     c . in other
words, a can be written as a product of primes p1p2 (cid:1)(cid:1)(cid:1) pk and b as a product of
primes q1 (cid:1)(cid:1)(cid:1) ql. therefore, n d p1 (cid:1)(cid:1)(cid:1) pkq1 (cid:1)(cid:1)(cid:1) ql can be written as a product of
primes, contradicting the claim that n 2 c . our assumption that c is not empty
(cid:4)
must therefore be false.

1. . . unique up to the order in which the prime factors appear

   mcs        2017/6/5     19:42     page 33     #41

2.4. well ordered sets

33

2.4 well ordered sets

a set of real numbers is well ordered when each of its nonempty subsets has a
minimum element. the well ordering principle says that the set of nonnegative
integers is well ordered, but so are lots of other sets of real numbers according to
this more general form of wop. a simple example would be the set rn of numbers
of the form rn, where r is a positive real number and n 2 n. (why does this work?)
well ordering commonly comes up in computer science as a method for proving
that computations won   t run forever. the idea is to assign a value to each successive
step of a computation so that the values get smaller at every step. if the values are
all from a well ordered set, then the computation can   t run forever, because if it did,
the values assigned to its successive steps would de   ne a subset with no minimum
element. you   ll see several examples of this technique applied in chapter 6 to prove
that various state machines will eventually terminate.

notice that a set may have a minimum element but not be well ordered. the set
of nonnegative rational numbers is an example: it has a minimum element zero,
but it also has nonempty subsets that don   t have minimum elements   the positive
rationals, for example.

the following theorem is a tiny generalization of the well ordering principle.

theorem 2.4.1. for any nonnegative integer n the set of integers greater than or
equal to (cid:0)n is well ordered.
this theorem is just as obvious as the well ordering principle, and it would
be harid113ss to accept it as another axiom. but repeatedly introducing axioms gets
worrisome after a while, and it   s worth noticing when a potential axiom can actually
be proved. this time we can easily prove theorem 2.4.1 using the well ordering
principle:
proof. let s be any nonempty set of integers (cid:21) (cid:0)n. now add n to each of the
elements in s; let   s call this new set s c n. now s c n is a nonempty set of
nonnegative integers, and so by the well ordering principle, it has a minimum
element m. but then it   s easy to see that m (cid:0) n is the minimum element of s. (cid:4)
the de   nition of well ordering states that every subset of a well ordered set
is well ordered, and this yields two convenient, immediate corollaries of theo-
rem 2.4.1:

de   nition 2.4.2. a lower bound (respectively, upper bound) for a set s of real
numbers is a number b such that b   s (respectively, b (cid:21) s) for every s 2 s.

   mcs        2017/6/5     19:42     page 34     #42

34

chapter 2 the well ordering principle

note that a lower or upper bound of set s is not required to be in the set.

corollary 2.4.3. any set of integers with a lower bound is well ordered.
proof. a set of integers with a lower bound b 2 r will also have the integer n d
bbc as a lower bound, where bbc, called the    oor of b, is gotten by rounding down
(cid:4)
b to the nearest integer. so theorem 2.4.1 implies the set is well ordered.

corollary 2.4.3 leads to another principle we usually tahe for granted:

corollary 2.4.4. any nonempty set of integers with an upper bound has a maximum
element.
proof. suppose a set s of integers has an upper bound b 2 r. now multiply each
element of s by -1; let   s call this new set of elements (cid:0)s. now, of course, (cid:0)b is a
lower bound of (cid:0)s. so (cid:0)s has a minimum element (cid:0)m by corollary 2.4.3. but
(cid:4)
then it   s easy to see that m is the maximum element of s.

finite sets are yet another routine example of well ordered set.

lemma 2.4.5. every nonempty    nite set of real numbers is well ordered.

proof. since subsets of    nite sets are    nite, it is suf   cient to prove that every    nite
set has a minimum element.

we prove this using the wop on the size of    nite sets.
let c be the set of positive integers n such that some set of size n has no mini-
mum element. assume for the sake of contradiction that c is nonempty. by wop,
there is a minimum integer m 2 c .
every set of size one obviously has a minimum element, so m (cid:21) 2.
now let f be a set of m real numbers. we will reach a contradiction by showing
that f has a minimum element.
so let r0 be an element of f . since m (cid:21) 2, removing r0 from f leaves a
0 smaller than m. since m is the smallest element of c , we know
nonempty set f
0 has a minimum element r1. but that means the smaller of r0 and r1 is the
f
(cid:4)
minimum element of f .

2.4.1 a different well ordered set (optional)
the set f of fractions that can be expressed in the form n=.n c 1/:

0

1

;

1

2

;

2

3

;

3

4

; : : : ;

n

n c 1

; : : : ;

is well ordered. the minimum element of any nonempty subset of f is simply the
one with the minimum numerator when expressed in the form n=.n c 1/.

   mcs        2017/6/5     19:42     page 35     #43

2.4. well ordered sets

35

now we can de   ne a very different well ordered set by adding nonnegative inte-
gers to numbers in f. that is, we take all the numbers of the form nc f where n is
a nonnegative integer and f is a number in f. let   s call this set of numbers   you
guessed it   n c f. there is a simple recipe for    nding the minimum number in
any nonempty subset of n c f, which explains why this set is well ordered:
lemma 2.4.6. n c f is well ordered.
proof. given any nonempty subset s of nc f, look at all the nonnegative integers
n such that n c f is in s for some f 2 f. this is a nonempty set nonnegative
integers, so by the wop, there is a minimum such integer; call it ns.
by de   nition of ns, there is some f 2 f such that ns c f is in the set s. so
the set all fractions f such that ns c f 2 s is a nonempty subset of f, and since
f is well ordered, this nonempty set contains a minimum element; call it fs. now
it easy to verify that ns c fs is the minimum element of s (problem 2.20).
(cid:4)
the set n c f is signi   cantly different from the examples above, and it pro-
vides a hint of the rich collection of well ordered sets. in all the earlier examples,
each element was greater than only a    nite number of other elements. in n c f,
every element greater than or equal to 1 can be the    rst element in strictly decreas-
ing sequences of elements of arbitrary    nite length. for example, the following
decreasing sequences of elements in n c f all start with 1:

1; 0:
1; 1
1; 2
1; 3

2 ; 0:
3 ; 1
2 ; 0:
3 ; 1
4 ; 2
:::

2 ; 0:

nevertheless, since n c f is well ordered, it is impossible to    nd an in   nite de-
creasing sequence of elements in n c f, because the set of elements in such a
sequence would have no minimum.

problems for section 2.2

practice problems
problem 2.1.
for practice using the well ordering principle,    ll in the template of an easy to

   mcs        2017/6/5     19:42     page 36     #44

36

chapter 2 the well ordering principle

prove fact: every amount of postage that can be assembled using only 10 cent and
15 cent stamps is divisible by 5.
in particular, let the notation    j j k    indicate that integer j is a divisor of integer
k, and let s.n/ mean that exactly n cents postage can be assembled using only 10
and 15 cent stamps. then the proof shows that

s.n/ implies 5 j n;

for all nonnegative integers n:

(2.2)

fill in the missing portions (indicated by    . . .    ) of the following proof of (2.2).

let c be the set of counterexamples to (2.2), namely

c wwd fn j : : :g

assume for the purpose of obtaining a contradiction that c is nonempty.
then by the wop, there is a smallest number m 2 c . this m must be
positive because . . . .
but if s.m/ holds and m is positive, then s.m (cid:0) 10/ or s.m (cid:0) 15/
must hold, because . . . .
so suppose s.m (cid:0) 10/ holds. then 5 j .m (cid:0) 10/, because. . .
but if 5 j .m(cid:0) 10/, then obviously 5 j m, contradicting the fact that m
is a counterexample.
next, if s.m(cid:0) 15/ holds, we arrive at a contradiction in the same way.
since we get a contradiction in both cases, we conclude that. . .
which proves that (2.2) holds.

problem 2.2.
the fibonacci numbers f .0/; f .1/; f .2/; : : : are de   ned as follows:

8  <  :0

1

f .n/ wwd

f .n (cid:0) 1/ c f .n (cid:0) 2/

if n d 0;
if n d 1;
if n > 1:

exactly which sentence(s) in the following bogus proof contain logical errors?

explain.

false claim. every fibonacci number is even.

   mcs        2017/6/5     19:42     page 37     #45

2.4. well ordered sets

37

bogus proof. let all the variables n; m; k mentioned below be nonnegative integer
valued.

1. the proof is by the wop.

2. let ef.n/ mean that f .n/ is even.

3. let c be the set of counterexamples to the assertion that ef.n/ holds for all

n 2 n, namely,

c wwd fn 2 n j not.ef.n//g:

4. we prove by contradiction that c is empty. so assume that c is not empty.
5. by wop, there is a least nonnegative integer m 2 c .
6. then m > 0, since f .0/ d 0 is an even number.
7. since m is the minimum counterexample, f .k/ is even for all k < m.
8. in particular, f .m (cid:0) 1/ and f .m (cid:0) 2/ are both even.
9. but by the de   nition, f .m/ equals the sum f .m (cid:0) 1/ c f .m (cid:0) 2/ of two

even numbers, and so it is also even.

10. that is, ef.m/ is true.

11. this contradicts the condition in the de   nition of m that not.ef.m// holds.

12. this contradition implies that c must be empty. hence, f .n/ is even for all

n 2 n.

(cid:4)

problem 2.3.
in chapter 2, the well ordering principle was used to show that all positive rational
numbers can be written in    lowest terms,    that is, as a ratio of positive integers with
no common factor prime factor. below is a different proof which also arrives at this
correct conclusion, but this proof is bogus. identify every step at which the proof
makes an unjusti   ed id136.

bogus proof. suppose to the contrary that there was positive rational q such that q
cannot be written in lowest terms. now let c be the set of such rational numbers
that cannot be written in lowest terms. then q 2 c , so c is nonempty. so there

   mcs        2017/6/5     19:42     page 38     #46

38

chapter 2 the well ordering principle

must be a smallest rational q0 2 c . so since q0=2 < q0, it must be possible to
express q0=2 in lowest terms, namely,

q0
2

d m
n

(2.3)

for positive integers m; n with no common prime factor. now we consider two
cases:

case 1: [n is odd]. then 2m and n also have no common prime factor, and

therefore

q0 d 2 (cid:1)(cid:16) m

  d 2m

n

n

expresses q0 in lowest terms, a contradiction.

case 2: [n is even]. any common prime factor of m and n=2 would also be a
common prime factor of m and n. therefore m and n=2 have no common prime
factor, and so

q0 d m
n=2
expresses q0 in lowest terms, a contradiction.

since the assumption that c is nonempty leads to a contradiction, it follows that
(cid:4)

c is empty   that is, there are no counterexamples.

class problems
problem 2.4.
use the well ordering principle 2 to prove that

nx

kd0
for all nonnegative integers n.

k2 d n.n c 1/.2n c 1/

6

:

(2.4)

problem 2.5.
use the well ordering principle to prove that there is no solution over the positive
integers to the equation:

4a3 c 2b3 d c3:

2proofs by other methods such as induction or by appeal to known formulas for similar sums will

not receive full credit.

   mcs        2017/6/5     19:42     page 39     #47

2.4. well ordered sets

39

problem 2.6.
you are given a series of envelopes, respectively containing 1; 2; 4; : : : ; 2m dollars.
de   ne

property m: for any nonnegative integer less than 2mc1, there is a
selection of envelopes whose contents add up to exactly that number
of dollars.

use the well ordering principle (wop) to prove that property m holds for all
nonnegative integers m.

hint: consider two cases:    rst, when the target number of dollars is less than

2m and second, when the target is at least 2m.

homework problems
problem 2.7.
use the well ordering principle to prove that any integer greater than or equal to 8
can be represented as the sum of nonnegative integer multiples of 3 and 5.

problem 2.8.
use the well ordering principle to prove that any integer greater than or equal to
50 can be represented as the sum of nonnegative integer multiples of 7, 11, and 13.

problem 2.9.
euler   s conjecture in 1769 was that there are no positive integer solutions to the
equation

a4 c b4 c c4 d d 4:

integer values for a; b; c; d that do satisfy this equation were    rst discovered in
1986. so euler guessed wrong, but it took more than two centuries to demonstrate
his mistake.

now let   s consider lehman   s equation, similar to euler   s but with some coef   -

cients:

8a4 c 4b4 c 2c4 d d 4

(2.5)

prove that lehman   s equation (2.5) really does not have any positive integer

solutions.

hint: consider the minimum value of a among all possible solutions to (2.5).

   mcs        2017/6/5     19:42     page 40     #48

40

chapter 2 the well ordering principle

problem 2.10.
use the well ordering principle to prove that
n   3n=3

for every nonnegative integer n.
hint: verify (2.6) for n   4 by explicit calculation.

(2.6)

problem 2.11.
a winning con   guration in the game of mini-tetris is a complete tiling of a 2 (cid:2) n
board using only the three shapes shown below:

for example, here are several possible winning con   gurations on a 2 (cid:2) 5 board:

(a) let tn denote the number of different winning con   gurations on a 2(cid:2)n board.
determine the values of t1, t2 and t3.
(b) express tn in terms of tn(cid:0)1 and tn(cid:0)2 for n > 2.
(c) use the well ordering principle to prove that the number of winning con   gu-
rations on a 2 (cid:2) n mini-tetris board is:3

tn d 2nc1 c .(cid:0)1/n

3

(*)

problem 2.12.
mini-tetris is a game whose objective is to provide a complete    tiling    of a 2 (cid:2) n
board using tiles of speci   ed shapes. in this problem we consider the following set
of    ve tiles:

3a good question is how someone came up with equation (*) in the    rst place. a simple well

ordering proof gives no hint about this, but it should be absolutely convincing anyway.

   mcs        2017/6/5     19:42     page 41     #49

2.4. well ordered sets

41

for example, there are two possible tilings of a 2 (cid:2) 1 board:

also, here are three tilings for a 2 (cid:2) 2 board:

note that tiles may not be rotated, which is why the second and third of the above
tilings count as different, even though one is a 180o rotation of the other. (a 90o
degree rotation of these shapes would not count as a tiling at all.)
(a) there are four more 2(cid:2) 2 tilings in addition to the three above. what are they?
let tn denote the number of different tilings of a 2 (cid:2) n board. we know that
t1 d 2 and t2 d 7. also, t0 d 1 because there is exactly one way to tile a 2 (cid:2) 0
board   don   t use any tiles.
(b) tn can be speci   ed in terms of tn(cid:0)1 and tn(cid:0)2 as follows:

tn d 2tn(cid:0)1 c 3tn(cid:0)2

(2.7)

for n (cid:21) 2.
brie   y explain how to justify this equation.

   mcs        2017/6/5     19:42     page 42     #50

42

chapter 2 the well ordering principle

(c) use the well ordering principle to prove that for n (cid:21) 0, the number tn of
tilings of a 2 (cid:2) n mini-tetris board is:

3nc1 c .(cid:0)1/n

4

:

exam problems
problem 2.13.
except for an easily repaired omission, the following proof using the well ordering
principle shows that every amount of postage that can be paid exactly using only
10 cent and 15 cent stamps, is divisible by 5.
namely, let the notation    j j k    indicate that integer j is a divisor of integer k,
and let s.n/ mean that exactly n cents postage can be assembled using only 10 and
15 cent stamps. then the proof shows that

s.n/ implies 5 j n;

for all nonnegative integers n:

(2.8)

fill in the missing portions (indicated by    . . .    ) of the following proof of (2.8), and
at the end, identify the minor mistake in the proof and how to    x it.

let c be the set of counterexamples to (2.8), namely
c wwd fn j s.n/ and not.5 j n/g

assume for the purpose of obtaining a contradiction that c is nonempty.
then by the wop, there is a smallest number m 2 c . then s.m(cid:0) 10/
or s.m(cid:0) 15/ must hold, because the m cents postage is made from 10
and 15 cent stamps, so we remove one.
so suppose s.m (cid:0) 10/ holds. then 5 j .m (cid:0) 10/, because. . .
but if 5 j .m (cid:0) 10/, then 5 j m, because. . .
contradicting the fact that m is a counterexample.
next suppose s.m (cid:0) 15/ holds. then the proof for m (cid:0) 10 carries
over directly for m (cid:0) 15 to yield a contradiction in this case as well.
since we get a contradiction in both cases, we conclude that c must
be empty. that is, there are no counterexamples to (2.8), which proves
that (2.8) holds.

the proof makes an implicit assumption about the value of m. state the assump-

tion and justify it in one sentence.

   mcs        2017/6/5     19:42     page 43     #51

2.4. well ordered sets

43

problem 2.14. (a) prove using the well ordering principle that, using 6  , 14  , and
21   stamps, it is possible to make any amount of postage over 50  . to save time,
you may specify assume without proof that 50  , 51  , . . . 100   are all makeable, but
you should clearly indicate which of these assumptions your proof depends on.

(b) show that 49   is not makeable.

problem 2.15.
we   ll use the well ordering principle to prove that for every positive integer n, the
sum of the    rst n odd numbers is n2, that is,

n(cid:0)1x
.2i c 1/ d n2;

id0

for all n > 0.

assume to the contrary that equation (2.9) failed for some positive integer n. let

m be the least such number.
(a) why must there be such an m?
(b) explain why m (cid:21) 2.
(c) explain why part (b) implies that

(2.9)

(2.10)

(d) what term should be added to the left-hand side of (2.10) so the result equals

m(cid:0)1x

id1

.2.i (cid:0) 1/ c 1/ d .m (cid:0) 1/2:
mx

.2.i (cid:0) 1/ c 1/   

id1

(e) conclude that equation (2.9) holds for all positive integers n.

problem 2.16.
use the well ordering principle (wop) to prove that

2 c 4 c (cid:1)(cid:1)(cid:1) c 2n d n.n c 1/

(2.11)

for all n > 0.

   mcs        2017/6/5     19:42     page 44     #52

44

chapter 2 the well ordering principle

problem 2.17.
prove by the well ordering principle that for all nonnegative integers, n:

03 c 13 c 23 c (cid:1)(cid:1)(cid:1) c n3 d  n.n c 1/

 2

:

(2.12)

2

problem 2.18.
use the well ordering principle to prove that

1 (cid:1) 2 c 2 (cid:1) 3 c 3 (cid:1) 4 c (cid:1)(cid:1)(cid:1) c n.n c 1/ d n.n c 1/.n c 2/

(*)

3

for all integers n (cid:21) 1.

problem 2.19.
say a number of cents is makeable if it is the value of some set of 6 cent and 15
cent stamps. use the well ordering principle to show that every integer that is a
multiple of 3 and greater than or equal to twelve is makeable.

problems for section 2.4

homework problems
problem 2.20.
complete the proof of lemma 2.4.6 by showing that the number ns c fs is the
minimum element in s.

practice problems
problem 2.21.
indicate which of the following sets of numbers have a minimum element and
which are well ordered. for those that are not well ordered, give an example of
a subset with no minimum element.

(a) the integers (cid:21) (cid:0)p
(b) the rational numbers (cid:21) p

2.

2.

(c) the set of rationals of the form 1=n where n is a positive integer.

   mcs        2017/6/5     19:42     page 45     #53

2.4. well ordered sets

45

(d) the set g of rationals of the form m=n where m; n > 0 and n   g, where g
is a googol 10100.
(e) the set f of fractions of the form n=.n c 1/:

0

1

;

1

2

;

2

3

;

3

4

; : : : :

(f) let w wwd n [ f be the set consisting of the nonnegative integers along with
all the fractions of the form n=.n c 1/. describe a length 5 decreasing sequence of
elements of w starting with 1,. . . length 50 decreasing sequence,. . . length 500.

problem 2.22.
use the well ordering principle to prove that every    nite, nonempty set of real
numbers has a minimum element.

class problems
problem 2.23.
prove that a set r of real numbers is well ordered iff there is no in   nite decreasing
sequence of numbers r. in other words, there is no set of numbers ri 2 r such
that

r0 > r1 > r2 > : : : :

(2.13)

   mcs        2017/6/5     19:42     page 46     #54

3

   mcs        2017/6/5     19:42     page 47     #55

logical formulas
it is amazing that people manage to cope with all the ambiguities in the english
language. here are some sentences that illustrate the issue:
(cid:15)    you may have cake, or you may have ice cream.   
(cid:15)    if pigs can    y, then your account won   t get hacked.   
(cid:15)    if you can solve any problem we come up with, then you get an a for the
course.   
(cid:15)    every american has a dream.   

what precisely do these sentences mean? can you have both cake and ice cream or
must you choose just one dessert? pigs can   t    y, so does the second sentence say
anything about the security of your account? if you can solve some problems we
come up with, can you get an a for the course? and if you can   t solve a single one
of the problems, does it mean you can   t get an a? finally, does the last sentence
imply that all americans have the same dream   say of owning a house   or might
different americans have different dreams   say, eric dreams of designing a killer
software application, tom of being a tennis champion, albert of being able to sing?
some uncertainty is tolerable in normal conversation. but when we need to
formulate ideas precisely   as in mathematics and programming   the ambiguities
inherent in everyday language can be a real problem. we can   t hope to make an
exact argument if we   re not sure exactly what the statements mean. so before we
start into mathematics, we need to investigate the problem of how to talk about
mathematics.

to get around the ambiguity of english, mathematicians have devised a spe-
cial language for talking about logical relationships. this language mostly uses
ordinary english words and phrases such as    or,       implies,    and    for all.    but
mathematicians give these words precise and unambiguous de   nitions which don   t
always match common usage.

surprisingly, in the midst of learning the language of logic, we   ll come across
the most important open problem in computer science   a problem whose solution
could change the world.

   mcs        2017/6/5     19:42     page 48     #56

48

chapter 3 logical formulas

3.1 propositions from propositions

in english, we can modify, combine, and relate propositions with words such as
   not,       and,       or,       implies,    and    if-then.    for example, we can combine three
propositions into one like this:

if all humans are mortal and all greeks are human, then all greeks are mortal.
for the next while, we won   t be much concerned with the internals of propositions   

whether they involve mathematics or greek mortality   but rather with how propo-
sitions are combined and related. so, we   ll frequently use variables such as p and
q in place of speci   c propositions such as    all humans are mortal    and    2 c 3 d
5.    the understanding is that these propositional variables, like propositions, can
take on only the values t (true) and f (false). propositional variables are also
called boolean variables after their inventor, the nineteenth century mathematician
george   you guessed it   boole.

3.1.1 not, and, and or
mathematicians use the words not, and and or for operations that change or
combine propositions. the precise mathematical meaning of these special words
can be speci   ed by truth tables. for example, if p is a proposition, then so is
   not.p /,    and the truth value of the proposition    not.p /    is determined by the
truth value of p according to the following truth table:

p not.p /
t
f

f
t

the    rst row of the table indicates that when proposition p is true, the proposi-
tion    not.p /    is false. the second line indicates that when p is false,    not.p /   
is true. this is probably what you would expect.

in general, a truth table indicates the true/false value of a proposition for each
possible set of truth values for the variables. for example, the truth table for the
proposition    p and q    has four lines, since there are four settings of truth values
for the two variables:

p q p and q
t t
t f
f t
f f

t
f
f
f

   mcs        2017/6/5     19:42     page 49     #57

3.1. propositions from propositions

49

according to this table, the proposition    p and q    is true only when p and q
are both true. this is probably the way you ordinarily think about the word    and.   

there is a subtlety in the truth table for    p or q   :

p q p or q
t t
t f
f t
f f

t
t
t
f

the    rst row of this table says that    p or q    is true even if both p and q are
true. this isn   t always the intended meaning of    or    in everyday speech, but this is
the standard de   nition in mathematical writing. so if a mathematician says,    you
may have cake, or you may have ice cream,    he means that you could have both.

if you want to exclude the possibility of having both cake and ice cream, you

should combine them with the exclusive-or operation, xor:

p q p xor q
t t
t f
f t
f f

f
t
t
f

if and only if

3.1.2
mathematicians commonly join propositions in an additional way that doesn   t arise
in ordinary speech. the proposition    p if and only if q    asserts that p and q have
the same truth value. either both are true or both are false.

p q p iff q
t t
t f
f t
f f

t
f
f
t

for example, the following if-and-only-if statement is true for every real number
x:

x2 (cid:0) 4 (cid:21) 0 iff jxj (cid:21) 2:

for some values of x, both inequalities are true. for other values of x, neither
inequality is true. in every case, however, the iff proposition as a whole is true.

   mcs        2017/6/5     19:42     page 50     #58

50

chapter 3 logical formulas

implies

3.1.3
the combining operation whose technical meaning is least intuitive is    implies.   
here is its truth table, with the lines labeled so we can refer to them later.

p q p implies q
t t
t f
f t
f f

t
f
t
t

(tt)
(tf)
(ft)
(ff)

the truth table for implications can be summarized in words as follows:

an implication is true exactly when the if-part is false or the then-part is true.

this sentence is worth remembering; a large fraction of all mathematical statements
are of the if-then form!

let   s experiment with this de   nition. for example, is the following proposition

true or false?

if goldbach   s conjecture is true, then x2 (cid:21) 0 for every real number x.

we already mentioned that no one knows whether goldbach   s conjecture, proposi-
tion 1.1.6, is true or false. but that doesn   t prevent us from answering the question!
this proposition has the form p implies q where the hypothesis p is    gold-
bach   s conjecture is true    and the conclusion q is    x2 (cid:21) 0 for every real number
x.    since the conclusion is de   nitely true, we   re on either line (tt) or line (ft) of the
truth table. either way, the proposition as a whole is true!

now let   s    gure out the truth of one of our original examples:

if pigs    y, then your account won   t get hacked.

forget about pigs, we just need to    gure out whether this proposition is true or
false. pigs do not    y, so we   re on either line (ft) or line (ff) of the truth table. in
both cases, the proposition is true!

false hypotheses
this mathematical convention   that an implication as a whole is considered true
when its hypothesis is false   contrasts with common cases where implications are
supposed to have some causal connection between their hypotheses and conclu-
sions.

for example, we could agree   or at least hope   that the following statement is

true:

   mcs        2017/6/5     19:42     page 51     #59

3.1. propositions from propositions

51

if you followed the security protocal, then your account won   t get
hacked.

we regard this implication as unproblematical because of the clear causal connec-
tion between security protocols and account hackability.

on the other hand, the statement:

if pigs could    y, then your account won   t get hacked,

would commonly be rejected as false   or at least silly   because porcine aeronau-
tics have nothing to do with your account security. but mathematically, this impli-
cation counts as true.

it   s important to accept the fact that mathematical implications ignore causal
connections. this makes them a lot simpler than causal implications, but useful
nevertheless. to illustrate this, suppose we have a system speci   cation which con-
sists of a series of, say, a dozen rules,1

if

if

if

the
then
the
then

the
then

system sensors are in condition 1,
the system takes action 1.
system sensors are in condition 2,
the system takes action 2.
:::
system sensors are in condition 12,
the system takes action 12.

letting ci be the proposition that the system sensors are in condition i, and ai
be the proposition that system takes action i, the speci   cation can be restated more
concisely by the logical formulas

c1 implies a1;
c2 implies a2;

:::

c12 implies a12:

now the proposition that the system obeys the speci   cation can be nicely expressed
as a single logical formula by combining the formulas together with ands::
  c1 implies a1   and   c2 implies a2   and (cid:1)(cid:1)(cid:1) and   c12 implies a12  : (3.1)
for example, suppose only conditions c2 and c5 are true, and the system indeed
takes the speci   ed actions a2 and a5. so in this case, the system is behaving

1 problem 3.16 concerns just such a system.

   mcs        2017/6/5     19:42     page 52     #60

52

chapter 3 logical formulas

according to speci   cation, and we accordingly want formula (3.1) to come out true.
the implications c2 implies a2 and c5 implies a5 are both true because both
their hypotheses and their conclusions are true. but in order for (3.1) to be true, we
need all the other implications, all of whose hypotheses are false, to be true. this
is exactly what the rule for mathematical implications accomplishes.

3.2 id118 in computer programs

propositions and logical connectives arise all the time in computer programs. for
example, consider the following snippet, which could be either c, c++, or java:

if ( x > 0 || (x <= 0 && y > 100) )

:::

(further instructions)

java uses the symbol || for    or,    and the symbol && for    and.    the further
instructions are carried out only if the proposition following the word if is true.
on closer inspection, this big expression is built from two simpler propositions.
let a be the proposition that x > 0, and let b be the proposition that y > 100.
then we can rewrite the condition as

a or .not.a/ and b/:

(3.2)

3.2.1 truth table calculation
a truth table calculation reveals that the more complicated expression 3.2 always
has the same truth value as

a or b:

(3.3)

we begin with a table with just the truth values of a and b:

a b a or .not.a/ and b/ a or b
t t
t f
f t
f f

   mcs        2017/6/5     19:42     page 53     #61

3.2. id118 in computer programs

53

these values are enough to    ll in two more columns:

a b a or .not.a/ and b/ a or b
t t
t f
f t
f f

t
t
t
f

f
f
t
t

now we have the values needed to    ll in the and column:

a b a or .not.a/ and b/ a or b
t t
t f
f t
f f

t
t
t
f

f
f
t
t

f
f
t
f

and this provides the values needed to    ll in the remaining column for the    rst or:

a b a or .not.a/ and b/ a or b
t t
t f
f t
f f

t
t
t
f

t
t
t
f

f
f
t
t

f
f
t
f

expressions whose truth values always match are called equivalent. since the two
emphasized columns of truth values of the two expressions are the same, they are
equivalent. so we can simplify the code snippet without changing the program   s
behavior by replacing the complicated expression with an equivalent simpler one:

if ( x > 0 || y > 100 )

:::

(further instructions)

the equivalence of (3.2) and (3.3) can also be con   rmed reasoning by cases:

a is t. an expression of the form .t or anything/ is equivalent to t. since a is t
both (3.2) and (3.3) in this case are of this form, so they have the same truth
value, namely, t.

a is f. an expression of the form .f or anything/ will have same truth value as

anything. since a is f, (3.3) has the same truth value as b.
an expression of the form .t and anything/ is equivalent to anything, as is
any expression of the form f or anything. so in this case a or .not.a/ and
b/ is equivalent to .not.a/ and b/, which in turn is equivalent to b.

   mcs        2017/6/5     19:42     page 54     #62

54

chapter 3 logical formulas

therefore both (3.2) and (3.3) will have the same truth value in this case,
namely, the value of b.

simplifying logical expressions has real practical importance in computer sci-
ence. expression simpli   cation in programs like the one above can make a program
easier to read and understand. simpli   ed programs may also run faster, since they
require fewer operations. in hardware, simplifying expressions can decrease the
number of logic gates on a chip because digital circuits can be described by logical
formulas (see problems 3.6 and 3.7). minimizing the logical formulas corresponds
to reducing the number of gates in the circuit. the payoff of gate minimization is
potentially enormous: a chip with fewer gates is smaller, consumes less power, has
a lower defect rate, and is cheaper to manufacture.

english

3.2.2 cryptic notation
java uses symbols like    &&    and    jj    in place of and and or. circuit designers
use    (cid:1)    and    c,    and actually refer to and as a product and or as a sum. mathe-
maticians use still other symbols, given in the table below.
symbolic notation
:p
p ^ q
p _ q
p implies q p (cid:0)! q
p (cid:0)! q
if p then q
p  ! q
p iff q
p    q
p xor q

not.p /
p and q
p or q

(alternatively, p )

for example, using this notation,    if p and not.q/, then r    would be written:

.p ^ q/ (cid:0)! r:

the mathematical notation is concise but cryptic. words such as    and    and
   or    are easier to remember and won   t get confused with operations on numbers.
we will often use p as an abbreviation for not.p /, but aside from that, we mostly
stick to the words   except when formulas would otherwise run off the page.

3.3 equivalence and validity

implications and contrapositives

3.3.1
do these two sentences say the same thing?

   mcs        2017/6/5     19:42     page 55     #63

3.3. equivalence and validity

55

if i am hungry, then i am grumpy.

if i am not grumpy, then i am not hungry.

we can settle the issue by recasting both sentences in terms of id118.
let p be the proposition    i am hungry    and q be    i am grumpy.    the    rst sentence
says    p implies q    and the second says    not.q/ implies not.p /.    once
more, we can compare these two statements in a truth table:

p q .p implies q/
t t
t f
f t
f f

t
f
t
t

.not.q/

f
t
f
t

t
f
t
t

f
f
t
t

implies not.p //

sure enough, the highlighted columns showing the truth values of these two state-
ments are the same. a statement of the form    not.q/ implies not.p /    is called
the contrapositive of the implication    p implies q.    the truth table shows that
an implication and its contrapositive are equivalent   they are just different ways of
saying the same thing.

in contrast, the converse of    p implies q    is the statement    q implies p .   

the converse to our example is:

if i am grumpy, then i am hungry.

this sounds like a rather different contention, and a truth table con   rms this suspi-
cion:

p q p implies q q implies p
t t
t f
f t
f f

t
f
t
t

t
t
f
t

now the highlighted columns differ in the second and third row, con   rming that an
implication is generally not equivalent to its converse.

one    nal relationship: an implication and its converse together are equivalent to

an iff statement, speci   cally, to these two statements together. for example,

if i am grumpy then i am hungry, and if i am hungry then i am grumpy.

are equivalent to the single statement:

i am grumpy iff i am hungry.

   mcs        2017/6/5     19:42     page 56     #64

56

chapter 3 logical formulas

once again, we can verify this with a truth table.

p q .p implies q/ and .q implies p / p iff q
t t
t f
f t
f f

t
f
t
t

t
t
f
t

t
f
f
t

t
f
f
t

the fourth column giving the truth values of

.p implies q/ and .q implies p /

is the same as the sixth column giving the truth values of p iff q, which con   rms
that the and of the implications is equivalent to the iff statement.

3.3.2 validity and satis   ability
a valid formula is one which is always true, no matter what truth values its vari-
ables may have. the simplest example is

p or not.p /:

you can think about valid formulas as capturing fundamental logical truths. for
example, a property of implication that we take for granted is that if one statement
implies a second one, and the second one implies a third, then the    rst implies the
third. the following valid formula con   rms the truth of this property of implication.

  .p implies q/ and .q implies r/   implies .p implies r/:

equivalence of formulas is really a special case of validity. namely, statements
f and g are equivalent precisely when the statement .f iff g/ is valid. for
example, the equivalence of the expressions (3.3) and (3.2) means that

.a or b/ iff .a or .not.a/ and b//

is valid. of course, validity can also be viewed as an aspect of equivalence. namely,
a formula is valid iff it is equivalent to t.

a satis   able formula is one which can sometimes be true   that is, there is some
assignment of truth values to its variables that makes it true. one way satis   abil-
ity comes up is when there are a collection of system speci   cations. the job of
the system designer is to come up with a system that follows all the specs. this
means that the and of all the specs must be satis   able or the designer   s job will be
impossible (see problem 3.16).

there is also a close relationship between validity and satis   ability: a statement

p is satis   able iff its negation not.p / is not valid.

   mcs        2017/6/5     19:42     page 57     #65

3.4. the algebra of propositions

57

3.4 the algebra of propositions

3.4.1 propositions in normal form
every propositional formula is equivalent to a    sum-of-products    or disjunctive
normal form (dnf).

more precisely, a propositional variable a or its negation bar.a/ is called a
literal, and an and of literals involving distinct variables is called an and-clause.
for example,

a and b and c

is an and-clause, but a and b and b and c is not because b appears twice.
finally, a dnf is an orof and-clauses such as

.a and b/ or .a and c /:

(3.4)

you can read a dnf for any propositional formula directly from its truth table.

for example, the formula

a and .b or c /

(3.5)

has truth table:

a b c a and .b or c /
t t t
t t f
t f t
t f f
f t t
f t f
f f t
f f f

t
t
t
f
f
f
f
f

the formula (3.5) is true in the    rst row when a, b and c are all true, that is, where
a and b and c is true. it is also true in the second row where a and b and c
is true, and in the third row when a and b and c is true, and that   s all. so (3.5)
is true exactly when

.a and b and c / or .a and b and c / or .a and b and c /

(3.6)

is true.

the expression (3.6) is a dnf where each and-clause actually includes a literal
for every one of the variables in the whole formula. we   ll call such a formula a full
dnf.

   mcs        2017/6/5     19:42     page 58     #66

58

chapter 3 logical formulas

a dnf formula can often be simpli   ed into a smaller dnf for example, the

dnf (3.6) further simpli   es to the equivalent dnf (3.4) above.

applying the same reasoning to the f entries of a truth table yields a conjunctive
normal form (cnf) for any formula   an and of or-clauses, where an or-clause
is an or of literals from different variables.

for example, formula (3.5) is false in the fourth row of its truth table (3.4.1)
where a is t, b is f and c is f. but this is exactly the one row where the or-
clause .a or b or c / is f! likewise, (3.5) is false in the    fth row, which is
exactly where .a or b or c / is f. this means that (3.5) will be f whenever the
and of these two or-clauses is false. continuing in this way with the or-clauses
corresponding to the remaining three rows where (3.5) is false, we get a cnf that
is equivalent to (3.5), namely,

.a or b or c / and .a or b or c / and .a or b or c /and
.a or b or c / and .a or b or c /

again, each or-clause includes a literal for every one of the variables, that is, it is
a full cnf

the methods above can be applied to any truth table, which implies

theorem 3.4.1. every propositional formula is equivalent to both a full disjunctive
normal form and a full conjunctive normal form.

3.4.2 proving equivalences
a check of equivalence or validity by truth table runs out of steam pretty quickly:
a proposition with n variables has a truth table with 2n lines, so the effort required
to check a proposition grows exponentially with the number of variables. for a
proposition with just 30 variables, that   s already over a billion lines to check!

an alternative approach that sometimes helps is to use algebra to prove equiv-
alence. a lot of different operators may appear in a propositional formula, so a
useful    rst step is to get rid of all but three: and, or and not. this is easy be-
cause each of the operators is equivalent to a simple formula using only these three.
for example, a implies b is equivalent to not.a/ or b. formulas de   ning the
remaining operators using only qand; or and not are left to problem 3.17.
we list below a bunch of equivalence axioms with the symbol      !     between
equivalent formulas. these axioms are important because they are all that   s needed
to prove every possible equivalence. we   ll start with some equivalences for and   s

   mcs        2017/6/5     19:42     page 59     #67

3.4. the algebra of propositions

59

that look like the familiar ones for multiplication of numbers:

a and b  ! b and a

.a and b/ and c  ! a and .b and c /

t and a  ! a
f and a  ! f

a and .b or c /  ! .a and b/ or .a and c /

(commutativity of and)

(3.7)

(associativity of and)

(3.8)

(identity for and)
(zero for and)
(distributivity of and over or)

(3.9)

associativity (3.8) justi   es writing a and b and c without specifying whether
it is parenthesized as a and .b and c / or .a and b/ and c . both ways of
inserting parentheses yield equivalent formulas.

unlike arithmetic rules for numbers, there is also a distributivity law for    sums   

over    products:   
a or .b and c /  ! .a or b/ and .a or c /

(distributivity of or over and)

(3.10)

three more axioms that don   t directly correspond to number properties are

a and a  ! a
a and a  ! f
not.a/  ! a

(idempotence for and)
(contradiction for and)
(double negation)

(3.11)
(3.12)

there are a corresponding set of equivalences for or which we won   t bother to

list, except for validity rule (3.13) for or:

a or a  ! t

(validity for or)

(3.13)

finally, there are de morgan   s laws which explain how to distribute not   s over

and   s and or   s:

not.a and b/  ! a or b
not.a or b/  ! a and b

(de morgan for and)
(de morgan for or)

(3.14)
(3.15)

all of these axioms can be veri   ed easily with truth tables.

these axioms are all that   s needed to convert any formula to a full dnf. we can

illustrate how they work by applying them to turn the negation of formula (3.5),

not..a and b/ or .a and c //:

(3.16)

   mcs        2017/6/5     19:42     page 60     #68

60

chapter 3 logical formulas

into a full dnf.

we start by applying de morgan   s law for or (3.15) to (3.16) in order to move

the not deeper into the formula. this gives

not.a and b/ and not.a and c /:

now applying de morgan   s law for and (3.14) to the two innermost and-terms,
gives

.a or b/ and .a or c /:

(3.17)

at this point not only applies to variables, and we won   t need de morgan   s laws
any further.

now we will repeatedly apply (3.9), distributivity of and over or, to turn (3.17)

into a dnf. to start, we   ll distribute .a or b/ over and to get

..a or b/ and a/ or ..a or b/ and c /:

using distributivity over both and   s we get

..a and a/ or .b and a// or ..a and c / or .b and c //:

by the way, we   ve implicitly used commutativity (3.7) here to justify distributing
over an and from the right. now applying idempotence to remove the duplicate
occurrence of a we get

.a or .b and a// or ..a and c / or .b and c //:

associativity of qor now allows dropping the parentheses grouping the and-
clauses to yield the following dnf for (3.16):

a or .b and a/ or .a and c / or .b and c /:

(3.18)

the penultimate step is to turn this dnf into a full dnf. this can be done
separately for ech and-clause. we   ll illustrate how using the second and-clause
.b and a/. this clause needs to mention c to be in full form. to introduce c , we
use validity for or and identity for and to conclude that

.b and a/  ! .b and a/ and .c or c /:

now distributing .b and a/ over the or in .c or c / yields the full dnf

.b and a and c / or .b and a and c /:

   mcs        2017/6/5     19:42     page 61     #69

3.4. the algebra of propositions

61

doing the same thing to the other and-clauses in (3.18)    nally gives a full dnf
for (3.5):

.a and b and c / or .a and b and c / or
.a and b and c / or .a and b and c / or
.b and a and c / or .b and a and c / or
.a and c and b/ or .a and c and b/ or
.b and c and a/ or .b and c and a/:

the    nal step is to use commutativity to sort the variables within the and-clauses
and then sort the and-clauses themselves, followed by applying or-idempotence
as needed to remove duplicate and-clauses. this    nally yields a sorted full dnf
without duplicates which is called a canonical dnf :

.a and b and c / or
.a and b and c / or
.a and b and c / or
.a and b and c / or
.a and b and c /:

this example illustrates the general strategy for applying the axioms above to any

given propositional formala to derive an equivalent canonical dnf. this proves:

theorem 3.4.2. using the equivalences listed above, any propositional formula
can be proved equivalent to a canonical form.

what has this got to do with equivalence? that   s easy: to prove that two formulas
are equivalent, convert them both to canonical forms over the set of variables that
appear in at least one of the formulas   call these the combined variables. now
if two formulas are equivalent to the same canonical form then the formula are
certainly equivalent. conversely, the way we read off a full disjunctive normal
form from a truth table actually yields a canonical form. so if two formulas are
equivalent, they will have the same truth table over the combined variables, and
therefore they will have the same canonical form. this proves

theorem 3.4.3 (completeness of the propositional equivalence axioms). two propo-
sitional formula are equivalent iff they can be proved equivalent using the equiva-
lence axioms listed above.

notice that the same approach could be taken used cnf instead of dnf canoni-

cal forms.

the bene   t of the axioms is that they allow some ingenious proofs of equiva-
lence that may involve much less effort than the truth table method. moreover,

   mcs        2017/6/5     19:42     page 62     #70

62

chapter 3 logical formulas

theorem 3.4.3 reassures us that the axioms are guaranteed to provide a proof of
every equivalence, which is a great punchline for this section.

but we don   t want to mislead you: the guaranteed proof involves deriving canon-
ical forms, and canonical forms are essentially copies of truth tables. there is no
reason to expect algebraic proofs of equivalence to be any easier in general than
conversion to canonical form, which means algebraic proofs will generally be no
easier than using truth tables.

3.5 the sat problem

determining whether or not a more complicated proposition is satis   able is not so
easy. how about this one?

.p or q or r/ and .p or q/ and .p or r/ and .r or q/

the general problem of deciding whether a proposition is satis   able is called
sat. one approach to sat is to construct a truth table and check whether or not
a t ever appears, but as with testing validity, this approach quickly bogs down
for formulas with many variables because truth tables grow exponentially with the
number of variables.

is there a more ef   cient solution to sat? in particular, is there some brilliant
procedure that determines sat in a number of steps that grows polynomially   like
n2 or n14   instead of exponentially   2n   whether any given proposition of size n
is satis   able or not? no one knows. and an awful lot hangs on the answer.

the general de   nition of an    ef   cient    procedure is one that runs in polynomial
time, that is, that runs in a number of basic steps bounded by a polynomial in s,
where s is the size of an input. it turns out that an ef   cient solution to sat would
immediately imply ef   cient solutions to many other important problems involving
scheduling, routing, resource allocation, and circuit veri   cation across multiple dis-
ciplines including programming, algebra,    nance, and political theory. this would
be wonderful, but there would also be worldwide chaos. decrypting coded mes-
sages would also become an easy task, so online    nancial transactions would be
insecure and secret communications could be read by everyone. why this would
happen is explained in section 9.12.

of course, the situation is the same for validity checking, since you can check for
validity by checking for satis   ability of a negated formula. this also explains why
the simpli   cation of formulas mentioned in section 3.2 would be hard   validity
testing is a special case of determining if a formula simpli   es to t.

   mcs        2017/6/5     19:42     page 63     #71

3.6. predicate formulas

63

recently there has been exciting progress on sat-solvers for practical applica-
tions like digital circuit veri   cation. these programs    nd satisfying assignments
with amazing ef   ciency even for formulas with millions of variables. unfortu-
nately, it   s hard to predict which kind of formulas are amenable to sat-solver
methods, and for formulas that are unsatis   able, sat-solvers are generally much
less effective.

so no one has a good idea how to solve sat in polynomial time, or how to
prove that it can   t be done   researchers are completely stuck. the problem of
determining whether or not sat has a polynomial time solution is known as the
   p vs. np    problem.2
it is the outstanding unanswered question in theoretical
computer science. it is also one of the seven millenium problems: the clay institute
will award you $1,000,000 if you solve the p vs. np problem.

3.6 predicate formulas

3.6.1 quanti   ers
the    for all    notation 8 has already made an early appearance in section 1.1. for
example, the predicate

   x2 (cid:21) 0   
is always true when x is a real number. that is,
8x 2 r: x2 (cid:21) 0

is a true statement. on the other hand, the predicate

is only sometimes true; speci   cally, when x d   p

   5x2 (cid:0) 7 d 0   

7=5. there is a    there exists   
notation 9 to indicate that a predicate is true for at least one, but not necessarily all
objects. so

9x 2 r: 5x2 (cid:0) 7 d 0

is true, while

is not true.

8x 2 r: 5x2 (cid:0) 7 d 0

2p stands for problems whose instances can be solved in time that grows polynomially with the
size of the instance. np stands for nondeterministtic polynomial time, but we   ll leave an explanation
of what that is to texts on the theory of computational complexity.

   mcs        2017/6/5     19:42     page 64     #72

64

chapter 3 logical formulas

there are several ways to express the notions of    always true    and    sometimes
true    in english. the table below gives some general formats on the left and speci   c
examples using those formats on the right. you can expect to see such phrases
hundreds of times in mathematical writing!

for all x 2 d, p .x/ is true.
p .x/ is true for every x in the set d.

for all x 2 r, x2 (cid:21) 0.
x2 (cid:21) 0 for every x 2 r.

always true

sometimes true

there is an x 2 d such that p .x/ is true. there is an x 2 r such that 5x2 (cid:0) 7 d 0.
5x2 (cid:0) 7 d 0 for some x 2 r.
p .x/ is true for some x in the set d.
5x2 (cid:0) 7 d 0 for at least one x 2 r.
p .x/ is true for at least one x 2 d.
all these sentences    quantify    how often the predicate is true. speci   cally, an
assertion that a predicate is always true is called a universal quanti   cation, and an
assertion that a predicate is sometimes true is an existential quanti   cation. some-
times the english sentences are unclear with respect to quanti   cation:

if you can solve any problem we come up with,
then you get an a for the course.

(3.19)

the phrase    you can solve any problem we can come up with    could reasonably be
interpreted as either a universal or existential quanti   cation:

you can solve every problem we come up with,

(3.20)

or maybe

you can solve at least one problem we come up with.

(3.21)
to be precise, let probs be the set of problems we come up with, solves.x/ be
the predicate    you can solve problem x,    and g be the proposition,    you get an a
for the course.    then the two different interpretations of (3.19) can be written as
follows:

.8x 2 probs: solves.x// implies g;
.9x 2 probs: solves.x// implies g:

for (3.20);
for (3.21):

3.6.2 mixing quanti   ers
many mathematical statements involve several quanti   ers. for example, we al-
ready described

   mcs        2017/6/5     19:42     page 65     #73

3.6. predicate formulas

65

goldbach   s conjecture 1.1.6: every even integer greater than 2 is the
sum of two primes.

let   s write this out in more detail to be precise about the quanti   cation:

for every even integer n greater than 2, there exist primes p and q such
that n d p c q.

let evens be the set of even integers greater than 2, and let primes be the set of
primes. then we can write goldbach   s conjecture in logic notation as follows:

             
8n 2 evens

for every even
integer n > 2

   
   
9p 2 primes 9q 2 primes:

     

there exist primes
p and q such that

n d p c q:

3.6.3 order of quanti   ers
swapping the order of different kinds of quanti   ers (existential or universal) usually
changes the meaning of a proposition. for example, let   s return to one of our initial,
confusing statements:

   every american has a dream.   

this sentence is ambiguous because the order of quanti   ers is unclear. let a be
the set of americans, let d be the set of dreams, and de   ne the predicate h.a; d /
to be    american a has dream d.    now the sentence could mean there is a single
dream that every american shares   such as the dream of owning their own home:

9 d 2 d 8a 2 a: h.a; d /

or it could mean that every american has a personal dream:

8a 2 a9 d 2 d: h.a; d /

for example, some americans may dream of a peaceful retirement, while others
dream of continuing practicing their profession as long as they live, and still others
may dream of being so rich they needn   t think about work at all.
swapping quanti   ers in goldbach   s conjecture creates a patently false statement
that every even number (cid:21) 2 is the sum of the same two primes:

   
   
9 p 2 primes 9 q 2 primes:

     

there exist primes
p and q such that

             
8n 2 evens

for every even
integer n > 2

n d p c q:

   mcs        2017/6/5     19:42     page 66     #74

66

chapter 3 logical formulas

3.6.4 variables over one domain
when all the variables in a formula are understood to take values from the same
nonempty set d it   s conventional to omit mention of d. for example, instead of
8x 2 d 9y 2 d: q.x; y/ we   d write 8x9y: q.x; y/. the unnamed nonempty set
that x and y range over is called the domain of discourse, or just plain domain, of
the formula.

it   s easy to arrange for all the variables to range over one domain. for exam-
ple, goldbach   s conjecture could be expressed with all variables ranging over the
domain n as
8n: n 2 evens implies .9 p 9 q: p 2 primes and q 2 primes and n d p c q/:
3.6.5 negating quanti   ers
there is a simple relationship between the two kinds of quanti   ers. the following
two sentences mean the same thing:

not everyone likes ice cream.
there is someone who does not like ice cream.

the equivalence of these sentences is an instance of a general equivalence that
holds between predicate formulas:

not.8x: p .x//

is equivalent to 9x: not.p .x//:

(3.22)

similarly, these sentences mean the same thing:

there is no one who likes being mocked.
everyone dislikes being mocked.

the corresponding predicate formula equivalence is

not.9x: p .x//

is equivalent to 8x: not.p .x//:

(3.23)

note that the equivalence (3.23) follows directly by negating both sides the equiv-
alence (3.22).
the general principle is that moving a not to the other side of an    9    changes
it into    8,    and vice versa.
these equivalences are called de morgan   s laws for quanti   ers because they
can be understood as applying de morgan   s laws for propositional formulas to
an in   nite sequence of and   s and or   s. for example, we can explain (3.22) by

   mcs        2017/6/5     19:42     page 67     #75

3.6. predicate formulas

67

supposing the domain of discourse is fd0; d1; : : : ; dn; : : :g. then 9x: not.p .x//
means the same thing as the in   nite or:

not.p .d0// or not.p .d1// or (cid:1)(cid:1)(cid:1) or not.p .dn// or : : : :

applying de morgan   s rule to this in   nite or yields the equivalent formula

not  p .d0/ and p .d1/ and (cid:1)(cid:1)(cid:1) and p .dn/ and : : :   :

(3.24)

(3.25)

but (3.25) means the same thing as

not  8x: p .x/  :

this explains why 9x: not.p .x// means the same thing as not  8x: p .x/  , which
con   rms(3.22).

3.6.6 validity for predicate formulas
the idea of validity extends to predicate formulas, but to be valid, a formula now
must evaluate to true no matter what the domain of discourse may be, no matter
what values its variables may take over the domain, and no matter what interpreta-
tions its predicate variables may be given. for example, the equivalence (3.22) that
gives the rule for negating a universal quanti   er means that the following formula
is valid:

not.8x: p .x// iff 9x: not.p .x//:

another useful example of a valid assertion is

9x8y: p .x; y/ implies 8y9x: p .x; y/:

here   s an explanation why this is valid:

let d be the domain for the variables and p0 be some binary predi-
cate3 on d. we need to show that if

9x 2 d:8y 2 d: p0.x; y/

(3.28)

holds under this interpretation, then so does

8y 2 d 9x 2 d: p0.x; y/:

(3.29)
so suppose (3.28) is true. then by de   nition of 9, this means that some
element d0 2 d has the property that

8y 2 d: p0.d0; y/:

3that is, a predicate that depends on two variables.

(3.26)

(3.27)

   mcs        2017/6/5     19:42     page 68     #76

68

chapter 3 logical formulas

by de   nition of 8, this means that

p0.d0; d /

is true for all d 2 d. so given any d 2 d, there is an element in d,
namely d0, such that p0.d0; d / is true. but that   s exactly what (3.29)
means, so we   ve proved that (3.29) holds under this interpretation, as
required.

we hope this is helpful as an explanation, but we don   t really want to call it a
   proof.    the problem is that with something as basic as (3.27), it   s hard to see
what more elementary axioms are ok to use in proving it. what the explanation
above did was translate the logical formula (3.27) into english and then appeal to
the meaning, in english, of    for all    and    there exists    as justi   cation.

in contrast to (3.27), the formula

8y9x: p .x; y/ implies 9x8y: p .x; y/:

(3.30)

is not valid. we can prove this just by describing an interpretation where the hy-
pothesis 8y9x: p .x; y/ is true but the conclusion 9x8y: p .x; y/ is not true. for
example, let the domain be the integers and p .x; y/ mean x > y. then the hy-
pothesis would be true because, given a value n for y we could choose the value
of x to be n c 1, for example. but under this interpretation the conclusion asserts
that there is an integer that is bigger than all integers, which is certainly false. an
interpretation like this that falsi   es an assertion is called a counter-model to that
assertion.

3.7 references

[21]

problems for section 3.1

practice problems
problem 3.1.
some people are uncomfortable with the idea that from a false hypothesis you can
prove everything, and instead of having p implies q be true when p is false,

   mcs        2017/6/5     19:42     page 69     #77

3.7. references

69

they want p implies q to be false when p is false. this would lead to implies
having the same truth table as what propositional connective?

problem 3.2.
your class has a textbook and a    nal exam. let p , q and r be the following
propositions:
pwwd you get an a on the    nal exam.
qwwd you do every exercise in the book.
rwwd you get an a in the class.
translate following assertions into propositional formulas using p , q, r and

the propositional connectives and; not; implies.
(a) you get an a in the class, but you do not do every exercise in the book.

(b) you get an a on the    nal, you do every exercise in the book, and you get an a
in the class.

(c) to get an a in the class, it is necessary for you to get an a on the    nal.

(d) you get an a on the    nal, but you don   t do every exercise in this book; never-
theless, you get an a in this class.

class problems
problem 3.3.
when the mathematician says to his student,    if a function is not continuous, then it
is not differentiable,    then letting d stand for    differentiable    and c for continuous,

   mcs        2017/6/5     19:42     page 70     #78

70

chapter 3 logical formulas

the only proper translation of the mathematician   s statement would be

or equivalently,

not.c / implies not.d/;

d implies c:

but when a mother says to her son,    if you don   t do your homework, then you
can   t watch tv,    then letting t stand for    can watch tv    and h for    do your
homework,    a reasonable translation of the mother   s statement would be

or equivalently,

not.h / iff not.t /;

h iff t:

explain why it is reasonable to translate these two if-then statements in dif-

ferent ways into propositional formulas.

homework problems
problem 3.4.
describe a simple procedure which, given a positive integer argument, n, produces
a width n array of truth-values whose rows would be all the possible truth-value
assignments for n propositional variables. for example, for n d 2, the array would
be:

t t
t f
f t
f f

your description can be in english, or a simple program in some familiar lan-
guage such as python or java. if you do write a program, be sure to include some
sample output.

problem 3.5.
sloppy sam is trying to prove a certain proposition p . he de   nes two related
propositions q and r, and then proceeds to prove three implications:

p implies q;

q implies r;

r implies p:

he then reasons as follows:

   mcs        2017/6/5     19:42     page 71     #79

3.7. references

71

if q is true, then since i proved .q implies r/, i can conclude that r
is true. now, since i proved .r implies p /, i can conclude that p is
true. similarly, if r is true, then p is true and so q is true. likewise,
if p is true, then so are q and r. so any way you look at it, all three
of p; q and r are true.

(a) exhibit truth tables for

.p implies q/ and .q implies r/ and .r implies p /

(*)

and for

(**)
use these tables to    nd a truth assignment for p; q; r so that (*) is t and (**) is f.

p and q and r:

(b) you show these truth tables to sloppy sam and he says    ok, i   m wrong that
p; q and r all have to be true, but i still don   t see the mistake in my reasoning.
can you help me understand my mistake?    how would you explain to sammy
where the    aw lies in his reasoning?

problems for section 3.2

class problems
problem 3.6.
id118 comes up in digital circuit design using the convention that t
corresponds to 1 and f to 0. a simple example is a 2-bit half-adder circuit. this
circuit has 3 binary inputs, a1; a0 and b, and 3 binary outputs, c; s1; s0. the 2-bit
word a1a0 gives the binary representation of an integer k between 0 and 3. the
3-bit word cs1s0 gives the binary representation of k c b. the third output bit c is
called the    nal carry bit.
so if k and b were both 1, then the value of a1a0 would be 01 and the value of
the output cs1s0 would 010, namely, the 3-bit binary representation of 1 c 1.
in fact, the    nal carry bit equals 1 only when all three binary inputs are 1, that is,
when k d 3 and b d 1. in that case, the value of cs1s0 is 100, namely, the binary
representation of 3 c 1.

   mcs        2017/6/5     19:42     page 72     #80

72

chapter 3 logical formulas

this 2-bit half-adder could be described by the following formulas:

c0 d b
s0 d a0 xor c0
c1 d a0 and c0
s1 d a1 xor c1
c2 d a1 and c1
c d c2:

the carry into column 1

the carry into column 2

(a) generalize the above construction of a 2-bit half-adder to an n c 1 bit half-
adder with inputs an; : : : ; a1; a0 and b and outputs c; sn; : : : ; s1; s0. that is, give
simple formulas for si and ci for 0   i   n c 1, where ci is the carry into column
i c 1, and c d cnc1.
(b) write similar de   nitions for the digits and carries in the sum of two n c 1-bit
binary numbers an : : : a1a0 and bn : : : b1b0.

visualized as digital circuits, the above adders consist of a sequence of single-
digit half-adders or adders strung together in series. these circuits mimic ordinary
pencil-and-paper addition, where a carry into a column is calculated directly from
the carry into the previous column, and the carries have to ripple across all the
columns before the carry into the    nal column is determined. circuits with this
design are called ripple-carry adders. ripple-carry adders are easy to understand
and remember and require a nearly minimal number of operations. but the higher-
order output bits and the    nal carry take time proportional to n to reach their    nal
values.
(c) how many of each of the propositional operations does your adder from part (b)
use to calculate the sum?

homework problems
problem 3.7.
as in problem 3.6, a digital circuit is called an .n c 1/-bit half-adder when it has
with n c 2 inputs

and n c 2 outputs

an; : : : ; a1; a0; b

c; sn; : : : ; s1; s0:

the input-output speci   cation of the half-adder is that, if the 0-1 values of inputs
an; : : : ; a1; a0 are taken to be the .n c 1/-bit binary representation of an integer k

   mcs        2017/6/5     19:42     page 73     #81

3.7. references

73

then the 0-1 values of the outputs c; sn; : : : ; s1; s0 are supposed to be the .nc 2/-bit
binary representation of k c b.
for example suppose n d 2 and the values of a2a1a0 were 101. this is the
binary representation of k d 5. now if the value of b was 1, then the output should
be the 4-bit representation of 5 c 1 d 6. namely, the values of cs2s1s0 would be
0110.

there are many different circuit designs for half adders. the most straighforward
one is the    ripple carry    design described in problem 3.6. we will now develop
a different design for a half-adder circuit called a parallel-design or    look-ahead
carry    half-adder. this design works by computing the values of higher-order digits
for both a carry of 0 and a carry of 1, in parallel. then, when the carry from the
low-order digits    nally arrives, the pre-computed answer can be quickly selected.
we   ll illustrate this idea by working out a parallel design for an .n c 1/-bit half-
adder.

parallel-design half-adders are built out of parallel-design circuits called add1-
modules. the input-output behavior of an add1-module is just a special case of a
half-adder, where instead of an adding an input b to the input, the add1-module
always adds 1. that is, an .n c 1/-bit add1-module has .n c 1/ binary inputs

an; : : : ; a1; a0;

c pn; : : : ; p1; p0:

and n c 2 binary outputs
if an : : : a1a0 are taken to be the .n c 1/-bit representation of an integer k then
cpn : : : p1p0 is supposed to be the .n c 2/-bit binary representation of k c 1.
so a 1-bit add1-module just has input a0 and outputs c; p0 where
p0 wwd a0 xor 1; .or more simply, p0 wwd not.a0//;
c wwd a0:

in the ripple-carry design, a double-size half-adder with 2.n c 1/ inputs takes
twice as long to produce its output values as an .n c 1/-input ripple-carry circuit.
with parallel-design add1-modules, a double-size add1-module produces its output
values nearly as fast as a single-size add1-modules. to see how this works, suppose
the inputs of the double-size module are

and the outputs are

a2nc1; : : : ; a1; a0

c; p2nc1; : : : ; p1; p0:

   mcs        2017/6/5     19:42     page 74     #82

74

chapter 3 logical formulas

we will build the double-size add1-module by having two single-size add1-modules
work in parallel. the setup is illustrated in figure 3.1.
namely, the    rst single-size add1-module handles the    rst n c 1 inputs. the in-
puts to this module are the low-order nc 1 input bits an; : : : ; a1; a0, and its outputs
will serve as the    rst n c 1 outputs pn; : : : ; p1; p0 of the double-size module. let
c.1/ be the remaining carry output from this module.
the inputs to the second single-size module are the higher-order nc 1 input bits
a2nc1; : : : ; anc2; anc1. call its    rst nc 1 outputs rn; : : : ; r1; r0 and let c.2/ be its
carry.
(a) write a formula for the carry c of the double-size add1-module solely in terms
of carries c.1/ and c.2/ of the single-size add1-modules.

(b) complete the speci   cation of the double-size add1-module by writing propo-
sitional formulas for the remaining outputs pnci for 1   i   n c 1. the formula
for pnci should only involve the variables anci, ri(cid:0)1 and c.1/.
(c) explain how to build an .nc 1/-bit parallel-design half-adder from an .nc 1/-
bit add1-module by writing a propositional formula for the half-adder output si
using only the variables ai, pi and b.

(d) the speed or latency of a circuit is determined by the largest number of gates
on any path from an input to an output. in an n-bit ripple carry circuit(problem 3.6),
there is a path from an input to the    nal carry output that goes through about 2n
gates.
in contrast, parallel half-adders are exponentially faster than ripple-carry
half-adders. con   rm this by determining the largest number of propositional opera-
tions, that is, gates, on any path from an input to an output of an n-bit add1-module.
(you may assume n is a power of 2.)

exam problems
problem 3.8.

claim. there are exactly two truth environments (assignments) for the variables
m; n; p; q; r; s that satisfy the following formula:

             

.p or q/

clause (1)

             

clause (2)

             

clause (3)

             

clause (4)

and .q or r/

and .r or s /

and .s or p /

and m and n

(a) this claim could be proved by truth-table. how many rows would the truth
table have?

   mcs        2017/6/5     19:42     page 75     #83

3.7. references

75

figure 3.1 structure of a double-size add1 module.

.nc1/-bit add12.nc2/-bit add1 module.nc1/-bit add1a2nc1anc2anc1rnr1r0ana1a0pnp1p0p2nc1pnc2 pnc1cc.1/c.2/   mcs        2017/6/5     19:42     page 76     #84

76

chapter 3 logical formulas

(b) instead of a truth-table, prove this claim with an argument by cases according
to the truth value of p .

problem 3.9.
an n-bit and-circuit has 0-1 valued inputs a0; a1; : : : ; an(cid:0)1 and one output c
whose value will be

c d a0 and a1 and (cid:1)(cid:1)(cid:1) and an(cid:0)1:

there are various ways to design an n-bit and-circuit. a serial design is simply
a series of and-gates, each with one input being a circuit input ai and the other
input being the output of the previous gate as shown in figure 3.2.
we can also use a tree design. a 1-bit tree design is just a wire, that is c wwd a1.
assuming for simplicity that n is a power of two, an n-input tree circuit for n > 1
simply consists of two n=2-input tree circuits whose outputs are and   d to produce
output c, as in figure 3.3. for example, a 4-bit tree design circut is shown in
figure 3.4.
(a) how many and-gates are in the n-input serial circuit?

(b) the    speed    or latency of a circuit is the largest number of gates on any path
from an input to an output. brie   y explain why the tree circuit is exponentially
faster than the serial circuit.
(c) assume n is a power of two. prove that the n-input tree circuit has n (cid:0) 1
and-gates.

problems for section 3.3

practice problems
problem 3.10.
indicate whether each of the following propositional formulas is valid (v), satis-
   able but not valid (s), or not satis   able (n). for the satis   able ones, indicate a
satisfying truth assignment.

   mcs        2017/6/5     19:42     page 77     #85

3.7. references

77

figure 3.2 a serial and-circuit.

   mcs        2017/6/5     19:42     page 78     #86

78

chapter 3 logical formulas

figure 3.3 an n-bit and-tree circuit.

figure 3.4 a 4-bit and-tree circuit.

   mcs        2017/6/5     19:42     page 79     #87

3.7. references

79

m implies q

m implies .p or q/

m implies   m and .p implies m /  

.p or q/ implies q

.p or q/ implies .p and q/

.p or q/ implies   m and .p implies m /  

.p xor q/ implies q

.p xor q/ implies .p or q/

.p xor q/ implies   m and .p implies m /  

problem 3.11.
show truth tables that verify the equivalence of the following two propositional
formulas

.p xor q/;

not.p iff q/:

problem 3.12.
prove that the propositional formulas

p or q or r

and

.p and not.q// or .q and not.r// or .r and not.p // or .p and q and r/:

are equivalent.

problem 3.13.
prove by truth table that or distributes over and, namely,

p or .q and r/

is equivalent to .p or q/ and .p or r/

(3.31)

   mcs        2017/6/5     19:42     page 80     #88

80

chapter 3 logical formulas

exam problems
problem 3.14.
the formula

not.a implies b/ and a and c

implies

d and e and f and g and h and i and j and k and l and m

turns out to be valid.
(a) explain why verifying the validity of this formula by truth table would be very
hard for one person to do with pencil and paper (no computers).

(b) verify that the formula is valid, reasoning by cases according to the truth value
of a.

proof. case: (a is true).

case: (a is false).

(cid:4)

class problems
problem 3.15. (a) verify by truth table that

.p implies q/ or .q implies p /

is valid.

(b) let p and q be propositional formulas. describe a single formula r using
only and   s, or   s, not   s, and copies of p and q, such that r is valid iff p and q
are equivalent.

(c) a propositional formula is satis   able iff there is an assignment of truth values
to its variables   an environment   that makes it true. explain why

p is valid iff not.p / is not satis   able.

(d) a set of propositional formulas p1; : : : ; pk is consistent iff there is an envi-
ronment in which they are all true. write a formula s such that the set p1; : : : ; pk
is not consistent iff s is valid.

   mcs        2017/6/5     19:42     page 81     #89

3.7. references

81

problem 3.16.
this problem4 examines whether the following speci   cations are satis   able:

1. if the    le system is not locked, then

(a) new messages will be queued.
(b) new messages will be sent to the messages buffer.
(c) the system is functioning normally, and conversely, if the system is

functioning normally, then the    le system is not locked.

2. if new messages are not queued, then they will be sent to the messages buffer.

3. new messages will not be sent to the message buffer.

(a) begin by translating the    ve speci   cations into propositional formulas using
four propositional variables:

l wwd    le system locked;
q wwd new messages are queued;
b wwd new messages are sent to the message buffer;
n wwd system functioning normally:

(b) demonstrate that this set of speci   cations is satis   able by describing a single
truth assignment for the variables l; q; b; n and verifying that under this assign-
ment, all the speci   cations are true.

(c) argue that the assignment determined in part (b) is the only one that does the
job.

problems for section 3.4

practice problems
problem 3.17.
a half dozen different operators may appear in propositional formulas, but just
and, or, and not are enough to do the job. that is because each of the operators
is equivalent to a simple formula using only these three operators. for example,
a implies b is equivalent to not.a/ or b. so all occurences of implies in a
formula can be replaced using just not and or.

4revised from rosen, 5th edition, exercise 1.1.36

   mcs        2017/6/5     19:42     page 82     #90

82

chapter 3 logical formulas

(a) write formulas using only and, or, not that are equivalent to each of aiff b
and a xor b. conclude that every propositional formula is equivalent to an and-
or-not formula.

(b) explain why you don   t even need and.

(c) explain how to get by with the single operator nand where a nand b is
equivalent by de   nition to not.a and b/.

class problems
problem 3.18.
the propositional connective nor is de   ned by the rule

p nor q wwd .not.p / and not.q//:

explain why every propositional formula   possibly involving any of the usual op-
erators such as implies, xor, . . .    is equivalent to one whose only connective is
nor.

problem 3.19.
explain how to read off a conjunctive form for a propositional formula directly
from a disjunctive form for its complement.

problem 3.20.
let p be the proposition depending on propositional variable a; b; c; d whose
truth values for each truth assignment to a; b; c; d are given in the table below.
write out both a disjunctive and a conjunctive normal form for p .

   mcs        2017/6/5     19:42     page 83     #91

3.7. references

83

a b c d p
t t t t t
t t t f
f
t t f t t
t t f f
f
t f t t t
t f t f t
t f f t t
t f f f t
f t t t t
f t t f
f
f t f t t
f t f f
f
f f t t f
f f t f
f
f f f t t
f f f f t

homework problems

problem 3.21.
use the equivalence axioms of section 3.4.2 to convert the formula

a xor b xor c

(a) . . . to disjunctive (or of and   s) form,

(b) . . . to conjunctive (and of or   s) form.

problems for section 3.5

class problems
problem 3.22.
the circuit-sat problem is the problem of determining, for any given digital circuit
with one output wire, whether there are truth values that can be fed into the circuit
input wires which will lead the circuit to give output t.

   mcs        2017/6/5     19:42     page 84     #92

84

chapter 3 logical formulas

it   s easy to see that any ef   cient way of solving the circuit-sat problem would
yield an ef   cient way to solve the usual sat problem for propositional formulas
(section 3.5). namely, for any formula f , just construct a circuit cf using that
computes the values of the formula. then there are inputs for which cf gives
output true iff f is satis   able. constructing cf from f is easy, using a binary
gate in cf for each propositional connective in f . so an ef   cient circuit-sat
procedure leads to an ef   cient sat procedure.

conversely, there is a simple recursive procedure that will construct, given c , a
formula ec that is equivalent to c in the sense that the truth value ec and the out-
put of c are the same for every truth assignment of the variables. the dif   culty is
that, in general, the    equivalent    formula ec , will be exponentially larger than c .
for the purposes of showing that sati   ability of circuits and satis   ability of formu-
las take roughly the same effort to solve, spending an exponential time translating
one problem to the other swamps any bene   t in switching from one problem to the
other.

so instead of a formula ec that is equivalent to c , we aim instead for a formula
fc that is    equisatis   able    with c . that is, there will be input values that make
c output true iff there is a truth assignment that satis   es fc . (in fact, fc and c
need not even use the same variables.) but now we make sure that the amount of
computation needed to construct fc is not much larger than the size of the circuit
c . in particular, the size of fc will also not be much larger than c .

the idea behind the construction of fc is that, given any digital circuit c with
binary gates and one output, we can assign a distinct variable to each wire of c .
then for each gate of c , we can set up a propositional formula that represents the
constraints that the gate places on the values of its input and output wires. for
example, for an and gate with input wire variables p and q and output wire
variable r, the constraint proposition would be

.p and q/ iff r:

(3.32)

(a) given a circuit c , explain how to easily    nd a formula fc of size proportional
to the number of wires in c such that fc is satis   able iff c gives output t for some
set of input values.

(b) conclude that any ef   cient way of solving sat would yield an ef   cient way
to solve circuit-sat.

homework problems
problem 3.23.
a 3-conjunctive form (3cf) formula is a conjunctive form formula in which each

   mcs        2017/6/5     19:42     page 85     #93

3.7. references

85

or-term is an or of at most 3 variables or negations of variables. although it
may be hard to tell if a propositional formula f is satis   able, it is always easy to
construct a formula c.f / that is

(cid:15) in 3-conjunctive form,
(cid:15) has at most 24 times as many occurrences of variables as f , and
(cid:15) is satis   able iff f is satis   able.
to construct c.f /, introduce a different new variables for each operator that

occurs in f . for example, if f was

..p xor q/ xor r/ or .p and s /

(3.33)

we might use new variables x1, x2 o and a corresponding to the operator occur-
rences as follows:

..p xor           

q/ xor           

r/ or           

.p and           

x1

x2

o

a

s /:

next we write a formula that constrains each new variable to have the same truth
value as the subformula determined by its corresponding operator. for the example
above, these constraining formulas would be

x1 iff .p xor q/;
x2 iff .x1 xor r/;

a iff .p and s /;
o iff .x2 or a/

(a) explain why the and of the four constraining formulas above along with a
   fth formula consisting of just the variable o will be satis   able iff (3.33) is satis   -
able.

(b) explain why each constraining formula will be equivalent to a 3cf formula
with at most 24 occurrences of variables.
(c) using the ideas illustrated in the previous parts, explain how to construct c.f /
for an arbitrary propositional formula f .

   mcs        2017/6/5     19:42     page 86     #94

86

chapter 3 logical formulas

problems for section 3.6

practice problems
problem 3.24.
for each of the following propositions:

1. 8x 9y: 2x (cid:0) y d 0
2. 8x 9y: x (cid:0) 2y d 0
3. 8x: x < 10 implies .8y: y < x implies y < 9/
4. 8x 9y:   y > x ^ 9z: y c z d 100  

determine which propositions are true when the variables range over:
(a) the nonnegative integers.

(b) the integers.

(c) the real numbers.

problem 3.25.
let q.x; y/ be the statement

   x has been a contestant on television show y.   

the universe of discourse for x is the set of all students at your school and for y is
the set of all quiz shows that have ever been on television.

determine whether or not each of the following expressions is logically equiva-

lent to the sentence:

   no student at your school has ever been a contestant on a television quiz show.   
(a) 8x 8y: not.q.x; y//
(b) 9x 9y: not.q.x; y//
(c) not.8x 8y: q.x; y//
(d) not.9x 9y: q.x; y//

   mcs        2017/6/5     19:42     page 87     #95

3.7. references

87

problem 3.26.
express each of the following statements using quanti   ers, logical connectives,
and/or the following predicates
p .x/: x is a monkey,

q.x/: x is a 6.042 ta,

r.x/: x comes from the 23rd century,

s.x/: x likes to eat pizza,

where x ranges over all living things.

(a) no monkeys like to eat pizza.

(b) nobody from the 23rd century dislikes eating pizza.

(c) all 6.042 tas are monkeys.

(d) no 6.042 ta comes from the 23rd century.

(e) does part (d) follow logically from parts (a), (b), (c)? if so, give a proof. if
not, give a counterexample.
(f) translate into english: .8x/.r.x/ _ s.x/ (cid:0)! q.x//.
(g) translate into english:

  9x: r.x/ and not.q.x//   implies 8x: .p .x/ implies s.x//:

problem 3.27.
find a counter-model showing the following is not valid.
9x:p .x/ implies 8x:p .x/

(just de   ne your counter-model. you do not need to verify that it is correct.)

problem 3.28.
find a counter-model showing the following is not valid.

  9x: p .x/ and 9x:q.x/   implies 9x:  p .x/ and q.x/  

(just de   ne your counter-model. you do not need to verify that it is correct.)

   mcs        2017/6/5     19:42     page 88     #96

88

chapter 3 logical formulas

problem 3.29.
which of the following are valid? for those that are not valid, desribe a counter-
model.
(a) 9x9y: p .x; y/ implies 9y9x: p .x; y/
(b) 8x9y: q.x; y/ implies 9y8x: q.x; y/
(c) 9x8y: r.x; y/ implies 8y9x: r.x; y/
(d) not.9x s.x// iff 8x not.s.x//

problem 3.30. (a) verify that the propositional formula

.p implies q/ or .q implies p /

is valid.

(b) the valid formula of part (a) leads to sound proof method: to prove that an im-
plication is true, just prove that its converse is false.5 for example, from elementary
calculus we know that the assertion

if a function is continuous, then it is differentiable

is false. this allows us to reach at the correct conclusion that its converse,

if a function is differentiable, then it is continuous

is true, as indeed it is.
but wait a minute! the implication

if a function is differentiable, then it is not continuous

is completely false. so we could conclude that its converse

if a function is not continuous, then it is differentiable,

should be true, but in fact the converse is also completely false.
so something has gone wrong here. explain what.

5this problem was stimulated by the discussion of the fallacy in [4].

   mcs        2017/6/5     19:42     page 89     #97

3.7. references

89

class problems
problem 3.31.
a media tycoon has an idea for an all-news television network called lnn: the
logic news network. each segment will begin with a de   nition of the domain of
discourse and a few predicates. the day   s happenings can then be communicated
concisely in logic notation. for example, a broadcast might begin as follows:

this is lnn. the domain of discourse is

falbert; ben; claire; david; emilyg:

let d.x/ be a predicate that is true if x is deceitful. let l.x; y/
be a predicate that is true if x likes y. let g.x; y/ be a predicate that
is true if x gave gifts to y.

translate the following broadcasts in logic notation into (english) statements.

(a)

not.d.ben/ or d.david// implies

.l.albert; ben/ and l.ben; albert//:

(b)
8x: ..x d claire and not.l.x; emily/// or .x    claire and l.x; emily///
8x: ..x d david and l.x; claire// or .x    david and not.l.x; claire////

and

(c)

(d)

not.d.claire// implies .g.albert; ben/ and 9x: g.ben; x//

8x9y9z .y    z/ and l.x; y/ and not.l.x; z//:

(e) how could you express    everyone except for claire likes emily    using just
propositional connectives without using any quanti   ers (8;9)? can you generalize
to explain how any logical formula over this domain of discourse can be expressed
without quanti   ers? how big would the formula in the previous part be if it was
expressed this way?

   mcs        2017/6/5     19:42     page 90     #98

90

chapter 3 logical formulas

problem 3.32.
the goal of this problem is to translate some assertions about binary strings into
logic notation. the domain of discourse is the set of all    nite-length binary strings:
(cid:21), 0, 1, 00, 01, 10, 11, 000, 001, . . . . (here (cid:21) denotes the empty string.) in your
translations, you may use all the ordinary logic symbols (including =), variables,
and the binary symbols 0, 1 denoting 0, 1.

a string like 01x0y of binary symbols and variables denotes the concatenation
of the symbols and the binary strings represented by the variables. for example, if
the value of x is 011 and the value of y is 1111, then the value of 01x0y is the
binary string 0101101111.

here are some examples of formulas and their english translations. names for
these predicates are listed in the third column so that you can reuse them in your
solutions (as we do in the de   nition of the predicate no-1s below).

meaning
x is a pre   x of y
x is a substring of y
x is empty or a string of 0   s not.substring.1; x// no-1s(x)

formula
9z .xz d y/
9u9v .uxv d y/

name
prefix(x; y)
substring(x; y)

(a) x consists of three copies of some string.

(b) x is an even-length string of 0   s.

(c) x does not contain both a 0 and a 1.
(d) x is the binary representation of 2k c 1 for some integer k (cid:21) 0.
(e) an elegant, slightly trickier way to de   ne no-1s.x/ is:

prefix.x; 0x/:

(*)

explain why (*) is true only when x is a string of 0   s.

problem 3.33.
for each of the logical formulas, indicate whether or not it is true when the do-
main of discourse is n, (the nonnegative integers 0, 1, 2, . . . ), z (the integers), q
(the rationals), r (the real numbers), and c (the complex numbers). add a brief
explanation to the few cases that merit one.

   mcs        2017/6/5     19:42     page 91     #99

3.7. references

91

9x: x2 d 2
8x:9y: x2 d y
8y:9x: x2 d y
8x    0:9y: xy d 1
9x:9y: x c 2y d 2 and 2x c 4y d 5

problem 3.34.
show that

.8x9y: p .x; y// (cid:0)! 8z: p .z; z/

is not valid by describing a counter-model.

homework problems
problem 3.35.
express each of the following predicates and propositions in formal logic notation.
the domain of discourse is the nonnegative integers, n. moreover, in addition to
the propositional operators, variables and quanti   ers, you may de   ne predicates
using addition, multiplication, and equality symbols, and nonnegative integer con-
stants (0, 1,. . . ), but no exponentiation (like xy). for example, the predicate    n is
an even number    could be de   ned by either of the following formulas:

9m: .2m d n/;

9m: .m c m d n/:

(a) m is a divisor of n.

(b) n is a prime number.

(c) n is a power of a prime.

problem 3.36.
translate the following sentence into a predicate formula:

there is a student who has e-mailed at most two other people in the
class, besides possibly himself.

the domain of discourse should be the set of students in the class; in addition,

the only predicates that you may use are

   mcs        2017/6/5     19:42     page 92     #100

92

chapter 3 logical formulas

(cid:15) equality, and
(cid:15) e.x; y/, meaning that    x has sent e-mail to y.   

problem 3.37. (a) translate the following sentence into a predicate formula:

there is a student who has e-mailed at most n other people in the class,
besides possibly himself.

the domain of discourse should be the set of students in the class; in addition, the
only predicates that you may use are

(cid:15) equality,
(cid:15) e.x; y/, meaning that    x has sent e-mail to y.   
(b) explain how you would use your predicate formula (or some variant of it) to
express the following two sentences.

1. there is a student who has emailed at least n other people in the class, besides

possibly himself.

2. there is a student who has emailed exactly n other people in the class, besides

possibly himself.

exam problems
problem 3.38.
for each of the logic formulas below, indicate the smallest domain in which it is
true, among
n(nonnegative integers); z(integers); q(rationals); r(reals); c(complex numbers);

or state    none    if it is not true in any of them.
i. 8x9y: y d 3x
ii. 8x9y: 3y d x
iii. 8x9y: y2 d x
iv. 8x9y: y < x
v. 8x9y: y3 d x

   mcs        2017/6/5     19:42     page 93     #101

3.7. references

93

vi. 8x    0:9y; z: y    z and y2 d x d z2

problem 3.39.

the following predicate logic formula is invalid:

8x;9y:p .x; y/ (cid:0)! 9y;8x:p .x; y/

which of the following are counter models for it?
1. the predicate p .x; y/ d    y (cid:1) x d 1    where the domain of discourse is q.
2. the predicate p .x; y/ d    y < x    where the domain of discourse is r.
3. the predicate p .x; y/ d    y (cid:1) x d 2    where the domain of discourse is r

without 0.

4. the predicate p .x; y/ d    yxy d x    where the domain of discourse is the

set of all binary strings, including the empty string.

problem 3.40.
some students from a large class will be lined up left to right. there will be at least
two students in the line. translate each of the following assertions into predicate
formulas with the set of students in the class as the domain of discourse. the only
predicates you may use are

(cid:15) equality and,
(cid:15) f .x; y/, meaning that    x is somewhere to the left of y in the line.    for
example, in the line    cda   , both f .c; a/ and f .c; d/ are true.

once you have de   ned a formula for a predicate p you may use the abbreviation
   p     in further formulas.
(a) student x is in the line.

(b) student x is    rst in line.

(c) student x is immediately to the right of student y.

(d) student x is second.

   mcs        2017/6/5     19:42     page 94     #102

94

chapter 3 logical formulas

problem 3.41.
we want to    nd predicate formulas about the nonnegative integers n in which   is
the only predicate that appears, and no constants appear.

for example, there is such a formula de   ning the equality predicate:

  x d y   wwd   x   y and y   x  :

once predicate is shown to be expressible solely in terms of  , it may then be used
in subsequent translations. for example,

  x > 0   wwd 9y: not.x d y/ and y   x:

(a)   x d 0  .
(b)   x d y c 1  .
hint: if an integer is bigger than y, then it must be (cid:21) x.
(c) x d 3.

problem 3.42.
predicate formulas whose only predicate symbol is equality are called    pure equal-
ity    formulas. for example,

8x 8y: x d y

(1-element)

is a pure equality formula. its meaning is that there is exactly one element in the
domain of discourse.6 another such formula is
9a 9b 8x: x d a or x d b:

(  2-elements)

its meaning is that there are at most two elements in the domain of discourse.

a formula that is not a pure equality formula is

x   y:

(not-pure)
formula (not-pure) uses the less-than-or-equal predicate   which is not allowed.7
(a) describe a pure equality formula that means that there are exactly two ele-
ments in the domain of discourse.

6remember, a domain of discourse is not allowed to be empty.
7in fact, formula (not-pure) only makes sense when the domain elements are ordered, while pure

equality formulas make sense over every domain.

   mcs        2017/6/5     19:42     page 95     #103

3.7. references

95

(b) describe a pure equality formula that means that there are exactly three ele-
ments in the domain of discourse.

problem 3.43. (a) a predicate r on the nonnegative integers is true in   nitely often
(i.o.) when r.n/ is true for in   nitely many n 2 n.
we can express the fact that r is true i.o. with a formula of the form:

where q1; q2 are quanti   ers from among

q1 q2: r.n/;

8n;
9n; 8n (cid:21) n0; 9n (cid:21) n0;
8n0; 9n0; 8n0 (cid:21) n; 9n0 (cid:21) n;

and n; n0 range over nonnegative integers.
identify the proper quantifers:

q1
q2

(b) a predicate s on the nonnegative integers is true almost everywhere (a.e.)
when s.n/ is false for only    nitely many n 2 n.
we can express the fact that s is true a.e. with a formula of the form

where q3; q4 are quanti   ers from those above:

q3 q4: s.n/;

8n;
9n; 8n (cid:21) n0; 9n (cid:21) n0;
8n0; 9n0; 8n0 (cid:21) n; 9n0 (cid:21) n:

identify the proper quantifers:

q3
q4

problem 3.44.
let f w n ! r be a real-valued total function. a limit point of f is a real number

   mcs        2017/6/5     19:42     page 96     #104

96

chapter 3 logical formulas

r 2 r such that f .n/ is close to r for in   nitely many n, where    close to    means
within distance (cid:15) for whatever positive real number (cid:15) you may choose.

we can express the fact that r is a limit point of f with a logical formula of the

form:

q0 q1 q2: jf .n/ (cid:0) rj   (cid:15);

where q0; q1; q2 is a sequence of three quanti   ers from among:

8n;
8n0;
8(cid:15) (cid:21) 0; 9(cid:15) (cid:21) 0; 8(cid:15) > 0;

8n (cid:21) n0; 9n (cid:21) n0:
8n0 (cid:21) n; 9n0 (cid:21) n:
9(cid:15) > 0:

9n;
9n0;

here the n; n0 range over nonnegative integers, and (cid:15) ranges over real numbers.

identify the proper quantifers:

q0

q1

q2

   mcs        2017/6/5     19:42     page 97     #105

4

mathematical data types
we have assumed that you   ve already been introduced to the concepts of sets, se-
quences, and functions, and we   ve used them informally several times in previous
sections. in this chapter, we   ll now take a more careful look at these mathemati-
cal data types. we   ll quickly review the basic de   nitions, add a few more such as
   images    and    inverse images    that may not be familiar, and end the chapter with
some methods for comparing the sizes of sets.

4.1 sets

informally, a set is a bunch of objects, which are called the elements of the set.
the elements of a set can be just about anything: numbers, points in space, or even
other sets. the conventional way to write down a set is to list the elements inside
curly-braces. for example, here are some sets:

a d falex; tippy; shells; shadowg
b d fred; blue; yellowg
c d ffa; bg;fa; cg;fb; cgg

dead pets
primary colors
a set of sets

this works    ne for small    nite sets. other sets might be de   ned by indicating how
to generate a list of them:

d wwd f1; 2; 4; 8; 16; : : :g

the powers of 2

the order of elements is not signi   cant, so fx; yg and fy; xg are the same set
written two different ways. also, any object is, or is not, an element of a given set   
there is no notion of an element appearing more than once in a set.1 so, writing
fx; xg is just indicating the same thing twice: that x is in the set. in particular,
fx; xg d fxg.
the expression    e 2 s    asserts that e is an element of set s. for example,
32 2 d and blue 2 b, but tailspin 62 a   yet.
sets are simple,    exible, and everywhere. you   ll    nd some set mentioned in

nearly every section of this text.

1it   s not hard to develop a notion of multisets in which elements can occur more than once, but

multisets are not ordinary sets and are not covered in this text.

   mcs        2017/6/5     19:42     page 98     #106

98

chapter 4 mathematical data types

4.1.1 some popular sets
mathematicians have devised special symbols to represent some common sets.

symbol
;
n
z
q
r
c

set
the empty set
nonnegative integers
integers
rational numbers
real numbers
complex numbers

elements
none
f0; 1; 2; 3; : : :g
f: : : ;(cid:0)3;(cid:0)2;(cid:0)1; 0; 1; 2; 3; : : :g
2 ; (cid:0) 5
p
3 ; 16; etc.
(cid:25); e; (cid:0)9;
p
2; etc.
2 (cid:0) 2i; etc.
i; 19
2 ;

1

a superscript    c    restricts a set to its positive elements; for example, rc denotes
the set of positive real numbers. similarly, z(cid:0) denotes the set of negative integers.
4.1.2 comparing and combining sets
the expression s   t indicates that set s is a subset of set t , which means that
every element of s is also an element of t . for example, n   z because every
nonnegative integer is an integer; q   r because every rational number is a real
number, but c 6  r because not every complex number is a real number.
as a memory trick, think of the         symbol as like the         sign with the smaller
set or number on the left-hand side. notice that just as n   n for any number n,
also s   s for any set s.
there is also a relation (cid:26) on sets like the    less than    relation < on numbers.
s (cid:26) t means that s is a subset of t , but the two are not equal. so just as n 6< n
for every number n, also a 6(cid:26) a, for every set a.    s (cid:26) t     is read as    s is a strict
subset of t .   

there are several basic ways to combine sets. for example, suppose

x wwd f1; 2; 3g;
y wwd f2; 3; 4g:

de   nition 4.1.1.

(cid:15) the union of sets a and b, denoted a [ b, includes exactly the elements
appearing in a or b or both. that is,
x 2 a [ b iff

x 2 a or x 2 b:

so x [ y d f1; 2; 3; 4g.

   mcs        2017/6/5     19:42     page 99     #107

4.1. sets

99

(cid:15) the intersection of a and b, denoted a \ b, consists of all elements that
appear in both a and b. that is,

x 2 a \ b iff

x 2 a and x 2 b:

so, x \ y d f2; 3g.
(cid:15) the set difference of a and b, denoted a (cid:0) b, consists of all elements that
are in a, but not in b. that is,

x 2 a (cid:0) b iff
so, x (cid:0) y d f1g and y (cid:0) x d f4g.

x 2 a and x     b:

often all the sets being considered are subsets of a known domain of discourse
d. then for any subset a of d, we de   ne a to be the set of all elements of d not
in a. that is,

a wwd d (cid:0) a:

the set a is called the complement of a. so

a d ; iff a d d:

for example, if the domain we   re working with is the integers, the complement

of the nonnegative integers is the set of negative integers:

n d z(cid:0)

:

we can use complement to rephrase subset in terms of equality

a   b is equivalent to a \ b d ;:

4.1.3 power set
the set of all the subsets of a set a is called the power set pow.a/ of a. so

b 2 pow.a/

iff b   a:

for example, the elements of pow.f1; 2g/ are ;;f1g;f2g and f1; 2g.
more generally, if a has n elements, then there are 2n sets in pow.a/   see the-
orem 4.5.5. for this reason, some authors use the notation 2a instead of pow.a/.

   mcs        2017/6/5     19:42     page 100     #108

100

chapter 4 mathematical data types

4.1.4 set builder notation
an important use of predicates is in set builder notation. we   ll often want to talk
about sets that cannot be described very well by listing the elements explicitly or
by taking unions, intersections, etc., of easily described sets. set builder notation
often comes to the rescue. the idea is to de   ne a set using a predicate; in particular,
the set consists of all values that make the predicate true. here are some examples
of set builder notation:

a wwd fn 2 n j n is a prime and n d 4k c 1 for some integer kg;
b wwd fx 2 r j x3 (cid:0) 3x c 1 > 0g;
c wwd fa c bi 2 c j a2 c 2b2   1g;
d wwd fl 2 books j l is cited in this textg:

the set a consists of all nonnegative integers n for which the predicate

   n is a prime and n d 4k c 1 for some integer k   

is true. thus, the smallest elements of a are:

5; 13; 17; 29; 37; 41; 53; 61; 73; : : : :

trying to indicate the set a by listing these    rst few elements wouldn   t work very
well; even after ten terms, the pattern is not obvious. similarly, the set b consists
of all real numbers x for which the predicate

x3 (cid:0) 3x c 1 > 0

is true. in this case, an explicit description of the set b in terms of intervals would
require solving a cubic equation. set c consists of all complex numbers a c bi
such that:

a2 c 2b2   1

this is an oval-shaped region around the origin in the complex plane. finally, the
members of set d can be determined by    ltering out journal articles in from the list
of references in the bibliography 22.5.

4.1.5 proving set equalities
two sets are de   ned to be equal if they have exactly the same elements. that is,
x d y means that z 2 x if and only if z 2 y , for all elements z.2 so, set
equalities can be formulated and proved as    iff    theorems. for example:

2this is actually the    rst of the zfc axioms for set theory mentioned at the end of section 1.3

and discussed further in section 8.3.2.

   mcs        2017/6/5     19:42     page 101     #109

4.1. sets

theorem 4.1.2. [distributive law for sets] let a, b and c be sets. then:

a \ .b [ c / d .a \ b/ [ .a \ c /

proof. the equality (4.1) is equivalent to the assertion that

z 2 a \ .b [ c /

iff

z 2 .a \ b/ [ .a \ c /

101

(4.1)

(4.2)

for all z. now we   ll prove (4.2) by a chain of iff   s.

now we have
z 2 a \ .b [ c /
iff
iff
iff
iff
iff

.z 2 a/ and .z 2 b [ c /
.z 2 a/ and .z 2 b or z 2 c /
.z 2 a and z 2 b/ or .z 2 a and z 2 c /
.z 2 a \ b/ or .z 2 a \ c /
z 2 .a \ b/ [ .a \ c /

(def of \)
(def of [)
(and distributivity (3.9))
(def of \)
(def of [)
(cid:4)

the proof of theorem 4.1.2 illustrates a general method for proving a set equality
involving the basic set operations by checking that a corresponding propositional
formula is valid. as a further example, from de morgan   s law (3.14) for proposi-
tions

not.p and q/ is equivalent to p or q

we can derive (problem 4.5) a corresponding de morgan   s law for set equality:

a \ b d a [ b:

(4.3)

despite this correspondence between two kinds of operations, it   s important not
to confuse propositional operations with set operations. for example, if x and y
are sets, then it is wrong to write    x and y     instead of    x \ y .    applying and
to sets will cause your compiler   or your grader   to throw a type error, because
an operation that is only supposed to be applied to truth values has been applied to
sets. likewise, if p and q are propositions, then it is a type error to write    p [ q   
instead of    p or q.   

   mcs        2017/6/5     19:42     page 102     #110

102

chapter 4 mathematical data types

4.2 sequences

sets provide one way to group a collection of objects. another way is in a sequence,
which is a list of objects called its components, members, or elements. short se-
quences are commonly described by listing the elements between parentheses; for
example, the sequence .a; b; c/ has three components. it would also be referred to
as a three element sequence or a sequence of length three. these phrases are all
synonyms   sequences are so basic that they appear everywhere and there are a lot
of ways to talk about them.

while both sets and sequences perform a gathering role, there are several differ-

ences.

(cid:15) the elements of a set are required to be distinct, but elements in a sequence
can be the same. thus, .a; b; a/ is a valid sequence of length three, but
fa; b; ag is a set with two elements, not three.
(cid:15) the elements in a sequence have a speci   ed order, but the elements of a
set do not. for example, .a; b; c/ and .a; c; b/ are different sequences, but
fa; b; cg and fa; c; bg are the same set.
(cid:15) texts differ on notation for the empty sequence; we use (cid:21) for the empty
sequence.

the product operation is one link between sets and sequences. a cartesian
product of sets, s1 (cid:2) s2 (cid:2) (cid:1)(cid:1)(cid:1) (cid:2) sn, is a new set consisting of all sequences where
the    rst component is drawn from s1, the second from s2, and so forth. length two
sequences are called pairs.3 for example, n (cid:2) fa; bg is the set of all pairs whose
   rst element is a nonnegative integer and whose second element is an a or a b:

n (cid:2) fa; bg d f.0; a/; .0; b/; .1; a/; .1; b/; .2; a/; .2; b/; : : :g

a product of n copies of a set s is denoted s n. for example, f0; 1g3 is the set of
all 3-bit sequences:
f0; 1g3 d f.0; 0; 0/; .0; 0; 1/; .0; 1; 0/; .0; 1; 1/; .1; 0; 0/; .1; 0; 1/; .1; 1; 0/; .1; 1; 1/g

3some texts call them ordered pairs.

   mcs        2017/6/5     19:42     page 103     #111

4.3. functions

103

4.3 functions

4.3.1 domains and images
a function assigns an element of one set, called the domain, to an element of an-
other set, called the codomain. the notation

f w a ! b

indicates that f is a function with domain a and codomain b. the familiar notation
   f .a/ d b    indicates that f assigns the element b 2 b to a. here b would be
called the value of f at argument a.

functions are often de   ned by formulas, as in:
f1.x/ wwd 1
x2

where x is a real-valued variable, or

f2.y; z/ wwd y10yz

where y and z range over binary strings, or

             
f3.x; n/ wwd the length n sequence .x; : : : ; x/

n x   s

where n ranges over the nonnegative integers.

a function with a    nite domain could be speci   ed by a table that shows the value
of the function at each element of the domain. for example, a function f4.p; q/
where p and q are propositional variables is speci   ed by:

p q f4.p; q/
t t
t f
f t
f f

t
f
t
t

notice that f4 could also have been described by a formula:

f4.p; q/ wwd   p implies q  :

a function might also be de   ned by a procedure for computing its value at any
element of its domain, or by some other kind of speci   cation. for example, de   ne

   mcs        2017/6/5     19:42     page 104     #112

104

chapter 4 mathematical data types

f5.y/ to be the length of a left to right search of the bits in the binary string y until
a 1 appears, so

f5.0010/ d 3;
f5.100/ d 1;

f5.0000/

is unde   ned:

notice that f5 does not assign a value to any string of just 0   s. this illustrates
an important fact about functions: they need not assign a value to every element
in the domain. in fact this came up in our    rst example f1.x/ d 1=x2, which
does not assign a value to 0. so in general, functions may be partial functions,
meaning that there may be domain elements for which the function is not de   ned.
the set of domain elements for which a function is de   ned is called the support of
the function. if a function assigns a value to every element of its domain, that is, its
support equals its domain, it is called a total function.
it   s often useful to    nd the set of values a function takes when applied to the
elements in a set of arguments. so if f w a ! b, and s is a subset of a, we de   ne
f .s / to be the set of all the values that f takes when it is applied to elements of s.
that is,

f .s / wwd fb 2 b j f .s/ d b for some s 2 sg:

for example, if we let   r; s   denote set of numbers in the interval from r to s on the
real line, then f1.  1; 2  / d   1=4; 1  .
for another example, let   s take the    search for a 1    function f5. if we let x be
the set of binary words which start with an even number of 0   s followed by a 1,
then f5.x / would be the odd nonnegative integers.

applying f to a set s of arguments is referred to as    applying f pointwise to
s   , and the set f .s / is referred to as the image of s under f .4 the set of values
that arise from applying f to all possible arguments is called the range of f . that
is,

range.f / wwd f .domain.f //:

some authors refer to the codomain as the range of a function, but they shouldn   t.
the distinction between the range and codomain will be important later in sec-
tions 4.5 when we relate sizes of sets to properties of functions between them.

4there is a picky distinction between the function f which applies to elements of a and the
function which applies f pointwise to subsets of a, because the domain of f is a, while the domain
of pointwise-f is pow.a/. it is usually clear from context whether f or pointwise-f is meant, so
there is no harm in overloading the symbol f in this way.

   mcs        2017/6/5     19:42     page 105     #113

4.4. binary relations

105

4.3.2 function composition
doing things step by step is a universal idea. taking a walk is a literal example, but
so is cooking from a recipe, executing a computer program, evaluating a formula,
and recovering from substance abuse.

abstractly, taking a step amounts to applying a function, and going step by step
corresponds to applying functions one after the other. this is captured by the op-
eration of composing functions. composing the functions f and g means that    rst
f is applied to some argument, x, to produce f .x/, and then g is applied to that
result to produce g.f .x//.
de   nition 4.3.1. for functions f w a ! b and g w b ! c , the composition,
g    f , of g with f is de   ned to be the function from a to c de   ned by the rule:

.g    f /.x/ wwd g.f .x//;

for all x 2 a.
function composition is familiar as a basic concept from elementary calculus,

and it plays an equally basic role in discrete mathematics.

4.4 binary relations

binary relations de   ne relations between two objects. for example,    less-than    on
the real numbers relates every real number a to a real number b, precisely when
a < b. similarly, the subset relation relates a set a to another set b precisely when
a   b. a function f w a ! b is a special case of binary relation in which an
element a 2 a is related to an element b 2 b precisely when b d f .a/.
in this section we   ll de   ne some basic vocabulary and properties of binary rela-

tions.
de   nition 4.4.1. a binary relation r consists of a set a, called the domain of r,
a set b called the codomain of r, and a subset of a (cid:2) b called the graph of r.
a relation whose domain is a and codomain is b is said to be    between a and
b   , or    from a to b.    as with functions, we write r w a ! b to indicate that r
is a relation from a to b. when the domain and codomain are the same set a we
simply say the relation is    on a.    it   s common to use    a r b    to mean that the pair
.a; b/ is in the graph of r.5

5writing the relation or operator symbol between its arguments is called in   x notation.

in   x
expressions like    m < n    or    mc n    are the usual notation used for things like the less-then relation
or the addition operation rather than pre   x notation like    < .m; n/    or    c.m; n/.   

   mcs        2017/6/5     19:42     page 106     #114

106

chapter 4 mathematical data types

notice that de   nition 4.4.1 is exactly the same as the de   nition in section 4.3
of a function, except that it doesn   t require the functional condition that, for each
domain element a, there is at most one pair in the graph whose    rst coordinate is
a. as we said, a function is a special case of a binary relation.

the    in-charge of    relation chrg for mit in spring    10 subjects and instructors
is a handy example of a binary relation. its domain fac is the names of all the
mit faculty and instructional staff, and its codomain is the set subnums of subject
numbers in the fall    09   spring    10 mit subject listing. the graph of chrg contains
precisely the pairs of the form

.hinstructor-namei ;hsubject-numi/

such that the faculty member named hinstructor-namei is in charge of the subject
with number hsubject-numi that was offered in spring    10. so graph.chrg/ con-
tains pairs like

6.uat/
6.011/
6.uat/
6.881/
6.882/
6.00/

.t. eng;
.g. freeman;
.g. freeman;
.g. freeman;
.g. freeman;
.j. guttag;
.a. r. meyer; 6.042/
.a. r. meyer; 18.062/
.a. r. meyer; 6.844/
.t. leighton; 6.042/
.t. leighton; 18.062/

:::

(4.4)

some subjects in the codomain subnums do not appear among this list of pairs   
that is, they are not in range.chrg/. these are the fall term-only subjects. simi-
larly, there are instructors in the domain fac who do not appear in the list because
they are not in charge of any spring term subjects.

4.4.1 relation diagrams
some standard properties of a relation can be visualized in terms of a diagram. the
diagram for a binary relation r has points corresponding to the elements of the
domain appearing in one column (a very long column if domain.r/ is in   nite). all
the elements of the codomain appear in another column which we   ll usually picture
as being to the right of the domain column. there is an arrow going from a point a
in the left-hand, domain column to a point b in the right-hand, codomain column,

   mcs        2017/6/5     19:42     page 107     #115

4.4. binary relations

107

precisely when the corresponding elements are related by r. for example, here are
diagrams for two functions:

a
a

b
- 1
2

3

4

 

 

b ppppppq
  3
c ppppppq
  3
d  
e  

 

 

 

 

a
a

b
- 1
2

3

4

5

b ppppppq
  3
c q
d  

 
q

q
 

 

q

qqs

being a function is certainly an important property of a binary relation. what it
means is that every point in the domain column has at most one arrow coming out
of it. so we can describe being a function as the      1 arrow out    property. there
are four more standard properties of relations that come up all the time. here are
all    ve properties de   ned in terms of arrows:

de   nition 4.4.2. a binary relation r is:

(cid:15) a function when it has the     1 arrow out   property.
(cid:15) surjective when it has the   (cid:21) 1 arrows in   property. that is, every point in
the right-hand, codomain column has at least one arrow pointing to it.
(cid:15) total when it has the   (cid:21) 1 arrows out   property.
(cid:15) injective when it has the     1 arrow in   property.
(cid:15) bijective when it has both the   d 1 arrow out   and the   d 1 arrow in   prop-
erty.

from here on, we   ll stop mentioning the arrows in these properties and for ex-
ample, just write     1 in   instead of     1 arrows in  .
so in the diagrams above, the relation on the left has the   d 1 out   and   (cid:21) 1 in  
properties, which means it is a total, surjective function. but it does not have the
    1 in   property because element 3 has two arrows going into it; it is not injective.
the relation on the right has the   d 1 out   and     1 in   properties, which means
it is a total, injective function. but it does not have the   (cid:21) 1 in   property because
element 4 has no arrow going into it; it is not surjective.

the arrows in a diagram for r correspond, of course, exactly to the pairs in the
graph of r. notice that the arrows alone are not enough to determine, for example,

   mcs        2017/6/5     19:42     page 108     #116

108

chapter 4 mathematical data types

if r has the   (cid:21) 1 out  , total, property. if all we knew were the arrows, we wouldn   t
know about any points in the domain column that had no arrows out.
in other
words, graph.r/ alone does not determine whether r is total: we also need to
know what domain.r/ is.
example 4.4.3. the function de   ned by the formula 1=x2 has the   (cid:21) 1 out   prop-
erty if its domain is rc, but not if its domain is some set of real numbers including
0. it has the   d 1 in   and   d 1 out   property if its domain and codomain are both
rc, but it has neither the     1 in   nor the   (cid:21) 1 out   property if its domain and
codomain are both r.

4.4.2 relational images
the idea of the image of a set under a function extends directly to relations.

de   nition 4.4.4. the image of a set y under a relation r written r.y /, is the set
of elements of the codomain b of r that are related to some element in y . in terms
of the relation diagram, r.y / is the set of points with an arrow coming in that starts
from some point in y . the range range.r/ of r is the image r.a/ of the domain
a of r. that is, range.r/ is the set of all points in the codomain with an arrow
coming in.

for example, the set of subject numbers that meyer is in charge of in spring    10
is exactly chrg.a. meyer/. to    gure out what this is, we look for all the arrows
in the chrg diagram that start at    a. meyer,    and see which subject-numbers are
at the other end of these arrows. looking at the list (4.4) of pairs in graph.chrg/,
we see that these subject-numbers are f6.042, 18.062, 6.844g. similarly, to    nd the
subject numbers that either freeman or eng are in charge of, we can collect all the
arrows that start at either    g. freeman,    or    t. eng    and, again, see which subject-
numbers are at the other end of these arrows. this is chrg.fg. freeman; t. engg/.
looking again at the list (4.4), we see that

chrg.fg. freeman; t. engg/ d f6.011, 6.881, 6.882, 6.uatg

finally, fac is the set of all in-charge instructors, so chrg.fac/ is the set of all the
subjects listed for spring    10.

inverse relations and images
de   nition 4.4.5. the inverse, r
to a de   ned by the rule

(cid:0)1 of a relation r w a ! b is the relation from b
(cid:0)1 a iff a r b:

b r

   mcs        2017/6/5     19:42     page 109     #117

4.5. finite cardinality

109

in other words, r

(cid:0)1 is the relation you get by reversing the direction of the

arrows in the diagram of r.
de   nition 4.4.6. the inverse image of a set x   b under the relation r is de   ned
(cid:0)1.x /, namely, the set of elements in a connected by an arrow to some
to be r
(cid:0)1.b/, namely, the set of
element in b. the support support.r/ is de   ned to r
domain elements with at least one arrow out. the support of r is also called the
domain of de   nition of r.

continuing with the in-charge example above, the set of instructors in charge
of 6.uat in spring    10 is exactly the inverse image of f6.uatg under the chrg
relation. from the list (4.4), we see that eng and freeman are both in charge of
6.uat, that is,

ft. eng; d. freemang   chrg

(cid:0)1.f6.uatg/:

we can   t assert equality here because there may be additional pairs further down
the list showing that additional instructors are co-incharge of 6.uat.

now let intro be the set of introductory course 6 subject numbers. these are the
subject numbers that start with    6.0.    so the set of names of the instructors who
were in-charge of introductory course 6 subjects in spring    10, is chrg(cid:0)1.intro/.
from the part of the chrg list shown in (4.4), we see that meyer, leighton, free-
man, and guttag were among the instructors in charge of introductory subjects in
spring    10. that is,

fmeyer, leighton, freeman, guttagg   chrg

(cid:0)1.intro/:

finally, chrg(cid:0)1.subnums/ is the set of all instructors who were in charge of a
subject listed for spring    10.

4.5 finite cardinality

a    nite set is one that has only a    nite number of elements. this number of ele-
ments is the    size    or cardinality of the set:
de   nition 4.5.1. if a is a    nite set, the cardinality jaj of a is the number of
elements in a.

a    nite set may have no elements (the empty set), or one element, or two ele-

ments,. . . , so the cardinality of    nite sets is always a nonnegative integer.

   mcs        2017/6/5     19:42     page 110     #118

110

chapter 4 mathematical data types

now suppose r w a ! b is a function. this means that every element of a
contributes at most one arrow to the diagram for r, so the number of arrows is at
most the number of elements in a. that is, if r is a function, then

jaj (cid:21) #arrows:

if r is also surjective, then every element of b has an arrow into it, so there must
be at least as many arrows in the diagram as the size of b. that is,

#arrows (cid:21) jbj:

combining these inequalities implies that if r is a surjective function, then jaj (cid:21)
jbj.
in short, if we write a surj b to mean that there is a surjective function from
a to b, then we   ve just proved a lemma: if a surj b for    nite sets a; b, then
jaj (cid:21) jbj. the following de   nition and lemma lists this statement and three similar
rules relating domain and codomain size to relational properties.

de   nition 4.5.2. let a; b be (not necessarily    nite) sets. then

1. a surj b iff there is a surjective function from a to b.

2. a inj b iff there is an injective total relation from a to b.

3. a bij b iff there is a bijection from a to b.

lemma 4.5.3. for    nite sets a; b:

1. if a surj b, then jaj (cid:21) jbj.
2. if a inj b, then jaj   jbj.
3. if a bij b, then jaj d jbj.

proof. we   ve already given an    arrow    proof of implication 1. implication 2. fol-
lows immediately from the fact that if r has the     1 out  , function property, and
(cid:0)1 is total and injective, so a surj b iff
the   (cid:21) 1 in  , surjective property, then r
b inj a. finally, since a bijection is both a surjective function and a total injective
(cid:4)
relation, implication 3. is an immediate consequence of the    rst two.

lemma 4.5.3.1. has a converse: if the size of a    nite set a is greater than or equal
to the size of another    nite set b then it   s always possible to de   ne a surjective

   mcs        2017/6/5     19:42     page 111     #119

4.5. finite cardinality

111

function from a to b. in fact, the surjection can be a total function. to see how
this works, suppose for example that

a d fa0; a1; a2; a3; a4; a5g
b d fb0; b1; b2; b3g:

then de   ne a total function f w a ! b by the rules
f .a0/ wwd b0; f .a1/ wwd b1; f .a2/ wwd b2; f .a3/ d f .a4/ d f .a5/ wwd b3:
more concisely,

f .ai / wwd bmin.i;3/;
for 0   i   5. since 5 (cid:21) 3, this f is a surjection.
so we have    gured out that if a and b are    nite sets, then jaj (cid:21) jbj if and only if
a surj b. all told, this argument wraps up the proof of a theorem that summarizes
the whole    nite cardinality story:

theorem 4.5.4. [mapping rules] for    nite sets a; b,

jaj (cid:21) jbj
jaj   jbj
jaj d jbj

iff a surj b;
iff a inj b;
iff a bij b;

(4.5)
(4.6)
(4.7)

4.5.1 how many subsets of a finite set?
as an application of the bijection mapping rule (4.7), we can give an easy proof of:

theorem 4.5.5. there are 2n subsets of an n-element set. that is,

jaj d n implies

j pow.a/j d 2n:

for example, the three-element set fa1; a2; a3g has eight different subsets:

;
fa3g

fa1g
fa1; a3g

fa2g
fa2; a3g

fa1; a2g
fa1; a2; a3g

theorem 4.5.5 follows from the fact that there is a simple bijection from subsets
of a to f0; 1gn, the n-bit sequences. namely, let a1; a2; : : : ; an be the elements
of a. the bijection maps each subset of s   a to the bit sequence .b1; : : : ; bn/
de   ned by the rule that

bi d 1

iff ai 2 s:

   mcs        2017/6/5     19:42     page 112     #120

112

chapter 4 mathematical data types

for example, if n d 10, then the subset fa2; a3; a5; a7; a10g maps to a 10-bit
sequence as follows:

subset:
sequence:

f
. 0;

a2; a3;

a5;

a7;

1;

1; 0;

1; 0;

1; 0; 0;

a10

g
1 /

now by bijection case of the mapping rules 4.5.4.(4.7),

j pow.a/j d jf0; 1gnj:

but every computer scientist knows6 that there are 2n n-bit sequences! so we   ve
proved theorem 4.5.5!

problems for section 4.1

practice problems
problem 4.1.
for any set a, let pow.a/ be its power set, the set of all its subsets; note that a is
itself a member of pow.a/. let ; denote the empty set.
(a) the elements of pow.f1; 2g/ are:
(b) the elements of pow.f;;f;gg/ are:
(c) how many elements are there in pow.f1; 2; : : : ; 8g/?

problem 4.2.
express each of the following assertions about sets by a formula of set theory.7
expressions may use abbreviations introduced earlier (so it is now legal to use    d   
because we just de   ned it).
(a) x d ;.
(b) x d fy; zg.
(c) x   y. (x is a subset of y that might equal y.)
6in case you   re someone who doesn   t know how many n-bit sequences there are, you   ll    nd the

2n explained in section 15.2.2.

7see section 8.3.2.

   mcs        2017/6/5     19:42     page 113     #121

4.5. finite cardinality

113

now we can explain how to express    x is a proper subset of y    as a set theory
formula using things we already know how to express. namely, letting    x    y   
abbreviate not.x d y/, the expression

.x   y and x    y/;
describes a formula of set theory that means x (cid:26) y.
from here on, feel free to use any previously expressed property in describing
formulas for the following:
(d) x d y [ z.
(e) x d y (cid:0) z.
(f) x d pow.y/.
z2y z.

(g) x ds
them. a more concise notation for    s

this means that y is supposed to be a collection of sets, and x is the union of all of

z2y z    is simply    s y.   

class problems
problem 4.3.
set formulas and propositional formulas.
(a) verify that the propositional formula .p and q/ or .p and q/ is equivalent
to p .

(b) prove that

a d .a (cid:0) b/ [ .a \ b/

for all sets, a; b, by showing

x 2 a iff x 2 .a (cid:0) b/ [ .a \ b/

for all elements x using the equivalence of part (a) in a chain of iff   s.

problem 4.4.
prove

theorem (distributivity of union over intersection).

a [ .b \ c / d .a [ b/ \ .a [ c /

(4.8)

   mcs        2017/6/5     19:42     page 114     #122

114

chapter 4 mathematical data types

for all sets, a; b; c , by using a chain of iff   s to show that

x 2 a [ .b \ c / iff x 2 .a [ b/ \ .a [ c /

for all elements x. you may assume the corresponding propositional equivalence 3.10.

problem 4.5.
prove de morgan   s law for set equality

a \ b d a [ b:

(4.9)
by showing with a chain of iff   s that x 2 the left-hand side of (4.9) iff x 2 the
right-hand side. you may assume the propositional version (3.14) of de morgan   s
law.

problem 4.6.
powerset properties.

let a and b be sets.

(a) prove that

pow.a \ b/ d pow.a/ \ pow.b/:

(b) prove that

.pow.a/ [ pow.b//   pow.a [ b/;
with equality holding iff one of a or b is a subset of the other.

problem 4.7.
subset take-away8 is a two player game played with a    nite set a of numbers.
players alternately choose nonempty subsets of a with the conditions that a player
may not choose

(cid:15) the whole set a, or
(cid:15) any set containing a set that was named earlier.
8from christenson & tilford, david gale   s subset takeaway game, american mathematical

monthly, oct. 1997

   mcs        2017/6/5     19:42     page 115     #123

4.5. finite cardinality

115

the    rst player who is unable to move loses the game.

for example, if the size of a is one, then there are no legal moves and the second
player wins. if a has exactly two elements, then the only legal moves are the two
one-element subsets of a. each is a good reply to the other, and so once again the
second player wins.

the    rst interesting case is when a has three elements. this time, if the    rst
player picks a subset with one element, the second player picks the subset with the
other two elements. if the    rst player picks a subset with two elements, the second
player picks the subset whose sole member is the third element. in both cases, these
moves lead to a situation that is the same as the start of a game on a set with two
elements, and thus leads to a win for the second player.

verify that when a has four elements, the second player still has a winning strat-

egy.9

homework problems
problem 4.8.
let a, b and c be sets. prove that

a [ b [ c d .a (cid:0) b/ [ .b (cid:0) c / [ .c (cid:0) a/ [ .a \ b \ c /

(4.10)

using a chain of iff   s as section 4.1.5.

problem 4.9.
union distributes over the intersection of two sets:

a [ .b \ c / d .a [ b/ \ .a [ c /

(4.11)

(see problem 4.4).

use (4.11) and the well ordering principle to prove the distributive law of

union over the intersection of n sets:

a [ .b1 \ (cid:1)(cid:1)(cid:1) \ bn(cid:0)1 \ bn/
d .a [ b1/ \ (cid:1)(cid:1)(cid:1) \ .a [ bn(cid:0)1/ \ .a [ bn/

(4.12)

extending formulas to an arbitrary number of terms is a common (if mundane)

application of the wop.

9david gale worked out some of the properties of this game and conjectured that the second

player wins the game for any set a. this remains an open problem.

   mcs        2017/6/5     19:42     page 116     #124

116

chapter 4 mathematical data types

exam problems
problem 4.10.
you   ve seen how certain set identities follow from corresponding propositional
equivalences. for example, you proved by a chain of iff   s that

.a (cid:0) b/ [ .a \ b/ d a

using the fact that the propositional formula .p andq/or.p andq/ is equivalent
to p .

state a similar propositional equivalence that would justify the key step in a proof

for the following set equality organized as a chain of iff   s:

a (cid:0) b d(cid:0)a (cid:0) c(cid:1) [ .b \ c / [(cid:0)(cid:0)a [ b(cid:1) \ c(cid:1)

(4.13)

(you are not being asked to write out an iff-proof of the equality or to write out

a proof of the propositional equivalence. just state the equivalence.)

problem 4.11.
you   ve seen how certain set identities follow from corresponding propositional
equivalences. for example, you proved by a chain of iff   s that

.a (cid:0) b/ [ .a \ b/ d a

using the fact that the propositional formula .p andq/or.p andq/ is equivalent
to p .

state a similar propositional equivalence that would justify the key step in a proof

for the following set equality organized as a chain of iff   s:
a \ b \ c d a [ .b (cid:0) a/ [ c :

(you are not being asked to write out an iff-proof of the equality or to write out

a proof of the propositional equivalence. just state the equivalence.)

problem 4.12.
the set equation

a \ b d a [ b

follows from a certain equivalence between propositional formulas.
(a) what is the equivalence?

(b) show how to derive the equation from this equivalence.

   mcs        2017/6/5     19:42     page 117     #125

4.5. finite cardinality

117

problems for section 4.2

homework problems
problem 4.13.
prove that for any sets a, b, c and d, if the cartesian products a (cid:2) b and c (cid:2) d
are disjoint, then either a and c are disjoint or b and d are disjoint.

problem 4.14. (a) give a simple example where the following result fails, and
brie   y explain why:
false theorem. for sets a, b, c and d, let

l wwd .a [ b/ (cid:2) .c [ d/;
r wwd .a (cid:2) c / [ .b (cid:2) d/:

then l d r.
(b) identify the mistake in the following proof of the false theorem.

bogus proof. since l and r are both sets of pairs, it   s suf   cient to prove that
.x; y/ 2 l  ! .x; y/ 2 r for all x; y.
the proof will be a chain of iff implications:

.x; y/ 2 r
.x; y/ 2 .a (cid:2) c / [ .b (cid:2) d/
.x; y/ 2 a (cid:2) c , or .x; y/ 2 b (cid:2) d
(x 2 a and y 2 c ) or else (x 2 b and y 2 d)
either x 2 a or x 2 b, and either y 2 c or y 2 d
x 2 a [ b and y 2 c [ d
.x; y/ 2 l.

iff
iff
iff
iff
iff
iff

(c) fix the proof to show that r   l.

(cid:4)

   mcs        2017/6/5     19:42     page 118     #126

118

chapter 4 mathematical data types

problems for section 4.4

practice problems
problem 4.15.
the inverse r
de   ned by:

(cid:0)1 of a binary relation r from a to b is the relation from b to a

(cid:0)1 a iff a r b:

b r

(cid:0)1 from r by    reversing the arrows    in
in other words, you get the diagram for r
the diagram describing r. now many of the relational properties of r correspond
to different properties of r

(cid:0)1. for example, r is total iff r

(cid:0)1 is a surjection.

fill in the remaining entries is this table:

iff r

(cid:0)1 is
a surjection

r is
total
a function
a surjection
an injection
a bijection

hint: explain what   s going on in terms of    arrows    from a to b in the diagram

for r.

problem 4.16.
describe a total injective function   d 1 out  ,     1 in;    from r ! r that is not a
bijection.

problem 4.17.
for a binary relation r w a ! b, some properties of r can be determined from
just the arrows of r, that is, from graph.r/, and others require knowing if there
are elements in the domain a or the codomain b that don   t show up in graph.r/.
for each of the following possible properties of r, indicate whether it is always
determined by

1. graph.r/ alone,

2. graph.r/ and a alone,

3. graph.r/ and b alone,

119

   mcs        2017/6/5     19:42     page 119     #127

4.5. finite cardinality

4. all three parts of r.

properties:
(a) surjective

(b) injective

(c) total

(d) function

(e) bijection

problem 4.18.
for each of the following real-valued functions on the real numbers, indicate whether
it is a bijection, a surjection but not a bijection, an injection but not a bijection, or
neither an injection nor a surjection.
(a) x ! x c 2
(b) x ! 2x
(c) x ! x2
(d) x ! x3
(e) x ! sin x
(f) x ! x sin x
(g) x ! ex

problem 4.19.
let f w a ! b and g w b ! c be functions and h w a ! c be their composition,
namely, h.a/ wwd g.f .a// for all a 2 a.
(a) prove that if f and g are surjections, then so is h.

(b) prove that if f and g are bijections, then so is h.

(c) if f is a bijection, then so is f

(cid:0)1.

   mcs        2017/6/5     19:42     page 120     #128

120

chapter 4 mathematical data types

problem 4.20.
give an example of a relation r that is a total injective function from a set a to
itself but is not a bijection.

class problems
problem 4.21. (a) prove that if a surj b and b surj c , then a surj c .

(b) explain why a surj b iff b inj a.

(c) conclude from (a) and (b) that if a inj b and b inj c , then a inj c .

(d) according to de   nition 4.5.2, a inj b requires a total injective relation. ex-
plain why a inj b iff there is a total injective function from a to b.

problem 4.22.
five basic properties of binary relations r w a ! b are:

1. r is a surjection   (cid:21) 1 in  
2. r is an injection     1 in  
3. r is a function   (cid:21) 1 out  
4. r is total   (cid:21) 1 out  
5. r is empty   d 0 out  
below are some assertions about r. for each assertion, indicate all the properties
above that the relation r must have. for example, the    rst assertion impllies that r
is a total surjection. variables a; a1; : : : range over a and b; b1; : : : range over b.
(a) 8a 8b: a r b.
(b) not.8a 8b: a r b/.
(c) 8a 8b: not.a r b/.
(d) 8a 9b: a r b.
(e) 8b 9a: a r b.
(f) r is a bijection.
(g) 8a 9b1 a r b1

v8b: a r b implies b d b1.

   mcs        2017/6/5     19:42     page 121     #129

4.5. finite cardinality

121

(h) 8a; b: a r b or a    b.
(i) 8b1; b2; a: .a r b1 and a r b2/ implies b1 d b2.
(j) 8a1; a2; b: .a1 r b and a2 r b/ implies a1 d a2.
(k) 8a1; a2; b1; b2: .a1 r b1 and a2 r b2 and a1    a2/ implies b1    b2.
(l) 8a1; a2; b1; b2: .a1 r b1 and a2 r b2 and b1    b2/ implies a1    a2.

problem 4.23.
let r w a ! b be a binary relation. each of the following formulas expresses
the fact that r has a familiar relational    arrow    property such as being surjective
or being a function.

identify the relational property expressed by each of the following relational
expressions. explain your reasoning.
(a) r    r
(b) r

(cid:0)1   idb
(cid:0)1    r   ida
(cid:0)1    r   ida
(cid:0)1   idb

(c) r
(d) r    r

homework problems
problem 4.24.
let f w a ! b and g w b ! c be functions.
(a) prove that if the composition g    f is a bijection, then f is a total injection
and g is a surjection.
(b) show there is a total injection f and a bijection, g, such that g    f is not a
bijection.

problem 4.25.
let a, b and c be nonempty sets, and let f w b ! c and g w a ! b be
functions. let h wwd f    g be the composition function of f and g, namely, the
function with domain a and codomain c such that h.x/ d f .g.x//.
(a) prove that if h is surjective and f is total and injective, then g must be surjec-
tive.

   mcs        2017/6/5     19:42     page 122     #130

122

chapter 4 mathematical data types

hint: contradiction.

(b) suppose that h is injective and f is total. prove that g must be injective and
provide a counterexample showing how this claim could fail if f was not total.

problem 4.26.
let a, b and c be sets, and let f w b ! c and g w a ! b be functions. let
h w a ! c be the composition f    g; that is, h.x/ wwd f .g.x// for x 2 a. prove
or disprove the following claims:
(a) if h is surjective, then f must be surjective.

(b) if h is surjective, then g must be surjective.

(c) if h is injective, then f must be injective.

(d) if h is injective and f is total, then g must be injective.

problem 4.27. (a)
let r w d ! d be a binary relation on a set d. let x; y be variables ranging over
d. indicate the expressions below whose meaning is that r is an injective relation
    1 in  . remember that r.x/ wwd fy j x r yg, and r is not necessarily a function
or a total relation.
(i) r.x/ \ r.y/ d ;
(ii) r.x/ d r.y/ implies x d y
(iii) r.x/ \ r.y/ d ; implies x    y
(iv) x    y implies r.x/    r.y/
(v) r.x/ \ r.y/    ; implies x    y
(vi) r.x/ \ r.y/    ; implies x d y
(vii) r
(viii) r
(ix) r
(x) r.r
(xi) r.r
(xii) x    y implies r.x/ \ r.y/ d ;

(cid:0)1.r.x// d fxg
(cid:0)1.r.x//   fxg
(cid:0)1.r.x//   fxg
(cid:0)1.x//   fxg
(cid:0)1.x//   fxg

   mcs        2017/6/5     19:42     page 123     #131

4.5. finite cardinality

123

(b) give an example of a set s such that there is no total injective relation from s
to the real interval   0; 1  .

problem 4.28.
the language of sets and relations may seem remote from the practical world of
programming, but in fact there is a close connection to id208, a
very popular software application building block implemented by such software
packages as mysql. this problem explores the connection by considering how to
manipulate and analyze a large data set using operators over sets and relations. sys-
tems like mysql are able to execute very similar high-level instructions ef   ciently
on standard computer hardware, which helps programmers focus on high-level de-
sign.

consider a basic web search engine, which stores information on web pages and
processes queries to    nd pages satisfying conditions provided by users. at a high
level, we can formalize the key information as:

(cid:15) a set p of pages that the search engine knows about
(cid:15) a binary relation l (for link) over pages, de   ned such that p1 l p2 iff page
p1 links to p2
(cid:15) a set e of endorsers, people who have recorded their opinions about which
pages are high-quality
(cid:15) a binary relation r (for recommends) between endorsers and pages, such
that e r p iff person e has recommended page p
(cid:15) a set w of words that may appear on pages
(cid:15) a binary relation m (for mentions) between pages and words, where p m w
iff word w appears on page p

each part of this problem describes an intuitive, informal query over the data,
and your job is to produce a single expression using the standard set and relation
operators, such that the expression can be interpreted as answering the query cor-
rectly, for any data set. your answers should use only the set and relation symbols
given above, in addition to terms standing for constant elements of e or w , plus
the following operators introduced in the text:

(cid:15) set union [.

   mcs        2017/6/5     19:42     page 124     #132

124

chapter 4 mathematical data types

(cid:15) set intersection \.
(cid:15) set difference (cid:0).
(cid:15) relational image   for example, r.a/ for some set a, or r.a/ for some spe-
ci   c element a.
(cid:15) relational inverse (cid:0)1.
(cid:15) . . . and one extra: relational composition which generalizes composition of
functions
in other words, a is related to c in r    s if starting at a you can follow an s
arrow to the start of an r arrow and then follow the r arrow to get to c.10

a .r    s / c wwd 9b 2 b: .a s b/ and .b r c/:

here is one worked example to get you started:
(cid:15) search description: the set of pages containing the word    logic   
(cid:15) solution expression: m
find similar solutions for each of the following searches:

(cid:0)1.   logic   /

(a) the set of pages containing the word    logic    but not the word    predicate   

(b) the set of pages containing the word    set    that have been recommended by
   meyer   

(c) the set of endorsers who have recommended pages containing the word    al-
gebra   

(d) the relation that relates endorser e and word w iff e has recommended a page
containing w

(e) the set of pages that have at least one incoming or outgoing link

(f) the relation that relates word w and page p iff w appears on a page that links
to p

(g) the relation that relates word w and endorser e iff w appears on a page that
links to a page that e recommends

(h) the relation that relates pages p1 and p2 iff p2 can be reached from p1 by
following a sequence of exactly 3 links

10note the reversal of r and s in the de   nition; this is to make relational composition work like
function composition. for functions, f    g means you apply g    rst. that is, if we let h be f    g,
then h.x/ d f .g.x//.

   mcs        2017/6/5     19:42     page 125     #133

4.5. finite cardinality

125

exam problems
problem 4.29.
let a be the set containing the    ve sets: fag;fb; cg;fb; dg;fa; eg;fe; f g, and let
b be the set containing the three sets: fa; bg;fb; c; dg;fe; f g. let r be the    is
subset of    binary relation from a to b de   ned by the rule:

x r y

iff x   y:

(a) fill in the arrows so the following    gure describes the graph of the relation,
r:

arrows

b

fa; bg

fb; c; dg

fe; f g

a

fag

fb; cg

fb; dg

fa; eg

fe; f g

(b) circle the properties below possessed by the relation r:

function

total

injective

surjective

(c) circle the properties below possessed by the relation r

bijective
(cid:0)1:

function

total

injective

surjective

bijective

   mcs        2017/6/5     19:42     page 126     #134

126

chapter 4 mathematical data types

problem 4.30. (a) five assertions about a binary relation r w a ! b are bulleted
below. there are nine predicate formulas that express some of these assertions.
write the numbers of the formulas next to the assertions they express. for example,
you should write    4    next to the last assertion, since formula (4) expresses the
assertion that r is the identity relation.
variables a; a1; : : : range over the domain a and b; b1; : : : range over the codomain
b. more than one formula may express one assertion.

(cid:15) r is a surjection
(cid:15) r is an injection
(cid:15) r is a function
(cid:15) r is total
(cid:15) r is the identity relation.

1. 8b:9a: a r b.
2. 8a:9b: a r b.
3. 8a: a r a.
4. 8a; b: a r b iff a d b.
5. 8a; b: a r b or a    b.
6. 8b1; b2; a: .a r b1 and a r b2/ implies b1 d b2.
7. 8a1; a2; b: .a1 r b and a2 r b/ implies a1 d a2.
8. 8a1; a2; b1; b2: .a1 r b1 and a2 r b2 and a1    a2/ implies b1    b2.
9. 8a1; a2; b1; b2: .a1 r b1 and a2 r b2 and b1    b2/ implies a1    a2.
(b) give an example of a relation r that satis   es three of the properties surjection,
injection, total, and function (you indicate which) but is not a bijection.

problem 4.31.
let f w d ! d be a total function from some nonempty set d to itself. in the
following propositions, x and y are variables ranging over d, and g is a variable
ranging over total functions from d to d. indicate all of the propositions that are
equivalent to the proposition that f is an injection:

1. x d y or f .x/    f .y/
2. x d y implies f .x/ d f .y/

   mcs        2017/6/5     19:42     page 127     #135

4.5. finite cardinality

127

3. x    y implies f .x/    f .y/
4. f .x/ d f .y/ implies x d y
5. not  9x9y.x    y and f .x/ d f .y//
6. not  9z8x.f .x/    z/
7. 9g8x.g.f .x// d x/
8. 9g8x.f .g.x// d x/

problem 4.32.
prove that if relation r w a ! b is a total injection,   (cid:21) 1 out  ;     1 in  , then

(cid:0)1    r d ida;

r

where ida is the identity function on a.

(a simple argument in terms of    arrows    will do the job.)

problem 4.33.
let r w a ! b be a binary relation.
(a) prove that r is a function iff r    r
(cid:0)1, ida, idb equivalent
write similar containment formulas involving r
to the assertion that r has each of the following properties. no proof is required.
(b) total.

(cid:0)1  r, r  r

(cid:0)1   idb.

(c) a surjection.

(d) a injection.

problem 4.34.
let r w a ! b and s w b ! c be binary relations such that s    r is a bijection
and jaj d 2.
give an example of such r; s where neither r nor s is a function. indicate ex-
actly which properties   total, surjection, function, and injection   your examples
of r and s have.
hint: let jbj d 4.

   mcs        2017/6/5     19:42     page 128     #136

128

chapter 4 mathematical data types

problem 4.35.
the set f1; 2; 3g! consists of the in   nite sequences of the digits 1,2, and 3, and
likewise f4; 5g! is the set of in   nite sequences of the digits 4,5. for example

123123123 : : :
222222222222 : : :
4554445554444 : : : 2 f4; 5g!:

2 f1; 2; 3g!;
2 f1; 2; 3g!;

(a) give an example of a total injective function

f w f1; 2; 3g! ! f4; 5g!:

(b) give an example of a bijection g w .f1; 2; 3g! (cid:2) f1; 2; 3g!/ ! f1; 2; 3g!.
(c) explain why there is a bijection between f1; 2; 3g! (cid:2) f1; 2; 3g! and f4; 5g!.
(you need not explicitly de   ne the bijection.)

problems for section 4.5

practice problems
problem 4.36.
assume f w a ! b is total function, and a is    nite. replace the ? with one of
 ;d;(cid:21) to produce the strongest correct version of the following statements:
(a) jf .a/j ? jbj.
(b) if f is a surjection, then jaj ? jbj.
(c) if f is a surjection, then jf .a/j ? jbj.
(d) if f is an injection, then jf .a/j ? jaj.
(e) if f is a bijection, then jaj ? jbj.

class problems
problem 4.37.
let a d fa0; a1; : : : ; an(cid:0)1g be a set of size n, and b d fb0; b1; : : : ; bm(cid:0)1g a set
of size m. prove that ja (cid:2) bj d mn by de   ning a simple bijection from a (cid:2) b to
the nonnegative integers from 0 to mn (cid:0) 1.

   mcs        2017/6/5     19:42     page 129     #137

4.5. finite cardinality

129

problem 4.38.
let r w a ! b be a binary relation. use an arrow counting argument to prove the
following generalization of the mapping rule 1.
lemma. if r is a function, and x   a, then

jxj (cid:21) jr.x /j:

   mcs        2017/6/5     19:42     page 130     #138

   mcs        2017/6/5     19:42     page 131     #139

5

induction
induction is a powerful method for showing a property is true for all nonnegative
integers. induction plays a central role in discrete mathematics and computer sci-
ence. in fact, its use is a de   ning characteristic of discrete   as opposed to contin-
uous   mathematics. this chapter introduces two versions of induction, ordinary
and strong, and explains why they work and how to use them in proofs. it also
introduces the invariant principle, which is a version of induction specially adapted
for reasoning about step-by-step processes.

5.1 ordinary induction

to understand how induction works, suppose there is a professor who brings a
bottoid113ss bag of assorted miniature candy bars to her large class. she offers to
share the candy in the following way. first, she lines the students up in order. next
she states two rules:

1. the student at the beginning of the line gets a candy bar.

2. if a student gets a candy bar, then the following student in line also gets a

candy bar.

let   s number the students by their order in line, starting the count with 0, as usual
in computer science. now we can understand the second rule as a short description
of a whole sequence of statements:

(cid:15) if student 0 gets a candy bar, then student 1 also gets one.
(cid:15) if student 1 gets a candy bar, then student 2 also gets one.
(cid:15) if student 2 gets a candy bar, then student 3 also gets one.

:::

of course, this sequence has a more concise mathematical description:

if student n gets a candy bar, then student n c 1 gets a candy bar, for
all nonnegative integers n.

   mcs        2017/6/5     19:42     page 132     #140

132

chapter 5 induction

so suppose you are student 17. by these rules, are you entitled to a miniature candy
bar? well, student 0 gets a candy bar by the    rst rule. therefore, by the second
rule, student 1 also gets one, which means student 2 gets one, which means student
3 gets one as well, and so on. by 17 applications of the professor   s second rule,
you get your candy bar! of course the rules really guarantee a candy bar to every
student, no matter how far back in line they may be.

5.1.1 a rule for ordinary induction
the reasoning that led us to conclude that every student gets a candy bar is essen-
tially all there is to induction.

the induction principle.
let p be a predicate on nonnegative integers. if

(cid:15) p .0/ is true, and
(cid:15) p .n/ implies p .n c 1/ for all nonnegative integers n

then

(cid:15) p .m/ is true for all nonnegative integers m.

since we   re going to consider several useful variants of induction in later sec-
tions, we   ll refer to the induction method described above as ordinary induction
when we need to distinguish it. formulated as a proof rule as in section 1.4.1, this
would be

rule. induction rule

p .0/; 8n 2 n: p .n/ implies p .n c 1/

8m 2 n: p .m/

this induction rule works for the same intuitive reason that all the students get
candy bars, and we hope the explanation using candy bars makes it clear why the
soundness of ordinary induction can be taken for granted. in fact, the rule is so
obvious that it   s hard to see what more basic principle could be used to justify it.1
what   s not so obvious is how much mileage we get by using it.

1but see section 5.3.

   mcs        2017/6/5     19:42     page 133     #141

5.1. ordinary induction

133

5.1.2 a familiar example
below is the formula (5.1) for the sum of the nonnegative integers up to n. the
formula holds for all nonnegative integers, so it is the kind of statement to which
induction applies directly. we   ve already proved this formula using the well or-
dering principle (theorem 2.2.1), but now we   ll prove it by induction, that is, using
the induction principle.
theorem 5.1.1. for all n 2 n,

1 c 2 c 3 c (cid:1)(cid:1)(cid:1) c n d n.n c 1/

2

(5.1)

to prove the theorem by induction, de   ne predicate p .n/ to be the equation (5.1).
now the theorem can be restated as the claim that p .n/ is true for all n 2 n. this
is great, because the induction principle lets us reach precisely that conclusion,
provided we establish two simpler facts:

(cid:15) p .0/ is true.
(cid:15) for all n 2 n, p .n/ implies p .n c 1/.

so now our job is reduced to proving these two statements.

the    rst statement follows because of the convention that a sum of zero terms
is equal to 0. so p .0/ is the true assertion that a sum of zero terms is equal to
0.0 c 1/=2 d 0.
the second statement is more complicated. but remember the basic plan from
section 1.5 for proving the validity of any implication: assume the statement on
the left and then prove the statement on the right. in this case, we assume p .n/   
namely, equation (5.1)   in order to prove p .n c 1/, which is the equation

1 c 2 c 3 c (cid:1)(cid:1)(cid:1) c n c .n c 1/ d .n c 1/.n c 2/

(5.2)
these two equations are quite similar; in fact, adding .n c 1/ to both sides of
equation (5.1) and simplifying the right side gives the equation (5.2):
c .n c 1/

1 c 2 c 3 c (cid:1)(cid:1)(cid:1) c n c .n c 1/ d n.n c 1/

2

:

2

d .n c 2/.n c 1/

2

thus, if p .n/ is true, then so is p .n c 1/. this argument is valid for every non-
negative integer n, so this establishes the second fact required by the induction
proof. therefore, the induction principle says that the predicate p .m/ is true for
all nonnegative integers m. the theorem is proved.

   mcs        2017/6/5     19:42     page 134     #142

134

chapter 5 induction

5.1.3 a template for induction proofs
the proof of equation (5.1) was relatively simple, but even the most complicated
induction proof follows exactly the same template. there are    ve components:

1. state that the proof uses induction. this immediately conveys the overall

structure of the proof, which helps your reader follow your argument.

2. de   ne an appropriate predicate p .n/. the predicate p .n/ is called the
induction hypothesis. the eventual conclusion of the induction argument
will be that p .n/ is true for all nonnegative n. a clearly stated induction
hypothesis is often the most important part of an induction proof, and its
omission is the largest source of confused proofs by students.
in the simplest cases, the induction hypothesis can be lifted straight from the
proposition you are trying to prove, as we did with equation (5.1). sometimes
the induction hypothesis will involve several variables, in which case you
should indicate which variable serves as n.

3. prove that p .0/ is true. this is usually easy, as in the example above. this

part of the proof is called the base case or basis step.

4. prove that p .n/ implies p .n c 1/ for every nonnegative integer n. this
is called the inductive step. the basic plan is always the same: assume that
p .n/ is true, and then use this assumption to prove that p .n c 1/ is true.
these two statements should be fairly similar, but bridging the gap may re-
quire some ingenuity. whatever argument you give must be valid for every
nonnegative integer n, since the goal is to prove that all the following impli-
cations are true:

p .0/ ! p .1/; p .1/ ! p .2/; p .2/ ! p .3/; : : : :

5. invoke induction. given these facts, the induction principle allows you to
conclude that p .n/ is true for all nonnegative n. this is the logical capstone
to the whole argument, but it is so standard that it   s usual not to mention it
explicitly.

always be sure to explicitly label the base case and the inductive step. doing
so will make your proofs clearer and will decrease the chance that you forget a key
step   like checking the base case.

   mcs        2017/6/5     19:42     page 135     #143

5.1. ordinary induction

135

5.1.4 a clean writeup
the proof of theorem 5.1.1 given above is perfectly valid; however, it contains a
lot of extraneous explanation that you won   t usually see in induction proofs. the
writeup below is closer to what you might see in print and should be prepared to
produce yourself.

revised proof of theorem 5.1.1. we use induction. the induction hypothesis p .n/
will be equation (5.1).
base case: p .0/ is true, because both sides of equation (5.1) equal zero when
n d 0.
inductive step: assume that p .n/ is true, that is equation (5.1) holds for some
nonnegative integer n. then adding nc 1 to both sides of the equation implies that
1 c 2 c 3 c (cid:1)(cid:1)(cid:1) c n c .n c 1/ d n.n c 1/

c .n c 1/

2

d .n c 1/.n c 2/

2

(by simple algebra)

which proves p .n c 1/.
so it follows by induction that p .n/ is true for all nonnegative n.

(cid:4)

it probably bothers you that induction led to a proof of this summation formula
but did not provide an intuitive way to understand it, nor did it explain where the
formula came from in the    rst place.2 this is both a weakness and a strength. it is a
weakness when a proof does not provide insight. but it is a strength that a proof can
provide a reader with a reliable guarantee of correctness without requiring insight.

5.1.5 a more challenging example
during the development of mit   s famous stata center, as costs rose further and
further beyond budget, some radical fundraising ideas were proposed. one rumored
plan was to install a big square courtyard divided into unit squares. the big square
would be 2n units on a side for some undetermined nonnegative integer n, and
one of the unit squares in the center3 occupied by a statue of a wealthy potential
donor   whom the fund raisers privately referred to as    bill.    the n d 3 case is
shown in figure 5.1.

a complication was that the building   s unconventional architect, frank gehry,
was alleged to require that only special l-shaped tiles (shown in figure 5.2) be

2methods for    nding such formulas are covered in part iii of the text.
3in the special case n d 0, the whole courtyard consists of a single central square; otherwise,

there are four central squares.

   mcs        2017/6/5     19:42     page 136     #144

136

chapter 5 induction

figure 5.1 a 2n (cid:2) 2n courtyard for n d 3.

figure 5.2 the special l-shaped tile.

used for the courtyard. for n d 2, a courtyard meeting these constraints is shown
in figure 5.3. but what about for larger values of n? is there a way to tile a 2n (cid:2) 2n
courtyard with l-shaped tiles around a statue in the center? let   s try to prove that
this is so.
theorem 5.1.2. for all n (cid:21) 0 there exists a tiling of a 2n (cid:2) 2n courtyard with bill
in a central square.

proof. (doomed attempt) the proof is by induction. let p .n/ be the proposition
that there exists a tiling of a 2n (cid:2) 2n courtyard with bill in the center.
base case: p .0/ is true because bill    lls the whole courtyard.
inductive step: assume that there is a tiling of a 2n (cid:2) 2n courtyard with bill in the
center for some n (cid:21) 0. we must prove that there is a way to tile a 2nc1 (cid:2) 2nc1
(cid:4)
courtyard with bill in the center . . . .

now we   re in trouble! the ability to tile a smaller courtyard with bill in the

2n2n   mcs        2017/6/5     19:42     page 137     #145

5.1. ordinary induction

137

figure 5.3 a tiling using l-shaped tiles for n d 2 with bill in a center square.

center isn   t much help in tiling a larger courtyard with bill in the center. we haven   t
   gured out how to bridge the gap between p .n/ and p .n c 1/.
so if we   re going to prove theorem 5.1.2 by induction, we   re going to need some
other induction hypothesis than simply the statement about n that we   re trying to
prove.

when this happens, your    rst fallback should be to look for a stronger induction
hypothesis; that is, one which implies your previous hypothesis. for example,
we could make p .n/ the proposition that for every location of bill in a 2n (cid:2) 2n
courtyard, there exists a tiling of the remainder.

this advice may sound bizarre:    if you can   t prove something, try to prove some-
thing grander!    but for induction arguments, this makes sense. in the inductive
step, where you have to prove p .n/ implies p .n c 1/, you   re in better shape
because you can assume p .n/, which is now a more powerful statement. let   s see
how this plays out in the case of courtyard tiling.

proof (successful attempt). the proof is by induction. let p .n/ be the proposition
that for every location of bill in a 2n (cid:2) 2n courtyard, there exists a tiling of the
remainder.
base case: p .0/ is true because bill    lls the whole courtyard.
inductive step: assume that p .n/ is true for some n (cid:21) 0; that is, for every location
of bill in a 2n (cid:2) 2n courtyard, there exists a tiling of the remainder. divide the
2nc1 (cid:2) 2nc1 courtyard into four quadrants, each 2n (cid:2) 2n. one quadrant contains
bill (b in the diagram below). place a temporary bill (x in the diagram) in each of
the three central squares lying outside this quadrant as shown in figure 5.4.

b   mcs        2017/6/5     19:42     page 138     #146

138

chapter 5 induction

figure 5.4 using a stronger inductive hypothesis to prove theorem 5.1.2.

now we can tile each of the four quadrants by the induction assumption. replac-
ing the three temporary bills with a single l-shaped tile completes the job. this
proves that p .n/ implies p .n c 1/ for all n (cid:21) 0. thus p .m/ is true for all m 2 n,
and the theorem follows as a special case where we put bill in a central square. (cid:4)

this proof has two nice properties. first, not only does the argument guarantee
that a tiling exists, but also it gives an algorithm for    nding such a tiling. second,
we have a stronger result: if bill wanted a statue on the edge of the courtyard, away
from the pigeons, we could accommodate him!

strengthening the induction hypothesis is often a good move when an induction
proof won   t go through. but keep in mind that the stronger assertion must actually
be true; otherwise, there isn   t much hope of constructing a valid proof. sometimes
   nding just the right induction hypothesis requires trial, error, and insight. for
example, mathematicians spent almost twenty years trying to prove or disprove
the conjecture that every planar graph is 5-choosable.4 then, in 1994, carsten
thomassen gave an induction proof simple enough to explain on a napkin. the
key turned out to be    nding an extremely clever induction hypothesis; with that in
hand, completing the argument was easy!

45-choosability is a slight generalization of 5-colorability. although every planar graph is 4-
colorable and therefore 5-colorable, not every planar graph is 4-choosable. if this all sounds like
nonsense, don   t panic. we   ll discuss graphs, planarity, and coloring in part ii of the text.

xxbx2n2n2n2n   mcs        2017/6/5     19:42     page 139     #147

5.1. ordinary induction

139

5.1.6 a faulty induction proof
if we have done a good job in writing this text, right about now you should be
thinking,    hey, this induction stuff isn   t so hard after all   just show p .0/ is true
and that p .n/ implies p .n c 1/ for any number n.    and, you would be right,
although sometimes when you start doing induction proofs on your own, you can
run into trouble. for example, we will now use induction to    prove    that all horses
are the same color   just when you thought it was safe to skip class and work on
your robot program instead. sorry!
false theorem. all horses are the same color.

notice that no n is mentioned in this assertion, so we   re going to have to re-
formulate it in a way that makes an n explicit. in particular, we   ll (falsely) prove
that
false theorem 5.1.3. in every set of n (cid:21) 1 horses, all the horses are the same
color.
this is a statement about all integers n (cid:21) 1 rather (cid:21) 0, so it   s natural to use a
slight variation on induction: prove p .1/ in the base case and then prove that p .n/
implies p .nc 1/ for all n (cid:21) 1 in the inductive step. this is a perfectly valid variant
of induction and is not the problem with the proof below.

bogus proof. the proof is by induction on n. the induction hypothesis p .n/ will
be

in every set of n horses, all are the same color.

(5.3)
base case: (n d 1). p .1/ is true, because in a size-1 set of horses, there   s only one
horse, and this horse is de   nitely the same color as itself.
inductive step: assume that p .n/ is true for some n (cid:21) 1. that is, assume that in
every set of n horses, all are the same color. now suppose we have a set of n c 1
horses:
we need to prove these n c 1 horses are all the same color.
by our assumption, the    rst n horses are the same color:

h1; h2; : : : ; hn; hnc1:

also by our assumption, the last n horses are the same color:

   

     

same color

h1; h2; : : : ; hn

; hnc1

   

h1; h2; : : : ; hn; hnc1

same color

   

   
     

   mcs        2017/6/5     19:42     page 140     #148

140

chapter 5 induction

so h1 is the same color as the remaining horses besides hnc1    that is, h2; : : : ; hn.
likewise, hnc1 is the same color as the remaining horses besides h1   that is,
h2; : : : ; hn, again. since h1 and hnc1 are the same color as h2; : : : ; hn, all n c 1
horses must be the same color, and so p .n c 1/ is true. thus, p .n/ implies
p .n c 1/.
by the principle of induction, p .n/ is true for all n (cid:21) 1.
(cid:4)
we   ve proved something false! does this mean that math broken and we should
all take up poetry instead? of course not! it just means that this proof has a mistake.
the mistake in this argument is in the sentence that begins    so h1 is the same
color as the remaining horses besides hnc1   that is h2; : : : ; hn; : : : .    the ellipis
notation (   : : :    ) in the expression    h1; h2; : : : ; hn; hnc1    creates the impression
that there are some remaining horses   namely h2; : : : ; hn    besides h1 and hnc1.
however, this is not true when n d 1. in that case, h1; h2; : : : ; hn; hnc1 is just
h1; h2 and there are no    remaining    horses for h1 to share a color with. and of
course, in this case h1 and h2 really don   t need to be the same color.
this mistake knocks a critical link out of our induction argument. we proved
p .1/ and we correctly proved p .2/ (cid:0)! p .3/, p .3/ (cid:0)! p .4/, etc. but we failed
to prove p .1/ (cid:0)! p .2/, and so everything falls apart: we cannot conclude that
p .2/, p .3/, etc., are true. and naturally, these propositions are all false; there are
sets of n horses of different colors for all n (cid:21) 2.
students sometimes explain that the mistake in the proof is because p .n/ is false
for n (cid:21) 2, and the proof assumes something false, p .n/, in order to prove p .nc1/.
you should think about how to help such a student understand why this explanation
would get no credit on a math for computer science exam.

5.2 strong induction

a useful variant of induction is called strong induction. strong induction and ordi-
nary induction are used for exactly the same thing: proving that a predicate is true
for all nonnegative integers. strong induction is useful when a simple proof that
the predicate holds for n c 1 does not follow just from the fact that it holds at n,
but from the fact that it holds for other values   n.

   mcs        2017/6/5     19:42     page 141     #149

5.2. strong induction

141

5.2.1 a rule for strong induction

principle of strong induction.
let p be a predicate on nonnegative integers. if

(cid:15) p .0/ is true, and
(cid:15) for all n 2 n, p .0/, p .1/, . . . , p .n/ together imply p .n c 1/,

then p .m/ is true for all m 2 n.

the only change from the ordinary induction principle is that strong induction
allows you make more assumptions in the inductive step of your proof!
in an
ordinary induction argument, you assume that p .n/ is true and try to prove that
p .n c 1/ is also true. in a strong induction argument, you may assume that p .0/,
p .1/, . . . , and p .n/ are all true when you go to prove p .nc1/. so you can assume
a stronger set of hypotheses which can make your job easier.

formulated as a proof rule, strong induction is

rule. strong induction rule

p .0/; 8n 2 n:(cid:0)p .0/ and p .1/ and : : : and p .n/(cid:1) implies p .n c 1/

8m 2 n: p .m/

stated more succintly, the rule is

rule.

p .0/;

  8k   n 2 n: p .k/   implies p .n c 1/

8m 2 n: p .m/

the template for strong induction proofs is identical to the template given in

section 5.1.3 for ordinary induction except for two things:

(cid:15) you should state that your proof is by strong induction, and
(cid:15) you can assume that p .0/, p .1/, . . . , p .n/ are all true instead of only p .n/
during the inductive step.

5.2.2 fibonacci numbers
the numbers that bear his name arose out of the italian mathematician fibonacci   s
models of population growth at the beginning of the thirteenth century. fibonacci
numbers turn out to describe the growth of lots of interesting biological quantities

   mcs        2017/6/5     19:42     page 142     #150

142

chapter 5 induction

such as the shape of pineapple sprouts or pine cones, and they also come up regu-
larly in computer science where they describe the growth of various data structures
and computation times of algorithms.

to generate the list of successive fibonacci numbers, you start by writing 0; 1
and then keep adding another element to the list by summing the two previous
ones:

0; 1; 1; 2; 3; 5; 8; 13; 21; : : : :

another way to describe this process is to de   ne nth fibonacci number f .n/ by

the equations:

f .0/ wwd 0;
f .1/ wwd 1;
f .n/ wwd f .n (cid:0) 1/ c f .n (cid:0) 2/

for n (cid:21) 2.

note that because the general rule for    nding the fibonacci f .n/ refers to the two
previous values f .n (cid:0) 1/ and f .n (cid:0) 2/, we needed to know the two values f .0/
and f .1/ in order to get started.

one simple property of fibonacci numbers is that the even/odd pattern of fi-
bonacci numbers repeats in a cycle of length three. a nice way to say this is that
for all n (cid:21) 0,

f .n/ is even iff f .n c 3/ is even:

(5.4)

we will verify the equivalence (5.4) by induction, but strong induction is called for
because properties of f .n/ depend not just on f .n (cid:0) 1/ but also on f .n (cid:0) 2/.
proof. the (strong) induction hypothesis p .n/ will be (5.4).
base cases:

(cid:15) (n d 0). f .0/ d 0 and f .3/ d 2 are both even.
(cid:15) (n d 1). f .1/ d 1 and f .4/ d 3 are both not even.

induction step: for n (cid:21) 1, we want to prove p .n c 1/ is true assuming by strong
induction that p .n/ and p .n (cid:0) 1/ are true.
now it is easy to verify that for all integers k; m,

m c k is even iff   m is even iff k is even  :

(*)

   mcs        2017/6/5     19:42     page 143     #151

5.2. strong induction

143

so for n (cid:21) 1,
f .n c 1/ is even
iff f .n/ c f .n (cid:0) 1/ is even
iff   f .n/ is even iff f .n (cid:0) 1/ is even  
iff   f .n c 3/ is even iff f .n c 2/ is even  
iff f .n c 3/ c f .n c 2/ is even
iff f .n c 4/ is even

(by strong ind. hyp. p .n/; p .n (cid:0) 1/)

(def of f .n c 1/)
(by (*))

(by (*))
(by def of f .n c 4/):

this shows that

f .n c 1/ is even iff f .n c 4/ is even;

which means that p .n c 1/ is true, as required.
there is a long standing community of fibonacci number enthusiasts who have
been captivated by the many extraordinary properties of these number   a few fur-
ther illustrative properties appear in problems 5.8, 5.25, and 5.30.

(cid:4)

5.2.3 products of primes
we can use strong induction to re-prove theorem 2.3.1 which we previously proved
using well ordering.

theorem. every integer greater than 1 is a product of primes.

proof. we will prove the theorem by strong induction, letting the induction hy-
pothesis p .n/ be

n is a product of primes:

so the theorem will follow if we prove that p .n/ holds for all n (cid:21) 2.
base case: (n d 2): p .2/ is true because 2 is prime, so it is a length one product
of primes by convention.
inductive step: suppose that n (cid:21) 2 and that every number from 2 to n is a product
of primes. we must show that p .n c 1/ holds, namely, that n c 1 is also a product
of primes. we argue by cases:
if n c 1 is itself prime, then it is a length one product of primes by convention,
and so p .n c 1/ holds in this case.
otherwise, nc 1 is not prime, which by de   nition means nc 1 d k(cid:1) m for some
integers k; m between 2 and n. now by the strong induction hypothesis, we know
that both k and m are products of primes. by multiplying these products, it follows

   mcs        2017/6/5     19:42     page 144     #152

144

chapter 5 induction

figure 5.5 one way to make 26 sg using strongian currency

immediately that k (cid:1) m d n c 1 is also a product of primes. therefore, p .n c 1/
holds in this case as well.
so p .n c 1/ holds in any case, which completes the proof by strong induction
that p .n/ holds for all n (cid:21) 2.
(cid:4)

5.2.4 making change
the country inductia, whose unit of currency is the strong, has coins worth 3sg
(3 strongs) and 5sg. although the inductians have some trouble making small
change like 4sg or 7sg, it turns out that they can collect coins to make change for
any number that is at least 8 strongs.
strong induction makes this easy to prove for n c 1 (cid:21) 11, because then .n c
1/ (cid:0) 3 (cid:21) 8, so by strong induction the inductians can make change for exactly
.nc 1/(cid:0) 3 strongs, and then they can add a 3sg coin to get .nc 1/sg. so the only
thing to do is check that they can make change for all the amounts from 8 to 10sg,
which is not too hard to do.

here   s a detailed writeup using the of   cial format:

proof. we prove by strong induction that the inductians can make change for any
amount of at least 8sg. the induction hypothesis p .n/ will be:

there is a collection of coins whose value is n c 8 strongs.

we now proceed with the induction proof:

base case: p .0/ is true because a 3sg coin together with a 5sg coin makes 8sg.

   mcs        2017/6/5     19:42     page 145     #153

5.2. strong induction

145

inductive step: we assume p .k/ holds for all k   n, and prove that p .n c 1/
holds. we argue by cases:
case (n c 1 = 1): we have to make .n c 1/ c 8 d 9sg. we can do this using
three 3sg coins.
case (n c 1 = 2): we have to make .n c 1/ c 8 d 10sg. use two 5sg coins.
case (n c 1 (cid:21) 3): then 0   n (cid:0) 2   n, so by the strong induction hypothesis,
the inductians can make change for .n(cid:0) 2/c 8sg. now by adding a 3sg coin, they
can make change for .n c 1/ c 8sg, so p .n c 1/ holds in this case.
since n (cid:21) 0, we know that n c 1 (cid:21) 1 and thus that the three cases cover
every possibility. since p .n c 1/ is true in every case, we can conclude by strong
induction that for all n (cid:21) 0, the inductians can make change for nc 8 strong. that
(cid:4)
is, they can make change for any number of eight or more strong.

5.2.5 the stacking game
here is another exciting game that   s surely about to sweep the nation!

you begin with a stack of n boxes. then you make a sequence of moves. in each
move, you divide one stack of boxes into two nonempty stacks. the game ends
when you have n stacks, each containing a single box. you earn points for each
move; in particular, if you divide one stack of height a c b into two stacks with
heights a and b, then you score ab points for that move. your overall score is the
sum of the points that you earn for each move. what strategy should you use to
maximize your total score?
as an example, suppose that we begin with a stack of n d 10 boxes. then the
game might proceed as shown in figure 5.6. can you    nd a better strategy?

analyzing the game
let   s use strong induction to analyze the unstacking game. we   ll prove that your
score is determined entirely by the number of boxes   your strategy is irrelevant!
theorem 5.2.1. every way of unstacking n blocks gives a score of n.n (cid:0) 1/=2
points.

there are a couple technical points to notice in the proof:
(cid:15) the template for a strong induction proof mirrors the one for ordinary induc-
tion.
(cid:15) as with ordinary induction, we have some freedom to adjust indices. in this
case, we prove p .1/ in the base case and prove that p .1/; : : : ; p .n/ imply
p .n c 1/ for all n (cid:21) 1 in the inductive step.

   mcs        2017/6/5     19:42     page 146     #154

146

chapter 5 induction

stack heights

score

10
5
5
4
2
2
1
1
1
1

5
3 2
3 2 1
3 2 1 2
2 2 1 2 1
2 2 1 2 1 1
1 2 1 2 1 1 1
1 1 1 2 1 1 1 1
1 1 1 1 1 1 1 1 1

25 points
6
4
4
2
1
1
1
1

total score d 45 points

figure 5.6 an example of the stacking game with n d 10 boxes. on each line,
the underlined stack is divided in the next step.

proof. the proof is by strong induction. let p .n/ be the proposition that every
way of unstacking n blocks gives a score of n.n (cid:0) 1/=2.
base case: if n d 1, then there is only one block. no moves are possible, and so
the total score for the game is 1.1 (cid:0) 1/=2 d 0. therefore, p .1/ is true.
inductive step: now we must show that p .1/, . . . , p .n/ imply p .n c 1/ for all
n (cid:21) 1. so assume that p .1/, . . . , p .n/ are all true and that we have a stack of
nc 1 blocks. the    rst move must split this stack into substacks with positive sizes
a and b where a c b d n c 1 and 0 < a; b   n. now the total score for the game
is the sum of points for this    rst move plus points obtained by unstacking the two
resulting substacks:
total score d (score for 1st move)

c (score for unstacking a blocks)
c (score for unstacking b blocks)
d ab c a.a (cid:0) 1/
d .a c b/2 (cid:0) .a c b/
d .n c 1/n

c b.b (cid:0) 1/

2

2

2

d .a c b/..a c b/ (cid:0) 1/

2

this shows that p .1/, p .2/, . . . , p .n/ imply p .n c 1/.

2

by p .a/ and p .b/

   mcs        2017/6/5     19:42     page 147     #155

5.3. strong induction vs. induction vs. well ordering

therefore, the claim is true by strong induction.

147

(cid:4)

5.3 strong induction vs. induction vs. well ordering

strong induction looks genuinely    stronger    than ordinary induction    after all,
you can assume a lot more when proving the induction step. since ordinary in-
duction is a special case of strong induction, you might wonder why anyone would
bother with the ordinary induction.

but strong induction really isn   t any stronger, because a simple text manipula-
tion program can automatically reformat any proof using strong induction into a
proof using ordinary induction   just by decorating the induction hypothesis with
a universal quanti   er in a standard way. still, it   s worth distinguishing these two
kinds of induction, since which you use will signal whether the inductive step for
nc 1 follows directly from the case for n or requires cases smaller than n, and that
is generally good for your reader to know.

the template for the two kinds of induction rules looks nothing like the one for
the well ordering principle, but this chapter included a couple of examples where
induction was used to prove something already proved using well ordering. in fact,
this can always be done. as the examples may suggest, any well ordering proof
can automatically be reformatted into an induction proof. so theoretically, no one
need bother with the well ordering principle either.

but it   s equally easy to go the other way, and automatically reformat any strong
induction proof into a well ordering proof. the three proof methods   well order-
ing, induction, and strong induction   are simply different formats for presenting
the same mathematical reasoning!

so why three methods? well, sometimes induction proofs are clearer because
they don   t require proof by contradiction. also, induction proofs often provide
recursive procedures that reduce large inputs to smaller ones. on the other hand,
well ordering can come out slightly shorter and sometimes seem more natural and
less worrisome to beginners.

so which method should you use? there is no simple recipe. sometimes the
only way to decide is to write up a proof using more than one method and compare
how they come out. but whichever method you choose, be sure to state the method
up front to help a reader follow your proof.

   mcs        2017/6/5     19:42     page 148     #156

148

chapter 5 induction

figure 5.7 gehry   s new tile.

problems for section 5.1

practice problems
problem 5.1.
prove by induction that every nonempty    nite set of real numbers has a minimum
element.

problem 5.2.
frank gehry has changed his mind. instead of the l-shaped tiles shown in    g-
ure 5.3, he wants to use an odd offset pattern of tiles (or its mirror-image re   ection),
as shown in 5.7. to prove this is possible, he uses reasoning similar to the proof
in 5.1.5. however, unlike the proof in the text, this proof is    awed. which part of
the proof below contains a logical error?

false claim. the proof is by induction. let p .n/ be the proposition that for every
location of bill in a 2n (cid:2) 2n courtyard, there exists a tiling of the remainder with
the offset tile pattern.

false proof. base case: p .0/ is true because bill    lls the whole courtyard.
inductive step: assume that p .n/ is true for some n (cid:21) 0; that is, for every location
of bill in a 2n (cid:2) 2n courtyard, there exists a tiling of the remainder. divide the
2nc1 (cid:2) 2nc1 courtyard into four quadrants, each 2n (cid:2) 2n. one quadrant contains

   mcs        2017/6/5     19:42     page 149     #157

5.3. strong induction vs. induction vs. well ordering

149

figure 5.8 the induction hypothesis for the false theorem.

bill (b in the diagram below). place a temporary bill (x in the diagram) in each of
the three squares lying near this quadrant as shown in figure 5.8.

we can tile each of the four quadrants by the induction assumption. replacing
the three temporary bills with a single offset tile completes the job. this proves
that p .n/ implies p .nc 1/ for all n (cid:21) 0. thus p .m/ is true for all m 2 n, and the
ability to place bill in the center of the courtyard follows as a special case where
(cid:4)
we put bill in a central square.

class problems
problem 5.3.
use induction to prove that

13 c 23 c (cid:1)(cid:1)(cid:1) c n3 d  n.n c 1/

 2

:

(5.5)

2

for all n (cid:21) 1.
remember to formally

1. declare proof by induction.

2. identify the induction hypothesis p .n/.

3. establish the base case.

   mcs        2017/6/5     19:42     page 150     #158

150

chapter 5 induction

4. prove that p .n/ ) p .n c 1/.
5. conclude that p .n/ holds for all n (cid:21) 1.

as in the    ve part template.

problem 5.4.
prove by induction on n that

for all n 2 n and numbers r    1.

1 c r c r 2 c (cid:1)(cid:1)(cid:1) c r n d r nc1 (cid:0) 1
r (cid:0) 1

(5.6)

problem 5.5.
prove by induction:

for all n > 1.

1 c 1

4

c 1
9

c (cid:1)(cid:1)(cid:1) c 1

n2 < 2 (cid:0) 1

n

;

(5.7)

problem 5.6. (a) prove by induction that a 2n (cid:2) 2n courtyard with a 1 (cid:2) 1 statue
of bill in a corner can be covered with l-shaped tiles. (do not assume or reprove
the (stronger) result of theorem 5.1.2 that bill can be placed anywhere. the point
of this problem is to show a different induction hypothesis that works.)

(b) use the result of part (a) to prove the original claim that there is a tiling with
bill in the middle.

problem 5.7.
we   ve proved in two different ways that

1 c 2 c 3 c (cid:1)(cid:1)(cid:1) c n d n.n c 1/

2
but now we   re going to prove a contradictory theorem!
false theorem. for all n (cid:21) 0,

2 c 3 c 4 c (cid:1)(cid:1)(cid:1) c n d n.n c 1/

2

   mcs        2017/6/5     19:42     page 151     #159

5.3. strong induction vs. induction vs. well ordering

151

proof. we use induction. let p .n/ be the proposition that 2 c 3 c 4 c (cid:1)(cid:1)(cid:1) c n d
n.n c 1/=2.
base case: p .0/ is true, since both sides of the equation are equal to zero. (recall
that a sum with no terms is zero.)
inductive step: now we must show that p .n/ implies p .n c 1/ for all n (cid:21) 0. so
suppose that p .n/ is true; that is, 2 c 3 c 4 c (cid:1)(cid:1)(cid:1) c n d n.n c 1/=2. then we can
reason as follows:

2 c 3 c 4 c (cid:1)(cid:1)(cid:1) c n c .n c 1/ d   2 c 3 c 4 c (cid:1)(cid:1)(cid:1) c n   c .n c 1/

d n.n c 1/
d .n c 1/.n c 2/

2

c .n c 1/

2

above, we group some terms, use the assumption p .n/, and then simplify. this
shows that p .n/ implies p .n c 1/. by the principle of induction, p .n/ is true for
all n 2 n.
(cid:4)
where exactly is the error in this proof?

homework problems
problem 5.8.
the fibonacci numbers f .n/ are described in section 5.2.2.
prove by induction that for all n (cid:21) 1,

f .n (cid:0) 1/ (cid:1) f .n c 1/ (cid:0) f .n/2 d .(cid:0)1/n:

(5.8)

problem 5.9.
for any binary string    let num .  / be the nonnegative integer it represents in binary
notation. for example, num .10/ d 2, and num .0101/ d 5.
an n c 1-bit adder adds two n c 1-bit binary numbers. more precisely, an
n c 1-bit adder takes two length n c 1 binary strings
  n wwd an : : : a1a0;
  n wwd bn : : : b1b0;

and a binary digit c0 as inputs, and produces a length-(n c 1) binary string

(cid:27)n wwd sn : : : s1s0;

   mcs        2017/6/5     19:42     page 152     #160

152

chapter 5 induction

and a binary digit cnc1 as outputs, and satis   es the speci   cation:

num .  n/ c num .  n/ c c0 d 2nc1cnc1 c num .(cid:27)n/ :

(5.9)
there is a straighforward way to implement an nc1-bit adder as a digital circuit:
an n c 1-bit ripple-carry circuit has 1 c 2.n c 1/ binary inputs

an; : : : ; a1; a0; bn; : : : ; b1; b0; c0;

and n c 2 binary outputs,

cnc1; sn; : : : ; s1; s0:

as in problem 3.6, the ripple-carry circuit is speci   ed by the following formulas:

si wwd ai xor bi xor ci

cic1 wwd .ai and bi / or .ai and ci / or .bi and ci /; :

for 0   i   n.
(a) verify that de   nitions (5.10) and (5.11) imply that
an c bn c cn d 2cnc1 c sn:

(5.10)
(5.11)

(5.12)

for all n 2 n.
(b) prove by induction on n that an nc 1-bit ripple-carry circuit really is an nc 1-
bit adder, that is, its outputs satisfy (5.9).
hint: you may assume that, by de   nition of binary representation of integers,

num .  nc1/ d anc12nc1 c num .  n/ :

(5.13)

problem 5.10.
divided equilateral triangles5 (dets) can be built up as follows:

(cid:15) a single equilateral triangle counts as a det whose only subtriangle is itself.

0 built out of four
(cid:15) if t wwd
is a det, then the equilateral triangle t
copies of t as shown in in figure 5.9 is also a det, and the subtriangles of
0 are exactly the subtriangles of each of the copies of t .
t

5adapted from [49].

   mcs        2017/6/5     19:42     page 153     #161

5.3. strong induction vs. induction vs. well ordering

153

[h]

figure 5.9 det t

0 from four copies of det t

[h]

figure 5.10 trapezoid from three triangles

(a) de   ne the length of a det to be the number of subtriangles with an edge on
its base. prove by induction on length that the total number of subtriangles of a
det is the square of its length.

(b) show that a det with one of its corner subtriangles removed can be tiled with
trapezoids built out of three subtriangles as in figure 5.10.

problem 5.11.
the math for computer science mascot, theory hippotamus, made a startling
discovery while playing with his prized collection of unit squares over the weekend.
here is what happened.

first, theory hippotamus put his favorite unit square down on the    oor as in
figure 5.11 (a). he noted that the length of the periphery of the resulting shape was
4, an even number. next, he put a second unit square down next to the    rst so that
the two squares shared an edge as in figure 5.11 (b). he noticed that the length
of the periphery of the resulting shape was now 6, which is also an even number.
(the periphery of each shape in the    gure is indicated by a thicker line.) theory
hippotamus continued to place squares so that each new square shared an edge with
at least one previously-placed square and no squares overlapped. eventually, he
arrived at the shape in figure 5.11 (c). he realized that the length of the periphery
of this shape was 36, which is again an even number.

our plucky porcine pal is perplexed by this peculiar pattern. use induction on
the number of squares to prove that the length of the periphery is always even, no
matter how many squares theory hippotamus places or how he arranges them.

   mcs        2017/6/5     19:42     page 154     #162

154

chapter 5 induction

(a)

(b)

(c)

figure 5.11 some shapes that theory hippotamus created.

problem 5.12.
prove the distributive law of intersection over the union of n sets by induction:

a \ n[

bi d n[

.a \ bi /:

(5.14)

id1
hint: theorem 4.1.2 gives the n d 2 case.

id1

problem 5.13.
here is an interesting construction of a geometric object known as the koch snow   ake.
de   ne a sequence of polygons s0; s1 recursively, starting with s0 equal to an equi-
lateral triangle with unit sides. we construct snc1 by removing the middle third
of each edge of sn and replacing it with two line segments of the same length, as
illustrated in figure 5.12.

let an be the area of sn. observe that a0 is just the area of the unit equilateral
triangle which by elementary geometry is
prove by induction that for n (cid:21) 0, the area of the nth snow   ake is given by:

p
3=4.

  8

5

  4

 n 

(cid:0) 3
5

9

an d a0

:

(5.15)

   mcs        2017/6/5     19:42     page 155     #163

5.3. strong induction vs. induction vs. well ordering

155

figure 5.12 s0; s1; s2 and s3.

exam problems
problem 5.14.
prove by induction that

nx

1

k (cid:1) k   d .n c 1/   (cid:0) 1:

(5.16)

problem 5.15.
prove by induction:

03 c 13 c 23 c (cid:1)(cid:1)(cid:1) c n3 d  n.n c 1/

 2

;8n (cid:21) 0:

2

using the equation itself as the induction hypothesis p .n/.
(a) prove the
base case .n d 0/.
(b) now prove the

inductive step.

   mcs        2017/6/5     19:42     page 156     #164

156

chapter 5 induction

problem 5.16.
suppose p .n/ is a predicate on nonnegative numbers, and suppose

8k: p .k/ implies p .k c 2/:

(5.17)

for p    s that satisfy (5.17), some of the assertions below can hold for some,
but not all, such p , other assertions always hold no matter what the p may be,
and some never hold for any such p . indicate which case applies for each of the
assertions and brie   y explain why.
(a) 8n (cid:21) 0: p .n/
(b) not.p .0// and 8n (cid:21) 1: p .n/
(c) 8n (cid:21) 0: not.p .n//
(d) .8n   100: p .n// and .8n > 100: not.p .n///
(e) .8n   100: not.p .n/// and .8n > 100: p .n//
(f) p .0/ implies 8n: p .n c 2/
(g)   9n: p .2n/   implies 8n: p .2n c 2/
(h) p .1/ implies 8n: p .2n c 1/
(i)   9n: p .2n/   implies 8n: p .2n c 2/
(j) 9n:9m > n:   p .2n/ and not.p .2m//  
(k)   9n: p .n/   implies 8n:9m > n: p .m/
(l) not.p .0// implies 8n: not.p .2n//

problem 5.17.
we examine a series of propositional formulas f1; f2; : : : ; fn; : : : containing propo-
sitional variables p1; p2; : : : ; pn; : : : constructed as follows

f1.p1/
f2.p1; p2/
f3.p1; p2; p3/
f4.p1; p2; p3; p4/
f5.p1; p2; p3; p4; p5/

wwd p1
wwd p1 implies p2
wwd .p1 implies p2/ implies p3
wwd ..p1 implies p2/ implies p3/ implies p4
wwd ...p1 implies p2/ implies p3/ implies p4/ implies p5
:::

   mcs        2017/6/5     19:42     page 157     #165

5.3. strong induction vs. induction vs. well ordering

157

let tn be the number of different true/false settings of the variables p1; p2; : : : ; pn
for which fn.p1; p2; : : : ; pn/ is true. for example, t2 d 3 since f2.p1; p2/ is
true for 3 different settings of the variables p1 and p2:

p1 p2 f2.p1; p2/
t
t
f
f

t
f
t
f

t
f
t
t

(a) explain why

tnc1 d 2nc1 (cid:0) tn:

(b) use induction to prove that

tn d 2nc1 c .(cid:0)1/n

3

for n (cid:21) 1.

(5.18)

(*)

problem 5.18.
you are given n envelopes, numbered 0; 1; : : : ; n (cid:0) 1. envelope 0 contains 20 d 1
dollar, envelope 1 contains 21 d 2 dollars, . . . , and envelope n (cid:0) 1 contains 2n(cid:0)1
dollars. let p .n/ be the assertion that:

for all nonnegative integers k < 2n, there is a subset of the n envelopes
whose contents total to exactly k dollars.

prove by induction that p .n/ holds for all integers n (cid:21) 1.

problem 5.19.
prove by induction that

for all integers n (cid:21) 1.

1 (cid:1) 2 c 2 (cid:1) 3 c 3 (cid:1) 4 c (cid:1)(cid:1)(cid:1) c n.n c 1/ d n.n c 1/.n c 2/

(5.19)

3

   mcs        2017/6/5     19:42     page 158     #166

158

chapter 5 induction

figure 5.13 or-circuit from and-circuit.

problem 5.20.
a k-bit and-circuit is a digital circuit that has k 0-1 valued inputs6 d0; d1; : : : ; dk(cid:0)1
and one 0-1-valued output variable whose value will be
d0 and d1 and (cid:1)(cid:1)(cid:1) and dk(cid:0)1:

or-circuits are de   ned in the same way, with    or    replacing    and.   
(a) suppose we want an or-circuit but only have a supply of and-circuits and
some not-gates (   inverters   ) that have one 0-1 valued input and one 0-1 valued
output. we can turn an and-circuit into an or-circuit by attaching a not-gate to
each input of the and-circuit and also attaching a not-gate to the output of the
and-circuit. this is illustrated in figure 5.13. brie   y explain why this works.

large digital circuits are built by connecting together smaller digital circuits as
components. one of the most basic components is a two-input/one-output and-
gate that produces an output value equal to the and of its two input values. so
according the de   nition in part (a), a single and-gate is a 1-bit and-circuit.

we can build up larger and-circuits out of a collection of and-gates in several
ways. for example, one way to build a 4-bit and-circuit is to connect three and-
gates as illustrated in figure 5.14.
more generally, a depth-n tree-design and-circuit      depth-n circuit    for short   
has 2n inputs and is built from two depth-.n (cid:0) 1/ circuits by using the outputs of
the two depth-.n (cid:0) 1/ circuits as inputs to a single and-gate. this is illustrated in
figure 5.15. so the 4-bit and-circuit in figure 5.14 is a depth-2 circuit. a depth-1
circuit is de   ned simply to be a single and-gate.

6following the usual conventions for digital circuits, we   re using 1 for the truth value t and 0 for

f.

and-circuit	not-gate	.	.	.	   mcs        2017/6/5     19:42     page 159     #167

5.3. strong induction vs. induction vs. well ordering

159

figure 5.14 a 4-bit and-circuit.

figure 5.15 an n-bit tree-design and-circuit.

and and a a 2 3 and depth-n-1 circuitand    .. depth-n-1 circuita2n-1-1a2n-1+1a2n-1a2n-1   mcs        2017/6/5     19:42     page 160     #168

160

chapter 5 induction

(b) let gate#.n/ be the number of and-gates in a depth-n circuit. prove by in-
duction that

gate#.n/ d 2n (cid:0) 1

(5.20)

for all n (cid:21) 1.

problems for section 5.2

practice problems
problem 5.21.
some fundamental principles for reasoning about nonnegative integers are:

1. the induction principle,

2. the strong induction principle,

3. the well ordering principle.

identify which, if any, of the above principles is captured by each of the following

id136 rules.
(a)

(b)

(c)

(d)

(e)

p .0/;8m: .8k   m: p .k// implies p .m c 1/

8n: p .n/

p .b/;8k (cid:21) b: p .k/ implies p .k c 1/

8k (cid:21) b: p .k/

9n: p .n/

9m:   p .m/ and .8k: p .k/ implies k (cid:21) m/  

p .0/;8k > 0: p .k/ implies p .k c 1/

8n: p .n/

8m: .8k < m: p .k// implies p .m/

8n: p .n/

   mcs        2017/6/5     19:42     page 161     #169

5.3. strong induction vs. induction vs. well ordering

161

problem 5.22.
the fibonacci numbers f .n/ are described in section 5.2.2.

indicate exactly which sentence(s) in the following bogus proof contain logical

errors? explain.

false claim. every fibonacci number is even.

bogus proof. let all the variables n; m; k mentioned below be nonnegative integer
valued. let even.n/ mean that f .n/ is even. the proof is by strong induction with
induction hypothesis even.n/.
base case: f .0/ d 0 is an even number, so even.0/ is true.
inductive step: we assume may assume the strong induction hypothesis

even.k/ for 0   k   n;

and we must prove even.n c 1/.
then by strong induction hypothesis, even.n/ and even.n (cid:0) 1/ are true, that
is, f .n/ and f .n (cid:0) 1/ are both even. but by the de   nition, f .n c 1/ equals the
sum f .n/ c f .n (cid:0) 1/ of two even numbers, and so it is also even. this proves
even.n c 1/ as required.
hence, f .m/ is even for all m 2 n by the strong induction principle.

(cid:4)

problem 5.23.
alice wants to prove by induction that a predicate p holds for certain nonnegative
integers. she has proven that for all nonnegative integers n d 0; 1; : : :

p .n/ implies p .n c 3/:

(a) suppose alice also proves that p .5/ holds. which of the following proposi-
tions can she infer?
1. p .n/ holds for all n (cid:21) 5
2. p .3n/ holds for all n (cid:21) 5
3. p .n/ holds for n d 8; 11; 14; : : :
4. p .n/ does not hold for n < 5
5. 8n: p .3n c 5/
6. 8n > 2: p .3n (cid:0) 1/

   mcs        2017/6/5     19:42     page 162     #170

162

chapter 5 induction

7. p .0/ implies 8n: p .3n c 2/
8. p .0/ implies 8n: p .3n/

(b) which of the following could alice prove in order to conclude that p .n/ holds
for all n (cid:21) 5?

1. p .0/
2. p .5/
3. p .5/ and p .6/
4. p .0/, p .1/ and p .2/
5. p .5/, p .6/ and p .7/
6. p .2/, p .4/ and p .5/
7. p .2/, p .4/ and p .6/
8. p .3/, p .5/ and p .7/

problem 5.24.
prove that every amount of postage of 12 cents or more can be formed using just
4-cent and 5-cent stamps.

class problems
problem 5.25.
the fibonacci numbers are described in section 5.2.2.

prove, using strong induction, the following closed-form formula for the fi-

bonacci numbers.7

f .n/ d pn (cid:0) qnp

where p d 1cp
hint: note that p and q are the roots of x2 (cid:0) x (cid:0) 1 d 0, and so p2 d p c 1 and
q2 d q c 1.

and q d 1(cid:0)p

.

5

2

5

2

5

problem 5.26.
a sequence of numbers is weakly decreasing when each number in the sequence is

7this mind-boggling formula is known as binet   s formula. we   ll explain in chapter 16, and again

in chapter 22, how it comes about.

   mcs        2017/6/5     19:42     page 163     #171

5.3. strong induction vs. induction vs. well ordering

163

(cid:21) the numbers after it. (this implies that a sequence of just one number is weakly
decreasing.)

here   s a bogus proof of a very important true fact, every integer greater than 1 is

a product of a unique weakly decreasing sequence of primes   a pusp, for short.

explain what   s bogus about the proof.

lemma. every integer greater than 1 is a pusp.
for example, 252 d 7 (cid:1) 3 (cid:1) 3 (cid:1) 2 (cid:1) 2, and no other weakly decreasing sequence of
primes will have a product equal to 252.

bogus proof. we will prove the lemma by strong induction, letting the induction
hypothesis p .n/ be

n is a pusp:

so the lemma will follow if we prove that p .n/ holds for all n (cid:21) 2.
base case (n d 2): p .2/ is true because 2 is prime, and so it is a length one
product of primes, and this is obviously the only sequence of primes whose product
can equal 2.
inductive step: suppose that n (cid:21) 2 and that i is a pusp for every integer i where
2   i < n c 1. we must show that p .n c 1/ holds, namely, that n c 1 is also a
pusp. we argue by cases:
if n c 1 is itself prime, then it is the product of a length one sequence consisting
of itself. this sequence is unique, since by de   nition of prime, n c 1 has no other
prime factors. so n c 1 is a pusp, that is p .n c 1/ holds in this case.
otherwise, n c 1 is not prime, which by de   nition means n c 1 d km for
some integers k; m such that 2   k; m < n c 1. now by the strong induction
hypothesis, we know that k and m are pusps. it follows that by merging the unique
prime sequences for k and m, in sorted order, we get a unique weakly decreasing
sequence of primes whose product equals n c 1. so n c 1 is a pusp, in this case as
well.
so p .n c 1/ holds in any case, which completes the proof by strong induction
that p .n/ holds for all n (cid:21) 2.
(cid:4)

problem 5.27.
de   ne the potential p.s / of a stack of blocks s to be k.k (cid:0) 1/=2 where k is the
number of blocks in s. de   ne the potential p.a/ of a set of stacks a to be the sum
of the potentials of the stacks in a.

   mcs        2017/6/5     19:42     page 164     #172

164

chapter 5 induction

generalize theorem 5.2.1 about scores in the stacking game to show that for any
set of stacks a if a sequence of moves starting with a leads to another set of stacks
b then p.a/ (cid:21) p.b/, and the score for this sequence of moves is p.a/ (cid:0) p.b/.
hint: try induction on the number of moves to get from a to b.

homework problems
problem 5.28.
a group of n (cid:21) 1 people can be divided into teams, each containing either 4 or
7 people. what are all the possible values of n? use induction to prove that your
answer is correct.

problem 5.29.
the following lemma is true, but the proof given for it below is defective. pin-
point exactly where the proof    rst makes an unjusti   ed step and explain why it is
unjusti   ed.
lemma. for any prime p and positive integers n; x1; x2; : : : ; xn, if p j x1x2 : : : xn,
then p j xi for some 1   i   n.
bogus proof. proof by strong induction on n. the induction hypothesis p .n/ is
that lemma holds for n.
base case n d 1: when n d 1, we have p j x1, therefore we can let i d 1 and
conclude p j xi.
induction step: now assuming the claim holds for all k   n, we must prove it
for n c 1.
so suppose p j x1x2 (cid:1)(cid:1)(cid:1) xnc1. let yn d xnxnc1, so x1x2 (cid:1)(cid:1)(cid:1) xnc1 d x1x2 (cid:1)(cid:1)(cid:1) xn(cid:0)1yn.
since the right-hand side of this equality is a product of n terms, we have by induc-
tion that p divides one of them. if p j xi for some i < n, then we have the desired
i. otherwise p j yn. but since yn is a product of the two terms xn; xnc1, we have
by strong induction that p divides one of them. so in this case p j xi for i d n or
i d n c 1.
(cid:4)

exam problems
problem 5.30.
the fibonacci numbers f .n/ are described in section 5.2.2.
these numbers satisfy many unexpected identities, such as

f .0/2 c f .1/2 c (cid:1)(cid:1)(cid:1) c f .n/2 d f .n/f .n c 1/:

(5.21)

   mcs        2017/6/5     19:42     page 165     #173

5.3. strong induction vs. induction vs. well ordering

165

equation (5.21) can be proved to hold for all n 2 n by induction, using the equation
itself as the induction hypothesis p .n/.
(a) prove the
base case .n d 0/.
(b) now prove the

inductive step.

problem 5.31.
use strong induction to prove that n   3n=3 for every integer n (cid:21) 0.

problem 5.32.
a class of any size of 18 or more can be assembled from student teams of sizes 4
and 7. prove this by induction (of some kind), using the induction hypothesis:
s.n/ wwd a class of n c 18 students can be assembled from teams of sizes 4 and 7:

problem 5.33.
any amount of ten or more cents postage that is a multiple of    ve can be made
using only 10   and 15   stamps. prove this by induction (ordinary or strong, but say
which) using the induction hypothesis

s.n/ wwd .5n c 10/   postage can be made using only 10   and 15   stamps:

   mcs        2017/6/5     19:42     page 166     #174

   mcs        2017/6/5     19:42     page 167     #175

6

state machines
state machines are a simple, abstract model of step-by-step processes. since com-
puter programs can be understood as de   ning step-by-step computational processes,
it   s not surprising that state machines come up regularly in computer science. they
also come up in many other settings such as designing digital circuits and mod-
eling probabilistic processes. this section introduces floyd   s invariant principle
which is a version of induction tailored speci   cally for proving properties of state
machines.

one of the most important uses of induction in computer science involves prov-
ing one or more desirable properties continues to hold at every step in a process.
a property that is preserved through a series of operations or steps is known as a
preserved invariant.

examples of desirable invariants include properties such as a variable never ex-
ceeding a certain value, the altitude of a plane never dropping below 1,000 feet
without the wing   aps being deployed, and the temperature of a nuclear reactor
never exceeding the threshold for a meltdown.

6.1 states and transitions

formally, a state machine is nothing more than a binary relation on a set, except
that the elements of the set are called    states,    the relation is called the transition
relation, and an arrow in the graph of the transition relation is called a transition.
a transition from state q to state r will be written q (cid:0)! r. the transition relation
is also called the state graph of the machine. a state machine also comes equipped
with a designated start state.

a simple example is a bounded counter, which counts from 0 to 99 and over   ows
at 100. this state machine is pictured in figure 6.1, with states pictured as circles,
transitions by arrows, and with start state 0 indicated by the double circle. to be

figure 6.1 state transitions for the 99-bounded counter.

01299overflowstartstate   mcs        2017/6/5     19:42     page 168     #176

168

chapter 6 state machines

precise, what the picture tells us is that this bounded counter machine has

states wwd f0; 1; : : : ; 99; over   owg;

start state wwd 0;
transitions wwd fn (cid:0)! n c 1 j 0   n < 99g

[ f99 (cid:0)! over   ow; over   ow (cid:0)! over   owg:

this machine isn   t much use once it over   ows, since it has no way to get out of its
over   ow state.

state machines for digital circuits and string pattern matching algorithms, for in-
stance, usually have only a    nite number of states. machines that model continuing
computations typically have an in   nite number of states. for example, instead of
the 99-bounded counter, we could easily de   ne an    unbounded    counter that just
keeps counting up without over   owing. the unbounded counter has an in   nite
state set, the nonnegative integers, which makes its state diagram harder to draw.

state machines are often de   ned with labels on states and/or transitions to indi-
cate such things as input or output values, costs, capacities, or probabilities. our
state machines don   t include any such labels because they aren   t needed for our
purposes. we do name states, as in figure 6.1, so we can talk about them, but the
names aren   t part of the state machine.

6.2 the invariant principle

6.2.1 a diagonally-moving robot
suppose we have a robot that starts at the origin and moves on an in   nite 2-
dimensional integer grid. the state of the robot at any time can be speci   ed by
the integer coordinates .x; y/ of the robot   s current position. so the start state
is .0; 0/. at each step, the robot may move to a diagonally adjacent grid point, as
illustrated in figure 6.2.

to be precise, the robot   s transitions are:

f.m; n/ (cid:0)! .m    1; n    1/ j m; n 2 zg:

for example, after the    rst step, the robot could be in states .1; 1/, .1;(cid:0)1/, .(cid:0)1; 1/
or .(cid:0)1;(cid:0)1/. after two steps, there are 9 possible states for the robot, includ-
ing .0; 0/. the question is, can the robot ever reach position .1; 0/?
if you play around with the robot a bit, you   ll probably notice that the robot can
only reach positions .m; n/ for which m c n is even, which of course means that it

   mcs        2017/6/5     19:42     page 169     #177

6.2. the invariant principle

169

figure 6.2 the diagonally moving robot.

can   t reach .1; 0/. this follows because the evenness of the sum of the coordinates
is a property that is preserved by transitions. this is an example of a preserved
invariant.

this once, let   s go through this preserved invariant argument, carefully high-
lighting where induction comes in. speci   cally, de   ne the even-sum property of
states to be:

even-sum..m; n// wwd   m c n is even  :

lemma 6.2.1. for any transition q (cid:0)! r of the diagonally-moving robot, if even-
sum(q), then even-sum(r).

this lemma follows immediately from the de   nition of the robot   s transitions:
.m; n/ (cid:0)! .m    1; n    1/. after a transition, the sum of coordinates changes by
.  1/c .  1/, that is, by 0, 2, or -2. of course, adding 0, 2 or -2 to an even number
gives an even number. so by a trivial induction on the number of transitions, we
can prove:

theorem 6.2.2. the sum of the coordinates of any state reachable by the diagonally-
moving robot is even.

0123012xy   mcs        2017/6/5     19:42     page 170     #178

170

chapter 6 state machines

figure 6.3 can the robot get to .1; 0/?

0123012xygoal         mcs        2017/6/5     19:42     page 171     #179

6.2. the invariant principle

171

proof. the proof is induction on the number of transitions the robot has made. the
induction hypothesis is

p .n/ wwd if q is a state reachable in n transitions, then even-sum(q):

base case: p .0/ is true since the only state reachable in 0 transitions is the start
state .0; 0/, and 0 c 0 is even.
inductive step: assume that p .n/ is true, and let r be any state reachable in nc 1
transitions. we need to prove that even-sum(r) holds.
since r is reachable in n c 1 transitions, there must be a state q reachable in n
transitions such that q (cid:0)! r. since p .n/ is assumed to be true, even-sum(q) holds,
and so by lemma 6.2.1, even-sum(r) also holds. this proves that p .n/ implies
p .n c 1/ as required, completing the proof of the inductive step.
we conclude by induction that for all n (cid:21) 0, if q is reachable in n transitions, then
even-sum(q). this implies that every reachable state has the even-sum property.
(cid:4)

corollary 6.2.3. the robot can never reach position .1; 0/.

proof. by theorem 6.2.2, we know the robot can only reach positions with coor-
(cid:4)
dinates that sum to an even number, and thus it cannot reach position .1; 0/.

6.2.2 statement of the invariant principle
using the even-sum invariant to understand the diagonally-moving robot is a sim-
ple example of a basic proof method called the invariant principle. the principle
summarizes how induction on the number of steps to reach a state applies to invari-
ants.

a state machine execution describes a possible sequence of steps a machine

might take.

de   nition 6.2.4. an execution of the state machine is a (possibly in   nite) sequence
of states with the property that

(cid:15) it begins with the start state, and
(cid:15) if q and r are consecutive states in the sequence, then q (cid:0)! r.

a state is called reachable if it appears in some execution.

de   nition 6.2.5. a preserved invariant of a state machine is a predicate p on
states, such that whenever p .q/ is true of a state q and q (cid:0)! r for some state r
then p .r/ holds.

   mcs        2017/6/5     19:42     page 172     #180

172

chapter 6 state machines

the invariant principle
if a preserved invariant of a state machine is true for the start state,
then it is true for all reachable states.

the invariant principle is nothing more than the induction principle reformulated
in a convenient form for state machines. showing that a predicate is true in the start
state is the base case of the induction, and showing that a predicate is a preserved
invariant corresponds to the inductive step.1

1preserved invariants are commonly just called    invariants    in the literature on program correct-
ness, but we decided to throw in the extra adjective to avoid confusion with other de   nitions. for
example, other texts (as well as another subject at mit) use    invariant    to mean    predicate true of
all reachable states.    let   s call this de   nition    invariant-2.    now invariant-2 seems like a reason-
able de   nition, since unreachable states by de   nition don   t matter, and all we want to show is that
a desired property is invariant-2. but this confuses the objective of demonstrating that a property is
invariant-2 with the method of    nding a preserved invariant   which is preserved even at unreachable
states   to show that it is invariant-2.

   mcs        2017/6/5     19:42     page 173     #181

6.2. the invariant principle

robert w. floyd

173

the invariant principle was formulated by robert w. floyd at carnegie tech
in 1967. (carnegie tech was renamed carnegie-mellon university the following
year.) floyd was already famous for work on the formal grammars that trans-
formed the    eld of programming language parsing; that was how he got to be
a professor even though he never got a ph.d. (he had been admitted to a phd
program as a teenage prodigy, but    unked out and never went back.)

in that same year, albert r. meyer was appointed assistant professor in the
carnegie tech computer science department, where he    rst met floyd. floyd
and meyer were the only theoreticians in the department, and they were both de-
lighted to talk about their shared interests. after just a few conversations, floyd   s
new junior colleague decided that floyd was the smartest person he had ever met.
naturally, one of the    rst things floyd wanted to tell meyer about was his new,
as yet unpublished, invariant principle. floyd explained the result to meyer, and
meyer wondered (privately) how someone as brilliant as floyd could be excited
by such a trivial observation. floyd had to show meyer a bunch of examples be-
fore meyer understood floyd   s excitement    not at the truth of the utterly obvious
invariant principle, but rather at the insight that such a simple method could be so
widely and easily applied in verifying programs.

floyd left for stanford the following year. he won the turing award   the
   nobel prize    of computer science   in the late 1970   s, in recognition of his work
on grammars and on the foundations of program veri   cation. he remained at
stanford from 1968 until his death in september, 2001. you can learn more about
floyd   s life and work by reading the eulogy at

http://oldwww.acm.org/pubs/membernet/stories/   oyd.pdf

written by his closest colleague, don knuth.

   mcs        2017/6/5     19:42     page 174     #182

174

chapter 6 state machines

6.2.3 the die hard example
the movie die hard 3: with a vengeance includes an amusing example of a state
machine. the lead characters played by samuel l. jackson and bruce willis have
to disarm a bomb planted by the diabolical simon gruber:

simon: on the fountain, there should be 2 jugs, do you see them? a 5-
gallon and a 3-gallon. fill one of the jugs with exactly 4 gallons of water
and place it on the scale and the timer will stop. you must be precise;
one ounce more or less will result in detonation. if you   re still alive in 5
minutes, we   ll speak.
bruce: wait, wait a second. i don   t get it. do you get it?
samuel: no.
bruce: get the jugs. obviously, we can   t    ll the 3-gallon jug with 4 gal-
lons of water.
samuel: obviously.
bruce: all right. i know, here we go. we    ll the 3-gallon jug exactly to
the top, right?
samuel: uh-huh.
bruce: okay, now we pour this 3 gallons into the 5-gallon jug, giving us
exactly 3 gallons in the 5-gallon jug, right?
samuel: right, then what?
bruce: all right. we take the 3-gallon jug and    ll it a third of the way...
samuel: no! he said,    be precise.    exactly 4 gallons.
bruce: sh - -. every cop within 50 miles is running his a - - off and i   m
out here playing kids games in the park.
samuel: hey, you want to focus on the problem at hand?

fortunately, they    nd a solution in the nick of time. you can work out how.

the die hard 3 state machine
the jug-   lling scenario can be modeled with a state machine that keeps track of
the amount b of water in the big jug, and the amount l in the little jug. with the 3
and 5 gallon water jugs, the states formally will be pairs .b; l/ of real numbers such

   mcs        2017/6/5     19:42     page 175     #183

6.2. the invariant principle

175

that 0   b   5; 0   l   3. (we can prove that the reachable values of b and l will
be nonnegative integers, but we won   t assume this.) the start state is .0; 0/, since
both jugs start empty.

since the amount of water in the jug must be known exactly, we will only con-
sider moves in which a jug gets completely    lled or completely emptied. there are
several kinds of transitions:

1. fill the little jug: .b; l/ (cid:0)! .b; 3/ for l < 3.
2. fill the big jug: .b; l/ (cid:0)! .5; l/ for b < 5.
3. empty the little jug: .b; l/ (cid:0)! .b; 0/ for l > 0.
4. empty the big jug: .b; l/ (cid:0)! .0; l/ for b > 0.
5. pour from the little jug into the big jug: for l > 0,

(
.b c l; 0/
if b c l   5,
.5; l (cid:0) .5 (cid:0) b// otherwise.
(
.0; b c l/
if b c l   3,
.b (cid:0) .3 (cid:0) l/; 3/ otherwise.

.b; l/ (cid:0)!

.b; l/ (cid:0)!

6. pour from big jug into little jug: for b > 0,

note that in contrast to the 99-counter state machine, there is more than one pos-
sible transition out of states in the die hard machine. machines like the 99-counter
with at most one transition out of each state are called deterministic. the die hard
machine is nondeterministic because some states have transitions to several differ-
ent states.

the die hard 3 bomb gets disarmed successfully because the state (4,3) is reach-

able.

die hard permanently
the die hard series is getting tired, so we propose a    nal die hard permanently.
here, simon   s brother returns to avenge him, posing the same challenge, but with
the 5 gallon jug replaced by a 9 gallon one. the state machine has the same spec-
i   cation as the die hard 3 version, except all occurrences of    5    are replaced by
   9.   

now, reaching any state of the form .4; l/ is impossible. we prove this using
the invariant principle. speci   cally, we de   ne the preserved invariant predicate
p ..b; l// to be that b and l are nonnegative integer multiples of 3.

   mcs        2017/6/5     19:42     page 176     #184

176

chapter 6 state machines

to prove that p is a preserved invariant of die-hard-once-and-for-all machine,
we assume p .q/ holds for some state q wwd .b; l/ and that q (cid:0)! r. we have to
show that p .r/ holds. the proof divides into cases, according to which transition
rule is used.
one case is a       ll the little jug    transition. this means r d .b; 3/. but p .q/
implies that b is an integer multiple of 3, and of course 3 is an integer multiple of
3, so p .r/ still holds.

another case is a    pour from big jug into little jug    transition. for the subcase
when there isn   t enough room in the little jug to hold all the water, that is, when
b c l > 3, we have r d .b (cid:0) .3 (cid:0) l/; 3/. but p .q/ implies that b and l are integer
multiples of 3, which means b (cid:0) .3 (cid:0) l/ is too, so in this case too, p .r/ holds.
we won   t bother to crank out the remaining cases, which can all be checked
just as easily. now by the invariant principle, we conclude that every reachable
state satisi   es p . but since no state of the form .4; l/ satisi   es p , we have proved
rigorously that bruce dies once and for all!

by the way, notice that the state (1,0), which satis   es not.p /, has a transition
to (0,0), which satis   es p . so the negation of a preserved invariant may not be a
preserved invariant.

6.3 partial correctness & termination

floyd distinguished two required properties to verify a program. the    rst property
is called partial correctness; this is the property that the    nal results, if any, of the
process must satisfy system requirements.

you might suppose that if a result was only partially correct, then it might also
be partially incorrect, but that   s not what floyd meant. the word    partial    comes
from viewing a process that might not terminate as computing a partial relation.
partial correctness means that when there is a result, it is correct, but the process
might not always produce a result, perhaps because it gets stuck in a loop.

the second correctness property, called termination, is that the process does

always produce some    nal value.

partial correctness can commonly be proved using the invariant principle. termi-
nation can commonly be proved using the well ordering principle. we   ll illustrate
this by verifying a fast exponentiation procedure.

   mcs        2017/6/5     19:42     page 177     #185

6.3. partial correctness & termination

177

6.3.1 fast exponentiation
exponentiating
the most straightforward way to compute the bth power of a number a is to multi-
ply a by itself b(cid:0)1 times. but the solution can be found in considerably fewer mul-
tiplications by using a technique called fast exponentiation. the register machine
program below de   nes the fast exponentiation algorithm. the letters x; y; z; r de-
note registers that hold numbers. an assignment statement has the form    z wd a   
and has the effect of setting the number in register z to be the number a.

a fast exponentiation program
given inputs a 2 r; b 2 n, initialize registers x; y; z to a; 1; b respectively, and
repeat the following sequence of steps until termination:

(cid:15) if z d 0 return y and terminate
(cid:15) r wd remainder.z; 2/
(cid:15) z wd quotient.z; 2/
(cid:15) if r d 1, then y wd xy
(cid:15) x wd x2

we claim this program always terminates and leaves y d ab.
to begin, we   ll model the behavior of the program with a state machine:
1. states wwd r (cid:2) r (cid:2) n,
2. start state wwd .a; 1; b/,
(
3. transitions are de   ned by the rule

.x; y; z/ (cid:0)!

.x2; y; quotient.z; 2//
.x2; xy; quotient.z; 2//

if z is nonzero and even;
if z is nonzero and odd:

the preserved invariant p ..x; y; z// will be

z 2 n and yxz d ab:

(6.1)
to prove that p is preserved, assume p ..x; y; z// holds and that .x; y; z/ (cid:0)!
.xt ; yt ; zt /. we must prove that p ..xt ; yt ; zt // holds, that is,

zt 2 n and yt xzt

t

d ab:

(6.2)

   mcs        2017/6/5     19:42     page 178     #186

178

chapter 6 state machines

since there is a transition from .x; y; z/, we have z    0, and since z 2 n
by (6.1), we can consider just two cases:
if z is even, then we have that xt d x2; yt d y; zt d z=2. therefore, zt 2 n
and

yt xzt
t

d y.x2/z=2
d yx2(cid:1)z=2
d yxz
d ab

yt xzt
t

d xy.x2/.z(cid:0)1/=2
d yx1c2(cid:1).z(cid:0)1/=2
d yx1c.z(cid:0)1/
d yxz
d ab

if z is odd, then we have that xt d x2; yt d xy; zt d .z (cid:0) 1/=2. therefore,
zt 2 n and

(by (6.1))

(by (6.1))

so in both cases, (6.2) holds, proving that p is a preserved invariant.
now it   s easy to prove partial correctness: if the fast exponentiation program
terminates, it does so with ab in register y. this works because 1 (cid:1) ab d ab, which
means that the start state .a; 1; b/ satisi   es p . by the invariant principle, p holds
for all reachable states. but the program only stops when z d 0. if a terminated
state .x; y; 0/ is reachable, then y d yx0 d ab as required.
ok, it   s partially correct, but what   s fast about it? the answer is that the number
of multiplications it performs to compute ab is roughly the length of the binary
representation of b. that is, the fast exponentiation program uses roughly log b2
multiplications, compared to the naive approach of multiplying by a a total of b(cid:0) 1
times.
more precisely, it requires at most 2.dlog be c 1/ multiplications for the fast
exponentiation algorithm to compute ab for b > 1. the reason is that the number
in register z is initially b, and gets at least halved with each transition. so it can   t
be halved more than dlog be c 1 times before hitting zero and causing the program
to terminate. since each of the transitions involves at most two multiplications, the
total number of multiplications until z d 0 is at most 2.dlog bec 1/ for b > 0 (see
problem 6.6).

2as usual in computer science, log b means the base two logarithm log2 b. we use, ln b for the

natural logarithm loge b, and otherwise write the logarithm base explicitly, as in log10 b.

   mcs        2017/6/5     19:42     page 179     #187

6.3. partial correctness & termination

179

6.3.2 derived variables
the preceding termination proof involved    nding a nonnegative integer-valued
measure to assign to states. we might call this measure the    size    of the state.
we then showed that the size of a state decreased with every state transition. by
the well ordering principle, the size can   t decrease inde   nitely, so when a mini-
mum size state is reached, there can   t be any transitions possible: the process has
terminated.

more generally, the technique of assigning values to states   not necessarily non-
negative integers and not necessarily decreasing under transitions   is often useful
in the analysis of algorithms. potential functions play a similar role in physics. in
the context of computational processes, such value assignments for states are called
derived variables.
for example, for the die hard machines we could have introduced a derived
variable f w states ! r for the amount of water in both buckets, by setting
f ..a; b//wwd ac b. similarly, in the robot problem, the position of the robot along
the x-axis would be given by the derived variable x-coord, where x-coord..i; j //wwd i.
there are a few standard properties of derived variables that are handy in ana-

lyzing state machines.
de   nition 6.3.1. a derived variable f w states ! r is strictly decreasing iff

q (cid:0)! q

0

implies f .q

0

/ < f .q/:

it is weakly decreasing iff

q (cid:0)! q

0

implies f .q

0

/   f .q/:

strictly increasingweakly increasing derived variables are de   ned similarly.3

we con   rmed termination of the fast exponentiation procedure by noticing that
the derived variable z was nonnegative-integer-valued and strictly decreasing. we
can summarize this approach to proving termination as follows:
theorem 6.3.2. if f is a strictly decreasing n-valued derived variable of a state
machine, then the length of any execution starting at state q is at most f .q/.

of course, we could prove theorem 6.3.2 by induction on the value of f .q/, but
think about what it says:    if you start counting down at some nonnegative integer
f .q/, then you can   t count down more than f .q/ times.    put this way, it   s obvious.

3weakly increasing variables are often also called nondecreasing. we will avoid this terminology
to prevent confusion between nondecreasing variables and variables with the much weaker property
of not being a decreasing variable.

   mcs        2017/6/5     19:42     page 180     #188

180

chapter 6 state machines

6.3.3 termination with well ordered sets (optional)
theorem 6.3.2 generalizes straightforwardly to derived variables taking values in a
well ordered set (section 2.4.

theorem 6.3.3. if there exists a strictly decreasing derived variable whose range
is a well ordered set, then every execution terminates.

theorem 6.3.3 follows immediately from the observation that a set of numbers

is well ordered iff it has no in   nite decreasing sequences (problem 2.23).

note that the existence of a weakly decreasing derived variable does not guaran-
tee that every execution terminates. an in   nite execution could proceed through
states in which a weakly decreasing variable remained constant.

6.3.4 a southeast jumping robot (optional)
here   s a simple, contrived example of a termination proof based on a variable that
is strictly decreasing over a well ordered set. let   s think about a robot that travels
around the nonnegative integer quadrant n2.

if the robot is at some position .x; y/ different from the origin .0; 0/, the robot

must make a move, which may be

(cid:15) a unit distance west   that is, .x; y/ (cid:0)! .x (cid:0) 1; y/ for x > 0, or
(cid:15) a unit distance south combined with an arbitrary jump east   that is, .x; y/ (cid:0)!
.z; y (cid:0) 1/ for z (cid:21) x,

providing the move does not leave the quadrant.

claim 6.3.4. the robot will always get stuck at the origin.

if we think of the robot as a nondeterministic state machine, then claim 6.3.4 is
a termination assertion. the claim may seem obvious, but it really has a different
character than termination based on nonnegative integer-valued variables. that   s
because, even knowing that the robot is at position .0; 1/, for example, there is no
way to bound the time it takes for the robot to get stuck. it can delay getting stuck
for as many seconds as it wants by making its next move to a distant point in the
far east. this rules out proving termination using theorem 6.3.2.

so does claim 6.3.4 still seem obvious?
well it is if you see the trick. de   ne a derived variable v mapping robot states
to the numbers in the well ordered set n c f of lemma 2.4.6. in particular, de   ne
v w n2 ! n c f as follows

v.x; y/ wwd y c x
x c 1

:

   mcs        2017/6/5     19:42     page 181     #189

6.4. the stable marriage problem

181

figure 6.4 preferences for four people. both men like angelina best and both
women like brad best.
now it   s easy to check that if .x; y/ (cid:0)! .x
0

/ is a legitimate robot move, then
// < v..x; y//. in particular, v is a strictly decreasing derived variable, so
v..x
theorem 6.3.3 implies that the robot always get stuck   even though we can   t say
how many moves it will take until it does.

; y

; y

0

0

0

6.4 the stable marriage problem

suppose we have a population of men and women in which each person has pref-
erences of the opposite-gender person they would like to marry: each man has his
preference list of all the women, and each woman has her preference list of all of
the men.

the preferences don   t have to be symmetric. that is, jennifer might like brad
best, but brad doesn   t necessarily like jennifer best. the goal is to marry every-
one: every man must marry exactly one woman and vice versa   no polygamy and
heterosexual marriages only.4 moreover, we would like to    nd a matching between
men and women that is stable in the sense that there is no pair of people who prefer
one another to their spouses.

for example, suppose brad likes angelina best, and angelina likes brad best, but
brad and angelina are married to other people, say jennifer and billy bob. now
brad and angelina prefer each other to their spouses, which puts their marriages
at risk. pretty soon, they   re likely to start spending late nights together working on
problem sets!

this unfortunate situation is illustrated in figure 6.4, where the digits    1    and    2   
near a man shows which of the two women he ranks    rst and second, respectively,
and similarly for the women.

4same-sex marriage is an interesting but separate case.

bradbilly bobjenniferangelina12211221   mcs        2017/6/5     19:42     page 182     #190

182

chapter 6 state machines

more generally, in any matching, a man and woman who are not married to each
other and who like each other better than their spouses is called a rogue couple. in
the situation shown in figure 6.4, brad and angelina would be a rogue couple.

having a rogue couple is not a good thing, since it threatens the stability of the
marriages. on the other hand, if there are no rogue couples, then for any man and
woman who are not married to each other, at least one likes their spouse better than
the other, and so there won   t be any mutual temptation to start an affair.

de   nition 6.4.1. a stable matching is a matching with no rogue couples.

the question is, given everybody   s preferences, can you    nd a stable set of mar-
riages? in the example consisting solely of the four people in figure 6.4, we could
let brad and angelina both have their    rst choices by marrying each other. now
neither brad nor angelina prefers anybody else to their spouse, so neither will be
in a rogue couple. this leaves jen not-so-happily married to billy bob, but neither
jen nor billy bob can entice somebody else to marry them, and so this is a stable
matching.

it turns out there always is a stable matching among a group of men and women.
we don   t know of any immediate way to recognize this, and it seems surprising. in
fact, in the apparently similar same-sex or    buddy    matching problem where people
are supposed to be paired off as buddies, regardless of gender, a stable matching
may not be possible. an example of preferences among four people where there is
no stable buddy match is given in problem 6.22. but when men are only allowed
to marry women, and vice versa, then there is a simple procedure to produce a
stable matching and the concept of preserved invariants provides an elegant way to
understand and verify the procedure.

6.4.1 the mating ritual
the procedure for    nding a stable matching can be described in a memorable way
as a mating ritual that takes place over several days. on the starting day, each man
has his full preference list of all the women, and likewise each woman has her full
preference list of all the men. then following events happen each day:

morning: each man stands under the balcony of the woman on the top of his
list, that is the woman he prefers above all the other remaining women. then he
serenades her. he is said to be her suitor. if a man has no women left on his list, he
stays home and does his math homework.

afternoon: each woman who has one or more suitors says to her favorite among
them,    we might get engaged. please stay around.    to the other suitors, she says,
   no. i will never marry you! take a hike!   

   mcs        2017/6/5     19:42     page 183     #191

6.4. the stable marriage problem

183

evening: any man who is told by a woman to take a hike crosses that woman

off his preference list.

termination condition: when a day arrives in which every woman has at most

one suitor, the ritual ends with each woman marrying her suitor, if she has one.

there are a number of facts about this mating ritual that we would like to prove:
(cid:15) the ritual eventually reaches the termination condition.
(cid:15) everybody ends up married.
(cid:15) the resulting marriages are stable.

to prove these facts, it will be helpful to recognize the ritual as the description
of a state machine. the state at the start of any day is determined by knowing for
each man, which woman, if any, he will serenade that day   that is, the woman
at the top of his preference list after he has crossed out all the women who have
rejected him on earlier days.

mating ritual at akamai

the internet infrastructure company akamai, cofounded by tom leighton, also
uses a variation of the mating ritual to assign web traf   c to its servers.

in the early days, akamai used other combinatorial optimization algorithms
that got to be too slow as the number of servers (over 65,000 in 2010) and requests
(over 800 billion per day) increased. akamai switched to a ritual-like approach,
since a ritual is fast and can be run in a distributed manner. in this case, web
requests correspond to women and web servers correspond to men. the web
requests have preferences based on latency and packet loss, and the web servers
have preferences based on cost of bandwidth and co-location.

   mcs        2017/6/5     19:42     page 184     #192

184

chapter 6 state machines

6.4.2 there is a marriage day
it   s easy to see why the mating ritual has a terminal day when people    nally get
married. every day on which the ritual hasn   t terminated, at least one man crosses
a woman off his list. (if the ritual hasn   t terminated, there must be some woman
serenaded by at least two men, and at least one of them will have to cross her off his
list). if we start with n men and n women, then each of the n men   s lists initially
has n women on it, for a total of n2 list entries. since no women ever gets added
to a list, the total number of entries on the lists decreases every day that the ritual
continues, and so the ritual can continue for at most n2 days.

6.4.3 they all live happily ever after. . .
we will prove that the mating ritual leaves everyone in a stable marriage. to do
this, we note one very useful fact about the ritual: if on some morning a woman has
any suitor, then her favorite suitor will still be serenading her the next morning   his
list won   t have changed. so she is sure to have today   s favorite suitor among her
suitors tomorrow. that means she will be able to choose a favorite suitor tomorrow
who is at least as desirable to her as today   s favorite. so day by day, her favorite
suitor can stay the same or get better, never worse. this sounds like an invariant,
and it is. namely, let p be the predicate

for every woman w and man m, if w is crossed off m   s list, then w has
a suitor whom she prefers over m.

lemma 6.4.2. p is a preserved invariant for the mating ritual.

proof. woman w gets crossed off m   s list only when w has a suitor she prefers to
m. thereafter, her favorite suitor doesn   t change until one she likes better comes
along. so if her favorite suitor was preferable to m, then any new favorite suitor
will be as well.

(cid:4)

notice that the invariant p holds vacuously at the beginning since no women are
crossed off to start. so by the invariant principle, p holds throughout the ritual.
now we can prove:

theorem 6.4.3. everyone is married at the end of the mating ritual.

proof. assume to the contrary that on the last day of the mating ritual, some
man   call him bob   is not married. this means bob can   t be serenading anybody,
that is, his list must be empty. so every woman must have been crossed off his
list and, since p is true, every woman has a suitor whom she prefers to bob. in

   mcs        2017/6/5     19:42     page 185     #193

6.4. the stable marriage problem

185

particular, every woman has some suitor, and since it is the last day, they have only
one suitor, and this is who they marry. but there are an equal number of men and
women, so if all women are married, so are all men, contradicting the assumption
(cid:4)
that bob is not married.

theorem 6.4.4. the mating ritual produces a stable matching.

proof. let brad and jen be any man and woman, respectively, that are not married
to each other on the last day of the mating ritual. we will prove that brad and jen
are not a rogue couple, and thus that all marriages on the last day are stable. there
are two cases to consider.

case 1: jen is not on brad   s list by the end. then by invariant p , we know that
jen has a suitor (and hence a husband) whom she prefers to brad. so she   s
not going to run off with brad   brad and jen cannot be a rogue couple.

case 2: jen is on brad   s list. since brad picks women to serenade by working
down his list, his wife must be higher on his preference list than jen. so
he   s not going to run off with jen   once again, brad and jen are not a rogue
(cid:4)
couple.

. . . especially the men

6.4.4
who is favored by the mating ritual, the men or the women? the women seem
to have all the power: each day they choose their favorite suitor and reject the rest.
what   s more, we know their suitors can only change for the better as the ritual
progresses. similarly, a man keeps serenading the woman he most prefers among
those on his list until he must cross her off, at which point he serenades the next
most preferred woman on his list. so from the man   s perspective, the woman he is
serenading can only change for the worse. sounds like a good deal for the women.
but it   s not! we will show that the men are by far the favored gender under the

mating ritual.

while the mating ritual produces one stable matching, stable matchings need
not be unique. for example, reversing the roles of men and women will often yield
a different stable matching among them. so a man may have different wives in
different sets of stable marriages. in some cases, a man can stably marry every one
of the women, but in most cases, there are some women who cannot be a man   s wife
in any stable matching. for example, given the preferences shown in figure 6.4,
jennifer cannot be brad   s wife in any stable matching because if he was married to
her, then he and angelina would be a rogue couple. it is not feasible for jennifer to
be stably married to brad.

   mcs        2017/6/5     19:42     page 186     #194

186

chapter 6 state machines

de   nition 6.4.5. given a set of preferences for the men and women, one person is
a feasible spouse for another person when there is a stable matching in which these
two people are married.

de   nition 6.4.6. let q be the predicate: for every woman w and man m, if w is
crossed off m   s list, then w is not a feasible spouse for m.

lemma 6.4.7. q is a preserved invariant5 for the mating ritual.

proof. suppose q holds at some point in the ritual and some woman alice is
about to be crossed off some man   s, bob   s, list. we claim that alice must not be
feasible for bob. therefore q will still hold after alice is crossed off, proving that
q is invariant.

to verify the claim, notice that when alice gets crossed of bob   s list, it   s because
alice has a suitor, ted, she prefers to bob. what   s more, since q holds, all ted   s
feasible wives are still on his list, and alice is at the top. so ted likes alice better
than all his other feasible spouses. now if alice could be married to bob in some
set of stable marriages, then ted must be married to a wife he likes less than alice,
making alice and ted a rogue couple and contradicting stability. so alice can   t be
(cid:4)
married to bob, that is, alice is not a feasible wife for bob, as claimed.

de   nition 6.4.8. given a set of preferences for the men and women, a person   s
optimal spouse is their most preferred feasible spouse. a person   s pessimal spouse
is their least preferred feasible spouse.

everybody has an optimal and a pessimal spouse, since we know there is at least
one stable matching, namely, the one produced by the mating ritual. lemma 6.4.7
implies a key property the mating ritual:

theorem 6.4.9. the mating ritual marries every man to his optimal wife.

proof. if bob is married to alice on the    nal day of the ritual, then everyone above
alice on bob   s preference list was crossed off, and by property q, all these crossed
off women were infeasible for bob. so alice is bob   s highest ranked feasible
(cid:4)
spouse, that is, his optimal wife.

lemma 6.4.10. given a set of preferences for the men and women, everyone is the
pessimal spouse of their optimal spouse.

5we appeal to p in justifying q, so technically it is p and q which is actually the preserved

invariant. but let   s not be picky.

   mcs        2017/6/5     19:42     page 187     #195

6.4. the stable marriage problem

187

proof. by symmetry, it is enough to prove that every man is the pessimal husband
of his optimal wife.

suppose alice is bob   s optimal wife. then in any stable set of marriages, if alice
liked her husband less bob, then bob must be married to someone not optimal, and
therefore alice and bob would be a rogue couple. so alice must like all her feasible
(cid:4)
husbands at least as much as bob. that is, bob is alice   s pessimal husband.

corollary 6.4.11. the mating ritual marries every woman to her pessimal hus-
band.

6.4.5 applications
the mating ritual was    rst announced in a paper by d. gale and l.s. shapley in
1962, but ten years before the gale-shapley paper was published, and unknown to
them, a similar algorithm was being used to assign residents to hospitals by the na-
tional resident matching program (nrmp). the nrmp has, since the turn of the
twentieth century, assigned each year   s pool of medical school graduates to hospi-
tal residencies (formerly called    internships   ), with hospitals and graduates playing
the roles of men and women.6 before the ritual-like algorithm was adopted, there
were chronic disruptions and awkward countermeasures taken to preserve unsta-
ble assignments of graduates to residencies. the ritual resolved these problems so
successfully, that it was used essentially without change at least through 1989.7 for
this and related work, shapley was awarded the 2012 nobel prize in economics.

not surprisingly, the mating ritual is also used by at least one large online dat-
ing agency. of course there is no serenading going on   everything is handled by
computer.

problems for section 6.3

practice problems
problem 6.1.
which states of the die hard 3 machine below have transitions to exactly two
states?

6in this case there may be multiple women married to one man, but this is a minor complication,

see problem 6.23.

7much more about the stable marriage problem can be found in the very readable mathematical

monograph by dan gus   eld and robert w. irving, [27].

   mcs        2017/6/5     19:42     page 188     #196

188

chapter 6 state machines

die hard transitions
1. fill the little jug: .b; l/ (cid:0)! .b; 3/ for l < 3.
2. fill the big jug: .b; l/ (cid:0)! .5; l/ for b < 5.
3. empty the little jug: .b; l/ (cid:0)! .b; 0/ for l > 0.
4. empty the big jug: .b; l/ (cid:0)! .0; l/ for b > 0.
5. pour from the little jug into the big jug: for l > 0,

(
if b c l   5,
.b c l; 0/
.5; l (cid:0) .5 (cid:0) b// otherwise.
(
.0; b c l/
if b c l   3,
.b (cid:0) .3 (cid:0) l/; 3/ otherwise.

.b; l/ (cid:0)!

.b; l/ (cid:0)!

6. pour from big jug into little jug: for b > 0,

homework problems
problem 6.2.
in the late 1960s, the military junta that ousted the government of the small re-
public of nerdia completely outlawed built-in multiplication operations, and also
forbade division by any number other than 3. fortunately, a young dissident found
a way to help the population multiply any two nonnegative integers without risking
persecution by the junta. the procedure he taught people is:

procedure multiply.x; y: nonnegative integers/
r wd x;
s wd y;
a wd 0;
while s    0 do
if 3 j s then

r wd r c r c r;
s wd s=3;
else if 3 j .s (cid:0) 1/ then
a wd a c r;
r wd r c r c r;
s wd .s (cid:0) 1/=3;

else

   mcs        2017/6/5     19:42     page 189     #197

6.4. the stable marriage problem

189

a wd a c r c r;
r wd r c r c r;
s wd .s (cid:0) 2/=3;

return a;

we can model the algorithm as a state machine whose states are triples of non-
negative integers .r; s; a/. the initial state is .x; y; 0/. the transitions are given by
the rule that for s > 0:

8  <  :.3r; s=3; a/

.3r; .s (cid:0) 1/=3; a c r/
.3r; .s (cid:0) 2/=3; a c 2r/

if 3 j s
if 3 j .s (cid:0) 1/
otherwise:

.r; s; a/ !

(a) list the sequence of steps that appears in the execution of the algorithm for
inputs x d 5 and y d 10.
(b) use the invariant method to prove that the algorithm is partially correct   that
is, if s d 0, then a d xy.
(c) prove that the algorithm terminates after at most 1 c log3 y executions of the
body of the do statement.

problem 6.3.
a robot named wall-e wanders around a two-dimensional grid. he starts out at
.0; 0/ and is allowed to take four different types of steps:

1. .c2;(cid:0)1/
2. .c1;(cid:0)2/
3. .c1;c1/
4. .(cid:0)3; 0/

thus, for example, wall-e might walk as follows. the types of his steps are

listed above the arrows.

1! .2;(cid:0)1/

3! .3; 0/

2! .4;(cid:0)2/

4! .1;(cid:0)2/ ! : : :

.0; 0/

wall-e   s true love, the fashionable and high-powered robot, eve, awaits at .0; 2/.

   mcs        2017/6/5     19:42     page 190     #198

190

chapter 6 state machines

(a) describe a state machine model of this problem.

(b) will wall-e ever    nd his true love? either    nd a path from wall-e to eve, or
use the invariant principle to prove that no such path exists.

problem 6.4.
a hungry ant is placed on an unbounded grid. each square of the grid either con-
tains a crumb or is empty. the squares containing crumbs form a path in which,
except at the ends, every crumb is adjacent to exactly two other crumbs. the ant is
placed at one end of the path and on a square containing a crumb. for example, the
   gure below shows a situation in which the ant faces north, and there is a trail of
food leading approximately southeast. the ant has already eaten the crumb upon
which it was initially placed.

the ant can only smell food directly in front of it. the ant can only remember
a small number of things, and what it remembers after any move only depends on
what it remembered and smelled immediately before the move. based on smell and
memory, the ant may choose to move forward one square, or it may turn right or
left. it eats a crumb when it lands on it.

the above scenario can be nicely modelled as a state machine in which each state
is a pair consisting of the    ant   s memory    and    everything else      for example,
information about where things are on the grid. work out the details of such a
model state machine; design the ant-memory part of the state machine so the ant
will eat all the crumbs on any    nite path at which it starts and then signal when it
is done. be sure to clearly describe the possible states, transitions, and inputs and
outputs (if any) in your model. brie   y explain why your ant will eat all the crumbs.
note that the last transition is a self-loop; the ant signals done for eternity. one

could also add another end state so that the ant signals done only once.

   mcs        2017/6/5     19:42     page 191     #199

6.4. the stable marriage problem

191

problem 6.5.
suppose that you have a regular deck of cards arranged as follows, from top to
bottom:

a~ 2~ : : : k~ a(cid:127) 2(cid:127) : : : k(cid:127) a| 2| : : : k| a} 2} : : : k}

only two operations on the deck are allowed: inshuf   ing and outshuf   ing. in
both, you begin by cutting the deck exactly in half, taking the top half into your
right-hand and the bottom into your left. then you shuf   e the two halves together
so that the cards are perfectly interlaced; that is, the shuf   ed deck consists of one
card from the left, one from the right, one from the left, one from the right, etc. the
top card in the shuf   ed deck comes from the right-hand in an outshuf   e and from
the left-hand in an inshuf   e.
(a) model this problem as a state machine.

(b) use the invariant principle to prove that you cannot make the entire    rst half
of the deck black through a sequence of inshuf   es and outshuf   es.

note: discovering a suitable invariant can be dif   cult! this is the part of a
correctness proof that generally requires some insight, and there is no simple recipe
for    nding invariants. a standard initial approach is to identify a bunch of reachable
states and then look for a pattern   some feature that they all share.

problem 6.6.
prove that the fast exponentiation state machine of section 6.3.1 will halt after

dlog2 ne c 1

(6.3)

transitions starting from any state where the value of z is n 2 zc.
hint: strong induction.

class problems
problem 6.7.
in this problem you will establish a basic property of a puzzle toy called the fifteen
puzzle using the method of invariants. the fifteen puzzle consists of sliding square
tiles numbered 1; : : : ; 15 held in a 4 (cid:2) 4 frame with one empty square. any tile
adjacent to the empty square can slide into it.

   mcs        2017/6/5     19:42     page 192     #200

192

chapter 6 state machines

the standard initial position is

3
7

4
2
6
8
10 11 12

1
5
9
13 14 15

we would like to reach the target position (known in the oldest author   s youth as
   the impossible   ):

15 14 13 12
8
11 10
7
6
4
2
3

9
5
1

a state machine model of the puzzle has states consisting of a 4 (cid:2) 4 matrix with
16 entries consisting of the integers 1; : : : ; 15 as well as one    empty    entry   like
each of the two arrays above.

the state transitions correspond to exchanging the empty square and an adjacent
numbered tile. for example, an empty at position .2; 2/ can exchange position with
tile above it, namely, at position .1; 2/:

n2

n4
n3
n1
n6
n7
n5
n10 n11
n8
n12 n13 n14 n15

n9

(cid:0)!

n4
n3
n1
n6
n7
n5
n10 n11
n8
n12 n13 n14 n15

n2
n9

we will use the invariant method to prove that there is no way to reach the target

state starting from the initial state.

we begin by noting that a state can also be represented as a pair consisting of

two things:

1. a list of the numbers 1; : : : ; 15 in the order in which they appear   reading

rows left-to-right from the top row down, ignoring the empty square, and

2. the coordinates of the empty square   where the upper left square has coor-

dinates .1; 1/, the lower right .4; 4/.

(a) write out the    list    representation of the start state and the    impossible    state.
let l be a list of the numbers 1; : : : ; 15 in some order. a pair of integers is
an out-of-order pair in l when the    rst element of the pair both comes earlier in
the list and is larger, than the second element of the pair. for example, the list
1; 2; 4; 5; 3 has two out-of-order pairs: (4,3) and (5,3). the increasing list 1; 2 : : : n
has no out-of-order pairs.

   mcs        2017/6/5     19:42     page 193     #201

6.4. the stable marriage problem

193

let a state s be a pair .l; .i; j // described above. we de   ne the parity of s to
be 0 or 1 depending on whether the sum of the number of out-of-order pairs in l
and the row-number of the empty square is even or odd. that is
if p.l/ c i is even;
otherwise:

parity.s / wwd

(

0

1

(b) verify that the parity of the start state and the target state are different.

(c) show that the parity of a state is preserved under transitions. conclude that
   the impossible    is impossible to reach.

by the way, if two states have the same parity, then in fact there is a way to get
from one to the other. if you like puzzles, you   ll enjoy working this out on your
own.

problem 6.8.
the massachusetts turnpike authority is concerned about the integrity of the new
zakim bridge. their consulting architect has warned that the bridge may collapse
if more than 1000 cars are on it at the same time. the authority has also been
warned by their traf   c consultants that the rate of accidents from cars speeding
across bridges has been increasing.

both to lighten traf   c and to discourage speeding, the authority has decided to
make the bridge one-way and to put tolls at both ends of the bridge (don   t laugh, this
is massachusetts). so cars will pay tolls both on entering and exiting the bridge, but
the tolls will be different. in particular, a car will pay $3 to enter onto the bridge and
will pay $2 to exit. to be sure that there are never too many cars on the bridge, the
authority will let a car onto the bridge only if the difference between the amount
of money currently at the entry toll booth and the amount at the exit toll booth is
strictly less than a certain threshold amount of $t0.

the consultants have decided to model this scenario with a state machine whose

states are triples .a; b; c / of nonnegative integers, where

(cid:15) a is an amount of money at the entry booth,
(cid:15) b is an amount of money at the exit booth, and
(cid:15) c is a number of cars on the bridge.

any state with c > 1000 is called a collapsed state, which the authority dearly
hopes to avoid. there will be no transition out of a collapsed state.

   mcs        2017/6/5     19:42     page 194     #202

194

chapter 6 state machines

since the toll booth collectors may need to start off with some amount of money
in order to make change, and there may also be some number of    of   cial    cars
already on the bridge when it is opened to the public, the consultants must be ready
to analyze the system started at any uncollapsed state. so let a0 be the initial
number of dollars at the entrance toll booth, b0 the initial number of dollars at the
exit toll booth, and c0   1000 the number of of   cial cars on the bridge when it is
opened. you should assume that even of   cial cars pay tolls on exiting or entering
the bridge after the bridge is opened.
(a) give a mathematical model of the authority   s system for letting cars on and off
the bridge by specifying a transition relation between states of the form .a; b; c /
above.

(b) characterize each of the following derived variables
a; b; a c b; a (cid:0) b; 3c (cid:0) a; 2a (cid:0) 3b; b c 3c; 2a (cid:0) 3b (cid:0) 6c; 2a (cid:0) 2b (cid:0) 3c
as one of the following

c
constant
si
strictly increasing
strictly decreasing
sd
weakly increasing but not constant wi
weakly decreasing but not constant wd
none of the above

n

and brie   y explain your reasoning.

the authority has asked their engineering consultants to determine t and to

verify that this policy will keep the number of cars from exceeding 1000.
the consultants reason that if c0 is the number of of   cial cars on the bridge
when it is opened, then an additional 1000 (cid:0) c0 cars can be allowed on the bridge.
so as long as a (cid:0) b has not increased by 3.1000 (cid:0) c0/, there shouldn   t more than
1000 cars on the bridge. so they recommend de   ning

t0 wwd 3.1000 (cid:0) c0/ c .a0 (cid:0) b0/;

(6.4)

where a0 is the initial number of dollars at the entrance toll booth, b0 is the initial
number of dollars at the exit toll booth.
(c) use the results of part (b) to de   ne a simple predicate p on states of the tran-
sition system which is satis   ed by the start state   that is p .a0; b0; c0/ holds   is
not satis   ed by any collapsed state, and is a preserved invariant of the system. ex-
plain why your p has these properties. conclude that the traf   c won   t cause the
bridge to collapse.

   mcs        2017/6/5     19:42     page 195     #203

6.4. the stable marriage problem

195

(d) a clever mit intern working for the turnpike authority agrees that the turn-
pike   s bridge management policy will be safe: the bridge will not collapse. but she
warns her boss that the policy will lead to deadlock   a situation where traf   c can   t
move on the bridge even though the bridge has not collapsed.
explain more precisely in terms of system transitions what the intern means, and
brie   y, but clearly, justify her claim.

problem 6.9.
start with 102 coins on a table, 98 showing heads and 4 showing tails. there are
two ways to change the coins:

(i)    ip over any ten coins, or
(ii) let n be the number of heads showing. place n c 1 additional coins, all

showing tails, on the table.

for example, you might begin by    ipping nine heads and one tail, yielding 90

heads and 12 tails, then add 91 tails, yielding 90 heads and 103 tails.
(a) model this situation as a state machine, carefully de   ning the set of states, the
start state, and the possible state transitions.

(b) explain how to reach a state with exactly one tail showing.

(c) de   ne the following derived variables:
c wwd the number of coins on the table; h wwd the number of heads;
t wwd the number of tails;
wwd remainder.h=2/;

wwd remainder.c =2/;
wwd remainder.t =2/:

c2
t2

h2

which of these variables is

1. strictly increasing
2. weakly increasing
3. strictly decreasing
4. weakly decreasing
5. constant

(d) prove that it is not possible to reach a state in which there is exactly one head
showing.

   mcs        2017/6/5     19:42     page 196     #204

196

chapter 6 state machines

problem 6.10.
a classroom is designed so students sit in a square arrangement. an outbreak of
beaver    u sometimes infects students in the class; beaver    u is a rare variant of bird
   u that lasts forever, with symptoms including a yearning for more quizzes and the
thrill of late night problem set sessions.
here is an illustration of a 6(cid:2)6-seat classroom with seats represented by squares.
the locations of infected students are marked with an asterisk.

(cid:3)

(cid:3)

(cid:3)

(cid:3)

(cid:3) (cid:3)
(cid:3)

(cid:3)

outbreaks of infection spread rapidly step by step. a student is infected after a

step if either

(cid:15) the student was infected at the previous step (since beaver    u lasts forever),
or
(cid:15) the student was adjacent to at least two already-infected students at the pre-
vious step.

here adjacent means the students    individual squares share an edge (front, back,
left or right); they are not adjacent if they only share a corner point. so each student
is adjacent to 2, 3 or 4 others.

in the example, the infection spreads as shown below.

(cid:3)

(cid:3)

(cid:3)

(cid:3)

(cid:3) (cid:3)
(cid:3) (cid:3) (cid:3)
(cid:3) (cid:3) (cid:3)
(cid:3)
(cid:3) (cid:3)
(cid:3) (cid:3) (cid:3) (cid:3)

)

)

(cid:3)

(cid:3) (cid:3)
(cid:3)

(cid:3)

(cid:3)

(cid:3) (cid:3) (cid:3)
(cid:3) (cid:3) (cid:3) (cid:3)
(cid:3) (cid:3) (cid:3) (cid:3)
(cid:3) (cid:3) (cid:3)

(cid:3) (cid:3) (cid:3)
(cid:3) (cid:3) (cid:3) (cid:3)

in this example, over the next few time-steps, all the students in class become
infected.
theorem. if fewer than n students among those in an n(cid:2)n arrangment are initially
infected in a    u outbreak, then there will be at least one student who never gets
infected in this outbreak, even if students attend all the lectures.

   mcs        2017/6/5     19:42     page 197     #205

6.4. the stable marriage problem

197

prove this theorem.
hint: think of the state of an outbreak as an n (cid:2) n square above, with asterisks
indicating infection. the rules for the spread of infection then de   ne the transitions
of a state machine. find a weakly decreasing derived variable that leads to a proof
of this theorem.

exam problems
problem 6.11.
token replacing-1-2 is a single player game using a set of tokens, each colored
black or white. except for color, the tokens are indistinguishable. in each move,
a player can replace one black token with two white tokens, or replace one white
token with two black tokens.
we can model this game as a state machine whose states are pairs .nb; nw / where
nb (cid:21) 0 equals the number of black tokens, and nw (cid:21) 0 equals the number of white
tokens.
(a) list the numbers of the following predicates that are preserved invariants.

nb c nw rem.nb c nw ; 3/    2
nw (cid:0) nb rem.nw (cid:0) nb; 3/ d 2
nb (cid:0) nw rem.nb (cid:0) n2; 3/ d 2
nb c nw > 5
nb c nw < 5

(6.5)
(6.6)
(6.7)
(6.8)
(6.9)

now assume the game starts with a single black token, that is, the start state is
.1; 0/.

(b) list the numbers of the predicates above are true for all reachable states:

(c) de   ne the predicate t .nb; nw / by the rule:

t .nb; nw / wwd rem.nw (cid:0) nb; 3/ d 2:

we will now prove the following:
claim. if t .nb; nw /, then state .nb; nw / is reachable.

   mcs        2017/6/5     19:42     page 198     #206

198

chapter 6 state machines

note that this claim is different from the claim that t is a preserved invariant.
the proof of the claim will be by induction in n using induction hypothesis p .n/wwd
8.nb; nw /:   .nb c nw d n/ and t .nb; nw /   implies .nb; nw / is reachable:
the base cases will be when n   2.

(cid:15) assuming that the base cases have been veri   ed, complete the inductive
step.
(cid:15) now verify the base cases: p .n/ for n   2.

problem 6.12.
token switching is a process for updating a set of black and white tokens. the
process starts with a single black token. at each step,

(i) one black token can be replaced with two white tokens, or

(ii) if the numbers of white and black tokens are not the same, the colors of all
the tokens can be switched: all the black tokens become white, and the white
tokens become black.

we can model token switching as a state machine whose states are pairs .b; w/
of nonnegative integers, where b equals the number of black tokens, and w equals
the number of white tokens. so the start state is .1; 0/.
(a) indicate which of the following states can be reached from the start state in
exactly two steps:

.0; 0/; .1; 0/; .0; 1/; .1; 1/; .0; 2/; .2; 0/; .2; 1/; .1; 2/; .0; 3/; .3; 0/

(b) de   ne the predicate f .b; w/ by the rule:

f .b; w/ wwd .b (cid:0) w/is not a multiple of 3:

prove the following
claim. if f .b; w/, then state .b; w/ is reachable from the start state.

(c) explain why state .1167777
hint: do not assume f is a preserved invariant without proving it.

/ is not a reachable state.

; 51088

   mcs        2017/6/5     19:42     page 199     #207

6.4. the stable marriage problem

199

problem 6.13.
token replacing-1-3 is a single player game using a set of tokens, each colored
black or white. in each move, a player can replace a black token with three white
tokens, or replace a white token with three black tokens. we can model this game
as a state machine whose states are pairs .b; w/ of nonnegative integers, where b is
the number of black tokens and w the number of white ones.

the game has two possible start states: .5; 4/ or .4; 3/.
we call a state .b; w/ eligible when

rem.b (cid:0) w; 4/ d 1; and

minfb; wg (cid:21) 3:

(6.10)
(6.11)

this problem examines the connection between eligible states and states that are
reachable from either of the possible start states.
(a) give an example of a reachable state that is not eligible.

(b) show that the derived variable bc w is strictly increasing. conclude that state
.3; 2/ is not reachable.
(c) suppose .b; w/ is eligible and b (cid:21) 6. verify that .b (cid:0) 3; w c 1/ is eligible.
for the rest of the problem, you may   and should   assume the following fact:
fact. if maxfb; wg   5 and .b; w/ is eligible, then .b; w/ is reachable.
(this is easy to verify since there are only nine states with b; w 2 f3; 4; 5g, but
don   t waste time doing this.)
(d) de   ne the predicate p .n/ to be:

8.b; w/:  b c w d n and .b; w/ is eligible   implies .b; w/ is reachable:

prove that p .n (cid:0) 1/ implies p .n c 1/ for all n (cid:21) 1.
(e) conclude that all eligible states are reachable.
(f) prove that .47 c 1; 45 c 2/ is not reachable.
(g) verify that rem.3b(cid:0) w; 8/ is a derived variable that is constant. conclude that
no state is reachable from both start states.

   mcs        2017/6/5     19:42     page 200     #208

200

chapter 6 state machines

problem 6.14.
there is a bucket containing more blue balls than red balls. as long as there are
more blues than reds, any one of the following rules may be applied to add and/or
remove balls from the bucket:

(i) add a red ball.

(ii) remove a blue ball.

(iii) add two reds and one blue.

(iv) remove two blues and one red.

(a) starting with 10 reds and 16 blues, what is the largest number of balls the
bucket will contain by applying these rules?

let b be the number of blue balls and r be the number of red balls in the bucket
at any given time.
(b) prove that b (cid:0) r (cid:21) 0 is a preserved invariant of the process of adding and
removing balls according to rules (i)   (iv).

(c) prove that no matter how many balls the bucket contains, repeatedly applying
rules (i)   (iv) will eventually lead to a state where no further rule can be applied.

problem 6.15.
the following problem is a twist on the fifteen-puzzle considered earlier in prob-
lem 6.7.

let a be a sequence consisting of the numbers 1; : : : ; n in some order. a pair
of integers in a is called an out-of-order pair when the    rst element of the pair
both comes earlier in the sequence, and is larger, than the second element of the
pair. for example, the sequence .1; 2; 4; 5; 3/ has two out-of-order pairs: .4; 3/
and .5; 3/. we let t .a/ equal the number of out-of-order pairs in a. for example,
t ..1; 2; 4; 5; 3// d 2.
the elements in a can be rearranged using the rotate-triple operation, in which
three consecutive elements of a are rotated to move the smallest of them to be    rst.
for example, in the sequence .2; 4; 1; 5; 3/, the rotate-triple operation could

rotate the consecutive numbers 4; 1; 5, into 1; 5; 4 so that
.2; 4; 1; 5; 3/ (cid:0)! .2; 1; 5; 4; 3/:

the rotate-triple could also rotate the consecutive numbers 2; 4; 1 into 1; 2; 4

so that

.2; 4; 1; 5; 3/ (cid:0)! .1; 2; 4; 5; 3/:

   mcs        2017/6/5     19:42     page 201     #209

6.4. the stable marriage problem

201

we can think of a sequence a as a state of a state machine whose transitions

correspond to possible applications of the rotate-triple operation.
(a) argue that the derived variable t is weakly decreasing.

(b) prove that having an even number of out-of-order pairs is a preserved invariant
of this machine.

(c) starting with

s wwd .2014; 2013; 2012; : : : ; 2; 1/;

explain why it is impossible to reach

t wwd .1; 2; : : : ; 2012; 2013; 2014/:

problems for section 6.4

practice problems
problem 6.16.
four students want separate assignments to four vi-a companies. here are their
preference rankings:

companies

student
albert: hp, bellcore, at&t, draper
sarah: at&t, bellcore, draper, hp
tasha: hp, draper, at&t, bellcore
elizabeth: draper, at&t, bellcore, hp

company

students

at&t: elizabeth, albert, tasha, sarah
bellcore: tasha, sarah, albert, elizabeth
hp: elizabeth, tasha, albert, sarah
draper: sarah, elizabeth, tasha, albert

(a) use the mating ritual to    nd two stable assignments of students to compa-
nies.

(b) describe a simple procedure to determine whether any given stable marriage
problem has a unique solution, that is, only one possible stable matching. brie   y
explain why it works.

   mcs        2017/6/5     19:42     page 202     #210

202

chapter 6 state machines

problem 6.17.
suppose that harry is one of the boys and alice is one of the girls in the mating
ritual. which of the properties below are preserved invariants? why?

a. alice is the only girl on harry   s list.

b. there is a girl who does not have any boys serenading her.

c. if alice is not on harry   s list, then alice has a suitor that she prefers to harry.

d. alice is crossed off harry   s list, and harry prefers alice to anyone he is

serenading.

e. if alice is on harry   s list, then she prefers harry to any suitor she has.

problem 6.18.
prove that whatever the marriage preferences among the men and women, every
man is the pessimal husband of his optimal wife.

hint: follows directly from the de   nition of    rogue couple.   

problem 6.19.
in the mating ritual for stable marriages between an equal number of boys and
girls, explain why there must be a girl to whom no boy proposes (serenades) until
the last day.

class problems
problem 6.20.
the preferences among 4 boys and 4 girls are partially speci   ed in the following
table:

   
   

b1: g1 g2
b2: g2 g1
b3:
   
b4:
   
g1: b2 b1
g2: b1 b2
g3:
   
   
g4:

   
   

   
   
   
   
g4 g3
g3 g4
   
   
   
   
b3 b4
b4 b3

   mcs        2017/6/5     19:42     page 203     #211

6.4. the stable marriage problem

203

(a) verify that

.b1; g1/; .b2; g2/; .b3; g3/; .b4; g4/

will be a stable matching whatever the unspeci   ed preferences may be.

(b) explain why the stable matching above is neither boy-optimal nor boy-pessimal
and so will not be an outcome of the mating ritual.

(c) describe how to de   ne a set of marriage preferences among n boys and n girls
which have at least 2n=2 stable assignments.
hint: arrange the boys into a list of n=2 pairs, and likewise arrange the girls into
a list of n=2 pairs of girls. choose preferences so that the kth pair of boys ranks
the kth pair of girls just below the previous pairs of girls, and likewise for the kth
pair of girls. within the kth pairs, make sure each boy   s    rst choice girl in the pair
prefers the other boy in the pair.

problem 6.21.
the mating ritual of section 6.4.1 for    nding stable marriages works even when
the numbers of men and women are not equal. as before, a set of (monogamous)
marriages between men and women is called stable when it has no    rogue couples.   
(a) extend the de   nition of rogue couple so it covers the case of unmarried men
and women. verify that in a stable set of marriages, either all the men are married
or all the women are married.

(b) explain why even in the case of unequal numbers of men and women, applying
the mating ritual will yield a stable matching.

homework problems
problem 6.22.
suppose we want to assign pairs of    buddies,    who may be of the sex, where each
person has a preference rank for who they would like to be buddies with. for the
preference ranking given in figure 6.5, show that there is no stable buddy assign-
ment. in this    gure mergatroid   s preferences aren   t shown because they don   t even
matter.

problem 6.23.
the most famous application of stable matching was in assigning graduating med-
ical students to hospital residencies. each hospital has a preference ranking of

   mcs        2017/6/5     19:42     page 204     #212

204

chapter 6 state machines

figure 6.5 some preferences with no stable buddy matching.

students, and each student has a preference ranking of hospitals, but unlike    nding
stable marriages between an equal number of boys and girls, hospitals generally
have differing numbers of available residencies, and the total number of residen-
cies may not equal the number of graduating students.

explain how to adapt the stable matching problem with an equal number of boys
and girls to this more general situation. in particular, modify the de   nition of stable
matching so it applies in this situation, and explain how to adapt the mating ritual
to handle it.

problem 6.24.
give an example of a stable matching between 3 boys and 3 girls where no person
gets their    rst choice. brie   y explain why your matching is stable. can your
matching be obtained from the mating ritual or the ritual with boys and girls
reversed?

problem 6.25.
in a stable matching between an equal number of boys and girls produced by the
mating ritual, call a person lucky if they are matched up with someone in the top
half of their preference list. prove that there must be at least one lucky person.

hint: the average number of times a boy gets rejected by girls.

problem 6.26.
suppose there are two stable sets of marriages. so each man has a    rst wife and a

robinbobby joealexmergatro 32112312   mcs        2017/6/5     19:42     page 205     #213

6.4. the stable marriage problem

205

second wife , and likewise each woman has a    rst husband and a second husband.
someone in a given marriage is a winner when they prefer their current spouse
to their other spouse, and they are a loser when they prefer their other spouse to
their current spouse. (if someone has the same spouse in both of their marriages,
then they will be neither a winner nor a loser.)

we will show that

in each of the marriages, someone is a winner iff their spouse is a loser.

(wl)

(a) the left to right direction of (wl) is equivalent to the assertion that married
partners cannot both be winners. explain why this follows directly from the de   ni-
tion of rogue couple.

the right to left direction of (wl) is equivalent to the assertion that a married
couple cannot both be losers. this will follow by comparing the number of winners
and losers among the marriages.
(b) explain why the number of winners must equal the number of losers among
the two sets of marriages.

(c) complete the proof of (wl) by showing that if some married couple were both
losers, then there must be another couple who were both winners.

(d) conclude that in a stable set of marriages, someone   s spouse is optimal iff they
are pessimal for their spouse.

problem 6.27.
suppose there are two stable sets of marriages, a    rst set and a second set. so
each man has a    rst wife and a second wife (they may be the same), and likewise
each woman has a    rst husband and a second husband. we can form a third set
of marriages by matching each man with the wife he prefers among his    rst and
second wives.
(a) prove that this third set of marriages is an exact matching: no woman is mar-
ried to two men.

(b) prove that this third marriage set is stable.
hint: you may assume the following fact from problem 6.26.

in every marriage, someone is a winner iff their spouse is a loser.

(sl)

   mcs        2017/6/5     19:42     page 206     #214

206

chapter 6 state machines

problem 6.28.
a state machine has commuting transitions if for any states p; q; r

.p (cid:0)! q and p (cid:0)! r/ implies 9t: q (cid:0)! t and r (cid:0)! t:

the state machine is con   uent if
q and p (cid:0)!(cid:3)

.p (cid:0)!(cid:3)

r/ implies 9t: q (cid:0)!(cid:3)

t and r (cid:0)!(cid:3)

t:

(a) prove that if a state machine has commuting transitions, then it is con   uent.
hint: by induction on the number of moves from p to q plus the number from p
to r.

(b) a    nal state of a state machine is one from which no transition is possible.
explain why, if a state machine is con   uent, then at most one    nal state is reachable
from the start state.

problem 6.29.
according to the day-by-day description of the mating ritual of section 6.4.1, at
the end of each day, every man   s list is updated to remove the name of the woman
he who rejected him. but it   s easier, and more    exible, simply to let one women
reject one suitor at a time.

in particular, the states of this flexible mating ritual state machine will be the
same as for the day-by-day ritual: a state will be a list, for each man, of the women
who have not rejected him. but now a transition will be to choose two men who
are serenading the same woman   that is, who have the same woman at the top
of their current lists   and then have the woman reject whichever of the two she
likes less. so the only change in state is that the name of the serenaded woman
gets deleted from the top of the list of the man she liked less among two of her
serenaders   everything else stays the same.

it   s a worthwhile review to verify that the same preserved invariants used to es-
tablish the properties of the mating ritual will apply to the flexible mating ritual.
this ensures that the flexible ritual will also terminate with a stable set of mar-
riages.

but now a new issue arises: we know that there can be many sets of possible
sets of stable marriages for the same set of men/women preferences. so it seems
possible that the flexible ritual might terminate with different stable marriage sets,
depending on which choice of transition was made at each state. but this does
not happen: the flexible ritual will always terminate with the same set of stable
marriages as the day-by-day ritual.

   mcs        2017/6/5     19:42     page 207     #215

6.4. the stable marriage problem

207

to prove this, we begin with a de   nition: a state machine has commuting transi-

tions if for any states p; q; r,

.p (cid:0)! q and p (cid:0)! r/ implies 9t: q (cid:0)! t and r (cid:0)! t:
(a) verify that the flexible mating ritual has commuting transitions.

(b) now conclude from problem 6.28 that the flexible mating ritual always ter-
minate with the same set of stable marriages as the day-by-day ritual.

exam problems
problem 6.30.
four unfortunate children want to be adopted by four foster families of ill repute.
a child can only be adopted by one family, and a family can only adopt one child.
here are their preference rankings (most-favored to least-favored):

child families

bottlecap: hat   elds, mccoys, grinches, scrooges
lucy: grinches, scrooges, mccoys, hat   elds
dingdong: hat   elds, scrooges, grinches, mccoys
zippy: mccoys, grinches, scrooges, hat   elds

family children

grinches: zippy, dingdong, bottlecap, lucy
hat   elds: zippy, bottlecap, dingdong, lucy
scrooges: bottlecap, lucy, dingdong, zippy
mccoys: lucy, zippy, bottlecap, dingdong

(a) exhibit two different stable matching of children and families.

family child in 1st match child in 2nd match

grinches:
hat   elds:
scrooges:
mccoys:

(b) examine the matchings from part a, and explain why these matchings are the
only two possible stable matchings between children and families.
hint: in general, there may be many more than two stable matchings for the same
set of preferences.

   mcs        2017/6/5     19:42     page 208     #216

208

chapter 6 state machines

problem 6.31.
the mating ritual 6.4.1 for    nding stable marriages works without change when
there are at least as many, and possibly more, men than women. you may assume
this. so the ritual ends with all the women married and no rogue couples for these
marriages, where an unmarried man and a married woman who prefers him to her
spouse is also considered to be a    rogue couple.   

let alice be one of the women, and bob be one of the men. indicate which of
the properties below that are preserved invariants of the mating ritual 6.4 when
there are at least as many men as women. brie   y explain your answers.
(a) alice has a suitor (man who is serenading her) whom she prefers to bob.

(b) alice is the only woman on bob   s list.

(c) alice has no suitor.

(d) bob prefers alice to the women he is serenading.

(e) bob is serenading alice.

(f) bob is not serenading alice.

(g) bob   s list of women to serenade is empty.

problem 6.32.
we want a stable matching between n boys and n girls for a positive integer n.
(a) explain how to de   ne preference rankings for the boys and the girls that allow
only one possible stable matching. brie   y justify your answer.

(b) mark each of the following predicates about the stable marriage ritual p if it
is a preserved invariant, n if it is not, and    u    if you are very unsure.    bob   s list   
refers to the list of the women he has not crossed off.

(i) alice is not on bob   s list.
(ii) no girl is on bob   s list.
(iii) bob is the only boy serenading alice.
(iv) bob has fewer than 5 girls on his list.
(v) bob prefers alice to his favorite remaining girl.
(vi) alice prefers her favorite current suitor to bob.
(vii) bob is serenading his optimal spouse.

   mcs        2017/6/5     19:42     page 209     #217

6.4. the stable marriage problem

209

(viii) bob is serenading his pessimal spouse.
(ix) alice   s optimal spouse is serenading her.
(x) alice   s pessimal spouse is serenading her.

   mcs        2017/6/5     19:42     page 210     #218

   mcs        2017/6/5     19:42     page 211     #219

7

recursive data types
recursive data types play a central role in programming, and induction is really all
about them.

recursive data types are speci   ed by recursive de   nitions, which say how to
construct new data elements from previous ones. along with each recursive data
type there are recursive de   nitions of properties or functions on the data type. most
importantly, based on a recursive de   nition, there is a structural induction method
for proving that all data of the given type have some property.

this chapter examines a few examples of recursive data types and recursively

de   ned functions on them:
(cid:15) strings of characters,
(cid:15)    balanced    strings of brackets,
(cid:15) the nonnegative integers, and
(cid:15) arithmetic expressions.
(cid:15) two-player games with perfect information.

7.1 recursive de   nitions and structural induction

we   ll start off illustrating recursive de   nitions and proofs using the example of
character strings. normally we   d take strings of characters for granted, but it   s
informative to treat them as a recursive data type. in particular, strings are a nice
   rst example because you will see recursive de   nitions of things that are easy to
understand, or that you already know, so you can focus on how the de   nitions work
without having to    gure out what they are supposed to mean.

de   nitions of recursive data types have two parts:
(cid:15) base case(s) specifying that some known mathematical elements are in the
data type, and
(cid:15) constructor case(s) that specify how to construct new data elements from
previously constructed elements or from base elements.

the de   nition of strings over a given character set a follows this pattern:

   mcs        2017/6/5     19:42     page 212     #220

212

chapter 7 recursive data types

de   nition 7.1.1. let a be a nonempty set called an alphabet, whose elements are
referred to as characters (also called letters, symbols, or digits). the recursive data
type a

(cid:3) of strings over alphabet a is de   ned as follows:

(cid:3).
(cid:15) base case: the empty string (cid:21) is in a
(cid:3), then the pair ha; si 2 a
(cid:15) constructor case: if a 2 a and s 2 a
so f0; 1g(cid:3) are the binary strings.
the usual way to treat binary strings is as sequences of 0   s and 1   s. for example,
we have identi   ed the length-4 binary string 1011 as a sequence of bits, the 4-tuple
.1; 0; 1; 1/. but according to the recursive de   nition 7.1.1, this string would be
represented by nested pairs, namely

(cid:3).

h1;h0;h1;h1; (cid:21)iiii :

these nested pairs are de   nitely cumbersome and may also seem bizarre, but they
actually re   ect the way that such lists of characters would be represented in pro-
gramming languages like scheme or python, where ha; si would correspond to
cons.a; s/.

notice that we haven   t said exactly how the empty string is represented. it really
doesn   t matter, as long as we can recognize the empty string and not confuse it with
any nonempty string.

continuing the recursive approach, let   s de   ne the length of a string.
de   nition 7.1.2. the length jsj of a string s is de   ned recursively based on de   -
nition 7.1.1.
base case: j(cid:21)j wwd 0.
constructor case: jha; sij wwd 1 c jsj.
this de   nition of length follows a standard pattern: functions on recursive data
types can be de   ned recursively using the same cases as the data type de   nition.
speci   cally, to de   ne a function f on a recursive data type, de   ne the value of f
for the base cases of the data type de   nition, then de   ne the value of f in each
constructor case in terms of the values of f on the component data items.
let   s do another example: the concatenation s (cid:1) t of the strings s and t is the
string consisting of the letters of s followed by the letters of t. this is a per-
fectly clear mathematical de   nition of concatenation (except maybe for what to do
with the empty string), and in terms of scheme/python lists, s (cid:1) t would be the list
append.s; t /. here   s a recursive de   nition of concatenation.

   mcs        2017/6/5     19:42     page 213     #221

7.1. recursive de   nitions and structural induction

213

de   nition 7.1.3. the concatenation s (cid:1) t of the strings s; t 2 a
sively based on de   nition 7.1.1:

(cid:3) is de   ned recur-

base case:

constructor case:

(cid:21) (cid:1) t wwd t:

ha; si (cid:1) t wwd ha; s (cid:1) ti :

7.1.1 structural induction
structural induction is a method for proving that all the elements of a recursively
de   ned data type have some property. a structural induction proof has two parts
corresponding to the recursive de   nition:

(cid:15) prove that each base case element has the property.
(cid:15) prove that each constructor case element has the property, when the construc-
tor is applied to elements that have the property.

for example, in the base case of the de   nition of concatenation 7.1.3, we de   ned
concatenation so the empty string was a    left identity,    namely, (cid:21)(cid:1) s wwd s. we want
the empty string also to be    right identity,    namely, s (cid:1) (cid:21) d s. being a right identity
is not part of de   nition 7.1.3, but we can prove it easily by structural induction:

lemma 7.1.4.

s (cid:1) (cid:21) d s

(cid:3).
for all s 2 a
proof. the proof is by structural induction on the recursive de   nition 7.1.3 of con-
catenation. the induction hypothesis will be

p .s/ wwd   s (cid:1) (cid:21) d s  :

((cid:21) is a left identity by def 7.1.3)

base case: (s d (cid:21)).

s (cid:1) (cid:21) d (cid:21) (cid:1) (cid:21)d (cid:21)
d s:

   mcs        2017/6/5     19:42     page 214     #222

214

chapter 7 recursive data types

constructor case: (s d a (cid:1) t).
s (cid:1) (cid:21) d .a (cid:1) t / (cid:1) (cid:21)
d a (cid:1) .t (cid:1) (cid:21)/
d a (cid:1) t
d s:

(constructor case of def 7.1.3)
by induction hypothesis p .t /

so p .s/ holds. this completes the proof of the constructor case, and we conclude
(cid:3).
by structural induction that equation (7.1.4) holds for all s 2 a
(cid:4)
we can also verify properties of recursive functions by structural induction on
their de   nitions. for example, let   s verify the familiar fact that the length of the
concatenation of two strings is the sum of their lengths:
lemma.
for all s; t 2 a
proof. by structural induction on the de   nition of s 2 a
esis is

(cid:3). the induction hypoth-

js (cid:1) tj d jsj c jtj

(cid:3).

(cid:3)
p .s/ wwd 8t 2 a

:js (cid:1) tj d jsj c jtj:

base case (s d (cid:21)):

js (cid:1) tj d j(cid:21) (cid:1) tj
d jtj
d 0 c jtj
d jsj c jtj

constructor case: (s wwd ha; ri).

js (cid:1) tj d jha; ri (cid:1) tj
d jha; r (cid:1) tij
d 1 c jr (cid:1) tj
d 1 c .jrj c jtj/
d .1 c jrj/ c jtj
d jha; rij c jtj
d jsj c jtj:

(base case of def 7.1.3 of concatenation)
(def of j(cid:21)j):

(constructor case of def of concat)
(constructor case of def length)
(ind. hyp. p .r/)

(constructor case, def of length)

this proves that p .s/ holds, completing the constructor case. by structural induc-
(cid:3).
tion, we conclude that p .s/ holds for all strings s 2 a
(cid:4)

   mcs        2017/6/5     19:42     page 215     #223

7.2. strings of matched brackets

215

these proofs illustrate the general principle:

the principle of structural induction.
let p be a predicate on a recursively de   ned data type r. if

(cid:15) p .b/ is true for each base case element b 2 r, and
(cid:15) for all two-argument constructors c,

  p .r/ and p .s/   implies p .c.r; s//

for all r; s 2 r,
and likewise for all constructors taking other numbers of arguments,

then

p .r/ is true for all r 2 r:

7.2 strings of matched brackets

let f] ; [ g(cid:3) be the set of all strings of square brackets. for example, the following
two strings are in f] ; [ g(cid:3):

[ ] ] [ [ [ [ [ ] ]

and [ [ [ ] ] [ ] ] [ ]

(7.1)
a string s 2 f] ; [ g(cid:3) is called a matched string if its brackets    match up    in
the usual way. for example, the left-hand string above is not matched because its
second right bracket does not have a matching left bracket. the string on the right
is matched.

we   re going to examine several different ways to de   ne and prove properties
of matched strings using recursively de   ned sets and functions. these properties
are pretty straightforward, and you might wonder whether they have any particular
relevance in computer science. the honest answer is    not much relevance any
more.    the reason for this is one of the great successes of computer science, as
explained in the text box below.

   mcs        2017/6/5     19:42     page 216     #224

216

chapter 7 recursive data types

expression parsing
during the early development of computer science in the 1950   s and 60   s, creation
of effective programming language compilers was a central concern. a key aspect
in processing a program for compilation was expression parsing. one signi   cant
problem was to take an expression like

x c y (cid:3) z2 (cid:4) y c 7

and put in the brackets that determined how it should be evaluated   should it be

    x c y   (cid:3) z2 (cid:4) y   c 7; or;
x c   y (cid:3) z2 (cid:4)   y c 7    ; or;
  x c   y (cid:3) z2     (cid:4)   y c 7  ; or : : :   

the turing award (the    nobel prize    of computer science) was ultimately be-
stowed on robert w. floyd, for, among other things, discovering simple proce-
dures that would insert the brackets properly.

in the 70   s and 80   s, this parsing technology was packaged into high-level
compiler-compilers that automatically generated parsers from expression gram-
mars. this automation of parsing was so effective that the subject no longer
demanded attention. it had largely disappeared from the computer science cur-
riculum by the 1990   s.

the matched strings can be nicely characterized as a recursive data type:
de   nition 7.2.1. recursively de   ne the set recmatch of strings as follows:

(cid:15) base case: (cid:21) 2 recmatch.
(cid:15) constructor case: if s; t 2 recmatch, then

[ s ] t 2 recmatch:

here [ s ] t refers to the concatenation of strings which would be written in full

as
from now on, we   ll usually omit the    (cid:1)   s.   
using this de   nition, (cid:21) 2 recmatch by the base case, so letting s d t d (cid:21) in
the constructor case implies

[ (cid:1) .s (cid:1) .] (cid:1) t //:

[ (cid:21)] (cid:21) d [ ] 2 recmatch:

   mcs        2017/6/5     19:42     page 217     #225

7.2. strings of matched brackets

217

now,

[ (cid:21)] [ ] d [ ] [ ] 2 recmatch
[ [ ] ] (cid:21) d [ [ ] ] 2 recmatch
[ [ ] ] [ ] 2 recmatch

(letting s d (cid:21); t d [ ] )
(letting s d [ ] ; t d (cid:21))
(letting s d [ ] ; t d [ ] )

are also strings in recmatch by repeated applications of the constructor case; and
so on.

it   s pretty obvious that in order for brackets to match, there had better be an equal
number of left and right ones. for further practice, let   s carefully prove this from
the recursive de   nitions, beginning with a recursive de   nition of the number #c.s/
of occurrences of the character c 2 a in a string s:
de   nition 7.2.2.
base case: #c.(cid:21)/ wwd 0.
constructor case:

(
#c.s/
1 c #c.s/

if a    c;
if a d c:

#c.ha; si/ wwd

the following lemma follows directly by structural induction on de   nition 7.2.2.

we   ll leave the proof for practice (problem 7.9).

lemma 7.2.3.

lemma. every string in recmatch has an equal number of left and right brackets.

proof. the proof is by structural induction with induction hypothesis

#c.s (cid:1) t / d #c.s/ c #c.t /:
i
#[ .s/ d #] .s/

p .s/ wwd h

:

base case: p .(cid:21)/ holds because

#[ .(cid:21)/ d 0 d #] .(cid:21)/

by the base case of de   nition 7.2.2 of #c./.

   mcs        2017/6/5     19:42     page 218     #226

218

chapter 7 recursive data types

constructor case: by structural induction hypothesis, we assume p .s/ and p .t /
and must show p .[ s ] t /:

#[ .[ s ] t / d #[ .[ / c #[ .s/ c #[ .] / c #[ .t /

d 1 c #[ .s/ c 0 c #[ .t /
d 1 c #] .s/ c 0 c #] .t /
d 0 c #] .s/ c 1 c #] .t /
d #] .[ / c #] .s/ c #] .] / c #] .t /
d #] .[ s ] t /

(lemma 7.2.3)
(def #[ ./)
(by p .s/ and p .t /)

(def #] ./)
(lemma 7.2.3)

this completes the proof of the constructor case. we conclude by structural induc-
tion that p .s/ holds for all s 2 recmatch.
(cid:4)
warning: when a recursive de   nition of a data type allows the same element
to be constructed in more than one way, the de   nition is said to be ambiguous.
we were careful to choose an unambiguous de   nition of recmatch to ensure that
functions de   ned recursively on its de   nition would always be well-de   ned. re-
cursively de   ning a function on an ambiguous data type de   nition usually will not
work. to illustrate the problem, here   s another de   nition of the matched strings.
de   nition 7.2.4. de   ne the set, ambrecmatch   f] ; [ g(cid:3) recursively as follows:

(cid:15) base case: (cid:21) 2 ambrecmatch,
(cid:15) constructor cases: if s; t 2 ambrecmatch, then the strings [ s ] and st are
also in ambrecmatch.

it   s pretty easy to see that the de   nition of ambrecmatch is just another way
to de   ne recmatch, that is ambrecmatch d recmatch (see problem 7.19). the
de   nition of ambrecmatch is arguably easier to understand, but we didn   t use it
because it   s ambiguous, while the trickier de   nition of recmatch is unambiguous.
here   s why this matters. let   s de   ne the number of operations f .s/ to construct a
matched string s recursively on the de   nition of s 2 ambrecmatch:

f .[ s ] / wwd 1 c f .s/;

f .(cid:21)/ wwd 0;
f .st / wwd 1 c f .s/ c f .t /:

(f base case)

(f concat case)

   mcs        2017/6/5     19:42     page 219     #227

7.3. recursive functions on nonnegative integers

219

this de   nition may seem ok, but it isn   t: f .(cid:21)/ winds up with two values, and
consequently:

0 d f .(cid:21)/
d f .(cid:21) (cid:1) (cid:21)/
d 1 c f .(cid:21)/ c f .(cid:21)/
d 1 c 0 c 0 d 1

(f base case))
(concat def, base case)
(f concat case);
(f base case):

this is de   nitely not a situation we want to be in!

7.3 recursive functions on nonnegative integers

the nonnegative integers can be understood as a recursive data type.
de   nition 7.3.1. the set n is a data type de   ned recursively as:

(cid:15) 0 2 n.
(cid:15) if n 2 n, then the successor n c 1 of n is in n.
the point here is to make it clear that ordinary induction is simply the special
case of structural induction on the recursive de   nition 7.3.1. this also justi   es the
familiar recursive de   nitions of functions on the nonnegative integers.
7.3.1 some standard recursive functions on n
example 7.3.2. the factorial function. this function is often written    n  .    you will
see a lot of it in later chapters. here, we   ll use the notation fac.n/:

(cid:15) fac.0/ wwd 1.
(cid:15) fac.n c 1/ wwd .n c 1/ (cid:1) fac.n/ for n (cid:21) 0.

example 7.3.3. summation notation. let    s.n/    abbreviate the expression    pn

id1 f .i /.   

we can recursively de   ne s.n/ with the rules

(cid:15) s.0/ wwd 0.
(cid:15) s.n c 1/ wwd f .n c 1/ c s.n/ for n (cid:21) 0.

   mcs        2017/6/5     19:42     page 220     #228

220

chapter 7 recursive data types

ill-formed function de   nitions

7.3.2
there are some other blunders to watch out for when de   ning functions recursively.
the main problems come when recursive de   nitions don   t follow the recursive def-
inition of the underlying data type. below are some function speci   cations that re-
semble good de   nitions of functions on the nonnegative integers, but really aren   t.

f1.n/ wwd 2 c f1.n (cid:0) 1/:

(7.2)

this    de   nition    has no base case. if some function f1 satis   ed (7.2), so would a
function obtained by adding a constant to the value of f1. so equation (7.2) does
not uniquely de   ne an f1.

(

8  <  :0;
8  <  :1;

f2.n/ wwd

0;

f2.n c 1/

if n d 0;
otherwise:

(7.3)

this    de   nition    has a base case, but still doesn   t uniquely determine f2. any
function that is 0 at 0 and constant everywhere else would satisfy the speci   cation,
so (7.3) also does not uniquely de   ne anything.

in a typical programming language, evaluation of f2.1/ would begin with a re-
cursive call of f2.2/, which would lead to a recursive call of f2.3/, . . . with recur-
sive calls continuing without end. this    operational    approach interprets (7.3) as
de   ning a partial function f2 that is unde   ned everywhere but 0.

f3.n/ wwd

if n is divisible by 2,
if n is divisible by 3,

1;
2; otherwise.

this    de   nition    is inconsistent: it requires f3.6/ d 0 and f3.6/ d 1, so (7.4)
doesn   t de   ne anything.

mathematicians have been wondering about this function speci   cation, known

as the collatz conjecture for a while:

f4.n/ wwd

f4.n=2/

f4.3n c 1/

if n   1;
if n > 1 is even;
if n > 1 is odd:

for example, f4.3/ d 1 because
f4.3/wwd f4.10/wwd f4.5/wwd f4.16/wwd f4.8/wwd f4.4/wwd f4.2/wwd f4.1/wwd 1:

(7.4)

(7.5)

   mcs        2017/6/5     19:42     page 221     #229

7.4. arithmetic expressions

221

the constant function equal to 1 will satisfy (7.5), but it   s not known if another
function does as well. the problem is that the third case speci   es f4.n/ in terms
of f4 at arguments larger than n, and so cannot be justi   ed by induction on n. it   s
known that any f4 satisfying (7.5) equals 1 for all n up to over 1018.

a    nal example is the ackermann function, which is an extremely fast-growing

function of two nonnegative arguments. its inverse is correspondingly slow-growing   
it grows slower than log n, log log n, log log log n, . . . , but it does grow unboundly.
this inverse actually comes up analyzing a useful, highly ef   cient procedure known
as the union-find algorithm. this algorithm was conjectured to run in a number
of steps that grew linearly in the size of its input, but turned out to be    linear   
but with a slow growing coef   cient nearly equal to the inverse ackermann func-
tion. this means that pragmatically, union-find is linear, since the theoretically
growing coef   cient is less than 5 for any input that could conceivably come up.

the ackermann function can be de   ned recursively as the function a given by

the following rules:

a.m; n/ d 2n
a.m; n/ d a.m (cid:0) 1; a.m; n (cid:0) 1//

if m d 0 or n   1;
otherwise:

(7.6)
(7.7)

now these rules are unusual because the de   nition of a.m; n/ involves an eval-
uation of a at arguments that may be a lot bigger than m and n. the de   nitions
of f2 above showed how de   nitions of function values at small argument values in
terms of larger one can easily lead to nonterminating evaluations. the de   nition of
the ackermann function is actually ok, but proving this takes some ingenuity (see
problem 7.25).

7.4 arithmetic expressions

expression evaluation is a key feature of programming languages, and recognition
of expressions as a recursive data type is a key to understanding how they can be
processed.
to illustrate this approach we   ll work with a toy example: arithmetic expressions
like 3x2 c 2x c 1 involving only one variable,    x.    we   ll refer to the data type of
such expressions as aexp. here is its de   nition:

de   nition 7.4.1.
(cid:15) base cases:

   mcs        2017/6/5     19:42     page 222     #230

222

chapter 7 recursive data types

    the variable x is in aexp.
    the arabic numeral k for any nonnegative integer k is in aexp.

(cid:15) constructor cases: if e; f 2 aexp, then

    [ e + f ] 2 aexp. the expression [ e + f ] is called a sum. the aexp   s
e and f are called the components of the sum; they   re also called the
summands.
    [ e * f ] 2 aexp. the expression [ e * f ] is called a product. the
aexp   s e and f are called the components of the product; they   re also
called the multiplier and multiplicand.
    - [ e] 2 aexp. the expression - [ e] is called a negative.

notice that aexp   s are fully bracketed, and exponents aren   t allowed. so the
aexp version of the polynomial expression 3x2c2xc1 would of   cially be written
as

[ [ 3 * [ x * x] ] + [ [ 2 * x] + 1] ] :

(7.8)
these brackets and (cid:3)   s clutter up examples, so we   ll often use simpler expressions
like    3x2c2xc1    instead of (7.8). but it   s important to recognize that 3x2c2xc1
is not an aexp; it   s an abbreviation for an aexp.

7.4.1 evaluation and substitution with aexp   s
evaluating aexp   s
since the only variable in an aexp is x, the value of an aexp is determined by the
value of x. for example, if the value of x is 3, then the value of 3x2 c 2x c 1
is 34. in general, given any aexp e and an integer value n for the variable x we
can evaluate e to    nds its value eval.e; n/. it   s easy, and useful, to specify this
evaluation process with a recursive de   nition.
de   nition 7.4.2. the evaluation function, eval w aexp (cid:2) z ! z, is de   ned recur-
sively on expressions e 2 aexp as follows. let n be any integer.

(cid:15) base cases:

eval.x; n/ wwd n
eval.k; n/ wwd k

(value of variable x is n),
(value of numeral k is k, regardless of x.)

(7.9)
(7.10)

   mcs        2017/6/5     19:42     page 223     #231

7.4. arithmetic expressions

(cid:15) constructor cases:

eval.[ e1 + e2] ; n/ wwd eval.e1; n/ c eval.e2; n/;
eval.[ e1 * e2] ; n/ wwd eval.e1; n/ (cid:1) eval.e2; n/;

eval.- [ e1] ; n/ wwd (cid:0) eval.e1; n/:

223

(7.11)
(7.12)
(7.13)

for example, here   s how the recursive de   nition of eval would arrive at the value
of 3 c x2 when x is 2:
eval.[ 3 + [ x * x] ] ; 2/ d eval.3; 2/ c eval.[ x * x] ; 2/
d 3 c eval.[ x * x] ; 2/
d 3 c .eval.x; 2/ (cid:1) eval.x; 2//
d 3 c .2 (cid:1) 2/
d 3 c 4 d 7:

(by def 7.4.2.7.11)
(by def 7.4.2.7.10)
(by def 7.4.2.7.12)
(by def 7.4.2.7.9)

substituting into aexp   s
substituting expressions for variables is a standard operation used by compilers
and algebra systems. for example, the result of substituting the expression 3x for
x in the expression x.x (cid:0) 1/ would be 3x.3x (cid:0) 1/. we   ll use the general notation
subst.f; e/ for the result of substituting an aexp f for each of the x   s in an aexp
e. so as we just explained,

subst.3x; x.x (cid:0) 1// d 3x.3x (cid:0) 1/:

this substitution function has a simple recursive de   nition:
de   nition 7.4.3. the substitution function from aexp (cid:2) aexp to aexp is de   ned
recursively on expressions e 2 aexp as follows. let f be any aexp.

(cid:15) base cases:

subst.f; x/ wwd f
subst.f; k/ wwd k

(cid:15) constructor cases:

(subbing f for variable x just gives f ,)
(subbing into a numeral does nothing.)

(7.14)
(7.15)

   mcs        2017/6/5     19:42     page 224     #232

224

chapter 7 recursive data types

subst.f; [ e1 + e2] / wwd [ subst.f; e1/ + subst.f; e2/]
subst.f; [ e1 * e2] / wwd [ subst.f; e1/ * subst.f; e2/]

subst.f; - [ e1] / wwd - [ subst.f; e1/] :

(7.16)
(7.17)
(7.18)

(unabbreviating)

subst.[ 3 * x] ; [ x + - [ 1] ] /]

here   s how the recursive de   nition of the substitution function would    nd the
result of substituting 3x for x in the expression x.x (cid:0) 1/:
subst.3x; x.x (cid:0) 1//
d subst.[ 3 * x] ; [ x * [ x + - [ 1] ] ] /
d [ subst.[ 3 * x] ; x/ *
d [ [ 3 * x] * subst.[ 3 * x] ; [ x + - [ 1] ] /]
d [ [ 3 * x] * [ subst.[ 3 * x] ; x/
(by def 7.4.3 7.16)
d [ [ 3 * x] * [ [ 3 * x] + - [ subst.[ 3 * x] ; 1/] ] ]
(by def 7.4.3 7.14 & 7.18)
d [ [ 3 * x] * [ [ 3 * x] + - [ 1] ] ]
(by def 7.4.3 7.15)
d 3x.3x (cid:0) 1/
(abbreviation)
now suppose we have to    nd the value of subst.3x; x.x (cid:0) 1// when x d 2.
there are two approaches. first, we could actually do the substitution above to get
3x.3x (cid:0) 1/, and then we could evaluate 3x.3x (cid:0) 1/ when x d 2, that is, we could
recursively calculate eval.3x.3x (cid:0) 1/; 2/ to get the    nal value 30. this approach is
described by the expression

(by def 7.4.3 7.17)
(by def 7.4.3 7.14)

+ subst.[ 3 * x] ; - [ 1] /] ]

eval.subst.3x; x.x (cid:0) 1//; 2/:

(7.19)

in programming jargon, this would be called evaluation using the substitution
model. with this approach, the formula 3x appears twice after substitution, so
the multiplication 3 (cid:1) 2 that computes its value gets performed twice.
the second approach is called evaluation using the environment model. here, to
compute the value of (7.19), we evaluate 3x when x d 2 using just 1 multiplication
to get the value 6. then we evaluate x.x (cid:0) 1/ when x has this value 6 to arrive at
the value 6 (cid:1) 5 d 30. this approach is described by the expression

eval.x.x (cid:0) 1/; eval.3x; 2//:

(7.20)

the environment model only computes the value of 3x once, and so it requires one
fewer multiplication than the substitution model to compute (7.20).

   mcs        2017/6/5     19:42     page 225     #233

7.4. arithmetic expressions

225

this is a good place to stop and work this example out yourself (problem 7.26).
the fact that the    nal integer values of (7.19) and (7.20) agree is no surprise. the
substitution model and environment models will always produce the same    nal. we
can prove this by structural induction directly following the de   nitions of the two
approaches. more precisely, what we want to prove is
theorem 7.4.4. for all expressions e; f 2 aexp and n 2 z,
eval.subst.f; e/; n/ d eval.e; eval.f; n//:

(7.21)

proof. the proof is by structural induction on e.1
base cases:
(cid:15) case[x]
the left-hand side of equation (7.21) equals eval.f; n/ by this base case in
de   nition 7.4.3 of the substitution function; the right-hand side also equals
eval.f; n/ by this base case in de   nition 7.4.2 of eval.
(cid:15) case[k].
the left-hand side of equation (7.21) equals k by this base case in de   ni-
tions 7.4.3 and 7.4.2 of the substitution and evaluation functions. likewise,
the right-hand side equals k by two applications of this base case in the def-
inition 7.4.2 of eval.

constructor cases:

(cid:15) case[[ e1 + e2] ]
by the structural induction hypothesis (7.21), we may assume that for all
f 2 aexp and n 2 z,

eval.subst.f; ei /; n/ d eval.ei ; eval.f; n//

for i d 1; 2. we wish to prove that

eval.subst.f; [ e1 + e2] /; n/ d eval.[ e1 + e2] ; eval.f; n//:

(7.22)

(7.23)

the left-hand side of (7.23) equals

eval.[ subst.f; e1/ + subst.f; e2/] ; n/

1this is an example of why it   s useful to notify the reader what the induction variable is   in this

case it isn   t n.

   mcs        2017/6/5     19:42     page 226     #234

226

chapter 7 recursive data types

by de   nition 7.4.3.7.16 of substitution into a sum expression. but this equals

eval.subst.f; e1/; n/ c eval.subst.f; e2/; n/

by de   nition 7.4.2.(7.11) of eval for a sum expression. by induction hypoth-
esis (7.22), this in turn equals

eval.e1; eval.f; n// c eval.e2; eval.f; n//:

finally, this last expression equals the right-hand side of (7.23) by de   ni-
tion 7.4.2.(7.11) of eval for a sum expression. this proves (7.23) in this case.
(cid:15) case[[ e1 * e2] ] similar.
(cid:15) case[(cid:0)[ e1] ] even easier.
this covers all the constructor cases, and so completes the proof by structural

induction.

(cid:4)

7.5 games as a recursive data type

chess, checkers, go, and nim are examples of two-person games of perfect in-
formation. these are games where two players, player-1 and player-2, alternate
moves, and    perfect information    means that the situation at any point in the game
is completely visible to both players. in chess, for example, the visible positions
of the pieces on the chess board completely determine how the rest of the game can
be played by each player. by contrast, most card games are not games of perfect
information because neither player can see the other   s hand.

in the section we   ll examine the win-lose two-person games of perfect informa-
tion, wl-2pergm. we will de   ne wl-2pergm as a recursive data type, and then
we will prove, by structural induction, a fundamental theorem about winning strate-
gies for these games. the idea behind the recursive de   nition is to recognize that
the situation at any point during game play can itself be treated as the start of a new
game. this is clearest for the game of nim.

a nim game starts with several piles of stones. a move in the game consists of
removing some positive number of stones from a single pile. player-1 and player-2
alternate making moves, and whoever takes the last stone wins. so if there is only
one pile, then the    rst player to move wins by taking the whole pile. on the other
hand, if the game starts with just two piles, each with the same number of stones,

   mcs        2017/6/5     19:42     page 227     #235

7.5. games as a recursive data type

227

then the player who moves second can guarantee a win simply by mimicking the
   rst player. for example, this means that if the    rst player removes three stones
from one pile, then the second player removes three stones from the other pile. at
this point, it   s worth thinking for a moment about why the mimicking strategy
guarantees a win for the second player.

we can think of the    rst move in a nim game as simply picking another nim
game with different piles of stone to play next. for the nim game nimh3;4;5i that
starts with piles of 3, 4 and 5 stones, the    rst player can remove between one and
three stones from the    rst pile leading to three possible piles of stones

h2; 4; 5i ;h1; 4; 5i ;h4; 5i :

similarly, the    rst player has    ve possible ways to remove stones from the last pile,
leading to    ve possible piles of stones

h3; 4; 4i ;h3; 4; 3i ;h3; 4; 2i ;h3; 4; 1i ;h3; 4i :

so all the properties of nimh3;4;5i are captured by the set of 3 c 4 c 5 d 12 nim
games that can result from the    rst move.

with this idea in mind, we now give the formal de   nition.

de   nition 7.5.1. the class wl-2pergm of two-person win-lose games of perfect
information is de   ned recursively as follows:
base case: win and lose are wl-2pergm   s.
constructor case: if g is a nonempty set of wl-2pergm   s, then g is a wl-2pergm
game. each game m 2 g is called a possible    rst move of g.
a play of a wl-2pergm game is a sequence of moves that ends with a win or
loss for the    rst player, or goes on forever without arriving at an outcome.2 more
formally:
de   nition. a play of a wl-2pergm game g and its outcome is de   ned recursively
on the de   nition of wl-2pergm:
base case: (g d win). the sequence hwini of length one is a play of g. its
outcome is a win.
base case: (g d lose). the sequence hlosei of length one is a play of g. its
outcome is a loss.

2in english,    nim game    might refer to the rules that de   ne the game, but it might also refer
to a particular play of the game   as in the once famous third game in the 1961 movie last year at
marienbad. it   s usually easy to    gure out which way the phrase in being used, and we won   t worry
about it.

   mcs        2017/6/5     19:42     page 228     #236

228

chapter 7 recursive data types

constructor case: (g is a nonempty set of wl-2pergm   s). a play of g is a
sequence that starts with g followed by a play pm of some game m 2 g. the
outcome of the play, if any, is the outcome of pm .

the basic rules of some games do allow plays that go on forever. in chess for
example, a player might just keep moving the same piece back and forth, and if his
opponent did the same, the play could go on forever.3 but the recursive de   nition
of wl-2pergm games actually rules out the possibility of in   nite play.
lemma 7.5.2. every play of a game g 2 wl-2pergm has an outcome.
proof. we prove lemma 7.5.2 by structural induction, using the statement of the
lemma as the induction hypothesis.
base case: (g d win). there is only one play of g, namely the length one play
hwini, whose outcome is a win.
base case: (g d lose). likewise with the outcome being a loss.
constructor case: (g is a nonempty set of wl-2pergm   s). a play of g by de   ni-
tion consists g followed by a play pm for some m 2 g. by structural induction,
pm must be a sequence of some    nite length n that ends with an outcome. so this
play of g is a length n c 1 sequence that    nishes with the same outcome.
(cid:4)
among the games of checker, chess, go and nim, only nim is genuinely a win-
lose game, the other games might end in a tie (draw, stalemate, jigo) rather than a
win or loss. however, by treating a tie in these games as a loss for the    rst player,
the results about win-lose games will apply to games with ties.

7.5.1 game strategies
a strategy for a player is a rule that tells the player which move to make whenever
it is their turn. more precisely, a strategy s is a function from games to games with
the property that s.g/ 2 g for all games g. a pair of strategies for the two players
determines exactly which moves the players choose, and so it determines a unique
play of the game, depending on who moves    rst.

a key question about a game is what strategy will ensure that a player will win.
the player-1 wants a strategy whose outcome is guaranteed to be a win, and player-
2 wants a strategy whose outcome is guaranteed to be a loss for player-1.

3real chess tournaments rule this out by setting an advance limit on the number of moves, or by

forbidding repetitions of the same position more than twice.

   mcs        2017/6/5     19:42     page 229     #237

7.5. games as a recursive data type

229

7.5.2 fundamental theorem for win-lose games
the fundamental theorem for wl-2pergm games says that one of the players
always has a    xed    winning    strategy that guarantees a win against every possible
opponent strategy.

thinking about chess for instance, this seems surprising. serious chess players
are typically secretive about their intended play strategies, believing that an oppo-
nent could take advantage of knowing their strategy. their concern seems to be that
for any strategy they choose, their opponent coulda tailor a strategy to beat it.

but the fundamental theorem says otherwise.

in theory, in any win-lose-tie
game like chess or checkers, each of the players will have a strategy that guar-
antees a win or a stalemate, even if the strategy is known to their opponent. that
is,

(cid:15) there is winning strategy for one of the players, or
(cid:15) both players have strategies that guarantee them at worst a draw.
even though the fundamental theorem reveals a profound fact about games, it

has a very simple proof by structural induction.

theorem 7.5.3. [fundamental theorem for win-lose games] for any wl-2pergm
game g, one of the players has a winning strategy.
proof. the proof is by structural induction on the de   nition of a g 2 wl-2pergm.
the induction hypothesis is that one of the players has a winning strategy for g.
base case: (g d win or lose). then there is only one possible strategy for each
player, namely, do nothing and    nish with outcome g.
constructor case: (g is a nonempty set of wl-2pergm   s). by structural induction
we may assume that for each m 2 g one of the players has a winning strategy.
notice that since players alternate moves, the    rst player in g becomes the second
player in m .
now if there is a move m0 2 g where the second player in m0 has a winning
strategy, then the    rst player in g has a simple winning strategy: pick m0 as the
   rst move, and then follow the second player   s winning strategy for m0.
on the other hand, if no m 2 g has a winning strategy for the second player in
m , then we can conclude by induction that every m 2 g has a winning strategy for
the    rst player in m . now the second player in g has a simple winning strategy,
namely if the    rst player in g makes the move m , then the second player in g
(cid:4)
should follow the follow the winning strategy for the    rst player in m .

   mcs        2017/6/5     19:42     page 230     #238

230

chapter 7 recursive data types

in   nite games
so where do we come upon games with an in   nite number of    rst moves? well,
suppose we play a tournament of n chess games for some positive integer n. this
tournament will be a wl-2pergm if we agree on a rule for combining the payoffs
of the n individual chess games into a    nal payoff for the whole tournament.

there still are only a    nite number of possible moves at any stage of the n-game
chess tournament, but we can de   ne a meta-chess-tournament, whose    rst move is
a choice of any positive integer n, after which we play an n-game tournament. now
the meta-chess-tournament has an in   nite number of    rst moves.

of course only the    rst move in the meta-chess-tournament is in   nite, but then
we could set up a tournament consisting of n meta-chess-tournaments. this would
be a game with n possible in   nite moves. and then we could have a meta-meta-
chess-tournament whose    rst move was to choose how many meta-chess-tournaments
to play. this meta-meta-chess-tournament will have an in   nite number of in   nite
moves. then we could move on to meta-meta-meta-chess-tournaments . . . .

as silly or weird as these meta games may seem, their weirdness doesn   t dis-
qualify the fundamental theorem: in each of these games, one of the players will
have winning strategy.

notice that although theorem 7.5.3 guarantees a winning strategy, its proof gives
no clue which player has it. for the subset takeaway game of problem 4.7 and
most familiar 2pergm   s like chess, go, . . . , no one knows which player has a
winning strategy.4

7.6 induction in computer science

induction is a powerful and widely applicable proof technique, which is why we   ve
devoted two entire chapters to it. strong induction and its special case of ordinary
induction are applicable to any kind of thing with nonnegative integer sizes   which
is an awful lot of things, including all step-by-step computational processes.

structural induction then goes beyond number counting, and offers a simple,
natural approach to proving things about recursive data types and recursive compu-
tation.

in many cases, a nonnegative integer size can be de   ned for a recursively de   ned
datum, such as the length of a string, or the number of operations in an aexp. it is
then possible to prove properties of data by ordinary induction on their size. but

4checkers used to be in this list, but there has been a recent announcement that each player has a

strategy that forces a tie. (reference tba)

   mcs        2017/6/5     19:42     page 231     #239

7.6. induction in computer science

231

this approach often produces more cumbersome proofs than structural induction.

in fact, structural induction is theoretically more powerful than ordinary induc-
tion. however, it   s only more powerful when it comes to reasoning about in   nite
data types   like in   nite trees, for example   so this greater power doesn   t matter in
practice. what does matter is that for recursively de   ned data types, structural in-
duction is a simple and natural approach. this makes it a technique every computer
scientist should embrace.

problems for section 7.1

practice problems
problem 7.1.
the set obt of ordered binary trees is de   ned recursively as follows:
base case: hleafi is an obt, and
constructor case: if r and s are obt   s, then hnode; r; si is an obt.
if t is an obt, let nt be the number of node labels in t and lt be the number
of leaf labels in t .
prove by structural induction that for all t 2 obt,

lt d nt c 1:

(7.24)

class problems
problem 7.2.
prove by structural induction on the recursive de   nition(7.1.1) of a
nation is associative:

.r (cid:1) s/ (cid:1) t d r (cid:1) .s (cid:1) t /

(cid:3) that concate-

(7.25)

(cid:3).
for all strings r; s; t 2 a

problem 7.3.
the reversal of a string is the string written backwards, for example, rev.abcde/ d
edcba.
(a) give a simple recursive de   nition of rev.s/ based on the recursive de   ni-
tions 7.1.1 of s 2 a

(cid:3) and of the concatenation operation 7.1.3.

   mcs        2017/6/5     19:42     page 232     #240

232

chapter 7 recursive data types

(b) prove that

rev.s (cid:1) t / d rev.t / (cid:1) rev.s/;

(7.26)

for all strings s; t 2 a

(cid:3). you may assume that concatenation is associative:

.r (cid:1) s/ (cid:1) t d r (cid:1) .s (cid:1) t /

for all strings r; s; t 2 a

(cid:3) (problem 7.2).

problem 7.4.
the elementary 18.01 functions (f18   s) are the set of functions of one real variable
de   ned recursively as follows:
base cases:

(cid:15) the identity function id.x/ wwd x is an f18,
(cid:15) any constant function is an f18,
(cid:15) the sine function is an f18,

constructor cases:

if f; g are f18   s, then so are
1. f c g, fg, 2g,
(cid:0)1,
2. the inverse function f
3. the composition f    g.
(a) prove that the function 1=x is an f18.
warning: don   t confuse 1=x d x
id.x/. the inverse id

(cid:0)1 is equal to id.

(cid:0)1 with the inverse id

(cid:0)1 of the identity function

(b) prove by structural induction on this de   nition that the elementary 18.01
functions are closed under taking derivatives. that is, show that if f .x/ is an f18,
0 wwd df =dx. (just work out 2 or 3 of the most interesting constructor
then so is f
cases; you may skip the less interesting ones.)

problem 7.5.
here is a simple recursive de   nition of the set e of even integers:

   mcs        2017/6/5     19:42     page 233     #241

7.6. induction in computer science

233

de   nition. base case: 0 2 e.
constructor cases: if n 2 e, then so are n c 2 and (cid:0)n.
provide similar simple recursive de   nitions of the following sets:
(a) the set s wwd f2k3m5n 2 n j k; m; n 2 ng.
(b) the set t wwd f2k32kcm5mcn 2 n j k; m; n 2 ng.
(c) the set l wwd f.a; b/ 2 z2 j .a (cid:0) b/ is a multiple of 3g.
let l

0 be the set de   ned by the recursive de   nition you gave for l in the previous
0 d l, but maybe you made a mistake. so let   s

part. now if you did it right, then l
check that you got the de   nition right.
(d) prove by structural induction on your de   nition of l

0 that

0   l:

l

(e) con   rm that you got the de   nition right by proving that

l   l

0

:

(f) see if you can give an unambiguous recursive de   nition of l.

problem 7.6.

de   nition. the recursive data type binary-2pg of binary trees with leaf labels l
is de   ned recursively as follows:

(cid:15) base case: hleaf; li 2 binary-2pg, for all labels l 2 l.
(cid:15) constructor case: if g1; g2 2 binary-2pg, then

hbintree; g1; g2i 2 binary-2pg:

the size jgj of g 2 binary-2pg is de   ned recursively on this de   nition by:
(cid:15) base case:

jhleaf; lij wwd 1;

for all l 2 l:

(cid:15) constructor case:

jhbintree; g1; g2ij wwd jg1j c jg2j c 1:

   mcs        2017/6/5     19:42     page 234     #242

234

chapter 7 recursive data types

figure 7.1 a picture of a binary tree g.

for example, the size of the binary-2pg g pictured in figure 7.1, is 7.

(a) write out (using angle brackets and labels bintree, leaf, etc.) the binary-2pg
g pictured in figure 7.1.
the value of    atten.g/ for g 2 binary-2pg is the sequence of labels in l of the
leaves of g. for example, for the binary-2pg g pictured in figure 7.1,

   atten.g/ d .win; lose; win; win/:

(b) give a recursive de   nition of    atten. (you may use the operation of concate-
nation (append) of two sequences.)

(c) prove by structural induction on the de   nitions of    atten and size that

2 (cid:1) length.   atten.g// d jgj c 1:

(7.27)

homework problems
problem 7.7.
the string reversal function, rev w a
base case: rev.(cid:21)/ wwd (cid:21).
constructor case: rev.as/ wwd rev.s/a for s 2 a

(cid:3) ! a

(cid:3) and a 2 a.

(cid:3) has a simple recursive de   nition.

gg11wing1,2winlosewin   mcs        2017/6/5     19:42     page 235     #243

7.6. induction in computer science

235

a string s is a palindrome when rev.s/ d s. the palindromes also have a simple
recursive de   nition as the set recpal.
base cases: (cid:21) 2 recpal and a 2 recpal for a 2 a.
constructor case: if s 2 recpal, then asa 2 recpal for a 2 a.
verifying that the two de   nitions agree offers a nice exercise in structural induc-
tion and also induction on length of strings. the veri   cation rests on three basic
properties of concatenation and reversal proved in separate problems 7.2 and 7.3.

fact.

.rs d uv and jrj d juj/ iff .r d u and s d v/

r (cid:1) .s (cid:1) t / d .r (cid:1) s/ (cid:1) t
rev.st / d rev.t / rev.s/

(7.28)
(7.29)
(7.30)

(a) prove that s d rev.s/ for all s 2 recpal.
(b) prove conversely that if s d rev.s/, then s 2 recpal.
hint: by induction on n d jsj.

problem 7.8.
let m; n be integers, not both zero. de   ne a set of integers, lm;n, recursively as
follows:

(cid:15) base cases: m; n 2 lm;n.
(cid:15) constructor cases: if j; k 2 lm;n, then

1. (cid:0)j 2 lm;n,
2. j c k 2 lm;n.

let l be an abbreviation for lm;n in the rest of this problem.
(a) prove by structural induction that every common divisor of m and n also di-
vides every member of l.

(b) prove that any integer multiple of an element of l is also in l.
(c) show that if j; k 2 l and k    0, then rem.j; k/ 2 l.
(d) show that there is a positive integer g 2 l that divides every member of l.
hint: the least positive integer in l.

   mcs        2017/6/5     19:42     page 236     #244

236

chapter 7 recursive data types

figure 7.2 constructing the koch snow   ake.

(e) conclude that g from part (d) is gcd.m; n/, the greatest common divisor, of m
and n.

problem 7.9.

de   nition. de   ne the number #c.s/ of occurrences of the character c 2 a in the
(cid:3):
string s recursively on the de   nition of s 2 a
base case: #c.(cid:21)/ wwd 0.
constructor case:

(
#c.s/
1 c #c.s/

#c.ha; si/ wwd

if a    c;
if a d c:
(cid:3) and c 2 a

prove by structural induction that for all s; t 2 a

#c.s (cid:1) t / d #c.s/ c #c.t /:

problem 7.10.
fractals are an example of mathematical objects that can be de   ned recursively.
in this problem, we consider the koch snow   ake. any koch snow   ake can be
constructed by the following recursive de   nition.

(cid:15) base case: an equilateral triangle with a positive integer side length is a
koch snow   ake.
(cid:15) constructor case: let k be a koch snow   ake, and let l be a line segment
on the snow   ake. remove the middle third of l, and replace it with two line
segments of the same length jlj, as is done in figure 7.2
the resulting    gure is also a koch snow   ake.
p

prove by structural induction that the area inside any koch snow   ake is of the

form q

3, where q is a rational number.

   mcs        2017/6/5     19:42     page 237     #245

7.6. induction in computer science

237

problem 7.11.
the set rbt of red-black trees is de   ned recursively as follows:
base cases:

(cid:15) hredi 2 rbt, and
(cid:15) hblacki 2 rbt.

constructor cases: a; b are rbt   s, then

(cid:15) if a; b start with black, then hred; a; bi is an rbt.
(cid:15) if a; b start with red, then hblack; a; bi is an rbt.
for any rbt t , let
(cid:15) rt be the number of red labels in t ,
(cid:15) bt be the number of black labels in t , and
(cid:15) nt wwd rt c bt be the total number of labels in t .
prove that

if t starts with a red label; then nt
3

  rt   2nt c 1

3

;

(7.31)

hint:

exam problems

n=3   r

.2=3/n (cid:21) n (cid:0) r

iff

problem 7.12.
the arithmetic trig functions (atrig   s) are the set of functions of one real variable
de   ned recursively as follows:

base cases:
(cid:15) the identity function id.x/ wwd x is an atrig,
(cid:15) any constant function is an atrig,
(cid:15) the sine function is an atrig,

   mcs        2017/6/5     19:42     page 238     #246

238

chapter 7 recursive data types

constructor cases:
if f; g are atrig   s, then so are
1. f c g
2. f (cid:1) g
3. the composition f    g.
prove by structural induction on this de   nition that if f .x/ is an atrig, then so is
0 wwd df =dx.

f

problem 7.13.

de   nition. the set raf of rational functions of one real variable is the set of
functions de   ned recursively as follows:
base cases:

(cid:15) the identity function, id.r/ wwd r for r 2 r (the real numbers), is an raf,
(cid:15) any constant function on r is an raf.

constructor cases: if f; g are raf   s, then so is f ~ g, where ~ is one of the
operations

1. addition c,
2. multiplication (cid:1) or
3. division =.
(a) describe how to construct functions e; f; g 2 raf such that

e    .f c g/    .e    f / c .e    g/:

(b) prove that for all real-valued functions e; f; g (not just those in raf):

.e ~ f /    g d .e    g/ ~ .f    g/;

hint: .e ~ f /.x/ wwd e.x/ ~ f .x/.

(7.32)

(7.33)

   mcs        2017/6/5     19:42     page 239     #247

7.6. induction in computer science

239

(c) let predicate p .h/ be the following predicate on functions h 2 raf:

p .h/ wwd 8g 2 raf: h    g 2 raf:

prove by structural induction on the de   nition of raf that p .h/ holds for all h 2
raf.
make sure to indicate explicitly
(cid:15) each of the base cases, and
(cid:15) each of the constructor cases.

problem 7.14.
the 2-3-averaged numbers are a subset, n23, of the real interval   0; 1   de   ned
recursively as follows:
base cases: 0; 1 2 n23.
constructor case: if a; b are in n23, then so is l.a; b/ where

(a) use ordinary induction or the well-ordering principle to prove that

:

l.a; b/ wwd 2a c 3b
  3
 n 2 n23

5

5

for all nonnegative integers n.

(b) prove by structural induction that the product of two 2-3-averaged numbers is
also a 2-3-averaged number.
hint: prove by structural induction on c that, if d 2 n23, then cd 2 n23.

problem 7.15.
this problem is about binary strings s 2 f0; 1g(cid:3).
let   s call a recursive de   nition of a set of strings cat-ok when all its constructors

are de   ned as concatenations of strings.5

5the concatenation of two strings x and y, written xy, is the string obtained by appending x to

the left end of y. for example, the concatenation of 01 and 101 is 01101.

   mcs        2017/6/5     19:42     page 240     #248

240

chapter 7 recursive data types

for example, the set, one1, of strings with exactly one 1 has the cat-ok de   ni-

tion:
base case: the length-one string 1 is in one1.
constructor case: if s is in one1, then so is 0s and s0.
(a) give a cat-ok de   nition of the set e of even length strings consisting solely
of 0   s.
(b) let rev.s/ be the reversal of the string s. for example, rev.001/ d 100. a
palindrome is a string s such that s d rev.s/. for example, 11011 and 010010
are palindromes.
give a cat-ok de   nition of the palindromes.

(c) give a cat-ok de   nition of the set p of strings consisting solely of 0   s whose
length is a power of two.

problems for section 7.2

practice problems
problem 7.16.
de   ne the sets f1 and f2 recursively:

(cid:15) f1:

(cid:15) f2:

    5 2 f1,
    if n 2 f1, then 5n 2 f1.

    5 2 f2,
    if n; m 2 f1, then nm 2 f2.

(a) show that one of these de   nitions is technically ambiguous. (remember that
   ambiguous recursive de   nition    has a technical mathematical meaning which does
not imply that the ambiguous de   nition is unclear.)

(b) brie   y explain what advantage unambiguous recursive de   nitions have over
ambiguous ones.

   mcs        2017/6/5     19:42     page 241     #249

7.6. induction in computer science

241

(c) a way to prove that f1 d f2, is to show    rst that f1   f2 and second that
f2   f1. one of these containments follows easily by structural induction. which
one? what would be the induction hypothesis? (you do not need to complete a
proof.)

problem 7.17. (a) to prove that the set recmatch, of matched strings of de   ni-
tion 7.2.1 equals the set ambrecmatch of ambiguous matched strings of de   ni-
tion 7.2.4, you could    rst prove that

and then prove that

8r 2 recmatch: r 2 ambrecmatch;

8u 2 ambrecmatch: u 2 recmatch:

of these two statements, indicate the one that would be simpler to prove by struc-
tural induction directly from the de   nitions.
(b) suppose structural induction was being used to prove that ambrecmatch  
recmatch. indicate the one predicate below that would    t the format for a structural
induction hypothesis in such a proof.

(cid:15) p0.n/ wwd jsj   n implies s 2 recmatch.
(cid:15) p1.n/ wwd jsj   n implies s 2 ambrecmatch.
(cid:15) p2.s/ wwd s 2 recmatch.
(cid:15) p3.s/ wwd s 2 ambrecmatch.
(cid:15) p4.s/ wwd .s 2 recmatch implies s 2 ambrecmatch/.
(c) the recursive de   nition ambrecmatch is ambiguous because it allows the
s (cid:1) t constructor to apply when s or t is the empty string. but even    xing that,
ambiguity remains. demonstrate this by giving two different derivations for the
string    [ ] [ ] [ ] according to ambrecmatch but only using the s (cid:1) t constructor
when s    (cid:21) and t    (cid:21).

class problems
problem 7.18.
let p be the string [ ] . a string of brackets is said to be erasable iff it can be

   mcs        2017/6/5     19:42     page 242     #250

242

chapter 7 recursive data types

reduced to the empty string by repeatedly erasing occurrences of p. for example,
to erase the string

[ [ [ ] ] [ ] ] [ ] ;

start by erasing the three occurrences of p to obtain

[ [ ] ] :

then erase the single occurrence of p to obtain,

[ ] ;

which can now be erased to obtain the empty string (cid:21).

on the other hand the string

[ ] ] [ [ [ [ [ ] ]

(7.34)

is not erasable, because when we try to erase, we get stuck. namely, start by erasing
the two occurrences of p in (7.34) to obtain

] [ [ [ [ ] :

the erase the one remaining occurrence of p to obtain.

] [ [ [ :

at this point we are stuck with no remaining occurrences of p. 6

let erasable be the set of erasable strings of brackets. let recmatch be the

recursive data type of strings of matched brackets given in de   nition 7.2.1
(a) use structural induction to prove that

recmatch   erasable:

(b) supply the missing parts (labeled by    (*)   ) of the following proof that

erasable   recmatch:

6notice that there are many ways to erase a string, depending on when and which occurrences
of p are chosen to be erased. it turns out that given any initial string, the    nal string reached after
performing all possible erasures will be the same, no matter how erasures are performed. we take
this for granted here, although it is not altogether obvious. (see problem 6.28 for a proof).

   mcs        2017/6/5     19:42     page 243     #251

7.6. induction in computer science

243

proof. we prove by strong induction that every length n string in erasable is also
in recmatch. the induction hypothesis is

p .n/ wwd 8x 2 erasable:jxj d n implies x 2 recmatch:

base case:
(*) what is the base case? prove that p is true in this case.
inductive step: to prove p .n c 1/, suppose jxj d n c 1 and x 2 erasable. we
need to show that x 2 recmatch.
let   s say that a string y is an erase of a string z iff y is the result of erasing a single
occurrence of p in z.
since x 2 erasable and has positive length, there must be an erase, y 2 erasable,
of x. so jyj d n (cid:0) 1 (cid:21) 0, and since y 2 erasable, we may assume by induction
hypothesis that y 2 recmatch.
now we argue by cases:
case (y is the empty string):
(*) prove that x 2 recmatch in this case.
case (y d [ s ] t for some strings s; t 2 recmatch): now we argue by subcases.

0 ] t where s is an erase of s

(cid:15) subcase(x d py):
(*) prove that x 2 recmatch in this subcase.
(cid:15) subcase (x is of the form [ s
0 2
since s 2 recmatch, it is erasable by part (b), which implies that s
0j < jxj, so by induction hypothesis, we may assume that
erasable. but js
0 2 recmatch. this shows that x is the result of the constructor step of
recmatch, and therefore x 2 recmatch.
(cid:15) subcase (x is of the form [ s ] t
(*) prove that x 2 recmatch in this subcase.

0 where t is an erase of t

0):

0):

s

(*) explain why the above cases are suf   cient.
this completes the proof by strong induction on n, so we conclude that p .n/ holds
for all n 2 n. therefore x 2 recmatch for every string x 2 erasable. that is,
erasable   recmatch. combined with part (a), we conclude that

erasable d recmatch:

(cid:4)

   mcs        2017/6/5     19:42     page 244     #252

244

chapter 7 recursive data types

problem 7.19. (a) prove that the set recmatch of matched strings of de   nition 7.2.1
is closed under string concatenation. namely, 8s; t 2 recmatch: s (cid:1) t 2 recmatch.
(b) prove ambrecmatch   recmatch, where ambrecmatch is the set of am-
biguous matched strings of de   nition 7.2.4.
(c) prove that recmatch d ambrecmatch.

homework problems
problem 7.20.
one way to determine if a string has matching brackets, that is, if it is in the set,
recmatch, of de   nition 7.2.1 is to start with 0 and read the string from left to right,
adding 1 to the count for each left bracket and subtracting 1 from the count for each
right bracket. for example, here are the counts for two sample strings:

]

[

]
0 1 0 (cid:0)1 0 1 2 3 4 3 2 1 0

]

[

[

[

[

[

]

]

]

[

[
0 1 2

]

]

]
[
3 2 1 2 1 0 1 0

[

]

]

[

a string has a good count if its running count never goes negative and ends with 0.
so the second string above has a good count, but the    rst one does not because its
count went negative at the third step. let

goodcount wwd fs 2 f] ; [ g(cid:3) j s has a good countg:

the empty string has a length 0 running count we   ll take as a good count by
convention, that is, (cid:21) 2 goodcount. the matched strings can now be characterized
precisely as this set of strings with good counts.
(a) prove that goodcount contains recmatch by structural induction on the de   -
nition of recmatch.

(b) conversely, prove that recmatch contains goodcount.
hint: by induction on the length of strings in goodcount. consider when the
running count equals 0 for the second time.

problem 7.21.
divided equilateral triangles (dets) were de   ned in problem 5.10 as follows:

   mcs        2017/6/5     19:42     page 245     #253

7.6. induction in computer science

245

[h]

figure 7.3 det t

0 from four copies of det t

[h]

figure 7.4 trapezoid from three triangles

(cid:15) base case: a single equilateral triangle is a det whose only subtriangle is
itself.

0 built out of four
(cid:15) if t wwd
is a det, then the equilateral triangle t
copies of t as shown in in figure 7.3 is also a det, and the subtriangles of
0 are exactly the subtriangles of each of the copies of t .
t

properties of dets were proved earlier by induction on the length of a side of the
triangle. recognizing that the de   nition of dets is recursive, we can instead prove
properties of dets by structural induction.

(a) prove by structural induction that a det with one of its corner subtriangles
removed can be tiled with trapezoids built out of three subtriangles as in figure 7.4.

(b) explain why a det with a triangle removed from the middle of one side can
also be tiled by trapezoids.

(c) in tiling a large square using l-shaped blocks as described in section 5.1.5,
there was a tiling with any single subsquare removed. part (b) indicates that trapezoid-
tilings are possible for dets with a non-corner subtriangle removed, so it   s natural
to make the mistaken guess that dets have a corresponding property:
false claim. a det with any single subtriangle removed can be trapezoid-tiled.
we can try to prove the claim by structural induction as in part (a).

   mcs        2017/6/5     19:42     page 246     #254

246

chapter 7 recursive data types

0.

bogus proof. the claim holds vacuously in the base case of a det with a single
subtriangle.
0 be a det made of four copies of a det t , and suppose we remove an
now let t
arbitrary subtriangle from t
the removed subtriangle must be a subtriangle of one of the copies of t . the
copies are the same, so for de   niteness we assume the subtriangle was removed
from copy 1. then by structural induction hypothesis, copy 1 can be trapezoid-
tiled, and then the other three copies of t can be trapezoid-tiled exactly as in the
0 with the arbitrary
solution to part(a). this yields a complete trapezoid-tiling of t
subtriangle removed.
we conclude by structural induction that any det with any subtriangle removed
(cid:4)
can be trapezoid-tiled.

what   s wrong with the proof?
hint: find a counter-example and show where the proof breaks down.
we don   t know if there is a simple characterization of exactly which subtriangles
can be removed to allow a trapezoid tiling.

problem 7.22.
a binary word is a    nite sequence of 0   s and 1   s. in this problem, we   ll simply call
them    words.    for example, .1; 1; 0/ and .1/ are words of length three and one,
respectively. we usually omit the parentheses and commas in the descriptions of
words, so the preceding binary words would just be written as 110 and 1.

the basic operation of placing one word immediately after another is called con-
catentation. for example, the concatentation of 110 and 1 is 1101, and the con-
catentation of 110 with itself is 110110.

we can extend this basic operation on words to an operation on sets of words. to
emphasize the distinction between a word and a set of words, from now on we   ll
refer to a set of words as a language. now if r and s are languages, then r (cid:1) s is
the language consisting of all the words you can get by concatenating a word from
r with a word from s. that is,

r (cid:1) s wwd frs j r 2 r and s 2 sg:

for example,

f0; 00g (cid:1) f00; 000g d f000; 0000; 00000g

   mcs        2017/6/5     19:42     page 247     #255

7.6. induction in computer science

247

another example is d (cid:1) d, abbreviated as d2, where d wwd f1; 0g.

d2 d f00; 01; 10; 11g:

in other words, d2 is the language consisting of all the length-two words. more
generally, dn will be the language of length-n words.

if s is a language, the language you can get by concatenating any number of
(cid:3)   pronounced    s star.    (by convention, the empty
copies of words in s is called s
(cid:3).) for example, f0; 11g(cid:3) is the language consisting
word (cid:21) always included in s
of all the words you can make by stringing together 0   s and 11   s. this language
could also be described as consisting of the words whose blocks of 1   s are always
(cid:3), which consists of all the even length
of even length. another example is .d2/
words. finally, the language b of all binary words is just d

(cid:3).

the concatenation-de   nable (c-d) languages are de   ned recursively:
(cid:15) base case: every    nite language is a c-d.
(cid:15) constructor cases: if l and m are c-d   s, then

l (cid:1) m; l [ m;

and l

are c-d   s.

note that the (cid:3)-operation is not allowed. for this reason, the c-d languages are
also called the    star-free languages,    [36].

lots of interesting languages turn out to be concatenation-de   nable, but some
very simple languages are not. this problem ends with the conclusion that the
language f00g(cid:3) of even length words whose bits are all 0   s is not a c-d language.
(a) show that the set b of all binary words is c-d. hint: the empty set is    nite.
now a more interesting example of a c-d set is the language of all binary words

that include three consecutive 1   s:

b111b:

notice that the proper expression here is    b(cid:1)f111g(cid:1) b.    but it causes no confusion
and helps readability to omit the dots in concatenations and the curly braces for sets
with only one element.
(b) show that the language consisting of the binary words that start with 0 and
end with 1 is c-d.
(c) show that 0(cid:3) is c-d.

   mcs        2017/6/5     19:42     page 248     #256

248

chapter 7 recursive data types

(d) show that if r and s are c-d, then so is r \ s.
(e) show that f01g(cid:3) is c-d.
let   s say a language s is 0-   nite when it includes only a    nite number of words
whose bits are all 0   s, that is, when s \ 0(cid:3) is a    nite set of words. a langauge s is
0-boring   boring, for short   when either s or s is 0-   nite.
(f) explain why f00g(cid:3) is not boring.
(g) verify that if r and s are boring, then so is r [ s.
(h) verify that if r and s are boring, then so is r (cid:1) s.
hint: by cases: whether r and s are both 0-   nite, whether r or s contains no
all-0 words at all (including the empty word (cid:21)), and whether neither of these cases
hold.

(i) conclude by structural induction that all c-d languages are boring.
so we have proved that the set .00/
language.

(cid:3) of even length all-0 words is not a c-d

problem 7.23.
we can explain in a simple and precise way how digital circuits work, and gain the
powerful proof method of structural induction to verify their properties, by de   ning
digital circuits as a recursive data type digcirc. the de   nition is a little easier to
state if all the gates in the circuit take two inputs, so we will use the two-input nor
gate rather than a one-input not, and let the set of gates be
gates wwd fnor; and; or; xorg:

a digital circuit will be a recursively de   ned list of gate connections of the form
.x; y; g; i / where g is a gate, x and y are the input wires, and i is the set of wires
that the gate output feeds into as illustrated in figure 7.5.

formally, we let w be a set w0; w1; : : : whose elements are called wires, and
o     w be an object called the output.
de   nition. the set of digital circuit digcirc, and their inputs and internal wires,
are de   ned recursively as follows:

   mcs        2017/6/5     19:42     page 249     #257

7.6. induction in computer science

249

figure 7.5 digital circuit constructor step

base case: if x; y 2 w , then c 2 digcirc, where

c d list..x; y; g;fog// for some g 2 gates;

inputs.c/ wwd fx; yg;
internal.c/ wwd ;:

constructor cases: if

c 2 digcirc;
i   inputs.c/; i    ;;
x; y 2 w (cid:0) .i [ internal.c//

then d 2 digcirc, where

d d cons..x; y; g; i/; c/ for some g 2 gates;

inputs.d/ wwd fx; yg [ .inputs.c/ (cid:0) i /;
internal.d/ wwd internal.c/ [ i:

for any circuit c de   ne

wires.c/ wwd inputs.c/ [ internal.c/ [ fog:

   mcs        2017/6/5     19:42     page 250     #258

250

chapter 7 recursive data types

a wire assignment for c is a function

   w wires.c/ ! ft; fg
such that for each gate connection .x; y; g; i / 2 c ,

  .i / d .  .x/ g   .y// for all i 2 i:

(a) de   ne an environment for c to be a function e w inputs.c/ ! ft; fg. prove
that if two wire assignments for c are equal for each wire in inputs.c/, then the
wire assignments are equal for all wires.

part (a) implies that for any environment e for c , there is a unique wire assign-

ment   e such that

  e.w/ d e.w/ for all w 2 inputs.c/:

so for any input environment e, the circuit computes a unique output

eval.c; e/ wwd   e.o/:

now suppose f is a propositional formula whose propositional variables are the

input wires of some circuit c . then c and f are de   ned to be equivalent iff

eval.c; e/ d eval.f; e/

for all environments e for c .
(b) de   ne a function e.c / recursively on the de   nition of circuit c , such that
e.c / is a propositional formula equivalent to c . then verify the recursive de   ni-
tion by proving the equivalence using structural induction.

(c) give examples where e.c / is exponentially larger than c .

exam problems
problem 7.24.
let p be a propositional variable.
(a) show how to express not.p / using p and a selection from among the con-
stant true, and the connectives xor and and.

the use of the constant true above is essential. to prove this, we begin with
a recursive de   nition of xor-and formulas that do not use true, called the pxa
formulas.

   mcs        2017/6/5     19:42     page 251     #259

7.6. induction in computer science

251

de   nition. base case: the propositional variable p is a pxa formula.
constructor cases if r; s 2 pxa, then

(cid:15) r xor s,
(cid:15) r and s

are pxa   s.

for example,

...p xor p / and p / xor .p and p // xor .p xor p /

is a pxa.
(b) prove by structural induction on the de   nition of pxa that every pxa formula
a is equivalent to p or to false.

problems for section 7.3

homework problems
problem 7.25.
one version of the the ackermann function a w n2 ! n is de   ned recursively by
the following rules:
a.m; n/ wwd 2n
a.m; n/ wwd a.m (cid:0) 1; a.m; n (cid:0) 1//

(a-base)
(aa)
prove that if b w n2 ! n is a partial function that satis   es this same de   nition,
then b is total and b d a.

if m d 0 or n   1,
otherwise:

problems for section 7.4

practice problems
problem 7.26. (a) write out the evaluation of

eval.subst.3x; x.x (cid:0) 1//; 2/

according to the environment model and the substitution model, indicating where
the rule for each case of the recursive de   nitions of eval.; / and   wd] or substitution
is    rst used. compare the number of arithmetic operations and variable lookups.

   mcs        2017/6/5     19:42     page 252     #260

252

chapter 7 recursive data types

(b) describe an example along the lines of part (a) where the environment model
would perform 6 fewer multiplications than the substitution model. you need not
carry out the evaluations.

(c) describe an example along the lines of part (a) where the substitution model
would perform 6 fewer multiplications than the environment model. you need not
carry out the evaluations.

class problems
problem 7.27.
in this problem we   ll need to be careful about the propositional operations that
apply to truth values and the corresponding symbols that appear in formulas. we   ll
restrict ourselves to formulas with symbols and and not that correspond to the
operations and, not. we will also allow the constant symbols true and false.
(a) give a simple recursive de   nition of propositional formula f and the set
pvar.f / of propositional variables that appear in it.

let v be a set of propositional variables. a truth environment e over v assigns

truth values to all these variables. in other words, e is a total function,

e w v ! ft; fg:

(b) give a recursive de   nition of the truth value, eval.f; e/, of propositional for-
mula f in an environment e over a set of variables v   pvar.f /.
clearly the truth value of a propositional formula only depends on the truth val-
ues of the variables in it. how could it be otherwise? but it   s good practice to work
out a rigorous de   nition and proof of this assumption.
(c) give an example of a propositional formula containing the variable p but
whose truth value does not depend on p . now give a rigorous de   nition of the as-
sertion that    the truth value of propositional formula f does not depend on propo-
sitional variable p .   
hint: let e1; e2 be two environments whose values agree on all variables other than
p .

(d) give a rigorous de   nition of the assertion that    the truth value of a proposi-
tional formula only depends on the truth values of the variables that appear in it,   
and then prove it by structural induction on the de   nition of propositional formula.

(e) now we can formally de   ne f being valid. namely, f is valid iff

8e: eval.f; e/ d t:

   mcs        2017/6/5     19:42     page 253     #261

7.6. induction in computer science

253

give a similar formal de   nition of formula g being unsatis   able. then use the
de   nition of eval to prove that a formula f is valid iff not.f / is unsatis   able.

exam problems
problem 7.28.
a class of propositional formulas called the multivariable and-or (mvao) for-
mulas are de   ned recursively as follows:

de   nition. base cases: a single propositional variable, and the constants true
and false are mvao formulas.
constructor cases: if g; h 2 mvao, then .gandh / and .gorh / are mvao   s.
for example,

...p or q/ and p / or .r and true// or .q or false/

is a mvao.
de   nition. a propositional formula g is false-decreasing when substituting the
constant false for some occurrences of its variables makes the formula    more
false.    more precisely, if gf is the result of replacing some occurrences of vari-
ables in g by false, then any truth assignment that makes g false also makes gf
false.

for example, the formula consisting of a single variable p is false-decreasing
since p f is the formula false. the formula g wwd p is not false-decreasing since
gf is the formula false which is true even under a truth assignment where g is
false.

prove by structural induction that every mvao formula f is false-decreasing.

homework problems
problem 7.29. (a) give a recursive de   nition of a function erase.e/ that erases all
the symbols in e 2 aexp but the brackets. for example

erase.[ [ 3 * [ x * x] ] + [ [ 2 * x] + 1] ] / d [ [ [ ] ] [ [ 2 * x] + 1] ] :

(b) prove that erase.e/ 2 recmatch for all e 2 aexp.
(c) give an example of a small string s 2 recmatch such that [ s]    erase.e/ for
any e 2 aexp.

   mcs        2017/6/5     19:42     page 254     #262

254

chapter 7 recursive data types

problems for section 7.5

practice problems
problem 7.30.
in the game tree for the game tic-tac-toe, the root has nine children corresponding
to the nine boxes that the    rst player could mark with an    x   .

each of these nine nodes will have eight children in the second level of the tree,

indicating where the second player can mark his    o   , giving a total of 72 nodes.

answer the following questions about the game tree for tic-tac-toe.

(a) how many nodes will be in the third level of the tree?

(b) what is the    rst level where this simple pattern of calculating nodes stops
working?

homework problems
problem 7.31.
we   re going to characterize a large category of games as a recursive data type and
then prove, by structural induction, a fundamental theorem about game strategies.
we are interested in two person games of perfect information that end with a nu-
merical score. chess and checkers would count as value games using the values
1;(cid:0)1; 0 for a win, loss or draw for the    rst player. the game of go really does end
with a score based on the number of white and black stones that remain at the end.

here   s the formal de   nition:

de   nition. let v be a nonempty set of real numbers. the class vg of v -valued
two-person deterministic games of perfect information is de   ned recursively as fol-
lows:
base case: a value v 2 v is a vg known as a payoff.
constructor case: if g is a nonempty set of vg   s, then g is a vg. each game
m 2 g is called a possible    rst move of g.
a strategy for a player is a rule that tells the player which move to make when-
ever it is their turn. that is, a strategy is a function s from games to games with the
property that s.g/ 2 g for all games g. given which player has the    rst move, a
pair of strategies for the two players determines exactly which moves the players
will choose. so the strategies determine a unique play of the game and a unique

   mcs        2017/6/5     19:42     page 255     #263

7.6. induction in computer science

255

payoff.7

the max-player wants a strategy that guarantees as high a payoff as possible,

and the min-player wants a strategy that guarantees as low a payoff as possible.

the fundamental theorem for deterministic games of perfect information says
that in any game, each player has an optimal strategy, and these strategies lead to
the same payoff. more precisely,

theorem (fundamental theorem for vg   s). let v be a    nite set of real numbers
and g be a v -valued vg. then there is a value v 2 v , called a max-value maxg
for g, such that if the max-player moves    rst,

(cid:15) the max-player has a strategy that will    nish with a payoff of at least maxg,
no matter what strategy the min-player uses, and
(cid:15) the min-player has a strategy that will    nish with a payoff of at most maxg,
no matter what strategy the max-player uses.

it   s worth a moment for the reader to observe that the de   nition of maxg implies
that if there is one for g, it is unique. so if the max-player has the    rst move,
the fundamental theorem means that there   s no point in playing the game: the
min-player may just as well pay the max-value to the max-player.
(a) prove the fundamental theorem for vg   s.
hint: vg   s are a recursively de   ned data type, so the basic method for proving that
all vg   s have some property is structural induction on the de   nition of vg. since
the min-player moves    rst in whichever game the max-player picks for their    rst
move, the induction hypothesis will need to cover that case as well.

(b) (optional). state some reasonable generalization of the fundamental the-
orem to games with an in   nite set v of possible payoffs.

problem 7.32.
nim is a two-person game that starts with some piles of stones. a player   s move
consists of removing one or more stones from a single pile. the players alternate
making moves, and whoever takes the last stone wins.

it turns out there is a winning strategy for one of the players that is easy to carry

out but is not so obvious.

7we take for granted the fact that no vg has an in   nite play. the proof of this by structural

induction is essentially the same as that for win-lose games given in lemma 7.5.2.

   mcs        2017/6/5     19:42     page 256     #264

256

chapter 7 recursive data types

to explain the winning strategy, we need to think of a number in two ways: as
a nonnegative integer and as the bit string equal to the binary representation of the
number   possibly with leading zeroes.

for example, the xor of numbers r; s; ::: is de   ned in terms of their binary repre-
sentations: combine the corresponding bits of the binary representations of r; s; :::
using xor, and then interpret the resulting bit-string as a number. for example,

2 xor 7 xor 9 d 12
because, taking xor   s down the columns, we have

0 0 1 0 (binary rep of 2)
0 1 1 1 (binary rep of 7)
1 0 0 1 (binary rep of 9)
1 1 0 0 (binary rep of 12)

this is the same as doing binary addition of the numbers, but throwing away the

carries (see problem 3.6).

the xor of the numbers of stones in the piles is called their nim sum. in this
problem we will verify that if the nim sum is not zero on a player   s turn, then the
player has a winning strategy. for example, if the game starts with    ve piles of
equal size, then the    rst player has a winning strategy, but if the game starts with
four equal-size piles, then the second player can force a win.
(a) prove that if the nim sum of the piles is zero, then any one move will leave a
nonzero nim sum.

(b) prove that if there is a pile with more stones than the nim sum of all the other
piles, then there is a move that makes the nim sum equal to zero.

(c) prove that if the nim sum is not zero, then one of the piles is bigger than the
nim sum of the all the other piles.
hint: notice that the largest pile may not be the one that is bigger than the nim
sum of the others; three piles of sizes 2,2,1 is an example.

(d) conclude that if the game begins with a nonzero nim sum, then the    rst player
has a winning strategy.
hint: describe a preserved invariant that the    rst player can maintain.

(e) (extra credit) nim is sometimes played with winners and losers reversed, that
is, the person who takes the last stone loses. this is called the mis`ere version of the
game. use ideas from the winning strategy above for regular play to    nd one for
mis`ere play.

8

   mcs        2017/6/5     19:42     page 257     #265

in   nite sets
this chapter is about in   nite sets and some challenges in proving things about
them.

wait a minute! why bring up in   nity in a mathematics for computer science
text? after all, any data set in a computer is limited by the size of the computer   s
memory, and there is a bound on the possible size of computer memory, for the
simple reason that the universe is (or at least appears to be) bounded. so why not
stick with    nite sets of some large, but bounded, size? this is a good question, but
let   s see if we can persuade you that dealing with in   nite sets is inevitable.

you may not have noticed, but up to now you   ve already accepted the routine use
of the integers, the rationals and irrationals, and sequences of them. these are all
in   nite sets. further, do you really want physics or the other sciences to give up the
real numbers on the grounds that only a bounded number of bounded measurements
can be made in a bounded universe? it   s pretty convincing   and a lot simpler   to
ignore such big and uncertain bounds (the universe seems to be getting bigger all
the time) and accept theories using real numbers.

likewise in computer science, it   s implausible to think that writing a program to
add nonnegative integers with up to as many digits as, say, the stars in the sky   
billions of galaxies each with billions of stars   would be different from writing a
program that would add any two integers, no matter how many digits they had. the
same is true in designing a compiler: it   s neither useful nor sensible to make use of
the fact that in a bounded universe, only a bounded number of programs will ever
be compiled.

in   nite sets also provide a nice setting to practice proof methods, because it   s
harder to sneak in unjusti   ed steps under the guise of intuition. and there has
been a truly astonishing outcome of studying in   nite sets. their study led to the
discovery of fundamental, logical limits on what computers can possibly do. for
example, in section 8.2, we   ll use reasoning developed for in   nite sets to prove
that it   s impossible to have a perfect type-checker for a programming language.

so in this chapter, we ask you to bite the bullet and start learning to cope with

in   nity.

   mcs        2017/6/5     19:42     page 258     #266

258

chapter 8 in   nite sets

8.1 in   nite cardinality

in the late nineteenth century, the mathematician georg cantor was studying the
convergence of fourier series and found some series that he wanted to say con-
verged    most of the time,    even though there were an in   nite number of points
where they didn   t converge. as a result, cantor needed a way to compare the size
of in   nite sets. to get a grip on this, he got the idea of extending the mapping rule
theorem 4.5.4 to in   nite sets: he regarded two in   nite sets as having the    same
size    when there was a bijection between them. likewise, an in   nite set a should
be considered    as big as    a set b when a surj b. so we could consider a to be
   strictly smaller    than b, which we abbreviate as a strict b, when a is not    as big
as    b:

de   nition 8.1.1.

a strict b iff

not.a surj b/.

on    nite sets, this strict relation really does mean    strictly smaller.    this follows

immediately from the mapping rule theorem 4.5.4.

corollary 8.1.2. for    nite sets a; b,

a strict b iff

jaj < jbj:

proof.

a strict b iff
iff
iff

not.a surj b/
not.jaj (cid:21) jbj/
jaj < jbj:

(def 8.1.1)
(theorem 4.5.4.(4.5))

(cid:4)

cantor got diverted from his study of fourier series by his effort to develop a
theory of in   nite sizes based on these ideas. his theory ultimately had profound
consequences for the foundations of mathematics and computer science. but can-
tor made a lot of enemies in his own time because of his work: the general mathe-
matical community doubted the relevance of what they called    cantor   s paradise   
of unheard-of in   nite sizes.

a nice technical feature of cantor   s idea is that it avoids the need for a de   nition

of what the    size    of an in   nite set might be   all it does is compare    sizes.   

warning: we haven   t, and won   t, de   ne what the    size    of an in   nite set is.
the de   nition of in   nite    sizes    requires the de   nition of some in   nite sets called

   mcs        2017/6/5     19:42     page 259     #267

8.1. in   nite cardinality

259

ordinals with special well-ordering properties. the theory of ordinals requires get-
ting deeper into technical set theory than we need to go, and we can get by just
   ne without de   ning in   nite sizes. all we need are the    as big as    and    same size   
relations, surj and bij, between sets.

but there   s something else to watch out for: we   ve referred to surj as an    as big
as    relation and bij as a    same size    relation on sets. of course, most of the    as big
as    and    same size    properties of surj and bij on    nite sets do carry over to in   nite
sets, but some important ones don   t   as we   re about to show. so you have to be
careful: don   t assume that surj has any particular    as big as    property on in   nite
sets until it   s been proven.

let   s begin with some familiar properties of the    as big as    and    same size   

relations on    nite sets that do carry over exactly to in   nite sets:

lemma 8.1.3. for any sets a; b; c ,

1. a surj b iff b inj a.

2. if a surj b and b surj c , then a surj c .

3. if a bij b and b bij c , then a bij c .

4. a bij b iff b bij a.
part 1. follows from the fact that r has the     1 out;(cid:21) 1 in   surjective function
(cid:0)1 has the   (cid:21) 1 out;  1 in   total, injective property. part 2. follows
property iff r
from the fact that compositions of surjections are surjections. parts 3. and 4. fol-
(cid:0)1 are surjective
low from the    rst two parts because r is a bijection iff r and r
functions. we   ll leave veri   cation of these facts to problem 4.21.

another familiar property of    nite sets carries over to in   nite sets, but this time

some real ingenuity is needed to prove it:

theorem 8.1.4. [schr  oder-bernstein] for any sets a; b, if a surj b and b surj a,
then a bij b.

that is, the schr  oder-bernstein theorem says that if a is at least as big as b
and conversely, b is at least as big as a, then a is the same size as b. phrased
this way, you might be tempted to take this theorem for granted, but that would be
a mistake. for in   nite sets a and b, the schr  oder-bernstein theorem is actually
pretty technical. just because there is a surjective function f w a ! b   which
need not be a bijection   and a surjective function g w b ! a   which also need
not be a bijection   it   s not at all clear that there must be a bijection e w a ! b. the
idea is to construct e from parts of both f and g. we   ll leave the actual construction
to problem 8.12.

   mcs        2017/6/5     19:42     page 260     #268

260

chapter 8 in   nite sets

another familiar set property is that for any two sets, either the    rst is at least
as big as the second, or vice-versa. for    nite sets this follows trivially from the
mapping rule. it   s actually still true for in   nite sets, but assuming it is obvious
would be mistaken again.

theorem 8.1.5. for all sets a; b,

a surj b or b surj a:

theorem 8.1.5 lets us prove that another basic property of    nite sets carries over

to in   nite ones:

lemma 8.1.6.

implies

for all sets a; b; c .

proof. (of lemma 8.1.6)

a strict b and b strict c

(8.1)

a strict c

suppose 8.1 holds, and assume for the sake of contradiction that not.a strict
c /, which means that a surj c . now since b strict c , theorem 8.1.5 lets us
conclude that c surj b. so we have

a surj c and c surj b;

and lemma 8.1.3.2 lets us conclude that a surj b, contradicting the fact that
(cid:4)
a strict b.

we   re omitting a proof of theorem 8.1.5 because proving it involves technical
set theory   typically the theory of ordinals again   that we   re not going to get into.
but since proving lemma 8.1.6 is the only use we   ll make of theorem 8.1.5, we
hope you won   t feel cheated not to see a proof.

in   nity is different

8.1.1
a basic property of    nite sets that does not carry over to in   nite sets is that adding
something new makes a set bigger. that is, if a is a    nite set and b     a, then
ja [ fbgj d jaj c 1, and so a and a [ fbg are not the same size. but if a is
in   nite, then these two sets are the same size!
lemma 8.1.7. let a be a set and b     a. then a is in   nite iff a bij a [ fbg.

   mcs        2017/6/5     19:42     page 261     #269

8.1. in   nite cardinality

261

proof. since a is not the same size as a [ fbg when a is    nite, we only have to
show that a [ fbg is the same size as a when a is in   nite.
that is, we have to    nd a bijection between a [ fbg and a when a is in   nite.
here   s how: since a is in   nite, it certainly has at least one element; call it a0. but
since a is in   nite, it has at least two elements, and one of them must not equal to
a0; call this new element a1. but since a is in   nite, it has at least three elements,
one of which must not equal both a0 and a1; call this new element a2. continuing
in this way, we conclude that there is an in   nite sequence a0; a1; a2; : : : ; an; : : : of
different elements of a. now it   s easy to de   ne a bijection e w a [ fbg ! a:

e.b/ wwd a0;
e.an/ wwd anc1
e.a/ wwd a

for n 2 n;
for a 2 a (cid:0) fb; a0; a1; : : :g:

(cid:4)

8.1.2 countable sets
a set c is countable iff its elements can be listed in order, that is, the elements in
c are precisely the elements in the sequence

c0; c1; : : : ; cn; : : : :

assuming no repeats in the list, saying that c can be listed in this way is formally
the same as saying that the function, f w n ! c de   ned by the rule that f .i /wwdci,
is a bijection.
de   nition 8.1.8. a set c is countably in   nite iff n bij c . a set is countable iff it
is    nite or countably in   nite. a set is uncountable iff it is not countable.

we can also make an in   nite list using just a    nite set of elements if we allow
repeats. for example, we can list the elements in the three-element set f2; 4; 6g as

2; 4; 6; 6; 6; : : : :

this simple observation leads to an alternative characterization of countable sets
that does not make separate cases of    nite and in   nite sets. namely, a set c is
countable iff there is a list

c0; c1; : : : ; cn; : : :

of the elements of c , possibly with repeats.
lemma 8.1.9. a set c is countable iff n surj c . in fact, a nonempty set c is
countable iff there is a total surjective function g w n ! c .

   mcs        2017/6/5     19:42     page 262     #270

262

chapter 8 in   nite sets

the proof is left to problem 8.13.
the most fundamental countably in   nite set is the set n itself. but the set z of
all integers is also countably in   nite, because the integers can be listed in the order:

in this case, there is a simple formula for the nth element of the list (8.2). that is,
the bijection f w n ! z such that f .n/ is the nth element of the list can be de   ned
as:

0;(cid:0)1; 1;(cid:0)2; 2;(cid:0)3; 3; : : : :
(
if n is even;
(cid:0).n c 1/=2 if n is odd:

n=2

f .n/ wwd

(8.2)

there is also a simple way to list all pairs of nonnegative integers, which shows
that .n (cid:2) n/ is also countably in   nite (problem 8.23). from this, it   s a small
step to reach the conclusion that the set q(cid:21)0 of nonnegative rational numbers is
countable. this may be a surprise   after all, the rationals densely    ll up the space
between integers, and for any two, there   s another in between. so it might seem as
though you couldn   t write out all the rationals in a list, but problem 8.11 illustrates
how to do it. more generally, it is easy to show that countable sets are closed under
unions and products (problems 8.22 and 8.23) which implies the countability of a
bunch of familiar sets:
corollary 8.1.10. the following sets are countably in   nite:

zc

; z; n (cid:2) n; qc

; z (cid:2) z; q:

a small modi   cation of the proof of lemma 8.1.7 shows that countably in   nite

sets are the    smallest    in   nite sets. namely,
lemma 8.1.11. if a is an in   nite set, and b is countable, then a surj b.

we leave the proof to problem 8.10.
also, since adding one new element to an in   nite set doesn   t change its size,
you can add any    nite number of elements without changing the size by simply
adding one element after another. something even stronger is true: you can add a
countably in   nite number of new elements to an in   nite set and still wind up with
just a set of the same size (problem 8.15).

by the way, it   s a common mistake to think that, because you can add any    nite
number of elements to an in   nite set and have a bijection with the original set, that
you can also throw in in   nitely many new elements. in general it isn   t true that just
because it   s ok to do something any    nite number of times, it   s also ok to do it an
in   nite number of times. for example, starting from 3, you can increment by 1 any
   nite number of times, and the result will be some integer greater than or equal to
3. but if you increment an in   nite number of times, you don   t get an integer at all.

   mcs        2017/6/5     19:42     page 263     #271

8.1. in   nite cardinality

263

8.1.3 power sets are strictly bigger
cantor   s astonishing discovery was that not all in   nite sets are the same size. in
particular, he proved that for any set a the power set pow.a/ is    strictly bigger   
than a. that is,

theorem 8.1.12. [cantor] for any set a,

a strict pow.a/:

proof. to show that a is strictly smaller than pow.a/, we have to show that if g is
a function from a to pow.a/, then g is not a surjection. since any partial function
with nonempty codomain can be extended to a total function with the same range
(reader: ask yourself how), we can safely assume that g is total.
to show that g is not a surjection, we   ll simply    nd a subset ag   a that is not
in the range of g. the idea is, for any element a 2 a, to look at the set g.a/   a
and ask whether or not a happens to be in g.a/. first, de   ne

ag wwd fa 2 a j a     g.a/g:

ag is a well-de   ned subset of a, which means it is a member of pow.a/. but ag
can   t be in the range of g, because it differs at a from each set g.a/ in the range of
g.

to spell this out more, suppose to the contrary that ag was in the range of g, that

is,
for some a0 2 a. now by de   nition of ag,
iff a 2 ag

a 2 g.a0/

ag d g.a0/

iff a     g.a/

for all a 2 a. now letting a d a0 yields the contradiction
iff a0     g.a0/:

a0 2 g.a0/

so g is not a surjection, because there is an element in the power set of a, speci   -
(cid:4)
cally the set ag, that is not in the range of g.

cantor   s theorem immediately implies:
corollary 8.1.13. pow.n/ is uncountable.
proof. by lemma 8.1.9, u is uncountable iff n strict u .

(cid:4)

   mcs        2017/6/5     19:42     page 264     #272

264

chapter 8 in   nite sets

the bijection between subsets of an n-element set and the length n bit-strings
f0; 1gn used to prove theorem 4.5.5, carries over to a bijection between subsets of
a countably in   nite set and the in   nite bit-strings, f0; 1g!. that is,

pow.n/ bij f0; 1g!:

this immediately implies
corollary 8.1.14. f0; 1g! is uncountable.
more countable and uncountable sets
once we have a few sets we know are countable or uncountable, we can get lots
more examples using lemma 8.1.3. in particular, we can appeal to the following
immediate corollary of the lemma:

corollary 8.1.15.

(a) if u is an uncountable set and a surj u , then a is uncountable.

(b) if c is a countable set and c surj a, then a is countable.
for example, now that we know that the set f0; 1g! of in   nite bit strings is un-
countable, it   s a small step to conclude that
corollary 8.1.16. the set r of real numbers is uncountable.

to prove this, think about the in   nite decimal expansion of a real number:

p
2 d 1:4142 : : : ;
5 d 5:000 : : : ;
1=10 d 0:1000 : : : ;
1=3 d 0:333 : : : ;
1=9 d 0:111 : : : ;

d 4:010101 : : : :

4

1

99

let   s map any real number r to the in   nite bit string b.r/ equal to the sequence
of bits in the decimal expansion of r, starting at the decimal point. if the decimal
expansion of r happens to contain a digit other than 0 or 1, leave b.r/ unde   ned.

   mcs        2017/6/5     19:42     page 265     #273

8.1. in   nite cardinality

for example,

265

b.5/ d 000 : : : ;
b.1=10/ d 1000 : : : ;
b.1=9/ d 111 : : : ;

1

b.4

/ d 010101 : : :
p
2/; b.1=3/ are unde   ned:

99

b.

now b is a function from real numbers to in   nite bit strings.1
function, but it clearly is a surjection. this shows that

it is not a total

r surj f0; 1g!;

and the uncountability of the reals now follows by corollary 8.1.15.(a).

for another example, let   s prove
corollary 8.1.17. the set .zc
able.

/

(cid:3) of all    nite sequences of positive integers is count-

to prove this, think about the prime factorization of a nonnegative integer:

20 d 22 (cid:1) 30 (cid:1) 51 (cid:1) 70 (cid:1) 110 (cid:1) 130 (cid:1)(cid:1)(cid:1) ;
6615 d 20 (cid:1) 33 (cid:1) 51 (cid:1) 72 (cid:1) 110 (cid:1) 130 (cid:1)(cid:1)(cid:1) :

let   s map any nonnegative integer n to the    nite sequence e.n/ of nonzero expo-
nents in its prime factorization. for example,
e.20/ d .2; 1/;
e.6615/ d .3; 1; 2/;

e.513 (cid:1) 119 (cid:1) 47817 (cid:1) 10344/ d .13; 9; 817; 44/;

e.1/ d (cid:21);
e.0/ is unde   ned:

(the empty string)

1some rational numbers can be expanded in two ways   as an in   nite sequence ending in all 0   s

or as an in   nite sequence ending in all 9   s. for example,

5 d 5:000(cid:1)(cid:1)(cid:1) d 4:999 : : : ;
d 0:1000(cid:1)(cid:1)(cid:1) d 0:0999 : : : :

1

10

in such cases, de   ne b.r/ to be the sequence that ends with all 0   s.

   mcs        2017/6/5     19:42     page 266     #274

266

chapter 8 in   nite sets

now e is a function from n to .zc
/
clearly is a surjection. this shows that

(cid:3). it is de   ned on all positive integers, and it

n surj .zc

/

(cid:3)

;

and the countability of the    nite strings of positive integers now follows by corol-
lary 8.1.15.(b).

larger in   nities
there are lots of different sizes of in   nite sets. for example, starting with the
in   nite set n of nonnegative integers, we can build the in   nite sequence of sets
n strict pow.n/ strict pow.pow.n// strict pow.pow.pow.n/// strict : : : :

by cantor   s theorem 8.1.12, each of these sets is strictly bigger than all the pre-
ceding ones. but that   s not all: the union of all the sets in the sequence is strictly
bigger than each set in the sequence (see problem 8.14). in this way you can keep
going inde   nitely, building    bigger    in   nities all the way.

8.1.4 diagonal argument
theorem 8.1.12 and similar proofs are collectively known as    diagonal arguments   
because of a more intuitive version of the proof described in terms of on an in   nite
square array. namely, suppose there was a bijection between n and f0; 1g!. if such
a relation existed, we would be able to display it as a list of the in   nite bit strings
in some countable order or another. once we   d found a viable way to organize
this list, any given string in f0; 1g! would appear in a    nite number of steps, just
as any integer you can name will show up a    nite number of steps from 0. this
hypothetical list would look something like the one below, extending to in   nity
both vertically and horizontally:

a0 d 1 0 0 0 1 1 (cid:1)(cid:1)(cid:1)
a1 d 0 1 1 1 0 1 (cid:1)(cid:1)(cid:1)
a2 d 1 1 1 1 1 1 (cid:1)(cid:1)(cid:1)
a3 d 0 1 0 0 1 0 (cid:1)(cid:1)(cid:1)
a4 d 0 0 1 0 0 0 (cid:1)(cid:1)(cid:1)
a5 d 1 0 0 1 1 1 (cid:1)(cid:1)(cid:1)
:::
: : :

:::

:::

:::

:::

:::

:::

   mcs        2017/6/5     19:42     page 267     #275

8.2. the halting problem

267

but now we can exhibit a sequence that   s missing from our allegedly complete list
of all the sequences. look at the diagonal in our sample list:
a0 d 1 0 0 0 1 1 (cid:1)(cid:1)(cid:1)
a1 d 0 1 1 1 0 1 (cid:1)(cid:1)(cid:1)
a2 d 1 1 1 1 1 1 (cid:1)(cid:1)(cid:1)
a3 d 0 1 0 0 1 0 (cid:1)(cid:1)(cid:1)
a4 d 0 0 1 0 0 0 (cid:1)(cid:1)(cid:1)
a5 d 1 0 0 1 1 1 (cid:1)(cid:1)(cid:1)
:::
: : :

:::

:::

:::

:::

:::

:::

here is why the diagonal argument has its name: we can form a sequence d con-
sisting of the bits on the diagonal.

d d 1 1 1 0 0 1 (cid:1)(cid:1)(cid:1);

then, we can form another sequence by switching the 1   s and 0   s along the diago-
nal. call this sequence c :

c d 0 0 0 1 1 0 (cid:1)(cid:1)(cid:1):

now if the nth term of an is 1 then the nth term of c is 0, and vice versa, which
guarantees that c differs from an. in other words, c has at least one bit different
from every sequence on our list. so c is an element of f0; 1g! that does not appear
in our list   our list can   t be complete!
this diagonal sequence c corresponds to the set fa 2 a j a     g.a/g in the
proof of theorem 8.1.12. both are de   ned in terms of a countable subset of the
uncountable in   nity in a way that excludes them from that subset, thereby proving
that no countable subset can be as big as the uncountable set.

8.2 the halting problem

although towers of larger and larger in   nite sets are at best a romantic concern for
a computer scientist, the reasoning that leads to these conclusions plays a critical
role in the theory of computation. diagonal arguments are used to show that lots of
problems can   t be solved by computation, and there is no getting around it.

this story begins with a reminder that having procedures operate on programs
is a basic part of computer science technology. for example, compilation refers to
taking any given program text written in some    high level    programming language

   mcs        2017/6/5     19:42     page 268     #276

268

chapter 8 in   nite sets

like java, c++, python, . . . , and then generating a program of low-level instruc-
tions that does the same thing but is targeted to run well on available hardware.
similarly, interpreters or virtual machines are procedures that take a program text
designed to be run on one kind of computer and simulate it on another kind of com-
puter. routine features of compilers involve    type-checking    programs to ensure
that certain kinds of run-time errors won   t happen, and    optimizing    the generated
programs so they run faster or use less memory.

the fundamental thing that just can   t be done by computation is a perfect job of
type-checking, optimizing, or any kind of analysis of the overall run time behavior
of programs. in this section, we   ll illustrate this with a basic example known as
the halting problem. pick your favorite programming language   python, java,
c++,. . .    and assume that    program    refers to a program written in your language.
once a program is started, if its initial computation stops for some reason   such
as producing a    nal value, waiting for an input, suffering an error interrupt, or sim-
ply freezing   the program is said to halt. so a program that does not halt would run
forever using up cycles and energy (unless it was interrupted by an external operat-
ing system command). the halting problem is the general problem of determining,
given an arbitrary program, whether or not the program halts.

there is a simple way to determine when an arbitrary program does halt, at least
in theory: just run it until it stops. well not quite. just running the program in the
usual way would not detect when it freezes without warning. what really needs to
be done is to simulate the program using an interpreter or a virtual machine that
will recognize any kind of halting, including a freeze. but interpreters and virtual
machines capable of simulating any program are familiar technology. so there is a
general way to detect when a program halts.

the hard part is determining when a program does not halt. at any point in sim-
ulating it, you generally won   t know whether to continue the simulation because
the program will halt later, or to abort the simulation because it wouldn   t stop oth-
erwise.

so is there some way besides simulation to detect when a program does not
halt? could there be some program analysis tool that could inspect any program
and correctly report when the program does not halt? the answer is    no.    using
a standard diagonal argument, we will prove that it is impossible to have such a
non-halting analysis tool. any method for detecting non-halting is bound to go
wrong. it will falsely report that some halting program does not halt, or it will fail
to report anything about some program. that is, there will be a program on which
the analyzer runs forever without halting.

to set up the diagonal argument, we will focus on string procedures. a string
procedure is a procedure that takes a single argument that is supposed to be a string

   mcs        2017/6/5     19:42     page 269     #277

8.2. the halting problem

269

over the 256 character ascii alphabet. as a simple example, you might think about
how to write a string procedure that halts precisely when it is applied to a double
letter string in ascii
, namely, a string in which every character occurs twice in a
row. for example, aacc33, and zz++ccbb are double letter strings, but aa;bb,
b33, and aaaaa are not.

(cid:3)

when the computation of a procedure applied to a string halts, the procedure will
be said to recognize the string. in this context, a set of strings a commonly called a
(formal) language. we let lang.p / to be the language recognized by procedure p :

lang.p /wwdfs 2 ascii

(cid:3) j p applied to s haltsg:

a language is called recognizable when it equals lang.p / for some string pro-
cedure p . for example, we   ve just agreed that the set of double letter strings is
recognizable.

there is no harm in assuming that every program can be written as a string in
(cid:3)
   that   s typically how we would enter them into a computer in the    rst
ascii
(cid:3)
place. when a string s 2 ascii
is actually the ascii description of some string
procedure, we   ll refer to that string procedure as ps. you can think of ps as the
result of compiling s into something executable.2 it   s technically helpful to treat
(cid:3)
every string in ascii
as a program for a string procedure. so when a string
(cid:3)
s 2 ascii
doesn   t parse as a proper string procedure, we   ll de   ne ps to be some
default string procedure   say one that never halts on anything it is applied to.

focusing just on string procedures, the general halting problem is to decide,
given strings s and t, whether or not the procedure ps recognizes t. following the
usual diagonal approach, we de   ne the language no-halt:
de   nition 8.2.1.

no-halt wwd fs j ps applied to s does not haltg d fs     lang.ps/g:

(8.3)

so if ps is the recognizer for some language, then no-halt differs from that lan-

guage on the string s. this shows that no-halt cannot have a recognizer:
theorem 8.2.2. no-halt is not recognizable.

let   s spell out the reasoning behind this theorem more fully. by de   nition, we

have

s 2 no-halt iff s     lang.ps/;

(8.4)
2the string s 2 ascii(cid:3) and the procedure ps have to be distinguished to avoid a type error:
you can   t apply a string to string. for example, let s be the string that you wrote as your program
to recognize the double letter strings. applying s to a string argument, say aabbccdd, should
throw a type exception; what you need to do is compile s to the procedure ps and then apply ps to
aabbccdd.

   mcs        2017/6/5     19:42     page 270     #278

270

chapter 8 in   nite sets

(cid:3)
for all strings s 2 ascii
now suppose to the contrary that no-halt was recognizable. this means there is

.

some procedure ps0 that recognizes no-halt, that is,
no-halt d lang.ps0/ :

combined with (8.4), we have

(cid:3)
for all s 2 ascii

s 2 lang.ps0/

s     lang.ps/

(8.5)
. now letting s d s0 in (8.5) yields the immediate contradiction

iff

s0 2 lang.ps0/

s0     lang.ps0/ :

iff

so that does it: the reasoning above applied to whatever favorite programming
language you picked. it is logically impossible for a java program to be a recognizer
for non-halting java programs, or for a python program to be a recognizer for non-
halting python programs, and so forth for other favorite programming languages.

now you might wonder if there was a loophole around this logical limitation
by having a recognizer the non-halting programs in one language that was written
in another language. in other words, could there be a c++ procedure that recog-
nizes all the non-halting java programs? after all, c++ does allow more intimate
manipulation of computer memory than java does. but there is no loophole here.
if you   ve learned about programming language implementation, you will realize
that it   s possible to write a simulator in java for c++ programs. this means that if
there were a c++ procedure that recognized non-halting java programs, then a java
procedure could also do it by simulating the c++ program, and that   s impossible.
this reasoning    nally leads to a transcendent insight. no procedure can be written
in any programming language that recognizes no-halt for your favorite language.
recognizing no-halt is simply beyond the capacity of computation.

but it   s not just no-halt. if there was a perfect recognizer for any property that
depends on the complete run time behavior programs,3 it could be altered slightly
to become a recognizer for no-halt. we   ll take this claim for granted now, giving
its full justi   cation in an assigned problem.

for example, most compilers do    static    type-checking at compile time to ensure
that programs won   t make run-time type errors. a program that type-checks is
guaranteed not to cause a run-time type-error. but given that it   s impossible to
recognize when the complete run time behavior of a program does not lead to a

3 the weasel words    complete run time behavior    creep in here to rule out some run time prop-
erties that are easy to recognize because they depend only on part of the run time behavior. for
example, the set of programs that halt after executing at most 100 instructions is recognizable.

   mcs        2017/6/5     19:42     page 271     #279

8.3. the logic of sets

271

type-error, it follows that the type-checker must be rejecting programs that really
wouldn   t cause a type-error. the conclusion is that no type-checker is perfect   you
can always do better!

it   s a different story if we think about the practical possibility of writing pro-
gram analyzers. the fact that it   s logically impossible to analyze utterly arbitrary
programs does not mean that you can   t do a very good job analyzing interesting pro-
grams that come up in practice. in fact, these    interesting    programs are commonly
intended to be analyzable in order to con   rm that they do what they   re supposed to
do.

in the end, it   s not clear how much of a hurdle this theoretical limitation implies
in practice. but the theory does provide some perspective on claims about general
analysis methods for programs. the theory tells us that people who make such
claims either
(cid:15) are exaggerating the power (if any) of their methods, perhaps to make a sale
or get a grant, or
(cid:15) are trying to keep things simple by not going into technical limitations they   re
aware of, or
(cid:15) perhaps most commonly, are so excited about some useful practical successes
of their methods that they haven   t bothered to think about the limitations
which must be there.

so from now on, if you hear people making claims about having general program
analysis/veri   cation/optimization methods, you   ll know they can   t be telling the
whole story.

8.3 the logic of sets

8.3.1 russell   s paradox
reasoning naively about sets turns out to be risky. in fact, one of the earliest at-
tempts to come up with precise axioms for sets in the late nineteenth century by
the logician gotlob frege, was shot down by a three line argument known as rus-
sell   s paradox4 which reasons in nearly the same way as the proof of cantor   s
4bertrand russell was a mathematician/logician at cambridge university at the turn of the twen-
tieth century. he reported that when he felt too old to do mathematics, he began to study and write
about philosophy, and when he was no longer smart enough to do philosophy, he began writing about
politics. he was jailed as a conscientious objector during world war i. for his extensive philosophical
and political writing, he won a nobel prize for literature.

   mcs        2017/6/5     19:42     page 272     #280

272

chapter 8 in   nite sets

theorem 8.1.12. this was an astonishing blow to efforts to provide an axiomatic
foundation for mathematics:

russell   s paradox

let s be a variable ranging over all sets, and de   ne

so by de   nition,

w wwd fs j s 62 sg:

s 2 w iff s 62 s;

for every set s. in particular, we can let s be w , and obtain the
contradictory result that

w 2 w iff w 62 w:

the simplest reasoning about sets crashes mathematics! russell and his col-
league whitehead spent years trying to develop a set theory that was not contra-
dictory, but would still do the job of serving as a solid logical foundation for all of
mathematics.

actually, a way out of the paradox was clear to russell and others at the time:
it   s unjusti   ed to assume that w is a set. the step in the proof where we let s be
w has no justi   cation, because s ranges over sets, and w might not be a set. in
fact, the paradox implies that w had better not be a set!

but denying that w is a set means we must reject the very natural axiom that
every mathematically well-de   ned collection of sets is actually a set. the prob-
lem faced by frege, russell and their fellow logicians was how to specify which
well-de   ned collections are sets. russell and his cambridge university colleague
whitehead immediately went to work on this problem. they spent a dozen years
developing a huge new axiom system in an even huger monograph called prin-
cipia mathematica, but for all intents and purposes, their approach failed. it was
so cumbersome no one ever used it, and it was subsumed by a much simpler, and
now widely accepted, axiomatization of set theory by the logicians zermelo and
fraenkel.

   mcs        2017/6/5     19:42     page 273     #281

8.3. the logic of sets

273

8.3.2 the zfc axioms for sets
a formula of set theory5 is a predicate formula that only talks about membership
in sets. that is, a    rst-order formula of set theory is built using logical connectives
and quanti   ers starting solely from expressions of the form    x 2 y.    the domain
of discourse is the collection of sets, and    x 2 y    is interpreted to mean that x and
y are variables that range over sets, and x is one of the elements in y.
formulas of set theory are not even allowed to have the equality symbol    d,    but
sets are equal iff they have the same elements, so there is an easy way to express
equality of sets purely in terms of membership:

.x d y/ wwd 8z: .z 2 x iff z 2 y/:

(8.6)
similarly, the subset symbol         is not allowed in formulas of set theory, but we
can also express subset purely in terms of membership:

.x   y/ wwd 8z: .z 2 x implies z 2 y/:

(8.7)
so formulas using symbols    d; ,    in addition to    2    can be understood as
abbreviations for formulas only using    2.    we won   t worry about this distinction
between formulas and abbreviations for formulas   we   ll now just call them all
   formulas of set theory.    for example,

x d y iff   x   y and y   x  

is a formula of set theory that explains a basic connection between set equality and
set containment.

it   s generally agreed that essentially all of mathematics can be derived from a
few formulas of set theory, called the axioms of zermelo-fraenkel set theory with
choice (zfc), using a few simple logical deduction rules.

we   re not going to be studying the axioms of zfc in this text, but we thought
you might like to see them   and while you   re at it, get some more practice reading
and writing quanti   ed formulas:

extensionality. two sets are equal iff they are members of the same sets:

x d y iff .8z: x 2 z iff y 2 z/:

pairing. for any two sets x and y, there is a set fx; yg with x and y as its only

elements:

8x; y9u8z:   z 2 u iff .z d x or z d y/  

5technically this is called a pure    rst-order formula of set theory

   mcs        2017/6/5     19:42     page 274     #282

274

chapter 8 in   nite sets

union. the union u of a collection z of sets is also a set:

8z9u8x: .x 2 u/ iff .9y: x 2 y and y 2 z/

in   nity. there is an in   nite set. speci   cally, there is a nonempty set x such that

for any set y 2 x, the set fyg is also a member of x.

subset. given any set x and any de   nable property of sets, there is a set y contain-

ing precisely those elements in x that have the property.
8x9y8z: z 2 y iff   z 2 x and (cid:30).z/  

where (cid:30).z/ is a formula of set theory.6

power set. all the subsets of a set form another set:

8x9p8u: u   x iff u 2 p:

replacement. suppose a formula (cid:30) of set theory de   nes the graph of a function

on a set s, that is,

8x 2 s 8y; z:   (cid:30).x; y/ and (cid:30).x; z/   implies y d z:
then the image of s under that function is also a set t. namely,

9t8y: y 2 t iff   9x 2 s: (cid:30).x; y/  :

foundation. the aim is to forbid any in   nite sequence of sets of the form

(cid:1)(cid:1)(cid:1) 2 xn 2 (cid:1)(cid:1)(cid:1) 2 x1 2 x0

in which each set is a member of the next one. this can be captured by saying
every nonempty set has a    member-minimal    element. namely, de   ne

member-minimal.m; x/ wwd   m 2 x and 8y 2 x: y     m  :

then the foundation axiom7 is

8x: x    ; implies 9m: member-minimal.m; x/:

choice. let s be a set of nonempty, disjoint sets. then there is a set c consisting of
exactly one element from each set in s. the formula is given in problem 8.35.

6this axiom is more commonly called the comprehension axiom.
7this axiom is also called the regularity axiom.

   mcs        2017/6/5     19:42     page 275     #283

8.4. does all this really work?

275

8.3.3 avoiding russell   s paradox
these modern zfc axioms for set theory are much simpler than the system russell
and whitehead    rst came up with to avoid paradox. in fact, the zfc axioms are
as simple and intuitive as frege   s original axioms, with one technical addition: the
foundation axiom. foundation captures the intuitive idea that sets must be built up
from    simpler    sets in certain standard ways. and in particular, foundation avoids
the    paradox    of russell   s set collection w wwdfs j s     sg because it implies that
w is not a set. namely foundation implies that s 62 s for every sets s, so w is
the collection of all sets. now if w was a set, we would have w 2 w , violating
foundation.

8.4 does all this really work?

so this is where mainstream mathematics stands today: there is a handful of zfc
axioms from which virtually everything else in mathematics can be derived logi-
cally. this sounds like a rosy situation, but there are several dark clouds, suggesting
that the essence of truth in mathematics is not completely resolved.

(cid:15) the zfc axioms weren   t etched in stone by god. instead, they were mostly
made up by zermelo, who may have been a brilliant logician, but was also
a fallible human being   probably some days he forgot his house keys. so
maybe zermelo, just like frege, didn   t get his axioms right and will be
shot down by some successor to russell who will use his axioms to prove
a proposition p and its negation p . then math as we understand it would be
broken   this may sound crazy, but it has happened before.
in fact, while there is broad agreement that the zfc axioms are capable of
proving all of standard mathematics, the axioms have some further conse-
quences that sound paradoxical. for example, the banach-tarski theorem
says that, as a consequence of the axiom of choice, a solid ball can be divided
into six pieces and then the pieces can be rigidly rearranged to give two solid
balls of the same size as the original!
(cid:15) some basic questions about the nature of sets remain unresolved. for exam-
ple, cantor raised the question whether there is a set whose size is strictly
between the smallest in   nite set n (see problem 8.10) and the strictly larger
set pow.n/? cantor guessed not:

   mcs        2017/6/5     19:42     page 276     #284

276

chapter 8 in   nite sets

cantor   s contiuum hypothesis: there is no set a such that

n strict a strict pow.n/:

its
the continuum hypothesis remains an open problem a century later.
dif   culty arises from one of the deepest results in modern set theory   
discovered in part by g  odel in the 1930   s and paul cohen in the 1960   s   
namely, the zfc axioms are not suf   cient to settle the continuum hypoth-
esis: there are two collections of sets, each obeying the laws of zfc, and in
one collection the continuum hypothesis is true, and in the other it is false.
until a mathematician with a deep understanding of sets can extend zfc with
persuasive new axioms, the continuum hypothesis will remain undecided.
(cid:15) but even if we use more or different axioms about sets, there are some un-
avoidable problems. in the 1930   s, g  odel proved that, assuming that an ax-
iom system like zfc is consistent   meaning you can   t prove both p and p
for any proposition, p    then the very proposition that the system is consis-
tent (which is not too hard to express as a logical formula) cannot be proved
in the system. in other words, no consistent system is strong enough to verify
itself.

8.4.1 large in   nities in computer science
if the romance of different-size in   nities and continuum hypotheses doesn   t appeal
to you, not knowing about them is not going to limit you as a computer scientist.
these abstract issues about in   nite sets rarely come up in mainstream mathemat-
ics, and they don   t come up at all in computer science, where the focus is generally
on    countable,    and often just    nite, sets. in practice, only logicians and set the-
orists have to worry about collections that are    too big    to be sets. that   s part of
the reason that the 19th century mathematical community made jokes about    can-
tor   s paradise    of obscure in   nities. but the challenge of reasoning correctly about
this far-out stuff led directly to the profound discoveries about the logical limits of
computation described in section 8.2, and that really is something every computer
scientist should understand.

problems for section 8.1

practice problems
problem 8.1.
show that the set f0; 1g(cid:3) of    nite binary strings is countable.

   mcs        2017/6/5     19:42     page 277     #285

8.4. does all this really work?

277

problem 8.2.
describe an example of two uncountable sets a and b such that there is no bijec-
tion between a and b.

problem 8.3.
indicate which of the following assertions (there may be more than one) are equiv-
alent to

a strict n:

(cid:15) jaj is unde   ned.
(cid:15) a is countably in   nite.
(cid:15) a is uncountable.
(cid:15) a is    nite.
(cid:15) n surj a.
(cid:15) 8n 2 n, jaj   n.
(cid:15) 8n 2 n, jaj (cid:21) n.
(cid:15) 9n 2 n:jaj   n.
(cid:15) 9n 2 n:jaj < n.

problem 8.4.
prove that if there is a total injective (  (cid:21) 1 out;  1 in  ) relation from s to n, then
s is countable.

problem 8.5.
prove that if s is an in   nite set, then pow.s / is uncountable.

problem 8.6.
let a to be some in   nite set. we know from lemma 8.1.7 that

a bij .a [ fb0g/

(aub)

   mcs        2017/6/5     19:42     page 278     #286

278

chapter 8 in   nite sets

for any element b0. an easy induction implies that

a bij .a [ fb0; b1; : : : ; bng/

(aubi)

for any    nite set fb0; b1; : : : ; bng.
students sometimes assume that this implies that

a bij .a [ b/;

(8.8)
but it doesn   t. for example, (aub) is not true if a is n and b is the real numbers
r.8
a collection c of sets is called a chain when, given any two sets in c, one is a
subset of the other. a predicate p .c / is said to be    nitely continuous if, whenever

f is a chain of    nite sets, and p .f / is true for every f 2 f, then p .sf / is true.

claiming that aubi implies (aub) amounts to claiming that the predicate pa.c /
is    nitely continuous, where

pa.c / wwd a bij .a [ c /:

but it isn   t, as the example with a d n and c d r demonstrates.
brie   y explain which of the following predicates p .c / is    nitely continuous

and which not.

1. c is    nite.

2. c is uncountable.
3. c d ;.
4. there is a minimum element b 2 c \ n.
5. there is a minimum element b 2 c \ z.
6. (cid:25)=2 2 c .
7. 9(cid:15) > 08a; b 2 c \ r: ja (cid:0) bj > (cid:15).
8. c [ n is    nite.
9. c   n.
10. c (cid:26) n.
8it happens that(aub) is true if b is countable, (problem 8.15), but this is not completely obvious

and takes some proving.

   mcs        2017/6/5     19:42     page 279     #287

8.4. does all this really work?

279

11. c is countable.

problem 8.7.
prove that the set of all    nite subsets of positive integers is countable. hint: clas-
sify the subsets by the sum of their elements.

problem 8.8.
a collection c of sets is called a chain when, given any two sets in c, one is a subset

of the other. prove that if f is chain of    nite sets, thensf is countable. (notice

that without the chain condition, every set is the union of its    nite subsets.)

class problems
problem 8.9.
show that the set n(cid:3) of    nite sequences of nonnegative integers is countable.

problem 8.10. (a) several students felt the proof of lemma 8.1.7 was worrisome,
if not circular. what do you think?
(b) use the proof of lemma 8.1.7 to show that if a is an in   nite set, then a surj n,
that is, every in   nite set is    at least as big as    the set of nonnegative integers.

problem 8.11.
the rational numbers    ll the space between integers, so a    rst thought is that there
must be more of them than the integers, but it   s not true. in this problem you   ll
show that there are the same number of positive rationals as positive integers. that
is, the positive rationals are countable.
(a) de   ne a bijection between the set zc of positive integers, and the set .zc (cid:2)
zc

/ of all pairs of positive integers:

.1; 1/; .1; 2/; .1; 3/; .1; 4/; .1; 5/; : : :
.2; 1/; .2; 2/; .2; 3/; .2; 4/; .2; 5/; : : :
.3; 1/; .3; 2/; .3; 3/; .3; 4/; .3; 5/; : : :
.4; 1/; .4; 2/; .4; 3/; .4; 4/; .4; 5/; : : :
.5; 1/; .5; 2/; .5; 3/; .5; 4/; .5; 5/; : : :

:::

   mcs        2017/6/5     19:42     page 280     #288

280

chapter 8 in   nite sets

(b) conclude that the set qc of all positive rational numbers is countable.

problem 8.12.
this problem provides a proof of the [schr  oder-bernstein] theorem:

if a inj b and b inj a, then a bij b.

(8.9)
since a inj b and b inj a, there are are total injective functions f w a ! b
and g w b ! a.
assume for simplicity that a and b have no elements in common. let   s picture
the elements of a arranged in a column, and likewise b arranged in a second col-
umn to the right, with left-to-right arrows connecting a to f .a/ for each a 2 a
and likewise right-to-left arrows for g. since f and g are total functions, there is
exactly one arrow out of each element. also, since f and g are injections, there is
at most one arrow into any element.

so starting at any element, there is a unique and unending path of arrows going
forwards (it might repeat). there is also a unique path of arrows going backwards,
which might be unending, or might end at an element that has no arrow into it.
these paths are completely separate: if two ran into each other, there would be two
arrows into the element where they ran together.

this divides all the elements into separate paths of four kinds:

(i) paths that are in   nite in both directions,

(ii) paths that are in   nite going forwards starting from some element of a.

(iii) paths that are in   nite going forwards starting from some element of b.

(iv) paths that are unending but    nite.

(a) what do the paths of the last type (iv) look like?

(b) show that for each type of path, either

(i) the f -arrows de   ne a bijection between the a and b elements on the path, or
(ii) the g-arrows de   ne a bijection between b and a elements on the path, or
(iii) both sets of arrows de   ne bijections.

for which kinds of paths do both sets of arrows de   ne bijections?

(c) explain how to piece these bijections together to form a bijection between a
and b.

   mcs        2017/6/5     19:42     page 281     #289

8.4. does all this really work?

281

(d) justify the assumption that a and b are disjoint.

problem 8.13. (a) prove that if a nonempty set c is countable, then there is a total
surjective function f w n ! c .
(b) conversely, suppose that n surj d, that is, there is a not necessarily total
surjective function f w nd. prove that d is countable.

problem 8.14.
there are lots of different sizes of in   nite sets. for example, starting with the
in   nite set n of nonnegative integers, we can build the in   nite sequence of sets
n strict pow.n/ strict pow.pow.n// strict pow.pow.pow.n/// strict : : : :

where each set is    strictly smaller    than the next one by theorem 8.1.12. let
pown.n/ be the nth set in the sequence, and

1[

nd0

u wwd

pown.n/:

(a) prove that

for all n > 0.

u surj pown.n/;

(8.10)

(b) prove that
for all n 2 n.
now of course, we could take u; pow.u /; pow.pow.u //; : : : and keep on in this
way building still bigger in   nities inde   nitely.

pown.n/ strict u

homework problems
problem 8.15.
prove that if a is an in   nite set and b is a countable, then

a bij .a [ b/:

hint: since a is in   nite, we can    nd an in   nite sequence a0; a1; a2; : : : of dis-

tinct elements of a as in the proof of lemma 8.1.7.

   mcs        2017/6/5     19:42     page 282     #290

282

chapter 8 in   nite sets

problem 8.16.
in this problem you will prove a fact that may surprise you   or make you even
more convinced that set theory is nonsense: the half-open unit interval is actually
the    same size    as the nonnegative quadrant of the real plane!9 namely, there is a
bijection from .0; 1   to   0;1/ (cid:2)   0;1/.
(a) describe a bijection from .0; 1   to   0;1/.
hint: 1=x almost works.
(b) an in   nite sequence of the decimal digits f0; 1; : : : ; 9g will be called long if
it does not end with all 0   s. an equivalent way to say this is that a long sequence
is one that has in   nitely many occurrences of nonzero digits. let l be the set of
all such long sequences. describe a bijection from l to the half-open real interval
.0; 1  .
hint: put a decimal point at the beginning of the sequence.

(c) describe a surjective function from l to l2 that involves alternating digits
from two long sequences. hint: the surjection need not be total.

(d) prove the following lemma and use it to conclude that there is a bijection from
l2 to .0; 1  2.
lemma 8.4.1. let a and b be nonempty sets. if there is a bijection from a to b,
then there is also a bijection from a (cid:2) a to b (cid:2) b.
(e) conclude from the previous parts that there is a surjection from .0; 1   to .0; 1  2.
then appeal to the schr  oder-bernstein theorem to show that there is actually a
bijection from .0; 1   to .0; 1  2.
(f) complete the proof that there is a bijection from .0; 1   to   0;1/2.

problem 8.17.
you don   t really have to go down the diagonal in a    diagonal    argument.

let   s review the historic application of a diagonal argument to one-way in   nite

sequences

he0; e1; e2; : : : ; ek; : : :i :

the angle brackets appear above as a reminder that the sequence is not a set: its
elements appear in order, and the same element may appear multiple times.10

9the half-open unit interval .0; 1   is fr 2 r j 0 < r   1g. similarly,   0;1/ wwd fr 2 r j r (cid:21) 0g.
10the right angle-bracket is not really visible, since the sequence does not have a right end. if such

   mcs        2017/6/5     19:42     page 283     #291

8.4. does all this really work?

283

the general setup for a diagonal argument is that we have some sequence s
whose elements are themselves one-way in   nite sequences. we picture the se-
quence s d hs0; s1; s2; : : :i running vertically downward, and each sequence
sk 2 s running horizontally to the right:

sk d  sk;0; sk;1; sk;2; : : :   :

so we have a 2-d matrix that is in   nite down and to the right:

0
s0;0
s1;0
s2;0

1
s0;1
s1;1
s2;1

2
s0;2
s1;2
s2;2

s0
s1
s2

:::

sk

: : :
: : :
: : :
: : :

:::

: : :

k : : :
s0;k : : :
s1;k : : :
s2;k : : :

sk:k : : :

the diagonal argument explains how to    nd a    new    sequence, that is, a se-
quence that is not in s. namely, create the new sequence by going down the diago-
nal of the matrix and, for each element encountered, add a differing element to the
sequence being created. in other words, the diagonal sequence is

ds wwd  s0;0; s1;1; s2;2; : : : ; sk;k; : : :  

where x indicates some element that is not equal to x. now ds is a sequence that
is not in s because it differs from every sequence in s, namely, it differs from the
kth sequence in s at position k.

for de   niteness, let   s say

x wwd

(

if x    1;
1
2 otherwise:

with this contrivance, we have gotten the diagonal sequence ds to be a sequence
of 1   s and 2   s that is not in s.
but as we said at the beginning, you don   t have to go down the diagonal. you
could, for example, follow a line with a slope of (cid:0)1=4 to get a new sequence

ts wwd  s0;0; t1; t2; t3; s1;4; t5; t6; t7; s2;8; : : : ; t4k(cid:0)1; sk;4k; t4kc1; : : :  

one-way in   nite sequences seem worrisome, you can replace them with total functions on n. so the
sequence above simpy becomes the function e on n where e.n/ wwd en.

   mcs        2017/6/5     19:42     page 284     #292

284

chapter 8 in   nite sets

where the ti   s can be anything at all. any such ts will be a new sequence because
it will differ from every row of the matrix, but this time it differs from the kth row
at position 4k.
(a) by letting all the ti   s be 2   s, we get a new sequence ts whose elements (in
the limit) are at least three-quarters equal to 2. explain how to    nd an uncountable
number of such sequences.
hint: use slope (cid:0)1=8 and    ll six out of eight places with 2   s. the abbreviation

             
2.n/ wwd 2; 2; : : : ; 2

length n

for a length-n sequence of 2   s may be helpful, in particular 2.6/.

(b) let   s say a sequence has a negligible fraction of non-2 elements if, in the limit,
it has a fraction of at most (cid:15) non-2 elements for every (cid:15) > 0. describe how to
de   ne a sequence not in s that has a negligible fraction of non-2 elements.

(c) describe how to    nd a sequence that differs in   nitely many times from every
sequence in s.
hint: divide n into an in   nite number of non-overlapping in   nite pieces.

problem 8.18.
an in   nite binary string b wwd b0b1b2 : : : bn : : : is called ok when the 1   s in b
occur only at perfect square positions. that is, b is ok when

(

bi d

0

if i     f0; 1; 4; 9; : : : ; n2; .n c 1/2 : : :g;

0 or 1 otherwise:

(a) prove that the set of ok strings is uncountable.

(b) prove that a set with an uncountable subset must itself be uncountable.

(c) let sparse be the set of in   nite binary strings whose fraction of 1   s approaches
zero. conclude that sparse is uncountable.

problem 8.19.
cantor   s powerset theorem 8.1.12 implies that for any set a, no total function

   mcs        2017/6/5     19:42     page 285     #293

8.4. does all this really work?

285

g w a ! pow.a/ is a surjection. in particular, the theorem is proved by showing
that the    diagonal    set
is an element of pow.a/ that is not in the range of g, because for every a 2 a it
differs at the element a from the set g.a/ in the range of g.
but there   s no need to stick to the diagonal. if p w a ! a is some total function,
we can differ from g.a/ at p.a/ instead of    on the diagonal    at a. that is, de   ne

ag wwd fa 2 a j a     g.a/g

ag;p wwd fp.a/ j a 2 a and p.a/     g.a/g:

so ag;p is an element of pow.a/, and
false claim. ag;p is not in the range of g,
because for every a 2 a, the set ag;p differs at the element p.a/ from the set
g.a/ in the range of g.
(a) show that the claim is false by letting a be f0; 1g, and g.n/ d fng and p.n/ d
0 for all n 2 n.
(b) identify the mistake in the argument above and show that it is    xed by requir-
ing that p be an injection.

problem 8.20.
suppose s d fs0; s1; : : :g is a countable set each of whose elements sn is an
in   nite set of nonnegative integers. using a diagonal argument, we can    nd a
   new    in   nite set u of nonnegative integers that is not in s.
that not only is not in s, but does not even have a subset that is in s.
rather than describing u directly, it   s a little easier if we describe its complement
c . then u will be c wwd n (cid:0) c .
de   ne a function f w n ! n as follows:

in this problem we describe how to    nd an in   nite set u of nonnegative integers

f .n/ wwd minfk 2 sn j k (cid:21) n2g;

and de   ne

c wwd range.f /:

(a) prove that no subset of u is in s.
(b) show that the limiting density of u is one. that is,

ju \   0::k  j

lim
k!1

k

d 1:

   mcs        2017/6/5     19:42     page 286     #294

286

chapter 8 in   nite sets

exam problems
problem 8.21. (a) for each of the following sets, indicate whether it is    nite,
countably in   nite, or uncountable.

(i) the set of even integers greater than 10100.
(ii) the set of    pure    complex numbers of the form ri for nonzero real numbers

r.

(iii) the powerset of the integer interval   10::1010  .
(iv) the complex numbers c such that c is the root of a quadratic with integer

coef   cients, that is,

9m; n; p 2 z; m    0: mc2 c nc c p d 0:

let u be an uncountable set, c be a countably in   nite subset of u, and d be
a countably in   nite set.

(v) u [ d.
(vi) u \ c
(vii) u (cid:0) d
(b) give an example of sets a and b such that

r strict a strict b:

problem 8.22.
prove that if a0; a1; : : : ; an; : : : is an in   nite sequence of countable sets, then so
is

1[

nd0

an

problem 8.23.
let a and b be countably in   nite sets:

a d fa0; a1; a2; a3; : : :g
b d fb0; b1; b2; b3; : : :g

show that their product a (cid:2) b is also a countable set by showing how to list the
elements of a(cid:2)b. you need only show enough of the initial terms in your sequence
to make the pattern clear   a half dozen or so terms usually suf   ce.

   mcs        2017/6/5     19:42     page 287     #295

8.4. does all this really work?

287

problem 8.24.
let f0; 1g(cid:3) be the set of    nite binary sequences, f0; 1g! be the set of in   nite bi-
nary sequences, and f be the set of sequences in f0; 1g! that contain only a finite
number of occurrences of 1   s.
(a) describe a simple surjective function from f0; 1g(cid:3) to f .
(b) the set f wwd f0; 1g! (cid:0) f consists of all the in   nite binary sequences with
in   nitely many 1   s. use the previous problem part to prove that f is uncountable.
hint: we know that f0; 1g(cid:3) is countable and f0; 1g! is not.

problem 8.25.
let f0; 1g! be the set of in   nite binary strings, and let b (cid:26) f0; 1g! be the set of
in   nite binary strings containing in   nitely many occurrences of 1   s. prove that b
is uncountable. (we have already shown that f0; 1g! is uncountable.)
hint: start by showing that f0; 1g! inj b.

problem 8.26.
a real number is called quadratic when it is a root of a degree two polynomial with
integer coef   cients. explain why there are only countably many quadratic reals.

problem 8.27.
describe which of the following sets have bijections between them:

z (integers);
c (complex numbers);
pow.z/ (all subsets of integers);
pow.pow.;//;
f0; 1g! (in   nite binary sequences)
pow.ft; fg/;

r (real numbers);
q (rational numbers);
pow.;/;
f0; 1g(cid:3) (   nite binary sequences);
ft; fg (truth values)
pow.f0; 1g!/

problem 8.28.

prove that the set(cid:0)zc(cid:1)(cid:3)
hint: if s 2(cid:0)zc(cid:1)(cid:3)

of all    nite sequences of positive integers is countable.

, let sum(s) be the sum of the successive integers in s.

   mcs        2017/6/5     19:42     page 288     #296

288

chapter 8 in   nite sets

problem 8.29.
let f1; 2; 3g! be the set of in   nite sequences containing only the numbers 1, 2, and
3. for example, some sequences of this kind are:

.1; 1; 1; 1:::/;

.2; 2; 2; 2:::/;

.3; 2; 1; 3:::/:

prove that f1; 2; 3g! is uncountable.
hint: one approach is to de   ne a surjective function from f1; 2; 3g! to the power
set pow.n/.

problems for section 8.2

class problems
problem 8.30.
let n! be the set of in   nite sequences of nonnegative integers. for example, some
sequences of this kind are:

.0; 1; 2; 3; 4; : : : /;

.2; 3; 5; 7; 11; : : : /;

.3; 1; 4; 5; 9; : : : /:

prove that this set of sequences is uncountable.

homework problems
problem 8.31.
for any sets a and b, let   a ! b   be the set of total functions from a to b. prove
that if a is not empty and b has more than one element, then not.a surj   a !
b  /.
hint: suppose that (cid:27) is a function from a to   a ! b   mapping each element
a 2 a to a function (cid:27)a w a ! b. pick any two elements of b; call them 0 and 1.
then de   ne

(
0 if (cid:27)a.a/ d 1;
1 otherwise:

diag.a/ wwd

   mcs        2017/6/5     19:42     page 289     #297

8.4. does all this really work?

289

problem 8.32.
string procedures are one-argument procedures that apply to strings over the ascii
alphabet. if application of procedure p to string s results in a computation that
eventually halts, we say that p recognizes s. we de   ne lang.p / to be the set of
strings or language recognized by p :

lang.p /wwdfs 2 ascii

(cid:3) j p recognizes sg:

(cid:3)

a language is unrecognizable when it is not equal to lang.p / for any procedure p .
a string procedure declaration is a text s 2 ascii
that conforms to the gram-
matical rules for programs. the declaration de   nes a procedure ps, which we can
think of as the result of compiling s into an executable object. if s 2 ascii
is not
a grammatically well-formed procedure declaration, we arbitrarily de   ne ps to be
the string procedure that fails to halt when applied to any string. now every string
(cid:3)
de   nes a string procedure, and every string procedure is ps for some s 2 ascii
.
an easy diagonal argument in section 8.2 showed that

(cid:3)

no-halt wwd fs j ps applied to s does not haltg d fs j s     lang.ps/g

is not recognizable.

it may seem pretty weird to apply a procedure to its own declaration. are there
any less weird examples of unrecognizable set? the answer is    many more.    in
this problem, we   ll show three more:

no-halt-(cid:21) wwd fs j ps applied to (cid:21) does not haltg d fs j (cid:21)     lang.ps/g;
finite-halt wwd fs j lang.ps/ is    niteg;
always-halt wwd fs j lang.ps/ d ascii
let   s begin by showing how we could use a recognizer for no-halt-(cid:21) to de   ne a
recognizer for no-halt. that is, we will    reduce    the weird problem of recognizing
no-halt to the more understandable problem of recognizing no-halt-(cid:21). since there
is no recognizer for no-halt, it follows that there can   t be one for no-halt-(cid:21) either.

(cid:3)g:

here   s how this reduction would work: suppose we want to recognize when a
given string s is in no-halt. revise s to be the declaration of a slightly modi   ed
procedure ps

0 which behaves as follows:
(cid:3)
0 applied to argument t 2 ascii

ps
plied to s.

, ignores t, and simulates ps ap-

so, if ps applied to s halts, then ps
applied to s does not halt, then ps

0 halts on every string it is applied to, and if ps
0 does not halt on any string it is applied to. that

   mcs        2017/6/5     19:42     page 290     #298

290

chapter 8 in   nite sets

is,

in short,

s 2 no-halt implies lang.ps

implies s

0/ d ;
implies (cid:21)     lang.ps
0/
0 2 no-halt-(cid:21);
implies (cid:21) 2 lang.ps
0/
0     no-halt-(cid:21):

implies s

s     no-halt implies lang.ps

0/ d ascii

(cid:3)

s 2 no-halt iff s

0 2 no-halt-(cid:21):

0 2
so to recognize when s 2 no-halt all you need to do is recognize when s
no-halt-(cid:21). as already noted above (but we know that remark got by several students,
so we   re repeating the explanation), this means that if no-halt-(cid:21) was recognizable,
then no-halt would be as well. since we know that no-halt is unrecognizable, then
no-halt-(cid:21) must also be unrecognizable, as claimed.
(a) conclude that finite-halt is unrecognizable.
hint: same s
next, let   s see how a reduction of no-halt to always-halt would work. suppose we
want to recognize when a given string s is in no-halt. revise s to be the declaration
of a slightly modi   ed procedure ps

00 which behaves as follows:

0.

00 is applied to argument t 2 ascii

when ps
, it simulates ps applied
to s for up to jtj    steps    (executions of individual machine instruc-
tions). if ps applied to s has not halted in jtj steps, then the application
00 to t halts. if ps applied to s has halted within jtj steps, then the
of ps
application of ps

00 to t runs forever.

(cid:3)

(b) conclude that always-halt is unrecognizable.
hint: explain why

s 2 no-halt iff s

00 2 always-halt:

(c) explain why finite-halt is unrecognizable.
hint: same s

00.

note that it   s easy to recognize when ps does halt on s: just simulate the appli-
cation of ps to s until it halts. this shows that no-halt is recognizable. we   ve just
concluded that finite-halt is nastier: neither it nor its complement is recognizable.

   mcs        2017/6/5     19:42     page 291     #299

8.4. does all this really work?

291

exam problems
problem 8.33.
let f1; 2; 3g! be the set of in   nite sequences containing only the numbers 1, 2, and
3. for example, some sequences of this kind are:

.1; 1; 1; 1:::/;

.2; 2; 2; 2:::/;

.3; 2; 1; 3:::/:

prove that f1; 2; 3g! is uncountable.
hint: one approach is to de   ne a surjective function from f1; 2; 3g! to the power
set pow.n/.

problems for section 8.3

class problems
problem 8.34.
forming a pair .a; b/ of items a and b is a mathematical operation that we can
safely take for granted. but when we   re trying to show how all of mathematics can
be reduced to set theory, we need a way to represent the pair .a; b/ as a set.
(a) explain why representing .a; b/ by fa; bg won   t work.
(b) explain why representing .a; b/ by fa;fbgg won   t work either. hint: what
pair does ff1g;f2gg represent?
(c) de   ne

pair.a; b/ wwd fa;fa; bgg:

explain why representing .a; b/ as pair.a; b/ uniquely determines a and b. hint:
sets can   t be indirect members of themselves: a 2 a never holds for any set a, and
neither can a 2 b 2 a hold for any b.

problem 8.35.
the axiom of choice says that if s is a set whose members are nonempty sets that
are pairwise disjoint   that is, no two sets in s have an element in common   then
there is a set c consisting of exactly one element from each set in s.

   mcs        2017/6/5     19:42     page 292     #300

292

chapter 8 in   nite sets

in formal logic, we could describe s with the formula,

pairwise-disjoint.s/wwd8x 2 s: x    ; and

8x; y 2 s: x    y implies x \ y d ;:

similarly we could describe c with the formula

choice-set.c; s/ wwd 8x 2 s:9  z: z 2 c \ x:

here    9   z:    is fairly standard notation for    there exists a unique z.   
now we can give the formal de   nition:

de   nition (axiom of choice).

8s: pairwise-disjoint.s/ implies 9c: choice-set.c; s/:

the only issue here is that set theory is technically supposed to be expressed in
terms of pure formulas in the language of sets, which means formula that uses only
the membership relation 2 propositional connectives, the two quanti   es 8 and 9,
and variables ranging over all sets. verify that the axiom of choice can be expressed
as a pure formula, by explaining how to replace all impure subformulas above with
equivalent pure formulas.
for example, the formula x d y could be replaced with the pure formula 8z: z 2
x iff z 2 y.

problem 8.36.
let r w a ! a be a binary relation on a set a. if a1 r a0, we   ll say that a1 is    r-
smaller    than a0. r is called well founded when there is no in   nite    r-decreasing   
sequence:
(8.11)
of elements ai 2 a.
for example, if a d n and r is the <-relation, then r is well founded because
if you keep counting down with nonnegative integers, you eventually get stuck at
zero:

(cid:1)(cid:1)(cid:1) r an r (cid:1)(cid:1)(cid:1) r a1 r a0;

0 < (cid:1)(cid:1)(cid:1) < n (cid:0) 1 < n:

but you can keep counting up forever, so the >-relation is not well founded:

also, the  -relation on n is not well founded because a constant sequence of, say,
2   s, gets  -smaller forever:

(cid:1)(cid:1)(cid:1) > n > (cid:1)(cid:1)(cid:1) > 1 > 0:

(cid:1)(cid:1)(cid:1)   2   (cid:1)(cid:1)(cid:1)   2   2:

   mcs        2017/6/5     19:42     page 293     #301

8.4. does all this really work?

293

(a) if b is a subset of a, an element b 2 b is de   ned to be r-minimal in b iff
there is no r-smaller element in b. prove that r w a ! a is well founded iff every
nonempty subset of a has an r-minimal element.
a logic formula of set theory has only predicates of the form    x 2 y    for vari-
ables x; y ranging over sets, along with quanti   ers and propositional operations.
for example,

isempty.x/ wwd 8w: not.w 2 x/

is a formula of set theory that means that    x is empty.   
(b) write a formula member-minimal.u; v/ of set theory that means that u is 2-
minimal in v.
(c) the foundation axiom of set theory says that 2 is a well founded relation
on sets. express the foundation axiom as a formula of set theory. you may use
   member-minimal    and    isempty    in your formula as abbreviations for the formu-
las de   ned above.

(d) explain why the foundation axiom implies that no set is a member of itself.

homework problems
problem 8.37.
in writing formulas, it is ok to use abbreviations introduced earlier (so it is now
legal to use    d    because we just de   ned it).
(a) explain how to write a formula, subsetn.x; y1; y2; : : : ; yn/, of set theory 11
that means x   fy1; y2; : : : ; yng.
(b) now use the formula subsetn to write a formula, atmostn.x/, of set theory
that means that x has at most n elements.

(c) explain how to write a formula exactlyn of set theory that means that x has
exactly n elements. your formula should only be about twice the length of the
formula atmostn.
(d) the direct way to write a formula dn.y1; : : : ; yn/ of set theory that means
that y1; : : : ; yn are distinct elements is to write an and of subformulas    yi    yj    
for 1   i < j   n. since there are n.n (cid:0) 1/=2 such subformulas, this approach
leads to a formula dn whose length grows proportional to n2. describe how to
write such a formula dn.y1; : : : ; yn/ whose length only grows proportional to n.
hint: use subsetn and exactlyn.

11see section 8.3.2.

   mcs        2017/6/5     19:42     page 294     #302

294

chapter 8 in   nite sets

exam problems
problem 8.38. (a) explain how to write a formula members.p; a; b/ of set the-
ory12 that means p d fa; bg.
hint: say that everything in p is either a or b. it   s ok to use subformulas of the
form    x d y,    since we can regard    x d y    as an abbreviation for a genuine set
theory formula.

a pair .a; b/ is simply a sequence of length two whose    rst item is a and whose
second is b. sequences are a basic mathematical data type we take for granted, but
when we   re trying to show how all of mathematics can be reduced to set theory, we
need a way to represent the ordered pair .a; b/ as a set. one way that will work13
is to represent .a; b/ as

pair.a; b/ wwd fa;fa; bgg:

(b) explain how to write a formula pair.p; a; b/, of set theory 14 that means p d
pair.a; b/.
hint: now it   s ok to use subformulas of the form    members.p; a; b/.   

(c) explain how to write a formula second.p; b/, of set theory that means p is a
pair whose second item is b.

problems for section 8.4

homework problems
problem 8.39.
in this problem, structural induction and the foundation axiom of set theory pro-
vide simple proofs about some utterly in   nite objects.

de   nition. the class of    recursive set-like    objects, recs, is de   ned recursively as
follows:
base case: the empty set ; is a recs.
constructor step: if s is a nonempty set of recs   s, then s is a recs.

12see section 8.3.2.
13some similar ways that don   t work are described in problem 8.34.
14see section 8.3.2.

   mcs        2017/6/5     19:42     page 295     #303

8.4. does all this really work?

295

(a) prove that recs satis   es the foundation axiom: there is no in   nite sequence
of recs, ro; r1; : : : ; rn(cid:0)1; rn; : : : such that

: : : rn 2 rn(cid:0)1 2 : : : r1 2 r0:

(8.12)

hint: structural induction.

(b) prove that every pure set is a recs.15
hint: use the foundation axiom.

(c) every recs r de   nes a special kind of two-person game of perfect informa-
tion called a uniform game. the initial    board position    of the game is r itself.
a player   s move consists of choosing any member r. the two players alternate
moves, with the player whose turn it is to move called the next player. the next
player   s move determines a game in which the other player, called the previous
player, moves    rst.
the game is called    uniform    because the two players have the same objective: to
leave the other player stuck with no move to make. that is, whoever moves to the
empty set is a winner, because then the next player has no move.
prove that in every uniform game, either the previous player or the next player has
a winning strategy.

problem 8.40.
for any set x, de   ne next.x/ to be the set consisting of all the elements of x, along
with x itself:

next.x/ wwd x [ fxg:

so by de   nition,

(8.13)
now we give a recursive de   nition of a collection ord of sets called ordinals that

x 2 next.x/ and x (cid:26) next.x/:

provide a way to count in   nite sets. namely,
de   nition.

; 2 ord;
if (cid:23) 2 ord; then next.(cid:23)/ 2 ord;
(cid:23) 2 ord:

if s (cid:26) ord; then [

(cid:23)2s

15a    pure    set is empty or is a set whose elements are all pure sets.

   mcs        2017/6/5     19:42     page 296     #304

296

chapter 8 in   nite sets

there is a method for proving things about ordinals that follows directly from
the way they are de   ned. namely, let p .x/ be some property of sets. the ordinal
induction rule says that to prove that p .(cid:23)/ is true for all ordinals (cid:23), you need only
show two things

(cid:15) if p holds for all the members of next.x/, then it holds for next.x/, and
(cid:15) if p holds for all members of some set s, then it holds for their union.

that is:

rule. ordinal induction

8x: .8y 2 next.x/: p .y// implies p .next.x//;

8s: .8x 2 s: p .x// implies p .s

x2s x/

8(cid:23) 2 ord: p .(cid:23)/

the intuitive justi   cation for the ordinal induction rule is similar to the justi   -
cation for strong induction. we will accept the soundness of the ordinal induction
rule as a basic axiom.
(a) a set x is closed under membership if every element of x is also a subset of
x, that is

8y 2 x: y (cid:26) x:

prove that every ordinal (cid:23) is closed under membership.

(b) a sequence

(cid:1)(cid:1)(cid:1) 2 (cid:23)nc1 2 (cid:23)n 2 (cid:1)(cid:1)(cid:1) 2 (cid:23)1 2 (cid:23)0

(8.14)
of ordinals (cid:23)i is called a member-decreasing sequence starting at (cid:23)0. use ordinal
induction to prove that no ordinal starts an in   nite member-decreasing sequence.16

16do not assume the foundation axiom of zfc (section 8.3.2) which says that there isn   t any set
that starts an in   nite member-decreasing sequence. even in versions of set theory in which the foun-
dation axiom does not hold, there cannot be any in   nite member-decreasing sequence of ordinals.

   mcs        2017/6/5     19:42     page 297     #305

ii structures

   mcs        2017/6/5     19:42     page 298     #306

   mcs        2017/6/5     19:42     page 299     #307

introduction

the properties of the set of integers are the subject of number theory. this part
of the text starts with a chapter on this topic because the integers are a very famil-
iar mathematical structure that have lots of easy-to-state and interesting-to-prove
properties. this makes number theory a good place to start serious practice with
the methods of proof outlined in part 1. moreover, number theory has turned out
to have multiple applications in computer science. for example, most modern data
encryption methods are based on number theory.

we study numbers as a    structure    that has multiple parts of different kinds. one
part is, of course, the set of all the integers. a second part is the collection of basic
integer operations: addition, multiplication, exponentiation,. . . . other parts are the
important subsets of integers   like the prime numbers   out of which all integers
can be built using multiplication.

structured objects more generally are fundamental in computer science. whether
you are writing code, solving an optimization problem, or designing a network, you
will be dealing with structures.

graphs, also known as networks, are a fundamental structure in computer sci-
ence. graphs can model associations between pairs of objects; for example, two
exams that cannot be given at the same time, two people that like each other, or two
subroutines that can be run independently. in chapter 10, we study directed graphs
which model one-way relationships such as being bigger than, loving (sadly, it   s
often not mutual), and being a prerequisite for. a highlight is the special case of
acyclic digraphs (dags) that correspond to a class of relations called partial or-
ders. partial orders arise frequently in the study of scheduling and concurrency.
digraphs as models for data communication and routing problems are the topic of
chapter 11.

in chapter 12 we focus on simple graphs that represent mutual or symmetric re-

   mcs        2017/6/5     19:42     page 300     #308

300

part ii structures

lationships, such as being in con   ict, being compatible, being independent, being
capable of running in parallel. planar graphs   simple graphs that can be drawn in
the plane   are examined in chapter 13, the    nal chapter of part ii. the impossi-
bility of placing 50 geocentric satellites in orbit so that they uniformly blanket the
globe will be one of the conclusions reached in this chapter.

   mcs        2017/6/5     19:42     page 301     #309

9

number theory
number theory is the study of the integers. why anyone would want to study the
integers may not be obvious. first of all, what   s to know? there   s 0, there   s 1, 2,
3, and so on, and, oh yeah, -1, -2, . . . . which one don   t you understand? what
practical value is there in it?

the mathematician g. h. hardy delighted at its impracticality. he wrote:

[number theorists] may be justi   ed in rejoicing that there is one sci-
ence, at any rate, and that their own, whose very remoteness from or-
dinary human activities should keep it gentle and clean.

hardy was especially concerned that number theory not be used in warfare; he
was a paci   st. you may applaud his sentiments, but he got it wrong: number theory
underlies modern cryptography, which is what makes secure online communication
possible. secure communication is of course crucial in war   leaving poor hardy
spinning in his grave. it   s also central to online commerce. every time you buy a
book from amazon, use a certi   cate to access a web page, or use a paypal account,
you are relying on number theoretic algorithms.

number theory also provides an excellent environment for us to practice and
apply the proof techniques that we developed in previous chapters. we   ll work out
properties of greatest common divisors (gcd   s) and use them to prove that integers
factor uniquely into primes. then we   ll introduce modular arithmetic and work out
enough of its properties to explain the rsa public key crypto-system.

since we   ll be focusing on properties of the integers, we   ll adopt the default

convention in this chapter that variables range over the set z of integers.

9.1 divisibility

the nature of number theory emerges as soon as we consider the divides relation.
de   nition 9.1.1. a divides b (notation a j b) iff there is an integer k such that

ak d b:

the divides relation comes up so frequently that multiple synonyms for it are

used all the time. the following phrases all say the same thing:

   mcs        2017/6/5     19:42     page 302     #310

302

chapter 9 number theory

(cid:15) a j b,
(cid:15) a divides b,
(cid:15) a is a divisor of b,
(cid:15) a is a factor of b,
(cid:15) b is divisible by a,
(cid:15) b is a multiple of a.

some immediate consequences of de   nition 9.1.1 are that for all n

n j 0;

n j n; and

   1 j n:

also,

0 j n implies n d 0:

dividing seems simple enough, but let   s play with this de   nition. the pythagore-
ans, an ancient sect of mathematical mystics, said that a number is perfect if it
equals the sum of its positive integral divisors, excluding itself. for example,
6 d 1 c 2 c 3 and 28 d 1 c 2 c 4 c 7 c 14 are perfect numbers. on the
other hand, 10 is not perfect because 1 c 2 c 5 d 8, and 12 is not perfect because
1 c 2 c 3 c 4 c 6 d 16. euclid characterized all the even perfect numbers around
300 bc (problem 9.2). but is there an odd perfect number? more than two thou-
sand years later, we still don   t know! all numbers up to about 10300 have been
ruled out, but no one has proved that there isn   t an odd perfect number waiting just
over the horizon.

so a half-page into number theory, we   ve strayed past the outer limits of human
knowledge. this is pretty typical; number theory is full of questions that are easy to
pose, but incredibly dif   cult to answer. we   ll mention a few more such questions
in later sections.1

9.1.1 facts about divisibility
the following lemma collects some basic facts about divisibility.

lemma 9.1.2.

1. if a j b and b j c, then a j c.
1don   t panic   we   re going to stick to some relatively benign parts of number theory. these

super-hard unsolved problems rarely get put on problem sets.

   mcs        2017/6/5     19:42     page 303     #311

9.1. divisibility

303

2. if a j b and a j c, then a j sb c t c for all s and t.
3. for all c    0, a j b if and only if ca j cb.

proof. these facts all follow directly from de   nition 9.1.1. to illustrate this, we   ll
prove just part 2:
given that a j b, there is some k1 2 z such that ak1 d b. likewise, ak2 d c,

so
therefore sb c t c d k3a where k3 wwd .sk1 c t k2/, which means that

sb c t c d s.k1a/ c t .k2a/ d .sk1 c t k2/a:

a j sb c t c:

(cid:4)
a number of the form sb c t c is called an integer linear combination of b and c,
or, since in this chapter we   re only talking about integers, just a linear combination.
so lemma 9.1.2.2 can be rephrased as

if a divides b and c, then a divides every linear combination of b and c.

we   ll be making good use of linear combinations, so let   s get the general de   nition
on record:

de   nition 9.1.3. an integer n is a linear combination of numbers b0; : : : ; bk iff

n d s0b0 c s1b1 c (cid:1)(cid:1)(cid:1) c skbk

for some integers s0; : : : ; sk.

9.1.2 when divisibility goes bad
as you learned in elementary school, if one number does not evenly divide another,
you get a    quotient    and a    remainder    left over. more precisely:
theorem 9.1.4. [division theorem]2 let n and d be integers such that d    0.
then there exists a unique pair of integers q and r, such that
n d q (cid:1) d c r and 0   r < jdj :

(9.1)

2this theorem is often called the    division algorithm,    but we prefer to call it a theorem since it

does not actually describe a division procedure for computing the quotient and remainder.

   mcs        2017/6/5     19:42     page 304     #312

304

chapter 9 number theory

the number q is called the quotient and the number r is called the remainder of
n divided by d. we use the notation qcnt.n; d / for the quotient and rem.n; d / for
the remainder.
the absolute value notation jdj used above is probably familiar from introduc-
tory calculus, but for the record, let   s de   ne it.
de   nition 9.1.5. for any real number r, the absolute value jrj of r is:3

(
(cid:0)r

r

jrj wwd

if r (cid:21) 0;
if r < 0:

so by de   nition, the remainder rem.n; d / is nonnegative regardless of the sign
of n and d. for example, rem.(cid:0)11; 7/ d 3, since (cid:0)11 d .(cid:0)2/ (cid:1) 7 c 3.
   remainder    operations built into many programming languages can be a source
of confusion. for example, the expression    32 % 5    will be familiar to program-
mers in java, c, and c++; it evaluates to rem.32; 5/ d 2 in all three languages.
on the other hand, these and other languages are inconsistent in how they treat re-
mainders like    32 % -5    or    -32 % 5    that involve negative numbers. so don   t be
distracted by your familiar programming language   s behavior on remainders, and
stick to the mathematical convention that remainders are nonnegative.
the remainder on division by d by de   nition is a number in the (integer) interval
from 0 to jdj (cid:0) 1. such integer intervals come up so often that it is useful to have a
simple notation for them. for k   n 2 z,

.k::n/ wwd fi j k < i < ng;
.k::n   wwd .k; n/ [ fng;
  k::n/ wwd fkg [ .k; n/;
  k::n   wwd fkg [ .k; n/ [ fng d fi j k   i   ng:

9.1.3 die hard
die hard 3 is just a b-grade action movie, but we think it has an inner message:
everyone should learn at least a little number theory. in section 6.2.3, we formal-
ized a state machine for the die hard jug-   lling problem using 3 and 5 gallon jugs,

3the absolute value of r could be de   ned as

r 2, which works because of the convention that
square root notation always refers to the nonnegative square root (see problem 1.3). absolute value
generalizes to complex numbers where it is called the norm. for a; b 2 r,

p

ja c bij wwdp

a2 c b2:

   mcs        2017/6/5     19:42     page 305     #313

9.1. divisibility

305

and also with 3 and 9 gallon jugs, and came to different conclusions about bomb
explosions. what   s going on in general? for example, how about getting 4 gallons
from 12- and 18-gallon jugs, getting 32 gallons with 899- and 1147-gallon jugs, or
getting 3 gallons into a jug using just 21- and 26-gallon jugs?

it would be nice if we could solve all these silly water jug questions at once. this

is where number theory comes in handy.

a water jug invariant
suppose that we have water jugs with capacities a and b with b (cid:21) a. let   s carry
out some sample operations of the state machine and see what happens, assuming
the b-jug is big enough:

.0; 0/ ! .a; 0/
! .0; a/
! .a; a/
! .2a (cid:0) b; b/
! .2a (cid:0) b; 0/
! .0; 2a (cid:0) b/
! .a; 2a (cid:0) b/
! .3a (cid:0) 2b; b/

   ll    rst jug
pour    rst into second
   ll    rst jug
pour    rst into second (assuming 2a (cid:21) b)
empty second jug
pour    rst into second
   ll    rst
pour    rst into second (assuming 3a (cid:21) 2b)

what leaps out is that at every step, the amount of water in each jug is a linear
combination of a and b. this is easy to prove by induction on the number of
transitions:

lemma 9.1.6 (water jugs). in the die hard state machine of section 6.2.3 with
jugs of sizes a and b, the amount of water in each jug is always a linear combination
of a and b.

proof. the induction hypothesis p .n/ is the proposition that after n transitions, the
amount of water in each jug is a linear combination of a and b.
base case (n d 0): p .0/ is true, because both jugs are initially empty, and 0 (cid:1) a c
0 (cid:1) b d 0.
inductive step: suppose the machine is in state .x; y/ after n steps, that is, the little
jug contains x gallons and the big one contains y gallons. there are two cases:

(cid:15) if we    ll a jug from the fountain or empty a jug into the fountain, then that jug
is empty or full. the amount in the other jug remains a linear combination
of a and b. so p .n c 1/ holds.

   mcs        2017/6/5     19:42     page 306     #314

306

chapter 9 number theory

(cid:15) otherwise, we pour water from one jug to another until one is empty or the
other is full. by our assumption, the amount x and y in each jug is a linear
combination of a and b before we begin pouring. after pouring, one jug is
either empty (contains 0 gallons) or full (contains a or b gallons). thus, the
other jug contains either x c y, x c y (cid:0) a or x c y (cid:0) b gallons, all of which
are linear combinations of a and b since x and y are. so p .n c 1/ holds in
this case as well.

since p .n c 1/ holds in any case, this proves the inductive step, completing the
(cid:4)
proof by induction.

so we have established that the jug problem has a preserved invariant, namely,
the amount of water in every jug is a linear combination of the capacities of the
jugs. lemma 9.1.6 has an important corollary:

corollary. in trying to get 4 gallons from 12- and 18-gallon jugs, and likewise to
get 32 gallons from 899- and 1147-gallon jugs,

bruce will die!

proof. by the water jugs lemma 9.1.6, with 12- and 18-gallon jugs, the amount
in any jug is a linear combination of 12 and 18. this is always a multiple of 6 by
lemma 9.1.2.2, so bruce can   t get 4 gallons. likewise, the amount in any jug using
(cid:4)
899- and 1147-gallon jugs is a multiple of 31, so he can   t get 32 either.

but the water jugs lemma doesn   t tell the complete story. for example, it leaves
open the question of getting 3 gallons into a jug using just 21- and 26-gallon jugs:
the only positive factor of both 21 and 26 is 1, and of course 1 divides 3, so the
lemma neither rules out nor con   rms the possibility of getting 3 gallons.

a bigger issue is that we   ve just managed to recast a pretty understandable ques-
tion about water jugs into a technical question about linear combinations. this
might not seem like a lot of progress. fortunately, linear combinations are closely
related to something more familiar, greatest common divisors, and will help us
solve the general water jug problem.

9.2 the greatest common divisor

a common divisor of a and b is a number that divides them both. the greatest
common divisor of a and b is written gcd.a; b/. for example, gcd.18; 24/ d 6.

   mcs        2017/6/5     19:42     page 307     #315

9.2. the greatest common divisor

307

as long as a and b are not both 0, they will have a gcd. the gcd turns out
to be very valuable for reasoning about the relationship between a and b and for
reasoning about integers in general. we   ll be making lots of use of gcd   s in what
follows.

some immediate consequences of the de   nition of gcd are that

gcd.n; 1/ d 1
gcd.n; n/ d gcd.n; 0/ d jnj

f orn    0;

where the last equality follows from the fact that everything is a divisor of 0.

9.2.1 euclid   s algorithm
the    rst thing to    gure out is how to    nd gcd   s. a good way called euclid   s
algorithm has been known for several thousand years. it is based on the following
elementary observation.
lemma 9.2.1. for b    0,

gcd.a; b/ d gcd.b; rem.a; b//:

proof. by the division theorem 9.1.4,

a d qb c r

(9.2)
where r d rem.a; b/. so a is a linear combination of b and r, which implies that
any divisor of b and r is a divisor of a by lemma 9.1.2.2. likewise, r is a linear
combination a (cid:0) qb of a and b, so any divisor of a and b is a divisor of r. this
means that a and b have the same common divisors as b and r, and so they have
(cid:4)
the same greatest common divisor.

lemma 9.2.1 is useful for quickly computing the greatest common divisor of
two numbers. for example, we could compute the greatest common divisor of
1147 and 899 by repeatedly applying it:

   
gcd.1147; 899/ d gcd.899; rem.1147; 899/

     

   

/

d248

d gcd .248; rem.899; 248/ d 155/
d gcd .155; rem.248; 155/ d 93/
d gcd .93; rem.155; 93/ d 62/
d gcd .62; rem.93; 62/ d 31/
d gcd .31; rem.62; 31/ d 0/
d 31

   mcs        2017/6/5     19:42     page 308     #316

308

chapter 9 number theory

this calculation that gcd.1147; 899/ d 31 was how we    gured out that with water
jugs of sizes 1147 and 899, bruce dies trying to get 32 gallons.

on the other hand, applying euclid   s algorithm to 26 and 21 gives

gcd.26; 21/ d gcd.21; 5/ d gcd.5; 1/ d 1;

so we can   t use the reasoning above to rule out bruce getting 3 gallons into the big
jug. as a matter of fact, because the gcd here is 1, bruce will be able to get any
number of gallons into the big jug up to its capacity. to explain this, we will need
a little more number theory.

euclid   s algorithm as a state machine
euclid   s algorithm can easily be formalized as a state machine. the set of states is
n2 and there is one transition rule:

.x; y/ (cid:0)! .y; rem.x; y//;

(9.3)

for y > 0. by lemma 9.2.1, the gcd stays the same from one state to the next. that
means the predicate

gcd.x; y/ d gcd.a; b/

is a preserved invariant on the states .x; y/. this preserved invariant is, of course,
true in the start state .a; b/. so by the invariant principle, if y ever becomes 0, the
invariant will be true and so

x d gcd.x; 0/ d gcd.a; b/:

namely, the value of x will be the desired gcd.

what   s more x and therefore also y, gets to be 0 pretty fast. to see why, note
that starting from .x; y/, two transitions leads to a state whose the    rst coordinate
is rem.x; y/, which is at most half the size of x.4 since x starts off equal to a and
gets halved or smaller every two steps, it will reach its minimum value   which is
gcd.a; b/   after at most 2 log a transitions. after that, the algorithm takes at most
one more transition to terminate. in other words, euclid   s algorithm terminates
after at most 1 c 2 log a transitions.5

4in other words,

rem.x; y/   x=2

for 0 < y   x:

(9.4)
this is immediate if y   x=2, since the remainder of x divided by y is less than y by de   nition. on
the other hand, if y > x=2, then rem.x; y/ d x (cid:0) y < x=2.
.1 c p
5a tighter analysis shows that at most log' .a/ transitions are possible where ' is the golden ratio

5/=2, see problem 9.14.

   mcs        2017/6/5     19:42     page 309     #317

9.2. the greatest common divisor

309

9.2.2 the pulverizer
we will get a lot of mileage out of the following key fact:

theorem 9.2.2. the greatest common divisor of a and b is a linear combination
of a and b. that is,

gcd.a; b/ d sa c t b;

for some integers s and t.6

we already know from lemma 9.1.2.2 that every linear combination of a and b is
divisible by any common factor of a and b, so it is certainly divisible by the greatest
of these common divisors. since any constant multiple of a linear combination is
also a linear combination, theorem 9.2.2 implies that any multiple of the gcd is a
linear combination, giving:

corollary 9.2.3. an integer is a linear combination of a and b iff it is a multiple of
gcd.a; b/.

we   ll prove theorem 9.2.2 directly by explaining how to    nd s and t. this job
is tackled by a mathematical tool that dates back to sixth-century india, where it
was called kuttaka, which means    the pulverizer.    today, the pulverizer is more
commonly known as the    extended euclidean gcd algorithm,    because it is so
close to euclid   s algorithm.

for example, following euclid   s algorithm, we can compute the gcd of 259

and 70 as follows:

gcd.259; 70/ d gcd.70; 49/
d gcd.49; 21/
d gcd.21; 7/
d gcd.7; 0/
d 7:

since rem.259; 70/ d 49
since rem.70; 49/ d 21
since rem.49; 21/ d 7
since rem.21; 7/ d 0

the pulverizer goes through the same steps, but requires some extra bookkeeping
along the way: as we compute gcd.a; b/, we keep track of how to write each of
the remainders (49, 21, and 7, in the example) as a linear combination of a and b.
this is worthwhile, because our objective is to write the last nonzero remainder,

6this result is often referred to as bezout   s lemma, which is a misattribution since it was    rst
published in the west 150 years earlier by someone else, and was described a thousand years before
that by indian mathematicians aryabhata and bhaskara.

   mcs        2017/6/5     19:42     page 310     #318

310

chapter 9 number theory

which is the gcd, as such a linear combination. for our example, here is this extra
bookkeeping:

x
259
70

49

21

y
70
49

21

7

.rem.x; y// d x (cid:0) q (cid:1) y
49 d a (cid:0) 3 (cid:1) b
21 d b (cid:0) 1 (cid:1) 49

7 d 49 (cid:0) 2 (cid:1) 21

d b (cid:0) 1 (cid:1) .a (cid:0) 3 (cid:1) b/
d (cid:0)1 (cid:1) a c 4 (cid:1) b
d .a (cid:0) 3 (cid:1) b/ (cid:0) 2 (cid:1) .(cid:0)1 (cid:1) a c 4 (cid:1) b/
d 3 (cid:1) a (cid:0) 11 (cid:1) b

0

we began by initializing two variables, x d a and y d b. in the    rst two columns
above, we carried out euclid   s algorithm. at each step, we computed rem.x; y/
which equals x (cid:0) qcnt.x; y/ (cid:1) y. then, in this linear combination of x and y, we
replaced x and y by equivalent linear combinations of a and b, which we already
had computed. after simplifying, we were left with a linear combination of a and
b equal to rem.x; y/, as desired. the    nal solution is boxed.

this should make it pretty clear how and why the pulverizer works. if you have
doubts, you may work through problem 9.13, where the pulverizer is formalized as
a state machine and then veri   ed using an invariant that is an extension of the one
used for euclid   s algorithm.

since the pulverizer requires only a little more computation than euclid   s algo-
rithm, you can    pulverize    very large numbers very quickly by using this algorithm.
as we will soon see, its speed makes the pulverizer a very useful tool in the    eld
of cryptography.

now we can restate the water jugs lemma 9.1.6 in terms of the greatest common

divisor:
corollary 9.2.4. suppose that we have water jugs with capacities a and b. then
the amount of water in each jug is always a multiple of gcd.a; b/.

for example, there is no way to form 4 gallons using 3- and 6-gallon jugs, be-
cause 4 is not a multiple of gcd.3; 6/ d 3.
9.2.3 one solution for all water jug problems
corollary 9.2.3 says that 3 can be written as a linear combination of 21 and 26,
since 3 is a multiple of gcd.21; 26/ d 1. so the pulverizer will give us integers s
and t such that

3 d s (cid:1) 21 c t (cid:1) 26

(9.5)

   mcs        2017/6/5     19:42     page 311     #319

9.2. the greatest common divisor

311

the coef   cient s could be either positive or negative. however, we can readily

transform this linear combination into an equivalent linear combination

3 d s

0 (cid:1) 21 c t

0 (cid:1) 26

(9.6)
0 is positive. the trick is to notice that if in equation (9.5) we
where the coef   cient s
increase s by 26 and decrease t by 21, then the value of the expression s(cid:1) 21c t (cid:1) 26
is unchanged overall. thus, by repeatedly increasing the value of s (by 26 at a
time) and decreasing the value of t (by 21 at a time), we get a linear combination
0 is positive. (of course t
0 (cid:1) 21 c t
0 must then be
s
negative; otherwise, this expression would be much greater than 3.)

0 (cid:1) 26 d 3 where the coef   cient s

now we can form 3 gallons using jugs with capacities 21 and 26: we simply

repeat the following steps s

0 times:

1. fill the 21-gallon jug.

2. pour all the water in the 21-gallon jug into the 26-gallon jug. if at any time
the 26-gallon jug becomes full, empty it out, and continue pouring the 21-
gallon jug into the 26-gallon jug.

0
at the end of this process, we must have emptied the 26-gallon jug exactly (cid:0)t
0 (cid:1) 21 gallons of water from the fountain, and
times. here   s why: we   ve taken s
0 times,
we   ve poured out some multiple of 26 gallons. if we emptied fewer than (cid:0)t
then by (9.6), the big jug would be left with at least 3 c 26 gallons, which is more
than it can hold; if we emptied it more times, the big jug would be left containing
at most 3(cid:0) 26 gallons, which is nonsense. but once we have emptied the 26-gallon
0 times, equation (9.6) implies that there are exactly 3 gallons left.
jug exactly (cid:0)t
0 in order to
remarkably, we don   t even need to know the coef   cients s
0 times, we could just repeat
use this strategy! instead of repeating the outer loop s
until we obtain 3 gallons, since that must happen eventually. of course, we have to
keep track of the amounts in the two jugs so we know when we   re done. here   s the

0 and t

   mcs        2017/6/5     19:42     page 312     #320

312

chapter 9 number theory

empty 26

empty 26

empty 26

empty 26

empty 26

.0; 21/

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 into 26

(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .16; 0/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .11; 0/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .6; 0/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .1; 0/

(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .0; 16/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .0; 11/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .0; 6/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .0; 1/

(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)!
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .16; 26/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .11; 26/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .6; 26/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .1; 26/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)!
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .17; 26/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .12; 26/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .7; 26/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .2; 26/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)!
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .18; 26/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .13; 26/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .8; 26/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .3; 26/

solution using this approach starting with empty jugs, that is, at .0; 0/:
   ll 21(cid:0)(cid:0)(cid:0)! .21; 0/
   ll 21(cid:0)(cid:0)(cid:0)! .21; 21/
   ll 21(cid:0)(cid:0)(cid:0)! .21; 16/
   ll 21(cid:0)(cid:0)(cid:0)! .21; 11/
   ll 21(cid:0)(cid:0)(cid:0)! .21; 6/
   ll 21(cid:0)(cid:0)(cid:0)! .21; 1/
   ll 21(cid:0)(cid:0)(cid:0)! .21; 22/
   ll 21(cid:0)(cid:0)(cid:0)! .21; 17/
   ll 21(cid:0)(cid:0)(cid:0)! .21; 12/
   ll 21(cid:0)(cid:0)(cid:0)! .21; 7/
   ll 21(cid:0)(cid:0)(cid:0)! .21; 2/
   ll 21(cid:0)(cid:0)(cid:0)! .21; 23/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .0; 18/
   ll 21(cid:0)(cid:0)(cid:0)! .21; 18/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .0; 13/
   ll 21(cid:0)(cid:0)(cid:0)! .21; 13/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .0; 8/
   ll 21(cid:0)(cid:0)(cid:0)! .21; 8/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .0; 3/
the same approach works regardless of the jug capacities and even regardless of
the amount we   re trying to produce! simply repeat these two steps until the desired
amount of water is obtained:

(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .0; 17/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .0; 12/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .0; 7/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .0; 2/

(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .17; 0/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .12; 0/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .7; 0/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .2; 0/

(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .18; 0/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .13; 0/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .8; 0/
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)! .3; 0/

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 to 26

pour 21 to 26

.0; 22/

.0; 23/

empty 26

empty 26

empty 26

empty 26

empty 26

empty 26

empty 26

1. fill the smaller jug.

2. pour all the water in the smaller jug into the larger jug. if at any time the
larger jug becomes full, empty it out, and continue pouring the smaller jug
into the larger jug.

by the same reasoning as before, this method eventually generates every multiple   
up to the size of the larger jug   of the greatest common divisor of the jug capacities,
all the quantities we can possibly produce. no ingenuity is needed at all!

so now we have the complete water jug story:

theorem 9.2.5. suppose that we have water jugs with capacities a and b. for
any c 2   0::a  , it is possible to get c gallons in the size a jug iff c is a multiple of
gcd.a; b/.

   mcs        2017/6/5     19:42     page 313     #321

9.3. prime mysteries

313

9.2.4 properties of the greatest common divisor
it can help to have some basic gcd facts on hand:

lemma 9.2.6.
a) gcd.ka; kb/ d k (cid:1) gcd.a; b/ for all k > 0.
b) .d j a and d j b/ iff d j gcd.a; b/.
c) if gcd.a; b/ d 1 and gcd.a; c/ d 1, then gcd.a; bc/ d 1.
d) if a j bc and gcd.a; b/ d 1, then a j c.

showing how all these facts follow from theorem 9.2.2 that gcd is a linear com-

bination is a good exercise (problem 9.11).

these properties are also simple consequences of the fact that integers factor
into primes in a unique way (theorem 9.4.1). but we   ll need some of these facts
to prove unique factorization in section 9.4, so proving them by appeal to unique
factorization would be circular.

9.3 prime mysteries

some of the greatest mysteries and insights in number theory concern properties of
prime numbers:

de   nition 9.3.1. a prime is a number greater than 1 that is divisible only by itself
and 1. a number other than 0, 1, and (cid:0)1 that is not a prime is called composite.7
here are three famous mysteries:
twin prime conjecture there are in   nitely many primes p such that pc 2 is also
a prime.
in 1966, chen showed that there are in   nitely many primes p such that pc 2
is the product of at most two primes. so the conjecture is known to be almost
true!

conjectured inef   ciency of factoring given the product of two large primes n d
pq, there is no ef   cient procedure to recover the primes p and q. that is,
no polynomial time procedure (see section 3.5) is guaranteed to    nd p and

7so 0, 1, and (cid:0)1 are the only integers that are neither prime nor composite.

   mcs        2017/6/5     19:42     page 314     #322

314

chapter 9 number theory

q in a number of steps bounded by a polynomial in the length of the binary
representation of n (not n itself). the length of the binary representation at
most 1 c log2 n.
the best algorithm known is the    number    eld sieve,    which runs in time
proportional to:

e1:9.ln n/1=3.ln ln n/2=3

:

this number grows more rapidly than any polynomial in log n and is infea-
sible when n has 300 digits or more.
ef   cient factoring is a mystery of particular importance in computer science,
as we   ll explain later in this chapter.

goldbach   s conjecture we   ve already mentioned goldbach   s conjecture 1.1.6 sev-
eral times: every even integer greater than two is equal to the sum of two
primes. for example, 4 d 2 c 2, 6 d 3 c 3, 8 d 3 c 5, etc.
in 1939, schnirelman proved that every even number can be written as the
sum of not more than 300,000 primes, which was a start. today, we know
that every even number is the sum of at most 6 primes.

primes show up erratically in the sequence of integers. in fact, their distribution

seems almost random:

2; 3; 5; 7; 11; 13; 17; 19; 23; 29; 31; 37; 41; 43; : : : :

one of the great insights about primes is that their density among the integers has
a precise limit. namely, let (cid:25).n/ denote the number of primes up to n:

de   nition 9.3.2.

(cid:25).n/ wwd jfp 2   2::n   j p is primegj:

for example, (cid:25).1/ d 0; (cid:25).2/ d 1 and (cid:25).10/ d 4, because 2, 3, 5, and 7 are the
primes less than or equal to 10. step by step, (cid:25) grows erratically according to the
erratic spacing between successive primes, but its overall growth rate is known to
smooth out to be the same as the growth of the function n= ln n:

theorem 9.3.3 (prime number theorem).

lim
n!1

(cid:25).n/
n= ln n

d 1:

   mcs        2017/6/5     19:42     page 315     #323

9.4. the fundamental theorem of arithmetic

315

thus, primes gradually taper off. as a rule of thumb, about 1 integer out of every

ln n in the vicinity of n is a prime.

the prime number theorem was conjectured by legendre in 1798 and proved
a century later by de la vall  ee poussin and hadamard in 1896. however, after his
death, a notebook of gauss was found to contain the same conjecture, which he
apparently made in 1791 at age 15. (you have to feel sorry for all the otherwise
   great    mathematicians who had the misfortune of being contemporaries of gauss.)
a proof of the prime number theorem is beyond the scope of this text, but there
is a manageable proof (see problem 9.22) of a related result that is suf   cient for our
applications:

theorem 9.3.4 (chebyshev   s theorem on prime density). for n > 1,

(cid:25).n/ >

n

3 ln n

:

9.4 the fundamental theorem of arithmetic

there is an important fact about primes that you probably already know: every
positive integer number has a unique prime factorization. so every positive integer
can be built up from primes in exactly one way. these quirky prime numbers are
the building blocks for the integers.

since the value of a product of numbers is the same if the numbers appear in a
different order, there usually isn   t a unique way to express a number as a product
of primes. for example, there are three ways to write 12 as a product of primes:

12 d 2 (cid:1) 2 (cid:1) 3 d 2 (cid:1) 3 (cid:1) 2 d 3 (cid:1) 2 (cid:1) 2:

what   s unique about the prime factorization of 12 is that any product of primes
equal to 12 will have exactly one 3 and two 2   s. this means that if we sort the
primes by size, then the product really will be unique.

let   s state this more carefully. a sequence of numbers is weakly decreasing
when each number in the sequence is at least as big as the numbers after it. note
that a sequence of just one number as well as a sequence of no numbers   the empty
sequence   is weakly decreasing by this de   nition.

theorem 9.4.1. [fundamental theorem of arithmetic] every positive integer is a
product of a unique weakly decreasing sequence of primes.

   mcs        2017/6/5     19:42     page 316     #324

316

chapter 9 number theory

a prime for google
in late 2004 a billboard appeared in various locations around the country:

(cid:26)    rst 10-digit prime found

(cid:27)

. com

in consecutive digits of e

substituting the correct number for the expression in curly-braces produced the
url for a google employment page. the idea was that google was interested in
hiring the sort of people that could and would solve such a problem.
how hard is this problem? would you have to look through thousands or millions
or billions of digits of e to    nd a 10-digit prime? the rule of thumb derived from
the prime number theorem says that among 10-digit numbers, about 1 in

ln 1010 (cid:25) 23

is prime. this suggests that the problem isn   t really so hard! sure enough, the
   rst 10-digit prime in consecutive digits of e appears quite early:
e d2:718281828459045235360287471352662497757247093699959574966
9676277240766303535475945713821785251664274274663919320030
599218174135966290435729003342952605956307381323286279434 : : :

   mcs        2017/6/5     19:42     page 317     #325

9.4. the fundamental theorem of arithmetic

317

for example, 75237393 is the product of the weakly decreasing sequence of

primes

23; 17; 17; 11; 7; 7; 7; 3;

and no other weakly decreasing sequence of primes will give 75237393.8
notice that the theorem would be false if 1 were considered a prime; for example,
15 could be written as 5 (cid:1) 3, or 5 (cid:1) 3 (cid:1) 1, or 5 (cid:1) 3 (cid:1) 1 (cid:1) 1, . . . .
there is a certain wonder in unique factorization, especially in view of the prime
number mysteries we   ve already mentioned. it   s a mistake to take it for granted,
even if you   ve known it since you were in a crib.
in fact, unique factorization
actually fails for many integer-like sets of numbers, such as the complex numbers
of the form n c m
the fundamental theorem is also called the unique factorization theorem,
which is a more descriptive and less pretentious, name   but we really want to get
your attention to the importance and non-obviousness of unique factorization.

p(cid:0)5 for m; n 2 z (see problem 9.25).

9.4.1 proving unique factorization
the fundamental theorem is not hard to prove, but we   ll need a couple of prelim-
inary facts.
lemma 9.4.2. if p is a prime and p j ab, then p j a or p j b.
lemma 9.4.2 follows immediately from unique factorization: the primes in the
product ab are exactly the primes from a and from b. but proving the lemma this
way would be cheating: we   re going to need this lemma to prove unique factoriza-
tion, so it would be circular to assume it. instead, we   ll use the properties of gcd   s
and linear combinations to give an easy, noncircular way to prove lemma 9.4.2.
proof. one case is if gcd.a; p/ d p. then the claim holds, because a is a multiple
of p.
otherwise, gcd.a; p/    p. in this case gcd.a; p/ must be 1, since 1 and p are
the only positive divisors of p. now gcd.a; p/ is a linear combination of a and p,
so we have 1 d sa c tp for some s; t. then b d s.ab/ c .t b/p, that is, b is a
linear combination of ab and p. since p divides both ab and p, it also divides their
(cid:4)
linear combination b.

a routine induction argument extends this statement to:

8the    product    of just one number is de   ned to be that number, and the product of no numbers is
by convention de   ned to be 1. so each prime p is uniquely the product of the primes in the length-
one sequence consisting solely of p, and 1, which you will remember is not a prime, is uniquely the
product of the empty sequence.

   mcs        2017/6/5     19:42     page 318     #326

318

chapter 9 number theory

lemma 9.4.3. let p be a prime. if p j a1a2 (cid:1)(cid:1)(cid:1) an, then p divides some ai.
now we   re ready to prove the fundamental theorem of arithmetic.

proof. theorem 2.3.1 showed, using the well ordering principle, that every posi-
tive integer can be expressed as a product of primes. so we just have to prove this
expression is unique. we will use well ordering to prove this too.

the proof is by contradiction: assume, contrary to the claim, that there exist
positive integers that can be written as products of primes in more than one way.
by the well ordering principle, there is a smallest integer with this property. call
this integer n, and let

n d p1 (cid:1) p2 (cid:1)(cid:1)(cid:1) pj ;
d q1 (cid:1) q2 (cid:1)(cid:1)(cid:1) qk;

where both products are in weakly decreasing order and p1   q1.
if q1 d p1, then n=q1 would also be the product of different weakly decreasing
sequences of primes, namely,

p2 (cid:1)(cid:1)(cid:1) pj ;
q2 (cid:1)(cid:1)(cid:1) qk:

since n=q1 < n, this can   t be true, so we conclude that p1 < q1.

since the pi   s are weakly decreasing, all the pi   s are less than q1. but

q1 j n d p1 (cid:1) p2 (cid:1)(cid:1)(cid:1) pj ;

so lemma 9.4.3 implies that q1 divides one of the pi   s, which contradicts the fact
(cid:4)
that q1 is bigger than all them.

9.5 alan turing

the man pictured in figure 9.1 is alan turing, the most important    gure in the
history of computer science. for decades, his fascinating life story was shrouded
by government secrecy, societal taboo, and even his own deceptions.

at age 24, turing wrote a paper entitled on computable numbers, with an ap-
plication to the entscheidungsproblem. the crux of the paper was an elegant way
to model a computer in mathematical terms. this was a breakthrough, because it
allowed the tools of mathematics to be brought to bear on questions of computation.
for example, with his model in hand, turing immediately proved that there exist

   mcs        2017/6/5     19:42     page 319     #327

9.5. alan turing

319

figure 9.1 alan turing

problems that no computer can solve   no matter how ingenious the programmer.
turing   s paper is all the more remarkable because he wrote it in 1936, a full decade
before any electronic computer actually existed.

the word    entscheidungsproblem    in the title refers to one of the 28 mathemat-
ical problems posed by david hilbert in 1900 as challenges to mathematicians of
the 20th century. turing knocked that one off in the same paper. and perhaps
you   ve heard of the    church-turing thesis   ? same paper. so turing was a brilliant
guy who generated lots of amazing ideas. but this lecture is about one of turing   s
less-amazing ideas. it involved codes. it involved number theory. and it was sort
of stupid.

let   s look back to the fall of 1937. nazi germany was rearming under adolf
hitler, world-shattering war looked imminent, and   like us    alan turing was
pondering the usefulness of number theory. he foresaw that preserving military
secrets would be vital in the coming con   ict and proposed a way to encrypt com-
munications using number theory. this is an idea that has ricocheted up to our own
time. today, number theory is the basis for numerous public-key cryptosystems,
digital signature schemes, cryptographic hash functions, and electronic payment
systems. furthermore, military funding agencies are among the biggest investors
in cryptographic research. sorry, hardy!

soon after devising his code, turing disappeared from public view, and half a
century would pass before the world learned the full story of where he   d gone and

   mcs        2017/6/5     19:42     page 320     #328

320

chapter 9 number theory

what he did there. we   ll come back to turing   s life in a little while; for now, let   s
investigate the code turing left behind. the details are uncertain, since he never
formally published the idea, so we   ll consider a couple of possibilities.

9.5.1 turing   s code (version 1.0)
the    rst challenge is to translate a text message into an integer so we can perform
mathematical operations on it. this step is not intended to make a message harder
to read, so the details are not too important. here is one approach: replace each
letter of the message with two digits (a d 01, b d 02, c d 03, etc.) and string all
the digits together to form one huge number. for example, the message    victory   
could be translated this way:

v
! 22

i
09

c
03

t
20

o
15

r
18

y
25

turing   s code requires the message to be a prime number, so we may need to pad
the result with some more digits to make a prime. the prime number theorem
indicates that padding with relatively few digits will work. in this case, appending
the digits 13 gives the number 2209032015182513, which is prime.

unencoded message (which we want to keep secret),bm is the encrypted message

here is how the encryption process works. in the description below, m is the

(which the nazis may intercept), and k is the key.

beforehand the sender and receiver agree on a secret key, which is a large prime k.

encryption the sender encrypts the message m by computing:

bm d m (cid:1) k
decryption the receiver decryptsbm by computing:
bm
d m:

k

for example, suppose that the secret key is the prime number k d 22801763489
and the message m is    victory.    then the encrypted message is:

bm d m (cid:1) k
d 2209032015182513 (cid:1) 22801763489
d 50369825549820718594667857

there are a couple of basic questions to ask about turing   s code.

   mcs        2017/6/5     19:42     page 321     #329

9.5. alan turing

321

1. how can the sender and receiver ensure that m and k are prime numbers, as

required?
the general problem of determining whether a large number is prime or com-
posite has been studied for centuries, and tests for primes that worked well
in practice were known even in turing   s time. in the past few decades, very
fast primality tests have been found as described in the text box below.

p

2 to(cid:4)p

primality testing
it   s easy to see that an integer n is prime iff it is not divisible by any number from

n   (see problem 1.14). of course this naive way to test if n is prime takes

the theoretical possibility of a wrong answer was

n steps, which is exponential in the size of n measured by the number
more than
of digits in the decimal or binary representation of n. through the early 1970   s,
no prime testing procedure was known that would never blow up like this.
in 1974, volker strassen invented a simple, fast probabilistic primality test.
strassens   s test gives the right answer when applied to any prime number, but
has some id203 of giving a wrong answer on a nonprime number. however,
the id203 of a wrong answer on any given number is so tiny that relying on
the answer is the best bet you   ll ever make.
still,
intellectually
bothersome   even if the id203 of being wrong was a lot less than the prob-
ability of an undetectable computer hardware error leading to a wrong answer.
finally in 2002, in a breakthrough paper beginning with a quote from gauss em-
phasizing the importance and antiquity of primality testing, manindra agrawal,
neeraj kayal, and nitin saxena presented an amazing, thirteen line description of
a polynomial time primality test.
this de   nitively places primality testing way below the exponential effort ap-
parently needed for sat and similar problems. the polynomial bound on the
agrawal et al. test had degree 12, and subsequent research has reduced the de-
gree to 5, but this is still too large to be practical, and probabilistic primality tests
remain the method used in practice today. it   s plausible that the degree bound can
be reduced a bit more, but matching the speed of the known probabilistic tests
remains a daunting challenge.

2. is turing   s code secure?

the nazis see only the encrypted messagebm d m (cid:1) k, so recovering the
original message m requires factoringbm. despite immense efforts, no really

ef   cient factoring algorithm has ever been found. it appears to be a funda-

   mcs        2017/6/5     19:42     page 322     #330

322

chapter 9 number theory

mentally dif   cult problem. so, although a breakthrough someday can   t be
ruled out, the conjecture that there is no ef   cient way to factor is widely
accepted.
in effect, turing   s code puts to practical use his discovery that
there are limits to the power of computation. thus, provided m and k are
suf   ciently large, the nazis seem to be out of luck!

this all sounds promising, but there is a major    aw in turing   s code.

9.5.2 breaking turing   s code (version 1.0)
let   s consider what happens when the sender transmits a second message using
turing   s code and the same key. this gives the nazis two encrypted messages to
look at:

the greatest common divisor of the two encrypted messages, cm1 and cm2, is the

cm1 d m1 (cid:1) k

cm2 d m2 (cid:1) k

secret key k. and, as we   ve seen, the gcd of two numbers can be computed very
ef   ciently. so after the second message is sent, the nazis can recover the secret key
and read every message!

and

a mathematician as brilliant as turing is not likely to have overlooked such a
glaring problem, and we can guess that he had a slightly different system in mind,
one based on modular arithmetic.

9.6 modular arithmetic

on the    rst page of his masterpiece on number theory, disquisitiones arithmeticae,
gauss introduced the notion of    congruence.    now, gauss is another guy who
managed to cough up a half-decent idea every now and then, so let   s take a look
at this one. gauss said that a is congruent to b modulo n iff n j .a (cid:0) b/. this is
written

for example:
it   s not useful to allow a moduli n   0, and so we will assume from now on that
moduli are positive.

29   15

.mod 7/

.mod n/:
because 7 j .29 (cid:0) 15/:

a   b

there is a close connection between congruences and remainders:

lemma 9.6.1 (remainder).

a   b

.mod n/

iff

rem.a; n/ d rem.b; n/:

   mcs        2017/6/5     19:42     page 323     #331

9.6. modular arithmetic

323

proof. by the division theorem 9.1.4, there exist unique pairs of integers q1; r1
and q2; r2 such that:

a d q1n c r1
b d q2n c r2;

where r1; r2 2   0::n/. subtracting the second equation from the    rst gives:

a (cid:0) b d .q1 (cid:0) q2/n c .r1 (cid:0) r2/;

where r1 (cid:0) r2 is in the interval .(cid:0)n; n/. now a   b .mod n/ if and only if n
divides the left-hand side of this equation. this is true if and only if n divides
the right-hand side, which holds if and only if r1 (cid:0) r2 is a multiple of n. but the
only multiple of n in .(cid:0)n; n/ is 0, so r1 (cid:0) r2 must in fact equal 0, that is, when
r1 wwd rem.a; n/ d r2 wwd rem.b; n/.
(cid:4)
so we can also see that

29   15 .mod 7/

because rem.29; 7/ d 1 d rem.15; 7/:

notice that even though    (mod 7)    appears on the end, the   symbol isn   t any more
strongly associated with the 15 than with the 29. it would probably be clearer to
write 29  mod 7 15, for example, but the notation with the modulus at the end is
   rmly entrenched, and we   ll just live with it.

the remainder lemma 9.6.1 explains why the congruence relation has proper-
ties like an equality relation. in particular, the following properties9 follow imme-
diately:

lemma 9.6.2.

a   a .mod n/
a   b iff b   a .mod n/
.mod n/

.a   b and b   c/ implies a   c

(re   exivity)
(symmetry)
(transitivity)

we   ll make frequent use of another immediate corollary of the remainder lemma 9.6.1:

corollary 9.6.3.

a   rem.a; n/

.mod n/

9binary relations with these properties are called equivalence relations, see section 10.10.

   mcs        2017/6/5     19:42     page 324     #332

324

chapter 9 number theory

still another way to think about congruence modulo n is that it de   nes a partition
of the integers into n sets so that congruent numbers are all in the same set. for
example, suppose that we   re working modulo 3. then we can partition the integers
into 3 sets as follows:

f
f
f

: : : ; (cid:0)6; (cid:0)3; 0; 3; 6;
: : : ; (cid:0)5; (cid:0)2; 1; 4; 7; 10;
: : : ; (cid:0)4; (cid:0)1; 2; 5; 8; 11;

9;

: : :
: : :
: : :

g
g
g

according to whether their remainders on division by 3 are 0, 1, or 2. the upshot
is that when arithmetic is done modulo n, there are really only n different kinds
of numbers to worry about, because there are only n possible remainders. in this
sense, modular arithmetic is a simpli   cation of ordinary arithmetic.

the next most useful fact about congruences is that they are preserved by addi-
tion and multiplication:
lemma 9.6.4 (congruence). if a   b .mod n/ and c   d .mod n/, then

a c c   b c d

(9.7)
(9.8)
proof. let   s start with 9.7. since a   b .mod n/, we have by de   nition that
n j .b (cid:0) a/ d .b c c/ (cid:0) .a c c/, so

ac   bd

.mod n/;

.mod n/:

since c   d .mod n/, the same reasoning leads to

now transitivity (lemma 9.6.2) gives

a c c   b c c

.mod n/:

b c c   b c d

.mod n/:

a c c   b c d

.mod n/:

the proof for 9.8 is virtually identical, using the fact that if n divides .b (cid:0) a/,
then it certainly also divides .bc (cid:0) ac/.
(cid:4)

9.7 remainder arithmetic

the congruence lemma 9.6.1 says that two numbers are congruent iff their remain-
ders are equal, so we can understand congruences by working out arithmetic with
remainders. and if all we want is the remainder modulo n of a series of additions,
multiplications, subtractions applied to some numbers, we can take remainders at
every step so that the entire computation only involves number in the range   0::n/.

   mcs        2017/6/5     19:42     page 325     #333

9.7. remainder arithmetic

325

general principle of remainder arithmetic
to    nd the remainder on division by n of the result of a series of additions and
multiplications, applied to some integers

(cid:15) replace each integer operand by its remainder on division by n,
(cid:15) keep each result of an addition or multiplication in the range   0::n/ by im-
mediately replacing any result outside that range by its remainder on divi-
sion by n.

for example, suppose we want to    nd

rem..444273456789 c 155558585555/4036666666; 36/:

(9.9)

this looks really daunting if you think about computing these large powers and
then taking remainders. for example, the decimal representation of 444273456789
has about 20 million digits, so we certainly don   t want to go that route. but re-
membering that integer exponents specify a series of multiplications, we follow the
general principle and replace the numbers being multiplied by their remainders.
since rem.44427; 36/ d 3; rem.15555858; 36/ d 6, and rem.403; 36/ d 7, we
   nd that (9.9) equals the remainder on division by 36 of
.33456789 c 65555/76666666:

(9.10)

that   s a little better, but 33456789 has about a million digits in its decimal represen-
tation, so we still don   t want to compute that. but let   s look at the remainders of
the    rst few powers of 3:

rem.3; 36/ d 3
rem.32; 36/ d 9
rem.33; 36/ d 27
rem.34; 36/ d 9:

we got a repeat of the second step, rem.32; 36/ after just two more steps. this
means means that starting at 32, the sequence of remainders of successive powers
of 3 will keep repeating every 2 steps. so a product of an odd number of at least
three 3   s will have the same remainder on division by 36 as a product of just three
3   s. therefore,

rem.33456789; 36/ d rem.33; 36/ d 27:

   mcs        2017/6/5     19:42     page 326     #334

326

chapter 9 number theory

what a win!
powers of 6 are even easier because rem.62; 36/ d 0, so 0   s keep repeating after
the second step. powers of 7 repeat after six steps, but on the    fth step you get a 1,
that is rem.76; 36/ d 1, so (9.10) successively simpli   es to be the remainders of
the following terms:

.33456789 c 65555/76666666
.33 c 62 (cid:1) 65553/.76/1111111
.33 c 0 (cid:1) 65553/11111111
d 27:

notice that it would be a disastrous blunder to replace an exponent by its re-
mainder. the general principle applies to numbers that are operands of plus and
times, whereas the exponent is a number that controls how many multiplications to
perform. watch out for this.
9.7.1 the ring zn
it   s time to be more precise about the general principle and why it works. to begin,
let   s introduce the notation cn for doing an addition and then immediately taking
a remainder on division by n, as speci   ed by the general principle; likewise for
multiplying:

i cn j wwd rem.i c j; n/;
i (cid:1)n j wwd rem.ij; n/:

now the general principle is simply the repeated application of the following

lemma.

lemma 9.7.1.

rem.i c j; n/ d rem.i; n/ cn rem.j; n/;
rem.ij; n/ d rem.i; n/ (cid:1)n rem.j; n/:

(9.11)
(9.12)
proof. by corollary 9.6.3, i   rem.i; n/ and j   rem.j; n/, so by the congru-
ence lemma 9.6.4

i c j   rem.i; n/ c rem.j; n/

.mod n/:

by corollary 9.6.3 again, the remainders on each side of this congruence are equal,
(cid:4)
which immediately gives (9.11). an identical proof applies to (9.12).

   mcs        2017/6/5     19:42     page 327     #335

9.8. turing   s code (version 2.0)

327

the set of integers in the range   0::n/ together with the operations cn and (cid:1)n is
referred to as zn, the ring of integers modulo n. as a consequence of lemma 9.7.1,
the familiar rules of arithmetic hold in zn, for example:
.i (cid:1)n j / (cid:1)n k d i (cid:1)n .j (cid:1)n k/:

these subscript-n   s on arithmetic operations really clog things up, so instead

we   ll just write    (zn)    on the side to get a simpler looking equation:

.i (cid:1) j / (cid:1) k d i (cid:1) .j (cid:1) k/ .zn/:

in particular, all of the following equalities10 are true in zn:

.i (cid:1) j / (cid:1) k d i (cid:1) .j (cid:1) k/

.i c j / c k d i c .j c k/

1 (cid:1) k d k
0 c k d k
k c .(cid:0)k/ d 0
i c j d j c i
i (cid:1) .j c k/ d .i (cid:1) j / c .i (cid:1) k/
i (cid:1) j d j (cid:1) i

(associativity of (cid:1));
(associativity of c);
(identity for (cid:1));
(identity for c);
(inverse for c);
(commutativity of c)
(distributivity);
(commutativity of (cid:1))

associativity implies the familiar fact that it   s safe to omit the parentheses in

products:

k1 (cid:1) k2 (cid:1) (cid:1)(cid:1)(cid:1) (cid:1) km

comes out the same in zn no matter how it is parenthesized.

the overall theme is that remainder arithmetic is a lot like ordinary arithmetic.

but there are a couple of exceptions we   re about to examine.

9.8 turing   s code (version 2.0)

in 1940, france had fallen before hitler   s army, and britain stood alone against
the nazis in western europe. british resistance depended on a steady    ow of sup-
10a set with addition and multiplication operations that satisfy these equalities is known as a
in addition to zn, the integers, rationals, reals, and polynomials with integer
commutative ring.
coef   cients are all examples of commutative rings. on the other hand, the set ft; fg of truth values
with or for addition and and for multiplication is not a commutative ring because it fails to satisfy
one of these equalities. the n (cid:2) n matrices of integers are not a commutative ring because they fail
to satisfy another one of these equalities.

   mcs        2017/6/5     19:42     page 328     #336

328

chapter 9 number theory

plies brought across the north atlantic from the united states by convoys of ships.
these convoys were engaged in a cat-and-mouse game with german    u-boats   
   submarines   which prowled the atlantic, trying to sink supply ships and starve
britain into submission. the outcome of this struggle pivoted on a balance of in-
formation: could the germans locate convoys better than the allies could locate
u-boats, or vice versa?

germany lost.
a critical reason behind germany   s loss was not made public until 1974: ger-
many   s naval code, enigma, had been broken by the polish cipher bureau,11 and
the secret had been turned over to the british a few weeks before the nazi invasion
of poland in 1939. throughout much of the war, the allies were able to route con-
voys around german submarines by listening in to german communications. the
british government didn   t explain how enigma was broken until 1996. when the
story was    nally released (by the us), it revealed that alan turing had joined the
secret british codebreaking effort at bletchley park in 1939, where he became the
lead developer of methods for rapid, bulk decryption of german enigma messages.
turing   s enigma deciphering was an invaluable contribution to the allied victory
over hitler.

governments are always tight-lipped about cryptography, but the half-century
of of   cial silence about turing   s role in breaking enigma and saving britain may
be related to some disturbing events after the war   more on that later. let   s get
back to number theory and consider an alternative interpretation of turing   s code.
perhaps we had the basic idea right (multiply the message by the key), but erred in
using conventional arithmetic instead of modular arithmetic. maybe this is what
turing meant:

beforehand the sender and receiver agree on a large number n, which may be
made public. (this will be the modulus for all our arithmetic.) as in version
1.0, they also agree that some prime number k < n will be the secret key.

encryption as in version 1.0, the message m should be another prime in   0::n/.

the sender encrypts the message m to producebm by computing mk, but this

time modulo n:

bm wwd m (cid:1) k .zn/

(9.13)

decryption (uh-oh.)

the decryption step is a problem. we might hope to decrypt in the same way as

before by dividing the encrypted messagebm by the key k. the dif   culty is thatbm

11see http://en.wikipedia.org/wiki/polish cipher bureau.

   mcs        2017/6/5     19:42     page 329     #337

9.9. multiplicative inverses and cancelling

is the remainder when mk is divided by n. so dividingbm by k might not even give

329

us an integer!

this decoding dif   culty can be overcome with a better understanding of when it

is ok to divide by k in modular arithmetic.

9.9 multiplicative inverses and cancelling

the multiplicative inverse of a number x is another number x

(cid:0)1 such that

(cid:0)1 (cid:1) x d 1:

x

from now on, when we say    inverse,    we mean multiplicative (not relational) in-
verse.

for example, over the rational numbers, 1=3 is, of course, an inverse of 3, since,

(cid:1) 3 d 1:

1

3

in fact, with the sole exception of 0, every rational number n=m has an inverse,
namely, m=n. on the other hand, over the integers, only 1 and -1 have inverses.
over the ring zn, things get a little more complicated. for example, 2 is a multi-
plicative inverse of 8 in z15, since

2 (cid:1) 8 d 1 .z15/:

on the other hand, 3 does not have a multiplicative inverse in z15. we can prove

this by contradiction: suppose there was an inverse j for 3, that is

1 d 3 (cid:1) j .z15/:

then multiplying both sides of this equality by 5 leads directly to the contradiction
5 d 0:

5 d 5 (cid:1) .3 (cid:1) j /
d .5 (cid:1) 3/ (cid:1) j
d 0 (cid:1) j d 0 .z15/:

so there can   t be any such inverse j .

so some numbers have inverses modulo 15 and others don   t. this may seem a

little unsettling at    rst, but there   s a simple explanation of what   s going on.

   mcs        2017/6/5     19:42     page 330     #338

330

chapter 9 number theory

9.9.1 relative primality
integers that have no prime factor in common are called relatively prime.12 this
is the same as having no common divisor (prime or not) greater than 1. it   s also
equivalent to saying gcd.a; b/ d 1.
for example, 8 and 15 are relatively prime, since gcd.8; 15/ d 1. on the other
hand, 3 and 15 are not relatively prime, since gcd.3; 15/ d 3    1. this turns out
to explain why 8 has an inverse over z15 and 3 does not.
lemma 9.9.1. if k 2   0::n/ is relatively prime to n, then k has an inverse in zn.13
proof. if k is relatively prime to n, then gcd.n; k/ d 1 by de   nition of gcd. this
means we can use the pulverizer from section 9.2.2 to    nd a linear combination of
n and k equal to 1:

sn c t k d 1:

so applying the general principle of remainder arithmetic (lemma 9.7.1), we get

.rem.s; n/ (cid:1) rem.n; n// c .rem.t; n/ (cid:1) rem.k; n// d 1 .zn/:

but rem.n; n/ d 0, and rem.k; n/ d k since k 2   0::n/, so we get

rem.t; n/ (cid:1) k d 1 .zn/:

thus, rem.t; n/ is a multiplicative inverse of k.

(cid:4)

by the way, it   s nice to know that when they exist, inverses are unique. that is,
lemma 9.9.2. if i and j are both inverses of k in zn, then i d j .
proof.
i d i (cid:1) 1 d i (cid:1) .k (cid:1) j / d .i (cid:1) k/ (cid:1) j d 1 (cid:1) j d j .zn/:

(cid:4)

so the proof of lemma 9.9.1 shows that for any k relatively prime to n, the
inverse of k in zn is simply the remainder of a coef   cient we can easily    nd using
the pulverizer.

working with a prime modulus is attractive here because, like the rational and
real numbers, when p is prime, every nonzero number has an inverse in zp. but
arithmetic modulo a composite is really only a little more painful than working
modulo a prime   though you may think this is like the doctor saying,    this is only
going to hurt a little,    before he jams a big needle in your arm.

12other texts call them coprime.
13this works even in the extreme case that n d 1, because 0   1 .mod 1/, so it is consistent to
de   ne 0 to be its own inverse in z1.

   mcs        2017/6/5     19:42     page 331     #339

9.9. multiplicative inverses and cancelling

331

9.9.2 cancellation
another sense in which real numbers are nice is that it   s ok to cancel common
in other words, if we know that t r d t s for real numbers r; s; t, then
factors.
as long as t    0, we can cancel the t   s and conclude that r d s.
in general,
cancellation is not valid in zn. for example,

3 (cid:1) 10 d 3 (cid:1) 5 .z15/;

(9.14)

but cancelling the 3   s leads to the absurd conclusion that 10 equals 5.

the fact that multiplicative terms cannot be cancelled is the most signi   cant way

in which zn arithmetic differs from ordinary integer arithmetic.
de   nition 9.9.3. a number k is cancellable in zn iff

k (cid:1) a d k (cid:1) b

implies a d b .zn/

for all a; b 2   0::n/.
if a number is relatively prime to 15, it can be cancelled by multiplying by its

inverse. so cancelling works for numbers that have inverses:
lemma 9.9.4. if k has an inverse in zn, then it is cancellable.

but 3 is not relatively prime to 15, and that   s why it is not cancellable. more
generally, if k is not relatively prime to n, then we can show it isn   t cancellable in
zn in the same way we showed that 3 is not cancellable in (9.14).
to summarize, we have
theorem 9.9.5. the following are equivalent for k 2   0::n/:14

gcd.k; n/ d 1;
k has an inverse in zn;
k is cancellable in zn:

9.9.3 decrypting (version 2.0)
multiplicative inverses are the key to decryption in turing   s code. speci   cally,
we can recover the original message by multiplying the encoded message by the
zn-inverse j of the key:

bm (cid:1) j d .m (cid:1) k/ (cid:1) j d m (cid:1) .k (cid:1) j / d m (cid:1) 1 d m .zn/:

so all we need to decrypt the message is to    nd an inverse of the secret key k, which
will be easy using the pulverizer   providing k has an inverse. but k is positive and
less than the modulus n, so one simple way to ensure that k is relatively prime to
the modulus is to have n be a prime number.
14this works even when n d 1   see the footnote following lemma 9.9.1.

   mcs        2017/6/5     19:42     page 332     #340

332

chapter 9 number theory

9.9.4 breaking turing   s code (version 2.0)
the germans didn   t bother to encrypt their weather reports with the highly-secure
enigma system. after all, so what if the allies learned that there was rain off the
south coast of iceland? but amazingly, this practice provided the british with a
critical edge in the atlantic naval battle during 1941.

the problem was that some of those weather reports had originally been trans-
mitted using enigma from u-boats out in the atlantic. thus, the british obtained
both unencrypted reports and the same reports encrypted with enigma. by com-
paring the two, the british were able to determine which key the germans were
using that day and could read all other enigma-encoded traf   c. today, this would
be called a known-plaintext attack.

let   s see how a known-plaintext attack would work against turing   s code. sup-

pose that the nazis know both the plain text m and its

bm d m (cid:1) k .zn/;

and since m is positive and less than the prime n, the nazis can use the pulverizer
to    nd the zn-inverse j of m. now

j (cid:1)bm d j (cid:1) .m (cid:1) k/ d .j (cid:1) m/ (cid:1) k d 1 (cid:1) k d k .zn/:

so by computing j (cid:1)bm d k .zn/, the nazis get the secret key and can then decrypt

any message!

this is a huge vulnerability, so turing   s hypothetical version 2.0 code has no
practical value. fortunately, turing got better at cryptography after devising this
code; his subsequent deciphering of enigma messages surely saved thousands of
lives, if not the whole of britain.

9.9.5 turing postscript
a few years after the war, turing   s home was robbed. detectives soon determined
that a former homosexual lover of turing   s had conspired in the robbery. so they
arrested him   that is, they arrested alan turing   because at that time in britain,
homosexuality was a crime punishable by up to two years in prison. turing was
sentenced to a hormonal    treatment    for his homosexuality: he was given estrogen
injections. he began to develop breasts.

three years later, alan turing, the founder of computer science, was dead. his
mother explained what happened in a biography of her own son. despite her re-
peated warnings, turing carried out chemistry experiments in his own home. ap-
parently, her worst fear was realized: by working with potassium cyanide while
eating an apple, he poisoned himself.

   mcs        2017/6/5     19:42     page 333     #341

9.10. euler   s theorem

333

however, turing remained a puzzle to the very end. his mother was a devout
woman who considered suicide a sin. and, other biographers have pointed out,
turing had previously discussed committing suicide by eating a poisoned apple.
evidently, alan turing, who founded computer science and saved his country, took
his own life in the end, and in just such a way that his mother could believe it was
an accident.

turing   s last project before he disappeared from public view in 1939 involved the
construction of an elaborate mechanical device to test a mathematical conjecture
called the riemann hypothesis. this conjecture    rst appeared in a sketchy paper by
bernhard riemann in 1859 and is now one of the most famous unsolved problems
in mathematics.

9.10 euler   s theorem

the rsa cryptosystem examined in the next section, and other current schemes
for encoding secret messages, involve computing remainders of numbers raised to
large powers. a basic fact about remainders of powers follows from a theorem due
to euler about congruences.

de   nition 9.10.1. for n > 0, de   ne

(cid:30).n/ wwd the number of integers in   0::n/, that are relatively prime to n.

this function (cid:30) is known as euler   s (cid:30) function.15
for example, (cid:30).7/ d 6 because all 6 positive numbers in   0::7/ are relatively
prime to the prime number 7. only 0 is not relatively prime to 7. also, (cid:30).12/ d 4
since 1, 5, 7, and 11 are the only numbers in   0::12/ that are relatively prime to 12.16
more generally, if p is prime, then (cid:30).p/ d p (cid:0) 1 since every positive number in
  0::p/ is relatively prime to p. when n is composite, however, the (cid:30) function gets
a little complicated. we   ll get back to it in the next section.

euler   s theorem is traditionally stated in terms of congruence:

theorem (euler   s theorem). if n and k are relatively prime, then

k(cid:30).n/   1

.mod n/:

(9.15)

things get simpler when we rephrase euler   s theorem in terms of zn.
15some texts call it euler   s totient function.
16also, (cid:30).1/ d 1, but since we make no use of this fact, it only merits a footnote.

   mcs        2017/6/5     19:42     page 334     #342

334

chapter 9 number theory

the riemann hypothesis
the formula for the sum of an in   nite geometric series says:

1 c x c x2 c x3 c (cid:1)(cid:1)(cid:1) d 1
1 (cid:0) x

:

substituting x d 1
sequence of equations:

2s , x d 1

3s , x d 1

5s , and so on for each prime number gives a

1 c 1
2s
1 c 1
3s
1 c 1
5s

c 1
22s
c 1
32s
c 1
52s

c 1
23s
c 1
33s
c 1
53s

c (cid:1)(cid:1)(cid:1) d
c (cid:1)(cid:1)(cid:1) d
c (cid:1)(cid:1)(cid:1) d

:::

1

1

1 (cid:0) 1=2s
1 (cid:0) 1=3s
1 (cid:0) 1=5s

1

multiplying together all the left-hand sides and all the right-hand sides gives:

 

1x

nd1

1
ns

d y

p2primes

 

:

1

1 (cid:0) 1=ps

the sum on the left is obtained by multiplying out all the in   nite series and ap-
plying the fundamental theorem of arithmetic. for example, the term 1=300s
in the sum is obtained by multiplying 1=22s from the    rst equation by 1=3s in
the second and 1=52s in the third. riemann noted that every prime appears in the
expression on the right. so he proposed to learn about the primes by studying
the equivalent, but simpler expression on the left. in particular, he regarded s as
a complex number and the left side as a function (cid:16).s/. riemann found that the
distribution of primes is related to values of s for which (cid:16).s/ d 0, which led to
his famous conjecture:

de   nition 9.9.6. the riemann hypothesis: every nontrivial zero of the zeta
function (cid:16).s/ lies on the line s d 1=2 c ci in the complex plane.
a proof would immediately imply, among other things, a strong form of the prime
number theorem.
researchers continue to work intensely to settle this conjecture, as they have for
over a century. it is another of the millennium problems whose solver will earn
$1,000,000 from the clay institute.

   mcs        2017/6/5     19:42     page 335     #343

9.10. euler   s theorem

335

de   nition 9.10.2. let z(cid:3)
z(cid:3)

n

consequently,

n be the integers in   0::n/, that are relatively prime to n:17
wwd fk 2   0::n/ j gcd.k; n/ d 1g:

(9.16)

(cid:30).n/ d    z(cid:3)

n

     :

theorem 9.10.3 (euler   s theorem for zn). for all k 2 z(cid:3)
n,

k(cid:30).n/ d 1 .zn/:

(9.17)

theorem 9.10.3 will follow from two very easy lemmas.
let   s start by observing that z(cid:3)
lemma 9.10.4. if j; k 2 z(cid:3)
there are lots of easy ways to prove this (see problem 9.69).

n, then j (cid:1)n k 2 z(cid:3)
n.

n is closed under multiplication in zn:

de   nition 9.10.5. for any element k and subset s of zn, let

ks wwd fk (cid:1)n s j s 2 sg:

lemma 9.10.6. if k 2 z(cid:3)

n and s   zn, then
jksj d jsj:

proof. since k 2 z(cid:3)

n, by theorem 9.9.5 it is cancellable. therefore,

  ks d k t .zn/  

implies

s d t:

so multiplying by k in zn maps all the elements of s to distinct elements of ks,
(cid:4)
which implies s and ks are the same size.
corollary 9.10.7. if k 2 z(cid:3)

n, then

proof. a product of elements in z(cid:3)
then kz(cid:3)
n
be equal.

n. but by lemma 9.10.6, kz(cid:3)

  z(cid:3)

n by lemma 9.10.4. so if k 2 z(cid:3)
n,
n are the same size, so they must
(cid:4)

n

kz(cid:3)
d z(cid:3)
n:
n remains in z(cid:3)
n and z(cid:3)

now we can complete the proof of euler   s theorem 9.10.3 for zn:
17some other texts use the notation n

(cid:3) for z(cid:3)
n.

   mcs        2017/6/5     19:42     page 336     #344

336

chapter 9 number theory

proof. let
be the product in zn of all the numbers in z(cid:3)

p wwd k1 (cid:1) k2 (cid:1)(cid:1)(cid:1) k(cid:30).n/ .zn/

n. let

q wwd .k (cid:1) k1/ (cid:1) .k (cid:1) k2/(cid:1)(cid:1)(cid:1) .k (cid:1) k(cid:30).n// .zn/

for some k 2 z(cid:3)

n. factoring out k   s immediately gives

q d k(cid:30).n/p .zn/:

but q is the same as the product of the numbers in kz(cid:3)
n, so we
realize that q is the product of the same numbers as p , just in a different order.
altogether, we have

n, and kz(cid:3)

d z(cid:3)

n

p d q d k(cid:30).n/p .zn/:

furthermore, p 2 z(cid:3)
of this equality, giving

n by lemma 9.10.4, and so it can be cancelled from both sides

1 d k(cid:30).n/ .zn/:

(cid:4)

euler   s theorem offers another way to    nd inverses modulo n: if k is relatively
prime to n, then k(cid:30).n/(cid:0)1 is a zn-inverse of k, and we can compute this power of
k ef   ciently using fast exponentiation. however, this approach requires computing
(cid:30).n/. in the next section, we   ll show that computing (cid:30).n/ is easy if we know the
prime factorization of n. but we know that    nding the factors of n is generally hard
to do when n is large, and so the pulverizer remains the best approach to computing
inverses modulo n.

fermat   s little theorem
for the record, we mention a famous special case of euler   s theorem that was
known to fermat a century earlier.

corollary 9.10.8 (fermat   s little theorem). suppose p is a prime and k is not a
multiple of p. then

kp(cid:0)1   1

.mod p/:

9.10.1 computing euler   s (cid:30) function
rsa works using arithmetic modulo the product of two large primes, so we begin
with an elementary explanation of how to compute (cid:30).pq/ for primes p and q:

   mcs        2017/6/5     19:42     page 337     #345

337

9.10. euler   s theorem

lemma 9.10.9.

(cid:30).pq/ d .p (cid:0) 1/.q (cid:0) 1/

for primes p    q.
proof. since p and q are prime, any number that is not relatively prime to pq must
be a multiple of p or a multiple of q. among the pq numbers in   0::pq/, there are
precisely q multiples of p and p multiples of q. since p and q are relatively prime,
the only number in   0::pq/ that is a multiple of both p and q is 0. hence, there are
p c q (cid:0) 1 numbers in   0::pq/ that are not relatively prime to n. this means that

(cid:30).pq/ d pq (cid:0) .p c q (cid:0) 1/
d .p (cid:0) 1/.q (cid:0) 1/;

as claimed.18

(cid:4)

the following theorem provides a way to calculate (cid:30).n/ for arbitrary n.

theorem 9.10.10.
(a) if p is a prime, then (cid:30).pk/ d pk (cid:0) pk(cid:0)1 for k (cid:21) 1.
(b) if a and b are relatively prime, then (cid:30).ab/ d (cid:30).a/(cid:30).b/.
here   s an example of using theorem 9.10.10 to compute (cid:30).300/:

(cid:30).300/ d (cid:30).22 (cid:1) 3 (cid:1) 52/

d (cid:30).22/ (cid:1) (cid:30).3/ (cid:1) (cid:30).52/
d .22 (cid:0) 21/.31 (cid:0) 30/.52 (cid:0) 51/
d 80:

(by theorem 9.10.10.(b))
(by theorem 9.10.10.(a))

note that lemma 9.10.9 also follows as a special case of theorem 9.10.10.(b),
since we know that (cid:30).p/ d p (cid:0) 1 for any prime p.
to prove theorem 9.10.10.(a), notice that every pth number among the pk num-
bers in   0::pk/ is divisible by p, and only these are divisible by p. so 1=p of these
numbers are divisible by p and the remaining ones are not. that is,

(cid:30).pk/ d pk (cid:0) .1=p/pk d pk (cid:0) pk(cid:0)1:

we   ll leave a proof of theorem 9.10.10.(b) to problem 9.63.

as a consequence of theorem 9.10.10, we have

18this proof previews a kind of counting argument that we will explore more fully in part iii.

   mcs        2017/6/5     19:42     page 338     #346

338

chapter 9 number theory

corollary 9.10.11. for any number n, if p1, p2, . . . , pj are the (distinct) prime
factors of n, then

 
1 (cid:0) 1

  
1 (cid:0) 1

 (cid:1)(cid:1)(cid:1) 

p1

p2

1 (cid:0) 1

pj

 

:

(cid:30).n/ d n

we   ll give another proof of corollary 9.10.11 based on rules for counting in

section 15.9.5.

9.11 rsa public key encryption

turing   s code did not work as he hoped. however, his essential idea   using num-
ber theory as the basis for cryptography   succeeded spectacularly in the decades
after his death.

in 1977, ronald rivest, adi shamir, and leonard adleman at mit proposed a
highly secure cryptosystem, called rsa, based on number theory. the purpose of
the rsa scheme is to transmit secret messages over public communication chan-
nels. as with turing   s codes, the messages transmitted are nonnegative integers of
some    xed size.

moreover, rsa has a major advantage over traditional codes: the sender and
receiver of an encrypted message need not meet beforehand to agree on a secret key.
rather, the receiver has both a private key, which they guard closely, and a public
key, which they distribute as widely as possible. a sender wishing to transmit a
secret message to the receiver encrypts their message using the receiver   s widely-
distributed public key. the receiver can then decrypt the received message using
their closely held private key. the use of such a public key cryptography system
allows you and amazon, for example, to engage in a secure transaction without
meeting up beforehand in a dark alley to exchange a key.

interestingly, rsa does not operate modulo a prime, as turing   s hypothetical
version 2.0 may have, but rather modulo the product of two large primes   typically
primes that are hundreds of digits long. also, instead of encrypting by multiplica-
tion with a secret key, rsa exponentiates to a secret power   which is why euler   s
theorem is central to understanding rsa.

the scheme for rsa public key encryption appears in the box.
if the message m is relatively prime to n, then a simple application of euler   s
theorem implies that this way of decoding the encrypted message indeed repro-
duces the original unencrypted message. in fact, the decoding always works   even
in (the highly unlikely) case that m is not relatively prime to n. the details are
worked out in problem 9.84.

   mcs        2017/6/5     19:42     page 339     #347

9.11. rsa public key encryption

339

the rsa cryptosystem
a receiver who wants to be able to receive secret numerical messages creates a
private key, which they keep secret, and a public key, which they make publicly
available. anyone with the public key can then be a sender who can publicly
send secret messages to the receiver   even if they have never communicated or
shared any information besides the public key.
here is how they do it:

beforehand the receiver creates a public key and a private key as follows.

1. generate two distinct primes, p and q. these are used to generate the
private key, and they must be kept hidden. (in current practice, p and
q are chosen to be hundreds of digits long.)

2. let n wwd pq.
3. select an integer e 2   0::n/ such that gcd.e; .p (cid:0) 1/.q (cid:0) 1// d 1.
the public key is the pair .e; n/. this should be distributed widely.
4. let the private key d 2   0::n/ be the inverse of e in the ring
z.p(cid:0)1/.q(cid:0)1/. this private key can be found using the pulverizer. the
private key d should be kept hidden!

encoding to transmit a message m 2   0::n/ to receiver, a sender uses the

public key to encrypt m into a numerical message

the sender can then publicly transmitbm to the receiver.

decoding the receiver decrypts messagebm back to message m using the pri-

vate key:

bm wwd me .zn/:

m dbmd .zn/:

   mcs        2017/6/5     19:42     page 340     #348

340

chapter 9 number theory

why is rsa thought to be secure? it would be easy to    gure out the private
key d if you knew p and q   you could do it the same way the receiver does using
the pulverizer. but assuming the conjecture that it is hopelessly hard to factor a
number that is the product of two primes with hundreds of digits, an effort to factor
n is not going to break rsa.

could there be another approach to reverse engineer the private key d from the
public key that did not involve factoring n? not really. it turns out that given just
the private and the public keys, it is easy to factor n19 (a proof of this is sketched
in problem 9.86). so if we are con   dent that factoring is hopelessly hard, then we
can be equally con   dent that    nding the private key just from the public key will
be hopeless.

but even if we are con   dent that an rsa private key won   t be found, this doesn   t
rule out the possibility of decoding rsa messages in a way that sidesteps the pri-
vate key. it is an important unproven conjecture in cryptography that any way of
cracking rsa   not just by    nding the secret key   would imply the ability to fac-
tor. this would be a much stronger theoretical assurance of rsa security than is
presently known.

but the real reason for con   dence is that rsa has withstood all attacks by the
world   s most sophisticated cryptographers for nearly 40 years. despite decades of
these attacks, no signi   cant weakness has been found. that   s why the mathemat-
ical,    nancial, and intelligence communities are betting the family jewels on the
security of rsa encryption.

you can hope that with more studying of number theory, you will be the    rst to
   gure out how to do factoring quickly and, among other things, break rsa. but
be further warned that even gauss worked on factoring for years without a lot to
show for his efforts   and if you do    gure it out, you might wind up meeting some
humorless fellows working for a federal agency in charge of security. . . .

9.12 what has sat got to do with it?

so why does society, or at least everybody   s secret codes, fall apart if there is an
ef   cient test for satis   ability (sat), as we claimed in section 3.5? to explain this,
remember that rsa can be managed computationally because multiplication of two
primes is fast, but factoring a product of two primes seems to be overwhelmingly
demanding.

19in practice, for this reason, the public and private keys should be randomly chosen so that neither

is    too small.   

   mcs        2017/6/5     19:42     page 341     #349

9.13. references

341

let   s begin with the observation from section 3.2 that a digital circuit can be
described by a bunch of propositional formulas of about the same total size as the
circuit. so testing circuits for satis   ability is equivalent to the sat problem for
propositional formulas (see problem 3.22).

now designing digital multiplication circuits is completely routine. we can eas-
ily build a digital    product checker    circuit out of and, or, and not gates with 1
output wire and 4n digital input wires. the    rst n inputs are for the binary repre-
sentation of an integer i, the next n inputs for the binary representation of an integer
j , and the remaining 2n inputs for the binary representation of an integer k. the
output of the circuit is 1 iff ij d k and i; j > 1. a straightforward design for such
a product checker uses proportional to n2 gates.

now here   s how to factor any number m with a length 2n binary representation
using a sat solver. first,    x the last 2n digital inputs   the ones for the binary
representation of k   so that k equals m.
next, set the    rst of the n digital inputs for the representation of i to be 1. do a
sat test to see if there is a satisfying assignment of values for the remaining 2n(cid:0) 1
inputs used for the i and j representations. that is, see if the remaining inputs for
i and j can be    lled in to cause the circuit to give output 1. if there is such an
assignment,    x the    rst i-input to be 1, otherwise    x it to be 0. so now we have set
the    rst i-input equal to the    rst digit of the binary representations of an i such that
ij d m.
now do the same thing to    x the second of the n digital inputs for the represen-
tation of i, and then third, proceeding in this way through all the n inputs for the
number i. at this point, we have the complete n-bit binary representation of an
i > 1 such ij d m for some j > 1. in other words, we have found an integer i
that is a factor of m. we can now    nd j by dividing m by i.

so after n sat tests, we have factored m. this means that if sat for digital
circuits with 4n inputs and about n2 gates could be determined by a procedure
taking a number of steps bounded above by a degree d polynomial in n, then 2n
digit numbers can be factored in n times this many steps, that is, with a number of
steps bounded by a polynomial of degree d c 1 in n. so if sat could be solved in
polynomial time, then so could factoring, and consequently rsa would be    easy   
to break.

9.13 references

[3], [45]

   mcs        2017/6/5     19:42     page 342     #350

342

chapter 9 number theory

problems for section 9.1

practice problems
problem 9.1.
prove that a linear combination of linear combinations of integers a0; : : : ; an is a
linear combination of a0; : : : ; an.

class problems
problem 9.2.
a number is perfect if it is equal to the sum of its positive divisors, other than itself.
for example, 6 is perfect, because 6 d 1 c 2 c 3. similarly, 28 is perfect, because
28 d 1 c 2 c 4 c 7 c 14. explain why 2k(cid:0)1.2k (cid:0) 1/ is perfect when 2k (cid:0) 1 is
prime.20

problems for section 9.2

practice problems
problem 9.3.
let

x wwd 21212121;
y wwd 12121212:

use the euclidean algorithm to    nd the gcd of x and y. hint: looks scary, but

it   s not.

problem 9.4.

every

20euclid proved this 2300 years ago.
even perfect number

about 250 years ago, euler proved the
see
converse:
a
http://primes.utm.edu/notes/proofs/evenperfect.html).
is not known
if there are any odd perfect numbers at all. it is also not known if there are an in   nite number of even
perfect numbers. one of the charms of number theory is that simple results like those given in this
problem lie at the brink of the unknown.

simple proof

form (for

is of

this

it

343

   mcs        2017/6/5     19:42     page 343     #351

9.13. references

let

x wwd 1788 (cid:1) 315 (cid:1) 372 (cid:1) 591000
y wwd 19.922/ (cid:1) 3712 (cid:1) 533678 (cid:1) 5929:

(a) what is gcd.x; y/?

(b) what is lcm.x; y/? (   lcm    is least common multiple.)

problem 9.5.
prove that

for all a; b 2 z.

gcd.a5; b5/ d gcd.a; b/5

problem 9.6.
prove that gcd.m; n/ is the minimum positive value of any integer linear combina-
tion of integers m and n.

class problems
problem 9.7.
use the euclidean algorithm to prove that

gcd.13a c 8b; 5a c 3b/ d gcd.a; b/:

problem 9.8.

(a) use the pulverizer to    nd integers x; y such that
x30 c y22 d gcd.30; 22/:
0 with 0   y
0
30 c y

< 30 such that
22 d gcd.30; 22/

(b) now    nd integers x

; y

x

0

0

0

problem 9.9. (a) use the pulverizer to    nd gcd.84; 108/

   mcs        2017/6/5     19:42     page 344     #352

344

chapter 9 number theory

(b) find integers x, y with 0   y < 84 such that

x (cid:1) 84 c y (cid:1) 108 d gcd.84; 108/:

(c) is there a multiplicative inverse of 84 in z108? if not brie   y explain why,
otherwise    nd it.

problem 9.10.

indicate true or false for the following statements about the greatest common
divisor, and provide counterexamples for those that are false.
(a) if gcd.a; b/    1 and gcd.b; c/    1, then gcd.a; c/    1.
(b) if a j bc and gcd.a; b/ d 1, then a j c.
(c) gcd.an; bn/ d .gcd.a; b//n
(d) gcd.ab; ac/ d a gcd.b; c/.
(e) gcd.1 c a; 1 c b/ d 1 c gcd.a; b/.
(f) if an integer linear combination of a and b equals 1, then so does some integer
false
linear combination of a and b2.

false

false

false

false

false

true

true

true

true

true

true

(g) if no integer linear combination of a and b equals 2, then neither does any
false
integer linear combination of a2 and b2.

true

problem 9.11.
for nonzero integers a, b, prove the following properties of divisibility and gcd   s.
you may use theorem 9.2.2 that gcd.a; b/ is an integer linear combination of a and
b. you may not appeal to uniqueness of prime factorization theorem 9.4.1, because
some of these properties are needed to prove unique factorization.)
(a) every common divisor of a and b divides gcd.a; b/.
(b) gcd.ka; kb/ d k (cid:1) gcd.a; b/ for all k 2 n.
(c) if a j bc and gcd.a; b/ d 1, then a j c.
(d) if p j bc for some prime p then p j b or p j c.
(e) let m be the smallest integer linear combination of a and b that is positive.
show that m d gcd.a; b/.

   mcs        2017/6/5     19:42     page 345     #353

9.13. references

345

homework problems
problem 9.12.
here is a game you can analyze with number theory and always beat me. we start
with two distinct, positive integers written on a blackboard. call them a and b.
now we take turns. (i   ll let you decide who goes    rst.) on each turn, the player
must write a new positive integer on the board that is the difference of two numbers
that are already there. if a player cannot play, then they lose.
for example, suppose that 12 and 15 are on the board initially. your    rst play
must be 3, which is 15(cid:0) 12. then i might play 9, which is 12(cid:0) 3. then you might
play 6, which is 15 (cid:0) 9. then i can   t play, so i lose.
(a) show that every number on the board at the end of the game is a multiple of
gcd.a; b/.

(b) show that every positive multiple of gcd.a; b/ up to max.a; b/ is on the board
at the end of the game.

(c) describe a strategy that lets you win this game every time.

problem 9.13.
de   ne the pulverizer state machine to have:

states wwd n6

start state wwd .a; b; 0; 1; 1; 0/
transitions wwd .x; y; s; t; u; v/ (cid:0)!

(where a (cid:21) b > 0)
(for q d qcnt.x; y/; y > 0):
(a) show that the following properties are preserved invariants of the pulverizer
machine:

.y; rem.x; y/; u (cid:0) sq; v (cid:0) t q; s; t /

gcd.x; y/ d gcd.a; b/;
sa c t b d y; and
ua c vb d x:

(inv1)
(inv2)
(inv3)

(b) conclude that the pulverizer machine is partially correct.

(c) explain why the machine terminates after at most the same number of transi-
tions as the euclidean algorithm.

   mcs        2017/6/5     19:42     page 346     #354

346

chapter 9 number theory

problem 9.14.
the euclidean state machine is de   ned by the rule

.x; y/ (cid:0)! .y; rem.x; y//;

(9.18)

for y > 0.
prove that the smallest positive integers a (cid:21) b for which, starting in state .a; b/,
the state machine will make n transitions are f .n c 1/ and f .n/, where f .n/ is
the nth fibonacci number.21

hint: induction.

problem 9.15.
let   s extend the jug    lling scenario of section 9.1.3 to three jugs and a receptacle.
suppose the jugs can hold a, b and c gallons of water, respectively.

the receptacle can be used to store an unlimited amount of water, but has no
measurement markings. excess water can be dumped into the drain. among the
possible moves are:

1.    ll a bucket from the hose,

2. pour from the receptacle to a bucket until the bucket is full or the receptacle

is empty, whichever happens    rst,

3. empty a bucket to the drain,

4. empty a bucket to the receptacle, and

5. pour from one bucket to another until either the    rst is empty or the second

is full.

(a) model this scenario with a state machine. (what are the states? how does a
state change in response to a move?)
(b) prove that bruce can get k 2 n gallons of water into the receptacle using the
above operations if gcd.a; b; c/ j k.
21problem 5.25 shows that f .n/   'n where ' is the golden ratio .1 c p

5/=2. this implies
that the euclidean algorithm halts after at most log' .a/ transitions, a somewhat smaller bound than
2 log2 a derived from equation (9.4).

   mcs        2017/6/5     19:42     page 347     #355

9.13. references

347

problem 9.16.
the binary gcd state machine computes the gcd of integers a; b > 0 using only
division by 2 and subtraction, which makes it run very ef   ciently on hardware that
uses binary representation of numbers. in practice, it runs more quickly than the
more famous euclidean algorithm described in section 9.2.1.

stateswwdn3

start statewwd.a; b; 1/
transitionswwd if min.x; y/ > 0; then .x; y; e/ (cid:0)!

.x=2; y=2; 2e/

.x=2; y; e/

.x; y=2; e/

.x (cid:0) y; y; e/
.y (cid:0) x; x; e/

.1; 0; ex/

(if 2 j x and 2 j y)
(else if 2 j x)
(else if 2 j y)
(else if x > y)
(else if y > x)
(otherwise (x d y)):

(i1)
(i2)
(i3)
(i4)
(i5)
(i6)

(a) use the invariant principle to prove that if this machine stops, that is, reaches
a state .x; y; e/ in which no transition is possible, then e d gcd.a; b/.
(b) prove that rule (i1)

.x; y; e/ ! .x=2; y=2; 2e/

is never executed after any of the other rules is executed.
(c) prove that the machine reaches a    nal state in at most 1 c 3.log a c log b/
transitions. (this is a coarse bound; you may be able to get a better one.)

problem 9.17.
extend the binary gcd procedure of problem 9.16 to obtain a new pulverizer that
uses only division by 2 and subtraction.

hint: after the binary gcd procedure has factored out 2   s, it starts computing the
gcd.a; b/ for numbers a; b at least one of which is odd. it does this by successively
updating a pair of numbers .x; y/ such that gcd.x; y/ d gcd.a; b/. extend the
procedure to    nd and update coef   cients ux; vx; uy; vy such that

uxa c vxb d x and uya c vyb d y:

   mcs        2017/6/5     19:42     page 348     #356

348

chapter 9 number theory

to see how to update the coef   cients when at least one of a and b is odd and
ua c vb is even, show that either u and v are both even, or else u (cid:0) b and v c a
are both even.

problem 9.18.
for any set a of integers,

gcd.a/ wwd the greatest common divisor of the elements of a.

the following useful property of gcd   s of sets is easy to take for granted:

theorem.

gcd.a [ b/ d gcd.gcd.a/; gcd.b//;

(aub)

for all    nite sets a; b (cid:26) z.
theorem (aub) has an easy proof as a corollary of the unique factorization
theorem. in this problem we develop a proof by induction just making repeated
use of lemma 9.2.6.b :

.d j a and d j b/ iff d j gcd.a; b/:

(gcddiv)

the key to proving (aub) will be generalizing (gcddiv) to    nite sets.
de   nition. for any subset a   z,

d j a wwd 8a 2 a: d j a:

d j a iff d j gcd.a/:

lemma.

for all d 2 z and    nite sets a (cid:26) z.
(a) prove that

(divdef)

(a-iff-gcda)

gcd.a; gcd.b; c// d gcd.gcd.a; b/; c/

(gcd-assoc)

for all integers a; b; c.
from here on we write    a [ a    as an abbreviation for    fag [ a.   
(b) prove that
for all a; b; d 2 z, and c   z.

d j .a [ b [ c / iff d j .gcd.a; b/ [ c /

(abcgcd)

   mcs        2017/6/5     19:42     page 349     #357

9.13. references

349

proof.
d j .a [ b [ c / iff .d j a/ and .d j b/ and .d j c /

iff .d j gcd.a; b// and .d j c /
iff d j .gcd.a; b/ [ c /

(def (divdef) of divides)
by (gcddiv)
(def (divdef) of divides):
(cid:4)

(c) using parts (a) and (b), prove by induction on the size of a, that

d j .a [ a/

d j gcd.a; gcd.a//;

(divaua)
for all integers a; d and    nite sets a (cid:26) z. explain why this proves (a-iff-gcda).
(d) prove theorem (aub).

iff

(e) conclude that gcd.a/ is an integer linear combination of the elements in a.

exam problems
problem 9.19.
prove that gcd.mb c r; b/ d gcd.b; r/ for all integers m; b; r.

problem 9.20.
the stata center   s delicate balance depends on two buckets of water hidden in a
secret room. the big bucket has a volume of 25 gallons, and the little bucket has a
volume of 10 gallons. if at any time a bucket contains exactly 13 gallons, the stata
center will collapse. there is an interactive display where tourists can remotely
   ll and empty the buckets according to certain rules. we represent the buckets as a
state machine.

the state of the machine is a pair .b; l/, where b is the volume of water in big

bucket, and l is the volume of water in little bucket.
(a) we informally describe some of the legal operations tourists can perform be-
low. represent each of the following operations as a transition of the state machine.
the    rst is done for you as an example.

1. fill the big bucket.

2. empty the little bucket.

.b; l/ (cid:0)! .25; l/:

   mcs        2017/6/5     19:42     page 350     #358

350

chapter 9 number theory

3. pour the big bucket into the little bucket. you should have two cases de   ned
in terms of the state .b; l/: if all the water from the big bucket    ts in the little
bucket, then pour all the water. if it doesn   t, pour until the little jar is full,
leaving some water remaining in the big jar.

(b) use the invariant principle to show that, starting with empty buckets, the stata
center will never collapse. that is, the state .13; x/ in unreachable. (in verifying
your claim that the invariant is preserved, you may restrict to the representative
transitions of part (a).)

problem 9.21.
let

m d 2952474117;
n d 2372211211197;
p d 2534760421930:

(a) what is the gcd.m; n; p/?

(b) what is the least common multiple lcm.m; n; p/?

let (cid:23)k.n/ be the largest power of k that divides n, where k > 1. that is,

(cid:23)k.n/ wwd maxfi j ki divides ng:
if a is a nonempty set of nonnegative integers, de   ne
(cid:23)k.a/ wwd f(cid:23)k.a/ j a 2 ag:

(c) express (cid:23)k.gcd.a// in terms of (cid:23)k.a/.
(d) let p be a prime number. express (cid:23)p.lcm.a// in terms of (cid:23)p.a/.
(e) give an example of integers a; b where (cid:23)6.lcm.a; b// > max.(cid:23)6.a/; (cid:23)6.b//.

(f) letq a be the product of all the elements in a. express (cid:23)p.n/.q a/ in terms

of (cid:23)p.a/.

(g) let b also be a nonempty set of nonnegative integers. conclude that

gcd.a [ b/ d gcd.gcd.a/; gcd.b//:

(9.19)

hint: consider (cid:23)p./ of the left and right-hand sides of (9.19). you may assume

min.a [ b/ d min.min.a/; min.b//:

(9.20)

   mcs        2017/6/5     19:42     page 351     #359

9.13. references

351

problems for section 9.3

homework problems
problem 9.22.
tba: chebyshvev lower bound in prime density, based on shoup pp.75   76

problems for section 9.4

practice problems
problem 9.23.
let p be a prime number and a1; : : : ; an integers. prove the following lemma by
induction:

lemma.

if p divides a product a1 (cid:1) a2 (cid:1)(cid:1)(cid:1) an; then p divides some ai :
you may assume the case for n d 2 which was given by lemma 9.4.2.
be sure to clearly state and label your induction hypothesis, base case(s), and

(*)

induction step.

class problems
problem 9.24. (a) let m d 295241171712 and n d 2372211211131179192. what
is the gcd.m; n/? what is the least common multiple lcm.m; n/ of m and n? verify
that

gcd.m; n/ (cid:1) lcm.m; n/ d mn:

(9.21)

(b) describe in general how to    nd the gcd.m; n/ and lcm.m; n/ from the prime
factorizations of m and n. conclude that equation (9.21) holds for all positive
integers m; n.

homework problems
problem 9.25.
the set of complex numbers that are equal to m c n
is called z  
factorizations.

p(cid:0)5  . it will turn out that in z  

p(cid:0)5 for some integers m; n
p(cid:0)5  , not all numbers have unique

   mcs        2017/6/5     19:42     page 352     #360

352

chapter 9 number theory

a sum or product of numbers in z  

p(cid:0)5   is in z  

p(cid:0)5  , and since z  

p(cid:0)5   is a

subset of the complex numbers, all the usual rules for addition and multiplication
are true for it. but some weird things do happen. for example, the prime 29 has
p(cid:0)5   such that xy d 29 and x      1    y.
factors:
(a) find x; y 2 z  
on the other hand, the number 3 is still a    prime    even in z  
cisely, a number p 2 z  
p(cid:0)5  , either x d   1 or y d   1.
for some x; y 2 z  
claim. the numbers 3; 2 c p(cid:0)5, and 2 (cid:0) p(cid:0)5 are irreducible over z  
p(cid:0)5   in two different ways:
z  

p(cid:0)5  . more pre-
p(cid:0)5   iff when xy d p
p(cid:0)5  .

p(cid:0)5   is called irreducible over z  

in particular, this claim implies that the number 9 factors into irreducibles over

3 (cid:1) 3 d 9 d .2 c p(cid:0)5/.2 (cid:0) p(cid:0)5/:

p(cid:0)5   is an example of what is called a non-unique factorization domain.

so z  

to verify the claim, we   ll appeal (without proof) to a familiar technical property

of complex numbers given in the following lemma.
de   nition. for a complex number c d r c si where r; s 2 r and i is
norm jcj of c is
lemma. for c; d 2 c,

r 2 c s2.

p

p(cid:0)1, the

jcdj d jcjjdj :

p(cid:0)5  .

(b) prove that jxj2    3 for all x 2 z  
(c) prove that if x 2 z  
(d) prove that if jxyj d 3 for some x; y 2 z  
hint: jzj2 2 n for z 2 z  
(e) complete the proof of the claim.

p(cid:0)5   and jxj d 1, then x d   1.
p(cid:0)5  .

p(cid:0)5  , then x d   1 or y d   1.

problems for section 9.6

practice problems
problem 9.26.
prove that if a   b .mod 14/ and a   b .mod 5/, then a   b .mod 70/.

   mcs        2017/6/5     19:42     page 353     #361

9.13. references

353

problem 9.27.
show that there is an integer x such that
ax   b

.mod n/

iff

gcd.a; n/ j b:

class problems
problem 9.28. (a) prove if n is not divisible by 3, then n2   1 .mod 3/.
(b) show that if n is odd, then n2   1 .mod 8/.
(c) conclude that if p is a prime greater than 3, then p2 (cid:0) 1 is divisible by 24.

problem 9.29.
the values of polynomial p.n/ wwd n2 c n c 41 are prime for all the integers from
0 to 39 (see section 1.1). well, p didn   t work, but are there any other polynomials
whose values are always prime? no way! in fact, we   ll prove a much stronger
claim.

de   nition. the set p of integer polynomial functions can be de   ned recursively:
base cases:

(cid:15) the identity function idz.x/ wwd x is in p .
(cid:15) for any integer m the constant function cm.x/ wwd m is in p .

constructor cases. if r; s 2 p , then r c s and r (cid:1) s 2 p .
(a) using the recursive de   nition of integer polynomial functions given above,
prove by structural induction that for all q 2 p ,

j   k .mod n/

implies

q.j /   q.k/

.mod n/;

for all integers j; k; n where n > 1.
be sure to clearly state and label your induction hypothesis, base case(s), and
constructor step.

   mcs        2017/6/5     19:42     page 354     #362

354

chapter 9 number theory

(b) we   ll say that q produces multiples if, for every integer greater than one in the
range of q, there are in   nitely many different multiples of that integer in the range.
for example, if q.4/ d 7 and q produces multiples, then there are in   nitely many
different multiples of 7 in the range of q, and of course, except for 7 itself, none of
these multiples is prime.
prove that if q has positive degree and positive leading coef   cient, then q produces
multiples. you may assume that every such polynomial is strictly increasing for
large arguments.

part (b) implies that an integer polynomial with positive leading coef   cient and
degree has in   nitely many nonprimes in its range. this fact no longer holds true for
multivariate polynomials. an amazing consequence of matiyasevich   s [35] solu-
tion to hilbert   s tenth problem is that multivariate polynomials can be understood
as general purpose programs for generating sets of integers. if a set of nonnegative
integers can be generated by any program, then it equals the set of nonnegative
integers in the range of a multivariate integer polynomial! in particular, there is an
integer polynomial p.x1; : : : ; x7/ whose nonnegative values as x1; : : : ; x7 range
over n are precisely the set of all prime numbers!

problems for section 9.7

practice problems
problem 9.30.
list the numbers of all statements below that are equivalent to

a   b

.mod n/;

where n > 1 and a and b are integers. brie   y explain your reasoning.
i) 2a   2b .mod n/
ii) 2a   2b .mod 2n/
iii) a3   b3 .mod n/
iv) rem.a; n/ d rem.b; n/
v) rem.n; a/ d rem.n; b/
vi) gcd.a; n/ d gcd.b; n/

   mcs        2017/6/5     19:42     page 355     #363

9.13. references

vii) gcd.n; a (cid:0) b/ d n
viii) .a (cid:0) b/ is a multiple of n
ix) 9k 2 z: a d b c nk

problem 9.31.
what is remainder.3101; 21/?

355

homework problems
problem 9.32.
prove that congruence is preserved by arithmetic expressions. namely, prove that

a   b

.mod n/;

then
for all e 2 aexp (see section 7.4).

eval.e; a/   eval.e; b/

.mod n/;

(9.22)

(9.23)

problem 9.33.
a commutative ring is a set r of elements along with two binary operations    and
   from r (cid:2) r to r. there is an element in r called the zero-element, 0, and
another element called the unit-element, 1. the operations in a commutative ring
satisfy the following ring axioms for r; s; t 2 r:

.r    s/    t d r    .s    t /
.r    s/    t d r    .s    t /

r    s d s    r
r    s d s    r
0    r d r
1    r d r
0 d 0

9r

0 2 r: r    r
r    .s    t / d .r    s/    .r    t /

(associativity of   );
(associativity of   );
(commutativity of   )
(commutativity of   );
(identity for   );
(identity for   );
(inverse for   );
(distributivity):

(a) show that the zero-element is unique, that is, show that if z 2 r has the
property that
then z d 0.

z    r d r;

(9.24)

   mcs        2017/6/5     19:42     page 356     #364

356

chapter 9 number theory

(b) show that additive inverses are unique, that is, show that

implies r1 d r2.
(c) show that multiplicative inverses are unique, that is, show that

(9.25)
(9.26)

r    r1 d 0 and
r    r2 d 0

r    r1 d 1
r    r2 d 1

implies r1 d r2.

problem 9.34.
this problem will use elementary properties of congruences to prove that every
positive integer divides in   nitely many fibonacci numbers.
a function f w n ! n that satisi   es

f .n/ d c1f .n (cid:0) 1/ c c2f .n (cid:0) 2/ c (cid:1)(cid:1)(cid:1) c cd f .n (cid:0) d /
for some ci 2 n and all n (cid:21) d is called a degree d linear-recursive.
a function f w n ! n has a degree d repeat modulo m at n and k when it
satis   es the following repeat congruences:
f .n/   f .k/

(9.27)

f .n (cid:0) 1/   f .k (cid:0) 1/

f .n (cid:0) .d (cid:0) 1//   f .k (cid:0) .d (cid:0) 1//

:::

.mod m/;
.mod m/;

.mod m/:

for k > n (cid:21) d (cid:0) 1.
for the rest of this problem, assume linear-recursive functions and repeats are

degree d > 0.
(a) prove that if a linear-recursive function has a repeat modulo m at n and k, then
it has one at n c 1 and k c 1.
(b) prove that for all m > 1, every linear-recursive function repeats modulo m at
n and k for some n; k 2   d (cid:0) 1::d c md /.
(c) a linear-recursive function is reverse-linear if its dth coef   cient cd d   1.
prove that if a reverse-linear function repeats modulo m at n and k for some n (cid:21) d,
then it repeats modulo m at n (cid:0) 1 and k (cid:0) 1.

   mcs        2017/6/5     19:42     page 357     #365

9.13. references

357

(d) conclude that every reverse-linear function must repeat modulo m at d (cid:0) 1
and .d (cid:0) 1/ c j for some j > 0.
(e) conclude that if f is an reverse-linear function and f .k/ d 0 for some k 2
  0::d /, then every positive integer is a divisor of f .n/ for in   nitely many n.

(f) conclude that every positive integer is a divisor of in   nitely many fibonacci
numbers.
hint: start the fibonacci sequence with the values 0,1 instead of 1, 1.

class problems
problem 9.35.
find

remainder

(cid:16)

 
98763456789(cid:0)999(cid:1)5555 (cid:0) 67893414259; 14

:

(9.28)

problem 9.36.
the following properties of equivalence mod n follow directly from its de   nition
and simple properties of divisibility. see if you can prove them without looking up
the proofs in the text.
(a) if a   b .mod n/, then ac   bc .mod n/.
(b) if a   b .mod n/ and b   c .mod n/, then a   c .mod n/.
(c) if a   b .mod n/ and c   d .mod n/, then ac   bd .mod n/.
(d) rem.a; n/   a .mod n/.

problem 9.37. (a) why is a number written in decimal evenly divisible by 9 if and
only if the sum of its digits is a multiple of 9? hint: 10   1 .mod 9/.
(b) take a big number, such as 37273761261. sum the digits, where every other
one is negated:

3 c .(cid:0)7/ c 2 c .(cid:0)7/ c 3 c .(cid:0)7/ c 6 c .(cid:0)1/ c 2 c .(cid:0)6/ c 1 d (cid:0)11

explain why the original number is a multiple of 11 if and only if this sum is a
multiple of 11.

   mcs        2017/6/5     19:42     page 358     #366

358

chapter 9 number theory

problem 9.38.
at one time, the guinness book of world records reported that the    greatest human
calculator    was a guy who could compute 13th roots of 100-digit numbers that were
13th powers. what a curious choice of tasks. . . .

in this problem, we prove

n13   n .mod 10/

(9.29)

for all n.
(a) explain why (9.29) does not follow immediately from euler   s theorem.

(b) prove that
for 0   d < 10.
(c) now prove the congruence (9.29).

d 13   d

.mod 10/

(9.30)

problem 9.39. (a) ten pirates    nd a chest    lled with gold and silver coins. there
are twice as many silver coins in the chest as there are gold. they divide the gold
coins in such a way that the difference in the number of coins given to any two
pirates is not divisible by 10. they will only take the silver coins if it is possible
to divide them the same way. is this possible, or will they have to leave the silver
behind? prove your answer.

(b) there are also 3 sacks in the chest, containing 5, 49, and 51 rubies respec-
tively. the treasurer of the pirate ship is bored and decides to play a game with the
following rules:

(cid:15) he can merge any two piles together into one pile, and
(cid:15) he can divide a pile with an even number of rubies into two piles of equal size.
he makes one move every day, and he will    nish the game when he has divided the
rubies into 105 piles of one. is it possible for him to    nish the game?

exam problems
problem 9.40.
compute the remainder

rem.24989184637 (cid:1) 6734598447; 15/;

carefully explaining the steps in your computation.

(rem15)

   mcs        2017/6/5     19:42     page 359     #367

9.13. references

359

problem 9.41.
the sum of the digits of the base 10 representation of an integer is congruent mod-
ulo 9 to that integer. for example,

763   7 c 6 c 3

.mod 9/:

we can say that    9 is a good modulus for base 10.   

more generally, we   ll say    k is a good modulus for base b    when, for any non-
negative integer n, the sum of the digits of the base b representation of n is congru-
ent to n modulo k. so 2 is not a good modulus for base 10 because

763 6  7 c 6 c 3

.mod 2/:

(a) what integers k > 1 are good moduli for base 10?
(b) show that if b   1 .mod k/, then k is good for base b.
(c) prove conversely, that if k is good for some base b (cid:21) 2, then b   1 .mod k/.
hint: the base b representation of b.

(d) exactly which integers k > 1 are good moduli for base 106?

problem 9.42.
we de   ne the sequence of numbers

(
an(cid:0)1 c an(cid:0)2 c an(cid:0)3 c an(cid:0)4;

1;

an d

for n   3,
for n > 3.

use strong induction to prove that remainder.an; 3/ d 1 for all n (cid:21) 0.

problems for section 9.8

exam problems
problem 9.43.

de   nition. the set p of single variable integer polynomials can be de   ned recur-
sively:
base cases:

   mcs        2017/6/5     19:42     page 360     #368

360

chapter 9 number theory

(cid:15) the identity function, idz.x/ wwd x is in p .
(cid:15) for any integer m the constant function, cm.x/ wwd m is in p .

constructor cases. if r; s 2 p , then r c s and r (cid:1) s 2 p .
prove by structural induction that for all q 2 p ,

j   k .mod n/

implies

q.j /   q.k/

.mod n/;

for all integers j; k; n where n > 1.

be sure to clearly state and label your induction hypothesis, base case(s), and

constructor step.

problems for section 9.9

practice problems
problem 9.44.
(a) given inputs m; n 2 zc, the pulverizer will produce x; y 2 z such that:
(b) assume n > 1. explain how to use the numbers x; y to    nd the inverse of m
modulo n when there is an inverse.

problem 9.45.
what is the multiplicative inverse (mod 7) of 2? reminder: by de   nition, your
answer must be an integer between 0 and 6.

problem 9.46. (a) find integer coef   cients x, y such that 25xc32y d gcd.25; 32/.
(b) what is the inverse (mod 25) of 32?

problem 9.47. (a) use the pulverizer to    nd integers s; t such that

40s c 7t d gcd.40; 7/:

(b) adjust your answer to part (a) to    nd an inverse modulo 40 of 7 in   1::40/.

   mcs        2017/6/5     19:42     page 361     #369

9.13. references

361

class problems
problem 9.48.
two nonparallel lines in the real plane intersect at a point. algebraically, this means
that the equations

y d m1x c b1
y d m2x c b2

have a unique solution .x; y/, provided m1    m2. this statement would be false if
we restricted x and y to the integers, since the two lines could cross at a noninteger
point:

however, an analogous statement holds if we work over the integers modulo a

prime p. find a solution to the congruences
y   m1x c b1
y   m2x c b2

.mod p/
.mod p/

when m1 6  m2 .mod p/. express your solution in the form x      .mod p/ and
y      .mod p/ where the       s denote expressions involving m1, m2, b1 and b2. you
may    nd it helpful to solve the original equations over the reals    rst.

problems for section 9.10

practice problems
problem 9.49.
prove that k 2   0::n/ has an inverse modulo n iff it has an inverse in zn.

   mcs        2017/6/5     19:42     page 362     #370

362

chapter 9 number theory

problem 9.50.
what is rem.2479; 79/?

hint: you should not need to do any actual multiplications!

problem 9.51. (a) prove that 2212001 has a multiplicative inverse modulo 175.

(b) what is the value of (cid:30).175/, where (cid:30) is euler   s function?

(c) what is the remainder of 2212001 divided by 175?

problem 9.52.
how many numbers between 1 and 6042 (inclusive) are relatively prime to 3780?
hint: 53 is a factor.

problem 9.53.
how many numbers between 1 and 3780 (inclusive) are relatively prime to 3780?

problem 9.54.

(a) what is the id203 that an integer from 1 to 360 selected with uniform
id203 is relatively prime to 360?

(b) what is the value of rem.798; 360/?

class problems
problem 9.55.
find the remainder of 261818181 divided by 297.
hint: 1818181 d .180 (cid:1) 10101/ c 1; use euler   s theorem.

problem 9.56.
find the last digit of 7777

.

   mcs        2017/6/5     19:42     page 363     #371

9.13. references

363

problem 9.57.
prove that n and n5 have the same last digit. for example:

25 d 32

795 d 3077056399

problem 9.58.
use fermat   s theorem to    nd the inverse i of 13 modulo 23 with 1   i < 23.

problem 9.59.
let (cid:30) be euler   s function.
(a) what is the value of (cid:30).2/?
(b) what are three nonnegative integers k > 1 such that (cid:30).k/ d 2?
(c) prove that (cid:30).k/ is even for k > 2.
hint: consider whether k has an odd prime factor or not.
(d) brie   y explain why (cid:30).k/ d 2 for exactly three values of k.

problem 9.60.
suppose a; b are relatively prime and greater than 1. in this problem you will prove
the chinese remainder theorem, which says that for all m; n, there is an x such
that

x   m mod a;
x   n mod b:

moreover, x is unique up to congruence modulo ab, namely, if x
   es (9.31) and (9.32), then

0   x mod ab:

x

(9.31)
(9.32)
0 also satis-

(cid:0)1 be an inverse of b modulo a and de   ne ea wwd b

(a) prove that for any m; n, there is some x satisfying (9.31) and (9.32).
hint: let b
similarly. let x d mea c neb.
(b) prove that

(cid:0)1b. de   ne eb

  x   0 mod a and x   0 mod b  

implies x   0 mod ab:

   mcs        2017/6/5     19:42     page 364     #372

364

chapter 9 number theory

(c) conclude that

(cid:2)x   x

0

mod a and x   x

0

mod b(cid:3)

implies x   x

0

mod ab:

(d) conclude that the chinese remainder theorem is true.

(e) what about the converse of the implication in part (c)?

problem 9.61.
the order of k 2 zn is the smallest positive m such that km d 1 .zn/.
(a) prove that

km d 1 .zn/ implies ord.k; n/ j m:

hint: take the remainder of m divided by the order.
now suppose p > 2 is a prime of the form 2s c 1. for example, 21 c 1; 22 c
1; 24 c 1 are such primes.
(b) conclude from part (a) that if 0 < k < p, then ord.k; p/ is a power of 2.
(c) prove that ord.2; p/ d 2s and conclude that s is a power of 2.22
hint: 2k (cid:0) 1 for k 2   1::r   is positive but too small to equal 0 .zp/.

homework problems
problem 9.62.
this problem is about    nding square roots modulo a prime p.
(a) prove that x2   y2 .mod p/ if and only if x   y .mod p/ or x   (cid:0)y
.mod p/. hint: x2 (cid:0) y2 d .x c y/.x (cid:0) y/
an integer x is called a square root of n mod p when

x2   n .mod p/:

an integer with a square root is called a square mod p. for example, if n is con-
gruent to 0 or 1 mod p, then n is a square and it is it   s own square root.
so let   s assume that p is an odd prime and n 6  0 .mod p/. it turns out there is
a simple test we can perform to see if n is a square mod p:
22numbers of the form 22k c 1 are called fermat numbers, so we can rephrase this conclusion as
saying that any prime of the form 2s c 1 must actually be a fermat number. the fermat numbers are
prime for k d 1; 2; 3; 4, but not for k d 5. in fact, it is not known if any fermat number with k > 4
is prime.

   mcs        2017/6/5     19:42     page 365     #373

9.13. references

365

euler   s criterion

i. if n is a square modulo p, then n.p(cid:0)1/=2   1 .mod p/.
ii. if n is not a square modulo p then n.p(cid:0)1/=2   (cid:0)1 .mod p/.
(b) prove case (i) of euler   s criterion. hint: use fermat   s theorem.

(c) prove case (ii) of euler   s criterion. hint: use part (a)
(d) suppose that p   3 .mod 4/, and n is a square mod p. find a simple expres-
sion in terms of n and p for a square root of n. hint: write p as p d 4k c 3 and
use euler   s criterion. you might have to multiply two sides of an equation by n at
one point.

problem 9.63.
suppose a; b are relatively prime integers greater than 1. in this problem you will
prove that euler   s function is multiplicative, that is, that

(cid:30).ab/ d (cid:30).a/(cid:30).b/:

the proof is an easy consequence of the chinese remainder theorem (problem 9.60).
(a) conclude from the chinese remainder theorem that the function f w   0::ab/ !
  0::a/ (cid:2)   0::b/ de   ned by

f .x/ wwd .rem.x; a/; rem.x; b//

is a bijection.
(b) for any positive integer k let z(cid:3)
k be the integers in   0::k/ that are relatively
prime to k. prove that the function f from part (a) also de   nes a bijection from
z(cid:3)
ab to z(cid:3)
(c) conclude from the preceding parts of this problem that

(cid:2) z(cid:3)
b.

a

(cid:30).ab/ d (cid:30).a/(cid:30).b/:

(9.33)

(d) prove corollary 9.10.11: for any number n > 1, if p1, p2, . . . , pj are the
 
(distinct) prime factors of n, then
1 (cid:0) 1

  
1 (cid:0) 1

 (cid:1)(cid:1)(cid:1) 

(cid:30).n/ d n

1 (cid:0) 1

 

:

p1

p2

pj

   mcs        2017/6/5     19:42     page 366     #374

366

chapter 9 number theory

problem 9.64.

de   nition. de   ne the order of k over zn to be

ord.k; n/ wwd minfm > 0 j km d 1 .zn/g:
if no positive power of k equals 1 in zn, then ord.k; n/ wwd 1.
(a) show that k 2 z(cid:3)
(b) prove that for every k 2 z(cid:3)
hint: let m d ord.k; n/. consider the quotient and remainder of (cid:30).n/ divided by
m.

n, the order of k over zn divides (cid:30).n/.

n iff k has    nite order in zn.

problem 9.65.
the general version of the chinese remainder theorem (see problem 9.60) extends
to more than two relatively prime moduli. namely,

theorem (general chinese remainder). suppose a1; : : : ; ak are integers greater
than 1 and each is relatively prime to the others. let n wwd a1 (cid:1) a2 (cid:1)(cid:1)(cid:1) ak. then for
any integers m1; m2; : : : ; mk, there is a unique x 2   0::n/ such that

x   mi

.mod ai /;

for 1   i   k.
the proof is a routine induction on k using a fact that follows immediately from
unique factorization: if a number is relatively prime to some other numbers, then it
is relatively prime to their product.

the general chinese remainder theorem is the basis for an ef   cient approach

to performing a long series of additions and multiplications on    large    numbers.

namely, suppose n was large, but each of the factors ai was small enough to be
handled by cheap and available arithmetic hardware units. suppose a calculation
requiring many additions and multiplications needs to be performed. to do a sin-
gle multiplication or addition of two large numbers x and y in the usual way in
this setting would involve breaking up the x and y into pieces small enough to be
handled by the arithmetic units, using the arithmetic units to perform additions and
multiplications on (many) pairs of small pieces, and then reassembling the pieces
into an answer. moreover, the order in which these operations on pieces can be
performed is contrained by dependence among the pieces   because of    carries,   

   mcs        2017/6/5     19:42     page 367     #375

9.13. references

367

for example. and this process of breakup and reassembly has to be performed for
each addition and multiplication that needs to be performed on large numbers.

explain how the general chinese remainder theorem can be applied to per-
form a long series of additions and multiplications on    large    numbers much more
ef   ciently than the usual way described above.

problem 9.66.
in this problem we   ll prove that for all integers a; m where m > 1,

am   am(cid:0)(cid:30).m/

.mod m/:

(9.34)

note that a and m need not be relatively prime.
assume m d pk1
k1; : : : ; kn.
(a) show that if pi does not divide a, then

(cid:1)(cid:1)(cid:1) pkn

1

n for distinct primes, p1; : : : ; pn and positive integers

a(cid:30).m/   1

.mod pki

i /:

(b) show that if pi j a then

am(cid:0)(cid:30).m/   0

.mod pki

i /:

(9.35)

(c) conclude (9.34) from the facts above.
hint: am (cid:0) am(cid:0)(cid:30).m/ d am(cid:0)(cid:30).m/.a(cid:30).m/ (cid:0) 1/.

problem 9.67.
the generalized postage problem

several other problems (2.7, 2.1, 5.32) work out which amounts of postage can
be formed using two stamps of given denominations. in this problem, we generalize
this to two stamps with arbitrary positive integer denominations a and b cents. let   s
call an amount of postage that can be made from a and b cent stamps a makeable
amount.

lemma. (generalized postage) if a and b are relatively prime positive integers,
then any integer greater than ab (cid:0) a (cid:0) b is makeable.

   mcs        2017/6/5     19:42     page 368     #376

368

chapter 9 number theory

to prove the lemma, consider the following array with a in   nite rows:

a

2a

0
b
2b
3b
:::

b c 3a : : :
2b c 3a : : :
3b c 3a : : :
.a (cid:0) 1/b .a (cid:0) 1/b c a .a (cid:0) 1/b c 2a .a (cid:0) 1/b c 3a : : :

b c 2a
2b c 2a
3b c 2a
:::

b c a
2b c a
3b c a
:::

3a : : :

: : :

:::

note that every element in this array is clearly makeable.
(a) suppose that n is at least as large as, and also congruent mod a to, the    rst
element in some row of this array. explain why n must appear in the array.
(b) prove that every integer from 0 to a (cid:0) 1 is congruent modulo a to one of the
integers in the    rst column of this array.

(c) complete the proof of the generalized postage lemma by using parts (a)
and (b) to conclude that every integer n > ab (cid:0) a (cid:0) b appears in the array, and
hence is makeable.
hint: suppose n is congruent mod a to the    rst element in some row. assume n is
less than that element, and then show that n   ab (cid:0) a (cid:0) b.
(d) (optional) what   s more, ab (cid:0) a (cid:0) b is not makeable. prove it.
(e) explain why the following even more general lemma follows directly from the
generalized lemma and part (d).
lemma. (generalized2 postage) if m and n are positive integers and gwwdgcd.m; n/ >
1, then with m and n cent stamps, you can only make amounts of postage that
are multiples of g. you can actually make any amount of postage greater than
.mn=g/(cid:0) m(cid:0) n that is a multiple of g, but you cannot make .mn=g/(cid:0) m(cid:0) n cents
postage.

(f) optional and possibly unknown. suppose you have three denominations of
stamps, a; b; c and gcd.a; b; c/ d 1. give a formula for the smallest number nabc
such that you can make every amount of postage (cid:21) nabc.
exam problems
problem 9.68.
what is the remainder of 639601 divided by 220?

   mcs        2017/6/5     19:42     page 369     #377

9.13. references

369

problem 9.69.
prove that if k1 and k2 are relatively prime to n, then so is k1 (cid:1)n k2,
(a) . . . using the fact that k is relatively prime to n iff k has an inverse modulo n.
hint: recall that k1k2   k1 (cid:1)n k2 .mod n/.
(b) . . . using the fact that k is relatively prime to n iff k is cancellable modulo n.

(c) . . . using the unique factorization theorem and the basic gcd properties such
as lemma 9.2.1.

problem 9.70.

true

circle true or false for the statements below, and provide counterexamples for
those that are false. variables, a; b; c; m; n range over the integers and m; n > 1.
(a) gcd.1 c a; 1 c b/ d 1 c gcd.a; b/.
false
(b) if a   b .mod n/, then p.a/   p.b/ .mod n/
for any polynomial p.x/ with integer coef   cients.
(c) if a j bc and gcd.a; b/ d 1, then a j c.
(d) gcd.an; bn/ d .gcd.a; b//n
(e) if gcd.a; b/    1 and gcd.b; c/    1, then gcd.a; c/    1.
(f) if an integer linear combination of a and b equals 1,
then so does some integer linear combination of a2 and b2.

false

false

false

false

false

true

true

true

true

true

(g) if no integer linear combination of a and b equals 2,
then neither does any integer linear combination of a2 and b2.
(h) if ac   bc .mod n/ and n does not divide c,
then a   b .mod n/.
(i) assuming a; b have inverses modulo n,
(cid:0)1   b
(cid:0)1 .mod n/, then a   b .mod n/.
if a
(j) if ac   bc .mod n/ and n does not divide c,
then a   b .mod n/.

true

false

true

false

true

false

true

false

   mcs        2017/6/5     19:42     page 370     #378

370

chapter 9 number theory

(k) if a   b .mod (cid:30).n// for a; b > 0, then ca   cb .mod n/.
(l) if a   b .mod nm/, then a   b .mod n/.
(m) if gcd.m; n/ d 1, then
  a   b .mod m/ and a   b .mod n/   iff   a   b .mod mn/  
(n) if gcd.a; n/ d 1, then an(cid:0)1   1 .mod n/
(o) if a; b > 1, then
[a has a inverse mod b iff b has an inverse mod a].

true

true

true

true

false

false

false

false

true

false

problem 9.71.

parts (a) to (j) offer a collection of number theoretic assertions. most of the
assertions require some side-conditions to be correct. a selection of possible side-
conditions (1)   (8) are listed below.

next to each of assertions, write true if the assertion is correct as stated. write
false if none of the side-conditions ensure that the assertion is correct. otherwise,
write the number of a side-condition that ensures the assertion will be true; to get
full credit your side-condition should not imply any other correct side-condition.
for example, you would only get part credit for choosing gcd.a; b/ > 2 as a side-
condition if only gcd.a; b/ > 1 was needed.

assume all variables have appropriate integer values   for example, in the con-

text of zk, numbers are in   0::k/ and k > 1.

.i/: not.a divides b/
.iv/: gcd.a; b/ > 2
.vi/: a is prime

.ii/: gcd.a; b/ d 1
.v/: gcd.a; b/ d 1 d gcd.a; c/
.vii/: b is prime

.iii/: gcd.a; b/ > 1

.viii/: a; b both prime

(a) if a d b .zn/, then p.a/ d p.b/ .zn/,

for any polynomial p.x/ with integer coef   cients.

(b) if a j bc, then a j c.
(c) gcd.1 c a; 1 c b/ d 1 c gcd.a; b/.
(d) no integer linear combination of a2 and b2 equals one.

   mcs        2017/6/5     19:42     page 371     #379

9.13. references

371

(cid:0)1 .z(cid:3)

(cid:0)1 d c

(e) no integer linear combination of a2 and b2 equals two.
(f) if ma d na .zb/ then m d n .zb/.
a/, then b d c .z(cid:3)
(g) if b
a/.
(h) if m d n .z(cid:30).a//, then bm d bn .za/.
(i) if m d n .zab/, then m d n .zb/.
(j) ab d a .zb/.

problem 9.72.
indicate whether the following statements are true or false. for each of the false
statements, give counterexamples. all variables range over the integers, z.
(a) for all a and b, there are x and y such that: ax c by d 1.
(b) gcd.mb c r; b/ d gcd.r; b/ for all m; r and b.
(c) kp(cid:0)1   1 .mod p/ for every prime p and every k.
(d) for primes p    q, (cid:30).pq/ d .p(cid:0)1/.q(cid:0)1/, where (cid:30) is euler   s totient function.
(e) if a and b are relatively prime to d, then

  ac   bc mod d   

implies

  a   b mod d   :

problem 9.73.
find an integer k > 1 such that n and nk agree in their last three digits whenever n
is divisible by neither 2 nor 5. hint: euler   s theorem.

problem 9.74.

(a) explain why .(cid:0)12/482 has a multiplicative inverse modulo 175.
(b) what is the value of (cid:30).175/, where (cid:30) is euler   s function?

   mcs        2017/6/5     19:42     page 372     #380

372

chapter 9 number theory

(c) call a number from 0 to 174 powerful iff some positive power of the number
is congruent to 1 modulo 175. what is the id203 that a random number from
0 to 174 is powerful?

(d) what is the remainder of .(cid:0)12/482 divided by 175?

problem 9.75. (a) calculate the remainder of 3586 divided by 29.

(b) part (a) implies that the remainder of 3586 divided by 29 is not equal to 1. so
there there must be a mistake in the following proof, where all the congruences are
taken with modulus 29:
1 6  3586
  686
  628
  1

(by part (a))
(since 35   6
.mod 29/)
(since 86   28
.mod 29/)
(by fermat   s little theorem)

(9.36)
(9.37)
(9.38)
(9.39)

identify the exact line containing the mistake and explain the logical error.

problem 9.76. (a) show that if p j n for some prime p and integer n > 0, then
.p (cid:0) 1/ j (cid:30).n/.
(b) conclude that (cid:30).n/ is even for all n > 2.

problem 9.77. (a) calculate the value of (cid:30).6042/.
hint: 53 is a factor of 6042.

(b) consider an integer k > 0 that is relatively prime to 6042. explain why
k9361   k .mod 6042/.
hint: use your solution to part (a).

   mcs        2017/6/5     19:42     page 373     #381

9.13. references

problem 9.78.
let

sk d 1k c 2k c (cid:1)(cid:1)(cid:1) c pk;

where p is an odd prime and k is a positive multiple of p (cid:0) 1. find a 2   0::p/ and
b 2 .(cid:0)p::0   such that

sk   a   b

.mod p/:

373

problems for section 9.11

practice problems
problem 9.79.
suppose a cracker knew how to factor the rsa modulus n into the product of
distinct primes p and q. explain how the cracker could use the public key-pair
.e; n/ to    nd a private key-pair .d; n/ that would allow him to read any message
encrypted with the public key.

problem 9.80.
suppose the rsa modulus n d pq is the product of distinct 200 digit primes p and
q. a message m 2   0::n/ is called dangerous if gcd.m; n/ d p, because such an m
can be used to factor n and so crack rsa. circle the best estimate of the fraction
of messages in   0::n/ that are dangerous.

1

200

1

400

1

1

1

1

20010

10200

40010

10400

problem 9.81.
ben bitdiddle decided to encrypt all his data using rsa. unfortunately, he lost his
private key. he has been looking for it all night, and suddenly a genie emerges
from his lamp. he offers ben a quantum computer that can perform exactly one
procedure on large numbers e; d; n. which of the following procedures should ben
choose to recover his data?

(cid:15) find gcd.e; d /.
(cid:15) find the prime factorization of n.

   mcs        2017/6/5     19:42     page 374     #382

374

chapter 9 number theory

(cid:15) determine whether n is prime.
(cid:15) find rem.ed ; n/.
(cid:15) find the inverse of e modulo n (the inverse of e in zn/.
(cid:15) find the inverse of e modulo (cid:30).n/.

class problems
problem 9.82.
let   s try out rsa!
(a) go through the beforehand steps.
(cid:15) choose primes p and q to be relatively small, say in the range 10   40. in
practice, p and q might contain hundreds of digits, but small numbers are
easier to handle with pencil and paper.
(cid:15) try e d 3; 5; 7; : : : until you    nd something that works. use euclid   s algo-
rithm to compute the gcd.
(cid:15) find d (using the pulverizer).

when you   re done, put your public key on the board prominentally labelled    public
key.    this lets another team send you a message.

(b) now send an encrypted message to another team using their public key. select
your message m from the codebook below:

(cid:15) 2 = greetings and salutations!
(cid:15) 3 = yo, wassup?
(cid:15) 4 = you guys are slow!
(cid:15) 5 = all your base are belong to us.
(cid:15) 6 = someone on our team thinks someone on your team is kinda cute.
(cid:15) 7 = you are the weakest link. goodbye.
(c) decrypt the message sent to you and verify that you received what the other
team sent!

problem 9.83. (a) just as rsa would be trivial to crack knowing the factorization
into two primes of n in the public key, explain why rsa would also be trivial to
crack knowing (cid:30).n/.

   mcs        2017/6/5     19:42     page 375     #383

9.13. references

375

(b) show that if you knew n, (cid:30).n/, and that n was the product of two primes, then
you could easily factor n.

problem 9.84.
a critical fact about rsa is, of course, that decrypting an encrypted message al-
ways gives back the original message m. namely, if n d pq where p and q are
distinct primes, m 2   0::pq/, and
d (cid:1) e   1

.mod .p (cid:0) 1/.q (cid:0) 1//;

then

we   ll now prove this.

bmd wwd(cid:0)me(cid:1)d d m .zn/:

(9.40)

(a) explain why (9.40) follows very simply from euler   s theorem when m is rel-
atively prime to n.
all the rest of this problem is about removing the restriction that m be relatively
prime to n. that is, we aim to prove that equation (9.40) holds for all m 2   0::n/.
it is important to realize that there is no practical reason to worry about   or to
bother to check for   this relative primality condition before sending a message m
using rsa. that   s because the whole rsa enterprise is predicated on the dif   culty
of factoring. if an m ever came up that wasn   t relatively prime to n, then we could
factor n by computing gcd.m; n/. so believing in the security of rsa implies
believing that the liklihood of a message m turning up that was not relatively prime
to n is negligible.

but let   s be pure, impractical mathematicians and get rid of this technically un-
necessary relative primality side condition, even if it is harid113ss. one gain for
doing this is that statements about rsa will be simpler without the side condition.
more important, the proof below illustrates a useful general method of proving
things about a number n by proving them separately for the prime factors of n.
(b) prove that if p is prime and a   1 .mod p (cid:0) 1/, then

ma d m .zp/:

(9.41)
(c) give an elementary proof23 that if a   b .mod pi / for distinct primes pi,
then a   b modulo the product of these primes.
(d) note that (9.40) is a special case of

23there is no need to appeal to the chinese remainder theorem.

   mcs        2017/6/5     19:42     page 376     #384

376

chapter 9 number theory

claim. if n is a product of distinct primes and a   1 .mod (cid:30).n//, then

ma d m .zn/:

use the previous parts to prove the claim.

homework problems
problem 9.85.
although rsa has successfully withstood cryptographic attacks for a more than a
quarter century, it is not known that breaking rsa would imply that factoring is
easy.

in this problem we will examine the rabin cryptosystem that does have such
a security certi   cation. namely, if someone has the ability to break the rabin
cryptosystem ef   ciently, then they also have the ability to factor numbers that are
products of two primes.

why should that convince us that it is hard to break the cryptosystem ef   ciently?
well, mathematicians have been trying to factor ef   ciently for centuries, and they
still haven   t    gured out how to do it.
what is the rabin cryptosystem? the public key will be a number n that is a
product of two very large primes p; q such that p   q   3 .mod 4/. to send the
message m, send rem.m2; n /.24

the private key is the factorization of n , namely, the primes p; q. we need to
show that if the person being sent the message knows p; q, then they can decode
the message. on the other hand, if an eavesdropper who doesn   t know p; q listens
in, then we must show that they are very unlikely to    gure out this message.
say that s is a square modulo n if there is an m 2   0; n / such that s   m2
.mod n /. such an m is a square root of s modulo n .
(a) what are the squares modulo 5? for each square in the interval   0; 5/, how
many square roots does it have?

(b) for each integer in   1::15/ that is relatively prime to 15, how many square
roots (modulo 15) does it have? note that all the square roots are also relatively
prime to 15. we won   t go through why this is so here, but keep in mind that this is
a general phenomenon!
(c) suppose that p is a prime such that p   3 .mod 4/. it turns out that squares
modulo p have exactly 2 square roots. first show that .p c 1/=4 is an integer.
24we will see soon, that there are other numbers that would be encrypted by rem.m2; n /, so we   ll
have to disallow those other numbers as possible messages in order to make it possible to decode this
cryptosystem, but let   s ignore that for now.

   mcs        2017/6/5     19:42     page 377     #385

9.13. references

377

next    gure out the two square roots of 1 modulo p. then show that you can    nd a
   square root mod a prime p    of a number by raising the number to the .p c 1/=4th
power. that is, given s, to    nd m such that s   m2 .mod p/, you can compute
rem.s.pc1/=4; p/.
(d) the chinese remainder theorem (problem 9.60) implies that if p; q are dis-
tinct primes, then s is a square modulo pq if and only if s is a square modulo p and
0,
s is a square modulo q. in particular, if s   x2   .x
/2 .mod p/ where x    x
and likewise s   y2   .y
/2 .mod q/ then s has exactly four square roots modulo
n , namely,

0

0

s   .xy/2   .x

0

y/2   .xy

0

/2   .x

0

y

0

/2

.mod pq/:

so, if you know p; q, then using the solution to part (c), you can ef   ciently    nd the
square roots of s! thus, given the private key, decoding is easy.
but what if you don   t know p; q?
let   s assume that the evil message interceptor claims to have a program that can
   nd all four square roots of any number modulo n . show that he can actually
use this program to ef   ciently    nd the factorization of n . thus, unless this evil
message interceptor is extremely smart and has    gured out something that the rest
of the scienti   c community has been working on for years, it is very unlikely that
this ef   cient square root program exists!
hint: pick r arbitrarily from   1::n /. if gcd.n; r/ > 1, then you are done (why?)
so you can halt. otherwise, use the program to    nd all four square roots of r, call
02 .mod n /. how can you use these roots to
them r;(cid:0)r; r
factor n ?

0. note that r 2   r

;(cid:0)r

0

(e) if the evil message interceptor knows that the message is the encoding one of
two possible candidate messages (that is, either    meet at dome at dusk    or    meet at
dome at dawn   ) and is just trying to    gure out which of the two, then can he break
this cryptosystem?

problem 9.86.
you   ve seen how the rsa encryption scheme works, but why is it hard to break?
in this problem, you will see that    nding private keys is as hard as    nding the
prime factorizations of integers. since there is a general consensus in the crypto
community (enough to persuade many large    nancial institutions, for example)
that factoring numbers with a few hundred digits requires astronomical computing
resources, we can therefore be sure it will take the same kind of overwhelming

   mcs        2017/6/5     19:42     page 378     #386

378

chapter 9 number theory

effort to    nd rsa private keys of a few hundred digits. this means we can be
con   dent the private rsa keys are not somehow revealed by the public keys25.
for this problem, assume that n d p (cid:1) q where p; q are both odd primes and that
e is the public key and d the private key of the rsa protocol.. let c wwd e (cid:1) d (cid:0) 1.
(a) show that (cid:30).n/ divides c.

(b) conclude that 4 divides c.
(c) show that if gcd.r; n/ d 1, then r c   1 .mod n/:
a square root of m modulo n is an integer s 2   0:n/ such that s2   m .mod n/.
here is a nice fact to know: when n is a product of two odd primes, then every
number m such that gcd.m; n/ d 1 has 4 square roots modulo n.
in particular, the number 1 has four square roots modulo n. the two trivial ones
are 1 and n (cid:0) 1 (which is   (cid:0)1 .mod n/). the other two are called the nontrivial
square roots of 1.
(d) since you know c, then for any integer r you can also compute the remainder
y of r c=2 divided by n. so y2   r c .mod n/. now if r is relatively prime to n,
then y will be a square root of 1 modulo n by part (c).
show that if y turns out to be a nontrivial root of 1 modulo n, then you can factor
n. hint: from the fact that y2 (cid:0) 1 d .y c 1/.y (cid:0) 1/, show that y c 1 must be
divisible by exactly one of q and p.

(e) it turns out that at least half the positive integers r < n that are relatively
prime to n will yield y   s in part (d) that are nontrivial roots of 1. conclude that if,
in addition to n and the public key e you also knew the private key d, then you can
be sure of being able to factor n.

exam problems
problem 9.87.
suppose alice and bob are using the rsa cryptosystem to send secure messages.
each of them has a public key visible to everyone and a private key known only to
themselves, and using rsa in the usual way, they are able to send secret messages
to each other over public channels.

but a concern for bob is how he knows that a message he gets is actually from
alice   as opposed to some imposter claiming to be alice. this concern can be met
by using rsa to add unforgeable    signatures    to messages. to send a message m

25this is a very weak kind of    security    property, because it doesn   t even rule out the possibility
of deciphering rsa encoded messages by some method that did not require knowing the private key.
nevertheless, over twenty years experience supports the security of rsa in practice.

   mcs        2017/6/5     19:42     page 379     #387

9.13. references

379

to bob with an unforgeable signature, alice uses rsa encryption on her message
m, but instead using bob   s public key to encrypt m, she uses her own private key
to obtain a message m1. she then sends m1 as her    signed    message to bob.
(a) explain how bob can read the original message m from alice   s signed mes-
sage m1.
(let .na; ea/ be alice   s public key and da her private key. assume
m 2   0::na/.)
(b) brie   y explain why bob can be con   dent, assuming rsa is secure, that m1
came from alice rather than some imposter.

(c) notice that not only bob, but anyone can use alice   s public key to reconstruct
her message m from its signed version m1. so how can alice send a secret signed
message to bob over public channels?

   mcs        2017/6/5     19:42     page 380     #388

   mcs        2017/6/5     19:42     page 381     #389

10

directed graphs & partial orders
directed graphs, called digraphs for short, provide a handy way to represent how
things are connected together and how to get from one thing to another by following
those connections. they are usually pictured as a bunch of dots or circles with
arrows between some of the dots, as in figure 10.1. the dots are called nodes or
vertices and the lines are called directed edges or arrows; the digraph in figure 10.1
has 4 nodes and 6 directed edges.

digraphs appear everywhere in computer science. for example, the digraph in
figure 10.2 represents a communication net, a topic we   ll explore in depth in chap-
ter 11. figure 10.2 has three    in    nodes (pictured as little squares) representing
locations where packets may arrive at the net, the three    out    nodes representing
destination locations for packets, and the remaining six nodes (pictured with lit-
tle circles) represent switches. the 16 edges indicate paths that packets can take
through the router.

another place digraphs emerge in computer science is in the hyperlink structure
of the world wide web. letting the vertices x1; : : : ; xn correspond to web pages,
and using arrows to indicate when one page has a hyperlink to another, results in a
digraph like the one in figure 10.3   although the graph of the real world wide web
would have n be a number in the billions and probably even the trillions. at    rst
glance, this graph wouldn   t seem to be very interesting. but in 1995, two students
at stanford, larry page and sergey brin, ultimately became multibillionaires from
the realization of how useful the structure of this graph could be in building a search
engine. so pay attention to id207, and who knows what might happen!

figure 10.1 a 4-node directed graph with 6 edges.

acbd   mcs        2017/6/5     19:42     page 382     #390

382

chapter 10 directed graphs & partial orders

figure 10.2 a 6-switch packet routing digraph.

figure 10.3 links among web pages.

in2in1in0out0out1out2x1x3x4x7x6x2x5   mcs        2017/6/5     19:42     page 383     #391

10.1. vertex degrees

383

figure 10.4 a directed edge e d hu! vi. the edge e starts at the tail vertex u
and ends at the head vertex v.

de   nition 10.0.1. a directed graph g consists of a nonempty set v .g/, called the
vertices of g, and a set e.g/, called the edges of g. an element of v .g/ is called
a vertex. a vertex is also called a node; the words    vertex    and    node    are used
interchangeably. an element of e.g/ is called a directed edge. a directed edge is
also called an    arrow    or simply an    edge.    a directed edge starts at some vertex
u called the tail of the edge, and ends at some vertex v called the head of the edge,
as in figure 10.4. such an edge can be represented by the ordered pair .u; v/. the
notation hu! vi denotes this edge.
there is nothing new in de   nition 10.0.1 except for a lot of vocabulary. for-
mally, a digraph g is the same as a binary relation on the set, v d v .g/   that is,
a digraph is just a binary relation whose domain and codomain are the same set v .
in fact, we   ve already referred to the arrows in a relation g as the    graph    of g.
for example, the divisibility relation on the integers in the interval   1::12   could be
pictured by the digraph in figure 10.5.

10.1 vertex degrees

the in-degree of a vertex in a digraph is the number of arrows coming into it, and
similarly its out-degree is the number of arrows out of it. more precisely,
de   nition 10.1.1. if g is a digraph and v 2 v .g/, then

indeg.v/ wwd jfe 2 e.g/ j head.e/ d vgj
outdeg.v/ wwd jfe 2 e.g/ j tail.e/ d vgj

lemma 10.1.2.

an immediate consequence of this de   nition is

x

indeg.v/ d x

v2v .g/

proof. both sums are equal to je.g/j.

v2v .g/

outdeg.v/:

(cid:4)

uveheadtail   mcs        2017/6/5     19:42     page 384     #392

384

chapter 10 directed graphs & partial orders

figure 10.5 the digraph for divisibility on f1; 2; : : : ; 12g.

10.2 walks and paths

picturing digraphs with points and arrows makes it natural to talk about following
successive edges through the graph. for example, in the digraph of figure 10.5,
you might start at vertex 1, successively follow the edges from vertex 1 to vertex
2, from 2 to 4, from 4 to 12, and then from 12 to 12 twice (or as many times as
you like). the sequence of edges followed in this way is called a walk through the
graph. a path is a walk which never visits a vertex more than once. so following
edges from 1 to 2 to 4 to 12 is a path, but it stops being a path if you go to 12 again.
the natural way to represent a walk is with the sequence of sucessive vertices it

went through, in this case:

1 2 4 12 12 12:

however, it is conventional to represent a walk by an alternating sequence of suc-
cessive vertices and edges, so this walk would formally be

1 h1! 2i 2 h2! 4i 4 h4! 12i 12 h12! 12i 12 h12! 12i 12:

(10.1)

the redundancy of this de   nition is enough to make any computer scientist cringe,
but it does make it easy to talk about how many times vertices and edges occur on
the walk. here is a formal de   nition:

de   nition 10.2.1. a walk in a digraph is an alternating sequence of vertices and
edges that begins with a vertex, ends with a vertex, and such that for every edge
hu! vi in the walk, vertex u is the element just before the edge, and vertex v is the
next element after the edge.

126182410571193   mcs        2017/6/5     19:42     page 385     #393

10.2. walks and paths

385

so a walk v is a sequence of the form

v wwd v0 hv0! v1i v1 hv1! v2i v2 : : : hvk(cid:0)1! vki vk

where hvi ! vic1i 2 e.g/ for i 2   0::k/. the walk is said to start at v0, to end at
vk, and the length jvj of the walk is de   ned to be k.
the walk is a path iff all the vi   s are different, that is, if i    j , then vi    vj .
a closed walk is a walk that begins and ends at the same vertex. a cycle is a
positive length closed walk whose vertices are distinct except for the beginning and
end vertices.

note that a single vertex counts as a length zero path that begins and ends at itself.
it also is a closed walk, but does not count as a cycle, since cycles by de   nition
must have positive length. length one cycles are possible when a node has an
arrow leading back to itself. the graph in figure 10.1 has none, but every vertex in
the divisibility relation digraph of figure 10.5 is in a length one cycle. length one
cycles are sometimes called self-loops.

although a walk is of   cially an alternating sequence of vertices and edges, it
is completely determined just by the sequence of successive vertices on it, or by
the sequence of edges on it. we will describe walks in these ways whenever it   s
convenient. for example, for the graph in figure 10.1,

(cid:15) .a; b; d /, or simply abd, is a (vertex-sequence description of a) length two
path,
(cid:15) .ha! bi ;hb! di/, or simply ha! bihb! di, is (an edge-sequence de-
scription of) the same length two path,
(cid:15) abcbd is a length four walk,
(cid:15) dcbcbd is a length    ve closed walk,
(cid:15) bdcb is a length three cycle,
(cid:15) hb! cihc! bi is a length two cycle, and
(cid:15) hc! bihb  aiha! di is not a walk. a walk is not allowed to follow edges
in the wrong direction.

if you walk for a while, stop for a rest at some vertex, and then continue walking,
you have broken a walk into two parts. for example, stopping to rest after following
two edges in the walk (10.1) through the divisibility graph breaks the walk into the
   rst part of the walk

1 h1! 2i 2 h2! 4i 4

(10.2)

   mcs        2017/6/5     19:42     page 386     #394

386

chapter 10 directed graphs & partial orders

from 1 to 4, and the rest of the walk

4 h4! 12i 12 h12! 12i 12 h12! 12i 12:

(10.3)

from 4 to 12, and we   ll say the whole walk (10.1) is the mergewalks (10.2) and (10.3).
in general, if a walk f ends with a vertex v and a walk r starts with the same vertex

v we   ll say that their merge fbr is the walk that starts with f and continues with
the walks merge; we   ll use the notation fbv r to describe the merge of a walk f that

r.1 two walks can only be merged if the    rst walk ends at the same vertex v with
which the second one walk starts. sometimes it   s useful to name the node v where

ends at v with a walk r that begins at v.

a consequence of this de   nition is that

lemma 10.2.2.

jfbrj d jfj c jrj:

in the next section we   ll get mileage out of walking this way.

10.2.1 finding a path
if you were trying to walk somewhere quickly, you   d know you were in trouble if
you came to the same place twice. this is actually a basic theorem of id207.

theorem 10.2.3. the shortest walk from one vertex to another is a path.
proof. if there is a walk from vertex u to another vertex v    u, then by the well
ordering principle, there must be a minimum length walk w from u to v. we claim
w is a path.

to prove the claim, suppose to the contrary that w is not a path, meaning that

some vertex x occurs twice on this walk. that is,

for some walks e; f; g where the length of f is positive. but then    deleting    f yields
a strictly shorter walk

from u to v, contradicting the minimality of w.

(cid:4)

de   nition 10.2.4. the distance, dist .u; v/, in a graph from vertex u to vertex v is
the length of a shortest path from u to v.

1it   s tempting to say the merge is the concatenation of the two walks, but that wouldn   t quite be
right because if the walks were concatenated, the vertex v would appear twice in a row where the
walks meet.

w d ebx fbx g
ebx g

   mcs        2017/6/5     19:42     page 387     #395

10.3. adjacency matrices

387

as would be expected, this de   nition of distance satis   es:

lemma 10.2.5. [the triangle inequality]

dist .u; v/   dist .u; x/ c dist .x; v/

for all vertices u; v; x with equality holding iff x is on a shortest path from u to v.

of course, you might expect this property to be true, but distance has a technical
de   nition and its properties can   t be taken for granted. for example, unlike ordinary
distance in space, the distance from u to v is typically different from the distance
from v to u. so, let   s prove the triangle inequality

a shortest path from x to v. then by lemma 10.2.2, fbx r is a walk of length
proof. to prove the inequality, suppose f is a shortest path from u to x and r is
dist .u; x/ c dist .x; v/ from u to v, so this sum is an upper bound on the length of
the shortest path from u to v by theorem 10.2.3.
(cid:4)

proof of the    iff    is in problem 10.3.

finally, the relationship between walks and paths extends to closed walks and

cycles:

lemma 10.2.6. the shortest positive length closed walk through a vertex is a cycle
through that vertex.

the proof of lemma 10.2.6 is essentially the same as for theorem 10.2.3; see

problem 10.4.

10.3 adjacency matrices

if a graph g has n vertices v0; v1; : : : ; vn(cid:0)1, a useful way to represent it is with an
n (cid:2) n matrix of zeroes and ones called its adjacency matrix ag. the ij th entry of
the adjacency matrix, .ag/ij , is 1 if there is an edge from vertex vi to vertex vj
and 0 otherwise. that is,

(

1

if   vi ! vj

   2 e.g/;

0

otherwise:

.ag/ij wwd

   mcs        2017/6/5     19:42     page 388     #396

388

chapter 10 directed graphs & partial orders

for example, let h be the 4-node graph shown in figure 10.1. its adjacency matrix
ah is the 4 (cid:2) 4 matrix:

ah d

a b c d
a 0 1 0 1
0 0 1 1
b
c
0 1 0 0
d 0 0 1 0

a payoff of this representation is that we can use matrix powers to count numbers
of walks between vertices. for example, there are two length two walks between
vertices a and c in the graph h :

a ha! bi b hb! ci c
a ha! di d hd ! ci c

and these are the only length two walks from a to c. also, there is exactly one
length two walk from b to c and exactly one length two walk from c to c and from
d to b, and these are the only length two walks in h . it turns out we could have
read these counts from the entries in the matrix .ah /2:

.ah /2 d

a b c d
a 0 0 2 1
b
0 1 1 0
c
0 0 1 1
d 0 1 0 0

more generally, the matrix .ag/k provides a count of the number of length k

walks between vertices in any digraph g as we   ll now explain.

de   nition 10.3.1. the length-k walk counting matrix for an n-vertex graph g is
the n (cid:2) n matrix c such that

cuv wwd the number of length-k walks from u to v:

(10.4)

notice that the adjacency matrix ag is the length-1 walk counting matrix for g,
and that .ag/0, which by convention is the identity matrix, is the length-0 walk
counting matrix.

theorem 10.3.2. if c is the length-k walk counting matrix for a graph g, and d
is the length-m walk counting matrix, then cd is the length k c m walk counting
matrix for g.

   mcs        2017/6/5     19:42     page 389     #397

10.3. adjacency matrices

389

according to this theorem, the square .ag/2 of the adjacency matrix is the length
two walk counting matrix for g. applying the theorem again to .ag/2ag shows
that the length-3 walk counting matrix is .ag/3. more generally, it follows by
induction that

corollary 10.3.3. the length-k counting matrix of a digraph g is .ag/k, for all
k 2 n.
in other words, you can determine the number of length k walks between any

pair of vertices simply by computing the kth power of the adjacency matrix!

that may seem amazing, but the proof uncovers this simple relationship between

id127 and numbers of walks.
proof of theorem 10.3.2. any length .kcm/ walk between vertices u and v begins
with a length k walk starting at u and ending at some vertex w followed by a length
m walk starting at w and ending at v. so the number of length .k c m/ walks from
u to v that go through w at the kth step equals the number cuw of length k walks
from u to w, times the number dw v of length m walks from w to v. we can get the
total number of length .k c m/ walks from u to v by summing, over all possible
vertices w, the number of such walks that go through w at the kth step. in other
words,

#length .k c m/ walks from u to v d x

cuw (cid:1) dw v

(10.5)

w2v .g/

but the right-hand side of (10.5) is precisely the de   nition of .cd/uv. thus, cd
is indeed the length-.k c m/ walk counting matrix.
(cid:4)
10.3.1 shortest paths
the relation between powers of the adjacency matrix and numbers of walks is
cool   to us math nerds at least   but a much more important problem is    nding
shortest paths between pairs of nodes. for example, when you drive home for
vacation, you generally want to take the shortest-time route.
one simple way to    nd the lengths of all the shortest paths in an n-vertex graph g
is to compute the successive powers of ag one by one up to the n (cid:0) 1st, watching
for the    rst power at which each entry becomes positive. that   s because theo-
rem 10.3.2 implies that the length of the shortest path, if any, between u and v,
that is, the distance from u to v, will be the smallest value k for which .ag/k
uv is
nonzero, and if there is a shortest path, its length will be   n (cid:0) 1. re   nements of
this idea lead to methods that    nd shortest paths in reasonably ef   cient ways. the
methods apply as well to weighted graphs, where edges are labelled with weights
or costs and the objective is to    nd least weight, cheapest paths. these re   nements

   mcs        2017/6/5     19:42     page 390     #398

390

chapter 10 directed graphs & partial orders

are typically covered in introductory algorithm courses, and we won   t go into them
any further.

10.4 walk relations

a basic question about a digraph is whether there is a way to get from one particular
(cid:3),
vertex to another. so for any digraph g we are interested in a binary relation g
called the walk relation on v .g/, where

(cid:3)

v wwd there is a walk in g from u to v:

u g

similarly, there is a positive walk relation

c

v wwd there is a positive length walk in g from u to v:

u g

(10.6)

(10.7)

de   nition 10.4.1. when there is a walk from vertex v to vertex w, we say that w
is reachable from v, or equivalently, that v is connected to w.

10.4.1 composition of relations
there is a simple way to extend composition of functions to composition of rela-
tions, and this gives another way to talk about walks and paths in digraphs.
de   nition 10.4.2. let r w b ! c and s w a ! b be binary relations. then the
composition of r with s is the binary relation .r    s / w a ! c de   ned by the
rule

a .r    s / c wwd 9b 2 b: .a s b/ and .b r c/:

(10.8)

this agrees with the de   nition 4.3.1 of composition in the special case when r
and s are functions.2

remembering that a digraph is a binary relation on its vertices, it makes sense to
compose a digraph g with itself. then if we let gn denote the composition of g
with itself n times, it   s easy to check (see problem 10.11) that gn is the length-n
walk relation:

a gn b

iff

there is a length n walk in g from a to b:

2the reversal of the order of r and s in (10.8) is not a typo. this is so that relational composition
generalizes function composition. the value of function f composed with function g at an argument
x is f .g.x//. so in the composition f    g, the function g is applied    rst.

   mcs        2017/6/5     19:42     page 391     #399

10.5. directed acyclic graphs & scheduling

391

this even works for n d 0, with the usual convention that g0 is the identity relation
idv .g/ on the set of vertices.3 since there is a walk iff there is a path, and every
path is of length at most jv .g/j (cid:0) 1, we now have4

(cid:3) d g0 [ g1 [ g2 [ : : : [ g

jv .g/j(cid:0)1 d .g [ g0/

jv .g/j(cid:0)1:

g

the    nal equality points to the use of repeated squaring as a way to compute g
with log n rather than n (cid:0) 1 compositions of relations.

(10.9)
(cid:3)

10.5 directed acyclic graphs & scheduling

some of the prerequisites of mit computer science subjects are shown in fig-
ure 10.6. an edge going from subject s to subject t indicates that s is listed in the
catalogue as a direct prerequisite of t. of course, before you can take subject t,
you have to take not only subject s, but also all the prerequisites of s, and any pre-
requisites of those prerequisites, and so on. we can state this precisely in terms of
the positive walk relation: if d is the direct prerequisite relation on subjects, then
subject u has to be completed before taking subject v iff u d

c

v.

of course it would take forever to graduate if this direct prerequisite graph had
a positive length closed walk. we need to forbid such closed walks, which by
lemma 10.2.6 is the same as forbidding cycles. so, the direct prerequisite graph
among subjects had better be acyclic:

de   nition 10.5.1. a directed acyclic graph (dag) is a directed graph with no
cycles.

dags have particular importance in computer science. they capture key con-
cepts used in analyzing task scheduling and concurrency control. when distributing
a program across multiple processors, we   re in trouble if one part of the program
needs an output that another part hasn   t generated yet! so let   s examine dags and
their connection to scheduling in more depth.

3the identity relation ida on a set a is the equality relation:
iff a d b;

a ida b

for a; b 2 a.

4equation (10.9) involves a harid113ss abuse of notation: we should have written

graph.g

(cid:3)

/ d graph.g0/ [ graph.g1/ : : : :

   mcs        2017/6/5     19:42     page 392     #400

392

chapter 10 directed graphs & partial orders

figure 10.6 subject prerequisites for mit computer science (6-3) majors.

new6-3: sb in computer science and engineeringall subjects are 12 units6.uat 6 units 6.uat6.uat 6 units6 units6.uap 6 units 6.uap6.uap 6 units6 unitssubjectsadvanced undergraduate subjectsaus http://www.eecs.mit.edu/ug/newcurriculum/aus.htmladvanced undergraduate subjectsadvanced undergraduate subjectsaus aus http://http://www.eecs.mit.edu/ug/newcurriculum/aus.htmlwww.eecs.mit.edu/ug/newcurriculum/aus.html213 header6.033 comp sys 6.0336.033 comp syscomp sys6.034 ai 6.0346.034 aiai6.046 adv algorithms 6.0466.046 adv algorithmsadv algorithms6.006* algorithms 6.006*6.006* algorithmsalgorithms6.01* intro eecs i 6.01*6.01* intro eecs iintro eecs i6.02* intro eecs ii 6.02*6.02* intro eecs iiintro eecs iisoftware lab(http://www.eecs.mit.edu/ug/newcurriculum/verghese_6.005.html)software labsoftware lab((http://www.eecs.mit.edu/ug/newcurriculum/verghese_6.005.html)http://www.eecs.mit.edu/ug/newcurriculum/verghese_6.005.html)8.028.028.02coreq6.004 comp architecture 6.0046.004 comp architecturecomp architecturecoreq3 foundation  +   2 introductory(= 1 institute lab)2 math (= 2 rest)elementary exposure to programming (high school, iap, or 6.00) elementary elementary exposure to programmingexposure to programming (high school, iap, or 6.00)(high school, iap, or 6.00)*new subjectjune 200918.06  or 18.0318.06 id202 18.0618.06 id202id20218.03 diff eqs 18.0318.03 diff diff eqseqs6.042 discrete math 6.0426.042 discrete mathdiscrete math6.005* software 6.005*6.005* softwaresoftware   mcs        2017/6/5     19:42     page 393     #401

10.5. directed acyclic graphs & scheduling

393

figure 10.7 dag describing which clothing items have to be put on before oth-
ers.

10.5.1 scheduling
in a scheduling problem, there is a set of tasks, along with a set of constraints
specifying that starting certain tasks depends on other tasks being completed be-
forehand. we can map these sets to a digraph, with the tasks as the nodes and the
direct prerequisite constraints as the edges.

for example, the dag in figure 10.7 describes how a man might get dressed for
a formal occasion. as we describe above, vertices correspond to garments and the
edges specify which garments have to be put on before which others.

when faced with a set of prerequisites like this one, the most basic task is    nding
an order in which to perform all the tasks, one at a time, while respecting the
dependency constraints. ordering tasks in this way is known as topological sorting.
de   nition 10.5.2. a topological sort of a    nite dag is a list of all the vertices
such that each vertex v appears earlier in the list than every other vertex reachable
from v.

there are many ways to get dressed one item at a time while obeying the con-
straints of figure 10.7. we have listed two such topological sorts in figure 10.8. in

underwearshirtjacketbeltright shoeleft shoeright sockleft socktiepants   mcs        2017/6/5     19:42     page 394     #402

394

chapter 10 directed graphs & partial orders

underwear

shirt
pants
belt
tie

jacket
left sock
right sock
left shoe
right shoe

(a)

left sock

shirt
tie

underwear
right sock

pants

right shoe

belt
jacket
left shoe

(b)

figure 10.8 two possible topological sorts of the prerequisites described in fig-
ure 10.7

.

fact, we can prove that every    nite dag has a topological sort. you can think of
this as a mathematical proof that you can indeed get dressed in the morning.

topological sorts for    nite dags are easy to construct by starting from minimal

elements:

de   nition 10.5.3. an vertex v of a dag d is minimum iff every other vertex is
reachable from v.

a vertex v is indexminimal vertex!directed graph   textbf minimal iff v is not

reachable from any other vertex.

it can seem peculiar to use the words    minimum    and    minimal    to talk about
vertices that start paths. these words come from the perspective that a vertex is
   smaller    than any other vertex it connects to. we   ll explore this way of thinking
about dags in the next section, but for now we   ll use these terms because they are
conventional.

one peculiarity of this terminology is that a dag may have no minimum element
but lots of minimal elements. in particular, the clothing example has four minimal
elements: leftsock, rightsock, underwear, and shirt.

to build an order for getting dressed, we pick one of these minimal elements   
say, shirt. now there is a new set of minimal elements; the three elements we didn   t
chose as step 1 are still minimal, and once we have removed shirt, tie becomes
minimal as well. we pick another minimal element, continuing in this way until all
elements have been picked. the sequence of elements in the order they were picked
will be a topological sort. this is how the topological sorts above were constructed.

   mcs        2017/6/5     19:42     page 395     #403

10.5. directed acyclic graphs & scheduling

395

so our construction shows:

theorem 10.5.4. every    nite dag has a topological sort.

there are many other ways of constructing topological sorts. for example, in-
stead of starting from the minimal elements at the beginning of paths, we could
build a topological sort starting from maximal elements at the end of paths. in fact,
we could build a topological sort by picking vertices arbitrarily from a    nite dag
and simply inserting them into the list wherever they will    t.5

10.5.2 parallel task scheduling
for task dependencies, topological sorting provides a way to execute tasks one after
another while respecting those dependencies. but what if we have the ability to
execute more than one task at the same time? for example, say tasks are programs,
the dag indicates data dependence, and we have a parallel machine with lots of
processors instead of a sequential machine with only one. how should we schedule
the tasks? our goal should be to minimize the total time to complete all the tasks.
for simplicity, let   s say all the tasks take the same amount of time and all the
processors are identical.

so given a    nite set of tasks, how long does it take to do them all in an optimal
parallel schedule? we can use walk relations on acyclic graphs to analyze this
problem.

in the    rst unit of time, we should do all minimal items, so we would put on our
left sock, our right sock, our underwear, and our shirt.6 in the second unit of time,
we should put on our pants and our tie. note that we cannot put on our left or right
shoe yet, since we have not yet put on our pants. in the third unit of time, we should
put on our left shoe, our right shoe, and our belt. finally, in the last unit of time,
we can put on our jacket. this schedule is illustrated in figure 10.9.

the total time to do these tasks is 4 units. we cannot do better than 4 units of
time because there is a sequence of 4 tasks that must each be done before the next.
we have to put on a shirt before pants, pants before a belt, and a belt before a jacket.
such a sequence of items is known as a chain.

de   nition 10.5.5. two vertices in a dag are comparable when one of them is
reachable from the other. a chain in a dag is a set of vertices such that any two of
them are comparable. a vertex in a chain that is reachable from all other vertices

5in fact, the dag doesn   t even need to be    nite, but you   ll be relieved to know that we have no

need to go into this.

6yes, we know that you can   t actually put on both socks at once, but imagine you are being dressed
by a bunch of robot processors and you are in a big hurry. still not working for you? ok, forget about
the clothes and imagine they are programs with the precedence constraints shown in figure 10.7.

   mcs        2017/6/5     19:42     page 396     #404

396

chapter 10 directed graphs & partial orders

figure 10.9 a parallel schedule for the tasks-getting-dressed digraph in fig-
ure 10.7. the tasks in ai can be performed in step i for 1   i   4. a chain
of 4 tasks (the critical path in this example) is shown with bold edges.

underwearshirtjacketbeltright shoeleft shoeright sockleft socktiepantsa1a2a3a4   mcs        2017/6/5     19:42     page 397     #405

10.5. directed acyclic graphs & scheduling

397

in the chain is called a maximum element of the chain. a    nite chain is said to end
at its maximum element.

the time it takes to schedule tasks, even with an unlimited number of processors,
is at least as large as the number of vertices in any chain. that   s because if we used
less time than the size of some chain, then two items from the chain would have to
be done at the same step, contradicting the precedence constraints. for this reason,
a largest chain is also known as a critical path. for example, figure 10.9 shows
the critical path for the getting-dressed digraph.

in this example, we were able to schedule all the tasks with t steps, where t is
the size of the largest chain. a nice feature of dags is that this is always possible!
in other words, for any dag, there is a legal parallel schedule that runs in t total
steps.

in general, a schedule for performing tasks speci   es which tasks to do at suc-
cessive steps. every task a has to be scheduled at some step, and all the tasks that
have to be completed before task a must be scheduled for an earlier step. here   s a
rigorous de   nition of schedule.
de   nition 10.5.6. a partition of a set a is a set of nonempty subsets of a called
the blocks7 of the partition, such that every element of a is in exactly one block.
for example, one possible partition of the set fa; b; c; d; eg into three blocks is

fa; cg

fb; eg

fdg:

de   nition 10.5.7. a parallel schedule for a dag d is a partition of v .d/ into
blocks a0; a1; : : : ; such that when j < k, no vertex in aj is reachable from any
vertex in ak. the block ak is called the set of elements scheduled at step k, and the
time of the schedule is the number of blocks. the maximum number of elements
scheduled at any step is called the number of processors required by the schedule.

a largest chain ending at an element a is called a critical path to a, and the
number of elements less than a in the chain is called the depth of a. so in any
possible parallel schedule, there must be at least depth .a/ steps before task a can
be started. in particular, the minimal elements are precisely the elements with depth
0.

there is a very simple schedule that completes every task in its minimum num-
ber of steps: just use a    greedy    strategy of performing tasks as soon as possible.
schedule all the elements of depth k at step k. that   s how we found the above
schedule for getting dressed.

7we think it would be nicer to call them the parts of the partition, but    blocks    is the standard

terminology.

   mcs        2017/6/5     19:42     page 398     #406

398

chapter 10 directed graphs & partial orders

theorem 10.5.8. a minimum time schedule for a    nite dag d consists of the sets
a0; a1; : : : ; where

ak wwd fa 2 v .d/ j depth .a/ d kg:

we   ll leave to problem 10.24 the proof that the sets ak are a parallel schedule
according to de   nition 10.5.7. we can summarize the story above in this way: with
an unlimited number of processors, the parallel time to complete all tasks is simply
the size of a critical path:

corollary 10.5.9. parallel time = size of critical path.

things get more complex when the number of processors is bounded; see prob-

lem 10.25 for an example.

10.5.3 dilworth   s lemma
de   nition 10.5.10. an antichain in a dag is a set of vertices such that no two ele-
ments in the set are comparable   no walk exists between any two different vertices
in the set.

our conclusions about scheduling also tell us something about antichains.

corollary 10.5.11. in a dag d if the size of the largest chain is t, then v .d/ can
be partitioned into t antichains.
proof. let the antichains be the sets ak wwd fa 2 v .d/ j depth .a/ d kg. it is an
(cid:4)
easy exercise to verify that each ak is an antichain (problem 10.24).
corollary 10.5.11 implies8 a famous result about acyclic digraphs:

lemma 10.5.12 (dilworth). for all t > 0, every dag with n vertices must have
either a chain of size greater than t or an antichain of size at least n=t.

proof. assume that there is no chain of size greater than t. let ` be the size of
the largest antichain.
if we make a parallel schedule according to the proof of
corollary 10.5.11, we create a number of antichains equal to the size of the largest
chain, which is less than or equal t. each element belongs to exactly one antichain,
none of which are larger than `. so the total number of elements at most ` times
t   that is, `t (cid:21) n. simple division implies that ` (cid:21) n=t.
(cid:4)

8lemma 10.5.12 also follows from a more general result known as dilworth   s theorem, which

we will not discuss.

   mcs        2017/6/5     19:42     page 399     #407

10.6. partial orders

p

n.

corollary 10.5.13. every dag with n vertices has a chain of size greater than
or an antichain of size at least

proof. set t d p
example 10.5.14. when the man in our example is getting dressed, n d 10.
try t d 3. there is a chain of size 4.
try t d 4. there is no chain of size 5, but there is an antichain of size 4 (cid:21) 10=4.

n in lemma 10.5.12.

(cid:4)

399
p

n

10.6 partial orders

after mapping the    direct prerequisite    relation onto a digraph, we were then able
to use the tools for understanding computer scientists    graphs to make deductions
about something as mundane as getting dressed. this may or may not have im-
pressed you, but we can do better. in the introduction to this chapter, we mentioned
a useful fact that bears repeating: any digraph is formally the same as a binary
relation whose domain and codomain are its vertices. this means that any binary
relation whose domain is the same as its codomain can be translated into a digraph!
talking about the edges of a binary relation or the image of a set under a digraph
may seem odd at    rst, but doing so will allow us to draw important connections
between different types of relations. for instance, we can apply dilworth   s lemma
to the    direct prerequisite    relation for getting dressed, because the graph of that
relation was a dag.

but how can we tell if a binary relation is a dag? and once we know that a
relation is a dag, what exactly can we conclude? in this section, we will abstract
some of the properties that a binary relation might have, and use those properties
to de   ne classes of relations. in particular, we   ll explain this section   s title, partial
orders.

10.6.1 the properties of the walk relation in dags
to begin, let   s talk about some features common to all digraphs. since merging a
walk from u to v with a walk from v to w gives a walk from u to w, both the walk
and positive walk relations have a relational property called transitivity:

de   nition 10.6.1. a binary relation r on a set a is transitive iff

.a r b and b r c/ implies a r c

for every a; b; c 2 a.

   mcs        2017/6/5     19:42     page 400     #408

400

chapter 10 directed graphs & partial orders

so we have

lemma 10.6.2. for any digraph g the walk relations g

(cid:3) are transitive.
since there is a length zero walk from any vertex to itself, the walk relation has

c and g

another relational property called re   exivity:
de   nition 10.6.3. a binary relation r on a set a is re   exive iff a r a for all a 2 a.
now we have

lemma 10.6.4. for any digraph g, the walk relation g

(cid:3) is re   exive.

we know that a digraph is a dag iff it has no positive length closed walks. since
any vertex on a closed walk can serve as the beginning and end of the walk, saying
a graph is a dag is the same as saying that there is no positive length path from
c of a
any vertex back to itself. this means that the positive walk relation of d
dag has a relational property called irre   exivity.

de   nition 10.6.5. a binary relation r on a set a is irre   exive iff

not.a r a/

for all a 2 a.
so we have

lemma 10.6.6. r is a dag iff r

c is irre   exive.

10.6.2 strict partial orders
here is where we begin to de   ne interesting classes of relations:

de   nition 10.6.7. a relation that is transitive and irre   exive is called a strict par-
tial order.

a simple connection between strict partial orders and dags now follows from

lemma 10.6.6:

theorem 10.6.8. a relation r is a strict partial order iff r is the positive walk
relation of a dag.

strict partial orders come up in many situations which on the face of it have
nothing to do with digraphs. for example, the less-than order < on numbers is a
strict partial order:

   mcs        2017/6/5     19:42     page 401     #409

10.6. partial orders

401

(cid:15) if x < y and y < z then x < z, so less-than is transitive, and
(cid:15) not.x < x/, so less-than is irre   exive.

the proper containment relation (cid:26) is also a partial order:

(cid:15) if a (cid:26) b and b (cid:26) c then a (cid:26) c , so containment is transitive, and
(cid:15) not.a (cid:26) a/, so proper containment is irre   exive.
if there are two vertices that are reachable from each other, then there is a posi-
tive length closed walk that starts at one vertex, goes to the other, and then comes
back. so dags are digraphs in which no two vertices are mutually reachable. this
corresponds to a relational property called asymmetry.

de   nition 10.6.9. a binary relation r on a set a is asymmetric iff

a r b implies not.b r a/

for all a; b 2 a.
so we can also characterize dags in terms of asymmetry:

corollary 10.6.10. a digraph d is a dag iff d

c is asymmetric.

corollary 10.6.10 and theorem 10.6.8 combine to give

corollary 10.6.11. a binary relation r on a set a is a strict partial order iff it is
transitive and asymmetric.9

a strict partial order may be the positive walk relation of different dags. this
raises the question of    nding a dag with the smallest number of edges that deter-
mines a given strict partial order. for    nite strict partial orders, the smallest such
dag turns out to be unique and easy to    nd (see problem 10.30).

10.6.3 weak partial orders
the less-than-or-equal relation   is at least as familiar as the less-than strict partial
order, and the ordinary containment relation   is even more common than the
proper containment relation. these are examples of weak partial orders, which are
just strict partial orders with the additional condition that every element is related
to itself. to state this precisely, we have to relax the asymmetry property so it
does not apply when a vertex is compared to itself; this relaxed property is called
antisymmetry:

9some texts use this corollary to de   ne strict partial orders.

   mcs        2017/6/5     19:42     page 402     #410

402

chapter 10 directed graphs & partial orders

de   nition 10.6.12. a binary relation r on a set a, is antisymmetric iff, for all
a    b 2 a,

a r b implies not.b r a/

now we can give an axiomatic de   nition of weak partial orders that parallels the

de   nition of strict partial orders.
de   nition 10.6.13. a binary relation on a set is a weak partial order iff it is tran-
sitive, re   exive, and antisymmetric.

the following lemma gives another characterization of weak partial orders that

follows directly from this de   nition.
lemma 10.6.14. a relation r on a set a is a weak partial order iff there is a strict
partial order s on a such that

a r b

iff

.a s b or a d b/;

for all a; b 2 a.
since a length zero walk goes from a vertex to itself, this lemma combined with

theorem 10.6.8 yields:
corollary 10.6.15. a relation is a weak partial order iff it is the walk relation of a
dag.

for weak partial orders in general, we often write an ordering-style symbol like
(cid:22) or v instead of a letter symbol like r.10 likewise, we generally use (cid:30) or @ to
indicate a strict partial order.
two more examples of partial orders are worth mentioning:
example 10.6.16. let a be some family of sets and de   ne a r b iff a (cid:27) b. then
r is a strict partial order.
example 10.6.17. the divisibility relation is a weak partial order on the nonnega-
tive integers.

for practice with the de   nitions, you can check that two more examples are
vacuously partial orders on a set d:
the identity relation idd is a weak partial
order, and the empty relation   the relation with no arrows   is a strict partial order.
note that some authors de   ne    partial orders    to be what we call weak partial
orders. however, we   ll use the phrase    partial order    to mean a relation that may
be either a weak or strict partial order.

10general relations are usually denoted by a letter like r instead of a cryptic squiggly symbol, so
(cid:22) is kind of like the musical performer/composer prince, who rede   ned the spelling of his name to
be his own squiggly symbol. a few years ago he gave up and went back to the spelling    prince.   

   mcs        2017/6/5     19:42     page 403     #411

10.7. representing partial orders by set containment

403

10.7 representing partial orders by set containment

axioms can be a great way to abstract and reason about important properties of
objects, but it helps to have a clear picture of the things that satisfy the axioms.
dags provide one way to picture partial orders, but it also can help to picture them
in terms of other familiar mathematical objects. in this section, we   ll show that
every partial order can be pictured as a collection of sets related by containment.
that is, every partial order has the    same shape    as such a collection. the technical
word for    same shape    is    isomorphic.   

de   nition 10.7.1. a binary relation r on a set a is isomorphic to a relation s on
a set b iff there is a relation-preserving bijection from a to b; that is, there is a
bijection f w a ! b such that for all a; a

0 2 a,

0

a r a

iff

f .a/ s f .a

0

/:

to picture a partial order (cid:22) on a set a as a collection of sets, we simply represent
each element a by the set of elements that are (cid:22) to that element, that is,

a  ! fb 2 a j b (cid:22) ag:

for example, if (cid:22) is the divisibility relation on the set of integers f1; 3; 4; 6; 8; 12g,
then we represent each of these integers by the set of integers in a that divides it.
so

1  ! f1g
3  ! f1; 3g
4  ! f1; 4g
6  ! f1; 3; 6g
8  ! f1; 4; 8g
12  ! f1; 3; 4; 6; 12g

so, the fact that 3 j 12 corresponds to the fact that f1; 3g   f1; 3; 4; 6; 12g.
in this way we have completely captured the weak partial order (cid:22) by the subset
relation on the corresponding sets. formally, we have
lemma 10.7.2. let (cid:22) be a weak partial order on a set a. then (cid:22) is isomorphic
to the subset relation   on the collection of inverse images under the (cid:22) relation of
elements a 2 a.

   mcs        2017/6/5     19:42     page 404     #412

404

chapter 10 directed graphs & partial orders

we leave the proof to problem 10.36. essentially the same construction shows
that strict partial orders can be represented by sets under the proper subset relation,
(cid:26) (problem 10.37). to summarize:
theorem 10.7.3. every weak partial order (cid:22) is isomorphic to the subset relation
  on a collection of sets.
every strict partial order (cid:30) is isomorphic to the proper subset relation (cid:26) on a
collection of sets.

10.8 linear orders

the familiar order relations on numbers have an important additional property:
given two different numbers, one will be bigger than the other. partial orders with
this property are said to be linear orders. you can think of a linear order as one
where all the elements are lined up so that everyone knows exactly who is ahead
and who is behind them in the line.11

de   nition 10.8.1. let r be a binary relation on a set a and let a; b be elements
of a. then a and b are comparable with respect to r iff   a r b or b r a  .
a partial order for which every two different elements are comparable is called a
linear order.
so < and   are linear orders on r. on the other hand, the subset relation is
not linear, since, for example, any two different    nite sets of the same size will be
incomparable under  . the prerequisite relation on course 6 required subjects is
also not linear because, for example, neither 8.01 nor 6.042 is a prerequisite of the
other.

10.9 product orders

taking the product of two relations is a useful way to construct new relations from
old ones.

11linear orders are often called    total    orders, but this terminology con   icts with the de   nition of

   total relation,    and it regularly confuses students.

being a linear order is a much stronger condition than being a partial order that is a total relation.

for example, any weak partial order is a total relation but generally won   t be linear.

   mcs        2017/6/5     19:42     page 405     #413

10.10. equivalence relations

405

de   nition 10.9.1. the product r1 (cid:2) r2 of relations r1 and r2 is de   ned to be
the relation with

domain.r1 (cid:2) r2/
codomain.r1 (cid:2) r2/
.a1; a2/ .r1 (cid:2) r2/ .b1; b2/

wwd domain.r1/ (cid:2) domain.r2/;
wwd codomain.r1/ (cid:2) codomain.r2/;
iff

  a1 r1 b1 and a2 r2 b2  :

it follows directly from the de   nitions that products preserve the properties of
transitivity, re   exivity, irre   exivity, and antisymmetry (see problem 10.51). if r1
and r2 both have one of these properties, then so does r1 (cid:2) r2. this implies that
if r1 and r2 are both partial orders, then so is r1 (cid:2) r2.
example 10.9.2. de   ne a relation y on age-height pairs of being younger and
shorter. this is the relation on the set of pairs .y; h/ where y is a nonnegative
integer   2400 that we interpret as an age in months, and h is a nonnegative integer
  120 describing height in inches. we de   ne y by the rule

.y1; h1/ y .y2; h2/

iff y1   y2 and h1   h2:

that is, y is the product of the  -relation on ages and the  -relation on heights.
since both ages and heights are ordered numerically, the age-height relation y is
a partial order. now suppose we have a class of 101 students. then we can apply
dilworth   s lemma 10.5.12 to conclude that there is a chain of 11 students   that is,
11 students who get taller as they get older   or an antichain of 11 students   that is,
11 students who get taller as they get younger, which makes for an amusing in-class
demo.

on the other hand, the property of being a linear order is not preserved. for
example, the age-height relation y is the product of two linear orders, but it is not
linear: the age 240 months, height 68 inches pair, (240,68), and the pair (228,72)
are incomparable under y .

10.10 equivalence relations

de   nition 10.10.1. a relation r on a set a is symmetric when

8x; y 2 a: x r y implies y r x:

a relation is an equivalence relation iff it is re   exive, symmetric, and transitive.

congruence modulo n is an important example of an equivalence relation:

   mcs        2017/6/5     19:42     page 406     #414

406

chapter 10 directed graphs & partial orders

(cid:15) it is re   exive because x   x .mod n/.
(cid:15) it is symmetric because x   y .mod n/ implies y   x .mod n/.
(cid:15) it is transitive because x   y .mod n/ and y   z .mod n/ imply that x   z
.mod n/.

there is an even more well-known example of an equivalence relation: equality
itself.

if we think of a total function f as attaching a label to each element in its domain,
then    having the same label    de   nes an equivalence relation. more precisely, if f
is a total function, we can de   ne a basic equivalence relation  f on the domain of
f as follows:
de   nition 10.10.2. if f is a total function, the relation  f on domain.f / is de-
   ned by the rule:

a  f b iff f .a/ d f .b/:

the relation  f inherits the properties of re   exivity, symmetry and transitivity
from the corresponding properties of the equality relation. so  f is indeed an
equivalence relation. this observation gives another way to see that congruence
modulo n is an equivalence relation:
the remainder lemma 9.6.1 implies that
congruence modulo n is the same as  r where r.a/ is the remainder of a divided
by n.
in fact, a relation is an equivalence relation iff it equals  f for some total func-
tion f (see problem 10.57). so every equivalence relation can actually be under-
stood as being the relation of    having the same label    according to some labelling
scheme.

10.10.1 equivalence classes
equivalence relations are closely related to partitions because the images of ele-
ments under an equivalence relation are the blocks of a partition.
de   nition 10.10.3. given an equivalence relation r w a ! a, the equivalence
class   a  r of an element a 2 a is the set of all elements of a related to a by r.
namely,

  a  r wwd fx 2 a j a r xg:

in other words,   a  r is the image r.a/.
for example, suppose that a d z and a r b means that a   b .mod 5/. then

  7  r d f: : : ;(cid:0)3; 2; 7; 12; 22; : : :g:

   mcs        2017/6/5     19:42     page 407     #415

10.11. summary of relational properties

407

notice that 7, 12, 17, etc., all have the same equivalence class; that is,   7  r d
  12  r d   17  r d (cid:1)(cid:1)(cid:1) .
there is an exact correspondence between equivalence relations on a and parti-
tions of a. namely, given any partition of a set, being in the same block is obviously
an equivalence relation. on the other hand we have:
theorem 10.10.4. the equivalence classes of an equivalence relation on a set a
are the blocks of a partition of a.

we   ll leave the proof of theorem 10.10.4 as a basic exercise in axiomatic rea-
soning (see problem 10.56), but let   s look at an example. the congruent-mod-5
relation partitions the integers into    ve equivalence classes:

f: : : ;(cid:0)5; 0; 5; 10; 15; 20; : : :g
f: : : ;(cid:0)4; 1; 6; 11; 16; 21; : : :g
f: : : ;(cid:0)3; 2; 7; 12; 17; 22; : : :g
f: : : ;(cid:0)2; 3; 8; 13; 18; 23; : : :g
f: : : ;(cid:0)1; 4; 9; 14; 19; 24; : : :g

in these terms, x   y .mod 5/ is equivalent to the assertion that x and y are both
in the same block of this partition. for example, 6   16 .mod 5/, because they   re
both in the second block, but 2 6  9 .mod 5/ because 2 is in the third block while
9 is in the last block.

in social terms, if    likes    were an equivalence relation, then everyone would be

partitioned into cliques of friends who all like each other and no one else.

10.11 summary of relational properties

a relation r w a ! a is the same as a digraph with vertices a.
re   exivity r is re   exive when

8x 2 a: x r x:

every vertex in r has a self-loop.

irre   exivity r is irre   exive when

not  9x 2 a: x r x  :

there are no self-loops in r.

   mcs        2017/6/5     19:42     page 408     #416

408

chapter 10 directed graphs & partial orders

symmetry r is symmetric when

8x; y 2 a: x r y implies y r x:

if there is an edge from x to y in r, then there is an edge back from y to x
as well.

asymmetry r is asymmetric when

8x; y 2 a: x r y implies not.y r x/:

there is at most one directed edge between any two vertices in r, and there
are no self-loops.

antisymmetry r is antisymmetric when

8x    y 2 a: x r y implies not.y r x/:

equivalently,

8x; y 2 a: .x r y and y r x/ implies x d y:

there is at most one directed edge between any two distinct vertices, but
there may be self-loops.

transitivity r is transitive when

8x; y; z 2 a: .x r y and y r z/ implies x r z:

if there is a positive length path from u to v, then there is an edge from u
to v.

linear r is linear when

8x    y 2 a: .x r y or y r x/

given any two vertices in r, there is an edge in one direction or the other
between them.

strict partial order r is a strict partial order iff r is transitive and irre   exive iff
r is transitive and asymmetric iff it is the positive length walk relation of a
dag.

weak partial order r is a weak partial order iff r is transitive and anti-symmetric

and re   exive iff r is the walk relation of a dag.

equivalence relation r is an equivalence relation iff r is re   exive, symmetric
and transitive iff r equals the in-the-same-block-relation for some partition
of domain.r/.

   mcs        2017/6/5     19:42     page 409     #417

10.12. references

409

10.12 references

[9], [15], [24], [27], [29]

problems for section 10.1

practice problems
problem 10.1.
let s be a nonempty set of size n 2 zc, and let f w s ! s be total function. let
df be the digraph with vertices s whose edges are fhs! f .s/i j s 2 sg.
(a) what are the possible values of the out-degrees of vertices of df ?
(b) what are the possible values of the in-degrees of the vertices?

(c) suppose f is a surjection. now what are the possible values of the in-degrees
of the vertices?

exam problems
problem 10.2.
the proof of the handshaking lemma 10.1.2 invoked the    obvious    fact that in any
   nite digraph, the sum of the in-degrees of the vertices equals the number of arrows
in the graph. that is,

claim. for any    nite digraph gx

indeg.v/ d j graph.g/j;

(10.10)

v2v .g/
but this claim might not be obvious to everyone. so prove it by induction on the
number j graph.g/j of arrows.

problems for section 10.2

practice problems
problem 10.3.
lemma 10.2.5 states that dist .u; v/   dist .u; x/ c dist .x; v/. it also states that

   mcs        2017/6/5     19:42     page 410     #418

410

chapter 10 directed graphs & partial orders

equality holds iff x is on a shortest path from u to v.
(a) prove the    iff    statement from left to right.

(b) prove the    iff    from right to left.

class problems
problem 10.4. (a) give an example of a digraph that has a closed walk including
two vertices but has no cycle including those vertices.

(b) prove lemma 10.2.6:
lemma. the shortest positive length closed walk through a vertex is a cycle.

problem 10.5.
a 3-bit string is a string made up of 3 characters, each a 0 or a 1. suppose you   d
like to write out, in one string, all eight of the 3-bit strings in any convenient order.
for example, if you wrote out the 3-bit strings in the usual order starting with 000
001 010. . . , you could concatenate them together to get a length 3 (cid:1) 8 d 24 string
that started 000001010. . . .

but you can get a shorter string containing all eight 3-bit strings by starting with
00010. . . . now 000 is present as bits 1 through 3, and 001 is present as bits 2
through 4, and 010 is present as bits 3 through 5, . . . .
(a) say a string is 3-good if it contains every 3-bit string as 3 consecutive bits
somewhere in it. find a 3-good string of length 10, and explain why this is the
minimum length for any string that is 3-good.

(b) explain how any walk that includes every edge in the graph shown in fig-
ure 10.10 determines a string that is 3-good. find the walk in this graph that deter-
mines your 3-good string from part (a).

(c) explain why a walk in the graph of figure 10.10 that includes every every
edge exactly once provides a minimum-length 3-good string.12
(d) generalize the 2-bit graph to a k-bit digraph bk for k (cid:21) 2, where v .bk/ wwd
f0; 1gk, and any walk through bk that contains every edge exactly once determines
a minimum length .k c 1/-good bit-string.13
12the 3-good strings explained here generalize to n-good strings for n (cid:21) 3. they were studied by
the great dutch mathematician/logician nicolaas de bruijn, and are known as de bruijn sequences.
de bruijn died in february, 2012 at the age of 94.

13problem 10.7 explains why such    eulerian    paths exist.

   mcs        2017/6/5     19:42     page 411     #419

10.12. references

411

figure 10.10 the 2-bit graph.

what is this minimum length?
de   ne the transitions of bk. verify that the in-degree of each vertex is the same as
its out-degree and that there is a positive length path from any vertex to any other
vertex (including itself) of length at most k.

homework problems
problem 10.6. (a) give an example of a digraph in which a vertex v is on a positive
even-length closed walk, but no vertex is on an even-length cycle.

(b) give an example of a digraph in which a vertex v is on an odd-length closed
walk but not on an odd-length cycle.

(c) prove that every odd-length closed walk contains a vertex that is on an odd-
length cycle.

problem 10.7.
an euler tour14 of a graph is a closed walk that includes every edge exactly once.

14in some other texts, this is called an euler circuit.

+0+1+0+0+1+1+100111001+0   mcs        2017/6/5     19:42     page 412     #420

412

chapter 10 directed graphs & partial orders

such walks are named after the famous 17th century mathematician leonhard eu-
ler. (same euler as for the constant e (cid:25) 2:718 and the totient function (cid:30)   he did a
lot of stuff.)

so how do you tell in general whether a graph has an euler tour? at    rst glance
this may seem like a daunting problem (the similar sounding problem of    nding
a cycle that touches every vertex exactly once is one of those million dollar np-
complete problems known as the hamiltonian cycle problem)   but it turns out to
be easy.
(a) show that if a graph has an euler tour, then the in-degree of each vertex equals
its out-degree.

a digraph is weakly connected if there is a    path    between any two vertices that
may follow edges backwards or forwards.15 in the remaining parts, we   ll work out
the converse. suppose a graph is weakly connected, and the in-degree of every
vertex equals its out-degree. we will show that the graph has an euler tour.

a trail is a walk in which each edge occurs at most once.

(b) suppose that a trail in a weakly connected graph does not include every edge.
explain why there must be an edge not on the trail that starts or ends at a vertex on
the trail.

in the remaining parts, assume the graph is weakly connected, and the in-degree

of every vertex equals its out-degree. let w be the longest trail in the graph.
(c) show that if w is closed, then it must be an euler tour.
hint: part (b)

(d) explain why all the edges starting at the end of w must be on w.

(e) show that if w was not closed, then the in-degree of the end would be bigger
than its out-degree.
hint: part (d)

(f) conclude that if the in-degree of every vertex equals its out-degree in a    nite,
weakly connected digraph, then the digraph has an euler tour.

15more precisely, a graph g is weakly connected iff there is a path from any vertex to any other

vertex in the graph h with

v .h / d v .g/; and
e.h / d e.g/ [ fhv! ui j hu! vi 2 e.g/g:
(cid:0)1.

in other words h d g [ g

   mcs        2017/6/5     19:42     page 413     #421

10.12. references

413

problems for section 10.3

homework problems
problem 10.8.
the weight of a walk in a weighted graph is the sum of the weights of the successive
edges in the walk. the minimum weight matrix for length k walks in an n-vertex
graph g is the n (cid:2) n matrix w such that for u; v 2 v .g/,
wuv wwd
the min+ product of two n (cid:2) n matrices w and m with entries in r [ f1g is the
n (cid:2) n matrix w (cid:1)

(
w if w is the minimum weight among length k walks from u to v;
1 if there is no length k walk from u to v:

min+

m whose ij entry is
.w (cid:1)

min+

v /ij wwd minfwi k c vkj j 1   k   ng :

prove the following theorem.

theorem. if w is the minimum weight matrix for length k walks in a weighted
graph g, and v is the minimum weight matrix for length m walks, then w (cid:1)
v is
the minimum weight matrix for length k c m walks.

min+

problems for section 10.4

practice problems
problem 10.9.
let

a wwd f1; 2; 3g
b wwd f4; 5; 6g
r wwd f.1; 4/; .1; 5/; .2; 5/; .3; 6/g
s wwd f.4; 5/; .4; 6/; .5; 4/g:

note that r is a relation from a to b and s is a relation from b to b.

list the pairs in each of the relations below.

   mcs        2017/6/5     19:42     page 414     #422

414

chapter 10 directed graphs & partial orders

(a) s    r.
(b) s    s.
(c) s

(cid:0)1    r.

problem 10.10.
in a round-robin tournament, every two distinct players play against each other
just once. for a round-robin tournament with no tied games, a record of who beat
whom can be described with a tournament digraph, where the vertices correspond
to players and there is an edge hx! yi iff x beat y in their game.
a ranking is a path that includes all the players. so in a ranking, each player won
the game against the next lowest ranked player, but may very well have lost their
games against much lower ranked players   whoever does the ranking may have a
lot of room to play favorites.
(a) give an example of a tournament digraph with more than one ranking.

(b) prove that if a tournament digraph is a dag, then it has at most one ranking.

(c) prove that every    nite tournament digraph has a ranking.

optional

(d) prove that the greater-than relation > on the rational numbers q is a dag and
a tournament graph that has no ranking.

homework problems
problem 10.11.
let r be a binary relation on a set a. regarding r as a digraph, let w .n/ denote
the length-n walk relation in the digraph r, that is,

a w .n/ b wwd there is a length n walk from a to b in r:

(a) prove that

w .n/    w .m/ d w .mcn/

(10.11)

for all m; n 2 n, where    denotes relational composition.
(b) let rn be the composition of r with itself n times for n (cid:21) 0. so r0 wwd ida,
and rnc1 wwd r    rn.

   mcs        2017/6/5     19:42     page 415     #423

10.12. references

conclude that

for all n 2 n.
(c) conclude that

rn d w .n/
jaj[

c d

ri

r

id1

415

(10.12)

where r

c is the positive length walk relation determined by r on the set a.

problem 10.12.
we can represent a relation s between two sets a d fa1; : : : ; ang and b d
fb1; : : : ; bmg as an n (cid:2) m matrix ms of zeroes and ones, with the elements of
ms de   ned by the rule

ms .i; j / d 1

iff

ai s bj :

if we represent relations as matrices this way, then we can compute the com-
position of two relations r and s by a    boolean    id127    of their
matrices. boolean id127 is the same as id127 except
that addition is replaced by or, multiplication is replaced by and, and 0 and 1 are
used as the boolean values false and true. namely, suppose r w b ! c is a bi-
nary relation with c d fc1; : : : ; cpg. so mr is an m (cid:2) p matrix. then ms    mr
is an n (cid:2) p matrix de   ned by the rule:
  ms    mr  .i; j / wwd orm

(10.13)
prove that the matrix representation mr  s of r    s equals ms    mr (note the
reversal of r and s).

kd1  ms .i; k/ and mr.k; j /  :

problem 10.13.
chickens are rather aggressive birds that tend to establish dominance over other
chickens by pecking them   hence the term    pecking order.    so for any two chick-
ens in a farmyard, either the    rst pecks the second, or the second pecks the    rst, but
not both. we say that chicken u virtually pecks chicken v if either:

(cid:15) chicken u pecks chicken v, or
(cid:15) chicken u pecks some other chicken w who in turn pecks chicken v.

   mcs        2017/6/5     19:42     page 416     #424

416

chapter 10 directed graphs & partial orders

a chicken that virtually pecks every other chicken is called a king chicken.

we can model this situation with a chicken digraph whose vertices are chickens,
with an edge from chicken u to chicken v precisely when u pecks v. in the graph
in figure 10.11, three of the four chickens are kings. chicken c is not a king in
this example since it does not peck chicken b and it does not peck any chicken that
pecks chicken b. chicken a is a king since it pecks chicken d, who in turn pecks
chickens b and c.

in general, a tournament digraph is a digraph with exactly one edge between

each pair of distinct vertices.

figure 10.11 a 4-chicken tournament in which chickens a, b and d are kings.

.

(a) de   ne a 10-chicken tournament graph with a king chicken that has outdegree
1.

(b) describe a 5-chicken tournament graph in which every player is a king.

(c) prove
theorem (king chicken theorem). any chicken with maximum out-degree in a
tournament is a king.
the king chicken theorem means that if the player with the most victories is
defeated by another player x, then at least he/she defeats some third player that
defeats x. in this sense, the player with the most victories has some sort of bragging
rights over every other player. unfortunately, as figure 10.11 illustrates, there can
be many other players with such bragging rights, even some with fewer victories.

abcdkingkingkingnot a king   mcs        2017/6/5     19:42     page 417     #425

10.12. references

417

problems for section 10.5

practice problems
problem 10.14.
what is the size of the longest chain that is guaranteed to exist in any partially
ordered set of n elements? what about the largest antichain?

problem 10.15.
let fa; :::; hg be a set of tasks that we must complete. the following dag de-
scribes which tasks must be done before others, where there is an arrow from s to
t iff s must be done before t .

(a) write the longest chain.

(b) write the longest antichain.

(c) if we allow parallel scheduling, and each task takes 1 minute to complete,
what is the minimum amount of time needed to complete all tasks?

problem 10.16.
describe a sequence consisting of the integers from 1 to 10,000 in some order so
that there is no increasing or decreasing subsequence of size 101.

   mcs        2017/6/5     19:42     page 418     #426

418

chapter 10 directed graphs & partial orders

problem 10.17.
suppose the vertices of a dag represent tasks taking unit time to complete, and
the edges indicate prerequisites among the tasks. assume there is no bound on how
many tasks may be performed in parallel.

what is the smallest number of vertices (tasks) possible in a dag for which there

is more than one minimum time schedule? carefully justify your answer.

problem 10.18.
the following dag describes the prerequisites among tasks f1; : : : ; 9g.

(a) if each task takes unit time to complete, what is the minimum parallel time to
complete all the tasks? brie   y explain.

(b) what is the minimum parallel time if no more than two tasks can be completed
in parallel? brie   y explain.

problem 10.19.
the following dag describes the prerequisites among tasks f1; : : : ; 9g.
(a) if each task takes unit time to complete, what is the minimum time to complete
all the tasks? brie   y explain.

(b) what is the minimum time if no more than two tasks can be completed in
parallel? brie   y explain.

8 1 2 3 4 5 6 7 9    mcs        2017/6/5     19:42     page 419     #427

10.12. references

419

class problems
problem 10.20.
the table below lists some prerequisite information for some subjects in the mit
computer science program (in 2006). this de   nes an indirect prerequisite relation
that is a dag with these subjects as vertices.

18:01 ! 6:042
18:01 ! 18:03
8:01 ! 8:02
6:042 ! 6:046
6:001; 6:002 ! 6:003
6:004 ! 6:033

18:01 ! 18:02
6:046 ! 6:840
6:001 ! 6:034
18:03; 8:02 ! 6:002
6:001; 6:002 ! 6:004
6:033 ! 6:857

(a) explain why exactly six terms are required to    nish all these subjects, if you
can take as many subjects as you want per term. using a greedy subject selection
strategy, you should take as many subjects as possible each term. exhibit your
complete class schedule each term using a greedy strategy.

(b) in the second term of the greedy schedule, you took    ve subjects including
18.03.
identify a set of    ve subjects not including 18.03 such that it would be
possible to take them in any one term (using some nongreedy schedule). can you
   gure out how many such sets there are?

8 1 2 3 4 5 6 7 9    mcs        2017/6/5     19:42     page 420     #428

420

chapter 10 directed graphs & partial orders

(c) exhibit a schedule for taking all the courses   but only one per term.

(d) suppose that you want to take all of the subjects, but can handle only two per
term. exactly how many terms are required to graduate? explain why.

(e) what if you could take three subjects per term?

problem 10.21.
a pair of math for computer science teaching assistants, lisa and annie, have
decided to devote some of their spare time this term to establishing dominion over
the entire galaxy. recognizing this as an ambitious project, they worked out the
following table of tasks on the back of annie   s copy of the lecture notes.

1. devise a logo and cool imperial theme music - 8 days.

2. build a    eet of hyperwarp stardestroyers out of eating paraphernalia swiped

from lobdell - 18 days.

3. seize control of the united nations - 9 days, after task #1.

4. get shots for lisa   s cat, tailspin - 11 days, after task #1.

5. open a starbucks chain for the army to get their caffeine - 10 days, after

task #3.

6. train an army of elite interstellar warriors by dragging people to see the

phantom menace dozens of times - 4 days, after tasks #3, #4, and #5.

7. launch the    eet of stardestroyers, crush all sentient alien species, and es-

tablish a galactic empire - 6 days, after tasks #2 and #6.

8. defeat microsoft - 8 days, after tasks #2 and #6.

we picture this information in figure 10.12 below by drawing a point for each
task, and labelling it with the name and weight of the task. an edge between
two points indicates that the task for the higher point must be completed before
beginning the task for the lower one.
(a) give some valid order in which the tasks might be completed.

lisa and annie want to complete all these tasks in the shortest possible time.

however, they have agreed on some constraining work rules.

(cid:15) only one person can be assigned to a particular task; they cannot work to-
gether on a single task.

10.12. references

421

   mcs        2017/6/5     19:42     page 421     #429

devise logo

u

 

8
a
a
a

 

 

u

get shots
11

a
aa
 
 

 
 

 

u

 
  
seize control
9
b


b



u





q




q

b
b

b

b

q

q

b
b
qq
bb
train army

q

open chain
10

build    eet
18

u

e
e

 
 
 

e
e

e
e
e

e
e

e
e

 
 

 
 

 
 
 

 
 

 
 

 
 

e
e
e

 
4
  
q
q

u
pppppppppppppp
u

u

 
 
 

q

q

q

e
e

e
e

 
q
  
q
6

launch    eet

ee
8

defeat microsoft

figure 10.12 graph representing the task precedence constraints.

(cid:15) once a person is assigned to a task, that person must work exclusively on
the assignment until it is completed. so, for example, lisa cannot work on
building a    eet for a few days, run to get shots for tailspin, and then return
to building the    eet.

(b) lisa and annie want to know how long conquering the galaxy will take. annie
suggests dividing the total number of days of work by the number of workers, which
is two. what lower bound on the time to conquer the galaxy does this give, and why
might the actual time required be greater?

(c) lisa proposes a different method for determining the duration of their project.
she suggests looking at the duration of the critical path, the most time-consuming
sequence of tasks such that each depends on the one before. what lower bound
does this give, and why might it also be too low?

(d) what is the minimum number of days that lisa and annie need to conquer the
galaxy? no proof is required.

problem 10.22.

   mcs        2017/6/5     19:42     page 422     #430

422

chapter 10 directed graphs & partial orders

answer the following questions about the powerset pow.f1; 2; 3; 4g/ partially or-
dered by the strict subset relation (cid:26).
(a) give an example of a maximum length chain.

(b) give an example of an antchain of size 6.
(c) describe an example of a topological sort of pow.f1; 2; 3; 4g/.
(d) suppose the partial order describes scheduling constraints on 16 tasks. that
is, if

a (cid:26) b   f1; 2; 3; 4g;

then a has to be completed before b starts.16 what is the minimum number of
processors needed to complete all the tasks in minimum parallel time?
prove it.

(e) what is the length of a minimum time 3-processor schedule?
prove it.

homework problems
problem 10.23.
the following operations can be applied to any digraph, g:

1. delete an edge that is in a cycle.
2. delete edge hu! vi if there is a path from vertex u to vertex v that does not

include hu! vi.

3. add edge hu! vi if there is no path in either direction between vertex u and

vertex v.

the procedure of repeating these operations until none of them are applicable can
be modeled as a state machine. the start state is g, and the states are all possible
digraphs with the same vertices as g.
(a) let g be the graph with vertices f1; 2; 3; 4g and edges

fh1! 2i ;h2! 3i ;h3! 4i ;h3! 2i ;h1! 4ig

what are the possible    nal states reachable from g?

a line graph is a graph whose edges are all on one path. all the    nal graphs in

part (a) are line graphs.

16as usual, we assume each task requires one time unit to complete.

   mcs        2017/6/5     19:42     page 423     #431

10.12. references

423

(b) prove that if the procedure terminates with a digraph h then h is a line graph
with the same vertices as g.
hint: show that if h is not a line graph, then some operation must be applicable.

(c) prove that being a dag is a preserved invariant of the procedure.

(d) prove that if g is a dag and the procedure terminates, then the walk relation
of the    nal line graph is a topological sort of g.
hint: verify that the predicate

p .u; v/ wwd there is a directed path from u to v

is a preserved invariant of the procedure, for any two vertices u; v of a dag.

(e) prove that if g is    nite, then the procedure terminates.
hint: let s be the number of cycles, e be the number of edges, and p be the number
of pairs of vertices with a directed path (in either direction) between them. note
that p   n2 where n is the number of vertices of g. find coef   cients a; b; c such
that as c bpc ec c is nonnegative integer valued and decreases at each transition.

problem 10.24.
let (cid:30) be a strict partial order on a set a and let

ak wwd fa j depth .a/ d kg

where k 2 n.
(a) prove that a0; a1; : : : is a parallel schedule for (cid:30) according to de   nition 10.5.7.
(b) prove that ak is an antichain.

problem 10.25.
we want to schedule n tasks with prerequisite constraints among the tasks de   ned
by a dag.
(a) explain why any schedule that requires only p processors must take time at
least dn=pe.
(b) let dn;t be the dag with n elements that consists of a chain of t(cid:0)1 elements,
with the bottom element in the chain being a prerequisite of all the remaining ele-
ments as in the following    gure:

   mcs        2017/6/5     19:42     page 424     #432

424

chapter 10 directed graphs & partial orders

what is the minimum time schedule for dn;t? explain why it is unique. how many
processors does it require?

(c) write a simple formula m.n; t; p/ for the minimum time of a p-processor
schedule to complete dn;t.

(d) show that every partial order with n vertices and maximum chain size t has a
p-processor schedule that runs in time m.n; t; p/.
hint: use induction on t.

problems for section 10.6

practice problems
problem 10.26.
in this dag (figure 10.13) for the divisibility relation on f1; : : : ; 12g, there is
an upward path from a to b iff a j b. if 24 was added as a vertex, what is the
minimum number of edges that must be added to the dag to represent divisibility
on set 1; : : : ; 12; 24? what are those edges?

problem 10.27. (a) prove that every strict partial order is a dag.

. . .. . .t - 1n - (t - 1)   mcs        2017/6/5     19:42     page 425     #433

10.12. references

425

figure 10.13

(b) what is the smallest possible size of a dag that is not transitive? prove it.

(c) prove that the positive walk relation of a dag a strict partial order.

class problems
problem 10.28. (a) what are the maximal and minimal elements, if any, of the
power set pow.f1; : : : ; ng/, where n is a positive integer, under the empty relation?
(b) what are the maximal and minimal elements, if any, of the set n of all non-
negative integers under divisibility? is there a minimum or maximum element?

(c) what are the minimal and maximal elements, if any, of the set of integers
greater than 1 under divisibility?

(d) describe a partially ordered set that has no minimal or maximal elements.

(e) describe a partially ordered set that has a unique minimal element, but no
minimum element. hint: it will have to be in   nite.

problem 10.29.
the proper subset relation (cid:26) de   nes a strict partial order on the subsets of   1::6  ,
that is, on pow.  1::6  /.
(a) what is the size of a maximal chain in this partial order? describe one.

(b) describe a largest antichain in this partial order.

(c) what are the maximal and minimal elements? are they maximum and mini-
mum?
(d) answer the previous part for the (cid:26) partial order on the set pow   1::6   (cid:0) ;.

148510631271192   mcs        2017/6/5     19:42     page 426     #434

426

chapter 10 directed graphs & partial orders

problem 10.30.
if a and b are distinct nodes of a digraph, then a is said to cover b if there is an
edge from a to b and every path from a to b includes this edge. if a covers b, the
edge from a to b is called a covering edge.
(a) what are the covering edges in the dag in figure 10.14?

(b) let covering .d/ be the subgraph of d consisting of only the covering edges.
suppose d is a    nite dag. explain why covering .d/ has the same positive walk
relation as d.
hint: consider longest paths between a pair of vertices.

(c) show that if two dag   s have the same positive walk relation, then they have
the same set of covering edges.

(d) conclude that covering .d/ is the unique dag with the smallest number of
edges among all digraphs with the same positive walk relation as d.

the following examples show that the above results don   t work in general for
digraphs with cycles.
(e) describe two graphs with vertices f1; 2g which have the same set of covering
edges, but not the same positive walk relation (hint: self-loops.)

(f)

(i) the complete digraph without self-loops on vertices 1; 2; 3 has directed
edges in each direction between every two distinct vertices. what are its
covering edges?
h1! 2i ;h2! 3i ;h3! 1i?

(ii) what are the covering edges of the graph with vertices 1; 2; 3 and edges

(iii) what about their positive walk relations?

problems for section 10.6

exam problems
problem 10.31.
prove that for any nonempty set d, there is a unique binary relation on d that is
both asymmetric and symmetric.

   mcs        2017/6/5     19:42     page 427     #435

10.12. references

427

figure 10.14 dag with edges not needed in paths

problem 10.32.
let d be a set of size n > 0. explain why there are exactly 2n binary relations on
d that are both symmetric and antisymmetric.

homework problems
problem 10.33.
prove that if r is a transitive binary relation on a set a then r d r

c.

class problems
problem 10.34.
let r be a binary relation on a set d. each of the following equalities and contain-
ments expresses the fact that r has one of the basic relational properties: re   exive,
irre   exive, symmetric, asymmetric, antisymmetric, transitive. identify which prop-
erty is expressed by each of these formulas and explain your reasoning.
(a) r \ idd d ;
(cid:0)1
(b) r   r
(cid:0)1
(c) r d r
(d) idd   r
(e) r    r   r

124356   mcs        2017/6/5     19:42     page 428     #436

428

chapter 10 directed graphs & partial orders

(f) r \ r
(g) r \ r

(cid:0)1 d ;
(cid:0)1   idd

problems for section 10.7

class problems
problem 10.35.

direct prerequisites
18.01
18.01
18.01
8.01
8.01
6.042
18.02, 18.03, 8.02, 6.01
6.01, 6.042
6.01
6.02

subject
6.042
18.02
18.03
8.02
6.01
6.046
6.02
6.006
6.034
6.004

(a) for the above table of mit subject prerequisites, draw a diagram showing the
subject numbers with a line going down to every subject from each of its (direct)
prerequisites.

(b) give an example of a collection of sets partially ordered by the proper subset
relation (cid:26) that is isomorphic to (   same shape as   ) the prerequisite relation among
mit subjects from part (a).

(c) explain why the empty relation is a strict partial order and describe a collection
of sets partially ordered by the proper subset relation that is isomorphic to the empty
relation on    ve elements   that is, the relation under which none of the    ve elements
is related to anything.

(d) describe a simple collection of sets partially ordered by the proper subset re-
lation that is isomorphic to the    properly contains    relation (cid:27) on powf1; 2; 3; 4g.

   mcs        2017/6/5     19:42     page 429     #437

10.12. references

429

problem 10.36.
this problem asks for a proof of lemma 10.7.2 showing that every weak partial
order can be represented by (is isomorphic to) a collection of sets partially ordered
under set inclusion ( ). namely,
lemma. let (cid:22) be a weak partial order on a set a. for any element a 2 a, let

l.a/ wwd fb 2 a j b (cid:22) ag;
l wwd fl.a/ j a 2 ag:

then the function l w a ! l is an isomorphism from the (cid:22) relation on a, to the
subset relation on l.
(a) prove that the function l w a ! l is a bijection.
(b) complete the proof by showing that

a (cid:22) b

iff l.a/   l.b/

(10.14)

for all a; b 2 a.

homework problems
problem 10.37.
every partial order is isomorphic to a collection of sets under the subset relation
(see section 10.7). in particular, if r is a strict partial order on a set a and a 2 a,
de   ne

l.a/ wwd fag [ fx 2 a j x r ag:

then

a r b

iff l.a/ (cid:26) l.b/

holds for all a; b 2 a.
(a) carefully prove statement (10.16), starting from the de   nitions of strict partial
order and the strict subset relation (cid:26).
(b) prove that if l.a/ d l.b/ then a d b.
(c) give an example showing that the conclusion of part (b) would not hold if the
de   nition of l.a/ in equation (10.15) had omitted the expression    fag[.   

(10.15)

(10.16)

   mcs        2017/6/5     19:42     page 430     #438

430

chapter 10 directed graphs & partial orders

problems for section 10.8

practice problems
problem 10.38.
for each of the binary relations below, state whether it is a strict partial order, a
weak partial order, or neither.
if it is not a partial order, indicate which of the
axioms for partial order it violates.
(a) the superset relation,   on the power set powf1; 2; 3; 4; 5g.
(b) the relation between any two nonnegative integers a, b given by a   b
.mod 8/.

(c) the relation between propositional formulas g, h given by g implies h is
valid.

(d) the relation    beats    on rock, paper and scissor (for those who don   t know the
game    rock, paper, scissors:    rock beats scissors, scissors beats paper and paper
beats rock).

(e) the empty relation on the set of real numbers.

(f) the identity relation on the set of integers.

problem 10.39. (a) verify that the divisibility relation on the set of nonnegative
integers is a weak partial order.

(b) what about the divisibility relation on the set of integers?

problem 10.40.
prove directly from the de   nitions (without appealing to dag properties) that if a
binary relation r on a set a is transitive and irre   exive, then it is asymmetric.

class problems
problem 10.41.
show that the set of nonnegative integers partially ordered under the divides rela-
tion. . .
(a) . . . has a minimum element.

   mcs        2017/6/5     19:42     page 431     #439

10.12. references

431

(b) . . . has a maximum element.

(c) . . . has an in   nite chain.

(d) . . . has an in   nite antichain.

(e) what are the minimal elements of divisibility on the integers greater than 1?
what are the maximal elements?

problem 10.42.
how many binary relations are there on the set f0; 1g?
how many are there that are transitive?, . . . asymmetric?, . . . re   exive?, . . . irre   exive?,

. . . strict partial orders?, . . . weak partial orders?

hint: there are easier ways to    nd these numbers than listing all the relations

and checking which properties each one has.

problem 10.43.
prove that if r is a partial order, then so is r

(cid:0)1.

problem 10.44. (a) indicate which of the following relations below are equiva-
lence relations, (eq), strict partial orders (spo), weak partial orders (wpo). for
the partial orders, also indicate whether it is linear (lin).
if a relation is none of the above, indicate whether it is transitive (tr), symmetric
(sym), or asymmetric (asym).
(i) the relation a d b c 1 between integers a, b,
(ii) the superset relation   on the power set of the integers.
(iii) the empty relation on the set of rationals.
(iv) the divides relation on the nonegative integers n.
(v) the divides relation on all the integers z.
(vi) the divides relation on the positive powers of 4.
(vii) the relatively prime relation on the nonnegative integers.
(viii) the relation    has the same prime factors    on the integers.

   mcs        2017/6/5     19:42     page 432     #440

432

chapter 10 directed graphs & partial orders

(b) a set of functions f; g w d ! r can be partially ordered by the   relation,
where
let l be the set of functions f w r ! r of the form

  f   g   wwd 8d 2 d: f .d /   g.d /:

f .x/ d ax c b

for constants a; b 2 r.
describe an in   nite chain and an in   nite anti-chain in l.

problem 10.45.
in an n-player round-robin tournament, every pair of distinct players compete in a
single game. assume that every game has a winner   there are no ties. the results
of such a tournament can then be represented with a tournament digraph where the
vertices correspond to players and there is an edge hx! yi iff x beat y in their
game.
(a) brie   y explain why a tournament digraph cannot have cycles of length one or
two.

(b) brie   y explain whether the    beats    relation of a tournament graph always/sometimes/never. . .
(cid:15) . . . is asymmetric.
(cid:15) . . . is re   exive.
(cid:15) . . . is irre   exive.
(cid:15) . . . is transitive.
(cid:15) . . . has a unique directed path including all the vertices.
(c) prove that a tournament graph is a partial order iff there are no cycles of length
three.

homework problems
problem 10.46.
let r and s be transitive binary relations on the same set a. which of the following
new relations must also be transitive? for each part, justify your answer with a brief
argument if the new relation is transitive or with a counterexample if it is not.
(cid:0)1
(a) r
(b) r \ s

   mcs        2017/6/5     19:42     page 433     #441

10.12. references

(c) r    r
(d) r    s

433

problem 10.47.
digraph g has the unique path property when, for any    nite nonempty set of ver-
tices of g, there is a unique directed path going through exactly these vertices.
(a) prove that if g is a linear strict partial order, then g has the unique path
property.

(b) prove conversely that if g has the unique path property, then the positive path
relation of g is a linear strict partial order.

exam problems
problem 10.48.
suppose the precedence constraints on a set of 32 unit time tasks was isomorphic
to the powerset, pow.f1; 2; 3; 4; 5g/ under the strict subset relation (cid:26).
for example, the task corresponding to the set f2; 4g must be completed be-
fore the task corresponding to the set f1; 2; 4g because f2; 4g (cid:26) f1; 2; 4g; the task
corresponding to the empty set must be scheduled    rst because ; (cid:26) s for every
nonempty set s   f1; 2; 3; 4; 5g.
(a) what is the minimum parallel time to complete these tasks?

(b) describe a maximum size antichain in this partial order.

(c) brie   y explain why the minimum number of processors required to complete
these tasks in minimum parallel time is equal to the size of the maximum antichain.

problem 10.49.
let r be a weak partial order on a set a. suppose c is a    nite chain.17
(a) prove that c has a maximum element. hint: induction on the size of c .

(b) conclude that there is a unique sequence of all the elements of c that is strictly
increasing.
hint: induction on the size of c , using part (a).
17a set c is a chain when it is nonempty, and all elements c; d 2 c are comparable. elements c
and d are comparable iff   c r d or d r c  .

   mcs        2017/6/5     19:42     page 434     #442

434

chapter 10 directed graphs & partial orders

problems for section 10.9

practice problems
problem 10.50.
verify that if either of r1 or r2 is irre   exive, then so is r1 (cid:2) r2.

class problems
problem 10.51.
let r1, r2 be binary relations on the same set a. a relational property is preserved
under product, if r1 (cid:2) r2 has the property whenever both r1 and r2 have the
property.
(a) verify that each of the following properties are preserved under product.

1. re   exivity,
2. antisymmetry,
3. transitivity.

(b) verify that if r1 and r2 are partial orders and at least one of them is strict,
then r1 (cid:2) r2 is a strict partial order.

problem 10.52.
a partial order on a set a is well founded when every non-empty subset of a has a
minimal element. for example, the less-than relation on a well ordered set of real
numbers (see 2.4) is a linear order that is well founded.
prove that if r and s are well founded partial orders, then so is their product
r (cid:2) s.

homework problems
problem 10.53.
let s be a sequence of n different numbers. a subsequence of s is a sequence that
can be obtained by deleting elements of s.

for example, if s is

.6; 4; 7; 9; 1; 2; 5; 3; 8/;

then 647 and 7253 are both subsequences of s (for readability, we have dropped the
parentheses and commas in sequences, so 647 abbreviates .6; 4; 7/, for example).

   mcs        2017/6/5     19:42     page 435     #443

10.12. references

435

an increasing subsequence of s is a subsequence of whose successive elements
get larger. for example, 1238 is an increasing subsequence of s. decreasing sub-
sequences are de   ned similarly; 641 is a decreasing subsequence of s.
(a) list all the maximum-length increasing subsequences of s, and all the maximum-
length decreasing subsequences.

6 <s 4 <s 7 <s 9 <s 1 <s 2 <s 5 <s 3 <s 8

now let a be the set of numbers in s. (so a is the integers   1::9   for the example
above.) there are two straightforward linear orders for a. the    rst is numerical
order where a is ordered by the < relation. the second is to order the elements by
which comes    rst in s; call this order <s. so for the example above, we would
have
let (cid:30) be the product relation of the linear orders <s and <. that is, (cid:30) is de   ned
by the rule

wwd a < a
so (cid:30) is a partial order on a (section 10.9).
(b) draw a diagram of the partial order (cid:30) on a. what are the maximal and mini-
mal elements?

and a <s a

a (cid:30) a

0

0

0

:

(c) explain the connection between increasing and decreasing subsequences of s,
and chains and anti-chains under (cid:30).
(d) prove that every sequence s of length n has an increasing subsequence of
length greater than

p
n or a decreasing subsequence of length at least

p

n.

problems for section 10.10

practice problems
problem 10.54.
for each of the following relations, decide whether it is re   exive, whether it is
symmetric, whether it is transitive, and whether it is an equivalence relation.
(a) f.a; b/ j a and b are the same ageg
(b) f.a; b/ j a and b have the same parentsg
(c) f.a; b/ j a and b speak a common languageg

   mcs        2017/6/5     19:42     page 436     #444

436

chapter 10 directed graphs & partial orders

problem 10.55.
for each of the binary relations below, state whether it is a strict partial order, a
weak partial order, an equivalence relation, or none of these. if it is a partial order,
state whether it is a linear order. if it is none, indicate which of the axioms for
partial-order and equivalence relations it violates.
(a) the superset relation   on the power set powf1; 2; 3; 4; 5g.
(b) the relation between any two nonnegative integers a and b such that a   b
.mod 8/.

(c) the relation between propositional formulas g and h such that   g implies
h    is valid.

(d) the relation between propositional formulas g and h such that   g iff h    is
valid.

(e) the relation    beats    on rock, paper, and scissors (for those who don   t know
the game rock, paper, scissors, rock beats scissors, scissors beats paper, and
paper beats rock).

(f) the empty relation on the set of real numbers.

(g) the identity relation on the set of integers.
(h) the divisibility relation on the integers z.

class problems
problem 10.56.
prove theorem 10.10.4: the equivalence classes of an equivalence relation form a
partition of the domain.
namely, let r be an equivalence relation on a set a and de   ne the equivalence
class of an element a 2 a to be

  a  r wwd fb 2 a j a r bg:

that is,   a  r d r.a/.
(a) prove that every block is nonempty and every element of a is in some block.
(b) prove that if   a  r \   b  r    ;, then a r b. conclude that the sets   a  r for
a 2 a are a partition of a.
(c) prove that a r b iff   a  r d   b  r.

   mcs        2017/6/5     19:42     page 437     #445

10.12. references

problem 10.57.
for any total function f w a ! b de   ne a relation  f by the rule:

a  f a

0

iff f .a/ d f .a

0

/:

437

(10.17)

(a) sketch a proof that  f is an equivalence relation on a.
(b) prove that every equivalence relation r on a set a is equal to  f for the
function f w a ! pow.a/ de   ned as
f .a/ wwd fa

0 2 a j a r a

0g:

that is, f .a/ d r.a/.

problem 10.58.
let r be a binary relation on a set d. each of the following formulas expresses the
fact that r has a familiar relational property such as re   exivity, asymmetry, tran-
sitivity. predicate formulas have roman numerals i.,ii.,. . . , and relational formulas
(equalities and containments) are labelled with letters (a),(b),. . . .

next to each of the relational formulas, write the roman numerals of all the pred-
icate formulas equivalent to it. it is not necessary to name the property expressed,
but you can get partial credit if you do. for example, part (a) gets the label    i.    it
expresses irre   exivity.

not.d r d /

c r d iff d r c

c r d implies d r c

i. 8d:
ii. 8d: d r d
iii. 8c; d:
iv. 8c; d:
v. 8c; d:
vi. 8c    d:
vii. 8c    d:
viii. 8b; c; d:
ix. 8b; d:
  9c: .b r c and c r d /   implies b r d
x. 8b; d: b r d implies   9c: .b r c and c r d /  

.b r c and c r d / implies b r d

c r d implies not.d r c/

c r d implies not.d r c/

c r d iff not.d r c/

   mcs        2017/6/5     19:42     page 438     #446

438

chapter 10 directed graphs & partial orders

i.

(a) r \ idd d ;
(cid:0)1
(b) r   r
(cid:0)1
(c) r d r
(d) idd   r
(e) r    r   r
(f) r   r    r
(g) r \ r
(h) r   r
(i) r \ idr d r
(cid:0)1 d ;
(j) r \ r

(cid:0)1   idd
(cid:0)1

(cid:0)1 \ idr

homework problems
problem 10.59.
let r1 and r2 be two equivalence relations on a set a. prove or give a counterex-
ample to the claims that the following are also equivalence relations:
(a) r1 \ r2.
(b) r1 [ r2.

problem 10.60.
say that vertices u; v in a digraph g are mutually connected and write

(cid:3) ! v;

u

when there is a path from u to v and also a path from v to u.
(a) prove that

(cid:3) ! is an equivalence relation on v .g/.

(cid:3) ! are called the strongly connected
(b) the blocks of the equivalence relation
components of g. de   ne a relation   on the strongly connected components of
g by the rule

c   d iff there is a path from some vertex in c to some vertex in d:

prove that   is a weak partial order on the strongly connected components.

   mcs        2017/6/5     19:42     page 439     #447

10.12. references

439

exam problems
problem 10.61.
let a be a nonempty set.
(a) describe a single relation on a that is both an equivalence relation and a weak
partial order on a.

(b) prove that the relation of part (a) is the only relation on a with these properties.

   mcs        2017/6/5     19:42     page 440     #448

   mcs        2017/6/5     19:42     page 441     #449

11

communication networks
modeling communication networks is an important application of digraphs in com-
puter science. in this such models, vertices represent computers, processors, and
switches; edges will represent wires,    ber, or other transmission lines through
which data    ows. for some communication networks, like the internet, the cor-
responding graph is enormous and largely chaotic. highly structured networks, by
contrast,    nd application in telephone switching systems and the communication
hardware inside parallel computers. in this chapter, we   ll look at some of the nicest
and most commonly used structured networks.

11.1 routing

the kinds of communication networks we consider aim to transmit packets of data
between computers, processors, telephones, or other devices. the term packet
refers to some roughly    xed-size quantity of data   256 bytes or 4096 bytes or
whatever.

11.1.1 complete binary tree
let   s start with a complete binary tree. figure 11.1 is an example with 4 inputs and
4 outputs.

in this diagram, and many that follow, the squares represent terminals   sources
and destinations for packets of data. the circles represent switches, which direct
packets through the network. a switch receives packets on incoming edges and
relays them forward along the outgoing edges. thus, you can imagine a data
packet hopping through the network from an input terminal, through a sequence
of switches joined by directed edges, to an output terminal.

in a tree there is a unique path between every pair of vertices, so there is only
one way to route a packet of data from an input terminal to an output. for example,
the route of a packet traveling from input 1 to output 3 is shown in bold.

11.1.2 routing problems
communication networks are supposed to get packets from inputs to outputs, with
each packet entering the network at its own input switch and arriving at its own
output switch. we   re going to consider several different communication network

   mcs        2017/6/5     19:42     page 442     #450

442

chapter 11 communication networks

figure 11.1 binary tree net with 4 inputs and outputs

designs, where each network has n inputs and n outputs; for convenience, we   ll
assume n is a power of two.
which input is supposed to go where is speci   ed by a permutation of   0::n (cid:0) 1  .
so a permutation (cid:25) de   nes a routing problem: get a packet that starts at input i to
output (cid:25).i /. a routing that solves a routing problem (cid:25) is a set p of paths from
each input to its speci   ed output. that is, p is a set of paths pi where pi goes
from input i to output (cid:25).i / for i 2   0::n (cid:0) 1  .

11.2 routing measures

11.2.1 network diameter
the delay between the time that a packets arrives at an input and arrives at its
designated output is a critical issue in communication networks. generally, this
delay is proportional to the length of the path a packet follows. assuming it takes
one time unit to travel across a wire, the delay of a packet will be the number of
wires it crosses going from input to output.

packets are usually routed from input to output by the shortest path possible.
with a shortest-path routing, the worst-case delay is the distance between the input
and output that are farthest apart. this is called the diameter of the network. in
other words, the diameter of a network1 is the maximum length of any shortest

1the usual de   nition of diameter for a general graph (simple or directed) is the largest distance
between any two vertices, but in the context of a communication network we   re only interested in the

inoutinininoutoutout00112233   mcs        2017/6/5     19:42     page 443     #451

11.2. routing measures

443

path between an input and an output. for example, in the complete binary tree
above, the distance from input 1 to output 3 is six. no input and output are farther
apart than this, so the diameter of this tree is also six.
more broadly, the diameter of a complete binary tree with n inputs and outputs
is 2 log nc2. this is quite good, because the logarithm function grows very slowly.
we could connect up 210 d 1024 inputs and outputs using a complete binary tree
and the worst input-output delay for any packet would be 2 log.210/ c 2 d 22.
switch size
one way to reduce the diameter of a network is to use larger switches. for example,
in the complete binary tree, most of the switches have three incoming edges and
three outgoing edges, which makes them 3 (cid:2) 3 switches. if we had 4 (cid:2) 4 switches,
then we could construct a complete ternary tree with an even smaller diameter. in
principle, we could even connect up all the inputs and outputs via a single monster
n (cid:2) n switch.
of course this isn   t very productive. using an n (cid:2) n switch would just conceal
the original network design problem inside this abstract switch. eventually, we   ll
have to design the internals of the monster switch using simpler components, and
then we   re right back where we started. so, the challenge in designing a commu-
nication network is    guring out how to get the functionality of an n (cid:2) n switch
using    xed size, elementary devices, like 3 (cid:2) 3 switches.
11.2.2 switch count
another goal in designing a communication network is to use as few switches as
possible. in a complete binary tree, there is one    root    switch at the top, and the
number of switches doubles at successive rows, so the number of switches in an
n -input complete binary tree is 1 c 2 c 4 c 8 c (cid:1)(cid:1)(cid:1) c n . so the total number of
switches is 2n (cid:0) 1 by the formula for geometric sums (problem 5.4). this is nearly
the best possible with 3 (cid:2) 3 switches.
11.2.3 network latency
we   ll sometimes be choosing routings through a network that optimize some quan-
tity besides delay. for example, in the next section we   ll be trying to minimize
packet congestion. when we   re not minimizing delay, shortest routings are not al-
ways the best, and in general, the delay of a packet will depend on how it is routed.
for any routing, the most delayed packet will be the one that follows the longest
path in the routing. the length of the longest path in a routing is called its latency.

distance between inputs and outputs, not between arbitrary pairs of vertices.

   mcs        2017/6/5     19:42     page 444     #452

444

chapter 11 communication networks

figure 11.2 two routings in the binary tree net

the latency of a network depends on what   s being optimized. it is measured by
assuming that optimal routings are always chosen in getting inputs to their speci   ed
outputs. that is, for each routing problem (cid:25), we choose an optimal routing that
solves (cid:25). then network latency is de   ned to be the largest routing latency among
these optimal routings. network latency will equal network diameter if routings
are always chosen to optimize delay, but it may be signi   cantly larger if routings
are chosen to optimize something else.

for the networks we consider below, paths from input to output are uniquely
determined (in the case of the tree) or all paths are the same length, so network
latency will always equal network diameter.

11.2.4 congestion
the complete binary tree has a fatal drawback: the root switch is a bottleneck. at
best, this switch must handle right and vice-versa. passing all these packets through
a single switch could take a long time. at worst, if this switch fails, the network is
broken into two equal-sized pieces.
it   s true that if the routing problem is given by the identity permutation, id.i /wwd
i, then there is an easy routing p that solves the problem: let pi be the path from
input i up through one switch and back down to output i. on the other hand, if the
problem was given by (cid:25).i /wwd .n (cid:0) 1/(cid:0) i, then in any solution q for (cid:25), each path
qi beginning at input i must eventually loop all the way up through the root switch
and then travel back down to output .n (cid:0)1/(cid:0)i. these two situations are illustrated
in figure 11.2. we can distinguish between a    good    set of paths and a    bad    set
based on congestion. the congestion of a routing p is equal to the largest number
of paths in p that pass through a single switch. for example, the congestion of the
routing on the left is 1, since at most 1 path passes through each switch. however,
the congestion of the routing on the right is 4, since 4 paths pass through the root
switch (and the two switches directly below the root). generally, lower congestion
is better since packets can be delayed at an overloaded switch.

inoutinininoutoutout00112233inoutinininoutoutout00112233   mcs        2017/6/5     19:42     page 445     #453

11.3. network designs

445

figure 11.3 two-dimensional array with n d 4.

by extending the notion of congestion to networks, we can also distinguish be-
tween    good    and    bad    networks with respect to bottleneck problems. for each
routing problem (cid:25) for the network, we assume a routing is chosen that optimizes
congestion, that is, that has the minimum congestion among all routings that solve
(cid:25). then the largest congestion that will ever be suffered by a switch will be the
maximum congestion among these optimal routings. this    maximin    congestion
is called the congestion of the network.
so for the complete binary tree, the worst permutation would be (cid:25).i / wwd .n (cid:0)
1/ (cid:0) i. then in every possible solution for (cid:25), every packet would have to follow
a path passing through the root switch. thus, the max congestion of the complete
binary tree is n    which is horrible!

let   s tally the results of our analysis so far:

diameter
complete binary tree 2 log n c 2

network

switch size # switches
2n (cid:0) 1

3 (cid:2) 3

congestion

n

11.3 network designs

2-d array

11.3.1
communication networks can also be designed as2-dimensional arrays or grids. a
2-d array with four inputs and outputs is shown in figure 11.3.

the diameter in this example is 8, which is the number of edges between input 0

in0in1in2in3out3out2out1out0   mcs        2017/6/5     19:42     page 446     #454

446

chapter 11 communication networks

and output 3. more generally, the diameter of an array with n inputs and outputs is
2n , which is much worse than the diameter of 2 log n c 2 in the complete binary
tree. but we get something in exchange: replacing a complete binary tree with an
array almost eliminates congestion.

theorem 11.3.1. the congestion of an n -input array is 2.

proof. first, we show that the congestion is at most 2. let (cid:25) be any permutation.
de   ne a solution p for (cid:25) to be the set of paths, pi, where pi goes to the right from
input i to column (cid:25).i / and then goes down to output (cid:25).i /. thus, the switch in row
i and column j transmits at most two packets: the packet originating at input i and
the packet destined for output j .
next, we show that the congestion is at least 2. this follows because in any
routing problem (cid:25), where (cid:25).0/ d 0 and (cid:25).n (cid:0) 1/ d n (cid:0) 1, two packets must
(cid:4)
pass through the lower left switch.

as with the tree, the network latency when minimizing congestion is the same
as the diameter. that   s because all the paths between a given input and output are
the same length.

now we can record the characteristics of the 2-d array.

diameter
complete binary tree 2 log n c 2

network

2-d array

2n

switch size # switches
2n (cid:0) 1
n 2

3 (cid:2) 3
2 (cid:2) 2

congestion

n
2

the crucial entry here is the number of switches, which is n 2. this is a major
defect of the 2-d array; a network of size n d 1000 would require a million
2 (cid:2) 2 switches! still, for applications where n is small, the simplicity and low
congestion of the array make it an attractive choice.

11.3.2 butter   y
the holy grail of switching networks would combine the best properties of the
complete binary tree (low diameter, few switches) and of the array (low conges-
tion). the butter   y is a widely-used compromise between the two.

a good way to understand butter   y networks is as a recursive data type. the
recursive de   nition works better if we de   ne just the switches and their connec-
tions, omitting the terminals. so we recursively de   ne fn to be the switches and
connections of the butter   y net with n wwd 2n input and output switches.
the base case is f1 with 2 input switches and 2 output switches connected as in

figure 11.4.

   mcs        2017/6/5     19:42     page 447     #455

11.3. network designs

447

figure 11.4 f1, the butter   y net with n d 21.

figure 11.5 butter   y net fnc1 with 2nc1 inputs from two fn   s.

in the constructor step, we construct fnc1 out of two fn nets connected to a
new set of 2nc1 input switches, as shown in as in figure 11.5. that is, the ith
and 2n c ith new input switches are each connected to the same two switches, the
ith input switches of each of two fn components for i d 1; : : : ; 2n. the output
switches of fnc1 are simply the output switches of each of the fn copies.
so fnc1 is laid out in columns of height 2nc1 by adding one more column of
switches to the columns in fn. since the construction starts with two columns
when n d 1, the fnc1 switches are arrayed in nc 1 columns. the total number of
switches is the height of the columns times the number 2nc1.n c 1/ of columns.
remembering that n d log n , we conclude that the butter   y net with n inputs
has n.log n c 1/ switches.

2 outputs2 inputs    nd21      f      2nfn2n1  tt         f2n+1  outputs      2nfnfnewinputs   fn+1   mcs        2017/6/5     19:42     page 448     #456

448

chapter 11 communication networks

since every path in fnc1 from an input switch to an output is length-n c 1 the
diameter of the butter   y net with 2nc1 inputs is this length plus two because of
the two edges connecting to the terminals (square boxes)   one edge from input
terminal to input switch (circle) and one from output switch to output terminal.

there is an easy recursive procedure to route a packet through the butter   y net.
in the base case, there is only one way to route a packet from one of the two inputs
to one of the two outputs. now suppose we want to route a packet from an input
switch to an output switch in fnc1. if the output switch is in the    top    copy of fn,
then the    rst step in the route must be from the input switch to the unique switch
it is connected to in the top copy; the rest of the route is determined by recursively
routing the rest of the way in the top copy of fn. likewise, if the output switch is in
the    bottom    copy of fn, then the    rst step in the route must be to the switch in the
bottom copy, and the rest of the route is determined by recursively routing in the
bottom copy of fn. in fact, this argument shows that the routing is unique: there is
exactly one path in the butter   y net from each input to each output, which implies
p
that the network latency when minimizing congestion is the same as the diameter.
n . more precisely, the con-
n=2 if n is an odd power of 2. a

n if n is an even power of 2 andp

the congestion of the butter   y network is about

gestion is
simple proof of this appears in problem 11.8.

p

let   s add the butter   y data to our comparison table:

network

diameter
complete binary tree 2 log n c 2
log n c 2

2-d array
butter   y

2n

switch size

3 (cid:2) 3
2 (cid:2) 2
2 (cid:2) 2

# switches
2n (cid:0) 1
n 2

n.log.n / c 1/

congestion

n orp

n
2

p

n=2

the butter   y has lower congestion than the complete binary tree. it also uses fewer
switches and has lower diameter than the array. however, the butter   y does not
capture the best qualities of each network, but rather is a compromise somewhere
between the two. our quest for the holy grail of routing networks goes on.

11.3.3 bene  s network
in the 1960   s, a researcher at bell labs named v  aclav e. bene  s had a remarkable
idea. he obtained a marvelous communication network with congestion 1 by plac-
ing two butter   ies back-to-back. this amounts to recursively growing bene  s nets
by adding both inputs and outputs at each stage. now we recursively de   ne bn
to be the switches and connections (without the terminals) of the bene  s net with
n wwd 2n input and output switches.
the base case b1 with 2 input switches and 2 output switches is exactly the same

as f1 in figure 11.4.

   mcs        2017/6/5     19:42     page 449     #457

11.3. network designs

449

figure 11.6 bene  s net bnc1 with 2nc1 inputs from two bn   s.

in the constructor step, we construct bnc1 out of two bn nets connected to a
new set of 2nc1 input switches and also a new set of 2nc1 output switches. this is
illustrated in figure 11.6.
the ith and 2n c ith new input switches are each connected to the same two
switches: the ith input switches of each of two bn components for i d 1; : : : ; 2n,
exactly as in the butter   y net. in addition, the ith and 2nc ith new output switches
are connected to the same two switches, namely, to the ith output switches of each
of two bn components.
now, bnc1 is laid out in columns of height 2nc1 by adding two more columns
of switches to the columns in bn. so, the bnc1 switches are arrayed in 2.n c 1/
columns. the total number of switches is the number of columns times the height
2.n c 1/2nc1 of the columns.
all paths in bnc1 from an input switch to an output are length 2.nc 1/(cid:0) 1, and
the diameter of the bene  s net with 2nc1 inputs is this length plus two because of
the two edges connecting to the terminals.

so bene  s has doubled the number of switches and the diameter, but by doing so
he has completely eliminated congestion problems! the proof of this fact relies on
a clever induction argument that we   ll come to in a moment. let   s    rst see how the

bnbnbnc12n2n2nc1    new inputsnew outputs   mcs        2017/6/5     19:42     page 450     #458

450

chapter 11 communication networks

bene  s network stacks up:

network

diameter
complete binary tree 2 log n c 2
2-d array
log n c 2
butter   y
bene  s 2 log n c 1

2n

switch size

3 (cid:2) 3
2 (cid:2) 2
2 (cid:2) 2
2 (cid:2) 2

# switches
2n (cid:0) 1
n 2

n.log.n / c 1/

2n log n

congestion

n orp

n
2

p

n=2

1

the bene  s network has small size and diameter, and it completely eliminates con-
gestion. the holy grail of routing networks is in hand!

theorem 11.3.2. the congestion of the n -input bene  s network is 1.
proof. by induction on n where n d 2n. so the induction hypothesis is

p .n/ wwd the congestion of bn is 1:

base case (n d 1): b1 d f1 is shown in figure 11.4. the unique routings in f1
have congestion 1.
inductive step: we assume that the congestion of an n d 2n-input bene  s network
is 1 and prove that the congestion of a 2n -input bene  s network is also 1.

digression. time out! let   s work through an example, develop some intuition,
in the bene  s network shown in figure 11.7 with
and then complete the proof.
n d 8 inputs and outputs, the two 4-input/output subnetworks are in dashed boxes.
by the inductive assumption, the subnetworks can each route an arbitrary per-
mutation with congestion 1. so if we can guide packets safely through just the    rst
and last levels, then we can rely on induction for the rest! let   s see how this works
in an example. consider the following permutation routing problem:

(cid:25).0/ d 1
(cid:25).1/ d 5
(cid:25).2/ d 4
(cid:25).3/ d 7

(cid:25).4/ d 3
(cid:25).5/ d 6
(cid:25).6/ d 0
(cid:25).7/ d 2

we can route each packet to its destination through either the upper subnetwork
or the lower subnetwork. however, the choice for one packet may constrain the
choice for another. for example, we cannot route both packet 0 and packet 4
through the same network, since that would cause two packets to collide at a sin-
gle switch, resulting in congestion. rather, one packet must go through the upper
network and the other through the lower network. similarly, packets 1 and 5, 2 and

   mcs        2017/6/5     19:42     page 451     #459

11.3. network designs

451

figure 11.7 bene  s net b3.

6, and 3 and 7 must be routed through different networks. let   s record these con-
straints in a graph. the vertices are the 8 packets. if two packets must pass through
different networks, then there is an edge between them. thus, our constraint graph
looks like this:

notice that at most one edge is incident to each vertex.
the output side of the network imposes some further constraints. for example,
the packet destined for output 0 (which is packet 6) and the packet destined for
output 4 (which is packet 2) cannot both pass through the same network; that would
require both packets to arrive from the same switch. similarly, the packets destined
for outputs 1 and 5, 2 and 6, and 3 and 7 must also pass through different switches.
we can record these additional constraints in our graph with gray edges:

in1out1in0out0in2out2in3out3in4out4in5out5in6out6in7out715042673   mcs        2017/6/5     19:42     page 452     #460

452

chapter 11 communication networks

notice that at most one new edge is incident to each vertex. the two lines drawn
between vertices 2 and 6 re   ect the two different reasons why these packets must
be routed through different networks. however, we intend this to be a simple graph;
the two lines still signify a single edge.

now here   s the key insight: suppose that we could color each vertex either red
or blue so that adjacent vertices are colored differently. then all constraints are
satis   ed if we send the red packets through the upper network and the blue packets
through the lower network. such a 2-coloring of the graph corresponds to a solu-
tion to the routing problem. the only remaining question is whether the constraint
graph is 2-colorable, which is easy to verify:
lemma 11.3.3. prove that if the edges of a graph can be grouped into two sets such
that every vertex has at most 1 edge from each set incident to it, then the graph is
2-colorable.

proof. it is not hard to show that a graph is 2-colorable iff every cycle in it has even
length (see theorem 12.8.3). we   ll take this for granted here.

so all we have to do is show that every cycle has even length. since the two sets

of edges may overlap, let   s call an edge that is in both sets a doubled edge.

there are two cases:
case 1: [the cycle contains a doubled edge.] no other edge can be incident
to either of the endpoints of a doubled edge, since that endpoint would then be
incident to two edges from the same set. so a cycle traversing a doubled edge has
nowhere to go but back and forth along the edge an even number of times.

case 2: [no edge on the cycle is doubled.] since each vertex is incident to
at most one edge from each set, any path with no doubled edges must traverse
successive edges that alternate from one set to the other. in particular, a cycle must
traverse a path of alternating edges that begins and ends with edges from different
(cid:4)
sets. this means the cycle has to be of even length.

for example, here is a 2-coloring of the constraint graph:

15042673   mcs        2017/6/5     19:42     page 453     #461

11.3. network designs

453

the solution to this graph-coloring problem provides a start on the packet routing

problem:

we can complete the routing in the two smaller bene  s networks by induction!
back to the proof. end of digression.
let (cid:25) be an arbitrary permutation of   0::n (cid:0) 1  . let g be the graph whose
vertices are packet numbers 0; 1; : : : ; n (cid:0) 1 and whose edges come from the union
of these two sets:

e1wwdfhu   vi j ju (cid:0) vj d n=2g; and
e2wwdfhu   wi j j(cid:25).u/ (cid:0) (cid:25).w/j d n=2g:

now any vertex u is incident to at most two edges: a unique edge hu   vi 2 e1
and a unique edge hu   wi 2 e2. so according to lemma 11.3.3, there is a 2-
coloring for the vertices of g. now route packets of one color through the upper
subnetwork and packets of the other color through the lower subnetwork. since
for each edge in e1, one vertex goes to the upper subnetwork and the other to the
lower subnetwork, there will not be any con   icts in the    rst level. since for each
edge in e2, one vertex comes from the upper subnetwork and the other from the
lower subnetwork, there will not be any con   icts in the last level. we can complete
(cid:4)
the routing within each subnetwork by the induction hypothesis p .n/.

problems for section 11.2

exam problems
problem 11.1.
consider the following communication network:
(a) what is the max congestion?

(b) give an input/output permutation (cid:25)0 that forces maximum congestion.

(c) give an input/output permutation (cid:25)1 that allows minimum congestion.

blueblueblueblueredredredred15042673   mcs        2017/6/5     19:42     page 454     #462

454

chapter 11 communication networks

(d) what is the latency for the permutation (cid:25)1? (if you could not    nd (cid:25)1, just
choose a permutation and    nd its latency.)

problems for section 11.3

class problems
problem 11.2.
the bene  s network has a max congestion of one   every permutation can be routed
in such a way that a single packet passes through each switch. let   s work through
an example. a diagram of the bene  s network b3 of size n d 8 appears in fig-
ure 11.7. the two subnetworks of size n d 4 are marked. we   ll refer to these as
the upper and lower subnetworks.
(a) now consider the following permutation routing problem:
(cid:25).4/ d 2
(cid:25).5/ d 0
(cid:25).6/ d 7
(cid:25).7/ d 4

(cid:25).0/ d 3
(cid:25).1/ d 1
(cid:25).2/ d 6
(cid:25).3/ d 5

each packet must be routed through either the upper subnetwork or the lower sub-
network. construct a graph with vertices numbered by integers 0 to 7 and draw a
dashed edge between each pair of packets that cannot go through the same subnet-
work because a collision would occur in the second column of switches.

(b) add a solid edge in your graph between each pair of packets that cannot go
through the same subnetwork because a collision would occur in the next-to-last
column of switches.

in2in1in0out0out1out2   mcs        2017/6/5     19:42     page 455     #463

11.3. network designs

455

(c) assign colors red and blue to the vertices of your graph so that vertices that
are adjacent by either a dashed or a solid edge get different colors. why must this
be possible, regardless of the permutation (cid:25)?

(d) suppose that red vertices correspond to packets routed through the upper sub-
network and blue vertices correspond to packets routed through the lower subnet-
work. referring to the bene  s network shown in figure 11.6, indicate the    rst and
last edge traversed by each packet.

(e) all that remains is to route packets through the upper and lower subnetworks.
one way to do this is by applying the procedure described above recursively on
each subnetwork. however, since the remaining problems are small, see if you can
complete all the paths on your own.

problem 11.3.
a multiple binary-tree network has n inputs and n outputs, where n is a power
of 2. each input is connected to the root of a binary tree with n=2 leaves and with
edges pointing away from the root. likewise, each output is connected to the root
of a binary tree with n=2 leaves and with edges pointing toward the root.

two edges point from each leaf of an input tree, and each of these edges points
to a leaf of an output tree. the matching of leaf edges is arranged so that for every
input and output tree, there is an edge from a leaf of the input tree to a leaf of the
output tree, and every output tree leaf has exactly two edges pointing to it.
(a) draw such a multiple binary-tree net for n d 4.
(b) fill in the table, and explain your entries.

# switches

switch size diameter max congestion

problem 11.4.
the n-input 2-d array network was shown to have congestion 2. an n-input 2-
layer array consisting of two n-input 2-d arrays connected as pictured below for
n d 4.
in general, an n-input 2-layer array has two layers of switches, with each layer
connected like an n-input 2-d array. there is also an edge from each switch in the
   rst layer to the corresponding switch in the second layer. the inputs of the 2-layer

   mcs        2017/6/5     19:42     page 456     #464

456

chapter 11 communication networks

array enter the left side of the    rst layer, and the n outputs leave from the bottom
row of either layer.
(a) for any given input-output permutation, there is a way to route packets that
achieves congestion 1. describe how to route the packets in this way.

(b) what is the latency of a routing designed to minimize latency?

(c) explain why the congestion of any minimum latency (cml) routing of packets
through this network is greater than the network   s congestion.

problem 11.5.
a 5-path communication network is shown below. from this, it   s easy to see what
an n-path network would be. fill in the table of properties below, and be prepared
to justify your answers.

network # switches
5-path
n-path

switch size diameter max congestion

problem 11.6.

in0in1in2in3out0out1out2out3   mcs        2017/6/5     19:42     page 457     #465

11.3. network designs

457

figure 11.8 5-path

tired of being a ta, megumi has decided to become famous by coming up with a
new, better communication network design. her network has the following speci   -
cations: every input node will be sent to a butter   y network, a bene  s network and
a 2-d array network. at the end, the outputs of all three networks will converge on
the new output.

in the megumi-net a minimum latency routing does not have minimum conges-
tion. the latency for min-congestion (lmc) of a net is the best bound on latency
achievable using routings that minimize congestion. likewise, the congestion for
min-latency (cml) is the best bound on congestion achievable using routings that
minimize latency.

fill in the following chart for megumi   s new net and explain your answers.

in4in2in0out1out3out4out2out0in1in32-d arraybutterflybene  ......out1out3out2outnin1in3in2inn   mcs        2017/6/5     19:42     page 458     #466

458

chapter 11 communication networks

network

megumi   s net

diameter

# switches

congestion

lmc

cml

homework problems
problem 11.7.
louis reasoner    gures that, wonderful as the bene  s network may be, the butter   y
network has a few advantages, namely: fewer switches, smaller diameter, and an
easy way to route packets through it. so louis designs an n -input/output network
he modestly calls a reasoner-net with the aim of combining the best features of
both the butter   y and bene  s nets:

the ith input switch in a reasoner-net connects to two switches, ai and
bi, and likewise, the j th output switch has two switches, yj and zj ,
connected to it. then the reasoner-net has an n -input bene  s network
connected using the ai switches as input switches and the yj switches
as its output switches. the reasoner-net also has an n -input butter   y
net connected using the bi switches as inputs and   the zj switches as
outputs.

in the reasoner-net a minimum latency routing does not have minimum conges-
tion. the latency for min-congestion (lmc) of a net is the best bound on latency
achievable using routings that minimize congestion. likewise, the congestion for
min-latency (cml) is the best bound on congestion achievable using routings that
minimize latency.

fill in the following chart for the reasoner-net and brie   y explain your answers.

diameter

switch size(s) # switches

congestion lmc cml

problem 11.8.
show that the congestion of the butter   y net, fn, is exactly

p

n when n is even.

hint:
(cid:15) there is a unique path from each input to each output, so the congestion is
the maximum number of messages passing through a vertex for any routing
problem.

   mcs        2017/6/5     19:42     page 459     #467

11.3. network designs

459

(cid:15) if v is a vertex in column i of the butter   y network, there is a path from ex-
actly 2i input vertices to v and a path from v to exactly 2n(cid:0)i output vertices.

(cid:15) at which column of the butter   y network must the congestion be worst?
what is the congestion of the topmost switch in that column of the network?

   mcs        2017/6/5     19:42     page 460     #468

12

   mcs        2017/6/5     19:42     page 461     #469

simple graphs
simple graphs model relationships that are symmetric, meaning that the relationship
is mutual. examples of such mutual relationships are being married, speaking the
same language, not speaking the same language, occurring during overlapping time
intervals, or being connected by a conducting wire. they come up in all sorts of
applications, including scheduling, id124, computer graphics, and
communications, but we   ll start with an application designed to get your attention:
we are going to make a professional inquiry into sexual behavior. speci   cally,
we   ll look at some data about who, on average, has more opposite-gender partners:
men or women.

sexual demographics have been the subject of many studies. in one of the largest,
researchers from the university of chicago interviewed a random sample of 2500
people over several years to try to get an answer to this question. their study,
published in 1994 and entitled the social organization of sexuality, found that
men have on average 74% more opposite-gender partners than women.

other studies have found that the disparity is even larger. in particular, abc
news claimed that the average man has 20 partners over his lifetime, and the av-
erage woman has 6, for a percentage disparity of 233%. the abc news study,
aired on primetime live in 2004, purported to be one of the most scienti   c ever
done, with only a 2.5% margin of error. it was called    american sex survey: a
peek between the sheets      raising some questions about the seriousness of their
reporting.

yet again in august, 2007, the new york times reported on a study by the
national center for health statistics of the u.s. government showing that men had
seven partners while women had four. so, whose numbers do you think are more
accurate: the university of chicago, abc news, or the national center?

don   t answer   this is a trick question designed to trip you up. using a little
id207, we   ll explain why none of these    ndings can be anywhere near the
truth.

12.1 vertex adjacency and degrees

simple graphs are de   ned in almost the same way as digraphs, except that edges are
undirected   they connect two vertices without pointing in either direction between
the vertices. so instead of a directed edge hv! wi which starts at vertex v and

   mcs        2017/6/5     19:42     page 462     #470

462

chapter 12 simple graphs

ends at vertex w, a simple graph only has an undirected edge hv   wi that connects
v and w.

de   nition 12.1.1. a simple graph g consists of a nonempty set, v .g/, called
the vertices of g, and a set e.g/ called the edgesan element of v .g/ is called
a vertex. an element of e.g/ is an undirected edge or simply an    edge.    an
undirected edge has two vertices u    v called its endpoints. such an edge can be
represented by the two element set fu; vg. the notation hu   vi denotes this edge.
both hu   vi and hv   ui describe the same undirected edge, whose endpoints
are u and v.

figure 12.1 an example of a graph with 9 vertices and 8 edges.

for example, let h be the graph pictured in figure 12.1. the vertices of h

correspond to the nine dots in figure 12.1, that is,

v .h / d fa; b; c; d; e; f; g; h; ig :

the edges correspond to the eight lines, that is,
e.h / d fha   bi ;ha   ci ;hb   di ;hc   di ;hc   ei ;he   f i ;he   gi ;hh   iig:
mathematically, that   s all there is to the graph h .

de   nition 12.1.2. two vertices in a simple graph are said to be adjacent iff they
are the endpoints of the same edge, and an edge is said to be incident to each of its
endpoints. the number of edges incident to a vertex v is called the degree of the
vertex and is denoted by deg.v/. equivalently, the degree of a vertex is the number
of vertices adjacent to it.

for example, for the graph h of figure 12.1, vertex a is adjacent to vertex b, and
b is adjacent to d. the edge ha   ci is incident to its endpoints a and c. vertex h
has degree 1, d has degree 2, and deg.e/ d 3. it is possible for a vertex to have
degree 0, in which case it is not adjacent to any other vertices. a simple graph g
does not need to have any edges at all. je.g/j could be zero, implying that the

bghidfcea   mcs        2017/6/5     19:42     page 463     #471

12.2. sexual demographics in america

463

degree of every vertex would also be zero. but a simple graph must have at least
one vertex   jv .g/j is required to be at least one.
note that in a simple graph there cannot be more than one edge between the
same two vertices.1 also self-loops   edges that begin and at the same vertex   are
not allowed in simple graphs.

for the rest of this chapter we   ll use    graphs    as an abbreviation for    simple

graphs.   

a synonym for    vertices    is    nodes,    and we   ll use these words interchangeably.
simple graphs are sometimes called networks, edges are sometimes called arcs or
lines. we mention this as a    heads up    in case you look at other id207
literature; we won   t use these words.

12.2 sexual demographics in america

let   s model the question of heterosexual partners in graph theoretic terms. to do
this, we   ll let g be the graph whose vertices v are all the people in america. then
we split v into two separate subsets: m which contains all the males, and f which
contains all the females.2 we   ll put an edge between a male and a female iff they
have been sexual partners. this graph is pictured in figure 12.2 with males on the
left and females on the right.
actually, this is a pretty hard graph to    gure out, let alone draw. the graph is
enormous: the us population is about 300 million, so jv j (cid:25) 300m . of these,
approximately 50.8% are female and 49.2% are male, so jmj (cid:25) 147:6m , and
jfj (cid:25) 152:4m . and we don   t even have trustworthy estimates of how many edges
there are, let alone exactly which couples are adjacent. but it turns out that we
don   t need to know any of this   we just need to    gure out the relationship between
the average number of partners per male and partners per female. to do this, we
note that every edge has exactly one endpoint at an m vertex (remember, we   re
only considering male-female relationships); so the sum of the degrees of the m
vertices equals the number of edges. for the same reason, the sum of the degrees
of the f vertices equals the number of edges. so these sums are equal:

x

x2m

deg.x/ d x

y2f

deg.y/:

now suppose we divide both sides of this equation by the product of the sizes of

1 multigraphs that have more than one edge with the same two endpoints are sometimes conve-

nient, but they are not needed for the applications we present.

2for simplicity, we   ll ignore the possibility of someone being both a man and a woman, or neither.

   mcs        2017/6/5     19:42     page 464     #472

464

chapter 12 simple graphs

figure 12.2 the sex partners graph.

the two sets, jmj (cid:1) jfj:

 p

x2m deg.x/

jmj

  (cid:1) 1jfj d

 p

y2f deg.y/

jfj

!

(cid:1) 1jmj

the terms above in parentheses are the average degree of an m vertex and the
average degree of an f vertex. so we know:

avg. deg in m d jfj

jmj (cid:1) avg. deg in f

(12.1)

in other words, we   ve proved that the average number of female partners of
males in the population compared to the average number of males per female is
determined solely by the relative number of males and females in the population.
now the census bureau reports that there are slightly more females than males
in america; in particular jfj=jmj is about 1.035. so we know that males have
on average 3.5% more opposite-gender partners than females, and that this tells us
nothing about any sex   s promiscuity or selectivity. rather, it just has to do with the
relative number of males and females. collectively, males and females have the
same number of opposite gender partners, since it takes one of each set for every
partnership, but there are fewer males, so they have a higher ratio. this means that
the university of chicago, abc, and the federal government studies are way off.
after a huge effort, they gave a totally wrong answer.

there   s no de   nite explanation for why such surveys are consistently wrong.
one hypothesis is that males exaggerate their number of partners   or maybe fe-
males downplay theirs   but these explanations are speculative. interestingly, the

fm   mcs        2017/6/5     19:42     page 465     #473

12.3. some common graphs

465

principal author of the national center for health statistics study reported that she
knew the results had to be wrong, but that was the data collected, and her job was
to report it.

the same underlying issue has led to serious misinterpretations of other survey
data. for example, a couple of years ago, the boston globe ran a story on a survey
of the study habits of students on boston area campuses. their survey showed that
on average, minority students tended to study with non-minority students more than
the other way around. they went on at great length to explain why this    remarkable
phenomenon    might be true. but it   s not remarkable at all. using our id207
formulation, we can see that all it says is that there are fewer students in a minority
than students not in that minority, which is, of course, what    minority    means.

12.2.1 handshaking lemma
the previous argument hinged on the connection between a sum of degrees and the
number of edges. there is a simple connection between these in any graph:
lemma 12.2.1. the sum of the degrees of the vertices in a graph equals twice the
number of edges.

proof. every edge contributes two to the sum of the degrees, one for each of its
(cid:4)
endpoints.

we refer to lemma 12.2.1 as the handshaking lemma: if we total up the number
of people each person at a party shakes hands with, the total will be twice the
number of handshakes that occurred.

12.3 some common graphs

some graphs come up so frequently that they have names. a complete graph kn
has n vertices and an edge between every two vertices, for a total of n.n (cid:0) 1/=2
edges. for example, k5 is shown in figure 12.3.

the empty graph has no edges at all. for example, the    ve-vertex empty graph
is shown in figure 12.4.
an n-vertex graph containing n (cid:0) 1 edges in sequence is known as
a line graph ln. more formally, ln has

v .ln/ d fv1; v2; : : : ; vng

and

e.ln/ d fhv1   v2i ;hv2   v3i ; : : : ;hvn(cid:0)1   vnig

   mcs        2017/6/5     19:42     page 466     #474

466

chapter 12 simple graphs

figure 12.3 k5: the complete graph on    ve nodes.

figure 12.4 an empty graph with    ve nodes.

for example, l5 is pictured in figure 12.5.
there is also a one-way in   nite line graph l1 which can be de   ned by letting
the nonnegative integers n be the vertices with edges hk   .k c 1/i for all k 2 n.
if we add the edge hvn   v1i to the line graph ln, we get a graph called a length-
n cycle cn. figure 12.6 shows a picture of length-5 cycle.

12.4 isomorphism

two graphs that look different might actually be the same in a formal sense. for
example, the two graphs in figure 12.7 are both four-vertex,    ve-edge graphs and

figure 12.5 l5: a 5-vertex line graph.

   mcs        2017/6/5     19:42     page 467     #475

12.4. isomorphism

467

figure 12.6 c5: a 5-node cycle graph.

(a)

(b)

figure 12.7 two isomorphic graphs.

you get graph (b) by a 90o clockwise rotation of graph (a).

strictly speaking, these graphs are different mathematical objects, but this dif-
ference doesn   t re   ect the fact that the two graphs can be described by the same
picture   except for the labels on the vertices. this idea of having the same picture
   up to relabeling    can be captured neatly by adapting de   nition 10.7.1 of isomor-
phism of digraphs to handle simple graphs. an isomorphism between two graphs
is an edge-preserving bijection between their sets of vertices:
de   nition 12.4.1. an isomorphism between graphs g and h is a bijection f w
v .g/ ! v .h / such that

hu   vi 2 e.g/ iff hf .u/   f .v/i 2 e.h /

for all u; v 2 v .g/. two graphs are isomorphic when there is an isomorphism
between them.

here is an isomorphism f between the two graphs in figure 12.7:

f .a/ wwd 2
f .c/ wwd 4

f .b/ wwd 3
f .d / wwd 1:

you can check that there is an edge between two vertices in the graph on the left if
and only if there is an edge between the two corresponding vertices in the graph on
the right.

bcad2314   mcs        2017/6/5     19:42     page 468     #476

468

chapter 12 simple graphs

figure 12.8 isomorphic c5 graphs.

shows two different ways of drawing c5.

notice that if f is an isomorphism between g and h , then f

two isomorphic graphs may be drawn very differently. for example, figure 12.8
(cid:0)1 is an isomor-
phism between h and g. isomorphism is also transitive because the composition
of isomorphisms is an isomorphism. in fact, isomorphism is an equivalence rela-
tion.

isomorphism preserves the connection properties of a graph, abstracting out what
the vertices are called, what they are made out of, or where they appear in a drawing
of the graph. more precisely, a property of a graph is said to be preserved under
isomorphism if whenever g has that property, every graph isomorphic to g also
has that property. for example, since an isomorphism is a bijection between sets of
vertices, isomorphic graphs must have the same number of vertices. what   s more,
if f is a graph isomorphism that maps a vertex v of one graph to the vertex f .v/
of an isomorphic graph, then by de   nition of isomorphism, every vertex adjacent
to v in the    rst graph will be mapped by f to a vertex adjacent to f .v/ in the
isomorphic graph. thus, v and f .v/ will have the same degree. if one graph has a
vertex of degree four and another does not, then they can   t be isomorphic. in fact,
they can   t be isomorphic if the number of degree-four vertices in each of the graphs
is not the same.

looking for preserved properties can make it easy to determine that two graphs
are not isomorphic, or to guide the search for an isomorphism when there is one.
it   s generally easy in practice to decide whether two graphs are isomorphic. how-
ever, no one has yet found a procedure for determining whether two graphs are
isomorphic that is guaranteed to run in polynomial time on all pairs of graphs.3

having such a procedure would be useful. for example, it would make it easy
to search for a particular molecule in a database given the molecular bonds. on
the other hand, knowing there is no such ef   cient procedure would also be valu-
able: secure protocols for encryption and remote authentication can be built on the

3a procedure runs in polynomial time when it needs an amount of time of at most p.n/, where n

is the total number of vertices and p./ is a    xed polynomial.

   mcs        2017/6/5     19:42     page 469     #477

12.5. bipartite graphs & matchings

469

hypothesis that graph isomorphism is computationally exhausting.

the de   nitions of bijection and isomorphism apply to in   nite graphs as well as
   nite graphs, as do most of the results in the rest of this chapter. but id207
focuses mostly on    nite graphs, and we will too.

in the rest of this chapter we   ll assume graphs are    nite.

we   ve actually been taking isomorphism for granted ever since we wrote    kn

has n vertices. . .     at the beginning of section 12.3.

id207 is all about properties preserved by isomorphism.

12.5 bipartite graphs & matchings

there were two kinds of vertices in the    sex in america    graph, males and females,
and edges only went between the two kinds. graphs like this come up so frequently
that they have earned a special name: bipartite graphs.

de   nition 12.5.1. a bipartite graph is a graph whose vertices can be partitioned
into two blocks, l.g/ and r.g/, such that every edge has one endpoint in l.g/
and the other endpoint in r.g/.

so every bipartite graph looks something like the graph in figure 12.2.

12.5.1 the bipartite matching problem
the bipartite matching problem is related to the sex-in-america problem that we
just studied; only now, the goal is to get everyone happily married. as you might
imagine, this is not possible for a variety of reasons, not the least of which is the
fact that there are more women in america than men. so, it is simply not possible
to marry every woman to a man so that every man is married at most once.

but what about getting a mate for every man so that every woman is married at
most once? is it possible to do this so that each man is paired with a woman that
he likes? the answer, of course, depends on the bipartite graph that represents who
likes who, but the good news is that it is possible to    nd natural properties of the
who-likes-who graph that completely determine the answer to this question.

in general, suppose that we have a set of men and an equal-sized or larger set of
women, and there is a graph with an edge between a man and a woman if the man
likes the woman. in this scenario, the    likes    relationship need not be symmetric,
since for the time being, we will only worry about    nding a mate for each man

   mcs        2017/6/5     19:42     page 470     #478

470

chapter 12 simple graphs

figure 12.9 a graph where an edge between a man and woman denotes that the
man likes the woman.

that he likes.4 later, we will consider the    likes    relationship from the female
perspective as well. for example, we might obtain the graph in figure 12.9.

a matching is de   ned to be an assignment of a woman to each man so that
different men are assigned to different women, and a man is always assigned a
woman that he likes. for example, one possible matching for the men is shown in
figure 12.10.

12.5.2 the matching condition
a famous result known as hall   s matching theorem gives necessary and suf   cient
conditions for the existence of a matching in a bipartite graph. it turns out to be a
remarkably useful mathematical tool.

we   ll state and prove hall   s theorem using man-likes-woman terminology. de-
   ne the set of women liked by a given set of men to consist of all women liked by
at least one of those men. for example, the set of women liked by tom and john in
figure 12.9 consists of martha, sara and mergatroid. for us to have any chance at
all of matching up the men, the following matching condition must hold:
the matching condition: every subset of men likes at least as large a set of women.
for example, we cannot    nd a matching if some set of 4 men like only 3 women.
hall   s theorem says that this necessary condition is actually suf   cient; if the match-
ing condition holds, then a matching exists.

4it   s convenient to describe the matching problem in terms of men and women, since it let   s us
say things like    a man   s wife    instead of    a left hand node   s matching right hand node.    we don   t
think marriage must be heterosexual, or that men should be given    rst choice of mate.

chucktommichaeljohnalicemarthasarajanemergatroid   mcs        2017/6/5     19:42     page 471     #479

12.5. bipartite graphs & matchings

471

figure 12.10 one possible matching for the men is shown with bold edges. for
example, john is matched with mergatroid.

theorem 12.5.2. a matching for a set m of men with a set w of women can be
found if and only if the matching condition holds.

proof. first, let   s suppose that a matching exists and show that the matching condi-
tion holds. for any subset of men, each man likes at least the woman he is matched
with and a woman is matched with at most one man. therefore, every subset of
men likes at least as large a set of women. thus, the matching condition holds.
next, let   s suppose that the matching condition holds and show that a matching
exists. we use strong induction on jmj, the number of men, on the predicate:

p .m/ wwd if the matching condition holds for a set, m ,
of m men, then there is a matching for m .

base case (jmj d 1): if jmj d 1, then the matching condition implies that the
lone man likes at least one woman, and so a matching exists.
inductive step: suppose that jmj d m c 1 (cid:21) 2. to    nd a matching for m , there
are two cases.

case 1: every nonempty subset of at most m men likes a strictly larger set of
women. in this case, we have some latitude: we pair an arbitrary man with
a woman he likes and send them both away. this leaves m men and one
fewer women, and the matching condition will still hold. so the induction
hypothesis p .m/ implies we can match the remaining m men.

chucktommichaeljohnalicemarthasarajanemergatroid   mcs        2017/6/5     19:42     page 472     #480

472

chapter 12 simple graphs

case 2: some nonempty subset x of at most m men likes an equal-size set y of
women. the matching condition must hold within x, so the strong induction
hypothesis implies we can match the men in x with the women in y . this
leaves the problem of matching the set m (cid:0) x of men to the set w (cid:0) y of
women.
but the problem of matching m (cid:0) x against w (cid:0) y also satis   es the match-
ing condition, because any subset of men in m (cid:0) x who liked fewer women
in w (cid:0) y would imply there was a set of men who liked fewer women in the
whole set w . namely, if a subset m0   m (cid:0) x liked only a strictly smaller
subset of women w0   w (cid:0) y , then the set m0 [ x of men would like only
women in the strictly smaller set w0 [ y . so again the strong induction hy-
pothesis implies we can match the men in m (cid:0) x with the women in w (cid:0) y ,
which completes a matching for m .

so in both cases, there is a matching for the men, which completes the proof of
(cid:4)

the inductive step. the theorem follows by induction.

the proof of theorem 12.5.2 gives an algorithm for    nding a matching in a bi-
partite graph, albeit not a very ef   cient one. however, ef   cient algorithms for    nd-
ing a matching in a bipartite graph do exist. thus, if a problem can be reduced to
   nding a matching, instances of the problem can be solved in a reasonably ef   cient
way.

a formal statement
let   s restate theorem 12.5.2 in mathematical terms so that you   ll not always be
condemned to saying,    now this group of men likes at least as many women. . .    
de   nition 12.5.3. a matching in a graph g is a set of edges m   e.g/ such that
no two edges in m are incident to the same vertex. the vertices incident to an edge
in m are said to be covered by m . a matching is said to be perfect when it covers
v .g/. the set n.s / of neighbors of some set s   v .g/ of vertices is the image
of s under the edge-relation, that is,

n.s / wwd f r j hs   ri 2 e.g/ for some s 2 s g:

s is called a bottleneck if

jsj > j n.s /j:

theorem 12.5.4 (hall   s theorem). let g be a bipartite graph. there is a matching
in g that covers l.g/ iff no subset of l.g/ is a bottleneck.

   mcs        2017/6/5     19:42     page 473     #481

12.5. bipartite graphs & matchings

473

an easy matching condition
the bipartite matching condition requires that every subset of men has a certain
property. in general, verifying that every subset has some property, even if it   s easy
to check any particular subset for the property, quickly becomes overwhelming
because the number of subsets of even relatively small sets is enormous   over a
billion subsets for a set of size 30. however, there is a simple property of vertex
degrees in a bipartite graph that guarantees the existence of a matching. call a
bipartite graph degree-constrained if vertex degrees on the left are at least as large
as those on the right. more precisely,
de   nition 12.5.5. a bipartite graph g is degree-constrained when there is an in-
teger d (cid:21) 1 such that
for every l 2 l.g/ and r 2 r.g/.
for example, the graph in figure 12.9 is degree-constrained with d d 2, since
every vertex on the left is adjacent to at least two vertices on the right while every
vertex on the right is adjacent to at most two vertices on the left.
theorem 12.5.6. if g is a degree-constrained bipartite graph, then there is a
matching that covers l.g/.
proof. suppose g satis   es (12.2), and let s be a subset of l.g/. we will show
that s satis   es hall   s condition, namely,

deg.l/ (cid:21) d (cid:21) deg.r/

(12.2)

(12.3)
let ds be the set of edges with an endpoint in a s. according to (12.2), every

j n.s /j (cid:21) jsj:

vertex in s is the endpoint of at least d edges,
jdsj (cid:21) djsj:

likewise, any edge in ds has an endpoint in n.s / by de   nition. according
to (12.2), every vertex in n.s / is incident to at most d edges, so we also have

dj n.s /j (cid:21) jdsj:

combining the above inequalities gives

dj n.s /j (cid:21) djsj:

now cancelling d completes the derivation of equation (12.3).

(cid:4)

a graph is regular when all its vertice have the same degree. regular graphs
come up in lots of examples. since a nonempty bipartite regular graph is degree-
constrained by de   nition, theorem 12.5.6 guarantees it will have a perfect match-
ing.

   mcs        2017/6/5     19:42     page 474     #482

474

chapter 12 simple graphs

figure 12.11 a scheduling graph for    ve exams. exams connected by an edge
cannot be given at the same time.

12.6 coloring

in section 12.2, we used edges to indicate an af   nity between a pair of nodes.
but there are lots of situations in which edges will correspond to con   icts between
nodes. exam scheduling is a typical example.

12.6.1 an exam scheduling problem
each term, the mit schedules of   ce must assign a time slot for each    nal exam.
this is not easy, because some students are taking several classes with    nals, and
(even at mit) a student can take only one test during a particular time slot. the
schedules of   ce wants to avoid all con   icts. of course, you can make such a
schedule by having every exam in a different slot, but then you would need hun-
dreds of slots for the hundreds of courses, and the exam period would run all year!
so, the schedules of   ce would also like to keep exam period short.

the schedules of   ce   s problem is easy to describe as a graph. there will be a
vertex for each course with a    nal exam, and two vertices will be adjacent exactly
when some student is taking both courses. for example, suppose we need to sched-
ule exams for 6.041, 6.042, 6.002, 6.003 and 6.170. the scheduling graph might
appear as in figure 12.11.

6.002 and 6.042 cannot have an exam at the same time since there are students in
both courses, so there is an edge between their nodes. on the other hand, 6.042 and
6.170 can have an exam at the same time if they   re taught at the same time (which
they sometimes are), since no student can be enrolled in both (that is, no student
should be enrolled in both when they have a timing con   ict).

we next identify each time slot with a color. for example, monday morning

6:0026:1706:0036:0426:041   mcs        2017/6/5     19:42     page 475     #483

12.6. coloring

475

figure 12.12 a 3-coloring of the exam graph from figure 12.11.

is red, monday afternoon is blue, tuesday morning is green, etc. assigning an
exam to a time slot is then equivalent to coloring the corresponding vertex. the
main constraint is that adjacent vertices must get different colors   otherwise, some
student has two exams at the same time. furthermore, in order to keep the exam
period short, we should try to color all the vertices using as few different colors as
possible. as shown in figure 12.12, three colors suf   ce for our example.

the coloring in figure 12.12 corresponds to giving one    nal on monday morning
(red), two monday afternoon (blue), and two tuesday morning (green). can we use
fewer than three colors? no! we can   t use only two colors since there is a triangle
in the graph, and three vertices in a triangle must all have different colors.

this is an example of a graph coloring problem: given a graph g, assign colors
to each node such that adjacent nodes have different colors. a color assignment
with this property is called a valid coloring of the graph   a    coloring,    for short.
a graph g is k-colorable if it has a coloring that uses at most k colors.

de   nition 12.6.1. the minimum number of colors for which a graph g has a valid
coloring is called its chromatic number, (cid:31).g/.
so g is k-colorable iff (cid:31).g/   k.
12.6.2 some coloring bounds
there are some simple properties of graphs that give useful bounds on colorability.

the simplest property is being a cycle: an even-length cycle is 2-colorable. so

(cid:31).ceven/ d 2:

on the other hand, an odd-length cycle requires 3 colors, that is,

(cid:31).codd/ d 3:

(12.4)

redbluegreenbluegreen   mcs        2017/6/5     19:42     page 476     #484

476

chapter 12 simple graphs

you should take a moment to think about why this equality holds.

another simple example is a complete graph kn:

(cid:31).kn/ d n
since no two vertices can have the same color.

being bipartite is another property closely related to colorability. if a graph is
bipartite, then you can color it with 2 colors using one color for the nodes on the
   left    and a second color for the nodes on the    right.    conversely, graphs with
chromatic number 2 are all bipartite with all the vertices of one color on the    left   
and those with the other color on the right. since only graphs with no edges   the
empty graphs   have chromatic number 1, we have:
lemma 12.6.2. a nonempty graph g is bipartite iff (cid:31).g/ d 2.
the chromatic number of a graph can also be shown to be small if the vertex
degrees of the graph are small. in particular, if we have an upper bound on the
degrees of all the vertices in a graph, then we can easily    nd a coloring with only
one more color than the degree bound.
theorem 12.6.3. a graph with maximum degree at most n is .n c 1/-colorable.
now you might be tempted to try to prove this theorem using induction on n,
but this would be a poor choice   we actually don   t know any way to this work,
so we expect it would ruin your week if this was your approach on a problem set.
on the other hand, the number of vertices or the number of edges are typically
good quantities on which to base induction proofs about graphs. we will prove
theorem 12.6.3 by induction on the number of vertices.
proof of theorem 12.6.3. let n 2 n be    xed. the induction hypothesis will be:
p .k/ wwd if a k-vertex graph has maximum degree n, then it is .n c 1/-colorable:
.
base case (k d 1): a 1-vertex graph has maximum degree 0 and is 1-colorable, so
p .1/ is true.
inductive step: now assume that p .k/ is true, and let g be an .k c 1/-vertex
graph with maximum degree at most n. remove a vertex v and all edges incident
to v from g, leaving a k-vertex subgraph h . the maximum degree of h is still at
most n, and so we can    nd an .n c 1/-coloring for h by induction hypothesis.
now add back vertex v. since there are more colors   n c 1   than vertices
adjacent to v   at most deg.v/   n   we can now pick a color for v that is different
from the colors of all these adjacent vertices. this yields a coloring of g with
.n c 1/-colors. so we have shown that g is .n c 1/-colorable, as required.
(cid:4)

   mcs        2017/6/5     19:42     page 477     #485

12.6. coloring

477

figure 12.13 a seven-vertex star graph.

sometimes nc1 colors is the best you can do. for example, every node in knc1
has degree n and (cid:31).knc1/ d n c 1, so this is an example where theorem 12.6.3
gives the best possible bound. theorem 12.6.3 also gives the best possible coloring
bound for any graph with degree bounded by n that has knc1 as a subgraph.
but sometimes n c 1 colors are far from the best that you can do. for example,
the star graph shown in figure 12.13 has maximum degree six but can be colored
using just two colors.

in general it is very hard to    nd a minimal coloring for an arbitrary graph. in
fact, just calculating the chromatic number is hard. we   ll say more about this in the
next section.

12.6.3 why coloring?
one reason coloring problems frequently arise in practice is because scheduling
con   icts are so common. for example, at the internet company akamai, cofounded
by tom leighton, a new version of software is deployed over each of its servers
(200,000 servers in 2016) every few days. it would take more than twenty years to
update all these the servers one at a time, so the deployment must be carried out
for many servers simultaneouly. on the other hand, certain pairs of servers with
common critical functions cannot be updated simultaneouly, since a server needs
to be taken of   ine while being updated.

this problem gets solved by making a 200,000-node con   ict graph and coloring
it with with a dozen or so colors   so only a dozen or so waves of installs are
needed!

another example comes from the need to assign frequencies to radio stations. if
two stations have an overlap in their broadcast area, they can   t be given the same
frequency. frequencies are precious and expensive, so it is important to minimize
the number handed out. this amounts to    nding the minimum coloring for a graph
whose vertices are the stations and whose edges connect stations with overlapping
areas.

   mcs        2017/6/5     19:42     page 478     #486

478

chapter 12 simple graphs

coloring also comes up in allocating registers for program variables. while a
variable is in use, its value needs to be saved in a register. registers can be reused
for different variables, but two variables need different registers if they are refer-
enced during overlapping intervals of program execution. so register allocation is
the coloring problem for a graph whose vertices are the variables: vertices are ad-
jacent if their intervals overlap, and the colors are registers. once again, the goal is
to minimize the number of colors needed to color the graph.

finally, there   s the famous map coloring problem stated in proposition 1.1.4.
how many colors are needed to color a map so that adjacent territories get different
colors? answering the question has no direct practical applications, but it tanta-
lized graph theorists for over a century until an answer was discovered   to great
acclaim   in the 1970   s: four colors are enough to color any map. a reasonably
ef   cient way to    nd an actual 4-coloring can be based on that proof.

surprisingly, the question whether there is an ef   cient procedure to tell if an
arbitrary planar graph really needs four colors   or if three would do the job   
turns out to be the sat problem of section 3.5 in disguise. so you win a million
dollars if you    gure out how hard it is to determine 3-colorability. a proof that
testing 3-colorability of planar graphs is as hard as sat is given in problems 12.30
and 12.31.

12.7 walks in simple graphs

12.7.1 walks, paths, cycles
walks and paths in simple graphs are esentially the same as in digraphs. we just
modify the digraph de   nitions using undirected edges instead of directed ones. for
example, the formal de   nition of a walk in a simple graph is a virtually the same
as the de   nition 10.2.1 of a walk in a digraph:

de   nition 12.7.1. a walk in a simple graph g is an alternating sequence of vertices
and edges that begins with a vertex, ends with a vertex, and such that for every edge
hu   vi in the walk, one of the endpoints u, v is the element just before the edge,
and the other endpoint is the next element after the edge. the length of a walk is
the total number of occurrences of edges in it.

so a walk v is a sequence of the form

v wwd v0 hv0   v1i v1 hv1   v2i v2 : : : hvk(cid:0)1   vki vk

where hvi   vic1i 2 e.g/ for i 2   0::k/. the walk is said to start at v0, to end

   mcs        2017/6/5     19:42     page 479     #487

12.7. walks in simple graphs

479

figure 12.14 a graph with 3 cycles: bhecb, cdec, bcdehb.

at vk, and the length, jvj, of the walk is k. the walk is a path iff all the vi   s are
different, that is, if i    j , then vi    vj .
a walk that begins and ends at the same vertex is a closed walk. a single vertex

counts as a length zero closed walk as well as a length zero path.

a cycle can be represented by a closed walk of length three or more whose

vertices are distinct except for the beginning and end vertices.

note that in contrast to digraphs, we don   t count length two closed walks as
cycles in simple graphs. that   s because a walk going back and forth on the same
edge is neither interesting nor important. there are also no closed walks of length
one, since simple graphs don   t have self-loops.

as in digraphs, the length of a walk is the number of occurrences of edges in the
walk, which is one less than the number of occurrences of vertices. for example,
the graph in figure 12.14 has a length 6 path through the seven successive vertices
abcdefg. this is the longest path in the graph. the graph in figure 12.14 also has
three cycles through successive vertices bhecb, cdec and bcdehb.

12.7.2 cycles as subgraphs
we don   t intend that cycles have a beginning or an end, so any of the paths that go
around a cycle can represent it. for example, in the graph in figure 12.14, the cycle
starting at b and going through vertices bcdehb can also be described as starting
at d and going through dehbcd. furthermore, cycles in simple graphs don   t have
a direction: dcbhed describes the same cycle as though it started and ended at d
but went in the opposite direction.

a precise way to explain which closed walks represent the same cycle is to de   ne

a cycle to be subgraph isomorphic to a cycle graph cn.

abcdefgh   mcs        2017/6/5     19:42     page 480     #488

480

chapter 12 simple graphs

de   nition 12.7.2. a graph g is said to be a subgraph of a graph h if v .g/  
v .h / and e.g/   e.h /.
for example, the one-edge graph g where

v .g/ d fg; h; ig

and e.g/ d fhh   iig

is a subgraph of the graph h in figure 12.1. on the other hand, any graph con-
taining an edge hg   hi will not be a subgraph of h because this edge is not in
e.h /. another example is an empty graph on n nodes, which will be a subgraph
of an ln with the same set of vertices; similarly, ln is a subgraph of cn, and cn
is a subgraph of kn.
de   nition 12.7.3. for n (cid:21) 3, let cn be the graph with vertices   0::n/ and edges

h0   1i ; h1   2i ; : : : ; h.n (cid:0) 2/   n (cid:0) 1i ; hn (cid:0) 1   0i :

a cycle of a graph g is a subgraph of g that is isomorphic to cn for some n (cid:21) 3.
this de   nition formally captures the idea that cycles don   t have direction or be-

ginnings or ends.

12.8 connectivity

de   nition 12.8.1. two vertices are connected in a graph when there is a path that
begins at one and ends at the other. by convention, every vertex is connected to
itself by a path of length zero. a graph is connected when every pair of vertices
are connected.

12.8.1 connected components
being connected is usually a good property for a graph to have. for example, it
could mean that it is possible to get from any node to any other node, or that it is
possible to communicate between any pair of nodes, depending on the application.
but not all graphs are connected. for example, the graph where nodes represent
cities and edges represent highways might be connected for north american cities,
but would surely not be connected if you also included cities in australia. the
same is true for communication networks like the internet   in order to be protected
from viruses that spread on the internet, some government networks are completely
isolated from the internet.

   mcs        2017/6/5     19:42     page 481     #489

12.8. connectivity

481

figure 12.15 one graph with 3 connected components.

another example is shown in figure 12.15, which looks like a picture of three
graphs, but is intended to be a picture of one graph. this graph consists of three
pieces. each piece is a subgraph that by itself is connected, but there are no paths
between vertices in different pieces. these connected pieces of a graph are called
its connected components.
de   nition 12.8.2. a connected component of a graph is a subgraph consisting of
some vertex and every node and edge that is connected to that vertex.

so a graph is connected iff it has exactly one connected component. at the
other extreme, the empty graph on n vertices has n connected components, each
consisting of a single vertex.

12.8.2 odd cycles and 2-colorability
we have already seen that determining the chromatic number of a graph is a chal-
lenging problem. there is one special case where this problem is very easy, namely,
when the graph is 2-colorable.
theorem 12.8.3. the following graph properties are equivalent:

1. the graph contains an odd length cycle.

2. the graph is not 2-colorable.

3. the graph contains an odd length closed walk.

in other words, if a graph has any one of the three properties above, then it has

all of the properties.

we will show the following implications among these properties:

1. implies 2. implies 3. implies 1:

so each of these properties implies the other two, which means they all are equiva-
lent.

   mcs        2017/6/5     19:42     page 482     #490

482

chapter 12 simple graphs

1. implies 2. proof. this follows from equation 12.4.

(cid:4)

2. implies 3. if we prove this implication for connected graphs, then it will hold
for an arbitrary graph because it will hold for each connected component. so
we can assume that g is connected.

proof. pick an arbitrary vertex r of g. since g is connected, for every node
u 2 v .g/, there will be a walk wu starting at u and ending at r. assign
colors to vertices of g as follows:

(

color.u/ d

if jwuj is even;

black;
white; otherwise:

now since g is not colorable, this can   t be a valid coloring. so there must
be an edge between two nodes u and v with the same color. but in that case

is a closed walk starting and ending at u, and its length is

wubreverse.wv/bhv   ui
jwuj c jwvj c 1

which is odd.

(cid:4)

3. implies 1. proof. since there is an odd length closed walk, the wop implies
there is an odd length closed walk w of minimum length. we claim w must
be a cycle. to show this, assume to the contrary that w is not a cycle, so
there is a repeat vertex occurrence besides the start and end. there are then
two cases to consider depending on whether the additional repeat is different
from, or the same as, the start vertex.
in the    rst case, the start vertex has an extra occurrence. that is,

w d fbx r

for some positive length walks f and r that begin and end at x. since

jwj d jfj c jrj

is odd, exactly one of f and r must have odd length, and that one will be an
odd length closed walk shorter than w, a contradiction.
in the second case,

w d fby gby r

   mcs        2017/6/5     19:42     page 483     #491

12.9. special walks and tours

483

figure 12.16

is there a walk that includes every edge exactly once?

where f is a walk from x to y for some y    x, and r is a walk from y to
closed walk shorter than w. so g has even length. that implies that fby r must
x, and jgj > 0. now g cannot have odd length or it would be an odd-length

be an odd-length closed walk shorter than w, again a contradiction.
this completes the proof of theorem 12.8.3.

(cid:4)

12.9 special walks and tours

12.9.1 euler tours
can you walk every hallway in the museum of fine arts exactly once? if we rep-
resent hallways with vertices and connections between hallways with edges, then
this reduces to a question about graphs. for example, could you visit every hallway
exactly once in a museum with    oor plan represented by the graph in figure 12.16?
the entire    eld of id207 began when the famous 17th century mathemati-
cian leonhard euler5 asked whether the seven bridges of k  onigsberg could all be
crossed exactly once   essentially the same question we asked about the museum
of fine arts.

an euler tour6 of a graph is a closed walk that includes every edge exactly once.

graphs with euler tours turn out to be easy to recognize:

5same euler who de   ned the constant e (cid:25) 2:718 and the totient function (cid:30)   he did a lot of stuff.
6in some other texts, euler    tours    are called euler    circuits.   

   mcs        2017/6/5     19:42     page 484     #492

484

chapter 12 simple graphs

theorem 12.9.1. a connected graph has an euler tour if and only if every vertex
has even degree.

the proof is worked out in a series of easy steps in problem 12.43. implicit in
the proof is a simple way to    nd euler tours when they exist, namely, grow a tour
by repeatedly splicing in closed walks until all the edges are included.

similarly, there is a walk that includes every edge exactly once but is not a tour   
it begins and ends at different verticies   if and only if there are exactly two vertices
of odd degree. the graph shown in figure 12.16 has exactly two vertices with odd
degree, so it has a such a walk but not an euler tour.

12.9.2 hamiltonian cycles
hamiltonian cycles are the unruly cousins of euler tours.

de   nition 12.9.2. a hamiltonian cycle in a graph g is a cycle that visits every
vertex in g exactly once. similarly, a hamiltonian path is a path in g that visits
every vertex exactly once.

although hamiltonian cycles sound similar to euler tours   one visits every node
once while the other visits every edge once      nding a hamiltonian cycle or a
hamiltonian path can be a lot harder than    nding an euler tour or path. no one
has yet discovered a simple characterization for when a graph has a hamiltonian
cycle. in fact, determining whether a graph has a hamiltonian cycle is the same cat-
egory of problem as the sat problem of section 3.5: you get a million dollars from
the clay institute for    nding an ef   cient way to determine whether a graph has a
hamiltonian cycle   or for proving that there is no procedure that works ef   ciently
on all graphs.

12.9.3 the traveling salesperson problem
in many applications, there are numerical costs or weights associated with the edges
of the graph. for example, suppose the nodes of a graph represent buildings and
edges represent connections between them. the cost of a connection may vary a
lot from one pair of buildings or towns to another. another example is where the
nodes represent cities, and the weight of an edge is the distance between them: the
weight of the los angeles/new york city edge is much higher than the weight of
the nyc/boston edge.

as if the problem of    nding a hamiltonian cycle is not hard enough, in a weighted
graph, we sometimes need to    nd a hamiltonian cycle with minimum possible sum
of the weights of its edges. this is the famous traveling salesperson problem.

   mcs        2017/6/5     19:42     page 485     #493

12.10. k-connected graphs

485

figure 12.17

is there a hamiltonian cycle with weight 15?

for example, suppose you would like to visit every node in the graph shown in
figure 12.17 exactly once,    nishing at the node where you started. can you    nd a
weight 15 cycle that does this?

12.10 k-connected graphs

if we think of a graph as modeling cables in a telephone network, or oil pipelines,
or electrical power lines, then we not only want connectivity, but we want connec-
tivity that survives component failure. one measure of connection strength is how
many links must fail before connectedness fails. in particular, two vertices are k-
edge connected when it takes at least k    edge-failures    to disconnect them. more
precisely:

de   nition 12.10.1. two vertices in a graph are k-edge connected when they re-
main connected in every subgraph obtained by deleting up to k (cid:0) 1 edges. a graph
with two or more vertices is k-edge connected when every pair of distinct vertices
in the graph are k-edge connected.

from now on we   ll drop the    edge    modi   er and just say    k-connected.   7
for example, in the graph in    gure 12.14, vertices c and e are 3-connected, b
and e are 2-connected, g and e are 1 connected, and no vertices are 4-connected.

7there is a corresponding de   nition of k-vertex connectedness based on deleting vertices rather
than edges. id207 texts usually use    k-connected    as shorthand for    k-vertex connected.    but
edge-connectedness will be enough for us.

v3v4v5v2v6v15231243346   mcs        2017/6/5     19:42     page 486     #494

486

chapter 12 simple graphs

the graph as a whole is only 1-connected. a complete graph kn is .n (cid:0) 1/-
connected. every cycle is 2-connected.

notice that two vertices are 1-connected iff they are connected according to def-

inition 12.8.1.

the idea of a cut edge is a useful way to explain 2-connectivity.

de   nition 12.10.2. if two vertices are connected in a graph g, but not connected
when an edge e is removed, then e is called a cut edge of g.

so a graph with more than one vertex is 2-connected iff it is connected and
has no cut edges. the following lemma is another immediate consequence of the
de   nition:

lemma 12.10.3. an edge is a cut edge iff it is not on a cycle.

more generally, if two vertices are connected by k edge-disjoint paths   that is,
no edge occurs in two paths   then they must be k-connected, since at least one
edge will have to be removed from each of the paths before they could disconnect.
a fundamental fact, whose ingenious proof we omit, is menger   s theorem which
con   rms that the converse is also true: if two vertices are k-connected, then there
are k edge-disjoint paths connecting them. it takes some ingenuity to prove this
just for the case k d 2.
12.10.1 the minimum number of edges in a connected graph
the following theorem says that a graph with few edges must have many connected
components.
theorem 12.10.4. every graph g has at least jv .g/j (cid:0) je.g/j connected com-
ponents.

of course for theorem 12.10.4 to be of any use, there must be fewer edges than

vertices.

proof. we use induction on the number k of edges. let p .k/ be the proposition
that

every graph g with k edges has at least jv .g/j(cid:0) k connected compo-
nents.

base case (k d 0): in a graph with 0 edges, each vertex is itself a connected
component, and so there are exactly jv .g/j d jv .g/j (cid:0) 0 connected components.
so p .0/ holds.

   mcs        2017/6/5     19:42     page 487     #495

12.11. forests & trees

487

inductive step:
let ge be the graph that results from removing an edge, e 2 e.g/. so ge
has k edges, and by the induction hypothesis p .k/, we may assume that ge has
at least .jv .g/j (cid:0) k/ connected components. now add back the edge e to obtain
the original graph g. if the endpoints of e were in the same connected component
of ge, then g has the same sets of connected vertices as ge, so g has at least
.jv .g/j (cid:0) k/ > .jv .g/j (cid:0) .k c 1// components. alternatively, if the endpoints
of e were in different connected components of ge, then these two components are
merged into one component in g, while all other components remain unchanged,
so that g has one fewer connected component than ge. that is, g has at least
.jv .g/j (cid:0) k/ (cid:0) 1 d .jv .g/j (cid:0) .k c 1// connected components. so in either case,
g has at least jv .g/j (cid:0) .k c 1/ components, as claimed.
this completes the inductive step and hence the entire proof by induction. (cid:4)
corollary 12.10.5. every connected graph with n vertices has at least n(cid:0) 1 edges.
a couple of points about the proof of theorem 12.10.4 are worth noticing. first,
we used induction on the number of edges in the graph. this is very common in
proofs involving graphs, as is induction on the number of vertices. when you   re
presented with a graph problem, these two approaches should be among the    rst
you consider.
the second point is more subtle. notice that in the inductive step, we took an
arbitrary .kc1/-edge graph, threw out an edge so that we could apply the induction
assumption, and then put the edge back. you   ll see this shrink-down, grow-back
process very often in the inductive steps of proofs related to graphs. this might
seem like needless effort: why not start with an k-edge graph and add one more to
get an .k c 1/-edge graph? that would work    ne in this case, but opens the door
to a nasty logical error called buildup error, illustrated in problem 12.40.

12.11 forests & trees

we   ve already made good use of acyclic digraphs, but acyclic simple graphs are
arguably the most important graphs in computer science.

de   nition 12.11.1. an acyclic graph is called a forest. a connected acyclic graph
is called a tree.

the graph shown in figure 12.18 is a forest. each of its connected components

is by de   nition a tree.

   mcs        2017/6/5     19:42     page 488     #496

488

chapter 12 simple graphs

figure 12.18 a 6-node forest consisting of 2 component trees.

figure 12.19 a 9-node tree with 5 leaves.

12.11.1 leaves, parents & children
one of the    rst things you will notice about trees is that they tend to have a lot of
nodes with degree one.

de   nition 12.11.2. a degree 1 node in a forest is called a leaf.

the forest in figure 12.18 has 4 leaves. the tree in figure 12.19 has 5 leaves.

12.11.2 tree properties
trees have many unique properties. we have listed some of them in the following
theorem.

theorem 12.11.3. every tree has the following properties:

1. every connected subgraph is a tree.

2. there is a unique path between every pair of vertices.

3. adding an edge between any two nonadjacent nodes in a tree creates a graph

with a cycle.

4. removing any edge disconnects the graph. that is, every edge is a cut edge.

5. if the tree has at least two vertices, then it has at least two leaves.

6. the number of vertices in a tree is one larger than the number of edges.

abdcehifg   mcs        2017/6/5     19:42     page 489     #497

12.11. forests & trees

489

proof.

1. a cycle in a subgraph is also a cycle in the whole graph, so any sub-
graph of an acyclic graph must also be acyclic. if the subgraph is also con-
nected, then by de   nition, it is a tree.

2. since a tree is connected, there is at least one path between every pair of ver-
tices. suppose for the purposes of contradiction, that there are two different
paths between some pair of vertices. then there are two distinct paths p    q
between the same two vertices with minimum total length jpj c jqj. if these
paths shared a vertex w other than at the start and end of the paths, then the
parts of p and q from start to w, or the parts of p and q from w to the end,
must be distinct paths between the same vertices with total length less than
no vertices in common besides their endpoints, and so pbreverse.q/ is a
jpj c jqj, contradicting the minimality of this sum. therefore, p and q have

cycle.

3. an additional edge hu   vi together with the unique path between u and v

forms a cycle.

4. suppose that we remove edge hu   vi. since the tree contained a unique path
between u and v, that path must have been hu   vi. therefore, when that
edge is removed, no path remains, and so the graph is not connected.

5. since the tree has at least two vertices, the longest path in the tree will have
different endpoints u and v. we claim u is a leaf. this follows because, by
de   nition of endpoint, u is incident to at most one edge on the path. also, if u
was incident to an edge not on the path, then the path could be lengthened by
adding that edge, contradicting the fact that the path was as long as possible.
it follows that u is incident only to a single edge, that is u is a leaf. the same
hold for v.

6. we use induction on the proposition

p .n/ wwd there are n (cid:0) 1 edges in any n-vertex tree:

base case (n d 1): p .1/ is true since a tree with 1 node has 0 edges and
1 (cid:0) 1 d 0.
inductive step: now suppose that p .n/ is true and consider an .nc1/-vertex
tree t . let v be a leaf of the tree. you can verify that deleting a vertex of
degree 1 (and its incident edge) from any connected graph leaves a connected
subgraph. so by theorem 12.11.3.1, deleting v and its incident edge gives

   mcs        2017/6/5     19:42     page 490     #498

490

chapter 12 simple graphs

figure 12.20 a graph where the edges of a spanning tree have been thickened.

a smaller tree, and this smaller tree has n (cid:0) 1 edges by induction. if we re-
attach the vertex v and its incident edge, we    nd that t has n d .n c 1/ (cid:0) 1
edges. hence, p .n c 1/ is true, and the induction proof is complete.
(cid:4)

various subsets of properties in theorem 12.11.3 provide alternative characteri-

zations of trees. for example,
lemma 12.11.4. a graph g is a tree iff g is a forest and jv .g/j d je.g/j c 1.
the proof is an easy consequence of theorem 12.11.3.6, see problem 12.48.

12.11.3 spanning trees
trees are everywhere. in fact, every connected graph contains a subgraph that is a
tree with the same vertices as the graph. this is called a spanning tree for the graph.
for example, figure 12.20 is a connected graph with a spanning tree highlighted.

de   nition 12.11.5. a spanning subgraph of a graph g is a subgraph whose ver-
tices are the same as the vertices of g.

theorem 12.11.6. every connected graph contains a spanning tree.

proof. suppose g is a connected graph, so the graph g itself is a connected, span-
ning subgraph. so by wop, g must have a minimum-edge connected, spanning
subgraph t .

we claim t is a spanning tree. since t is a connected, spanning subgraph by
de   nition, all we have to show is that t is acyclic. but suppose to the contrary that
t contained a cycle c . by lemma 12.10.3, an edge e of c will not be a cut edge,
so removing it would leave a connected, spanning subgraph that was smaller than
(cid:4)
t , contradicting the minimality to t .

   mcs        2017/6/5     19:42     page 491     #499

12.11. forests & trees

491

(a)

(b)

figure 12.21 a spanning tree (a) with weight 19 for a graph (b).

figure 12.22 an mst with weight 17 for the graph in figure 12.21(b).

12.11.4 minimum-weight spanning trees
spanning trees are particularly interesting and important for weighted graphs   
graphs whose edges are assigned numerical weights. the overall weight of a
weighted graph is the sum of the weights of all its edges. for example, the weight
of the spanning tree shown in figure 12.21(a) is 19.

the general goal is to    nd a spanning tree with minimum weight, called a

minimum-weight spanning tree (mst).

the spanning tree shown in figure 12.21(a) turns out not to be an mst of the
graph in figure 12.21(b): figure 12.22 shows another spanning tree for this graph
with weight 17. this weight 17 turns out to be an mst, but how do we prove it? in
general, how do we    nd an mst for a connected graph g? we could try enumer-
ating all subtrees of g, but that approach would be hopeless for large graphs.

for the rest of this section, suppose g is a connected weighted graph. we   ll now

explain a simple, general way to    nd an mst of g.

2337121233712114132371211   mcs        2017/6/5     19:42     page 492     #500

492

chapter 12 simple graphs

de   nition 12.11.7. a black-white coloring of a simple graph g is a partition of
the vertices v .g/ into two blocks   the    black    vertices and the    white    vertices.
a gray edge of the coloring is an edge of g with different colored endpoints.

lemma 12.11.8. if g is a connected graph, then every black-white coloring of g
contains a gray edge.

proof. any coloring of g must have at least one vertex of each color   this follows
because the blocks of a partition are by de   nition nonempty.

since g is connected, there will be a path that begins at a black vertex and ends
at a white vertex. therefore at some point on the path there has to be an edge that
(cid:4)
starts with a black vertex and ends with a white one. this is the gray edge.

the weighted graphs examples up to now each had two or more edges with the
same weight. this is common. but our story becomes simpler if all weights are
different.

for the rest of this section, assume there are no same-weight edges:
different edges have different weights.

there is really no loss of generality in assuming different weights, since every-
thing we do below assuming distinct weights would work if we assigned an arbi-
trary rank to same-weight edges and treated higher rank vertices as having larger
weight.

the following lemma now makes it easy to    nd mst   s.

lemma 12.11.9 (gray edge lemma). for any black-white coloring of a connected
graph g, the minimum-weight edge among the gray edges of the coloring must be
an edge of every mst of g.

so to    nd an mst for g, we just need to    nd enough minimum-weight gray

edges to form a spnning tree. we do this using:

minimum-weight gray edge procedure

start off with the disconnected spanning forest consisting of the ver-
tices of g with all edges removed. next, suppose s is a spanning forest
built up at some point by the procedure. if s is not yet connected, then
pick a black-white coloring of g such that such that all the vertices in
the same connected component of s have the same color. update s
by adding the minimum weight gray edge of this coloring to the edges
of s. continue until s becomes connected.

   mcs        2017/6/5     19:42     page 493     #501

12.11. forests & trees

493

theorem 12.11.10. the minimum-weight gray edge procedure will terminate
with an mst.

proof. to see why this procedure works, suppose g has n vertices and let s be
the current spanning forest at any point in the procedure. if s is not connected, a
black-white coloring is chosen so that the endpoints of any edge of s are the same
color. this ensures that no gray edge is an edge of s.

by lemma 12.11.8, there must be at least one gray edge in the coloring, so
there will be a minimum-weight gray edge.8 updating s by adding this gray edge
decreases the number of connected components of s by one, so after adding n (cid:0) 1
gray edges, the procedure will terminate with a connected spanning forest, that is,
a spanning tree t .

by the gray edge lemma 12.11.9, every edge of t has to be in every mst of
g. this is only possible if all mst   s have the same edges as t , that is, they all
(cid:4)
equal t . so t is the unique possible mst of g.

corollary 12.11.11. every connected graph with no same-weight edges has a
unique mst.

here are three known algorithms that are special cases of the minimum weight

gray edge procedure;

algorithm 1. [prim] grow s one edge at a time by adding a minimum weight
edge among the edges that have exactly one endpoint in s.

this is the algorithm that comes from coloring the growing tree white and all the
vertices not in the tree black. then the gray edges are the ones with exactly one
endpoint in the tree.

algorithm 2. [kruskal] grow s one edge at a time by adding a minimum weight
edge among the edges that do not create a cycle in s.

an edge does not create a cycle in s iff it connects different components of s.
so the edge chosen by kruskal   s algorithm will be the minimum weight gray edge
when the components it connects are assigned different colors.

the coloring that explains algorithm 1 also justi   es a more    exible algorithm

which has algorithm 1 as a special case:

algorithm 3. grow a forest one edge at a time by picking any component and
adding a minimum weight edge among the edges leaving that component.

8. . . by the well ordering principle for    nite sets lemma2.4.5.

   mcs        2017/6/5     19:42     page 494     #502

494

chapter 12 simple graphs

this algorithm allows components that are not too close to grow in parallel and
independently, which is great for    distributed    computation where separate proces-
sors share the work with limited communication between processors.9

ok, to wrap up this story, all that   s left is the proof of lemma 12.11.9 that min-
weight gray edges must be in every spanning tree. let   s start with another lemma:

lemma 12.11.12. [gray edge swap] let g be a connected weighted graph, and
let e be the minimum-weight gray edge of some black-white coloring of of g. sup-
pose c is a connected spanning subgraph of g, and e is not an edge of c . then
there is an edge g of c such that

(cid:15) weight.e/ < weight.g/,
(cid:15) c (cid:0) g c e is connected, where c (cid:0) g c e is the graph obtained by removing
g and adding e to the set of edges of c .

notice that the gray edge lemma 12.11.9 now follows immediately from the
swap lemma 12.11.12: if c is a spanning tree of g, then c (cid:0) g c e will also be a
spanning tree, and it has smaller weight. so c cannot be minimum-weight unless
e is one of its edges.

proof. (swap lemma 12.11.12) pick a black-white coloring for which e is a min-
weight gray edge. since c is a connected spanning graph, there is a path p in c
between the different colored endpoints of e. now p has both a black endpoint
and a white one, so it must contain some gray edge g    e. since e is a minimum
weight gray edge and there are no same-weight edges, we have

weight.e/ < weight.g/:

next, notice that p c e is a cycle. so when g is removed from the cycle, the
endpoints of g remain connected by the rest of the cycle. this means c c e (cid:0) g is
(cid:4)
still a connected, spanning subgraph, as required.

12.12 references

[9], [15], [24], [27], [29]

9the idea of growing trees in parallel seems    rst to have been developed in by bor  uvka (1926), ref
tba. ef   cient mst algorithms running in parallel time o.logjv j/ are described in karger, klein,
and tarjan (1995), ref tba.

   mcs        2017/6/5     19:42     page 495     #503

12.12. references

495

problems for section 12.2

practice problems
problem 12.1.
the average degree of the vertices in an n-vertex graph is twice the average number
of edges per vertex. explain why.

problem 12.2.
among connected simple graphs whose sum of vertex degrees is 20:
(a) what is the largest possible number of vertices?

(b) what is the smallest possible number of vertices?

class problems
problem 12.3. (a) prove that in every simple graph, there are an even number of
vertices of odd degree.

(b) conclude that at a party where some people shake hands, the number of people
who shake hands an odd number of times is an even number.

(c) call a sequence of people at the party a handshake sequence if each person in
the sequence has shaken hands with the next person, if any, in the sequence.
suppose george was at the party and has shaken hands with an odd number of
people. explain why, starting with george, there must be a handshake sequence
ending with a different person who has shaken an odd number of hands.

exam problems
problem 12.4.
a researcher analyzing data on heterosexual sexual behavior in a group of m males
and f females found that within the group, the male average number of female
partners was 10% larger that the female average number of male partners.
(a) comment on the following claim.    since we   re assuming that each encounter
involves one man and one woman, the average numbers should be the same, so the
males must be exaggerating.   
(b) for what constant c is m d c (cid:1) f ?

   mcs        2017/6/5     19:42     page 496     #504

496

chapter 12 simple graphs

(c) the data shows that approximately 20% of the females were virgins, while
only 5% of the males were. the researcher wonders how excluding virgins from
the population would change the averages. if he knew id207, the researcher
would realize that the nonvirgin male average number of partners will be x.f =m/
times the nonvirgin female average number of partners. what is x?

(d) for purposes of further research, it would be helpful to pair each female in the
group with a unique male in the group. explain why this is not possible.

problems for section 12.4

practice problems
problem 12.5.
which of the items below are simple-graph properties preserved under isomor-
phism?
(a) there is a cycle that includes all the vertices.

(b) the vertices are numbered 1 through 7.

(c) the vertices can be numbered 1 through 7.

(d) there are two degree 8 vertices.

(e) two edges are of equal length.

(f) no matter which edge is removed, there is a path between any two vertices.

(g) there are two cycles that do not share any vertices.

(h) the vertices are sets.

(i) the graph can be drawn in a way that all the edges have the same length.

(j) no two edges cross.

(k) the or of two properties that are preserved under isomorphism.

(l) the negation of a property that is preserved under isomorphism.

   mcs        2017/6/5     19:42     page 497     #505

12.12. references

497

class problems
problem 12.6.
for each of the following pairs of simple graphs, either de   ne an isomorphism
between them, or prove that there is none. (we write ab as shorthand for ha   bi.)
(a)

g1 with v1 d f1; 2; 3; 4; 5; 6g; e1 d f12; 23; 34; 14; 15; 35; 45g
g2 with v2 d f1; 2; 3; 4; 5; 6g; e2 d f12; 23; 34; 45; 51; 24; 25g

(b)

g3 with v3 d f1; 2; 3; 4; 5; 6g; e3 d f12; 23; 34; 14; 45; 56; 26g
g4 with v4 d fa; b; c; d; e; f g; e4 d fab; bc; cd; de; ae; ef; cf g

problem 12.7.
list all the isomorphisms between the two graphs given in figure 12.23. explain
why there are no others.

figure 12.23 graphs with several isomorphisms

homework problems
problem 12.8.
determine which among the four graphs pictured in figure 12.24 are isomorphic.
for each pair of isomorphic graphs, describe an isomorphism between them. for
each pair of graphs that are not isomorphic, give a property that is preserved under
isomorphism such that one graph has the property, but the other does not. for
at least one of the properties you choose, prove that it is indeed preserved under
isomorphism (you only need prove one of them).

126345abfcde   mcs        2017/6/5     19:42     page 498     #506

498

chapter 12 simple graphs

(a) g1

(b) g2

(c) g3

(d) g4

figure 12.24 which graphs are isomorphic?

12345678910123456897101234568971012345689710   mcs        2017/6/5     19:42     page 499     #507

12.12. references

499

problem 12.9. (a) for any vertex v in a graph, let n.v/ be the set of neighbors of
v, namely, the vertices adjacent to v:

n.v/ wwd fu j hu   vi is an edge of the graphg:

suppose f is an isomorphism from graph g to graph h . prove that f .n.v// d
n.f .v//.
your proof should follow by simple reasoning using the de   nitions of isomorphism
and neighbors   no pictures or handwaving.
hint: prove by a chain of iff   s that

h 2 n.f .v//

iff h 2 f .n.v//

for every h 2 vh . use the fact that h d f .u/ for some u 2 vg.
(b) conclude that if g and h are isomorphic graphs, then for each k 2 n, they
have the same number of degree k vertices.

problem 12.10.
let   s say that a graph has    two ends    if it has exactly two vertices of degree 1 and
all its other vertices have degree 2. for example, here is one such graph:

(a) a line graph is a graph whose vertices can be listed in a sequence with edges
between consecutive vertices only. so the two-ended graph above is also a line
graph of length 4.
prove that the following theorem is false by drawing a counterexample.
false theorem. every two-ended graph is a line graph.

(b) point out the    rst erroneous statement in the following bogus proof of the false
theorem and describe the error.

bogus proof. we use induction. the induction hypothesis is that every two-ended
graph with n edges is a line graph.
base case (n d 1): the only two-ended graph with a single edge consists of two
vertices joined by an edge:

   mcs        2017/6/5     19:42     page 500     #508

500

chapter 12 simple graphs

sure enough, this is a line graph.
inductive case: we assume that the induction hypothesis holds for some n (cid:21) 1
and prove that it holds for n c 1. let gn be any two-ended graph with n edges.
by the induction assumption, gn is a line graph. now suppose that we create a
two-ended graph gnc1 by adding one more edge to gn. this can be done in only
one way: the new edge must join one of the two endpoints of gn to a new vertex;
otherwise, gnc1 would not be two-ended.

clearly, gnc1 is also a line graph. therefore, the induction hypothesis holds for
all graphs with n c 1 edges, which completes the proof by induction.

(cid:4)

problems for section 12.5

practice problems
problem 12.11.
let b be a bipartite graph with vertex sets l.b/; r.b/. explain why the sum of
the degrees of the vertices in l.b/ equals the sum of the degrees of the vertices in
r.b/.

class problems
problem 12.12.
a certain institute of technology has a lot of student clubs; these are loosely over-
seen by the student association. each eligible club would like to delegate one of its
members to appeal to the dean for funding, but the dean will not allow a student to
be the delegate of more than one club. fortunately, the association vp took math
for computer science and recognizes a matching problem when she sees one.

gnnew edge      mcs        2017/6/5     19:42     page 501     #509

12.12. references

501

(a) explain how to model the delegate selection problem as a bipartite matching
problem. (this is a modeling problem; we aren   t looking for a description of an
algorithm to solve the problem.)

(b) the vp   s records show that no student is a member of more than 9 clubs. the
vp also knows that to be eligible for support from the dean   s of   ce, a club must
have at least 13 members. that   s enough for her to guarantee there is a proper
delegate selection. explain. (if only the vp had taken an algorithms class, she
could even have found a delegate selection without much effort.)

problem 12.13.
a simple graph is called regular when every vertex has the same degree. call
a graph balanced when it is regular and is also a bipartite graph with the same
number of left and right vertices.

prove that if g is a balanced graph, then the edges of g can be partitioned into

blocks such that each block is a perfect matching.

for example, if g is a balanced graph with 2k vertices each of degree j , then the
edges of g can be partitioned into j blocks, where each block consists of k edges,
each of which is a perfect matching.

exam problems
problem 12.14.
overworked and over-caffeinated, the teaching assistant   s (ta   s) decide to oust
the lecturer and teach their own recitations. they will run a recitation session at 4
different times in the same room. there are exactly 20 chairs to which a student can
be assigned in each recitation. each student has provided the ta   s with a list of the
recitation sessions her schedule allows and each student   s schedule con   icts with
at most two sessions. the ta   s must assign each student to a chair during recitation
at a time she can attend, if such an assignment is possible.
(a) describe how to model this situation as a matching problem. be sure to spec-
ify what the vertices/edges should be and brie   y describe how a matching would
determine seat assignments for each student in a recitation that does not con   ict
with his schedule. (this is a modeling problem; we aren   t looking for a description
of an algorithm to solve the problem.)

(b) suppose there are 41 students. given the information provided above, is a
matching guaranteed? brie   y explain.

   mcs        2017/6/5     19:42     page 502     #510

502

chapter 12 simple graphs

problem 12.15.
because of the incredible popularity of his class math for computer science, ta
mike decides to give up on regular of   ce hours.
instead, he arranges for each
student to join some study groups. each group must choose a representative to talk
to the staff, but there is a staff rule that a student can only represent one group. the
problem is to    nd a representative from each group while obeying the staff rule.
(a) explain how to model the delegate selection problem as a bipartite matching
problem. (this is a modeling problem; we aren   t looking for a description of an
algorithm to solve the problem.)

(b) the staff   s records show that each student is a member of at most 4 groups,
and all the groups have 4 or more members. is that enough to guarantee there is a
proper delegate selection? explain.

that

problem 12.16.

  .f implies g/ is a valid formula  :

f br g iff

letbr be the    implies    binary relation on propositional formulas de   ned by the rule
for example, .p and q/ br p , because the formula .p and q/ implies p is
valid. also, it is not true that .p or q/br p since .p or q/ implies p is not
(a) let a and b be the sets of formulas listed below. explain whybr is not a weak
valid.
partial order on the set a [ b.
(b) fill in thebr arrows from a to b.

(12.5)

   mcs        2017/6/5     19:42     page 503     #511

12.12. references

a

arrows

503

b
q

p or q

p or q or .p and q/

p xor q

p and q

not.p and q/

p

b and an edge between f and g iff f br g. exhibit a subset s of a such that both
(c) the diagram in part (b) de   nes a bipartite graph g with l.g/ d a, r.g/ d
s and a (cid:0) s are nonempty, and the set n.s / of neighbors of s is the same size as
s, that is, jn.s /j d jsj.
(d) let g be an arbitrary,    nite, bipartite graph. for any subset s   l.g/, let
s wwd l.g/(cid:0) s, and likewise for any m   r.g/, let m wwd r.g/(cid:0) m . suppose
s is a subset of l.g/ such that jn.s /j d jsj, and both s and s are nonempty.
circle the formula that correctly completes the following statement:
there is a matching from l.g/ to r.g/ if and only if there is both a matching
from s to its neighbors, n.s /, and also a matching from s to

n.s /

n.s /

(cid:0)1.n.s //

n

(cid:0)1.n.s //

n

n.s /(cid:0)n.s /

n.s /(cid:0)n.s /

hint: the proof of hall   s bottleneck theorem.

problem 12.17. (a) show that there is no matching for the bipartite graph g in
figure 12.25 that covers l.g/.

(b) the bipartite graph h in figure 12.26 has an easily veri   ed property that
implies it has a matching that covers l.h /. what is the property?

   mcs        2017/6/5     19:42     page 504     #512

504

chapter 12 simple graphs

figure 12.25 bipartite graph g.

homework problems
problem 12.18.
a latin square is n (cid:2) n array whose entries are the number 1; : : : ; n. these en-
tries satisfy two constraints: every row contains all n integers in some order, and
also every column contains all n integers in some order. latin squares come up
frequently in the design of scienti   c experiments for reasons illustrated by a little
story in a footnote10

10at guinness brewery in the eary 1900   s, w. s. gosset (a chemist) and e. s. beavan (a    maltster   )
were trying to improve the barley used to make the brew. the brewery used different varieties of
barley according to price and availability, and their agricultural consultants suggested a different
fertilizer mix and best planting month for each variety.

somewhat sceptical about paying high prices for customized fertilizer, gosset and beavan planned
a season long test of the in   uence of fertilizer and planting month on barley yields. for as many
months as there were varieties of barley, they would plant one sample of each variety using a different
one of the fertilizers. so every month, they would have all the barley varieties planted and all the
fertilizers used, which would give them a way to judge the overall quality of that planting month.
but they also wanted to judge the fertilizers, so they wanted each fertilizer to be used on each variety
during the course of the season. now they had a little mathematical problem, which we can abstract
as follows.
suppose there are n barley varieties and an equal number of recommended fertilizers. form an
n (cid:2) n array with a column for each fertilizer and a row for each planting month. we want to    ll in
the entries of this array with the integers 1,. . . ,n numbering the barley varieties, so that every row
contains all n integers in some order (so every month each variety is planted and each fertilizer is
used), and also every column contains all n integers (so each fertilizer is used on all the varieties over
the course of the growing season).

abcdevwxzyl(g)r(g)   mcs        2017/6/5     19:42     page 505     #513

12.12. references

505

figure 12.26 bipartite graph h .

for example, here is a 4 (cid:2) 4 latin square:

1 2 3 4
3 4 2 1
2 1 4 3
4 3 1 2

(a) here are three rows of what could be part of a 5 (cid:2) 5 latin square:

2 4 5 3 1
4 1 3 2 5
3 2 1 5 4

fill in the last two rows to extend this    latin rectangle    to a complete latin square.
(b) show that    lling in the next row of an n (cid:2) n latin rectangle is equivalent to
   nding a matching in some 2n-vertex bipartite graph.

(c) prove that a matching must exist in this bipartite graph and, consequently, a
latin rectangle can always be extended to a latin square.

abcdvwxzyl(h)r(h)   mcs        2017/6/5     19:42     page 506     #514

506

chapter 12 simple graphs

problem 12.19.
take a regular deck of 52 cards. each card has a suit and a value. the suit is one of
four possibilities: heart, diamond, club, spade. the value is one of 13 possibilities,
a; 2; 3; : : : ; 10; j; q; k. there is exactly one card for each of the 4 (cid:2) 13 possible
combinations of suit and value.

ask your friend to lay the cards out into a grid with 4 rows and 13 columns.
they can    ll the cards in any way they   d like. in this problem you will show that
you can always pick out 13 cards, one from each column of the grid, so that you
wind up with cards of all 13 possible values.
(a) explain how to model this trick as a bipartite matching problem between the
13 column vertices and the 13 value vertices.
is the graph necessarily degree-
constrained?

(b) show that any n columns must contain at least n different values and prove
that a matching must exist.

problem 12.20.
scholars through the ages have identi   ed twenty fundamental human virtues: hon-
esty, generosity, loyalty, prudence, completing the weekly course reading-response,
etc. at the beginning of the term, every student in math for computer science pos-
sessed exactly eight of these virtues. furthermore, every student was unique; that
is, no two students possessed exactly the same set of virtues. the math for com-
puter science course staff must select one additional virtue to impart to each student
by the end of the term. prove that there is a way to select an additional virtue for
each student so that every student is unique at the end of the term as well.

suggestion: use hall   s theorem. try various interpretations for the vertices on

the left and right sides of your bipartite graph.

problem 12.21.
suppose 2m teams play in a round-robin tournament. over a period of 2m (cid:0) 1
days, every team plays every other team exactly once. there are no ties. show that
for each day we can select a winning team, without selecting the same team twice.

   mcs        2017/6/5     19:42     page 507     #515

12.12. references

507

problems for section 12.6

class problems
problem 12.22.
let g be the graph below.11 carefully explain why (cid:31).g/ d 4.

problem 12.23.
a portion of a computer program consists of a sequence of calculations where the
results are stored in variables, like this:

step 1:
2:
3:
4:
5:
6:

inputs:

a; b

c d a c b
d d a (cid:3) c
e d c c 3
f d c (cid:0) e
g d a c f
h d f c 1

outputs:

d; g; h

a computer can perform such calculations most quickly if the value of each variable
is stored in a register, a chunk of very fast memory inside the microprocessor.
programming language compilers face the problem of assigning each variable in a
program to a register. computers usually have few registers, however, so they must
be used wisely and reused often. this is called the register allocation problem.

in the example above, variables a and b must be assigned different registers,
because they hold distinct input values. furthermore, c and d must be assigned
different registers; if they used the same one, then the value of c would be over-
written in the second step and we   d get the wrong answer in the third step. on the

11from [32], exercise 13.3.1

   mcs        2017/6/5     19:42     page 508     #516

508

chapter 12 simple graphs

other hand, variables b and d may use the same register; after the    rst step, we no
longer need b and can overwrite the register that holds its value. also, f and h may
use the same register; once f c 1 is evaluated in the last step, the register holding
the value of f can be overwritten.
(a) recast the register allocation problem as a question about graph coloring.
what do the vertices correspond to? under what conditions should there be an edge
between two vertices? construct the graph corresponding to the example above.

(b) color your graph using as few colors as you can. call the computer   s registers
r1, r2 etc. describe the assignment of variables to registers implied by your
coloring. how many registers do you need?

(c) suppose that a variable is assigned a value more than once, as in the code
snippet below:

: : :

t d r c s
u d t (cid:3) 3
t d m (cid:0) k
v d t c u

: : :

how might you cope with this complication?

problem 12.24.
suppose an n-vertex bipartite graph has exactly k connected components, each of
which has two or more vertices. how many ways are there color it using a given
set of two colors?

homework problems
problem 12.25.
6.042 is often taught using recitations. suppose it happened that 8 recitations were
needed, with two or three staff members running each recitation. the assignment
of staff to recitation sections, using their secret codenames, is as follows:

(cid:15) r1: maverick, goose, iceman
(cid:15) r2: maverick, stinger, viper

   mcs        2017/6/5     19:42     page 509     #517

12.12. references

509

(cid:15) r3: goose, merlin
(cid:15) r4: slider, stinger, cougar
(cid:15) r5: slider, jester, viper
(cid:15) r6: jester, merlin
(cid:15) r7: jester, stinger
(cid:15) r8: goose, merlin, viper
two recitations can not be held in the same 90-minute time slot if some staff
member is assigned to both recitations. the problem is to determine the minimum
number of time slots required to complete all the recitations.
(a) recast this problem as a question about coloring the vertices of a particular
graph. draw the graph and explain what the vertices, edges, and colors represent.

(b) show a coloring of this graph using the fewest possible colors; explain why
no fewer colors will work. what schedule of recitations does this imply?

problem 12.26.
this problem generalizes the result proved theorem 12.6.3 that any graph with
maximum degree at most w is .w c 1/-colorable.
a simple graph g is said to have width w iff its vertices can be arranged in a
sequence such that each vertex is adjacent to at most w vertices that precede it in
the sequence. if the degree of every vertex is at most w, then the graph obviously
has width at most w   just list the vertices in any order.
(a) prove that every graph with width at most w is .w c 1/-colorable.
(b) describe a 2-colorable graph with minimum width n.

(c) prove that the average degree of a graph of width w is at most 2w.

(d) describe an example of a graph with 100 vertices, width 3, but average degree
more than 5.

problem 12.27.
a sequence of vertices of a graph has width w iff each vertex is adjacent to at most
w vertices that precede it in the sequence. a simple graph g has width w if there
is a width-w sequence of all its vertices.

   mcs        2017/6/5     19:42     page 510     #518

510

chapter 12 simple graphs

(a) explain why the width of a graph must be at least the minimum degree of its
vertices.

(b) prove that if a    nite graph has width w, then there is a width-w sequence of
all its vertices that ends with a minimum degree vertex.

(c) describe a simple algorithm to    nd the minimum width of a graph.

problem 12.28.
let g be a simple graph whose vertex degrees are all   k. prove by induction on
number of vertices that if every connected component of g has a vertex of degree
strictly less than k, then g is k-colorable.

problem 12.29.
a basic example of a simple graph with chromatic number n is the complete graph
on n vertices, that is (cid:31).kn/ d n. this implies that any graph with kn as a subgraph
must have chromatic number at least n. it   s a common misconception to think that,
conversely, graphs with high chromatic number must contain a large complete sub-
graph. in this problem we exhibit a simple example countering this misconception,
namely a graph with chromatic number four that contains no triangle   length three
cycle   and hence no subgraph isomorphic to kn for n (cid:21) 3. namely, let g be the
11-vertex graph of figure 12.27. the reader can verify that g is triangle-free.

figure 12.27 graph g with no triangles and (cid:31).g/ d 4.

(a) show that g is 4-colorable.

(b) prove that g can   t be colored with 3 colors.

   mcs        2017/6/5     19:42     page 511     #519

12.12. references

511

problem 12.30.
this problem will show that 3-coloring a graph is just as dif   cult as    nding a sat-
isfying truth assignment for a propositional formula. the graphs considered will
all be taken to have three designated color-vertices connected in a triangle to force
them to have different colors in any coloring of the graph. the colors assigned to
the color-vertices will be called t; f and n .

suppose f is an n-argument truth function. that is,
f w ft; fgn ! ft; fg:

a graph g is called a 3-color-f-gate iff g has n designated input vertices and a
designated output vertex, such that

(cid:15) g can be 3-colored only if its input vertices are colored with t    s and f    s.
(cid:15) for every sequence b1; b2; : : : ; bn 2 ft; fg, there is a 3-coloring of g in
which the input vertices v1; v2; : : : ; vn 2 v .g/ have the colors b1; b2; : : : ; bn 2
ft; fg.
(cid:15) in any 3-coloring of g where the input vertices v1; v2; : : : ; vn 2 v .g/ have
colors b1; b2; : : : ; bn 2 ft; fg, the output vertex has color f .b1; b2; : : : ; bn/.
for example, a 3-color-not-gate consists simply of two adjacent vertices. one
vertex is designated to be the input vertex p and the other is designated to be the
output vertex. both vertices have to be constrained so they can only be colored with
t    s or f    s in any proper 3-coloring. this constraint can be imposed by making
them adjacent to the color-vertex n , as shown in figure 12.28.
(a) verify that the graph in figure 12.29 is a 3-color-or-gate. (the dotted lines
indicate edges to color-vertex n ; these edges constrain the p , q and p or q
vertices to be colored t or f in any proper 3-coloring.)

(b) let e be an n-variable propositional formula, and suppose e de   nes a truth
function f w ft; fgn ! ft; fg. explain a simple way to construct a graph that is
a 3-color-f -gate.

(c) explain why an ef   cient procedure for determining if a graph was 3-colorable
would lead to an ef   cient procedure to solve the satis   ability problem, sat.

problem 12.31.
the 3-coloring problem for planar graphs turns out to be no easier than the 3-
coloring problem for arbitrary graphs. this claim follows very simply from the

   mcs        2017/6/5     19:42     page 512     #520

512

chapter 12 simple graphs

[h]

[h]

figure 12.28 a 3-color not-gate

figure 12.29 a 3-color or-gate

t	
   f	
      	
      	
   n	
   p not(p) p or q p q n f t    mcs        2017/6/5     19:42     page 513     #521

12.12. references

513

[h]

figure 12.30 a 3-color cross-over gadget.

existence of a    3-color cross-over gadget.    such a gadget is a planar graph whose
outer face is a cycle with four designated vertices u; v; w; x occurring in clockwise
order such that

1. any assignment of colors to vertices u and v can be completed into a 3-

coloring of the gadget.

2. in every 3-coloring of the gadget, the colors of u and w are the same, and the

colors of v and x are the also same.

figure 12.30 shows such a 3-color cross-over gadget.12
so to    nd a 3-coloring for any simple graph, simply draw it in the plane with
edges crossing as needed, and then replace each occurrence of an edge crossing by
a copy of the gadget as shown in figure 12.31. this yields a planar graph which
has a 3-coloring iff the original graph had one.
(a) prove that the graph in figure 12.30 satis   es condition (1) by exhibiting the
claimed 3-colorings.
hint: only two colorings are needed, one where u and v are the same color and
another where they are not the same color.

12this gadget and reduction of 3-colorability to planar 3-colorability are due to larry stock-

meyer [46].

u	
   v	
   x	
   w	
      mcs        2017/6/5     19:42     page 514     #522

514

chapter 12 simple graphs

[h]

figure 12.31 replacing an edge-crossing with a planar gadget.

(b) prove that the graph in figure 12.30 satis   es condition (2).
hint: the colorings for part (a) are almost completely forced by the coloring of u
and v.

exam problems
problem 12.32.

false claim. let g be a graph whose vertex degrees are all   k. if g has a vertex
of degree strictly less than k, then g is k-colorable.
(a) give a counterexample to the false claim when k d 2.
(b) underline the exact sentence or part of a sentence that is the    rst unjusti   ed
step in the following bogus proof of the false claim.

bogus proof. proof by induction on the number n of vertices:
the induction hypothesis p .n/ is:

let g be an n-vertex graph whose vertex degrees are all   k. if g
also has a vertex of degree strictly less than k, then g is k-colorable.

base case: (n d 1) g has one vertex, the degree of which is 0. since g is
1-colorable, p .1/ holds.
inductive step: we may assume p .n/. to prove p .n c 1/, let gnc1 be a
graph with nc1 vertices whose vertex degrees are all k or less. also, suppose
gnc1 has a vertex v of degree strictly less than k. now we only need to prove
that gnc1 is k-colorable.

   mcs        2017/6/5     19:42     page 515     #523

12.12. references

515

to do this,    rst remove the vertex v to produce a graph gn with n vertices.
let u be a vertex that is adjacent to v in gnc1. removing v reduces the
degree of u by 1. so in gn, vertex u has degree strictly less than k. since no
edges were added, the vertex degrees of gn remain   k. so gn satis   es the
conditions of the induction hypothesis p .n/, and so we conclude that gn is
k-colorable.
now a k-coloring of gn gives a coloring of all the vertices of gnc1, except for
v. since v has degree less than k, there will be fewer than k colors assigned
to the nodes adjacent to v. so among the k possible colors, there will be a
color not used to color these adjacent nodes, and this color can be assigned to
v to form a k-coloring of gnc1.

(cid:4)

(c) with a slightly strengthened condition, the preceding proof of the false claim
could be revised into a sound proof of the following claim:
claim. let g be a graph whose vertex degrees are all   k.
if hstatement inserted from belowi has a vertex of degree strictly less than k, then
g is k-colorable.
indicate each of the statements below that could be inserted to make the proof
correct.

(cid:15) g is connected and
(cid:15) g has no vertex of degree zero and
(cid:15) g does not contain a complete graph on k vertices and
(cid:15) every connected component of g
(cid:15) some connected component of g

problem 12.33.
in the graph shown in figure 12.32, the vertices connected in the triangle on the left
are called color-vertices; since they form a triangle, they are forced to have different
colors in any coloring of the graph. the colors assigned to the color-vertices will
be called t; f and n. the dotted lines indicate edges to the color-vertex n.
(a) explain why for any assignment of different truth-colors to p and q, there is
a unique 3-coloring of the graph.

(b) prove that in any 3-coloring of the whole graph, the vertex labeled p xor q
is colored with the xor of the colors of vertices p and q.

   mcs        2017/6/5     19:42     page 516     #524

516

chapter 12 simple graphs

[h]

figure 12.32 a 3-color xor-gate

problems for section 12.7

exam problems
problem 12.34.
since you can go back and forth on an edge in a simple graph, every vertex is on
an even length closed walk. so even length closed walks don   t tell you much about
even length cycles. the situation with odd-length closed walks is more interesting.
(a) give an example of a simple graph in which every vertex is on a unique odd-
length cycle and a unique even-length cycle.
hint: four vertices.

(b) give an example of a simple graph in which every vertex is on a unique odd-
length cycle and no vertex is on an even-length cycle.

(c) prove that in a digraph, a smallest size odd-length closed walk must be a cycle.
note that there will always be lots of even-length closed walks that are shorter than
the smallest odd-length one.
hint: let e be an odd-length closed walk of minimum size, and suppose it begins
and ends at vertex a. if it is not a cycle, then it must include a repeated vertex

n f t p     q	

p q xor f b a c d e    mcs        2017/6/5     19:42     page 517     #525

12.12. references

517

b    a. that is, e starts with a walk f from a to b, followed by a walk g from b to
b, followed by a walk h from b to a.13

homework problems
problem 12.35. (a) give an example of a simple graph that has two vertices u    v
and two distinct paths between u and v, but neither u nor v is on a cycle.

(b) prove that if there are different paths between two vertices in a simple graph,
then the graph has a cycle.

problems for section 12.10

class problems
problem 12.36.
a simple graph g is 2-removable iff it contains two vertices v    w such that g(cid:0) v
is connected, and g (cid:0) w is also connected. prove that every connected graph with
at least two vertices is 2-removable.

hint: consider a maximum length path.

problem 12.37.
the n-dimensional hypercube hn is a graph whose vertices are the binary strings
of length n. two vertices are adjacent if and only if they differ in exactly 1 bit. for
example, in h3, vertices 111 and 011 are adjacent because they differ only in the
   rst bit, while vertices 101 and 011 are not adjacent because they differ at both
the    rst and second bits.
(a) prove that it is impossible to    nd two spanning trees of h3 that do not share
some edge.
(b) verify that for any two vertices x    y of h3, there are 3 paths from x to y in
h3, such that, besides x and y, no two of those paths have a vertex in common.

(c) conclude that the connectivity of h3 is 3.
13in the notation of the text

e d a fbb gbb h a:

   mcs        2017/6/5     19:42     page 518     #526

518

chapter 12 simple graphs

(d) try extending your reasoning to h4. (in fact, the connectivity of hn is n for
all n (cid:21) 1. a proof appears in the problem solution.)

problem 12.38.
a set m of vertices of a graph is a maximal connected set if every pair of vertices
in the set are connected, and any set of vertices properly containing m will contain
two vertices that are not connected.
(a) what are the maximal connected subsets of the following (unconnected) graph?

(b) explain the connection between maximal connected sets and connected com-
ponents. prove it.

problem 12.39. (a) prove that kn is .n (cid:0) 1/-edge connected for n > 1.
let mn be a graph de   ned as follows: begin by taking n graphs with non-
overlapping sets of vertices, where each of the n graphs is .n (cid:0) 1/-edge connected
(they could be disjoint copies of kn, for example). these will be subgraphs of mn.
then pick n vertices, one from each subgraph, and add enough edges between pairs
of picked vertices that the subgraph of the n picked vertices is also .n (cid:0) 1/-edge
connected.
(b) draw a picture of m3.: : : m4/.
(c) explain why mn is .n (cid:0) 1/-edge connected.

problem 12.40.

   mcs        2017/6/5     19:42     page 519     #527

12.12. references

519

false claim. if every vertex in a graph has positive degree, then the graph is
connected.
(a) prove that this claim is indeed false by providing a counterexample.

(b) since the claim is false, there must be a logical mistake in the following bogus
proof. pinpoint the    rst logical mistake (unjusti   ed step) in the proof.

bogus proof. we prove the claim above by induction. let p .n/ be the proposition
that if every vertex in an n-vertex graph has positive degree, then the graph is
connected.
base cases: (n   2). in a graph with 1 vertex, that vertex cannot have positive
degree, so p .1/ holds vacuously.
p .2/ holds because there is only one graph with two vertices of positive degree,
namely, the graph with an edge between the vertices, and this graph is connected.
inductive step: we must show that p .n/ implies p .nc 1/ for all n (cid:21) 2. consider
an n-vertex graph in which every vertex has positive degree. by the assumption
p .n/, this graph is connected; that is, there is a path between every pair of vertices.
now we add one more vertex x to obtain an .n c 1/-vertex graph:

all that remains is to check that there is a path from x to every other vertex z. since
x has positive degree, there is an edge from x to some other vertex y. thus, we can
obtain a path from x to z by going from x to y and then following the path from y
to z. this proves p .n c 1/.
by the principle of induction, p .n/ is true for all n (cid:21) 0, which proves the claim.
(cid:4)

xyzn-node connected graph   mcs        2017/6/5     19:42     page 520     #528

520

chapter 12 simple graphs

homework problems
problem 12.41.
an edge is said to leave a set of vertices if one end of the edge is in the set and the
other end is not.
(a) an n-node graph is said to be mangled if there is an edge leaving every set of
bn=2c or fewer vertices. prove the following:
claim. every mangled graph is connected.

an n-node graph is said to be tangled if there is an edge leaving every set of
dn=3e or fewer vertices.
(b) draw a tangled graph that is not connected.

(c) find the error in the bogus proof of the following
false claim. every tangled graph is connected.

bogus proof. the proof is by strong induction on the number of vertices in the
graph. let p .n/ be the proposition that if an n-node graph is tangled, then it is
connected. in the base case, p .1/ is true because the graph consisting of a single
node is trivially connected.
for the inductive case, assume n (cid:21) 1 and p .1/; : : : ; p .n/ hold. we must prove
p .n c 1/, namely, that if an .n c 1/-node graph is tangled, then it is connected.
so let g be a tangled, .nc 1/-node graph. choose dn=3e of the vertices and let g1
be the tangled subgraph of g with these vertices and g2 be the tangled subgraph
with the rest of the vertices. note that since n (cid:21) 1, the graph g has a least two
vertices, and so both g1 and g2 contain at least one vertex. since g1 and g2 are
tangled, we may assume by strong induction that both are connected. also, since
g is tangled, there is an edge leaving the vertices of g1 which necessarily connects
to a vertex of g2. this means there is a path between any two vertices of g: a path
within one subgraph if both vertices are in the same subgraph, and a path traversing
the connecting edge if the vertices are in separate subgraphs. therefore, the entire
graph g is connected. this completes the proof of the inductive case, and the claim
follows by strong induction.

(cid:4)

problem 12.42.
in the cycle c2n of length 2n, we   ll call two vertices opposite if they are on opposite
sides of the cycle, that is that are distance n apart in c2n. let g be the graph formed

   mcs        2017/6/5     19:42     page 521     #529

12.12. references

521

from c2n by adding an edge, which we   ll call a crossing edge, between each pair
of opposite vertices. so g has n crossing edges.
(a) give a simple description of the shortest path between any two vertices of g.
hint: argue that a shortest path between two vertices in g uses at most one crossing
edge.

(b) what is the diameter of g, that is, the largest distance between two vertices?

(c) prove that the graph is not 4-connected.

(d) prove that the graph is 3-connected.

problem 12.43.
an euler tour of a graph is a closed walk that includes every edge exactly once.14
in this problem we work out a proof of:

theorem. a connected graph has an euler tour if and only if every vertex has even
degree.

(a) show that if a graph has an euler tour, then the degree of each of its vertices
is even.

in the remaining parts, we   ll work out the converse: if the degree of every vertex
of a connected    nite graph is even, then it has an euler tour. to do this, let   s de   ne
an euler walk to be a walk that includes each edge at most once.
(b) suppose that an euler walk in a connected graph does not include every edge.
explain why there must be an unincluded edge that is incident to a vertex on the
walk.

in the remaining parts, let w be the longest euler walk in some    nite, connected

graph.
(c) show that if w is a closed walk, then it must be an euler tour.
hint: part (b)

(d) explain why all the edges incident to the end of w must already be in w.

(e) show that if the end of w was not equal to the start of w, then the degree of
the end would be odd.
hint: part (d)

14in some other texts, this is called an euler circuit.

   mcs        2017/6/5     19:42     page 522     #530

522

chapter 12 simple graphs

(f) conclude that if every vertex of a    nite, connected graph has even degree, then
it has an euler tour.

exam problems
problem 12.44.
we apply the following operation to a simple graph g: pick two vertices u    v
such that either

1. there is an edge of g between u and v, and there is also a path from u to v

which does not include this edge; in this case, delete the edge hu   vi.

2. there is no path from u to v; in this case, add the edge hu   vi.
keep repeating these operations until it is no longer possible to    nd two vertices
u    v to which an operation applies.
assume the vertices of g are the integers 1; 2; : : : ; n for some n (cid:21) 2. this
procedure can be modelled as a state machine whose states are all possible simple
graphs with vertices 1; 2; : : : ; n. g is the start state, and the    nal states are the
graphs on which no operation is possible.
(a) let g be the graph with vertices f1; 2; 3; 4g and edges

ff1; 2g;f3; 4gg

how many possible    nal states are reachable from start state g?

1in

(b) on the line next to each of the derived state variables below, indicate the
strongest property from the list below that the variable is guaranteed to satisfy,
no matter what the starting graph g is. the properties are:

constant

increasing

nonincreasing

nondecreasing

decreasing
none of these

for any state, let e be the number of edges in it, and let c be the number of con-
nected components it has. since e may increase or decrease in a transition, it does
not have any of the    rst four properties. the derived variables are:

0) e
i) c
ii) c c e
iii) 2c c e
iv) c c e
ec1

none of these

   mcs        2017/6/5     19:42     page 523     #531

12.12. references

523

(c) explain why, starting from any state g, the procedure terminates. if your ex-
planation depends on answers you gave to part (b), you must justify those answers.

(d) prove that any    nal state must be an unordered tree on the set of vertices, that
is, a spanning tree.

problem 12.45.
if a simple graph has e edges, v vertices, and k connected components, then it has
at least e (cid:0) v c k cycles.
prove this by induction on the number of edges e.

problems for section 12.11

practice problems
problem 12.46. (a) prove that the average degree of a tree is less than 2.

(b) suppose every vertex in a graph has degree at least k. explain why the graph
has a path of length k.
hint: consider a longest path.

figure 12.33 the graph g.

cbadfehg   mcs        2017/6/5     19:42     page 524     #532

524

chapter 12 simple graphs

problem 12.47. (a) how many spanning trees are there for the graph g in fig-
ure 12.33?
(b) for g (cid:0) e, the graph g with vertex e deleted, describe two spanning trees that
have no edges in common.
(c) for g (cid:0) e with edge ha   di deleted, explain why there cannot be two edge-
disjoint spanning trees.
hint: : count vertices and edges.

problem 12.48.
prove that if g is a forest and

then g is a tree.

jv .g/j d je.g/j c 1;

(12.6)

problem 12.49.
let h3 be the graph shown in figure 12.34. explain why it is impossible to    nd
two spanning trees of h3 that have no edges in common.

figure 12.34 h3 .

problem 12.50.
the diameter of a connected graph is the largest distance between any two vertices.
(a) what is the largest possible diameter in any connected graph with n vertices?
describe a graph with this maximum diameter.

(b) what is the smallest possible diameter of an n-vertex tree for n > 2? describe
an n-vertex tree with this minimum diameter.

000001010011100101110111   mcs        2017/6/5     19:42     page 525     #533

12.12. references

problem 12.51.

525

(a) indicate all the properties below that are preserved under graph isomorphism.
(cid:15) there is a cycle that includes all the vertices.
(cid:15) two edges are of equal length.
(cid:15) the graph remains connected if any two edges are removed.
(cid:15) there exists an edge that is an edge of every spanning tree.
(cid:15) the negation of a property that is preserved under isomorphism.

(b) for the following statements about    nite trees, indicate whether they are true
or false, and provide counterexamples for those that are false.

(cid:15) any connected subgraph is a tree.
true
(cid:15) adding an edge between two nonadjacent vertices creates a cycle.
false
(cid:15) the number of vertices is one less than twice the number of leaves.
false
(cid:15) the number of vertices is one less than the number of edges. true
false
(cid:15) for every    nite graph (not necessarily a tree), there is one (a    nite tree) that
false
spans it.

false
true

true

true

problem 12.52.

circle true or false for the following statements about    nite simple

graphs g.
(a) g has a spanning tree.
(b) jv .g/j d o.je.g/j/ for connected g.
(c) je.g/j d o.jv .g/j/.
(d) (cid:31).g/   maxfdeg.v/ j v 2 v .g/g.15
(e) jv .g/j d o.(cid:31).g//.
15(cid:31).g/ is the chromatic number of g.

true

true

true

true

true

false

false

false

false

false

   mcs        2017/6/5     19:42     page 526     #534

526

chapter 12 simple graphs

exam problems
problem 12.53. (a) let t be a tree and e a new edge between two vertices of t .
explain why t c e must contain a cycle.
(b) conclude that t c e must have at least three spanning trees.

problem 12.54.
how many 5-vertex non-isomomorphic trees are there? explain.

problem 12.55.
a simple graph g is said to have width 1 iff there is a way to list all its vertices so
that each vertex is adjacent to at most one vertex that appears earlier in the list. all
the graphs mentioned below are assumed to be    nite.
(a) prove that every graph with width one is a forest.
hint: by induction, removing the last vertex.

(b) prove that every    nite tree has width one. conclude that a graph is a forest iff
it has width one.

problem 12.56.
prove by induction that, using a    xed set of n > 1 colors, there are exactly

n (cid:1) .n (cid:0) 1/m(cid:0)1

different colorings of any tree with m vertices.

problem 12.57.
let g be a connected weighted simple graph and let v be a vertex of g. suppose
e wwd hv   wi is an edge of g that is strictly smaller than the weight of every other
edge incident to v. let t be a minimum weight spanning tree of g. prove that e is
an edge of t . hint: by contradiction.

problem 12.58.
note that the two parts of this problem do not depend on each other.

   mcs        2017/6/5     19:42     page 527     #535

12.12. references

527

(a) let g be a connected simple graph. prove that every spanning tree of g must
include every cut edge of g.

(b) suppose a connected, weighted graph g has a unique maximum-weight edge
e. show that if e is in a minimum weight spanning tree of g, then e is a cut edge.

class problems
problem 12.59.
procedure mark starts with a connected, simple graph with all edges unmarked and
then marks some edges. at any point in the procedure a path that includes only
marked edges is called a fully marked path, and an edge that has no fully marked
path between its endpoints is called eligible.

procedure mark simply keeps marking eligible edges, and terminates when there

are none.

prove that mark terminates, and that when it does, the set of marked edges forms

a spanning tree of the original graph.

problem 12.60.
a procedure for connecting up a (possibly disconnected) simple graph and creating
a spanning tree can be modelled as a state machine whose states are    nite simple
graphs. a state is    nal when no further transitions are possible. the transitions are
determined by the following rules:

procedure create-spanning-tree

1. if there is an edge hu   vi on a cycle, then delete hu   vi.
2. if vertices u and v are not connected, then add the edge hu   vi.

(a) draw all the possible    nal states reachable starting with the graph with vertices
f1; 2; 3; 4g and edges

fh1   2i ;h3   4ig:

(b) prove that if the machine reaches a    nal state, then the    nal state will be a tree
on the vertices of the graph on which it started.

0, c be the number of con-
(c) for any graph g
nected components it has, and s be the number of cycles. for each of the quantities

0, let e be the number of edges in g

   mcs        2017/6/5     19:42     page 528     #536

528

chapter 12 simple graphs

below, indicate the strongest of the properties that it is guaranteed to satisfy, no
matter what the starting graph is.
the choices for properties are: constant, strictly increasing, strictly decreasing,
weakly increasing, weakly decreasing, none of these.

(i) e
(ii) c
(iii) s
(iv) e (cid:0) s
(v) c c e
(vi) 3c c 2e
(vii) c c s

(d) prove that one of the quantities from part (c) strictly decreases at each transi-
tion. conclude that for every starting state, the machine will reach a    nal state.

problem 12.61.
let g be a weighted graph and suppose there is a unique edge e 2 e.g/ with
smallest weight, that is, w.e/ < w.f / for all edges f 2 e.g/ (cid:0) feg. prove that
any minimum weight spanning tree (mst) of g must include e.

problem 12.62.
let g be the 4 (cid:2) 4 grid with vertical and horizontal edges between neighboring
vertices and edge weights as shown in figure 12.35.

in this problem you will practice some of the ways to build minimum-weight
spanning trees. for each part, list the edge weights in the order in which the edges
with those weights were chosen by the given rules.
(a) construct a minimum weight spanning tree (mst) for g by initially selecting
the minimum weight edge, and then successively selecting the minimum weight
edge that does not create a cycle with the previously selected edges. stop when the
selected edges form a spanning tree of g. (this is kruskal   s mst algorithm.)
for any step in kruskal   s procedure, describe a black-white coloring of the graph
components so that the edge kruskal chooses is the minimum weight    gray edge   
according to lemma 12.11.8.

   mcs        2017/6/5     19:42     page 529     #537

12.12. references

529

figure 12.35 the 4x4 array graph g

(b) grow an mst for g by starting with the tree consisting of the single vertex u
and then successively adding the minimum weight edge with exactly one endpoint
in the tree. stop when the tree spans g. (this is prim   s mst algorithm.)
for any step in prim   s procedure, describe a black-white coloring of the graph com-
ponents so that the edge prim chooses is the minimum weight    gray edge   according
to lemma 12.11.8.

(c) the 6.042    parallel    mst algorithm can grow an mst for g by starting with
the upper left corner vertex along with the vertices labelled v and w. regard each of
the three vertices as one-vertex trees. successively add, for each tree in parallel, the
minimum-weight edge among the edges with exactly one endpoint in the tree. stop
working on a tree when there is an edge connecting it to another tree. continue
until there are no more eligible trees   that is, each tree is connected by an edge
to another tree   then go back to applying the general gray-edge method until the
parallel trees merge to form a spanning tree of g.

0 0.04 0.08 1 1.01 1.02 1.04 1.08 1.12 1.05 1.06 1.09 1.10 1.13 1.14 0.01 0.05 0.09 0.02 0.06 0.10 0.03 0.07 0.11 v	w	u	   mcs        2017/6/5     19:42     page 530     #538

530

chapter 12 simple graphs

(d) verify that you got the same mst each time as promised by corollary 12.11.11.

problem 12.63.
in this problem you will prove:

theorem. a graph g is 2-colorable iff it contains no odd length closed walk.

as usual with    iff    assertions, the proof splits into two proofs: part (a) asks you
to prove that the left side of the    iff    implies the right side. the other problem parts
prove that the right side implies the left.
(a) assume the left side and prove the right side. three to    ve sentences should
suf   ce.

(b) now assume the right side. as a    rst step toward proving the left side, explain
why we can focus on a single connected component h within g.

(c) as a second step, explain how to 2-color any tree.

(d) choose any 2-coloring of a spanning tree t of h . prove that h is 2-colorable
by showing that any edge not in t must also connect different-colored vertices.

problem 12.64.
mit information services & technology (is&t) wants to assemble a cluster of
n computers using wires and hubs. each computer must have exactly one wire
attached to it, while each hub can have up to    ve wires attached. there must be a
path of wires between every pair of computers in the cluster.
(a) prove by induction that d.n (cid:0) 2/=3e hubs are suf   cient for is&t to assemble
the cluster of n computers.

suppose is&t uses m hubs.
(b) write a simple formula in terms of m and n that bounds the maximum number
of wires that can be attached to the hubs and computers without leaving dangling
ends.

(c) write a simple formula in terms of m and n for a lower bound on the number
of wires needed to form the cluster, even using hubs that may have more than    ve
wires attached.

   mcs        2017/6/5     19:42     page 531     #539

12.12. references

531

(d) is&t wants to minimize the number of hubs used to assemble the cluster. use
the previous results to prove that at d.n (cid:0) 2/=3e hubs are necessary and suf   cient
to hook up the cluster.

homework problems
problem 12.65.
suppose d d hd1; d2; : : : ; dni is a list of the degrees of the vertices of some n-
vertex tree t for n (cid:21) 2. that is, we assume the vertices of t are numbered, and
di > 0 is the degree of the ith vertex of t .
(a) explain why

di d 2.n (cid:0) 1/:

(12.7)

nx

id1

say a    nite sequence of n (cid:21) 2 positive integers is good when the sum of its
elements is 2.n (cid:0) 1/.
(b) prove that every good sequence is a list of the degrees of all the vertices in
some tree.
hint: induction.

(c) show that if d is a good sequence, then the elements of d can each be as-
signed one of two colors, say    red    and    black,    such that the sum of the red ele-
ments equals the sum of the black elements.

problem 12.66.
prove corollary 12.11.11: if all edges in a    nite weighted graph have distinct
weights, then the graph has a unique mst.
hint: suppose m and n were different mst   s of the same graph. let e be the
smallest edge in one and not the other, say e 2 m (cid:0) n , and observe that n c e
must have a cycle.

   mcs        2017/6/5     19:42     page 532     #540

   mcs        2017/6/5     19:42     page 533     #541

13

planar graphs

13.1 drawing graphs in the plane

suppose there are three dog houses and three human houses, as shown in fig-
ure 13.1. can you    nd a route from each dog house to each human house such that
no route crosses any other route?

a similar question comes up about a little-known animal called a quadrapus that
looks like an octopus with four stretchy arms instead of eight. if    ve quadrapi are
resting on the sea    oor, as shown in figure 13.2, can each quadrapus simultane-
ously shake hands with every other in such a way that no arms cross?

both these puzzles can be understood as asking about drawing graphs in the
plane. replacing dogs and houses by nodes, the dog house puzzle can be rephrased
as asking whether there is a planar drawing of the graph with six nodes and edges
between each of the    rst three nodes and each of the second three nodes. this
graph is called the complete bipartite graph k3;3 and is shown in figure 13.3.(a).
the quadrapi puzzle asks whether there is a planar drawing of the complete graph
k5 shown in figure 13.3.(b).

in each case, the answer is,    no   but almost!    in fact, if you remove an edge
from either of these graphs, then the resulting graph can be redrawn in the plane so
that no edges cross, as shown in figure 13.4.

planar drawings have applications in circuit layout and are helpful in displaying
graphical data such as program    ow charts, organizational charts and scheduling
con   icts. for these applications, the goal is to draw the graph in the plane with as
few edge crossings as possible. (see the box on the following page for one such
example.)

13.2 de   nitions of planar graphs

we took the idea of a planar drawing for granted in the previous section, but if
we   re going to prove things about planar graphs, we better have precise de   nitions.

de   nition 13.2.1. a drawing of a graph assigns to each node a distinct point in
the plane and assigns to each edge a smooth curve in the plane whose endpoints
correspond to the nodes incident to the edge. the drawing is planar if none of the

   mcs        2017/6/5     19:42     page 534     #542

534

chapter 13 planar graphs

figure 13.1 three dog houses and and three human houses. is there a route from
each dog house to each human house so that no pair of routes cross each other?

   mcs        2017/6/5     19:42     page 535     #543

13.2. de   nitions of planar graphs

535

figure 13.2 five quadrapi (4-armed creatures).

(a)

(b)

figure 13.3 k3;3 (a) and k5 (b). can you redraw these graphs so that no pairs
of edges cross?

   mcs        2017/6/5     19:42     page 536     #544

536

chapter 13 planar graphs

(a)

(b)

figure 13.4 planar drawings of (a) k3;3 without hu   vi, and (b) k5 without
hu   vi.

steve wozniak and a planar circuit design
when wires are arranged on a surface, like a circuit board or microchip, cross-
ings require troublesome three-dimensional structures. when steve wozniak
designed the disk drive for the early apple ii computer, he struggled might-
ily to achieve a nearly planar design according to the following excerpt from
apple2history.org which in turn quotes fire in the valley by freiberger
and swaine:

for two weeks, he worked late each night to make a satisfactory de-
sign. when he was    nished, he found that if he moved a connector
he could cut down on feedthroughs, making the board more reliable.
to make that move, however, he had to start over in his design. this
time it only took twenty hours. he then saw another feedthrough
that could be eliminated, and again started over on his design.    the
   nal design was generally recognized by computer engineers as bril-
liant and was by engineering aesthetics beautiful. woz later said,    it   s
something you can only do if you   re the engineer and the pc board
layout person yourself. that was an artistic layout. the board has
virtually no feedthroughs.   

vuuv   mcs        2017/6/5     19:42     page 537     #545

13.2. de   nitions of planar graphs

537

curves cross themselves or other curves, namely, the only points that appear more
than once on any of the curves are the node points. a graph is planar when it has a
planar drawing.

de   nition 13.2.1 is precise but depends on further concepts:    smooth planar
curves    and    points appearing more than once    on them. we haven   t de   ned these
concepts   we just showed the simple picture in figure 13.4 and hoped you would
get the idea.

pictures can be a great way to get a new idea across, but it is generally not a good
idea to use a picture to replace precise mathematics. relying solely on pictures can
sometimes lead to disaster   or to bogus proofs, anyway. there is a long history of
bogus proofs about planar graphs based on misleading pictures.

the bad news is that to prove things about planar graphs using the planar draw-
ings of de   nition 13.2.1, we   d have to take a chapter-long excursion into contin-
uous mathematics just to develop the needed concepts from plane geometry and
point-set topology. the good news is that there is another way to de   ne planar
graphs that uses only discrete mathematics.
in particular, we can de   ne planar
graphs as a recursive data type. in order to understand how it works, we    rst need
to understand the concept of a face in a planar drawing.

13.2.1 faces
the curves in a planar drawing divide up the plane into connected regions called
the continuous faces1 of the drawing. for example, the drawing in figure 13.5 has
four continuous faces. face iv, which extends off to in   nity in all directions, is
called the outside face.

the vertices along the boundary of each continuous face in figure 13.5 form a
cycle. for example, labeling the vertices as in figure 13.6, the cycles for each of
the face boundaries can be described by the vertex sequences

abca

abda

bcdb

acda:

(13.1)

these four cycles correspond nicely to the four continuous faces in figure 13.6   
so nicely, in fact, that we can identify each of the faces in figure 13.6 by its cycle.
for example, the cycle abca identi   es face iii. the cycles in list 13.1 are called the
discrete faces of the graph in figure 13.6. we use the term    discrete    since cycles
in a graph are a discrete data type   as opposed to a region in the plane, which is a
continuous data type.

1most texts drop the adjective continuous from the de   nition of a face as a connected region. we

need the adjective to distinguish continuous faces from the discrete faces we   re about to de   ne.

   mcs        2017/6/5     19:42     page 538     #546

538

chapter 13 planar graphs

figure 13.5 a planar drawing with four continuous faces.

figure 13.6 the drawing with labeled vertices.

iiiiiiivdcbaiiiiiiiv   mcs        2017/6/5     19:42     page 539     #547

13.2. de   nitions of planar graphs

539

figure 13.7 a planar drawing with a bridge.

unfortunately, continuous faces in planar drawings are not always bounded by
cycles in the graph   things can get a little more complicated. for example, the
planar drawing in figure 13.7 has what we will call a bridge, namely, a cut edge
hc   ei. the sequence of vertices along the boundary of the outer region of the
drawing is

abcefgecda:

this sequence de   nes a closed walk, but does not de   ne a cycle since the walk has
two occurrences of the bridge hc   ei and each of its endpoints.
the planar drawing in figure 13.8 illustrates another complication. this drawing
has what we will call a dongle, namely, the nodes v, x, y and w, and the edges
incident to them. the sequence of vertices along the boundary of the inner region
is

rst vxyxvwvt ur:

this sequence de   nes a closed walk, but once again does not de   ne a cycle be-
cause it has two occurrences of every edge of the dongle   once    coming    and once
   going.   

it turns out that bridges and dongles are the only complications, at least for con-
nected graphs. in particular, every continuous face in a planar drawing corresponds
to a closed walk in the graph. these closed walks will be called the discrete faces
of the drawing, and we   ll de   ne them next.

13.2.2 a recursive de   nition for planar embeddings
the association between the continuous faces of a planar drawing and closed walks
provides the discrete data type we can use instead of continuous drawings. we   ll
de   ne a planar embedding of connected graph to be the set of closed walks that are
its face boundaries. since all we care about in a graph are the connections between

befgcda   mcs        2017/6/5     19:42     page 540     #548

540

chapter 13 planar graphs

figure 13.8 a planar drawing with a dongle.

vertices   not what a drawing of the graph actually looks like   planar embeddings
are exactly what we need.

the question is how to de   ne planar embeddings without appealing to continu-
ous drawings. there is a simple way to do this based on the idea that any continuous
drawing can drawn step by step:

(cid:15) either draw a new point somewhere in the plane to represent a vertex,
(cid:15) or draw a curve between two vertex points that have already been laid down,
making sure the new curve doesn   t cross any of the previously drawn curves.

a new curve won   t cross any other curves precisely when it stays within one
of the continuous faces. alternatively, a new curve won   t have to cross any other
curves if it can go between the outer faces of two different drawings. so to be sure
it   s ok to draw a new curve, we just need to check that its endpoints are on the
boundary of the same face, or that its endpoints are on the outer faces of different
drawings. of course drawing the new curve changes the faces slightly, so the face
boundaries will have to be updated once the new curve is drawn. this is the idea
behind the following recursive de   nition.

de   nition 13.2.2. a planar embedding of a connected graph consists of a nonempty
set of closed walks of the graph called the discrete faces of the embedding. planar
embeddings are de   ned recursively as follows:
base case: if g is a graph consisting of a single vertex v then a planar embedding
of g has one discrete face, namely, the length zero closed walk v.

sturvxyw   mcs        2017/6/5     19:42     page 541     #549

13.2. de   nitions of planar graphs

541

figure 13.9 the    split a face    case: awxbyza splits into awxba and abyza.

constructor case (split a face): suppose g is a connected graph with a planar
embedding, and suppose a and b are distinct, nonadjacent vertices of g that occur
in some discrete face (cid:13) of the planar embedding. that is, (cid:13) is a closed walk of the
form

(cid:13) d   b  

where    is a walk from a to b and    is a walk from b to a. then the graph obtained
by adding the edge ha   bi to the edges of g has a planar embedding with the same
discrete faces as g, except that face (cid:13) is replaced by the two discrete faces2

  bhb   ai

ha   bib  

and

(13.2)

as illustrated in figure 13.9.3
constructor case (add a bridge): suppose g and h are connected graphs with
planar embeddings and disjoint sets of vertices. let (cid:13) be a discrete face of the
embedding of g and suppose that (cid:13) begins and ends at vertex a.

similarly, let    be a discrete face of the embedding of h that begins and ends at

vertex b.

2 there is a minor exception to this de   nition of embedding in the special case when g is a line
graph beginning with a and ending with b. in this case the cycles into which (cid:13) splits are actually
the same. that   s because adding edge ha   bi creates a cycle that divides the plane into    inner    and
   outer    continuous faces that are both bordered by this cycle. in order to maintain the correspondence
between continuous faces and discrete faces in this case, we de   ne the two discrete faces of the
embedding to be two    copies    of this same cycle.
used a walk .a ha   bi b/ instead of an edge ha   bi and written

3formally, merge is an operation on walks, not a walk and an edge, so in (13.2), we should have

  b.b hb   ai a/

and

.a ha   bi b/b  

ywazbx   mcs        2017/6/5     19:42     page 542     #550

542

chapter 13 planar graphs

figure 13.10 the    add a bridge    case.

then the graph obtained by connecting g and h with a new edge ha   bi has a
planar embedding whose discrete faces are the union of the discrete faces of g and
h , except that faces (cid:13) and    are replaced by one new face

(cid:13)bha   bib  bhb   ai :

this is illustrated in figure 13.10, where the vertex sequences of the faces of g

and h are:

g w faxyza; axya; ayzag

h w fbt uvwb; bt vwb; t uvtg;

and after adding the bridge ha   bi, there is a single connected graph whose faces
have the vertex sequences

faxyzabt uvwba; axya; ayza; bt vwb; t uvtg:

a bridge is simply a cut edge, but in the context of planar embeddings, the
bridges are precisely the edges that occur twice on the same discrete face   as op-
posed to once on each of two faces. dongles are trees made of bridges; we only
use dongles in illustrations, so there   s no need to de   ne them more precisely.

13.2.3 does it work?
yes! in general, a graph is planar because it has a planar drawing according to
de   nition 13.2.1 if and only if each of its connected components has a planar em-
bedding as speci   ed in de   nition 13.2.2. of course we can   t prove this without an
excursion into exactly the kind of continuous math that we   re trying to avoid. but
now that the recursive de   nition of planar graphs is in place, we won   t ever need to
fall back on the continuous stuff. that   s the good news.

the bad news is that de   nition 13.2.2 is a lot more technical than the intuitively
simple notion of a drawing whose edges don   t cross. in many cases it   s easier to

zbtvaxyuw   mcs        2017/6/5     19:42     page 543     #551

13.2. de   nitions of planar graphs

543

figure 13.11 two illustrations of the same embedding.

stick to the idea of planar drawings and give proofs in those terms. for example,
erasing edges from a planar drawing will surely leave a planar drawing. on the
other hand, it   s not so obvious, though of course it is true, that you can delete an
edge from a planar embedding and still get a planar embedding (see problem 13.9).
in the hands of experts, and perhaps in your hands too with a little more expe-
rience, proofs about planar graphs by appeal to drawings can be convincing and
reliable. but given the long history of mistakes in such proofs, it   s safer to work
from the precise de   nition of planar embedding. more generally, it   s also important
to see how the abstract properties of curved drawings in the plane can be modelled
successfully using a discrete data type.

13.2.4 where did the outer face go?
every planar drawing has an immediately-recognizable outer face    it   s the one
that goes to in   nity in all directions. but where is the outer face in a planar embed-
ding?

there isn   t one! that   s because there really isn   t any need to distinguish one face
from another. in fact, a planar embedding could be drawn with any given face on
the outside. an intuitive explanation of this is to think of drawing the embedding
on a sphere instead of the plane. then any face can be made the outside face by
   puncturing    that face of the sphere, stretching the puncture hole to a circle around
the rest of the faces, and    attening the circular drawing onto the plane.

so pictures that show different    outside    boundaries may actually be illustra-
tions of the same planar embedding. for example, the two embeddings shown in
figure 13.11 are really the same   check it: they have the same boundary cycles.

this is what justi   es the    add bridge    case in de   nition 13.2.2: whatever face
is chosen in the embeddings of each of the disjoint planar graphs, we can draw
a bridge between them without needing to cross any other edges in the drawing,
because we can assume the bridge connects two    outer    faces.

struutrs   mcs        2017/6/5     19:42     page 544     #552

544

chapter 13 planar graphs

13.3 euler   s formula

the value of the recursive de   nition is that it provides a powerful technique for
proving properties of planar graphs, namely, structural induction. for example,
we will now use de   nition 13.2.2 and structural induction to establish one of the
most basic properties of a connected planar graph, namely, that the number of ver-
tices and edges completely determines the number of faces in every possible planar
embedding of the graph.

theorem 13.3.1 (euler   s formula). if a connected graph has a planar embedding,
then

v (cid:0) e c f d 2

where v is the number of vertices, e is the number of edges and f is the number of
faces.
for example, in figure 13.5, v d 4, e d 6 and f d 4. sure enough, 4(cid:0) 6c 4 d
2, as euler   s formula claims.

proof. the proof is by structural induction on the de   nition of planar embeddings.
let p .e/ be the proposition that v (cid:0) e c f d 2 for an embedding e.
base case (e is the one-vertex planar embedding): by de   nition, v d 1, e d 0 and
f d 1, and 1 (cid:0) 0 c 1 d 2, so p .e/ indeed holds.
constructor case (split a face): suppose g is a connected graph with a planar
embedding, and suppose a and b are distinct, nonadjacent vertices of g that appear
on some discrete face (cid:13) d a : : : b (cid:1)(cid:1)(cid:1) a of the planar embedding.
then the graph obtained by adding the edge ha   bi to the edges of g has a
planar embedding with one more face and one more edge than g. so the quantity
v (cid:0) e c f will remain the same for both graphs, and since by structural induction
this quantity is 2 for g   s embedding, it   s also 2 for the embedding of g with the
added edge. so p holds for the constructed embedding.
constructor case (add bridge): suppose g and h are connected graphs with pla-
nar embeddings and disjoint sets of vertices. then connecting these two graphs
with a bridge merges the two bridged faces into a single face, and leaves all other
faces unchanged. so the bridge operation yields a planar embedding of a connected

   mcs        2017/6/5     19:42     page 545     #553

13.4. bounding the number of edges in a planar graph

545

graph with vg c vh vertices, eg c eh c 1 edges, and fg c fh (cid:0) 1 faces. since

.vg c vh / (cid:0) .eg c eh c 1/ c .fg c fh (cid:0) 1/
d .vg (cid:0) eg c fg/ c .vh (cid:0) eh c fh / (cid:0) 2
d .2/ c .2/ (cid:0) 2
d 2;

(by structural induction hypothesis)

v (cid:0) e c f remains equal to 2 for the constructed embedding. that is, p .e/ also
holds in this case.

this completes the proof of the constructor cases, and the theorem follows by
(cid:4)

structural induction.

13.4 bounding the number of edges in a planar graph

like euler   s formula, the following lemmas follow by structural induction directly
from de   nition 13.2.2.

lemma 13.4.1. in a planar embedding of a connected graph, each edge occurs
once in each of two different faces, or occurs exactly twice in one face.

lemma 13.4.2. in a planar embedding of a connected graph with at least three
vertices, each face is of length at least three.

combining lemmas 13.4.1 and 13.4.2 with euler   s formula, we can now prove

that planar graphs have a limited number of edges:
theorem 13.4.3. suppose a connected planar graph has v (cid:21) 3 vertices and e
edges. then

e   3v (cid:0) 6:

(13.3)

proof. by de   nition, a connected graph is planar iff it has a planar embedding. so
suppose a connected graph with v vertices and e edges has a planar embedding
with f faces. by lemma 13.4.1, every edge has exactly two occurrences in the
face boundaries. so the sum of the lengths of the face boundaries is exactly 2e.
also by lemma 13.4.2, when v (cid:21) 3, each face boundary is of length at least three,
so this sum is at least 3f . this implies that

3f   2e:

(13.4)

   mcs        2017/6/5     19:42     page 546     #554

546

chapter 13 planar graphs

but f d e (cid:0) v c 2 by euler   s formula, and substituting into (13.4) gives

3.e (cid:0) v c 2/   2e
e (cid:0) 3v c 6   0

e   3v (cid:0) 6

(cid:4)

13.5 returning to k5 and k3;3

finally we have a simple way to answer the quadrapi question at the beginning of
this chapter: the    ve quadrapi can   t all shake hands without crossing. the reason
is that we know the quadrupi question is the same as asking whether a complete
graph k5 is planar, and theorem 13.4.3 has the immediate:
corollary 13.5.1. k5 is not planar.
proof. k5 is connected and has 5 vertices and 10 edges. but since 10 > 3 (cid:1) 5 (cid:0) 6,
(cid:4)
k5 does not satisfy the inequality (13.3) that holds in all planar graphs.

we can also use euler   s formula to show that k3;3 is not planar. the proof is
similar to that of theorem 13.3 except that we use the additional fact that k3;3 is a
bipartite graph.

lemma 13.5.2. in a planar embedding of a connected bipartite graph with at least
3 vertices, each face has length at least 4.

proof. by lemma 13.4.2, every face of a planar embedding of the graph has length
at least 3. but by lemma 12.6.2 and theorem 12.8.3.3, a bipartite graph can   t have
odd length closed walks. since the faces of a planar embedding are closed walks,
there can   t be any faces of length 3 in a bipartite embedding. so every face must
(cid:4)
have length at least 4.
theorem 13.5.3. suppose a connected bipartite graph with v (cid:21) 3 vertices and e
edges is planar. then

e   2v (cid:0) 4:

(13.5)

proof. lemma 13.5.2 implies that all the faces of an embedding of the graph have
length at least 4. now arguing as in the proof of theorem 13.4.3, we    nd that the
sum of the lengths of the face boundaries is exactly 2e and at least 4f . hence,

4f   2e

(13.6)

   mcs        2017/6/5     19:42     page 547     #555

13.6. coloring planar graphs

547

for any embedding of a planar bipartite graph. by euler   s theorem, f d 2(cid:0) v c e.
substituting 2 (cid:0) v c e for f in (13.6), we have

4.2 (cid:0) v c e/   2e;

which simplies to (13.5).

corollary 13.5.4. k3;3 is not planar.

(cid:4)

proof. k3;3 is connected, bipartite and has 6 vertices and 9 edges. but since 9 >
2(cid:1) 6(cid:0) 4, k3;3 does not satisfy the inequality (13.3) that holds in all bipartite planar
(cid:4)
graphs.

13.6 coloring planar graphs

we   ve covered a lot of ground with planar graphs, but not nearly enough to prove
the famous 4-color theorem. but we can get awfully close. indeed, we have done
almost enough work to prove that every planar graph can be colored using only 5
colors.

there are two familiar facts about planarity that we will need.

lemma 13.6.1. any subgraph of a planar graph is planar.

lemma 13.6.2. merging two adjacent vertices of a planar graph leaves another
planar graph.

merging two adjacent vertices, n1 and n2 of a graph means deleting the two
vertices and then replacing them by a new    merged    vertex m adjacent to all the
vertices that were adjacent to either of n1 or n2, as illustrated in figure 13.12.

many authors take lemmas 13.6.1 and 13.6.2 for granted for continuous draw-
ings of planar graphs described by de   nition 13.2.1. with the recursive de   ni-
tion 13.2.2 both lemmas can actually be proved using structural induction (see
problem 13.9).

we need only one more lemma:

lemma 13.6.3. every planar graph has a vertex of degree at most    ve.

proof. assuming to the contrary that every vertex of some planar graph had degree
at least 6, then the sum of the vertex degrees is at least 6v. but the sum of the
vertex degrees equals 2e by the handshake lemma 12.2.1, so we have e (cid:21) 3v
contradicting the fact that e   3v (cid:0) 6 < 3v by theorem 13.4.3.
(cid:4)

   mcs        2017/6/5     19:42     page 548     #556

548

chapter 13 planar graphs

figure 13.12 merging adjacent vertices n1 and n2 into new vertex m.

theorem 13.6.4. every planar graph is    ve-colorable.

proof. the proof will be by strong induction on the number v of vertices, with
induction hypothesis:

every planar graph with v vertices is    ve-colorable.

base cases (v   5): immediate.
inductive case: suppose g is a planar graph with v c 1 vertices. we will describe
a    ve-coloring of g.

first, choose a vertex g of g with degree at most 5; lemma 13.6.3 guarantees

there will be such a vertex.

case 1: (deg.g/ < 5): deleting g from g leaves a graph h that is planar by
lemma 13.6.1, and since h has v vertices, it is    ve-colorable by induction
hypothesis. now de   ne a    ve coloring of g as follows: use the    ve-coloring
of h for all the vertices besides g, and assign one of the    ve colors to g that
is not the same as the color assigned to any of its neighbors. since there are
fewer than 5 neighbors, there will always be such a color available for g.

case 2: (deg.g/ d 5): if the    ve neighbors of g in g were all adjacent to each
other, then these    ve vertices would form a nonplanar subgraph isomorphic
to k5, contradicting lemma 13.6.1 (since k5 is not planar). so there must

n2n1n2n1m!!   mcs        2017/6/5     19:42     page 549     #557

13.7. classifying polyhedra

549

be two neighbors, n1 and n2, of g that are not adjacent. now merge n1 and g
into a new vertex, m. in this new graph, n2 is adjacent to m, and the graph is
planar by lemma 13.6.2. so we can then merge m and n2 into a another new
0, resulting in a new graph g
0 which by lemma 13.6.2 is also planar.
vertex m
0 has v (cid:0) 1 vertices, it is    ve-colorable by the induction hypothesis.
since g
0 for
now de   ne a    ve coloring of g as follows: use the    ve-coloring of g
0 to
0 in g
all the vertices besides g, n1 and n2. next assign the color of m
be the color of the neighbors n1 and n2. since n1 and n2 are not adjacent
in g, this de   nes a proper    ve-coloring of g except for vertex g. but since
these two neighbors of g have the same color, the neighbors of g have been
colored using fewer than    ve colors altogether. so complete the    ve-coloring
of g by assigning one of the    ve colors to g that is not the same as any of
the colors assigned to its neighbors.

13.7 classifying polyhedra

the pythagoreans had two great mathematical secrets, the irrationality of
a geometric construct that we   re about to rediscover!

(cid:4)

p
2 and

a polyhedron is a convex, three-dimensional region bounded by a    nite number
of polygonal faces. if the faces are identical regular polygons and an equal number
of polygons meet at each corner, then the polyhedron is regular. three examples
of regular polyhedra are shown in figure 13.13: the tetrahedron, the cube, and the
octahedron.

we can determine how many more regular polyhedra there are by thinking about
planarity. suppose we took any polyhedron and placed a sphere inside it. then we
could project the polyhedron face boundaries onto the sphere, which would give
an image that was a planar graph embedded on the sphere, with the images of the
corners of the polyhedron corresponding to vertices of the graph. we   ve already
observed that embeddings on a sphere are the same as embeddings on the plane, so
euler   s formula for planar graphs can help guide our search for regular polyhedra.
for example, planar embeddings of the three polyhedra in figure 13.1 are shown

in figure 13.14.

let m be the number of faces that meet at each corner of a polyhedron, and let n
be the number of edges on each face. in the corresponding planar graph, there are
m edges incident to each of the v vertices. by the handshake lemma 12.2.1, we

   mcs        2017/6/5     19:42     page 550     #558

550

chapter 13 planar graphs

(a)

(b)

(c)

figure 13.13 the tetrahedron (a), cube (b), and octahedron (c).

v

(a)

(b)

(c)

figure 13.14 planar embeddings of the tetrahedron (a), cube (b), and octahe-
dron (c).

   mcs        2017/6/5     19:42     page 551     #559

13.7. classifying polyhedra

551

e
6
12
12

polyhedron
n m v
tetrahedron
4
3
cube
4
8
octahedron
3
6
12 30 20 icosahedron
3
20 30 12 dodecahedron
5

f
4
6
8

3
3
4
5
3

figure 13.15 the only possible regular polyhedra.

know:

mv d 2e:

also, each face is bounded by n edges. since each edge is on the boundary of two
faces, we have:

nf d 2e

solving for v and f in these equations and then substituting into euler   s formula
gives:

2e

m

(cid:0) e c 2e

d 2

n

which simpli   es to

c 1
n

d 1
e

c 1
2

1

m

(13.7)

equation 13.7 places strong restrictions on the structure of a polyhedron. every
nondegenerate polygon has at least 3 sides, so n (cid:21) 3. and at least 3 polygons
must meet to form a corner, so m (cid:21) 3. on the other hand, if either n or m were
6 or more, then the left side of the equation could be at most 1=3 c 1=6 d 1=2,
which is less than the right side. checking the    nitely-many cases that remain turns
up only    ve solutions, as shown in figure 13.15. for each valid combination of n
and m, we can compute the associated number of vertices v, edges e, and faces f .
and polyhedra with these properties do actually exist. the largest polyhedron, the
dodecahedron, was the other great mathematical secret of the pythagorean sect.

the 5 polyhedra in figure 13.15 are the only possible regular polyhedra. so if
you want to put more than 20 geocentric satellites in orbit so that they uniformly
blanket the globe   tough luck!

   mcs        2017/6/5     19:42     page 552     #560

552

chapter 13 planar graphs

13.8 another characterization for planar graphs

we did not pick k5 and k3;3 as examples because of their application to dog
houses or quadrapi shaking hands. we really picked them because they provide
another, famous, discrete characterizarion of planar graphs:

theorem 13.8.1 (kuratowski). a graph is not planar if and only if it contains k5
or k3;3 as a minor.

de   nition 13.8.2. a minor of a graph g is a graph that can be obtained by repeat-
edly4 deleting vertices, deleting edges, and merging adjacent vertices of g.

for example, figure 13.16 illustrates why c3 is a minor of the graph in fig-
ure 13.16(a). in fact c3 is a minor of a connected graph g if and only if g is not a
tree.

the known proofs of kuratowski   s theorem 13.8.1 are a little too long to include

in an introductory text, so we won   t give one.

problems for section 13.2

practice problems
problem 13.1.
what are the discrete faces of the following two graphs?

write each cycle as a sequence of letters without spaces, starting with the alpha-
betically earliest letter in the clockwise direction, for example    adbfa.    separate
the sequences with spaces.
(a)

(b)

4the three operations can each be performed any number of times in any order.

befgcda   mcs        2017/6/5     19:42     page 553     #561

13.8. another characterization for planar graphs

553

figure 13.16 one method by which the graph in (a) can be reduced to c3 (f),
thereby showing that c3 is a minor of the graph. the steps are: merging the nodes
incident to e1 (b), deleting v1 and all edges incident to it (c), deleting v2 (d), delet-
ing e2, and deleting v3 (f).

(a)(b)(c)(d)(e)(f)e1v1v2e2v3   mcs        2017/6/5     19:42     page 554     #562

554

chapter 13 planar graphs

problems for section 13.8

exam problems
problem 13.2.

(a) describe an isomorphism between graphs g1 and g2, and another isomor-
phism between g2 and g3.

(b) why does part .a/ imply that there is an isomorphism between graphs g1 and
g3?
let g and h be planar graphs. an embedding eg of g is isomorphic to an em-
bedding eh of h iff there is an isomorphism from g to h that also maps each
face of eg to a face of eh .

(c) one of the embeddings pictured above is not isomorphic to either of the others.
which one? brie   y explain why.

(d) explain why all embeddings of two isomorphic planar graphs must have the

sturvxywbcdeaghifjklmnog1g2g3   mcs        2017/6/5     19:42     page 555     #563

13.8. another characterization for planar graphs

555

same number of faces.

problem 13.3. (a) give an example of a planar graph with two planar embeddings,
where the    rst embedding has a face whose length is not equal to the length of any
face in the secoind embedding. draw the two embeddings to demonstrate this.
(b) de   ne the length of a planar embedding e to be the sum of the lengths of
the faces of e. prove that all embeddings of the same planar graph have the same
length.

problem 13.4.
de   nition 13.2.2 of planar graph embeddings applied only to connected planar
graphs. the de   nition can be extended to planar graphs that are not necessarily
connected by adding the following additional constructor case to the de   nition:

(cid:15) constructor case: (collect disjoint graphs) suppose e1 and e2 are planar
embeddings with no vertices in common. then e1 [ e2 is a planar embed-
ding.

euler   s planar graph theorem now generalizes to unconnected graphs as fol-
lows: if a planar embedding e has v vertices, e edges, f faces and c connected
components, then

(13.8)
this can be proved by structural induction on the de   nition of planar embedding.
(a) state and prove the base case of the structural induction.

v (cid:0) e c f (cid:0) 2c d 0:

(b) let vi ; ei ; fi ; and ci be the number of vertices, edges, faces, and connected
components in embedding ei and let v; e; f; c be the numbers for the embedding
from the (collect disjoint graphs) constructor case. express v; e; f; c in terms of
vi ; ei ; fi ; ci.

(c) prove the (collect disjoint graphs) case of the structural induction.

problem 13.5. (a) a simple graph has 8 vertices and 24 edges. what is the average
degree per vertex?

(b) a connected planar simple graph has 5 more edges than it has vertices. how
many faces does it have?

   mcs        2017/6/5     19:42     page 556     #564

556

chapter 13 planar graphs

(c) a connected simple graph has one more vertex than it has edges. explain why
it is a planar graph.

(d) how many faces does a planar graph from part c have?

(e) how many distinct isomorphisms are there between the graph given in fig-
ure 13.17 and itself? (include the identity isomorphism.)

figure 13.17

class problems
x

problem 13.6.
figure 13.18 shows four different pictures of planar graphs.
(a) for each picture, describe its discrete faces (closed walks that de   ne the region
borders).

(b) which of the pictured graphs are isomorphic? which pictures represent the
same planar embedding?   that is, they have the same discrete faces.

(c) describe a way to construct the embedding in figure 4 according to the recur-
sive de   nition 13.2.2 of planar embedding. for each application of a constructor
rule, be sure to indicate the faces (cycles) to which the rule was applied and the
cycles which result from the application.

problem 13.7.
prove the following assertions by structural induction on the de   nition of planar
embedding.
(a) in a planar embedding of a graph, each edge occurs exactly twice in the faces
of the embedding.

abcdef   mcs        2017/6/5     19:42     page 557     #565

13.8. another characterization for planar graphs

557

figure 13.18

(b) in a planar embedding of a connected graph with at least three vertices, each
face is of length at least three.

homework problems
problem 13.8.
a simple graph is triangle-free when it has no cycle of length three.
(a) prove for any connected triangle-free planar graph with v > 2 vertices and e
edges,

e   2v (cid:0) 4:

(13.9)

(b) show that any connected triangle-free planar graph has at least one vertex of
degree three or less.

abdceefigure 1figure 2figure 3figure 4abdcabdcabdc   mcs        2017/6/5     19:42     page 558     #566

558

chapter 13 planar graphs

(c) prove that any connected triangle-free planar graph is 4-colorable.

problem 13.9. (a) prove
lemma (switch edges). suppose that, starting from some embeddings of planar
graphs with disjoint sets of vertices, it is possible by two successive applications of
constructor operations to add edges e and then f to obtain a planar embedding f.
then starting from the same embeddings, it is also possible to obtain f by adding
f and then e with two successive applications of constructor operations.
hint: there are four cases to analyze, depending on which two constructor opera-
tions are applied to add e and then f . structural induction is not needed.

(b) prove
corollary (permute edges). suppose that, starting from some embeddings of pla-
nar graphs with disjoint sets of vertices, it is possible to add a sequence of edges
e0; e1; : : : ; en by successive applications of constructor operations to obtain a pla-
nar embedding f. then starting from the same embeddings, it is also possible
to obtain f by applications of constructor operations that successively add any
permutation5 of the edges e0; e1; : : : ; en.
hint: by induction on the number of switches of adjacent elements needed to con-
vert the sequence 0,1,. . . ,n into a permutation (cid:25).0/; (cid:25).1/; : : : ; (cid:25).n/.

(c) prove
corollary (delete edge). deleting an edge from a planar graph leaves a planar
graph.

(d) conclude that any subgraph of a planar graph is planar.

5if (cid:25) w f0; 1; : : : ; ng ! f0; 1; : : : ; ng is a bijection, then the sequence e(cid:25).0/; e(cid:25).1/; : : : ; e(cid:25).n/ is

called a permutation of the sequence e0; e1; : : : ; en.

   mcs        2017/6/5     19:42     page 559     #567

iii counting

   mcs        2017/6/5     19:42     page 560     #568

   mcs        2017/6/5     19:42     page 561     #569

introduction

counting seems easy enough: 1, 2, 3, 4, etc. this direct approach works well
for counting simple things   like your toes   and may be the only approach for ex-
tremely complicated things with no identi   able structure. however, subtler meth-
ods can help you count many things in the vast middle ground, such as:

(cid:15) the number of different ways to select a dozen doughnuts when there are
   ve varieties available.
(cid:15) the number of 16-bit numbers with exactly 4 ones.

perhaps surprisingly, but certainly not coincidentally, these two numbers are the
same: 1820.

counting is useful in computer science for several reasons:
(cid:15) determining the time and storage required to solve a computational problem   
a central objective in computer science   often comes down to solving a
counting problem.
(cid:15) password and encryption security counts on having a very large set of possi-
ble passwords and encryption keys.
(cid:15) counting is the basis of id203 theory, which plays a central role in all
sciences, including computer science.

products such aspn

we begin our study of counting in chapter 14 with a collection of rules and
methods for    nding closed-form expressions for commonly-occurring sums and
id1 i. we also introduce asymptotic notations
such as (cid:24), o and     that are commonly used in computer science to express how a
quantity such as the running time of a program grows with the size of the input.

id0 xi anid25

   mcs        2017/6/5     19:42     page 562     #570

562

part iii counting

chapter 15 describes the most basic rules for determining the cardinality of a set.
these rules are actually theorems, but our focus here will be less on their proofs
than on teaching their use in simple counting as a practical skill, like integration.

but counting can be tricky, and people make counting mistakes all the time,
so a crucial part of counting skill is being able to verify a counting argument.
sometimes this can be done simply by    nding an alternative way to count and
then comparing answers   they better agree. but most elementary counting argu-
ments reduce to    nding a bijection between objects to be counted and easy-to-count
sequences. the chapter shows how explicitly de   ning these bijections   and veri-
fying that they are bijections   is another useful way to verify counting arguments.
the material in chapter 15 is simple yet powerful, and it provides a great tool set
for use in your future career.

finally, chapter 16 introduces generating functions which allow many counting

problems to be solved by simple algebraic formula simpli   cation.

   mcs        2017/6/5     19:42     page 563     #571

14

sums and asymptotics
sums and products arise regularly in the analysis of algorithms,    nancial appli-
cations, physical problems, and probabilistic systems. for example, according to
theorem 2.2.1,

1 c 2 c 3 c (cid:1)(cid:1)(cid:1) c n d n.n c 1/

2

:

(14.1)

of course, the left-hand sum could be expressed concisely as a subscripted summa-
tion

nx

id1

i

but the right-hand expression n.n c 1/=2 is not only concise but also easier to
evaluate. furthermore, it more clearly reveals properties such as the growth rate
of the sum. expressions like n.n c 1/=2 that do not make use of subscripted
summations or products   or those handy but sometimes troublesome sequences
of three dots   are called closed forms.

another example is the closed form for a geometric sum

1 c x c x2 c x3 c (cid:1)(cid:1)(cid:1) c xn d 1 (cid:0) xnc1
1 (cid:0) x

(14.2)

given in problem 5.4. the sum as described on the left-hand side of (14.2) involves
n additions and 1 c 2 c (cid:1)(cid:1)(cid:1) c .n (cid:0) 1/ d .n (cid:0) 1/n=2 multiplications, but its closed
form on the right-hand side can be evaluated using fast exponentiation with at most
2 log n multiplications, a division, and a couple of subtractions. also, the closed
form makes the growth and limiting behavior of the sum much more apparent.

equations (14.1) and (14.2) were easy to verify by induction, but, as is often the
case, the proofs by induction gave no hint about how these formulas were found in
the    rst place. finding them is part math and part art, which we   ll start examining
in this chapter.

our    rst motivating example will be the value of a    nancial instrument known as
an annuity. this value will be a large and nasty-looking sum. we will then describe
several methods for    nding closed forms for several sorts of sums, including those
for annuities. in some cases, a closed form for a sum may not exist, and so we
will provide a general method for    nding closed forms for good upper and lower
bounds on the sum.

the methods we develop for sums will also work for products, since any product
can be converted into a sum by taking its logarithm. for instance, later in the

   mcs        2017/6/5     19:42     page 564     #572

564

chapter 14 sums and asymptotics

chapter we will use this approach to    nd a good closed-form approximation to the
factorial function

n   wwd 1 (cid:1) 2 (cid:1) 3(cid:1)(cid:1)(cid:1) n:

we conclude the chapter with a discussion of asymptotic notation, especially
   big oh    notation. asymptotic notation is often used to bound the error terms
when there is no exact closed form expression for a sum or product. it also provides
a convenient way to express the growth rate or order of magnitude of a sum or
product.

14.1 the value of an annuity

would you prefer a million dollars today or $50,000 a year for the rest of your life?
on the one hand, instant grati   cation is nice. on the other hand, the total dollars
received at $50k per year is much larger if you live long enough.

formally, this is a question about the value of an annuity. an annuity is a    nan-
cial instrument that pays out a    xed amount of money at the beginning of every year
for some speci   ed number of years. in particular, an n-year, m-payment annuity
pays m dollars at the start of each year for n years. in some cases, n is    nite, but
not always. examples include lottery payouts, student loans, and home mortgages.
there are even    rms on wall street that specialize in trading annuities.1

a key question is,    what is an annuity worth?    for example, lotteries often pay
out jackpots over many years. intuitively, $50,000 a year for 20 years ought to be
worth less than a million dollars right now. if you had all the cash right away, you
could invest it and begin collecting interest. but what if the choice were between
$50,000 a year for 20 years and a half million dollars today? suddenly, it   s not
clear which option is better.

14.1.1 the future value of money
in order to answer such questions, we need to know what a dollar paid out in the
future is worth today. to model this, let   s assume that money can be invested at a
   xed annual interest rate p. we   ll assume an 8% rate2 for the rest of the discussion,
so p d 0:08.

1such trading ultimately led to the subprime mortgage disaster in 2008   2009. we   ll talk more

about that in a later chapter.

2u.s. interest rates have dropped steadily for several years, and ordinary bank deposits now earn
around 1.0%. but just a few years ago the rate was 8%; this rate makes some of our examples a little
more dramatic. the rate has been as high as 17% in the past thirty years.

   mcs        2017/6/5     19:42     page 565     #573

14.1. the value of an annuity

565

here is why the interest rate p matters. ten dollars invested today at interest rate
p will become .1c p/(cid:1) 10 d 10:80 dollars in a year, .1c p/2 (cid:1) 10 (cid:25) 11:66 dollars
in two years, and so forth. looked at another way, ten dollars paid out a year from
now is only really worth 1=.1c p/(cid:1) 10 (cid:25) 9:26 dollars today, because if we had the
$9.26 today, we could invest it and would have $10.00 in a year anyway. therefore,
p determines the value of money paid out in the future.
so for an n-year, m-payment annuity, the    rst payment of m dollars is truly worth
m dollars. but the second payment a year later is worth only m=.1 c p/ dollars.
similarly, the third payment is worth m=.1 c p/2, and the n-th payment is worth
only m=.1 c p/n(cid:0)1. the total value v of the annuity is equal to the sum of the
payment values. this gives:

id1

v d nx
d m (cid:1) n(cid:0)1x
d m (cid:1) n(cid:0)1x

jd0

jd0

.1 c p/i(cid:0)1

m

  1

1 c p

 j

(substitute j d i (cid:0) 1)

xj

(substitute x d 1=.1 c p/):

(14.3)

the goal of the preceding substitutions was to get the summation into the form
of a simple geometric sum. this leads us to an explanation of a way you could have
discovered the closed form (14.2) in the    rst place using the perturbation method.

14.1.2 the perturbation method
given a sum that has a nice structure, it is often useful to    perturb    the sum so that
we can somehow combine the sum with the perturbation to get something much
simpler. for example, suppose

s d 1 c x c x2 c (cid:1)(cid:1)(cid:1) c xn:

an example of a perturbation would be

xs d x c x2 c (cid:1)(cid:1)(cid:1) c xnc1:

the difference between s and xs is not so great, and so if we were to subtract xs
from s, there would be massive cancellation:

s d 1 c x c x2 c x3 c (cid:1)(cid:1)(cid:1) c xn

(cid:0)xs d (cid:0) x (cid:0) x2 (cid:0) x3 (cid:0) (cid:1)(cid:1)(cid:1) (cid:0) xn (cid:0) xnc1:

   mcs        2017/6/5     19:42     page 566     #574

566

chapter 14 sums and asymptotics

the result of the subtraction is

s (cid:0) xs d 1 (cid:0) xnc1:

solving for s gives the desired closed-form expression in equation 14.2, namely,

s d 1 (cid:0) xnc1
1 (cid:0) x

:

we   ll see more examples of this method when we introduce generating functions
in chapter 16.

14.1.3 a closed form for the annuity value
using equation 14.2, we can derive a simple formula for v , the value of an annuity
that pays m dollars at the start of each year for n years.

 

  1 (cid:0) xn
 

v d m

d m

1 (cid:0) x
1 c p (cid:0) .1=.1 c p//n(cid:0)1

p

!

(by equations 14.3 and 14.2)

(14.4)

(substituting x d 1=.1 c p/):

(14.5)

equation 14.5 is much easier to use than a summation with dozens of terms. for
example, what is the real value of a winning lottery ticket that pays $50,000 per
year for 20 years? plugging in m d $50,000, n d 20 and p d 0:08 gives
v (cid:25) $530,180. so because payments are deferred, the million dollar lottery is
really only worth about a half million dollars! this is a good trick for the lottery
advertisers.

in   nite geometric series

14.1.4
we began this chapter by asking whether you would prefer a million dollars today
or $50,000 a year for the rest of your life. of course, this depends on how long
you live, so optimistically assume that the second option is to receive $50,000 a
year forever. this sounds like in   nite money! but we can compute the value of an
annuity with an in   nite number of payments by taking the limit of our geometric
sum in equation 14.2 as n tends to in   nity.
theorem 14.1.1. if jxj < 1, then

1x

id0

xi d 1
1 (cid:0) x

:

   mcs        2017/6/5     19:42     page 567     #575

14.1. the value of an annuity

567

proof.

1x

id0

nx
id0
1 (cid:0) xnc1
1 (cid:0) x

xi

xi wwd lim
n!1
d lim
n!1
d 1
1 (cid:0) x

:

(by equation 14.2)

the    nal line follows from the fact that limn!1 xnc1 d 0 when jxj < 1.
(cid:4)
in our annuity problem x d 1=.1 c p/ < 1, so theorem 14.1.1 applies, and we
get

1x

v d m (cid:1)

xj

jd0
d m (cid:1)
1
1 (cid:0) x
d m (cid:1) 1 c p

p

(by equation 14.3)

(by theorem 14.1.1)
.x d 1=.1 c p//:

plugging in m d $50,000 and p d 0:08, we see that the value v is only $675,000.
it seems amazing that a million dollars today is worth much more than $50,000
paid every year for eternity! but on closer inspection, if we had a million dollars
today in the bank earning 8% interest, we could take out and spend $80,000 a year,
forever. so as it turns out, this answer really isn   t so amazing after all.

14.1.5 examples
equation 14.2 and theorem 14.1.1 are incredibly useful in computer science.

here are some other common sums that can be put into closed form using equa-

   mcs        2017/6/5     19:42     page 568     #576

568

chapter 14 sums and asymptotics

tion 14.2 and theorem 14.1.1:

0:99999(cid:1)(cid:1)(cid:1) d 0:9

1

1

2

  1

 i d

10

id0

id0

1x

  1

1 c 1=2 c 1=4 c (cid:1)(cid:1)(cid:1) d

 
!
1 (cid:0) .1=2/
d 0:9

1x
 
 i d 0:9
 i d
 (cid:0)1
1x
1 c 2 c 4 c (cid:1)(cid:1)(cid:1) c 2n(cid:0)1 d n(cid:0)1x
2i d 1 (cid:0) 2n
1 (cid:0) 2
1 c 3 c 9 c (cid:1)(cid:1)(cid:1) c 3n(cid:0)1 d n(cid:0)1x
id0
3i d 1 (cid:0) 3n
d 3n (cid:0) 1
1 (cid:0) 3

1 (cid:0) 1=2 c 1=4 (cid:0) (cid:1)(cid:1)(cid:1) d

1 (cid:0) .(cid:0)1=2/

1 (cid:0) 1=10

id0

9

2

1

2

id0

d 2
3

d 2n (cid:0) 1

d 2
!

10

(14.6)

d 1

(14.7)

(14.8)

(14.9)

(14.10)

if the terms in a geometric sum grow smaller, as in equation 14.6, then the sum is
said to be geometrically decreasing. if the terms in a geometric sum grow progres-
sively larger, as in equations 14.9 and 14.10, then the sum is said to be geometrically
increasing. in either case, the sum is usually approximately equal to the term in the
sum with the greatest absolute value. for example, in equations 14.6 and 14.8, the
largest term is equal to 1 and the sums are 2 and 2/3, both relatively close to 1. in
equation 14.9, the sum is about twice the largest term. in equation 14.10, the largest
term is 3n(cid:0)1 and the sum is .3n (cid:0) 1/=2, which is only about a factor of 1:5 greater.
you can see why this rule of thumb works by looking carefully at equation 14.2
and theorem 14.1.1.

14.1.6 variations of geometric sums
we now know all about geometric sums   if you have one, life is easy. but in
practice one often encounters sums that cannot be transformed by simple variable

substitutions to the formp xi.

a non-obvious but useful way to obtain new summation formulas from old ones
is by differentiating or integrating with respect to x. as an example, consider the
following sum:

ixi d x c 2x2 c 3x3 c (cid:1)(cid:1)(cid:1) c .n (cid:0) 1/xn(cid:0)1

n(cid:0)1x

id1

this is not a geometric sum. the ratio between successive terms is not    xed, and
so our formula for the sum of a geometric sum cannot be directly applied. but

   mcs        2017/6/5     19:42     page 569     #577

14.1. the value of an annuity

differentiating equation 14.2 leads to:

!

 

  1 (cid:0) xn

1 (cid:0) x

:

d d
dx

569

(14.11)

d

dx

xi

 n(cid:0)1x
n(cid:0)1x

id0

d

id0

dx

.xi / d n(cid:0)1x

id0

ixi(cid:0)1:

the left-hand side of equation 14.11 is simply

the right-hand side of equation 14.11 is
(cid:0)nxn(cid:0)1.1 (cid:0) x/ (cid:0) .(cid:0)1/.1 (cid:0) xn/

.1 (cid:0) x/2

d (cid:0)nxn(cid:0)1 c nxn c 1 (cid:0) xn
d 1 (cid:0) nxn(cid:0)1 c .n (cid:0) 1/xn

.1 (cid:0) x/2
.1 (cid:0) x/2

:

hence, equation 14.11 means that

ixi(cid:0)1 d 1 (cid:0) nxn(cid:0)1 c .n (cid:0) 1/xn

.1 (cid:0) x/2

:

incidentally, problem 14.2 shows how the perturbation method could also be ap-
plied to derive this formula.

in this case, we now have a formula for a sum of the formp ixi(cid:0)1, but we want a
formula for the seriesp ixi. the solution is simple: multiply by x. this gives:

often, differentiating or integrating messes up the exponent of x in every term.

ixi d x (cid:0) nxn c .n (cid:0) 1/xnc1

.1 (cid:0) x/2

(14.12)

and we have the desired closed-form expression for our sum. it seems a little com-
plicated, but it   s easier to work with than the sum.
notice that if jxj < 1, then this series converges to a    nite value even if there
are in   nitely many terms. taking the limit of equation 14.12 as n tends to in   nity
gives the following theorem:
theorem 14.1.2. if jxj < 1, then

1x

id1

ixi d

x

.1 (cid:0) x/2 :

(14.13)

n(cid:0)1x

id0

n(cid:0)1x

id1

   mcs        2017/6/5     19:42     page 570     #578

570

chapter 14 sums and asymptotics

as a consequence, suppose that there is an annuity that pays i m dollars at the
end of each year i, forever. for example, if m d $50,000, then the payouts are
$50,000 and then $100,000 and then $150,000 and so on. it is hard to believe that
the value of this annuity is    nite! but we can use theorem 14.1.2 to compute the
value:

i m

1x
v d
.1 c p/i
id1
d m (cid:1) 1=.1 c p/
.1 (cid:0) 1
1cp /2
d m (cid:1) 1 c p
p2 :

the second line follows by an application of theorem 14.1.2. the third line is
obtained by multiplying the numerator and denominator by .1 c p/2.
for example, if m d $50,000, and p d 0:08 as usual, then the value of the
annuity is v d $8,437,500. even though the payments increase every year, the in-
crease is only additive with time; by contrast, dollars paid out in the future decrease
in value exponentially with time. the geometric decrease swamps out the additive
increase. payments in the distant future are almost worthless, so the value of the
annuity is    nite.

the important thing to remember is the trick of taking the derivative (or integral)
of a summation formula. of course, this technique requires one to compute nasty
derivatives correctly, but this is at least theoretically possible!

14.2 sums of powers

in chapter 5, we veri   ed the formula (14.1), but the source of this formula is still
a mystery. sure, we can prove that it   s true by using well ordering or induction,
but where did the expression on the right come from in the    rst place? even more
inexplicable is the closed form expression for the sum of consecutive squares:

nx

id1

i 2 d .2n c 1/.n c 1/n

6

:

(14.14)

it turns out that there is a way to derive these expressions, but before we explain
it, we thought it would be fun   ok, our de   nition of    fun    may be different than

   mcs        2017/6/5     19:42     page 571     #579

14.2. sums of powers

571

yours   to show you how gauss is supposed to have proved equation 14.1 when he
was a young boy.

gauss   s idea is related to the perturbation method we used in section 14.1.2. let

s d nx

i:

id1

then we can write the sum in two orders:

s d 1 c 2 c : : : c .n (cid:0) 1/ c n;
s d n c .n (cid:0) 1/ c : : : c 2 c 1:

adding these two equations gives

2s d .n c 1/ c .n c 1/ c (cid:1)(cid:1)(cid:1) c .n c 1/ c .n c 1/

d n.n c 1/:

hence,

s d n.n c 1/

2

:

not bad for a young child   gauss showed some potential. . . .

unfortunately, the same trick does not work for summing consecutive squares.
however, we can observe that the result might be a third-degree polynomial in n,
since the sum contains n terms that average out to a value that grows quadratically
in n. so we might guess that

nx

id1

i 2 d an3 c bn2 c cn c d:

if our guess is correct, then we can determine the parameters a, b, c and d by
plugging in a few values for n. each such value gives a linear equation in a, b,
c and d. if we plug in enough values, we may get a linear system with a unique
solution. applying this method to our example gives:

n d 0
n d 1
n d 2
n d 3

implies 0 d d
implies 1 d a c b c c c d
implies 5 d 8a c 4b c 2c c d
implies 14 d 27a c 9b c 3c c d:

solving this system gives the solution a d 1=3, b d 1=2, c d 1=6, d d 0.
therefore, if our initial guess at the form of the solution was correct, then the
summation is equal to n3=3 c n2=2 c n=6, which matches equation 14.14.

   mcs        2017/6/5     19:42     page 572     #580

572

chapter 14 sums and asymptotics

the point is that if the desired formula turns out to be a polynomial, then once
you get an estimate of the degree of the polynomial, all the coef   cients of the
polynomial can be found automatically.

be careful! this method lets you discover formulas, but it doesn   t guarantee
they are right! after obtaining a formula by this method, it   s important to go back
and prove it by induction or some other method. if the initial guess at the solution
was not of the right form, then the resulting formula will be completely wrong! a
later chapter will describe a method based on generating functions that does not
require any guessing at all.

14.3 approximating sums

unfortunately, it is not always possible to    nd a closed-form expression for a sum.
for example, no closed form is known for

s d nx

id1

p

i :

in such cases, we need to resort to approximations for s if we want to have a
closed form. the good news is that there is a general method to    nd closed-form
upper and lower bounds that works well for many sums. even better, the method
is simple and easy to remember. it works by replacing the sum by an integral and
then adding either the    rst or last term in the sum.
de   nition 14.3.1. a function f w rc ! rc is strictly increasing when

x < y implies f .x/ < f .y/;

and it is weakly increasing3 when

x < y implies f .x/   f .y/:

similarly, f is strictly decreasing when

x < y implies f .x/ > f .y/;

and it is weakly decreasing4 when

x < y implies f .x/ (cid:21) f .y/:

3weakly increasing functions are usually called nondecreasing functions. we will avoid this
terminology to prevent confusion between being a nondecreasing function and the much weaker
property of not being a decreasing function.

4weakly decreasing functions are usually called nonincreasing.

   mcs        2017/6/5     19:42     page 573     #581

14.3. approximating sums

573

pn

id1 f .i /.

figure 14.1 the area of the ith rectangle is f .i /. the shaded region has area

p

x are strictly increasing functions, while maxfx; 2g and
(cid:0)x are strictly de-

for example, 2x and
dxe are weakly increasing functions. the functions 1=x and 2
creasing, while minf1=x; 1=2g and b1=xc are weakly decreasing.
theorem 14.3.2. let f w rc ! rc be a weakly increasing function. de   ne

f .i /

(14.15)

s wwd nx
i wwdz n

id1

and

then

f .x/ dx:

1

i c f .1/   s   i c f .n/:

(14.16)

similarly, if f is weakly decreasing, then

i c f .n/   s   i c f .1/:

proof. suppose f w rc ! rc is weakly increasing. the value of the sum s
in (14.15) is the sum of the areas of n unit-width rectangles of heights f .1/; f .2/; : : : ; f .n/.
this area of these rectangles is shown shaded in figure 14.1.

the value of

i dz n

f .x/ dx

is the shaded area under the curve of f .x/ from 1 to n shown in figure 14.2.

1

0123                      n   2n   1nf.n/f.n   1/f.3/f.2/f.1/   mcs        2017/6/5     19:42     page 574     #582

574

chapter 14 sums and asymptotics

is i dr n

1 f .x/ dx.

figure 14.2 the shaded area under the curve of f .x/ from 1 to n (shown in bold)

comparing the shaded regions in figures 14.1 and 14.2 shows that s is at least

i plus the area of the leftmost rectangle. hence,
s (cid:21) i c f .1/

(14.17)

this is the lower bound for s given in (14.16).

to derive the upper bound for s given in (14.16), we shift the curve of f .x/

from 1 to n one unit to the left as shown in figure 14.3.

comparing the shaded regions in figures 14.1 and 14.3 shows that s is at most

i plus the area of the rightmost rectangle. that is,
s   i c f .n/;

which is the upper bound for s given in (14.16).

the very similar argument for the weakly decreasing case is left to problem 14.10.
(cid:4)

theorem 14.3.2 provides good bounds for most sums. at worst, the bounds will
be off by the largest term in the sum. for example, we can use theorem 14.3.2 to
bound the sum

s d nx

id1

p

i

as follows.

0123           n   2n   1n           f.n/f.x/f.n   1/f.3/f.2/f.1/   mcs        2017/6/5     19:42     page 575     #583

14.3. approximating sums

575

figure 14.3 this curve is the same as the curve in figure 14.2 shifted left by 1.

we begin by computing

i dz n

1

p

x dx

          n

1

d x3=2
3=2

.n3=2 (cid:0) 1/:

d 2
3

we then apply theorem 14.3.2 to conclude that
.n3=2 (cid:0) 1/ c 1   s   2

2

3

and thus that

n3=2 c 1

3

2

3

  s   2

3

3

.n3=2 (cid:0) 1/ c p
n3=2 c p

n (cid:0) 2

:

n

3

in other words, the sum is very close to 2
thing can be    very close to    something else at the end of this chapter.

3 n3=2. we   ll de   ne several ways that one

as a    rst application of theorem 14.3.2, we explain in the next section how it

helps in resolving a classic paradox in structural engineering.

0123           n   2n   1n           f.n/f.n   1/f.xc1/f.3/f.2/f.1/   mcs        2017/6/5     19:42     page 576     #584

576

chapter 14 sums and asymptotics

14.4 hanging out over the edge

suppose you have a bunch of books and you want to stack them up, one on top
of another in some off-center way, so the top book sticks out past books below it
without falling over. if you moved the stack to the edge of a table, how far past
the edge of the table do you think you could get the top book to go? could the top
book stick out completely beyond the edge of table? you   re not supposed to use
glue or any other support to hold the stack in place.

most people   s    rst response to the book stacking problem   sometimes also
their second and third responses   is    no, the top book will never get completely
past the edge of the table.    but in fact, you can get the top book to stick out as far
as you want: one booklength, two booklengths, any number of booklengths!

14.4.1 formalizing the problem
we   ll approach this problem recursively. how far past the end of the table can we
get one book to stick out? it won   t tip as long as its center of mass is over the table,
so we can get it to stick out half its length, as shown in figure 14.4.

figure 14.4 one book can overhang half a book length.

now suppose we have a stack of books that will not tip over if the bottom book
rests on the table   call that a stable stack. let   s de   ne the overhang of a stable
stack to be the horizontal distance from the center of mass of the stack to the furthest
edge of the top book. so the overhang is purely a property of the stack, regardless
of its placement on the table. if we place the center of mass of the stable stack at
the edge of the table as in figure 14.5, the overhang is how far we can get the top

table12center of massof book   mcs        2017/6/5     19:42     page 577     #585

14.4. hanging out over the edge

577

figure 14.5 overhanging the edge of the table.

book in the stack to stick out past the edge.
in general, a stack of n books will be stable if and only if the center of mass of
the top i books sits over the .i c 1/st book for i d 1, 2, . . . , n (cid:0) 1.
so we want a formula for the maximum possible overhang bn achievable with a

stable stack of n books.

we   ve already observed that the overhang of one book is 1/2 a book length. that

is,

now suppose we have a stable stack of n c 1 books with maximum overhang.
if the overhang of the n books on top of the bottom book was not maximum, we
could get a book to stick out further by replacing the top stack with a stack of n
books with larger overhang. so the maximum overhang bnc1 of a stack of n c 1
books is obtained by placing a maximum overhang stable stack of n books on top
of the bottom book. and we get the biggest overhang for the stack of n c 1 books
by placing the center of mass of the n books right over the edge of the bottom book
as in figure 14.6.
so we know where to place the n c 1st book to get maximum overhang. in fact,
the reasoning above actually shows that this way of stacking n c 1 books is the
unique way to build a stable stack where the top book extends as far as possible.
all we have to do is calculate what this extension is.

b1 d 1

:

2

tablecenter of massof the whole stackoverhang   mcs        2017/6/5     19:42     page 578     #586

578

chapter 14 sums and asymptotics

figure 14.6 additional overhang with n c 1 books.

the simplest way to do that is to let the center of mass of the top n books be the
origin. that way the horizontal coordinate of the center of mass of the whole stack
of n c 1 books will equal the increase in the overhang. but now the center of mass
of the bottom book has horizontal coordinate 1=2, so the horizontal coordinate of
center of mass of the whole stack of n c 1 books is

0 (cid:1) n c .1=2/ (cid:1) 1

n c 1

d

1

2.n c 1/

:

in other words,

as shown in figure 14.6.

bnc1 d bn c

1

2.n c 1/

;

(14.18)

expanding equation (14.18), we have
bnc1 d bn(cid:0)1 c 1
d b1 c 1
nc1x
2 (cid:1) 2

2n

1

d 1
2

:

id1

i

1

c
2.n c 1/
c (cid:1)(cid:1)(cid:1) c 1
c
2n

1

2.n c 1/

(14.19)

so our next task is to examine the behavior of bn as n grows.

table}2(n+1)1ntopbooks}center of massof topbooksncenter of massof all+1 booksn   mcs        2017/6/5     19:42     page 579     #587

14.4. hanging out over the edge

579

14.4.2 harmonic numbers
de   nition 14.4.1. the nth harmonic number hn is

hn wwd nx

id1

1

i

:

so (14.19) means that

bn d hn

:

2

c 1

the    rst few harmonic numbers are easy to compute. for example, h4 d 1 c
c 1
12 > 2. the fact that h4 is greater than 2 has special signi   cance:
1
2
it implies that the total extension of a 4-book stack is greater than one full book!
this is the situation shown in figure 14.7.

d 25

3

4

figure 14.7 stack of four books with maximum overhang.

there is good news and bad news about harmonic numbers. the bad news is
that there is no known closed-form expression for the harmonic numbers. the
good news is that we can use theorem 14.3.2 to get close upper and lower bounds

on hn. in particular, sincez n

theorem 14.3.2 means that

1

      n

1

dx d ln.x/

1

x

d ln.n/;

ln.n/ c 1

n

  hn   ln.n/ c 1:

(14.20)

in other words, the nth harmonic number is very close to ln.n/.

because the harmonic numbers frequently arise in practice, mathematicians have
worked hard to get even better approximations for them. in fact, it is now known
that

hn d ln.n/ c (cid:13) c 1

c 1
12n2

c (cid:15).n/
120n4

2n

(14.21)

table1/21/41/61/8   mcs        2017/6/5     19:42     page 580     #588

580

chapter 14 sums and asymptotics

here (cid:13) is a value 0:577215664 : : : called euler   s constant, and (cid:15).n/ is between 0
and 1 for all n. we will not prove this formula.

we are now    nally done with our analysis of the book stacking problem. plug-
ging the value of hn into (14.19), we    nd that the maximum overhang for n books
is very close to ln.n/=2. since ln.n/ grows to in   nity as n increases, this means
that if we are given enough books we can get a book to hang out arbitrarily far
over the edge of the table. of course, the number of books we need will grow as
an exponential function of the overhang; it will take 227 books just to achieve an
overhang of 3, never mind an overhang of 100.

extending further past the end of the table
the overhang we analyzed above was the furthest out the top book could extend
past the table. this leaves open the question of if there is some better way to build
a stable stack where some book other than the top stuck out furthest. for example,
figure 14.8 shows a stable stack of two books where the bottom book extends
further out than the top book. moreover, the bottom book extends 3/4 of a book
length past the end of the table, which is the same as the maximum overhang for
the top book in a two book stack.

since the two book arrangement in figure 14.8(a) ties the maximum overhang
stack in figure 14.8(b), we could take the unique stable stack of n books where the
top book extends furthest, and switch the top two books to look like figure 14.8(a).
this would give a stable stack of n books where the second from the top book
extends the same maximum overhang distance. so for n > 1, there are at least
two ways of building a stable stack of n books which both extend the maximum
overhang distance   one way where the top book is furthest out, and another way
where the second from the top book is furthest out.

it is not too hard to prove that these are the only two ways to get a stable stack
of books that achieves maximum overhang, providing we stick to stacking only
one book on top of another. but there is more to the story. building book piles
p
with more than one book resting on another   think of an inverted pyramid   it is
possible to get a stack of n books to extend proportional to 3
n   much more than
ln n   book lengths without falling over. see [16], maximum overhang.

14.4.3 asymptotic equality
for cases like equation 14.21 where we understand the growth of a function like hn
up to some (unimportant) error terms, we use a special notation, (cid:24), to denote the
leading term of the function. for example, we say that hn (cid:24) ln.n/ to indicate that
the leading term of hn is ln.n/. more precisely:

   mcs        2017/6/5     19:42     page 581     #589

14.4. hanging out over the edge

581

(a)

(b)

figure 14.8 figure (a) shows a stable stack of two books where the bottom book
extends the same amount past the end of the table as the maximum overhang two-
book stack shown in figure (b).

1=23=4table1=21=4table   mcs        2017/6/5     19:42     page 582     #590

582

chapter 14 sums and asymptotics

de   nition 14.4.2. for functions f; g w r ! r, we say f is asymptotically equal
to g, in symbols,

f .x/ (cid:24) g.x/

iff

x!1 f .x/=g.x/ d 1:

lim

although it is tempting to write hn (cid:24) ln.n/ c (cid:13) to indicate the two leading
terms, this is not really right. according to de   nition 14.4.2, hn (cid:24) ln.n/ c c
where c is any constant. the correct way to indicate that (cid:13) is the second-largest
term is hn (cid:0) ln.n/ (cid:24) (cid:13).
the reason that the (cid:24) notation is useful is that often we do not care about lower
order terms. for example, if n d 100, then we can compute h.n/ to great precision
using only the two leading terms:

jhn (cid:0) ln.n/ (cid:0) (cid:13)j           1

200

(cid:0)

1

120000

c

1

120 (cid:1) 1004

1

200

:

         <

we will spend a lot more time talking about asymptotic notation at the end of the

chapter. but for now, let   s get back to using sums.

14.5 products

we   ve covered several techniques for    nding closed forms for sums but no methods
for dealing with products. fortunately, we do not need to develop an entirely new
set of tools when we encounter a product such as

i:

(14.22)

that   s because we can convert any product into a sum by taking a logarithm. for
example, if

id1

n   wwd ny
p d ny
ln.p / d nx

id1

id1

f .i /;

ln.f .i //:

then

we can then apply our summing tools to    nd a closed form (or approximate closed
form) for ln.p / and then exponentiate at the end to undo the logarithm.

   mcs        2017/6/5     19:42     page 583     #591

14.5. products

583

for example, let   s see how this works for the factorial function n  . we start by

taking the logarithm:

ln.n  / d ln.1 (cid:1) 2 (cid:1) 3(cid:1)(cid:1)(cid:1) .n (cid:0) 1/ (cid:1) n/

d ln.1/ c ln.2/ c ln.3/ c (cid:1)(cid:1)(cid:1) c ln.n (cid:0) 1/ c ln.n/

d nx

id1

ln.i /:

unfortunately, no closed form for this sum is known. however, we can apply
theorem 14.3.2 to    nd good closed-form bounds on the sum. to do this, we    rst
compute

z n

1

      n

1

ln.x/ dx d x ln.x/ (cid:0) x

d n ln.n/ (cid:0) n c 1:

plugging into theorem 14.3.2, this means that

n ln.n/ (cid:0) n c 1   nx

id1

ln.i /   n ln.n/ (cid:0) n c 1 c ln.n/:

exponentiating then gives

(14.23)

nn
en(cid:0)1

  n     nnc1
en(cid:0)1 :
this means that n   is within a factor of n of nn=en(cid:0)1.
14.5.1 stirling   s formula
the most commonly used product in discrete mathematics is probably n  , and
mathematicians have workedto    nd tight closed-form bounds on its value. the
most useful bounds are given in theorem 14.5.1.
 n
theorem 14.5.1 (stirling   s formula). for all n (cid:21) 1,

(cid:16) n

n   d p

2(cid:25) n

e

e(cid:15).n/

where

1

12n c 1

  (cid:15).n/   1

12n

:

   mcs        2017/6/5     19:42     page 584     #592

584

chapter 14 sums and asymptotics

theorem 14.5.1 can be proved by induction (with some pain), and there are lots

of proofs using elementary calculus, but we won   t go into them.

there are several important things to notice about stirling   s formula. first, (cid:15).n/

is always positive. this means that

p

n   >

2(cid:25) n

for all n 2 nc.
second, (cid:15).n/ tends to zero as n gets large. this means that

(cid:16) n

 n

e

e

(cid:16) n

 n

n   (cid:24) p

2(cid:25) n

(14.24)

(14.25)

which is impressive. after all, who would expect both (cid:25) and e to show up in a
closed-form expression that is asymptotically equal to n  ?

third, (cid:15).n/ is small even for small values of n. this means that stirling   s for-
mula provides good approximations for n   for most all values of n. for example, if
we use

(cid:16) n

 n

e

p

2(cid:25) n

as the approximation for n  , as many people do, we are guaranteed to be within a
factor of

of the correct value. for n (cid:21) 10, this means we will be within 1% of the correct
value. for n (cid:21) 100, the error will be less than 0.1%.
if we need an even closer approximation for n  , then we could use either

or

p

2(cid:25) n

e1=.12nc1/

depending on whether we want an upper, or a lower, bound. by theorem 14.5.1,
we know that both bounds will be within a factor of

(cid:0) 1
12nc1 d e

1

12n

e

1

144n2c12n

of the correct value. for n (cid:21) 10, this means that either bound will be within 0.01%
of the correct value. for n (cid:21) 100, the error will be less than 0.0001%.
for quick future reference, these facts are summarized in corollary 14.5.2 and

table 14.1.

e(cid:15).n/   e

1

12n

p

2(cid:25) n

e1=12n

(cid:16) n
 n
(cid:16) n
 n

e

e

   mcs        2017/6/5     19:42     page 585     #593

14.6. double trouble

585

2(cid:25) n(cid:0) n
2(cid:25) n(cid:0) n

approximation
p
p

(cid:1)n
(cid:1)n

e

e

n (cid:21) 10
n (cid:21) 1
< 10% < 1%

n (cid:21) 100
< 0.1%

n (cid:21) 1000
< 0.01%

e1=12n < 1%

< 0.01% < 0.0001% < 0.000001%

table 14.1 error bounds on common approximations for n   from theo-
rem 14.5.1. for example, if n (cid:21) 100, then
within 0.1%.

e

2(cid:25) n(cid:0) n

(cid:1)n approximates n   to

p

corollary 14.5.2.

p

n   <

2(cid:25) n

 n (cid:1)

(cid:16) n

e

8  <  :1:09

1:009

1:0009

for n (cid:21) 1;
for n (cid:21) 10;
for n (cid:21) 100:

14.6 double trouble

sometimes we have to evaluate sums of sums, otherwise known as double summa-
tions. this sounds hairy, and sometimes it is. but usually, it is straightforward   
you just evaluate the inner sum, replace it with a closed form, and then evaluate the

   mcs        2017/6/5     19:42     page 586     #594

586

chapter 14 sums and asymptotics

outer sum (which no longer has a summation inside it). for example,5

!

 

1x

nd0

nx

id0

yn

xi

equation 14.2

ynxnc1

.xy/n

theorem 14.1.1

theorem 14.1.1

d

 
1x
yn 1 (cid:0) xnc1
d  1
  1x
1 (cid:0) x

nd0

1 (cid:0) x

nd0

 
yn (cid:0)  1
(cid:0)(cid:16) x

1 (cid:0) x

1 (cid:0) x

d

1

.1 (cid:0) x/.1 (cid:0) y/

  1x
  1x

nd0

nd0

x

.1 (cid:0) x/.1 (cid:0) xy/

1

(cid:0)

d
.1 (cid:0) x/.1 (cid:0) y/
d .1 (cid:0) xy/ (cid:0) x.1 (cid:0) y/
.1 (cid:0) x/.1 (cid:0) y/.1 (cid:0) xy/
d
.1 (cid:0) x/.1 (cid:0) y/.1 (cid:0) xy/
.1 (cid:0) y/.1 (cid:0) xy/

1 (cid:0) x

d

1

:

when there   s no obvious closed form for the inner sum, a special trick that is
often useful is to try exchanging the order of summation. for example, suppose we
want to compute the sum of the    rst n harmonic numbers

nx

kd1

kx

jd1

kd1

hk d nx
      n

1

1

j

(14.26)

for intuition about this sum, we can apply theorem 14.3.2 to equation 14.20 to
conclude that the sum is close to

ln.x/ dx d x ln.x/ (cid:0) x

d n ln.n/ (cid:0) n c 1:

z n

1

now let   s look for an exact answer. if we think about the pairs .k; j / over which

5ok, so maybe this one is a little hairy, but it is also fairly straightforward. wait till you see the

next one!

   mcs        2017/6/5     19:42     page 587     #595

14.6. double trouble

587

we are summing, they form a triangle:

j
1
1
1
1
1
: : :
1

k 1
2
3
4

n

2

3

4

5 : : :

n

1=2
1=2 1=3
1=2 1=3 1=4

1=2

: : :

1=n

the summation in equation 14.26 is summing each row and then adding the row
sums. instead, we can sum the columns and then add the column sums. inspecting
the table we see that this double sum can be written as

nx

kd1

j

1

jd1

kx
nx
nx

kdj

1

1

j

kd1

jd1

hk d nx
d nx
d nx
d nx
d nx

jd1

1

j

1

kdj
.n (cid:0) j c 1/

j

j

j

jd1

jd1

(cid:0) nx
n c 1
(cid:0) nx
nx
d .n c 1/
d .n c 1/hn (cid:0) n:

jd1

jd1

jd1

1

j

j

1

(14.27)

   mcs        2017/6/5     19:42     page 588     #596

588

chapter 14 sums and asymptotics

14.7 asymptotic notation

asymptotic notation is a shorthand used to give a quick measure of the behavior
of a function f .n/ as n grows large. for example, the asymptotic notation (cid:24) of
de   nition 14.4.2 is a binary relation indicating that two functions grow at the same
rate. there is also a binary relation    little oh    indicating that one function grows at
a signi   cantly slower rate than another and    big oh    indicating that one function
grows not much more rapidly than another.

14.7.1 little o
de   nition 14.7.1. for functions f; g w r ! r, with g nonnegative, we say f is
asymptotically smaller than g, in symbols,

f .x/ d o.g.x//;

iff

x!1 f .x/=g.x/ d 0:

lim

for example, 1000x1:9 d o.x2/ because 1000x1:9=x2 d 1000=x0:1 and since
x0:1 goes to in   nity with x and 1000 is constant, we have limx!1 1000x1:9=x2 d
0. this argument generalizes directly to yield
lemma 14.7.2. xa d o.xb/ for all nonnegative constants a < b.
using the familiar fact that log x < x for all x > 1, we can prove
lemma 14.7.3. log x d o.x(cid:15)/ for all (cid:15) > 0.
proof. choose (cid:15) >    > 0 and let x d z   in the inequality log x < x. this implies

log z < z   =   d o.z(cid:15)/

by lemma 14.7.2:

(14.28)
(cid:4)

corollary 14.7.4. xb d o.ax/ for any a; b 2 r with a > 1.
lemma 14.7.3 and corollary 14.7.4 can also be proved using l   h  opital   s rule or
the maclaurin series for log x and ex. proofs can be found in most calculus texts.

   mcs        2017/6/5     19:42     page 589     #597

14.7. asymptotic notation

589

14.7.2 big o
   big oh    is the most frequently used asymptotic notation. it is used to give an
upper bound on the growth of a function, such as the running time of an algorithm.
there is a standard de   nition of big oh given below in 14.7.9, but we   ll begin with
an alternative de   nition that makes apparent several basic properties of big oh.
de   nition 14.7.5. given functions f; g w r ! r with g nonnegative, we say that

iff

f d o.g/

jf .x/j =g.x/ < 1:

lim sup
x!1

here we   re using the technical notion of limit superior6 instead of just limit. but
because limits and lim sup   s are the same when limits exist, this formulation makes
it easy to check basic properties of big oh. we   ll take the following lemma for
granted.
lemma 14.7.6. if a function f w r ! r has a    nite or in   nite limit as its argument
approaches in   nity, then its limit and limit superior are the same.

now de   nition 14.7.5 immediately implies:
lemma 14.7.7. if f d o.g/ or f (cid:24) g, then f d o.g/.
proof. lim f =g d 0 or lim f =g d 1 implies lim f =g < 1, so by lemma 14.7.6,
lim sup f =g < 1.
(cid:4)
note that the converse of lemma 14.7.7 is not true. for example, 2x d o.x/,
but 2x 6(cid:24) x and 2x    o.x/.
we also have:
lemma 14.7.8. if f d o.g/, then it is not true that g d o.f /.
proof.

g.x/

lim
x!1

d
so by lemma 14.7.6, g    o.f /.
6the precise de   nition of lim sup is

f .x/

1

limx!1 f .x/=g.x/

d 1;

d 1
0

lim sup

x!1 h.x/ wwd lim

x!1 luby(cid:21)x h.y/;

where    lub    abbreviates    least upper bound.   

(cid:4)

   mcs        2017/6/5     19:42     page 590     #598

590

chapter 14 sums and asymptotics

we need lim sup   s in de   nition 14.7.5 to cover cases when limits don   t exist. for
example, if f .x/=g.x/ oscillates between 3 and 5 as x grows, then limx!1 f .x/=g.x/
does not exist, but f d o.g/ because lim supx!1 f .x/=g.x/ d 5.
an equivalent, more usual formulation of big o does not mention lim sup   s:
de   nition 14.7.9. given functions f; g w r ! r with g nonnegative, we say

f d o.g/

iff there exists a constant c (cid:21) 0 and an x0 such that for all x (cid:21) x0, jf .x/j   cg.x/.
this de   nition is rather complicated, but the idea is simple: f .x/ d o.g.x//
means f .x/ is less than or equal to g.x/, except that we   re willing to ignore a
constant factor, namely c and to allow exceptions for small x, namely, x < x0. so
in the case that f .x/=g.x/ oscillates between 3 and 5, f d o.g/ according to
de   nition 14.7.9 because f   5g.
proposition 14.7.10. 100x2 d o.x2/.
proof. choose c d 100 and x0 d 1. then the proposition holds, since for all
(cid:4)

x (cid:21) 1,    100x2       100x2.

proposition 14.7.11. x2 c 100x c 10 d o.x2/.
proof. .x2c100xc10/=x2 d 1c100=xc10=x2 and so its limit as x approaches
in   nity is 1c0c0 d 1. so in fact, x2c100xc10 (cid:24) x2, and therefore x2c100xc
10 d o.x2/. indeed, it   s conversely true that x2 d o.x2 c 100x c 10/.
(cid:4)
proposition 14.7.11 generalizes to an arbitrary polynomial:
proposition 14.7.12. akxk c ak(cid:0)1xk(cid:0)1 c (cid:1)(cid:1)(cid:1) c a1x c a0 d o.xk/.
we   ll omit the routine proof.
big o notation is especially useful when describing the running time of an al-
gorithm. for example, the usual algorithm for multiplying n (cid:2) n matrices uses a
number of operations proportional to n3 in the worst case. this fact can be ex-
pressed concisely by saying that the running time is o.n3/. so this asymptotic
notation allows the speed of the algorithm to be discussed without reference to
constant factors or lower-order terms that might be machine speci   c. it turns out
that there is another id127 procedure that uses o.n2:55/ operations.
the fact that this procedure is asymptotically faster indicates that it involves new
ideas that go beyond a simply more ef   cient implementation of the o.n3/ method.
of course the asymptotically faster procedure will also de   nitely be much more
ef   cient on large enough matrices, but being asymptotically faster does not mean

   mcs        2017/6/5     19:42     page 591     #599

14.7. asymptotic notation

591

that it is a better choice. the o.n2:55/-operation multiplication procedure is almost
never used in practice because it only becomes more ef   cient than the usual o.n3/
procedure on matrices of impractical size.7

14.7.3 theta
sometimes we want to specify that a running time t .n/ is precisely quadratic up to
constant factors (both upper bound and lower bound). we could do this by saying
that t .n/ d o.n2/ and n2 d o.t .n//, but rather than say both, mathematicians
have devised yet another symbol     to do the job.

de   nition 14.7.13.

f d    .g/

iff f d o.g/ and g d o.f /:

the statement f d    .g/ can be paraphrased intuitively as    f and g are equal
to within a constant factor.   

the theta notation allows us to highlight growth rates and suppress distracting

factors and low-order terms. for example, if the running time of an algorithm is

t .n/ d 10n3 (cid:0) 20n2 c 1;

then we can more simply write

t .n/ d    .n3/:

in this case, we would say that t is of order n3 or that t .n/ grows cubically, which
is often the main thing we really want to know. another such example is

(cid:25) 23x(cid:0)7 c .2:7x113 c x9 (cid:0) 86/4

p

x

(cid:0) 1:083x d    .3x/:

just knowing that the running time of an algorithm is    .n3/, for example, is
useful, because if n doubles we can predict that the running time will by and large8
increase by a factor of at most 8 for large n. in this way, theta notation preserves in-
formation about the scalability of an algorithm or system. scalability is, of course,
a big issue in the design of algorithms and systems.

7it is even conceivable that there is an o.n2/ id127 procedure, but none is known.
8since    .n3/ only implies that the running time t .n/ is between cn3 and d n3 for constants
0 < c < d, the time t .2n/ could regularly exceed t .n/ by a factor as large as 8d=c. the factor is
sure to be close to 8 for all large n only if t .n/ (cid:24) n3.

   mcs        2017/6/5     19:42     page 592     #600

592

chapter 14 sums and asymptotics

14.7.4 pitfalls with asymptotic notation
there is a long list of ways to make mistakes with asymptotic notation. this section
presents some of the ways that big o notation can lead to trouble. with minimal
effort, you can cause just as much chaos with the other symbols.

the exponential fiasco
sometimes relationships involving big o are not so obvious. for example, one
might guess that 4x d o.2x/ since 4 is only a constant factor larger than 2. this
reasoning is incorrect, however; 4x actually grows as the square of 2x.

constant confusion
every constant is o.1/. for example, 17 d o.1/. this is true because if we let
f .x/ d 17 and g.x/ d 1, then there exists a c > 0 and an x0 such that jf .x/j  
cg.x/. in particular, we could choose c = 17 and x0 d 1, since j17j   17 (cid:1) 1 for all
x (cid:21) 1. we can construct a false theorem that exploits this fact.
false theorem 14.7.14.

i d o.n/

nx
id1
id1 i d 1c 2c 3c(cid:1)(cid:1)(cid:1)c n. since we have shown
(cid:4)

bogus proof. de   ne f .n/ dpn
of course in realitypn

that every constant i is o.1/, f .n/ d o.1/ c o.1/ c (cid:1)(cid:1)(cid:1) c o.1/ d o.n/.

id1 i d n.n c 1/=2    o.n/.

the error stems from confusion over what is meant in the statement i d o.1/.
for any constant i 2 n it is true that i d o.1/. more precisely, if f is any constant
function, then f d o.1/. but in this false theorem, i is not constant   it ranges
over a set of values 0; 1; : : : ; n that depends on n.

and anyway, we should not be adding o.1/   s as though they were numbers. we
never even de   ned what o.g/ means by itself; it should only be used in the context
   f d o.g/    to describe a relation between functions f and g.
equality blunder
the notation f d o.g/ is too    rmly entrenched to avoid, but the use of    =    is
regrettable. for example, if f d o.g/, it seems quite reasonable to write o.g/ d
f . but doing so might tempt us to the following blunder: because 2n d o.n/, we
can say o.n/ d 2n. but n d o.n/, so we conclude that n d o.n/ d 2n, and
therefore n d 2n. to avoid such nonsense, we will never write    o.f / d g.   

   mcs        2017/6/5     19:42     page 593     #601

14.7. asymptotic notation

593

similarly, you will often see statements like

or

hn d ln.n/ c (cid:13) c o

p
n   d .1 c o.1//

2(cid:25) n

in such cases, the true meaning is

  1
(cid:16) n

n

 
 n

e

for some f .n/ where f .n/ d o.1=n/, and
p
n   d .1 c g.n//

hn d ln.n/ c (cid:13) c f .n/
 n
(cid:16) n

2(cid:25) n

e

where g.n/ d o.1/. these last transgressions are ok as long as you (and your
reader) know what you mean.

operator application blunder
it   s tempting to assume that familiar operations preserve asymptotic relations, but
it ain   t necessarily so. for example, f (cid:24) g in general does not even imply that
3f d     .3g /. on the other hand, some operations preserve and even strengthen
asymptotic relations, for example,

f d    .g/ implies ln f (cid:24) ln g:

see problem 14.27.

14.7.5 omega (optional)
sometimes people incorrectly use big oh in the context of a lower bound. for
example, they might say,    the running time t .n/ is at least o.n2/.    this is another
blunder! big oh can only be used for upper bounds. the proper way to express the
lower bound would be

n2 d o.t .n//:

the lower bound can also be described with another special notation    big omega.   
de   nition 14.7.15. given functions f; g w r ! r with f nonnegative, de   ne

to mean

f d (cid:127).g/

g d o.f /:

   mcs        2017/6/5     19:42     page 594     #602

594

chapter 14 sums and asymptotics

for example, x2 d (cid:127).x/, 2x d (cid:127).x2/ and x=100 d (cid:127).100x c p

x/.

so if the running time of your algorithm on inputs of size n is t .n/, and you

want to say it is at least quadratic, say

t .n/ d (cid:127).n2/:

there is a similar    little omega    notation for lower bounds corresponding to little

o:
de   nition 14.7.16. for functions f; g w r ! r with f nonnegative, de   ne

f d !.g/

to mean

g d o.f /:
p
x d !.ln2.x//.

for example, x1:5 d !.x/ and
the little omega symbol is not as widely used as the other asymptotic symbols

we de   ned.

problems for section 14.1

class problems
problem 14.1.
we begin with two large glasses. the    rst glass contains a pint of water, and the
second contains a pint of wine. we pour 1/3 of a pint from the    rst glass into the
second, stir up the wine/water mixture in the second glass, and then pour 1/3 of
a pint of the mix back into the    rst glass and repeat this pouring back-and-forth
process a total of n times.
(a) describe a closed-form formula for the amount of wine in the    rst glass after
n back-and-forth pourings.

(b) what is the limit of the amount of wine in each glass as n approaches in   nity?

problem 14.2.

   mcs        2017/6/5     19:42     page 595     #603

14.7. asymptotic notation

595

you   ve seen this neat trick for evaluating a geometric sum:
s d 1 c z c z2 c : : : c zn
zs d z c z2 c : : : c zn c znc1
s (cid:0) zs d 1 (cid:0) znc1
s d 1 (cid:0) znc1
1 (cid:0) z

(where z    1/

use the same approach to    nd a closed-form expression for this sum:

t d 1z c 2z2 c 3z3 c : : : c nzn

problem 14.3.
sammy the shark is a    nancial service provider who offers loans on the following
terms.

(cid:15) sammy loans a client m dollars in the morning. this puts the client m dollars
in debt to sammy.
(cid:15) each evening, sammy    rst charges a service fee which increases the client   s
debt by f dollars, and then sammy charges interest, which multiplies the
debt by a factor of p. for example, sammy might charge a    modest    ten
cent service fee and 1% interest rate per day, and then f would be 0:1 and p
would be 1:01.

(a) what is the client   s debt at the end of the    rst day?

(b) what is the client   s debt at the end of the second day?

(c) write a formula for the client   s debt after d days and    nd an equivalent closed
form.

(d) if you borrowed $10 from sammy for a year, how much would you owe him?

homework problems
problem 14.4.
is a harvard degree really worth more than an mit degree? let us say that a person
with a harvard degree starts with $40,000 and gets a $20,000 raise every year after
graduation, whereas a person with an mit degree starts with $30,000, but gets a
20% raise every year. assume in   ation is a    xed 8% every year. that is, $1.08 a
year from now is worth $1.00 today.

   mcs        2017/6/5     19:42     page 596     #604

596

chapter 14 sums and asymptotics

(a) how much is a harvard degree worth today if the holder will work for n years
following graduation?

(b) how much is an mit degree worth in this case?

(c) if you plan to retire after twenty years, which degree would be worth more?

problem 14.5.
suppose you deposit $100 into your mit credit union account today, then$99 at
the end of the    rst month from now, $98 at tne end of the second months from now,
and so on. given that the interest rate is constantly 0.3% per month, how long will
it take to save $5,000?

problems for section 14.2

class problems
problem 14.6.
find a closed form for each of the following sums:
(a)

 

nx

id1

 

:

(cid:0)

1

i c 2013

(b) assuming the following sum equals a polynomial in n,    nd the polynomial.
then verify by induction that the sum equals the polynomial you    nd.

1

i c 2012
nx

i 3

id1

problems for section 14.3

practice problems
problem 14.7.
let

s wwd 5x

nd1

p
3n :

   mcs        2017/6/5     19:42     page 597     #605

14.7. asymptotic notation

597

using the integral method of section 14.3, we can    nd integers a, b, c, d and a
real number e such that

z b

xe dx   s  z d

xe dx

what are appropriate values for a; : : : ; e?

a

c

class problems
problem 14.8.
let f w r ! r be a continuous, weakly increasing function. say that f grows
slowly when

 z n

 

f .n/ d o

f .x/ dx

:

(a) prove that the function fa.n/ wwd na grows slowly for any a > 0.
(b) prove that the function en does not grow slowly.

1

(c) prove that if f grows slowly, then

z n

1

f .x/ dx (cid:24) nx

f .i / :

id1

exam problems
problem 14.9.
assume n is an integer larger than 1. circle all the correct inequalities below.

explanations are not required, but partial credit for wrong answers will not be

given without them. hint: you may    nd the graphs in figure 14.9 helpful.

ln.x c 1/dx

id1

(cid:15) nx
(cid:15) nx
(cid:15) nx

id1

ln.i c 1/   ln 2 cz n
ln.i c 1/  z n
(cid:21)z n

1

1

1

0

dx

x c 1

0

id1

i

ln.x c 2/dx

   mcs        2017/6/5     19:42     page 598     #606

598

chapter 14 sums and asymptotics

figure 14.9 integral bounds for two sums

01234567800.511.522.5y = ln(x+2)y = ln(x+1)01234567800.20.40.60.81y = 1/(x+1)y = 1/x   mcs        2017/6/5     19:42     page 599     #607

14.7. asymptotic notation

599

homework problems
problem 14.10.
let f w rc ! rc be a weakly decreasing function. de   ne

s wwd nx
i wwdz n

id1

f .i /

f .x/ dx:

1

i c f .n/   s   i c f .1/:

and

prove that

(proof by very clear picture is ok.)

problem 14.11.
use integration to    nd upper and lower bounds that differ by at most 0.1 for the
following sum. (you may need to add the    rst few terms explicitly and then use
integrals to bound the sum of the remaining terms.)

1x

1

.2i c 1/2

id1

problems for section 14.4

class problems
problem 14.12.
an explorer is trying to reach the holy grail, which she believes is located in a
desert shrine d days walk from the nearest oasis. in the desert heat, the explorer
must drink continuously. she can carry at most 1 gallon of water, which is enough
for 1 day. however, she is free to make multiple trips carrying up to a gallon each
time to create water caches out in the desert.

for example, if the shrine were 2=3 of a day   s walk into the desert, then she could
recover the holy grail after two days using the following strategy. she leaves the
oasis with 1 gallon of water, travels 1=3 day into the desert, caches 1=3 gallon, and
then walks back to the oasis   arriving just as her water supply runs out. then she
picks up another gallon of water at the oasis, walks 1=3 day into the desert, tops off

   mcs        2017/6/5     19:42     page 600     #608

600

chapter 14 sums and asymptotics

her water supply by taking the 1=3 gallon in her cache, walks the remaining 1=3
day to the shrine, grabs the holy grail, and then walks for 2=3 of a day back to the
oasis   again arriving with no water to spare.

but what if the shrine were located farther away?

(a) what is the most distant point that the explorer can reach and then return to
the oasis, with no water precached in the desert, if she takes a total of only 1 gallon
from the oasis?

(b) what is the most distant point the explorer can reach and still return to the
oasis if she takes a total of only 2 gallons from the oasis? no proof is required; just
do the best you can.

(c) the explorer will travel using a recursive strategy to go far into the desert and
back, drawing a total of n gallons of water from the oasis. her strategy is to build
up a cache of n (cid:0) 1 gallons, plus enough to get home, a certain fraction of a day   s
distance into the desert. on the last delivery to the cache, instead of returning home,
she proceeds recursively with her n (cid:0) 1 gallon strategy to go farther into the desert
and return to the cache. at this point, the cache has just enough water left to get
her home.
prove that with n gallons of water, this strategy will get her hn=2 days into the
desert and back, where hn is the nth harmonic number:
c (cid:1)(cid:1)(cid:1) c 1
n

hn wwd 1

c 1
2

c 1
3

1

:

conclude that she can reach the shrine, however far it is from the oasis.
(d) suppose that the shrine is d d 10 days walk into the desert. use the asymp-
totic approximation hn (cid:24) ln n to show that it will take more than a million years
for the explorer to recover the holy grail.

there is a number a such thatp1

problem 14.13.

a? prove it.

id1 i p converges iff p < a. what is the value of

hint: find a value for a you think that works, then apply the integral bound.

problem 14.14.
an in   nite sum of nonnegative terms will converge to the same value   or diverge   
no matter the order in which the terms are summed. this may not be true when

   mcs        2017/6/5     19:42     page 601     #609

14.7. asymptotic notation

601

there are an in   nite number of both nonnegative and negative terms. an extreme
example is

1x
.(cid:0)1/i d 1 c .(cid:0)1/ c 1 c .(cid:0)1/ c (cid:1)(cid:1)(cid:1)

id0

because by regrouping the terms we can deduce:

  1 c .(cid:0)1/   c   1 c .(cid:0)1/   c (cid:1)(cid:1)(cid:1) d 0 c 0 c (cid:1)(cid:1)(cid:1) d 0;
1 c   .(cid:0)1/ c 1   c   .(cid:0)1/ c 1   c (cid:1)(cid:1)(cid:1) d 1 c 0 c 0 c (cid:1)(cid:1)(cid:1) d 1:

the problem here with this in   nite sum is that the sum of the    rst n terms oscil-

lates between 0 and 1, so the sum does not approach any limit.

but even for convergent sums, rearranging terms can cause big changes when
the sum contains positive and negative terms. to illustrate the problem, we look at
the alternating harmonic series:

1 (cid:0) 1=2 c 1=3 (cid:0) 1=4 c (cid:1)(cid:1)(cid:1)    :

a standard result of elementary calculus, [2], p.403, is that this series converges to
ln 2, but things change if we reorder the terms in the series.

explain for example how to reorder terms in the alternating harmonic series so
that the reordered series converges to 7. then explain how to reorder so it diverges.

homework problems
problem 14.15.
there is a bug on the edge of a 1-meter rug. the bug wants to cross to the other
side of the rug. it crawls at 1 cm per second. however, at the end of each second,
a malicious    rst-grader named mildred anderson stretches the rug by 1 meter. as-
sume that her action is instantaneous and the rug stretches uniformly. thus, here   s
what happens in the    rst few seconds:

(cid:15) the bug walks 1 cm in the    rst second, so 99 cm remain ahead.
(cid:15) mildred stretches the rug by 1 meter, which doubles its length. so now there
are 2 cm behind the bug and 198 cm ahead.
(cid:15) the bug walks another 1 cm in the next second, leaving 3 cm behind and 197
cm ahead.
(cid:15) then mildred strikes, stretching the rug from 2 meters to 3 meters. so there
are now 3 (cid:1) .3=2/ d 4:5 cm behind the bug and 197 (cid:1) .3=2/ d 295:5 cm
ahead.

   mcs        2017/6/5     19:42     page 602     #610

602

chapter 14 sums and asymptotics

(cid:15) the bug walks another 1 cm in the third second, and so on.

your job is to determine this poor bug   s fate.

(a) during second i, what fraction of the rug does the bug cross?

(b) over the    rst n seconds, what fraction of the rug does the bug cross altogether?
express your answer in terms of the harmonic number hn.
(c) the known universe is thought to be about 3 (cid:1) 1010 light years in diameter.
how many universe diameters must the bug travel to get to the end of the rug?
(this distance is not the in   ated distance caused by the stretching but only the
actual walking done by the bug).

problem 14.16.
prove that the alternating harmonic series

1 (cid:0) 1=2 c 1=3 (cid:0) 1=4 c (cid:1)(cid:1)(cid:1)  

converges.

exam problems
problem 14.17.
show that

1x
converges to a    nite value iff p < (cid:0)1.

id1

i p

problems for section 14.7

practice problems
problem 14.18.
find the least nonnegative integer n such that f .x/ is o.xn/ when f is de   ned by
each of the expressions below.
(a) 2x3 c .log x/x2
(b) 2x2 + .log x/x3

   mcs        2017/6/5     19:42     page 603     #611

14.7. asymptotic notation

603

(c) .1:1/x

(d) .0:1/x
(e) .x4 c x2 c 1/=.x3 c 1/
(f) .x4 c 5 log x/=.x4 c 1/
(g) 2.3 log2 x2/

problem 14.19.
let f .n/ d n3. for each function g.n/ in the table below, indicate which of the
indicated asymptotic relations hold.

f d o.g/ f d o.g/ g d o.f / g d o.f /

g.n/

6 (cid:0) 5n (cid:0) 4n2 c 3n3
.sin .(cid:25) n=2/ c 2/ n3

n3 log n
nsin.(cid:25) n=2/c2
e0:2n (cid:0) 100n3

log n  

problem 14.20.
circle each of the true statements below.

explanations are not required, but partial credit for wrong answers will not be

given without them.
(cid:15) 3n d o(cid:0)2n(cid:1)
(cid:15) n2 (cid:24) n2 c n
(cid:15) nsin.n(cid:25)=2/c1 d o(cid:0)n2(cid:1)
 

(cid:15) n d    

3n3

.n c 1/.n (cid:0) 1/

 

problem 14.21.
show that

ln.n2  / d    .n2 ln n/

   mcs        2017/6/5     19:42     page 604     #612

604

chapter 14 sums and asymptotics

hint: stirling   s formula for .n2/  .

problem 14.22.
the quantity

.2n/  

22n.n  /2

(14.29)

will come up later in the course (it is the id203 that in 22n    ips of a fair coin,
exactly n will be heads). show that it is asymptotically equal to

.

1p
(cid:25) n

problem 14.23.
suppose let f and g be real-valued functions.
(a) give an example of f; g such that

lim sup fg < lim sup f (cid:1) lim sup g;

and all the lim sup   s are    nite.

(b) give an example of f; g such that

lim sup fg > lim sup f (cid:1) lim sup g:

and all the lim sup   s are    nite.

homework problems
problem 14.24. (a) prove that log x < x for all x > 1 (requires elementary calcu-
lus).
(b) prove that the relation r on functions such that f r g iff g d o.f / is a strict
partial order.
(c) prove that f (cid:24) g iff f d g c h for some function h d o.g/.

problem 14.25.
indicate which of the following holds for each pair of functions .f .n/; g.n// in
the table below. assume k (cid:21) 1, (cid:15) > 0, and c > 1 are constants. pick the four

   mcs        2017/6/5     19:42     page 605     #613

14.7. asymptotic notation

605

table entries you consider to be the most challenging or interesting and justify your
answers to these.

f d o.g/ f d o.g/ g d o.f / g d o.f / f d    .g/ f (cid:24) g

f .n/
p
2n
n

log.n  /

nk

logk n

g.n/
2n=2

nsin.n(cid:25)=2/
log.nn/

cn
n(cid:15)

problem 14.26.
arrange the following functions in a sequence f1, f2, ... f24 so that fi d o.fic1/.
additionally, if fi d    .fic1/, indicate that too:

1. n log n

2. 2100n

(cid:0)1
(cid:0)1=2

3. n

(cid:1)

4. n

6. (cid:0) n

64
7. n  

5. .log n/=n

8. 22100

9. 22n

10. 2n

11. 3n

12. n2n
13. 2nc1
14. 2n

15. 3n

   mcs        2017/6/5     19:42     page 606     #614

606

chapter 14 sums and asymptotics

16. log .n  /

17. log2 n
18. log10 n

p

19. 2:1

n

20. 22n

21. 4n

22. n64

23. n65

24. nn

problem 14.27.
let f , g be nonnegative real-valued functions such that limx!1 f .x/ d 1 and
f (cid:24) g.
(a) give an example of f; g such that not.2f (cid:24) 2g /.
(b) prove that log f (cid:24) log g.
(c) use stirling   s formula to prove that in fact

log.n  / (cid:24) n log n

problem 14.28.
determine which of these choices

   .n/;    .n2 log n/;    .n2/;    .1/;    .2n/;    .2n ln n/;

none of these

describes each function   s asymptotic behavior. full proofs are not required, but
brie   y explain your answers.
(a)

n c ln n c .ln n/2

(b)

n2 c 2n (cid:0) 3

n2 (cid:0) 7

   mcs        2017/6/5     19:42     page 607     #615

14.7. asymptotic notation

607

(c)

(d)

(e)

nx

id0

22ic1

ln.n2  /

 

k

1 (cid:0) 1
2k

 

nx

kd1

problem 14.29. (a) either prove or disprove each of the following statements.

(cid:15) n   d o..n c 1/  /
(cid:15) .n c 1/   d o.n  /
(cid:15) n   d    ..n c 1/  /
(cid:15) n   d o..n c 1/  /
(cid:15) .n c 1/   d o.n  /

(b) show that(cid:0) n

3

(cid:1)nce d o.n  /.

problem 14.30.
prove that

nx

kd1

k6 d    .n7/:

class problems
problem 14.31.
give an elementary proof (without appealing to stirling   s formula) that log.n  / d
   .n log n/.

problem 14.32.
suppose f; g w nc ! nc and f (cid:24) g.
(a) prove that 2f (cid:24) 2g.

   mcs        2017/6/5     19:42     page 608     #616

608

chapter 14 sums and asymptotics

(b) prove that f 2 (cid:24) g2.
(c) give examples of f and g such that 2f 6(cid:24) 2g.

problem 14.33.
recall that for functions f; g on n, f d o.g/ iff

9c 2 n9n0 2 n8n (cid:21) n0

c (cid:1) g.n/ (cid:21) jf .n/j :

(14.30)
for each pair of functions below, determine whether f d o.g/ and whether
g d o.f /. in cases where one function is o() of the other, indicate the smallest
nonnegative integer c and for that smallest c, the smallest corresponding nonnega-
tive integer n0 ensuring that condition (14.30) applies.
(a) f .n/ d n2; g.n/ d 3n.
f d o.g/
g d o.f /
(b) f .n/ d .3n (cid:0) 7/=.n c 4/; g.n/ d 4
f d o.g/
g d o.f /
(c) f .n/ d 1 c .n sin.n(cid:25)=2//2; g.n/ d 3n
f d o.g/
g d o.f /

if yes, c d
if yes, c d

if yes, c d
if yes, c d

if yes, c d
if yes, c d

, n0 =
, n0 =

, n0 =
, n0 =

yes
yes

yes
yes

yes
yes

no
no

no
no

no
no

n0 =
n0 =

problem 14.34.

false claim.

2n d o.1/:

(14.31)

explain why the claim is false. then identify and explain the mistake in the

following bogus proof.

bogus proof. the proof is by induction on n where the induction hypothesis p .n/
is the assertion (14.31).

base case: p .0/ holds trivially.

   mcs        2017/6/5     19:42     page 609     #617

14.7. asymptotic notation

609

2nc1 d 2 (cid:1) 2n   .2c/ (cid:1) 1;

inductive step: we may assume p .n/, so there is a constant c > 0 such that
2n   c (cid:1) 1. therefore,
which implies that 2nc1 d o.1/. that is, p .n c 1/ holds, which completes the
proof of the inductive step.
we conclude by induction that 2n d o.1/ for all n. that is, the exponential
function is bounded by a constant.
(cid:4)

problem 14.35. (a) prove that the relation r on functions such that f r g iff
f d o.g/ is a strict partial order.
(b) describe two functions f; g that are incomparable under big oh:

f    o.g/ and g    o.f /:

conclude that r is not a linear order. how about three such functions?

exam problems
problem 14.36.
give an example of a pair of strictly increasing total functions, f w nc ! nc and
g w nc ! nc, that satisfy f (cid:24) g but not 3f d o .3g /.

problem 14.37.
let f; g be real-valued functions such that f d    .g/ and limx!1 f .x/ d 1.
prove that

ln f (cid:24) ln g:

problem 14.38. (a) show that

.an/b=n (cid:24) 1:

where a; b are positive constants and (cid:24) denotes asymptotic equality. hint: an d
a2log2 n.
(b) you may assume that if f .n/ (cid:21) 1 and g.n/ (cid:21) 1 for all n, then f (cid:24) g (cid:0)!
n (cid:24) g

n . show that

f

1

1

p

n

n   d    .n/:

   mcs        2017/6/5     19:42     page 610     #618

610

chapter 14 sums and asymptotics

problem 14.39.
(a) de   ne a function f .n/ such that f d    .n2/ and not.f (cid:24) n2/.

f .n/ d

(b) de   ne a function g.n/ such that g d o.n2/, g       .n2/, g    o.n2/, and
n d o.g/.

problem 14.40. (a) show that

g.n/ d

.an/b=n (cid:24) 1:

where a; b are positive constants and (cid:24) denotes asymptotic equality. hint: an d
a2log2 n.

(b) show that

problem 14.41.

p

n

n   d    .n/:

(a) indicate which of the following asymptotic relations below on the set of non-
negative real-valued functions are equivalence relations (e), strict partial orders (s),
weak partial orders (w), or none of the above (n).
(cid:15) f (cid:24) g, the    asymptotically equal    relation.
(cid:15) f d o.g/, the    little oh    relation.
(cid:15) f d o.g/, the    big oh    relation.
(cid:15) f d    .g/, the    theta    relation.
(cid:15) f d o.g/ and not.g d o.f //.
(b) indicate the implications among the assertions in part (a). for example,

f d o.g/ implies f d o.g/:

   mcs        2017/6/5     19:42     page 611     #619

14.7. asymptotic notation

611

problem 14.42.
recall that if f and g are nonnegative real-valued functions on zc, then f d o.g/
iff there exist c; n0 2 zc such that

8n (cid:21) n0: f .n/   cg.n/:

for each pair of functions f and g below, indicate the smallest c 2 zc, and
for that smallest c, the smallest corresponding n0 2 zc, that would establish
f d o.g/ by the de   nition given above. if there is no such c, write 1.
2 ln n2; g.n/ d n.
(a) f .n/ d 1
, n0 =
(b) f .n/ d n; g.n/ d n ln n.
  (cid:25).n (cid:0) 1/
(c) f .n/ d 2n; g.n/ d n4 ln n
(d) f .n/ d 3 sin

  c 2; g.n/ d 0:2.

c d
c d
c d
c d

, n0 =

, n0 =

, n0 =

100

problem 14.43.
let f; g be positive real-valued functions on    nite, connected, simple graphs. we
will extend the o./ notation to such graph functions as follows: f d o.g/ iff
there is a constant c > 0 such that
f .g/   c (cid:1) g.g/ for all connected simple graphs g with more than one vertex:
for each of the following assertions, state whether it is true or false and brie   y
explain your answer. you are not expected to offer a careful proof or detailed
counterexample.

reminder: v .g/ is the set of vertices and e.g/ is the set of edges of g, and g
is connected.
(a) jv .g/j d o.je.g/j/.
(b) je.g/j d o.jv .g/j/.
(c) jv .g/j d o.(cid:31).g//, where (cid:31).g/ is the chromatic number of g.
(d) (cid:31).g/ d o.jv .g/j/.

   mcs        2017/6/5     19:42     page 612     #620

   mcs        2017/6/5     19:42     page 613     #621

15

cardinality rules

15.1 counting one thing by counting another

how do you count the number of people in a crowded room? you could count
heads, since for each person there is exactly one head. alternatively, you could
count ears and divide by two. of course, you might have to adjust the calculation if
someone lost an ear in a pirate raid or someone was born with three ears. the point
here is that you can often count one thing by counting another, though some fudg-
ing may be required. this is a central theme of counting, from the easiest problems
to the hardest. in fact, we   ve already seen this technique used in theorem 4.5.5,
where the number of subsets of an n-element set was proved to be the same as the
number of length-n bit-strings, by describing a bijection between the subsets and
the bit-strings.

the most direct way to count one thing by counting another is to    nd a bijection
between them, since if there is a bijection between two sets, then the sets have the
same size. this important fact is commonly known as the bijection rule. we   ve
already seen it as the mapping rules bijective case (4.7).

15.1.1 the bijection rule
the bijection rule acts as a magni   er of counting ability; if you    gure out the size
of one set, then you can immediately determine the sizes of many other sets via
bijections. for example, let   s look at the two sets mentioned at the beginning of
part iii:

a d all ways to select a dozen donuts when    ve varieties are available
b d all 16-bit sequences with exactly 4 ones
             

0 0           

           

0 0           

0 0           

an example of an element of set a is:

0 0 0 0 0 0

chocolate

lemon-   lled

sugar

glazed

plain

here, we   ve depicted each donut with a 0 and left a gap between the different
varieties. thus, the selection above contains two chocolate donuts, no lemon-   lled,
six sugar, two glazed, and two plain. now let   s put a 1 into each of the four gaps:

0 0           

chocolate

           

lemon-   lled

             

0 0 0 0 0 0

sugar

0 0           

glazed

0 0           

plain

1

1

1

1

   mcs        2017/6/5     19:42     page 614     #622

614

chapter 15 cardinality rules

and close up the gaps:

0011000000100100 :

we   ve just formed a 16-bit number with exactly 4 ones   an element of b!

this example suggests a bijection from set a to set b: map a dozen donuts

consisting of:

c chocolate, l lemon-   lled, s sugar, g glazed, and p plain

to the sequence:

           

0 : : : 0

c

           

0 : : : 0

l

1

1

           

0 : : : 0

s

           

0 : : : 0

g

1

1

           

0 : : : 0

p

the resulting sequence always has 16 bits and exactly 4 ones, and thus is an
element of b. moreover, the mapping is a bijection: every such bit sequence comes
from exactly one order of a dozen donuts. therefore, jaj d jbj by the bijection
rule. more generally,

lemma 15.1.1. the number of ways to select n donuts when k    avors are available
is the same as the number of binary sequences with exactly n zeroes and k(cid:0) 1 ones.
this example demonstrates the power of the bijection rule. we managed to prove
that two very different sets are actually the same size   even though we don   t know
exactly how big either one is. but as soon as we    gure out the size of one set, we   ll
immediately know the size of the other.

this particular bijection might seem frighteningly ingenious if you   ve not seen
it before. but you   ll use essentially this same argument over and over, and soon
you   ll consider it routine.

15.2 counting sequences

the bijection rule lets us count one thing by counting another. this suggests a
general strategy: get really good at counting just a few things, then use bijections
to count everything else! this is the strategy we   ll follow. in particular, we   ll get
really good at counting sequences. when we want to determine the size of some
other set t , we   ll    nd a bijection from t to a set of sequences s. then we   ll
use our super-ninja sequence-counting skills to determine jsj, which immediately
gives us jt j. we   ll need to hone this idea somewhat as we go along, but that   s
pretty much it!

   mcs        2017/6/5     19:42     page 615     #623

15.2. counting sequences

615

15.2.1 the product rule
the product rule gives the size of a product of sets. recall that if p1; p2; : : : ; pn
are sets, then

p1 (cid:2) p2 (cid:2) (cid:1)(cid:1)(cid:1) (cid:2) pn

is the set of all sequences whose    rst term is drawn from p1, second term is drawn
from p2 and so forth.
rule 15.2.1 (product rule). if p1; p2; : : : pn are    nite sets, then:

jp1 (cid:2) p2 (cid:2) (cid:1)(cid:1)(cid:1) (cid:2) pnj d jp1j (cid:1) jp2j(cid:1)(cid:1)(cid:1)jpnj

for example, suppose a daily diet consists of a breakfast selected from set b, a

lunch from set l, and a dinner from set d where:

b d fpancakes; bacon and eggs; bagel; doritosg
l d fburger and fries; garden salad; doritosg
d d fmacaroni; pizza; frozen burrito; pasta; doritosg

then b(cid:2)l(cid:2)d is the set of all possible daily diets. here are some sample elements:

.pancakes; burger and fries; pizza/
.bacon and eggs; garden salad; pasta/

.doritos; doritos; frozen burrito/

the product rule tells us how many different daily diets are possible:

jb (cid:2) l (cid:2) dj d jbj (cid:1) jlj (cid:1) jdj

d 4 (cid:1) 3 (cid:1) 5
d 60:

15.2.2 subsets of an n-element set
the fact that there are 2n subsets of an n-element set was proved in theorem 4.5.5
by setting up a bijection between the subsets and the length-n bit-strings. so the
original problem about subsets was tranformed into a question about sequences   
exactly according to plan! now we can    ll in the missing explanation of why there
are 2n length-n bit-strings: we can write the set of all n-bit sequences as a product
of sets:

then product rule gives the answer:

     

   
f0; 1gn wwd f0; 1g (cid:2) f0; 1g (cid:2) (cid:1)(cid:1)(cid:1) (cid:2) f0; 1g

   
jf0; 1gnj d jf0; 1gjn d 2n:

n terms

:

   mcs        2017/6/5     19:42     page 616     #624

616

chapter 15 cardinality rules

15.2.3 the sum rule
bart allocates his little sister lisa a quota of 20 crabby days, 40 irritable days,
and 60 generally surly days. on how many days can lisa be out-of-sorts one way
or another? let set c be her crabby days, i be her irritable days, and s be the
generally surly. in these terms, the answer to the question is jc [ i [ sj. now
assuming that she is permitted at most one bad quality each day, the size of this
union of sets is given by the sum rule:
rule 15.2.2 (sum rule). if a1; a2; : : : ; an are disjoint sets, then:
ja1 [ a2 [ : : : [ anj d ja1j c ja2j c : : : c janj

thus, according to bart   s budget, lisa can be out-of-sorts for:

jc [ i [ sj d jcj c jij c jsj
d 20 c 40 c 60
d 120 days

notice that the sum rule holds only for a union of disjoint sets. finding the size
of a union of overlapping sets is a more complicated problem that we   ll take up in
section 15.9.

15.2.4 counting passwords
few counting problems can be solved with a single rule. more often, a solution is
a    urry of sums, products, bijections, and other methods.

for solving problems involving passwords, telephone numbers, and license plates,
the sum and product rules are useful together. for example, on a certain computer
system, a valid password is a sequence of between six and eight symbols. the    rst
symbol must be a letter (which can be lowercase or uppercase), and the remain-
ing symbols must be either letters or digits. how many different passwords are
possible?

let   s de   ne two sets, corresponding to valid symbols in the    rst and subsequent

positions in the password.

f d fa; b; : : : ; z; a; b; : : : ; zg
s d fa; b; : : : ; z; a; b; : : : ; z; 0; 1; : : : ; 9g

in these terms, the set of all possible passwords is:1

.f (cid:2) s 5/ [ .f (cid:2) s 6/ [ .f (cid:2) s 7/

1the notation s 5 means s (cid:2) s (cid:2) s (cid:2) s (cid:2) s.

   mcs        2017/6/5     19:42     page 617     #625

15.3. the generalized product rule

617

thus, the length-six passwords are in the set f (cid:2) s 5, the length-seven passwords
are in f (cid:2) s 6, and the length-eight passwords are in f (cid:2) s 7. since these sets
are disjoint, we can apply the sum rule and count the total number of possible
passwords as follows:

j.f (cid:2) s 5/ [ .f (cid:2) s 6/ [ .f (cid:2) s 7/j

d jf (cid:2) s 5j c jf (cid:2) s 6j c jf (cid:2) s 7j
d jfj (cid:1) jsj5 c jfj (cid:1) jsj6 c jfj (cid:1) jsj7
d 52 (cid:1) 625 c 52 (cid:1) 626 c 52 (cid:1) 627
(cid:25) 1:8 (cid:1) 1014 different passwords:

sum rule
product rule

15.3 the generalized product rule

in how many ways can, say, a nobel prize, a japan prize, and a pulitzer prize be
awarded to n people? this is easy to answer using our strategy of translating the
problem about awards into a problem about sequences. let p be the set of n people
taking the course. then there is a bijection from ways of awarding the three prizes
to the set p 3 wwd p (cid:2) p (cid:2) p . in particular, the assignment:

   barack wins a nobel, george wins a japan, and bill wins a pulitzer prize   

maps to the sequence .barack; george; bill/. by the product rule, we have jp 3j d
jpj3 d n3, so there are n3 ways to award the prizes to a class of n people. notice
that p 3 includes triples like .barack; bill; barack/ where one person wins more
than one prize.
but what if the three prizes must be awarded to different students? as before,
we could map the assignment to the triple .bill; george; barack/ 2 p 3. but this
function is no longer a bijection. for example, no valid assignment maps to the
triple .barack; bill; barack/ because now we   re not allowing barack to receive two
prizes. however, there is a bijection from prize assignments to the set:
s d f.x; y; z/ 2 p 3 j x, y and z are different peopleg

this reduces the original problem to a problem of counting sequences. unfortu-
nately, the product rule does not apply directly to counting sequences of this type
because the entries depend on one another; in particular, they must all be different.
however, a slightly sharper tool does the trick.

   mcs        2017/6/5     19:42     page 618     #626

618

chapter 15 cardinality rules

prizes for truly exceptional coursework
given everyone   s hard work on this material, the instructors considered award-
ing some prizes for truly exceptional coursework. here are three possible prize
categories:

best administrative critique we asserted that the quiz was closed-book. on
the cover page, one strong candidate for this award wrote,    there is no
book.   

awkward question award    okay, the left sock, right sock, and pants are in
an antichain, but how   even with assistance   could i put on all three at
once?   

best collaboration statement inspired by a student who wrote    i worked alone   

on quiz 1.

rule 15.3.1 (generalized product rule). let s be a set of length-k sequences. if
there are:

(cid:15) n1 possible    rst entries,
(cid:15) n2 possible second entries for each    rst entry,
:::
(cid:15) nk possible kth entries for each sequence of    rst k (cid:0) 1 entries,

then:

jsj d n1 (cid:1) n2 (cid:1) n3 (cid:1)(cid:1)(cid:1) nk

in the awards example, s consists of sequences .x; y; z/. there are n ways to
choose x, the recipient of prize #1. for each of these, there are n(cid:0)1 ways to choose
y, the recipient of prize #2, since everyone except for person x is eligible. for each
combination of x and y, there are n(cid:0) 2 ways to choose z, the recipient of prize #3,
because everyone except for x and y is eligible. thus, according to the generalized
product rule, there are

jsj d n (cid:1) .n (cid:0) 1/ (cid:1) .n (cid:0) 2/

ways to award the 3 prizes to different people.

   mcs        2017/6/5     19:42     page 619     #627

15.3. the generalized product rule

619

15.3.1 defective dollar bills
a dollar bill is defective if some digit appears more than once in the 8-digit serial
number. if you check your wallet, you   ll be sad to discover that defective bills
are all-too-common. in fact, how common are nondefective bills? assuming that
the digit portions of serial numbers all occur equally often, we could answer this
question by computing

fraction of nondefective bills d jfserial #   s with all digits differentgj

jfserial numbersgj

:

(15.1)

let   s    rst consider the denominator. here there are no restrictions; there are 10
possible    rst digits, 10 possible second digits, 10 third digits, and so on. thus, the
total number of 8-digit serial numbers is 108 by the product rule.

next, let   s turn to the numerator. now we   re not permitted to use any digit twice.
so there are still 10 possible    rst digits, but only 9 possible second digits, 8 possible
third digits, and so forth. thus, by the generalized product rule, there are

10 (cid:1) 9 (cid:1) 8 (cid:1) 7 (cid:1) 6 (cid:1) 5 (cid:1) 4 (cid:1) 3 d 10  

2

d 1;814;400

serial numbers with all digits different. plugging these results into equation 15.1,
we    nd:

fraction of nondefective bills d 1;814;400

100;000;000

d 1:8144%

15.3.2 a chess problem
in how many different ways can we place a pawn (p ), a knight (n ), and a bishop
(b) on a chessboard so that no two pieces share a row or a column? a valid con-
   guration is shown in figure 15.1(a), and an invalid con   guration is shown in fig-
ure 15.1(b).

first, we map this problem about chess pieces to a question about sequences.

there is a bijection from con   gurations to sequences

.rp ; cp ; rn ; cn ; rb ; cb /

where rp , rn and rb are distinct rows and cp , cn and cb are distinct columns.
in particular, rp is the pawn   s row cp is the pawn   s column rn is the knight   s
row, etc. now we can count the number of such sequences using the generalized
product rule:

(cid:15) rp is one of 8 rows

   mcs        2017/6/5     19:42     page 620     #628

620

chapter 15 cardinality rules

8 0z0z0z0z
7 z0z0m0z0
6 0z0z0z0z
5 z0z0z0z0
4 0a0z0z0z
3 z0z0z0z0
2 0z0z0o0z
1 z0z0z0z0
h

d

e

g

a

b

c

f

8 0z0z0z0z
7 z0z0z0z0
6 0z0zpz0z
5 z0z0z0z0
4 0z0z0z0z
3 z0a0znz0
2 0z0z0z0z
1 z0z0z0z0
h

a

b

d

e

g

c

f

(a) valid

(b) invalid

figure 15.1 two ways of placing a pawn (p), a knight (n), and a bishop (b) on
a chessboard. the con   guration shown in (b) is invalid because the bishop and the
knight are in the same row.
(cid:15) cp is one of 8 columns
(cid:15) rn is one of 7 rows (any one but rp )
(cid:15) cn is one of 7 columns (any one but cp )
(cid:15) rb is one of 6 rows (any one but rp or rn )
(cid:15) cb is one of 6 columns (any one but cp or cn )
thus, the total number of con   gurations is .8 (cid:1) 7 (cid:1) 6/2.
15.3.3 permutations
a permutation of a set s is a sequence that contains every element of s exactly
once. for example, here are all the permutations of the set fa; b; cg:

.a; b; c/
.b; c; a/

.a; c; b/
.c; a; b/

.b; a; c/
.c; b; a/

how many permutations of an n-element set are there? well, there are n choices
for the    rst element. for each of these, there are n (cid:0) 1 remaining choices for the
second element. for every combination of the    rst two elements, there are n (cid:0) 2
ways to choose the third element, and so forth. thus, there are a total of

n (cid:1) .n (cid:0) 1/ (cid:1) .n (cid:0) 2/(cid:1)(cid:1)(cid:1) 3 (cid:1) 2 (cid:1) 1 d n  

permutations of an n-element set. in particular, this formula says that there are

   mcs        2017/6/5     19:42     page 621     #629

15.4. the division rule

621

3   d 6 permutations of the 3-element set fa; b; cg, which is the number we found
above.

permutations will come up again in this course approximately 1.6 bazillion times.
in fact, permutations are the reason why factorial comes up so often and why we
taught you stirling   s approximation:

(cid:16) n

 n

e

2(cid:25) n

:

n   (cid:24) p

15.4 the division rule

counting ears and dividing by two is a silly way to count the number of people in
a room, but this approach is representative of a powerful counting principle.

a k-to-1 function maps exactly k elements of the domain to every element of
the codomain. for example, the function mapping each ear to its owner is 2-to-1.
similarly, the function mapping each    nger to its owner is 10-to-1, and the function
mapping each    nger and toe to its owner is 20-to-1. the general rule is:
rule 15.4.1 (division rule). if f w a ! b is k-to-1, then jaj d k (cid:1) jbj.
for example, suppose a is the set of ears in the room and b is the set of people.
there is a 2-to-1 mapping from ears to people, so by the division rule, jaj d
2(cid:1)jbj. equivalently, jbj d jaj=2, expressing what we knew all along: the number
of people is half the number of ears. unlikely as it may seem, many counting
problems are made much easier by initially counting every item multiple times and
then correcting the answer using the division rule. let   s look at some examples.

15.4.1 another chess problem
in how many different ways can you place two identical rooks on a chessboard
so that they do not share a row or column? a valid con   guration is shown in
figure 15.2(a), and an invalid con   guration is shown in figure 15.2(b).

let a be the set of all sequences

.r1; c1; r2; c2/

where r1 and r2 are distinct rows and c1 and c2 are distinct columns. let b be the
set of all valid rook con   gurations. there is a natural function f from set a to set
b; in particular, f maps the sequence .r1; c1; r2; c2/ to a con   guration with one
rook in row r1, column c1 and the other rook in row r2, column c2.

   mcs        2017/6/5     19:42     page 622     #630

622

chapter 15 cardinality rules

8 0z0z0z0s
7 z0z0z0z0
6 0z0z0z0z
5 z0z0z0z0
4 0z0z0z0z
3 z0z0z0z0
2 0z0z0z0z
1 s0z0z0z0
h

d

e

g

a

b

c

f

8 0z0z0z0z
7 z0z0z0z0
6 0z0s0z0z
5 z0z0z0z0
4 0z0z0z0z
3 z0z0z0z0
2 0z0z0z0z
1 z0zrz0z0
h

a

b

d

e

g

c

f

(a) valid

(b) invalid

figure 15.2 two ways to place 2 rooks (r) on a chessboard. the con   guration
in (b) is invalid because the rooks are in the same column.

but now there   s a snag. consider the sequences:

.1; a; 8; h/

and

.8; h; 1; a/

the    rst sequence maps to a con   guration with a rook in the lower-left corner and
a rook in the upper-right corner. the second sequence maps to a con   guration with
a rook in the upper-right corner and a rook in the lower-left corner. the problem is
that those are two different ways of describing the same con   guration! in fact, this
arrangement is shown in figure 15.2(a).
more generally, the function f maps exactly two sequences to every board con-
   guration; f is a 2-to-1 function. thus, by the quotient rule, jaj d 2 (cid:1) jbj. rear-
ranging terms gives:

jbj d jaj

d .8 (cid:1) 7/2

:

2

2

in the second equality, we   ve computed the size of a using the general product
rule just as in the earlier chess problem.

15.4.2 knights of the round table
in how many ways can king arthur arrange to seat his n different knights at his
round table? a seating de   nes who sits where. two seatings are considered to be
the same arrangement if each knight sits between the same two knights in both
seatings. an equivalent way to say this is that two seatings yield the same arrange-
ment when they yield the same sequence of knights starting at knight number 1

   mcs        2017/6/5     19:42     page 623     #631

15.5. counting subsets

623

and going clockwise around the table. for example, the following two seatings
determine the same arrangement:

# k1
"!

k2

k4

# k3
"!

k4

k2

k3

k1

a seating is determined by the sequence of knights going clockwise around the
table starting at the top seat. so seatings correspond to permutations of the knights,
and there are n   of them. for example,

# k2
(cid:0)! "!

k3

k4

.k2; k4; k1; k3/

two seatings determine the same arrangement if they are the same when the
table is rotated so knight 1 is at the top seat. for example with n d 4, there are 4
different sequences that correspond to the seating arrangement:

# k1
(cid:0)! "!

k4

k3

.k2; k4; k1; k3/
.k4; k1; k3; k2/
.k1; k3; k2; k4/
.k3; k2; k4; k1/

k1

k2

this mapping from seating to arrangments is actually an n-to-1 function, since all n
cyclic shifts of the sequence of knights in the seating map to the same arrangement.
therefore, by the division rule, the number of circular seating arrangements is:

# seatings

n

d n  
n

d .n (cid:0) 1/   :

15.5 counting subsets

how many k-element subsets of an n-element set are there? this question arises
all the time in various guises:

   mcs        2017/6/5     19:42     page 624     #632

624

chapter 15 cardinality rules

(cid:15) in how many ways can i select 5 books from my collection of 100 to bring
on vacation?
(cid:15) how many different 13-card bridge hands can be dealt from a 52-card deck?
(cid:15) in how many ways can i select 5 toppings for my pizza if there are 14 avail-
able toppings?

k

n

 

this number comes up so often that there is a special notation for it:

wwd the number of k-element subsets of an n-element set.

!
the expression(cid:0)n
(cid:1) is read    n choose k.    now we can immediately express the
(cid:15) i can select 5 books from 100 in(cid:0)100
(cid:15) there are(cid:0)52
(cid:1) different bridge hands.
(cid:1) different 5-topping pizzas, if 14 toppings are available.
(cid:15) there are(cid:0)14

answers to all three questions above:

(cid:1) ways.

13

k

5

5

15.5.1 the subset rule
we can derive a simple formula for the n choose k number using the division rule.
we do this by mapping any permutation of an n-element set fa1; : : : ; ang into a k-
element subset simply by taking the    rst k elements of the permutation. that is,
the permutation a1a2 : : : an will map to the set fa1; a2; : : : ; akg.
notice that any other permutation with the same    rst k elements a1; : : : ; ak in
any order and the same remaining elements n (cid:0) k elements in any order will also
map to this set. what   s more, a permutation can only map to fa1; a2; : : : ; akg
if its    rst k elements are the elements a1; : : : ; ak in some order. since there are
k   possible permutations of the    rst k elements and .n (cid:0) k/   permutations of the
remaining elements, we conclude from the product rule that exactly k  .n (cid:0) k/  
permutations of the n-element set map to the particular subset s. in other words,
the mapping from permutations to k-element subsets is k  .n (cid:0) k/  -to-1.
but we know there are n   permutations of an n-element set, so by the division

rule, we conclude that

which proves:

n   d k  .n (cid:0) k/  

 

!

n

k

   mcs        2017/6/5     19:42     page 625     #633

15.6. sequences with repetitions

625

rule 15.5.1 (subset rule). the number of k-element subsets of an n-element set is

 

!

n

k

d

n  

k   .n (cid:0) k/  

:

notice that this works even for 0-element subsets: n  =0  n   d 1. here we use the
fact that 0   is a product of 0 terms, which by convention2 equals 1.

15.5.2 bit sequences
how many n-bit sequences contain exactly k ones? we   ve already seen the straight-
forward bijection between subsets of an n-element set and n-bit sequences. for
example, here is a 3-element subset of fx1; x2; : : : ; x8g and the associated 8-bit
sequence:

f x1;

.

1;

0; 0;

x4; x5
1;
1;

g
0; 0; 0 /

notice that this sequence has exactly 3 ones, each corresponding to an element
of the 3-element subset. more generally, the n-bit sequences corresponding to a
k-element subset will have exactly k ones. so by the bijection rule,

corollary 15.5.2. the number of n-bit sequences with exactly k ones is

 

!

n

k

.

also, the bijection between selections of    avored donuts and bit sequences of

lemma 15.1.1 now implies,

corollary 15.5.3. the number of ways to select n donuts when k    avors are avail-
able is

 
n c .k (cid:0) 1/

!

:

n

15.6 sequences with repetitions

15.6.1 sequences of subsets
choosing a k-element subset of an n-element set is the same as splitting the set
into a pair of subsets: the    rst subset of size k and the second subset consisting of
the remaining n (cid:0) k elements. so, the subset rule can be understood as a rule for
counting the number of such splits into pairs of subsets.

2we don   t use it here, but a sum of zero terms equals 0.

   mcs        2017/6/5     19:42     page 626     #634

626

chapter 15 cardinality rules

we can generalize this to a way to count splits into more than two subsets. let
a be an n-element set and k1; k2; : : : ; km be nonnegative integers whose sum is n.
a .k1; k2; : : : ; km/-split of a is a sequence

.a1; a2; : : : ; am/

where the ai are disjoint subsets of a and jaij d ki for i d 1; : : : ; m.
to count the number of splits we take the same approach as for the subset
rule. namely, we map any permutation a1a2 : : : an of an n-element set a into
a .k1; k2; : : : ; km/-split by letting the 1st subset in the split be the    rst k1 elements
of the permutation, the 2nd subset of the split be the next k2 elements, . . . , and the
mth subset of the split be the    nal km elements of the permutation. this map is
a k1   k2   (cid:1)(cid:1)(cid:1) km  -to-1 function from the n   permutations to the .k1; k2; : : : ; km/-
splits of a, so from the division rule we conclude the subset split rule:
de   nition 15.6.1. for n; k1; : : : ; km 2 n, such that k1ck2c(cid:1)(cid:1)(cid:1)ckm d n, de   ne
the multinomial coef   cient 

!

n

wwd

n  

:

k1; k2; : : : ; km

k1   k2   : : : km  

rule 15.6.2 (subset split rule). the number of .k1; k2; : : : ; km/-splits of an n-
element set is

 

!

:

n

k1; : : : ; km

15.6.2 the bookkeeper rule
we can also generalize our count of n-bit sequences with k ones to counting se-
quences of n letters over an alphabet with more than two letters. for example,
how many sequences can be formed by permuting the letters in the 10-letter word
bookkeeper?

notice that there are 1 b, 2 o   s, 2 k   s, 3 e   s, 1 p, and 1 r in bookkeeper. this
leads to a straightforward bijection between permutations of bookkeeper and
(1,2,2,3,1,1)-splits of f1; 2; : : : ; 10g. namely, map a permutation to the sequence
of sets of positions where each of the different letters occur.

for example, in the permutation bookkeeper itself, the b is in the 1st posi-
tion, the o   s occur in the 2nd and 3rd positions, k   s in 4th and 5th, the e   s in the
6th, 7th and 9th, p in the 8th, and r is in the 10th position. so bookkeeper
maps to

.f1g;f2; 3g;f4; 5g;f6; 7; 9g;f8g;f10g/:

   mcs        2017/6/5     19:42     page 627     #635

15.6. sequences with repetitions

627

from this bijection and the subset split rule, we conclude that the number of ways
to rearrange the letters in the word bookkeeper is:

total letters

           
3             
2             

10  

k   s

e   s

1             

b   s

2             

o   s

1             

p   s

1             

r   s

this example generalizes directly to an exceptionally useful counting principle

which we will call the

rule 15.6.3 (bookkeeper rule). let l1; : : : ; lm be distinct elements. the number
of sequences with k1 occurrences of l1, and k2 occurrences of l2, . . . , and km
occurrences of lm is

 
k1 c k2 c (cid:1)(cid:1)(cid:1) c km

!

k1; : : : ; km

:

for example, suppose you are planning a 20-mile walk, which should include 5
northward miles, 5 eastward miles, 5 southward miles, and 5 westward miles. how
many different walks are possible?

there is a bijection between such walks and sequences with 5 n   s, 5 e   s, 5 s   s,

and 5 w   s. by the bookkeeper rule, the number of such sequences is:

20  
.5  /4 :

a word about words
someday you might refer to the subset split rule or the bookkeeper rule in front
of a roomful of colleagues and discover that they   re all staring back at you blankly.
this is not because they   re dumb, but rather because we made up the name    book-
keeper rule.    however, the rule is excellent and the name is apt, so we suggest
that you play through:    you know? the bookkeeper rule? don   t you guys know
anything?   

the bookkeeper rule is sometimes called the    formula for permutations with
indistinguishable objects.    the size k subsets of an n-element set are sometimes
called k-combinations. other similar-sounding descriptions are    combinations with
repetition, permutations with repetition, r-permutations, permutations with indis-
tinguishable objects,    and so on. however, the counting rules we   ve taught you are
suf   cient to solve all these sorts of problems without knowing this jargon, so we
won   t burden you with it.

   mcs        2017/6/5     19:42     page 628     #636

628

chapter 15 cardinality rules

15.6.3 the binomial theorem
counting gives insight into one of the basic theorems of algebra. a binomial is a
sum of two terms, such as a c b. now consider its fourth power .a c b/4.
by repeatedly using distributivity of products over sums to multiply out this 4th

power expression completely, we get

.a c b/4 d

aaaa c aaab c aaba c aabb
c abaa c abab c abba c abbb
c baaa c baab c baba c babb
c bbaa c bbab c bbba c bbbb

 

!

d

n

4

2

 

notice that there is one term for every sequence of a   s and b   s. so there are 24
terms, and the number of terms with k copies of b and n (cid:0) k copies of a is:

n  

by the bookkeeper rule. hence, the coef   cient of an(cid:0)kbk is(cid:0)n
!

k   .n (cid:0) k/  
 
!

 

!

 

!

 

k

k

(cid:1). so for n d 4,
 

!

(cid:1) a4b0 c

(cid:1) a3b1 c

(cid:1) a2b2 c

(cid:1) a1b3 c

this means:
.a c b/4 d

4

0

4

1

(cid:1) a0b4

4

4

4

3

in general, this reasoning gives the binomial theorem:
theorem 15.6.4 (binomial theorem). for all n 2 n and a; b 2 r:

.a c b/n d nx

n

k

kd0

!
an(cid:0)kbk

the binomial theorem explains why the n choose k number is called a binomial

coef   cient.

this reasoning about binomials extends nicely to multinomials, which are sums

of two or more terms. for example, suppose we wanted the coef   cient of

bo2k2e3pr

in the expansion of .b c o c k c e c p c r/10. each term in this expansion is a
product of 10 variables where each variable is one of b, o, k, e, p or r. now, the
coef   cient of bo2k2e3pr is the number of those terms with exactly 1 b, 2 o   s, 2

   mcs        2017/6/5     19:42     page 629     #637

15.7. counting practice: poker hands

629

k   s, 3 e   s, 1 p and 1 r. and the number of such terms is precisely the number of
rearrangements of the word bookkeeper:

 

!

10

1; 2; 2; 3; 1; 1

d

10  

1   2   2   3   1   1  

:

this reasoning extends to a general theorem:
theorem 15.6.5 (multinomial theorem). for all n 2 n,

.z1 c z2 c (cid:1)(cid:1)(cid:1) c zm/n d x

 

n

k1;:::;km2n
k1c(cid:1)(cid:1)(cid:1)ckmdn

k1; k2; : : : ; km

!

zk1
1 zk2

2

(cid:1)(cid:1)(cid:1) zkm
m :

but you   ll be better off remembering the reasoning behind the multinomial the-

orem rather than this cumbersome formal statement.

15.7 counting practice: poker hands

five-card draw is a card game in which each player is initially dealt a hand con-
sisting of 5 cards from a deck of 52 cards.3 the number of different hands in
five-card draw is the number of 5-element subsets of a 52-element set, which is

 

!

52

5

d 2; 598; 960:

let   s get some counting practice by working out the number of hands with various
special properties.

3there are 52 cards in a standard deck. each card has a suit and a rank. there are four suits:

(cid:127) (spades)

~ (hearts)

| (clubs)

} (diamonds)

and there are 13 ranks, listed here from lowest to highest:

ace
a ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ;

jack
j ;

queen

q ;

king
k :

thus, for example, 8~ is the 8 of hearts and a(cid:127) is the ace of spades.

   mcs        2017/6/5     19:42     page 630     #638

630

chapter 15 cardinality rules

15.7.1 hands with a four-of-a-kind
a four-of-a-kind is a set of four cards with the same rank. how many different
hands contain a four-of-a-kind? here are a couple examples:

f8(cid:127); 8}; q~; 8~; 8|g
fa|; 2|; 2~; 2}; 2(cid:127)g

as usual, the    rst step is to map this question to a sequence-counting problem. a
hand with a four-of-a-kind is completely described by a sequence specifying:

1. the rank of the four cards.

2. the rank of the extra card.

3. the suit of the extra card.

thus, there is a bijection between hands with a four-of-a-kind and sequences con-
sisting of two distinct ranks followed by a suit. for example, the three hands above
are associated with the following sequences:

.8; q;~/ $ f 8(cid:127); 8}; 8~; 8|; q~g
.2; a;|/ $ f2|; 2~; 2}; 2(cid:127); a|g

now we need only count the sequences. there are 13 ways to choose the    rst rank,
12 ways to choose the second rank, and 4 ways to choose the suit. thus, by the
generalized product rule, there are 13 (cid:1) 12 (cid:1) 4 d 624 hands with a four-of-a-kind.
this means that only 1 hand in about 4165 has a four-of-a-kind. not surprisingly,
four-of-a-kind is considered to be a very good poker hand!

15.7.2 hands with a full house
a full house is a hand with three cards of one rank and two cards of another rank.
here are some examples:

f2(cid:127); 2|; 2}; j|; j}g
f5}; 5|; 5~; 7~; 7|g

again, we shift to a problem about sequences. there is a bijection between full
houses and sequences specifying:

   mcs        2017/6/5     19:42     page 631     #639

15.7. counting practice: poker hands

631

1. the rank of the triple, which can be chosen in 13 ways.

2. the suits of the triple, which can be selected in(cid:0)4
4. the suits of the pair, which can be selected in(cid:0)4

3. the rank of the pair, which can be chosen in 12 ways.

(cid:1) ways.
(cid:1) ways.

3

2

the example hands correspond to sequences as shown below:

.2;f(cid:127);|;}g; j;f|;}g/ $ f2(cid:127); 2|; 2}; j|; j}g
.5;f};|;~g; 7;f~;|g/ $ f5}; 5|; 5~; 7~; 7|g

by the generalized product rule, the number of full houses is:

 

!

4

3

13 (cid:1)

(cid:1) 12 (cid:1)

 

!

4

2

:

we   re on a roll   but we   re about to hit a speed bump.

15.7.3 hands with two pairs
how many hands have two pairs; that is, two cards of one rank, two cards of
another rank, and one card of a third rank? here are examples:

f3}; 3(cid:127); q}; q~; a|g
f9~; 9}; 5~; 5|; k(cid:127)g

each hand with two pairs is described by a sequence consisting of:

3. the rank of the second pair, which can be chosen in 12 ways.

1. the rank of the    rst pair, which can be chosen in 13 ways.

2. the suits of the    rst pair, which can be selected(cid:0)4
(cid:1) ways.
4. the suits of the second pair, which can be selected in(cid:0)4
6. the suit of the extra card, which can be selected in(cid:0)4

5. the rank of the extra card, which can be chosen in 11 ways.

(cid:1) ways.
(cid:1) d 4 ways.

2

2

1

   mcs        2017/6/5     19:42     page 632     #640

632

chapter 15 cardinality rules

thus, it might appear that the number of hands with two pairs is:

 

!

4

2

 

!

4

2

13 (cid:1)

(cid:1) 12 (cid:1)

(cid:1) 11 (cid:1) 4:

wrong answer! the problem is that there is not a bijection from such sequences to
hands with two pairs. this is actually a 2-to-1 mapping. for example, here are the
pairs of sequences that map to the hands given above:

.3;f};(cid:127)g; q;f};~g; a;|/ &
.q;f};~g; 3;f};(cid:127)g; a;|/ %
.9;f~;}g; 5;f~;|g; k;(cid:127)/ &
.5;f~;|g; 9;f~;}g; k;(cid:127)/ %

f3}; 3(cid:127); q}; q~; a|g

f9~; 9}; 5~; 5|; k(cid:127)g

the problem is that nothing distinguishes the    rst pair from the second. a pair of
5   s and a pair of 9   s is the same as a pair of 9   s and a pair of 5   s. we avoided this
dif   culty in counting full houses because, for example, a pair of 6   s and a triple of
kings is different from a pair of kings and a triple of 6   s.

we ran into precisely this dif   culty last time, when we went from counting ar-
rangements of different pieces on a chessboard to counting arrangements of two
identical rooks. the solution then was to apply the division rule, and we can do
the same here. in this case, the division rule says there are twice as many sequences
as hands, so the number of hands with two pairs is actually:

13 (cid:1)(cid:0)4

(cid:1) (cid:1) 12 (cid:1)(cid:0)4

(cid:1) (cid:1) 11 (cid:1) 4

2

2

:

2

another approach
the preceding example was disturbing! one could easily overlook the fact that the
mapping was 2-to-1 on an exam, fail the course, and turn to a life of crime. you
can make the world a safer place in two ways:

1. whenever you use a mapping f w a ! b to translate one counting problem
to another, check that the same number of elements in a are mapped to each
element in b. if k elements of a map to each of element of b, then apply
the division rule using the constant k.

2. as an extra check, try solving the same problem in a different way. multiple
approaches are often available   and all had better give the same answer!

   mcs        2017/6/5     19:42     page 633     #641

15.7. counting practice: poker hands

633

(sometimes different approaches give answers that look different, but turn
out to be the same after some algebra.)

we already used the    rst method; let   s try the second. there is a bijection be-

tween hands with two pairs and sequences that specify:

(cid:1) ways.
1. the ranks of the two pairs, which can be chosen in(cid:0)13
2. the suits of the lower-rank pair, which can be selected in(cid:0)4
(cid:1) ways.
(cid:1) ways.
3. the suits of the higher-rank pair, which can be selected in(cid:0)4
5. the suit of the extra card, which can be selected in(cid:0)4
(cid:1) d 4 ways.

2
4. the rank of the extra card, which can be chosen in 11 ways.

2

2

1
for example, the following sequences and hands correspond:

.f3; qg;f};(cid:127)g;f};~g; a;|/ $ f3}; 3(cid:127); q}; q~; a|g
.f9; 5g;f~;|g;f~;}g; k;(cid:127)/ $ f9~; 9}; 5~; 5|; k(cid:127)g

thus, the number of hands with two pairs is:

 

!

 

!

4

2

(cid:1)

(cid:1)

 

!

4

2

13

2

(cid:1) 11 (cid:1) 4:

this is the same answer we got before, though in a slightly different form.

15.7.4 hands with every suit
how many hands contain at least one card from every suit? here is an example of
such a hand:

f7}; k|; 3}; a~; 2(cid:127)g

each such hand is described by a sequence that speci   es:

1. the ranks of the diamond, the club, the heart, and the spade, which can be

selected in 13 (cid:1) 13 (cid:1) 13 (cid:1) 13 d 134 ways.

2. the suit of the extra card, which can be selected in 4 ways.

3. the rank of the extra card, which can be selected in 12 ways.

   mcs        2017/6/5     19:42     page 634     #642

634

chapter 15 cardinality rules

for example, the hand above is described by the sequence:

.7; k; a; 2;}; 3/ $ f7}; k|; a~; 2(cid:127); 3}g:

are there other sequences that correspond to the same hand? there is one more!
we could equally well regard either the 3} or the 7} as the extra card, so this
is actually a 2-to-1 mapping. here are the two sequences corresponding to the
example hand:

.7; k; a; 2;}; 3/ &
.3; k; a; 2;}; 7/ %

f7}; k|; a~; 2(cid:127); 3}g

therefore, the number of hands with every suit is:

134 (cid:1) 4 (cid:1) 12

:

2

15.8 the pigeonhole principle

here is an old puzzle:

a drawer in a dark room contains red socks, green socks, and blue
socks. how many socks must you withdraw to be sure that you have a
matching pair?

for example, picking out three socks is not enough; you might end up with one

red, one green, and one blue. the solution relies on the

pigeonhole principle

if there are more pigeons than holes they occupy, then at least two
pigeons must be in the same hole.

what pigeons have to do with selecting footwear under poor lighting conditions
may not be immediately obvious, but if we let socks be pigeons and the colors be
three pigeonholes, then as soon as you pick four socks, there are bound to be two
in the same hole, that is, with the same color. so four socks are enough to ensure
a matched pair. for example, one possible mapping of four socks to three colors is
shown in figure 15.3.

a rigorous statement of the principle goes this way:

   mcs        2017/6/5     19:42     page 635     #643

15.8. the pigeonhole principle

635

figure 15.3 one possible mapping of four socks to three colors.

rule 15.8.1 (pigeonhole principle). if jaj > jbj, then for every total function
f w a ! b, there exist two different elements of a that are mapped by f to the
same element of b.

stating the principle this way may be less intuitive, but it should now sound
familiar: it is simply the contrapositive of the mapping rules injective case (4.6).
here, the pigeons form set a, the pigeonholes are the set b, and f describes which
hole each pigeon occupies.

mathematicians have come up with many ingenious applications for the pigeon-
hole principle. if there were a cookbook procedure for generating such arguments,
we   d give it to you. unfortunately, there isn   t one. one helpful tip, though: when
you try to solve a problem with the pigeonhole principle, the key is to clearly iden-
tify three things:

1. the set a (the pigeons).

2. the set b (the pigeonholes).

3. the function f (the rule for assigning pigeons to pigeonholes).

15.8.1 hairs on heads
there are a number of generalizations of the pigeonhole principle. for example:
rule 15.8.2 (generalized pigeonhole principle). if jaj > k (cid:1) jbj, then every total
function f w a ! b maps at least kc1 different elements of a to the same element
of b.

1st sockaf2nd sock3rd sock4th sockredbgreenblue   mcs        2017/6/5     19:42     page 636     #644

636

chapter 15 cardinality rules

for example, if you pick two people at random, surely they are extremely un-
likely to have exactly the same number of hairs on their heads. however, in the
remarkable city of boston, massachusetts, there is a group of three people who
have exactly the same number of hairs! of course, there are many completely bald
people in boston, and they all have zero hairs. but we   re talking about non-bald
people; say a person is non-bald if they have at least ten thousand hairs on their
head.
boston has about 500,000 non-bald people, and the number of hairs on a person   s
head is at most 200,000. let a be the set of non-bald people in boston, let b d
f10; 000; 10; 001; : : : ; 200; 000g, and let f map a person to the number of hairs on
his or her head. since jaj > 2jbj, the generalized pigeonhole principle implies
that at least three people have exactly the same number of hairs. we don   t know
who they are, but we know they exist!

15.8.2 subsets with the same sum
for your reading pleasure, we have displayed ninety 25-digit numbers in fig-
ure 15.4. are there two different subsets of these 25-digit numbers that have the
same sum? for example, maybe the sum of the last ten numbers in the    rst column
is equal to the sum of the    rst eleven numbers in the second column?

finding two subsets with the same sum may seem like a silly puzzle, but solving
these sorts of problems turns out to be useful in diverse applications such as    nding
good ways to    t packages into shipping containers and decoding secret messages.
it turns out that it is hard to    nd different subsets with the same sum, which
is why this problem arises in cryptography. but it is easy to prove that two such
subsets exist. that   s where the pigeonhole principle comes in.
let a be the collection of all subsets of the 90 numbers in the list. now the
sum of any subset of numbers is at most 90 (cid:1) 1025, since there are only 90 numbers
and every 25-digit number is less than 1025. so let b be the the integer interval
zi nt v090 (cid:1) 1025, and let f map each subset of numbers (in a) to its sum (in b).
we proved that an n-element set has 2n different subsets in section 15.2. there-

fore:

on the other hand:

jaj d 290 (cid:21) 1:237 (cid:2) 1027

jbj d 90 (cid:1) 1025 c 1   0:901 (cid:2) 1027:

both quantities are enormous, but jaj is a bit greater than jbj. this means that f
maps at least two elements of a to the same element of b. in other words, by the
pigeonhole principle, two different subsets must have the same sum!

   mcs        2017/6/5     19:42     page 637     #645

15.8. the pigeonhole principle

637

0020480135385502964448038
5763257331083479647409398
0489445991866915676240992
5800949123548989122628663
1082662032430379651370981
6042900801199280218026001
1178480894769706178994993
6116171789137737896701405
1253127351683239693851327
6144868973001582369723512
1301505129234077811069011
6247314593851169234746152
1311567111143866433882194
6814428944266874963488274
1470029452721203587686214
6870852945543886849147881
1578271047286257499433886
6914955508120950093732397
1638243921852176243192354
6949632451365987152423541
1763580219131985963102365
7128211143613619828415650
1826227795601842231029694
7173920083651862307925394
1843971862675102037201420
7215654874211755676220587
2396951193722134526177237
7256932847164391040233050
2781394568268599801096354
7332822657075235431620317
2796605196713610405408019
7426441829541573444964139
2931016394761975263190347
7632198126531809327186321
2933458058294405155197296
7712154432211912882310511
3075514410490975920315348
7858918664240262356610010
8149436716871371161932035
3111474985252793452860017
7898156786763212963178679
3145621587936120118438701
8147591017037573337848616
3148901255628881103198549
5692168374637019617423712

3171004832173501394113017
8247331000042995311646021
3208234421597368647019265
8496243997123475922766310
3437254656355157864869113
8518399140676002660747477
3574883393058653923711365
8543691283470191452333763
3644909946040480189969149
8675309258374137092461352
3790044132737084094417246
8694321112363996867296665
3870332127437971355322815
8772321203608477245851154
4080505804577801451363100
8791422161722582546341091
4167283461025702348124920
9062628024592126283973285
4235996831123777788211249
9137845566925526349897794
4670939445749439042111220
9153762966803189291934419
4815379351865384279613427
9270880194077636406984249
4837052948212922604442190
9324301480722103490379204
5106389423855018550671530
9436090832146695147140581
5142368192004769218069910
9475308159734538249013238
5181234096130144084041856
9492376623917486974923202
5198267398125617994391348
9511972558779880288252979
5317592940316231219758372
9602413424619187112552264
5384358126771794128356947
9631217114906129219461111
3157693105325111284321993
5439211712248901995423441
9908189853102753335981319
5610379826092838192760458
9913237476341764299813987
5632317555465228677676044
8176063831682536571306791

figure 15.4 ninety 25-digit numbers. can you    nd two different subsets of these
numbers that have the same sum?

   mcs        2017/6/5     19:42     page 638     #646

638

chapter 15 cardinality rules

notice that this proof gives no indication which two sets of numbers have the

same sum. this frustrating variety of argument is called a nonconstructive proof.

the $100 prize for two same-sum subsets
to see if it was possible to actually    nd two different subsets of the ninety 25-digit
numbers with the same sum, we offered a $100 prize to the    rst student who did it.
we didn   t expect to have to pay off this bet, but we underestimated the ingenuity
and initiative of the students. one computer science major wrote a program that
cleverly searched only among a reasonably small set of    plausible    sets, sorted
them by their sums, and actually found a couple with the same sum. he won the
prize. a few days later, a math major    gured out how to reformulate the sum
problem as a    lattice basis reduction    problem; then he found a software package
implementing an ef   cient basis reduction procedure, and using it, he very quickly
found lots of pairs of subsets with the same sum. he didn   t win the prize, but he
got a standing ovation from the class   staff included.

the $500 prize for sets with distinct subset sums
how can we construct a set of n positive integers such that all its subsets have
distinct sums? one way is to use powers of two:
f1; 2; 4; 8; 16g

this approach is so natural that one suspects all other such sets must involve
larger numbers. (for example, we could safely replace 16 by 17, but not by 15.)
remarkably, there are examples involving smaller numbers. here is one:

f6; 9; 11; 12; 13g

one of the top mathematicians of the twentieth century, paul erd  os, conjectured
in 1931 that there are no such sets involving signi   cantly smaller numbers. more
precisely, he conjectured that the largest number in such a set must be greater
than c2n for some constant c > 0. he offered $500 to anyone who could prove
or disprove his conjecture, but the problem remains unsolved.

15.8.3 a magic trick
a magician sends an assistant into the audience with a deck of 52 cards while the
magician looks away.

five audience members each select one card from the deck. the assistant then
gathers up the    ve cards and holds up four of them so the magician can see them.

   mcs        2017/6/5     19:42     page 639     #647

15.8. the pigeonhole principle

639

the magician concentrates for a short time and then correctly names the secret,
   fth card!

since we don   t really believe the magician can read minds, we know the assis-
tant has somehow communicated the secret card to the magician. real magicians
and assistants are not to be trusted, so we expect that the assistant would secretly
signal the magician with coded phrases or body language, but for this trick they
don   t have to cheat. in fact, the magician and assistant could be kept out of sight
of each other while some audience member holds up the 4 cards designated by the
assistant for the magician to see.
of course, without cheating, there is still an obvious way the assistant can com-
municate to the magician: he can choose any of the 4   d 24 permutations of the
4 cards as the order in which to hold up the cards. however, this alone won   t
quite work: there are 48 cards remaining in the deck, so the assistant doesn   t have
enough choices of orders to indicate exactly what the secret card is (though he
could narrow it down to two cards).

15.8.4 the secret
the method the assistant can use to communicate the    fth card exactly is a nice
application of what we know about counting and matching.

the assistant has a second legitimate way to communicate: he can choose which
of the    ve cards to keep hidden. of course, it   s not clear how the magician could
determine which of these    ve possibilities the assistant selected by looking at the
four visible cards, but there is a way, as we   ll now explain.

the problem facing the magician and assistant is actually a bipartite matching
problem. each vertex on the left will correspond to the information available to the

assistant, namely, a set of 5 cards. so the set x of left-hand vertices will have(cid:0)52

(cid:1)

5

elements.

each vertex on the right will correspond to the information available to the ma-
gician, namely, a sequence of 4 distinct cards. so the set y of right-hand vertices
will have 52 (cid:1) 51 (cid:1) 50 (cid:1) 49 elements. when the audience selects a set of 5 cards, then
the assistant must reveal a sequence of 4 cards from that hand. this constraint is
represented by having an edge between a set of 5 cards on the left and a sequence
of 4 cards on the right precisely when every card in the sequence is also in the
set. this speci   es the bipartite graph. some edges are shown in the diagram in
figure 15.5.

for example,

f8~; k(cid:127); q(cid:127); 2}; 6}g

(15.2)

is an element of x on the left.
if the audience selects this set of 5 cards, then
there are many different 4-card sequences on the right in set y that the assis-

   mcs        2017/6/5     19:42     page 640     #648

640

chapter 15 cardinality rules

figure 15.5 the bipartite graph where the nodes on the left correspond to sets
of 5 cards and the nodes on the right correspond to sequences of 4 cards. there is
an edge between a set and a sequence whenever all the cards in the sequence are
contained in the set.
tant could choose to reveal, including .8~; k(cid:127); q(cid:127); 2}/, .k(cid:127); 8~; q(cid:127); 2}/ and
.k(cid:127); 8~; 6}; q(cid:127)/.
what the magician and his assistant need to perform the trick is a matching for
the x vertices. if they agree in advance on some matching, then when the audience
selects a set of 5 cards, the assistant reveals the matching sequence of 4 cards. the
magician uses the matching to    nd the audience   s chosen set of 5 cards, and so he
can name the one not already revealed.

for example, suppose the assistant and magician agree on a matching containing

the two bold edges in figure 15.5. if the audience selects the set

f8~; k(cid:127); q(cid:127); 9|; 6}g;
then the assistant reveals the corresponding sequence
.k(cid:127); 8~; 6}; q(cid:127)/:

(15.3)

(15.4)

using the matching, the magician sees that the hand (15.3) is matched to the se-
quence (15.4), so he can name the one card in the corresponding set not already
revealed, namely, the 9|. notice that the fact that the sets are matched, that is,
that different sets are paired with distinct sequences, is essential. for example, if
the audience picked the previous hand (15.2), it would be possible for the assistant

f8~;k   ;q   ;2};6}gf8~;k   ;q   ;9|;6}gfk   ;8~;6};q   gfk   ;8~;q   ;2}gf8~;k   ;q   ;2}g                                             xdallsets of 5 cardsydallsequences of 4distinct cards   mcs        2017/6/5     19:42     page 641     #649

15.8. the pigeonhole principle

641

to reveal the same sequence (15.4), but he better not do that; if he did, then the
magician would have no way to tell if the remaining card was the 9| or the 2}.
so how can we be sure the needed matching can be found? the answer is that
each vertex on the left has degree 5(cid:1) 4   d 120, since there are    ve ways to select the
card kept secret and there are 4   permutations of the remaining 4 cards. in addition,
each vertex on the right has degree 48, since there are 48 possibilities for the    fth
card. so this graph is degree-constrained according to de   nition 12.5.5, and so has
a matching by theorem 12.5.6.

in fact, this reasoning shows that the magician could still pull off the trick if 120
cards were left instead of 48, that is, the trick would work with a deck as large as
124 different cards   without any magic!

15.8.5 the real secret
but wait a minute!
it   s all very well in principle to have the magician and his
assistant agree on a matching, but how are they supposed to remember a matching

(cid:1) d 2; 598; 960 edges? for the trick to work in practice, there has to be a

with(cid:0)52

5

way to match hands and card sequences mentally and on the    y.

we   ll describe one approach. as a running example, suppose that the audience

selects:

10~ 9} 3~ q(cid:127) j}:

(cid:15) the assistant picks out two cards of the same suit.
in the example, the
assistant might choose the 3~ and 10~. this is always possible because of
the pigeonhole principle   there are    ve cards and 4 suits so two cards must
be in the same suit.
(cid:15) the assistant locates the ranks of these two cards on the cycle shown in fig-
ure 15.6. for any two distinct ranks on this cycle, one is always between 1
and 6 hops clockwise from the other. for example, the 3~ is 6 hops clock-
wise from the 10~.
(cid:15) the more counterclockwise of these two cards is revealed    rst, and the other
becomes the secret card. thus, in our example, the 10~ would be revealed,
and the 3~ would be the secret card. therefore:

    the suit of the secret card is the same as the suit of the    rst card re-

vealed.

    the rank of the secret card is between 1 and 6 hops clockwise from the

rank of the    rst card revealed.

   mcs        2017/6/5     19:42     page 642     #650

642

chapter 15 cardinality rules

figure 15.6 the 13 card ranks arranged in cyclic order.

(cid:15) all that remains is to communicate a number between 1 and 6. the magician
and assistant agree beforehand on an ordering of all the cards in the deck
from smallest to largest such as:

a| a} a~ a(cid:127) 2| 2} 2~ 2(cid:127) : : : k~ k(cid:127)

the order in which the last three cards are revealed communicates the num-
ber according to the following scheme:

. small; medium;
. small;
. medium;
. medium;
.
.

large / = 1
medium / = 2
large;
large / = 3
small;
large;
small / = 4
small; medium / = 5
medium;
small / = 6

large;
large;

in the example, the assistant wants to send 6 and so reveals the remaining
three cards in large, medium, small order. here is the complete sequence that
the magician sees:

10~ q(cid:127) j} 9}

(cid:15) the magician starts with the    rst card 10~ and hops 6 ranks clockwise to
reach 3~, which is the secret card!

so that   s how the trick can work with a standard deck of 52 cards. on the other
hand, hall   s theorem implies that the magician and assistant can in principle per-
form the trick with a deck of up to 124 cards. it turns out that there is a method

a2345678910jqk   mcs        2017/6/5     19:42     page 643     #651

15.9. inclusion-exclusion

643

which they could actually learn to use with a reasonable amount of practice for a
124-card deck, but we won   t explain it here.4

15.8.6 the same trick with four cards?
suppose that the audience selects only four cards and the assistant reveals a se-
quence of three to the magician. can the magician determine the fourth card?

let x be all the sets of four cards that the audience might select, and let y be all
the sequences of three cards that the assistant might reveal. now, on one hand, we
have

 

!

52

4

jxj d

d 270; 725

by the subset rule. on the other hand, we have

jy j d 52 (cid:1) 51 (cid:1) 50 d 132; 600

by the generalized product rule. thus, by the pigeonhole principle, the assistant
must reveal the same sequence of three cards for at least

(cid:24) 270; 725

132; 600

(cid:25) d 3

different four-card hands. this is bad news for the magician: if he sees that se-
quence of three, then there are at least three possibilities for the fourth card which
he cannot distinguish. so there is no legitimate way for the assistant to communi-
cate exactly what the fourth card is!

15.9 inclusion-exclusion

how big is a union of sets? for example, suppose there are 60 math majors, 200
eecs majors, and 40 physics majors. how many students are there in these three
departments? let m be the set of math majors, e be the set of eecs majors, and
p be the set of physics majors. in these terms, we   re asking for jm [ e [ pj.
the sum rule says that if m , e and p are disjoint, then the sum of their sizes

is

jm [ e [ pj d jmj c jej c jpj:

however, the sets m , e and p might not be disjoint. for example, there might be a
student majoring in both math and physics. such a student would be counted twice

4see the best card trick by michael kleber for more information.

   mcs        2017/6/5     19:42     page 644     #652

644

chapter 15 cardinality rules

on the right side of this equation, once as an element of m and once as an element
of p . worse, there might be a triple-major5 counted three times on the right side!
our most-complicated counting rule determines the size of a union of sets that
are not necessarily disjoint. before we state the rule, let   s build some intuition by
considering some easier special cases: unions of just two or three sets.

15.9.1 union of two sets
for two sets, s1 and s2, the inclusion-exclusion rule is that the size of their union
is:

js1 [ s2j d js1j c js2j (cid:0) js1 \ s2j

(15.5)
intuitively, each element of s1 is accounted for in the    rst term, and each element
of s2 is accounted for in the second term. elements in both s1 and s2 are counted
twice   once in the    rst term and once in the second. this double-counting is cor-
rected by the    nal term.

15.9.2 union of three sets
so how many students are there in the math, eecs, and physics departments? in
other words, what is jm [ e [ pj if:

jmj d 60
jej d 200
jpj d 40:

the size of a union of three sets is given by a more complicated inclusion-exclusion
formula:

js1 [ s2 [ s3j d js1j c js2j c js3j
(cid:0) js1 \ s2j (cid:0) js1 \ s3j (cid:0) js2 \ s3j
c js1 \ s2 \ s3j:

remarkably, the expression on the right accounts for each element in the union of
s1, s2 and s3 exactly once. for example, suppose that x is an element of all three
sets. then x is counted three times (by the js1j, js2j and js3j terms), subtracted
off three times (by the js1 \ s2j, js1 \ s3j and js2 \ s3j terms), and then counted
once more (by the js1 \ s2 \ s3j term). the net effect is that x is counted just
once.

5. . . though not at mit anymore.

   mcs        2017/6/5     19:42     page 645     #653

15.9. inclusion-exclusion

645

if x is in two sets (say, s1 and s2), then x is counted twice (by the js1j and
js2j terms) and subtracted once (by the js1 \ s2j term). in this case, x does not
contribute to any of the other terms, since x     s3.
so we can   t answer the original question without knowing the sizes of the various

intersections. let   s suppose that there are:

4 math - eecs double majors
3 math - physics double majors
11 eecs - physics double majors
2

triple majors

then jm \ej d 4c2, jm \pj d 3c2, je\pj d 11c2, and jm \e\pj d 2.
plugging all this into the formula gives:

jm [ e [ pj d jmj c jej c jpj (cid:0) jm \ ej (cid:0) jm \ pj (cid:0) je \ pj

c jm \ e \ pj
d 60 c 200 c 40 (cid:0) 6 (cid:0) 5 (cid:0) 13 c 2
d 278

15.9.3 sequences with 42, 04, or 60
in how many permutations of the set f0; 1; 2; : : : ; 9g do either 4 and 2, 0 and 4, or
6 and 0 appear consecutively? for example, none of these pairs appears in:

.7; 2; 9; 5; 4; 1; 3; 8; 0; 6/:

the 06 at the end doesn   t count; we need 60. on the other hand, both 04 and 60
appear consecutively in this permutation:

.7; 2; 5; 6; 0; 4; 3; 8; 1; 9/:

let p42 be the set of all permutations in which 42 appears. de   ne p60 and p04
similarly. thus, for example, the permutation above is contained in both p60 and
p04, but not p42. in these terms, we   re looking for the size of the set p42 [ p04 [
p60.

first, we must determine the sizes of the individual sets, such as p60. we can use
a trick: group the 6 and 0 together as a single symbol. then there is an immediate
bijection between permutations of f0; 1; 2; : : : 9g containing 6 and 0 consecutively
and permutations of:

f60; 1; 2; 3; 4; 5; 7; 8; 9g:
for example, the following two sequences correspond:

.7; 2; 5; 6; 0; 4; 3; 8; 1; 9/  ! .7; 2; 5; 60; 4; 3; 8; 1; 9/:

   mcs        2017/6/5     19:42     page 646     #654

646

chapter 15 cardinality rules

there are 9   permutations of the set containing 60, so jp60j d 9   by the bijection
rule. similarly, jp04j d jp42j d 9   as well.
next, we must determine the sizes of the two-way intersections, such as p42 \
p60. using the grouping trick again, there is a bijection with permutations of the
set:
thus, jp42 \ p60j d 8  . similarly, jp60 \ p04j d 8   by a bijection with the set:

f42; 60; 1; 3; 5; 7; 8; 9g:

f604; 1; 2; 3; 5; 7; 8; 9g:

and jp42 \ p04j d 8   as well by a similar argument. finally, note that jp60 \
p04 \ p42j d 7   by a bijection with the set:

f6042; 1; 3; 5; 7; 8; 9g:

plugging all this into the formula gives:

jp42 [ p04 [ p60j d 9   c 9   c 9   (cid:0) 8   (cid:0) 8   (cid:0) 8   c 7  :

15.9.4 union of n sets
the size of a union of n sets is given by the following rule.

rule 15.9.1 (inclusion-exclusion).

js1 [ s2 [ (cid:1)(cid:1)(cid:1) [ snj d

the sum of the sizes of the individual sets
the sizes of all two-way intersections
the sizes of all three-way intersections
the sizes of all four-way intersections
the sizes of all    ve-way intersections, etc.

minus
plus
minus
plus

the formulas for unions of two and three sets are special cases of this general

rule.

this way of expressing inclusion-exclusion is easy to understand and nearly
as precise as expressing it in mathematical symbols, but we   ll need the symbolic
version below, so let   s work on deciphering it now.

we already have a concise notation for the sum of sizes of the individual sets,

namely,

nx

id1

jsij:

   mcs        2017/6/5     19:42     page 647     #655

15.9. inclusion-exclusion

647

a    two-way intersection    is a set of the form si \ sj for i    j . we regard sj \ si
as the same two-way intersection as si \ sj , so we can assume that i < j . now
we can express the sum of the sizes of the two-way intersections as

similarly, the sum of the sizes of the three-way intersections is

jsi \ sjj:

x
x

1 i <j n

jsi \ sj \ skj:

1 i <j <k n

these sums have alternating signs in the inclusion-exclusion formula, with the
sum of the k-way intersections getting the sign .(cid:0)1/k(cid:0)1. this    nally leads to a
symbolic version of the rule:

rule (inclusion-exclusion).

           n[

id1

si

jsij

           d nx
(cid:0) x
c x

id1

1 i <j n

jsi \ sjj

           n\

id1

           :

si

1 i <j <k n

c .(cid:0)1/n(cid:0)1

jsi \ sj \ skj c (cid:1)(cid:1)(cid:1)

while it   s often handy express the rule in this way as a sum of sums, it is not
necessary to group the terms by how many sets are in the intersections. so another
way to state the rule is:

rule (inclusion-exclusion-ii).

           n[

id1

           d x

;  i f1;:::;ng

si

.(cid:0)1/

jijc1

          \

i2i

          

si

(15.6)

a proof of these rules using just highschool algebra is given in problem 15.58.

   mcs        2017/6/5     19:42     page 648     #656

648

chapter 15 cardinality rules

15.9.5 computing euler   s function
we can also use inclusion-exclusion to derive the explicit formula for euler   s func-
tion claimed in corollary 9.10.11: if the prime factorization of n is pe1
m for
1
distinct primes pi, then

(cid:1)(cid:1)(cid:1) pem

 

 
1 (cid:0) 1

pi

my

id1

(cid:30).n/ d n

:

(15.7)

to begin, let s be the set of integers in   0::n/ that are not relatively prime to n.
so (cid:30).n/ d n(cid:0)jsj. next, let ca be the set of integers in   0::n/ that are divisible by
a:

ca wwd fk 2   0::n/ j

a j kg:

so the integers in s are precisely the integers in   0::n/ that are divisible by at least
one of the pi   s. namely,

cpi :

(15.8)

s d m[

id1

we   ll be able to    nd the size of this union using inclusion-exclusion because the
intersections of the cpi    s are easy to count. for example, cp \ cq \ cr is the set
of integers in   0::n/ that are divisible by each of p, q and r. but since the p; q; r
are distinct primes, being divisible by each of them is the same as being divisible
by their product. now if k is a positive divisor of n, then there are exactly n=k
multiples of k in   0::n/. so exactly n=pqr of the integers in   0::n/ are divisible by
all three primes p, q, r. in other words,

this reasoning extends to arbitrary intersections of cp   s, namely,

jcp \ cq \ crj d n

:

pqr

            \

j2i

             d

nq

j2i pj

cpj

;

(15.9)

   mcs        2017/6/5     19:42     page 649     #657

15.10. combinatorial proofs

649

for any nonempty set i     1::m  . this lets us calculate:

jsj d

          

cpi

          

id1

jijc1

           m[
          \
d x
.(cid:0)1/
d x
nq
.(cid:0)1/
x
j2i pj
1q
 !
  my
 
j2i .(cid:0)pj /
c n;
1 (cid:0) 1

;  i   1::m  

;  i   1::m  

;  i   1::m  

d (cid:0)n

d (cid:0)n

jijc1

i2i

cpi

id1

pi

so

(cid:30).n/ d n (cid:0) jsj d n

(by (15.8))

(by inclusion-exclusion (15.6))

(by (15.9))

 

 
1 (cid:0) 1

pi

;

my

id1

which proves (15.7).

yikes! that was pretty hairy. are you getting tired of all that nasty algebra? if
so, then good news is on the way. in the next section, we will show you how to
prove some heavy-duty formulas without using any algebra at all. just a few words
and you are done. no kidding.

15.10 combinatorial proofs

suppose you have n different t-shirts, but only want to keep k. you could equally
well select the k shirts you want to keep or select the complementary set of n (cid:0) k
shirts you want to throw out. thus, the number of ways to select k shirts from
among n must be equal to the number of ways to select n(cid:0) k shirts from among n.
therefore:

 

!

n

k

!

 
n (cid:0) k

n

:

d

this is easy to prove algebraically, since both sides are equal to:

n  

k   .n (cid:0) k/  

:

   mcs        2017/6/5     19:42     page 650     #658

650

chapter 15 cardinality rules

but we didn   t really have to resort to algebra; we just used counting principles.

id48m.. . .

15.10.1 pascal   s triangle identity
bob, famed math for computer science teaching assistant, has decided to try out
for the us olympic boxing team. after all, he   s watched all of the rocky movies
and spent hours in front of a mirror sneering,    yo, you wanna piece a    me?!    bob
   gures that n people (including himself) are competing for spots on the team and
only k will be selected. as part of maneuvering for a spot on the team, he needs to
work out how many different teams are possible. there are two cases to consider:
(cid:15) bob is selected for the team, and his k (cid:0) 1 teammates are selected from
among the other n (cid:0) 1 competitors. the number of different teams that can
be formed in this way is:

(cid:15) bob is not selected for the team, and all k team members are selected from
among the other n(cid:0) 1 competitors. the number of teams that can be formed
this way is:

 
!
n (cid:0) 1
k (cid:0) 1
 
!
n (cid:0) 1

:

:

k

all teams of the    rst type contain bob, and no team of the second type does;
therefore, the two sets of teams are disjoint. thus, by the sum rule, the total
number of possible olympic boxing teams is:

!

 
n (cid:0) 1
k (cid:0) 1

 
!
n (cid:0) 1

:

k

c

ted, equally-famed teaching assistant, thinks bob isn   t so tough and so he
might as well also try out. he reasons that n people (including himself) are try-
ing out for k spots. thus, the number of ways to select the team is simply:

 

!

n

k

:

ted and bob each correctly counted the number of possible boxing teams. thus,

their answers must be equal. so we know:

   mcs        2017/6/5     19:42     page 651     #659

15.10. combinatorial proofs

lemma 15.10.1 (pascal   s triangle identity).

 

!

n

k

 
!
n (cid:0) 1
k (cid:0) 1

c

d

 
n (cid:0) 1

k

!

:

651

(15.10)

we proved pascal   s triangle identity without any algebra! instead, we relied

purely on counting techniques.

15.10.2 giving a combinatorial proof
a combinatorial proof is an argument that establishes an algebraic fact by relying
on counting principles. many such proofs follow the same basic outline:

in the preceding example, s was the set of all possible olympic boxing teams. bob
computed

1. de   ne a set s.
2. show that jsj d n by counting one way.
3. show that jsj d m by counting another way.
4. conclude that n d m.

 
n (cid:0) 1
k (cid:0) 1
by counting one way, and ted computed

jsj d

 
!
n (cid:0) 1
!

k

!
 

c

n

k

jsj d

by counting another way. equating these two expressions gave pascal   s identity.

checking a combinatorial proof
combinatorial proofs are based on counting the same thing in different ways. this
is    ne when you   ve become practiced at different counting methods, but when in
doubt, you can fall back on bijections and sequence counting to check such proofs.
for example, let   s take a closer look at the combinatorial proof of pascal   s iden-
tity (15.10). in this case, the set s of things to be counted is the collection of all
size-k subsets of integers in the interval   1::n  .

   mcs        2017/6/5     19:42     page 652     #660

652

chapter 15 cardinality rules

jsj d(cid:0)n

now we   ve already counted s one way, via the bookkeeper rule, and found

(cid:1). the other    way    corresponds to de   ning a bijection between s and the

k

disjoint union of two sets a and b where,

clearly a and b are disjoint since the pairs in the two sets have different    rst
coordinates, so ja [ bj d jaj c jbj. also,

a wwd f.1; x / j x     2; n   and jxj d k (cid:0) 1g
b wwd f.0; y / j y     2; n   and jy j d kg:
 
!
n (cid:0) 1
 
!
k (cid:0) 1
n (cid:0) 1

jaj d # speci   ed sets x d

jbj d # speci   ed sets y d

;

:

k

now    nding a bijection f w .a [ b/ ! s will prove the identity (15.10). in
particular, we can de   ne

(
x [ f1g

y

f .c/ wwd

if c d .1; x /;
if c d .0; y /:

it should be obvious that f is a bijection.

15.10.3 a colorful combinatorial proof
the set that gets counted in a combinatorial proof in different ways is usually de-
   ned in terms of simple sequences or sets rather than an elaborate story about
teaching assistants. here is another colorful example of a combinatorial argu-
ment.

theorem 15.10.2.

nx

 

n

!

! 
n (cid:0) r

2n

rd0

r

 

!

d

3n

n

proof. we give a combinatorial proof. let s be all n-card hands that can be dealt
from a deck containing n different red cards and 2n different black cards. first,
note that every 3n-element set has

 

!

3n

n

jsj d

   mcs        2017/6/5     19:42     page 653     #661

653

15.11. references

n-element subsets.

from another perspective, the number of hands with exactly r red cards is

since there are(cid:0)n

(cid:1) ways to choose the r red cards and(cid:0) 2n

r

(cid:1) ways to choose the

n (cid:0) r black cards. since the number of red cards can be anywhere from 0 to n, the
total number of n-card hands is:

r

n(cid:0)r

 

n

!

! 
n (cid:0) r

2n

jsj d nx

rd0

 

!

! 
n (cid:0) r

2n

:

n

r

equating these two expressions for jsj proves the theorem.
finding a combinatorial proof
combinatorial proofs are almost magical. theorem 15.10.2 looks pretty scary, but
we proved it without any algebraic manipulations at all. the key to constructing a
combinatorial proof is choosing the set s properly, which can be tricky. generally,
the simpler side of the equation should provide some guidance. for example, the

(cid:1), which suggests that it will be helpful to

right side of theorem 15.10.2 is(cid:0)3n

(cid:4)

n

choose s to be all n-element subsets of some 3n-element set.

15.11 references

[6], [10], [17]

problems for section 15.2

practice problems
problem 15.1.
alice is thinking of a number between 1 and 1000.

what is the least number of yes/no questions you could ask her and be guaranteed

to discover what it is? (alice always answers truthfully.)
(a)

   mcs        2017/6/5     19:42     page 654     #662

654

chapter 15 cardinality rules

problem 15.2.
in how many different ways is it possible to answer the next chapter   s practice
problems if:

(cid:15) the    rst problem has four true/false questions,
(cid:15) the second problem requires choosing one of four alternatives, and
(cid:15) the answer to the third problem is an integer (cid:21) 15 and   20?

problem 15.3.
how many total functions are there from set a to set b if jaj d 3 and jbj d 7?

problem 15.4.
let x be the six element set fx1; x2; x3; x4; x5; x6g.
(a) how many subsets of x contain x1?

(b) how many subsets of x contain x2 and x3 but do not contain x6?

class problems
problem 15.5.
a license plate consists of either:

(cid:15) 3 letters followed by 3 digits (standard plate)
(cid:15) 5 letters (vanity plate)
(cid:15) 2 characters   letters or numbers (big shot plate)
let l be the set of all possible license plates.

(a) express l in terms of

a d fa; b; c; : : : ; zg
d d f0; 1; 2; : : : ; 9g

using unions ([) and set products ((cid:2)).
(b) compute jlj, the number of different license plates, using the sum and product
rules.

   mcs        2017/6/5     19:42     page 655     #663

15.11. references

655

problem 15.6. (a) how many of the billion numbers in the integer interval   1::109  
contain the digit 1? (hint: how many don   t?)

(b) there are 20 books arranged in a row on a shelf. describe a bijection between
ways of choosing 6 of these books so that no two adjacent books are selected, and
15-bit strings with exactly 6 ones.

problem 15.7.
(a) let sn;k be the possible nonnegative integer solutions to the inequality

x1 c x2 c (cid:1)(cid:1)(cid:1) c xk   n:

(15.11)

that is

sn;k wwd f.x1; x2; : : : ; xk/ 2 nk j (15.11) is trueg:

describe a bijection between sn;k and the set of binary strings with n zeroes and k
ones.
(b) let ln;k be the length k weakly increasing sequences of nonnegative integers
  n. that is

ln;k wwd f.y1; y2; : : : ; yk/ 2 nk j y1   y2   (cid:1)(cid:1)(cid:1)   yk   ng:

describe a bijection between ln;k and sn;k.

problem 15.8.
an n-vertex numbered tree is a tree whose vertex set is   1::n   for some n > 2. we
de   ne the code of the numbered tree to be a sequence of n (cid:0) 2 integers in   1::n  
obtained by the following recursive process:6

if there are more than two vertices left, write down the father of the largest leaf,
delete this leaf, and continue this process on the resulting smaller tree. if there
are only two vertices left, then stop   the code is complete.

for example, the codes of a couple of numbered trees are shown in the fig-

ure 15.7.

6the necessarily unique node adjacent to a leaf is called its father.

   mcs        2017/6/5     19:42     page 656     #664

656

chapter 15 cardinality rules

figure 15.7

(a) describe a procedure for reconstructing a numbered tree from its code.

(b) conclude there is a bijection between the n-vertex numbered trees and se-
quences .n (cid:0) 2/ integers in   1::n  . state how many n-vertex numbered trees there
are.

problem 15.9.
let x and y be    nite sets.
(a) how many binary relations from x to y are there?
(b) de   ne a bijection between the set   x ! y    of all total functions from x to
jxj. (recall y n is the cartesian product of y with itself n times.)
y and the set y
based on that, what is j   x ! y   j?
(c) using the previous part, how many functions, not necessarily total, are there
from x to y ? how does the fraction of functions vs. total functions grow as the
size of x grows? is it o.1/, o.jxj/, o.2
(d) show a bijection between the powerset pow.x / and the set   x ! f0; 1g   of
0-1-valued total functions on x.

/,. . . ?

jxj

(e) let x be a set of size n and bx be the set of all bijections from x to x.

137542665622codetree12345432   mcs        2017/6/5     19:42     page 657     #665

15.11. references

657

describe a bijection from bx to the set of permutations of x.7 this implies that
there are how many bijections from x to x?

problems for section 15.4

class problems
problem 15.10.
use induction to prove that there are 2n subsets of an n-element set (theorem 4.5.5).

homework problems
problem 15.11.
fermat   s little theorem 9.10.88 asserts that

ap   a .mod p/

(15.12)
for all primes p and nonnegative integers a. this is immediate for a d 0; 1 so we
assume that a (cid:21) 2.
this problem offers a proof of (15.12) by counting strings over a    xed alphabet

with a characters.
(a) how many length-k strings are there over an a-character alphabet?
many of these are strings use more than one character?

how

let z be a length-k string. the length-n rotation of z is the string yx, where
z d xy and the length jxj of x is remainder.n; k/.
(b) verify that if u is a length-n rotation of z, and v is a length-m rotation of u,
then v is a length-(n c m) rotation of z.
(c) let (cid:25) be the    is a rotation of    relation on strings. that is,
v is a length-n rotation of z

v (cid:25) z

iff

for some n 2 n. prove that (cid:25) is an equivalence relation.

7a sequence in which all the elements of a set x appear exactly once is called a permutation of

x (see section 15.3.3).

8this theorem is usually stated as

ap(cid:0)1   1 .mod p/;

for all primes p and integers a not divisible by p. this follows immediately from (15.12) by canceling
a.

   mcs        2017/6/5     19:42     page 658     #666

658

chapter 15 cardinality rules

(cid:3) for some string u.

(d) prove that if xy d yx then x and y each consist of repetitions of some string
u. that is, if xy d yx, then x; y 2 u
hint: by induction on the length jxyj of xy.
(e) conclude that if p is prime and z is a length-p string containing at least two
different characters, then z is equivalent under (cid:25) to exactly p strings (counting
itself).
(f) conclude from parts (a) and (e) that p j .ap(cid:0)a), which proves fermat   s little
theorem (15.12).

problems for section 15.5

practice problems
problem 15.12.
eight students   anna, brian, caine,. . .    are to be seated around a circular table
in a circular room. two seatings are regarded as de   ning the same arrangement if
each student has the same student on his or her right in both seatings: it does not
matter which way they face. we   ll be interested in counting how many arrange-
ments there are of these 8 students, given some restrictions.
(a) as a start, how many different arrangements of these 8 students around the
table are there without any restrictions?

(b) how many arrangements of these 8 students are there with anna sitting next
to brian?

(c) how many arrangements are there with if brian sitting next to both anna and
caine?

(d) how many arrangements are there with brian sitting next to anna or caine?

problem 15.13.
how many different ways are there to select three dozen colored roses if red, yellow,
pink, white, purple and orange roses are available?

problem 15.14.

   mcs        2017/6/5     19:42     page 659     #667

15.11. references

659

suppose n books are lined up on a shelf. the number of selections of m of the
books so that selected books are separated by at least three unselected books is the
same as the number of all length k binary strings with exactly m ones.
(a) what is the value of k?

(b) describe a bijection between between the set of all length k binary strings with
exactly m ones and such book selections.

problem 15.15.
six women and nine men are on the faculty of a school   s eecs department. the
individuals are distinguishable. how many ways are there to select a committee of
5 members if at least 1 woman must be on the committee?

class problems
problem 15.16.
your class tutorial has 12 students, who are supposed to break up into 4 groups of
3 students each. your teaching assistant (ta) has observed that the students waste
too much time trying to form balanced groups, so he decided to pre-assign students
to groups and email the group assignments to his students.
(a) your ta has a list of the 12 students in front of him, so he divides the list into
consecutive groups of 3. for example, if the list is abcdefghijkl, the ta would
de   ne a sequence of four groups to be .fa; b; cg;fd; e; fg;fg; h; ig;fj; k; lg/.
this way of forming groups de   nes a mapping from a list of twelve students to a
sequence of four groups. this is a k-to-1 mapping for what k?

(b) a group assignment speci   es which students are in the same group, but not
any order in which the groups should be listed. if we map a sequence of 4 groups,

.fa; b; cg;fd; e; fg;fg; h; ig;fj; k; lg/;

into a group assignment

ffa; b; cg;fd; e; fg;fg; h; ig;fj; k; lgg;

this mapping is j -to-1 for what j ?

(c) how many group assignments are possible?

(d) in how many ways can 3n students be broken up into n groups of 3?

   mcs        2017/6/5     19:42     page 660     #668

660

chapter 15 cardinality rules

problem 15.17.
a pizza house is having a promotional sale. their commercial reads:

we offer 9 different toppings for your pizza! buy 3 large pizzas at
the regular price, and you can get each one with as many different
toppings as you wish, absolutely free. that   s 22; 369; 621 different
ways to choose your pizzas!

the ad writer was a former harvard student who had evaluated the formula .29/3=3  
on his calculator and gotten close to 22; 369; 621. unfortunately, .29/3=3   can   t be
an integer, so clearly something is wrong. what mistaken reasoning might have
led the ad writer to this formula? explain how to    x the mistake and get a correct
formula.

problem 15.18.
answer the following quesions using the generalized product rule.
(a) next week, i   m going to get really    t! on day 1, i   ll exercise for 5 minutes.
on each subsequent day, i   ll exercise 0, 1, 2, or 3 minutes more than the previous
day. for example, the number of minutes that i exercise on the seven days of next
week might be 5, 6, 9, 9, 9, 11, 12. how many such sequences are possible?

(b) an r-permutation of a set is a sequence of r distinct elements of that set. for
example, here are all the 2-permutations of fa; b; c; dg:

.a; b/
.b; a/
.c; a/
.d; a/

.a; c/
.b; c/
.c; b/
.d; b/

.a; d /
.b; d /
.c; d /
.d; c/

how many r-permutations of an n-element set are there? express your answer
using factorial notation.
(c) how many n(cid:2)n matrices are there with distinct entries drawn from f1; : : : ; pg,
where p (cid:21) n2?

problem 15.19. (a) there are 30 books arranged in a row on a shelf. in how many
ways can eight of these books be selected so that there are at least two unselected
books between any two selected books?

   mcs        2017/6/5     19:42     page 661     #669

15.11. references

661

(b) how many nonnegative integer solutions are there for the following equality?

x1 c x2 c (cid:1)(cid:1)(cid:1) c xm d k:

(15.13)

(c) how many nonnegative integer solutions are there for the following inequal-
ity?

(15.14)
(d) how many length m weakly increasing sequences of nonnegative integers   k
are there?

x1 c x2 c (cid:1)(cid:1)(cid:1) c xm   k:

homework problems
problem 15.20.
this problem is about binary relations on the set of integers in the interval   1::n  
and digraphs whose vertex set is   1::n  .
(a) how many digraphs are there?

(b) how many simple graphs are there?

(c) how many asymmetric binary relations are there?

(d) how many linear strict partial orders are there?

problem 15.21.
answer the following questions with a number or a simple formula involving fac-
torials and binomial coef   cients. brie   y explain your answers.
(a) how many ways are there to order the 26 letters of the alphabet so that no two
of the vowels a, e, i, o, u appear consecutively and the last letter in the ordering
is not a vowel?
hint: every vowel appears to the left of a consonant.

(b) how many ways are there to order the 26 letters of the alphabet so that there
are at least two consonants immediately following each vowel?

(c) in how many different ways can 2n students be paired up?

(d) two n-digit sequences of digits 0,1,. . . ,9 are said to be of the same type if the
digits of one are a permutation of the digits of the other. for n d 8, for example,
the sequences 03088929 and 00238899 are the same type. how many types of
n-digit sequences are there?

   mcs        2017/6/5     19:42     page 662     #670

662

chapter 15 cardinality rules

problem 15.22.
in a standard 52-card deck, each card has one of thirteen ranks in the set r and one
of four suits in the set s where

r wwd fa; 2; : : : ; 10; j; q; kg;
s wwd f|;};~;(cid:127)g:

a 5-card hand is a set of    ve distinct cards from the deck.
for each part describe a bijection between a set that can easily be counted using
the product and sum rules of ch. 15.1, and the set of hands matching the speci   -
cation. give bijections, not numerical answers.

for instance, consider the set of 5-card hands containing all 4 suits. each such
hand must have 2 cards of one suit. we can describe a bijection between such hands
and the set s (cid:2) r2 (cid:2) r3 where r2 is the set of two-element subsets of r. namely,
an element

.s;fr1; r2g; .r3; r4; r5// 2 s (cid:2) r2 (cid:2) r3

indicates

1. the repeated suit s 2 s,
2. the set fr1; r2g 2 r2 of ranks of the cards of suit s and
3. the ranks .r3; r4; r5/ of the remaining three cards, listed in increasing suit

order where

| (cid:30) } (cid:30) ~ (cid:30) (cid:127):

for example,

.|;f10; ag; .j; j; 2//  ! fa|; 10|; j}; j~; 2(cid:127)g:

(a) a single pair of the same rank (no 3-of-a-kind, 4-of-a-kind, or second pair).

(b) three or more aces.

problem 15.23.
suppose you have seven dice   each a different color of the rainbow; otherwise
the dice are standard, with faces numbered 1 to 6. a roll is a sequence specify-
ing a value for each die in rainbow (roygbiv) order. for example, one roll is
.3; 1; 6; 1; 4; 5; 2/ indicating that the red die showed a 3, the orange die showed 1,
the yellow 6,. . . .

   mcs        2017/6/5     19:42     page 663     #671

15.11. references

663

for the problems below, describe a bijection between the speci   ed set of rolls
and another set that is easily counted using the product, generalized product, and
similar rules. then write a simple arithmetic formula, possibly involving factorials
and binomial coef   cients, for the size of the set of rolls. you do not need to prove
that the correspondence between sets you describe is a bijection, and you do not
need to simplify the expression you come up with.

for example, let a be the set of rolls where 4 dice come up showing the same
number, and the other 3 dice also come up the same, but with a different number.
let r be the set of seven rainbow colors and s wwd   1::6   be the set of dice values.
de   ne b wwd ps;2 (cid:2) r3, where ps;2 is the set of 2-permutations of s and r3
is the set of size-3 subsets of r. then de   ne a bijection from a to b by mapping
a roll in a to the sequence in b whose    rst element is a pair consisting of the
number that came up three times followed by the number that came up four times,
and whose second element is the set of colors of the three matching dice.

for example, the roll

.4; 4; 2; 2; 4; 2; 4/ 2 a

maps to

..2; 4/;fyellow,green,indigog/ 2 b:

now by the bijection rule jaj d jbj, and by the generalized product and subset
rules,

 

!

7

3

:

jbj d 6 (cid:1) 5 (cid:1)

(a) for how many rolls do exactly two dice have the value 6 and the remaining
   ve dice all have different values? remember to describe a bijection and write a
simple arithmetic formula.
example: .6; 2; 6; 1; 3; 4; 5/ is a roll of this type, but .1; 1; 2; 6; 3; 4; 5/ and .6; 6; 1; 2; 4; 3; 4/
are not.

(b) for how many rolls do two dice have the same value and the remaining    ve
dice all have different values? remember to describe a bijection and write a simple
arithmetic formula.
example: .4; 2; 4; 1; 3; 6; 5/ is a roll of this type, but .1; 1; 2; 6; 1; 4; 5/ and .6; 6; 1; 2; 4; 3; 4/
are not.

(c) for how many rolls do two dice have one value, two different dice have a
second value, and the remaining three dice a third value? remember to describe a
bijection and write a simple arithmetic formula.

   mcs        2017/6/5     19:42     page 664     #672

664

chapter 15 cardinality rules

example: .6; 1; 2; 1; 2; 6; 6/ is a roll of this type, but .4; 4; 4; 4; 1; 3; 5/ and .5; 5; 5; 6; 6; 1; 2/
are not.

problem 15.24 (counting trees).
what is the number tn of different trees that can be formed from a set of n distinct
vertices?9 cayley   s formula gives the answer
tn d nn(cid:0)2:

one way to derive this appears in problem 15.8. this and three additional deriva-
tions are given by aigner & ziegler (1998), who comment that    the most beautiful
of them all    is a counting argument due to jim pitman that we now describe.

pitman   s derivation counts in two different ways the number of different se-
quences of edges that can be added to an empty graph on n vertices to form a
rooted tree. one way to form such a sequence is to start with one of the tn possible
unrooted trees, choose one of its n vertices as root, and choose one of the .n (cid:0) 1/  
possible sequences in which to add its n (cid:0) 1 edges. therefore, the total number of
sequences that can be formed in this way is

tnn.n (cid:0) 1/   d tnn   :

another way to count these edge sequences is to start with the empty graph and
build up a spanning forest of rooted trees by adding edges in sequence. when
n (cid:0) k edges have been added, the graph with these edges will be a spanning forest
consisting of k rooted trees. to add the next edge, we choose any vertex to be the
root of a new tree. then we add an edge between this new root and the root of any
one of the k (cid:0) 1 subtrees that did not include the chosen vertex. so the next edge
can be chosen in n.k (cid:0) 1/ ways to form a new spanning forest consisting of k (cid:0) 1
rooted trees.

therefore, if one multiplies together the number of choices from the    rst step,

the second step, etc., the total number of choices is

ny

kd2

n.k (cid:0) 1/ d nn(cid:0)1.n (cid:0) 1/   d nn(cid:0)2n   :

equating these two formulas for the number of edge sequences, we get tnn   d
nn(cid:0)2n  , and cancelling n   we arrive at cayley   s formula

tn d nn(cid:0)2:

9from double counting, wikipedia, aug. 30, 2014. see also pr  ufer sequences

   mcs        2017/6/5     19:42     page 665     #673

15.11. references

665

generalize pitman   s derivation to count the number of spanning forests consist-

ing of k rooted trees on n vertices.

exam problems
problem 15.25.
suppose that two identical 52-card decks are mixed together. write a simple for-
mula for the number of distinct permutations of the 104 cards.

problems for section 15.6

class problems
problem 15.26.
the tao of bookkeeper: we seek enlightenment through contemplation of the
word bookkeeper.
(a) in how many ways can you arrange the letters in the word poke?

(b) in how many ways can you arrange the letters in the word bo1o2k? observe
that we have subscripted the o   s to make them distinct symbols.

(c) suppose we map arrangements of the letters in bo1o2k to arrangements
of the letters in book by erasing the subscripts. indicate with arrows how the
arrangements on the left are mapped to the arrangements on the right.

o2bo1k
ko2bo1
o1bo2k
ko1bo2
bo1o2k
bo2o1k
: : :

book
obok
kobo
: : :

(d) this is a k-to-1 mapping, young grasshopper? what is k?

(e) in light of the division rule, how many arrangements are there of book?

(f) very good, young master! how many arrangements are there of the letters in
ke1e2pe3r?

   mcs        2017/6/5     19:42     page 666     #674

666

chapter 15 cardinality rules

(g) suppose we map each arrangement of ke1e2pe3r to an arrangement of
keeper by erasing subscripts. list all the different arrangements of ke1e2pe3r
that are mapped to repeek in this way.

(h) what kind of mapping is this?

(i) so how many arrangements are there of the letters in keeper?
now you are ready to face the bookkeeper!
(j) how many arrangements of bo1o2k1k2e1e2pe3r are there?

(k) how many arrangements of book1k2e1e2pe3r are there?

(l) how many arrangements of bookke1e2pe3r are there?

(m) how many arrangements of bookkeeper are there?

remember well what you have learned: subscripts on, subscripts off.

this is the tao of bookkeeper.

(n) how many arrangements of voodoodoll are there?

(o) how many length 52 sequences of digits contain exactly 17 two   s, 23    ves,
and 12 nines?

problems for section 15.6

practice problems
problem 15.27.
how many different permutations are there of the sequence of letters in    missis-
sippi   ?

class problems
problem 15.28.
find the coef   cients of
(a) x5 in .1 c x/11
(b) x8y9 in .3x c 2y/17
(c) a6b6 in .a2 c b3/5

   mcs        2017/6/5     19:42     page 667     #675

15.11. references

667

problem 15.29.
let p be a prime number.
(a) explain why the multinomial coef   cient

 

p

!

k1; k2; : : : ; kn

is divisible by p if all the ki   s are nonnegative integers less than p.

(b) conclude from part (a) that

.x1 c x2 c (cid:1)(cid:1)(cid:1) c xn/p   xp

1

c xp

2

c (cid:1)(cid:1)(cid:1) c xp

n

.mod p/:

(15.15)

(do not prove this using fermat   s    little    theorem. the point of this problem is to
offer an independent proof of fermat   s theorem.)

(c) explain how (15.15) immediately proves fermat   s little theorem 9.10.8:

np(cid:0)1   1

.mod p/

when n is not a multiple of p.

homework problems
problem 15.30.
the degree sequence of a simple graph is the weakly decreasing sequence of de-
grees of its vertices. for example, the degree sequence for the 5-vertex numbered
tree pictured in the figure 15.7 in problem 15.8 is .2; 2; 2; 1; 1/ and for the 7-vertex
tree it is .3; 3; 2; 1; 1; 1; 1/.

we   re interested in counting how many numbered trees there are with a given
degree sequence. we   ll do this using the bijection de   ned in problem 15.8 between
n-vertex numbered trees and length n(cid:0) 2 code words whose characters are integers
between 1 and n.

the occurrence number for a character in a word is the number of times that
the character occurs in the word. for example, in the word 65622, the occurrence
number for 6 is two, and the occurrence number for 5 is one. the occurrence
sequence of a word is the weakly decreasing sequence of occurrence numbers of
characters in the word. the occurrence sequence for this word is .2; 2; 1/ because
it has two occurrences of each of the characters 6 and 2, and one occurrence of 5.
(a) there is a simple relationship between the degree sequence of an n-vertex
numbered tree and the occurrence sequence of its code. describe this relationship
and explain why it holds. conclude that counting n-vertex numbered trees with a

   mcs        2017/6/5     19:42     page 668     #676

668

chapter 15 cardinality rules

given degree sequence is the same as counting the number of length n (cid:0) 2 code
words with a given occurrence sequence.
hint: how many times does a vertex of degree d occur in the code?

for simplicity, let   s focus on counting 9-vertex numbered trees with a given de-
gree sequence. by part (a), this is the same as counting the number of length 7 code
words with a given occurrence sequence.

any length 7 code word has a pattern, which is another length 7 word over the

alphabet a,b,c,d,e,f,g that has the same occurrence sequence.
(b) how many length 7 patterns are there with three occurrences of a, two occur-
rences of b, and one occurrence of c and d?
(c) how many ways are there to assign occurrence numbers to integers 1; 2; : : : ; 9
so that a code word with those occurrence numbers would have the occurrence
sequence 3; 2; 1; 1; 0; 0; 0; 0; 0?
in general, to    nd the pattern of a code word, list its characters in decreasing order
by number of occurrences, and list characters with the same number of occurrences
in decreasing order. then replace successive characters in the list by successive
letters a,b,c,d,e,f,g. the code word 2468751, for example, has the pattern
fecabdg, which is obtained by replacing its characters 8,7,6,5,4,2,1 by
a,b,c,d,e,f,g, respectively. the code word 2449249 has pattern caabcab,
which is obtained by replacing its characters 4,9,2 by a,b,c, respectively.
(d) what length 7 code word has three occurrences of 7, two occurrences of 8,
one occurrence each of 2 and 9, and pattern abacbad?

(e) explain why the number of 9-vertex numbered trees with degree sequence
.4; 3; 2; 2; 1; 1; 1; 1; 1/ is the product of the answers to parts (b) and (c).

problem 15.31.
let g be a simple graph with 6 vertices and an edge between every pair of vertices
(that is, g is a complete graph). a length-3 cycle in g is called a triangle.

a set of two edges that share a vertex is called an incident pair (i.p.); the shared

vertex is called the center of the i.p. that is, an i.p. is a set,

fhu   vi ;hv   wig;

where u; v and w are distinct vertices, and its center is v.
(a) how many triangles are there?

(b) how many incident pairs are there?

   mcs        2017/6/5     19:42     page 669     #677

15.11. references

669

now suppose that every edge in g is colored either red or blue. a triangle or i.p.

is called multicolored when its edges are not all the same color.
(c) map the i.p.

fhu   vi ;hv   wig

to the triangle

fhu   vi ;hv   wi ;hu   wig:

notice that multicolored i.p.   s map to multicolored triangles. explain why this
mapping is 2-to-1 on these multicolored objects.

(d) show that at most six multicolored i.p.   s can have the same center. conclude
that there are at most 36 possible multicolored i.p.   s.
hint: a vertex incident to r red edges and b blue edges is the center of r(cid:1)b different
multicolored i.p.   s.

(e) if two people are not friends, they are called strangers. if every pair of people
in a group are friends, or if every pair are strangers, the group is called uniform.
explain why parts (a), (c), and (d) imply that

every set of six people includes two uniform three-person groups.

exam problems
problem 15.32.
there is a robot that steps between integer positions in 3-dimensional space. each
step of the robot increments one coordinate and leaves the other two unchanged.
(a) how many paths can the robot follow going from the origin .0; 0; 0/ to .3; 4; 5/?

(b) how many paths can the robot follow going from the origin .i; j; k/ to .m; n; p/?

problems for section 15.7

practice problems
problem 15.33.
indicate how many 5-card hands there are of each of the following kinds.
(a) a sequence is a hand consisting of    ve consecutive cards of any suit, such as

5~ (cid:0) 6~ (cid:0) 7(cid:127) (cid:0) 8(cid:7) (cid:0) 9|:

   mcs        2017/6/5     19:42     page 670     #678

670

chapter 15 cardinality rules

note that an ace may either be high (as in 10-j-q-k-a), or low (as in a-2-3-4-5),
but can   t go    around the corner    (that is, q-k-a-2-3 is not a sequence).
how many different sequence hands are possible?

(b) a matching suit is a hand consisting of cards that are all of the same suit in
any order.
how many different matching suit hands are possible?

(c) a straight flush is a hand that is both a sequence and a matching suit.
how many different straight flush hands are possible?

(d) a straight is a hand that is a sequence but not a matching suit.
how many possible straights are there?

(e) a flush is a hand that is a matching suit but not a sequence.
how many possible flushes are there?

class problems
problem 15.34.
here are the solutions to the next 7 short answer questions, in no particular order.
indicate the solutions for the questions and brie   y explain your answers.

 
!
n c m
 
!
n (cid:0) 1 c m

m

n

1:

5:

n  

.n (cid:0) m/  
 
!
n (cid:0) 1 c m

m

2:

6:

.n (cid:0) m/   4: mn

3:

7: 2mn

8: nm

(a) how many length m words can be formed from an n-letter alphabet, if no letter
is used more than once?

(b) how many length m words can be formed from an n-letter alphabet, if letters
can be reused?
(c) how many binary relations are there from set a to set b when jaj d m and
jbj d n?
(d) how many total injective functions are there from set a to set b, where jaj d
m and jbj d n (cid:21) m?

   mcs        2017/6/5     19:42     page 671     #679

15.11. references

671

(e) how many ways are there to place a total of m distinguishable balls into n
distinguishable urns, with some urns possibly empty or with several balls?

(f) how many ways are there to place a total of m indistinguishable balls into n
distinguishable urns, with some urns possibly empty or with several balls?

(g) how many ways are there to put a total of m distinguishable balls into n dis-
tinguishable urns with at most one ball in each urn?

exam problems
problem 15.35. (a) how many solutions over the positive integers are there to the
inequality:

x1 c x2 c : : : c x10   100

(b) in how many ways can mr. and mrs. grumperson distribute 13 identical
pieces of coal to their three children for christmas so that each child gets at least
one piece?

problem 15.36.
let c41 be the graph with vertices f0; 1; : : : ; 40g and edges h0   1i ;h1   2i ; : : : ;h39   40i ;h40   0i,
and let k41 be the complete graph on the same set of 41 vertices.

you may answer the following questions with formulas involving exponents,

binomial coef   cients, and factorials.
(a) how many edges are there in k41?

(b) how many isomorphisms are there from k41 to k41?

(c) how many isomorphisms are there from c41 to c41?

(d) what is the chromatic number (cid:31).k41/?

(e) what is the chromatic number (cid:31).c41/?

   mcs        2017/6/5     19:42     page 672     #680

672

chapter 15 cardinality rules

(f) how many edges are there in a spanning tree of k41?

(g) a graph is created by adding a single edge between nonadjacent vertices of a
tree with 41 vertices. what is the largest number of cycles the graph might have?

(h) what is the smallest number of leaves possible in a spanning tree of k41?

(i) what is the largest number of leaves possible in a in a spanning tree of k41?

(j) how many spanning trees does c41 have?

(k) how many spanning trees does k41 have?

(l) how many length-10 paths are there in k41?

(m) how many length-10 cycles are there in k41?

problems for section 15.8

practice problems
problem 15.37.
below is a list of properties that a group of people might possess.

for each property, either give the minimum number of people that must be in a
group to ensure that the property holds, or else indicate that the property need not
hold even for arbitrarily large groups of people.

(assume that every year has exactly 365 days; ignore leap years.)

   mcs        2017/6/5     19:42     page 673     #681

15.11. references

673

(a) at least 2 people were born on the same day of the year (ignore year of birth).

(b) at least 2 people were born on january 1.

(c) at least 3 people were born on the same day of the week.

(d) at least 4 people were born in the same month.

(e) at least 2 people were born exactly one week apart.

class problems
problem 15.38.
solve the following problems using the pigeonhole principle. for each problem,
try to identify the pigeons, the pigeonholes, and a rule assigning each pigeon to a
pigeonhole.
(a) in a certain institute of technology, every id number starts with a 9. suppose
that each of the 75 students in a class sums the nine digits of their id number.
explain why two people must arrive at the same sum.

(b) in every set of 100 integers, there exist two whose difference is a multiple of
37.

p
(c) for any    ve points inside a unit square (not on the boundary), there are two
points at distance less than 1=
(d) show that if n c 1 numbers are selected from f1; 2; 3; : : : ; 2ng, two must be
consecutive, that is, equal to k and k c 1 for some k.

2.

problem 15.39. (a) prove that every positive integer divides a number such as 70,
700, 7770, 77000, whose decimal representation consists of one or more 7   s fol-
lowed by one or more 0   s.
hint: 7; 77; 777; 7777; : : :

(b) conclude that if a positive number is not divisible by 2 or 5, then it divides a
number whose decimal representation is all 7   s.

problem 15.40.
the aim of this problem is to prove that there exist a natural number n such that 3n
has at least 2013 consecutive zeros in its decimal expansion.

   mcs        2017/6/5     19:42     page 674     #682

674

chapter 15 cardinality rules

(a) prove that there exist a nonnegative integer n such that

3n   1pmod 102014:

hint: use pigeonhole principle or euler   s theorem.

(b) conclude that there exist a natural number n such that 3n has at least 2013
consecutive zeros.

problem 15.41. (a) show that the magician could not pull off the trick with a deck
larger than 124 cards.
hint: compare the number of 5-card hands in an n-card deck with the number of
4-card sequences.

(b) show that, in principle, the magician could pull off the card trick with a deck
of 124 cards.
hint: hall   s theorem and degree-constrained (12.5.5) graphs.

problem 15.42.
the magician can determine the 5th card in a poker hand when his assisant reveals
the other 4 cards. describe a similar method for determining 2 hidden cards in a
hand of 9 cards when your assisant reveals the other 7 cards.

problem 15.43.
suppose 2nc 1 numbers are selected from f1; 2; 3; : : : ; 4ng. using the pigeonhole
principle, show that there must be two selected numbers whose difference is 2.
clearly indicate what are the pigeons, holes, and rules for assigning a pigeon to a
hole.

problem 15.44.
let

be a sequence of 101 integers. a sequence

k1; k2; : : : ; k101

kmc1; kmc2; : : : ; kn

   mcs        2017/6/5     19:42     page 675     #683

15.11. references

675

where 0   m < n   101 is called a subsequence. prove that there is a subsequence
whose elements sum to a number divisible by 100.

homework problems
problem 15.45. (a) show that any odd integer x in the range 109 < x < 2 (cid:1) 109
containing all ten digits 0; 1; : : : ; 9 must have consecutive even digits. hint: what
can you conclude about the parities of the    rst and last digit?

(b) show that there are 2 vertices of equal degree in any    nite undirected graph
with n (cid:21) 2 vertices. hint: cases conditioned upon the existence of a degree zero
vertex.

problem 15.46.
suppose n c 1 numbers are selected from f1; 2; 3; : : : ; 2ng. using the pigeonhole
principle, show that there must be two selected numbers whose quotient is a power
of two. clearly indicate what are the pigeons, holes, and rules for assigning a
pigeon to a hole.

hint: factor each number into the product of an odd number and a power of 2.

problem 15.47. (a) let r be an 82 (cid:2) 4 rectangular matrix each of whose entries
are colored red, white or blue. explain why at least two of the 82 rows in r must
have identical color patterns.

(b) conclude that r contains four points with the same color that form the corners
of a rectangle.

(c) now show that the conclusion from part (b) holds even when r has only 19
rows.
hint: how many ways are there to pick two positions in a row of length four and
color them the same?

problem 15.48.
section 15.8.6 explained why it is not possible to perform a four-card variant of the
hidden-card magic trick with one card hidden. but the magician and her assistant
are determined to    nd a way to make a trick like this work. they decide to change
the rules slightly: instead of the assistant lining up the three unhidden cards for

   mcs        2017/6/5     19:42     page 676     #684

676

chapter 15 cardinality rules

the magician to see, he will line up all four cards with one card face down and the
other three visible. we   ll call this the face-down four-card trick.
for example, suppose the audience members had selected the cards 9~, 10},
a|, 5|. then the assistant could choose to arrange the 4 cards in any order so
long as one is face down and the others are visible. two possibilities are:

a|

10} 5|

?

5|

9~ 10}

?

(a) explain how to model this face-down four-card trick as a matching problem,
and show that there must be a bipartite matching which theoretically will allow the
magician and assistant to perform the trick.

(b) there is actually a simple way to perform the face-down four-card trick.10
case 1. there are two cards with the same suit: say there are two (cid:127) cards. the
assistant proceeds as in the original card trick: he puts one of the (cid:127) cards face
up as the    rst card. he will place the second (cid:127) card face down. he then uses a
permutation of the face down card and the remaining two face up cards to code
the offset of the face down card from the    rst card.
case 2. all four cards have different suits: assign numbers 0; 1; 2; 3 to the four
suits in some agreed upon way. the assistant computes s the sum modulo 4 of
the ranks of the four cards, and chooses the card with suit s to be placed face
down as the    rst card. he then uses a permutation of the remaining three face-up
cards to code the rank of the face down card.

explain how in case 2. the magician can determine the face down card from the
cards the assistant shows her.

(c) explain how any method for performing the face-down four-card trick can be
adapted to perform the regular (5-card hand, show 4 cards) with a 52-card deck
consisting of the usual 52 cards along with a 53rd card called the joker.

10this elegant method was devised in fall    09 by student katie e everett.

   mcs        2017/6/5     19:42     page 677     #685

15.11. references

677

problem 15.49.
suppose 2nc 1 numbers are selected from f1; 2; 3; : : : ; 4ng. using the pigeonhole
principle, show that for any positive integer j that divides 2n, there must be two
selected numbers whose difference is j . clearly indicate what are the pigeons,
holes, and rules for assigning a pigeon to a hole.

p

problem 15.50.
let   s start by marking a point on a circle of length one. next, mark the point that
is distance
2 clockwise around the circle. so you wrap around once and actually
2 (cid:0) 1 clockwise from the start. now repeat with the
mark the point at distance
newly marked point as the starting point. in other words, the marked points are
those at clockwise distances
p

p

p
2; 2

p
2; 3

2; : : : ; n

p
2; : : : ;

0;

from the start.

we will use a pigeonhole argument to prove that marked points are dense on the
circle: for any point p on the circle, and any (cid:15) > 0, there is a marked point within
distance (cid:15) of p.
p
p
(a) prove that no point gets marked twice. that is, the points at clockwise distance
2 and m
k

2 are the same iff k d m.

(b) prove that among the    rst n > 1 marked points, there have to be two that are
at most distance 1=n from each other.

(c) prove that every point on the circle is within 1=n of a marked point. this
implies the claim that the marked points are dense on the circle.

exam problems
problem 15.51.
a standard 52 card deck has 13 cards of each suit. use the pigeonhole principle to
determine the smallest k such that every set of k cards from the deck contains    ve
cards of the same suit (called a    ush). clearly indicate what are the pigeons, holes,
and rules for assigning a pigeon to a hole.

problem 15.52.
use the pigeonhole principle to determine the smallest nonnegative integer n such
that every set of n integers is guaranteed to contain three integers that are congruent

   mcs        2017/6/5     19:42     page 678     #686

678

chapter 15 cardinality rules

mod 211. clearly indicate what are the pigeons, holes, and rules for assigning a
pigeon to a hole, and give the value of n.

problems for section 15.9

practice problems
problem 15.53.
let a1, a2, a3 be sets with ja1j d 100, ja2j d 1; 000, and ja3j d 10; 000.
determine ja1 [ a2 [ a3j in each of the following cases:
(a) a1 (cid:26) a2 (cid:26) a3.
(b) the sets are pairwise disjoint.

(c) for any two of the sets, there is exactly one element in both.

(d) there are two elements common to each pair of sets and one element in all
three sets.

problem 15.54.
the working days in the next year can be numbered 1, 2, 3, . . . , 300. i   d like to
avoid as many as possible.

(cid:15) on even-numbered days, i   ll say i   m sick.
(cid:15) on days that are a multiple of 3, i   ll say i was stuck in traf   c.
(cid:15) on days that are a multiple of 5, i   ll refuse to come out from under the
blankets.

in total, how many work days will i avoid in the coming year?

ein

problem 15.55.
twenty people work at cantorcorp, a small, unsuccessful start-up. a single six-
person committee is to be formed. (it will be charged with the sole task of working
to prove the continuum hypothesis.) employees appointed to serve on the com-
mittee join as equals   they do not get assigned distinct roles or ranks.

   mcs        2017/6/5     19:42     page 679     #687

15.11. references

679

(a) let d denote the set of all possible committees. find jdj.
(b) two of the workers, aleph and beth, will be unhappy if they are to serve
together.
let p denote the set of all possible committees on which aleph and beth would
serve together. find jpj.
(c) beth will also be unhappy if she has to serve with both ferdinand and georg.
let q denote the set of all possible committees on which beth, ferdinand, and
georg would all serve together. find jqj.
(d) find jp \ qj.
(e) let s denote the set of all possible committees on which there is at least one
unhappy employee. express s in terms of p and q only.
(f) find jsj.
(g) if we want to form a committee with no unhappy employees, how many
choices do we have to choose from?

(h) suddenly, we realize that it would be better to have two six-person committees
instead of one. (one committee would work on proving the continuum hypothesis,
while the other would work to disprove it!) each employee can serve on at most
one committee. how many ways are there to form such a pair of committees, if
employee happiness is not taken into consideration?

class problems
problem 15.56.
to ensure password security, a company requires their employees to choose a pass-
word. a length 10 word containing each of the characters:

a, d, e, f, i, l, o, p, r, s,

is called a cword. a password can be a cword which does not contain any of the
subwords    fails   ,    failed   , or    drop.   

for example, the following two words are passwords:
but the following three cwords are not:

ade   loprs, srpolifeda,
adrope   is, failedrops, dropefails.

(a) how many cwords contain the subword    drop   ?

(b) how many cwords contain both    drop    and    fails   ?

   mcs        2017/6/5     19:42     page 680     #688

680

chapter 15 cardinality rules

(c) use the inclusion-exclusion principle to    nd a simple arithmetic formula in-
volving factorials for the number of passwords.

problem 15.57.
we want to count step-by-step paths between points in the plane with integer coor-
dinates. only two kinds of step are allowed: a right-step which increments the x
coordinate, and an up-step which increments the y coordinate.

(a) how many paths are there from .0; 0/ to .20; 30/?

(b) how many paths are there from .0; 0/ to .20; 30/ that go through the point
.10; 10/?

(c) how many paths are there from .0; 0/ to .20; 30/ that do not go through either
of the points .10; 10/ and .15; 20/?
hint: let p be the set of paths from .0; 0/ to .20; 30/, n1 be the paths in p that go
through .10; 10/ and n2 be the paths in p that go through .15; 20/.

problem 15.58.
let   s develop a proof of the inclusion-exclusion formula using high school algebra.
(a) most high school students will get freaked by the following formula, even
though they actually know the rule it expresses. how would you explain it to them?

.1 (cid:0) xi / d x

ny

id1

i f1;:::;ng

jijy

j2i

.(cid:0)1/

xj :

(15.16)

hint: show them an example.

now to start proving (15.16), let ms be the membership function for any set s:

(

1

0

ms .x/ d

if x 2 s ;
if x     s :

let s1; : : : ; sn be a sequence of    nite sets, and abbreviate msi as mi. let the

domain of discourse d be the union of the si   s. that is, we let

d wwd n[

si ;

id1

   mcs        2017/6/5     19:42     page 681     #689

15.11. references

681

and take complements with respect to d, that is,
t wwd d (cid:0) t;

for t   d.
(b) verify that for t   d and i   f1; : : : ng,
d 1 (cid:0) mt ;

mt

m.t
m.s

i2i si /

i2i si /

dy
d 1 (cid:0)y

i2i

mi ;

i2i

.1 (cid:0) mi /:

(15.17)
(15.18)

(15.19)

(note that (15.18) holds when i is empty because, by convention, an empty product
equals 1, and an empty intersection equals the domain of discourse d.)

(c) use (15.16) and (15.19) to prove

(d) prove that

u2d
(e) now use the previous parts to prove

;  i f1;:::;ng

md d x
jt j d x
jdj d x

;  i f1;:::;ng

jijc1y

j2i

.(cid:0)1/

mj :

(15.20)

mt .u/:

(15.21)

.(cid:0)1/

jijc1

si

(15.22)

(f) finally, explain why (15.22) immediately implies the usual form of the inclusion-
exclusion principle:

jdj d nx

.(cid:0)1/ic1 x

id1

i f1;:::;ng

jijdi

sj

(15.23)

i2i

          \
            \

j2i

          
             :

   mcs        2017/6/5     19:42     page 682     #690

682

chapter 15 cardinality rules

homework problems
problem 15.59.
a derangement is a permutation .x1; x2; : : : ; xn/ of the set f1; 2; : : : ; ng such that
xi    i for all i. for example, .2; 3; 4; 5; 1/ is a derangement, but .2; 1; 3; 5; 4/
is not because 3 appears in the third position. the objective of this problem is to
count derangements.

it turns out to be easier to start by counting the permutations that are not de-
rangements. let si be the set of all permutations .x1; x2; : : : ; xn/ that are not
derangements because xi d i. so the set of non-derangements is

n[

id1

si :

(a) what is jsij?

(b) what is    si \ sj
(c) what is    si1

\ si2

     where i    j ?

\ (cid:1)(cid:1)(cid:1) \ sik

     where i1; i2; : : : ; ik are all distinct?

(d) use the inclusion-exclusion formula to express the number of non-derangements
in terms of sizes of possible intersections of the sets s1; : : : ; sn.

(e) how many terms in the expression in part (d) have the form

(f) combine your answers to the preceding parts to prove the number of non-
derangements is:

       

\ si2

\ (cid:1)(cid:1)(cid:1) \ sik

(cid:0) 1
2  

c 1
3  

(cid:0) (cid:1)(cid:1)(cid:1)    1
n  

    si1
  1

n  

1  

 
1 (cid:0) 1

 

:

 

:

conclude that the number of derangements is
(cid:0) 1
3  

c 1
2  

n  

1  

c (cid:1)(cid:1)(cid:1)    1
n  

(g) as n goes to in   nity, the number of derangements approaches a constant frac-
tion of all permutations. what is that constant? hint:

ex d 1 c x c x2

2  

c (cid:1)(cid:1)(cid:1)

c x3
3  

   mcs        2017/6/5     19:42     page 683     #691

15.11. references

683

problem 15.60.
how many of the numbers 2; : : : ; n are prime? the inclusion-exclusion principle
offers a useful way to calculate the answer when n is large. actually, we will use
inclusion-exclusion to count the number of composite (nonprime) integers from 2
to n. subtracting this from n (cid:0) 1 gives the number of primes.
let cn be the set of composites from 2 to n, and let am be the set of numbers in
the range m c 1; : : : ; n that are divisible by m. notice that by de   nition, am d ;
for m (cid:21) n. so

cn d n(cid:0)1[
(a) verify that if m j k, then am   ak.
[
(b) explain why the right-hand side of (15.24) equals
primes p p

 

ap:

ai :

n

(15.24)

(15.25)

(c) explain why jamj d bn=mc (cid:0) 1 for m (cid:21) 2.
(d) consider any two relatively prime numbers p; q   n. what is the one number
in .ap \ aq/ (cid:0) ap(cid:1)q?
(e) let p be a    nite set of at least two primes. give a simple formula for

            \

p2p

             :

ap

(f) use the inclusion-exclusion principle to obtain a formula for jc150j in terms
the sizes of intersections among the sets a2; a3; a5; a7; a11. (omit the intersec-
tions that are empty; for example, any intersection of more than three of these sets
must be empty.)

(g) use this formula to    nd the number of primes up to 150.

exam problems
problem 15.61.
we want to count the number of length-n binary strings in which the substring 011
occurs in various places. for example, the length-14 string

00100110011101;

   mcs        2017/6/5     19:42     page 684     #692

684

chapter 15 cardinality rules

has 011 in the 4th position and the 8th position. (note that by convention, a length-
n string starts with position zero and ends with position n (cid:0) 1.) assume n (cid:21) 7:
(a) let r be the number of length-n binary strings in which 011 occurs starting at
the 4th position. write a formula for r in terms of n.

(b) let ai be the set of length-n binary strings in which 011 occurs starting at
the ith position. (ai is empty for i > n (cid:0) 3.) if i    j , the intersection ai \ aj is
either empty or of size s. write a formula for s in terms of n.

(c) let t be the number of pairs .i; j / such that ai \ aj is nonempty, where
0   i < j . write a binomial coef   cient for t in terms of n.

(d) how many length 9 binary strings are there that contain the substring 011?
you should express your answer as an integer or as a simple expression which may
include the above constants r, s and t for n d 9.
hint: inclusion-exclusion for

      s8

0 ai

      .

problem 15.62.
there are 10 students a; b; : : : ; j who will be lined up left to right according to
the some rules below.

rule i: student a must not be rightmost.
rule ii: student b must be adjacent to c (directly to the left or right of c).
rule iii: student d is always second.
you may answer the following questions with a numerical formula that may

involve factorials.
(a) how many possible lineups are there that satisfy all three of these rules?

(b) how many possible lineups are there that satisfy at least one of these rules?

problem 15.63.
a robot on a point in the 3-d integer lattice can move a unit distance in one positive
direction at a time. that is, from position .x; y; z/, it can move to either .x c

   mcs        2017/6/5     19:42     page 685     #693

15.11. references

685

1; y; z/, .x; y c 1; z/ or .x; y; z c 1/. for any two points p and q in space, let
n.p; q/ denote the number of distinct paths the spacecraft can follow to go from
p to q.

let
a d .0; 10; 20/; b d .30; 50; 70/; c d .80; 90; 100/; d d .200; 300; 400/:
(a) express n.a; b/ as a single multinomial coef   cient.
answer the following questions with arithmetic expressions involving terms n.p; q/
for p; q 2 fa; b; c; dg. do not use numbers.
(b) how many paths from a to c go through b?

(c) how many paths from b to d do not go through c ?

(d) how many paths from a to d go through neither b nor c ?

problem 15.64.
in a standard 52-card deck (13 ranks and 4 suits), a hand is a 5-card subset of the set
of 52 cards. express the answer to each part as a formula using factorial, binomial,
or multinomial notation.
(a) let h be the set of all hands. what is jhj?
(b) let hnp be the set of all hands that include no pairs; that is, no two cards in
the hand have the same rank. what is jhnpj?
(c) let hs be the set of all hands that are straights, that is, the ranks of the    ve
cards are consecutive. the order of the ranks is .a; 2; 3; 4; 5; 6; 7; 8; 9; 10; j; q; k; a/;
note that a appears twice.
what is jhsj?
(d) let hf be the set of all hands that are    ushes, that is, the suits of the    ve cards
are identical. what is jhf j?
(e) let hsf be the set of all straight    ush hands, that is, the hand is both a straight
and a    ush. what is jhsf j?
(f) let hh c be the set of all high-card hands; that is, hands that do not include
pairs, are not straights, and are not    ushes. write a formula for jhh cj in terms of
jhnpj;jhsj;jhf j;jhsf j.

   mcs        2017/6/5     19:42     page 686     #694

686

chapter 15 cardinality rules

problems for section 15.10

practice problems
problem 15.65.
prove the following identity by algebraic manipulation and by giving a combinato-
rial argument:

 

! 

!

n

r

r

k

 

!

! 
n (cid:0) k
r (cid:0) k

n

k

d

 

problem 15.66.
give a combinatorial proof for this identity:

x

!

d 3n

n

icjckdn
i;j;k(cid:21)0

i; j; k

class problems
problem 15.67.
according to the multinomial theorem, .w c x c y c z/n can be expressed as a
sum of terms of the form  

!

n

r1; r2; r3; r4

wr1xr2yr3zr4:

(a) how many terms are there in the sum?

(b) the sum of these multinomial coef   cients has an easily expressed value. what
is it?

x

 

n

!

d   

r1cr2cr3cr4dn;

ri2n

r1; r2; r3; r4

(15.26)

hint: how many terms are there when .w c x c y c z/n is expressed as a sum
of monomials in w; x; y; z before terms with like powers of these variables are
collected together under a single coef   cient?

   mcs        2017/6/5     19:42     page 687     #695

15.11. references

problem 15.68.

687

(a) give a combinatorial proof of the following identity by letting s be the set of
all length-n sequences of letters a, b and a single c and counting jsj is two different
ways.

(b) now prove (15.27) algebraically by applying the binomial theorem to .1 c
x/n and taking derivatives.

(15.27)

n2n(cid:0)1 d nx

k

kd1

 

!

n

k

problem 15.69.
what do the following expressions equal? give both algebraic and combinatorial
proofs for your answers.
(a)

(b)

n

!

 
!
.(cid:0)1/i

i

nx
 
nx

id0

id0

i

n

hint: consider the bit strings with an even number of ones and an odd number of
ones.

problem 15.70.
when an integer k occurs as the kth element of a sequence, we   ll say it is    in place   
in the sequence. for example, in the sequence

12453678

precisely the integers 1; 2; 6; 7 and 8 occur in place. we   re going to classify the
sequences of distinct integers from 1 to n, that is the permutations of   1::n  , accord-
ing to which integers do not occur    in place.    then we   ll use this classi   cation to

   mcs        2017/6/5     19:42     page 688     #696

688

chapter 15 cardinality rules

prove the combinatorial identity11

n   d 1 c nx

kd1

.k (cid:0) 1/ (cid:1) .k (cid:0) 1/   :

(15.28)

if (cid:25) is a permutation of   1::n  , let mnp .(cid:25)/ be the maximum integer in   1::n   that
does not occur in place in (cid:25). for example, for n d 8,
mnp .12345687/ d 8;
mnp .21345678/ d 2;
mnp .23145678/ d 3:

(a) for how many permutations of   1::n   is every element in place?
(b) how many permutations (cid:25) of   1::n   have mnp .(cid:25)/ d 1?
(c) how many permutations of   1::n   have mnp .(cid:25)/ d k?
(d) conclude the equation (15.28).

problem 15.71.
each day, an mit student selects a breakfast from among b possibilities, lunch
from among l possibilities, and dinner from among d possibilities. in each case
one of the possibilities is doritos. however, a legimate daily menu may include
doritos for at most one meal. give a combinatorial (not algebraic) proof based on
the number of legimate daily menus that

bld (cid:0)   .b (cid:0) 1/ c .l (cid:0) 1/ c .d (cid:0) 1/ c 1  
d b.l (cid:0) 1/.d (cid:0) 1/ c .b (cid:0) 1/l.d (cid:0) 1/ c .b (cid:0) 1/.l (cid:0) 1/d
(cid:0)3.b (cid:0) 1/.l (cid:0) 1/.d (cid:0) 1/ c .b (cid:0) 1/.l (cid:0) 1/.d (cid:0) 1/

hint: let mb be the number of menus where, if doritos appear at all, they only

appear at breakfast; likewise, for ml ; md .

homework problems
problem 15.72. (a) find a combinatorial (not algebraic) proof that

 

!

n

nx

id0

i

d 2n:

11this problem is based on    use of everywhere divergent generating function,    mathover   ow,

response 8,147 by aaron meyerowitz, nov. 12, 2010.

   mcs        2017/6/5     19:42     page 689     #697

15.11. references

689

(b) below is a combinatorial proof of an equation. what is the equation?

proof. stinky peterson owns n newts, t toads, and s slugs. conveniently, he lives
in a dorm with n c t c s other students. (the students are distinguishable, but
creatures of the same variety are not distinguishable.) stinky wants to put one
creature in each neighbor   s bed. let w be the set of all ways in which this can be
done.
on one hand, he could    rst determine who gets the slugs. then, he could decide
who among his remaining neighbors has earned a toad. therefore, jw j is equal to
the expression on the left.
on the other hand, stinky could    rst decide which people deserve newts and slugs
and then, from among those, determine who truly merits a newt. this shows that
jw j is equal to the expression on the right.
since both expressions are equal to jw j, they must be equal to each other.

(cid:4)

(combinatorial proofs are real proofs. they are not only rigorous, but also con-
vey an intuitive understanding that a purely algebraic argument might not reveal.
however, combinatorial proofs are usually less colorful than this one.)

problem 15.73.
give a combinatorial proof for this identity:

 
k c i

!

k

nx

id0

 
!
k c n c 1
k c 1

d

hint: let si be the set of binary sequences with exactly n zeroes, kc1 ones, and
a total of exactly i occurrences of zeroes appearing before the rightmost occurrence
of a one.

problem 15.74.
according to the multinomial theorem 15.6.5, .x1 c x2 c (cid:1)(cid:1)(cid:1) c xk/n can be
expressed as a sum of terms of the form

 

!

n

r1; r2; : : : ; rk

xr1
1 xr2

2 : : : xrk
k :

(a) how many terms are there in the sum?

   mcs        2017/6/5     19:42     page 690     #698

690

chapter 15 cardinality rules

(b) the sum of these multinomial coef   cients has an easily expressed value:

 

x

!

r1cr2c(cid:1)(cid:1)(cid:1)crkdn;

ri2n

r1; r2; : : : ; rk

n

d kn

(15.29)

give a combinatorial proof of this identity.
hint: how many terms are there when .x1 c x2 c(cid:1)(cid:1)(cid:1)c xk/n is expressed as a sum
of monomials in xi before terms with like powers of these variables are collected
together under a single coef   cient?

problem 15.75.
you want to choose a team of m people for your startup company from a pool of n
applicants, and from these m people you want to choose k to be the team managers.
you took a math for computer science subject, so you know you can do this in

n

m

m

!
!

 
! 
! 
n (cid:0) k
m (cid:0) k

k

n

k

:

 

ways. but your cfo, who went to harvard business school, comes up with the
formula

before doing the reasonable thing   dump on your cfo or harvard business school   
you decide to check his answer against yours.
(a) give a combinatorial proof that your cfo   s formula agrees with yours.

(b) verify this combinatorial proof by giving an algebraic proof of this same fact.

exam problems
problem 15.76.
each day, an mit student selects a breakfast from among b possibilities, lunch
from among l possibilities, and dinner from among d possibilities. in each case
one of the possibilities is doritos. however, a legimate daily menu may include
doritos for at most one meal. give a combinatorial (not algebraic) proof based on
the number of legimate daily menus that
bld (cid:0)   .b (cid:0) 1/ c .l (cid:0) 1/ c .d (cid:0) 1/ c 1  

d .l (cid:0) 1/.d (cid:0) 1/ c .b (cid:0) 1/.d (cid:0) 1/ c .b (cid:0) 1/.l (cid:0) 1/ c .b (cid:0) 1/.l (cid:0) 1/.d (cid:0) 1/:

   mcs        2017/6/5     19:42     page 691     #699

15.11. references

691

problem 15.77.
give a combinatorial proof of

 
!
n c 1
1 (cid:1) 2 c 2 (cid:1) 3 c 3 (cid:1) 4 c (cid:1)(cid:1)(cid:1) c .n (cid:0) 1/ (cid:1) n d 2

3

hint: classify sets of three numbers from the integer interval   0::n   by their

maximum element.

   mcs        2017/6/5     19:42     page 692     #700

   mcs        2017/6/5     19:42     page 693     #701

16

generating functions
generating functions are one of the most surprising and useful inventions in dis-
crete mathematics. roughly speaking, generating functions transform problems
about sequences into problems about algebra. this is great because we   ve got piles
of algebraic rules. thanks to generating functions, we can reduce problems about
sequences to checking properties of algebraic expressions. this will allow us to
use generating functions to solve all sorts of counting problems.

several    avors of generating functions such as ordinary, exponential, and dirich-
in addition, z-transforms,
let come up regularly in combinatorial mathematics.
which are closely related to ordinary generating functions, are important in control
theory and signal processing. but ordinary generating functions are enough to il-
lustrate the power of the idea, so we   ll stick to them. so from now on generating
function will mean the ordinary kind, and we will offer a taste of this large subject
by showing how generating functions can be used to solve certain kinds of count-
ing problems and how they can be used to    nd simple formulas for linear-recursive
functions.

16.1 in   nite series

informally, a generating function f .x/ is an in   nite series

f .x/ d f0 c f1x c f2x2 c f3x3 c (cid:1)(cid:1)(cid:1) :

(16.1)

we use the notation   xn  f .x/ for the coef   cient of xn in the generating function
f .x/. that is,   xn  f .x/ wwd fn.
we can analyze the behavior of any sequence of numbers f0; f1 : : : fn : : : by
regarding the elements of the sequence as successive coef   cients of a generating
function.
it turns out that properties of complicated sequences that arise from
counting, recursive de   nition, and programming problems are easy to explain by
treating them as generating functions.

generating functions can produce noteworthy insights even when the sequence
of coef   cients is trivial. for example, let g.x/ be the generating function for the
in   nite sequence of ones 1; 1; : : : , namely, the geometric series.
g.x/ wwd 1 c x c x2 c (cid:1)(cid:1)(cid:1) c xn c (cid:1)(cid:1)(cid:1) :

(16.2)

   mcs        2017/6/5     19:42     page 694     #702

694

chapter 16 generating functions

we   ll use typical generating function reasoning to derive a simple formula for
g.x/. the approach is actually an easy version of the perturbation method of
section 14.1.2. speci   cally,

g.x/ d 1 c x c x2 c x3 c (cid:1)(cid:1)(cid:1) c xn c (cid:1)(cid:1)(cid:1)
(cid:0)xg.x/ d (cid:0) x (cid:0) x2 (cid:0) x3 (cid:0) (cid:1)(cid:1)(cid:1) (cid:0) xn (cid:0) (cid:1)(cid:1)(cid:1)

g.x/ (cid:0) xg.x/ d 1:

solving for g.x/ gives

1

1 (cid:0) x

in other words,

  xn  

1x
  d 1

nd0

d g.x/ wwd

  1

1 (cid:0) x

xn:

(16.3)

continuing with this approach yields a nice formula for

n.x/ wwd 1 c 2x c 3x2 c (cid:1)(cid:1)(cid:1) c .n c 1/xn c (cid:1)(cid:1)(cid:1) :

(16.4)

speci   cally,

n.x/ d 1 c 2x c 3x2 c 4x3 c (cid:1)(cid:1)(cid:1) c .n c 1/xn c (cid:1)(cid:1)(cid:1)
(cid:0) (cid:1)(cid:1)(cid:1)
c (cid:1)(cid:1)(cid:1)

(cid:0) x (cid:0) 2x2 (cid:0) 3x3 (cid:0) (cid:1)(cid:1)(cid:1) (cid:0)
n.x/ (cid:0) xn.x/ d 1 c x c x2 c x3 c (cid:1)(cid:1)(cid:1) c

(cid:0)xn.x/ d

nxn
xn

d g.x/:

solving for n.x/ gives

1

.1 (cid:0) x/2

on other words,

1x
  d n c 1:

nd0

d g.x/
1 (cid:0) x
 

  xn  

1

.1 (cid:0) x/2

d n.x/ wwd

.n c 1/xn:

(16.5)

16.1.1 never mind convergence
equations (16.3) and (16.5) hold numerically only when jxj < 1, because both
generating function series diverge when jxj (cid:21) 1. but in the context of generat-
ing functions, we regard in   nite series as formal algebraic objects. equations such
as (16.3) and (16.5) de   ne symbolic identities that hold for purely algebraic rea-
sons. in fact, good use can be made of generating functions determined by in   nite
series that don   t converge anywhere (besides x d 0). we   ll explain this further in
section 16.5 at the end of this chapter, but for now, take it on faith that you don   t
need to worry about convergence.

   mcs        2017/6/5     19:42     page 695     #703

16.2. counting with generating functions

695

16.2 counting with generating functions

generating functions are particularly useful for representing and counting the num-
ber of ways to select n things. for example, suppose there are two    avors of donuts,
chocolate and plain. let dn be the number of ways to select n chocolate or plain
   avored donuts. dn d n c 1, because there are n c 1 such donut selections   all
chocolate, 1 plain and n (cid:0) 1 chocolate, 2 plain and n (cid:0) 2 chocolate,. . . , all plain.
we de   ne a generating function d.x/ for counting these donut selections by letting
the coef   cient of xn be dn. this gives us equation (16.5)

d.x/ d

1

.1 (cid:0) x/2 :

(16.6)

16.2.1 apples and bananas too
more generally, suppose we have two kinds of things   say, apples and bananas   
and some constraints on how many of each may be selected. say there are an ways
to select n apples and bn ways to select n bananas. the generating function for
counting apples would be

1x
1x

nd0

nd0

anxn;

bnxn:

a.x/ wwd

b.x/ wwd
(

and for bananas would be

now suppose apples come in baskets of 6, so there is no way to select 1 to 5

apples, one way to select 6 apples, no way to select 7, etc. in other words,

an d

in this case we would have

1

0

if n is a multiple of 6;
otherwise:

a.x/ d 1 c x6 c x12 c (cid:1)(cid:1)(cid:1) c x6n c (cid:1)(cid:1)(cid:1)

d 1 c y c y2 c (cid:1)(cid:1)(cid:1) c yn c (cid:1)(cid:1)(cid:1)
d 1
1 (cid:0) y

1 (cid:0) x6 :

d 1

where y d x6;

let   s also suppose there are two kinds of bananas   red and yellow. now, bn d
n c 1 by the same reasoning used to count selections of n chocolate and plain

   mcs        2017/6/5     19:42     page 696     #704

696

chapter 16 generating functions

donuts, and by (16.6) we have

b.x/ d

1

.1 (cid:0) x/2 :

so how many ways are there to select a mix of n apples and bananas? first, we
decide how many apples to select. this can be any number k from 0 to n. we can
then select these apples in ak ways, by de   nition. this leaves n (cid:0) k bananas to
be selected, which by de   nition can be done in bn(cid:0)k ways. so the total number
of ways to select k apples and n (cid:0) k bananas is akbn(cid:0)k. this means that the total
number of ways to select some size n mix of apples and bananas is

a0bn c a1bn(cid:0)1 c a2bn(cid:0)2 c (cid:1)(cid:1)(cid:1) c anb0:

(16.7)

16.2.2 products of generating functions
now here   s the cool connection between counting and generating functions: ex-
pression (16.7) is equal to the coef   cient of xn in the product a.x/b.x/.

in other words, we   re claiming that

rule (product).

  xn  .a.x/ (cid:1) b.x// d a0bn c a1bn(cid:0)1 c a2bn(cid:0)2 c (cid:1)(cid:1)(cid:1) c anb0:

(16.8)

to explain the generating function product rule, we can think about evaluating
the product a.x/ (cid:1) b.x/ by using a table to identify all the cross-terms from the
product of the sums:

b0x0

b1x1

b2x2

b3x3

a0x0

a0b0x0

a0b1x1

a0b2x2

a0b3x3

a1x1

a1b0x1

a1b1x2

a1b2x3

: : :

: : :

: : :

a2x2

a2b0x2

a2b1x3

: : :

a3x3

a3b0x3

: : :

:::

: : :

in this layout, all the terms involving the same power of x lie on a 45-degree sloped
diagonal. so, the index-n diagonal contains all the xn-terms, and the coef   cient of

   mcs        2017/6/5     19:42     page 697     #705

16.2. counting with generating functions

697

xn in the product a.x/ (cid:1) b.x/ is the sum of all the coef   cients of the terms on this
diagonal, namely, (16.7). the sequence of coef   cients of the product a.x/ (cid:1) b.x/
is called the convolution of the sequences .a0; a1; a2; : : : / and .b0; b1; b2; : : : /. in
addition to their algebraic role, convolutions of sequences play a prominent role in
signal processing and control theory.
this product rule provides the algebraic justi   cation for the fact that a geometric
series equals 1=.1 (cid:0) x/ regardless of convergence. speci   cally, the constant 1
describes the generating function

1 d 1 c 0x c 0x2 c (cid:1)(cid:1)(cid:1) c 0xn c (cid:1)(cid:1)(cid:1) :

likewise, the expression 1 (cid:0) x describes the generating function
1 (cid:0) x d 1 c .(cid:0)1/x c 0x2 c (cid:1)(cid:1)(cid:1) c 0xn c (cid:1)(cid:1)(cid:1) :

so for the series g.x/ whose coef   cients are all equal to 1, the product rule implies
in a purely formal way that

.1 (cid:0) x/ (cid:1) g.x/ d 1 c 0x c 0x2 c (cid:1)(cid:1)(cid:1) c 0xn c (cid:1)(cid:1)(cid:1) d 1:

in other words, under the product rule, the geometric series g.x/ is the multiplica-
tive inverse 1=.1 (cid:0) x/ of 1 (cid:0) x.
similar reasoning justi   es multiplying a generating function by a constant term

by term. that is, a special case of the product rule is the
rule (constant factor). for any constant c and generating function f .x/

  xn  .c (cid:1) f .x// d c (cid:1)   xn  f .x/:

(16.9)

16.2.3 the convolution rule
we can summarize the discussion above with the
rule (convolution). let a.x/ be the generating function for selecting items from
a set a, and let b.x/ be the generating function for selecting items from a set b
disjoint from a. the generating function for selecting items from the union a [ b
is the product a.x/ (cid:1) b.x/.
the rule depends on a precise de   nition of what    selecting items from the union
a [ b    means. informally, the idea is that the restrictions on the selection of items
from sets a and b carry over to selecting items from a [ b.1

1formally, the convolution rule applies when there is a bijection between n-element selections
from a [ b and ordered pairs of selections from the sets a and b containing a total of n elements.
we think the informal statement is clear enough.

   mcs        2017/6/5     19:42     page 698     #706

698

chapter 16 generating functions

16.2.4 counting donuts with the convolution rule
we can use the convolution rule to derive in another way the generating function
d.x/ for the number of ways to select chocolate and plain donuts given in (16.6).
to begin, there is only one way to select exactly n chocolate donuts. that means
every coef   cient of the generating function for selecting n chocolate donuts equals
one. so the generating function for chocolate donut selections is 1=.1(cid:0)x/; likewise
for the generating function for selecting only plain donuts. now by the convolution
rule, the generating function for the number of ways to select n donuts when both
chocolate and plain    avors are available is

d.x/ d 1
1 (cid:0) x

(cid:1)

1

1 (cid:0) x

d

1

.1 (cid:0) x/2 :

so we have derived (16.6) without appeal to (16.5).

our application of the convolution rule for two    avors carries right over to the
general case of k    avors; the generating function for selections of donuts when k
   avors are available is 1=.1 (cid:0) x/k. we already derived the formula for the number

of ways to select a n donuts when k    avors are available, namely,(cid:0)nc.k(cid:0)1/

(cid:1) from

n

corollary 15.5.3. so we have

 

  xn  

1

.1 (cid:0) x/k

 
n c .k (cid:0) 1/

!

  d

n

:

(16.10)

extracting coef   cients from maclaurin   s theorem
we   ve used a donut-counting argument to derive the coef   cients of 1=.1 (cid:0) x/k,
but it   s instructive to derive this coef   cient algebraically, which we can do using
maclaurin   s theorem:

0

00

.0/x c f

theorem 16.2.1 (maclaurin   s theorem).
f .x/ d f .0/ c f
xn c (cid:1)(cid:1)(cid:1) :
this theorem says that the nth coef   cient of 1=.1(cid:0) x/k is equal to its nth deriva-
tive evaluated at 0 and divided by n  . computing the nth derivative turns out not to
be very dif   cult

x3 c (cid:1)(cid:1)(cid:1) c f .n/.0/

x2 c f

.0/

.0/

000

n  

2  

3  

d n
d nx

1

.1 (cid:0) x/k

d k.k c 1/(cid:1)(cid:1)(cid:1) .k c n (cid:0) 1/.1 (cid:0) x/

(cid:0).kcn/

   mcs        2017/6/5     19:42     page 699     #707

16.2. counting with generating functions

699

(see problem 16.5), so

 

  xn  

1

.1 (cid:0) x/k

1

 

  d  d n
d k.k c 1/(cid:1)(cid:1)(cid:1) .k c n (cid:0) 1/.1 (cid:0) 0/
 
n c .k (cid:0) 1/
d

.1 (cid:0) x/k
!

d nx

.0/

n  

n  

1

:

n

(cid:0).kcn/

in other words, instead of using the donut-counting formula (16.10) to    nd the
coef   cients of xn, we could have used this algebraic argument and the convolution
rule to derive the donut-counting formula.

16.2.5 the binomial theorem from the convolution rule
the convolution rule also provides a new perspective on the binomial theo-
rem 15.6.4. here   s how:    rst, work with the single-element set fa1g. the gen-
erating function for the number of ways to select n different elements from this set
is simply 1 c x: we have 1 way to select zero elements, 1 way to select the one
element, and 0 ways to select more than one element. similarly, the number of
ways to select n elements from any single-element set faig has the same generating
function 1c x. now by the convolution rule, the generating function for choosing
a subset of n elements from the set fa1; a2; : : : ; amg is the product .1 c x/m of the
generating functions for selecting from each of the m one-element sets. since we

know that the number of ways to select n elements from a set of size m is(cid:0)m
(cid:1), we

n

conclude that that

  xn  .1 c x/m d

 

!

m

n

;

which is a restatement of the binomial theorem 15.6.4. thus, we have proved
the binomial theorem without having to analyze the expansion of the expression
.1 c x/m into a sum of products.
these examples of counting donuts and deriving the binomial coef   cients illus-

trate where generating functions get their power:

generating functions can allow counting problems to be solved by algebraic
manipulation, and conversely, they can allow algebraic identities to be derived by
counting techniques.

   mcs        2017/6/5     19:42     page 700     #708

700

chapter 16 generating functions

16.2.6 an absurd counting problem
so far everything we   ve done with generating functions we could have done another
way. but here is an absurd counting problem   really over the top! in how many
ways can we    ll a bag with n fruits subject to the following constraints?

(cid:15) the number of apples must be even.
(cid:15) the number of bananas must be a multiple of 5.
(cid:15) there can be at most four oranges.
(cid:15) there can be at most one pear.
for example, there are 7 ways to form a bag with 6 fruits:

apples
6 4 4 2 2 0 0
bananas 0 0 0 0 0 5 5
oranges 0 2 1 4 3 1 0
pears
0 0 1 0 1 0 1

these constraints are so complicated that getting a nice answer may seem impossi-
ble. but let   s see what generating functions reveal.

first, we   ll construct a generating function for choosing apples. we can choose a
set of 0 apples in one way, a set of 1 apple in zero ways (since the number of apples
must be even), a set of 2 apples in one way, a set of 3 apples in zero ways, and so
forth. so, we have:

a.x/ d 1 c x2 c x4 c x6 c (cid:1)(cid:1)(cid:1) d 1

1 (cid:0) x2

similarly, the generating function for choosing bananas is:

b.x/ d 1 c x5 c x10 c x15 c (cid:1)(cid:1)(cid:1) d 1

1 (cid:0) x5

now, we can choose a set of 0 oranges in one way, a set of 1 orange in one way,
and so on. however, we cannot choose more than four oranges, so we have the
generating function:

o.x/ d 1 c x c x2 c x3 c x4 d 1 (cid:0) x5
1 (cid:0) x

:

here the right-hand expression is simply the formula (14.2) for a    nite geometric
sum. finally, we can choose only zero or one pear, so we have:

p .x/ d 1 c x

   mcs        2017/6/5     19:42     page 701     #709

16.3. partial fractions

701

the convolution rule says that the generating function for choosing from among

all four kinds of fruit is:

a.x/b.x/o.x/p .x/ d 1

1 (cid:0) x5
1 (cid:0) x

1

1 (cid:0) x5

.1 c x/

1 (cid:0) x2
.1 (cid:0) x/2

1

d
d 1 c 2x c 3x2 c 4x3 c (cid:1)(cid:1)(cid:1)

almost everything cancels! we   re left with 1=.1 (cid:0) x/2, which we found a power
series for earlier: the coef   cient of xn is simply nc 1. thus, the number of ways to
form a bag of n fruits is just n c 1. this is consistent with the example we worked
out, since there were 7 different fruit bags containing 6 fruits. amazing!

this example was contrived to seem complicated at    rst sight so we could high-
light the power of counting with generating functions. but the simple suggests that
there ought to be an elementary derivation without resort to generating functions,
and indeed there is (problem 16.8).

16.3 partial fractions

we got a simple solution to the seemingly impossible counting problem of sec-
tion 16.2.6 because its generating function simpli   ed to the expression 1=.1(cid:0) x/2,
whose power series coef   cients we already knew. this problem was set up so the
answer would work out neatly, but other problems are not so neat. to solve more
general problems using generating functions, we need ways to    nd power series co-
ef   cients for generating functions given as formulas. maclaurin   s theorem 16.2.1
is a very general method for    nding coef   cients, but it only applies when formulas
for repeated derivatives can be found, which isn   t often. however, there is an auto-
matic way to    nd the power series coef   cients for any formula that is a quotient of
polynomials, namely, the method of partial fractions from elementary calculus.

the partial fraction method is based on the fact that quotients of polynomials
can be expressed as sums of terms whose power series coef   cients have nice for-
mulas. for example when the denominator polynomial has distinct nonzero roots,
the method rests on
lemma 16.3.1. let p.x/ be a polynomial of degree less than n and let   1; : : : ;   n
be distinct, nonzero numbers. then there are constants c1; : : : ; cn such that
c (cid:1)(cid:1)(cid:1) c cn

d c1

c c2

p.x/

.1 (cid:0)   1x/.1 (cid:0)   2x/(cid:1)(cid:1)(cid:1) .1 (cid:0)   nx/

1 (cid:0)   1x

1 (cid:0)   2x

1 (cid:0)   nx

:

   mcs        2017/6/5     19:42     page 702     #710

702

chapter 16 generating functions

let   s illustrate the use of lemma 16.3.1 by    nding the power series coef   cients

for the function

we can use the quadratic formula to    nd the roots r1; r2 of the denominator 1 (cid:0)
x (cid:0) x2.

r.x/ wwd
r1 d (cid:0)1 (cid:0) p

5

x

1 (cid:0) x (cid:0) x2 :
; r2 d (cid:0)1 c p

2

5

:

2

so

1 (cid:0) x (cid:0) x2 d .x (cid:0) r1/.x (cid:0) r2/ d r1r2.1 (cid:0) x=r1/.1 (cid:0) x=r2/:

with a little algebra, we    nd that
r.x/ d

where

x

.1 (cid:0)   1x/.1 (cid:0)   2x/
  1 d 1 c p
  2 d 1 (cid:0) p

5

2

5

:

2

next we    nd c1 and c2 which satisfy:

x

.1 (cid:0)   1x/.1 (cid:0)   2x/

d c1

1 (cid:0)   1x

c c2

1 (cid:0)   2x

(16.11)

in general, we can do this by plugging in a couple of values for x to generate two
linear equations in c1 and c2 and then solve the equations for c1 and c2. a simpler
approach in this case comes from multiplying both sides of (16.11) by the left-hand
denominator to get
now letting x d 1=  2 we obtain
c2 d 1=  2

x d c1.1 (cid:0)   2x/ c c2.1 (cid:0)   1x/:

1

;

  2 (cid:0)   1

d (cid:0) 1p
5

d
and similarly, letting x d 1=  1 we obtain

1 (cid:0)   1=  2

c1 d 1p

5

:

   mcs        2017/6/5     19:42     page 703     #711

16.3. partial fractions

703

plugging these values for c1; c2 into equation (16.11)    nally gives the partial frac-
tion expansion

 

 

r.x/ d

x

1 (cid:0) x (cid:0) x2

d 1p
5

1

1 (cid:0)   1x

(cid:0)

1

1 (cid:0)   2x

each term in the partial fractions expansion has a simple power series given by the
geometric sum formula:

substituting in these series gives a power series for the generating function:

1

1 (cid:0)   1x
1 (cid:0)   2x

1

d 1 c   1x c   2
d 1 c   2x c   2

1x2 c (cid:1)(cid:1)(cid:1)
2x2 c (cid:1)(cid:1)(cid:1)

2x2 c (cid:1)(cid:1)(cid:1) /(cid:1) ;
(cid:0).1 c   1x c   2
1x2 c (cid:1)(cid:1)(cid:1) / (cid:0) .1 c   2x c   2
(cid:0)   n
  
!n!
2p
5

 

  xn  r.x/ d   n

1

!n (cid:0)

1 c p

5

2

1 (cid:0) p

5

2

d 1p
5

(16.12)

r.x/ d 1p

5

so

16.3.1 partial fractions with repeated roots
lemma 16.3.1 generalizes to the case when the denominator polynomial has a re-
peated nonzero root with multiplicity m by expanding the quotient into a sum a
terms of the form

where    is the reciprocal of the root and k   m. a formula for the coef   cients of
such a term follows from the donut formula (16.10).

c

.1 (cid:0)   x/k

  d c  n

 
!
n c .k (cid:0) 1/

 

c

  xn  

.1 (cid:0)   x/k

(16.13)
when    d 1, this follows from the donut formula (16.10) and termwise multipli-
cation by the constant c. the case for arbitrary    follows by substituting   x for x
in the power series; this changes xn into .  x/n and so has the effect of multiplying
the coef   cient of xn by   n.2

n

:

2in other words,

  xn  f .  x/ d   n (cid:1)   xn  f .x/:

   mcs        2017/6/5     19:42     page 704     #712

704

chapter 16 generating functions

16.4 solving linear recurrences

16.4.1 a generating function for the fibonacci numbers
the fibonacci numbers f0; f1; : : : ; fn; : : : are de   ned recursively as follows:

f0 wwd 0
f1 wwd 1
fn d wwdfn(cid:0)1 c fn(cid:0)2

(for n (cid:21) 2):

generating functions will now allow us to derive an astonishing closed formula for
fn.

let f .x/ be the generating function for the sequence of fibonacci numbers, that

is,

f .x/ wwd f0 c f1x c f2x2 c (cid:1)(cid:1)(cid:1) fnxn c (cid:1)(cid:1)(cid:1) :

reasoning as we did at the start of this chapter to derive the formula for a geometric
series, we have

f .x/ d f0 c
(cid:0)

(cid:0)xf .x/ d
(cid:0)x2f .x/ d

d 0 c

f1x c f2x2 c (cid:1)(cid:1)(cid:1) c
fnxn c (cid:1)(cid:1)(cid:1) :
f0x (cid:0) f1x2 (cid:0) (cid:1)(cid:1)(cid:1) (cid:0) fn(cid:0)1xn c (cid:1)(cid:1)(cid:1) :
(cid:0) f0x2 (cid:0) (cid:1)(cid:1)(cid:1) (cid:0) fn(cid:0)2xn c (cid:1)(cid:1)(cid:1) :
0xn c (cid:1)(cid:1)(cid:1) :

1x c 0x2 d x;

f .x/.1 (cid:0) x (cid:0) x2/ d f0 c .f1 (cid:0) f0/x c 0x2 c (cid:1)(cid:1)(cid:1) c

so

f .x/ d

but f .x/ is the same as the function we used to illustrate the partial fraction method
for    nding coef   cients in section 16.3. so by equation (16.12), we arrive at what
is called binet   s formula:

x

1 (cid:0) x (cid:0) x2 :
 

!n (cid:0)

5

!n!

1 (cid:0) p

5

2

  

1 c p

2

fn d 1p

5

(16.14)

binet   s formula for fibonacci numbers is astonishing and maybe scary. it   s not
even obvious that the expression on the right-hand side (16.14) is an integer. but
the formula is very useful. for example, it provides   via the repeated squaring
method   a much more ef   cient way to compute fibonacci numbers than crunch-
ing through the recurrence. it also make explicit the exponential growth of these
numbers.

   mcs        2017/6/5     19:42     page 705     #713

16.4. solving linear recurrences

705

figure 16.1 the initial con   guration of the disks in the towers of hanoi problem.

16.4.2 the towers of hanoi
according to legend, there is a temple in hanoi with three posts and 64 gold disks
of different sizes. each disk has a hole through the center so that it    ts on a post.
in the misty past, all the disks were on the    rst post, with the largest on the bottom
and the smallest on top, as shown in figure 16.1.

monks in the temple have labored through the years since to move all the disks

to one of the other two posts according to the following rules:

(cid:15) the only permitted action is removing the top disk from one post and drop-
ping it onto another post.
(cid:15) a larger disk can never lie above a smaller disk on any post.

so, for example, picking up the whole stack of disks at once and dropping them on
another post is illegal. that   s good, because the legend says that when the monks
complete the puzzle, the world will end!

to clarify the problem, suppose there were only 3 gold disks instead of 64. then

the puzzle could be solved in 7 steps as shown in figure 16.2.

the questions we must answer are,    given suf   cient time, can the monks suc-
ceed?    if so,    how long until the world ends?    and, most importantly,    will this
happen before the    nal exam?   

a recursive solution
the towers of hanoi problem can be solved recursively. as we describe the pro-
cedure, we   ll also analyze the minimum number tn of steps required to solve the
n-disk problem. for example, some experimentation shows that t1 d 1 and t2 d 3.
the procedure illustrated above uses 7 steps, which shows that t3 is at most 7.

the recursive solution has three stages, which are described below and illustrated

in figure 16.3. for clarity, the largest disk is shaded in the    gures.
stage 1. move the top n(cid:0)1 disks from the    rst post to the second using the solution

for n (cid:0) 1 disks. this can be done in tn(cid:0)1 steps.

   mcs        2017/6/5     19:42     page 706     #714

706

chapter 16 generating functions

figure 16.2 the 7-step solution to the towers of hanoi problem when there are
n d 3 disks.

figure 16.3 a recursive solution to the towers of hanoi problem.

1234567123   mcs        2017/6/5     19:42     page 707     #715

16.4. solving linear recurrences

707

stage 2. move the largest disk from the    rst post to the third post. this takes just

1 step.

stage 3. move the n (cid:0) 1 disks from the second post to the third post, again using

the solution for n (cid:0) 1 disks. this can also be done in tn(cid:0)1 steps.

this algorithm shows that tn, the minimum number of steps required to move n
disks to a different post, is at most tn(cid:0)1 c 1 c tn(cid:0)1 d 2tn(cid:0)1 c 1. we can use this
fact to upper bound the number of operations required to move towers of various
heights:

t3   2 (cid:1) t2 c 1 d 7
t4   2 (cid:1) t3 c 1   15

continuing in this way, we could eventually compute an upper bound on t64, the
number of steps required to move 64 disks. so this algorithm answers our    rst
question: given suf   cient time, the monks can    nish their task and end the world.
this is a shame. after all that effort, they   d probably want to smack a few high-   ves
and go out for burgers and ice cream, but nope   world   s over.

finding a recurrence
we cannot yet compute the exact number of steps that the monks need to move the
64 disks, only an upper bound. perhaps, having pondered the problem since the
beginning of time, the monks have devised a better algorithm.

lucky for us, there is no better algorithm. here   s why: at some step, the monks
must move the largest disk from the    rst post to a different post. for this to happen,
the n (cid:0) 1 smaller disks must all be stacked out of the way on the only remaining
post. arranging the n(cid:0) 1 smaller disks this way requires at least tn(cid:0)1 moves. after
the largest disk is moved, at least another tn(cid:0)1 moves are required to pile the n (cid:0) 1
smaller disks on top.
this argument shows that the number of steps required is at least 2tn(cid:0)1 c 1.
since we gave an algorithm using exactly that number of steps, we can now write
an expression for tn, the number of moves required to complete the towers of hanoi
problem with n disks:

t0 d 0
tn d 2tn(cid:0)1 c 1

(for n (cid:21) 1):

solving the recurrence
we can now    nd a formula for tn using generating functions. let t .x/ be the
generating function for the tn   s, that is,

t .x/ wwd t0 c t1x c t2x2 c (cid:1)(cid:1)(cid:1) tnxn c (cid:1)(cid:1)(cid:1) :

   mcs        2017/6/5     19:42     page 708     #716

708

chapter 16 generating functions

reasoning as we did for the fibonacci recurrence, we have

t0 c t1x c (cid:1)(cid:1)(cid:1) c
(cid:0)1 (cid:0)
1x (cid:0) (cid:1)(cid:1)(cid:1) (cid:0)
0x c (cid:1)(cid:1)(cid:1) c
t .x/.1 (cid:0) 2x/ (cid:0) 1=.1 (cid:0) x/ d t0 (cid:0) 1 c
(cid:0)1;

tnxn c (cid:1)(cid:1)(cid:1)
(cid:0) 2t0x (cid:0) (cid:1)(cid:1)(cid:1) (cid:0) 2tn(cid:0)1xn c (cid:1)(cid:1)(cid:1)
1xn c (cid:1)(cid:1)(cid:1)
0xn c (cid:1)(cid:1)(cid:1)

t .x/ d
(cid:0)2xt .x/ d
(cid:0)1=.1 (cid:0) x/ d
d

so

and

t .x/.1 (cid:0) 2x/ d 1
1 (cid:0) x

(cid:0) 1 d x
1 (cid:0) x

;

t .x/ d

x

.1 (cid:0) 2x/.1 (cid:0) x/

:

using partial fractions,

x

.1 (cid:0) 2x/.1 (cid:0) x/

d c1
1 (cid:0) 2x

c c2
1 (cid:0) x

for some constants c1; c2. now multiplying both sides by the left hand denominator
gives
substituting 1=2 for x yields c1 d 1 and substituting 1 for x yields c2 d (cid:0)1,
which gives

x d c1.1 (cid:0) x/ c c2.1 (cid:0) 2x/:

t .x/ d 1

1 (cid:0) 2x

(cid:0) 1
1 (cid:0) x

:

finally we can read off the simple formula for the numbers of steps needed to move
a stack of n disks:

  1

1 (cid:0) 2x

  (cid:0)   xn  

  1

1 (cid:0) x

  d 2n (cid:0) 1:

tn d   xn  t .x/ d   xn  

16.4.3 solving general linear recurrences
an equation of the form

f .n/ d c1f .n (cid:0) 1/ c c2f .n (cid:0) 2/ c (cid:1)(cid:1)(cid:1) c cd f .n (cid:0) d / c h.n/

(16.15)
for constants ci 2 c is called a degree d linear recurrence with inhomogeneous
term h.n/.

the methods above can be used to solve linear recurrences with a large class of
inhomogeneous terms. in particular, when the inhomogeneous term itself has a gen-
erating function that can be expressed as a quotient of polynomials, the approach

   mcs        2017/6/5     19:42     page 709     #717

16.5. formal power series

709

used above to derive generating functions for the fibonacci and tower of hanoi
examples carries over to yield a quotient of polynomials that de   nes the generating
function f .0/ c f .1/x c f .2/x2 c (cid:1)(cid:1)(cid:1) . then partial fractions can be used to    nd
a formula for f .n/ that is a linear combination of terms of the form nk  n where k
is a nonnegative integer   d and    is the reciprocal of a root of the denominator
polynomial. for example, see problems 16.14, 16.15, 16.18, and 16.19.

16.5 formal power series

16.5.1 divergent generating functions
let f .x/ be the generating function for n  , that is,

f .x/ wwd 1 c 1x c 2x2 c (cid:1)(cid:1)(cid:1) c n  xn c (cid:1)(cid:1)(cid:1) :

because xn d o.n  / for all x    0, this generating function converges only at
x d 0.3
next, let h.x/ be the generating function for n (cid:1) n  , that is,

h.x/ wwd 0 c 1x c 4x2 c (cid:1)(cid:1)(cid:1) c n (cid:1) n  xn c (cid:1)(cid:1)(cid:1) :

again, h.x/ converges only for x d 0, so h.x/ and f .x/ describe the same,
trivial, partial function on the reals.

on the other hand, f .x/ and h.x/ have different coef   cients for all powers of
x greater than 1, and we can usefully distinguish them as formal, symbolic objects.
to illustrate this, note than by subtracting 1 from f .x/ and then dividing each
of the remaining terms by x, we get a series where the coef   cient if xn is .n c 1/  .
that is

  f .x/ (cid:0) 1

  d .n c 1/   :

(16.16)

  xn  

x

now a little further formal reasoning about f .x/ and h.x/ will allow us to

deduce the following identity for n  :4

n   d 1 c nx

id1

.i (cid:0) 1/ (cid:1) .i (cid:0) 1/  

(16.17)

3this section is based on an example from    use of everywhere divergent generating function,   

mathoverflow, response 8,147 by aaron meyerowitz, nov. 12, 2010.

4a combinatorial proof of (16.17) is given in problem 15.70

   mcs        2017/6/5     19:42     page 710     #718

710

chapter 16 generating functions

to prove this identity, note that from (16.16), we have

  xn  h.x/ wwd n (cid:1) n   d .n c 1/   (cid:0) n   d   xn  

  f .x/ (cid:0) 1

  (cid:0)   xn  f .x/:

x

in other words,

h.x/ d f .x/ (cid:0) 1

x

(cid:0) f .x/;

(16.18)

solving (16.18) for f .x/, we get

(16.19)
but   xn  .xh.x/ c 1/ is .n (cid:0) 1/ (cid:1) .n (cid:0) 1/   for n (cid:21) 1 and is 1 for n d 0, so by the
convolution formula,

:

f .x/ d xh.x/ c 1
1 (cid:0) x
  d 1 c nx

id1

  xh.x/ c 1

1 (cid:0) x

  xn  

.i (cid:0) 1/ (cid:1) .i (cid:0) 1/   :

the identity (16.17) now follows immediately from (16.19).

16.5.2 the ring of power series
so why don   t we have to worry about series whose radius of convergence is zero,
and how do we justify the kind of manipulation in the previous section to derive
the formula (16.19)? the answer comes from thinking abstractly about in   nite
sequences of numbers and operations that can be performed on them.

for example, one basic operation combining two in   nite sequences is adding

them coordinatewise. that is, if we let

g wwd .g0; g1; g2; : : : /;
h wwd .h0; h1; h2; : : : /;
then we can de   ne the sequence sum    by the rule:

g    h wwd .g0 c h0; g1 c h1; : : : ; gn c hn; : : : /:

another basic operation is sequence multiplication    de   ned by the convolution
rule (not coordinatewise):

 
g0 c h0; g0h1 c g1h0; : : : ;

nx

id0

!

gi hn(cid:0)i ; : : :

:

g    h wwd

   mcs        2017/6/5     19:42     page 711     #719

16.5. formal power series

711

these operations on in   nite sequences have lots of nice properties. for example,
it   s easy to check that sequence addition and multiplication are commutative:

if we let

g    h d h    g;
g    h d h    g:

z wwd .0; 0; 0; : : : /;
i wwd .1; 0; 0; : : : ; 0; : : : /;

then it   s equally easy to check that z acts like a zero for sequences and i acts like
the number one:

z    g d g;
z    g d z;
i    g d g:

(cid:0)g wwd .(cid:0)g0;(cid:0)g1;(cid:0)g2; : : : /

(16.20)

now if we de   ne

then

g    .(cid:0)g/ d z:

in fact, the operations    and    satisfy all the commutative ring axioms described
in section 9.7.1. the set of in   nite sequences of numbers together with these op-
erations is called the ring of formal power series over these numbers.5

a sequence h is the reciprocal of a sequence g when

g    h d i:

a reciprocal of g is also called a multiplicative inverse or simply an    inverse   
of g. the ring axioms imply that if there is a reciprocal, it is unique (see prob-
lem 9.33), so the suggestive notation 1=g can be used unambiguously to denote
this reciprocal, if it exists. for example, letting

j wwd .1;(cid:0)1; 0; 0; : : : ; 0; : : : /
k wwd .1; 1; 1; 1; : : : ; 1; : : : /;

the de   nition of    implies that j    k d i , and so k d 1=j and j d 1=k.

5the elements in the sequences may be the real numbers, complex numbers, or, more generally,

may be the elements from any given commutative ring.

   mcs        2017/6/5     19:42     page 712     #720

712

chapter 16 generating functions

in the ring of formal power series, equation (16.20) implies that the zero se-
quence z has no inverse, so 1=z is unde   ned   just as the expression 1/0 is unde-
   ned over the real numbers or the ring zn of section 9.7.1. it   s not hard to verify
that a series has an inverse iff its initial element is nonzero (see problem 16.25).

now we can explain the proper way to understand a generating function de   ni-

tion

g.x/ wwd

gnxn:

1x

nd0

it simply means that g.x/ really refers to its in   nite sequence of coef   cients .g0; g1; : : : /
in the ring of formal power series. the simple expression x can be understood as
referring to the sequence

x wwd .0; 1; 0; 0; : : : ; 0; : : : /:

likewise, 1 (cid:0) x abbreviates the sequence j above, and the familiar equation

d 1 c x c x2 c x3 c (cid:1)(cid:1)(cid:1)

1

1 (cid:0) x

(16.21)

can be understood as a way of restating the assertion that k is 1=j . in other words,
the powers of the variable x just serve as a place holders   and as reminders of the
de   nition of convolution. the equation (16.21) has nothing to do with the values
of x or the convergence of the series. rather, it is stating a property that holds in
the ring of formal power series. the reasoning about the divergent series in the
previous section is completely justi   ed as properties of formal power series.

16.6 references

[50], [25], [10] [20]

problems for section 16.1

practice problems
problem 16.1.
the notation   xn  f .x/ refers to the coef   cient of xn in the generating function

   mcs        2017/6/5     19:42     page 713     #721

16.6. references

713

f .x/. indicate all the expressions below that equal   xn  4xg.x/ (most of them do).

4  xn  xg.x/
.  xn  4x/ (cid:1)   xn  g.x/

4x  xn  g.x/
.  x  4x/ (cid:1)   xn  xg.x/

  xn(cid:0)1  4g.x/
  xnc1  4x2g.x/

problem 16.2.
what is the coef   cient of xn in the generating function

1 c x
.1 (cid:0) x/2

   

problems for section 16.2

practice problems
problem 16.3.
you would like to buy a bouquet of    owers. you    nd an online service that will
make bouquets of lilies, roses and tulips, subject to the following constraints:

(cid:15) there must be at most 1 lily,
(cid:15) there must be an odd number of tulips,
(cid:15) there must be at least two roses.
example: a bouquet of no lilies, 3 tulips, and 5 roses satis   es the constraints.
express b.x/, the generating function for the number of ways to select a bouquet
of n    owers, as a quotient of polynomials (or products of polynomials). you do not
need to simplify this expression.

problem 16.4.
write a formula for the generating function whose successive coef   cients are given
by the sequence:
(a) 0, 0, 1, 1, 1,. . .

(b) 1, 1, 0, 0, 0,. . .

   mcs        2017/6/5     19:42     page 714     #722

714

chapter 16 generating functions

(c) 1, 0, 1, 0, 1, 0, 1,. . .

(d) 1, 4, 6, 4, 1, 0, 0, 0,. . .

(e) 1, 2, 3, 4, 5,. . .

(f) 1, 4, 9, 16, 25,. . .

(g) 1, 1, 1/2, 1/6, 1/24, 1/120,. . .

class problems
problem 16.5.

let a.x/ dp1

nd0 anxn. then it   s easy to check that

where a.n/ is the nth derivative of a. use this fact (which you may assume) instead
of the convolution counting principle 16.2.3, to prove that

;

n  

an d a.n/.0/
 
n c k (cid:0) 1
k (cid:0) 1

1x

d

nd0

!

xn:

1

.1 (cid:0) x/k

so if we didn   t already know the bookkeeper rule from section 15.6, we could
have proved it from this calculation and the convolution rule for generating func-
tions.

problem 16.6. (a) let

s.x/ wwd x2 c x
.1 (cid:0) x/3 :

what is the coef   cient of xn in the generating function series for s.x/?
(b) explain why s.x/=.1 (cid:0) x/ is the generating function for the sums of squares.

that is, the coef   cient of xn in the series for s.x/=.1 (cid:0) x/ ispn

kd1 k2.

(c) use the previous parts to prove that

nx

kd1

k2 d n.n c 1/.2n c 1/

6

:

   mcs        2017/6/5     19:42     page 715     #723

16.6. references

715

homework problems
problem 16.7.
we will use generating functions to determine how many ways there are to use
pennies, nickels, dimes, quarters, and half-dollars to give n cents change.
(a) write the generating function p .x/ for for the number of ways to use only
pennies to make n cents.

(b) write the generating function n.x/ for the number of ways to use only nickels
to make n cents.

(c) write the generating function for the number of ways to use only nickels and
pennies to change n cents.

(d) write the generating function for the number of ways to use pennies, nickels,
dimes, quarters, and half-dollars to give n cents change.

(e) explain how to use this function to    nd out how many ways are there to change
50 cents; you do not have to provide the answer or actually carry out the process.

problem 16.8.
the answer derived by generating functions for the    absurd    counting problem
in section 16.2.6 is not impossibly complicated at all. describe a direct simple
counting argument to derive this answer without using generating functions.

problems for section 16.3

class problems
problem 16.9.
we are interested in generating functions for the number of different ways to com-
pose a bag of n donuts subject to various restrictions. for each of the restrictions in
parts (a)-(e) below,    nd a closed form for the corresponding generating function.
(a) all the donuts are chocolate and there are at least 3.

(b) all the donuts are glazed and there are at most 2.

(c) all the donuts are coconut and there are exactly 2 or there are none.

(d) all the donuts are plain and their number is a multiple of 4.

   mcs        2017/6/5     19:42     page 716     #724

716

chapter 16 generating functions

(e) the donuts must be chocolate, glazed, coconut, or plain with the numbers of
each    avor subject to the constraints above.

(f) now    nd a closed form for the number of ways to select n donuts subject to
the above constraints.

homework problems
problem 16.10.
miss mcgillicuddy never goes outside without a collection of pets. in particular:

(cid:15) she brings a positive number of songbirds, which always come in pairs.
(cid:15) she may or may not bring her alligator, freddy.
(cid:15) she brings at least 2 cats.
(cid:15) she brings two or more chihuahuas and labradors leashed together in a line.

let pn denote the number of different collections of n pets that can accompany
her, where we regard chihuahuas and labradors leashed in different orders as dif-
ferent collections.
for example, p6 d 4 since there are 4 possible collections of 6 pets:
(cid:15) 2 songbirds, 2 cats, 2 chihuahuas leashed in line
(cid:15) 2 songbirds, 2 cats, 2 labradors leashed in line
(cid:15) 2 songbirds, 2 cats, a labrador leashed behind a chihuahua
(cid:15) 2 songbirds, 2 cats, a chihuahua leashed behind a labrador

(a) let

p .x/ wwd p0 c p1x c p2x2 c p3x3 c (cid:1)(cid:1)(cid:1)

be the generating function for the number of miss mcgillicuddy   s pet collections.
verify that

p .x/ d

4x6

.1 (cid:0) x/2.1 (cid:0) 2x/

:

(b) find a closed form expression for pn.

   mcs        2017/6/5     19:42     page 717     #725

16.6. references

717

exam problems
problem 16.11.
t-pain is planning an epic boat trip and he needs to decide what to bring with him.

(cid:15) he must bring some burgers, but they only come in packs of 6.
(cid:15) he and his two friends can   t decide whether they want to dress formally or
casually. he   ll either bring 0 pairs of    ip    ops or 3 pairs.
(cid:15) he doesn   t have very much room in his suitcase for towels, so he can bring
at most 2.
(cid:15) in order for the boat trip to be truly epic, he has to bring at least 1 nautical-
themed pashmina afghan.

(a) let b.x/ be the generating function for the number of ways to bring n burgers,
f .x/ for the number of ways to bring n pairs of    ip    ops, t .x/ for towels, and
a.x/ for afghans. write simple formulas for each of these.

(b) let gn be the the number of different ways for t-pain to bring n items (burg-
ers, pairs of    ip    ops, towels, and/or afghans) on his boat trip. let g.x/ be the

generating functionp1

nd0 gnxn. verify that
g.x/ d x7

.1 (cid:0) x/2 :

(c) find a simple formula for gn.

problem 16.12.
every day in the life of dangerous dan is a potential disaster:

(cid:15) dan may or may not spill his breakfast cereal on his computer keyboard.
(cid:15) dan may or may not fall down the front steps on his way out the door.
(cid:15) dan stubs his toe zero or more times.
(cid:15) dan blurts something foolish an even number of times.

   mcs        2017/6/5     19:42     page 718     #726

718

chapter 16 generating functions

let tn be the number of different combinations of n mishaps dan can suffer in one
day. for example, t3 d 7, because there are seven possible combinations of three
mishaps:

spills 0 1 0 1 1 0 0
falls 0 0 1 1 0 1 0
stubs 3 2 2 1 0 0 1
blurts 0 0 0 0 2 2 2

(a) express the generating function

t .x/ wwd t0 c t1x c t2x2 c (cid:1)(cid:1)(cid:1)

as a quotient of polynomials.

(b) put integers in the boxes that make this equation true:

g.x/ d

1 (cid:0) x

c

.1 (cid:0) x/2

(c) write a closed-form expression for tn:

problems for section 16.4

practice problems
problem 16.13.
let b, c, a0, a1, a2,. . . be real numbers such that
an d b.an(cid:0)1/ c c

for n (cid:21) 1.
let g.x/ be the generating function for this sequence.
(a) express the coef   cient of xn for n (cid:21) 1 in the series expansion of bxg.x/ in
terms of b and ai for suitable i.
(b) what is the coef   cient of xn for n (cid:21) 1 in the series expansion of cx=.1 (cid:0) x/?

   mcs        2017/6/5     19:42     page 719     #727

16.6. references

719

(c) use the previous results to exhibit a very simple expression for g.x/(cid:0)bxg.x/(cid:0)
cx=.1 (cid:0) x/.
(d) using the method of partial fractions, we can    nd real numbers d and e such
that

g.x/ d d=l.x/ c e=m.x/:

what are l.x/ and m.x/?

class problems
problem 16.14.
the famous mathematician, fibonacci, has decided to start a rabbit farm to    ll up
his time while he   s not making new sequences to torment future college students.
fibonacci starts his farm on month zero (being a mathematician), and at the start of
month one he receives his    rst pair of rabbits. each pair of rabbits takes a month
to mature, and after that breeds to produce one new pair of rabbits each month.
fibonacci decides that in order never to run out of rabbits or money, every time a
batch of new rabbits is born, he   ll sell a number of newborn pairs equal to the total
number of pairs he had three months earlier. fibonacci is convinced that this way
he   ll never run out of stock.
(a) de   ne the number rn of pairs of rabbits fibonacci has in month n, using a
recurrence relation. that is, de   ne rn in terms of various ri where i < n.

(b) let r.x/ be the generating function for rabbit pairs,
r.x/ wwd r0 c r1x c r2x2 c (cid:1)(cid:1)(cid:1)

express r.x/ as a quotient of polynomials.

(c) find a partial fraction decomposition of the generating function r.x/.

(d) finally, use the partial fraction decomposition to come up with a closed form
expression for the number of pairs of rabbits fibonacci has on his farm on month
n.

problem 16.15.
less well-known than the towers of hanoi   but no less fascinating   are the tow-
ers of sheboygan. as in hanoi, the puzzle in sheboygan involves 3 posts and n
rings of different sizes. the rings are placed on post #1 in order of size with the
smallest ring on top and largest on bottom.

   mcs        2017/6/5     19:42     page 720     #728

720

chapter 16 generating functions

the objective is to transfer all n rings to post #2 via a sequence of moves. as
in the hanoi version, a move consists of removing the top ring from one post and
dropping it onto another post with the restriction that a larger ring can never lie
above a smaller ring. but unlike hanoi, a local ordinance requires that a ring can
only be moved from post #1 to post #2, from post #2 to post #3, or from post
#3 to post #1. thus, for example, moving a ring directly from post #1 to post #3 is
not permitted.
(a) one procedure that solves the sheboygan puzzle is de   ned recursively:
to
move an initial stack of n rings to the next post, move the top stack of n (cid:0) 1 rings
to the furthest post by moving it to the next post two times, then move the big, nth
ring to the next post, and    nally move the top stack another two times to land on
top of the big ring. let sn be the number of moves that this procedure uses. write
a simple linear recurrence for sn.
(b) let s.x/ be the generating function for the sequence hs0; s1; s2; : : :i. care-
fully show that

s.x/ d

x

.1 (cid:0) x/.1 (cid:0) 4x/

:

(c) give a simple formula for sn.
(d) a better (indeed optimal, but we won   t prove this) procedure to solve the tow-
ers of sheboygan puzzle can be de   ned in terms of two mutually recursive proce-
dures, procedure p1.n/ for moving a stack of n rings 1 pole forward, and p2.n/
for moving a stack of n rings 2 poles forward. this is trivial for n d 0. for n > 0,
de   ne:
p1.n/: apply p2.n (cid:0) 1/ to move the top n (cid:0) 1 rings two poles forward to the third
pole. then move the remaining big ring once to land on the second pole. then
apply p2.n (cid:0) 1/ again to move the stack of n (cid:0) 1 rings two poles forward from the
third pole to land on top of the big ring.
p2.n/: apply p2.n (cid:0) 1/ to move the top n (cid:0) 1 rings two poles forward to land on
the third pole. then move the remaining big ring to the second pole. then apply
p1.n (cid:0) 1/ to move the stack of n (cid:0) 1 rings one pole forward to land on the    rst
pole. now move the big ring 1 pole forward again to land on the third pole. finally,
apply p2.n (cid:0) 1/ again to move the stack of n (cid:0) 1 rings two poles forward to land
on the big ring.
let tn be the number of moves needed to solve the sheboygan puzzle using proce-
dure p1.n/. show that

tn d 2tn(cid:0)1 c 2tn(cid:0)2 c 3;

(16.22)

for n > 1.

   mcs        2017/6/5     19:42     page 721     #729

16.6. references

721

hint: let un be the number of moves used by procedure p2.n/. express each of tn
and un as linear combinations of tn(cid:0)1 and un(cid:0)1 and solve for tn.
(e) derive values a; b; c;   ;    such that

conclude that tn d o.sn/.

tn d a  n c b  n c c:

homework problems
problem 16.16.
taking derivatives of generating functions is another useful operation. this is done
termwise, that is, if

then

for example,

so

f .x/ d f0 c f1x c f2x2 c f3x3 c (cid:1)(cid:1)(cid:1) ;
.x/ wwd f1 c 2f2x c 3f3x2 c (cid:1)(cid:1)(cid:1) :

f

0

d 

 0

1

.1 (cid:0) x/2
h.x/ wwd

1

.1 (cid:0) x/

d 1 c 2x c 3x2 c (cid:1)(cid:1)(cid:1)

x

.1 (cid:0) x/2

d 0 c 1x c 2x2 c 3x3 c (cid:1)(cid:1)(cid:1)

is the generating function for the sequence of nonnegative integers. therefore

1 c x
.1 (cid:0) x/3

d h

0

.x/ d 1 c 22x c 32x2 c 42x3 c (cid:1)(cid:1)(cid:1) ;

so

x2 c x
.1 (cid:0) x/3

d xh

0

.x/ d 0 c 1x c 22x2 c 32x3 c (cid:1)(cid:1)(cid:1) c n2xn c (cid:1)(cid:1)(cid:1)

is the generating function for the nonnegative integer squares.
(a) prove that for all k 2 n, the generating function for the nonnegative integer
kth powers is a quotient of polynomials in x. that is, for all k 2 n there are
polynomials rk.x/ and sk.x/ such that

  rk.x/

sk.x/

  d nk:

  xn  

(16.23)

hint: observe that the derivative of a quotient of polynomials is also a quotient of
polynomials. it is not necessary work out explicit formulas for rk and sk to prove
this part.

   mcs        2017/6/5     19:42     page 722     #730

722

chapter 16 generating functions

(b) conclude that if f .n/ is a function on the nonnegative integers de   ned recur-
sively in the form

f .n/ d af .n (cid:0) 1/ c bf .n (cid:0) 2/ c cf .n (cid:0) 3/ c p.n/  n

where the a; b; c;    2 c and p is a polynomial with complex coef   cients, then
the generating function for the sequence f .0/; f .1/; f .2/; : : : will be a quotient of
polynomials in x, and hence there is a closed form expression for f .n/.
hint: consider

rk.  x/
sk.  x/

problem 16.17.
generating functions provide an interesting way to count the number of strings of
matched brackets. to do this, we   ll use a description of these strings as the set
goodcount of strings of brackets with a good count.6

namely, one precise way to determine if a string is matched is to start with 0
and read the string from left to right, adding 1 to the count for each left bracket
and subtracting 1 from the count for each right bracket. for example, here are the
counts for the two strings above
]

]
0 1 0 (cid:0)1 0 1 2 3 4 3 2 1 0

[

]

[

[

[

[

[

]

]

]

[

[
0 1 2

]

]

]
[
3 2 1 2 1 0 1 0

[

]

]

[

a string has a good count if its running count never goes negative and ends with 0.
so the second string above has a good count, but the    rst one does not because its
count went negative at the third step.
de   nition. let

goodcount wwd fs 2 f] ; [ g(cid:3) j s has a good countg:

the matched strings can now be characterized precisely as this set of strings with

good counts.

let cn be the number of strings in goodcount with exactly n left brackets, and

let c.x/ be the generating function for these numbers:

c.x/ wwd c0 c c1x c c2x2 c (cid:1)(cid:1)(cid:1) :

6problem 7.20 also examines these strings.

   mcs        2017/6/5     19:42     page 723     #731

16.6. references

723

(a) the wrap of a string s is the string, [ s] , that starts with a left bracket fol-
lowed by the characters of s, and then ends with a right bracket. explain why the
generating function for the wraps of strings with a good count is xc.x/.
hint: the wrap of a string with good count also has a good count that starts and
ends with 0 and remains positive everywhere else.

(b) explain why, for every string s with a good count, there is a unique sequence
of strings s1; : : : ; sk that are wraps of strings with good counts and s d s1 (cid:1)(cid:1)(cid:1) sk.
for example, the string r wwd [ [ ] ] [ ] [ [ ] [ ] ] 2 goodcount equals s1s2s3 where
s1 wwd [ [ ] ] ; s2 wwd [ ] ; s3 wwd [ [ ] [ ] ] , and this is the only way to express r as a
sequence of wraps of strings with good counts.

(c) conclude that

c d 1 c xc c .xc /2 c (cid:1)(cid:1)(cid:1) c .xc /n c (cid:1)(cid:1)(cid:1) ;

so

and hence

;

1

c d
1 (cid:0) xc
c d 1    p

1 (cid:0) 4x

:

2x

let d.x/ wwd 2xc.x/. expressing d as a power series
d.x/ d d0 c d1x c d2x2 c (cid:1)(cid:1)(cid:1) ;

we have

(d) use (iii), (iv), and the value of c0 to conclude that
1 (cid:0) 4x:

:

cn d dnc1
d.x/ d 1 (cid:0) p

2

(e) prove that

dn d .2n (cid:0) 3/ (cid:1) .2n (cid:0) 5/(cid:1)(cid:1)(cid:1) 5 (cid:1) 3 (cid:1) 1 (cid:1) 2n

:

hint: dn d d.n/.0/=n  
(f) conclude that

n  

 

!

cn d 1
n c 1

2n

n

:

(i)

(ii)

(iii)

(iv)

   mcs        2017/6/5     19:42     page 724     #732

724

chapter 16 generating functions

exam problems
problem 16.18.
de   ne the sequence r0; r1; r2; : : : recursively by the rule that r0 wwd 1 and

rn wwd 7rn(cid:0)1 c .n c 1/

for n > 0:

let r.x/ wwdp1

0 rnxn be the generating function of this sequence. express r.x/
as a quotient of polynomials or products of polynomials. you do not have to    nd a
closed form for rn.

problem 16.19.
alyssa hacker sends out a video that spreads like wild   re over the utoob network.
on the day of the release   call it day zero   and the day following   call it day
one   the video doesn   t receive any hits. however, starting with day two, the num-
ber of hits rn can be expressed as seven times the number of hits on the previous
day, four times the number of hits the day before that, and the number of days that
has passed since the release of the video plus one. so, for example on day 2, there
will be 7 (cid:2) 0 c 4 (cid:2) 0 c 3 d 3 hits.
(a) give a linear a recurrence for rn.

(b) express the generating function r.x/ wwdp1

0 rnxn as a quotient of polyno-

mials or products of polynomials. you do not have to    nd a closed form for rn.

problem 16.20.
consider the following sequence of predicates:

q1.x1/
q2.x1; x2/
q3.x1; x2; x3/
q4.x1; x2; x3; x4/
q5.x1; x2; x3; x4; x5/

:::

wwd x1
wwd x1 implies x2
wwd .x1 implies x2/ implies x3
wwd ..x1 implies x2/ implies x3/ implies x4
wwd ...x1 implies x2/ implies x3/ implies x4/ implies x5

:::

let tn be the number of different true/false settings of the variables x1; x2; : : : ; xn
for which qn.x1; x2; : : : ; xn/ is true. for example, t2 d 3 since q2.x1; x2/ is

   mcs        2017/6/5     19:42     page 725     #733

16.6. references

725

true for 3 different settings of the variables x1 and x2:

we let t0 d 1 by convention.
(a) express tnc1 in terms of tn and n, assuming n (cid:21) 0.
(b) use a generating function to prove that

x1 x2 q2.x1; x2/
t
t
f
t
f
t
f f

t
f
t
t

tn d 2nc1 c .(cid:0)1/n

3

for n (cid:21) 1.

problem 16.21.
de   ne the triple fibonacci numbers t0; t1; : : : recursively by the rules

t0 d t1 wwd 3;
tn wwd tn(cid:0)1 c tn(cid:0)2

(for n (cid:21) 2):

(16.24)

(a) prove that all triple fibonacci numbers are divisible by 3.

(b) prove that the gcd of every pair of consecutive triple fibonacci numbers is 3.

(c) express the generating function t .x/ for the triple fibonacci as a quotient of
polynomials. (you do not have to    nd a formula for   xn  t .x/.)

problem 16.22.
de   ne the double fibonacci numbers d0; d1; : : : recursively by the rules

d0 d d1 wwd 1;
dn wwd 2dn(cid:0)1 c dn(cid:0)2

(for n (cid:21) 2):

(16.25)

(a) prove that all double fibonacci numbers are odd.

(b) prove that every two consecutive double fibonacci numbers are relatively
prime.

(c) express the generating function d.x/ for the double fibonacci as a quotient
of polynomials. (you do not have to    nd a formula for   xn  d.x/.)

   mcs        2017/6/5     19:42     page 726     #734

726

chapter 16 generating functions

problems for section 16.5

practice problems
problem 16.23.
in the context of formal series, a number r may be used to indicate the sequence

.r; 0; 0; : : : ; 0; : : : /:

for example the number 1 may be used to indicate the identity series i and 0
may indicate the zero series z. whether    r    means the number or the sequence is
supposed to be clear from context.

verify that in the ring of formal power series,

in particular,

r    .g0; g1; g2; : : : / d .rg0; rg1; rg2; : : : /:
(cid:0).g0; g1; g2; : : : / d (cid:0)1    .g0; g1; g2; : : : /:

problem 16.24.
de   ne the formal power series

x wwd .0; 1; 0; 0; : : : ; 0; : : : /:

(a) explain why x has no reciprocal.
hint: what can you say about x (cid:1) .g0 c g1x c g2x2 c (cid:1)(cid:1)(cid:1) /?
(b) use the de   nition of power series multiplication    to prove carefully that

x    .g0; g1; g2; : : : / d .0; g0; g1; g2; : : : /:

(c) recursively de   ne x n for n 2 n by

x 0 wwd i wwd .1; 0; 0; : : : ; 0; : : : /;

x nc1 wwd x    x n:

verify that the monomial xn refers to the same power series as x n.

class problems
problem 16.25.
show that a sequence g wwd .g0; g1; : : : / has a multiplicative inverse in the ring of
formal power series iff g0    0.

   mcs        2017/6/5     19:42     page 727     #735

iv id203

   mcs        2017/6/5     19:42     page 728     #736

   mcs        2017/6/5     19:42     page 729     #737

introduction

id203 is one of the most important disciplines in all of the sciences. it is also
one of the least well understood.

id203 is especially important in computer science   it arises in virtually
every branch of the    eld. in algorithm design and game theory, for example, al-
gorithms and strategies that make random choices at certain steps frequently out-
perform deterministic algorithms and strategies. in id205 and signal
processing, an understanding of randomness is critical for    ltering out noise and
compressing data. in cryptography and digital rights management, id203 is
crucial for achieving security. the list of examples is long.

given the impact that id203 has on computer science, it seems strange that
id203 should be so misunderstood by so many. the trouble is that    common-
sense    intuition is demonstrably unreliable when it comes to problems involving
random events. as a consequence, many students develop a fear of id203.
we   ve witnessed many graduate oral exams where a student will solve the most
horrendous calculation, only to then be tripped up by the simplest id203 ques-
tion. even some faculty will start squirming if you ask them a question that starts
   what is the id203 that. . . ?   

our goal in the remaining chapters is to equip you with the tools that will enable

you to solve basic problems involving id203 easily and con   dently.

chapter 17 introduces the basic de   nitions and an elementary 4-step process
that can be used to determine the id203 that a speci   ed event occurs. we il-
lustrate the method on two famous problems where your intuition will probably fail
you. the key concepts of id155 and independence are introduced,
along with examples of their use, and regrettable misuse, in practice: the probabil-
ity you have a disease given that a diagnostic test says you do, and the id203
that a suspect is guilty given that his blood type matches the blood found at the

   mcs        2017/6/5     19:42     page 730     #738

730

part iv id203

scene of the crime.

random variables provide a more quantitative way to measure random events,
and we study them in chapter 19. for example, instead of determining the proba-
bility that it will rain, we may want to determine how much or how long it is likely
to rain. the fundamental concept of the expected value of a random variable is
introduced and some of its key properties are developed.

chapter 20 examines the id203 that a random variable deviates signi   cantly
from its expected value. id203 of deviation provides the theoretical basis for
estimation by sampling which is fundamental in science, engineering, and human
affairs.
it is also especially important in engineering practice, where things are
generally    ne if they are going as expected, and you would like to be assured that
the id203 of an unexpected event is very low.

a    nal chapter applies the previous probabilistic tools to solve problems involv-
ing more complex random processes. you will see why you will probably never
get very far ahead at the casino and how two stanford graduate students became
billionaires by combining id207 and id203 theory to design a better
search engine for the web.

   mcs        2017/6/5     19:42     page 731     #739

17

events and id203 spaces

17.1 let   s make a deal

in the september 9, 1990 issue of parade magazine, columnist marilyn vos savant
responded to this letter:

suppose you   re on a game show, and you   re given the choice of three
doors. behind one door is a car, behind the others, goats. you pick a
door, say number 1, and the host, who knows what   s behind the doors,
opens another door, say number 3, which has a goat. he says to you,
   do you want to pick door number 2?    is it to your advantage to
switch your choice of doors?

craig. f. whitaker
columbia, md

the letter describes a situation like one faced by contestants in the 1970   s game
show let   s make a deal, hosted by monty hall and carol merrill. marilyn replied
that the contestant should indeed switch. she explained that if the car was behind
either of the two unpicked doors   which is twice as likely as the the car being
behind the picked door   the contestant wins by switching. but she soon received
a torrent of letters, many from mathematicians, telling her that she was wrong. the
problem became known as the monty hall problem and it generated thousands of
hours of heated debate.

this incident highlights a fact about id203: the subject uncovers lots of
examples where ordinary intuition leads to completely wrong conclusions. so until
you   ve studied probabilities enough to have re   ned your intuition, a way to avoid
errors is to fall back on a rigorous, systematic approach such as the four step
method that we will describe shortly. first, let   s make sure we really understand
the setup for this problem. this is always a good thing to do when you are dealing
with id203.

17.1.1 clarifying the problem
craig   s original letter to marilyn vos savant is a bit vague, so we must make some
assumptions in order to have any hope of modeling the game formally. for exam-
ple, we will assume that:

   mcs        2017/6/5     19:42     page 732     #740

732

chapter 17 events and id203 spaces

1. the car is equally likely to be hidden behind each of the three doors.

2. the player is equally likely to pick each of the three doors, regardless of the

car   s location.

3. after the player picks a door, the host must open a different door with a goat
behind it and offer the player the choice of staying with the original door or
switching.

4. if the host has a choice of which door to open, then he is equally likely to

select each of them.

in making these assumptions, we   re reading a lot into craig whitaker   s letter. there
are other plausible interpretations that lead to different answers. but let   s accept
these assumptions for now and address the question,    what is the id203 that
a player who switches wins the car?   

17.2 the four step method

every id203 problem involves some sort of randomized experiment, process,
or game. and each such problem involves two distinct challenges:

1. how do we model the situation mathematically?

2. how do we solve the resulting mathematical problem?

in this section, we introduce a four step approach to questions of the form,    what
is the id203 that. . . ?    in this approach, we build a probabilistic model step
by step, formalizing the original question in terms of that model. remarkably, this
structured approach provides simple solutions to many famously confusing prob-
lems. for example, as you   ll see, the four step method cuts through the confusion
surrounding the monty hall problem like a ginsu knife.

17.2.1 step 1: find the sample space
our    rst objective is to identify all the possible outcomes of the experiment. a
typical experiment involves several randomly-determined quantities. for example,
the monty hall game involves three such quantities:

1. the door concealing the car.

2. the door initially chosen by the player.

   mcs        2017/6/5     19:42     page 733     #741

17.2. the four step method

733

figure 17.1 the    rst level in a tree diagram for the monty hall problem. the
branches correspond to the door behind which the car is located.

3. the door that the host opens to reveal a goat.

every possible combination of these randomly-determined quantities is called an
outcome. the set of all possible outcomes is called the sample space for the exper-
iment.

a tree diagram is a graphical tool that can help us work through the four step
approach when the number of outcomes is not too large or the problem is nicely
structured. in particular, we can use a tree diagram to help understand the sample
space of an experiment. the    rst randomly-determined quantity in our experiment
is the door concealing the prize. we represent this as a tree with three branches, as
shown in figure 17.1. in this diagram, the doors are called a, b and c instead of
1, 2, and 3, because we   ll be adding a lot of other numbers to the picture later.

for each possible location of the prize, the player could initially choose any of
the three doors. we represent this in a second layer added to the tree. then a third
layer represents the possibilities of the    nal step when the host opens a door to
reveal a goat, as shown in figure 17.2.

notice that the third layer re   ects the fact that the host has either one choice
or two, depending on the position of the car and the door initially selected by the
player. for example, if the prize is behind door a and the player picks door b, then

car locationabc   mcs        2017/6/5     19:42     page 734     #742

734

chapter 17 events and id203 spaces

figure 17.2 the full tree diagram for the monty hall problem. the second level
indicates the door initially chosen by the player. the third level indicates the door
revealed by monty hall.

car locationabcabcabcabcplayer   sinitialguessbaabacacbccbdoorrevealed   mcs        2017/6/5     19:42     page 735     #743

17.2. the four step method

735

the host must open door c. however, if the prize is behind door a and the player
picks door a, then the host could open either door b or door c.

now let   s relate this picture to the terms we introduced earlier: the leaves of the
tree represent outcomes of the experiment, and the set of all leaves represents the
sample space. thus, for this experiment, the sample space consists of 12 outcomes.
for reference, we   ve labeled each outcome in figure 17.3 with a triple of doors
indicating:

in these terms, the sample space is the set

.door concealing prize; door initially chosen; door opened to reveal a goat/:

s d(cid:26) .a; a; b/; .a; a; c /; .a; b; c /; .a; c; b/; .b; a; c /; .b; b; a/;

.b; b; c /; .b; c; a/; .c; a; b/; .c; b; a/; .c; c; a/; .c; c; b/

(cid:27)

the tree diagram has a broader interpretation as well: we can regard the whole
experiment as following a path from the root to a leaf, where the branch taken at
each stage is    randomly    determined. keep this interpretation in mind; we   ll use it
again later.

17.2.2 step 2: de   ne events of interest
our objective is to answer questions of the form    what is the id203 that . . . ?   ,
where, for example, the missing phrase might be    the player wins by switching,   
   the player initially picked the door concealing the prize,    or    the prize is behind
door c.   

a set of outcomes is called an event. each of the preceding phrases characterizes

an event. for example, the event   prize is behind door c    refers to the set:

f.c; a; b/; .c; b; a/; .c; c; a/; .c; c; b/g;

and the event   prize is behind the door    rst picked by the player   is:

f.a; a; b/; .a; a; c /; .b; b; a/; .b; b; c /; .c; c; a/; .c; c; b/g:

here we   re using square brackets around a property of outcomes as a notation for
the event whose outcomes are the ones that satisfy the property.

what we   re really after is the event   player wins by switching  :
f.a; b; c /; .a; c; b/; .b; a; c /; .b; c; a/; .c; a; b/; .c; b; a/g:

(17.1)

the outcomes in this event are marked with checks in figure 17.4.

notice that exactly half of the outcomes are checked, meaning that the player
wins by switching in half of all outcomes. you might be tempted to conclude that
a player who switches wins with id203 1=2. this is wrong. the reason is that
these outcomes are not all equally likely, as we   ll see shortly.

   mcs        2017/6/5     19:42     page 736     #744

736

chapter 17 events and id203 spaces

figure 17.3 the tree diagram for the monty hall problem with the outcomes la-
beled for each path from root to leaf. for example, outcome .a; a; b/ corresponds
to the car being behind door a, the player initially choosing door a, and monty
hall revealing the goat behind door b.

car locationabcabcabcabcplayer   sintialguessbaabacacbccbdoorrevealedoutcome.a;a;b/.a;a;c/.a;b;c/.a;c;b/.b;a;c/.b;b;a/.b;b;c/.b;c;a/.c;a;b/.c;b;a/.c;c;a/.c;c;b/   mcs        2017/6/5     19:42     page 737     #745

17.2. the four step method

737

figure 17.4 the tree diagram for the monty hall problem, where the outcomes
where the player wins by switching are denoted with a check mark.

car locationabcabcabcabcplayer   sintialguessbaabacacbccbdoorrevealedoutcome.a;a;b/.a;a;c/.a;b;c/.a;c;b/.b;a;c/.b;b;a/.b;b;c/.b;c;a/.c;a;b/.c;b;a/.c;c;a/.c;c;b/switchwins                     mcs        2017/6/5     19:42     page 738     #746

738

chapter 17 events and id203 spaces

17.2.3 step 3: determine outcome probabilities
so far we   ve enumerated all the possible outcomes of the experiment. now we
must start assessing the likelihood of those outcomes. in particular, the goal of this
step is to assign each outcome a id203, indicating the fraction of the time this
outcome is expected to occur. the sum of all the outcome probabilities must equal
one, re   ecting the fact that there always must be an outcome.

ultimately, outcome probabilities are determined by the phenomenon we   re mod-
eling and thus are not quantities that we can derive mathematically. however, math-
ematics can help us compute the id203 of every outcome based on fewer and
more elementary modeling decisions. in particular, we   ll break the task of deter-
mining outcome probabilities into two stages.

step 3a: assign edge probabilities
first, we record a id203 on each edge of the tree diagram. these edge-
probabilities are determined by the assumptions we made at the outset: that the
prize is equally likely to be behind each door, that the player is equally likely to
pick each door, and that the host is equally likely to reveal each goat, if he has a
choice. notice that when the host has no choice regarding which door to open, the
single branch is assigned id203 1. for example, see figure 17.5.

step 3b: compute outcome probabilities
our next job is to convert edge probabilities into outcome probabilities. this is a
purely mechanical process:

calculate the id203 of an outcome by multiplying the edge-probabilities
on the path from the root to that outcome.

for example, the id203 of the topmost outcome in figure 17.5, .a; a; b/, is

(cid:1) 1
3

(cid:1) 1
2

d 1
18

:

1

3

(17.2)

we   ll examine the of   cial justi   cation for this rule in section 18.4, but here   s an
easy, intuitive justi   cation: as the steps in an experiment progress randomly along
a path from the root of the tree to a leaf, the probabilities on the edges indicate
how likely the path is to proceed along each branch. for example, a path starting
at the root in our example is equally likely to go down each of the three top-level
branches.

how likely is such a path to arrive at the topmost outcome .a; a; b/? well,
there is a 1-in-3 chance that a path would follow the a-branch at the top level, a
1-in-3 chance it would continue along the a-branch at the second level, and 1-in-2

   mcs        2017/6/5     19:42     page 739     #747

17.2. the four step method

739

chance it would follow the b-branch at the third level. thus, there is half of a one
third of a one third chance, of arriving at the .a; a; b/ leaf. that is, the chance is
1=3(cid:1) 1=3(cid:1) 1=2 d 1=18   the same product (in reverse order) we arrived at in (17.2).
we have illustrated all of the outcome probabilities in figure 17.5.
specifying the id203 of each outcome amounts to de   ning a function that
maps each outcome to a id203. this function is usually called pr  (cid:1)  . in these
terms, we   ve just determined that:

;

;

18

pr  .a; a; b/   d 1
pr  .a; a; c /   d 1
pr  .a; b; c /   d 1
etc.

9

;

18

17.2.4 step 4: compute event probabilities
we now have a id203 for each outcome, but we want to determine the proba-
bility of an event. the id203 of an event e is denoted by pr  e  , and it is the
sum of the probabilities of the outcomes in e. for example, the id203 of the
[switching wins] event (17.1) is

pr  switching wins  
d pr  .a; b; c /   c pr  .a; c; b/   c pr  .b; a; c /  c
pr  .b; c; a/   c pr  .c; a; b/   c pr  .c; b; a/  
c 1
9

c 1
9

c 1
9

c 1
9

c 1
9

d 1
9
d 2
3

:

it seems marilyn   s answer is correct! a player who switches doors wins the car
with id203 2=3. in contrast, a player who stays with his or her original door
wins with id203 1=3, since staying wins if and only if switching loses.

we   re done with the problem! we didn   t need any appeals to intuition or inge-
nious analogies. in fact, no mathematics more dif   cult than adding and multiplying
fractions was required. the only hard part was resisting the temptation to leap to
an    intuitively obvious    answer.

   mcs        2017/6/5     19:42     page 740     #748

740

chapter 17 events and id203 spaces

figure 17.5 the tree diagram for the monty hall problem where edge weights
denote the id203 of that branch being taken given that we are at the parent of
that branch. for example, if the car is behind door a, then there is a 1/3 chance that
the player   s initial selection is door b. the rightmost column shows the outcome
probabilities for the monty hall problem. each outcome id203 is simply the
product of the probabilities on the path from the root to the outcome leaf.

car locationabc1=31=31=3abcabcabc1=31=31=31=31=31=31=31=31=3player   sintialguessbaabacacbccb1=21=21111=21=21111=21=2doorrevealedoutcome.a;a;b/.a;a;c/.a;b;c/.a;c;b/.b;a;c/.b;b;a/.b;b;c/.b;c;a/.c;a;b/.c;b;a/.c;c;a/.c;c;b/switchwins                  id2031=181=181=91=91=91=181=181=91=91=91=181=18   mcs        2017/6/5     19:42     page 741     #749

17.3. strange dice

741

17.2.5 an alternative interpretation of the monty hall problem
was marilyn really right? our analysis indicates that she was. but a more accurate
conclusion is that her answer is correct provided we accept her interpretation of the
question. there is an equally plausible interpretation in which marilyn   s answer
is wrong. notice that craig whitaker   s original letter does not say that the host is
required to reveal a goat and offer the player the option to switch, merely that he
did these things. in fact, on the let   s make a deal show, monty hall sometimes
simply opened the door that the contestant picked initially. therefore, if he wanted
to, monty could give the option of switching only to contestants who picked the
correct door initially. in this case, switching never works!

17.3 strange dice

the four-step method is surprisingly powerful. let   s get some more practice with
it. imagine, if you will, the following scenario.

it   s a typical saturday night. you   re at your favorite pub, contemplating the true
meaning of in   nite cardinalities, when a burly-looking biker plops down on the
stool next to you. just as you are about to get your mind around pow.pow.r//,
biker dude slaps three strange-looking dice on the bar and challenges you to a $100
wager. his rules are simple. each player selects one die and rolls it once. the
player with the lower value pays the other player $100.

naturally, you are skeptical, especially after you see that these are not ordinary
dice. each die has the usual six sides, but opposite sides have the same number on
them, and the numbers on the dice are different, as shown in figure 17.6.

biker dude notices your hesitation, so he sweetens his offer: he will pay you
$105 if you roll the higher number, but you only need pay him $100 if he rolls
higher, and he will let you pick a die    rst, after which he will pick one of the other
two. the sweetened deal sounds persuasive since it gives you a chance to pick what
you think is the best die, so you decide you will play. but which of the dice should
you choose? die b is appealing because it has a 9, which is a sure winner if it
comes up. then again, die a has two fairly large numbers, and die c has an 8 and
no really small values.

in the end, you choose die b because it has a 9, and then biker dude selects
die a. let   s see what the id203 is that you will win. (of course, you probably
should have done this before picking die b in the    rst place.) not surprisingly, we
will use the four-step method to compute this id203.

   mcs        2017/6/5     19:42     page 742     #750

742

chapter 17 events and id203 spaces

figure 17.6 the strange dice. the number of pips on each concealed face is the
same as the number on the opposite face. for example, when you roll die a, the
probabilities of getting a 2, 6, or 7 are each 1=3.

17.3.1 die a versus die b
step 1: find the sample space.
the tree diagram for this scenario is shown in figure 17.7. in particular, the sample
space for this experiment are the nine pairs of values that might be rolled with die a
and die b:

for this experiment, the sample space is a set of nine outcomes:

s d f .2; 1/; .2; 5/; .2; 9/; .6; 1/; .6; 5/; .6; 9/; .7; 1/; .7; 5/; .7; 9/g:

step 2: de   ne events of interest.
we are interested in the event that the number on die a is greater than the number
on die b. this event is a set of    ve outcomes:

f .2; 1/; .6; 1/; .6; 5/; .7; 1/; .7; 5/g:

these outcomes are marked a in the tree diagram in figure 17.7.

step 3: determine outcome probabilities.
to    nd outcome probabilities, we    rst assign probabilities to edges in the tree di-
agram. each number on each die comes up with id203 1=3, regardless of
the value of the other die. therefore, we assign all edges id203 1=3. the
id203 of an outcome is the product of the probabilities on the correspond-
ing root-to-leaf path, which means that every outcome has id203 1=9. these
probabilities are recorded on the right side of the tree diagram in figure 17.7.

abc   mcs        2017/6/5     19:42     page 743     #751

17.3. strange dice

743

figure 17.7 the tree diagram for one roll of die a versus die b. die a wins with
id203 5=9.

2671=31=31=3die a1=31=31=39151=31=31=39151=31=31=3915die bwinnerabbaabaabid203 of outcome1=91=91=91=91=91=91=91=91=9   mcs        2017/6/5     19:42     page 744     #752

744

chapter 17 events and id203 spaces

step 4: compute event probabilities.
the id203 of an event is the sum of the probabilities of the outcomes in that
event. in this case, all the outcome probabilities are the same, so we say that the
sample space is uniform. computing event probabilities for uniform sample spaces
is particularly easy since you just have to compute the number of outcomes in the
event. in particular, for any event e in a uniform sample space s,

pr  e   d jej
jsj :

(17.3)

in this case, e is the event that die a beats die b, so jej d 5, jsj d 9, and

pr  e   d 5=9:

this is bad news for you. die a beats die b more than half the time and, not

surprisingly, you just lost $100.

biker dude consoles you on your    bad luck    and, given that he   s a sensitive guy
beneath all that leather, he offers to go double or nothing.1 given that your wallet
only has $25 in it, this sounds like a good plan. plus, you    gure that choosing die a
will give you the advantage.

so you choose a, and then biker dude chooses c . can you guess who is more
likely to win? (hint: it is generally not a good idea to gamble with someone you
don   t know in a bar, especially when you are gambling with strange dice.)

17.3.2 die a versus die c
we can construct the tree diagram and outcome probabilities as before. the result
is shown in figure 17.8, and there is bad news again. die c will beat die a with
id203 5=9, and you lose once again.

you now owe the biker dude $200 and he asks for his money. you reply that you

need to go to the bathroom.

17.3.3 die b versus die c
being a sensitive guy, biker dude nods understandingly and offers yet another wa-
ger. this time, he   ll let you have die c . he   ll even let you raise the wager to $200
so you can win your money back.

this is too good a deal to pass up. you know that die c is likely to beat die a
and that die a is likely to beat die b, and so die c is surely the best. whether biker

1double or nothing is slang for doing another wager after you have lost the    rst. if you lose again,
you will owe biker dude double what you owed him before. if you win, you will owe him nothing;
in fact, since he should pay you $210 if he loses, you would come out $10 ahead.

   mcs        2017/6/5     19:42     page 745     #753

17.3. strange dice

745

figure 17.8 the tree diagram for one roll of die c versus die a. die c wins with
id203 5=9.

3481=31=31=3die c1=31=31=37261=31=31=37261=31=31=3726die awinnercaacaacccid203 of outcome1=91=91=91=91=91=91=91=91=9   mcs        2017/6/5     19:42     page 746     #754

746

chapter 17 events and id203 spaces

dude picks a or b, the odds would be in your favor this time. biker dude must
really be a nice guy.

so you pick c , and then biker dude picks b. wait   how come you haven   t
caught on yet and worked out the tree diagram before you took this bet? if you do
it now, you   ll see by the same reasoning as before that b beats c with probabil-
ity 5=9. but surely there is a mistake! how is it possible that

c beats a with id203 5=9,
a beats b with id203 5=9,
b beats c with id203 5=9?

the problem is not with the math, but with your intuition. since a will beat b
more often than not, and b will beat c more often than not, it seems like a ought
to beat c more often than not, that is, the    beats more often    relation ought to
be transitive. but this intuitive idea is simply false: whatever die you pick, biker
dude can pick one of the others and be likely to win. so picking    rst is actually a
disadvantage, and as a result, you now owe biker dude $400.

just when you think matters can   t get worse, biker dude offers you one    nal
wager for $1,000. this time, instead of rolling each die once, you will each roll
your die twice, and your score is the sum of your rolls, and he will even let you
pick your die second, that is, after he picks his. biker dude chooses die b. now
you know that die a will beat die b with id203 5=9 on one roll, so, jumping
at this chance to get ahead, you agree to play, and you pick die a. after all, you
   gure that since a roll of die a beats a roll of die b more often that not, two rolls
of die a are even more likely to beat two rolls of die b, right?

wrong! (did we mention that playing strange gambling games with strangers in

a bar is a bad idea?)

17.3.4 rolling twice
if each player rolls twice, the tree diagram will have four levels and 34 d 81
outcomes. this means that it will take a while to write down the entire tree dia-
gram. but it   s easy to write down the    rst two levels as in figure 17.9(a) and then
notice that the remaining two levels consist of nine identical copies of the tree in
figure 17.9(b).
the id203 of each outcome is .1=3/4 d 1=81 and so, once again, we have a
uniform id203 space. by equation (17.3), this means that the id203 that
a wins is the number of outcomes where a beats b divided by 81.
to compute the number of outcomes where a beats b, we observe that the two
rolls of die a result in nine equally likely outcomes in a sample space sa in which

   mcs        2017/6/5     19:42     page 747     #755

17.3. strange dice

747

figure 17.9 parts of the tree diagram for die b versus die a where each die is
rolled twice. the    rst two levels are shown in (a). the last two levels consist of
nine copies of the tree in (b).

the two-roll sums take the values

.4; 8; 8; 9; 9; 12; 13; 13; 14/:

likewise, two rolls of die b result in nine equally likely outcomes in a sample
space sb in which the two-roll sums take the values

.2; 6; 6; 10; 10; 10; 14; 14; 18/:

we can treat the outcome of rolling both dice twice as a pair .x; y/ 2 sa (cid:2) sb,
where a wins iff the sum of the two a-rolls of outcome x is larger the sum of the
two b-rolls of outcome y. if the a-sum is 4, there is only one y with a smaller
b-sum, namely, when the b-sum is 2. if the a-sum is 8, there are three y   s with
a smaller b-sum, namely, when the b-sum is 2 or 6. continuing the count in this
way, the number of pairs .x; y/ for which the a-sum is larger than the b-sum is

1 c 3 c 3 c 3 c 3 c 6 c 6 c 6 c 6 d 37:

a similar count shows that there are 42 pairs for which b-sum is larger than the
a-sum, and there are two pairs where the sums are equal, namely, when they both
equal 14. this means that a loses to b with id203 42=81 > 1=2 and ties with
id203 2=81. die a wins with id203 only 37=81.

1st aroll2nd arollsum ofa rolls22767762266748981213913141st broll2nd brollsum ofb rolls119599511559261061014101418      mcs        2017/6/5     19:42     page 748     #756

748

chapter 17 events and id203 spaces

how can it be that a is more likely than b to win with one roll, but b is more
likely to win with two rolls? well, why not? the only reason we   d think otherwise
is our unreliable, untrained intuition. (even the authors were surprised when they
   rst learned about this, but at least they didn   t lose $1400 to biker dude.) in fact,
the die strength reverses no matter which two die we picked. so for one roll,

a (cid:31) b (cid:31) c (cid:31) a;

but for two rolls,

a (cid:30) b (cid:30) c (cid:30) a;

where we have used the symbols (cid:31) and (cid:30) to denote which die is more likely to
result in the larger value.

the weird behavior of the three strange dice above generalizes in a remarkable
way: there are arbitrarily large sets of dice which will beat each other in any desired
pattern according to how many times the dice are rolled.2

17.4 the birthday principle

there are 95 students in a class. what is the id203 that some birthday is
shared by two people? comparing 95 students to the 365 possible birthdays, you
might guess the id203 lies somewhere around 1=4   but you   d be wrong: the
id203 that there will be two people in the class with matching birthdays is
actually more than 0:9999.

to work this out, we   ll assume that the id203 that a randomly chosen stu-
dent has a given birthday is 1=d. we   ll also assume that a class is composed of n
randomly and independently selected students. of course d d 365 and n d 95
in this case, but we   re interested in working things out in general. these random-
ness assumptions are not really true, since more babies are born at certain times
of year, and students    class selections are typically not independent of each other,
but simplifying in this way gives us a start on analyzing the problem. more impor-
tantly, these assumptions are justi   able in important computer science applications
of birthday matching. for example, birthday matching is a good model for colli-
sions between items randomly inserted into a hash table. so we won   t worry about
things like spring procreation preferences that make january birthdays more com-
mon, or about twins    preferences to take classes together (or not).

2 tba - reference ron graham paper.

   mcs        2017/6/5     19:42     page 749     #757

17.4. the birthday principle

749

17.4.1 exact formula for match id203
there are d n sequences of n birthdays, and under our assumptions, these are
equally likely. there are d.d (cid:0) 1/.d (cid:0) 2/(cid:1)(cid:1)(cid:1) .d (cid:0) .n (cid:0) 1// length n sequences of
distinct birthdays. that means the id203 that everyone has a different birthday
is:

now we simplify (17.5) using the fact that 1 (cid:0) x < e
follows by truncating the taylor series e
approximation e

(cid:0)x (cid:25) 1 (cid:0) x is pretty accurate when x is small.

d.d (cid:0) 1/.d (cid:0) 2/(cid:1)(cid:1)(cid:1) .d (cid:0) .n (cid:0) 1//
(cid:1)(cid:1)(cid:1) d (cid:0) .n (cid:0) 1/
  
 (cid:1)(cid:1)(cid:1) 
1 (cid:0) 2

(cid:1) d (cid:0) 2
(cid:1) d (cid:0) 1
  
1 (cid:0) 0
1 (cid:0) 1

d 

d d
d

d n

d

d

d

 

(17.4)

d

d

d

d

1 (cid:0) n (cid:0) 1
(17.5)
(cid:0)x for all x > 0. this
(cid:0)x d 1 (cid:0) x c x2=2   (cid:0) x3=3   c (cid:1)(cid:1)(cid:1) . the
 
  
  
1 (cid:0) 0
1 (cid:0) 2
1 (cid:0) 1
(cid:0)1=d (cid:1) e
(cid:0)2=d (cid:1)(cid:1)(cid:1) e
< e0 (cid:1) e
 
(cid:0)(cid:16)pn(cid:0)1
d e
id1 i=d
(cid:0).n.n(cid:0)1/=2d /:
d e

 (cid:1)(cid:1)(cid:1) 

1 (cid:0) n (cid:0) 1

d
(cid:0).n(cid:0)1/=d

(17.6)

 

d

d

d

(17.7)
for n d 95 and d d 365, the value of (17.7) is less than 1=200; 000, which
means the id203 of having some pair of matching birthdays actually is more
than 1 (cid:0) 1=200; 000 > 0:99999. so it would be pretty astonishing if there were no
pair of students in the class with matching birthdays.
for d   n2=2, the id203 of no match turns out to be asymptotically equal
to the upper bound (17.7). for d d n2=2 in particular, the id203 of no match
is asymptotically equal to 1=e. this leads to a rule of thumb which is useful in
many contexts in computer science:

the birthday principle
if there are d days in a year and
two share a birthday is about 1 (cid:0) 1=e (cid:25) 0:632.

p

2d people in a room, then the id203 that

   mcs        2017/6/5     19:42     page 750     #758

750

chapter 17 events and id203 spaces

for example, the birthday principle says that if you have

2 (cid:1) 365 (cid:25) 27 people
in a room, then the id203 that two share a birthday is about 0:632. the actual
id203 is about 0:626, so the approximation is quite good.

p

among other applications, it implies that to use a hash function that maps n
items into a hash table of size d, you can expect many collisions if n2 is more than
a small fraction of d. the birthday principle also famously comes into play as the
basis of    birthday attacks    that crack certain cryptographic systems.

17.5 set theory and id203

let   s abstract what we   ve just done into a general mathematical de   nition of sample
spaces and id203.

17.5.1 id203 spaces
de   nition 17.5.1. a countable sample space s is a nonempty countable set.3 an
element ! 2 s is called an outcome. a subset of s is called an event.
de   nition 17.5.2. a id203 function on a sample space s is a total function
pr w s ! r such that

(cid:15) pr  !   (cid:21) 0 for all ! 2 s, and

(cid:15) p
!2s pr  !   d 1.

a sample space together with a id203 function is called a id203 space.
for any event e   s, the id203 of e is de   ned to be the sum of the probabil-
ities of the outcomes in e:

pr  e   wwdx

!2e

pr  !  :

in the previous examples there were only    nitely many possible outcomes, but
we   ll quickly come to examples that have a countably in   nite number of outcomes.
the study of id203 is closely tied to set theory because any set can be a
sample space and any subset can be an event. general id203 theory deals
with uncountable sets like the set of real numbers, but we won   t need these, and
sticking to countable sets lets us de   ne the id203 of events using sums instead
of integrals. it also lets us avoid some distracting technical problems in set theory
like the banach-tarski    paradox    mentioned in chapter 8.

3yes, sample spaces can be in   nite. if you did not read chapter 8, don   t worry   countable just

means that you can list the elements of the sample space as !0, !1, !2, . . . .

   mcs        2017/6/5     19:42     page 751     #759

17.5. set theory and id203

751

17.5.2 id203 rules from set theory
most of the rules and identities that we have developed for    nite sets extend very
naturally to id203.

an immediate consequence of the de   nition of event id203 is that for dis-

joint events e and f ,

pr  e [ f    d pr  e   c pr  f   :

this generalizes to a countable number of events:
rule 17.5.3 (sum rule). if e0; e1; : : : ; en; : : : are pairwise disjoint events, then

"[

n2n

#

dx

n2n

pr

en

pr  en  :

the sum rule lets us analyze a complicated event by breaking it down into
simpler cases. for example, if the id203 that a randomly chosen mit student
is native to the united states is 60%, to canada is 5%, and to mexico is 5%, then
the id203 that a random mit student is native to one of these three countries
is 70%.
another consequence of the sum rule is that pr  a   c pr  a   d 1, which follows
because pr  s   d 1 and s is the union of the disjoint sets a and a. this equation
often comes up in the form:

pr  a   d 1 (cid:0) pr  a  :

(complement rule)

sometimes the easiest way to compute the id203 of an event is to compute the
id203 of its complement and then apply this formula.

some further basic facts about id203 parallel facts about cardinalities of

   nite sets. in particular:

pr  b (cid:0) a   d pr  b   (cid:0) pr  a \ b  ,
pr  a [ b   d pr  a   c pr  b   (cid:0) pr  a \ b  ,
pr  a [ b     pr  a   c pr  b  ,
if a   b, then pr  a     pr  b  .

(difference rule)
(inclusion-exclusion)
(boole   s inequality)
(monotonicity rule)

the difference rule follows from the sum rule because b is the union of the
disjoint sets b (cid:0) a and a \ b. inclusion-exclusion then follows from the sum
and difference rules, because a [ b is the union of the disjoint sets a and b (cid:0)
a. boole   s inequality is an immediate consequence of inclusion-exclusion since
probabilities are nonnegative. monotonicity follows from the de   nition of event
id203 and the fact that outcome probabilities are nonnegative.

   mcs        2017/6/5     19:42     page 752     #760

752

chapter 17 events and id203 spaces

the two-event inclusion-exclusion equation above generalizes to any    nite set
of events in the same way as the corresponding inclusion-exclusion rule for n
sets. boole   s inequality also generalizes to both    nite and countably in   nite sets of
events:

rule 17.5.4 (union bound).

pr  e1 [ (cid:1)(cid:1)(cid:1) [ en [ (cid:1)(cid:1)(cid:1)      pr  e1   c (cid:1)(cid:1)(cid:1) c pr  en   c (cid:1)(cid:1)(cid:1) :

(17.8)

then e1 [(cid:1)(cid:1)(cid:1)[ en is the event that some critical component fails. ifpn

the union bound is useful in many calculations. for example, suppose that ei is
the event that the i-th critical component among n components in a spacecraft fails.
id1 pr  ei   
is small, then the union bound can provide a reassuringly small upper bound on
this overall id203 of critical failure.

17.5.3 uniform id203 spaces
de   nition 17.5.5. a    nite id203 space s is said to be uniform if pr  !   is the
same for every outcome ! 2 s.
as we saw in the strange dice problem, uniform sample spaces are particularly
easy to work with. that   s because for any event e   s,

pr  e   d jej
jsj :

(17.9)

this means that once we know the cardinality of e and s, we can immediately
obtain pr  e  . that   s great news because we developed lots of tools for computing
the cardinality of a set in part iii.

for example, suppose that you select    ve cards at random from a standard deck
of 52 cards. what is the id203 of having a full house? normally, this question
would take some effort to answer. but from the analysis in section 15.7.2, we know
that

jsj d

52

!

 
!

 

4

3

5

(cid:1) 12 (cid:1)

!

 

4

2

and

jej d 13 (cid:1)

where e is the event that we have a full house. since every    ve-card hand is equally

   mcs        2017/6/5     19:42     page 753     #761

17.5. set theory and id203

753

figure 17.10 the tree diagram for the game where players take turns    ipping a
fair coin. the    rst player to    ip heads wins.

likely, we can apply equation (17.9) to    nd that

3

(cid:1)

(cid:1) (cid:1)(cid:0)4

pr  e   d 13 (cid:1) 12 (cid:1)(cid:0)4
(cid:0)52
(cid:1)
d 13 (cid:1) 12 (cid:1) 4 (cid:1) 6 (cid:1) 5 (cid:1) 4 (cid:1) 3 (cid:1) 2
52 (cid:1) 51 (cid:1) 50 (cid:1) 49 (cid:1) 48
(cid:25) 1
694

2

5

:

d 18
12495

in   nite id203 spaces

17.5.4
in   nite id203 spaces are fairly common. for example, two players take turns
   ipping a fair coin. whoever    ips heads    rst is declared the winner. what is the
id203 that the    rst player wins? a tree diagram for this problem is shown in
figure 17.10.

the event that the    rst player wins contains an in   nite number of outcomes, but

we can still sum their probabilities:

c (cid:1)(cid:1)(cid:1)

pr     rst player wins   d 1
2
d 1
2
d 1
2

c 1
8

1x
 

c 1
32

  1

c 1
128

 n
  d 2

4

nd0
1 (cid:0) 1=4

1

:

3

1=21=21=21=2hhhhtttt1=21=21=21=21=21=41=81=161st player1st player2nd player2nd player   mcs        2017/6/5     19:42     page 754     #762

754

chapter 17 events and id203 spaces

similarly, we can compute the id203 that the second player wins:

pr  second player wins   d 1

4

c 1
16

c 1
64

c 1
256

c (cid:1)(cid:1)(cid:1) d 1
3

:

in this case, the sample space is the in   nite set

s wwd f tnh j n 2 ng;

where tn stands for a length n string of t   s. the id203 function is

pr  tnh   wwd 1

2nc1 :

to verify that this is a id203 space, we just have to check that all the prob-
abilities are nonnegative and that they sum to 1. the given probabilities are all
nonnegative, and applying the formula for the sum of a geometric series, we    nd
that

x

n2n

pr  tnh   dx

n2n

d 1:

1

2nc1

notice that this model does not have an outcome corresponding to the possi-
bility that both players keep    ipping tails forever. (in the diagram,    ipping for-
ever corresponds to following the in   nite path in the tree without ever reaching
a leaf/outcome.) if leaving this possibility out of the model bothers you, you   re
welcome to    x it by adding another outcome !forever to indicate that that   s what
happened. of course since the probabililities of the other outcomes already sum to
1, you have to de   ne the id203 of !forever to be 0. now outcomes with prob-
ability zero will have no impact on our calculations, so there   s no harm in adding
it in if it makes you happier. on the other hand, in countable id203 spaces
it isn   t necessary to have outcomes with id203 zero, and we will generally
ignore them.

17.6 references

[19], [26], [30], [34], [38], [39] [43], [42], [51]

   mcs        2017/6/5     19:42     page 755     #763

17.6. references

755

problems for section 17.2

practice problems
problem 17.1.
let b be the number of heads that come up on 2n independent tosses of a fair coin.
(a) pr  b d n   is asymptotically equal to one of the expressions given below.
explain which one.

1.

2.

3.

4.

2(cid:25) n

1p
2p
1p

q 2

(cid:25) n

(cid:25) n

(cid:25) n

exam problems
problem 17.2. (a) what   s the id203 that 0 doesn   t appear among k digits
chosen independently and uniformly at random?

(b) a box contains 90 good and 10 defective screws. what   s the id203 that
if we pick 10 screws from the box, none will be defective?
(c) first one digit is chosen uniformly at random from f1; 2; 3; 4; 5g and is re-
moved from the set; then a second digit is chosen uniformly at random from the
remaining digits. what is the id203 that an odd digit is picked the second
time?
(d) suppose that you randomly permute the digits 1; 2;(cid:1)(cid:1)(cid:1) ; n, that is, you select
a permutation uniformly at random. what is the id203 the digit k ends up in
the ith position after the permutation?

(e) a fair coin is    ipped n times. what   s the id203 that all the heads occur
at the end of the sequence? (if no heads occur, then    all the heads are at the end of
the sequence    is vacuously true.)

class problems
problem 17.3.
the new york yankees and the boston red sox are playing a two-out-of-three

   mcs        2017/6/5     19:42     page 756     #764

756

chapter 17 events and id203 spaces

series. in other words, they play until one team has won two games. then that
team is declared the overall winner and the series ends. assume that the red sox
win each game with id203 3=5, regardless of the outcomes of previous games.
answer the questions below using the four step method. you can use the same

tree diagram for all three problems.
(a) what is the id203 that a total of 3 games are played?

(b) what is the id203 that the winner of the series loses the    rst game?

(c) what is the id203 that the correct team wins the series?

problem 17.4.
to determine which of two people gets a prize, a coin is    ipped twice. if the    ips
are a head and then a tail, the    rst player wins. if the    ips are a tail and then a
head, the second player wins. however, if both coins land the same way, the    ips
don   t count and the whole process starts over.

assume that on each    ip, a head comes up with id203 p, regardless of
what happened on other    ips. use the four step method to    nd a simple formula
for the id203 that the    rst player wins. what is the id203 that neither
player wins?

hint: the tree diagram and sample space are in   nite, so you   re not going to
   nish drawing the tree. try drawing only enough to see a pattern. summing all
the winning outcome probabilities directly is cumbersome. however, a neat trick
solves this problem   and many others. let s be the sum of all winning outcome
probabilities in the whole tree. notice that you can write the sum of all the winning
probabilities in certain subtrees as a function of s. use this observation to write an
equation in s and then solve.

homework problems
problem 17.5.
let   s see what happens when let   s make a deal is played with four doors. a prize
is hidden behind one of the four doors. then the contestant picks a door. next, the
host opens an unpicked door that has no prize behind it. the contestant is allowed
to stick with their original door or to switch to one of the two unopened, unpicked
doors. the contestant wins if their    nal choice is the door hiding the prize.

let   s make the same assumptions as in the original problem:

1. the prize is equally likely to be behind each door.

   mcs        2017/6/5     19:42     page 757     #765

17.6. references

757

2. the contestant is equally likely to pick each door initially, regardless of the

prize   s location.

3. the host is equally likely to reveal each door that does not conceal the prize

and was not selected by the player.

use the four step method to    nd the following probabilities. the tree diagram
may become awkwardly large, in which case just draw enough of it to make its
structure clear.
(a) contestant stu, a sanitation engineer from trenton, new jersey, stays with his
original door. what is the id203 that stu wins the prize?

(b) contestant zelda, an alien abduction researcher from helena, montana, switches
to one of the remaining two doors with equal id203. what is the id203
that zelda wins the prize?

now let   s revise our assumptions about how contestants choose doors. say the
doors are labeled a, b, c, and d. suppose that carol always opens the earliest door
possible (the door whose label is earliest in the alphabet) with the restriction that
she can neither reveal the prize nor open the door that the player picked.

this gives contestant mergatroid   an engineering student from cambridge, ma   

just a little more information about the location of the prize. suppose that merga-
troid always switches to the earliest door, excluding his initial pick and the one
carol opened.
(c) what is the id203 that mergatroid wins the prize?

problem 17.6.
there were n immortal warriors born into our world, but in the end there can be
only one. the immortals    original plan was to stalk the world for centuries, dueling
one another with ancient swords in dramatic landscapes until only one survivor
remained. however, after a thought-provoking discussion id203, they opt to
give the following protocol a try:

(i) the immortals forge a coin that comes up heads with id203 p.

(ii) each immortal    ips the coin once.

(iii) if exactly one immortal    ips heads, then they are declared the one. other-
wise, the protocol is declared a failure, and they all go back to hacking each
other up with swords.

   mcs        2017/6/5     19:42     page 758     #766

758

chapter 17 events and id203 spaces

one of the immortals (kurgan from the russian steppe) argues that as n grows
large, the id203 that this protocol succeeds must tend to zero. another (mcleod
from the scottish highlands) argues that this need not be the case, provided p is
chosen carefully.
(a) a natural sample space to use to model this problem is fh; t gn of length-n
sequences of h and t   s, where the successive h   s and t   s in an outcome correspond
to the head or tail    ipped on each one of the n successive    ips. explain how a tree
diagram approach leads to assigning a id203 to each outcome that depends
only on p; n and the number h of h   s in the outcome.

(b) what is the id203 that the experiment succeeds as a function of p and n?

(c) how should p, the bias of the coin, be chosen in order to maximize the prob-
ability that the experiment succeeds?

(d) what is the id203 of success if p is chosen in this way? what quantity
does this approach when n, the number of immortal warriors, grows large?

problem 17.7.
we play a game with a deck of 52 regular playing cards, of which 26 are red and
26 are black. i randomly shuf   e the cards and place the deck face down on a table.
you have the option of    taking    or    skipping    the top card. if you skip the top card,
then that card is revealed and we continue playing with the remaining deck. if you
take the top card, then the game ends; you win if the card you took was revealed
to be black, and you lose if it was red. if we get to a point where there is only one
card left in the deck, you must take it. prove that you have no better strategy than
to take the top card   which means your id203 of winning is 1/2.

hint: prove by induction the more general claim that for a randomly shuf   ed
deck of n cards that are red or black   not necessarily with the same number of red
cards and black cards   there is no better strategy than taking the top card.

problems for section 17.5

class problems
problem 17.8.
suppose there is a system with n components, and we know from past experience
that any particular component will fail in a given year with id203 p. that is,

   mcs        2017/6/5     19:42     page 759     #767

17.6. references

759

letting fi be the event that the ith component fails within one year, we have

pr  fi    d p

for 1   i   n. the system will fail if any one of its components fails. what can we
say about the id203 that the system will fail within one year?

let f be the event that the system fails within one year. without any additional
assumptions, we can   t get an exact answer for pr  f   . however, we can give useful
upper and lower bounds, namely,

p   pr  f      np:
(17.10)
we may as well assume p < 1=n, since the upper bound is trivial otherwise. for
(cid:0)5, we conclude that there is at most one chance
example, if n d 100 and p d 10
in 1000 of system failure within a year and at least one chance in 100,000.
let   s model this situation with the sample space s wwd pow.  1::n  / whose out-
comes are subsets of positive integers   n, where s 2 s corresponds to the indices
of exactly those components that fail within one year. for example, f2; 5g is the
outcome that the second and    fth components failed within a year and none of the
other components failed. so the outcome that the system did not fail corresponds
to the empty set ;.
(a) show that the id203 that the system fails could be as small as p by de-
scribing appropriate probabilities for the outcomes. make sure to verify that the
sum of your outcome probabilities is 1.

(b) show that the id203 that the system fails could actually be as large as np
by describing appropriate probabilities for the outcomes. make sure to verify that
the sum of your outcome probabilities is 1.

(c) prove inequality (17.10).

problem 17.9.
here are some handy rules for reasoning about probabilities that all follow directly
from the disjoint sum rule. prove them.

pr  a (cid:0) b   d pr  a   (cid:0) pr  a \ b  

pr  a   d 1 (cid:0) pr  a  

pr  a [ b   d pr  a   c pr  b   (cid:0) pr  a \ b  
pr  a [ b     pr  a   c pr  b  

a   b implies pr  a     pr  b  

(difference rule)
(complement rule)
(inclusion-exclusion)
(2-event union bound)
(monotonicity)

   mcs        2017/6/5     19:42     page 760     #768

760

chapter 17 events and id203 spaces

homework problems
problem 17.10.
prove the following probabilistic inequality, referred to as the union bound.

let a1; a2; : : : ; an; : : : be events. then

"[

n2n

#

 x

n2n

pr

an

pr  an  :

hint: replace the an   s by pairwise disjoint events and use the sum rule.

problem 17.11.
the results of a round robin tournament in which every two people play each other
and one of them wins can be modelled a tournament digraph   a digraph with ex-
actly one edge between each pair of distinct vertices, but we   ll continue to use the
language of players beating each other.
an n-player tournament is k-neutral for some k 2   0; n/, when, for every set of
k players, there is another player who beats them all. for example, being 1-neutral
is the same as not having a    best    player who beats everyone else.

this problem shows that for any    xed k, if n is large enough, there will be a
k-neutral tournament of n players. we will do this by reformulating the question in
terms of probabilities. in particular, for any    xed n, we assign probabilities to each
n-vertex tournament digraph by choosing a direction for the edge between any two
vertices, independently and with equal id203 for each edge.
(a) for any set s of k players, let bs be the event that no contestant beats every-
one in s. express pr  bs    in terms of n and k.
(b) let qk be the event equal to the set of n-vertex tournament digraphs that are
not k-neutral. prove that

!
  n(cid:0)k;

 

n

k

pr  qk    

where    wwd 1 (cid:0) .1=2/k.
hint: let s range over the size-k subsets of players, so

qk d[

bs :

use boole   s inequality.

s

(c) conclude that if n is enough larger than k, then pr  qk   < 1.

   mcs        2017/6/5     19:42     page 761     #769

17.6. references

761

(d) explain why the previous result implies that for every integer k, there is an
n-player k-neutral tournament.

homework problems
problem 17.12.
suppose you repeatedly    ip a fair coin until three consecutive    ips match the pat-
tern hht or the pattern tth occurs. what is the id203 you will see hht
   rst? de   ne a suitable id203 space that models the coin    ipping and use it to
explain your answer.

hint: symmetry between heads and tails.

   mcs        2017/6/5     19:42     page 762     #770

   mcs        2017/6/5     19:42     page 763     #771

18

id155

18.1 monty hall confusion

remember how we said that the monty hall problem confused even professional
mathematicians? based on the work we did with tree diagrams, this may seem
surprising   the conclusion we reached followed routinely and logically. how could
this problem be so confusing to so many people?

well, one    awed argument goes as follows: let   s say the contestant picks door
a. and suppose that carol, monty   s assistant, opens door b and shows us a goat.
let   s use the tree diagram 17.3 from chapter 17 to capture this situation. there are
exactly three outcomes where contestant chooses door a, and there is a goat behind
door b:

.a; a; b/; .a; a; c /; .c; a; b/:

(18.1)

these outcomes have respective probabilities 1/18, 1/18, 1/9.

among those outcomes, switching doors wins only on the last outcome .c; a; b/.
the other two outcomes together have the same 1/9 id203 as the last one so
in this situation, the id203 that we win by switching is the same as the proba-
bility that we lose. in other words, in this situation, switching isn   t any better than
sticking!

something has gone wrong here, since we know that the actual id203 of
winning by switching in 2/3. the mistaken conclusion that sticking or switching
are equally good strategies comes from a common blunder in reasoning about how
probabilities change given some information about what happened. we have asked
for the id203 that one event, [win by switching], happens, given that another
event, [pick a and goat at b], happens. we use the notation

pr(cid:2)[win by switching] j [pick a and goat at b](cid:3)

for this id203 which, by the reasoning above, equals 1/2.

18.1.1 behind the curtain
a    given    condition is essentially an instruction to focus on only some of the possi-
ble outcomes. formally, we   re de   ning a new sample space consisting only of some
of the outcomes. in this particular example, we   re given that the player chooses
door a and that there is a goat behind b. our new sample space therefore consists
solely of the three outcomes listed in (18.1). in the opening of section 18.1, we

   mcs        2017/6/5     19:42     page 764     #772

764

chapter 18 id155

calculated the id155 of winning by switching given that one of
these outcome happened, by weighing the 1/9 id203 of the win-by-switching
outcome .c; a; b/ against the 1=18c1=18c1=9 id203 of the three outcomes
in the new sample space.

pr(cid:2)[win by switching] j [pick a and goat at b](cid:3)
d pr(cid:2).c; a; b/ j f.c; a; b/; .a; a; b/; .a; a; c /g(cid:3)c

pr  .c; a; b/  

pr  f.c; a; b/; .a; a; b/; .a; a; c /g  
1=18 c 1=18 c 1=9

d 1
2

1=9

:

d

there is nothing wrong with this calculation. so how come it leads to an incorrect
conclusion about whether to stick or switch? the answer is that this was the wrong
thing to calculate, as we   ll explain in the next section.

18.2 de   nition and notation

the expression pr(cid:2)x j y(cid:3) denotes the id203 of event x, given that event
door a. we calculated pr(cid:2)x j y(cid:3) using a formula which serves as the de   nition

y happens. in the example above, event x is the event of winning on a switch,
and event y is the event that a goat is behind door b and the contestant chose

of id155:

pr(cid:2)x j y(cid:3) wwd pr  x \ y   

de   nition 18.2.1. let x and y be events where y has nonzero id203. then

the id155 pr(cid:2)x j y(cid:3) is unde   ned when the id203 of

pr  y   

:

event y is zero. to avoid cluttering up statements with uninteresting hypotheses
that conditioning events like y have nonzero id203, we will make an implicit
assumption from now on that all such events have nonzero id203.

pure id203 is often counterintuitive, but id155 can be even
worse. conditioning can subtly alter probabilities and produce unexpected results
in randomized algorithms and computer systems as well as in betting games. but
de   nition 18.2.1 is very simple and causes no trouble   provided it is properly
applied.

   mcs        2017/6/5     19:42     page 765     #773

18.2. de   nition and notation

765

18.2.1 what went wrong
so if everything in the opening section 18.1 is mathematically sound, why does it
seem to contradict the results that we established in chapter 17? the problem is a
common one: we chose the wrong condition. in our initial description of the sce-
nario, we learned the location of the goat when carol opened door b. but when we
de   ned our condition as    the contestant opens a and the goat is behind b,    we in-
cluded the outcome .a; a; c / in which carol opens door c! the correct conditional
id203 should have been    what are the odds of winning by switching given the
contestant chooses door a and carol opens door b.    by choosing a condition that
did not re   ect everything known. we inadvertently included an extraneous outcome
in our calculation. with the correct conditioning, we still win by switching 1/9 of
the time, but the smaller set of known outcomes has smaller total id203:

pr  f.a; a; b/; .c; a; b/g   d 1

c 1
9

d 3
18

:

18

the id155 would then be:

pr(cid:2)[win by switching] j [pick a and carol opens b](cid:3)
d pr(cid:2).c; a; b/ j f.c; a; b/; .a; a; b/g(cid:3) c

pr  .c; a; b/  

pr  f.c; a; b/; .a; a; b/g  

d

1=9

1=9 c 1=18

d 2
3

;

which is exactly what we already deduced from the tree diagram 17.2 in sec-
tion 17.2.

   mcs        2017/6/5     19:42     page 766     #774

766

chapter 18 id155

the o. j. simpson trial
in an opinion article in the new york times, steven strogatz points to the o. j.
simpson trial as an example of poor choice of conditions. o. j. simpson was
a retired football player who was accused, and later acquitted, of the murder of
his wife, nicole brown simpson. the trial was widely publicized and called
the    trial of the century.    racial tensions, allegations of police misconduct, and
new-at-the-time dna evidence captured the public   s attention. but strogatz, cit-
ing mathematician and author i.j. good, focuses on a less well-known aspect of
the case: whether o. j.   s history of abuse towards his wife was admissible into
evidence.

the prosecution argued that abuse is often a precursor to murder, pointing to
statistics indicating that an abuser was as much as ten times more likely to commit
murder than was a random individual. the defense, however, countered with
statistics indicating that the odds of an abusive husband murdering his wife were
   in   nitesimal,    roughly 1 in 2500. based on those numbers, the actual relevance
of a history of abuse to a murder case would appear limited at best. according
to the defense, introducing that history would prejudice the jury against simpson
but would lack any probitive value, so the discussion should be barred.

in other words, both the defense and the prosecution were arguing conditional
id203, speci   cally the likelihood that a woman will be murdered by her
husband, given that her husband abuses her. but both defense and prosecution
omitted a vital piece of data from their calculations: nicole brown simpson was
murdered. strogatz points out that based on the defense   s numbers and the crime
statistics of the time, the id203 that a woman was murdered by her abuser,
given that she was abused and murdered, is around 80%.

strogatz   s article goes into more detail about the calculations behind that 80%
   gure. but the issue we want to illustrate is that id155 is used
and misused all the time, and even experts under public scrutiny make mistakes.

18.3 the four-step method for id155

in a best-of-three tournament, the local c-league hockey team wins the    rst game
with id203 1=2. in subsequent games, their id203 of winning is deter-
mined by the outcome of the previous game. if the local team won the previous
game, then they are invigorated by victory and win the current game with proba-
bility 2=3. if they lost the previous game, then they are demoralized by defeat and
win the current game with id203 only 1=3. what is the id203 that the

   mcs        2017/6/5     19:42     page 767     #775

18.3. the four-step method for id155

767

local team wins the tournament, given that they win the    rst game?

this is a question about a id155. let a be the event that the
local team wins the tournament, and let b be the event that they win the    rst game.

our goal is then to determine the id155 pr(cid:2)a j b(cid:3).

we can tackle id155 questions just like ordinary id203
problems: using a tree diagram and the four step method. a complete tree diagram
is shown in figure 18.1.

figure 18.1 the tree diagram for computing the id203 that the local team
wins two out of three games given that they won the    rst game.

step 1: find the sample space
each internal vertex in the tree diagram has two children, one corresponding to a
win for the local team (labeled w ) and one corresponding to a loss (labeled l).
the complete sample space is:

s d fw w; w lw; w ll; lw w; lw l; llg:

step 2: de   ne events of interest
the event that the local team wins the whole tournament is:

t d fw w; w lw; lw w g:
and the event that the local team wins the    rst game is:
f d fw w; w lw; w llg:

wwwlllwlwl1=21=22=31=32=31=31=32=31=32=3wwwlwwlllwwlwlll                  1=31=181=91=91=181=3game 1game 2game 3outcomeevent a:win theseriesevent b:wingame 1outcomeid203   mcs        2017/6/5     19:42     page 768     #776

768

chapter 18 id155

the outcomes in these events are indicated with check marks in the tree diagram in
figure 18.1.

step 3: determine outcome probabilities
next, we must assign a id203 to each outcome. we begin by labeling edges as
speci   ed in the problem statement. speci   cally, the local team has a 1=2 chance of
winning the    rst game, so the two edges leaving the root are each assigned probabil-
ity 1=2. other edges are labeled 1=3 or 2=3 based on the outcome of the preceding
game. we then    nd the id203 of each outcome by multiplying all probabilities
along the corresponding root-to-leaf path. for example, the id203 of outcome
w ll is:

2
step 4: compute event probabilities
we can now compute the id203 that the local team wins the tournament, given
that they win the    rst game:

1

(cid:1) 1
3

(cid:1) 2
3

d 1
9

:

pr(cid:2)a j b(cid:3) d pr  a \ b  

pr  b  
pr  fw w; w lw g  
pr  fw w; w lw; w llg  
1=3 c 1=18
1=3 c 1=18 c 1=9

d

d

d 7
9

:

we   re done! if the local team wins the    rst game, then they win the whole tourna-
ment with id203 7=9.

18.4 why tree diagrams work

we   ve now settled into a routine of solving id203 problems using tree dia-
grams, but we have not really explained why they work. the explanation is that the
probabilities that we   ve been recording on the edges of tree diagrams are actually
conditional probabilities.

for example, look at the uppermost path in the tree diagram for the hockey team
problem, which corresponds to the outcome w w . the    rst edge is labeled 1=2,
which is the id203 that the local team wins the    rst game. the second edge

   mcs        2017/6/5     19:42     page 769     #777

18.4. why tree diagrams work

769

is labeled 2=3, which is the id203 that the local team wins the second game,
given that they won the    rst   a id155! more generally, on each
edge of a tree diagram, we record the id203 that the experiment proceeds
along that path, given that it reaches the parent vertex.

so we   ve been using conditional probabilities all along. for example, we con-

cluded that:

why is this correct?

pr  w w    d 1

2

(cid:1) 2
3

d 1
3

:

the answer goes back to de   nition 18.2.1 of id155 which could

be written in a form called the product rule for conditional probabilities:

rule (id155 product rule: 2 events).

pr  e1 \ e2   d pr  e1   (cid:1) pr(cid:2)e2 j e1

(cid:3) :

multiplying edge probabilities in a tree diagram amounts to evaluating the right

side of this equation. for example:

pr  win    rst game \ win second game  

d pr  win    rst game   (cid:1) pr(cid:2)win second game j win    rst game(cid:3)

d 1
2

(cid:1) 2
3

:

so the id155 product rule is the formal justi   cation for multiply-
ing edge probabilities to get outcome probabilities.

to justify multiplying edge probabilities along a path of length three, we need a

rule for three events:

rule (id155 product rule: 3 events).

pr  e1 \ e2 \ e3   d pr  e1   (cid:1) pr(cid:2)e2 j e1

(cid:3) (cid:1) pr(cid:2)e3 j e1 \ e2

(cid:3) :

an n-event version of the rule is given in problem 18.1, but its form should be

clear from the three event version.

18.4.1 id203 of size-k subsets
as a simple application of the product rule for conditional probabilities, we can use
the rule to calculate the number of size-k subsets of the integers   1::n  . of course

(cid:1), but now the rule will give us a new derivation

we already know this number is(cid:0)n
of the formula for(cid:0)n

(cid:1).

k

k

   mcs        2017/6/5     19:42     page 770     #778

770

chapter 18 id155

let   s pick some size-k subset s     1::n   as a target. suppose we choose a size-k
subset at random, with all subsets of   1::n   equally likely to be chosen, and let p be
the id203 that our randomly chosen equals this target. that is, the id203
of picking s is p, and since all sets are equally likely to be chosen, the number of
size-k subsets equals 1=p.

so what   s p? well, the id203 that the smallest number in the random set
is one of the k numbers in s is k=n. then, given that the smallest number in the
random set is in s, the id203 that the second smallest number in the random
set is one of the remaining k(cid:0) 1 elements in s is .k(cid:0) 1/=.n(cid:0) 1/. so by the product
rule, the id203 that the two smallest numbers in the random set are both in s
is

(cid:1) k (cid:0) 1
n (cid:0) 1

:

k

n

next, given that the two smallest numbers in the random set are in s, the id203
that the third smallest number is one of the k (cid:0) 2 remaining elements in s is .k (cid:0)
2/=.n (cid:0) 2/. so by the product rule, the id203 that the three smallest numbers
in the random set are all in s is

(cid:1) k (cid:0) 1
n (cid:0) 1

(cid:1) k (cid:0) 2
n (cid:0) 2

:

k

n

continuing in this way, it follows that the id203 that all k elements in the
randomly chosen set are in s, that is, the probabilty that the randomly chosen set
equals the target, is

n

(cid:1) k (cid:0) 2
n (cid:0) 2

(cid:1)(cid:1)(cid:1) k (cid:0) .k (cid:0) 1/
(cid:1) k (cid:0) 1
n (cid:0) 1
n (cid:0) .k (cid:0) 1/
k (cid:1) .k (cid:0) 1/ (cid:1) .k (cid:0) 1/(cid:1)(cid:1)(cid:1) 1

p d k
d
n (cid:1) .n (cid:0) 1/ (cid:1) .n (cid:0) 2/(cid:1)(cid:1)(cid:1) .n (cid:0) .k (cid:0) 1//
d
n  =.n (cid:0) k/  
d k  .n (cid:0) k/  

k  

:

n  

so we have again shown the number of size-k subsets of   1::n  , namely 1=p, is

n  

k  .n (cid:0) k/  

:

18.4.2 medical testing
breast cancer is a deadly disease that claims thousands of lives every year. early
detection and accurate diagnosis are high priorities, and routine mammograms are

   mcs        2017/6/5     19:42     page 771     #779

18.4. why tree diagrams work

771

one of the    rst lines of defense. they   re not very accurate as far as medical tests go,
but they are correct between 90% and 95% of the time, which seems pretty good
for a relatively inexpensive non-invasive test.1 however, mammogram results are
also an example of conditional probabilities having counterintuitive consequences.
if the test was positive for breast cancer in you or a loved one, and the test is better
than 90% accurate, you   d naturally expect that to mean there is better than 90%
chance that the disease was present. but a mathematical analysis belies that naive
intuitive expectation. let   s start by precisely de   ning how accurate a mammogram
is:

(cid:15) if you have the condition, there is a 10% chance that the test will say you do
not have it. this is called a    false negative.   
(cid:15) if you do not have the condition, there is a 5% chance that the test will say
you do. this is a    false positive.   

18.4.3 four steps again
now suppose that we are testing middle-aged women with no family history of
cancer. among this cohort, incidence of breast cancer rounds up to about 1%.

step 2: de   ne events of interest
let a be the event that the person has breast cancer. let b be the event that the
test was positive. the outcomes in each event are marked in the tree diagram. we

want to    nd pr(cid:2)a j b(cid:3), the id203 that a person has breast cancer, given that

the test was positive.

step 3: find outcome probabilities
first, we assign probabilities to edges. these probabilities are drawn directly from
the problem statement. by the product rule, the id203 of an outcome is the
product of the probabilities on the corresponding root-to-leaf path. all probabilities
are shown in figure 18.2.

step 4: compute event probabilities
from de   nition 18.2.1, we have

pr(cid:2)a j b(cid:3) d pr  a \ b  

pr  b  

d

0:009

0:009 c 0:0495

(cid:25) 15:4%:

so, if the test is positive, then there is an 84.6% chance that the result is incorrect,
even though the test is nearly 95% accurate! so this seemingly pretty accurate

1the statistics in this example are roughly based on actual medical data, but have been altered

somewhat to simplify the calculations.

   mcs        2017/6/5     19:42     page 772     #780

772

chapter 18 id155

step 1: find the sample space

the sample space is found with the tree diagram in figure 18.2.

figure 18.2 the tree diagram for a breast cancer test.

   mcs        2017/6/5     19:42     page 773     #781

18.4. why tree diagrams work

773

test doesn   t tell us much. to see why percent accuracy is no guarantee of value,
notice that there is a simple way to make a test that is 99% accurate: always return
a negative result! this test gives the right answer for all healthy people and the
wrong answer only for the 1% that actually have cancer. this 99% accurate test
tells us nothing; the    less accurate    mammogram is still a lot more useful.

18.4.4 natural frequencies
that there is only about a 15% chance that the patient actually has the condition
when the test say so may seem surprising at    rst, but it makes sense with a little
thought. there are two ways the patient could test positive:    rst, the patient could
have the condition and the test could be correct; second, the patient could be healthy
and the test incorrect. but almost everyone is healthy! the number of healthy
individuals is so large that even the mere 5% with false positive results overwhelm
the number of genuinely positive results from the truly ill.

thinking like this in terms of these    natural frequencies    can be a useful tool for
interpreting some of the strange seeming results coming from those formulas. for
example, let   s take a closer look at the mammogram example.

imagine 10,000 women in our demographic. based on the frequency of the
disease, we   d expect 100 of them to have breast cancer. of those, 90 would have
a positive result. the remaining 9,900 woman are healthy, but 5% of them   500,
give or take   will show a false positive on the mammogram. that gives us 90
real positives out of a little fewer than 600 positives. an 85% error rate isn   t so
surprising after all.

18.4.5 a posteriori probabilities
if you think about it much, the medical testing problem we just considered could
start to trouble you. you may wonder if a statement like    if someone tested positive,
then that person has the condition with id203 18%    makes sense, since a given
person being tested either has the disease or they don   t.

one way to understand such a statement is that it just means that 15% of the
people who test positive will actually have the condition. any particular person has
it or they don   t, but a randomly selected person among those who test positive will
have the condition with id203 15%.

but what does this 15% id203 tell you if you personally got a positive
result? should you be relieved that there is less than one chance in    ve that you
have the disease? should you worry that there is nearly one chance in    ve that you
do have the disease? should you start treatment just in case? should you get more
tests?

these are crucial practical questions, but it is important to understand that they

   mcs        2017/6/5     19:42     page 774     #782

774

chapter 18 id155

are not mathematical questions. rather, these are questions about statistical judge-
ments and the philosophical meaning of id203. we   ll say a bit more about this
after looking at one more example of after-the-fact probabilities.

the hockey team in reverse
suppose that we turn the hockey question around: what is the id203 that the
local c-league hockey team won their    rst game, given that they won the series?

as we discussed earlier, some people    nd this question absurd. if the team has
already won the tournament, then the    rst game is long since over. who won the
   rst game is a question of fact, not of id203. however, our mathematical
theory of id203 contains no notion of one event preceding another. there
is no notion of time at all. therefore, from a mathematical perspective, this is a
perfectly valid question. and this is also a meaningful question from a practical
perspective. suppose that you   re told that the local team won the series, but not
told the results of individual games. then, from your perspective, it makes perfect
sense to wonder how likely it is that local team won the    rst game.

a id155 pr(cid:2)b j a(cid:3) is called a posteriori if event b precedes

event a in time. here are some other examples of a posteriori probabilities:

(cid:15) the id203 it was cloudy this morning, given that it rained in the after-
noon.
(cid:15) the id203 that i was initially dealt two queens in texas no limit hold
   em poker, given that i eventually got four-of-a-kind.

from ordinary probabilities; the distinction comes from our view of causality, which
is a philosophical question rather than a mathematical one.

   rst game, given that they won the series is pr(cid:2)b j a(cid:3). we can compute this using

let   s return to the original problem. the id203 that the local team won their

the de   nition of id155 and the tree diagram in figure 18.1:

pr(cid:2)b j a(cid:3) d pr  b \ a  

d 7
9
in general, such pairs of probabilities are related by bayes    rule:

1=3 c 1=18 c 1=9

pr  a  

d

:

1=3 c 1=18

theorem 18.4.1 (bayes    rule).

pr(cid:2)b j a(cid:3) d pr(cid:2)a j b(cid:3) (cid:1) pr  b  

proof. we have

pr(cid:2)b j a(cid:3) (cid:1) pr  a   d pr  a \ b   d pr(cid:2)a j b(cid:3) (cid:1) pr  b  

pr  a  

by de   nition of id155. dividing by pr  a   gives (18.2).

(18.2)

(cid:4)

   mcs        2017/6/5     19:42     page 775     #783

18.4. why tree diagrams work

775

18.4.6 philosphy of id203
let   s try to assign a id203 to the event

  26972607 (cid:0) 1 is a prime number  

it   s not obvious how to check whether such a large number is prime, so you might
try an estimation based on the density of primes. the prime number theorem
implies that only about 1 in 5 million numbers in this range are prime, so you might
(cid:0)8. on the other hand, given that we chose
say that the id203 is about 2 (cid:1) 10
this example to make some philosophical point, you might guess that we probably
purposely chose an obscure looking prime number, and you might be willing to
make an even money bet that the number is prime. in other words, you might think
the id203 is 1/2. finally, we can take the position that assigning a id203
to this statement is nonsense because there is no randomness involved; the number
is either prime or it isn   t. this is the view we take in this text.

an alternate view is the bayesian approach, in which a id203 is interpreted
as a degree of belief in a proposition. a bayesian would agree that the number
above is either prime or composite, but they would be perfectly willing to assign a
id203 to each possibility. the bayesian approach is very broad in its willing-
ness to assign probabilities to any event, but the problem is that there is no single
   right    id203 for an event, since the id203 depends on one   s initial be-
liefs. on the other hand, if you have con   dence in some set of initial beliefs, then
bayesianism provides a convincing framework for updating your beliefs as further
information emerges.

as an aside, it is not clear whether bayes himself was bayesian in this sense.
however, a bayesian would be willing to talk about the id203 that bayes was
bayesian.

another school of thought says that probabilities can only be meaningfully ap-
plied to repeatable processes like rolling dice or    ipping coins. in this frequen-
tist view, the id203 of an event represents the fraction of trials in which the
event occurred. so we can make sense of the a posteriori probabilities of the c-
league hockey example of section 18.4.5 by imagining that many hockey series
were played, and the id203 that the local team won their    rst game, given that
they won the series, is simply the fraction of series where they won the    rst game
among all the series they won.

getting back to prime numbers, we mentioned in section 9.5.1 that there is a
probabilistic primality test. if a number n is composite, there is at least a 3=4
chance that the test will discover this. in the remaining 1=4 of the time, the test is
inconclusive. but as long as the result is inconclusive, the test can be run indepen-
dently again and again up to, say, 100 times. so if n actually is composite, then

   mcs        2017/6/5     19:42     page 776     #784

776

chapter 18 id155

the id203 that 100 repetitions of the probabilistic test do not discover this is at
most:

  1

 100

4

:

if the test remained inconclusive after 100 repetitions, it is still logically possible
that n is composite, but betting that n is prime would be the best bet you   ll ever get
to make! if you   re comfortable using id203 to describe your personal belief
about primality after such an experiment, you are being a bayesian. a frequentist
would not assign a id203 to n    s primality, but they would also be happy to
bet on primality with tremendous con   dence. we   ll examine this issue again when
we discuss polling and con   dence levels in section 18.9.

despite the philosophical divide, the real world conclusions bayesians and fre-
quentists reach from probabilities are pretty much the same, and even where their
interpretations differ, they use the same theory of id203.

18.5 the law of total id203

breaking a id203 calculation into cases simpli   es many problems. the idea
is to calculate the id203 of an event a by splitting into two cases based on
whether or not another event e occurs. that is, calculate the id203 of a \ e
and a\ e. by the sum rule, the sum of these probabilities equals pr  a  . express-
ing the intersection probabilities as conditional probabilities yields:

rule 18.5.1 (law of total id203: single event).

pr  a   d pr(cid:2)a j e(cid:3) (cid:1) pr  e   c pr(cid:2)a

     e(cid:3) (cid:1) pr  e  :

for example, suppose we conduct the following experiment. first, we    ip a fair
coin. if heads comes up, then we roll one die and take the result. if tails comes up,
then we roll two dice and take the sum of the two results. what is the id203
that this process yields a 2? let e be the event that the coin comes up heads,
and let a be the event that we get a 2 overall. assuming that the coin is fair,
pr  e   d pr  e   d 1=2. there are now two cases. if we    ip heads, then we roll

a 2 on a single die with id203 pr(cid:2)a j e(cid:3) d 1=6. on the other hand, if we
     e(cid:3) d 1=36.
   ip tails, then we get a sum of 2 on two dice with id203 pr(cid:2)a

therefore, the id203 that the whole process yields a 2 is

pr  a   d 1

2

(cid:1) 1
6

c 1
2

(cid:1) 1
36

d 7
72

:

   mcs        2017/6/5     19:42     page 777     #785

18.5. the law of total id203

777

this rule extends to any set of disjoint events that make up the entire sample

space. for example,
rule (law of total id203: 3-events). if e1; e2 and e3 are disjoint, and
pr  e1 [ e2 [ e3   d 1, then

(cid:3) (cid:1) pr  e2   c pr(cid:2)a j e3

(cid:3) (cid:1) pr  e3   :

(cid:3) (cid:1) pr  e1   c pr(cid:2)a j e2

pr  a   d pr(cid:2)a j e1

this in turn leads to a three-event version of bayes    rule in which the id203
of event e1 given a is calculated from the    inverse    conditional probabilities of a
given e1, e2, and e3:
rule (bayes    rule: 3-events).

pr(cid:2)a j e1
(cid:3) (cid:1) pr  e1   c pr(cid:2)a j e2

(cid:3) (cid:1) pr  e1  
(cid:3) (cid:1) pr  e2   c pr(cid:2)a j e3

pr(cid:2)e1 j a(cid:3) d

pr(cid:2)a j e1

(cid:3) (cid:1) pr  e3  

the generalization of these rules to n disjoint events is a routine exercise (prob-

lems 18.3 and 18.4).

18.5.1 conditioning on a single event
the id203 rules that we derived in section 17.5.2 extend to probabilities con-
ditioned on the same event. for example, the inclusion-exclusion formula for two
sets holds when all probabilities are conditioned on an event c :

pr(cid:2)a [ b j c(cid:3) d pr(cid:2)a j c(cid:3) c pr(cid:2)b j c(cid:3) (cid:0) pr(cid:2)a \ b j c(cid:3) :

this is easy to verify by plugging in the de   nition 18.2.1 of conditional probabil-
ity.2

it is important not to mix up events before and after the conditioning bar. for

example, the following is not a valid identity:
false claim.

pr(cid:2)a j b [ c(cid:3) d pr(cid:2)a j b(cid:3) c pr(cid:2)a j c(cid:3) (cid:0) pr(cid:2)a j b \ c(cid:3) :

a simple counter-example is to let b and c be events over a uniform space with

most of their outcomes in a, but not overlapping. this ensures that pr(cid:2)a j b(cid:3) and
pr(cid:2)a j c(cid:3) are both close to 1. for example,

(18.3)

b wwd   0::9  ;
c wwd   10::18   [ f0g;
a wwd   1::18  ;

2problem 18.13 explains why this and similar conditional identities follow on general principles

from the corresponding unconditional identities.

   mcs        2017/6/5     19:42     page 778     #786

778

chapter 18 id155

so

also, since 0 is the only outcome in b \ c and 0     a, we have

pr(cid:2)a j b(cid:3) d 9

d pr(cid:2)a j c(cid:3) :

10

pr(cid:2)a j b \ c(cid:3) d 0

so the right-hand side of (18.3) is 1.8, while the left-hand side is a id203
which can be at most 1   actually, it is 18/19.

18.6 simpson   s paradox

in 1973, a famous university was investigated for gender discrimination [7]. the
investigation was prompted by evidence that, at    rst glance, appeared de   nitive: in
1973, 44% of male applicants to the school   s graduate programs were accepted, but
only 35% of female applicants were admitted.

however, this data turned out to be completely misleading. analysis of the in-
dividual departments, showed not only that few showed signi   cant evidence of
bias, but also that among the few departments that did show statistical irregulari-
ties, most were slanted in favor of women. this suggests that if there was any sex
discrimination, then it was against men!

given the discrepancy in these    ndings, it feels like someone must be doing bad
math   intentionally or otherwise. but the numbers are not actually inconsistent.
in fact, this statistical hiccup is common enough to merit its own name: simpson   s
paradox occurs when multiple small groups of data all exhibit a similar trend, but
that trend reverses when those groups are aggregated. to explain how this is pos-
sible, let   s    rst clarify the problem by expressing both arguments in terms of con-
ditional probabilities. for simplicity, suppose that there are only two departments
ee and cs. consider the experiment where we pick a random candidate. de   ne
the following events:

(cid:15) awwd the candidate is admitted to his or her program of choice,
(cid:15) feewwd the candidate is a woman applying to the ee department,
(cid:15) fcswwd the candidate is a woman applying to the cs department,
(cid:15) meewwd the candidate is a man applying to the ee department,
(cid:15) mcswwd the candidate is a man applying to the cs department.

   mcs        2017/6/5     19:42     page 779     #787

18.6. simpson   s paradox

779

cs

ee

overall

40%
2 men admitted out of 5 candidates
50%
50 women admitted out of 100 candidates
70%
70 men admitted out of 100 candidates
80%
4 women admitted out of 5 candidates
72 men admitted, 105 candidates (cid:25) 69%
54 women admitted, 105 candidates (cid:25) 51%

table 18.1 a scenario in which men are overall more likely than women to be
admitted to a school, despite being less likely to be admitted into any given pro-
gram.

assume that all candidates are either men or women, and that no candidate belongs
to both departments. that is, the events fee , fcs, mee and mcs are all disjoint.
in these terms, the plaintiff   s assertion   that a male candidate is more likely to
be admitted to the university than a female   can be expressed by the following
inequality:

(cid:3) :

pr(cid:2)a j mee [ mcs
pr(cid:2)a j mee
pr(cid:2)a j mcs

(cid:3) > pr(cid:2)a j fee [ fcs
(cid:3) < pr(cid:2)a j fee
(cid:3)
(cid:3) :
(cid:3) < pr(cid:2)a j fcs

and

the university   s retort that in any given department, a male applicant is less

likely to be admitted than a female can be expressed by a pair of inequalities:

we can explain how there could be such a discrepancy between university-wide
and department-by-department admission statistics by supposing that the cs de-
partment is more selective than the ee department, but cs attracts a far larger
number of woman applicants than ee.3. table 18.1 shows some admission statis-
tics for which the inequalities asserted by both the plaintiff and the university hold.
initially, we and the plaintiffs both assumed that the overall admissions statistics
for the university could only be explained by gender discrimination. the depart-
ment by department statistics seems to belie the accusation of discrimination. but
do they really?

suppose we replaced    the candidate is a man/woman applying to the ee depart-
ment,    by    the candidate is a man/woman for whom an admissions decision was
made during an odd-numbered day of the month,    and likewise with cs and an
even-numbered day of the month. since we don   t think the parity of a date is a

3at the actual university in the lawsuit, the    exclusive    departments more popular among women
were those that did not require a mathematical foundation, such as english and education. women   s
disproportionate choice of these careers re   ects gender bias, but one which predates the university   s
involvement.

   mcs        2017/6/5     19:42     page 780     #788

780

chapter 18 id155

cause for the outcome of an admission decision, we would most likely dismiss the
   coincidence    that on both odd and even dates, women are more frequently admit-
ted. instead we would judge, based on the overall data showing women less likely
to be admitted, that gender bias against women was an issue in the university.

bear in mind that it would be the same numerical data that we would be using
to justify our different conclusions in the department-by-department case and the
even-day-odd-day case. we interpreted the same numbers differently based on our
implicit causal beliefs, speci   cally that departments matter and date parity does
not. it is circular to claim that the data corroborated our beliefs that there is or is not
discrimination. rather, our interpretation of the data correlation depended on our
beliefs about the causes of admission in the    rst place.4 this example highlights
a basic principle in statistics which people constantly ignore: never assume that
correlation implies causation.

18.7 independence

suppose that we    ip two fair coins simultaneously on opposite sides of a room.
intuitively, the way one coin lands does not affect the way the other coin lands.
the mathematical concept that captures this intuition is called independence.

de   nition 18.7.1. an event with id203 0 is de   ned to be independent of every
event (including itself). if pr  b      0, then event a is independent of event b iff

pr(cid:2)a j b(cid:3) d pr  a  :

(18.4)

in other words, a and b are independent if knowing that b happens does not al-
ter the id203 that a happens, as is the case with    ipping two coins on opposite
sides of a room.

potential pitfall
students sometimes get the idea that disjoint events are independent. the opposite
if a \ b d ;, then knowing that a happens means you know that b
is true:
does not happen. disjoint events are never independent   unless one of them has
id203 zero.

4these issues are thoughtfully examined in causality: models, reasoning and id136, judea

pearl, cambridge u. press, 2001.

   mcs        2017/6/5     19:42     page 781     #789

18.7. independence

781

18.7.1 alternative formulation
sometimes it is useful to express independence in an alternate form which follows
immediately from de   nition 18.7.1:

theorem 18.7.2. a is independent of b if and only if
pr  a \ b   d pr  a   (cid:1) pr  b  :

(18.5)

notice that theorem 18.7.2 makes apparent the symmetry between a being in-

dependent of b and b being independent of a:

corollary 18.7.3. a is independent of b iff b is independent of a.

independence is an assumption

18.7.2
generally, independence is something that you assume in modeling a phenomenon.
for example, consider the experiment of    ipping two fair coins. let a be the event
that the    rst coin comes up heads, and let b be the event that the second coin is
heads. if we assume that a and b are independent, then the id203 that both
coins come up heads is:

pr  a \ b   d pr  a   (cid:1) pr  b   d 1

2

(cid:1) 1
2

d 1
4

:

in this example, the assumption of independence is reasonable. the result of one
coin toss should have negligible impact on the outcome of the other coin toss. and
if we were to repeat the experiment many times, we would be likely to have a \ b
about 1/4 of the time.

on the other hand, there are many examples of events where assuming indepen-
dence isn   t justi   ed. for example, an hourly weather forecast for a clear day might
list a 10% chance of rain every hour from noon to midnight, meaning each hour has
a 90% chance of being dry. but that does not imply that the odds of a rainless day
are a mere 0:912 (cid:25) 0:28. in reality, if it doesn   t rain as of 5pm, the odds are higher
than 90% that it will stay dry at 6pm as well   and if it starts pouring at 5pm, the
chances are much higher than 10% that it will still be rainy an hour later.

deciding when to assume that events are independent is a tricky business. in
practice, there are strong motivations to assume independence since many useful
formulas (such as equation (18.5)) only hold if the events are independent. but you
need to be careful: we   ll describe several famous examples where (false) assump-
tions of independence led to trouble. this problem gets even trickier when there
are more than two events in play.

   mcs        2017/6/5     19:42     page 782     #790

782

chapter 18 id155

18.8 mutual independence

we have de   ned what it means for two events to be independent. what if there are
more than two events? for example, how can we say that the    ips of n coins are
all independent of one another? a set of events is said to be mutually independent
if the id203 of each event in the set is the same no matter which of the other
events has occurred. this is equivalent to saying that for any selection of two or
more of the events, the id203 that all the selected events occur equals the
product of the probabilities of the selected events.

for example, four events e1; e2; e3; e4 are mutually independent if and only if

all of the following equations hold:

pr  e1 \ e2   d pr  e1   (cid:1) pr  e2  
pr  e1 \ e3   d pr  e1   (cid:1) pr  e3  
pr  e1 \ e4   d pr  e1   (cid:1) pr  e4  
pr  e2 \ e3   d pr  e2   (cid:1) pr  e3  
pr  e2 \ e4   d pr  e2   (cid:1) pr  e4  
pr  e3 \ e4   d pr  e3   (cid:1) pr  e4  

pr  e1 \ e2 \ e3   d pr  e1   (cid:1) pr  e2   (cid:1) pr  e3  
pr  e1 \ e2 \ e4   d pr  e1   (cid:1) pr  e2   (cid:1) pr  e4  
pr  e1 \ e3 \ e4   d pr  e1   (cid:1) pr  e3   (cid:1) pr  e4  
pr  e2 \ e3 \ e4   d pr  e2   (cid:1) pr  e3   (cid:1) pr  e4  

pr  e1 \ e2 \ e3 \ e4   d pr  e1   (cid:1) pr  e2   (cid:1) pr  e3   (cid:1) pr  e4  

the generalization to mutual independence of n events should now be clear.

18.8.1 dna testing
assumptions about independence are routinely made in practice. frequently, such
assumptions are quite reasonable. sometimes, however, the reasonableness of an
independence assumption is not so clear, and the consequences of a faulty assump-
tion can be severe.

let   s return to the o. j. simpson murder trial. the following expert testimony

was given on may 15, 1995:
mr. clarke: when you make these estimations of frequency   and i believe you

touched a little bit on a concept called independence?

dr. cotton: yes, i did.

   mcs        2017/6/5     19:42     page 783     #791

18.8. mutual independence

783

mr. clarke: and what is that again?

dr. cotton: it means whether or not you inherit one allele that you have is not   
does not affect the second allele that you might get. that is, if you inherit
a band at 5,000 base pairs, that doesn   t mean you   ll automatically or with
some id203 inherit one at 6,000. what you inherit from one parent is
[independent of] what you inherit from the other.

mr. clarke: why is that important?

dr. cotton: mathematically that   s important because if that were not the case, it
would be improper to multiply the frequencies between the different genetic
locations.

mr. clarke: how do you   well,    rst of all, are these markers independent that

you   ve described in your testing in this case?

presumably, this dialogue was as confusing to you as it was for the jury. es-
sentially, the jury was told that genetic markers in blood found at the crime scene
matched simpson   s. furthermore, they were told that the id203 that the mark-
ers would be found in a randomly-selected person was at most 1 in 170 million.
this astronomical    gure was derived from statistics such as:

(cid:15) 1 person in 100 has marker a.
(cid:15) 1 person in 50 marker b.
(cid:15) 1 person in 40 has marker c .
(cid:15) 1 person in 5 has marker d.
(cid:15) 1 person in 170 has marker e.

then these numbers were multiplied to give the id203 that a randomly-selected
person would have all    ve markers:

pr  a \ b \ c \ d \ e   d pr  a   (cid:1) pr  b   (cid:1) pr  c    (cid:1) pr  d   (cid:1) pr  e  

d 1
100

(cid:1) 1
50

(cid:1) 1
40

(cid:1) 1
5

(cid:1) 1
170

d

1

170;000;000

:

the defense pointed out that this assumes that the markers appear mutually in-
dependently. furthermore, all the statistics were based on just a few hundred blood
samples.

after the trial, the jury was widely mocked for failing to    understand    the dna

evidence. if you were a juror, would you accept the 1 in 170 million calculation?

   mcs        2017/6/5     19:42     page 784     #792

784

chapter 18 id155

18.8.2 pairwise independence
the de   nition of mutual independence seems awfully complicated   there are so
many selections of events to consider! here   s an example that illustrates the sub-
tlety of independence when more than two events are involved. suppose that we
   ip three fair, mutually-independent coins. de   ne the following events:

(cid:15) a1 is the event that coin 1 matches coin 2.
(cid:15) a2 is the event that coin 2 matches coin 3.
(cid:15) a3 is the event that coin 3 matches coin 1.

are a1, a2, a3 mutually independent?

the sample space for this experiment is:

fhhh; hh t; h th; h t t; thh; th t; t th; t t t g:

every outcome has id203 .1=2/3 d 1=8 by our assumption that the coins are
mutually independent.

to see if events a1, a2 and a3 are mutually independent, we must check a
sequence of equalities. it will be helpful    rst to compute the id203 of each
event ai:

pr  a1   d pr  hhh    c pr  hh t    c pr  t th    c pr  t t t   

d 1
8

c 1
8

c 1
8

c 1
8

d 1
2

:

by symmetry, pr  a2   d pr  a3   d 1=2 as well. now we can begin checking all the
equalities required for mutual independence:

pr  a1 \ a2   d pr  hhh    c pr  t t t    d 1

c 1
8

d 1
4

d 1
2

(cid:1) 1
2

8

d pr  a1   pr  a2  :

by symmetry, pr  a1 \ a3   d pr  a1  (cid:1) pr  a3   and pr  a2 \ a3   d pr  a2  (cid:1) pr  a3  
must hold also. finally, we must check one last condition:

pr  a1 \ a2 \ a3   d pr  hhh    c pr  t t t    d 1

c 1
8

d 1
4

8

d pr  a1   pr  a2   pr  a3  :

   1
8

the three events a1, a2 and a3 are not mutually independent even though any
two of them are independent! this not-quite mutual independence seems weird at
   rst, but it happens. it even generalizes:

   mcs        2017/6/5     19:42     page 785     #793

18.8. mutual independence

785

de   nition 18.8.1. a set a1, a2, . . . , of events is k-way independent iff every set
of k of these events is mutually independent. the set is pairwise independent iff it
is 2-way independent.

so the events a1, a2, a3 above are pairwise independent, but not mutually inde-
pendent. pairwise independence is a much weaker property than mutual indepen-
dence.

for example, suppose that the prosecutors in the o. j. simpson trial were wrong
and markers a, b, c , d and e are only pairwise independently. then the proba-
bility that a randomly-selected person has all    ve markers is no more than:

pr  a \ b \ c \ d \ e     pr  a \ e   d pr  a   (cid:1) pr  e  

d 1
100

(cid:1) 1
170

d 1

:

17;000

the    rst line uses the fact that a\ b \ c \ d\ e is a subset of a\ e. (we picked
out the a and e markers because they   re the rarest.) we use pairwise independence
on the second line. now the id203 of a random match is 1 in 17,000   a far cry
from 1 in 170 million! and this is the strongest conclusion we can reach assuming
only pairwise independence.

on the other hand, the 1 in 17,000 bound that we get by assuming pairwise
independence is a lot better than the bound that we would have if there were no
independence at all. for example, if the markers are dependent, then it is possible
that

everyone with marker e has marker a,
everyone with marker a has marker b,
everyone with marker b has marker c , and
everyone with marker c has marker d.

in such a scenario, the id203 of a match is
pr  e   d 1

170

:

so a stronger independence assumption leads to a smaller bound on the prob-
ability of a match. the trick is to    gure out what independence assumption is
reasonable. assuming that the markers are mutually independent may well not be
reasonable unless you have examined hundreds of millions of blood samples. oth-
erwise, how would you know that marker d does not show up more frequently
whenever the other four markers are simultaneously present?

   mcs        2017/6/5     19:42     page 786     #794

786

chapter 18 id155

18.9 id203 versus con   dence

let   s look at some other problems like the breast cancer test of section 18.4.2, but
this time we   ll use more extreme numbers to highlight some key issues.

18.9.1 testing for tuberculosis
let   s suppose we have a really terri   c diagnostic test for tuberculosis (tb): if you
have tb, the test is guaranteed to detect it, and if you don   t have tb, then the test
will report that correctly 99% of the time!

in other words, let    tb    be the event that a person has tb,    pos    be the event
that the person tests positive for tb, so    pos    is the event that they test negative.
now we can restate these guarantees in terms of conditional probabilities:

pr(cid:2)pos j tb(cid:3) d 1;
pr(cid:2)pos     tb(cid:3) d 0:99:

(18.6)
(18.7)

this means that the test produces the correct result at least 99% of the time,
regardless of whether or not the person has tb. a careful statistician would assert:5

lemma. you can be 99% con   dent that the test result is correct.

corollary 18.9.1. if you test positive, then

either you have tb or something very unlikely (id203 1/100) hap-
pened.

lemma 18.9.1 and corollary 18.9.1 may seem to be saying that

false claim. if you test positive, then the id203 that you have tb is 0:99.

but this would be a mistake.
to highlight the difference between con   dence in the test diagnosis versus the
id203 of tb, let   s think about what to do if you test positive. corollary 18.9.1

5con   dence is usually used to describe the id203 that a statistical estimations of some quan-
tity is correct (section 20.5). we are trying to simplify the discussion by using this one concept to
illustrate standard approaches to both hypothesis testing and estimation.

in the context of hypothesis testing, statisticians would normally distinguish the    false positive   
id203, in this case the id203 0.01 that a healthy person is incorrectly diagnosed as having
tb, and call this the signi   cance of the test. the    false negative    id203 would be the id203
that person with tb is incorrectly diagnosed as healthy; it is zero. the power of the test is one minus
the false negative id203, so in this case the power is the highest possible, namely, one.

   mcs        2017/6/5     19:42     page 787     #795

18.9. id203 versus con   dence

787

seems to suggest that it   s worth betting with high odds that you have tb, because
it makes sense to bet against something unlikely happening   like the test being
wrong. but having tb actually turns out to be a lot less likely than the test being
wrong. so the either-or of corollary 18.9.1 is really an either-or between some-
thing happening that is extremely unlikely   having tb   and something that is
only very unlikely   the diagnosis being wrong. you   re better off betting against
the extremely unlikely event, that is, it is better to bet the diagnosis is wrong.

so some knowledge of the id203 of having tb is needed in order to    gure
out how seriously to take a positive diagnosis, even when the diagnosis is given with
what seems like a high level of con   dence. we can see exactly how the frequency
of tb in a population in   uences the importance of a positive diagnosis by actually
calculating the id203 that someone who tests positive has tb. that is, we want

to calculate pr(cid:2)tb j pos(cid:3), which we do next.

18.9.2 updating the odds
bayesian updating
a standard way to convert the test probabilities into outcome probabilities is to use
id47 (18.2). it will be helpful to rephrase id47 in terms of
   odds    instead of probabilities.

if h is an event, we de   ne the odds of h to be

odds.h / wwd pr  h   
pr  h   

d pr  h   
1 (cid:0) pr  h   

:

for example, if h is the event of rolling a four using a fair, six-sided die, then

pr  roll four   d 1=6; so
d 1
5

odds.roll four/ d 1=6

5=6

:

a gambler would say the odds of rolling a four were    one to    ve,    or equivalently,
      ve to one against    rolling a four.

odds are just another way to talk about probabilities. for example, saying the
odds that a horse will win a race are    three to one    means that the horse will win
with id203 1=4. in general,

pr  h    d odds.h /
1 c odds.h /

:

now suppose an event e offers some evidence about h . we now want to    nd
the id155 of h given e. we can just as well    nd the odds of h

   mcs        2017/6/5     19:42     page 788     #796

788

chapter 18 id155

given e,

odds.h j e/ wwd pr(cid:2)h j e(cid:3)
     e(cid:3)
pr(cid:2)h
d pr(cid:2)e j h(cid:3) pr  h   = pr  e  
     h(cid:3) pr  h   = pr  e  
pr(cid:2)e
d pr(cid:2)e j h(cid:3)
     h(cid:3) (cid:1) pr  h   
pr(cid:2)e
bayes-factor.e; h / wwd pr(cid:2)e j h(cid:3)
     h(cid:3) :
pr(cid:2)e

d bayes-factor.e; h / (cid:1) odds.h /;

pr  h   

where

(id47)

so to update the odds of h given the evidence e, we just multiply by bayes factor:

lemma 18.9.2.

odds.h j e/ d bayes-factor.e; h / (cid:1) odds.h /:

odds for the tb test
the probabilities of test outcomes given in (18.6) and (18.7) are exactly what we
need to    nd bayes factor for the tb test:

bayes-factor.tb; pos/ d pr(cid:2)pos j tb(cid:3)
pr(cid:2)pos     tb(cid:3)
1 (cid:0) pr(cid:2)pos     tb(cid:3)

d

1

d

1

1 (cid:0) 0:99

d 100:

so testing positive for tb increases the odds you have tb by a factor of 100, which
means a positive test is signi   cant evidence supporting a diagnosis of tb. that
seems good to know. but lemma 18.9.2 also makes it clear that when a random
person tests positive, we still can   t determine the odds they have tb unless we
know what are the odds of their having tb in the    rst place, so let   s examine that.
in 2011, the united states center for disease control got reports of 11,000 cases
of tb in us. we can estimate that there were actually about 30,000 cases of tb

   mcs        2017/6/5     19:42     page 789     #797

18.9. id203 versus con   dence

789

that year, since it seems that only about one third of actual cases of tb get reported.
the us population is a little over 300 million, which means

pr  tb   (cid:25) 30; 000

300; 000; 000

d 1

10; 000

:

so the odds of tb are 1=9999. therefore,

odds.tb j pos/ d 100 (cid:1)

1

9; 999

(cid:25) 1
100

:

in other words, even if someone tests positive for tb at the 99% con   dence level,
the odds remain about 100 to one against their having tb. the 99% con   dence
level is not nearly high enough to overcome the relatively tiny id203 of having
tb.

18.9.3 facts that are probably true
we have    gured out that if a random person tests positive for tb, the id203
they have tb is about 1/100. now if you personally happened to test positive for
tb, a competent doctor typically would tell you that the id203 that you have
tb has risen from 1/10,000 to 1/100. but has it? not really.

your doctor should have not have been talking in this way about your particular
situation. he should just have stuck to the statement that for randomly chosen
people, the positive test would be right only one percent of the time. but you are
not a random person, and whether or not you have tb is a fact about reality. the
truth about your having tb may be unknown to your doctor and you, but that does
not mean it has some id203 of being true. it is either true or false, we just
don   t know which.

in fact, if you were worried about a 1/100 id203 of having this serious
disease, you could use additional information about yourself to change this proba-
bility. for example, native born residents of the us are about half as likely to have
tb as foreign born residents. so if you are native born,    your    id203 of hav-
ing tb halves. conversely, tb is twenty-   ve times more frequent among native
born asian/paci   c islanders than native born caucasions. so your id203 of
tb would increase dramatically if your family was from an asian/paci   c island.

the point is that the id203 of having tb that your doctor reports to you
depends on the id203 of tb for a random person whom the doctor thinks
is like you. the doctor has made a judgment about you based, for example, on
what personal factors he considers relevant to getting tb, or how serious he thinks
the consequences of a mistaken diagnosis would be. these are important medical
judgments, but they are not mathematical. different doctors will make different

   mcs        2017/6/5     19:42     page 790     #798

790

chapter 18 id155

judgments about who is like you, and they will report differing probabilities. there
is no    true    model of who you are, and there is no true individual id203 of
your having tb.

18.9.4 extreme events
the de   nition of a fair coin is one where the id203 of    ipping a head is 1/2
and likewise for    ipping a tail. now suppose you    ip the coin one hundred times
and get a head every time. what do you think the odds are that the next    ip will
also be a head?

the of   cial answer is that, by de   nition of    fair coin,    the id203 of heads
on the next    ip is still 1/2. but this reasoning completely contradicts what any
sensible person would do, which is to bet heavily on the next    ip being another
head.

how to make sense of this? to begin, let   s recognize how absurd it is to wonder
about what happens after one hundred heads, because the id203 that a hundred
   ips of a fair coin will all come up heads is unimaginably tiny. for example, the
(cid:0)50.
id203 that just the    rst    fty out of the hundred fair    ips come up heads is 2
we can try to make some sense of how small this number is with the observation
that, using a reasonable estimation of the number of people worldwide who are
(cid:0)50 is about equal to the id203 that a
killed by lightning in a given year, 2
random person would be struck by lightning during the time it takes to read this
paragraph. ain   t gonna happen.

the negligible id203 that one hundred    ips of a fair coin will all be heads
simply undermines the credibility of the assumption that the coin is fair. despite
being told the coin is fair, we can   t help but acknowledge at least some remote
possibility that the coin being    ipped was one that rarely produced heads. so let   s
assume that there are two coins, a fair one and a biased one that comes up heads
with id203 99/100. one of these coins is randomly chosen with the fair coin
hugely favored: the biased coin will be chosen only with extremely small probabil-
(cid:0)50. the chosen coin is then    ipped one hundred times. let e be the event of
ity 2
   ipping one hundred heads and h be the event that the biased coin was chosen.

now

(cid:0)50
odds.h / d 2
1 (cid:0) 2

bayes-factor.e; h / d pr(cid:2)e j h(cid:3)
pr(cid:2)e

(cid:0)50

(cid:25) 2

(cid:0)50;

     h(cid:3) d .99=100/100

(cid:0)100

2

odds.h j e/ d bayes-factor.e; h / (cid:1) odds.h /
(cid:0)50 d 0:36 (cid:1) 250:

> 0:36 (cid:1) 2100 (cid:1) 2

> 0:36 (cid:1) 2100;

   mcs        2017/6/5     19:42     page 791     #799

18.9. id203 versus con   dence

791

this shows that after    ipping one hundred heads, the odds that the biased coin was
chosen are overwhelming, and so with high id203 the next    ip will be a head.
thus, by assuming some tiny id203 for the coin being heavily biased toward
heads, we can justify our intuition that after one hundred consecutive heads, the
next    ip is very likely to be a head.

making an assumption about the id203 that some unveri   ed fact is true is
known as the bayesian approach to a hypothesis testing problem. by granting a tiny
id203 that the biased coin was being    ipped, this bayesian approach provided
a reasonable justi   cation for estimating that the odds of a head on the next    ip are
ninety-nine to one in favor.

18.9.5 con   dence in the next flip
if we stick to con   dence rather than id203, we don   t need to make any bayesian
assumptions about the id203 of a fair coin. we know that if one hundred
heads are    ipped, then either the coin is biased, or something that virtually never
(cid:0)100) has occurred. that means we can assert that the coin
happens (id203 2
(cid:0)100 con   dence level. in short, when one hundred heads are
is biased at the 1 (cid:0) 2
   ipped, we can be essentially 100% con   dent that the coin is biased.

problems for section 18.4

homework problems
problem 18.1.
the id155 product rule for n events is

rule.

pr  e1 \ e2 \ : : : \ en   d pr  e1   (cid:1) pr(cid:2)e2 j e1

(cid:3) (cid:1) pr(cid:2)e3 j e1 \ e2
(cid:3) :
(cid:1) pr(cid:2)en j e1 \ e2 \ : : : \ en(cid:0)1

(cid:3)(cid:1)(cid:1)(cid:1)

(a) restate the rule without using elipses (. . . ).

(b) prove it by induction.

   mcs        2017/6/5     19:42     page 792     #800

792

chapter 18 id155

problems for section 18.5

practice problems
problem 18.2.
dirty harry places two bullets in random chambers of the six-bullet cylinder of his
revolver. he gives the cylinder a random spin and says    feeling lucky?    as he
holds the gun against your heart.
(a) what is the id203 that you will get shot if he pulls the trigger?

(b) suppose he pulls the trigger and you don   t get shot. what is the id203
that you will get shot if he pulls the trigger a second time?

(c) suppose you noticed that he placed the two shells next to each other in the
cylinder. how does this change the answers to the previous two questions?

problem 18.3.
state and prove a version of the law of total id203 that applies to disjoint
events e1; : : : ; en whose union is the whole sample space.

problem 18.4.
state and prove a version of bayes rule that applies to disjoint events e1; : : : ; en
whose union is the whole sample space. you may assume the n-event law of total
id203, problem 18.3.

class problems
problem 18.5.
there are two decks of cards. one is complete, but the other is missing the ace
of spades. suppose you pick one of the two decks with equal id203 and then
select a card from that deck uniformly at random. what is the id203 that you
picked the complete deck, given that you selected the eight of hearts? use the
four-step method and a tree diagram.

problem 18.6.
suppose you have three cards: a~, a(cid:127) and a jack. from these, you choose a
random hand (that is, each card is equally likely to be chosen) of two cards, and let

   mcs        2017/6/5     19:42     page 793     #801

18.9. id203 versus con   dence

793

n be the number of aces in your hand. you then randomly pick one of the cards in
the hand and reveal it.
(a) describe a simple id203 space (that is, outcomes and their probabilities)
for this scenario, and list the outcomes in each of the following events:
1.   n (cid:21) 1  , (that is, your hand has an ace in it),
2. a~ is in your hand,
3. the revealed card is an a~,
4. the revealed card is an ace.

(b) then calculate pr(cid:2)n d 2 j e(cid:3) for e equal to each of the four events in part (a).

notice that most, but not all, of these probabilities are equal.
now suppose you have a deck with d distinct cards, a different kinds of aces
(including an a~), you draw a random hand with h cards, and then reveal a random
card from your hand.
(c) prove that pr  a~ is in your hand   d h=d.
(d) prove that

pr(cid:2)n d 2 j a~ is in your hand(cid:3) d pr  n d 2   (cid:1) 2d

:

(18.8)

ah

(e) conclude that

pr(cid:2)n d 2 j the revealed card is an ace(cid:3) d pr(cid:2)n d 2 j a~ is in your hand(cid:3) :

problem 18.7.
there are three prisoners in a maximum-security prison for    ctional villains: the
evil wizard voldemort, the dark lord sauron, and little bunny foo-foo. the
parole board has declared that it will release two of the three, chosen uniformly at
random, but has not yet released their names. naturally, sauron    gures that he will
be released to his home in mordor, where the shadows lie, with id203 2=3.

a guard offers to tell sauron the name of one of the other prisoners who will be
released (either voldemort or foo-foo). if the guard has a choice of naming either
voldemort or foo-foo (because both are to be released), he names one of the two
with equal id203.

sauron knows the guard to be a truthful fellow. however, sauron declines this
offer. he reasons that knowing what the guards says will reduce his chances, so he
is better off not knowing. for example, if the guard says,    little bunny foo-foo

   mcs        2017/6/5     19:42     page 794     #802

794

chapter 18 id155

will be released   , then his own id203 of release will drop to 1=2 because he
will then know that either he or voldemort will also be released, and these two
events are equally likely.

dark lord sauron has made a typical mistake when reasoning about conditional
id203. using a tree diagram and the four-step method, explain his mistake.
what is the id203 that sauron is released given that the guard says foo-foo is
released?

hint: de   ne the events s, f and    f     as follows:

   f     d guard says foo-foo is released
f d foo-foo is released
s d sauron is released

problem 18.8.
every skywalker serves either the light side or the dark side.

(cid:15) the    rst skywalker serves the dark side.
(cid:15) for n (cid:21) 2, the n-th skywalker serves the same side as the .n (cid:0) 1/-st sky-
walker with id203 1=4, and the opposite side with id203 3=4.

let dn be the id203 that the n-th skywalker serves the dark side.
(a) express dn with a recurrence equation and suf   cient base cases.

(b) derive a simple expression for the generating function d.x/ wwdp1

1 dnxn.

(c) give a simple closed formula for dn.

problem 18.9. (a) for the directed acyclic graph (dag) g0 in figure 18.3, a
minimum-edge dag with the same walk relation can be obtained by removing
some edges. list these edges (use notation hu! vi for an edge from u to v):
(b) list the vertices in a maximal chain in g0.

let g be the simple graph shown in figure 18.4.

   mcs        2017/6/5     19:42     page 795     #803

18.9. id203 versus con   dence

795

figure 18.3 the dag g0

   mcs        2017/6/5     19:42     page 796     #804

796

chapter 18 id155

figure 18.4 simple graph g

   mcs        2017/6/5     19:42     page 797     #805

18.9. id203 versus con   dence

797

a directed graph

(cid:0)!
g can be randomly constructed from g by assigning a direction

to each edge independently with equal likelihood.
(c) what is the id203 that
de   ne the following events with respect to the random graph

(cid:0)!
g d g0?

(cid:0)!
g :

t1 wwd vertices 2; 3; 4 are on a length three directed cycle;
t2 wwd vertices 1; 3; 4 are on a length three directed cycle;
t3 wwd vertices 1; 2; 4 are on a length three directed cycle;
t4 wwd vertices 1; 2; 3 are on a length three directed cycle:

(d) what is

pr  t1     
pr  t1 \ t2     
pr  t1 \ t2 \ t3     

(cid:0)!
g has the property that if it has a directed cycle, then it has a length three

(e)
directed cycle. use this fact to    nd the id203 that

(cid:0)!
g is a dag.

homework problems
problem 18.10.
there is a subject   naturally not math for computer science   in which 10% of the
assigned problems contain errors. if you ask a teaching assistant (ta) whether a
problem has an error, then they will answer correctly 80% of the time, regardless
of whether or not a problem has an error. if you ask a lecturer, he will identify
whether or not there is an error with only 75% accuracy.

we formulate this as an experiment of choosing one problem randomly and ask-

ing a particular ta and lecturer about it. de   ne the following events:

e wwd   the problem has an error  ;
t wwd   the ta says the problem has an error  ;
l wwd   the lecturer says the problem has an error  :

(a) translate the description above into a precise set of equations involving con-
ditional probabilities among the events e, t and l.

   mcs        2017/6/5     19:42     page 798     #806

798

chapter 18 id155

(b) suppose you have doubts about a problem and ask a ta about it, and they tell
you that the problem is correct. to double-check, you ask a lecturer, who says that
the problem has an error. assuming that the correctness of the lecturer   s answer
and the ta   s answer are independent of each other, regardless of whether there is
an error, what is the id203 that there is an error in the problem?

(c) is event t independent of event l (that is, pr(cid:2)t j l(cid:3) d pr  t   )? first, give

an argument based on intuition, and then calculate both probabilities to verify your
intuition.

problem 18.11.
suppose you repeatedly    ip a fair coin until you see the sequence htt or hht.
what is the id203 you see the sequence htt    rst?

hint: try to    nd the id203 that hht comes before htt conditioning on

whether you    rst toss an h or a t. the answer is not 1=2.

problem 18.12.
a 52-card deck is thoroughly shuf   ed and you are dealt a hand of 13 cards.
(a) if you have one ace, what is the id203 that you have a second ace?

(b) if you have the ace of spades, what is the id203 that you have a second
ace? remarkably, the answer is different from part (a).

problem 18.13.
suppose pr  (cid:1)   w s !   0; 1   is a id203 function on a sample space s and let b
be an event such that pr  b   > 0. de   ne a function prb   (cid:1)   on outcomes ! 2 s by
the rule:

prb   !   wwd

pr  !  = pr  b  
0

(18.9)
(a) prove that prb   (cid:1)   is also a id203 function on s according to de   ni-
tion 17.5.2.

if ! 2 b;
if !     b:

(

(b) prove that

for all a   s.

prb   a   d pr  a \ b  

pr  b  

   mcs        2017/6/5     19:42     page 799     #807

18.9. id203 versus con   dence

799

(c) explain why the disjoint sum rule carries over for conditional probabilities,
namely,

pr(cid:2)c [ d j b(cid:3) d pr(cid:2)c j b(cid:3) c pr(cid:2)d j b(cid:3)

.c; d disjoint/:

give examples of several further such rules.

problem 18.14.
professor meyer has a deck of 52 randomly shuf   ed playing cards, 26 red, 26 black.
he proposes the following game: he will repeatedly draw a card off the top of the
deck and turn it face up so that you can see it. at any point while there are still
cards left in the deck, you may choose to stop, and he will turn over the next card.
if the turned up card is black you win, and otherwise you lose. either way, the
game ends.

suppose that after drawing off some top cards without stopping, the deck is left

with r red cards and b black cards.
(a) show that if you choose to stop at this point, the id203 of winning is
b=.r c b/.
(b) prove if you choose not to stop at this point, the id203 of winning is still
b=.r c b/, regardless of your stopping strategy for the rest of the game.
hint: induction on r c b.

exam problems
problem 18.15.
sally smart just graduated from high school. she was accepted to three reputable
colleges.

(cid:15) with id203 4=12, she attends yale.
(cid:15) with id203 5=12, she attends mit.
(cid:15) with id203 3=12, she attends little hoop community college.
sally is either happy or unhappy in college.
(cid:15) if she attends yale, she is happy with id203 4=12.
(cid:15) if she attends mit, she is happy with id203 7=12.
(cid:15) if she attends little hoop, she is happy with id203 11=12.

   mcs        2017/6/5     19:42     page 800     #808

800

chapter 18 id155

(a) a tree diagram to help sally project her chance at happiness is shown below.
on the diagram,    ll in the edge probabilities, and at each leaf write the id203
of the corresponding outcome.

(b) what is the id203 that sally is happy in college?

(c) what is the id203 that sally attends yale, given that she is happy in col-
lege?

(d) show that the event that sally attends yale is not independent of the event that
she is happy.

(e) show that the event that sally attends mit is independent of the event that she
is happy.

problem 18.16.
here   s a variation of monty hall   s game: the contestant still picks one of three
doors, with a prize randomly placed behind one door and goats behind the other
two. but now, instead of always opening a door to reveal a goat, monty instructs
carol to randomly open one of the two doors that the contestant hasn   t picked. this
means she may reveal a goat, or she may reveal the prize. if she reveals the prize,
then the entire game is restarted, that is, the prize is again randomly placed behind
some door, the contestant again picks a door, and so on until carol    nally picks a
door with a goat behind it. then the contestant can choose to stick with his original
choice of door or switch to the other unopened door. he wins if the prize is behind
the door he    nally chooses.

to analyze this setup, we de   ne two events:

yalemitlittle hoophappyunhappyhappyhappyunhappyunhappy   mcs        2017/6/5     19:42     page 801     #809

18.9. id203 versus con   dence

801

gp : the event that the contestant guesses the door with the prize behind it on his

   rst guess.

op : the event that the game is restarted at least once. another way to describe

this is as the event that the door carol    rst opens has a prize behind it.

give the values of the following probabilities:

(a) pr  gp   

(b) pr(cid:2)op

     gp(cid:3)

(c) pr  op   

(d) the id203 that the game will continue forever

(e) when carol    nally picks the goat, the contestant has the choice of sticking or
switching. let   s say that the contestant adopts the strategy of sticking. let w be
the event that the contestant wins with this strategy, and let w wwd pr  w   . express
the following conditional probabilities as simple closed forms in terms of w.

i) pr(cid:2)w j gp(cid:3)
ii) pr(cid:2)w
iii) pr(cid:2)w

     gp \ op(cid:3)
     gp \ op(cid:3)

(f) what is the value of pr  w   ?

(g) for any    nal outcome where the contestant wins with a    stick    strategy, he
would lose if he had used a    switch    strategy, and vice versa. in the original monty
hall game, we concluded immediately that the id203 that he would win with
a    switch    strategy was 1 (cid:0) pr  w   . why isn   t this conclusion quite as obvious for
this new, restartable game? is this conclusion still sound? brie   y explain.

problem 18.17.
there are two decks of cards, the red deck and the blue deck. they differ slightly
in a way that makes drawing the eight of hearts slightly more likely from the red
deck than from the blue deck.

one of the decks is randomly chosen and hidden in a box. you reach in the
box and randomly pick a card that turns out to be the eight of hearts. you believe
intuitively that this makes the red deck more likely to be in the box than the blue
deck.

   mcs        2017/6/5     19:42     page 802     #810

802

chapter 18 id155

your intuitive judgment about the red deck can be formalized and veri   ed using
some inequalities between probabilities and conditional probabilities involving the
events

r wwd red deck is in the box;
b wwd blue deck is in the box;
e wwd eight of hearts is picked from the deck in the box:

(a) state an inequality between probabilities and/or conditional probabilities that
formalizes the assertion,    picking the eight of hearts from the red deck is more
likely than from the blue deck.   

(b) state a similar inequality that formalizes the assertion    picking the eight of
hearts from the deck in the box makes the red deck more likely to be in the box
than the blue deck.   

(c) assuming that initially each deck is equally likely to be the one in the box,
prove that the inequality of part (a) implies the inequality of part (b).

(continued on next page)

(d) suppose you couldn   t be sure that the red deck and blue deck initially were
equally likely to be in the box. could you still conclude that picking the eight of
hearts from the deck in the box makes the red deck more likely to be in the box
than the blue deck? brie   y explain.

problem 18.18.
a    ip of coin 1 is x times as likely to come up heads as a    ip of coin 2. a
biased random choice of one of these coins will be made, where the id203 of
choosing coin 1 is w times that of coin 2.
(a) restate the information above as equations between conditional probabilities
involving the events

c1 wwd coin 1 was chosen;
c 2 wwd coin 2 was chosen;
h wwd the chosen coin came up heads:

(b) state an inequality involving conditional probabilities of the above events that
formalizes the assertion    given that the chosen coin came up heads, the chosen
coin is more likely to have been coin 1 than coin 2.   

   mcs        2017/6/5     19:42     page 803     #811

18.9. id203 versus con   dence

803

(c) prove that, given that the chosen coin came up heads, the chosen coin is more
likely to have been coin 1 than coin 2 iff

wx > 1:

problem 18.19.
there is an unpleasant, degenerative disease called beaver fever which causes peo-
ple to tell math jokes unrelentingly in social settings, believing other people will
think they   re funny. fortunately, beaver fever is rare, af   icting only about 1 in
1000 people. doctor meyer has a fairly reliable diagnostic test to determine who is
going to suffer from this disease:

(cid:15) if a person will suffer from beaver fever, the id203 that dr. meyer
diagnoses this is 0.99.
(cid:15) if a person will not suffer from beaver fever, the id203 that dr. meyer
diagnoses this is 0.97.

let b be the event that a randomly chosen person will suffer beaver fever, and y
be the event that dr. meyer   s diagnosis is    yes, this person will suffer from beaver
fever,    with b and y being the complements of these events.
(a) the description above explicitly gives the values of the following quantities.
what are their values?

pr(cid:2)y j b(cid:3)
(b) write formulas for pr  b   and pr(cid:2)y
from beaver fever solely in terms of pr  b  , pr  b  , pr(cid:2)y j b(cid:3) and pr(cid:2)y

     b(cid:3) solely in terms of the explicitly given
     b(cid:3).

(c) write a formula for the id203 that dr. meyer says a person will suffer

quantities in part (a)   literally use their expressions, not their numeric values.

     b(cid:3)

pr(cid:2)y

pr  b  

(d) write a formula solely in terms of the expressions given in part (a) for the
id203 that a person will suffer beaver fever given that doctor meyer says
they will. then calculate the numerical value of the formula.

suppose there was a vaccine to prevent beaver fever, but the vaccine was expen-
sive or slightly risky itself. if you were sure you were going to suffer from beaver
fever, getting vaccinated would be worthwhile, but even if dr. meyer diagnosed
you as a future sufferer of beaver fever, the id203 you actually will suffer
beaver fever remains low (about 1/32 by part (d)).

   mcs        2017/6/5     19:42     page 804     #812

804

chapter 18 id155

in this case, you might sensibly decide not to be vaccinated   after all, beaver
fever is not that bad an af   iction. so the diagnostic test serves no purpose in your
case. you may as well not have bothered to get diagnosed. even so, the test may
be useful:
(e) suppose dr. meyer had enough vaccine to treat 2% of the population. if he
randomly chose people to vaccinate, he could expect to vaccinate only 2% of the
people who needed it. but by testing everyone and only vaccinating those diag-
nosed as future sufferers, he can expect to vaccinate a much larger fraction people
who were going to suffer from beaver fever. estimate this fraction.

problem 18.20.
suppose that let   s make a deal is played according to slightly different rules and
with a red goat and a blue goat. there are three doors, with a prize hidden behind
one of them and the goats behind the others. no doors are opened until the con-
testant makes a    nal choice to stick or switch. the contestant is allowed to pick a
door and ask a certain question that the host then answers honestly. the contestant
may then stick with their chosen door, or switch to either of the other doors.
(a) if the contestant asks    is there is a goat behind one of the unchosen doors?   
and the host answers    yes,    is the contestant more likely to win the prize if they
stick, switch, or does it not matter? clearly identify the id203 space of out-
comes and their probabilities you use to model this situation. what is the contes-
tant   s id203 of winning if he uses the best strategy?

(b) if the contestant asks    is the red goat behind one of the unchosen doors?    and
the host answers    yes,    is the contestant more likely to win the prize if they stick,
switch, or does it not matter? clearly identify the id203 space of outcomes
and their probabilities you use to model this situation. what is the contestant   s
id203 of winning if he uses the best strategy?

problem 18.21.
you are organizing a neighborhood census and instruct your census takers to knock
on doors and note the sex of any child that answers the knock. assume that there
are two children in every household, that a random child is equally likely to be a
girl or a boy, and that the two children in a household are equally likely to be the
one that opens the door.

a sample space for this experiment has outcomes that are triples whose    rst
element is either b or g for the sex of the elder child, whose second element is

   mcs        2017/6/5     19:42     page 805     #813

18.9. id203 versus con   dence

805

either b or g for the sex of the younger child, and whose third element is e or y
indicating whether the elder child or younger child opened the door. for example,
.b; g; y/ is the outcome that the elder child is a boy, the younger child is a girl, and
the girl opened the door.
(a) let o be the event that a girl opened the door, and let t be the event that the
household has two girls. list the outcomes in o and t.

(b) what is the id203 pr(cid:2)t j o(cid:3), that both children are girls, given that a

girl opened the door?

(c) what mistake is made in the following argument? (note: merely stating the
correct id203 is not an explanation of the mistake.)

if a girl opens the door, then we know that there is at least one girl in the
household. the id203 that there is at least one girl is

1 (cid:0) pr  both children are boys   d 1 (cid:0) .1=2 (cid:2) 1=2/ d 3=4:

so,

pr(cid:2)t j there is at least one girl in the household(cid:3)
d pr  t \ there is at least one girl in the household  
d
d .1=4/=.3=4/ d 1=3:

pr  there is at least one girl in the household  

pr  there is at least one girl in the household  

pr  t   

therefore, given that a girl opened the door, the id203 that there
are two girls in the household is 1/3.

problem 18.22.
a guard is going to release exactly two of the three prisoners, sauron, voldemort,
and bunny foo foo, and he   s equally likely to release any set of two prisoners.
(a) what is the id203 that voldemort will be released?

the guard will truthfully tell voldemort the name of one of the prisoners to be

released. we   re interested in the following events:

v : voldemort is released.

   mcs        2017/6/5     19:42     page 806     #814

806

chapter 18 id155

   f    : the guard tells voldemort that foo foo will be released.

   s   : the guard tells voldemort that sauron will be released.

the guard has two rules for choosing whom he names:
(cid:15) never say that voldemort will be released,
(cid:15) if both foo foo and sauron are getting released, say    foo foo.   

(b) what is pr(cid:2)v j    f    (cid:3)?
(c) what is pr(cid:2)v j    s   (cid:3)?

(d) show how to use the law of total id203 to combine your answers to
parts (b) and (c) to verify that the result matches the answer to part (a).

problem 18.23.
we are interested in paths in the plane starting at .0; 0/ that go one unit right or one
unit up at each step. to model this, we use a state machine whose states are n (cid:2) n,
whose start state is .0; 0/, and whose transitions are
.x; y/ ! .x c 1; y/;
.x; y/ ! .x; y c 1/:

(a) how many length n paths are there starting from the origin?

(b) how many states are reachable in exactly n steps?

(c) how many states are reachable in at most n steps?

(d) if transitions occur independently at random, going right with id203 p
and up with id203 q wwd 1(cid:0) p at each step, what is the id203 of reaching
position .x; y/?

(e) what is the id203 of reaching state .x; y/ given that the path to .x; y/
reached .m; n/ before getting to .x; y/?

(f) show that the id203 that a path ending at .x; y/ went through .m; n/ is
the same for all p.

   mcs        2017/6/5     19:42     page 807     #815

18.9. id203 versus con   dence

807

problems for section 18.6

practice problems
problem 18.24.
de   ne the events a; fee ; fcs ; mee , and mcs as in section 18.6.

in these terms, the plaintiff in a discrimination suit against a university makes
the argument that in both departments, the id203 that a female is admitted is
less than the id203 for a male. that is,

(18.10)
(18.11)
the university   s defence attorneys retort that overall, a female applicant is more

pr(cid:2)a j fee
pr(cid:2)a j fcs
pr(cid:2)a j fee [ fcs

(cid:3) < pr(cid:2)a j mee
(cid:3)
(cid:3) :
(cid:3) < pr(cid:2)a j mcs
(cid:3) > pr(cid:2)a j mee [ mcs

and

likely to be admitted than a male, namely, that

(cid:3) :

(18.12)

the judge then interrupts the trial and calls the plaintiff and defence attorneys to
a conference in his of   ce to resolve what he thinks are contradictory statements of
facts about the admission data. the judge points out that:

(cid:3)
pr(cid:2)a j fee [ fcs
(cid:3)
(cid:3) c pr(cid:2)a j fcs
d pr(cid:2)a j fee
(cid:3)
< pr(cid:2)a j mee
(cid:3) c pr(cid:2)a j mcs
d pr(cid:2)a j mee [ mcs
(cid:3) < pr(cid:2)a j mee [ mcs
pr(cid:2)a j fee [ fcs

(cid:3)

(cid:3) ;

(because fee and fcs are disjoint)
(by (18.10) and (18.11))
(because mee and mcs are disjoint)

so

which directly contradicts the university   s position (18.12)!

of course the judge is mistaken; an example where the plaintiff and defence
assertions are all true appears in section 18.6. what is the mistake in the judge   s
proof?

problems for section 18.7

practice problems
problem 18.25.
outside of their hum-drum duties as math for computer science teaching assis-

   mcs        2017/6/5     19:42     page 808     #816

808

chapter 18 id155

tants, oscar is trying to learn to levitate using only intense concentration and liz is
trying to become the world champion    aming torch juggler. suppose that oscar   s
id203 of success is 1=6, liz   s chance of success is 1=4, and these two events
are independent.
(a) if at least one of them succeeds, what is the id203 that oscar learns to
levitate?

(b) if at most one of them succeeds, what is the id203 that liz becomes the
world    aming torch juggler champion?

(c) if exactly one of them succeeds, what is the id203 that it is oscar?

problem 18.26.
what is the smallest size sample space in which there are two independent events,
neither of which has id203 zero or id203 one? explain.

problem 18.27.
give examples of event a; b; e such that
(a) a and b are independent, and are also conditionally independent given e, but
are not conditionally independent given e. that is,
pr  a \ b   d pr  a   pr  b  ;

pr(cid:2)a \ b j e(cid:3) d pr(cid:2)a j e(cid:3) pr(cid:2)b j e(cid:3) ;
     e(cid:3) :
pr(cid:2)a \ b

     e(cid:3)    pr(cid:2)a

     e(cid:3) pr(cid:2)b

hint: let s d f1; 2; 3; 4g.
(b) a and b are conditionally independent given e, or given e, but are not inde-
pendent. that is,

pr(cid:2)a \ b j e(cid:3) d pr(cid:2)a j e(cid:3) pr(cid:2)b j e(cid:3) ;
     e(cid:3) ;
pr(cid:2)a \ b

     e(cid:3) d pr(cid:2)a

     e(cid:3) pr(cid:2)b

pr  a \ b      pr  a   pr  b  :

hint: let s d f1; 2; 3; 4; 5g.

   mcs        2017/6/5     19:42     page 809     #817

18.9. id203 versus con   dence

809

an alternative example is

a wwd f1g
b wwd f1; 2g
e wwd f3; 4; 5g:

class problems
problem 18.28.

event e is evidence in favor of event h when pr(cid:2)h j e(cid:3) > pr  h   , and it is
evidence against h when pr(cid:2)h j e(cid:3) < pr  h   .

(a) give an example of events a; b; h such that a and b are independent, both
are evidence for h , but a [ b is evidence against h .
hint: let s d   1::8  
(b) prove e is evidence in favor of h iff e is evidence against h .

problem 18.29.
let g be a simple graph with n vertices. let    a.u; v/    mean that vertices u and v
are adjacent, and let    w .u; v/    mean that there is a length-two walk between u and
v.
(a) explain why w .u; u/ holds iff 9v: a.u; v/.
(b) write a predicate-logic formula de   ning w .u; v/ in terms of the predicate
a.:; :/ when u    v.

(cid:1) possible edges between the n vertices of g. suppose the

there are e wwd(cid:0)n

actual edges of e.g/ are chosen with randomly from this set of e possible edges.
each edge is chosen with id203 p, and the choices are mutually independent.
(c) write a simple formula in terms of p; e, and k for pr  je.g/j d k  .
(d) write a simple formula in terms of p and n for pr  w .u; u/  .

2

let w, x, y and z be four distinct vertices.
because edges are chosen mutually independently, events that depend on disjoint

sets of edges will be mutually independent. for example, the events

a.w; y/ and a.y; x/

and
are independent since hw   yi ;hy   xi ;hw   zi ;hz   xi are four distinct edges.

a.w; z/ and a.z; x/

   mcs        2017/6/5     19:42     page 810     #818

810

chapter 18 id155

(e) let

r wwd pr  not.w .w; x//  ;

(18.13)
where w and x are distinct vertices. write a simple formula for r in terms of n and
p.
hint: different length-two paths between x and y don   t share any edges.

(f) vertices x and y being on a three-cycle can be expressed simply as

a.x; y/ and w .x; y/:

write a simple expression in terms of p and r for the id203 that x and y lie
on a three-cycle in g.

(g) are w .w; x/ and w .y; z/ independent events? brie   y comment (proof not
required).

problems for section 18.8

practice problems
problem 18.30.
suppose a, b and c are mutually independent events, what about a \ b and
b [ c ?

class problems
problem 18.31.
suppose you    ip three fair, mutually independent coins. de   ne the following
events:

(cid:15) let a be the event that the    rst coin is heads.
(cid:15) let b be the event that the second coin is heads.
(cid:15) let c be the event that the third coin is heads.
(cid:15) let d be the event that an even number of coins are heads.

(a) use the four step method to determine the id203 space for this experiment
and the id203 of each of a; b; c; d.

(b) show that these events are not mutually independent.

   mcs        2017/6/5     19:42     page 811     #819

18.9. id203 versus con   dence

811

(c) show that they are 3-way independent.

problem 18.32.
let a; b; c be events. for each of the following statements, prove it or give a
counterexample.
(a) if a is independent of b, then a is also independent of b.

(b) if a is independent of b, and a is independent of c , then a is independent of
b \ c .
hint: choose a; b; c pairwise but not 3-way independent.

(c) if a is independent of b, and a is independent of c , then a is independent of
b [ c .
hint: part (b).

(d) if a is independent of b, and a is independent of c , and a is independent of
b \ c , then a is independent of b [ c .

problem 18.33.
let a; b; c; d be events. describe counterexamples showing that the following
claims are false.
(a)
false claim. if a and b are independent given c , and are also independent given
d, then a and b are independent given c [ d.
(b)
false claim. if a and b are independent given c , and are also independent given
d, then a and b are independent given c \ d.
hint: choose a; b; c; d 3-way but not 4-way independent.
so a and b are not independent given c \ d.

homework problems
problem 18.34.
describe events a, b and c that:

(cid:15) satisfy the    product rule,    namely,

pr  a \ b \ c    d pr  a   (cid:1) pr  b   (cid:1) pr  c   ;

   mcs        2017/6/5     19:42     page 812     #820

812

chapter 18 id155

(cid:15) no two out of the three events are independent.

hint: choose a; b; c events over the uniform id203 space on   1::6  .

exam problems
problem 18.35.
a classroom has sixteen desks in a 4 (cid:2) 4 arrangement as shown below.

if two desks are next to each other, vertically or horizontally, they are called an
adjacent pair. so there are three horizontally adjacent pairs in each row, for a total
of twelve horizontally adjacent pairs. likewise, there are twelve vertically adjacent
pairs.
boys and girls are assigned to desks mutually independently, with id203
p > 0 of a desk being occupied by a boy and id203 q wwd 1 (cid:0) p > 0 of being
occupied by a girl. an adjacent pair d of desks is said to have a    irtation when
there is a boy at one desk and a girl at the other desk. let fd be the event that d
has a    irtation.
(a) different pairs d and e of adjacent desks are said to overlap when they share
a desk. for example, the    rst and second pairs in each row overlap, and so do the
second and third pairs, but the    rst and third pairs do not overlap. prove that if d
and e overlap, then fd and fe are independent events iff p d q.
(b) find four pairs of desks d1; d2; d3; d4 and explain why fd1; fd2; fd3; fd4
are not mutually independent (even if p d q d 1=2).

   mcs        2017/6/5     19:42     page 813     #821

18.9. id203 versus con   dence

813

problems for section 18.9

problem 18.36.
an international journal of pharmacological testing has a policy of publishing
drug trial results only if the conclusion holds at the 95% con   dence level. the ed-
itors and reviewers always carefully check that any results they publish came from
a drug trial that genuinely deserved this level of con   dence. they are also careful
to check that trials whose results they publish have been conducted independently
of each other.

the editors of the journal reason that under this policy, their readership can be
con   dent that at most 5% of the published studies will be mistaken. later, the
editors are embarrassed   and astonished   to learn that every one of the 20 drug
trial results they published during the year was wrong. the editors thought that
because the trials were conducted independently, the id203 of publishing 20
wrong results was negligible, namely, .1=20/20 < 10

(cid:0)25.

write a brief explanation to these befuddled editors explaining what   s wrong
with their reasoning and how it could be that all 20 published studies were wrong.

hint: xkcd comic:    signi   cant    xkcd.com/882/

practice problems
problem 18.37.
a somewhat reliable allergy test has the following properties:

(cid:15) if you are allergic, there is a 10% chance that the test will say you are not.
(cid:15) if you are not allergic, there is a 5% chance that the test will say you are.

(a) the test results are correct at what con   dence level?

(b) what is the bayes factor for being allergic when the test diagnoses a person as
allergic?

(c) what can you conclude about the odds of a random person being allergic given
that the test diagnoses them as allergic? can you determine if the odds are better
than even?

suppose that your doctor tells you that because the test diagnosed you as allergic,
and about 25% of people are allergic, the odds are six to one that you are allergic.
(d) how would your doctor calculate these odds of being allergic based on what   s
known about the allergy test?

   mcs        2017/6/5     19:42     page 814     #822

814

chapter 18 id155

(e) another doctor reviews your test results and medical record and says your
odds of being allergic are really much higher, namely thirty-six to one. brie   y
explain how two conscientious doctors could disagree so much. is there a way you
could determine your actual odds of being allergic?

   mcs        2017/6/5     19:42     page 815     #823

19

random variables
thus far, we have focused on probabilities of events. for example, we computed
the id203 that you win the monty hall game or that you have a rare medical
condition given that you tested positive. but, in many cases we would like to know
more. for example, how many contestants must play the monty hall game until
one of them    nally wins? how long will this condition last? how much will i lose
gambling with strange dice all night? to answer such questions, we need to work
with random variables.

19.1 random variable examples

de   nition 19.1.1. a random variable r on a id203 space is a total function
whose domain is the sample space.

the codomain of r can be anything, but will usually be a subset of the real
numbers. notice that the name    random variable    is a misnomer; random variables
are actually functions.
for example, suppose we toss three independent, unbiased coins. let c be the
number of heads that appear. let m d 1 if the three coins come up all heads or all
tails, and let m d 0 otherwise. now every outcome of the three coin    ips uniquely
determines the values of c and m . for example, if we    ip heads, tails, heads, then
c d 2 and m d 0. if we    ip tails, tails, tails, then c d 0 and m d 1. in effect,
c counts the number of heads, and m indicates whether all the coins match.

since each outcome uniquely determines c and m , we can regard them as func-

tions mapping outcomes to numbers. for this experiment, the sample space is:

s d fhhh; hh t; h th; h t t; thh; th t; t th; t t t g:

now c is a function that maps each outcome in the sample space to a number as
follows:

c.hhh / d 3
c.hh t / d 2
c.h th / d 2
c.h t t / d 1

c.thh / d 2
c.th t / d 1
c.t th / d 1
c.t t t / d 0:

   mcs        2017/6/5     19:42     page 816     #824

816

chapter 19 random variables

similarly, m is a function mapping each outcome another way:
m.thh / d 0
m.th t / d 0
m.t th / d 0
m.t t t / d 1:

m.hhh / d 1
m.hh t / d 0
m.h th / d 0
m.h t t / d 0

so c and m are random variables.

indicator random variables

19.1.1
an indicator random variable is a random variable that maps every outcome to
either 0 or 1. indicator random variables are also called bernoulli variables. the
random variable m is an example. if all three coins match, then m d 1; otherwise,
m d 0.
indicator random variables are closely related to events.

in particular, an in-
dicator random variable partitions the sample space into those outcomes mapped
to 1 and those outcomes mapped to 0. for example, the indicator m partitions the
sample space into two blocks as follows:

   

     

m d 1

   

   

     

m d 0

hhh t t t

hh t h th h t t

thh th t

t th

:

   

in the same way, an event e partitions the sample space into those outcomes
in e and those not in e. so e is naturally associated with an indicator random
variable, ie , where ie .!/ d 1 for outcomes ! 2 e and ie .!/ d 0 for outcomes
!     e. this means that event e is the same as the event   ie d 1  . for example
the variable m above is really just the indicator variable ie , where e is the event
that all three coins match.

19.1.2 random variables and events
there is a strong relationship between events and more general random variables
as well. a random variable that takes on several values partitions the sample space
into several blocks. for example, c partitions the sample space as follows:

     
each block is a subset of the sample space and is therefore an event. so the assertion
that c d 2 de   nes the event

hhh           

t t t           

thh h th hh t

t th th t h t t

     

c d 1

c d 3

c d 2

c d 0

   

   

   

   

:

  c d 2   d fthh; h th; hh t g;

   mcs        2017/6/5     19:42     page 817     #825

19.2. independence

and this event has id203

817

pr  c d 2   d pr  thh    c pr  h th    c pr  hh t    d 1

c 1
8
likewise   m d 1   is the event ft t t; hhhg and has id203 1=4.
more generally, any assertion about the values of random variables de   nes an
event. for example, the assertion that c   1 de   nes

d 3=8:

c 1
8

8

  c   1   d ft t t; t th; th t; h t t g;

and so pr  c   1   d 1=2.
another example is the assertion that c (cid:1) m is an odd number. if you think about
it for a minute, you   ll realize that this is an obscure way of saying that all three
coins came up heads, namely,

  c (cid:1) m is odd   d fhhhg:

19.2 independence

the notion of independence carries over from events to random variables as well.
random variables r1 and r2 are independent iff for all x1; x2, the two events

  r1 d x1  

and   r2 d x2  

are independent.

for example, are c and m independent? intuitively, the answer should be    no.   
the number of heads c completely determines whether all three coins match; that
is, whether m d 1. but, to verify this intuition, we must    nd some x1; x2 2 r
such that:

pr  c d x1 and m d x2      pr  c d x1   (cid:1) pr  m d x2  :

one appropriate choice of values is x1 d 2 and x2 d 1. in this case, we have:

pr  c d 2 and m d 1   d 0    1

d pr  m d 1   (cid:1) pr  c d 2  :

(cid:1) 3
8

4

the    rst id203 is zero because we never have exactly two heads (c d 2)
when all three coins match (m d 1). the other two probabilities were computed
earlier.

   mcs        2017/6/5     19:42     page 818     #826

818

chapter 19 random variables

on the other hand, let h1 be the indicator variable for the event that the    rst    ip

is a head, so

  h1 d 1   d fhhh; h th; hh t; h t t g:

then h1 is independent of m , since

pr  m d 1   d 1=4 d pr(cid:2)m d 1 j h1 d 1(cid:3) d pr(cid:2)m d 1 j h1 d 0(cid:3)
pr  m d 0   d 3=4 d pr(cid:2)m d 0 j h1 d 1(cid:3) d pr(cid:2)m d 0 j h1 d 0(cid:3)

this example is an instance of:

lemma 19.2.1. two events are independent iff their indicator variables are inde-
pendent.

the simple proof is left to problem 19.1.
intuitively, the independence of two random variables means that knowing some
information about one variable doesn   t provide any information about the other
one. we can formalize what    some information    about a variable r is by de   ning
it to be the value of some quantity that depends on r. this intuitive property of
independence then simply means that functions of independent variables are also
independent:

lemma 19.2.2. let r and s be independent random variables, and f and g be
functions such that domain.f / d codomain.r/ and domain.g/ d codomain.s /.
then f .r/ and g.s / are independent random variables.

the proof is another simple exercise left to problem 19.33.
as with events, the notion of independence generalizes to more than two random

variables.

de   nition 19.2.3. random variables r1; r2; : : : ; rn are mutually independent iff
for all x1; x2; : : : ; xn, the n events

  r1 d x1  ;   r2 d x2  ; : : : ;   rn d xn  

are mutually independent. they are k-way independent iff every subset of k of
them are mutually independent.

lemmas 19.2.1 and 19.2.2 both extend straightforwardly to k-way independent

variables.

   mcs        2017/6/5     19:42     page 819     #827

19.3. distribution functions

819

19.3 distribution functions

a random variable maps outcomes to values. the id203 density function,
pdfr.x/, of a random variable r measures the id203 that r takes the value
x, and the closely related cumulative distribution function cdfr.x/ measures the
id203 that r   x. random variables that show up for different spaces of
outcomes often wind up behaving in much the same way because they have the
same id203 of taking different values, that is, because they have the same
pdf/cdf.
de   nition 19.3.1. let r be a random variable with codomain v . the id203
density function of r is a function pdfr w v !   0; 1   de   ned by:
if x 2 range.r/;
if x     range.r/:

(
pr  r d x  

pdfr.x/ wwd

0

if the codomain is a subset of the real numbers, then the cumulative distribution
function is the function cdfr w r !   0; 1   de   ned by:
cdfr.x/ wwd pr  r   x  :
a consequence of this de   nition is thatx

pdfr.x/ d 1:

x2range.r/

this is because r has a value for each outcome, so summing the probabilities over
all outcomes is the same as summing over the probabilities of each value in the
range of r.

as an example, suppose that you roll two unbiased, independent, 6-sided dice.
let t be the random variable that equals the sum of the two rolls. this random
variable takes on values in the set v d f2; 3; : : : ; 12g. a plot of the id203
density function for t is shown in figure 19.1. the lump in the middle indicates
that sums close to 7 are the most likely. the total area of all the rectangles is 1
since the dice must take on exactly one of the sums in v d f2; 3; : : : ; 12g.
the cumulative distribution function for t is shown in figure 19.2: the height
of the ith bar in the cumulative distribution function is equal to the sum of the
heights of the leftmost i bars in the id203 density function. this follows from
the de   nitions of pdf and cdf:

cdfr.x/ d pr  r   x   dx

pr  r d y   dx

pdfr.y/:

y x

y x

   mcs        2017/6/5     19:42     page 820     #828

820

chapter 19 random variables

figure 19.1 the id203 density function for the sum of two 6-sided dice.

figure 19.2 the cumulative distribution function for the sum of two 6-sided dice.

3=366=36x2v23456789101112pdft.x/01=21x2v0123456789101112:::cdft.x/   mcs        2017/6/5     19:42     page 821     #829

19.3. distribution functions

821

it also follows from the de   nition that

x!1 cdfr.x/ d 1 and

lim

x!(cid:0)1 cdfr.x/ d 0:

lim

both pdfr and cdfr capture the same information about r, so take your choice.
the key point here is that neither the id203 density function nor the cumulative
distribution function involves the sample space of an experiment.

one of the really interesting things about density functions and distribution func-
tions is that many random variables turn out to have the same pdf and cdf. in other
words, even though r and s are different random variables on different id203
spaces, it is often the case that

pdfr d pdfs :

in fact, some pdf   s are so common that they are given special names. for exam-
ple, the most important distributions in computer science arguably are the bernoulli
distribution, the uniform distribution, the binomial distribution, and the geomet-
ric distribution. we look more closely at these common distributions in the next
several sections.

19.3.1 bernoulli distributions
a bernoulli distribution is the distribution function for a bernoulli variable. specif-
ically, the bernoulli distribution has a id203 density function of the form
fp w f0; 1g !   0; 1   where

for some p 2   0; 1   with q wwd 1 (cid:0) p. the corresponding cumulative distribution
function is fp w r !   0; 1   where

fp.0/ d p;
fp.1/ d q;

and

8  <  :0

fp.x/ wwd

p if 0   x < 1

if x < 0
if 1   x:

1

19.3.2 uniform distributions
a random variable that takes on each possible value in its codomain with the same
id203 is said to be uniform.
if the codomain v has n elements, then the
uniform distribution has a pdf of the form

f w v !   0; 1  

   mcs        2017/6/5     19:42     page 822     #830

822

chapter 19 random variables

where

f .v/ d 1

n

for all v 2 v .
if the elements of v in increasing order are a1; a2; : : : ; an, then the cumulative
distribution function would be f w r !   0; 1   where

8  <  :0

1

f .x/ wwd

k=n if ak   x < akc1 for 1   k < n

if x < a1
if an   x:

uniform distributions come up all the time. for example, the number rolled on
a fair die is uniform on the set f1; 2; : : : ; 6g. an indicator variable is uniform when
its pdf is f1=2.

19.3.3 the numbers game
enough de   nitions   let   s play a game! we have two envelopes. each contains
an integer in the range 0; 1; : : : ; 100, and the numbers are distinct. to win the
game, you must determine which envelope contains the larger number. to give
you a    ghting chance, we   ll let you peek at the number in one envelope selected
at random. can you devise a strategy that gives you a better than 50% chance of
winning?

for example, you could just pick an envelope at random and guess that it contains
the larger number. but this strategy wins only 50% of the time. your challenge is
to do better.

so you might try to be more clever. suppose you peek in one envelope and see
the number 12. since 12 is a small number, you might guess that the number in the
other envelope is larger. but perhaps we   ve been tricky and put small numbers in
both envelopes. then your guess might not be so good!

an important point here is that the numbers in the envelopes may not be random.
we   re picking the numbers and we   re choosing them in a way that we think will
defeat your guessing strategy. we   ll only use randomization to choose the numbers
if that serves our purpose: making you lose!

intuition behind the winning strategy
people are surprised when they    rst learn that there is a strategy that wins more
than 50% of the time, regardless of what numbers we put in the envelopes.

suppose that you somehow knew a number x that was in between the numbers
in the envelopes. now you peek in one envelope and see a number. if it is bigger

   mcs        2017/6/5     19:42     page 823     #831

19.3. distribution functions

823

than x, then you know you   re peeking at the higher number. if it is smaller than x,
then you   re peeking at the lower number. in other words, if you know a number x
between the numbers in the envelopes, then you are certain to win the game.

the only    aw with this brilliant strategy is that you do not know such an x. this
sounds like a dead end, but there   s a cool way to salvage things: try to guess x!
there is some id203 that you guess correctly. in this case, you win 100%
of the time. on the other hand, if you guess incorrectly, then you   re no worse off
than before; your chance of winning is still 50%. combining these two cases, your
overall chance of winning is better than 50%.

many intuitive arguments about id203 are wrong despite sounding persua-
sive. but this one goes the other way: it may not convince you, but it   s actually
correct. to justify this, we   ll go over the argument in a more rigorous way   and
while we   re at it, work out the optimal way to play.

analysis of the winning strategy
for generality, suppose that we can choose numbers from the integer interval   0::n  .
call the lower number l and the higher number h .

your goal is to guess a number x between l and h . it   s simplest if x does not

equal l or h , so you should select x at random from among the half-integers:

1

;

3

;

5

; : : : ;

2n (cid:0) 1

2
but what id203 distribution should you use?

2

2

2

the uniform distribution   selecting each of these half-integers with equal id203   

turns out to be your best bet. an informal justi   cation is that if we    gured out that
you were unlikely to pick some number   say 50 1
2   then we   d always put 50 and 51
in the envelopes. then you   d be unlikely to pick an x between l and h and would
have less chance of winning.

after you   ve selected the number x, you peek into an envelope and see some
number t . if t > x, then you guess that you   re looking at the larger number.
if t < x, then you guess that the other number is larger.

all that remains is to determine the id203 that this strategy succeeds. we

can do this with the usual four step method and a tree diagram.

step 1: find the sample space.
you either choose x too low (< l), too high (> h ), or just right (l < x < h ).
then you either peek at the lower number (t d l) or the higher number (t d h ).
this gives a total of six possible outcomes, as show in figure 19.3.

step 2: de   ne events of interest.
the four outcomes in the event that you win are marked in the tree diagram.

   mcs        2017/6/5     19:42     page 824     #832

824

chapter 19 random variables

figure 19.3 the tree diagram for the numbers game.

step 3: assign outcome probabilities.
first, we assign edge probabilities. your guess x is too low with id203 l=n,
too high with id203 .n (cid:0) h /=n, and just right with id203 .h (cid:0) l/=n.
next, you peek at either the lower or higher number with equal id203. multi-
plying along root-to-leaf paths gives the outcome probabilities.

step 4: compute event probabilities.
the id203 of the event that you win is the sum of the probabilities of the four
outcomes in that event:

c h (cid:0) l

c n (cid:0) h

2n

2n

pr  win   d l
2n
d 1
2
(cid:21) 1
2

2n

c h (cid:0) l
c h (cid:0) l
c 1
2n

2n

the    nal inequality relies on the fact that the higher number h is at least 1 greater
than the lower number l since they are required to be distinct.

sure enough, you win with this strategy more than half the time, regardless of the
numbers in the envelopes! so with numbers chosen from the range 0; 1; : : : ; 100,

choices of xnumberpeeked attdhtdltdhtdltdhtdl1=21=21=21=21=21=2l=n.h   l/=n.n   h/=nresultlosewinwinwinwinloseid203l=2nl=2n.h   l/=2n.h   l/=2n.n   h/=2n.n   h/=2nx too lowx too highx just right   mcs        2017/6/5     19:42     page 825     #833

19.3. distribution functions

825

you win with id203 at least 1=2 c 1=200 d 50:5%. if instead we agree to
stick to numbers 0; : : : ; 10, then your id203 of winning rises to 55%. by las
vegas standards, those are great odds.

randomized algorithms
the best strategy to win the numbers game is an example of a randomized algo-
rithm   it uses random numbers to in   uence decisions. protocols and algorithms
that make use of random numbers are very important in computer science. there
are many problems for which the best known solutions are based on a random num-
ber generator.

for example, the most commonly-used protocol for deciding when to send a
broadcast on a shared bus or ethernet is a randomized algorithm known as expo-
nential backoff. one of the most commonly-used sorting algorithms used in prac-
tice, called quicksort, uses random numbers. you   ll see many more examples if
you take an algorithms course. in each case, randomness is used to improve the
id203 that the algorithm runs quickly or otherwise performs well.

 

!

n

19.3.4 binomial distributions
the third commonly-used distribution in computer science is the binomial distri-
bution. the standard example of a random variable with a binomial distribution is
the number of heads that come up in n independent    ips of a coin. if the coin is
fair, then the number of heads has an unbiased binomial distribution, speci   ed by
the pdf fn w   0::n   !   0; 1  :

fn.k/ wwd

(cid:0)n:

this is because there are(cid:0)n

2

(cid:1) sequences of n coin tosses with exactly k heads, and

k

each such sequence has id203 2
a plot of f20.k/ is shown in figure 19.4. the most likely outcome is k d 10
heads, and the id203 falls off rapidly for larger and smaller values of k. the
falloff regions to the left and right of the main hump are called the tails of the
distribution.

(cid:0)n.

k

in many    elds, including computer science, id203 analyses come down to
getting small bounds on the tails of the binomial distribution. in the context of a
problem, this typically means that there is very small id203 that something
bad happens, which could be a server or communication link overloading or a ran-
domized algorithm running for an exceptionally long time or producing the wrong
result.

   mcs        2017/6/5     19:42     page 826     #834

826

chapter 19 random variables

figure 19.4 the pdf for the unbiased binomial distribution for n d 20, f20.k/.

the tails do get small very fast. for example, the id203 of    ipping at most
25 heads in 100 tosses is less than 1 in 3,000,000. in fact, the tail of the distribution
falls off so rapidly that the id203 of    ipping exactly 25 heads is nearly twice
the id203 of    ipping exactly 24 heads plus the id203 of    ipping exactly
23 heads plus . . . the id203 of    ipping no heads.

 

!
pkqn(cid:0)k:

n

the general binomial distribution
if the coins are biased so that each coin is heads with id203 p and tails with
id203 q wwd 1 (cid:0) p, then the number of heads has a general binomial density
function speci   ed by the pdf fn;p w   0::n   !   0; 1   where

fn;p.k/ d

for some n 2 nc and p 2   0; 1  . this is because there are(cid:0)n

k

(19.1)

(cid:1) sequences with k

heads and n (cid:0) k tails, but now pkqn(cid:0)k is the id203 of each such sequence.
for example, the plot in figure 19.5 shows the id203 density function
fn;p.k/ corresponding to    ipping n d 20 independent coins that are heads with
id203 p d 0:75. the graph shows that we are most likely to get k d 15
heads, as you might expect. once again, the id203 falls off quickly for larger
and smaller values of k.

k

f20.k/0:180:160:140:120:100:080:060:040:020k10152050   mcs        2017/6/5     19:42     page 827     #835

19.4. great expectations

827

figure 19.5 the pdf for the general binomial distribution fn;p.k/ for n d 20
and p d :75.

19.4 great expectations

the expectation or expected value of a random variable in simple cases is just an
average value. for example, the    rst thing you typically want to know when you
see your grade on an exam is the average score of the class. this average score is
the same as the expected score of a random student.

in general, the expected value of a random variable is the sum of all it possible
values when each value is weighted according to its id203. to make this
work, we need to be able to add values and multiply them by probabilities. this
will certainly be possible if the values are real numbers; for technical reasons, we
focus on nonnegative real values. now we can de   ne expected value formally as
follows:

de   nition 19.4.1. if r is a nonnegative real-valued random variable de   ned on a
sample space s, then the expectation of r is

ex  r   wwdx

!2s

r.!/ pr  !  :

(19.2)

f20;:75.k/0:250:20:150:10:050k10152050   mcs        2017/6/5     19:42     page 828     #836

828

chapter 19 random variables

the expectation of a random variable is also known as its mean.
from now on, we will assume our random variables are nonnegative real-valued

unless we explcitly say otherwise.

let   s work through some examples.

19.4.1 the expected value of a uniform random variable
rolling a 6-sided die provides an example of a uniform random variable. let r be
the value that comes up when you roll a fair 6-sided die. then by (19.2), the
expected value of r is

ex  r   d 1 (cid:1) 1

6

c 2 (cid:1) 1

6

c 3 (cid:1) 1

6

c 4 (cid:1) 1

6

c 5 (cid:1) 1

6

c 6 (cid:1) 1

6

d 7
2

:

this calculation shows that the name    expected    value is a little misleading; the
random variable might never actually take on that value. no one expects to roll a
2 on an ordinary die!
3 1
in general, if rn is a random variable with a uniform distribution on fa1; a2; : : : ; ang,
then the expectation of rn is simply the average of the ai   s:

ex  rn   d a1 c a2 c (cid:1)(cid:1)(cid:1) c an

:

n

19.4.2 the expected value of a reciprocal random variable
de   ne a random variable s to be the reciprocal of the value that comes up when
you roll a fair 6-sided die. that is, s d 1=r where r is the value that you roll.
now,
ex  s    d ex

(cid:21) d 1

  1

:

(cid:1) 1
6

c 1
2

(cid:1) 1
6

c 1
3

(cid:1) 1
6

c 1
4

(cid:1) 1
6

c 1
5

(cid:1) 1
6

c 1
6

(cid:1) 1
6

d 49
120

r

1

notice that

ex(cid:2)1=r(cid:3)    1= ex  r  :

assuming that these two quantities are equal is a common mistake.

19.4.3 the expected value of an indicator random variable
the expected value of an indicator random variable for an event is just the proba-
bility of that event.

lemma 19.4.2. if ia is the indicator random variable for event a, then

ex  ia   d pr  a  :

   mcs        2017/6/5     19:42     page 829     #837

19.4. great expectations

proof.

829

ex  ia   d 1 (cid:1) pr  ia d 1   c 0 (cid:1) pr  ia d 0   d pr  ia d 1  

d pr  a  :

(def of ia)

for example, if a is the event that a coin with bias p comes up heads, then
ex  ia   d pr  ia d 1   d p.
19.4.4 alternate de   nition of expectation
there is another standard way to de   ne expectation:

theorem 19.4.3. for any random variable r,

ex  r   d x

x2range.r/

x (cid:1) pr  r d x  :

(19.3)

the proof of theorem 19.4.3, like many of the elementary proofs about expec-

tation in this chapter, follows by regrouping of terms in equation (19.2):
proof. suppose r is de   ned on a sample space s. then,

r.!/ pr  !  

!2s

ex  r   wwdx
d x
d x
d x
d x

x
x
0@ x

x2range.r/

!2  rdx  

x2range.r/

!2  rdx  

r.!/ pr  !  

x pr  !  

pr  !  

x

!2  rdx  
x (cid:1) pr  r d x  :

x2range.r/

x2range.r/

1a

(def of the event   r d x  )

(factoring x from the inner sum)
(def of pr  r d x  )

the    rst equality follows because the events   r d x   for x 2 range.r/ partition
the sample space s, so summing over the outcomes in   r d x   for x 2 range.r/
is the same as summing over s.
(cid:4)

in general, equation (19.3) is more useful than the de   ning equation (19.2) for
calculating expected values. it also has the advantage that it does not depend on
the sample space, but only on the density function of the random variable. on the

   mcs        2017/6/5     19:42     page 830     #838

830

chapter 19 random variables

other hand, summing over all outcomes as in equation (19.2) allows easier proofs
of some basic properties of expectation.

notice that the order in which terms appear in the sums (19.3) and (19.2) is not
speci   ed, and the proof of theorem 19.4.3   and lots of proofs below   involve
regrouping the terms in sums. this is ok because of a well-known property of
countable sums of nonnegative real numbers:

theorem 19.4.4. a countable sum of nonnegative real numbers converges to the
same value, or else always diverges, regardless of the order in which the numbers
are summed.

in fact as long as reordering terms in the in   nite sum (19.2) for expectation
preserves convergence, we can allow random variables r taking negative as well
as positive values. in this case, ex  r   will be well-de   ned and will have all the
basic properties we establish below for nonnegative variables. but reordering does
not preserve convergence for arbitrary sums of positive and negative values (see
problems 14.14 and 14.16), and there is no useful de   nition of the expectation for
arbitrary real-valued random variables.

19.4.5 conditional expectation
just like event probabilities, expectations can be conditioned on some event. given
a random variable r, the expected value of r conditioned on an event a is the
id203-weighted average value of r over outcomes in a. more formally:
de   nition 19.4.5. the conditional expectation ex  r j a   of a random variable r
given event a is:

ex  r j a   wwd x

r (cid:1) pr(cid:2)r d r j a(cid:3) :

(19.4)

r2range.r/

for example, we can compute the expected value of a roll of a fair die, given that
the number rolled is at least 4. we do this by letting r be the outcome of a roll of
the die. then by equation (19.4),

ex  r j r (cid:21) 4   d 6x

i(cid:1)pr(cid:2)r d i j r (cid:21) 4(cid:3) d 1(cid:1)0c2(cid:1)0c3(cid:1)0c4(cid:1) 1

c5(cid:1) 1

3

c6(cid:1) 1

3

d 5:

3

id1

conditional expectation is useful in dividing complicated expectation calcula-
tions into simpler cases. we can    nd a desired expectation by calculating the con-
ditional expectation in each simple case and averaging them, weighing each case
by its id203.

   mcs        2017/6/5     19:42     page 831     #839

19.4. great expectations

831

0

for example, suppose that 49.6% of the people in the world are male and the
rest female   which is more or less true. also suppose the expected height of a
00, while the expected height of a randomly chosen
randomly chosen male is 5
00 what is the expected height of a randomly chosen person? we can
female is 5
calculate this by averaging the heights of men and women. namely, let h be the
height (in feet) of a randomly chosen person, and let m be the event that the person
is male and f the event that the person is female. then

11

5:

0

ex  h    d ex  h j m    pr  m    c ex  h j f    pr  f   

d .5 c 11=12/ (cid:1) 0:496 c .5 c 5=12/ (cid:1) .1 (cid:0) 0:496/
d 5:6646 : : : :

which is a little less than 5    8.   
this method is justi   ed by:

theorem 19.4.6 (law of total expectation). let r be a random variable on a
sample space s, and suppose that a1, a2, . . . , is a partition of s. then

ex  r   dx

ex  r j ai    pr  ai   :

proof.

i

r

r2range.r/

r (cid:1) pr  r d r  

ex  r   d x
r (cid:1)x
dx
pr(cid:2)r d r j ai
dx
x
r (cid:1) pr(cid:2)r d r j ai
x
dx
r (cid:1) pr(cid:2)r d r j ai
dx
x
dx

(cid:3) pr  ai   
(cid:3) pr  ai   
(cid:3) pr  ai   
(cid:3)
r (cid:1) pr(cid:2)r d r j ai

r
pr  ai   
pr  ai    ex  r j ai   :

r

r

i

i

i

i

i

(by 19.3)

(law of total id203)

(distribute constant r)

(exchange order of summation)

(factor constant pr  ai   )

(def 19.4.5 of cond. expectation)

(cid:4)

19.4.6 geometric distributions
a computer program crashes at the end of each hour of use with id203 p, if
it has not crashed already. what is the expected time until the program crashes?

   mcs        2017/6/5     19:42     page 832     #840

832

chapter 19 random variables

this will be easy to    gure out using the law of total expectation, theorem 19.4.6.
speci   cally, we want to    nd ex  c    where c is the number of hours until the    rst
crash. we   ll do this by conditioning on whether or not the crash occurs in the    rst
hour.

so de   ne a to be the event that the system fails on the    rst step and a to be the
complementary event that the system does not fail on the    rst step. then the mean
time to failure ex  c    is

ex  c    d ex  c j a   pr  a   c ex  c j a   pr  a  :

(19.5)

since a is the condition that the system crashes on the    rst step, we know that

ex  c j a   d 1:

(19.6)

since a is the condition that the system does not crash on the    rst step, conditioning
on a is equivalent to taking a    rst step without failure and then starting over without
conditioning. hence,

ex  c j a   d 1 c ex  c   :

(19.7)

plugging (19.6) and (19.7) into (19.5):

ex  c    d 1 (cid:1) p c .1 c ex  c   /q
d p c 1 (cid:0) p c q ex  c   
d 1 c q ex  c   :

then, rearranging terms gives

1 d ex  c    (cid:0) q ex  c    d p ex  c   ;

and thus

ex  c    d 1=p:

the general principle here is well-worth remembering.

mean time to failure

if a system independently fails at each time step with id203 p, then the

expected number of steps up to the    rst failure is 1=p.

so, for example, if there is a 1% chance that the program crashes at the end of
each hour, then the expected time until the program crashes is 1=0:01 d 100 hours.

   mcs        2017/6/5     19:42     page 833     #841

19.4. great expectations

833

as a further example, suppose a couple insists on having children until they get
a boy, then how many baby girls should they expect before their    rst boy? assume
for simplicity that there is a 50% chance that a child will be a boy and that the
genders of siblings are mutually independent.

this is really a variant of the previous problem. the question,    how many hours
until the program crashes?    is mathematically the same as the question,    how
many children must the couple have until they get a boy?    in this case, a crash
corresponds to having a boy, so we should set p d 1=2. by the preceding analysis,
the couple should expect a baby boy after having 1=p d 2 children. since the last
of these will be a boy, they should expect just one girl. so even in societies where
couples pursue this commitment to boys, the expected population will divide evenly
between boys and girls.

there is a simple intuitive argument that explains the mean time to failure for-
mula (19.8). suppose the system is restarted after each failure. this makes the
mean time to failure the same as the mean time between successive repeated fail-
ures. now if the id203 of failure at a given step is p, then after n steps we
expect to have pn failures. now the average number of steps between failures is,
by de   nition, equal to n=pn d 1=p.
for the record, we   ll state a formal version of this result. a random variable
like c that counts steps to    rst failure is said to have a geometric distribution with
parameter p.
de   nition 19.4.7. a random variable c has a geometric distribution with param-
eter p iff codomain.c / d zc and

pr  c d i    d qi(cid:0)1p:

lemma 19.4.8. if a random variable c has a geometric distribution with param-
eter p, then

ex  c    d 1

p

:

(19.8)

19.4.7 expected returns in gambling games
some of the most interesting examples of expectation can be explained in terms of
gambling games. for straightforward games where you win w dollars with proba-
bility p and you lose x dollars with id203 q d 1 (cid:0) p, it is easy to compute
your expected return or winnings. it is simply

pw (cid:0) qx dollars:

   mcs        2017/6/5     19:42     page 834     #842

834

chapter 19 random variables

for example, if you are    ipping a fair coin and you win $1 for heads and you lose $1
for tails, then your expected winnings are
1 (cid:0) 1

  (cid:1) 1 d 0:

(cid:1) 1 (cid:0) 

1

2

2

in such cases, the game is said to be fair since your expected return is zero.

splitting the pot
we   ll now look at a different game which is fair   but only on    rst analysis.

it   s late on a friday night in your neighborhood hangout when two new biker
dudes, eric and nick, stroll over and propose a simple wager. each player will
put $2 on the bar and secretly write    heads    or    tails    on their napkin. then you
will    ip a fair coin. the $6 on the bar will then be    split      that is, be divided
equally   among the players who correctly predicted the outcome of the coin toss.
pot splitting like this is a familiar feature in poker games, betting pools, and lotter-
ies.

this sounds like a fair game, but after your regrettable encounter with strange
dice (section 17.3), you are de   nitely skeptical about gambling with bikers. so
before agreeing to play, you go through the four-step method and write out the
tree diagram to compute your expected return. the tree diagram is shown in fig-
ure 19.6.

the    payoff    values in figure 19.6 are computed by dividing the $6 pot1 among
those players who guessed correctly and then subtracting the $2 that you put into
the pot at the beginning. for example, if all three players guessed correctly, then
your payoff is $0, since you just get back your $2 wager. if you and nick guess
correctly and eric guessed wrong, then your payoff is

(cid:0) 2 d 1:

6

2

in the case that everyone is wrong, you all agree to split the pot and so, again, your
payoff is zero.

to compute your expected return, you use equation (19.3):

ex  payoff   d 0 (cid:1) 1

8

8

c 1 (cid:1) 1
c .(cid:0)2/ (cid:1) 1
d 0:

8

c 1 (cid:1) 1
c .(cid:0)2/ (cid:1) 1

c 4 (cid:1) 1
c .(cid:0)2/ (cid:1) 1

8

8

8

c 0 (cid:1) 1

8

8

1the money invested in a wager is commonly referred to as the pot.

   mcs        2017/6/5     19:42     page 835     #843

19.4. great expectations

835

figure 19.6 the tree diagram for the game where three players each wager $2
and then guess the outcome of a fair coin toss. the winners split the pot.

you guessright?eric guessesright?noyesnoyes1=21=21=21=21=21=2yes1=2no1=2yes1=2no1=2yes1=2no1=2yes1=2no1=2yesnoyourpayoff$0$1$1$4   $2   $2   $2$0id2031=81=81=81=81=81=81=81=8nick guessesright?   mcs        2017/6/5     19:42     page 836     #844

836

chapter 19 random variables

this con   rms that the game is fair. so, for old time   s sake, you break your solemn
vow to never ever engage in strange gambling games.

the impact of collusion
needless to say, things are not turning out well for you. the more times you play
the game, the more money you seem to be losing. after 1000 wagers, you have
lost over $500. as nick and eric are consoling you on your    bad luck,    you do a
back-of-the-envelope calculation and decide that the id203 of losing $500 in
1000 fair $2 wagers is very, very small.

now it is possible of course that you are very, very unlucky. but it is more likely
that something    shy is going on. somehow the tree diagram in figure 19.6 is not a
good model of the game.

the    something    that   s    shy is the opportunity that nick and eric have to collude
against you. the fact that the coin    ip is fair certainly means that each of nick and
eric can only guess the outcome of the coin toss with id203 1=2. but when
you look back at the previous 1000 bets, you notice that eric and nick never made
the same guess. in other words, nick always guessed    tails    when eric guessed
   heads,    and vice-versa. modelling this fact now results in a slightly different tree
diagram, as shown in figure 19.7.

the payoffs for each outcome are the same in figures 19.6 and 19.7, but the
probabilities of the outcomes are different. for example, it is no longer possible
for all three players to guess correctly, since nick and eric are always guessing
differently. more importantly, the outcome where your payoff is $4 is also no
longer possible. since nick and eric are always guessing differently, one of them
will always get a share of the pot. as you might imagine, this is not good for you!
when we use equation (19.3) to compute your expected return in the collusion

scenario, we    nd that

ex  payoff   d 0 (cid:1) 0 c 1 (cid:1) 1

4

4

c 1 (cid:1) 1
c .(cid:0)2/ (cid:1) 0 c .(cid:0)2/ (cid:1) 1
d (cid:0) 1
2

4

:

c 4 (cid:1) 0
c .(cid:0)2/ (cid:1) 1

4

c 0 (cid:1) 0

so watch out for these biker dudes! by colluding, nick and eric have made it so
that you expect to lose $.50 every time you play. no wonder you lost $500 over the
course of 1000 wagers.

   mcs        2017/6/5     19:42     page 837     #845

19.4. great expectations

837

figure 19.7 the revised tree diagram re   ecting the scenario where nick always
guesses the opposite of eric.

you guessright?eric guessesright?noyesnoyes1=21=21=21=21=21=2yes0no1yes1no0yes0no1yes1no0yesnoyourpayoff$0$1$1$4   $2   $2   $2$0id20301=41=4001=41=40nick guessesright?   mcs        2017/6/5     19:42     page 838     #846

838

chapter 19 random variables

how to win the lottery
similar opportunities to collude arise in many betting games. for example, consider
the typical weekly football betting pool, where each participant wagers $10 and the
participants that pick the most games correctly split a large pot. the pool seems
fair if you think of it as in figure 19.6. but, in fact, if two or more players collude
by guessing differently, they can get an    unfair    advantage at your expense!

in some cases, the collusion is inadvertent and you can pro   t from it. for ex-
ample, many years ago, a former mit professor of mathematics named herman
chernoff    gured out a way to make money by playing the state lottery. this was
surprising since the state usually takes a large share of the wagers before paying the
winners, and so the expected return from a lottery ticket is typically pretty poor. so
how did chernoff    nd a way to make money? it turned out to be easy!

in a typical state lottery,
(cid:15) all players pay $1 to play and select 4 numbers from 1 to 36,
(cid:15) the state draws 4 numbers from 1 to 36 uniformly at random,
(cid:15) the states divides 1/2 of the money collected among the people who guessed
correctly and spends the other half redecorating the governor   s residence.

this is a lot like the game you played with nick and eric, except that there are
more players and more choices. chernoff discovered that a small set of numbers
was selected by a large fraction of the population. apparently many people think
the same way; they pick the same numbers not on purpose as in the previous game
with nick and eric, but based on the red sox winning average or today   s date. the
result is as though the players were intentionally colluding to lose. if any one of
them guessed correctly, then they   d have to split the pot with many other players.
by selecting numbers uniformly at random, chernoff was unlikely to get one of
these favored sequences. so if he won, he   d likely get the whole pot! by analyzing
actual state lottery data, he determined that he could win an average of 7 cents on
the dollar. in other words, his expected return was not (cid:0)$:50 as you might think,
but c$:07.2 inadvertent collusion often arises in betting pools and is a phenomenon
that you can take advantage of.

2most lotteries now offer randomized tickets to help smooth out the distribution of selected se-

quences.

   mcs        2017/6/5     19:42     page 839     #847

19.5. linearity of expectation

839

19.5 linearity of expectation

expected values obey a simple, very helpful rule called linearity of expectation.
its simplest form says that the expected value of a sum of random variables is the
sum of the expected values of the variables.
theorem 19.5.1. for any random variables r1 and r2,
ex  r1 c r2   d ex  r1   c ex  r2  :

proof. let t wwd r1 c r2. the proof follows straightforwardly by rearranging
terms in equation (19.2) in the de   nition of expectation:

ex  t    wwdx
dx
dx

!2s

!2s

!2s

t .!/ (cid:1) pr  !  
.r1.!/ c r2.!// (cid:1) pr  !  

r1.!/ pr  !   cx

d ex  r1   c ex  r2  :

(def of t )

!2s

r2.!/ pr  !  

(rearranging terms)

(by (19.2))

(cid:4)

a small extension of this proof, which we leave to the reader, implies
theorem 19.5.2. for random variables r1, r2 and constants a1; a2 2 r,

ex  a1r1 c a2r2   d a1 ex  r1   c a2 ex  r2  :

in other words, expectation is a linear function. a routine induction extends the

result to more than two variables:
corollary 19.5.3 (linearity of expectation). for any random variables r1; : : : ; rk
and constants a1; : : : ; ak 2 r,

24 kx

id1

35 d kx

id1

ex

ai ri

ai ex  ri   :

the great thing about linearity of expectation is that no independence is required.
this is really useful, because dealing with independence is a pain, and we often
need to work with random variables that are not known to be independent.

as an example, let   s compute the expected value of the sum of two fair dice.

   mcs        2017/6/5     19:42     page 840     #848

840

chapter 19 random variables

19.5.1 expected value of two dice
what is the expected value of the sum of two fair dice?

let the random variable r1 be the number on the    rst die, and let r2 be the
number on the second die. we observed earlier that the expected value of one die
is 3.5. we can    nd the expected value of the sum using linearity of expectation:

ex  r1 c r2   d ex  r1   c ex  r2   d 3:5 c 3:5 d 7:

assuming that the dice were independent, we could use a tree diagram to prove
that this expected sum is 7, but this would be a bother since there are 36 cases. and
without assuming independence, it   s not apparent how to apply the tree diagram
approach at all. but notice that we did not have to assume that the two dice were
independent. the expected sum of two dice is 7   even if they are controlled to act
together in some way   as long as each individual controlled die remains fair.

19.5.2 sums of indicator random variables
linearity of expectation is especially useful when you have a sum of indicator ran-
dom variables. as an example, suppose there is a dinner party where n men check
their hats. the hats are mixed up during dinner, so that afterward each man receives
a random hat. in particular, each man gets his own hat with id203 1=n. what
is the expected number of men who get their own hat?

letting g be the number of men that get their own hat, we want to    nd the
expectation of g. but all we know about g is that the id203 that a man gets
his own hat back is 1=n. there are many different id203 distributions of hat
permutations with this property, so we don   t know enough about the distribution of
g to calculate its expectation directly using equation (19.2) or (19.3). but linearity
of expectation lets us sidestep this issue.

we   ll use a standard, useful trick to apply linearity, namely, we   ll express g as
a sum of indicator variables. in particular, let gi be an indicator for the event that
the ith man gets his own hat. that is, gi d 1 if the ith man gets his own hat, and
gi d 0 otherwise. the number of men that get their own hat is then the sum of
these indicator random variables:

g d g1 c g2 c (cid:1)(cid:1)(cid:1) c gn:

(19.9)
these indicator variables are not mutually independent. for example, if n (cid:0) 1 men
all get their own hats, then the last man is certain to receive his own hat. but again,
we don   t need to worry about this dependence, since linearity holds regardless.
since gi is an indicator random variable, we know from lemma 19.4.2 that

ex  gi    d pr  gi d 1   d 1=n:

(19.10)

   mcs        2017/6/5     19:42     page 841     #849

19.5. linearity of expectation

841

by linearity of expectation and equation (19.9), this means that

ex  g   d ex  g1 c g2 c (cid:1)(cid:1)(cid:1) c gn  

n

  

      

d ex  g1   c ex  g2   c (cid:1)(cid:1)(cid:1) c ex  gn  
   
d
d 1:

c (cid:1)(cid:1)(cid:1) c 1
n

c 1
n

n

1

so even though we don   t know much about how hats are scrambled, we   ve    gured
out that on average, just one man gets his own hat back, regardless of the number
of men with hats!

more generally, linearity of expectation provides a very good method for com-

puting the expected number of events that will happen.

theorem 19.5.4. given any collection of events a1; a2; : : : ; an, the expected
number of events that will occur is

nx

id1

pr  ai   :

for example, ai could be the event that the ith man gets the right hat back. but
in general, it could be any subset of the sample space, and we are asking for the
expected number of events that will contain a random sample point.
proof. de   ne ri to be the indicator random variable for ai, where ri .!/ d 1 if
w 2 ai and ri .!/ d 0 if w     ai. let r d r1 c r2 c (cid:1)(cid:1)(cid:1) c rn. then

id1

ex  r   d nx
d nx
d nx

id1

id1

ex  ri   

(by linearity of expectation)

pr  ri d 1  

(by lemma 19.4.2)

pr  ai   :

(def of indicator variable)

so whenever you are asked for the expected number of events that occur, all you
have to do is sum the probabilities that each event occurs. independence is not
needed.

   mcs        2017/6/5     19:42     page 842     #850

842

chapter 19 random variables

19.5.3 expectation of a binomial distribution
suppose that we independently    ip n biased coins, each with id203 p of com-
ing up heads. what is the expected number of heads?

let j be the random variable denoting the number of heads. then j has a

binomial distribution with parameters n, p, and

pr  j d k   d

n

 

!
pkqn(cid:0)k:
 
k pr  j d k   d nx

k

k

n

k

kd0

ex  j    d nx

kd0

applying equation (19.3), this means that

!
pkqn(cid:0)k:

(19.11)

this sum looks a tad nasty, but linearity of expectation leads to an easy derivation
of a simple closed form. we just express j as a sum of indicator random variables,
which is easy. namely, let ji be the indicator random variable for the ith coin
coming up heads, that is,

(

ji wwd

1

0

if the ith coin is heads
if the ith coin is tails:

then the number of heads is simply

by theorem 19.5.4,

j d j1 c j2 c (cid:1)(cid:1)(cid:1) c jn:

ex  j    d nx

id1

pr  ji    d pn:

(19.12)

that really was easy. if we    ip n mutually independent coins, we expect to get
pn heads. hence the expected value of a binomial distribution with parameters n
and p is simply pn.

but what if the coins are not mutually independent? it doesn   t matter   the an-
swer is still pn because linearity of expectation and theorem 19.5.4 do not as-
sume any independence.

if you are not yet convinced that linearity of expectation and theorem 19.5.4
are powerful tools, consider this: without even trying, we have used them to prove
a complicated looking identity, namely,

 

!
pkqn(cid:0)k d pn;

k

n

k

nx

kd0

(19.13)

   mcs        2017/6/5     19:42     page 843     #851

19.5. linearity of expectation

843

which follows by combining equations (19.11) and (19.12) (see also exercise 19.28).
the next section has an even more convincing illustration of the power of linear-

ity to solve a challenging problem.

19.5.4 the coupon collector problem
every time we purchase a kid   s meal at taco bell, we are graciously presented with
a miniature    racin    rocket    car together with a launching device which enables us
to project our new vehicle across any tabletop or smooth    oor at high velocity.
truly, our delight knows no bounds.

there are different colored racin    rocket cars. the color of car awarded to
us by the kind server at the taco bell register appears to be selected uniformly and
independently at random. what is the expected number of kid   s meals that we must
purchase in order to acquire at least one of each color of racin    rocket car?

the same mathematical question shows up in many guises: for example, what
is the expected number of people you must poll in order to    nd at least one person
with each possible birthday? the general question is commonly called the coupon
collector problem after yet another interpretation.

a clever application of linearity of expectation leads to a simple solution to the
coupon collector problem. suppose there are    ve different colors of racin    rocket
cars, and we receive this sequence:

blue

green

green

red

blue

orange

blue

orange

gray.

let   s partition the sequence into 5 segments:

blue           

x0

green           

x1

             

green

red

x2

   

     

x3

blue

orange

   

   

blue

orange

     

x4

   

gray

:

the rule is that a segment ends whenever we get a new kind of car. for example, the
middle segment ends when we get a red car for the    rst time. in this way, we can
break the problem of collecting every type of car into stages. then we can analyze
each stage individually and assemble the results using linearity of expectation.

in the general case there are n colors of racin    rockets that we   re collecting.
let xk be the length of the kth segment. the total number of kid   s meals we must
purchase to get all n racin    rockets is the sum of the lengths of all these segments:

t d x0 c x1 c (cid:1)(cid:1)(cid:1) c xn(cid:0)1:

now let   s focus our attention on xk, the length of the kth segment. at the
beginning of segment k, we have k different types of car, and the segment ends
when we acquire a new type. when we own k types, each kid   s meal contains a

   mcs        2017/6/5     19:42     page 844     #852

844

chapter 19 random variables

type that we already have with id203 k=n. therefore, each meal contains a
new type of car with id203 1(cid:0) k=n d .n(cid:0) k/=n. thus, the expected number
of meals until we get a new kind of car is n=.n (cid:0) k/ by the mean time to failure
rule. this means that

ex  xk   d n
n (cid:0) k

:

linearity of expectation, together with this observation, solves the coupon col-

lector problem:

ex  t    d ex  x0 c x1 c (cid:1)(cid:1)(cid:1) c xn(cid:0)1  

  1
  1

c (cid:1)(cid:1)(cid:1) c n
3
c (cid:1)(cid:1)(cid:1) c 1
3

c n
n (cid:0) 1
c 1
n (cid:0) 1
c 1
3

d ex  x0   c ex  x1   c (cid:1)(cid:1)(cid:1) c ex  xn(cid:0)1  
 
c n
c n
d n
n (cid:0) 0
2
1
 
c 1
d n
c 1
1
2
c 1
d n
n
d nhn
(cid:24) n ln n:

c (cid:1)(cid:1)(cid:1) c 1
n (cid:0) 1

c 1
2

n

1

(19.14)

cool! it   s those harmonic numbers again.
we can use equation (19.14) to answer some concrete questions. for example,

the expected number of die rolls required to see every number from 1 to 6 is:

6h6 d 14:7 : : : :

and the expected number of people you must poll to    nd at least one person with
each possible birthday is:

365h365 d 2364:6 : : : :

in   nite sums

19.5.5
linearity of expectation also works for an in   nite number of random variables
provided that the variables satisfy an absolute convergence criterion.
theorem 19.5.5 (linearity of expectation). let r0, r1, . . . , be random variables
such that

1x

id0

ex  jrij   

   mcs        2017/6/5     19:42     page 845     #853

" 1x

id0

#

d

1x

id0

ri

ex

ex  ri   :

845

we leave it to the reader to verify that, under the given convergence hypothesis,
all the sums in the following derivation are absolutely convergent, which justi   es
rearranging them as follows:

id0 ri.

19.5. linearity of expectation

converges. then

s2s

id0

id0

ex  ri    d

proof. let t wwdp1
1x
x
1x
1x
dx
" 1x
dx
dx
" 1x

d ex  t   
d ex

id0

s2s

s2s

s2s

ri .s/

id0
t .s/ (cid:1) pr  s  
#

ri

:

id0

ri .s/ (cid:1) pr  s  
ri .s/ (cid:1) pr  s  
#

(cid:1) pr  s  

(def. 19.4.1)

(exchanging order of summation)

(factoring out pr  s  )

(def. of t )

(def. 19.4.1)

(def. of t ): (cid:4)

19.5.6 a gambling paradox
one of the simplest casino bets is on    red    or    black    at the roulette table. in each
play at roulette, a small ball is set spinning around a roulette wheel until it lands in
a red, black, or green colored slot. the payoff for a bet on red or black matches the
bet; for example, if you bet $10 on red and the ball lands in a red slot, you get back
your original $10 bet plus another matching $10.

the casino gets its advantage from the green slots, which make the id203
of both red and black each less than 1/2. in the us, a roulette wheel has 2 green
slots among 18 black and 18 red slots, so the id203 of red is 18=38 (cid:25) 0:473.
in europe, where roulette wheels have only 1 green slot, the odds for red are a little
better   that is, 18=37 (cid:25) 0:486   but still less than even.
of course you can   t expect to win playing roulette, even if you had the good
fortune to gamble against a fair roulette wheel. to prove this, note that with a fair
wheel, you are equally likely win or lose each bet, so your expected win on any
spin is zero. therefore if you keep betting, your expected win is the sum of your
expected wins on each bet: still zero.

   mcs        2017/6/5     19:42     page 846     #854

846

chapter 19 random variables

even so, gamblers regularly try to develop betting strategies to win at roulette
despite the bad odds. a well known strategy of this kind is bet doubling, where
you bet, say, $10 on red and keep doubling the bet until a red comes up. this
means you stop playing if red comes up on the    rst spin, and you leave the casino
with a $10 pro   t. if red does not come up, you bet $20 on the second spin. now if
the second spin comes up red, you get your $20 bet plus $20 back and again walk
away with a net pro   t of $20 (cid:0) 10 d $10. if red does not come up on the second
spin, you next bet $40 and walk away with a net win of $40(cid:0) 20(cid:0) 10 d $10 if red
comes up on on the third spin, and so on.

since we   ve reasoned that you can   t even win against a fair wheel, this strat-
egy against an unfair wheel shouldn   t work. but wait a minute! there is a 0.486
id203 of red appearing on each spin of the wheel, so the mean time until a red
occurs is less than three. what   s more, red will come up eventually with id203
one, and as soon as it does, you leave the casino $10 ahead. in other words, by bet
doubling you are certain to win $10, and so your expectation is $10, not zero!

something   s wrong here.

19.5.7 solution to the paradox
the argument claiming the expectation is zero against a fair wheel is    awed by an
implicit, invalid use of linearity of expectation for an in   nite sum.

to explain this carefully, let bn be the number of dollars you win on your nth
bet, where bn is de   ned to be zero if red comes up before the nth spin of the wheel.
now the dollar amount you win in any gambling session is

1x
" 1x

nd1

nd1

bn;

#

1x

nd1

1x

nd1

and your expected win is

ex

bn

:

(19.15)

moreover, since we   re assuming the wheel is fair, it   s true that ex  bn   d 0, so

ex  bn   d

0 d 0:

(19.16)

the    aw in the argument that you can   t win is the implicit appeal to linearity of
expectation to conclude that the expectation (19.15) equals the sum of expectations
in (19.16). this is a case where linearity of expectation fails to hold   even though
the expectation (19.15) is 10 and the sum (19.16) of expectations converges. the

   mcs        2017/6/5     19:42     page 847     #855

19.5. linearity of expectation

847

problem is that the expectation of the sum of the absolute values of the bets di-
verges, so the condition required for in   nite linearity fails. in particular, under bet
doubling your nth bet is 10 (cid:1) 2n(cid:0)1 dollars while the id203 that you will make
an nth bet is 2

(cid:0)n. so

(cid:0)n d 5:

ex  jbnj   d 10 (cid:1) 2n(cid:0)12
1x

ex  jbnj   d 5 c 5 c 5 c (cid:1)(cid:1)(cid:1)

nd1

therefore the sum

diverges rapidly.

so the presumption that you can   t beat a fair game, and the argument we offered
to support this presumption, are mistaken: by bet doubling, you can be sure to walk
away a winner. id203 theory has led to an apparently absurd conclusion.

but id203 theory shouldn   t be rejected because it leads to this absurd con-
clusion. if you only had a    nite amount of money to bet with   say enough money
to make k bets before going bankrupt   then it would be correct to calculate your
expection by summing b1 c b2 c (cid:1)(cid:1)(cid:1) c bk, and your expectation would be zero
for the fair wheel and negative against an unfair wheel. in other words, in order
to follow the bet doubling strategy, you need to have an in   nite bankroll. so it   s
absurd to assume you could actually follow a bet doubling strategy, and we needn   t
be concerned when an absurd assumption leads to an absurd conclusion.

19.5.8 expectations of products
while the expectation of a sum is the sum of the expectations, the same is usually
not true for products. for example, suppose that we roll a fair 6-sided die and
denote the outcome with the random variable r. does ex  r (cid:1) r   d ex  r  (cid:1) ex  r  ?
we know that ex  r   d 3 1
4. let   s compute ex  r2   to
see if we get the same result.

2 and thus .ex  r  /2 d 12 1

ex(cid:2)r2(cid:3) dx

r2.!/ pr  w   d 6x

i 2 (cid:1) pr  ri d i   

!2s
d 12
6

c 22
6

c 32
6

c 42
6

c 62
6

d 15 1=6    12 1=4:

id1
c 52
6

that is,

ex  r (cid:1) r      ex  r   (cid:1) ex  r  :

so the expectation of a product is not always equal to the product of the expecta-
tions.

   mcs        2017/6/5     19:42     page 848     #856

848

chapter 19 random variables

there is a special case when such a relationship does hold however; namely,

when the random variables in the product are independent.

theorem 19.5.6. for any two independent random variables r1, r2,

ex  r1 (cid:1) r2   d ex  r1   (cid:1) ex  r2  :

the proof follows by rearrangement of terms in the sum that de   nes ex  r1(cid:1) r2  .
details appear in problem 19.26.

theorem 19.5.6 extends routinely to a collection of mutually independent vari-

ables.

corollary 19.5.7. [expectation of independent product]

if random variables r1; r2; : : : ; rk are mutually independent, then

24 ky

id1

35 d ky

id1

ri

ex  ri   :

ex

problems for section 19.2

practice problems
problem 19.1.
let ia and ib be the indicator variables for events a and b. prove that ia and ib
are independent iff a and b are independent.
hint: let a1 wwd a and a0 wwd a, so the event   ia d c   is the same as ac for
c 2 f0; 1g; likewise for b 1; b 0.

homework problems
problem 19.2.
let r, s and t be random variables with the same codomain v .
(a) suppose r is uniform   that is,

pr  r d b   d 1jv j ;

for all b 2 v    and r is independent of s. originally this text had the following
argument:

   mcs        2017/6/5     19:42     page 849     #857

19.5. linearity of expectation

849

the id203 that r d s is the same as the id203 that r takes
whatever value s happens to have, therefore

pr  r d s    d 1jv j :

(19.17)

are you convinced by this argument? write out a careful proof of (19.17).
hint: the event   r d s    is a disjoint union of events

  r d s    d [

b2v

  r d b and s d b  :

(b) let s (cid:2) t be the random variable giving the values of s and t .3 now suppose
r has a uniform distribution, and r is independent of s (cid:2) t . how about this
argument?

the id203 that r d s is the same as the id203 that r equals
the    rst coordinate of whatever value s (cid:2) t happens to have, and this
id203 remains equal to 1=jv j by independence. therefore the
event   r d s    is independent of   s d t   .

write out a careful proof that   r d s    is independent of   s d t   .
(c) let v d f1; 2; 3g and .r; s; t / take the following triples of values with equal
id203,

.1; 1; 1/; .2; 1; 1/; .1; 2; 3/; .2; 2; 3/; .1; 3; 2/; .2; 3; 2/:

verify that
1. r is independent of s (cid:2) t ,
2. the event   r d s    is not independent of   s d t   .
3. s and t have a uniform distribution.

3that is, s (cid:2) t w s ! v (cid:2) v where

.s (cid:2) t /.!/ wwd .s.!/; t .!//

for every outcome ! 2 s.

   mcs        2017/6/5     19:42     page 850     #858

850

chapter 19 random variables

problem 19.3.
let r, s and t be mutually independent indicator variables.
in general, the event that s d t is not independent of r d s. we can explain
this intuitively as follows: suppose for simplicity that s is uniform, that is, equally
likely to be 0 or 1. this implies that s is equally likely as not to equal r, that is
pr  r d s    d 1=2; likewise, pr  s d t    d 1=2.
now suppose further that both r and t are more likely to equal 1 than to equal
0. this implies that r d s makes it more likely than not that s d 1, and knowing
that s d 1, makes it more likely than not that s d t . so knowing that r d s
now prove rigorously (without any appeal to intuition) that the events   r d s   
and   s d t    are independent iff either r is uniform4, or t is uniform, or s is
constant5.

makes it more likely than not that s d t , that is, pr(cid:2)s d t j r d s(cid:3) > 1=2.

problems for section 19.3

practice problems
problem 19.4.
suppose r, s and t be mutually independent random variables on the same prob-
ability space with uniform distribution on the range f1; 2; 3g.
let m d maxfr; s; t g. compute the values of the id203 density function
pdfm of m .

4that is, pr  r d 1   d 1=2.
5that is, pr  s d 1   is one or zero.

   mcs        2017/6/5     19:42     page 851     #859

19.5. linearity of expectation

class problems

851

guess the bigger number game

team 1:
(cid:15) write two different integers between 0 and 7 on separate pieces of paper.
(cid:15) put the papers face down on a table.
team 2:
(cid:15) turn over one paper and look at the number on it.
(cid:15) either stick with this number or switch to the other (unseen) number.
team 2 wins if it chooses the larger number; else, team 1 wins.

problem 19.5.
the analysis in section 19.3.3 implies that team 2 has a strategy that wins 4/7 of
the time no matter how team 1 plays. can team 2 do better? the answer is    no,   
because team 1 has a strategy that guarantees that it wins at least 3/7 of the time,
no matter how team 2 plays. describe such a strategy for team 1 and explain why
it works.

problem 19.6.
suppose you have a biased coin that has id203 p of    ipping heads. let j be
the number of heads in n independent coin    ips. so j has the general binomial
distribution:

!
pkqn(cid:0)k

 

n

k

pdfj .k/ d

where q wwd 1 (cid:0) p.
(a) show that

pdfj .k (cid:0) 1/ < pdfj .k/
pdfj .k (cid:0) 1/ > pdfj .k/

for k < np c p;
for k > np c p:

   mcs        2017/6/5     19:42     page 852     #860

852

chapter 19 random variables

(b) conclude that the maximum value of pdfj is asymptotically equal to

1p
2(cid:25) npq

:

hint: for the asymptotic estimate, it   s ok to assume that np is an integer, so by
part (a), the maximum value is pdfj .np/. use stirling   s formula.

problem 19.7.
let r1; r2; : : : ; rm, be mutually independent random variables with uniform dis-
tribution on   1::n  . let m wwd maxfri j i 2   1::m  g.
(a) write a formula for pdfm .1/.
(b) more generally, write a formula for pr  m   k  .
(c) for k 2   1::n  , write a formula for pdfm .k/ in terms of expressions of the
form    pr  m   j       for j 2   1::n  .

homework problems
problem 19.8.
an over-caffeinated sailor of tech dinghy wanders along seaside boulevard. in
each step, the sailor randomly moves one unit left or right with equal id203.

we let the sailor   s initial position be designated location zero, with successive
positions to the right labelled 1,2,. . . , and positions to the left labelled -1,-2,. . . .
let lt be the random variable giving the sailor   s location after t steps. before he
starts, the sailor is known to be at location zero, so

after one step, the sailor is equally likely to be at location 1 or (cid:0)1, so

(

1

0

if n d 0;
otherwise:

if n d   1;
otherwise:

1=2

0

pdfl0.n/ d
(

pdfl1.n/ d

(a) give the distributions pdflt for t d 2; 3; 4 by    lling in the table of probabil-
ities below, where omitted entries are 0. for each row, write all the nonzero entries
so they have the same denominator.

   mcs        2017/6/5     19:42     page 853     #861

19.5. linearity of expectation

853

-4

-3

-2

location
-1

initially
after 1 step
after 2 steps
after 3 steps
after 4 steps

1=2
?
?
?

?
?
?

?
?

?

0
1
0
?
?
?

1

2

3

4

1=2
?
?
?

?
?
?

?
?

?

(b) help the staff of the sailing pavilion locate the sailor by answering the follow-
ing questions. provide your derivations and reasoning.

(i) what is the    nal location of a t-step walk that moves right exactly i times?
(ii) how many different length-t walks are there that end at that location?
(iii) what is the id203 that the sailor ends at this location?
(iv) let bt wwd .lt c t /=2. conclude that bt has an unbiased binomial distribu-

tion.

problems for section 19.4

practice problems
problem 19.9.
bruce lee, on a movie that didn   t go public, is practicing by breaking 5 boards with
his    sts. he is able to break a board with id203 0.8   he is practicing with his
left    st, that   s why it   s not 1   and he breaks each board independently.
(a) what is the id203 that bruce breaks exactly 2 out of the 5 boards that are
placed before him?

(b) what is the id203 that bruce breaks at most 3 out of the 5 boards that are
placed before him?

(c) what is the expected number of boards bruce will break?

problem 19.10.
a news article reporting on the departure of a school of   cial from california to
alabama dryly commented that this move would raise the average iq in both states.
explain.

   mcs        2017/6/5     19:42     page 854     #862

854

chapter 19 random variables

figure 19.8 sample space tree for coin toss until two consecutive tails.

class problems
problem 19.11.
here   s a dice game with maximum payoff k: make three independent rolls of a fair
die, and if you roll a six

(cid:15) no times, then you lose 1 dollar;
(cid:15) exactly once, then you win 1 dollar;
(cid:15) exactly twice, then you win 2 dollars;
(cid:15) all three times, then you win k dollars.

for what value of k is this game fair?6

problem 19.12. (a) suppose we    ip a fair coin and let ntt be the number of    ips
until the    rst time two consecutive tails appear. what is ex  ntt  ?
hint: let d be the tree diagram for this process. explain why d can be described
by the tree in figure 19.8. use the law of total expectation 19.4.6.

(b) let nth be the number of    ips until a tail immediately followed by a head
comes up. what is ex  nth  ?

(c) suppose we now play a game:    ip a fair coin until either tt or th occurs.
you win if tt comes up    rst, and lose if th comes up    rst. since tt takes 50%

6this game is actually offered in casinos with k d 3, where it is called carnival dice.

hhttddd   mcs        2017/6/5     19:42     page 855     #863

19.5. linearity of expectation

855

longer on average to turn up, your opponent agrees that he has the advantage. so
you tell him you   re willing to play if you pay him $5 when he wins, and he pays
you with a mere 20% premium   that is $6   when you win.
if you do this, you   re sneakily taking advantage of your opponent   s untrained intu-
ition, since you   ve gotten him to agree to unfair odds. what is your expected pro   t
per game?

problem 19.13.
ben bitdiddle is asked to analyze a game in which a fair coin is tossed until the    rst
time a head turns up. if this head occurs on the nth toss, and n is odd, then he wins
$2n=n, but if n is even, he loses $2n=n. ben observes that the expected dollar win
from this game is
.1=2/(cid:1)2(cid:0).1=4/(cid:1)2c.1=8/(cid:1)8=3c(cid:1)(cid:1)(cid:1)  .1=2n/(cid:1)2n=n d 1(cid:0)1=2c1=3(cid:0)1=4c(cid:1)(cid:1)(cid:1)  1=n:
which is the alternating harmonic series   a series that converges to a de   nite real
number r > 0. since r > 0, ben concludes that it   s to his advantage to play this
game, but as usual, his shoot-from-the-hip analysis is off the mark. explain.

problem 19.14.
let t be a positive integer valued random variable such that

pdft .n/ d 1
an2 ;

a wwd x

1
n2 :

n2zc

where

(a) prove that ex  t    is in   nite.

p
(b) prove that ex  

t    is    nite.

exam problems
problem 19.15.
a record of who beat whom in a round-robin tournament can be described with a
tournament digraph, where the vertices correspond to players and there is an edge
hx! yi iff x beat y in their game. a ranking of the players is a path that includes
all the players. a tournament digraph may in general have one or more rankings.7

7it has a unique ranking iff it is a dag, see problem 10.10.

   mcs        2017/6/5     19:42     page 856     #864

856

chapter 19 random variables

figure 19.9 outcome tree for flipping until hhh

suppose we construct a random tournament digraph by letting each of the players
in a match be equally likely to win and having results of all the matches be mutually
independent. find a formula for the expected number of rankings in a random 10-
player tournament. conclude that there is a 10-vertex tournament digraph with
more than 7000 rankings.

this problem is an instance of the probabilistic method. it uses id203 to

prove the existence of an object without constructing it.

problem 19.16.
a coin with id203 p of    ipping heads and id203 q wwd 1 (cid:0) p of    ipping
tails is repeatedly    ipped until three consecutive heads occur. the outcome tree d
for this setup is illustrated in figure 19.9.

let e.s / be the expected number of    ips starting at the root of subtree s of d.

so we   re interested in    nding e.d/.

write a small system of equations involving e.d/; e.b/, and e.c / that could be

solved to    nd e.d/. you do not need to solve the equations.

problem 19.17.
a coin with id203 p of    ipping heads and id203 q wwd 1 (cid:0) p of    ipping
tails is repeatedly    ipped until two consecutive    ips match   that is, until hh or

h t h t h t d d d d c b    mcs        2017/6/5     19:42     page 857     #865

19.5. linearity of expectation

857

figure 19.10 outcome tree for flipping until hh or tt

tt occurs. the outcome tree a for this setup is illustrated in figure 19.10.

let e.t / be the expected number of    ips starting at the root of subtree t of a.

so we   re interested in    nding e.a/.

write a small system of equations involving e.a/; e.b/, and e.c / that could be

solved to    nd e.a/. you do not need to solve the equations.

homework problems
problem 19.18.
we are given a random vector of n distinct numbers. we then determine the maxi-
mum of these numbers using the following procedure:

pick the    rst number. call it the current maximum. go through the rest of the
vector (in order) and each time we come across a number (call it x) that exceeds
our current maximum, we update the current maximum with x.

what is the expected number of times we update the current maximum?
hint: let xi be the indicator variable for the event that the ith element in the

vector is larger than all the previous elements.

h t a c b c h t b t h    mcs        2017/6/5     19:42     page 858     #866

858

chapter 19 random variables

problems for section 19.5

practice problems
problem 19.19.
mit students sometimes delay doing laundry until they    nish their problem sets.
assume all random values described below are mutually independent.
(a) a busy student must complete 3 problem sets before doing laundry. each
problem set requires 1 day with id203 2=3 and 2 days with id203 1=3.
let b be the number of days a busy student delays laundry. what is ex  b  ?
example: if the    rst problem set requires 1 day and the second and third problem
sets each require 2 days, then the student delays for b d 5 days.
(b) a relaxed student rolls a fair, 6-sided die in the morning. if he rolls a 1, then he
does his laundry immediately (with zero days of delay). otherwise, he delays for
one day and repeats the experiment the following morning. let r be the number
of days a relaxed student delays laundry. what is ex  r  ?
example: if the student rolls a 2 the    rst morning, a 5 the second morning, and a 1
the third morning, then he delays for r d 2 days.
(c) before doing laundry, an unlucky student must recover from illness for a num-
ber of days equal to the product of the numbers rolled on two fair, 6-sided dice.
let u be the expected number of days an unlucky student delays laundry. what is
ex  u   ?
example: if the rolls are 5 and 3, then the student delays for u d 15 days.
(d) a student is busy with id203 1=2, relaxed with id203 1=3, and un-
lucky with id203 1=6. let d be the number of days the student delays laundry.
what is ex  d  ?

problem 19.20.
each math for computer science    nal exam will be graded according to a rigorous
procedure:

(cid:15) with id203 4=7 the exam is graded by a ta,with id203 2=7 it is
graded by a lecturer, and with id203 1=7, it is accidentally dropped
behind the radiator and arbitrarily given a score of 84.

   mcs        2017/6/5     19:42     page 859     #867

19.5. linearity of expectation

859

(cid:15) tas score an exam by scoring each problem individually and then taking the
sum.

    there are ten true/false questions worth 2 points each. for each, full
credit is given with id203 3=4, and no credit is given with proba-
bility 1=4.

    there are four questions worth 15 points each. for each, the score is
determined by rolling two fair dice, summing the results, and adding 3.
    the single 20 point question is awarded either 12 or 18 points with

equal id203.

(cid:15) lecturers score an exam by rolling a fair die twice, multiplying the results,
and then adding a    general impression   score.

    with id203 4=10, the general impression score is 40.
    with id203 3=10, the general impression score is 50.
    with id203 3=10, the general impression score is 60.

assume all random choices during the grading process are independent.
(a) what is the expected score on an exam graded by a ta?

(b) what is the expected score on an exam graded by a lecturer?

(c) what is the expected score on a math for computer science    nal exam?

class problems
problem 19.21.
a classroom has sixteen desks in a 4 (cid:2) 4 arrangement as shown below.

   mcs        2017/6/5     19:42     page 860     #868

860

chapter 19 random variables

if there is a girl in front, behind, to the left, or to the right of a boy, then the two
   irt. one student may be in multiple    irting couples; for example, a student in a
corner of the classroom can    irt with up to two others, while a student in the center
can    irt with as many as four others. suppose that desks are occupied mutually in-
dependently by boys and girls with equal id203. what is the expected number
of    irting couples? hint: linearity.

problem 19.22.
a literal is a propositional variable p or its negation p , where as usual    p     abbre-
viates    not.p /.    a 3-clause is an or of three literals from three different variables.
for example,

p1 or p2 or p3

is a 3-clause, but p1 or p1 or p2 is not because p1 appears twice. a 3-cnf is a
formula that is an and of 3-clauses. for example,

.p1 or p2 or p3/ and .p1 or p3 or p4/ and .p2 or p3 or p4/

is a 3-cnf.

suppose that g is a 3-cnf with seven 3-clauses. assign true/false values to the

variables in g independently and with equal id203.
(a) what is the id203 that the nth clause is true?

(b) what is the expected number of true 3-clauses in g?

(c) use the fact that the answer to part (b) is greater than six to conclude g must
be satis   able.

problem 19.23.
a literal is a propositional variable or its negation. a k-clause is an or of k literals,
with no variable occurring more than once in the clause. for example,

is a 4-clause, but

p or q or r or v;

v or q or x or v;

is not, since v appears twice.
let s be a set of n distinct k-clauses involving v variables. the variables in
different k-clauses may overlap or be completely different, so k   v   nk.

   mcs        2017/6/5     19:42     page 861     #869

19.5. linearity of expectation

861

a random assignment of true/false values will be made independently to each of
the v variables, with true and false assignments equally likely. write formulas in n,
k and v in answer to the    rst two parts below.
(a) what is the id203 that any particular k-clause in s is true under the ran-
dom assignment?
(b) what is the expected number of true k-clauses in s?
(c) a set of propositions is satis   able iff there is an assignment to the variables
that makes all of the propositions true. use your answer to part (b) to prove that if
n < 2k, then s is satis   able.

problem 19.24.
there are n students who are both taking math for computer science (mcs) and
introduction to signal processing (sp) this term. to make it easier on themselves,
the professors in charge of these classes have decided to randomly permute their
class lists and then assign students grades based on their rank in the permutation
(just as many students have suspected). assume the permutations are equally likely
and independent of each other. what is the expected number of students that have
in rank in sp that is higher by k than their rank in mcs?
hint: let xr be the indicator variable for the rth ranked student in cs having a
rank in sp of at least r c k.

problem 19.25.
a man has a set of n keys, one of which    ts the door to his apartment. he tries the
keys randomly until he    nds the key that    ts. let t be the number of times he tries
keys until he    nds the right key.
(a) suppose each time he tries a key that does not    t the door, he simply puts it
back. this means he might try the same ill-   tting key several times before he    nds
the right key. what is ex  t   ?
hint: mean time to failure.

now suppose he throws away each ill-   tting key that he tries. that is, he chooses
keys randomly from among those he has not yet tried. this way he is sure to    nd
the right key within n tries.
(b) if he hasn   t found the right key yet and there are m keys left, what is the
id203 that he will    nd the right key on the next try?

   mcs        2017/6/5     19:42     page 862     #870

862

chapter 19 random variables

(c) given that he did not    nd the right key on his    rst k (cid:0) 1 tries, verify that the
id203 that he does not    nd it on the kth trial is given by

pr(cid:2)t > k j t > k (cid:0) 1(cid:3) d n (cid:0) k

n (cid:0) .k (cid:0) 1/

:

(d) prove that

pr  t > k   d n (cid:0) k

n

:

(19.18)

hint: this can be argued directly, but if you don   t see how, induction using part (c)
will work.

(e) conclude that in this case

ex  t    d n c 1

2

:

problem 19.26.
justify each line of the following proof that if r1 and r2 are independent, then

ex  r1 (cid:1) r2   d ex  r1   (cid:1) ex  r2  :

   mcs        2017/6/5     19:42     page 863     #871

19.5. linearity of expectation

863

proof.

ex  r1 (cid:1) r2  

ri2range.ri /

r12range.r1/

r2range.r1(cid:1)r2/

d x
d x
d x
d x
d x
d x
d ex  r2   (cid:1) x

r12range.r1/

r12range.r1/

r12range.r1/

r12range.r1/

d ex  r2   (cid:1) ex  r1  :

r (cid:1) pr  r1 (cid:1) r2 d r  
r1r2 (cid:1) pr  r1 d r1 and r2 d r2  
x
x
0@r1 pr  r1 d r1   (cid:1) x

r22range.r2/

r22range.r2/

r1r2 (cid:1) pr  r1 d r1 and r2 d r2  
r1r2 (cid:1) pr  r1 d r1   (cid:1) pr  r2 d r2  

r2 pr  r2 d r2  

1a

r22range.r2/

r1 pr  r1 d r1   (cid:1) ex  r2  
r1 pr  r1 d r1  

(cid:4)

problem 19.27.
a gambler bets on the toss of a fair coin: if the toss is heads, the gambler gets back
the amount he bet along with an additional the amount equal to his bet. otherwise
he loses the amount bet. for example, the gambler bets $10 and wins, he gets back
$20 for a net pro   t of $10. if he loses, he gets back nothing for a net pro   t of
(cid:0)$10   that is, a net loss of $10.
gamblers often try to develop betting strategies to beat the odds is such a game.
a well known strategy of this kind is bet doubling, namely, bet $10 on red, and
keep doubling the bet until a red comes up. so if the gambler wins his    rst $10
bet, he stops playing and leaves with his $10 pro   t. if he loses the    rst bet, he bets
$20 on the second toss. now if the second toss is heads, he gets his $20 bet plus
$20 back and again walks away with a net pro   t of 20 (cid:0) 10 d $10. if he loses the
second toss, he bets $40 on the third toss, and so on.

you would think that any such strategy will be doomed: in a fair game your

   mcs        2017/6/5     19:42     page 864     #872

864

chapter 19 random variables

expected win by de   nition is zero, so no strategy should have nonzero expectation.
we can make this reasoning more precise as follows:

let wn be a random variable equal to the amount won in the nth
coin toss. so with the bet doubling strategy starting with a $10 bet,
w1 d   10 with equal id203. if the betting ends before the nth
bet, de   ne wn d 0. so w2 is zero with id203 1/2, is 10 with
id203 1/4, and is (cid:0)10 with id203 1/4. now letting w be the
amount won when the gambler stops betting, we have
w d w1 c w2 c (cid:1)(cid:1)(cid:1) c wn c (cid:1)(cid:1)(cid:1) :

furthermore, since each toss is fair,

ex  wn   d 0

for all n > 0. now by linearity of expectation, we have
ex  w    d ex  w1  cex  w2  c(cid:1)(cid:1)(cid:1)cex  wn  c(cid:1)(cid:1)(cid:1) d 0c0c(cid:1)(cid:1)(cid:1)c0c(cid:1)(cid:1)(cid:1) d 0;

(19.19)

con   rming that with fair tosses, the expected win is zero.

but wait a minute!

(a) explain why the gambler is certain to win eventually if he keeps betting.

(b) prove that when the gambler    nally wins a bet, his net pro   t is $10.

(c) since the gambler   s pro   t is always $10 when he wins, and he is certain to
win, his expected pro   t is also $10. that is

ex  w    d 10;

contradicting (19.19). so what   s wrong with the reasoning that led to the false
conclusion (19.19)?

homework problems
problem 19.28.
applying linearity of expectation to the binomial distribution fn;p immediately
yielded the identity 19.13:

ex  fn;p   wwd nx

k

kd0

!
pk.1 (cid:0) p/n(cid:0)k d pn:

 

n

k

(*)

   mcs        2017/6/5     19:42     page 865     #873

19.5. linearity of expectation

865

though it might seem daunting to prove this equation without appeal to linearity, it
is, after all, pretty similar to the binomial identity, and this connection leads to an
immediate alternative algebraic derivation.
(a) starting with the binomial identity for .x c y/n, prove that

x n.x c y/n(cid:0)1 d nx

k

kd0

!
xkyn(cid:0)k:

 

n

k

(**)

(b) now conclude equation (*).

problem 19.29.
short-term capital management (stcm) wants you to invest in a fund with the
following rules: you invest one million dollars in their forward looking internet
package (flip). each year, the money in your flip account will double or halve
with equal id203, and each year stcm will pay you a dividend equal to 10%
of the money in your account.
(a) what is the expected number of dollars in your account at the end of k years?
write a simple formula in terms of k.
hint: $1,000,000 is in the account the end of year zero. let xi be 2 or 1=2 de-
pending on what happens to your money at the end of the ith year. so the amount
of money in the account at the end of year one is x1 (cid:1) $1; 000; 000 and the dividend
paid is .1=10/x1 (cid:1) $1; 000; 000.
(b) give a closed form numerical expression for the expected total number of
dollars in dividend payments you will receive by the end of the 10th year. you do
not need to evaluate your expression.
(c) adam smith does his own analysis of your account. he lets yi d 1 if the
money doubles at the end of year i and yi d (cid:0)1 otherwise. then the money in
your account after year k is

1062y12y2 (cid:1)(cid:1)(cid:1) 2yk d 1062y1cy2c(cid:1)(cid:1)(cid:1)cyk :

but ex  yi    d 0, so

2ex  y1cy2c(cid:1)(cid:1)(cid:1)cyk    d 2ex  y1  cex  y2  c(cid:1)(cid:1)(cid:1)cex  yk    d 2k(cid:1)0 d 20 d 1:

in other words, the expected amount of money in your account forever remains the
same as your original investment.
what is wrong with adam smith   s analysis?

   mcs        2017/6/5     19:42     page 866     #874

866

chapter 19 random variables

problem 19.30.
a coin will be    ipped repeatedly until the sequence tth (tail/tail/head) comes
up. successive    ips are independent, and the coin has id203 p of coming up
heads. let ntth be the number of coin    ips until tth    rst appears. what value of
p minimizes ex  ntth  ?

problem 19.31.
(a true story from world war two.)

the army needs to test n soldiers for a disease. there is a blood test that accu-
rately determines when a blood sample contains blood from a diseased soldier. the
army presumes, based on experience, that the fraction of soldiers with the disease
is approximately equal to some small number p.

approach (1) is to test blood from each soldier individually; this requires n tests.
approach (2) is to randomly group the soldiers into g groups of k soldiers, where
n d gk. for each group, blend the k blood samples of the people in the group,
and test the blended sample. if the group-blend is free of the disease, we are done
with that group after one test. if the group-blend tests positive for the disease, then
someone in the group has the disease, and we to test all the people in the group for
a total of k c 1 tests on that group.
since the groups are chosen randomly, each soldier in the group has the disease
with id203 p, and it is safe to assume that whether one soldier has the disease
is independent of whether the others do.
(a) what is the expected number of tests in approach (2) as a function of the
number of soldiers n, the disease fraction p, and the group size k?

p
(b) show how to choose k so that the expected number of tests using approach (2)
p. hint: since p is small, you may assume that .1 (cid:0) p/k (cid:25) 1
is approximately n
and ln.1 (cid:0) p/ (cid:25) (cid:0)p.
(c) what fraction of the work does approach (2) expect to save over approach
(1) in a million-strong army of whom approximately 1% are diseased?

(d) can you come up with a better scheme by using multiple levels of grouping,
that is, groups of groups?

problem 19.32.
a wheel-of-fortune has the numbers from 1 to 2n arranged in a circle. the wheel
has a spinner, and a spin randomly determines the two numbers at the opposite ends

   mcs        2017/6/5     19:42     page 867     #875

19.5. linearity of expectation

867

of the spinner. how would you arrange the numbers on the wheel to maximize the
expected value of:
(a) the sum of the numbers chosen? what is this maximum?

(b) the product of the numbers chosen? what is this maximum?
hint: for part (b), verify that the sum of the products of numbers oppposite each
other is maximized when successive integers are on the opposite ends of the spin-
ner, that is, 1 is opposite 2, 3 is opposite 4, 5 is opposite 6, . . . .

problem 19.33.
let r and s be independent random variables, and f and g be any functions such
that domain.f / d codomain.r/ and domain.g/ d codomain.s /. prove that f .r/
and g.s / are also independent random variables.
hint: the event   f .r/ d a   is the disjoint union of all the events   r d r   for r
such that f .r/ d a.

problem 19.34.
peeta bakes between 1 and 2n loaves of bread to sell every day. each day he rolls
a fair, n-sided die to get a number from 1 to n, then    ips a fair coin. if the coin is
heads, he bakes m loaves of bread , where m is the number on the die that day, and
if the coin is tails, he bakes 2m loaves.
(a) for any positive integer k   2n, what is the id203 that peeta will make
k loaves of bread on any given day?
hint: express your solution by cases.

(b) what is the expected number of loaves that peeta would bake on any given
day?

(c) continuing this process, peeta bakes bread every day for 30 days. what is the
expected total number of loaves that peeta would bake?

exam problems
problem 19.35.
a box initially contains n balls, all colored black. a ball is drawn from the box at
random.

(cid:15) if the drawn ball is black, then a biased coin with id203, p > 0, of

   mcs        2017/6/5     19:42     page 868     #876

868

chapter 19 random variables

coming up heads is    ipped. if the coin comes up heads, a white ball is put
into the box; otherwise the black ball is returned to the box.
(cid:15) if the drawn ball is white, then it is returned to the box.
this process is repeated until the box contains n white balls.
let d be the number of balls drawn until the process ends with the box full of
white balls. prove that ex  d   d nhn=p, where hn is the nth harmonic number.
hint: let di be the number of draws after the ith white ball until the draw when
the .i c 1/st white ball is put into the box.

problem 19.36.
a gambler bets $10 on    red    at a roulette table (the odds of red are 18/38, slightly
less than even) to win $10. if he wins, he gets back twice the amount of his bet,
and he quits. otherwise, he doubles his previous bet and continues.
for example, if he loses his    rst two bets but wins his third bet, the total spent
on his three bets is 10 c 20 c 40 dollars, but he gets back 2 (cid:1) 40 dollars after his
win on the third bet, for a net pro   t of $10.
(a) what is the expected number of bets the gambler makes before he wins?

(b) what is his id203 of winning?

(c) what is his expected    nal pro   t (amount won minus amount lost)?

(d) you can beat a biased game by bet doubling, but bet doubling is not feasible
because it requires an in   nite bankroll. verify this by proving that the expected size
of the gambler   s last bet is in   nite.

problem 19.37.
six pairs of cards with ranks 1   6 are shuf   ed and laid out in a row, for example,

1 2 3 3 4 6 1 4 5 5 2 6

in this case, there are two adjacent pairs with the same value, the two 3   s and the
two 5   s. what is the expected number of adjacent pairs with the same value?

   mcs        2017/6/5     19:42     page 869     #877

19.5. linearity of expectation

869

problem 19.38.
there are six kinds of cards, three of each kind, for a total of eighteen cards. the
cards are randonly shuf   ed and laid out in a row, for example,

1 2 5 5 5 1 4 6 2 6 6 2 1 4 3 3 3 4

in this case, there are two adjacent triples of the same kind, the three 3   s and the
three 5   s.
(a) derive a formula for the id203 that the 4th, 5th, and 6th consecutive cards
will be the same kind   that is, all 1   s or all 2   s or. . . all 6   s?
(b) let p wwd pr  4th, 5th and 6th cards match     that is, p is the correct answer to
part (a). write a simple formula for the expected number of matching triples in
terms of p.

   mcs        2017/6/5     19:42     page 870     #878

20

   mcs        2017/6/5     19:42     page 871     #879

deviation from the mean
in the previous chapter, we took it for granted that expectation is useful and de-
veloped a bunch of techniques for calculating expected values. but why should we
care about this value? after all, a random variable may never take a value anywhere
near its expectation.

the most important reason to care about the mean value comes from its con-
nection to estimation by sampling. for example, suppose we want to estimate the
average age, income, family size, or other measure of a population. to do this,
we determine a random process for selecting people   say, throwing darts at cen-
sus lists. this process makes the selected person   s age, income, and so on into a
random variable whose mean equals the actual average age or income of the pop-
ulation. so, we can select a random sample of people and calculate the average
of people in the sample to estimate the true average in the whole population. but
when we make an estimate by repeated sampling, we need to know how much con-
   dence we should have that our estimate is ok, and how large a sample is needed
to reach a given con   dence level. the issue is fundamental to all experimental
science. because of random errors   noise   repeated measurements of the same
quantity rarely come out exactly the same. determining how much con   dence
to put in experimental measurements is a fundamental and universal scienti   c is-
sue. technically, judging sampling or measurement accuracy reduces to    nding the
id203 that an estimate deviates by a given amount from its expected value.

another aspect of this issue comes up in engineering. when designing a sea wall,
you need to know how strong to make it to withstand tsunamis for, say, at least a
century. if you   re assembling a computer network, you might need to know how
many component failures it should tolerate to likely operate without maintenance
for at least a month. if your business is insurance, you need to know how large a
   nancial reserve to maintain to be nearly certain of paying bene   ts for, say, the next
three decades. technically, such questions come down to    nding the id203 of
extreme deviations from the mean.

this issue of deviation from the mean is the focus of this chapter.

20.1 markov   s theorem

markov   s theorem gives a generally coarse estimate of the id203 that a random
variable takes a value much larger than its mean. it is an almost trivial result by

   mcs        2017/6/5     19:42     page 872     #880

872

chapter 20 deviation from the mean

itself, but it actually leads fairly directly to much stronger results.

the idea behind markov   s theorem can be explained by considering the quantity
known as intelligence quotient, iq, which remains in wide use despite doubts about
its legitimacy. iq was devised so that its average measurement would be 100. this
immediately implies that at most 1/3 of the population can have an iq of 300 or
more, because if more than a third had an iq of 300, then the average would have to
be more than .1=3/(cid:1) 300 d 100. so, the id203 that a randomly chosen person
has an iq of 300 or more is at most 1/3. by the same logic, we can also conclude
that at most 2/3 of the population can have an iq of 150 or more.

of course, these are not very strong conclusions. no iq of over 300 has ever
been recorded; and while many iq   s of over 150 have been recorded, the fraction
of the population that actually has an iq that high is very much smaller than 2/3.
but though these conclusions are weak, we reached them using just the fact that the
average iq is 100   along with another fact we took for granted, that iq is never
negative. using only these facts, we can   t derive smaller fractions, because there
are nonnegative random variables with mean 100 that achieve these fractions. for
example, if we choose a random variable equal to 300 with id203 1/3 and 0
with id203 2/3, then its mean is 100, and the id203 of a value of 300 or
more really is 1/3.
theorem 20.1.1 (markov   s theorem). if r is a nonnegative random variable, then
for all x > 0

pr  r (cid:21) x     ex  r  

x

:

(20.1)

proof. let y vary over the range of r. then for any x > 0

ex  r   wwdx
(cid:21)x

y

y(cid:21)x

d x pr  r (cid:21) x  ;

y pr  r d y  

y pr  r d y   (cid:21)x

y(cid:21)x

x pr  r d y   d x

x

y(cid:21)x

pr  r d y  

where the    rst inequality follows from the fact that r (cid:21) 0.
dividing the    rst and last expressions in (20.2) by x gives the desired result. (cid:4)
our focus is deviation from the mean, so it   s useful to rephrase markov   s theo-
rem this way:
corollary 20.1.2. if r is a nonnegative random variable, then for all c (cid:21) 1

(20.2)

pr  r (cid:21) c (cid:1) ex  r        1

c

:

(20.3)

   mcs        2017/6/5     19:42     page 873     #881

20.1. markov   s theorem

873

this corollary follows immediately from markov   s theorem(20.1.1) by letting
x be c (cid:1) ex  r  .
20.1.1 applying markov   s theorem
let   s go back to the hat-check problem of section 19.5.2. now we ask what
the id203 is that x or more men get the right hat, this is, what the value of
pr  g (cid:21) x   is.
we can compute an upper bound with markov   s theorem. since we know
ex  g   d 1, markov   s theorem implies

pr  g (cid:21) x     ex  g  

x

d 1
x

:

for example, there is no better than a 20% chance that 5 men get the right hat,
regardless of the number of people at the dinner party.

the chinese appetizer problem is similar to the hat-check problem. in this
case, n people are eating different appetizers arranged on a circular, rotating chi-
nese banquet tray. someone then spins the tray so that each person receives a
random appetizer. what is the id203 that everyone gets the same appetizer as
before?

there are n equally likely orientations for the tray after it stops spinning. ev-
eryone gets the right appetizer in just one of these n orientations. therefore, the
correct answer is 1=n.
but what id203 do we get from markov   s theorem? let the random vari-
able r be the number of people that get the right appetizer. then of course ex  r   d
1, so applying markov   s theorem, we    nd:

pr  r (cid:21) n     ex  r  

n

d 1
n

:

so for the chinese appetizer problem, markov   s theorem is precisely right!

unfortunately, markov   s theorem is not always so accurate. for example, it
gives the same 1=n upper limit for the id203 that everyone gets their own hat
back in the hat-check problem, where the id203 is actually 1=.n  /. so for
hat-check, markov   s theorem gives a id203 bound that is way too large.

20.1.2 markov   s theorem for bounded variables
suppose we learn that the average iq among mit students is 150 (which is not
true, by the way). what can we say about the id203 that an mit student has
an iq of more than 200? markov   s theorem immediately tells us that no more than
150=200 or 3=4 of the students can have such a high iq. here, we simply applied

   mcs        2017/6/5     19:42     page 874     #882

874

chapter 20 deviation from the mean

markov   s theorem to the random variable r equal to the iq of a random mit
student to conclude:

pr  r > 200     ex  r  

200

d 150
200

d 3
4

:

but let   s observe an additional fact (which may be true): no mit student has an
iq less than 100. this means that if we let t wwd r (cid:0) 100, then t is nonnegative
and ex  t    d 50, so we can apply markov   s theorem to t and conclude:

pr  r > 200   d pr  t > 100     ex  t   

100

d 50
100

d 1
2

:

so only half, not 3/4, of the students can be as amazing as they think they are. a
bit of a relief!
in fact, we can get better bounds applying markov   s theorem to r(cid:0) b instead of
r for any lower bound b on r (see problem 20.3). similarly, if we have any upper
bound u on a random variable s, then u(cid:0) s will be a nonnegative random variable,
and applying markov   s theorem to u (cid:0) s will allow us to bound the id203
that s is much less than its expectation.

20.2 chebyshev   s theorem

we   ve seen that markov   s theorem can give a better bound when applied to r (cid:0) b
rather than r. more generally, a good trick for getting stronger bounds on a ran-
dom variable r out of markov   s theorem is to apply the theorem to some cleverly
chosen function of r. choosing functions that are powers of the absolute value of
r turns out to be especially useful. in particular, since jrjz is nonnegative for any
real number z, markov   s inequality also applies to the event   jrjz (cid:21) xz  . but for
positive x; z > 0 this event is equivalent to the event   jrj (cid:21) x   for , so we have:
lemma 20.2.1. for any random variable r and positive real numbers x; z,

pr  jrj (cid:21) x     ex  jrjz  

:

xz

rephrasing (20.2.1) in terms of jr (cid:0) ex  r  j, the random variable that measures
r   s deviation from its mean, we get

pr  jr (cid:0) ex  r  j (cid:21) x     ex  .jr (cid:0) ex  r  j/z  

xz

:

(20.4)

   mcs        2017/6/5     19:42     page 875     #883

20.2. chebyshev   s theorem

875

when z is positive and even, .r (cid:0) ex  r  /z is nonnegative, so the absolute value
on the right-hand side of the inequality (20.4) is redundant. the case when z d 2
turns out to be so important that the numerator of the right-hand side has been given
a name:
de   nition 20.2.2. the variance of a random variable r is:

var  r   wwd ex(cid:2).r (cid:0) ex  r  /2(cid:3) :

variance is also known as mean square deviation.
the restatement of (20.4) for z d 2 is known as chebyshev   s theorem.1
theorem 20.2.3 (chebyshev). let r be a random variable and x 2 rc. then

pr  jr (cid:0) ex  r  j (cid:21) x     var  r  
x2

:

the expression ex  .r (cid:0) ex  r  /2   for variance is a bit cryptic; the best approach
is to work through it from the inside out. the innermost expression r (cid:0) ex  r   is
precisely the deviation of r above its mean. squaring this, we obtain .r(cid:0)ex  r  /2.
this is a random variable that is near 0 when r is close to the mean and is a large
positive number when r deviates far above or below the mean. so if r is always
close to the mean, then the variance will be small. if r is often far from the mean,
then the variance will be large.

20.2.1 variance in two gambling games
the relevance of variance is apparent when we compare the following two gam-
bling games.

game a: we win $2 with id203 2=3 and lose $1 with id203 1=3.
game b: we win $1002 with id203 2=3 and lose $2001 with id203

1=3.

which game is better    nancially? we have the same id203, 2/3, of winning
each game, but that does not tell the whole story. what about the expected return for
each game? let random variables a and b be the payoffs for the two games. for
example, a is 2 with id203 2/3 and -1 with id203 1/3. we can compute
the expected payoff for each game as follows:

ex  a   d 2 (cid:1) 2

c .(cid:0)1/ (cid:1) 1
c .(cid:0)2001/ (cid:1) 1

3

3

d 1;
d 1:

3

ex  b   d 1002 (cid:1) 2

3

1there are chebyshev theorems in several other disciplines, but theorem 20.2.3 is the only one

we   ll refer to.

   mcs        2017/6/5     19:42     page 876     #884

876

chapter 20 deviation from the mean

the expected payoff is the same for both games, but the games are very different.
this difference is not apparent in their expected value, but is captured by variance.
we can compute the var  a   by working    from the inside out    as follows:

a (cid:0) ex  a   d (cid:26) 1
.a (cid:0) ex  a  /2 d (cid:26) 1 with id203 2

with id203 2
(cid:0)2 with id203 1
3

3

3
4 with id203 1
3

similarly, we have for var  b  :

ex  .a (cid:0) ex  a  /2   d 1 (cid:1) 2
var  a   d 2:

3

c 4 (cid:1) 1

3

b (cid:0) ex  b   d (cid:26) 1001
.b (cid:0) ex  b  /2 d (cid:26) 1; 002; 001 with id203 2

with id203 2
(cid:0)2002 with id203 1
3

3

ex  .b (cid:0) ex  b  /2   d 1; 002; 001 (cid:1) 2
var  b   d 2; 004; 002:

3

3
4; 008; 004 with id203 1
3
c 4; 008; 004 (cid:1) 1

3

the variance of game a is 2 and the variance of game b is more than two
million! intuitively, this means that the payoff in game a is usually close to the
expected value of $1, but the payoff in game b can deviate very far from this
expected value.

high variance is often associated with high risk. for example, in ten rounds of
game a, we expect to make $10, but could conceivably lose $10 instead. on the
other hand, in ten rounds of game b, we also expect to make $10, but could actually
lose more than $20,000!

20.2.2 standard deviation
in game b above, the deviation from the mean is 1001 in one outcome and -2002
in the other. but the variance is a whopping 2,004,002. the happens because the
   units    of variance are wrong: if the random variable is in dollars, then the expec-
tation is also in dollars, but the variance is in square dollars. for this reason, people
often describe random variables using standard deviation instead of variance.
de   nition 20.2.4. the standard deviation (cid:27)r of a random variable r is the square
root of the variance:

(cid:27)r wwdpvar  r   dq

ex  .r (cid:0) ex  r  /2  :

   mcs        2017/6/5     19:42     page 877     #885

20.2. chebyshev   s theorem

877

figure 20.1 the standard deviation of a distribution indicates how wide the
   main part    of it is.

so the standard deviation is the square root of the mean square deviation, or
the root mean square for short. it has the same units   dollars in our example   as
the original random variable and as the mean. intuitively, it measures the average
deviation from the mean, since we can think of the square root on the outside as
canceling the square on the inside.
example 20.2.5. the standard deviation of the payoff in game b is:

(cid:27)b dpvar  b   dp

2; 004; 002 (cid:25) 1416:

the random variable b actually deviates from the mean by either positive 1001
or negative 2002, so the standard deviation of 1416 describes this situation more
closely than the value in the millions of the variance.

for bell-shaped distributions like the one illustrated in figure 20.1, the standard
deviation measures the    width    of the interval in which values are most likely to
fall. this can be more clearly explained by rephrasing chebyshev   s theorem in
terms of standard deviation, which we can do by substituting x d c(cid:27)r in (20.1):
corollary 20.2.6. let r be a random variable, and let c be a positive real number.

pr  jr (cid:0) ex  r  j (cid:21) c(cid:27)r     1
c2 :

(20.5)

now we see explicitly how the    likely    values of r are clustered in an o.(cid:27)r/-
sized region around ex  r  , con   rming that the standard deviation measures how
spread out the distribution of r is around its mean.

meano.  /   mcs        2017/6/5     19:42     page 878     #886

878

chapter 20 deviation from the mean

the iq example
the standard standard deviation of iq   s regularly turns out to be about 15 even
across different populations. this additional fact along with the national average
iq being 100 allows a better determination of the occurrence of iq   s of 300 or
more.
let the random variable r be the iq of a random person. so ex  r   d 100,
(cid:27)r d 15 and r is nonnegative. we want to compute pr  r (cid:21) 300  .
we have already seen that markov   s theorem 20.1.1 gives a coarse bound, namely,

pr  r (cid:21) 300     1

3

:

now we apply chebyshev   s theorem to the same problem:

pr  r (cid:21) 300   d pr  jr (cid:0) 100j (cid:21) 200     var  r  
2002

d 152
2002

(cid:25) 1
178

:

so chebyshev   s theorem implies that at most one person in 178 has an iq of 300
or more. we have gotten a much tighter bound using additional information   the
variance of r   than we could get knowing only the expectation.

20.3 properties of variance

variance is the average of the square of the distance from the mean. for this rea-
son, variance is sometimes called the    mean square deviation.    then we take its
square root to get the standard deviation   which in turn is called    root mean square
deviation.   
but why bother squaring? why not study the actual distance from the mean,
namely, the absolute value of r (cid:0) ex  r  , instead of its root mean square? the
answer is that variance and standard deviation have useful properties that make
them much more important in id203 theory than average absolute deviation.
in this section, we   ll describe some of those properties. in the next section, we   ll
see why these properties are important.

20.3.1 a formula for variance
applying linearity of expectation to the formula for variance yields a convenient
alternative formula.
lemma 20.3.1.

var  r   d ex  r2   (cid:0) ex2  r  ;

   mcs        2017/6/5     19:42     page 879     #887

20.3. properties of variance

for any random variable r.

here we use the notation ex2  r   as shorthand for .ex  r  /2.
proof. let (cid:22) d ex  r  . then

879

var  r   d ex  .r (cid:0) ex  r  /2  

d ex  .r (cid:0) (cid:22)/2  
d ex  r2 (cid:0) 2(cid:22)r c (cid:22)2  
d ex  r2   (cid:0) 2(cid:22) ex  r   c (cid:22)2
d ex  r2   (cid:0) 2(cid:22)2 c (cid:22)2
d ex  r2   (cid:0) (cid:22)2
d ex  r2   (cid:0) ex2  r  :

(def 20.2.2 of variance)
(def of (cid:22))

(linearity of expectation)
(def of (cid:22))

(def of (cid:22))

(cid:4)

a simple and very useful formula for the variance of an indicator variable is an

immediate consequence.
corollary 20.3.2. if b is a bernoulli variable where p wwd pr  b d 1   and q wwd
1 (cid:0) p, then

(20.6)
proof. by lemma 19.4.2, ex  b   d p. but b only takes values 0 and 1, so b 2 d b
(cid:4)
and equation (20.6) follows immediately from lemma 20.3.1.

var  b   d p (cid:0) p2 d pq:

20.3.2 variance of time to failure
according to section 19.4.6, the mean time to failure is 1=p for a process that fails
during any given hour with id203 p. what about the variance?

by lemma 20.3.1,

var  c    d ex  c 2   (cid:0) .1=p/2

so all we need is a formula for ex  c 2  .

now ex  c 2   wwdp

(20.7)
i(cid:21)1 i 2qi(cid:0)1p by de   nition, and we could evaluate this series
a simpler alternative appeals to conditional expectation much as we did in sec-
tion 19.4.6 to derive the formula for mean time to failure. namely, the expected

using methods from chapter 14 or 16.

   mcs        2017/6/5     19:42     page 880     #888

880

chapter 20 deviation from the mean

value of c 2 is the id203 p of failure in the    rst hour times 12, plus the prob-
ability q of non-failure in the    rst hour times the expected value of .c c 1/2. so

 
  2

 
ex  c 2   d p (cid:1) 12 c q ex  .c c 1/2  
 
c 1
c 1

ex  c 2   c 2
d p c q
 
d p c q ex  c 2   c q
c 1
d p2 c q.2 c p/

  2

p ex  c 2   d p c q

p

p

p

and

;

so

ex  c 2   d 2 (cid:0) p

p2

combining this with (20.7) proves

p

lemma 20.3.3. if failures occur with id203 p independently at each step, and
c is the number of steps until the    rst failure,2 then

var  c    d q
p2 :

(20.8)

20.3.3 dealing with constants
it helps to know how to calculate the variance of ar c b:
theorem 20.3.4. [square multiple rule for variance] let r be a random variable
and a a constant. then

var  ar   d a2 var  r  :

(20.9)

proof. beginning with the de   nition of variance and repeatedly applying linearity

2that is, c has the geometric distribution with parameter p according to de   nition 19.4.7.

   mcs        2017/6/5     19:42     page 881     #889

20.3. properties of variance

of expectation, we have:

881

var  ar   wwd ex  .ar (cid:0) ex  ar  /2  

d ex  .ar/2 (cid:0) 2ar ex  ar   c ex2  ar    
d ex  .ar/2   (cid:0) ex  2ar ex  ar     c ex2  ar  
d a2 ex  r2   (cid:0) 2 ex  ar   ex  ar   c ex2  ar  
d a2 ex  r2   (cid:0) a2 ex2  r  

d a2(cid:0)ex  r2   (cid:0) ex2  r  (cid:1)

d a2 var  r  

(lemma 20.3.1)

(cid:4)

it   s even simpler to prove that adding a constant does not change the variance, as

the reader can verify:

theorem 20.3.5. let r be a random variable, and b a constant. then

var  r c b   d var  r  :

(20.10)

recalling that the standard deviation is the square root of variance, this implies
that the standard deviation of ar c b is simply jaj times the standard deviation of
r:

corollary 20.3.6.

(cid:27).arcb/ d jaj (cid:27)r:

20.3.4 variance of a sum
in general, the variance of a sum is not equal to the sum of the variances, but
variances do add for independent variables. in fact, mutual independence is not
necessary: pairwise independence will do. this is useful to know because there are
some important situations, such as birthday matching in section 17.4, that involve
variables that are pairwise independent but not mutually independent.

theorem 20.3.7. if r and s are independent random variables, then

var  r c s    d var  r   c var  s   :

(20.11)
proof. we may assume that ex  r   d 0, since we could always replace r by
r (cid:0) ex  r   in equation (20.11); likewise for s. this substitution preserves the
independence of the variables, and by theorem 20.3.5, does not change the vari-
ances.

   mcs        2017/6/5     19:42     page 882     #890

882

chapter 20 deviation from the mean

(20.12)

(20.13)

but for any variable t with expectation zero, we have var  t    d ex  t 2  , so we
need only prove

ex  .r c s /2   d ex  r2   c ex  s 2  :

but (20.12) follows from linearity of expectation and the fact that

ex  rs    d ex  r   ex  s   

since r and s are independent:

ex  .r c s /2   d ex  r2 c 2rs c s 2  

d ex  r2   c 2 ex  rs    c ex  s 2  
d ex  r2   c 2 ex  r   ex  s    c ex  s 2  
d ex  r2   c 2 (cid:1) 0 (cid:1) 0 c ex  s 2  
d ex  r2   c ex  s 2  :

(by (20.13))

(cid:4)

it   s easy to see that additivity of variance does not generally hold for variables
that are not independent. for example, if r d s, then equation (20.11) becomes
var  rc r   d var  r  cvar  r  . by the square multiple rule, theorem 20.3.4, this
holds iff 4 var  r   d 2 var  r  , which implies that var  r   d 0. so equation (20.11)
fails when r d s and r has nonzero variance.
the proof of theorem 20.3.7 carries over to the sum of any    nite number of

variables (problem 20.18), so we have:

theorem 20.3.8. [pairwise independent additivity of variance] if r1; r2; : : : ; rn
are pairwise independent random variables, then

an .n; p/-binomial distribution. we know that j d pn

var  r1 c r2 c (cid:1)(cid:1)(cid:1) c rn   d var  r1   c var  r2   c (cid:1)(cid:1)(cid:1) c var  rn  :
now we have a simple way of computing the variance of a variable j that has
kd1 ik where the ik are
mutually independent indicator variables with pr  ik d 1   d p. the variance of
each ik is pq by corollary 20.3.2, so by linearity of variance, we have
lemma 20.3.9 (variance of the binomial distribution). if j has the .n; p/-binomial
distribution, then

(20.14)

var  j    d n var  ik   d npq:

(20.15)

   mcs        2017/6/5     19:42     page 883     #891

20.3. properties of variance

883

20.3.5 matching birthdays
we saw in section 17.4 that in a class of 95 students, it is virtually certain that
at least one pair of students will have the same birthday. in fact, several pairs of
students are likely to have the same birthday. how many matched birthdays should
we expect, and how likely are we to see that many matches in a random group of
students?

having matching birthdays for different pairs of students are not mutually inde-
pendent events. if alice matches bob and alice matches carol, it   s certain that bob
and carol match as well! so the events that various pairs of students have matching
birthdays are not even three-way independent.

but knowing that alice   s birthday matches bob   s tells us nothing about who
carol matches. this means that the events that a pair of people have matching
birthdays are pairwise independent (see problem 19.2). so pairwise independent
additivity of variance, theorem 20.3.8, will allow us to calculate the variance of
the number of birthday pairs and then apply chebyshev   s bound to estimate the
liklihood of seeing some given number of matching pairs.

in particular, suppose there are n students and d days in the year, and let m be the
number of pairs of students with matching birthdays. namely, let b1; b2; : : : ; bn
be the birthdays of n independently chosen people, and let ei;j be the indicator
variable for the event that the ith and j th people chosen have the same birthdays,
that is, the event   bi d bj   . so in our id203 model, the bi   s are mutually
independent variables, and the ei;j    s are pairwise independent. also, the expecta-
tions of ei;j for i    j equals the id203 that bi d bj , namely, 1=d.
now the number m of matching pairs of birthdays among the n choices is simply

the sum of the ei;j    s:

(20.16)

linearity of expectation make it easy to calculate the expected number of pairs of
students with matching birthdays.

ei;j :

1 i <j n

m d x
35 d x

ei;j

1 i <j n

24 x

1 i <j n

 

!

n

2

(cid:1) 1
d

:

ex  ei;j    d

ex  m    d ex

   mcs        2017/6/5     19:42     page 884     #892

884

chapter 20 deviation from the mean

similarly, pairwise independence makes it easy to calculate the variance.

35

24 x
var  m    d var
d x
!
 
 

1 i <j n
(cid:1) 1
d

n

d

2

ei;j

1 i <j n

var  ei;j   

1 (cid:0) 1

d

 

(theorem 20.3.8)

:

(corollary 20.3.2)

in particular, for a class of n d 95 students with d d 365 possible birthdays, we
have ex  m    (cid:25) 12:23 and var  m    (cid:25) 12:23.1(cid:0)1=365/ < 12:2. so by chebyshev   s
theorem

pr  jm (cid:0) ex  m   j (cid:21) x   <

12:2
x2 :

letting x d 7, we conclude that there is a better than 75% chance that in a class of
95 students, the number of pairs of students with the same birthday will be within
7 of 12.23, that is, between 6 and 19.

20.4 estimation by random sampling

massachusetts democrats were astonished in 2010 when their early polls of sample
voters showed republican scott brown was favored by a majority of voters and so
would win the special election to    ll the senate seat that the late democrat teddy
kennedy had occupied for over 40 years. based on their poll results, they mounted
an intense, but ultimately unsuccessful, effort to save the seat for their party.

20.4.1 a voter poll
suppose at some time before the election that p was the fraction of voters favoring
scott brown. we want to estimate this unknown fraction p. suppose we have
some random process for selecting voters from registration lists that selects each
voter with equal id203. we can de   ne an indicator variable k by the rule that
k d 1 if the random voter most prefers brown, and k d 0 otherwise.
now to estimate p, we take a large number n of random choices of voters3 and
3we   re choosing a random voter n times with replacement. we don   t remove a chosen voter from
the set of voters eligible to be chosen later; so we might choose the same voter more than once!
we would get a slightly better estimate if we required n different people to be chosen, but doing so
complicates both the selection process and its analysis for little gain.

   mcs        2017/6/5     19:42     page 885     #893

20.4. estimation by random sampling

885

count the fraction who favor brown. that is, we de   ne variables k1; k2; : : : ,
where ki is interpreted to be the indicator variable for the event that the ith cho-
sen voter prefers brown. since our choices are made independently, the ki   s are
independent. so formally, we model our estimation process by assuming we have
mutually independent indicator variables k1; k2; : : : ; each with the same proba-
bility p of being equal to 1. now let sn be their sum, that is,

sn wwd nx

id1

ki :

(20.17)

the variable sn=n describes the fraction of sampled voters who favor scott brown.
most people intuitively, and correctly, expect this sample fraction to give a useful
approximation to the unknown fraction p.

so we will use the sample value sn=n as our statistical estimate of p. we know
that sn has a binomial distribution with parameters n and p; we can choose n, but
p is unknown.

how large a sample?
suppose we want our estimate to be within 0:04 of the fraction p at least 95% of
the time. this means we want

          sn

n

pr

           0:04

(cid:21) (cid:21) 0:95 :

(cid:0) p

(20.18)

so we   d better determine the number n of times we must poll voters so that in-
equality (20.18) will hold. chebyshev   s theorem offers a simple way to determine
such a n.
sn is binomially distributed. equation (20.15), combined with the fact that pq
is maximized when p d q, that is, when p d 1=2 (check for yourself!), gives

var  sn   d n.pq/   n (cid:1) 1

d n
4

:

(20.19)

4

next, we bound the variance of sn=n:

  sn

n

var

(cid:21) d  1
   1

n

 2
 2 n

4

n
d 1
4n

var  sn  

(square multiple rule for variance (20.9))

(by (20.19))

(20.20)

   mcs        2017/6/5     19:42     page 886     #894

886

chapter 20 deviation from the mean

using chebyshev   s bound and (20.20) we have:
 

(cid:21)   var  sn=n  

         (cid:21) 0:04

          sn

(cid:0) p

.0:04/2

pr

n

1

4n.0:04/2

d 156:25

n

(20.21)

to make our our estimate with 95% con   dence, we want the right-hand side

of (20.21) to be at most 1/20. so we choose n so that

that is,

156:25

n

  1
20

;

n (cid:21) 3; 125:

section 20.6.2 describes how to get tighter estimates of the tails of binomial
distributions that lead to a bound on n that is about four times smaller than the
one above. but working through this example using only the variance illustrates
an approach to estimation that is applicable to arbitrary random variables, not just
binomial variables.

20.4.2 pairwise independent sampling
the reasoning we used above to analyze voter polling and matching birthdays is
very similar. we summarize it in slightly more general form with a basic result
called the pairwise independent sampling theorem. in particular, we do not need
to restrict ourselves to sums of zero-one valued variables, or to variables with the
same distribution. for simplicity, we state the theorem for pairwise independent
variables with possibly different distributions but with the same mean and variance.

theorem 20.4.1 (pairwise independent sampling). let g1; : : : ; gn be pairwise
independent variables with the same mean (cid:22) and deviation (cid:27). de   ne

then

          sn

n

pr

gi :

sn wwd nx
         (cid:21) x
(cid:21)   1

(cid:0) (cid:22)

id1

n

(20.22)

(cid:16) (cid:27)

 2

x

:

   mcs        2017/6/5     19:42     page 887     #895

20.4. estimation by random sampling

887

proof. we observe    rst that the expectation of sn=n is (cid:22):

(def of sn)

(linearity of expectation)

  sn

n

ex

(cid:21)

id1 gi
n

id1 ex  gi   

 pn
(cid:21) d ex
dpn
dpn

n
id1 (cid:22)
n
d (cid:22):

d n(cid:22)
n

the second important property of sn=n is that its variance is the variance of gi

divided by n:

  sn

(cid:21) d  1

 2

var

n

var  sn  

" nx

gi

id1

nx
id1
(cid:1) n(cid:27) 2 d (cid:27) 2

var  gi   

:

n
d 1

n2 var

d 1
n2
d 1
n2

          sn

n

pr

         (cid:21) x

(cid:0) (cid:22)

#

(square multiple rule for variance (20.9))

(def of sn)

(pairwise independent additivity)

n

(cid:21)   var(cid:2)sn=n(cid:3)
 2
(cid:16) (cid:27)

x2
d (cid:27) 2=n
x2
d 1
n

x

:

:

(chebyshev   s bound)

(by (20.23))

(20.23)

(cid:4)

this is enough to apply chebyshev   s theorem and conclude:

the pairwise independent sampling theorem provides a quantitative general
statement about how the average of independent samples of a random variable ap-
proaches the mean. in particular, it proves what is known as the law of large
numbers:4 by choosing a large enough sample size, we can get arbitrarily accurate
estimates of the mean with con   dence arbitrarily close to 100%.

4this is the weak law of large numbers. as you might suppose, there is also a strong law, but

it   s outside the scope of 6.042.

   mcs        2017/6/5     19:42     page 888     #896

888

chapter 20 deviation from the mean

corollary 20.4.2. [weak law of large numbers] let g1; : : : ; gn be pairwise in-
dependent variables with the same mean (cid:22), and the same    nite deviation, and let

sn wwdpn

id1 gi
n

:

then for every (cid:15) > 0,

n!1 pr  jsn (cid:0) (cid:22)j   (cid:15)   d 1:

lim

20.5 con   dence in an estimation

so chebyshev   s bound implies that sampling 3,125 voters will yield a fraction that,
95% of the time, is within 0.04 of the actual fraction of the voting population who
prefer brown.

notice that the actual size of the voting population was never considered because
it did not matter. people who have not studied id203 theory often insist that
the population size should in   uence the sample size. but our analysis shows that
polling a little over 3000 people people is always suf   cient, regardless of whether
there are ten thousand, or a million, or a billion voters. you should think about
an intuitive explanation that might persuade someone who thinks population size
matters.

now suppose a pollster actually takes a sample of 3,125 random voters to esti-
mate the fraction of voters who prefer brown, and the pollster    nds that 1250 of
them prefer brown. it   s tempting, but sloppy, to say that this means:
false claim. with id203 0.95, the fraction p of voters who prefer brown is
1250=3125    0:04. since 1250=3125 (cid:0) 0:04 > 1=3, there is a 95% chance that
more than a third of the voters prefer brown to all other candidates.

as already discussed in section 18.9, what   s objectionable about this statement
is that it talks about the id203 or    chance    that a real world fact is true, namely
that the actual fraction p of voters favoring brown is more than 1/3. but p is what
it is, and it simply makes no sense to talk about the id203 that it is something
else. for example, suppose p is actually 0.3; then it   s nonsense to ask about the
id203 that it is within 0.04 of 1250/3125. it simply isn   t.

this example of voter preference is typical: we want to estimate a    xed, un-
known real-world quantity. but being unknown does not make this quantity a ran-
dom variable, so it makes no sense to talk about the id203 that it has some
property.

a more careful summary of what we have accomplished goes this way:

   mcs        2017/6/5     19:42     page 889     #897

20.6. sums of random variables

889

we have described a probabilistic procedure for estimating the value
of the actual fraction p. the id203 that our estimation procedure
will yield a value within 0.04 of p is 0.95.

this is a bit of a mouthful, so special phrasing closer to the sloppy language is
commonly used. the pollster would describe his conclusion by saying that

at the 95% con   dence level, the fraction of voters who prefer brown
is 1250=3125    0:04.

so con   dence levels refer to the results of estimation procedures for real-world
quantities. the phrase    con   dence level    should be heard as a reminder that some
statistical procedure was used to obtain an estimate. to judge the credibility of the
estimate, it may be important to examine how well this procedure was performed.
more important, the con   dence assertion above can be rephrased as

either the fraction of voters who prefer brown is 1250=3125    0:04
or something unlikely (id203 1/20) happened.

if our experience led us to judge that having the preference fraction actually be in
this particular interval was unlikely, then this level of con   dence would justi   ably
remain unconvincing.

20.6 sums of random variables

if all you know about a random variable is its mean and variance, then cheby-
shev   s theorem is the best you can do when it comes to bounding the probabil-
ity that the random variable deviates from its mean. in some cases, however, we
know more   for example, that the random variable has a binomial distribution   
and then it is possible to prove much stronger bounds. instead of polynomially
small bounds such as 1=c2, we can sometimes even obtain exponentially small
bounds such as 1=ec. as we will soon discover, this is the case whenever the ran-
dom variable t is the sum of n mutually independent random variables t1, t2, . . . ,
tn where 0   ti   1. a random variable with a binomial distribution is just one
of many examples of such a t .

20.6.1 a motivating example
fussbook is a new social networking site oriented toward unpleasant people. like
all major web services, fussbook has a load balancing problem: it receives lots of

   mcs        2017/6/5     19:42     page 890     #898

890

chapter 20 deviation from the mean

forum posts that computer servers have to process. if any server is assigned more
work than it can complete in a given interval, then it is overloaded and system
performance suffers. that would be bad, because fussbook users are not a tolerant
bunch. so balancing the work load across mutliple servers is vital.

an early idea was to assign each server an alphabetic range of forum topics.
(   that oughta work!   , one programmer said.) but after the computer handling the
   privacy    and    preferred text editor    threads melted from overload, the drawback
of an ad hoc approach was clear: it   s easy to miss something that will mess up your
plan.

if the length of every task were known in advance, then    nding a balanced distri-
bution would be a kind of    bin packing    problem. such problems are hard to solve
exactly, but approximation algorithms can come close. unfortunately, in this case
task lengths are not known in advance, which is typical of workload problems in
the real world.

so the load balancing problem seems sort of hopeless, because there is no data
available to guide decisions. so the programmers of fussbook gave up and just
randomly assigned posts to computers.
imagine their surprise when the system
stayed up and hasn   t crashed yet!

as it turns out, random assignment not only balances load reasonably well, but
also permits provable performance guarantees. in general, a randomized approach
to a problem is worth considering when a deterministic solution is hard to compute
or requires unavailable information.

speci   cally, fussbook receives 24,000 forum posts in every 10-minute interval.
each post is assigned to one of several servers for processing, and each server
works sequentially through its assigned tasks. it takes a server an average of 1=4
second to process a post. some posts, such as pointless grammar critiques and snide
witticisms, are easier, but no post   not even the most protracted harangues   takes
more than one full second.

measuring workload in seconds, this means a server is overloaded when it is
assigned more than 600 units of work in a given 600 second interval. fussbook   s
average processing load of 24;000 (cid:1) 1=4 d 6000 seconds per interval would keep
10 computers running at 100% capacity with perfect load balancing. surely, more
than 10 servers are needed to cope with random    uctuations in task length and
imperfect load balance. but would 11 be enough? . . . or 15, 20, 100? we   ll answer
that question with a new mathematical tool.

   mcs        2017/6/5     19:42     page 891     #899

20.6. sums of random variables

891

20.6.2 the chernoff bound
the chernoff5 bound is a hammer that you can use to nail a great many problems.
roughly, the chernoff bound says that certain random variables are very unlikely
to signi   cantly exceed their expectation. for example, if the expected load on
a processor is just a bit below its capacity, then that processor is unlikely to be
overloaded, provided the conditions of the chernoff bound are satis   ed.

more precisely, the chernoff bound says that the sum of lots of little, indepen-
dent, random variables is unlikely to signi   cantly exceed the mean of the sum. the
markov and chebyshev bounds lead to the same kind of conclusion but typically
provide much weaker bounds. in particular, the markov and chebyshev bounds are
polynomial, while the chernoff bound is exponential.

here is the theorem. the proof will come later in section 20.6.6.

theorem 20.6.1 (chernoff bound). let t1; : : : tn be mutually independent ran-
dom variables such that 0   ti   1 for all i. let t d t1 c (cid:1)(cid:1)(cid:1) c tn. then for all
c (cid:21) 1,

pr  t (cid:21) c ex  t        e

(cid:0)   .c/ ex  t   

where   .c/ wwd c ln c (cid:0) c c 1.
the chernoff bound applies only to distributions of sums of independent random
variables that take on values in the real interval   0; 1  . the binomial distribution is
the most well-known distribution that    ts these criteria, but many others are possi-
ble, because the chernoff bound allows the variables in the sum to have differing,
arbitrary, or even unknown distributions over the range   0; 1  . furthermore, there is
no direct dependence on either the number of random variables in the sum or their
expectations. in short, the chernoff bound gives strong results for lots of problems
based on little information   no wonder it is widely used!

(20.24)

20.6.3 chernoff bound for binomial tails
the chernoff bound can be applied in easy steps, though the details can be daunting
at    rst. let   s walk through a simple example to get the hang of it: bounding the
id203 that the number of heads that come up in 1000 independent tosses of a
coin exceeds the expectation by 20% or more. let ti be an indicator variable for
the event that the ith coin is heads. then the total number of heads is

t d t1 c (cid:1)(cid:1)(cid:1) c t1000:

5yes, this is the same chernoff who    gured out how to beat the state lottery   this guy knows a

thing or two.

   mcs        2017/6/5     19:42     page 892     #900

892

chapter 20 deviation from the mean

the chernoff bound requires that the random variables ti be mutually independent
and take on values in the range   0; 1  . both conditions hold here. in this example
the ti   s only take the two values 0 and 1, since they   re indicators.
the goal is to bound the id203 that the number of heads exceeds its expec-
tation by 20% or more; that is, to bound pr  t (cid:21) c ex  t      where c = 1:2. to that
end, we compute   .c/ as de   ned in the theorem:

  .c/ d c ln.c/ (cid:0) c c 1 d 0:0187 : : : :

if we assume the coin is fair, then ex  t    d 500. plugging these values into the
chernoff bound gives:

pr(cid:2)t (cid:21) 1:2 ex  t   (cid:3)   e

(cid:0)   .c/: ex  t   
(cid:0).0:0187::: /(cid:1)500 < 0:0000834:

d e

so the id203 of getting 20% or more extra heads on 1000 coins is less than 1
in 10,000.

the bound rapidly becomes much smaller as the number of coins increases, be-
cause the expected number of heads appears in the exponent of the upper bound.
for example, the id203 of getting at least 20% extra heads on a million coins
is at most

(cid:0).0:0187::: /(cid:1)500000 < e

(cid:0)9392;

e

which is an inconceivably small number.

alternatively, the bound also becomes stronger for larger deviations. for exam-
ple, suppose we   re interested in the odds of getting 30% or more extra heads in
1000 tosses, rather than 20%. in that case, c d 1:3 instead of 1:2. consequently,
the parameter   .c/ rises from 0:0187 to about 0:0410, which may not seem sig-
ni   cant, but because   .c/ appears in the exponent of the upper bound, the    nal
id203 decreases from around 1 in 10,000 to about 1 in a billion!

20.6.4 chernoff bound for a lottery game
pick-4 is a lottery game in which you pay $1 to pick a 4-digit number between 0000
and 9999. if your number comes up in a random drawing, then you win $5,000.
your chance of winning is 1 in 10,000. if 10 million people play, then the expected
number of winners is 1000. when there are exactly 1000 winners, the lottery keeps
$5 million of the $10 million paid for tickets. the lottery operator   s nightmare is
that the number of winners is much greater   especially at the point where more
than 2000 win and the lottery must pay out more than it received. what is the
id203 that will happen?

   mcs        2017/6/5     19:42     page 893     #901

20.6. sums of random variables

893

let ti be an indicator for the event that the ith player wins. then t d t1c(cid:1)(cid:1)(cid:1)c
tn is the total number of winners. if we assume6 that the players    picks and the
winning number are random, independent and uniform, then the indicators ti are
independent, as required by the chernoff bound.
since 2000 winners would be twice the expected number, we choose c d 2,
compute   .c/ d 0:386 : : : , and plug these values into the chernoff bound:

pr  t (cid:21) 2000   d pr(cid:2)t (cid:21) 2 ex  t   (cid:3)

  e

< e

(cid:0)k ex  t    d e
(cid:0)386:

(cid:0).0:386::: /(cid:1)1000

so there is almost no chance that the lottery operator pays out more than it took in.
in fact, the number of winners won   t even be 10% higher than expected very often.
to prove that, let c d 1:1, compute   .c/ d 0:00484 : : : , and plug in again:

pr(cid:2)t (cid:21) 1:1 ex  t   (cid:3)   e

(cid:0)k ex  t   
(cid:0).0:00484/(cid:1)1000 < 0:01:

d e

so the pick-4 lottery may be exciting for the players, but the lottery operator has
little doubt as to the outcome!

20.6.5 randomized load balancing
now let   s return to fussbook and its load balancing problem. speci   cally, we need
to determine a number m of servers that makes it very unlikely that any server is
overloaded by being assigned more than 600 seconds of work in a given interval.

and otherwise ti is the length of the task. so t dpn

to begin, let   s    nd the id203 that the    rst server is overloaded. letting t be
the number of seconds of work assigned to the    rst server, this means we want an
upper bound on pr  t (cid:21) 600  . let ti be the number of seconds that the    rst server
spends on the ith task: then ti is zero if the task is assigned to another machine,
id1 ti is the total number of
seconds of work assigned to the    rst server, where n d 24;000.
the chernoff bound is applicable only if the ti are mutually independent and
take on values in the range   0; 1  . the    rst condition is satis   ed if we assume that
assignment of a post to a server is independent of the time required to process the
post. the second condition is satis   ed because we know that no post takes more
than 1 second to process; this is why we chose to measure work in seconds.

6as we noted in chapter 19, human choices are often not uniform and they can be highly de-
pendent. for example, lots of people will pick an important date. the lottery folks should not get
too much comfort from the analysis that follows, unless they assign random 4-digit numbers to each
player.

   mcs        2017/6/5     19:42     page 894     #902

894

chapter 20 deviation from the mean

in all, there are 24,000 tasks, each with an expected length of 1/4 second. since
tasks are assigned to the m servers at random, the expected load on the    rst server
is:

ex  t    d 24;000 tasks (cid:1) 1=4 second per task

d 6000=m seconds:

m servers

(20.25)

so if there are fewer than 10 servers, then the expected load on the    rst server is
greater than its capacity, and we can expect it to be overloaded. if there are exactly
10 servers, then the server is expected to run for 6000=10 d 600 seconds, which is
100% of its capacity.

now we can use the chernoff bound based on the number of servers to bound

the id203 that the    rst server is overloaded. we have from (20.25)

600 d c ex  t   

where c wwd m=10;

so by the chernoff bound

pr  t (cid:21) 600   d pr  t (cid:21) c ex  t        e

(cid:0).c ln.c/(cid:0)cc1/(cid:1)6000=m;

the id203 that some server is overloaded is at most m times the id203

that the    rst server is overloaded, by the union bound in section 17.5.2. so

pr  some server is overloaded     mx

pr  server i is overloaded  

id1

d m pr  the    rst server is overloaded  
  me

(cid:0).c ln.c/(cid:0)cc1/(cid:1)6000=m;

where c d m=10. some values of this upper bound are tabulated below:

m d 11 w 0:784 : : :
m d 12 w 0:000999 : : :
m d 13 w 0:0000000760 : : : :

these values suggest that a system with m d 11 machines might suffer immediate
overload, m d 12 machines could fail in a few days, but m d 13 should be    ne for
a century or two!

   mcs        2017/6/5     19:42     page 895     #903

20.6. sums of random variables

895

20.6.6 proof of the chernoff bound
the proof of the chernoff bound is somewhat involved. in fact, chernoff himself
couldn   t come up with it: his friend, herman rubin, showed him the argument.
thinking the bound not very signi   cant, chernoff did not credit rubin in print. he
felt pretty bad when it became famous!7

proof. (of theorem 20.6.1)

for clarity, we   ll go through the proof    top down.    that is, we   ll use facts that
are proved immediately afterward.
the key step is to exponentiate both sides of the inequality t (cid:21) c ex  t    and
then apply the markov bound:
pr  t (cid:21) c ex  t      d pr  ct (cid:21) cc ex  t     

  ex  ct   
cc ex  t   
  e.c(cid:0)1/ ex  t   
d e.c(cid:0)1/ ex  t   

cc ex  t   

ec ln.c/ ex  t   

d e

(cid:0).c ln.c/(cid:0)cc1/ ex  t   :

(markov bound)

(lemma 20.6.2 below)

(cid:4)

algebra aside, there is a brilliant idea in this proof: in this context, exponenti-
ating somehow supercharges the markov bound. this is not true in general! one
unfortunate side-effect of this supercharging is that we have to bound some nasty
expectations involving exponentials in order to complete the proof. this is done in
the two lemmas below, where variables take on values as in theorem 20.6.1.

lemma 20.6.2.

ex

cti   e.c(cid:0)1/ ex  t   :
h

7see    a conversation with herman chernoff,    statistical science 1996, vol. 11, no. 4, pp 335   

350.

   mcs        2017/6/5     19:42     page 896     #904

896

chapter 20 deviation from the mean

h
cti d ex

proof.

ex

h
h
ct1c(cid:1)(cid:1)(cid:1)ctn
h
ct1 (cid:1)(cid:1)(cid:1) ctn
ct1

i
i
i(cid:1)(cid:1)(cid:1) ex  ctn  

d ex
d ex
  e.c(cid:0)1/ ex  t1   (cid:1)(cid:1)(cid:1) e.c(cid:0)1/ ex  tn  
d e.c(cid:0)1/.ex  t1  c(cid:1)(cid:1)(cid:1)cex  tn  /
d e.c(cid:0)1/ ex  t1c(cid:1)(cid:1)(cid:1)ctn  
d e.c(cid:0)1/ ex  t   :

(def of t )

(independent product cor 19.5.7)

(lemma 20.6.3 below)

(linearity of ex  (cid:1)  )

the third equality depends on the fact that functions of independent variables are
(cid:4)
also independent (see lemma 19.2.2).

lemma 20.6.3.

ex  cti      e.c(cid:0)1/ ex  ti   

proof. all summations below range over values v taken by the random variable ti,
which are all required to be in the interval   0; 1  .

ex  cti    dx
 x
dx pr  ti d v   c .c (cid:0) 1/v pr  ti d v  
dx pr  ti d v   c .c (cid:0) 1/

cv pr  ti d v  
.1 c .c (cid:0) 1/v/ pr  ti d v  
x

v pr  ti d v  

d 1 c .c (cid:0) 1/ ex  ti   
  e.c(cid:0)1/ ex  ti   

(def of ex  (cid:1)  )
(convexity   see below)

(since 1 c z   ez):

the second step relies on the inequality

cv   1 c .c (cid:0) 1/v;

which holds for all v in   0; 1   and c (cid:21) 1. this follows from the general principle
that a convex function, namely cv, is less than the linear function 1 c .c (cid:0) 1/v
between their points of intersection, namely v d 0 and 1. this inequality is why
(cid:4)
the variables ti are restricted to the real interval   0; 1  .

   mcs        2017/6/5     19:42     page 897     #905

20.6. sums of random variables

897

20.6.7 comparing the bounds
suppose that we have a collection of mutually independent events a1, a2, . . . , an,
and we want to know how many of the events are likely to occur.

let ti be the indicator random variable for ai and de   ne

pi d pr  ti d 1   d pr(cid:2)ai

(cid:3)

for 1   i   n. de   ne

t d t1 c t2 c (cid:1)(cid:1)(cid:1) c tn

to be the number of events that occur.

we know from linearity of expectation that

ex  t    d ex  t1   c ex  t2   c (cid:1)(cid:1)(cid:1) c ex  tn  

d nx

id1

pi :

this is true even if the events are not independent.

by theorem 20.3.8, we also know that

var  t    d var  t1   c var  t2   c (cid:1)(cid:1)(cid:1) c var  tn  

d nx

id1

pi .1 (cid:0) pi /;

vuut nx

id1

and thus that

(cid:27)t d

pi .1 (cid:0) pi /:

this is true even if the events are only pairwise independent.

markov   s theorem tells us that for any c > 1,

pr  t (cid:21) c ex  t        1

c

:

chebyshev   s theorem gives us the stronger result that
pr  jt (cid:0) ex  t   j (cid:21) c(cid:27)t      1
c2 :

the chernoff bound gives us an even stronger result, namely, that for any c > 0,

pr  t (cid:0) ex  t    (cid:21) c ex  t        e

(cid:0).c ln.c/(cid:0)cc1/ ex  t   :

   mcs        2017/6/5     19:42     page 898     #906

898

chapter 20 deviation from the mean

in this case, the id203 of exceeding the mean by c ex  t    decreases as an
exponentially small function of the deviation.
by considering the random variable n (cid:0) t , we can also use the chernoff bound
to prove that the id203 that t is much lower than ex  t    is also exponentially
small.

20.6.8 murphy   s law
if the expectation of a random variable is much less than 1, then markov   s theorem
implies that there is only a small id203 that the variable has a value of 1 or
more. on the other hand, a result that we call murphy   s law8 says that if a random
variable is an independent sum of 0   1-valued variables and has a large expectation,
then there is a huge id203 of getting a value of at least 1.

theorem 20.6.4 (murphy   s law). let a1, a2, . . . , an be mutually independent
events. let ti be the indicator random variable for ai and de   ne

t wwd t1 c t2 c (cid:1)(cid:1)(cid:1) c tn

to be the number of events that occur. then
pr  t d 0     e

(cid:0) ex  t   :

proof.

pr  t d 0   d pr  a1 \ a2 \ : : : \ an  

.1 (cid:0) pr  ai   /

id1

pr  ai   

d ny
d ny
  ny
id1
(cid:0) pr  ai   
(cid:0)pn
id1
d e
(cid:0)pn
d e
(cid:0) ex  t   
d e

e

id1 pr  ai   
id1 ex  ti   

(t d 0 iff no ai occurs)

(independence of ai)

(since 1 (cid:0) x   e

(cid:0)x)

(since ti is an indicator for ai)

(linearity of expectation) (cid:4)

8this is in reference and deference to the famous saying that    if something can go wrong, it

probably will.   

   mcs        2017/6/5     19:42     page 899     #907

20.7. really great expectations

899

e

for example, given any set of mutually independent events, if you expect 10 of
them to happen, then at least one of them will happen with id203 at least 1 (cid:0)
(cid:0)10. the id203 that none of them happen is at most e
so if there are a lot of independent things that can go wrong and their probabil-
ities sum to a number much greater than 1, then theorem 20.6.4 proves that some
of them surely will go wrong.

(cid:0)10 < 1=22000.

this result can help to explain    coincidences,       miracles,    and crazy events that
seem to have been very unlikely to happen. such events do happen, in part, because
there are so many possible unlikely events that the sum of their probabilities is
greater than one. for example, someone does win the lottery.

in fact, if there are 100,000 random tickets in pick-4, theorem 20.6.4 says that
(cid:0)10 < 1=22000. more generally,
the id203 that there is no winner is less than e
there are literally millions of one-in-a-million possible events and so some of them
will surely occur.

20.7 really great expectations

making independent tosses of a fair coin until some desired pattern comes up is a
simple process you should feel solidly in command of by now, right? so how about
a bet about the simplest such process   tossing until a head comes up? ok, you   re
wary of betting with us, but how about this: we   ll let you set the odds.

20.7.1 repeating yourself
here   s the bet: you make independent tosses of a fair coin until a head comes up.
then you will repeat the process. if a second head comes up in the same or fewer
tosses than the    rst, you have to start over yet again. you keep starting over until
you    nally toss a run of tails longer than your    rst one. the payment rules are that
you will pay me 1 cent each time you start over. when you win by    nally getting a
run of tails longer than your    rst one, i will pay you some generous amount. notice
by the way that you   re certain to win   whatever your initial run of tails happened
to be, a longer run will eventually occur again with id203 1!

for example, if your    rst tosses are ttth, then you will keep tossing until you

get a run of 4 tails. so your winning    ips might be

ttththtthhtththttththhhtttt:

in this run there are 10 heads, which means you had to start over 9 times. so you
would have paid me 9 cents by the time you    nally won by tossing 4 tails. now

   mcs        2017/6/5     19:42     page 900     #908

900

chapter 20 deviation from the mean

you   ve won, and i   ll pay you generously    how does 25 cents sound? maybe you   d
rather have $1? how about $1000?

of course there   s a trap here. let   s calculate your expected winnings.
suppose your initial run of tails had length k. after that, each time a head comes
up, you have to start over and try to get kc1 tails in a row. if we regard your getting
k c 1 tails in a row as a    failed    try, and regard your having to start over because a
head came up too soon as a    successful    try, then the number of times you have to
start over is the number of tries till the    rst failure. so the expected number of tries
will be the mean time to failure, which is 2kc1, because the id203 of tossing
k c 1 tails in a row is 2
let t be the length of your initial run of tails. so t d id116 that your initial
tosses were tkh. let r be the number of times you repeat trying to beat your
original run of tails. the number of cents you expect to    nish with is the number
of cents in my generous payment minus ex  r  . it   s now easy to calculate ex  r   by
conditioning on the value of t :

(cid:0).kc1/.

ex  r   dx

ex  r j t d k  (cid:1)pr  t d k   dx

2kc1(cid:1)2

(cid:0).kc1/ d 1c1c1c(cid:1)(cid:1)(cid:1) d 1:

k2n

k2n

so you can expect to pay me an in   nite number of cents before winning my
   generous    payment. no amount of generosity can make this bet fair! in fact this
particular example is a special case of an astonishingly general one: the expected
waiting time for any random variable to achieve a larger value remains in   nite.

problems for section 20.1

practice problems
problem 20.1.
the vast majority of people have an above average number of    ngers. which of
the following statements explain why this is true? explain your reasoning.

1. most people have a super secret extra bonus    nger of which they are un-

aware.

2. a pedantic minority don   t count their thumbs as    ngers, while the majority

of people do.

3. polydactyly is rarer than amputation.

   mcs        2017/6/5     19:42     page 901     #909

20.7. really great expectations

901

4. when you add up the total number of    ngers among the world   s population
and then divide by the size of the population, you get a number less than ten.

5. this follows from markov   s theorem, since no one has a negative number

of    ngers.

6. missing    ngers are more common than extra ones.

class problems
problem 20.2.
a herd of cows is stricken by an outbreak of cold cow disease. the disease lowers
a cow   s body temperature from normal levels, and a cow will die if its temperature
goes below 90 degrees f. the disease epidemic is so intense that it lowered the
average temperature of the herd to 85 degrees. body temperatures as low as 70
degrees, but no lower, were actually found in the herd.
(a) use markov   s bound 20.1.1 to prove that at most 3/4 of the cows could sur-
vive.

(b) suppose there are 400 cows in the herd. show that the bound from part (a)
is the best possible by giving an example set of temperatures for the cows so that
the average herd temperature is 85 and 3/4 of the cows will have a high enough
temperature to survive.

(c) notice that the results of part (b) are purely arithmetic facts about averages,
not about probabilities. but you veri   ed the claim in part (a) by applying markov   s
bound on the deviation of a random variable. justify this approach by regarding
the temperature t of a cow as a random variable. carefully specify the id203
space on which t is de   ned: what are the sample points? what are their proba-
bilities? explain the precise connection between properties of t and average herd
temperature that justi   es the application of markov   s bound.

homework problems
problem 20.3.
if r is a nonnegative random variable, then markov   s theorem gives an upper
bound on pr  r (cid:21) x   for any real number x > ex  r  . if b is a lower bound on r,
then markov   s theorem can also be applied to r (cid:0) b to obtain a possibly different
bound on pr  r (cid:21) x  .
(a) show that if b > 0, applying markov   s theorem to r (cid:0) b gives a smaller
upper bound on pr  r (cid:21) x   than simply applying markov   s theorem directly to r.

   mcs        2017/6/5     19:42     page 902     #910

902

chapter 20 deviation from the mean

(b) what value of b (cid:21) 0 in part (a) gives the best bound?

exam problems
problem 20.4.
a herd of cows is stricken by an outbreak of hot cow disease. the disease raises
the normal body temperature of a cow, and a cow will die if its temperature goes
above 90 degrees. the disease epidemic is so intense that it raised the average
temperature of the herd to 120 degrees. body temperatures as high as 140 degrees,
but no higher, were actually found in the herd.
(a) use markov   s bound 20.1.1 to prove that at most 2/5 of the cows could have
survived.

(b) notice that the conclusion of part (a) is a purely arithmetic facts about aver-
ages, not about probabilities. but you veri   ed the claim of part (a) by applying
markov   s bound on the deviation of a random variable. justify this approach by
explaining how to de   ne a random variable t for the temperature of a cow. care-
fully specify the id203 space on which t is de   ned: what are the outcomes?
what are their probabilities? explain the precise connection between properties of
t , average herd temperature, and fractions of the herd with various temperatures,
that justify application of markov   s bound.

problems for section 20.2

exam problems
problem 20.5.
there is a herd of cows whose average body temperature turns out to be 100 de-
grees. our thermometer produces such sensitive readings that no two cows have
exactly the same body temperature. the herd is stricken by an outbreak of wacky
cow disease, which will eventually kill any cow whose body temperature differs
from the average by 10 degrees or more.

it turns out that the collection-variance of all the body temperatures is 20, where

cvar.a/ wwdp

the collection-variance cvar.a/ of set a of numbers is
a2a.a (cid:0) (cid:22)/2

jaj
where (cid:22) is the average value of the numbers in a.9

;

9cvar.a/ is called a   s mean square deviation.

   mcs        2017/6/5     19:42     page 903     #911

20.7. really great expectations

903

(a) apply the chebyshev bound to the temperature t of a random cow to show
that at most 20% of the cows will be killed by this disease outbreak.

the conclusion of part (a) about a certain fraction of the herd was derived by
bounding the deviation of a random variable. we can justify this approach by
explaining how to de   ne a suitable id203 space in which, the temperature
t of a cow is a random variable.
(b) carefully specify the id203 space on which t is de   ned: what are the
outcomes? what are their probabilities?

(c) explain why for this id203 space, the fraction of cows with any given
cow property p is the same as pr  p   .

(continued on next page)

(d) show that var  t    equals the collection variance of the temperatures in the
herd.

problems for section 20.3

practice problems
problem 20.6.
suppose 120 students take a    nal exam and the mean of their scores is 90. you
have no other information about the students and the exam, that is, you should not
assume that the highest possible score is 100. you may, however, assume that exam
scores are nonnegative.
(a) state the best possible upper bound on the number of students who scored at
least 180.

(b) now suppose somebody tells you that the lowest score on the exam is 30.
compute the new best possible upper bound on the number of students who scored
at least 180.

problem 20.7.
suppose you    ip a fair coin 100 times. the coin    ips are all mutually independent.
(a) what is the expected number of heads?

   mcs        2017/6/5     19:42     page 904     #912

904

chapter 20 deviation from the mean

(b) what upper bound does markov   s theorem give for the id203 that the
number of heads is at least 70?

(c) what is the variance of the number of heads?

(d) what upper bound does chebyshev   s theorem give for the id203 that the
number of heads is either less than 30 or greater than 70?

problem 20.8.
albert has a gambling problem. he plays 240 hands of draw poker, 120 hands of
black jack, and 40 hands of stud poker per day. he wins a hand of draw poker with
id203 1/6, a hand of black jack with id203 1/2, and a hand of stud poker
with id203 1/5. let w be the expected number of hands that albert wins in a
day.
(a) what is ex  w   ?

(b) what would the markov bound be on the id203 that albert will win at
least 216 hands on a given day?

(c) assume the outcomes of the card games are pairwise independent. what is
var  w   ? you may answer with a numerical expression that is not completely eval-
uated.

(d) what would the chebyshev bound be on the id203 that albert will win
at least 216 hands on a given day? you may answer with a numerical expression
that includes the constant v d var  w   .

class problems
problem 20.9.
the hat-check staff has had a long day serving at a party, and at the end of the party
they simply return the n checked hats in a random way such that the id203
that any particular person gets their own hat back is 1=n.

let xi be the indicator variable for the ith person getting their own hat back. let

sn be the total number of people who get their own hat back.

   mcs        2017/6/5     19:42     page 905     #913

20.7. really great expectations

905

(a) what is the expected number of people who get their own hat back?
(b) write a simple formula for ex  xi (cid:1) xj    for i    j .
hint: what is the id203 that the second person got their hat back, given that

the    fth person got their hat back, that is, pr(cid:2)x2 d 1 j x5 d 1(cid:3)?

(c) explain why you cannot use the variance of sums formula to calculate var  sn  .
(d) show that ex  .sn/2   d 2. hint: .xi /2 d xi.
(e) what is the variance of sn?
(f) show that there is at most a 1% chance that more than 10 people get their own
hat back.

problem 20.10.
for any random variable r with mean (cid:22) and standard deviation (cid:27) the chebyshev
bound says that for any real number x > 0,

pr  jr (cid:0) (cid:22)j (cid:21) x    (cid:16) (cid:27)
pr  jr (cid:0) (cid:22)j (cid:21) x   d(cid:16) (cid:27)

x

 2
 2

:

x

show that for any real number (cid:22) and real numbers x (cid:21) (cid:27) > 0, there is an r for
which the chebyshev bound is tight, that is,

hint: first assume (cid:22) d 0 and let r take only the values 0;(cid:0)x and x.

:

(20.26)

problem 20.11.
a computer program crashes at the end of each hour of use with id203 1=p,
if it has not crashed already. let h be the number of hours until the    rst crash.
(a) what is the chebyshev bound on

pr  jh (cid:0) .1=p/j > x=p  

where x > 0?
(b) conclude from part (a) that for a (cid:21) 2,

pr  h > a=p     1 (cid:0) p
.a (cid:0) 1/2

   mcs        2017/6/5     19:42     page 906     #914

906

chapter 20 deviation from the mean

hint: check that jh (cid:0) .1=p/j > .a (cid:0) 1/=p iff h > a=p.
(c) what actually is

pr  h > a=p     

conclude that for any    xed p > 0, the id203 that h > a=p is an asymptoti-
cally smaller function of a than the chebyshev bound of part (b).

problem 20.12.
let r be a positive integer-valued random variable.
(a) how large can ex  1=r   be?

(b) how large can var  r   be if the only values of r are 1 and 2?
(c) how large can var  r   be if ex  r   d 2?

problem 20.13.
a man has a set of n keys, one of which    ts the door to his apartment. he tries the
keys randomly throwing away each ill-   tting key that he tries until he    nds the key
that    ts. that is, he chooses keys randomly from among those he has not yet tried.
this way he is sure to    nd the right key within n tries.

let t be the number of times he tries keys until he    nds the right key. prob-

lem 19.25 shows that

ex  t    d n c 1

2

:

write a closed formula for var  t   .

homework problems
problem 20.14.
a man has a set of n keys, one of which    ts the door to his apartment. he tries a
key at random, and if it does not    t the door, he simply puts it back; so he might try
the same ill-   tting key several times. he continues until he    nds the one right key
that    ts.

let t be the number of times he tries keys until he    nds the right key.

(a) explain why

ex  t    d n and var  t    d n.n (cid:0) 1/:

   mcs        2017/6/5     19:42     page 907     #915

20.7. really great expectations

907

let

(b) use the chebyshev bound to show that for any    xed n > 1,

fn.a/ wwd pr  t (cid:21) an  :
 

  1

fn.a/ d    

:

a2

(20.27)

(c) derive an upper bound for fn.a/ that for any    xed n > 1 is asymptoticaly
smaller than chebyshev   s bound (20.27).
you may assume that n is large enough to use the approximation

 

 cn (cid:25) 1

ec

1 (cid:0) 1

n

problem 20.15.
there is a fair coin and a biased coin that    ips heads with id203 3=4. you are
given one of the coins, but you don   t know which. to determine which coin was
picked, your strategy will be to choose a number n and    ip the picked coin n times.
if the number of heads    ipped is closer to .3=4/n than to .1=2/n, you will guess
that the biased coin had been picked and otherwise you will guess that the fair coin
had been picked.
(a) use the chebyshev bound to    nd a value n so that with id203 0.95 your
strategy makes the correct guess, no matter which coin was picked.

(b) suppose you had access to a computer program that would generate, in the
form of a plot or table, the full binomial-.n; p/ id203 density and cumulative
distribution functions. how would you    nd the minimum number of coin    ips
needed to infer the identity of the chosen coin with id203 0.95? how would
you expect the number n determined this way to compare to the number obtained
in part(a)? (you do not need to determine the numerical value of this minimum n,
but we   d be interested to know if you did.)

(c) now that we have determined the proper number n, we will assert that the
picked coin was the biased one whenever the number of heads    ipped is greater
than .5=8/n, and we will be right with id203 0.95. what, if anything, does
this imply about

pr(cid:2)picked coin was biased j # heads    ipped (cid:21) .5=8/n(cid:3)   

   mcs        2017/6/5     19:42     page 908     #916

908

chapter 20 deviation from the mean

problem 20.16.
the expected absolute deviation of a real-valued random variable r with mean (cid:22),
is de   ned to be

ex  jr (cid:0) (cid:22)j   :

prove that the expected absolute deviation is always less than or equal to the stan-
dard deviation (cid:27). (for simplicity, you may assume that r is de   ned on a    nite
sample space.)

hint: suppose the sample space outcomes are !1; !2; : : : ; !n, and let

p wwd .p1; p2; : : : ; pn/ where pi dppr  !i   ;
r wwd .r1; r2; : : : ; rn/ where ri d jr.!i / (cid:0) (cid:22)jppr  !i   :

id1 vi ui denote the dot product of n-vectors v; w, and let

as usual, let v (cid:1) w wwdpn

jvj be the norm of v, namely,
then verify that

p

v (cid:1) v.

jpj d 1;

jrj d (cid:27);

and

ex  jr (cid:0) (cid:22)j    d r (cid:1) p:

problem 20.17.
prove the following    one-sided    version of the chebyshev bound for deviation
above the mean:

lemma (one-sided chebyshev bound).

pr  r (cid:0) ex  r   (cid:21) x    

var  r  

x2 c var  r  

:

hint: let sa wwd .r (cid:0) ex  r   c a/2, for 0   a 2 r. so r (cid:0) ex  r   (cid:21) x
implies sa (cid:21) .x c a/2. apply markov   s bound to pr  sa (cid:21) .x c a/2  . choose a to
minimize this last bound.

problem 20.18.
prove the pairwise independent additivity of variance theorem 20.3.8: if r1; r2; : : : ; rn
are pairwise independent random variables, then

var  r1 c r2 c (cid:1)(cid:1)(cid:1) c rn   d var  r1   c var  r2   c (cid:1)(cid:1)(cid:1) c var  rn  :

(*)

hint: why is it ok to assume ex  ri    d 0?

   mcs        2017/6/5     19:42     page 909     #917

20.7. really great expectations

909

exam problems
problem 20.19.
you are playing a game where you get n turns. each of your turns involves    ipping
a coin a number of times. on the    rst turn, you have 1    ip, on the second turn you
have two    ips, and so on until your nth turn when you    ip the coin n times. all the
   ips are mutually independent.

the coin you are using is biased to    ip heads with id203 p. you win a turn

if you    ip all heads. let w be the number of winning turns.
(a) write a closed-form (no summations) expression for ex  w   .

(b) write a closed-form expression for var  w   .

problem 20.20.
let kn be the complete graph with n vertices. each of the edges of the graph
will be randomly assigned one of the colors red, green, or blue. the assignments
of colors to edges are mutually independent, and the id203 of an edge being
assigned red is r, blue is b, and green is g (so r c b c g d 1).
a set of three vertices in the graph is called a triangle. a triangle is monochro-

matic if the three edges connecting the vertices are all the same color.
(a) let m be the id203 that any given triangle t is monochromatic. write a
simple formula for m in terms of r; b; and g.

(b) let it be the indicator variable for whether t is monochromatic. write simple
formulas in terms of m; r; b and g for ex  it    and var  it   .

let t and u be distinct triangles.
(c) what is the id203 that t and u are both monochromatic if they do not
share an edge?. . . if they do share an edge?

now assume r d b d g d 1

3

.

(d) show that it and iu are independent random variables.
(e) let m be the number of monochromatic triangles. write simple formulas in
terms of n and m for ex  m    and var  m   .

   mcs        2017/6/5     19:42     page 910     #918

910

chapter 20 deviation from the mean

(f) let (cid:22) wwd ex  m   . use chebyshev   s bound to prove that

pr

(g) conclude that

hjm (cid:0) (cid:22)j >
p
hjm (cid:0) (cid:22)j >

:

i   1
i d 0

log (cid:22)

(cid:22) log (cid:22)

p

(cid:22) log (cid:22)

lim
n!1 pr

problem 20.21.
you have a biased coin which    ips heads with id203 p. you    ip the coin n
times. the coin    ips are all mutually independent. let h be the number of heads.
(a) write a simple expression in terms of p and n for ex  h   , the expected number
of heads.

(b) write a simple expression in terms of p and n for var  h   , the variance of the
number of heads.

(c) write a simple expression in terms of p for the upper bound that markov   s
theorem gives for the id203 that the number of heads is larger than the ex-
pected number by at least 1% of the number of    ips, that is, by n=100.

(d) show that the bound chebyshev   s theorem gives for the id203 that h
differs from ex  h    by at least n=100 is

1002 p.1 (cid:0) p/

:

n

(e) the bound in part (d) implies that if you    ip at least m times for a certain
number m, then there is a 95% chance that the proportion of heads among these m
   ips will be within 0.01 of p. write a simple expression for m in terms of p.

problem 20.22.
a classroom has sixteen desks in a 4 (cid:2) 4 arrangement as shown below.

   mcs        2017/6/5     19:42     page 911     #919

20.7. really great expectations

911

if two desks are next to each other, vertically or horizontally, they are called an
adjacent pair. so there are three horizontally adjacent pairs in each row, for a total
of twelve horizontally adjacent pairs. likewise, there are twelve vertically adjacent
pairs. an adjacent pair d of desks is said to have a    irtation when there is a boy at
one desk and a girl at the other desk.
(a) suppose boys and girls are assigned to desks in some unknown probabilistic
way. what is the markov bound on the id203 that the number of    irtations is
at least 33 1/3% more than expected?

suppose that boys and girls are actually assigned to desks mutually indepen-

dently, with id203 p of a desk being occupied by a boy, where 0 < p < 1.
(b) express the expected number of    irtations in terms of p.
hint: let id be the indicator variable for a    irtation at d.

different pairs d and e of adjacent desks are said to overlap when they share
a desk. for example, the    rst and second pairs in each row overlap, and so do the
second and third pairs, but the    rst and third pairs do not overlap.
(c) prove that if d and e overlap, and p d 1=2, then id and ie are independent.
(d) when p d 1=2, what is the variance of the number of    irtations?
(e) what upper bound does chebyshev   s theorem give on the id203 that the
number of heads is either less than 30 or greater than 70?
(f) let d and e be pairs of adjacent desks that overlap. prove that if p    1=2,
then fd and fe are not independent.

   mcs        2017/6/5     19:42     page 912     #920

912

chapter 20 deviation from the mean

(g) find four pairs of desks d1; d2; d3; d4 and explain why fd1; fd2; fd3; fd4
are not mutually independent (even if p d 1=2).

problems for section 20.5

class problems
problem 20.23.
a recent gallup poll found that 35% of the adult population of the united states
believes that the theory of evolution is    well-supported by the evidence.    gallup
polled 1928 americans selected uniformly and independently at random. of these,
675 asserted belief in evolution, leading to gallup   s estimate that the fraction of
americans who believe in evolution is 675=1928 (cid:25) 0:350. gallup claims a margin
of error of 3 percentage points, that is, he claims to be con   dent that his estimate is
within 0.03 of the actual percentage.
(a) what is the largest variance an indicator variable can have?

(b) use the pairwise independent sampling theorem to determine a con   dence
level with which gallup can make his claim.

(c) gallup actually claims greater than 99% con   dence in his estimate. how
might he have arrived at this conclusion? (just explain what quantity he could
calculate; you do not need to carry out a calculation.)

(d) accepting the accuracy of all of gallup   s polling data and calculations, can
you conclude that there is a high id203 that the percentage of adult americans
who believe in evolution is 35    3 percent?

problem 20.24.
let b1; b2; : : : ; bn be mutually independent random variables with a uniform dis-
tribution on the integer interval   1::d   . let ei;j be the indicator variable for the
event   bi d bj   .
let m equal the number of events   bi d bj    that are true, where 1   i < j  
n. so

m d x

ei;j :

1 i <j n

it was observed in section 17.4 (and proved in problem 19.2) that pr  bi d
bj    d 1=d for i    j and that the random variables ei;j , where 1   i < j   n,

   mcs        2017/6/5     19:42     page 913     #921

20.7. really great expectations

913

are pairwise independent.
(a) what are ex  ei;j    and var  ei;j    for i    j ?
(b) what are ex  m    and var  m   ?

(c) in a 6.01 class of 500 students, the youngest student was born 15 years ago
and the oldest 35 years ago. show that more than half the time, there will be will be
between 12 and 23 pairs of students who have the same birth date. (for simplicity,
assume that the distribution of birthdays is uniform over the 7305 days in the two
decade interval from 35 years ago to 15 years ago.)
hint: let d be the number of pairs of students in the class who have the same birth
date. note that jd (cid:0) ex  d  j < 6 iff d 2   12::23  .

problem 20.25.
a defendent in traf   c court is trying to beat a speeding ticket on the grounds that   
since virtually everybody speeds on the turnpike   the police have unconstitutional
discretion in giving tickets to anyone they choose. (by the way, we don   t recom-
mend this defense :-).)

to support his argument, the defendent arranged to get a random sample of trips
by 3,125 cars on the turnpike and found that 94% of them broke the speed limit
at some point during their trip. he says that as a consequence of sampling theory
(in particular, the pairwise independent sampling theorem), the court can be 95%
con   dent that the actual percentage of all cars that were speeding is 94    4%.
the judge observes that the actual number of car trips on the turnpike was never
considered in making this estimate. he is skeptical that, whether there were a
thousand, a million, or 100,000,000 car trips on the turnpike, sampling only 3,125
is suf   cient to be so con   dent.

suppose you were were the defendent. how would you explain to the judge
why the number of randomly selected cars that have to be checked for speeding
does not depend on the number of recorded trips? remember that judges are not
trained to understand formulas, so you have to provide an intuitive, nonquantitative
explanation.

problem 20.26.
the proof of the pairwise independent sampling theorem 20.4.1 was given for
a sequence r1; r2; : : : of pairwise independent random variables with the same
mean and variance.

   mcs        2017/6/5     19:42     page 914     #922

914

chapter 20 deviation from the mean

the theorem generalizes straighforwardly to sequences of pairwise independent
random variables, possibly with different distributions, as long as all their variances
are bounded by some constant.
theorem (generalized pairwise independent sampling). let x1; x2; : : : be a se-
quence of pairwise independent random variables such that var  xi      b for some
b (cid:21) 0 and all i (cid:21) 1. let

an wwd x1 c x2 c (cid:1)(cid:1)(cid:1) c xn
(cid:22)n wwd ex  an  :

n

;

then for every (cid:15) > 0,

pr  jan (cid:0) (cid:22)nj (cid:21) (cid:15)     b
(cid:15)2

(cid:1) 1
n

:

(20.28)

(a) prove the generalized pairwise independent sampling theorem.

(b) conclude that the following holds:
corollary (generalized weak law of large numbers). for every (cid:15) > 0,

n!1 pr  jan (cid:0) (cid:22)nj   (cid:15)   d 1:

lim

problem 20.27.
let g1; g2; g3; : : : ; be an in   nite sequence of pairwise independent random vari-
ables with the same expectation (cid:22) and the same    nite variance. let

         pn

f .n; (cid:15)/ wwd pr

id1 gi
n

(cid:0) (cid:22)

(cid:21)

           (cid:15)

:

the weak law of large numbers can be expressed as a logical formula of the
form:

q0 q1 q2 q3: f .n; (cid:15)/ (cid:21) 1 (cid:0)   

where q0; q1; q2; q3 is a sequence of four quanti   ers from among:

9n; 8n (cid:21) n0; 9n (cid:21) n0:
8n;
8n0; 9n0; 8n0 (cid:21) n; 9n0 (cid:21) n:
9   > 0:
9  ;
8  ;
8(cid:15);
9(cid:15) > 0:
9(cid:15);

8   > 0;
8(cid:15) > 0;

here the n; n0 range over nonnegative integers, and   ; (cid:15) range over nonnegative
real numbers.

write out the proper sequence q0; q1; q2; q3.

   mcs        2017/6/5     19:42     page 915     #923

20.7. really great expectations

915

exam problems
problem 20.28.
you work for the president and you want to estimate the fraction p of voters in the
entire nation that will prefer him in the upcoming elections. you do this by random
sampling. speci   cally, you select a random voter and ask them who they are going
to vote for. you do this n times, with each voter selected with uniform id203
and independently of other selections. finally, you use the fraction p of voters
who said they will vote for the president as an estimate for p.
(a) our theorems about sampling and distributions allow us to calculate how con-
   dent we can be that the random variable p takes a value near the constant p. this
calculation uses some facts about voters and the way they are chosen. indicate the
true facts among the following:

1. given a particular voter, the id203 of that voter preferring the president

is p.

2. the id203 that some voter is chosen more than once in the random sam-

ple goes to one as n increases.

3. the id203 that some voter is chosen more than once in the random sam-

4. all voters are equally likely to be selected as the third in the random sample

ple goes to zero as the population of voters grows.
of n voters (assuming n (cid:21) 3).

5. the id203 that the second voter in the random sample will favor the

president, given that the    rst voter prefers the president, is greater than p.

6. the id203 that the second voter in the random sample will favor the
president, given that the second voter is from the same state as the    rst, may
not equal p.

(b) suppose that according to your calculations, the following is true about your
polling:

pr  jp (cid:0) pj   0:04   (cid:21) 0:95:

you do the asking, you count how many said they will vote for the president, you
divide by n, and    nd the fraction is 0.53. among the following, indicate the legiti-
mate things you might say in a call to the president:
1. mr. president, p d 0:53!
2. mr. president, with id203 at least 95 percent, p is within 0.04 of 0.53.

   mcs        2017/6/5     19:42     page 916     #924

916

chapter 20 deviation from the mean

3. mr. president, either p is within 0.04 of 0.53 or something very strange (5-

in-100) has happened.

4. mr. president, we can be 95% con   dent that p is within 0.04 of 0.53.

problem 20.29.
yesterday, the programmers at a local company wrote a large program. to estimate
the fraction b of lines of code in this program that are buggy, the qa team will
take a small sample of lines chosen randomly and independently (so it is possible,
though unlikely, that the same line of code might be chosen more than once). for
each line chosen, they can run tests that determine whether that line of code is
buggy, after which they will use the fraction of buggy lines in their sample as their
estimate of the fraction b.

the company statistician can use estimates of a binomial distribution to calculate
a value s for a number of lines of code to sample which ensures that with 97%
con   dence, the fraction of buggy lines in the sample will be within 0.006 of the
actual fraction b of buggy lines in the program.

mathematically, the program is an actual outcome that already happened. the
random sample is a random variable de   ned by the process for randomly choosing
s lines from the program. the justi   cation for the statistician   s con   dence depends
on some properties of the program and how the random sample of s lines of code
from the program are chosen. these properties are described in some of the state-
ments below. indicate which of these statements are true, and explain your answers.

1. the id203 that the ninth line of code in the program is buggy is b.

2. the id203 that the ninth line of code chosen for the random sample is

defective is b.

3. all lines of code in the program are equally likely to be the third line chosen

in the random sample.

4. given that the    rst line chosen for the random sample is buggy, the probabil-

ity that the second line chosen will also be buggy is greater than b.

5. given that the last line in the program is buggy, the id203 that the next-

to-last line in the program will also be buggy is greater than b.

6. the expectation of the indicator variable for the last line in the random sam-

ple being buggy is b.

   mcs        2017/6/5     19:42     page 917     #925

20.7. really great expectations

917

7. given that the    rst two lines of code selected in the random sample are the
same kind of statement   they might both be assignment statements, or both
be conditional statements, or both loop statements,. . .    the id203 that
the    rst line is buggy may be greater than b.

8. there is zero id203 that all the lines in the random sample will be dif-

ferent.

problems for section 20.6

practice problems
problem 20.30.
a gambler plays 120 hands of draw poker, 60 hands of black jack, and 20 hands of
stud poker per day. he wins a hand of draw poker with id203 1/6, a hand of
black jack with id203 1/2, and a hand of stud poker with id203 1/5.
(a) what is the expected number of hands the gambler wins in a day?

(b) what would the markov bound be on the id203 that the gambler will win
at least 108 hands on a given day?

(c) assume the outcomes of the card games are pairwise, but possibly not mutu-
ally, independent. what is the variance in the number of hands won per day? you
may answer with a numerical expression that is not completely evaluated.

(d) what would the chebyshev bound be on the id203 that the gambler will
win at least 108 hands on a given day? you may answer with a numerical expres-
sion that is not completely evaluated.

(e) assuming outcomes of the card games are mutually independent, show that
the id203 that the gambler will win at least 108 hands on a given day is much
smaller than the bound in part (d). hint: e1(cid:0)2 ln 2   0:7

class problems
problem 20.31.
we want to store 2 billion records into a hash table that has 1 billion slots. assum-
ing the records are randomly and independently chosen with uniform id203
of being assigned to each slot, two records are expected to be stored in each slot.

   mcs        2017/6/5     19:42     page 918     #926

918

chapter 20 deviation from the mean

(cid:0)36.

of course under a random assignment, some slots may be assigned more than two
records.
(a) show that the id203 that a given slot gets assigned more than 23 records
is less than e
hint: use chernoff   s bound, theorem 20.6.1,. note that   .12/ > 18, where
  .c/ wwd c ln c (cid:0) c c 1.
(b) show that the id203 that there is a slot that gets assigned more than 23
(cid:0)15, which is less than 1=3; 000; 000. hint: 109 < e21; use
records is less than e
part (a).

a

problem 20.32.
sometimes i forget a few items when i leave the house in the morning. for example,
here are probabilities that i forget various pieces of footwear:

left sock
right sock
left shoe
right shoe

0:2
0:1
0:1
0:3

(a) let x be the number of these that i forget. what is ex  x   ?

(b) give a tight upper bound on the id203 that i forget one or more items
when no independence assumption is made about forgetting different items.

(c) use the markov bound to derive an upper bound on the id203 that i
forget 3 or more items.

(d) now suppose that i forget each item of footwear independently. use the
chebyshev bound to derive an upper bound on the id203 that i forget two
or more items.

(e) use murphy   s law, theorem 20.6.4, to derive a lower bound on the probabil-
ity that i forget one or more items.

(f) i   m supposed to remember many other items, of course: clothing, watch, back-
pack, notebook, pencil, kleenex, id, keys, etc. let x be the total number of items
i remember. suppose i remember items mutually independently and ex  x    d 36.
use chernoff   s bound to give an upper bound on the id203 that i remember
48 or more items.

   mcs        2017/6/5     19:42     page 919     #927

20.7. really great expectations

919

(g) give an upper bound on the id203 that i remember 108 or more items.

problem 20.33.
reasoning based on the chernoff bound goes a long way in explaining the recent
subprime mortgage collapse. a bit of standard vocabulary about the mortgage
market is needed:

(cid:15) a loan is money lent to a borrower. if the borrower does not pay on the
loan, the loan is said to be in default, and collateral is seized. in the case of
mortgage loans, the borrower   s home is used as collateral.
(cid:15) a bond is a collection of loans, packaged into one entity. a bond can be
divided into tranches, in some ordering, which tell us how to assign losses
from defaults. suppose a bond contains 1000 loans, and is divided into 10
tranches of 100 bonds each. then, all the defaults must    ll up the lowest
tranche before the affect others. for example, suppose 150 defaults hap-
pened. then, the    rst 100 defaults would occur in tranche 1, and the next 50
defaults would happen in tranche 2.
(cid:15) the lowest tranche of a bond is called the mezzanine tranche.
(cid:15) we can make a    super bond    of tranches called a collateralized debt obli-
gation (cdo) by collecting mezzanine tranches from different bonds. this
super bond can then be itself separated into tranches, which are again ordered
to indicate how to assign losses.

(a) suppose that 1000 loans make up a bond, and the fail rate is 5% in a year.
assuming mutual independence, give an upper bound for the id203 that there
are one or more failures in the second-worst tranche. what is the id203 that
there are failures in the best tranche?

(b) now, do not assume that the loans are independent. give an upper bound for
the id203 that there are one or more failures in the second tranche. what is an
upper bound for the id203 that the entire bond defaults? show that it is a tight
bound. hint: use markov   s theorem.

(c) given this setup (and assuming mutual independence between the loans), what
is the expected failure rate in the mezzanine tranche?

(d) we take the mezzanine tranches from 100 bonds and create a cdo. what is
the expected number of underlying failures to hit the cdo?

   mcs        2017/6/5     19:42     page 920     #928

920

chapter 20 deviation from the mean

(e) we divide this cdo into 10 tranches of 1000 bonds each. assuming mutual
independence, give an upper bound on the id203 of one or more failures in the
best tranche. the third tranche?

(f) repeat the previous question without the assumption of mutual independence.

homework problems
problem 20.34.
we have two coins: one is a fair coin, but the other produces heads with id203
3=4. one of the two coins is picked, and this coin is tossed n times. use the
chernoff bound to determine the smallest n which allows determination of which
coin was picked with 95% con   dence.

problem 20.35.
an in   nite version of murphy   s law is that if an in   nite number of mutually inde-
pendent events are expected to happen, then the id203 that only    nitely many
happen is 0. this is known as the    rst borel-cantelli lemma.
(a) let a0; a1; : : : be any in   nite sequence of mutually independent events such
that

x
prove that pr  no an occurs   d 0.
hint: bk the event that no an with n   k occurs. so the event that no an occurs is

pr  an   d 1:

(20.29)

n2n

k2n
apply murphy   s law, theorem 20.6.4, to bk.
(b) conclude that pr  only    nitely many an   s occur   d 0.
hint: let ck be the event that no an with n (cid:21) k occurs. so the event that only
   nitely many an   s occur is

b wwd\

bk:

c wwd[

ck:

k2n

apply part (a) to ck.

   mcs        2017/6/5     19:42     page 921     #929

20.7. really great expectations

921

problems for section 20.7

practice problems
problem 20.36.
let r be a positive integer valued random variable such that

pdfr.n/ d 1
cn3 ;
1x

c wwd

1
n3 :

nd1

where

(a) prove that ex  r   is    nite.

(b) prove that var  r   is in   nite.
a joking way to phrase the point of this example is    the square root of in   nity may
be    nite.    namely, let t wwd r2; then part (b) implies that ex  t    d 1 while
p
ex  

t    < 1 by (a).

class problems
problem 20.37.
you have a biased coin with nonzero id203 p < 1 of tossing a head. you
toss until a head comes up. then, similar to the example in section 20.7, you
keep tossing until you get another head preceded by a run of consecutive tails
whose length is within 10 of your original run. that is, if you began by tossing k
tails followed by a head, then you continue tossing until you get a run of at least
maxfk (cid:0) 10; 0g consecutive tails.
(a) let h be the number of heads that you toss until you get the required run of
tails. prove that the expected value of h is in   nite.

(b) let r < 1 be a positive real number. instead of waiting for a run of tails of
length k (cid:0) 10 when your original run was length k, just wait for a run of length at
least rk. show that in this case, the expected number of heads is    nite.

exam problems
problem 20.38.
you have a random process for generating a positive integer k. the behavior of

   mcs        2017/6/5     19:42     page 922     #930

922

chapter 20 deviation from the mean

your process each time you use it is (mutually) independent of all its other uses. you
use your process to generate an integer, and then use your procedure repeatedly
until you generate an integer as big as your    rst one. let r be the number of
additional integers you have to generate.
(a) state and brie   y explain a simple closed formula for ex  r j k d k   in terms
of pr  k (cid:21) k  .
(cid:0)4/.
suppose pr  k d k   d    .k
(b) show that pr  k (cid:21) k   d    .k
(c) show that ex  r   is in   nite.

(cid:0)3/.

   mcs        2017/6/5     19:42     page 923     #931

21

id93
id93 are used to model situations in which an object moves in a se-
quence of steps in randomly chosen directions. for example, physicists use three-
dimensional id93 to model brownian motion and gas diffusion. in this
chapter we   ll examine two examples of id93. first, we   ll model gambling
as a simple 1-dimensional random walk   a walk along a straight line. then we   ll
explain how the google search engine used id93 through the graph of
world-wide web links to determine the relative importance of websites.

21.1 gambler   s ruin

suppose a gambler starts with an initial stake of n dollars and makes a sequence of
$1 bets. if he wins an individual bet, he gets his money back plus another $1. if he
loses the bet, he loses the $1.

we can model this scenario as a random walk between integer points on the real
line. the position on the line at any time corresponds to the gambler   s cash-on-
hand, or capital. walking one step to the right corresponds to winning a $1 bet
and thereby increasing his capital by $1. similarly, walking one step to the left
corresponds to losing a $1 bet.
the gambler plays until either he runs out of money or increases his capital to a
target amount of t dollars. the amount t (cid:0) n is de   ned to be his intended pro   t.
if he reaches his target, he will have won his intended pro   t and is called an
overall winner. if his capital reaches zero before reaching his target, he will have
lost n dollars; this is called going broke or being ruined. we   ll assume that the
gambler has the same id203 p of winning each individual $1 bet, and that the
bets are mutually independent. we   d like to    nd the id203 that the gambler
wins.

the gambler   s situation as he proceeds with his $1 bets is illustrated in fig-
ure 21.1. the random walk has boundaries at 0 and t . if the random walk ever
reaches either of these boundary values, then it terminates.
in an unbiased game, the individual bets are fair: the gambler is equally likely
to win or lose each bet   that is, p d 1=2. the gambler is more likely to win if
p > 1=2 and less likely to win if p < 1=2; these id93 are called biased.
we want to determine the id203 that the walk terminates at boundary t    the
id203 that the gambler wins. we   ll do this in section 21.1.1. but before we

   mcs        2017/6/5     19:42     page 924     #932

924

chapter 21 id93

figure 21.1 a graph of the gambler   s capital versus time for one possible se-
quence of bet outcomes. at each time step, the graph goes up with probabil-
ity p and down with id203 1 (cid:0) p. the gambler continues betting until the
graph reaches either 0 or t . if he starts with $n, his intended pro   t is $m where
t d n c m.

derive the id203, let   s examine what it turns out to be.

let   s begin by supposing the gambler plays an unbiased game starting with $100
and will play until he goes broke or reaches a target of 200 dollars. since he starts
equidistant from his target and bankruptcy in this case, it   s clear by symmetry that
his id203 of winning is 1/2.
we   ll show below that starting with n dollars and aiming for a target of t (cid:21) n
dollars, the id203 the gambler reaches his target before going broke is n=t .
for example, suppose he wants to win the same $100, but instead starts out with
$500. now his chances are pretty good: the id203 of his making the 100
dollars is 5=6. and if he started with one million dollars still aiming to win $100
dollars he almost certain to win: the id203 is 1m=.1m c 100/ > :9999.
so in the unbiased game, the larger the initial stake relative to the target, the
higher the id203 the gambler will win, which makes some intuitive sense. but
note that although the gambler now wins nearly all the time, when he loses, he
loses big. bankruptcy costs him $1m, while when he wins, he wins only $100.
the gambler   s average win remains zero dollars, which is what you   d expect when
making fair bets.

another useful way to describe this scenario is as a game between two players.
say albert starts with $500, and eric starts with $100. they    ip a fair coin, and

capitalgambler   snt = n + mtimebet outcomes:wllwlwwlll   mcs        2017/6/5     19:42     page 925     #933

21.1. gambler   s ruin

925

every time a head appears, albert wins $1 from eric, and vice versa for tails.
they play this game until one person goes bankrupt. this problem is identical to
the gambler   s ruin problem with n d 500 and t d 100 c 500 d 600. the
id203 of albert winning is 500=600 d 5=6.
now suppose instead that the gambler chooses to play roulette in an american
casino, always betting $1 on red. because the casino puts two green numbers on its
roulette wheels, the id203 of winning a single bet is a little less than 1/2. the
casino has an advantage, but the bets are close to fair, and you might expect that
starting with $500, the gambler has a reasonable chance of winning $100   the 5/6
id203 of winning in the unbiased game surely gets reduced, but perhaps not
too drastically.

this mistaken intuition is how casinos stay in business. in fact, the gambler   s
odds of winning $100 by making $1 bets against the    slightly    unfair roulette wheel
are less than 1 in 37,000. if that   s surprising to you, it only gets weirder from here:
1 in 37,000 is in fact an upper bound on the gambler   s chance of winning regardless
of his starting stake. whether he starts with $5000 or $5 billion, he still has almost
no chance of winning!

21.1.1 the id203 of avoiding ruin
we will determine the id203 that the gambler wins using an idea of pascal   s
dating back to the beginnings id203 theory in the mid-seventeenth century.

pascal viewed the walk as a two-player game between albert and eric as de-
scribed above. albert starts with a stack of n chips and eric starts with a stack of
m d t (cid:0) n chips. at each bet, albert wins eric   s top chip with id203 p and
loses his top chip to eric with id203 q wwd 1 (cid:0) p. they play this game until
one person goes bankrupt.

pascal   s ingenious idea was to alter the worth of the chips to make the game
fair regardless of p. speci   cally, pascal assigned albert   s bottom chip a worth of
rwwdq=p and then assigned successive chips up his stack worths equal to r 2; r 3; : : :
up to his top chip with worth r n. eric   s top chip gets assigned worth r nc1, and the
successive chips down his stack are worth r nc2; r nc3; : : : down to his bottom chip
worth r ncm.
the expected payoff of albert   s    rst bet is worth

r nc1 (cid:1) p (cid:0) r n (cid:1) q d 

  (cid:1) p (cid:0) r n (cid:1) q d 0:

r n (cid:1) q

p

so this assignment makes the    rst bet a fair one in terms of worth. moreover,
whether albert wins or loses the bet, the successive chip worths counting up al-
bert   s stack and then down eric   s remain r; r 2; : : : ; r n; : : : ; r ncm, ensuring by the

   mcs        2017/6/5     19:42     page 926     #934

926

chapter 21 id93

ncmx

same reasoning that every bet has fair worth. so, albert   s expected worth at the
end of the game is the sum of the expectations of the worth of each bet, which is
0.1

when albert wins all of eric   s chips his total gain is worth

and when he loses all his chips to eric, his total loss is worthpn

idnc1

r i ;

be albert   s id203 of winning, we now have

id1 r i. letting wn

0 d ex  worth of albert   s payoff   d wn

r i (cid:0) .1 (cid:0) wn/

r i :

ncmx

idnc1

nx

id1

in the truly fair game when r d 1, we have 0 d mwn (cid:0) n.1 (cid:0) wn/, so wn d
n=.n c m/, as claimed above.
in the biased game with r    1, we have

solving for wn gives

0 d r (cid:1) r ncm (cid:0) r n
r (cid:0) 1
wn d r n (cid:0) 1
r ncm (cid:0) 1

(cid:1) wn (cid:0) r (cid:1) r n (cid:0) 1
r (cid:0) 1
d r n (cid:0) 1
r t (cid:0) 1

(cid:1) .1 (cid:0) wn/:

we have now proved

(21.1)

theorem 21.1.1. in the gambler   s ruin game with initial capital n, target t , and
id203 p of winning each individual bet,

8      <      :

n

t

r n (cid:0) 1
r t (cid:0) 1

for p d 1

2

for p    1

2

;

;

(21.2)

pr  the gambler wins   d

where r wwd q=p.

1here we   re legitimately appealing to in   nite linearity, since the payoff amounts remain bounded

independent of the number of bets.

   mcs        2017/6/5     19:42     page 927     #935

21.1. gambler   s ruin

927

21.1.2 a recurrence for the id203 of winning
fortunately, you don   t need to be as ingenuious pascal in order to handle gambler   s
ruin, because linear recurrences offer a methodical approach to the basic problems.
the id203 that the gambler wins is a function of his initial capital n his
target t (cid:21) n and the id203 p that the wins an individual one dollar bet. for
   xed p and t , let wn be the gambler   s id203 of winning when his initial
capital is n dollars. for example, w0 is the id203 that the gambler will win
given that he starts off broke and wt is the id203 he will win if he starts off
with his target amount, so clearly

w0 d 0;
wt d 1:

(21.3)
(21.4)

otherwise, the gambler starts with n dollars, where 0 < n < t . now suppose
the gambler wins his    rst bet. in this case, he is left with nc 1 dollars and becomes
a winner with id203 wnc1. on the other hand, if he loses the    rst bet, he is
left with n (cid:0) 1 dollars and becomes a winner with id203 wn(cid:0)1. by the total
id203 rule, he wins with id203 wn d pwnc1 c qwn(cid:0)1. solving for
wnc1 we have

wnc1 d wn

(cid:0) rwn(cid:0)1

p

(21.5)

where r is q=p as in section 21.1.1.
this recurrence holds only for n c 1   t , but there   s no harm in using (21.5) to
de   ne wnc1 for all n c 1 > 1. now, letting

w .x/ wwd w0 c w1x c w2x2 c (cid:1)(cid:1)(cid:1)

be the generating function for the wn, we derive from (21.5) and (21.3) using our
generating function methods that

w .x/ d

w1x

rx2 (cid:0) x=p c 1

:

but it   s easy to check that the denominator factors:

c 1 d .1 (cid:0) x/.1 (cid:0) rx/:
now if p    q, then using partial fractions we conclude that

rx2 (cid:0) x

p

w .x/ d a
1 (cid:0) x

c b
1 (cid:0) rx

;

(21.6)

(21.7)

   mcs        2017/6/5     19:42     page 928     #936

928

chapter 21 id93

for some constants a; b. to solve for a; b, note that by (21.6) and (21.7),

so letting x d 1, we get a d w1=.1 (cid:0) r/, and letting x d 1=r, we get b d
w1=.r (cid:0) 1/. therefore,

w1x d a.1 (cid:0) rx/ c b.1 (cid:0) x/;
 

  1

(cid:0) 1
1 (cid:0) x

;

w .x/ d w1
r (cid:0) 1

which implies

finally, we can use (21.8) to solve for w1 by letting n d t to get

:

(21.8)

wn d w1

1 (cid:0) rx
r n (cid:0) 1
r (cid:0) 1
w1 d r (cid:0) 1
r t (cid:0) 1

:

plugging this value of w1 into (21.8), we arrive at the solution:

wn d r n (cid:0) 1
r t (cid:0) 1

;

matching pascal   s result (21.1).
in the unbiased case where p d q, we get from (21.6) that

w .x/ d w1x

.1 (cid:0) x/2 ;

and again can use partial fractions to match pascal   s result (21.2).

21.1.3 a simpler expression for the biased case
the expression (21.1) for the id203 that the gambler wins in the biased game
is a little hard to interpret. there is a simpler upper bound which is nearly tight
when the gambler   s starting capital is large and the game is biased against the
gambler. then r > 1, both the numerator and denominator in (21.1) are positive,
and the numerator is smaller. this implies that

wn <

r n
r t

and gives:

 t(cid:0)n

d  1

r

  1

 t(cid:0)n

r

   mcs        2017/6/5     19:42     page 929     #937

21.1. gambler   s ruin

929

corollary 21.1.2. in the gambler   s ruin game with initial capital n, target t , and
id203 p < 1=2 of winning each individual bet,

pr  the gambler wins   <

(21.9)

where r wwd q=p > 1.
so the gambler gains his intended pro   t before going broke with id203 at
most 1=r raised to the intended pro   t power. notice that this upper bound does
not depend on the gambler   s starting capital, but only on his intended pro   t. this
has the amazing consequence we announced above: no matter how much money he
starts with, if he makes $1 bets on red in roulette aiming to win $100, the id203

that he wins is less than  18=38

 100 d  9

 100

20=38

10

<

1

37; 648

:

the bound (21.9) decreases exponentially as the intended pro   t increases. so,
for example, doubling his intended pro   t will square his id203 of winning.
in this case, the id203 that the gambler   s stake goes up 200 dollars before he
goes broke playing roulette is at most

.9=10/200 d ..9=10/100/2 <

  1

37; 648

 2

;

which is about 1 in 1.4 billion.

intuition
why is the gambler so unlikely to make money when the game is only slightly
biased against him? to answer this intuitively, we can identify two forces at work
on the gambler   s wallet. first, the gambler   s capital has random upward and down-
ward swings from runs of good and bad luck. second, the gambler   s capital will
have a steady, downward drift, because the negative bias means an average loss of
a few cents on each $1 bet. the situation is shown in figure 21.2.

our intuition is that if the gambler starts with, say, a billion dollars, then he is
sure to play for a very long time, so at some point there should be a lucky, upward
swing that puts him $100 ahead. but his capital is steadily drifting downward. if
the gambler does not have a lucky, upward swing early on, then he is doomed.
after his capital drifts downward by tens and then hundreds of dollars, the size of
the upward swing the gambler needs to win grows larger and larger. and as the

   mcs        2017/6/5     19:42     page 930     #938

930

chapter 21 id93

figure 21.2
swings of good luck.

in a biased random walk, the downward drift usually dominates

size of the required swing grows, the odds that it occurs decrease exponentially. as
a rule of thumb, drift dominates swings in the long term.
we can quantify these drifts and swings. after k rounds for k   min.m; n/, the
number of wins by our player has a binomial distribution with parameters p < 1=2
and k. his expected win on any single bet is p(cid:0)q d 2p(cid:0)1 dollars, so his expected
capital is n(cid:0)k.1(cid:0)2p/. now to be a winner, his actual number of wins must exceed
the expected number by mc k.1(cid:0) 2p/. but from the formula (20.15), the binomial
kp.1 (cid:0) p/ . so for the gambler to
p
d    .

distribution has a standard deviation of onlyp

win, he needs his number of wins to deviate by

k/

p
m c k.1 (cid:0) 2p/
kp.1 (cid:0) 2p/

times its standard deviation. in our study of binomial tails, we saw that this was
extremely unlikely.

in a fair game, there is no drift; swings are the only effect. in the absence of
downward drift, our earlier intuition is correct. if the gambler starts with a trillion
dollars then almost certainly there will eventually be a lucky swing that puts him
$100 ahead.

21.1.4 how long a walk?
now that we know the id203 wn that the gambler is a winner in both fair and
unfair games, we consider how many bets he needs on average to either win or go
broke. a linear recurrence approach works here as well.

wn0downwarddriftgambler   swealthtimeupwardswing(too late)   mcs        2017/6/5     19:42     page 931     #939

21.1. gambler   s ruin

931

for    xed p and t , let en be the expected number of bets until the game ends
when the gambler   s initial capital is n dollars. since the game is over in zero steps
if n d 0 or t , the boundary conditions this time are e0 d et d 0.
otherwise, the gambler starts with n dollars, where 0 < n < t . now by the
conditional expectation rule, the expected number of steps can be broken down
into the expected number of steps given the outcome of the    rst bet weighted by
the id203 of that outcome. but after the gambler wins the    rst bet, his capital
is n c 1, so he can expect to make another enc1 bets. that is,

ex  #bets starting with $n j gambler wins    rst bet   d 1 c enc1:

similarly, after the gambler loses his    rst bet, he can expect to make another en(cid:0)1
bets:

ex  #bets starting with $n j gambler loses    rst bet   d 1 c en(cid:0)1:

so we have
en d p ex  #bets starting with $n j gambler wins    rst bet   c q ex  #bets starting with $n j gambler loses    rst bet  

d p.1 c enc1/ c q.1 c en(cid:0)1/ d penc1 c qen(cid:0)1 c 1:

this yields the linear recurrence

en(cid:0)1 (cid:0) 1
p
the routine solution of this linear recurrence yields:

enc1 d 1

en (cid:0) q

p

p

:

(21.10)

theorem 21.1.3. in the gambler   s ruin game with initial capital n, target t , and
id203 p of winning each bet,
n.t (cid:0) n/
wn (cid:1) t (cid:0) n
p (cid:0) q

ex  number of bets   d

for p d 1

for p    1
where wn d .r n (cid:0) 1/=.r t (cid:0) 1/

(21.11)

2

2

;

d pr  the gambler wins  :

8                  <                  :

in the unbiased case, (21.11) can be rephrased simply as

ex  number of fair bets   d initial capital (cid:1) intended pro   t:

(21.12)
for example, if the gambler starts with $10 dollars and plays until he is broke or
ahead $10, then 10 (cid:1) 10 d 100 bets are required on average. if he starts with $500
and plays until he is broke or ahead $100, then the expected number of bets until
the game is over is 500 (cid:2) 100 d 50; 000. this simple formula (21.12) cries out for
an intuitive proof, but we have not found one (where are you, pascal?).

   mcs        2017/6/5     19:42     page 932     #940

932

chapter 21 id93

21.1.5 quit while you are ahead
suppose that the gambler never quits while he is ahead. that is, he starts with
n > 0 dollars, ignores any target t , but plays until he is    at broke. call this the
unbounded gambler   s ruin game. it turns out that if the game is not favorable, that
is, p   1=2, the gambler is sure to go broke. in particular, this holds in an unbiased
game with p d 1=2.
lemma 21.1.4. if the gambler starts with one or more dollars and plays a fair
unbounded game, then he will go broke with id203 1.

proof. if the gambler has initial capital n and goes broke in a game without reach-
ing a target t , then he would also go broke if he were playing and ignored the
target. so the id203 that he will lose if he keeps playing without stopping at
any target t must be at least as large as the id203 that he loses when he has a
target t > n.
but we know that in a fair game, the id203 that he loses is 1 (cid:0) n=t . this
number can be made arbitrarily close to 1 by choosing a suf   ciently large value of
t . hence, the id203 of his losing while playing without any target has a lower
(cid:4)
bound arbitrarily close to 1, which means it must in fact be 1.

so even if the gambler starts with a million dollars and plays a perfectly fair
game, he will eventually lose it all with id203 1. but there is good news: if
the game is fair, he can    expect    to play forever:

lemma 21.1.5. if the gambler starts with one or more dollars and plays a fair
unbounded game, then his expected number of plays is in   nite.

a proof appears in problem 21.2.
so even starting with just one dollar, the expected number of plays before going
broke is in   nite! this sounds reassuring   you can go about your business without
worrying about being doomed, because doom will be in   nitely delayed. to illus-
trate a situation where you really needn   t worry, think about mean time to failure
(cid:0)100. in this
with a really tiny id203 of failure in any given second   say 10
case you are unlikely to fail any time much sooner than many lifetimes of the es-
timated age of the universe, even though you will eventually fail with id203
one.

but in general, you shouldn   t feel reassured by an in   nite expected time to go
broke. for example, think about a variant gambler   s ruin game which works as
(cid:0)100 of failing in any second.
follows: run one second of the process that has a 10
if it does not fail, then you go broke immediately. otherwise, you play a fair, un-
bounded gambler   s ruin game. now there is an overwhelming id203, namely,

   mcs        2017/6/5     19:42     page 933     #941

21.2. id93 on graphs

933

(cid:0)100, that you will go broke immediately. but there is a 10

(cid:0)100 id203
1 (cid:0) 10
that you will wind up playing fair gambler   s ruin, so your overall expected time
(cid:0)100 times the expectation of fair gambler   s ruin, namely, it will
will be at least 10
still be in   nite.

for the actual fair, unbounded gambler   s ruin gain starting with one dollar, there
is a a 50% chance the gambler will go broke after the    rst bet, and a more than
15=16 chance of going broke within    ve bets, for example. so in   nite expected
time is not much consolation to a gambler who goes broke quickly with high prob-
ability.

21.2 id93 on graphs

the hyperlink structure of the world wide web can be described as a digraph.
the vertices are the web pages with a directed edge from vertex x to vertex y if
x has a link to y. a digraph showing part of the website for mit subject 6.042,
mathematics for computer science, is shown in figure 21.3.

the web graph is an enormous graph with trillions of vertices. in 1995, two
students at stanford, larry page and sergey brin, realized that the structure of
this graph could be very useful in building a search engine. traditional document
searching programs had been around for a long time and they worked in a fairly
straightforward way. basically, you would enter some search terms and the search-
ing program would return all documents containing those terms. a relevance score
might also be returned for each document based on the frequency or position that
the search terms appeared in the document. for example, if the search term ap-
peared in the title or appeared 100 times in a document, that document would get a
higher score.

this approach works    ne if you only have a few documents that match a search
term. but on the web, there are many billions of documents and millions of matches
to a typical search. for example, on may 2, 2012, a search on google for        mathe-
matics for computer science    text    gave 482,000 hits! which ones should we look
at    rst? just because a page gets a high keyword score   say because it has    math-
ematics mathematics : : : mathematics    copied 200 times across the front of the
document   does not make it a great candidate for attention. the web is    lled with
bogus websites that repeat certain words over and over in order to attract visitors.
google   s enormous market capital in part derives from the revenue it receives
from advertisers paying to appear at the top of search results. that top placement
would not be worth much if google   s results were as easy to manipulate as keyword
frquencies. advertisers pay because google   s ranking method is consistently good

   mcs        2017/6/5     19:42     page 934     #942

934

chapter 21 id93

figure 21.3 website digraph for mit subject 6.042

csail.mit.edu/6.042!lms.mitx.edu!piazza.com!stellar.mit.edu/s/course/6/fa15/6.042/!stellar.mit.edu/s/course/6/fa15/6.042/materials!stellar.mit.edu/s/course/6/fa15/6.042/gradebook!csail.mit.edu/6.042/classinfo!csail.mit.edu/6.042/grading_questions!csail.mit.edu/6.042/midterm1!csail.mit.edu/6.042/midterm1_histogram!youtube.com/fiakux9efxg!   mcs        2017/6/5     19:42     page 935     #943

21.2. id93 on graphs

935

at determining the most relevant web pages. for example, google demonstrated its
accuracy in our case by giving    rst rank2 to our 6.042 text.

so how did google know to pick our text to be    rst out of 482,000?   because
back in 1995 larry and sergey got the idea to allow the digraph structure of the
web to determine which pages are likely to be the most important.

21.2.1 a first crack at page rank
looking at the web graph, do you have an idea which vertex/page might be the
best to rank    rst? assume that all the pages match the search terms for now. well,
intuitively, we should choose x2, since lots of other pages point to it. this leads
us to their    rst idea: try de   ning the page rank of x to be indegree.x/, the number
of links pointing to x. the idea is to think of web pages as voting for the most
important page   the more votes, the better the rank.

unfortunately, there are some problems with this idea. suppose you wanted to
have your page get a high ranking. one thing you could do is to create lots of
dummy pages with links to your page.

there is another problem   a page could become unfairly in   uential by having

lots of links to other pages it wanted to hype.

2first rank for some reason was an early version archived at princeton; the spring 2010 version

on the mit open courseware site ranked 4th and 5th.

+n   mcs        2017/6/5     19:42     page 936     #944

936

chapter 21 id93

so this strategy for high ranking would amount to,    vote early, vote often,    which
is no good if you want to build a search engine that   s worth paying fees for. so,
admittedly, their original idea was not so great.
it was better than nothing, but
certainly not worth billions of dollars.

21.2.2 random walk on the web graph
but then sergey and larry thought some more and came up with a couple of im-
provements. instead of just counting the indegree of a vertex, they considered the
id203 of being at each page after a long random walk on the web graph. in
particular, they decided to model a user   s web experience as following each link on
a page with uniform id203. for example, if the user is at page x, and there
are three links from page x, then each link is followed with id203 1=3. more
generally, they assigned each edge x ! y of the web graph with a id203
conditioned on being on page x:

pr(cid:2)follow link hx! yi j at page x(cid:3) wwd

1

outdeg.x/

:

the simulated user experience is then just a random walk on the web graph.

we can also compute the id203 of arriving at a particular page y by sum-

pr(cid:2)follow link hx! yi j at page x(cid:3) (cid:1) pr  at page x  

ming over all edges pointing to y. we thus have

pr  go to y   d x
d x

edges hx!yi

edges hx!yi

pr  at x  
outdeg.x/

(21.13)

for example, in our web graph, we have

pr  go to x4   d pr  at x7  

2

c pr  at x2  

1

:

+1+1+1+1+1   mcs        2017/6/5     19:42     page 937     #945

21.2. id93 on graphs

937

one can think of this equation as x7 sending half its id203 to x2 and the other
half to x4. the page x2 sends all of its id203 to x4.

there   s one aspect of the web graph described thus far that doesn   t mesh with
the user experience   some pages have no hyperlinks out. under the current model,
the user cannot escape these pages. in reality, however, the user doesn   t fall off
the end of the web into a void of nothingness. instead, he restarts his web journey.
moreover, even if a user does not get stuck at a dead end, they will commonly get
discouraged after following some unproductive path for a while and will decide to
restart.

to model this aspect of the web, sergey and larry added a supervertex to the
web graph and added an edge from every page to the supervertex. moreover, the
supervertex points to every other vertex in the graph with equal id203, allow-
ing the walk to restart from a random place. this ensures that the graph is strongly
connected.

if a page had no hyperlinks, then its edge to the supervertex has to be assigned
id203 one. for pages that had some hyperlinks, the additional edge pointing
to the supervertex was assigned some specially given id203. in the original
versions of page rank, this id203 was arbitrarily set to 0.15. that is, each
vertex with outdegree n (cid:21) 1 got an additional edge pointing to the supervertex
with assigned id203 0.15; its other n outgoing edges were still kept equally
likely, that is, each of the n edges was assigned id203 0:85=n.

21.2.3 stationary distribution & page rank
the basic idea behind page rank is    nding a stationary distribution over the web
graph, so let   s de   ne a stationary distribution.

suppose each vertex is assigned a id203 that corresponds, intuitively, to the
likelihood that a random walker is at that vertex at a randomly chosen time. we
assume that the walk never leaves the vertices in the graph, so we require that

pr  at x   d 1:

(21.14)

vertices x

de   nition 21.2.1. an assignment of probabilities to vertices in a digraph is a sta-
tionary distribution if for all vertices x

pr  at x   d pr  go to x at next step  

sergey and larry de   ned their page ranks to be a stationary distribution. they
did this by solving the following system of linear equations:    nd a nonnegative

x

   mcs        2017/6/5     19:42     page 938     #946

938

chapter 21 id93

number rank.x/ for each vertex x such that

rank.x/ d x

edges hy!xi

rank.y/
outdeg.y/

;

(21.15)

x

corresponding to the intuitive equations given in (21.13). these numbers must also
satisfy the additional constraint corresponding to (21.14):

rank.x/ d 1:

(21.16)

vertices x

so if there are n vertices, then equations (21.15) and (21.16) provide a system
of n c 1 linear equations in the n variables rank.x/. note that constraint (21.16)
is needed because the remaining constraints (21.15) could be satis   ed by letting
rank.x/ wwd 0 for all x, which is useless.
sergey and larry were smart fellows, and they set up their page rank algorithm
so it would always have a meaningful solution. strongly connected graphs have
unique stationary distributions (problem 21.12), and their addition of a superver-
tex ensures this. moreover, starting from any vertex and taking a suf   ciently long
random walk on the graph, the id203 of being at each page will get closer and
closer to the stationary distribution. note that general digraphs without superver-
tices may have neither of these properties: there may not be a unique stationary
distribution, and even when there is, there may be starting points from which the
probabilities of positions during a random walk do not converge to the stationary
distribution (problem 21.8).

now just keeping track of the digraph whose vertices are trillions of web pages
is a daunting task. that   s why in 2011 google invested $168,000,000 in a solar
power plant   the electrical power drawn by google   s servers in 2011 would have
supplied the needs of 200,000 households.3 indeed, larry and sergey named their
system google after the number 10100   which is called a    googol      to re   ect the
fact that the web graph is so enormous.

anyway, now you can see how this text ranked    rst out of 378,000 matches.
lots of other universities used our notes and presumably have links to the mit
mathematics for computer science open course ware site, and the university sites
themselves are legitimate, which ultimately leads to the text getting a high page
rank in the web graph.

3google details, and defends, its use of electricity, new york times, september 8, 2011.

   mcs        2017/6/5     19:42     page 939     #947

21.2. id93 on graphs

939

problems for section 21.1

practice problems
problem 21.1.
suppose that a gambler is playing a game in which he makes a series of $1 bets.
he wins each one with id203 0.49, and he keeps betting until he either runs
out of money or reaches some    xed goal of t dollars.

let t .n/ be the expected number of bets the gambler makes until the game ends,
where n is the number of dollars the gambler has when he starts betting. then the
function t satis   es a linear recurrence of the form

t .n/ d a (cid:1) t .n c 1/ c b (cid:1) t .n (cid:0) 1/ c c

for real constants a, b, c, and 0 < n < t .
(a) what are the values of a, b and c?

(b) what is t .0/?

(c) what is t .t /?

class problems
problem 21.2.
in a gambler   s ruin scenario, the gambler makes independent $1 bets, where the
id203 of winning a bet is p and of losing is q wwd 1 (cid:0) p. the gambler keeps
betting until he goes broke or reaches a target of t dollars.
suppose t d 1, that is, the gambler keeps playing until he goes broke. let
r be the id203 that starting with n > 0 dollars, the gambler   s stake ever gets
reduced to n (cid:0) 1 dollars.
(a) explain why

r d q c pr 2:

(b) conclude that if p   1=2, then r d 1.
(c) prove that even in a fair game, the gambler is sure to get ruined no matter how
much money he starts with!

(d) let t be the expected time for the gambler   s stake to go down by 1 dollar.
verify that

t d q c p.1 c 2t /:

   mcs        2017/6/5     19:42     page 940     #948

940

chapter 21 id93

conclude that starting with a 1 dollar stake in a fair game, the gambler can expect
to play forever!

problem 21.3.
a gambler is placing $1 bets on the    1st dozen    in roulette. this bet wins when a
number from one to twelve comes in, and then the gambler gets his $1 back plus
$2 more. recall that there are 38 numbers on the roulette wheel.

the gambler   s initial stake in $n and his target is $t . he will keep betting until
he runs out of money (   goes broke   ) or reaches his target. let wn be the id203
of the gambler winning, that is, reaching target $t before going broke.
(a) write a linear recurrence with boundary conditions for wn. you need not solve
the recurrence.

(b) let en be the expected number of bets until the game ends. write a linear
recurrence with boundary conditions for en. you need not solve the recurrence.

problem 21.4.
in the fair gambler   s ruin game with initial stake of n dollars and target of t
dollars, let en be the number of $1 bets the gambler makes until the game ends
(because he reaches his target or goes broke).
(a) describe constants a; b; c such that

en d aen(cid:0)1 c ben(cid:0)2 c c:

(21.17)

for 1 < n < t .
(b) let en be de   ned by (21.17) for all n > 1, where e0 d 0 and e1 d d for
some constant d. derive a closed form (involving d) for the generating function

e.x/ wwdp1

0 enxn.

(c) find a closed form (involving d) for en.

(d) use part (c) to solve for d.
(e) prove that en d n.t (cid:0) n/.

   mcs        2017/6/5     19:42     page 941     #949

21.2. id93 on graphs

941

problems for section 21.2

practice problems
problem 21.5.
consider the following random-walk graphs:

figure 21.4

figure 21.5

figure 21.6

(a) find d.x/ for a stationary distribution for graph 21.4.

(b) find d.y/ for a stationary distribution for graph 21.4.

(c) if you start at node x in graph 21.4 and take a (long) random walk, does the
distribution over nodes ever get close to the stationary distribution?

(d) find d.w/ for a stationary distribution for graph 21.5.

xy11wz10.90.1ab1c1/21/21/21d1/2   mcs        2017/6/5     19:42     page 942     #950

942

chapter 21 id93

(e) find d.z/ for a stationary distribution for graph 21.5.

(f) if you start at node w in graph 21.5 and take a (long) random walk, does the
distribution over nodes ever get close to the stationary distribution? (hint: try a
few steps and watch what is happening.)

(g) how many stationary distributions are there for graph 21.6?

(h) if you start at node b in graph 21.6 and take a (long) random walk, what will
be the approximate id203 that you are at node d?

problem 21.6.
a sink in a digraph is a vertex with no edges leaving it. circle whichever of the
following assertions are true of stable distributions on    nite digraphs with exactly
two sinks:

(cid:15) there may not be any
(cid:15) there may be a unique one
(cid:15) there are exactly two
(cid:15) there may be a countably in   nite number
(cid:15) there may be a uncountable number
(cid:15) there always is an uncountable number

problem 21.7.
explain why there are an uncountable number of stationary distributions for the
following random walk graph.

ab1c1/21/21/21d1/2   mcs        2017/6/5     19:42     page 943     #951

21.2. id93 on graphs

943

figure 21.7

class problems
problem 21.8. (a) find a stationary distribution for the random walk graph in fig-
ure 21.7.

(b) explain why a long random walk starting at node x in figure 21.7 will not
converge to a stationary distribution. characterize which starting distributions will
converge to the stationary one.

(c) find a stationary distribution for the random walk graph in figure 21.8.

figure 21.8

(d) if you start at node w figure 21.8 and take a (long) random walk, does the
distribution over nodes ever get close to the stationary distribution? you needn   t
prove anything here, just write out a few steps and see what   s happening.

(e) explain why the random walk graph in figure 21.9 has an uncountable number
of stationary distributions.

(f) if you start at node b in figure 21.9 and take a long random walk, the proba-
bility you are at node d will be close to what fraction? explain.

(g) give an example of a random walk graph that is not strongly connected but
has a unique stationary distribution. hint: there is a trivial example.

xy11wz10.90.1   mcs        2017/6/5     19:42     page 944     #952

944

chapter 21 id93

figure 21.9

problem 21.9.
we use id93 on a digraph g to model the typical movement pattern of a
math for cs student right after the    nal exam.

the student comes out of the    nal exam located on a particular node of the
graph, corresponding to the exam room. what happens next is unpredictable, as
the student is in a total haze. at each step of the walk, if the student is at node
u at the end of the previous step, they pick one of the edges hu! vi uniformly at
random from the set of all edges directed out of u, and then walk to the node v.
let n wwd jv .g/j and de   ne the vector p .j / to be

p .j / wwd .p.j /

1 ; : : : ; p.j /
n /

i

is the id203 of being at node i after j steps.

where p.j /
(a) we will start by looking at a simple graph. if the student starts at node 1 (the
top node) in the following graph, what is p .0/; p .1/; p .2/? give a nice expression
for p .n/.

(b) given an arbitrary graph, show how to write an expression for p.j /
of the p.j(cid:0)1/
(c) does your answer to the last part look like any other system of equations
you   ve seen in this course?

in terms

   s.

k

i

ab1c1/21/21/21d1/21/21/21   mcs        2017/6/5     19:42     page 945     #953

21.2. id93 on graphs

945

(d) let the limiting distribution vector (cid:25) be

pk

lim
k!1

id1 p .i /

:

k

what is the limiting distribution of the graph from part a? would it change if the
start distribution were p .0/ d .1=2; 1=2/ or p .0/ d .1=3; 2=3/?
(e) let   s consider another directed graph.
if the student starts at node 1 with
id203 1/2 and node 2 with id203 1/2, what is p .0/; p .1/; p .2/ in the
following graph? what is the limiting distribution?

(f) now we are ready for the real problem. in order to make it home, the poor
math for student is faced with n doors along a long hall way. unbeknownst to him,
the door that goes outside to paradise (that is, freedom from the class and more
importantly, vacation!) is at the very end. at each step along the way, he passes
by a door which he opens up and goes through with id203 1/2. every time he
does this, he gets teleported back to the exam room. let   s    gure out how long it
will take the poor guy to escape from the class. what is p .0/; p .1/; p .2/? what is
the limiting distribution?

(g) show that the expected number t .n/ of teleportations you make back to the
exam room before you escape to the outside world is 2n(cid:0)1 (cid:0) 1.

1/31/31/31/31/31/31/31/31/3123...123n01/21/21/21/21/21/21/211   mcs        2017/6/5     19:42     page 946     #954

946

chapter 21 id93

problem 21.10.
prove that for    nite random walk graphs, the uniform distribution is stationary iff
the probabilities of the edges coming into each vertex always sum to 1, namely

x

u2into.v/

p.u; v/ d 1;

(21.18)

where into.w/ wwd fv j hv! wi is an edgeg.

problem 21.11.
a google-graph is a random-walk graph such that every edge leaving any given
vertex has the same id203. that is, the id203 of each edge hv! wi is
1= outdeg.v/.
a digraph is symmetric if, whenever hv! wi is an edge, so is hw! vi. given
any    nite, symmetric google-graph, let

d.v/ wwd outdeg.v/
where e is the total number of edges in the graph.
(a) if d was used for webpage ranking, how could you hack this to give your page
a high rank? . . . explain informally why this wouldn   t work for    real    page rank
with nonsymmetric digraphs.

e

;

(b) show that d is a stationary distribution.

homework problems
problem 21.12.
a digraph is strongly connected iff there is a directed path between every pair of
distinct vertices. in this problem we consider a    nite random walk graph that is
strongly connected.
(a) let d1 and d2 be distinct distributions for the graph, and de   ne the maximum
dilation (cid:13) of d1 over d2 to be

(cid:13) wwd max
x2v

d1.x/
d2.x/

:

call a vertex x dilated if d1.x/=d2.x/ d (cid:13). show that there is an edge hy! zi
from an undilated vertex y to a dilated vertex z. hint: choose any dilated vertex x
and consider the set d of dilated vertices connected to x by a directed path (going
to x) that only uses dilated vertices. explain why d    v , and then use the fact
that the graph is strongly connected.

   mcs        2017/6/5     19:42     page 947     #955

21.2. id93 on graphs

947

figure 21.10 which ones have uniform stationary distribution?

(b) prove that the graph has at most one stationary distribution. (there always is
a stationary distribution, but we   re not asking you prove this.) hint: let d1 be a
stationary distribution and d2 be a different distribution. let z be the vertex from
part (a). show that starting from d2, the id203 of z changes at the next step.

that is,bd2.z/    d2.z/.

exam problems
problem 21.13.
for which of the graphs in figure 21.10 is the uniform distribution over nodes a
stationary distribution? the edges are labeled with transition probabilities. explain
your reasoning.

problem 21.14.
a trap in a random walk digraph is a subgraph whose edges all end within the trap.
suppose a graph has exactly two traps, and they do not share any vertices. circle
whichever of the following assertions are true of stable distributions of the graph.
(a) there may not be any.

0.50.50.50.50.50.50.50.50.50.51110.50.51   mcs        2017/6/5     19:42     page 948     #956

948

chapter 21 id93

(b) there is a unique one.

(c) there are exactly two.

(d) there are only a    nite number.

(e) there are a countable number.

(f) in some such graphs there are a countable number, and in other such graphs
there are an uncountable number.

(g) there are an uncountable number.

   mcs        2017/6/5     19:42     page 949     #957

v recurrences

   mcs        2017/6/5     19:42     page 950     #958

   mcs        2017/6/5     19:42     page 951     #959

introduction

a recurrence describes a sequence of numbers. early terms are speci   ed explic-
itly, and later terms are expressed as a function of their predecessors. as a trivial
example, here is a recurrence describing the sequence 1; 2; 3; : : : :

t1 d 1
tn d tn(cid:0)1 c 1

(for n (cid:21) 2):

here, the    rst term is de   ned to be 1 and each subsequent term is one more than its
predecessor.

recurrences turn out to be a powerful tool. in this chapter, we   ll emphasize using
recurrences to analyze the performance of recursive algorithms. however, recur-
rences have other applications in computer science as well, such as enumeration of
structures and analysis of random processes. and, as we saw in section 14.4, they
also arise in the analysis of problems in the physical sciences.

a recurrence in isolation is not a very useful description of a sequence. sim-
ple questions such as,    what is the hundredth term?    or    what is the asymptotic
growth rate?    are not in general easy to answer by inspection of the recurrence. so
a typical goal is to solve a recurrence   that is, to    nd a closed-form expression for
the nth term.

we   ll    rst introduce two general solving techniques: guess-and-verify and plug-
and-chug. these methods are applicable to every recurrence, but their success re-
quires a    ash of insight   sometimes an unrealistically brilliant    ash. so we   ll also
introduce two big classes of recurrences, linear and divide-and-conquer, that often
come up in computer science. essentially all recurrences in these two classes are
solvable using cookbook techniques; you follow the recipe and get the answer. a
drawback is that calculation replaces insight. the    aha!    moment that is essential

   mcs        2017/6/5     19:42     page 952     #960

952

part v recurrences

in the guess-and-verify and plug-and-chug methods is replaced by a    huh    at the
end of a cookbook procedure.

at the end of the chapter, we   ll develop rules of thumb to help you assess many
recurrences without any calculation. these rules can help you distinguish promis-
ing approaches from bad ideas early in the process of designing an algorithm.

recurrences are one aspect of a broad theme in computer science: reducing a big
problem to progressively smaller problems until easy base cases are reached. this
same idea underlies both induction proofs and recursive algorithms. as we   ll see,
all three ideas snap together nicely. for example, the running time of a recursive
algorithm could be described with a recurrence with induction used to verify the
solution.

   mcs        2017/6/5     19:42     page 953     #961

22

recurrences

22.1 the towers of hanoi

there are several methods for solving recurrence equations. the simplest is to
guess the solution and then verify that the guess is correct with an induction proof.

for example, as a alternative to the generating function derivation in section 16.4.2
of the value of the number tn of moves in the tower of hanoi problem with n disks,
we could have tried guessing. as a basis for a good guess, let   s look for a pattern in
the values of tn computed above: 1, 3, 7, 15, 31, 63. a natural guess is tn d 2n(cid:0)1.
but whenever you guess a solution to a recurrence, you should always verify it with
a proof, typically by induction. after all, your guess might be wrong. (but why
bother to verify in this case? after all, if we   re wrong, its not the end of the. . . no,
let   s check.)
claim 22.1.1. tn d 2n (cid:0) 1 satis   es the recurrence:

t1 d 1
tn d 2tn(cid:0)1 c 1

(for n (cid:21) 2):

proof. the proof is by induction on n. the induction hypothesis is that tn d
2n (cid:0) 1. this is true for n d 1 because t1 d 1 d 21 (cid:0) 1. now assume that
tn(cid:0)1 d 2n(cid:0)1 (cid:0) 1 in order to prove that tn d 2n (cid:0) 1, where n (cid:21) 2:

tn d 2tn(cid:0)1 c 1

d 2.2n(cid:0)1 (cid:0) 1/ c 1
d 2n (cid:0) 1:

the    rst equality is the recurrence equation, the second follows from the induction
(cid:4)
assumption, and the last step is simpli   cation.

such veri   cation proofs are especially tidy because recurrence equations and
induction proofs have analogous structures. in particular, the base case relies on
the    rst line of the recurrence, which de   nes t1. and the inductive step uses the
second line of the recurrence, which de   nes tn as a function of preceding terms.
our guess is veri   ed. so we can now resolve our remaining questions about the
64-disk puzzle. since t64 d 264 (cid:0) 1, the monks must complete more than 18
billion billion steps before the world ends. better study for the    nal.

   mcs        2017/6/5     19:42     page 954     #962

954

chapter 22 recurrences

22.1.1 the upper bound trap
when the solution to a recurrence is complicated, one might try to prove that some
simpler expression is an upper bound on the solution. for example, the exact so-
lution to the towers of hanoi recurrence is tn d 2n (cid:0) 1. let   s try to prove the
   nicer    upper bound tn   2n, proceeding exactly as before.
proof. (failed attempt.) the proof is by induction on n. the induction hypothesis
is that tn   2n. this is true for n d 1 because t1 d 1   21. now assume that
tn(cid:0)1   2n(cid:0)1 in order to prove that tn   2n, where n (cid:21) 2:

tn d 2tn(cid:0)1 c 1
  2.2n(cid:0)1/ c 1
6  2n

implies uh-oh!

the    rst equality is the recurrence relation, the second follows from the induction
(cid:4)
hypothesis, and the third step is a    aming train wreck.

the proof doesn   t work! as is so often the case with induction proofs, the ar-
gument only goes through with a stronger hypothesis. this isn   t to say that upper
bounding the solution to a recurrence is hopeless, but this is a situation where in-
duction and recurrences do not mix well.

22.1.2 plug and chug
guess-and-verify is a simple and general way to solve recurrence equations. but
there is one big drawback: you have to guess right. that was not hard for the
towers of hanoi example. but sometimes the solution to a recurrence has a strange
form that is quite dif   cult to guess. practice helps, of course, but so can some other
methods.

plug-and-chug is another way to solve recurrences. this is also sometimes called
   expansion    or    iteration.    as in guess-and-verify, the key step is identifying a
pattern. but instead of looking at a sequence of numbers, you have to spot a pattern
in a sequence of expressions, which is sometimes easier. the method consists of
three steps, which are described below and illustrated with the towers of hanoi
example.

step 1: plug and chug until a pattern appears
the    rst step is to expand the recurrence equation by alternately    plugging    (apply-
ing the recurrence) and    chugging    (simplifying the result) until a pattern appears.
be careful: too much simpli   cation can make a pattern harder to spot. the rule

   mcs        2017/6/5     19:42     page 955     #963

22.1. the towers of hanoi

955

to remember   indeed, a rule applicable to the whole of college life   is chug in
moderation.

tn d 2tn(cid:0)1 c 1

d 2.2tn(cid:0)2 c 1/ c 1
d 4tn(cid:0)2 c 2 c 1
d 4.2tn(cid:0)3 c 1/ c 2 c 1
d 8tn(cid:0)3 c 4 c 2 c 1
d 8.2tn(cid:0)4 c 1/ c 4 c 2 c 1
d 16tn(cid:0)4 c 8 c 4 c 2 c 1

plug
chug
plug
chug
plug
chug

above, we started with the recurrence equation. then we replaced tn(cid:0)1 with
2tn(cid:0)2 c 1, since the recurrence says the two are equivalent.
in the third step,
we simpli   ed a little   but not too much! after several similar rounds of plugging
and chugging, a pattern is apparent. the following formula seems to hold:

tn d 2ktn(cid:0)k c 2k(cid:0)1 c 2k(cid:0)2 c (cid:1)(cid:1)(cid:1) c 22 c 21 c 20

d 2ktn(cid:0)k c 2k (cid:0) 1

once the pattern is clear, simplifying is safe and convenient. in particular, we   ve
collapsed the geometric sum to a closed form on the second line.

step 2: verify the pattern
the next step is to verify the general formula with one more round of plug-and-
chug.

tn d 2ktn(cid:0)k c 2k (cid:0) 1

d 2k.2tn(cid:0).kc1/ c 1/ c 2k (cid:0) 1
d 2kc1tn(cid:0).kc1/ c 2kc1 (cid:0) 1

plug
chug

the    nal expression on the right is the same as the expression on the    rst line,
except that k is replaced by k c 1. surprisingly, this effectively proves that the
formula is correct for all k. here is why: we know the formula holds for k d 1,
because that   s the original recurrence equation. and we   ve just shown that if the
formula holds for some k (cid:21) 1, then it also holds for k c 1. so the formula holds
for all k (cid:21) 1 by induction.

   mcs        2017/6/5     19:42     page 956     #964

956

chapter 22 recurrences

step 3: write tn using early terms with known values
the last step is to express tn as a function of early terms whose values are known.
here, choosing k d n (cid:0) 1 expresses tn in terms of t1, which is equal to 1. sim-
plifying gives a closed-form expression for tn:

tn d 2n(cid:0)1t1 c 2n(cid:0)1 (cid:0) 1
d 2n(cid:0)1 (cid:1) 1 c 2n(cid:0)1 (cid:0) 1
d 2n (cid:0) 1:

we   re done! this is the same answer we got from guess-and-verify.

let   s compare guess-and-verify with plug-and-chug.

in the guess-and-verify
method, we computed several terms at the beginning of the sequence t1, t2, t3,
etc., until a pattern appeared. we generalized to a formula for the nth term tn. in
contrast, plug-and-chug works backward from the nth term. speci   cally, we started
with an expression for tn involving the preceding term tn(cid:0)1, and rewrote this us-
ing progressively earlier terms tn(cid:0)2, tn(cid:0)3, etc. eventually, we noticed a pattern,
which allowed us to express tn using the very    rst term t1 whose value we knew.
substituting this value gave a closed-form expression for tn. so guess-and-verify
and plug-and-chug tackle the problem from opposite directions.

22.2 merge sort

algorithms textbooks traditionally claim that sorting is an important, fundamental
problem in computer science. then they smack you with sorting algorithms until
life as a disk-stacking monk in hanoi sounds delightful. here, we   ll cover just one
well-known sorting algorithm, merge sort. the analysis introduces another kind of
recurrence.

here is how merge sort works. the input is a list of n numbers, and the output

is those same numbers in nondecreasing order. there are two cases:

(cid:15) if the input is a single number, then the algorithm does nothing, because the
list is already sorted.
(cid:15) otherwise, the list contains two or more numbers. the    rst half and the
second half of the list are each sorted recursively. then the two halves are
merged to form a sorted list with all n numbers.

let   s work through an example. suppose we want to sort this list:

   mcs        2017/6/5     19:42     page 957     #965

22.2. merge sort

957

10, 7, 23, 5, 2, 8, 6, 9.

since there is more than one number, the    rst half (10, 7, 23, 5) and the second half
(2, 8, 6, 9) are sorted recursively. the results are 5, 7, 10, 23 and 2, 6, 8, 9. all that
remains is to merge these two lists. this is done by repeatedly emitting the smaller
of the two leading terms. when one list is empty, the whole other list is emitted.
the example is worked out below. in this table, underlined numbers are about to
be emitted.

first half
5, 7, 10, 23
5, 7, 10, 23
7, 10, 23
7, 10, 23
10, 23
10, 23
10, 23

second half output
2, 6, 8, 9
6, 8, 9
6, 8, 9
8, 9
8, 9
9

2
2, 5
2, 5, 6
2, 5, 6, 7
2, 5, 6, 7, 8
2, 5, 6, 7, 8, 9
2, 5, 6, 7, 8, 9, 10, 23

the leading terms are initially 5 and 2. so we output 2. then the leading terms are
5 and 6, so we output 5. eventually, the second list becomes empty. at that point,
we output the whole    rst list, which consists of 10 and 23. the complete output
consists of all the numbers in sorted order.

22.2.1 finding a recurrence
a traditional question about sorting algorithms is,    what is the maximum number
of comparisons used in sorting n items?    this is taken as an estimate of the running
time. in the case of merge sort, we can express this quantity with a recurrence. let
tn be the maximum number of comparisons used while merge sorting a list of n
numbers. for now, assume that n is a power of 2. this ensures that the input can
be divided in half at every stage of the recursion.

(cid:15) if there is only one number in the list, then no comparisons are required, so
t1 d 0.
(cid:15) otherwise, tn includes comparisons used in sorting the    rst half (at most
tn=2), in sorting the second half (also at most tn=2), and in merging the two
halves. the number of comparisons in the merging step is at most n (cid:0) 1.
this is because at least one number is emitted after each comparison and one
more number is emitted at the end when one list becomes empty. since n
items are emitted in all, there can be at most n (cid:0) 1 comparisons.

   mcs        2017/6/5     19:42     page 958     #966

958

chapter 22 recurrences

therefore, the maximum number of comparisons needed to merge sort n items is
given by this recurrence:

t1 d 0
tn d 2tn=2 c n (cid:0) 1

(for n (cid:21) 2 and a power of 2):

this fully describes the number of comparisons, but not in a very useful way; a
closed-form expression would be much more helpful. to get that, we have to solve
the recurrence.

22.2.2 solving the recurrence
let   s    rst try to solve the merge sort recurrence with the guess-and-verify tech-
nique. here are the    rst few values:
t1 d 0
t2 d 2t1 c 2 (cid:0) 1 d 1
t4 d 2t2 c 4 (cid:0) 1 d 5
t8 d 2t4 c 8 (cid:0) 1 d 17
t16 d 2t8 c 16 (cid:0) 1 d 49:

we   re in trouble! guessing the solution to this recurrence is hard because there is
no obvious pattern. so let   s try the plug-and-chug method instead.

step 1: plug and chug until a pattern appears
first, we expand the recurrence equation by alternately plugging and chugging until
a pattern appears.

tn d 2tn=2 c n (cid:0) 1

d 2.2tn=4 c n=2 (cid:0) 1/ c .n (cid:0) 1/
d 4tn=4 c .n (cid:0) 2/ c .n (cid:0) 1/
d 4.2tn=8 c n=4 (cid:0) 1/ c .n (cid:0) 2/ c .n (cid:0) 1/
d 8tn=8 c .n (cid:0) 4/ c .n (cid:0) 2/ c .n (cid:0) 1/
d 8.2tn=16 c n=8 (cid:0) 1/ c .n (cid:0) 4/ c .n (cid:0) 2/ c .n (cid:0) 1/
d 16tn=16 c .n (cid:0) 8/ c .n (cid:0) 4/ c .n (cid:0) 2/ c .n (cid:0) 1/
a pattern is emerging. in particular, this formula seems holds:

plug
chug
plug
chug
plug
chug

tn d 2ktn=2k c .n (cid:0) 2k(cid:0)1/ c .n (cid:0) 2k(cid:0)2/ c (cid:1)(cid:1)(cid:1) c .n (cid:0) 20/

d 2ktn=2k c k n (cid:0) 2k(cid:0)1 (cid:0) 2k(cid:0)2 (cid:1)(cid:1)(cid:1) (cid:0) 20
d 2ktn=2k c k n (cid:0) 2k c 1:

   mcs        2017/6/5     19:42     page 959     #967

22.2. merge sort

959

on the second line, we grouped the n terms and powers of 2. on the third, we
collapsed the geometric sum.

step 2: verify the pattern
next, we verify the pattern with one additional round of plug-and-chug.
guessed the wrong pattern, then this is where we   ll discover the mistake.

if we

tn d 2ktn=2k c k n (cid:0) 2k c 1

d 2k.2tn=2kc1 c n=2k (cid:0) 1/ c k n (cid:0) 2k c 1
d 2kc1tn=2kc1 c .k c 1/n (cid:0) 2kc1 c 1

plug
chug

the formula is unchanged except that k is replaced by k c 1. this amounts to the
induction step in a proof that the formula holds for all k (cid:21) 1.
step 3: write tn using early terms with known values
finally, we express tn using early terms whose values are known. speci   cally, if
we let k d log n, then tn=2k d t1, which we know is 0:

tn d 2ktn=2k c k n (cid:0) 2k c 1
d 2log ntn=2log n c n log n (cid:0) 2log n c 1
d nt1 c n log n (cid:0) n c 1
d n log n (cid:0) n c 1:

we   re done! we have a closed-form expression for the maximum number of com-
parisons used in merge sorting a list of n numbers. in retrospect, it is easy to see
why guess-and-verify failed: this formula is fairly complicated.

as a check, we can con   rm that this formula gives the same values that we

computed earlier:

n tn
0
1
1
2
5
4
17
8

n log n (cid:0) n c 1
1 log 1 (cid:0) 1 c 1 d 0
2 log 2 (cid:0) 2 c 1 d 1
4 log 4 (cid:0) 4 c 1 d 5
8 log 8 (cid:0) 8 c 1 d 17
16 49 16 log 16 (cid:0) 16 c 1 d 49

as a double-check, we could write out an explicit induction proof. this would be
straightforward, because we already worked out the guts of the proof in step 2 of
the plug-and-chug procedure.

   mcs        2017/6/5     19:42     page 960     #968

960

chapter 22 recurrences

22.3 linear recurrences

so far we   ve solved recurrences with two techniques: guess-and-verify and plug-
and-chug. these methods require spotting a pattern in a sequence of numbers or
expressions. in this section and the next, we   ll give cookbook solutions for two
large classes of recurrences. these methods require no    ash of insight; you just
follow the recipe and get the answer.

22.3.1 climbing stairs
how many different ways are there to climb n stairs, if you can either step up one
stair or hop up two? for example, there are    ve different ways to climb four stairs:

1. step, step, step, step

2. hop, hop

3. hop, step, step

4. step, hop step

5. step, step, hop

working through this problem will demonstrate the major features of our    rst cook-
book method for solving recurrences. we   ll    ll in the details of the general solution
afterward.

finding a recurrence
as special cases, there is 1 way to climb 0 stairs (do nothing) and 1 way to climb
1 stair (step up). in general, an ascent of n stairs consists of either a step followed
by an ascent of the remaining n (cid:0) 1 stairs or a hop followed by an ascent of n (cid:0) 2
stairs. so the total number of ways to climb n stairs is equal to the number of ways
to climb n (cid:0) 1 plus the number of ways to climb n (cid:0) 2. these observations de   ne
a recurrence:

f .0/ d 1
f .1/ d 1
f .n/ d f .n (cid:0) 1/ c f .n (cid:0) 2/

for n (cid:21) 2:

here, f .n/ denotes the number of ways to climb n stairs. also, we   ve switched
from subscript notation to functional notation, from tn to fn. here the change is
cosmetic, but the expressiveness of functions will be useful later.

   mcs        2017/6/5     19:42     page 961     #969

22.3. linear recurrences

961

this is the fibonaccifamous of all recurrence equations. fibonacci numbers arise

in all sorts of applications and in nature. for example,

(cid:15) the recurrence was introduced by fibonacci himself in thirteenth century to
model rabbit reproduction.
(cid:15) the sizes of the spiral patterns on the face of a sun   ower grow in proportion
to fibonacci numbers.
(cid:15) the input values on which euclid   s gcd algorithm requires the greatest num-
ber of steps are consecutive fibonacci numbers.

solving the recurrence
the fibonacci recurrence belongs to the class of linear recurrences, which are es-
sentially all solvable with a technique that you can learn in an hour. this is some-
what amazing, since the fibonacci recurrence remained unsolved for almost six
centuries!

in general, a homogeneous linear recurrence has the form

f .n/ d a1f .n (cid:0) 1/ c a2f .n (cid:0) 2/ c (cid:1)(cid:1)(cid:1) c ad f .n (cid:0) d /

where a1; a2; : : : ; ad and d are constants. the order of the recurrence is d. com-
monly, the value of the function f is also speci   ed at a few points; these are called
boundary conditions. for example, the fibonacci recurrence has order d d 2 with
coef   cients a1 d a2 d 1 and g.n/ d 0. the boundary conditions are f .0/ d 1
and f .1/ d 1. the word    homogeneous    sounds scary, but effectively means    the
simpler kind.    we   ll consider linear recurrences with a more complicated form
later.

let   s try to solve the fibonacci recurrence with the bene   t centuries of hindsight.
in general, linear recurrences tend to have exponential solutions. so let   s guess that

f .n/ d xn

where x is a parameter introduced to improve our odds of making a correct guess.
we   ll    gure out the best value for x later. to further improve our odds, let   s neglect
the boundary conditions f .0/ d 0 and f .1/ d 1 for now. plugging this guess into
the recurrence f .n/ d f .n (cid:0) 1/ c f .n (cid:0) 2/ gives
xn d xn(cid:0)1 c xn(cid:0)2:

dividing both sides by xn(cid:0)2 leaves a quadratic equation:

x2 d x c 1:

   mcs        2017/6/5     19:42     page 962     #970

962

chapter 22 recurrences

solving this equation gives two plausible values for the parameter x:

this suggests that there are at least two different solutions to the recurrence, ne-
glecting the boundary conditions.

5

:

2

x d 1    p
!n

 

1 c p

5

2

f .n/ d

or f .n/ d

!n

 

1 (cid:0) p

5

2

a charming features of homogeneous linear recurrences is that any linear com-

bination of solutions is another solution.

theorem 22.3.1. if f .n/ and g.n/ are both solutions to a homogeneous linear
recurrence, then h.n/ d sf .n/ c tg.n/ is also a solution for all s; t 2 r.
proof.
h.n/ d sf .n/ c tg.n/

d s .a1f .n (cid:0) 1/ c (cid:1)(cid:1)(cid:1) c ad f .n (cid:0) d // c t .a1g.n (cid:0) 1/ c (cid:1)(cid:1)(cid:1) c ad g.n (cid:0) d //
d a1.sf .n (cid:0) 1/ c tg.n (cid:0) 1// c (cid:1)(cid:1)(cid:1) c ad .sf .n (cid:0) d / c tg.n (cid:0) d //
d a1h.n (cid:0) 1/ c (cid:1)(cid:1)(cid:1) c ad h.n (cid:0) d /

the    rst step uses the de   nition of the function h, and the second uses the fact that
f and g are solutions to the recurrence. in the last two steps, we rearrange terms
and use the de   nition of h again. since the    rst expression is equal to the last, h is
(cid:4)
also a solution to the recurrence.

the phenomenon described in this theorem   a linear combination of solutions is
another solution   also holds for many differential equations and physical systems.
in fact, linear recurrences are so similar to linear differential equations that you can
safely snooze through that topic in some future math class.

returning to the fibonacci recurrence, this theorem implies that

 

1 c p

5

2

 

!n c t

1 (cid:0) p

5

2

!n

f .n/ d s

is a solution for all real numbers s and t. the theorem expanded two solutions to
a whole spectrum of possibilities! now, given all these options to choose from,
we can    nd one solution that satis   es the boundary conditions, f .0/ d 1 and

   mcs        2017/6/5     19:42     page 963     #971

22.3. linear recurrences

963

f .1/ d 1. each boundary condition puts some constraints on the parameters s and
t. in particular, the    rst boundary condition implies that

f .0/ d s

 

5

1 c p
 

!0 c t
 
1 (cid:0) p
 
!1 c t
1 c p

!0 d s c t d 1:
!1 d 1:
1 (cid:0) p

2

5

2

5

5

2

2

f .1/ d s

similarly, the second boundary condition implies that

now we have two linear equations in two unknowns. the system is not degenerate,
so there is a unique solution:
s d 1p

(cid:1) 1 (cid:0) p

t d (cid:0) 1p

5

:

these values of s and t identify a solution to the fibonacci recurrence that also
satis   es the boundary conditions:

2

5

(cid:1) 1 c p
 
1 c p
!nc1 (cid:0) 1p

5

5

2

5

5

(cid:1) 1 c p
 
1 c p

2

2

5

2

5

(cid:1) 1 (cid:0) p
!nc1

2

5

!n (cid:0) 1p
 
1 (cid:0) p

5

5

2

 

1 (cid:0) p

5

!n

2

:

f .n/ d 1p

5
d 1p
5

it is easy to see why no one stumbled across this solution for almost six centuries.
all fibonacci numbers are integers, but this expression is full of square roots of
   ve! amazingly, the square roots always cancel out. this expression really does
give the fibonacci numbers if we plug in n d 0; 1; 2, etc.
this closed form for fibonacci numbers is known as binet   s formula and has
the exponential, .1 c p
some interesting corollaries. the    rst term tends to in   nity because the base of
5/=2 d 1:618 : : : is greater than one. this value is often
.1 (cid:0) p
denoted (cid:30) and called the    golden ratio.    the second term tends to zero, because
5/=2 d (cid:0)0:618033988 : : : has absolute value less than 1. this implies that

the nth fibonacci number is:

f .n/ d (cid:30)nc1p

5

c o.1/:

remarkably, this expression involving irrational numbers is actually very close to
an integer for all large n   namely, a fibonacci number! for example:

d 6765:000029(cid:1)(cid:1)(cid:1) (cid:25) f .19/:

(cid:30)20p
5

   mcs        2017/6/5     19:42     page 964     #972

964

chapter 22 recurrences

this also implies that the ratio of consecutive fibonacci numbers rapidly approaches
the golden ratio. for example:

f .20/

f .19/

d 10946
6765

d 1:618033998 : : : :

22.3.2 solving homogeneous linear recurrences
the method we used to solve the fibonacci recurrence can be extended to solve
any homogeneous linear recurrence; that is, a recurrence of the form
f .n/ d a1f .n (cid:0) 1/ c a2f .n (cid:0) 2/ c (cid:1)(cid:1)(cid:1) c ad f .n (cid:0) d /

where a1; a2; : : : ; ad and d are constants. substituting the guess f .n/ d xn, as
with the fibonacci recurrence, gives

xn d a1xn(cid:0)1 c a2xn(cid:0)2 c (cid:1)(cid:1)(cid:1) c ad xn(cid:0)d :

dividing by xn(cid:0)d gives

xd d a1xd(cid:0)1 c a2xd(cid:0)2 c (cid:1)(cid:1)(cid:1) c ad(cid:0)1x c ad :

this is called the characteristic equation of the recurrence. the characteristic equa-
tion can be read off quickly since the coef   cients of the equation are the same as
the coef   cients of the recurrence.

the solutions to a linear recurrence are de   ned by the roots of the characteristic

equation. neglecting boundary conditions for the moment:

(cid:15) if r is a nonrepeated root of the characteristic equation, then r n is a solution
to the recurrence.
(cid:15) if r is a repeated root with multiplicity k then r n, nr n, n2r n, . . . , nk(cid:0)1r n
are all solutions to the recurrence.

theorem 22.3.1 implies that every linear combination of these solutions is also a
solution.

for example, suppose that the characteristic equation of a recurrence has roots s,

t and u twice. these four roots imply four distinct solutions:

f .n/ d sn

f .n/ d t n

f .n/ d un

f .n/ d nun:

furthermore, every linear combination

f .n/ d a (cid:1) sn c b (cid:1) t n c c (cid:1) un c d (cid:1) nun

(22.1)

   mcs        2017/6/5     19:42     page 965     #973

22.3. linear recurrences

is also a solution.

965

all that remains is to select a solution consistent with the boundary conditions
by choosing the constants appropriately. each boundary condition implies a linear
equation involving these constants. so we can determine the constants by solving
a system of linear equations. for example, suppose our boundary conditions were
f .0/ d 0, f .1/ d 1, f .2/ d 4 and f .3/ d 9. then we would obtain four
equations in four unknowns:

f .0/ d 0
f .1/ d 1
f .2/ d 4
f .3/ d 9

implies
implies
implies
implies

a (cid:1) s0 c b (cid:1) t 0 c c (cid:1) u0 c d (cid:1) 0u0 d 0
a (cid:1) s1 c b (cid:1) t 1 c c (cid:1) u1 c d (cid:1) 1u1 d 1
a (cid:1) s2 c b (cid:1) t 2 c c (cid:1) u2 c d (cid:1) 2u2 d 4
a (cid:1) s3 c b (cid:1) t 3 c c (cid:1) u3 c d (cid:1) 3u3 d 9

this looks nasty, but remember that s, t and u are just constants. solving this sys-
tem gives values for a, b, c and d that de   ne a solution to the recurrence consistent
with the boundary conditions.

22.3.3 solving general linear recurrences
we can now solve all linear homogeneous recurrences, which have the form

f .n/ d a1f .n (cid:0) 1/ c a2f .n (cid:0) 2/ c (cid:1)(cid:1)(cid:1) c ad f .n (cid:0) d /:

many recurrences that arise in practice do not quite    t this mold. for example, the
towers of hanoi problem led to this recurrence:

f .1/ d 1
f .n/ d 2f .n (cid:0) 1/ c 1

(for n (cid:21) 2):

the problem is the extra c1; that is not allowed in a homogeneous linear recur-
rence. in general, adding an extra function g.n/ to the right side of a linear recur-
rence gives an inhomogeneous linear recurrence:

f .n/ d a1f .n (cid:0) 1/ c a2f .n (cid:0) 2/ c (cid:1)(cid:1)(cid:1) c ad f .n (cid:0) d / c g.n/:

solving inhomogeneous linear recurrences is neither very different nor very dif-

   cult. we can divide the whole job into    ve steps:

1. replace g.n/ by 0, leaving a homogeneous recurrence. as before,    nd roots

of the characteristic equation.

2. write down the solution to the homogeneous recurrence, but do not yet use
the boundary conditions to determine coef   cients. this is called the homo-
geneous solution.

   mcs        2017/6/5     19:42     page 966     #974

966

chapter 22 recurrences

3. now restore g.n/ and    nd a single solution to the recurrence, ignoring bound-
ary conditions. this is called a particular solution. we   ll explain how to    nd
a particular solution shortly.

4. add the homogeneous and particular solutions together to obtain the general

solution.

5. now use the boundary conditions to determine constants by the usual method

of generating and solving a system of linear equations.

as an example, let   s consider a variation of the towers of hanoi problem. sup-
pose that moving a disk takes time proportional to its size. speci   cally, moving the
smallest disk takes 1 second, the next-smallest takes 2 seconds, and moving the nth
disk then requires n seconds instead of 1. so, in this variation, the time to complete
the job is given by a recurrence with a cn term instead of a c1:

f .1/ d 1
f .n/ d 2f .n (cid:0) 1/ c n

for n (cid:21) 2:

clearly, this will take longer, but how much longer? let   s solve the recurrence with
the method described above.
in steps 1 and 2, dropping the cn leaves the homogeneous recurrence f .n/ d
2f .n (cid:0) 1/. the characteristic equation is x d 2. so the homogeneous solution is
f .n/ d c2n.
in step 3, we must    nd a solution to the full recurrence f .n/ d 2f .n (cid:0) 1/ c n,
without regard to the boundary condition. let   s guess that there is a solution of the
form f .n/ d an c b for some constants a and b. substituting this guess into the
recurrence gives

an c b d 2.a.n (cid:0) 1/ c b/ c n
0 d .a c 1/n c .b (cid:0) 2a/:

the second equation is a simpli   cation of the    rst. the second equation holds for
all n if both a c 1 d 0 (which implies a d (cid:0)1) and b (cid:0) 2a d 0 (which implies
that b d (cid:0)2). so f .n/ d an c b d (cid:0)n (cid:0) 2 is a particular solution.
in the step 4, we add the homogeneous and particular solutions to obtain the

general solution

f .n/ d c2n (cid:0) n (cid:0) 2:

   mcs        2017/6/5     19:42     page 967     #975

22.4. divide-and-conquer recurrences

967

finally, in step 5, we use the boundary condition f .1/ d 1 to determine the
value of the constant c:

f .1/ d 1

implies

implies

c21 (cid:0) 1 (cid:0) 2 d 1
c d 2:

therefore, the function f .n/ d 2 (cid:1) 2n (cid:0) n (cid:0) 2 solves this variant of the towers
of hanoi recurrence. for comparison, the solution to the original towers of hanoi
problem was 2n (cid:0) 1. so if moving disks takes time proportional to their size, then
the monks will need about twice as much time to solve the whole puzzle.

22.3.4 how to guess a particular solution
finding a particular solution can be the hardest part of solving inhomogeneous
recurrences. this involves guessing, and you might guess wrong.1 however, some
rules of thumb make this job fairly easy most of the time.

(cid:15) generally, look for a particular solution with the same form as the inhomo-
geneous term g.n/.
(cid:15) if g.n/ is a constant, then guess a particular solution f .n/ d c. if this doesn   t
work, try polynomials of progressively higher degree: f .n/ d bn c c, then
f .n/ d an2 c bn c c, etc.
(cid:15) more generally, if g.n/ is a polynomial, try a polynomial of the same degree,
then a polynomial of degree one higher, then two higher, etc. for example,
if g.n/ d 6n c 5, then try f .n/ d bn c c and then f .n/ d an2 c bn c c.
(cid:15) if g.n/ is an exponential, such as 3n, then    rst guess that f .n/ d c3n.
failing that, try f .n/ d bn3n c c3n and then an23n c bn3n c c3n, etc.

the entire process is summarized on the following page.

22.4 divide-and-conquer recurrences

we now have a recipe for solving general linear recurrences. but the merge sort
recurrence, which we encountered earlier, is not linear:

t .1/ d 0
t .n/ d 2t .n=2/ c n (cid:0) 1

(for n (cid:21) 2):

1chapter 16 explains how to solve linear recurrences with generating functions   it   s a little more

complicated, but it does not require guessing.

   mcs        2017/6/5     19:42     page 968     #976

968

chapter 22 recurrences

short guide to solving linear recurrences
a linear recurrence is an equation

   
f .n/ d a1f .n (cid:0) 1/ c a2f .n (cid:0) 2/ c (cid:1)(cid:1)(cid:1) c ad f .n (cid:0) d /

     

   

           
c g.n/

together with boundary conditions such as f .0/ d b0, f .1/ d b1, etc. linear
recurrences are solved as follows:

homogeneous part

inhomogeneous part

1. find the roots of the characteristic equation

xn d a1xn(cid:0)1 c a2xn(cid:0)2 c (cid:1)(cid:1)(cid:1) c ak(cid:0)1x c ak:

2. write down the homogeneous solution. each root generates one term and
the homogeneous solution is their sum. a nonrepeated root r generates the
term cr n, where c is a constant to be determined later. a root r with multi-
plicity k generates the terms
d2nr n

dknk(cid:0)1r n

d3n2r n

d1r n

: : :

where d1; : : : dk are constants to be determined later.

3. find a particular solution. this is a solution to the full recurrence that need
not be consistent with the boundary conditions. use guess-and-verify.
if
g.n/ is a constant or a polynomial, try a polynomial of the same degree, then
of one higher degree, then two higher. for example, if g.n/ d n, then try
f .n/ d bnc c and then an2c bnc c. if g.n/ is an exponential, such as 3n,
then    rst guess f .n/ d c3n. failing that, try f .n/ d .bn c c/3n and then
.an2 c bn c c/3n, etc.

4. form the general solution, which is the sum of the homogeneous solution

and the particular solution. here is a typical general solution:

   
f .n/ d c2n c d.(cid:0)1/n

     

   

homogeneous solution

c

           
3n c 1.

inhomogeneous solution

5. substitute the boundary conditions into the general solution. each boundary
condition gives a linear equation in the unknown constants. for example,
substituting f .1/ d 2 into the general solution above gives

2 d c (cid:1) 21 c d (cid:1) .(cid:0)1/1 c 3 (cid:1) 1 c 1

implies (cid:0)2 d 2c (cid:0) d:

determine the values of these constants by solving the resulting system of
linear equations.

   mcs        2017/6/5     19:42     page 969     #977

22.4. divide-and-conquer recurrences

969

in particular, t .n/ is not a linear combination of a    xed number of immediately
preceding terms; rather, t .n/ is a function of t .n=2/, a term halfway back in the
sequence.

merge sort is an example of a divide-and-conquer algorithm: it divides the in-
put,    conquers    the pieces, and combines the results. analysis of such algorithms
commonly leads to divide-and-conquer recurrences, which have this form:

t .n/ d kx

id1

ai t .bi n/ c g.n/

here a1; : : : ak are positive constants, b1; : : : ; bk are constants between 0 and 1,
and g.n/ is a nonnegative function. for example, setting a1 d 2, b1 d 1=2 and
g.n/ d n (cid:0) 1 gives the merge sort recurrence.
22.4.1 the akra-bazzi formula
the solution to virtually all divide and conquer solutions is given by the amazing
akra-bazzi formula. quite simply, the asymptotic solution to the general divide-
and-conquer recurrence

id1

t .n/ d kx
ai t .bi n/ c g.n/
 
 
kx

1 cz n

g.u/

np

1

upc1 du

d 1:

ai bp
i

  

t .n/ d    

is

where p satis   es

id1
a rarely-troublesome requirement is that the function g.n/ must not grow or
oscillate too quickly. speci   cally, jg
.n/j must be bounded by some polynomial.
so, for example, the akra-bazzi formula is valid when g.n/ d x2 log n, but not
when g.n/ d 2n.
let   s solve the merge sort recurrence again, using the akra-bazzi formula in-

0

stead of plug-and-chug. first, we    nd the value p that satis   es

2 (cid:1) .1=2/p d 1:

(22.2)

(22.3)

   mcs        2017/6/5     19:42     page 970     #978

970

chapter 22 recurrences

  
looks like p d 1 does the job. then we compute the integral:
(cid:21)n
  

n

1

1 cz n
1 c 

 
 
 

 
 
t .n/ d    
 
d    
d    
d    .n log n/:

n

n

log n c 1

n

u (cid:0) 1
u2 du
  
log u c 1

u

1

the    rst step is integration and the second is simpli   cation. we can drop the 1=n
term in the last step, because the log n term dominates. we   re done!

let   s try a scary-looking recurrence:

t .n/ d 2t .n=2/ c .8=9/t .3n=4/ c n2:

here, a1 d 2, b1 d 1=2, a2 d 8=9 and b2 d 3=4. so we    nd the value p that
satis   es

equations of this form don   t always have closed-form solutions, so you may need
to approximate p numerically sometimes. but in this case the solution is simple:
p d 2. then we integrate:

2 (cid:1) .1=2/p c .8=9/.3=4/p d 1:
  

 
 
1 cz n
d    (cid:0)n2.1 c log n/(cid:1)
d    (cid:0)n2 log n(cid:1) :

u2
u3 du

n2

1

t .n/ d    

that was easy!

22.4.2 two technical issues
until now, we   ve swept a couple issues related to divide-and-conquer recurrences
under the rug. let   s address those issues now.

first, the akra-bazzi formula makes no use of boundary conditions. to see why,

let   s go back to merge sort. during the plug-and-chug analysis, we found that

tn d nt1 c n log n (cid:0) n c 1:

this expresses the nth term as a function of the    rst term, whose value is speci   ed
in a boundary condition. but notice that tn d    .n log n/ for every value of t1.
the boundary condition doesn   t matter!

   mcs        2017/6/5     19:42     page 971     #979

22.4. divide-and-conquer recurrences

971

this is the typical situation:

the asymptotic solution to a divide-and-conquer
recurrence is independent of the boundary conditions. intuitively, if the bottom-
level operation in a recursive algorithm takes, say, twice as long, then the overall
running time will at most double. this matters in practice, but the factor of 2 is
concealed by asymptotic notation. there are corner-case exceptions. for example,
the solution to t .n/ d 2t .n=2/ is either    .n/ or zero, depending on whether
t .1/ is zero. these cases are of little practical interest, so we won   t consider them
further.

there is a second nagging issue with divide-and-conquer recurrences that does
not arise with linear recurrences. speci   cally, dividing a problem of size n may
create subproblems of non-integer size. for example, the merge sort recurrence
contains the term t .n=2/. so what if n is 15? how long does it take to sort seven-
and-a-half items? previously, we dodged this issue by analyzing merge sort only
when the size of the input was a power of 2. but then we don   t know what happens
for an input of size, say, 100.

of course, a practical implementation of merge sort would split the input ap-
proximately in half, sort the halves recursively, and merge the results. for example,
a list of 15 numbers would be split into lists of 7 and 8. more generally, a list of n
numbers would be split into approximate halves of size dn=2e and dn=2e. so the
maximum number of comparisons is actually given by this recurrence:

t .1/ d 0
t .n/ d t .dn=2e/ c t .bn=2c/ c n (cid:0) 1

(for n (cid:21) 2):

this may be rigorously correct, but the ceiling and    oor operations make the recur-
rence hard to solve exactly.

fortunately, the asymptotic solution to a divide and conquer recurrence is un-
affected by    oors and ceilings. more precisely, the solution is not changed by
replacing a term t .bi n/ with either t .dbi ne/ or t .bbi nc/. so leaving    oors and
ceilings out of divide-and-conquer recurrences makes sense in many contexts; those
are complications that make no difference.

22.4.3 the akra-bazzi theorem
the akra-bazzi formula together with our assertions about boundary conditions
and integrality all follow from the akra-bazzi theorem, which is stated below.
theorem 22.4.1 (akra-bazzi). suppose that the function t w r ! r is nonnega-
tive and bounded for 0   x   x0 and satis   es the recurrence

ai t .bi x c hi .x// c g.x/

for x > x0;

(22.4)

t .x/ d kx

id1

   mcs        2017/6/5     19:42     page 972     #980

972

chapter 22 recurrences

where:

1. x0 is large enough so that t is well-de   ned,

2. a1; : : : ; ak are positive constants,

3. b1; : : : ; bk are constants between 0 and 1,
4. g.x/ is a nonnegative function such that jg
5. jhi .x/j d o.x= log2 x/.

0

.x/j is bounded by a polynomial,

then

where p satis   es

t .x/ d    

  

g.u/

upc1 du

1 cz x

1

d 1:

ai bp
i

 
 
kx

xp

id1

the akra-bazzi theorem can be proved using a complicated induction argument,
though we won   t do that here. but let   s at least go over the statement of the theorem.
all the recurrences we   ve considered were de   ned over the integers, and that is
the common case. but the akra-bazzi theorem applies more generally to functions
de   ned over the real numbers.

the akra-bazzi formula is lifted directed from the theorem statement, except
that the recurrence in the theorem includes extra functions, hi. these functions
extend the theorem to address    oors, ceilings, and other small adjustments to the
sizes of subproblems. the trick is illustrated by this combination of parameters

a1 d 1
a2 d 1

b1 d 1=2
b2 d 1=2
g.x/ d x (cid:0) 1

which corresponds the recurrence

(cid:16) x
m (cid:0) x
c(cid:16)l x
(cid:16) x
   c (cid:1)t
(cid:16)l x
k  c x (cid:0) 1:
(cid:16)j x
m  c t

2

2

2

2

2

2

t .x/ d 1 (cid:1) t

d t

2

2

h1.x/ dl x
h2.x/ dj x
k (cid:0) x
c(cid:16)j x

m (cid:0) x
k (cid:0) x
   c x (cid:0) 1

2

2

2

2

this is the rigorously correct merge sort recurrence valid for all input sizes,
complete with    oor and ceiling operators. in this case, the functions h1.x/ and

   mcs        2017/6/5     19:42     page 973     #981

22.4. divide-and-conquer recurrences

973

h2.x/ are both at most 1, which is easily o.x= log2 x/ as required by the theorem
statement. these functions hi do not affect   or even appear in   the asymptotic
solution to the recurrence. this justi   es our earlier claim that applying    oor and
ceiling operators to the size of a subproblem does not alter the asymptotic solution
to a divide-and-conquer recurrence.

22.4.4 the master theorem
there is a special case of the akra-bazzi formula known as the master theorem
that handles some of the recurrences that commonly arise in computer science. it
is called the master theorem because it was proved long before akra and bazzi
arrived on the scene and, for many years, it was the    nal word on solving divide-
and-conquer recurrences. we include the master theorem here because it is still
widely referenced in algorithms courses and you can use it without having to know
anything about integration.

theorem 22.4.2 (master theorem). let t be a recurrence of the form

case 1: if g.n/ d o

(cid:16)

case 2: if g.n/ d    

b

(cid:16) n

  c g.n/:
nlogb .a/ 
(cid:16)
for some constant (cid:15) > 0, then
t .n/ d    
 
for some constant k (cid:21) 0, then
(cid:16)
nlogb .a/ logkc1.n/

 

:

:

t .n/ d at

(cid:16)
nlogb .a/(cid:0)(cid:15) 

nlogb .a/ logk.n/
t .n/ d    

nlogb .a/c(cid:15) 

(cid:16)

case 3: if g.n/ d (cid:127)

for some constant (cid:15) > 0 and ag.n=b/ < cg.n/

for some constant c < 1 and suf   ciently large n, then

t .n/ d    .g.n//:

the master theorem can be proved by induction on n or, more easily, as a corol-

lary of theorem 22.4.1. we will not include the details here.

   mcs        2017/6/5     19:42     page 974     #982

974

chapter 22 recurrences

22.5 a feel for recurrences

we   ve guessed and veri   ed, plugged and chugged, found roots, computed integrals,
and solved linear systems and exponential equations. now let   s step back and look
for some rules of thumb. what kinds of recurrences have what sorts of solutions?

here are some recurrences we solved earlier:

recurrence
solution
tn (cid:24) 2n
towers of hanoi tn d 2tn(cid:0)1 c 1
tn d 2tn=2 c n (cid:0) 1 tn (cid:24) n log n
merge sort
tn d 2tn(cid:0)1 c n
tn (cid:24) 2 (cid:1) 2n
hanoi variation
tn (cid:24) .1:618 : : : /nc1=
tn d tn(cid:0)1 c tn(cid:0)2
fibonacci

p

5

notice that the recurrence equations for towers of hanoi and merge sort are some-
what similar, but the solutions are radically different. merge sorting n d 64 items
takes a few hundred comparisons, while moving n d 64 disks takes more than
1019 steps!
each recurrence has one strength and one weakness. in the towers of hanoi,
we broke a problem of size n into two subproblem of size n (cid:0) 1 (which is large),
but needed only 1 additional step (which is small). in merge sort, we divided the
problem of size n into two subproblems of size n=2 (which is small), but needed
.n (cid:0) 1/ additional steps (which is large). yet, merge sort is faster by a mile!
this suggests that generating smaller subproblems is far more important to al-
gorithmic speed than reducing the additional steps per recursive call. for example,
shifting to the variation of towers of hanoi increased the last term from c1 to cn,
but the solution only doubled. and one of the two subproblems in the fibonacci
recurrence is just slightly smaller than in towers of hanoi (size n (cid:0) 2 instead of
n(cid:0) 1). yet the solution is exponentially smaller! more generally, linear recurrences
(which have big subproblems) typically have exponential solutions, while divide-
and-conquer recurrences (which have small subproblems) usually have solutions
bounded above by a polynomial.

all the examples listed above break a problem of size n into two smaller prob-
lems. how does the number of subproblems affect the solution? for example,
suppose we increased the number of subproblems in towers of hanoi from 2 to 3,
giving this recurrence:

tn d 3tn(cid:0)1 c 1

this increases the root of the characteristic equation from 2 to 3, which raises the
solution exponentially, from    .2n/ to    .3n/.

   mcs        2017/6/5     19:42     page 975     #983

22.5. a feel for recurrences

975

divide-and-conquer recurrences are also sensitive to the number of subproblems.

for example, for this generalization of the merge sort recurrence:

the akra-bazzi formula gives:

tn d

t1 d 0
tn d atn=2 c n (cid:0) 1:

8  <  :   .n/

   .n log n/
   .nlog a/

for a < 2
for a d 2
for a > 2:

so the solution takes on three completely different forms as a goes from 1.99
to 2.01!

how do boundary conditions affect the solution to a recurrence? we   ve seen
that they are almost irrelevant for divide-and-conquer recurrences. for linear re-
currences, the solution is usually dominated by an exponential whose base is de-
termined by the number and size of subproblems. boundary conditions matter
greatly only when they give the dominant term a zero coef   cient, which changes
the asymptotic solution.

so now we have a rule of thumb! the performance of a recursive procedure is
usually dictated by the size and number of subproblems, rather than the amount
of work per recursive call or time spent at the base of the recursion. in particular,
if subproblems are smaller than the original by an additive factor, the solution is
most often exponential. but if the subproblems are only a fraction the size of the
original, then the solution is typically bounded by a polynomial.

problems for section 22.4

homework problems
problem 22.1.
the running time of an algorithm a is described by the recurrence t .n/ d 7t .n=2/c
.n=4/ c n2. for
n2. a competing algorithm a
what values of a is a

0 has a running time of t
0 asymptotically faster than a?

.n/ d at

0

0

problem 22.2.
use the akra-bazzi formula to    nd    ./ asymptotic bounds for the following divide-
and-conquer recurrences. for each recurrence, t .1/ d 1 and t .n/ d    .1/ for all

   mcs        2017/6/5     19:42     page 976     #984

976

chapter 22 recurrences

constant n. state the value of p you get for each recurrence (which can be left in the
form of logs). also, state the values of the ai ; bi ; and hi .n/ for each recurrence.

1. t .n/ d 3t .bn=3c/ c n.
2. t .n/ d 4t .bn=3c/ c n2.
3. t .n/ d 3t .bn=4c/ c n.
4. t .n/ d t .bn=4c/ c t .bn=3c/ c n.
5. t .n/ d t .dn=4e/ c t .b3n=4c/ c n.
6. t .n/ d 2t .bn=4c/ c p
7. t .n/ d 2t .bn=4c c 1/ c p
n  / c 1.
8. t .n/ d 2t .(cid:4)n=4 c p
n1=3m
n1=ek
j

et .

n.

n.

/ c log3 n. (for this problem, t .2/ d 1.)
/ c ln n.

l
9. t .n/ d 3t .
10. t .n/ d p
class problems
problem 22.3.
we have devised an error-tolerant version of mergesort. we call our exciting new
algorithm oversort.

here is how the new algorithm works. the input is a list of n distinct numbers.
if the list contains a single number, then there is nothing to do. if the list contains
two numbers, then we sort them with a single comparison. if the list contains more
than two numbers, then we perform the following sequence of steps.

(cid:15) we make a list containing the    rst 2
3 n numbers and sort it recursively.
(cid:15) we make a list containing the last 2
3 n numbers and sort it recursively.
(cid:15) we make a list containing the    rst 1
3 n numbers and the last 1
sort it recursively.
(cid:15) we merge the    rst and second lists, throwing out duplicates.
(cid:15) we merge this combined list with the third list, again throwing out duplicates.

3 n numbers and

   mcs        2017/6/5     19:42     page 977     #985

22.5. a feel for recurrences

977

the    nal, merged list is the output. what   s great is that because multiple copies
of each number are maintained, even if the sorter occasionally forgets about a num-
ber, oversort can still output a complete, sorted list.
(a) let t .n/ be the maximum number of comparisons that oversort could use
to sort a list of n distinct numbers, assuming the sorter never forgets a number and
n is a power of 3. what is t .3/? write a recurrence relation for t .n/. (hint:
merging a list of j distinct numbers and a list of k distinct numbers, and throwing
out duplicates of numbers that appear in both lists, requires j c k(cid:0) d comparisons,
when d > 0 is the number of duplicates.)

(b) now we   re going to apply the akra-bazzi theorem to    nd a     bound on
t .n/. begin by identifying the following constants and functions in the akra-bazzi
recurrence (22.4):

(cid:15) the constant k.
(cid:15) the constants ai.
(cid:15) the constants bi.
(cid:15) the functions hi.
(cid:15) the function g.
(cid:15) the constant p. you can leave p in terms of logarithms, but you   ll need a
rough estimate of its value later on.

0

.x/j d o.xc/ for some c 2 n hold?

(c) does the condition jg
(d) does the condition jhi .x/j d o.x= log2 x/ hold?
(e) determine a     bound on t .n/ by integration.

exam problems
problem 22.4.
use the akra-bazzi formula to    nd    ./ asymptotic bounds for the following recur-
rences. for each recurrence t .0/ d 1 and n 2 n.
(a) t .n/ d 2t .bn=4c/ c t .bn=3c/ c n

(b) t .n/ d 4t(cid:0)(cid:4)n=2 c p

n  (cid:1) c n2

(c) a society of devil-worshipers meets every week in a catacomb to initiate new
members. members who have been in the society for two or more weeks initiate
four new members each and members who have been in the society for only one

   mcs        2017/6/5     19:42     page 978     #986

978

chapter 22 recurrences

week initiate one new member each. on week 0 there is one devil-worshiper. there
are two devil-worshipers on week 1.
write a recurrence relation for the number of members d.n/ in the society on the
nth week.
you do not need to solve the recurrence. be sure to include the base cases.

   mcs        2017/6/5     19:42     page 979     #987

   mcs        2017/6/5     19:42     page 980     #988

   mcs        2017/6/5     19:42     page 981     #989

981

bibliography

[1] martin aigner and g  unter m. proofs from the book. springer-verlag, 1999.

mr1723092. 4, 19

[2] tom m. apostol. calculus, vol. 1. wiley & sons, 1967. 601

[3] eric bach and jeffrey shallit. ef   cient algorithms, volume 1 of algorithmic

number theory. the mit press, 1996. 341

[4] john beam. a powerful method of proof. college mathematics journal,

48(1), 2017. 88

[5] edward a. bender and s. gill williamson. a short course in discrete math-

ematics. dover publications, 2005.

[6] arthur t. benjamin and jennifer j. quinn. proofs that really count: the art
of combinatorial proof. the mathematical association of america, 2003.
653

[7] p. j. bickel1, e. a. hammel1, and j. w. o   connell1. sex bias in graduate

admissions: data from berkeley. science, 187(4175):398   404, 1975. 778

[8] norman l. biggs. discrete mathematics. oxford university press, second

edition, 2002.

[9] b  ela bollob  as. modern id207, volume 184 of graduate texts in

mathematics. springer-verlag, 1998. mr1633290. 409, 494

[10] mikl  os b  ona.

introduction to enumerative combinatorics. walter rudin
student series in advanced mathematics. mcgraw hill higher education,
2007. mr2359513. 653, 712

[11] george s. boolos and richard c. jeffrey. computability and logic. cam-

bridge university press, 1974.

[12] timothy y. chow. the surprise examination or unexpected hanging paradox.

american mathematical monthly, pages 41   51, 1998.

[13] thomas h. cormen, charles e. leiserson, ronald l. rivest, and clifford

stein. introduction to algorithms. the mit press, third edition, 2009.

[14] antonella cupillari. the nuts and bolts of proofs. academic press, fourth

edition, 2012. mr1818534. 4, 19

   mcs        2017/6/5     19:42     page 982     #990

982

bibliography

[15] reinhard diestel. id207. springer-verlag, second edition, 2000. 409,

494

[16] michael paterson et al. maximum overhang. maa monthly, 116:763   787,

2009. 580

[17] shimon even. algorithmic combinatorics. macmillan, 1973. 653

[18] ronald fagin, joseph y. halpern, yoram moses, and moshe t. vardi. rea-

soning about knowledge. mit press, 1995. 19

[19] william feller. an introduction to id203 theory and its applications.
vol. i. john wiley & sons inc., new york, third edition, 1968. mr0228020.
754

[20] philippe flajolet and robert sedgewick. analytic combinatorics. cambridge

univ. press, 2009. 712

[21] michael garey and david johnson. tba. tba, 1970. 68

[22] a. gelfond. sur le septi`eme probl`eme de hilbert. bulletin de l   acad  emie des

sciences de l   urss, 4:623   634, 1934. 19

[23] judith l. gersting. mathematical structures for computer science: a mod-
ern treatment of discrete mathematics. w. h. freeman and company,    fth
edition, 2003.

[24] edgar g. goodaire and michael m. parmenter. discrete mathematics with

id207. prentice hall, second edition, 2001. 409, 494

[25] ronald l. graham, donald e. knuth, and oren patashnik. concrete math-
ematics: a foundation for computer science. addison-wesley, second edi-
tion, 1994. 712

[26] charles m. grinstead and j. laurie snell. introduction to id203. amer-

ican mathematical society, second revised edition, 1997. 754

[27] dan gus   eld and robert w. irving. the stable marriage problem: structure
and algorithms. mit press, cambridge, massachusetts, 1989. 187, 409, 494

[28] gary haggard, john schlipf, and sue whitesides. discrete mathematics for

computer science. brooks cole, 2005.

[29] nora harts   eld and gerhard ringel. pearls in id207: a comprehen-

sive introduction. dover publications, 2003. 409, 494

   mcs        2017/6/5     19:42     page 983     #991

983

bibliography

[30] gregory f. lawler and lester n. coyle. lectures on contemporary probabil-

ity. american mathematical society, 1999. 754

[31] eric lehman, tom leighton, and albert r meyer. mathematics for computer

science. unpublished notes for class mit 6.042, 2016.

[32] l. lov  asz, pelik  an j. and k. vesztergombi. discrete mathematics: ele-
mentary and beyond. undergraduate texts in mathematics. springer-verlag,
2003. mr1952453. 507

[33] michael machtey and paul young. an introduction to the general theory of

algorithms. elsevier north-holland, 1978.

[34] burton gordon malkiel. a random walk down wall street: the time-tested

strategy for success. w. w. norton, 2003. 754

[35] yuri v. matiyasevich. hilbert   s tenth problem. mit press, 1993. 354

[36] albert r. meyer. a note on star-free events. j. assoc. comput. machinery,

16(2), 1969. 247

[37] john g. michaels and kenneth h. rosen. applications of discrete mathe-

matics. mcgraw-hill, 1991.

[38] michael mitzenmacher and eli upfal. id203 and computing: ran-
domized algorithms and probabilistic analysis. cambridge university press,
2005. mr2144605. 754

[39] rajeev motwani and prabhakar raghavan. randomized algorithms. cam-

bridge university press, 1995. mr1344451,. 754

[40] g. polya. how to solve it: a new aspect of mathematical method. princeton

university press, second edition, 1971.

[41] kenneth h. rosen. discrete mathematics and its applications. mcgraw hill

higher education,    fth edition, 2002.

[42] sheldon ross. a first course in id203. prentice hall, sixth edition,

2002. 754

[43] sheldon m. ross. id203 models for computer science. academic press,

2001. 754

[44] edward a. scheinerman. mathematics: a discrete introduction. brooks

cole, third edition, 2012.

   mcs        2017/6/5     19:42     page 984     #992

984

bibliography

[45] victor shoup. a computational introduction to number theory and algebra.

cambridge university press, 2005. 341

[46] larry stockmeyer. planar 3-colorability is polynomial complete. acm

sigact news, pages 19   25, 1973. 513

[47] gilbert strang. introduction to applied mathematics. wellesley-cambridge

press, wellesley, massachusetts, 1986.

[48] michael stueben and diane sandford. twenty years before the blackboard.

mathematical association of america, 1998. 22

[49] daniel j. velleman. how to prove it: a structured approach. cambridge

university press, 1994. 4, 19, 152

[50] herbert s. wilf. generatingfunctionology. academic press, 1990. 712

[51] david williams. weighing the odds. cambridge university press, 2001.

mr1854128. 754

   mcs        2017/6/5     19:42     page 985     #993

   mcs        2017/6/5     19:42     page 986     #994

986

glossary of symbols

glossary of symbols

symbol
wwd
(cid:4)
  
^
_
(cid:0)!
(cid:0)!
:p; p
 !
  
9
8
2
 
6 
(cid:26)
6(cid:26)
[
\
;
a
(cid:0)
pow.a/
a (cid:2) b
s n
z
n; z(cid:21)0
zc
z(cid:0)
q
r
c
brc
dre
jrj

s
t

i2i si

i2i si

meaning
is de   ned to be
end of proof symbol
not equal
and, and
or, or
implies, if . . . , then (cid:1)(cid:1)(cid:1) , implies
state transition
not p , not.p/
iff, equivalent, iff
xor, exclusive-or, xor
exists
for all
is a member of, is in
is a (possibly =) subset of
is not a (possibly =) subset of
is a proper (not =) subset of
is not a proper (not =) subset of
set union
union of sets si where i ranges over set i of indices
set intersection
intersection of sets si where i ranges over set i of indices
the empty set, fg
complement of set a
set difference
powerset of set, a
cartesian product of sets a and b
cartesian product of n copies of set s
integers
nonnegative integers

; nc positive integers
negative integers
rational numbers
real numbers
complex numbers
the    oor of r: the greatest integer   r
the ceiling of r: the least integer (cid:21) r
the absolute value of a real number r

   mcs        2017/6/5     19:42     page 987     #995

987

glossary of symbols

symbol
r.x /
(cid:0)1
r
(cid:0)1.x /
r
surj
inj
bij
    1 in  
  (cid:21) 1 in  
    1 out  
  (cid:21) 1 out  
  d 1 out;d 1 in  
  
(cid:21)
(cid:3)
a
a!
rev.s/
s (cid:1) t
#c.s/
m j n
gcd
log
ln
lcm
.k::n/
  k::n/
.k::n  
  k::n  

p
q

i2i ri
i2i ri

qcnt.n; d /
rem.n; d /
  .mod n/
6 
zn
cn;(cid:1)n
z(cid:3)
(cid:30).n/
hu! vi
ida

n

meaning
image of set x under binary relation r
inverse of binary relation r
inverse image of set x under relation r
a surj b iff 9f w a ! b: f is a surjective function
a inj b iff 9r w a ! b: r is an injective total relation
a bij b iff 9f w a ! b: f is a bijection
injective property of a relation
surjective property of a relation
function property of a relation
total property of a relation
bijection relation
relational composition operator
the empty string/list
the    nite strings over alphabet a
the in   nite strings over alphabet a
the reversal of string s
concatenation of strings s; t; append.s; t /
number of occurrences of character c in string s
integer m divides integer n; m is a factor of n
greatest common divisor
the base 2 logarithm, log2
the natural logarithm, loge
least common multiple
fi 2 z j k < i < ng
fi 2 z j k   i < ng
fi 2 z j k < i   ng
fi 2 z j k   i   ng
sum of numbers ri where i ranges over set i of indices
product of numbers ri where i ranges over set i of indices
quotient of n divided by d
remainder of n divided by d
congruence modulo n
not congruent
the ring of integers modulo n
addition and multiplication operations in zn
the set of numbers in   0; n/ relatively prime to n
euler   s totient function wwdjz(cid:3)
directed edge from vertex u to vertex v
identity relation on set a: aidaa

0 iff a d a

j

n

0

   mcs        2017/6/5     19:42     page 988     #996

988

glossary of symbols

symbol
r
r

(cid:3)
c

fbx g
fbg

hu   vi

e.g/
v .g/
cn
ln
kn
hn
l.g/
r.g/
kn;m
(cid:31).g/
hn
(cid:24)
n  

(cid:0) n

(cid:1)

pr(cid:2)a j b(cid:3)

m
o./
o./
   ./
(cid:127)./
!./
pr  a  
s
ia
pdf
cdf
ex  r  
ex  r j a  
ex2  r  
var  r  

var2(cid:2)r(cid:3)

(cid:27)r

meaning
path relation of relation r; re   exive transitive closure of r
positive path relation of r; transitive closure of r
merge of walk f with end vertex x
and walk g with start vertex x
merge of walk f and walk g
where f   s end vertex equals g   s start vertex
undirected edge connecting vertices u    v
the edges of graph g
the vertices of graph g
the length-n undirected cycle
the length-n line graph
the n-vertex complete graph
the n-dimensional hypercube
the    left    vertices of bipartite graph g
the    right    vertices of bipartite graph g
the complete bipartite graph with n left and m right vertices
chromatic number of simple graph g
id1 1= i

the nth harmonic numberpn

asymptotic equality
n factorial wwdn (cid:1) .n (cid:0) 1/(cid:1)(cid:1)(cid:1) 2 (cid:1) 1
wwdn  =m  ..n (cid:0) m/  ; the binomial coef   cient
asymptotic notation    little oh   
asymptotic notation    big oh   
asymptotic notation    theta   
asymptotic notation    big omega   
asymptotic notation    little omega   
id203 of event a
id155 of a given b
sample space
indicator variable for event a
id203 density function
cumulative distribution function
expectation of random variable r
conditional expectation of r given event a
abbreviation for .ex  r  /2
variance of r
the square of the variance of r
standard deviation of r

   mcs        2017/6/5     19:42     page 989     #997

index

cn, 466, 480
ie , indicator for event e, 816
k3;3, 533
k5, 533
big omega, 593
   ./, 591
bij, 110
(cid:31).g/, 475
ex2  r  , 879
inj, 110
(cid:24), 588
surj, 110
k-edge connected, 485
k-way independent, 785, 818
r-permutation, 660
iq, 872, 878
and-clause, 57
or-clauses, 58

absolute value, 24, 304
ackermann function, 221
acyclic, see also directed graph, 391
adjacency matrix, 387

walk counting matrix, 388

adleman, leonard, 338
akra-bazzi formula, 969
akra-bazzi theorem, 971, 977
annuity, 563, 564
antichain, 398
antisymmetric relation, 402
a posteriori, 774
asymmetric relation, 401, 430
asymptotic notation, 588

asymptotically smaller, o, little o,

588

asymptotic equality, 582
big o, 589

big omega, 593
little omega, 594

asymptotic relations, 603
average, 871
average degree, 523
axiom, 4, 9

axiomatic method, 9
equivalence axioms, see equiva-

lence (logic)

zfc axioms, 9, 273

axiom of choice, 274, 275, 291
axiom of extensionality, 100,

273

axiom of pairing, 273
foundation axiom, 274
in   nity axiom, 274
power set axiom, 274
replacement axiom, 274
subset axiom, 274
union axiom, 274

banach-tarski theorem, 275
base case, see induction, see recur-

sive data type

bayes    rule, 774
bayesian, 775
id47, 787
bene  s, v  aclav, 448
bernoulli distribution, 821
bernoulli variable, 879
bernoulli variables, 816
bezout   s lemma, 309
biased, 923
big o, see asymptotic notation
bijection, see binary relation
binary gcd, 347
binary relation, 105, 167, 390

   mcs        2017/6/5     19:42     page 990     #998

990

index

antisymmetric, 408
asymmetric, 408
bijection, 107, 258
equivalence, 408
image, 108
injection, 107
irre   exive, 407
linear, 408
product of relations, 404
properties, 399, 401, 407, 430
re   exive, 407
relation on a set, 105
support, 109
surjection, 107, 258
symmetric, 408
total, 107
transitive, 408

binary trees, 233
binet   s formula, 162, 704, 963
binomial distribution, 821
binomial distribution, 825, 882
binomial theorem, 628

binomial, 628
binomial coef   cient, 628

bin packing, 890
bipartite graph, 469, 472, 506, 546

degree-constrained, 473

birthday principle, 749
black-white coloring, 492
book stacking problem, 576
boole   s inequality, 751
boole, george, 48
boolean variable, 48
borel-cantelli lemma, 920
bottleneck, 472
boundary conditions, 961
bridge, 542
brin, sergey, 381, 933
buildup error, 487

busy, 858

canonical dnf

disjunctive normal form, 61

cantor, georg, 258
cardinality, 109
cartesian product, 102, 117
cdo, 919
ceiling, 986
chain, 395
characteristic equation, 964
chebyshev   s theorem, 875, 887
chebyshev bound, 918
chebyshev bound, 905

one-sided, 908

chernoff bound, 891
chinese appetizer problem, 873
chinese remainder theorem, 363
chromatic number, 475
closed forms, 563
closed walk, 479
cnf, see conjunctive normal form
codomain, 103, 105
collateralized debt obligation, 919
collatz conjecture, 220
collusion, 836, 838
colorable, 475
coloring, 452, 475

black-white, 492

combinatorial proof, 651, 690
combined variables, 61
communcation net

2-dimensional array, 455
latency, 443

communication net, 381, 441
2-dimensional array, 445
2-layer array, 455
bene  s net, 448
butter   y net, 446, 458
complete binary tree, 441

   mcs        2017/6/5     19:42     page 991     #999

991

index

congestion, 444

for min-latency, 457, 458

diameter, 442
latency

for min-congestion, 457, 458

convolution, 697
convolution, 697
convolution counting principle, 714
corollary, 9
countable, 261, 276, 280

reasoner net, 458
routing, 442

commutative ring, 327

ring of formal power series, 711
ring of intergers modulo n, 327

complement, see st99
complement rule, 751
complete bipartite graph, 533
complete graph, 533
composite, see prime
composition

of functions, 105
of relations, 390

comprehension axiom, 274
concatenation, 213, 386
concatentation, 246
conditional expectation, 830
con   dence, 916
con   dence level, 889
congestion, see communication net
congruence, see also modular arithemtic,

322

conjunctive form, 82
conjunctive normal form, 58
connected, 390, 480, 485

k-edge, 485
k-vertex, 485
edge, 485

connected components, 481
continuous faces, 537
continuum hypothesis, 276
contrapositive, 13, 55
converse, 55
convex function, 896

countably in   nite, 261

counter-model, 68
coupon collector problem, 843
covering edge, 426
critical path, 397, 421
cumulative distribution function, 819
cut edge, 486
cycle, see directed graph, simple graph,

475, 479

of length n, 466
cycle of a graph, 480

dag, 299, see directed graph
de bruijn, nicolaas, 410
degree d linear recurrence, 708
degree-constrained, 473, 641, 674
de morgan   s laws, see also equiva-

lence (logic), 59

de morgan   s laws for quanti   ers, 66
derived variables, 179
deviation from the mean, 871
diagonal argument, 266
diameter, 521, 524
die hard, 304
difference rule, 751
digraph, see directed graph
dilworth   s lemma, 398
directed graph, 381, 383

cycle, 385
degree, 383
directed acyclic graph, 391
shortest path, 389
walk

trail, 412
walk counting matrix, 388

   mcs        2017/6/5     19:42     page 992     #1000

992

index

walk relation, 390, 399

directed graphs, 299
discrete faces, 540
disjunctive form, 82
disjunctive normal form, 57
distributive law

sets, 101

divide-and-conquer, 969
divisibility, 301, 383, 402
division rule (counting), 621
division theorem, 303
dnf, see disjunctive normal form
domain, 103, 105
domain of de   nition, 109
domain of discourse, 66, 680
dongles, 542
dot product, 908
double or nothing, 744
double summations, 585
drawing, 533

edge

directed graph, 383

edge connected, 485
edge cover, 472
ellipsis, 31
empty graph, 476
empty relation, 402, 425, 428, 430,

431, 436

empty string, 90
endpoints, 462
equivalence (logic), 53, 58

axioms, 58

equivalence relation, 323, 405, 408

equivalence class, 406, 436

euclid, 8, 302
euclid   s algorithm, 307
euler, 6

formula, 544

euler   s (cid:30) function, 333

euler   s constant, 580
euler   s formula, 551
euler   s theorem, 333, 358

for zn, 335

euler   s theorem, 362, 371
euler tour, 411, 483, 521
event, 735, 750
events, 815
exclusive-or, 49
existential quanti   cation, 64
expectation, 827
expected absolute deviation, 908, 908
expected return, 833
expected value, 730, 827, 828, 871
exponential backoff, 825
exponential growth, 62

face-down four-card trick, 676
factorial, 219, 564, 583
factoring, 313
fair, 834
fast exponentiation, 177
feasible spouse, 186
fermat, 7
fermat   s last theorem, 7
fermat   s little theorem, 336
fibonacci numbers, 141
   oor, 986
floyd, robert w., 173, 216
   ush, 677
formal power series, 711
four color theorem, 6
four step method, 757
four-step method, 792
frege, gotlob, 271
frequentist, 775
full cnf

conjunctive normal form, 58

full conjunctive normal form

conjunctive normal form, 58

   mcs        2017/6/5     19:42     page 993     #1001

993

index

full disjunctive normal form, see dis-

junctive normal form

full dnf, see disjunctive normal form,

57

function, 103, 107

partial, 104
support, 104
total, 104

fundamental theorem of arithmetic,

see unique factorization the-
orem

gale, 187
gauss, 315, 321, 322
gcd, see greatest common divisor
general binomial density function, 826
generalized pigeonhole principle, 635
generalized product rule, 618
generating function, 713, 720
generating functions, 693
generating functions, 562
geometric distribution, 821
geometric distribution, 833, 833
geometric series, 693
geometric sum, 563
g  odel, kurt, 276
going broke, 923
goldbach, 7
goldbach   s conjecture, see also prime,

65, 314

golden ratio, 308, 346
good count, 244, 722, 722
google, 923
googol, 45
graph

bipartite, 469
coloring problem, 475
covering, 472
diameter, 442
matching, 472

perfect, 472
valid coloring, 475
width, 509

graph coloring, 475
gray edge, 492
greatest common divisor, 313
greatest common divisor, 236, 301,

306

guess-and-verify, 951

half-adder, 71
hall   s matching theorem, 470
hall   s theorem, 472, 674
hall   s theorem, 506
halt, 268
halting problem, 268
handshaking lemma, 465
hardy, g. h., 301
harmonic number, 579
harmonic numbers, 586
hat-check problem, 873
homogeneous linear recurrence, 961
homogeneous solution, 965
hypercube, 517

identity relation, 391, 402, 430, 436
image, 104, 108, 472

inverse image, 109
implication, 11, 13, 50

false hypothesis, 50

inclusion-exclusion, 644, 646
inclusion-exclusion for probabilities,

751

inclusion-exclusion rule, 644
incompleteness theorem, 276
independence, 780
independent, 881
independent random variables, 817
indicator random variable, 816
indicator variable, 828, 879, 904

   mcs        2017/6/5     19:42     page 994     #1002

994

index

indicator variables, 818
indirect proof, see proof by contra-

diction

induction, 132, 147, 230

induciton hypothesis, 134
inductive step, 134
structural induction, 211, 213

id136 rules, 10
in   nity, see countable, mapping rules,

set, set theory

inhomogeneous linear recurrence, 965
injection, see binary relation
integral method, 597
intended pro   t, 923
interest rate, 596
intersection, 99
invariant, 167, 169, 171, 305
invariant principle, 172
inverse (multiplicative), 329
irreducible, 352
irre   exive relation, 400, 430
isomorphic, 403, 429, 556

k-combination, see sbset split theo-

rem627

k-to-1 function, 621

latency, see communcation net
latin square, 504
lattice basis reduction, 638
law of large numbers, 887
leaf, 488
lemma, 9
length-n cycle, 466
length-n walk relation, 390
length of a walk, 478
let   s make a deal, 756
limit superior, 589
linear combination (integers), 303
linearity of expectation, 839, 839

literal, 57, 860
little o, see asymptotic notation
load balancing, 889, 893
lower bound, 33

mapping rules, 635

for    nite sets, 111

bijection, 111, 613
for in   nite sets, 258

markov   s bound, 908
markov   s theorem, 872, 901
markov bound, 918
markov bound, 895
matching, 470
matching birthdays, 883
matching condition, 470
id127, 590
maximum dilation, 946
maximum element, 397
max-value, 255
mean, 828
mean square deviation, 875
menger, 486
merge sort, 956, 976
merging vertices, 552
meyer, albert r, 173
minimal, 434
minimum vertex

directed graph, 394

minor, 552
modular arithmetic, 322, 324

congruence, 322

modulo n, see modular arithmetic
modus ponens, 10
monty hall problem, 731
mst, 491
multinomial theorem, 689

multinomial coef   cient, 626
multiplicative inverse, 329, 711
murphy   s law, 898, 918

   mcs        2017/6/5     19:42     page 995     #1003

995

index

mutual independence, 881
mutually independent, 782, 818, 883,

892

mutually recursive, 720

neighbors, 472, 499
nonconstructive proof, 638
nondecreasing, 572
nonincreasing, 572
non-unique factorization, 352
norm, 304, 352, 908
number theory, 301

o (big o), see asymptotic notation
o (little o), see asymptotic notation
odds, 787
optimal spouse, 186
order, 961
ordinals, 260, 295
outcome, 733, 750
outside face, 537

page, larry, 381, 933
page rank, 935, 937
pair, 294
pairwise independence, 881
pairwise independent, 785, 882, 883
pairwise independent additivity, 882
pairwise independent sampling, 886,

913

partial correctness, 176
partial fractions, 701
partial order, 399, 429

strict, 400, 408
weak, 401, 408

particular solution, 966
partition, 397
pascal   s triangle identity, 651
perfect graph, 472
perfect number, 302, 342

permutation, 558, 620
perturbation method, 565
perturbation method, 694
pessimal spouse, 186
pick-4, 892
planar drawing, 533
planar embedding, 539, 540, 556
planar graph, 537
planar subgraph, 547
plug-and-chug, 951
pointwise, 104
polyhedra, 549
polyhedron, 549
polynomial time, 62, 313, 468
population size, 888
power, 786
predicate, 8
preserved invariant, see invariant, 169
preserved under isomorphism, 468
prime, 5, 28, 313

prime number theorem, 314, 334
relatively prime, 330

prime factorization theorem, see unique

factorization theorem
id203 density function, 819
id203 density function,, 819
id203 function, 750, 798
id203 of an event, 750
id203 space, 750
product rule, 769
product rule, 811
product rule (counting), 615
product rule (generating functions),

696
proof, 9, 17
proof by contradiction, 16
proposition, 4, 5
propositional variable, 48
public key cryptography, 338

   mcs        2017/6/5     19:42     page 996     #1004

996

index

pulverizer, 309, 343
pure    rst-order formula, 273
p vs. np, 63
pythagoreans, 549

quicksort, 825
quotient, 304

randomized algorithm, 825
random sample, 916
random sampling, 915
random variable, 815
random variables, 816
random walk, 936
id93, 923
range, 104, 108
reachable, 171
reciprocal, 711
recognizes, 289
recurrence, 951
recursive data type, 211

ambiguity, 218

re   exive relation, 400
register allocation, 507
regular, 473, 501
regularity axiom, 274
regular polyhedron, 549
relation, see binary relation
relaxed, 858
remainder, 304
remainder arithmetic, see modular arith-

metic

riemann hypothesis, 334
ring, see commutative ring
ripple-carry, 72, 152
rivest, ronald, 338
root mean square, 877
routing, see communication net
rsa, 301, 338, 375
rubin, herman, 895

ruined, 923
russel, bertrand, 271
russell   s paradox, 271, 275
russell, bertrand, 275

sample space, 733, 750
sampling, 915
satis   ability, 56

sat, 62, 340

sat-solver, 63

satis   able, 861
schr  oder-bernstein, 259, 280
self-loops, 385, 463
sequence, 102

empty sequence, 102

set, 97

combining sets, 98
complement, 99
in   nite set, 257
multiset, 97
power set, 99, 263
set builder notation, 100
subset, 98, 404, 429

set difference, 99
set theory, 273
shamir, adi, 338
shapley, 187
signi   cance, 786
simple graph, 461, 462

complete graph, 465
degree, 462
empty graph, 465

simple graphs, 299
simpson   s paradox, 778
sink, 942
smallest counterexample, 31
spanning subgraph, 490
spanning tree, 490
square modulo n , 376
square multiple rule, 880

   mcs        2017/6/5     19:42     page 997     #1005

997

index

square root, 364
square root of s modulo n , 376
stable distributions, 942, 947
stable matching, 182
standard deviation, 14, 876, 878, 881
star graph, 477
state machine, 33, 167, 305, 308

execution, 171

stationary distribution, 937
stirling   s formula, 583
strict, 258
strictly decreasing, 179, 572
strictly increasing, 572
strict subset, 98
strong induction, 140, 147
strongly connected, 946
structure, 299
subset split rule, 626
summation notation, 31, 219
sum rule, 751
sum rule (counting), 616
surjection, see binary relation
symmetric, 299, 946
symmetric relation, 405, 461
symmetry, 405

tails, 825
tails of the distribution, 825
termination (state machine), 176
the bookkeeper rule, 626
theorem, 9
topological sort, 393
total expectation, 832
totient function, 333
tournament digraph, 414, 416, 432,

760, 855

towers of hanoi, 719, 953
transitive, 746
transitive relation, 399, 430
trap, 947

tree diagram, 733, 792
triangle identity, 651
truth table, 48
turing, 318, 332
turing   s code, 327, 332
twin prime conjecture, 313
type-checking, see halting problem

unbiased binomial distribution, 825
unbiased game, 923
unbounded gambler   s ruin, 932
uncountable, 261, 288, 291
uniform, 744, 752, 821
uniform distribution, 821
uniform distribution, 821
union, 98
union bound, 752
unique factorization theorem, 32, 317
universal quanti   cation, 64
unlucky, 858
upper bound, 33

valid coloring, 475
validity (logic), 56, 62, 67
value of an annuity, 566
variance, 875, 886, 905
vertex

directed graph, 383
simple graph, 462
vertex connected, 485

walk, see directed graph, simple graph,

521

walk in a simple graph, 478
weak law of large numbers, 887,

914

weakly connected, 412
weakly decreasing, 162, 179, 315, 572
weakly increasing, 179, 572
weight, 491

   mcs        2017/6/5     19:42     page 998     #1006

998

index

well founded, 292, 434
well ordering principle, 147, 160, 176

well ordered set, 33

well ordering principle (wop), 29
winnings, 833
wrap, 723

zermelo-fraenkel set theory, 273, 276
zfc, see zermello-fraenkel set the-

ory

