turbo parser redux:

from dependencies to constituents

andr  e martins

joint work with: noah smith, m  ario figueiredo, eric xing, pedro aguiar,

miguel almeida, mariana almeida, and daniel fern  andez-gonz  alez

lxmls, lisboa, 26/07/16

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

1 / 55

id170 and nlp

id170: a machine learning framework for predicting
structured, constrained, and interdependent outputs

nlp deals with structured and ambiguous textual data:

machine translation

id103

syntactic parsing

id29

information extraction

...

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

2 / 55

constituent/phrase-structure parsing

s --> np vp
np --> det adj n
vp --> v np adv
adj --> minimal
adv --> here
det --> a
n --> logic
n --> role
v --> plays

s

np

n

logic

v

plays

vp

np

adv

here

det

adj

n

a

minimal

role

example extracted from the id32.

(magerman, 1995; charniak, 1996; johnson, 1998; collins, 1999; klein and manning, 2003)

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

3 / 55

id33

map sentences to their syntactic structure.

a lexicalized syntactic formalism

grammar functions represented as lexical relationships (dependencies)

(eisner, 1996; mcdonald et al., 2005; nivre et al., 2006; koo et al., 2007)

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

4 / 55

*logicplaysaminimalrolehereoutline

1 turbo parsers

2 parsing as reduction

dependencies and constituents

head-ordered dependency trees

reduction-based constituent parsers

experiments

conclusions

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

5 / 55

what is a turbo parser?

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

6 / 55

what is a turbo parser?

a parser that runs id136 in factor graphs, ignoring global
e   ects caused by loops (martins et al., 2010)
name inspired from turbo decoders (berrou et al., 1993)

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

6 / 55

examples of turbo parsers

exponential-sized ilp formulation (riedel and clarke, 2006)

polynomial-sized ilp formulation with multi-commodity    ows
(martins et al., 2009)

belief propagation decoder (smith and eisner, 2008; martins et al.,
2010)

id209 decoder (koo et al., 2010)
ad3 decoder (martins et al., 2011, 2013)

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

7 / 55

an important distinction

a projective tree:

a non-projective tree:

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

8 / 55

*logicplaysaminimalrolehere*welearnedalessonin1987aboutvolatilityan important distinction

a projective tree:

a non-projective tree:

non-projective trees are suitable for languages with    exible word
order (dutch, german, czech,...).

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

8 / 55

*logicplaysaminimalrolehere*welearnedalessonin1987aboutvolatilityfirst-order scores for arcs

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

9 / 55

*welearnedalessonin1987aboutvolatilitysecond-order scores for consecutive siblings

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

9 / 55

*welearnedalessonin1987aboutvolatilitysecond-order scores for grandparents

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

9 / 55

*welearnedalessonin1987aboutvolatilityscores for arbitrary siblings

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

9 / 55

*welearnedalessonin1987aboutvolatilityscores for head bigrams

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

9 / 55

*welearnedalessonin1987aboutvolatilitythird-order scores for grand-siblings

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

9 / 55

*welearnedalessonin1987aboutvolatilitythird-order scores for tri-siblings

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

9 / 55

*welearnedalessonin1987aboutvolatilitydecoding

how to deal with all these parts?

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

10 / 55

arcconsecutive siblingsgrandparentall siblingsdirected pathhead bigramnonprojective arcgrand-siblingstri-siblingsdecoding

how to deal with all these parts?
beyond arc-factored models, non-projective parsing is np-hard
(mcdonald and satta, 2007)   need to embrace approximations!

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

10 / 55

arcconsecutive siblingsgrandparentall siblingsdirected pathhead bigramnonprojective arcgrand-siblingstri-siblingsdecoding

how to deal with all these parts?
beyond arc-factored models, non-projective parsing is np-hard
(mcdonald and satta, 2007)   need to embrace approximations!

mcdonald et al. (2006)
smith et al. (2008)
martins et al. (2010)
koo et al. (2010)
martins et al. (2011)
martins et al. (2013)

parser

projective + greedy

loopy bp
lp solver

dual decomp.

ad3

ad3 & active set

af
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)

cs
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)

g
(cid:88)
(cid:88)

(cid:88)
(cid:88)

as
(cid:88)
(cid:88)

(cid:88)
(cid:88)

dp

hb

npa

gs

ts

(cid:88)

(cid:88)

(cid:88)

(cid:88)
(cid:88)

(cid:88)

(cid:88)

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

10 / 55

arcconsecutive siblingsgrandparentall siblingsdirected pathhead bigramnonprojective arcgrand-siblingstri-siblingsfactor graph representations

for each input x     x: a large set of candidate outputs y(x)
decoding problem:

(cid:98)y = arg max

y   y(x)

fw(x, y )

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

11 / 55

factor graph representations

for each input x     x: a large set of candidate outputs y(x)
decoding problem:

(cid:98)y = arg max

y   y(x)

fw(x, y )

key assumption: fw decomposes into (overlapping) parts

(cid:88)

s

fs (ys )

fw(x, y ) :=

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

11 / 55

factor graph representations

for each input x     x: a large set of candidate outputs y(x)
decoding problem:

(cid:98)y = arg max

y   y(x)

fw(x, y )

key assumption: fw decomposes into (overlapping) parts

(cid:88)

s

fs (ys )

fw(x, y ) :=

examples: id48s, crfs, pid18s, general id114

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

11 / 55

factors as machines

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

12 / 55

factors as machines

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

12 / 55

alternating directions id209 (ad3)

a general purpose algorithm, suitable for many scenarios in nlp and ir.

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

13 / 55

alternating directions id209 (ad3)

a general purpose algorithm, suitable for many scenarios in nlp and ir.

problems with factor graph representations

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

13 / 55

alternating directions id209 (ad3)

a general purpose algorithm, suitable for many scenarios in nlp and ir.

problems with factor graph representations

statements in fol

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

13 / 55

alternating directions id209 (ad3)

a general purpose algorithm, suitable for many scenarios in nlp and ir.

problems with factor graph representations

statements in fol

budget/knapsack constraints

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

13 / 55

alternating directions id209 (ad3)

a general purpose algorithm, suitable for many scenarios in nlp and ir.

problems with factor graph representations

statements in fol

budget/knapsack constraints

combination of structured models

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

13 / 55

alternating directions id209 (ad3)

a general purpose algorithm, suitable for many scenarios in nlp and ir.

problems with factor graph representations

statements in fol

budget/knapsack constraints

combination of structured models

high level idea:

decompose a complex problem into local subproblems (factors),
constrained to be globally consistent

iterate between solving the local subproblems and penalizing the
global disagreements (via lagrange multipliers)

fol/knapsack constraints: the local subproblems correspond to
projections onto    hard constraint    polytopes

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

13 / 55

projecting onto hard constraint polytopes

all projections can be computed in linear time (martins et al., 2015)
applications: markov logic networks (richardson and domingos,
2006), constrained conditional models (roth and yih, 2004),
summarization (almeida and martins, 2013), ...

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

14 / 55

xororor-outknapsacksome problems in which ad3 have been applied

id33 (martins et al., 2011, 2013)

frame semantics (das et al., 2012)

broad-coverage id29 (martins and almeida, 2014)

compressive summarization (almeida and martins, 2013)

coreference resolution (almeida et al., 2014)

could be a great    t to many other applications!!

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

15 / 55

literature pointers

andr  e f. t. martins.
   ad3: a fast decoder for id170.   
book chapter of advanced id170,
sebastian nowozin, peter v. gehler, jeremy
jancsary, and christoph h. lampert (editors),
mit press, 2014.

a. martins, m. figueiredo, p. aguiar, n. smith, e. xing.
   ad3: alternating directions id209 for map id136
in id114.   
jmlr 2015.

more details: emnlp 2014 tutorial on    lp decoders for nlp.   

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

16 / 55

parsing accuracies/runtimes

sota accuracies for the largest non-projective datasets (conll-2006 and
conll-2008):

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

17 / 55

extension: broad-coverage id29

same idea applied to id14.

best results in the semeval 2014 shared task:

andr  e f. t. martins and mariana s. c. almeida.
   priberam: a turbo semantic parser with second order features.   
semeval 2014.

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

18 / 55

try it yourself: ad3 toolkit

freely available at: http://www.ark.cs.cmu.edu/ad3

implemented in c++, includes a python wrapper (thanks to andy
mueller)

many built-in factors: logic, knapsack, dense, and some structured
factors

you can implement your own factor (only need to write a local map
decoder!)

toy examples included (parsing, coreference, potts models)

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

19 / 55

try it yourself: turboparser

freely available at: http://www.ark.cs.cmu.edu/turboparser

implemented in c++, includes a python wrapper

not just parsing, but a full nlp pipeline now!

includes multilingual id52, id33, semantic role
labeling, entity recognition, coreference resolution (all trainable on
any dataset).

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

20 / 55

outline

1 turbo parsers

2 parsing as reduction

dependencies and constituents

head-ordered dependency trees

reduction-based constituent parsers

experiments

conclusions

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

21 / 55

in a nutshell (fern  andez-gonz  alez and martins, 2015, acl)

constituent parsers are slow (heavy grammar constant)

dependency parsers are faster, but their output is less informative

how to get the best of both worlds?

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

22 / 55

in a nutshell (fern  andez-gonz  alez and martins, 2015, acl)

constituent parsers are slow (heavy grammar constant)

dependency parsers are faster, but their output is less informative

how to get the best of both worlds?

our proposal: a reduction of constituent parsing to id33

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

22 / 55

in a nutshell (fern  andez-gonz  alez and martins, 2015, acl)

constituent parsers are slow (heavy grammar constant)

dependency parsers are faster, but their output is less informative

how to get the best of both worlds?

our proposal: a reduction of constituent parsing to id33

rooted in a novel formalism: head-ordered dependency trees
works for any out-of-the-box dependency parser
competitive for english and morphologically rich languages
results above the state of the art for discontinuous parsing

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

22 / 55

outline

1 turbo parsers

2 parsing as reduction

dependencies and constituents

head-ordered dependency trees

reduction-based constituent parsers

experiments

conclusions

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

23 / 55

outline

1 turbo parsers

2 parsing as reduction

dependencies and constituents

head-ordered dependency trees

reduction-based constituent parsers

experiments

conclusions

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

24 / 55

continuous and discontinuous c-trees

id18 generate continuous trees, lcfrs generate discontinuous
trees (vijay-shanker et al., 1987)

... but existing discontinuous parsers are too slow and inaccurate!

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

25 / 55

projective and non-projective d-trees

continuous and discontinuous c-trees    project    respectively to
projective and non-projective d-trees (gaifman, 1965)

non-projectiveness is suitable for languages with    exible word order
(dutch, german, czech, etc.)

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

26 / 55

projecting c-trees onto d-trees...

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

27 / 55

projecting c-trees onto d-trees...

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

27 / 55

projecting c-trees onto d-trees...

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

27 / 55

projecting c-trees onto d-trees...

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

27 / 55

projecting c-trees onto d-trees...

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

27 / 55

... and back?

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

27 / 55

... and back?

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

27 / 55

... and back?

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

27 / 55

... and back?

this paper: formal equivalence results to    invert    this projection.

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

27 / 55

related work

store structural information in the dependency labels (hall and nivre,
2008)

manual transformation rules toward multi-representational treebanks
(xia and palmer, 2001; de marne   e et al., 2006; xia et al., 2008)

apply second-stage constituent parser (kong et al., 2015)

joint dependency and constituent parsing (carreras et al., 2008; rush
et al., 2010)

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

28 / 55

outline

1 turbo parsers

2 parsing as reduction

dependencies and constituents

head-ordered dependency trees

reduction-based constituent parsers

experiments

conclusions

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

29 / 55

strictly ordered d-trees

key idea: endow d-trees with additional structure, by making each head
attach its modi   ers in a particular order

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

30 / 55

strictly ordered d-trees

key idea: endow d-trees with additional structure, by making each head
attach its modi   ers in a particular order

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

30 / 55

strictly ordered d-trees

key idea: endow d-trees with additional structure, by making each head
attach its modi   ers in a particular order

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

30 / 55

strictly ordered d-trees

key idea: endow d-trees with additional structure, by making each head
attach its modi   ers in a particular order

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

30 / 55

strictly ordered d-trees

key idea: endow d-trees with additional structure, by making each head
attach its modi   ers in a particular order

proposition
binary c-trees = strictly ordered d-trees

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

30 / 55

strictly ordered d-trees

key idea: endow d-trees with additional structure, by making each head
attach its modi   ers in a particular order

proposition
binary c-trees = strictly ordered d-trees

same number of symbols (dependency alphabet = phrasal alphabet)

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

30 / 55

the spinal view

the order is given by the attachment position in the spine (carreras
et al., 2008)

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

31 / 55

weakly ordered d-trees

same, but allow simultaneous events (as long as the d-label is consistent)

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

32 / 55

weakly ordered d-trees

same, but allow simultaneous events (as long as the d-label is consistent)

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

32 / 55

weakly ordered d-trees

same, but allow simultaneous events (as long as the d-label is consistent)

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

32 / 55

weakly ordered d-trees

same, but allow simultaneous events (as long as the d-label is consistent)

can every c-tree be represented like this?

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

32 / 55

weakly ordered d-trees

same, but allow simultaneous events (as long as the d-label is consistent)

can every c-tree be represented like this? no: unaries are lost.

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

32 / 55

weakly ordered d-trees

same, but allow simultaneous events (as long as the d-label is consistent)

can every c-tree be represented like this? no: unaries are lost.

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

32 / 55

weakly ordered d-trees

same, but allow simultaneous events (as long as the d-label is consistent)

can every c-tree be represented like this? no: unaries are lost.

proposition
unaryless c-trees = weakly ordered d-trees

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

32 / 55

what about projective trees?

a head-ordered d-tree has the nesting property if, on each side of every
head, closer modi   ers are attached    rst.

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

33 / 55

what about projective trees?

a head-ordered d-tree has the nesting property if, on each side of every
head, closer modi   ers are attached    rst.

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

33 / 55

what about projective trees?

a head-ordered d-tree has the nesting property if, on each side of every
head, closer modi   ers are attached    rst.

proposition
unaryless continuous c-trees = nested-weakly ordered projective d-trees

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

33 / 55

the spinal view for discontinuities

projective, but not nested:

nested, but not projective:

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

34 / 55

outline

1 turbo parsers

2 parsing as reduction

dependencies and constituents

head-ordered dependency trees

reduction-based constituent parsers

experiments

conclusions

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

35 / 55

reduction-based constituent parsers

1 convert c-treebank to head-ordered d-treebank.

2 encode head-orders in the d-labels, yielding a d-treebank.

3 train a d-parser on the d-treebank.

4 run the d-parser on new sentences.

5 convert the predicted d-trees into unaryless c-trees.

6 recover unary nodes.

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

36 / 55

reduction-based constituent parsers

1 convert c-treebank to head-ordered d-treebank.

2 encode head-orders in the d-labels, yielding a d-treebank.

3 train a d-parser on the d-treebank.

4 run the d-parser on new sentences.

5 convert the predicted d-trees into unaryless c-trees.

6 recover unary nodes.

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

36 / 55

label encoding strategies

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

37 / 55

label encoding strategies

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

37 / 55

label encoding strategies

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

37 / 55

impact of label encoding

evaluated on the english ptb   22 (marcus et al., 1993).

# labels dep (las)

const (f1)

h&n encoding
direct encoding
delta encoding

731
75
69

87.86
91.99
92.00

89.39
90.89
90.94

h&n encoding overgenerates labels, leading to a loss in accuracy

delta encoding performs consistently better than direct encoding on
other datasets (see paper)

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

38 / 55

reduction-based constituent parsers

1 convert c-treebank to head-ordered d-treebank.

2 encode head-orders in the d-labels, yielding a d-treebank.

3 train a d-parser on the d-treebank.

4 run the d-parser on new sentences.

5 convert the predicted d-trees into unaryless c-trees.

6 recover unary nodes.

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

39 / 55

choice of dependency parser

evaluated on the english ptb   22 (marcus et al., 1993).

dependency parser

maltparser
mstparser
zpar
turboparser-basic
turboparser-standard
turboparser-full
turboparser-full + labeler

dep (las) const (f1) # toks/s.
5,392
363
1,022
2,585
1,658
959
912

88.95
89.86
91.28
90.23
91.58
91.70
92.00

86.87
87.93
89.50
87.63
90.41
90.53
90.94

best results: separate stages for d-parser and d-labeler

the d-labeler is a simple sequence model for each head (see paper)

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

40 / 55

reduction-based constituent parsers

1 convert c-treebank to head-ordered d-treebank.

2 encode head-orders in the d-labels, yielding a d-treebank.

3 train a d-parser on the d-treebank.

4 run the d-parser on new sentences.

5 convert the predicted d-trees into unaryless c-trees.

6 recover unary nodes.

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

41 / 55

recovery of unary nodes

we run independent classi   ers at each c-node
each class is either null (no unary node pre-appended) or a
concatenation of labels (e.g., s->adjp for a node jj)
to speed-up: only observed classes are considered (9.9 classes per
node in ptb   22)
a tiny fraction of the time is spent on this post-processing (<2%),
with f1-score of 99.43% in ptb   22

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

42 / 55

outline

1 turbo parsers

2 parsing as reduction

dependencies and constituents

head-ordered dependency trees

reduction-based constituent parsers

experiments

conclusions

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

43 / 55

experiments: english ptb

results on the english ptb   23 (marcus et al., 1993).

parser

lr

lp

f1 #toks/s.

85.3 86.5 85.9
klein and manning (2003)
88.4 88.8 88.6
hall et al. (2014)
89.1 89.7 89.4
socher et al. (2013)
charniak (2000)
89.5 89.9 89.5
stanford shift-reduce (2014) 89.1 89.1 89.1
90.0 90.3 90.1
petrov and klein (2007)
this work
89.9 90.4 90.2
zhu et al. (2013)
90.3 90.6 90.4
90.7 91.4 91.1
carreras et al. (2008)
zhu et al. (2013)
91.1 91.5 91.3
charniak and johnson (2005) 91.2 91.8 91.5

143
12
70
   
655
169
957
1,290
   
   
84

grayed parsers are ensemble/reranking/semi-supervised systems.

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

44 / 55

experiments: morphologically rich languages

results on spmrl14 shared task datasets (seddah et al., 2014).

parser

bas

fre

ger

heb

hun

kor

pol

swe

avg.

70.50 80.38 78.30
berkeley
78.28
berkeley tagged
74.74
77.15
crabb  e and seddah (2014) 85.35
hall et al. (2014)
83.39
78.43
85.90 78.75 78.66 88.97 88.16
this work
bj  orkelund et al. (2014)
88.24
91.72

79.76
79.68
79.70

82.53

81.66

89.80

81.62
85.22
87.51

86.96
85.42
86.19
87.18 88.25 80.18 90.66

79.19
71.42
78.56
80.64
79.35 91.60 82.72
82.00

79.23
86.75

78.45
81.17
83.69
83.72
91.20 82.80 84.22
90.50
86.72

85.50

79.28
83.81

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

45 / 55

experiments: discontinuous parsing

results on the discontinuous tiger treebank (brants et al., 2002).

tiger-spmrl, l     70

gold tags

pred. tags

versley (2014b)
this work

versley (2014b)
this work

gold tags

pred. tags

tiger-h&n, l     40

hall and nivre (2008)
versley (2014a)
this work

hall and nivre (2008)
van cranenburgh and bod (2013)
this work

f1

ex

76.46
80.98

73.90
77.72

41.05
43.44

37.00
38.75

f1

ex

79.93
74.23
85.53

75.33
78.8   
82.57

37.78
37.32
51.21

32.63
40.8   
45.93

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

46 / 55

experiments: discontinuous parsing

results on the discontinuous negra treebank (skut et al., 1997).

negra, l     40

gold tags

van cranenburgh (2012)
van cranenburgh and bod (2013)
this work

pred. tags

van cranenburgh and bod (2013)
this work

f1

ex

72.33
76.8   
81.08

74.8   
77.93

33.16
40.5   
48.04

38.7   
44.83

we parse all sentences (regardless of length) in 27.1 seconds in a
single core (618 toks/sec)

orders of magnitude faster than van cranenburgh and bod (2013)

similar speed as the easy-   rst system of versley (2014a), but much
higher accuracy

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

47 / 55

outline

1 turbo parsers

2 parsing as reduction

dependencies and constituents

head-ordered dependency trees

reduction-based constituent parsers

experiments

conclusions

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

48 / 55

conclusions

we proposed a reduction technique that allows to implement a
constituent parser when only a dependency parser is available.
the technique is very simple and    exible: applicable to any
dependency parser, regardless of its nature or kind.

if the dependency parser is non-projective, we can predict
discontinuous constituent trees.
we showed empirically that the reduction leads to highly-competitive
constituent parsers for english and 8 morphologically rich languages.

we surpassed the state of the art in discontinuous parsing of german
by a wide margin.

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

49 / 55

we   re hiring!

excited about mt, id104 and lisbon?     jobs@unbabel.com.

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

50 / 55

acknowledgments

spanish ministry of economy and competitiveness and feder (project
tin2010-18552-c03-01)

ministry of education (fpu grant program) and xunta de galicia (projects
r2014/029 and r2014/034)

funda  c  ao para a ci  encia e tecnologia, grants uid/eea/50008/2013 and
ptdc/eei-sii/2312/2012.

priberam: qren/por lisboa (portugal), eu/feder programme, intelligo
project, contract 2012/24803.

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

51 / 55

references i

almeida, m. b. and martins, a. f. t. (2013). fast and robust compressive summarization with id209 and

id72. in proc. of the annual meeting of the association for computational linguistics.

almeida, m. s. c., almeida, m. b., and martins, a. f. t. (2014). a joint model for quotation attribution and coreference
resolution. in proc. of the annual meeting of the european chapter of the association for computational linguistics.

berrou, c., glavieux, a., and thitimajshima, p. (1993). near shannon limit error-correcting coding and decoding. in proc. of

international conference on communications, volume 93, pages 1064   1070.

bj  orkelund, a., c   etino  glu, o., fale  nska, a., farkas, r., mueller, t., seeker, w., and sz  ant  o, z. (2014). introducing the

ims-wroc(cid:32)law-szeged-cis entry at the spmrl 2014 shared task: reranking and morpho-syntax meet unlabeled data. in proc. of
the first joint workshop on statistical parsing of morphologically rich languages and syntactic analysis of non-canonical
languages.

brants, s., dipper, s., hansen, s., lezius, w., and smith, g. (2002). the tiger treebank. in proc. of the workshop on

treebanks and linguistic theories.

carreras, x., collins, m., and koo, t. (2008). tag, id145, and the id88 for e   cient, feature-rich

parsing. in proc. of the international conference on natural language learning.

charniak, e. (1996). tree-bank grammars. in proc. of the national conference on arti   cial intelligence.

charniak, e. (2000). a maximum-id178-inspired parser. in proc. of the north american chapter of the association for

computational linguistics conference.

charniak, e. and johnson, m. (2005). coarse-to-   ne n-best parsing and maxent discriminative reranking. in proc. of annual

meeting of the association for computational linguistics.

collins, m. (1999). head-driven statistical models for natural language parsing. phd thesis, university of pennsylvania.

crabb  e, b. and seddah, d. (2014). multilingual discriminative shift reduce phrase structure parsing for the spmrl 2014 shared
task. in proc. of the first joint workshop on statistical parsing of morphologically rich languages and syntactic analysis
of non-canonical languages.

das, d., martins, a. f. t., and smith, n. a. (2012). an exact id209 algorithm for shallow id29

with constraints. in proc. of first joint conference on lexical and computational semantics (*sem).

de marne   e, m.-c., maccartney, b., manning, c. d., et al. (2006). generating typed dependency parses from phrase structure

parses. in proc. of the meeting of the language resources and evaluation conference.

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

52 / 55

references ii

eisner, j. (1996). three new probabilistic models for id33: an exploration. in proc. of international conference

on computational linguistics.

fern  andez-gonz  alez, d. and martins, a. f. t. (2015). parsing as reduction. in proc. of the conference of the association for

computational linguistics.

gaifman, h. (1965). dependency systems and phrase-structure systems. information and control.

hall, d., durrett, g., and klein, d. (2014). less grammar, more features. in proc. of the annual meeting of the association for

computational linguistics.

hall, j. and nivre, j. (2008). a dependency-driven parser for german dependency and constituency representations. in proc. of

the workshop on parsing german.

johnson, m. (1998). pid18 models of linguistic tree representations. computational linguistics.

klein, d. and manning, c. d. (2003). accurate unlexicalized parsing. in proc. of annual meeting on association for

computational linguistics.

kong, l., rush, a. m., and smith, n. a. (2015). transforming dependencies into phrase structures. in proc. of the conference

of the north american chapter of the association for computational linguistics.

koo, t., globerson, a., carreras, x., and collins, m. (2007). id170 models via the matrix-tree theorem. in

empirical methods for natural language processing.

koo, t., rush, a. m., collins, m., jaakkola, t., and sontag, d. (2010). id209 for parsing with non-projective

head automata. in proc. of empirical methods for natural language processing.

magerman, d. (1995). statistical decision-tree models for parsing. in proc. of annual meeting on association for

computational linguistics, pages 276   283.

marcus, m. p., santorini, b., and marcinkiewicz, m. a. (1993). building a large annotated corpus of english: the penn

treebank. computational linguistics.

martins, a. f. t., almeida, m. b., and smith, n. a. (2013). turning on the turbo: fast third-order non-projective turbo

parsers. in proc. of the annual meeting of the association for computational linguistics.

martins, a. f. t. and almeida, m. s. c. (2014). priberam: a turbo semantic parser with second order features. in proc. of the

international workshop on semantic evaluations (semeval); task 8: broad-coverage semantic id33.

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

53 / 55

references iii

martins, a. f. t., figueiredo, m. a. t., aguiar, p. m. q., smith, n. a., and xing, e. p. (2015). ad3: alternating directions

id209 for map id136 in id114. journal of machine learning research (to appear).

martins, a. f. t., smith, n. a., aguiar, p. m. q., and figueiredo, m. a. t. (2011). id209 with many

overlapping components. in proc. of empirical methods for natural language processing.

martins, a. f. t., smith, n. a., and xing, e. p. (2009). concise integer id135 formulations for dependency

parsing. in proc. of annual meeting of the association for computational linguistics.

martins, a. f. t., smith, n. a., xing, e. p., figueiredo, m. a. t., and aguiar, p. m. q. (2010). turbo parsers: dependency

parsing by approximate variational id136. in proc. of empirical methods for natural language processing.

mcdonald, r., pereira, f., ribarov, k., and hajic, j. (2005). non-projective id33 using spanning tree algorithms.

in proc. of empirical methods for natural language processing.

mcdonald, r. and satta, g. (2007). on the complexity of non-projective data-driven id33. in proc. of

international conference on parsing technologies.

nivre, j., hall, j., nilsson, j., eryi  git, g., and marinov, s. (2006). labeled pseudo-projective id33 with support

vector machines. in proc. of international conference on natural language learning.

petrov, s. and klein, d. (2007). improved id136 for unlexicalized parsing. in proc. of the north american chapter of the

association for computational linguistics.

richardson, m. and domingos, p. (2006). markov logic networks. machine learning, 62(1):107   136.

riedel, s. and clarke, j. (2006). incremental integer id135 for non-projective id33. in proc. of

empirical methods for natural language processing.

roth, d. and yih, w. (2004). a id135 formulation for global id136 in natural language tasks. in international

conference on natural language learning.

rush, a., sontag, d., collins, m., and jaakkola, t. (2010). on id209 and id135 relaxations for

natural language processing. in proc. of empirical methods for natural language processing.

seddah, d., k  ubler, s., and tsarfaty, r. (2014). introducing the spmrl 2014 shared task on parsing morphologically-rich

languages. in proc. of the first joint workshop on statistical parsing of morphologically rich languages and syntactic
analysis of non-canonical languages.

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

54 / 55

references iv

skut, w., krenn, b., brants, t., and uszkoreit, h. (1997). an annotation scheme for free word order languages. in proc. of the

fifth conference on applied natural language processing anlp-97.

smith, d. and eisner, j. (2008). id33 by belief propagation. in proc. of empirical methods for natural language

processing.

socher, r., bauer, j., manning, c. d., and ng, a. y. (2013). parsing with compositional vector grammars. in proc. of annual

meeting of the association for computational linguistics.

van cranenburgh, a. (2012). e   cient parsing with linear context-free rewriting systems. in proc. of the conference of the

european chapter of the association for computational linguistics.

van cranenburgh, a. and bod, r. (2013). discontinuous parsing with an e   cient and accurate dop model. proc. of

international conference on parsing technologies.

versley, y. (2014a). experiments with easy-   rst nonprojective constituent parsing. in proc. of the first joint workshop on

statistical parsing of morphologically rich languages and syntactic analysis of non-canonical languages.

versley, y. (2014b). incorporating semi-supervised features into discontinuous easy-   rst constituent parsing. corr,

abs/1409.3813.

vijay-shanker, k., weir, d. j., and joshi, a. k. (1987). characterizing structural descriptions produced by various grammatical

formalisms. in proc. of the annual meeting on association for computational linguistics.

xia, f. and palmer, m. (2001). converting dependency structures to phrase structures. in proc. of the first international

conference on human language technology research.

xia, f., rambow, o., bhatt, r., palmer, m., and misra sharma, d. (2008). towards a multi-representational treebank. lot

occasional series.

zhu, m., zhang, y., chen, w., zhang, m., and zhu, j. (2013). fast and accurate shift-reduce constituent parsing. in proc. of

annual meeting of the association for computational linguistics.

andr  e martins (unbabel/it)

turbo parser redux

lxmls, lisboa, 26/07/16

55 / 55

