   #[1]matt murray    feed [2]matt murray    comments feed [3]matt murray   
   building a music recommender with deep learning comments feed
   [4]predicting premier league points [5]unlocking the power of
   geospatial data with geopandas [6]alternate [7]alternate

   [8]matt murray

     * [9]home
     * [10]contact

     *
     *
     *

building a music recommender with deep learning

   i   ve spent a lot of money on music over the years and one website that
   i have purchased mp3   s from is [11]junodownload. it   s a digital
   download website predominantly used by djs and has a huge back
   catalogue of tracks for sale on its platform.

   it   s a great music resource and they provide a generous 2 minute sample
   mp3 file for each song they have for sale. the only problem is   it   s
   really hard to find music on the site that isn   t a new release or
   currently top of the sales charts.

   the website is heavily geared towards promoting new content, and that
   makes sense as it   s going to be the new music that generates the most
   revenue     but what about the other 99% of tracks for sale on the
   website?

music recommendations

   there are a number of track recommendations already on the website. on
   the main site, there   s sales chart lists, new release lists and a
   plethora of curated recommendation lists by staff and djs.

   on top of that, on each individual track / single web page, running
   along the right hand side of the window are recommenders for    people
   who bought this also bought   ,    other releases by the artist    and    other
   releases on this record label   , which are also useful.

   but with such a large database of music, i feel that the site is
   missing a content-based    you might also like    type recommender that
   suggests similar songs that a user might like based on what they are
   currently listening to, have added to their cart etc.

   wouldn   t it be cool if you could discover music that was released a few
   years ago that sounds similar to a new song that you like? surely juno
   are missing out on potential sales by not offering this type of feature
   on their website.

   after being inspired by a [12]blog post i   d read recently from somebody
   who had classified music genres for songs in their own music library, i
   decided to see if i could adapt that methodology to build a music
   recommender.

process

   achieving this goal required a number of data acquisition, processing
   and model training steps. here   s a rundown of all the steps involved:

download mp3 files

   the first thing i needed to do was download a large number of the
   sample mp3 files to work with.

   after scraping track information for more than 400,000 music files
   available for sale on the website, i arbitrarily picked 9 different
   music genres and then selected at random 1,000 tracks from each of
   these genres.

   the 9 genres were:
     * breakbeat
     * dancehall
     * downtempo
     * drum and bass
     * funky house
     * hop hop / r&b
     * minimal house
     * rock/indie
     * trance

   over the next few days (my script was deliberately slow so i didn   t
   bombard the website with download requests) i downloaded all 9,000 mp3
   files.

convert audio to spectrograms

   there   s way too much data contained within an audio file, and so a
   large part of this whole process is essentially trying to condense the
   information from the music and extract the main features while
   eliminating all the    noise   . it   s basically an exercise in
   id84, and the first stage of this was to convert
   the audio into an image format.

   using discrete fourier transforms to convert the audio signals into the
   frequency domain, i processed each of my 9,000 mp3 audio files and
   saved spectrogram images for each song. a spectrogram is a visual
   representation of the spectrum of frequencies of sound as it varies
   with time. the intensity of colour on the image represents the
   amplitude of the sound at that frequency.

   i chose to create monochrome spectrograms, like this one below:

   this is around 20 seconds of audio generated from a hip hop track. on
   the x-axis is time, and on the y-axis are the frequencies of the sound.

split images into 256  256 squares

   in order to train a model on this data, i needed all of my images to be
   of equal dimensions, so i split all of my spectrograms into 256  256
   squares. this represents just over 5 seconds of audio on each image.

   by now, i had more than 185,000 images in total, each with a label for
   the music genre it represented.

   i split my data into a training set of 120,000, a validation set of
   45,000 and a holdout set of 20,000 images.

train a convolutional neural network on the images

   i trained a id98 on my image data. i needed to teach it to recognise
   what the different types of music    looked    like in the spectrogram
   images, so i used the genre labels and trained it to identify the music
   genre from the images.

   below is a visualisation of the id98 pipeline:

   starting with the spectrogram image on the upper left hand side, the
   image is converted into a matrix of numbers representing the colours in
   each of the pixels. from there, the data passes through various layers
   in the pipeline and through each layer the shape of the matrix is
   transformed until it eventually reaches a softmax classifier in the
   bottom right hand corner. this is a vector of 9 numbers and contains
   the probabilities for each of the 9 music genres the id98 assigns to the
   image.

   one step in from that is the fully connected layer. this is a vector of
   128 numbers and these are essentially 128 music features that have been
   extracted from the image after passing through the various layers.
   another way of thinking about this layer is that all the key
   information in the original image has been compacted into 128 numbers
   that    explain    the image.

so how well did the id98 do?

   it was capable of classifying the music genre of a song with 75%
   accuracy, which i felt was pretty good. music genres are somewhat
   subjective and music often transcends more than one genre, so i felt
   happy that it was doing a good job. here   s a breakdown of the
   classification accuracies:
     * trance: 91%
     * drum & bass: 90%
     * dancehall: 79%
     * breakbeat: 78%
     * funky house: 71%
     * downtempo: 71%
     * rock/indie: 70%
     * minimal house: 63%
     * hip hop / r&b: 61%

   it did a really good job classifying trance music while at the other
   end of the scale was hip hop / r&b with 61%, which is still almost 6
   times better than randomly assigning a genre to the image. i suspect
   that there   s some crossover between hip hop, breakbeat and dancehall
   and that might have resulted in a lower classification accuracy. trance
   music is quite different to the other 8 genres in the list, so perhaps
   that   s also why it did so much better at identifying that type of
   music.

   nevertheless, these numbers weren   t too important to me; what was
   important was that it was capable of differentiating between different
   types of music.

what about the music recommender?

   now that i had a trained neural network capable of    seeing    music in
   spectrograms, i no longer needed the softmax classifier, so i removed
   that layer and extracted the 128 music feature vectors for all 185,000
   images in my data set.

   with each image representing just over 5 seconds of audio, and the
   sample mp3 files being around 2 minutes long in total, i had
   approximately 23 images     and therefore 23 feature vectors     for each
   music file. i calculated the mean (average) vector for each song,
   giving me 9,000 feature vectors; one for each of the 9,000 songs i had
   originally downloaded.

   so just as a quick recap     i started with 9,000 audio files, converted
   them into 9,000 spectrograms, split them up into 185,000 smaller
   spectrograms and trained a convolutional neural network on these
   images. i then extracted 185,000 feature vectors for all these images
   and calculated the average vector for each of the 9,000 original audio
   files.

   at this point i had now extracted 128 features from the music files
   that identified different characteristics in the music. so in order to
   create recommendations of songs that shared similar characteristics,
   all i needed to find were the vectors that were most similar to one
   another. to do that, i calculated the cosine similarity between all
   9,000 vectors.

example recommendations

   the last step was to select a song at random, and then have the model
   return the best recommendations of similar music (the songs with the
   greatest cosine similarities) out of the entire data set of 9,000 mp3s
   i had downloaded.

   below are a few examples of the recommender in action. the first song
   that plays is the one that i picked at random, and the 3 that follow
   are the 3 best recommendations of songs it returned. i think it   s
   pretty awesome, but see what you think for yourself:

   iframe: [13]https://www.youtube.com/embed/h1cn4uzxzzw

   iframe: [14]https://www.youtube.com/embed/cphpr_u62zm

   iframe: [15]https://www.youtube.com/embed/cizxw9vvora

   iframe: [16]https://www.youtube.com/embed/vduou4bmdz8

   iframe: [17]https://www.youtube.com/embed/7m5_tkoogbg

   iframe: [18]https://www.youtube.com/embed/pnk8px8f9a4

   i think the coolest thing about it is that this is entirely
   unsupervised. imagine how long it would take if you had to
   actually listen to each one of these 9,000 songs and take notes
   evaluating them against different features and characteristics. now
   imagine doing it for one million songs or more.

   the folks at [19]pandora are the only people i know of that have
   attempted this as part of their ongoing    music genome project   .
   according to [20]this article, they have 25 music analysts listening to
   and grading 10,000 songs a month (for some context, this entire project
   from start to finish took me three weeks) on up to 450 different
   musical features.

   that is why i   m really pleased with the results from my recommender; it
   does a pretty good job of finding songs that sound alike without
   requiring anybody to have to listen to the audio beforehand     and in a
   fraction of the time it would take a human to do the same.

code

   [21]scrapy crawler to collect data on the back catalog of songs listed
   for sale.
   [22]https://github.com/mattmurray/juno_crawler
   [23]49 forks.
   [24]141 stars.
   [25]0 open issues.
   recent commits:
     * [26]fixed track_urls extraction after change to tag, github
     * [27]updated readme with info, github
     * [28]removed scrapinghub files, matthew murray
     * [29]scrapy crawler, matthew murray
     * [30]first commit, matthew murray

   [31]music recommender using deep learning with keras and tensorflow
   [32]https://github.com/mattmurray/music_recommender
   [33]112 forks.
   [34]448 stars.
   [35]2 open issues.
   recent commits:
     * [36]upload files, matthew murray
     * [37]first commit, matthew murray

   [38]previous post
   [39]next post

comments

     *

myautsai
       august 2, 2017 at 9:49 am
       awesome post. for more content-based futures, you can use the
       dataset on acousticbrainz.
       example:
       [40]http://acousticbrainz.org/e580b500-56bf-4be7-b6ec-9ea7dd30daf9/
       low-level/view?n=0

     *

matt
       august 5, 2017 at 11:26 am
       thanks for sharing this link with me     looks cool! also, i think i
       have you to thank for this blog post ending up at the top of hacker
       news     

     *

new top story on hacker news: building a music recommender with deep learning
    the internet yard
       august 2, 2017 at 10:43 am
       [   ] building a music recommender with deep learning 7 by myautsai |
       1 comments on hacker news. [   ]

     *

mike armstrong
       august 2, 2017 at 11:01 am
       really good work!
       please could you upload a graphical representation of the network
       you trained?

     *

hayden
       august 2, 2017 at 11:40 am
       would be great to see some of the examples that    fail   . and are the
       relationships reversed too? eg (1st video) is infectious the top
       recommendation for spectral radar too?

     *

robert agthe
       august 2, 2017 at 2:34 pm
       soundcloud better be quick      great stuff, this is was i really want
       on a music service. giving me stuff i like.

     *

kyle flanigan
       august 2, 2017 at 4:02 pm
       a much better solution would be to create a id98 autoencoder and
       take the middle layer for the feature vectors. then you don   t need
       any training data at all and you can scale it to n feature points
       which will greatly improve your accuracy. if you then changed from
       256  256 id98 slices to using small slices fed to a biderectional
       lstm layer, you would likely have state of the art.
       (i was doing some very similar work using id98   s for audio
       processing)

     *

matt
       august 5, 2017 at 11:04 am
       thanks for the suggestions kyle, i will look into it     

     *

renier botha
       august 3, 2017 at 7:13 am
       hey, great work and good read.
       would you be willing to write something similar, albeit a bit
       shorter, on exactly how you went about writing the scraper for data
       acquisition? i feel many people (including me) fall short in their
       real world deep learning projects at the data acquisition stage, so
       this would be really helpful.
       thanks!

     *

matt
       august 5, 2017 at 11:06 am
       hi renier. in fact, i was intending on writing a few blog posts on
       web scraping because there are a number of different scraping
       methods for collecting data. scrapy is probably the most difficult
       to use, but at the same time very powerful. i   m also looking into
       the possibility of uploading my data set of spectrograms so that
       people can use them for their own projects.

     *

gregg tavares
       august 3, 2017 at 9:04 am
       i feel like the human classifications are a net negative. certain
       generes are all over the place in term of how they get categorized.
       in particular if a certain artist is labeled say hiphop, after that
       point all of their music is labeled hiphop even if some of their
       songs are dance music and others are ballads and yet others are
       rap.
       it seems like the algorithm would do best with no influence from
       bad human categories
       in other words , let the system make its own bins of similar music
       then see what it came up with.

     *

matt
       august 5, 2017 at 11:15 am
       sure, the genre labels were created by a human and that   s a
       subjective thing (in reality, songs also tend to fit into more than
       one genre category) which will have introduced a bit of bias into
       the process, but i used them simply to    teach    the neural network
       to recognise different types of music from the images. by training
       it on 1,000 songs from each genre, i hoped that the most important
       aspects of the images that defined each genre would be picked out
       by the model.

     *

sarnath k
       august 4, 2017 at 3:02 am
       smart matt! impressive and creative. using image processing and
       recognition for music!!! thats what a data scientist is all about.
       fantastic!

     *

sarnath k
       august 4, 2017 at 3:04 am
       did time stop at july 10, 2017 at 2:49 pm!?

     *

matt
       august 5, 2017 at 11:03 am
       haha, that   s now fixed      it was a bug with the theme and was
       showing the date i published my post.

     *

colin
       august 4, 2017 at 4:37 pm
       love the result; i do however feel that the approach of looking for
       similar music might not be the way to go for a recommendation
       engine. if you listen to your drum & bass results for instance;
       buying the recommendations would give me multiple identical
       sounding songs..
       perhaps if you combine these results with buyers / listening
       behavorial data the results would be even better?
       what i could imagine is that your system would be brilliant in
       detecting plagiarism. don   t know whether such systems already exist
       automated. but i could imagine that music labels would be
       interested in such a service.

     *

matt
       august 5, 2017 at 11:23 am
       yep, they do sound very similar to one another, and maybe for a
       general radio station it would benefit from using additional data
       to improve the recommendations like you say. but in the context of
       a dj looking for music to buy, it   s actually quite nice to have a
       few songs that are similar to each other, because you can mix up
       your playlists and swap out different tracks that fit just as well,
       if that makes sense.

     *

renier botha
       august 4, 2017 at 8:48 pm
       thanks for updating with the scrapy code     

     *

hannraoi
       august 8, 2017 at 2:16 am
       i have a question, will one song be contained in different genres
       in your dataset ? thank u for ur great post and work btw     

     *

matt
       august 8, 2017 at 8:23 am
       hi, no in this data set each song had only one genre.

     *

roman
       august 15, 2017 at 1:23 am
       i would expect the encoding nn to be more intuitive, as encoding nn
       completely removes the bias essential to songs grading.
       and the question to still remain     how to proof such
       recommendations.

     *

matt
       august 23, 2017 at 11:15 pm
       possibly, yes     but the motivation for my project was to adapt
       somebody else   s methodology with a id98 and see if it would work.

     *

dennisshaw
       august 23, 2017 at 3:05 am
       may i ask a question?i am new to this area.i wonder how i convert
       the audio signals into the frequency domain.would you give me some
       help to this?thanks

     *

matt
       august 23, 2017 at 11:18 pm
       generating spectrograms is quite easy. i used (and my code on
       github will work with) [41]sox. try installing it and let me know
       if you need some further assistance.

     *

dennisshaw
       august 29, 2017 at 8:18 am
       i am back again.i am wondering if there is any public music dataset
       for this project to train,i want to find out some datasets which i
       can trust to train it.

     *

matt
       august 29, 2017 at 4:40 pm
       i   m not sure. you could always train a model on your own labelled
       music library.

     *

river
       september 2, 2017 at 1:54 pm
       w     that was odd. i just wrote an extremely
       long comment but after i clicked su  mit my comment didn   t appear.
       grrrr    well i   m not wr  ting all that over again. anyways, ju  t
       wanted to say
       excell  nt blog!

     *

pat stroh
       october 13, 2017 at 7:21 pm
       neat-o. a classification and id126 that is    75%
       accurate    might be good, because it introduces variety and
          testing.   

     *

dennisshaw
       october 16, 2017 at 3:14 am
       would you mind telling me the sequence of your code on github ? i
       am confused about how to get start   which file run at the beginning
       and which one run after the first file.thanks^_^

     *

cin
       november 23, 2017 at 3:50 pm
       learning ai will be awesome to music.
       imagine:
       start by generating a 100% random audio file, someone give a score
       between 1 and 100 (will be the fitness). after some amount of time,
       it start to generate song based at your taste.
       or
       have an online station that use ai to discover what to play fitness
       is amount of users listening the radio when the previous song
       started divided by the amount of same users that are still
       listening to the song when this song end.

[42]cancel reply

   your e-mail address will not be published. required fields are marked *

   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________
   ____________________
   ____________________

   post comment

recent posts

     * [43]topic modelling financial news with natural language processing
     * [44]classifying san francisco crime incidents
     * [45]unlocking the power of geospatial data with geopandas
     * [46]building a music recommender with deep learning
     * [47]predicting premier league points

categories

     * [48]data analysis
     * [49]data science

tags

   [50]adaboost [51]id112 [52]dashboards [53]data analysis [54]data
   science [55]dbscan [56]deep learning [57]extra trees [58]finance
   [59]gradient boosted trees [60]id116 [61]keras [62]knn [63]lda
   [64]id75 [65]id28 [66]lsa [67]matplotlib
   [68]nlp [69]python [70]id79 [71]seaborn [72]sport
   [73]tensorflow

     *
     *
     *

references

   visible links
   1. http://mattmurray.net/feed/
   2. http://mattmurray.net/comments/feed/
   3. http://mattmurray.net/building-a-music-recommender-with-deep-learning/feed/
   4. http://mattmurray.net/predicting-premier-league-points/
   5. http://mattmurray.net/unlocking-the-power-of-geospatial-data-with-geopandas/
   6. http://mattmurray.net/wp-json/oembed/1.0/embed?url=http://mattmurray.net/building-a-music-recommender-with-deep-learning/
   7. http://mattmurray.net/wp-json/oembed/1.0/embed?url=http://mattmurray.net/building-a-music-recommender-with-deep-learning/&format=xml
   8. http://mattmurray.net/
   9. http://mattmurray.net/
  10. http://mattmurray.net/contact/
  11. http://www.junodownload.com/
  12. https://chatbotslife.com/finding-the-genre-of-a-song-with-deep-learning-da8f59a61194
  13. https://www.youtube.com/embed/h1cn4uzxzzw
  14. https://www.youtube.com/embed/cphpr_u62zm
  15. https://www.youtube.com/embed/cizxw9vvora
  16. https://www.youtube.com/embed/vduou4bmdz8
  17. https://www.youtube.com/embed/7m5_tkoogbg
  18. https://www.youtube.com/embed/pnk8px8f9a4
  19. https://www.pandora.com/
  20. http://boingboing.net/2014/05/24/pandoras-music-genome-proj.html
  21. https://github.com/mattmurray/juno_crawler
  22. https://github.com/mattmurray/juno_crawler
  23. https://github.com/mattmurray/juno_crawler/network
  24. https://github.com/mattmurray/juno_crawler/stargazers
  25. https://github.com/mattmurray/juno_crawler/issues
  26. https://github.com/mattmurray/juno_crawler/commit/108b041c2d0154ff0fe76111d85b9ae80d9e257a
  27. https://github.com/mattmurray/juno_crawler/commit/4f29fa5a44c25a405fbe4e987b508402f32f1d22
  28. https://github.com/mattmurray/juno_crawler/commit/b5f53e941ca8005462b91e5508858618bba263d0
  29. https://github.com/mattmurray/juno_crawler/commit/a3d3bfb83d42cc6e6122a54726f9448abc17f92c
  30. https://github.com/mattmurray/juno_crawler/commit/7bb2d0856ab51257bdbd33b13fde5a677d838260
  31. https://github.com/mattmurray/music_recommender
  32. https://github.com/mattmurray/music_recommender
  33. https://github.com/mattmurray/music_recommender/network
  34. https://github.com/mattmurray/music_recommender/stargazers
  35. https://github.com/mattmurray/music_recommender/issues
  36. https://github.com/mattmurray/music_recommender/commit/ec183278fbc814fc793aa565da816f1c38a28146
  37. https://github.com/mattmurray/music_recommender/commit/357e38bbc0a895f52540a3543b2477857c34e01e
  38. http://mattmurray.net/predicting-premier-league-points/
  39. http://mattmurray.net/classifying-san-francisco-crime-incidents/
  40. http://acousticbrainz.org/e580b500-56bf-4be7-b6ec-9ea7dd30daf9/low-level/view?n=0
  41. http://sox.sourceforge.net/
  42. http://mattmurray.net/building-a-music-recommender-with-deep-learning/#respond
  43. http://mattmurray.net/topic-modelling-financial-news-with-natural-language-processing/
  44. http://mattmurray.net/classifying-san-francisco-crime-incidents/
  45. http://mattmurray.net/unlocking-the-power-of-geospatial-data-with-geopandas/
  46. http://mattmurray.net/building-a-music-recommender-with-deep-learning/
  47. http://mattmurray.net/predicting-premier-league-points/
  48. http://mattmurray.net/category/data-analysis/
  49. http://mattmurray.net/category/data-science/
  50. http://mattmurray.net/tag/adaboost/
  51. http://mattmurray.net/tag/id112/
  52. http://mattmurray.net/tag/dashboards/
  53. http://mattmurray.net/tag/data-analysis/
  54. http://mattmurray.net/tag/data-science/
  55. http://mattmurray.net/tag/dbscan/
  56. http://mattmurray.net/tag/deep-learning/
  57. http://mattmurray.net/tag/extra-trees/
  58. http://mattmurray.net/tag/finance/
  59. http://mattmurray.net/tag/gradient-boosted-trees/
  60. http://mattmurray.net/tag/id116/
  61. http://mattmurray.net/tag/keras/
  62. http://mattmurray.net/tag/knn/
  63. http://mattmurray.net/tag/lda/
  64. http://mattmurray.net/tag/linear-regression/
  65. http://mattmurray.net/tag/logistic-regression/
  66. http://mattmurray.net/tag/lsa/
  67. http://mattmurray.net/tag/matplotlib/
  68. http://mattmurray.net/tag/nlp/
  69. http://mattmurray.net/tag/python/
  70. http://mattmurray.net/tag/random-forest/
  71. http://mattmurray.net/tag/seaborn/
  72. http://mattmurray.net/tag/sport/
  73. http://mattmurray.net/tag/tensorflow/

   hidden links:
  75. http://mattmurray.net/building-a-music-recommender-with-deep-learning/
  76. https://twitter.com/mattmurrayuk
  77. https://uk.linkedin.com/in/mattsrm
  78. https://github.com/mattmurray
  79. https://twitter.com/mattmurrayuk
  80. https://uk.linkedin.com/in/mattsrm
  81. https://github.com/mattmurray
