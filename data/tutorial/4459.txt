agenda

    deep learning on regular structures

    multi-view representation
    volumetric representation

    intrinsic deep learning on manifolds

    id106
    spatial methods
    embedding-based methods

    deep learning on point cloud and parametric models

extrinsic vs intrinsic id98s

intrinsic

riemanniangeometryinoneminute   manifoldx=topologicalspace   noglobaleuclideanstructure   tangentplanetxx=localeuclideanrepresentationofmanifoldxaroundx   riemannianmetrich  ,  itxx:txx   txx!rdependingsmoothlyonx   geodesic=shortestpathonxbetweenxandx0xtxxxriemanniangeometryinoneminute   manifoldx=topologicalspace   noglobaleuclideanstructure   tangentplanetxx=localeuclideanrepresentationofmanifoldxaroundx   riemannianmetrich  ,  itxx:txx   txx!rdependingsmoothlyonx   geodesic=shortestpathonxbetweenxandx0xtxxx0tx0xriemanniangeometryinoneminute   manifoldx=topologicalspace   noglobaleuclideanstructure   tangentplanetxx=localeuclideanrepresentationofmanifoldxaroundx   riemannianmetrich  ,  itxx:txx   txx!rdependingsmoothlyonxisometry=metric-preservingshapedeformation   geodesic=shortestpathonxbetweenxandx0xtxxx0tx0xriemanniangeometryinoneminute   manifoldx=topologicalspace   noglobaleuclideanstructure   tangentplanetxx=localeuclideanrepresentationofmanifoldxaroundx   riemannianmetrich  ,  itxx:txx   txx!rdependingsmoothlyonxisometry=metric-preservingshapedeformationintrinsic=expressedsolelyintermsoftheriemannianmetric   geodesic=shortestpathonxbetweenxandx0xtxxx0tx0xriemanniangeometryinoneminute   manifoldx=topologicalspace   noglobaleuclideanstructure   tangentplanetxx=localeuclideanrepresentationofmanifoldxaroundx   riemannianmetrich  ,  itxx:txx   txx!rdependingsmoothlyonxisometry=metric-preservingshapedeformationintrinsic=expressedsolelyintermsoftheriemannianmetric   geodesic=shortestpathonxbetweenxandx0xx0 (x,x0)calculusonmanifolds:scalar   eldsscalar   eldf:x!rhilbertspacel2(x)withinnerproducthf,gil2(x)=zxf(x)g(x)dxwheredx=areaelementinducedbytheriemannianmetricfcalculusonmanifolds:scalar   eldsscalar   eldf:x!rhilbertspacel2(x)withinnerproducthf,gil2(x)=zxf(x)g(x)dxwheredx=areaelementinducedbytheriemannianmetricfcalculusonmanifolds:laplacianoperatorlaplacian :l2(x)!l2(x) f= div(rf)   di   erencebetweenf(x)andaveragevalueoffaroundx   xf   intrinsic(expressedsolelyintermsoftheriemannianmetric)   isometry-invariant   self-adjointh f,gil2(x)=hf, gil2(x)   positivesemide   nitecalculusonmanifolds:laplacianoperatorlaplacian :l2(x)!l2(x) f= div(rf)   di   erencebetweenf(x)andaveragevalueoffaroundx   xf   intrinsic(expressedsolelyintermsoftheriemannianmetric)   isometry-invariant   self-adjointh f,gil2(x)=hf, gil2(x)   positivesemide   nitecalculusonmanifolds:laplacianoperatorlaplacian :l2(x)!l2(x) f= div(rf)   di   erencebetweenf(x)andaveragevalueoffaroundx   xf   intrinsic(expressedsolelyintermsoftheriemannianmetric)   isometry-invariant   self-adjointh f,gil2(x)=hf, gil2(x)   positivesemide   nitecalculusonmanifolds:laplacianoperatorlaplacian :l2(x)!l2(x) f= div(rf)   di   erencebetweenf(x)andaveragevalueoffaroundx   xf   intrinsic(expressedsolelyintermsoftheriemannianmetric)   isometry-invariant   self-adjointh f,gil2(x)=hf, gil2(x)   positivesemide   nitecalculusonmanifolds:laplacianoperatorlaplacian :l2(x)!l2(x) f= div(rf)   di   erencebetweenf(x)andaveragevalueoffaroundx   xf   intrinsic(expressedsolelyintermsoftheriemannianmetric)   isometry-invariant   self-adjointh f,gil2(x)=hf, gil2(x))orthogonaleigenfunctions   positivesemide   nitecalculusonmanifolds:laplacianoperatorlaplacian :l2(x)!l2(x) f= div(rf)   di   erencebetweenf(x)andaveragevalueoffaroundx   xf   intrinsic(expressedsolelyintermsoftheriemannianmetric)   isometry-invariant   self-adjointh f,gil2(x)=hf, gil2(x))orthogonaleigenfunctions   positivesemide   nitecalculusonmanifolds:laplacianoperatorlaplacian :l2(x)!l2(x) f= div(rf)   di   erencebetweenf(x)andaveragevalueoffaroundx   xf   intrinsic(expressedsolelyintermsoftheriemannianmetric)   isometry-invariant   self-adjointh f,gil2(x)=hf, gil2(x))orthogonaleigenfunctions   positivesemide   nite)non-negativeeigenvaluesdiscretelaplacianjiwijji   ij ijaiundirectedgraph(v,e)( f)i   x(i,j)2ewij(fi fj)triangularmesh(v,e,f)( f)i   1aix(i,j)2ecot   ij+cot ij2(fi fj)ai=localareaelementinmatrix-vectornotation f=a 1(d w)fwheref=(f1,...,fn)>,wisthesti   nessmatrix,a=diag(a1,...,an)isthemassmatrix,andd=diag(pj6=1w1j,...,pj6=nwnj)tutte1963;macneal1949;du n1959;pinkall,polthier1993discretelaplacianjiwijji   ij ijaiundirectedgraph(v,e)( f)i   x(i,j)2ewij(fi fj)triangularmesh(v,e,f)( f)i   1aix(i,j)2ecot   ij+cot ij2(fi fj)ai=localareaelementinmatrix-vectornotation f=a 1(d w)fwheref=(f1,...,fn)>,wisthesti   nessmatrix,a=diag(a1,...,an)isthemassmatrix,andd=diag(pj6=1w1j,...,pj6=nwnj)tutte1963;macneal1949;du n1959;pinkall,polthier1993laplacian eigenfunctions and eigenvalues

laplacian   of a compact manifold x has countably many eigenfunctions

  i(x) =  i i(x),

i = 1, 2, . . .

laplacian eigenfunctions and eigenvalues

laplacian   of a compact manifold x has countably many eigenfunctions

  i(x) =  i i(x),

i = 1, 2, . . .

    eigenfunctions are real and orthonormal h i,  jil2(x ) =  ij

laplacian eigenfunctions and eigenvalues

laplacian   of a compact manifold x has countably many eigenfunctions

  i(x) =  i i(x),

i = 1, 2, . . .

    eigenfunctions are real and orthonormal h i,  jil2(x ) =  ij
    eigenvalues are non-negative 0 =  1      2     . . .

laplacian eigenfunctions and eigenvalues

laplacian   of a compact manifold x has countably many eigenfunctions

  i(x) =  i i(x),

i = 1, 2, . . .

    eigenfunctions are real and orthonormal h i,  jil2(x ) =  ij
    eigenvalues are non-negative 0 =  1      2     . . .

eigendecomposition of a discrete laplacian matrix  

   =     

where     = diag( 1, . . . ,  n) is a diagonal matrix of eigenvalues and
  = ( 1, . . . ,  n) is a matrix of eigenvectors

laplacian eigenfunctions and eigenvalues

laplacian   of a compact manifold x has countably many eigenfunctions

  i(x) =  i i(x),

i = 1, 2, . . .

    eigenfunctions are real and orthonormal h i,  jil2(x ) =  ij
    eigenvalues are non-negative 0 =  1      2     . . .

eigendecomposition of a discrete laplacian matrix  

a 1(d   w)  =     

where     = diag( 1, . . . ,  n) is a diagonal matrix of eigenvalues and
  = ( 1, . . . ,  n) is a matrix of eigenvectors

laplacian eigenfunctions and eigenvalues

laplacian   of a compact manifold x has countably many eigenfunctions

  i(x) =  i i(x),

i = 1, 2, . . .

    eigenfunctions are real and orthonormal h i,  jil2(x ) =  ij
    eigenvalues are non-negative 0 =  1      2     . . .

eigendecomposition of a discrete laplacian matrix  

(d   w)  = a    

where     = diag( 1, . . . ,  n) is a diagonal matrix of eigenvalues and
  = ( 1, . . . ,  n) is an a-orthonormal matrix of eigenvectors
( >a  = i)

laplacian eigenfunctions and eigenvalues

laplacian   of a compact manifold x has countably many eigenfunctions

  i(x) =  i i(x),

i = 1, 2, . . .

    eigenfunctions are real and orthonormal h i,  jil2(x ) =  ij
    eigenvalues are non-negative 0 =  1      2     . . .

eigendecomposition of a discrete laplacian matrix  

a 1/2(d   w)a 1/2a1/2  = a1/2    

where     = diag( 1, . . . ,  n) is a diagonal matrix of eigenvalues and
  = ( 1, . . . ,  n) is an a-orthonormal matrix of eigenvectors
( >a  = i)

laplacian eigenfunctions and eigenvalues

laplacian   of a compact manifold x has countably many eigenfunctions

  i(x) =  i i(x),

i = 1, 2, . . .

    eigenfunctions are real and orthonormal h i,  jil2(x ) =  ij
    eigenvalues are non-negative 0 =  1      2     . . .

eigendecomposition of a discrete laplacian matrix  
a 1/2(d   w)a 1/2  =     

where     = diag( 1, . . . ,  n) is a diagonal matrix of eigenvalues and
  = ( 1, . . . ,  n) is an orthonormal matrix of eigenvectors ( >  = i)

laplacian eigenfunctions and eigenvalues

laplacian   of a compact manifold x has countably many eigenfunctions

  i(x) =  i i(x),

i = 1, 2, . . .

    eigenfunctions are real and orthonormal h i,  jil2(x ) =  ij
    eigenvalues are non-negative 0 =  1      2     . . .

eigendecomposition of a discrete laplacian matrix  
a 1/2(d   w)a 1/2  =     

where     = diag( 1, . . . ,  n) is a diagonal matrix of eigenvalues and
  = ( 1, . . . ,  n) is an orthonormal matrix of eigenvectors ( >  = i)

laplacian eigenvectors = smoothest orthonormal basis

laplacian eigenfunctions: euclidean

+1

0

 1

    
first eigenfunctions of 1d euclidean laplacian = standard fourier basis

0

+   

laplacian eigenfunctions: non-euclidean

max

0

min

 1

 2

 3

 4

first eigenfunctions of a manifold laplacian

fourier analysis: euclidean

a function f : [    ,     ] ! r can be written as fourier series

f (x) =xk 0

1

2   z    

    

f (x0)e ikx0dx0

eikx

=

  f0

+

  f1

+

  f2

+ . . .

fourier analysis: euclidean

a function f : [    ,     ] ! r can be written as fourier series

f (x) =xk 0

f (x0)e ikx0dx0

eikx

1

2   z    
|

    

{z

  fk=hf,eikxil2([    ,    ])

}

=

  f0

+

  f1

+

  f2

+ . . .

fourier analysis: euclidean

a function f : [    ,     ] ! r can be written as fourier series

f (x) =xk 0

f (x0)e ikx0dx0

eikx

1

2   z    
|

    

{z

  fk=hf,eikxil2([    ,    ])

}

=

  f0

+

  f1

+

  f2

+ . . .

fourier basis = laplacian eigenfunctions:   d2

dx2 eikx = k2eikx

fourier analysis: non-euclidean

a function f : x! r can be written as fourier series

f (x) =xk 1zx
|

f (x0) k(x0)dx0

 k(x)

  fk=hf, kil2(x )

{z

}

=

  f1

+

  f2

+

  f3

+ . . .

f 

1

 2

 3

fourier basis = laplacian eigenfunctions:   k(x) =  k k(x)

physical application: heat equation

ft =  c f

newton   s law of cooling: rate of change of the temperature of an object
is proportional to the di   erence between its own temperature and the
temperature of the surrounding

c [m2/sec] = thermal di   usivity constant

newton 1701

heat di   usion on manifolds

( ft(x, t) =   f (x, t)

f (x, 0) = f0(x)

    f (x, t) = amount of heat at point x at time t
    f0(x) = initial heat distribution

heat di   usion on manifolds

( ft(x, t) =   f (x, t)

f (x, 0) = f0(x)

    f (x, t) = amount of heat at point x at time t
    f0(x) = initial heat distribution

solution of the heat equation expressed through the heat operator

f (x, t) = e t f0(x)

heat di   usion on manifolds

( ft(x, t) =   f (x, t)

f (x, 0) = f0(x)

    f (x, t) = amount of heat at point x at time t
    f0(x) = initial heat distribution

solution of the heat equation expressed through the heat operator
hf0,  kil2(x )e t k  k(x)

f (x, t) = e t f0(x) =xk 1

heat di   usion on manifolds

( ft(x, t) =   f (x, t)

f (x, 0) = f0(x)

    f (x, t) = amount of heat at point x at time t
    f0(x) = initial heat distribution

solution of the heat equation expressed through the heat operator
hf0,  kil2(x )e t k  k(x)

f (x, t) = e t f0(x) =xk 1
f0(x0)xk 1

= zx

e t k  k(x) k(x0)

dx0

heat di   usion on manifolds

( ft(x, t) =   f (x, t)

f (x, 0) = f0(x)

    f (x, t) = amount of heat at point x at time t
    f0(x) = initial heat distribution

solution of the heat equation expressed through the heat operator
hf0,  kil2(x )e t k  k(x)

f (x, t) = e t f0(x) =xk 1
f0(x0)xk 1
|

= zx

e t k  k(x) k(x0)

dx0

heat kernel ht(x,x0)

{z

}

heat kernels

heat kernels

heat kernels

heat kernels

interpretation of the heat kernel

solution of the heat equation on a manifold x expressed in the laplacian
eigenbasis   k(x) =  k k(x)

f (x, t) = zx

f0(x0)xk 1
|

e t k  k(x) k(x0)

dx0

heat kernel ht(x,x0)

{z

}

interpretation of the heat kernel

dx2 eikx = k2eikx

solution of the heat equation on a euclidean space [    ,     ] expressed in
the laplacian eigenbasis   d2
2   z    

eikxe ikx0

f (x, t) =

e tk2

dx0

    

1

f0(x0)xk 0
|

heat kernel ht(x,x0)

{z

}

interpretation of the heat kernel

dx2 eikx = k2eikx

solution of the heat equation on a euclidean space [    ,     ] expressed in
the laplacian eigenbasis   d2
2   z    

eik(x x0)

f (x, t) =

e tk2

dx0

    

1

f0(x0)xk 0
|

heat kernel ht(x x0)

{z

}

interpretation of the heat kernel

dx2 eikx = k2eikx

solution of the heat equation on a euclidean space [    ,     ] expressed in
the laplacian eigenbasis   d2
2   z    

eik(x x0)

f (x, t) =

e tk2

dx0

    

1

f0(x0)xk 0
|

heat kernel ht(x x0)

{z

}

= (f0 ?h t)(x)

heat kernel = impulse response

convolution: euclidean space

given two functions f, g : [    ,     ] ! r their convolution is a function

(f?g )(x) =z    

    

f (x0)g(x   x0)dx0

convolution: euclidean space

given two functions f, g : [    ,     ] ! r their convolution is a function

(f?g )(x) =z    

    

f (x0)g(x   x0)dx0

    shift-invariance: f (x   x0) ?g (x) = (f?g )(x   x0)

convolution: euclidean space

given two functions f, g : [    ,     ] ! r their convolution is a function

(f?g )(x) =z    

    

f (x0)g(x   x0)dx0

    shift-invariance: f (x   x0) ?g (x) = (f?g )(x   x0)
    convolution operator commutes with laplacian: ( f ) ?g = ( f?g )

convolution: euclidean space

given two functions f, g : [    ,     ] ! r their convolution is a function

(f?g )(x) =z    

    

f (x0)g(x   x0)dx0

    shift-invariance: f (x   x0) ?g (x) = (f?g )(x   x0)
    convolution operator commutes with laplacian: ( f ) ?g = ( f?g )
    convolution theorem: fourier transform diagonalizes the convolution

operator

convolution: euclidean space

given two functions f, g : [    ,     ] ! r their convolution is a function

(f?g )(x) =z    

    

f (x0)g(x   x0)dx0

    shift-invariance: f (x   x0) ?g (x) = (f?g )(x   x0)
    convolution operator commutes with laplacian: ( f ) ?g = ( f?g )
    convolution theorem: fourier transform diagonalizes the convolution
operator ) convolution can be computed in the fourier domain as

\(f?g ) =   f      g

convolution: euclidean space

given two functions f, g : [    ,     ] ! r their convolution is a function

(f?g )(x) =z    

    

f (x0)g(x   x0)dx0

    shift-invariance: f (x   x0) ?g (x) = (f?g )(x   x0)
    convolution operator commutes with laplacian: ( f ) ?g = ( f?g )
    convolution theorem: fourier transform diagonalizes the convolution
operator ) convolution can be computed in the fourier domain as

\(f?g ) =   f      g

    e cient computation using fft

convolution theorem

convolution of two vectors f = (f1, . . . , fn)> and g = (g1, . . . , gn)>

f ? g =

g1
gn
...
g3
g2

2666664

g2
g1
...
g4
g3

. . .
g2
. . .
. . .
. . .

. . .
. . .
. . .
g1
. . .

gn
gn 1
...
g2
g1

3777775

f1
...
fn

264

375

convolution theorem

convolution of two vectors f = (f1, . . . , fn)> and g = (g1, . . . , gn)>

g1
gn
...
g3
g2

g2
g1
...
g4
g3

f ? g =

2666664

|

. . .
g2
. . .
. . .
. . .

{z

circulant matrix

. . .
. . .
. . .
g1
. . .

gn
gn 1
...
g2
g1

f1
...
fn

264

375

3777775

}

convolution theorem

convolution of two vectors f = (f1, . . . , fn)> and g = (g1, . . . , gn)>

g1
gn
...
g3
g2

g2
g1
...
g4
g3

f ? g =

2666664

|

. . .
g2
. . .
. . .
. . .

{z

. . .
. . .
. . .
g1
. . .

gn
gn 1
...
g2
g1

diagonalized by fourier basis

f1
...
fn

264

375

3777775

}

convolution theorem

convolution of two vectors f = (f1, . . . , fn)> and g = (g1, . . . , gn)>

f ? g =

g1
gn
...
g3
g2

2666664
=  264

g2
g1
...
g4
g3

. . .
g2
. . .
. . .
. . .

. . .
. . .
. . .
g1
. . .

gn
gn 1
...
g2
g1

3777775

f1
...
fn

264

375

  g1

. . .

375  >f

  gn

convolution theorem

convolution of two vectors f = (f1, . . . , fn)> and g = (g1, . . . , gn)>

f ? g =

g1
gn
...
g3
g2

2666664
=  264

g2
g1
...
g4
g3

. . .
g2
. . .
. . .
. . .

. . .
. . .
. . .
g1
. . .

gn
gn 1
...
g2
g1

3777775

f1
...
fn

264

375

  g1

. . .

375

264

  f1
...
  fn

375

  gn

convolution theorem

convolution of two vectors f = (f1, . . . , fn)> and g = (g1, . . . , gn)>

f ? g =

g1
gn
...
g3
g2

2666664
=  264

g2
g1
...
g4
g3

  f1      g1

...

  fn      gn

. . .
. . .
. . .
g1
. . .

gn
gn 1
...
g2
g1

3777775

f1
...
fn

264

375

. . .
g2
. . .
. . .
. . .

375

spectral convolution

spectral convolution of f, g 2 l2(x ) can be de   ned by analogy

f?g

= xk 1

hf,  kil2(x )hg,  kil2(x )

 k

spectral convolution

spectral convolution of f, g 2 l2(x ) can be de   ned by analogy

f?g

= xk 1

|

hf,  kil2(x )hg,  kil2(x )

 k

product in the fourier domain

{z

}

spectral convolution

spectral convolution of f, g 2 l2(x ) can be de   ned by analogy

f?g

= xk 1
|

|

hf,  kil2(x )hg,  kil2(x )

product in the fourier domain

inverse fourier transform

{z
{z

}

 k

}

spectral convolution

spectral convolution of f, g 2 l2(x ) can be de   ned by analogy

f?g

= xk 1

hf,  kil2(x )hg,  kil2(x )

 k

in matrix-vector notation

f ? g =   ( >g)   ( >f )

spectral convolution

spectral convolution of f, g 2 l2(x ) can be de   ned by analogy

f?g

= xk 1

hf,  kil2(x )hg,  kil2(x )

 k

in matrix-vector notation

f ? g =   diag(  g1, . . . ,   gn) >

f

spectral convolution

spectral convolution of f, g 2 l2(x ) can be de   ned by analogy

f?g

= xk 1

hf,  kil2(x )hg,  kil2(x )

 k

in matrix-vector notation

f ? g =   diag(  g1, . . . ,   gn) >

f

|

g

{z

}

spectral convolution

spectral convolution of f, g 2 l2(x ) can be de   ned by analogy

f?g

= xk 1

hf,  kil2(x )hg,  kil2(x )

 k

in matrix-vector notation

f ? g =   diag(  g1, . . . ,   gn) >

f

|

g

{z

}

    not shift-invariant! (g has no circulant structure)

spectral convolution

spectral convolution of f, g 2 l2(x ) can be de   ned by analogy

f?g

= xk 1

hf,  kil2(x )hg,  kil2(x )

 k

in matrix-vector notation

f ? g =   diag(  g1, . . . ,   gn) >

f

|

g

{z

}

    not shift-invariant! (g has no circulant structure)
    filter coe cients depend on basis  1, . . . ,  n

di   erent formulations of non-euclidean id98s

spectral domain

spatial domain

embedding domain

spectral id98

convolutional layer expressed in the spectral domain

gl =      pxl0=1

    wl,l0 >fl0! l = 1, . . . , q
where   wl,l = n     n diagonal matrix of    lter coe cients

l0 = 1, . . . , p

bruna et al. 2014

spectral id98

convolutional layer expressed in the spectral domain

gl =      pxl0=1

    wl,l0 >fl0! l = 1, . . . , q
where   wl,l = n     n diagonal matrix of    lter coe cients

l0 = 1, . . . , p

o(n) parameters per layer

bruna et al. 2014

spectral id98

convolutional layer expressed in the spectral domain

gl =      pxl0=1

    wl,l0 >fl0! l = 1, . . . , q
where   wl,l = n     n diagonal matrix of    lter coe cients

l0 = 1, . . . , p

o(n) parameters per layer
o(n2) computation of
 >,   (no fft on manifolds or graphs)

forward and inverse fourier transforms

bruna et al. 2014

spectral id98

convolutional layer expressed in the spectral domain

gl =      pxl0=1

    wl,l0 >fl0! l = 1, . . . , q
where   wl,l = n     n diagonal matrix of    lter coe cients

l0 = 1, . . . , p

o(n) parameters per layer
o(n2) computation of
 >,   (no fft on manifolds or graphs)
no guarantee of spatial localization of    lters

forward and inverse fourier transforms

bruna et al. 2014

spectral id98

convolutional layer expressed in the spectral domain

gl =      pxl0=1

    wl,l0 >fl0! l = 1, . . . , q
where   wl,l = n     n diagonal matrix of    lter coe cients

l0 = 1, . . . , p

o(n) parameters per layer
o(n2) computation of
 >,   (no fft on manifolds or graphs)
no guarantee of spatial localization of    lters
filters are basis-dependent ) does not generalize across domains

forward and inverse fourier transforms

bruna et al. 2014

basis dependence

function f

basis dependence

   edge detecting    spectral    lter     w >f

basis dependence

same spectral    lter, di   erent basis     w >f

basis dependence

high-frequency laplacian eigenvector  50

localization and smoothness

in the euclidean setting (by parseval   s identity)

 1      
 1 |x|2k|f (x)|2dx =z +1
z +1

@k   f (!)

@!k

d!

2

     

bruna et al. 2014; hena   , bruna, lecun 2015

localization and smoothness

in the euclidean setting (by parseval   s identity)

 1      
 1 |x|2k|f (x)|2dx =z +1
z +1

@k   f (!)

@!k

2

d!

     

) localization in space = smoothness in frequency domain

bruna et al. 2014; hena   , bruna, lecun 2015

localization and smoothness

in the euclidean setting (by parseval   s identity)

 1      
 1 |x|2k|f (x)|2dx =z +1
z +1

@k   f (!)

@!k

2

d!

     

) localization in space = smoothness in frequency domain

parametrize the    lter using a smooth spectral transfer function     ( )

bruna et al. 2014; hena   , bruna, lecun 2015

localization and smoothness

in the euclidean setting (by parseval   s identity)

 1      
 1 |x|2k|f (x)|2dx =z +1
z +1

@k   f (!)

@!k

2

d!

     

) localization in space = smoothness in frequency domain

parametrize the    lter using a smooth spectral transfer function     ( )

application of the    lter

   ( )f =     (   ) >f

bruna et al. 2014; hena   , bruna, lecun 2015

localization and smoothness

in the euclidean setting (by parseval   s identity)

 1      
 1 |x|2k|f (x)|2dx =z +1
z +1

@k   f (!)

@!k

2

d!

     

) localization in space = smoothness in frequency domain

parametrize the    lter using a smooth spectral transfer function     ( )

application of the    lter

   ( )f =  0b@

   ( 1)

. . .

1ca  >f

   ( n)

bruna et al. 2014; hena   , bruna, lecun 2015

localization and smoothness

in the euclidean setting (by parseval   s identity)

 1      
 1 |x|2k|f (x)|2dx =z +1
z +1

@k   f (!)

@!k

2

d!

     

) localization in space = smoothness in frequency domain

parametrize the    lter using a smooth spectral transfer function     ( )

application of the parametric    lter with learnable parameters    

      ( )f =  0b@

      ( 1)

. . .

      ( n)

1ca  >f

bruna et al. 2014; hena   , bruna, lecun 2015

spectral id98 with polynomial    lters

represent spectral transfer function as a polynomial or order r

      ( ) =

   j j

rxj=0

where     = (   0, . . . ,    r)> is the vector of    lter parameters

de   errard, bresson, vandergheynst 2016

spectral id98 with polynomial    lters

represent spectral transfer function as a polynomial or order r

      ( ) =

   j j

rxj=0

where     = (   0, . . . ,    r)> is the vector of    lter parameters

o(1) parameters per layer

de   errard, bresson, vandergheynst 2016

spectral id98 with polynomial    lters

represent spectral transfer function as a polynomial or order r

      ( ) =

   j j

rxj=0

where     = (   0, . . . ,    r)> is the vector of    lter parameters

o(1) parameters per layer
filters have guaranteed r-hops support

de   errard, bresson, vandergheynst 2016

spectral id98 with polynomial    lters

represent spectral transfer function as a polynomial or order r

      ( ) =

   j j

rxj=0

where     = (   0, . . . ,    r)> is the vector of    lter parameters

o(1) parameters per layer
filters have guaranteed r-hops support
no explicit computation of  >,   )o (nr) complexity

de   errard, bresson, vandergheynst 2016

spectral id98 with polynomial    lters

represent spectral transfer function as a polynomial or order r

      ( ) =

   j j

rxj=0

where     = (   0, . . . ,    r)> is the vector of    lter parameters

o(1) parameters per layer
filters have guaranteed r-hops support
no explicit computation of  >,   )o (nr) complexity
does not generalize across domains

de   errard, bresson, vandergheynst 2016

laplacian eigenbases on non-isometric domains

 2

 3

 10

 15

 20

 2

 3

 10

 15

 20

functional maps

   

  f1

+   f2

+ . . . +   fk

 1

 2

 k

   

  g1

+   g2

+ . . . +   gk

 1

 2

 k

ovsjanikov et al. 2012; eynard et al. 2012; kovnatsky et al. 2013

y

f

x

g

functional maps

   

  f1

+   f2

+ . . . +   fk

y

f

 1
!t : l2(x ) ! l2(y)

 

 2

 k

   

  g1

+   g2

+ . . . +   gk

x

g

 1

 2

 k

ovsjanikov et al. 2012; eynard et al. 2012; kovnatsky et al. 2013

functional maps

   

  f1

+   f2

+ . . . +   fk

 1

 2

 k

   

  g1

+   g2

+ . . . +   gk

 1

 2

 k

ovsjanikov et al. 2012; eynard et al. 2012; kovnatsky et al. 2013

y

f

 
!t

x

g

functional maps

   

  f1

+   f2

+ . . . +   fk

 1

 2
 
!c

 k

   

  g1

+   g2

+ . . . +   gk

 1

 2

 k

ovsjanikov et al. 2012; eynard et al. 2012; kovnatsky et al. 2013

y

f

 
!t

x

g

functional maps

   

  f1

+   f2

+ . . . +   fk

 1

 2
 
!c

 k

   

  g1

+   g2

+ . . . +   gk

 1

 2

 k

ovsjanikov et al. 2012; eynard et al. 2012; kovnatsky et al. 2013

y

f

 
!t

x

g

basis synchronization with functional maps

   

  f1

+   f2

+ . . . +   fk

f
!t      c> >

 

 1

 2

 k

   

  g1

+   g2

+ . . . +   gk

g

 1

 2

 k

ovsjanikov et al. 2012; eynard et al. 2012; kovnatsky et al. 2013

basis synchronization with functional maps

   

  f1

+   f2

+ . . . +   fk

f
!t      ( c)>

 

 1

 2

 k

   

  g1

+   g2

+ . . . +   gk

g

 1

 2

 k

ovsjanikov et al. 2012; eynard et al. 2012; kovnatsky et al. 2013

basis synchronization with functional maps

    f1

   

+     f2

+ . . . +     fk

f
!t      i    >

 

   1

   2
 
!i

   k

   

  g1

+   g2

+ . . . +   gk

g

 1

 2

 k

ovsjanikov et al. 2012; eynard et al. 2012; kovnatsky et al. 2013

filtering in di   erent bases

1

)
 
(
   

 1

0

spectral    lter

200

400

600

800

1,000

 

     (    ) > 0

     (    ) > 0

apply spectral    lter     ( ) in di   erent bases   and  

) di   erent results!

filtering in di   erent bases

     (    ) > 0

canonical shape
with basis    ,    

     (    ) > 0

apply spectral    lter     ( ) in di   erent bases   and  

) di   erent results!

filtering in synchronized bases

t         c> 

t 

t         c> 

t 

 c     (   )c>  > 0

canonical shape
with basis    ,    

 c     (   )c>  > 0

apply spectral    lter     ( ) in synchronized bases  c  and  c 

) similar results!

yi et al. 2017

spectral id98

 >

 

ft

spectral    lter

ift

relu

convolutional    lter of a spectral id98

fixed basis ) does not generalize across domains
possible o(n) complexity avoiding explicit ft and ift

bruna et al. 2014

spectral transformer network

shape

c>

spectn

c

 >

 

ft

sync

spectral    lter

sync

ift

relu

convolutional    lter of a spectral transformer network

basis synchronization allows generalization across domains
explicit ft and ift

(jaderberg et al. 2015); yi et al. 2017

example: normal prediction with spectn

predicted

groundtruth

yi et al. 2017

example: shape segmentation with spectn

predicted

groundtruth

yi et al. 2017

di   erent formulations of non-euclidean id98s

spectral domain

spatial domain

embedding domain

convolution

euclidean

non-euclidean

spatial domain

(f ?g)(x) =z    

    

spectral domain

f (x0)g(x x0)dx0

?

\(f?g )(!) =   f (!)      g(!)

   convolution theorem   

\(f?g )k = hf,  kil2(x )hg,  kil2(x )

patchoperatorximage   localsystemofcoordinates:bijection&x:b   0(x)![0,1]2   patchoperatorboscainietal.2015patchoperatorximagexmanifold   localsystemofcoordinates:bijection&x:b   0(x)![0,1]2   patchoperatorboscainietal.2015patchoperatorxu1u2imagexu1u2manifold   localsystemofcoordinates:bijection&x:b   0(x)![0,1]2   patchoperatorboscainietal.2015patchoperatorxu1u2imagexu1u2manifold   localsystemofcoordinates:bijection&x:b   0(x)![0,1]2   patchoperatord:l2(x)!l2([0,1]2)mappingfaroundx(d(x)f)(u)=(f & 1x)(u)boscainietal.2015patchoperatorxu1u2imagex0u1u2manifold   localsystemofcoordinates:bijection&x:b   0(x)![0,1]2   patchoperatord:l2(x)!l2([0,1]2)mappingfaroundx(d(x)f)(u)=(f & 1x)(u)boscainietal.2015patchoperatorxu1u2imagex0u1u2manifold   localsystemofcoordinates:bijection&x:b   0(x)![0,1]2   patchoperatorapplyingweightingfunctionwu(x,x0)= & 1x(u)(x0)(d(x)f)(u)=hf,wu(x,x0)il2(x)ineuclideancase,w(x,x0)isshift-invariantboscainietal.2015patchoperatorxu1u2imagex0u1u2manifold   localsystemofcoordinates:bijection&x:b   0(x)![0,1]2   patchoperatorapplyingweightingfunctionwu(x,x0)= & 1x(u)(x0)(d(x)f)(u)=hf,wu(x,x0)il2(x)ineuclideancase,w(x,x0)isshift-invariantboscainietal.2015spatial convolution

spatial convolution of f 2 l2(x ) with continuous    lter g 2 l2([0, 1]2)

(f?g )(x) = z[0,1]2

g(u)(d(x)f )(u) du

spatial convolution

spatial convolution of f 2 l2(x ) with discrete    lter g = (g1, . . . , gj )

(f?g )(x) =

jxj=1

gj(d(x)f )j

geodesic polar patch operator

patch expressed in local geodesic polar coordinates

(d(x)f )(   ,    ) = zx

   

|

w   (x, x0)w   (x, x0)

w      (x,x0)

{z

}

f (x0) dx0

 

radial weight

angular weight

w   (x, x0) / e (dx (x,x0)    )2/ 2

   

w   (x, x0) / e d2

x (     (x),x0)/ 2

   

kokkinos et al. 2012; boscaini et al. 2015

geodesic polar patch operator construction

weighting functions of the geodesic polar patch operator
shown in (   ,    ) coordinates (contours mark the 1
2 -level set)

masci et al. 2015

geodesic convolution

(f?g )(x) = z    0

0 z 2   

0

(d(x)f )(   ,    )

g(   ,    )

d   d   

masci et al. 2015

geodesic convolution

(f?g )(x) = z    0

0 z 2   

0

(d(x)f )(   ,    )

|

{z

}

d   d   

g(   ,    )

| {z }

masci et al. 2015

geodesic convolution

(f?g )(x) = z    0

0 z 2   

0

(d(x)f )(   ,    )

g(   +    ,    )

{z

}

|

{z

}

|

angular coordinate origin is arbitrary = rotation ambiguity!

d   d   

masci et al. 2015

geodesic convolution

(f?g )(x) = z    0

0 z 2   

0

(d(x)f )(   ,    )

g(   +    ,    )

d   d   

{z

}

|

{z

}

|

.
.
.

angular coordinate origin is arbitrary = rotation ambiguity!

    select reference direction, e.g. maximum curvature vector

masci et al. 2015

geodesic convolution

(f?g )(x) = z    0

0 z 2   

0

(d(x)f )(   ,    )

g(   +    ,    )

d   d   

{z

}

|

{z

}

|

.
.
.

angular coordinate origin is arbitrary = rotation ambiguity!

    select reference direction, e.g. maximum curvature vector
    take fourier transform w.r.t.    

masci et al. 2015

geodesic convolution

(f?g )(x) = z    0

0 z 2   

0

(d(x)f )(   ,    )

g(   +    ,    )

d   d   

{z

}

|

{z

}

|

.
.
.

angular coordinate origin is arbitrary = rotation ambiguity!

    select reference direction, e.g. maximum curvature vector
    take fourier transform w.r.t.    

(d(x)f )(   ,    )

f      ! \(d(x)f )(   , !)

masci et al. 2015

geodesic convolution

(f?g )(x) = z    0

0 z 2   

0

(d(x)f )(   ,    )

g(   +    ,    )

d   d   

{z

}

|

{z

}

|

.
.
.

angular coordinate origin is arbitrary = rotation ambiguity!

    select reference direction, e.g. maximum curvature vector
    take fourier transform w.r.t.    

(d(x)f )(   ,     +     )

f      ! e i!    \(d(x)f )(   , !)

masci et al. 2015

geodesic convolution

(f?g )(x) = z    0

0 z 2   

0

(d(x)f )(   ,    )

g(   +    ,    )

d   d   

{z

}

|

{z

}

|

.
.
.

angular coordinate origin is arbitrary = rotation ambiguity!

    select reference direction, e.g. maximum curvature vector
    take fourier transform magnitude w.r.t.    

(d(x)f )(   ,     +     )

f      !   e i!    \(d(x)f )(   , !)  

masci et al. 2015

geodesic convolution

(f?g )(x) = z    0

0 z 2   

0

(d(x)f )(   ,    )

g(   +    ,    )

d   d   

{z

}

|

{z

}

|

.
.
.

angular coordinate origin is arbitrary = rotation ambiguity!

    select reference direction, e.g. maximum curvature vector
    take fourier transform magnitude w.r.t.    
    keep all possible rotations

masci et al. 2015

geodesic convolution layer

f1(x)

d(x)

fp(x)

d(x)

w 2   
n   

,1,1

w2   ,1,1

w 2   
n   

,q,1

w2   ,q,1

...

w 2   
n   

,1,p

...
w2   ,1,p

...

w 2   
n   

,q,p

...
w2   ,q,p

g 2   
n   

,1

g2   ,1

g 2   
n   

,q

g2   ,q

conv. layer

g    ,l(x) =      pxl0=1

(fl0 ?w     ,l,l0)(x)! l = 1, . . . , q

l0 = 1, . . . , p
     = 2   
n   

, . . . , 2   

masci et al. 2015

geodesic convolution layer

f1(x)

d(x)

fp(x)

d(x)

w 2   
n   

,1,1

w2   ,1,1

w 2   
n   

,q,1

w2   ,q,1

...

w 2   
n   

,1,p

...
w2   ,1,p

...

w 2   
n   

,q,p

...
w2   ,q,p

g 2   
n   

,1

g2   ,1

g 2   
n   

,q

g2   ,q

x
a
m

g1(x)

x
a
m

gq(x)

conv. layer

g    ,l(x) =      pxl0=1

(fl0 ?w     ,l,l0)(x)! l = 1, . . . , q

l0 = 1, . . . , p
     = 2   
n   

, . . . , 2   

angular
max pooling

gl(x) = max
    

g    ,l(x)

masci et al. 2015

geodesic id98 (gid98)

convolutional layer expressed in the spatial domain using geodesic polar
patch operator + angular max pooling to solve rotational ambiguity

gl(x) = max
    

wl,l0(   ,     +     )(d(x)fl0)(   ,    ) d   d   

0 z 2   

0

       pxl0=1z    0
|

l = 1, . . . , q
l0 = 1, . . . , p

(fl0 ?w    ,l,l0 )(x)

{z

   

}

where wl,l0 = (wl,l0,1, . . . , wl,l0,j ) are spatial    lter coe cients

boscaini et al. 2015

geodesic id98 (gid98)

convolutional layer expressed in the spatial domain using geodesic polar
patch operator + angular max pooling to solve rotational ambiguity

gl(x) = max
    

wl,l0(   ,     +     )(d(x)fl0)(   ,    ) d   d   

0 z 2   

0

       pxl0=1z    0
|

l = 1, . . . , q
l0 = 1, . . . , p

(fl0 ?w    ,l,l0 )(x)

{z

   

}

where wl,l0 = (wl,l0,1, . . . , wl,l0,j ) are spatial    lter coe cients

directional    lters

boscaini et al. 2015

geodesic id98 (gid98)

convolutional layer expressed in the spatial domain using geodesic polar
patch operator + angular max pooling to solve rotational ambiguity

gl(x) = max
    

wl,l0(   ,     +     )(d(x)fl0)(   ,    ) d   d   

0 z 2   

0

       pxl0=1z    0
|

l = 1, . . . , q
l0 = 1, . . . , p

(fl0 ?w    ,l,l0 )(x)

{z

   

}

where wl,l0 = (wl,l0,1, . . . , wl,l0,j ) are spatial    lter coe cients

directional    lters
spatially-localized    lters

boscaini et al. 2015

geodesic id98 (gid98)

convolutional layer expressed in the spatial domain using geodesic polar
patch operator + angular max pooling to solve rotational ambiguity

gl(x) = max
    

wl,l0(   ,     +     )(d(x)fl0)(   ,    ) d   d   

0 z 2   

0

       pxl0=1z    0
|

l = 1, . . . , q
l0 = 1, . . . , p

(fl0 ?w    ,l,l0 )(x)

{z

   

}

where wl,l0 = (wl,l0,1, . . . , wl,l0,j ) are spatial    lter coe cients

directional    lters
spatially-localized    lters
o(1) parameters per layer

boscaini et al. 2015

geodesic id98 (gid98)

convolutional layer expressed in the spatial domain using geodesic polar
patch operator + angular max pooling to solve rotational ambiguity

gl(x) = max
    

wl,l0(   ,     +     )(d(x)fl0)(   ,    ) d   d   

0 z 2   

0

       pxl0=1z    0
|

l = 1, . . . , q
l0 = 1, . . . , p

(fl0 ?w    ,l,l0 )(x)

{z

   

}

where wl,l0 = (wl,l0,1, . . . , wl,l0,j ) are spatial    lter coe cients

directional    lters
spatially-localized    lters
o(1) parameters per layer
all operations are local )o (n) computational complexity

boscaini et al. 2015

geodesic id98 (gid98)

convolutional layer expressed in the spatial domain using geodesic polar
patch operator + angular max pooling to solve rotational ambiguity

gl(x) = max
    

wl,l0(   ,     +     )(d(x)fl0)(   ,    ) d   d   

0 z 2   

0

       pxl0=1z    0
|

l = 1, . . . , q
l0 = 1, . . . , p

(fl0 ?w    ,l,l0 )(x)

{z

   

}

where wl,l0 = (wl,l0,1, . . . , wl,l0,j ) are spatial    lter coe cients

directional    lters
spatially-localized    lters
o(1) parameters per layer
all operations are local )o (n) computational complexity
angular max pooling potentially reduces discriminativity

boscaini et al. 2015

example: learning local descriptors with gid98

x

y

   

gid98

f(x)

`s

g(y)

gid98

training set

siamese net

poitwise feature cost

positive (x, x+) and negative (x, x ) pairs of points

two net instances with shared parameters    

`s(   ) =  xx,x+ kf   (x)   f   (x+)k2

2

+ (1    )xx,x         kf   (x)   f   (x )k2
2   +

boscaini et al. 2015

example: hks descriptor

max

min

distance in the space of local heat kernel signature (hks) features

(shown is distance from a point on the shoulder marked in white)

descriptor: sun, ovsjanikov, guibas 2009 (hks); data: bronstein et al. 2008 (tosca); anguelov et al. 2005 (scape);
bogo et al. 2014 (faust)

example: wks descriptor

max

min

distance in the space of local wave kernel signature (wks) features

(shown is distance from a point on the shoulder marked in white)

descriptor: aubry, schlickewei, cremers 2011 (wks); data: bronstein et al. 2008 (tosca); anguelov et al. 2005 (scape);
bogo et al. 2014 (faust)

example: descriptor learning with gid98

max

min

distance in the space of local gid98 features

(shown is distance from a point on the shoulder marked in white)

descriptor: masci et al. 2015 (gid98); data: bronstein et al. 2008 (tosca); anguelov et al. 2005 (scape);
bogo et al. 2014 (faust)

descriptor quality comparison

cmc

roc

1-nn corresp. quality

100

)

%

(

e
t
a
r

t
i
h

80

60

40

20

0

100

)

%

(

e
t
a
r

e
v
i
t
i
s
o
p

e
u
r
t

80

60

40

20

0

0

20

40

60

80 100

# matches

1

0.1
100
false positive rate (%)

10

s
e
c
n
e
d
n
o
p
s
e
r
r
o
c
%

60

40

20

0

hks
wks
osd
gid98

10

30
% geodesic diameter

20

descriptor performance using symmetric princeton benchmark

(training and testing: disjoint subsets of faust)

methods: sun et al. 2009 (hks); aubry et al. 2011 (wks); litman, bronstein 2014 (osd); masci et al. 2015 (gid98);
data: bogo et al. 2014 (faust); benchmark: kim et al. 2011

homogeneous di   usion

ft(x) =  c f (x)

c = thermal di   usivity constant describing heat conduction properties of
the material (di   usion speed is equal everywhere)

anisotropic di   usion

ft(x) =  div(crf (x))

c = thermal di   usivity constant describing heat conduction properties of
the material (di   usion speed is equal everywhere)

di   usion

ft(x) =  div(a(x)rf (x))

a(x) = heat conductivity tensor describing heat conduction properties of
the material (di   usion speed is position + direction dependent)

anisotropic di   usion

anisotropic

anisotropicdi   usiononmanifolds   umaxuminft(x)= div r         1   r>   |{z}d      (x)rf(x)!   anisotropiclaplacian       f(x)=div(d      (x)rf(x))      =orientationw.r.t.maxcurvaturedirection      =   elongation   andreuxetal.2014;boscainietal.2016anisotropicdi   usiononmanifolds   umaxuminft(x)= div r         1   r>   |{z}d      (x)rf(x)!   anisotropiclaplacian       f(x)=div(d      (x)rf(x))      =orientationw.r.t.maxcurvaturedirection      =   elongation   andreuxetal.2014;boscainietal.2016anisotropic heat kernels

h      t(x, x0) =xk 0

e t       k        k(x)       k(x0)

orientation    

elongation    

anisotropic id98 (aid98)

use anisotropic heat kernels as weighting functions of the patch operator

(d(x)f )j =zx

f (x0)h   i,   i,ti(x, x0)dx0

j = 1, . . . , j

for a discrete set of angles/scales/anisotropic constants

boscaini et al. 2016

anisotropic id98 (aid98)

use anisotropic heat kernels as weighting functions of the patch operator

(d(x)f )j =zx

f (x0)h   i,   i,ti(x, x0)dx0

j = 1, . . . , j

for a discrete set of angles/scales/anisotropic constants

boscaini et al. 2016

anisotropic id98 (aid98)

use anisotropic heat kernels as weighting functions of the patch operator

(d(x)f )j =zx

f (x0)h   i,   i,ti(x, x0)dx0

j = 1, . . . , j

for a discrete set of angles/scales/anisotropic constants

convolutional layer expressed in the spatial domain

gl(x) =      pxl0=1

w>l,l0d(x)f! l = 1, . . . , q

l0 = 1, . . . , p

where wl,l0 = (wl,l0,1, . . . , wl,l0,j ) are spatial    lter coe cients

boscaini et al. 2016

anisotropic id98 (aid98)

use anisotropic heat kernels as weighting functions of the patch operator

(d(x)f )j =zx

f (x0)h   i,   i,ti(x, x0)dx0

j = 1, . . . , j

for a discrete set of angles/scales/anisotropic constants

convolutional layer expressed in the spatial domain

gl(x) =      pxl0=1

w>l,l0d(x)f! l = 1, . . . , q

l0 = 1, . . . , p

where wl,l0 = (wl,l0,1, . . . , wl,l0,j ) are spatial    lter coe cients

directional    lters
spatially-localized    lters
o(1) parameters per layer

boscaini et al. 2016

anisotropic id98 (aid98)

use anisotropic heat kernels as weighting functions of the patch operator

(d(x)f )j =zx

f (x0)h   i,   i,ti(x, x0)dx0

j = 1, . . . , j

for a discrete set of angles/scales/anisotropic constants

convolutional layer expressed in the spatial domain

gl(x) =      pxl0=1

w>l,l0d(x)f! l = 1, . . . , q

l0 = 1, . . . , p

where wl,l0 = (wl,l0,1, . . . , wl,l0,j ) are spatial    lter coe cients

directional    lters
spatially-localized    lters
o(1) parameters per layer
expensive computation of heat kernels for many orientations

boscaini et al. 2016

example: descriptor learning with aid98

max

min

distance in the space of local aid98 features

(shown is distance from a point on the shoulder marked in white)

boscaini et al. 2015; boscaini et al. 2016

learnablepatchoperatorxu1u2imagexu1u2manifold   localsystemofcoordinatesu(x,x0)aroundpointx   parametricweightingfunctionsw(u)   parametricpatchoperatorapplyingjsuchweightingfunctionsmontietal.2016learnablepatchoperatorxu1u2imagexu1u2manifold   localsystemofcoordinatesu(x,x0)aroundpointx   parametricweightingfunctionsw   (u)   parametricpatchoperatorapplyingjsuchweightingfunctionsmontietal.2016learnablepatchoperatorxu1u2imagexu1u2manifold   localsystemofcoordinatesu(x,x0)aroundpointx   parametricweightingfunctionsw   (u)   parametricpatchoperatorapplyingjsuchweightingfunctions(d   1,...,   j(x)f)j=zxf(x0)w   j(u(x,x0))dx0j=1,...,jmontietal.2016learnablepatchoperatorxu1u2imagexu1u2manifold   localsystemofcoordinatesu(x,x0)aroundpointx   parametricweightingfunctions,e.g.w  ,   (u)=e 12(u   )>    1(u   )   parametricpatchoperatorapplyingjsuchweightingfunctions(d  1,   1,...,  j,   j(x)f)j=zxf(x0)w  j,   j(u(x,x0))dx0j=1,...,jmontietal.2016learnablepatchesonmanifolds   geodesicpolarcoordinatesu(x,y)=(   (x,y),   (x,y))   gaussianweightingfunctionsw  ,   (u)=exp  12(u   )>    1(u   ) withlearnablecovariance   andmean  xxu1=   u2=   spatialconvolution(f?g)(x)=jxj=1gjw  j,   j(u(x,x0))|{z}gaussianmixtureg(u(x,x0))f(x0)dx0montietal.2016learnablepatchesonmanifolds   geodesicpolarcoordinatesu(x,y)=(   (x,y),   (x,y))   gaussianweightingfunctionsw  ,   (u)=exp  12(u   )>    1(u   ) withlearnablecovariance   andmean  xxu1=   u2=   spatialconvolution(f?g)(x)=jxj=1gjw  j,   j(u(x,x0))|{z}gaussianmixtureg(u(x,x0))f(x0)dx0montietal.2016learnablepatchesonmanifolds   geodesicpolarcoordinatesu(x,y)=(   (x,y),   (x,y))   gaussianweightingfunctionsw  ,   (u)=exp  12(u   )>    1(u   ) withlearnablecovariance   andmean  xxu1=   u2=   spatialconvolution(f?g)(x)=jxj=1gjzxw  j,   j(u(x,x0))|{z}gaussianmixtureg(u(x,x0))f(x0)dx0montietal.2016learnablepatchesonmanifolds   geodesicpolarcoordinatesu(x,y)=(   (x,y),   (x,y))   gaussianweightingfunctionsw  ,   (u)=exp  12(u   )>    1(u   ) withlearnablecovariance   andmean  xxu1=   u2=   spatialconvolution(f?g)(x)=zxjxj=1gjw  j,   j(u(x,x0))|{z}gaussianmixtureg(u(x,x0))f(x0)dx0montietal.2016learnablepatchesonmanifolds   geodesicpolarcoordinatesu(x,y)=(   (x,y),   (x,y))   gaussianweightingfunctionsw  ,   (u)=exp  12(u   )>    1(u   ) withlearnablecovariance   andmean  xxu1=   u2=   spatialconvolution(f?g)(x)=zxjxj=1gjw  j,   j(u(x,x0))|{z}gaussianmixtureg(u(x,x0))f(x0)dx0montietal.2016mixture model networks (monet)

convolutional layer expressed in the spatial domain using a learnable
patch operator

gl(x) =      pxl0=1

w>l,l0d   (x)f! l = 1, . . . , q

l0 = 1, . . . , p

where wl,l0 = (wl,l0,1, . . . , wl,l0,j ) are spatial    lter coe cients and
    = (  1,    1, . . . ,   j ,    j ) are the patch parameters

monti et al. 2016

mixture model networks (monet)

convolutional layer expressed in the spatial domain using a learnable
patch operator

gl(x) =      pxl0=1

w>l,l0d   (x)f! l = 1, . . . , q

l0 = 1, . . . , p

where wl,l0 = (wl,l0,1, . . . , wl,l0,j ) are spatial    lter coe cients and
    = (  1,    1, . . . ,   j ,    j ) are the patch parameters

directional    lters
spatially-localized    lters
learnable patch operator
o(1) parameters per layer

monti et al. 2016

patch operator weight functions

gid98

aid98

monet

masci et al. 2015 (gid98); boscaini et al. 2016 (aid98); monti et al. 2016 (monet)

monet as generalization of previous methods

method coordinates u(x, x0) weight function w   (u)
id981

u(x0)   u(x)

 (u   v)
   xed parameters     = v

gid982

   (x, x0),    (x, x0)

aid983

   (x, x0),    (x, x0)

monet4

   (x, x0),    (x, x0)

   

 2

   xed parameters     = (v,     ,     )

       1
(u   v)   
1 )r>' u 

exp     1
2 (u   v)>     2
exp  tu>r'(    
exp    1

2 (u     )>    1(u     ) 

learnable parameters     = (  ,    )

   xed parameters     = (   , ', t)

some id98 models can be considered as particular settings of monet

with weighting functions of di   erent form

methods: 1lecun et al. 1998; 2masci et al. 2015; 3boscaini et al. 2016; 4monti et al. 2016

learning deformation-invariant correspondence

    groundtruth correspondence
       : x!y from query shape x
to some reference shape y
(discretized with n vertices)

    correspondence = label each query

vertex x as reference vertex y

x   

   (x)

query x

reference y

rodol`a et al. 2014; masci et al. 2015

learning deformation-invariant correspondence

    groundtruth correspondence
       : x!y from query shape x
to some reference shape y
(discretized with n vertices)

    correspondence = label each query

vertex x as reference vertex y

    net output at x after softmax layer
f   (x) = (f   ,1(x), . . . , f   ,n(x))
= id203 distribution on y

x   

id98

f   (x)

   (x)

query x

reference y

rodol`a et al. 2014; masci et al. 2015

learning deformation-invariant correspondence

    groundtruth correspondence
       : x!y from query shape x
to some reference shape y
(discretized with n vertices)

    correspondence = label each query

vertex x as reference vertex y

    net output at x after softmax layer
f   (x) = (f   ,1(x), . . . , f   ,n(x))
= id203 distribution on y

x   

id98

f   (x)

   (x)

query x

reference y

minimize on training set the cross id178 between groundtruth
correspondence and output id203 distribution w.r.t. net parameters    

min

    xx

h(       (x), f   (x))

rodol`a et al. 2014; masci et al. 2015

correspondence evaluation: princeton benchmark

g i v e n    

   (x)

dy (      (x),    (x))

x

groundtruth       

      (x)

query x

reference y

pointwise correspondence error = geodesic distance from the groundtruth

   (x) = dy (      (x),    (x))

kim et al. 2011

correspondence quality comparison

s
e
c
n
e
d
n
o
p
s
e
r
r
o
c
%

100

80

60

40

20

0

cm

4

8

12

16

20

bim
rf
gid98
aid98
monet

2

4

6

8

10

% geodesic diameter

correspondence evaluated using asymmetric princeton benchmark

(training and testing: disjoint subsets of faust)

methods: kim et al. 2011 (bim); rodol`a et al. 2014 (rf); boscaini et al. 2015 (add); masci et al. 2015 (gid98);
boscaini et al. 2016 (aid98); monti et al. 2016 (monet); data: bogo et al. 2014 (faust); benchmark: kim et al. 2011

shape correspondence error: blended intrinsic map

15cm

0

pointwise correspondence error (geodesic distance from groundtruth)

kim, lipman, funkhouser 2011

shape correspondence error: geodesic id98

15cm

0

pointwise correspondence error (geodesic distance from groundtruth)

masci et al. 2015

shape correspondence error: anisotropic id98

15cm

0

pointwise correspondence error (geodesic distance from groundtruth)

boscaini et al. 2016

shape correspondence error: monet

15cm

0

pointwise correspondence error (geodesic distance from groundtruth)

monti et al. 2016

shape correspondence visualization: monet

reference

texture transferred from reference to query shapes

monti et al. 2016

correspondence on range images: monet

15cm

0

pointwise correspondence error (geodesic distance from groundtruth)

monti et al. 2016

correspondence with monet: range images

reference

correspondence visualization (similar colors encode corresponding points)

monti et al. 2016

correspondence with monet: range images

reference

correspondence visualization (similar colors encode corresponding points)

monti et al. 2016

partial correspondence with aid98

correspondence

correspondence error

10%

0%

boscaini et al. 2016

partial correspondence with aid98

correspondence

correspondence error

10%

0%

boscaini et al. 2016

correspondence as classi   cation problem, revisited

x

   

groundtruth       

   0

query x

reference y

classi   cation cost considers equally correspondences
that deviate from the groundtruth (no matter how far)

kim et al. 2011

soft correspondence error

x

groundtruth       

y

p(x, y)

query x

reference y

soft correspondence error = id203-weighted geodesic distance from
the groundtruth

     (x) =zy

p(x, y)dy (      (x), y)dy

kovnatsky et al. 2015; litany et al. 2017

pointwise vs structured learning

x0
x

y0

y0
y

query x

reference y

nearby points x, x0 on query shape are not guaranteed to map

to nearby points y, y0 on reference shape at test time

litany et al. 2017

functional maps: spectral domain

f (x)

      f1

+   f2

+ . . . +   fk

 
!t

 
!c

g(x)

      g1

+   g2

+ . . . +   gk

functional correspondence t = linear map c between fourier
coe cients

  g> =   f>c

ovsjanikov et al. 2012

functional maps: spectral domain

f1(x)
...

fq(x)

g1(x)
...
gq(x)

 
!t

   

  f11
...

  fq1

  g11
...
  gq1

   

+

  f12
...

  fq2

  g12
...
  gq2

+

+ . . . +

 
!c

+ . . . +

  f1k
...

  fqk

  g1k
...
  gqk

recover correspondence from q   k dimensional pointwise features

0b@

  g11
...
  gq1

  g12
...
  gq2

. . .

. . .

  g1k
...
  gqk

1ca =0b@

  f11
...
  fq1

  f12
...
  fq2

. . .

. . .

  f1k
...
  fqk

1ca c

ovsjanikov et al. 2012

functional maps: spectral domain

f1(x)
...

fq(x)

g1(x)
...
gq(x)

 
!t

   

  f11
...

  fq1

  g11
...
  gq1

   

+

  f12
...

  fq2

  g12
...
  gq2

+

+ . . . +

 
!c

+ . . . +

  f1k
...

  fqk

  g1k
...
  gqk

recover correspondence from q   k dimensional pointwise features

  g =   fc

ovsjanikov et al. 2012

functional maps: spectral domain

f1(x)
...

fq(x)

g1(x)
...
gq(x)

 
!t

   

  f11
...

  fq1

  g11
...
  gq1

   

+

  f12
...

  fq2

  g12
...
  gq2

+

+ . . . +

 
!c

+ . . . +

  f1k
...

  fqk

  g1k
...
  gqk

recover correspondence from q   k dimensional pointwise features

c    = argmin

c

k   fc     gk2

f

ovsjanikov et al. 2012

functional maps: spatial domain

rank-k approximation of spatial correspondence

t      c >

ovsjanikov et al. 2012

functional maps: spatial domain

id203 p(x, y) of point x mapping to y

p    |  c >|k  k

ovsjanikov et al. 2012

siamese metric learning

x

y

   

intrinsic deep net

f(x)

`s

g(y)

intrinsic deep net

siamese net

poitwise feature cost

two net instances with shared parameters    

`s(   ) =  xx,x+ kf   (x)   f   (x+)k2

2

+ (1    )xx,x         kf   (x)   f   (x )k2
2   +

boscaini et al. 2015; cosmo et al. 2016

structured correspondence with fmnet

x

y

   

intrinsic deep net

f(x)

 >

  f

intrinsic deep net

g(y)

 >

  g

fm

c

soft corr

p

`f

siamese net

functional map layer soft corr layer

siamese net

functional map layer

two net instances with shared parameters    
c       = argmin

k   f   c     g   k2

f

c

soft correspondence layer p    = | c    >|k  k
`f(   ) = zxzy
soft error cost

p   (x, y)dy (      (x), y) dx dy

litany et al. 2017

structured correspondence with fmnet

x

y

   

intrinsic deep net

f(x)

 >

  f

intrinsic deep net

g(y)

 >

  g

fm

c

soft corr

p

`f

siamese net

functional map layer soft corr layer

siamese net

functional map layer

two net instances with shared parameters    
c       =   f      

  g   

soft correspondence layer p    = | c    >|k  k
`f(   ) = kp      dyk
soft error cost

litany et al. 2017

correspondence quality comparison

s
e
c
n
e
d
n
o
p
s
e
r
r
o
c
%

100

80

60

40

20

0

cm

4

8

12

16

20

bim
rf
gid98
aid98
monet
fmnet

2

4

6

8

10

% geodesic diameter

correspondence evaluated using asymmetric princeton benchmark

(training and testing: disjoint subsets of faust)

methods: kim et al. 2011 (bim); rodol`a et al. 2014 (rf); boscaini et al. 2015 (add); masci et al. 2015 (gid98);
boscaini et al. 2016 (aid98); monti et al. 2016 (monet); litany et al. 2017 (fmnet); data: bogo et al. 2014 (faust);
benchmark: kim et al. 2011

di   erent formulations of non-euclidean id98s

spectral domain

spatial domain

embedding domain

global parametrization

map the input surface to some parametric domain with shift-invariant
structure

sinha et al. 2016; maron et al. 2017

global parametrization

map the input surface to some parametric domain with shift-invariant
structure

allows to use standard id98s (pull back convolution from the para-
metric space)

sinha et al. 2016; maron et al. 2017

global parametrization

map the input surface to some parametric domain with shift-invariant
structure

allows to use standard id98s (pull back convolution from the para-
metric space)
guaranteed invariance to some classes of transformations

sinha et al. 2016; maron et al. 2017

global parametrization

map the input surface to some parametric domain with shift-invariant
structure

allows to use standard id98s (pull back convolution from the para-
metric space)
guaranteed invariance to some classes of transformations
parametrization may not be unique

sinha et al. 2016; maron et al. 2017

global parametrization

map the input surface to some parametric domain with shift-invariant
structure

allows to use standard id98s (pull back convolution from the para-
metric space)
guaranteed invariance to some classes of transformations
parametrization may not be unique
embedding may introduce distortion

sinha et al. 2016; maron et al. 2017

translation invariance on manifolds

translation on manifold = locally euclidean translation

translation invariance on manifolds

translation on manifold = locally euclidean translation =    ow along a
non-vanishing vector    eld

translation invariance on manifolds

translation on manifold = locally euclidean translation =    ow along a
non-vanishing vector    eld

poincar  e-hopf theorem non-vanishing vector    eld on a closed ori-
entable compact 2-manifold implies manifold of genus 1 (torus)

poincar  e 1881; hopf 1926

translation invariance on manifolds

translation on manifold = locally euclidean translation =    ow along a
non-vanishing vector    eld

poincar  e-hopf theorem non-vanishing vector    eld on a closed ori-
entable compact 2-manifold implies manifold of genus 1 (torus)

   hairy ball theorem    states that a sphere cannot be combed

poincar  e 1881; hopf 1926

translation invariance on the torus

torus is the only closed orientable surface admitting a translation group

convolution on torus

for any triplet of points on x , construct conformal homeomorphism from
the 4-cover x 4 to t using orbifold-tutte method

maron et al. 2017

conformal zoom

    embedding depends on the choice of the triplets of points

maron et al. 2017

conformal zoom

    embedding depends on the choice of the triplets of points
       conformal zoom    e   ect

maron et al. 2017

conformal zoom

    embedding depends on the choice of the triplets of points
       conformal zoom    e   ect
    choose multiple triples and aggregate results in training / test phase

maron et al. 2017

conformal zoom

    embedding depends on the choice of the triplets of points
       conformal zoom    e   ect
    choose multiple triples and aggregate results in training / test phase

di   erent triplets

aggregated result

maron et al. 2017

example: shape segmentation with toric id98

examples of shape segmentation obtained with toric id98

maron et al. 2017

example: shape segmentation with toric id98

examples of shape segmentation obtained with toric id98

maron et al. 2017

