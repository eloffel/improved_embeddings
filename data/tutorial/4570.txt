   #[1]github [2]recent commits to senteval:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]51
     * [35]star [36]1,037
     * [37]fork [38]153

[39]facebookresearch/[40]senteval

   [41]code [42]issues 10 [43]pull requests 11 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   a python tool for evaluating the quality of sentence embeddings.
     * [47]134 commits
     * [48]3 branches
     * [49]0 releases
     * [50]fetching contributors
     * [51]view license

    1. [52]python 90.0%
    2. [53]shell 7.9%
    3. [54]sed 2.1%

   (button) python shell sed
   branch: master (button) new pull request
   [55]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/f
   [56]download zip

downloading...

   want to be notified of new releases in facebookresearch/senteval?
   [57]sign in [58]sign up

launching github desktop...

   if nothing happens, [59]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [60]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [61]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [62]download the github extension for visual studio
   and try again.

   (button) go back
   [63]@douwekiela
   [64]douwekiela [65]move to new s3 url
   latest commit [66]6b13ac2 feb 5, 2019
   [67]permalink
   type      name             latest commit message       commit time
        failed to load latest commit information.
        [68]data       [69]move to new s3 url             feb 5, 2019
        [70]examples   [71]fixed issue for google encoder oct 4, 2018
        [72]senteval
        [73].gitignore
        [74]license
        [75]readme.md
        [76]setup.py

readme.md

senteval: evaluation toolkit for sentence embeddings

   senteval is a library for evaluating the quality of sentence
   embeddings. we assess their generalization power by using them as
   features on a broad and diverse set of "transfer" tasks. senteval
   currently includes 17 downstream tasks. we also include a suite of 10
   probing tasks which evaluate what linguistic properties are encoded in
   sentence embeddings. our goal is to ease the study and the development
   of general-purpose fixed-size sentence representations.

   (04/22) senteval new tasks: added probing tasks for evaluating what
   linguistic properties are encoded in sentence embeddings

   (10/04) senteval example scripts for three sentence encoders:
   [77]skipthought-ln/[78]gensen/[79]google-use

dependencies

   this code is written in python. the dependencies are:
     * python 2/3 with [80]numpy/[81]scipy
     * [82]pytorch>=0.4
     * [83]scikit-learn>=0.18.0

transfer tasks

downstream tasks

   senteval allows you to evaluate your sentence embeddings as features
   for the following downstream tasks:
   task type #train #test needs_train set_classifier
   [84]mr movie review 11k 11k 1 1
   [85]cr product review 4k 4k 1 1
   [86]subj subjectivity status 10k 10k 1 1
   [87]mpqa opinion-polarity 11k 11k 1 1
   [88]sst binary id31 67k 1.8k 1 1
   [89]sst fine-grained id31 8.5k 2.2k 1 1
   [90]trec question-type classification 6k 0.5k 1 1
   [91]sick-e natural language id136 4.5k 4.9k 1 1
   [92]snli natural language id136 550k 9.8k 1 1
   [93]mrpc paraphrase detection 4.1k 1.7k 1 1
   [94]sts 2012 semantic textual similarity n/a 3.1k 0 0
   [95]sts 2013 semantic textual similarity n/a 1.5k 0 0
   [96]sts 2014 semantic textual similarity n/a 3.7k 0 0
   [97]sts 2015 semantic textual similarity n/a 8.5k 0 0
   [98]sts 2016 semantic textual similarity n/a 9.2k 0 0
   [99]sts b semantic textual similarity 5.7k 1.4k 1 0
   [100]sick-r semantic textual similarity 4.5k 4.9k 1 0
   [101]coco image-caption retrieval 567k 5*1k 1 0

   where needs_train means a model with parameters is learned on top of
   the sentence embeddings, and set_classifier means you can define the
   parameters of the classifier in the case of a classification task (see
   below).

   note: coco comes with resnet-101 2048d image embeddings. [102]more
   details on the tasks.

probing tasks

   senteval also includes a series of [103]probing tasks to evaluate what
   linguistic properties are encoded in your sentence embeddings:
   task type #train #test needs_train set_classifier
   [104]sentlen length prediction 100k 10k 1 1
   [105]wc word content analysis 100k 10k 1 1
   [106]treedepth tree depth prediction 100k 10k 1 1
   [107]topconst top constituents prediction 100k 10k 1 1
   [108]bshift word order analysis 100k 10k 1 1
   [109]tense verb tense prediction 100k 10k 1 1
   [110]subjnum subject number prediction 100k 10k 1 1
   [111]objnum object number prediction 100k 10k 1 1
   [112]somo semantic odd man out 100k 10k 1 1
   [113]coordinv coordination inversion 100k 10k 1 1

download datasets

   to get all the transfer tasks datasets, run (in data/downstream/):
./get_transfer_data.bash

   this will automatically download and preprocess the downstream
   datasets, and store them in data/downstream (warning: for macos users,
   you may have to use p7zip instead of unzip). the probing tasks are
   already in data/probing by default.

how to use senteval: examples

examples/bow.py

   in examples/bow.py, we evaluate the quality of the average of word
   embeddings.

   to download state-of-the-art fasttext embeddings:
curl -lo glove.840b.300d.zip http://nlp.stanford.edu/data/glove.840b.300d.zip
curl -lo crawl-300d-2m.vec.zip https://s3-us-west-1.amazonaws.com/fasttext-vecto
rs/crawl-300d-2m.vec.zip

   to reproduce the results for bag-of-vectors, run (in examples/):
python bow.py

   as required by senteval, this script implements two functions: prepare
   (optional) and batcher (required) that turn text sentences into
   sentence embeddings. then senteval takes care of the evaluation on the
   transfer tasks using the embeddings as features.

examples/infersent.py

   to get the [114]infersent model and reproduce our results, download our
   best models and run infersent.py (in examples/):
curl -lo examples/infersent1.pkl https://dl.fbaipublicfiles.com/senteval/inferse
nt/infersent1.pkl
curl -lo examples/infersent2.pkl https://dl.fbaipublicfiles.com/senteval/inferse
nt/infersent2.pkl

examples/skipthought.py - examples/gensen.py - examples/googleuse.py

   we also provide example scripts for three other encoders:
     * [115]skipthought with layer-id172 in theano
     * [116]gensen encoder in pytorch
     * [117]google encoder in tensorflow

   note that for skipthought and gensen, following the steps of the
   associated githubs is necessary. the google encoder script should work
   as-is.

how to use senteval

   to evaluate your sentence embeddings, senteval requires that you
   implement two functions:
    1. prepare (sees the whole dataset of each task and can thus construct
       the word vocabulary, the dictionary of word vectors etc)
    2. batcher (transforms a batch of text sentences into sentence
       embeddings)

1.) prepare(params, samples) (optional)

   batcher only sees one batch at a time while the samples argument of
   prepare contains all the sentences of a task.
prepare(params, samples)

     * params: senteval parameters.
     * samples: list of all sentences from the tranfer task.
     * output: no output. arguments stored in "params" can further be used
       by batcher.

   example: in bow.py, prepare is is used to build the vocabulary of words
   and construct the "params.word_vect* dictionary of word vectors.

2.) batcher(params, batch)

batcher(params, batch)

     * params: senteval parameters.
     * batch: numpy array of text sentences (of size params.batch_size)
     * output: numpy array of sentence embeddings (of size
       params.batch_size)

   example: in bow.py, batcher is used to compute the mean of the word
   vectors for each sentence in the batch using params.word_vec. use your
   own encoder in that function to encode sentences.

3.) evaluation on transfer tasks

   after having implemented the batch and prepare function for your own
   sentence encoder,
    1. to perform the actual evaluation, first import senteval and set its
       parameters:

import senteval
params = {'task_path': path_to_data, 'usepytorch': true, 'kfold': 10}

    2. (optional) set the parameters of the classifier (when applicable):

params['classifier'] = {'nhid': 0, 'optim': 'adam', 'batch_size': 64,
                                 'tenacity': 5, 'epoch_size': 4}

   you can choose nhid=0 (id28) or nhid>0 (mlp) and define
   the parameters for training.
    3. create an instance of the class se:

se = senteval.engine.se(params, batcher, prepare)

    4. define the set of transfer tasks and run the evaluation:

transfer_tasks = ['mr', 'sickentailment', 'sts14', 'stsbenchmark']
results = se.eval(transfer_tasks)

   the current list of available tasks is:
['cr', 'mr', 'mpqa', 'subj', 'sst2', 'sst5', 'trec', 'mrpc', 'snli',
'sickentailment', 'sickrelatedness', 'stsbenchmark', 'imagecaptionretrieval',
'sts12', 'sts13', 'sts14', 'sts15', 'sts16',
'length', 'wordcontent', 'depth', 'topconstituents','bigramshift', 'tense',
'subjnumber', 'objnumber', 'oddmanout', 'coordinationinversion']

senteval parameters

   global parameters of senteval:
# senteval parameters
task_path                   # path to senteval datasets (required)
seed                        # seed
usepytorch                  # use cuda-pytorch (else scikit-learn) where possibl
e
kfold                       # k-fold validation for mr/cr/sub/mpqa.

   parameters of the classifier:
nhid:                       # number of hidden units (0: id28, >0
: mlp); default nonlinearity: tanh
optim:                      # optimizer ("sgd,lr=0.1", "adam", "rmsprop" ..)
tenacity:                   # how many times dev acc does not increase before tr
aining stops
epoch_size:                 # each epoch corresponds to epoch_size pass on the t
rain set
max_epoch:                  # max number of epoches
dropout:                    # dropout for mlp

   note that to get a proxy of the results while dramatically reducing
   computation time, we suggest the prototyping config:
params = {'task_path': path_to_data, 'usepytorch': true, 'kfold': 5}
params['classifier'] = {'nhid': 0, 'optim': 'rmsprop', 'batch_size': 128,
                                 'tenacity': 3, 'epoch_size': 2}

   which will results in a 5 times speedup for classification tasks.

   to produce results that are comparable to the literature, use the
   default config:
params = {'task_path': path_to_data, 'usepytorch': true, 'kfold': 10}
params['classifier'] = {'nhid': 0, 'optim': 'adam', 'batch_size': 64,
                                 'tenacity': 5, 'epoch_size': 4}

   which takes longer but will produce better and comparable results.

   for probing tasks, we used an mlp with a sigmoid nonlinearity and and
   tuned the nhid (in [50, 100, 200]) and dropout (in [0.0, 0.1, 0.2]) on
   the dev set.

references

   please considering citing [118][1] if using this code for evaluating
   sentence embedding methods.

senteval: an evaluation toolkit for universal sentence representations

   [1] a. conneau, d. kiela, [119]senteval: an evaluation toolkit for
   universal sentence representations
@article{conneau2018senteval,
  title={senteval: an evaluation toolkit for universal sentence representations}
,
  author={conneau, alexis and kiela, douwe},
  journal={arxiv preprint arxiv:1803.05449},
  year={2018}
}

   contact: [120]aconneau@fb.com, [121]dkiela@fb.com

related work

     * [122]j. r kiros, y. zhu, r. salakhutdinov, r. s. zemel, a.
       torralba, r. urtasun, s. fidler - skipthought vectors, nips 2015
     * [123]s. arora, y. liang, t. ma - a simple but tough-to-beat
       baseline for sentence embeddings, iclr 2017
     * [124]y. adi, e. kermany, y. belinkov, o. lavi, y. goldberg -
       fine-grained analysis of sentence embeddings using auxiliary
       prediction tasks, iclr 2017
     * [125]a. conneau, d. kiela, l. barrault, h. schwenk, a. bordes -
       supervised learning of universal sentence representations from
       natural language id136 data, emnlp 2017
     * [126]s. subramanian, a. trischler, y. bengio, c. j pal - learning
       general purpose distributed sentence representations via large
       scale id72, iclr 2018
     * [127]a. nie, e. d. bennett, n. d. goodman - dissent: sentence
       representation learning from explicit discourse relations, 2018
     * [128]d. cer, y. yang, s. kong, n. hua, n. limtiaco, r. st. john, n.
       constant, m. guajardo-cespedes, s. yuan, c. tar, y. sung, b.
       strope, r. kurzweil - universal sentence encoder, 2018
     * [129]a. conneau, g. kruszewski, g. lample, l. barrault, m. baroni -
       what you can cram into a single vector: probing sentence embeddings
       for linguistic properties, acl 2018

     *    2019 github, inc.
     * [130]terms
     * [131]privacy
     * [132]security
     * [133]status
     * [134]help

     * [135]contact github
     * [136]pricing
     * [137]api
     * [138]training
     * [139]blog
     * [140]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [141]reload to refresh your
   session. you signed out in another tab or window. [142]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/facebookresearch/senteval/commits/master.atom
   3. https://github.com/facebookresearch/senteval#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/facebookresearch/senteval
  32. https://github.com/join
  33. https://github.com/login?return_to=/facebookresearch/senteval
  34. https://github.com/facebookresearch/senteval/watchers
  35. https://github.com/login?return_to=/facebookresearch/senteval
  36. https://github.com/facebookresearch/senteval/stargazers
  37. https://github.com/login?return_to=/facebookresearch/senteval
  38. https://github.com/facebookresearch/senteval/network/members
  39. https://github.com/facebookresearch
  40. https://github.com/facebookresearch/senteval
  41. https://github.com/facebookresearch/senteval
  42. https://github.com/facebookresearch/senteval/issues
  43. https://github.com/facebookresearch/senteval/pulls
  44. https://github.com/facebookresearch/senteval/projects
  45. https://github.com/facebookresearch/senteval/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/facebookresearch/senteval/commits/master
  48. https://github.com/facebookresearch/senteval/branches
  49. https://github.com/facebookresearch/senteval/releases
  50. https://github.com/facebookresearch/senteval/graphs/contributors
  51. https://github.com/facebookresearch/senteval/blob/master/license
  52. https://github.com/facebookresearch/senteval/search?l=python
  53. https://github.com/facebookresearch/senteval/search?l=shell
  54. https://github.com/facebookresearch/senteval/search?l=sed
  55. https://github.com/facebookresearch/senteval/find/master
  56. https://github.com/facebookresearch/senteval/archive/master.zip
  57. https://github.com/login?return_to=https://github.com/facebookresearch/senteval
  58. https://github.com/join?return_to=/facebookresearch/senteval
  59. https://desktop.github.com/
  60. https://desktop.github.com/
  61. https://developer.apple.com/xcode/
  62. https://visualstudio.github.com/
  63. https://github.com/douwekiela
  64. https://github.com/facebookresearch/senteval/commits?author=douwekiela
  65. https://github.com/facebookresearch/senteval/commit/6b13ac2060332842f59e84183197402f11451c94
  66. https://github.com/facebookresearch/senteval/commit/6b13ac2060332842f59e84183197402f11451c94
  67. https://github.com/facebookresearch/senteval/tree/6b13ac2060332842f59e84183197402f11451c94
  68. https://github.com/facebookresearch/senteval/tree/master/data
  69. https://github.com/facebookresearch/senteval/commit/6b13ac2060332842f59e84183197402f11451c94
  70. https://github.com/facebookresearch/senteval/tree/master/examples
  71. https://github.com/facebookresearch/senteval/commit/8a486fdfa2a2364641b290ced4d81c51f64cf175
  72. https://github.com/facebookresearch/senteval/tree/master/senteval
  73. https://github.com/facebookresearch/senteval/blob/master/.gitignore
  74. https://github.com/facebookresearch/senteval/blob/master/license
  75. https://github.com/facebookresearch/senteval/blob/master/readme.md
  76. https://github.com/facebookresearch/senteval/blob/master/setup.py
  77. https://github.com/ryankiros/layer-norm#skip-thoughts
  78. https://github.com/maluuba/gensen
  79. https://tfhub.dev/google/universal-sentence-encoder/1
  80. http://www.numpy.org/
  81. http://www.scipy.org/
  82. http://pytorch.org/
  83. http://scikit-learn.org/stable/index.html
  84. https://nlp.stanford.edu/~sidaw/home/projects:nbid166
  85. https://nlp.stanford.edu/~sidaw/home/projects:nbid166
  86. https://nlp.stanford.edu/~sidaw/home/projects:nbid166
  87. https://nlp.stanford.edu/~sidaw/home/projects:nbid166
  88. https://nlp.stanford.edu/sentiment/index.html
  89. https://nlp.stanford.edu/sentiment/index.html
  90. http://cogcomp.cs.illinois.edu/data/qa/qc/
  91. http://clic.cimec.unitn.it/composes/sick.html
  92. https://nlp.stanford.edu/projects/snli/
  93. https://aclweb.org/aclwiki/paraphrase_identification_(state_of_the_art)
  94. https://www.cs.york.ac.uk/semeval-2012/task6/
  95. http://ixa2.si.ehu.es/sts/
  96. http://alt.qcri.org/semeval2014/task10/
  97. http://alt.qcri.org/semeval2015/task2/
  98. http://alt.qcri.org/semeval2016/task1/
  99. http://ixa2.si.ehu.es/stswiki/index.php/stsbenchmark#results
 100. http://clic.cimec.unitn.it/composes/sick.html
 101. http://mscoco.org/
 102. https://arxiv.org/pdf/1705.02364.pdf
 103. https://github.com/facebookresearch/senteval/tree/master/data/probing
 104. https://github.com/facebookresearch/senteval/tree/master/data/probing
 105. https://github.com/facebookresearch/senteval/tree/master/data/probing
 106. https://github.com/facebookresearch/senteval/tree/master/data/probing
 107. https://github.com/facebookresearch/senteval/tree/master/data/probing
 108. https://github.com/facebookresearch/senteval/tree/master/data/probing
 109. https://github.com/facebookresearch/senteval/tree/master/data/probing
 110. https://github.com/facebookresearch/senteval/tree/master/data/probing
 111. https://github.com/facebookresearch/senteval/tree/master/data/probing
 112. https://github.com/facebookresearch/senteval/tree/master/data/probing
 113. https://github.com/facebookresearch/senteval/tree/master/data/probing
 114. https://www.github.com/facebookresearch/infersent
 115. https://github.com/ryankiros/layer-norm#skip-thoughts
 116. https://github.com/maluuba/gensen
 117. https://tfhub.dev/google/universal-sentence-encoder/1
 118. https://arxiv.org/abs/1803.05449
 119. https://arxiv.org/abs/1803.05449
 120. mailto:aconneau@fb.com
 121. mailto:dkiela@fb.com
 122. https://arxiv.org/abs/1506.06726
 123. https://openreview.net/pdf?id=syk00v5xx
 124. https://arxiv.org/abs/1608.04207
 125. https://arxiv.org/abs/1705.02364
 126. https://arxiv.org/abs/1804.00079
 127. https://arxiv.org/abs/1710.04334
 128. https://arxiv.org/abs/1803.11175
 129. https://arxiv.org/abs/1805.01070
 130. https://github.com/site/terms
 131. https://github.com/site/privacy
 132. https://github.com/security
 133. https://githubstatus.com/
 134. https://help.github.com/
 135. https://github.com/contact
 136. https://github.com/pricing
 137. https://developer.github.com/
 138. https://training.github.com/
 139. https://github.blog/
 140. https://github.com/about
 141. https://github.com/facebookresearch/senteval
 142. https://github.com/facebookresearch/senteval

   hidden links:
 144. https://github.com/
 145. https://github.com/facebookresearch/senteval
 146. https://github.com/facebookresearch/senteval
 147. https://github.com/facebookresearch/senteval
 148. https://help.github.com/articles/which-remote-url-should-i-use
 149. https://github.com/facebookresearch/senteval#senteval-evaluation-toolkit-for-sentence-embeddings
 150. https://github.com/facebookresearch/senteval#dependencies
 151. https://github.com/facebookresearch/senteval#transfer-tasks
 152. https://github.com/facebookresearch/senteval#downstream-tasks
 153. https://github.com/facebookresearch/senteval#probing-tasks
 154. https://github.com/facebookresearch/senteval#download-datasets
 155. https://github.com/facebookresearch/senteval#how-to-use-senteval-examples
 156. https://github.com/facebookresearch/senteval#examplesbowpy
 157. https://github.com/facebookresearch/senteval#examplesinfersentpy
 158. https://github.com/facebookresearch/senteval#examplesskipthoughtpy---examplesgensenpy---examplesgoogleusepy
 159. https://github.com/facebookresearch/senteval#how-to-use-senteval
 160. https://github.com/facebookresearch/senteval#1-prepareparams-samples-optional
 161. https://github.com/facebookresearch/senteval#2-batcherparams-batch
 162. https://github.com/facebookresearch/senteval#3-evaluation-on-transfer-tasks
 163. https://github.com/facebookresearch/senteval#senteval-parameters
 164. https://github.com/facebookresearch/senteval#references
 165. https://github.com/facebookresearch/senteval#senteval-an-evaluation-toolkit-for-universal-sentence-representations
 166. https://github.com/facebookresearch/senteval#related-work
 167. https://github.com/
