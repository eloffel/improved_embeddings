                   a short history of two-level morphology

                               lauri karttunen
                       xerox palo alto research center
                             kenneth r. beesley
                        xerox research centre europe

  abstract:

   twenty years ago morphological analysis of natural language was a
   challenge to computational linguists. simple cut-and-paste programs
   could be and were written to analyze strings in particular languages,
   but there was no general language-independent method available.
   furthermore, cut-and-paste programs for analysis were not reversible,
   they could not be used to generate words. generative phonologists of
   that time described morphological alternations by means of ordered
   rewrite rules, but it was not understood how such rules could be used
   for analysis.

   this was the situation in the spring of 1980 when kimmo koskenniemi
   came to a conference on parsing that lauri karttunen had organized at
   the university of texas at austin. also at the same conference were two
   xerox researchers from palo alto, ronald m. kaplan and martin kay. the
   four k's discovered that all of them were interested and had been
   working on the problem of morphological analysis. koskenniemi went on
   to palo alto to visit kay and kaplan at parc.

   this was the beginning of two-level morphology, the first general model
   in the history of computational linguistics for the analysis and
   generation of morphologically complex languages. the language-specific
   components, the lexicon and the rules, were combined with a runtime
   engine applicable to all languages. in this article we trace the
   development of the finite-state technology that two-level morphology is
   based on.

                                  the origins

   traditional phonological grammars, formalized in the 1960s by noam
   chomsky and morris halle [[1]chomsky and halle, 1968] , consisted of an
   ordered sequence of rewrite rules that convert abstract phonological
   representations into surface forms through a series of intermediate
   representations. such rules have the general form  x -> y / z _ w
   where x, y, z, and w can be arbitrarily complex strings or
   feature-matrices. in mathematical linguistics [[2]partee et al., 1993],
   such rules are called context-sensitive rewrite rules, and they are
   more powerful than id157 or context-free rewrite rules.

   in 1972, c. douglas johnson published his dissertation, formal aspects
   of phonological description [[3]johnson, 1972], wherein he showed that
   phonological rewrite rules are actually much less powerful than the
   notation suggests. johnson observed that while the same
   context-sensitive rule could be applied several times recursively to
   its own output, phonologists have always assumed implicitly that the
   site of application moves to the right or to the left of the string
   after each application. for example, if the rule x -> y / z _ w is used
   to rewrite the string ``uzxwv'' as ``uzywv'', any subsequent
   application of the same rule must leave the ``y'' part unchanged,
   affecting only ``uz'' or ``wv''. johnson demonstrated that the effect
   of this constraint is that the pairs of inputs and outputs of any such
   rule can be modeled by a finite-state transducer. unfortunately, this
   result was largely overlooked at the time and was rediscovered by
   ronald m. kaplan and martin kay in around 1980 [[4]kaplan and kay,
   1981,[5]kaplan and kay, 1994].

   johnson was also aware of an important mathematical property of
   finite-state transducers [[6]sch  tzenberger, 1961]: there exissts, for
   any pair of transducers applied sequentially, an equivalent single
   transducer. any cascade of rule transducers could in principle be
   composed into one transducer that maps lexical forms directly into the
   corresponding surface forms, and vice versa, without any intermediate
   representations. later, kaplan and kay had the same idea, illustrated
   in figure [7]1.

   caption: figure 1: a cascade of replace rules composed into a single
   fst

   \begin{figure} \centerline
   {\psfig{figure=twolc.chapt/composestack.eps}}\end{figure}

   these theoretical insights did not immediately lead to practical
   results. the development of a compiler for rewrite rules turned out to
   be a very complex task. it became clear that it required as a first
   step a complete implementation of basic finite-state operations such as
   union, intersection, complementation, and composition. developing a
   complete finite-state calculus was a challenge in itself on the
   computers that were available at the time.

   another reason for the slow progress may have been that there were
   persistent doubts about the practicality of the approach for
   morphological analysis. traditional phonological rewrite rules describe
   the correspondence between lexical forms and surface forms as a
   one-directional, sequential mapping from lexical forms to surface
   forms. even if it was possible to model the generation of surface forms
   efficiently by means of finite-state transducers, it was not evident
   that it would lead to an efficient analysis procedure going in the
   reverse direction, from surface forms to lexical forms.

   let us consider a simple illustration of the problem with two
   sequentially applied rewrite rules,  n ->m / _ p  and  p -> m / m _ .
   the corresponding transducers map the lexical form ``kanpat''
   unambiguously to ``kammat'', with ``kampat'' as the intermediate
   representation. however if we apply the same transducers in the other
   direction to the input ``kammat'', we get the three results shown in
   figure [8]2.

   caption: figure 2: rules mapping kammat to kanpat, kampat, kammat

   \begin{figure} \centerline
   {\psfig{figure=twolc.chapt/kanpath.eps}}\end{figure}

   the reason is that the surface form ``kammat'' has two potential
   sources on the intermediate level. the application of the
   p -> m / m _  rule maps ``kampat'' and ``kammat'' to the same surface
   form. the intermediate form ``kampat'' in turn could come either from
   ``kampat'' or from ``kanpat'' by the application of the  n -> m / _ p
   rule. the two rule transducers are unambiguous in the downward
   direction but ambiguous in the upward direction.

   this asymmetry is an inherent property of the generative approach to
   phonological description. if all the rules are deterministic and
   obligatory and the order of the rules is fixed, each lexical form
   generates only one surface form. but a surface form can typically be
   generated in more than one way, and the number of possible analyses
   grows with the number of rules that are involved. some of the analyses
   may turn out to be invalid because the putative lexical forms, say
   ``kammat'' and ``kampat'' in this case, might not exist in the
   language. but in order to look them up in the lexicon, the system must
   first complete the analysis. depending on the number of rules involved,
   a surface form could easily have dozens of potential lexical forms,
   even an infinite number in the case of certain deletion rules.

   although the generation problem had been solved by johnson, kaplan and
   kay, at least in principle, the problem of efficient morphological
   analysis in the chomsky-halle paradigm was still seen as a formidable
   challenge. as counterintuitive as it was from a psycholinguistic point
   of view, it appeared that analysis was much harder computationally than
   generation. composing all the rule transducers into a single one would
   not solve the ``overanalysis'' problem. because the resulting single
   transducer is equivalent to the original cascade, the ambiguity
   remains.

   the solution to the overanalysis problem should have been obvious: to
   formalize the lexicon itself as a finite state transducer and compose
   the lexicon with the rules. with the lexicon included in the
   composition, all the spurious ambiguities produced by the rules are
   eliminated at compile time. the runtime analysis becomes more efficient
   because the resulting single transducer contains only lexical forms
   that actually exist in the language.

   the idea of composing the lexicon and the rules together is not
   mentioned in johnson's book or in the early xerox work. although there
   obviously had to be some interface relating a lexicon component to a
   rule component, these were traditionally thought of as different types
   of objects. furthermore, rules were traditionally conceived as applying
   to individual word forms; the idea of applying them simultaneously to a
   lexicon as a whole required a new mindset and computational tools that
   were not yet available.

   the fact that finite-state networks could be used to represent both the
   inventory of valid lexical forms and the rules for mapping them to
   surface forms took a while to emerge. when it first appeared in print
   [[9]karttunen et al., 1992], it was not in connection with traditional
   rewrite rules but with an entirely different finite-state formalism
   that had been introduced in the meantime, kimmo koskenniemi's two-level
   rules [[10]koskenniemi, 1983].

                              two-level morphology

   in the spring of 1980 when kimmo koskenniemi came to the usa for a
   visit, he learned about kaplan and kay's finite-state discovery. (they
   weren't then aware of johnson's 1972 publication.) xerox had begun work
   on the finite-state algorithms, but they would prove to be many years
   in the making. koskenniemi was not convinced that efficient
   morphological analysis would ever be practical with generative rules,
   even if they were compiled into finite-state transducers. some other
   way to use finite automata might be more efficient.

   back in finland, koskenniemi invented a new way to describe
   phonological alternations in finite-state terms. instead of cascaded
   rules with intermediate stages and the computational problems they
   seemed to lead to, rules could be thought of as statements that
   directly constrain the surface realization of lexical strings. the
   rules would not be applied sequentially but in parallel. each rule
   would constrain a certain lexical/surface correspondence and the
   environment in which the correspondence was allowed, required or
   prohibited. for his 1983 dissertation, koskenniemi constructed an
   ingenious implementation of his constraint-based model that did not
   depend on a rule compiler, composition or any other finite-state
   algorithm, and he called it two-level morphology. two-level morphology
   is based on three ideas:

     * rules are symbol-to-symbol constraints that are applied in
       parallel, not sequentially like rewrite rules.
     * the constraints can refer to the lexical context, to the surface
       context, or to both contexts at the same time.
     * lexical lookup and morphological analysis are performed in tandem.

   to illustrate the first two principles we can turn back to the kanpat
   example again. a two-level description of the lexical-surface relation
   is sketched in figure [11]3.

   caption: figure 3: example of two-level constraints

   \begin{figure} \centerline
   {\psfig{figure=twolc.chapt/kanpat2l.eps}}\end{figure}

   as the lines indicate, each symbol in the lexical string ``kanpat'' is
   paired with its realization in the surface string ``kammat''. two of
   the symbol pairs in figure [12]3 are constrained by the context marked
   by the associated box. the n:m pair is restricted to the environment
   having an immediately following p on the lexical side. in fact the
   constraint is tighter. in this context, all other possible realizations
   of a lexical n are prohibited. similarly, the p:m pair requires the
   preceding surface m, and no other realization of p is allowed here. the
   two constraints are independent of each other. acting in parallel, they
   have the same effect as the cascade of the two replace rules in
   figure [13]2.

   two-level rules may refer to both sides of the context at the same
   time. the y $\sim $ ie alternation in english plural nouns could be
   described by two rules: one realizes y as i in front of an epenthetic
   e; the other inserts an epenthetic e between a lexical consonant-y
   sequence and a morpheme boundary (+) that is followed by an s.
   figure [14]4 illustrates the y:i and 0:e constraints.

   caption: figure 4: a two-level view of y $\sim $ ie alternation in
   english

   \begin{figure} \centerline
   {\psfig{figure=twolc.chapt/spies.eps}}\end{figure}

   note that the e in figure [15]4 is paired with a 0 (= zero) on the
   lexical level. from the point of view of two-level rules, zero is a
   symbol like any other; it can be used to constrain the realization of
   other symbols. in fact, all the other rules must ``know'' where zeros
   may occur. in two-level rules, zeros are not epsilons, even though they
   are treated as such when two-level rules are applied to strings.

   like replace rules, two-level rules describe regular relations; but
   there is an important difference. because the zeros in two-level rules
   are in fact ordinary symbols, a two-level rule represents an
   equal-length relation. this has an important consequence: although
   transducers cannot in general be intersected, koskenniemi's constraint
   transducers can be intersected. in fact, the apply function that maps
   the surface strings to lexical strings, or vice versa, using a set of
   two-level rules in parallel, simulates the intersection of the rule
   automata. it also simulates, at the same time, the composition of the
   input string with the constraint networks, just like the ordinary apply
   function.

   figure [16]5 illustrates the application of the n:m and p:m rules
   sketched in figure [17]3 to the input ``kammat''. at each point in the
   process, all lexical candidates corresponding to the current surface
   symbol are considered one by one. if both rules accept the pair, the
   process moves on to the next point in the input. in the situation shown
   in figure [18]5, the pair p:m will be accepted by both rules. the n:m
   rule accepts the pair because the p on the lexical side is required to
   license the n:m pair that has tentatively been accepted at the previous
   step. the p:m rule accepts the p:m pair because the preceding pair has
   an m on the surface side.

   caption: figure 5: parallel application

   \begin{figure} \centerline
   {\psfig{figure=twolc.chapt/apply2l.eps}}\end{figure}

   when the pair in question has been accepted, the apply routine moves on
   to consider the next input symbol and eventually comes back to the
   point shown in figure [19]5 to consider other possible lexical
   counterparts of a surface m. they will all be rejected by the n:m rule,
   and the apply routine will return to the previous m in the input to
   consider other alternative lexical counterparts for it such as p and m.
   at every point in the input the apply routine must also consider all
   possible deletions, that is, pairs such as +:0 and e:0 that have a zero
   on the input side.

   applying the rules in parallel does not in itself solve the
   overanalysis problem discussed in the previous section. the two
   constraints sketched above allow ``kammat'' to be analyzed as
   ``kanpat'', ``kampat'', or ``kammat''. however, the problem is easy to
   manage in a system that has only two levels. the possible upper-side
   symbols are constrained at each step by consulting the lexicon. in
   koskenniemi's two-level system, lexical lookup and the analysis of the
   surface form are performed in tandem. in order to arrive at the point
   shown in figure [20]5, we must have traversed a path in the lexicon
   that contains the lexical string in question, see figure [21]6. the
   lexicon acts as a continuous lexical filter. the analysis routine only
   considers symbol pairs whose lexical side matches one of the outgoing
   arcs in the current state.

   caption: figure 6: a path in the lexicon

   \begin{figure} \centerline
   {\psfig{figure=twolc.chapt/lextree.eps}}\end{figure}

   in koskenniemi's 1983 system, the lexicon was represented as a forest
   of tries (= letter trees), tied together by continuation-class links
   from leaves of one tree to roots of another tree or trees in the
   forest.[22]^1 koskenniemi's lexicon can be thought of as a partially
   deterministic, unminimized simple network. in the xerox lexc tool, the
   lexicon is a minimized network, typically a transducer, but the
   filtering principle is the same. the lookup utility in lexc matches the
   lexical string proposed by the rules directly against the lower side of
   the lexicon. it does not pursue analyses that have no matching lexical
   path. furthermore, the lexicon may be composed with the rules in lexc
   to produce a single transducer that maps surface forms directly to
   lexical forms, and vice versa .

   koskenniemi's two-level morphology was the first practical general
   model in the history of computational linguistics for the analysis of
   morphologically complex languages. the language-specific components,
   the rules and the lexicon, were combined with a universal runtime
   engine applicable to all languages. the original implementation was
   primarily intended for analysis, but the model was in principle
   bidirectional and could be used for generation.

                               linguistic issues

   although the two-level approach to morphological analysis was quickly
   accepted as a useful practical method, the linguistic insight behind it
   was not picked up by mainstream linguists. the idea of rules as
   parallel constraints between a lexical symbol and its surface
   counterpart was not taken seriously at the time outside the circle of
   computational linguists. many arguments had been advanced in the
   literature to show that phonological alternations could not be
   described or explained adequately without sequential rewrite rules. it
   went largely unnoticed that two-level rules could have the same effect
   as ordered rewrite rules because two-level rules allow the realization
   of a lexical symbol to be constrained either by the lexical side or by
   the surface side. the standard arguments for rule ordering were based
   on the a priori assumption that a rule can refer only to the input
   context.

   but the world has changed. current phonologists, writing in the
   framework of ot (optimality theory), are sharply critical of the
   ``serialist'' tradition of ordered rewrite rules that johnson, kaplan
   and kay wanted to formalize [[23]prince and smolensky, 1993,[24]kager,
   1999,[25]mccarthy, 2002].[26]^2in a nutshell, ot is a two-level theory
   with ranked parallel constraints. in contrast to koskenniemi's ``hard''
   constraints, optimality constraints are ``soft'' and violable. there
   are of course many other differences. most importantly, ot constraints
   are meant to be universal. the fact that two-level rules can describe
   orthographic idiosyncrasies such as the y $\sim $ ie alternation in
   english with no help from universal principles makes the approach
   uninteresting from the ot point of view.[27]^3

                            two-level rule compilers

   in his 1983 dissertation, koskenniemi defined a formalism for two-level
   rules. the n:m and p:m rules discussed above are written as
   n:m <=> _ p: and p:m <=> :m _ , where <=> is an operator that combines
   a context restriction with the prohibition of any other realization for
   the lexical symbol of the pair. the colon in the right context of first
   rule, p:, indicates that it refers to a lexical symbol; the colon in
   the left context of the second rule, :m, indicates a surface symbol.
   the i:y rule sketched in figure [28]4 that refers to both contexts is
   formally expressed as y:i <=> _ 0:e.

   the semantics of two-level rules were well-defined but there was no
   rule compiler available at the time. koskenniemi and other early
   practitioners of two-level morphology had to compile their rules by
   hand into finite-state transducers. this is tedious in the extreme and
   demands a detailed understanding of transducers and rule semantics that
   few human beings can be expected to grasp. a complex rule with multiple
   overlapping contexts may take hours of concentrated effort to compile
   and test, even for an expert human ``compiler''. in practice, linguists
   using two-level morphology consciously or unconsciously tended to
   postulate rather surfacy lexical strings, which kept the two-level
   rules relatively simple.

   although two-level rules are formally quite different from the rewrite
   rules studied by kaplan and kay, the basic finite-state methods that
   had been developed for compiling rewrite-rules were applicable to
   two-level rules as well. in both formalisms, the most difficult case is
   a rule where the symbol that is replaced or constrained appears also in
   the context part of the rule. this problem kaplan and kay had already
   solved with an ingenious technique for introducing and then eliminating
   auxiliary symbols to mark context boundaries. kaplan and koskenniemi
   worked out the basic compilation algorithm for two-level rules in the
   summer of 1985 when koskenniemi was a visitor at stanford. the first
   two-level rule compiler was written in interlisp by koskenniemi and
   karttunen in 1985-87 using kaplan's implementation of the finite-state
   calculus [[29]koskenniemi, 1986,[30]karttunen et al., 1987]. the
   current c-version of the compiler, based on karttunen's 1989 common
   lisp implementation, was written by lauri karttunen, todd yampol and
   kenneth r. beesley in consultation with kaplan at xerox parc in
   1991-92 [[31]karttunen and beesley, 1992]. the landmark 1994 article by
   kaplan and kay on the mathematical foundations of finite-state
   linguistics gives a compilation algorithm for phonological rewrite
   rules and for koskenniemi's two-level rules.[32]^4

   the xerox two-level compiler has been used to compile large-scale
   morphological analyzers for french, english, spanish, portuguese,
   dutch, italian and many other languages. in the course of this work, it
   soon became evident that the two-level formalism was difficult for the
   linguists to master. it is far too easy to write rules that are in
   conflict with one another. it was necessary to make the compiler check
   for, and automatically eliminate, most common types of conflicts.

   for example, in finnish consonant gradation, an intervocalic k
   generally disappears in the weak grade. however, between two high
   labial vowels k is realized as a v. consequently, the genitive of
   ``maku'' 'taste' is ``maun'', but the genitive of ``puku'' 'suit,
   dress' is ``puvun''. the problem is that the k in ``puku'' is also an
   instance of an intervocalic k, and it should be deleted by the general
   rule. figure [33]7 illustrates the conflict.

   caption: figure 7: conflict between a general and a specific rule

   \begin{figure} \centerline
   {\psfig{figure=twolc.chapt/overlap.eps}}\end{figure}

   this situation is not a problem for a derivational phonologist because
   the rule that turns k into v in the more specific context can be
   ordered before the deletion rule that applies in the more general
   environment. this is known as disjunctive ordering. in optimality
   theory, cases of this sort are handled by constraint ranking. in a
   two-level framework, there is seemingly a problem. if one constraint
   requires the genitive of ``puku'' to be realized as ``puun'' and
   another accepts only ``puvun'', the result is that ``puku'' cannot be
   realized in the genitive at all.

   this is one of the many types of conflicts that the xerox compiler
   detects and resolves without difficulty. it sees that the context of
   the k:v rule is subsumed by the context of the k:0 rule. the conflict
   is resolved by compiling the more general rule in such a way that an
   intervocalic k can be either deleted or realized as v. the compiler
   takes advantage of underspecification, a very useful option in a
   declarative system of constraints. the general rule relies on the
   specific one to produce the correct result. in the two-level model, it
   is not the responsibility of any single rule to get everything right
   because the other rules will also have their say.

                           two-level implementations

   the first implementation [[34]koskenniemi, 1983] was quickly followed
   by others. the most influential implementation was by lauri karttunen
   and his students at the university of texas [[35]karttunen,
   1983,[36]gajek et al., 1983,[37]dalrymple et al., 1983]. published
   accounts of this project inspired many copies and variations, including
   those by beesley [[38]beesley, 1989,[39]beesley, 1990]. a copyrighted
   but freely distributed implementation of classic two-level morphology,
   called pc-kimmo, available from the summer institute of
   linguistics [[40]antworth, 1990]; runs on pcs, macs and unix systems.

   in europe, two-level morphological analyzers became a standard
   component in several large systems for natural language processing such
   as the british alvey project [[41]black et al., 1987,[42]ritchie et
   al., 1987,[43]ritchie et al., 1992], sri's cle core language engine
   [[44]carter, 1995], the alep natural language engineering platform
   [[45]pulman, 1991] and the multext project [[46]armstrong, 1996]. alep
   and multext were funded by the european commission. the mmorph
   morphology tool [[47]petitpierre and russel, 1995] built at issco for
   multext is now available under gnu public license.[48]^5

   some of these systems were implemented in lisp (alvey), some in prolog
   (cle, alep), some in c (mmorph). they were based on simplified
   two-level rules, the so-called partition-based formalism [[49]ruessink,
   1989], which was claimed to be easier for linguists to learn than the
   original koskenniemi notation. but none of these systems had a
   finite-state rule compiler. another difference is that morphological
   parsing could be constrained by feature unification. because the rules
   are interpreted at runtime and because of the unification overhead,
   these systems are not very efficient, and two-level morphology
   acquired, undeservedly, a reputation for being ``slow''. mmorph solves
   the speed problem by allowing the user to run the morphology tool
   off-line to produce a database of fully inflected word forms and their
   lemmas. a compilation algorithm has been developed for the
   partition-based formalism [[50]griid113y-evans et al., 1996], but to our
   knowledge there is no publicly available compiler for it.

                              lexical transducers

   the pioneers of finite-state morphology knew well that a cascade of
   transducers compiled from phonological rewrite rules could be composed
   into a single one (see figure [51]1). it was also known from the
   beginning that a set of two-level transducers could be merged into a
   single one [[52]karttunen, 1983,[53]koskenniemi, 1983] by intersecting
   them, as in figure [54]8.

   caption: figure 8: a set of two-level rules intersected into a single
   fst

   \begin{figure} \centerline
   {\psfig{figure=twolc.chapt/intersect.eps}}\end{figure}

   the problem is that in both cases the resulting single transducer is
   typically huge compared to the sizes of the original rule networks.
   composition and intersection are exponential in the worst case. that
   is, the number of states in the resulting network may the product of
   the sizes of the operands. although the worst case is purely
   theoretical, in practice it turned out that intersecting large
   two-level rule systems was either impossible or impractical on the
   computers available in the early 90s.

   it was at that time that the researchers at xerox [[55]karttunen et
   al., 1992] realized what should have been obvious to them much earlier.
   the intersection of two-level rules blows up because it constrains the
   realization of all the strings in the universal language. but in fact
   we are typically interested only in the strings of a particular
   language. if the lexicon is composed with the rules, it filters out all
   the spurious strings. this method had not been tried earlier because it
   seemed that the composition of a large lexicon with a large rule system
   would result in something even larger. it soon became evident that the
   result of composing a source lexicon with an intersected two-level rule
   system was never significantly larger than the original source lexicon,
   and typically much smaller than the intersection of the rules by
   themselves. figure [56]9 illustrates this interesting phenomenon.

   caption: figure 9: intersecting and composing two-level rules with a
   lexicon

   \begin{figure} \centerline
   {\psfig{figure=twolc.chapt/lexcompose.eps}}\end{figure}

   the resulting single lexical transducer contains all the lexical forms
   of the source lexicon and all of their proper surface realizations as
   determined by the rules. the construction of a special intersecting
   composition algorithm made it possible to carry out the construction
   even in cases where the rules could not be intersected by themselves.

   including the lexicon at compile time obviously brings the same benefit
   in the case of a cascade of rewrite rules. the result does not grow
   significantly if the composition is done ``top-down'', starting with
   the lexicon and the first rule of the cascade.

                                   the future

   a considerable amount of work has been done, and continues to be done,
   in the general framework of two-level morphology. however, at xerox the
   newer xfst tool that includes an extended regular expression compiler
   with replace rules has largely supplanted twolc rules in many
   applications.

   if the lexical forms are very different from the corresponding surface
   forms, it appears that for most ``language engineers'' a cascade of
   replace rules is conceptually easier to master than an equvalent set of
   two-level rules. the ordering of the rules seems to be less of a
   problem than the mental discipline required to avoid rule conflicts in
   a two-level system, even if the compiler automatically resolves most of
   them. from a formal point of view there is no substantive difference; a
   cascade of rewrite rules and a set of parallel two-level constraints
   are just two different ways to decompose a complex regular relation
   into a set of simpler relations that are easier to understand and
   manipulate.

   when two-level rules were introduced, the received wisdom was that
   morphological alternations should be described by a cascade of
   rewrite-rules. practitioners of two-level morphology used to write
   papers pointing out that a two-level account of certain phenomena was
   no less adquate than a serialist description [[57]karttunen, 1993]. it
   is interesting to note how linguistic fashions have changed.

   from the current point of view, two-level rules have many interesting
   properties. they are symbol-to-symbol constraints, not string-to-string
   relations like general rewrite rules. two-level rules make it possible
   to directly constrain deletion and epenthesis sites because the zero is
   an ordinary symbol. two-level rules enable the linguist to refer to the
   input and the output context in the same constraint. the only
   anachronistic feature is that two-level constraints are inviolable.
   perhaps we will see in the future a new finite-state formalism with
   weighted and violable two-level constraints.

   all the systems that have been used for the description of
   morphological alternations, rewrite rules, two-level rules, and
   optimality constraints are unidirectional. they have a generative
   orientation, viewing surface forms as a realization of the
   corresponding lexical forms, not the other way around. in the two-level
   formalism, the left-arrow part of a rule such as n:m <=> _ p:
   constrains the realization of a lexical n, not the interpretation of a
   surface m. this is an arbitrary choice, it would be easy to have
   another operator just like <=> but oriented in the other direction,
   constraining the potential lexical sources of a surface m. in fact,
   both types of rules could co-exist within the same bidirectional
   two-level rule system. this is an interesting possibility, especially
   for weighted constraints.

bibliography

   antworth, 1990
          antworth, e. l. (1990).
          pc-kimmo: a two-level processor for morphological analysis.
          number 16 in occasional publications in academic computing.
          summer institute of linguistics, dallas.
   armstrong, 1996
          armstrong, s. (1996).
          multext: multilingual text tools and corpora.
          in feldweg, h. and hinrichs, e. w., editors, lexikon und text,
          pages 107-112. max niemeyer verlag, tuebingen.
   beesley, 1989
          beesley, k. r. (1989).
          computer analysis of arabic morphology: a two-level approach
          with detours.
          in third annual symposium on arabic linguistics, salt lake city.
          university of utah.
          published as beesley, 1991.
   beesley, 1990
          beesley, k. r. (1990).
          finite-state description of arabic morphology.
          in proceedings of the second cambridge conference on bilingual
          computing in arabic and english.
          no pagination.
   black et al., 1987
          black, a., ritchie, g., pulman, s., and russell, g. (1987).
          formalisms for morphographemic description.
          in proceedings of the third conference of the european chapter
          of the association for computational linguistics, pages 11-18.
   carter, 1995
          carter, d. (1995).
          rapid development of morphological descriptions for full
          language processing systems.
          in proceedings of the seventh conference of the european chapter
          of the association for computational linguistics, pages 202-209.
   chomsky and halle, 1968
          chomsky, n. and halle, m. (1968).
          the sound pattern of english.
          harper and row, new york.
   dalrymple et al., 1983
          dalrymple, m., doron, e., goggin, j., goodman, b., and mccarthy,
          j., editors (1983).
          texas linguistic forum, vol. 22.
          department of linguistics, the university of texas at austin,
          austin, tx.
   eisner, 1997
          eisner, j. (1997).
          efficient generation in primitive optimality theory.
          in proceedings of the 35th annual acl and 8th eacl, pages
          313-320, madrid. association for computational linguistics.
   frank and satta, 1998
          frank, r. and satta, g. (1998).
          optimality theory and the generative complexity of constraint
          violability.
          computational linguistics, 24(2):307-316.
   gajek et al., 1983
          gajek, o., beck, h. t., elder, d., and whittemore, g. (1983).
          lisp implementation.
          in dalrymple, m., doron, e., goggin, j., goodman, b., and
          mccarthy, j., editors, texas linguistic forum, vol. 22, pages
          187-202. department of linguistics, the university of texas at
          austin, austin, tx.
   griid113y-evans et al., 1996
          griid113y-evans, e., kiraz, g. a., and pulman, s. g. (1996).
          compiling a partition-based two-level formalism.
          in coling'96, copenhagen.
          cmp-lg/9605001.
   johnson, 1972
          johnson, c. d. (1972).
          formal aspects of phonological description.
          mouton, the hague.
   kager, 1999
          kager, r. (1999).
          optimality theory.
          cambridge university press, cambridge, england.
   kaplan and kay, 1981
          kaplan, r. m. and kay, m. (1981).
          phonological rules and finite-state transducers.
          in linguistic society of america meeting handbook, fifty-sixth
          annual meeting, new york.
          abstract.
   kaplan and kay, 1994
          kaplan, r. m. and kay, m. (1994).
          regular models of phonological rule systems.
          computational linguistics, 20(3):331-378.
   karttunen, 1983
          karttunen, l. (1983).
          kimmo: a general morphological processor.
          in dalrymple, m., doron, e., goggin, j., goodman, b., and
          mccarthy, j., editors, texas linguistic forum, vol. 22, pages
          165-186. department of linguistics, the university of texas at
          austin, austin, tx.
   karttunen, 1993
          karttunen, l. (1993).
          finite-state constraints.
          in goldsmith, j., editor, the last phonological rule. university
          of chicago press, chicago, illinois.
   karttunen, 1995
          karttunen, l. (1995).
          the replace operator.
          in acl'95, cambridge, ma.
          cmp-lg/9504032.
   karttunen, 1996
          karttunen, l. (1996).
          directed replacement.
          in acl'96, santa cruz, ca.
          cmp-lg/9606029.
   karttunen, 1998
          karttunen, l. (1998).
          the proper treatment of optimality in computational phonology.
          in id122nlp'98. international workshop on finite-state methods in
          natural language processing, bilkent university, ankara, turkey.
          cmp-lg/9804002.
   karttunen and beesley, 1992
          karttunen, l. and beesley, k. r. (1992).
          two-level rule compiler.
          technical report istl-92-2, xerox palo alto research center,
          palo alto, ca.
   karttunen et al., 1992
          karttunen, l., kaplan, r. m., and zaenen, a. (1992).
          two-level morphology with composition.
          in coling'92, pages 141-148, nantes, france.
   karttunen et al., 1987
          karttunen, l., koskenniemi, k., and kaplan, r. m. (1987).
          a compiler for two-level phonological rules.
          in dalrymple, m., kaplan, r., karttunen, l., koskenniemi, k.,
          shaio, s., and wescoat, m., editors, tools for morphological
          analysis, volume 87-108 of csli reports, pages 1-61. center for
          the study of language and information, stanford university, palo
          alto, ca.
   karttunen et al., 1981
          karttunen, l., uszkoreit, h., and root, r. (1981).
          morphological analysis of finnish by computer.
          in proceedings of the 71st annual meeting of sass. albuquerque,
          new mexico.
   kempe and karttunen, 1996
          kempe, a. and karttunen, l. (1996).
          parallel replacement in finite-state calculus.
          in coling'96, copenhagen.
          cmp-lg/9607007.
   koskenniemi, 1983
          koskenniemi, k. (1983).
          two-level morphology: a general computational model for
          word-form recognition and production.
          publication 11, university of helsinki, department of general
          linguistics, helsinki.
   koskenniemi, 1986
          koskenniemi, k. (1986).
          compilation of automata from morphological two-level rules.
          in karlsson, f., editor, papers from the fifth scandinavian
          conference on computational linguistics, pages 143-149.
   mccarthy, 2002
          mccarthy, j. j. (2002).
          the foundations of optimality theory.
          cambridge university press, cambridge, england.
   partee et al., 1993
          partee, b. h., ter meulen, a., and wall, r. e. (1993).
          mathematical methods in linguistics.
          kluwer, dordrecht.
   petitpierre and russel, 1995
          petitpierre, d. and russel, g. (1995).
          mmorph -- the multext morphology program.
          technical report, caid8, switzerland.
          multext deliverable 2.3.1.
   prince and smolensky, 1993
          prince, a. and smolensky, p. (1993).
          optimality theory: constraint interaction in generative grammar.
          technical report, rutgers university, piscataway, nj.
          ruccs technical report 2. rutgers center for cognitive science.
   pulman, 1991
          pulman, s. (1991).
          two level morphology.
          in alshawi, h., arnold, d., backofen, r., carter, d., lindop,
          j., netter, k., pulman, s., tsujii, j., and uskoreit, h.,
          editors, et6/1 rule formalism and virtual machine design study,
          chapter 5. cec, luxembourg.
   ritchie et al., 1987
          ritchie, g., black, a., pulman, s., and russell, g. (1987).
          the edinburgh/cambridge morphological analyser and dictionary
          system (version 3.0) user manual.
          technical report software paper no. 10, department of artificial
          intelligence, university of edinburgh.
   ritchie et al., 1992
          ritchie, g., russell, g., black, a., and pulman, s. (1992).
          computational morphology: practical mechanisms for the english
          lexicon.
          mit press, cambridge, mass.
   ruessink, 1989
          ruessink, h. (1989).
          two level formalisms.
          in utrecht working papers in nlp, volume 5.
   sch  tzenberger, 1961
          sch  tzenberger, m.-p. (1961).
          a remark on finite transducers.
          information and control, 4:185-196.

                            about this document ...

   a short history of two-level morphology

   this document was generated using the [58]latex2html translator version
   99.1 release (march 30, 1999)

   copyright    1993, 1994, 1995, 1996, [59]nikos drakos, computer based
   learning unit, university of leeds.
   copyright    1997, 1998, 1999, [60]ross moore, mathematics department,
   macquarie university, sydney.

   the command line arguments were:
   latex2html -split 0 -no_navigation helsinki.tex

   the translation was initiated by lauri karttunen on 2001-08-12
     __________________________________________________________________

    footnotes

   ... forest.[61]^1
          the texfin analyzer developed at the university of texas at
          austin [[62]karttunen et al., 1981] had the same lexicon
          architecture.

   ...prince+smolensky:1993,kager:1999,mccarthy:2002.[63]^2
          the term serial, a pejorative term in an ot context, refers to
          sequential rule application.

   ... view.[64]^3
          finite-state approaches to optimality theory have been explored
          in several recent articles [[65]eisner, 1997,[66]frank and
          satta, 1998,[67]karttunen, 1998].

   ... rules.[68]^4
          the kaplan and kay article appeared many years after the work on
          the two-level compiler was completed but before the
          implementation of the so-called replace rules in the current
          xerox regular expression compiler. the article is accurate on
          the former topic, but the compilation algorithm for replace
          rules [[69]karttunen, 1995,[70]karttunen, 1996,[71]kempe and
          karttunen, 1996] differs in many respects from the method
          described by kaplan and kay.

   ... license.[72]^5
          http://packages.debian.org/stable/misc/mmorph.html
     __________________________________________________________________


    lauri karttunen
    2001-08-12

references

   1. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#chomsky+halle:1968
   2. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#partee+termeulen+wall:1993
   3. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#johnson:1972
   4. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#kaplan+kay:1981
   5. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#kaplan+kay:1994
   6. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#schuetzenberger:1961
   7. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#d2
   8. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#figkanpat3
   9. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#karttunen+kaplan+zaenen:1992
  10. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#koskenniemi:1983
  11. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#kanpat2l
  12. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#kanpat2l
  13. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#figkanpat3
  14. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#spies
  15. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#spies
  16. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#apply2l
  17. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#kanpat2l
  18. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#apply2l
  19. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#apply2l
  20. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#apply2l
  21. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#lextree
  22. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/#foot519
  23. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#prince+smolensky:1993
  24. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#kager:1999
  25. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#mccarthy:2002
  26. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/#foot520
  27. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/#foot521
  28. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#spies
  29. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#koskenniemi:1986
  30. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#karttunen+koskenniemi+kaplan:1987
  31. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#karttunen+beesley:1992
  32. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/#foot522
  33. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#overlap
  34. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#koskenniemi:1983
  35. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#karttunen:1983
  36. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#gajek:1983
  37. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#dalrympleetal:1983
  38. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#beesley:1989
  39. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#beesley:1990
  40. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#antworth:1990
  41. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#black+etal:1987
  42. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#ritchie87
  43. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#ritchie92
  44. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#carter:1995
  45. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#pulman:1991
  46. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#armstrong:1996
  47. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#petitpierre+russel:1995
  48. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/#foot524
  49. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#ruessink:1989
  50. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#griid113y-evans+kiraz+pullman:1996
  51. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#d2
  52. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#karttunen:1983
  53. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#koskenniemi:1983
  54. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#intersect
  55. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#karttunen+kaplan+zaenen:1992
  56. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#lexcompose
  57. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#karttunen:1993a
  58. http://www-dsed.llnl.gov/files/programs/unix/latex2html/manual/
  59. http://cbl.leeds.ac.uk/nikos/personal.html
  60. http://www.maths.mq.edu.au/~ross/
  61. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#tex2html7
  62. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#karttunen:1981
  63. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#tex2html8
  64. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#tex2html9
  65. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#eisner:1997
  66. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#frank+satta:1998
  67. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#karttunen:1998
  68. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#tex2html10
  69. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#karttunen:1995
  70. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#karttunen:1996
  71. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#kempe+karttunen:1996
  72. http://www.ling.helsinki.fi/~koskenni/esslli-2001-karttunen/helsinki.html#tex2html12
