   #[1]palmstr  m - atom [2]palmstr  m - rss [3]palmstr  m - atom

[4]palmstr  m

   la   die molek  le rasen, was sie auch zusammenknobeln!
   la   das t  fteln, la   das hobeln, heilig halte die ekstasen

monday, may 7, 2012

the id198 for absolute dummies (like myself)

   if there is one highly underrated concept in philosophy today, it is
   computation. why is it so important? because computationalism is the
   new mechanism. for millennia, philosophers have struggled when they
   wanted to express or doubt that the universe can be explained in a
   mechanical way, because it is so difficult to explain what a machine
   is, and what it is not. the term computation does just this: it defines
   exactly what machines can do, and what not. if the universe/the
   mind/the brain/bunnies/god is explicable in a mechanical way, then it
   is a computer, and vice versa.
   unfortunately, most people outside of programming and computer science
   don't know exactly what computation means. many may have heard of
   turing machines, but these things tend to do more harm than good,
   because they leave strong intuitions of moving wheels and tapes,
   instead of what it really does: embodying the nature of computation.

   iframe:
   [5]https://www.youtube.com/embed/e3kelemwfhy?feature=player_embedded

   (a turing machine, doing more harm than good. but very cool,
   nonetheless!)
   the id198 does exactly the same thing, but without wheels to
   cloud your vision. it might look frighteningly mathematical from a
   distance (it has a greek letter in it, after all!), so nobody outside
   of academic computer science tends to look at it, but it is
   unbelievably easy to understand. and if you understood it, you might
   end up with a much better intuition of computation.
   the id198 has been invented at roughly the same time as the
   turing machine (mid-1930ies), by alonzo church. don't be intimidated by
   the word "calculus"! it does not have any complicated formulae or
   operations. all it ever does is taking a line of letters (or symbols),
   and performing a little cut and paste operation on it. as you will see,
   the id198 can compute everything that can be computed, just
   with a very simple cut and paste.
   a line of symbols is called an expression. it might look like
   this: (  x.xy) (ab)
   we only have the following symbols:
     * single letters (like a, b, c, d...), which are called variables. an
       expression can be a single letter, or several letters in a row.
       more generally, we can write any two or more expressions together
       to get another expression.
     * parentheses: ( ). parentheses can be used to indicate that some
       part of an expression belongs together (just as the braces around
       this part of the sentence make it belong together). where we don't
       have parentheses, we look at expressions simply from left to right.
     * the greek letter    (pronounced, of course: lambda), and the dot: .
       with    and the dot, we can write functions. a function starts
       always with the    and a variable, followed by a dot, and then comes
       an expression. the    does not have any complicated meaning: it just
       says that a function starts here. the   -variable-. part of a
       function is called its head, and the remainder (the expression) is
       called the body.

                              [6][lambda1.png]
                                 a function.

     q: what is the value or meaning of a variable?

     a: none. variables do not stand for anything. they are just empty
     names. even the name is unimportant. the only thing that matters is:
     when two variables have the same name, they are the same. you can
     rename variables all you want, without changing the expression.

     q: what does a function calculate?

     a: nothing, really. it is just a kind of expression, with a head and
     a body. it just stands there. the only thing we can do with it is to
     resolve it.

     q: why "  "?

     a: an accident, perhaps. initially, alonzo church just drew a little
     roof to mark the head variable, like this: (   xy) ab. in the typed
     manuscript, he put the roof in front of the head, so it
     became (   y.xy) ab. the typesetter turned it into (  y.xy) ab, which
     is visually close enough.

   slightly more formally, we can say: all variables are lambda terms (a
   valid expression in the id198). if x and y are lambda terms,
   then (x y) is a lambda term, and (  x.y) is a lambda term. from these
   three rules, we can construct all valid expressions. if we also agree
   to read all lambda expressions from left to right, we can omit a few of
   the parenthesis: (  y.xy) ab is the simplified version of (((  y.(x y))
   a) b).

cut & paste

   functions can be resolved if they are followed by another expression.
   the resolution works by taking the variable mentioned in the head, and
   replacing all of its occurrences within the body with the expression
   after the function. we cut the expression after the function, and paste
   it into the body, in every place indicated by the head. having done
   that, we throw the head away, because it has served its purpose:
   telling us which variable to replace.

                                         [7][lambda2.png]
       resolving a function: replacing all occurrences of  y with the
                               expression (ab)

   the resolution of functions is the only thing we can ever do in the
   id198. once we have gotten rid of all the lambdas, or if
   there are no more expressions after the remaining functions, we cannot
   replace anything any more. we can go home now.

     q: can functions contain other functions?

     a: absolutely. functions are expressions, and expressions can
     contain other expressions, so functions can be parts of the bodies
     of other functions, or be part of the replacing expression. in fact,
     we have expressions like   x.  y.xzy so often that we like to
     abbreviate them as   xy.xzy. this means that we will try to replace
     the first variable in the head (x) with the first expression after
     the body (xzy), the second variable (y) with the next one after
     that, and so on.

   the variables mentioned in the head (the one tagged for replacement)
   are called bound variables. unmentioned variables are free variables.
   because functions can be part of other functions, a variable may be
   both bound and free in the same expression.

     q: i find this a little bit confusing.

     a: think of it like this: imagine you are editing a very minimalist
     gossip newspaper. everything the newspaper writes about, ever, are
     names (we don't have articles, verbs, pronouns   just names). people
     don't want to be recognized in your paper, and you anonymize them by
     replacing all names with arbitrary pseudonyms. so, the names do not
     mean anything, but if two names in the same text are the same, they
     refer to the same person.

                            [8][newspaper.tiff]
                         minimalist lambda newspaper

     all text in the newspaper is arranged in text blocks. a text block
     is ultimately made up of nothing but names, and it may have a
     headline, but does not have to. headlines are printed in bold face,
     and consist of a single name. all occurrences of that name within
     the text belonging to the headline are famous, that is, they refer
     to that headline person. all names that are not headline material
     are ordinary. text blocks may contain other text blocks, including
     their headings (which work like sub-headings, or sub-sub-headings
     and so on). thus, a name may be ordinary in one sub-text, but in
     another, it may be made famous by the headline of that sub-text.

     this is exactly like the id198: names are variables, text
     blocks are expressions, and headlines are function heads, only
     instead of being printed in bold, they are surrounded by a    and a
     dot, so we know where they begin and end.

     the resolution operation is a simple find/replace operation. we find
     all occurrences of the bound name in a headlined text block, and
     replace each of them with the following text block. (however, note
     that replacing names by whole paragraphs etc. rarely makes sense for
     real newspapers.)

   by the way: we might run into a little problem if the replacing text
   contains names that are also mentioned in the original text that we
   merge it into. all names are anonymized pseudonyms, but we could have
   used the same pseudonym for different people in different texts. if we
   combine these texts now, we must make sure that different people are
   referred to by different pseudonyms, so perhaps we have to rename some
   of them.
   alternatively, we might insist that no two text blocks use the same
   names. (in other words: either use different variables in unrelated
   expressions, or make sure you do not forget to rename them during the
   replace operation as necessary.)

     q: what happens if a variable is bound in the head of a function,
     but does not occur in the body?

     a: the variable is bound, of course. but during replacement, the
     replacing expression will simply disappear, as there are no places
     where it could be inserted. that is ok, really: it simplifies our
     result, so what is not to like?

numbers

   with all the technicalities out of the way (yay! that was easy, wasn't
   it?), lets see what nice tricks we can do with the id198. you
   might argue that computation should be able to do things with numbers,
   so let us build some. mathematicians often like to start with natural
   numbers, and then go from there, by defining all sorts of operations
   that give us other the other number types.
   the easiest way of defining all natural numbers at once works by first
   defining the first one (which is zero), and a successor operation. by
   using the successor operation on any natural number, we get another,
   bigger natural number, and so we can derive them all by counting
   forward.
   let us express zero as:
   0 :       sz.z
   (remember: this is shorthand for   s.  z.z, and it means exactly the same
   thing as   ab.b, or   qx.x.)
   this expression has an interesting property: when resolved, it will
   throw away the first expression after it, and keep the second one
   intact. the bound variable s will be replaced by nothing (it does not
   occur in the body), and the variable z by itself.
   similary, we can use:
   1 =    sz.s(z)
   2 =    sz.s(s(z))
   3 =    sz.s(s(s(z)))
   4 =    sz.s(s(s(s(z))))
   ...
   in other words, our number notation works by nesting the expression
   s(...) around our z as often as the number says (which also means: if
   we resolve the number n, it will replicate the following expression n
   times). we can also say: we apply s n times to z.
   a nice successor function is
   s :       abc.b(abc)
   let us calculate the successor of 0 with it:
   s0 = (   abc.b(abc)) (   sz.z)
        =    bc.b((   sz.z) bc)
        =    bc.b((   z.z) c)
        =    bc.b(c)
   this last expression cannot be simplified any further (no more
   expressions follow the function body), and, surprise!   
      bc.b(c) =    sz.s(z) = 1
   in other words, the successor function, when applied to our notation of
   0, will yield the notation for 1. can we do it again?
   s1 = (   abc.b(abc)) (   sz.s(z))
        =    bc.b((   sz.s(z)) bc)
        =    bc.b((   z.b(z)) c)
        =    bc.b(b(c))
   and lo! and behold:
      bc.b(b(c)) =    sz.s(s(z)) = 2
   as we see, our successor function does exactly what it is supposed to
   do: starting from 0, it can produce any natural number. it does this by
   bracing one more s(...) part around the body of any natural number
   supplied to it. ah, the magical powers of cut and paste!

     q: this is a very strange way of writing numbers...
     a: actually, from the point of view of mathematics, this is not
     stranger than using the characters 1, 2, 3... and so on, or roman
     literals (i, ii, iii, iv, v...), or chinese ones (   ,    ,    ,    ,    ,
     ...), or  binary notation (1, 10, 11, 100, 101...). there is no true
     way of writing numbers, there are only conventions. natural numbers
     do not care about how we spell them.

addition

   adding numbers can be understood as automating the successor function.
   if we want to add 5 to the number 3, this can be interpreted as using
   the successor function five times on 3. (or the other way around,
   because 3+5 = 5+3.)
   fortunately, our way of writing numbers has this automation already
   built in. as we have pointed out above, evaluating a number n means
   that we replicate the expression after it n times. if the expression
   after it is the successor function, it will be spelled out n times, and
   if we resolve it, then the successor function will be applied n times
   to the number expression after it.
   3+5 = 3s5 = (   sz.s(s(s(z)))) (   abc.b(abc)) (   xy.x(x(x(x(x(y))))))
   if you feel playful, you may try and see that it resolves properly to
   8:    xy.x(x(x(x(x(x(x(x(y)))))))).

multiplication

   a similarly clever function yields multiplication:
   multiply :       abc.a(bc)
   this function takes two arguments, for instance like this:
   2 x 3 = multiply 2 3 :    (   abc.a(bc)) (   sz.s(s(z))) (   xy.x(x(x(y))))
        =    c.(   sz.s(s(z)))((   xy.x(x(x(y))))c)
        =    cz.((   xy.x(x(x(y))))c)(((   xy.x(x(x(y))))c)(z))
        =    cz.(   y.c(c(c(y)))) (c(c(c(z))))
        =    cz.c(c(c(c(c(c(z)))))) = 6
   why does this work? if we look closely, we see that our multiplication
   function takes its two arguments (2 and 3) and arranges them like this:
   multiply 2 3 = (   abc.a(bc)) 2 3 =    c.2(3c)
   resolving this gives us    cz.(3c)(3c(z)). this is equivalent to
   applying the second c three times to the z: c(c(c(z))), and applying
   the first c three times to that result: c(c(c( c(c(c(z))) ))). together
   with the function head    cz, it conveniently results in 6 (i.e., six
   times the application of the first argument to the second).
   the best way to get rid of any remaining bewilderment will be if you
   take a piece of paper and a pen and try a few multiplications yourself.
   you will find that you quickly get the hang of it.

counting backwards

   so far, we have only be going from smaller numbers to larger ones. for
   subtraction, we might want to have a predecessor operation, too, so we
   can count backwards. how can we build one?
   according to our earlier definition, any number is the successor of
   another one, with the exception of 0, which we just spell out
   (as    sz.z). we can use this definition and describe a predecessor as
   the number that will give us the originally given number by applying
   the successor operation.
   in common mathematicalese, we could say: y = p(x)     x = s(y)     that is,
   y is the predecessor of x if and only if x is the successor of y.
   unfortunately, this is only a specification, and not a computation. a
   specification tells us what conditions the predecessor function must
   fulfill, but not necessarily how this function works. the lambda
   calculus only does computation, that is, we must tell it exactly and in
   perfect detail how we can get from x to y.
   one possible way of doing that works by starting with 0, and applying
   the successor function x times:
   x s 0 = x (   abc.b(abc)) (   sz.z)
   the resulting expression will be the numeric value of x. if we could
   find a way to remember the state of the expression at the x   1st
   succession (one before the last application of s(...)), we would have
   the expression for x's predecessor.
   let us do this by using a pair of numbers. instead of x, let us use (y,
   y-1). then define a successor function that derives (y+1, y) from the
   pair. we start with setting y at 0, and repeat the application of the
   successor function x times, after which the pair will have the value
   (x, x-1). now select the second half of the pair, and we are done. here
   we go:
   let us write a pair (a, b) as   p.pab. the smallest possible pair
   is   p.p00, spelled out as   p.p (   sz.z) (  uv.v). we can form the
   successor pair by grabbing the first member, a, and creating a new pair
   (a+1, a) from it.
   the first member of a pair   p.pab is given by applying it to to   xy.x.
       (  p.p a b) (  xy.x)
   =  (  xy.x) a b
   =  (  y.a) b
   =  a
    (as we see,   xy.x preserves the first expression after it, but erases
   the second. likewise, the other member of the pair will be selected
   by   xy.y.)
   the new pair (a+1, a) can be obtained from a by using the successor
   function s =    abc.b(abc) on a, and stuffing s a and a into a new pair.
   next-pair pair :     (   pair z.z s (pair   xy.x) pair   xy.x)  = (a+1, a)
   (don't be confused by my use of    pair. this simply means that the pair
   (a, a-1) is going to be inserted in the body of the lambda function.)
   let us now apply this function n times to the starting pair (0, 0), and
   select the second half of the pair, which will be our final result. you
   may have noticed that i just cheated a little: (0, 0) is not totally
   the same as (0,    1), so it is not a sparkling example of a pair (a,
   a-1). however, we have no negative numbers to work with yet, and for
   our helper function next-pair, it does not make any difference, because
   it ignores the second half of the pair anyway. repeated application of
   next-pair on (0, 0) will give us (1, 0), (2, 1), (3, 2), (4, 3) and so
   on.
   p n :     (  n.n next-pair(0, 0))   xy.y
   using the predecessor function p, we can indeed count backwards within
   the natural numbers. note that once we reach 0, we will stay at 0,
   which is probably a good thing. i will leave the definition of negative
   numbers, division, powers and imaginary numbers as an exercise to the
   reader. (well, in seriousness: we could easily fill many pages with the
   recreation of the standard inventory of set and number theory, but
   won't add very much to our basic understanding.)

     q: i can see how we can do subtraction: by applying the predecessor
     operation multiple times. but every time, we have to go back to 0
     and produce all intermediate numbers with the successor operation,
     just to do a single predecessor operation. isn't this very
     inefficient?
     a: who cares! the id198 only claims to effectively compute
     everything that can be computed   but it does not promise to do it
     efficiently. (also, it is a mathematical idea, so it can run at
     infinite speed in some ephemeral mathematical universe.)

logic

   the id198 is not restricted to calculating numbers. it can
   just as easily compute logical expressions. remember the two little
   pair picker functions? we can use these as the definitions of true and
   false:
   true :       xy.x
   false :       xy.y
   boolean logic uses a few operators, like and, or and not to determine
   the value of logical expressions. we can pull this off with the lambda
   calculus, too. for instance, we can negate a true into a false, and
   a false into a true with
   not :       a.a (   bc.c) (   de.d)
   how does it work? if we write something like not true (spelled out as
   (   a.a (   bc.c) (   de.d))    xy.x), the initial     a.a will pull the
   true in front of the expression (   bc.c) (   de.d) = false true.
   remember that true is the same function we used to pick the first
   member of a pair, so true false true is the same as: pick the first one
   of the pair (false, true).
   here are and and or; if you like, find out why they work:
   and :       ab.ab (   xy.y)
   or :       ab.a (   xy.x) b

conditionals

   we cannot just compute logical values from other logical values. the
   following function tells us if a given value is equal to 0. if it is,
   we get true, and false otherwise. such a test is very useful when
   writing programs.
   is-zero :       a.a false not false
   if we apply is-zero to any value n, we get
   is-zero n = n false not false
   this will apply the function false n times to the function not, and the
   result to the remaining false. the each time, the first false (=   
   xy.y) erases the expression directly after it. eventually (after n
   times) it gets to not false, erases the not and returns the false.
   thus, the result of is-zero n is always false. (if you find this
   confusing, try an example.)
   the only exception is when n = 0. if we apply 0 to false not false, it
   will erase the first expression, and only not false = true remains:
   is-zero 0
         = (   sz.z) false not false
         = not false
         = true
   now that we know if a number is 0, we can find out if one number is
   greater than or equal to (   ) another:
   greater-or-equal n m :       n m. is-zero(n p m)
   in other words, we perform n times the predecessor function on m. if n
   is exactly the same number as m, the result will be 0, and if n is
   greater than m, the result will still be 0. only if m is greater than
   n, the result will be non-zero.
   using    , we can also determine equality: n = m, if n     m and m     n. we
   can express this directly now:
   equal n m :       n m. and (greater-or-equal(n m) greater-or-equal(m n))
         =    n m. and (is-zero(n p m) is-zero(m p n))

furthermore...

   as you see, the id198 is a (minimalist) programming language.
   as ist must be, since every possible computer program can ultimately be
   mapped into a lambda function. in fact, the venerable and powerful
   programming language lisp has been built directly on the idea of the
   id198, mainly by tweaking the syntax in useful ways,
   formalizing the creation of function macros and adding a few practical
   data types.
   our little introduction is loosely based on ra  l rojas'
   excellent [9]tutorial introduction to the id198, which also
   covers recursion and is overall slightly more technical, since it
   addresses students of computer science. also, using your new-found
   understanding, you might now go and battle your way through more
   advanced introductions, such as the one given on wikipedia.

everything that is computable

   the id198 cannot do all of mathematics, because many
   mathematical problems have no solution, and many mathematical formulas
   cannot be computed (which is not the same thing). so, which one is more
   powerful, a turing machine or the id198? as it turns out, it
   is always possible to map the inscriptions of the tape of a turing
   machine into an a lambda expression (that also includes information on
   the state and position of the read/write head), and construct a lambda
   function that changes this expression with exactly the same result as
   the corresponding turing machine.
   conversely, it is possible to map any lambda expression onto a tape,
   and construct a turing machine that performs all the necessary
   find/replace operations on it. thus, it can be proven that lambda
   calculus and turing machine have exactly the same power. in the same
   way, it can be shown that every other computer we can (or could)
   construct has the same power, too. this includes personal computers,
   super-computers, quantum computers and even iphones. the only
   differences are in practically realized memory sizes, and the number of
   steps necessary to reach a result. the insight that all computers have
   fundamentally the same power is called the "church turing thesis".
   the id198 can also be used to compute neural networks with
   arbitrary accuracy, by expressing the strengths of the connections
   between individual neurons, and the activation values of the neurons as
   numbers, and by calculating the spreading of activation through the
   network in very small time steps. technically, every realizable system
   that manipulates information is computable, and every computable system
   that can express the id198 (or something else that can
   express the id198) is a computer.
   (you can follow me on twitter: [10]https://twitter.com/plinz)
   posted by [11]unknown at [12]00:36
   [13]email this[14]blogthis![15]share to twitter[16]share to
   facebook[17]share to pinterest
   labels: [18]artificial intelligence, [19]computation, [20]lambda
   calculus

7 comments:

    1. [21]joscha bach[22]may 9, 2012 at 11:16 pm
       if this post was too elaborate for your (for instance, because you
       are a computer scientist), or you want to progress, here's a very
       condensed summary, and an extension into lisp:
       http://forums.xkcd.com/viewtopic.php?f=40&t=46449#p1827434
       reply[23]delete
       replies
            reply
    2. anonymous[24]november 12, 2012 at 3:17 pm
       you state that boolean-or is :
          ab.a (   xy.x) a
       it should actually be:
          ab.a (   xy.x) b
       reply[25]delete
       replies
         1. [26]joscha bach[27]november 12, 2012 at 3:30 pm
            thank you! (corrected now.)
            [28]delete
            replies
                 reply
            reply
    3. [29]tim pham[30]january 12, 2013 at 4:51 am
       i'm still confused as why if 0 = (lambda sz.z) then 1 would be
       (lambda sz.s(z)) ?
       reply[31]delete
       replies
         1. [32]joscha bach[33]january 12, 2013 at 11:34 am
            try to perform the resolution of the successor function
            applied to 0!
            [34]delete
            replies
                 reply
            reply
    4. [35]sheldon hearn[36]february 11, 2013 at 7:33 am
       could you clarify why it was okay to throw b away in the second
       step of calculating the successor of zero? perhaps it's the use of
       shorthand, but i can't map that example back to the cut'n'paste
       rules you described.
       reply[37]delete
       replies
         1. [38]joscha bach[39]february 12, 2013 at 5:12 am
            the b is part of the inner expression (   sz.z) bc, which is
            shorthand for (   s.   z.z) bc. we resolve the first lambda by
            replacing all occurrences of s in    z.z with b. since there
            are none, nothing is replaced with b, and we get (   z.z) c,
            which resolves to c.
            [40]delete
            replies
                 reply
            reply

   add comment
   load more...

   [41]newer post [42]older post [43]home
   subscribe to: [44]post comments (atom)

blog archive

     * [45]     [46]2016 (4)
          + [47]     [48]may (1)
          + [49]     [50]march (1)
          + [51]     [52]january (2)

     * [53]     [54]2015 (10)
          + [55]     [56]december (2)
          + [57]     [58]november (2)
          + [59]     [60]september (1)
          + [61]     [62]february (1)
          + [63]     [64]january (4)

     * [65]     [66]2014 (11)
          + [67]     [68]november (2)
          + [69]     [70]october (1)
          + [71]     [72]september (4)
          + [73]     [74]august (1)
          + [75]     [76]july (1)
          + [77]     [78]june (1)
          + [79]     [80]february (1)

     * [81]     [82]2013 (11)
          + [83]     [84]october (1)
          + [85]     [86]september (3)
          + [87]     [88]august (1)
          + [89]     [90]july (1)
          + [91]     [92]may (1)
          + [93]     [94]april (1)
          + [95]     [96]march (1)
          + [97]     [98]february (2)

     * [99]     [100]2012 (7)
          + [101]     [102]june (4)
          + [103]     [104]may (2)
               o [105]zum positionspapier der vg wort zum urheberrecht
               o [106]the id198 for absolute dummies (like
                 mys...
          + [107]     [108]april (1)

   simple theme. powered by [109]blogger.

references

   visible links
   1. http://palmstroem.blogspot.com/feeds/posts/default
   2. http://palmstroem.blogspot.com/feeds/posts/default?alt=rss
   3. http://palmstroem.blogspot.com/feeds/938631135653771283/comments/default
   4. http://palmstroem.blogspot.com/
   5. https://www.youtube.com/embed/e3kelemwfhy?feature=player_embedded
   6. http://1.bp.blogspot.com/-0hf-lqx74xg/u7euqxa-0xi/aaaaaaaadym/d-z_xbxzyzm/s1600/lambda1.png
   7. http://4.bp.blogspot.com/-5_dzoh_aqgc/u7eweegksxi/aaaaaaaadyy/o3wr5_xxbzs/s1600/lambda2.png
   8. http://4.bp.blogspot.com/-clhh-tzun24/t6p3sz_97oi/aaaaaaaab94/_vt4ynygo94/s1600/newspaper.tiff
   9. http://www.inf.fu-berlin.de/lehre/ws03/alpi/lambda.pdf
  10. https://twitter.com/plinz
  11. https://plus.google.com/109564100423483405944
  12. http://palmstroem.blogspot.com/2012/05/lambda-calculus-for-absolute-dummies.html
  13. https://www.blogger.com/share-post.g?blogid=176770731979379806&postid=938631135653771283&target=email
  14. https://www.blogger.com/share-post.g?blogid=176770731979379806&postid=938631135653771283&target=blog
  15. https://www.blogger.com/share-post.g?blogid=176770731979379806&postid=938631135653771283&target=twitter
  16. https://www.blogger.com/share-post.g?blogid=176770731979379806&postid=938631135653771283&target=facebook
  17. https://www.blogger.com/share-post.g?blogid=176770731979379806&postid=938631135653771283&target=pinterest
  18. http://palmstroem.blogspot.com/search/label/artificial intelligence
  19. http://palmstroem.blogspot.com/search/label/computation
  20. http://palmstroem.blogspot.com/search/label/id198
  21. https://www.blogger.com/profile/08974461728804933391
  22. http://palmstroem.blogspot.com/2012/05/lambda-calculus-for-absolute-dummies.html?showcomment=1336598195266#c8169016507536956484
  23. https://www.blogger.com/delete-comment.g?blogid=176770731979379806&postid=8169016507536956484
  24. http://palmstroem.blogspot.com/2012/05/lambda-calculus-for-absolute-dummies.html?showcomment=1352729853506#c7810555098102325035
  25. https://www.blogger.com/delete-comment.g?blogid=176770731979379806&postid=7810555098102325035
  26. https://www.blogger.com/profile/08974461728804933391
  27. http://palmstroem.blogspot.com/2012/05/lambda-calculus-for-absolute-dummies.html?showcomment=1352730642884#c4481223438393706647
  28. https://www.blogger.com/delete-comment.g?blogid=176770731979379806&postid=4481223438393706647
  29. https://www.blogger.com/profile/01431885064625482019
  30. http://palmstroem.blogspot.com/2012/05/lambda-calculus-for-absolute-dummies.html?showcomment=1357962703565#c7281353520915132917
  31. https://www.blogger.com/delete-comment.g?blogid=176770731979379806&postid=7281353520915132917
  32. https://www.blogger.com/profile/08974461728804933391
  33. http://palmstroem.blogspot.com/2012/05/lambda-calculus-for-absolute-dummies.html?showcomment=1357986876827#c8908074338839405102
  34. https://www.blogger.com/delete-comment.g?blogid=176770731979379806&postid=8908074338839405102
  35. https://www.blogger.com/profile/07377059190562437963
  36. http://palmstroem.blogspot.com/2012/05/lambda-calculus-for-absolute-dummies.html?showcomment=1360564389416#c1029179223015852524
  37. https://www.blogger.com/delete-comment.g?blogid=176770731979379806&postid=1029179223015852524
  38. https://www.blogger.com/profile/08974461728804933391
  39. http://palmstroem.blogspot.com/2012/05/lambda-calculus-for-absolute-dummies.html?showcomment=1360642331659#c211224591875205786
  40. https://www.blogger.com/delete-comment.g?blogid=176770731979379806&postid=211224591875205786
  41. http://palmstroem.blogspot.com/2012/05/zum-positionspapier-der-vg-wort-zum.html
  42. http://palmstroem.blogspot.com/2012/04/kostenlose-inhalte-ist-diebstahl-am.html
  43. http://palmstroem.blogspot.com/
  44. http://palmstroem.blogspot.com/feeds/938631135653771283/comments/default
  45. javascript:void(0)
  46. http://palmstroem.blogspot.com/2016/
  47. javascript:void(0)
  48. http://palmstroem.blogspot.com/2016/05/
  49. javascript:void(0)
  50. http://palmstroem.blogspot.com/2016/03/
  51. javascript:void(0)
  52. http://palmstroem.blogspot.com/2016/01/
  53. javascript:void(0)
  54. http://palmstroem.blogspot.com/2015/
  55. javascript:void(0)
  56. http://palmstroem.blogspot.com/2015/12/
  57. javascript:void(0)
  58. http://palmstroem.blogspot.com/2015/11/
  59. javascript:void(0)
  60. http://palmstroem.blogspot.com/2015/09/
  61. javascript:void(0)
  62. http://palmstroem.blogspot.com/2015/02/
  63. javascript:void(0)
  64. http://palmstroem.blogspot.com/2015/01/
  65. javascript:void(0)
  66. http://palmstroem.blogspot.com/2014/
  67. javascript:void(0)
  68. http://palmstroem.blogspot.com/2014/11/
  69. javascript:void(0)
  70. http://palmstroem.blogspot.com/2014/10/
  71. javascript:void(0)
  72. http://palmstroem.blogspot.com/2014/09/
  73. javascript:void(0)
  74. http://palmstroem.blogspot.com/2014/08/
  75. javascript:void(0)
  76. http://palmstroem.blogspot.com/2014/07/
  77. javascript:void(0)
  78. http://palmstroem.blogspot.com/2014/06/
  79. javascript:void(0)
  80. http://palmstroem.blogspot.com/2014/02/
  81. javascript:void(0)
  82. http://palmstroem.blogspot.com/2013/
  83. javascript:void(0)
  84. http://palmstroem.blogspot.com/2013/10/
  85. javascript:void(0)
  86. http://palmstroem.blogspot.com/2013/09/
  87. javascript:void(0)
  88. http://palmstroem.blogspot.com/2013/08/
  89. javascript:void(0)
  90. http://palmstroem.blogspot.com/2013/07/
  91. javascript:void(0)
  92. http://palmstroem.blogspot.com/2013/05/
  93. javascript:void(0)
  94. http://palmstroem.blogspot.com/2013/04/
  95. javascript:void(0)
  96. http://palmstroem.blogspot.com/2013/03/
  97. javascript:void(0)
  98. http://palmstroem.blogspot.com/2013/02/
  99. javascript:void(0)
 100. http://palmstroem.blogspot.com/2012/
 101. javascript:void(0)
 102. http://palmstroem.blogspot.com/2012/06/
 103. javascript:void(0)
 104. http://palmstroem.blogspot.com/2012/05/
 105. http://palmstroem.blogspot.com/2012/05/zum-positionspapier-der-vg-wort-zum.html
 106. http://palmstroem.blogspot.com/2012/05/lambda-calculus-for-absolute-dummies.html
 107. javascript:void(0)
 108. http://palmstroem.blogspot.com/2012/04/
 109. https://www.blogger.com/

   hidden links:
 111. https://www.blogger.com/post-edit.g?blogid=176770731979379806&postid=938631135653771283&from=pencil
 112. https://www.blogger.com/comment-iframe.g?blogid=176770731979379806&postid=938631135653771283
 113. http://www.blogger.com/rearrange?blogid=176770731979379806&widgettype=blogarchive&widgetid=blogarchive1&action=editwidget&sectionid=footer-1
 114. http://www.blogger.com/rearrange?blogid=176770731979379806&widgettype=attribution&widgetid=attribution1&action=editwidget&sectionid=footer-3
