   #[1]github [2]recent commits to visdom:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]169
     * [35]star [36]5,818
     * [37]fork [38]698

[39]facebookresearch/[40]visdom

   [41]code [42]issues 36 [43]pull requests 3 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   a flexible tool for creating, organizing, and sharing visualizations of
   live, rich data. supports torch and numpy.
     * [47]251 commits
     * [48]24 branches
     * [49]0 releases
     * [50]fetching contributors
     * [51]view license

    1. [52]python 54.1%
    2. [53]javascript 23.9%
    3. [54]lua 17.5%
    4. [55]css 1.9%
    5. [56]html 1.8%
    6. [57]shell 0.8%

   (button) python javascript lua css html shell
   branch: master (button) new pull request
   [58]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/f
   [59]download zip

downloading...

   want to be notified of new releases in facebookresearch/visdom?
   [60]sign in [61]sign up

launching github desktop...

   if nothing happens, [62]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [63]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [64]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [65]download the github extension for visual studio
   and try again.

   (button) go back
   [66]@jackurb [67]@facebook-github-bot
   [68]jackurb and [69]facebook-github-bot [70]image history sliders
   ([71]#393[72]) (button)    
summary:
closes [73]#286 by implementation.
fixes [74]#369 for real.

adds a way to store image history. the `store_history` option, when provided rep
eatedly for the same window will allow for appending multiple images to the same
 pane, accessed using a slider. the most recently sent image will be selected by
 default, and updates from the python client will reset the selection to the mos
t recent. this doesn't break any existing behavior:
<img width="1271" alt="screen shot 2018-06-19 at 5 42 28 pm" src="[75]https://us
er-images.githubusercontent.com/1276867/41627014-87e384ac-73ec-11e8-85bc-f3473f5
f8ca3.png">
this also begins the process for adding 'widgets' to arbitrary panes, allowing f
or functionality like long requested in [76]#25. (standardizing these widgets an
d allowing users to attach them to variables in the plot/layout state will be th
e last part of implementing [77]#25)

full implementation flow:
- adds an option to `image` that attaches a store_history option to the request.
 sends the request to the update endpoint if the window already exists. (note: i
t'd be nice to make it so that the server doesn't require the `store_history` fl
ag every time an additional image is sent, but it complicates the flow a lot. ma
y revisit down the road)
- creates flows in the create and update handlers of the server that recognize `
image_history` types and append data to the content rather than making it new.
- adds logic to `imagepane` that allow them to track the state of the slider, if
 it exists
- adds logic to `panes` that allows specialized panes to render additional conte
nt 'widgets' at the bottom of the pane.

gotchas:
- ~~this pr doesn't have a demo, will include in a follow-up~~ added in [78]#593
- this pr doesn't have feedback sent back to the python client on slider updates
, will implement in a follow-up
- this pr doesn't have a method for the python client to select a slider value,
will implement in a follow-up alongside a demo that can sync the contents of mul
tiple image panes to one slider!
- ~~this pr brings up the issue of the size of content being sent during window
updates to a head, as each additional image added to a history forces a send of
the entire history every single time. furthermore each update to any window in t
he same environment will force this same send.~~ this was implemented in [79]#39
5
- this pr doesn't properly handle margins, even though i can calculate how tall
i want them to be. need to review some css magic.
<img width="1268" alt="screen shot 2018-06-19 at 5 50 16 pm" src="[80]https://us
er-images.githubusercontent.com/1276867/41627411-3652d406-73ee-11e8-86b5-5236ebf
f6b28.png">
pull request resolved: [81]#393

differential revision: d14787240

pulled by: jackurb

fbshipit-source-id: 6452df6b12b759030efaa254a4cf3f2d4aadb724

   latest commit [82]e34c6d5 apr 4, 2019
   [83]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [84].github/issue_template [85]create issue templates ([86]#384[87])
   jun 25, 2018
   [88]example [89]image history sliders ([90]#393[91]) apr 4, 2019
   [92]js [93]image history sliders ([94]#393[95]) apr 4, 2019
   [96]py/visdom [97]image history sliders ([98]#393[99]) apr 4, 2019
   [100]th
   [101].eslintrc [102]add linting/autoformatting to the js codebase
   ([103]#564[104]) feb 25, 2019
   [105].gitattributes
   [106].gitignore
   [107].prettierignore
   [108].prettierrc [109]add linting/autoformatting to the js codebase
   ([110]#564[111]) feb 25, 2019
   [112]code_of_conduct.md
   [113]contributing.md
   [114]license [115]options -> opts, removing lua options parameter in
   favor of opts may 9, 2018
   [116]manifest.in [117]bundling visdom dependencies in distribution
   package ([118]#543[119]) jan 12, 2019
   [120]pull_request_template.md [121]creating pull request template
   ([122]#385[123]) jun 25, 2018
   [124]readme.md [125]image history sliders ([126]#393[127]) apr 4, 2019
   [128]download.sh
   [129]package.json
   [130]setup.py
   [131]webpack.config.js
   [132]yarn.lock

readme.md

visdom

   [133]visdom_big

   a flexible tool for creating, organizing, and sharing visualizations of
   live, rich data. supports torch and numpy.
     * [134]overview
     * [135]concepts
     * [136]setup
     * [137]usage
     * [138]api
     * [139]to do
     * [140]contributing

overview

   visdom aims to facilitate visualization of (remote) data with an
   emphasis on supporting scientific experimentation.

   [141][68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6
   d2f2d6833487576625532563053666771675847694b334c50676845357671765330707a
   704f6253305967475f4c41424d466b36324a4361334b56755f324e565f344c4a4b61416
                              1352d74673d7330]

   broadcast visualizations of plots, images, and text for yourself and
   your collaborators.

   [142][68747470733a2f2f7468756d62732e6766796361742e636f6d2f536c697070657
   2795365636f6e6468616e6447656d736275636b2d73697a655f72657374726963746564
                                  2e676966]

   organize your visualization space programmatically or through the ui to
   create dashboards for live data, inspect results of experiments, or
   debug experimental code.

   [143][68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6
   d2f2d49486578765a2d464d746b2f574c54584267516c696a492f41414141414141416d
   5f732f3531344c4d385231584667794e4b50564d6634744e77596c755a7348734336337
   7434c63422f73302f53637265656e2b53686f742b323031372d30322d32372b61742b33
                         2e31352e32372b504d2e706e67]

concepts

   visdom has a simple set of features that can be composed for various
   use-cases.

windows

   [144][68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6
   d2f2d6b4c6e6f677367395243732f574c7833345045734757492f41414141414141416e
   53732f37745f36327062666d666f45426e6b63624b545849717a30574d3870514a48565
   1434c63422f73302f53637265656e2b53686f742b323031372d30332d30352b61742b33
                         2e33342e34332b504d2e706e67]

   the ui begins as a blank slate -- you can populate it with plots,
   images, and text. these appear in windows that you can drag, drop,
   resize, and destroy. the windows live in envs and the state of envs is
   stored across sessions. you can download the content of windows --
   including your plots in svg.

     tip: you can use the zoom of your browser to adjust the scale of the
     ui.

callbacks

   the python visdom implementation supports callbacks on a window. the
   demo shows an example of this in the form of an editable text pad. the
   functionality of these callbacks allows the visdom object to receive
   and react to events that happen in the frontend.

   you can subscribe a window to events by adding a function to the event
   handlers dict for the window id you want to subscribe by calling
   viz.register_event_handler(handler, win_id) with your handler and the
   window id. multiple handlers can be registered to the same window. you
   can remove all event handlers from a window using
   viz.clear_event_handlers(win_id). when an event occurs to that window,
   your callbacks will be called on a dict containing:
     * event_type: one of the below event types
     * pane_data: all of the stored contents for that window including
       layout and content.
     * eid: the current environment id
     * target: the window id the event is called on

   additional parameters are defined below.

   right now three callback events are supported:
    1. close - triggers when a window is closed. returns a dict with only
       the aforementioned fields.
    2. keypress - triggers when a key is pressed. contains additional
       parameters:
          + key - a string representation of the key pressed (applying
            state modifiers such as shift)
          + key_code - the javascript event keycode for the pressed key
            (no modifiers)
    3. propertyupdate - triggers when a property is updated in property
       pane
          + propertyid - position in properties list
          + value - new property value

environments

          [145][34618198-fc63976c-f20b-11e7-9c0d-060132fdb37e.png]

   you can partition your visualization space with envs. by default, every
   user will have an env called main. new envs can be created in the ui or
   programmatically. the state of envs is chronically saved. environments
   are able to keep entirely different pools of plots.

   you can access a specific env via url:
   http://localhost.com:8097/env/main. if your server is hosted, you can
   share this url so others can see your visualizations too.

   environments are automatically hierarchically organized by the first _.

selecting environments

          [146][34618242-261d55d4-f20c-11e7-820d-c16731248b26.png]

   from the main page it is possible to toggle between different
   environments using the environment selector. selecting a new
   environment will query the server for the plots that exist in that
   environment. the environment selector allows for searching and
   filtering for the new enironment.

comparing environments

   from the main page it is possible to compare different environments
   using the environment selector. selecting multiple environments in the
   check box will query the server for the plots with the same titles in
   all environments and plot them in a single plot. an additional compare
   legend pane is created with a number corresponding to each selected
   environment. individual plots are updated with legends corresponding to
   "x_name" where x is a number corresponding with the compare legend pane
   and name is the original name in the legend.

     note: the compare envs view is not robust to high throughput data,
     as the server is responsible for generating the compared content. do
     not compare an environment that is receiving a high quantity of
     updates on any plot, as every update will request regenerating the
     comparison. if you need to compare two plots that are receiving high
     quantities of data, have them share the same window on a singular
     env.

clearing environments

   you can use the eraser button to remove all of the current contents of
   an environment. this closes the plot windows for that environment but
   keeps the empty environment for new plots.

managing environments

          [147][34618262-3bb635c8-f20c-11e7-9370-9facfde0cfb7.png]

   pressing the folder icon opens a dialog that allows you to fork or
   force save the current environment, or delete any of your existing
   environments. use of this feature is fully described in the state
   section.

     env files: your envs are loaded at initialization of the server, by
     default from $home/.visdom/. custom paths can be passed as a
     cmd-line argument. envs are removed by using the delete button or by
     deleting the corresponding .json file from the env dir.

state

   once you've created a few visualizations, state is maintained. the
   server automatically caches your visualizations -- if you reload the
   page, your visualizations reappear.

   [148][68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6
   d2f2d5a4b65464a664d653553342f574c586562694e674677492f41414141414141416e
   46492f4148326347736634306845576248365565636c5951635a505330595a626361795
               1434c63422f73302f656e765f666f726b5f322e676966]
     * save: you can manually do so with the save button. this will
       serialize the env's state (to disk, in json), including window
       positions. you can save an env programmatically.
       this is helpful for more sophisticated visualizations in which
       configuration is meaningful, e.g. a data-rich demo, a model
       training dashboard, or systematic experimentation. this also makes
       them easy to share and reuse.
     * fork: if you enter a new env name, saving will create a new env --
       effectively forking the previous env.

     tip: fork an environment before you begin to make edits to ensure
     that your changes are saved seperately.

filter

   you can use the filter to dynamically sift through windows present in
   an env -- just provide a regular expression with which to match titles
   of window you want to show. this can be helpful in use cases involving
   an env with many windows e.g. when systematically checking experimental
   results.

          [149][34618118-b86cb138-f20b-11e7-834d-b7d7039313f0.png]

     note: if you have saved your current view, the view will be restored
     after clearing the filter.

           [150][34849912-f0693f30-f6f1-11e7-90b6-2a39f83280e8.gif]

views

          [151][34618173-e2546f40-f20b-11e7-9969-16267891fb53.png]

   it is possible to manage the views simply by dragging the tops of
   windows around, however additional features exist to keep views
   organized and save common views. view management can be useful for
   saving and switching between multiple common organizations of your
   windows.

saving/deleting views

   using the folder icon, a dialog window opens where views can be forked
   in the same way that envs can be. saving a view will retain the
   position and sizes of all of the windows in a given environment. views
   are saved in $home/.visdom/view/layouts.json in the visdom filepath.

     note: saved views are static, and editing a saved view copies that
     view over to the current view where editing can occur.

re-packing

   using the repack icon (9 boxes), visdom will attempt to pack your
   windows in a way that they best fit while retaining row/column
   ordering.

     note: due to the reliance on row/column ordering and reactgridlayout
     the final layout might be slightly different than what might be
     expected. we're working on improving that experience or providing
     alternatives that give more fine-tuned control.

reloading views

          [152][34621042-9c6c05f6-f215-11e7-92c7-60afe2bf7e1e.gif]

   using the view dropdown it is possible to select previously saved
   views, restoring the locations and sizes of all of the windows within
   the current environment to the places they were when that view was
   saved last.

setup

   requires python 2.7/3 (and optionally torch7)
# install python server and client from pip
# (stable version, not all current features are supported)
pip install visdom

# install torch client
# (stable version, not all current features are supported)
luarocks install visdom

# install visdom from source
pip install -e .
# if the above runs into issues, you can try the below
easy_install .

# install torch client from source (from th directory)
luarocks make

usage

   start the server (probably in a screen or tmux) from the command line:
> visdom

   visdom now can be accessed by going to http://localhost:8097 in your
   browser, or your own host address if specified.

     the visdom command is equivalent to running python -m visdom.server.

     if the above does not work, try using an ssh tunnel to your server
     by adding the following line to your local ~/.ssh/config:
     localforward 127.0.0.1:8097 127.0.0.1:8097.

command line options

   the following options can be provided to the server:
    1. -port : the port to run the server on.
    2. -hostname : the hostname to run the server on.
    3. -base_url : the base server url (default = /).
    4. -env_path : the path to the serialized session to reload.
    5. -logging_level : logging level (default = info). accepts both
       standard text and numeric logging values.
    6. -readonly : flag to start server in readonly mode.
    7. -enable_login : flag to setup authentication for the sever,
       requiring a username and password to login.
    8. -force_new_cookie : flag to reset the secure cookie used by the
       server, invalidating current login cookies. requires -enable_login.

python example

import visdom
import numpy as np
vis = visdom.visdom()
vis.text('hello, world!')
vis.image(np.ones((3, 10, 10)))

torch example

require 'image'
vis = require 'visdom'()
vis:text{text = 'hello, world!'}
vis:image{img = image.fabio()}

   some users have reported issues when connecting lua clients to the
   visdom server. a potential work-around may be to switch off ipv6:
vis = require 'visdom'()
vis.ipv6 = false  -- switches off ipv6
vis:text{text = 'hello, world!'}

demos

python example/demo.py
th example/demo1.lua
th example/demo2.lua

api

   for a quick introduction into the capabilities of visdom, have a look
   at the example directory, or read the details below.

visdom arguments (python only)

   the python visdom client takes a few options:
     * server: the hostname of your visdom server (default:
       'http://localhost')
     * port: the port for your visdom server (default: 8097)
     * base_url: the base visdom server url (default: /)
     * env: default environment to plot to when no env is provided
       (default: main)
     * raise_exceptions: raise exceptions upon failure rather than
       printing them (default: true (soon))
     * log_to_filename: if not none, log all plotting and updating events
       to the given file (append mode) so that they can be replayed later
       using replay_log (default: none)
     * use_incoming_socket: enable use of the socket for receiving events
       from the web client, allowing user to register callbacks (default:
       true)
     * http_proxy_host: deprecated. use proxies argument for complete
       proxy support.
     * http_proxy_port: deprecated. use proxies argument for complete
       proxy support.
     * username: username to use for authentication, if server started
       with -enable_login (default: none)
     * password: password to use for authentication, if server started
       with -enable_login (default: none)
     * proxies: dictionary mapping protocol to the url of the proxy (e.g.
       {http: foo.bar:3128}) to be used on each request. (default: none)
     * offline: flag to run visdom in offline mode, where all requests are
       logged to file rather than to the server. requires log_to_filename
       is set. in offline mode, all visdom commands that don't create or
       update plots will simply return true. (default: false)

   other options are either currently unused (endpoint, ipv6) or used for
   internal functionality (send allows the visdom server to replicate
   events for the lua client).

basics

   visdom offers the following basic visualization functions:
     * [153]vis.image : image
     * [154]vis.images : list of images
     * [155]vis.text : arbitrary html
     * [156]vis.properties : properties grid
     * [157]vis.audio : audio
     * [158]vis.video : videos
     * [159]vis.svg : svg object
     * [160]vis.matplot : matplotlib plot
     * [161]vis.save : serialize state server-side

plotting

   we have wrapped several common plot types to make creating basic
   visualizations easily. these visualizations are powered by [162]plotly.

   the following api is currently supported:
     * [163]vis.scatter : 2d or 3d scatter plots
     * [164]vis.line : line plots
     * [165]vis.stem : stem plots
     * [166]vis.heatmap : heatmap plots
     * [167]vis.bar : bar graphs
     * [168]vis.histogram : histograms
     * [169]vis.boxplot : boxplots
     * [170]vis.surf : surface plots
     * [171]vis.contour : contour plots
     * [172]vis.quiver : quiver plots
     * [173]vis.mesh : mesh plots

generic plots

   note that the server api adheres to the plotly convention of data and
   layout objects, such that you can produce your own arbitrary plotly
   visualizations:
import visdom
vis = visdom.visdom()

trace = dict(x=[1, 2, 3], y=[4, 5, 6], mode="markers+lines", type='custom',
             marker={'color': 'red', 'symbol': 104, 'size': "10"},
             text=["one", "two", "three"], name='1st trace')
layout = dict(title="first plot", xaxis={'title': 'x1'}, yaxis={'title': 'x2'})

vis._send({'data': [trace], 'layout': layout, 'win': 'mywin'})

others

     * [174]vis.close : close a window by id
     * [175]vis.delete_env : delete an environment by env_id
     * [176]vis.win_exists : check if a window already exists by id
     * [177]vis.get_env_list : get a list of all of the environments on
       your server
     * [178]vis.win_hash: get md5 hash of window's contents
     * [179]vis.get_window_data: get current data for a window
     * [180]vis.check_connection: check if the server is connected
     * [181]vis.replay_log: replay the actions from the provided log file

details

   [182]visdom_big

basics

vis.image

   this function draws an img. it takes as input an cxhxw tensor img that
   contains the image.

   the following opts are supported:
     * jpgquality: jpg quality (number 0-100; default = 100)
     * caption: caption for the image
     * store_history: keep all images stored to the same window and attach
       a slider to the bottom that will let you select the image to view.
       you must always provide this opt when sending new images to an
       image with history.

     note you can use alt on an image pane to view the x/y coordinates of
     the cursor. you can also ctrl-scroll to zoom, alt scroll to pan
     vertically, and alt-shift scroll to pan horizontally. double click
     inside the pane to restore the image to default.

vis.images

   this function draws a list of images. it takes an input b x c x h x w
   tensor or a list of images all of the same size. it makes a grid of
   images of size (b / nrow, nrow).

   the following arguments and opts are supported:
     * nrow: number of images in a row
     * padding: padding around the image, equal padding around all 4 sides
     * opts.jpgquality: jpg quality (number 0-100; default = 100)
     * opts.caption: caption for the image

vis.text

   this function prints text in a box. you can use this to embed arbitrary
   html. it takes as input a text string. no specific opts are currently
   supported.

vis.properties

   this function shows editable properties in a pane. properties are
   expected to be a list of dicts e.g.:
    properties = [
        {'type': 'text', 'name': 'text input', 'value': 'initial'},
        {'type': 'number', 'name': 'number input', 'value': '12'},
        {'type': 'button', 'name': 'button', 'value': 'start'},
        {'type': 'checkbox', 'name': 'checkbox', 'value': true},
        {'type': 'select', 'name': 'select', 'value': 1, 'values': ['red', 'gree
n', 'blue']},
    ]

   supported types:
     * text: string
     * number: decimal number
     * button: button labeled with "value"
     * checkbox: boolean value rendered as a checkbox
     * select: multiple values select box
          + value: id of selected value (zero based)
          + values: list of possible values

   callback are called on property value update:
     * event_type: "propertyupdate"
     * propertyid: position in the properties list
     * value: new value

   no specific opts are currently supported.

vis.audio

   this function plays audio. it takes as input the filename of the audio
   file or an n tensor containing the waveform (use an nx2 matrix for
   stereo audio). the function does not support any plot-specific opts.

   the following opts are supported:
     * opts.sample_frequency: sample frequency (integer > 0; default =
       44100)

   known issue: visdom uses scipy to convert tensor inputs to wave files.
   some versions of chrome are known not to play these wave files (firefox
   and safari work fine).

vis.video

   this function plays a video. it takes as input the filename of the
   video videofile or a lxhxwxc-sized tensor containing all the frames of
   the video as input. the function does not support any plot-specific
   opts.

   the following opts are supported:
     * opts.fps: fps for the video (integer > 0; default = 25)

   note: using tensor input requires that ffmpeg is installed and working.
   your ability to play video may depend on the browser you use: your
   browser has to support the theano codec in an ogg container (chrome
   supports this).

vis.svg

   this function draws an svg object. it takes as input a svg string
   svgstr or the name of an svg file svgfile. the function does not
   support any specific opts.

vis.matplot

   this function draws a matplotlib plot. the function supports one
   plot-specific option: resizable.

     note when set to true the plot is resized with the pane. you need
     beautifulsoup4 and lxml packages installed to use this option.

     note: matplot is not rendered using the same backend as plotly
     plots, and is somewhat less efficient. using too many matplot
     windows may degrade visdom performance.

vis.plotlyplot

   this function draws a plotly figure object. it does not explicitly take
   options as it assumes you have already explicitly configured the
   figure's layout.

     note you must have the plotly python package installed to use this
     function. it can typically be installed by running pip install
     plotly.

vis.save

   this function saves the envs that are alive on the visdom server. it
   takes input a list (in python) or table (in lua) of env ids to be
   saved.

plotting

   further details on the wrapped plotting functions are given below.

   the exact inputs into the plotting functions vary, although most of
   them take as input a tensor x than contains the data and an (optional)
   tensor y that contains optional data variables (such as labels or
   timestamps). all plotting functions take as input an optional win that
   can be used to plot into a specific window; each plotting function also
   returns the win of the window it plotted in. one can also specify the
   env to which the visualization should be added.

vis.scatter

   this function draws a 2d or 3d scatter plot. it takes as input an nx2
   or nx3 tensor x that specifies the locations of the n points in the
   scatter plot. an optional n tensor y containing discrete labels that
   range between 1 and k can be specified as well -- the labels will be
   reflected in the colors of the markers.

   update can be used to efficiently update the data of an existing plot.
   use 'append' to append data, 'replace' to use new data, or 'remove' to
   remove the trace specified by name. using update='append' will create a
   plot if it doesn't exist and append to the existing plot otherwise. if
   updating a single trace, use name to specify the name of the trace to
   be updated. update data that is all nan is ignored (can be used for
   masking update).

   the following opts are supported:
     * opts.markersymbol: marker symbol (string; default = 'dot')
     * opts.markersize : marker size (number; default = '10')
     * opts.markercolor : color per marker. (torch.*tensor; default = nil)
     * opts.legend : table containing legend names
     * opts.textlabels : text label for each point (list: default = none)
     * opts.layoutopts : dict of any additional options that the graph
       backend accepts for a layout. for example layoutopts = {'plotly':
       {'legend': {'x':0, 'y':0}}}.
     * opts.traceopts : dict mapping trace names or indices to dicts of
       additional options that the graph backend accepts. for example
       traceopts = {'plotly': {'mytrace': {'mode': 'markers'}}}.
     * opts.webgl : use webgl for plotting (boolean; default = false). it
       is faster if a plot contains too many points. use sparingly as
       browsers won't allow more than a couple of webgl contexts on a
       single page.

   opts.markercolor is a tensor with integer values. the tensor can be of
   size n or n x 3 or k or k x 3.
     * tensor of size n: single intensity value per data point. 0 = black,
       255 = red
     * tensor of size n x 3: red, green and blue intensities per data
       point. 0,0,0 = black, 255,255,255 = white
     * tensor of size k and k x 3: instead of having a unique color per
       data point, the same color is shared for all points of a particular
       label.

vis.line

   this function draws a line plot. it takes as input an n or nxm tensor y
   that specifies the values of the m lines (that connect n points) to
   plot. it also takes an optional x tensor that specifies the
   corresponding x-axis values; x can be an n tensor (in which case all
   lines will share the same x-axis values) or have the same size as y.

   update can be used to efficiently update the data of an existing plot.
   use 'append' to append data, 'replace' to use new data, or 'remove' to
   remove the trace specified by name. if updating a single trace, use
   name to specify the name of the trace to be updated. update data that
   is all nan is ignored (can be used for masking update).

   the following opts are supported:
     * opts.fillarea : fill area below line (boolean)
     * opts.markers : show markers (boolean; default = false)
     * opts.markersymbol: marker symbol (string; default = 'dot')
     * opts.markersize : marker size (number; default = '10')
     * opts.linecolor : line colors (np.array; default = none)
     * opts.dash : line dash type for each line (np.array; default =
       'solid'), one of solid, dash, dashdot or dash, size should match
       number of lines being drawn
     * opts.legend : table containing legend names
     * opts.layoutopts : dict of any additional options that the graph
       backend accepts for a layout. for example layoutopts = {'plotly':
       {'legend': {'x':0, 'y':0}}}.
     * opts.traceopts : dict mapping trace names or indices to dicts of
       additional options that plot.ly accepts for a trace.
     * opts.webgl : use webgl for plotting (boolean; default = false). it
       is faster if a plot contains too many points. use sparingly as
       browsers won't allow more than a couple of webgl contexts on a
       single page.

vis.stem

   this function draws a stem plot. it takes as input an n or nxm tensor x
   that specifies the values of the n points in the m time series. an
   optional n or nxm tensor y containing timestamps can be specified as
   well; if y is an n tensor then all m time series are assumed to have
   the same timestamps.

   the following opts are supported:
     * opts.colormap: colormap (string; default = 'viridis')
     * opts.legend : table containing legend names
     * opts.layoutopts : dict of any additional options that the graph
       backend accepts for a layout. for example layoutopts = {'plotly':
       {'legend': {'x':0, 'y':0}}}.

vis.heatmap

   this function draws a heatmap. it takes as input an nxm tensor x that
   specifies the value at each location in the heatmap.

   the following opts are supported:
     * opts.colormap : colormap (string; default = 'viridis')
     * opts.xmin : clip minimum value (number; default = x:min())
     * opts.xmax : clip maximum value (number; default = x:max())
     * opts.columnnames: table containing x-axis labels
     * opts.rownames : table containing y-axis labels
     * opts.layoutopts : dict of any additional options that the graph
       backend accepts for a layout. for example layoutopts = {'plotly':
       {'legend': {'x':0, 'y':0}}}.

vis.bar

   this function draws a regular, stacked, or grouped bar plot. it takes
   as input an n or nxm tensor x that specifies the height of each of the
   bars. if x contains m columns, the values corresponding to each row are
   either stacked or grouped (depending on how opts.stacked is set). in
   addition to x, an (optional) n tensor y can be specified that contains
   the corresponding x-axis values.

   the following plot-specific opts are currently supported:
     * opts.rownames: table containing x-axis labels
     * opts.stacked : stack multiple columns in x
     * opts.legend : table containing legend labels
     * opts.layoutopts : dict of any additional options that the graph
       backend accepts for a layout. for example layoutopts = {'plotly':
       {'legend': {'x':0, 'y':0}}}.

vis.histogram

   this function draws a histogram of the specified data. it takes as
   input an n tensor x that specifies the data of which to construct the
   histogram.

   the following plot-specific opts are currently supported:
     * opts.numbins: number of bins (number; default = 30)
     * opts.layoutopts : dict of any additional options that the graph
       backend accepts for a layout. for example layoutopts = {'plotly':
       {'legend': {'x':0, 'y':0}}}.

vis.boxplot

   this function draws boxplots of the specified data. it takes as input
   an n or an nxm tensor x that specifies the n data values of which to
   construct the m boxplots.

   the following plot-specific opts are currently supported:
     * opts.legend: labels for each of the columns in x
     * opts.layoutopts : dict of any additional options that the graph
       backend accepts for a layout. for example layoutopts = {'plotly':
       {'legend': {'x':0, 'y':0}}}.

vis.surf

   this function draws a surface plot. it takes as input an nxm tensor x
   that specifies the value at each location in the surface plot.

   the following opts are supported:
     * opts.colormap: colormap (string; default = 'viridis')
     * opts.xmin : clip minimum value (number; default = x:min())
     * opts.xmax : clip maximum value (number; default = x:max())
     * opts.layoutopts : dict of any additional options that the graph
       backend accepts for a layout. for example layoutopts = {'plotly':
       {'legend': {'x':0, 'y':0}}}.

vis.contour

   this function draws a contour plot. it takes as input an nxm tensor x
   that specifies the value at each location in the contour plot.

   the following opts are supported:
     * opts.colormap: colormap (string; default = 'viridis')
     * opts.xmin : clip minimum value (number; default = x:min())
     * opts.xmax : clip maximum value (number; default = x:max())
     * opts.layoutopts : dict of any additional options that the graph
       backend accepts for a layout. for example layoutopts = {'plotly':
       {'legend': {'x':0, 'y':0}}}.

vis.quiver

   this function draws a quiver plot in which the direction and length of
   the arrows is determined by the nxm tensors x and y. two optional nxm
   tensors gridx and gridy can be provided that specify the offsets of the
   arrows; by default, the arrows will be done on a regular grid.

   the following opts are supported:
     * opts.normalize: length of longest arrows (number)
     * opts.arrowheads: show arrow heads (boolean; default = true)
     * opts.layoutopts : dict of any additional options that the graph
       backend accepts for a layout. for example layoutopts = {'plotly':
       {'legend': {'x':0, 'y':0}}}.

vis.mesh

   this function draws a mesh plot from a set of vertices defined in an
   nx2 or nx3 matrix x, and polygons defined in an optional mx2 or mx3
   matrix y.

   the following opts are supported:
     * opts.color: color (string)
     * opts.opacity: opacity of polygons (number between 0 and 1)
     * opts.layoutopts : dict of any additional options that the graph
       backend accepts for a layout. for example layoutopts = {'plotly':
       {'legend': {'x':0, 'y':0}}}.

customizing plots

   the plotting functions take an optional opts table as input that can be
   used to change (generic or plot-specific) properties of the plots. all
   input arguments are specified in a single table; the input arguments
   are matches based on the keys they have in the input table.

   the following opts are generic in the sense that they are the same for
   all visualizations (except plot.image, plot.text, plot.video, and
   plot.audio):
     * opts.title : figure title
     * opts.width : figure width
     * opts.height : figure height
     * opts.showlegend : show legend (true or false)
     * opts.xtype : type of x-axis ('linear' or 'log')
     * opts.xlabel : label of x-axis
     * opts.xtick : show ticks on x-axis (boolean)
     * opts.xtickmin : first tick on x-axis (number)
     * opts.xtickmax : last tick on x-axis (number)
     * opts.xtickvals : locations of ticks on x-axis (table of numbers)
     * opts.xticklabels : ticks labels on x-axis (table of strings)
     * opts.xtickstep : distances between ticks on x-axis (number)
     * opts.xtickfont : font for x-axis labels (dict of [183]font
       information)
     * opts.ytype : type of y-axis ('linear' or 'log')
     * opts.ylabel : label of y-axis
     * opts.ytick : show ticks on y-axis (boolean)
     * opts.ytickmin : first tick on y-axis (number)
     * opts.ytickmax : last tick on y-axis (number)
     * opts.ytickvals : locations of ticks on y-axis (table of numbers)
     * opts.yticklabels : ticks labels on y-axis (table of strings)
     * opts.ytickstep : distances between ticks on y-axis (number)
     * opts.ytickfont : font for y-axis labels (dict of [184]font
       information)
     * opts.marginleft : left margin (in pixels)
     * opts.marginright : right margin (in pixels)
     * opts.margintop : top margin (in pixels)
     * opts.marginbottom: bottom margin (in pixels)

   the other options are visualization-specific, and are described in the
   documentation of the functions.

others

vis.close

   this function closes a specific window. it takes input window id win
   and environment id eid. use win as none to close all windows in an
   environment.

vis.delete_env

   this function deletes a specified env entirely. it takes env id eid as
   input.

     note: delete_env is deletes all data for an environment and is
     irreversible. do not use unless you absolutely want to remove an
     environment.

vis.win_exists

   this function returns a bool indicating whether or not a window win
   exists on the server already. returns none if something went wrong.

   optional arguments:
     * env: environment to search for the window in. default is none.

vis.get_env_list

   this function returns a list of all of the environments on the server
   at the time of calling. it takes no arguments.

vis.win_hash

   this function returns md5 hash of the contents of a window win if it
   exists on the server. returns none otherwise.

   optional arguments:
     * env : environment to search for the window in. default is none.

vis.get_window_data

   this function returns the window data for the given window. returns
   data for all windows in an env if win is none.

   arguments:
     * env: environment to search for the window in.
     * win: window to return data for. set to none to retrieve all the
       windows in an environment.

vis.check_connection

   this function returns a bool indicating whether or not the server is
   connected. it accepts an optional argument timeout_seconds for a number
   of seconds to wait for the server to come up.

vis.replay_log

   this function takes the contents of a visdom log and replays them to
   the current server to restore a state or handle any missing entries.

   arguments:
     * log_filename: log file to replay the contents of.

license

   visdom is creative commons attribution-noncommercial 4.0 international
   public licensed, as found in the license file.

contributing

   see guidelines for contributing [185]here.

acknowledgments

   visdom was inspired by tools like [186]display and relies on
   [187]plotly as a plotting front-end.

     *    2019 github, inc.
     * [188]terms
     * [189]privacy
     * [190]security
     * [191]status
     * [192]help

     * [193]contact github
     * [194]pricing
     * [195]api
     * [196]training
     * [197]blog
     * [198]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [199]reload to refresh your
   session. you signed out in another tab or window. [200]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/facebookresearch/visdom/commits/master.atom
   3. https://github.com/facebookresearch/visdom#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/facebookresearch/visdom
  32. https://github.com/join
  33. https://github.com/login?return_to=/facebookresearch/visdom
  34. https://github.com/facebookresearch/visdom/watchers
  35. https://github.com/login?return_to=/facebookresearch/visdom
  36. https://github.com/facebookresearch/visdom/stargazers
  37. https://github.com/login?return_to=/facebookresearch/visdom
  38. https://github.com/facebookresearch/visdom/network/members
  39. https://github.com/facebookresearch
  40. https://github.com/facebookresearch/visdom
  41. https://github.com/facebookresearch/visdom
  42. https://github.com/facebookresearch/visdom/issues
  43. https://github.com/facebookresearch/visdom/pulls
  44. https://github.com/facebookresearch/visdom/projects
  45. https://github.com/facebookresearch/visdom/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/facebookresearch/visdom/commits/master
  48. https://github.com/facebookresearch/visdom/branches
  49. https://github.com/facebookresearch/visdom/releases
  50. https://github.com/facebookresearch/visdom/graphs/contributors
  51. https://github.com/facebookresearch/visdom/blob/master/license
  52. https://github.com/facebookresearch/visdom/search?l=python
  53. https://github.com/facebookresearch/visdom/search?l=javascript
  54. https://github.com/facebookresearch/visdom/search?l=lua
  55. https://github.com/facebookresearch/visdom/search?l=css
  56. https://github.com/facebookresearch/visdom/search?l=html
  57. https://github.com/facebookresearch/visdom/search?l=shell
  58. https://github.com/facebookresearch/visdom/find/master
  59. https://github.com/facebookresearch/visdom/archive/master.zip
  60. https://github.com/login?return_to=https://github.com/facebookresearch/visdom
  61. https://github.com/join?return_to=/facebookresearch/visdom
  62. https://desktop.github.com/
  63. https://desktop.github.com/
  64. https://developer.apple.com/xcode/
  65. https://visualstudio.github.com/
  66. https://github.com/jackurb
  67. https://github.com/facebook-github-bot
  68. https://github.com/facebookresearch/visdom/commits?author=jackurb
  69. https://github.com/facebookresearch/visdom/commits?author=facebook-github-bot
  70. https://github.com/facebookresearch/visdom/commit/e34c6d5abb23ed1e3333515af714c70b570e86c1
  71. https://github.com/facebookresearch/visdom/pull/393
  72. https://github.com/facebookresearch/visdom/commit/e34c6d5abb23ed1e3333515af714c70b570e86c1
  73. https://github.com/facebookresearch/visdom/issues/286
  74. https://github.com/facebookresearch/visdom/issues/369
  75. https://user-images.githubusercontent.com/1276867/41627014-87e384ac-73ec-11e8-85bc-f3473f5f8ca3.png
  76. https://github.com/facebookresearch/visdom/issues/25
  77. https://github.com/facebookresearch/visdom/issues/25
  78. https://github.com/facebookresearch/visdom/pull/593
  79. https://github.com/facebookresearch/visdom/issues/395
  80. https://user-images.githubusercontent.com/1276867/41627411-3652d406-73ee-11e8-86b5-5236ebff6b28.png
  81. https://github.com/facebookresearch/visdom/pull/393
  82. https://github.com/facebookresearch/visdom/commit/e34c6d5abb23ed1e3333515af714c70b570e86c1
  83. https://github.com/facebookresearch/visdom/tree/e34c6d5abb23ed1e3333515af714c70b570e86c1
  84. https://github.com/facebookresearch/visdom/tree/master/.github/issue_template
  85. https://github.com/facebookresearch/visdom/commit/0eda08fc65790ad6fbd19bbc37b7b94a833f5685
  86. https://github.com/facebookresearch/visdom/pull/384
  87. https://github.com/facebookresearch/visdom/commit/0eda08fc65790ad6fbd19bbc37b7b94a833f5685
  88. https://github.com/facebookresearch/visdom/tree/master/example
  89. https://github.com/facebookresearch/visdom/commit/e34c6d5abb23ed1e3333515af714c70b570e86c1
  90. https://github.com/facebookresearch/visdom/pull/393
  91. https://github.com/facebookresearch/visdom/commit/e34c6d5abb23ed1e3333515af714c70b570e86c1
  92. https://github.com/facebookresearch/visdom/tree/master/js
  93. https://github.com/facebookresearch/visdom/commit/e34c6d5abb23ed1e3333515af714c70b570e86c1
  94. https://github.com/facebookresearch/visdom/pull/393
  95. https://github.com/facebookresearch/visdom/commit/e34c6d5abb23ed1e3333515af714c70b570e86c1
  96. https://github.com/facebookresearch/visdom/tree/master/py/visdom
  97. https://github.com/facebookresearch/visdom/commit/e34c6d5abb23ed1e3333515af714c70b570e86c1
  98. https://github.com/facebookresearch/visdom/pull/393
  99. https://github.com/facebookresearch/visdom/commit/e34c6d5abb23ed1e3333515af714c70b570e86c1
 100. https://github.com/facebookresearch/visdom/tree/master/th
 101. https://github.com/facebookresearch/visdom/blob/master/.eslintrc
 102. https://github.com/facebookresearch/visdom/commit/7113159861b9a2834564e2f0e03564874eb89f62
 103. https://github.com/facebookresearch/visdom/pull/564
 104. https://github.com/facebookresearch/visdom/commit/7113159861b9a2834564e2f0e03564874eb89f62
 105. https://github.com/facebookresearch/visdom/blob/master/.gitattributes
 106. https://github.com/facebookresearch/visdom/blob/master/.gitignore
 107. https://github.com/facebookresearch/visdom/blob/master/.prettierignore
 108. https://github.com/facebookresearch/visdom/blob/master/.prettierrc
 109. https://github.com/facebookresearch/visdom/commit/7113159861b9a2834564e2f0e03564874eb89f62
 110. https://github.com/facebookresearch/visdom/pull/564
 111. https://github.com/facebookresearch/visdom/commit/7113159861b9a2834564e2f0e03564874eb89f62
 112. https://github.com/facebookresearch/visdom/blob/master/code_of_conduct.md
 113. https://github.com/facebookresearch/visdom/blob/master/contributing.md
 114. https://github.com/facebookresearch/visdom/blob/master/license
 115. https://github.com/facebookresearch/visdom/commit/64c0ca624f0cd3c358a3e64f47933649ea1ed1cd
 116. https://github.com/facebookresearch/visdom/blob/master/manifest.in
 117. https://github.com/facebookresearch/visdom/commit/dc922da67476a4d8db5143f7974d1c0d4a0c56a3
 118. https://github.com/facebookresearch/visdom/pull/543
 119. https://github.com/facebookresearch/visdom/commit/dc922da67476a4d8db5143f7974d1c0d4a0c56a3
 120. https://github.com/facebookresearch/visdom/blob/master/pull_request_template.md
 121. https://github.com/facebookresearch/visdom/commit/a56a951a7bfab630a90017092c64afc1e9276f45
 122. https://github.com/facebookresearch/visdom/pull/385
 123. https://github.com/facebookresearch/visdom/commit/a56a951a7bfab630a90017092c64afc1e9276f45
 124. https://github.com/facebookresearch/visdom/blob/master/readme.md
 125. https://github.com/facebookresearch/visdom/commit/e34c6d5abb23ed1e3333515af714c70b570e86c1
 126. https://github.com/facebookresearch/visdom/pull/393
 127. https://github.com/facebookresearch/visdom/commit/e34c6d5abb23ed1e3333515af714c70b570e86c1
 128. https://github.com/facebookresearch/visdom/blob/master/download.sh
 129. https://github.com/facebookresearch/visdom/blob/master/package.json
 130. https://github.com/facebookresearch/visdom/blob/master/setup.py
 131. https://github.com/facebookresearch/visdom/blob/master/webpack.config.js
 132. https://github.com/facebookresearch/visdom/blob/master/yarn.lock
 133. https://camo.githubusercontent.com/d69475a01f9f327fc42931a21df8134d1fbdfc19/68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6d2f2d62714839555843772d42452f574c3255736472726241492f41414141414141416e59632f656d727877436d6e7257345f434c54797955747442305359524a2d693443436951434c63422f73302f53637265656e2b53686f742b323031372d30332d30362b61742b31302e35312e30322b414d2e706e67253232766973646f6d5f626967253232
 134. https://github.com/facebookresearch/visdom#overview
 135. https://github.com/facebookresearch/visdom#concepts
 136. https://github.com/facebookresearch/visdom#setup
 137. https://github.com/facebookresearch/visdom#usage
 138. https://github.com/facebookresearch/visdom#api
 139. https://github.com/facebookresearch/visdom#to-do
 140. https://github.com/facebookresearch/visdom#contributing
 141. https://camo.githubusercontent.com/2b1b3f8ceb9b9379d59183352f1ca3f2e6bbf064/68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6d2f2d6833487576625532563053666771675847694b334c50676845357671765330707a704f6253305967475f4c41424d466b36324a4361334b56755f324e565f344c4a4b614161352d74673d7330
 142. https://camo.githubusercontent.com/02c53119b59b7f0295dfc5b98afc5cd1e104a51d/68747470733a2f2f7468756d62732e6766796361742e636f6d2f536c6970706572795365636f6e6468616e6447656d736275636b2d73697a655f726573747269637465642e676966
 143. https://camo.githubusercontent.com/07f821d8b548ed8169b83e1275d7b70010865217/68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6d2f2d49486578765a2d464d746b2f574c54584267516c696a492f41414141414141416d5f732f3531344c4d385231584667794e4b50564d6634744e77596c755a73487343363377434c63422f73302f53637265656e2b53686f742b323031372d30322d32372b61742b332e31352e32372b504d2e706e67
 144. https://camo.githubusercontent.com/63336491d0e438e08ecad3ff9385d305bbbb21a0/68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6d2f2d6b4c6e6f677367395243732f574c7833345045734757492f41414141414141416e53732f37745f36327062666d666f45426e6b63624b545849717a30574d3870514a485651434c63422f73302f53637265656e2b53686f742b323031372d30332d30352b61742b332e33342e34332b504d2e706e67
 145. https://user-images.githubusercontent.com/1276867/34618198-fc63976c-f20b-11e7-9c0d-060132fdb37e.png
 146. https://user-images.githubusercontent.com/1276867/34618242-261d55d4-f20c-11e7-820d-c16731248b26.png
 147. https://user-images.githubusercontent.com/1276867/34618262-3bb635c8-f20c-11e7-9370-9facfde0cfb7.png
 148. https://camo.githubusercontent.com/aad650814069db141e0f4400d70e0d3399ae1a02/68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6d2f2d5a4b65464a664d653553342f574c586562694e674677492f41414141414141416e46492f4148326347736634306845576248365565636c5951635a505330595a6263617951434c63422f73302f656e765f666f726b5f322e676966
 149. https://user-images.githubusercontent.com/1276867/34618118-b86cb138-f20b-11e7-834d-b7d7039313f0.png
 150. https://user-images.githubusercontent.com/1276867/34849912-f0693f30-f6f1-11e7-90b6-2a39f83280e8.gif
 151. https://user-images.githubusercontent.com/1276867/34618173-e2546f40-f20b-11e7-9969-16267891fb53.png
 152. https://user-images.githubusercontent.com/1276867/34621042-9c6c05f6-f215-11e7-92c7-60afe2bf7e1e.gif
 153. https://github.com/facebookresearch/visdom#visimage
 154. https://github.com/facebookresearch/visdom#visimages
 155. https://github.com/facebookresearch/visdom#vistext
 156. https://github.com/facebookresearch/visdom#visproperties
 157. https://github.com/facebookresearch/visdom#visaudio
 158. https://github.com/facebookresearch/visdom#visvideo
 159. https://github.com/facebookresearch/visdom#vissvg
 160. https://github.com/facebookresearch/visdom#vismatplot
 161. https://github.com/facebookresearch/visdom#vissave
 162. https://plot.ly/
 163. https://github.com/facebookresearch/visdom#visscatter
 164. https://github.com/facebookresearch/visdom#visline
 165. https://github.com/facebookresearch/visdom#visstem
 166. https://github.com/facebookresearch/visdom#visheatmap
 167. https://github.com/facebookresearch/visdom#visbar
 168. https://github.com/facebookresearch/visdom#vishistogram
 169. https://github.com/facebookresearch/visdom#visboxplot
 170. https://github.com/facebookresearch/visdom#vissurf
 171. https://github.com/facebookresearch/visdom#viscontour
 172. https://github.com/facebookresearch/visdom#visquiver
 173. https://github.com/facebookresearch/visdom#vismesh
 174. https://github.com/facebookresearch/visdom#visclose
 175. https://github.com/facebookresearch/visdom#visdelete_env
 176. https://github.com/facebookresearch/visdom#viswin_exists
 177. https://github.com/facebookresearch/visdom#visget_env_list
 178. https://github.com/facebookresearch/visdom#viswin_hash
 179. https://github.com/facebookresearch/visdom#visget_window_data
 180. https://github.com/facebookresearch/visdom#vischeck_connection
 181. https://github.com/facebookresearch/visdom#visreplay_log
 182. https://camo.githubusercontent.com/d69475a01f9f327fc42931a21df8134d1fbdfc19/68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6d2f2d62714839555843772d42452f574c3255736472726241492f41414141414141416e59632f656d727877436d6e7257345f434c54797955747442305359524a2d693443436951434c63422f73302f53637265656e2b53686f742b323031372d30332d30362b61742b31302e35312e30322b414d2e706e67253232766973646f6d5f626967253232
 183. https://plot.ly/javascript/reference/#layout-font
 184. https://plot.ly/javascript/reference/#layout-font
 185. https://github.com/facebookresearch/visdom/blob/master/contributing.md
 186. https://github.com/szym/display
 187. https://plot.ly/
 188. https://github.com/site/terms
 189. https://github.com/site/privacy
 190. https://github.com/security
 191. https://githubstatus.com/
 192. https://help.github.com/
 193. https://github.com/contact
 194. https://github.com/pricing
 195. https://developer.github.com/
 196. https://training.github.com/
 197. https://github.blog/
 198. https://github.com/about
 199. https://github.com/facebookresearch/visdom
 200. https://github.com/facebookresearch/visdom

   hidden links:
 202. https://github.com/
 203. https://github.com/facebookresearch/visdom
 204. https://github.com/facebookresearch/visdom
 205. https://github.com/facebookresearch/visdom
 206. https://help.github.com/articles/which-remote-url-should-i-use
 207. https://github.com/facebookresearch/visdom#visdom
 208. https://github.com/facebookresearch/visdom#overview
 209. https://github.com/facebookresearch/visdom#concepts
 210. https://github.com/facebookresearch/visdom#windows
 211. https://github.com/facebookresearch/visdom#callbacks
 212. https://github.com/facebookresearch/visdom#environments
 213. https://github.com/facebookresearch/visdom#selecting-environments
 214. https://github.com/facebookresearch/visdom#comparing-environments
 215. https://github.com/facebookresearch/visdom#clearing-environments
 216. https://github.com/facebookresearch/visdom#managing-environments
 217. https://github.com/facebookresearch/visdom#state
 218. https://github.com/facebookresearch/visdom#filter
 219. https://github.com/facebookresearch/visdom#views
 220. https://github.com/facebookresearch/visdom#savingdeleting-views
 221. https://github.com/facebookresearch/visdom#re-packing
 222. https://github.com/facebookresearch/visdom#reloading-views
 223. https://github.com/facebookresearch/visdom#setup
 224. https://github.com/facebookresearch/visdom#usage
 225. https://github.com/facebookresearch/visdom#command-line-options
 226. https://github.com/facebookresearch/visdom#python-example
 227. https://github.com/facebookresearch/visdom#torch-example
 228. https://github.com/facebookresearch/visdom#demos
 229. https://github.com/facebookresearch/visdom#api
 230. https://github.com/facebookresearch/visdom#visdom-arguments-python-only
 231. https://github.com/facebookresearch/visdom#basics
 232. https://github.com/facebookresearch/visdom#plotting
 233. https://github.com/facebookresearch/visdom#generic-plots
 234. https://github.com/facebookresearch/visdom#others
 235. https://github.com/facebookresearch/visdom#details
 236. https://github.com/facebookresearch/visdom#basics-1
 237. https://github.com/facebookresearch/visdom#visimage
 238. https://github.com/facebookresearch/visdom#visimages
 239. https://github.com/facebookresearch/visdom#vistext
 240. https://github.com/facebookresearch/visdom#visproperties
 241. https://github.com/facebookresearch/visdom#visaudio
 242. https://github.com/facebookresearch/visdom#visvideo
 243. https://github.com/facebookresearch/visdom#vissvg
 244. https://github.com/facebookresearch/visdom#vismatplot
 245. https://github.com/facebookresearch/visdom#visplotlyplot
 246. https://github.com/facebookresearch/visdom#vissave
 247. https://github.com/facebookresearch/visdom#plotting-1
 248. https://github.com/facebookresearch/visdom#visscatter
 249. https://github.com/facebookresearch/visdom#visline
 250. https://github.com/facebookresearch/visdom#visstem
 251. https://github.com/facebookresearch/visdom#visheatmap
 252. https://github.com/facebookresearch/visdom#visbar
 253. https://github.com/facebookresearch/visdom#vishistogram
 254. https://github.com/facebookresearch/visdom#visboxplot
 255. https://github.com/facebookresearch/visdom#vissurf
 256. https://github.com/facebookresearch/visdom#viscontour
 257. https://github.com/facebookresearch/visdom#visquiver
 258. https://github.com/facebookresearch/visdom#vismesh
 259. https://github.com/facebookresearch/visdom#customizing-plots
 260. https://github.com/facebookresearch/visdom#others-1
 261. https://github.com/facebookresearch/visdom#visclose
 262. https://github.com/facebookresearch/visdom#visdelete_env
 263. https://github.com/facebookresearch/visdom#viswin_exists
 264. https://github.com/facebookresearch/visdom#visget_env_list
 265. https://github.com/facebookresearch/visdom#viswin_hash
 266. https://github.com/facebookresearch/visdom#visget_window_data
 267. https://github.com/facebookresearch/visdom#vischeck_connection
 268. https://github.com/facebookresearch/visdom#visreplay_log
 269. https://github.com/facebookresearch/visdom#license
 270. https://github.com/facebookresearch/visdom#contributing
 271. https://github.com/facebookresearch/visdom#acknowledgments
 272. https://github.com/
