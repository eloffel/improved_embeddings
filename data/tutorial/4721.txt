   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]freecodecamp.org
     * [9]dev
     * [10]learn to code for free
     __________________________________________________________________

how i replicated an $86 million project in 57 lines of code

when an experiment with existing open source technology does a    good
enough    job

   [11]go to the profile of tait brown
   [12]tait brown (button) blockedunblock (button) followfollowing
   aug 28, 2017
   [1*xu8vootxa_hpi908sbacaq.jpeg]

   the victoria police are the primary law enforcement agency of victoria,
   australia. with over 16,000 vehicles stolen in victoria this past
   year         at a cost of about $170 million         the police department is
   experimenting with a variety of technology-driven solutions to
   crackdown on car theft. they call this system bluenet.

   to help prevent fraudulent sales of stolen vehicles, there is already a
   vicroads [13]web-based service for checking the status of vehicle
   registrations. the department has also invested in a stationary license
   plate scanner         a fixed tripod camera which scans passing traffic to
   automatically identify stolen vehicles.

   don   t ask me why, but one afternoon i had the desire to prototype a
   vehicle-mounted license plate scanner that would automatically notify
   you if a vehicle had been stolen or was unregistered. understanding
   that these individual components existed, i wondered how difficult it
   would be to wire them together.

   but it was after a bit of googling that i discovered the victoria
   police had recently undergone a trial of a similar device, and the
   estimated cost of roll out was somewhere in the vicinity of
   $86,000,000. one astute commenter pointed out that the $86m cost to fit
   out 220 vehicles comes in at a rather thirsty $390,909 per vehicle.

   surely we can do a bit better than that.
   [1*6afjjmn_bkbnbex5swuvog.png]
   existing stationary license plate recognition systems
     __________________________________________________________________

the success criteria

   before getting started, i outlined a few key requirements for product
   design.

requirement #1: the image processing must be performed locally

   streaming live video to a central processing warehouse seemed the least
   efficient approach to solving this problem. besides the whopping bill
   for data traffic, you   re also introducing network latency into a
   process which may already be quite slow.

   although a centralized machine learning algorithm is only going to get
   more accurate over time, i wanted to learn if an local on-device
   implementation would be    good enough   .

requirement #2: it must work with low quality images

   since i don   t have a raspberry pi camera or usb webcam, so i   ll be
   using dashcam footage         it   s readily available and an ideal source of
   sample data. as an added bonus, dashcam video represents the overall
   quality of footage you   d expect from vehicle mounted cameras.

requirement #3: it needs to be built using open source technology

   relying upon a proprietary software means you   ll get stung every time
   you request a change or enhancement         and the stinging will continue
   for every request made thereafter. using open source technology is a
   no-brainer.

my solution

   at a high level, my solution takes an image from a dashcam video, pumps
   it through an open source license plate recognition system installed
   locally on the device, queries the registration check service, and then
   returns the results for display.

   the data returned to the device installed in the law enforcement
   vehicle includes the vehicle   s make and model (which it only uses to
   verify whether the plates have been stolen), the registration status,
   and any notifications of the vehicle being reported stolen.

   if that sounds rather simple, it   s because it really is. for example,
   the image processing can all be handled by the openalpr library.

   this is really all that   s involved to recognize the characters on a
   license plate:

   iframe: [14]/media/0a513d9e24b2bcd6a8360e6208552ce2?postid=277031330ee9

     a minor caveat
     public access to the vicroads apis is not available, so license
     plate checks occur via web scraping for this prototype. while
     generally frowned upon         this is a proof of concept and i   m not
     slamming anyone   s servers.

   here   s what the dirtiness of my proof-of-concept scraping looks like:

   iframe: [15]/media/d51e47cc7dac10fb4665293a277ab9ad?postid=277031330ee9
     __________________________________________________________________

results

   i must say i was pleasantly surprised.

   i expected the open source license plate recognition to be pretty
   rubbish. additionally, the image recognition algorithms are probably
   not optimised for australian license plates.

   the solution was able to recognise license plates in a wide field of
   view.
   [1*bu46lufheihxit_buyparq.jpeg]
   annotations added for effect. number plate identified despite
   reflections and lens distortion.

   although, the solution would occasionally have issues with particular
   letters.
   [1*yzybyyp5ylgqnspjqsdw6a.jpeg]
   incorrect reading of plate, mistook the m for an h

   but     the solution would eventually get them correct.
   [1*yix5li10tin7t0zazwvq5w.jpeg]
   a few frames later, the m is correctly identified and at a higher
   confidence rating

   as you can see in the above two images, processing the image a couple
   of frames later jumped from a confidence rating of 87% to a hair over
   91%.

   i   m confident, pardon the pun, that the accuracy could be improved by
   increasing the sample rate, and then sorting by the highest confidence
   rating. alternatively a threshold could be set that only accepts a
   confidence of greater than 90% before going on to validate the
   registration number.

   those are very straight forward code-first fixes, and don   t preclude
   the training of the license plate recognition software with a local
   data set.

the $86,000,000 question

   to be fair, i have absolutely no clue what the $86m figure
   includes         nor can i speak to the accuracy of my open source tool with
   no localized training vs. the pilot bluenet system.

   i would expect part of that budget includes the replacement of several
   legacy databases and software applications to support the high
   frequency, low latency querying of license plates several times per
   second, per vehicle.

   on the other hand, the cost of ~$391k per vehicle seems pretty
   rich         especially if the bluenet isn   t particularly accurate and there
   are no large scale it projects to decommission or upgrade dependent
   systems.

future applications

   while it   s easy to get caught up in the orwellian nature of an    always
   on    network of license plate snitchers, there are many positive
   applications of this technology. imagine a passive system scanning
   fellow motorists for an abductors car that automatically alerts
   authorities and family members to their current location and direction.

   teslas vehicles are already brimming with cameras and sensors with the
   ability to receive ota updates         imagine turning these into a fleet of
   virtual good samaritans. ubers and lyft drivers could also be outfitted
   with these devices to dramatically increase the coverage area.

   using open source technology and existing components, it seems possible
   to offer a solution that provides a much higher rate of return         for an
   investment much less than $86m.
     __________________________________________________________________

   part 2         i   ve published an update, in which i test with my own footage
   and catch an unregistered vehicle, over here:
   [16]remember that $86 million license plate scanner i replicated?
   here   s what happened next.
   successes, failures, and catching one very naughty
   drivermedium.freecodecamp.org

   thanks to [17]drew firment. [18]some rights reserved
     * [19]open source
     * [20]javascript
     * [21]hackathons
     * [22]cloud computing
     * [23]tech

   (button)
   (button)
   (button) 66k claps
   (button) (button) (button) 178 (button) (button)

     (button) blockedunblock (button) followfollowing
   [24]go to the profile of tait brown

[25]tait brown

   i'm a ux designer/developer. i make stuff and tweet about shit user
   experiences. works at a cloud guru.

     (button) follow
   [26]freecodecamp.org

[27]freecodecamp.org

   stories worth reading about programming and technology from our open
   source community.

     * (button)
       (button) 66k
     * (button)
     *
     *

   [28]freecodecamp.org
   never miss a story from freecodecamp.org, when you sign up for medium.
   [29]learn more
   never miss a story from freecodecamp.org
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://medium.freecodecamp.org/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/277031330ee9
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://medium.freecodecamp.org/how-i-replicated-an-86-million-project-in-57-lines-of-code-277031330ee9&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://medium.freecodecamp.org/how-i-replicated-an-86-million-project-in-57-lines-of-code-277031330ee9&source=--------------------------nav_reg&operation=register
   8. https://medium.freecodecamp.org/?source=logo-lo_pgj1tdnvlqcb---336d898217ee
   9. https://medium.freecodecamp.org/tagged/web-development
  10. https://www.freecodecamp.com/?ref=mn
  11. https://medium.freecodecamp.org/@taitems?source=post_header_lockup
  12. https://medium.freecodecamp.org/@taitems
  13. https://www.vicroads.vic.gov.au/registration/buy-sell-or-transfer-a-vehicle/buy-a-vehicle/check-vehicle-registration/vehicle-registration-enquiry
  14. https://medium.freecodecamp.org/media/0a513d9e24b2bcd6a8360e6208552ce2?postid=277031330ee9
  15. https://medium.freecodecamp.org/media/d51e47cc7dac10fb4665293a277ab9ad?postid=277031330ee9
  16. https://medium.freecodecamp.org/remember-that-86-million-license-plate-scanner-i-replicated-heres-what-happened-next-9f3c64e8f22b
  17. https://medium.com/@drew.firment?source=post_page
  18. http://creativecommons.org/licenses/by/4.0/
  19. https://medium.freecodecamp.org/tagged/open-source?source=post
  20. https://medium.freecodecamp.org/tagged/javascript?source=post
  21. https://medium.freecodecamp.org/tagged/hackathons?source=post
  22. https://medium.freecodecamp.org/tagged/cloud-computing?source=post
  23. https://medium.freecodecamp.org/tagged/tech?source=post
  24. https://medium.freecodecamp.org/@taitems?source=footer_card
  25. https://medium.freecodecamp.org/@taitems
  26. https://medium.freecodecamp.org/?source=footer_card
  27. https://medium.freecodecamp.org/?source=footer_card
  28. https://medium.freecodecamp.org/
  29. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  31. https://medium.freecodecamp.org/remember-that-86-million-license-plate-scanner-i-replicated-heres-what-happened-next-9f3c64e8f22b
  32. https://medium.com/p/277031330ee9/share/twitter
  33. https://medium.com/p/277031330ee9/share/facebook
  34. https://medium.com/p/277031330ee9/share/twitter
  35. https://medium.com/p/277031330ee9/share/facebook
