day 3

esslli 2016 
bolzano, italy

        

logical foundations of databases

diego figueira

gabriele puppis

cnrs     labri

recap

    active domain semantics and expressiveness:   foact =* ra 

    undecidable problems (halting     domino     fo-satis   ability     fo-equivalence) 

    data complexity / combined complexity 
    evaluation problem for fo: in pspace              (combined comp.)   
                                                        in pspace              (query comp.)   
                                                        in logspace      (data comp.)   

    positive fo: evaluation in np   (combined comp.) 

    conjunctive queries

conjunctive queries

def.

cq  =  fo without    ,  ,   

eg:          (x, y) =      z . (parent(x, z)     parent(z, y))

usual notation:    grandparent(x,y)  :     parent(x,z), parent(z,y)   

3

conjunctive queries

def.

cq  =  fo without    ,  ,   

normal form:           x1,    , xn .   (x1,    , xn)    

quanti   er-free and no equalities!

eg:          (x, y) =      z . (parent(x, z)     parent(z, y))

usual notation:    grandparent(x,y)  :     parent(x,z), parent(z,y)   

3

conjunctive queries

def.

cq  =  fo without    ,  ,   

normal form:           x1,    , xn .   (x1,    , xn)    

quanti   er-free and no equalities!

eg:          (x, y) =      z . (parent(x, z)     parent(z, y))

usual notation:    grandparent(x,y)  :     parent(x,z), parent(z,y)   

it corresponds to positive  
   select-from-where    sql queries
select   ...   
from   ...   
where   z

no negation or disjunction

it corresponds to      -  -      ra queries

  x(  z(r1            rn))

no negation

3

homomorphisms

homomorphism  between structures  s=(v, r1,    , rn)  and  s '=(v ', r1',    , rn')   
                                   is a function   h : v      v '   such that 
                                                             (x1,    , xn)     ri   implies   (h(x1),    , h(xn))     ri'

s = (v, r1 , r2)

s' = (v ', r1' , r2')

4

homomorphisms

homomorphism  between structures  s=(v, r1,    , rn)  and  s '=(v ', r1',    , rn')   
                                   is a function   h : v      v '   such that 
                                                             (x1,    , xn)     ri   implies   (h(x1),    , h(xn))     ri'

g   = (v, e)

g' = (v', e' )

5

canonical structures

canonical structure   g     of a  conjunctive query     has 

     variables  as  nodes 
     tuples  (x1,    , xn)     ri   
  for all atomic sub-formulas  ri (x1,    , xn)  of    

g   = (v, e)

g' = (v', e' )

6

canonical structures

canonical structure   g     of a  conjunctive query     has 

     variables  as  nodes 
     tuples  (x1,    , xn)     ri   
  for all atomic sub-formulas  ri (x1,    , xn)  of    

e.g.:         =     x    y    z .  (e(x, y)     e(y, z)     e(x, z))

x

z

y

g   = (v, e)
g   = (v, e)

v1

v2

v3

g' = (v', e' )

6

canonical structures

canonical structure   g     of a  conjunctive query     has 

     variables  as  nodes 
     tuples  (x1,    , xn)     ri   
  for all atomic sub-formulas  ri (x1,    , xn)  of    

fact 1:   g         

e.g.:         =     x    y    z .  (e(x, y)     e(y, z)     e(x, z))

x

z

y

g   = (v, e)
g   = (v, e)

v1

v2

v3

g' = (v', e' )

6

canonical structures

canonical structure   g     of a  conjunctive query     has 

     variables  as  nodes 
     tuples  (x1,    , xn)     ri   
  for all atomic sub-formulas  ri (x1,    , xn)  of    

fact 1:   g         

fact 2:   h(g  )       

e.g.:         =     x    y    z .  (e(x, y)     e(y, z)     e(x, z))

x

z

y

g   = (v, e)
g   = (v, e)

v1

v2

v3

g' = (v', e' )

6

canonical structures

canonical structure   g     of a  conjunctive query     has 

     variables  as  nodes 
     tuples  (x1,    , xn)     ri   
  for all atomic sub-formulas  ri (x1,    , xn)  of    

fact 1:   g         

fact 3:   

g''          i          h: g         g ''

fact 2:   h(g  )       

e.g.:         =     x    y    z .  (e(x, y)     e(y, z)     e(x, z))

x

z

y

g   = (v, e)
g   = (v, e)

v1

v2

v3

g' = (v', e' )

6

evaluation via homomorphisms

lemma.  the evaluation of a  cq    (x1,    , xn)  on  s'  returns the set   
                             (s' )  =  { (h(x1),    , h(xn) )  |  h : g        s' } 

e.g.:        (x) =     y    z .  (e(x, y)     e(y, z)     e(x, z))

x

z

y

g   = (v, e)
g   = (v, e)

v1

v2

v3

g' = (v', e' )

7

evaluation via homomorphisms

lemma.  the evaluation of a  cq    (x1,    , xn)  on  s'  returns the set   
                             (s' )  =  { (h(x1),    , h(xn) )  |  h : g        s' } 

question:     which are the    
homomorphisms g       g'  ?  
what is the result of    (g' ) ?

e.g.:        (x) =     y    z .  (e(x, y)     e(y, z)     e(x, z))

x

z

y

g   = (v, e)
g   = (v, e)

v1

v2

v3

g' = (v', e' )

7

evaluation via homomorphisms

theorem.   evaluation of  cq  is in np                      (combined complexity)

x

z

y

g    = (v, e)

v1

v2

v3

g' = (v', e' )

    input:   a cq    (x1,    , xn),   a graph g,   a tuple (a1,    , an) 
output:   is  (a1,    , an)       (g) ?

8

evaluation via homomorphisms

theorem.   evaluation of  cq  is in np                      (combined complexity)

x

z

y

g    = (v, e)

v1

v2

v3

g' = (v', e' )

    input:   a cq    (x1,    , xn),   a graph g,   a tuple (a1,    , an) 
output:   is  (a1,    , an)       (g) ?

ideas?

8

evaluation via homomorphisms

theorem.   evaluation of  cq  is in np                      (combined complexity)

x

z

y

g    = (v, e)

v1

v2

v3

g' = (v', e' )

    input:   a cq    (x1,    , xn),   a graph g,   a tuple (a1,    , an) 
output:   is  (a1,    , an)       (g) ?

ideas?

1. guess  h: g       g 
2. check that it is a homomorphism 
3. output yes  if  (h(x1),    , h(xn)) = (a1,    , an);  no otherwise.

8

evaluation via homomorphisms

theorem.   evaluation of  cq  is     np-complete    (combined complexity)

9

evaluation via homomorphisms

theorem.   evaluation of  cq  is     np-complete    (combined complexity)

np-complete problem: 3-colorability
input:      a graph g 
output:  can we assign a colour from {r,g,b} to each node   
                  so that adjacent nodes have always di   erent colours ? 
                                                      = 
                  is there a  homomorphism  from g to k3 ?

k3

9

evaluation via homomorphisms

theorem.   evaluation of  cq  is     np-complete    (combined complexity)

np-complete problem: 3-colorability
input:      a graph g 
output:  can we assign a colour from {r,g,b} to each node   
                  so that adjacent nodes have always di   erent colours ? 
                                                      = 
                  is there a  homomorphism  from g to k3 ?

k3

reduction 3col     cq-eval:  1.  given g,  build a cq     such that  g   = g. 
                                                                 2.  test if  ()       (k3). 

9

monotonicity and preservation theorems

lemma.    every cq is monotone: 
                    s     s '   implies     (s )       (s ')

10

monotonicity and preservation theorems

lemma.    every cq is monotone: 
                    s     s '   implies     (s )       (s ')

proof:   
  (s )  =  { (h(x1),    , h(xn) )  |  h : g        s } 
                { (h' (x1),    , h' (xn) )  |  h' : g        s' }    
           =    (s' )

10

monotonicity and preservation theorems

lemma.    every cq is monotone: 
                    s     s '   implies     (s )       (s ')

proof:   
  (s )  =  { (h(x1),    , h(xn) )  |  h : g        s } 
                { (h' (x1),    , h' (xn) )  |  h' : g        s' }    
           =    (s' )

   the relation r has at most 2 elements        cq 

   there is a node connected to every other node        cq 

   the radius of the graph is 5        cq

10

monotonicity and preservation theorems

theorem.    if an fo query    is monotone 
                       then            ucq

[rossman '08]

11

monotonicity and preservation theorems

theorem.    if an fo query    is monotone 
                       then            ucq

[rossman '08]

  finite unions of cqs 
                  fragment of fo

11

monotonicity and preservation theorems

theorem.    if an fo query    is monotone 
                       then            ucq

[rossman '08]

  finite unions of cqs 
                  fragment of fo

equally expressive, but   
ucq are less succinct

11

monotonicity and preservation theorems

theorem.    if an fo query    is monotone 
                       then            ucq

[rossman '08]

  finite unions of cqs 
                  fragment of fo

equally expressive, but   
ucq are less succinct

    one example of the few properties which still hold on    nite structures. 
    proof in the    nite is di   cult and independent.

11

static analysis with cqs

the satis   ability problem for cq is decidable   

question: what is the algorithm for cq-sat?  what is the complexity?

12

static analysis with cqs

the satis   ability problem for cq is decidable   

question: what is the algorithm for cq-sat?  what is the complexity?

answer: cqs are always satis   able by their canonical structure!

g          

12

static analysis with cqs

problem: cq-containment
input:      two cqs    ,    
output:  does    (s)       (s)  holds for every structure s ?

13

static analysis with cqs

problem: cq-containment
input:      two cqs    ,    
output:  does    (s)       (s)  holds for every structure s ?

theorem.   the containment problem for cq is np-complete

13

static analysis with cqs

problem: cq-containment
input:      two cqs    ,    
output:  does    (s)       (s)  holds for every structure s ?

theorem.   the containment problem for cq is np-complete

question: is this combined or data complexity?

13

static analysis with cqs

problem: cq-containment
input:      two cqs    ,    
output:  does    (s)       (s)  holds for every structure s ?

theorem.   the containment problem for cq is np-complete

question: is this combined or data complexity?

answer: none!

13

static analysis with cqs

problem: cq-containment
input:      two cqs    ,    
output:  does    (s)       (s)  holds for every structure s ?

theorem.   the containment problem for cq is np-complete

  (x1,    , xn) is contained in    (y1,    , ym)   i   

1.  n = m 
2.  there is  g: g        g   
3.  g(yi) = xi   for all i

question: is this combined or data complexity?

answer: none!

13

static analysis with cqs

problem: cq-containment
input:      two cqs    ,    
output:  does    (s)       (s)  holds for every structure s ?

theorem.   the containment problem for cq is np-complete

  (x1,    , xn) is contained in    (y1,    , ym)   i   

why?

1.  n = m 
2.  there is  g: g        g   
3.  g(yi) = xi   for all i

question: is this combined or data complexity?

answer: none!

13

static analysis with cqs

  (x1,    , xn) is contained in    (y1,    , ym)   i   

1.  n = m 
2.  there is  g: g        g   
3.  g(yi) = xi   for all i

14

static analysis with cqs

  (x1,    , xn) is contained in    (y1,    , ym)   i   

[   ]     suppose         s        (s)         (s)

1.  n = m 
2.  there is  g: g        g   
3.  g(yi) = xi   for all i

14

static analysis with cqs

  (x1,    , xn) is contained in    (y1,    , ym)   i   

{ (h(x1),    , h(xn) )  |  h : g        s } 

[   ]     suppose         s        (s)         (s)

1.  n = m 
2.  there is  g: g        g   
3.  g(yi) = xi   for all i

14

static analysis with cqs

  (x1,    , xn) is contained in    (y1,    , ym)   i   

{ (h(x1),    , h(xn) )  |  h : g        s } 

[   ]     suppose         s        (s)         (s)

1.  n = m 
2.  there is  g: g        g   
3.  g(yi) = xi   for all i

{ (g(y1),    , g(yn) )  |  g : g        s } 

14

static analysis with cqs

  (x1,    , xn) is contained in    (y1,    , ym)   i   

{ (h(x1),    , h(xn) )  |  h : g        s } 

1.  n = m 
2.  there is  g: g        g   
3.  g(yi) = xi   for all i

[   ]     suppose         s        (s)         (s)
if there is  h: g       s    
then there is  g: g       s  such that  h(x1,    , xn) = g(y1,    , ym)

{ (g(y1),    , g(yn) )  |  g : g        s } 

14

static analysis with cqs

  (x1,    , xn) is contained in    (y1,    , ym)   i   

{ (h(x1),    , h(xn) )  |  h : g        s } 

1.  n = m 
2.  there is  g: g        g   
3.  g(yi) = xi   for all i

[   ]     suppose         s        (s)         (s)
if there is  h: g       s    
then there is  g: g       s  such that  h(x1,    , xn) = g(y1,    , ym)
take  s = g    and  h = identity.

{ (g(y1),    , g(yn) )  |  g : g        s } 

14

static analysis with cqs

  (x1,    , xn) is contained in    (y1,    , ym)   i   

{ (h(x1),    , h(xn) )  |  h : g        s } 

1.  n = m 
2.  there is  g: g        g   
3.  g(yi) = xi   for all i

{ (g(y1),    , g(yn) )  |  g : g        s } 

[   ]     suppose         s        (s)         (s)
if there is  h: g       s    
then there is  g: g       s  such that  h(x1,    , xn) = g(y1,    , ym)
take  s = g    and  h = identity.
[   ]  consider s and  (v1,   ,vn)        (s).  
then, (v1,   ,vn) = (h(x1),    , h(xn)) for some  h :  g        s.

14

static analysis with cqs

  (x1,    , xn) is contained in    (y1,    , ym)   i   

{ (h(x1),    , h(xn) )  |  h : g        s } 

1.  n = m 
2.  there is  g: g        g   
3.  g(yi) = xi   for all i

{ (g(y1),    , g(yn) )  |  g : g        s } 

[   ]     suppose         s        (s)         (s)
if there is  h: g       s    
then there is  g: g       s  such that  h(x1,    , xn) = g(y1,    , ym)
take  s = g    and  h = identity.
[   ]  consider s and  (v1,   ,vn)        (s).  
then, (v1,   ,vn) = (h(x1),    , h(xn)) for some  h :  g        s.
since g(y1,    , yn) = (x1,    , xn),  then (v1,    , vn) = h(x1,    , xn) = h(g(y1,    , yn)).

14

static analysis with cqs

  (x1,    , xn) is contained in    (y1,    , ym)   i   

{ (h(x1),    , h(xn) )  |  h : g        s } 

1.  n = m 
2.  there is  g: g        g   
3.  g(yi) = xi   for all i

{ (g(y1),    , g(yn) )  |  g : g        s } 

[   ]     suppose         s        (s)         (s)
if there is  h: g       s    
then there is  g: g       s  such that  h(x1,    , xn) = g(y1,    , ym)
take  s = g    and  h = identity.
[   ]  consider s and  (v1,   ,vn)        (s).  
then, (v1,   ,vn) = (h(x1),    , h(xn)) for some  h :  g        s.
since g(y1,    , yn) = (x1,    , xn),  then (v1,    , vn) = h(x1,    , xn) = h(g(y1,    , yn)).
h    g   is a homomorphism from g   to s.      hence, (v1,    , vn)       (s).

14

static analysis with cqs

problem: cq-equivalence
input:      two cqs    ,    
output:  does    (s) =   (s)  holds for every s ?       (we write              )

15

static analysis with cqs

problem: cq-equivalence
input:      two cqs    ,    
output:  does    (s) =   (s)  holds for every s ?       (we write              )

theorem.   the equivalence problem for cq is np-complete

15

static analysis with cqs

problem: cq-equivalence
input:      two cqs    ,    
output:  does    (s) =   (s)  holds for every s ?       (we write              )

theorem.   the equivalence problem for cq is np-complete

           i   

1.  n = m 
2a.  there is  g: g        g   
2b.  there is  h: g        g   
3a.  g(yi) = xi   for all i 
3b.  h(xi) = yi   for all i

15

static analysis with cqs

problem: cq-equivalence
input:      two cqs    ,    
output:  does    (s) =   (s)  holds for every s ?       (we write              )

theorem.   the equivalence problem for cq is np-complete

           i   

1.  n = m 
2a.  there is  g: g        g   
2b.  there is  h: g        g   
3a.  g(yi) = xi   for all i 
3b.  h(xi) = yi   for all i

amounts to testing if  g   and g    are  hom-equivalent 
                                                        (homomorphisms in both senses)

15

static analysis with cqs

query optimisation: can i simplify the query?

16

static analysis with cqs

query optimisation: can i simplify the query?

problem: cq-minimization
input:      a cq     
output:  is there a smaller cq      such that          ?

smaller = with less number of atoms

16

static analysis with cqs

problem: cq-minimization
input:      a cq     
output:  is there a smaller cq      such that          ?

17

static analysis with cqs

problem: cq-minimization
input:      a cq     
output:  is there a smaller cq      such that          ?

theorem.   the minimization problem for cq is np-complete

17

static analysis with cqs

problem: cq-minimization
input:      a cq     
output:  is there a smaller cq      such that          ?

theorem.   the minimization problem for cq is np-complete

amounts to testing if there is a smaller structure hom-equivalent to g     
    testing if there is a  non-injective endomorphism   
                                                    g: g       g    
the smallest structure hom-equivalent to s  is called the core of s, and 
it is unique.

17

static analysis with cqs

question:       is    =     x,y,z  r(x,y)     r(x,z)     s(z,z)     s(z,y) minimal?  

                          what is its minimal equivalent query? 
answer:

18

static analysis with cqs

question:       is    =     x,y,z  r(x,y)     r(x,z)     s(z,z)     s(z,y) minimal?  

                          what is its minimal equivalent query? 
answer:

s
z

x

r

r

s

y
g   

18

static analysis with cqs

question:       is    =     x,y,z  r(x,y)     r(x,z)     s(z,z)     s(z,y) minimal?  

                          what is its minimal equivalent query? 
answer:

s
z

x

r

r

s

y
g   

hom

r

x

core(g  )

s
z

18

static analysis with cqs

question:       is    =     x,y,z  r(x,y)     r(x,z)     s(z,z)     s(z,y) minimal?  

                          what is its minimal equivalent query? 
answer:

s
z

x

r

r

s

y
g   

hom

r

x

core(g  )

s
z

18

static analysis with cqs

question:       is    =     x,y,z  r(x,y)     r(x,z)     s(z,z)     s(z,y) minimal?  

                          what is its minimal equivalent query? 
answer:

s
z

x

r

r

s

y
g   

s
z

hom

r

x

core(g  )

no!    =     x,z  r(x,z)     s(z,z) is the minimal query s.t.          

18

adding functional dependencies

19

adding functional dependencies

e.g.
key constraints like 
                "column ssn determines column name in the table employees" 
                (component i)                    (component j)        (relation)

19

adding functional dependencies

   a  unary functional dependency  is a sentence of the form
                        x1,   ,xn,y1,   ,yn . r(x1,   ,xn)     r(y1,   ,yn)     (xi = yi) (cid:15482) (xj = yj) 
"r[i   j]" : in relation r the i-th component determines the j-th component

20

adding functional dependencies

   a  unary functional dependency  is a sentence of the form
                        x1,   ,xn,y1,   ,yn . r(x1,   ,xn)     r(y1,   ,yn)     (xi = yi) (cid:15482) (xj = yj) 
"r[i   j]" : in relation r the i-th component determines the j-th component

example:  in the following relation we may enforce the functional dependency 
            =      x, y, z, x', y', z'  r(x, y, z)     r(x', y', z' )     ( x = x' )  (cid:15482)  ( y = y' )

agent

name

drives

007

200

201

3

james bond

aston martin

mr smith

cadillac

mrs smith

mercedes

jason bourne

bmw

20

adding functional dependencies

   a  unary functional dependency  is a sentence of the form
                        x1,   ,xn,y1,   ,yn . r(x1,   ,xn)     r(y1,   ,yn)     (xi = yi) (cid:15482) (xj = yj) 
"r[i   j]" : in relation r the i-th component determines the j-th component

21

adding functional dependencies

   a  unary functional dependency  is a sentence of the form
                        x1,   ,xn,y1,   ,yn . r(x1,   ,xn)     r(y1,   ,yn)     (xi = yi) (cid:15482) (xj = yj) 
"r[i   j]" : in relation r the i-th component determines the j-th component

a structure s veri   es a set of  ufd {  1, . . . ,  n}  if s       1                    n.

21

adding functional dependencies

   a  unary functional dependency  is a sentence of the form
                        x1,   ,xn,y1,   ,yn . r(x1,   ,xn)     r(y1,   ,yn)     (xi = yi) (cid:15482) (xj = yj) 
"r[i   j]" : in relation r the i-th component determines the j-th component

all the previous problems:   

    cq-containment 
    cq-equivalence 
    cq-minimization 
remain in np if we further restrict    nite structures   
so as to satisfy any set of functional dependencies 

22

adding functional dependencies

   a  unary functional dependency  is a sentence of the form
                        x1,   ,xn,y1,   ,yn . r(x1,   ,xn)     r(y1,   ,yn)     (xi = yi) (cid:15482) (xj = yj) 
"r[i   j]" : in relation r the i-th component determines the j-th component

all the previous problems:   

modify the canonical structure g      

    cq-containment 
    cq-equivalence 
    cq-minimization 
remain in np if we further restrict    nite structures   
so as to satisfy any set of functional dependencies 

22

adding functional dependencies

cq        =  r2(x, y, z)     r2(x, y', z')     r1(z, w)     r1(z', w' )   

          under functional dependencies   f={ r1[1   2],  r2: [1   3] }

w

z

y

x

z'

y'

w'

23

adding functional dependencies

cq        =  r2(x, y, z)     r2(x, y', z')     r1(z, w)     r1(z', w' )   

          under functional dependencies   f={ r1[1   2],  r2: [1   3] }

w

z

y

x

z'

y'

w'

23

adding functional dependencies

cq        =  r2(x, y, z)     r2(x, y', z')     r1(z, w)     r1(z', w' )   

          under functional dependencies   f={ r1[1   2],  r2: [1   3] }

w

y

w'

z
z'

x

y'

23

adding functional dependencies

cq        =  r2(x, y, z)     r2(x, y', z')     r1(z, w)     r1(z', w' )   

          under functional dependencies   f={ r1[1   2],  r2: [1   3] }

w

y

w'

z
z'

x

y'

23

adding functional dependencies

cq        =  r2(x, y, z)     r2(x, y', z')     r1(z, w)     r1(z', w' )   

          under functional dependencies   f={ r1[1   2],  r2: [1   3] }

w

z
z'

y'

x

y

23

adding functional dependencies

cq        =  r2(x, y, z)     r2(x, y', z')     r1(z, w)     r1(z', w' )   

          under functional dependencies   f={ r1[1   2],  r2: [1   3] }

w

z
z'

y'

x

y

=  chasef(g  )   (the chased canonical structure)

      chasef(g  )  is unique and    
  can be constructed in polynomial time

23

adding functional dependencies

       cq 
fd's f={fd1,    , fdn}

chase

chasef(  )     cq

24

adding functional dependencies

       cq 
fd's f={fd1,    , fdn}

chase

chasef(  )     cq

the static analysis problems restricted to fd's can now be also shown in np

   cq-containment 

      f       i       chasef(  )     chasef(  ) 

   cq-equivalence 

   cq-minimization

      f       i       chasef(  )     chasef(  ) 
   is minimal wrt    
structures verifying f      

i       chasef(  ) is minimal

24

acyclic cq   s : de   nition

on graphs: cq    is acyclic if g   is tree-like

25

acyclic cq   s : de   nition

on graphs: cq    is acyclic if g   is tree-like

underlying 

undirected graph is 

acyclic

25

acyclic cq   s : de   nition

on graphs: cq    is acyclic if g   is tree-like

underlying 

undirected graph is 

acyclic

     (x,y) =    z . e(x,z)     e(z,t)     e(y,z)

x

z

t

y

25

acyclic cq   s : de   nition

on graphs: cq    is acyclic if g   is tree-like

underlying 

undirected graph is 

acyclic

     (x,y) =    z . e(x,z)     e(z,t)     e(y,z)

x

z

t

acyclic

y

25

acyclic cq   s : de   nition

on graphs: cq    is acyclic if g   is tree-like

     (x,y) =    z . e(x,z)     e(z,t)     e(y,z)

x

acyclic

     (x,y) =    z . e(x,z)     e(z,t)     e(y,z)     e(x,y)

x

underlying 

undirected graph is 

acyclic

z

z

t

t

y

y

25

acyclic cq   s : de   nition

on graphs: cq    is acyclic if g   is tree-like

     (x,y) =    z . e(x,z)     e(z,t)     e(y,z)

x

acyclic

     (x,y) =    z . e(x,z)     e(z,t)     e(y,z)     e(x,y)

x

n o n   a c y c l i c

underlying 

undirected graph is 

acyclic

z

z

t

t

y

y

25

acyclic cq   s

on graphs: cq    is acyclic if g   is tree-like

26

acyclic cq   s

on graphs: cq    is acyclic if g   is tree-like

on general structures: a cq    is acyclic if it has a join tree

  (  ) =    z   . r1(z  1)             rm(z  m)

26

acyclic cq   s

on graphs: cq    is acyclic if g   is tree-like

on general structures: a cq    is acyclic if it has a join tree

  (  ) =    z   . r1(z  1)             rm(z  m)

a join tree is a tree t st: 
     nodes are the atoms ri(z  i) 
    for every variable x of    the set of  ri(z  i)   s with x     z  i forms a subtree of t

26

acyclic cq   s

on graphs: cq    is acyclic if g   is tree-like

on general structures: a cq    is acyclic if it has a join tree

  (  ) =    z   . r1(z  1)             rm(z  m)

if x occurs in 

two nodes, then it occurs in 
the path linking the two 

a join tree is a tree t st: 
     nodes are the atoms ri(z  i) 
    for every variable x of    the set of  ri(z  i)   s with x     z  i forms a subtree of t

nodes.

26

acyclic cq   s

on graphs: cq    is acyclic if g   is tree-like

alternatively, if its 

canonical hyper-graph is 

  -acyclic.

on general structures: a cq    is acyclic if it has a join tree

  (  ) =    z   . r1(z  1)             rm(z  m)

if x occurs in 

two nodes, then it occurs in 
the path linking the two 

a join tree is a tree t st: 
     nodes are the atoms ri(z  i) 
    for every variable x of    the set of  ri(z  i)   s with x     z  i forms a subtree of t

nodes.

26

acyclic cq   s

     (x,y) =    z . e(x,z)     e(z,t)     e(y,z)

e(x,z)

e(y,z)

e(z,t)

join tree

      =    x,y,z,t . r(x,y,z)     s(z,t)     s(x,z)     t(z)     t(x)

s(z,t)

s(z,t)

s(x,z)

t(x)

s(x,z)

t(x)

r(x,y,z)

t(z)

not a join tree

r(x,y,z)

t(z)
a join tree

27

acyclic cq   s

the evaluation problem for acyclic cq sentences is in o(|  |.|d|)

[yannakakis]

the semi-join

r    {i1=j1,   ,in=jn} s = { (x1,   ,xn)     r | there is (y1,   ,ym)     s 
                                                                    where xik = yjk for all k} 

note:  r    {i1=j1,   ,in=jn} s         r

28

