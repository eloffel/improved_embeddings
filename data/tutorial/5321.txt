day 4

esslli 2016 
bolzano, italy

        

logical foundations of databases

diego figueira

gabriele puppis

cnrs     labri

recap

    conjunctive queries  (correspondence with sql and relational algebra) 

    homomorphisms and canonical structure 

    evaluation of cq  (np-completeness) 

    containment, equivalence, minimisation of cq  (np-completeness) 

    extension to functional dependencies  (chased canonical structure) 

    acyclic conjunctive queries

acyclic cq   s : de   nition

on graphs: cq    is acyclic if g   is tree-like

3

acyclic cq   s : de   nition

on graphs: cq    is acyclic if g   is tree-like

underlying 

undirected graph is 

acyclic

3

acyclic cq   s : de   nition

on graphs: cq    is acyclic if g   is tree-like

underlying 

undirected graph is 

acyclic

     (x,y) =    z . e(x,z)     e(z,t)     e(y,z)

x

z

t

y

3

acyclic cq   s : de   nition

on graphs: cq    is acyclic if g   is tree-like

underlying 

undirected graph is 

acyclic

     (x,y) =    z . e(x,z)     e(z,t)     e(y,z)

x

z

t

acyclic

y

3

acyclic cq   s : de   nition

on graphs: cq    is acyclic if g   is tree-like

     (x,y) =    z . e(x,z)     e(z,t)     e(y,z)

x

acyclic

     (x,y) =    z . e(x,z)     e(z,t)     e(y,z)     e(x,y)

x

underlying 

undirected graph is 

acyclic

z

z

t

t

y

y

3

acyclic cq   s : de   nition

on graphs: cq    is acyclic if g   is tree-like

     (x,y) =    z . e(x,z)     e(z,t)     e(y,z)

x

acyclic

     (x,y) =    z . e(x,z)     e(z,t)     e(y,z)     e(x,y)

x

n o n   a c y c l i c

underlying 

undirected graph is 

acyclic

z

z

t

t

y

y

3

acyclic cq   s

on graphs: cq    is acyclic if g   is tree-like

4

acyclic cq   s

on graphs: cq    is acyclic if g   is tree-like

on general structures: a cq    is acyclic if it has a join tree

  (  ) =    z   . r1(z  1)             rm(z  m)

4

acyclic cq   s

on graphs: cq    is acyclic if g   is tree-like

on general structures: a cq    is acyclic if it has a join tree

  (  ) =    z   . r1(z  1)             rm(z  m)

a join tree is a tree t st: 
     nodes are the atoms ri(z  i) 
    for every variable x of    the set of  ri(z  i)   s with x     z  i forms a subtree of t

4

acyclic cq   s

on graphs: cq    is acyclic if g   is tree-like

on general structures: a cq    is acyclic if it has a join tree

  (  ) =    z   . r1(z  1)             rm(z  m)

if x occurs in 

two nodes, then it occurs in 
the path linking the two 

a join tree is a tree t st: 
     nodes are the atoms ri(z  i) 
    for every variable x of    the set of  ri(z  i)   s with x     z  i forms a subtree of t

nodes.

4

acyclic cq   s

on graphs: cq    is acyclic if g   is tree-like

alternatively, if its 

canonical hyper-graph is 

  -acyclic.

on general structures: a cq    is acyclic if it has a join tree

  (  ) =    z   . r1(z  1)             rm(z  m)

if x occurs in 

two nodes, then it occurs in 
the path linking the two 

a join tree is a tree t st: 
     nodes are the atoms ri(z  i) 
    for every variable x of    the set of  ri(z  i)   s with x     z  i forms a subtree of t

nodes.

4

acyclic cq   s

     (x,y) =    z . e(x,z)     e(z,t)     e(y,z)

e(x,z)

e(y,z)

e(z,t)

join tree

      =    x,y,z,t . r(x,y,z)     s(z,t)     s(x,z)     t(z)     t(x)

s(z,t)

s(z,t)

s(x,z)

t(x)

s(x,z)

t(x)

r(x,y,z)

t(z)

not a join tree

r(x,y,z)

t(z)
a join tree

5

acyclic cq   s

     1 = r(x1,x2,x3)     r(x1,x6,x5)     r(x3,x4,x5) 

join tree?

6

acyclic cq   s

     1 = r(x1,x2,x3)     r(x1,x6,x5)     r(x3,x4,x5) 

join tree?

r(x3,x4,x5)

r(x1,x2,x3)

r(x1,x6,x5)  ?

6

acyclic cq   s

     1 = r(x1,x2,x3)     r(x1,x6,x5)     r(x3,x4,x5) 

join tree?

r(x3,x4,x5)
r(x1,x2,x3)

r(x1,x2,x3)
r(x1,x6,x5)

r(x1,x6,x5)  ?
r(x3,x4,x5)  ?

6

acyclic cq   s

     1 = r(x1,x2,x3)     r(x1,x6,x5)     r(x3,x4,x5) 

join tree?

r(x3,x4,x5)
r(x1,x2,x3)

r(x1,x2,x3)
r(x1,x6,x5)

r(x1,x6,x5)  ?
r(x3,x4,x5)  ?

     2 = r(x1,x2,x3)     r(x1,x6,x5)     r(x3,x4,x5)     r(x1,x3,x5)

join tree?

6

acyclic cq   s

     1 = r(x1,x2,x3)     r(x1,x6,x5)     r(x3,x4,x5) 

join tree?

r(x3,x4,x5)
r(x1,x2,x3)

r(x1,x2,x3)
r(x1,x6,x5)

r(x1,x6,x5)  ?
r(x3,x4,x5)  ?

     2 = r(x1,x2,x3)     r(x1,x6,x5)     r(x3,x4,x5)     r(x1,x3,x5)

join tree?

r(x3,x4,x5)

r(x1,x3,x5)

r(x1,x2,x3)

r(x1,x6,x5)

6

acyclic cq   s

the evaluation problem for acyclic cq sentences is in o(|  |.|d|)

[yannakakis]

the semi-join

r    {i1=j1,   ,in=jn} s = { (x1,   ,xn)     r | there is (y1,   ,ym)     s 
                                                                    where xik = yjk for all k} 

note:  r    {i1=j1,   ,in=jn} s         r

7

acyclic cq   s

the evaluation problem for acyclic cq sentences is in o(|  |.|d|)

[yannakakis]

1. compute the join tree t for    

2. populate the nodes of t with corresponding relations of d 
3. for every leaf s(x1,   ,xn) with parent r(y1,   ,ym) perform   

r    {i=j |xi = yj} s

and delete the leaf s(x1,   ,xn). 

4. repeat until we are left with one node. if it contains a non-empty 

relation, then d satis   es   , otherwise it does not.

8

   
acyclic cq   s

the evaluation problem for acyclic cq sentences is in o(|  |.|d|)

[yannakakis]

in linear time

1. compute the join tree t for    

2. populate the nodes of t with corresponding relations of d 
3. for every leaf s(x1,   ,xn) with parent r(y1,   ,ym) perform   

r    {i=j |xi = yj} s

and delete the leaf s(x1,   ,xn). 

4. repeat until we are left with one node. if it contains a non-empty 

relation, then d satis   es   , otherwise it does not.

8

   
acyclic cq   s

the evaluation problem for acyclic cq sentences is in o(|  |.|d|)

[yannakakis]

1. compute the join tree t for    

in linear time

2. populate the nodes of t with corresponding relations of d 
3. for every leaf s(x1,   ,xn) with parent r(y1,   ,ym) perform   

tuples from the  parent 
that do not match a tuple 

remove all the 

from the child

r    {i=j |xi = yj} s

and delete the leaf s(x1,   ,xn). 

4. repeat until we are left with one node. if it contains a non-empty 

relation, then d satis   es   , otherwise it does not.

8

   
acyclic cq   s

the evaluation problem for acyclic cq sentences is in o(|  |.|d|)

[yannakakis]

in linear time

1. compute the join tree t for    

2. populate the nodes of t with corresponding relations of d 
3. for every leaf s(x1,   ,xn) with parent r(y1,   ,ym) perform   

r    {i=j |xi = yj} s

and delete the leaf s(x1,   ,xn). 

4. repeat until we are left with one node. if it contains a non-empty 

relation, then d satis   es   , otherwise it does not.

8

   
acyclic cq   s

(combined c.)
the evaluation problem for acyclic cq sentences is in o(|  |.|d|)

      =    x,y,z,t . r(x,y,z)     s(z,t)     s(x,z)     t(z)     t(x)

r={(1,4,4),(4,1,4)} 
s={(4,5),(5,2),(4,4)} 
t={1,2,3,4}

r(x,y,z)

s(z,t)

s(x,z)

t(z)

t(x)

9

acyclic cq   s

(combined c.)
the evaluation problem for acyclic cq sentences is in o(|  |.|d|)

      =    x,y,z,t . r(x,y,z)     s(z,t)     s(x,z)     t(z)     t(x)

r={(1,4,4),(4,1,4)} 
s={(4,5),(5,2),(4,4)} 
t={1,2,3,4}

s(z,t)

:{(4,5),(5,2),(4,4)}

s(x,z)

:{(4,5),(5,2),(4,4)}

r(x,y,z)

:{(1,4,4),(4,1,4)}

t(z)

:{1,2,3,4}

t(x)

:{1,2,3,4}

9

acyclic cq   s

(combined c.)
the evaluation problem for acyclic cq sentences is in o(|  |.|d|)

      =    x,y,z,t . r(x,y,z)     s(z,t)     s(x,z)     t(z)     t(x)

r={(1,4,4),(4,1,4)} 
s={(4,5),(5,2),(4,4)} 
t={1,2,3,4}

s(z,t)

:{(4,5),(5,2),(4,4)}

s(x,z)

:{(4,5),(5,2),(4,4)}

r(x,y,z)

:{(1,4,4),(4,1,4)}

t(z)

:{1,2,3,4}

t(x)

:{1,2,3,4}

9

acyclic cq   s

(combined c.)
the evaluation problem for acyclic cq sentences is in o(|  |.|d|)

      =    x,y,z,t . r(x,y,z)     s(z,t)     s(x,z)     t(z)     t(x)

r={(1,4,4),(4,1,4)} 
s={(4,5),(5,2),(4,4)} 
t={1,2,3,4}

s(z,t)

:{(4,5),(5,2),(4,4)}

s(x,z)

:{(4,5),(5,2),(4,4)}

r(x,y,z)

:{(1,4,4),(4,1,4)}

t(z)

:{1,2,3,4}

t(x)

:{1,2,3,4}

9

acyclic cq   s

(combined c.)
the evaluation problem for acyclic cq sentences is in o(|  |.|d|)

      =    x,y,z,t . r(x,y,z)     s(z,t)     s(x,z)     t(z)     t(x)

r={(1,4,4),(4,1,4)} 
s={(4,5),(5,2),(4,4)} 
t={1,2,3,4}

s(z,t)

:{(4,5),(5,2),(4,4)}

s(x,z)

:{(4,5),(5,2),(4,4)}

r(x,y,z)

:{(1,4,4),(4,1,4)}

t(z)

:{1,2,3,4}

t(x)

:{1,2,3,4}

9

acyclic cq   s

(combined c.)
the evaluation problem for acyclic cq sentences is in o(|  |.|d|)

      =    x,y,z,t . r(x,y,z)     s(z,t)     s(x,z)     t(z)     t(x)

r={(1,4,4),(4,1,4)} 
s={(4,5),(5,2),(4,4)} 
t={1,2,3,4}

s(z,t)

:{(4,5),(5,2),(4,4)}

s(x,z)

:{(4,5),(5,2),(4,4)}

r(x,y,z)

:{(1,4,4),(4,1,4)}

t(z)

:{1,2,3,4}

t(x)

:{1,2,3,4}

9

acyclic cq   s

(combined c.)
the evaluation problem for acyclic cq sentences is in o(|  |.|d|)

      =    x,y,z,t . r(x,y,z)     s(z,t)     s(x,z)     t(z)     t(x)

r={(1,4,4),(4,1,4)} 
s={(4,5),(5,2),(4,4)} 
t={1,2,3,4}

s(z,t)

:{(4,5),(5,2),(4,4)}        

s(x,z)

:{(4,5),(5,2),(4,4)}

r(x,y,z)

:{(1,4,4),(4,1,4)}

t(z)

:{1,2,3,4}

t(x)

:{1,2,3,4}

9

acyclic cq   s

how to compute a join tree?

gyo reducts [graham, yu, ozsoyoglu] 
an ear of a hypergraph (v,e) is a hyperedge e in e such that one of the 
following conditions holds: 
     (1) there is a witness e' in e, such that e'     e and each 
             vertex from e is either  
                   (a) only in e or  
                   (b) in e'; or 
     (2) e has no intersection with any other hyperedge.

x4

x7

x6

x5

x3

x2

x1

ears?

10

ears?

x2

x1

x3

x1

x4

x6

x5

x2

x3

11

ears!

de   nition: the gyo reduct of a hyper-graph is the result of  
                       removing ears until no more ears are left.

12

ears!

de   nition: the gyo reduct of a hyper-graph is the result of  
                       removing ears until no more ears are left.

theorem: tfae 
                        the gyo reduct of a hyper graph g is empty 
                        a cq    having g as underlying canonical hyper-graph is acyclic 
                        the hyper graph g is   -acyclic

12

ears!

de   nition: the gyo reduct of a hyper-graph is the result of  
                       removing ears until no more ears are left.

theorem: tfae 
                        the gyo reduct of a hyper graph g is empty 
                        a cq    having g as underlying canonical hyper-graph is acyclic 
                        the hyper graph g is   -acyclic

we can test acyclicity by 
computing the gyo reduct!

12

acyclic cq   s

how to compute a join tree?
gyo algorithm [graham, yu, ozsoyoglu]
given the query    = r1(x1)                  rn(xn) 
consider its canonical structure g   
   for ri(xi) an ear with witness rj(yj) 
   put an edge between ri(xi) and rj(xj), and remove ri from   . 
   repeat.

13

acyclic cq   s

how to compute a join tree?
gyo algorithm [graham, yu, ozsoyoglu]
given the query    = r1(x1)                  rn(xn) 
consider its canonical structure g   
   for ri(xi) an ear with witness rj(yj) 
   put an edge between ri(xi) and rj(xj), and remove ri from   . 
   repeat.

e.g. 
r(x,y,z), s(x,y), t(x,x), r(x,x,y), t(y,y)

13

acyclic cq   s

how to compute a join tree?
gyo algorithm [graham, yu, ozsoyoglu]
given the query    = r1(x1)                  rn(xn) 
consider its canonical structure g   
   for ri(xi) an ear with witness rj(yj) 
   put an edge between ri(xi) and rj(xj), and remove ri from   . 
   repeat.

e.g. 
r(x,y,z), s(x,y), t(x,x), r(x,x,y), t(y,y)

t(x,x)

r(x,y,z)

r(x,x,y)

t(y,y)

s(x,y)

13

acyclic cq   s

how to compute a join tree?
gyo algorithm [graham, yu, ozsoyoglu]
given the query    = r1(x1)                  rn(xn) 
consider its canonical structure g   
   for ri(xi) an ear with witness rj(yj) 
   put an edge between ri(xi) and rj(xj), and remove ri from   . 
   repeat.

e.g. 
r(x,y,z), s(x,y), t(x,x), r(x,x,y), t(y,y)

t(x,x)

r(x,y,z)

r(x,x,y)

t(y,y)

s(x,y)

13

acyclic cq   s

how to compute a join tree?
gyo algorithm [graham, yu, ozsoyoglu]
given the query    = r1(x1)                  rn(xn) 
consider its canonical structure g   
   for ri(xi) an ear with witness rj(yj) 
   put an edge between ri(xi) and rj(xj), and remove ri from   . 
   repeat.

e.g. 
r(x,y,z), s(x,y), t(x,x), r(x,x,y), t(y,y)

t(x,x)

r(x,y,z)

r(x,x,y)

t(y,y)

s(x,y)

13

acyclic cq   s

how to compute a join tree?
gyo algorithm [graham, yu, ozsoyoglu]
given the query    = r1(x1)                  rn(xn) 
consider its canonical structure g   
   for ri(xi) an ear with witness rj(yj) 
   put an edge between ri(xi) and rj(xj), and remove ri from   . 
   repeat.

e.g. 
r(x,y,z), s(x,y), t(x,x), r(x,x,y), t(y,y)

t(x,x)

r(x,y,z)

r(x,x,y)

t(y,y)

s(x,y)

13

acyclic cq   s

how to compute a join tree?
gyo algorithm [graham, yu, ozsoyoglu]
given the query    = r1(x1)                  rn(xn) 
consider its canonical structure g   
   for ri(xi) an ear with witness rj(yj) 
   put an edge between ri(xi) and rj(xj), and remove ri from   . 
   repeat.

e.g. 
r(x,y,z), s(x,y), t(x,x), r(x,x,y), t(y,y)

t(x,x)

r(x,y,z)

r(x,x,y)

t(y,y)

s(x,y)

13

acyclic cq   s

how to compute a join tree?
gyo algorithm [graham, yu, ozsoyoglu]
given the query    = r1(x1)                  rn(xn) 
consider its canonical structure g   
   for ri(xi) an ear with witness rj(yj) 
   put an edge between ri(xi) and rj(xj), and remove ri from   . 
   repeat.

remove ears 
until you   re left 
with only one!

e.g. 
r(x,y,z), s(x,y), t(x,x), r(x,x,y), t(y,y)

t(x,x)

r(x,y,z)

r(x,x,y)

t(y,y)

s(x,y)

13

acyclic cq   s

    evaluation problem for boolean acq   s is logcfl-complete 

[gottlob, leone, scarcello]

    nl     logcfl     ac1     nc2     p

the class of problems 
logspace-reducible to  
a context-free language

14

beyond acyclic cq   s

treewidth = a measure of the cyclicity of (hyper-)graphs

tw : cq     n

for a    xed k,    
     the evaluation pb for queries of tw    k 
can be done in polynomial time.

[chekuri, rajaraman]

idea: the lower tw(  ), the more    resembles a tree

15

tree-width, de   nition

a tree decomposition of a graph g: 
a bunch of graphs with a special edge "           " between their nodes so that  

1) they have a tree shape and   
2) collapsing "           " edges     g

16

tree-width, de   nition

a tree decomposition of a graph g: 
a bunch of graphs with a special edge "           " between their nodes so that  

1) they have a tree shape and   
2) collapsing "           " edges     g

g

16

tree-width, de   nition

a tree decomposition of a graph g: 
a bunch of graphs with a special edge "           " between their nodes so that  

1) they have a tree shape and   
2) collapsing "           " edges     g

g

tree decomposition of g

16

tree-width, de   nition

a tree decomposition of a graph g: 
a bunch of graphs with a special edge "           " between their nodes so that  

1) they have a tree shape and   
2) collapsing "           " edges     g

g

tree decomposition of g

16

tree-width, de   nition

a tree decomposition of a graph g: 
a bunch of graphs with a special edge "           " between their nodes so that  

1) they have a tree shape and   
2) collapsing "           " edges     g

g

tree decomposition of g

16

tree-width, de   nition

a tree decomposition of a graph g: 
a bunch of graphs with a special edge "           " between their nodes so that  

1) they have a tree shape and   
2) collapsing "           " edges     g

g

tree decomposition of g

width of decomposition = maximum size of graphs    1

16

tree-width, de   nition

a tree decomposition of a graph g: 
a bunch of graphs with a special edge "           " between their nodes so that  

1) they have a tree shape and   
2) collapsing "           " edges     g

g

tree decomposition of g

width of decomposition = maximum size of graphs    1
tree-width of g = minimum width of decomposition of g

16

tree-width, examples

(a tree)

tree-width 1

tree-width 2

tree-width n   1

17

tree-width, examples

(a tree)

tree-width 1

tree-width 2

tree-width n   1

tree-width 2

tree-width 4

tree-width n

17

tree-width of structures, queries

tree-width of cq = tree-width of its canonical structure  
tree-width of structure = tree-width of gaifman graph

18

tree-width of structures, queries

tree-width of cq = tree-width of its canonical structure  
tree-width of structure = tree-width of gaifman graph
e.g.
tree-width(    x1,x2,x3 r(x1,x2)     s(x1,x3)     s(x2,x3))

18

tree-width of structures, queries

tree-width of cq = tree-width of its canonical structure  
tree-width of structure = tree-width of gaifman graph
e.g.
tree-width(    x1,x2,x3 r(x1,x2)     s(x1,x3)     s(x2,x3))

=

tree-width(                                        )

x1

r

s

x2

x3

s

18

tree-width of structures, queries

tree-width of cq = tree-width of its canonical structure  
tree-width of structure = tree-width of gaifman graph
e.g.
tree-width(    x1,x2,x3 r(x1,x2)     s(x1,x3)     s(x2,x3))

=

tree-width(                                        )

x1

r

s

x3

s

x2

=

tree-width(                                        ) = 2

18

beyond acyclic cq   s

for a    xed k,    
       - computing whether      cq has tw    k   
       - calculating a tree decomposition   
can be done in linear time.

[bodlaender]

19

tree-width vs. acyclicity

k-bounded arity

unbounded arity

acq

twk   1

acq

twk

20

beyond acyclic cq   s

cq   s with bounded treewidth can be evaluated in ptime

[chekuri, rajaraman, gottlob, leone, scarcello]

21

beyond acyclic cq   s

cq   s with bounded treewidth can be evaluated in ptime

[chekuri, rajaraman, gottlob, leone, scarcello]

cq   s can be evaluated in ptime i    they have bounded tree width!

[grohe, schwentick, segou   n]

21

querying with semi-joins

the semi-join

r    {i1=j1,   ,in=jn} s = { (x1,   ,xn)     r | there is (y1,   ,ym)     s 
                                                                    where xik = yjk for all k}

the semi-join algebra (sa): variant of ra with operations:  
                                    
                                           ,    ,   ,   , \, dupcol

output at most linear in the database. further,

the evaluation problem for sa is in o(|  |.|d|)

logical characterisation:    stored-tuples guarded fragment of fo   

22

acyclic cqs: 
          every intermediate relation is linear in |d| 
         we apply |  | semi-joins

    what if we allow intermediate relations to be polynomial in |d|?

23

bounded variable fo

def.

fok  =  the fragment of fo restricted to  k  variable names

24

bounded variable fo

def.

fok  =  the fragment of fo restricted to  k  variable names

  (x)  =     every neighbour of x has an outgoing path of length 2    
          =     y. ( e(x, y)          z    w ( e(y, z)     e(z, w) ) )        fo4

g

24

bounded variable fo

def.

fok  =  the fragment of fo restricted to  k  variable names

  (x)  =     every neighbour of x has an outgoing path of length 2    
          =     y. ( e(x, y)          z    w ( e(y, z)     e(z, w) ) )        fo4

question: in fo2 ?

g

24

bounded variable fo

def.

fok  =  the fragment of fo restricted to  k  variable names

  (x)  =     every neighbour of x has an outgoing path of length 2    
          =     y. ( e(x, y)          z    w ( e(y, z)     e(z, w) ) )        fo4
          =     y. ( e(x, y)          x (e(y, x)        y e(x, y) ) )        fo2

g

24

bounded variable fo

def.

fok  =  the fragment of fo restricted to  k  variable names

  (x)  =     every neighbour of x has an outgoing path of length 2    
          =     y. ( e(x, y)          z    w ( e(y, z)     e(z, w) ) )        fo4
          =     y. ( e(x, y)          x (e(y, x)        y e(x, y) ) )        fo2

ptime

g

24

bounded variable fo

def.

fok  =  the fragment of fo restricted to  k  variable names

  (x)  =     every neighbour of x has an outgoing path of length 2    
          =     y. ( e(x, y)          z    w ( e(y, z)     e(z, w) ) )        fo4
          =     y. ( e(x, y)          x (e(y, x)        y e(x, y) ) )        fo2

ptime

ptime

g

24

bounded variable fo

def.

fok  =  the fragment of fo restricted to  k  variable names

  (x)  =     every neighbour of x has an outgoing path of length 2    
          =     y. ( e(x, y)          z    w ( e(y, z)     e(z, w) ) )        fo4
          =     y. ( e(x, y)          x (e(y, x)        y e(x, y) ) )        fo2

ptime

g

24

bounded variable fo

def.

fok  =  the fragment of fo restricted to  k  variable names

  (x)  =     every neighbour of x has an outgoing path of length 2    
          =     y. ( e(x, y)          z    w ( e(y, z)     e(z, w) ) )        fo4
          =     y. ( e(x, y)          x (e(y, x)        y e(x, y) ) )        fo2

ptime

ptime

g

24

bounded variable fo

def.

fok  =  the fragment of fo restricted to  k  variable names

  (x)  =     every neighbour of x has an outgoing path of length 2    
          =     y. ( e(x, y)          z    w ( e(y, z)     e(z, w) ) )        fo4
          =     y. ( e(x, y)          x (e(y, x)        y e(x, y) ) )        fo2

ptime

ptime

the evaluation problem for fok is in ptime (combined c.)

g

24

bounded variable fo

the evaluation problem for fok is in ptime (combined c.)

algorithm for a fok formula    of quanti   er rank r:

25

bounded variable fo

the evaluation problem for fok is in ptime (combined c.)

maximum number of nested quanti   ers        x(       y(       x(       z(   ) ) ) )   

algorithm for a fok formula    of quanti   er rank r:

qr 0

25

bounded variable fo

the evaluation problem for fok is in ptime (combined c.)

maximum number of nested quanti   ers        x(       y(       x(       z(   ) ) ) )   

algorithm for a fok formula    of quanti   er rank r:

qr 0

qr 1

25

bounded variable fo

the evaluation problem for fok is in ptime (combined c.)

maximum number of nested quanti   ers        x(       y(       x(       z(   ) ) ) )   

algorithm for a fok formula    of quanti   er rank r:

qr 0

qr 1

qr 2

. . .

25

bounded variable fo

the evaluation problem for fok is in ptime (combined c.)

maximum number of nested quanti   ers        x(       y(       x(       z(   ) ) ) )   

algorithm for a fok formula    of quanti   er rank r:

1. evaluate  qr=0 subformulas      and output result in relations r0,    

2. evaluate  qr=1 subformulas      based on r0,    and output in   r1,   

3. evaluate  qr=2 subformulas      based on r1,    and output in   r1,   

4.   . . . 

.
 
.
 
.

r.   . . .

qr 0

qr 1

qr 2

. . .

25

bounded variable fo

the evaluation problem for fok is in ptime (combined c.)

maximum number of nested quanti   ers        x(       y(       x(       z(   ) ) ) )   

algorithm for a fok formula    of quanti   er rank r:

1. evaluate  qr=0 subformulas      and output result in relations r0,    
                                                                                            |v|k    (|  |    |g|)p
2. evaluate  qr=1 subformulas      based on r0,    and output in   r1,   

3. evaluate  qr=2 subformulas      based on r1,    and output in   r1,   

4.   . . . 

.
 
.
 
.

r.   . . .

qr 0

qr 1

qr 2

. . .

25

bounded variable fo

the evaluation problem for fok is in ptime (combined c.)

maximum number of nested quanti   ers        x(       y(       x(       z(   ) ) ) )   

algorithm for a fok formula    of quanti   er rank r:

qr 0

qr 1

qr 2

. . .

1. evaluate  qr=0 subformulas      and output result in relations r0,    
                                                                                            |v|k    (|  |    |g|)p
2. evaluate  qr=1 subformulas      based on r0,    and output in   r1,   

                                                                              |v|k    (|  |    (|g|+ |r1|))p

3. evaluate  qr=2 subformulas      based on r1,    and output in   r1,   

   |v|k

4.   . . . 

.
 
.
 
.

r.   . . .

25

bounded variable fo

the evaluation problem for fok is in ptime (combined c.)

maximum number of nested quanti   ers        x(       y(       x(       z(   ) ) ) )   

algorithm for a fok formula    of quanti   er rank r:

qr 0

qr 1

qr 2

. . .

1. evaluate  qr=0 subformulas      and output result in relations r0,    
                                                                                            |v|k    (|  |    |g|)p
2. evaluate  qr=1 subformulas      based on r0,    and output in   r1,   

                                                                              |v|k    (|  |    (|g|+ |r1|))p

3. evaluate  qr=2 subformulas      based on r1,    and output in   r1,   

   |v|k

                                                                              |v|k    (|  |    (|g|+ |r2|))p

4.   . . . 

.
 
.
 
.

r.   . . .

   |v|k

25

bounded variable fo

desirable:   

        given k  and a fo query   ,  is    in fok ?               undecidable (even w.o.   ) 

26

bounded variable fo

desirable:   

        given k  and a fo query   ,  is    in fok ?               undecidable (even w.o.   ) 

        given k  and a cq query   ,  is    in fok ?         np-complete 

26

bounded variable fo

desirable:   

        given k  and a fo query   ,  is    in fok ?               undecidable (even w.o.   ) 

        given k  and a cq query   ,  is    in fok ?         np-complete 

        satis   ability for fok                                                                    undecidable if  k   3  (domino) 

                                                                                             nexptime-complete if  k=2

26

recap

equivalence-ra

equivalence-sql

equivalence-fo

cont-cq

eval-fo 
(combined)

eval-cq 
(combined)

sat-fo

domino

qbf

undec.

pspace

3col

sat

np

eval-fok 
(combined)

         acyclic cq 

(combined)

eval-fo 
(data)

ptime

logcfl

logspace
27

definability in fo

goal:   check which  properties / queries  are  expressible in fo 

definability in fo

goal:   check which  properties / queries  are  expressible in fo 

 example.   q (g) = { (u, v)  |  g contains a path from u to v }    
                     is q expressible as a    rst-order formula?

   
definability in fo

 de   nition.   quanti   er rank of      =  max number of nested quanti   ers in   .

definability in fo

 de   nition.   quanti   er rank of      =  max number of nested quanti   ers in   .

 example.       =    x   y (  e(x,y)        z ( (e(x,z)     e(z,x))     (e(y,z)     e(z,y)) ) ) 
                      has quanti   er rank 3. 

definability in fo

 de   nition.   quanti   er rank of      =  max number of nested quanti   ers in   .

 example.       =    x   y (  e(x,y)        z ( (e(x,z)     e(z,x))     (e(y,z)     e(z,y)) ) ) 
                      has quanti   er rank 3. 

quanti   er rank     quantity of quanti   ers

definability in fo

 de   nition.   quanti   er rank of      =  max number of nested quanti   ers in   .

 example.       =    x   y (  e(x,y)        z ( (e(x,z)     e(z,x))     (e(y,z)     e(z,y)) ) ) 
                      has quanti   er rank 3. 

quanti   er rank     quantity of quanti   ers
                 eg, in   0(x, y) =  e(x, y), and    
                               k(x,y)  =     z (   k   1(x, z)       k   1(z, y) ) 
                         qr(  k) = k but # quanti   ers of   k is 2k

definability in fo

 de   nition.   quanti   er rank of      =  max number of nested quanti   ers in   .

 example.       =    x   y (  e(x,y)        z ( (e(x,z)     e(z,x))     (e(y,z)     e(z,y)) ) ) 
                      has quanti   er rank 3. 

quanti   er rank     quantity of quanti   ers
                 eg, in   0(x, y) =  e(x, y), and    
                               k(x,y)  =     z (   k   1(x, z)       k   1(z, y) ) 
                         qr(  k) = k but # quanti   ers of   k is 2k

what does it 

de   ne?

definability in fo

 de   nition.   quanti   er rank of      =  max number of nested quanti   ers in   .

 example.       =    x   y (  e(x,y)        z ( (e(x,z)     e(z,x))     (e(y,z)     e(z,y)) ) ) 
                      has quanti   er rank 3. 

quanti   er rank     quantity of quanti   ers
                 eg, in   0(x, y) =  e(x, y), and    
                               k(x,y)  =     z (   k   1(x, z)       k   1(z, y) ) 
                         qr(  k) = k but # quanti   ers of   k is 2k

quanti   er rank is a measure of complexity of a formula

what does it 

de   ne?

definability in fo

 de   nition.   quanti   er rank of      =  max number of nested quanti   ers in   .

 example.       =    x   y (  e(x,y)        z ( (e(x,z)     e(z,x))     (e(y,z)     e(z,y)) ) ) 
                      has quanti   er rank 3. 

quanti   er rank     quantity of quanti   ers
                 eg, in   0(x, y) =  e(x, y), and    
                               k(x,y)  =     z (   k   1(x, z)       k   1(z, y) ) 
                         qr(  k) = k but # quanti   ers of   k is 2k

what does it 

de   ne?

quanti   er rank is a measure of complexity of a formula
sub-goal:   given a property p and a number n,   
                      tell whether p is expressible by a sentence of quanti   er rank at most n.

definability in fo

 de   nition.   two structures s1 and s2 are   n-equivalent   
                                                                       i         
                          they satisfy the same fo sentences of quanti   er rank     n    
                         ( i.e.  s1         i     s2        for all      fo with qr(  )   n)                       

[tarski    30]

definability in fo

 de   nition.   two structures s1 and s2 are   n-equivalent   
                                                                       i         
                          they satisfy the same fo sentences of quanti   er rank     n    
                         ( i.e.  s1         i     s2        for all      fo with qr(  )   n)                       

[tarski    30]

consider a property  (i.e. a set of structures)  p. 
suppose that there are s1     p, s2     p  s.t.  
                                   s1  and  s2  are  n - equivalent. 
then  p  is  not expressible  by any sentence of quanti   er rank  n. 

definability in fo

 de   nition.   two structures s1 and s2 are   n-equivalent   
                                                                       i         
                          they satisfy the same fo sentences of quanti   er rank     n    
                         ( i.e.  s1         i     s2        for all      fo with qr(  )   n)                       

[tarski    30]

consider a property  (i.e. a set of structures)  p. 
suppose that there are s1     p, s2     p  s.t.  
                                   s1  and  s2  are  n - equivalent. 
then  p  is  not expressible  by any sentence of quanti   er rank  n. 

note:  if the above happens 

    n,  then p is not 
expressible by any fo 

sentence.

definability in fo

 de   nition.   two structures s1 and s2 are   n-equivalent   
                                                                       i         
                          they satisfy the same fo sentences of quanti   er rank     n    
                         ( i.e.  s1         i     s2        for all      fo with qr(  )   n)                       

[tarski    30]

consider a property  (i.e. a set of structures)  p. 
suppose that there are s1     p, s2     p  s.t.  
                                   s1  and  s2  are  n - equivalent. 
then  p  is  not expressible  by any sentence of quanti   er rank  n. 

note:  if the above happens 

    n,  then p is not 
expressible by any fo 

sentence.

 example.   p = { structures of even size }  seems to be not fo-de   nable.   
 one could then aim at proving that   
                        for all n there are s1     p  and s2     p  s.t.   s1 , s2  n-equivalent   

expressive power via games

expressive power via games

characterisation of the expressive power of fo in terms of games

expressive power via games

characterisation of the expressive power of fo in terms of games

idea:   for every two structures (s,s') there is a game where

a player of the game has a winning strategy  

i     

s,s' are indistinguishable

ehrenfeucht-fra  ss   games

a game between two players

s1 and s2 are   
n-equivalent!

no they   re 
not!!!!

duplicator

spoiler

board:  (s1, s2)

one player plays in one structure, the other player answers in the other structure.

if duplicator can ensure not losing after n rounds:  s1, s2 are n-equivalent

ehrenfeucht-fra  ss   games

 de   nition.   partial isomorphism between s1 and s2   =    injective partial map  
                                                                   f :  nodes of s1       nodes of s2 
                         so that                             e(x,y)   i      e( f (x), f (y) )

ehrenfeucht-fra  ss   games

 de   nition.   partial isomorphism between s1 and s2   =    injective partial map  
                                                                   f :  nodes of s1       nodes of s2 
                         so that                             e(x,y)   i      e( f (x), f (y) )

                           and                               play for  n  rounds on the board s1, s2

duplicator

spoiler

ehrenfeucht-fra  ss   games

 de   nition.   partial isomorphism between s1 and s2   =    injective partial map  
                                                                   f :  nodes of s1       nodes of s2 
                         so that                             e(x,y)   i      e( f (x), f (y) )

spoiler

duplicator

                           and                               play for  n  rounds on the board s1, s2
at each round  i :   
1.        spoiler chooses a node  xi  from s1  
            and duplicator answers with a node  yi  from s2,

ehrenfeucht-fra  ss   games

 de   nition.   partial isomorphism between s1 and s2   =    injective partial map  
                                                                   f :  nodes of s1       nodes of s2 
                         so that                             e(x,y)   i      e( f (x), f (y) )

spoiler

duplicator

                           and                               play for  n  rounds on the board s1, s2
at each round  i :   
1.        spoiler chooses a node  xi  from s1  
            and duplicator answers with a node  yi  from s2,
or   
2.        spoiler chooses a node  yi  from s2  
            and duplicator answers with a node  xi  from s1,

ehrenfeucht-fra  ss   games

 de   nition.   partial isomorphism between s1 and s2   =    injective partial map  
                                                                   f :  nodes of s1       nodes of s2 
                         so that                             e(x,y)   i      e( f (x), f (y) )

spoiler

duplicator

                           and                               play for  n  rounds on the board s1, s2
at each round  i :   
1.        spoiler chooses a node  xi  from s1  
            and duplicator answers with a node  yi  from s2,
or   
2.        spoiler chooses a node  yi  from s2  
            and duplicator answers with a node  xi  from s1,

or           spoiler wins  if  { xi     yi  | 1     i     n}  is not a partial isomorphism between s1 and s2.

ehrenfeucht-fra  ss   games

s1

s2

= spoiler

= duplicator

ehrenfeucht-fra  ss   games

s1

1

s2

= spoiler

= duplicator

ehrenfeucht-fra  ss   games

s1

1

1

s2

= spoiler

= duplicator

ehrenfeucht-fra  ss   games

2

s1

1

1

s2

= spoiler

= duplicator

ehrenfeucht-fra  ss   games

2

1

s1

2

1

s2

= spoiler

= duplicator

ehrenfeucht-fra  ss   games

2

1

s1

2

1

3

s2

= spoiler

= duplicator

ehrenfeucht-fra  ss   games

question: can spoiler win in 3 rounds ?

s1

s2

= spoiler

= duplicator

ehrenfeucht-fra  ss   games

question: can spoiler win in 3 rounds ?

1

s1

s2

= spoiler

= duplicator

ehrenfeucht-fra  ss   games

question: can spoiler win in 3 rounds ?

1

1

s1

s2

= spoiler

= duplicator

ehrenfeucht-fra  ss   games

question: can spoiler win in 3 rounds ?

1

1

2

s1

s2

= spoiler

= duplicator

ehrenfeucht-fra  ss   games

question: can spoiler win in 3 rounds ?

1

2

s1

s2

1

2

= spoiler

= duplicator

ehrenfeucht-fra  ss   games

question: can spoiler win in 3 rounds ?

1

3

2

s1

1

2

s2

= spoiler

= duplicator

