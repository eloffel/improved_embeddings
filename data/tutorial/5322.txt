day 5

esslli 2016 
bolzano, italy

        

logical foundations of databases

diego figueira

gabriele puppis

cnrs     labri

recap

    acyclic conjunctive queries 

    join trees 

    evaluation of acq (logcfl-complete) 

    ears, gyo algorithm for testing acyclicity 

    tree decomposition, tree-width of cq 

    evaluation of bounded tree-width cqs (logcfl-complete) 

    bounded variable fragment of fo, evaluation in ptime 

    acyclic conjunctive queries

ehrenfeucht-fra  ss   games

s1 and s2 are   
n-equivalent!

no they   re 
not!!!!

duplicator

spoiler

they play for  n  rounds on the board (s1, s2).   
at each round  i :   spoiler chooses a node  xi  from s1  (resp.  yi from s2)  
                                                     duplicator answers with a node  yi  from s2  (resp.  xi  from s1)   
                                    trying to maintain an isomorphism between   s1 | {xi}i   and   s2 | {yi}i  

ehrenfeucht-fra  ss   games

on  non-isomorphic     nite  structures,  spoiler wins eventually               why?
                                                   and he often wins very quickly:

1

2

1

2

2n - 1 nodes

2n  nodes

but there are  non-isomorphic  in   nite  structures   
where duplicator can survive for  arbitrarily many rounds  (not necessarily forever!)

1

2

   

given n,   

at each round i = 1,    , n,   

pairs of marked nodes in s1 and s2   
must be either at equal distance   

or at distance     2n - i 

any idea?

1

2

           

ehrenfeucht-fra  ss   games

 theorem.   s1 and s2 are  n - equivalent 
              i       duplicator has a strategy to survive n rounds in the ef game on s1 and s2 .

[fra  ss   '50, ehrenfeucht '60]

proof ideas for the if-direction (from duplicator   s winning strategy to n - equivalence)

consider      with quanti   er rank n.                   suppose  s1         and  duplicator survives n rounds on s1, s2 .  
                                                                                     we need to prove that s2        .

a new game to evaluate formulas   .

the semantics game

assume w.l.o.g. that      is in  negation normal form.

push negations inside: 

                      
                      

  (         )                     

   

whether  s         can be decided by a new game between two players, true and false:   
       = e(x,y)                 true wins if nodes marked x and y are connected by an edge, otherwise he loses   
       =     x    '(x)            true moves by marking a node  x  in  s, the game continues with   '   
       =     y    '(y)            false moves by marking a node  y  in  s, the game continues with   '   
       =   1       2               true moves by choosing    1  or    2, the game continues with what he chose   

       =   1       2               false moves by choosing    1  or    2, the game continues with what he chose   

       

 lemma.   s          i      true wins the semantics game.

   
ehrenfeucht-fra  ss   games

 theorem.   s1 and s2 are  n - equivalent 
              i       duplicator has a strategy to survive n rounds in the ef game on s1 and s2 .

[fra  ss   '50, ehrenfeucht '60]

proof ideas for the if-direction (from duplicator   s winning strategy to n - equivalence)

true wins the game on s1

consider      with quanti   er rank n.                   suppose  s1         and  duplicator survives n rounds on s1, s2 .  
                                                                                     we need to prove that s2        .

true wins the game on s2

turn winning strategy for true in s1  into winning strategy for true in s2    .

ehrenfeucht-fra  ss   games

 theorem.   s1 and s2 are  n - equivalent 
              i       duplicator has a strategy to survive n rounds in the ef game on s1 and s2 .

[fra  ss   '50, ehrenfeucht '60]

proof ideas for the if-direction (from duplicator   s winning strategy to n - equivalence)

true wins the game on s1

consider      with quanti   er rank n.                   suppose  s1         and  duplicator survives n rounds on s1, s2 .  
                                                                                     we need to prove that s2        .

d

f

t

s

s1

s

f

d

t

s2

definability in fo

 theorem.   s1 and s2 are  n - equivalent 
              i       duplicator has a strategy to survive n rounds in the ef game on s1 and s2 .

[fra  ss   '50, ehrenfeucht '60]

corollary.   a property p is  not de   nable in fo 
                i          n       s1     p       s2     p   duplicator can survive n rounds on s1 and s2 .

example:  p = { connected graphs }.   given n,  take  s1     p  large enough  and  s2 = s1     s1     p

   

   

   

2

1

1

2

   

   

   

ehrenfeucht-fra  ss   games
several properties can be proved to be not fo-de   nable:   

      connectivity

( previous slide )

      even / odd size

your turn now!         given n,  take   s1 = large even structure   
                                                                 s2 = large odd structure   

      2-colorability

given n,  take   s1 = large even cycle    s2 = large odd cycle

   

   

         niteness

      acyclicity

     

   

   

0-1 law

a di   erent perspective:  a coarser view on expressiveness   

what percentage of graphs verify a given fo sentence?

0-1 law

  n(p)  =    id203 that property p holds in a random graph with n nodes   

uniform distribution 
( each pair of nodes has an   
      edge with id203    )

e.g.  for p =    the graph is complete      
  3(p) =              =1

1
232
 

| c3 |

cn  = { graphs with n nodes }

  n(p)  = 

| {g     cn | g     p} |

| cn |

=

2n2

 

     (p)  =   lim      n(p)

n        

0-1 law

 theorem.  
                    for every  fo sentence   ,       (    )  is either  0  or  1 .

[glebskii et al.    69, fagin    76]

examples: 
        =    there is a triangle                                      3(   )  =  1/|c3|        3n(   )      1     (1    1/|c3|)n       1
      h =    there is an occurrence of h as induced sub-graph                   (   h ) = 1

       =    there no 5-clique                                                                                (    ) = 0

       =    even number of edges                           

       =    even number of nodes                           
       =    more edges than nodes                                                                     (    ) = 1   
                                                                                                                   ( yet not fo-de   nable! )

your turn!

     (   ) = 1/2
     (    )  not even de   ned

0-1 law

 for every fo sentence   ,        (    )  is either 0 or 1.

let  k  = quanti   er rank of    
          k =     x1,    , xk     y1,    , yk      z     i,j  xi     yj     e(xi, z)       e(yj, z)   
                 ( extension formula/axiom )

z

 fact 1:   if  g       k       h       k  then   
                 duplicator survives k rounds on g, h

 fact 2:        (   k ) = 1   
                 (   k is almost surely true )

2 cases

a)  there is g    g       k          (cid:15482)  (by fact 1)      h  :   if  h       k  then  h           

                                                                                                                  thus,          (   k )          (    )   
                                                (cid:15482)  (by fact 2)       (   k ) = 1,    hence       (    ) = 1

b)  there is no  g       k            (cid:15482)   (by fact 2)  there is g       k ,    
                                                      (cid:15482)   g       k              (cid:15482)   (by case a)       (      ) = 1

0-1 law

 for every fo sentence   ,        (    )  is either 0 or 1,  and this depends on whether  rado       

each pair of nodes i, j 

is connected if   
i-th bit of j is 1

rado = 

each pair of nodes i, j 
is connected with  
id203 1/2

 the unique 
graph that 
satis   es 
  k for all k

0-1 law

 theorem.  the problem of deciding whether   
                      an fo sentence is  almost surely true  (      = 1)  is  pspace-complete.

[grandjean    83]

unsatisfiable    
  formulas

almost surely   
false formulas

almost surely   
true formulas

   valid    
formulas

undecidable

pspace

undecidable

query evaluation on large databases: 
don   t bother evaluating an fo query,   
it   s either almost surely true or almost surely false!

0-1 law

does the 0-1 law apply to real-life databases? 
not quite:   database  constraints  easily spoil extension axiom. 

consider:   

    functional constraint      x, x   , y, y      ( e(x,y)      e(x,y   ) (cid:15482) y = y    )          
                                                                 ( e(x,y)      e(x   ,y) (cid:15482) x = x    )                (e is a permutation) 

    fo query       =        x  e(x, x)  

id203 that a permutation e satis   es     =  !n/n!       e -1  =  0.3679   

0-1 law only applies to unconstrained databases   

another technique: locality

idea: first order logic can only express    local    properties

local = properties of nodes which are close to one another

hanf locality

 de   nition.  the gaifman graph of a structure s = ( v, r1,     , rm ) is the undirected graph 
                         gs = ( v, e )   where   e = { (u, v) |     (   , u,    , v,    )     ri  for some i }

007

200

201

3

agent

name

drives

james bond

mr smith

car
the gaifman graph of  

aston martin

a graph g is the underlying 
cadillac

undirected graph.

aston martin

cadillac

mrs smith

mercedes

jason bourne

bmw

mercedes

bmw

007

aston martin

201

james bond

mr smith

uk

usa

mrs smith

jason bourne

200

cadillac

3

country

uk

usa

germany

germany

mercedes

germany

bmw

hanf locality

    dist (u, v)  =  distance between u and v in the gaifman graph 
    s [u, r]       =  sub-structure induced by  { v | dist (u, v)     r }  =  ball around u of radius r

agent

name

drives

car

country

007

200

201

3

james bond

aston martin

mr smith

cadillac

mrs smith

mercedes

u

jason bourne

bmw

aston martin

cadillac

mercedes

u

bmw

007

aston martin

201

james bond

mr smith

uk

usa

mrs smith

jason bourne

200

cadillac

3

uk

usa

germany

germany

u

mercedes

germany

bmw

hanf locality

 de   nition.  two structures s1 and s2 are  hanf (r, t) - equivalent 
             i       for each structure b ,   the two numbers  

    #u  s.t.  s1 [u, r]     b            #v  s.t.  s2 [v, r]     b 

                    are  either the same  or  both     t .

example.  s1 , s2 are hanf (1, 1) - equivalent i    they have the same balls of radius 1

hanf locality

 de   nition.  two structures s1 and s2 are  hanf (r, t) - equivalent 
             i       for each structure b ,   the two numbers  

    #u  s.t.  s1 [u, r]     b            #v  s.t.  s2 [v, r]     b 

                    are  either the same  or  both     t .

example.  kn , kn+1 are not hanf (1, 1) - equivalent

hanf locality

 theorem.  if  s1 , s2  are  hanf (r, t) - equivalent, with r = 3n and t = n    
                                 then s1 , s2 are  n - equivalent  ( they satisfy the same sentences with quanti   er rank n )   
[hanf '60]

                                            

exercise:  prove that  acyclicity  is not fo-de   nable  ( on    nite structures )

   

   

   
hanf locality

 theorem.  s1 , s2 are  n - equivalent  ( they satisfy the same sentences with quanti   er rank n ) 
                      whenever  s1 , s2  are  hanf (r, t) - equivalent, with r = 3n and t = n .   
                                            

[hanf '60]

exercise:  prove that testing whether a binary tree is  complete  is not fo-de   nable

hanf locality

 theorem.  s1 , s2 are  n - equivalent  ( they satisfy the same sentences with quanti   er rank n ) 
                      whenever  s1 , s2  are  hanf (r, t) - equivalent, with r = 3n and t = n .   
                                            

[hanf '60]

why so big?

remember   k(x,y) =    there is a path of length 2k from x to y   

                               0(x, y) =  e(x, y), and    
                               k(x,y)  =     z (   k   1(x, z)       k   1(z, y) ) 
                         qr(  k) = k

   

   

2  2n+1
not (n+2)-equivalent yet they have the same 2n   1 balls.

2  2n

gaifman locality

what about queries?

eg: is reachability expressible in fo?

what about equivalence on the same structure?  
when are two points indistinguishable?

gaifman locality

s [(a1,    , an), r]  =  induced substructure of s  
                                     of elements at distance     r of some ai in the gaifman graph.

s:

a1

a2

s [(a1, a2),1]

gaifman locality

s [(a1,    , an), r]  =  induced substructure of s  
                                     of elements at distance     r of some ai in the gaifman graph.

gaifman locality

for any        fo of quanti   er rank k and structure s,  
                                 s [(a1,    , an), r]      s [(b1,    , bn), r]   for  r = 3k+1  
                                                            implies 
                             (a1,    , an)       (s)   i       (b1,    , bn)       (s)

idea: if the neighbourhoods of two tuples are the same,    
           the formula cannot distinguish them.

gaifman locality vs hanf locality

di   erence between hanf- and gaifman-locality:

hanf-locality relates two 
di   erent structures, 

gaifman-locality talks about 
de   nability in one structure

s1 and s2 have the same # of balls 
of radius 3k, up to threshold k

inside s, 
3k+1-balls of (a1,   ,an) = 3k+1-balls of (b1,   ,bn)

(cid:15482)

they verify the same  
sentences of qr     k

(cid:15482)

(a1,   ,an) indistinguishable from (b1,   ,bn)   
through formulas of qr     k

gaifman locality

schema to show non-expressibility results is, as usual:

a query q(x1,   ,xn) is not fo-de   nable if: 
               for every k there is a structure sk and (a1,    , an), (b1,    , bn) such that 
                            sk [(a1,    , an), 3k+1]     sk [(b1,    , bn), 3k+1] 
                            (a1,    , an)     q(sk),   (b1,    , bn)     q(sk)

proof: if q were expressible with a formula of quanti   er rank k, 
             then  (a1,    , an)     q(sk)  i     (b1,    , bn)     q(sk).    absurd!

gaifman locality

reachability is not fo de   nable.

for every k, we build sk :
and sk [(a1, a2), 3k+1]      sk [(b1, b2), 3k+1]

however,  
               b2 is reachable from b1, 
                    a2 is not reachable from a1.

2  3k+1
a1

b1

   

2  3k+1

   

a2

b2

your turn! q(x) =    x is a vertex separator   

gaifman theorem

basic local sentence:

    x1 ,    , xn

r
x1

. . .

r
xn

r
x2

disjoint r-balls around x1,    , xn

      1(x1)                      n(xn)

r-local formulas

inside    i(xi)  we interpret   
   y .     as     y . d(xi, y)     r       

gaifman theorem:   every fo sentence is equivalent to  
                                        a boolean combination of basic local sentences.

recap

fo sentences with quanti   er rank n

ef games

=

winning strategies for spoiler in the n-round ef game

0-1 law

fo sentences are almost always true or almost always false

hanf locality

fo sentences with quanti   er rank n

=

counting 3n sized balls up to n

gaifman locality

queries of quanti   er rank n output tuples closed under 3n+1 balls.

gaifman theorem

an fo sentence can only say  
          there are some points at distance    2r  
         whose r-balls are isomorphic to certain structures    
or a boolean combination of that.

some more cool stu      
descriptive complexity
what properties can be checked e   ciently?      e.g.   3col can be tested in np  

   metatheorem 
      
      a property can be expressed in  [insert some logic here]  
                                            i     
                         it can be checked in  [some complexity class here]   

       a property is fo-de   nable i    it can be tested in ac0      

       a property is    so-de   nable i    it can be tested in np    

[fagin 73]

    open problem: which logic captures ptime?

some more cool stu      
recursion
can we enhance query languages with recursion ?    e.g.  express reachability properties  

   datalog                                    (semantics based on least    xpoint) 
  
      ancestor(x,y)   :-        parent(x,z),   ancestor(z,y)   
      ancestor(x,x)   :-        .   
      ?-        ancestor(   louis   xiv   ,y)

    incomparable with fo  (has recursion, but is monotone) 

    evaluation is in ptime  (for data complexity, but also for bounded arity)

some more cool stu      
semi-structured data
tree-structured or graph-structures dbs in place of relational dbs.

  xml,  xpath,  stream processing,      
  
   <catalog>   
         <book   id="1">   
               <title>xml   developer's   guide</title>   
               <author>matthew   gambardella</author>   
               <year>2000</year>   
         </book>   
         <book   id="2">   
               <title>beginning   xml</title>   
               <author>david   hunter</author>   
               <author>david   gibbons</author>   
               <year>2007</year>   
         </book>   
               
      <catalog>

    evaluation of xpath is in linear time  (data complexity)   
    satis   ability for fo2[   ,~] is decidable

[bojanczyk, parys 08]
[bojanczyk, muscholl, schwentick, segou   n 09]

some more cool stu      
incomplete information
how to correctly reason when information is hidden/missing/noisy/    ?

  certain query answers (cqa) 
  

v

   v   

      v      =     d        v        (d)

     cqa computable in ptime w.r.t. view size.

[abiteboul, kanellakis, grahne 91]

   
bibliography

     abiteboul, hull, vianu,    foundations of databases   , addison-wesley, 1995.   
     (available at  http://webdam.inria.fr/alice/) 

    libkin,    elements of finite model theory   , springer, 2004. 

     immerman,    descriptive complexity   , springer, 1999. 

    otto,    finite model theory   , springer, 2005   
  (available at www.mathematik.tu-darmstadt.de/~otto/lehre/fmt0809.ps) 
     v    n  nen,    a short course on finite model theory   , 1994.   
  (available at www.math.helsinki.fi/logic/people/jouko.vaananen/shortcourse.pdf)

38

