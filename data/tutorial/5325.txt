computational 
semantics: day 5 

johan bos 
university of groningen 
www.rug.nl/staff/johan.bos 

computational semantics 

       day 1: exploring models 
       day 2: meaning representations 
       day 3: computing meanings with dcg 
       day 4: computing meanings with id35 
       day 5: drawing id136s and meaning banking 

drawing id136s 
      by now we know how to produce semantic 
representations for natural language expressions 
      but how can we use them to automate the 
process of drawing id136s? 

proof-theoretical semantics 

models 

lexical  
semantics 

compositional 

semantics 

discourse 
semantics 

proofs 

inductive id136 

abductive 
id136 

deductive 
id136 

abductive reasoning (abduction) 
guessing for an explanation... 
 
 
 
 
   the dog is wet. 
    
? it   s raining outside. 
? it jumped in the pool.    

inductive reasoning (induction) 
making generalizations... 
 
 
this dog has four legs. 
that dog has four legs. 
and that one. and this one. 
and that one too. 
all dogs have four legs. 
 

inductive reasoning (induction) 
making generalizations... 
 
 
this dog has four legs. 
that dog has four legs. 
and that one. and this one. 
and that one too. 
all dogs have four legs. 
 

deductive reasoning (deduction) 
drawing conclusions from a set of premises 
 
every dog jumped in the pool. 
fido is a dog. 
fido jumped in the pool. 

the three id136 tasks 

the consistency checking task 

 

 

the informativeness checking task 

 

 

the querying task  

 

 

the three id136 tasks 

 

the consistency checking task 
theorem prover + model builder 

 

the informativeness checking task 
theorem prover + model builder 

 

the querying task 
model checker  

but hey, isn   t id85... 
       yes indeed, id85 is undecidable.  
in fact, it is semi-decidable.  
 
       but what does this mean?  
can we do anything about this?  
are we in trouble? 

no general algorithmic solution 
       we already dealt with the querying task (lecture 1/2) 
       the consistency/informativeness  
checking tasks are undecidable 

       but there are partial solutions  
to be explored: 
       use theorem provers for negative tests 
       use model builders for positive tests  

controlling id136 

  x     p   

higher-order logic 

   p     p 

second-order logic 

 
r
e
w
o
p

 

i

e
v
s
s
e
r
p
x
e

   x 
     x 

id85 (predicate logic) 
discourse  

representation  

structure 

[]    <> 

          
        v    

modal logics 

description logics 

id118 

undecidable 

semi-decidable 

decidable 

theorem proving 

       the task of checking whether a formula (or a set of 
formulas) is a validity (a theorem), or put differently, 
checking whether that formula is true in all models 

       input: formula   
    output: proof (if you   re lucky) 
 
       theorem proving serves to check whether input is 
inconsistent and uninformative!   

(i.e., recognizing id123) 

 

   
   
example 1: steve 

steve visited only bologna. 
steve visited bologna and pisa. 

i n c o n s i s t e n t

 

 

example 2: bush 

 

n o t
i n f o r m a t

   ... when there's more trade, there's more commerce."  
 
 
 
 
 
 
 
 
 
george w. bush, at the summit of the americas in quebec city,  
april 21, 2001 (source: language log 24/10/2004) 

i v e  

theorem proving vs model building 
       theorem provers check for logical validity 

       is  a formula    true in all possible situations? 
       output: proof 
       useful for: detecting contradictory and non-informative texts 

       model builders check for satisfiability 
       is  a formula    true in at least one situation? 
       output: model 
       useful for: detecting consistent and informative texts 
 

example 3: james 

james visited rome. 
james visited only rome. 

 
c o n s i s t e n t
i v e  
i n f o r m a t

the yin and yang of id136 

theorem proving and model building  

function as opposite forces 

id136 

finding consistent and  
informative sentences 

models 

model 
building 

lexical  
semantics 

compositional 

semantics 

discourse 
semantics 

theorem  
proving 

proofs 

finding inconsistencies  

and tautologies 

consistency/informativeness checking 
          is inconsistent wrt   1...   n means  
that   (  1     ...       n)             is valid 
 
          is uninformative wrt   1...   n means  
that   (  1     ...       n)           is valid 
 

 
        validity is defined in terms of models:  
        a valid formula is one that is satisfied in all models 
 
        but there are infinitely many models...  

proof methods 
      recall the method of truth tables 

       it doesn   t scale up  
       and can   t be extended to id85 

      in this lecture we will look at two specific 
methods: semantic tableau and resolution 
      we will first look at how this is done for  
id118. why?  
 
because it is a lot simpler than id85! 
(dealing with quantifiers and equality is a tricky business) 

propositional tableaus 
       systematic syntactic check for answering the following 
(semantic) question: 
 
suppose we are given a formula and a truth value  
(true of false). is is possible to find a model in which the 
given formula has the given truth value? 

       if we had such a systematic check at our disposal, we 
would be able to test formulas for validity. why? 
 
a formula is valid if and only if it is not possible to falsify it 
in any model 

a refutation proof method 
       a formula is valid if and only if it is not possible to falsify it 
in any model 
       if tableau can tell us that there is no way to build a model 
that falsifies a formula, then this formula is valid 
       so what we do is this:  
  
    we show that a formula is valid by showing  
             that all attempts to falsify it fail 

the tableau system 
       we will develop tableau expansion rules  
       they work by breaking down complex formulas into  
their component formulas 
       we will work through three examples. first example: 
 
  p v   p 
 
  this is clearly a validity. why? let   s try to falsify it. 

the tableau expansion rules 

t     

f   

f     

t   

t(       ) 

t   
t   

f(   v	
   ) 

f   
  
f   

f(         ) 

t   
f   

f(       ) 

f             f   

t(  	
 v	
   ) 

  

t             t   

t(         ) 

f             t   

signed formulas 
       we need a nice piece of notation. here it is: 

  writing f   will mean that we want to falsify     
  writing t   will mean that we want to make    true 

       t and f are called signs.  
a formula preceded by a sign is called a signed formula. 

proving validity of   p v   p  
1.    f(p v   p) 

 
 
 
how do you make a disjunction false? 

proving validity of   p v   p  
1.    f(p v   p)        
2.    fp              1, fv 
3.    f  p            1, fv 

 
 
this expansion rule is called fv 
 
the     records the fact that we applied an expansion 
rule to it (broke it into smaller pieces) 
 

proving validity of   p v   p  
1.    f(p v   p)        
2.    fp              1, fv 
3.    f  p            1, fv      
4.    tp              3, f   

 
 
this expansion rule is called f    
 
 
 

proving validity of   p v   p  
1.    f(p v   p)        
2.    fp              1, fv 
3.    f  p            1, fv      
4.    tp              3, f   

 
 
two important observations about this tableau:  
 
(1) it is rule-saturated. we can   t expand it further. 
(2) it is closed. it contains contradictory wishes: 
      we have to make p false (line 2) and we have to  
      make p true (line 4) 

 

proving validity of   p v   p  
1.    f(p v   p)        
2.    fp              1, fv 
3.    f  p            1, fv      
4.    tp              3, f   

 
 
it contains all (just one in this case) possibilities to falsify 
p v   p. we fail to do this. hence p v   p is valid. we call 
this a closed tableau (or a tableau proof). 

proving validity of     (q   r)     (  q v   r)   
1.    f  (q   r)     (  q v   r)     

proving validity of     (q   r)     (  q v   r)  
1.    f  (q   r)     (  q v   r)        
2.    t  (q   r)                   1, f      
3.    f(  q v   r)                1, f       
 
 
 

proving validity of     (q   r)     (  q v   r)  
1.    f  (q   r)     (  q v   r)        
2.    t  (q   r)                   1, f      
3.    f(  q v   r)                1, f          
4.    f   q                         3, fv 
5.    f   r                          3, fv 
 
 
 
   hey! don   t we skip line 2?  
   no we don   t. we   re free to apply the rules in any order. 

proving validity of     (q   r)     (  q v   r)  

1.    f  (q   r)     (  q v   r)        
2.    t  (q   r)                   1, f      
3.    f(  q v   r)                1, f          
4.    f   q                         3, fv     
5.    f   r                          3, fv 
6.    t q                           4, f   
 
 
 
 

proving validity of     (q   r)     (  q v   r)  

1.    f  (q   r)     (  q v   r)        
2.    t  (q   r)                   1, f      
3.    f(  q v   r)                1, f          
4.    f   q                         3, fv     
5.    f   r                          3, fv     
6.    t q                           4, f   
7.    t r                            5, f   

 

proving validity of     (q   r)     (  q v   r)  

1.    f  (q   r)     (  q v   r)        
2.    t  (q   r)                   1, f          
3.    f(  q v   r)                1, f          
4.    f   q                         3, fv     
5.    f   r                          3, fv     
6.    t q                           4, f   
7.    t r                            5, f   
8.    f q   r                        2, t   

proving validity of     (q   r)     (  q v   r)  

1.    f  (q   r)     (  q v   r)        
2.    t  (q   r)                   1, f          
3.    f(  q v   r)                1, f          
4.    f   q                         3, fv     
5.    f   r                          3, fv     
6.    t q                           4, f   
7.    t r                            5, f   
8.    f q   r                        2, t       

9.    f q        8, f     

10.    f r        8, f     

can we further expand this tableau? 

1.    f  (q   r)     (  q v   r)        
2.    t  (q   r)                   1, f          
3.    f(  q v   r)                1, f          
4.    f   q                         3, fv     
5.    f   r                          3, fv     
6.    t q                           4, f   
7.    t r                            5, f   
8.    f q   r                        2, t       

9.    f q        8, f     

10.    f r        8, f     

how many branches does this tableau contain? 

1.    f  (q   r)     (  q v   r)        
2.    t  (q   r)                   1, f          
3.    f(  q v   r)                1, f          
4.    f   q                         3, fv     
5.    f   r                          3, fv     
6.    t q                           4, f   
7.    t r                            5, f   
8.    f q   r                        2, t       

9.    f q        8, f     

10.    f r        8, f     

are all branches closed? 

branch 1: 
closed (why?) 

1.    f  (q   r)     (  q v   r)        
2.    t  (q   r)                   1, f          
3.    f(  q v   r)                1, f          
4.    f   q                         3, fv     
5.    f   r                          3, fv     
6.    t q                           4, f   
7.    t r                            5, f   
8.    f q   r                        2, t       

9.    f q        8, f     

10.    f r        8, f     

are all branches closed? 

branch 1: 
closed (why?) 

branch 2: 
closed (why?) 

1.    f  (q   r)     (  q v   r)        
2.    t  (q   r)                   1, f          
3.    f(  q v   r)                1, f          
4.    f   q                         3, fv     
5.    f   r                          3, fv     
6.    t q                           4, f   
7.    t r                            5, f   
8.    f q   r                        2, t       

9.    f q        8, f     

10.    f r        8, f     

nice so far, but ... 
... what happens if the formula we are working  
    which is not a validity? 

checking validity of  (p   q)     (r v s)  

1.    f(p   q)     (r v s) 

checking validity of  (p   q)     (r v s)  

1.    f(p   q)     (r v s)        
2.    t(p   q)                1, f       
3.    f(r v s)                1, f       

checking validity of  (p   q)     (r v s)  

1.    f(p   q)     (r v s)        
2.    t(p   q)                1, f          
3.    f(r v s)                1, f       
4.    tp                        2, t    
5.    tq                        2, t   	
 

checking validity of  (p   q)     (r v s)  

1.    f(p   q)     (r v s)         
2.    t(p   q)                 1, f          
3.    f(r v s)                 1, f          
4.    tp                        2, t    
5.    tq                        2, t   	
 
6.    fr                         3, fv 
7.    fs                        3, fv 
 

checking validity of  (p   q)     (r v s)  

1.    f(p   q)     (r v s)         
2.    t(p   q)                 1, f          
3.    f(r v s)                 1, f          
4.    tp                        2, t    
5.    tq                        2, t   	
 
6.    fr                         3, fv 
7.    fs                        3, fv 
 

can we further expand this tableau? 
how many (closed) branches are there? 

checking validity of  (p   q)     (r v s)  

1.    f(p   q)     (r v s)         
2.    t(p   q)                 1, f          
3.    f(r v s)                 1, f          
4.    tp                        2, t    
5.    tq                        2, t   	
 
6.    fr                         3, fv 
7.    fs                        3, fv 
 

can we further expand this tableau?              no 
how many (closed) branches are there?        1 (open) 
because we are able to falsify the formula, it is not a validity 

checking validity of  (p   q)     (r v s)  

1.    f(p   q)     (r v s)         
2.    t(p   q)                 1, f          
3.    f(r v s)                 1, f          
4.    tp                        2, t    
5.    tq                        2, t   	
 
6.    fr                         3, fv 
7.    fs                        3, fv 
 

(p   q)     (r v s)  is false in a model  
                       where p is true, q is true, r is false, and s is false  

definitions 
       a branch of a tableau is a closed branch if it contains 
both t   and f  , where    is some formula 
       a branch that is not closed is called an open branch 
       a tableau with all of its branches closed is  
called a closed tableau 
       a tableau with at least one open branch 
is called an open tableau 

semantic tableaux 
       the tableaux method can be used to check for validities 
(try to falsify a formula, and show that this attempt fails in 
all possible ways) 
       but it can also be used to build a model, i.e. showing that 
a formula is not a contradiction 
       these models can be useful for many applications --- 
think of our image domain! 
 
 
in sum: a tableaux system can be used both  
             as a theorem prover and as a model builder 

proof theory & automated reasoning 
       investigate logical validity from a purely syntactic 
perspective 
       various proof methods and theorem provers that 
implement them 
       crucial:  
              only make use of the syntactic  
              structure of formulas 

       examples:  

       tableau methods (previous lecture) 
       resolution methods (this lecture) 

propositional resolution 
       introduce a second technique for checking the validity of 
propositional formulas: the resolution method 
       it is, like tableau, purely symbolic  
       but unlike tableau it uses only one rule (the resolution 
rule), and needs preprocessing (conversion to cnf). 

conjunctive normal form (cnf) 
       positive literals (sentence symbols: p, q, r, s, ...) 
       negative literals (negated sentence symbols:   p,   q, ...) 
       literals: positive or negative literals 
       clause: a disjunction of literals 
       cnf: a conjunction of clauses 
 
       example of a formula in cnf: 
 
       (p v q)     (r v   p v s)     (q v   s)   

conjunctive normal form (cnf) 
       positive literals (sentence symbols: p, q, r, s, ...) 
       negative literals (negated sentence symbols:   p,   q, ...) 
       literals: positive or negative literals 
       clause: a disjunction of literals 
       cnf: a conjunction of clauses 
 
       example of a formula in cnf: 
 
       (p v q)    	
 (r	
 v	
   p	
 v	
 s)	
    	
 (q	
 v	
   s)	
   

literals 

conjunctive normal form (cnf) 
       positive literals (sentence symbols: p, q, r, s, ...) 
       negative literals (negated sentence symbols:   p,   q, ...) 
       literals: positive or negative literals 
       clause: a disjunction of literals 
       cnf: a conjunction of clauses 
 
       example of a formula in cnf: 
 
       (p v q)    	
 (r	
 v	
   p	
 v	
 s)	
    	
 (q	
 v	
   s)	
   

clauses 

key semantic observation: clause 
       to make a clause true, we have to make at least one of its 
literals true (after all, a clause is a disjunction). 
       special case: the empty clause, written as [ ] 
 
the empty clause contains no literals.  
hence it is impossible to make at least one of them true. 
hence it is impossible to make the empty clause true. 

key semantic observation: cnf 
       for a formula in cnf to be true, all the clauses it contains 
(all of the conjuncts) must be true. 
       hence, if a formula in cnf has the empty clause as one 
of its conjuncts, it can never be true. 

conversion to cnf 
       given an arbitrary formula. how do we get it into cnf? 

       one method (there are more):  

       first translate it to negation normal form (nnf) 
       then repeatedly apply the distributive and associative rules 

       what is nnf?  

       it is a formula built out of literals, conjunction, and disjunction. 

conversion to nnf 
       rewrite        (       )      as          v	
       
        and        (   v   )     as            	
       

drive 

negations 
inwards 

       rewrite        (           )    as          	
       
        and                          as         v	
    

eliminate 
implications 

       rewrite                         as        

remove 
double 

negations 

from nnf to cnf  

drive conjunction 

outwards 

(distribution rules) 

       rewrite         v (       )      as    (   v   )    	
 (   v   ) 
       rewrite      (       ) v         as    (   v   )    	
 (   v   ) 

       rewrite      (       )             as         (         ) 
       rewrite      (   v	
   ) v         as       v	
 (   v   ) 

move brackets 

(associativity rules) 

the cnf list of lists notation 
 
 (p v q)    	
 (r	
 v	
   p	
 v	
 s)	
    	
 (q	
 v	
   s)	
 
	
 
[[p,q],[r,  p,s],[q,  s]]	
   

clauses 

set cnf 
the resolution algorithm assumes an input formula  
in set cnf (also called clause sets): 
       none of the clauses may contain a repeated literal 
       no clause occurs more than once 
 
 
example:  [[p,  q,  r],[r,q,r]] is not in set cnf. why? 
 
           but [[p,  q,  r],[r,q]] is. 

(why does this make sense?) 

more terminology 
       complementary pairs (resolvents) 
       complementary clauses 
 
 
 
say we have two clauses c and c   . if c contains a 
positive literal (say r) and c    its negation (  r), then c and 
c    are complementary clauses. moreover, r and   r are a 
complementary pair (are resolvents) 

the binary resolution rule 
       input:  
two complementary clauses 
       output:  
one clause obtained by merging the two complementary 
clauses while removing the resolvents 

 
      [p1,...,pm, r ,pm+1,...,pn]   [q1,...,qi,   r ,qi+1,...,qj] 
 
 
   
           [p1,...,pm,pm+1,...,pn, q1,...,qi,qi+1,...,qj]       

why does this make sense? 
p v q             q 
-------------------- 
          p 
 
 
if   q is true, then q is false, so to make p v q true, p needs 
to be true 

why does this make sense? 
p v q             q v r 
------------------------ 
          p v r 
 
 
it is impossible that both p and r are false (because in that 
case, either p v q is false, or   q v r is false).  

example 1 
proof: (p v   p).  i.e. try to falsify it. 
 
  (p v   p) 
(  p         p) 
(  p     p) 
 
[[p],[  p]] 
[[]] 
 
empty clause, hence proof. 

example 2 
proof:    (q   r)     (  q v   r) 
 
  (  (q   r)     (  q v   r)) 
(  (q   r)       (  q v   r)) 
(  q v   r)    (q     r) 
 
[-q,-r],[q],[r] 
[-r],[r] 
[] 
 
 

moving to id85 
       the tableaux expansion rules are defined for propositional 
logic. what consequences does moving to fol have? 
1.    we need tableaux expansion rules for the universal and 

existential quantifier (see blackburn & bos chapter 5) 

2.    non-deterministic aspects: the universal quantifier expansion 

rule can be applied multiple times 

3.    skolem terms for the existential quantifier expansion rules 
4.    unification with occurs-check 
5.    expansion rules for the equality symbol 

 

these directions go beyond the scope of this course. instead, we will 
have a look at off-the-shelf model builders 

which theorem provers?  
which model builders? 

world cup automated deduction  
(annual event, casc) 
       best theorem provers  

(bliksem, otter, spass, vampire) 

       best model builders  

(mace, paradox) 

off-the-shelf model builders 
       there are several model builders for id85 
available (free, easy to install and use) 
       in this course we will use the  
model builder mace-2, developed  
by william mccune (1953--2011) 
  

using the model builder mace-2 
       downloads: http://www.cs.unm.edu/~mccune/mace2/ 

(it comes together with the (famous) theorem prover otter) 

       the blackburn & bos software contains an interface to mace: it is 
called callid136.pl 
 
       example query: 

?- callmb(some(x,and(woman(x),walk(x))),4,model,engine). 
model = model([d1],[f(0,c1,d1),f(1,woman,[d1]),f(1,walk,
[d1])]), 
engine = mace. 
 
?- callmb(all(x,imp(woman(x),walk(x))),4,model,engine). 
model = model([d1],[f(1,woman,[]),f(1,walk,[])]), 
engine = mace. 
 

more about mace 
       mace builds finite models  
       there are models that are infinitely large; so model 
builders such as mace try to build a model up to a given 
domain size (the second argument of callmb/4) 
       model builders (obviously) don   t know anything about the 
world! 
 
?- callmb(some(x,and(man(x),woman(x))),4,model,engine). 

model = model([d1],[f(0,c1,d1),f(1,man,[d1]),f(1,woman,[d1])]), 
engine = mace. 
 
 

reflection 
       what can we use theorem provers for? 
       what can we use model builders for? 
       other uses of the model checker? 
 
 
 
 
           general purpose     specific applications 

logicians vs. linguists 

suppose we got a theory    

logician 

linguist 

proof    
model    

proof      
model      

logicians vs. linguists 

suppose we got a theory    

logician 

linguist 

j    

proof    
model    

proof      
model      

logicians vs. linguists 

suppose we got a theory    

logician 

linguist 

j    

l    

proof    
model    

proof      
model      

logicians vs. linguists 

suppose we got a theory    

logician 

linguist 

j    
l    

l    

proof    
model    

proof      
model      

logicians vs. linguists 

suppose we got a theory    

logician 

linguist 

j    
l    

l    
j    

proof    
model    

proof      
model      

logicians vs. linguists 

suppose we got a theory    

logician 

linguist 

proof    
model    

proof      
model      

j    
l    
j    
l    

l    
j    
l    
j    

logician vs. linguists 

summing up: 

       the logician thinks in terms  

of proofs and counter-models 

       the linguist thinks in terms of  
models and counter-proofs 

