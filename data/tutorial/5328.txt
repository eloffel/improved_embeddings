graph search 

algorithms

steve mussmann and abi see

shortest path problems

find the shortest path from source        to target

applications: robotics

commercial

search & rescue

domestic

applications: route-planning

applications: game-playing

tic-tac-toe

go

graphs

graphs have nodes and edges.

how many nodes are there?

how many edges?

graphs

we cast real-world problems as graphs.

graphs

graphs can be undirected or directed.

edges can have weights.

7

3

1

8

10

how to represent grids as graphs?

how to represent grids as graphs?

each cell is a node. edges connect adjacent cells.

walls have no edges

graph traversal

algorithms

graph traversal algorithms

    these algorithms specify an order to search through 

the nodes of a graph.

    we start at the source node and keep searching until 

we find the target node.

    the frontier contains nodes that we've seen but 

haven't explored yet.

    each iteration, we take a node off the frontier, and 

add its neighbors to the frontier.

breadth first search demo

cs.stanford.edu/people/abisee/tutorial/bfs.html 

breadth first search vs. depth first search

bfs uses "first in first out".

dfs uses "last in first out".

this is a queue.

this is a stack.

depth first search demo

cs.stanford.edu/people/abisee/tutorial/dfs.html 

activity: bfs vs dfs

cs.stanford.edu/people/abisee/tutorial/bfsdfs.html 

explore:
    try moving the source and target
    try drawing walls

discussion

    does bfs necessarily return the shortest path?

    note that bfs explores nodes in the order of 

increasing distance.

    does dfs necessarily return the shortest path?
    once the target is found, how does the algorithm 

obtain the path itself?
    disadvantages of bfs?
    disadvantages of dfs?

greedy best first 

search

every step, greedy best first moves in the direction of the target.

a greedy algorithm is one that chooses 
the best-looking option at each step.

greedy best first algorithm

    recall: bfs and dfs pick the next node off the 
frontier based on which was "first in" or "last in".

    greedy best first picks the "best" node according to 

some rule of thumb, called a heuristic.

definition: a heuristic is an approximate measure of how 
close you are to the target. 

a heuristic guides you in the right direction.

heuristics for greedy best first

    we want a heuristic: a measure of how close we are to 

the target.

    a heuristic should be easy to compute.

    try euclidean distance or manhattan distance.
    these are approximations for the actual shortest path, 

but easier to compute.

heuristics for greedy best first

    why is the manhattan distance heuristic only an 

approximation for the true shortest path?
    answer: walls!

    a heuristic is often the solution for an easier version of 
the problem, that leaves out the constraints (e.g. walls)

activity

we name a problem, you suggest a heuristic

an easy-to-compute 

approximation of 

how close you are to 

the target

problem: google maps route-planning

what is a possible heuristic?

want: cat               dog

cad

cut

pat

cat

cop

pot

dot

cot

con

fog

log

dog

cog

problem: "mutate the word" game

what is a possible heuristic?

problem: find the shortest chain of facebook friends that 

goes from person a to person b

what is a possible heuristic?

problem: find a sequence of moves to win

what is a possible heuristic?

greedy best first demo and activity

cs.stanford.edu/people/abisee/tutorial/greedy.html 

challenge: trick greedy best first!
can you draw the walls so that greedy best first comes up 
with a path that is much longer than breadth first search?

discussion

    recall: breadth first search is optimal (always returns 

the shortest path). is greedy best first also optimal?

    strengths of greedy best first?
    weaknesses of greedy best first?
    how might you improve greedy best first?

id67
not so easily tricked...

id67

developed by                                             at stanford 

peter hart
nils nilsson 
bertram raphael 

in 1968 to help shakey the robot 
navigate a room of obstacles.

now in the computer history museum!

id67

    id67 combines the strengths of breadth first 

search and greedy best first.

    like bfs, it finds the shortest path, and like greedy 

best first, it's fast.

    each iteration, a* chooses the node on the frontier 

which minimizes:

steps from source + approximate steps to target

like bfs, looks at nodes close 
to source first (thoroughness)

like greedy best first, uses heuristic to 
prioritize nodes closer to target (speed)

id67 demo and activity

cs.stanford.edu/people/abisee/tutorial/astar.html 

explore:
    try moving the source and target
    try drawing the walls

discussion

    which algorithm was fastest?
    which explored the most area before finding the 

target?

    do a* and bfs always find the same path?

a* is optimal

theorem: if the heuristic function is a lower bound for the 
true shortest path to target, i.e.

heuristic(node)     shortest_path(node,target)

for all nodes, then id67 is optimal (always finds the 
shortest path).

proof idea: the heuristic is optimistic so it never ignores a 
good path. as all good paths are explored, we therefore 
discover the optimal path.

algorithms for 
weighted graphs

example: google maps

17

27

26

19

30

14

13

20

27

weight of edge = time to travel

incorporates information like:
    length of road
    speed limit
    current traffic conditions

now we want the minimum cost path

terrain to weighted graph

how to alter our algorithms?

minimum number of steps
minimum cost path

dijkstra's algorithm

    like bfs for weighted graphs. 

   

if all costs are equal, dijkstra = bfs!

    explores nodes in increasing order of cost from 

source.

    let   s work through some examples on the board!

dijkstra contour demo

cs.stanford.edu/people/abisee/tutorial/dijkstra.html 

weighted a*

regular a* priority function:

steps from source + approximate steps to target

weighted a* priority function:

cost from source + approximate cost to target

activity: dijkstra vs weighted a*

cs.stanford.edu/people/abisee/tutorial/customize.html 

explore:
    can you alter the map so that a* finishes much more 

quickly than dijkstra? 

    do dijkstra and weighted a* ever find paths of 

different lengths?

    do dijkstra and weighted a* ever find different paths?
    is dijkstra or weighted a* faster?

    always or just sometimes?

recap

search algorithms for unweighted and weighted graphs

breadth first search

first in first out, optimal but slow

depth first search

last in first out, not optimal and meandering

greedy best first

goes for the target, fast but easily tricked

id67

"best of both worlds": optimal and fast

dijkstra

explores in increasing order of cost, optimal but slow

weighted a*

optimal and fast

questions?
about this or anything else...

