computational 
semantics: day 2 

johan bos 
university of groningen 
www.rug.nl/staff/johan.bos 

computational semantics 

       day 1: exploring models 
       day 2: meaning representations 
       day 3: computing meanings 
       day 4: drawing id136s 
       day 5: meaning banking 

questions after yesterday   s lecture 
       inferring from observations (   flying bird   ) 
       (too?) detailed lexical semantics for verbs 
       small (?) dataset of image models in grim  
       adding probabilities 
       what are the    zero-place    symbols? 

the big picture 

tomorrow 

semantic 
semantic 
parsing 
parsing 

natural 
language 
statement 

true 

or 

false 

model 

extraction 

yesterday 

meaning 

model 

checking 

model 

constructing basic formulas 
       suppose we   re given a model m and want to check 
whether this model satisfies certain descriptions 
       for instance, perhaps we  
want to check whether there  
is a cat present 

constructing basic formulas 
       suppose we   re given a model m and want to check 
whether this model satisfies certain descriptions 
       for instance, perhaps we  
want to check whether there  
is a cat present 
       we could construct a formula by applying the one-place 
non-logical symbol cat to a variable, say x: 
 
           cat(x) 
 

constructing basic formulas 
       suppose we   re given a model m and want to check 
whether this model satisfies certain descriptions 
       for instance, perhaps we  
want to check whether there  
is a cat present 
       we could construct a formula by applying the one-place 
non-logical symbol cat to a variable, say x: 
 
           cat(x) 
 
       we can now check whether m satisfies this formula, but 
we need the help of an assignment function 

variable assignment function 
       an assignment function maps all variables in a formula to 
an entity in the model   s domain 
       usually a lowercase letter g is used to denote an 
assignment function 

variable assignment function 
       an assignment function maps all variables in a formula to 
an entity in the model   s domain 
       usually a lowercase letter g is used to denote an 
assignment function 
       for instance, for two variables x and y and a domain with 
three entities d1, d2, and d3, the following assignment 
functions are possible: 
       g1(x)=d1, g1(y)=d1 
       g2(x)=d1, g2(y)=d2 
       g3(x)=d1, g3(y)=d3 
       g4(x)=d2, g4(y)=d1, 
etc. 

satisfaction 
       suppose we have this model: 
  and assignment: g(x)=d1 
  and this formula: cat(x) 

m=<d,f> 
d={d1,d2,d3} 
f(cat)={d2} 
f(dog)={d1,d3} 
f(touches)={(d3,d2)} 

  does this model satisfy this formula wrt g? 
 
                                  m,g |= cat(x) ? 
 
   

satisfaction 
       suppose we have this model: 
  and assignment: g(x)=d1 
  and this formula: cat(x) 

m=<d,f> 
d={d1,d2,d3} 
f(cat)={d2} 
f(dog)={d1,d3} 
f(touches)={(d3,d2)} 

  does this model satisfy this formula wrt g? 
 
                                  m,g |= cat(x) ? 
 
  only if g(x) is in f(cat) 

logic should not be a lottery 
       there is clearly a cat in our model,  
but the answer we get is false... 
       we only get true if we pick out the right value for x 
       but we don   t want to rely on luck! 
 

existential quantification 
       logic has a well-known device to avoid being dependent 
on luck: 
 
                                     
 
the existential quantifier is always connected to a 
variable:    
 
                  if f is a formula, and x a variable,  
                  then    xf is a formula. 

giuseppe peano 
italian mathematician, 
founder of mathematical 
logic (1858-1932) 
 
 
 
 
 
 
 
 
source: en.wikipedia.org 

satisfaction again 

       suppose we have this model: 
       and assignment: g(x)=d1 
       and this formula:    xcat(x) 

m=<d,f> 
d={d1,d2,d3} 
f(cat)={d2} 
f(dog)={d1,d3} 
f(touches)={(d3,d2)} 

  does this model (let   s call it m) satisfy this formula wrt g? 
 
                                  m,g |=    xcat(x) ? 
 
only if m,g    |= cat(x), where g    is a copy of g but changes 
are allowed only with respect to x. e.g.: g   (x)=d2 

constructing complex formulas 
       suppose we   re given a model m and want to check 
whether this model satisfies multiple descriptions 
       for instance, perhaps we want to check whether there is 
a cat present and that it is white 
       we could construct two basic formulas and form a 
conjunction (using a new symbol     and brackets): 
 
           [cat(x)     white(x)] 

       we can now check whether m satisfies this formula. 

satisfaction again 

       suppose we have this model m: 
       and assignment: g(x)=d1 
       and this formula: [cat(x)   white(x)] 

m=<d,f> 
d={d1,d2,d3} 
f(cat)={d2} 
f(dog)={d1,d3} 
f(white)={d2,d3} 

  does m satisfy this formula wrt g? 
 
                                  m,g |= [cat(x)   white(x)]  ? 
 
  only if m,g |= cat(x)   and   m,g |= white(x)  

constructing negated formulas 
       suppose we   re given a model m and want to check 
whether this model does not satisfy a certain description 
       for instance, perhaps we want to check that there is no 
dog present, or that there are no sleeping cats around 
       we can do this by introducing a negation:    
a negated formula is simply formed by putting    in front 
 
             dog(x) 

a model satisfies a negated formula f iff it doesn   t satisfy f  
    m,g |=   dog(x) iff it is not the case that m,g|=dog(x) 

ingredients of a first-order language 
1.    all symbols in the vocabulary     the non-logical symbols 

of the first-order language 

2.    enough variables (a countably infinite collection):  

x, y, z, etc. 

3.    the boolean connectives    (negation),     

(conjunction),     (disjunction), and     (implication) 

4.    the quantifiers     (the universal quantifier) and     (the 

existential quantifier) 

5.    some punctuation symbols:  

brackets and the comma. 

george boole 
english mathematician, 
pioneer of modern 
mathematical logic 
(1815-1864) 
 
 
 
 
 
 
 
 
source: en.wikipedia.org 

first-order terms 
       any constant or any variable is a first-order term 
       constants are sometimes called 0-place predicates 
       terms are the    noun phrases    of first-order languages 

       constants are first-order analogs of proper names 
       variables are first-order analogs of pronouns 

 
 

atomic formulas 
       if r is a relation symbol of arity n, and t1,...,tn are terms, 
then r(t1,....,tn) is an atomic formula 
       if t1 and t2 are terms, then t1 = t2  is an atomic formula 
 

well formed formulas (wffs) 
1.    all atomic formulas are wffs 
2.    if    and    are wffs,  

then so are     , (       ), (       ), (       ) 

3.    if    is a wff, and x is a variable,  
then both    x   and    x   are wffs 
[   is the scope of the quantifier    /   ] 

4.    nothing else is a wff 

 

well formed formulas (wffs) 
1.    all atomic formulas are wffs 
2.    if    and    are wffs,  

then so are     , (       ), (       ), (       ) 

3.    if    is a wff, and x is a variable,  
then both    x   and    x   are wffs 
[   is the scope of the quantifier    /   ] 

4.    nothing else is a wff 

 

free and bound variables 
       an occurrence of a variable is free in a formula    if it is 
not bound in    
       an occurrence of a variable x is bound in a formula    if it 
appears in the scope of a quantifier    x or    x in    

closed formulas 
       formulas that have no free variables are called closed 
       usually we   re only interested in closed formulas  
       translating a natural language sentence to id85 
should produce a closed formula 
       free variables can be  
thought of as    pronouns     

logicians are only human 
      logicians (and mathematicians) are usually very 
precise in their formulations 
      however, they sometimes drop punctuation 
symbols if no confusion arises 
      often outermost brackets are dropped; also other 
brackets as long as no confusion arises 
      examples:  

p     q          instead of  (p     q)  
p     (q     r)  instead of  (p     (q     r))  
(p     q     r)  instead of  (p     (q     r))  

the satisfaction definition for fol 

do we really need all this stuff? 
       implication 
       disjunction 
       quantifiers 

a note on notation    

       negation:              or      
       conjunction:           or  & 
       implication:            or       
       equivalence:          or       
       brackets:          (   ) or  [   ] 

a note on naming    

id85 = predicate logic = classical/standard logic 

what   s wrong with these translations? 

id85 
   x(dog(x)      bark(x)) 

english 
a dog barks. 
vincent likes every dog.     x(dog(x)     like(vincent,x))  
no dog barks. 
every dog chases a cat.     x(dog(x)        y(cat(y)     chase(y,x))  

   x(dog(x)       bark(x)) 

what   s wrong with these translations? 

id85 
   x(dog(x)     bark(x)) 

english 
a dog barks. 
vincent likes every dog.     x(dog(x)     like(vincent,x))  
no dog barks. 
every dog chases a cat.     x(dog(x)        y(cat(y)     chase(x,y))  

     x(dog(x)     bark(x)) 

model checking 

       the task of the determining whether a given model 
satisfies a formula (or a set of formulas)   
 
      input: model + formula   
   output: true or false  

model checking 

m=<d,f> 
d={d1,d2,d3,d4} 
f(mia)=d1 
f(honey-bunny)=d2 
f(vincent)=d3 
f(yolanda)=d4 
f(customer)={d1,d3} 
f(robber)={d2,d4} 
f(love)={(d4,d2),(d3,d1)} 

q1: does m satisfy:     x(customer(x)        y(customer(y)     love(x,y))) 
q2: does m satisfy:     x(robber(x)     love(x,x)) 

model checking (   amazing    demo) 

1.    ~/grim % cat scripts/model_checker.pl | more 
2.    scripts/_checkmodels "some(x,n_cat_1(x))    
3.    scripts/_checkmodels "some(x,n_cat_1(x))    > out.tex 
4.    pdflatex out 

model checking (   amazing    demo) 

nice examples (1): 

 a cat and dog 

           a cat and a dog 

 a white cat and a dog 

 
nice examples (2): 

 a bicycle 

           a woman and a bicycle 
 a woman on a bicycle 

 

combining model extraction & model checking 

a man threw a bottle in the ocean.   
a woman wrote a letter.   
someone dropped two bottles in the sea.   
a man with a beard wrote something on a piece of paper.  

combining model extraction & model checking 

a man threw a bottle in the ocean.      
a woman wrote a letter.      
someone dropped two bottles in the sea.      
a man with a beard wrote something on a piece of paper.     

different kinds of meaning representations 
       expressive power 
       fol, drs, amr 
       syntax 
       semantics 

what is a good meaning representation? 
       all-purpose? or tailored to specific application? 

       worry about id136 efficiency? 
 

       readability for humans? 

r
e
a
s
o
n
n
g

i

 

e

i

f
f
i
c
e
n
c
y
 

controlling id136 

  x     p   

higher-order logic 

   p     p 

second-order logic 

   x 
     x 

id85 (predicate logic) 
abstract  
meaning 

d i s c o u r s e    
r e p r e s e n t a t i o n    
s t r u c t u r e  

representation 

[]    <> 

          
        v    

modal logics 

description logics 

id118 

 
r
e
w
o
p

 

i

e
v
s
s
e
r
p
x
e

syntax of fol (in backus-nauer form, bnf) 

f ::= pn(t1   tn) | 
           f | 
         (f   f) | 
            x f 
 
short version 
 
      f is a formula of id85 
      pn is a n-place non-logical symbol 
      t is a term (constant or variable) 
 

syntax of fol (in backus-nauer form, bnf) 

f ::= pn(t1   tn) | 
           f | 
         (f   f) | (f   f) | (f   f) | 
            x f |    x f 
 
long version (with disjunction and universal quantifier) 
 
     f is a formula of id85 
     pn is a n-place non-logical symbol 
     t is a term (constant or variable) 
 

syntax of fol (in backus-nauer form, bnf) 

f ::= pn(t1   tn) | 
           f |  t=t | 
         (f   f) | (f   f) | (f   f) | 
            x f |    x f 
 
long version with equality 
 
     f is a formula of id85 
     pn is a n-place non-logical symbol 
     t is a term (constant or variable) 

back to yesterday   s events    

t1 

t2 

t3 

kick(x,y) <=> abut(t1,t2) &  
                     abut(t2,t3) &  
                     near(t1,x,y) &  
                     touch(t2,x,y) &  
                       near(t3,x,y) 
pre-davidsonian 
analysis of an achievement event without explicit entities for events. 
problem: integration of event modifiers. 

t1 

t2 

t3 

kick(e,x,y)   time(e,t2) <=> abut(t1,t2) &  
                                            abut(t2,t3) &  
                                            near(t1,x,y) &  
                                            touch(t2,x,y) &  
                                              near(t3,x,y) 
davidsonian 
analysis of an achievement event with explicit entities for events. 
advantage: dealing with event modifiers (manner, temporal) 
disadvantage: number of arguments not always consistent 

t1 

t2 

t3 

kick(e)   agent(e,x)   patient(e,y)   time(e,t2) <=> abut(t1,t2) & 
                                                                                abut(t2,t3) &  
                                                                                 near(t1,x,y) &  
                                                                                 touch(t2,x,y) &  
                                                                                   near(t3,x,y) 
neo-davidsonian 
analysis with explicit entities for events and explicit thematic roles. 
advantage: consistent number of argument for event symbols 
disadvantage: need an inventory of thematic roles 

t1 

t2 

t3 

kick(e,x,y,z)    time(e,t2) <=> abut(t1,t2) &  
                                               abut(t2,t3) &  
                                               near(t1,x,y) &  
                                               touch(t2,x,y) &  
                                                near(t3,x,y) 
hobbsian 
analysis of all event with fixed number (4) of arguments. 
advantage: consistent number of arguments 
disadvantage: need dummy variables 

other meaning representations 
       first-order formula syntax not always handy 
       readability (brackets   ) 
       dealing with pronouns in texts (rather than sentences) 
       donkey sentences (where the article    a    seems to 
introduce a universal rather than an existential quantifier 

       this lead in the early 1980s do the development of 
   dynamic    semantic theories such as drt 

syntax of drs (in backus-nauer form, bnf) 

b ::= [x1     xn | c1     cm] 
c ::=   b | 
         b  v	
 b | 
         b => b | 
         pn(x1,   xn) 
 
      b is a drs (discourse representation structure) 
      c is a drs-condition 
      pn is a n-place predicate symbol 
      x is discourse referent (variable) 
 

comparing fol with drs syntax 
every student kicked a lecturer. 
 
fol:    x(student(x)       y(lecturer(y)     kick(x,y))) 
drs: [  | [x | student(x)]=>[y | lecturer(y),kick(x,y)]] 
 
   

x 
student(x) 

 
 
 
                                    => 
 
 
 

y 
lecturer(y) 
kick(x,y) 

interpretation of drs 
       but wait a minute?  
we don   t have a satisfaction definition for drss! 

       two possibilities: 

       translate drs into fol 
       give a satisfaction definition for drs 

       both are possible  
(see kamp & reyle, muskens, and many others) 

butch stole a chopper.  
it was parked in a garage. 

no events 
x y u v 
butch(x) 
chopper(y) 
stole(x,y) 
u=y 
garage(v) 
parked-in(u,v) 

davidsonian 
x y e u v e    
butch(x) 
chopper(y) 
stole(e,x,y) 
u=y 
garage(v) 
parked(e   ,u)  
in(e   ,v) 

hobbsian 

x y e u v e    a b c d 
butch(x) 
chopper(y) 
stole(e,x,a,b) 
agent(e,x) 
u=y 
garage(v) 
parked(e   ,u,c,d) 
in(e   ,v) 

neo-davidsonian 
x y e u v e    
butch(x) 
chopper(y) 
stole(e) 
agent(e,x) 
theme(e,y) 
u=y 
garage(v) 
parked(e   ) 
theme(e   ,u)  
location(e   ,v) 

id15s 
       simple meaning representations without explicit scope 
and quantifiers 
       relatively easy to edit by human beings 

syntax of amr (in backus-nauer form, bnf) 

a ::=  c | 
         x | 
         (x / p1) | 
         (x/p1 :p2a      :p2a) 
 
          
 
      a is an amr (id15) 
      pn is a n-place predicate symbol 
      x is a variable 
      c is a constant 
 

   johan wants money.     amr 
( e / want
    :argo ( x / johan )
    :arg1 ( y / money ))

comparing amr to drs 

   johan wants money.     drs 

x y e 
johan(x) 
money(y) 
want(e) 
agent(e,x) 
theme(e,y) 

   johan wants money.     drs 

x y e 
want(e) 
johan(x) 
money(y) 
agent(e,x) 
theme(e,y) 

   johan wants money.     drs 

x y e 
want(e) 
money(y) 
agent(e,x) 
johan(x) 
theme(e,y) 

   johan wants money.     drs 

x y e 
want(e) 
agent(e,x) 
johan(x) 
theme(e,y) 
money(y) 

   johan wants money.     drs 

x y e 
want(e) 
   agent(e,x) 
         johan(x) 
   theme(e,y) 
         money(y) 

   johan wants money.     drs 

x y e 
want(e) 
   :arg0(e,x) 
         johan(x) 
   :arg1(e,y) 
         money(y) 

   johan wants money.     drs 

x y e 
(e / want 
   :arg0(e,x) 
         (x / johan) 
   :arg1(e,y) 
       (y / money)) 

   johan wants money.    

(e / want 
   :arg0(e,x) 
         (x / johan) 
   :arg1(e,y) 
       (y / money)) 

   johan wants money.     amr 

(e / want 
   :arg0 (x / johan) 
   :arg1 (y / money)) 

   johan wants money.     amr 
( e / want
    :argo ( x / johan )
    :arg1 ( y / money ))

johan wants money. 
( x / johan
    :argo-of ( e / want 
                 :arg1 (y / money)))

johan wants money. 
( y / money
    :arg1-of ( e / want 
                 :arg0 (x / johan)))

every student kicked a lecturer 
(x / student :polarity    
   :arg0-of (e / kick :polarity -
               :arg1 (y / lecturer)))

an observation about amr 
amrs without recurring variables are part of 
the 2-variable fragment of id85 

it was a picture of a boa constrictor in the 
act of swallowing an animal. 
(p / picture 
   :domain (i / it) 
   :topic (b2 / boa
              :mod (c2 / constrictor) 
              :arg0-of (s / swallow-01 
                          :arg1 (a / 
animal))))
 
   x(picture(x) &  
           y(it(y) & domain(x,y)) & 
           y(boa(y) & topic(x,y) & 
                  x(constrictor(x) & mod(y,x)) & 
                x(swallow-01(x) & arg0(x,y) & 
                                    y(animal(y) & arg1(x,y))))) 
 

proper names 
   mia is happy.    
 
     happy(mia) 
           

proper names 
   mia is happy.    
 
     happy(mia) 
        x(x=mia     happy(x)) 
      

proper names 
   mia is happy.    
 
     happy(mia) 
        x(x=mia     happy(x)) 
        x(person(x)     named(x,mia)     happy(x)) 
 

proper names 
   mia is happy.    
 
     happy(mia) 
        x(x=mia     happy(x)) 
        x(person(x)     named(x,mia)     happy(x)) 
        x   y(person(x)   has(x,y)   name(y)   y=mia   happy(x)) 
 

proper names 
   mia is happy.    
 
     happy(mia) 
        x(x=mia     happy(x)) 
        x(person(x)     named(x,mia)     happy(x)) 
        x   y(person(x)   has(x,y)   name(y)   y=mia   happy(x)) 
        x(mia(x)     happy(x)) 
      
 

fol, drs, amr 
       all first-order representations of meaning 
       but with different properties 

       logical aspects (negation, quantification) 
       human readability 
       information structure 

the big picture 

wednesday 

semantic 
semantic 
parsing 
parsing 

natural 
language 
statement 

true 

or 

false 

model 

extraction 

yesterday 

meaning 

model 

checking 

model 

