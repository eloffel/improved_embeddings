modeling dialogue 
building highly responsive 

conversational agents

david schlangen, stefan kopp 

with s  ren klett 

citec // bielefeld university

overview of course

    day 1: motivation, phenomena 

    day 2: technical challenges, approaches 

    day 3: introduction to technical framework 

    day 4: hands-on project 

    day 5: reports, discussion

takeaways from day 2

    dialogue processing flow: asr    nlu     dm     id86 / nvbg     realizer 

    all components must run incrementally and interact via local updates 

    iu model:  

    is updated with minimal units of information, as soon as hypothesised 

       higher-level    hypotheses formed on basis of    lower-level    ones  

    is may have to be revised, in light of newer information 

    hybrid systems: main dm plus reactive layer 

    incremental generation and realization allows for reducing latency and 

adapting more naturally to disturbances

modeling dialogue 
building highly responsive 

conversational agents

day 3: introduction to technical framework

david schlangen, stefan kopp 

with s  ren klett 

citec // bielefeld university

overview of day 3

    introducing the framework and demo of a running 

system 

    a more detailed look at the framework 

    setting up technically 

    first hands-on experiences

highly responsive agent 

framework (hiraf)

       simple but robust    architecture for realizing highly 

responsive embodied conversational agents 

    providing all modules for an end-to-end system 
    low-latency, incremental processing 
    easily customizable and extensible 
    builds on standard components (where available)

in collab' with casey kennington, special thanks to herwin van 
welbergen, ramin yaghoubzadeh, timo baumann, pierre lison

live demo

a look at a responsive 
conversational agent built with 
the hiraf framework 

domain:  
quiz bowl (pyramidal tossup)

overview of modules

asr

(google)

words

inlu

concepts,
con   dence

decision,
feedback

dm 

(opendial)

vad

speech activity

dialogue 

state

tt

turn-taking

im

interruption 
manager

trigger

bml (interrupt)

id86

nvbg

bml

asaprealizer

overview of modules

asr

(google)

words

inlu

concepts,
con   dence

decision,
feedback

dm 

(opendial)

vad

speech activity

communication 
middleware (inprotk)

dialogue 

state

tt

turn-taking

im

interruption 
manager

trigger

bml (interrupt)

id86

nvbg

bml

asaprealizer

interprocess communication middleware (ipaaca)

starting up
1. boot from the provided usb 3.0-stick   
(on mac: hold alt on startup) 
2. run setup.sh in a terminal:

starting up

system starts 
within eclipse

starting up

   billie    at    rst

preparing

ready

how to interact

text input
caution: typing into 
this    eld for the    rst 
time might have 
some delay. make 
sure the window is 
on focus (indicated 
by blinking cursor)

speech
microphone using googleasr (audio gets recognized 
via google servers, so you need internet connection)

modules: asr

modules: asr

    let   s have a look at what asr provides us with

modules: inlu

keyword    hello    activates concept    greet   

concept    master    branches into other    les   
(loaded automatically at start-up)

modules: inlu

con   ict between 
concepts after 
saying    cheer   
(resolved at runtime 
in context, e.g. other 
properties)

modules: dm

variable declaration
trigger variable changes,    re    rst case 
of every rule (think if-then-else-if-   )
value check on con   dence of concept 
indicated by variable    slotiu   

value check on concept itself

setting variable value (used 
by another module)

special variable feedback:   
realized asap

special variable decision:    
realized as soon as    oor is taken

modules: id86

bml behaviors

billie says:    hello world   

billie nods

modules: nvbg

example:   
facial expressions

update (every 200 ms):
    look for variable de   ned as    source    in dialogstate 
    use value and de   ned    weight    to calculate next blendshape 
    send bml block to asap 
con   ict resolution
    lower priority behavior gets dropped 
    priorities can change at runtime

modules: turn-taking

   delay    = time in ms the system waits after a silence detection (vad), 
before carrying out a pending decision
   silencetolerance    = time before    default   -action (de   ned within 
id86) is carried out in case of total silence

modules (summary)

asr

words

inlu

concepts,
con   dence

decision,
feedback

dm 

(opendial)

vad

speech activity

dialogue 

state

tt

turn-taking

im

interruption 
manager

trigger

bml (interrupt)

id86

nvbg

bml

asaprealizer

questions?

input:    hello    +    i want 

to be contestant.   

ms since 1st word uttered 
or vad calibration    nished

q: what happens at 17816 ms?

source code

important places marked 
(   agged), e.g.    asr(raw)   

task 1

1. type    hello    in the text input window  (exc. 4a) 

    see what happens 
    understand what happens     look at:   

json/intent.json, opendial/esslli.xml, generation/
id86.xml, bml/hello_wave.xml 

    extend the ways billie can be greeted! 

    extend the way billie reacts!

task 2

2.  add responsive feedback behavior (exc. 4b) 

    open the    le opendial/esslli.xml and find the rule "feedback". this 
rule makes billie nod every time the system understood a concept 
with a con   dence of over 75%.  

    the variable    feedback    triggers immediate execution of an action. 
    the feedback action is de   ned in behaviour/id86.xml and bml/nod.xml  

    make him say    ok    when his con   dence is higher than 85% ! 
    test with the text window by typing in "hello?" and enter. note, that 
appending a question mark to a word indicates that the turn is kept 
(i.e. there is more to come).

task 3

3. make billie happier (exc. 4c) 

    open the    les json/intent.json and mood.json  

    find the child called    mood    of the intent "root". this child enables the 
system to parse the mood.json    le, in which there   s a concept called 
   cheer_up    and    cheer_down   . 

    open the    le opendial/esslli.xml  and    nd the rule "mood". 

    see how giving one of those concepts either increases or decreases the 
variable "happiness". in this case, the condition to have a con   dence over 
0.75 is important, because when you type or say "cheer", the system will 
give both concepts a id203 of about 50% as the property appears in 
both concepts. 

    make billie get happier when he gets praised!

