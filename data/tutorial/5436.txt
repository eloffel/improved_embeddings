   #[1]github [2]recent commits to simple_id25:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]56
     * [35]star [36]639
     * [37]fork [38]175

[39]tambetm/[40]simple_id25

   [41]code [42]issues 5 [43]pull requests 1 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   simple deep id24 agent.
     * [47]122 commits
     * [48]2 branches
     * [49]0 releases
     * [50]fetching contributors
     * [51]mit

    1. [52]html 99.3%
    2. other 0.7%

   (button) html other
   branch: master (button) new pull request
   [53]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/t
   [54]download zip

downloading...

   want to be notified of new releases in tambetm/simple_id25?
   [55]sign in [56]sign up

launching github desktop...

   if nothing happens, [57]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [58]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [59]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [60]download the github extension for visual studio
   and try again.

   (button) go back
   [61]@tambetm
   [62]tambetm [63]update readme.md
   latest commit [64]e566952 mar 17, 2019
   [65]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [66]results
   [67]roms
   [68]snapshots [69]space invaders results. may 4, 2016
   [70]src [71]fix play_random in which env restart must be called before
   step. apr 28, 2017
   [72]videos
   [73].gitignore [74]kind of works, a lot of debugging ahead. sep 18,
   2015
   [75]license
   [76]readme.md [77]update readme.md mar 17, 2019
   [78]nvis.sh
   [79]play.sh
   [80]plot.sh
   [81]profile_random.sh
   [82]profile_test.sh [83]separate buffer for current state, test phase
   transitions are not rec    dec 12, 2015
   [84]profile_train.sh
   [85]record.sh
   [86]resume.sh
   [87]test.sh
   [88]test_gym.sh
   [89]train.sh
   [90]upload_gym.sh

readme.md

simple id25

   unfortunately this repo is outdated and there are much better codebases
   out there. i would suggest to take a look at [91]this to learn the
   basics or [92]this for full-blown id25 implementation for atari.

   deep id24 agent for replicating deepmind's results in paper
   [93]"human-level control through deep id23". it is
   designed to be simple, fast and easy to extend. in particular:
     * it's python :).
     * uses ale [94]native python interface.
     * updated to support training and testing with [95]openai gym.
     * [96]fastest convolutions from [97]neon deep learning library.
     * every screen is kept only once in replay memory, fast minibatch
       sampling with numpy array slicing.
     * the number of array and datatype conversions is minimized.

   see the example gameplay videos for breakout, pong, seaquest and space
   invaders:

   [98]breakout [99]pong [100]seaquest [101]space invaders

installation

   currently only instructions for ubuntu are provided. for os x refer to
   [102]ale and [103]neon documentation.

neon

   install prerequisites:
sudo apt-get install libhdf5-dev libyaml-dev libopencv-dev pkg-config
sudo apt-get install python python-dev python-pip python-virtualenv
sudo apt-get install libcurl4-openssl-dev
sudo apt-get install libsox-fmt-all libsox-dev sox

   check out and compile the code:
git clone https://github.com/nervanasystems/neon.git
cd neon
make

   if you want to try out the filter visualization, use latest neon and
   run make -e vis=true instead. if you   ve already installed neon without
   enabling visualization dependencies you   ll need to touch
   vis_requirements.txt prior to the make -e vis=true call to ensure
   virtualenv python dependencies get triggered.

   neon installs itself into virtual environment in .venv. you need to
   activate that to import neon in python:
source .venv/bin/activate

arcade learning environment

   you can skip this, if you only plan to use openai gym.

   install prerequisites:
sudo apt-get install cmake libsdl1.2-dev

   check out and compile the code:
git clone https://github.com/mgbellemare/arcade-learning-environment.git
cd arcade-learning-environment
cmake -duse_sdl=on -duse_rlglue=off -dbuild_examples=on .
make -j 4

   install python library (assuming you have activated neon virtual
   environment):
pip install .

openai gym

   you can skip this, if you only plan to use arcade learning environment
   directly.

   to install openai gym:
pip install gym
pip install gym[atari]

simple id25

   prerequisities:
pip install numpy argparse logging

   neon virtual environment already contains those libraries, but they are
   listed here, just in case.

   also you need opencv, which is pain to install to virtual environment.
   i ended up with this hack:
sudo apt-get install python-opencv
ln -s /usr/lib/python2.7/dist-packages/cv2.so neon_home/.venv/lib/python2.7/site
-packages/

   neon_home here means the folder where you installed (cloned) neon.

   then just check out the code:
git clone https://github.com/tambetm/simple_id25
cd simple_id25

optional

   for plotting install matplotlib:
pip install matplotlib

   for producing game videos install avconv:
sudo apt-get install libav-tools

running the code

training

   to run training for breakout:
./train.sh roms/breakout.bin

   if using openai gym:
./train.sh breakout-v0 --environment gym

   there are plethora of options, just run ./train.sh --help to see them.
   while training, the network weights are saved to snapshots folder after
   each epoch. name of the file is <game>_<epoch_nr>.pkl. training
   statistics are saved to results/<game>.csv, see below how to produce
   plots from it.

resuming training

   you can resume training by running
./resume.sh snapshots/breakout_10.pkl

   pay attention that the replay memory is empty.

only testing

   to run only testing on a pre-trained model:
./test.sh snapshots/breakout_77.pkl

   to test using openai gym:
./test_gym.sh snapshots/breakout-v0_77.pkl

   this saves testing results in folder results/breakout-v0. now you can
   then upload your results to openai gym:
./upload_gym.sh results/breakout-v0 --api_key <your_key>

   note that the openai gym environment differs from the default
   environment so testing using openai gym should use a model trained
   using openai gym.

play one game with visualization

   to play one game and show game screen while playing:
./play.sh snapshots/breakout_77.pkl

   you can do this even without gpu, by adding --backend cpu to command
   line. during gameplay you can use following keys:
     * a - slow down,
     * s - speed up,
     * m - manual control mode,
     * [ - volume down,
     * ] - volume up.

   visualization works even in text terminal!

record game video

   to play one game and record a video:
./record.sh snapshots/breakout_77.pkl

   first game frames are extracted to videos/<game> folder as png files.
   then avconv is used to convert these into video, which is saved to
   videos/<game>_<epoch_nr>.mov.

plotting results

   to plot results:
./plot.sh results/breakout.csv

   this produces results/breakout.png, which includes four main figures:
   average reward per game, number of games per phase (training, test or
   random), average q-value of validation set and average network loss.
   you can customize the plotting result with --fields option - list comma
   separated csv field names (the first row). for example default results
   are achieved with --fields average_reward,meanq,nr_games,meancost.
   order of figures is left to right, top to bottom.

visualizing filters

   to produce filter visualizations with guided id26:
./nvis.sh snapshots/breakout_77.pkl

   what the filter visualization does:
    1. first it plays one game to produce a set of states (one state is 4
       frames),
    2. then it finds the states which activate each filter the most,
    3. finally it carries out guided id26 to show which parts
       of the screen affect the "activeness" of each filter the most.

   the result is written to file results/<game>.html. by default only 4
   filters from each convolutional layer are visualized. to see more
   filters add --visualization_filters <nr_filters> to the command line.

   nb! because it is not very clear how to visualize the state consisting
   of 4 frames, i made a simplification - i'm using only the last 3 frames
   and putting them to different color channels. so everything that is
   gray hasn't changed, blue is the most recent change, then green and
   then red. it is easier to understand if you look at the trace of a ball
   - it is marked by red-green-blue.

nervana cloud

   to train a model with nervana cloud, first install and configure
   [104]nervana cloud.

   assuming the necessary dependencies are installed, run
ncloud train src/main.py --args "roms/breakout.bin --save_weights_prefix snapsho
pts/breakout --csv_file results/breakout.csv" --custom_code_url https://github.c
om/nervanasystems/simple_id25

   this will download the repo and run the training script.

   to test a model using nervana cloud run:
ncloud train src/main.py --args "roms/breakout.bin --random_steps 0 --train_step
s 0 --epochs 1 --load_weights snapshops/breakout_77.pkl" --custom_code_url https
://github.com/nervanasystems/simple_id25

profiling

   there are three additional scripts for profiling:
     * profile_train.sh - runs pong game 1000 steps in training mode. this
       is for figuring out bottlenecks in minibatch sampling and network
       training code. prediction is disabled by setting exploration rate
       to 1.
     * profile_test.sh - runs pong game 1000 steps in testing mode. this
       is for figuring out bottlenecks in prediction code. exploration is
       disabled by setting exploration rate to 0.
     * profile_random.sh - runs pong game 1000 steps with random actions.
       this is for measuring performance of ale interface, network is not
       used at all.

known differences

     * simple id25 uses neon's default rmsprop implementation, deepmind
       uses different formulation from [105]alex graves' paper (see page
       23, eq 40).
     * simple id25 uses averaged frame among skipped frame (which is ale's
       built-in functionality), instead of max values from successive two
       frames as in the deepmind paper.
     * simple id25 uses neon's xavier initializer, deepmind uses a fan_in
       parameter initializer.

credits

   this wouldn't have happened without inspiration and preceding work from
   my fellow phd students [106]kristjan korjus, [107]ardi tampuu,
   [108]ilya kuzovkin and [109]taivo pungas from [110]computational
   neuroscience lab run by raul vicente in [111]university of tartu,
   [112]estonia. also i would like to thank [113]nathan sprague and other
   nice folks at [114]deep id24 list.

     *    2019 github, inc.
     * [115]terms
     * [116]privacy
     * [117]security
     * [118]status
     * [119]help

     * [120]contact github
     * [121]pricing
     * [122]api
     * [123]training
     * [124]blog
     * [125]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [126]reload to refresh your
   session. you signed out in another tab or window. [127]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/tambetm/simple_id25/commits/master.atom
   3. https://github.com/tambetm/simple_id25#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/tambetm/simple_id25
  32. https://github.com/join
  33. https://github.com/login?return_to=/tambetm/simple_id25
  34. https://github.com/tambetm/simple_id25/watchers
  35. https://github.com/login?return_to=/tambetm/simple_id25
  36. https://github.com/tambetm/simple_id25/stargazers
  37. https://github.com/login?return_to=/tambetm/simple_id25
  38. https://github.com/tambetm/simple_id25/network/members
  39. https://github.com/tambetm
  40. https://github.com/tambetm/simple_id25
  41. https://github.com/tambetm/simple_id25
  42. https://github.com/tambetm/simple_id25/issues
  43. https://github.com/tambetm/simple_id25/pulls
  44. https://github.com/tambetm/simple_id25/projects
  45. https://github.com/tambetm/simple_id25/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/tambetm/simple_id25/commits/master
  48. https://github.com/tambetm/simple_id25/branches
  49. https://github.com/tambetm/simple_id25/releases
  50. https://github.com/tambetm/simple_id25/graphs/contributors
  51. https://github.com/tambetm/simple_id25/blob/master/license
  52. https://github.com/tambetm/simple_id25/search?l=html
  53. https://github.com/tambetm/simple_id25/find/master
  54. https://github.com/tambetm/simple_id25/archive/master.zip
  55. https://github.com/login?return_to=https://github.com/tambetm/simple_id25
  56. https://github.com/join?return_to=/tambetm/simple_id25
  57. https://desktop.github.com/
  58. https://desktop.github.com/
  59. https://developer.apple.com/xcode/
  60. https://visualstudio.github.com/
  61. https://github.com/tambetm
  62. https://github.com/tambetm/simple_id25/commits?author=tambetm
  63. https://github.com/tambetm/simple_id25/commit/e5669520a856752912ce41d88d923989ecf99837
  64. https://github.com/tambetm/simple_id25/commit/e5669520a856752912ce41d88d923989ecf99837
  65. https://github.com/tambetm/simple_id25/tree/e5669520a856752912ce41d88d923989ecf99837
  66. https://github.com/tambetm/simple_id25/tree/master/results
  67. https://github.com/tambetm/simple_id25/tree/master/roms
  68. https://github.com/tambetm/simple_id25/tree/master/snapshots
  69. https://github.com/tambetm/simple_id25/commit/968174cd3e332c57a57e151b882e398c1fd02f89
  70. https://github.com/tambetm/simple_id25/tree/master/src
  71. https://github.com/tambetm/simple_id25/commit/7ee48e744fd575ab975ac53d72b0a8ff94d1583f
  72. https://github.com/tambetm/simple_id25/tree/master/videos
  73. https://github.com/tambetm/simple_id25/blob/master/.gitignore
  74. https://github.com/tambetm/simple_id25/commit/ee815c95e9e75677d8325a8e40400b26186dece2
  75. https://github.com/tambetm/simple_id25/blob/master/license
  76. https://github.com/tambetm/simple_id25/blob/master/readme.md
  77. https://github.com/tambetm/simple_id25/commit/e5669520a856752912ce41d88d923989ecf99837
  78. https://github.com/tambetm/simple_id25/blob/master/nvis.sh
  79. https://github.com/tambetm/simple_id25/blob/master/play.sh
  80. https://github.com/tambetm/simple_id25/blob/master/plot.sh
  81. https://github.com/tambetm/simple_id25/blob/master/profile_random.sh
  82. https://github.com/tambetm/simple_id25/blob/master/profile_test.sh
  83. https://github.com/tambetm/simple_id25/commit/dca80a22210a25f6322c73e330184c8239c93739
  84. https://github.com/tambetm/simple_id25/blob/master/profile_train.sh
  85. https://github.com/tambetm/simple_id25/blob/master/record.sh
  86. https://github.com/tambetm/simple_id25/blob/master/resume.sh
  87. https://github.com/tambetm/simple_id25/blob/master/test.sh
  88. https://github.com/tambetm/simple_id25/blob/master/test_gym.sh
  89. https://github.com/tambetm/simple_id25/blob/master/train.sh
  90. https://github.com/tambetm/simple_id25/blob/master/upload_gym.sh
  91. https://github.com/keon/deep-id24
  92. https://github.com/hill-a/stable-baselines
  93. http://www.nature.com/nature/journal/v518/n7540/full/nature14236.html
  94. https://github.com/bbitmaster/ale_python_interface/wiki/code-tutorial
  95. https://gym.openai.com/
  96. https://github.com/soumith/convnet-benchmarks
  97. http://neon.nervanasys.com/docs/latest/index.html
  98. https://youtu.be/kkif0ok5gce
  99. https://youtu.be/0zlgrqs3krg
 100. https://youtu.be/b6g6a_n8muk
 101. https://youtu.be/qvco7ufsx_0
 102. https://github.com/mgbellemare/arcade-learning-environment/blob/master/doc/manual/manual.pdf
 103. http://neon.nervanasys.com/docs/latest/installation.html
 104. http://doc.cloud.nervanasys.com/docs/latest/ncloud.html
 105. http://arxiv.org/pdf/1308.0850v5.pdf
 106. https://github.com/kristjankorjus
 107. https://github.com/rdtm
 108. https://github.com/kuz
 109. https://github.com/taivop
 110. http://neuro.cs.ut.ee/
 111. http://www.ut.ee/en
 112. https://e-estonia.com/
 113. https://github.com/spragunr
 114. https://groups.google.com/forum/#!forum/deep-id24
 115. https://github.com/site/terms
 116. https://github.com/site/privacy
 117. https://github.com/security
 118. https://githubstatus.com/
 119. https://help.github.com/
 120. https://github.com/contact
 121. https://github.com/pricing
 122. https://developer.github.com/
 123. https://training.github.com/
 124. https://github.blog/
 125. https://github.com/about
 126. https://github.com/tambetm/simple_id25
 127. https://github.com/tambetm/simple_id25

   hidden links:
 129. https://github.com/
 130. https://github.com/tambetm/simple_id25
 131. https://github.com/tambetm/simple_id25
 132. https://github.com/tambetm/simple_id25
 133. https://help.github.com/articles/which-remote-url-should-i-use
 134. https://github.com/tambetm/simple_id25#simple-id25
 135. https://github.com/tambetm/simple_id25#installation
 136. https://github.com/tambetm/simple_id25#neon
 137. https://github.com/tambetm/simple_id25#arcade-learning-environment
 138. https://github.com/tambetm/simple_id25#openai-gym
 139. https://github.com/tambetm/simple_id25#simple-id25-1
 140. https://github.com/tambetm/simple_id25#optional
 141. https://github.com/tambetm/simple_id25#running-the-code
 142. https://github.com/tambetm/simple_id25#training
 143. https://github.com/tambetm/simple_id25#resuming-training
 144. https://github.com/tambetm/simple_id25#only-testing
 145. https://github.com/tambetm/simple_id25#play-one-game-with-visualization
 146. https://github.com/tambetm/simple_id25#record-game-video
 147. https://github.com/tambetm/simple_id25#plotting-results
 148. https://github.com/tambetm/simple_id25#visualizing-filters
 149. https://github.com/tambetm/simple_id25#nervana-cloud
 150. https://github.com/tambetm/simple_id25#profiling
 151. https://github.com/tambetm/simple_id25#known-differences
 152. https://github.com/tambetm/simple_id25#credits
 153. https://github.com/
