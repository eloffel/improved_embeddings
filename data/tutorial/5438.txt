   #[1]intel ai    feed [2]intel ai    comments feed [3]alternate
   [4]alternate

   search ____________________ search

   [5]intel ai
     * ____________________
     * [6]technologies
          + [7]frameworks
          + [8]hardware
          + [9]software libraries
          + [10]research projects
          + [11]tools
          + [12]featured solutions
     * [13]industries
          + [14]health & life sciences
          + [15]telecommunications
          + [16]retail
          + [17]media & entertainment
          + [18]financial services (fsi)
          + [19]energy
          + [20]government
     * [21]library
          + [22]blog
          + [23]videos
          + [24]white papers
          + [25]podcasts
          + [26]docs
          + [27]news
     * [28]research
          + [29]publications
          + [30]researchers
          + [31]research programs
          + [32]research projects
     * [33]careers
     * programs
          + [34]partners
          + [35]research residency
          + [36]intel ai developer program
          + [37]ai student ambassadors
          + [38]ai4socialgood
     * [39]blog

   ____________________
   show the menu

   [40]blog
   authors
   jd co-reyes

   [41]jd co-reyes

   nervana systems intern
   tags

   [42]intel deep learning cloud and system [43]open ai

   [44]blog
   04.27.16

   04.27.16

blog post (part iii): deep id23 with openai gym

   this is part 3 of a blog series on deep id23. see
      [45]part 1: demystifying deep id23    for an
   introduction to the topic and    [46]part 2: deep id23
   with neon    for the original implementation in simple-id25.

   in this blog post we will extend a simple-id25 to work with [47]openai
   gym, a new toolkit for developing and comparing id23
   algorithms. read more about the release on their [48]blog. we will
   cover how to train and test an agent with the new environment using
   [49]neon.

   update: code has been updated and is now
   at [50]https://github.com/tambetm/simple_id25.

gymenvironment

   openai gym integration

   ^figure 1. agent environment loop

   openai gym provides a simple interface for interacting with the
   environment. given an observation of previous state and reward, an
   agent chooses an action to perform on the environment to provide the
   next state and reward.

   observation, reward, done, info = environment.step(action)

   in our case, the environment is an atari game, the observation is a
   game screen, and the reward is the score obtained from that action.
   since openai gym uses a different interface (atari_py) to the arcade
   learning environment (ale), we can create a wrapper class,
   gymenvironment, around the openai gym environment to work with the
   simple-id25 training code. before, simple-id25 retrieved the screen and
   terminal state directly from the ale environment after performing an
   action whereas the openai gym environment returns this data each time
   the agent acts on the environment. so we can instead store these
   variables as fields in our wrapper and use them as needed. creating an
   environment also differs slightly in that we specify which game to use
   with an environment id such as    breakout-v0    instead of loading
   directly from a rom file.

   class gymenvironment(environment):
   def __init__(self, env_id, args):
   import gym
   self.gym = gym.make(env_id)
   self.obs = none
   self.terminal = none

   def numactions(self):
   return self.gym.action_space.n

   def restart(self):
   self.gym.reset()
   self.obs = none
   self.terminal = none

   def act(self, action):
   self.obs, reward, self.terminal, _ = self.gym.step(action)
   return reward

   def getscreen(self):
   assert self.obs is not none
   return self.obs

   def isterminal(self):
   assert self.terminal is not none
   return self.terminal

training

   to train with openai gym instead of ale, we just specify
   the environment (openai gym or ale) and the game. openai gym returns
   the full rgb screen (210, 160) that we then convert to grayscale and
   resize to (84, 84).

   ./train.sh breakout-v0    environment gym

   this will train a model using the openai gym environment and save model
   snapshots every epoch.

testing

   to test a trained model on openai gym, we will first create a gymagent
   that
     * stores the last four screen observations in memory
     * given the last four screen observations, uses the trained model to
       find the action with the highest q value

   class gymagent():
   def __init__(self, env, net, memory, args):
   self.env = env
   self.net = net
   self.memory = memory
   self.history_length = args.history_length
   self.exploration_rate_test = args.exploration_rate_test

   def add(self, observation):
   self.memory[0, :-1] = self.memory[0, 1:]
   self.memory[0, -1] = np.array(observation)

   def get_action(self, t, observation):
   self.add(observation)
   if t &amp;amp;amp;amp;lt; self.history_length or random.random()
   &amp;amp;amp;amp;lt; self.exploration_rate_test:
   action = env.action_space.sample()
   else:
   qvalues = net.predict(memory)
   action = np.argmax(qvalues[0])
   return action

   then we can simply instantiate the agent with the environment and saved
   model and call get_action during the test loop described [51]here to
   find the optimal action to play during each time step.

   agent = gymagent(env, net, memory, args)
   env.monitor.start(args.output_folder, force=true)
   num_episodes = 10
   for i_episode in xrange(num_episodes):
   observation = env.reset()
   for t in xrange(10000):
   action = agent.get_action(t, observation)
   observation, reward, done, info = env.step(action)
   if done:
   break
   env.monitor.close()

   this code for testing is all in this [52]script which can be run with

   python src/test_gym.py breakout-v0 <output_folder>    load_weights
   <saved_model_pkl>

   this will log the testing results and record videos to the specified
   output_folder which we can then upload to openai gym for
   [53]evaluation. it is also recommended to upload a gist describing how
   to reproduce your results.

   evaluation results on openai gym

   ^figure 2. evaluation results on openai gym

   an example video of an agent playing several episodes:

   iframe: [54]https://www.youtube.com/embed/qsrstii1bye?feature=oembed

using nervana cloud

   to train a model on nervana cloud, first install and configure
   [55]ncloud.  ncloud is a command line client to help you use and manage
   nervana   s deep learning cloud.

   assuming the necessary dependencies are installed, we can run training
   with:

   ncloud train src/main.py    args    breakout-v0    environment gym   
      custom_code_url https://github.com/tambetm/simple_id25

   and testing with:

   ncloud train src/test_gym.py    args    breakout-v0    load_weights
   <saved_model_pkl>          custom_code_url
   https://github.com/tambetm/simple_id25

   to find out more about nervana cloud, visit nervana   s [56]products
   page.

conclusion

   openai gym provides a nice toolkit for training and testing
   id23 algorithms. extending simple-id25 to work with
   openai gym was relatively straightforward to implement and hopefully
   others can easily extend this work to develop better learning
   algorithms.

   authors
   jd co-reyes

   [57]jd co-reyes

   nervana systems intern
   tags

   [58]intel deep learning cloud and system [59]open ai

   stay connected
   keep tabs on all the latest news with our monthly newsletter.
   (button) subscribe
     * [60]@intelai
     * [61]@intelaidev
     * [62]@intelai
     * [63]intel-ai
     * [64]nervanasystems

   (button) x

stay connected with intel   ai

   first name * ____________________
   last name * ____________________
   business email address * ____________________
   country/region * [please select...____________________________]
   job title * ____________________
   company * ____________________
   profession * [please select..._____________________________]
   [x] yes, i would like to subscribe to the intel ai newsletter to stay
   connected to the latest intel technologies and industry trends by
   email. i can unsubscribe at any time. *
   (button) submit

   by submitting this form, you are confirming you are an adult 18 years
   or older and you agree to share your personal information with intel to
   use for this business request. you also agree to subscribe to stay
   connected to the latest intel technologies and industry trends by
   email. you may unsubscribe at any time. intel   s web sites and
   communications are subject to our [65]privacy notice and [66]terms of
   use.

   thank you!

   sorry, there was an error in your submission.
     *   intel corporation
     * [67]terms of use
     * [68]*trademarks
     * [69]privacy
     * [70]cookies
     * [71]supply chain transparency
     * [72]site map

references

   visible links
   1. https://www.intel.ai/feed/
   2. https://www.intel.ai/comments/feed/
   3. https://www.intel.ai/wp-json/oembed/1.0/embed?url=https://www.intel.ai/openai/
   4. https://www.intel.ai/wp-json/oembed/1.0/embed?url=https://www.intel.ai/openai/&format=xml
   5. https://www.intel.ai/
   6. https://www.intel.ai/technology/
   7. https://www.intel.ai/framework-optimizations/
   8. https://www.intel.ai/hardware/
   9. https://www.intel.ai/software-libraries/
  10. https://www.intel.ai/research-projects/
  11. https://www.intel.ai/tools/
  12. https://www.intel.ai/featured-solutions/
  13. https://www.intel.ai/industries/
  14. https://www.intel.ai/health-and-life-sciences/
  15. https://www.intel.ai/telecommunications/
  16. https://www.intel.ai/retail/
  17. https://www.intel.ai/media-and-entertainment/
  18. https://www.intel.ai/financial-services/
  19. https://www.intel.ai/energy/
  20. https://www.intel.ai/government/
  21. https://www.intel.ai/library/
  22. https://www.intel.ai/blog/
  23. https://www.intel.ai/videos/
  24. https://www.intel.ai/white-papers/
  25. https://www.intel.ai/podcasts/
  26. https://www.intel.ai/docs/
  27. https://www.intel.ai/news/
  28. https://www.intel.ai/research/
  29. https://www.intel.ai/publications/
  30. https://www.intel.ai/researchers/
  31. https://www.intel.ai/research-programs/
  32. https://www.intel.ai/research-projects/
  33. https://jobs.intel.com/page/show/artificial-intelligence-careers
  34. https://www.intel.ai/partners/
  35. https://www.intel.ai/research-programs/
  36. https://software.intel.com/en-us/ai-academy
  37. https://software.intel.com/en-us/ai-academy/ambassadors
  38. https://ai.intel.com/ai/ai4socialgood/
  39. https://www.intel.ai/blog/
  40. https://www.intel.ai/blog/
  41. https://www.intel.ai/bio/jd-co-reyes/
  42. https://www.intel.ai/library/?dev-platform=intel-deep-learning-cloud-and-system
  43. https://www.intel.ai/library/?post_tag=open-ai
  44. https://www.intel.ai/blog/
  45. https://www.intel.ai/demystifying-deep-reinforcement-learning/
  46. https://www.intel.ai/deep-reinforcement-learning-with-neon/
  47. https://gym.openai.com/
  48. https://openai.com/blog/openai-gym-beta/
  49. https://github.com/nervanasystems/neon
  50. https://github.com/tambetm/simple_id25
  51. https://gym.openai.com/docs
  52. https://github.com/tambetm/simple_id25/blob/master/src/test_gym.py
  53. https://gym.openai.com/evaluations/eval_glkkkintm6glmcoqrzuhq
  54. https://www.youtube.com/embed/qsrstii1bye?feature=oembed
  55. http://doc.cloud.nervanasys.com/docs/latest/ncloud.html
  56. https://www.intel.ai/products
  57. https://www.intel.ai/bio/jd-co-reyes/
  58. https://www.intel.ai/library/?dev-platform=intel-deep-learning-cloud-and-system
  59. https://www.intel.ai/library/?post_tag=open-ai
  60. https://twitter.com/intelai
  61. https://twitter.com/intelaidev
  62. https://www.facebook.com/intelai/
  63. https://www.linkedin.com/company/3628074/
  64. https://github.com/nervanasystems
  65. https://www.intel.com/content/www/us/en/privacy/intel-privacy-notice.html?elqtrackid=e6a9dfea0f904f66aa7346e8f8e74476&elq=00000000000000000000000000000000&elqaid=21534&elqat=2&elqcampaignid=
  66. https://www.intel.com/content/www/us/en/legal/terms-of-use.html?elqtrackid=8445f4bedfeb45dcb04ff6097e1001e8&elq=00000000000000000000000000000000&elqaid=21534&elqat=2&elqcampaignid=
  67. https://www.intel.com/content/www/us/en/legal/terms-of-use.html
  68. https://www.intel.com/content/www/us/en/legal/trademarks.html
  69. https://www.intel.com/content/www/us/en/privacy/intel-privacy-notice.html
  70. https://www.intel.com/content/www/us/en/privacy/intel-cookie-notice.html
  71. https://www.intel.com/content/www/us/en/policy/policy-human-trafficking-and-slavery.html
  72. https://www.intel.com/content/www/us/en/siteindex.html

   hidden links:
  74. https://www.intel.com/content/www/us/en/homepage.html
  75. https://www.intel.ai/openai/#menus
  76. https://www.intel.ai/openai/#top
