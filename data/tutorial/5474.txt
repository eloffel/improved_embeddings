   #[1]github [2]recent commits to crfasid56:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]85
     * [35]star [36]1,216
     * [37]fork [38]457

[39]torrvision/[40]crfasid56

   [41]code [42]issues 45 [43]pull requests 2 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   this repository contains the source code for the semantic image
   segmentation method described in the iccv 2015 paper: conditional
   random fields as recurrent neural networks.
   [47]http://crfasid56.torr.vision/
     * [48]72 commits
     * [49]1 branch
     * [50]2 releases
     * [51]fetching contributors
     * [52]view license

    1. [53]matlab 56.6%
    2. [54]python 42.6%
    3. [55]shell 0.8%

   (button) matlab python shell
   branch: master (button) new pull request
   [56]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/t
   [57]download zip

downloading...

   want to be notified of new releases in torrvision/crfasid56?
   [58]sign in [59]sign up

launching github desktop...

   if nothing happens, [60]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [61]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [62]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [63]download the github extension for visual studio
   and try again.

   (button) go back
   [64]@hmph
   [65]hmph [66]update readme.md
   latest commit [67]d932d0d dec 17, 2018
   [68]permalink
   type         name                 latest commit message           commit time
        failed to load latest commit information.
        [69]caffe @ d779ee3
        [70]matlab-scripts  [71]update readme.md                    may 19, 2016
        [72]python-scripts  [73]made the script python3 compatible. jul 14, 2017
        [74].gitmodules     [75]update gitmodules                   mar 30, 2017
        [76]contributors.md
        [77]license
        [78]readme.md
        [79]sample.png

readme.md

crf-id56 for semantic image segmentation

   [80]sample

   [81]license (3-clause bsd)

   live demo: [82]http://crfasid56.torr.vision
   updates:
     * [83]keras/tensorflow version is now available.
     * we now support the latest caffe future version.

   this package contains code for the "crf-id56" semantic image
   segmentation method, published in the iccv 2015 paper [84]conditional
   random fields as recurrent neural networks. this paper was initially
   described in an [85]arxiv tech report. the online demonstration based
   on this code won the best demo prize at iccv 2015. our software is
   built on top of the [86]caffe deep learning library. the current
   version was developed by:

   [87]sadeep jayasumana, [88]shuai zheng, [89]bernardino romera paredes,
   [90]anurag arnab, and zhizhong su.

   supervisor: [91]philip torr

   our work allows computers to recognize objects in images, what is
   distinctive about our work is that we also recover the 2d outline of
   objects. currently we have trained this model to recognize 20 classes.
   this software allows you to test our algorithm on your own images    
   have a try and see if you can fool it, if you get some good examples
   you can send them to us.

   why are we doing this? this work is part of a project to build
   augmented reality glasses for the partially sighted. please read about
   it here: [92]smart-specs.

   for demo and more information about crf-id56 please visit the project
   website: [93]http://crfasid56.torr.vision.

   if you use this code/model for your research, please cite the following
   papers:
@inproceedings{crfasid56_iccv2015,
    author = {shuai zheng and sadeep jayasumana and bernardino romera-paredes an
d vibhav vineet and
    zhizhong su and dalong du and chang huang and philip h. s. torr},
    title  = {id49 as recurrent neural networks},
    booktitle = {international conference on id161 (iccv)},
    year   = {2015}
}

@inproceedings{higherordercrf_eccv2016,
        author = {anurag arnab and sadeep jayasumana and shuai zheng and philip
h. s. torr},
        title  = {higher order id49 in deep neural networks
},
        booktitle = {european conference on id161 (eccv)},
        year   = {2016}
}

how to use the crf-id56 layer

   crf-id56 has been developed as a custom caffe layer named
   multistagemeanfieldlayer. usage of this layer in the model definition
   prototxt file looks the following. check the matlab-scripts or the
   python-scripts folder for more detailed examples.
# this is part of fcn, coarse is a blob coming from fcn
layer { type: 'crop' name: 'crop' bottom: 'bigscore' bottom: 'data' top: 'coarse
' }

# this layer is used to split the output of fcn into two. this is required by cr
f-id56.
layer { type: 'split' name: 'splitting'
  bottom: 'coarse' top: 'unary' top: 'q0'
}

layer {
  name: "id1361" # keep the name "id1361" to load the trained parameters
 from our caffemodel.
  type: "multistagemeanfield" # type of this layer
  bottom: "unary" # unary input from fcn
  bottom: "q0" # a copy of the unary input from fcn
  bottom: "data" # input image
  top: "pred" # output of crf-id56
  param {
    lr_mult: 10000 # learning rate for w_g
  }
  param {
    lr_mult: 10000 # learning rate for w_b
  }
  param {
    lr_mult: 1000 # learning rate for compatiblity transform matrix
  }
  multi_stage_meanfield_param {
    num_iterations: 10 # number of iterations for crf-id56
    compatibility_mode: potts # initialize the compatilibity transform matrix wi
th a matrix whose diagonal is -1.
    threshold: 2
    theta_alpha: 160
    theta_beta: 3
    theta_gamma: 3
    spatial_filter_weight: 3
    bilateral_filter_weight: 5
  }
}

installation guide

   first, clone the project by running:
git clone --recursive https://github.com/torrvision/crfasid56.git

   you need to compile the modified caffe library in this repository.
   instructions for ubuntu 14.04 are included below. you can also consult
   the generic [94]caffe installation guide for further help.

1.1 install dependencies

general dependencies

sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev
libhdf5-serial-dev protobuf-compiler
sudo apt-get install --no-install-recommends libboost-all-dev

cuda (optional - needed only if you are planning to use a gpu for faster
processing)

   install the correct cuda driver and its sdk. download cuda sdk from
   nvidia website.

   you might need to blacklist some modules so that they do not interfere
   with the driver installation. you also need to uninstall your default
   nvidia driver first.
sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-d
ev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev

   open /etc/modprobe.d/blacklist.conf and add:
blacklist amd76x_edac
blacklist vga16fb
blacklist nouveau
blacklist rivafb
blacklist nvidiafb
blacklist rivatv

sudo apt-get remove --purge nvidia*

   when you restart your pc, before logging in, try "ctrl + alt + f1" to
   switch to a text-based login. try:
sudo service lightdm stop
chmod +x cuda*.run
sudo ./cuda*.run

blas

   install a blas library such as atlas, openblas or mkl. to install blas:
sudo apt-get install libatlas-base-dev

python

   install anaconda python distribution or install the default python
   distribution with numpy, scipy, etc.

matlab (optional - needed only if you are planning to use the matlab
interface)

   install matlab using a standard distribution.

1.2 build the custom caffe version

   set the path correctly in the makefile.config. you can rename the
   makefile.config.example to makefile.config, as most common parts are
   filled already. you may need to change it a bit according to your
   environment.

   after this, in ubuntu 14.04, try:
make

   if there are no error messages, you can then compile and install the
   python and matlab wrappers: to install the matlab wrapper (optional):
make matcaffe

   to install the python wrapper (optional):
make pycaffe

   that's it! enjoy our software!

1.3 run the demo

   matlab and python scripts for running the demo are available in the
   matlab-scripts and python-scripts directories, respectively. both of
   these scripts do the same thing - you can choose either.

python users:

   change the directory to python-scripts. first download the model that
   includes the trained weights. in linux, this can be done by:
sh download_trained_model.sh

   alternatively, you can also get the model by directly clicking the link
   in python-scripts/readme.md.

   to run the demo, execute:
python crfasid56_demo.py

   you will get an output.png image.

   to use your own images, replace "input.jpg" in the crfasid56_demo.py
   file.

matlab users:

   change the directory to matlab-scripts. first download the model that
   includes the trained weights. in linux, this can be done by:
sh download_trained_model.sh

   alternatively, you can also get the model by directly clicking the link
   in matlab-scripts/readme.md.

   load your matlab application and run crfid56_demo.m.

   to use your own images, just replace "input.jpg" in the crfid56_demo.m
   file.

   you can also find a part of our model in [95]matconvnet.

explanation about the crf-id56 layer:

   if you would like to try out the crf-id56 model we trained, you should
   keep the layer name as it is ("id1361"), so that the code will
   correctly load the parameters from the caffemodel. otherwise, it will
   reinitialize parameters.

   you should find out that the end-to-end trained crf-id56 model does
   better than the alternatives. if you set the crf-id56 layer name to
   "id1362", you should observe lower performance since the parameters
   for both id98 and crf are not jointly optimized.

training crf-id56 on a new dataset:

   if you would like to train crf-id56 on other datasets, please follow the
   piecewise training described in our paper. in short, you should first
   train a strong pixel-wise id98 model. after this, you could plug our
   crf-id56 layer into it by adding the multistagemeanfieldlayer to the
   prototxt file. you should then be able to train the id98 and crf-id56
   parts jointly end-to-end.

   notice that the current deploy.prototxt file we have provided is
   tailored for pascal voc challenge. this dataset contains 21 class
   labels including background. you should change the num_output in the
   corresponding layer if you would like to finetune our model for other
   datasets. also, the deconvolution layer in current code does not allow
   initializing the parameters through prototxt. if you change the
   num_output there, you should manually re-initialize the parameters in
   the caffemodel file.

   see examples/segmentationcrfasid56 for more information.

why predictions are all black?

   this could happen if you change layer names in the model definition
   prototxt, causing the weights not to load correctly. this could also
   happen if you change the number of outputs in deconvolution layer in
   the prototxt but not initialize the deconvolution layer properly.

multistagemeanfield causes a segfault?

   this error usually occurs when you do not place the spatial.par and
   bilateral.par files in the script path.

python training script from third parties

   we would like to thank martinkersner and masazi for providing python
   training scripts for crf-id56.
    1. [96]martinkersner's scripts
    2. [97]masazi's scripts

merge with the upstream caffe

   it is possible to integrate the crf-id56 code into upstream caffe.
   however, due to the change of the crop layer, the caffemodel we
   provided might require extra training to provide the same accuracy.
   mtourne kindly provided a version that merged the code with upstream
   caffe.
    1. [98]mtourne upstream version with crfid56

gpu version of crf-id56

   hyenal kindly provided a purely gpu version of crf-id56. this would lead
   to considerably faster training and testing.
    1. [99]hyenal's gpu crf-id56

crf-as-id56 as a layer in lasagne

   [100]lasagne crfasid56 layer

latest caffe with cpu/gpu crf-id56

   [101]crfasid56-caffe

keras/tensorflow version of crf-id56

   [102]crfasid56_keras

   let us know if we have missed any other works from third parties.

   for more information about crf-id56 please visit the project website
   [103]http://crfasid56.torr.vision. contact: [104]crfasid56@gmail.com

     *    2019 github, inc.
     * [105]terms
     * [106]privacy
     * [107]security
     * [108]status
     * [109]help

     * [110]contact github
     * [111]pricing
     * [112]api
     * [113]training
     * [114]blog
     * [115]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [116]reload to refresh your
   session. you signed out in another tab or window. [117]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/torrvision/crfasid56/commits/master.atom
   3. https://github.com/torrvision/crfasid56#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/torrvision/crfasid56
  32. https://github.com/join
  33. https://github.com/login?return_to=/torrvision/crfasid56
  34. https://github.com/torrvision/crfasid56/watchers
  35. https://github.com/login?return_to=/torrvision/crfasid56
  36. https://github.com/torrvision/crfasid56/stargazers
  37. https://github.com/login?return_to=/torrvision/crfasid56
  38. https://github.com/torrvision/crfasid56/network/members
  39. https://github.com/torrvision
  40. https://github.com/torrvision/crfasid56
  41. https://github.com/torrvision/crfasid56
  42. https://github.com/torrvision/crfasid56/issues
  43. https://github.com/torrvision/crfasid56/pulls
  44. https://github.com/torrvision/crfasid56/projects
  45. https://github.com/torrvision/crfasid56/pulse
  46. https://github.com/join?source=prompt-code
  47. http://crfasid56.torr.vision/
  48. https://github.com/torrvision/crfasid56/commits/master
  49. https://github.com/torrvision/crfasid56/branches
  50. https://github.com/torrvision/crfasid56/releases
  51. https://github.com/torrvision/crfasid56/graphs/contributors
  52. https://github.com/torrvision/crfasid56/blob/master/license
  53. https://github.com/torrvision/crfasid56/search?l=matlab
  54. https://github.com/torrvision/crfasid56/search?l=python
  55. https://github.com/torrvision/crfasid56/search?l=shell
  56. https://github.com/torrvision/crfasid56/find/master
  57. https://github.com/torrvision/crfasid56/archive/master.zip
  58. https://github.com/login?return_to=https://github.com/torrvision/crfasid56
  59. https://github.com/join?return_to=/torrvision/crfasid56
  60. https://desktop.github.com/
  61. https://desktop.github.com/
  62. https://developer.apple.com/xcode/
  63. https://visualstudio.github.com/
  64. https://github.com/hmph
  65. https://github.com/torrvision/crfasid56/commits?author=hmph
  66. https://github.com/torrvision/crfasid56/commit/d932d0d2c111d3673b709fafd6e983e907761f28
  67. https://github.com/torrvision/crfasid56/commit/d932d0d2c111d3673b709fafd6e983e907761f28
  68. https://github.com/torrvision/crfasid56/tree/d932d0d2c111d3673b709fafd6e983e907761f28
  69. https://github.com/torrvision/caffe/tree/d779ee369bf86739bc225d99e78aefa040da199f
  70. https://github.com/torrvision/crfasid56/tree/master/matlab-scripts
  71. https://github.com/torrvision/crfasid56/commit/7e87a8862586d88b582b160cee13073dcf34c843
  72. https://github.com/torrvision/crfasid56/tree/master/python-scripts
  73. https://github.com/torrvision/crfasid56/commit/5688c8ddbfa53bafc02a647c1bec6a775bc4f55a
  74. https://github.com/torrvision/crfasid56/blob/master/.gitmodules
  75. https://github.com/torrvision/crfasid56/commit/229d37154046a7c0bdf782280762066bd3dd5ff9
  76. https://github.com/torrvision/crfasid56/blob/master/contributors.md
  77. https://github.com/torrvision/crfasid56/blob/master/license
  78. https://github.com/torrvision/crfasid56/blob/master/readme.md
  79. https://github.com/torrvision/crfasid56/blob/master/sample.png
  80. https://github.com/torrvision/crfasid56/blob/master/sample.png
  81. https://github.com/torrvision/crfasid56/blob/master/license
  82. http://crfasid56.torr.vision/
  83. https://github.com/sadeepj/crfasid56_keras
  84. http://www.robots.ox.ac.uk/~szheng/papers/crfasid56.pdf
  85. http://arxiv.org/abs/1502.03240
  86. http://caffe.berkeleyvision.org/
  87. http://www.robots.ox.ac.uk/~sadeep/
  88. http://kylezheng.org/
  89. http://romera-paredes.com/
  90. http://www.robots.ox.ac.uk/~aarnab/
  91. http://www.robots.ox.ac.uk/~tvg/
  92. http://www.va-st.com/smart-specs/
  93. http://crfasid56.torr.vision/
  94. http://caffe.berkeleyvision.org/installation.html
  95. http://www.vlfeat.org/matconvnet/pretrained/
  96. https://github.com/martinkersner/train-crf-id56
  97. https://github.com/masazi/crfasid56-training
  98. https://github.com/mtourne/crfasid56
  99. https://github.com/hyenal/crfasid56
 100. https://github.com/hapemask/crfid56_layer
 101. https://github.com/torrvision/caffe/tree/crfid56
 102. https://github.com/sadeepj/crfasid56_keras
 103. http://crfasid56.torr.vision/
 104. mailto:crfasid56@gmail.com
 105. https://github.com/site/terms
 106. https://github.com/site/privacy
 107. https://github.com/security
 108. https://githubstatus.com/
 109. https://help.github.com/
 110. https://github.com/contact
 111. https://github.com/pricing
 112. https://developer.github.com/
 113. https://training.github.com/
 114. https://github.blog/
 115. https://github.com/about
 116. https://github.com/torrvision/crfasid56
 117. https://github.com/torrvision/crfasid56

   hidden links:
 119. https://github.com/
 120. https://github.com/torrvision/crfasid56
 121. https://github.com/torrvision/crfasid56
 122. https://github.com/torrvision/crfasid56
 123. https://help.github.com/articles/which-remote-url-should-i-use
 124. https://github.com/torrvision/crfasid56#crf-id56-for-semantic-image-segmentation
 125. https://github.com/torrvision/crfasid56#how-to-use-the-crf-id56-layer
 126. https://github.com/torrvision/crfasid56#installation-guide
 127. https://github.com/torrvision/crfasid56#11-install-dependencies
 128. https://github.com/torrvision/crfasid56#general-dependencies
 129. https://github.com/torrvision/crfasid56#cuda-optional---needed-only-if-you-are-planning-to-use-a-gpu-for-faster-processing
 130. https://github.com/torrvision/crfasid56#blas
 131. https://github.com/torrvision/crfasid56#python
 132. https://github.com/torrvision/crfasid56#matlab-optional---needed-only-if-you-are-planning-to-use-the-matlab-interface
 133. https://github.com/torrvision/crfasid56#12-build-the-custom-caffe-version
 134. https://github.com/torrvision/crfasid56#13-run-the-demo
 135. https://github.com/torrvision/crfasid56#python-users
 136. https://github.com/torrvision/crfasid56#matlab-users
 137. https://github.com/torrvision/crfasid56#explanation-about-the-crf-id56-layer
 138. https://github.com/torrvision/crfasid56#training-crf-id56-on-a-new-dataset
 139. https://github.com/torrvision/crfasid56#why-predictions-are-all-black
 140. https://github.com/torrvision/crfasid56#multistagemeanfield-causes-a-segfault
 141. https://github.com/torrvision/crfasid56#python-training-script-from-third-parties
 142. https://github.com/torrvision/crfasid56#merge-with-the-upstream-caffe
 143. https://github.com/torrvision/crfasid56#gpu-version-of-crf-id56
 144. https://github.com/torrvision/crfasid56#crf-as-id56-as-a-layer-in-lasagne
 145. https://github.com/torrvision/crfasid56#latest-caffe-with-cpugpu-crf-id56
 146. https://github.com/torrvision/crfasid56#kerastensorflow-version-of-crf-id56
 147. https://github.com/
