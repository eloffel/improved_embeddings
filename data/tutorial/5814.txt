   [1]ideas [2]learning platform [3]conferences [4]shop
   search ____________________ submit
   [5]sign in

on our radar

   [6]ai
   [7]data
   [8]economy
   [9]operations
   [10]software architecture
   [11]software engineering
   [12]web programming
   [13]see all

   [14]ideas [15]learning platform [16]conferences [17]shop search
   ____________________ submit

on our radar

   [18]ai
   [19]data
   [20]economy
   [21]operations
   [22]software architecture
   [23]software engineering
   [24]web programming
   [25]see all

   [26]ai

                        dive into tensorflow with linux

   building a fast, accurate image classifier on the cheap.

   by [27]justin francis

   august 29, 2016

   photo mosaic. photo mosaic. (source: [28]pixabay)

   to learn how to build and train your first tensorflow graph from the
   ground up, check out [29]aaron schumacher's oriole tutorial: hello,
   tensorflow!

   for the last eight months, i have spent a lot of time trying to absorb
   as much as i can about machine learning. i am constantly amazed at the
   variety of people i meet on online moocs in this small but quickly
   growing community, from quantum researchers at [30]fermilab to
   tesla-driving silicon valley ceos. lately, i have been putting a lot of
   my focus into the open source software tensorflow, and this tutorial is
   the result of that.

   i feel like a lot of machine learning tutorials are geared toward mac.
   one major advantage of using linux is it   s free and it supports using
   tensorflow with your gpu. the accelerated parallel computing power of
   gpus are one of the reasons for such major advancements in machine
   learning. you don   t need cutting-edge technology to build a fast image
   classifier; my computer and graphic card cost me less than $400 usd.

   in this tutorial, i am going to walk you through how i learned to train
   my own image classifier on ubuntu with a gpu. this tutorial is very
   similar to pete warden   s [31]tensorflow for poets, but i did things a
   little differently. i am going to assume that you have tensorflow and
   [32]bazel installed and have [33]cloned the latest tensorflow release
   in your home directory. if you have not yet done that, you can follow a
   tutorial on my [34]blog. if you don   t have a compatible gpu, you can
   still follow this tutorial; it will just take longer.

   the overall process is extremely simple and can be broken into four
   main steps.
    1. collecting the training images
    2. training a graph/model using tensorflow and the inception model
    3. building the script that will classify new images using your graph
    4. testing the script by classifying new images

   i decided to train my classifier on five birds of prey. using birds of
   prey wasn   t a random decision. for two years, i worked for [35]the
   raptors, an educational center and wildlife management organization in
   duncan, british columbia, and i   ve had a long-standing passion for
   these powerful and mythical creatures. as the ultimate challenge, i
   pitted my classifier against [36]cornell ornithology lab's merlin
   [37]id tool. since writing this article, the lab has updated its site
   with this note:    merlin photo id is temporarily down for maintenance
   and upgrades.     the cornell lab of ornithology and visipedia are
   collaborating to develop id161 technology to identify birds
   in photos.    without a doubt, i suspect that they are upgrading their
   (now unavailable) merlin system to a modern machine learning
   classifier.

collecting training images

   i began by gathering about 100 photos of each bird from the raptors   s
   [38]facebook page and from web searches. i was able to build a set of
   photos with a good mix of the birds in many different environments and
   positions. it is ideal for an image classifier to have at least 100
   photos in varying scenarios and backgrounds in order for it to
   generalize well. there are also ways to [39]distort existing photos to
   make more training examples, but this can slow your training process to
   a crawl. keep in mind that we don   t need thousands of examples to train
   our model, because tensorflow will retrain a new model using trained
   feature detectors from the previously trained [40]inception [41]model.

   as an additional experiment, about 10% of the pictures i used were of
   juvenile birds of each species. i was curious if the classifier could
   find the similarities between a juvenile bird and a mature one.

   once i had the right number and types of images, i created a folder in
   my tensorflow directory:

   $ cd ~/tensorflow

   $ mkdir tf_files && cd tf_files && mkdir bird_photos && cd bird_photos

   $ mkdir baldeagle goldeneagle peregrine saker vulture

   this is what my directory looked like:
   tensorflow directory figure 1. screenshot courtesy of justin francis.

   i then moved the images into their appropriate folders. the script
   accepted png, jpg, gif & tif images, but i noticed in order to prevent
   an error, i had to rename one file that had a lot of symbols in its
   name.

training the model

   i then trained a new model and associated labels using a built-in
   python script from the tensorflow git clone. the original graph we are
   retraining took google researchers two weeks to build on a desktop with
   eight nvidia tesla k40s.

   $ cd ~/tensorflow

   $ python tensorflow/examples/image_retraining/retrain.py \
   --bottleneck_dir=tf_files/bottlenecks \
   --model_dir=tf_files/inception \
   --output_graph=tf_files/retrained_graph.pb \
   --output_labels=tf_files/retrained_labels.txt \
   --image_dir tf_files/bird_photos

   since i had tensorflow installed with gpu support, training my model
   took less than 10 minutes. if i had done this on my old xeon cpu, it
   probably would have taken me all day! here are the results:
   tensorflow classifer results 1 figure 2. screenshot courtesy of justin
   francis.

   my tensorflow model got a final test accuracy of 91.2%. i found this
   very impressive given the wide variety of photos i had used.

build the classifier

   up to this point, i took the inception graph and retrained it using my
   photos. next, i built my image classifier from the tensorflow git clone
   using bazel. (don   t close the terminal or you will need to rebuild.)

   $ bazel build tensorflow/examples/label_image:label_image

test the classifier

   now the fun part   testing the classifier against a new set of images. to
   make things easy, i put my test photos in my tf_files folder.

   $ bazel-bin/tensorflow/examples/label_image/label_image \
   --graph=tf_files/retrained_graph.pb \
   --labels=tf_files/retrained_labels.txt \
   --output_layer=final_result \
   --image=tf_files/bird.jpg #this is the test image

   first, i tried to classify a picture that i could immediately identify
   as a saker falcon:
   saker falcon figure 3. mature saker falcon, [42]dickdaniels on
   wikimedia commons.

   tensorflow agreed!
   tensorflow classifer results 2 figure 4. screenshot courtesy of justin
   francis.

   next, i tried a trickier juvenile peregrine falcon (left in the image
   below) that i had not used in my training data. a juvenile peregrine
   has front plumage similar to a saker but will develop a more striped
   belly, yellow beak, and a paler lower neck as it matures.
   spinus peregrine falcon peregrine falcon figure 5. on the left:
   juvenile peregrine falcon, [43]spinus nature photography on wikimedia
   commons. on the right: peregrine falcon, [44]norbert fischer on
   wikimedia commons.

   to my amazement the classifier detected the juvenile peregrine with
   quite high accuracy:
   tensorflow classifier results 3 figure 6. screenshot courtesy of justin
   francis.

   for my last example, i used a bird that humans often misclassify: the
   juvenile bald eagle. people often mistake it for a golden eagle because
   it does not have solid white plumage on its head and tail. i trained my
   classifier with about 10% photos of juvenile eagles.
   newly fledged juvenile bald eagle figure 7. newly fledged juvenile bald
   eagle, [45]ketadesign on wikimedia commons.

   seems like my classifier is not exceeding ornithologist-level
   intelligence yet:
   tensorflow classifier results 4 figure 8. screenshot courtesy of justin
   francis.

   i was especially surprised that    vulture    was its second guess and not
   bald eagle. this may be due to the fact that many of my vulture
   pictures were taken from a similar view.

   what about merlin? its first choice was spot on with a very reasonable
   second choice.
   cornell ornithology lab's merlin id tool figure 9. screenshot courtesy
   of justin francis.

   this is the only photo that merlin beat me on. but with enough training
   data, i   m fully confident my classifier could learn to distinguish
   adult bald eagles, juvenile bald eagles, and golden eagles. i, of
   course, would need a separate juvenile bald eagle folder with
   additional images.

   i had a lot of fun training and experimenting with this classifier, and
   i hope this post helps you make your own classifier, too. the
   possibilities for researchers and enthusiasts are endless. feel free to
   tag me [46]@wagonhelm or #tensorflow on twitter and show off what you
   created.
   article image: photo mosaic. (source: [47]pixabay).

   share
    1. [48]tweet
    2.
    3.
     __________________________________________________________________

   [49]justin francis

[50]justin francis

   justin francis is currently an undergraduate student at the university
   of alberta in canada. justin is also on the software team for the
   university's engineering club 'autonomous robotic vehicle project'
   (arvp.org) helping implement and experiment with deep learning and
   id23 algorithms.  in the past, he was the founder and
   educator at a non-profit community cooperative bicycle shop and spent
   two years exploring and experiencing the georgia strait on his
   sailboat.
   [51]more
     __________________________________________________________________

   [52]bots landscape.

   [53]ai

[54]infographic: the bot platform ecosystem

   by [55]jon bruner

   a look at the artificial intelligence and messaging platforms behind
   the fast-growing chatbot community

   video
   [56]vertical forest, milan.

   [57]ai

[58]evolve ai

   by [59]naveen rao

   naveen rao explains how intel nervana is evolving the ai stack from
   silicon to the cloud.

   [60]welcome sign at o'reilly ai conference 2016

   [61]ai

[62]highlights from the o'reilly ai conference in new york 2016

   by [63]mac slocum

   watch highlights covering artificial intelligence, machine learning,
   intelligence engineering, and more. from the o'reilly ai conference in
   new york 2016.

   video
   [64]close up of uber's self driving car in pittsburgh.

   [65]ai

[66]how ai is propelling driverless cars, the future of surface transport

   by [67]shahin farshchi

   shahin farshchi examines role artificial intelligence will play in
   driverless cars.

about us

     * [68]our company
     * [69]teach/speak/write
     * [70]careers
     * [71]customer service
     * [72]contact us

site map

     * [73]ideas
     * [74]learning
     * [75]topics
     * [76]all

     *
     *
     *
     *
     *

      2019 o'reilly media, inc. all trademarks and registered trademarks
   appearing on oreilly.com are the property of their respective owners.
   [77]terms of service     [78]privacy policy     [79]editorial independence

   animal

   iframe: [80]https://www.googletagmanager.com/ns.html?id=gtm-5p4v6z

references

   visible links
   1. https://www.oreilly.com/ideas
   2. https://learning.oreilly.com/
   3. http://www.oreilly.com/conferences/
   4. http://shop.oreilly.com/
   5. https://www.oreilly.com/sign-in.html
   6. https://www.oreilly.com/topics/ai
   7. https://www.oreilly.com/topics/data
   8. https://www.oreilly.com/topics/economy
   9. https://www.oreilly.com/topics/operations
  10. https://www.oreilly.com/topics/software-architecture
  11. https://www.oreilly.com/topics/software-engineering
  12. https://www.oreilly.com/topics/web-programming
  13. https://www.oreilly.com/topics
  14. https://www.oreilly.com/ideas
  15. https://learning.oreilly.com/
  16. http://www.oreilly.com/conferences/
  17. http://shop.oreilly.com/
  18. https://www.oreilly.com/topics/ai
  19. https://www.oreilly.com/topics/data
  20. https://www.oreilly.com/topics/economy
  21. https://www.oreilly.com/topics/operations
  22. https://www.oreilly.com/topics/software-architecture
  23. https://www.oreilly.com/topics/software-engineering
  24. https://www.oreilly.com/topics/web-programming
  25. https://www.oreilly.com/topics
  26. https://www.oreilly.com/topics/ai
  27. https://www.oreilly.com/people/justin-francis
  28. https://pixabay.com/en/images-photos-photo-collection-382007/
  29. https://www.safaribooksonline.com/oriole/hello-tensorflow-oriole?utm_source=oreilly&utm_medium=newsite&utm_campaign=dive-into-tensorflow-post-top-note-cta
  30. http://www.fnal.gov/
  31. https://petewarden.com/2016/02/28/tensorflow-for-poets/
  32. http://www.bazel.io/docs/install.html
  33. https://www.tensorflow.org/versions/r0.9/get_started/os_setup.html#clone-the-tensorflow-repository
  34. http://wp.me/p7gvoc-k
  35. http://the-raptors.com/
  36. http://merlin.allaboutbirds.org/photo-id/
  37. http://merlin.allaboutbirds.org/photo-id/
  38. https://www.facebook.com/pages/pacific-northwest-raptors/156435874376042
  39. https://www.tensorflow.org/versions/master/how_tos/image_retraining/index.html
  40. https://goo.gl/csrfj1
  41. https://goo.gl/csrfj1
  42. https://commons.wikimedia.org/wiki/file:saker_falcon_rwd3.jpg
  43. https://commons.wikimedia.org/wiki/file:spinus-peregrine-falcon-2014-11-n017575-w.jpg
  44. https://commons.wikimedia.org/wiki/file:peregrine_falcon_(australia).jpg
  45. https://commons.wikimedia.org/wiki/file:fledging_bald_eagle.jpg
  46. https://twitter.com/wagonhelm
  47. https://pixabay.com/en/images-photos-photo-collection-382007/
  48. https://twitter.com/share
  49. https://www.oreilly.com/people/justin-francis
  50. https://www.oreilly.com/people/justin-francis
  51. https://www.oreilly.com/people/justin-francis
  52. https://www.oreilly.com/ideas/infographic-the-bot-platform-ecosystem
  53. https://www.oreilly.com/topics/ai
  54. https://www.oreilly.com/ideas/infographic-the-bot-platform-ecosystem
  55. https://www.oreilly.com/people/b1d73-jon-bruner
  56. https://www.oreilly.com/ideas/evolve-ai
  57. https://www.oreilly.com/topics/ai
  58. https://www.oreilly.com/ideas/evolve-ai
  59. https://www.oreilly.com/people/14d38-naveen-rao
  60. https://www.oreilly.com/ideas/keynotes-from-ai-new-york-2016
  61. https://www.oreilly.com/topics/ai
  62. https://www.oreilly.com/ideas/keynotes-from-ai-new-york-2016
  63. https://www.oreilly.com/people/0d2c1-mac-slocum
  64. https://www.oreilly.com/ideas/how-ai-is-propelling-driverless-cars-the-future-of-surface-transport
  65. https://www.oreilly.com/topics/ai
  66. https://www.oreilly.com/ideas/how-ai-is-propelling-driverless-cars-the-future-of-surface-transport
  67. https://www.oreilly.com/people/c7521-shahin-farshchi
  68. http://oreilly.com/about/
  69. http://oreilly.com/work-with-us.html
  70. http://oreilly.com/careers/
  71. http://shop.oreilly.com/category/customer-service.do
  72. http://shop.oreilly.com/category/customer-service.do
  73. https://www.oreilly.com/ideas
  74. https://www.oreilly.com/topics/oreilly-learning
  75. https://www.oreilly.com/topics
  76. https://www.oreilly.com/all
  77. http://oreilly.com/terms/
  78. http://oreilly.com/privacy.html
  79. http://www.oreilly.com/about/editorial_independence.html
  80. https://www.googletagmanager.com/ns.html?id=gtm-5p4v6z

   hidden links:
  82. https://www.oreilly.com/
  83. https://www.facebook.com/oreilly/
  84. https://twitter.com/oreillymedia
  85. https://www.youtube.com/user/oreillymedia
  86. https://plus.google.com/+oreillymedia
  87. https://www.linkedin.com/company/oreilly-media
  88. https://www.oreilly.com/
