   #[1]giuseppe bonaccorso    feed [2]giuseppe bonaccorso    comments feed
   [3]giuseppe bonaccorso    svd recommendations using tensorflow comments
   feed [4]alternate [5]alternate

[6]giuseppe bonaccorso

   artificial intelligence     machine learning     data science
   (button)

     * [7]blog
     * [8]books
     * [9]resume / cv
     * [10]bonaccorso   s law
     * [11]essays
     * [12]contact
     * [13]testimonials
     * [14]gallery
     * [15]disclaimer

     * [16]blog
     * [17]books
     * [18]resume / cv
     * [19]bonaccorso   s law
     * [20]essays
     * [21]contact
     * [22]testimonials
     * [23]gallery
     * [24]disclaimer

svd recommendations using tensorflow

   [25]08/02/201711/02/2017[26]machine learning, [27]python,
   [28]tensorflow[29]6 comments

   id126 based on the user-item id105 have
   become more and more important thanks to powerful and distributable
   algorithms like als, but sometimes the number of users and/or items is
   not so huge and the computation can be done using directly a svd
   (singular value decomposition) algorithm. in this post, we   re going to
   discuss a very simple implementation based on tensorflow.

   the first element to define is the user-item matrix. normally this
   matrix associates each user with each product through a rating (0 means
   that no rating has been provided) or explicit feedback. this approach
   is effective whenever it   s possible to ask the user to rate the items,
   but there are many situations where this isn   t possible. in all those
   cases, an implicit feedback can be employed. for example:
     * for a movie/video, it   s possible to consider how many times the
       user watched it and the average duration
     * for a song, it   s useful to consider the number of times it was
       played
     * for a blog/magazine, a valid measure is provided by the time spent
       on each single page

   many measures can be used effectively; the only condition is that they
   must be time-invariant metric functions. if there are n users and m
   products, the user-item matrix is:

   the svd (limiting the computation to the p greatest singular values)
   allows to define the matrix as:


   the columns of u contain the left singular vector, while the rows of
   transposed v contain the right singular vectors. sigma is a diagonal
   matrix containing the singular values.

   in this model, we are assuming that a rating is determined by a set k
   user latent factors and k item ones. a latent factor is a variable that
   we cannot directly observe but it   s possible to estimate. this concept
   is very important because the theoretical foundation of the whole model
   is built upon it. just to understand, we can say that a user rates a
   generic product according to the gender, age range, education,
   interests and so forth. at the same time, a product can be virtually
   split into different components that contribute the the overall rating:
   brand, features, price, etc. even if we expect those latent factors, we
   cannot easily determine them, therefore we use a factorization method.
   the original user-item matrix will be split into two factors: a
   user-factor matrix and a factor-product matrix. the multiplication
   removes the latent factors, rebuilding the original user-item matrix.

   if we assume to have k factors, we can truncate the svd:

   in this way, we are selecting the top k singular values and the
   corresponding singular vectors. predictions can be obtained after
   defining two auxiliary matrices:

   the predicted rating for user i and product j is:

   where the first term is the average rating per user. however, in this
   example we are interested in finding the top k suggestions for all
   users, therefore we are not going to consider it as it   s a constant
   after defining the user.

   in the example, we assume to have 5000 users and 2000 products. the
   number of factors (k) is rather high (500) and can be dramatically
   reduced. the ratings are bounded between 1 and 5 (0 meaning no rating).
   every user has rated 500 random products and we want to suggest the top
   10 items. in this case, i   m not controlling if the item has already
   been rated, in fact there are situations (like youtube) where the
   recommendations contain video frequently seen and others (like netflix)
   where it   s more useful to suggest new (never-seen) items.
   view the code on [30]gist.

   the computational time is about 5 seconds on a i7 cpu.

   see also:

[31]a model-free collaborative id126 in 20 lines of python
code     giuseppe bonaccorso

     model-free id185 is a    lightweight    approach to
     id126s. it   s always based on the implicit
        collaboration    (in terms of ratings) among users, but it is
     computed in-memory without the usage of complex algorithms like als
     (alternating least squares) that can be executed in parallel
     environment (like spark).

share:

     * [32]click to share on twitter (opens in new window)
     * [33]click to share on facebook (opens in new window)
     * [34]click to share on linkedin (opens in new window)
     * [35]click to share on pocket (opens in new window)
     * [36]click to share on tumblr (opens in new window)
     * [37]click to share on reddit (opens in new window)
     * [38]click to share on pinterest (opens in new window)
     * [39]click to share on skype (opens in new window)
     * [40]click to share on whatsapp (opens in new window)
     * [41]click to share on telegram (opens in new window)
     * [42]click to email this to a friend (opens in new window)
     * [43]click to print (opens in new window)
     *

you can also be interested in these articles:

   [44]recommendations[45]svd[46]tensorflow

post navigation

   [47]lossy image autoencoders with convolution and deconvolution
   networks in tensorflow
   [48]assessing id91 optimality with instability index

6 thoughts on    svd recommendations using tensorflow   

    1. yin
       11/02/2017 at 8:09
       hi, i want to ask whether    ratings_t = tf.matmul(uk, si)    should be
          ratings_t = tf.matmul(su, si)   ?
       [49]reply
          + [50]giuseppe bonaccorso
            11/02/2017 at 8:45
            hi,
            thank you very much. it was a typo. in the formula i wrote su
            dot si, but in the code there was a mistake. corrected.
            [51]reply
    2. vincent
       03/15/2018 at 8:56
       compute reduced matrices
       sk = tf.diag(st)[0:nb_factors, 0:nb_factors]
       uk = ut[:, 0:nb_factors]
       vk = tf.transpose(vt)[0:nb_factors, :]
       hi, i just want to ask , there should be a transpose operation when
       calculating the vk matrix. or else the shape of ratings would be
       incorrect.
       [52]reply
          + [53]giuseppe bonaccorso
            03/18/2018 at 12:11
            hi,
            the svd implementation (like in scipy) returns the v matrix
            already transposed.
            which shape are you obtaining?
            [54]reply
    3. yongguang zhang
       05/16/2018 at 11:06
       that    what i need! thx!
       btw, i think it   s will look better if u wrote the code of training
       process.
       i mean cost and train_op.
       it   s make it easier to understand for the beginer.
       thanks again.
       [55]reply
          + [56]giuseppe bonaccorso
            05/16/2018 at 19:26
            hi,
            thanks! in this case, the training process is done through the
            svd. an alternative approach which is based on a cost function
            (mean squared error) and a training operator is the
            non-negative id105. i   m going to add this
            example in a future post.
            [57]reply

leave a reply [58]cancel reply

   iframe: [59]jetpack_remote_comment

follow me

     * [60]linkedin
     * [61]twitter
     * [62]facebook
     * [63]github
     * [64]instagram
     * [65]amazon
     * [66]medium
     * [67]rss

search articles

   ____________________ (button)

latest blog posts

     * [68]machine learning algorithms     second edition 08/28/2018
     * [69]recommendations and user-profiling from implicit feedbacks
       07/10/2018
     * [70]are recommendations really helpful? a brief non-technical
       discussion 06/29/2018
     * [71]a book that every data scientist should read 06/22/2018
     * [72]mastering machine learning algorithms 05/24/2018

subscribe to this blog

   join 2,190 other subscribers

   email ____________________

   subscribe

follow me on twitter

   [73]my tweets

   copyright    2019 [74]giuseppe bonaccorso. all rights reserved.
   [75]privacy policy - [76]cookie policy

   send to email address ____________________ your name
   ____________________ your email address ____________________
   _________________________ loading send email [77]cancel
   post was not sent - check your email addresses!
   email check failed, please try again
   sorry, your blog cannot share posts by email.

references

   visible links
   1. https://www.bonaccorso.eu/feed/
   2. https://www.bonaccorso.eu/comments/feed/
   3. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/feed/
   4. https://www.bonaccorso.eu/wp-json/oembed/1.0/embed?url=https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/
   5. https://www.bonaccorso.eu/wp-json/oembed/1.0/embed?url=https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/&format=xml
   6. https://www.bonaccorso.eu/
   7. https://www.bonaccorso.eu/blog/
   8. https://www.bonaccorso.eu/books/
   9. https://www.bonaccorso.eu/resume/
  10. https://www.bonaccorso.eu/bonaccorso-law/
  11. https://www.bonaccorso.eu/ai-cognitive-pychology-essays-italian/
  12. https://www.bonaccorso.eu/contact/
  13. https://www.bonaccorso.eu/testimonials/
  14. https://www.bonaccorso.eu/gallery/
  15. https://www.bonaccorso.eu/disclaimer/
  16. https://www.bonaccorso.eu/blog/
  17. https://www.bonaccorso.eu/books/
  18. https://www.bonaccorso.eu/resume/
  19. https://www.bonaccorso.eu/bonaccorso-law/
  20. https://www.bonaccorso.eu/ai-cognitive-pychology-essays-italian/
  21. https://www.bonaccorso.eu/contact/
  22. https://www.bonaccorso.eu/testimonials/
  23. https://www.bonaccorso.eu/gallery/
  24. https://www.bonaccorso.eu/disclaimer/
  25. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/
  26. https://www.bonaccorso.eu/category/machine-learning/
  27. https://www.bonaccorso.eu/category/software/python/
  28. https://www.bonaccorso.eu/category/machine-learning/deep-learning/tensorflow-deep-learning/
  29. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/#comments
  30. https://gist.github.com/giuseppebonaccorso/3acff53906cbb7c37abb8c7e4bf3b0ef
  31. https://www.bonaccorso.eu/2017/09/13/a-model-free-collaborative-recommendation-system-in-20-lines-of-python/
  32. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/?share=twitter
  33. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/?share=facebook
  34. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/?share=linkedin
  35. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/?share=pocket
  36. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/?share=tumblr
  37. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/?share=reddit
  38. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/?share=pinterest
  39. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/?share=skype
  40. https://api.whatsapp.com/send?text=svd recommendations using tensorflow https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/
  41. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/?share=telegram
  42. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/?share=email
  43. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/#print
  44. https://www.bonaccorso.eu/tag/recommendations/
  45. https://www.bonaccorso.eu/tag/svd/
  46. https://www.bonaccorso.eu/tag/tensorflow/
  47. https://www.bonaccorso.eu/2017/07/29/lossy-image-autoencoders-convolution-deconvolution-networks-tensorflow/
  48. https://www.bonaccorso.eu/2017/08/03/assessing-id91-optimality-instability-index/
  49. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/#comment-58
  50. https://www.bonaccorso.eu/
  51. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/#comment-59
  52. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/#comment-76
  53. https://www.bonaccorso.eu/
  54. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/#comment-77
  55. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/#comment-87
  56. https://www.bonaccorso.eu/
  57. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/#comment-88
  58. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/#respond
  59. https://jetpack.wordpress.com/jetpack-comment/?blogid=100107841&postid=1039&comment_registration=0&require_name_email=1&stc_enabled=1&stb_enabled=1&show_avatars=1&avatar_default=gravatar_default&greeting=leave+a+reply&greeting_reply=leave+a+reply+to+%s&color_scheme=light&lang=en_us&jetpack_version=7.0.1&show_cookie_consent=10&has_cookie_consent=0&sig=1a58c754645d1852d90166fdc6d764747facd4db#parent=https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/
  60. https://www.linkedin.com/in/giuseppebonaccorso/
  61. https://twitter.com/giuseppeb/
  62. https://www.facebook.com/giuseppe.bonaccorso/
  63. https://github.com/giuseppebonaccorso/
  64. https://www.instagram.com/giuseppebonaccorso/
  65. https://www.amazon.com/author/giuseppebonaccorso
  66. https://medium.com/@giuseppe.bonaccorso
  67. https://www.bonaccorso.eu/feed/
  68. https://www.bonaccorso.eu/2018/08/28/machine-learning-algorithms-second-edition/
  69. https://www.bonaccorso.eu/2018/07/10/recommendations-user-profiling-implicit-feedbacks/
  70. https://www.bonaccorso.eu/2018/06/29/recommendations-really-helpful-brief-non-technical-discussion/
  71. https://www.bonaccorso.eu/2018/06/22/a-book-that-every-data-scientist-should-read/
  72. https://www.bonaccorso.eu/2018/05/24/mastering-machine-learning-algorithms/
  73. https://twitter.com/giuseppeb
  74. https://www.bonaccorso.eu/
  75. https://www.iubenda.com/privacy-policy/331721
  76. https://www.iubenda.com/privacy-policy/331721/cookie-policy
  77. https://www.bonaccorso.eu/2017/08/02/svd-recommendations-using-tensorflow/#cancel

   hidden links:
  79. https://www.bonaccorso.eu/category/machine-learning/machine-learning-algorithms-addenda/
