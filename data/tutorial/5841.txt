   [1]fork me on github

   [loop.svg]

reinforcejs

     * [2]about
     * [3]gridworld: dp
     * [4]gridworld: td
     * [5]puckworld: id25
     * [6]waterworld: id25

temporal difference learning gridworld demo


   // agent parameter spec to play with (this gets eval()'d on 
   var spec = {}_______________________________________________
   spec.update = 'qlearn'; // 'qlearn' or 'sarsa'______________
   spec.gamma = 0.9; // discount factor, [0, 1)________________
   spec.epsilon = 0.2; // initial epsilon for epsilon-greedy po
   spec.alpha = 0.1; // value function learning rate___________
   spec.lambda = 0; // eligibility trace decay, [0,1). 0 = no e
   spec.replacing_traces = true; // use replacing or accumulati
   spec.plann = 50; // number of planning steps per iteration. 
   ____________________________________________________________
   spec.smooth_policy_update = true; // non-standard, updates p
   spec.beta = 0.1; // learning rate for smooth policy update__
   (button) reinit agent (button) toggle td learning (button) go fast
   (button) go normal (button) go slow
   exploration epsilon: 0.15
   cell reward: (select a cell)
   number of actions before reaching the goal state (low is good):
   ### setup (*copy-pasted from id145 demo*). this is a toy
   environment called **gridworld** that is often used as a toy model in
   the id23 literature. in this particular case: -
   **state space**: gridworld has 10x10 = 100 distinct states. the start
   state is the top left cell. the gray cells are walls and cannot be
   moved to. - **actions**: the agent can choose from up to 4 actions to
   move around. in this example - **environment dynamics**: gridworld is
   deterministic, leading to the same new state given each state and
   action - **rewards**: the agent receives +1 reward when it is in the
   center square (the one that shows r 1.0), and -1 reward in a few states
   (r -1.0 is shown for these). the state with +1.0 reward is the goal
   state and resets the agent back to start. in other words, this is a
   deterministic, finite markov decision process (mdp) and as always the
   goal is to find an agent policy (shown here by arrows) that maximizes
   the future discounted reward. my favorite part is letting the agent
   find the optimal path, then suddenly change the reward of some cell
   with the slider and watch it struggle to reroute its policy.
   **interface**. the color of the cells (initially all white) shows the
   current estimate of the value (discounted reward) of that state, with
   the current policy. note that you can select any cell and change its
   reward with the *cell reward* slider. ### temporal difference learning
   td methods (for finite mdps) are covered very nicely in **richard
   sutton's free online book on id23**, in this
   particular case [chapter
   6](http://webdocs.cs.ualberta.ca/~sutton/book/ebook/node60.html), but
   reinforcejs also implements many of the bells and whistles described in
   chapters 7 (eligibility traces), chapter 9 (planning), and chapter 8
   (function approximation and more generally deep id24). briefly,
   the core idea is to estimate the action value function
   \\(q^\pi(s,a)\\), which is the expected discounted reward obtained by
   the agent by taking action \\(a\\) in state \\(s\\) and then following
   some particular policy \\(\pi(a \\mid s)\\): $$ q^\pi (s,a) = e\_\pi
   \\{ r\_t + \\gamma r\_{t+1} + \\gamma^2 r\_{t+2} + \\ldots \\mid s\_t =
   s, a\_t = a \\} $$ the expectation above is really over two stochastic
   sources: 1. the environment and 2. the agent policy which in the
   general case is also stochastic. unlike id145, temporal
   difference learning estimates the value functions from the point of
   view of an agent who is interacting with the environment, collecting
   experience about its dynamics and adjusting its policy online. that is,
   the agent's interaction with the environment (which forms our training
   set) is a long sequence of \\(s\_t, a\_t, r\_t, s\_{t+1}, a\_{t+1},
   r\_{t+1}, s\_{t+2}, \ldots \\), indexed by t (time):
   [sarsa.png]
   however, unlike a standard machine learning setting the agent picks the
   actions, and hence influences its own training set. fun! the core idea
   is to notice that the q function satisfies the bellman equation, which
   is a recurrence relation that relates the q function at one action node
   \\((s\_t, a\_t)\\) to the next one \\((s\_{t+1}, a\_{t+1})\\). in
   particular, looking at the above diagram the agent: 1. the agent picked
   some action \\(a\_t\\) in state \\(s\_t\\) 2. the environment responded
   with some reward \\(r\_t\\) and new state \\(s\_{t+1}\\) 3. the agent
   then picks some new action \\(a\_{t+1}\\) from its current policy
   \\(\pi\\). we can explicitly write out the expect reward of this
   behavior and express q recursively based on itself: $$ q(s,a) =
   \sum\_{s'} \mathcal{p}\_{ss'}^a \left[ \mathcal{r}\_{ss'}^a + \\gamma
   \sum\_{a'} \pi(s',a') q(s',a') \right] $$ where we see the two sources
   of randomness explicitly summed over (first over the next state, and
   then over the agent's current policy). since this equation is expected
   to hold, our strategy is to initialize \\(q\\) with some numbers (e.g.
   all zeros) and then turn this recurrence relation into an update. of
   course, we don't have access to the environment dynamics
   \\(\mathcal{p}\\), but we can base the update on the agent's experience
   from interacting with the environment, which is at least a sample from
   this unknown distribution. notice that we do have access to the policy
   \\(\pi\\) so we could in principle evaluate the second sum exactly, but
   in practice it is simpler (especially if your actions were continuous)
   to sample this part as well, giving rise to the **sarsa** (short for
   s,a,r,s',a', get it?) algorithm: $$ q(s\_t, a\_t) \leftarrow q(s\_t,
   a\_t) + \alpha \left[ \underbrace{r\_t + \gamma q(s\_{t+1},
   a\_{t+1})}\_{target} - \underbrace{q(s\_t, a\_t)}\_{current} \right] $$
   here the parameter \\( \alpha \\) is the learning rate, and the
   quantity inside the bracket is called the **td error**. in other words
   the idea is to interact with the environment by starting with some
   initial \\(q\\), using some policy \\(\\pi\\), and keeping track of a
   chain of (s,a,r,...). we then simply treat this as training data, and
   use online stochastic id119 to minimize the id168,
   which in this case is the bellman recurrence relation. each time we
   perform the update to the q function, we can also update our policy to
   be greedy with respect to our new belief about q. that is, in each
   state the policy becomes to take the action that maximizes q. this
   approach of starting with some value function and policy and
   iteratively updating one based on the other is the **policy iteration**
   scheme described in sutton's book:
   [policyiter.png]
   now, **sarsa** is called an **on-policy** method because it's
   evaluating the q function for a particular policy. it turns out that if
   you're interested in control rather than estimating q for some policy,
   in practice there is an update that works much better. it's called
   **id24** and it has the form: $$ q(s\_t, a\_t) \leftarrow q(s\_t,
   a\_t) + \alpha \left[ r\_t + \gamma \max\_a q(s\_{t+1}, a) - q(s\_t,
   a\_t) \right] $$ this is an **off-policy** update because the behavior
   policy does not match the policy whose q function is being
   approximated, in this case the optimal action-value function
   \\(q^\*\\). intuitively, the update looks *optimistic*, since it
   updates the q function based on its estimate of the value of the best
   action it can take at state \\(s\_{t+1}\\), not based on the action it
   happened to sample with its current behavior policy. with this
   gridworld demo as well, the id24 update converges much faster
   than sarsa. **exploration**. the last necessary component to get td
   learning to work well is to explicitly ensure some amount of
   exploration. if the agent always follows its current policy, the danger
   is that it can get stuck exploiting, somewhat similar to getting stuck
   in local minima during optimization. one common and perhaps simplest
   way to ensure some exploration (and make all converge proofs work) is
   to make the agent's policy **epsilon-greedy**. that is, with
   id203 \\(\epsilon\\) the agent takes a random action, and the
   remainder of the time it follows its current policy. some usual
   settings for this parameter are 0.1, 0.2, or so, and this is usually
   annealed over the duration of the trianing time to very small numbers
   (e.g. 0.05 or 0.01, etc). ### td bells and whistles looking at the
   options available to you in the spec for the demo, there are some usual
   suspects (whether we are using 'qlearn', or 'sarsa'), the discount
   factor `spec.gamma`, the exploration parameter `spec.epsilon`, and the
   learning rate `spec.alpha`. what is all the other stuff? **eligibility
   traces**. the idea behind eligibility traces is to make the td updates
   less local and diffuse them backwards through some part of the past
   experience. in other words, we're keeping a (decaying) trace of where
   the agent has been previously (the decay strength is controlled by a
   hyperparameter \\(\lambda\\)), and performing q value updates not only
   on one link of the s,a,r,s,a,s,a,r.... chain, but along some recent
   history of it. this is justified by the fact that when the q value
   changes for some state (s,a), then all the other states immediately
   before it are also influenced due to their recursive dependence. for
   example, if the agent discovers a reward on some gridworld square, it
   would not only update the q of the immediately previous state, but also
   several several states it has seen leading up to this state. use
   `spec.lambda` to control the decay of the eligibility trace, where 0
   means no traces should be used (default).
   [lambda.png]
   image taken from sutton's book, showing the basic idea of eligibility
   traces.
   additionally, there is one more option to either use replacing, or
   accumulating traces which can be controlled with
   `spec.replacing_traces` (default is true). the difference is only with
   how the trace is accumulated when the same state is visited multiple
   times (incremented each time, or reset to a fixed maximum value).
   again, a nice diagram from sutton's book shows the strength of the
   trace for a single state as it is repeatedly visited, and gets the
   point across nicely:
   [traces.png]
   **planning**. td methods are by default called **model-free**, because
   they do not need to estimate the environment model. that is, we do not
   need to know the transition probabilities \\(\mathcal{p}\\), or the
   rewards assigned by the environment to the agent \\(\mathcal{r}\\). we
   only observe samples of these values and distil their sufficient
   statistics in the action value function \\(q\\). however, a model of
   the environment can still prove extremely useful. the basic idea in
   planning is that we will explicitly maintain a model of how the
   environment works (trained again, from observation data). that is, what
   states and actions lead to what other states, and how the rewards are
   assigned. in other words, based on our training data trace \\(s\_t,
   a\_t, r\_t, s\_{t+1}, a\_{t+1}, r\_{t+1}, s\_{t+2}, \ldots \\) , the
   agent keeps track of the environment model: $$ model(s,a) \leftarrow
   s', r $$ in this gridworld demo for example, it's just a simple array
   lookup for all pairs of \\(s,a\\). the fact that this gridworld is
   deterministic helps, because these are all just fixed, unchanging
   values that are easy to observe once and then remember. this model is
   very useful because it can help us hallucinate experiences, and perform
   updates based on these *fake* experiences: 1. perform some action
   \\(a\\) in the real world 2. get the new state \\(s'\\) and reward
   \\(r\\) from the environment 3. perform a regular td update (e.g.
   id24 update) 4. update the environment model with \\(model(s,a)
   \leftarrow s', r\\) 5. repeat **n** times: sample some \\(s,a\\), use
   the model to predict \\(s',r\\), perform the id24 update on this
   hallucinated experience. notice that we're performing many more value
   function updates per step using our model of the environment. in
   practice (and in this demo as well), this can help convergence by a
   large amount. you can control the number of planning steps (fake
   experience updates) per iteration with `spec.plann` (0 = no planning).
   intuitively, the reason this works so well is that when the agent
   discovers the high reward state, its environment model also *knows* how
   to get to it, so as the hallucinated experiences end up updating all
   the states globally backwards through the modeled transitions. in this
   demo, the arrows will start to "magically" point in the right direction
   the very first time the high reward state is discovered. **priority
   queue for faster update schedule**. there is one additional whistle
   that is implemented by reinforcejs, which is the use of a **priority
   queue** to speed things up. we don't just sample random **n** states to
   perform an update in, but keep track of the states that most need
   updating, and pop those from the queue with preferential treatment.
   intuitively, the td error during each update tells us how *surprising*
   the update is. say we've updated the q value of some state \\(s\\) with
   a large td error. we can query the model for all states that are
   predicted to lead to \\(s\\), and place those in the priority queue
   with priority of the magnitude of the td error, since we expect their
   updates to be large as well. this way we don't waste our time sampling
   states that are somewhere far away and barely need any update. in this
   gridworld demo, when the agent discovers the reward state the first
   time this causes a large positive td error, which immediately places
   all the states leading up to the reward state in the priority queue
   with high priorities. hence, the q values diffuse and sync in the
   fastest possible ways through the entire q function. this is turned on
   by default (not a setting). **smooth q function updates**. the last
   reinforcejs settings are `spec.smooth_policy_update` and `spec.beta`.
   this is non-standard and something i added for nicer visualizations.
   normally you update the policy to always take the action that lead to
   highest q. with this setting, i am using stochastic policy but smoothly
   updating the policy to converge slowly to the argmaxy action. this
   makes for nicer, smoother visualizations of the policy arrows. ###
   reinforcejs api use of td similar to the dp classes, if you'd like to
   use the reinforcejs td learning you have to define an environment
   object `env` that has a few methods that the td agent will need: -
   `env.getnumstates()` returns an integer of total number of states -
   `env.getmaxnumactions()` returns an integer with max number of actions
   in any state - `env.allowedactions(s)` takes an integer `s` and returns
   a list of available actions, which should be integers from zero to
   `maxnumactions` see the gridworld environment in this demo's source
   code for an example. the `tdagent` class assumes a finite mdp (so
   discrete, finite number of states and actions), and works through a
   very simple `action = agent.act(state)` and `agent.learn(reward)`
   interface:
// create environment
env = new gridworld();
// create the agent, yay!
var spec = { alpha: 0.01 } // see full options on top of this page
agent = new rl.tdagent(env, spec);

setinterval(function(){ // start the learning loop
  var action = agent.act(s); // s is an integer, action is integer
  // execute action in environment and get the reward
  agent.learn(reward); // the agent improves its q,policy,model, etc.
}, 0);

   if you have a problem that doesn't have a discrete number of states but
   some very large state space and some state features, **id25** (deep q
   learning) is for you. head over to the next section.

references

   1. https://github.com/karpathy/reinforcejs
   2. https://cs.stanford.edu/people/karpathy/reinforcejs/index.html
   3. https://cs.stanford.edu/people/karpathy/reinforcejs/gridworld_dp.html
   4. https://cs.stanford.edu/people/karpathy/reinforcejs/gridworld_td.html
   5. https://cs.stanford.edu/people/karpathy/reinforcejs/puckworld.html
   6. https://cs.stanford.edu/people/karpathy/reinforcejs/waterworld.html
