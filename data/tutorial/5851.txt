   #[1]github [2]recent commits to easy21:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]2
     * [35]star [36]4
     * [37]fork [38]3

[39]analog-rl/[40]easy21

   [41]code [42]issues 0 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   id23 assignment: easy21
     * [47]14 commits
     * [48]3 branches
     * [49]0 releases
     * [50]fetching contributors
     * [51]mit

    1. [52]jupyter notebook 98.1%
    2. [53]python 1.9%

   (button) jupyter notebook python
   branch: master (button) new pull request
   [54]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/a
   [55]download zip

downloading...

   want to be notified of new releases in analog-rl/easy21?
   [56]sign in [57]sign up

launching github desktop...

   if nothing happens, [58]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [59]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [60]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [61]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [62]permalink
 type                   name                   latest commit message commit time
      failed to load latest commit information.
      [63]joe #1-implementation of easy21
      [64]joe #2 monte-carlo control in easy21
      [65]joe #3 td learning in easy21
      [66].gitignore
      [67]license
      [68]readme.md

readme.md

easy21

   id23 assignment: easy21

   from: [69]http://www0.cs.ucl.ac.uk/staff/d.silver/web/teaching.html

   sections
     * [x] #1-implementation of easy21
     * [x] #2 monte-carlo control in easy21
     * [x] #3 td learning in easy21
     * [ ] #4 linear function approximation in easy21
     * [ ] #5 discussion

#1-implementation of easy21

   you should write an environment that implements the game easy21.
   specifi- cally, write a function, named step, which takes as input a
   state s (dealer   s first card 1   10 and the player   s sum 1   21), and an
   action a (hit or stick), and returns a sample of the next state s   
   (which may be terminal if the game is finished) and reward r. we will
   be using this environment for model-free id23, and
   you should not explicitly represent the transition matrix for the mdp.
   there is no discounting (   = 1). you should treat the dealer   s moves as
   part of the environment, i.e. calling step with a stick action will
   play out the dealer   s cards and return the final reward and terminal
   state.

   10 marks

   see #1-implementation of easy21.ipynb

#2 monte-carlo control in easy21

   apply monte-carlo control to easy21. initialise the value function to
   zero. use a time-varying scalar step-size of   t = 1/n(st,at) and an
     -greedy exploration strategy with   t = n0/(n0 + n(st)), where n0 = 100
   is a constant, n(s) is the number of times that state s has been
   visited, and n(s,a) is the number of times that action a has been
   selected from state s. feel free to choose an alternative value for n0,
   if it helps producing better results. plot the optimal value function v
       (s) = maxa q    (s, a) using similar axes to the following figure taken
   from sutton and barto   s blackjack example.

   15 marks

#3 td learning in easy21

   implement sarsa(  ) in 21s. initialise the value function to zero. use
   the same step-size and exploration schedules as in the previous
   section. run the algorithm with parameter values        {0, 0.1, 0.2, ...,
   1}. stop each run after 1000 episodes and report the mean-squared error
   s,a(q(s, a)     q   (s, a))2 over all states s and actions a, comparing the
   true values q   (s,a) computed in the previous section with the estimated
   values q(s, a) computed by sarsa. plot the mean- squared error against
     . for    = 0 and    = 1 only, plot the learning curve of mean-squared
   error against episode number.

   15 marks

#4 linear function approximation in easy21

   we now consider a simple value function approximator using coarse
   coding. use a binary feature vector   (s, a) with 3     6     2 = 36
   features. each binary feature has a value of 1 iff (s, a) lies within
   the cuboid of state-space corresponding to that feature, and the action
   corresponding to that feature. the cuboids have the following
   overlapping intervals: dealer(s) = {[1, 4], [4, 7], [7, 10]} player(s)
   = {[1, 6], [4, 9], [7, 12], [10, 15], [13, 18], [16, 21]} a = {hit,
   stick} where     dealer(s) is the value of the dealer   s first card (1   10)
       sum(s) is the sum of the player   s cards (1   21) repeat the sarsa(  )
   experiment from the previous section, but using linear value function
   approximation q(s, a) =   (s, a)     . use a constant exploration of    =
   0.05 and a constant step-size of 0.01. plot the mean-squared error
   against   . for    = 0 and    = 1 only, plot the learning curve of
   mean-squared error against episode number.

#5 discussion

   discuss the choice of algorithm used in the previous section.     what
   are the pros and cons of id64 in easy21?     would you expect
   id64 to help more in blackjack or easy21? why?     what are the
   pros and cons of function approximation in easy21?     how would you
   modify the function approximator suggested in this section to get
   better results in easy21?

   15 marks

     *    2019 github, inc.
     * [70]terms
     * [71]privacy
     * [72]security
     * [73]status
     * [74]help

     * [75]contact github
     * [76]pricing
     * [77]api
     * [78]training
     * [79]blog
     * [80]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [81]reload to refresh your
   session. you signed out in another tab or window. [82]reload to refresh
   your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/analog-rl/easy21/commits/master.atom
   3. https://github.com/analog-rl/easy21#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/analog-rl/easy21
  32. https://github.com/join
  33. https://github.com/login?return_to=/analog-rl/easy21
  34. https://github.com/analog-rl/easy21/watchers
  35. https://github.com/login?return_to=/analog-rl/easy21
  36. https://github.com/analog-rl/easy21/stargazers
  37. https://github.com/login?return_to=/analog-rl/easy21
  38. https://github.com/analog-rl/easy21/network/members
  39. https://github.com/analog-rl
  40. https://github.com/analog-rl/easy21
  41. https://github.com/analog-rl/easy21
  42. https://github.com/analog-rl/easy21/issues
  43. https://github.com/analog-rl/easy21/pulls
  44. https://github.com/analog-rl/easy21/projects
  45. https://github.com/analog-rl/easy21/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/analog-rl/easy21/commits/master
  48. https://github.com/analog-rl/easy21/branches
  49. https://github.com/analog-rl/easy21/releases
  50. https://github.com/analog-rl/easy21/graphs/contributors
  51. https://github.com/analog-rl/easy21/blob/master/license
  52. https://github.com/analog-rl/easy21/search?l=jupyter-notebook
  53. https://github.com/analog-rl/easy21/search?l=python
  54. https://github.com/analog-rl/easy21/find/master
  55. https://github.com/analog-rl/easy21/archive/master.zip
  56. https://github.com/login?return_to=https://github.com/analog-rl/easy21
  57. https://github.com/join?return_to=/analog-rl/easy21
  58. https://desktop.github.com/
  59. https://desktop.github.com/
  60. https://developer.apple.com/xcode/
  61. https://visualstudio.github.com/
  62. https://github.com/analog-rl/easy21/tree/8ac483f9743dbce0574c6ef1448983fbad90a86d
  63. https://github.com/analog-rl/easy21/tree/master/joe #1-implementation of easy21
  64. https://github.com/analog-rl/easy21/tree/master/joe #2 monte-carlo control in easy21
  65. https://github.com/analog-rl/easy21/tree/master/joe #3 td learning in easy21
  66. https://github.com/analog-rl/easy21/blob/master/.gitignore
  67. https://github.com/analog-rl/easy21/blob/master/license
  68. https://github.com/analog-rl/easy21/blob/master/readme.md
  69. http://www0.cs.ucl.ac.uk/staff/d.silver/web/teaching.html
  70. https://github.com/site/terms
  71. https://github.com/site/privacy
  72. https://github.com/security
  73. https://githubstatus.com/
  74. https://help.github.com/
  75. https://github.com/contact
  76. https://github.com/pricing
  77. https://developer.github.com/
  78. https://training.github.com/
  79. https://github.blog/
  80. https://github.com/about
  81. https://github.com/analog-rl/easy21
  82. https://github.com/analog-rl/easy21

   hidden links:
  84. https://github.com/
  85. https://github.com/analog-rl/easy21
  86. https://github.com/analog-rl/easy21
  87. https://github.com/analog-rl/easy21
  88. https://help.github.com/articles/which-remote-url-should-i-use
  89. https://github.com/analog-rl/easy21#easy21
  90. https://github.com/analog-rl/easy21#1-implementation-of-easy21
  91. https://github.com/analog-rl/easy21#2-monte-carlo-control-in-easy21
  92. https://github.com/analog-rl/easy21#3-td-learning-in-easy21
  93. https://github.com/analog-rl/easy21#4-linear-function-approximation-in-easy21
  94. https://github.com/analog-rl/easy21#5-discussion
  95. https://github.com/
