   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]helpful.com
     * [9]top posts
     * [10]engage your team. try helpful for free.
     __________________________________________________________________

how the math of viral growth actually works

   [11]go to the profile of david pardy
   [12]david pardy (button) blockedunblock (button) followfollowing
   sep 20, 2017

   this article is intended for people trying to develop the intuition
   behind the k-factor, and learning how to spot the bullshit.

   when i started reading up on k-factor, i noticed most blog posts
   explicitly skipped the    technical    aspects of calculating viral growth.

   in undergrad (physics and math), i became a huge believer that
   understanding actual math in derivations of equations is necessary to
   understand the concepts the equations describe. this is also part of my
   strongly held belief that only trained scientists should be setting
   government scientific policy, but anyway   

   in other words, the    technical    parts matter.

   so i   m going to break down the    technical    parts of virality into
   bite-sized pieces.

   math degrees are not required to keep reading.

   get ready    it   s not hard.

first, let   s define k

   k = the average number of new users that each existing user gets onto
   the product.

   in other words, if i add one new user to my product, k tells me how
   many more new users that user will add to my product on average. it   s a
   measure of viral growth (user one adds two more users, they each add
   two more, they each add two more, etc.         suddenly everyone   s got it).

   the main mechanism that drives k, as i will explain in more detail
   below, is referral (aka. invitations). but technically, there   s nothing
   inherent in the concept of k that require invitation features to be
   built into the product. k is higher level than that         it counts all
   types of methods that users utilize to get other people on the product.

   at a high level, k tells you if your user base can grow itself without
   any further paid acquisition of users.
     * 0     k < 1     user base will not grow itself because each user you
       add, on average, will fail to add another full user. this is
       sublinear (less than linear)growth.
     * k = 1     user base will grow itself linearly because each user you
       add, on average, will add one more user.
     * k >1     user base will grow itself exponentially because each user
       you add, on average, will add more than one more user (and that new
       user will add another, and so on). this is superlinear (more than
       linear) growth.

   [1*qzrhu1cqolso8rjrgonunq.png]
   the k-factor will determine if your product has superlinear (k > 1) or
   sublinear (k<1) growth.

   k, calculated properly and fairly, can be a strong signal of app
   success. but critics rightly point out that it   s susceptible to all
   sorts of jiggery-pokery (both in terms of hacking the mechanics of k
   and calculating it). i   ll dive into this in part 4 of this post.

second, let   s understand k a little deeper

   if you   ve ever started to calculate k, you probably hit the first
   question: over what time period should i calculate k?

   picking the time period can significantly change your result.

   recall, k = the average number of new users that each existing user
   gets onto the product.

   for the example, i   m going to be very high level about    getting new
   users    on an app. this makes it pretty easy to calculate k:

   k = # new users that existing users got onto the app / # of existing
   users (i   ll refer to these as numerator and denominator)

   let   s walk through a simple example where users join an app over 3
   months.

month 1

   activity: a, b, and c sign up from ads     yay!
   [1*jksutp_6ikegoid4sicxdw.png]

   k @ end of month 1 = 0 (since a, b, and c, haven   t converted any new
   users)

month 2

   activity: d, e, and f sign up from ads     yay! 6 existing users at the
   end of month 2.
   [1*slgsdb9bdnmpednplpurka.png]

   k @ end of month 2 = 0 (since a, b, c, d, e, and f haven   t converted
   any new users)

month 3

   activity: a, d, and e successfully get one new user on the product each
   (g, h, and i, respectively). at the same time, j, k, and l sign up from
   ads. then, g gets a new user, m on the product too. yay, 13 users at
   the end of month 3!
   [1*twgvi4eheffakbvute4bzq.png]

   k @ end of month 3 =     okay, let   s think about this   

   at the end of month 3, there are 13 users. 6 of them were    mature   
   (users for at least a month). 7 of them were not mature (users for less
   than a month), of whom 3 came from ads, and 4 came from existing users.
   [1*e_oamn7eafidri2fr_iubg.png]

   we know the number of new users that existing users got on the product
   is 4 (g, h, i, and m). yay! that   s the numerator.

   now you need the number of new users that the average user got onto the
   product. no problem, just divide the numerator by the denominator (the
   number of existing users). so, do you divide by   
     * 6 (# users at end of month 2), or
     * 9 (# of users that got themselves on the product at end of month
       3), or
     * 13 (# users at end of month 3)?

   well    it depends. any could be true. a different number could also be
   true. this is where you have to use judgement.

   the denominator depends on how long it takes for a user to get another
   on the product. this is called the    cycle time    (read more below).

   hypothetical a: k where cycle time = 2 hours

   as a hypothetical, let   s say the product is so immediately addictive
   that you see invitations (and other types of actions to attract other
   users) being sent very quickly (say an hour). furthermore, those
   invitations (or other types of actions to attract other users) get
   those other people on the product very quickly (say another hour). in
   this case, you might say that you should divide the numerator by 13,
   since all 13 people have had a reasonable chance to get other people on
   the app. in this case, your k-factor is 4/13 = 0.31. okay, not great!
   [1*dmchbm1zdgyr4a7tmhxbfg.png]
   don   t exclude any users from your calculation since there is no
   relevant difference between them

   hypothetical b: k where cycle time = 1 month

   another hypothetical. let   s say the average invitation timeframe is
   exactly a month. then, at the end of month 3, only 6 users (a, b, c, d,
   e, and f) would have had a chance to invite people. so you can divide
   your numerator by 6. in this case, your k-factor is 4/6, or 0.67,
   right? nooope! if you do this, you need to ensure that your numerator
   excludes new users that were invited (or otherwise attracted) by users
   under a month old that got on the product. so your numerator has to
   exclude m, who was invited by g. in this case, your k-factor is 3/6 =
   0.5. yay, it   s larger than 0.31!
   [1*xnri7ooh-19craacir7mbw.png]
   exclude users who joined in month 3 (not mature enough)

   hypothetical c: k in months 2 onwards; cycle time = 1 month

   what if the product changed between month 1 and 2? well    yeah, this
   happens in the real world. cohort analysis separates users who had a
   significantly different product experience than another. so maybe
   you   re not interested in usage from users who joined in month 1, since
   they had a very different experience. fair enough    though you   ll have
   to justify that the difference in experience was actually determinative
   on the core action of inviting people, which is dubious in this case
   since a invited someone.

   whatever, let   s just go with it. the denominator only contains existing
   users from month 2 (d, e, and f         i.e. exclude month 1 users because
   they were in a different cohort, and exclude month 3 users because they
   haven   t had a full cycle time). then the numerator should only include
   new users who month 2 users got on the product (users h and i). in this
   case, your k-factor is 2/3 = 0.67. yay, it   s closer to 1!
   [1*3-e7zvadd1wvadgiqfer5a.png]
   exclude users that joined in month 1 (different cohort) and 3 (not
   mature enough)

   okay, so your k-factor is somewhere between 0.31 and 0.67, depending on
   how you finagle the numbers. astute prospective investors will press
   you on these assumptions.

   note: an astute investor would disagree with everything i   ve just said
   because the sample size is tiny. but anyway   

third, let   s understand k a different way

   recall, k = the average number of new users that each existing user
   gets onto the product.

   let   s walk through an example in which we calculate k for a period in
   which you have statistically significant numbers and in which the
   product hasn   t significantly changed.

   let   s also say that you have just one method for a user to get on the
   product, which is an    invitation   .

   note: an invitation can be one user named jill just hanging out with a
   guy and saying,    hey, check out this product!    and the guy might say,
      ehh, not right now.    sad! this invitation did not convert the guy. the
   invitation might also be an email or text. at any rate, let   s lump all
   different ways of inviting people and just call it one thing
      invitations   , and let   s say we know about all those invitations that
   happened, whether online or offline. and let   s say we know, on average,
   how well these invitations convert the recipients to start using the
   app.

   cool, we   ve piled on all these important assumptions. real life isn   t
   like this, but anyway   

formula for k

   what   s k? for easy calculation, people typically write it down like
   this: k = i*c
     * i = number of invitations sent per existing user. 0     i. this is #
       of invitations / # of users.
     * c = conversation rate on the invitations (i.e. the % at which
       invitations actually convert the recipients into users). 0     c     1

   let   s walk through an example.

   first, count up all those invitations that happened in the period we   re
   looking at. hey, it   s 1,000!
   [1*xtqixfniuusbckrcbjy8ma.png]

   to calculate i, you need to know how many users you had in the period.
   let   s say it   s 800.
   [1*3tqjvonkonhr6nrh_vd9hg.png]

   therefore: i = 1,000/800 = 1.25

   next, say that just 1/10 of those invitations were actually accepted.
   so your 1,000 invitations got 100 new users on the product.
   [1*p-befbgtpiwficmh1z8_qa.png]

   therefore: c = 1/10 = 0.1

   therefore: k = i * c = 1.25 * 0.1 = 0.125.

   equivalently, you can say that 800 existing users got 100 new users on
   the product, so k = 100/800 = 0.125.

fourth, let   s see what id116

   to get truly viral growth, meaning that you superlinearly acquire users
   through the user base growing itself, you need k >1. in other words,
   every user you add subsequently adds at least another user.

   if adding users actually grows your business, and if you calculated k
   using assumptions that are actually realistic, then k>1 is a powerful
   signal of success. in this case, you   ll have to turn your attention to
   the viral cycle time, which i   ll cover later in this post.

   interpreting k actually requires a deep understanding of what   s going
   on. say k > 1. does this guarantee success? maybe it takes goddam
   forever to invite someone. maybe your invited users have bad
   experiences and leave immediately after sending invitations. maybe your
   market is not infinite and your exponential growth will slow down soon.
   maybe users invite people because you bombard them with bright buttons
   to invite people, but they didn   t really want to. maybe your product
   just invites people without telling your users but everyone hates it.
   maybe you incentivize invitations and acceptances by literally paying
   cash to people who are inviters and invitees but they don   t add value
   to the business. by the way, there are real examples of apps that do
   all these things.

   really, there are very few general claims one can make about k without
   understanding the specifics of the product. here are some quotes from
   things i   ve read on k:

     1.    having a positive k-factor means you have product market fit.   

     2.    a k-factor less than one is worthless.   

     3.    having a positive k-factor means you   re giving your customers a
     good experience.   

     4.    having a k-factor over one means you   ll have exponential
     growth.   

   note:    positive    k-factor used colloquially means k>1.

   note: if k < 0, then that would mean the average existing user kicks
   off another user         it   s possible but i can   t think of an example.

   okay. lots of stuff here. well    some of these have some truth. let   s
   dive into the logic here.

   #1. having a positive k-factor means you have product market fit.

   the real issue with this claim is that it doesn   t speak at all to the
   actual determinants of pmf. pmf means you have a market (i.e. a group
   of people who have a pain) and a product you can provide to that market
   that solves the pain. a more fool-proof model to show pmf is if your
   retention curves asymptote to the x-axis (meaning some users just keep
   using your product).
   [1*g5oudk72qc-zuhkvbzoypa.png]
   from brian balfour ([13]here)

   at worst, k is a completely orthogonal concept to hitting pmf. for
   example, some apps literally pay their users to send invitations that
   are accepted. if you see a lot of accepted invitations that come from
   this scheme, this merely proves that there is a market of people who
   want to get paid. it has nothing to do with the actual product and the
   actual pain.

   at best, k is an insufficient and unnecessary condition of hitting pmf,
   but it   s somewhat related. in a best-case scenario, you   ve calculated k
   using fair assumptions, you see users who are invited actually retain
   on the product, and, most importantly, inviting people is actually a
   core action for a user to realize the value of the product (such as
   where there are network effects). if all these things are true, then
   you   ve got a killer product. but again, the determinant of pmf is
   actually the retention number. if inviting people is actually
   confounded with realizing the value of the product, then it   s related.
   but it   s not a sufficient or necessary condition.

   #2. a k-factor less than one is worthless.

   a business can be profitable if it can acquire customers at a cost that
   is less value of the customer (i.e. what the customer pays the
   business). in other words, cac < ltv = $$$. this model is most powerful
   applied in an enterprise sales scenario because cac and ltv are easy to
   calculate, but it   s generally true for all types of business.

   k < 1 doesn   t affect your actual paid customer-acquisition-cost, but
   it   s still worth something. let   s say i pay $1,000 to acquire 10
   customers, and collectively those 10 customer successfully invites 1
   other customer. so k = 1/10, cac = $100 for the 10 customers initially
   acquired, and the    blended    cac = $1,000/(10+1) = $91. this absolutely
   ads value to your business (i.e. you   re saving $9/user).

   that said, to a vc who only invests in freemium or free-end-user
   businesses, a k< 1 is actually worthless to them. why? if they   ve
   already disallowed all possible businesses that rely on paid
   acquisition, then only businesses that can thrive without paid
   acquisition are in the scope of possibility.

   #3. having a positive k-factor means you   re giving your customers a
   good experience.

   obviously, you   re more likely to refer someone to a product you think
   is actually good.

   but, as a product manager, i   ve learned that k can be high but users
   can still have a bad experience. what if sending 5 invitations was
   mandatory to onboard to the product (annoying! but you can push users
   through with a big enough promise). what if the ux to send invitations
   is confusing and frustrating? you can still get high k while giving
   users a bad experience.

   furthermore, with social apps you need users to invite others in order
   to have a good experience. in this case, invitations are a cause of a
   good experience, not the other way around.

   also, this statement doesn   t work in reverse (i.e. good user experience
   doesn   t imply that k >1). improving the app experience could bump k
   from 0.1     0.5, or 0.9     0.95, but still be below 1.

   #4. having a k-factor over one means you   ll have exponential growth.

   this can be true, but it can only be true for a limited time.
   exponential growth must peter off once you start to eat up your market.

   but there are two other problems with this statement.

   first i learned from from [14]kristina shen, a bvp partner who helped
   me model our business in the early days of [15]helpful. she advised me
   to be very careful if i were to model a positive k (let alone a k > 1).
   this is because your models can grow very quickly if every user adds
   another user. the reality is that invitations can have a long cycle
   time, so    exponential growth    might actually appear to be linear over
   the forecastable time period. furthermore, exponential growth is
   extremely sensitive to the inputs, so small inaccuracies in k can
   wildly spiral out of control.

   second, k > 1 might exponentially grow a thing you don   t care about.
   this would be the case if your users don   t provide value (such as if
   they invited users and then left, or users can   t be monetized).

viral cycle time

   recall: for every user your add, you add k more.

   this means k is a variable for how much you compound your user base.

   therefore, we can frame viral growth as a compounding problem, which
   leads to a key insight: the rate of compounding is equally (if not
   more) important than the magnitude of compounding.

   the compounding rate is the viral cycle time:

   p = viral cycle time = how long it takes, on average, for a user to get
   another user on the product

   in order to see how this variable operates, we need to look at the
   users over time. see below.

users as a function of time

   kevin lawler ([16]here) wrote out a formula for users as a function of
   time. do take a look at it if you   re interested in the math.
   [1*wfzmx_etk0c0awxshb0j1w.png]
   users as a function of time
     * u(t) = users at time t
     * u(t=0) = u(0) = users at time 0

   i won   t reproduce the derivation here, but i will demonstrate how a
   fast cycle time grows users vis-a-vis k using the sensitivity table
   below.

   these results are illuminating.

   in these examples, i   ve shown the number of users 30 days in (top) and
   90 days in (bottom), each with different assumed values of k and p.
   u(0) = 1,000 in these examples.

   the values of k are listed in the black boxes on the left, and the
   values of p (in units of days) are listed in the black boxes on top.
   the value shown in each corresponding cell shows the number of users
   calculated using each of the assumptions. read more about interpreting
   sensitivity tables [17]here.
   [1*evcvrr8wuuc3sbmrpucqza.png]

   two takeaways
    1. k < 1 produces sublinear growth. if k     1, the numbers start to get
       exciting. if you have k < 1, the highest growth in # users will
       come from increasing k.
    2. once k becomes greater than 1, it becomes more valuable to reduce
       the cycle time than continue to increase k. this is because k > 1
       produces superlinear growth, so the most growth you can get is to
       compound k at a higher frequency.

   note: the numbers blow up once you get to a 7-day cycle time. this is
   just to show extremes         it   s not realistic.

alright, so   

     *    viral    growth means k > 1
     * k < 1 can still be valuable (viral growth is phenomenal, but it   s
       not the only way to win a market)
     * invitations should be tied to the core value of the product in
       order for the k to be meaningful
     * low viral cycle time is massively important to achieve fast growth
     * virality doesn   t compound if the invited users who come don   t stick
       around long enough to feed the next round of viral adoption. if you
       calculate k accurately and fairly, the value of k should account
       for this behaviour
     * the number of invitations that your users send may change over
       their life cycle
     * invitations might be an action that occurs before value is realized
     * viral growth doesn   t last forever, so make your product appeal to a
       big market if you want to really reap the rewards

   david pardy is co-founder and chief of staff at [18]helpful. he works
   on product.

     * [19]startup
     * [20]k factor
     * [21]growth
     * [22]product management
     * [23]virality

   (button)
   (button)
   (button) 422 claps
   (button) (button) (button) 2 (button) (button)

     (button) blockedunblock (button) followfollowing
   [24]go to the profile of david pardy

[25]david pardy

   toronto-based entrepreneur (helpful.com)+ person who draws and bikes.

     (button) follow
   [26]helpful.com

[27]helpful.com

   engage your team in a more human way with mobile video. get started for
   free: [28]http://helpful.com

     * (button)
       (button) 422
     * (button)
     *
     *

   [29]helpful.com
   never miss a story from helpful.com, when you sign up for medium.
   [30]learn more
   never miss a story from helpful.com
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://be.helpful.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/a4fcee693ace
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://be.helpful.com/helpful-how-the-math-of-viral-growth-actually-works-a4fcee693ace&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://be.helpful.com/helpful-how-the-math-of-viral-growth-actually-works-a4fcee693ace&source=--------------------------nav_reg&operation=register
   8. https://be.helpful.com/?source=logo-lo_jtfx4atkibfy---58a1645a2d2
   9. https://be.helpful.com/archive
  10. http://www.helpful.com/
  11. https://be.helpful.com/@djspardy?source=post_header_lockup
  12. https://be.helpful.com/@djspardy
  13. https://www.coelevate.com/essays/product-market-fit
  14. https://www.bvp.com/team/kristina-shen
  15. https://www.helpful.com/
  16. https://kevinlawler.com/viral
  17. http://www.happypursuits.com/how-to-read-a-sensitivity-table/
  18. https://www.helpful.com/
  19. https://be.helpful.com/tagged/startup?source=post
  20. https://be.helpful.com/tagged/kfactor?source=post
  21. https://be.helpful.com/tagged/growth?source=post
  22. https://be.helpful.com/tagged/product-management?source=post
  23. https://be.helpful.com/tagged/virality?source=post
  24. https://be.helpful.com/@djspardy?source=footer_card
  25. https://be.helpful.com/@djspardy
  26. https://be.helpful.com/?source=footer_card
  27. https://be.helpful.com/?source=footer_card
  28. http://helpful.com/
  29. https://be.helpful.com/
  30. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  32. https://medium.com/p/a4fcee693ace/share/twitter
  33. https://medium.com/p/a4fcee693ace/share/facebook
  34. https://medium.com/p/a4fcee693ace/share/twitter
  35. https://medium.com/p/a4fcee693ace/share/facebook
