   #[1]alternate [2]alternate [3]alternate [4]alternate [5]alternate
   [6]alternate [7]alternate [8]alternate [9]alternate [10]alternate
   [11]alternate [12]google developers

   (button)
     * [13]machine learning

     * [14]courses
     * [15]practica
     * [16]guides
     * [17]glossary

   ____________________
   all products
   (button) [18]sign in
     * [19]glossary

   (button) send feedback

     * [20]courses
     * [21]practica
     * [22]guides
     * [23]glossary
     * [24]all products

     * [25]products
     * [26]machine learning
     * [27]glossary
     * [28]glossary

   this glossary defines general machine learning terms as well as terms
   specific to tensorflow.

a

a/b testing

   a statistical way of comparing two (or more) techniques, typically an
   incumbent against a new rival. a/b testing aims to determine not only
   which technique performs better but also to understand whether the
   difference is statistically significant. a/b testing usually considers
   only two techniques using one measurement, but it can be applied to any
   finite number of techniques and measures.

accuracy

   the fraction of predictions that a [29]classification model got right.
   in [30]multi-class classification, accuracy is defined as follows:
   $$\text{accuracy} = \frac{\text{correct predictions}} {\text{total
   number of examples}}$$

   in [31]binary classification, accuracy has the following definition:
   $$\text{accuracy} = \frac{\text{true positives} + \text{true
   negatives}} {\text{total number of examples}}$$

   see [32]true positive and [33]true negative.

activation function

   a function (for example, [34]relu or [35]sigmoid) that takes in the
   weighted sum of all of the inputs from the previous layer and then
   generates and passes an output value (typically nonlinear) to the next
   layer.

active learning

   a training approach in which the algorithm chooses some of the data it
   learns from. active learning is particularly valuable when labeled
   examples are scarce or expensive to obtain. instead of blindly seeking
   a diverse range of labeled examples, an active learning algorithm
   selectively seeks the particular range of examples it needs for
   learning.

adagrad

   a sophisticated id119 algorithm that rescales the gradients
   of each parameter, effectively giving each parameter an independent
   [36]learning rate. for a full explanation, see [37]this paper.

agglomerative id91

   see [38]hierarchical id91.

auc (area under the roc curve)

   an evaluation metric that considers all possible [39]classification
   thresholds.

   the area under the [40]roc curve is the id203 that a classifier
   will be more confident that a randomly chosen positive example is
   actually positive than that a randomly chosen negative example is
   positive.

automation bias

   #fairness

   when a human decision maker favors recommendations made by an automated
   decision-making system over information made without automation, even
   when the automated decision-making system makes errors.

b

id26

   the primary algorithm for performing [41]id119 on [42]neural
   networks. first, the output values of each node are calculated (and
   cached) in a forward pass. then, the [43]partial derivative of the
   error with respect to each parameter is calculated in a backward pass
   through the graph.

bag of words

   a representation of the words in a phrase or passage, irrespective of
   order. for example, bag of words represents the following three phrases
   identically:
     * the dog jumps
     * jumps the dog
     * dog jumps the

   each word is mapped to an index in a sparse vector, where the vector
   has an index for every word in the vocabulary. for example, the phrase
   the dog jumps is mapped into a feature vector with non-zero values at
   the three indices corresponding to the words the, dog, and jumps. the
   non-zero value can be any of the following:
     * a 1 to indicate the presence of a word.
     * a count of the number of times a word appears in the bag. for
       example, if the phrase were the maroon dog is a dog with maroon
       fur, then both maroon and dog would be represented as 2, while the
       other words would be represented as 1.
     * some other value, such as the logarithm of the count of the number
       of times a word appears in the bag.

baseline

   a [44]model used as a reference point for comparing how well another
   model (typically, a more complex one) is performing. for example, a
   [45]id28 model might serve as a good baseline for a
   [46]deep model.

   for a particular problem, the baseline helps model developers quantify
   the minimal expected performance that a new model must achieve for the
   new model to be useful.

batch

   the set of examples used in one [47]iteration (that is, one
   [48]gradient update) of [49]model training.

   see also [50]batch size.

batch id172

   [51]normalizing the input or output of the [52]id180 in
   a [53]hidden layer. batch id172 can provide the following
   benefits:
     * make neural networks more stable by protecting against outlier
       weights.
     * enable higher learning rates.
     * reduce overfitting.

batch size

   the number of examples in a [54]batch. for example, the batch size of
   [55]sgd is 1, while the batch size of a [56]mini-batch is usually
   between 10 and 1000. batch size is usually fixed during training and
   id136; however, tensorflow does permit dynamic batch sizes.

bayesian neural network

   a probabilistic [57]neural network that accounts for uncertainty in
   weights and outputs. a standard neural network regression model
   typically predicts a scalar value; for example, a model predicts a
   house price of 853,000. by contrast, a bayesian neural network predicts
   a distribution of values; for example, a model predicts a house price
   of 853,000 with a standard deviation of 67,200. a bayesian neural
   network relies on [58]bayes' theorem to calculate uncertainties in
   weights and predictions. a bayesian neural network can be useful when
   it is important to quantify uncertainty, such as in models related to
   pharmaceuticals. bayesian neural networks can also help prevent
   [59]overfitting.

bias (ethics/fairness)

   #fairness

   1. stereotyping, prejudice or favoritism towards some things, people,
   or groups over others. these biases can affect collection and
   interpretation of data, the design of a system, and how users interact
   with a system. forms of this type of bias include:
     * [60]automation bias
     * [61]confirmation bias
     * [62]experimenter   s bias
     * [63]group attribution bias
     * [64]implicit bias
     * [65]in-group bias
     * [66]out-group homogeneity bias

   2. systematic error introduced by a sampling or reporting procedure.
   forms of this type of bias include:
     * [67]coverage bias
     * [68]non-response bias
     * [69]participation bias
     * [70]reporting bias
     * [71]sampling bias
     * [72]selection bias

   not to be confused with the [73]bias term in machine learning models or
   [74]prediction bias

bias (math)

   an intercept or offset from an origin. bias (also known as the bias
   term) is referred to as b or w[0] in machine learning models. for
   example, bias is the b in the following formula:
   $$y' = b + w_1x_1 + w_2x_2 +     w_nx_n$$

   not to be confused with [75]bias in ethics and fairness or
   [76]prediction bias.

bigram

   an [77]id165 in which n=2.

binary classification

   a type of classification task that outputs one of two mutually
   exclusive classes. for example, a machine learning model that evaluates
   email messages and outputs either "spam" or "not spam" is a binary
   classifier.

binning

   see [78]bucketing.

boosting

   a ml technique that iteratively combines a set of simple and not very
   accurate classifiers (referred to as "weak" classifiers) into a
   classifier with high accuracy (a "strong" classifier) by
   [79]upweighting the examples that the model is currently misclassfying.

broadcasting

   expanding the shape of an operand in a matrix math operation to
   [80]dimensions compatible for that operation. for instance, linear
   algebra requires that the two operands in a matrix addition operation
   must have the same dimensions. consequently, you can't add a matrix of
   shape (m, n) to a vector of length n. broadcasting enables this
   operation by virtually expanding the vector of length n to a matrix of
   shape (m,n) by replicating the same values down each column.

   for example, given the following definitions, id202 prohibits
   a+b because a and b have different dimensions:
a = [[7, 10, 4],
     [13, 5, 9]]
b = [2]

   however, broadcasting enables the operation a+b by virtually expanding
   b to:
 [[2, 2, 2],
  [2, 2, 2]]

   thus, a+b is now a valid operation:
[[7, 10, 4],  +  [[2, 2, 2],  =  [[ 9, 12, 6],
 [13, 5, 9]]      [2, 2, 2]]      [15, 7, 11]]

   see the following description of [81]broadcasting in numpy for more
   details.

bucketing

   converting a (usually [82]continuous) feature into multiple binary
   features called buckets or bins, typically based on value range. for
   example, instead of representing temperature as a single continuous
   floating-point feature, you could chop ranges of temperatures into
   discrete bins. given temperature data sensitive to a tenth of a degree,
   all temperatures between 0.0 and 15.0 degrees could be put into one
   bin, 15.1 to 30.0 degrees could be a second bin, and 30.1 to 50.0
   degrees could be a third bin.

c

calibration layer

   a post-prediction adjustment, typically to account for [83]prediction
   bias. the adjusted predictions and probabilities should match the
   distribution of an observed set of labels.

candidate generation

   the initial set of recommendations chosen by a id126.
   for example, consider a bookstore that offers 100,000 titles. the
   candidate generation phase creates a much smaller list of suitable
   books for a particular user, say 500. but even 500 books is way too
   many to recommend to a user. subsequent, more expensive, phases of a
   id126 (such as [84]scoring and [85]re-ranking) whittle
   down those 500 to a much smaller, more useful set of recommendations.

candidate sampling

   a training-time optimization in which a id203 is calculated for
   all the positive labels, using, for example, [86]softmax, but only for
   a random sample of negative labels. for example, if we have an example
   labeled beagle and dog candidate sampling computes the predicted
   probabilities and corresponding loss terms for the beagle and dog class
   outputs in addition to a random subset of the remaining classes (cat,
   lollipop, fence). the idea is that the [87]negative classes can learn
   from less frequent negative reinforcement as long as [88]positive
   classes always get proper positive reinforcement, and this is indeed
   observed empirically. the motivation for candidate sampling is a
   computational efficiency win from not computing predictions for all
   negatives.

categorical data

   [89]features having a discrete set of possible values. for example,
   consider a categorical feature named house style, which has a discrete
   set of three possible values: tudor, ranch, colonial. by representing
   house style as categorical data, the model can learn the separate
   impacts of tudor, ranch, and colonial on house price.

   sometimes, values in the discrete set are mutually exclusive, and only
   one value can be applied to a given example. for example, a car maker
   categorical feature would probably permit only a single value (toyota)
   per example. other times, more than one value may be applicable. a
   single car could be painted more than one different color, so a car
   color categorical feature would likely permit a single example to have
   multiple values (for example, red and white).

   categorical features are sometimes called [90]discrete features.

   contrast with [91]numerical data.

centroid

   the center of a cluster as determined by a [92]id116 or [93]k-median
   algorithm. for instance, if k is 3, then the id116 or k-median
   algorithm finds 3 centroids.

centroid-based id91

   a category of [94]id91 algorithms that organizes data into
   nonhierarchical clusters. [95]id116 is the most widely used
   centroid-based id91 algorithm.

   contrast with [96]hierarchical id91 algorithms.

checkpoint

   data that captures the state of the variables of a model at a
   particular time. checkpoints enable exporting model [97]weights, as
   well as performing training across multiple sessions. checkpoints also
   enable training to continue past errors (for example, job preemption).
   note that the [98]graph itself is not included in a checkpoint.

class

   one of a set of enumerated target values for a label. for example, in a
   [99]binary classification model that detects spam, the two classes are
   spam and not spam. in a [100]multi-class classification model that
   identifies dog breeds, the classes would be poodle, beagle, pug, and so
   on.

classification model

   a type of machine learning model for distinguishing among two or more
   discrete classes. for example, a natural language processing
   classification model could determine whether an input sentence was in
   french, spanish, or italian. compare with [101]regression model.

classification threshold

   a scalar-value criterion that is applied to a model's predicted score
   in order to separate the [102]positive class from the [103]negative
   class. used when mapping [104]id28 results to
   [105]binary classification. for example, consider a id28
   model that determines the id203 of a given email message being
   spam. if the classification threshold is 0.9, then id28
   values above 0.9 are classified as spam and those below 0.9 are
   classified as not spam.

class-imbalanced dataset

   a [106]binary classification problem in which the [107]labels for the
   two classes have significantly different frequencies. for example, a
   disease dataset in which 0.0001 of examples have positive labels and
   0.9999 have negative labels is a class-imbalanced problem, but a
   football game predictor in which 0.51 of examples label one team
   winning and 0.49 label the other team winning is not a class-imbalanced
   problem.

clipping

   a technique for handling [108]outliers. specifically, reducing feature
   values that are greater than a set maximum value down to that maximum
   value. also, increasing feature values that are less than a specific
   minimum value up to that minimum value.

   for example, suppose that only a few feature values fall outside the
   range 40   60. in this case, you could do the following:
     * clip all values over 60 to be exactly 60.
     * clip all values under 40 to be exactly 40.

   in addition to bringing input values within a designated range,
   clipping can also used to force gradient values within a designated
   range during training.

cloud tpu

   #tensorflow
   #googlecloud

   specialized accelerator technology to speed up machine learning
   workloads on google cloud.

id91

   grouping related [109]examples, particularly during [110]unsupervised
   learning. once all the examples are grouped, a human can optionally
   supply meaning to each cluster.

   many id91 algorithms exist. for example, the [111]id116
   algorithm clusters examples based on their proximity to a
   [112]centroid, as in the following diagram:

   [cluster.svg]

   a human researcher could then review the clusters and, for example,
   label cluster 1 as "dwarf trees" and cluster 2 as "full-size trees."

   as another example, consider a id91 algorithm based on an
   example's distance from a center point, illustrated as follows:

   [ringcluster.svg]

co-adaptation

   when [113]neurons predict patterns in training data by relying almost
   exclusively on outputs of specific other neurons instead of relying on
   the network's behavior as a whole. when the patterns that cause
   co-adaption are not present in validation data, then co-adaptation
   causes overfitting. [114]dropout id173 reduces co-adaptation
   because dropout ensures neurons cannot rely solely on specific other
   neurons.

id185

   making predictions about the interests of one user based on the
   interests of many other users. id185 is often used in
   id126s.

confirmation bias

   #fairness

   the tendency to search for, interpret, favor, and recall information in
   a way that confirms one's preexisting beliefs or hypotheses. machine
   learning developers may inadvertently collect or label data in ways
   that influence an outcome supporting their existing beliefs.
   confirmation bias is a form of [115]implicit bias.

   experimenter's bias is a form of confirmation bias in which an
   experimenter continues training models until a preexisting hypothesis
   is confirmed.

confusion matrix

   an nxn table that summarizes how successful a [116]classification
   model's predictions were; that is, the correlation between the label
   and the model's classification. one axis of a confusion matrix is the
   label that the model predicted, and the other axis is the actual label.
   n represents the number of classes. in a [117]binary classification
   problem, n=2. for example, here is a sample confusion matrix for a
   binary classification problem:
                      tumor (predicted) non-tumor (predicted)
   tumor (actual)     18                1
   non-tumor (actual) 6                 452

   the preceding confusion matrix shows that of the 19 samples that
   actually had tumors, the model correctly classified 18 as having tumors
   (18 true positives), and incorrectly classified 1 as not having a tumor
   (1 false negative). similarly, of 458 samples that actually did not
   have tumors, 452 were correctly classified (452 true negatives) and 6
   were incorrectly classified (6 false positives).

   the confusion matrix for a multi-class classification problem can help
   you determine mistake patterns. for example, a confusion matrix could
   reveal that a model trained to recognize handwritten digits tends to
   mistakenly predict 9 instead of 4, or 1 instead of 7.

   confusion matrices contain sufficient information to calculate a
   variety of performance metrics, including [118]precision and
   [119]recall.

continuous feature

   a floating-point feature with an infinite range of possible values.
   contrast with [120]discrete feature.

convenience sampling

   using a dataset not gathered scientifically in order to run quick
   experiments. later on, it's essential to switch to a scientifically
   gathered dataset.

convergence

   informally, often refers to a state reached during training in which
   training [121]loss and validation loss change very little or not at all
   with each iteration after a certain number of iterations. in other
   words, a model reaches convergence when additional training on the
   current data will not improve the model. in deep learning, loss values
   sometimes stay constant or nearly so for many iterations before finally
   descending, temporarily producing a false sense of convergence.

   see also [122]early stopping.

   see also boyd and vandenberghe, [123]id76.

convex function

   a function in which the region above the graph of the function is a
   [124]convex set. the prototypical convex function is shaped something
   like the letter u. for example, the following are all convex functions:

   a typical convex function is shaped like the letter 'u'.

   by contrast, the following function is not convex. notice how the
   region above the graph is not a convex set:

   [nonconvex_function.svg]

   a strictly convex function has exactly one local minimum point, which
   is also the global minimum point. the classic u-shaped functions are
   strictly convex functions. however, some convex functions (for example,
   straight lines) are not u-shaped.

   a lot of the common [125]id168s, including the following, are
   convex functions:
     * [126]l[2] loss
     * [127]log loss
     * [128]l[1] id173
     * [129]l[2] id173

   many variations of [130]id119 are guaranteed to find a point
   close to the minimum of a strictly convex function. similarly, many
   variations of [131]stochastic id119 have a high id203
   (though, not a guarantee) of finding a point close to the minimum of a
   strictly convex function.

   the sum of two convex functions (for example, l[2] loss + l[1]
   id173) is a convex function.

   [132]deep models are never convex functions. remarkably, algorithms
   designed for [133]id76 tend to find reasonably good
   solutions on deep networks anyway, even though those solutions are not
   guaranteed to be a global minimum.

id76

   the process of using mathematical techniques such as [134]gradient
   descent to find the minimum of a [135]convex function. a great deal of
   research in machine learning has focused on formulating various
   problems as id76 problems and in solving those problems
   more efficiently.

   for complete details, see boyd and vandenberghe, [136]convex
   optimization.

convex set

   a subset of euclidean space such that a line drawn between any two
   points in the subset remains completely within the subset. for
   instance, the following two shapes are convex sets:

   a rectangle and a semi-ellipse are both convex sets.

   by contrast, the following two shapes are not convex sets:

   a pie-chart with a missing slice and a firework are both nonconvex
   sets.

convolution

   in mathematics, casually speaking, a mixture of two functions. in
   machine learning, a convolution mixes the convolutional filter and the
   input matrix in order to train weights.

   the term "convolution" in machine learning is often a shorthand way of
   referring to either [137]convolutional operation or [138]convolutional
   layer.

   without convolutions, a machine learning algorithm would have to learn
   a separate weight for every cell in a large tensor. for example, a
   machine learning algorithm training on 2k x 2k images would be forced
   to find 4m separate weights. thanks to convolutions, a machine learning
   algorithm only has to find weights for every cell in the
   [139]convolutional filter, dramatically reducing the memory needed to
   train the model. when the convolutional filter is applied, it is simply
   replicated across cells such that each is multiplied by the filter.

convolutional filter

   one of the two actors in a [140]convolutional operation. (the other
   actor is a slice of an input matrix.) a convolutional filter is a
   matrix having the same [141]rank as the input matrix, but a smaller
   shape. for example, given a 28x28 input matrix, the filter could be any
   2d matrix smaller than 28x28.

   in photographic manipulation, all the cells in a convolutional filter
   are typically set to a constant pattern of ones and zeroes. in machine
   learning, convolutional filters are typically seeded with random
   numbers and then the network trains the ideal values.

convolutional layer

   a layer of a deep neural network in which a [142]convolutional filter
   passes along an input matrix. for example, consider the following 3x3
   [143]convolutional filter:

   [convolutionalfilter33.svg]

   the following animation shows a convolutional layer consisting of 9
   convolutional operations involving the 5x5 input matrix. notice that
   each convolutional operation works on a different 3x3 slice of the
   input matrix. the resulting 3x3 matrix (on the right) consists of the
   results of the 9 convolutional operations:

   [animatedconvolution.gif]

convolutional neural network

   a neural network in which at least one layer is a [144]convolutional
   layer. a typical convolutional neural network consists of some
   combination of the following layers:
     * convolutional layers
     * pooling layers
     * dense layers

   convolutional neural networks have had great success in certain kinds
   of problems, such as image recognition.

convolutional operation

   the following two-step mathematical operation:
    1. element-wise multiplication of the [145]convolutional filter and a
       slice of an input matrix. (the slice of the input matrix has the
       same rank and size as the convolutional filter.)
    2. summation of all the values in the resulting product matrix.

   for example, consider the following 5x5 input matrix:

   [convolutionallayerinputmatrix.svg]

   now imagine the following 2x2 convolutional filter:

   [convolutionallayerfilter.svg]

   each convolutional operation involves a single 2x2 slice of the input
   matrix. for instance, suppose we use the 2x2 slice at the top-left of
   the input matrix. so, the convolution operation on this slice looks as
   follows:

   [convolutionallayeroperation.svg]

   a [146]convolutional layer consists of a series of convolutional
   operations, each acting on a different slice of the input matrix.

cost

   synonym for [147]loss.

coverage bias

   see [148]selection bias.

crash blossom

   a sentence or phrase with an ambiguous meaning. crash blossoms present
   a significant problem in [149]natural language understanding. for
   example, the headline red tape holds up skyscraper is a crash blossom
   because an nlu model could interpret the headline literally or
   figuratively.

cross-id178

   a generalization of [150]log loss to [151]multi-class classification
   problems. cross-id178 quantifies the difference between two
   id203 distributions. see also [152]perplexity.

cross-validation

   a mechanism for estimating how well a model will generalize to new data
   by testing the model against one or more non-overlapping data subsets
   withheld from the training set.

custom estimator

   #tensorflow

   an [153]estimator that you write yourself by following [154]these
   directions.

   contrast with [155]premade estimators.

d

data analysis

   obtaining an understanding of data by considering samples, measurement,
   and visualization. data analysis can be particularly useful when a
   dataset is first received, before one builds the first model. it is
   also crucial in understanding experiments and debugging problems with
   the system.

data augmentation

   artificially boosting the range and number of training examples by
   transforming existing examples to create additional examples. for
   example, suppose images are one of your features, but your dataset
   doesn't contain enough image examples for the model to learn useful
   associations. ideally, you'd add enough labeled images to your dataset
   to enable your model to train properly. if that's not possible, data
   augmentation can rotate, stretch, and reflect each image to produce
   many variants of the original picture, possibly yielding enough labeled
   data to enable excellent training.

dataframe

   a popular datatype for representing datasets in [156]pandas. a
   dataframe is analogous to a table. each column of the dataframe has a
   name (a header), and each row is identified by a number.

data set or dataset

   a collection of [157]examples.

dataset api (tf.data)

   #tensorflow

   a high-level tensorflow api for reading data and transforming it into a
   form that a machine learning algorithm requires. a tf.data.dataset
   object represents a sequence of elements, in which each element
   contains one or more [158]tensors. a tf.data.iterator object provides
   access to the elements of a dataset.

   for details about the dataset api, see [159]importing data in the
   tensorflow programmer's guide.

decision boundary

   the separator between classes learned by a model in a [160]binary class
   or [161]multi-class classification problems. for example, in the
   following image representing a binary classification problem, the
   decision boundary is the frontier between the orange class and the blue
   class:

   a well-defined boundary between one class and another.

decision threshold

   synonym for [162]classification threshold.

decision tree

   a model represented as a sequence of branching statements. for example,
   the following over-simplified decision tree branches a few times to
   predict the price of a house (in thousands of usd). according to this
   decision tree, a house larger than 160 square meters, having more than
   three bedrooms, and built less than 10 years ago would have a predicted
   price of 510 thousand usd.

   a tree three-levels deep whose branches predict house prices.

   machine learning can generate deep id90.

deep model

   a type of [163]neural network containing multiple [164]hidden layers.

   contrast with [165]wide model.

deep neural network

   synonym for [166]deep model.

dense feature

   a [167]feature in which most values are non-zero, typically a
   [168]tensor of floating-point values. contrast with [169]sparse
   feature.

dense layer

   synonym for [170]fully connected layer.

depth

   the number of [171]layers (including any [172]embedding layers) in a
   [173]neural network that learn weights. for example, a neural network
   with 5 [174]hidden layers and 1 output layer has a depth of 6.

depthwise separable convolutional neural network (sepid98)

   a [175]convolutional neural network architecture based on
   [176]inception, but where inception modules are replaced with depthwise
   separable convolutions. also known as xception.

   a depthwise separable convolution (also abbreviated as separable
   convolution) factors a standard 3-d convolution into two separate
   convolution operations that are more computationally efficient: first,
   a depthwise convolution, with a depth of 1 (n     n     1), and then
   second, a pointwise convolution, with length and width of 1 (1     1    
   n).

   to learn more, see [177]xception: deep learning with depthwise
   separable convolutions.

device

   #tensorflow

   a category of hardware that can run a tensorflow session, including
   cpus, gpus, and [178]tpus.

dimension reduction

   decreasing the number of dimensions used to represent a particular
   feature in a feature vector, typically by converting to an
   [179]embedding.

dimensions

   overloaded term having any of the following definitions:
     * the number of levels of coordinates in a [180]tensor. for example:
          + a scalar has zero dimensions; for example, ["hello"].
          + a vector has one dimension; for example, [3, 5, 7, 11].
          + a matrix has two dimensions; for example, [[2, 4, 18], [5, 7,
            14]].
       you can uniquely specify a particular cell in a one-dimensional
       vector with one coordinate; you need two coordinates to uniquely
       specify a particular cell in a two-dimensional matrix.
     * the number of entries in a [181]feature vector.
     * the number of elements in an [182]embedding layer.

discrete feature

   a [183]feature with a finite set of possible values. for example, a
   feature whose values may only be animal, vegetable, or mineral is a
   discrete (or categorical) feature. contrast with [184]continuous
   feature.

discriminative model

   a [185]model that predicts labels from a set of one or more features.
   more formally, discriminative models define the id155
   of an output given the features and weights; that is:
p(output | features, weights)

   for example, a model that predicts whether an email is spam from
   features and weights is a discriminative model.

   the vast majority of supervised learning models, including
   classification and regression models, are discriminative models.

   contrast with [186]generative model.

discriminator

   a system that determines whether examples are real or fake.

   the subsystem within a [187]generative adversarial network that
   determines whether the examples created by the [188]generator are real
   or fake.

divisive id91

   see [189]hierarchical id91.

downsampling

   overloaded term that can mean either of the following:
     * reducing the amount of information in a feature in order to train a
       model more efficiently. for example, before training an image
       recognition model, downsampling high-resolution images to a
       lower-resolution format.
     * training on a disproportionately low percentage of over-represented
       class examples in order to improve model training on
       under-represented classes. for example, in a [190]class-imbalanced
       dataset, models tend to learn a lot about the [191]majority class
       and not enough about the [192]minority class. downsampling helps
       balance the amount of training on the majority and minority
       classes.

dropout id173

   a form of [193]id173 useful in training [194]neural networks.
   dropout id173 works by removing a random selection of a fixed
   number of the units in a network layer for a single gradient step. the
   more units dropped out, the stronger the id173. this is
   analogous to training the network to emulate an exponentially large
   ensemble of smaller networks. for full details, see [195]dropout: a
   simple way to prevent neural networks from overfitting.

dynamic model

   a [196]model that is trained online in a continuously updating fashion.
   that is, data is continuously entering the model.

e

eager execution

   #tensorflow

   a tensorflow programming environment in which [197]operations run
   immediately. by contrast, operations called in [198]graph execution
   don't run until they are explicitly evaluated. eager execution is an
   [199]imperative interface, much like the code in most programming
   languages. eager execution programs are generally far easier to debug
   than graph execution programs.

early stopping

   a method for [200]id173 that involves ending model training
   before training loss finishes decreasing. in early stopping, you end
   model training when the loss on a [201]validation dataset starts to
   increase, that is, when [202]generalization performance worsens.

embeddings

   a categorical feature represented as a continuous-valued feature.
   typically, an embedding is a translation of a high-dimensional vector
   into a low-dimensional space. for example, you can represent the words
   in an english sentence in either of the following two ways:
     * as a million-element (high-dimensional) [203]sparse vector in which
       all elements are integers. each cell in the vector represents a
       separate english word; the value in a cell represents the number of
       times that word appears in a sentence. since a single english
       sentence is unlikely to contain more than 50 words, nearly every
       cell in the vector will contain a 0. the few cells that aren't 0
       will contain a low integer (usually 1) representing the number of
       times that word appeared in the sentence.
     * as a several-hundred-element (low-dimensional) [204]dense vector in
       which each element holds a floating-point value between 0 and 1.
       this is an embedding.

   in tensorflow, embeddings are trained by [205]backpropagating [206]loss
   just like any other parameter in a [207]neural network.

embedding space

   the d-dimensional vector space that features from a higher-dimensional
   vector space are mapped to. ideally, the embedding space contains a
   structure that yields meaningful mathematical results; for example, in
   an ideal embedding space, addition and subtraction of embeddings can
   solve word analogy tasks.

   the [208]dot product of two embeddings is a measure of their
   similarity.

empirical risk minimization (erm)

   choosing the function that minimizes loss on the training set. contrast
   with [209]structural risk minimization.

ensemble

   a merger of the predictions of multiple [210]models. you can create an
   ensemble via one or more of the following:
     * different initializations
     * different [211]hyperparameters
     * different overall structure

   [212]deep and wide models are a kind of ensemble.

epoch

   a full training pass over the entire dataset such that each example has
   been seen once. thus, an epoch represents n/[213]batch size training
   [214]iterations, where n is the total number of examples.

estimator

   #tensorflow

   an instance of the tf.estimator class, which encapsulates logic that
   builds a tensorflow graph and runs a tensorflow session. you may create
   your own [215]custom estimators (as described [216]here) or instantiate
   [217]premade estimators created by others.

example

   one row of a dataset. an example contains one or more [218]features and
   possibly a [219]label. see also [220]labeled example and [221]unlabeled
   example.

experimenter's bias

   #fairness

   see [222]confirmation bias.

exploding gradient problem

   the tendency for [223]gradients in a [224]deep neural networks
   (especially [225]recurrent neural networks) to become surprisingly
   steep (high). steep gradients result in very large updates to the
   weights of each node in a deep neural network.

   models suffering from the exploding gradient problem become difficult
   or impossible to train. [226]gradient clipping can mitigate this
   problem.

   compare to [227]vanishing gradient problem.

f

false negative (fn)

   an example in which the model mistakenly predicted the [228]negative
   class. for example, the model inferred that a particular email message
   was not spam (the negative class), but that email message actually was
   spam.

false positive (fp)

   an example in which the model mistakenly predicted the [229]positive
   class. for example, the model inferred that a particular email message
   was spam (the positive class), but that email message was actually not
   spam.

false positive rate (fpr)

   the x-axis in an [230]roc curve. the false positive rate is defined as
   follows:
   $$\text{false positive rate} = \frac{\text{false
   positives}}{\text{false positives} + \text{true negatives}}$$

feature

   an input variable used in making [231]predictions.

feature column (tf.feature_column)

   #tensorflow

   a function that specifies how a model should interpret a particular
   feature. a list that collects the output returned by calls to such
   functions is a required parameter to all [232]estimators constructors.

   the tf.feature_column functions enable models to easily experiment with
   different representations of input features. for details, see the
   [233]feature columns chapter in the tensorflow programmers guide.

   "feature column" is google-specific terminology. a feature column is
   referred to as a "namespace" in the [234]vw system (at
   yahoo/microsoft), or a [235]field.

feature cross

   a [236]synthetic feature formed by crossing (taking a [237]cartesian
   product of) individual binary features obtained from [238]categorical
   data or from [239]continuous features via [240]bucketing. feature
   crosses help represent nonlinear relationships.

feature engineering

   the process of determining which [241]features might be useful in
   training a model, and then converting raw data from log files and other
   sources into said features. in tensorflow, feature engineering often
   means converting raw log file entries to [242]tf.example protocol
   buffers. see also [243]tf.transform.

   feature engineering is sometimes called feature extraction.

feature extraction

   overloaded term having either of the following definitions:
     * retrieving intermediate feature representations calculated by an
       [244]unsupervised or pretrained model (for example, [245]hidden
       layer values in a [246]neural network) for use in another model as
       input.
     * synonym for [247]feature engineering.

feature set

   the group of [248]features your machine learning model trains on. for
   example, postal code, property size, and property condition might
   comprise a simple feature set for a model that predicts housing prices.

feature spec

   #tensorflow

   describes the information required to extract [249]features data from
   the [250]tf.example protocol buffer. because the tf.example protocol
   buffer is just a container for data, you must specify the following:
     * the data to extract (that is, the keys for the features)
     * the data type (for example, float or int)
     * the length (fixed or variable)

   the [251]estimator api provides facilities for producing a feature spec
   from a list of [252]featurecolumns.

feature vector

   the list of feature values representing an [253]example passed into a
   model.

feedforward neural network (ffn)

   a neural network without cyclic or recursive connections. for example,
   traditional [254]deep neural networks are feedforward neural networks.
   contrast with [255]recurrent neural networks, which are cyclic.

few-shot learning

   a machine learning approach, often used for object classification,
   designed to learn effective classifiers from only a small number of
   training examples.

   see also [256]id62.

fine tuning

   perform a secondary optimization to adjust the parameters of an already
   trained [257]model to fit a new problem. fine tuning often refers to
   refitting the weights of a trained [258]unsupervised model to a
   [259]supervised model.

forget gate

   the portion of a [260]long short-term memory cell that regulates the
   flow of information through the cell. forget gates maintain context by
   deciding which information to discard from the cell state.

full softmax

   see [261]softmax. contrast with [262]candidate sampling.

fully connected layer

   a [263]hidden layer in which each [264]node is connected to every node
   in the subsequent hidden layer.

   a fully connected layer is also known as a [265]dense layer.

g

gan

   abbreviation for [266]generative adversarial network.

generalization

   refers to your model's ability to make correct predictions on new,
   previously unseen data as opposed to the data used to train the model.

generalization curve

   a [267]loss curve showing both the [268]training set and the
   [269]validation set. a generalization curve can help you detect
   possible [270]overfitting. for example, the following generalization
   curve suggests overfitting because loss for the validation set
   ultimately becomes significantly higher than for the training set.

   a cartesian plot in which the y-axis is labeled 'loss' and the x-axis
   is labeled 'iterations'. two graphs appear. one graph shows a loss
   curve for a training set and the other graph shows a loss curve for a
   validation set. the two curves start off similarly, but the curve for
   the training set eventually dips far lower than the curve for the
   validation set.

generalized linear model

   a generalization of [271]least squares regression models, which are
   based on [272]gaussian noise, to other types of models based on other
   types of noise, such as [273]poisson noise or categorical noise.
   examples of generalized linear models include:
     * [274]id28
     * multi-class regression
     * least squares regression

   the parameters of a generalized linear model can be found through
   [275]id76.

   generalized linear models exhibit the following properties:
     * the average prediction of the optimal least squares regression
       model is equal to the average label on the training data.
     * the average id203 predicted by the optimal logistic
       regression model is equal to the average label on the training
       data.

   the power of a generalized linear model is limited by its features.
   unlike a deep model, a generalized linear model cannot "learn new
   features."

generative adversarial network (gan)

   a system to create new data in which a [276]generator creates data and
   a [277]discriminator determines whether that created data is valid or
   invalid.

generative model

   practically speaking, a model that does either of the following:
     * creates (generates) new examples from the training dataset. for
       example, a generative model could create poetry after training on a
       dataset of poems. the [278]generator part of a [279]generative
       adversarial network falls into this category.
     * determines the id203 that a new example comes from the
       training set, or was created from the same mechanism that created
       the training set. for example, after training on a dataset
       consisting of english sentences, a generative model could determine
       the id203 that new input is a valid english sentence.

   a generative model can theoretically discern the distribution of
   examples or particular features in a dataset. that is:
p(examples)

   unsupervised learning models are generative.

   contrast with [280]discriminative models.

generator

   the subsystem within a [281]generative adversarial network that creates
   new [282]examples.

   contrast with [283]discriminative model.

gradient

   the vector of [284]partial derivatives with respect to all of the
   independent variables. in machine learning, the gradient is the vector
   of partial derivatives of the model function. the gradient points in
   the direction of steepest ascent.

gradient clipping

   a commonly used mechanism to mitigate the [285]exploding gradient
   problem by artificially limiting (clipping) the maximum value of
   gradients when using [286]id119 to train a model.

id119

   a technique to minimize [287]loss by computing the gradients of loss
   with respect to the model's parameters, conditioned on training data.
   informally, id119 iteratively adjusts parameters, gradually
   finding the best combination of [288]weights and bias to minimize loss.

graph

   #tensorflow

   in tensorflow, a computation specification. nodes in the graph
   represent operations. edges are directed and represent passing the
   result of an operation (a [289]tensor) as an operand to another
   operation. use [290]tensorboard to visualize a graph.

graph execution

   #tensorflow

   a tensorflow programming environment in which the program first
   constructs a [291]graph and then executes all or part of that graph.
   graph execution is the default execution mode in tensorflow 1.x.

   contrast with [292]eager execution.

ground truth

   the correct answer. reality. since reality is often subjective, expert
   [293]raters typically are the proxy for ground truth.

group attribution bias

   #fairness

   assuming that what is true for an individual is also true for everyone
   in that group. the effects of group attribution bias can be exacerbated
   if a [294]convenience sampling is used for data collection. in a
   non-representative sample, attributions may be made that do not reflect
   reality.

   see also [295]out-group homogeneity bias and [296]in-group bias.

h

hashing

   in machine learning, a mechanism for bucketing [297]categorical data,
   particularly when the number of categories is large, but the number of
   categories actually appearing in the dataset is comparatively small.

   for example, earth is home to about 60,000 tree species. you could
   represent each of the 60,000 tree species in 60,000 separate
   categorical buckets. alternatively, if only 200 of those tree species
   actually appear in a dataset, you could use hashing to divide tree
   species into perhaps 500 buckets.

   a single bucket could contain multiple tree species. for example,
   hashing could place baobab and red maple   two genetically dissimilar
   species   into the same bucket. regardless, hashing is still a good way
   to map large categorical sets into the desired number of buckets.
   hashing turns a categorical feature having a large number of possible
   values into a much smaller number of values by grouping values in a
   deterministic way.

   for more information on hashing, see the [298]feature columns chapter
   in the tensorflow programmers guide.

heuristic

   a quick solution to a problem, which may or may not be the best
   solution. for example, "with a heuristic, we achieved 86% accuracy.
   when we switched to a deep neural network, accuracy went up to 98%."

hidden layer

   a synthetic layer in a [299]neural network between the [300]input layer
   (that is, the features) and the [301]output layer (the prediction).
   hidden layers typically contain an [302]activation function (such as
   [303]relu) for training. a [304]deep neural network contains more than
   one hidden layer.

hierarchical id91

   a category of [305]id91 algorithms that create a tree of
   clusters. hierarchical id91 is well-suited to hierarchical data,
   such as botanical taxonomies. there are two types of hierarchical
   id91 algorithms:
     * agglomerative id91 first assigns every example to its own
       cluster, and iteratively merges the closest clusters to create a
       hierarchical tree.
     * divisive id91 first groups all examples into one cluster and
       then iteratively divides the cluster into a hierarchical tree.

   contrast with [306]centroid-based id91.

hinge loss

   a family of [307]id168s for [308]classification designed to
   find the [309]decision boundary as distant as possible from each
   training example, thus maximizing the margin between examples and the
   boundary. [310]kid166s use hinge loss (or a related function, such as
   squared hinge loss). for binary classification, the hinge id168
   is defined as follows:
   $$\text{loss} = \text{max}(0, 1 - (y' * y))$$

   where y' is the raw output of the classifier model:
   $$y' = b + w_1x_1 + w_2x_2 +     w_nx_n$$

   and y is the true label, either -1 or +1.

   consequently, a plot of hinge loss vs. (y * y') looks as follows:

   [hinge-loss.svg]

holdout data

   [311]examples intentionally not used ("held out") during training. the
   [312]validation dataset and [313]test dataset are examples of holdout
   data. holdout data helps evaluate your model's ability to generalize to
   data other than the data it was trained on. the loss on the holdout set
   provides a better estimate of the loss on an unseen dataset than does
   the loss on the training set.

hyperparameter

   the "knobs" that you tweak during successive runs of training a model.
   for example, [314]learning rate is a hyperparameter.

   contrast with [315]parameter.

hyperplane

   a boundary that separates a space into two subspaces. for example, a
   line is a hyperplane in two dimensions and a plane is a hyperplane in
   three dimensions. more typically in machine learning, a hyperplane is
   the boundary separating a high-dimensional space. [316]kernel support
   vector machines use hyperplanes to separate positive classes from
   negative classes, often in a very high-dimensional space.

i

i.i.d.

   abbreviation for [317]independently and identically distributed.

image recognition

   a process that classifies object(s), pattern(s), or concept(s) in an
   image. image recognition is also known as image classification.

   for more information, see [318]ml practicum: image classification.

imbalanced dataset

   synonym for [319]class-imbalanced dataset.

implicit bias

   #fairness

   automatically making an association or assumption based on one   s mental
   models and memories. implicit bias can affect the following:
     * how data is collected and classified.
     * how ml systems are designed and developed.

   for example, when building a classifier to identify wedding photos, an
   engineer may use the presence of a white dress in a photo as a feature.
   however, white dresses have been customary only during certain eras and
   in certain cultures.

   see also [320]confirmation bias.

independently and identically distributed (i.i.d)

   data drawn from a distribution that doesn't change, and where each
   value drawn doesn't depend on values that have been drawn previously.
   an i.i.d. is the [321]ideal gas of machine learning   a useful
   mathematical construct but almost never exactly found in the real
   world. for example, the distribution of visitors to a web page may be
   i.i.d. over a brief window of time; that is, the distribution doesn't
   change during that brief window and one person's visit is generally
   independent of another's visit. however, if you expand that window of
   time, seasonal differences in the web page's visitors may appear.

id136

   in machine learning, often refers to the process of making predictions
   by applying the trained model to [322]unlabeled examples. in
   statistics, id136 refers to the process of fitting the parameters
   of a distribution conditioned on some observed data. (see the
   [323]wikipedia article on statistical id136.)

in-group bias

   #fairness

   showing partiality to one's own group or own characteristics. if
   testers or raters consist of the machine learning developer's friends,
   family, or colleagues, then in-group bias may invalidate product
   testing or the dataset.

   in-group bias is a form of [324]group attribution bias. see also
   [325]out-group homogeneity bias.

input function

   #tensorflow

   in tensorflow, a function that returns input data to the training,
   evaluation, or prediction method of an [326]estimator. for example, the
   training input function returns a [327]batch of features and labels
   from the [328]training set.

input layer

   the first layer (the one that receives the input data) in a [329]neural
   network.

instance

   synonym for [330]example.

interpretability

   the degree to which a model's predictions can be readily explained.
   deep models are often non-interpretable; that is, a deep model's
   different layers can be hard to decipher. by contrast, linear
   regression models and [331]wide models are typically far more
   interpretable.

inter-rater agreement

   a measurement of how often human raters agree when doing a task. if
   raters disagree, the task instructions may need to be improved. also
   sometimes called inter-annotator agreement or inter-rater reliability.
   see also [332]cohen's kappa, which is one of the most popular
   inter-rater agreement measurements.

item matrix

   in [333]id126s, a matrix of [334]embeddings generated
   by [335]id105 that holds latent signals about each
   [336]item. each row of the item matrix holds the value of a single
   latent feature for all items. for example, consider a movie
   id126. each column in the item matrix represents a
   single movie. the latent signals might represent genres, or might be
   harder-to-interpret signals that involve complex interactions among
   genre, stars, movie age, or other factors.

   the item matrix has the same number of columns as the target matrix
   that is being factorized. for example, given a movie recommendation
   system that evaluates 10,000 movie titles, the item matrix will have
   10,000 columns.

items

   in a [337]id126, the entities that a system recommends.
   for example, videos are the items that a video store recommends, while
   books are the items that a bookstore recommends.

iteration

   a single update of a model's weights during training. an iteration
   consists of computing the gradients of the parameters with respect to
   the loss on a single [338]batch of data.

k

keras

   a popular python machine learning api. [339]keras runs on several deep
   learning frameworks, including tensorflow, where it is made available
   as [340]tf.keras.

kernel support vector machines (kid166s)

   a classification algorithm that seeks to maximize the margin between
   [341]positive and [342]negative classes by mapping input data vectors
   to a higher dimensional space. for example, consider a classification
   problem in which the input dataset has a hundred features. to maximize
   the margin between positive and negative classes, a kid166 could
   internally map those features into a million-dimension space. kid166s
   uses a id168 called [343]hinge loss.

id116

   a popular [344]id91 algorithm that groups examples in
   unsupervised learning. the id116 algorithm basically does the
   following:
     * iteratively determines the best k center points (known as
       [345]centroids).
     * assigns each example to the closest centroid. those examples
       nearest the same centroid belong to the same group.

   the id116 algorithm picks centroid locations to minimize the
   cumulative square of the distances from each example to its closest
   centroid.

   for example, consider the following plot of dog height to dog width:

   [dogdimensions.svg]

   if k=3, the id116 algorithm will determine three centroids. each
   example is assigned to its closest centroid, yielding three groups:

   [dogdimensionskmeans.svg]

   imagine that a manufacturer wants to determine the ideal sizes for
   small, medium, and large sweaters for dogs. the three centroids
   identify the mean height and mean width of each dog in that cluster.
   so, the manufacturer should probably base sweater sizes on those three
   centroids. note that the centroid of a cluster is typically not an
   example in the cluster.

   the preceding illustrations shows id116 for examples with only two
   features (height and width). note that id116 can group examples
   across many features.

k-median

   a id91 algorithm closely related to [346]id116. the practical
   difference between the two is as follows:
     * in id116, centroids are determined by minimizing the sum of the
       squares of the distance between a centroid candidate and each of
       its examples.
     * in k-median, centroids are determined by minimizing the sum of the
       distance between a centroid candidate and each of its examples.

   note that the definitions of distance are also different:
     * id116 relies on the [347]euclidean distance from the centroid to
       an example. (in two dimensions, the euclidean distance means using
       the pythagorean theorem to calculate the hypotenuse.) for example,
       the id116 distance between (2,2) and (5,-2) would be:

   $$ {\text{euclidean distance}} = {\sqrt {(2-5)^2 + (2--2)^2}} = 5 $$
     * k-median relies on the [348]manhattan distance from the centroid to
       an example. this distance is the sum of the absolute deltas in each
       dimension. for example, the k-median distance between (2,2) and
       (5,-2) would be:

   $$ {\text{manhattan distance}} = \lvert 2-5 \rvert + \lvert 2--2 \rvert
   = 7 $$

l

l[1] loss

   [349]id168 based on the absolute value of the difference
   between the values that a model is predicting and the actual values of
   the [350]labels. l[1] loss is less sensitive to outliers than [351]l[2]
   loss.

l[1] id173

   a type of [352]id173 that penalizes weights in proportion to
   the sum of the absolute values of the weights. in models relying on
   [353]sparse features, l[1] id173 helps drive the weights of
   irrelevant or barely relevant features to exactly 0, which removes
   those features from the model. contrast with [354]l[2] id173.

l[2] loss

   see [355]squared loss.

l[2] id173

   a type of [356]id173 that penalizes weights in proportion to
   the sum of the squares of the weights. l[2] id173 helps drive
   outlier weights (those with high positive or low negative values)
   closer to 0 but not quite to 0. (contrast with [357]l1 id173.)
   l[2] id173 always improves generalization in linear models.

label

   in supervised learning, the "answer" or "result" portion of an
   [358]example. each example in a labeled dataset consists of one or more
   features and a label. for instance, in a housing dataset, the features
   might include the number of bedrooms, the number of bathrooms, and the
   age of the house, while the label might be the house's price. in a spam
   detection dataset, the features might include the subject line, the
   sender, and the email message itself, while the label would probably be
   either "spam" or "not spam."

labeled example

   an example that contains [359]features and a [360]label. in supervised
   training, models learn from labeled examples.

lambda

   synonym for [361]id173 rate.

   (this is an overloaded term. here we're focusing on the term's
   definition within [362]id173.)

layer

   a set of [363]neurons in a [364]neural network that process a set of
   input features, or the output of those neurons.

   also, an abstraction in tensorflow. layers are python functions that
   take [365]tensors and configuration options as input and produce other
   tensors as output. once the necessary tensors have been composed, the
   user can convert the result into an [366]estimator via a [367]model
   function.

layers api (tf.layers)

   #tensorflow

   a tensorflow api for constructing a [368]deep neural network as a
   composition of layers. the layers api enables you to build different
   types of [369]layers, such as:
     * tf.layers.dense for a [370]fully-connected layer.
     * tf.layers.conv2d for a convolutional layer.

   when writing a [371]custom estimator, you compose layers objects to
   define the characteristics of all the [372]hidden layers.

   the layers api follows the [373]keras layers api conventions. that is,
   aside from a different prefix, all functions in the layers api have the
   same names and signatures as their counterparts in the keras layers
   api.

learning rate

   a scalar used to train a model via id119. during each
   iteration, the [374]id119 algorithm multiplies the learning
   rate by the gradient. the resulting product is called the gradient
   step.

   learning rate is a key [375]hyperparameter.

least squares regression

   a id75 model trained by minimizing [376]l[2] loss.

id75

   a type of [377]regression model that outputs a continuous value from a
   linear combination of input features.

id28

   a model that generates a id203 for each possible discrete label
   value in classification problems by applying a [378]sigmoid function to
   a linear prediction. although id28 is often used in
   [379]binary classification problems, it can also be used in
   [380]multi-class classification problems (where it becomes called
   multi-class id28 or multinomial regression).

logits

   the vector of raw (non-normalized) predictions that a classification
   model generates, which is ordinarily then passed to a id172
   function. if the model is solving a multi-class classification problem,
   logits typically become an input to the [381]softmax function. the
   softmax function then generates a vector of (normalized) probabilities
   with one value for each possible class.

   in addition, logits sometimes refer to the element-wise inverse of the
   [382]sigmoid function. for more information, see
   [383]tf.nn.sigmoid_cross_id178_with_logits.

log loss

   the [384]id168 used in binary [385]id28.

log-odds

   the logarithm of the odds of some event.

   if the event refers to a binary id203, then odds refers to the
   ratio of the id203 of success (p) to the id203 of failure
   (1-p). for example, suppose that a given event has a 90% id203 of
   success and a 10% id203 of failure. in this case, odds is
   calculated as follows:
   $$ {\text{odds}} = \frac{\text{p}} {\text{(1-p)}} = \frac{.9} {.1} =
   {\text{9}} $$

   the log-odds is simply the logarithm of the odds. by convention,
   "logarithm" refers to natural logarithm, but logarithm could actually
   be any base greater than 1. sticking to convention, the log-odds of our
   example is therefore:
   $$ {\text{log-odds}} = ln(9) ~= 2.2 $$

   the log-odds are the inverse of the [386]sigmoid function.

long short-term memory (lstm)

   a type of cell in a [387]recurrent neural network used to process
   sequences of data in applications such as handwriting recognition,
   machine translation, and image captioning. lstms address the
   [388]vanishing gradient problem that occurs when training id56s due to
   long data sequences by maintaining history in an internal memory state
   based on new input and context from previous cells in the id56.

loss

   a measure of how far a model's [389]predictions are from its
   [390]label. or, to phrase it more pessimistically, a measure of how bad
   the model is. to determine this value, a model must define a loss
   function. for example, id75 models typically use [391]mean
   squared error for a id168, while id28 models use
   [392]log loss.

loss curve

   a graph of [393]loss as a function of training [394]iterations. for
   example:

   a graph of loss versus training iterations, showing a steady drop as
   iterations increase, but then a slight rise in loss at a high number of
   iterations.

   the loss curve can help you determine when your model is
   [395]converging, [396]overfitting, or [397]underfitting.

loss surface

   a graph of weight(s) vs. loss. [398]id119 aims to find the
   weight(s) for which the loss surface is at a local minimum.

lstm

   abbreviation for [399]long short-term memory.

m

machine learning

   a program or system that builds (trains) a predictive model from input
   data. the system uses the learned model to make useful predictions from
   new (never-before-seen) data drawn from the same distribution as the
   one used to train the model. machine learning also refers to the field
   of study concerned with these programs or systems.

majority class

   the more common label in a [400]class-imbalanced dataset. for example,
   given a dataset containing 99% non-spam labels and 1% spam labels, the
   non-spam labels are the majority class.

matplotlib

   an open-source python 2d plotting library. [401]matplotlib helps you
   visualize different aspects of machine learning.

id105

   in math, a mechanism for finding the matrices whose dot product
   approximates a target matrix.

   in [402]id126s, the target matrix often holds users'
   ratings on [403]items. for example, the target matrix for a movie
   id126 might look something like the following, where
   the positive integers are user ratings and 0 means that the user didn't
   rate the movie:
     casablanca the philadelphia story black panther wonder woman pulp
   fiction
   user 1 5.0 3.0 0.0 2.0 0.0
   user 2 4.0 0.0 0.0 1.0 5.0
   user 3 3.0 1.0 4.0 5.0 0.0

   the movie id126 aims to predict user ratings for
   unrated movies. for example, will user 1 like black panther?

   one approach for id126s is to use id105
   to generate the following two matrices:
     * a [404]user matrix, shaped as the number of users x the number of
       embedding dimensions.
     * an [405]item matrix, shaped as the number of embedding dimensions x
       the number of users.

   for example, using id105 on our three users and five
   items could yield the following user matrix and item matrix:
user matrix                 item matrix

1.1   2.3           0.9   0.2   1.4    2.0   1.2
0.6   2.0           1.7   1.2   1.2   -0.1   2.1
2.5   0.5

   the dot product of the user matrix and item matrix yields a
   recommendation matrix that contains not only the original user ratings
   but also predictions for the movies that each user hasn't seen. for
   example, consider user 1's rating of casablanca, which was 5.0. the dot
   product corresponding to that cell in the recommendation matrix should
   hopefully be around 5.0, and it is:
(1.1 * 0.9) + (2.3 * 1.7) = 4.9

   more importantly, will user 1 like black panther? taking the dot
   product corresponding to the first row and the third column yields a
   predicted rating of 4.3:
(1.1 * 1.4) + (2.3 * 1.2) = 4.3

   id105 typically yields a user matrix and item matrix
   that, together, are significantly more compact than the target matrix.

mean squared error (mse)

   the average squared loss per example. mse is calculated by dividing the
   [406]squared loss by the number of [407]examples. the values that
   [408]tensorflow playground displays for "training loss" and "test loss"
   are mse.

metric

   #tensorflow

   a number that you care about. may or may not be directly optimized in a
   machine-learning system. a metric that your system tries to optimize is
   called an [409]objective.

metrics api (tf.metrics)

   a tensorflow api for evaluating models. for example,
   tf.metrics.accuracy determines how often a model's predictions match
   labels. when writing a [410]custom estimator, you invoke metrics api
   functions to specify how your model should be evaluated.

mini-batch

   a small, randomly selected subset of the entire batch of [411]examples
   run together in a single iteration of training or id136. the
   [412]batch size of a mini-batch is usually between 10 and 1,000. it is
   much more efficient to calculate the loss on a mini-batch than on the
   full training data.

mini-batch stochastic id119 (sgd)

   a [413]id119 algorithm that uses [414]mini-batches. in other
   words, mini-batch sgd estimates the gradient based on a small subset of
   the training data. [415]vanilla sgd uses a mini-batch of size 1.

minimax loss

   a id168 for [416]id3, based on the
   [417]cross-id178 between the distribution of generated data and real
   data.

   minimax loss is used in the [418]first paper to describe generative
   adversarial networks.

minority class

   the less common label in a [419]class-imbalanced dataset. for example,
   given a dataset containing 99% non-spam labels and 1% spam labels, the
   spam labels are the minority class.

ml

   abbreviation for [420]machine learning.

mnist

   a public-domain dataset compiled by lecun, cortes, and burges
   containing 60,000 images, each image showing how a human manually wrote
   a particular digit from 0   9. each image is stored as a 28x28 array of
   integers, where each integer is a grayscale value between 0 and 255,
   inclusive.

   mnist is a canonical dataset for machine learning, often used to test
   new ml approaches. for details, see [421]the mnist database of
   handwritten digits.

model

   the representation of what an ml system has learned from the training
   data. within tensorflow, model is an overloaded term, which can have
   either of the following two related meanings:
     * the [422]tensorflow graph that expresses the structure of how a
       prediction will be computed.
     * the particular weights and biases of that tensorflow graph, which
       are determined by [423]training.

model capacity

   the complexity of problems that a model can learn. the more complex the
   problems that a model can learn, the higher the model   s capacity. a
   model   s capacity typically increases with the number of model
   parameters. for a formal definition of classifier capacity, see [424]vc
   dimension.

model function

   #tensorflow

   the function within an [425]estimator that implements ml training,
   evaluation, and id136. for example, the training portion of a model
   function might handle tasks such as defining the topology of a deep
   neural network and identifying its [426]optimizer function. when using
   [427]premade estimators, someone has already written the model function
   for you. when using [428]custom estimators, you must write the model
   function yourself.

   for details about writing a model function, see the [429]creating
   custom estimators chapter in the tensorflow programmers guide.

model training

   the process of determining the best [430]model.

momentum

   a sophisticated id119 algorithm in which a learning step
   depends not only on the derivative in the current step, but also on the
   derivatives of the step(s) that immediately preceded it. momentum
   involves computing an exponentially weighted moving average of the
   gradients over time, analogous to momentum in physics. momentum
   sometimes prevents learning from getting stuck in local minima.

multi-class classification

   classification problems that distinguish among more than two classes.
   for example, there are approximately 128 species of maple trees, so a
   model that categorized maple tree species would be multi-class.
   conversely, a model that divided emails into only two categories (spam
   and not spam) would be a [431]binary classification model.

multinomial classification

   synonym for [432]multi-class classification.

n

nan trap

   when one number in your model becomes a [433]nan during training, which
   causes many or all other numbers in your model to eventually become a
   nan.

   nan is an abbreviation for "not a number."

natural language understanding

   determining a user's intentions based on what the user typed or said.
   for example, a search engine uses natural language understanding to
   determine what the user is searching for based on what the user typed
   or said.

negative class

   in [434]binary classification, one class is termed positive and the
   other is termed negative. the positive class is the thing we're looking
   for and the negative class is the other possibility. for example, the
   negative class in a medical test might be "not tumor." the negative
   class in an email classifier might be "not spam." see also
   [435]positive class.

neural network

   a model that, taking inspiration from the brain, is composed of layers
   (at least one of which is [436]hidden) consisting of simple connected
   units or [437]neurons followed by nonlinearities.

neuron

   a node in a [438]neural network, typically taking in multiple input
   values and generating one output value. the neuron calculates the
   output value by applying an [439]activation function (nonlinear
   transformation) to a weighted sum of input values.

id165

   an ordered sequence of n words. for example, truly madly is a 2-gram.
   because order is relevant, madly truly is a different 2-gram than truly
   madly.
   n name(s) for this kind of id165 examples
   2 bigram or 2-gram to go, go to, eat lunch, eat dinner
   3 trigram or 3-gram ate too much, three blind mice, the bell tolls
   4 4-gram walk in the park, dust in the wind, the boy ate lentils

   many [440]natural language understanding models rely on id165s to
   predict the next word that the user will type or say. for example,
   suppose a user typed three blind. an nlu model based on trigrams would
   likely predict that the user will next type mice.

   contrast id165s with [441]bag of words, which are unordered sets of
   words.

nlu

   abbreviation for [442]natural language understanding.

node (neural network)

   a [443]neuron in a [444]hidden layer.

node (tensorflow graph)

   #tensorflow

   an operation in a tensorflow [445]graph.

noise

   broadly speaking, anything that obscures the signal in a dataset. noise
   can be introduced into data in a variety of ways. for example:
     * human raters make mistakes in labeling.
     * humans and instruments mis-record or omit feature values.

non-response bias

   #fairness

   see [446]selection bias.

id172

   the process of converting an actual range of values into a standard
   range of values, typically -1 to +1 or 0 to 1. for example, suppose the
   natural range of a certain feature is 800 to 6,000. through subtraction
   and division, you can normalize those values into the range -1 to +1.

   see also [447]scaling.

numerical data

   [448]features represented as integers or real-valued numbers. for
   example, in a real estate model, you would probably represent the size
   of a house (in square feet or square meters) as numerical data.
   representing a feature as numerical data indicates that the feature's
   values have a mathematical relationship to each other and possibly to
   the label. for example, representing the size of a house as numerical
   data indicates that a 200 square-meter house is twice as large as a 100
   square-meter house. furthermore, the number of square meters in a house
   probably has some mathematical relationship to the price of the house.

   not all integer data should be represented as numerical data. for
   example, postal codes in some parts of the world are integers; however,
   integer postal codes should not be represented as numerical data in
   models. that's because a postal code of 20000 is not twice (or half) as
   potent as a postal code of 10000. furthermore, although different
   postal codes do correlate to different real estate values, we can't
   assume that real estate values at postal code 20000 are twice as
   valuable as real estate values at postal code 10000. postal codes
   should be represented as [449]categorical data instead.

   numerical features are sometimes called [450]continuous features.

numpy

   an [451]open-source math library that provides efficient array
   operations in python. [452]pandas is built on numpy.

o

objective

   a metric that your algorithm is trying to optimize.

objective function

   the mathematical formula or metric that a model aims to optimize. for
   example, the objective function for [453]id75 is usually
   [454]squared loss. therefore, when training a id75 model,
   the goal is to minimize squared loss.

   in some cases, the goal is to maximize the objective function. for
   example, if the objective function is accuracy, the goal is to maximize
   accuracy.

   see also [455]loss.

offline id136

   generating a group of [456]predictions, storing those predictions, and
   then retrieving those predictions on demand. contrast with [457]online
   id136.

one-hot encoding

   a sparse vector in which:
     * one element is set to 1.
     * all other elements are set to 0.

   one-hot encoding is commonly used to represent strings or identifiers
   that have a finite set of possible values. for example, suppose a given
   botany dataset chronicles 15,000 different species, each denoted with a
   unique string identifier. as part of feature engineering, you'll
   probably encode those string identifiers as one-hot vectors in which
   the vector has a size of 15,000.

id62

   a machine learning approach, often used for object classification,
   designed to learn effective classifiers from a single training example.

   see also [458]few-shot learning.

one-vs.-all

   given a classification problem with n possible solutions, a one-vs.-all
   solution consists of n separate [459]binary classifiers   one binary
   classifier for each possible outcome. for example, given a model that
   classifies examples as animal, vegetable, or mineral, a one-vs.-all
   solution would provide the following three separate binary classifiers:
     * animal vs. not animal
     * vegetable vs. not vegetable
     * mineral vs. not mineral

online id136

   generating [460]predictions on demand. contrast with [461]offline
   id136.

operation (op)

   #tensorflow

   a node in the tensorflow graph. in tensorflow, any procedure that
   creates, manipulates, or destroys a [462]tensor is an operation. for
   example, a matrix multiply is an operation that takes two tensors as
   input and generates one tensor as output.

optimizer

   a specific implementation of the [463]id119 algorithm.
   tensorflow's base class for optimizers is [464]tf.train.optimizer.
   different optimizers may leverage one or more of the following concepts
   to enhance the effectiveness of id119 on a given
   [465]training set:
     * [466]momentum (momentum)
     * update frequency ([467]adagrad = adaptive id119;
       ([468]adam = adaptive with momentum; rmsprop)
     * sparsity/id173 ([469]ftrl)
     * more complex math ([470]proximal, and others)

   you might even imagine an [471]nn-driven optimizer.

out-group homogeneity bias

   #fairness

   the tendency to see out-group members as more alike than in-group
   members when comparing attitudes, values, personality traits, and other
   characteristics. in-group refers to people you interact with regularly;
   out-group refers to people you do not interact with regularly. if you
   create a dataset by asking people to provide attributes about
   out-groups, those attributes may be less nuanced and more stereotyped
   than attributes that participants list for people in their in-group.

   for example, lilliputians might describe the houses of other
   lilliputians in great detail, citing small differences in architectural
   styles, windows, doors, and sizes. however, the same lilliputians might
   simply declare that brobdingnagians all live in identical houses.

   out-group homogeneity bias is a form of [472]group attribution bias.

   see also [473]in-group bias.

outliers

   values distant from most other values. in machine learning, any of the
   following are outliers:
     * [474]weights with high absolute values.
     * predicted values relatively far away from the actual values.
     * input data whose values are more than roughly 3 standard deviations
       from the mean.

   outliers often cause problems in model training. [475]clipping is one
   way of managing outliers.

output layer

   the "final" layer of a neural network. the layer containing the
   answer(s).

overfitting

   creating a model that matches the [476]training data so closely that
   the model fails to make correct predictions on new data.

p

pandas

   a column-oriented data analysis api. many ml frameworks, including
   tensorflow, support pandas data structures as input. see the
   [477]pandas documentation for details.

parameter

   a variable of a model that the ml system trains on its own. for
   example, [478]weights are parameters whose values the ml system
   gradually learns through successive training iterations. contrast with
   [479]hyperparameter.

parameter server (ps)

   #tensorflow

   a job that keeps track of a model's [480]parameters in a distributed
   setting.

   see the [481]tensorflow architecture chapter in the tensorflow
   programmers guide for details.

parameter update

   the operation of adjusting a model's [482]parameters during training,
   typically within a single iteration of [483]id119.

partial derivative

   a derivative in which all but one of the variables is considered a
   constant. for example, the partial derivative of f(x, y) with respect
   to x is the derivative of f considered as a function of x alone (that
   is, keeping y constant). the partial derivative of f with respect to x
   focuses only on how x is changing and ignores all other variables in
   the equation.

participation bias

   #fairness

   synonym for non-response bias. see [484]selection bias.

partitioning strategy

   the algorithm by which variables are divided across [485]parameter
   servers.

id88

   a system (either hardware or software) that takes in one or more input
   values, runs a function on the weighted sum of the inputs, and computes
   a single output value. in machine learning, the function is typically
   nonlinear, such as [486]relu, [487]sigmoid, or tanh. for example, the
   following id88 relies on the sigmoid function to process three
   input values:
   $$f(x_1, x_2, x_3) = \text{sigmoid}(w_1 x_1 + w_2 x_2 + w_3 x_3)$$

   in the following illustration, the id88 takes three inputs, each
   of which is itself modified by a weight before entering the id88:

   a id88 that takes in 3 inputs, each multiplied by separate
   weights. the id88 outputs a single value.

   id88s are the ([488]nodes) in [489]deep neural networks. that is,
   a deep neural network consists of multiple connected id88s, plus
   a [490]id26 algorithm to introduce feedback.

performance

   overloaded term with the following meanings:
     * the traditional meaning within software engineering. namely: how
       fast (or efficiently) does this piece of software run?
     * the meaning within ml. here, performance answers the following
       question: how correct is this [491]model? that is, how good are the
       model's predictions?

perplexity

   one measure of how well a [492]model is accomplishing its task. for
   example, suppose your task is to read the first few letters of a word a
   user is typing on a smartphone keyboard, and to offer a list of
   possible completion words. perplexity, p, for this task is
   approximately the number of guesses you need to offer in order for your
   list to contain the actual word the user is trying to type.

   perplexity is related to [493]cross-id178 as follows:
   $$p= 2^{-\text{cross id178}}$$

pipeline

   the infrastructure surrounding a machine learning algorithm. a pipeline
   includes gathering the data, putting the data into training data files,
   training one or more models, and exporting the models to production.

pooling

   reducing a matrix (or matrices) created by an earlier
   [494]convolutional layer to a smaller matrix. pooling usually involves
   taking either the maximum or average value across the pooled area. for
   example, suppose we have the following 3x3 matrix:

   [poolingstart.svg]

   a pooling operation, just like a convolutional operation, divides that
   matrix into slices and then slides that convolutional operation by
   [495]strides. for example, suppose the pooling operation divides the
   convolutional matrix into 2x2 slices with a 1x1 stride. as the
   following diagram illustrates, four pooling operations take place.
   imagine that each pooling operation picks the maximum value of the four
   in that slice:

   [poolingconvolution.svg]

   pooling helps enforce [496]translational invariance in the input
   matrix.

   pooling for vision applications is known more formally as spatial
   pooling. time-series applications usually refer to pooling as temporal
   pooling. less formally, pooling is often called subsampling or
   downsampling.

positive class

   in [497]binary classification, the two possible classes are labeled as
   positive and negative. the positive outcome is the thing we're testing
   for. (admittedly, we're simultaneously testing for both outcomes, but
   play along.) for example, the positive class in a medical test might be
   "tumor." the positive class in an email classifier might be "spam."

   contrast with [498]negative class.

precision

   a metric for [499]classification models. precision identifies the
   frequency with which a model was correct when predicting the
   [500]positive class. that is:
   $$\text{precision} = \frac{\text{true positives}} {\text{true
   positives} + \text{false positives}}$$

prediction

   a model's output when provided with an input [501]example.

prediction bias

   #fairness

   a value indicating how far apart the average of [502]predictions is
   from the average of [503]labels in the dataset.

   not to be confused with the [504]bias term in machine learning models
   or with [505]bias in ethics and fairness.

premade estimator

   #tensorflow

   an [506]estimator that someone has already built. tensorflow provides
   several premade estimators, including dnnclassifier, dnnregressor, and
   linearclassifier. to learn more about premade estimators, see the
   [507]premade estimators chapter in the tensorflow programmers guide.

   contrast with [508]custom estimators.

pre-trained model

   models or model components (such as [509]embeddings) that have been
   already been trained. sometimes, you'll feed pre-trained embeddings
   into a [510]neural network. other times, your model will train the
   embeddings itself rather than rely on the pre-trained embeddings.

prior belief

   what you believe about the data before you begin training on it. for
   example, [511]l[2] id173 relies on a prior belief that
   [512]weights should be small and normally distributed around zero.

proxy labels

   data used to approximate labels not directly available in a dataset.

   for example, suppose you want is it raining? to be a boolean label for
   your dataset, but the dataset doesn't contain rain data. if photographs
   are available, you might establish pictures of people carrying
   umbrellas as a proxy label for is it raining? however, proxy labels may
   distort results. for example, in some places, it may be more common to
   carry umbrellas to protect against sun than the rain.

q

quantile

   each bucket in [513]quantile bucketing.

quantile bucketing

   distributing a feature's values into [514]buckets so that each bucket
   contains the same (or almost the same) number of examples. for example,
   the following figure divides 44 points into 4 buckets, each of which
   contains 11 points. in order for each bucket in the figure to contain
   the same number of points, some buckets span a different width of
   x-values.

   40 data points divided into 4 buckets of 11 points each. some of the
   buckets contain a wider range of feature values than others.

quantization

   an algorithm that implements [515]quantile bucketing on a particular
   [516]feature in a [517]dataset.

queue

   #tensorflow

   a tensorflow [518]operation that implements a queue data structure.
   typically used in i/o.

r

id79

   an ensemble approach to finding the [519]decision tree that best fits
   the training data by creating many id90 and then determining
   the "average" one. the "random" part of the term refers to building
   each of the id90 from a random selection of features; the
   "forest" refers to the set of id90.

rank (ordinality)

   the ordinal position of a class in an ml problem that categorizes
   classes from highest to lowest. for example, a behavior ranking system
   could rank a dog's rewards from highest (a steak) to lowest (wilted
   kale).

rank (tensor)

   #tensorflow

   the number of dimensions in a [520]tensor. for instance, a scalar has
   rank 0, a vector has rank 1, and a matrix has rank 2.

   not to be confused with [521]rank (ordinality).

rater

   a human who provides [522]labels in [523]examples. sometimes called an
   "annotator."

recall

   a metric for [524]classification models that answers the following
   question: out of all the possible positive labels, how many did the
   model correctly identify? that is:

   \[\text{recall} = \frac{\text{true positives}} {\text{true positives} +
   \text{false negatives}} \]

id126

   a system that selects for each user a relatively small set of desirable
   [525]items from a large corpus. for example, a video recommendation
   system might recommend two videos from a corpus of 100,000 videos,
   selecting casablanca and the philadelphia story for one user, and
   wonder woman and black panther for another. a video recommendation
   system might base its recommendations on factors such as:
     * movies that similar users have rated or watched.
     * genre, directors, actors, target demographic...

rectified linear unit (relu)

   an [526]activation function with the following rules:
     * if input is negative or zero, output is 0.
     * if input is positive, output is equal to input.

recurrent neural network

   a [527]neural network that is intentionally run multiple times, where
   parts of each run feed into the next run. specifically, hidden layers
   from the previous run provide part of the input to the same hidden
   layer in the next run. recurrent neural networks are particularly
   useful for evaluating sequences, so that the hidden layers can learn
   from previous runs of the neural network on earlier parts of the
   sequence.

   for example, the following figure shows a recurrent neural network that
   runs four times. notice that the values learned in the hidden layers
   from the first run become part of the input to the same hidden layers
   in the second run. similarly, the values learned in the hidden layer on
   the second run become part of the input to the same hidden layer in the
   third run. in this way, the recurrent neural network gradually trains
   and predicts the meaning of the entire sequence rather than just the
   meaning of individual words.

   an id56 that runs four times to process four input words.

regression model

   a type of model that outputs continuous (typically, floating-point)
   values. compare with [528]classification models, which output discrete
   values, such as "day lily" or "tiger lily."

id173

   the penalty on a model's complexity. id173 helps prevent
   [529]overfitting. different kinds of id173 include:
     * [530]l[1] id173
     * [531]l[2] id173
     * [532]dropout id173
     * [533]early stopping (this is not a formal id173 method,
       but can effectively limit overfitting)

id173 rate

   a scalar value, represented as lambda, specifying the relative
   importance of the id173 function. the following simplified
   [534]loss equation shows the id173 rate's influence:
   $$\text{minimize(id168 + }\lambda\text{(id173
   function))}$$

   raising the id173 rate reduces [535]overfitting but may make
   the model less [536]accurate.

id23

   a machine learning approach to maximize an ultimate reward through
   feedback (rewards and punishments) after a sequence of actions. for
   example, the ultimate reward of most games is victory. reinforcement
   learning systems can become expert at playing complex games by
   evaluating sequences of previous game moves that ultimately led to wins
   and sequences that ultimately led to losses.

reporting bias

   #fairness

   the fact that the frequency with which people write about actions,
   outcomes, or properties is not a reflection of their real-world
   frequencies or the degree to which a property is characteristic of a
   class of individuals. reporting bias can influence the composition of
   data that ml systems learn from.

   for example, in books, the word laughed is more prevalent than
   breathed. an ml model that estimates the relative frequency of laughing
   and breathing from a book corpus would probably determine that laughing
   is more common than breathing.

representation

   the process of mapping data to useful [537]features.

re-ranking

   the final stage of a [538]id126, during which scored
   items may be re-graded according to some other (typically, non-ml)
   algorithm. re-ranking evaluates the list of items generated by the
   [539]scoring phase, taking actions such as:
     * eliminating items that the user has already purchased.
     * boosting the score of fresher items.

ridge id173

   synonym for [540]l[2] id173. the term ridge id173 is
   more frequently used in pure statistics contexts, whereas l[2]
   id173 is used more often in machine learning.

id56

   abbreviation for [541]recurrent neural networks.

roc (receiver operating characteristic) curve

   a curve of [542]true positive rate vs. [543]false positive rate at
   different [544]classification thresholds. see also [545]auc.

root directory

   #tensorflow

   the directory you specify for hosting subdirectories of the tensorflow
   checkpoint and events files of multiple models.

root mean squared error (rmse)

   the square root of the [546]mean squared error.

rotational invariance

   in an image classification problem, an algorithm's ability to
   successfully classify images even when the orientation of the image
   changes. for example, the algorithm can still identify a tennis racket
   whether it is pointing up, sideways, or down. note that rotational
   invariance is not always desirable; for example, an upside-down 9
   should not be classified as a 9.

   see also [547]translational invariance and [548]size invariance.

s

sampling bias

   #fairness

   see [549]selection bias.

savedmodel

   #tensorflow

   the recommended format for saving and recovering tensorflow models.
   savedmodel is a language-neutral, recoverable serialization format,
   which enables higher-level systems and tools to produce, consume, and
   transform tensorflow models.

   see the [550]saving and restoring chapter in the tensorflow
   programmer's guide for complete details.

saver

   #tensorflow

   a [551]tensorflow object responsible for saving model checkpoints.

scalar

   a single number or a single string that can be designated a [552]tensor
   of [553]rank 0. for example, the following lines of code each create
   one scalar in tensorflow:
breed = tf.variable("poodle", tf.string)
temperature = tf.variable(27, tf.int16)
precision = tf.variable(0.982375101275, tf.float64)

scaling

   a commonly used practice in [554]feature engineering to tame a
   feature's range of values to match the range of other features in the
   dataset. for example, suppose that you want all floating-point features
   in the dataset to have a range of 0 to 1. given a particular feature's
   range of 0 to 500, you could scale that feature by dividing each value
   by 500.

   see also [555]id172.

scikit-learn

   a popular open-source ml platform. see [556]www.scikit-learn.org.

scoring

   the part of a [557]id126 that provides a value or
   ranking for each item produced by the [558]candidate generation phase.

selection bias

   #fairness

   errors in conclusions drawn from sampled data due to a selection
   process that generates systematic differences between samples observed
   in the data and those not observed. the following forms of selection
   bias exist:
     * coverage bias: the population represented in the dataset does not
       match the population that the ml model is making predictions about.
     * sampling bias: data is not collected randomly from the target
       group.
     * non-response bias (also called participation bias): users from
       certain groups opt-out of surveys at different rates than users
       from other groups.

   for example, suppose you are creating an ml model that predicts
   people's enjoyment of a movie. to collect training data, you hand out a
   survey to everyone in the front row of a theater showing the movie.
   offhand, this may sound like a reasonable way to gather a dataset;
   however, this form of data collection may introduce the following forms
   of selection bias:
     * coverage bias: by sampling from a population who chose to see the
       movie, your model's predictions may not generalize to people who
       did not already express that level of interest in the movie.
     * sampling bias: rather than randomly sampling from the intended
       population (all the people at the movie), you sampled only the
       people in the front row. it is possible that the people sitting in
       the front row were more interested in the movie than those in other
       rows.
     * non-response bias: in general, people with strong opinions tend to
       respond to optional surveys more frequently than people with mild
       opinions. since the movie survey is optional, the responses are
       more likely to form a [559]bimodal distribution than a normal
       (bell-shaped) distribution.

semi-supervised learning

   training a model on data where some of the training examples have
   labels but others don   t. one technique for semi-supervised learning is
   to infer labels for the unlabeled examples, and then to train on the
   inferred labels to create a new model. semi-supervised learning can be
   useful if labels are expensive to obtain but unlabeled examples are
   plentiful.

id31

   using statistical or machine learning algorithms to determine a group's
   overall attitude   positive or negative   toward a service, product,
   organization, or topic. for example, using [560]natural language
   understanding, an algorithm could perform id31 on the
   textual feedback from a university course to determine the degree to
   which students generally liked or disliked the course.

sequence model

   a model whose inputs have a sequential dependence. for example,
   predicting the next video watched from a sequence of previously watched
   videos.

serving

   a synonym for [561]inferring.

session (tf.session)

   #tensorflow

   an object that encapsulates the state of the tensorflow runtime and
   runs all or part of a [562]graph. when using the low-level tensorflow
   apis, you instantiate and manage one or more tf.session objects
   directly. when using the estimators api, estimators instantiate session
   objects for you.

shape (tensor)

   the number of elements in each [563]dimension of a tensor. the shape is
   represented as a list of integers. for example, the following
   two-dimensional tensor has a shape of [3,4]:
[[5, 7, 6, 4],
 [2, 9, 4, 8],
 [3, 6, 5, 1]]

   tensorflow uses row-major (c-style) format to represent the order of
   dimensions, which is why the shape in tensorflow is [3,4] rather than
   [4,3]. in other words, in a two-dimensional tensorflow tensor, the
   shape is [number of rows, number of columns].

sigmoid function

   a function that maps logistic or multinomial regression output (log
   odds) to probabilities, returning a value between 0 and 1. the sigmoid
   function has the following formula:
   $$y = \frac{1}{1 + e^{-\sigma}}$$

   where \(\sigma\) in [564]id28 problems is simply:
   $$\sigma = b + w_1x_1 + w_2x_2 +     w_nx_n$$

   in other words, the sigmoid function converts \(\sigma\) into a
   id203 between 0 and 1.

   in some [565]neural networks, the sigmoid function acts as the
   [566]activation function.

similarity measure

   in [567]id91 algorithms, the metric used to determine how alike
   (how similar) any two examples are.

size invariance

   in an image classification problem, an algorithm's ability to
   successfully classify images even when the size of the image changes.
   for example, the algorithm can still identify a cat whether it consumes
   2m pixels or 200k pixels. note that even the best image classification
   algorithms still have practical limits on size invariance. for example,
   an algorithm (or human) is unlikely to correctly classify a cat image
   consuming only 20 pixels.

   see also [568]translational invariance and [569]rotational invariance.

sketching

   in [570]unsupervised machine learning, a category of algorithms that
   perform a preliminary similarity analysis on examples. sketching
   algorithms use a [571]locality-sensitive hash function to identify
   points that are likely to be similar, and then group them into buckets.

   sketching decreases the computation required for similarity
   calculations on large datasets. instead of calculating similarity for
   every single pair of examples in the dataset, we calculate similarity
   only for each pair of points within each bucket.

softmax

   a function that provides probabilities for each possible class in a
   [572]multi-class classification model. the probabilities add up to
   exactly 1.0. for example, softmax might determine that the id203
   of a particular image being a dog at 0.9, a cat at 0.08, and a horse at
   0.02. (also called full softmax.)

   contrast with [573]candidate sampling.

sparse feature

   [574]feature vector whose values are predominately zero or empty. for
   example, a vector containing a single 1 value and a million 0 values is
   sparse. as another example, words in a search query could also be a
   sparse feature   there are many possible words in a given language, but
   only a few of them occur in a given query.

   contrast with [575]dense feature.

sparse representation

   a [576]representation of a tensor that only stores nonzero elements.

   for example, the english language consists of about a million words.
   consider two ways to represent a count of the words used in one english
   sentence:
     * a dense representation of this sentence must set an integer for all
       one million cells, placing a 0 in most of them, and a low integer
       into a few of them.
     * a sparse representation of this sentence stores only those cells
       symbolizing a word actually in the sentence. so, if the sentence
       contained only 20 unique words, then the sparse representation for
       the sentence would store an integer in only 20 cells.

   for example, consider two ways to represent the sentence, "dogs wag
   tails." as the following tables show, the dense representation consumes
   about a million cells; the sparse representation consumes only 3 cells:

   caption: dense representation

   cell number   word         occurrence
   0           a        0
   1           aardvark 0
   2           aargh    0
   3           aarti    0
       140,391 more words with an occurrence of 0
   140395      dogs     1
       633,062 words with an occurrence of 0
   773458      tails    1
       189,136 words with an occurrence of 0
   962594      wag      1
       many more words with an occurrence of 0

   caption: sparse representation

   cell number word  occurrence
   140395      dogs  1
   773458      tails 1
   962594      wag   1

sparse vector

   a vector whose values are mostly zeroes. see also [577]sparse feature.

sparsity

   the number of elements set to zero (or null) in a vector or matrix
   divided by the total number of entries in that vector or matrix. for
   example, consider a 10x10 matrix in which 98 cells contain zero. the
   calculation of sparsity is as follows:
   $$ {\text{sparsity}} = \frac{\text{98}} {\text{100}} = {\text{0.98}} $$

   feature sparsity refers to the sparsity of a feature vector; model
   sparsity refers to the sparsity of the model weights.

spatial pooling

   see [578]pooling.

squared hinge loss

   the square of the [579]hinge loss. squared hinge loss penalizes
   outliers more harshly than regular hinge loss.

squared loss

   the [580]id168 used in [581]id75. (also known as
   l[2] loss.) this function calculates the squares of the difference
   between a model's predicted value for a labeled [582]example and the
   actual value of the [583]label. due to squaring, this id168
   amplifies the influence of bad predictions. that is, squared loss
   reacts more strongly to outliers than [584]l[1] loss.

static model

   a model that is trained offline.

stationarity

   a property of data in a dataset, in which the data distribution stays
   constant across one or more dimensions. most commonly, that dimension
   is time, meaning that data exhibiting stationarity doesn't change over
   time. for example, data that exhibits stationarity doesn't change from
   september to december.

step

   a forward and backward evaluation of one [585]batch.

step size

   synonym for [586]learning rate.

stochastic id119 (sgd)

   a [587]id119 algorithm in which the batch size is one. in
   other words, sgd relies on a single example chosen uniformly at random
   from a dataset to calculate an estimate of the gradient at each step.

stride

   in a convolutional operation or pooling, the delta in each dimension of
   the next series of input slices. for example, the following animation
   demonstrates a (1,1) stride during a convolutional operation.
   therefore, the next input slice starts one position to the right of the
   previous input slice. when the operation reaches the right edge, the
   next slice is all the way over to the left but one position down.

   [animatedconvolution.gif]

   the preceding example demonstrates a two-dimensional stride. if the
   input matrix is three-dimensional, the stride would also be
   three-dimensional.

structural risk minimization (srm)

   an algorithm that balances two goals:
     * the desire to build the most predictive model (for example, lowest
       loss).
     * the desire to keep the model as simple as possible (for example,
       strong id173).

   for example, a function that minimizes loss+id173 on the
   training set is a structural risk minimization algorithm.

   for more information, see [588]http://www.id166s.org/srm/.

   contrast with [589]empirical risk minimization.

subsampling

   see [590]pooling.

summary

   #tensorflow

   in tensorflow, a value or set of values calculated at a particular
   [591]step, usually used for tracking model metrics during training.

supervised machine learning

   training a [592]model from input data and its corresponding
   [593]labels. supervised machine learning is analogous to a student
   learning a subject by studying a set of questions and their
   corresponding answers. after mastering the mapping between questions
   and answers, the student can then provide answers to new
   (never-before-seen) questions on the same topic. compare with
   [594]unsupervised machine learning.

synthetic feature

   a [595]feature not present among the input features, but created from
   one or more of them. kinds of synthetic features include:
     * [596]bucketing a continuous feature into range bins.
     * multiplying (or dividing) one feature value by other feature
       value(s) or by itself.
     * creating a [597]feature cross.

   features created by [598]normalizing or [599]scaling alone are not
   considered synthetic features.

t

target

   synonym for [600]label.

temporal data

   data recorded at different points in time. for example, winter coat
   sales recorded for each day of the year would be temporal data.

tensor

   #tensorflow

   the primary data structure in tensorflow programs. tensors are
   n-dimensional (where n could be very large) data structures, most
   commonly scalars, vectors, or matrices. the elements of a tensor can
   hold integer, floating-point, or string values.

tensorboard

   #tensorflow

   the dashboard that displays the summaries saved during the execution of
   one or more tensorflow programs.

tensorflow

   #tensorflow

   a large-scale, distributed, machine learning platform. the term also
   refers to the base api layer in the tensorflow stack, which supports
   general computation on dataflow graphs.

   although tensorflow is primarily used for machine learning, you may
   also use tensorflow for non-ml tasks that require numerical computation
   using dataflow graphs.

tensorflow playground

   #tensorflow

   a program that visualizes how different [601]hyperparameters influence
   model (primarily neural network) training. go to
   [602]http://playground.tensorflow.org to experiment with tensorflow
   playground.

tensorflow serving

   #tensorflow

   a platform to deploy trained models in production.

tensor processing unit (tpu)

   #tensorflow

   an asic (application-specific integrated circuit) that optimizes the
   performance of tensorflow programs.

tensor rank

   #tensorflow

   see [603]rank (tensor).

tensor shape

   #tensorflow

   the number of elements a [604]tensor contains in various dimensions.
   for example, a [5, 10] tensor has a shape of 5 in one dimension and 10
   in another.

tensor size

   #tensorflow

   the total number of scalars a [605]tensor contains. for example, a [5,
   10] tensor has a size of 50.

test set

   the subset of the dataset that you use to test your [606]model after
   the model has gone through initial vetting by the validation set.

   contrast with [607]training set and [608]validation set.

tf.example

   #tensorflow

   a standard [609]protocol buffer for describing input data for machine
   learning model training or id136.

tf.keras

   #tensorflow

   an implementation of [610]keras integrated into [611]tensorflow.

time series analysis

   a subfield of machine learning and statistics that analyzes
   [612]temporal data. many types of machine learning problems require
   time series analysis, including classification, id91,
   forecasting, and anomaly detection. for example, you could use time
   series analysis to forecast the future sales of winter coats by month
   based on historical sales data.

timestep

   one "unrolled" cell within a [613]recurrent neural network. for
   example, the following figure shows three timesteps (labeled with the
   subscripts t-1, t, and t+1):

   [simple_id56.svg]

tower

   a component of a [614]deep neural network that is itself a deep neural
   network without an output layer. typically, each tower reads from an
   independent data source. towers are independent until their output is
   combined in a final layer.

tpu

   #tensorflow
   #googlecloud

   abbreviation for [615]tensor processing unit.

tpu chip

   #tensorflow
   #googlecloud

   a programmable id202 accelerator whose performance is
   optimized for machine learning workloads, specifically the training
   phase. also known as a shard.

tpu device

   #tensorflow
   #googlecloud

   a board with 4 tpu chips, where each chip has two cores for a total of
   8 cores of ml compute. current tpu device versions are referred to as
   either tpu v2-8 or tpu v3-8. each board is used independently,
   connected to google cloud through normal networking infrastructure. in
   cloud, access to the tpus is instantiated through cloud tpu apis.

tpu master

   #tensorflow
   #googlecloud

   the central coordination process running on a host machine that sends
   and receives data and results, programs, and performance and health
   data to the tpu workers. it also manages the setup and shutdown of
   devices in a tpu configuration.

tpu node

   #tensorflow
   #googlecloud

   one of two independent processors (cores) on a tpu chip.

tpu pod

   #tensorflow
   #googlecloud

   a set quantity of [616]tpu devices, connected to one another through a
   high-speed network. for example, a tpu version 2 pod contains 64
   networked tpu devices. a full tpu version 2 pod is referred to as
   v2-512.

tpu resource

   #tensorflow
   #googlecloud

   an identifier for a tpu instantiation.

tpu slice

   #tensorflow
   #googlecloud

   a supported subset of a [617]tpu pod that a user can specify. for
   example a tpu v2 pod slice could be v2-32 (tpu v2 containing 32 cores)
   up to a full pod of v2-512 (tpu v2 containing 512 cores).

tpu worker

   #tensorflow
   #googlecloud

   a process running on a host machine connected to a tpu that executes
   [618]tensorflow programs on the tpu node.

training

   the process of determining the ideal [619]parameters comprising a
   model.

training set

   the subset of the dataset used to train a model.

   contrast with [620]validation set and [621]test set.

id21

   transferring information from one machine learning task to another. for
   example, in id72, a single model solves multiple tasks,
   such as a [622]deep model that has different output nodes for different
   tasks. id21 might involve transferring knowledge from the
   solution of a simpler task to a more complex one, or involve
   transferring knowledge from a task where there is more data to one
   where there is less data.

   most machine learning systems solve a single task. id21 is
   a baby step towards artificial intelligence in which a single program
   can solve multiple tasks.

translational invariance

   in an image classification problem, an algorithm's ability to
   successfully classify images even when the position of objects within
   the image changes. for example, the algorithm can still identify a dog,
   whether it is in the center of the frame or at the left end of the
   frame.

   see also [623]size invariance and [624]rotational invariance.

trigram

   an [625]id165 in which n=3.

true negative (tn)

   an example in which the model correctly predicted the [626]negative
   class. for example, the model inferred that a particular email message
   was not spam, and that email message really was not spam.

true positive (tp)

   an example in which the model correctly predicted the [627]positive
   class. for example, the model inferred that a particular email message
   was spam, and that email message really was spam.

true positive rate (tpr)

   synonym for [628]recall. that is:
   $$\text{true positive rate} = \frac{\text{true positives}} {\text{true
   positives} + \text{false negatives}}$$

   true positive rate is the y-axis in an [629]roc curve.

u

underfitting

   producing a model with poor predictive ability because the model hasn't
   captured the complexity of the training data. many problems can cause
   underfitting, including:
     * training on the wrong set of features.
     * training for too few epochs or at too low a learning rate.
     * training with too high a id173 rate.
     * providing too few hidden layers in a deep neural network.

unlabeled example

   an example that contains [630]features but no [631]label. unlabeled
   examples are the input to [632]id136. in [633]semi-supervised and
   [634]unsupervised learning, unlabeled examples are used during
   training.

unsupervised machine learning

   training a [635]model to find patterns in a dataset, typically an
   unlabeled dataset.

   the most common use of unsupervised machine learning is to cluster data
   into groups of similar examples. for example, an unsupervised machine
   learning algorithm can cluster songs together based on various
   properties of the music. the resulting clusters can become an input to
   other machine learning algorithms (for example, to a music
   recommendation service). id91 can be helpful in domains where
   true labels are hard to obtain. for example, in domains such as
   anti-abuse and fraud, clusters can help humans better understand the
   data.

   another example of unsupervised machine learning is [636]principal
   component analysis (pca). for example, applying pca on a dataset
   containing the contents of millions of shopping carts might reveal that
   shopping carts containing lemons frequently also contain antacids.

   compare with [637]supervised machine learning.

upweighting

   applying a weight to the [638]downsampled class equal to the factor by
   which you downsampled.

user matrix

   in [639]id126s, an [640]embedding generated by
   [641]id105 that holds latent signals about user
   preferences. each row of the user matrix holds information about the
   relative strength of various latent signals for a single user. for
   example, consider a movie id126. in this system, the
   latent signals in the user matrix might represent each user's interest
   in particular genres, or might be harder-to-interpret signals that
   involve complex interactions across multiple factors.

   the user matrix has a column for each latent feature and a row for each
   user. that is, the user matrix has the same number of rows as the
   target matrix that is being factorized. for example, given a movie
   id126 for 1,000,000 users, the user matrix will have
   1,000,000 rows.

v

validation

   a process used, as part of [642]training, to evaluate the quality of a
   [643]machine learning model using the [644]validation set. because the
   validation set is disjoint from the training set, validation helps
   ensure that the model   s performance generalizes beyond the training
   set.

   contrast with [645]test set.

validation set

   a subset of the dataset   disjoint from the training set   used in
   [646]validation.

   contrast with [647]training set and [648]test set.

vanishing gradient problem

   the tendency for the gradients of early [649]hidden layers of some
   [650]deep neural networks to become surprisingly flat (low).
   increasingly lower gradients result in increasingly smaller changes to
   the weights on nodes in a deep neural network, leading to little or no
   learning. models suffering from the vanishing gradient problem become
   difficult or impossible to train. [651]long short-term memory cells
   address this issue.

   compare to [652]exploding gradient problem.

w

wasserstein loss

   one of the id168s commonly used in [653]generative adversarial
   networks, based on the [654]earth-mover's distance between the
   distribution of generated data and real data.

   wasserstein loss is the default id168 in [655]tf-gan.

weight

   a coefficient for a [656]feature in a linear model, or an edge in a
   deep network. the goal of training a linear model is to determine the
   ideal weight for each feature. if a weight is 0, then its corresponding
   feature does not contribute to the model.

weighted alternating least squares (wals)

   an algorithm for minimizing the objective function during [657]matrix
   factorization in [658]id126s, which allows a
   downweighting of the missing examples. wals minimizes the weighted
   squared error between the original matrix and the reconstruction by
   alternating between fixing the row factorization and column
   factorization. each of these optimizations can be solved by least
   squares [659]id76. for details, see the
   [660]id126s course

wide model

   a linear model that typically has many [661]sparse input features. we
   refer to it as "wide" since such a model is a special type of
   [662]neural network with a large number of inputs that connect directly
   to the output node. wide models are often easier to debug and inspect
   than deep models. although wide models cannot express nonlinearities
   through [663]hidden layers, they can use transformations such as
   [664]feature crossing and [665]bucketization to model nonlinearities in
   different ways.

   contrast with [666]deep model.

width

   the number of [667]neurons in a particular [668]layer of a [669]neural
   network.

   except as otherwise noted, the content of this page is licensed under
   the [670]creative commons attribution 3.0 license, and code samples are
   licensed under the [671]apache 2.0 license. for details, see our
   [672]site policies. java is a registered trademark of oracle and/or its
   affiliates.

   last updated january 22, 2019.

     * connect
          + [673]blog
          + [674]facebook
          + [675]medium
          + [676]twitter
          + [677]youtube
     * programs
          + [678]women techmakers
          + [679]agency program
          + [680]gdg
          + [681]google developers experts
          + [682]startup launchpad
          + [683]user studies
     * developer consoles
          + [684]google api console
          + [685]google cloud platform console
          + [686]google play console
          + [687]firebase console
          + [688]actions on google console
          + [689]cast sdk developer console
          + [690]chrome web store dashboard
     * [691]google developers
          + [692]android
          + [693]chrome
          + [694]firebase
          + [695]google cloud platform
          + [696]all products

   [english___________________]
   [697]terms [698]privacy

   sign up for the google developers newsletter
   [699]subscribe

send feedback about...

   this page
   documentation feedback
   [google_56px.svg]
   machine learning glossary
   product feedback
   (button) cancel

references

   visible links
   1. https://developers.google.com/machine-learning/glossary/?hl=es-419
   2. https://developers.google.com/machine-learning/glossary/?hl=fr
   3. https://developers.google.com/machine-learning/glossary/?hl=ko
   4. https://developers.google.com/machine-learning/glossary/?hl=zh-cn
   5. https://developers.google.com/machine-learning/glossary/
   6. https://developers.google.cn/machine-learning/glossary/?hl=es-419
   7. https://developers.google.cn/machine-learning/glossary/?hl=fr
   8. https://developers.google.cn/machine-learning/glossary/?hl=ko
   9. https://developers.google.cn/machine-learning/glossary/?hl=zh-cn
  10. https://developers.google.cn/machine-learning/glossary/
  11. https://developers.google.com/machine-learning/glossary/
  12. https://developers.google.com/s/opensearch.xml
  13. https://developers.google.com/machine-learning/
  14. https://developers.google.com/machine-learning/crash-course/
  15. https://developers.google.com/machine-learning/practica
  16. https://developers.google.com/machine-learning/guides
  17. https://developers.google.com/machine-learning/glossary
  18. https://accounts.google.com/servicelogin?passive=true&continue=https://developers.google.com/machine-learning/glossary/?refresh=1&service=ahsid
  19. https://developers.google.com/machine-learning/glossary/
  20. https://developers.google.com/machine-learning/crash-course/?nav=true
  21. https://developers.google.com/machine-learning/practica?nav=true
  22. https://developers.google.com/machine-learning/guides?nav=true
  23. https://developers.google.com/machine-learning/glossary
  24. https://developers.google.com/products/
  25. https://developers.google.com/products/
  26. https://developers.google.com/machine-learning/
  27. https://developers.google.com/machine-learning/glossary/
  28. https://developers.google.com/machine-learning/glossary
  29. https://developers.google.com/machine-learning/glossary/#classification_model
  30. https://developers.google.com/machine-learning/glossary/#multi-class
  31. https://developers.google.com/machine-learning/glossary/#binary_classification
  32. https://developers.google.com/machine-learning/glossary/#tp
  33. https://developers.google.com/machine-learning/glossary/#tn
  34. https://developers.google.com/machine-learning/glossary/#relu
  35. https://developers.google.com/machine-learning/glossary/#sigmoid_function
  36. https://developers.google.com/machine-learning/glossary/#learning_rate
  37. http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf
  38. https://developers.google.com/machine-learning/glossary/#hierarchical_id91
  39. https://developers.google.com/machine-learning/glossary/#classification_threshold
  40. https://developers.google.com/machine-learning/glossary/#roc
  41. https://developers.google.com/machine-learning/glossary/#gradient_descent
  42. https://developers.google.com/machine-learning/glossary/#neural_network
  43. https://wikipedia.org/wiki/partial_derivative
  44. https://developers.google.com/machine-learning/glossary/#model
  45. https://developers.google.com/machine-learning/glossary/#logistic_regression
  46. https://developers.google.com/machine-learning/glossary/#deep_model
  47. https://developers.google.com/machine-learning/glossary/#iteration
  48. https://developers.google.com/machine-learning/glossary/#gradient
  49. https://developers.google.com/machine-learning/glossary/#model_training
  50. https://developers.google.com/machine-learning/glossary/#batch_size
  51. https://developers.google.com/machine-learning/glossary/#id172
  52. https://developers.google.com/machine-learning/glossary/#activation_function
  53. https://developers.google.com/machine-learning/glossary/#hidden_layer
  54. https://developers.google.com/machine-learning/glossary/#batch
  55. https://developers.google.com/machine-learning/glossary/#sgd
  56. https://developers.google.com/machine-learning/glossary/#mini-batch
  57. https://developers.google.com/machine-learning/glossary/#neural_network
  58. https://betterexplained.com/articles/an-intuitive-and-short-explanation-of-bayes-theorem/
  59. https://developers.google.com/machine-learning/glossary/#overfitting
  60. https://developers.google.com/machine-learning/glossary/#automation_bias
  61. https://developers.google.com/machine-learning/glossary/#confirmation_bias
  62. https://developers.google.com/machine-learning/glossary/#confirmation_bias
  63. https://developers.google.com/machine-learning/glossary/#group_attribution_bias
  64. https://developers.google.com/machine-learning/glossary/#implicit_bias
  65. https://developers.google.com/machine-learning/glossary/#in-group_bias
  66. https://developers.google.com/machine-learning/glossary/#out-group_homogeneity_bias
  67. https://developers.google.com/machine-learning/glossary/#selection_bias
  68. https://developers.google.com/machine-learning/glossary/#selection_bias
  69. https://developers.google.com/machine-learning/glossary/#participation_bias
  70. https://developers.google.com/machine-learning/glossary/#reporting_bias
  71. https://developers.google.com/machine-learning/glossary/#selection_bias
  72. https://developers.google.com/machine-learning/glossary/#selection_bias
  73. https://developers.google.com/machine-learning/glossary/#bias
  74. https://developers.google.com/machine-learning/glossary/#prediction_bias
  75. https://developers.google.com/machine-learning/glossary/#bias_ethics
  76. https://developers.google.com/machine-learning/glossary/#prediction_bias
  77. https://developers.google.com/machine-learning/glossary/#id165
  78. https://developers.google.com/machine-learning/glossary/#bucketing
  79. https://developers.google.com/machine-learning/glossary/#upweighting
  80. https://developers.google.com/machine-learning/glossary/#dimensions
  81. https://docs.scipy.org/doc/numpy-1.15.0/user/basics.broadcasting.html
  82. https://developers.google.com/machine-learning/glossary/#continuous_feature
  83. https://developers.google.com/machine-learning/glossary/#prediction_bias
  84. https://developers.google.com/machine-learning/glossary/#scoring
  85. https://developers.google.com/machine-learning/glossary/#re-ranking
  86. https://developers.google.com/machine-learning/glossary/#softmax
  87. https://developers.google.com/machine-learning/glossary/#negative_class
  88. https://developers.google.com/machine-learning/glossary/#positive_class
  89. https://developers.google.com/machine-learning/glossary/#feature
  90. https://developers.google.com/machine-learning/glossary/#discrete_feature
  91. https://developers.google.com/machine-learning/glossary/#numerical_data
  92. https://developers.google.com/machine-learning/glossary/#id116
  93. https://developers.google.com/machine-learning/glossary/#k-median
  94. https://developers.google.com/machine-learning/glossary/#id91
  95. https://developers.google.com/machine-learning/glossary/#id116
  96. https://developers.google.com/machine-learning/glossary/#hierarchical_id91
  97. https://developers.google.com/machine-learning/glossary/#weight
  98. https://developers.google.com/machine-learning/glossary/#graph
  99. https://developers.google.com/machine-learning/glossary/#binary_classification
 100. https://developers.google.com/machine-learning/glossary/#multi_class_classification
 101. https://developers.google.com/machine-learning/glossary/#regression_model
 102. https://developers.google.com/machine-learning/glossary/#positive_class
 103. https://developers.google.com/machine-learning/glossary/#negative_class
 104. https://developers.google.com/machine-learning/glossary/#logistic_regression
 105. https://developers.google.com/machine-learning/glossary/#binary_classification
 106. https://developers.google.com/machine-learning/glossary/#binary_classification
 107. https://developers.google.com/machine-learning/glossary/#label
 108. https://developers.google.com/machine-learning/glossary/#outliers
 109. https://developers.google.com/machine-learning/glossary/#example
 110. https://developers.google.com/machine-learning/glossary/#unsupervised_machine_learning
 111. https://developers.google.com/machine-learning/glossary/#id116
 112. https://developers.google.com/machine-learning/glossary/#centroid
 113. https://developers.google.com/machine-learning/glossary/#neuron
 114. https://developers.google.com/machine-learning/glossary/#dropout_id173
 115. https://developers.google.com/machine-learning/glossary/#implicit_bias
 116. https://developers.google.com/machine-learning/glossary/#classification_model
 117. https://developers.google.com/machine-learning/glossary/#binary_classification
 118. https://developers.google.com/machine-learning/glossary/#precision
 119. https://developers.google.com/machine-learning/glossary/#recall
 120. https://developers.google.com/machine-learning/glossary/#discrete_feature
 121. https://developers.google.com/machine-learning/glossary/#loss
 122. https://developers.google.com/machine-learning/glossary/#early_stopping
 123. https://web.stanford.edu/~boyd/cvxbook/bv_cvxbook.pdf
 124. https://developers.google.com/machine-learning/glossary/#convex_set
 125. https://developers.google.com/machine-learning/glossary/#loss_functions
 126. https://developers.google.com/machine-learning/glossary/#l2_loss
 127. https://developers.google.com/machine-learning/glossary/#log_loss
 128. https://developers.google.com/machine-learning/glossary/#l1_id173
 129. https://developers.google.com/machine-learning/glossary/#l2_id173
 130. https://developers.google.com/machine-learning/glossary/#gradient_descent
 131. https://developers.google.com/machine-learning/glossary/#sgd
 132. https://developers.google.com/machine-learning/glossary/#deep_model
 133. https://developers.google.com/machine-learning/glossary/#convex_optimization
 134. https://developers.google.com/machine-learning/glossary/#gradient_descent
 135. https://developers.google.com/machine-learning/glossary/#convex_function
 136. https://web.stanford.edu/~boyd/cvxbook/bv_cvxbook.pdf
 137. https://developers.google.com/machine-learning/glossary/#convolutional_operation
 138. https://developers.google.com/machine-learning/glossary/#convolutional_layer
 139. https://developers.google.com/machine-learning/glossary/#convolutional_filter
 140. https://developers.google.com/machine-learning/glossary/#convolutional_operation
 141. https://developers.google.com/machine-learning/glossary/#rank
 142. https://developers.google.com/machine-learning/glossary/#convolutional_filter
 143. https://developers.google.com/machine-learning/glossary/#convolutional_filter
 144. https://developers.google.com/machine-learning/glossary/#convolutional_layer
 145. https://developers.google.com/machine-learning/glossary/#convolutional_filter
 146. https://developers.google.com/machine-learning/glossary/#convolutional_layer
 147. https://developers.google.com/machine-learning/glossary/#loss
 148. https://developers.google.com/machine-learning/glossary/#selection_bias
 149. https://developers.google.com/machine-learning/glossary/#natural_language_understanding
 150. https://developers.google.com/machine-learning/glossary/#log_loss
 151. https://developers.google.com/machine-learning/glossary/#multi-class
 152. https://developers.google.com/machine-learning/glossary/#perplexity
 153. https://developers.google.com/machine-learning/glossary/#estimators
 154. https://www.tensorflow.org/guide/custom_estimators
 155. https://developers.google.com/machine-learning/glossary/#premade_estimator
 156. https://developers.google.com/machine-learning/glossary/#pandas
 157. https://developers.google.com/machine-learning/glossary/#example
 158. https://developers.google.com/machine-learning/glossary/#tensor
 159. https://www.tensorflow.org/programmers_guide/datasets
 160. https://developers.google.com/machine-learning/glossary/#binary_classification
 161. https://developers.google.com/machine-learning/glossary/#multi-class
 162. https://developers.google.com/machine-learning/glossary/#classification_threshold
 163. https://developers.google.com/machine-learning/glossary/#neural_network
 164. https://developers.google.com/machine-learning/glossary/#hidden_layer
 165. https://developers.google.com/machine-learning/glossary/#wide_model
 166. https://developers.google.com/machine-learning/glossary/#deep_model
 167. https://developers.google.com/machine-learning/glossary/#feature
 168. https://developers.google.com/machine-learning/glossary/#tensor
 169. https://developers.google.com/machine-learning/glossary/#sparse_features
 170. https://developers.google.com/machine-learning/glossary/#fully_connected_layer
 171. https://developers.google.com/machine-learning/glossary/#layer
 172. https://developers.google.com/machine-learning/glossary/#embeddings
 173. https://developers.google.com/machine-learning/glossary/#neural_network
 174. https://developers.google.com/machine-learning/glossary/#hidden_layer
 175. https://developers.google.com/machine-learning/glossary/#convolutional_neural_network
 176. https://github.com/tensorflow/tpu/tree/master/models/experimental/inception
 177. https://arxiv.org/pdf/1610.02357.pdf
 178. https://developers.google.com/machine-learning/glossary/#tpu
 179. https://developers.google.com/machine-learning/glossary/#embeddings
 180. https://developers.google.com/machine-learning/glossary/#tensor
 181. https://developers.google.com/machine-learning/glossary/#feature_vector
 182. https://developers.google.com/machine-learning/glossary/#embeddings
 183. https://developers.google.com/machine-learning/glossary/#feature
 184. https://developers.google.com/machine-learning/glossary/#continuous_feature
 185. https://developers.google.com/machine-learning/glossary/#model
 186. https://developers.google.com/machine-learning/glossary/#generative_model
 187. https://developers.google.com/machine-learning/glossary/#generative_adversarial_network
 188. https://developers.google.com/machine-learning/glossary/#generator
 189. https://developers.google.com/machine-learning/glossary/#hierarchical_id91
 190. https://developers.google.com/machine-learning/glossary/#class_imbalanced_data_set
 191. https://developers.google.com/machine-learning/glossary/#majority_class
 192. https://developers.google.com/machine-learning/glossary/#minority_class
 193. https://developers.google.com/machine-learning/glossary/#id173
 194. https://developers.google.com/machine-learning/glossary/#neural_network
 195. http://jmlr.org/papers/volume15/srivastava14a.old/srivastava14a.pdf
 196. https://developers.google.com/machine-learning/glossary/#model
 197. https://developers.google.com/machine-learning/glossary/#operation
 198. https://developers.google.com/machine-learning/glossary/#graph_execution
 199. https://wikipedia.org/wiki/imperative_programming
 200. https://developers.google.com/machine-learning/glossary/#id173
 201. https://developers.google.com/machine-learning/glossary/#validation_set
 202. https://developers.google.com/machine-learning/glossary/#generalization
 203. https://developers.google.com/machine-learning/glossary/#sparse_features
 204. https://developers.google.com/machine-learning/glossary/#dense_feature
 205. https://developers.google.com/machine-learning/glossary/#id26
 206. https://developers.google.com/machine-learning/glossary/#loss
 207. https://developers.google.com/machine-learning/glossary/#neural_network
 208. https://wikipedia.org/wiki/dot_product
 209. https://developers.google.com/machine-learning/glossary/#srm
 210. https://developers.google.com/machine-learning/glossary/#model
 211. https://developers.google.com/machine-learning/glossary/#hyperparameter
 212. https://www.tensorflow.org/tutorials/wide_and_deep
 213. https://developers.google.com/machine-learning/glossary/#batch_size
 214. https://developers.google.com/machine-learning/glossary/#iteration
 215. https://developers.google.com/machine-learning/glossary/#custom_estimator
 216. https://www.tensorflow.org/extend/estimators
 217. https://developers.google.com/machine-learning/glossary/#premade_estimator
 218. https://developers.google.com/machine-learning/glossary/#feature
 219. https://developers.google.com/machine-learning/glossary/#label
 220. https://developers.google.com/machine-learning/glossary/#labeled_example
 221. https://developers.google.com/machine-learning/glossary/#unlabeled_example
 222. https://developers.google.com/machine-learning/glossary/#confirmation_bias
 223. https://developers.google.com/machine-learning/glossary/#gradients
 224. https://developers.google.com/machine-learning/glossary/#deep_neural_network
 225. https://developers.google.com/machine-learning/glossary/#recurrent_neural_network
 226. https://developers.google.com/machine-learning/glossary/#gradient_clipping
 227. https://developers.google.com/machine-learning/glossary/#vanishing_gradient_problem
 228. https://developers.google.com/machine-learning/glossary/#negative_class
 229. https://developers.google.com/machine-learning/glossary/#positive_class
 230. https://developers.google.com/machine-learning/glossary/#roc
 231. https://developers.google.com/machine-learning/glossary/#prediction
 232. https://developers.google.com/machine-learning/glossary/#estimators
 233. https://www.tensorflow.org/guide/feature_columns
 234. https://wikipedia.org/wiki/vowpal_wabbit
 235. https://www.csie.ntu.edu.tw/~cjlin/libffm/
 236. https://developers.google.com/machine-learning/glossary/#synthetic_feature
 237. https://wikipedia.org/wiki/cartesian_product
 238. https://developers.google.com/machine-learning/glossary/#categorical_data
 239. https://developers.google.com/machine-learning/glossary/#continuous_feature
 240. https://developers.google.com/machine-learning/glossary/#bucketing
 241. https://developers.google.com/machine-learning/glossary/#feature
 242. https://developers.google.com/machine-learning/glossary/#tf.example
 243. https://github.com/tensorflow/transform
 244. https://developers.google.com/machine-learning/glossary/#unsupervised_machine_learning
 245. https://developers.google.com/machine-learning/glossary/#hidden_layer
 246. https://developers.google.com/machine-learning/glossary/#neural_network
 247. https://developers.google.com/machine-learning/glossary/#feature_engineering
 248. https://developers.google.com/machine-learning/glossary/#feature
 249. https://developers.google.com/machine-learning/glossary/#feature
 250. https://developers.google.com/machine-learning/glossary/#tf.example
 251. https://developers.google.com/machine-learning/glossary/#estimators
 252. https://developers.google.com/machine-learning/glossary/#feature_columns
 253. https://developers.google.com/machine-learning/glossary/#example
 254. https://developers.google.com/machine-learning/glossary/#deep_neural_network
 255. https://developers.google.com/machine-learning/glossary/#recurrent_neural_network
 256. https://developers.google.com/machine-learning/glossary/#one-shot_learning
 257. https://developers.google.com/machine-learning/glossary/#model
 258. https://developers.google.com/machine-learning/glossary/#unsupervised_machine_learning
 259. https://developers.google.com/machine-learning/glossary/#supervised_machine_learning
 260. https://developers.google.com/machine-learning/glossary/#long_short-term_memory
 261. https://developers.google.com/machine-learning/glossary/#softmax
 262. https://developers.google.com/machine-learning/glossary/#candidate_sampling
 263. https://developers.google.com/machine-learning/glossary/#hidden_layer
 264. https://developers.google.com/machine-learning/glossary/#node
 265. https://developers.google.com/machine-learning/glossary/#dense_layer
 266. https://developers.google.com/machine-learning/glossary/#generative_adversarial_network
 267. https://developers.google.com/machine-learning/glossary/#loss_curve
 268. https://developers.google.com/machine-learning/glossary/#training_set
 269. https://developers.google.com/machine-learning/glossary/#validation_set
 270. https://developers.google.com/machine-learning/glossary/#overfitting
 271. https://developers.google.com/machine-learning/glossary/#least_squares_regression
 272. https://wikipedia.org/wiki/gaussian_noise
 273. https://wikipedia.org/wiki/shot_noise
 274. https://developers.google.com/machine-learning/glossary/#logistic_regression
 275. https://developers.google.com/machine-learning/glossary/#convex_optimization
 276. https://developers.google.com/machine-learning/glossary/#generator
 277. https://developers.google.com/machine-learning/glossary/#discriminator
 278. https://developers.google.com/machine-learning/glossary/#generator
 279. https://developers.google.com/machine-learning/glossary/#generative_adversarial_network
 280. https://developers.google.com/machine-learning/glossary/#discriminative_models
 281. https://developers.google.com/machine-learning/glossary/#generative_adversarial_network
 282. https://developers.google.com/machine-learning/glossary/#example
 283. https://developers.google.com/machine-learning/glossary/#discriminative_model
 284. https://developers.google.com/machine-learning/glossary/#partial_derivative
 285. https://developers.google.com/machine-learning/glossary/#exploding_gradient_problem
 286. https://developers.google.com/machine-learning/glossary/#gradient_descent
 287. https://developers.google.com/machine-learning/glossary/#loss
 288. https://developers.google.com/machine-learning/glossary/#weight
 289. https://developers.google.com/machine-learning/glossary/#tensor
 290. https://developers.google.com/machine-learning/glossary/#tensorboard
 291. https://developers.google.com/machine-learning/glossary/#graph
 292. https://developers.google.com/machine-learning/glossary/#eager_execution
 293. https://developers.google.com/machine-learning/glossary/#rater
 294. https://developers.google.com/machine-learning/glossary/#convenience_sampling
 295. https://developers.google.com/machine-learning/glossary/#out-group_homogeneity_bias
 296. https://developers.google.com/machine-learning/glossary/#in-group_bias
 297. https://developers.google.com/machine-learning/glossary/#categorical_data
 298. https://www.tensorflow.org/guide/feature_columns
 299. https://developers.google.com/machine-learning/glossary/#neural_network
 300. https://developers.google.com/machine-learning/glossary/#input_layer
 301. https://developers.google.com/machine-learning/glossary/#output_layer
 302. https://developers.google.com/machine-learning/glossary/#activation_function
 303. https://developers.google.com/machine-learning/glossary/#relu
 304. https://developers.google.com/machine-learning/glossary/#deep_neural_network
 305. https://developers.google.com/machine-learning/glossary/#id91
 306. https://developers.google.com/machine-learning/glossary/#centroid_based_id91
 307. https://developers.google.com/machine-learning/glossary/#loss
 308. https://developers.google.com/machine-learning/glossary/#classification_model
 309. https://developers.google.com/machine-learning/glossary/#decision_boundary
 310. https://developers.google.com/machine-learning/glossary/#kid166s
 311. https://developers.google.com/machine-learning/glossary/#example
 312. https://developers.google.com/machine-learning/glossary/#validation_set
 313. https://developers.google.com/machine-learning/glossary/#test_set
 314. https://developers.google.com/machine-learning/glossary/#learning_rate
 315. https://developers.google.com/machine-learning/glossary/#parameter
 316. https://developers.google.com/machine-learning/glossary/#kid166s
 317. https://developers.google.com/machine-learning/glossary/#iid
 318. https://developers.google.com/machine-learning/practica/image-classification/
 319. https://developers.google.com/machine-learning/glossary/#class_imbalanced_data_set
 320. https://developers.google.com/machine-learning/glossary/#confirmation_bias
 321. https://wikipedia.org/wiki/ideal_gas
 322. https://developers.google.com/machine-learning/glossary/#unlabeled_example
 323. https://wikipedia.org/wiki/statistical_id136
 324. https://developers.google.com/machine-learning/glossary/#group_attribution_bias
 325. https://developers.google.com/machine-learning/glossary/#out-group_homogeneity_bias
 326. https://developers.google.com/machine-learning/glossary/#estimators
 327. https://developers.google.com/machine-learning/glossary/#batch
 328. https://developers.google.com/machine-learning/glossary/#training_set
 329. https://developers.google.com/machine-learning/glossary/#neural_network
 330. https://developers.google.com/machine-learning/glossary/#example
 331. https://developers.google.com/machine-learning/glossary/#wide_model
 332. https://wikipedia.org/wiki/cohen's_kappa
 333. https://developers.google.com/machine-learning/glossary/#recommendation_systems
 334. https://developers.google.com/machine-learning/glossary/#embeddings
 335. https://developers.google.com/machine-learning/glossary/#matrix_factorization
 336. https://developers.google.com/machine-learning/glossary/#items
 337. https://developers.google.com/machine-learning/glossary/#recommendation_system
 338. https://developers.google.com/machine-learning/glossary/#batch
 339. https://keras.io/
 340. https://www.tensorflow.org/api_docs/python/tf/keras
 341. https://developers.google.com/machine-learning/glossary/#positive_class
 342. https://developers.google.com/machine-learning/glossary/#negative_class
 343. https://developers.google.com/machine-learning/glossary/#hinge-loss
 344. https://developers.google.com/machine-learning/glossary/#id91
 345. https://developers.google.com/machine-learning/glossary/#centroid
 346. https://developers.google.com/machine-learning/glossary/#id116
 347. https://wikipedia.org/wiki/euclidean_distance
 348. https://wikipedia.org/wiki/taxicab_geometry
 349. https://developers.google.com/machine-learning/glossary/#loss
 350. https://developers.google.com/machine-learning/glossary/#label
 351. https://developers.google.com/machine-learning/glossary/#squared_loss
 352. https://developers.google.com/machine-learning/glossary/#id173
 353. https://developers.google.com/machine-learning/glossary/#sparse_features
 354. https://developers.google.com/machine-learning/glossary/#l2_id173
 355. https://developers.google.com/machine-learning/glossary/#squared_loss
 356. https://developers.google.com/machine-learning/glossary/#id173
 357. https://developers.google.com/machine-learning/glossary/#l1_id173
 358. https://developers.google.com/machine-learning/glossary/#example
 359. https://developers.google.com/machine-learning/glossary/#feature
 360. https://developers.google.com/machine-learning/glossary/#label
 361. https://developers.google.com/machine-learning/glossary/#id173_rate
 362. https://developers.google.com/machine-learning/glossary/#id173
 363. https://developers.google.com/machine-learning/glossary/#neuron
 364. https://developers.google.com/machine-learning/glossary/#neural_network
 365. https://developers.google.com/machine-learning/glossary/#tensor
 366. https://developers.google.com/machine-learning/glossary/#estimators
 367. https://developers.google.com/machine-learning/glossary/#model_function
 368. https://developers.google.com/machine-learning/glossary/#deep_model
 369. https://developers.google.com/machine-learning/glossary/#layer
 370. https://developers.google.com/machine-learning/glossary/#fully_connected_layer
 371. https://developers.google.com/machine-learning/glossary/#custom_estimator
 372. https://developers.google.com/machine-learning/glossary/#hidden_layers
 373. https://developers.google.com/machine-learning/glossary/#keras
 374. https://developers.google.com/machine-learning/glossary/#gradient_descent
 375. https://developers.google.com/machine-learning/glossary/#hyperparameter
 376. https://developers.google.com/machine-learning/glossary/#l2_loss
 377. https://developers.google.com/machine-learning/glossary/#regression_model
 378. https://developers.google.com/machine-learning/glossary/#sigmoid_function
 379. https://developers.google.com/machine-learning/glossary/#binary_classification
 380. https://developers.google.com/machine-learning/glossary/#multi-class
 381. https://www.tensorflow.org/api_docs/python/tf/nn/softmax_cross_id178_with_logits_v2
 382. https://developers.google.com/machine-learning/glossary/#sigmoid_function
 383. https://www.tensorflow.org/api_docs/python/tf/nn/sigmoid_cross_id178_with_logits
 384. https://developers.google.com/machine-learning/glossary/#loss
 385. https://developers.google.com/machine-learning/glossary/#logistic_regression
 386. https://developers.google.com/machine-learning/glossary/#sigmoid_function
 387. https://developers.google.com/machine-learning/glossary/#recurrent_neural_network
 388. https://developers.google.com/machine-learning/glossary/#vanishing_gradient_problem
 389. https://developers.google.com/machine-learning/glossary/#prediction
 390. https://developers.google.com/machine-learning/glossary/#label
 391. https://developers.google.com/machine-learning/glossary/#mse
 392. https://developers.google.com/machine-learning/glossary/#log_loss
 393. https://developers.google.com/machine-learning/glossary/#loss
 394. https://developers.google.com/machine-learning/glossary/#iteration
 395. https://developers.google.com/machine-learning/glossary/#convergence
 396. https://developers.google.com/machine-learning/glossary/#overfitting
 397. https://developers.google.com/machine-learning/glossary/#underfitting
 398. https://developers.google.com/machine-learning/glossary/#gradient_descent
 399. https://developers.google.com/machine-learning/glossary/#long_short-term_memory
 400. https://developers.google.com/machine-learning/glossary/#class_imbalanced_data_set
 401. https://matplotlib.org/
 402. https://developers.google.com/machine-learning/glossary/#recommendation_system
 403. https://developers.google.com/machine-learning/glossary/#items
 404. https://developers.google.com/machine-learning/glossary/#user_matrix
 405. https://developers.google.com/machine-learning/glossary/#item_matrix
 406. https://developers.google.com/machine-learning/glossary/#squared_loss
 407. https://developers.google.com/machine-learning/glossary/#example
 408. https://developers.google.com/machine-learning/glossary/#tensorflow_playground
 409. https://developers.google.com/machine-learning/glossary/#objective
 410. https://developers.google.com/machine-learning/glossary/#custom_estimator
 411. https://developers.google.com/machine-learning/glossary/#example
 412. https://developers.google.com/machine-learning/glossary/#batch_size
 413. https://developers.google.com/machine-learning/glossary/#gradient_descent
 414. https://developers.google.com/machine-learning/glossary/#mini-batch
 415. https://developers.google.com/machine-learning/glossary/#sgd
 416. https://developers.google.com/machine-learning/glossary/#generative_adversarial_network
 417. https://developers.google.com/machine-learning/glossary/#cross-id178
 418. https://arxiv.org/pdf/1406.2661.pdf
 419. https://developers.google.com/machine-learning/glossary/#class_imbalanced_data_set
 420. https://developers.google.com/machine-learning/glossary/#machine_learning
 421. http://yann.lecun.com/exdb/mnist/
 422. https://developers.google.com/machine-learning/glossary/#tensorflow
 423. https://developers.google.com/machine-learning/glossary/#model_training
 424. https://wikipedia.org/wiki/vc_dimension
 425. https://developers.google.com/machine-learning/glossary/#estimators
 426. https://developers.google.com/machine-learning/glossary/#optimizer
 427. https://developers.google.com/machine-learning/glossary/#premade_estimator
 428. https://developers.google.com/machine-learning/glossary/#custom_estimator
 429. https://www.tensorflow.org/guide/custom_estimators
 430. https://developers.google.com/machine-learning/glossary/#model
 431. https://developers.google.com/machine-learning/glossary/#binary_classification
 432. https://developers.google.com/machine-learning/glossary/#multi-class
 433. https://wikipedia.org/wiki/nan
 434. https://developers.google.com/machine-learning/glossary/#binary_classification
 435. https://developers.google.com/machine-learning/glossary/#positive_class
 436. https://developers.google.com/machine-learning/glossary/#hidden_layer
 437. https://developers.google.com/machine-learning/glossary/#neuron
 438. https://developers.google.com/machine-learning/glossary/#neural_network
 439. https://developers.google.com/machine-learning/glossary/#activation_function
 440. https://developers.google.com/machine-learning/glossary/#natural_language_understanding
 441. https://developers.google.com/machine-learning/glossary/#bag_of_words
 442. https://developers.google.com/machine-learning/glossary/#natural_language_understanding
 443. https://developers.google.com/machine-learning/glossary/#neuron
 444. https://developers.google.com/machine-learning/glossary/#hidden_layer
 445. https://developers.google.com/machine-learning/glossary/#graph
 446. https://developers.google.com/machine-learning/glossary/#selection_bias
 447. https://developers.google.com/machine-learning/glossary/#scaling
 448. https://developers.google.com/machine-learning/glossary/#feature
 449. https://developers.google.com/machine-learning/glossary/#categorical_data
 450. https://developers.google.com/machine-learning/glossary/#continuous_feature
 451. http://www.numpy.org/
 452. https://developers.google.com/machine-learning/glossary/#pandas
 453. https://developers.google.com/machine-learning/glossary/#linear_regression
 454. https://developers.google.com/machine-learning/glossary/#squared_loss
 455. https://developers.google.com/machine-learning/glossary/#loss
 456. https://developers.google.com/machine-learning/glossary/#prediction
 457. https://developers.google.com/machine-learning/glossary/#online_id136
 458. https://developers.google.com/machine-learning/glossary/#few-shot_learning
 459. https://developers.google.com/machine-learning/glossary/#binary_classification
 460. https://developers.google.com/machine-learning/glossary/#prediction
 461. https://developers.google.com/machine-learning/glossary/#offline_id136
 462. https://developers.google.com/machine-learning/glossary/#tensor
 463. https://developers.google.com/machine-learning/glossary/#gradient_descent
 464. https://www.tensorflow.org/api_docs/python/tf/train/optimizer
 465. https://developers.google.com/machine-learning/glossary/#training_set
 466. https://www.tensorflow.org/api_docs/python/tf/train/momentumoptimizer
 467. https://www.tensorflow.org/api_docs/python/tf/train/adagradoptimizer
 468. https://www.tensorflow.org/api_docs/python/tf/train/adamoptimizer
 469. https://www.tensorflow.org/api_docs/python/tf/train/ftrloptimizer
 470. https://www.tensorflow.org/api_docs/python/tf/train/proximalgradientdescentoptimizer
 471. https://arxiv.org/abs/1606.04474
 472. https://developers.google.com/machine-learning/glossary/#group_attribution_bias
 473. https://developers.google.com/machine-learning/glossary/#in-group_bias
 474. https://developers.google.com/machine-learning/glossary/#weight
 475. https://developers.google.com/machine-learning/glossary/#clipping
 476. https://developers.google.com/machine-learning/glossary/#training_set
 477. http://pandas.pydata.org/
 478. https://developers.google.com/machine-learning/glossary/#weight
 479. https://developers.google.com/machine-learning/glossary/#hyperparameter
 480. https://developers.google.com/machine-learning/glossary/#parameter
 481. https://www.tensorflow.org/guide/extend/architecture
 482. https://developers.google.com/machine-learning/glossary/#parameter
 483. https://developers.google.com/machine-learning/glossary/#gradient_descent
 484. https://developers.google.com/machine-learning/glossary/#selection_bias
 485. https://developers.google.com/machine-learning/glossary/#parameter_server
 486. https://developers.google.com/machine-learning/glossary/#relu
 487. https://developers.google.com/machine-learning/glossary/#sigmoid_function
 488. https://developers.google.com/machine-learning/glossary/#node
 489. https://developers.google.com/machine-learning/glossary/#deep_model
 490. https://developers.google.com/machine-learning/glossary/#id26
 491. https://developers.google.com/machine-learning/glossary/#model
 492. https://developers.google.com/machine-learning/glossary/#model
 493. https://developers.google.com/machine-learning/glossary/#cross-id178
 494. https://developers.google.com/machine-learning/glossary/#convolutional_layer
 495. https://developers.google.com/machine-learning/glossary/#stride
 496. https://developers.google.com/machine-learning/glossary/#translational_invariance
 497. https://developers.google.com/machine-learning/glossary/#binary_classification
 498. https://developers.google.com/machine-learning/glossary/#negative_class
 499. https://developers.google.com/machine-learning/glossary/#classification_model
 500. https://developers.google.com/machine-learning/glossary/#positive_class
 501. https://developers.google.com/machine-learning/glossary/#example
 502. https://developers.google.com/machine-learning/glossary/#prediction
 503. https://developers.google.com/machine-learning/glossary/#label
 504. https://developers.google.com/machine-learning/glossary/#bias
 505. https://developers.google.com/machine-learning/glossary/#bias_ethics
 506. https://developers.google.com/machine-learning/glossary/#estimator
 507. https://www.tensorflow.org/guide/premade_estimators
 508. https://developers.google.com/machine-learning/glossary/#custom_estimator
 509. https://developers.google.com/machine-learning/glossary/#embeddings
 510. https://developers.google.com/machine-learning/glossary/#neural_network
 511. https://developers.google.com/machine-learning/glossary/#l2_id173
 512. https://developers.google.com/machine-learning/glossary/#weight
 513. https://developers.google.com/machine-learning/glossary/#quantile_bucketing
 514. https://developers.google.com/machine-learning/glossary/#bucketing
 515. https://developers.google.com/machine-learning/glossary/#quantile_bucketing
 516. https://developers.google.com/machine-learning/glossary/#feature
 517. https://developers.google.com/machine-learning/glossary/#data_set
 518. https://developers.google.com/machine-learning/glossary/#operation
 519. https://developers.google.com/machine-learning/glossary/#decision_tree
 520. https://developers.google.com/machine-learning/glossary/#tensor
 521. https://developers.google.com/machine-learning/glossary/#rank_ordinality
 522. https://developers.google.com/machine-learning/glossary/#label
 523. https://developers.google.com/machine-learning/glossary/#example
 524. https://developers.google.com/machine-learning/glossary/#classification_model
 525. https://developers.google.com/machine-learning/glossary/#items
 526. https://developers.google.com/machine-learning/glossary/#activation_function
 527. https://developers.google.com/machine-learning/glossary/#neural_network
 528. https://developers.google.com/machine-learning/glossary/#classification_model
 529. https://developers.google.com/machine-learning/glossary/#overfitting
 530. https://developers.google.com/machine-learning/glossary/#l1_id173
 531. https://developers.google.com/machine-learning/glossary/#l2_id173
 532. https://developers.google.com/machine-learning/glossary/#dropout_id173
 533. https://developers.google.com/machine-learning/glossary/#early_stopping
 534. https://developers.google.com/machine-learning/glossary/#loss
 535. https://developers.google.com/machine-learning/glossary/#overfitting
 536. https://developers.google.com/machine-learning/glossary/#accuracy
 537. https://developers.google.com/machine-learning/glossary/#feature
 538. https://developers.google.com/machine-learning/glossary/#recommendation_system
 539. https://developers.google.com/machine-learning/glossary/#scoring
 540. https://developers.google.com/machine-learning/glossary/#l2_id173
 541. https://developers.google.com/machine-learning/glossary/#recurrent_neural_network
 542. https://developers.google.com/machine-learning/glossary/#tp_rate
 543. https://developers.google.com/machine-learning/glossary/#fp_rate
 544. https://developers.google.com/machine-learning/glossary/#classification_threshold
 545. https://developers.google.com/machine-learning/glossary/#auc
 546. https://developers.google.com/machine-learning/glossary/#mse
 547. https://developers.google.com/machine-learning/glossary/#translational_invariance
 548. https://developers.google.com/machine-learning/glossary/#size_invariance
 549. https://developers.google.com/machine-learning/glossary/#selection_bias
 550. https://www.tensorflow.org/guide/saved_model
 551. https://www.tensorflow.org/api_docs/python/tf/train/saver
 552. https://developers.google.com/machine-learning/glossary/#tensor
 553. https://developers.google.com/machine-learning/glossary/#rank
 554. https://developers.google.com/machine-learning/glossary/#feature_engineering
 555. https://developers.google.com/machine-learning/glossary/#id172
 556. http://www.scikit-learn.org/
 557. https://developers.google.com/machine-learning/glossary/#recommendation_system
 558. https://developers.google.com/machine-learning/glossary/#candidate_generation
 559. https://wikipedia.org/wiki/multimodal_distribution
 560. https://developers.google.com/machine-learning/glossary/#natural_language_understanding
 561. https://developers.google.com/machine-learning/glossary/#id136
 562. https://developers.google.com/machine-learning/glossary/#graph
 563. https://developers.google.com/machine-learning/glossary/#dimensions
 564. https://developers.google.com/machine-learning/glossary/#logistic_regression
 565. https://developers.google.com/machine-learning/glossary/#neural_network
 566. https://developers.google.com/machine-learning/glossary/#activation_function
 567. https://developers.google.com/machine-learning/glossary/#id91
 568. https://developers.google.com/machine-learning/glossary/#translational_invariance
 569. https://developers.google.com/machine-learning/glossary/#rotational_invariance
 570. https://developers.google.com/machine-learning/glossary/#unsupervised_machine_learning
 571. https://wikipedia.org/wiki/locality-sensitive_hashing
 572. https://developers.google.com/machine-learning/glossary/#multi-class
 573. https://developers.google.com/machine-learning/glossary/#candidate_sampling
 574. https://developers.google.com/machine-learning/glossary/#feature
 575. https://developers.google.com/machine-learning/glossary/#dense_feature
 576. https://developers.google.com/machine-learning/glossary/#representation
 577. https://developers.google.com/machine-learning/glossary/#sparse_features
 578. https://developers.google.com/machine-learning/glossary/#pooling
 579. https://developers.google.com/machine-learning/glossary/#hinge-loss
 580. https://developers.google.com/machine-learning/glossary/#loss
 581. https://developers.google.com/machine-learning/glossary/#linear_regression
 582. https://developers.google.com/machine-learning/glossary/#example
 583. https://developers.google.com/machine-learning/glossary/#label
 584. https://developers.google.com/machine-learning/glossary/#l1_loss
 585. https://developers.google.com/machine-learning/glossary/#batch
 586. https://developers.google.com/machine-learning/glossary/#learning_rate
 587. https://developers.google.com/machine-learning/glossary/#gradient_descent
 588. http://www.id166s.org/srm/
 589. https://developers.google.com/machine-learning/glossary/#erm
 590. https://developers.google.com/machine-learning/glossary/#pooling
 591. https://developers.google.com/machine-learning/glossary/#step
 592. https://developers.google.com/machine-learning/glossary/#model
 593. https://developers.google.com/machine-learning/glossary/#label
 594. https://developers.google.com/machine-learning/glossary/#unsupervised_machine_learning
 595. https://developers.google.com/machine-learning/glossary/#feature
 596. https://developers.google.com/machine-learning/glossary/#bucketing
 597. https://developers.google.com/machine-learning/glossary/#feature_cross
 598. https://developers.google.com/machine-learning/glossary/#id172
 599. https://developers.google.com/machine-learning/glossary/#scaling
 600. https://developers.google.com/machine-learning/glossary/#label
 601. https://developers.google.com/machine-learning/glossary/#hyperparameter
 602. http://playground.tensorflow.org/
 603. https://developers.google.com/machine-learning/glossary/#rank_tensor
 604. https://developers.google.com/machine-learning/glossary/#tensor
 605. https://developers.google.com/machine-learning/glossary/#tensor
 606. https://developers.google.com/machine-learning/glossary/#model
 607. https://developers.google.com/machine-learning/glossary/#training_set
 608. https://developers.google.com/machine-learning/glossary/#validation_set
 609. https://developers.google.com/protocol-buffers/
 610. https://developers.google.com/machine-learning/glossary/#keras
 611. https://developers.google.com/machine-learning/glossary/#tensorflow
 612. https://developers.google.com/machine-learning/glossary/#temporal_data
 613. https://developers.google.com/machine-learning/glossary/#recurrent_neural_network
 614. https://developers.google.com/machine-learning/glossary/#deep_neural_network
 615. https://developers.google.com/machine-learning/glossary/#tpu
 616. https://developers.google.com/machine-learning/glossary/#tpu_device
 617. https://developers.google.com/machine-learning/glossary/#tpu_pod
 618. https://developers.google.com/machine-learning/glossary/#tensorflow
 619. https://developers.google.com/machine-learning/glossary/#parameter
 620. https://developers.google.com/machine-learning/glossary/#validation_set
 621. https://developers.google.com/machine-learning/glossary/#test_set
 622. https://developers.google.com/machine-learning/glossary/#deep_model
 623. https://developers.google.com/machine-learning/glossary/#size_invariance
 624. https://developers.google.com/machine-learning/glossary/#rotational_invariance
 625. https://developers.google.com/machine-learning/glossary/#id165
 626. https://developers.google.com/machine-learning/glossary/#negative_class
 627. https://developers.google.com/machine-learning/glossary/#positive_class
 628. https://developers.google.com/machine-learning/glossary/#recall
 629. https://developers.google.com/machine-learning/glossary/#roc
 630. https://developers.google.com/machine-learning/glossary/#feature
 631. https://developers.google.com/machine-learning/glossary/#label
 632. https://developers.google.com/machine-learning/glossary/#id136
 633. https://developers.google.com/machine-learning/glossary/#semi-supervised_learning
 634. https://developers.google.com/machine-learning/glossary/#unsupervised_machine_learning
 635. https://developers.google.com/machine-learning/glossary/#model
 636. https://wikipedia.org/wiki/principal_component_analysis
 637. https://developers.google.com/machine-learning/glossary/#supervised_machine_learning
 638. https://developers.google.com/machine-learning/glossary/#downsampling
 639. https://developers.google.com/machine-learning/glossary/#recommendation_systems
 640. https://developers.google.com/machine-learning/glossary/#embeddings
 641. https://developers.google.com/machine-learning/glossary/#matrix_factorization
 642. https://developers.google.com/machine-learning/glossary/#training
 643. https://developers.google.com/machine-learning/glossary/#machine_learning
 644. https://developers.google.com/machine-learning/glossary/#validation_set
 645. https://developers.google.com/machine-learning/glossary/#test_set
 646. https://developers.google.com/machine-learning/glossary/#validation
 647. https://developers.google.com/machine-learning/glossary/#training_set
 648. https://developers.google.com/machine-learning/glossary/#test_set
 649. https://developers.google.com/machine-learning/glossary/#hidden_layer
 650. https://developers.google.com/machine-learning/glossary/#deep_neural_network
 651. https://developers.google.com/machine-learning/glossary/#long_short-term_memory
 652. https://developers.google.com/machine-learning/glossary/#exploding_gradient_problem
 653. https://developers.google.com/machine-learning/glossary/#generative_adversarial_network
 654. https://wikipedia.org/wiki/earth_mover's_distance
 655. https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/gan
 656. https://developers.google.com/machine-learning/glossary/#feature
 657. https://developers.google.com/machine-learning/glossary/#matrix_factorization
 658. https://developers.google.com/machine-learning/glossary/#recommendation_system
 659. https://developers.google.com/machine-learning/glossary/#convex_optimization
 660. https://developers.google.com/machine-learning/recommendation/collaborative/matrix
 661. https://developers.google.com/machine-learning/glossary/#sparse_features
 662. https://developers.google.com/machine-learning/glossary/#neural_network
 663. https://developers.google.com/machine-learning/glossary/#hidden_layer
 664. https://developers.google.com/machine-learning/glossary/#feature_cross
 665. https://developers.google.com/machine-learning/glossary/#bucketing
 666. https://developers.google.com/machine-learning/glossary/#deep_model
 667. https://developers.google.com/machine-learning/glossary/#neuron
 668. https://developers.google.com/machine-learning/glossary/#layer
 669. https://developers.google.com/machine-learning/glossary/#neural_network
 670. https://creativecommons.org/licenses/by/3.0/
 671. https://www.apache.org/licenses/license-2.0
 672. https://developers.google.com/terms/site-policies
 673. https://googledevelopers.blogspot.com/
 674. https://www.facebook.com/google-developers-967415219957038/
 675. https://medium.com/google-developers
 676. https://twitter.com/googledevs
 677. https://www.youtube.com/user/googledevelopers
 678. https://www.womentechmakers.com/
 679. https://developers.google.com/agency/
 680. https://developers.google.com/groups/
 681. https://developers.google.com/experts/
 682. https://developers.google.com/startups/
 683. https://userresearch.google.com/?reserved=0&utm_source=developers.google.com&q_language=en&utm_medium=own_srch&utm_campaign=global-developers&utm_term=0&utm_content=0&producttag=clou&campaigndate=nov18&ptype=devel&referral_code=js564523
 684. https://console.developers.google.com/
 685. https://console.cloud.google.com/
 686. https://play.google.com/apps/publish/
 687. https://console.firebase.google.com/
 688. https://console.actions.google.com/
 689. https://cast.google.com/publish/
 690. https://chrome.google.com/webstore/developer/dashboard
 691. https://developers.google.com/
 692. https://developer.android.com/index.html
 693. https://developer.chrome.com/home
 694. https://firebase.google.com/
 695. https://cloud.google.com/
 696. https://developers.google.com/products/
 697. https://developers.google.com/terms/site-terms
 698. https://policies.google.com/privacy
 699. https://services.google.com/fb/forms/googledevelopersnewsletter/?utm_medium=referral&utm_source=google-products&utm_team=googledevs&utm_campaign=201611-newsletter-launch

   hidden links:
 701. https://developers.google.com/products/
