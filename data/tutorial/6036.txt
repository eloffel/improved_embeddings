   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]become a member[7]sign in[8]get started
     __________________________________________________________________

search millions of documents for thousands of keywords in a flash

   [9]go to the profile of vikash singh
   [10]vikash singh (button) blockedunblock (button) followfollowing
   aug 23, 2017
   [1*6zyd35miasfbybayrvqeeq.jpeg]
   [11]pj accetturo | [12]unsplash

   say you have a document and you want to know if it talks about python
   (a term you care for)
document: i am a python developer.
term: python

   you want to check if the document contains the word python or not. so
   you open the document, press ctr+f and search for    python   . and you
   find it :)

   now say you have 100 such terms: [python, java, github, medium, etc.]

   you will open the document with a simple python code. loop through each
   term, and see if the term is present or not.
open (document)
for each term in terms:
    if term is present in document: print(term)

   now say you have a 100 documents. well you can open each document in a
   loop. per document you search for each term in the document.
for document in documents:
    open (document)
    for each term in terms:
        if term is present in document: print(term)

   now say java should match java but not javascript.
   better yet, java should match j2ee and java both, but not java script.
   (j2ee and java are synonyms, and did you notice the space in java
   script?)

   now it   s getting interesting. how do you do that?

   we ran into this problem last year @[13]belong.co. we noticed that
   people talk about the same terms in multiple ways. big apple could be
   either a big apple or new york. luckily for us, we had some context.
   when our documents talk about python, they 99.99 % of the times mean
   the programming language, not the animal.

   but this didn   t simplify our problem. java and j2ee are the same thing
   for us, but not java script. so how to extract this information from
   millions of documents?

   as you can imagine we wrote a regex based code. for 1 million documents
   and 2k keywords the code took 24 hours to run. and life was good :)
     __________________________________________________________________

   but soon we expanded to multi million documents with 10k+ keywords. and
   the same code was now going to take 10+ days to run. so we set out to
   find a better way.

   i asked around in my office and [14]vinay suggested i should take a
   look at trie dictionary based approach. [15]suresh suggested [16]aho
   corasick algorithm. got similar suggestions on [17]stack overflow.

   turns out, aho corasick algorithm can simultaneously search all
   keywords in one pass over the document. now that is something.

   iframe: [18]/media/ed8557b2eb91f571652debfde49b3285?postid=b39e5d1e126a

   how flashtext works

   i wrote a custom implementation based on trie data structure to suit
   our use case. it worked quite well. the keyword extraction process
   takes 15 mins with this algorithm. down from 10+ days with the regex
   based approach.
input: i love j2ee.
keyword: j2ee=>java # which is basically saying j2ee means java
output: ['java']

   now keyword extraction was working well. so i also added the capability
   to replace keyword with synonyms within the document.
say you want to replace    new delhi    with    ncr region    in a document.
input: i live in new delhi.
output: i live in ncr region.

   we were able to take advantage of this library in multiple projects.
   that   s when we decided to open source it. so here is a link to the
   code :) [19]https://github.com/vi3k6i5/flashtext

   it   s really simple to use: [python code coming up]
$ pip install flashtext
>>> from flashtext.keyword import keywordprocessor
>>> keyword_processor = keywordprocessor()
>>> keyword_processor.add_keyword('j2ee', 'java')
>>> keyword_processor.add_keyword('python')
>>> keyword_processor.extract_keywords('i work on python and j2ee')
# output: ['python', 'java']

   and keyword replacement:
>>> keyword_processor.add_keyword('new delhi', 'ncr region')
>>> keyword_processor.replace_keywords('i live in new delhi.')
# output: 'i live in ncr region.'

   this is really useful because it helps in term expansion. say you want
   to replace rc car as remote control car in product catalogue. or say
   you want to extract electrocardiogram as ecg. both are easily doable.
     __________________________________________________________________

   if you know someone who works on entity recognition or ner or nlp or
   id97, please share this blog with them. this library has been
   really useful for us in these areas. i am sure it would be useful to
   others also.

   cheers :)

     * [20]python
     * [21]nlp
     * [22]open source
     * [23]programming
     * [24]data science

   (button)
   (button)
   (button) 104 claps
   (button) (button) (button) (button)

     (button) blockedunblock (button) followfollowing
   [25]go to the profile of vikash singh

[26]vikash singh

   software engineer @ google

     * (button)
       (button) 104
     * (button)
     *
     *

   [27]go to the profile of vikash singh
   never miss a story from vikash singh, when you sign up for medium.
   [28]learn more
   never miss a story from vikash singh
   (button) blockedunblock (button) followget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://medium.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/b39e5d1e126a
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/membership?source=upgrade_membership---nav_full
   7. https://medium.com/m/signin?redirect=https://medium.com/@vi3k6i5/search-millions-of-documents-for-thousands-of-keywords-in-a-flash-b39e5d1e126a&source=--------------------------nav_reg&operation=login
   8. https://medium.com/m/signin?redirect=https://medium.com/@vi3k6i5/search-millions-of-documents-for-thousands-of-keywords-in-a-flash-b39e5d1e126a&source=--------------------------nav_reg&operation=register
   9. https://medium.com/@vi3k6i5?source=post_header_lockup
  10. https://medium.com/@vi3k6i5
  11. https://unsplash.com/@pjaccetturo
  12. http://unsplash.com/
  13. https://medium.com/@belongco
  14. https://www.linkedin.com/in/vinay-pande-54810813/
  15. https://www.linkedin.com/in/suresh-lakshmanan/
  16. https://en.wikipedia.org/wiki/aho   corasick_algorithm
  17. https://stackoverflow.com/questions/44178449/regex-replace-is-taking-time-for-millions-of-documents-how-to-make-it-faster
  18. https://medium.com/media/ed8557b2eb91f571652debfde49b3285?postid=b39e5d1e126a
  19. https://github.com/vi3k6i5/flashtext
  20. https://medium.com/tag/python?source=post
  21. https://medium.com/tag/nlp?source=post
  22. https://medium.com/tag/open-source?source=post
  23. https://medium.com/tag/programming?source=post
  24. https://medium.com/tag/data-science?source=post
  25. https://medium.com/@vi3k6i5?source=footer_card
  26. https://medium.com/@vi3k6i5
  27. https://medium.com/@vi3k6i5
  28. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  30. https://medium.com/p/b39e5d1e126a/share/twitter
  31. https://medium.com/p/b39e5d1e126a/share/facebook
  32. https://medium.com/p/b39e5d1e126a/share/twitter
  33. https://medium.com/p/b39e5d1e126a/share/facebook
