   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]swift programming
   [7]swift programming
   [8]sign in[9]get started
     __________________________________________________________________

   [1*qyiivj5xfbhx0s7ytr-rna.png]

build tic tac toe with ai using swift

   [10]go to the profile of keith elliott
   [11]keith elliott (button) blockedunblock (button) followfollowing
   jul 8, 2016

   i have a fascination and deep passion for learning. recently, i
   developed a hypothesis that i could apply the principles of game making
   to app development to improve experiences for my users. lots of people
   throw around terms like    gamification    as buzzwords that will cure the
   ails of your application by delighting your users into wanting to
   interact and engage more with whatever it is that your app offers. we
   won   t debate that today (i won   t even bring up the question of if the
   promoters of adding game-like behaviors to apps even play games).
   instead, we   ll build a game using spritekit, gameplaykit, and swift.

throttling expectations now

   before you get carried away with ambitions of building a chart topping
   hit, i want to tell you that   s not our objective today. we are going to
   just skim the surface and build a simple game of tic tac toe. after we
   get things working, we will add in ai to allow you to play against a
   computer controlled opponent.

part 1         the elements

   apple launched spritekit during wwdc 2013 to give developers an
   approachable way to build games quicker than the    roll-your-own   
   framework alternatives. since games are the most downloaded type of app
   on the apple ecosystem, it   s no surprise that apple has a strong
   commitment to the gaming community and a huge vested interest in making
   it easy for developers to create new games for ios, macos, watchos, and
   tvos.

   spritekit is a framework that handles rendering and animating graphics
   and images, which are also commonly referred to as sprites. as a
   developer, you determine which things change, and spritekit handles the
   work involved with displaying those changes. you can read more about
   spritekit [12]here. i also encourage you to read the [13]spritekit
   programming guide to get more details on the many other features the
   framework offers such as handling audio playback and sprite physics.

   spritekit handles the run loop for your game and provides several
   places for you as the developer to update your game on each frame. the
   following diagram shows what   s happening during each frame from the
   beginning update through the final render of the frame. essentially,
   you have a lot of options to tweak your game during each frame.
   [1*ye5prgycrsc1zsogficy5q.png]

   the other framework will work with is [14]gameplaykit. gameplaykit was
   introduced at last year   s wwdc and offers useful api for implementing
   some of the common elements you find in games like creating random
   numbers, artificial intelligence for your opponents, or pathfinding
   around obstacles. they are extremely useful tools that do some serious
   heavy lifting and allow game developers to focus on the aspects that
   make their games fun. i highly recommend that you read the
   [15]gameplaykit programming guide to learn more about how to build your
   game to take advantage of this framework. for our simple game, we will
   only incorporate a small part for the framework to give our computer
   opponent some    smarts   .

launching xcode

   [1*fyf0hihsff9nocdhthyjhg.gif]

   launch xcode and create a game project from the template for ios. name
   your game tictactoe and make sure the language is set to swift. during
   the project creation, xcode creates a skscene file that represents your
   initial view for your game along with a view controller file that
   initializes your game scene and handles presenting on screen when you
   launch the app. if you run the app now, you will see a hello world
   label that displays to let you know that everything works out of the
   box. in addition, if you click the view, a space ship gets added to the
   location of the click. we don   t need the label or the space ship
   behavior anymore, so let   s remove that code. switch to the
   gamescene.swift file, remove the code in didmovetoview and touchesbegan
   functions.
   [1*nz5nexrb1bpjs7cspec9ew.png]

   let   s spend a moment and highlight some of the features of the scene
   editor. the center of the view is the scene display, and the yellow
   outline around our tic tac toe board represents our view port that is
   visible for our game. we can can change the size of our view port or
   even add cameras that allow us to see more of the viewable parts of our
   game in realtime. in a    platformer   , we might create a large background
   image with enemy nodes scattered throughout the scene. we would use a
   camera node to advance across the scene to reveal new portions of the
   background over time. however, in this game, our view will be static
   around the board.
   [1*8owr7p77qkqla42ugb96eg.png]
   spritekit scene editor

   at the bottom of the scene is our node editor. we can use this editor
   to add actions to the node or to select them more easily in our scene.
   for our purposes, we add a node to represent the board, labels, and
   placeholder nodes for each cell of the board. last, notice that every
   node in our scene has a name, which we will use to reference in code.

   i have provided the entire game on [16]github so that you can follow
   along and investigate the areas that i am glossing over for the sake of
   time in this article.

back to the code

   let   s switch back to gameviewcontroller.swift to see how we setup our
   scene and get our game going. in our viewdidload method we configure
   and load our scene. we also add debug statements so that we can track
   our node and frames per second counts. in an action game, we would be
   interested in monitoring how many nodes are on the screen at one time
   along with if we are maintaining an ideal 60fps frame rate.

   iframe: [17]/media/8db76275c2c67c78d588c832b6a6b9ac?postid=25c5cd3085c9

   looking at the gamescene.swift file, we need to examine three methods
   for our game: didmovetoview, touchesbegan, and update. the
   didmovetoview method gets called when the scene is about to display in
   our view controller   s view. what   s cool about our gamescene view is
   that we have many options for accessing the nodes in our scene. in our
   method, we initialize our scene by removing the background color of the
   cells of our board. we also do a few other things, but we will hold off
   on discussing that until a little later in the article.

   iframe: [18]/media/a1595caaec055d43b7fdc613babe12ae?postid=25c5cd3085c9

   the next method we discuss is the touchesbegan method. this method
   handles our user touches for selecting our moves and reseting the game.
   for each touch on the scene, we determine the location on the screen
   and which node was selected. for our case we either place our player   s
   piece in a cell or we reset the game. we also update the internal state
   of our game board.

   iframe: [19]/media/8b81e22991c1637118773825bc9b6248?postid=25c5cd3085c9

   the last method we need to override is the update function. this method
   is called for every frame of our game and it is where we trigger our
   game logic. we are using gameplaykit   s statemachine to handle our game
   logic.

   iframe: [20]/media/55455d5930a143829bac5da288a9c7a2?postid=25c5cd3085c9

part 2         gamelogic

   now that we have covered setting up our displays, we will cover enough
   of the game logic to get you started with a game of your own.

statemachines

   most games have logic that only applies for the current state of the
   gameplay. as the state changes, so does the required logic. this boils
   down to dealing with state machines. gameplaykit offers a state machine
   implementation that we will use with our game. let   s look at
   gamestatemachine.swift to see my implementation for controlling the
   state in our game. i   ve created three states for our game:
   startgamestate, activegamestate, and endgamestate which all inherit
   from gkstate. for our state machine to work, we need to provide valid
   next states for each along with an update method that our state machine
   will call with each frame   s update. on each update, our state machine
   will call the updatewithdeltatime method for the active state.
   [1*4l1fvmpfzl38tcvbnlpxuw.png]

   the startgamestate is how we begin our game. in this state we reset our
   game board and then transition to the activegamestate. we override the
   isvalidnextstate function to make the only valid next state the
   activegamestate. so, when we are in the startgamestate, we can only go
   here and are prevented from entering any other state. state machines
   also have a didenterwithpreviousstate function that gets called when
   the implementing state becomes active. it also provides you with the
   state you   re coming from. in our case, we call our resetgame function
   to set up our game.

   iframe: [21]/media/36a20a51f2a399dd2aa0ac3f3067b47f?postid=25c5cd3085c9

   the activegamestate is the state we use when we are actively playing
   our game. we again override the isvalidnextstate and this time we want
   to make the only state you can transition to the endgamestate. we also
   override the didenterwithpreviousstate function but this time we just
   update one of our instance properties to allow our game to proceed as
   expected when the our update method is called. last, we override our
   updatewithdeltatime function to determine if there is a winner, the
   game is a draw, or if the current player   s turn has changed. in
   addition when its player two   s turn we call our ai routines to
   determine the best move for the player and then execute that move.

   iframe: [22]/media/0d66d6e77d946fa62aca54bcf7648b08?postid=25c5cd3085c9

   our last state is the endgamestate for our state machine. the
   isvalidnextstate function only allows this state to transition to the
   startgamestate. the didenterwithpreviousstate function just displays
   the reset button so that the player can click it and reset the game.

   iframe: [23]/media/91acfb280aeaed658caee3886077bad3?postid=25c5cd3085c9

minmax strategist

   in many board games, winning is based on strategy, and every move
   counts. in gameplaykit, a strategist is the artificial intelligence
   that can act as the opponent or determine one or more moves to provide
   a hint to a player. the [24]gkminmaxstrategist class provides an
   implementation to the minmax strategy. the minmax strategy works by
   building a decision tree of rated choices for all possible remaining
   moves in a game. we can make the ai stronger or weaker by configuring
   how many moves to look ahead.

   let   s look at our final file aistrategy.swift to see how we can
   implement the required classes and protocols to make ai work for our
   game. ultimately we need to create an instance of the
   gkminmaxstrategist class and implement the following protocols:
   gkgamemodel, gkgamemodelupdate, and gkgamemodelplayer.

   we need models to represent players, their moves, and to represent the
   board. we implement the gkgamemodelplayer protocol so that our ai can
   tell our players apart. there is only one required property that we
   have to implement, which is playerid. the next thing we need to tackle
   is to create a move object that implements the gkgamemodelupdate
   protocol. the protocol requires that we provide a value property that
   our decision tree logic will use to rate each move. all we have to do
   is add the value property to our class and let the minmax strategist
   take care of the rest.

   last, we create our board class and implement the gkgamemodel protocol.
   a big part of this protocol is simulating the possible moves that a
   player can make. by implementing the gamemodelupdatesforplayer
   function, we compile all of the possible moves for a specified player.
   each move we store is an instance of our move class, which implements
   the gkgamemodelupdate protocol. at some point during the process, the
   minmax strategist will call our delegate function applygamemodelupdate
   to update the internal state of our game. i also implemented a few
   other protocol methods that i will leave to the reader to investigate:
   unapplygamemodelupdate, iswinforplayer, islossforplayer, setgamemodel,
   activeplayer, scoreforplayer.

wiring things up

   switch back to the gamescene.swift file and examine the the
   didmovetoview function. we need to connect our ai and setup our state
   machine. to connect our ai, we initialize an instance of the
   gkminmaxstrategist and then set the maxlookaheaddepth to control how
   strong our ai component will be during gameplay. we also set the
   randomsource property to gkarc4randomsource so that our ai will have a
   way to randomly choose a move when there are multiple    best    moves to
   choose from. as for our state machine, we create instances of the
   start, active and end states and pass them to our state machine to get
   it started. last, we enter tell our state machine to enter the
   startgamestate.

   iframe: [25]/media/640d03a5936cd3ba84307e8b3720800f?postid=25c5cd3085c9

   if you start the ios simulator, we can play our game and test out our
   ai!
   [1*q8jaikrtg59h_4gggnnwxg.gif]
   tic tac toe simulation

wrapping up

   so, we   ve created a quick game and learned a few things about spritekit
   and gameplaykit along the way. i encourage you to make changes to the
   game and experiment with things to get more comfortable. if you need
   some suggestions, you might start with implementing a way to alternate
   which player goes first. another idea is to give the player a way to
   tweak the ai level on the game screen or to turn it off completely.

   on a lighter note, i also wrote an article on why creating native apps
   is probably the best way to go in most of your mobile development
   endeavors. read it and weigh in the discussion!
   [26]your hybrid app is going to kill you
   if your company only makes hybrid apps, you are going to lose in the
   end; it   s just a matter of time. hybrid mobile   medium.com

   i hope you found this post interesting. if you enjoyed it, recommend
   and like it!

   just in! you can now see a couple of my posts in chinese. thanks to
   [27]antonia0912.

   part 1: [28]https://gold.xitu.io/entry/578c647a6be3ff006ce49e91

   part 2: [29]https://gold.xitu.io/entry/578dc9db79bc44005ff580d4

   thanks to [30]grace elliott.
     * [31]swift
     * [32]ios
     * [33]spritekit
     * [34]mobile games

   (button)
   (button)
   (button) 321 claps
   (button) (button) (button) 4 (button) (button)

     (button) blockedunblock (button) followfollowing
   [35]go to the profile of keith elliott

[36]keith elliott

   web & mobile developer, with business and creative skills ---
   passionate about family, coding and entrepreneurship. you can find me
   at [37]www.gittielabs.com

     (button) follow
   [38]swift programming

[39]swift programming

   the swift programming language

     * (button)
       (button) 321
     * (button)
     *
     *

   [40]swift programming
   never miss a story from swift programming, when you sign up for medium.
   [41]learn more
   never miss a story from swift programming
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://medium.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/25c5cd3085c9
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/swift-programming?source=avatar-lo_5aucmvuxhs1h-5396e0e8bc29
   7. https://medium.com/swift-programming?source=logo-lo_5aucmvuxhs1h---5396e0e8bc29
   8. https://medium.com/m/signin?redirect=https://medium.com/swift-programming/build-tic-tac-toe-with-ai-using-swift-25c5cd3085c9&source=--------------------------nav_reg&operation=login
   9. https://medium.com/m/signin?redirect=https://medium.com/swift-programming/build-tic-tac-toe-with-ai-using-swift-25c5cd3085c9&source=--------------------------nav_reg&operation=register
  10. https://medium.com/@mrkeithelliott?source=post_header_lockup
  11. https://medium.com/@mrkeithelliott
  12. https://developer.apple.com/library/mac/documentation/spritekit/reference/spritekitframework_ref/index.html
  13. https://developer.apple.com/library/mac/documentation/graphicsanimation/conceptual/spritekit_pg/introduction/introduction.html#//apple_ref/doc/uid/tp40013043-ch1-sw1
  14. https://developer.apple.com/reference/gameplaykit
  15. https://developer.apple.com/library/prerelease/content/documentation/general/conceptual/gameplaykit_guide/index.html#//apple_ref/doc/uid/tp40015172
  16. https://github.com/mrkeithelliott/tictactoe
  17. https://medium.com/media/8db76275c2c67c78d588c832b6a6b9ac?postid=25c5cd3085c9
  18. https://medium.com/media/a1595caaec055d43b7fdc613babe12ae?postid=25c5cd3085c9
  19. https://medium.com/media/8b81e22991c1637118773825bc9b6248?postid=25c5cd3085c9
  20. https://medium.com/media/55455d5930a143829bac5da288a9c7a2?postid=25c5cd3085c9
  21. https://medium.com/media/36a20a51f2a399dd2aa0ac3f3067b47f?postid=25c5cd3085c9
  22. https://medium.com/media/0d66d6e77d946fa62aca54bcf7648b08?postid=25c5cd3085c9
  23. https://medium.com/media/91acfb280aeaed658caee3886077bad3?postid=25c5cd3085c9
  24. https://developer.apple.com/library/prerelease/content/documentation/general/conceptual/gameplaykit_guide/minmax.html#//apple_ref/doc/uid/tp40015172-ch2-sw1
  25. https://medium.com/media/640d03a5936cd3ba84307e8b3720800f?postid=25c5cd3085c9
  26. https://medium.com/p/416041d27eac
  27. https://medium.com/@antonia091212
  28. https://gold.xitu.io/entry/578c647a6be3ff006ce49e91
  29. https://gold.xitu.io/entry/578dc9db79bc44005ff580d4
  30. https://medium.com/@craftadon?source=post_page
  31. https://medium.com/tag/swift?source=post
  32. https://medium.com/tag/ios?source=post
  33. https://medium.com/tag/spritekit?source=post
  34. https://medium.com/tag/mobile-games?source=post
  35. https://medium.com/@mrkeithelliott?source=footer_card
  36. https://medium.com/@mrkeithelliott
  37. http://www.gittielabs.com/
  38. https://medium.com/swift-programming?source=footer_card
  39. https://medium.com/swift-programming?source=footer_card
  40. https://medium.com/swift-programming
  41. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  43. https://medium.com/p/416041d27eac
  44. https://medium.com/p/25c5cd3085c9/share/twitter
  45. https://medium.com/p/25c5cd3085c9/share/facebook
  46. https://medium.com/p/25c5cd3085c9/share/twitter
  47. https://medium.com/p/25c5cd3085c9/share/facebook
