   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]towards data science
     * [9]data science
     * [10]machine learning
     * [11]programming
     * [12]visualization
     * [13]ai
     * [14]data journalism
     * [15]contribute
     __________________________________________________________________

sudoku solver by peter norvig

   go to the profile of naoki shibuya
   [16]naoki shibuya (button) blockedunblock (button) followfollowing
   jan 27, 2017

   i recently came across peter norvig   s [17]solving every sudoku puzzle.
   i was impressed with his concise and beautiful python code that solves
   any sudoku puzzles systematically.

   however, some people may find it difficult to understand the concise
   code hence are unable to appreciate the beauty. i break down his
   article and explain the code in a step-by-step manner.

   note: the original article by peter uses python 2 but i   m using python
   3 in this article. in some places, i changed the indentation of peter   s
   code but i did not alter his program logic at all.

the rule of sudoku

   if you are not familiar with sudoku, i recommend that you visit
   [18]sudoku dragon and read their sudoku rule description.

   peter gives a beautiful summary of its rule in one sentence.

     a puzzle is solved if the squares in each unit are filled with a
     permutation of the digits 1 to 9.

   this may not be very clear at first glance if you don   t know what
   squares and units are.

squares

     a sudoku puzzle is a grid of 81 squares; the majority of enthusiasts
     label the columns 1   9, the rows a-i, and call a collection of nine
     squares (column, row, or box)

 a1 a2 a3| a4 a5 a6| a7 a8 a9
 b1 b2 b3| b4 b5 b6| b7 b8 b9
 c1 c2 c3| c4 c5 c6| c7 c8 c9
---------+---------+---------
 d1 d2 d3| d4 d5 d6| d7 d8 d9
 e1 e2 e3| e4 e5 e6| e7 e8 e9
 f1 f2 f3| f4 f5 f6| f7 f8 f9
---------+---------+---------
 g1 g2 g3| g4 g5 g6| g7 g8 g9
 h1 h2 h3| h4 h5 h6| h7 h8 h9
 i1 i2 i3| i4 i5 i6| i7 i8 i9

   so, c2 is a square at the intersection of the third row (which is c)
   and the second column (which is 2).

the digits, rows and cols

   peter defines digits, rows and cols as strings.
digits   = '123456789'
rows     = 'abcdefghi'
cols     = digits

   a string can be treated as a list of characters, and you can access
   each element using for loop.
> for a in digits:
>    print(a)
1
2
3
4
5
6
7
8
9

   you might be wondering why peter defines cols = digits. why do we need
   two names for the same thing? after all, they are both the same
   character sequence. it will be clear as you read further in his
   program. you will appreciate that peter uses digits and cols
   appropriately for better readability.

   for now, just remember the following. when you see digits in his code,
   you should think of it as a list of digits from    1    to    9   . when you
   see cols, you should think of it as a list of column identifiers from
      1    to    9   . both are exactly the same values but their semantics are
   different.

the cross function

   a list of squares can be composed in the following code:
squares = []
for a in rows:
    for b in cols:
        squares.append(a+b)

   in the above code, a+b is not a mathematical operation. it is a string
   concatenation operation. the character from a and the character from b
   are concatenated (i.e. joined). for example, when a=   a    and b=   1', a+b
   yields    a1   .
> print(squares)
['a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'b1', 'b2', 'b3', 'b4', '
b5', 'b6', 'b7', 'b8', 'b9', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9
', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'e1', 'e2', 'e3', 'e4',
 'e5', 'e6', 'e7', 'e8', 'e9', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', '
f9', 'g1', 'g2', 'g3', 'g4', 'g5', 'g6', 'g7', 'g8', 'g9', 'h1', 'h2', 'h3', 'h4
', 'h5', 'h6', 'h7', 'h8', 'h9', 'i1', 'i2', 'i3', 'i4', 'i5', 'i6', 'i7', 'i8',
 'i9']

   we can use the list comprehension technique to make it more concise.
squares = [a+b for a in rows for b in cols]

   finally, the below shows peter   s code. he defines a function cross to
   make the code more readable.
def cross(a, b):
    "cross product of elements in a and elements in b."
    return [a+b for a in a for b in b]
squares = cross(rows, cols)

   therefore, the cross function generates all cross products of
   characters from rows and cols. the resulted squares variable points to
   a list of all the 81 squares.

unit list

     every square has exactly 3 units

   there are 81 squares in sudoku board and each square has exactly 3
   units (no less, no more).

   for example, the 3 units of the square c2 is shown below:

   the column unit of c2
    a2   |         |
    b2   |         |
    c2   |         |
---------+---------+---------
    d2   |         |
    e2   |         |
    f2   |         |
---------+---------+---------
    g2   |         |
    h2   |         |
    i2   |         |

   the row unit of c2
         |         |
         |         |
 c1 c2 c3| c4 c5 c6| c7 c8 c9
---------+---------+---------
         |         |
         |         |
         |         |
---------+---------+---------
         |         |
         |         |
         |         |

   the box unit of c2
 a1 a2 a3|         |
 b1 b2 b3|         |
 c1 c2 c3|         |
---------+---------+---------
         |         |
         |         |
         |         |
---------+---------+---------
         |         |
         |         |
         |         |

   the column, the row, and the box (3x3 area) that contains the square c2
   is the 3 units of the square c2.

   in total, there are 27 units in the sudoku board. they are the 9 column
   units, 9 row units and 9 box units.

   we can use the cross function to generate the 9 column units:
> [cross(rows, c) for c in cols]
[['a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1', 'i1'],
 ['a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2', 'i2'],
 ['a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3', 'i3'],
 ['a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4', 'i4'],
 ['a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5', 'i5'],
 ['a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6', 'i6'],
 ['a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7', 'i7'],
 ['a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8', 'i8'],
 ['a9', 'b9', 'c9', 'd9', 'e9', 'f9', 'g9', 'h9', 'i9']]

   similarly, we can generate the 9 row units:
> [cross(r, cols) for r in rows]
[['a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9'],
 ['b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9'],
 ['c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9'],
 ['d1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9'],
 ['e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9'],
 ['f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9'],
 ['g1', 'g2', 'g3', 'g4', 'g5', 'g6', 'g7', 'g8', 'g9'],
 ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'h7', 'h8', 'h9'],
 ['i1', 'i2', 'i3', 'i4', 'i5', 'i6', 'i7', 'i8', 'i9']]

   for the 9 box units, we break rows and cols into 3 groups and generate
   cross products.
> [cross(rs, cs) for rs in ('abc','def','ghi') for cs in ('123','456','789')]
[['a1', 'a2', 'a3', 'b1', 'b2', 'b3', 'c1', 'c2', 'c3'],
 ['a4', 'a5', 'a6', 'b4', 'b5', 'b6', 'c4', 'c5', 'c6'],
 ['a7', 'a8', 'a9', 'b7', 'b8', 'b9', 'c7', 'c8', 'c9'],
 ['d1', 'd2', 'd3', 'e1', 'e2', 'e3', 'f1', 'f2', 'f3'],
 ['d4', 'd5', 'd6', 'e4', 'e5', 'e6', 'f4', 'f5', 'f6'],
 ['d7', 'd8', 'd9', 'e7', 'e8', 'e9', 'f7', 'f8', 'f9'],
 ['g1', 'g2', 'g3', 'h1', 'h2', 'h3', 'i1', 'i2', 'i3'],
 ['g4', 'g5', 'g6', 'h4', 'h5', 'h6', 'i4', 'i5', 'i6'],
 ['g7', 'g8', 'g9', 'h7', 'h8', 'h9', 'i7', 'i8', 'i9']]

   we combine all 3 groups of the units into one list. peter defines
   unitlist as follows:
unitlist = ([cross(rows, c) for c in cols] +
            [cross(r, cols) for r in rows] +
            [cross(rs, cs) for rs in ('abc','def','ghi') for cs in ('123','456',
'789')])

   let   s see the number of units:
> print(len(unitlist))
27

   we know that there are 3 units for each square. this can be expressed
   in a python dictionary as follows:
units = {}
for s in squares:
    for u in unitlist:
        if s in u:
            if s not in units:
                units[s] = []
            units[s].append(u)

   this dictionary uses square values as key and a list of units as value.
   for example, the 3 units of    c2    can be accessed as follows:
> units['c2']
[['a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2', 'i2'],
 ['c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9'],
 ['a1', 'a2', 'a3', 'b1', 'b2', 'b3', 'c1', 'c2', 'c3']]

   peter uses much more concise code to achieve the same.
units = dict((s, [u for u in unitlist if s in u]) for s in squares)

the rule of sudoku (once again)

   now that you know squares and units, we are ready to appreciate peter   s
   definition of sudoku rule:

     a puzzle is solved if the squares in each unit are filled with a
     permutation of the digits 1 to 9.

   if it is not yet very clear, you should really visit [19]sudoku dragon
   and read their description of sudoku rule. otherwise it will not make
   any sense reading what comes afer here.

peers

   there is one more terminology we need to introduce before talking about
   peter   s sudoku solver. it   s called peers.

   let me give an example first. the peers of    c2    is all squares in the
   related 3 units except for    c2    itself.
c2_peers = set()         # keep unique values using set
for unit in units['c2']: # the 3 units of c2:
    for square in unit:  # all squares in the current unit
        if square != 'c2':
            c2_peers.add(square)

   let   s examine the values of c2_peers:
> print(c2_peers)
{'e2', 'c7', 'a3', 'd2', 'c1', 'a2', 'b3', 'a1', 'g2', 'i2', 'c5', 'c4', 'h2', '
c3', 'b1', 'b2', 'c9', 'c6', 'f2', 'c8'}

   we can store all peers for all squares in python dictionary as follows:
peers = {}
for s in squares:
    unit_set = set()
    for unit in units[s]:
        for square in unit:
            if square != s:
                unit_set.add(square)
    peers[s] = unit_set

   for example, all peers of    c2    can be accessed as follows:
> print(peers['c2'])
{'e2', 'c7', 'a3', 'd2', 'c1', 'a2', 'b3', 'a1', 'g2', 'i2', 'c5', 'c4', 'h2', '
c3', 'b1', 'b2', 'c9', 'c6', 'f2', 'c8'}

   the above code has 3 for loop statements. can we simplify this using
   python   s built-in function?

   the answer is yes but you need to know how the python list addition
   works. let   s take a look at the following example.
> a = [1, 2, 3]
> b = [4, 3, 6]
>
> a+b
[1, 2, 3, 4, 3, 6]

   the addition of two python lists is a combined list. now, the same
   thing can be achieved using the built-in sum function.
> sum([a, b], [])
[1, 2, 3, 4, 3, 6]

   the sum function takes two arguments. the first argument is an iterable
   object and the second argument is the initial value. the sum function
   will use the second value as the initial value and append each element
   of the first argument to it. for more details, please refer to the
   python online documentation:
   [20]https://docs.python.org/3/library/functions.html#sum.

   the same result can be achieved by the following:
> [] + a + b
[1, 2, 3, 4, 3, 6]

   but using the sum function is more convenient when you have a list of
   items.

   you might have noticed that there are two 3s in the combined list. this
   was deliberate. we can use set to have unique values.
> set(sum([a, b], []))
{1, 2, 3, 4, 6}

   suppose you want to remove 4 from this set, you can subtract a set that
   contains only 4.
> set(sum([a, b], [])) - set([4])
{1, 2, 3, 6}

   now, we are ready to simplify the 3 for loop operations into one
   statement. peter uses the following statement to express all peers for
   all squares in a dictionary.
peers = dict((s, set(sum(units[s],[]))-set([s])) for s in squares)

   note: units[s] returns a list of 3 units, each of which a list of
   squares. the sum function will combine all 3 unit lists into one list,
   which is a list of all squares in the 3 units. using set, we keep the
   unique square values excluding the original square that is used to
   fetch all 3 units. finally, the list of squares is stored in the
   dictionary using the original square as key.
> print(peers['c2'])
{'b3', 'a2', 'a1', 'g2', 'c5', 'h2', 'b2', 'e2', 'c7', 'd2', 'c1', 'a3', 'i2', '
c4', 'c3', 'b1', 'c9', 'c6', 'f2', 'c8'}

   each square has exactly 20 peers.

unit testing squares, units and peers

   after defining squares, units, peers, peter tests the values.
def test():
    "a set of unit tests."
    assert len(squares) == 81
    assert len(unitlist) == 27
    assert all(len(units[s]) == 3 for s in squares)
    assert all(len(peers[s]) == 20 for s in squares)
    assert units['c2'] == [
      ['a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2', 'i2'],
      ['c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9'],
      ['a1', 'a2', 'a3', 'b1', 'b2', 'b3', 'c1', 'c2', 'c3']]
    assert peers['c2'] == set(
      ['a2', 'b2', 'd2', 'e2', 'f2', 'g2', 'h2', 'i2',
       'c1', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9',
       'a1', 'a3', 'b1', 'b3'])
    print('all tests pass.')

   let   s run the test.
> test()
all tests pass.

initial representation of sudoku puzzle

   peter   s sudoku solver accepts the various representations as input.

   the following string is one such example:
"4.....8.5.3..........7......2.....6.....8.4......1.......6.3.7.5..2.....1.4....
.."

   the first 9 characters form the first row, the second 9 characters form
   the second row, and so on. all dots are interpreted as empty square.

   the below is another representation:
"""
400000805
030000000
000700000
020000060
000080400
000010000
000603070
500200000
104000000"""

   here, all zero characters are interpreted as empty square. new lines
   are ignored.

   the below is yet another example:
"""
4 . . |. . . |8 . 5
. 3 . |. . . |. . .
. . . |7 . . |. . .
------+------+------
. 2 . |. . . |. 6 .
. . . |. 8 . |4 . .
. . . |. 1 . |. . .
------+------+------
. . . |6 . 3 |. 7 .
5 . . |2 . . |. . .
1 . 4 |. . . |. . .
"""

   anything other than    0   ,    1   ,    2   ,    3   ,    4   ,    5   ,    6   ,    7   ,    8   ,    9   
   and    .    are ignored such as    |    and    +   .

   suppose we want to parse the following initial values stored in grid1:
grid1 = """
4 . . |. . . |8 . 5
. 3 . |. . . |. . .
. . . |7 . . |. . .
------+------+------
. 2 . |. . . |. 6 .
. . . |. 8 . |4 . .
. . . |. 1 . |. . .
------+------+------
. . . |6 . 3 |. 7 .
5 . . |2 . . |. . .
1 . 4 |. . . |. . .
"""

   the following will extract only values we need.
grid1_chars = []
for c in grid1:
    if c in digits or c in '0.':
        grid1_chars.append(c)

assert len(grid1_chars) == 81

   let   s examine the grid1_chars:
> print(grid1_chars)
['4', '.', '.', '.', '.', '.', '8', '.', '5', '.', '3', '.', '.', '.', '.', '.',
 '.', '.', '.', '.', '.', '7', '.', '.', '.', '.', '.', '.', '2', '.', '.', '.',
 '.', '.', '6', '.', '.', '.', '.', '.', '8', '.', '4', '.', '.', '.', '.', '.',
 '.', '1', '.', '.', '.', '.', '.', '.', '.', '6', '.', '3', '.', '7', '.', '5',
 '.', '.', '2', '.', '.', '.', '.', '.', '1', '.', '4', '.', '.', '.', '.', '.',
 '.']

   then, we can store the values in a dictionary using square as key and
   char values as value.
grid1_values = {}
for k, v in zip(squares, grid1_chars):
    grid1_values[k] = v

   zip here takes two list and creates an iterable tuples. for more
   details, please refer to the python online documentation:
   [21]https://docs.python.org/3/library/functions.html#zip.

   peter put all the above into a function as follows:
def grid_values(grid):
    "convert grid into a dict of {square: char} with '0' or '.' for empties."
    chars = [c for c in grid if c in digits or c in '0.']
    assert len(chars) == 81
    return dict(zip(squares, chars))

   for example, you can call it like below:
> grid1_values = grid_values(grid1)
>
> grid1_values['a1']
'4'

constraint propagation

   knowing initial values for all squares (a digit value or an empty
   value), we can apply constraints to each square by eliminating
   impossible values for them. peter lists up two simple rules:

     (1) if a square has only one possible value, then eliminate that
     value from the square   s peers.

     (2) if a unit has only one possible place for a value, then put the
     value there.

   let   s take one step back and imagine that we don   t know the initial
   values. in this case, all squares can potentially have any of digits.
   we can express this state as follows:
values = dict((s, digits) for s in squares)

   the values is a dictionary that associates each square to all digit
   values (   123456789   ). as soon as we know the initial values, we can
   eliminate impossible values from other squares.

   as an example of strategy (1),    a1    is    4    in grid1_values. that means
      a1    can only have    4    as its value, and we can remove    4    from its
   peers.

   as an example of strategy (2), as none of a2 through i2 except    f2    has
      4    as a possible value in grid1_values,    4    must belong to    f2    and we
   can eliminate    4    from the peers of    f2   .

   so, while we assign initial values for each square, we also eliminate
   it from the peers.

     this process is called constraint propagation.

the parse_grid function

   the outcome of this parsing process leaves only possible values for
   each square. peter defines a function to handle this as follows:
def parse_grid(grid):
    """convert grid to a dict of possible values, {square: digits}, or
    return false if a contradiction is detected."""
    ## to start, every square can be any digit; then assign values from the grid
.
    values = dict((s, digits) for s in squares)
    for s,d in grid_values(grid).items():
        if d in digits and not assign(values, s, d):
            return false ## (fail if we can't assign d to square s.)
    return values

   in the above function,
     * values are given digits as the initial value in a dictionary where
       each square is used as a key.
     * the given grid contains the initial representation of sudoku
       puzzle.
     * we use grid_values function to extract only relevant values
       (digits,    0    and    .   ).
     * for each square with initial digit value, we call the assign
       function to assign the value to the square while eliminating it
       from the peers
     * if something goes wrong in the assign function, it returns false to
       signify the failure
     * if no errors, the function returns the values dictionary back to
       the caller

   the assign function is not yet defined here. other than that, the
   parse_grid function should be self-explanatory if you read it line by
   line.

the assign functions

   the function assign(values, s, d) updates the incoming values by
   eliminating the other values than d from the square s calling the
   function eliminate(values, s, d).

   if any of the eliminate call returns false, the assign function returns
   false indicating that there is a contradiction.
def assign(values, s, d):
    """eliminate all the other values (except d) from values[s] and propagate.
    return values, except return false if a contradiction is detected."""
    other_values = values[s].replace(d, '')
    if all(eliminate(values, s, d2) for d2 in other_values):
        return values
    else:
        return false

the eliminate function

   so what does the eliminate function do?
     * it removes the given value d from values[s] which is a list of
       potential values for s.
     * if there is no values left in values[s] (that is we don   t have any
       potential value for that square), returns false
     * when there is only one potential value for s, it removes the value
       from all the peers of s (the value is for s and the peers can not
       have it to satisfy the sudoku rule) <== strategy (1)
     * make sure the given value d has a place elsewhere (i.e., if no
       square has d as a potential value, we can not solve the puzzle). if
       this test fails, it returns false
     * where there is only one place for the value d, remove it from the
       peers <== strategy (2)

   the function is a bit lengthy but if you have followed the discussion
   so far, you should be able to understand it.
def eliminate(values, s, d):
    """eliminate d from values[s]; propagate when values or places <= 2.
    return values, except return false if a contradiction is detected."""
    if d not in values[s]:
        return values ## already eliminated
    values[s] = values[s].replace(d,'')
    ## (1) if a square s is reduced to one value d2, then eliminate d2 from the
peers.
    if len(values[s]) == 0:
        return false ## contradiction: removed last value
    elif len(values[s]) == 1:
        d2 = values[s]
        if not all(eliminate(values, s2, d2) for s2 in peers[s]):
            return false
    ## (2) if a unit u is reduced to only one place for a value d, then put it t
here.
    for u in units[s]:
        dplaces = [s for s in u if d in values[s]]
        if len(dplaces) == 0:
            return false ## contradiction: no place for this value
        elif len(dplaces) == 1:
        # d can only be in one place in unit; assign it there
            if not assign(values, dplaces[0], d):
                return false
    return values

the display function

   by calling parse_grid, we know what are the potential values for each
   square. naturally, we want to display the result.
def display(values):
    "display these values as a 2-d grid."
    width = 1+max(len(values[s]) for s in squares)
    line = '+'.join(['-'*(width*3)]*3)
    for r in rows:
        print(''.join(values[r+c].center(width)+('|' if c in '36' else '') for c
 in cols))
        if r in 'cf':
            print(line)
    print()

   i   m not going to explain the details of this function. if you are
   curious, play with it by changing here and there and you   ll know how it
   works.

   the below is an example output.
> gr  = '4.....8.5.3..........7......2.....6.....8.4......1.......6.3.7.5..2..
...1.4......'
> display(parse_grid(gr ))
   4      1679   12679  |  139     2369    269   |   8      1239     5
 26789     3    1256789 | 14589   24569   245689 | 12679    1249   124679
  2689   15689   125689 |   7     234569  245689 | 12369   12349   123469
------------------------+------------------------+------------------------
  3789     2     15789  |  3459   34579    4579  | 13579     6     13789
  3679   15679   15679  |  359      8     25679  |   4     12359   12379
 36789     4     56789  |  359      1     25679  | 23579   23589   23789
------------------------+------------------------+------------------------
  289      89     289   |   6      459      3    |  1259     7     12489
   5      6789     3    |   2      479      1    |   69     489     4689
   1      6789     4    |  589     579     5789  | 23569   23589   23689

   so, for example, the square    c2    has    15689    as the potential values.

   can we enhance the eliminate function further to remove more values by
   implementing strategies like the [22]naked twins?

   it   s possible to pursue that route. but peter says otherwise:

     coding up strategies like this is a possible route, but would
     require hundreds of lines of code (there are dozens of these
     strategies), and we   d never be sure if we could solve every puzzle.

search

   so, what is the alternative to solve every sudoku puzzles?

     the other route is to search for a solution: to systematically try
     all possibilities until we hit one that works. the code for this is
     less than a dozen lines   

   sounds nice. but   peter continues:

        we run another risk: that it might take forever to run. consider
     that in the gr  above, a2 has 4 possibilities (1679) and a3 has 5
     possibilities (12679); together that   s 20, and if we keep
     multiplying, we get 4.62838344192    1038 possibilities for the whole
     puzzle.

   peter further explains his search algorithm:
     * first make sure we haven   t already found a solution or a
       contradiction, and if not,
     * choose one unfilled square and consider all its possible values.
     * one at a time, try assigning the square each value, and searching
       from the resulting position.

     we search for a value d such that we can successfully search for a
     solution from the result of assigning square s to d. if the search
     leads to an failed position, go back and consider another value of
     d. this is a recursive search, and we call it a depth-first search
     because we (recursively) consider all possibilities under values[s]
     = d before we consider a different value for s.

   finally, peter explains how to choose which square to start exploring
   which is called variable ordering:

     we will use a common heuristic called minimum remaining values,
     which means that we choose the (or one of the) square with the
     minimum number of possible values. why? consider gr  above.
     suppose we chose b3 first. it has 7 possibilities (1256789), so we   d
     expect to guess wrong with id203 6/7. if instead we chose g2,
     which only has 2 possibilities (89), we   d expect to be wrong with
     id203 only 1/2. thus we choose the square with the fewest
     possibilities and the best chance of guessing right.

   for value ordering (which digit do we try first for the square?), peter
   says:

     we won   t do anything special; we   ll consider the digits in numeric
     order.

   the following sections explain peter   s search algorithm.

the solve function

def solve(grid):
    return search(parse_grid(grid))

   the solve function parses the initial representation and calls the
   search function.

the search function

def search(values):
    "using depth-first search and propagation, try all possible values."
    if values is false:
        return false ## failed earlier
    if all(len(values[s]) == 1 for s in squares):
        return values ## solved!
    ## chose the unfilled square s with the fewest possibilities
    n,s = min((len(values[s]), s) for s in squares if len(values[s]) > 1)
    return some(search(assign(values.copy(), s, d)) for d in values[s])
     * if every square has exactly one value, the puzzle is solved.
     * select a square with minimum number of potential values, and call
       assign to eliminate a potential value from the peers
     * call the search function recursively by passing the values after
       the above elimination

   note: values are copied and passed down to the assign call to avoid
   book-keeping complexity.

   if one of the attempt succeeds, we solved the puzzle. to check this,
   the function some is used.
def some(seq):
    "return some element of seq that is true."
    for e in seq:
        if e: return e
    return false

   that   s all. we have a solver that works for any sudoku.

the complete solver code

   for your reference, i put peter   s complete sudoku solver code here.
def cross(a, b):
    "cross product of elements in a and elements in b."
    return [a+b for a in a for b in b]
digits   = '123456789'
rows     = 'abcdefghi'
cols     = digits
squares  = cross(rows, cols)
unitlist = ([cross(rows, c) for c in cols] +
            [cross(r, cols) for r in rows] +
            [cross(rs, cs) for rs in ('abc','def','ghi') for cs in ('123','456',
'789')])
units = dict((s, [u for u in unitlist if s in u])
             for s in squares)
peers = dict((s, set(sum(units[s],[]))-set([s]))
             for s in squares)
def parse_grid(grid):
    """convert grid to a dict of possible values, {square: digits}, or
    return false if a contradiction is detected."""
    ## to start, every square can be any digit; then assign values from the grid
.
    values = dict((s, digits) for s in squares)
    for s,d in grid_values(grid).items():
        if d in digits and not assign(values, s, d):
            return false ## (fail if we can't assign d to square s.)
    return values
def grid_values(grid):
    "convert grid into a dict of {square: char} with '0' or '.' for empties."
    chars = [c for c in grid if c in digits or c in '0.']
    assert len(chars) == 81
    return dict(zip(squares, chars))
def assign(values, s, d):
    """eliminate all the other values (except d) from values[s] and propagate.
    return values, except return false if a contradiction is detected."""
    other_values = values[s].replace(d, '')
    if all(eliminate(values, s, d2) for d2 in other_values):
        return values
    else:
        return false
def eliminate(values, s, d):
    """eliminate d from values[s]; propagate when values or places <= 2.
    return values, except return false if a contradiction is detected."""
    if d not in values[s]:
        return values ## already eliminated
    values[s] = values[s].replace(d,'')
    ## (1) if a square s is reduced to one value d2, then eliminate d2 from the
peers.
    if len(values[s]) == 0:
        return false ## contradiction: removed last value
    elif len(values[s]) == 1:
        d2 = values[s]
        if not all(eliminate(values, s2, d2) for s2 in peers[s]):
            return false
    ## (2) if a unit u is reduced to only one place for a value d, then put it t
here.
    for u in units[s]:
        dplaces = [s for s in u if d in values[s]]
        if len(dplaces) == 0:
            return false ## contradiction: no place for this value
        elif len(dplaces) == 1:
            # d can only be in one place in unit; assign it there
            if not assign(values, dplaces[0], d):
                return false
    return values
def solve(grid): return search(parse_grid(grid))
def search(values):
    "using depth-first search and propagation, try all possible values."
    if values is false:
        return false ## failed earlier
    if all(len(values[s]) == 1 for s in squares):
        return values ## solved!
    ## chose the unfilled square s with the fewest possibilities
    n,s = min((len(values[s]), s) for s in squares if len(values[s]) > 1)
    return some(search(assign(values.copy(), s, d))
        for d in values[s])
def some(seq):
    "return some element of seq that is true."
    for e in seq:
        if e: return e
    return false

   there are results reported in the article which shows how well it
   works.

why?

   in the end, peter explains why he did this project:

     as computer security expert ben laurie has stated, sudoku is    a
     denial of service attack on human intellect   . several people i know
     (including my wife) were infected by the virus, and i thought maybe
     this would demonstrate that they didn   t need to spend any more time
     on sudoku.

conclusion

   i hope this article find some use for people having hard time
   understanding peter norvig   s sudoku solver article which is an
   excellent one but requires the reader to have a certain level of python
   mastery.
   [1*3rplepo-sghsmvqy4uqexg.png]

references

     * solving every sudoku puzzle: [23]http://norvig.com/sudoku.html
     * udacity artificial intelligence engineer:
       [24]https://www.udacity.com/ai

     * [25]artificial intelligence
     * [26]sudoku
     * [27]udacity
     * [28]machine learning
     * [29]programming

   (button)
   (button)
   (button) 183 claps
   (button) (button) (button) 4 (button) (button)

     (button) blockedunblock (button) followfollowing
   go to the profile of naoki shibuya

[30]naoki shibuya

   medium member since mar 2017

   senior research engineer @ ascent robotics

     (button) follow
   [31]towards data science

[32]towards data science

   sharing concepts, ideas, and codes.

     * (button)
       (button) 183
     * (button)
     *
     *

   [33]towards data science
   never miss a story from towards data science, when you sign up for
   medium. [34]learn more
   never miss a story from towards data science
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://towardsdatascience.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/25779bb349ce
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://towardsdatascience.com/peter-norvigs-sudoku-solver-25779bb349ce&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://towardsdatascience.com/peter-norvigs-sudoku-solver-25779bb349ce&source=--------------------------nav_reg&operation=register
   8. https://towardsdatascience.com/?source=logo-lo_9yasupmhkjjk---7f60cf5620c9
   9. https://towardsdatascience.com/data-science/home
  10. https://towardsdatascience.com/machine-learning/home
  11. https://towardsdatascience.com/programming/home
  12. https://towardsdatascience.com/data-visualization/home
  13. https://towardsdatascience.com/artificial-intelligence/home
  14. https://towardsdatascience.com/data-journalism/home
  15. https://towardsdatascience.com/contribute/home
  16. https://towardsdatascience.com/@naokishibuya
  17. http://www.norvig.com/sudoku.html
  18. http://www.sudokudragon.com/sudoku.htm
  19. http://www.sudokudragon.com/sudoku.htm
  20. https://docs.python.org/3/library/functions.html#sum.
  21. https://docs.python.org/3/library/functions.html#zip.
  22. http://www.sudokudragon.com/sudokustrategy.htm
  23. http://norvig.com/sudoku.html
  24. https://www.udacity.com/ai
  25. https://towardsdatascience.com/tagged/artificial-intelligence?source=post
  26. https://towardsdatascience.com/tagged/sudoku?source=post
  27. https://towardsdatascience.com/tagged/udacity?source=post
  28. https://towardsdatascience.com/tagged/machine-learning?source=post
  29. https://towardsdatascience.com/tagged/programming?source=post
  30. https://towardsdatascience.com/@naokishibuya
  31. https://towardsdatascience.com/?source=footer_card
  32. https://towardsdatascience.com/?source=footer_card
  33. https://towardsdatascience.com/
  34. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  36. https://towardsdatascience.com/@naokishibuya?source=post_header_lockup
  37. https://medium.com/p/25779bb349ce/share/twitter
  38. https://medium.com/p/25779bb349ce/share/facebook
  39. https://towardsdatascience.com/@naokishibuya?source=footer_card
  40. https://medium.com/p/25779bb349ce/share/twitter
  41. https://medium.com/p/25779bb349ce/share/facebook
