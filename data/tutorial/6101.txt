   #[1]pyimagesearch    feed [2]pyimagesearch    comments feed
   [3]pyimagesearch    real-time id164 with deep learning and
   opencv comments feed [4]alternate [5]alternate

[6]navigation

   [7]pyimagesearch [8]pyimagesearch be awesome at opencv, python, deep
   learning, and id161

   [9]home

main menu

     * [10]start here
     * [11]practical python and opencv
     * [12]pyimagesearch gurus
     * [13]opencv 3 & 4 tutorials
     * [14]free crash course
     * [15]about
     * [16]contact

   [17]return to content

real-time id164 with deep learning and opencv

   by [18]adrian rosebrock on september 18, 2017 in [19]deep learning,
   [20]id164, [21]opencv 3, [22]tutorials
   [23]python file icon click here to download the source code to this
   post

   [real_time_object_detection_animation.gif]

   today   s blog post was inspired by pyimagesearch reader, emmanuel.
   emmanuel emailed me after last week   s tutorial on [24]id164
   with deep learning + opencv and asked:

        hi adrian,

     i really enjoyed last week   s blog post on [25]id164 with
     deep learning and opencv, thanks for putting it together and for
     making deep learning with opencv so accessible.

     i want to apply the same technique to real-time video.

     what is the best way to do this?

     how can i achieve the most efficiency?

     if you could do a tutorial on real-time id164 with deep
     learning and opencv i would really appreciate it.   

   great question, thanks for asking emmanuel.

   luckily, extending our previous tutorial on id164 with deep
   learning and opencv to real-time video streams is fairly
   straightforward     we simply need to combine some [26]efficient,
   boilerplate code for real-time video access and then add in our object
   detection.

   by the end of this tutorial you   ll be able to apply deep learning-based
   id164 to real-time video streams using opencv and python    
   to learn how, just keep reading.

   looking for the source code to this post?
   [27]jump right to the downloads section.

real-time id164 with deep learning and opencv

   today   s blog post is broken into two parts.

   in the first part we   ll learn how to extend [28]last week   s tutorial to
   apply real-time id164 using deep learning and opencv to work
   with video streams and video files. this will be accomplished using the
   highly efficient videostream  class discussed [29]in this tutorial.

   from there, we   ll apply our deep learning + id164 code to
   actual video streams and measure the fps processing rate.

id164 in video with deep learning and opencv

   to build our deep learning-based real-time object detector with opencv
   we   ll need to (1) access our webcam/video stream in an efficient manner
   and (2) apply id164 to each frame.

   to see how this is done, open up a new file, name it
   real_time_object_detection.py  and insert the following code:
   real-time id164 with deep learning and opencv
   python

   # import the necessary packages_____________________________
   from imutils.video import videostream_______________________
   from imutils.video import fps_______________________________
   import numpy as np__________________________________________
   import argparse_____________________________________________
   import imutils______________________________________________
   import time_________________________________________________
   import cv2__________________________________________________
   1
   2
   3
   4
   5
   6
   7
   8
   # import the necessary packages
   from imutils.video import videostream
   from imutils.video import fps
   import numpy as np
   import argparse
   import imutils
   import time
   import cv2

   we begin by importing packages on lines 2-8. for this tutorial, you
   will need [30]imutils and opencv 3.3.

   to get your system set up, simply [31]install opencv using the relevant
   instructions for your system (while ensuring you   re following any
   python virtualenv commands).

   note: make sure to download and install [32]opencv and and
   [33]opencv-contrib releases for opencv 3.3. this will ensure that the
   deep neural network ( dnn) module is installed. you must have opencv
   3.3 (or newer) to run the code in this tutorial.

   next, we   ll parse our command line arguments:
   real-time id164 with deep learning and opencv
   python

   # construct the argument parse and parse the arguments______
   ap = argparse.argumentparser()______________________________
   ap.add_argument("-p", "--prototxt", required=true,__________
   	help="path to caffe 'deploy' prototxt file")_______________
   ap.add_argument("-m", "--model", required=true,_____________
   	help="path to caffe pre-trained model")____________________
   ap.add_argument("-c", "--confidence", type=float, default=0.
   	help="minimum id203 to filter weak detections")______
   args = vars(ap.parse_args())________________________________
   10
   11
   12
   13
   14
   15
   16
   17
   18
   # construct the argument parse and parse the arguments
   ap = argparse.argumentparser()
   ap.add_argument("-p", "--prototxt", required=true,
   help="path to caffe 'deploy' prototxt file")
   ap.add_argument("-m", "--model", required=true,
   help="path to caffe pre-trained model")
   ap.add_argument("-c", "--confidence", type=float, default=0.2,
   help="minimum id203 to filter weak detections")
   args = vars(ap.parse_args())

   compared to last week, we don   t need the image argument since we   re
   working with streams and videos     other than that the following
   arguments remain the same:
     * --prototxt : the path to the caffe prototxt file.
     * --model : the path to the pre-trained model.
     * --confidence : the minimum id203 threshold to filter weak
       detections. the default is 20%.

   we then initialize a class list and a color set:
   real-time id164 with deep learning and opencv
   python

   # initialize the list of class labels mobilenet ssd was trai
   # detect, then generate a set of bounding box colors for eac
   classes = ["background", "aeroplane", "bicycle", "bird", "bo
   	"bottle", "bus", "car", "cat", "chair", "cow", "diningtable
   	"dog", "horse", "motorbike", "person", "pottedplant", "shee
   	"sofa", "train", "tvmonitor"]______________________________
   colors = np.random.uniform(0, 255, size=(len(classes), 3))__
   20
   21
   22
   23
   24
   25
   26
   # initialize the list of class labels mobilenet ssd was trained to
   # detect, then generate a set of bounding box colors for each class
   classes = ["background", "aeroplane", "bicycle", "bird", "boat",
   "bottle", "bus", "car", "cat", "chair", "cow", "diningtable",
   "dog", "horse", "motorbike", "person", "pottedplant", "sheep",
   "sofa", "train", "tvmonitor"]
   colors = np.random.uniform(0, 255, size=(len(classes), 3))

   on lines 22-26 we initialize class  labels and corresponding random
   colors . for more information on these classes (and how the network was
   trained), please refer to [34]last week   s blog post.

   now, let   s load our model and set up our video stream:
   real-time id164 with deep learning and opencv
   python

   # load our serialized model from disk_______________________
   print("[info] loading model...")____________________________
   net = cv2.dnn.readnetfromcaffe(args["prototxt"], args["model
   ____________________________________________________________
   # initialize the video stream, allow the cammera sensor to w
   # and initialize the fps counter____________________________
   print("[info] starting video stream...")____________________
   vs = videostream(src=0).start()_____________________________
   time.sleep(2.0)_____________________________________________
   fps = fps().start()_________________________________________
   28
   29
   30
   31
   32
   33
   34
   35
   36
   37
   # load our serialized model from disk
   print("[info] loading model...")
   net = cv2.dnn.readnetfromcaffe(args["prototxt"], args["model"])

   # initialize the video stream, allow the cammera sensor to warmup,
   # and initialize the fps counter
   print("[info] starting video stream...")
   vs = videostream(src=0).start()
   time.sleep(2.0)
   fps = fps().start()

   we load our serialized model, providing the references to our prototxt
   and model files on line 30     notice how easy this is in opencv 3.3.

   next let   s initialize our video stream (this can be from a video file
   or a camera). first we start the videostream  (line 35), then we wait
   for the camera to warm up (line 36), and finally we start the frames
   per second counter (line 37). the videostream  and fps  classes are
   part of my imutils  package.

   now, let   s loop over each and every frame (for speed purposes, you
   could skip frames):
   real-time id164 with deep learning and opencv
   python

   # loop over the frames from the video stream________________
   while true:_________________________________________________
   	# grab the frame from the threaded video stream and resize 
   	# to have a maximum width of 400 pixels____________________
   	frame = vs.read()__________________________________________
   	frame = imutils.resize(frame, width=400)___________________
   ____________________________________________________________
   	# grab the frame dimensions and convert it to a blob_______
   	(h, w) = frame.shape[:2]___________________________________
   	blob = cv2.dnn.blobfromimage(cv2.resize(frame, (300, 300)),
   		0.007843, (300, 300), 127.5)______________________________
   ____________________________________________________________
   	# pass the blob through the network and obtain the detectio
   	# predictions______________________________________________
   	net.setinput(blob)_________________________________________
   	detections = net.forward()_________________________________
   39
   40
   41
   42
   43
   44
   45
   46
   47
   48
   49
   50
   51
   52
   53
   54
   # loop over the frames from the video stream
   while true:
   # grab the frame from the threaded video stream and resize it
   # to have a maximum width of 400 pixels
   frame = vs.read()
   frame = imutils.resize(frame, width=400)

   # grab the frame dimensions and convert it to a blob
   (h, w) = frame.shape[:2]
   blob = cv2.dnn.blobfromimage(cv2.resize(frame, (300, 300)),
   0.007843, (300, 300), 127.5)

   # pass the blob through the network and obtain the detections and
   # predictions
   net.setinput(blob)
   detections = net.forward()

   first, we read  a frame  (line 43) from the stream, followed by
   resizing it (line 44).

   since we will need the width and height later, we grab these now on
   line 47. this is followed by converting the frame  to a blob  with the
   dnn  module (lines 48 and 49).

   now for the heavy lifting: we set the blob  as the input to our neural
   network (line 53) and feed the input through the net  (line 54) which
   gives us our detections .

   at this point, we have detected objects in the input frame. it is now
   time to look at confidence values and determine if we should draw a box
   + label surrounding the object    you   ll recognize this code block from
   last week:
   real-time id164 with deep learning and opencv
   python

   	# loop over the detections_________________________________
   	for i in np.arange(0, detections.shape[2]):________________
   		# extract the confidence (i.e., id203) associated wi
   		# the prediction__________________________________________
   		confidence = detections[0, 0, i, 2]_______________________
   ____________________________________________________________
   		# filter out weak detections by ensuring the `confidence` 
   		# greater than the minimum confidence_____________________
   		if confidence > args["confidence"]:_______________________
   			# extract the index of the class label from the__________
   			# `detections`, then compute the (x, y)-coordinates of___
   			# the bounding box for the object________________________
   			idx = int(detections[0, 0, i, 1])________________________
   			box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])__
   			(startx, starty, endx, endy) = box.astype("int")_________
   ____________________________________________________________
   			# draw the prediction on the frame_______________________
   			label = "{}: {:.2f}%".format(classes[idx],_______________
   				confidence * 100)_______________________________________
   			cv2.rectangle(frame, (startx, starty), (endx, endy),_____
   				colors[idx], 2)_________________________________________
   			y = starty - 15 if starty - 15 > 15 else starty + 15_____
   			cv2.puttext(frame, label, (startx, y),___________________
   				cv2.font_hershey_simplex, 0.5, colors[idx], 2)__________
   55
   56
   57
   58
   59
   60
   61
   62
   63
   64
   65
   66
   67
   68
   69
   70
   71
   72
   73
   74
   75
   76
   77
   78
   # loop over the detections
   for i in np.arange(0, detections.shape[2]):
   # extract the confidence (i.e., id203) associated with
   # the prediction
   confidence = detections[0, 0, i, 2]

   # filter out weak detections by ensuring the `confidence` is
   # greater than the minimum confidence
   if confidence > args["confidence"]:
   # extract the index of the class label from the
   # `detections`, then compute the (x, y)-coordinates of
   # the bounding box for the object
   idx = int(detections[0, 0, i, 1])
   box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
   (startx, starty, endx, endy) = box.astype("int")

   # draw the prediction on the frame
   label = "{}: {:.2f}%".format(classes[idx],
   confidence * 100)
   cv2.rectangle(frame, (startx, starty), (endx, endy),
   colors[idx], 2)
   y = starty - 15 if starty - 15 > 15 else starty + 15
   cv2.puttext(frame, label, (startx, y),
   cv2.font_hershey_simplex, 0.5, colors[idx], 2)

   we start by looping over our detections , keeping in mind that multiple
   objects can be detected in a single image. we also apply a check to the
   confidence (i.e., id203) associated with each detection. if the
   confidence is high enough (i.e. above the threshold), then we   ll
   display the prediction in the terminal as well as draw the prediction
   on the image with text and a colored bounding box. let   s break it down
   line-by-line:

   looping through our detections , first we extract the confidence  value
   (line 60).

   if the confidence  is above our minimum threshold (line 64), we extract
   the class label index (line 68) and compute the bounding box
   coordinates around the detected object (line 69).

   then, we extract the (x, y)-coordinates of the box (line 70) which we
   will will use shortly for drawing a rectangle and displaying text.

   we build a text label  containing the class  name and the confidence
   (lines 73 and 74).

   let   s also draw a colored rectangle around the object using our class
   color and previously extracted (x, y)-coordinates (lines 75 and 76).

   in general, we want the label to be displayed above the rectangle, but
   if there isn   t room, we   ll display it just below the top of the
   rectangle (line 77).

   finally, we overlay the colored text onto the frame  using the y-value
   that we just calculated (lines 78 and 79).

   the remaining steps in the frame capture loop involve (1) displaying
   the frame, (2) checking for a quit key, and (3) updating our frames per
   second counter:
   real-time id164 with deep learning and opencv
   python

   	# show the output frame____________________________________
   	cv2.imshow("frame", frame)_________________________________
   	key = cv2.waitkey(1) & 0xff________________________________
   ____________________________________________________________
   	# if the `q` key was pressed, break from the loop__________
   	if key == ord("q"):________________________________________
   		break_____________________________________________________
   ____________________________________________________________
   	# update the fps counter___________________________________
   	fps.update()_______________________________________________
   80
   81
   82
   83
   84
   85
   86
   87
   88
   89
   # show the output frame
   cv2.imshow("frame", frame)
   key = cv2.waitkey(1) & 0xff

   # if the `q` key was pressed, break from the loop
   if key == ord("q"):
   break

   # update the fps counter
   fps.update()

   the above code block is pretty self-explanatory     first we display the
   frame (line 82). then we capture a key press (line 83) while checking
   if the    q    key (for    quit   ) is pressed, at which point we break out of
   the frame capture loop (lines 86 and 87).

   finally we update our fps counter (line 90).

   if we break out of the loop (   q    key press or end of the video stream),
   we have some housekeeping to take care of:
   real-time id164 with deep learning and opencv
   python

   # stop the timer and display fps information________________
   fps.stop()__________________________________________________
   print("[info] elapsed time: {:.2f}".format(fps.elapsed()))__
   print("[info] approx. fps: {:.2f}".format(fps.fps()))_______
   ____________________________________________________________
   # do a bit of cleanup_______________________________________
   cv2.destroyallwindows()_____________________________________
   vs.stop()___________________________________________________
   91
   92
   93
   94
   95
   96
   97
   98
   # stop the timer and display fps information
   fps.stop()
   print("[info] elapsed time: {:.2f}".format(fps.elapsed()))
   print("[info] approx. fps: {:.2f}".format(fps.fps()))

   # do a bit of cleanup
   cv2.destroyallwindows()
   vs.stop()

   when we   ve exited the loop, we stop the fps  counter (line 93) and
   print information about the frames per second to our terminal (lines 94
   and 95).

   we close the open window (line 98) followed by stopping the video
   stream (line 99).

   if you   ve made it this far, you   re probably ready to give it a try with
   your webcam     to see how it   s done, let   s move on to the next section.

real-time deep learning id164 results

   to see our real-time deep-learning based object detector in action,
   make sure you use the    downloads    section of this guide to download the
   example code + pre-trained convolutional neural network.

   from there, open up a terminal and execute the following command:
   real-time id164 with deep learning and opencv
   shell

   $ python real_time_object_detection.py \____________________
   	--prototxt mobilenetssd_deploy.prototxt.txt \______________
   	--model mobilenetssd_deploy.caffemodel_____________________
   [info] loading model..._____________________________________
   [info] starting video stream..._____________________________
   [info] elapsed time: 55.07__________________________________
   [info] approx. fps: 6.54____________________________________
   1
   2
   3
   4
   5
   6
   7
   $ python real_time_object_detection.py \
   --prototxt mobilenetssd_deploy.prototxt.txt \
   --model mobilenetssd_deploy.caffemodel
   [info] loading model...
   [info] starting video stream...
   [info] elapsed time: 55.07
   [info] approx. fps: 6.54

   provided that opencv can access your webcam you should see the output
   video frame with any detected objects. i have included sample results
   of applying deep learning id164 to an example video below:
   [35][real_time_object_detection_animation.gif]

   figure 1: a short clip of real-time id164 with deep learning
   and opencv + python.

   notice how our deep learning object detector can detect not only myself
   (a person), but also the sofa i am sitting on and the chair next to me
       all in real-time!

   the full video can be found below:

   iframe: [36]https://www.youtube.com/embed/hmfx1txjajc?feature=oembed

summary

   in today   s blog post we learned how to perform real-time object
   detection using deep learning + opencv + video streams.

   we accomplished this by combing two separate tutorials:
    1. [37]id164 with deep learning and opencv
    2. [38]efficient, threaded video streams with opencv

   the end result is a deep learning-based object detector that can
   process approximately 6-8 fps (depending on the speed of your system,
   of course).

   further speed improvements can be obtained by:
    1. applying skip frames.
    2. swapping different variations of mobilenet (that are faster, but
       less accurate).
    3. potentially using the quantized variation of squeezenet (i haven   t
       tested this, but imagine it would be faster due to smaller network
       footprint).

   in future blog posts we   ll be discussing deep learning id164
   methods in more detail.

   in the meantime, be sure to take a look at my book, [39]deep learning
   for id161 with python, where i   ll be reviewing object
   detection frameworks such as faster r-id98s and single shot detectors!

   if you   re interested in studying deep learning for id161 and
   image classification tasks, you just can   t beat this book     [40]click
   here to learn more.

downloads:

   if you would like to download the code and images used in this post,
   please enter your email address in the form below. not only will you
   get a .zip of the code, i   ll also send you a free 17-page resource
   guide on id161, opencv, and deep learning. inside you'll find
   my hand-picked tutorials, books, courses, and libraries to help you
   master cv and dl! sound good? if so, enter your email address and i   ll
   send you the code immediately!

   email address: ____________________

   download the code!

resource guide (it   s totally free).

   get your free 17-page id161 and deep learning resource guide
   pdf
   enter your email address below to get my free 17-page id161,
   opencv, and deep learning resource guide pdf. inside you'll find my
   hand-picked tutorials, books, courses, and python libraries to help you
   master id161 and deep learning!
   ____________________
   download the guide!

   [41]id98, [42]coco, [43]convolutional neural network, [44]deep learning,
   [45]machine learning, [46]opencv 3, [47]pascal voc, [48]real-time,
   [49]video, [50]video stream
   [51]id164 with deep learning and opencv
   [52]pre-configured amazon aws deep learning ami with python

580 responses to real-time id164 with deep learning and opencv

    1. daniel funseth september 18, 2017 at 10:55 am [53]#
       wow! this is really impressive, will it be able to run on a rpi 3?
       [54]reply
          + adrian rosebrock september 18, 2017 at 1:56 pm [55]#
            please see my reply to    fl  vio   .
            [56]reply
               o jibin john august 9, 2018 at 1:56 am [57]#
                 i have done cascade training for id164. can
                 you explain how you generate the three models protext
                 caffe etc used in your project
                 [58]reply
                    # adrian rosebrock august 9, 2018 at 2:45 pm [59]#
                      it   s too complicated of a process to explain in a
                      single blog post. you should read [60]this post to
                      understand the fundamentals of deep learning object
                      detection. i then cover how to train your own custom
                      deep learning id164s inside [61]deep
                      learning for id161 with python.
                      [62]reply
          + vijay march 26, 2019 at 1:48 pm [63]#
            hey adrian, can you please send me documentation of    real time
            id164    
            regarding what methods and algorithms used..and how it is
            different from other models?
            [64]reply
               o adrian rosebrock march 27, 2019 at 8:34 am [65]#
                 the method and algorithm used is documented in this post
                 and in [66]in this one.
                 [67]reply
    2. fl  vio rodrigues september 18, 2017 at 11:01 am [68]#
       hi, adrian. thanks a lot for another great tutorial. have you got a
       real-time example working on a pi 3? (maybe skipping frames?) i   m
       just using a pi (for opencv and dl) and i   d like to know to what
       extent is it   d be usable. what about the frame rate? nice work as
       always. cheers.
       [69]reply
          + adrian rosebrock september 18, 2017 at 1:56 pm [70]#
            i haven   t applied this method to the raspberry pi (yet) but i
            will very soon. it will be covered in a future blog post. i   ll
            be sharing any optimizations i   ve made.
            [71]reply
               o adams march 19, 2018 at 6:57 am [72]#
                 have you done it?
                 [73]reply
                    # adrian rosebrock march 19, 2018 at 4:54 pm [74]#
                      yes. refer to [75]this post.
                      [76]reply
                         @ priya july 9, 2018 at 8:41 am [77]#
                           hello adrian,
                           very helpful post. is it possible to only for
                           one type of class, that is only for the
                           detection of persons?
                         @ adrian rosebrock july 10, 2018 at 8:25 am [78]#
                           yes. see [79]see this post.
    3. nicolas september 18, 2017 at 11:01 am [80]#
       hi adrian.
       excelent, you are a great developer! but, i want to know how
       develop a face-tracking with opencv and python in the backend, but
       capturing video en canvas with html5 real-time and after draw and
       object depending of the backend  s response, for example, a
       moustache. too, this tracking has support with head movement and
       moustache adapts.
       thanks.
       [81]reply
    4. tommy september 18, 2017 at 11:22 am [82]#
       hi what   s the best fps on say a typical macbook assuming u used
       threading and other optimisations?
       [83]reply
          + tommy september 18, 2017 at 11:27 am [84]#
            in particular, does it mean if i used n threads to process the
            frames, the fps will be n times better?
            does the dnn module use any threading / multi-core underneath
            the hood?
            [85]reply
               o adrian rosebrock september 18, 2017 at 1:54 pm [86]#
                 no, the threading here only applies to polling of frames
                 from the video sensor. the threading helps with i/o
                 latency on the video itself. if you   re looking to speedup
                 the actual detection you should push the id164
                 to the gpu (which i think can only be done with the c++
                 bindings of opencv).
                 [87]reply
                    # peter december 21, 2017 at 12:58 am [88]#
                      hello adrian,
                      i plan to use jetson tx2 to do the id164
                      with deeplearning.
                      i don   t know if there will be faster if just port
                      the above code to tx2?
                      can i have better performance by using tx2 for the
                      upper code with opencv   s deep learning library?
                      or do you have any suggestions to make the object
                      detection faster on tx2, what framework and training
                      net is better? use mxnet + mobielnet?
                      [89]reply
                         @ adrian rosebrock december 22, 2017 at 6:57 am
                           [90]#
                           i haven   t tried this code with the tx2 yet, but
                           yes, in general this should run faster on the
                           tx2 provided you can run the model on the gpu
                           directly. i would suggest using the code as is
                           and then obtaining your benchmark. from there
                           it will be possible to provide suggestions. the
                           model included in the blog post uses the
                           mobilenet framework.
                    # peter january 4, 2018 at 10:10 pm [91]#
                      use c++ binding for opencv will speedup the
                      detection on tx2 lot than python binding? do you
                      have a bench mark?
                      [92]reply
                         @ adrian rosebrock january 5, 2018 at 1:30 pm
                           [93]#
                           sorry, i do not have a benchmark for the tx2
                           and python or c++ bindings.
                    # mirror january 28, 2018 at 9:34 am [94]#
                      hello,what should i do if i want to apply the
                      detection code to a local video on my computer??
                      [95]reply
                         @ adrian rosebrock january 30, 2018 at 10:28 am
                           [96]#
                           you can use the cv2.videocapture function and
                           provide the path to your input video. if you   re
                           new to working with opencv i would recommend
                           going through [97]practical python and opencv
                           where i teach the fundamentals. i hope that
                           helps point you on the right path!
                    # zhenyuchen march 19, 2018 at 9:41 pm [98]#
                      hi adrian,
                      i replaced the caffe model i trained myself, but i
                      didn   t show a rectangular box. i want to know what
                      the reason is, i look forward to your reply
                      best wishes   
                      thank you!
                      [99]reply
                         @ adrian rosebrock march 20, 2018 at 8:23 am
                           [100]#
                           the code in this post filters out    weak   
                           detections by discarding any predictions with a
                           confidence of less than 20%. you can try to set
                           the confidence to zero just to see if your
                           detections are being filtered out.
                           if not, your network is simply not returning
                           predictions for your input image. you should
                           consider training your network with (1) more
                           data and (2) data that more closely resembles
                           the test images.
          + adrian rosebrock september 18, 2017 at 1:55 pm [101]#
            i used my macbook pro to collect the results to this blog post
                approximately 5-7 fps depending on your system specs.
            [102]reply
    5. vinu september 18, 2017 at 1:00 pm [103]#
       thanks
       its so much help
       and i needs to detect only helmet in realtime
       [104]reply
          + ashwin venkat september 18, 2017 at 9:28 pm [105]#
            hi interesting thought, did it work
            [106]reply
    6. eng.aaa september 18, 2017 at 1:31 pm [107]#
       thanks for awesome tutorials .
       i have question about: can i track the location of the chair in
       video, i mean if the chair moving can i track its location.
       thanks
       [108]reply
          + adrian rosebrock september 18, 2017 at 1:52 pm [109]#
            i would suggest using id164 (such as the method
            used in this post) to detect the chair/object. then once you
            have the object detected pass the location into an object
            tracking algorithm, such as correlation tracking.
            [110]reply
               o eng.aaa september 18, 2017 at 5:59 pm [111]#
                 i hope it will cover with an example in new deep learning
                 book
                 thanks
                 [112]reply
    7. [113]sydney september 18, 2017 at 1:36 pm [114]#
       thanks for the tutorial man. the method is quite effective, running
       better on a cpu. i am still trying to figure out how i can use a
       video as my source instead of the webcam.
       [115]reply
          + adrian rosebrock september 18, 2017 at 1:52 pm [116]#
            thanks sydney, i   m glad it worked for you     
            as far as working with video files, [117]take a look at this
            post.
            [118]reply
    8. ashraf september 18, 2017 at 2:07 pm [119]#
       great article! continue the great way!
       [120]reply
          + adrian rosebrock september 18, 2017 at 2:21 pm [121]#
            thanks ashraf     
            [122]reply
    9. walid ahmed september 18, 2017 at 2:18 pm [123]#
       thanks. i waited for 18 sep to read this blog!
       just one questions , isnt 0.2 so low as confidence?
       would not this result in low precision?
       [124]reply
          + adrian rosebrock september 18, 2017 at 2:21 pm [125]#
            with id164 we typically have lower probabilities in
            the localization. you can tune the threshold id203 to
            your liking.
            [126]reply
   10. jacques september 18, 2017 at 2:18 pm [127]#
       hey mate,
       many thanks for the great example code     just what i needed :)..
       how would this perform on a pi 3? i intend testing it asap, but i
       would guess the classification function would be really slow (i was
       getting up to 4 seconds on your previous tutorial using cv dnn)?
       any views on how to compensate for the slower processor?
       do you believe that this code would be too much for the pi3?
       -j
       [128]reply
          + adrian rosebrock september 18, 2017 at 2:21 pm [129]#
            hi jacques     please see my reply to    fl  vio   . i haven   t yet
            tried the code on the raspberry pi but will be documenting my
            experience with it in a future blog post.
            [130]reply
   11. amitoz september 18, 2017 at 3:20 pm [131]#
       hey adrian,
       once we have detected an object, how difficult you think will it be
       to segment it in real time using deep learning? share ur insight
       pls.
       [132]reply
          + adrian rosebrock september 20, 2017 at 7:26 am [133]#
            id164 and object segmentation are two totally
            different techniques. you would need to use a deep learning
            network that was trained to perform object segmentation. take
            a look at deepmask.
            [134]reply
   12. kamel rush september 18, 2017 at 3:46 pm [135]#
       hi,
       i tried to run the code, but got this:
       file
          c:\programdata\miniconda33\lib\site-packages\imutils\convenience.p
       y   , line 69, in resize
       (h, w) = image.shape[:2]
       attributeerror:    nonetype    object has no attribute    shape   
       [136]reply
          + adrian rosebrock september 20, 2017 at 7:25 am [137]#
            it sounds like opencv cannot access your webcam. i detail
            common causes for nonetype errors in [138]this blog post.
            [139]reply
               o mohammed golam sarwer rakib march 24, 2019 at 11:12 am
                 [140]#
                 i solve this problem with enabling camera with typing in
                 terminal,
                 sudo modprobe bcm2835-v412
                 but image frame capturing is so slow.
                 what can i do for capturing every famre per every second
                 ?
                 [141]reply
                    # adrian rosebrock march 27, 2019 at 9:04 am [142]#
                      this method can run in real-time. what are the specs
                      of the system you are using? and what is your target
                      fps rate?
                      [143]reply
          + leopard li september 20, 2017 at 9:06 pm [144]#
            hi, have you resolved this problem? i got this problem too.
            but when i changed src=1 to src=0 in line    vs =
            videostream(src=1).start()   , it just worked!
            hope this could be helpful to you if it still bothers you.
            [145]reply
               o adrian rosebrock september 21, 2017 at 7:14 am [146]#
                 thank you for mentioning this. i used src=1 because i
                 have two webcams hooked up to my system. most people
                 should be using src=0 as they likely only have one
                 webcam. i will update the blog post.
                 [147]reply
          + enjoy september 28, 2017 at 9:02 am [148]#
            you can try change line35 :vs = videostream(src=0).start() to
            vs = videostream(usepicamera=args[   picamera   ] > 0).start()
            and add ap.add_argument(   -pi   ,       picamera   , type=int,
            default=-1,
            help=   whether or not the raspberry pi camera should be used   )
            after line 14
            it   s work for me
            [149]reply
               o abhi october 1, 2017 at 12:34 am [150]#
                 i get the attributeerror:    nonetype    object has no
                 attribute    shape error as well and i tried the solution
                 recommended by enjoy (since i am getting this error with
                 src=0) but the code does not run on my pi3. every time
                 run this code the os crashes and pi reboots. not sure
                 what i am doing wrong here. any help is appreciated.
                 [151]reply
                    # adrian rosebrock october 2, 2017 at 9:47 am [152]#
                      are you using a usb camera or the raspberry pi
                      camera module? please make sure opencv can access
                      your webcam. i detail these types of nonetype errors
                      and why they occur in [153]this post.
                      i   ll also be doing a deep learning id164
                      + raspberry pi post later this month.
                      [154]reply
                         @ abhi october 4, 2017 at 8:35 pm [155]#
                           i am using the raspberry pi camera. and i can
                           access the camera fine, since i tested it with
                           your pi home surveillance code.
                         @ abhi october 4, 2017 at 9:16 pm [156]#
                           also i forgot to mention that i tried the
                           following from your unifying pi camera and cv2
                           video capture post with the appropriate
                           argument.
                           # initialize the video stream and allow the
                           cammera sensor to warmup
                           vs = videostream(usepicamera=args[   picamera   ] >
                           0).start()
                         @ adrian rosebrock october 6, 2017 at 5:12 pm
                           [157]#
                           hi abhi     thank you for the additional
                           comments. unfortunately, without direct access
                           to your raspberry pi i   m not sure what the
                           exact issue is. i   ll be covering object
                           detection using deep learning on the raspberry
                           pi the week of october 16th. i would suggest
                           checking the code once i post the tutorial and
                           see if you have the same error.
               o dreamchaser october 8, 2017 at 11:36 pm [158]#
                 thanks for the post! i was having the same    nonetype   
                 error. i changed the camera source but that didn   t fix
                 it. i added your argument update, along with adding    pi=1
                 to the command line and it worked. thanks to the author
                 (and everyone else who have posted)     it   s great to have
                 help when you start.
                 [159]reply
                    # adrian rosebrock october 9, 2017 at 12:18 pm [160]#
                      thanks for the comment. i   ll be covering how to
                      perform real-time id164 with the
                      raspberry pi here on the pyimagesearch blog in the
                      next couple of weeks.
                      [161]reply
                    # deepak january 27, 2018 at 8:42 am [162]#
                      can you please mention the modifications??
                      [163]reply
          + zhenyuchen march 21, 2018 at 2:00 am [164]#
            i also encountered this problem. did you solve it? can you
            exchange it? thank you verymuch
            [165]reply
   13. [166]zakizadeh september 18, 2017 at 3:55 pm [167]#
       hi .
       i want to get position of specified object in image . all examples
       are about multi id164 . but i want to get position of
       only one object . for example i want to get position of a book in
       image , not all object in image . only one of them . how can i do
       that ?
       [168]reply
          + adrian rosebrock september 20, 2017 at 7:23 am [169]#
            first, you would want to ensure that your model has been
            trained to detect books. then you can simply ignore all
            classes except the book class by checking only the index and
            id203 associated with the book class. alternatively you
            could fine-tune your network to apply detect books.
            [170]reply
   14. kevin lee september 19, 2017 at 1:19 am [171]#
       thanks for great tutorial.
       is it running on the cpu? if so, is there a parameter we can change
       to gpu mode?
       kevin
       [172]reply
          + adrian rosebrock september 20, 2017 at 7:19 am [173]#
            this runs on the cpu. i don   t believe it   s possible to access
            the gpu via the python bindings. i would suggest checking the
            opencv documentation for the c++ bindings.
            [174]reply
   15. arvind gautam september 19, 2017 at 1:27 am [175]#
       hi adrian .
       its really a great tutorial .you are the rock star of computer
       vision .
       i have also implemented a faster-rid98 with vgg16 and zf network on
       my own sports videos to detect logos in the video.i am getting good
       accuracy with both the networks,but i am able to processed only 7-8
       frames/sec with vgg16 and 14-15 frames/sec with zf network .to
       process the video in real time,i am skipping every 5th frame. i
       have compared the results in both the cases (without skipping
       frames and skipping every 5th frame) having almost same accuracy
       .can you guide me that i am doing right thing or not ? what can be
       the optimal value of skipping the frame to process in real time
       without hurting the accuracy.
       [176]reply
          + adrian rosebrock september 20, 2017 at 7:17 am [177]#
            there is no real    optimal    number of frames to skip     you are
            doing the skip frames correctly. you normally tune the number
            of skip frames to give you the desired frame processing rate
            without sacrificing accuracy. this is normally done
            experimentally.
            [178]reply
               o sophia november 6, 2018 at 11:02 am [179]#
                 hi adrian, how do you modify the code (from lines 39-54)
                 to skip every nth frame? thanks,
                 [180]reply
          + cong march 14, 2018 at 3:30 am [181]#
            hi arvind,
            i have replaced the zf_test.prototxt and
            zf_faster_rid98_final.caffemodel files for use with zf, but i
            can   t get it working.
            can you teach me how to change the code to get it working like
            tutorial above (real-time id164) ?
            thx !
            [182]reply
   16. luke cheng september 19, 2017 at 2:32 am [183]#
       hi i   m just curious how you trained your caffe model because i feel
       like the training process you used could be really good. thanks!
       [184]reply
          + adrian rosebrock september 20, 2017 at 7:16 am [185]#
            please see my reply to    thang   .
            [186]reply
   17. david killen september 19, 2017 at 8:34 am [187]#
       this is very interesting, thank you. unless i missed it, you aren   t
       using prior and posterior probabilities across frames at all. i
       appreciate that if an object doesn   t move then there is no more
       information to be extracted but if it were to move slightly but
       change because of rotation or some other movement then there is
       some independence and the information can be combined. we can see
       this when you turn the swivel-chair; the software loses track of it
       when it   s face on (t=28 to t=30). is this something that can be
       done or is it too difficult?
       ps can you explain why the human-identification is centred
       correctly at the start of the full video but badly off at the end
       please? it   s almost as if the swivel chair on the left of the
       picture is pushing the human-box off to the right, but i can   t see
       why it would do that.
       [188]reply
          + adrian rosebrock september 20, 2017 at 7:13 am [189]#
            i   m only performing id164 in this post, not object
            tracking. you could apply object tracking to detected objects
            and achieve a smoother tracking. take a look at correlation
            tracking methods.
            as for the    goodness    of a detection this is based on the
            anchor points of the detection. i can   t explain the entire
            single shot detector (ssd) framework in a comment, but i would
            suggest reading the original paper to understand how the
            framework is used. please see the [190]first blog post in the
            series for more information.
            [191]reply
   18. jacques september 19, 2017 at 2:53 pm [192]#
       i ran it on my pi3 last night. works nicely! each frame takes a
       little over a second to classify. the rate is quite acceptable.
       cool work and looking forward to any optimisations that you think
       will work..
       how much do you think rewriting the app in c++ will increase the
       performance on the pi? i know cv is c/c++, but i am keen to profile
       the diff in a purely compiled language.
       [193]reply
          + adrian rosebrock september 20, 2017 at 7:09 am [194]#
            in general you can expect some performance increases when
            using c/c++. exactly how much depends on the algorithms that
            are being executed. since we are already using compiled opencv
            functions the primary overhead is the function call from
            python. i would expect a c++ program to execute faster but i
            don   t think it will make a substantial difference.
            [195]reply
   19. hubert de lassus september 19, 2017 at 8:45 pm [196]#
       great example code! thank you. how would you modify the code to
       read an mp4 file instead of the camera?
       [197]reply
          + adrian rosebrock september 20, 2017 at 7:00 am [198]#
            you would swap out the videostream class for a
            [199]filevideostream.
            [200]reply
               o rohit thakur january 10, 2018 at 2:50 am [201]#
                 can you please explain a little what do you mean by swap
                 out the videostream class? as i was trying to use this
                 code for mp4 file and got an error. please take a look:
                 [info] loading model   
                 [info] starting video stream   
                 traceback (most recent call last):
                 file    new.py   , line 49, in
                 frame = imutils.resize(frame, width=400)
                    
                 (h, w) = image.shape[:2]
                 attributeerror:    tuple    object has no attribute    shape   
                 if possible can you tell me where i have to modify the
                 code ?
                 [202]reply
                    # adrian rosebrock january 10, 2018 at 12:48 pm [203]#
                      by    swapping out    the videostream class i mean
                      either:
                      1. editing the videostream.py classes and subclasses
                      in your site-packages directory after installing
                      imutils
                      2. or more easily, copying the code and storing it
                      in your project and then importing your own
                      implementation of videostream rather than the one
                      from imutils
                      looking at your error, it appears your call to
                      .read() of videostream is returning tuple, not an
                      image. you would need to debug your code to resolve
                      this. using    print    statements can he helpful here.
                      [204]reply
   20. thang september 20, 2017 at 2:49 am [205]#
       many thanks, but can you show me how to program trained file as in
       your project you used mobilenetssd_deploy.caffemodel file.
       [206]reply
          + adrian rosebrock september 20, 2017 at 6:58 am [207]#
            as i mention in the [208]previous post the mobilenet ssd was
            pre-trained. if you   re interested in training your own deep
            learning models, in particular object detectors, you   ll want
            to go through the id163 bundle of [209]deep learning for
            id161 with python.
            [210]reply
   21. memeka september 20, 2017 at 5:55 am [211]#
       hi adrian,
       thanks for the great series of articles.
       i   ve tried this on an odroid xu4 (which is more powerful than the
       rpi     better cpu, better gpu, usb3)     with opencv compiled with
       neon optimizations and opencl enabled (odroid xu4 has opencl
       working, and gpu in theory should reach 60gflops).
       do you know if opencl is actually used by net.forward()? it would
       be interesting to benchmark gpu vs gpu if opencl is indeed used.
       i was able to run detection at 3fps (3.01 fps to be exact :d) with
       no optimizations and 640  480 resolution (no resize in the code),
       but i am confident i can reach >5fps with some optimizations,
       because:
       * i have my board underclocked to 1.7ghz (stock is 2 ghz, but i can
       try overclocking up to 2.2 ghz)
       * i think i/o was the bottleneck, since even underclocked, cpu
       cores were used ~60%; adding some threading and buffering to the
       input should speed things up
       * to remove some delay from gtk, i used gstreamer output to
       tcpsink, and viewed the stream with vlc. this would also work great
       in the    security camera    scenario, where you want to see a stream
       remotely over the web.
       (ps: with gstreamer     from command line     i can actually use the hw
       h264 encoder in the odroid; but the exact same pipeline     well,
       except the appsink detour     is not working in opencv python; this
       would be useful to save the cpu for detection and still have h264
       streaming, if i can make it work   )
       i can   t wait to see your optimizations for the rpi, i   ll keep you
       posted with the framerate i can get on my odroid     
       [212]reply
          + adrian rosebrock september 20, 2017 at 6:56 am [213]#
            i   m not sure if opencl is enabled by default, that   s a good
            question. and thanks for sharing your current setup! i   ll be
            doing a similar blog post as this one for the raspberry pi in
            the future     i   ll be sure to read through your comments and
            share optimizations and discuss which ones did or did not work
            (along with an explanation as to why). thanks again!
            [214]reply
               o memeka september 20, 2017 at 9:02 am [215]#
                 so i was wrong     webcam was not the bottleneck. even with
                 threading, i still get 3fps max. i timed and indeed
                 net.forward() takes 300ms. so the only way i may speed
                 this up is getting the cpu to 2 or 2.2ghz, and trying to
                 write it in c++   
                 [216]reply
                    # [217]mark november 20, 2017 at 6:27 am [218]#
                      fyi, when i switched my face tracking/detector code
                      on rpi3 from python to c++, i got more than 300%
                      extra fps improvement, now with multiple faces
                      tracked and resolution 640  480 i easily maintain
                      10-15fps on an optimised opencv 3.3.1.
                      now i   m exploring how to use movidious stick vpu 12
                      shaves to boost the performance further and get
                      similar fps with much higher resolutions   
                      [219]reply
                         @ peter january 4, 2018 at 10:39 pm [220]#
                           could you share your c++ code? i want to make a
                           benchmark on tx2 with opencv3.4 compared to
                           python bindings.
                           thanks
               o tom september 21, 2017 at 4:21 pm [221]#
                 for comparison:
                 running the script from this blog post gave 0.4 fps on
                 raspberry pi 3.
                 demo that comes with movidius compute stick running
                 squeezenet gives 3 fps, though having id136 in
                 separate thread from video frames display assures a nice
                 smooth experience. just mind that it does not support
                 raspbian stretch yet, so use archived card img   s (that   s
                 due to built in python 3.4 vs 3.5).
                 [222]reply
                    # adrian rosebrock september 22, 2017 at 8:57 am
                      [223]#
                      thanks for sharing tom!
                      [224]reply
   22. memeka september 21, 2017 at 2:08 am [225]#
       with c++, as expected, performance is very similar.
       i   ve tried using halide dnn, but cpu target didn   t really get an
       output (i lost patience after >10s), and opencl target resulted in
       a crash due to some missing function in some library   
       so 3 fps is as best as i could get in the end.
       with cpu at 2ghz, it scales it down to 1.8ghz due to heat.
       but still, cores don   t get used 100%     any idea why? as you can see
       from here: [226]https://imgur.com/a/d9tdp max usage stays just
       below 300% from the max 400%, and no core gets used more than 80%    
       do you know if this is an opencv thing?
       [227]reply
   23. ldw september 21, 2017 at 10:40 pm [228]#
       hi adrian, i tried running the code and got this : attributeerror:
          module    object has no attribute    dnn   
       any ideas what   s the issue? thanks in advance!
       [229]reply
          + ldw september 21, 2017 at 11:29 pm [230]#
            just to add on i   ve downloaded opencv 3.3   s zip file here. did
            i download at the wrong place, or did i download it the wrong
            way? what i did was just download the zip file from that
            website and added into my home from the archive manager. sorry
            for bothering!
            [231]reply
               o adrian rosebrock september 22, 2017 at 8:55 am [232]#
                 once you download opencv 3.3 you still need to compile
                 and install it. simply downloading the .zip files is not
                 enough. please see [233]this page for opencv install
                 instructions on your system.
                 [234]reply
                    # nermion december 7, 2017 at 7:40 am [235]#
                      hi adrian since you have no instructions for how to
                      run this on windows platform, does that mean opencv
                      and this tutorial is not compatible with windows
                      platform? if it is possible, got any links where
                      they talk how to set it up, so i can finish this
                      tutorial? thanks     
                      [236]reply
                         @ adrian rosebrock december 8, 2017 at 4:49 pm
                           [237]#
                           i don   t support windows here pyimagesearch
                           blog, i really recommend unix-based systems for
                           id161 and especially deep learning.
                           that said, if you have opencv 3.3 installed on
                           your windows machine this tutorial will work.
                           the official [238]opencv website provides
                           windows install instructions.
   24. roberto maurizzi september 22, 2017 at 4:02 am [239]#
       hi adrian, thanks for your many interesting and useful posts!
       i missed this post and i did try to adapt your previous post to do
       what you did here by myself, searching docs and more examples, to
       read frames from a stream coming from an onvif surveillance camera
       that streams rtsp h264 video.
       i   m having trouble with rtsp part: on windows i get warnings from
       the cv2.videocapture() call ([rtsp @ 000001c517212180] nonmatching
       transport in server reply     same from your imutils.videostream), on
       linux i get nothing but the capture isn   t detected as open.
       any advice about this? i already tried to check my ffmpeg
       installation, copied it to the same folder from which my python   s
       loading opencv dlls and if i try ffplay it can stream from the
       camera (after a few warnings:       circular_buffer_size    option was
       set but it is not supported on this build (pthread support is
       required)    )
       i was able to use ffserver to convert the rtsp stream from
       rtsp/h264 to a mjpeg stream, but it consumes more cpu than running
       the dnn    any advice?
       roberto
       [240]reply
          + roberto maurizzi september 22, 2017 at 4:36 am [241]#
            update: i suspect the reason is explained here:
            [242]http://answers.opencv.org/question/120699/can-opencv-310-
            be-set-to-capture-an-rtsp-stream-over-udp/
            [243]reply
               o adrian rosebrock september 22, 2017 at 8:52 am [244]#
                 it   s been a long time since i   ve tried rtsp. i   ve made a
                 note to cover this in a future blog post. thanks for the
                 comments!
                 [245]reply
                    # roberto maurizzi september 22, 2017 at 10:21 am
                      [246]#
                      i continued my research on a solution or workaround
                      and found opencvmerged this patch about 3 days ago:
                      [247]https://github.com/opencv/opencv/pull/9292/file
                      s
                      i   ll have to find some nightly builds and test it
                      again     
                      [248]reply
                         @ adrian rosebrock september 22, 2017 at 11:29 am
                           [249]#
                           thanks for sharing, roberto!
   25. lin september 22, 2017 at 5:06 am [250]#
       hi adrian,
       yesterday i leave a reply about the error like:
       attributeerror:    nonetype    object has no attribute    shape   
       but today i read the board carefully, found that someone has
       encountered the same problem.
       and i already resolve the problem .
       thanks.
       [251]reply
          + adrian rosebrock september 22, 2017 at 8:51 am [252]#
            thanks for the update, lin!
            [253]reply
          + adrian rosebrock september 22, 2017 at 8:58 am [254]#
            change src=0 and then [255]read this post on nonetype errors.
            [256]reply
   26. jorge september 23, 2017 at 10:48 pm [257]#
       hi adrian. thanks for your great job. im thinking about the
       possibility of applying the recognition only for people in real
       time on the video stream of four security cameras in mosaic. it
       would be like having someone watching four cameras at a time and
       triggering alerts if people are detected in x consecutive frames.
       maybe send an email with the pix. what do you think about this and
       how can be implemented?
       [258]reply
          + adrian rosebrock september 24, 2017 at 8:43 am [259]#
            you would need to have four video cameras around the area you
            want to monitor. depending on how they are setup you could
            stream the frames over the network, although this would
            include a lot of i/o latency. you might want to use a
            raspberry pi on each camera to do local on-board processing,
            although i haven   t had a chance to investigate how fast this
            code would run on the raspberry pi. you also might want to
            consider doing [260]basic motion detection as a first step.
            [261]reply
               o jorge september 24, 2017 at 9:38 am [262]#
                 i was referring to using the mosaic of the four cameras
                 as a single image and running the id98 detector of this
                 post on that image only for the person category. do you
                 think it would be possible? and what observation or
                 suggestion would you make?
                 [263]reply
                    # adrian rosebrock september 24, 2017 at 10:03 am
                      [264]#
                      ah, got it. i understand now.
                      yes, that is certainly possible and would likely
                      work. you might get a few false detections from time
                      to time, such as if there are parts of a person
                      moving in each of the four corners and a
                      classification is applied across the borders of the
                      detections. but that is easily remedied since you   ll
                      be constructing the mosaic yourself and you can
                      filter out detections that are on the borders.
                      so yes, this approach should work.
                      [265]reply
                         @ jorge september 24, 2017 at 10:18 am [266]#
                           thanks for the feedback adrian!!!
   27. enjoy september 24, 2017 at 12:56 am [267]#
       why ?
       traceback (most recent call last):
          
       (h, w) = image.shape[:2]
       attributeerror:    nonetype    object has no attribute    shape   
       [268]reply
          + adrian rosebrock september 24, 2017 at 8:41 am [269]#
            please see my reply to    lin    above. change src=0 in the
            videostream class. i   ve also updated the blog post to reflect
            this change.
            [270]reply
   28. [271]aleksandr rybnikov september 24, 2017 at 4:06 am [272]#
       hi adrian!
       thanks for the another great post and tutorial!
       as you   ve maybe noticed, bounding boxes are inaccurate     they   re
       very wide comparing to the real size of object. it happens due to
       the following thing: you   re using blobfromimage finction, but it
       takes a central crop from the frame. and this central crop goes to
       the ssd model. but later you multiply unit box coordinates by full
       frame size. to fix it you can simply pass cv.resize(frame,
       (300,300)) as first parameter of blobfromimage() and all will be ok
       [273]reply
          + adrian rosebrock september 24, 2017 at 8:41 am [274]#
            thank you for pointing this out, aleksandr! i   ve updated the
            code in the blog post. i   ll also make sure to do a tutorial
            dedicated to the parameters of cv2.blobfromimage (and how it
            works) so other readers will not run into this issue as well.
            thanks again!
            [275]reply
   29. enjoy september 24, 2017 at 10:44 am [276]#
       opencv: out device of bound (0-0): 1
       opencv: camera failed to properly initialize!
       [277]reply
          + adrian rosebrock september 24, 2017 at 12:26 pm [278]#
            please double-check that you can access your webcam/usb camera
            via opencv. based on your error messages you might have
            compiled opencv without video support.
            [279]reply
   30. ricardogomes september 24, 2017 at 9:46 pm [280]#
       nice tutorial, i managed to make it run in rpi but it detects
       objects with error, my television appeared as a sofa and the fan
       like chair. what could it be?
       [281]reply
          + ricardogomes september 24, 2017 at 9:48 pm [282]#
            in rpi it was very slow, would it need some kind of
            optimization?
            [283]reply
               o adrian rosebrock september 26, 2017 at 8:32 am [284]#
                 i   ll be covering deep learning-based id164
                 using the raspberry pi in the next two blog posts. stay
                 tuned!
                 [285]reply
   31. henry september 25, 2017 at 2:27 am [286]#
       hi adrian,
       nice tutorial, thank you so much.
       besides, can the same code accept rtsp/rtmp video stream?
       if the answer is    no   , do you know any python module that can
       support rtsp/rtmp as video stream input? many thanks.
       [287]reply
          + adrian rosebrock september 26, 2017 at 8:29 am [288]#
            this exact code couldn   t be used, but you could explore using
            the cv2.videocapture function for this.
            [289]reply
   32. [290]sydney september 26, 2017 at 11:16 am [291]#
       hie adrian. any pointers on how i can implement this as a web based
       application?
       [292]reply
          + adrian rosebrock september 28, 2017 at 9:28 am [293]#
            are you trying to build this as a rest api? or trying to build
            a system that can access a user   s webcam through the browser
            and then apply id164 to the frame read from the
            webcam?
            [294]reply
               o [295]sydney september 28, 2017 at 12:14 pm [296]#
                 i want to be able to upload a video using a web
                 interface, then perform id164 on the uploaded
                 video showing results on the webpage.
                 [297]reply
                    # adrian rosebrock september 28, 2017 at 12:29 pm
                      [298]#
                      can you elaborate on what you mean by    showing the
                      results   ? do you plan on processing the video in the
                      background and then once it   s done show the output
                      video to the user? if you can explain a little more
                      of what exactly you   re trying to accomplish and what
                      your end goal is myself and others can try to
                      provide suggestions.
                      [299]reply
                         @ sydney september 30, 2017 at 10:45 am [300]#
                           ok. i need to run the application on google
                           cloud platform and provide an interface for
                           users to upload their own videos.
                         @ adrian rosebrock october 2, 2017 at 9:57 am
                           [301]#
                           have users upload the videos and then bulk
                           process the videos in the background and save
                           the annotations. you can either then (1) draw
                           the bounding boxes on the resulting images or
                           (2) generate a new video via
                           [302]cv2.videowriter with the bounding boxes
                           drawn on top of them.
   33. memeka september 27, 2017 at 12:55 am [303]#
       hi adrian,
       as mentioned above, i am getting 3fps on detection (~330ms in
       net.forward()), and i   m saving the output via a gstreamer pipeline
       (convert to h264, then either store in file, or realtime streaming
       with hls).
       in order to improve the output fps, i decided to read a batch of 5
       frames, do detection on the first, then apply the boxes and text to
       all 5 before sending them to the gst pipeline.
       using cv2.videocapture, i end up with around the half the previous
       framerate (so an extra 300-350ms spent in 4xvideocapture.read()),
       which i am not very happy with.
       so i decided to modify imutils.webcamvideostream to do 5 reads, and
       i have (f1, f2, f3, f4, f5) = mywebcamvideostream.read()     using
       this approach i only lose ~50ms and i can get close to 15fps
       output. however, the problem here is that the resulting video has
       frames out of order. i tried having the 5 read() protected by a
       lock, but without much success.
       any suggestion on how i can keep the correct frame order with
       threaded webcamvideostream?
       thanks.
       [304]reply
          + adrian rosebrock september 27, 2017 at 6:40 am [305]#
            the webcamvideostream class is threaded so i would suggest
            using a thread-safe data structure to store the frames.
            something like python   s queue class would be a really good
            start.
            [306]reply
               o memeka september 27, 2017 at 8:28 am [307]#
                 thanks adrian,
                 i figured out what the problem was: reading 5 frames was
                 actually taking longer than net.forward(), so
                 webcamvideostream was returning the same 5 frames as
                 before; by reducing the batch to 4 frames, and also
                 synchronising the threads, i managed to get 2.5 fps
                 detected + extra 3 frames for each detection for a total
                 of 10fps webcam input/ pipeline output.
                 [308]reply
                    # adrian rosebrock september 27, 2017 at 8:49 am
                      [309]#
                      congrats on resolving the issue! the speed your
                      getting is very impressive, i   ll have to play around
                      with the odroid in the future     
                      [310]reply
                         @ memeka september 28, 2017 at 4:58 am [311]#
                           thanks adrian
                           since there are many here who, like me, would
                           like to use this for a security camera, i would
                           like to share my end script, maybe somebody
                           else would find it useful:
                           [312]http://paste.debian.net/988135/
                           it reads the input from a .json file, such as:
                           [313]http://paste.debian.net/988136/
                           * gst_input defines the source (doesn   t
                           actually have to be gst,    0    will work for
                           /dev/video0 webcam)
                           * gst_output defines the output
                           * batch_size defines the number of frames read
                           at once. on my system, 4 was optimal (reading 4
                           frames took similar amount of time to detection
                           on 1 frame)
                           * base_confidence defines the minimum
                           confidence for an object to be considered
                           * detect_classes contains
                              class_name   :   confidence    that you want to
                           track (e.g.    person   ). note that confidence
                           here can be lower than    base_confidence   
                           * detect_timeout defines a time (in s) since a
                           class is considered    detected    again. e.g. if
                           detect_time = 10s, and same class was detected
                           2s ago, it won   t be considered    detected    again
                           * detect_action contains a script to be
                           executed on detection. script needs to have as
                           input    class   ,    confidence   , and    filename   
                           the output video (e.g. the hls stream in the
                           json example above) contains all classes
                           detected w/ surrounding boxes and labels. of
                           course, detection is done only on the 1st frame
                           out of batch_size, but all frames have the
                           boxes and labels.
                           on detecting a class specified in
                              detect_classes   , the script saves the image in
                           a    detected    folder (in the format
                           timestamp_classname.jpg), then executes the
                           action specified.
                           in my case, i can always watch the stream
                           online and see what the camera detects, but i
                           can choose to have an action taken (e.g. send
                           email/notification with a picture) when certain
                           objects are detected.
                           with ~330ms net.forward() and a batch of 4, i
                           can achieve reliably 10fps output.
                           if somebody has suggestions on how i can
                           improve this, please leave a comment     
                         @ adrian rosebrock september 28, 2017 at 8:58 am
                           [314]#
                           awesome, thanks for sharing memeka!
   34. ying september 27, 2017 at 12:34 pm [315]#
       hi adrian,
       thank you so much for your tutorial! i am a big fan!
       i was wondering can i use pre recorded video clips instead of live
       camera to feed the video stream? could you suggest how i can
       achieve this please?
       [316]reply
          + adrian rosebrock september 28, 2017 at 9:12 am [317]#
            yes. please see my reply to    hubert de lassus   .
            [318]reply
   35. tiago september 27, 2017 at 4:36 pm [319]#
       how can i provide the    prototxt and    model direct argument in
       source code?
       args = vars(ap.parse_args())
       [320]reply
          + adrian rosebrock september 28, 2017 at 9:06 am [321]#
            please read up on [322]command line arguments. you need to
            execute the script via the command line     that is where you
            supply the arguments. the code does not have to be edited.
            [323]reply
   36. foobar october 1, 2017 at 8:30 pm [324]#
       when the network was trained did the training data have bounding
       boxes in it? or was it trained without and opencv can just get the
       bounding boxes by itself?
       [325]reply
          + adrian rosebrock october 2, 2017 at 9:37 am [326]#
            when you train an object detector you need the class labels +
            the bounding boxes. opencv cannot generate the bounding boxes
            itself.
            [327]reply
               o foobar october 2, 2017 at 8:22 pm [328]#
                 are the bounding boxes drawn on the training data or is
                 there some other method of doing it?
                 [329]reply
                    # adrian rosebrock october 3, 2017 at 11:05 am [330]#
                      the bounding boxes are not actually drawn on the raw
                      image. the bounding box (x, y)-coordinates are saved
                      in a separate file, such as a .txt, .json, or .xml
                      file.
                      [331]reply
                         @ foobar october 3, 2017 at 4:26 pm [332]#
                           thank you adrian for your help.
   37. jussi wright october 5, 2017 at 4:38 am [333]#
       hi,
       i got the detector to work on the video with the help of your
       another blog
       ([334]https://www.pyimagesearch.com/2017/02/06/faster-video-file-fp
       s-with-cv2-videocapture-and-opencv/).
       but i have a couble of supplementary questions.
       1. how can i easily get a saved video where recognizations are
       displayed (can i use cv2.imwrite)?
       2. how can i remove the unnecessary labels i do not need (cat,
       bottle etc). removing only the label name produces an error code.
       3. how do i adjust the code so that only the detections with an
       accuracy of more than 70-80% are displayed.
       4. do you know ready models for identifying road signs, for
       example?
       [335]reply
   38. jussi october 5, 2017 at 6:18 am [336]#
       ok, i found a point for adjusting the accuracy of the detection:
       ap.add_argument(   -c   ,       confidence   , type=float, default=0.2 <   
       also i found your blog
       ([337]https://www.pyimagesearch.com/2016/02/22/writing-to-video-wit
       h-opencv/), but i could not find the right settings for me    i get
       error:
          argument -c/   codec: conflicting option string: -c
       [338]reply
          + adrian rosebrock october 6, 2017 at 5:06 pm [339]#
            you need to update your command line arguments. if you have
            conflicting options, change the key for the command line
            arguments. i would suggest reading up on [340]command line
            arguments before continuing.
            to address your other questions:
            1. answered from your comment.
            2. you cannot remove just the label name. check the index of
            the label (i.e., idx) and ignore all that you are uninterested
            in.
            3. provide --confidence 0.7 as a command line arguments.
            4. it really depends on the road signs. most road signs are
            different in various countries.
            [341]reply
   39. chetan j october 6, 2017 at 3:55 am [342]#
       hi,
       great work, nice tutorial
       just one question, i tried to run this code in my system, it works
       nice but have delay 5 to 8 sec to detect objects.
       how to overcome this problem.
       [343]reply
          + adrian rosebrock october 6, 2017 at 4:54 pm [344]#
            what are the specs of your system? 5-8 seconds is a huge
            delay. it sounds like your install of opencv may not be
            optimized.
            [345]reply
               o chetan j october 9, 2017 at 3:15 am [346]#
                 hi,
                 im using reaspbeyy pi 3- code runs fine but have delay of
                 5 to 8 sec.
                 how to resolve this problem
                 [347]reply
                    # adrian rosebrock october 9, 2017 at 12:14 pm [348]#
                      i will be discussing optimizations and how to
                      improve the frames per second id164 rate
                      on the raspberry pi in future posts. i would suggest
                      [349]starting here with a discussion on how to
                      optimize your opencv + raspberry pi install.
                      [350]reply
               o [351]inayatullah october 16, 2017 at 3:44 am [352]#
                 i have reimplemented the same, but with using sddcaffe
                 for python.when i detector is applied on every second
                 frame then on my system i can get 12 to 14 frames per
                 second. my code is available here
                 [353]https://github.com/inayatkh/realtimeobjectdetection
                 [354]reply
                    # adrian rosebrock october 16, 2017 at 12:19 pm [355]#
                      thanks for sharing, inayatullah!
                      [356]reply
   40. chetan j october 7, 2017 at 9:51 am [357]#
       i   m using raspberry pi 3,
       code runs fine but slower operation
       [358]reply
   41. vinu october 9, 2017 at 7:29 pm [359]#
       hi adrin
       how can i assign a unique id number to each and every human object
       [360]reply
          + adrian rosebrock october 13, 2017 at 9:16 am [361]#
            what you   re referring to is called    object tracking   . once you
            detect a particular object you can track it. i would suggest
            researching correlation trackers. centroid-based tracking
            would be the easiest to implement.
            [362]reply
   42. justin october 9, 2017 at 10:19 pm [363]#
       hi adrian.
       thank you for this post.
       i followed you and made it with rpi3
       but too slow   
       how can i fix it?
       and when i started real_time_~.py
       i got this message.
       [info] loading model   
       [info]starting video stream   
       ** (frame:3570): warning **: error retrieving accessibility bus
       address: org.freedesktop.dbus.error.serviceunknown: the name
       org.a11y.bus was not provided by any .service files
       what should i do??
       [364]reply
          + adrian rosebrock october 13, 2017 at 9:12 am [365]#
            please see [366]this post on optimizing the raspberry pi for
            opencv. the commenter    jsmith    also has a solution.
            for what it   s worth, this is not an error message. it   s just a
            warning from the gui library and it can be ignored.
            [367]reply
               o stevie t. may 13, 2018 at 6:42 pm [368]#
                 i don   t get it. i have the same error and the page didn   t
                 say anything. can you tell me a command i can put in to
                 bypass it if it is not a real error.
                 [369]reply
                    # adrian rosebrock may 14, 2018 at 11:55 am [370]#
                      [371]here is a direct link to the comment i am
                      referring to. give the solution a try and let us
                      know if it works. i am curious myself.
                      [372]reply
   43. dim october 10, 2017 at 1:25 am [373]#
       first of all     thank you forbthia tutorial     very informative.
       maybe i missed this but do you have any tutorials on real time
       custom id164? i want to add additinal object that is not
       included in the trained model   
       [374]reply
          + adrian rosebrock october 13, 2017 at 9:11 am [375]#
            hi dim     i cover id164 in detail inside the
            [376]pyimagesearch gurus course. i would suggest starting
            there.
            [377]reply
   44. mindfreak october 11, 2017 at 9:59 am [378]#
       great work sir.
       but while i am trying to run code it gives me error:
       attributeerror: module    cv2    has no attribute    dnn   
       how to solve this error?
       i am using opencv 3.2.0 version.
       thanks in advance..
       [379]reply
          + adrian rosebrock october 13, 2017 at 8:56 am [380]#
            the dnn module is only available in opencv 3.3 and newer.
            please upgrade to opencv 3.3 and you   ll be able to run the
            code.
            [381]reply
   45. mahsa october 12, 2017 at 8:32 am [382]#
       thank you for this awesome tutorial, this works quite nice on my
       laptop computer whereas it has too much delay on odroid (which i
       might try out the optimized opencv you   ve posted)
       but is there a way to retrain the exact model but with fewer
       classes?? since i only need two of those classes.
       [383]reply
          + adrian rosebrock october 13, 2017 at 8:45 am [384]#
            you would need to apply fine-tuning to reduce the number of
            classes or you can just ignore the indexes of classes you
            don   t care about. however, keep in mind that the total number
            of classes isn   t going to significantly slow down the network.
            yes, less classes means less computation     but there is a ton
            of computation and depth earlier in the network.
            [385]reply
   46. shenghui yang october 13, 2017 at 3:53 pm [386]#
       hi adrian
       thanks for the wonderful tutorial. i have a small question. i got
       an error when running codes:
       attributeerror:    module    object has no attribute    dnn   
       i have installed the opencv3.3.0, and it works. how can i deal with
       it?
       thank you.
       [387]reply
          + adrian rosebrock october 14, 2017 at 10:38 am [388]#
            id48, i know you mentioned having opencv 3.3 installed but it
            sounds like you may not have it properly installed. what is
            the output o:
            python

            $ python____________________________________________________
            >>> import cv2______________________________________________
            >>> cv2.__version___________________________________________
            ____________________________________________________________

   1

   2

   3

   $ python

   >>> import cv2

   >>> cv2.__version__
            [389]reply
   47. [390]andrey october 16, 2017 at 12:37 pm [391]#
       this is very motivational post to try this technique. thank you
       adrian.
       how difficult it would be to switch to tensorflow instead?
       [392]reply
          + adrian rosebrock october 16, 2017 at 12:54 pm [393]#
            tensorflow instead of caffe? that depends on the model. you
            would need a tensorflow-based model trained for object
            detection. as far as i understand, the opencv loading
            capabilities of pre-trained tensorflow models is still in
            heavy development and not as good as the caffe ones (yet). for
            what it   s worth, i   ll be demonstrating how to train your own
            custom deep learning object detectors and then deploy them
            inside [394]deep learning for id161 with python.
            [395]reply
               o [396]andrey cheremskuy october 17, 2017 at 9:04 am [397]#
                 thank you.
                 [398]reply
   48. adel october 18, 2017 at 6:32 pm [399]#
       thanks very much for the tutorial     how train the ssd for custome
       data like hand detection ?
       [400]reply
          + adrian rosebrock october 19, 2017 at 4:45 pm [401]#
            i am covering how to train your own custom deep learning
            object detectors (such as faster r-id98 and ssd) inside my
            book, [402]deep learning for id161 with python.
            [403]reply
   49. sunil badak october 19, 2017 at 11:42 am [404]#
       hi adrian,
       we are doing a final year b.e project in which we need to give the
       movement to the robot depending upon the object that robot has
       detected , in such way that that robot will approach the detected
       object. any idea how to achieve this?. thanks
       [405]reply
          + adrian rosebrock october 19, 2017 at 4:42 pm [406]#
            congrats on doing your final b.e. project, that   s very
            exciting. exactly how you achieve this project is really
            dependent on your robot and associated libraries. are you
            using a raspberry pi? if so, take a look at the gpio libraries
            to help you get started.
            [407]reply
   50. john mcdonald october 20, 2017 at 9:17 pm [408]#
       adrian, this is amazing. but what if we want to detect something
       else besides a chair etc. how could we make our own detector?
       [409]reply
          + adrian rosebrock october 22, 2017 at 8:36 am [410]#
            hi john     i   m actually covering how to train your own deep
            learning-based object detectors inside [411]deep learning for
            id161 with python. be sure to take a look!
            [412]reply
   51. darren october 22, 2017 at 7:13 am [413]#
       will this work on mobile phones? because im currently working with
       id164 also but im using mobile phones for it
       [414]reply
          + adrian rosebrock october 22, 2017 at 8:22 am [415]#
            this code is for python so you would need to translate it to
            the opencv bindings for the programming language associated
            with your phone, typically java, swift, or objective-c.
            [416]reply
   52. ying october 23, 2017 at 11:47 am [417]#
       hi adrian,
       can i use other caffe model to run this python code? e.g. yolov2,
       etc?
       [418]reply
          + adrian rosebrock october 23, 2017 at 12:20 pm [419]#
            opencv 3.3   s    dnn    module is still pretty new and not all
            caffe models/layers are supported; however, a good many are.
            you   ll need to test with each model you are interested in.
            [420]reply
   53. justin october 23, 2017 at 12:15 pm [421]#
       hi adrian! i   m back!
       thank you for the answer again.
       now, i   m trying to use this program for my school project.
       i want to make a sushi detection machine.
       so i need to have the pre-trained data(sushi images caffemodel).
       how can i get it? how can i train and get my own data?
       please let me know. thank you
       have a good day.
       [422]reply
          + adrian rosebrock october 23, 2017 at 12:18 pm [423]#
            hi justin     i would like to refer you over to my book,
            [424]deep learning for id161 with python where i
            discuss how to train your own custom deep learning classifiers
            in detail.
            [425]reply
   54. win october 24, 2017 at 11:30 am [426]#
       hi i just want to ask what are the possible algorithms that you   ve
       used in doing it thanks
       [427]reply
          + adrian rosebrock october 24, 2017 at 2:49 pm [428]#
            hi win     this blog post was part of a two part series and i
            detailed mobilenet single shot detectors (the algorithm used)
            in the prior week   s blog post. you can access that blog post
            here: [429]id164 with deep learning and opencv.
            [430]reply
               o peter january 4, 2018 at 9:37 pm [431]#
                 hello adrian,
                 i saw the latest opencv version 3.4 was released. an in
                 the release note, it says that     in particular,
                 mobilenet-ssd networks now run ~7 times faster than in
                 opencv 3.3.1.    
                 so i thought if i use the opencv3.4 for your
                 real_time_object_detection.py code, the fps will increase
                 a lot. but in fact, it seems that there no significantly
                 improvement with 3.4.
                 1. i used the tx2 platform for the test, one is for
                 opencv3.3 binding with python3.5. the other test is
                 opencv3.4 binding with opencv3.4 with cuda support
                 ([432]http://www.jetsonhacks.com/2017/04/05/build-opencv-
                 nvidia-jetson-tx2/)
                 do you know where is the problem?
                 2. my goal is to reach the 24 fps for id164 on
                 an embedded platform, now i am trying mobilenet-ssd on
                 tx2 with opencv dnn lib, but seems there is a big gap. do
                 you have any suggestions?
                 thanks very much. waiting for your replay   .
                 [433]reply
               o peter january 4, 2018 at 10:03 pm [434]#
                 on tx2 with opencv3.4 with cuda support, only ~5fps for
                 400*400
                 nvidia@tegra-ubuntu:~/downloads/real-time-object-detectio
                 n$ python real_time_object_detection.py    prototxt
                 mobilenetssd_deploy.prototxt.txt    model
                 mobilenetssd_deploy.caffemodel
                 [info] loading model   
                 [info] starting video stream   
                 [info] elapsed time: 64.09
                 [info] approx. fps: 5.30
                 [435]reply
   55. ife ade october 31, 2017 at 9:48 am [436]#
       hi, please i was wondering if there is a way i could count the
       number of detection in any image that is passed through the
       network. thansk
       [437]reply
          + adrian rosebrock november 2, 2017 at 2:46 pm [438]#
            count the number of detections per object? or for all objects?
            in either case i would use a python dictionary with the object
            index as the key and the count as the value. you can then loop
            over the detections, check to see if the detection passes the
            threshold, and if so, update the dictionary.
            at the end of the loop you   ll have the object counts. to
            obtain the number of all objects in the image just sum the
            values of the dictionary.
            [439]reply
               o yadullah abidi may 2, 2018 at 11:29 am [440]#
                 hey adrian, i was trying this approach of yours but it
                 doesn   t work. for eg. i open my webcam the am the only
                 person (and object) detected. the confidence is above 90%
                 and the counter just keeps going up. let   s say there are
                 4 people in the video stream i am passing to the dnn.
                 i   ve implemented if (classes[idx]==   person   ): so that
                 only humans get marked. now in this case as soon as a
                 person is detected with a 90% confidence, the counter
                 just keeps going up.
                 how do i solve this?
                 [441]reply
                    # adrian rosebrock may 3, 2018 at 9:32 am [442]#
                      you nee to reset your dictionary at the end of your
                      loop. i assume you are counting on a per-frame
                      basis, right? if you do not reset your dictionary,
                      then yes, the counter will keep going up.
                      [443]reply
                         @ yadullah abidi may 4, 2018 at 2:43 am [444]#
                           i assume by resetting my dictionary you are
                           referring to the dict.clear() method which just
                           empties the whole dictionary. i don   t see how
                           does that help me in a video stream. i need to
                           count the number of detections and show them on
                           the output screen at all times which means i
                           need to save them in a variable.
                         @ adrian rosebrock may 9, 2018 at 10:33 am [445]#
                           in that case you would need to apply object
                           tracking methods so you don   t accidentally
                              recount    objects that were already counted. be
                           sure to take a look at object tracking
                           algorithms such as    centroid tracking    and
                              correlation tracking   .
   56. olivia november 10, 2017 at 7:51 am [446]#
       hallo adrian,
       i have an project to detect an object from ycbcr video streaming
       and cropping the object.
       do you have a tutorial that can help me? thanks a lot adrian..
       [447]reply
          + adrian rosebrock november 13, 2017 at 2:12 pm [448]#
            i would suggest basic [449]template matching to get you
            started.
            [450]reply
   57. apollo november 20, 2017 at 5:46 am [451]#
       thank you for your great help. could you explain how we can count
       passenger with bus embed overhead camera
       [452]reply
          + adrian rosebrock november 20, 2017 at 3:48 pm [453]#
            i would start with [454]simple motion detection as a starter.
            from there you might want to consider [455]training an object
            detector for overhead views of people.
            [456]reply
   58. chandiran november 21, 2017 at 7:30 am [457]#
       hi sir,
       i would like detect whether in webcam mobile phone is showing or
       not..whether this program will help me or not sir..if it so how can
       i do it?help me sir.
       [458]reply
   59. rocky november 21, 2017 at 8:22 pm [459]#
       i stumbled upon your website. this is just awesome and thank you
       for the detailed description. i am getting some ideas on how i can
       apply your iconcepts/code to other areas     
       i am thinking to apply this on my project which is to highlight
       text on a computer screen. the idea is simple an user points his
       mouse to a text which may be in a word document or pdf or picture
       on his computer screen. if there exists a same word across his
       screen that will be highlighted. i know this is different but this
       still using the real time screen recording video stream and
       tracking the highlighted words. do you think this can be achieved
       or do you have any good ideas ? thanks again
       [460]reply
          + adrian rosebrock november 22, 2017 at 9:58 am [461]#
            this seems doable, especially if the fonts are the same. there
            are many ways to approach this problem but if you   re just
            getting started i would use [462]multi-scale template
            matching. more advanced solutions would attempt to [463]ocr
            both texts and compare words.
            [464]reply
   60. sagar november 24, 2017 at 9:20 am [465]#
       i am trying to use this code for googlenet. but it is not working
       and i can   t find the changes. can you please suggest me some
       changes in the code for implement bvlc_googlenet.caffemodel and
       bvcl_googlenet.prototxt .
       [466]reply
          + adrian rosebrock november 25, 2017 at 12:24 pm [467]#
            hi sagar     i   m not sure what you mean by    it   s not working and
            i can   t find the changes   . could you elaborate?
            [468]reply
   61. jacqueline november 24, 2017 at 5:10 pm [469]#
       i am using my macbook pro and within virtualbox ubuntu doing all of
       the tutorials. for some reason, i keep getting the message:    no
       module named imutils.video.    any idea why this may be? i did the
       tutorial on drawing the box around the red game and that worked.
       [470]reply
          + adrian rosebrock november 25, 2017 at 12:19 pm [471]#
            make sure you install imutils into your python virtual
            environment:
            python

            $ workon your_env_name______________________________________
            $ pip install imutils_______________________________________
            ____________________________________________________________
            ____________________________________________________________

   1

   2

   $ workon your_env_name

   $ pip install imutils
            [472]reply
   62. jaitun december 2, 2017 at 6:53 am [473]#
       hey adrian! the code is just wonderful, but i have one question.
       once we have tracked these objects how could be track them? i saw
       your blog for tracking a ball but how will we track so many
       detected objects from their coordinates.
       [474]reply
          + adrian rosebrock december 2, 2017 at 7:16 am [475]#
            once you have an object detected you can apply a dedicated
            tracking algorithm. i   ll be covering tracking algorithms here
            on the pyimagesearch blog, but in the meantime take a look at
               correlation tracking    and    centroid tracking   . centroid
            tracking is by far the easiest to implement. i hope that
            helps!
            [476]reply
   63. zaira zafar december 2, 2017 at 9:34 am [477]#
       i tried calling the protext and model through file system. but it
       gives me an error on reading the model file. can you please guide
       me on how to read the files through file system, instead of passing
       them as arguements?
       [478]reply
          + adrian rosebrock december 5, 2017 at 7:55 am [479]#
            if you do not want to parse command line arguments you can
            hardcode the paths in your script. you   ll want to delete all
            code used for command line arguments and then create variables
            such as:
            python

            prototxt_path = "mobilenetssd_deploy.prototxt.txt"__________
            model_path = "model mobilenetssd_deploy.caffemodel"_________
            ____________________________________________________________
            ____________________________________________________________

   1

   2

   prototxt_path = "mobilenetssd_deploy.prototxt.txt"

   model_path = "model mobilenetssd_deploy.caffemodel"
            and from there use the hardcoded paths.
            this is really overkill though and if you [480]read up on
            command line arguments you   ll be able to get the script up and
            running without modifying the code.
            it might also be helpful to see the command you are trying to
            execute.
            [481]reply
               o zaira zafar december 9, 2017 at 7:12 am [482]#
                 it   s a user oriented application, like snapchat uses
                 learning. i can   t have user passing parameters, user
                 needs to remain ignorant of what is happening in the
                 code.
                 [483]reply
                    # adrian rosebrock december 9, 2017 at 7:20 am [484]#
                      in that case you should hardcode the parameters. how
                      you package up and distribute the project is up to
                      you but a configuration file or hardcoded values are
                      your best bet.
                      [485]reply
          + wajeeha january 4, 2018 at 5:46 am [486]#
            dear zaira, i am facing same issue. can you please guide me
            how you run this code after getting this isuue.
            [487]reply
   64. fardan december 11, 2017 at 2:45 am [488]#
       hello ardian, i   m wondering, how does the ssd doing the image
       pre-processing step? so they can detect the region proposal. sorry
       for my fool question
       [489]reply
          + adrian rosebrock december 12, 2017 at 9:13 am [490]#
            which pre-processing step are you referring to? calling
            cv2.dnn.blobfromimage on the input frame pre-processes the
            frame and prepares it for prediction.
            [491]reply
   65. tarik december 18, 2017 at 3:08 pm [492]#
       hello adrian,
       thanks for great tutorial. i have a question regarding the number
       of classes. is there any model from caffe that we can use for more
       classes? if so, can you please point me where i can download use in
       a way that described in this tutorial. thanks!
       [493]reply
          + adrian rosebrock december 19, 2017 at 4:18 pm [494]#
            hey tarik     what you are referring to is    id21   ,
            in particular    fine-tuning   . i cover these methods in detail
            inside [495]deep learning for id161 with python.
            [496]reply
   66. nicolas december 23, 2017 at 3:25 am [497]#
       how can i train new objects? i do not see the image database!
       [498]reply
          + adrian rosebrock december 26, 2017 at 4:36 pm [499]#
            for training networks for your own custom objects please take
            a look at [500]this github repo. the model used in this blog
            post was pre-trained by the author of the github i just linked
            to. if you   re interested in training your own custom object
            detectors from scratch i would also refer you to [501]deep
            learning for id161 with python.
            [502]reply
   67. huzzi december 25, 2017 at 4:19 pm [503]#
       hey! this was pretty neat and i am looking forward to taking it
       further from here.
       i have a few things to clarify: entering q in the console doesn   t
       seem to quit the program. i believe entering q is supposed to break
       out of the while loop but it doesn   t seem to do so.
       also, out of curiosity, did you develop algorithms for mobilenet
       ssd? and is it only trained for specific objects as mentioned when
       defining a class?
       [504]reply
          + adrian rosebrock december 26, 2017 at 3:58 pm [505]#
            you need to click on the active window opened by opencv and
            then hit the q key. this will close the window.
            i did not train this particular mobilenet ssd. a network can
            only predict objects that it was trained on. however, i do
            train ssds (and other deep learning id164
            algorithms) inside [506]deep learning for id161 with
            python.
            [507]reply
               o huzzi january 9, 2018 at 1:00 pm [508]#
                 for autonomous rc car, i might need a model that detects
                 stop/start etc signs. wondering if you know of any
                 existing model that i could use?
                 [509]reply
                    # adrian rosebrock january 10, 2018 at 12:53 pm [510]#
                      i don   t know of a pre-trained model off the top of
                      my head. and realistically, the accuracy of the
                      model will depend on your own stop/start signs. you
                      will likely need to train your model from scratch.
                      [511]reply
                         @ huzaifa asif january 11, 2018 at 7:13 am [512]#
                           the issue i dont have any experience in machine
                           learning. do you have any guide for beginners?
                         @ adrian rosebrock january 11, 2018 at 7:31 am
                           [513]#
                           if you are brand new to id161 and
                           deep learning i would recommend the
                           [514]pyimagesearch gurus course to help you get
                           up to speed. if you have prior python
                           experience i would recommend [515]deep learning
                           for id161 with python where i start
                           by discussing the fundamentals of machine
                           learning and then work to more advanced deep
                           learning examples.
                           i hope that helps!
   68. akshra december 28, 2017 at 12:25 pm [516]#
       im very new to this. im attempting to detect multiple objects and
       find their distance from the camera of a moving vehicle. where do
       you suggest i start?
       also, the error im getting when i run the above code is    error:the
       following arguments are required:     p/   prototxt, -m/   model
       how do i enter those?
       thanks
       [517]reply
          + adrian rosebrock december 28, 2017 at 2:05 pm [518]#
            the reason you are getting this error is because you are not
            supplying the command line arguments. please see the blog post
            for examples on how to execute the script. i would also
            suggest reading up on [519]command line arguments.
            [520]reply
               o akshra december 28, 2017 at 10:21 pm [521]#
                 thanks. i got it to work. how can i use this for a moving
                 camera if it is, say, attached to a vehicle?
                 im attempting to detect multiple objects and find their
                 distance from the camera of a moving vehicle.
                 [522]reply
                    # andre january 14, 2018 at 7:39 am [523]#
                      may i know how did you solve it? i   ve read the
                      command line arguments page and can   t get any clue.
                      [524]reply
          + zahra july 12, 2018 at 8:40 am [525]#
            thank you for this question. if did you resolve it, can you
            tell me how ? ( the distance )
            [526]reply
   69. latha december 28, 2017 at 11:25 pm [527]#
       if i want to change the size of the class ( i want to detect only
       person and cat), what would i have to change to get rid of this
       error?
       label =    {}: {:.2f}%   .format(classes[idx],
       confidence * 100)
       list index out of range
       [528]reply
          + adrian rosebrock december 31, 2017 at 9:55 am [529]#
            there are a few ways to do this. if you want to truthfully
            recognize only    person    and    cat    you should consider
            fine-tuning your network. this will require re-training the
            network. if you instead want to ignore all classes other than
               person    and    cat    you can check classes[idxs] and see if the
            predicted label is    person    or    cat   .
            [530]reply
               o latha january 1, 2018 at 1:47 am [531]#
                 thank you so much. this works.
                 [532]reply
                    # fanwah march 12, 2018 at 1:13 pm [533]#
                      hi latha, can you tell me which part of the coding
                      did u change? can you show me?
                      [534]reply
   70. akshra december 30, 2017 at 11:38 am [535]#
       if i want to get the x and y coordinates of the detected object,
       how can i do it?
       [536]reply
          + adrian rosebrock december 31, 2017 at 9:40 am [537]#
            please see line 69 where the starting and ending (x,
            y)-coordinates of the bounding box are computed.
            [538]reply
   71. ramky january 1, 2018 at 2:49 am [539]#
       i gotta say this works amazingly. in fact, it even works to some
       extent on a dynamic camera if it   s attached to the front of a
       vehicle on a highway(if one reduces the confidence level)
       you   re a life saver.
       [540]reply
          + adrian rosebrock january 3, 2018 at 1:16 pm [541]#
            thanks ramky, i   m glad the script is working for you     
            [542]reply
   72. huzzi january 3, 2018 at 5:49 am [543]#
       did anyone had any issue related to open cv? it ran the first time
       but since then i haven   t been able to run it as i keep getting this
       error:
       importerror: no module named cv2
       upon running pip install python-opencv, it gives the following
       error:
       could not find a version that satisfies the requirement
       python-opencv (from versions: )
       no matching distribution found for python-opencv
       anyone?
       [544]reply
          + adrian rosebrock january 3, 2018 at 12:53 pm [545]#
            please follow [546]one of my tutorials for installing opencv.
            [547]reply
               o huzzi january 8, 2018 at 8:02 am [548]#
                 i did and i got the this error:
                 real_time_object_detection_old.py: error: the following
                 arguments are required: -p/--prototxt, -m/--model
                 [549]reply
                    # adrian rosebrock january 8, 2018 at 2:35 pm [550]#
                      pleas see my reply to akshra on december 28, 2017.
                      you need to supply the command line arguments to the
                      script.
                      [551]reply
   73. [552]ahangchen january 4, 2018 at 4:43 am [553]#
       when we use cv2.dnn.blobfromimage to convert a image array to a
       blob, 0.007843 means the multiplier on the image, why this value so
       small? i found that default value is 1.0.
       [554]reply
          + adrian rosebrock january 5, 2018 at 1:35 pm [555]#
            take a look at [556]this blog post where i discuss the
            parameters to cv2.dnn.blobfromimage, what they mean, and how
            they are used.
            [557]reply
   74. reece january 4, 2018 at 7:22 am [558]#
       hello adrian,
       is it possible to use a different model instead of mobilessd? i
       find it   s very bad at detecting cars, trucks and the likes using
       footage from a dash cam.
       as per the tutorial, i would like to track the object whilst
       providing a label and bounding box, and be able to apply better
       detection algorithms/methods.
       any suggestions on which tools to use and how?
       thanks.
       [559]reply
          + adrian rosebrock january 5, 2018 at 1:34 pm [560]#
            right now this is the primary, pre-trained model provided by
            opencv. you cannot take a network trained using mobilenet +
            ssd and then swap in faster r-id98. you would need to re-train
            the network. again, i cover this inside [561]deep learning for
            id161 with python.
            as for tracking, please see my reply to    eng.aaa    on september
            18, 2017.
            i hope that helps!
            [562]reply
               o reece january 7, 2018 at 8:10 am [563]#
                 i would like to replace the mobilenet architecture with
                 the vgg16 network architecture. is this a possible cause
                 in that i would be able to detect objects in a video at a
                 better map?
                 i have replaced the protobuf files for use with vgg16,
                 but i can   t get it working. does your book detail how i
                 could use this network to get it working like your
                 tutorial above, but as i had said, to a better precision
                 rate?
                 [564]reply
                    # adrian rosebrock january 8, 2018 at 2:47 pm [565]#
                      i wouldn   t recommend swapping in vgg, instead use a
                      variant of resnet. from there you will need to
                      retrain the entire network. you cannot hot-swap the
                      architectures. my book details how to train custom
                      object detectors from scratch on your own datasets.
                      this enables you to create scripts like the one
                      covered in this blog post.
                      [566]reply
   75. stefan january 4, 2018 at 7:37 pm [567]#
       hello there! loving the tutorial ! i just have one question. when i
       run the code you sent me via email, i get this error:
       attributeerror :    nonetype    object has no attribute    shape   
       any help would be appreciative! thank you!
       [568]reply
          + adrian rosebrock january 5, 2018 at 1:31 pm [569]#
            if you   re getting an error related to    nonetype    i   m assuming
            the traceback points to where the image is read from your
            camera sensor. please take a look at [570]this blog post on
            nonetype errors and how to resolve them.
            [571]reply
   76. mulia january 5, 2018 at 1:58 am [572]#
       hi adrian   ..
       thank you for sharing this wonderful knowledge. i tried the code
       above and execute the command accordingly. but i got this reply on
       my command line:
       [info] loading model
          
       net = cv2.dnn.readnetfromcaffe(args[   prototxt   ], args[   model   ])
       cv2.error:
       /home/pi/opencv-3.3.0/modules/dnn/src/caffe/caffe_io.cpp:1113:
       error: (-2) failed: fs.is_open(). can   t open
          mobilenetssd_deploy.prototxt.txt    in function
       readprotofromtextfile
       help me with this problem sir   
       thank you.
       [573]reply
          + adrian rosebrock january 5, 2018 at 1:26 pm [574]#
            double-check your path to the input prototxt and model weights
            (and make sure you use the    downloads    section of this blog
            post to download the code + additional files). the problem
            here is that your input paths are incorrect.
            [575]reply
   77. dan january 10, 2018 at 8:15 am [576]#
       hi adrian, may i know how do i create/tained my own caffe model
       file? let say for example, i would like to create a new set of
       pills for hospitality. how can i do it? the second thing would be
       if there was a new set of pills that comes in, do i have to
       recreate a whole new caffee model file or i can use the same one?
       [577]reply
          + adrian rosebrock january 10, 2018 at 12:45 pm [578]#
            hey dan, great questions.
            1. if you want to train your own object detectors you can
            either (1) see [579]this github repo of the developer who
            trained the model used in this example or (2) take a look at
            my book, [580]deep learning for id161 with python
            where i discuss training your own custom object detectors in
            detail.
            2. if you want to add new objects that you want to
            recognize/detect you would need to either re-train from
            scratch or apply id21.
            [581]reply
               o dan january 12, 2018 at 2:03 pm [582]#
                 hi, honestly i dont mind ordering the book however i feel
                 that its kind of wasted for me to spent so much because i
                 would only be using it once as its more of like a school
                 project. once its over, i wont have to do this anymore.
                 is there anyway that i am able to get the content on
                 training my own custom object detectors only? thankyou
                 [583]reply
                    # adrian rosebrock january 15, 2018 at 9:29 am [584]#
                      if you   re using it for a one-off school project than
                      dl4cv might not be the best fit for you. training
                      your own custom id98-based object detectors can be
                      challenging and requires knowledge of a large number
                      of deep learning concepts (all of which the book
                      covers). if you want to share a bit more about your
                      school project and your experience with machine
                      learning/deep learning. i can continue to let you
                      know if the book would be a good fit for you. or in
                      the absolute worst case i can let you know if your
                      school project is feasible.
                      [585]reply
   78. rohit thakur january 11, 2018 at 11:56 pm [586]#
       hi adrian,
       i want to ask you a simple question. it may sounds.
       how can we save the detected result as video file like .mp4 or
       .avi. as i know we can use cv2.videowriter function for this with
       different codes. can you help if possible with an example ?
       [587]reply
          + adrian rosebrock january 12, 2018 at 5:27 am [588]#
            i have two tutorials on using cv2.videowriter to write video
            to disk. you can use them to modify this script to save your
            video. take a look at [589]this tutorial to get started. then
            from there read [590]this one on only saving specific clips.
            [591]reply
   79. atul soni january 13, 2018 at 5:46 am [592]#
       hello ,
       after running the command i am getting this
       python real_time_object_detection.py \
       >    prototxt mobilenetssd_deploy.prototxt.txt \
       >    model mobilenetssd_deploy.caffemodel
       [info] loading model   
       [info] starting video stream   
       videoio error: v4l2: pixel format of incoming image is unsupported
       by opencv
       unable to stop the stream: device or resource busy
          
       (h, w) = image.shape[:2]
       attributeerror:    nonetype    object has no attribute    shape   
       so what this error means ?
       [593]reply
          + adrian rosebrock january 15, 2018 at 9:25 am [594]#
            it sounds like opencv cannot access your webcam. when you try
            to read a frame from the webcam it is returning    none   . you
            can read more about nonetype errors [595]here.
            [596]reply
   80. atul soni january 15, 2018 at 1:27 am [597]#
       hello adrian,
       i tried this tutorial and its working very well.
       but can you please tell me what i need to do if a want to add more
       objects like watch , wallet so in short how can i provide my own
       trained model ?
       [598]reply
          + adrian rosebrock january 15, 2018 at 9:12 am [599]#
            hey atul     you would need to:
            1. gather images of objects you want to detect
            2. either train your model from scratch or apply transfer
            learning, such as fine-tuning
            i discuss easy methods to gather your own training dataset
            [600]here. i then discuss training your own deep
            learning-based object detectors inside [601]deep learning for
            id161 with python.
            [602]reply
               o atul soni january 16, 2018 at 1:40 am [603]#
                 can you please guide me how can i train my own model from
                 scratch or applyid21 ?
                 [604]reply
                    # adrian rosebrock january 16, 2018 at 12:50 pm [605]#
                      hi atul     please see my previous comment. training
                      your own models from scratch is covered inside
                      [606]deep learning for id161 with python.
                      [607]reply
   81. marta january 15, 2018 at 3:39 pm [608]#
       hi adrian,
       this might look like a really simple question, but i can   t figure
       it out:
       $ python3 real_time_object_detection.py \    prototxt
       mobilenetssd_deploy.prototxt-txt \    model
       mobilenetssd_deploy.caffemodel
       usage: real_time_object_detection.py [-h] -p prototxt -m model [-c
       confidence]
       real_time_object_detection.py: error: the following arguments are
       required: -p/   prototxt, -m/   model
       i get this error when i try to run it on the terminal, i don   t
       understand it because supposedly i define those arguments when i
       run it, why is this happening?
       thanks so much,
       marta.
       [609]reply
          + adrian rosebrock january 16, 2018 at 1:01 pm [610]#
            it looks like you have properly passed in the command line
            arguments so i   m not actually sure why this is happening. can
            you try replacing --prototxt with -p and --model with -m and
            see if that helps? again, the command line arguments look okay
            to me so i   m not sure why you are getting that error.
            [611]reply
   82. ope january 15, 2018 at 10:27 pm [612]#
       i keep getting this error thanks.
       usage: deep_learning_object_detection.py [-h] -i image -p prototxt
       -m model
       [-c confidence]
       deep_learning_object_detection.py: error: the following arguments
       are required: -i/   image, -p/   prototxt, -m/   model
       [finished in 7.0s]
       [613]reply
          + adrian rosebrock january 16, 2018 at 12:54 pm [614]#
            hey ope, i have covered in this in a few different replies.
            please ctrl + f and search the comments for your error
            message. see my reply to    akshra    on december 28, 2017 for the
            solution.
            [615]reply
   83. mario kristanto january 15, 2018 at 10:41 pm [616]#
       hello adrian,
       this tutorial is amazing.
       but is it possible to using this code for a video that i have?
       how to change it so it can working with the video not my webcam?
       [617]reply
          + adrian rosebrock january 16, 2018 at 12:53 pm [618]#
            there are a number of ways to accomplish this. you can use the
            [619]filevideostream class i implemented or you can use a
            non-thread version using cv2.videocapture (also discussed in
            the post i linked to).
            [620]reply
   84. amit january 16, 2018 at 3:08 am [621]#
       hi adrian,
       here in this tutorial, we have used a pre-trained caffee model.
       what about we want to train the model according to our requirement?
       is there any tutorial which explains how to train the caffee model
       according to our own requirement? you response will be very useful.
       thanks!
       [622]reply
          + adrian rosebrock january 16, 2018 at 12:48 pm [623]#
            hey amit, thanks for the comment. if you want to train your
            own custom deep learning-based object detector please refer to
            the [624]github of the author who trained the network.
            otherwise, i cover how to train your own custom deep learning
            object detectors inside [625]deep learning for id161
            with python.
            [626]reply
   85. hashir january 19, 2018 at 10:19 am [627]#
       how much time will be take to complete this process on raspberry pi
       3
       python real_time_object_detection.py    prototxt
       mobilenetssd_deploy.prototxt.txt    model
       mobilenetssd_deploy.caffemodel
       [info] loading model   
       [info] starting video stream   
       [628]reply
          + adrian rosebrock january 22, 2018 at 6:42 pm [629]#
            i have provided benchmarks and timings of the code used here
            over in [630]this blog post.
            [631]reply
   86. deepak january 27, 2018 at 3:07 am [632]#
       i am using picam and i got tthe error like this
       [info] loading model   
       [info] starting video stream   
       traceback (most recent call last):
       file    real_time_object_detection.py   , line 47, in
       frame = imutils.resize(frame, width=400)
       file
          /home/pi/.virtualenvs/cv/lib/python3.5/site-packages/imutils/conve
       nience.py   , line 69, in resize
       (h, w) = image.shape[:2]
       attributeerror:    nonetype    object has no attribute    shape   
       [633]reply
          + adrian rosebrock january 30, 2018 at 10:39 am [634]#
            hey deepak     make sure you read the comments and/or do a ctrl
            + f and search the page for your error. i have addressed this
            question a number of times in the comments section. see my
            reply to    atul soni    on january 13, 2018 to start. thanks!
            [635]reply
          + dz september 2, 2018 at 10:17 pm [636]#
            hey deepak, you found a solution for this error?
            [637]reply
   87. justin january 27, 2018 at 1:06 pm [638]#
       hey adrian,
       do you have any pre-trained models for detecting drones outside?
       [639]reply
          + adrian rosebrock january 30, 2018 at 10:33 am [640]#
            sorry, i do not.
            [641]reply
   88. matthew january 30, 2018 at 5:27 pm [642]#
       do you know how i can take the data that i get from tracking
       objects and use that towards another program? for example, i want
       to try and do find open parking spaces at my school and i want to
       be able to track cars to find if there is an open space or not.
       [643]reply
          + adrian rosebrock january 31, 2018 at 6:42 am [644]#
            i think that depends on what you mean by    use that towards
            another program   ? the id161/deep learning aspect of
            this would be detecting the open parking spaces. once you
            detect an open parking spot it   s up to you what you do with
            the data. you could send it to mobile devices who have
            downloaded your parking monitor app. you could send it to a
            server. it   s pretty arbitrary at that point. i would suggest
            focusing on training a model to recognize open parking spots
            to get started.
            [645]reply
   89. amrudesh balakrishnan january 31, 2018 at 1:02 am [646]#
       im getting the following error :
       usage: real_time_object_detection.py [-h] -p prototxt -m model [-c
       confidence]
       real_time_object_detection.py: error: the following arguments are
       required: -p/   prototxt, -m/   model
       what can i do
       [647]reply
          + adrian rosebrock january 31, 2018 at 6:37 am [648]#
            to start i would suggest going back to the    real-time deep
            learning id164 results    section of this post where
            i demonstrate how to execute the script. you need to supply
            the command line arguments to the script when you execute it.
            if you   re new to command line arguments i would encourage you
            to [649]read up on them before continuing.
            [650]reply
   90. jimmy january 31, 2018 at 11:20 am [651]#
       hi adrian! good job on this tutorial. i have a question. how can i
       remove the other classes, for example i only want to detect the
       chair. if it is possible how can i do it. i   m receiving error and
       freezes the frame when i try to remove the other classes on line 22
       real_time_object_detection.
       [652]reply
          + adrian rosebrock january 31, 2018 at 12:40 pm [653]#
            hey jimmy     you don   t want to remove any of the classes in
            line 22. instead, when you   re looping over the detected
            objects, use an    if    statement, such as
            python

            if classes[idx] == "chair":_________________________________
                ... continue processing ..._____________________________
            ____________________________________________________________
            ____________________________________________________________

   1

   2

   if classes[idx] == "chair":

       ... continue processing ...
            [654]reply
               o jimmy february 8, 2018 at 10:53 am [655]#
                 hi there! i tried using that statement under line 70 but
                 the other classes still appears when i run the code.
                 [656]reply
                    # adrian rosebrock february 12, 2018 at 6:44 pm [657]#
                      make sure you double-check your code. if you
                      properly make the check you   ll only be examining
                         chair    objects     all others will be ignored.
                      [658]reply
   91. tinamore february 2, 2018 at 12:05 am [659]#
       hi, thanks for your great article.
       if i input video with pi camera, detection is very good. it works
       very well. i think because the image is very detailed, less noise.
       but i input a stream hd camera cctv. most detection is good, but
       sometime detection is wrong. this is url image wrong:
       [660]https://imgur.com/7q6ijy7
       [661]https://imgur.com/ooajaqh
       p/s: i have change code line 48, 49 from 300 to 400. i test that if
       the 300 to only find the large person image. but i change to 400
       then detection small image of person.
       blob = cv2.dnn.blobfromimage (cv2.resize (frame, (400, 400)),
       0.007843, (400, 400), 127.5)
       i do monitoring cctv system with alert when detection person. but i
       was often falsely alarmed by the non-person detection
       how to detection more accurately?
       [662]reply
          + adrian rosebrock february 3, 2018 at 10:46 am [663]#
            there are a few things you can do here, such as increasing the
            minimum required confidence for a detection from 20% to 50% or
            even 75%.
            provided you have enough example data from your cameras you
            may want to try (1) training a mobilenet + ssd from scratch or
            (2) fine-tuning the network.
            [664]reply
   92. tinamore february 5, 2018 at 3:22 am [665]#
       hi,
       i think should output cv2.imshow(   frame   , cv2.resize(frame, (300,
       300))) with frame same input dnn: cv2.resize(frame, (300, 300)).
       because if not then the dnn will look at the image with a different
       ratio not same real frame, for example, the image of a person will
       be pulled higher.
       [666]reply
   93. vijay february 5, 2018 at 6:13 am [667]#
       when i used readnetfromdarknet method, the detection
       (=net.foward()) array is very different (with shape (845,6)) from
       that of caffe model (which has shape (1,1,1,7)). could you please
       guide me on how to proceed with the darknet model detection array?
       also, could you please provide some reference to have a deeper
       understanding of net.forward? thanks!
       [668]reply
          + adrian rosebrock february 6, 2018 at 10:19 am [669]#
            hey vijay     i haven   t tried the readfromdarknet methdo so i   m
            not sure about the method. i   ll give it a try in the future
            and if need be, write a blog post on it. i discuss how deep
            learning id164 works inside [670]deep learning for
            id161 with python     this will help you gain insight
            into what is going on inside a deep learning id164
            model.
            [671]reply
          + tukhtaev sokhib november 5, 2018 at 11:54 pm [672]#
            hi vijay, did you fond a workaround for that dimension
            problem. i   ve been trying exactly the same thing for hours. i
            wish you could give some direction. thank you!
            [673]reply
   94. rahul february 5, 2018 at 10:59 am [674]#
       hello adrian,
       thanks for the putting this great article.
       i have one question here. if i want to detect the tree and
       buildings. how can i detect that? is there any simple solution or
       it will take some efforts.
       could you please help me in this?
       [675]reply
          + adrian rosebrock february 6, 2018 at 10:13 am [676]#
            it will likely take a bit of effort as you   ll need to train an
            object detector to recognize trees and buildings. you might
            want to try a [677]hog + linear id166 detector or a deep
            learning-based object detector which i cover inside [678]deep
            learning for id161 with python.
            [679]reply
   95. amit february 6, 2018 at 3:37 am [680]#
       hi adrian,
       could you please suggest me some tutorial in which it has been
       explained how to create regression box for the detected objects.
       thanks,
       amit
       [681]reply
   96. valentin february 8, 2018 at 4:07 am [682]#
       hi.
       great tutorial, i was able to make it work with not much trouble
       using a conda enviroment (install opencv using conda to avoid any
       problem).
       what do i need to do to:
       1) save the number of persons in the video stream (as a people
       counter)
       2) how to make it work with a previously recorded video?
       thanks!
       [683]reply
          + adrian rosebrock february 8, 2018 at 7:49 am [684]#
            1. to build a people counter you would want to apply a
            tracking algorithm so you do not double-count people. take a
            look at correlation tracking or even centroid tracking.
            2. you can use this with pre-recorded video by using the
            cv2.videocapture function or my [685]filevideostream class.
            if you   re interested in learning more about the fundamentals
            of opencv, take a look at my book, [686]practical python and
            opencv.
            [687]reply
   97. abhiraj biswas february 13, 2018 at 1:09 pm [688]#
       how do we put another training set instead of the one you put on
       the code   pls hello me.. because it   s not recognizing every thing.
       [689]reply
          + adrian rosebrock february 18, 2018 at 10:21 am [690]#
            unfortunately, it   s not that simple. you would need to train
            your own object detector from scratch or apply fine-tuning to
            an existing model.
            [691]reply
   98. susanna js february 14, 2018 at 1:31 am [692]#
       i have downloaded the code from your page. when i executed it in my
       raspberry pi, i got this error.
       usage: real_time_object_detection.py [-h] -p prototxt -m model [-c
       confidence]
       real_time_object_detection.py: error: argument -p/   prototxt is
       required
       i don   t know how to proceed on further. can you send me the
       procedure to detect objects?
       [693]reply
          + adrian rosebrock february 18, 2018 at 10:13 am [694]#
            i   ve addressed this question a handful of times in the
            comments. see my replies to zaira zafar, amrudesh, and tiago.
            [695]reply
   99. abhishek february 14, 2018 at 4:36 am [696]#
       hi adrian,
       i   d like to know how long it took to train your object pool in the
       real time id164 system. also, what did you use for
       training? also could you explain the caffe model file in it.
       [697]reply
   100. vineet february 14, 2018 at 5:32 am [698]#
       what are the advantages of using a blob here?
       [699]reply
          + adrian rosebrock february 18, 2018 at 10:11 am [700]#
            the    blob    contains the frame we are passing through the deep
            neural network. opencv requires the    blob    to be in a specific
            format. you can learn more about it [701]here.
            [702]reply
   101. snair february 15, 2018 at 9:59 pm [703]#
       hey how long did it take you to train the network? also, what did u
       train it on?
       [704]reply
          + adrian rosebrock february 18, 2018 at 9:54 am [705]#
            see my response to    nicolas    on december 23, 2017.
            [706]reply
   102. [707]owais february 16, 2018 at 11:02 am [708]#
       hi adrian i am your big fan and also follower i want to know can i
       detect my own object in real time using this program if yes please
       let me know
       [709]reply
          + adrian rosebrock february 18, 2018 at 9:50 am [710]#
            what is    your own object   ? is it an object class that the ssd
            was already trained on? if so, yes. if not, you would need to
            train your own ssd from scratch or apply fine-tuning.
            [711]reply
   103. tahirhan february 17, 2018 at 10:17 am [712]#
       can you make tutorial about how can we train our mobilenet_ssd with
       our dataset , thanks !
       [713]reply
          + adrian rosebrock february 18, 2018 at 9:42 am [714]#
            hey tahirhan     i actually already cover how to train your own
            ssds inside [715]deep learning for id161 with
            python.
            [716]reply
   104. safal bk february 18, 2018 at 12:15 am [717]#
       i have one question sir
       how can i run
       python real_time_object_detection.py \
          prototxt mobilenetssd_deploy.prototxt.txt \
          model mobilenetssd_deploy.caffemodel
       this command in windows cmd
       [718]reply
          + adrian rosebrock february 18, 2018 at 9:39 am [719]#
            the command should run just fine on the windows command line.
            did you try running it?
            [720]reply
   105. projectforkids february 18, 2018 at 11:03 am [721]#
       dear adrian,
       i   m amazed by your example code.
       it took me less than 5min to demo real time id164 to my
       kids thanks to you!
       thank you for that!
       i   m running it on my laptop and it takes a bit of cpu.
       i have a nvidia geforce gpu on my laptop.
       is there a way to redirect some of the computation intensive task
       to this gpu to offload main cpu?
       wish you a good day
       [722]reply
          + adrian rosebrock february 22, 2018 at 9:34 am [723]#
            congrats on getting up and running with real-time object
            detection so quickly, great job! the models used with opencv +
            python are not meant to be used on the gpu (easily). this is a
            big feature request for opencv so i imagine it will come soon.
            [724]reply
   106. richard february 19, 2018 at 12:30 pm [725]#
       hi, i   m richard. is it possible to run your code in pycharm. i   m
       having these errors:
       usage: real_time_object_detection.py [-h] -p
       mobilenetssd_deploy.prototxt -m
       mobilenetssd_deploy.caffemodel
       [-c confidence]
       real_time_object_detection.py: error: the following arguments are
       required: -p/   mobilenetssd_deploy.prototxt,
       -m/   mobilenetssd_deploy.caffemodel
       [726]reply
          + adrian rosebrock february 22, 2018 at 9:27 am [727]#
            you can use pycharm to execute the code, but you   ll need to
            update the command line arguments in the project settings. see
            [728]this stackoverflow thread for more details.
            [729]reply
   107. pooja g. february 21, 2018 at 4:02 am [730]#
       sir,id164 demo can we do without using internet
       connection
       [731]reply
          + adrian rosebrock february 21, 2018 at 9:33 am [732]#
            yes. just download the code and run it. you don   t need an
            internet connection once the code is downloaded.
            [733]reply
   108. neha february 23, 2018 at 9:58 am [734]#
       can i use another model instead of caffe
       [735]reply
          + adrian rosebrock february 26, 2018 at 2:07 pm [736]#
            right now the opencv bindings are most stable with caffe
            models, but you can potentially use tensorflow or torch as
            well.
            [737]reply
   109. gal february 24, 2018 at 8:08 am [738]#
       thanks adrian, the tutorial is very easy and your explanation very
       helpful. however, the object detector has plenty of false negatives
       and false positives. is there a way to improve the detection or to
       plug in a better model. i understand there are constraints. i look
       forward to hearing from you.
       gal
       [739]reply
          + adrian rosebrock february 26, 2018 at 2:00 pm [740]#
            you may want to consider tuning the minimum confidence
            parameter to help filter out false negatives. depending on
            your dataset and use case you may want to gather example
            images of classes you want to recognize from your own sensors
            (such as where the system will be deployed) and then fine-tune
            the model on these example images.
            [741]reply
   110. niladri february 26, 2018 at 3:06 am [742]#
       hi adrian,
       a big thanks for all your post, i follow them regularly..and you
       have done a superb work in deep learning. one concept idea which i
       developed was using my voice message as a input, my drone search
       and reply me with a voice message for the detected object. would
       like to share my drone
       video.([743]https://dms.licdn.com/playback/c5100aqgi8yxgy8jtrg/442b
       93fc59874c00aae4de3480dcc90b/feedshare-mp4_500/1479932728445-v0ch3x
       ?e=1519722000&v=alpha&t=vbxmhcbwvc9tluesd-me7kec2plc-2ivcx-qlos8lz8
       )
       keep up the good work.
       [744]reply
   111. debasmita february 27, 2018 at 4:38 am [745]#
       what modification is needed if i want to only detect the motion? my
       purpose is to use deep learning techniques to detection of motion
       not the classification. please help
       [746]reply
          + adrian rosebrock february 27, 2018 at 11:26 am [747]#
            is there a particular reason you want to use deep learning for
            motion detection? basic motion detection can be accomplished
            through simple image processing functions, as i discuss in
            [748]this blog post.
            [749]reply
   112. satyar march 2, 2018 at 12:03 am [750]#
       hi adrian,
       gr8 tutorial. i just need small clarification. i want to add/detect
       an object/ thing which is not there in the class list given by you.
       so, what should be the criteria to add/detect them in the video?
       for example, i want to detect my mobile. so, to detect it, i need
       to add a class called    mobile    in the class list. after that do i
       need to do any additions in    mobilenetssd_deploy.prototxt    file?
       guide me in developing the code. thanks
       [751]reply
          + adrian rosebrock march 2, 2018 at 10:28 am [752]#
            the .prototxt file does not have to be updated, but you do
            need to either re-train the network from scratch or fine-tune
            the network to recognize new classes. i discuss how to train
            and fine-tune your own id164 networks inside
            [753]deep learning for id161 with python.
            [754]reply
   113. zachiya march 2, 2018 at 4:02 am [755]#
       i got error, and dunno why.
       box = detections[0, 0, i, 3:7] * np.array([w, h , w, h])
       ^
       syntaxerror: invalid syntax
       pls help.
       [756]reply
          + adrian rosebrock march 2, 2018 at 10:25 am [757]#
            make sure you use the    downloads    section of this post to
            download the source code instead of copying and pasting it. it
            looks like you likely introduced a syntax error when copying
            and pasting the code.
            [758]reply
   114. hashir march 2, 2018 at 8:40 am [759]#
       hey bro,
       hey how long did it take to complete this program, bcz i didnt get
       any output. could u pls explain to solve this..very urgent
       after i running this command(below), it look loke this even after 2
       hour
       python real_time_object_detection.py    prototxt
       mobilenetssd_deploy.prototxt.txt    model
       mobilenetssd_deploy.caffemodel
       [info] loading model   
       [info] starting video stream   
       [760]reply
          + adrian rosebrock march 2, 2018 at 10:21 am [761]#
            hey hashir     is the script will run indefinitely until you
            click on the the open click and press the    q    key on your
            keyboard.
            [762]reply
               o hashir march 7, 2018 at 6:50 am [763]#
                 sorry bro, i didnt get any proper result after pressing q
                 on my keyboard
                 [764]reply
                    # adrian rosebrock march 7, 2018 at 9:07 am [765]#
                      you need to click the open window opened by opencv
                      and then press the    q    key on your keyboard.
                      [766]reply
   115. srikanth march 3, 2018 at 9:17 am [767]#
       is opencv 3.3 or above is mandotary? i am coding all my cv coding
       in opencv 2.10.. can u please help to find how can i convert this
       code to support in cv2
       [768]reply
          + adrian rosebrock march 7, 2018 at 9:45 am [769]#
            yes, opencv 3.3+ is mandatory for the deep neural network
            (dnn) module. the code cannot be converted to opencv 2.4. you
            need ti use opencv 3.3+.
            [770]reply
   116. yousuf march 5, 2018 at 5:30 am [771]#
       hi iam using tensorflow for id164 but my model not
       detecting object from live camera but it can detect the object from
       prevideo
       [772]reply
   117. jakub fracisz march 7, 2018 at 4:58 pm [773]#
       hi, when i try to run this code it tells me : usage:
       real_time_object_detection.py [-h] -p prototxt -m model [-c
       confidence]
       real_time_object_detection.py: error: the following arguments are
       required: -p/   prototxt, -m/   model do you know what to do?
       ps. great article
       [774]reply
          + adrian rosebrock march 9, 2018 at 9:25 am [775]#
            you need to download the source code to the post, open up a
            terminal, navigate to where you downloaded it, and execute the
            script, ensuring you supply the command line arguments. if
            you   re new to command line arguments, that   s okay, but you
            should [776]read up on them before trying to execute the
            script.
            [777]reply
               o jakub fracisz march 10, 2018 at 10:38 am [778]#
                 and how to navigate to where i downloaded it?
                 ps. can we contact on mail or messanger? i have some
                 questions.
                 [779]reply
                    # adrian rosebrock march 14, 2018 at 1:23 pm [780]#
                      you need to use the    cd    command. if you   re new to
                      the terminal and unix/linux environments that   s
                      totally okay, but i would recommend that you spend a
                      few days learning the fundamentals of how to use the
                      command line before you try executing this code.
                      [781]reply
   118. anar march 9, 2018 at 4:40 pm [782]#
       hi adrian,
       how to use ip camera instead of webcam?
       thanks
       [783]reply
          + adrian rosebrock march 14, 2018 at 1:29 pm [784]#
            i do not have any tutorials on ip cameras yet but i   ll try do
            one soon. depending on your webcam and ip stream it   s either
            very easy and straightforward or quite complicated.
            [785]reply
   119. ahsan tariq march 11, 2018 at 12:50 pm [786]#
       hi adrian, i tried the code but i am facing a problem. i have asked
       the question in stackoverflow.
       link to my question is
       [787]https://stackoverflow.com/questions/44020713/an-exception-has-
       occurred-use-tb-to-see-the-full-traceback-python
       kindly check and answer please.
       (email removed my spam filter)
       [788]reply
   120. alice march 12, 2018 at 4:59 am [789]#
       hi andrian, i did try to follow your tutorial at:
       [790]https://www.pyimagesearch.com/2016/12/26/opencv-resolving-none
       type-errors/
       and others but i still have that error:
       file    real_time_object_detection.py   , line 59, in
          
       (h, w) = image.shape[:2]
       attributeerror:    tuple    object has no attribute    shape   
       [791]reply
          + adrian rosebrock march 14, 2018 at 1:09 pm [792]#
            double-check that opencv can access your usb camera or webcam.
            based on the error, it looks to me like opencv is unable to
            access the video stream.
            [793]reply
   121. dev march 13, 2018 at 3:51 am [794]#
       how can i use other training image data sets to train the data..
       for example.. if i want to detect a uav in the image, what open
       source training data are available for this?
       [795]reply
          + adrian rosebrock march 14, 2018 at 12:47 pm [796]#
            i believe stanford has a pretty cool [797]uav dataset.
            [798]reply
   122. yadullah abidi march 14, 2018 at 6:56 pm [799]#
       hi adrian, i   d just like to know how do i reduce the number of
       classes you provided in the classes array. i   d only like to detect
       humans and cars. what are the necessary changes that i have to
       make?
       i tried simply deleting those elements from the classes array but
       that seems to have broken the code.
       thanks
       [800]reply
   123. yadullah abidi march 14, 2018 at 6:57 pm [801]#
       ahh never mind. it was a bummer on my part. the code runs just fine
       [802]reply
          + adrian rosebrock march 19, 2018 at 6:06 pm [803]#
            you don   t want to delete elements from the classes array. that
            will cause an error. instead, filter on the idx of the
            detection. see my reply to    latha    december 28, 2017.
            [804]reply
   124. walter suarez march 14, 2018 at 7:29 pm [805]#
       hello excellent tutorial ..
       first of all forgive me for my bad english. i wanted to know how
       can you reconnect the camera when there is an error? and second,
       how can the code be modified so that it recognizes only people?
       thank you
       [806]reply
          + adrian rosebrock march 19, 2018 at 6:05 pm [807]#
            1. can you elaborate on what you mean by    reconnect the camera
            when there is an error   ? i   m not sure what you mean.
            2. see my reply to    latha    december 28, 2017.
            [808]reply
   125. jay dodia march 18, 2018 at 3:26 am [809]#
       oksy sir, i   ve successfully done the obsctacle detection using my
       logitech webcam and open cv on my raspberry pi 3. i now would like
       to ask you, how do i do obstacle avoidance if i mount my webcam on
       a bot which is running autonomously by maybe reducing its speed
       when obstacle is detected or change its path when it detects it.
       please help me out with it sir.
       you can respond to this on my email address: (email removed by spam
       filter) as soon as possible.
       thank you so much.
       [810]reply
   126. chirag patil march 21, 2018 at 11:12 am [811]#
       i am getting a segmentation fault while running the code. i have
       installed opencv version 3 with dnn = on, successfully. any
       explaination for this?
       [812]reply
          + adrian rosebrock march 22, 2018 at 9:56 am [813]#
            sorry, i   m not sure what would be causing this issue. can you
            pinpoint exactly which line is causing the error?
            [814]reply
   127. harini march 25, 2018 at 12:23 pm [815]#
       while executing the above code i get the following error
       can   t open    mobilenetssd_deploy.prototxt.txt   ) in
       readprotofromtextfile, file
       /home/pi/opencv-3.3.0/modules/dnn/src/caffe/caffe_io.cpp, line 1113
          mobilenetssd_deploy.prototxt.txt    in function
       readprotofromtextfile
       can anyone help me out in solving this
       [816]reply
          + adrian rosebrock march 27, 2018 at 6:22 am [817]#
            your path to the .prototxt file is incorrect. double-check
            your file paths and be sure you read up on [818]command line
            arguments before continuing.
            [819]reply
   128. mathieu march 31, 2018 at 9:03 pm [820]#
       hi adrian,
       thx for all those tutorials, its helping a lot to learn how to use
       python and opencv!
       i   m able to make this program works but i   m wondering how to do an
       action with the answer. (do something if there is one person
       detected, do something else if there is two etc   ).
       hope you are still having fun with deep learning.
       math
       [821]reply
          + adrian rosebrock april 4, 2018 at 12:37 pm [822]#
            you would want to add an    if    statement in the    for    loop on
            line 56 that loops over the detections. more specifically,
            after line 63, you would want to do something like this:
            python

            if classes[idx] == "person":________________________________
                print("a person was detected! sound the alarm!")________
            ____________________________________________________________
            ____________________________________________________________

   1

   2

   if classes[idx] == "person":

       print("a person was detected! sound the alarm!")
            [823]reply
               o mathieu april 6, 2018 at 6:56 pm [824]#
                 working perfectly, thank you!
                 is it possible to count the number of person in the
                 screen? ( if there is one person print 1, if there is
                 two, print 2)
                 math
                 [825]reply
                    # adrian rosebrock april 10, 2018 at 12:47 pm [826]#
                      yes. maintain a dictionary for each frame that
                      maintains:
                      1. the key of the dictionary as the detected class
                      2. the value as the number of objects
                      you can loop over each of the detected objects and
                      update the dictionary.
                      [827]reply
                         @ mathieu april 14, 2018 at 7:08 pm [828]#
                           hi adrian
                           sounds logic but i   m a little bit confuse about
                           how it will look in the code.. can you show me
                           a little example?
                           thank again for yout time.
                           math
                         @ adrian rosebrock april 16, 2018 at 2:29 pm
                           [829]#
                           sorry, i   m absolutely happy to help point you
                           in the right direction but i cannot write code
                           for you. take a little bit of time to work with
                           python dictionaries and create a simple script
                           that can count the number of words in a
                           sentence. the same method applies here. loop
                           over the detected objects and count the number
                           of objects for each class. i have faith in you
                           and i   m confident you can do it!     
   129. raj april 2, 2018 at 2:35 am [830]#
       hii adrian   .i need a help      .when i give a video as the input
       (original video length:5 sec) it runs for about 3 minutes   ..what is
       the reason for this..? can u plzz help me with this..
       [831]reply
          + adrian rosebrock april 4, 2018 at 12:29 pm [832]#
            most video files will play between 18-24 fps. this method can
            only run at ~6-7 fps on most standard cpus. that said, 3
            minutes for about 5 seconds of video is an incredibly long
            time. what type of hardware are you trying to run this code
            and object detector on?
            [833]reply
               o raj april 6, 2018 at 4:33 am [834]#
                 ubuntu 16.04
                 16gb ram
                 64 bit os
                 [835]reply
                    # adrian rosebrock april 6, 2018 at 8:42 am [836]#
                      given your system specs the object detector should
                      certainly be running at a higher frame rate. how
                      large (in terms of width and height) are your input
                      images?
                      [837]reply
                         @ raj april 9, 2018 at 5:48 am [838]#
                           the resolution of video is 640*352
                         @ adrian rosebrock april 10, 2018 at 12:12 pm
                           [839]#
                           640  352 should be easily processable by a
                           standard laptop/desktop. to be honest i think
                           there might be an install/configuration problem
                           with your version of opencv. try to re-compile
                           and re-install opencv, ideally on a fresh
                           install of an operating system.
                         @ raj april 9, 2018 at 5:50 am [840]#
                           is there any method to give 1 fps as the input
                           from the video   
   130. ganesh april 2, 2018 at 5:14 am [841]#
       hello sir, how to estimate speed of multiple vehicles using opencv
       python?
       [842]reply
          + adrian rosebrock april 4, 2018 at 12:26 pm [843]#
            there are a few ways to build such a project. the first is to
            calibrate your camera. you will then need a method to localize
            the vehicle. then apply an object tracking algorithm for each
            object in the video. given a calibrated camera and known fps
            you can determine how far, and therefore, how fast, an object
            has moved between subsequent frames in a video. it   s a bit of
            a tricky process so you   ll want to take your time with it.
            [844]reply
   131. raj april 4, 2018 at 12:42 am [845]#
       i have to count the number of objects in each frame of the video
       and if the number of objects is less than the previous count ..i
       have to notify that there is missing of objects..can u help me to
       do this..plzz
       [846]reply
          + adrian rosebrock april 4, 2018 at 12:07 pm [847]#
            you will be able to accomplish this using the source code of
            this post with only tiny modifications. create a dictionary
            that counts the number of objects in subsequent frames. if the
            counts for each object differs, send the alert.
            [848]reply
               o raj april 6, 2018 at 1:36 am [849]#
                 thank you:)
                 [850]reply
   132. alina april 5, 2018 at 8:49 am [851]#
       hello adrian,
       i installed everything on an ubuntu machine with no errors, however
       when i run the script i get the following error. any ideas on how
       to fix that?
       python real_time_object_detection.py \
       >    prototxt mobilenetssd_deploy.prototxt.txt \
       >    model mobilenetssd_deploy.caffemodel
          
       attributeerror: module    cv2    has no attribute    dnn   
       cheers,
       alina
       [852]reply
          + adrian rosebrock april 6, 2018 at 8:55 am [853]#
            hey alina     you need to install opencv 3.3 or greater.
            previous versions of opencv did not include the    dnn    module.
            double-check your opencv version and upgrade if necessary.
            [854]reply
               o alina may 5, 2018 at 7:33 am [855]#
                 you were right, i had installed opencv 3 in the
                 beginning. could you i ask you a question?
                 i am trying to give a webm video file as an input, but it
                 throws me an error. what tut can i watch so i can make
                 this work? would i need to make any changes at the code
                 apart from the part of the giving input stream?
                 [856]reply
                    # adrian rosebrock may 9, 2018 at 10:26 am [857]#
                      1. nice, i   m glad the opencv issue was resolved.
                      2. without knowing exactly what the error is i
                      cannot provide any guidance. please keep in mind
                      that i can only provide suggestions or help if you
                      can tell me exactly what issue you are running into.
                      [858]reply
   133. [859]fensius april 10, 2018 at 10:11 am [860]#
       hai adrian , i get stuck here
       [info] loading model   
          
       (h, w) = image.shape[:2]
       attributeerror:    nonetype    object has no attribute    shape   
       i   ve seen comment atul soni, i have also tried it with the
       explanation you gave, i have checks for whether picamera works, i
       also had to install libjpeg but still can   t. how to solve it? thank
       you
       [861]reply
          + adrian rosebrock april 10, 2018 at 11:52 am [862]#
            how did you check and confirm that the python    picamera   
            module works?
            [863]reply
               o [864]fensius april 10, 2018 at 10:07 pm [865]#
                 thanks before adrian , i ty this tutorial from your post
                 [866]https://www.pyimagesearch.com/2015/03/30/accessing-t
                 he-raspberry-pi-camera-with-opencv-and-python/
                 can you help me, where is the problem?
                 thankyou
                 [867]reply
                    # adrian rosebrock april 11, 2018 at 9:02 am [868]#
                      when you ran the previous tutorial, did it work? if
                      so, you need to update line 35 to be:
                      vs = videostream(usepicamera=true).start()
                      [869]reply
   134. [870]fensius aritonang april 11, 2018 at 9:14 pm [871]#
       thanks adrian, it worked!. but there is a problem when doing
       streaming, frame are displayed very slowly. is there any way to
       speed up his fps on a raspberry?
       [872]reply
          + adrian rosebrock april 13, 2018 at 6:53 am [873]#
            the pi by itself isn   t suitable for real-time detection using
            these deep learning models. i provide some benchmarks and
            explain why in [874]this blog post. for additional speed, try
            the [875]movidius ncs.
            [876]reply
   135. anthony april 12, 2018 at 8:29 am [877]#
       hi adrian,
       i would like to apologize in advance, because my english isn   t the
       best it could be, but i really wanted to tell you how much i
       appreciate your tutorials. they really helped me to deepen my
       knowledge in the field of opencv.
       in a personal project of mine, where i try to incorporate your code
       in an ros node i have to face the problem of converting your while
       loop     where the whole frame processing is taken place into a
       function.
       but i really struggle to create the appropriate return statement to
       receive the same results.
       thanks in advance for your response.
       cheers
       [878]reply
          + adrian rosebrock april 13, 2018 at 6:49 am [879]#
            hi anthony     thanks for the comment, and no worries, your
            english is very easy to understand.
            you mentioned a problem with the    while    loop and trying to
            return a particular result. could you elaborate more on what
            the specific issue is with the    while    loop and what you are
            trying to accomplish?
            [880]reply
   136. aman sharma april 12, 2018 at 6:23 pm [881]#
       hi adrian
       i executed the code but got an error stating that    module    object
       has no attribute    dnn   
       im using opencv 3.3 and also have opencv_contrib3.3
       module folder have dnn folder also
       yet im getting error
       could u please help me out of it.
       thank you
       [882]reply
          + adrian rosebrock april 13, 2018 at 6:40 am [883]#
            hey aman     it sounds like, for whatever reason, your version
            of opencv does not include the    dnn    module. perhaps you are
            using a previous version of opencv accidentally? to confirm
            your opencv version open up a python shell and check:
            python

            $ python____________________________________________________
            >>> import cv2______________________________________________
            >>> cv2.__version___________________________________________
            ____________________________________________________________

   1

   2

   3

   $ python

   >>> import cv2

   >>> cv2.__version__
            [884]reply
   137. yin april 16, 2018 at 6:18 am [885]#
       hi, i run your project on my ubantu16.04 no errors occurred, but
       the window called
           frame     is full of green. nothing can be shown from my notebook
       front camera. actually, my camera runs normally under the win10
       system.
       how to solve my problem? i will be grateful if you can help me!
       [886]reply
          + adrian rosebrock april 16, 2018 at 2:15 pm [887]#
            hey yin     are you using the code + model included with this
            blog post? or a different model + code?
            it sounds like there are hundreds if not thousands of
            detections coming from your model. this could be due to
            false-positives or a bug in your model. double-check your
            confidence threshold used to filter out weak predictions as
            well (you may need to increase the threshold).
            [888]reply
               o yin april 17, 2018 at 3:39 am [889]#
                 yes, i use the code + model included with this blog post.
                 increasing the threshold can   t solve the problem.
                 i think maybe there are something wrong with my notebook
                 front camera drive under linux system. because i can   t
                 get full video from my camera, only the top half of the
                 video is shown, the bottom half is all green and no
                 signal.
                 [890]reply
                    # adrian rosebrock april 17, 2018 at 9:21 am [891]#
                      unfortunately it does sound like there is a problem
                      with your laptop camera. i would also suggest
                      getting your hands on a usb camera as well so you
                      can debug further.
                      [892]reply
                         @ yin april 17, 2018 at 11:39 am [893]#
                           thank you very much!
                           i have solved the problem.
                           by the way, if i want to get the video stream
                           with an external camera instead of notebook
                           front camera, can you recommend one? so i can
                           detect other places rather than objects in
                           front of my computer.
                         @ adrian rosebrock april 18, 2018 at 3:06 pm
                           [894]#
                           nice, congrats on resolving the problem. as far
                           as a usb camera goes, i really like my
                           [895]logitech c920. it   s plug and play
                           compatible with most systems.
                         @ daniel april 25, 2018 at 3:04 am [896]#
                           hi yin,
                           can you share how did you solve the problem?
                           i  m facing the same issue but can  t find a
                           solution. i  m working with ubuntu 16.04 and the
                           webcam works allright in windows 10 and in
                           guvcview in ubuntu.
                           thanks!!
                         @ yin april 29, 2018 at 9:21 am [897]#
                           hi, daniel. first you should check the
                           connection between your front camera and ubuntu
                           vm, they should be connected via usb3.0. and
                           then install cheese in your ubuntu shell by
                           this command:
                           $ sudo apt-get install cheese
                           $ cheese
                           it may display captured video by your front
                           camera.
                         @ daniel may 2, 2018 at 4:05 am [898]#
                           hi yin,
                           thanks for your advice, it solved the problem!
                         @ adrian rosebrock may 3, 2018 at 9:36 am [899]#
                           awesome, i   m glad it worked!     
   138. abdoul april 16, 2018 at 4:07 pm [900]#
       as always your tutorials are very clear thank you. i tried it on
       the raspberry although the rendering is a little slow, that   s not a
       problem because i want to count(e.g: each 5 fsp) the number of
       cats. please can you help me with the syntax to add.
       thank you in advance
       [901]reply
          + adrian rosebrock april 17, 2018 at 9:29 am [902]#
            hey abdoul, just to clarify from your comment, are you trying
            to increase the fps processing rate of the id164?
            or count the total number of cats in each frame? the reason i
            ask is because i don   t know what you mean by    each 5 fsp   
            which i interpreted as a typo of    5 fps    so i   m a bit confused
            on what you are trying to accomplish.
            [903]reply
   139. [904]mamta april 18, 2018 at 3:15 am [905]#
       hi,
       i am trying to run your code on the nvidia jetson setup. the code
       only uses cpu and the gpu utilization is zero. the fps is only 5
       1. can you tell me if there is a way to assign specific tasks (
       like id136 ) to gpu using opencv ?
       thanks
       [906]reply
          + adrian rosebrock april 18, 2018 at 2:55 pm [907]#
            this may be a silly question, but i assume you compiled opencv
            with gpu and opencl support already?
            [908]reply
               o [909]mamta april 20, 2018 at 6:50 am [910]#
                 yes.. compiled with both gpu and opencl support.
                 if i use ssd mobilenet in tensorflow and opencv, the gpus
                 are utilized to maximum capacity.
                 is there an option to set/enable gpu for id136s ?
                 [911]reply
                    # adrian rosebrock april 20, 2018 at 9:36 am [912]#
                      my understanding (which could be incorrect) is that
                      opencl should help determine the most optimized way
                      to run the code. perhaps my understanding is
                      incorrect. in that case i would suggest opening an
                      issue on the [913]official opencv github page. once
                      you do, definitely post the link back so others,
                      myself included, can learn from it.
                      [914]reply
   140. agarg april 19, 2018 at 10:13 am [915]#
       hello,
       really useful article, i was all setup in one day!
       ssd seems to reduce the confidence levels for small sized objects
       any suggestion to improve this.
       [916]reply
          + adrian rosebrock april 20, 2018 at 10:06 am [917]#
            there are a few ways to handle small-sized objects with ssds.
            the    hack    recommended by the others is to increase the
            resolution of the image passed into the network. this will
            slow down id136 time but will help when detecting smaller
            objects.
            [918]reply
   141. lee april 24, 2018 at 1:30 am [919]#
       hi adrian, this is a really nice article. any suggestions to add
       more classes inside the model so that we can detect more object?
       thank you if you can answer my questions.
       [920]reply
          + adrian rosebrock april 25, 2018 at 5:53 am [921]#
            hey lee, i would suggest skimming the comments as i   ve
            addressed how to add more networks to the model. the gist is
            that you have two options:
            1. train a network from scratch
            2. apply fine-tuning
            i cover both inside [922]deep learning for id161
            with python.
            [923]reply
   142. beta farhan april 24, 2018 at 6:40 am [924]#
       hello adryan,how can i training my data ? example i will train my
       book object.. thank you
       [925]reply
          + adrian rosebrock april 25, 2018 at 5:44 am [926]#
            hey beta, it   s awesome to hear that you would like to train
            your own custom deep learning object detector. i actually
            cover how to train your own deep learning object detectors
            inside [927]deep learning for id161 with python. i
            would suggest starting there.
            [928]reply
   143. [929]yadullah abidi april 26, 2018 at 4:08 pm [930]#
       hey adrian!
       any ideas on how can i    count    the number of detections? let   s say
       i had 3 people walk into the frame from one side and exit from the
       other side, so how can i count those 3 people and like save that
       count to a variable?
       [931]reply
          + adrian rosebrock april 28, 2018 at 6:11 am [932]#
            see my reply to    ife ade    on october 31, 2017.
            [933]reply
   144. hari april 27, 2018 at 11:53 pm [934]#
       hello adrian, how can i know the position of the object?
       example i will detection fire/flame. i will used the position and
       send it to servo and then pointed on that   
       thank you
       [935]reply
          + adrian rosebrock april 28, 2018 at 6:02 am [936]#
            id164 will give you the (x, y)-coordinates of an
            object in a frame. are you trying to move a servo for object
            tracking? if so, you can move the servo relative to where the
            object is moving. see [937]this blog post for more
            information.
            [938]reply
   145. randy april 29, 2018 at 4:01 pm [939]#
       hello adrian, i tried running the detection on local video file as
       the input using the opencv video capture function, however, faced
       some errors as mentioned below.
       file
          c:\users\raghav\anaconda3\lib\site-packages\imutils\convenience.py
          , line 69, in resize
       (h, w) = image.shape[:2]
       attributeerror:    tuple    object has no attribute    shape   
       your help would be highly appreciated. thanks
       [940]reply
          + adrian rosebrock may 3, 2018 at 10:17 am [941]#
            opencv is unable to access your webcam. see [942]this blog
            post for more information on    nonetype    errors.
            [943]reply
   146. ghiz april 29, 2018 at 8:36 pm [944]#
       hello
       i used arducam mini 2mp it is working for this?
       [945]reply
          + adrian rosebrock april 30, 2018 at 12:46 pm [946]#
            i   ve heard that arducam is making raspberry pi compatible
            cameras due to demand, but that   s all i know. i haven   t tried
            any of the arducam cameras with my raspberry pi.
            [947]reply
   147. tamer april 30, 2018 at 2:15 am [948]#
       hi adrian, i tried to use bvlc_googlenet because i wanted to detect
       a soccer ball because i am making robo-keeper for my graduation
       project and i want to detect the ball through each frame and it`s
       co-ordinates but it gives me an error     can   t open
          bvlc_googlenet.prototxt   
       [949]reply
          + adrian rosebrock april 30, 2018 at 12:37 pm [950]#
            double check the filepath for your .prototxt file. that   s my
            best guess. i   ve also heard of cases where the prototxt needs
            to be modified to be compatible with opencv   s dnn module.
            [951]reply
   148. [952]tamer may 3, 2018 at 7:59 pm [953]#
       can i try it with googlenet model and sustain the sliding window?
       [954]reply
          + adrian rosebrock may 9, 2018 at 10:40 am [955]#
            yes, you can use the traditional sliding window + image
            pyramid technique. i cover how to perform this inside
            [956]deep learning for id161 with python.
            [957]reply
   149. jahnavi may 6, 2018 at 2:59 pm [958]#
       hey! great post.
       when i   m executing the code i   m getting an error    
       importerror: no module named imutils.video
       how do i rectify it?
       [959]reply
          + adrian rosebrock may 9, 2018 at 10:14 am [960]#
            make sure you install the    imutils    library on your system:
            $ pip install imutils
            if you are using python virtual environments do not forget to
            use the    workon    command to access the virtual environment
            first.
            [961]reply
   150. ann may 9, 2018 at 1:48 am [962]#
       hi adrian ,,
       this blog was just mindblowing.
       i was thinking if i want to detect a cup , how should i train the
       model ?
       [963]reply
          + adrian rosebrock may 9, 2018 at 9:32 am [964]#
            hi ann     thanks for the comment. i   m so happy to hear you are
            enjoying the pyimagesearch blog! if you want to train your own
            model to detect a cup, i would recommend you:
            1. use [965]this blog post to build your own deep learning
            dataset of    cup    images
            2. follow the instructions inside [966]deep learning for
            id161 with python to train your own deep learning
            object detector
            [967]reply
   151. sp may 10, 2018 at 3:44 pm [968]#
       thanks,
       you   re really helping many to understand how deep learning works.
       i suggest that you should make a course on deep learning in udemy.
       if you already have any course or youtube tutorials. then plz tell
       me
       [969]reply
          + adrian rosebrock may 14, 2018 at 12:13 pm [970]#
            i offer a book/complete self-study program on deep learning
            called [971]deep learning for id161 with python. the
            book is sold through my website, pyimagesearch. give it a look
            and let me know if you have any questions.
            [972]reply
   152. ferdows may 13, 2018 at 4:20 pm [973]#
       dear adrian,
       i thank you a lot for such a nice learning environment.
       i have a question, how can i change this code to detect object from
       video file not live? i know your previous lectures are from file
       but they are not with deep learning.
       i tried a lot to do, but now it only open the video like picture
       and freez
       [974]reply
          + adrian rosebrock may 14, 2018 at 11:57 am [975]#
            you would need to use the cv2.videocapture class and supply
            the path to the input file. [976]here is an example of reading
            frames from a video file. i hope that helps!
            [977]reply
   153. brandon may 14, 2018 at 3:32 am [978]#
       hi adrian,
       first off i   d like to thank you for your wonderful tutorials. it is
       very helpful for a python and opencv beginner like myself (computer
       programming beginner actually).
       i   d like to ask a question about this code    specifically about its
       usage with pre-recorded videos rather than live stream.
       i am trying to run the code to detect a 40 second test video   
       however it is taking approximately 5 minutes for it to process (it
       appears to slow down the video in order to detect it). at first i
       thought it   d be harder for the code to detect a livestream rather
       than a pre-recorded video; however, obviously this is not the case,
       as you   ve proved it can detect livestream videos in real time. can
       you explain why this may be so? both my webcam and test videos are
       30fps, 1280w/720h resolution, so i had expected that the recorded
       video would have ran the same if not faster.
       note: for clarification, i have read the comments on your other
       tutorial on the    faster video processing with threading   , however,
       i am on the newer version of python/opencv and the    slow   
       cv2.videocapture is faster.
       i hope to get a reply on this likely very beginner question.
       kind regards
       [979]reply
          + adrian rosebrock may 14, 2018 at 11:51 am [980]#
            it   s actually not always the cause that processing a recorded
            video will be faster. recorded videos are normally compressed
            in some manner and depending on which video codec you are
            using and which video libraries you have installed it may
            actually take longer to process a video file rather than a
            true video stream. without knowing what file format or your
            system configuring i   m unfortunately not able to give further
            advice but i hope that at least points you in the right
            direction.
            [981]reply
   154. aagam may 14, 2018 at 9:47 am [982]#
       hello adrian     great post! i want to add some other objects like
       phone, laptop, ball,     etc. does it require some other model. which
       model i should use? if i have this datasets than how i trained it?
       [983]reply
          + adrian rosebrock may 14, 2018 at 11:44 am [984]#
            hi aagam     please refer to [985]this blog post on deep
            learning id164 to get you started. from there, i
            would suggest working through [986]deep learning for computer
            vision with python where i discuss how to train your own deep
            learning object detectors in detail.
            [987]reply
   155. ajay may 16, 2018 at 4:45 am [988]#
       hi sir, after downloading code, i run    python
       real_time_object_detection.py    prototxt
       mobilenetssd_deploy.prototxt.txt    model
       mobilenetssd_deploy.caffemodel    command in cmd. it opens webcam and
       recognizing object but in green frame. my webcam working fine while
       accessing normally but showing green frame while running the code.
       [989]reply
          + adrian rosebrock may 17, 2018 at 6:58 am [990]#
            hey ajay, that sounds like a driver issue with your webcam/a
            problem with opencv accessing your webcam. since your webcam
            is working normally it   s most likely an opencv-specific issue.
            what model of webcam are you using and on which os?
            [991]reply
               o ajay may 18, 2018 at 5:56 am [992]#
                 hi sir, i am using intel realsense 3d camera which comes
                 in-built with my windows 10 based lenovo laptop. thanks !
                 [993]reply
                    # adrian rosebrock may 22, 2018 at 6:44 am [994]#
                      sorry, i   m not familiar with the intel realsense 3d
                      camera. i would suggest contacting intel support or
                      posting on their developer forums. sorry i couldn   t
                      be of more help here!
                      [995]reply
                         @ ajay may 22, 2018 at 12:51 pm [996]#
                           it   s okay, anyway your blogs are too good on
                           id161 and neural networks. thanks for
                           the help     
   156. bob inventor may 16, 2018 at 9:56 pm [997]#
       hi, what do i have to do to get the code to only detect one object.
       for example, bird. i have tried deleting the classes but get errors
       and am unsure what to do.
       all i want to detect is bird.
       [998]reply
          + adrian rosebrock may 17, 2018 at 6:45 am [999]#
            [1000]this blog post will solve your exact problem.     
            [1001]reply
               o zack inventor may 19, 2018 at 1:02 pm [1002]#
                 thanks! what i am doing is checking to see if    bird    is
                 detected. so even if i ignore all other objects, they are
                 still apart of the classes[idx] so if i do
                 if classes[idx] ==    bird   :
                 bird is only detected when it is the only thing in the
                 camera view.
                 if i put a picture a car next to it, it only detects the
                 bird on screen it does not print    bird detected    because
                 it sees the car as well.
                 is there a way so that the only thing possible is    bird   ?
                 thanks!
                 [1003]reply
                    # adrian rosebrock may 22, 2018 at 6:19 am [1004]#
                      i think you have a problem with your implementation
                      of class filtering. the code in the post i linked to
                      above will enable you to ignore all classes except
                      the ones that you want. make sure you are using the
                         downloads    section of the blog post to download the
                      code rather than implementing it on your own.
                      [1005]reply
   157. vishakraj may 18, 2018 at 3:31 pm [1006]#
       usage: real_time_object_detection.py [-h] -p prototxt -m model [-c
       confidence]
       real_time_object_detection.py: error: unrecognized arguments:
       caffemodel
       what to do..
       thanks in advance
       [1007]reply
          + adrian rosebrock may 22, 2018 at 6:36 am [1008]#
            make sure you read [1009]this blog post on command line
            arguments     it will help you resolve the error.
            [1010]reply
   158. dimuthu may 24, 2018 at 11:02 pm [1011]#
       dear adrian,
       using tensorflow id21 i created my custom object
       detector. it   s work pretty well with the web cam but the problem is
       when i am run the code using the live feed from the ip cam it does
       not detect as expected.kindly guide me to solve this problem.
       by the way earlier there was a delay in live streaming but thanks
       to your post real time id164 with deep learining and
       opencv now there is no delay. ?
       [1012]reply
          + adrian rosebrock may 25, 2018 at 5:46 am [1013]#
            you should be able to take line 35:
            vs = videostream(src=0).start()
            and modify it to be:
            vs =
            videostream(src="rtsp://192.168.1.2:8080/out.h264").start()
            under the hood videostream is threading the cv2.videocapture
            object so you   ll want to research the cv2.videocapture
            function and whatever particular stream you are using.
            [1014]reply
   159. devrim ayyildiz june 13, 2018 at 9:13 am [1015]#
       hi adrian,
       first of all thank you for your excellent tutorials. i am new to
       python and completely rookie for the concepts of image recognition,
       deep learning, etc. despite that i was able to somewhat follow your
       code and get it running on my ubuntu vm with a usb camera in a few
       hours. this is really great and motivating.
       my goal is to get this setup running on a raspberrypi board with a
       usb camera and what i want to do is to control a dog repellent
       circuit when the python program detects a dog (which will be my dog
       at home that i don   t want near our main door as she scratches it
       when i leave her alone). probably your code will work just fine to
       meet my goal, but what i had in my mind in the beginning was to
       train a simple model with some images (or video) of my dog only so
       that i will have a very limited trained set for one target (i.e. my
       dog). it will be enough if the algorithm just detects my dog and
       does not care about detecting any other objects.
       is there a lightweight (that will run on a raspberrypi board)
       library that i can use to train a basic model? i may be using the
       terminology wrong here, but i hope i was able to make myself clear.
       thanks again!
       [1016]reply
          + adrian rosebrock june 15, 2018 at 12:42 pm [1017]#
            there lots of models that can run on the raspberry pi, ranging
            from simple    toy    models for educational purposes all the way
            up to state-of-the-art networks like squeezenet and mobilenet.
            my suggestion would be to start with [1018]this post to train
            your own model. from there you should go through [1019]deep
            learning for id161 with python to learn how to train
            more advanced methods. i hope that helps point you in the
            right direction!
            [1020]reply
   160. hsu june 15, 2018 at 7:47 am [1021]#
       when i run it , i found this error.
       can you kindly give advise for it.
       usage: real_time_object_detection.py [-h] -p prototxt -m model [-c
       confidence]
       real_time_object_detection.py: error: the following arguments are
       required: -p/   prototxt, -m/   model
       [1022]reply
          + adrian rosebrock june 15, 2018 at 12:00 pm [1023]#
            make sure you read [1024]this blog post on command line
            arguments     it will help you resolve the error.
            [1025]reply
   161. denis june 17, 2018 at 4:58 pm [1026]#
       hi adrian,
       when i run the code (using spyder on windows), i got systemexit: 2.
       i understood that it had something to do with argparse module.
       what i did is simply downloaded your code, opened it in anaconda   s
       spyder, and then run it.is there anything else i should be running
       along with main code that i downloaded, or is there some blatant
       mistake that i might be making here?
       thanks.
       [1027]reply
          + denis june 17, 2018 at 5:31 pm [1028]#
            hi adrian,
            sorry to spam this comment section. i found the problem and
            fixed it (it was the argparse module). these two comments by
            me should probably be removed from thread as they are do not
            contribute to anything.
            thanks!
            [1029]reply
               o adrian rosebrock june 19, 2018 at 8:49 am [1030]#
                 congrats on resolving the issue, denis. i think the
                 comments should stay as other readers may have this
                 question as well.
                 i would recommend those reading this comment to
                 [1031]read up on command line arguments as they can avoid
                 any headaches if you are running into errors with them.
                 thanks again, denis!     
                 [1032]reply
   162. rusiru june 20, 2018 at 10:08 am [1033]#
       i just want to say thank you !!!!!!!!!!!!
       [1034]reply
          + adrian rosebrock june 20, 2018 at 4:00 pm [1035]#
            and thank you rusiru for being a pyimagesearch reader     
            [1036]reply
   163. chami june 24, 2018 at 9:48 am [1037]#
       sir can you please tell me how to modify this code to only detect
       persons.
       [1038]reply
          + adrian rosebrock june 25, 2018 at 1:46 pm [1039]#
            see [1040]this blog post.
            [1041]reply
               o chami june 29, 2018 at 9:22 am [1042]#
                 thank you sir. can we use caffe model to track objects as
                 well?
                 [1043]reply
                    # adrian rosebrock july 3, 2018 at 8:50 am [1044]#
                      deep learning-based object tracking algorithms do
                      exist but i would suggest taking a look at
                      correlation filters to get you started.
                      [1045]reply
   164. machinelearner june 28, 2018 at 2:09 pm [1046]#
       great tutorial! is this tutorial for r-id98? if not do you know how
       can i build an image detector using r-id98?
       [1047]reply
          + adrian rosebrock july 3, 2018 at 8:57 am [1048]#
            the method used here is a single shot detector (ssd). i will
            have a faster r-id98 example soon.
            [1049]reply
   165. olapade abdul-azeez july 10, 2018 at 8:02 pm [1050]#
       please how can i use already recorded video as input instead of
       webcam
       [1051]reply
          + adrian rosebrock july 13, 2018 at 5:30 am [1052]#
            you can use the    cv2.videocapture    or    filevideostream   
            functions. refer to [1053]this tutorial.
            [1054]reply
   166. khaw oat july 12, 2018 at 1:32 pm [1055]#
       how can i create a caffe model?
       [1056]reply
          + adrian rosebrock july 13, 2018 at 5:01 am [1057]#
            training your own caffe model is not exactly an easy process,
            and furthermore, there seems to be a lot of misconceptions in
            the comments of this post on how id164 actually
            works. you should start by [1058]reading this post which
            covers deep learning id164 fundamentals and then
            provides resources to help you train your models.
            [1059]reply
   167. [1060]daniel gonzalez july 17, 2018 at 4:26 pm [1061]#
       hello how are you? could you tell me how to enlarge the size of the
       video window? she is very young in my macbook pro.
       [1062]reply
          + adrian rosebrock july 20, 2018 at 6:50 am [1063]#
            opencv provides very limited gui functionality. there is no
            ability to resize the window or move it around. you could use
            the    cv2.imresize    function to enlarge the output image prior
            to displaying it.
            [1064]reply
   168. hashir july 18, 2018 at 1:30 am [1065]#
       hi bro,
       can i use my own yolo weight datasets for detecting object in
       opencv
       [1066]reply
   169. dhruv chamania july 25, 2018 at 11:52 pm [1067]#
       i have a doubt about fps, will me running this code just for just a
       image(single frame)and the fps that it will receive, will the same
       as the fps for a video stream.
       in theory it should be right?
       want to try and test for different id136 boards the fps
       performance, and in for one of the boards, i am not able to
       establish a video stream, thats why the doubt.
       [1068]reply
          + adrian rosebrock july 31, 2018 at 12:13 pm [1069]#
            it will give you an approximation but i would suggest running
            for at least 30 frames to obtain a more reasonable estimation.
            another hack you could do is loop over the same image/frame 30
            times within the fps counter but keep in mind that won   t take
            into account any i/o latency from grabbing a new frame from
            the camera sensor.
            [1070]reply
   170. john july 28, 2018 at 12:45 pm [1071]#
       hi adrian,
       your tutorials have been nothing but amazing! thank you for that.
       i am currently working on an autonomous vehicle design for
       platooning purposes with raspberry pi and pi cam. it got me
       thinking on how can the autonomous vehicle(slave) detect the
       movement of the master vehicle (assuming master-slave
       configuration) which i am following while it   s curving, say about
       60 degrees.
       any idea on this? thanks again
       [1072]reply
          + adrian rosebrock july 31, 2018 at 11:58 am [1073]#
            there are a few ways to approach this problem, but a
            potentially easy one would be to place an easily identifiable
            marker on the master and then detect the marker from the
            slave, that way it can be detected and tracked.
            [1074]reply
   171. brijesh july 29, 2018 at 4:00 am [1075]#
       hi adrian,
       i want to run this real time id164 for input video and
       save output .but while running the script , i am getting following
       error.
          
       file    real_time_people_detection.py   , line 50, in
       (h, w) = frame.shape[:2]
       attributeerror:    nonetype    object has no attribute    shape   
       i have seen all query and separate blog you have written to resolve
       this issue.
       i have provided the correct path for my input video file , my
       system is ubuntu 16.04 , i install codec ffmpeg and x264 and i
       reinstall opencv followed by your blog.but still i am facing the
       same issue and imshow and output video is very fast. i am using
       video file formate .mkv and .mp4. below is the line of code i wrote
       for video output.
       out =
       cv2.videowriter(   output.mp4   ,cv2.videowriter_fourcc(   m   ,   j   ,   p   ,   g   
       ), 30, (640,480),true)
       i also checked with below one.
       fourcc = cv2.videowriter_fourcc(*   xvid   )
       out = cv2.videowriter(   output1.avi   ,fourcc, 30.0, (640,480))
       i have seen all the solution that is discussed in your blog and
       other blog also to solve this problem but i didn   t get success.
       please help me to solve this.
       thanks in advance.
       [1076]reply
          + adrian rosebrock july 31, 2018 at 11:55 am [1077]#
            just to fully understand the problem     you used a separate
            python script and the    cv2.videowriter    function to create an
            output video file and now you are trying to take that output
            video file and run it through a separate python script?
            [1078]reply
   172. mayur ghevariya august 2, 2018 at 7:40 am [1079]#
       usage: real_time_object_detection.py [-h] -p prototxt -m model [-c
       confidence]
       real_time_object_detection.py: error: the following arguments are
       required: -p/   prototxt, -m/   model
       an exception has occurred, use %tb to see the full traceback.
       these are the error about model so where to add this model in
       spyder-anaconda
       [1080]reply
          + adrian rosebrock august 2, 2018 at 9:17 am [1081]#
            hey mayur, make sure you are reading the comments to this blog
            post or at least doing a ctrl + f and searching for your error
            on the page. i   ve addressed the question a number of times.
            you need to provide the [1082]command line arguments to the
            script.
            [1083]reply
   173. mike gibs august 3, 2018 at 12:21 pm [1084]#
       hello sir,
       your blogs are great but regarding this blog, i really need to ask
       1 question i.e how we can customize the model to train for the
       specific thing, for example, tanks etc
       [1085]reply
          + adrian rosebrock august 7, 2018 at 7:03 am [1086]#
            you would need to train or fine-tune a model. i discuss the
            fundamentals of [1087]deep learning id164 here. and
            when you   re ready to train your own model i would suggest
            working through [1088]deep learning for id161 with
            python.
            [1089]reply
   174. hassan nawaz august 6, 2018 at 10:10 am [1090]#
       this blog is great ad it really works for me but i need to ask:
       how i used cifer 100 insteed of caffemodel?
       [1091]reply
          + adrian rosebrock august 7, 2018 at 6:39 am [1092]#
            you would need to use a caffe model already trained on
            cifar-100. do you have such a model? if not, you would want to
            train your model on cifar-100 first.
            [1093]reply
   175. sahil makandar august 7, 2018 at 12:08 am [1094]#
       hey adrian, can you please share regarding the pedestrian detection
       and vehicle in low light or night vision? thank you.
       [1095]reply
   176. usuf august 9, 2018 at 1:42 am [1096]#
       hi @adrian rosebrock
       nice tutorial ,i have one question instead of detecting pretrained
       object
       how can i develop my own model to detect my own object ?
       [1097]reply
          + adrian rosebrock august 9, 2018 at 2:46 pm [1098]#
            hey usuf     you should read [1099]this post to understand the
            fundamentals of deep learning id164. then take a
            look at [1100]deep learning for id161 with python
            where i demonstrate how to train your own custom learning
            object detectors. i hope that helps point you in the right
            direction!
            [1101]reply
               o usuf august 13, 2018 at 6:06 am [1102]#
                 thanks for the hope
                 [1103]reply
   177. [1104]rick august 17, 2018 at 2:53 am [1105]#
       it is very impressive tutorial.
       it is very very useful.
       thank you very much.
       [1106]reply
          + adrian rosebrock august 17, 2018 at 7:13 am [1107]#
            thanks rick, i   m glad you liked it     
            [1108]reply
   178. azzurro august 21, 2018 at 9:48 am [1109]#
       hello adrian!
       congratulation for your nice job!
       i would like to ask you if it   s possible to stream through wifi
       camera (url stream) instead of usb camera.
       thank you!
       [1110]reply
          + adrian rosebrock august 22, 2018 at 9:30 am [1111]#
            yes, opencv provides functionality for ip camera streaming via
            the cv2.videocapture function. i don   t have any tutorials that
            demonstrate how to do that (yet), but that should at least
            give you a starting point!
            [1112]reply
   179. afo august 31, 2018 at 4:03 pm [1113]#
       hey adrian, awesome post it helps a lot. i am running at 1.25 fps
       anyway i can make it faster?
       [1114]reply
          + adrian rosebrock september 5, 2018 at 9:17 am [1115]#
            what hardware are you running the object detector on?
            [1116]reply
   180. manish pandey september 3, 2018 at 3:33 am [1117]#
       hi adrian,
       i tried to run this code through commmand line. however, it asks me
       to give it two arguments. i tried many ways including giveing the
       path and file name, but it doesn   t run. can you please make a short
       video regarding this? it would be a great help if you teach 1 more
       guy into image recoid86nition. thanks in adbance
       [1118]reply
          + adrian rosebrock september 5, 2018 at 8:59 am [1119]#
            it sounds like you may not have experience in command line
            arguments. [1120]read this tutorial and you   ll be all set and
            up to speed     
            [1121]reply
   181. muhammad asyraaf september 3, 2018 at 12:11 pm [1122]#
       hello adrian
       when i run the code it shows that import error: no module named
       imutils.video
       any idea on how to solve this issue?
       [1123]reply
          + adrian rosebrock september 5, 2018 at 8:55 am [1124]#
            you need to install the imutils library:
            $ pip install imutils
            [1125]reply
               o asyraaf september 11, 2018 at 4:34 am [1126]#
                 even after $ the pip install imutils
                 i faced the same problem    
                 from imutils.video import videostream
                 importerror: no module named imutils.video
                 or do i need to reinstall all the stuff?
                 [1127]reply
                    # adrian rosebrock september 11, 2018 at 8:02 am
                      [1128]#
                      i don   t think you are installing    imutils   
                      correctly. run    pip freeze    and ensure    imutils    is
                      listed in your set of installed python packages.
                      [1129]reply
          + nl november 8, 2018 at 3:48 pm [1130]#
            if you are using python3, then don   t forget to change
               python       to    python3       to run the script.
            [1131]reply
   182. natheeswari september 4, 2018 at 12:13 am [1132]#
       hi adrain
       is it possible to identify a person with their names instead of
       having simply person with their confidence score.
       [1133]reply
          + adrian rosebrock september 5, 2018 at 8:50 am [1134]#
            yes. see this tutorial on [1135]face recognition.
            [1136]reply
   183. attila pataki september 4, 2018 at 5:17 am [1137]#
       hey,
       congrats! i really like the projects your posting!
       because i recently got an android phone, would it be possible to
       like run this real time detection code on a samsung s8? do you know
       what would be the best/easiest way to build an app and run it via
       smartphone? thanks!
       [1138]reply
          + adrian rosebrock september 5, 2018 at 8:42 am [1139]#
            opencv provides java bindings for android. i would suggest
            looking at the opencv documentation for more details. i
            personally don   t have any experience working with opencv +
            android.
            [1140]reply
   184. steven seung september 5, 2018 at 2:39 am [1141]#
       for windows users running into the can   t open
       modelnetssd_deploy.prototxt.txt or modelnetssd_deploy.caffemodel,
       you have to use cmd or powershell as an administrator. that fixed
       the problem for me, classic windows problems     
       [1142]reply
   185. vipul september 19, 2018 at 4:21 am [1143]#
       is it workable for oflline video ? if yes then what changes i
       should do ??
       [1144]reply
   186. anirudh soni september 22, 2018 at 8:38 am [1145]#
       hi
       may i know specifications of your laptop. i was doing the the same
       thing using haar cascade but it is lagging in my pc(8gb ram, i5 8th
       gen, 2gb amd radeon 520 graphic card)
       [1146]reply
   187. soufiane october 2, 2018 at 4:22 pm [1147]#
       thank you it works really well
       [1148]reply
          + adrian rosebrock october 8, 2018 at 10:32 am [1149]#
            great news soufiane     
            [1150]reply
   188. chetan mahajan october 24, 2018 at 7:53 am [1151]#
       thank you so much nice work   :)
       [1152]reply
          + adrian rosebrock october 29, 2018 at 2:01 pm [1153]#
            thanks chetan, i   m glad you liked the blog post!
            [1154]reply
   189. shalaka deo october 29, 2018 at 6:57 am [1155]#
       while executing the program i have some errors:
       the following arguments are required: -p /- ,-portotext, -m/    
       model
       [1156]reply
          + adrian rosebrock october 29, 2018 at 1:08 pm [1157]#
            if you   re new to the terminal and command line arguments
            that   s okay, [1158]but make sure you read this tutorial first.
            from there you   ll be all set.
            [1159]reply
          + nl november 8, 2018 at 3:44 pm [1160]#
            copy everything between    $    and    [info]    (three lines in
            total) to run the script. i think you missed two lines.
            [1161]reply
   190. git-scientist november 6, 2018 at 12:06 am [1162]#
       as i saw in the comments you were going to cover id164
       using darknet too. have you done anything on that so far? thank
       you!
       [1163]reply
          + adrian rosebrock november 6, 2018 at 1:05 pm [1164]#
            the yolo post will be publishing next week, stay tuned     
            [1165]reply
               o git-scientist november 6, 2018 at 8:35 pm [1166]#
                 adrien, it   s awesome, looking forward to it!
                 [1167]reply
   191. amar november 22, 2018 at 10:09 am [1168]#
       hey adrian i want to ask something, how to use only the class for
       car id164? i just want to use this class only
       [1169]reply
          + adrian rosebrock november 25, 2018 at 9:24 am [1170]#
            you want to detect just the car class? if so, see [1171]this
            tutorial on how to filter object classes.
            [1172]reply
               o amar november 29, 2018 at 10:29 pm [1173]#
                 hi adrian what algorithm do you use for this object
                 detection?
                 [1174]reply
                    # adrian rosebrock november 30, 2018 at 8:46 am
                      [1175]#
                      the object detector used in this blog post is a
                      single shot detector (ssd).
                      [1176]reply
               o maas december 9, 2018 at 1:08 pm [1177]#
                 hi adrian, at first thanks a lot for your work and
                 tutorials. i   m new to all of this and actually just
                 playing a little bit around.
                 i would say that just ignoring specific results is only a
                    fake    solution. wouldn   t it be more performant if the
                 model is directly ignoring the classes (just looking for
                 a subset of classes) instead of ignoring the results?
                 is there a trained model available for specific classes?
                 thanks!
                 [1178]reply
                    # adrian rosebrock december 11, 2018 at 12:52 pm
                      [1179]#
                      yes, absolutely. what you   re referring to is called
                         fine-tuning    but it requires that you:
                      1. know how to modify the fc heads of the network
                      2. replace them
                      3. fine-tune them on a dataset of just what you want
                      to detect
                      for some people that is overkill. for others it is
                      required for reasonable accuracy. for amar   s
                      original question filtering the classes would be
                      sufficient.
                      [1180]reply
   192. ibrahim november 23, 2018 at 8:50 am [1181]#
       @adrian rosebrock sir i got this message when i ran the command in
       terminal.
       error: argument -p/   prototxt is required. from where to include
       this parameter? please reply thanks
       [1182]reply
          + adrian rosebrock november 25, 2018 at 9:12 am [1183]#
            if you are new to command line arguments you need to read
            [1184]this tutorial first. invest in your knowledge of
            argparse and command line arguments and you will then be able
            to run the script.
            [1185]reply
   193. [1186]arslan november 27, 2018 at 8:52 am [1187]#
       hi adrian !
       very fine blog post . i was actually working on raspberry pi than i
       came to know that it can only process 0.8 fps . what hardware
       should i choose to actually detect the high speed objects very
       smoothly . e.g a car moving at 70-100 mph
       [1188]reply
          + adrian rosebrock november 30, 2018 at 9:31 am [1189]#
            you   ll want a more powerful machine for sure. if you want to
            go the embedded route try nvidia   s jetson series. but i   d try
            to prototype with a normal desktop gpu first.
            [1190]reply
   194. yadhuvir ram december 2, 2018 at 12:22 pm [1191]#
       hi adrain!
       how to get voice output for the above code.
       [1192]reply
          + adrian rosebrock december 4, 2018 at 10:07 am [1193]#
            i don   t have any experience with text-to-speech python
            library. i   m not sure what the best ones are but i know they
            do exist. i hope another reader can provide you with some
            suggestions.
            [1194]reply
   195. aung december 4, 2018 at 3:06 am [1195]#
       hi sir,
       how to write caffemodel and prototext?
       what kind of softwre can open the caffemodel?
       [1196]reply
          + adrian rosebrock december 4, 2018 at 9:38 am [1197]#
            you don   t    write    the actual .caffemodel and .prototxt files    
            the caffe deep learning toolkit is used to train a deep neural
            network to detect and recognize object classes. it sounds like
            you may be new to id161 and id164 so i
            would recommend reading [1198]this introductory guide to help
            you get started.
            [1199]reply
   196. [1200]alex flint december 5, 2018 at 11:24 am [1201]#
       hey adrian sir,
       sir i want to detect human objects from ir camera is it possible if
       yes will you please let me know
       [1202]reply
          + adrian rosebrock december 6, 2018 at 9:35 am [1203]#
            i don   t have any tutorials on ir cameras and human detection
            but i will consider it for a future post. thanks for the
            suggestion.
            [1204]reply
   197. maricarmen december 5, 2018 at 2:54 pm [1205]#
       thank u so mouch.
       how can i rezise the video from the output?
       [1206]reply
          + adrian rosebrock december 6, 2018 at 9:34 am [1207]#
            you can use either cv2.resize or imutils.resize to resize a
            frame.
            [1208]reply
   198. nikhil jaiswal december 6, 2018 at 3:59 am [1209]#
       hi sir,
       i am new to robotics field. i have to perform real time recognition
       & tracking of 3d textureless object. the objects are rectangular in
       shape and are of different colors. therefore, i have to recognize
       the correct object based on colour.
       [1210]https://www.youtube.com/watch?v=l5apjtnycpc
       actually, i was looking at this challenge no 2. in this challenge,
       i want to implement the code for the drone to correctly recognize
       the brick. can you please suggest some approaches which can be used
       for this?
       [1211]reply
   199. joe december 19, 2018 at 1:45 pm [1212]#
       adrian, i love reading your posts! keep up the great work! i
       actually have referenced your code in an interview for a software
       development job!
       one question on this topic, if i want to train my own models, do
       you have any recommendation on how i should go about that?
       [1213]reply
          + adrian rosebrock december 19, 2018 at 1:46 pm [1214]#
            thanks joe!
            as far as training your own custom object detectors, i discuss
            faster r-id98, single shot detector (ssds), and yolo, both the
            theory and how to train them from scratch, inside my book,
            [1215]deep learning for id161 with python. be sure
            to take a look, i have no doubt the book will help you train
            your own detectors.
            [1216]reply
   200. calista yinygu december 22, 2018 at 4:38 am [1217]#
       hi adrian,
       thanks so much for the codes, this is really helpful in advancing
       newbies like me in advancing ai adoption     
       i will like to ask if i were to do tracking after the object
       detection in your code, will it help to decrease the computational
       load?
       thanks
       best,
       calista
       [1218]reply
          + adrian rosebrock december 27, 2018 at 10:54 am [1219]#
            your intuition is correct but there is a balance you need to
            strike between detection and tracking. refer to [1220]this
            tutorial for a practical example.
            [1221]reply
   201. abhijeet january 3, 2019 at 3:06 am [1222]#
       hi thanks for this wonderful explanation but i have one doubt you
       declared class above for some objects but this module didn   t detect
       cell phone ,pen i mean if want add lots objects name
       inside class then how can i do that please tell me.
       [1223]reply
          + adrian rosebrock january 5, 2019 at 8:54 am [1224]#
            are you ssh   ing into your system? if so, make sure you enable
            x11 forwarding:
            $ ssh -x user@your_ip_address
            [1225]reply
   202. gunjan singh january 5, 2019 at 2:31 am [1226]#
       thank you for your blog,
       i wanted to know whether same code can be used for detecting helmet
       on a bikers in traffic scenario (with or without helmet)
       [1227]reply
          + adrian rosebrock january 5, 2019 at 8:35 am [1228]#
            i would recommend using a [1229]face detector and then
            training a custom helmet vs. no helmet classification model
            for the face and head region.
            [1230]reply
   203. muharrem january 8, 2019 at 3:29 am [1231]#
       hello, adrian,
       thanks for the great article series.
       i   m new to opencv-python. i follow your articles with interest and
       try to apply them.
       wabcam opens when i run the codes, but writes the object or the
       person into 8-10 boxes. although i   m the only one on the screen, he
       sees me as many people. he marks and names a single chair many
       times. i couldn   t figure out the problem. can you help me?
       [1232]reply
          + adrian rosebrock january 8, 2019 at 6:38 am [1233]#
            it sounds like the object detector is simply reporting
            incorrect results. it   s hard to say what the issues is without
            seeing your input images or video but my guess is that the
            opencv object detector was not trained on images similar to
            what your images are.
            what you   ll find out in your studies is that id161
            algorithms are not magic. they do not work 100% of the time.
            in fact, many will work only in specific conditions.
            [1234]reply
               o muharrem january 8, 2019 at 9:09 am [1235]#
                 thanks for your time, my teacher,
                 in the form of a short video and i wanted to throw a
                 picture as your mail.
                 maybe my problem is better understood.
                 also, can you open up a little bit more than you say    
                    my guess is that the opencv object detector was not
                 trained on images similar to what your images are.    ?
                 can you tell me exactly what i need to do?
                 in the form of instructions respectively.
                 i am grateful to you.
                 [1236]reply
                    # adrian rosebrock january 11, 2019 at 10:07 am
                      [1237]#
                      hey muharrem     it would be a good to understand what
                      your current experience level is with computer
                      vision and deep learning. could you tell me a bit
                      more about your experience level?
                      my gut tells me you are likely new to cv and dl,
                      which is totally okay, but i recommend you work
                      through [1238]deep learning for id161 with
                      python. inside the book i teach you the fundamentals
                      of deep learning and machine learning, eventually
                      working all the way up to training your own custom
                      object detectors on your own datasets. be sure to
                      take a look, i   m confident it will help you with
                      your projects.
                      [1239]reply
   204. redhwan nasser january 16, 2019 at 8:54 am [1240]#
       hello, adrian,
       thanks for your time, my teacher,
       can i combine this code with
       [1241]https://www.pyimagesearch.com/2018/06/18/face-recognition-wit
       h-opencv-python-and-deep-learning/ ?
       i need to delete all data except data of the person and add it new
       data(features of human) such as face recognition and color of
       clothes recognition
       can i make it or not?
       [1242]reply
          + adrian rosebrock january 16, 2019 at 9:26 am [1243]#
            yes, you can combine the scripts. first detect faces and then
            detect the full body. the face of the person should lay in the
            region of the detected body, that way you can associate a face
            with the body.
            [1244]reply
   205. nihar january 20, 2019 at 2:28 am [1245]#
       hi i want to know how can i add more different types of objects, i
       have datasets of objects made but i dont know how to modify the
       above code on their basis.
       please help me out here   .
       [1246]reply
          + adrian rosebrock january 22, 2019 at 9:32 am [1247]#
            i answer that exact question inside my [1248]gentle guide to
            deep learning id164.
            [1249]reply
   206. siva january 21, 2019 at 1:53 am [1250]#
       hello adrian   
       thanks for your time.
       please let us know what are the changes to be done in the code to
       detect only vehicle i.e car etc.., but should not any other
       objects.
       [1251]reply
          + adrian rosebrock january 22, 2019 at 9:28 am [1252]#
            i show you how to do exactly that [1253]in this blog post.
            [1254]reply
   207. divya pai january 22, 2019 at 5:13 am [1255]#
       error: the following arguments are required: -p/   prototxt,
       -m/   model
       [1256]reply
          + adrian rosebrock january 22, 2019 at 9:04 am [1257]#
            you need to supply the [1258]command line arguments to the
            script.
            [1259]reply
   208. yadhuvir january 23, 2019 at 10:29 am [1260]#
       hello adrian
       can i get more number of classes for the above code
       [1261]reply
          + adrian rosebrock january 25, 2019 at 7:22 am [1262]#
            see lines 22-25.
            [1263]reply
   209. hemanth january 30, 2019 at 4:46 am [1264]#
       hi,
       how to retrain mobilenet ssd caffe model ?
       could you please give me the stepls?
       [1265]reply
          + adrian rosebrock february 1, 2019 at 7:17 am [1266]#
            hi hemanth     i cover how to train and fine-tune ssds, faster
            r-id98s, and retinanet inside my book, [1267]deep learning for
            id161 with python. i would suggest starting there.
            [1268]reply
   210. thennarasu january 30, 2019 at 4:47 am [1269]#
       hi adrian   
       can you please tell me to train custom objects like mobile phones
       which are not included in these classes.thank you
       [1270]reply
          + adrian rosebrock february 1, 2019 at 7:14 am [1271]#
            you   ll need to either train or fine-tune an existing object
            detector on your mobile phone class. i cover the basics of
            id164 [1272]in this post. i then teach you how to
            train your own custom object detectors inside [1273]deep
            learning for id161 with python.
            [1274]reply
   211. [1275]javier february 1, 2019 at 7:45 am [1276]#
       hi, can i ask you how you made your own caffemodel? how can i make
       mine?
       thank you very much. excelent code
       [1277]reply
          + adrian rosebrock february 5, 2019 at 9:47 am [1278]#
            thanks javier, i   m glad you enjoyed the tutorial     
            you can learn how to train your own custom object detector
            inside [1279]deep learning for id161 with python.
            [1280]reply
               o javier february 20, 2019 at 10:17 am [1281]#
                 thanks!!
                 [1282]reply
   212. paulo february 1, 2019 at 1:19 pm [1283]#
       hi adrian,
       how do i measure accuracy and recall rates? i can not quantify the
       tp, fp, tn, and fn values of my pre-trained model with mobilenet
       ssd. please, help me.
       [1284]reply
   213. [1285]rajat february 3, 2019 at 6:10 am [1286]#
       hello adrian,
       first of all, awesome work man !!!
       every single blog of yours is just great !!!
       i had a question regarding this tutorial, let   s say we want to save
       the image of the object that has been detected, how can that be
       done ? can cv2.imwrite can be used ? if yes then how ?
       cheers man !
       [1287]reply
          + [1288]rajat february 3, 2019 at 6:24 am [1289]#
            nevermind adrian,
            did it using the following code:
            image = frame[startx:endx,starty:endx]
            cv2.imwrite(   detected.png   , image)
            posted the code if anyone else needs help.
            cheers !
            [1290]reply
               o adrian rosebrock february 5, 2019 at 9:31 am [1291]#
                 nice job rajat!
                 [1292]reply
   214. bhushan february 18, 2019 at 12:55 pm [1293]#
       how can i upgrade the opencv version because it is not working on
       3.2.0?
       [1294]reply
          + adrian rosebrock february 20, 2019 at 12:27 pm [1295]#
            you can follow my [1296]opencv install guides to help you get
            the latest version of opencv installed.
            [1297]reply
   215. pranav m february 23, 2019 at 5:29 am [1298]#
       hii sir,
       insted of showing labels in the box, is there any way to get that
       label as audio output?
       [1299]reply
          + adrian rosebrock february 27, 2019 at 6:16 am [1300]#
            take a look at text-to-speech libraries. google   s gtts is a
            good one.
            [1301]reply
   216. hailey february 24, 2019 at 1:32 am [1302]#
       hello adrian,
       i am new to id161. instead of video, i want the pi camera
       to take a picture, process image and detect objects on image. what
       should i change in the codes?
       [1303]reply
          + adrian rosebrock february 27, 2019 at 6:08 am [1304]#
            if you are new to the world of id161 and image
            processing i would suggest you first read through
            [1305]practical python and opencv so you can learn the basics
            first. i teach you how to perform face detection, determine
            the (x, y)-coordinates, and save the image. start there first
            and from there you   ll be able to graduate to more advanced
            topics.
            [1306]reply
   217. [1307]faqih february 28, 2019 at 1:56 am [1308]#
       wow that is amazing. but how can i show the output to the browser
       so i can access it from different ip (not from console)?
       [1309]reply
          + adrian rosebrock february 28, 2019 at 1:42 pm [1310]#
            i   ll be covering that exact question in my upcoming computer
            vision + raspberry pi book, stay tuned!
            [1311]reply
   218. chitrarth patel march 5, 2019 at 5:48 am [1312]#
       in mobilenet we have 90 classes, so can we use all the 90 classes?
       and how?
       [1313]reply
          + adrian rosebrock march 5, 2019 at 8:28 am [1314]#
            it depends on what the network was trained on. this network
            was trained on a subset of the coco dataset. you might want to
            try [1315]this yolo + opencv model.
            [1316]reply
   219. sonal march 24, 2019 at 6:06 am [1317]#
       hi adrian,
       can you tell me how many layers are present in the network
       [1318]reply
          + adrian rosebrock march 27, 2019 at 9:08 am [1319]#
            you can read [1320]this tutorial where i describe the object
            detection network and link to more details on it.
            [1321]reply
   220. hashir march 26, 2019 at 7:13 am [1322]#
       hi adrian,
       in this tutorial, i   m using two webcams and i got output in two
       frames perfectly.
       you were use detection box ratio as 3:7 in line no:68 and in line
       no 59 used value 2 in confidence (confidence = detections[0, 0, i,
       2]). so what is meant by that ratio and value 2 ?. should i need to
       change all those values for confidence value obtained from frame
       function from the second camera. and what is mean by index value 2
       in detections.shape[2].
       thanks and regards
       hashir
       [1323]reply
   221. jesuino march 26, 2019 at 8:16 am [1324]#
       hi adrian,
       i got too bad results from ssd method and after a little search, i
       realize that if i change the following lines i got an incredible
       increase.
       before:
       blob = cv2.dnn.blobfromimage(cv2.resize(frame, (300, 300)),
       0.007843, (300, 300), 127.5)
       after:
       blob = cv2.dnn.blobfromimage(cv2.resize(frame, (300, 300)),
       0.007843, (300, 300), (127.5, 127.5, 127.5))
       i don   t know why but maybe somebody has the same problem.
       [1325]reply
   222. [1326]sanghyunpark march 28, 2019 at 8:22 am [1327]#
       hi sir, really thanks for your useful post.
       i have a question.
       can i trarin with my own dataset?
       because i am making auto parking car and i wanna get id136 when
       real-time camera get frame of my own environment.
       sorry for my lackness of english skills.
       [1328]reply
          + adrian rosebrock april 2, 2019 at 6:31 am [1329]#
            have you taken a look at [1330]deep learning for computer
            vision with python? that book will teach you how to train your
            own custom deep learning-based object detectors.
            [1331]reply
   223. steve april 2, 2019 at 1:34 am [1332]#
       could you please give me the following details-
       in the above netwoek that i just implemented
       1.what was the size of image used for training?
       2.how many convolution layers were used and why?
       3.how many filters were used to extract features?
       i am so in need of these answers and by the way i love your work .
       [1333]reply
          + adrian rosebrock april 2, 2019 at 5:42 am [1334]#
            hey steve     your questions are answered through my previous
            post where i also link to the details on the object detector.
            see [1335]this tutorial.
            [1336]reply
   224. gaurav april 4, 2019 at 1:28 am [1337]#
       hi adrian rosebrock
       i need to track on only cars how can i do it?
       can you guide me?
       [1338]reply
          + adrian rosebrock april 4, 2019 at 1:09 pm [1339]#
            see [1340]this tutorial where i show you how to detect
            specific classes and ignore the rest.
            [1341]reply
   225. vivek menon m april 4, 2019 at 4:47 am [1342]#
       how can we give an alert using json when cat and dogs are detected
       in frame???
       [1343]reply
          + adrian rosebrock april 4, 2019 at 1:06 pm [1344]#
            what type of alert are you trying to create?
            [1345]reply

trackbacks/pingbacks

    1. [1346]raspberry pi: deep learning id164 with opencv -
       pyimagesearch - october 16, 2017
       [   ] few weeks ago i demonstrated how to perform real-time object
       detection using deep learning and opencv on a standard [   ]

leave a reply [1347]click here to cancel reply.

   comment
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________

   ______________________________name (required)

   ______________________________email (will not be published) (required)

   ______________________________website

   submit comment

   search...___________ (search)

resource guide (it   s totally free).

   [1348]get your free 17-page id161 and deep learning resource
   guide pdf

   get your free 17 page id161, opencv, and deep learning
   resource guide pdf. inside you'll find my hand-picked tutorials, books,
   courses, and libraries to help you master cv and dl.

                          [1349]download for free!

deep learning for id161 with python book     out now!

   [1350]deep learning with id161 and python kickstarter

   you're interested in deep learning and id161, but you don't
   know how to get started. let me help. [1351]my new book will teach you
   all you need to know about deep learning.

   click here to master deep learning

you can detect faces in images & video.

   [1352]learn how to detect faces in images and video

   are you interested in detecting faces in images & video? but tired of
   googling for tutorials that never work? then let me help! i guarantee
   that my new book will turn you into a face detection ninja by the end
   of this weekend. [1353]click here to give it a shot yourself.

   click here to master face detection

pyimagesearch gurus: now enrolling!

   the pyimagesearch gurus course is now enrolling! inside the course
   you'll learn how to perform:
     * automatic license plate recognition (anpr)
     * deep learning
     * face recognition
     * and much more!

   click the button below to learn more about the course, take a tour, and
   get 10 (free) sample lessons.

   take a tour & get 10 (free) lessons

hello! i   m adrian rosebrock.

   i'm an entrepreneur and ph.d who has launched two successful image
   search engines, [1354]id my pill and [1355]chic engine. i'm here to
   share my tips, tricks, and hacks i've learned along the way.

learn id161 in a single weekend.

   [1356]become an opencv guru

   want to learn id161 & opencv? i can teach you in a single
   weekend. i know. it sounds crazy, but it   s no joke. my new book is your
   guaranteed, quick-start guide to becoming an opencv ninja. so why not
   give it a try? [1357]click here to become a id161 ninja.

   click here to become an opencv ninja

subscribe via rss

   [1358]pyimagesearch rss feed

   never miss a post! subscribe to the pyimagesearch rss feed and keep up
   to date with my image search engine tutorials, tips, and tricks
     * [1359]popular

     * [1360]raspbian stretch: install opencv 3 + python on your raspberry
       pi september 4, 2017
     * [1361]install guide: raspberry pi 3 + raspbian jessie + opencv 3
       april 18, 2016
     * [1362]home surveillance and motion detection with the raspberry pi,
       python, opencv, and dropbox june 1, 2015
     * [1363]install opencv and python on your raspberry pi 2 and b+
       february 23, 2015
     * [1364]ubuntu 16.04: how to install opencv october 24, 2016
     * [1365]real-time id164 with deep learning and opencv
       september 18, 2017
     * [1366]basic motion detection and tracking with python and opencv
       may 25, 2015

   find me on [1367]twitter, [1368]facebook, and [1369]linkedin.

      2019 pyimagesearch. all rights reserved.

   [tr?id=1465896023527386&ev=pageview&noscript=1]

   [email]
   [email]

references

   1. http://feeds.feedburner.com/pyimagesearch
   2. https://www.pyimagesearch.com/comments/feed/
   3. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/feed/
   4. https://www.pyimagesearch.com/wp-json/oembed/1.0/embed?url=https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/
   5. https://www.pyimagesearch.com/wp-json/oembed/1.0/embed?url=https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/&format=xml
   6. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#navigation
   7. https://www.pyimagesearch.com/
   8. https://www.pyimagesearch.com/
   9. https://www.pyimagesearch.com/
  10. https://www.pyimagesearch.com/start-here-learn-computer-vision-opencv/
  11. https://www.pyimagesearch.com/practical-python-opencv/
  12. https://www.pyimagesearch.com/pyimagesearch-gurus/
  13. https://www.pyimagesearch.com/opencv-tutorials-resources-guides/
  14. https://www.pyimagesearch.com/free-opencv-computer-vision-deep-learning-crash-course/
  15. https://www.pyimagesearch.com/about/
  16. https://www.pyimagesearch.com/contact/
  17. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#top
  18. https://www.pyimagesearch.com/author/adrian/
  19. https://www.pyimagesearch.com/category/deep-learning-2/
  20. https://www.pyimagesearch.com/category/object-detection/
  21. https://www.pyimagesearch.com/category/opencv-3/
  22. https://www.pyimagesearch.com/category/tutorials/
  23. https://app.monstercampaigns.com/c/tortsem7qkvyuxc4cyfi/
  24. https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/
  25. https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/
  26. https://www.pyimagesearch.com/2016/01/04/unifying-picamera-and-cv2-videocapture-into-a-single-class-with-opencv/
  27. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/
  28. https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/
  29. https://www.pyimagesearch.com/2016/01/04/unifying-picamera-and-cv2-videocapture-into-a-single-class-with-opencv/
  30. https://www.pyimagesearch.com/2015/02/02/just-open-sourced-personal-imutils-package-series-opencv-convenience-functions/
  31. https://www.pyimagesearch.com/opencv-tutorials-resources-guides/
  32. https://github.com/opencv/opencv/releases/tag/3.3.0
  33. https://github.com/opencv/opencv_contrib/releases/tag/3.3.0
  34. https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/
  35. https://www.pyimagesearch.com/wp-content/uploads/2017/09/real_time_object_detection_animation.gif
  36. https://www.youtube.com/embed/hmfx1txjajc?feature=oembed
  37. https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/
  38. https://www.pyimagesearch.com/2016/01/04/unifying-picamera-and-cv2-videocapture-into-a-single-class-with-opencv/
  39. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
  40. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
  41. https://www.pyimagesearch.com/tag/id98/
  42. https://www.pyimagesearch.com/tag/coco/
  43. https://www.pyimagesearch.com/tag/convolutional-neural-network/
  44. https://www.pyimagesearch.com/tag/deep-learning/
  45. https://www.pyimagesearch.com/tag/machine-learning/
  46. https://www.pyimagesearch.com/tag/opencv-3/
  47. https://www.pyimagesearch.com/tag/pascal-voc/
  48. https://www.pyimagesearch.com/tag/real-time/
  49. https://www.pyimagesearch.com/tag/video/
  50. https://www.pyimagesearch.com/tag/video-stream/
  51. https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/
  52. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/
  53. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435087
  54. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435087
  55. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435103
  56. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435103
  57. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-473654
  58. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-473654
  59. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-473739
  60. https://www.pyimagesearch.com/2018/05/14/a-gentle-guide-to-deep-learning-object-detection/
  61. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
  62. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-473739
  63. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-509236
  64. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-509236
  65. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-509400
  66. https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/
  67. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-509400
  68. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435089
  69. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435089
  70. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435102
  71. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435102
  72. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453518
  73. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453518
  74. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453560
  75. https://www.pyimagesearch.com/2017/10/16/raspberry-pi-deep-learning-object-detection-with-opencv/
  76. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453560
  77. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-470446
  78. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-470587
  79. https://www.pyimagesearch.com/2018/05/14/a-gentle-guide-to-deep-learning-object-detection/
  80. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435090
  81. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435090
  82. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435091
  83. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435091
  84. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435092
  85. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435092
  86. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435100
  87. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435100
  88. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-443997
  89. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-443997
  90. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-444208
  91. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445668
  92. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445668
  93. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445723
  94. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-447989
  95. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-447989
  96. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448240
  97. https://www.pyimagesearch.com/practical-python-opencv/
  98. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453648
  99. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453648
 100. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453708
 101. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435101
 102. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435101
 103. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435095
 104. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435095
 105. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435147
 106. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435147
 107. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435096
 108. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435096
 109. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435099
 110. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435099
 111. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435141
 112. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435141
 113. http://www.zimbotech.co.zw/
 114. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435097
 115. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435097
 116. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435098
 117. https://www.pyimagesearch.com/2017/02/06/faster-video-file-fps-with-cv2-videocapture-and-opencv/
 118. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435098
 119. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435115
 120. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435115
 121. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435131
 122. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435131
 123. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435126
 124. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435126
 125. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435130
 126. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435130
 127. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435127
 128. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435127
 129. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435128
 130. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435128
 131. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435134
 132. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435134
 133. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435249
 134. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435249
 135. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435137
 136. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435137
 137. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435248
 138. https://www.pyimagesearch.com/2016/12/26/opencv-resolving-nonetype-errors/
 139. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435248
 140. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-508897
 141. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-508897
 142. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-509439
 143. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-509439
 144. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435274
 145. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435274
 146. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435300
 147. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435300
 148. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435915
 149. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435915
 150. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436152
 151. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436152
 152. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436244
 153. https://www.pyimagesearch.com/2016/12/26/opencv-resolving-nonetype-errors/
 154. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436244
 155. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436488
 156. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436491
 157. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436649
 158. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436841
 159. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436841
 160. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436942
 161. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436942
 162. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-447902
 163. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-447902
 164. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453780
 165. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453780
 166. http://hossein-zakizadeh.ir/
 167. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435138
 168. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435138
 169. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435246
 170. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435246
 171. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435163
 172. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435163
 173. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435244
 174. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435244
 175. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435165
 176. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435165
 177. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435242
 178. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435242
 179. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-485731
 180. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-485731
 181. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453009
 182. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453009
 183. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435168
 184. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435168
 185. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435241
 186. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435241
 187. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435182
 188. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435182
 189. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435239
 190. https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/
 191. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435239
 192. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435192
 193. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435192
 194. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435237
 195. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435237
 196. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435203
 197. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435203
 198. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435233
 199. https://www.pyimagesearch.com/2017/02/06/faster-video-file-fps-with-cv2-videocapture-and-opencv/
 200. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435233
 201. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446111
 202. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446111
 203. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446150
 204. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446150
 205. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435216
 206. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435216
 207. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435229
 208. https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/
 209. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 210. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435229
 211. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435225
 212. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435225
 213. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435227
 214. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435227
 215. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435251
 216. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435251
 217. http://feedback.us/
 218. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-441115
 219. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-441115
 220. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445669
 221. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435323
 222. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435323
 223. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435370
 224. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435370
 225. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435283
 226. https://imgur.com/a/d9tdp
 227. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435283
 228. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435341
 229. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435341
 230. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435343
 231. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435343
 232. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435368
 233. https://www.pyimagesearch.com/opencv-tutorials-resources-guides/
 234. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435368
 235. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-442609
 236. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-442609
 237. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-442705
 238. https://opencv.org/
 239. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435356
 240. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435356
 241. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435358
 242. http://answers.opencv.org/question/120699/can-opencv-310-be-set-to-capture-an-rtsp-stream-over-udp/
 243. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435358
 244. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435365
 245. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435365
 246. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435375
 247. https://github.com/opencv/opencv/pull/9292/files
 248. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435375
 249. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435381
 250. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435359
 251. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435359
 252. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435364
 253. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435364
 254. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435371
 255. https://www.pyimagesearch.com/2016/12/26/opencv-resolving-nonetype-errors/
 256. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435371
 257. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435515
 258. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435515
 259. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435549
 260. https://www.pyimagesearch.com/2015/06/01/home-surveillance-and-motion-detection-with-the-raspberry-pi-python-and-opencv/
 261. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435549
 262. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435554
 263. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435554
 264. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435557
 265. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435557
 266. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435559
 267. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435518
 268. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435518
 269. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435547
 270. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435547
 271. https://github.com/arrybn
 272. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435525
 273. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435525
 274. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435546
 275. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435546
 276. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435561
 277. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435561
 278. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435568
 279. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435568
 280. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435593
 281. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435593
 282. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435594
 283. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435594
 284. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435736
 285. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435736
 286. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435604
 287. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435604
 288. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435733
 289. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435733
 290. http://mrsydneym.com/
 291. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435749
 292. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435749
 293. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435935
 294. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435935
 295. http://mrsydneym.com/
 296. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435950
 297. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435950
 298. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435952
 299. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435952
 300. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436104
 301. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436251
 302. https://www.pyimagesearch.com/2016/02/22/writing-to-video-with-opencv/
 303. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435789
 304. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435789
 305. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435807
 306. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435807
 307. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435829
 308. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435829
 309. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435831
 310. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435831
 311. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435885
 312. http://paste.debian.net/988135/
 313. http://paste.debian.net/988136/
 314. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435910
 315. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435848
 316. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435848
 317. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435924
 318. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435924
 319. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435862
 320. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435862
 321. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435919
 322. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
 323. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-435919
 324. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436201
 325. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436201
 326. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436234
 327. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436234
 328. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436318
 329. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436318
 330. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436364
 331. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436364
 332. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436382
 333. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436506
 334. https://www.pyimagesearch.com/2017/02/06/faster-video-file-fps-with-cv2-videocapture-and-opencv/
 335. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436506
 336. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436508
 337. https://www.pyimagesearch.com/2016/02/22/writing-to-video-with-opencv/
 338. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436508
 339. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436642
 340. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
 341. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436642
 342. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436568
 343. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436568
 344. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436635
 345. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436635
 346. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436867
 347. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436867
 348. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436937
 349. https://www.pyimagesearch.com/2017/10/09/optimizing-opencv-on-the-raspberry-pi/
 350. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436937
 351. https://github.com/inayatkh
 352. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437679
 353. https://github.com/inayatkh/realtimeobjectdetection
 354. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437679
 355. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437741
 356. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437741
 357. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436698
 358. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-436698
 359. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437008
 360. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437008
 361. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437412
 362. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437412
 363. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437024
 364. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437024
 365. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437410
 366. https://www.pyimagesearch.com/2017/10/09/optimizing-opencv-on-the-raspberry-pi/
 367. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437410
 368. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-461390
 369. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-461390
 370. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-461542
 371. https://www.pyimagesearch.com/2017/10/09/optimizing-opencv-on-the-raspberry-pi/#comment-437270
 372. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-461542
 373. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437043
 374. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437043
 375. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437409
 376. https://www.pyimagesearch.com/pyimagesearch-gurus/
 377. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437409
 378. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437177
 379. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437177
 380. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437389
 381. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437389
 382. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437263
 383. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437263
 384. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437376
 385. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437376
 386. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437449
 387. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437449
 388. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437563
 389. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437563
 390. https://gettocode.com/
 391. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437759
 392. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437759
 393. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437760
 394. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 395. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437760
 396. https://gettocode.com/
 397. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437824
 398. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437824
 399. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437949
 400. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-437949
 401. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438052
 402. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 403. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438052
 404. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438014
 405. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438014
 406. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438048
 407. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438048
 408. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438173
 409. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438173
 410. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438283
 411. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 412. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438283
 413. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438270
 414. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438270
 415. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438272
 416. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438272
 417. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438408
 418. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438408
 419. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438414
 420. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438414
 421. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438412
 422. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438412
 423. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438413
 424. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 425. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438413
 426. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438538
 427. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438538
 428. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438553
 429. https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/
 430. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-438553
 431. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445665
 432. http://www.jetsonhacks.com/2017/04/05/build-opencv-nvidia-jetson-tx2/
 433. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445665
 434. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445667
 435. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445667
 436. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-439294
 437. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-439294
 438. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-439495
 439. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-439495
 440. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459637
 441. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459637
 442. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459745
 443. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459745
 444. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459848
 445. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-460693
 446. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-440167
 447. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-440167
 448. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-440478
 449. https://www.pyimagesearch.com/2015/01/26/multi-scale-template-matching-using-python-opencv/
 450. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-440478
 451. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-441111
 452. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-441111
 453. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-441162
 454. https://www.pyimagesearch.com/2015/06/01/home-surveillance-and-motion-detection-with-the-raspberry-pi-python-and-opencv/
 455. https://www.pyimagesearch.com/2014/11/10/histogram-oriented-gradients-object-detection/
 456. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-441162
 457. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-441246
 458. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-441246
 459. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-441279
 460. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-441279
 461. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-441345
 462. https://www.pyimagesearch.com/2015/01/26/multi-scale-template-matching-using-python-opencv/
 463. https://www.pyimagesearch.com/2017/07/10/using-tesseract-ocr-python/
 464. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-441345
 465. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-441523
 466. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-441523
 467. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-441595
 468. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-441595
 469. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-441540
 470. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-441540
 471. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-441590
 472. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-441590
 473. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-442155
 474. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-442155
 475. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-442157
 476. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-442157
 477. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-442179
 478. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-442179
 479. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-442443
 480. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
 481. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-442443
 482. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-442767
 483. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-442767
 484. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-442768
 485. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-442768
 486. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445598
 487. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445598
 488. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-442857
 489. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-442857
 490. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-442957
 491. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-442957
 492. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-443641
 493. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-443641
 494. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-443805
 495. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 496. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-443805
 497. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-444296
 498. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-444296
 499. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-444723
 500. https://github.com/chuanqi305/mobilenet-ssd
 501. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 502. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-444723
 503. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-444594
 504. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-444594
 505. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-444702
 506. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 507. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-444702
 508. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446058
 509. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446058
 510. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446155
 511. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446155
 512. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446214
 513. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446225
 514. https://www.pyimagesearch.com/pyimagesearch-gurus/
 515. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 516. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-444928
 517. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-444928
 518. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-444935
 519. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
 520. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-444935
 521. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-444959
 522. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-444959
 523. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446457
 524. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446457
 525. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-470842
 526. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-470842
 527. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-444963
 528. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-444963
 529. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445260
 530. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445260
 531. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445303
 532. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445303
 533. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452850
 534. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452850
 535. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445127
 536. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445127
 537. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445246
 538. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445246
 539. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445307
 540. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445307
 541. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445539
 542. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445539
 543. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445483
 544. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445483
 545. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445512
 546. https://www.pyimagesearch.com/opencv-tutorials-resources-guides/
 547. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445512
 548. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445902
 549. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445902
 550. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445940
 551. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445940
 552. http://cweihang.cn/
 553. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445590
 554. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445590
 555. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445728
 556. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/
 557. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445728
 558. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445613
 559. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445613
 560. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445727
 561. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 562. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445727
 563. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445843
 564. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445843
 565. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445950
 566. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445950
 567. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445659
 568. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445659
 569. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445725
 570. https://www.pyimagesearch.com/2016/12/26/opencv-resolving-nonetype-errors/
 571. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445725
 572. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445678
 573. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445678
 574. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445720
 575. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-445720
 576. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446130
 577. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446130
 578. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446149
 579. https://github.com/chuanqi305/mobilenet-ssd
 580. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 581. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446149
 582. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446362
 583. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446362
 584. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446539
 585. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446539
 586. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446303
 587. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446303
 588. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446330
 589. https://www.pyimagesearch.com/2016/02/22/writing-to-video-with-opencv/
 590. https://www.pyimagesearch.com/2016/02/29/saving-key-event-video-clips-with-opencv/
 591. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446330
 592. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446393
 593. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446393
 594. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446537
 595. https://www.pyimagesearch.com/2016/12/26/opencv-resolving-nonetype-errors/
 596. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446537
 597. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446498
 598. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446498
 599. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446525
 600. https://www.pyimagesearch.com/2017/12/04/how-to-create-a-deep-learning-dataset-using-google-images/
 601. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 602. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446525
 603. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446581
 604. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446581
 605. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446623
 606. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 607. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446623
 608. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446557
 609. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446557
 610. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446629
 611. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446629
 612. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446575
 613. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446575
 614. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446626
 615. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446626
 616. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446576
 617. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446576
 618. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446625
 619. https://www.pyimagesearch.com/2017/02/06/faster-video-file-fps-with-cv2-videocapture-and-opencv/
 620. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446625
 621. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446583
 622. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446583
 623. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446622
 624. https://github.com/chuanqi305/mobilenet-ssd
 625. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 626. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446622
 627. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446971
 628. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-446971
 629. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-447246
 630. https://www.pyimagesearch.com/2017/10/16/raspberry-pi-deep-learning-object-detection-with-opencv/
 631. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-447246
 632. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-447885
 633. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-447885
 634. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448251
 635. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448251
 636. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476351
 637. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476351
 638. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-447916
 639. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-447916
 640. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448246
 641. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448246
 642. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448303
 643. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448303
 644. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448375
 645. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448375
 646. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448339
 647. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448339
 648. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448371
 649. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
 650. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448371
 651. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448414
 652. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448414
 653. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448421
 654. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448421
 655. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-449552
 656. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-449552
 657. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450137
 658. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450137
 659. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448578
 660. https://imgur.com/7q6ijy7
 661. https://imgur.com/ooajaqh
 662. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448578
 663. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448830
 664. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-448830
 665. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-449044
 666. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-449044
 667. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-449065
 668. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-449065
 669. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-449252
 670. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 671. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-449252
 672. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-485642
 673. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-485642
 674. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-449103
 675. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-449103
 676. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-449246
 677. https://www.pyimagesearch.com/2014/11/10/histogram-oriented-gradients-object-detection/
 678. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 679. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-449246
 680. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-449178
 681. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-449178
 682. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-449476
 683. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-449476
 684. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-449507
 685. https://www.pyimagesearch.com/2017/02/06/faster-video-file-fps-with-cv2-videocapture-and-opencv/
 686. https://www.pyimagesearch.com/practical-python-opencv/
 687. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-449507
 688. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450200
 689. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450200
 690. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450579
 691. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450579
 692. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450235
 693. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450235
 694. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450571
 695. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450571
 696. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450247
 697. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450247
 698. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450252
 699. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450252
 700. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450569
 701. https://www.pyimagesearch.com/2017/11/06/deep-learning-opencvs-blobfromimage-works/
 702. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450569
 703. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450381
 704. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450381
 705. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450552
 706. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450552
 707. http://gmail/
 708. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450430
 709. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450430
 710. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450546
 711. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450546
 712. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450489
 713. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450489
 714. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450535
 715. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 716. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450535
 717. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450509
 718. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450509
 719. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450531
 720. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450531
 721. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450585
 722. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450585
 723. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450962
 724. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450962
 725. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450648
 726. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450648
 727. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450956
 728. https://stackoverflow.com/questions/33102272/pycharm-and-sys-argv-arguments
 729. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450956
 730. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450804
 731. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450804
 732. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450829
 733. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-450829
 734. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451102
 735. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451102
 736. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451397
 737. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451397
 738. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451189
 739. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451189
 740. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451389
 741. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451389
 742. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451315
 743. https://dms.licdn.com/playback/c5100aqgi8yxgy8jtrg/442b93fc59874c00aae4de3480dcc90b/feedshare-mp4_500/1479932728445-v0ch3x?e=1519722000&v=alpha&t=vbxmhcbwvc9tluesd-me7kec2plc-2ivcx-qlos8lz8
 744. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451315
 745. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451476
 746. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451476
 747. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451504
 748. https://www.pyimagesearch.com/2015/06/01/home-surveillance-and-motion-detection-with-the-raspberry-pi-python-and-opencv/
 749. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451504
 750. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451724
 751. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451724
 752. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451765
 753. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 754. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451765
 755. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451736
 756. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451736
 757. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451762
 758. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451762
 759. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451753
 760. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451753
 761. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451758
 762. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451758
 763. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452249
 764. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452249
 765. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452256
 766. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452256
 767. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451878
 768. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-451878
 769. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452297
 770. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452297
 771. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452039
 772. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452039
 773. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452319
 774. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452319
 775. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452554
 776. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
 777. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452554
 778. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452664
 779. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452664
 780. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453093
 781. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453093
 782. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452588
 783. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452588
 784. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453100
 785. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453100
 786. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452750
 787. https://stackoverflow.com/questions/44020713/an-exception-has-occurred-use-tb-to-see-the-full-traceback-python
 788. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452750
 789. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452810
 790. https://www.pyimagesearch.com/2016/12/26/opencv-resolving-nonetype-errors/
 791. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452810
 792. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453077
 793. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453077
 794. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452914
 795. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-452914
 796. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453057
 797. http://cvgl.stanford.edu/projects/uav_data/
 798. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453057
 799. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453121
 800. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453121
 801. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453122
 802. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453122
 803. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453625
 804. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453625
 805. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453123
 806. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453123
 807. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453624
 808. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453624
 809. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453430
 810. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453430
 811. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453820
 812. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453820
 813. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453935
 814. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-453935
 815. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-454178
 816. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-454178
 817. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-454354
 818. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
 819. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-454354
 820. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-454775
 821. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-454775
 822. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455106
 823. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455106
 824. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455351
 825. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455351
 826. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455982
 827. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455982
 828. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456687
 829. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456967
 830. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-454851
 831. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-454851
 832. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455095
 833. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455095
 834. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455274
 835. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455274
 836. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455288
 837. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455288
 838. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455664
 839. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455944
 840. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455666
 841. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-454863
 842. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-454863
 843. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455092
 844. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455092
 845. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455024
 846. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455024
 847. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455078
 848. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455078
 849. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455264
 850. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455264
 851. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455205
 852. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455205
 853. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455302
 854. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455302
 855. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459998
 856. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459998
 857. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-460684
 858. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-460684
 859. http://pencius-cff.blogspot.com/
 860. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455911
 861. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455911
 862. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455929
 863. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-455929
 864. http://pencius-cff.blogspot.com/
 865. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456071
 866. https://www.pyimagesearch.com/2015/03/30/accessing-the-raspberry-pi-camera-with-opencv-and-python/
 867. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456071
 868. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456172
 869. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456172
 870. http://pencius-cff.blogspot.com/
 871. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456252
 872. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456252
 873. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456471
 874. https://www.pyimagesearch.com/2017/10/16/raspberry-pi-deep-learning-object-detection-with-opencv/
 875. https://www.pyimagesearch.com/2018/02/19/real-time-object-detection-on-the-raspberry-pi-with-the-movidius-ncs/
 876. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456471
 877. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456314
 878. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456314
 879. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456467
 880. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456467
 881. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456375
 882. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456375
 883. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456458
 884. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456458
 885. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456868
 886. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456868
 887. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456954
 888. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-456954
 889. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457082
 890. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457082
 891. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457141
 892. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457141
 893. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457166
 894. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457385
 895. https://amzn.to/2j3phea
 896. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-458546
 897. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459229
 898. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459602
 899. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459752
 900. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457003
 901. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457003
 902. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457149
 903. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457149
 904. http://cms.co.in/
 905. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457287
 906. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457287
 907. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457373
 908. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457373
 909. http://cms.co.in/
 910. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457598
 911. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457598
 912. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457617
 913. https://github.com/opencv/opencv/issues
 914. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457617
 915. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457467
 916. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457467
 917. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457637
 918. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-457637
 919. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-458350
 920. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-458350
 921. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-458604
 922. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 923. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-458604
 924. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-458398
 925. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-458398
 926. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-458594
 927. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 928. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-458594
 929. http://yadullah.piware.tech/
 930. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-458866
 931. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-458866
 932. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459077
 933. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459077
 934. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459028
 935. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459028
 936. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459065
 937. https://www.pyimagesearch.com/2015/09/21/opencv-track-object-movement/
 938. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459065
 939. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459265
 940. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459265
 941. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459772
 942. https://www.pyimagesearch.com/2016/12/26/opencv-resolving-nonetype-errors/
 943. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459772
 944. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459282
 945. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459282
 946. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459363
 947. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459363
 948. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459299
 949. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459299
 950. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459360
 951. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459360
 952. http://none/
 953. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459820
 954. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-459820
 955. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-460698
 956. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 957. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-460698
 958. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-460155
 959. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-460155
 960. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-460675
 961. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-460675
 962. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-460584
 963. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-460584
 964. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-460646
 965. https://www.pyimagesearch.com/2018/04/09/how-to-quickly-build-a-deep-learning-image-dataset/
 966. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 967. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-460646
 968. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-460883
 969. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-460883
 970. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-461563
 971. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 972. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-461563
 973. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-461371
 974. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-461371
 975. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-461544
 976. https://www.pyimagesearch.com/2017/02/06/faster-video-file-fps-with-cv2-videocapture-and-opencv/
 977. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-461544
 978. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-461450
 979. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-461450
 980. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-461537
 981. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-461537
 982. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-461509
 983. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-461509
 984. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-461533
 985. https://www.pyimagesearch.com/2018/05/14/a-gentle-guide-to-deep-learning-object-detection/
 986. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 987. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-461533
 988. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-461944
 989. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-461944
 990. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-462246
 991. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-462246
 992. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-462543
 993. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-462543
 994. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-463362
 995. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-463362
 996. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-463446
 997. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-462125
 998. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-462125
 999. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-462233
1000. https://www.pyimagesearch.com/2018/05/14/a-gentle-guide-to-deep-learning-object-detection/
1001. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-462233
1002. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-462792
1003. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-462792
1004. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-463341
1005. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-463341
1006. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-462627
1007. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-462627
1008. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-463357
1009. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
1010. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-463357
1011. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-464070
1012. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-464070
1013. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-464156
1014. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-464156
1015. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-468019
1016. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-468019
1017. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-468210
1018. https://www.pyimagesearch.com/2018/04/16/keras-and-convolutional-neural-networks-id98s/
1019. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
1020. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-468210
1021. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-468166
1022. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-468166
1023. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-468187
1024. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
1025. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-468187
1026. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-468332
1027. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-468332
1028. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-468334
1029. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-468334
1030. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-468546
1031. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
1032. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-468546
1033. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-468686
1034. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-468686
1035. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-468719
1036. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-468719
1037. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-469086
1038. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-469086
1039. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-469150
1040. https://www.pyimagesearch.com/2018/05/14/a-gentle-guide-to-deep-learning-object-detection/
1041. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-469150
1042. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-469490
1043. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-469490
1044. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-469870
1045. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-469870
1046. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-469419
1047. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-469419
1048. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-469875
1049. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-469875
1050. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-470697
1051. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-470697
1052. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-470940
1053. https://www.pyimagesearch.com/2017/02/06/faster-video-file-fps-with-cv2-videocapture-and-opencv/
1054. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-470940
1055. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-470857
1056. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-470857
1057. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-470912
1058. https://www.pyimagesearch.com/2018/05/14/a-gentle-guide-to-deep-learning-object-detection/
1059. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-470912
1060. http://www.vpath.uy/
1061. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-471317
1062. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-471317
1063. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-471538
1064. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-471538
1065. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-471346
1066. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-471346
1067. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-472068
1068. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-472068
1069. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-472619
1070. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-472619
1071. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-472282
1072. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-472282
1073. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-472606
1074. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-472606
1075. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-472324
1076. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-472324
1077. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-472604
1078. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-472604
1079. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-472793
1080. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-472793
1081. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-472805
1082. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
1083. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-472805
1084. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-472934
1085. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-472934
1086. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-473382
1087. https://www.pyimagesearch.com/2018/05/14/a-gentle-guide-to-deep-learning-object-detection/
1088. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
1089. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-473382
1090. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-473235
1091. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-473235
1092. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-473357
1093. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-473357
1094. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-473298
1095. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-473298
1096. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-473652
1097. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-473652
1098. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-473740
1099. https://www.pyimagesearch.com/2018/05/14/a-gentle-guide-to-deep-learning-object-detection/
1100. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
1101. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-473740
1102. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-474134
1103. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-474134
1104. http://no/
1105. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-474624
1106. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-474624
1107. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-474639
1108. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-474639
1109. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-475060
1110. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-475060
1111. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-475146
1112. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-475146
1113. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476129
1114. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476129
1115. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476740
1116. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476740
1117. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476385
1118. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476385
1119. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476711
1120. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
1121. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476711
1122. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476411
1123. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476411
1124. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476706
1125. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476706
1126. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-477406
1127. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-477406
1128. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-477459
1129. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-477459
1130. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-486162
1131. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-486162
1132. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476474
1133. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476474
1134. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476698
1135. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/tomy@gmail.com
1136. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476698
1137. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476509
1138. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476509
1139. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476691
1140. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476691
1141. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476623
1142. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-476623
1143. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-478977
1144. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-478977
1145. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-479280
1146. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-479280
1147. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-480543
1148. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-480543
1149. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-481228
1150. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-481228
1151. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-483810
1152. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-483810
1153. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-484489
1154. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-484489
1155. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-484379
1156. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-484379
1157. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-484430
1158. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
1159. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-484430
1160. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-486160
1161. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-486160
1162. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-485646
1163. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-485646
1164. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-485751
1165. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-485751
1166. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-485853
1167. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-485853
1168. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-488518
1169. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-488518
1170. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-489021
1171. https://www.pyimagesearch.com/2018/05/14/a-gentle-guide-to-deep-learning-object-detection/
1172. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-489021
1173. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-489893
1174. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-489893
1175. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-489983
1176. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-489983
1177. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-491417
1178. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-491417
1179. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-491716
1180. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-491716
1181. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-488692
1182. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-488692
1183. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-489005
1184. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
1185. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-489005
1186. http://---/
1187. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-489399
1188. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-489399
1189. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-490036
1190. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-490036
1191. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-490344
1192. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-490344
1193. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-490679
1194. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-490679
1195. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-490594
1196. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-490594
1197. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-490657
1198. https://www.pyimagesearch.com/2018/05/14/a-gentle-guide-to-deep-learning-object-detection/
1199. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-490657
1200. http://spicydroid.weebly.com/
1201. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-490861
1202. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-490861
1203. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-491001
1204. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-491001
1205. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-490878
1206. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-490878
1207. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-490999
1208. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-490999
1209. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-490943
1210. https://www.youtube.com/watch?v=l5apjtnycpc
1211. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-490943
1212. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-492967
1213. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-492967
1214. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-492968
1215. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
1216. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-492968
1217. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-493243
1218. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-493243
1219. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-493861
1220. https://www.pyimagesearch.com/2018/08/13/opencv-people-counter/
1221. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-493861
1222. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-494589
1223. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-494589
1224. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-494826
1225. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-494826
1226. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-494771
1227. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-494771
1228. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-494800
1229. https://www.pyimagesearch.com/2018/02/26/face-detection-with-opencv-and-deep-learning/
1230. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-494800
1231. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-495083
1232. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-495083
1233. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-495107
1234. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-495107
1235. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-495152
1236. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-495152
1237. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-495953
1238. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
1239. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-495953
1240. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-496616
1241. https://www.pyimagesearch.com/2018/06/18/face-recognition-with-opencv-python-and-deep-learning/
1242. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-496616
1243. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-496624
1244. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-496624
1245. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-497132
1246. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-497132
1247. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-497442
1248. https://www.pyimagesearch.com/2018/05/14/a-gentle-guide-to-deep-learning-object-detection/
1249. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-497442
1250. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-497228
1251. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-497228
1252. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-497435
1253. https://www.pyimagesearch.com/2018/05/14/a-gentle-guide-to-deep-learning-object-detection/
1254. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-497435
1255. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-497373
1256. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-497373
1257. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-497407
1258. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
1259. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-497407
1260. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-497608
1261. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-497608
1262. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-497861
1263. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-497861
1264. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-498497
1265. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-498497
1266. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-498951
1267. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
1268. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-498951
1269. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-498499
1270. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-498499
1271. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-498950
1272. https://www.pyimagesearch.com/2018/05/14/a-gentle-guide-to-deep-learning-object-detection/
1273. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
1274. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-498950
1275. http://javier/
1276. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-498963
1277. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-498963
1278. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-499760
1279. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
1280. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-499760
1281. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-502469
1282. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-502469
1283. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-499004
1284. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-499004
1285. http://na/
1286. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-499307
1287. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-499307
1288. http://na/
1289. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-499308
1290. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-499308
1291. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-499740
1292. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-499740
1293. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-502064
1294. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-502064
1295. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-502513
1296. https://www.pyimagesearch.com/opencv-tutorials-resources-guides/
1297. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-502513
1298. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-503001
1299. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-503001
1300. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-503750
1301. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-503750
1302. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-503136
1303. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-503136
1304. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-503743
1305. https://www.pyimagesearch.com/practical-python-opencv/
1306. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-503743
1307. http://i-ssp.id/
1308. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-503928
1309. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-503928
1310. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-504018
1311. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-504018
1312. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-504924
1313. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-504924
1314. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-504959
1315. https://www.pyimagesearch.com/2018/11/12/yolo-object-detection-with-opencv/
1316. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-504959
1317. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-508856
1318. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-508856
1319. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-509445
1320. https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/
1321. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-509445
1322. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-509199
1323. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-509199
1324. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-509207
1325. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-509207
1326. http://naver.com/
1327. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-509713
1328. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-509713
1329. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-510630
1330. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
1331. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-510630
1332. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-510523
1333. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-510523
1334. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-510568
1335. https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/
1336. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-510568
1337. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-511014
1338. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-511014
1339. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-511103
1340. https://www.pyimagesearch.com/2018/05/14/a-gentle-guide-to-deep-learning-object-detection/
1341. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-511103
1342. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-511036
1343. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-511036
1344. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-511101
1345. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#comment-511101
1346. https://www.pyimagesearch.com/2017/10/16/raspberry-pi-deep-learning-object-detection-with-opencv/
1347. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#respond
1348. https://app.monstercampaigns.com/c/mdoijtrmex7bpm0rp2hn/
1349. https://app.monstercampaigns.com/c/mdoijtrmex7bpm0rp2hn/
1350. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
1351. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
1352. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-face-detection
1353. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-face-detection
1354. http://www.idmypill.com/
1355. http://www.chicengine.com/
1356. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-single-weekend
1357. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-single-weekend
1358. http://feeds.feedburner.com/pyimagesearch
1359. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/#tab-pop
1360. https://www.pyimagesearch.com/2017/09/04/raspbian-stretch-install-opencv-3-python-on-your-raspberry-pi/
1361. https://www.pyimagesearch.com/2016/04/18/install-guide-raspberry-pi-3-raspbian-jessie-opencv-3/
1362. https://www.pyimagesearch.com/2015/06/01/home-surveillance-and-motion-detection-with-the-raspberry-pi-python-and-opencv/
1363. https://www.pyimagesearch.com/2015/02/23/install-opencv-and-python-on-your-raspberry-pi-2-and-b/
1364. https://www.pyimagesearch.com/2016/10/24/ubuntu-16-04-how-to-install-opencv/
1365. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/
1366. https://www.pyimagesearch.com/2015/05/25/basic-motion-detection-and-tracking-with-python-and-opencv/
1367. https://twitter.com/pyimagesearch
1368. https://www.facebook.com/pyimagesearch
1369. http://www.linkedin.com/pub/adrian-rosebrock/2a/873/59b
