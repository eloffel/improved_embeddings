   #[1]pyimagesearch    feed [2]pyimagesearch    comments feed
   [3]pyimagesearch    deep learning with opencv comments feed [4]alternate
   [5]alternate

[6]navigation

   [7]pyimagesearch [8]pyimagesearch be awesome at opencv, python, deep
   learning, and id161

   [9]home

main menu

     * [10]start here
     * [11]practical python and opencv
     * [12]pyimagesearch gurus
     * [13]opencv 3 & 4 tutorials
     * [14]free crash course
     * [15]about
     * [16]contact

   [17]return to content

deep learning with opencv

   by [18]adrian rosebrock on august 21, 2017 in [19]deep learning,
   [20]opencv 3, [21]tutorials

   two weeks ago opencv 3.3 was officially released, bringing with it a
   highly improved deep learning ( dnn ) module. this module now supports
   a number of deep learning frameworks, including caffe, tensorflow, and
   torch/pytorch.

   furthermore, this api for using pre-trained deep learning models is
   compatible with both the c++ api and the python bindings, making it
   dead simple to:
    1. load a model from disk.
    2. pre-process an input image.
    3. pass the image through the network and obtain the output
       classifications.

   while we cannot train deep learning models using opencv (nor should
   we), this does allow us to take our models trained using dedicated deep
   learning libraries/tools and then efficiently use them directly inside
   our opencv scripts.

   in the remainder of this blog post i   ll demonstrate the fundamentals of
   how to take a pre-trained deep learning network on the id163 dataset
   and apply it to input images.

   to learn more about deep learning with opencv, just keep reading.

   looking for the source code to this post?
   [22]jump right to the downloads section.

deep learning with opencv

   in the first part of this post, we   ll discuss the opencv 3.3 release
   and the overhauled dnn  module.

   we   ll then write a python script that will use opencv and googlelenet
   (pre-trained on id163) to classify images.

   finally, we   ll explore the results of our classifications.

deep learning inside opencv 3.3

   the [23]dnn module of opencv has been part of the opencv_contrib
   repository since version v3.1. now in opencv 3.3 it is included in the
   main repository.

   why should you care?

   deep learning is a fast growing domain of machine learning and if
   you   re working in the field of id161/image processing already
   (or getting up to speed), it   s a crucial area to explore.

   with opencv 3.3, we can utilize pre-trained networks with popular deep
   learning frameworks. the fact that they are pre-trained implies that we
   don   t need to spend many hours training the network     rather we can
   complete a forward pass and utilize the output to make a decision
   within our application.

   opencv does not (and does not intend to be) to be a tool for training
   networks     there are already great frameworks available for that
   purpose. since a network (such as a id98) can be used as a classifier,
   it makes logical sense that opencv has a deep learning module that we
   can leverage easily within the opencv ecosystem.

   popular network architectures compatible with opencv 3.3 include:
     * googlelenet (used in this blog post)
     * alexnet
     * squeezenet
     * vggnet (and associated flavors)
     * resnet

   the release notes for this module are available on the opencv
   repository [24]page.

   aleksandr rybnikov, the main contributor for this module, has ambitious
   plans for this module so be sure to stay on the lookout and read his
   [25]release notes (in russian, so make sure you have google translation
   enabled in your browser if russian is not your native language).

   it   s my opinion that the dnn  module will have a big impact on the
   opencv community, so let   s get the word out.

configure your machine with opencv 3.3

   installing opencv 3.3 is on par with installing other versions. the
   same install tutorials can be utilized     just make sure you download
   and use the correct release.

   simply follow these instructions for [26]macos or [27]ubuntu while
   making sure to use the [28]opencv and [29]opencv_contrib releases for
   opencv 3.3. if you opt for the [30]macos + homebrew install
   instructions, be sure to use the --head  switch (among the others
   mentioned) to get the bleeding edge version of opencv.

   if you   re using virtual environments (highly recommended), you can
   easily install opencv 3.3 alongside a previous version. just create a
   brand new virtual environment (and name it appropriately) as you follow
   the tutorial corresponding to your system.

opencv deep learning functions and frameworks

   opencv 3.3 supports the [31]caffe, [32]tensorflow, and
   [33]torch/[34]pytorch frameworks.

   [35]keras is currently not supported (since keras is actually a wrapper
   around backends such as tensorflow and [36]theano), although i imagine
   it   s only a matter of time until keras is directly supported given the
   popularity of the deep learning library.

   using opencv 3.3 we can load images from disk using the following
   functions inside dnn :
     * cv2.dnn.blobfromimage
     * cv2.dnn.blobfromimages

   we can directly import models from various frameworks via the    create   
   methods:
     * cv2.dnn.createcaffeimporter
     * cv2.dnn.createtensorflowimporter
     * cv2.dnn.createtorchimporter

   although i think it   s easier to simply use the    read    methods and load
   a serialized model from disk directly:
     * cv2.dnn.readnetfromcaffe
     * cv2.dnn.readnetfromtensorflow
     * cv2.dnn.readnetfromtorch
     * cv2.dnn.readhtorchblob

   once we have loaded a model from disk, the .forward method is used to
   forward-propagate our image and obtain the actual classification.

   to learn how all these opencv deep learning pieces fit together, let   s
   move on to the next section.

classifying images using deep learning and opencv

   in this section, we   ll be creating a python script that can be used to
   classify input images using opencv and googlenet (pre-trained on
   id163) using the caffe framework.

   the googlenet architecture (now known as    inception    after the novel
   micro-architecture) was introduced by szegedy et al. in their 2014
   paper, [37]going deeper with convolutions.

   other architectures are also supported with opencv 3.3 including
   alexnet, resnet, and squeezenet     we   ll be examining these
   architectures for deep learning with opencv in a future blog post.

   in the meantime, let   s learn how we can load a pre-trained caffe model
   and use it to classify an image using opencv.

   to begin, open up a new file, name it deep_learning_with_opencv.py ,
   and insert the following code:
   deep learning with opencv
   python

   # import the necessary packages_____________________________
   import numpy as np__________________________________________
   import argparse_____________________________________________
   import time_________________________________________________
   import cv2__________________________________________________
   1
   2
   3
   4
   5
   # import the necessary packages
   import numpy as np
   import argparse
   import time
   import cv2

   on lines 2-5 we import our necessary packages.

   then we parse command line arguments:
   deep learning with opencv
   python

   # construct the argument parse and parse the arguments______
   ap = argparse.argumentparser()______________________________
   ap.add_argument("-i", "--image", required=true,_____________
   	help="path to input image")________________________________
   ap.add_argument("-p", "--prototxt", required=true,__________
   	help="path to caffe 'deploy' prototxt file")_______________
   ap.add_argument("-m", "--model", required=true,_____________
   	help="path to caffe pre-trained model")____________________
   ap.add_argument("-l", "--labels", required=true,____________
   	help="path to id163 labels (i.e., syn-sets)")___________
   args = vars(ap.parse_args())________________________________
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   # construct the argument parse and parse the arguments
   ap = argparse.argumentparser()
   ap.add_argument("-i", "--image", required=true,
   help="path to input image")
   ap.add_argument("-p", "--prototxt", required=true,
   help="path to caffe 'deploy' prototxt file")
   ap.add_argument("-m", "--model", required=true,
   help="path to caffe pre-trained model")
   ap.add_argument("-l", "--labels", required=true,
   help="path to id163 labels (i.e., syn-sets)")
   args = vars(ap.parse_args())

   on line 8 we create an argument parser followed by establishing
   four required command line arguments (lines 9-16):
     * --image : the path to the input image.
     * --prototxt : the path to the caffe    deploy    prototxt file.
     * --model : the pre-trained caffe model (i.e,. the network weights
       themselves).
     * --labels : the path to id163 labels (i.e.,    syn-sets   ).

   now that we   ve established our arguments, we parse them and store them
   in a variable, args , for easy access later.

   let   s load the input image and class labels:
   deep learning with opencv
   python

   # load the input image from disk____________________________
   image = cv2.imread(args["image"])___________________________
   ____________________________________________________________
   # load the class labels from disk___________________________
   rows = open(args["labels"]).read().strip().split("\n")______
   classes = [r[r.find(" ") + 1:].split(",")[0] for r in rows]_
   19
   20
   21
   22
   23
   24
   # load the input image from disk
   image = cv2.imread(args["image"])

   # load the class labels from disk
   rows = open(args["labels"]).read().strip().split("\n")
   classes = [r[r.find(" ") + 1:].split(",")[0] for r in rows]

   on line 20, we load the image  from disk via cv2.imread .

   let   s take a closer look at the class label data which we load on lines
   23 and 24:
   deep learning with opencv

   n01440764 tench, tinca tinca________________________________
   n01443537 goldfish, carassius auratus_______________________
   n01484850 great white shark, white shark, man-eater, man-eat
   n01491361 tiger shark, galeocerdo cuvieri___________________
   n01494475 hammerhead, hammerhead shark______________________
   n01496331 electric ray, crampfish, numbfish, torpedo________
   n01498041 stingray__________________________________________
   ..._________________________________________________________
   1
   2
   3
   4
   5
   6
   7
   8
   n01440764 tench, tinca tinca
   n01443537 goldfish, carassius auratus
   n01484850 great white shark, white shark, man-eater, man-eating shark,
   carcharodon carcharias
   n01491361 tiger shark, galeocerdo cuvieri
   n01494475 hammerhead, hammerhead shark
   n01496331 electric ray, crampfish, numbfish, torpedo
   n01498041 stingray
   ...

   as you can see, we have a unique identifier followed by a space, some
   class labels, and a new-line. parsing this file line-by-line is
   straightforward and efficient using python.

   first, we load the class label rows  from disk into a list. to do this
   we strip whitespace from the beginning and end of each line while using
   the new-line (    \n    ) as the row delimiter (line 23). the result is a
   list of ids and labels:
   deep learning with opencv

   ['n01440764 tench, tinca tinca', 'n01443537 goldfish, carass
   'n01484850 great white shark, white shark, man-eater, man-ea
   'n01491361 tiger shark, galeocerdo cuvieri',________________
   'n01494475 hammerhead, hammerhead shark',___________________
   'n01496331 electric ray, crampfish, numbfish, torpedo',_____
   'n01498041 stingray', ...]__________________________________
   1
   2
   3
   4
   5
   6
   ['n01440764 tench, tinca tinca', 'n01443537 goldfish, carassius
   auratus',
   'n01484850 great white shark, white shark, man-eater, man-eating shark,
   carcharodon carcharias',
   'n01491361 tiger shark, galeocerdo cuvieri',
   'n01494475 hammerhead, hammerhead shark',
   'n01496331 electric ray, crampfish, numbfish, torpedo',
   'n01498041 stingray', ...]

   second, we use list comprehension to extract the relevant class labels
   from rows  by looking for the space (       ) after the id, followed by
   delimiting class labels with a comma (    ,    ). the result is simply a
   list of class labels:
   deep learning with opencv

   ['tench', 'goldfish', 'great white shark', 'tiger shark',___
   'hammerhead', 'electric ray', 'stingray', ...]______________
   ____________________________________________________________
   ____________________________________________________________
   1
   2
   ['tench', 'goldfish', 'great white shark', 'tiger shark',
   'hammerhead', 'electric ray', 'stingray', ...]

   now that we   ve taken care of the labels, let   s dig into the dnn  module
   of opencv 3.3:
   deep learning with opencv
   python

   # our id98 requires fixed spatial dimensions for our input im
   # so we need to ensure it is resized to 224x224 pixels while
   # performing mean subtraction (104, 117, 123) to normalize t
   # after executing this command our "blob" now has the shape:
   # (1, 3, 224, 224)__________________________________________
   blob = cv2.dnn.blobfromimage(image, 1, (224, 224), (104, 117
   26
   27
   28
   29
   30
   31
   # our id98 requires fixed spatial dimensions for our input image(s)
   # so we need to ensure it is resized to 224x224 pixels while
   # performing mean subtraction (104, 117, 123) to normalize the input;
   # after executing this command our "blob" now has the shape:
   # (1, 3, 224, 224)
   blob = cv2.dnn.blobfromimage(image, 1, (224, 224), (104, 117, 123))

   taking note of the comment in the block above, we use
   cv2.dnn.blobfromimage  to perform mean subtraction to normalize the
   input image which results in a known blob shape (line 31).

   we then load our model from disk:
   deep learning with opencv
   python

   # load our serialized model from disk_______________________
   print("[info] loading model...")____________________________
   net = cv2.dnn.readnetfromcaffe(args["prototxt"], args["model
   ____________________________________________________________
   33
   34
   35
   # load our serialized model from disk
   print("[info] loading model...")
   net = cv2.dnn.readnetfromcaffe(args["prototxt"], args["model"])

   since we   ve opted to use caffe, we utilize cv2.dnn.readnetfromcaffe  to
   load our caffe model definition prototxt  and pre-trained  model  from
   disk (line 35).

   if you are familiar with caffe, you   ll recognize the prototxt  file as
   a plain text configuration which follows a json-like structure     i
   recommend that you open bvlc_googlenet.prototxt  from the    downloads   
   section in a text editor to inspect it.

   note: if you are unfamiliar with configuring caffe id98s, then this is a
   great time to consider the [38]pyimagesearch gurus course     inside the
   course you   ll get an in depth look at using deep nets for computer
   vision and image classification.

   now let   s complete a forward pass through the network with blob  as the
   input:
   deep learning with opencv
   python

   # set the blob as input to the network and perform a forward
   # obtain our output classification__________________________
   net.setinput(blob)__________________________________________
   start = time.time()_________________________________________
   preds = net.forward()_______________________________________
   end = time.time()___________________________________________
   print("[info] classification took {:.5} seconds".format(end 
   37
   38
   39
   40
   41
   42
   43
   # set the blob as input to the network and perform a forward-pass to
   # obtain our output classification
   net.setinput(blob)
   start = time.time()
   preds = net.forward()
   end = time.time()
   print("[info] classification took {:.5} seconds".format(end - start))

   it is important to note at this step that we aren   t training a id98    
   rather, we are making use of a pre-trained network. therefore we are
   just passing the blob through the network (i.e., forward propagation)
   to obtain the result (no back-propagation).

   first, we specify blob  as our input (line 39). second, we make a
   start  timestamp (line 40), followed by passing our input image through
   the network and storing the predictions. finally, we set an end
   timestamp (line 42) so we can calculate the difference and print the
   elapsed time (line 43).

   let   s finish up by determining the top five predictions for our input
   image:
   deep learning with opencv
   python

   # sort the indexes of the probabilities in descending order 
   # probabilitiy first) and grab the top-5 predictions________
   idxs = np.argsort(preds[0])[::-1][:5]_______________________
   ____________________________________________________________
   45
   46
   47
   # sort the indexes of the probabilities in descending order (higher
   # probabilitiy first) and grab the top-5 predictions
   idxs = np.argsort(preds[0])[::-1][:5]

   using numpy, we can easily sort and extract the top five
   predictions on line 47.

   next, we will display the top five class predictions:
   deep learning with opencv
   python

   # loop over the top-5 predictions and display them__________
   for (i, idx) in enumerate(idxs):____________________________
   	# draw the top prediction on the input image_______________
   	if i == 0:_________________________________________________
   		text = "label: {}, {:.2f}%".format(classes[idx],__________
   			preds[0][idx] * 100)_____________________________________
   		cv2.puttext(image, text, (5, 25),  cv2.font_hershey_simple
   			0.7, (0, 0, 255), 2)_____________________________________
   ____________________________________________________________
   	# display the predicted label + associated id203 to t
   	# console	_________________________________________________
   	print("[info] {}. label: {}, id203: {:.5}".format(i +
   		classes[idx], preds[0][idx]))_____________________________
   ____________________________________________________________
   # display the output image__________________________________
   cv2.imshow("image", image)__________________________________
   cv2.waitkey(0)______________________________________________
   49
   50
   51
   52
   53
   54
   55
   56
   57
   58
   59
   60
   61
   62
   63
   64
   65
   # loop over the top-5 predictions and display them
   for (i, idx) in enumerate(idxs):
   # draw the top prediction on the input image
   if i == 0:
   text = "label: {}, {:.2f}%".format(classes[idx],
   preds[0][idx] * 100)
   cv2.puttext(image, text, (5, 25),  cv2.font_hershey_simplex,
   0.7, (0, 0, 255), 2)

   # display the predicted label + associated id203 to the
   # console
   print("[info] {}. label: {}, id203: {:.5}".format(i + 1,
   classes[idx], preds[0][idx]))

   # display the output image
   cv2.imshow("image", image)
   cv2.waitkey(0)

   the idea for this loop is to (1) draw the top prediction label on the
   image itself and (2) print the associated class label probabilities to
   the terminal.

   lastly, we display the image to the screen (line 64) and wait for the
   user to press a key before exiting (line 65).

deep learning and opencv classification results

   now that we have implemented our python script to utilize deep learning
   with opencv, let   s go ahead and apply it to a few example images.

   make sure you use the    downloads    section of this blog post to download
   the source code + pre-trained googlenet architecture + example images.

   from there, open up a terminal and execute the following command:
   deep learning with opencv
   shell

   $ python deep_learning_with_opencv.py --image images/jemma.p
   	--prototxt bvlc_googlenet.prototxt \_______________________
   	--model bvlc_googlenet.caffemodel --labels synset_words.txt
   [info] loading model..._____________________________________
   [info] classification took 0.075035 seconds_________________
   [info] 1. label: beagle, id203: 0.81137_______________
   [info] 2. label: labrador retriever, id203: 0.031416__
   [info] 3. label: bluetick, id203: 0.023929____________
   [info] 4. label: entlebucher, id203: 0.017507_________
   [info] 5. label: greater swiss mountain dog, id203: 0.
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   $ python deep_learning_with_opencv.py --image images/jemma.png
   --prototxt bvlc_googlenet.prototxt \
   --model bvlc_googlenet.caffemodel --labels synset_words.txt
   [info] loading model...
   [info] classification took 0.075035 seconds
   [info] 1. label: beagle, id203: 0.81137
   [info] 2. label: labrador retriever, id203: 0.031416
   [info] 3. label: bluetick, id203: 0.023929
   [info] 4. label: entlebucher, id203: 0.017507
   [info] 5. label: greater swiss mountain dog, id203: 0.01444

   figure 1: using opencv and deep learning to predict the class label for
   an input image.

   in the above example, we have jemma, the family beagle. using opencv
   and googlenet we have correctly classified this image as    beagle   .

   furthermore, inspecting the top-5 results we can see that the other top
   predictions are also relevant, all of them of which are dogs that have
   similar physical appearances as beagles.

   taking a look at the timing we also see that the forward pass took < 1
   second, even though we are using our cpu.

   keep in mind that the forward pass is substantially faster than the
   backward pass as we do not need to compute the gradient and
   backpropagate through the network.

   let   s classify another image using opencv and deep learning:
   deep learning with opencv
   shell

   $ python deep_learning_with_opencv.py --image images/traffic
   	--prototxt bvlc_googlenet.prototxt \_______________________
   	--model bvlc_googlenet.caffemodel --labels synset_words.txt
   [info] loading model..._____________________________________
   [info] classification took 0.080521 seconds_________________
   [info] 1. label: traffic light, id203: 1.0____________
   [info] 2. label: pole, id203: 4.9961e-07______________
   [info] 3. label: spotlight, id203: 3.4974e-08_________
   [info] 4. label: street sign, id203: 3.3623e-08_______
   [info] 5. label: loudspeaker, id203: 2.0235e-08_______
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   $ python deep_learning_with_opencv.py --image images/traffic_light.png
   --prototxt bvlc_googlenet.prototxt \
   --model bvlc_googlenet.caffemodel --labels synset_words.txt
   [info] loading model...
   [info] classification took 0.080521 seconds
   [info] 1. label: traffic light, id203: 1.0
   [info] 2. label: pole, id203: 4.9961e-07
   [info] 3. label: spotlight, id203: 3.4974e-08
   [info] 4. label: street sign, id203: 3.3623e-08
   [info] 5. label: loudspeaker, id203: 2.0235e-08

   figure 2: opencv and deep learning is used to correctly label this
   image as    traffic light   .

   opencv and googlenet correctly label this image as    traffic light    with
   100% certainty.

   in this example we have a    bald eagle   :
   deep learning with opencv
   shell

   $ python deep_learning_with_opencv.py --image images/eagle.p
   	--prototxt bvlc_googlenet.prototxt \_______________________
   	--model bvlc_googlenet.caffemodel --labels synset_words.txt
   [info] loading model..._____________________________________
   [info] classification took 0.087207 seconds_________________
   [info] 1. label: bald eagle, id203: 0.96768___________
   [info] 2. label: kite, id203: 0.031964________________
   [info] 3. label: vulture, id203: 0.00023595___________
   [info] 4. label: albatross, id203: 6.3653e-05_________
   [info] 5. label: black grouse, id203: 1.6147e-05______
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   $ python deep_learning_with_opencv.py --image images/eagle.png
   --prototxt bvlc_googlenet.prototxt \
   --model bvlc_googlenet.caffemodel --labels synset_words.txt
   [info] loading model...
   [info] classification took 0.087207 seconds
   [info] 1. label: bald eagle, id203: 0.96768
   [info] 2. label: kite, id203: 0.031964
   [info] 3. label: vulture, id203: 0.00023595
   [info] 4. label: albatross, id203: 6.3653e-05
   [info] 5. label: black grouse, id203: 1.6147e-05

   figure 3: the    deep neural network    (dnn) module inside opencv 3.3 can
   be used to classify images using pre-trained models.

   we are once again able to correctly classify the input image.

   our final example is a    vending machine   :
   deep learning with opencv
   shell

   $ python deep_learning_with_opencv.py --image images/vending
   	--prototxt bvlc_googlenet.prototxt \_______________________
   	--model bvlc_googlenet.caffemodel --labels synset_words.txt
   [info] loading model..._____________________________________
   [info] classification took 0.099602 seconds_________________
   [info] 1. label: vending machine, id203: 0.99269______
   [info] 2. label: cash machine, id203: 0.0023691_______
   [info] 3. label: pay-phone, id203: 0.00097005_________
   [info] 4. label: ashcan, id203: 0.00092097____________
   [info] 5. label: mailbox, id203: 0.00061188___________
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   $ python deep_learning_with_opencv.py --image
   images/vending_machine.png
   --prototxt bvlc_googlenet.prototxt \
   --model bvlc_googlenet.caffemodel --labels synset_words.txt
   [info] loading model...
   [info] classification took 0.099602 seconds
   [info] 1. label: vending machine, id203: 0.99269
   [info] 2. label: cash machine, id203: 0.0023691
   [info] 3. label: pay-phone, id203: 0.00097005
   [info] 4. label: ashcan, id203: 0.00092097
   [info] 5. label: mailbox, id203: 0.00061188

   figure 4: since our googlenet model is pre-trained on id163, we can
   classify each of the 1,000 labels inside the dataset using opencv +
   deep learning.

   opencv + deep learning once again correctly classifes the image.

summary

   in today   s blog post we learned how to use opencv for deep learning.

   with the release of opencv 3.3 the deep neural network ( dnn ) library
   has been substantially overhauled, allowing us to load pre-trained
   networks via the caffe, tensorflow, and torch/pytorch frameworks and
   then use them to classify input images.

   i imagine keras support will also be coming soon, given how popular the
   framework is. this will likely take be a non-trivial implementation as
   keras itself can support multiple numeric computation backends.

   over the next few weeks we   ll:
    1. take a deeper dive into the dnn  module and how it can be used
       inside our python + opencv scripts.
    2. learn how to modify caffe .prototxt  files to be compatible with
       opencv.
    3. discover how we can apply deep learning using opencv to the
       raspberry pi.

   this is a can   t-miss series of blog posts, so be before you go, make
   sure you enter your email address in the form below to be notified when
   these posts go live!

downloads:

   if you would like to download the code and images used in this post,
   please enter your email address in the form below. not only will you
   get a .zip of the code, i   ll also send you a free 17-page resource
   guide on id161, opencv, and deep learning. inside you'll find
   my hand-picked tutorials, books, courses, and libraries to help you
   master cv and dl! sound good? if so, enter your email address and i   ll
   send you the code immediately!

   email address: ____________________

   download the code!

resource guide (it   s totally free).

   get your free 17-page id161 and deep learning resource guide
   pdf
   enter your email address below to get my free 17-page id161,
   opencv, and deep learning resource guide pdf. inside you'll find my
   hand-picked tutorials, books, courses, and python libraries to help you
   master id161 and deep learning!
   ____________________
   download the guide!

   [39]id98, [40]convolutional neural network, [41]deep learning,
   [42]id163, [43]machine learning, [44]opencv 3
   [45]long exposure with opencv and python
   [46]fast, optimized    for    pixel loops with opencv and python

147 responses to deep learning with opencv

    1. hermann-marcus behrens august 21, 2017 at 10:51 am [47]#
       very cool work! thanks for your blogposts.
       [48]reply
    2. bayo august 21, 2017 at 11:27 am [49]#
       hello, does the code work on raspberry pi?
       [50]reply
          + adrian rosebrock august 21, 2017 at 3:37 pm [51]#
            this method will work on the raspberry pi, but you   ll need a
            network small enough to run on the pi. i   ll covering this in
            detial in a future blog post.
            [52]reply
          + mas august 24, 2017 at 11:48 am [53]#
            strongly yes
            [54]reply
    3. [55]ansh august 21, 2017 at 12:38 pm [56]#
       this is great, cant wait to try it! it was about time that opencv
       introduced deep learning. i was wondering of the following though    
       it would be great to see if we can use dnn for tracking objects,
       like the    tracking a ball    example you had blogged. most of the
       neural nets examples i have seen involved classification or
       labeling the objects. are neural network efficient in tracking
       objects as well? or does dlib   s object correlation better at it.
       which cv method is good (efficient) for what   .? it would be great
       if you can blog about the cv landscape as there are so many methods
       efficient for different things
       i am motivated for robotics application of cv. also i am assuming
       that your consequent blogs will have methods to train a model as
       well?
       thanks.
       [57]reply
          + adrian rosebrock august 21, 2017 at 3:36 pm [58]#
            it really depends on exactly what types of objects you are
            trying to track and under which conditions. deep learning can
            be used to track objects, but typically we use correlation
            filters for this (like in dlib). i   ll consider doing a survey
            of object tracking methods in the future, thanks for the
            suggestion!
            [59]reply
          + aleksandr rybnikov august 21, 2017 at 4:53 pm [60]#
            object tracking is already in opencv dnn. lightweight yet
            accurate ssd with mobilenet backbone is in the samples
            directory
            [61]https://github.com/opencv/opencv/blob/master/samples/dnn/m
            obilenet_ssd_python.py
            [62]reply
               o adrian rosebrock august 22, 2017 at 10:49 am [63]#
                 thanks for sharing (and for your contributions!)
                 aleksandr. what you   re referring to is actually object
                 detection, the process of determining the (x,
                 y)-coordinates of a given object in an image. object
                 tracking normally takes place after a location has been
                 identified (which is what i assume ansh is referring to).
                    id164    and    object tracking    are two
                 different operations.
                 thanks again for the comment i   ll make sure object
                 detection with opencv + deep learning is covered in a
                 future blog post as well.
                 [64]reply
    4. steven barnes august 21, 2017 at 12:51 pm [65]#
       it might be useful to mention where to get the python opencv
       library for python3 for each platform as it is not obvious. you
       also mention following the install instructions but do not have a
       link to them, and again they are not that easy to find on the
       opencv site.
       [66]reply
          + adrian rosebrock august 21, 2017 at 3:35 pm [67]#
            hi steven     i actually link to [68]this page which includes
            opencv + python install instructions for a variety of
            different platforms and operating systems.
            [69]reply
    5. diogo aleixo august 21, 2017 at 12:56 pm [70]#
       hi adrian
       is there a way to train another category on id163? the one that
       i want is not available.
       [71]reply
          + adrian rosebrock august 21, 2017 at 3:35 pm [72]#
            hi diogo     you would need to either (1) train your id98 from
            scratch or (2) apply id21. i discuss both in
            detail [73]deep learning for id161 with python.
            [74]reply
    6. maham khan august 21, 2017 at 3:03 pm [75]#
       wow! this is the best thing ever. deep learning will be so easy
       with opencv. and also thank you adrian for making the tutorial so
       quickly, and keep us updated with the latest release. you are doing
       great contribution for id161 community!
       much appreciated tutorials. just by going through your post, one
       can get the whole idea of the process.
       [76]reply
          + adrian rosebrock august 21, 2017 at 3:34 pm [77]#
            thanks maham! i   m glad you enjoyed the post. there will be
            plenty more on deep learning + opencv     
            [78]reply
               o supra august 21, 2017 at 9:20 pm [79]#
                 it doesn   t work with raspberry pi 3 on latest version
                 raspbian stretch.
                 i   m using opencv 3.3.0. and the problem is    no module
                 named cv2   
                 [80]reply
                    # adrian rosebrock august 22, 2017 at 10:46 am [81]#
                      you need to [82]install opencv first. it doesn   t
                      matter if you   re using raspbian wheezy, jessie, or
                      stretch     opencv must first be installed.
                      [83]reply
    7. aleksandr rybnikov august 21, 2017 at 4:59 pm [84]#
       btw, there is an error in the article. correct name of the
       developer of the dnn is aleksandr rybnikov, actually it   s me
       [85]reply
          + adrian rosebrock august 22, 2017 at 10:48 am [86]#
            thank you for bringing this to my attention. i have updated
            the blog post      thank you again for your wonderful
            contributions to the opencv library. i look forward to help
            spread the word more regarding your work!
            [87]reply
    8. saumya rajen shah august 22, 2017 at 3:29 am [88]#
       where can we find the id163 labels?
       [89]reply
          + adrian rosebrock august 22, 2017 at 10:44 am [90]#
            please use the    downloads    section of this blog post. there
            you will find a .txt file containing the id163 labels.
            [91]reply
    9. vincent thon august 22, 2017 at 5:34 am [92]#
       i adrian, love your work! your blog is my main go to place when it
       comes to id161. i have some models trained with tflearn.
       do you think i   d be able to utilize those with the
       cv2.dnn.createtensorflowimporter?
       [93]reply
          + adrian rosebrock august 22, 2017 at 10:43 am [94]#
            hi vincent     i haven   t tried importing a model trained via
            tflearn. i would suggest giving it a try.
            [95]reply
   10. mansoor nasir august 22, 2017 at 3:11 pm [96]#
       adrian, this is amazing work, i really appreciate all the efforts
       you make this step by step tutorial. my only question is, how will
       we use this with a model trained by tensorflow?
       thank you for all your help.
       [97]reply
          + adrian rosebrock august 22, 2017 at 5:17 pm [98]#
            you would replace cv2.dnn.readnetfromcaffe with
            cv2.dnn.readnetfromtensorflow.
            [99]reply
   11. knaffe august 23, 2017 at 11:45 pm [100]#
       thank you for your blogs. i have read all of them.
       how could i load my model trained by myself with tensorflow and use
       it ?
       by the way, do you know some effective deep or traditional methods
       for motion detection running on raspberry pi3 with real-time
       performance?
       thank you for your great job again and look forward to your new
       blogs!!
       [101]reply
          + adrian rosebrock august 24, 2017 at 3:32 pm [102]#
            1. please see my reply to    mansoor    above regarding
            tensorflow.
            2. take a look at [103]this blog post for simple motion
            detection on the raspberry pi.
            [104]reply
   12. oguzhan august 24, 2017 at 7:12 am [105]#
       so cool, thx!! we are waiting raspberry pi tutorial     
       [106]reply
   13. megha shanbhag august 28, 2017 at 4:16 am [107]#
       hi, i have installed and built opencv 3.3 in my laptop. i have not
       built opencv_contrib. when i run the example given in the
       deep-learning-opencv.zip, i get error stating
           file    deep_learning_with_opencv.py   , line 34, in
       blob = cv2.dnn.blobfromimage(image, 1, (224, 224), (104, 117, 123))
       attributeerror:    module    object has no attribute    blobfromimage'   
       can you please tell me what could be the issue?
       [108]reply
          + adrian rosebrock august 28, 2017 at 4:21 pm [109]#
            can you confirm that you are running opencv 3.3?
            python

            $ python____________________________________________________
            >>> import cv2______________________________________________
            >>> cv2.__version___________________________________________
            ____________________________________________________________

   1

   2

   3

   $ python

   >>> import cv2

   >>> cv2.__version__
            the output should be 3.3.0.
            [110]reply
               o boikobo september 5, 2017 at 4:41 am [111]#
                 i have a similar issue. it is showing that its opencv
                 3.3.0 but saying
                 blob = cv2.dnn.blobfromimage(image, 1, (224, 224), (104,
                 117, 123))
                 attributeerror:    module    object has no attribute
                    blobfromimage      
                 [112]reply
                    # adrian rosebrock september 5, 2017 at 9:10 am [113]#
                      hi boikobo     that is indeed very strange. for
                      whatever reason it appears your version of opencv
                      was not compiled with    dnn   . i would go back to
                      installing opencv and ensure that    dnn    is listed in
                      the    modules to be built    output of cmake.
                      [114]reply
   14. smartos august 28, 2017 at 6:08 am [115]#
       great post!
       [116]reply
   15. tham august 29, 2017 at 12:42 am [117]#
       do you know how to save the model of pytorch?
       i train and save a simple id98 model by pytorch, but it cannot
       loaded by the dnn module(i am using 3.3).
       complete question can view at
       stackoverflow([118]https://stackoverflow.com/questions/45929573/how
       -should-i-save-the-model-of-pytorch-if-i-want-it-loadable-by-opencv
       -dnn-modul)
       [119]reply
          + adrian rosebrock august 31, 2017 at 8:45 am [120]#
            i have not used pytorch so unfortunately i do not know the
            answer to this question. i hope another pyimagesearch reader
            can help!
            [121]reply
               o devin november 19, 2018 at 4:48 am [122]#
                 i am using pytorch and i have the same problem   
                 [123]reply
          + dam van tai january 4, 2019 at 8:00 pm [124]#
            use convert model pytorch -> caffe,after load opencv!!
            [125]reply
   16. [126]imaduddin a majid august 29, 2017 at 10:43 am [127]#
       really great article. thank you for sharing this with us. i also
       expected this will work with keras soon.
       [128]reply
          + adrian rosebrock august 31, 2017 at 8:36 am [129]#
            i actually already have [130]number of blog posts on keras. i
            also cover keras in-depth inside my book, [131]deep learning
            for id161 with python.
            [132]reply
   17. lg september 6, 2017 at 6:05 am [133]#
       thanks for this post. really cool stuff.
       i   ve tried with other models like squeezenet, alexnet,
       bvlc_reference_caffenet with success, the accuracy is good as well.
       some errors, like with a white cat jumping in a meadow recognized
       as an artic fox.
       are there caffe models trained to recognize people ?
       [134]reply
          + adrian rosebrock september 7, 2017 at 7:06 am [135]#
            yes, i will actually be covering one for id164 that
            can detect people in next week   s blog post. stay tuned     
            [136]reply
               o lg september 9, 2017 at 4:41 am [137]#
                 hi adrian,
                 looking for models on the internet, i found several
                 articles about    oxford vgg face dataset   .
                 references :
                    
                 [138]https://github.com/mzaradzki/neuralnets/blob/master/
                 vgg_faces_keras/
                    
                 [139]http://www.vlfeat.org/matconvnet/pretrained/#face-re
                 cognition
                 then i installed keras_vggface.
                 i finally found the caffe model and prototxt. this works
                 very well with your code:    deep-learning-with-opencv   .
                 [info] classification took 0.66553 seconds
                 [info] 1. label: adelaide_kane, id203: 0.99818
                 [info] 2. label: lucy_hale, id203: 0.00031506
                 [info] 3. label: jamie_gray_hyder, id203: 0.0001969
                 [info] 4. label: odeya_rush, id203: 0.00010968
                 [info] 5. label: sasha_barrese, id203: 8.4347e-05
                 now, the question is how to train this model with our own
                 pictures or add more people to the dataset.
                 i am looking forward to reading your article.
                 [140]reply
                    # adrian rosebrock september 11, 2017 at 9:21 am
                      [141]#
                      if you want to add in more people you would need to
                      either (1) train your model from scratch or (2)
                      apply fine-tuning. i cover both in detail inside
                      [142]deep learning for id161 with python.
                      [143]reply
   18. komal september 7, 2017 at 4:16 am [144]#
       hey adrian,
       in opencv 3.2 i   m getting an error while using blobffromimage
       function of dnn. that it   s not there. what are the differences in
       opencv 3.2 and opencv 3.3 ?
       [145]reply
          + adrian rosebrock september 7, 2017 at 6:54 am [146]#
            hi komal     the    dnn    sub-module was totally re-engineered in
            opencv 3.3. you need to upgrade to opencv 3.3.
            [147]reply
   19. sean mcleod september 24, 2017 at 1:31 pm [148]#
       hi adrian
       where are the values used for the mean subtraction (104, 117, 123)
       documented?
       cheers
       [149]reply
          + adrian rosebrock september 26, 2017 at 8:38 am [150]#
            they are the mean values of the id163 training set. these
            values don   t change since the id163 dataset is pre-split.
            nearly all deep learning publications/implementations that are
            trained on id163 report these values as the mean. i   ve also
            trained networks on id163 by hand and can confirm the
            values.
            [151]reply
   20. andrew craton october 2, 2017 at 10:07 am [152]#
       thanks for all the great work here! your script works perfectly on
       the model. however, i   ve trained my own mobilenetssd caffe model,
       but am struggling with using the trained model with the script.
       there appears to be a difference between the trained model and a
          deploy    optimized version of the model, where a script called
          merge_bn.py    is necessary to merge the batchnorm, scale layer
       weights to the conv layer, to improve the performance.
       ([153]https://github.com/chuanqi305/mobilenet-ssd/blob/master/merge
       _bn.py) i continue to get errors like : message type
          caffe.layerparameter    has no field named    permute_param   . and
       check failed: readprotofromtextfile(param_file, param) failed to
       parse netparameter file: mobilenetssd_deploy.prototxt. is it
       possible that my opencv build does not contain the correct modules?
       [154]reply
          + adrian rosebrock october 2, 2017 at 10:32 am [155]#
            opencv   s    dnn    module is brand new, so it   s entirely possible
            that not all features in caffe/tensorflow/torch etc. have
            1-to-1 equivalents in opencv. i would suggest posting the
            error on the [156]official opencv forums and seeing what the
            developers say. again, i   m not sure what the exact issue is
            here. thanks for sharing though, myself and other
            pyimagesearch readers appreciate it!
            [157]reply
          + steve cox october 13, 2017 at 9:54 am [158]#
            i have run into this situation as well. 10/13/17. i am using
            tensorflow 1.* and python 3.5 on windows 10 x64. i don   t want
            to deal with docker containers and virtual environment, to
            much to keep track of. i just want to retrain models and play
            them back through opencv. using tf on deployed models is over
            kill. i am using the flowers example. i got tf to retrain the
            inception (model?) using the flower images. i then take the
            output graph and try and load it with opencv 3.3
            (cv2.dnn.readnetfromtensorflow) and get different unknown
            layer errors. i have looked at several different python
            scripts you have to run to strip out layers opencv can   t deal
            with    yet    that exist in the retrained tf model. if someone
            knows where an all in one python script exists, that takes a
            previously re-trained tf models and converts them so they can
            be loaded into opencv 3.3 dnn that would be great. i am using
            python 2.7 and opencv 3.3 to do the model prediction. this
            works fine with adrian   s caffe example, but not with a
            retrained tf model. i realize i have a lot to learn on all the
            nutz and bolts with tf and deployment. sorry if there is
            another link somewhere on this site that covers this material.
            this is by far the best site i have seen on this subject.
            [159]reply
               o adrian rosebrock october 14, 2017 at 10:42 am [160]#
                 as far as i understand it, the tensorflow loading
                 capabilities of opencv 3.3 are no where near as good as
                 the caffe ones. i   m sure this will mature in future
                 releases of opencv 3.3, but for the time being, i might
                 try to (1) use caffe to train your network or (2) try to
                 convert your tf weights to caffe format. you might also
                 consider posting on the [161]official opencv forums.
                 [162]reply
   21. igor october 24, 2017 at 8:09 am [163]#
       good afternoon adrian, thanks for the interesting article! tell me
       how to determine the coordinates of the detected object, i.e. to
       outline the detected object.
       [164]reply
          + adrian rosebrock october 24, 2017 at 10:36 am [165]#
            hi igor     i suggest you look at lines 38-67 on this blog post,
            [166]id164 with deep learning and opencv
            [167]reply
               o igor october 25, 2017 at 12:17 pm [168]#
                 adrian thank you for a great course. for the convenience
                 of working from your post, it would be convenient to
                 display the contents of your course if the contents of
                 the course are, then tell me where it is. i can   t find
                 it.
                 [169]reply
                    # adrian rosebrock october 25, 2017 at 12:43 pm [170]#
                      hi igor     you can grab the table of contents and
                      free sample chapters of [171]deep learning for
                      id161 with python by visiting the link and
                      entering your email on the bottom right. for the
                      gurus course, simply go to the [172]pyimagesearch
                      gurus landing page and click the green button at the
                      top to get the syllabus + 10 free sample lessons.
                      [173]reply
   22. romroc october 26, 2017 at 10:50 am [174]#
       really excellent site! thanks adrian for your help to go into deep
       learning and id161 programming.
       for what i understood, a crucial part is to train deep learning to
       obtain models. it is challenging mostly because we need a huge
       dataset to obtain good models.
       is there any public archive in internet to download the most common
       objects models?
       thanks
       [175]reply
          + adrian rosebrock october 31, 2017 at 8:13 am [176]#
            arguably the best dataset for common objects is id163. i
            detail how to obtain id163 and train your own id98s on it
            inside [177]deep learning for id161 with python.
            [178]reply
   23. nasir october 28, 2017 at 2:39 pm [179]#
       hi ,
       i want to get the box around the detection. i have also read your
       other post but it only supports upto 20 objects detection. objects
       i want to get identified are not supported by that model but with
       this model they does. kindly can you let me know how can i get
       coordinates of detected object to track them with this model.
       thanks in advance
       [180]reply
          + adrian rosebrock october 31, 2017 at 8:09 am [181]#
            you can   t directly convert a model used for image
            classification and then use it for id164. you would
            need to either (1) train your own id164 network
            from scratch on objects you are interested in recognizing or
            (2) fine-tune an existing network that is used for object
            detection.
            [182]reply
   24. [183]dixon dick october 29, 2017 at 2:50 am [184]#
       adrian,
       thanks for all you do, your work is easy to use, foundational and
       informative.
       just completed an install for opencv 3.3, python 2.7.12, ubuntu
       16.04.3 using your previous install instructions here:
       [185]https://www.pyimagesearch.com/2016/10/24/ubuntu-16-04-how-to-i
       nstall-opencv/
       perhaps you have updated these? didn   t find anything for 3.3 except
       the back ref to this so i went through it from scratch.
       there were a couple of challenges and i captured my notes. let me
       know how to post to you. might be a bit long for this comment tool.
       warmest regards,
       dcd
       [186]reply
          + adrian rosebrock october 30, 2017 at 3:13 pm [187]#
            hi dixon     the instructions should work for opencv 3.3 but
            you   d download and reference opencv 3.3 instead. thanks for
            your comment.
            [188]reply
   25. nasir october 29, 2017 at 8:26 pm [189]#
       i want coordinates with the detection. but unfortunately i am not
       able to get the coordinates because i want to get them detect in
       real time. i have also gone through your other posts but models you
       are using in them have not the objects which i want to get them
       detected. i want to achieve it via dnn module but i am not able to
       get the direction. ill be really grateful if you can help in this
       perspective.
       [190]reply
          + adrian rosebrock october 30, 2017 at 1:56 pm [191]#
            hi nasir     see this post on [192]real-time id164
            with deep learning and opencv.
            [193]reply
               o nasir november 2, 2017 at 1:07 pm [194]#
                 hi adrian. i have already gone through this post but the
                 problem is the model that is being given in that example
                 is just capable of detecting 20 objects where as model
                 given in this example is capable of detecting objects
                 much more. so my concern here is that, that i want to get
                 detect punching bag in real time and find it in image
                 with bounding box but unfortunately i am not able to do
                 so with this model. i am seeking help in this
                 prospective.
                 thanks in advance
                 [195]reply
                    # adrian rosebrock november 2, 2017 at 2:08 pm [196]#
                      hi nasir     i understand your question, please see my
                      reply above. you cannot use the model used in this
                      blog post for id164     it can only be used
                      for image classification. you would need to either
                      (1) train an id164 model from scratch to
                      detect any objects you are interested in or (2)
                      perform fine-tuning or an existing id164
                      model. for what it   s worth, i   m covering object
                      detection models (and how to train them) inside
                      [197]deep learning for id161 with python.
                      [198]reply
   26. mario november 3, 2017 at 12:08 pm [199]#
       i adrian, love your work, very very useful!
       i   ve a problem, this algorithm doesn   t find a person in this photo
       [200]https://mosaic01.ztat.net/vgs/media/pdp-zoom/k4/85/1h/04/ja/11
       /k4851h04j-a11@10.jpg
       how can i add it (and other images) to the training?
       [201]reply
          + adrian rosebrock november 6, 2017 at 10:47 am [202]#
            have you tried using a dedicated [203]pedestrian detector?
            you cannot directly add additional training images. you would
            need to instead train from scratch or perform transfer
            learning such as fine-tuning. i cover both inside [204]deep
            learning for id161 with python.
            [205]reply
               o wenkang april 13, 2018 at 3:55 am [206]#
                 hello dr. rosebrock,
                 i read the fine-tuning chapter of your book, and it is
                 based on keras, whose backend is either tensorflow or
                 therno.
                 but most the pre-trained models used in raspberry pi is
                 from caffe.
                 the problem now is, i cannot deploy the fine-tuned model
                 (in keras) on raspberry.
                 personally,
                 q1: i have to use caffe, not keras, to fine-tune a
                 pre-trained model if i want to deploy that on raspberry
                 after fine-tunning. am i correct ?
                 q2: and if want to use keras for fine-tuning, and then
                 deploy the model on raspberry(if i use
                 cv2.dnn.readnetfromcaffe). what should i do ?
                 thanks
                 [207]reply
                    # adrian rosebrock april 13, 2018 at 6:37 am [208]#
                      1. unfortunately opencv does not have any bindings
                      to accept a keras input model and use it via their
                         dnn    module.
                      2. opencv does support tensorflow models but with
                      limited functionality.
                      3. if you would like to use a deep learning model
                      via opencv   s    dnn    module you should use caffe to
                      train and export your model.
                      4. that said   if your model is already trained via
                      keras you don   t need to use opencv   s    module   . you
                      can run it on the pi directly. see [209]this blog
                      post for a complete guide.
                      [210]reply
                         @ wenkang april 15, 2018 at 9:09 pm [211]#
                           clear!
                           thank you so much.
   27. lee november 27, 2017 at 11:17 am [212]#
       good
       [213]reply
   28. ahmed mansour december 26, 2017 at 6:10 am [214]#
       hello
       thank you ver much
       you are very helpfull man
       how i acan make my module
       to identify person faces and
       can identify mobile and chairs and laptop
       [215]reply
          + adrian rosebrock december 26, 2017 at 3:49 pm [216]#
            you would need to use a dedicated library for face
            recognition. i cover face recognition inside the
            [217]pyimagesearch gurus course. you can also look into
            strictly deep learning-based face recognition algorithms such
            as openface and face embeddings.
            [218]reply
   29. dann december 28, 2017 at 12:47 pm [219]#
       hi adrian
       i am still new here and hope that you will be able to help me in
       this. thankyou
       so i have already downloaded the whole folder from the email. also,
       i am using the raspberry pi
       for the deep learning and opencv classification results part , am i
       suppose to right click the deep-learning-opencv and click on    open
       in terminal   ?
       after opening the terminal, am i also just suppose to copy and
       paste this only?
          $ python deep_learning_with_opencv.py   
       therefore the whole sentence will be
       pi@raspberrypi:~/desktop/deep-learning-opencv $ python
       deep_learning_with_opencv.py.
       however this was wrong because there was error poping out. where
       did i go wrong and what should i copy and paste in order for it to
       work?
       [220]reply
          + adrian rosebrock december 28, 2017 at 2:04 pm [221]#
            i would suggest using the    cd    command to change directory to
            where you downloaded the code. the    $    indicates the shell.
            you do not need to copy and paste it. you can see examples of
            how to execute the script in the blog post.
            [222]reply
   30. ajeya b jois december 29, 2017 at 2:08 am [223]#
       cv2.dnn.blobfromimage(image,scalefactor=1,size=(224,224),mean=(104,
       117,123)) this line is giving me error eventhough am using open cv
       3.3
       please help anyone
       [224]reply
          + adrian rosebrock december 31, 2017 at 9:53 am [225]#
            what is the error you are getting?
            [226]reply
               o muthukumar january 1, 2018 at 12:52 pm [227]#
                 usage: deep_learning_with_opencv.py [-h] -i image -p
                 prototxt -m model -l
                 labels
                 deep_learning_with_opencv.py: error: argument -i/   image
                 is required
                 [228]reply
                    # adrian rosebrock january 3, 2018 at 1:14 pm [229]#
                      you need to supply the command line arguments as i
                      do in this script. please read on up [230]command
                      line arguments before continuing.
                      [231]reply
   31. muthukumar january 1, 2018 at 12:50 pm [232]#
       hi adrian
       while i am running the code it shows erorr.
       the problem is when i am trying to give the       image
       images/jemma.png   ,
       it shows    images     is an invalid syntax.
       i can   t give input arguments form command window.
       how to solve this
       [233]reply
   32. hfad january 3, 2018 at 9:56 am [234]#
       how can i read a .caffemodel file? can i look at the code used in
       it?
       also, can i look at the 1000+ images in the datasets used? how and
       where?
       thank you so much
       [235]reply
          + adrian rosebrock january 3, 2018 at 12:51 pm [236]#
            the caffe model are the weights obtained after training a
            neural network. the networks covered in this post were trained
            on the id163 dataset. i discuss how to train our own neural
            networks inside [237]deep learning for id161 with
            python.
            [238]reply
   33. yates january 20, 2018 at 3:54 am [239]#
       that   s cool.where can i get the demo?
       [240]reply
          + adrian rosebrock january 20, 2018 at 8:06 am [241]#
            please use the    downloads    section of this blog post to
            download the source code + example images.
            [242]reply
   34. jackliu february 4, 2018 at 10:50 pm [243]#
       very good!!!!!
       [244]reply
          + adrian rosebrock february 6, 2018 at 10:24 am [245]#
            thanks jackliu     
            [246]reply
   35. arvind february 6, 2018 at 5:27 am [247]#
       hey
       how do you go about training the model for deep learning? i   m not
       sure if i   m missing anything.
       if someone can help me out it will be great.
       thanks in advance
       [248]reply
          + adrian rosebrock february 6, 2018 at 10:01 am [249]#
            hey arvind     i discuss how to train your own custom deep
            learning models quite a bit in this blog post. take a look at
            [250]this page for a list of all deep learning tutorials here
            on pyimagesearch. you should also take a look at my book,
            [251]deep learning for id161 with python, which
            discusses how to train your own deep learning models in
            detail.
            [252]reply
   36. arsam ali march 8, 2018 at 12:01 pm [253]#
       hey adrian!
       i just downloaded the source code and all other files then i opened
       the deep_learning_with_opencv.py file with my idle and ran it but
       it gives me this error.
       usage: deep_learning_with_opencv.py [-h] -i image -p prototxt -m
       model -l
       labels
       deep_learning_with_opencv.py: error: the following arguments are
       required: -i/   image, -p/   prototxt, -m/   model, -l/   labels
       kindly guide me how to use this code. i opened the python terminal
       and wrote the command you have mentioned above as well but i was
       getting an error on that.
       [254]reply
          + adrian rosebrock march 9, 2018 at 9:11 am [255]#
            hey arsam     you need to execute the script from your terminal
            and supply the command line arguments. if you are new to
            command line arguments, that   s okay, but you need to [256]read
            up on them first before you try to execute the script.
            [257]reply
   37. pudding march 15, 2018 at 10:30 pm [258]#
       thank you
       [259]reply
   38. lewlovehow march 18, 2018 at 5:33 am [260]#
       it is just what i want
       [261]reply
   39. yuan march 22, 2018 at 4:08 am [262]#
       i   m learning opencv and i love it
       [263]reply
          + adrian rosebrock march 22, 2018 at 9:35 am [264]#
            that   s wonderful to hear yuan!     
            [265]reply
   40. michael march 24, 2018 at 6:33 am [266]#
       hi adrian!
       many thanks     this works great with the pre-trained model which you
       provide.
       i tried out some other models as well (e.g., inception or
       bvlc_googlenet), but they do not seem to provide shapes as an
       output to actually draw the rectangle (detections.shape is
       undefined). do you know of ther     more completely trained     models
       which also provide the shapes in order to draw the rectangles?
       many thanks and all the best,
       michael
       [267]reply
          + adrian rosebrock march 27, 2018 at 6:33 am [268]#
            hey michael     i think you   re confusing    image classification   
            with    id164   . image classification will assign a
            single label to an image while id164 will return
            the bounding boxes of each object in the image. see [269]this
            post for more details.
            [270]reply
               o hamze60 november 22, 2018 at 9:00 am [271]#
                 hi,
                 i understand that this is called image classification.
                 however as a test, i tried to run this program on another
                 image, containing two obvious objects, like a clear dog
                 and cat. while the returned top prediction matches one of
                 objects with high id203, the other object is not
                 detected at all (no high id203 is assigned to
                 that). but when i delete the main object, the other one
                 is detected strongly.
                 is there any explanation about how this network works?
                 [272]reply
                    # adrian rosebrock november 25, 2018 at 9:25 am [273]#
                      what do you mean by you    delete    the main object?
                      you use a photo editing application and remove the
                      object?
                      [274]reply
   41. pha march 26, 2018 at 5:13 am [275]#
       i   m found some error.they show me that    terminate called after
       throwing an instance of std::bad_alloc   
       how can i fix this ??
       thank.
           i run on my rasp pi 3-stretch and open-cv 3.5
       [276]reply
   42. eric april 2, 2018 at 5:32 am [277]#
       hi adrian,
       thanks for your great work.
       i am now running inception v3 based on tensorflow upon raspberry
       pi3, opencv is not used.
       this paper seems like another method.
       a very basic question: do i have install tensorflow on raspberry if
       i want to try a trained model imported from tensorflow based on
       opencv?
       thanks.
       [278]reply
          + adrian rosebrock april 4, 2018 at 12:25 pm [279]#
            the opencv library provides methods to load tensorflow models,
            but they are a bit buggy so you might struggle with them (just
            fair warning). that said, no, you do not have to install
            tensorflow to load your model provided that you are using
            opencv   s built-in functions.
            [280]reply
               o wenkang april 7, 2018 at 11:21 pm [281]#
                 hello adrian,
                 thanks for your excellent work. i followed your
                 step-by-step tutorial and successfully realized deep
                 learning on opencv.
                 i once also tried to install tensorflow on raspberry pi3,
                 and ran the inception model. and that really requires a
                 longer time to identify a picture.
                 based on opencv, the id136 time much samller. that   s
                 really practical.
                 does it mean compared with opencv based deep learning,
                 running deep learning model upon a framework, e.g.
                 tensorflow, on resource limited hardware, has no
                 practical meaning ? is there any other options if we
                 don   t use opencv ?
                 [282]reply
                    # adrian rosebrock april 10, 2018 at 12:34 pm [283]#
                      i   m not sure why your tensorflow model may have
                      executed so slowly. it might be due to the actual
                      code you were using or the model itself. opencv
                      certainly facilitates real-time image processing but
                      based on pure id136 time there shouldn   t be a
                      huge difference between the two.
                      [284]reply
               o eric april 8, 2018 at 2:59 am [285]#
                 thanks.
                 opencv has a new release of its deep learning library,
                 opencv_contrib. i have realized the implementation of
                 some models from caffe and tf on respberry, without
                 installing the deep learning framework.
                 thanks.
                 [286]reply
               o eric april 8, 2018 at 11:15 pm [287]#
                 hello dr. adrian,
                 thanks, it works based on opencv.
                 do you have any tutorial that opencv reads model from
                 tensorflow ? or do you have any tutorial about how to
                 export pre-trained model from tensorflow ?
                 [288]reply
                    # adrian rosebrock april 10, 2018 at 12:18 pm [289]#
                      i do not have any tutorials on using tensorflow
                      models with opencv. the tensorflow functionality
                      with opencv is still a bit fragile. it may be a few
                      more releases until opencv + tensorflow models work
                      well together (at least that   s what i   ve gathered
                      from my own experience).
                      [290]reply
                         @ eric april 11, 2018 at 1:05 am [291]#
                           thanks.
                           do you have tutorials on exporting well trained
                           network from caffe , if we want to deploy them
                           in raspberry?
                         @ adrian rosebrock april 11, 2018 at 9:00 am
                           [292]#
                           if your model is already trained via caffe you
                           can take the prototxt and model file and then
                           use them on the pi.
          + [293]assam alzookery july 14, 2018 at 4:34 pm [294]#
            can you share your code how are you using tensorflow?
            thank you
            [295]reply
   43. qq april 14, 2018 at 5:13 am [296]#
       good
       [297]reply
   44. jibola may 6, 2018 at 6:52 pm [298]#
       i tried using this code to run mobilenet. i got the mobilenet model
       and protxt from the official git page. the results are all wrong.
       is this a code problem or model problem.
       the squeezenet and googlenet work fine
       [299]reply
          + adrian rosebrock may 9, 2018 at 10:13 am [300]#
            you should double-check what types of preprocessing the
            official mobilenet repo performed     you may need to update the
            preprocessing steps.
            [301]reply
   45. dongdong hu may 22, 2018 at 12:35 am [302]#
       please give me a demo
       [303]reply
          + adrian rosebrock may 22, 2018 at 5:53 am [304]#
            this blog post includes a demo of running a deep neural
            network on input images using opencv. you can use the
               downloads    section of this blog post download the code +
            example images.
            [305]reply
   46. mgg may 27, 2018 at 12:49 am [306]#
       thanks for your excellent work.
       [307]reply
          + adrian rosebrock may 28, 2018 at 9:43 am [308]#
            thank you mgg, i   m glad you are enjoying the pyimagesearch
            blog     
            [309]reply
   47. bryant portilla guam  n june 27, 2018 at 6:00 pm [310]#
       hi adrian, i like your work
       i have a question
       how can i draw a box of the object detected? with this example, i
       want to know the coords of the object   
       thank you
       [311]reply
          + adrian rosebrock june 28, 2018 at 8:03 am [312]#
            the network used here is for image classification. what you
            are trying to perform is id164. [313]see this blog
            post as well as [314]this one.
            [315]reply
   48. artur july 9, 2018 at 1:11 pm [316]#
       hi adrian,
       i have an error
       net = cv2.dnn.readnetfromcaffe(args[   prototxt   ], args[   model   ])
       attributeerror: module    cv2    has no attribute    dnn   
       plese help me to fix it. i use opencv 3.4.1
       [317]reply
          + adrian rosebrock july 10, 2018 at 8:20 am [318]#
            it sounds like you may not have opencv 3.4.1. you need opencv
            3.3+ for the    dnn    module and it appears that either:
            1. you are not using opencv 3.4.1
            2. your install of opencv 3.4.1 does not include the    dnn   
            module for some particular reason     perhaps check your    cmake   
            output when you compiled and installed opencv.
            [319]reply
   49. zee august 11, 2018 at 3:49 am [320]#
       i am having following error while executing    args =
       vars(ap.parse_args())   
       usage: ipykernel_launcher.py [-h] -i image -p prototxt -m model -l
       labels
       [321]reply
          + adrian rosebrock august 15, 2018 at 9:11 am [322]#
            if you   re new to python command line arguments, that   s okay,
            but make sure you read [323]this post first.
            [324]reply
               o zain august 23, 2018 at 2:05 am [325]#
                 adrian, thanks for your reply. i have already read your
                 post related to command line arguments, but i am facing
                 the same issue given below. i am working on windows
                 platform., is it something because of operating system?
                 usage: ipykernel_launcher.py [-h] -n name
                 [326]reply
                    # adrian rosebrock august 24, 2018 at 8:46 am [327]#
                      no. it has nothing to do with your system. please
                      make sure you read the [328]argument parsing
                      tutorial i linked you to.
                      [329]reply
   50. mohit august 22, 2018 at 5:31 am [330]#
       hi, thanks for the tutorial! in general, what are the advantages of
       using opencv   s dnn module rather than just native tensorflow? are
       there any speed, memory, or other performance gains? to my
       knowledge, tensorflow   s graph also pushes its forward pass in c++,
       rather than python, so i would think the performance would be
       similar, right?
       thanks
       [331]reply
          + adrian rosebrock august 22, 2018 at 9:20 am [332]#
            the forward passes would indeed be similar, although opencv
            itself, depending on how you compile it, can include some
            additional optimizations. it   s really about convenience and
            how your workflow works. if it   s already working with
            tensorflow i wouldn   t feel the need to switch to the opencv
            pipeline.
            [333]reply
   51. anil bhaskar august 24, 2018 at 4:27 am [334]#
       hi adrian, that you sharing great post. i am following you posts
       and learning deep learning.
       i am java developer and have very basic knowledge of python.
       i have set up the env using anaconda and downloaded the source code
       and trying to run it using pycharm/jupyter, but getting error like
       usage: deep_learning_with_opencv.py [-h] -i image -p prototxt -m
       model -l
       labels
       deep_learning_with_opencv.py: error: argument -i/   image is required
       where should i pass the image path. i am unable to figure out.
       thanks again.
       [335]reply
          + anil bhaskar august 24, 2018 at 5:08 am [336]#
            never mind, i got it. so silly.
            [337]reply
   52. sergis nicolaou september 23, 2018 at 8:46 am [338]#
       hi,
       when working with tensorflow, what do i need to write in the
       arguments?
       thanks
       [339]reply
          + sergis nicolaou september 23, 2018 at 9:09 am [340]#
            i forgot to mention that i have my own trained model
            [341]reply
   53. harish october 5, 2018 at 4:57 am [342]#
       facing this issue !
       trying to run detect_faces_video.py program
       net = cv2.dnn.readnetfromcaffe(args[   prototxt   ], args[   model   ])
       attributeerror:    module    object has no attribute    dnn   
       [343]reply
          + adrian rosebrock october 8, 2018 at 9:52 am [344]#
            you need at least opencv 3.3 installed on your system. it
            sounds like you are using an older version of opencv. i would
            recommend you follow [345]one of my opencv install guides to
            help you get opencv installed.
            [346]reply
   54. j s sunil october 8, 2018 at 2:16 am [347]#
       how do i install dnn with opencv python on my linux laptop
       [348]reply
          + adrian rosebrock october 8, 2018 at 9:31 am [349]#
            you can follow [350]any one of my opencv install guides.
            [351]reply
   55. mhamed october 14, 2018 at 7:19 pm [352]#
       hi adrian thank for your tuto , i   m working now on slef driving car
       so i   m losing my self in dousen of tuto without result , so my goal
       is to train my own model to detect trafic sign and the road .. and
       i don   t know the efficient way to do this , i tried tensorflow but
       it seems not working in raspberry pi because of the huge
       computation that can take when loading the pretrained model, what
       can you suggest for me please , thank you for helping
       [353]reply
          + adrian rosebrock october 16, 2018 at 8:38 am [354]#
            hey mhamed, it   s great that you   re interested in self-driving
            cars. i actually cover how to train your own traffic sign
            detector inside [355]deep learning for id161 with
            python. the book will also help you understand deep learning
            for id161 in-depth. i would suggest you start there.
            [356]reply
   56. claus october 29, 2018 at 3:13 pm [357]#
       hi adrian,
       thanks for your fine blogs.
       this one has some possibilities to struggle while installing opencv
       >= 3.3 in your virtual machine.
       if you    sudo apt-get update and upgrade    the system there will be
       installed a new python library with version number 3.4.3 (was
       3.4.0) before. the cmake struggles then because it requires    exact   
       3.4.0. and fails with no python3 support.
       running with the original delivered vm with no update to
       python3.4-dev as suggested in
       [358]https://www.pyimagesearch.com/2015/07/20/install-opencv-3-0-an
       d-python-3-4-on-ubuntu/
       everything works   
       best regards, claus
       [359]reply
   57. john november 14, 2018 at 11:44 am [360]#
       hi everyone and thanks for this tutorial,
       i wonder how one can have access to a conv layer to display
       activations output
       (let   s say i work with vgg16 and want this to display conv1_1
       output?)
       in caffe, you do this with:
       net.blobs[   data   ].data[   ] = transformed_image
       sw_conv1 = net.blobs[   conv1_1   ].data
       but i don   t have a clue to do this with opencv
       best regards, john
       [361]reply
   58. arunodhayan january 25, 2019 at 10:47 pm [362]#
       i couldn   t able to draw bounding box using google net isn   t it
       impossible to draw
       [363]reply
          + adrian rosebrock january 29, 2019 at 6:59 am [364]#
            i think you   re confusing    image classification    with    object
            detection   . see [365]this tutorial for a gentle introduction
            to id164.
            [366]reply
   59. vlad february 7, 2019 at 9:13 pm [367]#
       hi adrian,
       thank you very much for this great post.
       i would be happy to know how can i get access to the intermediate
       layers as well? is there any way to do it?
       thanks!
       vlad
       [368]reply
          + adrian rosebrock february 14, 2019 at 2:59 pm [369]#
            you can technically do that with opencv but it   s a real pain.
            i instead suggest using whatever native framework the deep
            learning model was trained on.
            [370]reply
   60. walid february 14, 2019 at 9:09 am [371]#
       thanks a lot
       you mentioned    mean subtraction (104, 117, 123) to normalize the
       input   
       can you please elaborate how these numbers were calculated?
       [372]reply
          + adrian rosebrock february 14, 2019 at 12:42 pm [373]#
            those are the mean rgb values across all images in the
            id163 dataset.
            [374]reply
               o walid march 1, 2019 at 10:15 am [375]#
                 great.. thanks a lot for clarification
                 [376]reply

trackbacks/pingbacks

    1. [377]id164 with deep learning and opencv - pyimagesearch
       - september 11, 2017
       [   ] couple weeks ago we learned how to classify images using deep
       learning and opencv 3.3   s deep neural network ( dnn ) [   ]
    2. [378]deep learning on the raspberry pi with opencv - pyimagesearch
       - october 2, 2017
       [   ] the source code from this blog post is heavily based on my
       previous post, deep learning with opencv. [   ]
    3. [379]face detection with opencv and deep learning - pyimagesearch -
       february 26, 2018
       [   ] in august 2017, opencv 3.3 was officially released, bringing it
       with it a highly improved    deep neural networks    ( dnn ) [   ]

leave a reply [380]click here to cancel reply.

   comment
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________

   ______________________________name (required)

   ______________________________email (will not be published) (required)

   ______________________________website

   submit comment

   search...___________ (search)

resource guide (it   s totally free).

   [381]get your free 17-page id161 and deep learning resource
   guide pdf

   get your free 17 page id161, opencv, and deep learning
   resource guide pdf. inside you'll find my hand-picked tutorials, books,
   courses, and libraries to help you master cv and dl.

                           [382]download for free!

deep learning for id161 with python book     out now!

   [383]deep learning with id161 and python kickstarter

   you're interested in deep learning and id161, but you don't
   know how to get started. let me help. [384]my new book will teach you
   all you need to know about deep learning.

   click here to master deep learning

you can detect faces in images & video.

   [385]learn how to detect faces in images and video

   are you interested in detecting faces in images & video? but tired of
   googling for tutorials that never work? then let me help! i guarantee
   that my new book will turn you into a face detection ninja by the end
   of this weekend. [386]click here to give it a shot yourself.

   click here to master face detection

pyimagesearch gurus: now enrolling!

   the pyimagesearch gurus course is now enrolling! inside the course
   you'll learn how to perform:
     * automatic license plate recognition (anpr)
     * deep learning
     * face recognition
     * and much more!

   click the button below to learn more about the course, take a tour, and
   get 10 (free) sample lessons.

   take a tour & get 10 (free) lessons

hello! i   m adrian rosebrock.

   i'm an entrepreneur and ph.d who has launched two successful image
   search engines, [387]id my pill and [388]chic engine. i'm here to share
   my tips, tricks, and hacks i've learned along the way.

learn id161 in a single weekend.

   [389]become an opencv guru

   want to learn id161 & opencv? i can teach you in a single
   weekend. i know. it sounds crazy, but it   s no joke. my new book is your
   guaranteed, quick-start guide to becoming an opencv ninja. so why not
   give it a try? [390]click here to become a id161 ninja.

   click here to become an opencv ninja

subscribe via rss

   [391]pyimagesearch rss feed

   never miss a post! subscribe to the pyimagesearch rss feed and keep up
   to date with my image search engine tutorials, tips, and tricks
     * [392]popular

     * [393]raspbian stretch: install opencv 3 + python on your raspberry
       pi september 4, 2017
     * [394]install guide: raspberry pi 3 + raspbian jessie + opencv 3
       april 18, 2016
     * [395]home surveillance and motion detection with the raspberry pi,
       python, opencv, and dropbox june 1, 2015
     * [396]install opencv and python on your raspberry pi 2 and b+
       february 23, 2015
     * [397]ubuntu 16.04: how to install opencv october 24, 2016
     * [398]real-time id164 with deep learning and opencv
       september 18, 2017
     * [399]basic motion detection and tracking with python and opencv may
       25, 2015

   find me on [400]twitter, [401]facebook, and [402]linkedin.

      2019 pyimagesearch. all rights reserved.

   [tr?id=1465896023527386&ev=pageview&noscript=1]

   [email]
   [email]

references

   visible links
   1. http://feeds.feedburner.com/pyimagesearch
   2. https://www.pyimagesearch.com/comments/feed/
   3. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/feed/
   4. https://www.pyimagesearch.com/wp-json/oembed/1.0/embed?url=https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/
   5. https://www.pyimagesearch.com/wp-json/oembed/1.0/embed?url=https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/&format=xml
   6. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#navigation
   7. https://www.pyimagesearch.com/
   8. https://www.pyimagesearch.com/
   9. https://www.pyimagesearch.com/
  10. https://www.pyimagesearch.com/start-here-learn-computer-vision-opencv/
  11. https://www.pyimagesearch.com/practical-python-opencv/
  12. https://www.pyimagesearch.com/pyimagesearch-gurus/
  13. https://www.pyimagesearch.com/opencv-tutorials-resources-guides/
  14. https://www.pyimagesearch.com/free-opencv-computer-vision-deep-learning-crash-course/
  15. https://www.pyimagesearch.com/about/
  16. https://www.pyimagesearch.com/contact/
  17. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#top
  18. https://www.pyimagesearch.com/author/adrian/
  19. https://www.pyimagesearch.com/category/deep-learning-2/
  20. https://www.pyimagesearch.com/category/opencv-3/
  21. https://www.pyimagesearch.com/category/tutorials/
  22. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/
  23. https://github.com/opencv/opencv/tree/master/modules/dnn
  24. https://github.com/opencv/opencv/wiki/deep-learning-in-opencv
  25. https://habrahabr.ru/company/intel/blog/333612/
  26. https://www.pyimagesearch.com/2016/12/05/macos-install-opencv-3-and-python-3-5/
  27. https://www.pyimagesearch.com/2015/07/20/install-opencv-3-0-and-python-3-4-on-ubuntu/
  28. https://github.com/opencv/opencv/releases/tag/3.3.0
  29. https://github.com/opencv/opencv_contrib/releases/tag/3.3.0
  30. https://www.pyimagesearch.com/2016/12/19/install-opencv-3-on-macos-with-homebrew-the-easy-way/
  31. http://caffe.berkeleyvision.org/
  32. https://www.tensorflow.org/
  33. http://torch.ch/
  34. http://pytorch.org/
  35. https://keras.io/
  36. http://deeplearning.net/software/theano/
  37. https://arxiv.org/abs/1409.4842
  38. https://www.pyimagesearch.com/pyimagesearch-gurus/
  39. https://www.pyimagesearch.com/tag/id98/
  40. https://www.pyimagesearch.com/tag/convolutional-neural-network/
  41. https://www.pyimagesearch.com/tag/deep-learning/
  42. https://www.pyimagesearch.com/tag/id163/
  43. https://www.pyimagesearch.com/tag/machine-learning/
  44. https://www.pyimagesearch.com/tag/opencv-3/
  45. https://www.pyimagesearch.com/2017/08/14/long-exposure-with-opencv-and-python/
  46. https://www.pyimagesearch.com/2017/08/28/fast-optimized-for-pixel-loops-with-opencv-and-python/
  47. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432830
  48. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432830
  49. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432836
  50. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432836
  51. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432864
  52. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432864
  53. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433185
  54. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433185
  55. https://medium.com/@anshseven
  56. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432842
  57. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432842
  58. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432863
  59. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432863
  60. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432885
  61. https://github.com/opencv/opencv/blob/master/samples/dnn/mobilenet_ssd_python.py
  62. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432885
  63. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432986
  64. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432986
  65. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432843
  66. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432843
  67. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432861
  68. https://www.pyimagesearch.com/opencv-tutorials-resources-guides/
  69. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432861
  70. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432844
  71. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432844
  72. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432860
  73. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
  74. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432860
  75. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432852
  76. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432852
  77. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432857
  78. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432857
  79. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432910
  80. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432910
  81. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432981
  82. https://www.pyimagesearch.com/opencv-tutorials-resources-guides/
  83. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432981
  84. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432886
  85. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432886
  86. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432984
  87. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432984
  88. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432940
  89. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432940
  90. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432978
  91. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432978
  92. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432949
  93. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432949
  94. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432976
  95. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-432976
  96. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433002
  97. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433002
  98. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433010
  99. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433010
 100. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433139
 101. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433139
 102. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433206
 103. https://www.pyimagesearch.com/2015/06/01/home-surveillance-and-motion-detection-with-the-raspberry-pi-python-and-opencv/
 104. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433206
 105. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433160
 106. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433160
 107. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433518
 108. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433518
 109. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433572
 110. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433572
 111. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-434105
 112. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-434105
 113. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-434117
 114. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-434117
 115. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433522
 116. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433522
 117. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433594
 118. https://stackoverflow.com/questions/45929573/how-should-i-save-the-model-of-pytorch-if-i-want-it-loadable-by-opencv-dnn-modul
 119. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433594
 120. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433758
 121. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433758
 122. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-487773
 123. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-487773
 124. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-494748
 125. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-494748
 126. http://imaduddinamajid.wordpress.com/
 127. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433626
 128. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433626
 129. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433749
 130. https://www.pyimagesearch.com/tag/keras/
 131. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 132. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-433749
 133. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-434230
 134. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-434230
 135. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-434305
 136. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-434305
 137. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-434442
 138. https://github.com/mzaradzki/neuralnets/blob/master/vgg_faces_keras/
 139. http://www.vlfeat.org/matconvnet/pretrained/#face-recognition
 140. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-434442
 141. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-434578
 142. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 143. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-434578
 144. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-434282
 145. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-434282
 146. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-434293
 147. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-434293
 148. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-435574
 149. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-435574
 150. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-435741
 151. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-435741
 152. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-436258
 153. https://github.com/chuanqi305/mobilenet-ssd/blob/master/merge_bn.py
 154. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-436258
 155. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-436282
 156. http://answers.opencv.org/questions/
 157. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-436282
 158. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-437420
 159. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-437420
 160. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-437566
 161. http://answers.opencv.org/questions/
 162. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-437566
 163. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-438510
 164. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-438510
 165. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-438530
 166. https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/
 167. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-438530
 168. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-438639
 169. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-438639
 170. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-438647
 171. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 172. https://www.pyimagesearch.com/pyimagesearch-gurus/
 173. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-438647
 174. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-438749
 175. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-438749
 176. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-439283
 177. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 178. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-439283
 179. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-438972
 180. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-438972
 181. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-439279
 182. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-439279
 183. http://www.archethought.com/
 184. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-439006
 185. https://www.pyimagesearch.com/2016/10/24/ubuntu-16-04-how-to-install-opencv/
 186. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-439006
 187. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-439208
 188. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-439208
 189. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-439058
 190. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-439058
 191. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-439177
 192. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/
 193. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-439177
 194. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-439462
 195. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-439462
 196. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-439466
 197. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 198. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-439466
 199. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-439552
 200. https://mosaic01.ztat.net/vgs/media/pdp-zoom/k4/85/1h/04/ja/11/k4851h04j-a11@10.jpg
 201. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-439552
 202. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-439817
 203. https://www.pyimagesearch.com/2015/11/09/pedestrian-detection-opencv/
 204. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 205. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-439817
 206. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-456433
 207. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-456433
 208. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-456454
 209. https://www.pyimagesearch.com/2017/12/18/keras-deep-learning-raspberry-pi/
 210. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-456454
 211. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-456811
 212. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-441758
 213. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-441758
 214. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-444643
 215. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-444643
 216. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-444695
 217. https://www.pyimagesearch.com/pyimagesearch-gurus/
 218. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-444695
 219. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-444930
 220. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-444930
 221. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-444934
 222. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-444934
 223. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-444968
 224. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-444968
 225. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-445258
 226. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-445258
 227. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-445326
 228. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-445326
 229. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-445536
 230. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
 231. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-445536
 232. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-445325
 233. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-445325
 234. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-445499
 235. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-445499
 236. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-445509
 237. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 238. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-445509
 239. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-447037
 240. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-447037
 241. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-447054
 242. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-447054
 243. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-449013
 244. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-449013
 245. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-449259
 246. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-449259
 247. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-449187
 248. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-449187
 249. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-449231
 250. https://www.pyimagesearch.com/category/deep-learning-2/
 251. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 252. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-449231
 253. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-452415
 254. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-452415
 255. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-452540
 256. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
 257. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-452540
 258. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-453219
 259. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-453219
 260. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-453439
 261. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-453439
 262. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-453892
 263. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-453892
 264. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-453918
 265. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-453918
 266. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-454077
 267. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-454077
 268. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-454363
 269. https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/
 270. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-454363
 271. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-488509
 272. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-488509
 273. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-489022
 274. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-489022
 275. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-454227
 276. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-454227
 277. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-454866
 278. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-454866
 279. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-455091
 280. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-455091
 281. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-455489
 282. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-455489
 283. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-455971
 284. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-455971
 285. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-455503
 286. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-455503
 287. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-455623
 288. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-455623
 289. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-455954
 290. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-455954
 291. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-456092
 292. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-456171
 293. http://intvo.com/
 294. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-471037
 295. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-471037
 296. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-456604
 297. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-456604
 298. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-460180
 299. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-460180
 300. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-460674
 301. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-460674
 302. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-463260
 303. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-463260
 304. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-463314
 305. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-463314
 306. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-464576
 307. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-464576
 308. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-464933
 309. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-464933
 310. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-469324
 311. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-469324
 312. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-469384
 313. https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/
 314. https://www.pyimagesearch.com/2018/05/14/a-gentle-guide-to-deep-learning-object-detection/
 315. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-469384
 316. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-470478
 317. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-470478
 318. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-470581
 319. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-470581
 320. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-473966
 321. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-473966
 322. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-474418
 323. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
 324. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-474418
 325. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-475244
 326. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-475244
 327. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-475404
 328. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
 329. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-475404
 330. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-475119
 331. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-475119
 332. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-475135
 333. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-475135
 334. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-475356
 335. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-475356
 336. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-475361
 337. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-475361
 338. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-479347
 339. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-479347
 340. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-479348
 341. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-479348
 342. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-480791
 343. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-480791
 344. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-481186
 345. https://www.pyimagesearch.com/opencv-tutorials-resources-guides/
 346. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-481186
 347. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-481096
 348. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-481096
 349. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-481157
 350. https://www.pyimagesearch.com/opencv-tutorials-resources-guides/
 351. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-481157
 352. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-482524
 353. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-482524
 354. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-482812
 355. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 356. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-482812
 357. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-484518
 358. https://www.pyimagesearch.com/2015/07/20/install-opencv-3-0-and-python-3-4-on-ubuntu/
 359. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-484518
 360. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-487139
 361. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-487139
 362. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-497962
 363. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-497962
 364. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-498372
 365. https://www.pyimagesearch.com/2018/05/14/a-gentle-guide-to-deep-learning-object-detection/
 366. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-498372
 367. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-500377
 368. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-500377
 369. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-501386
 370. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-501386
 371. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-501268
 372. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-501268
 373. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-501288
 374. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-501288
 375. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-504151
 376. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#comment-504151
 377. https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/
 378. https://www.pyimagesearch.com/2017/10/02/deep-learning-on-the-raspberry-pi-with-opencv/
 379. https://www.pyimagesearch.com/2018/02/26/face-detection-with-opencv-and-deep-learning/
 380. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#respond
 381. https://app.monstercampaigns.com/c/mdoijtrmex7bpm0rp2hn/
 382. https://app.monstercampaigns.com/c/mdoijtrmex7bpm0rp2hn/
 383. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 384. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 385. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-face-detection
 386. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-face-detection
 387. http://www.idmypill.com/
 388. http://www.chicengine.com/
 389. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-single-weekend
 390. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-single-weekend
 391. http://feeds.feedburner.com/pyimagesearch
 392. https://www.pyimagesearch.com/2017/08/21/deep-learning-with-opencv/#tab-pop
 393. https://www.pyimagesearch.com/2017/09/04/raspbian-stretch-install-opencv-3-python-on-your-raspberry-pi/
 394. https://www.pyimagesearch.com/2016/04/18/install-guide-raspberry-pi-3-raspbian-jessie-opencv-3/
 395. https://www.pyimagesearch.com/2015/06/01/home-surveillance-and-motion-detection-with-the-raspberry-pi-python-and-opencv/
 396. https://www.pyimagesearch.com/2015/02/23/install-opencv-and-python-on-your-raspberry-pi-2-and-b/
 397. https://www.pyimagesearch.com/2016/10/24/ubuntu-16-04-how-to-install-opencv/
 398. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/
 399. https://www.pyimagesearch.com/2015/05/25/basic-motion-detection-and-tracking-with-python-and-opencv/
 400. https://twitter.com/pyimagesearch
 401. https://www.facebook.com/pyimagesearch
 402. http://www.linkedin.com/pub/adrian-rosebrock/2a/873/59b

   hidden links:
 404. https://www.pyimagesearch.com/wp-content/uploads/2017/08/deep_learning_opencv_header.jpg
 405. https://www.pyimagesearch.com/wp-content/uploads/2017/08/deep_learning_opencv_beagle.jpg
 406. https://www.pyimagesearch.com/wp-content/uploads/2017/08/deep_learning_opencv_traffic_light.jpg
 407. https://www.pyimagesearch.com/wp-content/uploads/2017/08/deep_learning_opencv_bald_eagle.jpg
 408. https://www.pyimagesearch.com/wp-content/uploads/2017/08/deep_learning_opencv_vending_machine.jpg
