   #[1]pyimagesearch    feed [2]pyimagesearch    comments feed
   [3]pyimagesearch    a simple neural network with python and keras
   comments feed [4]alternate [5]alternate

[6]navigation

   [7]pyimagesearch [8]pyimagesearch be awesome at opencv, python, deep
   learning, and id161

   [9]home

main menu

     * [10]start here
     * [11]practical python and opencv
     * [12]pyimagesearch gurus
     * [13]opencv 3 & 4 tutorials
     * [14]free crash course
     * [15]about
     * [16]contact

   [17]return to content

a simple neural network with python and keras

   by [18]adrian rosebrock on september 26, 2016 in [19]deep learning,
   [20]machine learning, [21]tutorials

   image source

   [22]image source

   if you   ve been following along with this series of blog posts, then you
   already know what a huge fan i am of [23]keras.

   keras is a super powerful, easy to use python library for building
   neural networks and deep learning networks.

   in the remainder of this blog post, i   ll demonstrate how to build a
   simple neural network using python and keras, and then apply it to the
   task of image classification.

   looking for the source code to this post?
   [24]jump right to the downloads section.

a simple neural network with python and keras

   to start this post, we   ll quickly review the most common neural network
   architecture     feedforward networks.

   we   ll then discuss our project structure followed by writing some
   python code to define our feedforward neural network and specifically
   apply it to the [25]kaggle dogs vs. cats classification challenge. the
   goal of this challenge is to correctly classify whether a given image
   contains a dog or a cat.

   we   ll review the results of our simple neural network architecture and
   discuss methods to improve it.

   our final step will be to build a test script that will load images and
   classify them with opencv, keras, and our trained model.

feedforward neural networks

   while there are many, many different neural network architectures, the
   most common architecture is the feedforward network:
   figure 1: an example of a feedforward neural network with 3 input
   nodes, a hidden layer with 2 nodes, a second hidden layer with 3 nodes,
   and a final output layer with 2 nodes.

   figure 1: an example of a feedforward neural network with 3 input
   nodes, a hidden layer with 2 nodes, a second hidden layer with 3 nodes,
   and a final output layer with 2 nodes.

   in this type of architecture, a connection between two nodes is only
   permitted from nodes in layer i to nodes in layer i + 1 (hence the
   term feedforward; there are no backwards or inter-layer connections
   allowed).

   furthermore, the nodes in layer i are fully connected to the nodes in
   layer i + 1. this implies that every node in layer i connects to every
   node in layer i + 1. for example, in the figure above, there are a
   total of 2 x 3 = 6 connections between layer 0 and layer 1     this is
   where the term    fully connected    or    fc    for short, comes from.

   we normally use a sequence of integers to quickly and concisely
   describe the number of nodes in each layer.

   for example, the network above is a 3-2-3-2 feedforward neural network:
     * layer 0 contains 3 inputs, our x_{i} values. these could be raw
       pixel intensities or entries from a feature vector.
     * layers 1 and 2 are hidden layers, containing 2 and 3 nodes,
       respectively.
     * layer 3 is the output layer or the visible layer     this is where we
       obtain the overall output classification from our network. the
       output layer normally has as many nodes as class labels; one node
       for each potential output. in our kaggle dogs vs. cats example, we
       have two output nodes     one for    dog    and another for    cat   .

project directory structure

   figure 2: the kaggle dogs vs. cats dataset is used in our simple neural
   network with keras.

   before we begin, head to the    downloads    section of this blog post, and
   download the files and data. from there you   ll be able to follow along
   as we work through today   s examples.

   once your zip is downloaded, extract the files.

   from within the directory, let   s run the tree  command with two
   [26]command line arguments to list our project structure:
   a simple neural network with python and keras
   shell

   $ tree --filelimit 10 --dirsfirst___________________________
   .___________________________________________________________
             kaggle_dogs_vs_cats_____________________________________
                 train [25000 entries exceeds filelimit, not op________
             test_images [50 entries exceeds filelimit, not ope______
             output__________________________________________________
                 simple_neural_network.hdf5____________________________
             simple_neural_network.py________________________________
             test_network.py_________________________________________
   ____________________________________________________________
   4 directories, 4 files______________________________________
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   $ tree --filelimit 10 --dirsfirst
   .
             kaggle_dogs_vs_cats
                 train [25000 entries exceeds filelimit, not opening dir]
             test_images [50 entries exceeds filelimit, not opening dir]
             output
                 simple_neural_network.hdf5
             simple_neural_network.py
             test_network.py

   4 directories, 4 files

   the first command line argument is important as it prevents tree  from
   displaying all of the image files and cluttering our terminal.

   the kaggle dogs vs. cats dataset is in the relevant directory (
   kaggle_dogs_vs_cats). all 25,000 images are contained in the train
   subdirectory. this data came from the  train.zip  [27]dataset available
   on kaggle.

   i   ve also included 50 samples from the kaggle test1.zip  available
   [28]on their website.

   the output  directory contains our serialized model that we   ll generate
   with keras at the bottom of the first script.

   we   ll review the two python scripts, simple_neural_network.py  and
   test_network.py , in the next sections.

implementing our own neural network with python and keras

   now that we understand the basics of feedforward neural networks, let   s
   implement one for image classification using python and keras.

   to start, you   ll want to follow the appropriate tutorial for your
   system to install tensorflow and keras:
     * [29]configuring ubuntu for deep learning with python
     * [30]setting up ubuntu 16.04 + cuda + gpu for deep learning with
       python
     * [31]configuring macos for deep learning with python

   note: a gpu is not needed for today   s blog post     your laptop can run
   this very elementary network easily. that being said, in general i do
   not recommend using a laptop for deep learning. laptops are for
   productivity rather than working with tb sized datasets required for
   many deep learning activities. i recommend [32]amazon aws using my
   pre-configured ami or [33]microsoft   s did166. both of these environments
   are ready to go in less than 5 minutes.

   from there, open up a new file, name it simple_neural_network.py , and
   we   ll get coding:
   a simple neural network with python and keras
   python

   # import the necessary packages_____________________________
   from sklearn.preprocessing import labelencoder______________
   from sklearn.model_selection import train_test_split________
   from keras.models import sequential_________________________
   from keras.layers import activation_________________________
   from keras.optimizers import sgd____________________________
   from keras.layers import dense______________________________
   from keras.utils import np_utils____________________________
   from imutils import paths___________________________________
   import numpy as np__________________________________________
   import argparse_____________________________________________
   import cv2__________________________________________________
   import os___________________________________________________
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   # import the necessary packages
   from sklearn.preprocessing import labelencoder
   from sklearn.model_selection import train_test_split
   from keras.models import sequential
   from keras.layers import activation
   from keras.optimizers import sgd
   from keras.layers import dense
   from keras.utils import np_utils
   from imutils import paths
   import numpy as np
   import argparse
   import cv2
   import os

   we start off by importing our required python packages. we   ll be using
   a number of scikit-learn implementations along with keras layers and
   id180. if you do not already have your development
   environment configured for keras, [34]please see this blog post.

   we   ll be also using [35]imutils, my personal library of opencv
   convenience functions. if you do not already have imutils  installed on
   your system, you can install it via pip :
   a simple neural network with python and keras
   shell

   $ pip install imutils_______________________________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   $ pip install imutils

   next, let   s define a method to accept and image and describe it. in
   [36]previous tutorials, we   ve extracted color histograms from images
   and used these distributions to characterize the contents of an image.

   this time, let   s use the raw pixel intensities instead. to accomplish
   this, we define the image_to_feature_vector  function which accepts an
   input image  and resizes it to a fixed size , ignoring the aspect
   ratio:
   a simple neural network with python and keras
   python

   def image_to_feature_vector(image, size=(32, 32)):__________
   	# resize the image to a fixed size, then flatten the image 
   	# a list of raw pixel intensities__________________________
   	return cv2.resize(image, size).flatten()___________________
   15
   16
   17
   18
   def image_to_feature_vector(image, size=(32, 32)):
   # resize the image to a fixed size, then flatten the image into
   # a list of raw pixel intensities
   return cv2.resize(image, size).flatten()

   we resize our image  to fixed spatial dimensions to ensure each and
   every image in the input dataset has the same    feature vector    size.
   this is a requirement when utilizing our neural network     each image
   must be represented by a vector.

   in this case, we resize our image to 32 x 32 pixels and then flatten
   the 32 x 32 x 3 image (where we have three channels, one for each red,
   green, and blue channel, respectively) into a 3,072-d feature vector.

   the next code block handles parsing our command line arguments and
   taking care of a few initializations:
   a simple neural network with python and keras
   python

   # construct the argument parse and parse the arguments______
   ap = argparse.argumentparser()______________________________
   ap.add_argument("-d", "--dataset", required=true,___________
   	help="path to input dataset")______________________________
   ap.add_argument("-m", "--model", required=true,_____________
   	help="path to output model file")__________________________
   args = vars(ap.parse_args())________________________________
   ____________________________________________________________
   # grab the list of images that we'll be describing__________
   print("[info] describing images...")________________________
   imagepaths = list(paths.list_images(args["dataset"]))_______
   ____________________________________________________________
   # initialize the data matrix and labels list________________
   data = []___________________________________________________
   labels = []_________________________________________________
   20
   21
   22
   23
   24
   25
   26
   27
   28
   29
   30
   31
   32
   33
   34
   # construct the argument parse and parse the arguments
   ap = argparse.argumentparser()
   ap.add_argument("-d", "--dataset", required=true,
   help="path to input dataset")
   ap.add_argument("-m", "--model", required=true,
   help="path to output model file")
   args = vars(ap.parse_args())

   # grab the list of images that we'll be describing
   print("[info] describing images...")
   imagepaths = list(paths.list_images(args["dataset"]))

   # initialize the data matrix and labels list
   data = []
   labels = []

   we only need a single switch here, --dataset , which is the path to the
   input directory containing the kaggle dogs vs. cats images. this
   dataset can be downloaded from the official [37]kaggle dogs vs. cats
   competition page.

   line 30 grabs the paths to our --dataset  of images residing on disk.
   we then initialize the data  and labels  lists, respectively, on lines
   33 and 34.

   now that we have our imagepaths , we can loop over them individually,
   load them from disk, convert the images to feature vectors, and the
   update the data  and labels  lists:
   a simple neural network with python and keras
   python

   # loop over the input images________________________________
   for (i, imagepath) in enumerate(imagepaths):________________
   	# load the image and extract the class label (assuming that
   	# path as the format: /path/to/dataset/{class}.{image_num}.
   	image = cv2.imread(imagepath)______________________________
   	label = imagepath.split(os.path.sep)[-1].split(".")[0]_____
   ____________________________________________________________
   	# construct a feature vector raw pixel intensities, then up
   	# the data matrix and labels list__________________________
   	features = image_to_feature_vector(image)__________________
   	data.append(features)______________________________________
   	labels.append(label)_______________________________________
   ____________________________________________________________
   	# show an update every 1,000 images________________________
   	if i > 0 and i % 1000 == 0:________________________________
   		print("[info] processed {}/{}".format(i, len(imagepaths)))
   36
   37
   38
   39
   40
   41
   42
   43
   44
   45
   46
   47
   48
   49
   50
   51
   # loop over the input images
   for (i, imagepath) in enumerate(imagepaths):
   # load the image and extract the class label (assuming that our
   # path as the format: /path/to/dataset/{class}.{image_num}.jpg
   image = cv2.imread(imagepath)
   label = imagepath.split(os.path.sep)[-1].split(".")[0]

   # construct a feature vector raw pixel intensities, then update
   # the data matrix and labels list
   features = image_to_feature_vector(image)
   data.append(features)
   labels.append(label)

   # show an update every 1,000 images
   if i > 0 and i % 1000 == 0:
   print("[info] processed {}/{}".format(i, len(imagepaths)))

   the data  list now contains the flattened 32 x 32 x 3 = 3,072-d
   representations of every image in our dataset. however, before we can
   train our neural network, we first need to perform a bit of
   preprocessing:
   a simple neural network with python and keras
   python

   # encode the labels, converting them from strings to integer
   le = labelencoder()_________________________________________
   labels = le.fit_transform(labels)___________________________
   ____________________________________________________________
   # scale the input image pixels to the range [0, 1], then tra
   # the labels into vectors in the range [0, num_classes] -- t
   # generates a vector for each label where the index of the l
   # is set to `1` and all other entries to `0`________________
   data = np.array(data) / 255.0_______________________________
   labels = np_utils.to_categorical(labels, 2)_________________
   ____________________________________________________________
   # partition the data into training and testing splits, using
   # of the data for training and the remaining 25% for testing
   print("[info] constructing training/testing split...")______
   (traindata, testdata, trainlabels, testlabels) = train_test_
   	data, labels, test_size=0.25, random_state=42)_____________
   53
   54
   55
   56
   57
   58
   59
   60
   61
   62
   63
   64
   65
   66
   67
   68
   # encode the labels, converting them from strings to integers
   le = labelencoder()
   labels = le.fit_transform(labels)

   # scale the input image pixels to the range [0, 1], then transform
   # the labels into vectors in the range [0, num_classes] -- this
   # generates a vector for each label where the index of the label
   # is set to `1` and all other entries to `0`
   data = np.array(data) / 255.0
   labels = np_utils.to_categorical(labels, 2)

   # partition the data into training and testing splits, using 75%
   # of the data for training and the remaining 25% for testing
   print("[info] constructing training/testing split...")
   (traindata, testdata, trainlabels, testlabels) = train_test_split(
   data, labels, test_size=0.25, random_state=42)

   lines 61 and 62 handle scaling the input data to the range [0, 1],
   followed by converting the labels  from a set of integers to a set of
   vectors (a requirement for the cross-id178 id168 we will
   apply when training our neural network).

   we then construct our training and testing splits on lines 67 and 68,
   using 75% of the data for training and the remaining 25% for testing.

   for a more detailed review of the id174 stage, [38]please
   see this blog post.

   we are now ready to define our neural network using keras:
   a simple neural network with python and keras
   python

   # define the architecture of the network____________________
   model = sequential()________________________________________
   model.add(dense(768, input_dim=3072, init="uniform",________
   	activation="relu"))________________________________________
   model.add(dense(384, activation="relu", kernel_initializer="
   model.add(dense(2))_________________________________________
   model.add(activation("softmax"))____________________________
   70
   71
   72
   73
   74
   75
   76
   # define the architecture of the network
   model = sequential()
   model.add(dense(768, input_dim=3072, init="uniform",
   activation="relu"))
   model.add(dense(384, activation="relu", kernel_initializer="uniform"))
   model.add(dense(2))
   model.add(activation("softmax"))

   on lines 71-76 we construct our neural network architecture     a
   3072-768-384-2 feedforward neural network.

   our input layer has 3,072 nodes, one for each of the 32 x 32 x 3 =
   3,072 raw pixel intensities in our flattened input images.

   we then have two hidden layers, each with 768 and 384 nodes,
   respectively. these node counts were determined via a cross-validation
   and [39]hyperparameter tuning experiment performed offline.

   the output layer has 2 nodes     one for each of the    dog    and    cat   
   labels.

   we then apply a softmax  activation function on top of the network    
   this will give us our actual output class label probabilities.

   the next step is to train our model using [40]stochastic gradient
   descent (sgd):
   a simple neural network with python and keras
   python

   # train the model using sgd_________________________________
   print("[info] compiling model...")__________________________
   sgd = sgd(lr=0.01)__________________________________________
   model.compile(loss="binary_crossid178", optimizer=sgd,____
   	metrics=["accuracy"])______________________________________
   model.fit(traindata, trainlabels, epochs=50, batch_size=128,
   	verbose=1)_________________________________________________
   78
   79
   80
   81
   82
   83
   84
   # train the model using sgd
   print("[info] compiling model...")
   sgd = sgd(lr=0.01)
   model.compile(loss="binary_crossid178", optimizer=sgd,
   metrics=["accuracy"])
   model.fit(traindata, trainlabels, epochs=50, batch_size=128,
   verbose=1)

   to train our model, we   ll set the learning rate parameter of sgd
   to 0.01. we   ll use the binary_crossid178  id168 for the
   network as well.

   in most cases, you   ll want to use just crossid178 , but since there
   are only two class labels, we use binary_crossid178 . for > 2 class
   labels, make sure you use crossid178 .

   the network is then allowed to train for a total of 50 epochs, meaning
   that the model    sees    each individual training example 50 times in an
   attempt to learn an underlying pattern.

   the final code block evaluates our keras neural network on the testing
   data:
   a simple neural network with python and keras
   python

   # show the accuracy on the testing set______________________
   print("[info] evaluating on testing set...")________________
   (loss, accuracy) = model.evaluate(testdata, testlabels,_____
   	batch_size=128, verbose=1)_________________________________
   print("[info] loss={:.4f}, accuracy: {:.4f}%".format(loss,__
   	accuracy * 100))___________________________________________
   ____________________________________________________________
   # dump the network architecture and weights to file_________
   print("[info] dumping architecture and weights to file...")_
   model.save(args["model"])___________________________________
   86
   87
   88
   89
   90
   91
   92
   93
   94
   95
   # show the accuracy on the testing set
   print("[info] evaluating on testing set...")
   (loss, accuracy) = model.evaluate(testdata, testlabels,
   batch_size=128, verbose=1)
   print("[info] loss={:.4f}, accuracy: {:.4f}%".format(loss,
   accuracy * 100))

   # dump the network architecture and weights to file
   print("[info] dumping architecture and weights to file...")
   model.save(args["model"])

classifying images using neural networks with python and keras

   to execute our simple_neural_network.py  script, make sure you have
   already downloaded the source code and data for this post by using
   the    downloads    section at the bottom of this tutorial.

   the following command can be used to train our neural network using
   python and keras:
   a simple neural network with python and keras
   shell

   $ python simple_neural_network.py --dataset kaggle_dogs_vs_c
       --model output/simple_neural_network.hdf5_______________
   ____________________________________________________________
   ____________________________________________________________
   1
   2
   $ python simple_neural_network.py --dataset kaggle_dogs_vs_cats \
       --model output/simple_neural_network.hdf5

   the output of our script can be seen in the screenshot below:
   figure 2: training a simple neural network using the keras deep
   learning library and the python programming language.

   figure 3: training a simple neural network using the keras deep
   learning library and the python programming language.

   on my titan x gpu, the entire process of feature extraction, training
   the neural network, and evaluation took a total of 1m 15s with each
   epoch taking less than 0 seconds to complete.

   at the end of the 50th epoch, we see that we are getting ~76% accuracy
   on the training data and 67% accuracy on the testing data.

   this ~9% difference in accuracy implies that our network is overfitting
   a bit; however, it is very common to see ~10% gaps in training versus
   testing accuracy, especially if you have limited training data.

   you should start to become very worried regarding overfitting when your
   training accuracy reaches 90%+ and your testing accuracy is
   substantially lower than that.

   in either case, this 67.376% is the highest accuracy we   ve obtained
   thus far in this series of tutorials. as we   ll find out later on, we
   can easily obtain > 95% accuracy by utilizing convolutional neural
   networks.

classifying images using our keras model

   we   re going to build a test script to verify our results visually.

   so let   s go ahead and create a new file named test_network.py  in your
   favorite editor and enter the following code:
   a simple neural network with python and keras
   python

   # import the necessary packages_____________________________
   from __future__ import print_function_______________________
   from keras.models import load_model_________________________
   from imutils import paths___________________________________
   import numpy as np__________________________________________
   import argparse_____________________________________________
   import imutils______________________________________________
   import cv2__________________________________________________
   ____________________________________________________________
   def image_to_feature_vector(image, size=(32, 32)):__________
   	# resize the image to a fixed size, then flatten the image 
   	# a list of raw pixel intensities__________________________
   	return cv2.resize(image, size).flatten()___________________
   ____________________________________________________________
   # construct the argument parse and parse the arguments______
   ap = argparse.argumentparser()______________________________
   ap.add_argument("-m", "--model", required=true,_____________
   	help="path to output model file")__________________________
   ap.add_argument("-t", "--test-images", required=true,_______
   	help="path to the directory of testing images")____________
   ap.add_argument("-b", "--batch-size", type=int, default=32,_
   	help="size of mini-batches passed to network")_____________
   args = vars(ap.parse_args())________________________________
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
   20
   21
   22
   23
   # import the necessary packages
   from __future__ import print_function
   from keras.models import load_model
   from imutils import paths
   import numpy as np
   import argparse
   import imutils
   import cv2

   def image_to_feature_vector(image, size=(32, 32)):
   # resize the image to a fixed size, then flatten the image into
   # a list of raw pixel intensities
   return cv2.resize(image, size).flatten()

   # construct the argument parse and parse the arguments
   ap = argparse.argumentparser()
   ap.add_argument("-m", "--model", required=true,
   help="path to output model file")
   ap.add_argument("-t", "--test-images", required=true,
   help="path to the directory of testing images")
   ap.add_argument("-b", "--batch-size", type=int, default=32,
   help="size of mini-batches passed to network")
   args = vars(ap.parse_args())

   on lines 2-8, we load necessary packages. these should be familiar as
   we used each of them above, with the exception of load_model  from
   keras.models . the load_model  module simply loads the serialized keras
   model from disk so that we can send images through the network and
   acquire predictions.

   the image_to_feature_vector  function is identical and we include it in
   the test script because we want to preprocess our images in the same
   way as training.

   our script has three command line arguments which can be provided at
   runtime (lines 16-23):
     * --model : the path to our serialized model file.
     * --test-images : the path to the directory of test images.
     * --batch-size : optionally, the size of mini-batches can be
       specified with the default being 32 .

   you do not need to modify lines 16-23     if you are unfamiliar with
   argparse  and command line arguments, just give [41]this blog post a
   read.

   moving on, let   s define our classes and load our serialized model from
   disk:
   a simple neural network with python and keras
   python

   # initialize the class labels for the kaggle dogs vs cats da
   classes = ["cat", "dog"]____________________________________
   ____________________________________________________________
   # load the network__________________________________________
   print("[info] loading network architecture and weights...")_
   model = load_model(args["model"])___________________________
   print("[info] testing on images in {}".format(args["test_ima
   25
   26
   27
   28
   29
   30
   31
   # initialize the class labels for the kaggle dogs vs cats dataset
   classes = ["cat", "dog"]

   # load the network
   print("[info] loading network architecture and weights...")
   model = load_model(args["model"])
   print("[info] testing on images in {}".format(args["test_images"]))

   line 26 creates a list of the classes we   re working with today     a cat
   and a dog.

   from there we load the model into memory so that we can easily classify
   images as needed (line 30).

   let   s begin looping over the test images and predicting whether each
   image is a feline or canine:
   a simple neural network with python and keras
   python

   # loop over our testing images______________________________
   for imagepath in paths.list_images(args["test_images"]):____
   	# load the image, resize it to a fixed 32 x 32 pixels (igno
   	# aspect ratio), and then extract features from it_________
   	print("[info] classifying {}".format(______________________
   		imagepath[imagepath.rfind("/") + 1:]))____________________
   	image = cv2.imread(imagepath)______________________________
   	features = image_to_feature_vector(image) / 255.0__________
   	features = np.array([features])____________________________
   33
   34
   35
   36
   37
   38
   39
   40
   41
   # loop over our testing images
   for imagepath in paths.list_images(args["test_images"]):
   # load the image, resize it to a fixed 32 x 32 pixels (ignoring
   # aspect ratio), and then extract features from it
   print("[info] classifying {}".format(
   imagepath[imagepath.rfind("/") + 1:]))
   image = cv2.imread(imagepath)
   features = image_to_feature_vector(image) / 255.0
   features = np.array([features])

   we begin looping over all images in the testing directory on line 34.

   first, we load the image and preprocess it (lines 39-41).

   from there, let   s send the image through the neural network:
   a simple neural network with python and keras
   python

   	# classify the image using our extracted features and pre-t
   	# neural network___________________________________________
   	probs = model.predict(features)[0]_________________________
   	prediction = probs.argmax(axis=0)__________________________
   ____________________________________________________________
   	# draw the class and id203 on the test image and disp
   	# to our screen____________________________________________
   	label = "{}: {:.2f}%".format(classes[prediction],__________
   		probs[prediction] * 100)__________________________________
   	cv2.puttext(image, label, (10, 35), cv2.font_hershey_simple
   		1.0, (0, 255, 0), 3)______________________________________
   	cv2.imshow("image", image)_________________________________
   	cv2.waitkey(0)_____________________________________________
   43
   44
   45
   46
   47
   48
   49
   50
   51
   52
   53
   54
   55
   # classify the image using our extracted features and pre-trained
   # neural network
   probs = model.predict(features)[0]
   prediction = probs.argmax(axis=0)

   # draw the class and id203 on the test image and display it
   # to our screen
   label = "{}: {:.2f}%".format(classes[prediction],
   probs[prediction] * 100)
   cv2.puttext(image, label, (10, 35), cv2.font_hershey_simplex,
   1.0, (0, 255, 0), 3)
   cv2.imshow("image", image)
   cv2.waitkey(0)

   a prediction is made on lines 45 and 46.

   the remaining lines build a display label containing the class name and
   id203 score and overlay it on the image (lines 50-54). each
   iteration of the loop, we wait for a keypress so that we can check
   images one at a time (line 55).

testing our neural network with keras

   now that we   re finished implementing our test script, let   s run it and
   see our hard work in action. to grab the code and images, be sure to
   scroll down to the    downloads    section of this blog post.

   when you have the files extracted, to run our test_network.py  we
   simply execute it in the terminal and provide two command line
   arguments:
   a simple neural network with python and keras
   shell

   $ python test_network.py --model output/simple_neural_networ
   	--test-images test_images__________________________________
   using tensorflow backend.___________________________________
   [info] loading network architecture and weights...__________
   [info] testing on images in test_images_____________________
   [info] classifying 48.jpg___________________________________
   [info] classifying 49.jpg___________________________________
   [info] classifying 8.jpg____________________________________
   [info] classifying 9.jpg____________________________________
   [info] classifying 14.jpg___________________________________
   [info] classifying 28.jpg___________________________________
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   $ python test_network.py --model output/simple_neural_network.hdf5 \
   --test-images test_images
   using tensorflow backend.
   [info] loading network architecture and weights...
   [info] testing on images in test_images
   [info] classifying 48.jpg
   [info] classifying 49.jpg
   [info] classifying 8.jpg
   [info] classifying 9.jpg
   [info] classifying 14.jpg
   [info] classifying 28.jpg

   did you see the following error message?
   a simple neural network with python and keras
   shell

   using tensorflow backend.___________________________________
   usage: test_network.py [-h] -m model -t test_images [-b batc
   test_network.py: error: the following arguments are required
   ____________________________________________________________
   1
   2
   3
   using tensorflow backend.
   usage: test_network.py [-h] -m model -t test_images [-b batch_size]
   test_network.py: error: the following arguments are required:
   -m/--model, -t/--test-images

   this message describes how to use the script with command line
   arguments.

   are you unfamiliar with command line arguments and argparse? no worries
       just give [42]this blog post on command line arguments a quick read.

   if everything worked correctly, after the model loads and runs the
   first id136, we   re presented with a picture of a dog:

   figure 4: a dog from the kaggle dogs vs. cats competition test dataset
   is correctly classified using our simple neural network with keras
   script.

   the network classified the dog with 71% prediction accuracy. so far so
   good!

   when you   re ready, press a key to cycle to the next image (the window
   must be active).

   figure 5: even a simple neural network with keras can achieve
   relatively good accuracy and distinguish between dogs and cats.

   our cute and cuddly cat with white chest hair passed the test with 77%
   accuracy!

   onto lois, a dog:

   figure 6: lois likes the snow. he also likes when a simple deep
   learning neural network correctly classifies him as a dog!

   lois is definitely a dog     our model is 97% sure of it.

   let   s try another cat:

   figure 7: deep learning classification allows us to do just that     to
   classify the image contents. using the kaggle dogs vs. cats dataset, we
   have built an elementary model to classify dog and cat images.

   yahoo! this ball of fur is correctly predicted to be a cat.

   let   s try a yet another dog:

   figure 8: this is an example of a misclassification. our elementary
   neural network built with keras has room for improvement as it is only
   67% accurate. to learn how to improve the model, check out [43]dl4cv.

   doh! our network thinks this dog is a cat with 61% confidence. clearly
   this is a misclassification.

   how could that be? well, our network is only 67% accurate as we
   demonstrated above. it will be common to see a number of
   misclassifications.

   our last image is of one of the most adorable kittens in the
   test_images folder. i   ve named this kitten simba. but is simba a cat
   according to our model?

   figure 9: our simple neural network built with keras (tensorflow
   backend), misclassifies a number of images such as of this cat (it
   predicted the image contains a dog). deep learning requires
   experimentation and iterative development to improve accuracy.

   alas, our network has failed us, but only by 3.29 percent. i was almost
   sure that our network would classify simba correctly, but i was wrong.

   not to worry     there are improvements we can make to rank on
   the top-25 leaderboard of the kaggle dogs vs. cats challenge.

   in my new book, [44]deep learning for id161 with python, i
   demonstrate how to do just that. in fact, i   ll go so far to say that
   you   ll probably achieve a top-5 position with what you   ll learn in the
   book.

   to pick up your copy, just use this link: [45]deep learning for
   id161 with python.

summary

   in today   s blog post, i demonstrated how to train a simple neural
   network using python and keras.

   we then applied our neural network to the kaggle dogs vs. cats dataset
   and obtained 67.376% accuracy utilizing only the raw pixel intensities
   of the images.

   starting next week, i   ll begin discussing optimization methods such as
   id119 and stochastic id119 (sgd). i   ll also
   include a tutorial on id26 to help you understand the
   inner-workings of this important algorithm.

   before you go, be sure to enter your email address in the form below to
   be notified when future blog posts are published     you won   t want to
   miss them!

downloads:

   if you would like to download the code and images used in this post,
   please enter your email address in the form below. not only will you
   get a .zip of the code, i   ll also send you a free 17-page resource
   guide on id161, opencv, and deep learning. inside you'll find
   my hand-picked tutorials, books, courses, and libraries to help you
   master cv and dl! sound good? if so, enter your email address and i   ll
   send you the code immediately!

   email address: ____________________

   download the code!

resource guide (it   s totally free).

   get your free 17-page id161 and deep learning resource guide
   pdf
   enter your email address below to get my free 17-page id161,
   opencv, and deep learning resource guide pdf. inside you'll find my
   hand-picked tutorials, books, courses, and python libraries to help you
   master id161 and deep learning!
   ____________________
   download the guide!

   [46]classification, [47]deep learning, [48]feedforward, [49]keras,
   [50]machine learning, [51]neural nets
   [52]understanding id173 for image classification and machine
   learning
   [53]bubble sheet multiple choice scanner and test grader using omr,
   python and opencv

101 responses to a simple neural network with python and keras

    1. stan september 26, 2016 at 9:48 pm [54]#
       that is awesome. thanks. please keep posting that stuff.
       [55]reply
          + adrian rosebrock september 27, 2016 at 6:36 am [56]#
            thanks stan! i   ll certainly be doing more neural network and
            deep learning tutorials in the future.
            [57]reply
    2. bogomil september 27, 2016 at 4:01 pm [58]#
       hi adrian,
       i used the default engine for keras     tensorflow and got the
       following:
       epoch 50/50
       18750/18750 [==============================]     12s     loss: 0.4859    
       acc: 0.7707
       [info] evaluating on testing set   
       6250/6250 [==============================]     1s
       [info] loss=0.6020, accuracy: 68.0960%
       is this difference normal ?
       [59]reply
          + adrian rosebrock september 28, 2016 at 10:42 am [60]#
            absolutely. keep in mind that neural networks are stochastic
            algorithms meaning there is a level of randomness involved
            with them (specifically the weight initializations). it   s
            totally normal to see a bit of variance between training runs.
            [61]reply
    3. gilad september 28, 2016 at 1:06 am [62]#
       hi,
       wonderful post!
       i have a question     how did you manage to pick your parameters
       (including the nn scheme)?
       no matter what i did (and i did a lot     including adding 2 more nn
       levels, adding dropout, changeling the sgd parameters and all other
       parameters), i didn   t manage to get more than your 67%.
       especially i wonder why adding more levels and increasing the depth
       of each, didn   t contribute to my score (but as expected contribute
       to my run time ;-))
       only when i increased the resolution to 64  64, and the depth of the
       2 nn levels, i manage to get 68%, and i wonder why it is so low.
       [63]reply
          + adrian rosebrock september 28, 2016 at 10:37 am [64]#
            hey gilad     as the blog post states, i determined the
            parameters to the network using [65]hyperparameter tuning.
            regarding the accuracy, keep in mind that this is a simple
            feedforward neural network. 68% accuracy is actually quite
            good for only considering the raw pixel intensities. and
            again, as the blog post states, we require a more powerful
            network architecture (i.e., convolutional neural networks) to
            obtain higher accuracy. i   ll be covering how to apply id98s to
            the dogs vs. cats dataset in a future blog post. in the
            meantime, i would suggest reading [66]this blog post on mnist
            + lenet to help you get started with id98s.
            [67]reply
    4. max kostka september 28, 2016 at 2:10 pm [68]#
       yes, absolutely awesome adrian, i am already totally eager for a
       simple convolutional neural network. i love your blog      been
       following it for a year now. keep up the great work.
       btw, i did this simple neural network on a raspberry pi 2 and fyi
       it took almost 5 hours     
       [69]reply
          + adrian rosebrock september 30, 2016 at 6:51 am [70]#
            thanks for the kind words max, i   m happy the tutorial helped
            you (and that you   ve been a long time reader)!
            if you would like a simple id98, [71]take a look at this blog
            post on lenet to help you get started. future posts will
            discuss each of the layer types in detail, etc.
            [72]reply
               o max kostka september 30, 2016 at 1:29 pm [73]#
                 i did that right away, another awesome post:d and fyi,
                 the training there on a raspi 2 took almost about 19
                 hours.
                 [74]reply
    5. marios september 29, 2016 at 11:09 pm [75]#
       you could also do an implementation of your nn using tensorflow!
       [76]reply
          + adrian rosebrock september 30, 2016 at 6:40 am [77]#
            keras can use either theano or tensorflow as a backend     it   s
            really your choice. i personally like using keras because it
            adds a layer of abstraction over what would otherwise be a lot
            more code to accomplish the same task. in future blog posts
            i   m planning on continuing using keras, but i   ll also consider
            the    nitty-gritty    with tensorflow as well!
            [78]reply
    6. roberto october 1, 2016 at 7:52 am [79]#
       hello adrian, awesome work!
       i run the code, but i would like to use it to classify some images,
       but i dont want to run it every time. how can i save the model and
       use it to classify?
       ps: i   ll be waiting for next post to improve the accuracy!
       regards!!!
       [80]reply
          + adrian rosebrock october 2, 2016 at 9:02 am [81]#
            once your model is saved you can actually serialize it to disk
            using model.save and then load it again via load_model. take a
            look at the [82]keras documentation for more information and a
            code example.
            [83]reply
    7. atti november 29, 2016 at 10:53 am [84]#
       great article thanks for all the insights
       [85]reply
    8. alberto franzaroli december 1, 2016 at 6:06 am [86]#
       now there is also a opensource library the microsoft cognitive
       toolkit
       would you like to try it and compare with keras ?
       [87]reply
          + adrian rosebrock december 1, 2016 at 7:20 am [88]#
            i haven   t used the microsoft cognitive toolkit before, but
            i   ll look into it. i don   t normally use microsoft products.
            [89]reply
    9. dharma kc december 11, 2016 at 9:06 am [90]#
       please can you provide the link to the tutorial with convolutional
       neural network to solve this problem with 95% accuracy. thank you.
       [91]reply
          + adrian rosebrock december 11, 2016 at 10:46 am [92]#
            i will be covering how to obtain 95%+ accuracy in the dogs vs.
            cats challenge in my upcoming deep learning book. stay tuned!
            [93]reply
   10. uday december 12, 2016 at 7:25 am [94]#
       how much it will take to train without a gpu
       and how we can get a gpu for trail.
       [95]reply
   11. tajj kasem december 14, 2016 at 4:57 pm [96]#
       hi adrian
       how i can use model.predict() after training my neural network .
       i have this error :
       exception: error when checking : expected dense_input_1 to have 2
       dimensions, but got array with shape (303, 400, 3)
       how i fixed it ?
       [97]reply
          + adrian rosebrock december 18, 2016 at 9:10 am [98]#
            you need to call image_to_feature_vector on your image before
            passing it into model.predict.
            [99]reply
   12. azhng december 26, 2016 at 10:23 pm [100]#
       thank you so much for this awesome tutorial. however, when i run
       the code on my laptop, the process with terminated with exit code
       of 137.
       any idea what does that mean?
       [101]reply
   13. yunhwan kim january 10, 2017 at 11:06 pm [102]#
       hi adrian,
       thank you for awesome tutorial.
       i just wonder how you could use titan x gpu on your (seemingly) osx
       machine. i see    ssh    in the top of the terminal window figure, and
       i guess that you access other (probably linux) machine with gpu
       from your osx machine via ssh.
       then, do you have any plan to post about that process? it would be
       much helpful if i (and other readers) could use gpu in other
       machine from osx machine.
       thank you again.
       yunhwan
       [103]reply
          + adrian rosebrock january 11, 2017 at 10:35 am [104]#
            you are correct, yunhwan     i am ssh   ing into my ubuntu gpu box
            and then running any scripts over the ssh session. does that
            help clarify your question? if you are looking to learn more
            about ssh and how to ssh into machines i would suggest
            [105]reading up on ssh basics.
            [106]reply
   14. [107]vincent foucault january 15, 2017 at 1:48 pm [108]#
       hi adrien,
       didn   t you forget, in picture1, connection from first node in
       layer2 to second in layer3 ?
       i   m impatient to see your next books.
       cu.
       vincent
       [109]reply
   15. foobar march 10, 2017 at 11:07 pm [110]#
       hi i am training an an arm based device 4 cores 1gb ram but i am
       getting a memory error when running the script it gets up to
       processing 24,000 images and crashes on a memory error but there is
       still 100mb of free space what am i doing wrong and how do i fix
       this?
       [111]reply
          + adrian rosebrock march 13, 2017 at 12:20 pm [112]#
            it   s hard to say without knowing which device you are using. i
            would confirm that the script will run on your desktop/laptop
            before moving on to other devices.
            [113]reply
               o foobar march 17, 2017 at 7:21 pm [114]#
                 it works on my laptop but i have been trying to run it on
                 an odroid c1. my odroid is running a headless debian
                 jessie for the odroid.
                 [115]reply
                    # adrian rosebrock march 21, 2017 at 7:40 am [116]#
                      i haven   t used odroid before, so i   m not sure about
                      the specifics. debian jessie seems like it would
                      work just fine; however, i don   t have any experience
                      with the odroid so i   m not sure what the exact
                      problem would be. again, we typically don   t train
                      networks on such small devices     only deploy them if
                      memory allows.
                      [117]reply
   16. dl march 25, 2017 at 11:51 am [118]#
       getting this error while using keras 1.0.7 in anaconda
       python

        file "simple_neural_network.py", line 64, in ______________
           labels = np_utils.to_categorical(labels, 2)_____________
         file "c:\programdata\anaconda3\lib\site-packages\keras\uti
           y[i, y[i]] = 1._________________________________________
       indexerror: index 2 is out of bounds for axis 1 with size 2_

   1

   2

   3

   4

   5

   file "simple_neural_network.py", line 64, in

       labels = np_utils.to_categorical(labels, 2)

     file
   "c:\programdata\anaconda3\lib\site-packages\keras\utils\np_utils.py",
   line 16, in to_categorical

       y[i, y[i]] = 1.

   indexerror: index 2 is out of bounds for axis 1 with size 2
       any idea?
       thanks!
       [119]reply
          + adrian rosebrock march 28, 2017 at 1:12 pm [120]#
            your class labels are not getting encoding properly. 99% of
            the time this is due to invalid paths to your training images.
            double-check the path to the training images and ensure it   s
            correct. also make sure you are not also using the paths to
            the kaggle testing data as these filenames do not have    dog   
            or    cat    in them.
            [121]reply
   17. naitik march 26, 2017 at 6:59 am [122]#
       it   s really informative article you posted , but just curious that
       instead of having accuracy can i have detailed result of each image
       classified as wrong or right ?
       [123]reply
          + adrian rosebrock march 28, 2017 at 1:07 pm [124]#
            can you clarify what you mean by    detailed result of each
            image classified as wrong or right   ? i   m not sure what you
            mean.
            [125]reply
   18. werner april 19, 2017 at 1:31 pm [126]#
       hi adrian,
       nice post really love the work! i just have a question regarding
       the feedforward idea. from my understanding, feedforward network
       uses delta rule to learn, and does not backpropagate. how is this
       specified using keras? if you were to write this feedforward keras
       code using id26, how would it be different?
       thanks!
       [127]reply
          + adrian rosebrock april 21, 2017 at 11:03 am [128]#
            i think you might be confusing the standard id88
            algorithm with multi-layer feedforward networks. the
            id88 uses the delta rule to learn while multi-layer
            feedforward networks use id26. if you   re interested
            in learning more about these algorithms, how to train neural
            networks, and even build convolutional neural networks that
            can understand the contents of an image, be sure to take a
            look at [129]deep learning for id161 with python.
            [130]reply
   19. maxtri april 20, 2017 at 4:53 am [131]#
       thanks your work ,very good
       [132]reply
   20. chris may 11, 2017 at 2:05 am [133]#
       simple question   got it to work but lets say i want to load in the
       test data (the pictures with just numbers) any trick to doing that?
       [134]reply
          + adrian rosebrock may 11, 2017 at 8:44 am [135]#
            hi chris     can you elaborate more on what you mean by    the
            pictures with just numbers   ? i   m not sure i understand.
            [136]reply
               o chris may 11, 2017 at 11:58 am [137]#
                 sure      so in the data set of dogs and cats there is the
                 training data that is labeled either a cat or a dog and
                 its corresponding image number. using this data we train
                 and test our model (correct me if i   m wrong anywhere).
                 once this is done, model is trained and tested for
                 accuracy, we could use it to predict if an image is a cat
                 or a dog. so at kaggles site there is a set of images
                 that you can download that is a mix of cats and dogs but
                 minus the label of a cat or a dog. its simply just
                 numbered images. so how do we take that data and feed it
                 into our model to predict if those images are cats or
                 dogs. i want to use the model now to do actual
                 predictions. thanks for the prompt response.
                 [138]reply
                    # adrian rosebrock may 15, 2017 at 8:57 am [139]#
                      thank you for the clarification on the question.
                      basically, you would like to know how take a test
                      set and then pass it through the network to obtain
                      the output classifications.
                      all you need to do is (1) pre-process your input
                      data in the same way as your training data and (2)
                      call the .predict method of the network.
                      i would suggest taking a look at [140]this blog post
                      on lenet where i demonstrate how to classify
                      individual images.
                      [141]reply
   21. richard may 19, 2017 at 7:00 am [142]#
       hi, fantastic posts     i love your blog.
       i have a question, though!
       in    sgd(lr=0.01)   , where does the 0.01 come from? you don   t say how
       you chose that value. was it pie-in-the-sky, or was there some
       secret to your choice?
       thanks!
       [143]reply
          + adrian rosebrock may 21, 2017 at 5:19 am [144]#
            hi richard     typical initial learning rates include 0.1, 0.01,
            and 0.001. it really depends on the specific architecture and
            your dataset, but those are typical starting points.
            [145]reply
   22. will may 25, 2017 at 5:47 pm [146]#
       i am having trouble getting the sgd algorithm to converge. the
       algorithm generally does well and decreases the loss, but sometimes
       (generally after a few epochs) the loss explodes in a few steps (by
       a factor of 10 or so) and does not recover. it does not simply seem
       to be fluctuations from navigating local minima of the objective
       function, it seems that there is something pathological going on.
       which is bizzare because i am using the same code and
       hyperparameters.
       [147]reply
          + adrian rosebrock may 28, 2017 at 1:17 am [148]#
            it sounds like you   re overfitting. are you using the dataset
            in this blog post or your own custom dataset?
            [149]reply
   23. shrinidhi rao june 7, 2017 at 12:30 am [150]#
       hi, thanks for the tutorial. but for some reason i am not able to
       enter the for loop, which is giving me the error
       [151]reply
          + adrian rosebrock june 9, 2017 at 1:53 pm [152]#
            what is the error you are getting, shrinidhi?
            [153]reply
   24. foobar june 20, 2017 at 6:41 am [154]#
       i have managed to use the .predict function with this but i don   t
       know how to understand the data given by .predict
       [155]reply
          + adrian rosebrock june 20, 2017 at 10:43 am [156]#
            the .predict method will return a numpy with shape (n, m)
            where n is the total number of data points passed into
            .predict and m is your total number of class labels. you can
            use the np.argmax function to find the index with the largest
            class label id203 for each row.
            [157]reply
               o foobar june 20, 2017 at 4:49 pm [158]#
                 thanks
                 [159]reply
   25. rolando june 29, 2017 at 2:11 pm [160]#
       hello adrian
       one question, i want to make a neural network probabilistica in
       python, you that you recommend me?
       [161]reply
          + adrian rosebrock june 30, 2017 at 8:08 am [162]#
            do do you mean a neural network that predicts probabilities?
            this implementation can do that as well. just use the
            model.predict_proba function.
            [163]reply
               o rolando june 30, 2017 at 2:50 pm [164]#
                 thanks, i mean a pnn type neural network
                 [165]reply
                    # muhammad wahid january 25, 2019 at 4:43 am [166]#
                      hi rolando,
                      do you have an implementation of pnn in
                      python/keras?
                      [167]reply
   26. niki july 14, 2017 at 2:57 pm [168]#
       nice work! i used your code with the exact same data, but i could
       never reach an accuracy better than 50% on both training and test
       data. i tried to increase the resolution of the images, but it
       didn   t work. no matter what i tried i kept seeing the same pattern
       in the results; at the first few epochs the accuracy improved and
       the loss decreased, but then all of the sudden the loss became 8 or
       9 times large. i thought this might be the result of overfitting,
       so finally i reduced both learning rate as well as the number of
       epochs. the best result that i got was 65.7% on training and 64.59%
       on the test data and this was achieved by setting learning rate =
       .005 and number of epochs = 25. i understand that using raw pixels
       as the input features does not make a strong feature vector, so i
       shouldn   t expect a high accuracy, but i was wondering why using
       exact same data and exact same code could result in such a big
       difference in the final result (in particular, my first results
       that couldn   t get any better than 50%, and this happened when i ran
       the code at least 7 or 8 times before making any changes)?
       [169]reply
          + adrian rosebrock july 18, 2017 at 10:13 am [170]#
            it depends on (1) what version of keras you are using and (2)
            whether you are using theano or tensorflow as your backend.
            both of these can have different impacts on your accuracy.
            however, without physical access to your machine i can   t be
            100% sure what the issue is.
            [171]reply
               o niki july 19, 2017 at 10:15 am [172]#
                 thank you for your response! these are the python, keras,
                 and tensorflow (my keras backend engine) versions that i
                 use:
                 python 2.7.13 (anaconda 1.6.3), tensorflow 1.2.1, keras
                 2.0.5
                 [173]reply
                    # adrian rosebrock july 21, 2017 at 8:57 am [174]#
                      hi niki     thank you for sharing your python and
                      library versions. unfortunately, i   m not sure what
                      the exact issue is here. i wish i could be of more
                      help, but like i said, without physical access to
                      your machine, i can   t diagnose why there are such
                      big discrepancies between the accuracies.
                      [175]reply
   27. diego november 14, 2017 at 7:48 pm [176]#
       hello adrian, i am making a project where i need to classify gender
       using sift descriptor. i used those descriptors in this simple
       neural network but i am getting low accuracy in my train and test.
       what kind of neural network do you recommend me to train sift
       descriptors for gender classification?
       thanks!
       [177]reply
          + adrian rosebrock november 15, 2017 at 12:57 pm [178]#
            hey diego     i don   t recommend keypoint detectors and local
            invariant descriptors for this type of problem. an end-to-end
            convolutional neural network will work much better. in fact, i
            cover age + gender recognition inside my book, [179]deep
            learning for id161 with python. be sure to take a
            look!
            [180]reply
   28. fraol november 16, 2017 at 3:12 am [181]#
       hello adrian, i downloaded the code and run it without a problem on
       the training data. but when i try to run in for the    test   
       directory it gives me this warning after some time
       index 2 is out of bound for axis 1 with size 2
       i am just beginning id161 and machine learning and thank
       you for your work.
       [182]reply
          + adrian rosebrock november 18, 2017 at 8:24 am [183]#
            the reason is because the testing data does not include the
            class label information (i.e., dog or cat) in the filename. to
            evaluate our model we need the class labels and since the
            training data only includes the class label we need to take a
            portion of the training data to compute our accuracy. if you
            wanted to submit your predictions to the kaggle servers for
            evaluation you would need to serialize your model to disk and
            then run it on each of the testing images.
            if you   re interested in studying id161 and deep
            learning in more depth, be sure to take a look at my book,
            [184]deep learning for id161 with python. regardless
            if you   re a beginner or an advanced user you   ll find the book
            extremely helpful.
            [185]reply
   29. katya november 17, 2017 at 4:52 pm [186]#
       thank you very much! it   s very good and clear tutorial
       [187]reply
          + adrian rosebrock november 18, 2017 at 8:08 am [188]#
            thanks katya!     
            [189]reply
   30. maryam december 2, 2017 at 4:01 pm [190]#
       dear adrian ,
       awesome work!
       in fact i am a beginner in learning deep learning for a bout 1
       week. thank you in advanced to publish a tutorial for teaching
       other neural network functions such as recurrent network, auto
       encoder networks ,     .
       waiting for the mentioned tutorial as i know nothing about writing
       code on id56, auto encoders and other nns.
       [191]reply
          + adrian rosebrock december 5, 2017 at 7:50 am [192]#
            hi maryam     i actually have a number of tutorials on neural
            networks and deep learning. take a look at them [193]here. if
            you   re interested in taking a deeper dive into deep learning,
            i would suggest reading through my book, [194]deep learning
            for id161 with python.
            [195]reply
               o maryam december 8, 2017 at 6:22 am [196]#
                 dear adrian,
                 i am not interested in either id161 or image
                 processing.
                 i want to start text processing especially text
                 classification in keras through different kinds of
                 functions such as id56, id98, auto encoders,   
                 would you mind please give us a tutorial about text
                 classification by the mentioned functions???
                 thank you for replying.
                 [197]reply
                    # adrian rosebrock december 8, 2017 at 4:38 pm [198]#
                      i don   t cover text or audio classification here on
                      pyimagesearch.com. take a look at
                      [199]machinelearningmastery. my friend jason runs it
                      and does a good job.
                      [200]reply
   31. adi february 28, 2018 at 5:32 am [201]#
       hello, thank you for the tutorial. but for some reason i am not
       able run the code.can you please help me out.
       thanks.
       errors :
       using tensorflow backend.
       usage: simple_neural_network.py [-h] -d dataset
       simple_neural_network.py: error: the following arguments are
       required: -d/   dataset
       process finished with exit code 2
       [202]reply
          + adrian rosebrock march 2, 2018 at 11:01 am [203]#
            hey adi     make sure you are passing the command line arguments
            to the script when you execute it via the terminal (exactly as
            i do in the post). if you are new to command line arguments,
            that   s okay, but you   ll [204]need to read up on them before
            continuing.
            [205]reply
   32. [206]daniel saadia june 1, 2018 at 9:49 am [207]#
       for my part, it freezes when i want to test on the images from the
       directory test_images. it stays at the image 48.jpg..
       any ideas ?
       [208]reply
          + [209]daniel saadia june 1, 2018 at 9:50 am [210]#
            it is okay ! my bad     
            [211]reply
   33. fedup july 1, 2018 at 5:41 am [212]#
       this must just be a joke because after the 4th attempt at clicking
       the pictures , just gave up
       [213]reply
          + adrian rosebrock july 1, 2018 at 6:37 am [214]#
            i   m not sure what you mean by    4th attempt at clicking the
            pictures   ? could you clarify?
            [215]reply
   34. saka july 1, 2018 at 9:33 pm [216]#
       hello, thank you for the tutorial. but for some reason i am not
       able run the code.can you please help me out.
       thanks.
       errors :
       valueerror: error when checking input: expected dense_1_input to
       have shape (3072,) but got array with shape (1,)
       [217]reply
          + adrian rosebrock july 3, 2018 at 8:32 am [218]#
            double-check your input paths to your dataset directory     i   m
            willing to bet the class labels are not getting parsed
            properly.
            [219]reply
   35. josh july 16, 2018 at 4:42 am [220]#
       hey, a huge fan of the stuff that you do here. quick question
       regarding your output: the output of your network is a .hdf5 file
       and i was wondering what that content of that file actually is an
       how to view? i have been doing some work with id98s and the i was
       wanting to output the pixel information to .csv files. are you
       outputting pixel values? and if so, how to output as .csv?
       [221]reply
          + adrian rosebrock july 17, 2018 at 7:20 am [222]#
            the contents of the file are the weights for each layer in the
            network along with the optimizer state (if you ever wanted to
            restart training). these weights are not    viewable    in the
            classical sense.
            [223]reply
               o josh july 18, 2018 at 4:01 am [224]#
                 oh, that makes perfect sense. i have one more question:
                 at any point do you randomize the data? when the images
                 are split 75% training and 25% testing, is the data also
                 randomized at that point?
                 [225]reply
                    # josh july 18, 2018 at 4:23 am [226]#
                      actually, i just noticed the random_state, but why
                      42? sorry. i over-looked it the first time.
                      [227]reply
                         @ adrian rosebrock july 20, 2018 at 6:48 am
                           [228]#
                           it   s a hitchhikers gide to the galaxy
                           reference. i could include an explanation on
                           how 42 is the answer to life, the universe, and
                           everything, but perhaps that would be an entire
                           blog post      i kid, of course. we manually
                           specify random seed values here so we can
                           reproduce the experiment. if you   re new to
                           working with random values you should read up
                           on pseudorandom number generators.
                    # adrian rosebrock july 20, 2018 at 6:46 am [229]#
                      the data is shuffled/randomized when we create the
                      training and testing splits.
                      [230]reply
   36. harish kumar t august 13, 2018 at 4:34 am [231]#
       i am getting this error how to solve this:
       usage: simple_neural_network.py [-h] -d dataset -m model
       simple_neural_network.py: error: the following arguments are
       required: -m/   model
       [232]reply
          + adrian rosebrock august 15, 2018 at 8:52 am [233]#
            you need to supply the [234]command line arguments to the
            script.
            [235]reply
               o popandpeek september 18, 2018 at 12:12 pm [236]#
                 the confusion is due to the    model flag missing in the
                 terminal entry you posted within the article    
                 1 $ python simple_neural_network.py    dataset
                 kaggle_dogs_vs_cats
                 it   s not complete     just need to add    model model (or the
                 path to the hd5 file in the output folder to overwrite
                 it) to give it a place to dump the model, but the
                 confusion is because readers are not sure if they are
                 missing a file and the walk-through doesn   t explicitly
                 mention this (probably because you   ve provided the model
                 with the download and are expecting everyone to read
                 everything and look through the folder contents, ha).
                 [237]reply
                    # adrian rosebrock september 18, 2018 at 12:24 pm
                      [238]#
                      ah, i see. thanks for catching that      i   ve updated
                      the post.
                      [239]reply
   37. emir august 17, 2018 at 9:24 am [240]#
       thank you for the tutorial,
       im havin    this problem
       data.append(features)
       nameerror: name    data    is not defined
       [241]reply
          + adrian rosebrock august 17, 2018 at 11:08 am [242]#
            make sure you   re using the    downloads    section to download the
            code rather than copying and pasting. you probably forgot to
            initialize the    data    list on line 33. but again, use the
               downloads    section.
            [243]reply
   38. neelesh september 17, 2018 at 6:27 pm [244]#
       hi @adrian, thanks so much for the blogs and all your help for the
       community. i benefitted from the blog post a lot.
       a few things i learnt along the way that may help others.
       i got this error on my macbookpro:
          your cpu supports instructions that this tensorflow binary was not
       compiled to use: sse4.1 sse4.2 avx avx2 fma   
       the article on stack overflow on this error was the most
       informative:
       [245]https://stackoverflow.com/questions/47068709/your-cpu-supports
       -instructions-that-this-tensorflow-binary-was-not-compiled-to-u
       the high-level gist is that the version of tensorflow i installed
       is not compiled with support for the instruction set that supports
       matrix computations for better performance. this is true only if
       you are running on cpu   s. if you use gpu   s on your machine, you can
       ignore this warning.
       2. i used anaconda for my virtual environments and using the
       instructions in the blog for virtual python and simply following
       those along after creating an anaconda environment worked well for
       me. it was great to get practical insight into why private
       environments are good for dl projects with the library
       dependencies.
       3. while simba got corrected classified as a cat, soleil and
       sapphire were categorized as dogs with about 79.48% confidence. the
       cats are so cute, i barely looked at the fact that the algorithm
       mis-classified them     
       4. what would be useful, perhaps as a follow up, is to see if there
       is mis-classficiation in the labeled data that could improve
       performance.
       overall, it was very useful to get my stand alone environment going
       on my macbookpro. look forward to more and the book.
       cheers,
       neelesh
       [246]reply
          + adrian rosebrock september 17, 2018 at 7:23 pm [247]#
            thanks for the detailed writeup, neelesh, i appreciate it. i   d
            also like to reiterate that this is not not an error message.
            it   s just a warning and one that does not have to be resolved.
            tensorflow is just letting you know there are additional
            optimizations that can be leveraged if you so wish.
            [248]reply
   39. asif october 29, 2018 at 9:16 am [249]#
       hi adrian,
       thanks for your these simple tutorials. i tried building your code.
       20 out of 50 test images giving wrong prediction, even after there
       are only 2 classes.
       how can i can get more accuracy. any suggestions are welcome.
       [250]reply
          + adrian rosebrock october 29, 2018 at 1:04 pm [251]#
            hey asif     i would suggest you read through [252]deep learning
            for id161 with python where i provide my tips, best
            practices, and suggestions on how to improve your prediction
            accuracy.
            [253]reply
   40. afiqah december 11, 2018 at 2:58 pm [254]#
       hi adrian ,
       i am a beginner in programming actually . i have problem in run my
       code. can you please help me out.
       i have 4 class label and already change to crossid178 loss
       function but then i get error so i change this code :
       labels = np_utils.to_categorical(labels, 2) to labels =
       np_utils.to_categorical(labels, 4) but i still cant settle this
       problem. would you help me ?
       [255]reply
          + adrian rosebrock december 13, 2018 at 9:16 am [256]#
            what is the exact error that you are receiving? if you can let
            me know i can try to point you in the right direction.
            [257]reply
   41. i. aliah december 12, 2018 at 9:55 am [258]#
       great tutorial sir! but this is feed forward neural network right?
       what i need to do if i want to make the id26 neural
       network with python and keras too?
       [259]reply
          + adrian rosebrock december 13, 2018 at 9:04 am [260]#
            this is a feedforward neural network. it   s also been trained
            via id26. i get the impression that you may be new
            to deep learning and neural networks. that   s totally okay!
            it   s good to start your journey and i   m happy that i can
            accompany you on it as you study neural networks and keras. my
            suggestion would be for you to read through my book, [261]deep
            learning for id161 with python. the book will help
            teach you the fundamentals of keras and deep learning,
            building up to more advanced applications. it will give you a
            very, very strong education and will prepare you for a career
            in dl.
            [262]reply
   42. ozkan february 22, 2019 at 6:16 pm [263]#
       hi dr. rosenbrock,
       i tried to read almost all question as it was hard to make
       control-f without knowing the keyword that i need. everytime i run
       the simple_neural_network.py file it process the images so it takes
       a good deal of time with 25000 training dataset. is there a way to
       avoid this repetition and just run the model on processed data? i
       hope i expressed my answer clearly    thank you
       [264]reply
          + adrian rosebrock february 27, 2019 at 6:26 am [265]#
            is your goal to train the model once and then save it to disk,
            that way you don   t have to retrain it? if so, [266]refer to
            this tutorial.
            [267]reply
   43. hermawan mulyono march 3, 2019 at 3:12 am [268]#
       hi adrian,
       thank you very much for this excellent tutorial. i was able to run
       the code for training. unfortunately, when running
       testing_network.py, i had a problem related to gtk not being able
       to open display. i ran it on a virtual machine (microsoft) with
       ssh. at the moment, i can use xterm and in the xterm window, i can
       run testing_network.py. however, i don   t really like explicitly
       typing xterm every time i want to run my code.
       do you have any better solutions?
       thank you!
       [269]reply
          + adrian rosebrock march 5, 2019 at 8:56 am [270]#
            enable x11 forwarding when ssh   ing into your system:
            $ ssh -x username@your_ip_address
            [271]reply
   44. anicetus march 11, 2019 at 8:36 am [272]#
       this is good adrian. i really enjoy your style of presentation.
       i use windows platform but have a working implementation. however,
       i would like to use ubuntu as your support is for ubuntu. please,
       how can i install ubuntu in my windows laptop?
       thanks very much.
       [273]reply
          + adrian rosebrock march 13, 2019 at 3:38 pm [274]#
            i would suggest you look into either (1) dual booting or (2)
            using a virtual machine. i offer a pre-configured ubuntu vm
            that will run on windows inside my book, [275]deep learning
            for id161 with python.
            [276]reply

leave a reply [277]click here to cancel reply.

   comment
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________

   ______________________________name (required)

   ______________________________email (will not be published) (required)

   ______________________________website

   submit comment

   search...___________ (search)

resource guide (it   s totally free).

   [278]get your free 17-page id161 and deep learning resource
   guide pdf

   get your free 17 page id161, opencv, and deep learning
   resource guide pdf. inside you'll find my hand-picked tutorials, books,
   courses, and libraries to help you master cv and dl.

                           [279]download for free!

deep learning for id161 with python book     out now!

   [280]deep learning with id161 and python kickstarter

   you're interested in deep learning and id161, but you don't
   know how to get started. let me help. [281]my new book will teach you
   all you need to know about deep learning.

   click here to master deep learning

you can detect faces in images & video.

   [282]learn how to detect faces in images and video

   are you interested in detecting faces in images & video? but tired of
   googling for tutorials that never work? then let me help! i guarantee
   that my new book will turn you into a face detection ninja by the end
   of this weekend. [283]click here to give it a shot yourself.

   click here to master face detection

pyimagesearch gurus: now enrolling!

   the pyimagesearch gurus course is now enrolling! inside the course
   you'll learn how to perform:
     * automatic license plate recognition (anpr)
     * deep learning
     * face recognition
     * and much more!

   click the button below to learn more about the course, take a tour, and
   get 10 (free) sample lessons.

   take a tour & get 10 (free) lessons

hello! i   m adrian rosebrock.

   i'm an entrepreneur and ph.d who has launched two successful image
   search engines, [284]id my pill and [285]chic engine. i'm here to share
   my tips, tricks, and hacks i've learned along the way.

learn id161 in a single weekend.

   [286]become an opencv guru

   want to learn id161 & opencv? i can teach you in a single
   weekend. i know. it sounds crazy, but it   s no joke. my new book is your
   guaranteed, quick-start guide to becoming an opencv ninja. so why not
   give it a try? [287]click here to become a id161 ninja.

   click here to become an opencv ninja

subscribe via rss

   [288]pyimagesearch rss feed

   never miss a post! subscribe to the pyimagesearch rss feed and keep up
   to date with my image search engine tutorials, tips, and tricks
     * [289]popular

     * [290]raspbian stretch: install opencv 3 + python on your raspberry
       pi september 4, 2017
     * [291]install guide: raspberry pi 3 + raspbian jessie + opencv 3
       april 18, 2016
     * [292]home surveillance and motion detection with the raspberry pi,
       python, opencv, and dropbox june 1, 2015
     * [293]install opencv and python on your raspberry pi 2 and b+
       february 23, 2015
     * [294]ubuntu 16.04: how to install opencv october 24, 2016
     * [295]real-time id164 with deep learning and opencv
       september 18, 2017
     * [296]basic motion detection and tracking with python and opencv may
       25, 2015

   find me on [297]twitter, [298]facebook, and [299]linkedin.

      2019 pyimagesearch. all rights reserved.

   [tr?id=1465896023527386&ev=pageview&noscript=1]

   [email]
   [email]

references

   visible links
   1. http://feeds.feedburner.com/pyimagesearch
   2. https://www.pyimagesearch.com/comments/feed/
   3. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/feed/
   4. https://www.pyimagesearch.com/wp-json/oembed/1.0/embed?url=https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/
   5. https://www.pyimagesearch.com/wp-json/oembed/1.0/embed?url=https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/&format=xml
   6. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#navigation
   7. https://www.pyimagesearch.com/
   8. https://www.pyimagesearch.com/
   9. https://www.pyimagesearch.com/
  10. https://www.pyimagesearch.com/start-here-learn-computer-vision-opencv/
  11. https://www.pyimagesearch.com/practical-python-opencv/
  12. https://www.pyimagesearch.com/pyimagesearch-gurus/
  13. https://www.pyimagesearch.com/opencv-tutorials-resources-guides/
  14. https://www.pyimagesearch.com/free-opencv-computer-vision-deep-learning-crash-course/
  15. https://www.pyimagesearch.com/about/
  16. https://www.pyimagesearch.com/contact/
  17. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#top
  18. https://www.pyimagesearch.com/author/adrian/
  19. https://www.pyimagesearch.com/category/deep-learning-2/
  20. https://www.pyimagesearch.com/category/machine-learning-2/
  21. https://www.pyimagesearch.com/category/tutorials/
  22. http://cs231n.github.io/neural-networks-1/
  23. https://keras.io/
  24. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/
  25. https://www.kaggle.com/c/dogs-vs-cats/data
  26. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
  27. https://www.kaggle.com/c/dogs-vs-cats/data
  28. https://www.kaggle.com/c/dogs-vs-cats/data
  29. https://www.pyimagesearch.com/2017/09/25/configuring-ubuntu-for-deep-learning-with-python/
  30. https://www.pyimagesearch.com/2017/09/27/setting-up-ubuntu-16-04-cuda-gpu-for-deep-learning-with-python/
  31. https://www.pyimagesearch.com/2017/09/29/macos-for-deep-learning-with-python-tensorflow-and-keras/
  32. https://www.pyimagesearch.com/2017/09/20/pre-configured-amazon-aws-deep-learning-ami-with-python/
  33. https://www.pyimagesearch.com/2018/03/21/my-review-of-microsofts-deep-learning-virtual-machine/
  34. https://www.pyimagesearch.com/2016/07/18/installing-keras-for-deep-learning/
  35. https://github.com/jrosebr1/imutils
  36. https://www.pyimagesearch.com/2016/08/08/id92-classifier-for-image-classification/
  37. https://www.kaggle.com/c/dogs-vs-cats/data
  38. https://www.pyimagesearch.com/2016/08/01/lenet-convolutional-neural-network-in-python/
  39. https://www.pyimagesearch.com/2016/08/15/how-to-tune-hyperparameters-with-python-and-scikit-learn/
  40. https://en.wikipedia.org/wiki/stochastic_gradient_descent
  41. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
  42. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
  43. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
  44. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
  45. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
  46. https://www.pyimagesearch.com/tag/classification/
  47. https://www.pyimagesearch.com/tag/deep-learning/
  48. https://www.pyimagesearch.com/tag/feedforward/
  49. https://www.pyimagesearch.com/tag/keras/
  50. https://www.pyimagesearch.com/tag/machine-learning/
  51. https://www.pyimagesearch.com/tag/neural-nets/
  52. https://www.pyimagesearch.com/2016/09/19/understanding-id173-for-image-classification-and-machine-learning/
  53. https://www.pyimagesearch.com/2016/10/03/bubble-sheet-multiple-choice-scanner-and-test-grader-using-omr-python-and-opencv/
  54. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-406799
  55. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-406799
  56. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-406811
  57. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-406811
  58. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-406845
  59. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-406845
  60. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-406931
  61. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-406931
  62. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-406880
  63. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-406880
  64. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-406926
  65. https://www.pyimagesearch.com/2016/08/15/how-to-tune-hyperparameters-with-python-and-scikit-learn/
  66. https://www.pyimagesearch.com/2016/08/01/lenet-convolutional-neural-network-in-python/
  67. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-406926
  68. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-406950
  69. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-406950
  70. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-407113
  71. https://www.pyimagesearch.com/2016/08/01/lenet-convolutional-neural-network-in-python/
  72. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-407113
  73. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-407144
  74. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-407144
  75. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-407073
  76. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-407073
  77. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-407104
  78. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-407104
  79. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-407223
  80. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-407223
  81. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-407312
  82. https://keras.io/getting-started/faq/
  83. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-407312
  84. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-412164
  85. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-412164
  86. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-412357
  87. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-412357
  88. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-412362
  89. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-412362
  90. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-413196
  91. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-413196
  92. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-413200
  93. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-413200
  94. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-413278
  95. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-413278
  96. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-413532
  97. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-413532
  98. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-413791
  99. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-413791
 100. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-414351
 101. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-414351
 102. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-415587
 103. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-415587
 104. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-415619
 105. http://www.wikihow.com/use-ssh
 106. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-415619
 107. http://elpimous12 on google+/
 108. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-415843
 109. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-415843
 110. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-419940
 111. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-419940
 112. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-420149
 113. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-420149
 114. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-420606
 115. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-420606
 116. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-420904
 117. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-420904
 118. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-421192
 119. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-421192
 120. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-421408
 121. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-421408
 122. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-421217
 123. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-421217
 124. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-421401
 125. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-421401
 126. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-423248
 127. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-423248
 128. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-423379
 129. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 130. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-423379
 131. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-423282
 132. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-423282
 133. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-424954
 134. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-424954
 135. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-424965
 136. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-424965
 137. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-424990
 138. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-424990
 139. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-425228
 140. https://www.pyimagesearch.com/2016/08/01/lenet-convolutional-neural-network-in-python/
 141. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-425228
 142. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-425548
 143. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-425548
 144. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-425709
 145. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-425709
 146. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-426024
 147. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-426024
 148. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-426174
 149. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-426174
 150. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-426870
 151. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-426870
 152. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-427017
 153. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-427017
 154. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-427729
 155. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-427729
 156. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-427741
 157. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-427741
 158. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-427793
 159. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-427793
 160. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-428480
 161. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-428480
 162. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-428570
 163. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-428570
 164. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-428645
 165. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-428645
 166. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-497820
 167. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-497820
 168. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-429881
 169. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-429881
 170. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-430129
 171. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-430129
 172. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-430207
 173. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-430207
 174. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-430373
 175. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-430373
 176. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-440612
 177. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-440612
 178. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-440680
 179. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 180. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-440680
 181. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-440737
 182. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-440737
 183. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-440938
 184. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 185. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-440938
 186. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-440873
 187. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-440873
 188. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-440926
 189. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-440926
 190. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-442211
 191. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-442211
 192. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-442438
 193. https://www.pyimagesearch.com/category/deep-learning-2/
 194. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 195. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-442438
 196. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-442669
 197. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-442669
 198. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-442696
 199. https://machinelearningmastery.com/
 200. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-442696
 201. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-451571
 202. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-451571
 203. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-451788
 204. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
 205. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-451788
 206. http://www.les-sherpas.co/
 207. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-466099
 208. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-466099
 209. http://www.les-sherpas.co/
 210. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-466101
 211. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-466101
 212. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-469622
 213. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-469622
 214. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-469627
 215. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-469627
 216. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-469660
 217. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-469660
 218. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-469853
 219. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-469853
 220. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-471127
 221. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-471127
 222. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-471253
 223. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-471253
 224. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-471352
 225. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-471352
 226. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-471355
 227. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-471355
 228. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-471536
 229. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-471534
 230. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-471534
 231. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-474127
 232. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-474127
 233. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-474399
 234. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
 235. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-474399
 236. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-478877
 237. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-478877
 238. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-478879
 239. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-478879
 240. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-474673
 241. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-474673
 242. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-474679
 243. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-474679
 244. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-478734
 245. https://stackoverflow.com/questions/47068709/your-cpu-supports-instructions-that-this-tensorflow-binary-was-not-compiled-to-u
 246. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-478734
 247. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-478741
 248. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-478741
 249. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-484399
 250. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-484399
 251. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-484427
 252. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 253. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-484427
 254. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-491753
 255. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-491753
 256. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-492079
 257. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-492079
 258. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-491883
 259. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-491883
 260. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-492060
 261. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 262. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-492060
 263. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-502920
 264. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-502920
 265. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-503757
 266. https://www.pyimagesearch.com/2018/12/10/keras-save-and-load-your-deep-learning-models/
 267. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-503757
 268. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-504503
 269. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-504503
 270. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-504993
 271. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-504993
 272. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-506068
 273. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-506068
 274. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-506552
 275. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 276. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#comment-506552
 277. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#respond
 278. https://app.monstercampaigns.com/c/mdoijtrmex7bpm0rp2hn/
 279. https://app.monstercampaigns.com/c/mdoijtrmex7bpm0rp2hn/
 280. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 281. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 282. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-face-detection
 283. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-face-detection
 284. http://www.idmypill.com/
 285. http://www.chicengine.com/
 286. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-single-weekend
 287. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-single-weekend
 288. http://feeds.feedburner.com/pyimagesearch
 289. https://www.pyimagesearch.com/2016/09/26/a-simple-neural-network-with-python-and-keras/#tab-pop
 290. https://www.pyimagesearch.com/2017/09/04/raspbian-stretch-install-opencv-3-python-on-your-raspberry-pi/
 291. https://www.pyimagesearch.com/2016/04/18/install-guide-raspberry-pi-3-raspbian-jessie-opencv-3/
 292. https://www.pyimagesearch.com/2015/06/01/home-surveillance-and-motion-detection-with-the-raspberry-pi-python-and-opencv/
 293. https://www.pyimagesearch.com/2015/02/23/install-opencv-and-python-on-your-raspberry-pi-2-and-b/
 294. https://www.pyimagesearch.com/2016/10/24/ubuntu-16-04-how-to-install-opencv/
 295. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/
 296. https://www.pyimagesearch.com/2015/05/25/basic-motion-detection-and-tracking-with-python-and-opencv/
 297. https://twitter.com/pyimagesearch
 298. https://www.facebook.com/pyimagesearch
 299. http://www.linkedin.com/pub/adrian-rosebrock/2a/873/59b

   hidden links:
 301. https://www.pyimagesearch.com/wp-content/uploads/2016/09/simple_neural_network_kaggle_dogscats.jpg
 302. https://www.pyimagesearch.com/wp-content/uploads/2016/09/simple_neural_network_kaggle_dogscats_result01.jpg
 303. https://www.pyimagesearch.com/wp-content/uploads/2016/09/simple_neural_network_kaggle_dogscats_result02.jpg
 304. https://www.pyimagesearch.com/wp-content/uploads/2016/09/simple_neural_network_kaggle_dogscats_result03.jpg
 305. https://www.pyimagesearch.com/wp-content/uploads/2016/09/simple_neural_network_kaggle_dogscats_result04.jpg
 306. https://www.pyimagesearch.com/wp-content/uploads/2016/09/simple_neural_network_kaggle_dogscats_result05.jpg
 307. https://www.pyimagesearch.com/wp-content/uploads/2016/09/simple_neural_network_kaggle_dogscats_result06.jpg
