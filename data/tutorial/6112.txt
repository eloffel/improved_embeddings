   #[1]pyimagesearch    feed [2]pyimagesearch    comments feed
   [3]pyimagesearch    id163 classification with python and keras
   comments feed [4]alternate [5]alternate

[6]navigation

   [7]pyimagesearch [8]pyimagesearch be awesome at opencv, python, deep
   learning, and id161

   [9]home

main menu

     * [10]start here
     * [11]practical python and opencv
     * [12]pyimagesearch gurus
     * [13]opencv 3 & 4 tutorials
     * [14]free crash course
     * [15]about
     * [16]contact

   [17]return to content

id163 classification with python and keras

   by [18]adrian rosebrock on august 10, 2016 in [19]deep learning,
   [20]machine learning, [21]tutorials

   normally, i only publish blog posts on monday, but i   m so excited about
   this one that it couldn   t wait and i decided to hit the publish button
   early.

   you see, just a few days ago, [22]fran  ois chollet pushed three keras
   models (vgg16, vgg19, and resnet50) online     these
   networks are pre-trained on the id163 dataset, meaning that they can
   recognize 1,000 common object classes out-of-the-box.

   to utilize these models in your own applications, all you need to do
   is:
    1. install keras.
    2. download the weights files for the pre-trained network(s) (which
       we   ll be done automatically for you when you import and instantiate
       the respective network architecture).
    3. apply the pre-trained id163 networks to your own images.

   it   s really that simple.

   so, why is this so exciting? i mean, we   ve had the weights to popular
   pre-trained id163 classification networks for awhile, right?

   the problem is that these weight files are in [23]caffe format     and
   while the caffe library may be the current standard for which many
   researchers use to construct new network architectures, train them, and
   evaluate them, caffe also isn   t the most python-friendly library in the
   world, at least in terms of constructing the network architecture
   itself.

   note: you can do some pretty cool stuff with the caffe-python bindings,
   but i   m mainly focusing on how caffe architectures and the training
   process itself is defined via .prototxt  configuration files rather
   than code that logic can be inserted into.

   there is also the fact that there isn   t an easy or streamlined method
   to convert caffe weights to a keras-compatible model.

   that   s all starting to change now     we can now easily apply vgg16,
   vgg19, and resnet50 using keras and python to our own
   applications without having to worry about the caffe => keras weight
   conversion process.

   in fact, it   s now as simple as these three lines of code to classify an
   image using a convolutional neural network pre-trained on the id163
   dataset with python and keras:
   id163 classification with python and keras
   python

   model = vgg16(weights="id163")___________________________
   preds = model.predict(preprocess_input(image))______________
   print(decode_predictions(preds))____________________________
   ____________________________________________________________
   1
   2
   3
   model = vgg16(weights="id163")
   preds = model.predict(preprocess_input(image))
   print(decode_predictions(preds))

   of course, there are a few other imports and helper functions that need
   to be utilized     but i think you get the point:

   it   s now dead simple to apply id163-level pre-trained networks using
   python and keras.

   to find out how, keep reading.

   looking for the source code to this post?
   [24]jump right to the downloads section.

id163 classification with python and keras

   in the remainder of this tutorial, i   ll explain what the id163
   dataset is, and then provide python and keras code to classify images
   into 1,000 different categories using state-of-the-art network
   architectures.

what is id163?

   within id161 and deep learning communities, you might run
   into a bit of contextual confusion surrounding what id163 is and
   what it isn   t.

   you see, [25]id163 is actually a project aimed at labeling and
   categorizing images into almost 22,000 categories based on a defined
   set of words and phrases. at the time of this writing, there are
   over 14 million images in the id163 project.

   so, how is id163 organized?

   to order such a massive amount of data, id163 actually follows the
   [26]id138 hierarchy. each meaningful word/phrase inside id138 is
   called a    synonym set    or    synset    for short. within the id163
   project, images are organized according to these synsets, with the goal
   being to have 1,000+ images per synset.

id163 large scale recognition challenge (ilsvrc)

   in the context of id161 and deep learning, whenever you hear
   people talking about id163, they are very likely referring to
   the [27]id163 large scale recognition challenge, or simply ilsvrc
   for short.

   the goal of the image classification track in this challenge is to
   train a model that can classify an image into 1,000 separate categories
   using over 100,000 test images     the training dataset itself consists
   of approximately 1.2 million images.

   be sure to keep the context of id163 in mind when you   re reading the
   remainder of this blog post or other tutorials and papers related to
   id163. while in the context of image classification, object
   detection, and scene understanding, we often refer to id163 as
   the classification challenge and the dataset associated with the
   challenge, remember that there is also a more broad project called
   id163 where these images are collected, annotated, and organized.

configuring your system for keras and id163

   to configure your system to use the state-of-the-art vgg16, vgg19, and
   resnet50 networks, make sure you follow my [28]latest tutorial on
   installing keras on ubuntu or [29]on macos. gpu ubuntu users should
   see [30]this tutorial.

   the keras library will use pil/pillow for some helper functions (such
   as loading an image from disk). you can install [31]pillow, the more
   python friendly fork of pil, by using this command:
   id163 classification with python and keras
   shell

   $ pip install pillow________________________________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   $ pip install pillow

   to run the networks pre-trained on the id163 dataset with python,
   you   ll need to make sure you have the latest version of keras
   installed. at the time of this writing, the latest version of keras is
   1.0.6 , the minimum requirement for utilizing the pre-trained models.

   you can check your version of keras by executing the following
   commands:
   id163 classification with python and keras
   shell

   $ python____________________________________________________
   python 3.6.3 (default, oct  4 2017, 06:09:15) ______________
   [gcc 4.2.1 compatible apple llvm 9.0.0 (clang-900.0.37)] on 
   type "help", "copyright", "credits" or "license" for more in
   >>> import keras____________________________________________
   using tensorflow backend.___________________________________
   >>> keras.__version_________________________________________
   '2.2.0'_____________________________________________________
   >>>_________________________________________________________
   1
   2
   3
   4
   5
   6
   7
   8
   9
   $ python
   python 3.6.3 (default, oct  4 2017, 06:09:15)
   [gcc 4.2.1 compatible apple llvm 9.0.0 (clang-900.0.37)] on darwin
   type "help", "copyright", "credits" or "license" for more information.
   >>> import keras
   using tensorflow backend.
   >>> keras.__version__
   '2.2.0'
   >>>

   alternatively, you can use pip freeze  to list the out the packages
   installed in your environment:

   figure 1: listing the set of python packages installed in your
   environment.

   if you are using an earlier version of keras prior to 2.0.0 , uninstall
   it, and then use my [32]previous tutorial to install the latest
   version.


keras and python code for id163 id98s

   we are now ready to write some python code to classify image contents
   utilizing convolutional neural networks (id98s) pre-trained on the
   id163 dataset.

   to start, open up a new file, name it test_id163.py , and insert the
   following code:
   id163 classification with python and keras
   python

   # import the necessary packages_____________________________
   from keras.preprocessing import image as image_utils________
   from keras.applications.id163_utils import decode_predict
   from keras.applications.id163_utils import preprocess_inp
   from keras.applications import vgg16________________________
   import numpy as np__________________________________________
   import argparse_____________________________________________
   import cv2__________________________________________________
   ____________________________________________________________
   # construct the argument parser and parse the arguments_____
   ap = argparse.argumentparser()______________________________
   ap.add_argument("-i", "--image", required=true,_____________
   	help="path to the input image")____________________________
   args = vars(ap.parse_args())________________________________
   ____________________________________________________________
   # load the original image via opencv so we can draw on it an
   # it to our screen later____________________________________
   orig = cv2.imread(args["image"])____________________________
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   # import the necessary packages
   from keras.preprocessing import image as image_utils
   from keras.applications.id163_utils import decode_predictions
   from keras.applications.id163_utils import preprocess_input
   from keras.applications import vgg16
   import numpy as np
   import argparse
   import cv2

   # construct the argument parser and parse the arguments
   ap = argparse.argumentparser()
   ap.add_argument("-i", "--image", required=true,
   help="path to the input image")
   args = vars(ap.parse_args())

   # load the original image via opencv so we can draw on it and display
   # it to our screen later
   orig = cv2.imread(args["image"])

   we start on lines 2-8 by importing our required python packages. line 2
   imports the image  pre-processing module directly from the keras
   library.

   lines 11-14 parse our command line arguments. we only need a single
   switch here, --image , which is the path to our input image.

   we then load our image in opencv format on line 18. this step isn   t
   strictly required since keras provides helper functions to load images
   (which i   ll demonstrate in the next code block), but there are
   differences in how both these functions work, so if you intend on
   applying any type of opencv functions to your images, i suggest loading
   your image via cv2.imread  and then again via the keras helpers. once
   you get a bit more experience manipulating numpy arrays and swapping
   channels, you can avoid the extra i/o overhead, but for the time being,
   let   s keep things simple.
   id163 classification with python and keras
   python

   # load the input image using the keras helper utility while 
   # that the image is resized to 224x224 pxiels, the required 
   # dimensions for the network -- then convert the pil image t
   # numpy array_______________________________________________
   print("[info] loading and preprocessing image...")__________
   image = image_utils.load_img(args["image"], target_size=(224
   image = image_utils.img_to_array(image)_____________________
   20
   21
   22
   23
   24
   25
   26
   # load the input image using the keras helper utility while ensuring
   # that the image is resized to 224x224 pxiels, the required input
   # dimensions for the network -- then convert the pil image to a
   # numpy array
   print("[info] loading and preprocessing image...")
   image = image_utils.load_img(args["image"], target_size=(224, 224))
   image = image_utils.img_to_array(image)

   line 25 applies the .load_img  keras helper function to load our image
   from disk. we supply a target_size  of 224 x 224 pixels, the required
   spatial input image dimensions for the vgg16, vgg19, and resnet50
   network architectures.

   after calling .load_img , our image  is actually in pil/pillow format,
   so we need to apply the .img_to_array  function to convert the image
   to a numpy format.

   next, let   s preprocess our image:
   id163 classification with python and keras
   python

   # our image is now represented by a numpy array of shape (22
   # assuming tensorflow "channels last" ordering of course, bu
   # to expand the dimensions to be (1, 3, 224, 224) so we can 
   # through the network -- we'll also preprocess the image by 
   # the mean rgb pixel intensity from the id163 dataset____
   image = np.expand_dims(image, axis=0)_______________________
   image = preprocess_input(image)_____________________________
   28
   29
   30
   31
   32
   33
   34
   # our image is now represented by a numpy array of shape (224, 224, 3),
   # assuming tensorflow "channels last" ordering of course, but we need
   # to expand the dimensions to be (1, 3, 224, 224) so we can pass it
   # through the network -- we'll also preprocess the image by subtracting
   # the mean rgb pixel intensity from the id163 dataset
   image = np.expand_dims(image, axis=0)
   image = preprocess_input(image)

   if at this stage we inspect the .shape  of our image , you   ll notice
   the shape of the numpy array is (3, 224, 224)     each image is 224
   pixels wide, 224 pixels tall, and has 3 channels (one for each of the
   red, green, and blue channels, respectively).

   however, before we can pass our image  through our id98 for
   classification, we need to expand the dimensions to be (1, 3, 224,
   224).

   why do we do this?

   when classifying images using deep learning and convolutional neural
   networks, we often send images through the network in    batches    for
   efficiency. thus, it   s actually quite rare to pass only one image at a
   time through the network     unless of course, you only have one image to
   classify (like we do).

   we then preprocess the image  on line 34 by subtracting the mean rgb
   pixel intensity computed from the id163 dataset.

   finally, we can load our keras network and classify the image:
   id163 classification with python and keras
   python

   # load the vgg16 network pre-trained on the id163 dataset
   print("[info] loading network...")__________________________
   model = vgg16(weights="id163")___________________________
   ____________________________________________________________
   # classify the image________________________________________
   print("[info] classifying image...")________________________
   preds = model.predict(image)________________________________
   p = decode_predictions(preds)_______________________________
   ____________________________________________________________
   # loop over the predictions and display the rank-5 predictio
   # probabilities to our terminal_____________________________
   for (i, (id163id, label, prob)) in enumerate(p[0]):______
   	print("{}. {}: {:.2f}%".format(i + 1, label, prob * 100))__
   ____________________________________________________________
   # load the image via opencv, draw the top prediction on the 
   # and display the image to our screen_______________________
   orig = cv2.imread(args["image"])____________________________
   (id163id, label, prob) = p[0][0]_________________________
   cv2.puttext(orig, "label: {}, {:.2f}%".format(label, prob * 
   	(10, 30), cv2.font_hershey_simplex, 0.8, (0, 255, 0), 2)___
   cv2.imshow("classification", orig)__________________________
   cv2.waitkey(0)______________________________________________
   36
   37
   38
   39
   40
   41
   42
   43
   44
   45
   46
   47
   48
   49
   50
   51
   52
   53
   54
   55
   56
   57
   # load the vgg16 network pre-trained on the id163 dataset
   print("[info] loading network...")
   model = vgg16(weights="id163")

   # classify the image
   print("[info] classifying image...")
   preds = model.predict(image)
   p = decode_predictions(preds)

   # loop over the predictions and display the rank-5 predictions +
   # probabilities to our terminal
   for (i, (id163id, label, prob)) in enumerate(p[0]):
   print("{}. {}: {:.2f}%".format(i + 1, label, prob * 100))

   # load the image via opencv, draw the top prediction on the image,
   # and display the image to our screen
   orig = cv2.imread(args["image"])
   (id163id, label, prob) = p[0][0]
   cv2.puttext(orig, "label: {}, {:.2f}%".format(label, prob * 100),
   (10, 30), cv2.font_hershey_simplex, 0.8, (0, 255, 0), 2)
   cv2.imshow("classification", orig)
   cv2.waitkey(0)

   on line 38 we initialize our vgg16  class. we could also substitute in
   vgg19  or resnet50  here, but for the sake of this tutorial, we   ll use
   vgg16 .

   supplying weights="id163"  indicates that we want to use the
   pre-trained id163 weights for the respective model.

   once the network has been loaded and initialized, we can predict class
   labels by making a call to the .predict  method of the model . these
   predictions are actually a numpy array with 1,000 entries    
   the predicted probabilities associated with each class in the id163
   dataset.

   calling decode_predictions  on these predictions gives us the id163
   unique id of the label, along with a human-readable text version of the
   label.

   finally, lines 47-57 print the predicted label  to our terminal and
   display the output image to our screen.

id163 + keras image classification results

   to apply the keras models pre-trained on the id163 dataset to your
   own images, make sure you use the    downloads    form at the bottom of
   this blog post to download the source code and example images. this
   will ensure your code is properly formatted (without errors) and your
   directory structure is correct.

   but before we can apply our pre-trained keras models to our own images,
   let   s first discuss how the model weights are (automatically)
   downloaded.

downloading the model weights

   the first time you execute the test_id163.py  script, keras
   will automatically download and cache the architecture weights to your
   disk in the ~/.keras/models  directory.

   subsequent runs of test_id163.py  will be substantially faster
   (since the network weights will already be downloaded)     but that first
   run will be quite slow (comparatively), due to the download process.

   that said, keep in mind that these weights are fairly large hdf5 files
   and might take awhile to download if you do not have a fast internet
   connection. for convenience, i have listed out the size of the weights
   files for each respective network architecture:
     * resnet50: 102mb
     * vgg16: 553mb
     * vgg19: 574mb

id163 and keras results

   we are now ready to classify images using the pre-trained keras models!
   to test out the models, i downloaded a couple images from wikipedia
   (   brown bear    and    space shuttle   )     the rest are from my personal
   library.

   to start, execute the following command:
   id163 classification with python and keras
   shell

   $ python test_id163.py --image images/dog_beagle.png_____
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   $ python test_id163.py --image images/dog_beagle.png

   notice that since this is my first run of test_id163.py , the
   weights associated with the vgg16 id163 model need to be downloaded:

   figure 2: downloading the pre-trained id163 weights for vgg16.

   once our weights are downloaded, the vgg16 network is initialized, the
   id163 weights loaded, and the final classification is obtained:

   figure 3: utilizing the vgg16 network trained on id163 to recognize
   a beagle in an image.

   let   s give another image a try, this one of a beer glass:
   id163 classification with python and keras
   shell

   $ python test_id163.py --image images/beer.png___________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   $ python test_id163.py --image images/beer.png

   figure 4: recognizing a beer glass using a convolutional neural network
   trained on id163.

   the following image is of a brown bear:
   id163 classification with python and keras
   shell

   $ python test_id163.py --image images/brown_bear.png_____
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   $ python test_id163.py --image images/brown_bear.png

   figure 5: utilizing vgg16, keras, and python to recognize the brown
   bear in an image.

   i took the following photo of my keyboard to test out the id163
   network using python and keras:
   id163 classification with python and keras
   shell

   $ python test_id163.py --image images/keyboard.png_______
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   $ python test_id163.py --image images/keyboard.png

   figure 6: utilizing python, keras, and a convolutional neural network
   trained on id163 to recognize image contents.

   i then took a photo of my monitor as i was writing the code for this
   blog post. interestingly, the network classified this image as    desktop
   computer   , which makes sense given that the monitor is the primary
   subject of the image:
   id163 classification with python and keras
   shell

   $ python test_id163.py --image images/monitor.png________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   $ python test_id163.py --image images/monitor.png

   figure 7: image classification via python, keras, and id98s.

   this next image is of a space shuttle:
   id163 classification with python and keras
   shell

   $ python test_id163.py --image images/space_shuttle.png__
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   $ python test_id163.py --image images/space_shuttle.png

   figure 8: recognizing image contents using a convolutional neural
   network trained on id163 via keras + python.

   the final image is of a steamed crab, a blue crab, to be specific:
   id163 classification with python and keras
   shell

   $ python test_id163.py --image images/steamed_crab.png___
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   $ python test_id163.py --image images/steamed_crab.png

   figure 9: convolutional neural networks and id163 for image
   classification with python and keras.

   what i find interesting about this particular example is that vgg16
   classified this image as    menu    while    dungeness crab    is equally as
   prominent in the image.

   furthermore, this is actually not a dungeness crab in the image     it   s
   actually a blue crab that has been steamed so it   s shell has turned
   red. dungeness crabs are naturally red. a blue crab only turns red
   after it   s been steamed prior to eating.

a note on model timing

   from start to finish (not including the downloading of the network
   weights files), classifying an image using vgg16 took approximately
   11 seconds on my titan x gpu. this includes the process of actually
   loading both the image and network from disk, performing any
   initializations, passing the image through the network, and obtaining
   the final predictions.

   however, once the network is actually loaded into memory,
   classification takes only 1.8 seconds, which goes to show you how much
   overhead is involved in actually loading an initializing a large
   convolutional neural network. furthermore, since images can be
   presented to the network in batches, this same time for classification
   will hold for multiple images.

   if you   re classifying images on your cpu, then you should obtain a
   similar classification time. this is mainly because there is
   substantial overhead in copying the image from memory over to the gpu.
   when you pass multiple images via batches, it makes the i/o overhead
   for using the gpu more acceptable.

summary

   in this blog post, i demonstrated how to use the newly released
   [33]deep-learning-models repository to classify image contents using
   state-of-the-art convolutional neural networks trained on the id163
   dataset.

   to accomplish this, we leveraged the [34]keras library, which is
   maintained by [35]fran  ois chollet     be sure to reach out to him and
   say thanks for maintaining such an incredible library. without keras,
   deep learning with python wouldn   t be half as easy (or as fun).

   of course, you might be wondering how to train your own convolutional
   neural network from scratch using id163. don   t worry, we   re getting
   there     we just need to understand the basics of neural networks,
   machine learning, and deep learning first. walk before you run, so to
   speak.

   i   ll be back next week with a tutorial on hyperparameter tuning, a key
   step to maximizing your model   s accuracy.

   to be notified when future blog posts are published
   on the pyimagesearch blog, be sure to enter your email address in the
   form below     se you next week!

downloads:

   if you would like to download the code and images used in this post,
   please enter your email address in the form below. not only will you
   get a .zip of the code, i   ll also send you a free 17-page resource
   guide on id161, opencv, and deep learning. inside you'll find
   my hand-picked tutorials, books, courses, and libraries to help you
   master cv and dl! sound good? if so, enter your email address and i   ll
   send you the code immediately!

   email address: ____________________

   download the code!

resource guide (it   s totally free).

   get your free 17-page id161 and deep learning resource guide
   pdf
   enter your email address below to get my free 17-page id161,
   opencv, and deep learning resource guide pdf. inside you'll find my
   hand-picked tutorials, books, courses, and python libraries to help you
   master id161 and deep learning!
   ____________________
   download the guide!

   [36]id98, [37]convolutional neural network, [38]deep learning,
   [39]id163, [40]keras, [41]resnet, [42]vgg
   [43]id92 classifier for image classification
   [44]how to tune hyperparameters with python and scikit-learn

111 responses to id163 classification with python and keras

    1. [45]ryane august 10, 2016 at 4:18 pm [46]#
       is there a way to only learn part of the large id163 dataset, if
       your classification needs are more along the lines of    is there a
       chicken in this picture, and if so, where?   
       thanks.
       [47]reply
          + adrian rosebrock august 11, 2016 at 7:00 am [48]#
            absolutely. you would normally take a pre-trained network,
               freeze    the lower-level layers of the network so that their
            weights don   t change, and then apply fine-tuning using your
            partial (or custom dataset).
            [49]reply
    2. alexander august 10, 2016 at 7:04 pm [50]#
       hi! there is a bunch of articles about how to classify using
       pre-trained weights and ready-models on the internet. but i can   t
       understand why there is almost no articles about how to train that
       models on your own. currently i   m trying to train inception v1
       using keras and follow by this code
       [51]https://gist.github.com/joelouismarino/a2ede9ab3928f999575423b9
       887abd14. everything is clear why we just use pre-trained weights
       and some images to classify them, but real problems appear when i   m
       trying to train the model with my images set. here   s some questions
       those i can   t solve (maybe i   m too stupid   ):
       1. how to get images by category from the id163 (e.g. i need all
       plants)
       2. how to preprocess images and keep them ready for training:
       should we vectorise them? where to store labels for images?
       3. what shape to use for model input on train
       4. what shape to use for model output on train
       5. can we train model for two classes?
       it feels like it   s a big secret on how to train such models and
       those guys just brag about how they trained them
       [52]reply
          + adrian rosebrock august 11, 2016 at 6:59 am [53]#
            these are all great questions alexander. training id98s doesn   t
            have to be a    black art   . and honestly, i learned the answers
            to these via trial and error. i can   t answer all of these
            questions in the comments, mainly because my comment reply
            would be longer than the blog post it self     but i have a
            roadmap planned to address these types of questions related to
            training your own custom id98s. keep following the
            pyimagesearch blog!
            [54]reply
               o alexander august 13, 2016 at 2:38 am [55]#
                 hi! thanks for the reply. i hope the blog post will come
                 to world soon)))
                 [56]reply
          + garret august 18, 2016 at 10:27 am [57]#
            alexander,
            i understand your frustration. take a look at
            [58]https://pythonprogramming.net/tensorflow-deep-neural-netwo
            rk-machine-learning-tutorial/
            he goes over the actual training of deep neural networks for
            tensorflow in that tutorial. also i was checking out the git
            repository of fran  ois chollet and hes got a list of tutorials
            that sound promising.
            [59]https://github.com/fchollet/keras-resources
            [60]reply
          + nir june 8, 2017 at 4:38 pm [61]#
            do you know if there exists a similar code supporting keras
            over tensorflow (not only theano) ?
            thanks
            [62]reply
          + yantao january 21, 2018 at 1:16 am [63]#
            hello,alexander,i   m a beginner of deep learning and meet all
            the same questions as you ,you point the big problem of the
            beginner . have you solved these question? can you give me
            some idea or example code to solve these questions,think you
            very much!
            my email: email removed by spam filter
            [64]reply
    3. [65]marko plahuta august 11, 2016 at 1:17 am [66]#
       thanks for your articles, they are well written and easy to
       understand. could you write one about efficiently and quickly
       detecting multiple objects on an image? i already implemented a
       pyramid method once with keras and a preloaded vgg16 model, but as
       you can imagine, it   s very slow for the exact reasons you pojnted
       out. is there an architecture that would allow one to do just one
       pass through the net with entire image, and get bounding boxes of
       detected objects, along with labels? thanks!
       [67]reply
          + adrian rosebrock august 11, 2016 at 7:01 am [68]#
            sure, i   ll absolutely consider a blog post on object
            localization using keras. if you   re super concerned about
            speed, i like using the [69]you only look once method since
            it   s (1) fast and (2) straightforward.
            [70]reply
               o tushar soni november 18, 2016 at 3:19 pm [71]#
                 i   ve same problem, i want yolo in keras, when can we have
                 that blog post.
                 [72]reply
                    # adrian rosebrock november 21, 2016 at 12:40 pm [73]#
                      i   ll likely be covering yolo inside my upcoming deep
                      learning book.
                      [74]reply
    4. geoffrey anderson august 11, 2016 at 1:59 pm [75]#
       thanks for the write-up, adrian.
       i   d actually more like to use id163 to beg, borrow, or steal (or
       train my own) an unsupervised set of weights trained as an
       autoencoder to behave as the lower layer to help me detect edges
       better in a medical imaging application, where just 250 images
       (examples) exist all-told. or perhaps i   d, alternatively, directly
       use the lower layer of this supervised-learning model. maybe either
       one will work as the lower layer for generic edge detection? not
       sure. but anyway if i can get a generic vision layer at the bottom
       from someone else   s id163 training efforts, then the higher
       layers would be trained by me on my computer hardware, to be
       completely application-specific.
       i   ve actually seen some academic papers where id163 proved
       actually helpful on medical images, even though there were no frogs
       and cats in the medical images, strange as this may seem.
       [76]reply
          + adrian rosebrock august 12, 2016 at 10:53 am [77]#
            hey geoffrey     the lower level layers of id163 consist of
            filters that can be used to detect blobs and edge-like
            regions. you could essentially    freeze    these layer weights
            and then apply fine-tuning to the higher-level layers of the
            network to recognize particular structures in your images.
            however, depending on what you   re trying to do, i would take
            one of the higher level layers of the network and treat it as
            my feature extraction layer. take the output of one of these
            layers (normally a conv or pool layer) and treat the output as
            a feature vector. this feature vector can then be used for
            classification, id91, etc.
            [78]reply
          + simon burfield october 21, 2016 at 1:00 pm [79]#
            my results were wrong returing crazy stuff, turned out i had
            changed the keras.json file to use theano but no the ording
               tf    to    th   
            [80]reply
    5. geoffrey anderson august 11, 2016 at 2:42 pm [81]#
       can anyone with a 8gb memory (or less?) gpu confirm that our
       keras-supplied pretrained vgg16 model actually worked to completion
       on that hardware? maybe i (we) can save money on a cheaper card
       than a 12 gb titan! thanks if you found that this pretrained model
       actually worked on your gpu that has less than 12 gb! please report
       your gb too. (actual results only please. not looking for
       speculation. hope you all understand.)
       [82]reply
          + grant october 2, 2016 at 8:52 pm [83]#
            i just finished this program on my platform and it runs well.
            system configuration:
            skylake i7-6700, 8g ram, 500g hd
            asus 950gtx (2g memory)
            ubuntu 14.04 x64
            just for your reference.
            [84]reply
    6. zhang han august 14, 2016 at 10:22 pm [85]#
       hi! i have a question to ask you. i have a image dataset. but the
       image size isn   t the same. how to deal with it? i want to train
       it.thanks!
       [86]reply
          + adrian rosebrock august 16, 2016 at 1:08 pm [87]#
            simply resize your images prior to passing them to the
            network. you can resize by ignoring the aspect ratio or resize
            along the smallest dimension and then taking the center crop.
            [88]reply
    7. [89]terry simons august 19, 2016 at 7:49 pm [90]#
       i tried running the code on a random image from the internet
       (224  224) but i get messages like this:
       error allocating 411041792 bytes of device memory (out of memory).
       driver report 34959360 bytes free and 1073414144 bytes total
       with a python traceback that says:
       memoryerror: (   error allocating 411041792 bytes of device memory
       (out of memory).   ,    you might consider using    theano.shared(   ,
       borrow=true)'   )
       any ideas?
       i   m still waiting on the official download link, so i don   t have
       the demo images.
       [91]reply
          + adrian rosebrock august 22, 2016 at 1:35 pm [92]#
            please see my replies to garret and vineet above.
            [93]reply
    8. garret august 19, 2016 at 9:38 pm [94]#
       hi adrian,
       im getting a memory error which seems to trigger on line 40 of the
       code. do you have any insight as to why this might happen? fyi, im
       noty using any gpu features since im running this on a digialocean
       droplet. does that have anything to do with it?
       thanks.
       [95]reply
          + adrian rosebrock august 22, 2016 at 1:34 pm [96]#
            deep learning networks, especially convolutional neural
            networks, require a lot of ram. how much memory does your
            digital ocean droplet have?
            [97]reply
    9. vineet august 21, 2016 at 6:53 pm [98]#
       hi .. it   s giving me a memory error . i m using windows7 laptop 32
       bit. cud it be due to my laptop configuration or something else..
       kindly guide     and thanks a ton in advance .. yr tutorial is really
       very helpful ..
       [99]reply
          + adrian rosebrock august 22, 2016 at 1:28 pm [100]#
            if you are getting a memory error, then you likely don   t have
            enough ram on your machine to load and run the network.
            [101]reply
   10. narayan august 24, 2016 at 8:15 am [102]#
       i want to load id163 weights and train my 100 category images by
       using this weight    so can anyone suggest me how i can do this ..?
       [103]reply
          + adrian rosebrock august 24, 2016 at 12:14 pm [104]#
            this process is called    finetuning   . i   ll be doing a blog post
            on this concept soon.
            [105]reply
   11. dawer august 28, 2016 at 4:59 am [106]#
       hi, great post.
       i was able to classify images successfully but how do we control
       the output of the classification? like what if i want to go to the
       base word. rather than classifying    beagle    how do i tune the
       id163 to output only    dog   ? is there any reference guide for
       that.
       also in comments you mentioned freezing lower-layers of the network
       to classify only part of the id163. how do we do that too?
       [107]reply
          + adrian rosebrock august 29, 2016 at 1:59 pm [108]#
            freezing the lower layers of the network and then training the
            upper layers is called    finetuning   . i can   t explain how to do
            that in a single blog post, i   ll have to create a separate
            tutorial for that.
            as for id163, keep in mind that it   s built on the id138
            synsets. therefore, you can just [109]follow the id138
            hierarchy.
            [110]reply
   12. nasa september 9, 2016 at 11:20 pm [111]#
       hi adrian,
       great post. i just want to ask if this tutorial could be use with
       raspberry pi? instead showing pictures taken from camera, i want to
       use raspberry pi and webcam to classify the image.
       [112]reply
          + adrian rosebrock september 12, 2016 at 12:55 pm [113]#
            networks such as vgg and resnet are too large for the pi. you
            could use smaller id98s for sure     i would highly recommend
            using squeezenet which is actually intended to run on embedded
            devices.
            [114]reply
   13. wassim el youssoufi september 25, 2016 at 9:27 am [115]#
       hi adrian,
       if i may, i would add that you can encounter issues if your default
       backend is tensorflow and not theano.
       if you have false predictions, it can be that your code is using
       the wrong backend.
       to correct that just change the ~/.keras/keras.json to change the
          tf    to    th   .
       [116]reply
          + adrian rosebrock september 27, 2016 at 8:47 am [117]#
            great point, thanks for sharing wassim. if anyone else is
            interested in the keras.json file, [118]here is a link to the
            documentation.
            [119]reply
   14. grant october 2, 2016 at 8:55 pm [120]#
       hi adrain,
       thank you for your great post!
       it took me a looooooong time to try to download the pre-trained
       data, and python failed several times.
       at last i used a download tool to get all the data files and copy
       them to the directory.
       to those who might encounter same issue, the directory is:
       ~/.keras/models
       finally i can get the system run smoothly. thank you!
       [121]reply
          + adrian rosebrock october 3, 2016 at 7:12 am [122]#
            thanks for sharing grant. i know the files are served from
            github   s cdn which is normally very reliable. do you have a
            strong internet connection?
            [123]reply
               o grant october 3, 2016 at 9:40 am [124]#
                 well i can access most website at a fast speed. but i
                 don   t know why the connection between github is very
                 unstable. maybe because of gfw, i guess   
                 [125]reply
   15. [126]alexandru paiu october 9, 2016 at 12:03 am [127]#
       hey great post as always!
       in the newest version of keras the models are loaded directly so
       you don   t have to clone the github repository. you can just do:
       from keras.applications.resnet50 import resnet50 pretty awesome!
       also decode predictions now has a top feature that allows you to
       see top n predicted probabilities.
       [128]reply
          + adrian rosebrock october 11, 2016 at 1:06 pm [129]#
            awesome, thanks for sharing this alexandru! i didn   t realize
            there was now an applications module. i   ll be sure to play
            around with this.
            [130]reply
   16. jason october 18, 2016 at 7:27 am [131]#
       hi,
       i   ve got a bit of a problem, i ran the tutorial at home and
       everything was as expected however i   ve come into uni and installed
       , and the images are being misclassified is the beagle is a pug and
       the rocket is a barrow. not sure what to make of it    is it a
       conflict with the model weights being downloaded automatically now?
         ______________________________________________________________

       actually it was a conflict in the keras.jason file i had    tf    and
          theano    oops
       [132]reply
          + adrian rosebrock october 20, 2016 at 8:56 am [133]#
            nice job resolving the issue jason!
            [134]reply
   17. abby november 9, 2016 at 7:28 am [135]#
       hello adrian ,
       thank you so much for the amazing tutorials.
       i was wondering if we could use the pre-trained models by chollet
       (vgg16, vgg19, and resnet50) for id21, so that we can
       fine-tune the models trained on id163 to work with another
       dataset?
       [136]reply
          + adrian rosebrock november 10, 2016 at 8:39 am [137]#
            you absolutely can fine-tune these pre-trained networks. this
            is a topic i   ll be covering in my next book. more details to
            come in late-november/early-december.
            [138]reply
   18. walid ahmed november 14, 2016 at 1:48 pm [139]#
       thanks a lot adrian
       i can not wait for your post on object localization.
       [140]reply
   19. walid ahmed november 16, 2016 at 3:08 pm [141]#
       hi adrian.
       i want to share with you that i think
       1-results from all models are not always the same as you would
       notice one image classified as a desk by resnet50 and the as a
       keyboard by vgg16.
       2-all models are limited by having the identified object consuming
       most of the space of thee image
       am i right?
       [142]reply
          + adrian rosebrock november 18, 2016 at 9:04 am [143]#
            different network architectures that were trained using
            different optimizers can certainly obtain different results on
            a per-image basis. what matters is on the aggregate.
            and yes, for this specific type of setup the classification is
            normally dependent on the object consuming a large portion of
            the image. however, with that said, we can apply localization
            methods to find various objects in an image.
            [144]reply
   20. [145]rors november 17, 2016 at 4:54 am [146]#
       hi adrian,
       once you have a trained neural net is it possible to use a webcam
       to capture video and send those images through the net for
       classification like with a haar classifier ?
       best
       [147]reply
          + adrian rosebrock november 18, 2016 at 8:57 am [148]#
            absolutely. you likely want to    skip frames    and send only
            ever n-th frame to the nn. but yes, the same techniques still
            apply. just access your webcam, read the frame, and pass it to
            your network.
            [149]reply
   21. nurman november 23, 2016 at 7:29 am [150]#
       i have managed to run the tutorial successfully but when i tried to
       change the setting to resnet50, and the run, i got the following
       error:
       valueerror: corrmm images and kernel must have the same stack size.
       i have not made any changes to the code apart from changing the vgg
       to resnet.
       do you have any ideas what went wrong?
       [151]reply
          + adrian rosebrock november 23, 2016 at 8:32 am [152]#
            i   m not sure regarding that error, i have not encountered that
            before. i would suggest [153]opening an issue on github.
            [154]reply
          + bob haffner february 17, 2017 at 2:34 pm [155]#
            nurman,
            i believe that   s the error i was getting when i was on keras
            1.0.7 i just updated to 1.2.2 so i could use the built-in
            resnet50 model i.e. keras.applications.resnet50 and the error
            went away.
            bob
            [156]reply
   22. [157]dinesh vadhia november 24, 2016 at 3:21 pm [158]#
       to extract the dense feature vector of an image, the recommendation
       is to get it from the penultimate layer. but, what is the name of
       this layer for the respective pre-trained models ie. vgg16, vgg19
       and inceptionv3?
       the keras doc has one example at [159]https://keras.io/applications
       for vgg19 (   block4_pool   ) but i don   t know if this is the
       penultimate layer. thanks for the help.
       [160]reply
          + adrian rosebrock november 28, 2016 at 10:44 am [161]#
            you need to look at the [162]source code for vgg16, vgg19,
            inception, etc. each layer in the respective architecture has
            a name attribute.
            [163]reply
   23. atti december 1, 2016 at 4:16 am [164]#
       hey adrian, great post as always.
       i ran into a little problem:    too many values to unpack    at this
       line
       (inid, label) = decode_predictions(preds)[0]
       which i replaced with
       (inid, label, id203) = decode_predictions(preds)[0][0]
       and it started working
       you might want to take a look at this. maybe its because i`m usinga
       never version of keras 1.1.2
       [165]reply
          + adrian rosebrock december 1, 2016 at 7:21 am [166]#
            thanks atti     i was just about to update the code for this
            change, thank you for pointing this out.
            [167]reply
               o martin may 31, 2017 at 9:21 am [168]#
                 this bug is still there   .
                 [169]reply
                    # adrian rosebrock may 31, 2017 at 12:58 pm [170]#
                      please re-read the post. i   ve put a note at the
                      bottom regarding the updated function call. you can
                      also refer to the [171]latest post on pre-trained
                      id163 networks with keras.
                      [172]reply
   24. walid december 1, 2016 at 12:38 pm [173]#
       can you please advice how to apply localization?
       [174]reply
          + adrian rosebrock december 5, 2016 at 1:48 pm [175]#
            i   ll be discussing detection/localization in my upcoming deep
            learning book (stay tuned).
            [176]reply
   25. joey sidesmith december 16, 2016 at 4:10 pm [177]#
       struggling to follow along here   
          img_path =    /path/to.my/image.jpg   
          
       from keras.preprocessing import image
       x = image.load_img(img_path, target_size=(250, 250))
          
       x = image.img_to_array(x)
       print x.shape
          
       >> (250, 250, 3)
       x
       x = np.expand_dims(x, axis=0)
       print x.shape
          
       >>(1, 250, 250, 3)   
       however i   m under the impression my output should be (1, 3, 250,
       250)   ..
       ?
       [178]reply
          + adrian rosebrock december 18, 2016 at 8:42 am [179]#
            this is entirely dependent on your image_dim_ordering in your
            ~/.keras/keras.json file. a    tf    value will produce a shape of
            (h, w, d) while a    th    ordering will be (d, h, w). be sure to
            double-check with backend you are using along with which image
            dimension ordering you are using.
            [180]reply
   26. rafael figueroa january 8, 2017 at 12:23 am [181]#
       hello adrian, greetings from brasil     
       thanks for the model, it  s very instructional.
       i  m manage to change between vgg16 and vgg19, but when i try to
       load resnet50 it  s says that there is no such model.
       can you explain how to load it please.
       thanks !
       [182]reply
          + adrian rosebrock january 9, 2017 at 9:14 am [183]#
            which version of keras are you using? if it   s keras 1.1 or
            greater you can just do:
            from keras.applications import resnet50
            [184]reply
   27. thomas january 12, 2017 at 2:38 am [185]#
       great post!
       i ran into an error message running it though:
       python

       [info] classifying image..._________________________________
       traceback (most recent call last):__________________________
       file "test_id163.py", line 45, in _______________________
       (inid, label) = decode_predictions(preds)[0]________________
       valueerror: too many values to unpack (expected 2)__________

   1

   2

   3

   4

   5

   [info] classifying image...

   traceback (most recent call last):

   file "test_id163.py", line 45, in

   (inid, label) = decode_predictions(preds)[0]

   valueerror: too many values to unpack (expected 2)
       seems like decode_predictions(preds)[0] returns a list of five
       tuples for each of the classifications that has any id203 at
       all.
       changing to:
       decode_predictions(preds)[0][0] returns the tuple of the
       classification with largest id203. this is a tuple consisting
       of three variables, the id, the classification and the id203.
       so if i change to (inid, label, prob) =
       decode_predictions(preds)[0][0] we can print the id203 as
       well.
       maybe this is due to some recent changes in the classification
       index that is downloaded?
       [186]reply
          + adrian rosebrock january 12, 2017 at 7:53 am [187]#
            hey thomas     you are indeed correct. the error is due to an
            update to keras. i   ll also update this blog post to reflect
            the change. thank you for pointing it out!
            [188]reply
   28. lars january 12, 2017 at 9:36 am [189]#
       first of all: thanks for this tutorial !!! now to my problem :
       i tried to predict multiple images in a batch, but i can   t seem to
       get it to work.
       i tried to make a batch like this :
       image = np.array([np.array(image_utils.load_img(fname,
       target_size=(224, 224))) for fname in filelist]).
       or should i just do a for loop and load the images one after
       another ?
       [190]reply
          + adrian rosebrock january 13, 2017 at 8:43 am [191]#
            it looks like you   re forgetting to call .img_to_array and
            preprocess_input on each image. you   ll also need to expand the
            dimensions of each image. since that would make for a vey long
            list comprehension i would suggest using just a simple for
            loop.
            [192]reply
   29. nobit january 12, 2017 at 10:00 am [193]#
       hi,
       i would like to know the difficulty level to clasify two variants
       of the same concept. for example, if i already know that what is in
       the image is a door, to train a network to determine wether the
       door is open or closed.
       what approach would you recommend me?
       [194]reply
          + adrian rosebrock january 13, 2017 at 8:41 am [195]#
            is your camera fixed and non-moving? if so, this is a very
            easy problem to solve (and you don   t need machine learning,
            just basic id161 techniques).
            however, if you   re looking to determine if any given door is
            open or closed, that is much more challenging and would
            certainly require a large dataset and likely deep learning
            techniques.
            [196]reply
   30. dj march 10, 2017 at 12:57 pm [197]#
       test_id163.py: error: the following arguments are required:
       -i/   image
       how do i fix this
       [198]reply
          + adrian rosebrock march 10, 2017 at 3:42 pm [199]#
            you need to supply the --image command line argument as i do
            in the example in the blog post.
            [200]reply
               o dj march 10, 2017 at 4:08 pm [201]#
                 where? what does the syntax look like?
                 [202]reply
                    # adrian rosebrock march 13, 2017 at 12:22 pm [203]#
                      please take the time to read up on [204]command line
                      arguments before you continue.
                      [205]reply
               o dj march 13, 2017 at 11:25 am [206]#
                 c:\users\appdata\local\programs\python\python35\scripts\d
                 eep-learning-m
                 odels>python test_id163.py    image dog.jpg
                 traceback (most recent call last):
                 file    test_id163.py   , line 2, in
                 from keras.preprocessing import image as image_utils
                 modulenotfounderror: no module named    keras   
                 i have keras version 1.2.2 installed and runs in pycharm.
                 cmd line does not recognize keras, as you have shown.
                 [207]reply
                    # adrian rosebrock march 13, 2017 at 12:06 pm [208]#
                      if you are using a python virtual environment make
                      sure you have access it before running your python
                      script. you   ll want to make sure your command line
                      environment matches your pycharm environment.
                      [209]reply
   31. jose luis verdugo march 12, 2017 at 8:30 pm [210]#
       hi everyone, i configured keras with theano as backend, following
       in the footsteps of an earlier adrian post. now, i cloned the git
       mentioned above and created the test_id163.py script, but when i
       tried to run the script, the following error was returned:
          attributeerror: the    module    object has no    image_data_format       .
       i tried to add the following row to the keras.json file but it does
       not work:    image_data_format   :    channels_first   
       someone knows this issue or have a solution?
       thanks
       [211]reply
          + max march 15, 2017 at 3:48 pm [212]#
            hi, jose.
            i   ve got the same error first. then i downloaded the
            ready-made code (red button at the end of blog post) and ran
            it with success.
            [213]reply
   32. amell march 22, 2017 at 7:33 am [214]#
       hi,
       it is interesting but if i want to classify an object that is not
       included in id163. briefly, i want to recognize automatically a
       business card but there isn   t a class of business card.
       [215]reply
          + adrian rosebrock march 22, 2017 at 8:29 am [216]#
            you would want to consider using id21, either via
            feature extraction or fine-tuning. i   ll be covering both in my
            [217]upcoming deep learning book.
            [218]reply
   33. azamat march 30, 2017 at 2:27 am [219]#
       hi,
       why the program cannot be executed? when i enter    python
       test_id163.py    image images/beer.png    into cmd, it starts to do
       something but then    python has stopped working    error happens    is
       it because of my 4gb ram?
       [220]reply
   34. [221]abder-rahman april 13, 2017 at 11:26 am [222]#
       thanks for the nice tutorial. can i apply the program on my own
       custom data (i.e. medical images). i believe i should include
          training    and    validation    data? what changes should i make to use
       my own custom data?
       [223]reply
          + adrian rosebrock april 16, 2017 at 9:03 am [224]#
            you would need to either (1) train your network from scratch
            or (2) apply id21 via feature extraction or
            fine-tuning. i   m covering both inside [225]deep learning for
            id161 with python.
            [226]reply
   35. ky april 26, 2017 at 4:36 pm [227]#
       i was trying to follow along but it seems like i don   t have
       id163_utils when i did pip install keras, anyway i can download
       and install keras directly from the source so that id163_util is
       included? thanks!
       [228]reply
          + adrian rosebrock april 28, 2017 at 9:45 am [229]#
            i would suggest following [230]this updated tutorial on
            pre-trained id163 classifiers with keras.
            [231]reply
   36. amna april 28, 2017 at 3:02 pm [232]#
       hi, i   m having a problem with displaying the predictions to screen
       with these lines since i didn   t use opencv:
       cv2.puttext(orig,    label: {}   .format(label), (10, 30),
       cv2.font_hershey_simplex, 0.9, (0, 255, 0), 2)
       cv2.imshow(   classification   , orig)
       cv2.waitkey(0)
       how can i load the picture without using cv2 ?
       [233]reply
          + adrian rosebrock may 1, 2017 at 1:51 pm [234]#
            you can load an image from disk without opencv using scipy,
            scikit-learn, or load_img provided by the keras library.
            however, keep in mind that if you don   t have opencv installed,
            you won   t be able to draw the label on the image.
            [235]reply
   37. tinu june 2, 2017 at 5:12 am [236]#
       hi adrian,
       i am getting the error    importerror: load_weights requires h5py   ..
       could you please help here?
       thanks,
       tinu
       [237]reply
          + adrian rosebrock june 4, 2017 at 5:41 am [238]#
            make sure you have hdf5 and h5py installed on your system:
            $ pip install h5py
            [239]reply
   38. thanhthanh june 13, 2017 at 4:53 am [240]#
       hi!
       can i run this code in cmd of windows 7? do you a guide to run this
       code in windows 7? thank you!
       [241]reply
          + adrian rosebrock june 13, 2017 at 10:53 am [242]#
            i don   t support windows here on the pyimagesearch blog (i
            recommend using a unix-based system such as linux or macos),
            but you can certainly execute a python script via command line
            on windows. i would suggest taking a look at [243]this
            tutorial to get you started.
            [244]reply
               o thanhthanh june 15, 2017 at 10:18 pm [245]#
                 thank you very much! i will try.
                 [246]reply
   39. thanhthanh june 15, 2017 at 11:20 pm [247]#
       hi adrian rosebrock!
       i have read your post and i think i can run step by step in ubuntu
       12.04:
       1. install python3.5
       2. install tensorflow, keras, theano
       3. download your code in this page.
       4. run python test_id163.py    image images/dog_beagle.png
       please tell me if i am wrong. thank you very much!!!
       [248]reply
          + adrian rosebrock june 16, 2017 at 11:14 am [249]#
            you don   t have to install both tensorflow or theano     just
            pick one. from there, the rest of your steps are correct.
            [250]reply
   40. suranjan goswami september 19, 2017 at 7:59 am [251]#
       first off, this was a very good tutorial for someone like me who is
       beginning to work with python. i ran it on windows 10 using
       anaconda. just 2 things. in the most recent vgg16 architecture, a
       specific line has been changed (which does throw an error, and can
       be modified accordingly. also, the last image (of the crab), no
       longer classifies it as a crab, but instead as a    menu   , which is
       also correct, since there is a (partial menu) in the photo as well.
       [252]reply
   41. janek december 16, 2017 at 6:16 am [253]#
       great article! i   m just wondering if it   s possible to recognize
       human spine with keras and id163? i tried to find proper images
       on id163 but i couldn   t find appropriate for me.
       [254]reply
          + adrian rosebrock december 19, 2017 at 4:34 pm [255]#
            i don   t believe id163 has images of the human spine. you
            should consider [256]gathering your own dataset.
            [257]reply
   42. kay december 19, 2017 at 11:56 pm [258]#
       great tutorial!
       can you please provide step by step guide to train a classifier on
       own dataset using resnet in keras with tensorflow as backend?
       [259]reply
          + adrian rosebrock december 20, 2017 at 9:22 am [260]#
            hi kay     is there a particular dataset you would like to train
            resnet on? for what it   s worth, i explain how to implement
            resnet and train it from scratch (with lots of explanation and
            code) inside [261]deep learning for id161 with
            python. i explain resnet + training using keras and a
            tensorflow backend as well. i would suggest you start there. i
            hope that helps!
            [262]reply
   43. mustafa demir december 25, 2017 at 1:22 am [263]#
       hello,
       i get this error
          importerror: could not import pil.image. the use of array_to_img
       requires pil.
       can you help me pls.
       thanks
       [264]reply
          + adrian rosebrock december 26, 2017 at 4:03 pm [265]#
            make sure you install pil/pillow:
            $ pip install pillow
            [266]reply
   44. raj february 11, 2018 at 10:50 am [267]#
       my work is to create a surveillance camera that detect and
       recognize all the objects. and then it have to track the user
       specified objects. how i have to approach this?
       [268]reply
          + adrian rosebrock february 12, 2018 at 6:24 pm [269]#
            i   m a bit confused. are    all objects    user specified objects?
            if not, are you planning on training a network to recognize
            the objects? keep in mind that a network cannot recognize an
            object if it wasn   t trained on it.
            [270]reply
   45. keerthi february 12, 2018 at 8:18 am [271]#
       hii..
       i work on a project that resembles video surveillance . it has to
       detect and recognize all the objects. and the user mentioned
       objects has to be tracked.
       [272]reply
          + adrian rosebrock february 12, 2018 at 6:11 pm [273]#
            what types of objects are you trying to detect and track? can
            you be more specific?
            [274]reply
   46. radhika july 5, 2018 at 12:52 am [275]#
       i want to detect the speed breakers in road.where can i find the
       classifier xml.
       [276]reply
          + adrian rosebrock july 5, 2018 at 6:16 am [277]#
            what is a    speed breaker   ? perhaps you could provide an
            example image of what one looks like?
            [278]reply
               o radhika march 18, 2019 at 1:36 am [279]#
                 it is a bump or hump in the road.
                 [280]reply
   47. kashif july 11, 2018 at 4:05 am [281]#
       how can i get .caffemodel file
       [282]reply
          + adrian rosebrock july 13, 2018 at 5:20 am [283]#
            this blog post covers pre-trained id163 models for keras.
            take a look at the [284]caffe model zoo for caffe-specific
            models.
            [285]reply
   48. gagandeep december 5, 2018 at 1:02 am [286]#
       dear adrain
       thanx for such a great article
       my question is :- how we can extract x,y coordinates of animals
       from whole image..
       [287]reply
          + adrian rosebrock december 6, 2018 at 9:47 am [288]#
            image classification is not sufficient for extracting the (x,
            y)-coordinates of an object. for that you will need
            [289]id164.
            [290]reply

trackbacks/pingbacks

    1. [291]id163: vggnet, resnet, inception, and xception with keras -
       pyimagesearch - march 20, 2017
       [   ] few months ago i wrote a tutorial on how to classify images
       using convolutional neural networks (specifically, vgg16)
       pre-trained on [   ]

leave a reply [292]click here to cancel reply.

   comment
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________

   ______________________________name (required)

   ______________________________email (will not be published) (required)

   ______________________________website

   submit comment

   search...___________ (search)

resource guide (it   s totally free).

   [293]get your free 17-page id161 and deep learning resource
   guide pdf

   get your free 17 page id161, opencv, and deep learning
   resource guide pdf. inside you'll find my hand-picked tutorials, books,
   courses, and libraries to help you master cv and dl.

                           [294]download for free!

deep learning for id161 with python book     out now!

   [295]deep learning with id161 and python kickstarter

   you're interested in deep learning and id161, but you don't
   know how to get started. let me help. [296]my new book will teach you
   all you need to know about deep learning.

   click here to master deep learning

you can detect faces in images & video.

   [297]learn how to detect faces in images and video

   are you interested in detecting faces in images & video? but tired of
   googling for tutorials that never work? then let me help! i guarantee
   that my new book will turn you into a face detection ninja by the end
   of this weekend. [298]click here to give it a shot yourself.

   click here to master face detection

pyimagesearch gurus: now enrolling!

   the pyimagesearch gurus course is now enrolling! inside the course
   you'll learn how to perform:
     * automatic license plate recognition (anpr)
     * deep learning
     * face recognition
     * and much more!

   click the button below to learn more about the course, take a tour, and
   get 10 (free) sample lessons.

   take a tour & get 10 (free) lessons

hello! i   m adrian rosebrock.

   i'm an entrepreneur and ph.d who has launched two successful image
   search engines, [299]id my pill and [300]chic engine. i'm here to share
   my tips, tricks, and hacks i've learned along the way.

learn id161 in a single weekend.

   [301]become an opencv guru

   want to learn id161 & opencv? i can teach you in a single
   weekend. i know. it sounds crazy, but it   s no joke. my new book is your
   guaranteed, quick-start guide to becoming an opencv ninja. so why not
   give it a try? [302]click here to become a id161 ninja.

   click here to become an opencv ninja

subscribe via rss

   [303]pyimagesearch rss feed

   never miss a post! subscribe to the pyimagesearch rss feed and keep up
   to date with my image search engine tutorials, tips, and tricks
     * [304]popular

     * [305]raspbian stretch: install opencv 3 + python on your raspberry
       pi september 4, 2017
     * [306]install guide: raspberry pi 3 + raspbian jessie + opencv 3
       april 18, 2016
     * [307]home surveillance and motion detection with the raspberry pi,
       python, opencv, and dropbox june 1, 2015
     * [308]install opencv and python on your raspberry pi 2 and b+
       february 23, 2015
     * [309]ubuntu 16.04: how to install opencv october 24, 2016
     * [310]real-time id164 with deep learning and opencv
       september 18, 2017
     * [311]basic motion detection and tracking with python and opencv may
       25, 2015

   find me on [312]twitter, [313]facebook, and [314]linkedin.

      2019 pyimagesearch. all rights reserved.

   [tr?id=1465896023527386&ev=pageview&noscript=1]

   [email]
   [email]

references

   visible links
   1. http://feeds.feedburner.com/pyimagesearch
   2. https://www.pyimagesearch.com/comments/feed/
   3. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/feed/
   4. https://www.pyimagesearch.com/wp-json/oembed/1.0/embed?url=https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/
   5. https://www.pyimagesearch.com/wp-json/oembed/1.0/embed?url=https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/&format=xml
   6. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#navigation
   7. https://www.pyimagesearch.com/
   8. https://www.pyimagesearch.com/
   9. https://www.pyimagesearch.com/
  10. https://www.pyimagesearch.com/start-here-learn-computer-vision-opencv/
  11. https://www.pyimagesearch.com/practical-python-opencv/
  12. https://www.pyimagesearch.com/pyimagesearch-gurus/
  13. https://www.pyimagesearch.com/opencv-tutorials-resources-guides/
  14. https://www.pyimagesearch.com/free-opencv-computer-vision-deep-learning-crash-course/
  15. https://www.pyimagesearch.com/about/
  16. https://www.pyimagesearch.com/contact/
  17. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#top
  18. https://www.pyimagesearch.com/author/adrian/
  19. https://www.pyimagesearch.com/category/deep-learning-2/
  20. https://www.pyimagesearch.com/category/machine-learning-2/
  21. https://www.pyimagesearch.com/category/tutorials/
  22. https://github.com/fchollet
  23. http://caffe.berkeleyvision.org/
  24. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/
  25. http://image-net.org/index
  26. https://id138.princeton.edu/
  27. http://www.image-net.org/challenges/lsvrc/
  28. https://www.pyimagesearch.com/2017/09/25/configuring-ubuntu-for-deep-learning-with-python/
  29. https://www.pyimagesearch.com/2017/09/29/macos-for-deep-learning-with-python-tensorflow-and-keras/
  30. https://www.pyimagesearch.com/2017/09/27/setting-up-ubuntu-16-04-cuda-gpu-for-deep-learning-with-python/
  31. https://python-pillow.org/
  32. https://www.pyimagesearch.com/2016/07/18/installing-keras-for-deep-learning/
  33. https://github.com/fchollet/deep-learning-models
  34. https://keras.io/
  35. https://twitter.com/fchollet
  36. https://www.pyimagesearch.com/tag/id98/
  37. https://www.pyimagesearch.com/tag/convolutional-neural-network/
  38. https://www.pyimagesearch.com/tag/deep-learning/
  39. https://www.pyimagesearch.com/tag/id163/
  40. https://www.pyimagesearch.com/tag/keras/
  41. https://www.pyimagesearch.com/tag/resnet/
  42. https://www.pyimagesearch.com/tag/vgg/
  43. https://www.pyimagesearch.com/2016/08/08/id92-classifier-for-image-classification/
  44. https://www.pyimagesearch.com/2016/08/15/how-to-tune-hyperparameters-with-python-and-scikit-learn/
  45. http://www.untestedhacks.com/
  46. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404042
  47. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404042
  48. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404094
  49. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404094
  50. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404053
  51. https://gist.github.com/joelouismarino/a2ede9ab3928f999575423b9887abd14
  52. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404053
  53. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404093
  54. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404093
  55. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404257
  56. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404257
  57. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404553
  58. https://pythonprogramming.net/tensorflow-deep-neural-network-machine-learning-tutorial/
  59. https://github.com/fchollet/keras-resources
  60. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404553
  61. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-426954
  62. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-426954
  63. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-447096
  64. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-447096
  65. http://virostatiq.com/
  66. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404080
  67. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404080
  68. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404095
  69. http://pjreddie.com/darknet/yolo/
  70. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404095
  71. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-411060
  72. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-411060
  73. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-411309
  74. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-411309
  75. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404124
  76. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404124
  77. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404199
  78. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404199
  79. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-408671
  80. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-408671
  81. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404126
  82. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404126
  83. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-407353
  84. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-407353
  85. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404366
  86. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404366
  87. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404445
  88. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404445
  89. http://nixtrix.blogspot.com/
  90. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404621
  91. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404621
  92. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404772
  93. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404772
  94. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404625
  95. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404625
  96. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404771
  97. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404771
  98. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404727
  99. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404727
 100. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404764
 101. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404764
 102. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404864
 103. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404864
 104. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404880
 105. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-404880
 106. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-405063
 107. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-405063
 108. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-405126
 109. http://stackoverflow.com/questions/12935936/how-to-programatically-access-id138-hierarchy
 110. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-405126
 111. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-405884
 112. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-405884
 113. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-406022
 114. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-406022
 115. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-406693
 116. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-406693
 117. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-406818
 118. https://keras.io/backend/
 119. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-406818
 120. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-407354
 121. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-407354
 122. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-407386
 123. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-407386
 124. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-407394
 125. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-407394
 126. http://apapiu@github.io/
 127. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-407806
 128. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-407806
 129. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-407996
 130. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-407996
 131. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-408431
 132. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-408431
 133. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-408577
 134. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-408577
 135. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-410305
 136. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-410305
 137. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-410372
 138. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-410372
 139. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-410708
 140. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-410708
 141. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-410921
 142. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-410921
 143. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-411041
 144. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-411041
 145. http://non/
 146. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-410968
 147. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-410968
 148. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-411034
 149. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-411034
 150. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-411485
 151. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-411485
 152. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-411492
 153. https://github.com/fchollet/keras/issues
 154. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-411492
 155. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-417972
 156. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-417972
 157. http://www.xyggy.com/
 158. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-411667
 159. https://keras.io/applications
 160. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-411667
 161. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-412025
 162. https://github.com/fchollet/keras/tree/master/keras/applications
 163. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-412025
 164. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-412347
 165. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-412347
 166. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-412363
 167. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-412363
 168. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-426409
 169. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-426409
 170. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-426419
 171. https://www.pyimagesearch.com/2017/03/20/id163-vggnet-resnet-inception-xception-keras/
 172. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-426419
 173. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-412397
 174. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-412397
 175. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-412713
 176. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-412713
 177. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-413666
 178. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-413666
 179. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-413781
 180. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-413781
 181. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-415378
 182. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-415378
 183. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-415474
 184. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-415474
 185. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-415659
 186. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-415659
 187. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-415670
 188. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-415670
 189. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-415678
 190. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-415678
 191. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-415721
 192. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-415721
 193. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-415679
 194. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-415679
 195. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-415720
 196. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-415720
 197. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-419896
 198. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-419896
 199. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-419903
 200. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-419903
 201. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-419920
 202. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-419920
 203. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-420152
 204. https://www.pyimagesearch.com/2018/03/12/python-argparse-command-line-arguments/
 205. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-420152
 206. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-420128
 207. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-420128
 208. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-420131
 209. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-420131
 210. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-420077
 211. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-420077
 212. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-420414
 213. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-420414
 214. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-420966
 215. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-420966
 216. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-420974
 217. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 218. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-420974
 219. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-421534
 220. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-421534
 221. http://abder.io/
 222. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-422717
 223. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-422717
 224. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-422942
 225. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 226. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-422942
 227. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-423835
 228. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-423835
 229. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-424007
 230. https://www.pyimagesearch.com/2017/03/20/id163-vggnet-resnet-inception-xception-keras/
 231. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-424007
 232. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-424047
 233. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-424047
 234. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-424224
 235. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-424224
 236. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-426563
 237. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-426563
 238. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-426675
 239. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-426675
 240. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-427221
 241. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-427221
 242. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-427242
 243. http://pythoncentral.io/execute-python-script-file-shell/
 244. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-427242
 245. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-427417
 246. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-427417
 247. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-427421
 248. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-427421
 249. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-427454
 250. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-427454
 251. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-435181
 252. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-435181
 253. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-443412
 254. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-443412
 255. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-443818
 256. https://www.pyimagesearch.com/2017/12/04/how-to-create-a-deep-learning-dataset-using-google-images/
 257. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-443818
 258. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-443860
 259. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-443860
 260. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-443915
 261. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 262. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-443915
 263. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-444495
 264. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-444495
 265. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-444707
 266. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-444707
 267. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-449920
 268. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-449920
 269. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-450118
 270. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-450118
 271. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-450048
 272. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-450048
 273. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-450105
 274. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-450105
 275. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-470035
 276. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-470035
 277. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-470079
 278. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-470079
 279. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-507412
 280. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-507412
 281. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-470734
 282. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-470734
 283. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-470934
 284. https://github.com/bvlc/caffe/wiki/model-zoo
 285. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-470934
 286. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-490800
 287. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-490800
 288. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-491017
 289. https://www.pyimagesearch.com/2017/09/11/object-detection-with-deep-learning-and-opencv/
 290. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#comment-491017
 291. https://www.pyimagesearch.com/2017/03/20/id163-vggnet-resnet-inception-xception-keras/
 292. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#respond
 293. https://app.monstercampaigns.com/c/mdoijtrmex7bpm0rp2hn/
 294. https://app.monstercampaigns.com/c/mdoijtrmex7bpm0rp2hn/
 295. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 296. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
 297. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-face-detection
 298. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-face-detection
 299. http://www.idmypill.com/
 300. http://www.chicengine.com/
 301. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-single-weekend
 302. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-single-weekend
 303. http://feeds.feedburner.com/pyimagesearch
 304. https://www.pyimagesearch.com/2016/08/10/id163-classification-with-python-and-keras/#tab-pop
 305. https://www.pyimagesearch.com/2017/09/04/raspbian-stretch-install-opencv-3-python-on-your-raspberry-pi/
 306. https://www.pyimagesearch.com/2016/04/18/install-guide-raspberry-pi-3-raspbian-jessie-opencv-3/
 307. https://www.pyimagesearch.com/2015/06/01/home-surveillance-and-motion-detection-with-the-raspberry-pi-python-and-opencv/
 308. https://www.pyimagesearch.com/2015/02/23/install-opencv-and-python-on-your-raspberry-pi-2-and-b/
 309. https://www.pyimagesearch.com/2016/10/24/ubuntu-16-04-how-to-install-opencv/
 310. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/
 311. https://www.pyimagesearch.com/2015/05/25/basic-motion-detection-and-tracking-with-python-and-opencv/
 312. https://twitter.com/pyimagesearch
 313. https://www.facebook.com/pyimagesearch
 314. http://www.linkedin.com/pub/adrian-rosebrock/2a/873/59b

   hidden links:
 316. https://www.pyimagesearch.com/wp-content/uploads/2016/08/id163_example_header.jpg
 317. https://www.pyimagesearch.com/wp-content/uploads/2016/08/id163_example_pip.jpg
 318. https://www.pyimagesearch.com/wp-content/uploads/2016/08/id163_example_downloading.jpg
 319. https://www.pyimagesearch.com/wp-content/uploads/2016/08/id163_example_beagle.jpg
 320. https://www.pyimagesearch.com/wp-content/uploads/2016/08/id163_example_beer.jpg
 321. https://www.pyimagesearch.com/wp-content/uploads/2016/08/id163_example_brown_bear.jpg
 322. https://www.pyimagesearch.com/wp-content/uploads/2016/08/id163_example_keyboard.jpg
 323. https://www.pyimagesearch.com/wp-content/uploads/2016/08/id163_example_monitor.jpg
 324. https://www.pyimagesearch.com/wp-content/uploads/2016/08/id163_example_space_shuttle.jpg
 325. https://www.pyimagesearch.com/wp-content/uploads/2016/08/id163_example_menu.jpg
