   #[1]pyimagesearch    feed [2]pyimagesearch    comments feed
   [3]pyimagesearch    deep dream: visualizing every layer of googlenet
   comments feed [4]alternate [5]alternate

[6]navigation

   [7]pyimagesearch [8]pyimagesearch be awesome at opencv, python, deep
   learning, and id161

   [9]home

main menu

     * [10]start here
     * [11]practical python and opencv
     * [12]pyimagesearch gurus
     * [13]opencv 3 & 4 tutorials
     * [14]free crash course
     * [15]about
     * [16]contact

   [17]return to content

deep dream: visualizing every layer of googlenet

   by [18]adrian rosebrock on august 3, 2015 in [19]deep learning,
   [20]resources

   a few weeks ago i introduced [21]bat-country, my implementation of a
   lightweight, extendible, easy to use python package for deep dreaming
   and inceptionism.

   the reception of the library was very good, so i decided that it would
   be interesting to do a follow up post     but instead of generating some
   really trippy images like on the [22]twitter #deepdream stream, i
   thought it would be more captivating to instead visualize every layer
   of googlenet using bat-country.

   looking for the source code to this post?
   [23]jump right to the downloads section.

visualizing every layer of googlenet with python

   below follows my python script to load an image, loop over every layer
   of the network, and then write each output image to file:
   visualize_layers.py - deep dream: visualizing every layer of googlenet
   python

   # import the necessary packages_____________________________
   from __future__ import print_function_______________________
   from batcountry import batcountry___________________________
   from pil import image_______________________________________
   import numpy as np__________________________________________
   import argparse_____________________________________________
   import warnings_____________________________________________
   import cv2__________________________________________________
   ____________________________________________________________
   # construct the argument parser and parse the arguments_____
   ap = argparse.argumentparser()______________________________
   ap.add_argument("-b", "--base-model", required=true, help="b
   ap.add_argument("-i", "--image", help="path to image file")_
   ap.add_argument("-o", "--output", help="path to output direc
   args = ap.parse_args()______________________________________
   ____________________________________________________________
   # filter warnings, initialize bat country, and grab the laye
   # the id98___________________________________________________
   warnings.filterwarnings("ignore")___________________________
   bc = batcountry(args.base_model)____________________________
   layers = bc.layers()________________________________________
   ____________________________________________________________
   # extract the filename and extension of the input image_____
   filename = args.image[args.image.rfind("/") + 1:]___________
   (filename, ext) = filename.split(".")_______________________
   ____________________________________________________________
   # loop over the layers______________________________________
   for (i, layer) in enumerate(layers):________________________
   	# perform visualizing using the current layer______________
   	print("[info] processing layer `{}` {}/{}".format(layer, i 
   ____________________________________________________________
   	try:_______________________________________________________
   		# pass the image through the network______________________
   		image = bc.dream(np.float32(image.open(args.image)), end=l
   			verbose=false)___________________________________________
   ____________________________________________________________
   		# draw the layer name on the image________________________
   		image = cv2.cvtcolor(image, cv2.color_rgb2bgr)____________
   		cv2.puttext(image, layer, (5, image.shape[0] - 10),_______
   			cv2.font_hershey_simplex, 0.95, (0, 255, 0), 2)__________
   ____________________________________________________________
   		# construct the output path and write the image to file___
   		p = "{}/{}_{}.{}".format(args.output, filename, str(i + 1)
   		cv2.imwrite(p, image)_____________________________________
   ____________________________________________________________
   	except keyerror, e:________________________________________
   		# the current layer can not be used_______________________
   		print("[error] cannot use layer `{}`".format(layer))______
   ____________________________________________________________
   # perform housekeeping______________________________________
   bc.cleanup()________________________________________________
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
   20
   21
   22
   23
   24
   25
   26
   27
   28
   29
   30
   31
   32
   33
   34
   35
   36
   37
   38
   39
   40
   41
   42
   43
   44
   45
   46
   47
   48
   49
   50
   51
   # import the necessary packages
   from __future__ import print_function
   from batcountry import batcountry
   from pil import image
   import numpy as np
   import argparse
   import warnings
   import cv2

   # construct the argument parser and parse the arguments
   ap = argparse.argumentparser()
   ap.add_argument("-b", "--base-model", required=true, help="base model
   path")
   ap.add_argument("-i", "--image", help="path to image file")
   ap.add_argument("-o", "--output", help="path to output directory")
   args = ap.parse_args()

   # filter warnings, initialize bat country, and grab the layer names of
   # the id98
   warnings.filterwarnings("ignore")
   bc = batcountry(args.base_model)
   layers = bc.layers()

   # extract the filename and extension of the input image
   filename = args.image[args.image.rfind("/") + 1:]
   (filename, ext) = filename.split(".")

   # loop over the layers
   for (i, layer) in enumerate(layers):
   # perform visualizing using the current layer
   print("[info] processing layer `{}` {}/{}".format(layer, i + 1,
   len(layers)))

   try:
   # pass the image through the network
   image = bc.dream(np.float32(image.open(args.image)), end=layer,
   verbose=false)

   # draw the layer name on the image
   image = cv2.cvtcolor(image, cv2.color_rgb2bgr)
   cv2.puttext(image, layer, (5, image.shape[0] - 10),
   cv2.font_hershey_simplex, 0.95, (0, 255, 0), 2)

   # construct the output path and write the image to file
   p = "{}/{}_{}.{}".format(args.output, filename, str(i + 1).zfill(4),
   ext)
   cv2.imwrite(p, image)

   except keyerror, e:
   # the current layer can not be used
   print("[error] cannot use layer `{}`".format(layer))

   # perform housekeeping
   bc.cleanup()

   this script requires three command line arguments: the --base-model
   directory where our caffe model lives, the path to our input --image ,
   and finally the --output  directory where our images will be stored
   after being passed through the network.

   as you   ll also see, i am using a try/except  block to catch any layers
   that cannot be used for visualization.

   below is the image that i inputted to the network:
   [24]figure 1: the iconic input image of dr. grant and the t-rex from
   jurassic park.

   figure 1: the iconic input image of dr. grant and the t-rex from
   jurassic park.

   i then executed the python script using the following command:
   deep dream: visualizing every layer of googlenet
   shell

   $ python visualize_layers.py \______________________________
    	--base-model $caffe_root/caffe/models/bvlc_googlenet \____
    	--image images/jp.jpg --output output/jp__________________
   ____________________________________________________________
   1
   2
   3
   $ python visualize_layers.py \
   --base-model $caffe_root/caffe/models/bvlc_googlenet \
   --image images/jp.jpg --output output/jp

   and the visualization process will kick off. i generated my results on
   an [25]amazon ec2 g2.2xlarge instance with gpu support enabled so the
   script finished up within 30 minutes.

   you can see a .gif of all layer visualizations below:
   [26]figure 2: visualizing every layer of googlenet using bat-country.

   figure 2: visualizing every layer of googlenet using bat-country.

   the .gif is pretty large at 9.6mb, so give it a few seconds to load,
   especially if you are on a slow connection.

   in the meantime, here are some of my favorite layers:
   [27]figure 2: this is my far my favorite one of the bunch. the lower
   layers of the network reflect edge-like regions in the input image.

   figure 3: this is my far my favorite one of the bunch. the lower layers
   of the network reflect edge-like regions in the input image.
   [28]figure 3: the inception_3a/3x3 layer also products a nice effect.

   figure 4: the inception_3a/3  3 layer also products a nice effect.
   [29]figure 4: the same goes for the inception_3b/3x3_reduce layer.

   figure 5: the same goes for the inception_3b/3x3_reduce layer.
   [30]figure 4: this one i found amusing -- it seems that dr. grant has
   developed a severe case of dog-ass.

   figure 6: this one i found amusing     it seems that dr. grant has
   developed a severe case of dog-ass.
   [31]figure 6: eventually, our dr. grant and t-rex have morphed into
   something else entirely.

   figure 7: eventually, our dr. grant and t-rex have morphed into
   something else entirely.

summary

   this blog post was a quick    just for fun    tutorial on visualizing every
   layer of a id98 using the [32]bat-country library. it also served as a
   good demonstration on how to use the bat-country  library.

   if you haven   t had a chance to play around with deep dreaming or
   inceptionism,[33] definitely give the original post on bat-country a
   read     i think you   ll find it amusing and enjoyable.

   see you next week!

downloads:

   if you would like to download the code and images used in this post,
   please enter your email address in the form below. not only will you
   get a .zip of the code, i   ll also send you a free 17-page resource
   guide on id161, opencv, and deep learning. inside you'll find
   my hand-picked tutorials, books, courses, and libraries to help you
   master cv and dl! sound good? if so, enter your email address and i   ll
   send you the code immediately!

   email address: ____________________

   download the code!

resource guide (it   s totally free).

   get your free 17-page id161 and deep learning resource guide
   pdf
   enter your email address below to get my free 17-page id161,
   opencv, and deep learning resource guide pdf. inside you'll find my
   hand-picked tutorials, books, courses, and python libraries to help you
   master id161 and deep learning!
   ____________________
   download the guide!

   [34]bat-country, [35]caffe, [36]convolutional neural network, [37]deep
   dreaming, [38]deep learning, [39]deep net, [40]inceptionism,
   [41]library
   [42]installing opencv 3.0 for both python 2.7 and python 3+ on your
   raspberry pi 2
   [43]checking your opencv version using python

12 responses to deep dream: visualizing every layer of googlenet

    1. [44]aaron august 21, 2015 at 2:41 pm [45]#
       hi,
       whats the processing requirements for each picture?
       i   d love to do some real-time video processing.
       [46]reply
          + adrian rosebrock august 22, 2015 at 7:15 am [47]#
            it really depends on the size of the image and whether you are
            using the cpu or the gpu. gpu is immensely faster than the
            cpu. and smaller images are better if you want to process them
            in real-time. lower level layers of network will also be
            faster since each layer requires additional computation. if
            you are trying to do real-time processing, i would suggest
            making your images as small as you can tolerate and using the
            gpu.
            [48]reply
    2. tim august 29, 2015 at 7:11 pm [49]#
       hey adrian,
       have you experimented with other caffe models? or just google   s?
       cheers.
       [50]reply
          + adrian rosebrock august 30, 2015 at 7:55 am [51]#
            i   ve played around with [52]mit places with batcountry, but
            mostly googlenet.
            [53]reply
    3. pawan dhananjay april 27, 2016 at 1:43 pm [54]#
       hi..
       will running on cpu make any difference with respect to the
       visualisations obtained?
       i ran the same code on my laptop without gpu and i am getting very
       hazy visualisations as compared to the ones you have put up!
       [55]reply
          + adrian rosebrock april 28, 2016 at 2:32 pm [56]#
            running on the cpu shouldn   t have any impact on the output
            visualizations     it will just run much, much slower than using
            the gpu.
            [57]reply
    4. xibo july 14, 2016 at 6:00 am [58]#
       i have a question:
       for example the input image is 256  256,
       does the size of the output of the id98 of deep dream is also
       256  256?(for each layer)
       because the convolution layer(for example, the filter is 3  3)
       reduce the size of the image to 254  254
       [59]reply
          + adrian rosebrock july 14, 2016 at 1:08 pm [60]#
            the output image will be the same spatial dimensions as your
            input image.
            [61]reply
    5. xibo july 14, 2016 at 6:02 am [62]#
       the output of each layer of the id98 is a tensor, how to change it
       into a image?
       [63]reply
          + adrian rosebrock july 14, 2016 at 1:07 pm [64]#
            that really depends on your deep learning library. with caffe
            + python, you can use [65]something like this.
            [66]reply
               o xibo july 14, 2016 at 9:05 pm [67]#
                 thanks for answering my questions, i have simple
                 understanding of the output of the id98. and it is
                 depending on the model it uses.
                 [68]reply
    6. praveen vijayan november 27, 2016 at 8:31 am [69]#
       great . helpful article.. thanks
       [70]reply

leave a reply [71]click here to cancel reply.

   comment
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________
   __________________________________________________

   ______________________________name (required)

   ______________________________email (will not be published) (required)

   ______________________________website

   submit comment

   search...___________ (search)

resource guide (it   s totally free).

   [72]get your free 17-page id161 and deep learning resource
   guide pdf

   get your free 17 page id161, opencv, and deep learning
   resource guide pdf. inside you'll find my hand-picked tutorials, books,
   courses, and libraries to help you master cv and dl.

                           [73]download for free!

deep learning for id161 with python book     out now!

   [74]deep learning with id161 and python kickstarter

   you're interested in deep learning and id161, but you don't
   know how to get started. let me help. [75]my new book will teach you
   all you need to know about deep learning.

   click here to master deep learning

you can detect faces in images & video.

   [76]learn how to detect faces in images and video

   are you interested in detecting faces in images & video? but tired of
   googling for tutorials that never work? then let me help! i guarantee
   that my new book will turn you into a face detection ninja by the end
   of this weekend. [77]click here to give it a shot yourself.

   click here to master face detection

pyimagesearch gurus: now enrolling!

   the pyimagesearch gurus course is now enrolling! inside the course
   you'll learn how to perform:
     * automatic license plate recognition (anpr)
     * deep learning
     * face recognition
     * and much more!

   click the button below to learn more about the course, take a tour, and
   get 10 (free) sample lessons.

   take a tour & get 10 (free) lessons

hello! i   m adrian rosebrock.

   i'm an entrepreneur and ph.d who has launched two successful image
   search engines, [78]id my pill and [79]chic engine. i'm here to share
   my tips, tricks, and hacks i've learned along the way.

learn id161 in a single weekend.

   [80]become an opencv guru

   want to learn id161 & opencv? i can teach you in a single
   weekend. i know. it sounds crazy, but it   s no joke. my new book is your
   guaranteed, quick-start guide to becoming an opencv ninja. so why not
   give it a try? [81]click here to become a id161 ninja.

   click here to become an opencv ninja

subscribe via rss

   [82]pyimagesearch rss feed

   never miss a post! subscribe to the pyimagesearch rss feed and keep up
   to date with my image search engine tutorials, tips, and tricks
     * [83]popular

     * [84]raspbian stretch: install opencv 3 + python on your raspberry
       pi september 4, 2017
     * [85]install guide: raspberry pi 3 + raspbian jessie + opencv 3
       april 18, 2016
     * [86]home surveillance and motion detection with the raspberry pi,
       python, opencv, and dropbox june 1, 2015
     * [87]install opencv and python on your raspberry pi 2 and b+
       february 23, 2015
     * [88]ubuntu 16.04: how to install opencv october 24, 2016
     * [89]real-time id164 with deep learning and opencv
       september 18, 2017
     * [90]basic motion detection and tracking with python and opencv may
       25, 2015

   find me on [91]twitter, [92]facebook, and [93]linkedin.

      2019 pyimagesearch. all rights reserved.

   [tr?id=1465896023527386&ev=pageview&noscript=1]

   [email]
   [email]

references

   1. http://feeds.feedburner.com/pyimagesearch
   2. https://www.pyimagesearch.com/comments/feed/
   3. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/feed/
   4. https://www.pyimagesearch.com/wp-json/oembed/1.0/embed?url=https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/
   5. https://www.pyimagesearch.com/wp-json/oembed/1.0/embed?url=https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/&format=xml
   6. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#navigation
   7. https://www.pyimagesearch.com/
   8. https://www.pyimagesearch.com/
   9. https://www.pyimagesearch.com/
  10. https://www.pyimagesearch.com/start-here-learn-computer-vision-opencv/
  11. https://www.pyimagesearch.com/practical-python-opencv/
  12. https://www.pyimagesearch.com/pyimagesearch-gurus/
  13. https://www.pyimagesearch.com/opencv-tutorials-resources-guides/
  14. https://www.pyimagesearch.com/free-opencv-computer-vision-deep-learning-crash-course/
  15. https://www.pyimagesearch.com/about/
  16. https://www.pyimagesearch.com/contact/
  17. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#top
  18. https://www.pyimagesearch.com/author/adrian/
  19. https://www.pyimagesearch.com/category/deep-learning-2/
  20. https://www.pyimagesearch.com/category/resources/
  21. https://www.pyimagesearch.com/2015/07/06/bat-country-an-extendible-lightweight-python-package-for-deep-dreaming-with-caffe-and-convolutional-neural-networks/
  22. https://twitter.com/search?q=#deepdream&src=tyah
  23. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/
  24. https://www.pyimagesearch.com/wp-content/uploads/2015/07/jp.jpg
  25. https://www.pyimagesearch.com/2014/10/13/deep-learning-amazon-ec2-gpu-python-nolearn/
  26. https://www.pyimagesearch.com/wp-content/uploads/2015/06/visualizing-all-googlenet-layers.gif
  27. https://www.pyimagesearch.com/wp-content/uploads/2015/07/jp_0007.jpg
  28. https://www.pyimagesearch.com/wp-content/uploads/2015/07/jp_0016.jpg
  29. https://www.pyimagesearch.com/wp-content/uploads/2015/07/jp_0029.jpg
  30. https://www.pyimagesearch.com/wp-content/uploads/2015/07/jp_0062.jpg
  31. https://www.pyimagesearch.com/wp-content/uploads/2015/07/jp_0096.jpg
  32. https://www.pyimagesearch.com/2015/07/06/bat-country-an-extendible-lightweight-python-package-for-deep-dreaming-with-caffe-and-convolutional-neural-networks/
  33. https://www.pyimagesearch.com/2015/07/06/bat-country-an-extendible-lightweight-python-package-for-deep-dreaming-with-caffe-and-convolutional-neural-networks/
  34. https://www.pyimagesearch.com/tag/bat-country/
  35. https://www.pyimagesearch.com/tag/caffe/
  36. https://www.pyimagesearch.com/tag/convolutional-neural-network/
  37. https://www.pyimagesearch.com/tag/deep-dreaming/
  38. https://www.pyimagesearch.com/tag/deep-learning/
  39. https://www.pyimagesearch.com/tag/deep-net/
  40. https://www.pyimagesearch.com/tag/inceptionism/
  41. https://www.pyimagesearch.com/tag/library/
  42. https://www.pyimagesearch.com/2015/07/27/installing-opencv-3-0-for-both-python-2-7-and-python-3-on-your-raspberry-pi-2/
  43. https://www.pyimagesearch.com/2015/08/10/checking-your-opencv-version-using-python/
  44. https://brokendesk.wordpress.com/
  45. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-348499
  46. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-348499
  47. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-348785
  48. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-348785
  49. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-351635
  50. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-351635
  51. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-351768
  52. http://places.csail.mit.edu/
  53. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-351768
  54. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-395957
  55. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-395957
  56. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-396090
  57. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-396090
  58. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-402112
  59. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-402112
  60. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-402148
  61. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-402148
  62. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-402113
  63. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-402113
  64. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-402147
  65. https://github.com/bvlc/caffe/blob/master/examples/00-classification.ipynb
  66. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-402147
  67. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-402184
  68. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-402184
  69. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-411918
  70. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#comment-411918
  71. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#respond
  72. https://app.monstercampaigns.com/c/mdoijtrmex7bpm0rp2hn/
  73. https://app.monstercampaigns.com/c/mdoijtrmex7bpm0rp2hn/
  74. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
  75. https://www.pyimagesearch.com/deep-learning-computer-vision-python-book/
  76. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-face-detection
  77. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-face-detection
  78. http://www.idmypill.com/
  79. http://www.chicengine.com/
  80. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-single-weekend
  81. https://www.pyimagesearch.com/practical-python-opencv/?src=sidebar-single-weekend
  82. http://feeds.feedburner.com/pyimagesearch
  83. https://www.pyimagesearch.com/2015/08/03/deep-dream-visualizing-every-layer-of-googlenet/#tab-pop
  84. https://www.pyimagesearch.com/2017/09/04/raspbian-stretch-install-opencv-3-python-on-your-raspberry-pi/
  85. https://www.pyimagesearch.com/2016/04/18/install-guide-raspberry-pi-3-raspbian-jessie-opencv-3/
  86. https://www.pyimagesearch.com/2015/06/01/home-surveillance-and-motion-detection-with-the-raspberry-pi-python-and-opencv/
  87. https://www.pyimagesearch.com/2015/02/23/install-opencv-and-python-on-your-raspberry-pi-2-and-b/
  88. https://www.pyimagesearch.com/2016/10/24/ubuntu-16-04-how-to-install-opencv/
  89. https://www.pyimagesearch.com/2017/09/18/real-time-object-detection-with-deep-learning-and-opencv/
  90. https://www.pyimagesearch.com/2015/05/25/basic-motion-detection-and-tracking-with-python-and-opencv/
  91. https://twitter.com/pyimagesearch
  92. https://www.facebook.com/pyimagesearch
  93. http://www.linkedin.com/pub/adrian-rosebrock/2a/873/59b
