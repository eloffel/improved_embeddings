   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]towards data science
     * [9]data science
     * [10]machine learning
     * [11]programming
     * [12]visualization
     * [13]ai
     * [14]data journalism
     * [15]contribute
     __________________________________________________________________

building a toy detector with tensorflow id164 api

   [16]go to the profile of priya dwivedi @ deep learning analytics
   [17]priya dwivedi @ deep learning analytics (button) blockedunblock
   (button) followfollowing
   sep 22, 2017

   doing cool things with data!

   this project is second phase of my popular project -[18]is google
   tensorflow id164 api the easiest way to implement image
   recognition? in the original article i used the [19]models provided by
   tensorflow to detect common objects in youtube videos. these models
   were trained on the [20]coco dataset and work well on the 90 commonly
   found objects included in this dataset.

   here i extend the api to train on a new object that is not part of the
   coco dataset. in this case i chose a toy that was lying around. see gif
   below. so far, i have been impressed by the performance of the api. the
   steps highlighted here can be extended to any single or multiple object
   detector that you want to build.
   [1*726b_wruqywum_5n3tqg8q.gif]
   tensorflow toy detector~

   you can find the code on my [21]github repo
    1. collecting data

   the first step is collecting images for your project. you could
   download them from google ensuring you have a wide variation in angles,
   brightness, scale etc. in my case i created a video of the little
   aeroplane toy and used [22]opencv to extract images from the video.
   this saved me a lot of time. i ensured that images were taken from
   multiple angles. you can also randomly change brightness for some of
   the images so that the detector can work under different conditions of
   lightning. overall 100   150 pics will suffice. see some sample images
   below:
   [1*bjwsm_wacmzfm3xllfs2kq.jpeg]
   sample images

   ps: since video was taken from my iphone, the original images were
   pretty big         1920x1090. this would have required a lot of memory so
   used [23]pil resize to resize them to 500x300 kind of keeping the
   aspect ratio.

   2. annotating the images

   i used[24] labelimg to annotate the images. this is a very handle tool
   and annotations are created in the pascal voc format which is useful
   later on. it is written in python and uses qt for interface. i used
   python3 + qt5 with no problems. see example of annotated image.
   essentially we identify xmin, ymin, xmax and ymax for the object and
   pass that to the model along with the image for training
   [1*j1juaozx49an4dg_xmpovw.png]
   annotating using labelimg

   3. creating the tfr datasets

   tensorflow api wants the datasets to be in [25]tfrecord file format.
   this is probably the trickiest part. however tensorflow has provided a
   couple of handy scripts to get you
   started         [26]create_pascal_tf_record.py and
   [27]create_pet_tf_record.py. i was able to used the
   [28]create_pet_tf_record.pywith minimal edits since labelimg already
   creates annotations in the correct format. i also like that this script
   randomly takes 30% of the data and creates a validation tfr file.

   you will also need to create a label.pbtxt file that is used to convert
   label name to a numeric id. for my case it was as simple as
item {
 id: 1
 name:    toy   
}

   i have included the label_map.pbtxt file and the
   create_pet_tf_records.py file on my github. in case you are getting
   stuck anywhere, i highly recommend the [29]oxfort pets walkthrough
   provided by tensorflow.

   4. creating a model config file

   once the tfr datasets are created, then first you need to decide if you
   will use an existing model and fine tune it or build from scratch. i
   highly recommend using an existing model since most of the features
   that are learnt by id98s are often object agnostic and fine tuning an
   existing model is usually an easy and accurate process. please note
   that if you do decide to build from scratch you will need much more
   than 150 images and training will take days. the api provides 5
   different models that provide a trade off between speed of execution
   and the accuracy in placing bounding boxes. see table below:
   [1*-eyxss2oiywm-e6mspsjia.png]
   tensorflow detection models

   for this project i decided to use the faster_rid98_resnet101 that was
   trained on coco dataset. this is a very nice [30]link if you want to
   learn more about rid98 models.

   tensorflow provides several [31]sample config files to get started. i
   decided to use the faster_rid98_resnet101_coco file and updated any
   paths that need to be configured in the file.don   t forget to update the
   num. of classes too.

   5. training the model

   finally! all the hard (and boring) part is done and we can start
   training the model. since i have a reasonable gpu, i decided to train
   locally. however you can train on the cloud. again tensorflow
   documentation has made this easy and provided all the [32]steps.

   you can start the training job and the evaluation jobs on two separate
   terminals at the same time. and initiate tensorboard to monitor
   performance. after training for 2   3 hours, i could see total loss get
   down to 0.077 and precision up to 0.99. by looking at images in
   tensorboard we can see that model becomes accurate fairly quickly.
   [1*g_tkrhz6gw8zllbnjafnoa.png]
   [1*o-new733ol0lxamegbn-fg.png]
   [1*wq1-fvsmlm2fn-rtbgyn3g.gif]
   model gets accurate pretty quickly

   6. testing the model

   to test the model, we first select a model checkpoint (usually the
   latest) and export into a frozen id136 graph. the script for this
   is also on my github. i tested the model on a new video recorded on my
   iphone. as in my [33]previous article, i used the python moviepy
   library to parse the video into frames and then run object detector on
   each frame and collate results back into the video.

next steps

   couple of things i noticed and additional explorations for the future
     * during testing, i found the faster rid98 model was a bit slow. next,
       i will explore using the fastest model         ssd mobilenet and see if
       there is a noticeable decrease in accuracy
     * for this model, i just used the default parameters in the model
       config file for faster_rid98_resnet101_coco. might be worth
       exploring if they can be tweaked for a better performance
     * with a little more effort, this process can be extended to
       additional categories

   give me a        if you liked this post:) hope you pull the code and try it
   yourself.

   i have my own deep learning consultancy and love to work on interesting
   problems. i have helped many startups deploy innovative ai based
   solutions. check us out at         [34]http://deeplearninganalytics.org/.

   you can also see my other writings at:
   [35]https://medium.com/@priya.dwivedi

   if you have a project that we can collaborate on, then please contact
   me through my website or at info@deeplearninganalytics.org

   references:
     * [36]google tensorflow id164 github
     * fantastic [37]article on medium that gave me inspiration and some
       useful tips

     * [38]machine learning
     * [39]deep learning
     * [40]data science
     * [41]artificial intelligence
     * [42]towards data science

   (button)
   (button)
   (button) 3.2k claps
   (button) (button) (button) 41 (button) (button)

     (button) blockedunblock (button) followfollowing
   [43]go to the profile of priya dwivedi @ deep learning analytics

[44]priya dwivedi @ deep learning analytics

   [45]http://www.deeplearninganalytics.org/

     (button) follow
   [46]towards data science

[47]towards data science

   sharing concepts, ideas, and codes.

     * (button)
       (button) 3.2k
     * (button)
     *
     *

   [48]towards data science
   never miss a story from towards data science, when you sign up for
   medium. [49]learn more
   never miss a story from towards data science
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://towardsdatascience.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/63c0fdf2ac95
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://towardsdatascience.com/building-a-toy-detector-with-tensorflow-object-detection-api-63c0fdf2ac95&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://towardsdatascience.com/building-a-toy-detector-with-tensorflow-object-detection-api-63c0fdf2ac95&source=--------------------------nav_reg&operation=register
   8. https://towardsdatascience.com/?source=logo-lo_yqqtgkea5j8r---7f60cf5620c9
   9. https://towardsdatascience.com/data-science/home
  10. https://towardsdatascience.com/machine-learning/home
  11. https://towardsdatascience.com/programming/home
  12. https://towardsdatascience.com/data-visualization/home
  13. https://towardsdatascience.com/artificial-intelligence/home
  14. https://towardsdatascience.com/data-journalism/home
  15. https://towardsdatascience.com/contribute/home
  16. https://towardsdatascience.com/@priya.dwivedi?source=post_header_lockup
  17. https://towardsdatascience.com/@priya.dwivedi
  18. https://medium.com/towards-data-science/is-google-tensorflow-object-detection-api-the-easiest-way-to-implement-image-recognition-a8bd1f500ea0
  19. https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/detection_model_zoo.md
  20. http://cocodataset.org/#home
  21. https://github.com/priya-dwivedi/deep-learning/tree/master/tensorflow_toy_detector
  22. https://stackoverflow.com/questions/33311153/python-extracting-and-saving-video-frames
  23. http://pillow.readthedocs.io/en/3.1.x/reference/image.html
  24. https://github.com/tzutalin/labelimg
  25. https://www.tensorflow.org/api_guides/python/python_io#tfrecords_format_details
  26. https://github.com/tensorflow/models/blob/master/research/object_detection/create_pascal_tf_record.py
  27. https://github.com/tensorflow/models/blob/master/research/object_detection/create_pet_tf_record.py
  28. https://github.com/tensorflow/models/blob/master/research/object_detection/create_pet_tf_record.py
  29. https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/running_pets.md
  30. https://blog.athelas.com/a-brief-history-of-id98s-in-image-segmentation-from-r-id98-to-mask-r-id98-34ea83205de4
  31. https://github.com/tensorflow/models/tree/master/research/object_detection/samples/configs
  32. https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/running_on_cloud.md
  33. https://medium.com/towards-data-science/is-google-tensorflow-object-detection-api-the-easiest-way-to-implement-image-recognition-a8bd1f500ea0
  34. http://deeplearninganalytics.org/
  35. https://medium.com/@priya.dwivedi
  36. https://github.com/tensorflow/models/tree/master/research/object_detection
  37. https://medium.com/towards-data-science/how-to-train-your-own-object-detector-with-tensorflows-object-detector-api-bec72ecfe1d9
  38. https://towardsdatascience.com/tagged/machine-learning?source=post
  39. https://towardsdatascience.com/tagged/deep-learning?source=post
  40. https://towardsdatascience.com/tagged/data-science?source=post
  41. https://towardsdatascience.com/tagged/artificial-intelligence?source=post
  42. https://towardsdatascience.com/tagged/towards-data-science?source=post
  43. https://towardsdatascience.com/@priya.dwivedi?source=footer_card
  44. https://towardsdatascience.com/@priya.dwivedi
  45. http://www.deeplearninganalytics.org/
  46. https://towardsdatascience.com/?source=footer_card
  47. https://towardsdatascience.com/?source=footer_card
  48. https://towardsdatascience.com/
  49. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  51. https://medium.com/p/63c0fdf2ac95/share/twitter
  52. https://medium.com/p/63c0fdf2ac95/share/facebook
  53. https://medium.com/p/63c0fdf2ac95/share/twitter
  54. https://medium.com/p/63c0fdf2ac95/share/facebook
