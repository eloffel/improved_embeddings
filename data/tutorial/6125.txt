   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]basecs
     * [9]fundamentals
     * [10]data structures
     * [11]algorithms
     * [12]theory in practice
     __________________________________________________________________

deep dive through a graph: dfs traversal

   go to the profile of vaidehi joshi
   [13]vaidehi joshi (button) blockedunblock (button) followfollowing
   sep 25, 2017
   [1*gb8xfmh7x8fjnimexk4uhg.jpeg]
   depth-first search graph traversal

   for better or for worse, there   s always more than one way to do
   something. luckily for us, in the world of software and computer
   science, this is generally a very good thing   .

   and why is it good? well, for one, i   m a big fan of options and having
   many of them to choose from. but really, it all comes down to different
   types of problems         some of which can seem similar to things we   ve seen
   before         and the various solutions that fit best to solve them. this is
   certainly the case for the seemingly simplest of problems: take
   sorting, for example. as we learned early on in this series, there so
   many different methods of doing [14]something as basic as sorting a
   series of numbers and putting them in order. in fact, the multiplicity
   of options is often exactly what makes a task that ought to be    basic   
   seem far more complicated.

   here   s the thing, though: if we can get manage to climb over the hump
   of over-complication and somehow make it over to the other side, then
   we can start to see that all of these various solutions arose from a
   need to solve similar, but ever-so-slightly different problems. that
   was certainly the case with the origins of many of the sorting
   algorithms we know (and hopefully love!), and it   s the case with graph
   traversal algorithms, too. last week, we learned about one approach to
   the problem of walking through a graph: [15]breadth-first search.
   today, we   ll flip this approach on its head, and look at a solution
   that is similar, and yet also the inverse of bfs.

   so, without further ado: let   s dive right into the deep end, shall we?

a primer, before going deep

   a helpful first step in knowing how any algorithm works and what it
   does is by knowing what the algorithm does not do. in other words, when
   we   re learning something new, it can be useful to compare the new thing
   that we   re learning to the things that we already know well and feel
   fairly comfortable with.

   this is particularly the case when we start getting into more complex
   algorithms, like graph traversal algorithms. so, let   s start with a
   definition, and then see how depth-first search compares to the other
   graph traversal algorithm that we are already familiar with:
   breadth-first search.
   [1*r8nv9nugvqfdnehq3s9ctw.jpeg]
   depth-first search: a definition

   the depth-first search algorithm allows us to determine whether two
   nodes, node x and node y, have a path between them. the dfs algorithm
   does this by looking at all of the children of the starting node, node
   x, until it reaches node y. it does this by recursively taking the same
   steps, again and again, in order to determine if such a path between
   two nodes even exists.

   now, if we contrast dfs to [16]what we know about bfs, or breadth-first
   search, we   ll start to see that, while these two algorithms might seem
   similar, they are fundamentally doing two very distinct things. the
   striking difference between the two algorithms is the way they approach
   the problem of walking or traversing through the graph. as we
   discovered last week, the bfs algorithm will traverse through a graph
   one level at a time, visiting all the children of any given
   vertex         the neighboring nodes that are equidistant in how far away
   from the    parent    node in the graph.
   [1*ri9egm7xlmrzmywgwt96pq.jpeg]
   comparing dfs to bfs graph traversal

   however, depth-first search takes a different approach: it traverse
   down one single path in a graph, until it can   t traverse any further,
   checking one child node at a time.

     the depth-first algorithm sticks with one path, following that path
     down a graph structure until it ends. the breadth-first search
     approach, however, evaluates all the possible paths from a given
     node equally, checking all potential vertices from one node
     together, and comparing them simultaneously.

   like architecture and biology, in this case, the old adage rings true:
   form really does follow function. that is to say, the way that both of
   these algorithms are designed help give us clues as to what their
   strengths are! breadth-first search is crafted to help us determine one
   (of sometimes many) shortest path between two nodes in the graph. on
   the other hand, depth-first search is optimized not to tell us if a
   path is the shortest or not, but rather to tell us if the path even
   exists!

   and, as we can probably imagine, different situations, problems, and
   graphs will lead us to choose one of these algorithms over another.
   but, we   ll come back to this later on. for now, let   s just focus on
   getting to know depth-first search a little better.

   depth-first search is a particularly interesting algorithm because it   s
   likely that we   ve all used some variation of it at some point in our
   lives, whether we realized it or not. the easiest way to reason about
   depth-first search in a graph is to simplify it into a much easier
   problem.
   [1*cskjkpvmaladnd2wmyjena.jpeg]
   depth-first search: solving a maze

   the dfs algorithm is much like solving a maze. if you   ve ever been to a
   real-life maze or found yourself solving one on paper, then you know
   that the trick to solving a maze centers around following a path until
   you can   t follow it anymore, and then backtracking and retracing your
   steps until you find another possible path to follow.

   at its core, that   s all that the depth-first search algorithm really
   is: a method of getting out of a maze! and, if we envision every graph
   as a maze, then we can use dfs to help us    solve    and traverse through
   it.

   using this metaphor, when we employ dfs, all we   re really doing is
   continuing to walk through the path of a graph until we reach a dead
   end. if and when we reach a dead end, we backtrack until we find
   another path that we haven   t yet traversed through or walked down, and
   repeat the process. eventually, we   ll be able to determine whether or
   not we can get out of the maze         that is to say, whether or not a path
   between the starting node and the ending node exists.

   one interesting thing to note before we start putting all this dfs
   theory into practice: the process of backtracking at a dead end and
   then repeating the walk down one single path of a graph is actually
   just recursion! we   re taking the same action again and again and, in
   programmatic terms, this would end up being a recursive function call,
   or a function that calls itself until it hits some sort of base case.
   as we   ll see in a moment, recursion plays a big part in how dfs
   actually runs.

depth-first, in action

   exactly like what we saw in [17]last week   s exploration of bfs, we can
   start our traversal of a graph with dfs in a similar fashion         wherever
   we want!

   when it comes to both breadth-first search and depth-first search,
   there are only two major points to keep in mind when initiating a graph
   traversal: first, we can choose any arbitrary node to start our
   traversal with, since there is no concept of a    root    nodes the way
   that there are in tree structures. and second, whatever we do, we want
   to ensure that we don   t repeat any nodes; that is to say, once we
      visit    a node, we don   t want to visit it again. similar to what we did
   with the breadth-first search algorithm, we   ll mark every vertex we
   visit as    visited    in order to ensure that we don   t repeat nodes in our
   traversal unnecessarily.
   [1*c0rdugzehmkfugo8nqcdkw.jpeg]
   how could we run dfs to explore a directed graph?

   so, let   s try to run a dfs algorithm on the directed graph above, which
   has seven nodes that we   ll end up needing to check, or    visit    in the
   course of our graph traversal.

   we can arbitrarily choose any node to start with, let   s choose node a
   as our starting    parent    node. since we know that depth-first search is
   all about finding out whether a path exists or not between two nodes,
   we   ll want to be sure that we can keep track of where we came from as
   we walk through our graph         in other words, we   ll need to keep some
   kind of trail of    breadcrumbs    as we traverse.
   [1*rte7silnqd0kmkigvo3i1g.jpeg]
   dfs, part 1

   for every node that we visit, we   ll keep track of where we came from
   and use that to both backtrack when we need to, and also as an easy way
   to keep track of the path that we   re constructing through the graph.
   when we choose node a as our    parent    node, we   ll set a parent pointer
   reference, just like we did with our bfs algorithm. since the    parent   
   vertex is the first one we   re visiting in this algorithm, it doesn   t
   have a    parent    pointer, since we   re not coming from anywhere!

   so, we   ll set node a's parent pointer to null, and mark node a as
      visited   . a simple way to keep track of which node we   re currently
   searching through is by employing [18]a stack data structure. the
   moment that we check node a, we can push it right on top of our stack.
   since our stack is empty to start with, node a is the only element
   that   s actually in our stack. we   ll mark it as    visited   .

   next, we   ll want to (recursively) visit every single node that is
   reachable from node a. just as it doesn   t matter which node we start
   with, it doesn   t really matter which neighboring vertex we visit
   next         just as long as the vertex is reachable, and is one of the
   neighbors of a. for example, we could arbitrarily choose to visit node
   c next.
   [1*ku4di0nvgwoprmugzimj3g.jpeg]
   dfs, part 2

   we   d push it onto the stack, which now contains two elements         a
   reference to node a as well as a reference to node c   and we   ll visit
   the node that is currently on top of the stack. in the process, we   ll
   set its parent pointer to the vertex that we just came from: node a.
   [1*tdetb8hzwxr6ot_0thgygw.jpeg]
   dfs, part 3

   now that we   ve visited node c, there   s only one thing left to do:
   lather, rinse, and repeat! okay, okay         you can skip the first two.
   really all we need to do here is just repeat the process (suds
   optional, obviously).

   for example, since we can choose any node that is reachable from node
   c, we could choose node d as the next node we visit. we   ll add it to
   the top of the stack, mark it as    visited   , and set its parent pointer.

   from node d, we   ll visit node e: add it to the stack, mark as
      visited   , and finally, set its parent pointer to the node we just came
   from: node d.

   but now we have a problem: we can   t repeat this process because there   s
   simply nowhere to go from node e!

     we   ve gone as deep as we can down this particular path from the node
     that we started with, and we   ve hit a dead end; that is to say,
     we   ve reached a node with no reachable vertices!

   given our conundrum, let   s pause for a moment and take a look at our
   stack of    visited    nodes, which has the following nodes on it: e, d, c,
   and a, in that order, from the top of the stack to the bottom. since
   there is nowhere to go from node e, we effectively have no other node
   to visit, which means that we have no other node to add to the top of
   the stack. at least, given where we currently are, at node e. but, node
   d, the second element in the stack might have somewhere to go, right?

   and this is exactly where the backtracking and the idea of
      breadcrumbs    comes into play         not to mention recursion! when we   ve
   gone as deep as possible down the graph, we can backtrack one step (one
   vertex) at a time, and check to see if there are any other paths that
   we could possibly take.

   so, since we can   t search through any paths from vertex e (since none
   exist), we   ll pop vertex e off of the top of the stack once we   re
   finished with it. this leaves node d at the top of the stack, so we   ll
   repeat the same process again         that is to say, we   ll check to see if
   any of node d's neighbors can be visited and if there is a path down
   the graph from that node.
   [1*vxu_4ysdmtqvuaz30oi5ba.jpeg]
   dfs, part 4

   once we backtrack from node e to d, we   ll notice that there   s only one
   direction for us to go; there is only one node to check, which is node
   f. we   ll add it to the top of the stack, mark it as visited, and check
   to see if it has any children that we an visit.

   we   ll notice that, after we backtracked and changed which node we were
   checking, looking at, or    visiting   , the top of the stack changed. we
   popped off some nodes, and added on others, but the main parent node
   remained the same. we repeated the same steps again and again, with
   each node that was added to the top of the stack         and those steps were
   the same things we checked for the parent node, vertex a, when we added
   it to the stack when we first started out! this is recursion coming
   into play.
   [1*hiptdpgzntgr5e05v7z9lq.jpeg]
   dfs, part 5

   from node f, we have no choice but to visit g, which is the only
   accessible node         the only one that is available for us to visit. so,
   we   ll add g to the top of our stack, visit it, and check to see where
   we can go from there.

   as it turns out, from node g, there is only one place for us to go:
   node c. however, since we were smart enough to keep track of the nodes
   that we visited, we already know that c has been visited and is part of
   this path; we don   t want to visit it again! so, we   ve come to another
   dead end, which means that we can backtrack. we   ll pop off node g from
   the stack, check to see if the next node has any other children we can
   traverse through. as it turns out, node f doesn   t have any child nodes
   that we haven   t already visited, nor do nodes d and c; so, we   ll pop
   all of them off from the top of the stack.

   eventually, we   ll find that we   ve backtracked our way all the way to
   our original    parent    node, node a. so, we   ll repeat the process again:
   we   ll check to see which of its children we can visit, which we haven   t
   already visited before. since we   ve already visited nodes c and g, the
   last remaining option is to visit b.

   again, we   ll do what we   ve done with every single node thus far: add
   node b to the top of the stack, mark it as    visited   , and check to see
   if it has any children that we can traverse through that haven   t been
   visited yet. however, node b's children are e and d, and we   ve visited
   both already, which means that we   ve actually visited all of the nodes
   in this graph! in other words, our depth-first graph traversal is
   officially complete for this structure.

   we   ll notice that, with each node that we pushed and later popped off
   the stack, we repeated the same steps from within our depth-first
   search algorithm. indeed, what we were really doing was recursively
   visiting nodes. effectively, every time that we reached a new node, we
   took these steps:
    1. we added the node to the top of the    visited    vertices stack.
    2. we marked it as    visited   .
    3. we checked to see if it had any children         and if it did, we
       ensured that they had not been visited already, and then visited
       it. if not, we popped it off the stack.

   with every new node added to the stack, we repeated these steps from
   within the context of the previous node (or previous function call) on
   the stack. in other words, we recursively visited each node down the
   path, until we reached a dead end.

   as it turns out, this recursive repetition of visiting vertices is the
   main characteristic of most implementations of the depth-first search
   algorithm!

real-life recursion and runtime

   the recursion of the dfs algorithm stems from the fact that we don   t
   actually finish checking a    parent    node until we reach a dead end, and
   inevitably pop off one of the    parent    node   s children from the top of
   the stack.
   [1*v5_q4oxzg-n_xj2wztvevg.jpeg]
   recursion as applied to dfs runtime

   we can think of the recursive aspect of dfs as a function call to
      visit    a node within another, already-running function call to    visit   
   a node. for example, when we begin visiting node a, we are still in the
   process of visiting node a when we start visiting one of its children,
   like node c.

   and yet, despite the recursion that is built-in to depth-first search,
   the runtime of this algorithm in real life isn   t actually too terribly
   affected by the recursive aspect of this graph traversal technique. in
   fact, even with the recursion, the process of visiting every vertex in
   the graph once takes constant time. so, if checking a vertex once isn   t
   the expensive part of this algorithm   then what is?

   the answer is lies in the edges         more specifically, the price of
   checking the outgoing edges from each vertex that we visit can turn out
   to be both pretty expensive, and time-consuming. this is because some
   nodes could have only one neighboring vertex to check, and thus, only
   one edge, while other nodes could have five, or ten, or many more edges
   to check! so, really, the runtime of checking every outgoing edge from
   one vertex to another depends solely upon the size/length of any given
   node   s adjacency linked list, which is calculated as linear time.
   [1*zzw5vrjhbyk_rxkl3t-s3a.jpeg]
   we could apply dfs in the same way on an undirected graph

   we   ll recall from [19]the basics of id207 that a graph can have
   either undirected or directed edges. just as undirected and directed
   graphs had slightly different runtimes based on whether the edges
   appeared once or twice in the adjacency list representation of [20]a
   graph for breadth-first search, it   s a similar story here, too.

   in fact, we could have applied dfs in the exact same way to the same
   graph we   ve been dealing with, even if it were undirected. the only
   major difference would have been the fact that, when considering which
   vertex to    visit    next while running dfs, each edge in the graph would
   have been considered twice.
   [1*d-cseblyreokyxg5-dnefg.jpeg]
   depth-first search and linear runtime

   thus, the actual runtime of dfs is actually no different than that of
   bfs: they both take linear time, with the slight differentiation being
   the number of edges (the length of the adjacency linked list) of the
   graph, based on whether the graph is directed or undirected. for a
   directed graph, the runtime amounts to a runtime of o(v + |e|), while
   for an undirected graph, the runtime is calculated as o(v + 2|e|), both
   of which result in linear time.

   but wait         how does all of this theoretical recursion tie back into the
   actual implementation of this algorithm? we already know [21]how graphs
   are represented using adjacency lists. we also know how to use those
   representations to [22]make sense of other algorithms, like
   breadth-first search. so how can we make sense of the depth-first
   algorithm in a similar way?

   well, let   s think about what would happen when we run dfs on the
   adjacency list representation of this same graph. the image below
   illustrates what that adjacency list might look like.
   [1*kymrbn0vd1yuylokyj2jaq.jpeg]
   implementing dfs using an adjacency list, part 1

   when we first visit our    parent    node a, we added it to our stack, and
   marked it as visited. in the context of our adjacency list, we are
   marking our    visited array   , and flagging the index of the vertex we
   just pushed onto our stack (index 0), marking its    visited    status as
   true.

   next, we   ll take a look at the first item in node a's adjacency linked
   list. in this case, the first item in the list is a reference to the
   item at index 2, which is node c. we   ll visit node c next, and, in the
   process, we   ll put the rest of the work of iterating through node a's
   adjacency linked list    on hold   . in other words, we   re going to look up
   the node at index 2 next, rather than iterate through the rest of node
   a's adjacency linked list and look at whatever element happens to be at
   index 1.

   since the next step is to mark the node at index 2 as visited, we   ll do
   exactly that. the vertex at index 2 is node c, so we   ll add it to our
   stack, mark it as visited, and check its first neighbor in its
   adjacency linked list. we   ve already gone through these steps
   previously, so let   s skip to the point where we hit the dead end and
   have to backtrack back up to the    parent    node         that   s where things
   get interesting!
   [1*plyoomtsfp6mpkxe1vom0g.jpeg]
   implementing dfs using an adjacency list, part 2

   after we   ve traversed down all the way to check and visit node g, we
   hit a dead end, and backtrack back up to node a, located at index 0. it
   is only at this point that we pick up where we left off; that is to
   say, we   ll continue now with the process of iterating through node a's
   adjacency linked list (finally!).

   the next element in node a   s adjacency linked list is a reference to
   the index 1, which is a reference to the vertex b. at this point, we   ll
   also notice that the entire    visited    array is marked with true's
   everywhere, with only one exception: vertex b. this means that once we
   check node b and mark it as    visited   , we will have traversed through
   the whole graph and voil           we   re done!

   that wasn   t too terrible, was it?
   [1*za_gw1vpyk_jyhcmsph63a.jpeg]
   depth-first vs breadth-first: pros and cons

   the differences between depth-first search and breadth-first search can
   be subtle at first and tricky to notice at first! they both can be
   implemented on an adjacency list representation of a graph, and they
   each result in the same runtime, and involve iterating through the
   adjacency list of every vertex within a graph. however, there are
   slight differences in their implementation that we can start to pick up
   on once we see each of these algorithms in action.

   the important thing to remember about both of these algorithms is that
   neither one is necessarily better than the other. for example,
   depth-first search is great in determining whether a path exists
   between two nodes, and doesn   t necessarily require a lot memory, since
   the entire graph doesn   t need to be initialized or instantiated in
   order to traverse through it. however, dfs isn   t helpful in finding a
   shortest path between two nodes; indeed, we might end up inadvertently
   finding the longest path! in comparison, bfs is great at finding the
   shortest path between two nodes, but often requires us to store the
   entire graph as we search through it, level by level, which can cost a
   lot in space and memory.

   each solution has its benefits and drawbacks. but, they are two
   different ways of solving a problem and, depending on what kind of
   problem we have, they might just end up being the perfect tool for the
   job.

resources

   depth-first search can be explained and implemented in a few different
   ways, and trying to understand all of them         at least, when you   re
   first learning the dfs algorithm         can feel overwhelming. however, once
   you   re more comfortable and familiar with how it works, it   s helpful to
   know the different implementations and idiosyncrasies of how dfs works.
   if you   re looking to gain a deeper understanding of this algorithm,
   here are some good examples and implementations to help you get
   started.
    1. [23]depth-first search (dfs) on graphs part 2, sesh venugopal
    2. [24]depth-first search, department of computer science, harvard
    3. [25]when is it practical to use dfs vs bfs?, stackoverflow
    4. [26]depth-first search (dfs), topological sort, mit opencourseware
    5. [27]graph traversals         breadth first and depth first, collegequery

     * [28]programming
     * [29]data structures
     * [30]algorithms
     * [31]computer science
     * [32]tech

   (button)
   (button)
   (button) 3.7k claps
   (button) (button) (button) 13 (button) (button)

     (button) blockedunblock (button) followfollowing
   go to the profile of vaidehi joshi

[33]vaidehi joshi

   medium member since feb 2019

   writing words, writing code. sometimes doing both at once.

     (button) follow
   [34]basecs

[35]basecs

   exploring the basics of computer science, every monday, for a year.

     * (button)
       (button) 3.7k
     * (button)
     *
     *

   [36]basecs
   never miss a story from basecs, when you sign up for medium. [37]learn
   more
   never miss a story from basecs
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://medium.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/8177df5d0f13
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://medium.com/basecs/deep-dive-through-a-graph-dfs-traversal-8177df5d0f13&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://medium.com/basecs/deep-dive-through-a-graph-dfs-traversal-8177df5d0f13&source=--------------------------nav_reg&operation=register
   8. https://medium.com/basecs?source=logo-lo_k2p6wihbgjuw---9bf4a8406d1d
   9. https://medium.com/basecs/tagged/fundamentals
  10. https://medium.com/basecs/tagged/data-structures
  11. https://medium.com/basecs/tagged/algorithms
  12. https://medium.com/basecs/tagged/theory-in-practice
  13. https://medium.com/@vaidehijoshi
  14. https://medium.com/basecs/sorting-out-the-basics-behind-sorting-algorithms-b0a032873add
  15. https://medium.com/basecs/going-broad-in-a-graph-bfs-traversal-959bd1a09255
  16. https://medium.com/basecs/going-broad-in-a-graph-bfs-traversal-959bd1a09255
  17. https://medium.com/basecs/going-broad-in-a-graph-bfs-traversal-959bd1a09255
  18. https://medium.com/basecs/stacks-and-overflows-dbcf7854dc67
  19. https://medium.com/basecs/a-gentle-introduction-to-graph-theory-77969829ead8
  20. https://medium.com/basecs/going-broad-in-a-graph-bfs-traversal-959bd1a09255
  21. https://medium.com/basecs/from-theory-to-practice-representing-graphs-cfd782c5be38
  22. https://medium.com/basecs/going-broad-in-a-graph-bfs-traversal-959bd1a09255
  23. https://www.youtube.com/watch?v=ut1p5eiw9ce
  24. https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/lecture-videos/mit6_006f11_lec14_orig.pdf
  25. https://stackoverflow.com/questions/3332947/when-is-it-practical-to-use-dfs-vs-bfs
  26. https://www.youtube.com/watch?v=afsk24utfs8&t=201s
  27. https://www.youtube.com/watch?v=bia8heeuxzi
  28. https://medium.com/tag/programming?source=post
  29. https://medium.com/tag/data-structures?source=post
  30. https://medium.com/tag/algorithms?source=post
  31. https://medium.com/tag/computer-science?source=post
  32. https://medium.com/tag/tech?source=post
  33. https://medium.com/@vaidehijoshi
  34. https://medium.com/basecs?source=footer_card
  35. https://medium.com/basecs?source=footer_card
  36. https://medium.com/basecs
  37. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  39. https://medium.com/@vaidehijoshi?source=post_header_lockup
  40. https://medium.com/p/8177df5d0f13/share/twitter
  41. https://medium.com/p/8177df5d0f13/share/facebook
  42. https://medium.com/@vaidehijoshi?source=footer_card
  43. https://medium.com/p/8177df5d0f13/share/twitter
  44. https://medium.com/p/8177df5d0f13/share/facebook
