   #[1]github [2]recent commits to rubiks_cube_convnet:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]8
     * [35]star [36]113
     * [37]fork [38]18

[39]jerpint/[40]rubiks_cube_convnet

   [41]code [42]issues 0 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   how to train a convnet to solve a rubiks cube
     * [47]19 commits
     * [48]2 branches
     * [49]0 releases
     * [50]fetching contributors

    1. [51]python 98.4%
    2. [52]tex 1.4%
    3. [53]makefile 0.2%

   (button) python tex makefile
   branch: master (button) new pull request
   [54]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/j
   [55]download zip

downloading...

   want to be notified of new releases in jerpint/rubiks_cube_convnet?
   [56]sign in [57]sign up

launching github desktop...

   if nothing happens, [58]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [59]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [60]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [61]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [62]permalink
   type            name            latest commit message commit time
        failed to load latest commit information.
        [63]magiccube
        [64]magiccube-master.zip
        [65]readme.md
        [66]cube_convnet_solver.py
        [67]requirements.txt
        [68]rubiks_model.h5
        [69]train_cube.py

readme.md

rubiks_cube_convnet

   how to train a simple convnet to solve a rubiks cube.

   plenty of efficient algorithms exist to solve a rubik's cube. this is
   to see if a neural net could learn how to solve a cube in the most
   "efficient" way, by solving the cube in less than 20 moves, i.e
   [70]god's number.

   this is a very naive solution, to start as a proof of concept. i used a
   2 layer neural net: 1 convnet layer and 1 feedforward layer. the input
   is the state of the cube to be solved. the output is the next predicted
   move until solved. for the training set, i generated games at random
   during training of 10 moves or less from solved with the corresponding
   solutions as label. at each step of the solution, i made the network
   make a guess for its next move and used sgd for training. i trained
   this over many epochs until the loss was relatively steady.

   surprisingly, the network works decently well for any position less
   than 6 moves away from solved. i found that by shuffling up to 6 moves,
   sometimes more, it is able to correctly solve it. it doesn't always
   work and can definitely use improvement, but its a good place to start.

   i used keras with tensorflow for training. you will need to install
   keras to be able to run the network to make predictions. i provide the
   weights so you don't have to train from scratch.

   i used the pycuber library for writing the code to train, which also
   needs to be installed. i used the [71]magiccube library for the cube
   simulation/visualization. i only found magiccube after using pycuber,
   so you need to have both installed for now :
pip install pycuber

   for magiccuber, i provide the .zip of their github repo i used at the
   time. i suggest using this one to avoid conflicts. i provide the
   training weights for my convnet.

   to run and play with the cube/shuffle it yourself, clone this
   repository :
git clone https://github.com/jerpint/rubiks_cube_convnet/edit/master/readme.md
cd rubiks_cube_convnet
python magiccube/code/cube_convnet_solver.py

   you can shuffle using the keyboard and have it solve your own cube.
   there is a hard-coded reset if you've gone too far and the network
   can't solve it. this simply retraces back the steps to the initial
   solved position.

   to train the convnet from scratch (final weights are in
   'rubiks_model.h5') :
python train_cube.py

   there is plenty of exploring to do! bigger networks might be one
   solution, fancier networks would likely be more appropriate. i thought
   of id23, but decided to use the simpler
   supervised-learning approach to begin.

   remember: the search-space for a properly mixed cube is huge (something
   like 4e19 iirc). the original thought was that a convnet might be able
   to solve such a space. i do think that a more sophisticated approach
   would be necessary to solve for 10+ moves. maybe an idea would be to
   'introduce' the cube to known cube algorithms in the train set and let
   it learn to optimise based on those, such that it can learn to 'think
   ahead'. also a reward system reinforcement approach could be a good
   idea.

     *    2019 github, inc.
     * [72]terms
     * [73]privacy
     * [74]security
     * [75]status
     * [76]help

     * [77]contact github
     * [78]pricing
     * [79]api
     * [80]training
     * [81]blog
     * [82]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [83]reload to refresh your
   session. you signed out in another tab or window. [84]reload to refresh
   your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/jerpint/rubiks_cube_convnet/commits/master.atom
   3. https://github.com/jerpint/rubiks_cube_convnet#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/jerpint/rubiks_cube_convnet
  32. https://github.com/join
  33. https://github.com/login?return_to=/jerpint/rubiks_cube_convnet
  34. https://github.com/jerpint/rubiks_cube_convnet/watchers
  35. https://github.com/login?return_to=/jerpint/rubiks_cube_convnet
  36. https://github.com/jerpint/rubiks_cube_convnet/stargazers
  37. https://github.com/login?return_to=/jerpint/rubiks_cube_convnet
  38. https://github.com/jerpint/rubiks_cube_convnet/network/members
  39. https://github.com/jerpint
  40. https://github.com/jerpint/rubiks_cube_convnet
  41. https://github.com/jerpint/rubiks_cube_convnet
  42. https://github.com/jerpint/rubiks_cube_convnet/issues
  43. https://github.com/jerpint/rubiks_cube_convnet/pulls
  44. https://github.com/jerpint/rubiks_cube_convnet/projects
  45. https://github.com/jerpint/rubiks_cube_convnet/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/jerpint/rubiks_cube_convnet/commits/master
  48. https://github.com/jerpint/rubiks_cube_convnet/branches
  49. https://github.com/jerpint/rubiks_cube_convnet/releases
  50. https://github.com/jerpint/rubiks_cube_convnet/graphs/contributors
  51. https://github.com/jerpint/rubiks_cube_convnet/search?l=python
  52. https://github.com/jerpint/rubiks_cube_convnet/search?l=tex
  53. https://github.com/jerpint/rubiks_cube_convnet/search?l=makefile
  54. https://github.com/jerpint/rubiks_cube_convnet/find/master
  55. https://github.com/jerpint/rubiks_cube_convnet/archive/master.zip
  56. https://github.com/login?return_to=https://github.com/jerpint/rubiks_cube_convnet
  57. https://github.com/join?return_to=/jerpint/rubiks_cube_convnet
  58. https://desktop.github.com/
  59. https://desktop.github.com/
  60. https://developer.apple.com/xcode/
  61. https://visualstudio.github.com/
  62. https://github.com/jerpint/rubiks_cube_convnet/tree/ff5d1ebd08d220ae6dad0c8942aa66bca16b52a5
  63. https://github.com/jerpint/rubiks_cube_convnet/tree/master/magiccube
  64. https://github.com/jerpint/rubiks_cube_convnet/blob/master/magiccube-master.zip
  65. https://github.com/jerpint/rubiks_cube_convnet/blob/master/readme.md
  66. https://github.com/jerpint/rubiks_cube_convnet/blob/master/cube_convnet_solver.py
  67. https://github.com/jerpint/rubiks_cube_convnet/blob/master/requirements.txt
  68. https://github.com/jerpint/rubiks_cube_convnet/blob/master/rubiks_model.h5
  69. https://github.com/jerpint/rubiks_cube_convnet/blob/master/train_cube.py
  70. http://www.cube20.org/
  71. https://github.com/davidwhogg/magiccube
  72. https://github.com/site/terms
  73. https://github.com/site/privacy
  74. https://github.com/security
  75. https://githubstatus.com/
  76. https://help.github.com/
  77. https://github.com/contact
  78. https://github.com/pricing
  79. https://developer.github.com/
  80. https://training.github.com/
  81. https://github.blog/
  82. https://github.com/about
  83. https://github.com/jerpint/rubiks_cube_convnet
  84. https://github.com/jerpint/rubiks_cube_convnet

   hidden links:
  86. https://github.com/
  87. https://github.com/jerpint/rubiks_cube_convnet
  88. https://github.com/jerpint/rubiks_cube_convnet
  89. https://github.com/jerpint/rubiks_cube_convnet
  90. https://help.github.com/articles/which-remote-url-should-i-use
  91. https://github.com/jerpint/rubiks_cube_convnet#rubiks_cube_convnet
  92. https://github.com/
