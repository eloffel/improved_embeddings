   #[1]github [2]recent commits to diffbot-php-client:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]6
     * [35]star [36]47
     * [37]fork [38]16

[39]swader/[40]diffbot-php-client

   [41]code [42]issues 23 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   [deprecated - maintenance mode - use apis directly please!] the
   official diffbot client library
   [47]diffbot [48]php [49]crawling [50]crawl [51]scrape [52]scraping
   [53]scraper [54]scraped-data [55]machine-learning [56]nlp [57]ai
   [58]artificial-intelligence [59]bot
     * [60]85 commits
     * [61]12 branches
     * [62]27 releases
     * [63]fetching contributors
     * [64]mit

    1. [65]php 100.0%

   (button) php
   branch: master (button) new pull request
   [66]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/s
   [67]download zip

downloading...

   want to be notified of new releases in swader/diffbot-php-client?
   [68]sign in [69]sign up

launching github desktop...

   if nothing happens, [70]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [71]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [72]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [73]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [74]permalink
   type         name         latest commit message commit time
        failed to load latest commit information.
        [75]src
        [76]tests
        [77].gitattributes
        [78].gitignore
        [79].scrutinizer.yml
        [80].travis.yml
        [81]changelog.md
        [82]contributing.md
        [83]license.md
        [84]readme.md
        [85]todo.md
        [86]composer.json
        [87]phpunit.xml.dist
        [88]puli.json

readme.md

deprecated / being phased out - please prefer using api calls directly, they
have been simplified for max usability!

   [89]scrutinizer code quality [90]code coverage [91]build status
   [92]dependency status

diffbot php api wrapper

   this package is a slightly overengineered diffbot api wrapper. it uses
   [93]psr-7 and [94]php-http friendly client implementations to make api
   calls. to learn more about diffbot see [95]here and [96]their homepage.
   right now it only supports analyze, product, image, discussion, crawl,
   search, and article apis, but can also accommodate custom apis. video
   and bulk api support coming soon.

   full documentation available [97]here.

requirements

   minimum php 5.6 is required. php 7.0 is recommended.

   this package uses some non-stable packages, so you must set your
   project's minimum stability to something like beta or dev in
   composer.json:
"minimum-stability": "dev",
"prefer-stable": true

   if you don't the installation procedure below will fail.

install

   the library depends on an implementation of the
   [98]client-implementation virtual package. if you don't know what this
   means, simply requiring the guzzle6 adapter will do:
composer require php-http/guzzle6-adapter

   this adapter satisfies the requirement for client-implementation (see
   above) and will make it possible to install the client with:
composer require swader/diffbot-php-client

usage - simple

   simplest possible use case:
$diffbot = new diffbot('my_token');
$url = 'http://www.sitepoint.com/diffbot-crawling-visual-machine-learning/';
$articleapi = $diffbot->createarticleapi($url);

echo $articleapi->call()->author; // prints out "bruno skvorc"

   that's it, this is all you need to get started.

usage - advanced

   full api reference manual in progress, but the instructions below
   should do for now - the library was designed with brutal ux simplicity
   in mind.

setup

   to begin, always create a diffbot instance. a diffbot instance will
   spawn api instances. to get your token, sign up at
   [99]http://diffbot.com
$diffbot = new diffbot('my_token');

pick api

   then, pick an api.

   currently available [100]automatic apis are:
     * [101]product (crawls products and their reviews, if available)
     * [102]article (crawls news posts, blogs, etc, with comments if
       available)
     * [103]image (fetches information about images - useful for 500px,
       flickr etc). the image api can return several images - depending on
       how many are on the page being crawled.
     * [104]discussion (fetches discussion / review / comment threads -
       can be embedded in the product or article return data, too, if
       those contain any comments or discussions)
     * [105]analyze (combines all the above in that it automatically
       determines the right api for the url and applies it)

   video is coming soon. see below for instructions on crawlbot, search
   and bulk api.

   there is also a [106]custom api like [107]this one - unless otherwise
   configured, they return instances of the wildcard entity)

   all apis can also be tested on [108]http://diffbot.com

   the api you picked can be spawned through the main diffbot instance:
$api = $diffbot->createarticleapi($url);

api configuration

   all apis have some optional fields you can pass with parameters. for
   example, to extract the 'meta' values of the page alongside the normal
   data, call setmeta:
$api->setmeta(true);

   some apis have other flags that don't qualify as fields. for example,
   the article api can be told to ignore discussions (aka to not extract
   comments). this can speed up the fetching, because by default, it does
   look for them. the configuration methods all have the same format,
   though, so to accomplish this, just use setdiscussion:
$api->setdiscussion(false);

   all config methods are chainable:
$api->setmeta(true)->setdiscussion(false);

   for an overview of all the config fields and the values each api
   returns, see [109]here.

calling

   all api instances have the call method which returns a collection of
   results. the collection is iterable:
$url = 'http://smittenkitchen.com/blog/2012/01/buckwheat-baby-with-salted-carame
l-syrup/';
$imageapi = $diffbot->createimageapi($url);
/** @var image $imageentity */
foreach ($imageapi->call() as $imageentity) {
    echo 'image dimensions: ' . $imageentity->getheight() . ' x ' . $imageentity
->getwidth() . '<br>';
}

/* output:
image dimensions: 333 x 500
image dimensions: 333 x 500
image dimensions: 334 x 500
image dimensions: 333 x 500
image dimensions: 333 x 500
image dimensions: 333 x 500
image dimensions: 333 x 500
image dimensions: 333 x 500
image dimensions: 333 x 500
*/

   in cases where only one entity is returned, like article or product,
   iterating works all the same, it just iterates through the one single
   element. the return data is always a collection!

   however, for brevity, you can access properties directly on the
   collection, too.
$articleapi = $diffbot->createarticleapi('http://www.sitepoint.com/diffbot-crawl
ing-visual-machine-learning/');
echo $articleapi->call()->author;
// or $articleapi->call()->getauthor();

   in this case, the collection applies the property call to the first
   element which, coincidentally, is also the only element. if you use
   this approach on the image collection above, the same thing happens -
   but the call is only applied to the first image entity in the
   collection.

just the url, please

   if you just want the final generated url (for example, to paste into
   postman client or to test in the browser and get pure json), use
   buildurl:
$url = $articleapi->buildurl();

   you can continue regular api usage afterwards, which makes this very
   useful for logging, etc.

pure response

   you can extract the pure, full guzzle response object from the returned
   data and then manipulate it as desired (maybe parsing it as json and
   processing it further on your own):
$articleapi = $diffbot->createarticleapi('http://www.sitepoint.com/diffbot-crawl
ing-visual-machine-learning/');
$guzzleresponse = $articleapi->call()->getresponse();

   individual entities do not have access to the response - to fetch it,
   always fetch from their parent collection (the object that the call()
   method returns).

discussion and post

   the discussion api returns some data about the discussion and contains
   another collection of posts. a post entity corresponds to a single
   review / comment / forum post, and is very similar in structure to the
   article entity.

   you can iterate through the posts as usual:
$url = 'http://community.sitepoint.com/t/php7-resource-recap/174325/';
$discussion = $diffbot->creatediscussionapi($url)->call();
/** @var post $post */
foreach($discussion->getposts() as $post) {
    echo 'author: '.$post->getauthor().'<br>';
}

/*
output:

author: swader
author: taylorren
author: s_molinari
author: s_molinari
author: swader
author: s_molinari
author: swader
author: s_molinari
author: swader
author: s_molinari
author: tomb
author: s_molinari
author: tomb
author: wolf_22
author: swader
author: swader
author: s_molinari
*/

   an article or product entity can contain a discussion entity. access it
   via getdiscussion on an article or product entity and use as usual (see
   above).

custom api

   used just like all others. there are only two differences:
    1. when creating a custom api call, you need to pass in the api name
    2. it always returns wildcard entities which are basically just value
       objects containing the returned data. they have __call and __get
       magic methods defined so their properties remain just as accessible
       as the other entities', but without autocomplete.

   the following is a usage example of my own custom api for author
   profiles at sitepoint:
$diffbot = new diffbot('my_token');
$customapi = $diffbot->createcustomapi('http://sitepoint.com/author/bskvorc', 'a
uthorfolionew');

$return = $customapi->call();

foreach ($return as $wildcard) {
    dump($wildcard->getauthor()); // bruno skvorc
    dump($wildcard->author); // bruno skvorc
}

   of course, you can easily extend the basic custom api class and make
   your own, as well as add your own entities that perfectly correspond to
   the returned data. this will all be covered in a tutorial in the near
   future.

crawlbot and bulk api

   basic crawlbot support has been added to the library. to find out more
   about crawlbot and what, how and why it does what it does, see
   [110]here. i also recommend reading the [111]crawlbot api docs and the
   [112]crawlbot support topics just so you can dive right in without
   being too confused by the code below.

   in a nutshell, the crawlbot crawls a set of seed urls for links (even
   if a subdomain is passed to it as seed url, it still looks through the
   entire main domain and all other subdomains it can find) and then
   processes all the pages it can find using the api you define (or opting
   for analyze api by default).

list of all crawl / bulk jobs

   a joint list of all your crawl / bulk jobs can be fetched via:
$diffbot = new diffbot('my_token');
$jobs = $diffbot->crawl()->call();

   this returns a collection of all crawl and bulk jobs. each type is
   represented by its own class: jobcrawl and jobbulk. it's important to
   note that jobs only contain the information about the job - not the
   data. to get the data of a job, use the downloadurl method to get the
   url to the dataset:
$url = $job->downloadurl("json");

crawl jobs: creating a crawl job

   see inline comments for step by step explanation
// create new diffbot as usual
$diffbot = new diffbot('my_token');

// the crawlbot needs to be told which api to use to process crawled pages. this
 is optional - if omitted, it will be told to use the analyze api with mode set
to auto.
// the "crawl" url is a flag to tell apis to prepare for consumption with crawlb
ot, letting them know they won't be used directly.
$url = 'crawl';
$articleapi = $diffbot->createarticleapi($url)->setdiscussion(false);

// make a new crawl job. optionally, pass in api instance
$crawl = $diffbot->crawl('sitepoint_01', $articleapi);

// set seeds - seeds are urls to crawl. by default, passing a subdomain into the
 crawl will also crawl other subdomains on main domain, including www.
$crawl->setseeds(['http://sitepoint.com']);

// call as usual - an entityiterator collection of results is returned. in the c
ase of a job's creation, only one job entity will always be returned.
$job = $crawl->call();

// see jobcrawl class to find out which getters are available
dump($job->getdownloadurl("json")); // outputs download url to json dataset of t
he job's result

crawl jobs: inspecting an existing crawl job

   to get data about a job (this will be the data it was configured with -
   its flags - and not the results!), use the exact same approach as if
   creating a new one, only without the api and seeds:
$diffbot = new diffbot('my_token');

$crawl = $diffbot->crawl('sitepoint_01');

$job = $crawl->call();

dump($job->getdownloadurl("json")); // outputs download url to json dataset of t
he job's result

crawl jobs: modifying an existing crawl job

   while there is no way to alter a crawl job's configuration post
   creation, you can still do some operations on it.

   provided you fetched a $crawl instance as in the above section on
   inspecting, you can do the following:
// force start of a new crawl round manually
$crawl->roundstart();

// pause or unpause (0) a job
$crawl->pause();
$crawl->pause(0)

// restart removes all crawled data but keeps the job (and settings)
$crawl->restart();

// delete a job and all related data
$crawl->delete();

   note that it is not necessary to issue a call() after these methods.

   if you would like to extract the generated api call url for these
   instant-call actions, pass in the parameter false, like so:
$crawl->delete(false);

   you can then save the url for your convenience and call call when ready
   to execute (if at all).
$url = $crawl->buildurl();
$url->call();

search api

   the search api is used to quickly search across data obtained through
   bulk or crawl api.
$diffbot = new diffbot('my_token');
$search = $diffbot->search('author:"miles johnson" and type:article')->call();


foreach ($search as $article) {
    echo $article->gettitle();
}

   use search apis setcol method to target a specific collection only -
   otherwise, all your token's collections are searched.

testing

   just run phpunit in the root folder of the cloned project. some calls
   do require an internet connection (see tests/factory/entitytest).
phpunit

adding entity tests

   i'll pay $10 for every new set of 5 entity tests, submissions verified
   set per set - offer valid until i feel like there's enough use cases
   covered. (a.k.a. don't submit 1500 of them at once, i can't pay that in
   one go).

   if you would like to contribute by adding entity tests, i suggest
   following this procedure:
    1. pick an api you would like to contribute a test for. e.g., product
       api.
    2. in a scratchpad like index.php, build the url:
$diffbot = new diffbot('my_token');
$url = $diffbot
    ->createproductapi('http://someurl.com')
    ->setmeta(true)
    ->...(insert other config methods here as desired)...
    ->buildurl();
echo $url;
    3. grab the url and paste it into a rest client like postman or into
       your browser. you'll get diffbot's response back. keep it open for
       reference.
    4. download this response into a json file. preferably into
       tests/mocks/products/[date]/somefilename.json, like the other tests
       are. this is easily accomplished by executing curl "[url] >
       somefilename.json" in the terminal/command line.
    5. go into the appropriate tests folder. in this case, tests/entity
       and open producttest.php. notice how the file is added into the
       batch of files to be tested against. every provider has it
       referenced, along with the value the method being tested should
       produce. slowly go through every test method and add your file. use
       the values in the json you got in step 3 to get the values.
    6. run phpunit tests/entity/producttest.php to test just this file
       (much faster than entire suite). if ok, send pr :)

   if you'd like to create your own test classes, too, that's fine, no
   need to extend the ones that are included with the project. apply the
   whole process just rather than extending the existing producttest class
   make a new one.

adding other tests

   other tests don't have specific instructions, contribute as you see
   fit. just try to minimize actual remote calls - we're not testing the
   api itself (a.k.a. diffbot), we're testing this library. if the library
   parses values accurately from an inaccurate api response because, for
   example, diffbot is currently bugged, that's fine - the library works!

contributing

   please see [113]contributing for details and [114]todo for ideas.

credits

     * [115]bruno skvorc

license

   the mit license (mit). please see [116]license file for more
   information.

     *    2019 github, inc.
     * [117]terms
     * [118]privacy
     * [119]security
     * [120]status
     * [121]help

     * [122]contact github
     * [123]pricing
     * [124]api
     * [125]training
     * [126]blog
     * [127]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [128]reload to refresh your
   session. you signed out in another tab or window. [129]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/swader/diffbot-php-client/commits/master.atom
   3. https://github.com/swader/diffbot-php-client#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/swader/diffbot-php-client
  32. https://github.com/join
  33. https://github.com/login?return_to=/swader/diffbot-php-client
  34. https://github.com/swader/diffbot-php-client/watchers
  35. https://github.com/login?return_to=/swader/diffbot-php-client
  36. https://github.com/swader/diffbot-php-client/stargazers
  37. https://github.com/login?return_to=/swader/diffbot-php-client
  38. https://github.com/swader/diffbot-php-client/network/members
  39. https://github.com/swader
  40. https://github.com/swader/diffbot-php-client
  41. https://github.com/swader/diffbot-php-client
  42. https://github.com/swader/diffbot-php-client/issues
  43. https://github.com/swader/diffbot-php-client/pulls
  44. https://github.com/swader/diffbot-php-client/projects
  45. https://github.com/swader/diffbot-php-client/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/topics/diffbot
  48. https://github.com/topics/php
  49. https://github.com/topics/crawling
  50. https://github.com/topics/crawl
  51. https://github.com/topics/scrape
  52. https://github.com/topics/scraping
  53. https://github.com/topics/scraper
  54. https://github.com/topics/scraped-data
  55. https://github.com/topics/machine-learning
  56. https://github.com/topics/nlp
  57. https://github.com/topics/ai
  58. https://github.com/topics/artificial-intelligence
  59. https://github.com/topics/bot
  60. https://github.com/swader/diffbot-php-client/commits/master
  61. https://github.com/swader/diffbot-php-client/branches
  62. https://github.com/swader/diffbot-php-client/releases
  63. https://github.com/swader/diffbot-php-client/graphs/contributors
  64. https://github.com/swader/diffbot-php-client/blob/master/license.md
  65. https://github.com/swader/diffbot-php-client/search?l=php
  66. https://github.com/swader/diffbot-php-client/find/master
  67. https://github.com/swader/diffbot-php-client/archive/master.zip
  68. https://github.com/login?return_to=https://github.com/swader/diffbot-php-client
  69. https://github.com/join?return_to=/swader/diffbot-php-client
  70. https://desktop.github.com/
  71. https://desktop.github.com/
  72. https://developer.apple.com/xcode/
  73. https://visualstudio.github.com/
  74. https://github.com/swader/diffbot-php-client/tree/8405b50cb81dd30f654d05a027dbb52332febf72
  75. https://github.com/swader/diffbot-php-client/tree/master/src
  76. https://github.com/swader/diffbot-php-client/tree/master/tests
  77. https://github.com/swader/diffbot-php-client/blob/master/.gitattributes
  78. https://github.com/swader/diffbot-php-client/blob/master/.gitignore
  79. https://github.com/swader/diffbot-php-client/blob/master/.scrutinizer.yml
  80. https://github.com/swader/diffbot-php-client/blob/master/.travis.yml
  81. https://github.com/swader/diffbot-php-client/blob/master/changelog.md
  82. https://github.com/swader/diffbot-php-client/blob/master/contributing.md
  83. https://github.com/swader/diffbot-php-client/blob/master/license.md
  84. https://github.com/swader/diffbot-php-client/blob/master/readme.md
  85. https://github.com/swader/diffbot-php-client/blob/master/todo.md
  86. https://github.com/swader/diffbot-php-client/blob/master/composer.json
  87. https://github.com/swader/diffbot-php-client/blob/master/phpunit.xml.dist
  88. https://github.com/swader/diffbot-php-client/blob/master/puli.json
  89. https://scrutinizer-ci.com/g/swader/diffbot-php-client/?branch=master
  90. https://scrutinizer-ci.com/g/swader/diffbot-php-client/?branch=master
  91. https://travis-ci.org/swader/diffbot-php-client
  92. https://www.versioneye.com/user/projects/5555b7a1ead0b220e1000002
  93. http://www.php-fig.org/psr/psr-7/
  94. http://php-http.readthedocs.org/
  95. http://www.sitepoint.com/tag/diffbot/
  96. http://diffbot.com/
  97. http://diffbot-php-client-docs.readthedocs.org/en/latest/
  98. https://packagist.org/providers/php-http/client-implementation
  99. http://diffbot.com/
 100. http://www.diffbot.com/products/automatic/
 101. http://www.diffbot.com/products/automatic/product/
 102. http://www.diffbot.com/products/automatic/article/
 103. http://www.diffbot.com/products/automatic/image/
 104. http://www.diffbot.com/products/automatic/discussion/
 105. http://www.diffbot.com/products/automatic/analyze/
 106. http://www.diffbot.com/products/custom/
 107. http://www.sitepoint.com/analyze-sitepoint-author-portfolios-diffbot/
 108. http://diffbot.com/
 109. https://www.diffbot.com/dev/docs
 110. https://www.diffbot.com/dev/docs/crawl/
 111. https://www.diffbot.com/dev/docs/crawl/api.jsp
 112. http://support.diffbot.com/topics/crawlbot/
 113. https://github.com/swader/diffbot-php-client/blob/master/contributing.md
 114. https://github.com/swader/diffbot-php-client/blob/master/todo.md
 115. https://github.com/swader
 116. https://github.com/swader/diffbot-php-client/blob/master/license.md
 117. https://github.com/site/terms
 118. https://github.com/site/privacy
 119. https://github.com/security
 120. https://githubstatus.com/
 121. https://help.github.com/
 122. https://github.com/contact
 123. https://github.com/pricing
 124. https://developer.github.com/
 125. https://training.github.com/
 126. https://github.blog/
 127. https://github.com/about
 128. https://github.com/swader/diffbot-php-client
 129. https://github.com/swader/diffbot-php-client

   hidden links:
 131. https://github.com/
 132. https://github.com/swader/diffbot-php-client
 133. https://github.com/swader/diffbot-php-client
 134. https://github.com/swader/diffbot-php-client
 135. https://help.github.com/articles/which-remote-url-should-i-use
 136. https://github.com/swader/diffbot-php-client#deprecated--being-phased-out---please-prefer-using-api-calls-directly-they-have-been-simplified-for-max-usability
 137. https://github.com/swader/diffbot-php-client#diffbot-php-api-wrapper
 138. https://github.com/swader/diffbot-php-client#requirements
 139. https://github.com/swader/diffbot-php-client#install
 140. https://github.com/swader/diffbot-php-client#usage---simple
 141. https://github.com/swader/diffbot-php-client#usage---advanced
 142. https://github.com/swader/diffbot-php-client#setup
 143. https://github.com/swader/diffbot-php-client#pick-api
 144. https://github.com/swader/diffbot-php-client#api-configuration
 145. https://github.com/swader/diffbot-php-client#calling
 146. https://github.com/swader/diffbot-php-client#just-the-url-please
 147. https://github.com/swader/diffbot-php-client#pure-response
 148. https://github.com/swader/diffbot-php-client#discussion-and-post
 149. https://github.com/swader/diffbot-php-client#custom-api
 150. https://github.com/swader/diffbot-php-client#crawlbot-and-bulk-api
 151. https://github.com/swader/diffbot-php-client#list-of-all-crawl--bulk-jobs
 152. https://github.com/swader/diffbot-php-client#crawl-jobs-creating-a-crawl-job
 153. https://github.com/swader/diffbot-php-client#crawl-jobs-inspecting-an-existing-crawl-job
 154. https://github.com/swader/diffbot-php-client#crawl-jobs-modifying-an-existing-crawl-job
 155. https://github.com/swader/diffbot-php-client#search-api
 156. https://github.com/swader/diffbot-php-client#testing
 157. https://github.com/swader/diffbot-php-client#adding-entity-tests
 158. https://github.com/swader/diffbot-php-client#adding-other-tests
 159. https://github.com/swader/diffbot-php-client#contributing
 160. https://github.com/swader/diffbot-php-client#credits
 161. https://github.com/swader/diffbot-php-client#license
 162. https://github.com/
