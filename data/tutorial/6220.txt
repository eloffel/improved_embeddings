   #[1]github [2]recent commits to cogcomp-nlpy:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]16
     * [35]star [36]102
     * [37]fork [38]26

[39]cogcomp/[40]cogcomp-nlpy

   [41]code [42]issues 16 [43]pull requests 2 [44]projects 1 [45]wiki
   [46]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [47]sign up
   cogcomp's light-weight python nlp annotators
   [48]http://nlp.cogcomp.org/
   [49]natural-language-processing [50]text-processing [51]nlp
   [52]text-mining [53]data-mining
     * [54]366 commits
     * [55]16 branches
     * [56]4 releases
     * [57]fetching contributors
     * [58]view license

    1. [59]python 100.0%

   (button) python
   branch: master (button) new pull request
   [60]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/c
   [61]download zip

downloading...

   want to be notified of new releases in cogcomp/cogcomp-nlpy?
   [62]sign in [63]sign up

launching github desktop...

   if nothing happens, [64]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [65]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [66]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [67]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [68]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [69]id35_nlpy [70]merge branch 'master' of
   github.com:cogcomp/cogcomp-nlpy feb 5, 2019
   [71]demo
   [72]docs
   [73]protobuf
   [74]tests
   [75].gitignore
   [76]license [77]basic python package setup. feb 28, 2017
   [78]readme.md
   [79]_config.yml
   [80]change_config_script.py
   [81]requirements.txt [82]added flask and flask-cors to the
   requirements, build should pass now oct 1, 2018
   [83]setup.id18 [84]update version to 1.10.0 oct 26, 2018
   [85]setup.py
   [86]version.py

readme.md

cogcomp-nlpy

   [87]build status

   run nlp tools such as part-of-speech tagging, chunking, named entity
   recognition, etc on your documents in python with ease and breeze!

installation

    1. make sure [88]you have "pip" on your system.
    2. make sure you have installed cython:

pip install cython

    3. install:

pip install id35_nlpy

    4. enjoy!

   here is the project page at [89]pypi website.

support

   the package is compatible with python 2.6+ and python 3.3+. we highly
   recommend using python 3.3+

   this package uses utf-8 encoding. in python 2.6+, all strings are
   stored as unicode objects. in python 3.3+, all strings are stored as
   str objects.

getting started

   here is a sample usage showing how easily you run our system:
from id35_nlpy import remote_pipeline

pipeline = remote_pipeline.remotepipeline()
doc = pipeline.doc("hello, how are you. i am doing fine")
print(doc.get_lemma) # will produce (hello hello) (, ,) (how how) (be are) (you
you) (. .) (i i) (be am) (do doing) (fine fine)
print(doc.get_pos) # will produce (uh hello) (, ,) (wrb how) (vbp are) (prp you)
 (. .) (prp i) (vbp am) (vbg doing) (jj fine)

   the default/easy usage has some restrictions as will deliniate in the
   next section. see the next section to

   api docs: here is the [90]api docs of our pipeliner module.

structure

   this tool enables you accesss [91]cogcomp pipeline in different forms.
   the figure below summarizes these approaches:

   the figure above gives a summary of possible usages, as well as their
   pros and cons. next we will go through each item and elaborate:

remote pipeline

   in this setting, you can send annotation requests to a remote machine.
   hence there is not much memory burden on your local machine. instead
   all the heavy-lifting is on the remote server.

   default remote server: this is the default setting. the requests are
   sent to our remote server, hence requires a network connection. this
   option is here to demonstrate how things work, but it is not a viable
   solution for your big experiments since we limit the number of queries
   to our server (current limit is 100 queries a day). if you are a busy
   nlp user, you should use any of the other options.

   starting your own (remote) server: if you have a big (remote) machine,
   this is probably a good option for you. you'll have to read the
   instructions on how to install the pipeline server in the [92]pipeline
   project documentation. in summary:
    1. clone our [93]cogcomp-nlp java project.
    2. run pipeline/scripts/runwebserver.sh to start the server.
    3. when you see server:xxx - started @xxxxxms, the server is up and
       running:

   after making sure that the server is running, we can make python call
   to it:
from id35_nlpy import remote_pipeline
pipeline = remote_pipeline.remotepipeline(server_api='http://www.fancyurlname.co
m:8080')
# constructor declaration: remotepipeline(server_api = none, file_name = none)
# "server_api" is the address of the server as string. an example: http://www.fa
ncyurlname.com:8080
# "file_name" is the config file used to set up pipeline (optional), please refe
r the latter section for more details

   note: this tool is based on cogcomp's [94]pipeline project. essentially
   annotator included in the pipeline should be accessible here.

local pipeline

   in this setting, the system will download the trained models and files
   required to run the pipeline locally. since everything is run on your
   machine, it will probably require a lot of memory (the amount depends
   on which annotations you use). if you have a single big machine (i.e.
   memory > 15gb) for your expeirments, this is probably a good option for
   you. local pipeline also gives you the functionality to work with
   pre-tokenized text.

   to download the models, run the following command:
python -m id35_nlpy download

   this will download model files into your home directly under
   ~/.id35_nlpy/.

   note: note that downloading the models require you to have maven
   installed on your machine. if you don't, [95]here are some guidelines
   on how to install it.

   in the local pipeline annotators are loaded lazily; i.e. they are not
   loaded until you call them for the first time.
from id35_nlpy import local_pipeline
pipeline = local_pipeline.localpipeline()
# constructor declaration: localpipeline()

   to run on pre-tokenized text, the document is represented as a list of
   (sentences) list of tokens. the argument pretokenized=true needs to be
   passed to the pipeline.doc function.
from id35_nlpy import local_pipeline
pipeline = local_pipeline.localpipeline()

document = [ ["hi", "!"], ["how", "are", "you", "?"] ]
doc = pipeline.doc(document, pretokenized=true)

frequent issues:

     * to use the pipelne locally you have to make sure you have set
       java_home variable. in macos, you can verify it with echo
       "$java_home". if it is not set, you can export
       java_home=$(/usr/libexec/java_home).
     * if you are using java version > 8, you are likely to receive an
       error that looks like the following:
       error:id35_nlpy.local_pipeline:error calling
       dlopen(b'/library/java/javavirtualmachines/jdk-10.0.1.jdk/contents/
       home/jre/lib/server/libjvm.dylib':
       b'dlopen(/library/java/javavirtualmachines/jdk-10.0.1.jdk/contents/
       home/jre/lib/server/libjvm.dylib, 10): image not found' to solve
       this, you have to [96]install java-8 on your machine and direct
       your commandline to it: export java_home=`/usr/libexec/java_home -v
       1.8` .

setting from configuration file

   you can set settings on how to run cogcomp-nlpy via a local option too,
   rather than setting it programmatically. here is how to:
from id35_nlpy import remote_pipeline
pipeline = remote_pipeline.remotepipeline(file_name = 'path_to_custom_config_fil
e')

   the default keys and values are specified below. if you want to use
   custom config file, please provide a file in similar format.
[remote_pipeline_setting]
api = address_of_the_server # example: http://fancyurlname.com:8080

system failures

   system failures are part of any software system. upon some certain
   outputs (e.g. receiving error 500 from remote pipeline), we return none
   in the output of call. when processing big documents it might make
   sense to check take care of this explicitly:
d = ... # docuemnt
p = ... # pipeline
doc = p.doc(d)
if doc is not none:
    # do sth with it
    ner_view = doc.get_ner_conll

running tests (for contributors)

    1. make sure you have downloaded the models using python -m id35_nlpy
       download so that local_pipeline tests can run smoothly.
    2. create a pristine python2 environment (say, using conda create -n
       py27 python=2.7 anaconda).
    3. you may need to install cython for pyjnius in the new python2
       environment (pip2 install cython).
    4. run python setup.py test in the new environment.

   all tests should run smoothly before you submit a pull request.

questions/suggestions/comments

   use comments or pull requests.

     *    2019 github, inc.
     * [97]terms
     * [98]privacy
     * [99]security
     * [100]status
     * [101]help

     * [102]contact github
     * [103]pricing
     * [104]api
     * [105]training
     * [106]blog
     * [107]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [108]reload to refresh your
   session. you signed out in another tab or window. [109]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/cogcomp/cogcomp-nlpy/commits/master.atom
   3. https://github.com/cogcomp/cogcomp-nlpy#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/cogcomp/cogcomp-nlpy
  32. https://github.com/join
  33. https://github.com/login?return_to=/cogcomp/cogcomp-nlpy
  34. https://github.com/cogcomp/cogcomp-nlpy/watchers
  35. https://github.com/login?return_to=/cogcomp/cogcomp-nlpy
  36. https://github.com/cogcomp/cogcomp-nlpy/stargazers
  37. https://github.com/login?return_to=/cogcomp/cogcomp-nlpy
  38. https://github.com/cogcomp/cogcomp-nlpy/network/members
  39. https://github.com/cogcomp
  40. https://github.com/cogcomp/cogcomp-nlpy
  41. https://github.com/cogcomp/cogcomp-nlpy
  42. https://github.com/cogcomp/cogcomp-nlpy/issues
  43. https://github.com/cogcomp/cogcomp-nlpy/pulls
  44. https://github.com/cogcomp/cogcomp-nlpy/projects
  45. https://github.com/cogcomp/cogcomp-nlpy/wiki
  46. https://github.com/cogcomp/cogcomp-nlpy/pulse
  47. https://github.com/join?source=prompt-code
  48. http://nlp.cogcomp.org/
  49. https://github.com/topics/natural-language-processing
  50. https://github.com/topics/text-processing
  51. https://github.com/topics/nlp
  52. https://github.com/topics/text-mining
  53. https://github.com/topics/data-mining
  54. https://github.com/cogcomp/cogcomp-nlpy/commits/master
  55. https://github.com/cogcomp/cogcomp-nlpy/branches
  56. https://github.com/cogcomp/cogcomp-nlpy/releases
  57. https://github.com/cogcomp/cogcomp-nlpy/graphs/contributors
  58. https://github.com/cogcomp/cogcomp-nlpy/blob/master/license
  59. https://github.com/cogcomp/cogcomp-nlpy/search?l=python
  60. https://github.com/cogcomp/cogcomp-nlpy/find/master
  61. https://github.com/cogcomp/cogcomp-nlpy/archive/master.zip
  62. https://github.com/login?return_to=https://github.com/cogcomp/cogcomp-nlpy
  63. https://github.com/join?return_to=/cogcomp/cogcomp-nlpy
  64. https://desktop.github.com/
  65. https://desktop.github.com/
  66. https://developer.apple.com/xcode/
  67. https://visualstudio.github.com/
  68. https://github.com/cogcomp/cogcomp-nlpy/tree/bc6298908011084b26fe3877e02324026ae86178
  69. https://github.com/cogcomp/cogcomp-nlpy/tree/master/id35_nlpy
  70. https://github.com/cogcomp/cogcomp-nlpy/commit/26c253addb58aba3dea184f317076643430586ef
  71. https://github.com/cogcomp/cogcomp-nlpy/tree/master/demo
  72. https://github.com/cogcomp/cogcomp-nlpy/tree/master/docs
  73. https://github.com/cogcomp/cogcomp-nlpy/tree/master/protobuf
  74. https://github.com/cogcomp/cogcomp-nlpy/tree/master/tests
  75. https://github.com/cogcomp/cogcomp-nlpy/blob/master/.gitignore
  76. https://github.com/cogcomp/cogcomp-nlpy/blob/master/license
  77. https://github.com/cogcomp/cogcomp-nlpy/commit/7e7508246181790faa00b0de47edcb9159f35743
  78. https://github.com/cogcomp/cogcomp-nlpy/blob/master/readme.md
  79. https://github.com/cogcomp/cogcomp-nlpy/blob/master/_config.yml
  80. https://github.com/cogcomp/cogcomp-nlpy/blob/master/change_config_script.py
  81. https://github.com/cogcomp/cogcomp-nlpy/blob/master/requirements.txt
  82. https://github.com/cogcomp/cogcomp-nlpy/commit/ab34418164a84aad43da523a1e056dd94bf4cef3
  83. https://github.com/cogcomp/cogcomp-nlpy/blob/master/setup.id18
  84. https://github.com/cogcomp/cogcomp-nlpy/commit/5af4a7dbded706597d229fc832b9037b7089f037
  85. https://github.com/cogcomp/cogcomp-nlpy/blob/master/setup.py
  86. https://github.com/cogcomp/cogcomp-nlpy/blob/master/version.py
  87. https://semaphoreci.com/danyaljj/sioux-2
  88. https://pip.pypa.io/en/stable/installing/
  89. https://pypi.python.org/pypi/id35-nlpy
  90. http://cogcomp.cs.illinois.edu/software/doc/id35_nlpy/pipeliner.m.html
  91. https://github.com/cogcomp/cogcomp-nlp/tree/master/pipeline
  92. https://github.com/cogcomp/cogcomp-nlp/tree/master/pipeline#using-pipeline-webserver
  93. https://github.com/cogcomp/cogcomp-nlp/
  94. https://github.com/cogcomp/cogcomp-nlp/tree/master/pipeline>
  95. https://maven.apache.org/install.html
  96. https://gist.github.com/jeoam/a926dbb5145c4d0789c1
  97. https://github.com/site/terms
  98. https://github.com/site/privacy
  99. https://github.com/security
 100. https://githubstatus.com/
 101. https://help.github.com/
 102. https://github.com/contact
 103. https://github.com/pricing
 104. https://developer.github.com/
 105. https://training.github.com/
 106. https://github.blog/
 107. https://github.com/about
 108. https://github.com/cogcomp/cogcomp-nlpy
 109. https://github.com/cogcomp/cogcomp-nlpy

   hidden links:
 111. https://github.com/
 112. https://github.com/cogcomp/cogcomp-nlpy
 113. https://github.com/cogcomp/cogcomp-nlpy
 114. https://github.com/cogcomp/cogcomp-nlpy
 115. https://help.github.com/articles/which-remote-url-should-i-use
 116. https://github.com/cogcomp/cogcomp-nlpy#cogcomp-nlpy
 117. https://github.com/cogcomp/cogcomp-nlpy#installation
 118. https://github.com/cogcomp/cogcomp-nlpy#support
 119. https://github.com/cogcomp/cogcomp-nlpy#getting-started
 120. https://github.com/cogcomp/cogcomp-nlpy#structure
 121. https://user-images.githubusercontent.com/2441454/27004781-963ae9e0-4ddd-11e7-9864-b96a52df062b.png
 122. https://github.com/cogcomp/cogcomp-nlpy#remote-pipeline
 123. https://github.com/cogcomp/cogcomp-nlpy#local-pipeline
 124. https://github.com/cogcomp/cogcomp-nlpy#frequent-issues
 125. https://github.com/cogcomp/cogcomp-nlpy#setting-from-configuration-file
 126. https://github.com/cogcomp/cogcomp-nlpy#system-failures
 127. https://github.com/cogcomp/cogcomp-nlpy#running-tests-for-contributors
 128. https://github.com/cogcomp/cogcomp-nlpy#questionssuggestionscomments
 129. https://github.com/
