   #[1]github [2]recent commits to paragraph-vectors:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]8
     * [35]star [36]204
     * [37]fork [38]45

[39]inejc/[40]paragraph-vectors

   [41]code [42]issues 8 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
        a pytorch implementation of paragraph vectors (doc2vec)
   [47]doc2vec [48]neural-networks [49]machine-learning [50]deep-learning
   [51]nlp [52]pytorch [53]unsupervised-learning
     * [54]49 commits
     * [55]1 branch
     * [56]0 releases
     * [57]fetching contributors
     * [58]mit

    1. [59]python 100.0%

   (button) python
   branch: master (button) new pull request
   [60]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/i
   [61]download zip

downloading...

   want to be notified of new releases in inejc/paragraph-vectors?
   [62]sign in [63]sign up

launching github desktop...

   if nothing happens, [64]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [65]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [66]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [67]download the github extension for visual studio
   and try again.

   (button) go back
   [68]@inejc
   [69]inejc [70]merge pull request [71]#22 [72]from trevorprater/master
   (button)    
fixes floating point error + adds support for pytorch >= 0.5

   latest commit [73]33f6465 jun 3, 2018
   [74]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [75].github
   [76]data [77]csv header line mandatory, fix export vectors (use a csv
   writer), inc    nov 5, 2017
   [78]diagnostics [79]implement training diagnostics oct 30, 2017
   [80]models [81]implement training, change distributed memory model
   initialization sep 11, 2017
   [82]paragraphvec [83]fixes floating point error + adds support for
   pytorch >= 0.5 may 31, 2018
   [84]tests [85]add the dbow version of the model, fix tests for the dm
   version nov 7, 2017
   [86].coveragerc
   [87].gitignore [88]implement training diagnostics oct 30, 2017
   [89].travis.yml [90]track subprocesses coverage sep 26, 2017
   [91]license
   [92]readme.md
   [93]codecov.yml
   [94]requirements.txt
   [95]setup.py

readme.md

paragraph vectors

   [96]build status [97]codecov [98]codebeat badge [99]codacy badge

   a pytorch implementation of paragraph vectors (doc2vec).

                         [100][dmdbow.png?raw=true]

   all models minimize the negative sampling objective as proposed by t.
   mikolov et al. [1]. this provides scope for sparse updates (i.e. only
   vectors of sampled noise words are used in forward and backward
   passes). in addition to that, batches of training data (with noise
   sampling) are generated in parallel on a cpu while the model is trained
   on a gpu.

   caveat emptor! be warned that paragraph-vectors is in an early-stage
   development phase. feedback, comments, suggestions, contributions, etc.
   are more than welcome.

installation

    1. install [101]pytorch (follow the link for instructions).
    2. install the paragraph-vectors library.

git clone https://github.com/inejc/paragraph-vectors.git
cd paragraph-vectors
pip install -e .

   note that installation in a virtual environment is the recommended way.

usage

    1. put a csv file in the [102]data directory. each row represents a
       single document and the first column should always contain the
       text. note that a header line is mandatory.

data/example.csv
----------------
text,...
"in the week before their departure to arrakis, when all the final scurrying abo
ut had reached a nearly unbearable frenzy, an old crone came to visit the mother
 of the boy, paul.",...
"it was a warm night at castle caladan, and the ancient pile of stone that had s
erved the atreides family as home for twenty-six generations bore that cooled-sw
eat feeling it acquired before a change in the weather.",...
...

    2. run [103]train.py with selected parameters (models are saved in the
       [104]models directory).

python train.py start --data_file_name 'example.csv' --num_epochs 100 --batch_si
ze 32 --num_noise_words 2 --vec_dim 100 --lr 1e-3

parameters

     * data_file_name: str
       name of a file in the data directory.
     * model_ver: str, one of ('dm', 'dbow'), default='dbow'
       version of the model as proposed by q. v. le et al. [5],
       distributed representations of sentences and documents. 'dbow'
       stands for distributed bag of words, 'dm' stands for distributed
       memory.
     * vec_combine_method: str, one of ('sum', 'concat'), default='sum'
       method for combining paragraph and word vectors when
       model_ver='dm'. currently only the 'sum' operation is implemented.
     * context_size: int, default=0
       half the size of a neighbourhood of target words when
       model_ver='dm' (i.e. how many words left and right are regarded as
       context). when model_ver='dm' context_size has to greater than 0,
       when model_ver='dbow' context_size has to be 0.
     * num_noise_words: int
       number of noise words to sample from the noise distribution.
     * vec_dim: int
       dimensionality of vectors to be learned (for paragraphs and words).
     * num_epochs: int
       number of iterations to train the model (i.e. number of times every
       example is seen during training).
     * batch_size: int
       number of examples per single gradient update.
     * lr: float
       learning rate of the adam optimizer.
     * save_all: bool, default=false
       indicates whether a checkpoint is saved after each epoch. if false,
       only the best performing model is saved.
     * generate_plot: bool, default=true
       indicates whether a diagnostic plot displaying loss value over
       epochs is generated after each epoch.
     * max_generated_batches: int, default=5
       maximum number of pre-generated batches.
     * num_workers: int, default=1
       number of batch generator jobs to run in parallel. if value is set
       to -1, total number of machine cpus is used. note that order of
       batches is not guaranteed when num_workers > 1.

    3. export trained paragraph vectors to a csv file (vectors are saved
       in the [105]data directory).

python export_vectors.py start --data_file_name 'example.csv' --model_file_name
'example_model.dbow_numnoisewords.2_vecdim.100_batchsize.32_lr.0.001000_epoch.25
_loss.0.981524.pth.tar'

parameters

     * data_file_name: str
       name of a file in the data directory that was used during training.
     * model_file_name: str
       name of a file in the models directory (a model trained on the
       data_file_name dataset).

example of trained vectors

   first two principal components (1% cumulative variance explained) of
   300-dimensional document vectors trained on arxiv abstracts. shown are
   two subcategories from computer science. dataset was comprised of 74219
   documents and 91417 unique words.

                   [106][learned_vectors_pca.png?raw=true]

resources

     * [1] [107]distributed representations of words and phrases and their
       compositionality, t. mikolov et al.
     * [2] [108]learning id27s efficiently with
       noise-contrastive estimation, a. mnih et al.
     * [3] [109]notes on noise contrastive estimation and negative
       sampling, c. dyer
     * [4] [110]approximating the softmax (a blog post), s. ruder
     * [5] [111]distributed representations of sentences and documents, q.
       v. le et al.
     * [6] [112]document embedding with paragraph vectors, a. m. dai et
       al.

     *    2019 github, inc.
     * [113]terms
     * [114]privacy
     * [115]security
     * [116]status
     * [117]help

     * [118]contact github
     * [119]pricing
     * [120]api
     * [121]training
     * [122]blog
     * [123]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [124]reload to refresh your
   session. you signed out in another tab or window. [125]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/inejc/paragraph-vectors/commits/master.atom
   3. https://github.com/inejc/paragraph-vectors#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/inejc/paragraph-vectors
  32. https://github.com/join
  33. https://github.com/login?return_to=/inejc/paragraph-vectors
  34. https://github.com/inejc/paragraph-vectors/watchers
  35. https://github.com/login?return_to=/inejc/paragraph-vectors
  36. https://github.com/inejc/paragraph-vectors/stargazers
  37. https://github.com/login?return_to=/inejc/paragraph-vectors
  38. https://github.com/inejc/paragraph-vectors/network/members
  39. https://github.com/inejc
  40. https://github.com/inejc/paragraph-vectors
  41. https://github.com/inejc/paragraph-vectors
  42. https://github.com/inejc/paragraph-vectors/issues
  43. https://github.com/inejc/paragraph-vectors/pulls
  44. https://github.com/inejc/paragraph-vectors/projects
  45. https://github.com/inejc/paragraph-vectors/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/topics/doc2vec
  48. https://github.com/topics/neural-networks
  49. https://github.com/topics/machine-learning
  50. https://github.com/topics/deep-learning
  51. https://github.com/topics/nlp
  52. https://github.com/topics/pytorch
  53. https://github.com/topics/unsupervised-learning
  54. https://github.com/inejc/paragraph-vectors/commits/master
  55. https://github.com/inejc/paragraph-vectors/branches
  56. https://github.com/inejc/paragraph-vectors/releases
  57. https://github.com/inejc/paragraph-vectors/graphs/contributors
  58. https://github.com/inejc/paragraph-vectors/blob/master/license
  59. https://github.com/inejc/paragraph-vectors/search?l=python
  60. https://github.com/inejc/paragraph-vectors/find/master
  61. https://github.com/inejc/paragraph-vectors/archive/master.zip
  62. https://github.com/login?return_to=https://github.com/inejc/paragraph-vectors
  63. https://github.com/join?return_to=/inejc/paragraph-vectors
  64. https://desktop.github.com/
  65. https://desktop.github.com/
  66. https://developer.apple.com/xcode/
  67. https://visualstudio.github.com/
  68. https://github.com/inejc
  69. https://github.com/inejc/paragraph-vectors/commits?author=inejc
  70. https://github.com/inejc/paragraph-vectors/commit/33f6465208f738a5dac69810d709459cc99ed704
  71. https://github.com/inejc/paragraph-vectors/pull/22
  72. https://github.com/inejc/paragraph-vectors/commit/33f6465208f738a5dac69810d709459cc99ed704
  73. https://github.com/inejc/paragraph-vectors/commit/33f6465208f738a5dac69810d709459cc99ed704
  74. https://github.com/inejc/paragraph-vectors/tree/33f6465208f738a5dac69810d709459cc99ed704
  75. https://github.com/inejc/paragraph-vectors/tree/master/.github
  76. https://github.com/inejc/paragraph-vectors/tree/master/data
  77. https://github.com/inejc/paragraph-vectors/commit/40f51f0d1011d8933626edb908ee3b7568341977
  78. https://github.com/inejc/paragraph-vectors/tree/master/diagnostics
  79. https://github.com/inejc/paragraph-vectors/commit/a7c3de399bf67ba4ae1ef40ab3db26eeec1debb5
  80. https://github.com/inejc/paragraph-vectors/tree/master/models
  81. https://github.com/inejc/paragraph-vectors/commit/a7e2ef603292a47be82ac4bf95477e8fe2c8c18a
  82. https://github.com/inejc/paragraph-vectors/tree/master/paragraphvec
  83. https://github.com/inejc/paragraph-vectors/commit/d26e3941b38cd42aab0f0ddcaec24d362810343f
  84. https://github.com/inejc/paragraph-vectors/tree/master/tests
  85. https://github.com/inejc/paragraph-vectors/commit/0af5c1cb9180ecfdcc4b9a1fb743898e9603a60e
  86. https://github.com/inejc/paragraph-vectors/blob/master/.coveragerc
  87. https://github.com/inejc/paragraph-vectors/blob/master/.gitignore
  88. https://github.com/inejc/paragraph-vectors/commit/a7c3de399bf67ba4ae1ef40ab3db26eeec1debb5
  89. https://github.com/inejc/paragraph-vectors/blob/master/.travis.yml
  90. https://github.com/inejc/paragraph-vectors/commit/e1b59abf27bd06e4e5287098494efa415cc2059f
  91. https://github.com/inejc/paragraph-vectors/blob/master/license
  92. https://github.com/inejc/paragraph-vectors/blob/master/readme.md
  93. https://github.com/inejc/paragraph-vectors/blob/master/codecov.yml
  94. https://github.com/inejc/paragraph-vectors/blob/master/requirements.txt
  95. https://github.com/inejc/paragraph-vectors/blob/master/setup.py
  96. https://travis-ci.org/inejc/paragraph-vectors
  97. https://codecov.io/gh/inejc/paragraph-vectors
  98. https://codebeat.co/projects/github-com-inejc-paragraph-vectors-master
  99. https://www.codacy.com/app/inejc/paragraph-vectors?utm_source=github.com&utm_medium=referral&utm_content=inejc/paragraph-vectors&utm_campaign=badge_grade
 100. https://github.com/inejc/paragraph-vectors/blob/master/.github/dmdbow.png?raw=true
 101. http://pytorch.org/
 102. https://github.com/inejc/paragraph-vectors/blob/master/data
 103. https://github.com/inejc/paragraph-vectors/blob/master/paragraphvec/train.py
 104. https://github.com/inejc/paragraph-vectors/blob/master/models
 105. https://github.com/inejc/paragraph-vectors/blob/master/data
 106. https://github.com/inejc/paragraph-vectors/blob/master/.github/learned_vectors_pca.png?raw=true
 107. https://arxiv.org/abs/1310.4546
 108. http://papers.nips.cc/paper/5165-learning-word-embeddings-efficiently-with
 109. https://arxiv.org/abs/1410.8251
 110. http://ruder.io/word-embeddings-softmax/index.html
 111. https://arxiv.org/abs/1405.4053
 112. https://arxiv.org/abs/1507.07998
 113. https://github.com/site/terms
 114. https://github.com/site/privacy
 115. https://github.com/security
 116. https://githubstatus.com/
 117. https://help.github.com/
 118. https://github.com/contact
 119. https://github.com/pricing
 120. https://developer.github.com/
 121. https://training.github.com/
 122. https://github.blog/
 123. https://github.com/about
 124. https://github.com/inejc/paragraph-vectors
 125. https://github.com/inejc/paragraph-vectors

   hidden links:
 127. https://github.com/
 128. https://github.com/inejc/paragraph-vectors
 129. https://github.com/inejc/paragraph-vectors
 130. https://github.com/inejc/paragraph-vectors
 131. https://help.github.com/articles/which-remote-url-should-i-use
 132. https://github.com/inejc/paragraph-vectors#paragraph-vectors
 133. https://github.com/inejc/paragraph-vectors#installation
 134. https://github.com/inejc/paragraph-vectors#usage
 135. https://github.com/inejc/paragraph-vectors#parameters
 136. https://github.com/inejc/paragraph-vectors#parameters-1
 137. https://github.com/inejc/paragraph-vectors#example-of-trained-vectors
 138. https://github.com/inejc/paragraph-vectors#resources
 139. https://github.com/
