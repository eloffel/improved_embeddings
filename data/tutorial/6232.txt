   #[1]github [2]recent commits to monkeylearn-python:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]21
     * [35]star [36]118
     * [37]fork [38]33

[39]monkeylearn/[40]monkeylearn-python

   [41]code [42]issues 0 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   official python client for the monkeylearn api. build and consume
   machine learning models for language processing from your python apps.
   [47]language-processing [48]machine-learning [49]nlp
   [50]natural-language-processing [51]text-classification
   [52]monkeylearn-python [53]monkeylearn-api
     * [54]62 commits
     * [55]4 branches
     * [56]23 releases
     * [57]fetching contributors
     * [58]mit

    1. [59]python 100.0%

   (button) python
   branch: master (button) new pull request
   [60]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/m
   [61]download zip

downloading...

   want to be notified of new releases in monkeylearn/monkeylearn-python?
   [62]sign in [63]sign up

launching github desktop...

   if nothing happens, [64]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [65]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [66]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [67]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [68]permalink
   type       name              latest commit message         commit time
        failed to load latest commit information.
        [69]monkeylearn
        [70].gitignore
        [71]license.txt
        [72]readme.md
        [73]setup.id18
        [74]setup.py    [75]fix long_description with readme jan 11, 2019

readme.md

monkeylearn api for python

   official python client for the [76]monkeylearn api. build and run
   machine learning models for language processing from your python apps.

installation

   you can use pip to install the library:
$ pip install monkeylearn

   alternatively, you can just clone the repository and run the setup.py
   script:
$ python setup.py install

usage

   before making requests to the api, you need to create an instance of
   the monkeylearn client. you will have to use your [77]account api key:
from monkeylearn import monkeylearn

# instantiate the client using your api key
ml = monkeylearn('<your api token here>')

requests

   from the monkeylearn client instance, you can call any endpoint (check
   the [78]available endpoints below). for example, you can [79]classify a
   list of texts using the public [80]id31 classifier:
response = ml.classifiers.classify(
    model_id='cl_jx8qzyjh',
    data=[
        'great hotel with excellent location',
        'this is the worst hotel ever.'
    ]
)

responses

   the response object returned by every endpoint call is a
   monkeylearnresponse object. the body attribute has the parsed response
   from the api:
print(response.body)
# =>  [
# =>      {
# =>          'text': 'great hotel with excellent location',
# =>          'external_id': null,
# =>          'error': false,
# =>          'classifications': [
# =>              {
# =>                  'tag_name': 'positive',
# =>                  'tag_id': 1994,
# =>                  'confidence': 0.922,
# =>              }
# =>          ]
# =>      },
# =>      {
# =>          'text': 'this is the worst hotel ever.',
# =>          'external_id': null,
# =>          'error': false,
# =>          'classifications': [
# =>              {
# =>                  'tag_name': 'negative',
# =>                  'tag_id': 1941,
# =>                  'confidence': 0.911,
# =>              }
# =>          ]
# =>      }
# =>  ]

   you can also access other attributes in the response object to get
   information about the queries used or available:
print(response.plan_queries_allowed)
# =>  300

print(response.plan_queries_remaining)
# =>  240

print(response.request_queries_used)
# =>  2

errors

   endpoint calls may raise exceptions. here is an example on how to
   handle them:
from monkeylearn.exceptions import planquerylimiterror, monkeylearnexception

try:
    response = ml.classifiers.classify('[model_id]', data=['my text'])
except planquerylimiterror as e:
    # no monthly queries left
    # e.response contains the monkeylearnresponse object
    print(e.error_code, e.detail)
except monkeylearnexception:
    raise

   available exceptions:
   class description
   monkeylearnexception base class for every exception below.
   requestparamserror an invalid parameter was sent. check the exception
   message or response object for more information.
   authenticationerror authentication failed, usually because an invalid
   token was provided. check the exception message. more about
   [81]authentication.
   forbiddenerror you don't have permissions to perform the action on the
   given resource.
   modellimiterror you have reached the custom model limit for your plan.
   modelnotfound the model does not exist. check the model_id.
   tagnotfound the tag does not exist. check the tag_id parameter.
   planquerylimiterror you have reached the monthly query limit for your
   plan. consider upgrading your plan. more about [82]plan query limits.
   planratelimiterror you have sent too many requests in the last minute.
   check the exception detail. more about [83]plan rate limit.
   concurrencyratelimiterror you have sent too many requests in the last
   second. check the exception detail. more about [84]concurrency rate
   limit.
   modelstateerror the state of the model is invalid. check the exception
   detail.

auto-batching

   [85]classify and [86]extract endpoints might require more than one
   request to the monkeylearn api in order to process every text in the
   data parameter. if the auto_batch parameter is true (which is the
   default value), you won't have to keep the data length below the max
   allowed value (200). you can just pass the full list and the library
   will handle the batching and make the necessary requests. if the
   retry_if_throttled parameter is true (which is the default value), it
   will also wait and retry if the api throttled a request.

   let's say you send a data parameter with 300 texts and auto_batch is
   enabled. the list will be split internally and two requests will be
   sent to monkeylearn with 200 and 100 texts, respectively. if all
   requests respond with a 200 status code, the responses will be appended
   and you will get the 300 classifications as usual in the
   monkeylearnresponse.body attribute:
data = ['text to classify'] * 300
response = ml.classifiers.classify('[model_id]', data)
assert len(response.body) == 300  # => true

   now, let's say you only had 200 queries left when trying the previous
   example, the second internal request would fail since you wouldn't have
   queries left after the first batch and a planquerylimiterror exception
   would be raised. the first 200 (successful) classifications will be in
   the exception object. however, if you don't manage this exception with
   an except clause, those first 200 successful classifications will be
   lost. here's how you should handle that case:
from monkeylearn.exceptions import planquerylimiterror

data = ['text to classify'] * 300
batch_size = 200

try:
    response = ml.classifiers.classify('[model_id]', data, batch_size=batch_size
)
except planquerylimiterror as e:
    partial_predictions = e.response.body  # the body of the successful response
s
    non_2xx_raw_responses = r.response.failed_raw_responses  # list of requests
responses objects
else:
    predictions = response.body

   this is very convenient and usually should be enough. if you need more
   flexibility, you can manage batching and rate limits yourself.
from time import sleep
from monkeylearn.exceptions import planquerylimiterror, concurrencyratelimiterro
r, planratelimiterror

data = ['text to classify'] * 300
batch_size = 200
predictions = []

for i in range(0, len(data), batch_size):
    batch_data = data[i:i + batch_size]

    retry = true
    while retry:
        try:
            retry = true
            response = ml.classifiers.classify('[model_id]', batch_data, auto_ba
tch=false,
                                               retry_if_throttled=false)
        except planratelimiterror as e:
            sleep(e.seconds_to_wait)
        except concurrencyratelimiterror:
            sleep(2)
        except planquerylimiterror:
            raise
        else:
            retry = false

    predictions.extend(response.body)

   this way you'll be able to control every request that is sent to the
   monkeylearn api.

available endpoints

   these are all the endpoints of the api. for more information about each
   endpoint, check out the [87]api documentation.

classifiers

[88]classify

def monkeylearn.classifiers.classify(model_id, data, production_model=false, bat
ch_size=200,
                                     auto_batch=true, retry_if_throttled=true)

   parameters:
   parameter type description
   model_id str classifier id. it always starts with 'cl', for example,
   'cl_ojnmkt2v'.
   data list[str or dict] a list of up to 200 data elements to classify.
   each element must be a string with the text or a dict with the required
   text key and the text as the value. you can provide an optional
   external_id key with a string that will be included in the response.
   production_model bool indicates if the classifications are performed by
   the production model. only use this parameter with custom models (not
   with the public ones). note that you first need to deploy your model to
   production either from the ui model settings or by using the
   [89]classifier deploy endpoint.
   batch_size int max number of texts each request will send to
   monkeylearn. a number from 1 to 200.
   auto_batch bool split the data list into smaller valid lists, send each
   one in separate request to monkeylearn, and merge the responses.
   retry_if_throttled bool if a request is [90]throttled, sleep and retry
   the request.

   example:
data = ['first text', {'text': 'second text', 'external_id': '2'}]
response = ml.classifiers.classify('[model_id]', data)

[91]classifier detail

def monkeylearn.classifiers.detail(model_id, retry_if_throttled=true)

   parameters:
   parameter type description
   model_id str classifier id. it always starts with 'cl', for example,
   'cl_ojnmkt2v'.
   retry_if_throttled bool if a request is [92]throttled, sleep and retry
   the request.

   example:
response = ml.classifiers.detail('[model_id]')

[93]create classifier

def monkeylearn.classifiers.create(name, description='', algorithm='nb', languag
e='en',
                                   max_features=10000, ngram_range=(1, 1), use_s
temming=true,
                                   preprocess_numbers=true, preprocess_social_me
dia=false,
                                   normalize_weights=true, stopwords=true, white
list=none,
                                   retry_if_throttled=true)

   parameters:
   parameter type description
   name str the name of the model.
   description str the description of the model.
   algorithm str the [94]algorithm used when training the model. it can be
   either "nb" or "id166".
   language str the [95]language of the model. full list of [96]supported
   languages.
   max_features int the [97]maximum number of features used when training
   the model. between 10 and 100000.
   ngram_range tuple(int,int) indicates which [98]id165 range used when
   training the model. a list of two numbers between 1 and 3. they
   indicate the minimum and the maximum n for the id165s used.
   use_id30 bool indicates whether [99]id30 is used when training
   the model.
   preprocess_numbers bool indicates whether [100]number preprocessing is
   done when training the model.
   preprocess_social_media bool indicates whether [101]preprocessing of
   social media is done when training the model.
   normalize_weights bool indicates whether [102]weights will be
   normalized when training the model.
   stopwords bool or list the list of [103]stopwords used when training
   the model. use false for no stopwords, true for the default stopwords,
   or a list of strings for custom stopwords.
   whitelist list the [104]whitelist of words used when training the
   model.
   retry_if_throttled bool if a request is [105]throttled, sleep and retry
   the request.

   example:
response = ml.classifiers.create(name='new classifier', stopwords=true)

[106]edit classifier

def monkeylearn.classifiers.edit(model_id, name=none, description=none, algorith
m=none,
                                 language=none, max_features=none, ngram_range=n
one,
                                 use_id30=none, preprocess_numbers=none,
                                 preprocess_social_media=none, normalize_weights
=none,
                                 stopwords=none, whitelist=none, retry_if_thrott
led=none)

   parameters:
   parameter type description
   model_id str classifier id. it always starts with 'cl', for example,
   'cl_ojnmkt2v'.
   name str the name of the model.
   description str the description of the model.
   algorithm str the [107]algorithm used when training the model. it can
   be either "nb" or "id166".
   language str the [108]language of the model. full list of
   [109]supported languages.
   max_features int the [110]maximum number of features used when training
   the model. between 10 and 100000.
   ngram_range tuple(int,int) indicates which [111]id165 range used when
   training the model. a list of two numbers between 1 and 3. they
   indicate the minimum and the maximum n for the id165s used.
   use_id30 bool indicates whether [112]id30 is used when training
   the model.
   preprocess_numbers bool indicates whether [113]number preprocessing is
   done when training the model.
   preprocess_social_media bool indicates whether [114]preprocessing of
   social media is done when training the model.
   normalize_weights bool indicates whether [115]weights will be
   normalized when training the model.
   stopwords bool or list the list of [116]stopwords used when training
   the model. use false for no stopwords, true for the default stopwords,
   or a list of strings for custom stopwords.
   whitelist list the [117]whitelist of words used when training the
   model.
   retry_if_throttled bool if a request is [118]throttled, sleep and retry
   the request.

   example:
response = ml.classifiers.edit('[model_id]', description='the new description of
 the classifier')

[119]delete classifier

def monkeylearn.classifiers.delete(model_id, retry_if_throttled=true)

   parameters:
   parameter type description
   model_id str classifier id. it always starts with 'cl', for example,
   'cl_ojnmkt2v'.
   retry_if_throttled bool if a request is [120]throttled, sleep and retry
   the request.

   example:
response = ml.classifiers.delete('[model_id]')

[121]list classifiers

def monkeylearn.classifiers.list(page=1, per_page=20, order_by='-created', retry
_if_throttled=true)

   parameters:
   parameter type description
   page int specifies which page to get.
   per_page int specifies how many items per page will be returned.
   order_by string or list specifies the ordering criteria. it can either
   be a string for single criteria ordering or a list of strings for more
   than one. each string must be a valid field name; if you want
   inverse/descending order of the field prepend a - (dash) character.
   some valid examples are: 'is_public', '-name' or ['-is_public',
   'name'].
   retry_if_throttled bool if a request is [122]throttled, sleep and retry
   the request.

   example:
response = ml.classifiers.list(page=2, per_page=5, order_by=['-is_public', 'name
'])

[123]deploy

def monkeylearn.classifiers.deploy(model_id, retry_if_throttled=true)

   parameters:
   parameter type description
   model_id str classifier id. it always starts with 'cl', for example,
   'cl_ojnmkt2v'.
   retry_if_throttled bool if a request is [124]throttled, sleep and retry
   the request.

   example:
response = ml.classifiers.deploy('[model_id]')

[125]train

def monkeylearn.classifiers.train(model_id, retry_if_throttled=true)

   parameters:
   parameter type description
   model_id str classifier id. it always starts with 'cl', for example,
   'cl_ojnmkt2v'.
   retry_if_throttled bool if a request is [126]throttled, sleep and retry
   the request.

   example:
response = ml.classifiers.train('[model_id]')

[127]tag detail

def monkeylearn.classifiers.tags.detail(model_id, tag_id, retry_if_throttled=tru
e)

   parameters:
   parameter type description
   model_id str classifier id. it always starts with 'cl', for example,
   'cl_ojnmkt2v'.
   tag_id int tag id.
   retry_if_throttled bool if a request is [128]throttled, sleep and retry
   the request.

   example:
response = ml.classifiers.tags.detail('[model_id]', tag_id)

[129]create tag

def monkeylearn.classifiers.tags.create(model_id, name, parent_id=none, retry_if
_throttled=true)

   parameters:
   parameter type description
   model_id str classifier id. it always starts with 'cl', for example,
   'cl_ojnmkt2v'.
   name str the name of the new tag.
   parent_id int deprecated (only for v2 models). the id of the parent
   tag.
   retry_if_throttled bool if a request is [130]throttled, sleep and retry
   the request.

   example:
response = ml.classifiers.tags.create('[model_id]', 'positive')

[131]edit tag

def monkeylearn.classifiers.tags.edit(model_id, tag_id, name=none, parent_id=non
e,
                                      retry_if_throttled=true)

   parameters:
   parameter type description
   model_id str classifier id. it always starts with 'cl', for example,
   'cl_ojnmkt2v'.
   tag_id int tag id.
   name str the new name of the tag.
   parent_id int deprecated (only for v2 models). the new parent tag id.
   retry_if_throttled bool if a request is [132]throttled, sleep and retry
   the request.

   example:
response = ml.classifiers.tags.edit('[model_id]', tag_id, 'new name')

[133]delete tag

def monkeylearn.classifiers.tags.delete(model_id, tag_id, move_data_to=none,
                                        retry_if_throttled=true)

   parameters:
   parameter type description
   model_id str classifier id. it always starts with 'cl', for example,
   'cl_ojnmkt2v'.
   tag_id int tag id.
   move_data_to int an optional tag id. if provided, training data
   associated with the tag to be deleted will be moved to the specified
   tag before deletion.
   retry_if_throttled bool if a request is [134]throttled, sleep and retry
   the request.

   example:
response = ml.classifiers.tags.delete('[model_id]', tag_id)

[135]upload data

def monkeylearn.classifiers.upload_data(model_id, data, retry_if_throttled=true)

   parameters:
   parameter type description
   model_id str classifier id. it always starts with 'cl', for example,
   'cl_ojnmkt2v'.
   data list[dict] a list of dicts with the keys described below.
   retry_if_throttled bool if a request is [136]throttled, sleep and retry
   the request.

   data dict keys:
   key description
   text a string of the text to upload.
   tags a list of tags that can be refered to by their numeric id or their
   name. the text will be tagged with each tag in the list when created
   (in case it doesn't already exist on the model). otherwise, its tags
   will be updated to the new ones. new tags will be created if they don't
   already exist.
   markers an optional list of string. each one represents a marker that
   will be associated with the text. new markers will be created if they
   don't already exist.

   example:
response = ml.classifiers.upload_data(
    model_id='[model_id]',
    data=[{'text': 'text 1', 'tags': [tag_id_1, '[tag_name]']},
          {'text': 'text 2', 'tags': [tag_id_1, tag_id_2]}]
)

extractors

[137]extract

def monkeylearn.extractors.extract(model_id, data, production_model=false, batch
_size=200,
                                   retry_if_throttled=true, extra_args=none)

   parameters:
   parameter type description
   model_id str extractor id. it always starts with 'ex', for example,
   'ex_ojnmkt2v'.
   data list[str or dict] a list of up to 200 data elements to extract
   from. each element must be a string with the text or a dict with the
   required text key and the text as the value. you can also provide an
   optional external_id key with a string that will be included in the
   response.
   production_model bool indicates if the extractions are performed by the
   production model. only use this parameter with custom models (not with
   the public ones). note that you first need to deploy your model to
   production from the ui model settings.
   batch_size int max number of texts each request will send to
   monkeylearn. a number from 1 to 200.
   retry_if_throttled bool if a request is [138]throttled, sleep and retry
   the request.

   example:
data = ['first text', {'text': 'second text', 'external_id': '2'}]
response = ml.extractors.extract('[model_id]', data=data)

[139]extractor detail

def monkeylearn.extractors.detail(model_id, retry_if_throttled=true)

   parameters:
   parameter type description
   model_id str extractor id. it always starts with 'ex', for example,
   'ex_ojnmkt2v'.
   retry_if_throttled bool if a request is [140]throttled, sleep and retry
   the request.

   example:
response = ml.extractors.detail('[model_id]')

[141]list extractors

def monkeylearn.extractors.list(page=1, per_page=20, order_by='-created', retry_
if_throttled=true)

   parameters:
   parameter type description
   page int specifies which page to get.
   per_page int specifies how many items per page will be returned.
   order_by string or list specifies the ordering criteria. it can either
   be a string for single criteria ordering or a list of strings for more
   than one. each string must be a valid field name; if you want
   inverse/descending order of the field prepend a - (dash) character.
   some valid examples are: 'is_public', '-name' or ['-is_public',
   'name'].
   retry_if_throttled bool if a request is [142]throttled, sleep and retry
   the request.

   example:
response = ml.extractors.list(page=2, per_page=5, order_by=['-is_public', 'name'
])

     *    2019 github, inc.
     * [143]terms
     * [144]privacy
     * [145]security
     * [146]status
     * [147]help

     * [148]contact github
     * [149]pricing
     * [150]api
     * [151]training
     * [152]blog
     * [153]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [154]reload to refresh your
   session. you signed out in another tab or window. [155]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/monkeylearn/monkeylearn-python/commits/master.atom
   3. https://github.com/monkeylearn/monkeylearn-python#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/monkeylearn/monkeylearn-python
  32. https://github.com/join
  33. https://github.com/login?return_to=/monkeylearn/monkeylearn-python
  34. https://github.com/monkeylearn/monkeylearn-python/watchers
  35. https://github.com/login?return_to=/monkeylearn/monkeylearn-python
  36. https://github.com/monkeylearn/monkeylearn-python/stargazers
  37. https://github.com/login?return_to=/monkeylearn/monkeylearn-python
  38. https://github.com/monkeylearn/monkeylearn-python/network/members
  39. https://github.com/monkeylearn
  40. https://github.com/monkeylearn/monkeylearn-python
  41. https://github.com/monkeylearn/monkeylearn-python
  42. https://github.com/monkeylearn/monkeylearn-python/issues
  43. https://github.com/monkeylearn/monkeylearn-python/pulls
  44. https://github.com/monkeylearn/monkeylearn-python/projects
  45. https://github.com/monkeylearn/monkeylearn-python/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/topics/language-processing
  48. https://github.com/topics/machine-learning
  49. https://github.com/topics/nlp
  50. https://github.com/topics/natural-language-processing
  51. https://github.com/topics/text-classification
  52. https://github.com/topics/monkeylearn-python
  53. https://github.com/topics/monkeylearn-api
  54. https://github.com/monkeylearn/monkeylearn-python/commits/master
  55. https://github.com/monkeylearn/monkeylearn-python/branches
  56. https://github.com/monkeylearn/monkeylearn-python/releases
  57. https://github.com/monkeylearn/monkeylearn-python/graphs/contributors
  58. https://github.com/monkeylearn/monkeylearn-python/blob/master/license.txt
  59. https://github.com/monkeylearn/monkeylearn-python/search?l=python
  60. https://github.com/monkeylearn/monkeylearn-python/find/master
  61. https://github.com/monkeylearn/monkeylearn-python/archive/master.zip
  62. https://github.com/login?return_to=https://github.com/monkeylearn/monkeylearn-python
  63. https://github.com/join?return_to=/monkeylearn/monkeylearn-python
  64. https://desktop.github.com/
  65. https://desktop.github.com/
  66. https://developer.apple.com/xcode/
  67. https://visualstudio.github.com/
  68. https://github.com/monkeylearn/monkeylearn-python/tree/025e660b651f931df0bc46d7410baf7debb7680a
  69. https://github.com/monkeylearn/monkeylearn-python/tree/master/monkeylearn
  70. https://github.com/monkeylearn/monkeylearn-python/blob/master/.gitignore
  71. https://github.com/monkeylearn/monkeylearn-python/blob/master/license.txt
  72. https://github.com/monkeylearn/monkeylearn-python/blob/master/readme.md
  73. https://github.com/monkeylearn/monkeylearn-python/blob/master/setup.id18
  74. https://github.com/monkeylearn/monkeylearn-python/blob/master/setup.py
  75. https://github.com/monkeylearn/monkeylearn-python/commit/b68e90d32e7e61c3e8bb020821ff317c676c42dc
  76. https://monkeylearn.com/api/
  77. https://app.monkeylearn.com/main/my-account/tab/api-keys/
  78. https://github.com/monkeylearn/monkeylearn-python#available-endpoints
  79. https://github.com/monkeylearn/monkeylearn-python#classify
  80. https://app.monkeylearn.com/main/classifiers/cl_ojnmkt2v/
  81. https://monkeylearn.com/api/v3/#authentication
  82. https://monkeylearn.com/api/v3/#query-limits
  83. https://monkeylearn.com/api/v3/#plan-rate-limit
  84. https://monkeylearn.com/api/v3/#concurrecy-rate-limit
  85. https://github.com/monkeylearn/monkeylearn-python#classify
  86. https://github.com/monkeylearn/monkeylearn-python#extract
  87. https://monkeylearn.com/api/v3/
  88. https://monkeylearn.com/api/v3/?shell#classify
  89. https://github.com/monkeylearn/monkeylearn-python#deploy
  90. https://monkeylearn.com/api/v3/#query-limits
  91. https://monkeylearn.com/api/v3/?shell#classifier-detail
  92. https://monkeylearn.com/api/v3/#query-limits
  93. https://monkeylearn.com/api/v3/?shell#create-classifier
  94. http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-changing-the-algorithm
  95. http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-language
  96. https://monkeylearn.com/api/v3/#classifier-detail
  97. http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-max-features
  98. http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-id165-range
  99. http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-id30
 100. http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-preprocess-numbers
 101. http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-social-media-preprocessing-and-regular-expressions
 102. http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-normalize-weights
 103. http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-filter-stopwords
 104. http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-whitelist
 105. https://monkeylearn.com/api/v3/#query-limits
 106. https://monkeylearn.com/api/v3/?shell#edit-classifier
 107. http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-changing-the-algorithm
 108. http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-language
 109. https://monkeylearn.com/api/v3/#classifier-detail
 110. http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-max-features
 111. http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-id165-range
 112. http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-id30
 113. http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-preprocess-numbers
 114. http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-social-media-preprocessing-and-regular-expressions
 115. http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-normalize-weights
 116. http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-filter-stopwords
 117. http://help.monkeylearn.com/tips-and-tricks-for-custom-modules/parameters-whitelist
 118. https://monkeylearn.com/api/v3/#query-limits
 119. https://monkeylearn.com/api/v3/?shell#delete-classifier
 120. https://monkeylearn.com/api/v3/#query-limits
 121. https://monkeylearn.com/api/v3/?shell#list-classifiers
 122. https://monkeylearn.com/api/v3/#query-limits
 123. https://monkeylearn.com/api/v3/?shell#deploy
 124. https://monkeylearn.com/api/v3/#query-limits
 125. https://monkeylearn.com/api/v3/?shell#train
 126. https://monkeylearn.com/api/v3/#query-limits
 127. https://monkeylearn.com/api/v3/?shell#classify
 128. https://monkeylearn.com/api/v3/#query-limits
 129. https://monkeylearn.com/api/v3/?shell#create-tag
 130. https://monkeylearn.com/api/v3/#query-limits
 131. https://monkeylearn.com/api/v3/?shell#edit-tag
 132. https://monkeylearn.com/api/v3/#query-limits
 133. https://monkeylearn.com/api/v3/?shell#delete-tag
 134. https://monkeylearn.com/api/v3/#query-limits
 135. https://monkeylearn.com/api/v3/?shell#upload-data
 136. https://monkeylearn.com/api/v3/#query-limits
 137. https://monkeylearn.com/api/v3/?shell#extract
 138. https://monkeylearn.com/api/v3/#query-limits
 139. https://monkeylearn.com/api/v3/?shell#extractor-detail
 140. https://monkeylearn.com/api/v3/#query-limits
 141. https://monkeylearn.com/api/v3/?shell#list-extractors
 142. https://monkeylearn.com/api/v3/#query-limits
 143. https://github.com/site/terms
 144. https://github.com/site/privacy
 145. https://github.com/security
 146. https://githubstatus.com/
 147. https://help.github.com/
 148. https://github.com/contact
 149. https://github.com/pricing
 150. https://developer.github.com/
 151. https://training.github.com/
 152. https://github.blog/
 153. https://github.com/about
 154. https://github.com/monkeylearn/monkeylearn-python
 155. https://github.com/monkeylearn/monkeylearn-python

   hidden links:
 157. https://github.com/
 158. https://github.com/monkeylearn/monkeylearn-python
 159. https://github.com/monkeylearn/monkeylearn-python
 160. https://github.com/monkeylearn/monkeylearn-python
 161. https://help.github.com/articles/which-remote-url-should-i-use
 162. https://github.com/monkeylearn/monkeylearn-python#monkeylearn-api-for-python
 163. https://github.com/monkeylearn/monkeylearn-python#installation
 164. https://github.com/monkeylearn/monkeylearn-python#usage
 165. https://github.com/monkeylearn/monkeylearn-python#requests
 166. https://github.com/monkeylearn/monkeylearn-python#responses
 167. https://github.com/monkeylearn/monkeylearn-python#errors
 168. https://github.com/monkeylearn/monkeylearn-python#auto-batching
 169. https://github.com/monkeylearn/monkeylearn-python#available-endpoints
 170. https://github.com/monkeylearn/monkeylearn-python#classifiers
 171. https://github.com/monkeylearn/monkeylearn-python#classify
 172. https://github.com/monkeylearn/monkeylearn-python#classifier-detail
 173. https://github.com/monkeylearn/monkeylearn-python#create-classifier
 174. https://github.com/monkeylearn/monkeylearn-python#edit-classifier
 175. https://github.com/monkeylearn/monkeylearn-python#delete-classifier
 176. https://github.com/monkeylearn/monkeylearn-python#list-classifiers
 177. https://github.com/monkeylearn/monkeylearn-python#deploy
 178. https://github.com/monkeylearn/monkeylearn-python#train
 179. https://github.com/monkeylearn/monkeylearn-python#tag-detail
 180. https://github.com/monkeylearn/monkeylearn-python#create-tag
 181. https://github.com/monkeylearn/monkeylearn-python#edit-tag
 182. https://github.com/monkeylearn/monkeylearn-python#delete-tag
 183. https://github.com/monkeylearn/monkeylearn-python#upload-data
 184. https://github.com/monkeylearn/monkeylearn-python#extractors
 185. https://github.com/monkeylearn/monkeylearn-python#extract
 186. https://github.com/monkeylearn/monkeylearn-python#extractor-detail
 187. https://github.com/monkeylearn/monkeylearn-python#list-extractors
 188. https://github.com/
