   #[1]github [2]recent commits to kagome:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]21
     * [35]star [36]363
     * [37]fork [38]27

[39]ikawaha/[40]kagome

   [41]code [42]issues 2 [43]pull requests 0 [44]projects 0 [45]wiki
   [46]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [47]sign up
   self-contained japanese morphological analyzer written in pure go
   [48]japanese [49]tokenizer [50]nlp-library [51]japanese-language
   [52]pos-tagging [53]segmentation [54]morphological-analysis
     * [55]400 commits
     * [56]4 branches
     * [57]29 releases
     * [58]fetching contributors
     * [59]apache-2.0

    1. [60]go 100.0%

   (button) go
   branch: master (button) new pull request
   [61]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/i
   [62]download zip

downloading...

   want to be notified of new releases in ikawaha/kagome?
   [63]sign in [64]sign up

launching github desktop...

   if nothing happens, [65]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [66]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [67]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [68]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [69]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [70]godeps [71]fix to stabilize the serialization ([72]#116[73]) jan 5,
   2018
   [74]_sample
   [75]cmd [76]fix misspelled words jun 11, 2018
   [77]internal [78]fix to return copied featurese feb 15, 2019
   [79]splitter
   [80]tokenizer
   [81].buildpacks
   [82].travis.yml
   [83]license.txt
   [84]notice.txt
   [85]procfile [86]add heroku settings dec 18, 2015
   [87]readme.md
   [88]app.json

readme.md

   [89]build status [90]buildstatus(windows) [91]coverage status [92]godoc
   [93]deploy

kagome japanese morphological analyzer

   kagome is an open source japanese morphological analyzer written in
   pure golang. the [94]mecab-ipadic and [95]unidic (unidic-mecab)
   dictionary/statiscal models are packaged in kagome binary.
% kagome
                                    
                    ,      ,*,*,*,*,         ,         ,         
                ,         ,*,*,*,*,   ,   ,   
                  ,      ,*,*,*,*,      ,      ,      
                ,         ,*,*,*,*,   ,   ,   
                  ,      ,*,*,*,*,      ,      ,      
                ,         ,*,*,*,*,   ,   ,   
                  ,         ,            ,*,*,*,      ,      ,      
eos

install

% go get -u github.com/ikawaha/kagome/...

usage

$ kagome -h
japanese morphological analyzer -- github.com/ikawaha/kagome
usage: kagome <command>
the commands are:
   [tokenize] - command line tokenize (*default)
   server - run tokenize server
   lattice - lattice viewer

tokenize [-file input_file] [-dic dic_file] [-udic userdic_file] [-sysdic (ipa|u
ni)] [-mode (normal|search|extended)]
  -dic string
       dic
  -file string
       input file
  -mode string
       tokenize mode (normal|search|extended) (default "normal")
  -sysdic string
       system dic type (ipa|uni) (default "ipa")
  -udic string
       user dic

command line mode

$ go run cmd/kagome/main.go -h

   or
$ go run cmd/kagome/main.go tokenize -h

usage of tokenize:
  -dic string
       dic
  -file string
       input file
  -mode string
       tokenize mode (normal|search|extended) (default "normal")
  -sysdic string
       system dic type (ipa|uni) (default "ipa")
  -udic string
       user dic

server mode

$ go run cmd/kagome/main.go server -h
usage of server:
  -http string
        http service address (default ":6060")
  -sysdic string
       system dic type (ipa|uni) (default "ipa")
  -udic string
        user dictionary

segmentation mode for search

   kagome has segmentation mode for search such as [96]kuromoji.
     * normal: regular segmentation
     * search: use a heuristic to do additional segmentation useful for
       search
     * extended: similar to search mode, but also unigram unknown words

   untokenized    normal         search           extended
                                                                                                                  
                                                                                                                  
                                                                                                                                                                                          
                                                                                                                                                        

http service

web api

$ kagome server -http=":8080" &
$ curl -xput localhost:8080/a -d'{"sentence":"                                    ", "mode":"normal"}'|j
q .
{
  "status": true,
  "tokens": [
    {
      "id": 36163,
      "start": 0,
      "end": 3,
      "surface": "         ",
      "class": "known",
      "features": [
        "      ",
        "      ",
        "*",
        "*",
        "*",
        "*",
        "         ",
        "         ",
        "         "
      ]
    },
    {
      "id": 73244,
      "start": 3,
      "end": 4,
      "surface": "   ",
      "class": "known",
      "features": [
        "      ",
        "         ",
        "*",
        "*",
        "*",
        "*",
        "   ",
        "   ",
        "   "
      ]
    },
    {
      "id": 74989,
      "start": 4,
      "end": 6,
      "surface": "      ",
      "class": "known",
      "features": [
        "      ",
        "      ",
        "*",
        "*",
        "*",
        "*",
        "      ",
        "      ",
        "      "
      ]
    },
    {
      "id": 73244,
      "start": 6,
      "end": 7,
      "surface": "   ",
      "class": "known",
      "features": [
        "      ",
        "         ",
        "*",
        "*",
        "*",
        "*",
        "   ",
        "   ",
        "   "
      ]
    },
    {
      "id": 74989,
      "start": 7,
      "end": 9,
      "surface": "      ",
      "class": "known",
      "features": [
        "      ",
        "      ",
        "*",
        "*",
        "*",
        "*",
        "      ",
        "      ",
        "      "
      ]
    },
    {
      "id": 55829,
      "start": 9,
      "end": 10,
      "surface": "   ",
      "class": "known",
      "features": [
        "      ",
        "         ",
        "*",
        "*",
        "*",
        "*",
        "   ",
        "   ",
        "   "
      ]
    },
    {
      "id": 8024,
      "start": 10,
      "end": 12,
      "surface": "      ",
      "class": "known",
      "features": [
        "      ",
        "         ",
        "            ",
        "*",
        "*",
        "*",
        "      ",
        "      ",
        "      "
      ]
    }
  ]
}

   parameters
   parameter type required description
   sentence string required sentenct to tokenize.
   mode string optional mode to tokenize the sentence. default is the
   "normal". selectable value is "normal", "search" or "extended".

[97]demo

   launch a server and access http://localhost:8888. (to draw a lattice,
   demo application uses [98]graphviz . you need graphviz installed.)
$ kagome -http=":8888" &

   [99]deploy

   [100]demo

user dictionary

   user dictionary format is same as kuromoji. there is a sample in
   _sample dir.
% kagome tokenize -udic _sample/userdic.txt
   68                  
                   ,         ,*,*,*,*,   ,      ,      
68            ,   ,*,*,*,*,*
                ,      ,         ,*,*,*,   ,      ,      
                  ,      ,*,*,*,*,      ,            ,            
                                ,         ,                        
eos

utility

   a debug tool of tokenize process outputs a lattice in graphviz dot
   format.
$ kagome lattice -v                                       |dot -tpng -o lattice.png
                      ,      ,*,*,*,*,         ,         ,         
                  ,         ,*,*,*,*,   ,   ,   
                    ,      ,*,*,*,*,      ,      ,      
                  ,         ,*,*,*,*,   ,   ,   
                    ,      ,*,*,*,*,      ,      ,      
                  ,         ,*,*,*,*,   ,   ,   
                    ,         ,            ,*,*,*,      ,      ,      
eos

   [101]lattice

programming example

   below is a simple go example that demonstrates how a simple text can be
   segmented.

   sample code:
package main

import (
        "fmt"
        "strings"

        "github.com/ikawaha/kagome/tokenizer"
)

func main() {
        t := tokenizer.new()
        tokens := t.tokenize("                        ") // t.analyze("                        ", tokenizer.norm
al)
        for _, token := range tokens {
                if token.class == tokenizer.dummy {
                        // bos: begin of sentence, eos: end of sentence.
                        fmt.printf("%s\n", token.surface)
                        continue
                }
                features := strings.join(token.features(), ",")
                fmt.printf("%s\t%v\n", token.surface, features)
        }
}

   output:
bos
                ,      ,*,*,*,*,      ,      ,      
               ,         ,      ,*,*,*,   ,   ,   
                ,      ,*,*,      ,         ,         ,      ,      
                   ,*,*,*,               ,         ,      ,      ,      
               ,      ,*,*,*,*,   ,   ,   
eos

working with google app engine

   the system dictionary unidic is too large to upload to google app
   engine. for google app engine, please use [102]kagome.ipadic which is a
   small dictionary version of kagome.

   see details: [103]https://github.com/ikawaha/kagome/issues/86

contributing

   issues and pull requests are always welcome. code changes are made to
   the develop branch. do not make your changes against the master branch.

license

   kagome is licensed under the apache license v2.0 and uses the
   mecab-ipadic, unidic dictionary/statistical model. see notice.txt for
   license details.

     *    2019 github, inc.
     * [104]terms
     * [105]privacy
     * [106]security
     * [107]status
     * [108]help

     * [109]contact github
     * [110]pricing
     * [111]api
     * [112]training
     * [113]blog
     * [114]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [115]reload to refresh your
   session. you signed out in another tab or window. [116]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/ikawaha/kagome/commits/master.atom
   3. https://github.com/ikawaha/kagome#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/ikawaha/kagome
  32. https://github.com/join
  33. https://github.com/login?return_to=/ikawaha/kagome
  34. https://github.com/ikawaha/kagome/watchers
  35. https://github.com/login?return_to=/ikawaha/kagome
  36. https://github.com/ikawaha/kagome/stargazers
  37. https://github.com/login?return_to=/ikawaha/kagome
  38. https://github.com/ikawaha/kagome/network/members
  39. https://github.com/ikawaha
  40. https://github.com/ikawaha/kagome
  41. https://github.com/ikawaha/kagome
  42. https://github.com/ikawaha/kagome/issues
  43. https://github.com/ikawaha/kagome/pulls
  44. https://github.com/ikawaha/kagome/projects
  45. https://github.com/ikawaha/kagome/wiki
  46. https://github.com/ikawaha/kagome/pulse
  47. https://github.com/join?source=prompt-code
  48. https://github.com/topics/japanese
  49. https://github.com/topics/tokenizer
  50. https://github.com/topics/nlp-library
  51. https://github.com/topics/japanese-language
  52. https://github.com/topics/pos-tagging
  53. https://github.com/topics/segmentation
  54. https://github.com/topics/morphological-analysis
  55. https://github.com/ikawaha/kagome/commits/master
  56. https://github.com/ikawaha/kagome/branches
  57. https://github.com/ikawaha/kagome/releases
  58. https://github.com/ikawaha/kagome/graphs/contributors
  59. https://github.com/ikawaha/kagome/blob/master/license.txt
  60. https://github.com/ikawaha/kagome/search?l=go
  61. https://github.com/ikawaha/kagome/find/master
  62. https://github.com/ikawaha/kagome/archive/master.zip
  63. https://github.com/login?return_to=https://github.com/ikawaha/kagome
  64. https://github.com/join?return_to=/ikawaha/kagome
  65. https://desktop.github.com/
  66. https://desktop.github.com/
  67. https://developer.apple.com/xcode/
  68. https://visualstudio.github.com/
  69. https://github.com/ikawaha/kagome/tree/c7e4a44ef947faade8ca78f5a1e51727ede74ac2
  70. https://github.com/ikawaha/kagome/tree/master/godeps
  71. https://github.com/ikawaha/kagome/commit/a01f016539a1b763dfae43303e3ee45fc52db937
  72. https://github.com/ikawaha/kagome/pull/116
  73. https://github.com/ikawaha/kagome/commit/a01f016539a1b763dfae43303e3ee45fc52db937
  74. https://github.com/ikawaha/kagome/tree/master/_sample
  75. https://github.com/ikawaha/kagome/tree/master/cmd
  76. https://github.com/ikawaha/kagome/commit/1d6bb75162078635c06c14fbac48449d45cb3a61
  77. https://github.com/ikawaha/kagome/tree/master/internal
  78. https://github.com/ikawaha/kagome/commit/237022b9132bfbf0f78ddeb793b34ca9386471fe
  79. https://github.com/ikawaha/kagome/tree/master/splitter
  80. https://github.com/ikawaha/kagome/tree/master/tokenizer
  81. https://github.com/ikawaha/kagome/blob/master/.buildpacks
  82. https://github.com/ikawaha/kagome/blob/master/.travis.yml
  83. https://github.com/ikawaha/kagome/blob/master/license.txt
  84. https://github.com/ikawaha/kagome/blob/master/notice.txt
  85. https://github.com/ikawaha/kagome/blob/master/procfile
  86. https://github.com/ikawaha/kagome/commit/3c89221e36922cbbbcebc1d9e555101bf8b0ade4
  87. https://github.com/ikawaha/kagome/blob/master/readme.md
  88. https://github.com/ikawaha/kagome/blob/master/app.json
  89. https://travis-ci.org/ikawaha/kagome
  90. https://ci.appveyor.com/project/ikawaha/kagome
  91. https://coveralls.io/github/ikawaha/kagome?branch=master
  92. https://godoc.org/github.com/ikawaha/kagome
  93. https://heroku.com/deploy
  94. http://taku910.github.io/mecab/
  95. http://pj.ninjal.ac.jp/corpus_center/unidic/
  96. http://www.atilika.com/en/products/kuromoji.html
  97. https://kagome.herokuapp.com/_demo
  98. http://www.graphviz.org/
  99. https://heroku.com/deploy
 100. https://raw.githubusercontent.com/wiki/ikawaha/kagome/images/demoapp.gif
 101. https://raw.githubusercontent.com/wiki/ikawaha/kagome/images/lattice.png
 102. https://github.com/ikawaha/kagome.ipadic
 103. https://github.com/ikawaha/kagome/issues/86
 104. https://github.com/site/terms
 105. https://github.com/site/privacy
 106. https://github.com/security
 107. https://githubstatus.com/
 108. https://help.github.com/
 109. https://github.com/contact
 110. https://github.com/pricing
 111. https://developer.github.com/
 112. https://training.github.com/
 113. https://github.blog/
 114. https://github.com/about
 115. https://github.com/ikawaha/kagome
 116. https://github.com/ikawaha/kagome

   hidden links:
 118. https://github.com/
 119. https://github.com/ikawaha/kagome
 120. https://github.com/ikawaha/kagome
 121. https://github.com/ikawaha/kagome
 122. https://help.github.com/articles/which-remote-url-should-i-use
 123. https://github.com/ikawaha/kagome#kagome-japanese-morphological-analyzer
 124. https://github.com/ikawaha/kagome#install
 125. https://github.com/ikawaha/kagome#usage
 126. https://github.com/ikawaha/kagome#command-line-mode
 127. https://github.com/ikawaha/kagome#server-mode
 128. https://github.com/ikawaha/kagome#segmentation-mode-for-search
 129. https://github.com/ikawaha/kagome#http-service
 130. https://github.com/ikawaha/kagome#web-api
 131. https://github.com/ikawaha/kagome#demo
 132. https://github.com/ikawaha/kagome#user-dictionary
 133. https://github.com/ikawaha/kagome#utility
 134. https://github.com/ikawaha/kagome#programming-example
 135. https://github.com/ikawaha/kagome#working-with-google-app-engine
 136. https://github.com/ikawaha/kagome#contributing
 137. https://github.com/ikawaha/kagome#license
 138. https://github.com/
