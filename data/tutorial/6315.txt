   #[1]github [2]recent commits to nlpnet:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]36
     * [35]star [36]331
     * [37]fork [38]104

[39]erickrf/[40]nlpnet

   [41]code [42]issues 5 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   a neural network architecture for nlp tasks, using cython for fast
   performance. currently, it can perform id52, srl and dependency
   parsing. [47]http://nilc.icmc.usp.br/nlpnet/
   [48]nlp [49]natural-language-processing [50]neural-network
   [51]pos-tagging [52]semantic-role-labeling [53]parsing
     * [54]274 commits
     * [55]2 branches
     * [56]0 releases
     * [57]fetching contributors
     * [58]mit

    1. [59]python 100.0%

   (button) python
   branch: master (button) new pull request
   [60]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/e
   [61]download zip

downloading...

   want to be notified of new releases in erickrf/nlpnet?
   [62]sign in [63]sign up

launching github desktop...

   if nothing happens, [64]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [65]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [66]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [67]download the github extension for visual studio
   and try again.

   (button) go back
   [68]@erickrf
   [69]erickrf [70]requirements added in setup.py
   latest commit [71]7a2dc5b jul 26, 2018
   [72]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [73]bin
   [74]docs
   [75]nlpnet [76]added unicode_literals jul 26, 2018
   [77].gitignore
   [78]license.txt [79]changing name of nlpnet.pyx -> network.pyx oct 6,
   2013
   [80]manifest.in
   [81]readme.rst
   [82]requirements.txt
   [83]setup.id18
   [84]setup.py

readme.rst

   [85]join the chat at https://gitter.im/erickrf/nlpnet

   gitter is chat room for developers.

nlpnet --- natural language processing with neural networks

   nlpnet is a python library for natural language processing tasks based
   on neural networks. currently, it performs part-of-speech tagging,
   id14 and id33. most of the architecture
   is language independent, but some functions were specially tailored for
   working with portuguese. this system was inspired by [86]senna.

   important: in order to use the trained models for portuguese nlp, you
   will need to download the data from
   [87]http://nilc.icmc.usp.br/nlpnet/models.html.

dependencies

   nlpnet requires [88]nltk and [89]numpy. additionally, it needs to
   download some data from nltk. after installing it, call

>>> nltk.download()

   go to the models tab and select the punkt tokenizer. it is used in
   order to split the text into sentences.

   [90]cython is used to generate c extensions and run faster. you
   probably won't need it, since the generated .c file is already provided
   with nlpnet, but you will need a c compiler. on linux and mac systems
   this shouldn't be a problem, but may be on windows, because
   [91]setuptools requires the microsoft c compiler by default. if you
   don't have it already, it is usually easier to install [92]mingw
   instead and follow the instructions [93]here.

basic usage

   nlpnet can be used both as a python library or by its standalone
   scripts. both usages are explained below.

library usage

   you can use nlpnet as a library in python code as follows:
>>> import nlpnet
>>> tagger = nlpnet.postagger('/path/to/pos-model/', language='pt')
>>> tagger.tag('o rato roeu a roupa do rei de roma.')
[[(u'o', u'art'), (u'rato', u'n'), (u'roeu', u'v'), (u'a', u'art'), (u'roupa', u
'n'), (u'do', u'prep+art'), (u'rei', u'n'), (u'de', u'prep'), (u'roma', u'nprop'
), (u'.', 'pu')]]

   in the example above, the postagger constructor receives as the first
   argument the directory where its trained model is located. the second
   argument is the two letter language code (currently, onle pt and en are
   supported). this only has impact in id121.

   calling an annotation tool is pretty straightforward. the provided ones
   are postagger, srltagger and dependencyparser, all of them having a
   method tag which receives strings with text to be tagged (in
   dependencyparser, there is an alias to the method parse, which sounds
   more adequate). the tagger splits the text into sentences and then
   tokenizes each one (hence the return of the postagger is a list of
   lists).

   the output of the srltagger is slightly more complicated:

>>> tagger = nlpnet.srltagger()
>>> tagger.tag(u'o rato roeu a roupa do rei de roma.')
[<nlpnet.taggers.srlannotatedsentence at 0x84020f0>]

   instead of a list of tuples, sentences are represented by instances of
   srlannotatedsentence. this class serves basically as a data holder, and
   has two attributes:

>>> sent = tagger.tag(u'o rato roeu a roupa do rei de roma.')[0]
>>> sent.tokens
[u'o', u'rato', u'roeu', u'a', u'roupa', u'do', u'rei', u'de', u'roma', u'.']
>>> sent.arg_structures
[(u'roeu',
  {u'a0': [u'o', u'rato'],
   u'a1': [u'a', u'roupa', u'do', u'rei', u'de', u'roma'],
   u'v': [u'roeu']})]

   the arg_structures is a list containing all predicate-argument
   structures in the sentence. the only one in this example is for the
   verb roeu. it is represented by a tuple with the predicate and a
   dictionary mapping semantic role labels to the tokens that constitute
   the argument.

   note that the verb appears as the first member of the tuple and also as
   the content of label 'v' (which stands for verb). this is because some
   predicates are multiwords. in these cases, the "main" predicate word
   (usually the verb itself) appears in arg_structures[0], and all the
   words appear under the key 'v'.

   here's an example with the dependencyparser:

>>> parser = nlpnet.dependencyparser('dependency', language='en')
>>> parsed_text = parser.parse('the book is on the table.')
>>> parsed_text
[<nlpnet.taggers.parsedsentence at 0x10e067f0>]
>>> sent = parsed_text[0]
>>> print(sent.to_conll())
1       the     _       dt      dt      _       2       nmod
2       book    _       nn      nn      _       3       sbj
3       is      _       vbz     vbz     _       0       root
4       on      _       in      in      _       3       loc-prd
5       the     _       dt      dt      _       6       nmod
6       table   _       nn      nn      _       4       pmod
7       .       _       .       .       _       3       p

   the to_conll() method of parsedsentence objects prints them in the
   [94]conll notation. the tokens, labels and head indices are accessible
   through member variables:

>>> sent.tokens
[u'the', u'book', u'is', u'on', u'the', u'table', u'.']
>>> sent.heads
array([ 1,  2, -1,  2,  5,  3,  2])
>>> sent.labels
[u'nmod', u'sbj', u'root', u'loc-prd', u'nmod', u'pmod', u'p']

   the heads member variable is a numpy array. the i-th position in the
   array contains the index of the head of the i-th token, except for the
   root token, which has a head of -1. notice that these indices are
   0-based, while the ones shown in the to_conll() function are 1-based.

standalone scripts

   nlpnet also provides scripts for tagging text, training new models and
   testing them. they are copied to the scripts subdirectory of your
   python installation, which can be included in the system path variable.
   you can call them from command line and give some text input.
$ nlpnet-tag.py pos --data /path/to/nlpnet-data/ --lang pt
o rato roeu a roupa do rei de roma.
o_art rato_n roeu_v a_art roupa_n do_prep+art rei_n de_prep roma_nprop ._pu

   if --data is not given, the script will search for the trained models
   in the current directory. --lang defaults to en. if you have text
   already tokenized, you may use the -t option; it assumes tokens are
   separated by whitespaces.

   with id14:
$ nlpnet-tag.py srl /path/to/nlpnet-data/
o rato roeu a roupa do rei de roma.
o rato roeu a roupa do rei de roma .
roeu
    a1: a roupa do rei de roma
    a0: o rato
    v: roeu

   the first line was typed by the user, and the second one is the result
   of id121.

   and id33:
$ nlpnet-tag.py dependency --data dependency --lang en
the book is on the table.
1       the     _       dt      dt      _       2       nmod
2       book    _       nn      nn      _       3       sbj
3       is      _       vbz     vbz     _       0       root
4       on      _       in      in      _       3       loc-prd
5       the     _       dt      dt      _       6       nmod
6       table   _       nn      nn      _       4       pmod
7       .       _       .       .       _       3       p

   to learn more about training and testing new models, and other
   functionalities, refer to the documentation at
   [95]http://nilc.icmc.usp.br/nlpnet

references

   the following references describe the design of nlpnet, as well as
   experiments carried out. some improvements to the code have been
   implemented since their publication.
     * fonseca, erick and alu  sio, sandra m. a deep architecture for
       non-projective id33. proceedings of the naacl-hlt
       workshop on vector space modeling for nlp. 2015
     * fonseca, erick and rosa, jo  o lu  s g. a two-step convolutional
       neural network approach for id14. proceedings of
       the international joint conference on neural networks. 2013.
     * fonseca, erick, rosa, jo  o lu  s g. and alu  sio, sandra m.
       evaluating id27s and a revised corpus for part-of-speech
       tagging in portuguese. journal of the brazilian computer society.
       2015.

     *    2019 github, inc.
     * [96]terms
     * [97]privacy
     * [98]security
     * [99]status
     * [100]help

     * [101]contact github
     * [102]pricing
     * [103]api
     * [104]training
     * [105]blog
     * [106]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [107]reload to refresh your
   session. you signed out in another tab or window. [108]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/erickrf/nlpnet/commits/master.atom
   3. https://github.com/erickrf/nlpnet#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/erickrf/nlpnet
  32. https://github.com/join
  33. https://github.com/login?return_to=/erickrf/nlpnet
  34. https://github.com/erickrf/nlpnet/watchers
  35. https://github.com/login?return_to=/erickrf/nlpnet
  36. https://github.com/erickrf/nlpnet/stargazers
  37. https://github.com/login?return_to=/erickrf/nlpnet
  38. https://github.com/erickrf/nlpnet/network/members
  39. https://github.com/erickrf
  40. https://github.com/erickrf/nlpnet
  41. https://github.com/erickrf/nlpnet
  42. https://github.com/erickrf/nlpnet/issues
  43. https://github.com/erickrf/nlpnet/pulls
  44. https://github.com/erickrf/nlpnet/projects
  45. https://github.com/erickrf/nlpnet/pulse
  46. https://github.com/join?source=prompt-code
  47. http://nilc.icmc.usp.br/nlpnet/
  48. https://github.com/topics/nlp
  49. https://github.com/topics/natural-language-processing
  50. https://github.com/topics/neural-network
  51. https://github.com/topics/pos-tagging
  52. https://github.com/topics/semantic-role-labeling
  53. https://github.com/topics/parsing
  54. https://github.com/erickrf/nlpnet/commits/master
  55. https://github.com/erickrf/nlpnet/branches
  56. https://github.com/erickrf/nlpnet/releases
  57. https://github.com/erickrf/nlpnet/graphs/contributors
  58. https://github.com/erickrf/nlpnet/blob/master/license.txt
  59. https://github.com/erickrf/nlpnet/search?l=python
  60. https://github.com/erickrf/nlpnet/find/master
  61. https://github.com/erickrf/nlpnet/archive/master.zip
  62. https://github.com/login?return_to=https://github.com/erickrf/nlpnet
  63. https://github.com/join?return_to=/erickrf/nlpnet
  64. https://desktop.github.com/
  65. https://desktop.github.com/
  66. https://developer.apple.com/xcode/
  67. https://visualstudio.github.com/
  68. https://github.com/erickrf
  69. https://github.com/erickrf/nlpnet/commits?author=erickrf
  70. https://github.com/erickrf/nlpnet/commit/7a2dc5b8b01ed61e36473b3e4d0ffcfeceb6dd59
  71. https://github.com/erickrf/nlpnet/commit/7a2dc5b8b01ed61e36473b3e4d0ffcfeceb6dd59
  72. https://github.com/erickrf/nlpnet/tree/7a2dc5b8b01ed61e36473b3e4d0ffcfeceb6dd59
  73. https://github.com/erickrf/nlpnet/tree/master/bin
  74. https://github.com/erickrf/nlpnet/tree/master/docs
  75. https://github.com/erickrf/nlpnet/tree/master/nlpnet
  76. https://github.com/erickrf/nlpnet/commit/7290409c996c5f5910c591a0d7941c135c1a5c93
  77. https://github.com/erickrf/nlpnet/blob/master/.gitignore
  78. https://github.com/erickrf/nlpnet/blob/master/license.txt
  79. https://github.com/erickrf/nlpnet/commit/6205b8072a13efbcd0a0ac55ba790c3be6fbe31e
  80. https://github.com/erickrf/nlpnet/blob/master/manifest.in
  81. https://github.com/erickrf/nlpnet/blob/master/readme.rst
  82. https://github.com/erickrf/nlpnet/blob/master/requirements.txt
  83. https://github.com/erickrf/nlpnet/blob/master/setup.id18
  84. https://github.com/erickrf/nlpnet/blob/master/setup.py
  85. https://gitter.im/erickrf/nlpnet?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
  86. http://ronan.collobert.com/senna/
  87. http://nilc.icmc.usp.br/nlpnet/models.html
  88. http://www.nltk.org/
  89. http://www.numpy.org/
  90. http://cython.org/
  91. http://pythonhosted.org/setuptools/
  92. http://www.mingw.org/
  93. http://docs.cython.org/src/tutorial/appendix.html
  94. http://ilk.uvt.nl/conll/#dataformat
  95. http://nilc.icmc.usp.br/nlpnet
  96. https://github.com/site/terms
  97. https://github.com/site/privacy
  98. https://github.com/security
  99. https://githubstatus.com/
 100. https://help.github.com/
 101. https://github.com/contact
 102. https://github.com/pricing
 103. https://developer.github.com/
 104. https://training.github.com/
 105. https://github.blog/
 106. https://github.com/about
 107. https://github.com/erickrf/nlpnet
 108. https://github.com/erickrf/nlpnet

   hidden links:
 110. https://github.com/
 111. https://github.com/erickrf/nlpnet
 112. https://github.com/erickrf/nlpnet
 113. https://github.com/erickrf/nlpnet
 114. https://help.github.com/articles/which-remote-url-should-i-use
 115. https://github.com/erickrf/nlpnet#nlpnet-----natural-language-processing-with-neural-networks
 116. https://github.com/erickrf/nlpnet#dependencies
 117. https://github.com/erickrf/nlpnet#basic-usage
 118. https://github.com/erickrf/nlpnet#library-usage
 119. https://github.com/erickrf/nlpnet#standalone-scripts
 120. https://github.com/erickrf/nlpnet#references
 121. https://github.com/
