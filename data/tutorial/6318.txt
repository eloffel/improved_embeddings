   #[1]github [2]recent commits to pywsd:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]44
     * [35]star [36]515
     * [37]fork [38]99

[39]alvations/[40]pywsd

   [41]code [42]issues 15 [43]pull requests 5 [44]projects 1 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   python implementations of id51 (wsd) technologies.
   [47]nlp [48]wsd [49]lesk [50]id138 [51]python
     * [52]228 commits
     * [53]2 branches
     * [54]3 releases
     * [55]fetching contributors
     * [56]mit

    1. [57]python 71.7%
    2. [58]jupyter notebook 23.8%
    3. [59]perl 4.5%

   (button) python jupyter notebook perl
   branch: master (button) new pull request
   [60]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/a
   [61]download zip

downloading...

   want to be notified of new releases in alvations/pywsd?
   [62]sign in [63]sign up

launching github desktop...

   if nothing happens, [64]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [65]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [66]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [67]download the github extension for visual studio
   and try again.

   (button) go back
   [68]@alvations
   [69]alvations [70]flushing out the print to sys.stderr (button)    
for some reason, people get into anxiety attacks when nothing happens after `imp
ort pywsd`

   latest commit [71]6203c02 sep 26, 2018
   [72]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [73]merlin [74]updated merlin's license information and readme jan 5,
   2015
   [75]pywsd [76]flushing out the print to sys.stderr sep 27, 2018
   [77].travis.yml
   [78]benchmark.md
   [79]changelog.md [80]officially matured to version 1.0 jan 17, 2015
   [81]license.md [82]updated license year mar 14, 2018
   [83]precompute signatures.ipynb
   [84]readme.md
   [85]consistency_test.py [86]added consistency_test.py for issue [87]#16
   jan 15, 2015
   [88]requirements.txt
   [89]setup.py
   [90]test_allwords_wsd.py
   [91]test_corpus_processor.py
   [92]test_lesk_speed.py
   [93]test_merlin.py
   [94]test_wsd.py
   [95]tox.ini

readme.md

   [96]build status [97]pypi license

pywsd

   python implementations of id51 (wsd) technologies:
     * lesk algorithms
          + original lesk (lesk, 1986)
          + adapted/extended lesk (banerjee and pederson, 2002/2003)
          + simple lesk (with definition, example(s) and hyper+hyponyms)
          + cosine lesk (use cosines to calculate overlaps instead of
            using raw counts)
          + enhanced lesk (basile et al. 2014) (in wishlist)
     * maximizing similarity (see also, [98]http://goo.gl/mg8zpe)
          + path similarity (wu-palmer, 1994; leacock and chodorow, 1998)
          + information content (resnik, 1995; jiang and corath, 1997;
            lin, 1998)
     * supervised wsd (in progress)
          + id166 wsd (lee, ng and chia 2004)
          + it makes sense (ims) (zhong and ng, 2010)
     * vector space models (in wishlist)
          + lsi/lsa
          + topic models, lda (li et al. 2012)
          + nmf
     * graph based models (in wishlist)
          + babelfly (moro et al. 2014)
          + ukb (agirre and soroa, 2009)
     * baselines
          + random sense
          + first nltk sense
          + highest lemma counts

install

pip install -u nltk
python -m nltk.downloader 'popular'
pip install -u pywsd

usage

$ python
>>> from pywsd.lesk import simple_lesk
>>> sent = 'i went to the bank to deposit my money'
>>> ambiguous = 'bank'
>>> answer = simple_lesk(sent, ambiguous, pos='n')
>>> print answer
synset('depository_financial_institution.n.01')
>>> print answer.definition()
'a financial institution that accepts deposits and channels the money into lendi
ng activities'

   for all-words wsd, try:
>>> from pywsd import disambiguate
>>> from pywsd.similarity import max_similarity as maxsim
>>> disambiguate('i went to the bank to deposit my money')
[('i', none), ('went', synset('run_low.v.01')), ('to', none), ('the', none), ('b
ank', synset('depository_financial_institution.n.01')), ('to', none), ('deposit'
, synset('deposit.v.02')), ('my', none), ('money', synset('money.n.03'))]
>>> disambiguate('i went to the bank to deposit my money', algorithm=maxsim, sim
ilarity_option='wup', keeplemmas=true)
[('i', 'i', none), ('went', u'go', synset('sound.v.02')), ('to', 'to', none), ('
the', 'the', none), ('bank', 'bank', synset('bank.n.06')), ('to', 'to', none), (
'deposit', 'deposit', synset('deposit.v.02')), ('my', 'my', none), ('money', 'mo
ney', synset('money.n.01'))]

   to read pre-computed signatures per synset:
>>> from pywsd.lesk import cached_signatures
>>> cached_signatures['dog.n.01']['simple']
set([u'canid', u'belgian_griffon', u'breed', u'barker', ... , u'genus', u'newfou
ndland'])
>>> cached_signatures['dog.n.01']['adapted']
set([u'canid', u'belgian_griffon', u'breed', u'leonberg', ... , u'newfoundland',
 u'pack'])

>>> from nltk.corpus import id138 as wn
>>> wn.synsets('dog')[0]
synset('dog.n.01')
>>> dog = wn.synsets('dog')[0]
>>> dog.name()
u'dog.n.01'
>>> cached_signatures[dog.name()]['simple']
set([u'canid', u'belgian_griffon', u'breed', u'barker', ... , u'genus', u'newfou
ndland'])
     __________________________________________________________________

cite

   to cite pywsd:

   liling tan. 2014. pywsd: python implementations of word sense
   disambiguation (wsd) technologies [software]. retrieved from
   [99]https://github.com/alvations/pywsd

   in bibtex:
@misc{pywsd14,
author =   {liling tan},
title =    {pywsd: python implementations of id51 (wsd) tec
hnologies [software]},
howpublished = {https://github.com/alvations/pywsd},
year = {2014}
}
     __________________________________________________________________

references

     * michael lesk. 1986. automatic sense disambiguation using machine
       readable dictionaries: how to tell a pine cone from an ice cream
       cone. in proceedings of the 5th annual international conference on
       systems documentation (sigdoc '86), virginia debuys (ed.). acm, new
       york, ny, usa, 24-26. doi=10.1145/318723.318728
       [100]http://doi.acm.org/10.1145/318723.318728
     * satanjeev banerjee and ted pedersen. 2002. an adapted lesk
       algorithm for id51 using id138. in
       proceedings of the third international conference on computational
       linguistics and intelligent text processing (cicling '02),
       alexander f. gelbukh (ed.). springer-verlag, london, uk, uk,
       136-145.
     * satanjeev banerjee and ted pedersen. 2003. extended gloss overlaps
       as a measure of semantic relatedness. in proceedings of the
       eighteenth international joint conference on artificial
       intelligence, pages 805   810, acapulco.
     * jay j. jiang and david w. conrath. 1997. semantic similarity based
       on corpus statistics and lexical taxonomy. in proceedings of
       international conference on research in computational linguistics,
       taiwan.
     * claudia leacock and martin chodorow. 1998. combining local context
       and id138 similarity for word sense identification. in fellbaum
       1998, pp. 265   283.
     * lee, yoong keok, hwee tou ng, and tee kiah chia. "supervised word
       sense disambiguation with support vector machines and multiple
       knowledge sources." senseval-3: third international workshop on the
       evaluation of systems for the semantic analysis of text. 2004.
     * dekang lin. 1998. an information-theoretic definition of
       similarity. in proceedings of the 15th international conference on
       machine learning, madison, wi.
     * linlin li, benjamin roth and caroline sporleder. 2010. topic models
       for id51 and token-based idiom detection. the
       48th annual meeting of the association for computational
       linguistics (acl). uppsala, sweden.
     * andrea moro, roberto navigli, francesco maria tucci and rebecca j.
       passonneau. 2014. annotating the masc corpus with babelnet. in
       proceedings of the ninth international conference on language
       resources and evaluation (lrec'14). reykjavik, iceland.
     * zhi zhong and hwee tou ng. 2010. it makes sense: a wide-coverage
       id51 system for free text. in proceedings of
       the acl 2010 system demonstrations (acldemos '10). association for
       computational linguistics, stroudsburg, pa, usa, 78-83.
     * steven bird, ewan klein, and edward loper. 2009. natural language
       processing with python (1st ed.). o'reilly media, inc..
     * eneko agirre and aitor soroa. 2009. personalizing id95 for word
       sense disambiguation. proceedings of the 12th conference of the
       european chapter of the association for computational linguistics
       (eacl-2009). athens, greece.

     *    2019 github, inc.
     * [101]terms
     * [102]privacy
     * [103]security
     * [104]status
     * [105]help

     * [106]contact github
     * [107]pricing
     * [108]api
     * [109]training
     * [110]blog
     * [111]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [112]reload to refresh your
   session. you signed out in another tab or window. [113]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/alvations/pywsd/commits/master.atom
   3. https://github.com/alvations/pywsd#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/alvations/pywsd
  32. https://github.com/join
  33. https://github.com/login?return_to=/alvations/pywsd
  34. https://github.com/alvations/pywsd/watchers
  35. https://github.com/login?return_to=/alvations/pywsd
  36. https://github.com/alvations/pywsd/stargazers
  37. https://github.com/login?return_to=/alvations/pywsd
  38. https://github.com/alvations/pywsd/network/members
  39. https://github.com/alvations
  40. https://github.com/alvations/pywsd
  41. https://github.com/alvations/pywsd
  42. https://github.com/alvations/pywsd/issues
  43. https://github.com/alvations/pywsd/pulls
  44. https://github.com/alvations/pywsd/projects
  45. https://github.com/alvations/pywsd/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/topics/nlp
  48. https://github.com/topics/wsd
  49. https://github.com/topics/lesk
  50. https://github.com/topics/id138
  51. https://github.com/topics/python
  52. https://github.com/alvations/pywsd/commits/master
  53. https://github.com/alvations/pywsd/branches
  54. https://github.com/alvations/pywsd/releases
  55. https://github.com/alvations/pywsd/graphs/contributors
  56. https://github.com/alvations/pywsd/blob/master/license.md
  57. https://github.com/alvations/pywsd/search?l=python
  58. https://github.com/alvations/pywsd/search?l=jupyter-notebook
  59. https://github.com/alvations/pywsd/search?l=perl
  60. https://github.com/alvations/pywsd/find/master
  61. https://github.com/alvations/pywsd/archive/master.zip
  62. https://github.com/login?return_to=https://github.com/alvations/pywsd
  63. https://github.com/join?return_to=/alvations/pywsd
  64. https://desktop.github.com/
  65. https://desktop.github.com/
  66. https://developer.apple.com/xcode/
  67. https://visualstudio.github.com/
  68. https://github.com/alvations
  69. https://github.com/alvations/pywsd/commits?author=alvations
  70. https://github.com/alvations/pywsd/commit/6203c0222585f2b0b03c3e6c6d84e9d4eec63e8f
  71. https://github.com/alvations/pywsd/commit/6203c0222585f2b0b03c3e6c6d84e9d4eec63e8f
  72. https://github.com/alvations/pywsd/tree/6203c0222585f2b0b03c3e6c6d84e9d4eec63e8f
  73. https://github.com/alvations/pywsd/tree/master/merlin
  74. https://github.com/alvations/pywsd/commit/26ae715af24769684f7cb1ebd3d1e89bb5b2808f
  75. https://github.com/alvations/pywsd/tree/master/pywsd
  76. https://github.com/alvations/pywsd/commit/6203c0222585f2b0b03c3e6c6d84e9d4eec63e8f
  77. https://github.com/alvations/pywsd/blob/master/.travis.yml
  78. https://github.com/alvations/pywsd/blob/master/benchmark.md
  79. https://github.com/alvations/pywsd/blob/master/changelog.md
  80. https://github.com/alvations/pywsd/commit/d060d2291c693570beba5ad40969ab908aef68d9
  81. https://github.com/alvations/pywsd/blob/master/license.md
  82. https://github.com/alvations/pywsd/commit/35fbe90aef9094f95818b3d04cb53400406d1f38
  83. https://github.com/alvations/pywsd/blob/master/precompute signatures.ipynb
  84. https://github.com/alvations/pywsd/blob/master/readme.md
  85. https://github.com/alvations/pywsd/blob/master/consistency_test.py
  86. https://github.com/alvations/pywsd/commit/f1f59367627b7e1fe561a2a9865c9158f7c7dcd6
  87. https://github.com/alvations/pywsd/issues/16
  88. https://github.com/alvations/pywsd/blob/master/requirements.txt
  89. https://github.com/alvations/pywsd/blob/master/setup.py
  90. https://github.com/alvations/pywsd/blob/master/test_allwords_wsd.py
  91. https://github.com/alvations/pywsd/blob/master/test_corpus_processor.py
  92. https://github.com/alvations/pywsd/blob/master/test_lesk_speed.py
  93. https://github.com/alvations/pywsd/blob/master/test_merlin.py
  94. https://github.com/alvations/pywsd/blob/master/test_wsd.py
  95. https://github.com/alvations/pywsd/blob/master/tox.ini
  96. https://travis-ci.org/alvations/pywsd
  97. https://pypi.python.org/pypi/ansicolortags/
  98. http://goo.gl/mg8zpe
  99. https://github.com/alvations/pywsd
 100. http://doi.acm.org/10.1145/318723.318728
 101. https://github.com/site/terms
 102. https://github.com/site/privacy
 103. https://github.com/security
 104. https://githubstatus.com/
 105. https://help.github.com/
 106. https://github.com/contact
 107. https://github.com/pricing
 108. https://developer.github.com/
 109. https://training.github.com/
 110. https://github.blog/
 111. https://github.com/about
 112. https://github.com/alvations/pywsd
 113. https://github.com/alvations/pywsd

   hidden links:
 115. https://github.com/
 116. https://github.com/alvations/pywsd
 117. https://github.com/alvations/pywsd
 118. https://github.com/alvations/pywsd
 119. https://help.github.com/articles/which-remote-url-should-i-use
 120. https://github.com/alvations/pywsd#pywsd
 121. https://github.com/alvations/pywsd#install
 122. https://github.com/alvations/pywsd#usage
 123. https://github.com/alvations/pywsd#cite
 124. https://github.com/alvations/pywsd#references
 125. https://github.com/
