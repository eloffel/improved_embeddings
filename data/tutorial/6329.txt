   #[1]github [2]recent commits to neuroner:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]71
     * [35]star [36]1,225
     * [37]fork [38]391

[39]franck-dernoncourt/[40]neuroner

   [41]code [42]issues 75 [43]pull requests 4 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   named-entity recognition using neural networks. easy-to-use and
   state-of-the-art results. [47]http://neuroner.com
   [48]nlp [49]machine-learning [50]neural-networks
   [51]named-entity-recognition [52]deep-learning [53]tensorflow
     * [54]123 commits
     * [55]2 branches
     * [56]1 release
     * [57]fetching contributors

    1. [58]python 92.7%
    2. [59]perl 7.1%
    3. [60]shell 0.2%

   (button) python perl shell
   branch: master (button) new pull request
   [61]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/f
   [62]download zip

downloading...

   want to be notified of new releases in franck-dernoncourt/neuroner?
   [63]sign in [64]sign up

launching github desktop...

   if nothing happens, [65]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [66]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [67]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [68]download the github extension for visual studio
   and try again.

   (button) go back
   [69]@franck-dernoncourt
   [70]franck-dernoncourt [71]merge pull request [72]#141 [73]from
   franck-dernoncourt/outputscore (button)    
add output_scores option and fix issue with _clean_param_dtypes. ref [74]#101

   latest commit [75]aa48235 mar 30, 2019
   [76]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [77]neuroner [78]clean dtype for pretrained mar 29, 2019
   [79]test [80]mv test to root mar 13, 2019
   [81].gitignore [82]ignore .ds_store jan 24, 2019
   [83].travis.yml [84]add pkg management files mar 13, 2019
   [85].travis_install_ubuntu.sh
   [86]manifest.in
   [87]readme.md
   [88]parameters.ini [89]add output_scores. ref [90]#101 mar 29, 2019
   [91]requirements.txt [92]add pkg management files mar 13, 2019
   [93]setup.py [94]bump version mar 29, 2019

readme.md

neuroner

   [95]build status

   neuroner is a program that performs named-entity recognition (ner).
   website: [96]neuroner.com.

   this page gives step-by-step instructions to install and use neuroner.

table of contents

     * [97]requirements
     * [98]installation
     * [99]using neuroner
          + [100]adding a new dataset
          + [101]using a pretrained model
          + [102]sharing a pretrained model
          + [103]using tensorboard
     * [104]citation

requirements

   neuroner relies on python 3, tensorflow 1.0+, and optionally on brat:
     * python 3: neuroner does not work with python 2.x. on windows, it
       has to be python 3.6 64-bit or later.
     * tensorflow is a library for machine learning. neuroner uses it for
       its ner engine, which is based on neural networks. official
       website: [105]https://www.tensorflow.org
     * brat (optional) is a web-based annotation tool. it only needs to be
       installed if you wish to conveniently create annotations or view
       the predictions made by neuroner. official website:
       [106]http://brat.nlplab.org

installation

   for gpu support, [107]gpu requirements for tensorflow must be
   satisfied. if your system does not meet these requirements, you should
   use the cpu version. to install neuroner:
# for cpu support (no gpu support):
pip3 install pyneuroner[cpu]

# for gpu support:
pip3 install pyneuroner[gpu]

   you will also need to download some support packages.
    1. the english language module for spacy:

# download the spacy english module
python -m spacy download en

    2. download id27s from
       [108]http://neuroner.com/data/word_vectors/glove.6b.100d.zip, unzip
       them to the folder ./data/word_vectors

# get id27s
wget -p data/word_vectors http://neuroner.com/data/word_vectors/glove.6b.100d.zi
p
unzip data/word_vectors/glove.6b.100d.zip -d data/word_vectors/

    3. load sample datasets. these can be loaded by calling the
       neuromodel.fetch_data() function from a python interpreter or with
       the --fetch_data argument at the command line.

# load a dataset from the command line
neuroner --fetch_data=conll2003
neuroner --fetch_data=example_unannotated_texts
neuroner --fetch_data=i2b2_2014_deid

# load a dataset from a python interpreter
from neuroner import neuromodel
neuromodel.fetch_data('conll2003')
neuromodel.fetch_data('example_unannotated_texts')
neuromodel.fetch_data('i2b2_2014_deid')

    4. load a pretrained model. the models can be loaded by calling the
       neuromodel.fetch_trained_models() function from a python
       interpreter or with the --fetch_trained_models argument at the
       command line.

# load a pre-trained model from the command line
neuroner --fetch_trained_model=conll_2003_en
neuroner --fetch_trained_model=i2b2_2014_glove_spacy_bioes
neuroner --fetch_trained_model=i2b2_2014_glove_stanford_bioes
neuroner --fetch_trained_model=mimic_glove_spacy_bioes
neuroner --fetch_trained_model=mimic_glove_stanford_bioes

# load a pre-trained model from a python interpreter
from neuroner import neuromodel
neuromodel.fetch_trained_model('conll_2003_en')
neuromodel.fetch_trained_model('i2b2_2014_glove_spacy_bioes')
neuromodel.fetch_trained_model('i2b2_2014_glove_stanford_bioes')
neuromodel.fetch_trained_model('mimic_glove_spacy_bioes')
neuromodel.fetch_trained_model('mimic_glove_stanford_bioes')

installing brat (optional)

   brat is a tool that can be used to create, change or view the
   brat-style annotations. for installation and usage instructions, see
   the [109]brat website.

installing perl (platform dependent)

   perl is required because the official conll-2003 evaluation script is
   written in this language: [110]http://strawberryperl.com. for unix and
   mac osx systems, perl should already be installed. for windows systems,
   you may need to install it.

using neuroner

   neuroner can either be run from the command line or from a python
   interpreter.

using neuroner from a python interpreter

   to use neuroner from the command line, create an instance of the
   neuromodel with your desired arguments, and then call the relevant
   methods. additional parameters can be set from a parameters.ini file in
   the working directory. for example:
from neuroner import neuromodel
nn = neuromodel.neuroner(train_model=false, use_pretrained_model=true)

   more detail to follow.

using neuroner from the command line

   by default neuroner is configured to train and test on the conll-2003
   dataset. running neuroner with the default settings starts training on
   the conll-2003 dataset (the f1-score on the test set should be around
   0.90, i.e. on par with state-of-the-art systems). to start the
   training:
# to use the cpu if you have installed tensorflow, or use the gpu if you have in
stalled tensorflow-gpu:
neuroner

# to use the cpu only if you have installed tensorflow-gpu:
cuda_visible_devices="" neuroner

# to use the gpu 1 only if you have installed tensorflow-gpu:
cuda_visible_devices=1 neuroner

   if you wish to change any of neuroner parameters, you can modify the
   [111]parameters.ini configuration file in your working directory or
   specify it as an argument.

   for example, to reduce the number of training epochs and not use any
   pre-trained token embeddings:
neuroner --maximum_number_of_epochs=2 --token_pretrained_embedding_filepath=""

   to perform ner on some plain texts using a pre-trained model:
neuroner --train_model=false --use_pretrained_model=true --dataset_text_folder=.
/data/example_unannotated_texts --pretrained_model_folder=./trained_models/conll
_2003_en

   if a parameter is specified in both the [112]parameters.ini
   configuration file and as an argument, then the argument takes
   precedence (i.e., the parameter in [113]parameters.ini is ignored). you
   may specify a different configuration file with the
   --parameters_filepath command line argument. the command line arguments
   have no default value except for --parameters_filepath, which points to
   [114]parameters.ini.

   neuroner has 3 modes of operation:
     * training mode (from scratch): the dataset folder must have train
       and valid sets. test and deployment sets are optional.
     * training mode (from pretrained model): the dataset folder must have
       train and valid sets. test and deployment sets are optional.
     * prediction mode (using pretrained model): the dataset folder must
       have either a test set or a deployment set.

adding a new dataset

   a dataset may be provided in either conll-2003 or brat format. the
   dataset files and folders should be organized and named as follows:
     * training set: train.txt file (conll-2003 format) or train folder
       (brat format). it must contain labels.
     * validation set: valid.txt file (conll-2003 format) or valid folder
       (brat format). it must contain labels.
     * test set: test.txt file (conll-2003 format) or test folder (brat
       format). it must contain labels.
     * deployment set: deploy.txt file (conll-2003 format) or deploy
       folder (brat format). it shouldn't contain any label (if it does,
       labels are ignored).

   we provide several examples of datasets:
     * [115]data/conll2003/en: annotated dataset with the conll-2003
       format, containing 3 files (train.txt, valid.txt and test.txt).
     * [116]data/example_unannotated_texts: unannotated dataset with the
       brat format, containing 1 folder (deploy/). note that the brat
       format with no annotation is the same as plain texts.

using a pretrained model

   in order to use a pretrained model, the pretrained_model_folder
   parameter in the [117]parameters.ini configuration file must be set to
   the folder containing the pretrained model. the following parameters in
   the [118]parameters.ini configuration file must also be set to the same
   values as in the configuration file located in the specified
   pretrained_model_folder:
use_character_lstm
character_embedding_dimension
character_lstm_hidden_state_dimension
token_pretrained_embedding_filepath
token_embedding_dimension
token_lstm_hidden_state_dimension
use_crf
tagging_format
tokenizer

sharing a pretrained model

   you are highly encouraged to share a model trained on their own
   datasets, so that other users can use the pretrained model on other
   datasets. we provide the [119]neuroner/prepare_pretrained_model.py
   script to make it easy to prepare a pretrained model for sharing. in
   order to use the script, one only needs to specify the
   output_folder_name, epoch_number, and model_name parameters in the
   script.

   by default, the only information about the dataset contained in the
   pretrained model is the list of tokens that appears in the dataset used
   for training and the corresponding embeddings learned from the dataset.

   if you wish to share a pretrained model without providing any
   information about the dataset (including the list of tokens appearing
   in the dataset), you can do so by setting

   delete_token_mappings = true

   when running the script. in this case, it is highly recommended to use
   some external pre-trained token embeddings and freeze them while
   training the model to obtain high performance. this can be done by
   specifying the token_pretrained_embedding_filepath and setting

   freeze_token_embeddings = true

   in the [120]parameters.ini configuration file during training.

   in order to share a pretrained model, please [121]submit a new issue on
   the github repository.

using tensorboard

   you may launch tensorboard during or after the training phase. to do
   so, run in the terminal from the neuroner folder:
tensorboard --logdir=output

   this starts a web server that is accessible at
   [122]http://127.0.0.1:6006 from your web browser.

citation

   if you use neuroner in your publications, please cite this [123]paper:
@article{2017neuroner,
  title={{neuroner}: an easy-to-use program for named-entity recognition based o
n neural networks},
  author={dernoncourt, franck and lee, ji young and szolovits, peter},
  journal={conference on empirical methods on natural language processing (emnlp
)},
  year={2017}
}

   the neural network architecture used in neuroner is described in this
   [124]article:
@article{2016deidentification,
  title={de-identification of patient notes with recurrent neural networks},
  author={dernoncourt, franck and lee, ji young and uzuner, ozlem and szolovits,
 peter},
  journal={journal of the american medical informatics association (jamia)},
  year={2016}
}

     *    2019 github, inc.
     * [125]terms
     * [126]privacy
     * [127]security
     * [128]status
     * [129]help

     * [130]contact github
     * [131]pricing
     * [132]api
     * [133]training
     * [134]blog
     * [135]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [136]reload to refresh your
   session. you signed out in another tab or window. [137]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/franck-dernoncourt/neuroner/commits/master.atom
   3. https://github.com/franck-dernoncourt/neuroner#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/franck-dernoncourt/neuroner
  32. https://github.com/join
  33. https://github.com/login?return_to=/franck-dernoncourt/neuroner
  34. https://github.com/franck-dernoncourt/neuroner/watchers
  35. https://github.com/login?return_to=/franck-dernoncourt/neuroner
  36. https://github.com/franck-dernoncourt/neuroner/stargazers
  37. https://github.com/login?return_to=/franck-dernoncourt/neuroner
  38. https://github.com/franck-dernoncourt/neuroner/network/members
  39. https://github.com/franck-dernoncourt
  40. https://github.com/franck-dernoncourt/neuroner
  41. https://github.com/franck-dernoncourt/neuroner
  42. https://github.com/franck-dernoncourt/neuroner/issues
  43. https://github.com/franck-dernoncourt/neuroner/pulls
  44. https://github.com/franck-dernoncourt/neuroner/projects
  45. https://github.com/franck-dernoncourt/neuroner/pulse
  46. https://github.com/join?source=prompt-code
  47. http://neuroner.com/
  48. https://github.com/topics/nlp
  49. https://github.com/topics/machine-learning
  50. https://github.com/topics/neural-networks
  51. https://github.com/topics/named-entity-recognition
  52. https://github.com/topics/deep-learning
  53. https://github.com/topics/tensorflow
  54. https://github.com/franck-dernoncourt/neuroner/commits/master
  55. https://github.com/franck-dernoncourt/neuroner/branches
  56. https://github.com/franck-dernoncourt/neuroner/releases
  57. https://github.com/franck-dernoncourt/neuroner/graphs/contributors
  58. https://github.com/franck-dernoncourt/neuroner/search?l=python
  59. https://github.com/franck-dernoncourt/neuroner/search?l=perl
  60. https://github.com/franck-dernoncourt/neuroner/search?l=shell
  61. https://github.com/franck-dernoncourt/neuroner/find/master
  62. https://github.com/franck-dernoncourt/neuroner/archive/master.zip
  63. https://github.com/login?return_to=https://github.com/franck-dernoncourt/neuroner
  64. https://github.com/join?return_to=/franck-dernoncourt/neuroner
  65. https://desktop.github.com/
  66. https://desktop.github.com/
  67. https://developer.apple.com/xcode/
  68. https://visualstudio.github.com/
  69. https://github.com/franck-dernoncourt
  70. https://github.com/franck-dernoncourt/neuroner/commits?author=franck-dernoncourt
  71. https://github.com/franck-dernoncourt/neuroner/commit/aa48235f75e6938df11f532beba4a03fd94af67f
  72. https://github.com/franck-dernoncourt/neuroner/pull/141
  73. https://github.com/franck-dernoncourt/neuroner/commit/aa48235f75e6938df11f532beba4a03fd94af67f
  74. https://github.com/franck-dernoncourt/neuroner/issues/101
  75. https://github.com/franck-dernoncourt/neuroner/commit/aa48235f75e6938df11f532beba4a03fd94af67f
  76. https://github.com/franck-dernoncourt/neuroner/tree/aa48235f75e6938df11f532beba4a03fd94af67f
  77. https://github.com/franck-dernoncourt/neuroner/tree/master/neuroner
  78. https://github.com/franck-dernoncourt/neuroner/commit/efdd721bee19d9a218fb67448a017dfc3fef6dc1
  79. https://github.com/franck-dernoncourt/neuroner/tree/master/test
  80. https://github.com/franck-dernoncourt/neuroner/commit/66c7498102e69e97a27f303b7b516d4743457587
  81. https://github.com/franck-dernoncourt/neuroner/blob/master/.gitignore
  82. https://github.com/franck-dernoncourt/neuroner/commit/54608e74fb33e0ac7cbd41e6577d1f967157c3d3
  83. https://github.com/franck-dernoncourt/neuroner/blob/master/.travis.yml
  84. https://github.com/franck-dernoncourt/neuroner/commit/eb77442262136e87e38ddc657499f6292bc26b95
  85. https://github.com/franck-dernoncourt/neuroner/blob/master/.travis_install_ubuntu.sh
  86. https://github.com/franck-dernoncourt/neuroner/blob/master/manifest.in
  87. https://github.com/franck-dernoncourt/neuroner/blob/master/readme.md
  88. https://github.com/franck-dernoncourt/neuroner/blob/master/parameters.ini
  89. https://github.com/franck-dernoncourt/neuroner/commit/18f730e10c9a35464ee2927b56cf19d6fd0dc966
  90. https://github.com/franck-dernoncourt/neuroner/issues/101
  91. https://github.com/franck-dernoncourt/neuroner/blob/master/requirements.txt
  92. https://github.com/franck-dernoncourt/neuroner/commit/eb77442262136e87e38ddc657499f6292bc26b95
  93. https://github.com/franck-dernoncourt/neuroner/blob/master/setup.py
  94. https://github.com/franck-dernoncourt/neuroner/commit/0c0a4583fc36d7e2cbd7821c71052271f9f2036d
  95. https://travis-ci.org/franck-dernoncourt/neuroner
  96. http://neuroner.com/
  97. https://github.com/franck-dernoncourt/neuroner#requirements
  98. https://github.com/franck-dernoncourt/neuroner#installation
  99. https://github.com/franck-dernoncourt/neuroner#using-neuroner
 100. https://github.com/franck-dernoncourt/neuroner#adding-a-new-dataset
 101. https://github.com/franck-dernoncourt/neuroner#using-a-pretrained-model
 102. https://github.com/franck-dernoncourt/neuroner#sharing-a-pretrained-model
 103. https://github.com/franck-dernoncourt/neuroner#using-tensorboard
 104. https://github.com/franck-dernoncourt/neuroner#citation
 105. https://www.tensorflow.org/
 106. http://brat.nlplab.org/
 107. https://www.tensorflow.org/install/
 108. http://neuroner.com/data/word_vectors/glove.6b.100d.zip
 109. http://brat.nlplab.org/installation.html
 110. http://strawberryperl.com/
 111. https://github.com/franck-dernoncourt/neuroner/blob/master/parameters.ini
 112. https://github.com/franck-dernoncourt/neuroner/blob/master/parameters.ini
 113. https://github.com/franck-dernoncourt/neuroner/blob/master/parameters.ini
 114. https://github.com/franck-dernoncourt/neuroner/blob/master/parameters.ini
 115. https://github.com/franck-dernoncourt/neuroner/blob/master/data/conll2003/en
 116. https://github.com/franck-dernoncourt/neuroner/blob/master/data/example_unannotated_texts
 117. https://github.com/franck-dernoncourt/neuroner/blob/master/parameters.ini
 118. https://github.com/franck-dernoncourt/neuroner/blob/master/parameters.ini
 119. https://github.com/franck-dernoncourt/neuroner/blob/master/neuroner/prepare_pretrained_model.py
 120. https://github.com/franck-dernoncourt/neuroner/blob/master/parameters.ini
 121. https://github.com/franck-dernoncourt/neuroner/issues/new
 122. http://127.0.0.1:6006/
 123. https://arxiv.org/abs/1705.05487
 124. https://arxiv.org/abs/1606.03475
 125. https://github.com/site/terms
 126. https://github.com/site/privacy
 127. https://github.com/security
 128. https://githubstatus.com/
 129. https://help.github.com/
 130. https://github.com/contact
 131. https://github.com/pricing
 132. https://developer.github.com/
 133. https://training.github.com/
 134. https://github.blog/
 135. https://github.com/about
 136. https://github.com/franck-dernoncourt/neuroner
 137. https://github.com/franck-dernoncourt/neuroner

   hidden links:
 139. https://github.com/
 140. https://github.com/franck-dernoncourt/neuroner
 141. https://github.com/franck-dernoncourt/neuroner
 142. https://github.com/franck-dernoncourt/neuroner
 143. https://help.github.com/articles/which-remote-url-should-i-use
 144. https://github.com/franck-dernoncourt/neuroner#neuroner
 145. https://github.com/franck-dernoncourt/neuroner#table-of-contents
 146. https://github.com/franck-dernoncourt/neuroner#requirements
 147. https://github.com/franck-dernoncourt/neuroner#installation
 148. https://github.com/franck-dernoncourt/neuroner#installing-brat-optional
 149. https://github.com/franck-dernoncourt/neuroner#installing-perl-platform-dependent
 150. https://github.com/franck-dernoncourt/neuroner#using-neuroner
 151. https://github.com/franck-dernoncourt/neuroner#using-neuroner-from-a-python-interpreter
 152. https://github.com/franck-dernoncourt/neuroner#using-neuroner-from-the-command-line
 153. https://github.com/franck-dernoncourt/neuroner#adding-a-new-dataset
 154. https://github.com/franck-dernoncourt/neuroner#using-a-pretrained-model
 155. https://github.com/franck-dernoncourt/neuroner#sharing-a-pretrained-model
 156. https://github.com/franck-dernoncourt/neuroner#using-tensorboard
 157. https://github.com/franck-dernoncourt/neuroner#citation
 158. https://github.com/
