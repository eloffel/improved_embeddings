   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]towards data science
     * [9]data science
     * [10]machine learning
     * [11]programming
     * [12]visualization
     * [13]ai
     * [14]data journalism
     * [15]contribute
     __________________________________________________________________

deep learning weekly piece: what   s a neural network?

   [16]go to the profile of ophir samson
   [17]ophir samson (button) blockedunblock (button) followfollowing
   jun 16, 2017

   for this week   s piece, i   d like to focus on clarifying what a neural
   network is with a simple example i   ve put together. i also coded it up
   as i   d like to show you various parts of the code   s output     an
   important part of understanding what a neural network does.

example: the problem of a confused investor

   assume you   re a venture capitalist and would like to figure out which
   start ups you should invest in. so you look at hundreds of start ups,
   and for each you write down:
    1. how much money they   ve already raised
    2. what % of their staff are engineers
    3. whether they   ve ultimately been successful, on a scale of 1 (most
       successful) to 4 (a total cluster)

   you then decide to put this info in a graph, plotting (1) money on the
   x-axis and (2) % engineers on the y-axis. the color of each mark
   represents how successful they   ve been. here   s what you find:
   [1*o9ajrhdz7plpbb-vxxnmda.jpeg]
   x-axis = money raised (as a percentile of all companies you   ve seen),
   and y-axis = % of start up that are engineers, also normalized.
   disclaimer: this is entirely made up data for illustrative purposes.

   ok        but what do you learn from this? not much. does the data show that
   successful start ups always raised more money? no, not always    did
   successful start ups have more engineers? no, not always   

   so next you try drawing lines to separate the    regions    of successful
   vs. unsuccessful start ups. you try doing it, but it turns out to be
   really hard. here   s one of your futile attempts:
   [1*gwiwwobwarxuz6lg9-dova.jpeg]

   while your data shows that, generally, companies with most money and
   engineers were more successful, where should you draw the line? there
   are bunch of green/blue points below the line, so clearly it   s not a
   very accurate line.

   so you   re a bit stuck   

   in come    neural nets

   (excuse the investor pun   )

   the above problem is called classification: given data about a start
   up, how do you systematically classify its success.

   neural nets are just models that take in various attributes about a
      thing   , and then classify that    thing   . for example, the    thing    could
   be a start up (with attributes being money raised and % of engineers)
   with classification of its level of success. or the    thing    could be a
   us voter (with attributes being city she lives in and household income)
   with classification whether she   ll vote democrat or republican.

   i won   t get into the gory details of how they work* as i   d like to
   focus on the results here, but at a high level this is what a neural
   network looks like for your start up classification example:
   [1*916jwas_fjdsdw-bsmvwia.jpeg]
   the investor   s neural network, to predict the start ups    success from 1
   (very successful) to 4 (a total cluster). only the first 6 rows are
   shown, but you   ll generally have thousands of rows / start ups.

   this is an example of a fully connected neural network because every
   input is connected to every output. each row (i.e. start up) in the
   input has two values: money raised and % engineers. the output is the
   model   s prediction of the start up   s success.

   you can visualize this neural network on your original graph, to show
   your    regions    of success:
   [1*ljwyfmrv1qydrqscj67ngq.jpeg]
   here we   ve centered both axes on zero, to compare to average.

   this is certainly better than the straight line you first tried to
   draw. but it   s still not very good, as there are a bunch of yellow
   points in the red region, a bunch of green points in the blue region,
   etc.

   this is where the concept of a hidden layer comes in. it means sticking
   an extra    layer    of nodes (mathematical functions) in between the input
   and output layer. these refine the model and also allow
   non-linearities, meaning the regions won   t necessarily be split by
   straight lines. here   s what your neural network with a single hidden
   layer will look like:
   [1*l8qvfpeqyi6r4jmc7vox7g.jpeg]
   your neural network with one hidden layer. the output is the model   s
   prediction about the start ups    success level

   again, you can visualize this on your original graph:
   [1*i-uw1h6l2texspm_jtcdww.jpeg]

   this is way better! you see how the hidden layer added some
   non-linearity? this model is now a much better classifier of start ups.
   but    it   s still not perfect, as some of the blue points extend into the
   green area (on the right), and some of the red points go into the
   orange area. so you can improve this even further by adding a second
   hidden layer to your neural network, meaning it   ll look like:
   [1*sfchihvwrkedbolkd4uznw.jpeg]
   your neural network with two hidden layers. please don   t make me draw
   any more lines   

   once again, we can visualize this on the graph to see how well our
   model classifies our data:
   [1*uetlvub5a3le7eb3f2giiq.jpeg]

   as you can see, this is almost a perfect classification of your start
   ups! once you   ve validated and tested the model (see caveat below), you
   can use this neural network to predict whether a start up will be
   successful by just measuring how much money they   ve raised and what %
   of the start up   s minions are engineers.

   (in case you   re interested, [18]here is my code for the above.)

important caveat

   the purpose of this post is to show you how the neural network is
   created and works. i purposely haven   t gone into two very important
   concepts: training and validation. these are absolutely critical to do
   if you want to be sure your neural network doesn   t only work on the
   data you gave it.

   said another way, your neural network was trained only on start ups
   you   ve already seen. you   ll be able to trust its results on new start
   ups (that you haven   t yet seen) only once you validate it.

   * if you   re interested in how nns work, [19]here   s an awesome overview

     * [20]machine learning
     * [21]deep learning
     * [22]neural networks
     * [23]deep neural networks
     * [24]towards data science

   (button)
   (button)
   (button) 82 claps
   (button) (button) (button) 2 (button) (button)

     (button) blockedunblock (button) followfollowing
   [25]go to the profile of ophir samson

[26]ophir samson

   autonomous vehicles business development @ uber. mit math ph.d,
   stanford mba, close up magician, lover of israeli food and dogs.

     (button) follow
   [27]towards data science

[28]towards data science

   sharing concepts, ideas, and codes.

     * (button)
       (button) 82
     * (button)
     *
     *

   [29]towards data science
   never miss a story from towards data science, when you sign up for
   medium. [30]learn more
   never miss a story from towards data science
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://towardsdatascience.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/aa0df888d8a2
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://towardsdatascience.com/deep-learning-weekly-piece-whats-a-neural-network-aa0df888d8a2&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://towardsdatascience.com/deep-learning-weekly-piece-whats-a-neural-network-aa0df888d8a2&source=--------------------------nav_reg&operation=register
   8. https://towardsdatascience.com/?source=logo-lo_qfbyit6danzu---7f60cf5620c9
   9. https://towardsdatascience.com/data-science/home
  10. https://towardsdatascience.com/machine-learning/home
  11. https://towardsdatascience.com/programming/home
  12. https://towardsdatascience.com/data-visualization/home
  13. https://towardsdatascience.com/artificial-intelligence/home
  14. https://towardsdatascience.com/data-journalism/home
  15. https://towardsdatascience.com/contribute/home
  16. https://towardsdatascience.com/@ophir.samson02?source=post_header_lockup
  17. https://towardsdatascience.com/@ophir.samson02
  18. https://github.com/ophir11235813/medium/blob/master/confused_investor.ipynb
  19. https://techcrunch.com/2017/04/13/neural-networks-made-easy/
  20. https://towardsdatascience.com/tagged/machine-learning?source=post
  21. https://towardsdatascience.com/tagged/deep-learning?source=post
  22. https://towardsdatascience.com/tagged/neural-networks?source=post
  23. https://towardsdatascience.com/tagged/deep-neural-networks?source=post
  24. https://towardsdatascience.com/tagged/towards-data-science?source=post
  25. https://towardsdatascience.com/@ophir.samson02?source=footer_card
  26. https://towardsdatascience.com/@ophir.samson02
  27. https://towardsdatascience.com/?source=footer_card
  28. https://towardsdatascience.com/?source=footer_card
  29. https://towardsdatascience.com/
  30. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  32. https://medium.com/p/aa0df888d8a2/share/twitter
  33. https://medium.com/p/aa0df888d8a2/share/facebook
  34. https://medium.com/p/aa0df888d8a2/share/twitter
  35. https://medium.com/p/aa0df888d8a2/share/facebook
