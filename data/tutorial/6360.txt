   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]freecodecamp.org
     * [9]dev
     * [10]learn to code for free
     __________________________________________________________________

learning python: from zero to hero

   [11]go to the profile of tk
   [12]tk (button) blockedunblock (button) followfollowing
   sep 30, 2017
   [1*uewmi48uushon-hx7lwi0w.png]

   first of all, what is python? according to its creator, guido van
   rossum, python is a:

        high-level programming language, and its core design philosophy is
     all about code readability and a syntax which allows programmers to
     express concepts in a few lines of code.   

   for me, the first reason to learn python was that it is, in fact, a
   beautiful programming language. it was really natural to code in it and
   express my thoughts.

   another reason was that we can use coding in python in multiple ways:
   data science, web development, and machine learning all shine here.
   quora, pinterest and spotify all use python for their backend web
   development. so let   s learn a bit about it.

the basics

1. variables

   you can think about variables as words that store a value. simple as
   that.

   in python, it is really easy to define a variable and set a value to
   it. imagine you want to store number 1 in a variable called    one.   
   let   s do it:

   iframe: [13]/media/c921e7aaef4471513b444391de4ac1e0?postid=120ea540b567

   how simple was that? you just assigned the value 1 to the variable
      one.   

   iframe: [14]/media/b2a2391142a1e0dd5b80f4f772ef75bd?postid=120ea540b567

   and you can assign any other value to whatever other variables you
   want. as you see in the table above, the variable    two    stores the
   integer 2, and    some_number    stores 10,000.

   besides integers, we can also use booleans (true / false), strings,
   float, and so many other data types.

   iframe: [15]/media/ef7690e897e2498d3ef02b23e8c5e4c7?postid=120ea540b567

2. control flow: conditional statements

      if    uses an expression to evaluate whether a statement is true or
   false. if it is true, it executes what is inside the    if    statement.
   for example:

   iframe: [16]/media/4dd2996bf0b7a7f1fe5b600ae2466dcc?postid=120ea540b567

   2 is greater than 1, so the    print    code is executed.

   the    else    statement will be executed if the    if    expression is false.

   iframe: [17]/media/9862206af6404782adbf21e8e95bcf5d?postid=120ea540b567

   1 is not greater than 2, so the code inside the    else    statement will
   be executed.

   you can also use an    elif    statement:

   iframe: [18]/media/26e4095c80922321f6236f5d39e8b379?postid=120ea540b567

3. looping / iterator

   in python, we can iterate in different forms. i   ll talk about two:
   while and for.

   while looping: while the statement is true, the code inside the block
   will be executed. so, this code will print the number from 1 to 10.

   iframe: [19]/media/d3f00f81eb92814e777f6d4d440cf086?postid=120ea540b567

   the while loop needs a    loop condition.    if it stays true, it continues
   iterating. in this example, when num is 11 the loop condition equals
   false.

   another basic bit of code to better understand it:

   iframe: [20]/media/633fe079c8f85248ad1d7e2644804433?postid=120ea540b567

   the loop condition is true so it keeps iterating         until we set it to
   false.

   for looping: you apply the variable    num    to the block, and the    for   
   statement will iterate it for you. this code will print the same as
   while code: from 1 to 10.

   iframe: [21]/media/14d281dd982af1d77d9bf4ea9b71d912?postid=120ea540b567

   see? it is so simple. the range starts with 1 and goes until the 11th
   element (10 is the 10th element).

list: collection | array | data structure

   imagine you want to store the integer 1 in a variable. but maybe now
   you want to store 2. and 3, 4, 5    

   do i have another way to store all the integers that i want, but not in
   millions of variables? you guessed it         there is indeed another way to
   store them.

   list is a collection that can be used to store a list of values (like
   these integers that you want). so let   s use it:

   iframe: [22]/media/b66ff21fb947a4456fc0fadbb12081de?postid=120ea540b567

   it is really simple. we created an array and stored it on my_integer.

   but maybe you are asking:    how can i get a value from this array?   

   great question. list has a concept called index. the first element gets
   the index 0 (zero). the second gets 1, and so on. you get the idea.

   to make it clearer, we can represent the array and each element with
   its index. i can draw it:
   [1*remk6ngghlii20vpd6unea.jpeg]

   using the python syntax, it   s also simple to understand:

   iframe: [23]/media/c9cca0f7306db18db8b9d6c5eab7e2ed?postid=120ea540b567

   imagine that you don   t want to store integers. you just want to store
   strings, like a list of your relatives    names. mine would look
   something like this:

   iframe: [24]/media/34342f0ef152b82e7ce33c2c63503cb9?postid=120ea540b567

   it works the same way as integers. nice.

   we just learned how lists indices work. but i still need to show you
   how we can add an element to the list data structure (an item to a
   list).

   the most common method to add a new value to a list is append. let   s
   see how it works:

   iframe: [25]/media/c55bbcee5e611a3562bc3d6840f720a9?postid=120ea540b567

   append is super simple. you just need to apply the element (eg.    the
   effective engineer   ) as the append parameter.

   well, enough about lists. let   s talk about another data structure.

dictionary: key-value data structure

   now we know that lists are indexed with integer numbers. but what if we
   don   t want to use integer numbers as indices? some data structures that
   we can use are numeric, string, or other types of indices.

   let   s learn about the dictionary data structure. dictionary is a
   collection of key-value pairs. here   s what it looks like:

   iframe: [26]/media/ca070295beefcedab9777847bf99664e?postid=120ea540b567

   the key is the index pointing to the value. how do we access the
   dictionary value? you guessed it         using the key. let   s try it:

   iframe: [27]/media/82894cd297682720e22d995b2d0398d7?postid=120ea540b567

   i created a dictionary about me. my name, nickname, and nationality.
   those attributes are the dictionary keys.

   as we learned how to access the list using index, we also use indices
   (keys in the dictionary context) to access the value stored in the
   dictionary.

   in the example, i printed a phrase about me using all the values stored
   in the dictionary. pretty simple, right?

   another cool thing about dictionary is that we can use anything as the
   value. in the dictionary i created, i want to add the key    age    and my
   real integer age in it:

   iframe: [28]/media/6997f6fb0ae67087f67ae339e071a0ae?postid=120ea540b567

   here we have a key (age) value (24) pair using string as the key and
   integer as the value.

   as we did with lists, let   s learn how to add elements to a dictionary.
   the key pointing to a value is a big part of what dictionary is. this
   is also true when we are talking about adding elements to it:

   iframe: [29]/media/9f526a77030b63e3c431f8ea5465498f?postid=120ea540b567

   we just need to assign a value to a dictionary key. nothing complicated
   here, right?

iteration: looping through data structures

   as we learned in the [30]python basics, the list iteration is very
   simple. we python developers commonly use for looping. let   s do it:

   iframe: [31]/media/0f28c915bf7fdf1bd898691a04731d04?postid=120ea540b567

   so for each book in the bookshelf, we (can do everything with it) print
   it. pretty simple and intuitive. that   s python.

   for a hash data structure, we can also use the for loop, but we apply
   the key :

   iframe: [32]/media/d49402e195671309c87c7adf7a4cc4c3?postid=120ea540b567

   this is an example how to use it. for each key in the dictionary , we
   print the key and its corresponding value.

   another way to do it is to use the iteritems method.

   iframe: [33]/media/c146d618d971e893e81dc776c9381b99?postid=120ea540b567

   we did name the two parameters as key and value, but it is not
   necessary. we can name them anything. let   s see it:

   iframe: [34]/media/fe665ca42dac4023bc6c36327a45cad5?postid=120ea540b567

   we can see we used attribute as a parameter for the dictionary key, and
   it works properly. great!

classes & objects

a little bit of theory:

   objects are a representation of real world objects like cars, dogs, or
   bikes. the objects share two main characteristics: data and behavior.

   cars have data, like number of wheels, number of doors, and seating
   capacity they also exhibit behavior: they can accelerate, stop, show
   how much fuel is left, and so many other things.

   we identify data as attributes and behavior as methods in
   object-oriented programming. again:

   data     attributes and behavior     methods

   and a class is the blueprint from which individual objects are created.
   in the real world, we often find many objects with the same type. like
   cars. all the same make and model (and all have an engine, wheels,
   doors, and so on). each car was built from the same set of blueprints
   and has the same components.

python object-oriented programming mode: on

   python, as an object-oriented programming language, has these concepts:
   class and object.

   a class is a blueprint, a model for its objects.

   so again, a class it is just a model, or a way to define attributes and
   behavior (as we talked about in the theory section). as an example, a
   vehicle class has its own attributes that define what objects are
   vehicles. the number of wheels, type of tank, seating capacity, and
   maximum velocity are all attributes of a vehicle.

   with this in mind, let   s look at python syntax for classes:

   iframe: [35]/media/45528bd8e9e2f5b093f101fbd7bf60b1?postid=120ea540b567

   we define classes with a class statement         and that   s it. easy, isn   t
   it?

   objects are instances of a class. we create an instance by naming the
   class.

   iframe: [36]/media/dc44d286269b03b697f1f54d10e0b7bc?postid=120ea540b567

   here car is an object (or instance) of the class vehicle.

   remember that our vehicle class has four attributes: number of wheels,
   type of tank, seating capacity, and maximum velocity. we set all these
   attributes when creating a vehicle object. so here, we define our class
   to receive data when it initiates it:

   iframe: [37]/media/686af7ee5c449971ba4e00c553ac619c?postid=120ea540b567

   we use the init method. we call it a constructor method. so when we
   create the vehicle object, we can define these attributes. imagine that
   we love the tesla model s, and we want to create this kind of object.
   it has four wheels, runs on electric energy, has space for five seats,
   and the maximum velocity is 250km/hour (155 mph). let   s create this
   object:

   iframe: [38]/media/9ca0f1c86fda8e864205d460aa60c96e?postid=120ea540b567

   four wheels + electric    tank type    + five seats + 250km/hour maximum
   speed.

   all attributes are set. but how can we access these attributes    values?
   we send a message to the object asking about them. we call it a method.
   it   s the object   s behavior. let   s implement it:

   iframe: [39]/media/078ec29902fc03a0c37079a1476fb774?postid=120ea540b567

   this is an implementation of two methods: number_of_wheels and
   set_number_of_wheels. we call it getter & setter. because the first
   gets the attribute value, and the second sets a new value for the
   attribute.

   in python, we can do that using @property (decorators) to define
   getters and setters. let   s see it with code:

   iframe: [40]/media/5164561c3931ef826d0648af0c8dbc52?postid=120ea540b567

   and we can use these methods as attributes:

   iframe: [41]/media/3a2afe0bb4eb97a7a97564fc1ad8359a?postid=120ea540b567

   this is slightly different than defining methods. the methods work as
   attributes. for example, when we set the new number of wheels, we don   t
   apply two as a parameter, but set the value 2 to number_of_wheels. this
   is one way to write pythonic getter and setter code.

   but we can also use methods for other things, like the    make_noise   
   method. let   s see it:

   iframe: [42]/media/86b005c8075fea4714f7a0421dfa49ad?postid=120ea540b567

   when we call this method, it just returns a string    vrrrruuuum.   

   iframe: [43]/media/d3ee7c0ee048748acaf6d86aed4a661f?postid=120ea540b567
     __________________________________________________________________

encapsulation: hiding information

   encapsulation is a mechanism that restricts direct access to objects   
   data and methods. but at the same time, it facilitates operation on
   that data (objects    methods).

        encapsulation can be used to hide data members and members
     function. under this definition, encapsulation means that the
     internal representation of an [44]object is generally hidden from
     view outside of the object   s definition.            wikipedia

   all internal representation of an object is hidden from the outside.
   only the object can interact with its internal data.

   first, we need to understand how public and non-public instance
   variables and methods work.

public instance variables

   for a python class, we can initialize a public instance variable within
   our constructor method. let   s see this:

   within the constructor method:

   iframe: [45]/media/d25de854b3f10f1d38043d1980b9d4c0?postid=120ea540b567

   here we apply the first_name value as an argument to the public
   instance variable.

   iframe: [46]/media/42acba08d786976f46f7c94c609e0751?postid=120ea540b567

   within the class:

   iframe: [47]/media/5e2ae251034940f518b90ac65326c847?postid=120ea540b567

   here, we do not need to apply the first_name as an argument, and all
   instance objects will have a class attribute initialized with tk.

   iframe: [48]/media/775c068ba6cdddb717c7e268b6c3ccaf?postid=120ea540b567

   cool. we have now learned that we can use public instance variables and
   class attributes. another interesting thing about the public part is
   that we can manage the variable value. what do i mean by that? our
   object can manage its variable value: get and set variable values.

   keeping the person class in mind, we want to set another value to its
   first_name variable:

   iframe: [49]/media/438ee52aa7e08b485897aa166c15c351?postid=120ea540b567

   there we go. we just set another value (kaio) to the first_name
   instance variable and it updated the value. simple as that. since it   s
   a public variable, we can do that.

non-public instance variable

     we don   t use the term    private    here, since no attribute is really
     private in python (without a generally unnecessary amount of
     work).         [50]pep 8

   as the public instance variable , we can define the non-public instance
   variable both within the constructor method or within the class. the
   syntax difference is: for non-public instance variables , use an
   underscore (_) before the variable name.

           private    instance variables that cannot be accessed except from
     inside an object don   t exist in python. however, there is a
     convention that is followed by most python code: a name prefixed
     with an underscore (e.g. _spam) should be treated as a non-public
     part of the api (whether it is a function, a method or a data
     member)            [51]python software foundation

   here   s an example:

   iframe: [52]/media/07bd96cb9147758a489e2b49120f3a88?postid=120ea540b567

   did you see the email variable? this is how we define a non-public
   variable :

   iframe: [53]/media/926ca447d0efd9b2377dcf8e4a3c47c1?postid=120ea540b567

     we can access and update it. non-public variables are just a
     convention and should be treated as a non-public part of the api.

   so we use a method that allows us to do it inside our class definition.
   let   s implement two methods (email and update_email) to understand it:

   iframe: [54]/media/87fc55c276acb9423da57a2b58706876?postid=120ea540b567

   now we can update and access non-public variables using those methods.
   let   s see:

   iframe: [55]/media/7da3b5de1c01d60a7deb4aef0e8cf679?postid=120ea540b567

    1. we initiated a new object with first_name tk and email tk@mail.com
    2. printed the email by accessing the non-public variable with a
       method
    3. tried to set a new email out of our class
    4. we need to treat non-public variable as non-public part of the api
    5. updated the non-public variable with our instance method
    6. success! we can update it inside our class with the helper method

public method

   with public methods, we can also use them out of our class:

   iframe: [56]/media/9aa65d297f30dc9d07dd0447a035c301?postid=120ea540b567

   let   s test it:

   iframe: [57]/media/82ff560e3160e2a9a78a255c7e72d70b?postid=120ea540b567

   great         we can use it without any problem.

non-public method

   but with non-public methods we aren   t able to do it. let   s implement
   the same person class, but now with a show_age non-public method using
   an underscore (_).

   iframe: [58]/media/fd08994303980074c04b7b17ce51d1d3?postid=120ea540b567

   and now, we   ll try to call this non-public method with our object:

   iframe: [59]/media/993456840fe3204d6e7b70a2d34c2e9e?postid=120ea540b567

     we can access and update it. non-public methods are just a
     convention and should be treated as a non-public part of the api.

   here   s an example for how we can use it:

   iframe: [60]/media/022c04bf0aed47f618b24b7af3daa853?postid=120ea540b567

   here we have a _get_age non-public method and a show_age public method.
   the show_age can be used by our object (out of our class) and the
   _get_age only used inside our class definition (inside show_age
   method). but again: as a matter of convention.

encapsulation summary

   with encapsulation we can ensure that the internal representation of
   the object is hidden from the outside.

inheritance: behaviors and characteristics

   certain objects have some things in common: their behavior and
   characteristics.

   for example, i inherited some characteristics and behaviors from my
   father. i inherited his eyes and hair as characteristics, and his
   impatience and introversion as behaviors.

   in object-oriented programming, classes can inherit common
   characteristics (data) and behavior (methods) from another class.

   let   s see another example and implement it in python.

   imagine a car. number of wheels, seating capacity and maximum velocity
   are all attributes of a car. we can say that an electriccar class
   inherits these same attributes from the regular car class.

   iframe: [61]/media/d8c96fa38c00544eddac8f8a07723763?postid=120ea540b567

   our car class implemented:

   iframe: [62]/media/03691782d8dfad996e277e0ee346b2f4?postid=120ea540b567

   once initiated, we can use all instance variables created. nice.

   in python, we apply a parent class to the child class as a parameter.
   an electriccar class can inherit from our car class.

   iframe: [63]/media/d2c121285adc388fcf8c273a239989fe?postid=120ea540b567

   simple as that. we don   t need to implement any other method, because
   this class already has it (inherited from car class). let   s prove it:

   iframe: [64]/media/f907bb15bdd8e9fd839d57f513b7c613?postid=120ea540b567

   beautiful.

that   s it!

   we learned a lot of things about python basics:
     * how python variables work
     * how python conditional statements work
     * how python looping (while & for) works
     * how to use lists: collection | array
     * dictionary key-value collection
     * how we can iterate through these data structures
     * objects and classes
     * attributes as objects    data
     * methods as objects    behavior
     * using python getters and setters & property decorator
     * encapsulation: hiding information
     * inheritance: behaviors and characteristics

   congrats! you completed this dense piece of content about python.

   if you want a complete python course, learn more real-world coding
   skills and build projects, try [65]one month python bootcamp. see you
   there    
     __________________________________________________________________

   for more stories and posts about my journey learning & mastering
   programming, follow my publication [66]the renaissance developer.

   have fun, keep learning, and always keep coding.

   my [67]twitter & [68]github.    

     * [69]python
     * [70]programming
     * [71]coding
     * [72]web development
     * [73]software development

   (button)
   (button)
   (button) 57k claps
   (button) (button) (button) 126 (button) (button)

     (button) blockedunblock (button) followfollowing
   [74]go to the profile of tk

[75]tk

   site [76]http://bit.ly/tk-site     building things on
   [77]http://bit.ly/github-tk

     (button) follow
   [78]freecodecamp.org

[79]freecodecamp.org

   stories worth reading about programming and technology from our open
   source community.

     * (button)
       (button) 57k
     * (button)
     *
     *

   [80]freecodecamp.org
   never miss a story from freecodecamp.org, when you sign up for medium.
   [81]learn more
   never miss a story from freecodecamp.org
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://medium.freecodecamp.org/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/120ea540b567
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://medium.freecodecamp.org/learning-python-from-zero-to-hero-120ea540b567&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://medium.freecodecamp.org/learning-python-from-zero-to-hero-120ea540b567&source=--------------------------nav_reg&operation=register
   8. https://medium.freecodecamp.org/?source=logo-lo_lpqhkso03wek---336d898217ee
   9. https://medium.freecodecamp.org/tagged/web-development
  10. https://www.freecodecamp.com/?ref=mn
  11. https://medium.freecodecamp.org/@leandrotk_?source=post_header_lockup
  12. https://medium.freecodecamp.org/@leandrotk_
  13. https://medium.freecodecamp.org/media/c921e7aaef4471513b444391de4ac1e0?postid=120ea540b567
  14. https://medium.freecodecamp.org/media/b2a2391142a1e0dd5b80f4f772ef75bd?postid=120ea540b567
  15. https://medium.freecodecamp.org/media/ef7690e897e2498d3ef02b23e8c5e4c7?postid=120ea540b567
  16. https://medium.freecodecamp.org/media/4dd2996bf0b7a7f1fe5b600ae2466dcc?postid=120ea540b567
  17. https://medium.freecodecamp.org/media/9862206af6404782adbf21e8e95bcf5d?postid=120ea540b567
  18. https://medium.freecodecamp.org/media/26e4095c80922321f6236f5d39e8b379?postid=120ea540b567
  19. https://medium.freecodecamp.org/media/d3f00f81eb92814e777f6d4d440cf086?postid=120ea540b567
  20. https://medium.freecodecamp.org/media/633fe079c8f85248ad1d7e2644804433?postid=120ea540b567
  21. https://medium.freecodecamp.org/media/14d281dd982af1d77d9bf4ea9b71d912?postid=120ea540b567
  22. https://medium.freecodecamp.org/media/b66ff21fb947a4456fc0fadbb12081de?postid=120ea540b567
  23. https://medium.freecodecamp.org/media/c9cca0f7306db18db8b9d6c5eab7e2ed?postid=120ea540b567
  24. https://medium.freecodecamp.org/media/34342f0ef152b82e7ce33c2c63503cb9?postid=120ea540b567
  25. https://medium.freecodecamp.org/media/c55bbcee5e611a3562bc3d6840f720a9?postid=120ea540b567
  26. https://medium.freecodecamp.org/media/ca070295beefcedab9777847bf99664e?postid=120ea540b567
  27. https://medium.freecodecamp.org/media/82894cd297682720e22d995b2d0398d7?postid=120ea540b567
  28. https://medium.freecodecamp.org/media/6997f6fb0ae67087f67ae339e071a0ae?postid=120ea540b567
  29. https://medium.freecodecamp.org/media/9f526a77030b63e3c431f8ea5465498f?postid=120ea540b567
  30. https://medium.com/the-renaissance-developer/python-101-the-basics-441136fb7cc3
  31. https://medium.freecodecamp.org/media/0f28c915bf7fdf1bd898691a04731d04?postid=120ea540b567
  32. https://medium.freecodecamp.org/media/d49402e195671309c87c7adf7a4cc4c3?postid=120ea540b567
  33. https://medium.freecodecamp.org/media/c146d618d971e893e81dc776c9381b99?postid=120ea540b567
  34. https://medium.freecodecamp.org/media/fe665ca42dac4023bc6c36327a45cad5?postid=120ea540b567
  35. https://medium.freecodecamp.org/media/45528bd8e9e2f5b093f101fbd7bf60b1?postid=120ea540b567
  36. https://medium.freecodecamp.org/media/dc44d286269b03b697f1f54d10e0b7bc?postid=120ea540b567
  37. https://medium.freecodecamp.org/media/686af7ee5c449971ba4e00c553ac619c?postid=120ea540b567
  38. https://medium.freecodecamp.org/media/9ca0f1c86fda8e864205d460aa60c96e?postid=120ea540b567
  39. https://medium.freecodecamp.org/media/078ec29902fc03a0c37079a1476fb774?postid=120ea540b567
  40. https://medium.freecodecamp.org/media/5164561c3931ef826d0648af0c8dbc52?postid=120ea540b567
  41. https://medium.freecodecamp.org/media/3a2afe0bb4eb97a7a97564fc1ad8359a?postid=120ea540b567
  42. https://medium.freecodecamp.org/media/86b005c8075fea4714f7a0421dfa49ad?postid=120ea540b567
  43. https://medium.freecodecamp.org/media/d3ee7c0ee048748acaf6d86aed4a661f?postid=120ea540b567
  44. https://en.wikipedia.org/wiki/object_(computer_science)
  45. https://medium.freecodecamp.org/media/d25de854b3f10f1d38043d1980b9d4c0?postid=120ea540b567
  46. https://medium.freecodecamp.org/media/42acba08d786976f46f7c94c609e0751?postid=120ea540b567
  47. https://medium.freecodecamp.org/media/5e2ae251034940f518b90ac65326c847?postid=120ea540b567
  48. https://medium.freecodecamp.org/media/775c068ba6cdddb717c7e268b6c3ccaf?postid=120ea540b567
  49. https://medium.freecodecamp.org/media/438ee52aa7e08b485897aa166c15c351?postid=120ea540b567
  50. https://www.python.org/dev/peps/pep-0008/#designing-for-inheritance
  51. https://docs.python.org/2/tutorial/classes.html#private-variables-and-class-local-references
  52. https://medium.freecodecamp.org/media/07bd96cb9147758a489e2b49120f3a88?postid=120ea540b567
  53. https://medium.freecodecamp.org/media/926ca447d0efd9b2377dcf8e4a3c47c1?postid=120ea540b567
  54. https://medium.freecodecamp.org/media/87fc55c276acb9423da57a2b58706876?postid=120ea540b567
  55. https://medium.freecodecamp.org/media/7da3b5de1c01d60a7deb4aef0e8cf679?postid=120ea540b567
  56. https://medium.freecodecamp.org/media/9aa65d297f30dc9d07dd0447a035c301?postid=120ea540b567
  57. https://medium.freecodecamp.org/media/82ff560e3160e2a9a78a255c7e72d70b?postid=120ea540b567
  58. https://medium.freecodecamp.org/media/fd08994303980074c04b7b17ce51d1d3?postid=120ea540b567
  59. https://medium.freecodecamp.org/media/993456840fe3204d6e7b70a2d34c2e9e?postid=120ea540b567
  60. https://medium.freecodecamp.org/media/022c04bf0aed47f618b24b7af3daa853?postid=120ea540b567
  61. https://medium.freecodecamp.org/media/d8c96fa38c00544eddac8f8a07723763?postid=120ea540b567
  62. https://medium.freecodecamp.org/media/03691782d8dfad996e277e0ee346b2f4?postid=120ea540b567
  63. https://medium.freecodecamp.org/media/d2c121285adc388fcf8c273a239989fe?postid=120ea540b567
  64. https://medium.freecodecamp.org/media/f907bb15bdd8e9fd839d57f513b7c613?postid=120ea540b567
  65. https://onemonth.com/courses/python?campaignid=33447&discount_code=tkpython1&mbsy=lg6tv&mbsy_source=7d89eeb0-0031-478c-a60c-6a96d762712a
  66. https://medium.com/the-renaissance-developer
  67. https://twitter.com/leandrotk_
  68. https://github.com/leandrotk
  69. https://medium.freecodecamp.org/tagged/python?source=post
  70. https://medium.freecodecamp.org/tagged/programming?source=post
  71. https://medium.freecodecamp.org/tagged/coding?source=post
  72. https://medium.freecodecamp.org/tagged/web-development?source=post
  73. https://medium.freecodecamp.org/tagged/software-development?source=post
  74. https://medium.freecodecamp.org/@leandrotk_?source=footer_card
  75. https://medium.freecodecamp.org/@leandrotk_
  76. http://bit.ly/tk-site
  77. http://bit.ly/github-tk
  78. https://medium.freecodecamp.org/?source=footer_card
  79. https://medium.freecodecamp.org/?source=footer_card
  80. https://medium.freecodecamp.org/
  81. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  83. https://medium.com/p/120ea540b567/share/twitter
  84. https://medium.com/p/120ea540b567/share/facebook
  85. https://medium.com/p/120ea540b567/share/twitter
  86. https://medium.com/p/120ea540b567/share/facebook
