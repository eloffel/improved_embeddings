   #[1]github [2]recent commits to mask_rid98:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]522
     * [35]star [36]11,250
     * [37]fork [38]4,833

[39]matterport/[40]mask_rid98

   [41]code [42]issues 799 [43]pull requests 35 [44]projects 0 [45]wiki
   [46]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [47]sign up
   mask r-id98 for id164 and instance segmentation on keras and
   tensorflow
   [48]mask-rid98 [49]tensorflow [50]object-detection
   [51]instance-segmentation [52]keras
     * [53]203 commits
     * [54]1 branch
     * [55]3 releases
     * [56]40 contributors
     * [57]view license

    1. [58]python 100.0%

   (button) python
   branch: master (button) new pull request
   [59]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/m
   [60]download zip

downloading...

   want to be notified of new releases in matterport/mask_rid98?
   [61]sign in [62]sign up

launching github desktop...

   if nothing happens, [63]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [64]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [65]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [66]download the github extension for visual studio
   and try again.

   (button) go back
   [67]@cclauss [68]@waleedka
   [69]cclauss and [70]waleedka [71]import logging for line 382 (button)    
[flake8]([72]http://flake8.pycqa.org) testing of [73]https://github.com/matterpo
rt/mask_rid98 on python 3.7.1

$ __flake8 . --count --select=e9,f63,f72,f82 --show-source --statistics__
```
./mrid98/utils.py:381:9: f821 undefined name 'logging'
        logging.warning("you are using the default load_mask(), maybe you need t
o define your own one.")
        ^
./mrid98/model.py:2359:12: f632 use ==/!= to compare str, bytes, and int literals
        if os.name is 'nt':
           ^
1     f632 use ==/!= to compare str, bytes, and int literals
1     f821 undefined name 'logging'
2
```
__e901,e999,f821,f822,f823__ are the "_showstopper_" [flake8]([74]http://flake8.
pycqa.org) issues that can halt the runtime with a syntaxerror, nameerror, etc.
these 5 are different from most other flake8 issues which are merely "style viol
ations" -- useful for readability but they do not effect runtime safety.
* f821: undefined name `name`
* f822: undefined name `name` in `__all__`
* f823: local variable name referenced before assignment
* e901: syntaxerror or indentationerror
* e999: syntaxerror -- failed to compile a file into an abstract syntax tree

   latest commit [75]3deaec5 mar 9, 2019
   [76]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [77]assets
   [78]images [79]initial commit nov 1, 2017
   [80]mrid98 [81]import logging for line 382 mar 31, 2019
   [82]samples [83]fix typos in inspect_data notebook(feature meap ->
   feature map) mar 4, 2019
   [84].gitignore
   [85]license
   [86]manifest.in
   [87]readme.md [88]reversed order (1) and (2) in installation feb 3,
   2019
   [89]requirements.txt [90]add requirements apr 6, 2018
   [91]setup.id18
   [92]setup.py [93]text updates in setup.py and readme. apr 7, 2018

readme.md

mask r-id98 for id164 and segmentation

   this is an implementation of [94]mask r-id98 on python 3, keras, and
   tensorflow. the model generates bounding boxes and segmentation masks
   for each instance of an object in the image. it's based on feature
   pyramid network (fpn) and a resnet101 backbone.

   [95]instance segmentation sample

   the repository includes:
     * source code of mask r-id98 built on fpn and resnet101.
     * training code for ms coco
     * pre-trained weights for ms coco
     * jupyter notebooks to visualize the detection pipeline at every step
     * parallelmodel class for multi-gpu training
     * evaluation on ms coco metrics (ap)
     * example of training on your own dataset

   the code is documented and designed to be easy to extend. if you use it
   in your research, please consider citing this repository (bibtex
   below). if you work on 3d vision, you might find our recently released
   [96]matterport3d dataset useful as well. this dataset was created from
   3d-reconstructed spaces captured by our customers who agreed to make
   them publicly available for academic use. you can see more examples
   [97]here.

getting started

     * [98]demo.ipynb is the easiest way to start. it shows an example of
       using a model pre-trained on ms coco to segment objects in your own
       images. it includes code to run id164 and instance
       segmentation on arbitrary images.
     * [99]train_shapes.ipynb shows how to train mask r-id98 on your own
       dataset. this notebook introduces a toy dataset (shapes) to
       demonstrate training on a new dataset.
     * ([100]model.py, [101]utils.py, [102]config.py): these files contain
       the main mask rid98 implementation.
     * [103]inspect_data.ipynb. this notebook visualizes the different
       pre-processing steps to prepare the training data.
     * [104]inspect_model.ipynb this notebook goes in depth into the steps
       performed to detect and segment objects. it provides visualizations
       of every step of the pipeline.
     * [105]inspect_weights.ipynb this notebooks inspects the weights of a
       trained model and looks for anomalies and odd patterns.

step by step detection

   to help with debugging and understanding the model, there are 3
   notebooks ([106]inspect_data.ipynb, [107]inspect_model.ipynb,
   [108]inspect_weights.ipynb) that provide a lot of visualizations and
   allow running the model step by step to inspect the output at each
   point. here are a few examples:

1. anchor sorting and filtering

   visualizes every step of the first stage region proposal network and
   displays positive and negative anchors along with anchor box
   refinement.

2. bounding box refinement

   this is an example of final detection boxes (dotted lines) and the
   refinement applied to them (solid lines) in the second stage.

3. mask generation

   examples of generated masks. these then get scaled and placed on the
   image in the right location.

4.layer activations

   often it's useful to inspect the activations at different layers to
   look for signs of trouble (all zeros or random noise).

5. weight histograms

   another useful debugging tool is to inspect the weight histograms.
   these are included in the inspect_weights.ipynb notebook.

6. logging to tensorboard

   tensorboard is another great debugging and visualization tool. the
   model is configured to log losses and save weights at the end of every
   epoch.

6. composing the different pieces into a final result

training on ms coco

   we're providing pre-trained weights for ms coco to make it easier to
   start. you can use those weights as a starting point to train your own
   variation on the network. training and evaluation code is in
   samples/coco/coco.py. you can import this module in jupyter notebook
   (see the provided notebooks for examples) or you can run it directly
   from the command line as such:
# train a new model starting from pre-trained coco weights
python3 samples/coco/coco.py train --dataset=/path/to/coco/ --model=coco

# train a new model starting from id163 weights
python3 samples/coco/coco.py train --dataset=/path/to/coco/ --model=id163

# continue training a model that you had trained earlier
python3 samples/coco/coco.py train --dataset=/path/to/coco/ --model=/path/to/wei
ghts.h5

# continue training the last model you trained. this will find
# the last trained weights in the model directory.
python3 samples/coco/coco.py train --dataset=/path/to/coco/ --model=last

   you can also run the coco evaluation code with:
# run coco evaluation on the last trained model
python3 samples/coco/coco.py evaluate --dataset=/path/to/coco/ --model=last

   the training schedule, learning rate, and other parameters should be
   set in samples/coco/coco.py.

training on your own dataset

   start by reading this [109]blog post about the balloon color splash
   sample. it covers the process starting from annotating images to
   training to using the results in a sample application.

   in summary, to train the model on your own dataset you'll need to
   extend two classes:

   config this class contains the default configuration. subclass it and
   modify the attributes you need to change.

   dataset this class provides a consistent way to work with any dataset.
   it allows you to use new datasets for training without having to change
   the code of the model. it also supports loading multiple datasets at
   the same time, which is useful if the objects you want to detect are
   not all available in one dataset.

   see examples in samples/shapes/train_shapes.ipynb,
   samples/coco/coco.py, samples/balloon/balloon.py, and
   samples/nucleus/nucleus.py.

differences from the official paper

   this implementation follows the mask rid98 paper for the most part, but
   there are a few cases where we deviated in favor of code simplicity and
   generalization. these are some of the differences we're aware of. if
   you encounter other differences, please do let us know.
     * image resizing: to support training multiple images per batch we
       resize all images to the same size. for example, 1024x1024px on ms
       coco. we preserve the aspect ratio, so if an image is not square we
       pad it with zeros. in the paper the resizing is done such that the
       smallest side is 800px and the largest is trimmed at 1000px.
     * bounding boxes: some datasets provide bounding boxes and some
       provide masks only. to support training on multiple datasets we
       opted to ignore the bounding boxes that come with the dataset and
       generate them on the fly instead. we pick the smallest box that
       encapsulates all the pixels of the mask as the bounding box. this
       simplifies the implementation and also makes it easy to apply image
       augmentations that would otherwise be harder to apply to bounding
       boxes, such as image rotation.
       to validate this approach, we compared our computed bounding boxes
       to those provided by the coco dataset. we found that ~2% of
       bounding boxes differed by 1px or more, ~0.05% differed by 5px or
       more, and only 0.01% differed by 10px or more.
     * learning rate: the paper uses a learning rate of 0.02, but we found
       that to be too high, and often causes the weights to explode,
       especially when using a small batch size. it might be related to
       differences between how caffe and tensorflow compute gradients (sum
       vs mean across batches and gpus). or, maybe the official model uses
       gradient clipping to avoid this issue. we do use gradient clipping,
       but don't set it too aggressively. we found that smaller learning
       rates converge faster anyway so we go with that.

citation

   use this bibtex to cite this repository:
@misc{matterport_maskrid98_2017,
  title={mask r-id98 for id164 and instance segmentation on keras and
tensorflow},
  author={waleed abdulla},
  year={2017},
  publisher={github},
  journal={github repository},
  howpublished={\url{https://github.com/matterport/mask_rid98}},
}

contributing

   contributions to this repository are welcome. examples of things you
   can contribute:
     * speed improvements. like re-writing some python code in tensorflow
       or cython.
     * training on other datasets.
     * accuracy improvements.
     * visualizations and examples.

   you can also [110]join our team and help us build even more projects
   like this one.

requirements

   python 3.4, tensorflow 1.3, keras 2.0.8 and other common packages
   listed in requirements.txt.

ms coco requirements:

   to train or test on ms coco, you'll also need:
     * pycocotools (installation instructions below)
     * [111]ms coco dataset
     * download the 5k [112]minival and the 35k
       [113]validation-minus-minival subsets. more details in the original
       [114]faster r-id98 implementation.

   if you use docker, the code has been verified to work on [115]this
   docker container.

installation

    1. clone this repository
    2. install dependencies
pip3 install -r requirements.txt
    3. run setup from the repository root directory
python3 setup.py install
    4. download pre-trained coco weights (mask_rid98_coco.h5) from the
       [116]releases page.
    5. (optional) to train or test on ms coco install pycocotools from one
       of these repos. they are forks of the original pycocotools with
       fixes for python3 and windows (the official repo doesn't seem to be
       active anymore).
          + linux: [117]https://github.com/waleedka/coco
          + windows: [118]https://github.com/philferriere/cocoapi. you
            must have the visual c++ 2015 build tools on your path (see
            the repo for additional details)

projects using this model

   if you extend this model to other datasets or build projects that use
   it, we'd love to hear from you.

[119]4k video demo by karol majek.

   [120]mask rid98 on 4k video

[121]images to osm: improve openstreetmap by adding baseball, soccer, tennis,
football, and basketball fields.

   [122]identify sport fields in satellite images

[123]splash of color. a blog post explaining how to train this model from
scratch and use it to implement a color splash effect.

   [124]balloon color splash

[125]segmenting nuclei in microscopy images. built for the [126]2018 data
science bowl

   code is in the samples/nucleus directory.

   [127]nucleus segmentation

[128]detection and segmentation for surgery robots by the nus control &
mechatronics lab.

   [129]surgery robot detection and segmentation

[130]reconstructing 3d buildings from aerial lidar

   a proof of concept project by [131]esri, in collaboration with nvidia
   and miami-dade county. along with a great write up and code by dmitry
   kudinov, daniel hedges, and omar maher. [132]3d building reconstruction

[133]usiigaci: label-free cell tracking in phase contrast microscopy

   a project from japan to automatically track cells in a microfluidics
   platform. paper is pending, but the source code is released.

[134]characterization of arctic ice-wedge polygons in very high spatial
resolution aerial imagery

   research project to understand the complex processes between
   degradations in the arctic and climate change. by weixing zhang, chandi
   witharana, anna liljedahl, and mikhail kanevskiy. [135]image

[136]mask-rid98 shiny

   a id161 class project by hu shiyu to apply the color pop
   effect on people with beautiful results.

[137]mapping challenge: convert satellite imagery to maps for use by
humanitarian organisations.

   [138]mapping challenge

[139]grass gis addon to generate vector masks from geospatial imagery. based
on a [140]master's thesis by ond  ej pe  ek.

   [141]grass gis image

     *    2019 github, inc.
     * [142]terms
     * [143]privacy
     * [144]security
     * [145]status
     * [146]help

     * [147]contact github
     * [148]pricing
     * [149]api
     * [150]training
     * [151]blog
     * [152]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [153]reload to refresh your
   session. you signed out in another tab or window. [154]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/matterport/mask_rid98/commits/master.atom
   3. https://github.com/matterport/mask_rid98#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/matterport/mask_rid98
  32. https://github.com/join
  33. https://github.com/login?return_to=/matterport/mask_rid98
  34. https://github.com/matterport/mask_rid98/watchers
  35. https://github.com/login?return_to=/matterport/mask_rid98
  36. https://github.com/matterport/mask_rid98/stargazers
  37. https://github.com/login?return_to=/matterport/mask_rid98
  38. https://github.com/matterport/mask_rid98/network/members
  39. https://github.com/matterport
  40. https://github.com/matterport/mask_rid98
  41. https://github.com/matterport/mask_rid98
  42. https://github.com/matterport/mask_rid98/issues
  43. https://github.com/matterport/mask_rid98/pulls
  44. https://github.com/matterport/mask_rid98/projects
  45. https://github.com/matterport/mask_rid98/wiki
  46. https://github.com/matterport/mask_rid98/pulse
  47. https://github.com/join?source=prompt-code
  48. https://github.com/topics/mask-rid98
  49. https://github.com/topics/tensorflow
  50. https://github.com/topics/object-detection
  51. https://github.com/topics/instance-segmentation
  52. https://github.com/topics/keras
  53. https://github.com/matterport/mask_rid98/commits/master
  54. https://github.com/matterport/mask_rid98/branches
  55. https://github.com/matterport/mask_rid98/releases
  56. https://github.com/matterport/mask_rid98/graphs/contributors
  57. https://github.com/matterport/mask_rid98/blob/master/license
  58. https://github.com/matterport/mask_rid98/search?l=python
  59. https://github.com/matterport/mask_rid98/find/master
  60. https://github.com/matterport/mask_rid98/archive/master.zip
  61. https://github.com/login?return_to=https://github.com/matterport/mask_rid98
  62. https://github.com/join?return_to=/matterport/mask_rid98
  63. https://desktop.github.com/
  64. https://desktop.github.com/
  65. https://developer.apple.com/xcode/
  66. https://visualstudio.github.com/
  67. https://github.com/cclauss
  68. https://github.com/waleedka
  69. https://github.com/matterport/mask_rid98/commits?author=cclauss
  70. https://github.com/matterport/mask_rid98/commits?author=waleedka
  71. https://github.com/matterport/mask_rid98/commit/3deaec5d902d16e1daf56b62d5971d428dc920bc
  72. http://flake8.pycqa.org/
  73. https://github.com/matterport/mask_rid98
  74. http://flake8.pycqa.org/
  75. https://github.com/matterport/mask_rid98/commit/3deaec5d902d16e1daf56b62d5971d428dc920bc
  76. https://github.com/matterport/mask_rid98/tree/3deaec5d902d16e1daf56b62d5971d428dc920bc
  77. https://github.com/matterport/mask_rid98/tree/master/assets
  78. https://github.com/matterport/mask_rid98/tree/master/images
  79. https://github.com/matterport/mask_rid98/commit/2368d206f079adf1bfe7ccb23824d5d18c22e031
  80. https://github.com/matterport/mask_rid98/tree/master/mrid98
  81. https://github.com/matterport/mask_rid98/commit/3deaec5d902d16e1daf56b62d5971d428dc920bc
  82. https://github.com/matterport/mask_rid98/tree/master/samples
  83. https://github.com/matterport/mask_rid98/commit/2b84add8706c1e187f28aa26343ced490fda5a8a
  84. https://github.com/matterport/mask_rid98/blob/master/.gitignore
  85. https://github.com/matterport/mask_rid98/blob/master/license
  86. https://github.com/matterport/mask_rid98/blob/master/manifest.in
  87. https://github.com/matterport/mask_rid98/blob/master/readme.md
  88. https://github.com/matterport/mask_rid98/commit/4e9d69823467b3a1d15d553baa9450d6f3f76140
  89. https://github.com/matterport/mask_rid98/blob/master/requirements.txt
  90. https://github.com/matterport/mask_rid98/commit/8c47ad60ed0efb2019935f58a2763028a5740abd
  91. https://github.com/matterport/mask_rid98/blob/master/setup.id18
  92. https://github.com/matterport/mask_rid98/blob/master/setup.py
  93. https://github.com/matterport/mask_rid98/commit/134b95b820c21813cc065a6bcbe2f4cf5f348e46
  94. https://arxiv.org/abs/1703.06870
  95. https://github.com/matterport/mask_rid98/blob/master/assets/street.png
  96. https://matterport.com/blog/2017/09/20/announcing-matterport3d-research-dataset/
  97. https://matterport.com/gallery/
  98. https://github.com/matterport/mask_rid98/blob/master/samples/demo.ipynb
  99. https://github.com/matterport/mask_rid98/blob/master/samples/shapes/train_shapes.ipynb
 100. https://github.com/matterport/mask_rid98/blob/master/mrid98/model.py
 101. https://github.com/matterport/mask_rid98/blob/master/mrid98/utils.py
 102. https://github.com/matterport/mask_rid98/blob/master/mrid98/config.py
 103. https://github.com/matterport/mask_rid98/blob/master/samples/coco/inspect_data.ipynb
 104. https://github.com/matterport/mask_rid98/blob/master/samples/coco/inspect_model.ipynb
 105. https://github.com/matterport/mask_rid98/blob/master/samples/coco/inspect_weights.ipynb
 106. https://github.com/matterport/mask_rid98/blob/master/samples/coco/inspect_data.ipynb
 107. https://github.com/matterport/mask_rid98/blob/master/samples/coco/inspect_model.ipynb
 108. https://github.com/matterport/mask_rid98/blob/master/samples/coco/inspect_weights.ipynb
 109. https://engineering.matterport.com/splash-of-color-instance-segmentation-with-mask-r-id98-and-tensorflow-7c761e238b46
 110. https://matterport.com/careers/
 111. http://cocodataset.org/#home
 112. https://dl.dropboxusercontent.com/s/o43o90bna78omob/instances_minival2014.json.zip?dl=0
 113. https://dl.dropboxusercontent.com/s/s3tw5zcg7395368/instances_valminusminival2014.json.zip?dl=0
 114. https://github.com/rbgirshick/py-faster-rid98/blob/master/data/readme.md
 115. https://hub.docker.com/r/waleedka/modern-deep-learning/
 116. https://github.com/matterport/mask_rid98/releases
 117. https://github.com/waleedka/coco
 118. https://github.com/philferriere/cocoapi
 119. https://www.youtube.com/watch?v=oot3uixzzte
 120. https://www.youtube.com/watch?v=oot3uixzzte
 121. https://github.com/jremillard/images-to-osm
 122. https://github.com/matterport/mask_rid98/blob/master/assets/images_to_osm.png
 123. https://engineering.matterport.com/splash-of-color-instance-segmentation-with-mask-r-id98-and-tensorflow-7c761e238b46
 124. https://github.com/matterport/mask_rid98/blob/master/assets/balloon_color_splash.gif
 125. https://github.com/matterport/mask_rid98/blob/master/samples/nucleus
 126. https://www.kaggle.com/c/data-science-bowl-2018
 127. https://github.com/matterport/mask_rid98/blob/master/assets/nucleus_segmentation.png
 128. https://github.com/suyegit/surgery-robot-detection-segmentation
 129. https://github.com/suyegit/surgery-robot-detection-segmentation/raw/master/assets/video.gif
 130. https://medium.com/geoai/reconstructing-3d-buildings-from-aerial-lidar-with-ai-details-6a81cb3079c0
 131. https://www.esri.com/
 132. https://github.com/matterport/mask_rid98/blob/master/assets/project_3dbuildings.png
 133. https://github.com/oist/usiigaci
 134. http://www.mdpi.com/2072-4292/10/9/1487
 135. https://github.com/matterport/mask_rid98/blob/master/assets/project_ice_wedge_polygons.png
 136. https://github.com/huuuuusy/mask-rid98-shiny
 137. https://github.com/crowdai/crowdai-mapping-challenge-mask-rid98
 138. https://github.com/matterport/mask_rid98/blob/master/assets/mapping_challenge.png
 139. https://github.com/ctu-geoforall-lab/i.ann.maskrid98
 140. https://github.com/ctu-geoforall-lab-projects/dp-pesek-2018
 141. https://github.com/matterport/mask_rid98/blob/master/assets/project_grass_gis.png
 142. https://github.com/site/terms
 143. https://github.com/site/privacy
 144. https://github.com/security
 145. https://githubstatus.com/
 146. https://help.github.com/
 147. https://github.com/contact
 148. https://github.com/pricing
 149. https://developer.github.com/
 150. https://training.github.com/
 151. https://github.blog/
 152. https://github.com/about
 153. https://github.com/matterport/mask_rid98
 154. https://github.com/matterport/mask_rid98

   hidden links:
 156. https://github.com/
 157. https://github.com/matterport/mask_rid98
 158. https://github.com/matterport/mask_rid98
 159. https://github.com/matterport/mask_rid98
 160. https://help.github.com/articles/which-remote-url-should-i-use
 161. https://github.com/matterport/mask_rid98#mask-r-id98-for-object-detection-and-segmentation
 162. https://github.com/matterport/mask_rid98#getting-started
 163. https://github.com/matterport/mask_rid98#step-by-step-detection
 164. https://github.com/matterport/mask_rid98#1-anchor-sorting-and-filtering
 165. https://github.com/matterport/mask_rid98/blob/master/assets/detection_anchors.png
 166. https://github.com/matterport/mask_rid98#2-bounding-box-refinement
 167. https://github.com/matterport/mask_rid98/blob/master/assets/detection_refinement.png
 168. https://github.com/matterport/mask_rid98#3-mask-generation
 169. https://github.com/matterport/mask_rid98/blob/master/assets/detection_masks.png
 170. https://github.com/matterport/mask_rid98#4layer-activations
 171. https://github.com/matterport/mask_rid98/blob/master/assets/detection_activations.png
 172. https://github.com/matterport/mask_rid98#5-weight-histograms
 173. https://github.com/matterport/mask_rid98/blob/master/assets/detection_histograms.png
 174. https://github.com/matterport/mask_rid98#6-logging-to-tensorboard
 175. https://github.com/matterport/mask_rid98/blob/master/assets/detection_tensorboard.png
 176. https://github.com/matterport/mask_rid98#6-composing-the-different-pieces-into-a-final-result
 177. https://github.com/matterport/mask_rid98/blob/master/assets/detection_final.png
 178. https://github.com/matterport/mask_rid98#training-on-ms-coco
 179. https://github.com/matterport/mask_rid98#training-on-your-own-dataset
 180. https://github.com/matterport/mask_rid98#differences-from-the-official-paper
 181. https://github.com/matterport/mask_rid98#citation
 182. https://github.com/matterport/mask_rid98#contributing
 183. https://github.com/matterport/mask_rid98#requirements
 184. https://github.com/matterport/mask_rid98#ms-coco-requirements
 185. https://github.com/matterport/mask_rid98#installation
 186. https://github.com/matterport/mask_rid98#projects-using-this-model
 187. https://github.com/matterport/mask_rid98#4k-video-demo-by-karol-majek
 188. https://github.com/matterport/mask_rid98#images-to-osm-improve-openstreetmap-by-adding-baseball-soccer-tennis-football-and-basketball-fields
 189. https://github.com/matterport/mask_rid98#splash-of-color-a-blog-post-explaining-how-to-train-this-model-from-scratch-and-use-it-to-implement-a-color-splash-effect
 190. https://github.com/matterport/mask_rid98#segmenting-nuclei-in-microscopy-images-built-for-the-2018-data-science-bowl
 191. https://github.com/matterport/mask_rid98#detection-and-segmentation-for-surgery-robots-by-the-nus-control--mechatronics-lab
 192. https://github.com/matterport/mask_rid98#reconstructing-3d-buildings-from-aerial-lidar
 193. https://github.com/matterport/mask_rid98#usiigaci-label-free-cell-tracking-in-phase-contrast-microscopy
 194. https://github.com/matterport/mask_rid98/blob/master/assets/project_usiigaci1.gif
 195. https://github.com/matterport/mask_rid98/blob/master/assets/project_usiigaci2.gif
 196. https://github.com/matterport/mask_rid98#characterization-of-arctic-ice-wedge-polygons-in-very-high-spatial-resolution-aerial-imagery
 197. https://github.com/matterport/mask_rid98#mask-rid98-shiny
 198. https://github.com/matterport/mask_rid98/blob/master/assets/project_shiny1.jpg
 199. https://github.com/matterport/mask_rid98#mapping-challenge-convert-satellite-imagery-to-maps-for-use-by-humanitarian-organisations
 200. https://github.com/matterport/mask_rid98#grass-gis-addon-to-generate-vector-masks-from-geospatial-imagery-based-on-a-masters-thesis-by-ond%c5%99ej-pe%c5%a1ek
 201. https://github.com/
