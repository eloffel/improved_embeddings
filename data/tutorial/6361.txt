   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]freecodecamp.org
     * [9]dev
     * [10]learn to code for free
     __________________________________________________________________

day 22: how to build an ai game bot using openai gym and universe

   [11]go to the profile of harini janakiraman
   [12]harini janakiraman (button) blockedunblock (button) followfollowing
   aug 10, 2017
   [1*hyjwshnsorwjngvh5ukx8g.jpeg]
   neon race flash game environment of universe

   let   s face it, ai is everywhere. a [13]face-off battle is unfolding
   between elon musk and mark zuckerberg on the future of ai. there are
   some that demonize it. and some whose utopian views claim that ai could
   almost be god-like in helping humanity. whichever side your views tilt,
   ai is here to stay.

        with artificial intelligence, we are summoning the
     demon.            elon musk

        fearing a rise of killer robots is like worrying about
     overpopulation on mars.            andrew ng

   if you   re excited to dive right in and tinker with ai, then games are a
   great place to start. they have been the go-to testbed for ai. but
   before jumping in, here   s a little bit of history on how game
   programming has evolved through time.

the history of game programming

   game programmers used to use heuristic if-then-else type decisions to
   make educated guesses. we saw this in the earliest arcade videos games
   such as pong and pacman. this trend was the norm for a very long time.
   but game developers can only predict so many scenarios and edge cases
   so your bot doesn   t run in circles!

   game developers then tried to mimic how humans would play a game, and
   modeled human intelligence in a game bot.

   the team at deepmind did this by generalizing and modeling intelligence
   to solve any atari game thrown at it. the game bot used deep learning
   neural networks that would have no game-specific knowledge. they beat
   the game based on the pixels they saw on screen and their knowledge of
   the game controls. however, parts of deepmind are still not
   open-sourced as google uses it to beat competition.

the democratization of ai

   to avoid concentrating the incredible power of ai in the hands of a
   few, elon musk founded [14]openai. it seeks to democratize ai by making
   it accessible to all. today we shall explore openai gym and the
   recently released universe, which is built on top of gym.

   [15]openai gym provides a simple interface for interacting with and
   managing any arbitrary dynamic environment. [16]openai universe is a
   platform that lets you build a bot and test it out.

   there are thousands of environments. they range from classic atari
   games, minecraft, and grand theft auto, to [17]protein fold simulations
   that can cure cancer. you can create a bot and run it in any
   environment using only a few lines of python code. this is too awesome
   not to try!

project (1 hour)

   we are going to build an ai game bot that uses the    reinforcement
   learning    technique. i   ll explain that later. it will autonomously play
   against and beat the atari game neon race car (you can select any game
   you want). we will build this game bot using openai   s gym and universe
   libraries.

step 1: installation

   ensure you have python installed, or install it using homebrew. you can
   download a dedicated python ide like pycharm or ipython notebook. i
   like to keep it simple and use sublime. finally, install gym, universe
   and other required libraries using pip.
// install python using brew
brew install python3
// install the required openai libraries
pip3 install gym
pip3 install numpy incremental
brew install golang libjpeg-turbo
pip install universe

   everything in universe (the environments) runs as containers inside
   docker. in case you don   t have it already, install and run docker from
   [18]here.

step 2: code the game bot

   the game bot is coded in python, so we start by importing the only two
   dependencies needed: gym and universe.
import gym
import universe

   for this game bot, let   s use my favorite childhood game, neon race
   cars, as the test environment. you can find a complete list of other
   environment/games you can choose from [19]here.

   universe lets you run as many environments as you want in parallel. but
   for this project, we will use only one.
env = gym.make(   flashgames.neonrace-v0   )
env.configure(remotes=1) # creates a local docker container

id23

   now we add the game bot logic that uses the id23
   technique. this technique observes the game   s previous state and reward
   (such as the pixels seen on the screen or the game score). it then
   comes up with an action to perform on the environment.

   the goal is to make its next observation better (in our case         to
   maximize the game score). this action is chosen and performed by an
   agent (game bot) with the intention of maximizing the score. it   s then
   applied on the environment. the environment records the resulting state
   and reward based on whether the action was beneficial or not (did it
   win the game?).
   [1*hfuwj7cella57kmxdqajrw.jpeg]

   now we can retrieve the list of observations for each environment
   initialized using the env.reset() method.
observation_n = env.reset()

   the observation here is an environment-specific object. it represents
   what was observed, such as the raw pixel data on the screen or the game
   status/score.

   the next step is to create a game agent using an infinite loop, which
   continuously performs some action based on the observation. in our bot,
   let   s define a single action of repeatedly pressing the up arrow (silly
   bot! feel free to evolve it to a complex one   ). action here is defined
   by the event type (keyevent), the control key (up arrow), and setting
   it to true for all observation that the agent sees.
while true:
action_n = [[('keyevent', 'arrowup', true)] for ob in observation_n]

   we then use the env.step() method to use the action to move forward one
   time step. this is a very basic implementation of reinforced learning.
 observation_n, reward_n, done_n, info = env.step(action_n)

   the step method here returns four variables:
    1. observation_n: observations of the environment
    2. reward_n: if your action was beneficial or not: +1/-1
    3. done_n: indicates if the game is over or not: yes/no
    4. info: additional info such as performance and latency for debugging
       purposes

   you can run this action simultaneously for all the environments in
   which you   re training your bot. use the env.render() method to start
   the bot.
env.render()

   now you have the game bot ready to compete with the environment. the
   complete code for this basic bot as well as an advanced version is
   available in my github repo [20]here.

step 3: run the game bot

   now for the fun part: ensure docker is running and run the bot. see it
   in action beating other cars or failing to do so. if it fails, keep
   tweaking your bot to make it beat intelligence!
python [21]gamebot.py

   [1*lvfxdy6rwzz4sidchqeu1q.jpeg]
   [1*yo4h6hltowwmvixldkn6ia.gif]
   crash and burrrn! #basic

   keep tinkering with ai and eventually you can unlock god mode!
   #100daysofcode
   [1*iy0z2-v8ateyi0muq49loa.jpeg]

   if you enjoyed this, please clap      so others can see it as well! follow
   me on twitter [22]@harinilabs or [23]medium to get the latest updates
   on other stories or just to say hi :)

   ps: sign up for my newsletter [24]here to be the first to get fresh new
   content and it   s filled with a dose of inspiration from the world of
   #[25]womenintech and yes men can signup too!

     * [26]artificial intelligence
     * [27]bots
     * [28]python
     * [29]programming
     * [30]technology

   (button)
   (button)
   (button) 1.95k claps
   (button) (button) (button) 20 (button) (button)

     (button) blockedunblock (button) followfollowing
   [31]go to the profile of harini janakiraman

[32]harini janakiraman

   vp - data engineering. started #100daysofcode and #womenintech
   newsletter, signup here: harinilabs.com/womenintech

     (button) follow
   [33]freecodecamp.org

[34]freecodecamp.org

   stories worth reading about programming and technology from our open
   source community.

     * (button)
       (button) 1.95k
     * (button)
     *
     *

   [35]freecodecamp.org
   never miss a story from freecodecamp.org, when you sign up for medium.
   [36]learn more
   never miss a story from freecodecamp.org
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://medium.freecodecamp.org/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/f2eb9bfbb40a
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://medium.freecodecamp.org/how-to-build-an-ai-game-bot-using-openai-gym-and-universe-f2eb9bfbb40a&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://medium.freecodecamp.org/how-to-build-an-ai-game-bot-using-openai-gym-and-universe-f2eb9bfbb40a&source=--------------------------nav_reg&operation=register
   8. https://medium.freecodecamp.org/?source=logo-lo_gqugh8h1oqh9---336d898217ee
   9. https://medium.freecodecamp.org/tagged/web-development
  10. https://www.freecodecamp.com/?ref=mn
  11. https://medium.freecodecamp.org/@harinilabs?source=post_header_lockup
  12. https://medium.freecodecamp.org/@harinilabs
  13. https://www.recode.net/2017/7/25/16026184/mark-zuckerberg-artificial-intelligence-elon-musk-ai-argument-twitter
  14. https://openai.com/
  15. https://gym.openai.com/
  16. https://universe.openai.com/
  17. https://fold.it/portal/
  18. https://docs.docker.com/docker-for-mac/
  19. https://universe.openai.com/envs
  20. https://github.com/harinij/100daysofcode/tree/master/day 022 - ai gamebot using universe
  21. http://gamebot.py/
  22. https://twitter.com/harinilabs
  23. https://medium.com/@harinilabs
  24. http://harinilabs.com/womenintech.html
  25. http://harinilabs.com/womenintech.html
  26. https://medium.freecodecamp.org/tagged/artificial-intelligence?source=post
  27. https://medium.freecodecamp.org/tagged/bots?source=post
  28. https://medium.freecodecamp.org/tagged/python?source=post
  29. https://medium.freecodecamp.org/tagged/programming?source=post
  30. https://medium.freecodecamp.org/tagged/technology?source=post
  31. https://medium.freecodecamp.org/@harinilabs?source=footer_card
  32. https://medium.freecodecamp.org/@harinilabs
  33. https://medium.freecodecamp.org/?source=footer_card
  34. https://medium.freecodecamp.org/?source=footer_card
  35. https://medium.freecodecamp.org/
  36. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  38. https://medium.com/p/f2eb9bfbb40a/share/twitter
  39. https://medium.com/p/f2eb9bfbb40a/share/facebook
  40. https://medium.com/p/f2eb9bfbb40a/share/twitter
  41. https://medium.com/p/f2eb9bfbb40a/share/facebook
