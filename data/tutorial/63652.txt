   iframe: [1]//www.googletagmanager.com/ns.html?id=gtm-pzrg3f

   [2]jump to navigation

   [3]home
   developer zone
     * [4]            
     * [5]english
     * [6]espa  ol
     * [7]portugu  s
     * [8]              

   [9]sign in [10]signup
   [11]support
     * [12]site to search:
     *
     * [13]intel   dz
     * [14]intel.com

   _______________ (search)
   _______________
   intel   ai developer program

documentation

     * [15]home
     * [16]technologies
          + [17]frameworks
               o [18]bigdl
               o [19]caffe*
               o [20]chainer
               o [21]pytorch
               o [22]tensorflow*
               o [23]theano
               o [24]more...
          + [25]tools
               o [26]ngraph library
               o [27]intel   distribution of openvino    toolkit
               o [28]intel   data analytics acceleration library
               o [29]intel   distribution for python*
               o [30]intel   math kernel library for deep neural networks
               o [31]plaidml
               o [32]more...
          + [33]hardware
               o [34]ai on the pc
               o [35]intel   neural compute stick 2
               o [36]boards and development kits
          + [37]development cluster
     * [38]training
          + [39]courses
          + [40]events
          + [41]webinars
     * [42]library
          + [43]get started
          + [44]code samples
          + [45]documentation
          + [46]intel publications
          + [47]community publications
          + [48]ai for healthcare
          + [49]poster presentations
          + [50]success stories
     * [51]university resources
          + [52]request development cluster for classrooms
          + [53]curriculum for professors
     * [54]community
          + [55]member programs
               o [56]student ambassadors
               o [57]innovators
          + [58]community projects
          + [59]join
     * [60]support

[61]all developer programs

     * [62]            
     * [63]english
     * [64]espa  ol
     * [65]portugu  s
     * [66]              

   [67]sign in [68]signup
   [69]support
     * [70]site to search:
     *
     * [71]intel   dz
     * [72]intel.com

   _______________ (search)
   _______________
     * [73]share
     * [74]tweet
     * [75]share
     * [76]send

   share

face it     the artificially intelligent hairstylist

   by [77]pallab p., published on september 13, 2017
   translating...[translate__________]
   this is a computer translation of the original content. it is provided
   for general information only and should not be relied upon as complete
   or accurate.
   sorry, we can't translate this content right now, please try again
   later.

abstract

   face it is a mobile application that uses id161 to acquire
   data about a user   s facial structure as well as machine learning to
   determine the user   s face shape. this information is then combined with
   manually inputted information to give the user a personalized set of
   hair and beard styles that are guaranteed to make the user look his
   best. a personalized list of tips are also generated for the user to
   take into account when getting a haircut.



1. introduction

   to create this application, various procedures, tools and coding
   languages were utilized.

                                 procedures
     * id161 with haar-cascade files to detect a person   s face
     * machine learning, specifically using a convolutional neural network
            and id21 to identify a person   s face shape
      * a preference sorting algorithm to determine what styles look best
                       on a person based on collected data

                             programs/tools used
                                * ubuntu v17.04
                              * android studios*
                    * intel   optimization for tensorflow*
                                   * opencv

                            programming languages
     * java
     * python



2. id161

   for this application we used intel   s opencv library along with haar
   cascade files to detect a person   s face.

   haar-like features are digital features used in object recognition.
   they owe their name to their intuitive similarity with haar wavelets
   and were used in the first real-time face detector. [78][1] a large
   amount of these haar-like features are put together to determine an
   object with sufficient accuracy and these files are called haar-cascade
   classifier files. these methods were used and tested in the viola-jones
   id164 framework. [79][2]

   in particular the frontal face detection file is being used to detect
   the user   s face. this file, along with various other haar-cascade files
   can be found here: [80]http://alereimondo.no-ip.org/opencv/34.

   this library and file was incorporated into our application to ensure
   that the user   s face is detected since the main objective is to
   determine the user   s face shape.

    figure 1: testing out the opencv library as well as the frontal face
                  haar-cascade classifer file in real-time.


   opencv was integrated into android   s camera2 api in order for this
   real-time processing to occur. an android device with an api level of
   21 or higher is required to run tests and use the application because
   the camera2 api can only be used by phones of that version or greater.




3. machine learning

3.1 convolutional neural networks

   for the facial recognition aspect of our application, the process of
   using machine learning with a convolutional neural network(id98) was
   used.

   id98   s are very commonly associated with image recognition and they can
   be trained with little difficult. the accuracy of a trained id98 is very
   high when it comes to detecting a correct image.

   id98 architectures are inspired by biological processes and include
   variations of multilayer receptors that result in minimal amounts of
   preprocessing. [81][3] in a id98, there are multiple layers that each
   have distinct functions to help us recognize an image. these layers
   include a convolutional layer, pooling layer, rectified linear unit
   (relu) layer, fully connected layer and loss layer.

   figure 2: a diagram of a convolutional neural network in action[82][4]



     * the convolutional layer acts as the core of any id98. the network of
       a id98 develops a 2-dimensional activation map that detects the
       special position of a feature at all the given spatial positions
       which are set by the parameters.
     * the pooling layer acts as a form of down sampling. max pooling is
       the most common implementation of pooling. max pooling is ideal
       when dealing with smaller data sets which is why we are choosing to
       use it.
     * the relu layer is a layer of neurons which applies an activation
       function to increase the nonlinear properties of the decision
       function and of the overall network without affecting the receptive
       fields of the convolutional layer itself.
     * the fully connected layer, which occurs after several convolutional
       and max pooling layers, does the high-level reasoning in the neural
       network. neurons in this layer have connections to all the
       activations amongst the precious layers. after, the activations for
       the fully connected layer are computed by a id127
       and a bias offset.
     * the loss layer specifies how the network training penalizes the
       deviation between the predicted and true layers. softmax loss is
       the best for this application as this is ideal for detecting a
       single class in a set of mutually exclusive classes.



3.2 id21 with tensorflow*

   the layers of a id98 can be connected in various different orders and
   variations. the order depends on what type of data you are using and
   what kind of results you are trying to get back.

   there are various well-known id98 models that have been created and put
   out into the public for research and use. these models include the
   alexnet[83][5] which uses two gpu   s to train the model and various
   separate and combined layers. this model was entered in the id163
   large scale visual recognition competition [84][6] in 2012 and won.
   another example is the vggnet[85][7] that is a very deep net and uses
   many convolutional layers in its architecture.

   a very popular id98 architecture for image classification is the
   inception v3  or googlenet model created by google. this model was
   entered in the id163 large scale visual recognition competition in
   2014 and won.

     figure 3: a diagram of google   s inception v3 convolutional neural
                            network model[86][8]



   as you can see, there are various convolutional, pooling, relu, fully
   connected and loss layers being used in a specific order which will
   help output extremely accurate results when trying to classify an
   image.

   this model is so well put together that many developers use a method
   called id21 with the inception v3 model. transfer
   learning is a technique that shortens the process of training a model
   from scratch by taking a fully-trained model from a set of categories
   like id163 and re-training it with the existing weights but for new
   classes.

    figure 4: diagram showing the difference between traditional machine
                    learning and id21[87][9]



   to use the process of id21 for the application, tensorflow
   was used along with a docker image. this image had all the repositories
   needed for the process. then the inception v3 re-train model was loaded
   on to tensorflow where we were able to re-train it with the dataset
   needed for our application to recognize face shapes.

      figure 5: how the inception v3 model looks during the process of
                          id21[88][10]


   during the process of id21, only the last layer of the
   pre-trained model is dissected and modified. this is where the dataset
   for our application was inputted to be trained. the model uses all the
   previous knowledge it has acquired from the previous data to train the
   new data as accurately as possible.

   this is the beauty of id21 and this is why using this time
   can save so much time and extremely accurate. through a re-train
   algorithm the images within the dataset were passed through the last
   layer of the model and the model was accurately re-trained.



3.3 dataset

   there are many popular datasets that were created and collected by many
   individuals to help further the advancement and research of
   convolutional neural networks. one common dataset used is the mnist
   dataset for recognizing handwritten digits.

    figure 6: example of the mnist dataset that is used for training and
                  recognizing hand written digits. [89][11]


   this dataset consists of thousands of images of handwritten digits and
   people can uses this dataset to train and test the accuracies of their
   own convolutional neural networks. another popular dataset is the
   cifar-10[90][12] dataset that consists of thousands of images of 10
   different objects/animals: an airplane, an automobile, a bird, a cat, a
   deer, a dog, a frog, a horse, a ship and a truck.

   it is good to have large amounts of data but it is very hard to collect
   large amounts of data so that is why many collections are already made
   and ready to use for practice and training.

   the objective of our id98 model was to recognize a user   s face shape and
   in order for it to do so, it was fed various images of people with
   different face shapes.

   the face shapes were categorized into six different shapes: square,
   round, oval, oblong, diamond and triangular. a folder was created for
   each face shape and each folder contained various images of people with
   that certain face shape.

   figure 7: example of the contents inside the folder for the square face
                                    shape


   these images were gathered from various reliable articles about face
   shapes and hairstyles. we made sure to collect as accurate data as
   possible to get the best results. in total we had approximately 100
   images of people with each type of face shape within each folder.

     figure 8: example of a single image saved in the square face shape
                               folder.[91][13]


   these images were fed and trained through the model for 4000 iterations
   (steps) for get maximum accuracy.

   while these images were being trained various bottlenecks were created.
   bottlenecks contain the information about every image after it has been
   trained through the model various amounts of times.

      figure 9: various bottlenecks being created while re-training the
                              inception v3 id98


   a few other files are also created including a retrained graph that has
   all the new information that you will need if you want to now recognize
   the images that you have just trained the model on.

   this file is fine to use if they are to be used to recognize images on
   a computer but if we want to use this file on a mobile device then we
   would have to compress it but have it contain all the information
   necessary for it to still be accurate.

   in order to do this we have to optimize the file to fit the size that
   we need. to do this we modify the following features of the file:
    1. we remove all nodes that aren't needed for a given set of input and
       output nodes
    2. we merge explicit batch id172 operations

   after this we are left with two main files that we will load into
   android studio to use with our application.

        figure 10: files that need to be imported into android studio

   these files consist of the information needed to identify an image that
   the model has been trained to recognize once it is seen through a
   camera.


3.4 accuracy

   the accuracy of the retrained model is very important since the face
   shape being determined should be as accurate as possible for the user.

   to have a high level of accuracy we had to make sure that various
   factors were taken into account. we had to make sure that we had a
   sufficient amount of images for the model to be trained on. we also had
   to make sure that the model trained on the images a sufficient amount
   of iterations.

   for the first few trials we were getting a lot of mixed results and the
   accuracy for a predicted face shape was all over the place. for one
   image we were getting a 82% accuracy while for another image we were
   getting a 62% accuracy. this was obviously not good and we wanted to
   have much more accurate and precise data.

    figure 11: an example of a low accuracy level that we were receiving
                          with our initial dataset.


   at first we were using approximately 50 images of each face shape but
   to improve our low accuracy we increased this number to approximately
   100 images of each face shape. these images were carefully hand-picked
   to fit the needs of our application and face shape recognition
   software. we wanted to reach a benchmark average accuracy of
   approximately 90%.

   figure 12: an example of a high accuracy level we were receiving after
                    the changes we made with the dataset.


   after these adjustments we saw a huge difference with our accuracy
   level and reached the benchmark we were aiming for. when it came time
   to compress the files necessary for the face shape detection software
   to work, we made sure that the accuracy level was not affected.

   for ease of use by the user, after testing the accuracy levels of our
   application, we adjusted the code to output the highest percentage face
   shape that it detected in a simple and easy to read sentence rather
   than having various percentages appearing on the screen.


4. application functionality

4.1 user interface

   the user interface of the application consists of three main screens:
    1.  the face detection screen with the front-side camera. this camera
       screen will appear first so that the user can figure out his face
       shape right away with no hesitation. after the face shape detector
       has figured out the user   s face shape, the user can click on the
          preferences    button to go to the next screen.
    2. the next screen is the preferences screen where the user inputs
       information about himself. the preference screen will ask the user
       to input certain characteristics about himself including the user   s
       face shape that he just discovered through the first screen
       (square, round, oval, oblong, diamond or triangular), the user   s
       hair texture (straight, wavy or coiled), the user   s hair thickness
       (thick or thin), if the user has facial hair (yes or no), the acne
       level of the user (none, moderate, excessive or prefer not to
       answer), and the lifestyle of the user (business, athlete  or
       student). after the user has selected all of his preferences he can
       click on the    get hairstyles!    button to go to the final screen.
    3. the final output screen is where a list of recommended hair/ beard
       styles along with tips the user can use when getting a haircut will
       be presented. the preferences that the user selects will go through
       a sorting algorithm that was created for this application.
       afterwards, the user will be able to swipe through the final
       recommendation screen and be able to choose from various hair/beard
       styles. an image will complement each style so the user has a
       better idea of how the style looks. also a list of tips will be
       generated so that the user will know what to say to his barber when
       getting a haircut.

     figure 13: this is a display of all the screens of the application.
    from left to right: face shape detection screen, preferences screen,
   final recommendation screen with tips that the user can swipe through.

   the application was meant to have a very simplistic design so we chose
   very basic complementary colors and a simple logo that got the point of
   the application across. to integrate our ideas of how the application
   should look into android studio we made sure to create a .png file of
   our logo and to take down the hexcolor code of the colors that we
   wanted to use. once we had those, we used android studio   s easy to use
   user interface creator and added a layer for the toolbar and a layer
   for the logo.





4.2 preference sorting algorithm

   the preference screen was organized with six different spinners, one
   for every preference. each option for each preference was linked to a
   specific array full of various different hair/beard styles that fit
   that one preference.

     figure 14: snippet of the code used to assign each option of every
                     preference an array of hairstyles.


   these styles were categorized by doing extensive research on what
   styles fit every option within each preference. then these arrays were
   sorted to find the hairstyles that were in common with every option the
   user chose.

   for example, let   s say the user has a square face shape and straight
   hair. the hair styles that look good with a square face shape may be a
   fade, a combover and a crew cut. these three hairstyles would be put
   into an array for the square face shape option. the hairstyles that
   look good with straight hair may be a combover, a crew cut and a side
   part.. these three hairstyles would be put into an array for the
   straight hair option. now these two arrays would be compared and
   whatever hairstyles the two arrays have in common would be placed into
   a new and final array with the personalized hairstyles that look good
   for the user based on both the face shape and hair type preferences. in
   this case, the final array would consist of  combover and a crew cut
   since these are the two hairstyles that both preferences had in common.
   these hairstyles would then be outputted and recommended to the user.

      figure 15: snippet of the code used to compare the six different
    preference arrays so that one final personalized array of hairstyles
                               can be formed.


   once the final list of hairstyles is created, an array of images is
   created to match the same hairstyles in the final list and this array
   of images is used to create a gallery of personalized hairstyles that
   the user can swipe through and see what he likes and what he doesn   t
   like.

   in addition, a list of tips are outputted for the user to view and take
   into consideration. these tips are based on what preference the user
   selected. for example, if the user selected excessive acne, a tip may
   be to go for a long hair style to keep the acne slightly hidden. these
   tips are generated by various if-statements and outputted on the final
   screen. since this application cannot control every aspect of a user   s
   haircut we are hoping that these tips will be taken into consideration
   by the user and hopefully used when describing to the barber what type
   of haircut the user is looking for.

   figure 16: an example of how the outputted tips would look for the user
                      once he selects his preferences.



5. programs and hardware

5.1 intel optimized tensorflow

   tensorflow was a key framework that made it possible for us to train
   our model and have our application actually detect a user   s face shape.

   tensorflow was installed onto the linux operating system, ubuntu by
   following this tutorial:
   [92]https://www.tensorflow.org/install/install_linux

   intel   s tensorflow optimizations were installed by following this
   tutorial:
   [93]https://software.intel.com/en-us/articles/tensorflow-optimizations-
   on-modern-intel-architecture

   intel has optimized the tensorflow framework in various ways to help
   improve the results of training a neural network and using tensorflow
   in general. they have made many modifications to help people use cpus
   for this process through intel   s mkl (math kernal library) optimized
   operations. they have also developed a custom pool allocator and a
   faster way to perform back propagation to also help improve results.

   after all this had been installed, python was used to write commands to
   facilitate with the id21 process and to re-train the
   convolutional neural network.


5.2 android studio

   android studio is the main development kit used to create the
   application and make it come to life. since both tensorflow and android
   are run under google, they had various detailed tutorials explaining
   how to combine the trained data from tensorflow and integrate it with
   android studio. [94][14] this made the process very simple as long as
   the instructions were followed.

     figure 17: snippet of code that shows how the viewpager is used for
                       sliding through various images


   android studio also made it simple to create basic .xml files for the
   application. these .xml files were very customizable and allowed the
   original mock-ups of the application to come to life and take form.
   when creating these .xml files we were sure to click on the option to
      infer constraints.    without this option being checked,  the various
   displays such as the text-view box or the spinners would be in random
   positions when the application is fully built. also, the application
   should run very smoothly. tutorials on how to connect two activities
   together[95][15] and how to create a view-page image
   gallery[96][16] were used to help make the application easily useable
   and smooth.

   figure 18: an example of inferring constraints to make sure everything
                   appears properly during the full build.



5.3 mobile device

   a countless number of tests were required to make sure certain parts of
   the code were working whenever a new feature was added to the
   application. this tests were done through an actual android smart phone
   that was given to us by intel.

   the camera2 that is used for this application requires an android phone
   with an api level of 21 or higher or of version 5.1 or higher so we
   used a phone model with an api level of 23. though the camera was slow
   at time, the overall functionality of this device was great.

   whenever a slight modification was done to the code for this
   application, a full build and test was always done on this smartphone
   to ensure that the application was still running smoothly.

    figure 19: the android phone we used with an api level of 23. you can
        see the face it application logo in the center of the screen.




6. summary and future work

   using various procedures, programs, tools and languages, we were able
   to form an application that that uses id161 to acquire data
   about a user   s facial structure and machine learning, specifically
   id21, to detect a person   s face shape. we then put this
   information as well as user inputted information through a preference
   sorting algorithm to output a personalized gallery of hairstyles for
   the user to view and choose from as well as personalized tips the user
   can tell his barber when getting a haircut or take into consideration
   when styling or growing out his hair.

   there is always room for improvement and we definitely plan to improve
   many aspects of this application including even more accurate face
   shape detection results, an even cleaner looking user interface and
   many more hair and beard styles for the user to choose and select from.


acknowledgements

   i would like to personally thank the intel student ambassador program
   for ai for supporting us through the creation of this application and
   for the motivation to keep on adding to it. i would also like to thank
   intel for providing us with the proper hardware and software that was
   necessary for us to create and test the application.



online references

   [1]   [97]https://en.wikipedia.org/wiki/haar-like_features

   [2]   [98]https://www.cs.ubc.ca/~lowe/425/slides/13-violajones.pdf

   [3]   [99]https://en.wikipedia.org/wiki/convolutional_neural_network

   [4]   [100]https://www.mathworks.com/help/nnet/convolutional-neural-net
   works.html

   [5]   [101]https://papers.nips.cc/paper/4824-id163-classification-wi
   th-deep-convolutional-neural-networks

   [6]   [102]http://www.image-net.org/

   [7]   [103]http://www.robots.ox.ac.uk/~vgg/research/very_deep/

   [8]   [104]https://research.googleblog.com/2016/03/train-your-own-image
   -classifier-with.html

   [9]   [105]https://www.slideshare.net/hunkim/transfer-defectlearningnew
   -completed

   [10][106]https://medium.com/@vinayakvarrier/significance-of-transfer-le
   arning-in-the-domain-space-of-artificial-intelligence-1ebd7a1298f2

   [11][107]http://yann.lecun.com/exdb/mnist/

   [12][108]https://www.cs.toronto.edu/~kriz/cifar.html

   [13][109]http://shaverguru.com/finding-a-great-beard-style-for-your-fac
   e/

   [14][110]https://www.tensorflow.org/deploy/distributed

   [15][111]https://developer.android.com/training/basics/firstapp/startin
   g-activity.html

   [16][112]https://developer.android.com/training/animation/screen-slide.
   html


   read the previous [113]week 6 update or continue with the [114]week 10
   update


   for more complete information about compiler optimizations, see our
   [115]optimization notice.

1 comment

   [116]top

   [117]ellis, eric said on oct 17,2018
   [118]ellis, eric's picture

   being a gamer at heart  this was a great article.
     * [119]log in to post comments

add a comment

   [120]sign in

   have a technical question? [121]visit our forums. have site or software
   product issues? [122]contact support.

     * [123]technologies
          + [124]intel   ai devcloud
          + [125]intel   fpga
          + [126]intel   movidius    vision processing unit
          + [127]intel   neural compute stick 2
          + [128]intel   xeon   scalable processor
     * [129]connect
          + [130]community projects
          + [131]forum
          + [132]newsletter
          + [133]twitter
     * [134]related
          + [135]intel   ai builders
          + [136]ai research projects
          + [137]ai4good
          + [138]intel   ai news
          + [139]intel   ai devcon

   rate us

   [bwc_close.png]
   [140]get the newsletter
   follow us:
     * [141]facebook
     * [142]twitter
     * [143]github
     * [144]twitch
     * [145]youtube

     * [146]terms of use
     * [147]*trademarks
     * [148]privacy
     * [149]cookies
     * [150]email preferences

   [face-it-logo.jpg]

   [intel_blue.png]

references

   visible links
   1. https://www.googletagmanager.com/ns.html?id=gtm-pzrg3f
   2. https://software.intel.com/en-us/articles/face-it-the-artificially-intelligent-hairstylist#main-menu
   3. https://software.intel.com/en-us
   4. https://software.intel.com/zh-cn/articles/face-it-the-artificially-intelligent-hairstylist
   5. https://software.intel.com/en-us/articles/face-it-the-artificially-intelligent-hairstylist
   6. https://software.intel.com/es-es/articles/face-it-the-artificially-intelligent-hairstylist
   7. https://software.intel.com/pt-br/articles/face-it-the-artificially-intelligent-hairstylist
   8. https://software.intel.com/ru-ru/articles/face-it-the-artificially-intelligent-hairstylist
   9. https://software.intel.com/en-us/user/login?destination=node/744032
  10. https://software.intel.com/registration?lang=en-us
  11. https://software.intel.com/en-us/support
  12. javascript:void(0)
  13. javascript:void(0)
  14. javascript:void(0)
  15. https://software.intel.com/en-us/ai
  16. https://software.intel.com/en-us
  17. https://software.intel.com/en-us
  18. https://software.intel.com/en-us/ai/frameworks/bigdl
  19. https://software.intel.com/en-us/ai/frameworks/caffe
  20. https://software.intel.com/en-us/articles/manage-deep-learning-networks-with-intelchainer-for-intel-architecture
  21. https://www.intel.ai/investing-in-the-pytorch-developer-community/
  22. https://software.intel.com/en-us/ai/frameworks/tensorflow
  23. https://software.intel.com/en-us/ai/frameworks/theano
  24. https://software.intel.com/en-us/ai/frameworks
  25. https://software.intel.com/en-us
  26. https://www.intel.ai/ngraph/
  27. https://software.intel.com/en-us/openvino-toolkit
  28. https://software.intel.com/en-us/intel-daal
  29. https://software.intel.com/en-us/distribution-for-python
  30. https://01.org/mkl-dnn/overview
  31. https://www.intel.ai/plaidml/
  32. https://software.intel.com/en-us/ai/tools
  33. https://software.intel.com/en-us
  34. https://software.intel.com/en-us/ai/on-pc
  35. https://software.intel.com/en-us/neural-compute-stick
  36. https://www.intel.ai/hardware/
  37. https://software.intel.com/en-us/ai/devcloud
  38. https://software.intel.com/en-us
  39. https://software.intel.com/en-us/ai/courses
  40. https://software.intel.com/en-us/ai/events
  41. https://software.intel.com/en-us/ai/recorded-training
  42. https://software.intel.com/en-us
  43. https://software.intel.com/en-us/ai/get-started
  44. https://software.intel.com/en-us/ai/docs?search_api_views_fulltext=&current_page=0&value=20780
  45. https://software.intel.com/en-us/ai/docs
  46. https://www.intel.ai/publications/
  47. https://software.intel.com/en-us/ai/community-publications
  48. https://software.intel.com/en-us/ai/healthcare
  49. https://software.intel.com/en-us/ai/poster-presentations
  50. https://software.intel.com/en-us/ai/success
  51. https://software.intel.com/en-us
  52. https://software.intel.com/en-us/ai/devcloud-for-classroom
  53. https://software.intel.com/en-us/ai/request-for-instructional-materials
  54. https://software.intel.com/en-us
  55. https://software.intel.com/en-us
  56. https://software.intel.com/en-us/ai/ambassadors
  57. https://software.intel.com/en-us/intel-software-innovators
  58. https://devmesh.intel.com/topics/39
  59. https://software.intel.com/en-us/ai/sign-up
  60. https://software.intel.com/en-us/ai/support
  61. https://software.intel.com/en-us
  62. https://software.intel.com/zh-cn/articles/face-it-the-artificially-intelligent-hairstylist
  63. https://software.intel.com/en-us/articles/face-it-the-artificially-intelligent-hairstylist
  64. https://software.intel.com/es-es/articles/face-it-the-artificially-intelligent-hairstylist
  65. https://software.intel.com/pt-br/articles/face-it-the-artificially-intelligent-hairstylist
  66. https://software.intel.com/ru-ru/articles/face-it-the-artificially-intelligent-hairstylist
  67. https://software.intel.com/en-us/user/login?destination=node/744032
  68. https://software.intel.com/registration?lang=en-us
  69. https://software.intel.com/en-us/support
  70. javascript:void(0)
  71. javascript:void(0)
  72. javascript:void(0)
  73. https://www.facebook.com/sharer/sharer.php?u=https://software.intel.com/en-us/articles/face-it-the-artificially-intelligent-hairstylist
  74. https://twitter.com/intent/tweet?text=face+it+   +the+artificially+intelligent+hairstylist+:&url=https://software.intel.com/en-us/articles/face-it-the-artificially-intelligent-hairstylist&hashtags=intelsoftware
  75. https://plus.google.com/share?url=https://software.intel.com/en-us/articles/face-it-the-artificially-intelligent-hairstylist
  76. mailto:?subject=face it     the artificially intelligent hairstylist &body=https://software.intel.com/en-us/articles/face-it-the-artificially-intelligent-hairstylist
  77. https://software.intel.com/en-us/user/1598285
  78. https://en.wikipedia.org/wiki/haar-like_features#cite_note-viola_2001-1
  79. https://en.wikipedia.org/wiki/haar-like_features#cite_note-viola_2001-1
  80. http://alereimondo.no-ip.org/opencv/34
  81. https://en.wikipedia.org/wiki/haar-like_features#cite_note-viola_2001-1
  82. https://en.wikipedia.org/wiki/haar-like_features#cite_note-viola_2001-1
  83. https://en.wikipedia.org/wiki/haar-like_features#cite_note-viola_2001-1
  84. https://en.wikipedia.org/wiki/haar-like_features#cite_note-viola_2001-1
  85. https://en.wikipedia.org/wiki/haar-like_features#cite_note-viola_2001-1
  86. https://en.wikipedia.org/wiki/haar-like_features#cite_note-viola_2001-1
  87. https://en.wikipedia.org/wiki/haar-like_features#cite_note-viola_2001-1
  88. https://en.wikipedia.org/wiki/haar-like_features#cite_note-viola_2001-1
  89. https://en.wikipedia.org/wiki/haar-like_features#cite_note-viola_2001-1
  90. https://en.wikipedia.org/wiki/haar-like_features#cite_note-viola_2001-1
  91. https://en.wikipedia.org/wiki/haar-like_features#cite_note-viola_2001-1
  92. https://www.tensorflow.org/install/install_linux
  93. https://software.intel.com/en-us/articles/tensorflow-optimizations-on-modern-intel-architecture
  94. https://en.wikipedia.org/wiki/haar-like_features#cite_note-viola_2001-1
  95. https://en.wikipedia.org/wiki/haar-like_features#cite_note-viola_2001-1
  96. https://en.wikipedia.org/wiki/haar-like_features#cite_note-viola_2001-1
  97. https://en.wikipedia.org/wiki/haar-like_features
  98. https://www.cs.ubc.ca/~lowe/425/slides/13-violajones.pdf
  99. https://en.wikipedia.org/wiki/convolutional_neural_network
 100. https://www.mathworks.com/help/nnet/convolutional-neural-networks.html
 101. https://papers.nips.cc/paper/4824-id163-classification-with-deep-convolutional-neural-networks
 102. http://www.image-net.org/
 103. http://www.robots.ox.ac.uk/~vgg/research/very_deep/
 104. https://research.googleblog.com/2016/03/train-your-own-image-classifier-with.html
 105. https://www.slideshare.net/hunkim/transfer-defectlearningnew-completed
 106. https://medium.com/@vinayakvarrier/significance-of-transfer-learning-in-the-domain-space-of-artificial-intelligence-1ebd7a1298f2
 107. http://yann.lecun.com/exdb/mnist/
 108. https://www.cs.toronto.edu/~kriz/cifar.html
 109. http://shaverguru.com/finding-a-great-beard-style-for-your-face/
 110. https://www.tensorflow.org/deploy/distributed
 111. https://developer.android.com/training/basics/firstapp/starting-activity.html
 112. https://developer.android.com/training/animation/screen-slide.html
 113. https://software.intel.com/en-us/blogs/2017/07/06/face-it-week-6-update
 114. https://software.intel.com/en-us/blogs/2017/08/03/face-it-week-10-update
 115. https://software.intel.com/en-us/articles/optimization-notice#opt-en
 116. https://software.intel.com/en-us/articles/face-it-the-artificially-intelligent-hairstylist
 117. https://software.intel.com/en-us/user/1948924
 118. https://software.intel.com/en-us/user/1948924
 119. https://software.intel.com/en-us/user/login?destination=node/744032#comment-form
 120. https://software.intel.com/en-us/user/login?language=en-us&destination=node/744032&https=1
 121. https://software.intel.com/en-us/forum
 122. https://software.intel.com/en-us/contact
 123. https://software.intel.com/en-us
 124. https://software.intel.com/en-us/ai/devcloud
 125. https://www.altera.com/solutions/technology/artificial-intelligence/overview.html
 126. https://simplecore.intel.com/ai/intel-movidius-myriad-vpus
 127. https://software.intel.com/en-us/neural-compute-stick
 128. https://www.intel.com/content/www/us/en/products/processors/xeon/scalable.html
 129. https://software.intel.com/en-us
 130. https://devmesh.intel.com/
 131. https://communities.intel.com/community/tech/intel-ai-academy
 132. https://plan.seek.intel.com/metalmindsnewsletter_reg
 133. https://twitter.com/intelaidev
 134. https://software.intel.com/en-us
 135. https://builders.intel.com/ai/
 136. https://ai.intel.com/research-projects/
 137. https://ai.intel.com/ai4good/
 138. https://newsroom.intel.com/category/artificial-intelligence/
 139. https://www.intel.com/content/www/us/en/events/ai/devcon.html
 140. https://software.intel.com/en-us/newsletter/subscribe
 141. http://facebook.com/inteldeveloperzone
 142. http://twitter.com/intelsoftware
 143. https://github.com/intelsoftware
 144. https://twitch.tv/intelgamedev
 145. https://www.youtube.com/user/intelswnetwork
 146. http://www.intel.com/content/www/us/en/legal/terms-of-use.html
 147. http://www.intel.com/content/www/us/en/legal/trademarks.html
 148. https://www.intel.com/content/www/us/en/privacy/intel-privacy-notice.html
 149. http://www.intel.com/content/www/us/en/privacy/intel-cookie-notice.html
 150. https://www.intel.com/content/www/us/en/my-intel/subscription-center.html#/communication-preferences

   hidden links:
 152. https://software.intel.com/en-us/articles/face-it-the-artificially-intelligent-hairstylist
