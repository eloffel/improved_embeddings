   [[_text]]

   [[_charcounterstr]]



   [[label]] ____________________ [[errormessage]]

   [[inputshapedisplay]]
   [[layername]]
   [[item]]
     * [[item]]

   [[outputshapedisplay]]

    gan playground - explore generative adversarial nets in your browser

   data
   [[item]] [[item]] [[item]]
   hyperparameters
   [[item]] [[item]]
   make sure your shapes flow!"
   invalid model
   train stop
   [-1, 1] [0, 1] none
   statistics
   examples
   [[statsexamplecount]]
   input shape
   [[statsinputshapedisplay]]
   label shape
   [[statslabelshapedisplay]]
   pixel range
   [[statsinputrange]]
   environment: cpu gpu
   discriminator
   add a layer
   generator
   add a layer
   real images
   id136s/sec: [[id136spersec]]
   id136 duration: [[id136duration]]ms
   generated images
   generations/sec: [[generationspersec]]
   generation duration: [[generationduration]]ms
   train stats
   examples/sec: [[examplespersec]]
   examples trained: [[examplestrained]]
   total time: [[totaltimesec]] sec.

welcome to gan playground

   gan playground lets you play around with generative adversarial
   networks right in your browser. currently, it contains three built-in
   datasets: mnist, fashion mnist, and cifar-10.

   gan playground provides you the ability to set your models'
   hyperparameters and build up your discriminator and generator
   layer-by-layer. you can observe the network learn in real time as the
   generator produces more and more realistic images, or more likely, gets
   stuck in failure modes such as mode collapse.

what are id3?

   from wikipedia, "id3, or gans, are a class
   of artifical intelligence algorithms used in unsupervised machine
   learning, implemented by a system of two neural networks contesting
   with each other in a zero-sum game framework. they were introduced by
   ian goodfellow et al. in 2014."

   in my own words, gans are composed of two neural networks, each one
   trying to outcompete the other. the discriminator tries to figure out
   whether a given image is real or synthetically generated by the other
   neural network. the generator attempts to output images that are
   indistinguishable from real ones in an attempt to fool the
   discriminator. the hope is that the generator learns enough to create
   realistic images that can fool humans. if you want more information,
   there are tons of great resources on the internet that give a good
   introduction to gans. here's the [1]original paper on gans.
   .

why did you make this?

   my hope is that this project gives beginners a bit of exposure in
   training gans with as little setup as possible. the easiest way to do
   this is through the browser, and with deeplearn.js, it's now finally
   possible. in fact, when i started this project, i didn't have any
   experience with gans, and my target audience was myself!

how long should i wait / what's the best set of parameters to see realistic
images?

   to be honest, i'm not sure. gans are notoriously hard to train, and
   even i haven't found the right set of parameters and layers for this
   demo that'd produce very realistic images consistently. the default
   parameters are still prone to randomly failing... either way, if you do
   find a good set of parameters and layers, please [2]file an issue or
   [3]submit a pull request, and i'll add it to this demo. i challenge you
   to get good generated images on cifar-10.

   on a related note, those with some background in neural networks will
   note that there are a lot of missing operations that are crucial for
   more stable gans e.g. batch id172, transpose convolutions. so
   far, deeplearn.js does not have these operations built in to their
   training api, but i'll add them as soon as possible.

this looks like the deeplearn.js model builder demo

   yup, this is pretty much [4]deeplearn.js's model builder demo
   repurposed for training gans! i just ripped out the parts i didn't need
   and replaced it with the parts i do need.

is the code open source?

   yup! visit [5]https://github.com/reiinakano/gan-playground to examine
   the code. also, feel free to submit any issues or pull requests to the
   repository as well.

credits

   this demo was put together by reiichiro nakano and was repurposed from
   [6]deeplearn.js's model builder demo. shout out to the awesome
   [7]deeplearn.js library and of course to ian goodfellow et al.

references

   visible links
   1. https://arxiv.org/abs/1406.2661
   2. https://github.com/reiinakano/gan-playground/issues
   3. https://github.com/reiinakano/gan-playground/pulls
   4. http://deeplearnjs.org/demos/model-builder/
   5. https://github.com/reiinakano/gan-playground
   6. http://deeplearnjs.org/demos/model-builder/
   7. http://deeplearnjs.org/

   hidden links:
   9. https://github.com/reiinakano/gan-playground
