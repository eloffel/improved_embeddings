   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]towards data science
     * [9]data science
     * [10]machine learning
     * [11]programming
     * [12]visualization
     * [13]ai
     * [14]data journalism
     * [15]contribute
     __________________________________________________________________

tutorial: asynchronous id103 in python

a (fairly) simple technique for using google   s kinda-sorta-really confusing
id103 api

   [16]go to the profile of pres nichols
   [17]pres nichols (button) blockedunblock (button) followfollowing
   may 24, 2017

   let   s face it: it   s hard to compete with google   s machine learning
   models. the company has so much data that it blows the competition out
   of the water as far as accuracy and quality are concerned.
   unfortunately, google hasn   t done the best job of providing easily
   digestible and up-to-date documentation for its apis, making it tricky
   for beginner and intermediate programmers to get started.

   i ran into this problem recently when trying to use its speech
   recognition api to transcribe around 1,200 news broadcasts. because
   google has recently changed its cloud api, many of the examples i found
   around the web were not very helpful. even when i updated the [18]cloud
   sdk, i still ran into problems simply trying to run their sample code.

   one alternative was to use the [19]speechrecognition library, but as
   far as i can tell, it only works for synchronous requests, which are
   limited to one minute in duration. perhaps a better programmer could
   have found a solution while still using google   s python api, but you   re
   stuck with me. :)

   to complete this tutorial, you   ll need the following tools:
     * python 2.7
     * a google account
     * [20]sox
     * a wav file (download [21]here)

activating cloud services

   go to the [22]google cloud homepage and sign up for a free trial.
   you   ll get $300 in free credit simply for signing up.

   1) create a    project    to store your credentials and billing information
   [1*plkph_fylybga3vv7rit1q.png]

   2) enable google speech api and follow the prompt to activate billing.
   don   t worry         you won   t be charged until you upgrade to a paid account.
   [1*ukqoaylpnvjikwfod4zm0w.png]

   3) create an api key and store it for later.
   [1*7u5fjwpf0tm5zqub7h9xqa.png]

   4) create a cloud storage    bucket   . this is where we will host the
   files we want to transcribe. unfortunately, you have to host files on
   google storage to use the asynchronous service.
   [1*abmzxefeqszjncnsit0dcq.png]

installing sox

   the next step is to install sox on our machine. sox is a really easy to
   use command line utility for manipulating audio files.

   if you   re on a mac, you can use homebrew to install sox and its
   dependencies by running the following in the terminal:
brew install sox

   if you   re using ubuntu, you can run the following from the terminal:
sudo apt-get install libasound2-plugins libasound2-python libsox-fmt-all
sudo apt-get install sox

converting audio to mono

   now that we have sox installed, we can start setting up our python
   script. because google   s id103 api only accepts
   single-channel audio, we   ll probably need to use sox to convert our
   file. you can check by looking at the file properties from your
   machine:
   [1*smdvh7i6sjt2hqtvtdhbog.png]

   if your file is already mono, you can skip this step. if not, we can
   easily convert it from python using sox.
     * 1) import the subprocess library to access our executable programs

import subprocess
     * 2) write and run sox command to write a new file with only one
       channel.

filename = "test/test.wav"
newfilename = "test/newtest.wav"
command = ['sox', filename, '-c', '1', newfilename]
subprocess.popen(command)
     * 3) verify our new file converted correctly.

   [1*7-gjcax5gdq76trn3jhvfq.png]

uploading the converted file

   with our audio converted to mono, all we need to do is upload the new
   audio to google storage and we can get to work on our python script.
   while this is something you   ll probably want to do programatically
   using the google storage api module, it   s a bit beyond the scope of
   this tutorial.

   instead, we   ll just use the web-based gui we were using earlier. you   ll
   want to check the    share publicly    option, as shown in the image. keep
   in mind that this will be available to the entire world until you
   remove it from google storage or change the permissions.
   [1*k24hmbsz8axgapusdfpztq.png]

   1) import the requests library for making the request to google   s api
   and the json library to parse the response.
import requests
import json

   2) define the url we   ll use when making the request. you   ll need to
   fill in the blanks with the api key you made earlier.
url = "https://speech.googleapis.com/v1/speech:longrunningrecognize?key=yourapik
eyhere"

   3) create the parameters for our json request. these are just a few of
   the possible parameters we can specify. you can check out others
   [23]here.
payload = {
    "config": {
      "encoding": "linear16",
      "sample_rate_hertz": 48000,
      "language_code": "en-us"
    },
    "audio": {
        "uri": "gs://bucketnamehere/filenamehere.wav"
    }
}

   4) send the request and save the response.
r = requests.post(url, data=json.dumps(payload))

   the response should include a numeric token that we will use to access
   our transcription results. the output will look something like this:
out[1]: {u'name': u'5284939751989548804'}

   we can save the token like this:
json_resp = r.json()
token_resp = json_resp['name']

   5) retrieve results (you   ll want to wait a few seconds).
url = "https://speech.googleapis.com/v1/operations/" + str(token_resp) + "?key=y
ourapikeyhere"
content_response = requests.get(url)
content_json = content_response.json()

   the output should look like this:
   [1*fb8iyem_cpf48gn-x8rvua.png]

voil  !

   you   re all set to build a speech-recognition pipeline for your own
   projects. if you have any questions (or more likely suggestions), don   t
   hesitate to comment.

     * [24]python
     * [25]machine learning
     * [26]api
     * [27]coding

   (button)
   (button)
   (button) 325 claps
   (button) (button) (button) 11 (button) (button)

     (button) blockedunblock (button) followfollowing
   [28]go to the profile of pres nichols

[29]pres nichols

   i write sometimes.

     (button) follow
   [30]towards data science

[31]towards data science

   sharing concepts, ideas, and codes.

     * (button)
       (button) 325
     * (button)
     *
     *

   [32]towards data science
   never miss a story from towards data science, when you sign up for
   medium. [33]learn more
   never miss a story from towards data science
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://towardsdatascience.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/b1215d501c64
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://towardsdatascience.com/tutorial-asynchronous-speech-recognition-in-python-b1215d501c64&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://towardsdatascience.com/tutorial-asynchronous-speech-recognition-in-python-b1215d501c64&source=--------------------------nav_reg&operation=register
   8. https://towardsdatascience.com/?source=logo-lo_2xcbejkscvuy---7f60cf5620c9
   9. https://towardsdatascience.com/data-science/home
  10. https://towardsdatascience.com/machine-learning/home
  11. https://towardsdatascience.com/programming/home
  12. https://towardsdatascience.com/data-visualization/home
  13. https://towardsdatascience.com/artificial-intelligence/home
  14. https://towardsdatascience.com/data-journalism/home
  15. https://towardsdatascience.com/contribute/home
  16. https://towardsdatascience.com/@spnichol?source=post_header_lockup
  17. https://towardsdatascience.com/@spnichol
  18. https://cloud.google.com/sdk/docs/
  19. https://pypi.python.org/pypi/speechrecognition/
  20. http://sox.sourceforge.net/
  21. https://drive.google.com/open?id=0bxb087czt-hmnhbumhrdshzhrg8
  22. https://cloud.google.com/
  23. https://cloud.google.com/speech/docs/async-recognize#speech-async-recognize-gcs-protocol
  24. https://towardsdatascience.com/tagged/python?source=post
  25. https://towardsdatascience.com/tagged/machine-learning?source=post
  26. https://towardsdatascience.com/tagged/api?source=post
  27. https://towardsdatascience.com/tagged/coding?source=post
  28. https://towardsdatascience.com/@spnichol?source=footer_card
  29. https://towardsdatascience.com/@spnichol
  30. https://towardsdatascience.com/?source=footer_card
  31. https://towardsdatascience.com/?source=footer_card
  32. https://towardsdatascience.com/
  33. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  35. https://medium.com/p/b1215d501c64/share/twitter
  36. https://medium.com/p/b1215d501c64/share/facebook
  37. https://medium.com/p/b1215d501c64/share/twitter
  38. https://medium.com/p/b1215d501c64/share/facebook
