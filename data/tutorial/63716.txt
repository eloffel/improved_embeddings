   #[1]python for finance atom feed

   fbpx

   [2]python for finance - python, finance and getting them to play nicely
   together   
     * [3]home
     * [4]contact us

   [5]python for finance - python, finance and getting them to play nicely
   together   

   [6]home
   [7]contact us
     * [8]home
     * [9]contact us

   ____________________

   [10]basic data analysis

monte carlo simulation in python     simulating a random walk

   monte carlo simulation in python - simulating a random walk
   it's only fair to share...
     * facebook
       0
     * reddit
       0
     * twitter
     * linkedin
     * pinterest
       0
     * email
     * tumblr
       0

   monte carlo simulation in python     simulating a random walk

   ok so it   s about that time again     i   ve been thinking what my next post
   should be about and i have decided to have a quick look at monte carlo
   simulations.

   wikipedia states    monte carlo methods (or monte carlo experiments) are
   a broad class of computational algorithms that rely on repeated random
   sampling to obtain numerical results. their essential idea is using
   randomness to solve problems that might be deterministic in principle.
   they are often used in physical and mathematical problems and are most
   useful when it is difficult or impossible to use other approaches.
   monte carlo methods are mainly used in three distinct problem
   classes:[1] optimization, numerical integration, and generating draws
   from a id203 distribution.   

   we will be using a monte carlo simulation to look at the potential
   evolution of asset prices over time, assuming they are subject to daily
   returns that follow a normal distribution (n.b. as we know, asset price
   returns usually follow a distribution that is more leptokurtic (fat
   tailed) than a normal distribution, but a normal distribution is often
   assumed for these kind of purposes). this type of price evolution is
   also known as a    random walk   .
   [ins: :ins]

   if we want to buy a particular stock, for example, we may like to try
   to look into the future and attempt to predict what kind of returns we
   can expect with what kind of id203, or we may be interested in
   investigating what potential extreme outcomes we may experience and how
   exposed we are to the risk of ruin or, on the flip side, superior
   returns.

   to set up our simulation, we need to estimate the expected level of
   return (mu) and volatility (vol) of the stock in question. this data
   can be estimated from historic prices, with the simplest methods just
   assuming past mean return and volatility levels will continue into the
   future. one could also adjust historic data to account for investor
   views or market regime changes etc, however to keep things simple and
   concentrate on the code we will just set simple return and volatility
   levels based on past price data.

   ok so let   s start to write some code and generate the initial data we
   need as inputs to our monte carlo simulation. for illustrative purposes
   let   s look at the stock of apple inc   .not very original, but there you
   go!

   we begin with the obligatory importation of the necessary modules to
   assist us, and go from there:
   python

   #import necessary packages__________________________________
   import numpy as np__________________________________________
   import math_________________________________________________
   import matplotlib.pyplot as plt_____________________________
   from scipy.stats import norm________________________________
   from pandas_datareader import data__________________________
   ____________________________________________________________
   #download apple price data into dataframe___________________
   apple = data.datareader('aapl', 'yahoo',start='1/1/2000')___
   ____________________________________________________________
   #calculate the compound annual growth rate (cagr) which ____
   #will give us our mean return input (mu) ___________________
   days = (apple.index[-1] - apple.index[0]).days______________
   cagr = ((((apple['adj close'][-1]) / apple['adj close'][1]))
   print ('cagr =',str(round(cagr,4)*100)+"%")_________________
   mu = cagr___________________________________________________
   ____________________________________________________________
   #create a series of percentage returns and calculate _______
   #the annual volatility of returns___________________________
   apple['returns'] = apple['adj close'].pct_change()__________
   vol = apple['returns'].std()*sqrt(252)______________________
   print ("annual volatility =",str(round(vol,4)*100)+"%")_____
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
   20
   21
   22
   #import necessary packages
   import numpy as np
   import math
   import matplotlib.pyplot as plt
   from scipy.stats import norm
   from pandas_datareader import data

   #download apple price data into dataframe
   apple = data.datareader('aapl', 'yahoo',start='1/1/2000')

   #calculate the compound annual growth rate (cagr) which
   #will give us our mean return input (mu)
   days = (apple.index[-1] - apple.index[0]).days
   cagr = ((((apple['adj close'][-1]) / apple['adj close'][1])) **
   (365.0/days)) - 1
   print ('cagr =',str(round(cagr,4)*100)+"%")
   mu = cagr

   #create a series of percentage returns and calculate
   #the annual volatility of returns
   apple['returns'] = apple['adj close'].pct_change()
   vol = apple['returns'].std()*sqrt(252)
   print ("annual volatility =",str(round(vol,4)*100)+"%")

   this gives us:

   cagr = 23.09%_______________________________________________
   annual volatility = 42.59%__________________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   2
   cagr = 23.09%
   annual volatility = 42.59%

   now we know our mean return input (mu) is 23.09% and our volatility
   input (vol) is 42.59%     the code to actually run the monte carlo
   simulation is as follows:
   python

   #define variables___________________________________________
   s = apple['adj close'][-1] #starting stock price (i.e. last 
   t = 252 #number of trading days_____________________________
   mu = 0.2309 #return_________________________________________
   vol = 0.4259 #volatility____________________________________
   ____________________________________________________________
   #create list of daily returns using random normal distributi
   daily_returns=np.random.normal((mu/t),vol/math.sqrt(t),t)+1_
   ____________________________________________________________
   #set starting price and create price series generated by abo
   price_list = [s]____________________________________________
   ____________________________________________________________
   for x in daily_returns:_____________________________________
       price_list.append(price_list[-1]*x)_____________________
   ____________________________________________________________
   #generate plots - price series and histogram of daily return
   plt.plot(price_list)________________________________________
   plt.show()__________________________________________________
   plt.hist(daily_returns-1, 100) #note that we run the line pl
   plt.show()__________________________________________________
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
   20
   #define variables
   s = apple['adj close'][-1] #starting stock price (i.e. last available
   real stock price)
   t = 252 #number of trading days
   mu = 0.2309 #return
   vol = 0.4259 #volatility

   #create list of daily returns using random normal distribution
   daily_returns=np.random.normal((mu/t),vol/math.sqrt(t),t)+1

   #set starting price and create price series generated by above random
   daily returns
   price_list = [s]

   for x in daily_returns:
       price_list.append(price_list[-1]*x)

   #generate plots - price series and histogram of daily returns
   plt.plot(price_list)
   plt.show()
   plt.hist(daily_returns-1, 100) #note that we run the line plot and
   histogram separately, not simultaneously.
   plt.show()

   this code returns the following plots:

   prices

   dist

   the above code basically ran a single simulation of potential price
   series evolution over a trading year (252 days), based upon a draw of
   random daily returns that follow a normal distribution. this is
   represented by the single line series shown in the first chart. the
   second chart plots a histogram of those random daily returns over the
   year period.
   [ins: :ins]

   so great     we have managed to successfully simulate a year   s worth of
   future daily price data. this is fantastic and all, but really it
   doesn   t afford us much insight into risk and return characteristics of
   the stock as we only have one randomly generated path. the likelyhood
   of the actual price evolving exactly as described in the above charts
   is pretty much zero.

   so what   s the point of this simulation you may ask? well, the real
   insight is gained from running thousands, tens of thousands or even
   hundreds of thousands of simulations, with each run producing a
   different series of potential price evolution based upon the same stock
   characteristics (mu and vol).

   we can very simply adjust the above code to run multiple simulations.
   this code is presented below. in the below code you will notice a
   couple of things     firstly i have removed the histogram plot (we   ll
   come back to this in a slightly different way later), and also the code
   now plots multiple price series on one chart to show info for each
   separate run of the simulation.
   python

   import numpy as np__________________________________________
   import math_________________________________________________
   import matplotlib.pyplot as plt_____________________________
   from scipy.stats import norm________________________________
   ____________________________________________________________
   #define variables___________________________________________
   s = apple['adj close'][-1] #starting stock price (i.e. last 
   t = 252 #number of trading days_____________________________
   mu = 0.2309 #return_________________________________________
   vol = 0.4259 #volatility____________________________________
   ____________________________________________________________
   #choose number of runs to simulate - i have chosen 1000_____
   for i in range(1000):_______________________________________
       #create list of daily returns using random normal distri
       daily_returns=np.random.normal(mu/t,vol/math.sqrt(t),t)+
       ________________________________________________________
       #set starting price and create price series generated by
       price_list = [s]________________________________________
       ________________________________________________________
       for x in daily_returns:_________________________________
           price_list.append(price_list[-1]*x)_________________
   ____________________________________________________________
       #plot data from each individual run which we will plot a
       plt.plot(price_list)____________________________________
   ____________________________________________________________
   #show the plot of multiple price series created above_______
   plt.show()__________________________________________________
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
   20
   21
   22
   23
   24
   25
   26
   27
   import numpy as np
   import math
   import matplotlib.pyplot as plt
   from scipy.stats import norm

   #define variables
   s = apple['adj close'][-1] #starting stock price (i.e. last available
   real stock price)
   t = 252 #number of trading days
   mu = 0.2309 #return
   vol = 0.4259 #volatility

   #choose number of runs to simulate - i have chosen 1000
   for i in range(1000):
       #create list of daily returns using random normal distribution
       daily_returns=np.random.normal(mu/t,vol/math.sqrt(t),t)+1

       #set starting price and create price series generated by above
   random daily returns
       price_list = [s]

       for x in daily_returns:
           price_list.append(price_list[-1]*x)

       #plot data from each individual run which we will plot at the end
       plt.plot(price_list)

   #show the plot of multiple price series created above
   plt.show()

   this give us the following plot of the 1000 different simulated price
   series

   multprice

   amazing! now we can see the potential outcomes generated from 1000
   different simulations, all based on the same basic inputs, allowing for
   the randomness of the daily return series.

   the spread of final prices is quite large, ranging from around $45 to
   $500! that   s a pretty wide spread!

   in it   s current format, with the chart being so full of data it can be
   a little difficult to actually see clearly what is going on     so this
   is where we come back to the histogram that we removed before, albeit
   this time it will show us the distribution of ending simulation values,
   rather than the distribution of daily returns for an individual
   simulation. i have also simulated 10,000 runs this time to give us more
   data.

   again, the code is easily adapted to include this histogram.
   [ins: :ins]
   python

   import numpy as np__________________________________________
   import math_________________________________________________
   import matplotlib.pyplot as plt_____________________________
   from scipy.stats import norm________________________________
   ____________________________________________________________
   #set up empty list to hold our ending values for each simula
   result = []_________________________________________________
   ____________________________________________________________
   #define variables___________________________________________
   s = apple['adj close'][-1] #starting stock price (i.e. last 
   t = 252 #number of trading days_____________________________
   mu = 0.2309 #return_________________________________________
   vol = 0.4259 #volatility____________________________________
   ____________________________________________________________
   #choose number of runs to simulate - i have chosen 10,000___
   for i in range(10000):______________________________________
       #create list of daily returns using random normal distri
       daily_returns=np.random.normal(mu/t,vol/math.sqrt(t),t)+
       ________________________________________________________
       #set starting price and create price series generated by
       price_list = [s]________________________________________
       ________________________________________________________
       for x in daily_returns:_________________________________
           price_list.append(price_list[-1]*x)_________________
   ____________________________________________________________
       #plot data from each individual run which we will plot a
       plt.plot(price_list)____________________________________
       ________________________________________________________
       #append the ending value of each simulated run to the em
       result.append(price_list[-1])___________________________
   ____________________________________________________________
   #show the plot of multiple price series created above_______
   plt.show()__________________________________________________
   ____________________________________________________________
   #create histogram of ending stock values for our mutliple si
   plt.hist(result,bins=50)____________________________________
   plt.show()__________________________________________________
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
   20
   21
   22
   23
   24
   25
   26
   27
   28
   29
   30
   31
   32
   33
   34
   35
   36
   37
   import numpy as np
   import math
   import matplotlib.pyplot as plt
   from scipy.stats import norm

   #set up empty list to hold our ending values for each simulated price
   series
   result = []

   #define variables
   s = apple['adj close'][-1] #starting stock price (i.e. last available
   real stock price)
   t = 252 #number of trading days
   mu = 0.2309 #return
   vol = 0.4259 #volatility

   #choose number of runs to simulate - i have chosen 10,000
   for i in range(10000):
       #create list of daily returns using random normal distribution
       daily_returns=np.random.normal(mu/t,vol/math.sqrt(t),t)+1

       #set starting price and create price series generated by above
   random daily returns
       price_list = [s]

       for x in daily_returns:
           price_list.append(price_list[-1]*x)

       #plot data from each individual run which we will plot at the end
       plt.plot(price_list)

       #append the ending value of each simulated run to the empty list we
   created at the beginning
       result.append(price_list[-1])

   #show the plot of multiple price series created above
   plt.show()

   #create histogram of ending stock values for our mutliple simulations
   plt.hist(result,bins=50)
   plt.show()

   this gives us the following charts:

   multprice

   dist

   we can now quickly calculate the mean of the distribution to get our
      expected value   :
   python

   #use numpy mean function to calculate the mean of the result
   print(round(np.mean(result),2))_____________________________
   ____________________________________________________________
   ____________________________________________________________
   1
   2
   #use numpy mean function to calculate the mean of the result
   print(round(np.mean(result),2))

   which gives me 141.15. of course you will get a slightly different
   result due to the fact that these are simulations of random daily
   return draws. the more paths or    runs    you include in each simulation,
   the more the mean value will tend towards the mean return we used as
   our    mu    input. this is as a result of the law of large numbers.

   we can also take a look at a couple of    quantiles    of the potential
   price distribution, to get an idea of the likelyhood of very high or
   very low returns.

   we can just use the numpy    percentile    function as follows to calculate
   the 5% and 95% quantiles:
   python

   print("5% quantile =",np.percentile(result,5))______________
   print("95% quantile =",np.percentile(result,95))____________
   ____________________________________________________________
   ____________________________________________________________
   1
   2
   print("5% quantile =",np.percentile(result,5))
   print("95% quantile =",np.percentile(result,95))

   5% quantile = 63.5246208951
   95% quantile = 258.436742087

   lovely! so we now know that there is a 5% chance that our stock price
   will end up below around $63.52 and a 5% chance it will finish above
   $258.44.

   so now we can begin to ask ourselves questions along the lines of    am i
   willing to risk a 5% chance of ending up with a stock worth less than
   $63.52, in order to chase an expected return of around 23%, giving us
   an expected stock price of around $141.15?   
   [ins: :ins]

   i think the last thing to do is to quickly plot the two quantiles we
   have just calculated on the histogram to give us a visual
   representation and   well, why the hell not eh?     
   python

   plt.hist(result,bins=100)___________________________________
   plt.axvline(np.percentile(result,5), color='r', linestyle='d
   plt.axvline(np.percentile(result,95), color='r', linestyle='
   plt.show()__________________________________________________
   1
   2
   3
   4
   plt.hist(result,bins=100)
   plt.axvline(np.percentile(result,5), color='r', linestyle='dashed',
   linewidth=2)
   plt.axvline(np.percentile(result,95), color='r', linestyle='dashed',
   linewidth=2)
   plt.show()

   dist

   ok, i think i   ll leave it there for now     if anyone has any comments or
   questions, please do leave them below.

   thanks!
   it's only fair to share...
     * facebook
       0
     * reddit
       0
     * twitter
     * linkedin
     * pinterest
       0
     * email
     * tumblr
       0

related

   [11]monte carlo simulation in python
   [12]november 28, 2016[13]by s666
   written by s666

13 comments
    1. viktor december 26, 2016 at 12:24 am [14]reply
       thanks for the interesting article! i found your blog very useful.
       i have just one thing to note regarding this line:
       daily_returns=np.random.normal(mu/t,vol/math.sqrt(t),t)+1
       here you use arithmetic returns (and not log returns) so if you use
       mu/t for calculating daily returns from annual one you will end up
       applying compund returns. it will overestimate the annual return
       (mu). instead i would use something like this:
       daily_returns=np.random.normal((1+mu)**(1/t),vol/sqrt(t),t)
       cheers!
       viktor
       loading...
          + s666 december 26, 2016 at 8:31 pm
            hi viktor, thanks for the comment. you are indeed correct   i
            was concentrating too much on the coding element of the blog
            post and missed that simple error    i appreciate you pointing
            it out!
            also, very happy to hear you   re finding the blog useful.
            loading...
    2. stephen october 15, 2017 at 10:37 pm [15]reply
       hi. i   m really enjoying this great blog so far. thanks! this post
       is really useful, but i think there   s a problem     the calculation
       of a price list using:
       for x in daily_returns:
       price_list.append(price_list[-1]*x)
       blows up to ridiculous numbers, on the order of 10^(77). i ran this
       script on the day of posting, and those are the results i was
       getting. i don   t see how i could have done anything wrong, but i
       apologize if i did. does anyone have any thoughts on this? i can   t
       seem to find a solution yet.
       cheers,
       stephen.
       loading...
          + s666 october 16, 2017 at 8:46 am
            hi stephen, glad to hear you   re finding the content
            interesting   thanks for your comment. you are correct that i
            made a mistake in the second block of code (although the
            following blocks that actually runs the monte carlo
            simulations are correct)     instead of the code posted, it
            should have been:
            python

            #create list of daily returns using random normal distributi
            #it is this line which has changed__________________________
                daily_returns=np.random.normal(mu/t,vol/math.sqrt(t),t)+
            ____________________________________________________________
            #set starting price and create price series generated by abo
            price_list = [s]____________________________________________
             ___________________________________________________________
            for x in daily_returns:_____________________________________
                price_list.append(price_list[-1]*x)_____________________

   1

   2

   3

   4

   5

   6

   7

   8

   9

   #create list of daily returns using random normal distribution

   #it is this line which has changed

       daily_returns=np.random.normal(mu/t,vol/math.sqrt(t),t)+1


   #set starting price and create price series generated by above random
   daily returns

   price_list = [s]

   for x in daily_returns:

       price_list.append(price_list[-1]*x)
            hope that helps     i will fix the code when i get a moment.
            cheers!
            loading...
          + stephen october 16, 2017 at 1:49 pm
            hi,
            thanks for your reply. i did manage to get sensible results
            when using:
            daily_returns = np.random.normal((1 + mu) ** (1/t),
            volatility/math.sqrt(t), t)
            i.e. by not including the +1 term at the end. i   m having
            trouble finding a source to explain the mathematics of
            modelling daily returns though, so removing it might not be a
            legitimate solution. it does appear to work though!
            thanks again, i   m looking forward to studying the rest of your
            posts.
            cheers,
            stephen.
            loading...
    3. denis march 7, 2018 at 1:32 pm [16]reply
       datareader doesn   t work properly with yahoo finance
       loading...
          + s666 march 7, 2018 at 3:25 pm
            hi denis     i have just tried to run the code above and it
            works fine without any error in downloading apple stock price
            data from yahoo. may i ask what error message you are getting?
            there was an issue with the pandas data_reader whereby prices
            couldn   t be downloaded anymore but that was fixed in a later
            update.
            perhaps you could try updating your pandas-datareader package
            to the latest version with pip.
            try running:
            pip install data-reader    upgrade
            in a cmd terminal.
            loading...
          + leo vince october 24, 2018 at 6:44 pm
            denis, you probably figured it out by now, historical prices
            area avail at yahoo in csv.
            #download apple price data into dataframe
            apple = pd.read_csv(   aapl.csv   , usecols=[   date   ,   adj
            close   ],index_col=0, parse_dates=true)
            loading...
    4. atst march 8, 2018 at 7:00 pm [17]reply
       this blog is really helpful, and i   m learning a lot about python as
       i go through the lessons. could you help me with a (probably silly)
       question? you use the following normal distribution for daily
       returns:
          daily_returns=np.random.normal(mu/t,vol/math.sqrt(t),t)+1   . why
       add the constant    1    to the distribution? i believe that adding a
       constant changes the mean and not the variance, but i tried
       plotting it without the constant to no avail (nothing appears). i
       tried other constants and would get weird or no plots, too. i   m
       sure there   s a simply explanation about adding the constant    1   ,
       which i   m not aware of.
       loading...
          + s666 march 16, 2018 at 4:05 am
            thanks for your comment     the answer of why i am adding 1 to
            the distribution is as follows:
            i am generating a set of random    normally distributed    returns
            based on the mean and variance of the particular price series
            we happen to be looking at (in the above example it is apple
            stock). the next step is to apply those randomly generated
            returns to the    starting price    of apple (which in our case is
            the last entry of    real    data downloaded from yahoo), and then
            generated, step by step a set of    generated    price series.
            the issue comes as the normal distribution will spit out
            numbers such as    0.0345    or    -0.0126    to select two completely
            random examples.
            you have to add 1 to each of those numbers so that when you
            step through each randomly generated return and multiply it by
            the previous stock price     you get the new price of the stock,
            rather than just the incermental increase or decrease.
            for example, if 100 increases by 2% for example, you don   t
            just multiply 100 by 0.02     you multiply it by 1.02 (i.e. you
            add 1 to the return).
            this is why 1 is added to each of the returns in the generated
            return series.
            hope that answers the question.
            loading...
          + atst march 16, 2018 at 8:19 pm
            that was helpful. thanks. i forgot that the normal
            distribution was of returns.
            loading...
          + denis may 17, 2018 at 3:34 pm
            traceback (most recent call last):
            file
               c:\users\denis\appdata\local\programs\python\python36-32\1.py
               , line 9, in
            apple = data.datareader(   aapl   ,    yahoo   ,start=   1/1/2000   )
            file
               c:\users\denis\appdata\local\programs\python\python36-32\lib\
            site-packages\pandas_datareader\data.py   , line 291, in
            datareader
            raise immediatedeprecationerror(dep_error_msg.format(   yahoo
            daily   ))
            pandas_datareader.exceptions.immediatedeprecationerror:
            yahoo daily has been immediately deprecated due to large
            breaks in the api without the
            introduction of a stable replacement. pull requests to
            re-enable these data
            connectors are welcome.
            see https://github.com/pydata/pandas-datareader/issues
            thank you for your previous reply and sorry for my delay
            loading...
    5. bertrand obi may 26, 2018 at 6:13 am [18]reply
       thank you very much for the detailled presentation.
       i wish to find out how i can run the montecarlo simulation and
       calculate the returns for a portfolio of stocks
       thank you
       loading...

leave a comment

leave a reply [19]cancel reply

   iframe: [20]jetpack_remote_comment

      previous post
   moving average crossover trading strategy backtest in python     v 2.0
   next post   
   analysis of moving average crossover strategy backtest returns using
   pandas

categories

     * [21]basic data analysis
     * [22]beginners resources
     * [23]trading strategy backtest
     * [24]uncategorized

hire me

archives

     * [25]february 2019
     * [26]january 2019
     * [27]december 2018
     * [28]september 2018
     * [29]july 2018
     * [30]june 2018
     * [31]march 2018
     * [32]february 2018
     * [33]october 2017
     * [34]july 2017
     * [35]february 2017
     * [36]january 2017
     * [37]december 2016
     * [38]november 2016
     * [39]september 2016
     * [40]july 2016
     * [41]may 2016
     * [42]april 2016
     * [43]march 2016

   [ins: :ins]

popular posts

   [44]investment portfolio optimisation with python

[45]investment portfolio optimisation with python

   [46]moving average crossover trading strategy backtest in python

[47]moving average crossover trading strategy backtest in python

   [48]intraday stock mean reversion trading backtest in python

[49]intraday stock mean reversion trading backtest in python

   [50]bollinger band trading strategy backtest in python

[51]bollinger band trading strategy backtest in python

   [52]intraday stock mean reversion trading backtest in python with short
   selling

[53]intraday stock mean reversion trading backtest in python with short
selling

blog stats

     * 237,662 hits

   [ins: :ins]


   [54]monte carlo simulation in python - simulating a random walk

   iframe: [55]https://www.googletagmanager.com/ns.html?id=gtm-5pmcjv9

   iframe: [56]likes-master

   %d bloggers like this:

references

   visible links
   1. https://www.pythonforfinance.net/feed/atom/
   2. https://www.pythonforfinance.net/
   3. https://www.pythonforfinance.net/
   4. https://www.pythonforfinance.net/contact-us/
   5. https://www.pythonforfinance.net/
   6. https://www.pythonforfinance.net/
   7. https://www.pythonforfinance.net/contact-us/
   8. https://www.pythonforfinance.net/
   9. https://www.pythonforfinance.net/contact-us/
  10. https://www.pythonforfinance.net/category/basic-data-analysis/
  11. https://www.pythonforfinance.net/tag/monte-carlo-simulation-in-python/
  12. https://www.pythonforfinance.net/2016/11/28/
  13. https://www.pythonforfinance.net/
  14. https://www.pythonforfinance.net/2016/11/28/monte-carlo-simulation-in-python/#comment-32
  15. https://www.pythonforfinance.net/2016/11/28/monte-carlo-simulation-in-python/#comment-200
  16. https://www.pythonforfinance.net/2016/11/28/monte-carlo-simulation-in-python/#comment-247
  17. https://www.pythonforfinance.net/2016/11/28/monte-carlo-simulation-in-python/#comment-249
  18. https://www.pythonforfinance.net/2016/11/28/monte-carlo-simulation-in-python/#comment-276
  19. https://www.pythonforfinance.net/2016/11/28/monte-carlo-simulation-in-python/#respond
  20. https://jetpack.wordpress.com/jetpack-comment/?blogid=108620440&postid=15561&comment_registration=0&require_name_email=1&stc_enabled=1&stb_enabled=1&show_avatars=0&avatar_default=retro&greeting=leave+a+reply&greeting_reply=leave+a+reply+to+%s&color_scheme=light&lang=en_us&jetpack_version=7.2&show_cookie_consent=10&has_cookie_consent=0&sig=d18d18dd20e42d0c01c3bb3773ab766c5ae7f9c9#parent=https://www.pythonforfinance.net/2016/11/28/monte-carlo-simulation-in-python/
  21. https://www.pythonforfinance.net/category/basic-data-analysis/
  22. https://www.pythonforfinance.net/category/beginnersresources/
  23. https://www.pythonforfinance.net/category/trading-strategy-backtest/
  24. https://www.pythonforfinance.net/category/uncategorized/
  25. https://www.pythonforfinance.net/2019/02/
  26. https://www.pythonforfinance.net/2019/01/
  27. https://www.pythonforfinance.net/2018/12/
  28. https://www.pythonforfinance.net/2018/09/
  29. https://www.pythonforfinance.net/2018/07/
  30. https://www.pythonforfinance.net/2018/06/
  31. https://www.pythonforfinance.net/2018/03/
  32. https://www.pythonforfinance.net/2018/02/
  33. https://www.pythonforfinance.net/2017/10/
  34. https://www.pythonforfinance.net/2017/07/
  35. https://www.pythonforfinance.net/2017/02/
  36. https://www.pythonforfinance.net/2017/01/
  37. https://www.pythonforfinance.net/2016/12/
  38. https://www.pythonforfinance.net/2016/11/
  39. https://www.pythonforfinance.net/2016/09/
  40. https://www.pythonforfinance.net/2016/07/
  41. https://www.pythonforfinance.net/2016/05/
  42. https://www.pythonforfinance.net/2016/04/
  43. https://www.pythonforfinance.net/2016/03/
  44. https://www.pythonforfinance.net/2017/01/21/investment-portfolio-optimisation-with-python/
  45. https://www.pythonforfinance.net/2017/01/21/investment-portfolio-optimisation-with-python/
  46. https://www.pythonforfinance.net/2016/09/01/moving-average-crossover-trading-strategy-backtest-in-python/
  47. https://www.pythonforfinance.net/2016/09/01/moving-average-crossover-trading-strategy-backtest-in-python/
  48. https://www.pythonforfinance.net/2017/02/20/intraday-stock-mean-reversion-trading-backtest-in-python/
  49. https://www.pythonforfinance.net/2017/02/20/intraday-stock-mean-reversion-trading-backtest-in-python/
  50. https://www.pythonforfinance.net/2017/07/31/bollinger-band-trading-strategy-backtest-in-python/
  51. https://www.pythonforfinance.net/2017/07/31/bollinger-band-trading-strategy-backtest-in-python/
  52. https://www.pythonforfinance.net/2017/02/21/intraday-stock-mean-reversion-trading-backtest-in-python-with-short-selling/
  53. https://www.pythonforfinance.net/2017/02/21/intraday-stock-mean-reversion-trading-backtest-in-python-with-short-selling/
  54. https://www.pythonforfinance.net/
  55. https://www.googletagmanager.com/ns.html?id=gtm-5pmcjv9
  56. https://widgets.wp.com/likes/master.html?ver=201914#ver=201914

   hidden links:
  58. http://www.facebook.com/sharer.php?u=https://www.pythonforfinance.net/2016/11/28/monte-carlo-simulation-in-python/
  59. http://reddit.com/submit?url=https://www.pythonforfinance.net/2016/11/28/monte-carlo-simulation-in-python/&title=monte%20carlo%20simulation%20in%20python%20%e2%80%93%20simulating%20a%20random%20walk
  60. http://twitter.com/share?url=https://www.pythonforfinance.net/2016/11/28/monte-carlo-simulation-in-python/&text=monte%20carlo%20simulation%20in%20python%20%e2%80%93%20simulating%20a%20random%20walk%20
  61. http://www.linkedin.com/sharearticle?mini=true&url=https://www.pythonforfinance.net/2016/11/28/monte-carlo-simulation-in-python/
  62. javascript:void((function()%7bvar%20e=document.createelement('script');e.setattribute('type','text/javascript');e.setattribute('charset','utf-8');e.setattribute('src','//assets.pinterest.com/js/pinmarklet.js?r='+math.random()*99999999);document.body.appendchild(e)%7d)());
  63. mailto:?subject=monte%20carlo%20simulation%20in%20python%20%26#8211;%20simulating%20a%20random%20walk&body=%20https://www.pythonforfinance.net/2016/11/28/monte-carlo-simulation-in-python/
  64. http://www.tumblr.com/share/link?url=https://www.pythonforfinance.net/2016/11/28/monte-carlo-simulation-in-python/
  65. http://www.facebook.com/sharer.php?u=https://www.pythonforfinance.net/2016/11/28/monte-carlo-simulation-in-python/
  66. http://reddit.com/submit?url=https://www.pythonforfinance.net/2016/11/28/monte-carlo-simulation-in-python/&title=monte%20carlo%20simulation%20in%20python%20%e2%80%93%20simulating%20a%20random%20walk
  67. http://twitter.com/share?url=https://www.pythonforfinance.net/2016/11/28/monte-carlo-simulation-in-python/&text=monte%20carlo%20simulation%20in%20python%20%e2%80%93%20simulating%20a%20random%20walk%20
  68. http://www.linkedin.com/sharearticle?mini=true&url=https://www.pythonforfinance.net/2016/11/28/monte-carlo-simulation-in-python/
  69. javascript:void((function()%7bvar%20e=document.createelement('script');e.setattribute('type','text/javascript');e.setattribute('charset','utf-8');e.setattribute('src','//assets.pinterest.com/js/pinmarklet.js?r='+math.random()*99999999);document.body.appendchild(e)%7d)());
  70. mailto:?subject=monte%20carlo%20simulation%20in%20python%20%26#8211;%20simulating%20a%20random%20walk&body=%20https://www.pythonforfinance.net/2016/11/28/monte-carlo-simulation-in-python/
  71. http://www.tumblr.com/share/link?url=https://www.pythonforfinance.net/2016/11/28/monte-carlo-simulation-in-python/
  72. https://www.pythonforfinance.net/author/s666/
  73. https://www.pythonforfinance.net/author/s666/
  74. https://www.pythonforfinance.net/author/s666/
  75. https://www.pythonforfinance.net/author/s666/
  76. https://www.pythonforfinance.net/author/s666/
  77. https://www.pythonforfinance.net/author/s666/
  78. https://www.pythonforfinance.net/author/s666/
  79. https://www.pythonforfinance.net/author/s666/
  80. https://www.pythonforfinance.net/author/s666/
  81. https://www.pythonforfinance.net/author/s666/
  82. https://www.pythonforfinance.net/author/s666/
  83. https://www.pythonforfinance.net/author/s666/
  84. https://www.pythonforfinance.net/author/s666/
  85. https://www.pythonforfinance.net/author/s666/
  86. https://www.pythonforfinance.net/2016/12/18/moving-average-crossover-trading-strategy-backtest-python-v-2-0/
  87. https://www.pythonforfinance.net/2016/09/02/analysis-of-moving-average-crossover-strategy-backtest-returns-using-pandas/
