   (button) toggle navigation
   [1][nav_logo.svg?v=479cefe8d932fb14a67b93911b97d70f]
     * [2]jupyter
     * [3]faq
     * [4]view as code
     * [5]view on github
     * [6]execute on binder
     * [7]download notebook

    1. [8]meetup
    2. [9]notebook

   scneario: we toss a coin and get 8 heads and 2 tails. our objective is
   to determine id203 of getting head in the next toss. use bayesian
   approach to estimate parameter i.e. id203 of getting head (
   $\theta$ )

theoretical approach:[10]  

   assuming $\theta$ has a beta distribution with $\alpha = \beta = 2.0$,
   expected value for $\theta$ is given as

   $e[\theta] = \frac{n_h + \alpha}{\alpha + \beta + n}$

   $e[\theta] = \frac{8 + 2}{2 + 2 + 10} = \frac{10}{14} = 0.71$

using metropolis algorithm[11]  

   in [96]:
%matplotlib inline
import random
import scipy.stats
import scipy.special
import matplotlib.pyplot as plt

def integral(theta):
    """ this is likelihood x prior after removing any constant terms."""
    return theta**9*(1-theta)**3


n = 100  # number of points to sample
samples = [random.random()] # random starting point

for i in range(n):
    #grab last sample point
    theta = samples[-1]

    #create new sample by randomly selecting a point from a normal distribution
    #of mean = 0 and sd = 0.1. if the new sample is outside of the
    #domain then ignore it and use existing sample
    newtheta = theta + random.normalvariate(0, 0.1)
    if newtheta < 0 or newtheta > 1:
        newtheta = theta

    #if the id203 of new sample as compared to last sample is less than un
iform distribution
    #then ignore it.
    acceptanceratio = integral(newtheta)/integral(theta)
    if acceptanceratio > random.random(): # accept only if going uphill
        samples.append(newtheta)
    else:
        samples.append(theta)

print "estimate: ", sum(samples)/n

# plot how sample theta varies with each iteration
ylab = [i for i in xrange(len(samples))]
pylab.plot(samples, ylab)
pylab.title('random walk visualization')
pylab.xlabel('theta value')
pylab.ylabel('time')
pylab.show()

estimate:  0.649221876089

   [yyg+xyrkax0bieiilkpqyiisfzk
   eciikpushiiizkueisiiwslbiihivkoqiikslrkeiihk9f8bvhijcgjel24aaaaasuvork5
   cyii= ]

   this website does not host notebooks, it only renders notebooks
   available on other websites.

   delivered by [12]fastly, rendered by [13]rackspace

   nbviewer github [14]repository.

   nbviewer version: [15]33c4683

   nbconvert version: [16]5.4.0

   rendered (fri, 05 apr 2019 20:25:19 utc)

references

   1. https://nbviewer.jupyter.org/
   2. http://jupyter.org/
   3. https://nbviewer.jupyter.org/faq
   4. https://nbviewer.jupyter.org/format/script/github/ragrawal/meetup/blob/master/notebook/mcmc.ipynb
   5. https://github.com/ragrawal/meetup/blob/master/notebook/mcmc.ipynb
   6. https://mybinder.org/v2/gh/ragrawal/meetup/master?filepath=notebook/mcmc.ipynb
   7. https://raw.githubusercontent.com/ragrawal/meetup/master/notebook/mcmc.ipynb
   8. https://nbviewer.jupyter.org/github/ragrawal/meetup/tree/master
   9. https://nbviewer.jupyter.org/github/ragrawal/meetup/tree/master/notebook
  10. https://nbviewer.jupyter.org/github/ragrawal/meetup/blob/master/notebook/mcmc.ipynb#theoretical-approach:
  11. https://nbviewer.jupyter.org/github/ragrawal/meetup/blob/master/notebook/mcmc.ipynb#using-metropolis-algorithm
  12. http://www.fastly.com/
  13. https://developer.rackspace.com/?nbviewer=awesome
  14. https://github.com/jupyter/nbviewer
  15. https://github.com/jupyter/nbviewer/commit/33c4683164d5ee4c92dbcd53afac7f13ef033c54
  16. https://github.com/jupyter/nbconvert/releases/tag/5.4.0
