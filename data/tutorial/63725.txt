   #[1]github [2]recent commits to nmslib:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]83
     * [35]star [36]1,379
     * [37]fork [38]230

[39]nmslib/[40]nmslib

   [41]code [42]issues 92 [43]pull requests 2 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   non-metric space library (nmslib): an efficient similarity search
   library and a toolkit for evaluation of id92 methods for generic
   non-metric spaces.
   [47]knn-search [48]non-metric [49]neighborhood-graphs [50]id92-graphs
   [51]proximity-graphs [52]lsh [53]locality-sensitive-hashing
     * [54]1,239 commits
     * [55]7 branches
     * [56]15 releases
     * [57]16 contributors

    1. [58]c++ 72.8%
    2. [59]tex 10.5%
    3. [60]python 5.1%
    4. [61]perl 3.9%
    5. [62]jupyter notebook 2.2%
    6. [63]shell 1.8%
    7. other 3.7%

   (button) c++ tex python perl jupyter notebook shell other
   branch: master (button) new pull request
   [64]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/n
   [65]download zip

downloading...

   want to be notified of new releases in nmslib/nmslib?
   [66]sign in [67]sign up

launching github desktop...

   if nothing happens, [68]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [69]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [70]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [71]download the github extension for visual studio
   and try again.

   (button) go back
   [72]@searchivarius
   [73]searchivarius [74]update readme.md
   latest commit [75]3068df8 dec 7, 2018
   [76]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [77]data
   [78]docs [79]regenerate python documentation, for 1.7.3.4. aug 17, 2018
   [80]manual [81]adding python docs aug 31, 2017
   [82]previous_releases_scripts [83]update readme.md may 6, 2016
   [84]python_bindings [85]bumping up the version. oct 4, 2018
   [86]query_server [87]fixing query-server/client feb 8, 2018
   [88]sample_data [89]two important issues: feb 8, 2018
   [90]sample_standalone_app [91]fixing standalone examples [92]#335 jul
   20, 2018
   [93]scripts [94]intermediate commit: introducing universal header. feb
   7, 2018
   [95]similarity_search [96]bugfixes for index loading and addbatch,
   optional single threaded del    nov 16, 2018
   [97]test_batch_app
   [98].appveyor.yml
   [99].gitignore [100]use pybind11 for python bindings may 25, 2017
   [101].travis.yml
   [102]readme.md

readme.md

   [103]pypi version [104]build status [105]windows build status [106]join
   the chat at https://gitter.im/nmslib/lobby

non-metric space library (nmslib)

the latest pre-release is [107]1.7.3.6. note that the manual is not updated
to reflect some of the changes. in particular, we changed the build procedure
for windows. also note that the manual targets primiarily developers who will
extend the library. for most other folks, [108]python binding docs should be
sufficient. the basic parameter tuning/selection guidelines are also
available [109]online.

   non-metric space library (nmslib) is an efficient cross-platform
   similarity search library and a toolkit for evaluation of similarity
   search methods. the core-library does not have any third-party
   dependencies.

   the goal of the project is to create an effective and comprehensive
   toolkit for searching in generic non-metric spaces. being comprehensive
   is important, because no single method is likely to be sufficient in
   all cases. also note that exact solutions are hardly efficient in high
   dimensions and/or non-metric spaces. hence, the main focus is on
   approximate methods.

   nmslib is an extendible library, which means that is possible to add
   new search methods and distance functions. nmslib can be used directly
   in c++ and python (via python bindings). in addition, it is also
   possible to build a query server, which can be used from java (or other
   languages supported by apache thrift). java has a native client, i.e.,
   it works on many platforms without requiring a c++ library to be
   installed.

   main developers : bilegsaikhan naidan, leonid boytsov, yury malkov,
   david novak, ben frederickson.

   other contributors: lawrence cayton, wei dong, avrelin nikita, dmitry
   yashunin, bob poekert, @orgoro, maxim andreev, daniel lemire, nathan
   kurz, alexander ponomarenko.

   citing: if you find this library useful, feel free to cite our sisap
   paper [110][bibtex] as well as other papers listed in the end. one
   crucial contribution to cite is the fast hierarchical navigable world
   graph (hnsw) method [111][bibtex]. please, [112]also check out the
   stand-alone hnsw implementation by yury malkov, which is released as a
   header-only hnswlib library.

   leo(nid) boytsov is a maintainer. leo was supported by the [113]open
   advancement of id53 systems (oaqa) group and the
   following nsf grant #1618159: "[114]matching and ranking via proximity
   graphs: applications to id53 and beyond". bileg was
   supported by the [115]iad center.

   should you decide to modify the library (and, perhaps, create a pull
   request), please, use the [116]develoment branch. for generic
   questions/inquiries, please, use gitter (see the badge above). bug
   reports should be submitted as github issues.

nmslib is generic yet fast!

   even though our methods are generic (see e.g., evaluation results in
   [117]naidan and boytsov 2015), they often outperform specialized
   methods for the euclidean and/or angular distance (i.e., for the cosine
   similarity). below are the results (as of may 2016) of nmslib compared
   to the best implementations participated in [118]a public evaluation
   code-named ann-benchmarks. our main competitors are:
    1. a popular library [119]annoy, which uses a forest of trees (older
       version used random-projection trees, the new one seems to use a
       hierarchical 2-means).
    2. a new library [120]falconn, which is a highly-optimized
       implementation of the multiprobe lsh. it uses a novel type of
       random projections based on the fast hadamard transform.

   the benchmarks were run on a c4.2xlarge instance on ec2 using a
   previously unseen subset of 5k queries. the benchmarks employ the
   following data sets:
    1. [121]glove : 1.2m 100-dimensional id27s trained on tweets
    2. 1m of 128-dimensional [122]sift features

   as of may 2016 results are:
   1.19m 100d glove, cosine similarity. [123][glove.png] 1m 128d sift
   features, euclidean distance: [124][sift.png]

what's new in version 1.6 ([125]see this page for more details )

    1. improved portability (can now be built on macos)
    2. easier build: core nmslib has no dependencies
    3. improved python bindings: dense, sparse, and generic bindings are
       now in the single module! we also have batch addition and querying
       functions.
    4. new baselines, including [126]falconn library
    5. new spaces (renyi-divergence, alpha-beta divergence, sparse inner
       product)
    6. we changed the semantics of boolean command line options: they now
       have to accept a numerical value (0 or 1).

general information

   a detailed description is given [127]in the manual. the manual also
   contains instructions for building under linux and windows, extending
   the library, as well as for debugging the code using eclipse. note that
   the manual is not fully updated to reflect 1.6 changes. also note that
   the manual targets primiarily developers who will extend the library.
   for most other folks, [128]python binding docs should be sufficient.

   most of this code is released under the apache license version 2.0
   [129]http://www.apache.org/licenses/.
     * the lshkit, which is embedded in our library, is distributed under
       the gnu general public license, see
       [130]http://www.gnu.org/licenses/.
     * the id92 graph construction algorithm nn-descent due to dong et al.
       2011 (see the links below), which is also embedded in our library,
       seems to be covered by a free-to-use license, similar to apache 2.
     * falconn library's licence is mit.

prerequisites

    1. a modern compiler that supports c++11: g++ 4.7, intel compiler 14,
       clang 3.4, or visual studio 14 (version 12 can probably be used as
       well, but the project files need to be downgraded).
    2. 64-bit linux is recommended, but most of our code builds on 64-bit
       windows and macos as well.
    3. only for linux/macos: cmake (gnu make is also required)
    4. an intel or amd processor that supports sse 4.2 is recommended
    5. extended version of the library requires a development version of
       the following libraries: boost, gnu scientific library, and eigen3.

   to install additional prerequisite packages on ubuntu, type the
   following
sudo apt-get install libboost-all-dev libgsl0-dev libeigen3-dev

limitations

    1. currently only static data sets are supported
    2. hnsw currently duplicates memory to create optimized indices
    3. range/threshold search is not supported by many methods including
       sw-graph/hnsw

   we plan to resolve these issues in the future.

quick start on linux

   to compile, go to the directory similarity_search and type:
cmake .
make

   to build an extended version (need extra library):
cmake . -dwith_extras=1
make

   you can also download almost every data set used in our previous
   evaluations (see the section data sets below). the downloaded data
   needs to be decompressed (you may need 7z, gzip, and bzip2). old
   experimental scripts can be found in the directory
   [131]previous_releases_scripts. however, they will work only with
   previous releases.

   note that the benchmarking utility supports caching of ground truth
   data, so that ground truth data is not recomputed every time this
   utility is re-run on the same data set.

query server (linux-only)

   the query server requires apache thrift. we used apache thrift 0.9.2,
   but, perhaps, newer versions will work as well.
   to install apache thrift, you need to [132]build it from source. this
   may require additional libraries. on ubuntu they can be installed as
   follows:
sudo apt-get install libboost-dev libboost-test-dev libboost-program-options-dev
 libboost-system-dev libboost-filesystem-dev libevent-dev automake libtool flex
bison pkg-config g++ libssl-dev libboost-thread-dev make

   after apache thrift is installed, you need to build the library itself.
   then, change the directory to [133]query_server/cpp_client_server and
   type make (the makefile may need to be modified, if apache thrift is
   installed to a non-standard location). the query server has a similar
   set of parameters to the benchmarking utility experiment. for example,
   you can start the server as follows:
 ./query_server -i ../../sample_data/final8_10k.txt -s l2 -m sw-graph -c nn=10,e
fconstruction=200,initindexattempts=1 -p 10000

   there are also three sample clients implemented in [134]c++,
   [135]python, and [136]java. a client reads a string representation of a
   query object from the standard stream. the format is the same as the
   format of objects in a data file. here is an example of searching for
   ten vectors closest to the first data set vector (stored in row one) of
   a provided sample data file:
export data_file=../../sample_data/final8_10k.txt
head -1 $data_file | ./query_client -p 10000 -a localhost  -k 10

   it is also possible to generate client classes for other languages
   supported by thrift from [137]the interface definition file, e.g., for
   c#. to this end, one should invoke the thrift compiler as follows:
thrift --gen csharp  protocol.thrift

   for instructions on using generated code, please consult the
   [138]apache thrift tutorial.

python bindings

   we provide python bindings for python 2.7+ and python 3.5+, which have
   been tested under linux, osx and windows. to install:
pip install nmslib

   for examples of using the python api, please, see the readme in the
   [139]python_bindings folder. [140]more detailed documentation is also
   available (thanks to ben frederickson).

quick start on windows

   building on windows requires [141]visual studio 2015 express for
   desktop and [142]cmake for windows. first, generate visual studio
   solution file for 64 bit architecture using cmake gui. you have to
   specify both the platform and the version of visual studio. then, the
   generated solution can be built using visual studio. attention: this
   way of building on windows is not well tested yet. we suspect that
   there might be some issues related to building truly 64-bit binaries.

data sets

   we use several data sets, which were created either by other folks, or
   using 3d party software. if you use these data sets, please, consider
   giving proper credit. the download scripts prints respective bibtex
   entries. more information can be found [143]in the manual.

   here is the list of scripts to download major data sets:
     * data sets for our nips'13 and sisap'13 papers
       [144]data/get_data_nips2013.sh.
     * data sets for our vldb'15 paper [145]data/get_data_vldb2015.sh.

   the downloaded data needs to be decompressed (you may need 7z, gzip,
   and bzip2)

related publications

   most important related papers are listed below in the chronological
   order:
     * l. boytsov, d. novak, y. malkov, e. nyberg (2016). [146]off the
       beaten path: let   s replace term-based retrieval with id92 search.
       in proceedings of cikm'16. [147][bibtex] we use a special branch of
       this library, plus [148]the following java code.
     * malkov, y.a., yashunin, d.a.. (2016). [149]efficient and robust
       approximate nearest neighbor search using hierarchical navigable
       small world graphs. corr, abs/1603.09320. [150][bibtex]
     * bilegsaikhan, n., boytsov, l. 2015 [151]permutation search methods
       are efficient, yet faster search is possible pvldb,
       8(12):1618--1629, 2015 [152][bibtex]
     * ponomarenko, a., averlin, n., bilegsaikhan, n., boytsov, l., 2014.
       [153]comparative analysis of data structures for approximate
       nearest neighbor search. [154][bibtex]
     * malkov, y., ponomarenko, a., logvinov, a., & krylov, v., 2014.
       [155]approximate nearest neighbor algorithm based on navigable
       small world graphs. information systems, 45, 61-68. [156][bibtex]
     * boytsov, l., bilegsaikhan, n., 2013. [157]engineering efficient and
       effective non-metric space library. in proceedings of the 6th
       international conference on similarity search and applications
       (sisap 2013). [158][bibtex]
     * boytsov, l., bilegsaikhan, n., 2013. [159]learning to prune in
       metric and non-metric spaces. in advances in neural information
       processing systems 2013. [160][bibtex]
     * tellez, eric sadit, edgar ch  vez, and gonzalo navarro.
       [161]succinct nearest neighbor search. information systems 38.7
       (2013): 1019-1030. [162][bibtex]
     * a. ponomarenko, y. malkov, a. logvinov, , and v. krylov
       [163]approximate nearest neighbor search small world approach. icta
       2011
     * dong, wei, charikar moses, and kai li. 2011. [164]efficient
       k-nearest neighbor graph construction for generic similarity
       measures. proceedings of the 20th international conference on world
       wide web. acm, 2011. [165][bibtex]
     * l. cayton, 2008 [166]fast nearest neighbor retrieval for bregman
       divergences. twenty-fifth international conference on machine
       learning (icml). [167][bibtex]
     * amato, giuseppe, and pasquale savino. 2008 approximate similarity
       search in metric spaces using inverted files. [168][bibtex]
     * gonzalez, edgar chavez, karina figueroa, and gonzalo navarro.
       [169]effective proximity retrieval by ordering permutations.
       pattern analysis and machine intelligence, ieee transactions on
       30.9 (2008): 1647-1658. [170][bibtex]

     *    2019 github, inc.
     * [171]terms
     * [172]privacy
     * [173]security
     * [174]status
     * [175]help

     * [176]contact github
     * [177]pricing
     * [178]api
     * [179]training
     * [180]blog
     * [181]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [182]reload to refresh your
   session. you signed out in another tab or window. [183]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/nmslib/nmslib/commits/master.atom
   3. https://github.com/nmslib/nmslib#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/nmslib/nmslib
  32. https://github.com/join
  33. https://github.com/login?return_to=/nmslib/nmslib
  34. https://github.com/nmslib/nmslib/watchers
  35. https://github.com/login?return_to=/nmslib/nmslib
  36. https://github.com/nmslib/nmslib/stargazers
  37. https://github.com/login?return_to=/nmslib/nmslib
  38. https://github.com/nmslib/nmslib/network/members
  39. https://github.com/nmslib
  40. https://github.com/nmslib/nmslib
  41. https://github.com/nmslib/nmslib
  42. https://github.com/nmslib/nmslib/issues
  43. https://github.com/nmslib/nmslib/pulls
  44. https://github.com/nmslib/nmslib/projects
  45. https://github.com/nmslib/nmslib/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/topics/knn-search
  48. https://github.com/topics/non-metric
  49. https://github.com/topics/neighborhood-graphs
  50. https://github.com/topics/id92-graphs
  51. https://github.com/topics/proximity-graphs
  52. https://github.com/topics/lsh
  53. https://github.com/topics/locality-sensitive-hashing
  54. https://github.com/nmslib/nmslib/commits/master
  55. https://github.com/nmslib/nmslib/branches
  56. https://github.com/nmslib/nmslib/releases
  57. https://github.com/nmslib/nmslib/graphs/contributors
  58. https://github.com/nmslib/nmslib/search?l=c++
  59. https://github.com/nmslib/nmslib/search?l=tex
  60. https://github.com/nmslib/nmslib/search?l=python
  61. https://github.com/nmslib/nmslib/search?l=perl
  62. https://github.com/nmslib/nmslib/search?l=jupyter-notebook
  63. https://github.com/nmslib/nmslib/search?l=shell
  64. https://github.com/nmslib/nmslib/find/master
  65. https://github.com/nmslib/nmslib/archive/master.zip
  66. https://github.com/login?return_to=https://github.com/nmslib/nmslib
  67. https://github.com/join?return_to=/nmslib/nmslib
  68. https://desktop.github.com/
  69. https://desktop.github.com/
  70. https://developer.apple.com/xcode/
  71. https://visualstudio.github.com/
  72. https://github.com/searchivarius
  73. https://github.com/nmslib/nmslib/commits?author=searchivarius
  74. https://github.com/nmslib/nmslib/commit/3068df834e16f26b72046dcbc59b4b44d8a832d3
  75. https://github.com/nmslib/nmslib/commit/3068df834e16f26b72046dcbc59b4b44d8a832d3
  76. https://github.com/nmslib/nmslib/tree/3068df834e16f26b72046dcbc59b4b44d8a832d3
  77. https://github.com/nmslib/nmslib/tree/master/data
  78. https://github.com/nmslib/nmslib/tree/master/docs
  79. https://github.com/nmslib/nmslib/commit/2e424ef7c6eff10ecaf47392fd99f93f645e752f
  80. https://github.com/nmslib/nmslib/tree/master/manual
  81. https://github.com/nmslib/nmslib/commit/f443b1f55fba5d6175f3454745cd0a3280e7c787
  82. https://github.com/nmslib/nmslib/tree/master/previous_releases_scripts
  83. https://github.com/nmslib/nmslib/commit/dd470f2dbad7b4cf003014f188c688f6e8a3c2fd
  84. https://github.com/nmslib/nmslib/tree/master/python_bindings
  85. https://github.com/nmslib/nmslib/commit/1eda05dccd5ed34df50a243dfc64c5e9187388f8
  86. https://github.com/nmslib/nmslib/tree/master/query_server
  87. https://github.com/nmslib/nmslib/commit/6c1a64bf58b58c731e862327101199cbcc2abd0a
  88. https://github.com/nmslib/nmslib/tree/master/sample_data
  89. https://github.com/nmslib/nmslib/commit/524883d5d072b3ac4c37f43fd225b729bca3ddfb
  90. https://github.com/nmslib/nmslib/tree/master/sample_standalone_app
  91. https://github.com/nmslib/nmslib/commit/b1333295b820ec347dbd69822305a543ecea95b4
  92. https://github.com/nmslib/nmslib/issues/335
  93. https://github.com/nmslib/nmslib/tree/master/scripts
  94. https://github.com/nmslib/nmslib/commit/82c6f8b34d778d32d4eb05c107e2a610a78b8220
  95. https://github.com/nmslib/nmslib/tree/master/similarity_search
  96. https://github.com/nmslib/nmslib/commit/ac07969354e08439fc1a1829c30602ef798c8c7e
  97. https://github.com/nmslib/nmslib/tree/master/test_batch_app
  98. https://github.com/nmslib/nmslib/blob/master/.appveyor.yml
  99. https://github.com/nmslib/nmslib/blob/master/.gitignore
 100. https://github.com/nmslib/nmslib/commit/74a8dbf0d5fc7fd4fc91549345059361189adf80
 101. https://github.com/nmslib/nmslib/blob/master/.travis.yml
 102. https://github.com/nmslib/nmslib/blob/master/readme.md
 103. http://pypi.python.org/pypi/nmslib
 104. https://travis-ci.org/nmslib/nmslib
 105. https://ci.appveyor.com/project/searchivarius/nmslib
 106. https://gitter.im/nmslib/lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
 107. https://github.com/nmslib/nmslib/releases/tag/v1.7.3.6
 108. https://github.com/nmslib/nmslib/blob/master/python_bindings
 109. https://github.com/nmslib/nmslib/blob/master/python_bindings/parameters.md
 110. http://dblp.uni-trier.de/rec/bibtex/conf/sisap/boytsovn13
 111. https://dblp.uni-trier.de/rec/bibtex/journals/corr/malkovy16
 112. https://github.com/nmslib/hnswlib
 113. https://github.com/oaqa
 114. https://www.nsf.gov/awardsearch/showaward?awd_id=1618159&historicalawards=false
 115. https://web.archive.org/web/20160306011711/http://www.iad-center.com/
 116. https://github.com/nmslib/nmslib/tree/develop
 117. http://boytsov.info/pubs/p2332-naidan-arxiv.pdf
 118. https://github.com/erikbern/ann-benchmarks
 119. https://github.com/spotify/annoy
 120. https://github.com/falconn-lib/falconn
 121. http://nlp.stanford.edu/projects/glove/
 122. http://corpus-texmex.irisa.fr/
 123. https://raw.githubusercontent.com/nmslib/nmslib/master/manual/figures/glove.png
 124. https://raw.githubusercontent.com/nmslib/nmslib/master/manual/figures/sift.png
 125. https://github.com/nmslib/nmslib/releases/tag/v1.6
 126. https://github.com/falconn-lib/falconn
 127. https://github.com/nmslib/nmslib/blob/master/manual/manual.pdf
 128. https://nmslib.github.io/nmslib/
 129. http://www.apache.org/licenses/
 130. http://www.gnu.org/licenses/
 131. https://github.com/nmslib/nmslib/blob/master/previous_releases_scripts
 132. https://thrift.apache.org/manual/buildingfromsource
 133. https://github.com/nmslib/nmslib/blob/master/query_server/cpp_client_server
 134. https://github.com/nmslib/nmslib/blob/master/query_server/cpp_client_server
 135. https://github.com/nmslib/nmslib/blob/master/query_server/python_client
 136. https://github.com/nmslib/nmslib/blob/master/query_server/java_client
 137. https://github.com/nmslib/nmslib/blob/master/query_server/protocol.thrift
 138. https://thrift.apache.org/tutorial/
 139. https://github.com/nmslib/nmslib/blob/master/python_bindings
 140. https://nmslib.github.io/nmslib/
 141. https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx
 142. https://cmake.org/download/
 143. https://github.com/nmslib/nmslib/blob/master/manual/manual.pdf
 144. https://github.com/nmslib/nmslib/blob/master/data/get_data_nips2013.sh
 145. https://github.com/nmslib/nmslib/blob/master/data/get_data_vldb2015.sh
 146. http://boytsov.info/pubs/cikm2016.pdf
 147. http://dblp.uni-trier.de/rec/bibtex/conf/cikm/boytsovnmn16
 148. https://github.com/oaqa/knn4qa/tree/cikm2016
 149. http://arxiv.org/abs/1603.09320
 150. http://adsabs.harvard.edu/cgi-bin/nph-bib_query?bibcode=2016arxiv160309320m&data_type=bibtex&db_key=pre&nocookieset=1
 151. http://boytsov.info/pubs/p2332-naidan-arxiv.pdf
 152. http://dblp.uni-trier.de/rec/bibtex/journals/corr/naidanbn15
 153. http://boytsov.info/pubs/da2014.pdf
 154. http://scholar.google.com/scholar.bib?q=info:yojnit2ql4aj:scholar.google.com/&output=citation&hl=en&ct=citation&cd=0
 155. http://www.sciencedirect.com/science/article/pii/s0306437913001300
 156. http://dblp.uni-trier.de/rec/bibtex/journals/is/malkovplk14
 157. http://boytsov.info/pubs/sisap2013.pdf
 158. http://dblp.uni-trier.de/rec/bibtex/conf/sisap/boytsovn13
 159. http://boytsov.info/pubs/nips2013.pdf
 160. http://dblp.uni-trier.de/rec/bibtex/conf/nips/boytsovn13
 161. http://www.dcc.uchile.cl/~gnavarro/ps/is12.pdf
 162. http://dblp.uni-trier.de/rec/bibtex/journals/is/tellezcn13
 163. http://www.iiis.org/cds2011/cd2011idi/icta_2011/abstract.asp?myurl=ct175on.pdf
 164. http://wwwconference.org/proceedings/www2011/proceedings/p577.pdf
 165. http://dblp.uni-trier.de/rec/bibtex/conf/mir/dongwcl12
 166. http://lcayton.com/bbtree.pdf
 167. http://dblp.uni-trier.de/rec/bibtex/conf/icml/cayton08
 168. http://dblp.uni-trier.de/rec/bibtex/conf/infoscale/amatos08
 169. http://www.dcc.uchile.cl/~gnavarro/ps/tpami07.pdf
 170. http://dblp.uni-trier.de/rec/bibtex/journals/pami/chavezfn08
 171. https://github.com/site/terms
 172. https://github.com/site/privacy
 173. https://github.com/security
 174. https://githubstatus.com/
 175. https://help.github.com/
 176. https://github.com/contact
 177. https://github.com/pricing
 178. https://developer.github.com/
 179. https://training.github.com/
 180. https://github.blog/
 181. https://github.com/about
 182. https://github.com/nmslib/nmslib
 183. https://github.com/nmslib/nmslib

   hidden links:
 185. https://github.com/
 186. https://github.com/nmslib/nmslib
 187. https://github.com/nmslib/nmslib
 188. https://github.com/nmslib/nmslib
 189. https://help.github.com/articles/which-remote-url-should-i-use
 190. https://github.com/nmslib/nmslib#non-metric-space-library-nmslib
 191. https://github.com/nmslib/nmslib#the-latest-pre-release-is-1736-note-that-the-manual-is-not-updated-to-reflect-some-of-the-changes-in-particular-we-changed-the-build-procedure-for-windows-also-note-that-the-manual-targets-primiarily-developers-who-will-extend-the-library-for-most-other-folks-python-binding-docs-should-be-sufficient-the-basic-parameter-tuningselection-guidelines-are-also-available-online
 192. https://github.com/nmslib/nmslib#nmslib-is-generic-yet-fast
 193. https://github.com/nmslib/nmslib#whats-new-in-version-16-see-this-page-for-more-details-
 194. https://github.com/nmslib/nmslib#general-information
 195. https://github.com/nmslib/nmslib#prerequisites
 196. https://github.com/nmslib/nmslib#limitations
 197. https://github.com/nmslib/nmslib#quick-start-on-linux
 198. https://github.com/nmslib/nmslib#query-server-linux-only
 199. https://github.com/nmslib/nmslib#python-bindings
 200. https://github.com/nmslib/nmslib#quick-start-on-windows
 201. https://github.com/nmslib/nmslib#data-sets
 202. https://github.com/nmslib/nmslib#related-publications
 203. https://github.com/
