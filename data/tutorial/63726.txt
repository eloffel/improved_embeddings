   #[1]github [2]recent commits to annoy:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]304
     * [35]star [36]5,129
     * [37]fork [38]588

[39]spotify/[40]annoy

   [41]code [42]issues 5 [43]pull requests 4 [44]projects 0 [45]wiki
   [46]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [47]sign up
   approximate nearest neighbors in c++/python optimized for memory usage
   and loading/saving to disk
   [48]c-plus-plus [49]python [50]nearest-neighbor-search
   [51]locality-sensitive-hashing [52]approximate-nearest-neighbor-search
   [53]golang [54]lua
     * [55]628 commits
     * [56]16 branches
     * [57]13 releases
     * [58]fetching contributors
     * [59]apache-2.0

    1. [60]c++ 44.0%
    2. [61]python 34.6%
    3. [62]lua 11.3%
    4. [63]c 5.3%
    5. [64]go 4.8%

   (button) c++ python lua c go
   branch: master (button) new pull request
   [65]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/s
   [66]download zip

downloading...

   want to be notified of new releases in spotify/annoy?
   [67]sign in [68]sign up

launching github desktop...

   if nothing happens, [69]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [70]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [71]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [72]download the github extension for visual studio
   and try again.

   (button) go back
   [73]@erikbern
   [74]erikbern [75]merge pull request [76]#366 [77]from
   spotify/popcount-fix (button)    
use cole_popcount for all versions of visual studio

   latest commit [78]283344a feb 24, 2019
   [79]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [80]annoy [81]remove subclass jul 24, 2017
   [82]debian [83]removed boost from debian/control and .travis.yml apr
   30, 2015
   [84]examples [85]add random header sep 19, 2018
   [86]src [87]use cole_popcount for all versions of visual studio feb 24,
   2019
   [88]test [89]add test_get_n_trees() dec 12, 2018
   [90].gitignore
   [91].travis.yml [92]use dist: xenial with python 3.7 aug 31, 2018
   [93]license
   [94]manifest.in
   [95]readme.rst
   [96]readme_go.rst
   [97]readme_lua.md
   [98]release.md [99]version 1.11.4 feb 6, 2018
   [100]ann.png [101]converted documentation to rst, cropped image, fixed
   pypi format jun 4, 2014
   [102]annoy-dev-1.rockspec
   [103]appveyor.yml
   [104]setup.id18
   [105]setup.py
   [106]tox.ini

readme.rst

annoy

   [107]annoy example
   [108]https://img.shields.io/travis/spotify/annoy/master.svg?style=flat
   [109]https://ci.appveyor.com/api/projects/status/github/spotify/annoy?s
   vg=true&pendingtext=windows%20-%20pending&passingtext=windows%20-%20ok&
   failingtext=windows%20-%20failing
   [110]https://img.shields.io/pypi/v/annoy.svg?style=flat

   annoy ([111]approximate nearest neighbors oh yeah) is a c++ library
   with python bindings to search for points in space that are close to a
   given query point. it also creates large read-only file-based data
   structures that are [112]mmapped into memory so that many processes may
   share the same data.

install

   to install, simply do pip install --user annoy to pull down the latest
   version from [113]pypi.

   for the c++ version, just clone the repo and #include "annoylib.h".

background

   there are some other libraries to do nearest neighbor search. annoy is
   almost as fast as the fastest libraries, (see below), but there is
   actually another feature that really sets annoy apart: it has the
   ability to use static files as indexes. in particular, this means you
   can share index across processes. annoy also decouples creating indexes
   from loading them, so you can pass around indexes as files and map them
   into memory quickly. another nice thing of annoy is that it tries to
   minimize memory footprint so the indexes are quite small.

   why is this useful? if you want to find nearest neighbors and you have
   many cpu's, you only need to build the index once. you can also pass
   around and distribute static files to use in production environment, in
   hadoop jobs, etc. any process will be able to load (mmap) the index
   into memory and will be able to do lookups immediately.

   we use it at [114]spotify for music recommendations. after running
   id105 algorithms, every user/item can be represented as
   a vector in f-dimensional space. this library helps us search for
   similar users/items. we have many millions of tracks in a
   high-dimensional space, so memory usage is a prime concern.

   annoy was built by [115]erik bernhardsson in a couple of afternoons
   during [116]hack week.

summary of features

     * [117]euclidean distance, [118]manhattan distance, [119]cosine
       distance, [120]hamming distance, or [121]dot (inner) product
       distance
     * cosine distance is equivalent to euclidean distance of normalized
       vectors = sqrt(2-2*cos(u, v))
     * works better if you don't have too many dimensions (like <100) but
       seems to perform surprisingly well even up to 1,000 dimensions
     * small memory usage
     * lets you share memory between multiple processes
     * index creation is separate from lookup (in particular you can not
       add more items once the tree has been created)
     * native python support, tested with 2.7, 3.6, and 3.7.
     * build index on disk to enable indexing big datasets that won't fit
       into memory (contributed by [122]rene hollander)

python code example

from annoy import annoyindex
import random

f = 40
t = annoyindex(f)  # length of item vector that will be indexed
for i in xrange(1000):
    v = [random.gauss(0, 1) for z in xrange(f)]
    t.add_item(i, v)

t.build(10) # 10 trees
t.save('test.ann')

# ...

u = annoyindex(f)
u.load('test.ann') # super fast, will just mmap the file
print(u.get_nns_by_item(0, 1000)) # will find the 1000 nearest neighbors

   right now it only accepts integers as identifiers for items. note that
   it will allocate memory for max(id)+1 items because it assumes your
   items are numbered 0     n-1. if you need other id's, you will have to
   keep track of a map yourself.

full python api

     * annoyindex(f, metric='angular') returns a new index that's
       read-write and stores vector of f dimensions. metric can be
       "angular", "euclidean", "manhattan", "hamming", or "dot".
     * a.add_item(i, v) adds item i (any nonnegative integer) with vector
       v. note that it will allocate memory for max(i)+1 items.
     * a.build(n_trees) builds a forest of n_trees trees. more trees gives
       higher precision when querying. after calling build, no more items
       can be added.
     * a.save(fn, prefault=false) saves the index to disk and loads it
       (see next function). after saving, no more items can be added.
     * a.load(fn, prefault=false) loads (mmaps) an index from disk. if
       prefault is set to true, it will pre-read the entire file into
       memory (using mmap with map_populate). default is false.
     * a.unload() unloads.
     * a.get_nns_by_item(i, n, search_k=-1, include_distances=false)
       returns the n closest items. during the query it will inspect up to
       search_k nodes which defaults to n_trees * n if not provided.
       search_k gives you a run-time tradeoff between better accuracy and
       speed. if you set include_distances to true, it will return a 2
       element tuple with two lists in it: the second one containing all
       corresponding distances.
     * a.get_nns_by_vector(v, n, search_k=-1, include_distances=false)
       same but query by vector v.
     * a.get_item_vector(i) returns the vector for item i that was
       previously added.
     * a.get_distance(i, j) returns the distance between items i and j.
       note: this used to return the squared distance, but has been
       changed as of aug 2016.
     * a.get_n_items() returns the number of items in the index.
     * a.get_n_trees() returns the number of trees in the index.
     * a.on_disk_build(fn) prepares annoy to build the index in the
       specified file instead of ram (execute before adding items, no need
       to save after build)

   notes:
     * there's no bounds checking performed on the values so be careful.
     * annoy uses euclidean distance of normalized vectors for its angular
       distance, which for two vectors u,v is equal to sqrt(2(1-cos(u,v)))

   the c++ api is very similar: just #include "annoylib.h" to get access
   to it.

tradeoffs

   there are just two main parameters needed to tune annoy: the number of
   trees n_trees and the number of nodes to inspect during searching
   search_k.
     * n_trees is provided during build time and affects the build time
       and the index size. a larger value will give more accurate results,
       but larger indexes.
     * search_k is provided in runtime and affects the search performance.
       a larger value will give more accurate results, but will take
       longer time to return.

   if search_k is not provided, it will default to n * n_trees * d where n
   is the number of approximate nearest neighbors and d is a constant
   depending on the metric. otherwise, search_k and n_trees are roughly
   independent, i.e. a the value of n_trees will not affect search time if
   search_k is held constant and vice versa. basically it's recommended to
   set n_trees as large as possible given the amount of memory you can
   afford, and it's recommended to set search_k as large as possible given
   the time constraints you have for the queries.

   you can also accept slower search times in favour of reduced loading
   times, memory usage, and disk io. on supported platforms the index is
   prefaulted during load and save, causing the file to be pre-emptively
   read from disk into memory. if you set prefault to false, pages of the
   mmapped index are instead read from disk and cached in memory
   on-demand, as necessary for a search to complete. this can
   significantly increase early search times but may be better suited for
   systems with low memory compared to index size, when few queries are
   executed against a loaded index, and/or when large areas of the index
   are unlikely to be relevant to search queries.

how does it work

   using [123]random projections and by building up a tree. at every
   intermediate node in the tree, a random hyperplane is chosen, which
   divides the space into two subspaces. this hyperplane is chosen by
   sampling two points from the subset and taking the hyperplane
   equidistant from them.

   we do this k times so that we get a forest of trees. k has to be tuned
   to your need, by looking at what tradeoff you have between precision
   and performance.

   hamming distance (contributed by [124]martin aum  ller) packs the data
   into 64-bit integers under the hood and uses built-in bit count
   primitives so it could be quite fast. all splits are axis-aligned.

   dot product distance (contributed by [125]peter sobot) reduces the
   provided vectors from dot (or "inner-product") space to a more
   query-friendly cosine space using [126]a method by bachrach et al., at
   microsoft research, published in 2014.

more info

     * [127]dirk eddelbuettel provides an [128]r version of annoy.
     * [129]andy sloane provides a [130]java version of annoy although
       currently limited to cosine and read-only.
     * [131]pishen tsai provides a [132]scala wrapper of annoy which uses
       jna to call the c++ library of annoy.
     * there is [133]experimental support for go provided by [134]taneli
       lepp  .
     * [135]boris nagaev wrote [136]lua bindings.
     * during part of spotify hack week 2016 (and a bit afterward),
       [137]jim kang wrote [138]node bindings for annoy.
     * [139]min-seok kim built a [140]scala version of annoy.
     * [141]presentation from new york machine learning meetup about annoy
     * radim   eh    ek's blog posts comparing annoy to a couple of other
       similar python libraries: [142]intro, [143]contestants,
       [144]querying
     * [145]ann-benchmarks is a benchmark for several approximate nearest
       neighbor libraries. annoy seems to be fairly competitive,
       especially at higher precisions:

   [146]ann benchmarks

source code

   it's all written in c++ with a handful of ugly optimizations for
   performance and memory usage. you have been warned :)

   the code should support windows, thanks to [147]qiang kou and
   [148]timothy riley.

   to run the tests, execute python setup.py nosetests. the test suite
   includes a big real world dataset that is downloaded from the internet,
   so it will take a few minutes to execute.

discuss

   feel free to post any questions or comments to the [149]annoy-user
   group. i'm [150]@fulhack on twitter.

     *    2019 github, inc.
     * [151]terms
     * [152]privacy
     * [153]security
     * [154]status
     * [155]help

     * [156]contact github
     * [157]pricing
     * [158]api
     * [159]training
     * [160]blog
     * [161]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [162]reload to refresh your
   session. you signed out in another tab or window. [163]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/spotify/annoy/commits/master.atom
   3. https://github.com/spotify/annoy#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/spotify/annoy
  32. https://github.com/join
  33. https://github.com/login?return_to=/spotify/annoy
  34. https://github.com/spotify/annoy/watchers
  35. https://github.com/login?return_to=/spotify/annoy
  36. https://github.com/spotify/annoy/stargazers
  37. https://github.com/login?return_to=/spotify/annoy
  38. https://github.com/spotify/annoy/network/members
  39. https://github.com/spotify
  40. https://github.com/spotify/annoy
  41. https://github.com/spotify/annoy
  42. https://github.com/spotify/annoy/issues
  43. https://github.com/spotify/annoy/pulls
  44. https://github.com/spotify/annoy/projects
  45. https://github.com/spotify/annoy/wiki
  46. https://github.com/spotify/annoy/pulse
  47. https://github.com/join?source=prompt-code
  48. https://github.com/topics/c-plus-plus
  49. https://github.com/topics/python
  50. https://github.com/topics/nearest-neighbor-search
  51. https://github.com/topics/locality-sensitive-hashing
  52. https://github.com/topics/approximate-nearest-neighbor-search
  53. https://github.com/topics/golang
  54. https://github.com/topics/lua
  55. https://github.com/spotify/annoy/commits/master
  56. https://github.com/spotify/annoy/branches
  57. https://github.com/spotify/annoy/releases
  58. https://github.com/spotify/annoy/graphs/contributors
  59. https://github.com/spotify/annoy/blob/master/license
  60. https://github.com/spotify/annoy/search?l=c++
  61. https://github.com/spotify/annoy/search?l=python
  62. https://github.com/spotify/annoy/search?l=lua
  63. https://github.com/spotify/annoy/search?l=c
  64. https://github.com/spotify/annoy/search?l=go
  65. https://github.com/spotify/annoy/find/master
  66. https://github.com/spotify/annoy/archive/master.zip
  67. https://github.com/login?return_to=https://github.com/spotify/annoy
  68. https://github.com/join?return_to=/spotify/annoy
  69. https://desktop.github.com/
  70. https://desktop.github.com/
  71. https://developer.apple.com/xcode/
  72. https://visualstudio.github.com/
  73. https://github.com/erikbern
  74. https://github.com/spotify/annoy/commits?author=erikbern
  75. https://github.com/spotify/annoy/commit/283344a5596d99e6edacb8de8f60aa9381a4a6fe
  76. https://github.com/spotify/annoy/pull/366
  77. https://github.com/spotify/annoy/commit/283344a5596d99e6edacb8de8f60aa9381a4a6fe
  78. https://github.com/spotify/annoy/commit/283344a5596d99e6edacb8de8f60aa9381a4a6fe
  79. https://github.com/spotify/annoy/tree/283344a5596d99e6edacb8de8f60aa9381a4a6fe
  80. https://github.com/spotify/annoy/tree/master/annoy
  81. https://github.com/spotify/annoy/commit/34731c5d1cdc3f938cde5cfa01d1e8c75553009d
  82. https://github.com/spotify/annoy/tree/master/debian
  83. https://github.com/spotify/annoy/commit/178b3644946fcb57069239987667931bd6ec6571
  84. https://github.com/spotify/annoy/tree/master/examples
  85. https://github.com/spotify/annoy/commit/a9fd569bebdb9f3e550967e458bedfb60ddd056c
  86. https://github.com/spotify/annoy/tree/master/src
  87. https://github.com/spotify/annoy/commit/76fc57aa97b4c187070243455dee70bf5e67d199
  88. https://github.com/spotify/annoy/tree/master/test
  89. https://github.com/spotify/annoy/commit/0a53a5dd7e3657380a281bd64fae2207e2fd63c9
  90. https://github.com/spotify/annoy/blob/master/.gitignore
  91. https://github.com/spotify/annoy/blob/master/.travis.yml
  92. https://github.com/spotify/annoy/commit/486e2cc64c8a337852643f26f2eb484bfe8bde60
  93. https://github.com/spotify/annoy/blob/master/license
  94. https://github.com/spotify/annoy/blob/master/manifest.in
  95. https://github.com/spotify/annoy/blob/master/readme.rst
  96. https://github.com/spotify/annoy/blob/master/readme_go.rst
  97. https://github.com/spotify/annoy/blob/master/readme_lua.md
  98. https://github.com/spotify/annoy/blob/master/release.md
  99. https://github.com/spotify/annoy/commit/0e9253dbe3680a57fc97d85114792d030f42030b
 100. https://github.com/spotify/annoy/blob/master/ann.png
 101. https://github.com/spotify/annoy/commit/0e25473ce93515d3499d7d84a6c10aebc2e55319
 102. https://github.com/spotify/annoy/blob/master/annoy-dev-1.rockspec
 103. https://github.com/spotify/annoy/blob/master/appveyor.yml
 104. https://github.com/spotify/annoy/blob/master/setup.id18
 105. https://github.com/spotify/annoy/blob/master/setup.py
 106. https://github.com/spotify/annoy/blob/master/tox.ini
 107. https://camo.githubusercontent.com/d6bf20e534ab76b67c731b566859a24149a4bf80/68747470733a2f2f7261772e6769746875622e636f6d2f73706f746966792f616e6e6f792f6d61737465722f616e6e2e706e67
 108. https://travis-ci.org/spotify/annoy
 109. https://ci.appveyor.com/project/erikbern/annoy
 110. https://pypi.python.org/pypi/annoy
 111. http://en.wikipedia.org/wiki/nearest_neighbor_search#approximate_nearest_neighbor
 112. https://en.wikipedia.org/wiki/mmap
 113. https://pypi.python.org/pypi/annoy
 114. http://www.spotify.com/
 115. http://www.erikbern.com/
 116. http://labs.spotify.com/2013/02/15/organizing-a-hack-week/
 117. https://en.wikipedia.org/wiki/euclidean_distance
 118. https://en.wikipedia.org/wiki/taxicab_geometry
 119. https://en.wikipedia.org/wiki/cosine_similarity
 120. https://en.wikipedia.org/wiki/hamming_distance
 121. https://en.wikipedia.org/wiki/dot_product
 122. https://github.com/renehollander
 123. http://en.wikipedia.org/wiki/locality-sensitive_hashing#random_projection
 124. https://github.com/maumueller
 125. https://github.com/psobot
 126. https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/xboxinnerproduct.pdf
 127. https://github.com/eddelbuettel
 128. http://dirk.eddelbuettel.com/code/rcpp.annoy.html
 129. https://github.com/a1k0n
 130. https://github.com/spotify/annoy-java
 131. https://github.com/pishen
 132. https://github.com/pishen/annoy4s
 133. https://github.com/spotify/annoy/blob/master/readme_go.rst
 134. https://github.com/rosmo
 135. https://github.com/starius
 136. https://github.com/spotify/annoy/blob/master/readme_lua.md
 137. https://github.com/jimkang
 138. https://github.com/jimkang/annoy-node
 139. https://github.com/mskimm
 140. https://github.com/mskimm/ann4s
 141. http://www.slideshare.net/erikbern/approximate-nearest-neighbor-methods-and-vector-models-nyc-ml-meetup
 142. http://radimrehurek.com/2013/11/performance-shootout-of-nearest-neighbours-intro/
 143. http://radimrehurek.com/2013/12/performance-shootout-of-nearest-neighbours-contestants/
 144. http://radimrehurek.com/2014/01/performance-shootout-of-nearest-neighbours-querying/
 145. https://github.com/erikbern/ann-benchmarks
 146. https://github.com/erikbern/ann-benchmarks
 147. https://github.com/thirdwing
 148. https://github.com/tjrileywisc
 149. https://groups.google.com/group/annoy-user
 150. https://twitter.com/fulhack
 151. https://github.com/site/terms
 152. https://github.com/site/privacy
 153. https://github.com/security
 154. https://githubstatus.com/
 155. https://help.github.com/
 156. https://github.com/contact
 157. https://github.com/pricing
 158. https://developer.github.com/
 159. https://training.github.com/
 160. https://github.blog/
 161. https://github.com/about
 162. https://github.com/spotify/annoy
 163. https://github.com/spotify/annoy

   hidden links:
 165. https://github.com/
 166. https://github.com/spotify/annoy
 167. https://github.com/spotify/annoy
 168. https://github.com/spotify/annoy
 169. https://help.github.com/articles/which-remote-url-should-i-use
 170. https://github.com/spotify/annoy#annoy
 171. https://github.com/spotify/annoy#install
 172. https://github.com/spotify/annoy#background
 173. https://github.com/spotify/annoy#summary-of-features
 174. https://github.com/spotify/annoy#python-code-example
 175. https://github.com/spotify/annoy#full-python-api
 176. https://github.com/spotify/annoy#tradeoffs
 177. https://github.com/spotify/annoy#how-does-it-work
 178. https://github.com/spotify/annoy#more-info
 179. https://github.com/spotify/annoy#source-code
 180. https://github.com/spotify/annoy#discuss
 181. https://github.com/
