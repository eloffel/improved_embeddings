   #[1]tensorflow

   (button)
   [2]tensorflow
     *

   [3]install [4]learn
     * [5]introduction
       new to tensorflow?
     * [6]tensorflow
       the core open source ml library
     * [7]for javascript
       tensorflow.js for ml using javascript
     * [8]for mobile & iot
       tensorflow lite for mobile and embedded devices
     * [9]for production
       tensorflow extended for end-to-end ml components
     * [10]swift for tensorflow (in beta)

   [11]api
     * api r1
     * [12]r1.13 (stable)
     * [13]r1.12
     * [14]r1.11
     * [15]r1.10
     * [16]r1.9
     * [17]more   

     * api r2
     * [18]r2.0 (preview)

   [19]resources
     * [20]models & datasets
       pre-trained models and datasets built by google and the community
     * [21]tools
       ecosystem of tools to help you use tensorflow
     * [22]libraries & extensions
       libraries and extensions built on tensorflow

   [23]community [24]why tensorflow
     * [25]about
     * [26]case studies

   ____________________
   (button)
   (button)
   [27]github
     * [28]tensorflow core

   [29]overview [30]tutorials [31]guide [32]tf 2.0 alpha

   (button)
     * [33]install
     * [34]learn
          + more
          + [35]overview
          + [36]tutorials
          + [37]guide
          + [38]tf 2.0 alpha
     * [39]api
          + more
     * [40]resources
          + more
     * [41]community
     * [42]why tensorflow
          + more
     * [43]github

     * [44]tensorflow guide
     * high level apis
     * [45]keras
     * [46]eager execution
     * [47]importing data
     * [48]introduction to estimators
     * estimators
     * [49]premade estimators
     * [50]checkpoints
     * [51]feature columns
     * [52]datasets for estimators
     * [53]creating custom estimators
     * accelerators
     * [54]distribute strategy
     * [55]using gpus
     * [56]using tpus
     * low level apis
     * [57]introduction
     * [58]tensors
     * [59]variables
     * [60]graphs and sessions
     * [61]save and restore
     * [62]control flow
     * [63]ragged tensors
     * ml concepts
     * [64]embeddings
     * debugging
     * [65]tensorflow debugger
     * performance
     * [66]overview
     * [67]data input pipeline
     * [68]benchmarks
     * extend
     * [69]tensorflow architecture
     * [70]create an op
     * [71]custom filesystem plugin
     * [72]custom file and record formats
     * [73]model files
     * [74]language bindings
     * [75]c++ guide
     * misc
     * [76]tensorflow version compatibility

     * [77]introduction
     * [78]tensorflow
     * [79]for javascript
     * [80]for mobile & iot
     * [81]for production
     * [82]swift for tensorflow (in beta)

     * api r1
     * [83]r1.13 (stable)
     * [84]r1.12
     * [85]r1.11
     * [86]r1.10
     * [87]r1.9
     * [88]more   
     * api r2
     * [89]r2.0 (preview)

     * [90]models & datasets
     * [91]tools
     * [92]libraries & extensions

     * [93]about
     * [94]case studies

   watch talks from the 2019 tensorflow dev summit [95]watch now
     * [96]tensorflow
     * [97]learn
     * [98]tensorflow core
     * [99]guide

tensors

   tensorflow, as the name indicates, is a framework to define and run
   computations involving tensors. a tensor is a generalization of vectors
   and matrices to potentially higher dimensions. internally, tensorflow
   represents tensors as n-dimensional arrays of base datatypes.

   when writing a tensorflow program, the main object you manipulate and
   pass around is the [100]tf.tensor. a [101]tf.tensor object represents a
   partially defined computation that will eventually produce a value.
   tensorflow programs work by first building a graph of [102]tf.tensor
   objects, detailing how each tensor is computed based on the other
   available tensors and then by running parts of this graph to achieve
   the desired results.

   a [103]tf.tensor has the following properties:
     * a data type (float32, int32, or string, for example)
     * a shape

   each element in the tensor has the same data type, and the data type is
   always known. the shape (that is, the number of dimensions it has and
   the size of each dimension) might be only partially known. most
   operations produce tensors of fully-known shapes if the shapes of their
   inputs are also fully known, but in some cases it's only possible to
   find the shape of a tensor at graph execution time.

   some types of tensors are special, and these will be covered in other
   units of the tensorflow guide. the main ones are:
     * [104]tf.variable
     * [105]tf.constant
     * [106]tf.placeholder
     * [107]tf.sparsetensor

   with the exception of [108]tf.variable, the value of a tensor is
   immutable, which means that in the context of a single execution
   tensors only have a single value. however, evaluating the same tensor
   twice can return different values; for example that tensor can be the
   result of reading data from disk, or generating a random number.

rank

   the rank of a [109]tf.tensor object is its number of dimensions.
   synonyms for rank include order or degree or n-dimension. note that
   rank in tensorflow is not the same as matrix rank in mathematics. as
   the following table shows, each rank in tensorflow corresponds to a
   different mathematical entity:
   rank           math entity
   0    scalar (magnitude only)
   1    vector (magnitude and direction)
   2    matrix (table of numbers)
   3    3-tensor (cube of numbers)
   n    n-tensor (you get the idea)

rank 0

   the following snippet demonstrates creating a few rank 0 variables:
mammal = tf.variable("elephant", tf.string)
ignition = tf.variable(451, tf.int16)
floating = tf.variable(3.14159265359, tf.float64)
its_complicated = tf.variable(12.3 - 4.85j, tf.complex64)

   note: a string is treated as a single object in tensorflow, not as a
   sequence of characters. it is possible to have scalar strings, vectors
   of strings, etc.

rank 1

   to create a rank 1 [110]tf.tensor object, you can pass a list of items
   as the initial value. for example:
mystr = tf.variable(["hello"], tf.string)
cool_numbers  = tf.variable([3.14159, 2.71828], tf.float32)
first_primes = tf.variable([2, 3, 5, 7, 11], tf.int32)
its_very_complicated = tf.variable([12.3 - 4.85j, 7.5 - 6.23j], tf.complex64)

higher ranks

   a rank 2 [111]tf.tensor object consists of at least one row and at
   least one column:
mymat = tf.variable([[7],[11]], tf.int16)
myxor = tf.variable([[false, true],[true, false]], tf.bool)
linear_squares = tf.variable([[4], [9], [16], [25]], tf.int32)
squarish_squares = tf.variable([ [4, 9], [16, 25] ], tf.int32)
rank_of_squares = tf.rank(squarish_squares)
mymatc = tf.variable([[7],[11]], tf.int32)

   higher-rank tensors, similarly, consist of an n-dimensional array. for
   example, during image processing, many tensors of rank 4 are used, with
   dimensions corresponding to example-in-batch, image width, image
   height, and color channel.
my_image = tf.zeros([10, 299, 299, 3])  # batch x height x width x color

getting a [112]tf.tensor object's rank

   to determine the rank of a [113]tf.tensor object, call the [114]tf.rank
   method. for example, the following method programmatically determines
   the rank of the [115]tf.tensor defined in the previous section:
r = tf.rank(my_image)
# after the graph runs, r will hold the value 4.

referring to [116]tf.tensor slices

   since a [117]tf.tensor is an n-dimensional array of cells, to access a
   single cell in a [118]tf.tensor you need to specify n indices.

   for a rank 0 tensor (a scalar), no indices are necessary, since it is
   already a single number.

   for a rank 1 tensor (a vector), passing a single index allows you to
   access a number:
my_scalar = my_vector[2]

   note that the index passed inside the [] can itself be a scalar
   [119]tf.tensor, if you want to dynamically choose an element from the
   vector.

   for tensors of rank 2 or higher, the situation is more interesting. for
   a [120]tf.tensor of rank 2, passing two numbers returns a scalar, as
   expected:
my_scalar = my_matrix[1, 2]

   passing a single number, however, returns a subvector of a matrix, as
   follows:
my_row_vector = my_matrix[2]
my_column_vector = my_matrix[:, 3]

   the : notation is python slicing syntax for "leave this dimension
   alone". this is useful in higher-rank tensors, as it allows you to
   access its subvectors, submatrices, and even other subtensors.

shape

   the shape of a tensor is the number of elements in each dimension.
   tensorflow automatically infers shapes during graph construction. these
   inferred shapes might have known or unknown rank. if the rank is known,
   the sizes of each dimension might be known or unknown.

   the tensorflow documentation uses three notational conventions to
   describe tensor dimensionality: rank, shape, and dimension number. the
   following table shows how these relate to one another:
rank       shape        dimension number                 example
0    []                 0-d              a 0-d tensor. a scalar.
1    [d0]               1-d              a 1-d tensor with shape [5].
2    [d0, d1]           2-d              a 2-d tensor with shape [3, 4].
3    [d0, d1, d2]       3-d              a 3-d tensor with shape [1, 4, 3].
n    [d0, d1, ... dn-1] n-d              a tensor with shape [d0, d1, ... dn-1].

   shapes can be represented via python lists / tuples of ints, or with
   the [121]tf.tensorshape.

getting a [122]tf.tensor object's shape

   there are two ways of accessing the shape of a [123]tf.tensor. while
   building the graph, it is often useful to ask what is already known
   about a tensor's shape. this can be done by reading the shape property
   of a [124]tf.tensor object. this method returns a tensorshape object,
   which is a convenient way of representing partially-specified shapes
   (since, when building the graph, not all shapes will be fully known).

   it is also possible to get a [125]tf.tensor that will represent the
   fully-defined shape of another [126]tf.tensor at runtime. this is done
   by calling the [127]tf.shape operation. this way, you can build a graph
   that manipulates the shapes of tensors by building other tensors that
   depend on the dynamic shape of the input [128]tf.tensor.

   for example, here is how to make a vector of zeros with the same size
   as the number of columns in a given matrix:
zeros = tf.zeros(my_matrix.shape[1])

changing the shape of a [129]tf.tensor

   the number of elements of a tensor is the product of the sizes of all
   its shapes. the number of elements of a scalar is always 1. since there
   are often many different shapes that have the same number of elements,
   it's often convenient to be able to change the shape of a
   [130]tf.tensor, keeping its elements fixed. this can be done with
   [131]tf.reshape.

   the following examples demonstrate how to reshape tensors:
rank_three_tensor = tf.ones([3, 4, 5])
matrix = tf.reshape(rank_three_tensor, [6, 10])  # reshape existing content into
                                                 # a 6x10 matrix
matrixb = tf.reshape(matrix, [3, -1])  #  reshape existing content into a 3x20
                                       # matrix. -1 tells reshape to calculate
                                       # the size of this dimension.
matrixalt = tf.reshape(matrixb, [4, 3, -1])  # reshape existing content into a
                                             #4x3x5 tensor

# note that the number of elements of the reshaped tensors has to match the
# original number of elements. therefore, the following example generates an
# error because no possible value for the last dimension will match the number
# of elements.
yet_another = tf.reshape(matrixalt, [13, 2, -1])  # error!

data types

   in addition to dimensionality, tensors have a data type. refer to the
   [132]tf.dtype page for a complete list of the data types.

   it is not possible to have a [133]tf.tensor with more than one data
   type. it is possible, however, to serialize arbitrary data structures
   as strings and store those in [134]tf.tensors.

   it is possible to cast [135]tf.tensors from one datatype to another
   using [136]tf.cast:
# cast a constant integer tensor into floating point.
float_tensor = tf.cast(tf.constant([1, 2, 3]), dtype=tf.float32)

   to inspect a [137]tf.tensor's data type use the tensor.dtype property.

   when creating a [138]tf.tensor from a python object you may optionally
   specify the datatype. if you don't, tensorflow chooses a datatype that
   can represent your data. tensorflow converts python integers to
   [139]tf.int32 and python floating point numbers to [140]tf.float32.
   otherwise tensorflow uses the same rules numpy uses when converting to
   arrays.

evaluating tensors

   once the computation graph has been built, you can run the computation
   that produces a particular [141]tf.tensor and fetch the value assigned
   to it. this is often useful for debugging as well as being required for
   much of tensorflow to work.

   the simplest way to evaluate a tensor is using the tensor.eval method.
   for example:
constant = tf.constant([1, 2, 3])
tensor = constant * constant
print(tensor.eval())

   the eval method only works when a default [142]tf.session is active
   (see [143]graphs and sessions for more information).

   tensor.eval returns a numpy array with the same contents as the tensor.

   sometimes it is not possible to evaluate a [144]tf.tensor with no
   context because its value might depend on dynamic information that is
   not available. for example, tensors that depend on placeholders can't
   be evaluated without providing a value for the placeholder.
p = tf.placeholder(tf.float32)
t = p + 1.0
t.eval()  # this will fail, since the placeholder did not get a value.
t.eval(feed_dict={p:2.0})  # this will succeed because we're feeding a value
                           # to the placeholder.

   note that it is possible to feed any [145]tf.tensor, not just
   placeholders.

   other model constructs might make evaluating a [146]tf.tensor
   complicated. tensorflow can't directly evaluate [147]tf.tensors defined
   inside functions or inside control flow constructs. if a [148]tf.tensor
   depends on a value from a queue, evaluating the [149]tf.tensor will
   only work once something has been enqueued; otherwise, evaluating it
   will hang. when working with queues, remember to call
   [150]tf.train.start_queue_runners before evaluating any
   [151]tf.tensors.

printing tensors

   for debugging purposes you might want to print the value of a
   [152]tf.tensor. while [153]tfdbg provides advanced debugging support,
   tensorflow also has an operation to directly print the value of a
   [154]tf.tensor.

   note that you rarely want to use the following pattern when printing a
   [155]tf.tensor:
t = <<some tensorflow operation>>
print(t)  # this will print the symbolic tensor when the graph is being built.
          # this tensor does not have a value in this context.

   this code prints the [156]tf.tensor object (which represents deferred
   computation) and not its value. instead, tensorflow provides the
   [157]tf.print operation, which returns its first tensor argument
   unchanged while printing the set of [158]tf.tensors it is passed as the
   second argument.

   to correctly use [159]tf.print its return value must be used. see the
   example below
t = <<some tensorflow operation>>
tf.print(t, [t])  # this does nothing
t = tf.print(t, [t])  # here we are using the value returned by tf.print
result = t + 1  # now when result is evaluated the value of `t` will be printed.

   when you evaluate result you will evaluate everything result depends
   upon. since result depends upon t, and evaluating t has the side effect
   of printing its input (the old value of t), t gets printed.

   except as otherwise noted, the content of this page is licensed under
   the [160]creative commons attribution 3.0 license, and code samples are
   licensed under the [161]apache 2.0 license. for details, see the
   [162]google developers site policies. java is a registered trademark of
   oracle and/or its affiliates.

     * stay connected
          + [163]blog
          + [164]github
          + [165]twitter
          + [166]youtube
     * support
          + [167]issue tracker
          + [168]release notes
          + [169]stack overflow
          + [170]brand guidelines

     * [171]terms
     * [172]privacy

   [english_______]

references

   visible links
   1. https://www.tensorflow.org/s/opensearch.xml
   2. https://www.tensorflow.org/
   3. https://www.tensorflow.org/install
   4. https://www.tensorflow.org/learn
   5. https://www.tensorflow.org/learn
   6. https://www.tensorflow.org/overview
   7. https://www.tensorflow.org/js
   8. https://www.tensorflow.org/lite
   9. https://www.tensorflow.org/tfx
  10. https://www.tensorflow.org/swift
  11. https://www.tensorflow.org/api_docs/python/tf
  12. https://www.tensorflow.org/api_docs/python/tf
  13. https://www.tensorflow.org/versions/r1.12/api_docs/python/tf
  14. https://www.tensorflow.org/versions/r1.11/api_docs/python/tf
  15. https://www.tensorflow.org/versions/r1.10/api_docs/python/tf
  16. https://www.tensorflow.org/versions/r1.9/api_docs/python/tf
  17. https://www.tensorflow.org/versions
  18. https://www.tensorflow.org/versions/r2.0/api_docs/python/tf
  19. https://www.tensorflow.org/resources/models-datasets
  20. https://www.tensorflow.org/resources/models-datasets
  21. https://www.tensorflow.org/resources/tools
  22. https://www.tensorflow.org/resources/libraries-extensions
  23. https://www.tensorflow.org/community
  24. https://www.tensorflow.org/about
  25. https://www.tensorflow.org/about
  26. https://www.tensorflow.org/about/case-studies
  27. https://github.com/tensorflow
  28. https://www.tensorflow.org/overview
  29. https://www.tensorflow.org/overview
  30. https://www.tensorflow.org/tutorials
  31. https://www.tensorflow.org/guide
  32. https://www.tensorflow.org/alpha
  33. https://www.tensorflow.org/install
  34. https://www.tensorflow.org/learn
  35. https://www.tensorflow.org/overview
  36. https://www.tensorflow.org/tutorials
  37. https://www.tensorflow.org/guide
  38. https://www.tensorflow.org/alpha
  39. https://www.tensorflow.org/api_docs/python/tf
  40. https://www.tensorflow.org/resources/models-datasets
  41. https://www.tensorflow.org/community
  42. https://www.tensorflow.org/about
  43. https://github.com/tensorflow
  44. https://www.tensorflow.org/guide
  45. https://www.tensorflow.org/guide/keras
  46. https://www.tensorflow.org/guide/eager
  47. https://www.tensorflow.org/guide/datasets
  48. https://www.tensorflow.org/guide/estimators
  49. https://www.tensorflow.org/guide/premade_estimators
  50. https://www.tensorflow.org/guide/checkpoints
  51. https://www.tensorflow.org/guide/feature_columns
  52. https://www.tensorflow.org/guide/datasets_for_estimators
  53. https://www.tensorflow.org/guide/custom_estimators
  54. https://www.tensorflow.org/guide/distribute_strategy
  55. https://www.tensorflow.org/guide/using_gpu
  56. https://www.tensorflow.org/guide/using_tpu
  57. https://www.tensorflow.org/guide/low_level_intro
  58. https://www.tensorflow.org/guide/tensors
  59. https://www.tensorflow.org/guide/variables
  60. https://www.tensorflow.org/guide/graphs
  61. https://www.tensorflow.org/guide/saved_model
  62. https://www.tensorflow.org/guide/autograph
  63. https://www.tensorflow.org/guide/ragged_tensors
  64. https://www.tensorflow.org/guide/embedding
  65. https://www.tensorflow.org/guide/debugger
  66. https://www.tensorflow.org/guide/performance/overview
  67. https://www.tensorflow.org/guide/performance/datasets
  68. https://www.tensorflow.org/guide/performance/benchmarks
  69. https://www.tensorflow.org/guide/extend/architecture
  70. https://www.tensorflow.org/guide/extend/op
  71. https://www.tensorflow.org/guide/extend/filesystem
  72. https://www.tensorflow.org/guide/extend/formats
  73. https://www.tensorflow.org/guide/extend/model_files
  74. https://www.tensorflow.org/guide/extend/bindings
  75. https://www.tensorflow.org/guide/extend/cc
  76. https://www.tensorflow.org/guide/version_compat
  77. https://www.tensorflow.org/learn
  78. https://www.tensorflow.org/overview
  79. https://www.tensorflow.org/js
  80. https://www.tensorflow.org/lite
  81. https://www.tensorflow.org/tfx
  82. https://www.tensorflow.org/swift
  83. https://www.tensorflow.org/api_docs/python/tf
  84. https://www.tensorflow.org/versions/r1.12/api_docs/python/tf
  85. https://www.tensorflow.org/versions/r1.11/api_docs/python/tf
  86. https://www.tensorflow.org/versions/r1.10/api_docs/python/tf
  87. https://www.tensorflow.org/versions/r1.9/api_docs/python/tf
  88. https://www.tensorflow.org/versions
  89. https://www.tensorflow.org/versions/r2.0/api_docs/python/tf
  90. https://www.tensorflow.org/resources/models-datasets
  91. https://www.tensorflow.org/resources/tools
  92. https://www.tensorflow.org/resources/libraries-extensions
  93. https://www.tensorflow.org/about
  94. https://www.tensorflow.org/about/case-studies
  95. https://www.youtube.com/playlist?list=plqy2h8rroyvzouyi26khmksjbedn3squb
  96. https://www.tensorflow.org/
  97. https://www.tensorflow.org/learn
  98. https://www.tensorflow.org/overview
  99. https://www.tensorflow.org/guide
 100. https://www.tensorflow.org/api_docs/python/tf/tensor
 101. https://www.tensorflow.org/api_docs/python/tf/tensor
 102. https://www.tensorflow.org/api_docs/python/tf/tensor
 103. https://www.tensorflow.org/api_docs/python/tf/tensor
 104. https://www.tensorflow.org/api_docs/python/tf/variable
 105. https://www.tensorflow.org/api_docs/python/tf/constant
 106. https://www.tensorflow.org/api_docs/python/tf/placeholder
 107. https://www.tensorflow.org/api_docs/python/tf/sparse/sparsetensor
 108. https://www.tensorflow.org/api_docs/python/tf/variable
 109. https://www.tensorflow.org/api_docs/python/tf/tensor
 110. https://www.tensorflow.org/api_docs/python/tf/tensor
 111. https://www.tensorflow.org/api_docs/python/tf/tensor
 112. https://www.tensorflow.org/api_docs/python/tf/tensor
 113. https://www.tensorflow.org/api_docs/python/tf/tensor
 114. https://www.tensorflow.org/api_docs/python/tf/rank
 115. https://www.tensorflow.org/api_docs/python/tf/tensor
 116. https://www.tensorflow.org/api_docs/python/tf/tensor
 117. https://www.tensorflow.org/api_docs/python/tf/tensor
 118. https://www.tensorflow.org/api_docs/python/tf/tensor
 119. https://www.tensorflow.org/api_docs/python/tf/tensor
 120. https://www.tensorflow.org/api_docs/python/tf/tensor
 121. https://www.tensorflow.org/api_docs/python/tf/tensorshape
 122. https://www.tensorflow.org/api_docs/python/tf/tensor
 123. https://www.tensorflow.org/api_docs/python/tf/tensor
 124. https://www.tensorflow.org/api_docs/python/tf/tensor
 125. https://www.tensorflow.org/api_docs/python/tf/tensor
 126. https://www.tensorflow.org/api_docs/python/tf/tensor
 127. https://www.tensorflow.org/api_docs/python/tf/shape
 128. https://www.tensorflow.org/api_docs/python/tf/tensor
 129. https://www.tensorflow.org/api_docs/python/tf/tensor
 130. https://www.tensorflow.org/api_docs/python/tf/tensor
 131. https://www.tensorflow.org/api_docs/python/tf/reshape
 132. https://www.tensorflow.org/api_docs/python/tf/dtypes/dtype
 133. https://www.tensorflow.org/api_docs/python/tf/tensor
 134. https://www.tensorflow.org/api_docs/python/tf/tensor
 135. https://www.tensorflow.org/api_docs/python/tf/tensor
 136. https://www.tensorflow.org/api_docs/python/tf/dtypes/cast
 137. https://www.tensorflow.org/api_docs/python/tf/tensor
 138. https://www.tensorflow.org/api_docs/python/tf/tensor
 139. https://www.tensorflow.org/api_docs/python/tf#int32
 140. https://www.tensorflow.org/api_docs/python/tf#float32
 141. https://www.tensorflow.org/api_docs/python/tf/tensor
 142. https://www.tensorflow.org/api_docs/python/tf/session
 143. https://www.tensorflow.org/guide/graphs
 144. https://www.tensorflow.org/api_docs/python/tf/tensor
 145. https://www.tensorflow.org/api_docs/python/tf/tensor
 146. https://www.tensorflow.org/api_docs/python/tf/tensor
 147. https://www.tensorflow.org/api_docs/python/tf/tensor
 148. https://www.tensorflow.org/api_docs/python/tf/tensor
 149. https://www.tensorflow.org/api_docs/python/tf/tensor
 150. https://www.tensorflow.org/api_docs/python/tf/train/queue_runner/start_queue_runners
 151. https://www.tensorflow.org/api_docs/python/tf/tensor
 152. https://www.tensorflow.org/api_docs/python/tf/tensor
 153. https://www.tensorflow.org/guide/debugger
 154. https://www.tensorflow.org/api_docs/python/tf/tensor
 155. https://www.tensorflow.org/api_docs/python/tf/tensor
 156. https://www.tensorflow.org/api_docs/python/tf/tensor
 157. https://www.tensorflow.org/api_docs/python/tf/print
 158. https://www.tensorflow.org/api_docs/python/tf/tensor
 159. https://www.tensorflow.org/api_docs/python/tf/print
 160. https://creativecommons.org/licenses/by/3.0/
 161. https://www.apache.org/licenses/license-2.0
 162. https://developers.google.com/site-policies
 163. https://medium.com/tensorflow
 164. https://github.com/tensorflow/
 165. https://twitter.com/tensorflow
 166. https://youtube.com/tensorflow
 167. https://github.com/tensorflow/tensorflow/issues
 168. https://github.com/tensorflow/tensorflow/blob/master/release.md
 169. https://stackoverflow.com/questions/tagged/tensorflow
 170. https://www.tensorflow.org/extras/tensorflow_brand_guidelines.pdf
 171. https://policies.google.com/terms
 172. https://policies.google.com/privacy

   hidden links:
 174. https://www.tensorflow.org/guide/tensors
 175. https://www.tensorflow.org/guide/tensors
 176. https://www.tensorflow.org/guide/tensors
 177. https://www.tensorflow.org/guide/tensors
