   #[1]tensorflow

   (button)
   [2]tensorflow
     *

   [3]install [4]learn
     * [5]introduction
       new to tensorflow?
     * [6]tensorflow
       the core open source ml library
     * [7]for javascript
       tensorflow.js for ml using javascript
     * [8]for mobile & iot
       tensorflow lite for mobile and embedded devices
     * [9]for production
       tensorflow extended for end-to-end ml components
     * [10]swift for tensorflow (in beta)

   [11]api
     * api r1
     * [12]r1.13 (stable)
     * [13]r1.12
     * [14]r1.11
     * [15]r1.10
     * [16]r1.9
     * [17]more   

     * api r2
     * [18]r2.0 (preview)

   [19]resources
     * [20]models & datasets
       pre-trained models and datasets built by google and the community
     * [21]tools
       ecosystem of tools to help you use tensorflow
     * [22]libraries & extensions
       libraries and extensions built on tensorflow

   [23]community [24]why tensorflow
     * [25]about
     * [26]case studies

   ____________________
   (button)
   (button)
   [27]github
     * [28]tensorflow core

   [29]overview [30]tutorials [31]guide [32]tf 2.0 alpha

   (button)
     * [33]install
     * [34]learn
          + more
          + [35]overview
          + [36]tutorials
          + [37]guide
          + [38]tf 2.0 alpha
     * [39]api
          + more
     * [40]resources
          + more
     * [41]community
     * [42]why tensorflow
          + more
     * [43]github

     * [44]tensorflow guide
     * high level apis
     * [45]keras
     * [46]eager execution
     * [47]importing data
     * [48]introduction to estimators
     * estimators
     * [49]premade estimators
     * [50]checkpoints
     * [51]feature columns
     * [52]datasets for estimators
     * [53]creating custom estimators
     * accelerators
     * [54]distribute strategy
     * [55]using gpus
     * [56]using tpus
     * low level apis
     * [57]introduction
     * [58]tensors
     * [59]variables
     * [60]graphs and sessions
     * [61]save and restore
     * [62]control flow
     * [63]ragged tensors
     * ml concepts
     * [64]embeddings
     * debugging
     * [65]tensorflow debugger
     * performance
     * [66]overview
     * [67]data input pipeline
     * [68]benchmarks
     * extend
     * [69]tensorflow architecture
     * [70]create an op
     * [71]custom filesystem plugin
     * [72]custom file and record formats
     * [73]model files
     * [74]language bindings
     * [75]c++ guide
     * misc
     * [76]tensorflow version compatibility

     * [77]introduction
     * [78]tensorflow
     * [79]for javascript
     * [80]for mobile & iot
     * [81]for production
     * [82]swift for tensorflow (in beta)

     * api r1
     * [83]r1.13 (stable)
     * [84]r1.12
     * [85]r1.11
     * [86]r1.10
     * [87]r1.9
     * [88]more   
     * api r2
     * [89]r2.0 (preview)

     * [90]models & datasets
     * [91]tools
     * [92]libraries & extensions

     * [93]about
     * [94]case studies

   watch talks from the 2019 tensorflow dev summit [95]watch now
     * [96]tensorflow
     * [97]learn
     * [98]tensorflow core
     * [99]guide

variables

   a tensorflow variable is the best way to represent shared, persistent
   state manipulated by your program.

   variables are manipulated via the [100]tf.variable class. a
   [101]tf.variable represents a tensor whose value can be changed by
   running ops on it. unlike [102]tf.tensor objects, a [103]tf.variable
   exists outside the context of a single session.run call.

   internally, a [104]tf.variable stores a persistent tensor. specific ops
   allow you to read and modify the values of this tensor. these
   modifications are visible across multiple [105]tf.sessions, so multiple
   workers can see the same values for a [106]tf.variable.

creating a variable

   the best way to create a variable is to call the [107]tf.get_variable
   function. this function requires you to specify the variable's name.
   this name will be used by other replicas to access the same variable,
   as well as to name this variable's value when checkpointing and
   exporting models. [108]tf.get_variable also allows you to reuse a
   previously created variable of the same name, making it easy to define
   models which reuse layers.

   to create a variable with [109]tf.get_variable, simply provide the name
   and shape
my_variable = tf.get_variable("my_variable", [1, 2, 3])

   this creates a variable named "my_variable" which is a
   three-dimensional tensor with shape [1, 2, 3]. this variable will, by
   default, have the dtype [110]tf.float32 and its initial value will be
   randomized via [111]tf.glorot_uniform_initializer.

   you may optionally specify the dtype and initializer to
   [112]tf.get_variable. for example:
my_int_variable = tf.get_variable("my_int_variable", [1, 2, 3], dtype=tf.int32,
  initializer=tf.zeros_initializer)

   tensorflow provides many convenient initializers. alternatively, you
   may initialize a [113]tf.variable to have the value of a
   [114]tf.tensor. for example:
other_variable = tf.get_variable("other_variable", dtype=tf.int32,
  initializer=tf.constant([23, 42]))

   note that when the initializer is a [115]tf.tensor you should not
   specify the variable's shape, as the shape of the initializer tensor
   will be used.

variable collections

   because disconnected parts of a tensorflow program might want to create
   variables, it is sometimes useful to have a single way to access all of
   them. for this reason tensorflow provides collections, which are named
   lists of tensors or other objects, such as [116]tf.variable instances.

   by default every [117]tf.variable gets placed in the following two
   collections:
     * [118]tf.graphkeys.global_variables --- variables that can be shared
       across multiple devices,
     * [119]tf.graphkeys.trainable_variables --- variables for which
       tensorflow will calculate gradients.

   if you don't want a variable to be trainable, add it to the
   [120]tf.graphkeys.local_variables collection instead. for example, the
   following snippet demonstrates how to add a variable named my_local to
   this collection:
my_local = tf.get_variable("my_local", shape=(),
collections=[tf.graphkeys.local_variables])

   alternatively, you can specify trainable=false as an argument to
   [121]tf.get_variable:
my_non_trainable = tf.get_variable("my_non_trainable",
                                   shape=(),
                                   trainable=false)

   you can also use your own collections. any string is a valid collection
   name, and there is no need to explicitly create a collection. to add a
   variable (or any other object) to a collection after creating the
   variable, call [122]tf.add_to_collection. for example, the following
   code adds an existing variable named my_local to a collection named
   my_collection_name:
tf.add_to_collection("my_collection_name", my_local)

   and to retrieve a list of all the variables (or other objects) you've
   placed in a collection you can use:
tf.get_collection("my_collection_name")

device placement

   just like any other tensorflow operation, you can place variables on
   particular devices. for example, the following snippet creates a
   variable named v and places it on the second gpu device:
with tf.device("/device:gpu:1"):
  v = tf.get_variable("v", [1])

   it is particularly important for variables to be in the correct device
   in distributed settings. accidentally putting variables on workers
   instead of parameter servers, for example, can severely slow down
   training or, in the worst case, let each worker blithely forge ahead
   with its own independent copy of each variable. for this reason we
   provide [123]tf.train.replica_device_setter, which can automatically
   place variables in parameter servers. for example:
cluster_spec = {
    "ps": ["ps0:2222", "ps1:2222"],
    "worker": ["worker0:2222", "worker1:2222", "worker2:2222"]}
with tf.device(tf.train.replica_device_setter(cluster=cluster_spec)):
  v = tf.get_variable("v", shape=[20, 20])  # this variable is placed
                                            # in the parameter server
                                            # by the replica_device_setter

initializing variables

   before you can use a variable, it must be initialized. if you are
   programming in the low-level tensorflow api (that is, you are
   explicitly creating your own graphs and sessions), you must explicitly
   initialize the variables. most high-level frameworks such as
   [124]tf.contrib.slim, [125]tf.estimator.estimator and keras
   automatically initialize variables for you before training a model.

   explicit initialization is otherwise useful because it allows you not
   to rerun potentially expensive initializers when reloading a model from
   a checkpoint as well as allowing determinism when randomly-initialized
   variables are shared in a distributed setting.

   to initialize all trainable variables in one go, before training
   starts, call tf.global_variables_initializer(). this function returns a
   single operation responsible for initializing all variables in the
   [126]tf.graphkeys.global_variables collection. running this operation
   initializes all variables. for example:
session.run(tf.global_variables_initializer())
# now all variables are initialized.

   if you do need to initialize variables yourself, you can run the
   variable's initializer operation. for example:
session.run(my_variable.initializer)

   you can also ask which variables have still not been initialized. for
   example, the following code prints the names of all variables which
   have not yet been initialized:
print(session.run(tf.report_uninitialized_variables()))

   note that by default [127]tf.global_variables_initializer does not
   specify the order in which variables are initialized. therefore, if the
   initial value of a variable depends on another variable's value, it's
   likely that you'll get an error. any time you use the value of a
   variable in a context in which not all variables are initialized (say,
   if you use a variable's value while initializing another variable), it
   is best to use variable.initialized_value() instead of variable:
v = tf.get_variable("v", shape=(), initializer=tf.zeros_initializer())
w = tf.get_variable("w", initializer=v.initialized_value() + 1)

using variables

   to use the value of a [128]tf.variable in a tensorflow graph, simply
   treat it like a normal [129]tf.tensor:
v = tf.get_variable("v", shape=(), initializer=tf.zeros_initializer())
w = v + 1  # w is a tf.tensor which is computed based on the value of v.
           # any time a variable is used in an expression it gets automatically
           # converted to a tf.tensor representing its value.

   to assign a value to a variable, use the methods assign, assign_add,
   and friends in the [130]tf.variable class. for example, here is how you
   can call these methods:
v = tf.get_variable("v", shape=(), initializer=tf.zeros_initializer())
assignment = v.assign_add(1)
tf.global_variables_initializer().run()
sess.run(assignment)  # or assignment.op.run(), or assignment.eval()

   most tensorflow optimizers have specialized ops that efficiently update
   the values of variables according to some id119-like
   algorithm. see [131]tf.train.optimizer for an explanation of how to use
   optimizers.

   because variables are mutable it's sometimes useful to know what
   version of a variable's value is being used at any point in time. to
   force a re-read of the value of a variable after something has
   happened, you can use [132]tf.variable.read_value. for example:
v = tf.get_variable("v", shape=(), initializer=tf.zeros_initializer())
assignment = v.assign_add(1)
with tf.control_dependencies([assignment]):
  w = v.read_value()  # w is guaranteed to reflect v's value after the
                      # assign_add operation.

sharing variables

   tensorflow supports two ways of sharing variables:
     * explicitly passing [133]tf.variable objects around.
     * implicitly wrapping [134]tf.variable objects within
       [135]tf.variable_scope objects.

   while code which explicitly passes variables around is very clear, it
   is sometimes convenient to write tensorflow functions that implicitly
   use variables in their implementations. most of the functional layers
   from [136]tf.layers use this approach, as well as all [137]tf.metrics,
   and a few other library utilities.

   variable scopes allow you to control variable reuse when calling
   functions which implicitly create and use variables. they also allow
   you to name your variables in a hierarchical and understandable way.

   for example, let's say we write a function to create a convolutional /
   relu layer:
def conv_relu(input, kernel_shape, bias_shape):
    # create variable named "weights".
    weights = tf.get_variable("weights", kernel_shape,
        initializer=tf.random_normal_initializer())
    # create variable named "biases".
    biases = tf.get_variable("biases", bias_shape,
        initializer=tf.constant_initializer(0.0))
    conv = tf.nn.conv2d(input, weights,
        strides=[1, 1, 1, 1], padding='same')
    return tf.nn.relu(conv + biases)

   this function uses short names weights and biases, which is good for
   clarity. in a real model, however, we want many such convolutional
   layers, and calling this function repeatedly would not work:
input1 = tf.random_normal([1,10,10,32])
input2 = tf.random_normal([1,20,20,32])
x = conv_relu(input1, kernel_shape=[5, 5, 32, 32], bias_shape=[32])
x = conv_relu(x, kernel_shape=[5, 5, 32, 32], bias_shape = [32])  # this fails.

   since the desired behavior is unclear (create new variables or reuse
   the existing ones?) tensorflow will fail. calling conv_relu in
   different scopes, however, clarifies that we want to create new
   variables:
def my_image_filter(input_images):
    with tf.variable_scope("conv1"):
        # variables created here will be named "conv1/weights", "conv1/biases".
        relu1 = conv_relu(input_images, [5, 5, 32, 32], [32])
    with tf.variable_scope("conv2"):
        # variables created here will be named "conv2/weights", "conv2/biases".
        return conv_relu(relu1, [5, 5, 32, 32], [32])

   if you do want the variables to be shared, you have two options. first,
   you can create a scope with the same name using reuse=true:
with tf.variable_scope("model"):
  output1 = my_image_filter(input1)
with tf.variable_scope("model", reuse=true):
  output2 = my_image_filter(input2)

   you can also call scope.reuse_variables() to trigger a reuse:
with tf.variable_scope("model") as scope:
  output1 = my_image_filter(input1)
  scope.reuse_variables()
  output2 = my_image_filter(input2)

   since depending on exact string names of scopes can feel dangerous,
   it's also possible to initialize a variable scope based on another one:
with tf.variable_scope("model") as scope:
  output1 = my_image_filter(input1)
with tf.variable_scope(scope, reuse=true):
  output2 = my_image_filter(input2)

   except as otherwise noted, the content of this page is licensed under
   the [138]creative commons attribution 3.0 license, and code samples are
   licensed under the [139]apache 2.0 license. for details, see the
   [140]google developers site policies. java is a registered trademark of
   oracle and/or its affiliates.

     * stay connected
          + [141]blog
          + [142]github
          + [143]twitter
          + [144]youtube
     * support
          + [145]issue tracker
          + [146]release notes
          + [147]stack overflow
          + [148]brand guidelines

     * [149]terms
     * [150]privacy

   [english_____]

references

   visible links
   1. https://www.tensorflow.org/s/opensearch.xml
   2. https://www.tensorflow.org/
   3. https://www.tensorflow.org/install
   4. https://www.tensorflow.org/learn
   5. https://www.tensorflow.org/learn
   6. https://www.tensorflow.org/overview
   7. https://www.tensorflow.org/js
   8. https://www.tensorflow.org/lite
   9. https://www.tensorflow.org/tfx
  10. https://www.tensorflow.org/swift
  11. https://www.tensorflow.org/api_docs/python/tf
  12. https://www.tensorflow.org/api_docs/python/tf
  13. https://www.tensorflow.org/versions/r1.12/api_docs/python/tf
  14. https://www.tensorflow.org/versions/r1.11/api_docs/python/tf
  15. https://www.tensorflow.org/versions/r1.10/api_docs/python/tf
  16. https://www.tensorflow.org/versions/r1.9/api_docs/python/tf
  17. https://www.tensorflow.org/versions
  18. https://www.tensorflow.org/versions/r2.0/api_docs/python/tf
  19. https://www.tensorflow.org/resources/models-datasets
  20. https://www.tensorflow.org/resources/models-datasets
  21. https://www.tensorflow.org/resources/tools
  22. https://www.tensorflow.org/resources/libraries-extensions
  23. https://www.tensorflow.org/community
  24. https://www.tensorflow.org/about
  25. https://www.tensorflow.org/about
  26. https://www.tensorflow.org/about/case-studies
  27. https://github.com/tensorflow
  28. https://www.tensorflow.org/overview
  29. https://www.tensorflow.org/overview
  30. https://www.tensorflow.org/tutorials
  31. https://www.tensorflow.org/guide
  32. https://www.tensorflow.org/alpha
  33. https://www.tensorflow.org/install
  34. https://www.tensorflow.org/learn
  35. https://www.tensorflow.org/overview
  36. https://www.tensorflow.org/tutorials
  37. https://www.tensorflow.org/guide
  38. https://www.tensorflow.org/alpha
  39. https://www.tensorflow.org/api_docs/python/tf
  40. https://www.tensorflow.org/resources/models-datasets
  41. https://www.tensorflow.org/community
  42. https://www.tensorflow.org/about
  43. https://github.com/tensorflow
  44. https://www.tensorflow.org/guide
  45. https://www.tensorflow.org/guide/keras
  46. https://www.tensorflow.org/guide/eager
  47. https://www.tensorflow.org/guide/datasets
  48. https://www.tensorflow.org/guide/estimators
  49. https://www.tensorflow.org/guide/premade_estimators
  50. https://www.tensorflow.org/guide/checkpoints
  51. https://www.tensorflow.org/guide/feature_columns
  52. https://www.tensorflow.org/guide/datasets_for_estimators
  53. https://www.tensorflow.org/guide/custom_estimators
  54. https://www.tensorflow.org/guide/distribute_strategy
  55. https://www.tensorflow.org/guide/using_gpu
  56. https://www.tensorflow.org/guide/using_tpu
  57. https://www.tensorflow.org/guide/low_level_intro
  58. https://www.tensorflow.org/guide/tensors
  59. https://www.tensorflow.org/guide/variables
  60. https://www.tensorflow.org/guide/graphs
  61. https://www.tensorflow.org/guide/saved_model
  62. https://www.tensorflow.org/guide/autograph
  63. https://www.tensorflow.org/guide/ragged_tensors
  64. https://www.tensorflow.org/guide/embedding
  65. https://www.tensorflow.org/guide/debugger
  66. https://www.tensorflow.org/guide/performance/overview
  67. https://www.tensorflow.org/guide/performance/datasets
  68. https://www.tensorflow.org/guide/performance/benchmarks
  69. https://www.tensorflow.org/guide/extend/architecture
  70. https://www.tensorflow.org/guide/extend/op
  71. https://www.tensorflow.org/guide/extend/filesystem
  72. https://www.tensorflow.org/guide/extend/formats
  73. https://www.tensorflow.org/guide/extend/model_files
  74. https://www.tensorflow.org/guide/extend/bindings
  75. https://www.tensorflow.org/guide/extend/cc
  76. https://www.tensorflow.org/guide/version_compat
  77. https://www.tensorflow.org/learn
  78. https://www.tensorflow.org/overview
  79. https://www.tensorflow.org/js
  80. https://www.tensorflow.org/lite
  81. https://www.tensorflow.org/tfx
  82. https://www.tensorflow.org/swift
  83. https://www.tensorflow.org/api_docs/python/tf
  84. https://www.tensorflow.org/versions/r1.12/api_docs/python/tf
  85. https://www.tensorflow.org/versions/r1.11/api_docs/python/tf
  86. https://www.tensorflow.org/versions/r1.10/api_docs/python/tf
  87. https://www.tensorflow.org/versions/r1.9/api_docs/python/tf
  88. https://www.tensorflow.org/versions
  89. https://www.tensorflow.org/versions/r2.0/api_docs/python/tf
  90. https://www.tensorflow.org/resources/models-datasets
  91. https://www.tensorflow.org/resources/tools
  92. https://www.tensorflow.org/resources/libraries-extensions
  93. https://www.tensorflow.org/about
  94. https://www.tensorflow.org/about/case-studies
  95. https://www.youtube.com/playlist?list=plqy2h8rroyvzouyi26khmksjbedn3squb
  96. https://www.tensorflow.org/
  97. https://www.tensorflow.org/learn
  98. https://www.tensorflow.org/overview
  99. https://www.tensorflow.org/guide
 100. https://www.tensorflow.org/api_docs/python/tf/variable
 101. https://www.tensorflow.org/api_docs/python/tf/variable
 102. https://www.tensorflow.org/api_docs/python/tf/tensor
 103. https://www.tensorflow.org/api_docs/python/tf/variable
 104. https://www.tensorflow.org/api_docs/python/tf/variable
 105. https://www.tensorflow.org/api_docs/python/tf/session
 106. https://www.tensorflow.org/api_docs/python/tf/variable
 107. https://www.tensorflow.org/api_docs/python/tf/get_variable
 108. https://www.tensorflow.org/api_docs/python/tf/get_variable
 109. https://www.tensorflow.org/api_docs/python/tf/get_variable
 110. https://www.tensorflow.org/api_docs/python/tf#float32
 111. https://www.tensorflow.org/api_docs/python/tf/glorot_uniform_initializer
 112. https://www.tensorflow.org/api_docs/python/tf/get_variable
 113. https://www.tensorflow.org/api_docs/python/tf/variable
 114. https://www.tensorflow.org/api_docs/python/tf/tensor
 115. https://www.tensorflow.org/api_docs/python/tf/tensor
 116. https://www.tensorflow.org/api_docs/python/tf/variable
 117. https://www.tensorflow.org/api_docs/python/tf/variable
 118. https://www.tensorflow.org/api_docs/python/tf/graphkeys#global_variables
 119. https://www.tensorflow.org/api_docs/python/tf/graphkeys#trainable_variables
 120. https://www.tensorflow.org/api_docs/python/tf/graphkeys#local_variables
 121. https://www.tensorflow.org/api_docs/python/tf/get_variable
 122. https://www.tensorflow.org/api_docs/python/tf/add_to_collection
 123. https://www.tensorflow.org/api_docs/python/tf/train/replica_device_setter
 124. https://www.tensorflow.org/api_docs/python/tf/contrib/slim
 125. https://www.tensorflow.org/api_docs/python/tf/estimator/estimator
 126. https://www.tensorflow.org/api_docs/python/tf/graphkeys#global_variables
 127. https://www.tensorflow.org/api_docs/python/tf/initializers/global_variables
 128. https://www.tensorflow.org/api_docs/python/tf/variable
 129. https://www.tensorflow.org/api_docs/python/tf/tensor
 130. https://www.tensorflow.org/api_docs/python/tf/variable
 131. https://www.tensorflow.org/api_docs/python/tf/train/optimizer
 132. https://www.tensorflow.org/api_docs/python/tf/variable#read_value
 133. https://www.tensorflow.org/api_docs/python/tf/variable
 134. https://www.tensorflow.org/api_docs/python/tf/variable
 135. https://www.tensorflow.org/api_docs/python/tf/variable_scope
 136. https://www.tensorflow.org/api_docs/python/tf/layers
 137. https://www.tensorflow.org/api_docs/python/tf/metrics
 138. https://creativecommons.org/licenses/by/3.0/
 139. https://www.apache.org/licenses/license-2.0
 140. https://developers.google.com/site-policies
 141. https://medium.com/tensorflow
 142. https://github.com/tensorflow/
 143. https://twitter.com/tensorflow
 144. https://youtube.com/tensorflow
 145. https://github.com/tensorflow/tensorflow/issues
 146. https://github.com/tensorflow/tensorflow/blob/master/release.md
 147. https://stackoverflow.com/questions/tagged/tensorflow
 148. https://www.tensorflow.org/extras/tensorflow_brand_guidelines.pdf
 149. https://policies.google.com/terms
 150. https://policies.google.com/privacy

   hidden links:
 152. https://www.tensorflow.org/guide/variables
 153. https://www.tensorflow.org/guide/variables
 154. https://www.tensorflow.org/guide/variables
 155. https://www.tensorflow.org/guide/variables
