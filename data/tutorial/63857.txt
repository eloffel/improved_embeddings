   #[1]github [2]recent commits to qb-api:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]4
     * [35]star [36]9
     * [37]fork [38]1

[39]pinafore/[40]qb-api

   [41]code [42]issues 2 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   server side api for qanta quiz bowl system
     * [47]115 commits
     * [48]2 branches
     * [49]0 releases
     * [50]fetching contributors
     * [51]mit

    1. [52]python 96.3%
    2. [53]html 2.6%
    3. other 1.1%

   (button) python html other
   branch: master (button) new pull request
   [54]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/p
   [55]download zip

downloading...

   want to be notified of new releases in pinafore/qb-api?
   [56]sign in [57]sign up

launching github desktop...

   if nothing happens, [58]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [59]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [60]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [61]download the github extension for visual studio
   and try again.

   (button) go back
   fetching latest commit   
   cannot retrieve the latest commit at this time.
   [62]permalink
   type             name            latest commit message commit time
        failed to load latest commit information.
        [63]data
        [64]docs
        [65]nginx
        [66]web
        [67].env
        [68].gitignore
        [69].travis.yml
        [70]license.md
        [71]readme.md
        [72]docker-compose.dev.yml
        [73]docker-compose.test.yml
        [74]docker-compose.yml
        [75]swagger.json
        [76]swagger.yaml
        [77]test.sh

readme.md

quiz bowl api

   this repository is deprecated, please visit qanta.org to participate in
   quizbowl

   using the code in this repository you can:
    1. query our quiz bowl api server run at (no longer running)
    2. run your on quiz bowl api server

query quiz bowl api server

   the main objective of querying the quiz bowl api is to evaluate the
   performance of your system. this requires you to connect to the
   evaluation server, get a question word by word, and return an answer.
   to do so, you must follow these steps to install the required software,
   acquire and api key, and test your system.

create an account and api key

   visit [78]/register. the page will redirect you to google for oauth
   authentication. we only require a valid email. the page will then
   redirect you to a page that contains a json response with your email,
   user id, and api key. be sure to save this information, but if you lose
   it you can visit the register link again and the website will redisplay
   your credentials.

   you should get something that looks like:
{
"api_key": "secret-here",
"email": "jvaljean@gmail.com",
"id": 24601
}

note on answers

   all answers correspond to exactly one wikipedia page with whitespaces
   replaced with underscores. note that this means that things such as
   accented characters may be part of answers since wikipedia page titles
   contain these. to mitigate the possibility of answers that are barely
   incorrect due to trivial mistakes we are providing a file containing
   all possible wikipedia pages as they appear in the answer set. since
   this changed was implemented relatively late (10/9) during the upload
   of the test data we will consider an answer correct if it satisfies one
   of the following conditions supposing s_answer is the submitted answer
   and t_answer is the true answer. unidecode can be found here
   [79]https://pypi.python.org/pypi/unidecode, and is a package that
   converts non-ascii characters to their closest visual equivalent.
     * s_answer == t_answer
     * unidecode(s_answer) == unidecode(t_answer)
     * s_answer.lower() == t_answer.lower()
     * unidecode(s_answer).lower() == unidecode(t_answer).lower()

   wikipedia pages:
     * line separated text:
       [80]https://s3-us-west-2.amazonaws.com/pinafore-us-west-2/preproces
       s/wikipedia-titles.txt
     * python pickle file returning set of string pages (python 3.6):
       [81]https://s3-us-west-2.amazonaws.com/pinafore-us-west-2/preproces
       s/wikipedia-titles.pickle

required software

   the qb api uses json for all communication which means it interops with
   any user language. however, we have included a python client
   implementation along with a demonstration of querying the server in
   web/client.py and web/demo.py respectively. required software is:
    1. python 3
    2. requests package installable via pip install requests

configuration

   set the following environment variables in your .bashrc or equivalent
   to run web/demo.py:
export qb_user_id=1
export qb_api_key='secret-here'

   the demo answerer goes through all the questions and answers based on
   fixed strings (this is pretty dumb, but hopefully gives an idea of how
   to write your own answerer!). for example, whenever it sees "author" it
   answers "marcel proust", whenever it sees "fancy" it answers "iggy
   azalea", and its default answer at the end of a question is "chinua
   achebe".

   it first gets all of the questions it can answer from the web/client.py
   api:
all_questions = self._server.get_all_questions()
print(str(all_questions)[:70] + "...")
for qdict in [x for x in all_questions if x['fold'] == 'dev']:
     start = time.time()
     next_q = int(qdict['id'])
     qlen = int(qdict['word_count'])

   which returns a list of dictionaries (each dictionary is a question
   json):
[{'word_count': 90, 'id': 1, 'fold': 'dev'}, {'word_count': 87, 'id': 2, 'fold':
 'dev'}, {'word_count': 96, 'id': 3, 'fold': 'dev'}, {'word_count': 81, 'id': 4,
 'fold': 'dev'}, {'word_count': 90, 'id': 5, 'fold': 'dev'}, {'word_count': 88,
'id': 6, 'fold': 'dev'}, {'word_count': 88, 'id': 7, 'fold': 'dev'}, {'word_coun
t': 84, 'id': 8, 'fold': 'dev'}, {'word_count': 98, 'id': 9, 'fold': 'dev'}, {'w
ord_count': 92, 'id': 10, 'fold': 'dev'}, {'word_count': 88, 'id': 11, 'fold': '
dev'}, {'word_count': 100, 'id': 12, 'fold': 'dev'}, {'word_count': 82, 'id': 13
, 'fold': 'dev'}, {'word_count': 97, 'id': 14, 'fold': 'dev'}, {'word_count': 92
, 'id': 15, 'fold': 'dev'}, {'word_count': 101, 'id': 16, 'fold': 'dev'}, {'word
_count': 99, 'id': 17, 'fold': 'dev'}, {'word_count': 103, 'id': 18, 'fold': 'de
v'}, {'word_count': 93, 'id': 19, 'fold': 'dev'}, {'word_count': 96, 'id': 20, '
fold': 'dev'}, {'word_count': 97, 'id': 21, 'fold': 'dev'}, {'word_count': 91, '
id': 22, 'fold': 'dev'}, {'word_count': 80, 'id': 23, 'fold': 'dev'}, {'word_cou
nt': 93, 'id': 24, 'fold': 'dev'}, {'word_count': 89, 'id': 25, 'fold': 'dev'},
{'word_count': 89, 'id': 26, 'fold': 'dev'}, {'word_count': 106, 'id': 27, 'fold
': 'dev'}, {'word_count': 94, 'id': 28, 'fold': 'dev'}, {'word_count': 102, 'id'
: 29, 'fold': 'dev'}, {'word_count': 100, 'id': 30, 'fold': 'dev'}, {'word_count
': 100, 'id': 31, 'fold': 'dev'}, {'word_count': 95, 'id': 32, 'fold': 'dev'}, {
'word_count': 101, 'id': 33, 'fold': 'dev'}, {'word_count': 97, 'id': 34, 'fold'
: 'dev'}, {'word_count': 96, 'id': 35, 'fold': 'dev'}, {'word_count': 93, 'id':
36, 'fold': 'dev'}, {'word_count': 95, 'id': 37, 'fold': 'dev'}, {'word_count':
98, 'id': 38, 'fold': 'dev'}, {'word_count': 97, 'id': 39, 'fold': 'dev'}, {'wor
d_count': 86, 'id': 40, 'fold': 'dev'}, {'word_count': 88, 'id': 41, 'fold': 'de
v'}, {'word_count': 98, 'id': 42, 'fold': 'dev'}, {'word_count': 96, 'id': 43, '
fold': 'dev'}, {'word_count': 91, 'id': 44, 'fold': 'dev'}, {'word_count': 90, '
id': 45, 'fold': 'dev'}]

   it then iterates over the questions one word at a time:
self._server.get_question_length(next_q)
     for ii in range(qlen):
          ....

folds

   important: the sample code provided answers all available 'dev'
   questions. you can answer 'dev' questions as many times as you like.
   however, 'test' questions can only be answered once. so be very careful
   when querying the text of test questions and providing your answers.

json documentation

   the quiz bowl api is documented via a [82]swagger json spec. you can
   view a very nice version of the documentation via the [83]swagger ui
   website (note: the "try it now" feature doesn't work due to xss attack
   protection). alternatively you can load a "light" version of the docs
   by opening docs/index.html in a web browser. the specification files
   are in swagger.yaml and swagger.json. finally, you can generate a
   client in one of many languages by:
    1. navigating to [84]editor.swagger.io
    2. uploading the specification file by clicking "file" then "import
       file" then "generate client" and choose your language

raw curl commands

   the swagger documentation (above) can be used to generate curl commands
   (or other frameworks). for example, you can get the raw json of all
   questions to answer using:
curl -x get --header 'accept: application/json' 'http:/qb.boydgraber.org/qb-api/
v1/questions?api_key=secret-here'

run quiz bowl api server

   to run a standalone instance of the quiz bowl api server is very easy
   using [85]docker. first, you will need to install [86]docker engine and
   [87]docker compose. after doing so and starting a docker machine, run
   the following commands to launch the server:
docker-compose -f docker-compose.yml build
docker-compose -f docker-compose.yml up

   this will run the server in blocking mode, you can run it in the
   background with docker-compose up -d. to test that it works you can run
docker-compose -f docker-compose.test.yml build
docker-compose -f docker-compose.test.yml up

   you should see demo.py running and answering questions. note, that this
   will leave the database in a "dirty" state. you can bring the database
   to a clean state by having the server running, then running:
docker exec -it qbapi_web_1 bash
python

   then in the python session
>>> import app
>>> import database
>>> app.db.drop_all()
>>> app.db.create_all()
>>> database.load_questions()

configuration

   the instructions that follow are for running an instance with oauth.
   the documentation may not be complete
     * a client_secrets.json file must be created with the following
       contents:

"web": {
    "client_id": "<client_id>",
    "client_secret": "<client_secret>",
    "redirect_uris": ["<domain>/oauth2callback"],
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://accounts.google.com/o/oauth2/token"
  }
}

     * client_id and client_secret should be obtained from the google
       developer's console for your account.
     * domain example: [88]http://mydomain.com/
     * a config.py file should be present with the single line:

secret_key='mysecretkey'

example system using the api

   we provide an example system in web/es_guesser that is composed of
   [89]elasticsearch as guesser, and a very simple threshold based buzzer.
   this system built on a simplified version of [90]qanta.

dependencies

   first, install and run elasticsearch:
$ curl -l -o https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-
5.2.2.tar.gz
$ tar -xvf elasticsearch-5.2.2.tar.gz
$ cd elasticsearch-5.2.2
$ bash bin/elasticsearch

   elasticsearch runs at localhost:9200.

   then install elasticsearch python packages: elasticsearch and
   elasticsearch-dsl.
$ pip install elasticsearch elasticsearch-dsl

data

   the example code uses web/es_guesser/non_naqt.db which can be found
   [91]here.

running the system

   to run the system, simply go to web/es_guesser and run python
   example.py. it will train the guesser and answer questions using the
   api.

   unlike neural network systems where the parameters need to be stored
   after training and loaded when testing, elasticsearch doesn't require
   saving and loading the parameters. the data and other information are
   stored in index files and will be persistent even after elasticsearch
   is stopped, so you don't need to re-train or load any parameters after
   restarting it.

     *    2019 github, inc.
     * [92]terms
     * [93]privacy
     * [94]security
     * [95]status
     * [96]help

     * [97]contact github
     * [98]pricing
     * [99]api
     * [100]training
     * [101]blog
     * [102]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [103]reload to refresh your
   session. you signed out in another tab or window. [104]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/pinafore/qb-api/commits/master.atom
   3. https://github.com/pinafore/qb-api#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/pinafore/qb-api
  32. https://github.com/join
  33. https://github.com/login?return_to=/pinafore/qb-api
  34. https://github.com/pinafore/qb-api/watchers
  35. https://github.com/login?return_to=/pinafore/qb-api
  36. https://github.com/pinafore/qb-api/stargazers
  37. https://github.com/login?return_to=/pinafore/qb-api
  38. https://github.com/pinafore/qb-api/network/members
  39. https://github.com/pinafore
  40. https://github.com/pinafore/qb-api
  41. https://github.com/pinafore/qb-api
  42. https://github.com/pinafore/qb-api/issues
  43. https://github.com/pinafore/qb-api/pulls
  44. https://github.com/pinafore/qb-api/projects
  45. https://github.com/pinafore/qb-api/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/pinafore/qb-api/commits/master
  48. https://github.com/pinafore/qb-api/branches
  49. https://github.com/pinafore/qb-api/releases
  50. https://github.com/pinafore/qb-api/graphs/contributors
  51. https://github.com/pinafore/qb-api/blob/master/license.md
  52. https://github.com/pinafore/qb-api/search?l=python
  53. https://github.com/pinafore/qb-api/search?l=html
  54. https://github.com/pinafore/qb-api/find/master
  55. https://github.com/pinafore/qb-api/archive/master.zip
  56. https://github.com/login?return_to=https://github.com/pinafore/qb-api
  57. https://github.com/join?return_to=/pinafore/qb-api
  58. https://desktop.github.com/
  59. https://desktop.github.com/
  60. https://developer.apple.com/xcode/
  61. https://visualstudio.github.com/
  62. https://github.com/pinafore/qb-api/tree/f20b6c0f991841016b7d39f5520d2b56e2b9ffe1
  63. https://github.com/pinafore/qb-api/tree/master/data
  64. https://github.com/pinafore/qb-api/tree/master/docs
  65. https://github.com/pinafore/qb-api/tree/master/nginx
  66. https://github.com/pinafore/qb-api/tree/master/web
  67. https://github.com/pinafore/qb-api/blob/master/.env
  68. https://github.com/pinafore/qb-api/blob/master/.gitignore
  69. https://github.com/pinafore/qb-api/blob/master/.travis.yml
  70. https://github.com/pinafore/qb-api/blob/master/license.md
  71. https://github.com/pinafore/qb-api/blob/master/readme.md
  72. https://github.com/pinafore/qb-api/blob/master/docker-compose.dev.yml
  73. https://github.com/pinafore/qb-api/blob/master/docker-compose.test.yml
  74. https://github.com/pinafore/qb-api/blob/master/docker-compose.yml
  75. https://github.com/pinafore/qb-api/blob/master/swagger.json
  76. https://github.com/pinafore/qb-api/blob/master/swagger.yaml
  77. https://github.com/pinafore/qb-api/blob/master/test.sh
  78. https://github.com/pinafore/qb-api/blob/master/register
  79. https://pypi.python.org/pypi/unidecode
  80. https://s3-us-west-2.amazonaws.com/pinafore-us-west-2/preprocess/wikipedia-titles.txt
  81. https://s3-us-west-2.amazonaws.com/pinafore-us-west-2/preprocess/wikipedia-titles.pickle
  82. http://swagger.io/
  83. http://petstore.swagger.io/?url=https://raw.githubusercontent.com/pinafore/qb-api/master/swagger.json
  84. http://editor.swagger.io/#/
  85. https://www.docker.com/
  86. https://docs.docker.com/
  87. https://docs.docker.com/compose/install/
  88. http://mydomain.com/
  89. https://www.elastic.co/products/elasticsearch
  90. https://github.com/pinafore/qb
  91. https://github.com/pinafore/qb/blob/master/data/internal/non_naqt.db
  92. https://github.com/site/terms
  93. https://github.com/site/privacy
  94. https://github.com/security
  95. https://githubstatus.com/
  96. https://help.github.com/
  97. https://github.com/contact
  98. https://github.com/pricing
  99. https://developer.github.com/
 100. https://training.github.com/
 101. https://github.blog/
 102. https://github.com/about
 103. https://github.com/pinafore/qb-api
 104. https://github.com/pinafore/qb-api

   hidden links:
 106. https://github.com/
 107. https://github.com/pinafore/qb-api
 108. https://github.com/pinafore/qb-api
 109. https://github.com/pinafore/qb-api
 110. https://help.github.com/articles/which-remote-url-should-i-use
 111. https://github.com/pinafore/qb-api#quiz-bowl-api
 112. https://github.com/pinafore/qb-api#query-quiz-bowl-api-server
 113. https://github.com/pinafore/qb-api#create-an-account-and-api-key
 114. https://github.com/pinafore/qb-api#note-on-answers
 115. https://github.com/pinafore/qb-api#required-software
 116. https://github.com/pinafore/qb-api#configuration
 117. https://github.com/pinafore/qb-api#folds
 118. https://github.com/pinafore/qb-api#json-documentation
 119. https://github.com/pinafore/qb-api#raw-curl-commands
 120. https://github.com/pinafore/qb-api#run-quiz-bowl-api-server
 121. https://github.com/pinafore/qb-api#configuration-1
 122. https://github.com/pinafore/qb-api#example-system-using-the-api
 123. https://github.com/pinafore/qb-api#dependencies
 124. https://github.com/pinafore/qb-api#data
 125. https://github.com/pinafore/qb-api#running-the-system
 126. https://github.com/
