   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]freecodecamp.org
     * [9]dev
     * [10]learn to code for free
     __________________________________________________________________

deep dive into graph traversals

   [11]go to the profile of sachin malhotra
   [12]sachin malhotra (button) blockedunblock (button) followfollowing
   dec 10, 2017
   [1*pebp8cds-rls417qaos_8a.png]

   there are over 2.07 billion monthly active facebook users worldwide as
   of q3 2017. the most important aspect of the facebook network is the
   social engagement between users. the more friends a user has, the more
   engaging the conversations become via comments on posts, messaging etc.
   if you   ve used facebook fairly regularly, you must be knowing about the
   friends recommendation feature.

   facebook recommends a set of people that we can add as friends. most of
   the times, these are people we   ve never heard of before. but still,
   facebook thinks that we should add them. the question is: how does
   facebook come up with a set of recommendations for a specific person?

   one way to do this is based on mutual friends. eg:- if a user a and c
   don   t know each other, but they have a mutual friend b, then probably a
   and c should be friends too. what if a and c have 2 mutual friends and
   a and d have 3 mutual friends? how will the ordering be for
   suggestions?

   in this case, it seems pretty obvious to suggest d over c to a because
   they have more mutual friends and are more likely to get connected.

   however, two people might not always have mutual friends, but they
   might have common 2nd-degree or 3rd-degree connections.

nth degree connections

     * a and b are friends. (0 degree)
     * a and b are 1st-degree friends means they have a mutual friend.
     * a and b are 2nd-degree friends if they have a friend, who is a
       1st-degree friend with the other person. eg:- a         c         d         b, then a
       and b are 2nd-degree friends.
     * similarly, a and b are nth degree friends if they have n
       connections in between. eg:- a         x1         x2         x3   ..         xn         b.

   looking at this approach for the recommendation, we need to be able to
   find the degree of friendship that two given users share on facebook.

enter graph traversals

   now that we know how friend recommendations can be made, let   s restate
   this problem so that we can look at it from an algorithmic perspective.

   let   s imagine an undirected graph of all the users on facebook, where
   vertices v represent the users and edges e represent friendships. in
   other words: if users a and b are friends on facebook, there is an edge
   between vertices a and b. the challenge is to find out the degree of
   connection between any two users.

   more formally, we need to see the shortest distance between two nodes
   in an undirected, unweighted graph.
   [1*kogmdyc-0hlueepg_0hjnw.png]

   consider two vertices in this undirected graph a and c. there are two
   different paths for reaching c:

   1. a     b     c and
   2. a     g    f     e    d    c

   clearly, we want to take the smallest path when trying to see the
   degree of connection between two people on the social network.

   so far so good.

   before proceeding, let   s look at the complexity of this problem. as
   stated before, facebook has around 2.07 billion users as of q3 2017.
   that means our graph will have around 2.07 billion nodes and at least
   (2.07 billion         1) edges (if every person has at least one friend).

   this is a huge scale to solve this problem on. additionally, we also
   saw that there might be multiple paths to reach from a given source
   vertex to a destination vertex in the graph and we want the shortest
   one to solve our problem.

   we will look at two classic graph traversal algorithms to solve our
   problem:

   1. depth first search and
   2. breadth first search.

depth first search

   imagine that you get stuck in a maze like this.
   [1*qy2tr83uizlqxf1mres2ra.png]

   you have to get out somehow. there might be multiple routes from your
   starting position to the exit. the natural approach to getting out of
   the maze is to try all the paths.

   let   s say you have two choices at the point where you are currently
   standing. obviously, you don   t know which one leads out of the maze. so
   you decide to make the first choice and move onwards in the maze.

   you keep making moves and you keep moving forward and you hit a dead
   end. now you would ideally want to try a different path, and so you
   backtrack to a previous checkpoint where you made one of the choices
   and then you try a new one i.e. a different path this time.

   you keep doing this until you find the exit.

   recursively trying out a specific path and backtracking are the two
   components forming the depth first search algorithm (dfs).

   if we model the maze problem as a graph, the vertices would represent
   the individual   s position on the maze and directed edges between two
   nodes would represent a single move from one position to another
   position. using dfs, the individual would try all possible routes until
   the exit is found.

   here is a sample pseudo-code for the same.
1  procedure dfs(g,v):
2      label v as discovered
3      for all edges from v to w in g.adjacentedges(v) do
4          if vertex w is not labeled as discovered then
5              recursively call dfs(g,w)

   for a deeper dive into this algorithm, check out :-
   [13]deep dive through a graph: dfs traversal
   for better or for worse, there   s always more than one way to do
   something. luckily for us, in the world of software and   medium.com

   time complexity: o(v + e)

breadth first search

   imagine a contagious disease gradually spreading across a region. every
   day, the people who have the illness infect new people they come into
   physical contact with. in this way, the disease is doing a sort of
   breadth-first-search(bfs) over the population. the    queue    is the set
   of people who have just been infected. the graph is the physical
   contact network of the region.

   imagine you need to simulate the spread of the disease through this
   network. the root node of the search is patient zero, the first known
   sufferer of the disease. you start off with just them with the disease,
   and no one else.

   now you iterate over the people they are in contact with. some will
   catch the disease. now iterate over all of them. give the people
   they   re in contact with the disease too, unless they   ve already had it.
   keep going until you   ve infected everyone, or you   ve infected your
   target. then you   re done. that   s how breadth-first-search works.
   [1*iy5trjcxkqtja6mq-gr8pg.png]

   the bfs search algorithm explores vertices layer by layer starting at
   the very first vertex and only moving on to the next layer once all
   vertices on the current layer have been processed.

   here is a sample pseudo-code for bfs.
1   procedure bfs(g, v):
2       q = queue()
3       q.enqueue(v)
4       while q is not empty:
5            v = q.dequeue()
6            if v is not visited:
7               mark v as visited (// process the node)
8               for all edges from v to w in g.adjacentedges(v) do
9                    q.enqueue(w)

   for a deeper understanding of bfs, look into [14]this article.

   time complexity: o(v + e)

shortest paths

   let   s move forward and solve our original problem: finding the shortest
   path between two given vertices in an undirected graph.

   looking at the time complexities of the two algorithms, we can   t really
   make out the difference between the two for this problem. both the
   algorithms will find a path (or rather the shortest path) to our
   destination from the given source.

   let   s look at the following example.
   [1*yq1t6zvjdr9rnvpegfc4qg.png]

   suppose we want to find out the shortest path from the node 8 to 10.
   let   s look at the nodes that dfs and bfs explore before reaching the
   destination.

dfs

     * process 8     process 3     process 1.
     * backtrack to 3.
     * process 6     process 4.
     * backtrack to 6.
     * process 7.
     * backtrack to 6     backtrack to 3     backtrack to 8.
     * process 10.

   a total of 7 nodes are being processed here before the destination is
   reached. now let   s look at how bfs does things.

bfs

     * process 8     enqueue 3, 10
     * process 3     enqueue 1,6
     * process 10.

   woah, that was fast! just 3 nodes had to be processed and we were at
   our destination.

   the explanation for this speedup that we can see in bfs and not in dfs
   is because dfs takes up a specific path and goes till the very end i.e.
   until it hits a dead end and then backtracks.

   this is the major downfall of the dfs algorithm. it might have to
   expand 1000s of levels (in a huge network like that of facebook, just
   because it selected a bad path to process in the very beginning) before
   reaching the path containing our destination. bfs doesn   t face this
   problem and hence is much faster for our problem.

   additionally, even if dfs finds out the destination, we cannot be sure
   that the path taken by dfs is the shortest one. there might be other
   paths as well.

   that means that in any case, for the shortest paths problem, dfs would
   have to span the entire graph to get the shortest path.

   in the case of bfs, however, the first occurrence of the destination
   node ensures that it is the one at the shortest distance from the
   source.

conclusion

   so far we discussed the problem of friends recommendation by facebook
   and we boiled it down to the problem of finding the degree of
   connections between two users in the network graph.

   then we discussed two interesting graph traversal algorithms that are
   very commonly used. finally, we looked at which algorithm performs the
   best for solving our problem.

   breadth first search is the algorithm you want to use if you have to
   find the shortest distance between two nodes in an undirected,
   unweighted graph.

   let   s look at [15]this fun problem to depict the difference between the
   two algorithms.

   assuming that you   ve read the problem statement carefully, let   s try
   and model this as a graph problem in the first place.

   let all possible strings become nodes in the graph and we have an edge
   between two vertices if they have a single mutation between them.

   easy, right?

   we are given a starting string (read source vertext) eg:-    aaid35gtt   
   and we have to reach the destination string (read destination vertex)
      aaid35gta    in minimum number of mutations (read minimum number of
   steps) such that all intermediate strings (nodes) should belong to the
   given word bank.

   try and solve this problem on your own before looking at the solution
   below.
   [1*1jpq5hpqwy96j3-jxuhcyw.png]

   if you try to solve it using dfs, you will surely come up with a
   solution, but there is a test case(s) that will exceed the allotted
   time limit on the leetcode platform. that   s because of the problem
   described before as to why dfs takes so long (process 7 nodes as
   opposed to 3 in bfs) to reach the destination vertex.

   hope you got the main idea behind the two main graph traversals, and
   the difference between them when the application is shortest paths in
   an undirected unweighted graph.

   please recommend (   ) this post if you think this may be useful for
   someone!

   thanks to [16]rahul gupta.
     * [17]programming
     * [18]algorithms
     * [19]tech
     * [20]technology
     * [21]web development

   (button)
   (button)
   (button) 2.2k claps
   (button) (button) (button) 5 (button) (button)

     (button) blockedunblock (button) followfollowing
   [22]go to the profile of sachin malhotra

[23]sachin malhotra

   masters student at university of southern california | editor
   [24]@coderchef kitchen [25]https://git.io/fhqky | edorado93.github.io

     (button) follow
   [26]freecodecamp.org

[27]freecodecamp.org

   stories worth reading about programming and technology from our open
   source community.

     * (button)
       (button) 2.2k
     * (button)
     *
     *

   [28]freecodecamp.org
   never miss a story from freecodecamp.org, when you sign up for medium.
   [29]learn more
   never miss a story from freecodecamp.org
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://medium.freecodecamp.org/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/227a90c6a261
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://medium.freecodecamp.org/deep-dive-into-graph-traversals-227a90c6a261&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://medium.freecodecamp.org/deep-dive-into-graph-traversals-227a90c6a261&source=--------------------------nav_reg&operation=register
   8. https://medium.freecodecamp.org/?source=logo-lo_gbeivm0cp8rb---336d898217ee
   9. https://medium.freecodecamp.org/tagged/web-development
  10. https://www.freecodecamp.com/?ref=mn
  11. https://medium.freecodecamp.org/@sachinmalhotra?source=post_header_lockup
  12. https://medium.freecodecamp.org/@sachinmalhotra
  13. https://medium.com/basecs/deep-dive-through-a-graph-dfs-traversal-8177df5d0f13
  14. https://medium.com/basecs/going-broad-in-a-graph-bfs-traversal-959bd1a09255
  15. https://leetcode.com/problems/minimum-genetic-mutation/description/
  16. https://medium.com/@rabbal1892?source=post_page
  17. https://medium.freecodecamp.org/tagged/programming?source=post
  18. https://medium.freecodecamp.org/tagged/algorithms?source=post
  19. https://medium.freecodecamp.org/tagged/tech?source=post
  20. https://medium.freecodecamp.org/tagged/technology?source=post
  21. https://medium.freecodecamp.org/tagged/web-development?source=post
  22. https://medium.freecodecamp.org/@sachinmalhotra?source=footer_card
  23. https://medium.freecodecamp.org/@sachinmalhotra
  24. http://twitter.com/coderchef
  25. https://git.io/fhqky
  26. https://medium.freecodecamp.org/?source=footer_card
  27. https://medium.freecodecamp.org/?source=footer_card
  28. https://medium.freecodecamp.org/
  29. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  31. https://medium.com/p/227a90c6a261/share/twitter
  32. https://medium.com/p/227a90c6a261/share/facebook
  33. https://medium.com/p/227a90c6a261/share/twitter
  34. https://medium.com/p/227a90c6a261/share/facebook
