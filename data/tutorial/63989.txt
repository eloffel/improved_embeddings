   #[1]github [2]recent commits to panphon:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]5
     * [35]star [36]41
     * [37]fork [38]6

[39]dmort27/[40]panphon

   [41]code [42]issues 0 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   python package and data files for manipulating phonological segments
   (phones, phonemes) in terms of universal phonological features.
     * [47]291 commits
     * [48]1 branch
     * [49]14 releases
     * [50]fetching contributors
     * [51]mit

    1. [52]python 99.1%
    2. other 0.9%

   (button) python other
   branch: master (button) new pull request
   [53]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/d
   [54]download zip

downloading...

   want to be notified of new releases in dmort27/panphon?
   [55]sign in [56]sign up

launching github desktop...

   if nothing happens, [57]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [58]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [59]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [60]download the github extension for visual studio
   and try again.

   (button) go back
   [61]@dmort27
   [62]dmort27 [63]init
   latest commit [64]17eaa48 jun 7, 2018
   [65]permalink
   type          name         latest commit message commit time
        failed to load latest commit information.
        [66]panphon           [67]init              jun 7, 2018
        [68].gitignore
        [69]license.txt
        [70]readme.md
        [71]readme.rst
        [72]contributors
        [73]convert_readme.sh
        [74]setup.id18
        [75]setup.py

readme.md

panphon

citing panphon

   if you use panphon in research, please cite the [76]following paper:

   david r. mortensen, patrick littell, akash bharadwaj, kartik goyal,
   chris dyer, lori levin (2016). "panphon: a resource for mapping ipa
   segments to articulatory feature vectors." proceedings of coling 2016,
   the 26th international conference on computational linguistics:
   technical papers, pages 3475   3484, osaka, japan, december 11-17 2016.

   or in bibtex:
@inproceedings{mortensen-et-al:2016,
  author    = {david r. mortensen and
               patrick littell and
               akash bharadwaj and
               kartik goyal and
               chris dyer and
               lori s. levin},
  title     = {panphon: {a} resource for mapping {ipa} segments to articulatory
feature vectors},
  booktitle = {proceedings of {coling} 2016, the 26th international conference o
n computational linguistics: technical papers},
  pages     = {3475--3484},
  publisher = {{acl}},
  year      = {2016}
}

   this package constitutes a database of segments in the international
   phonetic alphabet (ipa) and their equivalents in terms of
   (articulatory) phonological features. they include both data files and
   the tool generate_ipa_all.py, which allows the application of rules for
   diacritics and modifiers to collections of ipa characters, data files,
   and configuration/rule files and well as the tool validate_ipa.py,
   which checks unicode ipa text from stdin for well-formedness.

python api for accessing phonological features of ipa segments

   the featuretable class in the panphon module provides a straightforward
   api that allows users and developers to access the segment-feature
   relationships encoded in the ipa database consisting of the files
   panphon/data/ipa_bases.csv and diacritic_definitions.yml.

   note that a new api using faster, more rational, data structures (see
   the segment class in panphon.segment) has been introduced. the old api
   is still available in the module _panphon.
>>> import panphon
>>> ft = panphon.featuretable()
>>> ft.word_fts(u'swit')
[<segment [-syl, -son, +cons, +cont, -delrel, -lat, -nas, 0strid, -voi, -sg, -cg
, +ant, +cor, -distr, -lab, -hi, -lo, -back, -round, -velaric, 0tense, -long]>,
<segment [-syl, +son, -cons, +cont, -delrel, -lat, -nas, 0strid, +voi, -sg, -cg,
 -ant, -cor, 0distr, +lab, +hi, -lo, +back, +round, -velaric, 0tense, -long]>, <
segment [+syl, +son, -cons, +cont, -delrel, -lat, -nas, 0strid, +voi, -sg, -cg,
0ant, -cor, 0distr, -lab, +hi, -lo, -back, -round, -velaric, +tense, -long]>, <s
egment [-syl, -son, +cons, -cont, -delrel, -lat, -nas, 0strid, -voi, -sg, -cg, +
ant, +cor, -distr, -lab, -hi, -lo, -back, -round, -velaric, 0tense, -long]>]
>>> ft.word_fts(u'swit')[0].match({'cor': 1})
true
>>> ft.word_fts(u'swit')[0] >= {'cor': 1}
true
>>> ft.word_fts(u'swit')[1] >= {'cor': 1}
false
>>> ft.word_to_vector_list(u'sau  ', numeric=false)
[[u'-', u'-', u'+', u'+', u'-', u'-', u'-', u'0', u'-', u'-', u'-', u'+', u'+',
u'-', u'-', u'-', u'-', u'-', u'-', u'-', u'0', u'-'], [u'+', u'+', u'-', u'+',
u'-', u'-', u'-', u'0', u'+', u'-', u'-', u'0', u'-', u'0', u'-', u'-', u'+', u'
+', u'-', u'-', u'+', u'-'], [u'+', u'+', u'-', u'+', u'-', u'-', u'-', u'0', u'
+', u'-', u'-', u'0', u'-', u'0', u'+', u'+', u'-', u'+', u'+', u'-', u'+', u'-'
], [u'-', u'+', u'-', u'+', u'-', u'-', u'-', u'0', u'+', u'-', u'-', u'+', u'+'
, u'-', u'-', u'+', u'-', u'+', u'+', u'-', u'0', u'-']]

summary of functionality

operations on feature sets and segments

   the featuretable class includes a broad range of operations on features
   and segments (consonants and vowels).

converting words to feature arrays

   the panphon class includes the function word2array which takes a list
   of feature names (as a list of strings) and a panphon word (from
   featuretable().word_fts()) and returns a numpy array where each row
   corresponds to a segment in the word and each column corresponds to one
   of the specified features. basic usage is illustrated in the following
   example:
>>> import panphon
>>> ft=panphon.featuretable()
>>> ft.word_array(['syl', 'son', 'cont'], u's  lti')
array([[-1, -1,  1],
       [ 1,  1,  1],
       [-1,  1,  1],
       [-1, -1, -1],
       [ 1,  1,  1]])

segment manipulations

   the segment class, defined in the panphon.segment module, is used to
   represent analyzed segments in the new panphon.featuretable class (code
   found in panphon.featuretable). it provides performance advantages over
   the old list-of-tuples representation, is more pythonic, and provides
   additional functionality.

construction

   there are two main ways to construct a segment object:
>>> from panphon.segment import segment
>>> segment(['syl', 'son', 'cont'], {'syl': -1, 'son': -1, 'cont': 1})
<segment [-syl, -son, +cont]>
>>> segment(['syl', 'son', 'cont'], ftstr='[-syl, -son, +cont]')
<segment [-syl, -son, +cont]>

   in both cases, the first argument passed to the constructor is a list
   of feature names. this specifies what features a segment has as well as
   their canonical ordering (used, for example, when a feature vector for
   a segment is returned as a list). the second argument is a dictionary
   of feature name-feature value pairs. the feature values are integers
   from the set {-1, 0 1} (equivalent to {-, 0, +}). this dictionary can
   be omitted if the keyword argument ftstr is included. this string is
   scanned for sequences of (-|0|+)(\w+), which are interpreted as
   name-value (really value-name) pairs.

basic querying and updating

   segment objects implement a dictionary-like interface for manipulating
   key-value pairs:
>>> a = segment(['syl', 'son', 'cont'], {'syl': -1, 'son': -1, 'cont': 1})
>>> a
<segment [-syl, -son, +cont]>
>>> a['syl']
-1
>>> a['son'] = 1
>>> a
<segment [-syl, +son, +cont]>
>>> a.update({'son': -1, 'cont': -1})
>>> a
<segment [-syl, -son, -cont]>

set operations

   the match method asks whether the segment object on which it is called
   has a superset of the features contained in the dictionary passed to it
   as an argument. the >= operator is an alias for the match method:
>>> a = segment(['syl', 'son', 'cont'], {'syl': -1, 'son': -1, 'cont': 1})
>>> a.match({'son': -1, 'cont': 1})
true
>>> a.match({'son': -1, 'cont': -1})
false
>>> a >= {'son': -1, 'cont': 1}
true
>>> a >= {'son': 1, 'cont': 1}
false

   the intersection method asks which features the segment object on which
   it is called and the dictionary or segment object that is passed to it
   as an argument share. the & operator is an alias for the intersection
   method:
>>> a = segment(['syl', 'son', 'cont'], {'syl': -1, 'son': -1, 'cont': 1})
>>> a.intersection({'syl': -1, 'son': 1, 'cont': -1})
<segment [-syl]>
>>> a & {'syl': -1, 'son': 1, 'cont': -1}
<segment [-syl]>

vector representations

   segment objects can return their vector representations, either as a
   list of integers or as a list of strings, using the numeric and string
   methods:
>>> a = segment(['syl', 'son', 'cont'], {'syl': -1, 'son': -1, 'cont': 1})
>>> a.numeric()
[-1, -1, 1]
>>> a.strings()
[u'-', u'-', u'+']

fixed-width pattern matching

   the featuretable classes also allows matching of fixed-width,
   feature-based patterns.

sonority calculations

   the sonority class has methods for computing sonority scores for
   segments.

feature id153

   the distance class includes methods for calculating id153, both
   in which the cost of substitutions is based upon hamming distance
   between the feature vectors and in which the cost of substitutions are
   based upon edit weights for individual features.

the panphon.distance module

   this module includes the distance class, which includes various methods
   for computing the distance between unicode ipa strings, including
   convenience methods (really "inconvenience methods") for computing
   levenshtein distance, but--more importantly--methods for computing
   similarity metrics related to articulatory features. the methods
   include the following:

   panphon.distance.distance .levenshtein_distance

   a python implementation of levenshtein's string id153.

   panphon.distance.distance .fast_levenshtein_distance

   a c implementation of levenshtein's string id153.
   unsurprisingly, must faster than the former.

   panphon.distance.distance .dogol_prime_distance

   fast levenshtein distance after collapsing segments into an enhanced
   version of dogolpolsky's equivalence classes.

   panphon.distance.distance .feature_edit_distance

   id153 where each feature-edit has cost 1/22. edits from
   unspecified to specified cost 1/44.

   panphon.distance.distance .hamming_feature_edit_distance

   id153 where each feature-edit has cost 1/22. edits from
   unspecified to specified also cost 1/22. insertions and substitutions
   each cost 1.

   panphon.distance.distance .weighted_feature_edit_distance

   id153 where costs of feature edits are differently weighted
   depending on their class and subjective variability. all of these
   methods have the same interface and patterns of usage, demonstrated
   below:
>>> import panphon.distance
>>> dst = panphon.distance.distance()
>>> dst.dogol_prime_distance(u'pops', u'bobz')
0
>>> dst.dogol_prime_distance(u'pops', u'bobo')
1

scripts

the generate_ipa_all.py script

summary

   this small python program allows the user to apply sets of rules,
   defined in yaml, for adding diacritics and modifiers to ipa segments
   based upon their phonological features.

usage

   to generate a segment features file (ipa_all.csv), use the following in
   the panphon data directory:
$ generate_ipa_all.py ipa_bases.csv -d diacritic_definitions.yml -s sort_order.y
ml ipa_all.csv

   note that this will overwrite your existing ipa_all.csv file, which is
   often what you want.

data files

   this package also includes multiple data files. the most important of
   these is ipa_bases.csv, a csv table of ipa characters with definitions
   in terms of phonological features. from it, and the
   diacritics_definitions.yml file, the comprehensive ipa_all.csv is
   generated.

ipa character databases: ipa_bases.csv and ipa_all.csv

   the ipa character table is a csv file in which the first column
   contains an ipa segment and each subsequent column contains a
   phonological feature, coded as +, -, or 0. the features are as follows:
     * syl: syllabic
     * son: sonorant
     * cons: consonantal
     * cont: continuant
     * delrel: delayed release
     * lat: lateral
     * nas: nasal
     * strid: strident
     * voi: voice
     * sg: spread glottis
     * cg: constricted glottis
     * ant: anterior
     * cor: coronal
     * distr: distributed
     * lab: labial
     * hi: high (vowel/consonant, not tone)
     * lo: low (vowel/consonant, not tone)
     * back: back
     * round: round
     * tense: tense

   inspiration for the data in these tables is drawn primarily from two
   sources: the data files for [77]hsspe and bruce hayes's [78]feature
   spreadsheet. it has since be re-rationalizeds based on evidence from a
   wide range of sources. as such, any special relationship to these prior
   inspirations has been eliminated.

   the ipa character table ipa_bases.csv is intended to contain all of the
   unmodified segmental symbols in ipa, as well as all common affricates
   and dually-articulated segments. it is meant to be augmented by the
   rule-driven application of diacritics and modifiers.

configuration and rule files

   this package includes two files that control the behavior of
   generate_ipa_all.py. these are intended to be edited by the end user.
   both are written in [79]yaml, a standardized, human-readable and
   human-editable data serialization language.

sort order specification: sort_order.yml

   the file sort_order.yml controls the ordering of segments in the output
   of the diacritic application tool. it is a sequence of maps, each with
   two fields:
     * name the name of a feature.
     * reverse a boolean value (true or false) specifying whether sorting
       on the named feature will be reversed or not.

   the order of the features determines the priority of sorting.

   the file sort_order_schema_.yml is a [80]kwalify schema that defines a
   syntactically valid sort order file.

diacritic and modifier rules: diacritic_definitions.yml

   the most important file for controlling the diacritic application tool
   is diacritic_definitions.yml, a list of rules for applying diacritics
   and modifiers to ipa segments based on their phonological features. it
   has two sections, diacritics and combinations. each of these is the key
   to an item in the top-level map.

diacritics

   the key diacritics points to a list of rules for applying
   diacritics/modifiers to bases. each rule is a map with the following
   fields:
     * marker. the unicode diacritic or modifier.
     * name. the name of the series derived from applying the diacritic or
       modifier.
     * postion. the position of the diacritic relative to the base (pre or
       post).
     * conditions. a list of conditions, each of them consisting of an
       associative array of feature specifications, under which the
       diacritic or modifier will be applied to a base.
     * exclude. a sequence of segments to be excluded from the application
       of the diacritic/modifier even if they match the conditions.
     * content. the feature specifications that will be set if the
       diacritic or modifier is applied, given as a map of feature
       specifications.

combinations

   the key combinations likewise points to a list of rules for combining
   the rules in diacritics. these rules are very simple, and include only
   the following fields:
     * name. the name of the combined category.
     * combines. a sequence of the names of the rules from diacritics that
       are to be combined.

   the file diacritic_definitions_schema.yml is a [81]kwalify schema that
   defines a syntactically valid diacritics definition file.

     *    2019 github, inc.
     * [82]terms
     * [83]privacy
     * [84]security
     * [85]status
     * [86]help

     * [87]contact github
     * [88]pricing
     * [89]api
     * [90]training
     * [91]blog
     * [92]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [93]reload to refresh your
   session. you signed out in another tab or window. [94]reload to refresh
   your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/dmort27/panphon/commits/master.atom
   3. https://github.com/dmort27/panphon/#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/dmort27/panphon
  32. https://github.com/join
  33. https://github.com/login?return_to=/dmort27/panphon
  34. https://github.com/dmort27/panphon/watchers
  35. https://github.com/login?return_to=/dmort27/panphon
  36. https://github.com/dmort27/panphon/stargazers
  37. https://github.com/login?return_to=/dmort27/panphon
  38. https://github.com/dmort27/panphon/network/members
  39. https://github.com/dmort27
  40. https://github.com/dmort27/panphon
  41. https://github.com/dmort27/panphon
  42. https://github.com/dmort27/panphon/issues
  43. https://github.com/dmort27/panphon/pulls
  44. https://github.com/dmort27/panphon/projects
  45. https://github.com/dmort27/panphon/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/dmort27/panphon/commits/master
  48. https://github.com/dmort27/panphon/branches
  49. https://github.com/dmort27/panphon/releases
  50. https://github.com/dmort27/panphon/graphs/contributors
  51. https://github.com/dmort27/panphon/blob/master/license.txt
  52. https://github.com/dmort27/panphon/search?l=python
  53. https://github.com/dmort27/panphon/find/master
  54. https://github.com/dmort27/panphon/archive/master.zip
  55. https://github.com/login?return_to=https://github.com/dmort27/panphon/
  56. https://github.com/join?return_to=/dmort27/panphon
  57. https://desktop.github.com/
  58. https://desktop.github.com/
  59. https://developer.apple.com/xcode/
  60. https://visualstudio.github.com/
  61. https://github.com/dmort27
  62. https://github.com/dmort27/panphon/commits?author=dmort27
  63. https://github.com/dmort27/panphon/commit/17eaa482e3edb211f3a8138137d76e4b9246d201
  64. https://github.com/dmort27/panphon/commit/17eaa482e3edb211f3a8138137d76e4b9246d201
  65. https://github.com/dmort27/panphon/tree/17eaa482e3edb211f3a8138137d76e4b9246d201
  66. https://github.com/dmort27/panphon/tree/master/panphon
  67. https://github.com/dmort27/panphon/commit/17eaa482e3edb211f3a8138137d76e4b9246d201
  68. https://github.com/dmort27/panphon/blob/master/.gitignore
  69. https://github.com/dmort27/panphon/blob/master/license.txt
  70. https://github.com/dmort27/panphon/blob/master/readme.md
  71. https://github.com/dmort27/panphon/blob/master/readme.rst
  72. https://github.com/dmort27/panphon/blob/master/contributors
  73. https://github.com/dmort27/panphon/blob/master/convert_readme.sh
  74. https://github.com/dmort27/panphon/blob/master/setup.id18
  75. https://github.com/dmort27/panphon/blob/master/setup.py
  76. https://www.aclweb.org/anthology/c/c16/c16-1328.pdf
  77. https://github.com/dmort27/hsspe
  78. http://www.linguistics.ucla.edu/people/hayes/ip/#features
  79. http://www.yaml.org/
  80. http://www.kuwata-lab.com/kwalify/
  81. http://www.kuwata-lab.com/kwalify/
  82. https://github.com/site/terms
  83. https://github.com/site/privacy
  84. https://github.com/security
  85. https://githubstatus.com/
  86. https://help.github.com/
  87. https://github.com/contact
  88. https://github.com/pricing
  89. https://developer.github.com/
  90. https://training.github.com/
  91. https://github.blog/
  92. https://github.com/about
  93. https://github.com/dmort27/panphon/
  94. https://github.com/dmort27/panphon/

   hidden links:
  96. https://github.com/
  97. https://github.com/dmort27/panphon/
  98. https://github.com/dmort27/panphon/
  99. https://github.com/dmort27/panphon/
 100. https://help.github.com/articles/which-remote-url-should-i-use
 101. https://github.com/dmort27/panphon/#panphon
 102. https://github.com/dmort27/panphon/#citing-panphon
 103. https://github.com/dmort27/panphon/#python-api-for-accessing-phonological-features-of-ipa-segments
 104. https://github.com/dmort27/panphon/#summary-of-functionality
 105. https://github.com/dmort27/panphon/#operations-on-feature-sets-and-segments
 106. https://github.com/dmort27/panphon/#converting-words-to-feature-arrays
 107. https://github.com/dmort27/panphon/#segment-manipulations
 108. https://github.com/dmort27/panphon/#construction
 109. https://github.com/dmort27/panphon/#basic-querying-and-updating
 110. https://github.com/dmort27/panphon/#set-operations
 111. https://github.com/dmort27/panphon/#vector-representations
 112. https://github.com/dmort27/panphon/#fixed-width-pattern-matching
 113. https://github.com/dmort27/panphon/#sonority-calculations
 114. https://github.com/dmort27/panphon/#feature-edit-distance
 115. https://github.com/dmort27/panphon/#the-panphondistance-module
 116. https://github.com/dmort27/panphon/#scripts
 117. https://github.com/dmort27/panphon/#the-generate_ipa_allpy-script
 118. https://github.com/dmort27/panphon/#summary
 119. https://github.com/dmort27/panphon/#usage
 120. https://github.com/dmort27/panphon/#data-files
 121. https://github.com/dmort27/panphon/#ipa-character-databases-ipa_basescsv-and-ipa_allcsv
 122. https://github.com/dmort27/panphon/#configuration-and-rule-files
 123. https://github.com/dmort27/panphon/#sort-order-specification-sort_orderyml
 124. https://github.com/dmort27/panphon/#diacritic-and-modifier-rules-diacritic_definitionsyml
 125. https://github.com/dmort27/panphon/#diacritics
 126. https://github.com/dmort27/panphon/#combinations
 127. https://github.com/
