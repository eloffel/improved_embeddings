community

   news
   beta
   tutorials
   cheat sheets
   open courses
   podcast - dataframed
   chat
   new

datacamp

   official blog
   tech thoughts
   (button)
   search
   [1](button)
   log in
   (button)
   create account
   (button)
   share an article
   (button)
   back to tutorials
   tutorials
   [2]0
   59
   59
   daniel poston
   september 21st, 2017
   python
   +1

poker id203 and statistics with python

   tackle id203 and statistics in python: learn more about
   combinations and permutations, dependent and independent events, and
   expected value.

   data scientists create machine learning models to make predictions and
   optimize decisions. in online poker, the options are whether to bet,
   call, or fold. you aren't allowed to use software to make those
   decisions though. that's where most online poker sites draw the line in
   the rules. since you can't train a machine learning model, you must
   train your brain. this requires an endless stream of equity
   calculations away from the poker table, which use many different
   id203 and statistics concepts.

   in this tutorial, you'll learn some of these concepts using a deck of
   cards and generic poker situations. more specifically, you'll cover the
   following topics:
     * [3]id203 theory: an introduction
          + key concepts
          + calculating id203
     * [4]id203 with combinations and permutations
     * [5]independent versus dependent events
     * [6]multiple events
          + mutually exclusive events
          + non-mutually exclusive events
          + intersection of independent events
          + intersection of dependent events
     * [7]expected value

   [card_o6hpry.png]

   if you're interested in tackling statistics with python, consider
   datacamp's [8]statistical thinking in python course.

personal motivation

   for several years, i made a living playing online poker professionally.
   data science was a natural progression for me as it requires a similar
   skill-set as earning a profit from online poker. i wrote a blog about
   [9]what data science has in common with poker, and i mentioned that
   each time a poker hand is played at an online poker site, a hand
   history is generated. these hand histories explain everything that each
   player did during that hand. i used software called [10]hold   em manager
   (think tableau for poker) to take advantage of this data. hold'em
   manager downloads each of these hand histories in real-time to a
   postgresql database so you can keep track of your opponent   s
   tendencies.

id203 theory: an introduction

   before you get your hands dirty, it's time to consider what id203
   theory is and why it's important to learn about it when you're getting
   into data science. additionally, you'll learn some key concepts that
   will be handy to consider throughout the tutorial and you'll learn how
   to calculate the id203 of single events.

   you'll often wonder in real-life situations what the probabilities are
   of some event occurring, such as winning the lottery, the victory of
   your soccer team or a discount on your favorite pair of shoes. "what
   are the chances..." is an expression you probably use very often.
   determining the chances of an event occurring is called "id203".

   this type of id203 is different from the mathematical way of
   looking at id203, which you can find in id203 theory, a
   branch of mathematics. and in mathematics, you have two broad
   categories of interpretations on "id203" is - the "physical" and
   "evidential" probabilities.

   the former are also called objective or frequency probabilities and are
   associated with random physical systems such as flipping coins,
   roulette wheels, or rolling dice. in such systems, a given type of
   event tends to occur at a persistent rate, or "relative frequency", in
   a long run of trials.

   the latter is also called bayesian id203, which can be assigned
   to any statement whatsoever, even when no random process is involved,
   as a way to represent its subjective plausibility, or the degree to
   which the statement is supported by the available evidence. on most
   accounts, evidential probabilities are considered to be degrees of
   belief, defined in terms of dispositions to gamble at certain odds.

   note that id203 theory is mainly concerned with predicting the
   likelihood of future events, while statistics analyzes the frequency of
   past events. this also explains why id203 theory is also one of
   the core topics that you should cover if you want to become a data
   scientist: as you well know, in data science and machine learning,
   you'll use data from events that have already occurred to predict
   future events.

   so while id203 theory is generally considered to be hard to
   understand intuitively, the concepts are crucial to data science and
   predictive analytics.

key concepts and symbols

   some key concepts that you should probably be aware of for this
   tutorial are mostly concerned with the frequentist perspective on
   id203, as this tutorial works with a deck of 52 playing cards.

   from that perspective, the fundamental ingredient of id203 theory
   is an experiment that can be repeated, at least hypothetically, under
   essentially identical conditions. this experiment may lead to different
   outcomes on different trials or single performances of an experiment.
   the set of all possible outcomes or results of an experiment is then
   called a "sample space". an event is a well-defined subset of the
   sample space.

   this is all very theoretical.

   let's consider some examples:
     * a somewhat clich   example would be flipping a coin. in this case,
       the experiment is, in fact, the flipping of a coin. you can toss
       the coin multiple times, and all these trials might have different
       outcomes. as there are two possible outcomes -heads or tails- the
       sample space is 2. however, the event "tossing a coin" can, for
       example, consist of one outcome "heads". similarly, when you toss a
       coin twice, your event "the first toss results in a heads" might
       have an outcome "heads-heads" or "heads-tails".

     * another example that is maybe less straightforward is an experiment
       where you spin a globe and you stop it by putting your finger on
       it. you can spin the globe multiple times and all these times might
       have different outcomes - you can either land your finger on land
       or on water. that means that the sample space is 2. an event "my
       finger is on land" might have an outcome "land - water" or "land -
       land".

     * a last example is the experiment where you toss a die. you can toss
       the die multiple times and all of these throws can have different
       outcomes: 6 to be exact, since your die has 6 numbers
       (1,2,3,4,5,6). an event "the sum of the results of the two toss is
       equal to 10" can consist of 10, while the event "the number is
       even" can consist of 2, 4, or 6.

   now that you have an idea of the key concepts that you'll be using
   throughout this tutorial, it's time to also consider some id203
   symbols that you will also encounter:
    symbol  meaning
   $$\cap$$ and
   $$\cup$$ or
   |        given

calculating id203 for single events

   now that you're completely up to date, you can start to determine the
   id203 of a single event happenings, such as a coin landing on
   tails. to calculate this id203, you divide the number of possible
   event outcomes by the sample space.

   this means that you have to consider first how many possible ways there
   are for the coin to land on tails, and the number of possible outcomes.
   the former is 1, as you have only one possible way to get tails. the
   latter is 2, as you will either get heads or tails when you flip the
   coin.

   to summarize, the calculation of the id203 of an event a will
   look something like this:

   $$p(a) = \frac{event \ outcomes \ favorable \ to \ a}{sample \ space}$$

   in the case of the coin flipping, the id203 of the coin landing
   on tails is 1/2 or 0.5.

   note how the id203 is always between 0 and 1, where 0 indicates
   that it's not very probable that the event will happen, where 1
   indicates that it's probable that the event will happen.

   now let's consider a second example in which you'll calculate the
   id203 of an event.

   [image7.png]

   there are 52 cards in a standard deck of cards and of those 52 cards, 4
   are aces. if you follow the example of the coin flipping from above to
   know the id203 of drawing an ace, you'll divide the number of
   possible event outcomes (4), by the sample space (52):

   $$p(a) = \frac{4}{52}$$

   note how $a$ represents the event of "drawing an ace".

   now, determine the id203 of drawing an ace with the help of
   python:
# sample space
cards = 52

# outcomes
aces = 4

# divide possible outcomes by the sample set
ace_id203 = aces / cards

# print id203 rounded to two decimal places
print(round(ace_id203, 2))

0.08

   the id203 of drawing an ace from a standard deck is 0.08. to
   determine id203 in percentage form, simply multiply by 100.
# ace id203 percent code
ace_id203_percent = ace_id203 * 100

# print id203 percent rounded to one decimal place
print(str(round(ace_id203_percent, 0)) + '%')

8.0%

   the id203 of drawing an ace as a percent is 8%.

   now that you have seen two examples where you calculated probabilities,
   it's easy to assume that you might build out your id203
   calculations to determine, for example, the id203 of drawing a
   card that is a heart, a face card (such as jacks, queens, or kings), or
   a combination of both, such as a queen of hearts.

   in such cases, you might want to create a user-defined function (udf)
   event_id203() to which you pass the event_outcomes and the
   sample_space to find the id203 of an event in percentage form,
   since you'll be reusing a lot of the code:
# create function that returns id203 percent rounded to one decimal place
def event_id203(event_outcomes, sample_space):
    id203 = (event_outcomes / sample_space) * 100
    return round(id203, 1)

# sample space
cards = 52

# determine the id203 of drawing a heart
hearts = 13
heart_id203 = event_id203(hearts, cards)

# determine the id203 of drawing a face card
face_cards = 12
face_card_id203 = event_id203(face_cards, cards)

# determine the id203 of drawing the queen of hearts
queen_of_hearts = 1
queen_of_hearts_id203 = event_id203(queen_of_hearts, cards)

# print each id203
print(str(heart_id203) + '%')
print(str(face_card_id203) + '%')
print(str(queen_of_hearts_id203) + '%')

25.0%
23.1%
1.9%

   these results probably don't surprise you: as you expected, the chances
   of drawing a queen of hearts are much smaller than the chances of
   drawing a regular face card or a heart.

id203 with combinations and permutations

   you have seen in the previous section that determining the size of your
   sample space is key to calculating probabilities. however, this can
   sometimes prove to be a challenge!

   fortunately, there are ways to make the counting task easier. two of
   these ways are permutations and combinations. in this section, you'll
   see what both of these concepts exactly mean and how you can use them
   to calculate the size of your sample space!

permutations

   permutations are the number of ways a subset of a specified size can be
   arranged from a given set, generally without replacement. an example of
   this would be a 4 digit pin with no repeated digits. the id203 of
   having no repeated digits can be calculated by executing the following
   calculation:

   $$10 \times 9 \times 8 \times 7$$.

   you have 10 numbers to choose from, but as you're working without
   replacement, one option always falls away as you pick a number for the
   4-digit pin. this means that in picking the first number for your pin,
   you'll have 10 numbers to choose from (0 to 9), but for the second
   number of your pin, you'll only have 9 options to choose from, etc.

   on a higher level, you see that the previous paragraph actually
   considers two things: (1) the numbers to choose from, and (2) the
   numbers that you actually choose. in the example above, 10 is the
   number of digits that you can choose from, as you consider all numbers
   between 0 and 9. however, the actual number of things that you choose
   is 4, since you have a 4-digit pin.

   when calculating the permutations, this means that you consider the
   full set of the numbers to choose from, which is in reality $$10 \times
   9 \times 8 \times 7 \times 6 \times 5 \times 4 \times 3 \times 2 \times
   1$$ and you divide the result of this calculation by the difference in
   the numbers to choose from (10) and the numbers that you actually
   choose (4). since you're considering probabilities, this means that
   this difference will be $$6 \times 5 \times 4 \times 3 \times 2 \times
   1$$.

   note that you can also write the above as

   $$10p4 = \frac{10!}{(10 - 4)!}$$

   you'll notice that there is an "10!" and "6!" or "10 factorial" and "6
   factorial" in the equation, which is used to indicate that all the
   consecutive positive integers from 1 up to and including 10 or 6 are to
   be multiplied together.

   the result of this calculation is 5040 permutations. note how this is
   exactly the same as the calculation that you made above, when you
   multiplied 10, 9, 8 and 7.

   generalizing the calculations above, this means that the formula to
   calculate permutations is the following:

   $$npk = \frac{n!}{(n - k)!}$$

   let's practice this with an example!

   to find the number of permutations of pocket aces, from which you only
   pick 2, you'll consider the full set of aces to choose from (4) and you
   also consider the number of aces that you actually choose (2):

   $$4p2 = \frac{4!}{(4 - 2)!}$$

combinations

   you have seen that when you're working with permutations, the order
   matters. with combinations, however, this isn't the case: the order
   doesn't matter. combinations refers to the number of ways a subset of a
   specified size can be drawn from a given set.

   an example here is the following situation where you have your deck of
   cards, which consists of 52 cards. three cards are going to be taken
   out of the deck. how many different ways can you choose these three
   cards?

   in fact, this should be $$52 \times 51 \times 50$$, which is actually
   the same as the permutations formula that you have just used! however,
   with combinations, you don't take the order into account. this means
   that if you want to figure out how many combinations you actually have,
   you just create all the permutations and divide by all the redundancies
   or $$3 \times 2 \times 1$$.

   this means that your calculation of the combinations will look like
   this:

   $$52c3 = \frac{\frac {52!}{(52-3)!}}{3!}$$

   this calculation can be generalized to the following formula:

   $$nck = \frac{npk}{k!}$$

   where you clearly see that the numerator is exactly the same formula as
   the permutations formula that you have just seen, while the denominator
   is the factorial of the number of cards that you will actually choose.

   consider another example with aces. there are four aces in a deck of
   cards, and these are all the different combinations of pocket aces;
    1. ace hearts / ace diamonds
    2. ace hearts / ace clubs
    3. ace hearts / ace spades
    4. ace diamonds / ace clubs
    5. ace diamonds / ace spades
    6. ace clubs / ace spades

   there are six combinations of pocket aces. to find the number of
   combinations, you first must find the number of permutations:
# permutations code
import math
n = 4
k = 2

# determine permutations and print result
permutations = math.factorial(n) / math.factorial(k)
print(permutations)

12.0

   to determine the number of combinations, simply divide the number of
   permutations by the factorial of the size of the subset. try finding
   the number of starting hand combinations that can be dealt in texas
   hold   em.

   $$52c2 = \frac{52p2}{2!}$$
# combinations code
n = 52
k = 2

# determine permutations
permutations = math.factorial(n) / math.factorial(n - k)

# determine combinations and print result
combinations = permutations / math.factorial(k)
print(combinations)

1326.0

independent versus dependent events

   you have read in the introduction that an event is a well-defined
   subset of the sample space. events can be classified into two
   categories: dependent or independent.

   independent events are events that don't impact the id203 of the
   other event(s). two events a and b are independent if knowing whether
   event a occurred gives no information about whether event b occurred.

   this is true when you, for example, draw an ace from the deck, replace
   the card, shuffle the deck, and then drawing another card. the
   id203 of drawing an ace the first draw is the same as the second.

   dependent events, then, are events that have an impact on the
   id203 of the other event(s).

   for example, you draw a card from the deck and then draw a second card
   from the deck without replacing the first card. in this case, the
   id203 of drawing an ace the fist draw is not the same as the
   id203 of drawing an ace on the second draw. after the first card
   is drawn, the sample space has reduced by 1, from 52 to 51. depending
   on what the card was on the first draw, the number of event outcomes
   may have also changed. if the card was an ace, there are now only 3
   aces remaining for the second draw.

   let's consider these definitions in formal terms now. events a and b
   (which have nonzero id203) are independent if and only if one of
   the following equivalent statements holds: $$p (a     b) = p(a)p(b)$$ $$p
   (a|b) = p(a)$$ $$p (b|a) = p(b)$$

   or, in other words, events a and b are independent if:
     * the id203 of events a and b to occur equals the product of
       the probabilities of each event occurring.
     * the id203 of event a to occur if an event b has already
       occurred is equal to the id203 of an event a to occur.
     * the id203 of an event b to occur if an event a has already
       occurred is the same as the id203 of an event b to occur.

   let's consider the following example, where you already know the
   id203 of drawing an ace on the first draw. now you need to
   determine the id203 of drawing an ace on the second draw, if the
   first card drawn was either a king or an ace:
# sample space
cards = 52
cards_drawn = 1
cards = cards - cards_drawn

# determine the id203 of drawing an ace after drawing a king on the first
draw
aces = 4
ace_id2031 = event_id203(aces, cards)

# determine the id203 of drawing an ace after drawing an ace on the first
draw
aces_drawn = 1
aces = aces - aces_drawn
ace_id2032 = event_id203(aces, cards)

# print each id203
print(ace_id2031)
print(ace_id2032)

7.8
5.9

   there are a few situations common to poker which are relevant to the
   concept of dependent events.

   but before you get started, a little background info is in order. the
   game is texas hold   em. played with a standard 52 card deck, texas
   hold   em is the most popular of all the poker variations. each player is
   dealt two cards to start the hand and will make the best five-card hand
   possible by using their two cards combined with the five community
   cards that are dealt throughout the hand. cards are dealt in four
   rounds:
     * pre-flop: each player is dealt two cards, known as "hole cards"
     * flop: three community cards are dealt
     * turn: one community card is dealt
     * river: final community card is dealt

dependent events: flush draw

   your hand

   [image6.png]

   community cards

   [image3.png]

   your on the turn and you have four cards to an ace high flush. a flush
   is a strong poker hand where all five cards are the same suit. what's
   the id203 that the last community card, known as the river card,
   is a diamond?
# sample space
cards = 52
hole_cards = 2
turn_community_cards = 4
cards = cards - (hole_cards + turn_community_cards)

# outcomes
diamonds = 13
diamonds_drawn = 4
# in poker, cards that complete a draw are known as "outs"
outs = diamonds - diamonds_drawn

#determine river flush id203
river_flush_id203 = event_id203(outs, cards)
print(river_flush_id203)

19.6

   there is roughly a 20% chance of hitting your flush draw on the river.
   here   s another one:

dependent events: open-ended straight draw

   your hand

   [image4.png]

   community cards

   [image8.png]

   your on the turn and you have an open-ended straight draw. a straight
   is another strong hand where there are five cards in sequential order.
   the straight draw is open-ended because any eight ( 8, 9, 10, jack,
   queen) or any king (9, 10, jack, queen, king) will complete the
   straight.

   what's the id203 that the river card completes the straight?
# sample space
cards = 52
hole_cards = 2
turn_community_cards = 4
cards = cards - (hole_cards + turn_community_cards)

# outcomes
eights = 4
kings = 4
outs = eights + kings

# determine river straight id203
river_straight_id203 = event_id203(outs, cards)
print(river_straight_id203)

17.4

   there is roughly a 17% chance of hitting your straight draw on the
   river.

multiple events

   up until now, you considered only one event when you were calculating
   the probabilities, but what when you are dealing with multiple events?

   an example of multiple events is the question "what is the id203
   of eating three oatmeal cookies followed by a chocolate chip cookie
   when you eat four cookies out of a cookie jar filled with these two
   types of cookies?" eating four cookies is actually four events.

   to calculate the id203 for multiple events, you basically
   determine the number of events (4 in this case), you then determine the
   id203 for each event occurring separately and you multiply all of
   these probabilities to get your final answer. in the example that was
   described above, this would be 0.5 x 0.5 x 0.5 x 0.5 or 0.0625.

   $$p(event a \cap event b)=p(event a) \times p(event a)$$

   note that in this case, you calculate the probabilities of eating an
   oatmeal cookie and another oatmeal cookie and a third oatmeal, and a
   last chocolate chip cookie. when you're considering events that all
   have to happen, you multiply the probabilities.

   for your deck of playing cards, you could ask yourself the question
   "what is the id203 of getting three hearts when choosing without
   replacement?". when you sample or choose without replacement, it means
   that you choose a card but do not put it back, so that your final
   selection cannot include that same card. in this case, your id203
   calculation will be the following: 13/52 x 12/51 x 11/50.

mutually exclusive events

   when you're working with multiple events, you might also have events
   that are mutually exclusive or disjoint: they cannot both occur. in
   such cases, you might want to calculate the id203 (or the union)
   of any of multiple mutually exclusive events occurring. in such cases,
   you don't multiply probabilities, but you simply add together the
   id203 of each event occurring:

   $$p(event a \cup event b) = p(event a) + p(event b)$$

   it's key here to understand that the "or" component is very important:
   drawing a heart or drawing a club are two mutually exclusive events. a
   heart is a heart and a club is a club. to determine the id203 of
   drawing a heart or drawing a club, add the id203 of drawing a
   heart to the id203 of drawing a club.

   $$p(heart \cup club) = (\frac{13}{52}) + (\frac{13}{52})$$

   now it's time for you to determine the id203 of the following
   mutually exclusive events;
    1. drawing a heart or drawing a club;
    2. drawing an ace, a king or a queen.

# sample space
cards = 52

# calculate the id203 of drawing a heart or a club
hearts = 13
clubs = 13
heart_or_club = event_id203(hearts, cards) + event_id203(clubs, card
s)

# calculate the id203 of drawing an ace, king, or a queen
aces = 4
kings = 4
queens = 4
ace_king_or_queen = event_id203(aces, cards) + event_id203(kings, ca
rds) + event_id203(queens, cards)

print(heart_or_club)
print(ace_king_or_queen)

50.0
23.1

non-mutually exclusive events

   you can imagine that not all events are mutually exclusive: drawing a
   heart or drawing an ace are two non-mutually exclusive events. the ace
   of hearts is both an ace and a heart. when events are not mutually
   exclusive, you must correct for the overlap.

   $$p(event a \cup event b) = p(event a) + p(event b) - p(eventa \cup
   eventb)$$

   to calculate the id203 of drawing a heart or an ace, add the
   id203 of drawing a heart to the id203 of drawing an ace and
   then subtract the id203 of drawing the ace of hearts.

   $$p(heart \cup ace) = (\frac{13}{52}) + (\frac{4}{52}) -
   (\frac{1}{52})$$

   calculate the id203 of the following non mutually exclusive
   events;
    1. drawing a heart or an ace;
    2. drawing a red card or drawing a face card.

# sample space
cards = 52

# calculate the id203 of drawing a heart or an ace
hearts = 13
aces = 4
ace_of_hearts = 1
heart_or_ace = event_id203(hearts, cards) + event_id203(aces, cards)
 - event_id203(ace_of_hearts, cards)

# calculate the id203 of drawing a red card or a face card
red_cards = 26
face_cards = 12
red_face_cards = 6
red_or_face_cards = event_id203(red_cards, cards) + event_id203(face
_cards, cards) - event_id203(red_face_cards, cards)

print(round(heart_or_ace, 1))
print(round(red_or_face_cards, 1))

30.8
61.6

intersection of independent events

   the id203 of the intersection of two independent events is
   determined by multiplying the probabilities of each event occurring.

   $$p(event a \cap event b) = p(event a) \times p(event b)$$

   if you want to know the id203 of drawing an ace from a deck of
   cards, replacing it, reshuffling the deck, and drawing another ace, you
   multiply the id203 of drawing and ace times the id203 of
   drawing an ace.

   $$p(ace \cap ace) = (\frac{4}{52}) \times (\frac{4}{52})$$
# sample space
cards = 52

# outcomes
aces = 4

# id203 of one ace
ace_id203 = aces / cards

# id203 of two consecutive independant aces
two_aces_id203 = ace_id203 * ace_id203

# two ace id203 percent code
two_ace_id203_percent = two_aces_id203 * 100
print(round(two_ace_id203_percent, 1))

0.6

   the id203 of drawing two aces in a row, independently, is 0.592%.
   what if the second event is dependant?

intersection of dependent events

   the id203 of the intersection of two non independent events
   (event a & event b given a) is determined by multiplying the
   id203 of event a occurring times the id203 of event b given
   a.

   $$p(event a \cap event b | a) = p(event a) \times p(event b | a)$$

   the best starting hand you can have in texas hold   em is pocket aces.
   what is the id203 of being dealt two aces?

   $$p(ace \cap ace | ace) = (\frac{4}{52}) \times (\frac{3}{51})$$
# sample space first draw
cards = 52

# outcomes first draw
aces = 4

# id203 of ace on first draw
first_ace_id203 = aces / cards

# sample space second draw
cards = cards - 1

# outcomes second draw
aces = aces - 1

# id203 of ace on second draw after ace on first
second_ace_id203 = aces / cards

# id203 of two consecutive aces (dependent)
both_aces_id203 = first_ace_id203 * second_ace_id203 * 100
print(both_aces_id203)

0.4524886877828055

   the id203 of drawing two dependent aces in a row is 0.452%. let's
   take a look at a couple situations where this comes into play at the
   poker table.

intersection of dependent events: flop flush draw

   your hand

   [image6.png]

   community cards

   [image2.png]

   this is a similar situation as the flush draw above, except this time
   you're on the flop and have two more community cards to come instead of
   just one. how can you determine the id203 of getting a flush by
   the river? first you need to determine all the different possible
   scenarios;
     * a) turn diamond, river non diamond (made flush)
     * b) turn non diamond, river diamond (made flush)
     * c) turn diamond, river diamond (made flush)
     * d) turn non diamond, river non diamond (no flush)

   those are the only four possibilities, and each of those scenarios are
   mutually exclusive. this means that if you add the probabilities of
   each of those scenarios occurring, the total will be 1. in other words,
   one of those four scenarios is definitely going to occur. you want to
   know the id203 of scenario a, b, or c occurring. the simplest
   approach to figure this out is to determine the id203 of scenario
   d, and subtract that from 1.
# sample space on turn
cards = 52
hole_cards = 2
flop_community_cards = 3
cards = cards - (hole_cards + flop_community_cards)

# outcomes
diamonds = 13
diamonds_drawn = 4
non_diamonds_drawn = 1
outs = diamonds - diamonds_drawn
turn_non_diamonds = cards - outs - non_diamonds_drawn

# id203 of not getting a diamond on the turn
no_diamond_turn_id203 = turn_non_diamonds / cards

# sample space on river
turn_community_card = 1
cards = cards - turn_community_card

# outcomes on river
river_non_diamonds = turn_non_diamonds - turn_community_card

# id203 of not getting a diamond on the river
no_diamond_river_id203 = river_non_diamonds / cards

# id203 of not getting a flush
no_flush_id203 = no_diamond_turn_id203 * no_diamond_river_probabilit
y

# id203 of getting a flush
flush_id203 = 1 - no_flush_id203
flush_id203_percent = flush_id203 * 100

# print id203 percent rounded to one decimal place
print(round(flush_id203_percent, 1))

38.4

   now let's change the hand slightly:

   your hand

   [image5.png]

   community cards

   [image2.png]

   this is a similar situation as the last one, except for one big
   difference. you still have a flush draw, but this time you don   t have
   the ace. if a diamond falls on the turn and the river, there is a good
   chance someone will have a better flush draw. determine the id203
   of a diamond falling on the turn or the river, but not both. you
   already have the id203 of not hitting a flush.

   now find the id203 of a diamond falling on the turn and river,
   add that to the id203 of not hitting a flush, and subtract from
   1.
# sample space on turn
cards = 52
hole_cards = 2
flop_community_cards = 3
cards = cards - (hole_cards + flop_community_cards)

# outcomes on turn
diamonds = 13
diamonds_drawn = 4
outs = diamonds - diamonds_drawn

# id203 of diamond on turn
diamond_turn_id203 = outs / cards

# sample space on river
turn_diamonds = 1
cards = cards - turn_diamonds

# outcomes on river
river_diamonds = outs - turn_diamonds

# id203 of diamond on river
diamond_river_id203 = river_diamonds / cards

# id203 of getting a diamond on the turn and river
two_diamonds_id203 = diamond_turn_id203 * diamond_river_id203

# determine the id203 of getting only one diamond by the river
one_diamond_id203 = 1 - (no_flush_id203 + two_diamonds_id203)
one_diamond_id203_percent = one_diamond_id203 * 100

# print id203 percent rounded to one decimal place
print(round(one_diamond_id203_percent, 1))

35.1

expected value

   when playing a game such as poker, you're fairly concerned with
   questions such as "how much do i gain - or lose - on average, if i
   repeatedly play this game?". you can imagine that this is no different
   for poker, especially when you're a professional poker player!

   now, if the possible outcomes of the game and their associated
   probabilities can be described by a random variable, then you can
   answer the above question by computing its expected value, which is
   equal to a weighted average of the outcomes where each outcome is
   weighted by its id203.

   or, in other words, you simply multiply the total value times the
   id203 of winning to get your expected value:

   $$expected value = total value \times id203$$

   what is the expected value if there is \$100 (total value) in the pot,
   and your id203 of winning the pot is 0.75?

   $$expected value = \$100 \times 0.75$$
# initialize `pot` and `id203` variables
pot = 100
id203 = 0.75

# determine expected value
expected_value = pot * id203
print(expected_value)

75.0

   you're expected value is \$75. expected value is an important concept
   in poker. let   s go back to the first flush example to see how to use
   expected values to your advantage.

your hand

   [image6.png]

opponents hand

   [image1.png]

community cards

   [image3.png]
     * total pot = \$60
     * opponents bet = \$20

   your opponent has decided to be helpful and show you his cards, and has
   a set of 2s. to win the hand on the river, you must hit any diamond
   except a jack or 2. the jack or 2 of diamonds would give your opponent
   a better hand, a full house and four of a kind respectively. you have
   to call \$20 to stay in the hand, and if you win the hand you win \$60.
   if your expected value is greater than \$20 you should call the bet,
   and if not you should fold.

   figure out if you should call the bet:
# sample space
cards = 52
hole_cards = 2
# your opponent provided you information... use it!
opponents_hole_cards = 2

turn_community_cards = 4
cards = cards - (hole_cards + opponents_hole_cards + turn_community_cards)

# outcomes
diamonds = 13
diamonds_drawn = 4

# you can't count the two diamonds that won't help you win
diamond_non_outs = 2

outs = diamonds - diamonds_drawn - diamond_non_outs

# determine win id203
win_id203 = outs / cards

# determine expected value
pot = 60
ev = pot * win_id203

# print ev and appropriate decision
call_amount = 20
if ev >= 20:
    print(round(ev, 2), 'call')
else:
    print(round(ev, 2), 'fold')

9.55 fold

   your expected value is only \$9.55, which is less than the \$20 you
   would need to risk to get that reward, so you must fold. determining
   expected value is critical to understand at the poker table and part 2
   will dig much deeper into the concept.

conclusion

   congrats, you have made it to the end of this tutorial on id203
   theory with python! this concludes part 1 of the tutorial. you learned
   about several core id203 concepts including independent/dependent
   events, permutations/combinations, multiple events, expected values,
   and how to calculate each of them.

   in part 2, you will apply these concepts to actual poker hands that i
   played during my career.

   *one card is dealt face down, known as the burn card, before the flop,
   turn, and river. since the card is dealt face down, and no player knows
   what it is, it does not count as a trial.
   59
   59
   [11]0
   (button)
   post a comment

   [12]subscribe to rss
   [13]about[14]terms[15]privacy

   want to leave a comment?

references

   visible links
   1. https://www.datacamp.com/users/sign_in
   2. https://www.datacamp.com/community/tutorials/statistics-python-tutorial-id203-1#comments
   3. https://www.datacamp.com/community/tutorials/statistics-python-tutorial-id203-1#intro
   4. https://www.datacamp.com/community/tutorials/statistics-python-tutorial-id203-1#combinations
   5. https://www.datacamp.com/community/tutorials/statistics-python-tutorial-id203-1#independent
   6. https://www.datacamp.com/community/tutorials/statistics-python-tutorial-id203-1#events
   7. https://www.datacamp.com/community/tutorials/statistics-python-tutorial-id203-1#ev
   8. https://www.datacamp.com/courses/statistical-thinking-in-python-part-1
   9. https://medium.springboard.com/how-i-used-professional-poker-to-become-a-data-scientist-e49b75dfe8e3
  10. https://holdemmanager.com/?a_aid=sharpdata
  11. https://www.datacamp.com/community/tutorials/statistics-python-tutorial-id203-1#comments
  12. https://www.datacamp.com/community/rss.xml
  13. https://www.datacamp.com/about
  14. https://www.datacamp.com/terms-of-use
  15. https://www.datacamp.com/privacy-policy

   hidden links:
  17. https://www.datacamp.com/
  18. https://www.datacamp.com/community
  19. https://www.datacamp.com/community/tutorials
  20. https://www.datacamp.com/community/data-science-cheatsheets
  21. https://www.datacamp.com/community/open-courses
  22. https://www.datacamp.com/community/podcast
  23. https://www.datacamp.com/community/chat
  24. https://www.datacamp.com/community/blog
  25. https://www.datacamp.com/community/tech
  26. https://www.facebook.com/sharer.php?u=https://www.datacamp.com/community/tutorials/statistics-python-tutorial-id203-1
  27. https://twitter.com/intent/tweet?url=https://www.datacamp.com/community/tutorials/statistics-python-tutorial-id203-1
  28. https://www.linkedin.com/cws/share?url=https://www.datacamp.com/community/tutorials/statistics-python-tutorial-id203-1
  29. https://www.datacamp.com/profile/danielc4f06ad606fd4d6eb9cb444ef4d09494
  30. https://www.facebook.com/sharer.php?u=https://www.datacamp.com/community/tutorials/statistics-python-tutorial-id203-1
  31. https://twitter.com/intent/tweet?url=https://www.datacamp.com/community/tutorials/statistics-python-tutorial-id203-1
  32. https://www.linkedin.com/cws/share?url=https://www.datacamp.com/community/tutorials/statistics-python-tutorial-id203-1
  33. https://www.facebook.com/pages/datacamp/726282547396228
  34. https://twitter.com/datacamp
  35. https://www.linkedin.com/company/datamind-org
  36. https://www.youtube.com/channel/uc79gv3myp6zkiswyemeik9a
