   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]become a member[7]sign in[8]get started
     __________________________________________________________________

   [1*89wlhi_i0h4yswbcnzsmgq.jpeg]

13 deep learning frameworks for natural language processing in python

   [9]go to the profile of data monsters
   [10]data monsters (button) blockedunblock (button) followfollowing
   feb 5, 2018

   by olga davydova

   in this paper, we discuss the most popular neural network frameworks
   and libraries that can be utilized for natural language processing
   (nlp) in the python programming language. we also look at existing
   examples of these tools.

   a [11]comparative table was specially created. every cell with a plus
   sign contains a link to a framework usage example in nlp task and
   network type perspectives.
   [1*zolysc3qy2t3654aw6xr8q.png]
   a table fragment
   [0*biwc9_4tb1qvjmon.]

chainer

   [12]chainer, developed by the japanese company [13]preferred networks
   founded in 2014, is a powerful, flexible, and intuitive python-based
   framework for neural networks that adopts a [14]   define-by-run    scheme
   [15][1]. it stores the history of computation instead of programming
   logic. chainer supports [16]cuda computation and [17]multi-gpu. the
   framework released under the [18]mit license and is already applied for
   id31, machine translation, id103, question
   answering, and so on using different types of neural networks like
   convolutional networks, recurrent networks, and sequence to sequence
   models [19][2].
   [0*vige6-nczpwp9ooo.]

deeplearning4j

   [20]deeplearning4j is a deep learning java programming library, but it
   also has a python api, keras that will be described below. distributed
   cpus and gpus, parallel training via iterative reduce, and
   micro-service architecture adaptation are its main features [21][3].
   [22]vector space modeling enables the tool to solve text-mining
   problems. parts of speech (pos) tagging, id33, and
   id97 for creating id27 are discussed in the
   [23]documentation.

deepnl

   [24]deepnl is another neural network python library especially created
   for natural language processing by [25]giuseppe attardi. it provides
   tools for part-of-speech tagging, id39, semantic
   role labeling (using convolutional neural networks [26][4]), and word
   embedding creation [27][5].
   [0*8tji2ds3-uzh4sua.]

dynet

   [28]dynet is a tool developed by [29]carnegie mellon university and
   many others. it supports c++ and python languages, runs on either cpu
   or gpu [30][6]. dynet is based on the dynamic declaration of network
   structure [31][7]. this tool was used for creating outstanding systems
   for nlp problems including syntactic parsing, machine translation,
   morphological inflection, and many others.
   [0*bnrebs-ssp1kazko.]

keras

   [32]keras is a high-level neural-network based python api that runs on
   cpu or gpu. it supports convolutional and recurrent networks and may
   run on top of [33]tensorflow, [34]cntk, or [35]theano. the main focus
   is to enable users fast experimentation [36][8]. there are many
   examples of keras usage in the [37]comparative table: classification,
   text generation and summarization, tagging, parsing, machine
   translation, id103, and others.

nlpnet

   erick rocha fonseca   s [38]nlpnet is also a python library for nlp tasks
   based on neural networks. convolutional networks enable users to
   perform part-of-speech tagging, id14, and dependency
   parsing [39][9]. most of the architecture is language independent
   [40][10].
   [0*ygkdkpkpkvg3hvok.]

openid4

   [41]openid4 is a python machine translation tool that works under the
   mit license and relies on the [42]pytorch library. the system
   demonstrates efficiency and state-of-the-art translation accuracy and
   is used by many translation providers [43][11]. it also incorporates
   text summarization, id103, and image-to-text conversion
   blocks [44][12].
   [0*unxcz1vmsnwxl3nf.]

pytorch

   [45]pytorch is a fast and flexible neural network framework with an
   imperative paradigm. it builds neural networks on a tape-based autograd
   system and provides tensor computation with strong gpu acceleration
   [46][13]. recurrent neural networks are mostly used in pytorch for
   machine translation, classification, text generation, tagging, and
   other nlp tasks.
   [0*4vr_lmpsrf_ir-re.]

spacy

   developers called [47]spacy the fastest system in the world. they also
   affirm that their tool is the best way to prepare text for deep
   learning. spacy works excellent with well-known python libraries like
   gensim, keras, tensorflow, and scikit-learn. [48]matthew honnibal, the
   author of the library, says that spacy   s mission is to make
   cutting-edge nlp practical and commonly available [49][14]. text
   classification, id39, id52,
   id33, and other examples are presented in the comparative
   table.
   [0*tyvkldossie8oaoy.]

stanford   s corenlp

   [50]stanford   s corenlp is a flexible, fast, and modern grammatical
   analysis tool that provides apis for most common programming languages
   including python. it also has an ability to run as a simple web
   service. as mentioned on the [51]official website, the framework has a
   part-of-speech (pos) tagger, named entity recognizer (ner), parser,
   coreference resolution system, id31, bootstrapped pattern
   learning, and id10 tools [52][15].
   [0*zwprmp38yu_kb_bl.]

tensorflow

   the [53]google brain team developed [54]tensorflow and released it in
   2015 for research purposes. now many companies like airbus, intel, ibm,
   twitter and others use tensorflow at production scale. the system
   architecture is flexible, so it is possible to perform computations on
   cpus or gpus. the main concept is flow graphs usage. nodes of the graph
   reflect mathematical operations, while the edges represent
   multidimensional data arrays (tensors) communicated between them
   [55][16]. one of the most known of tensorflow   s nlp application is
   [56]google translate. other applications are text classification and
   summarization, id103, tagging, and so on.

tflearn

   as tensorflow is a low-level api, many high-level apis were created to
   run on top of it to make the user experience faster and more
   understandable. [57]tflearn is one of these tools that runs on cpu and
   gpu. it has a special graph visualization tool with details about
   weights, gradients, activations, and so on [58][17]. the library is
   already used for id31, text generation, and named entity
   recognition. it lets users work with convolutional neural networks and
   recurrent neural networks (lstm).
   [0*m4pf_bt5o2ki9ifp.]

theano

   [59]theano is a numerical computation python library that enables users
   to create their own machine learning models [60][18]. many frameworks
   like keras are built on top of theano. there are tools for machine
   translation, id103, id27, and text
   classification. look at theano   s applications in the [61]table.

summary

   in this paper, we described neural network supporting python tools for
   natural language processing. these tools are chainer, deeplearning4j,
   deepnl, dynet, keras, nlpnet, openid4, pytorch, spacy, stanford   s
   corenlp, tensorflow, tflearn, and theano. a table lets readers easily
   compare the frameworks discussed above.

resources

   1. [62]https://chainer.org/

   2. [63]http://learningsys.org/papers/learningsys_2015_paper_33.pdf

   3. [64]https://deeplearning4j.org/

   4. [65]http://www.aclweb.org/anthology/w15-1515

   5. [66]https://github.com/attardi/deepnl

   6. [67]https://github.com/clab/dynet

   7. [68]https://arxiv.org/pdf/1701.03980.pdf

   8. [69]https://keras.io/

   9. [70]https://github.com/erickrf/nlpnet

   10. [71]http://nilc.icmc.usp.br/nlpnet/

   11. [72]http://openid4.net/

   12. [73]http://openid4.net/openid4/applications/

   13. [74]http://pytorch.org/about/

   14. [75]https://spacy.io/

   15. [76]https://stanfordnlp.github.io/corenlp/

   16. [77]https://www.tensorflow.org/

   17. [78]http://tflearn.org/

   18. [79]https://github.com/theano/theano

   19. [80]https://github.com/odashi/chainer_id4

additional resources

   [81]https://arxiv.org/pdf/1703.04783.pdf

   [82]https://github.com/chainer/chainer/tree/master/examples/id97

   [83]https://github.com/chainer/chainer/tree/master/examples/sentiment

   [84]https://github.com/marevol/id98-text-classification

   [85]https://github.com/butsugiri/chainer-id56-ner

   [86]https://github.com/khanhptnk/id195-chainer

   [87]https://github.com/kenkov/id195

   [88]https://github.com/chainer/chainer/tree/master/examples/ptb

   [89]https://github.com/masashi-y/chainer-parser

   [90]https://cs.stanford.edu/~danqi/papers/emnlp2014.pdf

   [91]http://learningsys.org/papers/learningsys_2015_paper_33.pdf

   [92]https://arxiv.org/pdf/1611.01604.pdf

   [93]https://deeplearning4j.org/nlp

   [94]https://github.com/deeplearning4j/dl4j-examples/blob/master/dl4j-ex
   amples/src/main/java/org/deeplearning4j/examples/nlp/paragraphvectors/p
   aragraphvectorsclassifierexample.java

   [95]https://deeplearning4j.org/id97

   [96]https://github.com/deeplearning4j/dl4j-examples/blob/master/dl4j-ex
   amples/src/main/java/org/deeplearning4j/examples/recurrent/character/gr
   aveslstmcharmodellingexample.java

   [97]http://www.aclweb.org/anthology/w15-1515

   [98]https://github.com/attardi/deepnl

   [99]https://github.com/attardi/deepnl/blob/master/deepnl/pos_tagger.py

   [100]https://github.com/attardi/deepnl/blob/master/deepnl/networkconv.p
   yx

   [101]https://github.com/attardi/deepnl/blob/master/deepnl/ner_tagger.py

   [102]https://github.com/attardi/deepnl/blob/master/deepnl/classifier.py
   x

   [103]https://github.com/attardi/deepnl/blob/master/deepnl/sentiwords.py
   x

   [104]http://www.aclweb.org/anthology/w15-1515

   [105]https://github.com/attardi/deepnl/blob/master/deepnl/embeddings.py

   [106]https://github.com/attardi/deepnl/blob/master/deepnl/tagger.pyx

   [107]https://github.com/attardi/deepnl/blob/master/deepnl/networkseq.py
   x

   [108]https://github.com/attardi/deepnl/blob/master/deepnl/extractors.py
   x

   [109]https://github.com/clab/dynet

   [110]https://arxiv.org/pdf/1701.03980.pdf

   [111]https://github.com/neubig/lamtram

   [112]https://github.com/bplank/bilstm-aux

   [113]http://phontron.com/slides/emnlp2016-dynet-tutorial-part1.pdf

   [114]https://github.com/toru34/kim_emnlp_2014

   [115]https://github.com/roeeaharoni/dyid4-py

   [116]http://phontron.com/slides/emnlp2016-dynet-tutorial-part2.pdf

   [117]http://dynet.readthedocs.io/en/latest/tutorials_notebooks/id56s.htm
   l

   [118]https://github.com/clab/lstm-parser

   [119]https://github.com/clab/joint-lstm-parser

   [120]https://github.com/neubig/modlm

   [121]https://github.com/odashi/id4kit

   [122]https://github.com/lvapeab/id4-keras

   [123]https://chsasank.github.io/spoken-language-understanding.html

   [124]https://github.com/igormq/asr-study

   [125]https://github.com/llsourcell/how_to_make_a_text_summarizer

   [126]https://github.com/fchollet/keras/blob/master/examples/imdb_lstm.p
   y

   [127]https://github.com/fchollet/keras/blob/master/examples/lstm_text_g
   eneration.py

   [128]https://github.com/farizrahman4u/id195

   [129]https://github.com/fchollet/keras/blob/master/examples/imdb_id98.py

   [130]https://github.com/udibr/headlines

   [131]https://github.com/wolet/s2s-dependency-parsers

   [132]https://github.com/0xnurl/keras_character_based_ner

   [133]https://github.com/fchollet/keras/blob/master/examples/imdb_bidire
   ctional_lstm.py

   [134]https://github.com/fchollet/keras/blob/master/examples/reuters_mlp
   .py

   [135]https://github.com/codekansas/keras-language-modeling

   [136]https://link.springer.com/content/pdf/10.1186%2fs13173-014-0020-x.
   pdf

   [137]http://nilc.icmc.sc.usp.br/nlpnet/models.html#word-embeddings-port
   uguese

   [138]http://nilc.icmc.sc.usp.br/nlpnet/models.html#pos-portuguese

   [139]http://nilc.icmc.sc.usp.br/nlpnet/models.html#srl-portuguese

   [140]http://nilc.icmc.sc.usp.br/nlpnet/models.html#dependency-and-pos-e
   nglish

   [141]https://github.com/erickrf/nlpnet/blob/master/nlpnet/taggers.py

   [142]https://github.com/erickrf/nlpnet/blob/master/nlpnet/networkconv.p
   yx

   [143]https://github.com/erickrf/nlpnet/blob/master/nlpnet/networkdepend
   encyconv.pyx

   [144]http://www.aclweb.org/anthology/w15-1508

   [145]https://github.com/erickrf/nlpnet

   [146]http://nilc.icmc.usp.br/nlpnet/

   [147]http://openid4.net/openid4/applications/#machine-translation

   [148]http://openid4.net/openid4/applications/#summarization

   [149]http://openid4.net/openid4/applications/#speech-recognition

   [150]http://openid4.net/openid4/applications/#sequence-tagging

   [151]http://openid4.net/openid4/applications/#language-modelling

   [152]http://openid4.net/openid4/training/embeddings/

   [153]https://arxiv.org/pdf/1701.02810.pdf

   [154]http://openid4.net/openid4/applications/

   [155]http://pytorch.org/about/

   [156]http://pytorch.org/tutorials/intermediate/id195_translation_tuto
   rial.html

   [157]http://pytorch.org/tutorials/beginner/nlp/sequence_models_tutorial
   .html#

   [158]http://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial
   .html

   [159]http://pytorch.org/tutorials/intermediate/char_id56_classification_
   tutorial.html

   [160]https://github.com/spro/practical-pytorch/blob/master/char-id56-gen
   eration/char-id56-generation.ipynb

   [161]https://github.com/spro/practical-pytorch/blob/master/conditional-
   char-id56/conditional-char-id56.ipynb

   [162]https://spacy.io/

   [163]https://spacy.io/docs/usage/pos-tagging

   [164]https://spacy.io/docs/usage/word-vectors-similarities

   [165]https://spacy.io/docs/usage/entity-recognition

   [166]https://spacy.io/docs/usage/dependency-parse

   [167]https://spacy.io/docs/usage/deep-learning

   [168]https://explosion.ai/blog/spacy-deep-learning-keras

   [169]https://stanfordnlp.github.io/corenlp/

   [170]http://apps.cs.utexas.edu/tech_reports/reports/tr/tr-2222.pdf

   [171]https://nlp.stanford.edu/projects/mt.shtml

   [172]https://github.com/lynten/stanford-corenlp

   [173]https://github.com/stanfordnlp/treelstm

   [174]https://arxiv.org/pdf/1609.08409.pdf

   [175]https://nlp.stanford.edu/sentiment/

   [176]https://www.tensorflow.org/

   [177]https://github.com/tensorflow/id4

   [178]https://arxiv.org/pdf/1609.08144.pdf

   [179]https://github.com/mrahtz/tensorflow-pos-tagger

   [180]https://github.com/pannous/tensorflow-speech-recognition

   [181]https://www.tensorflow.org/tutorials/id97

   [182]https://github.com/monikkinom/ner-lstm

   [183]https://github.com/dennybritz/id98-text-classification-tf

   [184]https://research.googleblog.com/2016/08/text-summarization-with-te
   nsorflow.html

   [185]https://github.com/tensorflow/models/tree/master/research/textsum

   [186]https://www.tensorflow.org/tutorials/recurrent

   [187]http://www.wildml.com/2015/12/implementing-a-id98-for-text-classifi
   cation-in-tensorflow/

   [188]http://jrmeyer.github.io/tutorial/2016/02/01/tensorflow-tutorial.h
   tml

   [189]http://tflearn.org/

   [190]https://github.com/dhwajraj/ner-id56

   [191]https://github.com/tflearn/tflearn/blob/master/examples/nlp/id98_se
   ntence_classification.py

   [192]https://github.com/tflearn/tflearn/blob/master/examples/nlp/bidire
   ctional_lstm.py

   [193]https://github.com/tflearn/tflearn/blob/master/examples/nlp/lstm.p
   y

   [194]https://github.com/tflearn/tflearn/blob/master/examples/nlp/seq2se
   q_example.py

   [195]https://github.com/tflearn/tflearn/blob/master/examples/nlp/lstm_g
   enerator_shakespeare.py

   [196]https://github.com/tflearn/tflearn/blob/master/examples/nlp/lstm_g
   enerator_cityname.py

   [197]https://github.com/edinburghnlp/nematus

   [198]https://github.com/zhangaustin/deep-speech

   [199]https://github.com/llsourcell/how_to_make_a_text_summarizer

   [200]http://deeplearning.net/tutorial/id56slu.html

   [201]https://raberrytv.wordpress.com/2016/12/26/efficient-embeddings-wi
   th-theano/

   [202]https://github.com/yoonkim/id98_sentence

   [203]https://deeplearning4j.org/convolutionalnets.html

   [204]https://deeplearning4j.org/usingid56s

   [205]https://github.com/neulab/xid4

   [206]https://github.com/memeda/sequence-labeling-by-nn

   [207]https://cs.umd.edu/~miyyer/pubs/2017_acl_dynsp.pdf

   [208]http://ben.bolte.cc/blog/2016/language.html

   [209]http://pyvideo.org/pydata-carolinas-2016/deep-language-modeling-fo
   r-question-answering-using-keras.html

   [210]https://github.com/chartbeat-labs/textacy

   [211]http://iamaaditya.github.io/2016/04/visual_question_answering_demo
   _notebook

   [212]https://github.com/hans/corenlp-summarizer

   [213]https://nlp.stanford.edu/software/relationextractor.html

   [214]https://github.com/spiglerg/id56_text_generation_tensorflow

   [215]https://github.com/paarthneekhara/neural-vqa-tensorflow

   [216]https://github.com/deepid56/visual_question_answering

   [217]https://github.com/llsourcell/how_to_do_sentiment_analysis

   [218]https://github.com/lasagne/recipes/blob/master/examples/lstm_text_
   generation.py

   [219]https://github.com/glample/tagger

   [220]https://github.com/sentimentron/dracula

   [221]http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.646.4491&
   rep=rep1&type=pdf

   [222]https://github.com/hiroki13/neural-semantic-role-labeler

   [223]https://github.com/carpedm20/hali

   [224]https://github.com/saltypaul/id195-chatbot

     * [225]machine learning
     * [226]nlp
     * [227]deep learning

   (button)
   (button)
   (button) 803 claps
   (button) (button) (button) 2 (button) (button)

     (button) blockedunblock (button) followfollowing
   [228]go to the profile of data monsters

[229]data monsters

   [230]https://datamonsters.com

     * (button)
       (button) 803
     * (button)
     *
     *

   [231]go to the profile of data monsters
   never miss a story from data monsters, when you sign up for medium.
   [232]learn more
   never miss a story from data monsters
   (button) blockedunblock (button) followget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://medium.com/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/2b84a6b6cd98
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/membership?source=upgrade_membership---nav_full
   7. https://medium.com/m/signin?redirect=https://medium.com/@datamonsters/13-deep-learning-frameworks-for-natural-language-processing-in-python-2b84a6b6cd98&source=--------------------------nav_reg&operation=login
   8. https://medium.com/m/signin?redirect=https://medium.com/@datamonsters/13-deep-learning-frameworks-for-natural-language-processing-in-python-2b84a6b6cd98&source=--------------------------nav_reg&operation=register
   9. https://medium.com/@datamonsters?source=post_header_lockup
  10. https://medium.com/@datamonsters
  11. https://docs.google.com/spreadsheets/d/1brgciaqul1lkimqsaygid86xmjzx9jt4prgr8n-mfpdg/edit?usp=sharing
  12. https://chainer.org/
  13. https://www.preferred-networks.jp/en/about
  14. https://docs.chainer.org/en/stable/tutorial/basic.html#define-by-run
  15. https://chainer.org/
  16. https://en.wikipedia.org/wiki/cuda
  17. http://www.nvidia.com/object/multi-gpu-technology.html
  18. https://github.com/chainer/chainer/blob/master/license
  19. http://learningsys.org/papers/learningsys_2015_paper_33.pdf
  20. https://deeplearning4j.org/
  21. https://deeplearning4j.org/
  22. https://en.wikipedia.org/wiki/vector_space_model
  23. https://deeplearning4j.org/nlp
  24. https://github.com/attardi/deepnl
  25. https://github.com/attardi
  26. http://www.aclweb.org/anthology/w15-1515
  27. https://github.com/attardi/deepnl
  28. https://github.com/clab/dynet
  29. http://www.cmu.edu/
  30. https://github.com/clab/dynet
  31. https://arxiv.org/pdf/1701.03980.pdf
  32. https://keras.io/
  33. https://www.tensorflow.org/
  34. https://www.microsoft.com/en-us/cognitive-toolkit/
  35. https://github.com/theano/theano
  36. https://keras.io/
  37. https://docs.google.com/spreadsheets/d/1wizmq1rtodfl75q8evu9cwrkcvpa42voqenobnldx9o/edit?usp=sharing
  38. https://github.com/erickrf/nlpnet
  39. https://github.com/erickrf/nlpnet
  40. http://nilc.icmc.usp.br/nlpnet/
  41. http://openid4.net/
  42. http://pytorch.org/
  43. http://openid4.net/
  44. http://openid4.net/openid4/applications/
  45. http://pytorch.org/
  46. http://pytorch.org/about/
  47. https://spacy.io/
  48. https://github.com/honnibal
  49. https://spacy.io/
  50. https://stanfordnlp.github.io/corenlp/
  51. https://stanfordnlp.github.io/corenlp/
  52. https://stanfordnlp.github.io/corenlp/
  53. https://en.wikipedia.org/wiki/google_brain
  54. https://www.tensorflow.org/
  55. https://www.tensorflow.org/
  56. https://en.wikipedia.org/wiki/google_translate
  57. http://tflearn.org/
  58. http://tflearn.org/
  59. https://github.com/theano/theano
  60. https://github.com/theano/theano
  61. https://docs.google.com/spreadsheets/d/1wizmq1rtodfl75q8evu9cwrkcvpa42voqenobnldx9o/edit?usp=sharing
  62. https://chainer.org/
  63. http://learningsys.org/papers/learningsys_2015_paper_33.pdf
  64. https://deeplearning4j.org/
  65. http://www.aclweb.org/anthology/w15-1515
  66. https://github.com/attardi/deepnl
  67. https://github.com/clab/dynet
  68. https://arxiv.org/pdf/1701.03980.pdf
  69. https://keras.io/
  70. https://github.com/erickrf/nlpnet
  71. http://nilc.icmc.usp.br/nlpnet/
  72. http://openid4.net/
  73. http://openid4.net/openid4/applications/
  74. http://pytorch.org/about/
  75. https://spacy.io/
  76. https://stanfordnlp.github.io/corenlp/
  77. https://www.tensorflow.org/
  78. http://tflearn.org/
  79. https://github.com/theano/theano
  80. https://github.com/odashi/chainer_id4
  81. https://arxiv.org/pdf/1703.04783.pdf
  82. https://github.com/chainer/chainer/tree/master/examples/id97
  83. https://github.com/chainer/chainer/tree/master/examples/sentiment
  84. https://github.com/marevol/id98-text-classification
  85. https://github.com/butsugiri/chainer-id56-ner
  86. https://github.com/khanhptnk/id195-chainer
  87. https://github.com/kenkov/id195
  88. https://github.com/chainer/chainer/tree/master/examples/ptb
  89. https://github.com/masashi-y/chainer-parser
  90. https://cs.stanford.edu/~danqi/papers/emnlp2014.pdf
  91. http://learningsys.org/papers/learningsys_2015_paper_33.pdf
  92. https://arxiv.org/pdf/1611.01604.pdf
  93. https://deeplearning4j.org/nlp
  94. https://github.com/deeplearning4j/dl4j-examples/blob/master/dl4j-examples/src/main/java/org/deeplearning4j/examples/nlp/paragraphvectors/paragraphvectorsclassifierexample.java
  95. https://deeplearning4j.org/id97
  96. https://github.com/deeplearning4j/dl4j-examples/blob/master/dl4j-examples/src/main/java/org/deeplearning4j/examples/recurrent/character/graveslstmcharmodellingexample.java
  97. http://www.aclweb.org/anthology/w15-1515
  98. https://github.com/attardi/deepnl
  99. https://github.com/attardi/deepnl/blob/master/deepnl/pos_tagger.py
 100. https://github.com/attardi/deepnl/blob/master/deepnl/networkconv.pyx
 101. https://github.com/attardi/deepnl/blob/master/deepnl/ner_tagger.py
 102. https://github.com/attardi/deepnl/blob/master/deepnl/classifier.pyx
 103. https://github.com/attardi/deepnl/blob/master/deepnl/sentiwords.pyx
 104. http://www.aclweb.org/anthology/w15-1515
 105. https://github.com/attardi/deepnl/blob/master/deepnl/embeddings.py
 106. https://github.com/attardi/deepnl/blob/master/deepnl/tagger.pyx
 107. https://github.com/attardi/deepnl/blob/master/deepnl/networkseq.pyx
 108. https://github.com/attardi/deepnl/blob/master/deepnl/extractors.pyx
 109. https://github.com/clab/dynet
 110. https://arxiv.org/pdf/1701.03980.pdf
 111. https://github.com/neubig/lamtram
 112. https://github.com/bplank/bilstm-aux
 113. http://phontron.com/slides/emnlp2016-dynet-tutorial-part1.pdf
 114. https://github.com/toru34/kim_emnlp_2014
 115. https://github.com/roeeaharoni/dyid4-py
 116. http://phontron.com/slides/emnlp2016-dynet-tutorial-part2.pdf
 117. http://dynet.readthedocs.io/en/latest/tutorials_notebooks/id56s.html
 118. https://github.com/clab/lstm-parser
 119. https://github.com/clab/joint-lstm-parser
 120. https://github.com/neubig/modlm
 121. https://github.com/odashi/id4kit
 122. https://github.com/lvapeab/id4-keras
 123. https://chsasank.github.io/spoken-language-understanding.html
 124. https://github.com/igormq/asr-study
 125. https://github.com/llsourcell/how_to_make_a_text_summarizer
 126. https://github.com/fchollet/keras/blob/master/examples/imdb_lstm.py
 127. https://github.com/fchollet/keras/blob/master/examples/lstm_text_generation.py
 128. https://github.com/farizrahman4u/id195
 129. https://github.com/fchollet/keras/blob/master/examples/imdb_id98.py
 130. https://github.com/udibr/headlines
 131. https://github.com/wolet/s2s-dependency-parsers
 132. https://github.com/0xnurl/keras_character_based_ner
 133. https://github.com/fchollet/keras/blob/master/examples/imdb_bidirectional_lstm.py
 134. https://github.com/fchollet/keras/blob/master/examples/reuters_mlp.py
 135. https://github.com/codekansas/keras-language-modeling
 136. https://link.springer.com/content/pdf/10.1186/s13173-014-0020-x.pdf
 137. http://nilc.icmc.sc.usp.br/nlpnet/models.html#word-embeddings-portuguese
 138. http://nilc.icmc.sc.usp.br/nlpnet/models.html#pos-portuguese
 139. http://nilc.icmc.sc.usp.br/nlpnet/models.html#srl-portuguese
 140. http://nilc.icmc.sc.usp.br/nlpnet/models.html#dependency-and-pos-english
 141. https://github.com/erickrf/nlpnet/blob/master/nlpnet/taggers.py
 142. https://github.com/erickrf/nlpnet/blob/master/nlpnet/networkconv.pyx
 143. https://github.com/erickrf/nlpnet/blob/master/nlpnet/networkdependencyconv.pyx
 144. http://www.aclweb.org/anthology/w15-1508
 145. https://github.com/erickrf/nlpnet
 146. http://nilc.icmc.usp.br/nlpnet/
 147. http://openid4.net/openid4/applications/#machine-translation
 148. http://openid4.net/openid4/applications/#summarization
 149. http://openid4.net/openid4/applications/#speech-recognition
 150. http://openid4.net/openid4/applications/#sequence-tagging
 151. http://openid4.net/openid4/applications/#language-modelling
 152. http://openid4.net/openid4/training/embeddings/
 153. https://arxiv.org/pdf/1701.02810.pdf
 154. http://openid4.net/openid4/applications/
 155. http://pytorch.org/about/
 156. http://pytorch.org/tutorials/intermediate/id195_translation_tutorial.html
 157. http://pytorch.org/tutorials/beginner/nlp/sequence_models_tutorial.html
 158. http://pytorch.org/tutorials/beginner/nlp/word_embeddings_tutorial.html
 159. http://pytorch.org/tutorials/intermediate/char_id56_classification_tutorial.html
 160. https://github.com/spro/practical-pytorch/blob/master/char-id56-generation/char-id56-generation.ipynb
 161. https://github.com/spro/practical-pytorch/blob/master/conditional-char-id56/conditional-char-id56.ipynb
 162. https://spacy.io/
 163. https://spacy.io/docs/usage/pos-tagging
 164. https://spacy.io/docs/usage/word-vectors-similarities
 165. https://spacy.io/docs/usage/entity-recognition
 166. https://spacy.io/docs/usage/dependency-parse
 167. https://spacy.io/docs/usage/deep-learning
 168. https://explosion.ai/blog/spacy-deep-learning-keras
 169. https://stanfordnlp.github.io/corenlp/
 170. http://apps.cs.utexas.edu/tech_reports/reports/tr/tr-2222.pdf
 171. https://nlp.stanford.edu/projects/mt.shtml
 172. https://github.com/lynten/stanford-corenlp
 173. https://github.com/stanfordnlp/treelstm
 174. https://arxiv.org/pdf/1609.08409.pdf
 175. https://nlp.stanford.edu/sentiment/
 176. https://www.tensorflow.org/
 177. https://github.com/tensorflow/id4
 178. https://arxiv.org/pdf/1609.08144.pdf
 179. https://github.com/mrahtz/tensorflow-pos-tagger
 180. https://github.com/pannous/tensorflow-speech-recognition
 181. https://www.tensorflow.org/tutorials/id97
 182. https://github.com/monikkinom/ner-lstm
 183. https://github.com/dennybritz/id98-text-classification-tf
 184. https://research.googleblog.com/2016/08/text-summarization-with-tensorflow.html
 185. https://github.com/tensorflow/models/tree/master/research/textsum
 186. https://www.tensorflow.org/tutorials/recurrent
 187. http://www.wildml.com/2015/12/implementing-a-id98-for-text-classification-in-tensorflow/
 188. http://jrmeyer.github.io/tutorial/2016/02/01/tensorflow-tutorial.html
 189. http://tflearn.org/
 190. https://github.com/dhwajraj/ner-id56
 191. https://github.com/tflearn/tflearn/blob/master/examples/nlp/id98_sentence_classification.py
 192. https://github.com/tflearn/tflearn/blob/master/examples/nlp/bidirectional_lstm.py
 193. https://github.com/tflearn/tflearn/blob/master/examples/nlp/lstm.py
 194. https://github.com/tflearn/tflearn/blob/master/examples/nlp/id195_example.py
 195. https://github.com/tflearn/tflearn/blob/master/examples/nlp/lstm_generator_shakespeare.py
 196. https://github.com/tflearn/tflearn/blob/master/examples/nlp/lstm_generator_cityname.py
 197. https://github.com/edinburghnlp/nematus
 198. https://github.com/zhangaustin/deep-speech
 199. https://github.com/llsourcell/how_to_make_a_text_summarizer
 200. http://deeplearning.net/tutorial/id56slu.html
 201. https://raberrytv.wordpress.com/2016/12/26/efficient-embeddings-with-theano/
 202. https://github.com/yoonkim/id98_sentence
 203. https://deeplearning4j.org/convolutionalnets.html
 204. https://deeplearning4j.org/usingid56s
 205. https://github.com/neulab/xid4
 206. https://github.com/memeda/sequence-labeling-by-nn
 207. https://cs.umd.edu/~miyyer/pubs/2017_acl_dynsp.pdf
 208. http://ben.bolte.cc/blog/2016/language.html
 209. http://pyvideo.org/pydata-carolinas-2016/deep-language-modeling-for-question-answering-using-keras.html
 210. https://github.com/chartbeat-labs/textacy
 211. http://iamaaditya.github.io/2016/04/visual_question_answering_demo_notebook
 212. https://github.com/hans/corenlp-summarizer
 213. https://nlp.stanford.edu/software/relationextractor.html
 214. https://github.com/spiglerg/id56_text_generation_tensorflow
 215. https://github.com/paarthneekhara/neural-vqa-tensorflow
 216. https://github.com/deepid56/visual_question_answering
 217. https://github.com/llsourcell/how_to_do_sentiment_analysis
 218. https://github.com/lasagne/recipes/blob/master/examples/lstm_text_generation.py
 219. https://github.com/glample/tagger
 220. https://github.com/sentimentron/dracula
 221. http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.646.4491&rep=rep1&type=pdf
 222. https://github.com/hiroki13/neural-semantic-role-labeler
 223. https://github.com/carpedm20/hali
 224. https://github.com/saltypaul/id195-chatbot
 225. https://medium.com/tag/machine-learning?source=post
 226. https://medium.com/tag/nlp?source=post
 227. https://medium.com/tag/deep-learning?source=post
 228. https://medium.com/@datamonsters?source=footer_card
 229. https://medium.com/@datamonsters
 230. https://datamonsters.com/
 231. https://medium.com/@datamonsters
 232. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
 234. https://medium.com/p/2b84a6b6cd98/share/twitter
 235. https://medium.com/p/2b84a6b6cd98/share/facebook
 236. https://medium.com/p/2b84a6b6cd98/share/twitter
 237. https://medium.com/p/2b84a6b6cd98/share/facebook
