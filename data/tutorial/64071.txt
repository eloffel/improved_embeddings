   #[1]blobs in games - atom

                        introduction to the a* algorithm

     from [2]red blob games

     * [3]home
     * [4]blog
     * [5]links
     * [6]twitter
     * [7]about
     *
     * ________


    created 26 may 2014, updated aug 2014, feb 2016, jun 2016

   in games we often want to find paths from one location to another.
   we   re not only trying to find the shortest distance; we also want to
   take into account travel time. move the blob (start point) and cross
   (end point) to see the shortest path.

   to find this path we can use a graph search algorithm, which works when
   the map is represented as a graph. a* is a popular choice for graph
   search. breadth first search is the simplest of the graph search
   algorithms, so let   s start there, and we   ll work our way up to a*.

representing the map[8]#

   the first thing to do when studying an algorithm is to understand the
   data. what is the input? what is the output?

   input: graph search algorithms, including a*, take a    graph    as input.
   a graph is a set of locations (   nodes   ) and the connections (   edges   )
   between them. here   s the graph i gave to a*:
   different map with the same pathfinding graph

   sprites by starraven - see footer for link

   a* doesn   t see anything else. it only sees the graph. it doesn   t know
   whether something is indoors or outdoors, or if it   s a room or a
   doorway, or how big an area is. it only sees the graph! it doesn   t know
   the difference between this map and (button) this other one.

   output: the path found by a* is (button) made of graph nodes and edges.
   the edges are abstract mathematical concepts. a* will tell you to move
   from one location to another but it won   t tell you how. remember that
   it doesn   t know anything about rooms or doors; all it sees is the
   graph. you   ll have to decide whether a graph edge returned by a* means
   moving from tile to tile or walking in a straight line or opening a
   door or swimming or running along a curved path.

   tradeoffs: for any given game map, there are many different ways of
   making a pathfinding graph to give to a*. the above map makes most
   doorways into nodes; what if we made (button) doorways into edges? what
   if we used (button) a pathfinding grid?

   the pathfinding graph doesn   t have to be the same as what your game map
   uses. a grid game map can use a non-grid pathfinding graph, or vice
   versa. a* runs fastest with the fewest graph nodes; grids are often
   easier to work with but result in lots of nodes. this page covers the
   a* algorithm but not graph design; see [9]my other page^[1] for more
   about graphs. for the explanations on the rest of the page, i   m going
   to use grids because it   s easier to visualize the concepts.

algorithms[10]#

   there are lots of algorithms that run on graphs. i   m going to cover
   these:

   breadth first search explores equally in all directions. this is an
   incredibly useful algorithm, not only for regular path finding, but
   also for procedural map generation, flow field pathfinding, distance
   maps, and other types of map analysis.
   dijkstra   s algorithm (also called uniform cost search) lets us
   prioritize which paths to explore. instead of exploring all possible
   paths equally, it favors lower cost paths. we can assign lower costs to
   encourage moving on roads, higher costs to avoid forests, higher costs
   to discourage going near enemies, and more. when movement costs vary,
   we use this instead of breadth first search.
   a* is a modification of dijkstra   s algorithm that is optimized for a
   single destination. dijkstra   s algorithm can find paths to all
   locations; a* finds paths to one location, or the closest of several
   locations. it prioritizes paths that seem to be leading closer to a
   goal.

   i   ll start with the simplest, breadth first search, and add one feature
   at a time to turn it into a*.

breadth first search[11]#

   the key idea for all of these algorithms is that we keep track of an
   expanding ring called the frontier. on a grid, this process is
   sometimes called    flood fill   , but the same technique works for
   non-grids. start the animation to see how the frontier expands:

   how do we implement this? repeat these steps until the frontier is
   empty:
    1. pick and remove a location from the frontier.
    2. expand it by looking at its neighbors. any neighbors we haven   t
       visited yet we add to the frontier, and also to the visited set.

   let   s see this up close. the tile are numbered in the order we visit
   them. step through to see the expansion process:

   it   s only ten lines of (python) code:
frontier = queue()
frontier.put(start )
visited = {}
visited[start] = true

while not frontier.empty():
   current = frontier.get()
   for next in graph.neighbors(current):
      if next not in visited:
         frontier.put(next)
         visited[next] = true

   this loop is the essence of the graph search algorithms on this page,
   including a*. but how do we find the shortest path? the loop doesn   t
   actually construct the paths; it only tells us how to visit everything
   on the map. that   s because breadth first search can be used for a lot
   more than just finding paths; in [12]this article i show how it   s used
   for tower defense, but it can also be used for distance maps,
   procedural map generation, and lots of other things. here though we
   want to use it for finding paths, so let   s modify the loop to keep
   track of where we came from for every location that   s visited, and
   rename the visited set to a came_from table (the keys of the table are
   the visited set):
frontier = queue()
frontier.put(start )
came_from = {}
came_from[start] = none

while not frontier.empty():
   current = frontier.get()
   for next in graph.neighbors(current):
      if next not in came_from:
         frontier.put(next)
         came_from[next] = current

   now came_from for each location points to the place where we came from.
   these are like    breadcrumbs   . they   re enough to reconstruct the entire
   path. mouse over any location on the map and see how following the
   arrows gives you a reverse path back to the start position.

   the code to reconstruct paths is simple: follow the arrows backwards
   from the goal to the start. a path is a sequence of edges, but often
   it   s easier to store the nodes:
current = goal
path = []
while current != start:
   path.append(current)
   current = came_from[current]
path.append(start) # optional
path.reverse() # optional

   that   s the simplest pathfinding algorithm. it works not only on grids
   as shown here but on any sort of graph structure. in a dungeon, graph
   locations could be rooms and graph edges the doorways between them. in
   a platformer, graph locations could be locations and graph edges the
   possible actions such as move left, move right, jump up, jump down. in
   general, think of the graph as states and actions that change state. i
   have more written about map representation [13]here^[2]. in the rest of
   the article i   ll continue using examples with grids, and explore why
   you might use variants of breadth first search.

early exit[14]#

   we   ve found paths from one location to all other locations. often we
   don   t need all the paths; we only need a path from one location to one
   other location. we can stop expanding the frontier as soon as we   ve
   found our goal. drag the around see how the frontier stops expanding as
   soon as it reaches the goal.

   without early exitwith early exit

   the code is straightforward:
frontier = queue()
frontier.put(start )
came_from = {}
came_from[start] = none

while not frontier.empty():
   current = frontier.get()

   if current == goal:
      break

   for next in graph.neighbors(current):
      if next not in came_from:
         frontier.put(next)
         came_from[next] = current

movement costs[15]#

   so far we   ve made step have the same    cost   . in some pathfinding
   scenarios there are different costs for different types of movement.
   for example in civilization, moving through plains or desert might cost
   1 move-point but moving through forest or hills might cost 5
   move-points. in the map at the top of the page, walking through water
   cost 10 times as much as walking through grass. another example is
   diagonal movement on a grid that costs more than axial movement. we   d
   like the pathfinder to take these costs into account. let   s compare the
   number of steps from the start with the distance from the start:

   number of stepsdistance

   for this we want dijkstra   s algorithm (or uniform cost search). how
   does it differ from breadth first search? we need to track movement
   costs, so let   s add a new variable, cost_so_far, to keep track of the
   total movement cost from the start location. we want to take the
   movement costs into account when deciding how to evaluate locations;
   let   s turn our queue into a priority queue. less obviously, we may end
   up visiting a location multiple times, with different costs, so we need
   to alter the logic a little bit. instead of adding a location to the
   frontier if the location has never been visited, we   ll add it if the
   new path to the location is better than the best previous path.
frontier = priorityqueue()
frontier.put(start, 0)
came_from = {}
cost_so_far = {}
came_from[start] = none
cost_so_far[start] = 0

while not frontier.empty():
   current = frontier.get()

   if current == goal:
      break

   for next in graph.neighbors(current):
      new_cost = cost_so_far[current] + graph.cost(current, next)
      if next not in cost_so_far or new_cost < cost_so_far[next]:
         cost_so_far[next] = new_cost
         priority = new_cost
         frontier.put(next, priority)
         came_from[next] = current

   using a priority queue instead of a regular queue changes the way the
   frontier expands. contour lines are one way to see this. start the
   animation to see how the frontier expands more slowly through the
   forests, finding the shortest path around the central forest instead of
   through it:

   breadth first searchdijkstra   s algorithm

   movement costs other than 1 allow us to explore more interesting
   graphs, not only grids. in the map at the top of the page, movement
   costs were based on the distance from room to room. movement costs can
   also be used to avoid or prefer areas based on proximity to enemies or
   allies.

   implementation notes: we want this priority queue to return the lowest
   value first. on the implementation page i show priorityqueue[16]in
   python using heapq to return the lowest value first and also [17]in c++
   using std::priority_queue configured to return the lowest value first.
   also, the version of dijkstra   s algorithm and a* i present on this page
   differs from what   s in algorithms textbooks. it   s much closer to what   s
   called uniform cost search. i describe the differences [18]on the
   implementation page.

heuristic search[19]#

   with breadth first search and dijkstra   s algorithm, the frontier
   expands in all directions. this is a reasonable choice if you   re trying
   to find a path to all locations or to many locations. however, a common
   case is to find a path to only one location. let   s make the frontier
   expand towards the goal more than it expands in other directions.
   first, we   ll define a heuristic function that tells us how close we are
   to the goal:
def heuristic(a, b):
   # manhattan distance on a square grid
   return abs(a.x - b.x) + abs(a.y - b.y)

   in dijkstra   s algorithm we used the actual distance from the start for
   the priority queue ordering. here instead, in greedy best first search,
   we   ll use the estimated distance to the goal for the priority queue
   ordering. the location closest to the goal will be explored first. the
   code uses the priority queue from dijkstra   s algorithm but without
   cost_so_far:
frontier = priorityqueue()
frontier.put(start, 0)
came_from = {}
came_from[start] = none

while not frontier.empty():
   current = frontier.get()

   if current == goal:
      break

   for next in graph.neighbors(current):
      if next not in came_from:
         priority = heuristic(goal, next)
         frontier.put(next, priority)
         came_from[next] = current

   let   s see how well it works:

   breadth first searchgreedy best-first search

   wow!! amazing, right? but what happens in a more complex map?

   breadth first searchgreedy best-first search

   those paths aren   t the shortest. so this algorithm runs faster when
   there aren   t a lot of obstacles, but the paths aren   t as good. can we
   fix this? yes.

the a* algorithm[20]#

   dijkstra   s algorithm works well to find the shortest path, but it
   wastes time exploring in directions that aren   t promising. greedy best
   first search explores in promising directions but it may not find the
   shortest path. the a* algorithm uses both the actual distance from the
   start and the estimated distance to the goal.

   the code is very similar to dijkstra   s algorithm:
frontier = priorityqueue()
frontier.put(start, 0)
came_from = {}
cost_so_far = {}
came_from[start] = none
cost_so_far[start] = 0

while not frontier.empty():
   current = frontier.get()

   if current == goal:
      break

   for next in graph.neighbors(current):
      new_cost = cost_so_far[current] + graph.cost(current, next)
      if next not in cost_so_far or new_cost < cost_so_far[next]:
         cost_so_far[next] = new_cost
         priority = new_cost + heuristic(goal, next)
         frontier.put(next, priority)
         came_from[next] = current

   compare the algorithms: dijkstra   s algorithm calculates the distance
   from the start point. greedy best-first search estimates the distance
   to the goal point. a* is using the sum of those two distances.

   dijkstra   sgreedy best-firstid67

   try opening a hole in the wall in various places. you   ll find that when
   greedy best-first search finds the right answer, a* finds it too,
   exploring the same area. when greedy best-first search finds the wrong
   answer (longer path), a* finds the right answer, like dijkstra   s
   algorithm does, but still explores less than dijkstra   s algorithm does.

   a* is the best of both worlds. as long as the heuristic does not
   overestimate distances, a* finds an optimal path, like dijkstra   s
   algorithm does. a* uses the heuristic to reorder the nodes so that it   s
   more likely that the goal node will be encountered sooner.

   and     that   s it! that   s the a* algorithm.

more[21]#

   are you ready to implement this? consider using an existing library. if
   you   re implementing it yourself, i have [22]companion guide that shows
   step by step how to implement graphs, queues, and pathfinding
   algorithms in python, c++, and c#.

   which algorithm should you use for finding paths on a game map?
     * if you want to find paths from or to all all locations, use breadth
       first search or dijkstra   s algorithm. use breadth first search if
       movement costs are all the same; use dijkstra   s algorithm if
       movement costs vary.
     * if you want to find paths to one location, or the closest of
       several goals, use greedy best first search or a*. prefer a* in
       most cases. when you   re tempted to use greedy best first search,
       consider using a* with an [23]   inadmissible    heuristic^[3].

   what about optimal paths? breadth first search and dijkstra   s algorithm
   are guaranteed to find the shortest path given the input graph. greedy
   best first search is not. a* is guaranteed to find the shortest path if
   the heuristic is never larger than the true distance. as the heuristic
   becomes smaller, a* turns into dijkstra   s algorithm. as the heuristic
   becomes larger, a* turns into greedy best first search.

   what about performance? the best thing to do is to eliminate
   unnecessary locations in your graph. if using a grid, [24]see this.
   reducing the size of the graph helps all the graph search algorithms.
   after that, use the simplest algorithm you can; simpler queues run
   faster. greedy best first search typically runs faster than dijkstra   s
   algorithm but doesn   t produce optimal paths. a* is a good choice for
   most pathfinding needs.

   what about non-maps? i show maps here because i think it   s easier to
   understand how the algorithms work by using a map. however, these graph
   search algorithms can be used on any sort of graph, not only game maps,
   and i   ve tried to present the algorithm code in a way that   s
   independent of 2d grids. movement costs on the maps become arbitrary
   weights on graph edges. the heuristics don   t translate as easily to
   arbitrary maps; you have to design a heuristic for each type of graph.
   for planar maps, distances are a good choice, so that   s what i   ve used
   here.

   i have lots more written about pathfinding [25]here^[4]. keep in mind
   that graph search is only one part of what you will need. a* doesn   t
   itself handle things like cooperative movement, moving obstacles, map
   changes, evaluation of dangerous areas, formations, turn radius, object
   sizes, animation, path smoothing, or lots of other topics.

   email me at [26]redblobgames@gmail.com, or tweet to [27]@redblobgames,
   or post a public comment:

endnotes

    1. [1]:
       http://theory.stanford.edu/~amitp/gameprogramming/maprepresentation
       s.html
    2. [2]:
       http://theory.stanford.edu/~amitp/gameprogramming/maprepresentation
       s.html
    3. [3]:  https://en.wikipedia.org/wiki/admissible_heuristic
    4. [4]:  http://theory.stanford.edu/~amitp/gameprogramming/

   (button) load comments
   [28]view the discussion thread.


    copyright    2019 [29]red blob games

     created 26 may 2014 with [30]d3.js and [31]typescript and
   [32]conrec.js  ; map sprites from starraven   s [33]sketchy cartography
   brushes  ;last modified: 26 mar 2019

references

   visible links
   1. https://simblob.blogspot.com/feeds/posts/default
   2. https://www.redblobgames.com/
   3. https://www.redblobgames.com/
   4. https://simblob.blogspot.com/
   5. https://pinboard.in/u:amitp/t:gamedev/
   6. https://twitter.com/redblobgames
   7. http://www-cs-students.stanford.edu/~amitp/
   8. https://www.redblobgames.com/pathfinding/a-star/introduction.html#graphs
   9. http://theory.stanford.edu/~amitp/gameprogramming/maprepresentations.html
  10. https://www.redblobgames.com/pathfinding/a-star/introduction.html#algorithms
  11. https://www.redblobgames.com/pathfinding/a-star/introduction.html#breadth-first-search
  12. https://www.redblobgames.com/pathfinding/tower-defense/
  13. http://theory.stanford.edu/~amitp/gameprogramming/maprepresentations.html
  14. https://www.redblobgames.com/pathfinding/a-star/introduction.html#early-exit
  15. https://www.redblobgames.com/pathfinding/a-star/introduction.html#dijkstra
  16. https://www.redblobgames.com/pathfinding/a-star/implementation.html#python-dijkstra
  17. https://www.redblobgames.com/pathfinding/a-star/implementation.html#cpp-dijkstra
  18. https://www.redblobgames.com/pathfinding/a-star/implementation.html#algorithm
  19. https://www.redblobgames.com/pathfinding/a-star/introduction.html#greedy-best-first
  20. https://www.redblobgames.com/pathfinding/a-star/introduction.html#astar
  21. https://www.redblobgames.com/pathfinding/a-star/introduction.html#more
  22. https://www.redblobgames.com/pathfinding/a-star/implementation.html
  23. https://en.wikipedia.org/wiki/admissible_heuristic
  24. https://www.redblobgames.com/pathfinding/grids/algorithms.html
  25. http://theory.stanford.edu/~amitp/gameprogramming/
  26. mailto:redblobgames@gmail.com
  27. https://twitter.com/redblobgames
  28. https://$.disqus.com/?url=https://www.redblobgames.com/pathfinding/a-star/introduction.html
  29. https://www.redblobgames.com/
  30. http://d3js.org/
  31. http://www.typescriptlang.org/
  32. https://github.com/jasondavies/conrec.js
  33. http://starraven.deviantart.com/art/sketchy-cartography-brushes-198264358

   hidden links:
  35. https://statcounter.com/
