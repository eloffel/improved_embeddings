   #[1]github [2]recent commits to chess-alpha-zero:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]117
     * [35]star [36]1,370
     * [37]fork [38]308

[39]zeta36/[40]chess-alpha-zero

   [41]code [42]issues 46 [43]pull requests 0 [44]projects 1 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   chess id23 by alphago zero methods.
   [47]reinforcement-learning [48]keras [49]alphago-zero [50]tensorflow
   [51]chess
     * [52]65 commits
     * [53]5 branches
     * [54]0 releases
     * [55]7 contributors
     * [56]mit

    1. [57]jupyter notebook 76.6%
    2. [58]python 23.4%

   (button) jupyter notebook python
   branch: master (button) new pull request
   [59]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/z
   [60]download zip

downloading...

   want to be notified of new releases in zeta36/chess-alpha-zero?
   [61]sign in [62]sign up

launching github desktop...

   if nothing happens, [63]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [64]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [65]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [66]download the github extension for visual studio
   and try again.

   (button) go back
   [67]@zeta36
   [68]zeta36 [69]merge pull request [70]#70 [71]from
   brianprichardson/new-best-model (button)    
updated best model after more supervised learning

   latest commit [72]acf80ad jul 17, 2018
   [73]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [74]binder [75]adding gpu free environment and binder link mar 5, 2018
   [76]data/model [77]updated best model after more supervised learning
   jul 7, 2018
   [78]notebooks [79]adding simple notebook, updating binder links mar 5,
   2018
   [80]src [81]merge remote-tracking branch 'upstream/master' jan 12, 2018
   [82].gitignore [83]- i upload the best model i was able to train until
   now. dec 17, 2017
   [84]c0uci.bat
   [85]license.txt [86]first commit nov 19, 2017
   [87]model.png
   [88]readme.md
   [89]requirements.txt [90]- lot of changes from [91]@akababa[92]. dec
   24, 2017

readme.md

   [93]binder [94]demo notebook

about

   chess id23 by [95]alphago zero methods.

   this project is based on these main resources:
    1. deepmind's oct 19th publication: [96]mastering the game of go
       without human knowledge.
    2. the great reversi development of the deepmind ideas that
       @mokemokechicken did in his repo:
       [97]https://github.com/mokemokechicken/reversi-alpha-zero
    3. deepmind just released a new version of alphago zero (named now
       alphazero) where they master chess from scratch:
       [98]https://arxiv.org/pdf/1712.01815.pdf. in fact, in chess
       alphazero outperformed stockfish after just 4 hours (300k steps)
       wow!

   see the [99]wiki for more details.

note

   i'm the creator of this repo. i (and some others collaborators did our
   best:
   [100]https://github.com/zeta36/chess-alpha-zero/graphs/contributors)
   but we found the self-play is too much costed for an only machine.
   supervised learning worked fine but we never try the self-play by
   itself.

   anyway i want to mention we have moved to a new repo where lot of
   people is working in a distributed version of az for chess (mcts in
   c++): [101]https://github.com/glinscott/leela-chess

   project is almost done and everybody will be able to participate just
   by executing a pre-compiled windows (or linux) application. a really
   great job and effort has been done is this project and i'm pretty sure
   we'll be able to simulate the deepmind results in not too long time of
   distributed cooperation.

   so, i ask everybody that wish to see a uci engine running a neural
   network to beat stockfish go into that repo and help with his machine
   power.

environment

     * python 3.6.3
     * tensorflow-gpu: 1.3.0
     * keras: 2.0.8

new results (after a great number of modifications due to @akababa)

   using supervised learning on about 10k games, i trained a model (7
   residual blocks of 256 filters) to a guesstimate of 1200 elo with 1200
   sims/move. one of the strengths of mcts is it scales quite well with
   computing power.

   here you can see an example where i (black) played against the model in
   the repo (white):

   [102]img

   here you can see an example of a game where i (white, ~2000 elo) played
   against the model in this repo (black):

   [103]img

first "good" results

   using the new supervised learning step i created, i've been able to
   train a model to the point that seems to be learning the openings of
   chess. also it seems the model starts to avoid losing naively pieces.

   here you can see an example of a game played for me against this model
   (ai plays black):

   [104]partida1

   here we have a game trained by @bame55 (ai plays white):

   [105]partida3

   this model plays in this way after only 5 epoch iterations of the 'opt'
   worker, the 'eval' worker changed 4 times the best model (4 of 5). at
   this moment the loss of the 'opt' worker is 5.1 (and still seems to be
   converging very well).

modules

supervised learning

   i've done a supervised learning new pipeline step (to use those human
   games files "pgn" we can find in internet as play-data generator). this
   sl step was also used in the first and original version of alphago and
   maybe chess is a some complex game that we have to pre-train first the
   policy model before starting the self-play process (i.e., maybe chess
   is too much complicated for a self training alone).

   to use the new sl process is as simple as running in the beginning
   instead of the worker "self" the new worker "sl". once the model
   converges enough with sl play-data we just stop the worker "sl" and
   start the worker "self" so the model will start improving now due to
   self-play data.
python src/chess_zero/run.py sl

   if you want to use this new sl step you will have to download big pgn
   files (chess files) and paste them into the data/play_data folder
   ([106]fics is a good source of data). you can also use the [107]scid
   program to filter by headers like player elo, game result and more.

   to avoid overfitting, i recommend using data sets of at least 3000
   games and running at most 3-4 epochs.

id23

   this alphago zero implementation consists of three workers: self, opt
   and eval.
     * self is self-play to generate training data by self-play using
       bestmodel.
     * opt is trainer to train model, and generate next-generation models.
     * eval is evaluator to evaluate whether the next-generation model is
       better than bestmodel. if better, replace bestmodel.

distributed training

   now it's possible to train the model in a distributed way. the only
   thing needed is to use the new parameter:
     * --type distributed: use mini config for testing, (see
       src/chess_zero/configs/distributed.py)

   so, in order to contribute to the distributed team you just need to run
   the three workers locally like this:
python src/chess_zero/run.py self --type distributed (or python src/chess_zero/r
un.py sl --type distributed)
python src/chess_zero/run.py opt --type distributed
python src/chess_zero/run.py eval --type distributed

gui

     * uci launches the universal chess interface, for use in a gui.

   to set up chesszero with a gui, point it to c0uci.bat (or rename to
   .sh). for example, this is screenshot of the random model using arena's
   self-play feature: [108]capture

data

     * data/model/model_best_*: bestmodel.
     * data/model/next_generation/*: next-generation models.
     * data/play_data/play_*.json: generated training data.
     * logs/main.log: log file.

   if you want to train the model from the beginning, delete the above
   directories.

how to use

setup

install libraries

pip install -r requirements.txt

   if you want to use gpu, follow [109]these instructions to install with
   pip3.

   make sure keras is using tensorflow and you have python 3.6.3+.
   depending on your environment, you may have to run python3/pip3 instead
   of python/pip.

basic usage

   for training model, execute self-play, trainer and evaluator.

   note: make sure you are running the scripts from the top-level
   directory of this repo, i.e. python src/chess_zero/run.py opt, not
   python run.py opt.

self-play

python src/chess_zero/run.py self

   when executed, self-play will start using bestmodel. if the bestmodel
   does not exist, new random model will be created and become bestmodel.

options

     * --new: create new bestmodel
     * --type mini: use mini config for testing, (see
       src/chess_zero/configs/mini.py)

trainer

python src/chess_zero/run.py opt

   when executed, training will start. a base model will be loaded from
   latest saved next-generation model. if not existed, bestmodel is used.
   trained model will be saved every epoch.

options

     * --type mini: use mini config for testing, (see
       src/chess_zero/configs/mini.py)
     * --total-step: specify total step(mini-batch) numbers. the total
       step affects learning rate of training.

evaluator

python src/chess_zero/run.py eval

   when executed, evaluation will start. it evaluates bestmodel and the
   latest next-generation model by playing about 200 games. if
   next-generation model wins, it becomes bestmodel.

options

     * --type mini: use mini config for testing, (see
       src/chess_zero/configs/mini.py)

tips and memory

gpu memory

   usually the lack of memory cause warnings, not error. if error happens,
   try to change vram_frac in src/configs/mini.py,
self.vram_frac = 1.0

   smaller batch_size will reduce memory usage of opt. try to change
   trainerconfig#batch_size in miniconfig.

     *    2019 github, inc.
     * [110]terms
     * [111]privacy
     * [112]security
     * [113]status
     * [114]help

     * [115]contact github
     * [116]pricing
     * [117]api
     * [118]training
     * [119]blog
     * [120]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [121]reload to refresh your
   session. you signed out in another tab or window. [122]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/zeta36/chess-alpha-zero/commits/master.atom
   3. https://github.com/zeta36/chess-alpha-zero#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/zeta36/chess-alpha-zero
  32. https://github.com/join
  33. https://github.com/login?return_to=/zeta36/chess-alpha-zero
  34. https://github.com/zeta36/chess-alpha-zero/watchers
  35. https://github.com/login?return_to=/zeta36/chess-alpha-zero
  36. https://github.com/zeta36/chess-alpha-zero/stargazers
  37. https://github.com/login?return_to=/zeta36/chess-alpha-zero
  38. https://github.com/zeta36/chess-alpha-zero/network/members
  39. https://github.com/zeta36
  40. https://github.com/zeta36/chess-alpha-zero
  41. https://github.com/zeta36/chess-alpha-zero
  42. https://github.com/zeta36/chess-alpha-zero/issues
  43. https://github.com/zeta36/chess-alpha-zero/pulls
  44. https://github.com/zeta36/chess-alpha-zero/projects
  45. https://github.com/zeta36/chess-alpha-zero/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/topics/reinforcement-learning
  48. https://github.com/topics/keras
  49. https://github.com/topics/alphago-zero
  50. https://github.com/topics/tensorflow
  51. https://github.com/topics/chess
  52. https://github.com/zeta36/chess-alpha-zero/commits/master
  53. https://github.com/zeta36/chess-alpha-zero/branches
  54. https://github.com/zeta36/chess-alpha-zero/releases
  55. https://github.com/zeta36/chess-alpha-zero/graphs/contributors
  56. https://github.com/zeta36/chess-alpha-zero/blob/master/license.txt
  57. https://github.com/zeta36/chess-alpha-zero/search?l=jupyter-notebook
  58. https://github.com/zeta36/chess-alpha-zero/search?l=python
  59. https://github.com/zeta36/chess-alpha-zero/find/master
  60. https://github.com/zeta36/chess-alpha-zero/archive/master.zip
  61. https://github.com/login?return_to=https://github.com/zeta36/chess-alpha-zero
  62. https://github.com/join?return_to=/zeta36/chess-alpha-zero
  63. https://desktop.github.com/
  64. https://desktop.github.com/
  65. https://developer.apple.com/xcode/
  66. https://visualstudio.github.com/
  67. https://github.com/zeta36
  68. https://github.com/zeta36/chess-alpha-zero/commits?author=zeta36
  69. https://github.com/zeta36/chess-alpha-zero/commit/acf80ad8f9c7febce7ef933ef8ca1a103947755e
  70. https://github.com/zeta36/chess-alpha-zero/pull/70
  71. https://github.com/zeta36/chess-alpha-zero/commit/acf80ad8f9c7febce7ef933ef8ca1a103947755e
  72. https://github.com/zeta36/chess-alpha-zero/commit/acf80ad8f9c7febce7ef933ef8ca1a103947755e
  73. https://github.com/zeta36/chess-alpha-zero/tree/acf80ad8f9c7febce7ef933ef8ca1a103947755e
  74. https://github.com/zeta36/chess-alpha-zero/tree/master/binder
  75. https://github.com/zeta36/chess-alpha-zero/commit/851cea5a657c8ce8a32d435731c590784e5aa8b5
  76. https://github.com/zeta36/chess-alpha-zero/tree/master/data/model
  77. https://github.com/zeta36/chess-alpha-zero/commit/95b5b8a2fdbb20f5f6643072de8fa174cc34bba2
  78. https://github.com/zeta36/chess-alpha-zero/tree/master/notebooks
  79. https://github.com/zeta36/chess-alpha-zero/commit/88f05400473b94f2e23d1344f8cf2b24fdcece75
  80. https://github.com/zeta36/chess-alpha-zero/tree/master/src
  81. https://github.com/zeta36/chess-alpha-zero/commit/36bbe1d6e1a233dd95682815cbc1b45211c7c9b6
  82. https://github.com/zeta36/chess-alpha-zero/blob/master/.gitignore
  83. https://github.com/zeta36/chess-alpha-zero/commit/42ea2248950392e3ccea37c5e92f94f00f8c2c70
  84. https://github.com/zeta36/chess-alpha-zero/blob/master/c0uci.bat
  85. https://github.com/zeta36/chess-alpha-zero/blob/master/license.txt
  86. https://github.com/zeta36/chess-alpha-zero/commit/abe520e3eee962a231533aef9c690f4eced4755f
  87. https://github.com/zeta36/chess-alpha-zero/blob/master/model.png
  88. https://github.com/zeta36/chess-alpha-zero/blob/master/readme.md
  89. https://github.com/zeta36/chess-alpha-zero/blob/master/requirements.txt
  90. https://github.com/zeta36/chess-alpha-zero/commit/485dcf5a12bb4f93cbd1a057cb5961a625d6d5ba
  91. https://github.com/akababa
  92. https://github.com/zeta36/chess-alpha-zero/commit/485dcf5a12bb4f93cbd1a057cb5961a625d6d5ba
  93. https://mybinder.org/v2/gh/kmader/chess-alpha-zero/master?urlpath=lab
  94. https://mybinder.org/v2/gh/kmader/chess-alpha-zero/master?filepath=notebooks/demo.ipynb
  95. https://deepmind.com/blog/alphago-zero-learning-scratch/
  96. https://www.nature.com/articles/nature24270.epdf?author_access_token=vjxbvjashxfoctqq4p2k4trgn0jajwel9jnr3zotv0pvw4gb86eepgqtrdtpiz-2rmo8-kg06gqvobu5nscfehilhcvfuemsbvws-lxjqqgg98faovwjxetugzaumnrq
  97. https://github.com/mokemokechicken/reversi-alpha-zero
  98. https://arxiv.org/pdf/1712.01815.pdf
  99. https://github.com/akababa/chess-zero/wiki
 100. https://github.com/zeta36/chess-alpha-zero/graphs/contributors
 101. https://github.com/glinscott/leela-chess
 102. https://user-images.githubusercontent.com/4205182/34333105-ada817c6-e8fe-11e7-8c01-5958aaf264c1.gif
 103. https://user-images.githubusercontent.com/4205182/34323276-ecd2a7b6-e806-11e7-856a-4e2394bd75df.gif
 104. https://user-images.githubusercontent.com/17341905/33597844-ea53c8ae-d9a0-11e7-8564-4b9b0f35a221.gif
 105. https://user-images.githubusercontent.com/17341905/34030278-8796f7c6-e16c-11e7-9ba4-97af15f2cde5.gif
 106. http://fiid19ames.org/download.html
 107. http://scid.sourceforge.net/
 108. https://user-images.githubusercontent.com/4205182/34057277-e9c99118-e19b-11e7-91ee-dd717f7efe9d.png
 109. https://www.tensorflow.org/install/
 110. https://github.com/site/terms
 111. https://github.com/site/privacy
 112. https://github.com/security
 113. https://githubstatus.com/
 114. https://help.github.com/
 115. https://github.com/contact
 116. https://github.com/pricing
 117. https://developer.github.com/
 118. https://training.github.com/
 119. https://github.blog/
 120. https://github.com/about
 121. https://github.com/zeta36/chess-alpha-zero
 122. https://github.com/zeta36/chess-alpha-zero

   hidden links:
 124. https://github.com/
 125. https://github.com/zeta36/chess-alpha-zero
 126. https://github.com/zeta36/chess-alpha-zero
 127. https://github.com/zeta36/chess-alpha-zero
 128. https://help.github.com/articles/which-remote-url-should-i-use
 129. https://github.com/zeta36/chess-alpha-zero#about
 130. https://github.com/zeta36/chess-alpha-zero#note
 131. https://github.com/zeta36/chess-alpha-zero#environment
 132. https://github.com/zeta36/chess-alpha-zero#new-results-after-a-great-number-of-modifications-due-to-akababa
 133. https://github.com/zeta36/chess-alpha-zero#first-good-results
 134. https://github.com/zeta36/chess-alpha-zero#modules
 135. https://github.com/zeta36/chess-alpha-zero#supervised-learning
 136. https://github.com/zeta36/chess-alpha-zero#reinforcement-learning
 137. https://github.com/zeta36/chess-alpha-zero#distributed-training
 138. https://github.com/zeta36/chess-alpha-zero#gui
 139. https://github.com/zeta36/chess-alpha-zero#data
 140. https://github.com/zeta36/chess-alpha-zero#how-to-use
 141. https://github.com/zeta36/chess-alpha-zero#setup
 142. https://github.com/zeta36/chess-alpha-zero#install-libraries
 143. https://github.com/zeta36/chess-alpha-zero#basic-usage
 144. https://github.com/zeta36/chess-alpha-zero#self-play
 145. https://github.com/zeta36/chess-alpha-zero#options
 146. https://github.com/zeta36/chess-alpha-zero#trainer
 147. https://github.com/zeta36/chess-alpha-zero#options-1
 148. https://github.com/zeta36/chess-alpha-zero#evaluator
 149. https://github.com/zeta36/chess-alpha-zero#options-2
 150. https://github.com/zeta36/chess-alpha-zero#tips-and-memory
 151. https://github.com/zeta36/chess-alpha-zero#gpu-memory
 152. https://github.com/
