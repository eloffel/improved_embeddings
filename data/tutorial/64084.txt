   #[1]alternate [2]alternate

   [3]dataquest
      

     * [4]courses
          + [5]directory (view all)
               o [6]apis and web scraping
               o [7]building a data pipeline
               o [8]algorithms and data structures
               o [9]calculus for machine learning
               o [10]command line beginner
               o [11]command line intermediate
               o [12]data cleaning and analysis
               o [13]data cleaning in r
               o [14]data cleaning project walkthrough
               o [15]id206
               o [16]data visualization in r
          + [17]course
               o [18]exploratory data visualization
               o [19]deep learning fundamentals
               o [20]id90
               o [21]exploring topics in data science
               o [22]git and version control
               o [23]intermediate r programming
               o [24]introduction to programming in r
               o [25]kaggle fundamentals
               o [26]id202 for machine learning
               o [27]id75 for machine learning
               o [28]machine learning fundamentals
          + course
               o [29]machine learning in python
               o [30]machine learning project
               o [31]natural language processing
               o [32]optimizing code performance: large datasets
               o [33]optimizing postgres databases
               o [34]pandas and numpy fundamentals
               o [35]postgres for data engineers
               o [36]id203 and statistics in python
               o [37]processing large datasets in pandas
               o [38]python for data science: fundamentals
          + course
               o [39]python for data science: intermediate
               o [40]python programming advanced
               o [41]recursion and trees
               o [42]spark and map-reduce
               o [43]sql and databases advanced
               o [44]sql: fundamentals
               o [45]sql: table relations and joins
               o [46]statistics: fundamentals
               o [47]statistics: averages and variability
               o [48]storytelling through data visualization
     * [49]students
     * [50]blog
     * [51]pricing
     * [52]about
     * [53]login
     * [54]learn free

   ____________________ (button)    

     * [55]career guide     new!
     * [56]tutorials
     * [57]career tips
     * [58]cheat sheets
     * [59]how to build a portfolio
     * [60]data science projects
     * [61]learning and motivation
     * [62]student stories
     * [63]dataquest updates

introduction to functional programming in python

   most of us have been introduced to python as an object-oriented
   language; a language exclusively using classes to build our programs.
   while classes, and objects, are easy to start working with, there are
   other ways to write your python code. languages like java can make it
   hard to move away from object-oriented thinking, but python makes it
   easy.

   given that python facilitates different approaches to writing code, a
   logical follow-up question is: what is a different way to write code?
   while there are several answers to this question, the most common
   alternative style of writing code is called functional programming.
   functional programming gets its name from writing functions which
   provides the main source of logic in a program.

   in this post, we will:
     * explain the basics of functional programming by comparing it to
       object-oriented programming.
     * cover why you might want to incorporate functional programming in
       your own code.
     * show you how python allows you to switch between the two.

comparing object-oriented to functional

   the easiest way to introduce functional programming is to compare it to
   something we   re already aware of: object-oriented programming. suppose
   we wanted to create a line counter class that takes in a file, reads
   each line, then counts the total amount of lines in the file. using a
   class, it could look something like the following:
class linecounter:
    def __init__(self, filename):
        self.file = open(filename, 'r')
        self.lines = []

        def read(self):
            self.lines = [line for line in self.file]

        def count(self):
            return len(self.lines)

   while not the best implementation, it does provide an insight into
   object-oriented design. within the class, there are the familiar
   concepts of methods and properties. the properties set and retrieve the
   state of the object, and the methods manipulate that state.

   for both these concepts to work, the object   s state must change over
   time. this change of state is evident in the lines property after
   calling the read() method. as an example, here   s how we would use this
   class:
# example_file.txt contains 100 lines.
lc = linecounter('example_file.txt')
print(lc.lines)
>> []
print(lc.count())
>> 0

# the lc object must read the file to
# set the lines property.
lc.read()
# the `lc.lines` property has been changed.
# this is called changing the state of the lc
# object.
print(lc.lines)
>> [['hello world!', ...]]
print(lc.count())
>> 100

   the ever-changing state of an object is both its blessing and curse. to
   understand why a changing state can be seen as a negative, we have to
   introduce an alternative. the alternative is to build the line counter
   as a series of independent functions.
def read(filename):
    with open(filename, 'r') as f:
        return [line for line in f]

def count(lines):
    return len(lines)

example_lines = read('example_log.txt')
lines_count = count(example_lines)

working with pure functions

   in the previous example, we were able to count the lines only with the
   use of functions. when we only use functions, we are applying a
   functional approach to programming which is, non-excitingly, called
   [64]functional programming. the concepts behind functional programming
   requires functions to be stateless, and rely only on their given inputs
   to produce an output.

   the functions that meet the above criteria are called pure functions.
   here   s an example to highlight the difference between pure functions,
   and non-pure:
# create a global variable `a`.
a = 5

def impure_sum(b):
    # adds two numbers, but uses the
    # global `a` variable.
    return b + a

def pure_sum(a, b):
    # adds two numbers, using
    # only the local function inputs.
    return a + b

print(impure_sum(6))
>> 11

print(pure_sum(4, 6))
>> 10

   the benefit of using pure functions over impure (non-pure) functions is
   the reduction of side effects. side effects occur when there are
   changes performed within a function   s operation that are outside its
   scope. for example, they occur when we change the state of an object,
   perform any i/o operation, or even call print():
def read_and_print(filename):
    with open(filename) as f:
        # side effect of opening a
        # file outside of function.
        data = [line for line in f]
    for line in data:
        # call out to the operating system
        # "println" method (side effect).
        print(line)

   programmers reduce side effects in their code to make it easier to
   follow, test, and debug. the more side effects a codebase has, the
   harder it is to step through a program and understand its sequence of
   execution.

   while it   s convienent to try and eliminate all side effects, they   re
   often used to make programming easier. if we were to ban all side
   effects, then you wouldn   t be able to read in a file, call print, or
   even assign a variable within a function. advocates for functional
   programming understand this tradeoff, and try to eliminate side effects
   where possible without sacrificing development implementation time.

the lambda expression

   instead of the def syntax for function declaration, we can use a
   [65]lambda expression to write python functions. the lambda syntax
   closely follows the def syntax, but it   s not a 1-to-1 mapping. here   s
   an example of building a function that adds two integers:
# using `def` (old way).
def old_add(a, b):
    return a + b

# using `lambda` (new way).
new_add = lambda a, b: a + bold_add(10, 5) == new_add(10, 5)
>> true

   the lambda expression takes in a comma seperated sequences of inputs
   (like def). then, immediately following the colon, it returns the
   expression without using an explicit return statement. finally, when
   assigning the lambda expression to a variable, it acts exactly like a
   python function, and can be called using the the function call syntax:
   new_add().

   if we didn   t assign lambda to a variable name, it would be called an
   anonymous function. these anonymous functions are extremely helpful,
   especially when using them as an input for another function. for
   example, the sorted() [66]function takes in an optional key argument (a
   function) that describes how the items in a list should be sorted.
unsorted = [('b', 6), ('a', 10), ('d', 0), ('c', 4)]

# sort on the second tuple value (the integer).
print(sorted(unsorted, key=lambda x: x[1]))
>> [('d', 0), ('c', 4), ('b', 6), ('a', 10)]

the map function

   while the ability to pass in functions as arguments is not unique to
   python, it is a recent development in programming languages. functions
   that allow for this type of behavior are called first-class functions.
   any language that contains first-class functions can be written in a
   functional style.

   there are a set of important first-class functions that are commonly
   used within the functional paradigm. these functions take in a
   [67]python iterable, and, like sorted(), apply a function for each
   element in the list. over the next few sections, we will examine each
   of these functions, but they all follow the general form of
   function_name(function_to_apply, iterable_of_elements).

   the first function we   ll work with is the map() function. the map()
   function takes in an iterable (ie. list), and creates a new iterable
   object, a special map object. the new object has the first-class
   function applied to every element.
# pseudocode for map.
def map(func, seq):
    # return `map` object with
    # the function applied to every
    # element.
    return map(
        func(x)
        for x in seq
    )

   here   s how we could use map to add 10 or 20 to every element in a list:
values = [1, 2, 3, 4, 5]

# note: we convert the returned map object to
# a list data structure.
add_10 = list(map(lambda x: x + 10, values))
add_20 = list(map(lambda x: x + 20, values))

print(add_10)
>> [11, 12, 13, 14, 15]

print(add_20)
>> [21, 22, 23, 24, 25]

   note that it   s important to cast the return value from map() as a list
   object. using the returned map object is difficult to work with if
   you   re expecting it to function like a list. first, printing it does
   not show each of its items, and secondly, you can only iterate over it
   once.

the filter function

   the second function we   ll work with is the filter() function. the
   filter() function takes in an iterable, creates a new iterable object
   (again, a special map object), and a first-class function that must
   return a bool value. the new map object is a filtered iterable of all
   elements that returned true.
# pseudocode for filter.
def filter(evaluate, seq):
    # return `map` object with
    # the evaluate function applied to every
    # element.
    return map(
        x for x in seq
        if evaluate(x) is true
    )

   here   s how we could filter odd or even values from a list:
values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# note: we convert the returned filter object to
# a list data structure.
even = list(filter(lambda x: x % 2 == 0, values))
odd = list(filter(lambda x: x % 2 == 1, values))

print(even)
>> [2, 4, 6, 8, 10]

print(odd)
>> [1, 3, 5, 7, 9]

the reduce function

   the last function we   ll look at is the reduce() function from the
   [68]functools package. the reduce() function takes in an iterable, and
   then reduces the iterable to a single value. reduce is different from
   filter() and map(), because reduce() takes in a function that has two
   input values.

   here   s an example of how we can use reduce() to sum all elements in a
   list.
from functools import reduce

values = [1, 2, 3, 4]

summed = reduce(lambda a, b: a + b, values)
print(summed)
>> 10

   diagram of reduce

   an interesting note to make is that you do not have to operate on the
   second value in the lambda expression. for example, you can write a
   function that always returns the first value of an iterable:
from functools import reduce

values = [1, 2, 3, 4, 5]

# by convention, we add `_` as a placeholder for an input
# we do not use.
first_value = reduce(lambda a, _: a, values)
print(first_value)
>> 1

rewriting with list comprehensions

   because we eventually convert to lists, we should rewrite the map() and
   filter() functions using list comprehension instead. this is the more
   pythonic way of writing them, as we are taking advantage of the python
   syntax for making lists. here   s how you could translate the previous
   examples of map() and filter() to list comprehensions:
values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# map.
add_10 = [x + 10 for x in values]
print(add_10)
>> [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]

# filter.
even = [x for x in values if x % 2 == 0]
print(even)
>> [2, 4, 6, 8, 10]

   from the examples, you can see that we don   t need to add the lambda
   expressions. if you are looking to add map(), or filter() functions to
   your own code, this is usually the recommended way. however, in the
   next section, we   ll provide a case to still use the map() and filter()
   functions.

writing function partials

   sometimes we want to use the behavior of a function, but decrease the
   number of arguments it takes. the purpose is to    save    one of the
   inputs, and create a new function that defaults the behavior using the
   saved input. suppose we wanted to write a function that would always
   add 2 to any number:
def add_two(b):
    return 2 + b

print(add_two(4))
>> 6

   the add_two function is similar to the general function, $f(a,b) = a +
   b$, only it defaults one of the arguments ($a = 2$). in python, we can
   use the [69]partial module from the functools package to set these
   argument defaults. the partial module takes in a function, and
      freezes    any number of args (or kwargs), starting from the first
   argument, then returns a new function with the default inputs.
from functools import partialdef add(a, b):
    return a + b

add_two = partial(add, 2)
add_ten = partial(add, 10)

print(add_two(4))
>> 6
print(add_ten(4))
>> 14

   partials can take in any function, including ones from the standard
   library.
# a partial that grabs ip addresses using
# the `map` function from the standard library.
extract_ips = partial(
    map,
    lambda x: x.split(' ')[0]
)
lines = read('example_log.txt')
ip_addresses = list(extract_ip(lines))

next steps

   in this post, we introduced the paradigm of functional programming. we
   learned about the lambda expression in python, important functional
   functions, and the concept of partials. overall, we showed that python
   provides a programmer with the tools to easily switch between
   functional programming and object-oriented programming.

   if you   ve enjoyed functional programming, our newest course:
   [70]building a data pipeline uses functional programming concepts to
   build a data pipeline. in this course, you   ll find more advanced python
   concepts, examples of good api design, and a final project that uses
   your own data pipeline built from scratch!
   spiro sideris
   [71]spiro sideris

   a software engineer with a knack for economics and a love for
   mathematics.

     * in [72]data science tutorials by [73]spiro sideris
     * |
     * january 25, 2018

related posts

   tutorial: introduction to git and github

   tutorial: why functions modify lists and dictionaries in python

   tutorial: poisson regression in r

   tutorial: find dominant colors in an image through id91

   [74][dq-1.png]
   all rights reserved    2019
   dataquest labs, inc.

   [75]help
   [76]blog
   [77]directory
   [78]forum
   [79]pricing
   [80]about us
   [81]legals
   [82]privacy
   [83]facebook
   [84]twitter
   [85]linkedin
   [86]data science slack

references

   visible links
   1. https://www.dataquest.io/wp-json/oembed/1.0/embed?url=https://www.dataquest.io/blog/introduction-functional-programming-python/
   2. https://www.dataquest.io/wp-json/oembed/1.0/embed?url=https://www.dataquest.io/blog/introduction-functional-programming-python/&format=xml
   3. https://www.dataquest.io/
   4. https://www.dataquest.io/directory/
   5. https://www.dataquest.io/directory/
   6. https://www.dataquest.io/course/apis-and-scraping/
   7. https://www.dataquest.io/course/building-a-data-pipeline/
   8. https://www.dataquest.io/course/algorithms-and-data-structures/
   9. https://www.dataquest.io/course/calculus-for-machine-learning/
  10. https://www.dataquest.io/course/command-line-beginner/
  11. https://www.dataquest.io/course/command-line-intermediate/
  12. https://www.dataquest.io/course/python-datacleaning/
  13. https://www.dataquest.io/course/r-data-cleaning/
  14. https://www.dataquest.io/course/data-exploration/
  15. https://www.dataquest.io/course/data-structures-algorithms/
  16. https://www.dataquest.io/course/r-data-viz/
  17. https://www.dataquest.io/course/
  18. https://www.dataquest.io/course/exploratory-data-visualization/
  19. https://www.dataquest.io/course/deep-learning-fundamentals/
  20. https://www.dataquest.io/course/decision-trees/
  21. https://www.dataquest.io/course/exploring-topics/
  22. https://www.dataquest.io/course/git-and-vcs/
  23. https://www.dataquest.io/course/intermediate-r-programming/
  24. https://www.dataquest.io/course/intro-to-r/
  25. https://www.dataquest.io/course/kaggle-fundamentals/
  26. https://www.dataquest.io/course/linear-algebra-for-machine-learning/
  27. https://www.dataquest.io/course/linear-regression-for-machine-learning/
  28. https://www.dataquest.io/course/machine-learning-fundamentals/
  29. https://www.dataquest.io/course/machine-learning-intermediate/
  30. https://www.dataquest.io/course/machine-learning-project/
  31. https://www.dataquest.io/course/natural-language-processing/
  32. https://www.dataquest.io/course/improving-code-performance/
  33. https://www.dataquest.io/course/optimizing-postgres-databases-data-engineering/
  34. https://www.dataquest.io/course/pandas-fundamentals/
  35. https://www.dataquest.io/course/postgres-for-data-engineers/
  36. https://www.dataquest.io/course/id203-statistics-intermediate/
  37. https://www.dataquest.io/course/pandas-large-datasets/
  38. https://www.dataquest.io/course/python-for-data-science-fundamentals/
  39. https://www.dataquest.io/course/python-for-data-science-intermediate/
  40. https://www.dataquest.io/course/python-programming-advanced/
  41. https://www.dataquest.io/course/recursion-and-tree-structures/
  42. https://www.dataquest.io/course/spark-map-reduce/
  43. https://www.dataquest.io/course/sql-databases-advanced/
  44. https://www.dataquest.io/course/sql-fundamentals/
  45. https://www.dataquest.io/course/sql-joins-relations/
  46. https://www.dataquest.io/course/statistics-fundamentals/
  47. https://www.dataquest.io/course/statistics-intermediate/
  48. https://www.dataquest.io/course/storytelling-data-visualization/
  49. https://www.dataquest.io/blog/topics/student-stories/
  50. https://www.dataquest.io/blog/
  51. https://www.dataquest.io/subscribe
  52. https://www.dataquest.io/about-us
  53. http://app.dataquest.io/login
  54. http://app.dataquest.io/signup
  55. https://www.dataquest.io/blog/data-science-career-guide/
  56. https://www.dataquest.io/blog/topics/data-science-tutorials/
  57. https://www.dataquest.io/blog/topics/data-science-career-tips/
  58. https://www.dataquest.io/blog/topics/cheat-sheets/
  59. https://www.dataquest.io/blog/topics/building-a-data-science-portfolio/
  60. https://www.dataquest.io/blog/topics/data-science-projects/
  61. https://www.dataquest.io/blog/topics/learning-and-motivation/
  62. https://www.dataquest.io/blog/topics/student-stories/
  63. https://www.dataquest.io/blog/topics/dataquest-updates/
  64. https://docs.python.org/3.6/howto/functional.html
  65. https://docs.python.org/3.5/tutorial/controlflow.html#lambda-expressions
  66. https://docs.python.org/3/howto/sorting.html#key-functions
  67. https://docs.python.org/3/glossary.html#term-iterable
  68. https://docs.python.org/3/library/functools.html
  69. https://docs.python.org/3.6/library/functools.html#functools.partial
  70. https://www.dataquest.io/course/building-a-data-pipeline
  71. https://www.dataquest.io/blog/author/spiro-sideris/
  72. https://www.dataquest.io/blog/topics/data-science-tutorials/
  73. https://www.dataquest.io/blog/author/spiro-sideris/
  74. https://www.dataquest.io/
  75. https://www.dataquest.io/help
  76. https://www.dataquest.io/blog
  77. https://www.dataquest.io/directory
  78. https://www.dataquest.io/forum
  79. https://www.dataquest.io/subscribe
  80. https://www.dataquest.io/about-us
  81. https://www.dataquest.io/terms
  82. https://www.dataquest.io/privacy
  83. https://www.facebook.com/dataquestio
  84. https://twitter.com/dataquestio
  85. https://www.linkedin.com/company/dataquest-io
  86. https://www.dataquest.io/chat

   hidden links:
  88. https://www.dataquest.io/blog/tutorial-introduction-learn-git-github/
  89. https://www.dataquest.io/blog/tutorial-functions-modify-lists-dictionaries-python/
  90. https://www.dataquest.io/blog/tutorial-poisson-regression-in-r/
  91. https://www.dataquest.io/blog/tutorial-colors-image-id91-python/
