   #[1]github [2]recent commits to siamese-triplet:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

     * [33]watch [34]27
     * [35]star [36]909
     * [37]fork [38]195

[39]adambielski/[40]siamese-triplet

   [41]code [42]issues 2 [43]pull requests 0 [44]projects 0 [45]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [46]sign up
   siamese and triplet networks with online pair/triplet mining in pytorch
   [47]machine-learning [48]deep-learning [49]siamese-network
   [50]triplet-loss [51]contrastive-loss [52]pytorch [53]embedding
     * [54]25 commits
     * [55]1 branch
     * [56]1 release
     * [57]fetching contributors

    1. [58]python 100.0%

   (button) python
   branch: master (button) new pull request
   [59]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/a
   [60]download zip

downloading...

   want to be notified of new releases in adambielski/siamese-triplet?
   [61]sign in [62]sign up

launching github desktop...

   if nothing happens, [63]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [64]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [65]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [66]download the github extension for visual studio
   and try again.

   (button) go back
   [67]@adambielski
   [68]adambielski [69]merge pull request [70]#26 [71]from kwentar/patch-1
   (button)    
abstract method name updated for triplet selector

   latest commit [72]4158c67 feb 21, 2019
   [73]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [74]images [75]updated visualizations (embeddings share scale) jun 9,
   2018
   [76].gitattributes
   [77]experiments_fashionmnist.ipynb [78]balancedbatchsampler is dataset
   independent now feb 8, 2019
   [79]experiments_mnist.ipynb
   [80]readme.md
   [81]datasets.py
   [82]losses.py [83]added eps to contrastive loss sqrt jan 10, 2019
   [84]metrics.py
   [85]networks.py [86]initial release mar 6, 2018
   [87]trainer.py
   [88]utils.py [89]update utils.py feb 21, 2019

readme.md

siamese and triplet learning with online pair/triplet mining

   pytorch implementation of siamese and triplet networks for learning
   embeddings.

   siamese and triplet networks are useful to learn mappings from image to
   a compact euclidean space where distances correspond to a measure of
   similarity [2]. embeddings trained in such way can be used as features
   vectors for classification or few-shot learning tasks.

installation

   requires [90]pytorch 0.4 with torchvision 0.2.1

   for pytorch 0.3 compatibility checkout tag torch-0.3.1

code structure

     * datasets.py
          + siamesemnist class - wrapper for a mnist-like dataset,
            returning random positive and negative pairs
          + tripletmnist class - wrapper for a mnist-like dataset,
            returning random triplets (anchor, positive and negative)
          + balancedbatchsampler class - batchsampler for data loader,
            randomly chooses n_classes and n_samples from each class based
            on labels
     * networks.py
          + embeddingnet - base network for encoding images into embedding
            vector
          + classificationnet - wrapper for an embedding network, adds a
            fully connected layer and log softmax for classification
          + siamesenet - wrapper for an embedding network, processes pairs
            of inputs
          + tripletnet - wrapper for an embedding network, processes
            triplets of inputs
     * losses.py
          + contrastiveloss - contrastive loss for pairs of embeddings and
            pair target (same/different)
          + tripletloss - triplet loss for triplets of embeddings
          + onlinecontrastiveloss - contrastive loss for a mini-batch of
            embeddings. uses a pairselector object to find positive and
            negative pairs within a mini-batch using ground truth class
            labels and computes contrastive loss for these pairs
          + onlinetripletloss - triplet loss for a mini-batch of
            embeddings. uses a tripletselector object to find triplets
            within a mini-batch using ground truth class labels and
            computes triplet loss
     * trainer.py
          + fit - unified function for training a network with different
            number of inputs and different types of id168s
     * metrics.py
          + sample metrics that can be used with fit function from
            trainer.py
     * utils.py
          + pairselector - abstract class defining objects generating
            pairs based on embeddings and ground truth class labels. can
            be used with onlinecontrastiveloss.
               o allpositivepairselector, hardnegativepairselector -
                 pairselector implementations
          + tripletselector - abstract class defining objects generating
            triplets based on embeddings and ground truth class labels.
            can be used with onlinetripletloss.
               o alltripletselector, hardestnegativetripletselector,
                 randomnegativetripletselector,
                 semihardnegativetripletselector - tripletselector
                 implementations

examples - mnist

   we'll train embeddings on mnist dataset. experiments were run in
   [91]jupyter notebook.

   we'll go through learning supervised feature embeddings using different
   id168s on mnist dataset. this is just for visualization
   purposes, thus we'll be using 2-dimensional embeddings which isn't the
   best choice in practice.

   for every experiment the same embedding network is used (32 conv 5x5 ->
   prelu -> maxpool 2x2 -> 64 conv 5x5 -> prelu -> maxpool 2x2 -> dense
   256 -> prelu -> dense 256 -> prelu -> dense 2) and we don't perform any
   hyperparameter search.

baseline - classification with softmax

   we add a fully-connected layer with the number of classes and train the
   network for classification with softmax and cross-id178. the network
   trains to ~99% accuracy. we extract 2 dimensional embeddings from
   penultimate layer:

   train set:

   test set:

   while the embeddings look separable (which is what we trained them
   for), they don't have good metric properties. they might not be the
   best choice as a descriptor for new classes.

siamese network

   now we'll train a siamese network that takes a pair of images and
   trains the embeddings so that the distance between them is minimized if
   they're from the same class and is greater than some margin value if
   they represent different classes. we'll minimize a contrastive loss
   function [1]:

   siamesemnist class samples random positive and negative pairs that are
   then fed to siamese network.

   after 20 epochs of training here are the embeddings we get for training
   set:

   test set:

   the learned embeddings are clustered much better within class.

triplet network

   we'll train a triplet network, that takes an anchor, a positive (of
   same class as an anchor) and negative (of different class than an
   anchor) examples. the objective is to learn embeddings such that the
   anchor is closer to the positive example than it is to the negative
   example by some margin value.

   [92]alt text source: schroff, florian, dmitry kalenichenko, and james
   philbin. [93]facenet: a unified embedding for face recognition and
   id91. cvpr 2015.

   triplet loss:

   tripletmnist class samples a positive and negative example for every
   possible anchor.

   after 20 epochs of training here are the embeddings we get for training
   set:

   test set:

   the learned embeddings are not as close to each other within class as
   in case of siamese network, but that's not what we optimized them for.
   we wanted the embeddings to be closer to other embeddings from the same
   class than from the other classes and we can see that's where the
   training is going to.

online pair/triplet selection - negative mining

   there are couple of problems with siamese and triplet networks:
    1. the number of possible pairs/triplets grows quadratically/cubically
       with the number of examples. it's infeasible to process them all
       and the training converges slowly.
    2. we generate pairs/triplets randomly. as the training continues,
       more and more pairs/triplets are easy to deal with (their loss
       value is very small or even 0), preventing the network from
       training. we need to provide the network with hard examples.
    3. each image that is fed to the network is used only for computation
       of contrastive/triplet loss for only one pair/triplet. the
       computation is somewhat wasted; once the embedding is computed, it
       could be reused for many pairs/triplets.

   to deal with these issues efficiently, we'll feed a network with
   standard mini-batches as we did for classification. the id168
   will be responsible for selection of hard pairs and triplets within
   mini-batch. if we feed the network with 16 images per 10 classes, we
   can process up to 159*160/2 = 12720 pairs and 10*16*15/2*(9*16) =
   172800 triplets, compared to 80 pairs and 53 triplets in previous
   implementation.

   usually it's not the best idea to process all possible pairs or
   triplets within a mini-batch. we can find some strategies on how to
   select triplets in [2] and [3].

online pair selection

   we'll feed a network with mini-batches, as we did for classification
   network. this time we'll use a special batchsampler that will sample
   n_classes and n_samples within each class, resulting in mini batches of
   size n_classes*n_samples.

   for each mini batch positive and negative pairs will be selected using
   provided labels.

   mnist is a rather easy dataset and the embeddings from the randomly
   selected pairs were quite good already, we don't see much improvement
   here.

   train embeddings:

   test embeddings:

online triplet selection

   we'll feed a network with mini-batches just like with online pair
   selection. there are couple of strategies we can use for triplet
   selection given labels and predicted embeddings:
     * all possible triplets (might be too many)
     * hardest negative for each positive pair (will result in the same
       negative for each anchor)
     * random hard negative for each positive pair (consider only triplets
       with positive triplet loss value)
     * semi-hard negative for each positive pair (similar to [2])

   the strategy for triplet selection must be chosen carefully. a bad
   strategy might lead to inefficient training or, even worse, to model
   collapsing (all embeddings ending up having the same values).

   here's what we got with random hard negatives for each positive pair.

   training set:

   test set:

fashionmnist

   similar experiments were conducted for [94]fashionmnist dataset where
   advantages of online negative mining are slightly more visible. the
   exact same network architecture with only 2-dimensional embeddings was
   used, which is probably not complex enough for learning good
   embeddings. more complex datasets with higher number classses should
   benefit even more from online mining.

baseline - classification

siamese vs online contrastive loss with negative mining

   siamese network with randomly selected pairs

   online contrastive loss with negative mining

triplet vs online triplet loss with negative mining

   triplet network with random triplets

   online triplet loss with negative mining

todo

     * [ ] optimize triplet selection
     * [ ] evaluate with a metric that is comparable between approaches
     * [ ] evaluate in one-shot setting when classes from test set are not
       in train set
     * [ ] show online triplet selection example on more difficult
       datasets

references

   [1] raia hadsell, sumit chopra, yann lecun, [95]dimensionality
   reduction by learning an invariant mapping, cvpr 2006

   [2] schroff, florian, dmitry kalenichenko, and james philbin.
   [96]facenet: a unified embedding for face recognition and id91.
   cvpr 2015

   [3] alexander hermans, lucas beyer, bastian leibe, [97]in defense of
   the triplet loss for person re-identification, 2017

   [4] brandon amos, bartosz ludwiczuk, mahadev satyanarayanan,
   [98]openface: a general-purpose face recognition library with mobile
   applications, 2016

   [5] yi sun, xiaogang wang, xiaoou tang, [99]deep learning face
   representation by joint identification-verification, nips 2014

     *    2019 github, inc.
     * [100]terms
     * [101]privacy
     * [102]security
     * [103]status
     * [104]help

     * [105]contact github
     * [106]pricing
     * [107]api
     * [108]training
     * [109]blog
     * [110]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [111]reload to refresh your
   session. you signed out in another tab or window. [112]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/adambielski/siamese-triplet/commits/master.atom
   3. https://github.com/adambielski/siamese-triplet#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/adambielski/siamese-triplet
  32. https://github.com/join
  33. https://github.com/login?return_to=/adambielski/siamese-triplet
  34. https://github.com/adambielski/siamese-triplet/watchers
  35. https://github.com/login?return_to=/adambielski/siamese-triplet
  36. https://github.com/adambielski/siamese-triplet/stargazers
  37. https://github.com/login?return_to=/adambielski/siamese-triplet
  38. https://github.com/adambielski/siamese-triplet/network/members
  39. https://github.com/adambielski
  40. https://github.com/adambielski/siamese-triplet
  41. https://github.com/adambielski/siamese-triplet
  42. https://github.com/adambielski/siamese-triplet/issues
  43. https://github.com/adambielski/siamese-triplet/pulls
  44. https://github.com/adambielski/siamese-triplet/projects
  45. https://github.com/adambielski/siamese-triplet/pulse
  46. https://github.com/join?source=prompt-code
  47. https://github.com/topics/machine-learning
  48. https://github.com/topics/deep-learning
  49. https://github.com/topics/siamese-network
  50. https://github.com/topics/triplet-loss
  51. https://github.com/topics/contrastive-loss
  52. https://github.com/topics/pytorch
  53. https://github.com/topics/embedding
  54. https://github.com/adambielski/siamese-triplet/commits/master
  55. https://github.com/adambielski/siamese-triplet/branches
  56. https://github.com/adambielski/siamese-triplet/releases
  57. https://github.com/adambielski/siamese-triplet/graphs/contributors
  58. https://github.com/adambielski/siamese-triplet/search?l=python
  59. https://github.com/adambielski/siamese-triplet/find/master
  60. https://github.com/adambielski/siamese-triplet/archive/master.zip
  61. https://github.com/login?return_to=https://github.com/adambielski/siamese-triplet
  62. https://github.com/join?return_to=/adambielski/siamese-triplet
  63. https://desktop.github.com/
  64. https://desktop.github.com/
  65. https://developer.apple.com/xcode/
  66. https://visualstudio.github.com/
  67. https://github.com/adambielski
  68. https://github.com/adambielski/siamese-triplet/commits?author=adambielski
  69. https://github.com/adambielski/siamese-triplet/commit/4158c677acec1343a683f2c22db638b5ac5d7849
  70. https://github.com/adambielski/siamese-triplet/pull/26
  71. https://github.com/adambielski/siamese-triplet/commit/4158c677acec1343a683f2c22db638b5ac5d7849
  72. https://github.com/adambielski/siamese-triplet/commit/4158c677acec1343a683f2c22db638b5ac5d7849
  73. https://github.com/adambielski/siamese-triplet/tree/4158c677acec1343a683f2c22db638b5ac5d7849
  74. https://github.com/adambielski/siamese-triplet/tree/master/images
  75. https://github.com/adambielski/siamese-triplet/commit/42949a6887c6fc3bc2bd2fcdbec3fe65004290fd
  76. https://github.com/adambielski/siamese-triplet/blob/master/.gitattributes
  77. https://github.com/adambielski/siamese-triplet/blob/master/experiments_fashionmnist.ipynb
  78. https://github.com/adambielski/siamese-triplet/commit/e4b738ef81f4c8987397443a43a1dd833b608193
  79. https://github.com/adambielski/siamese-triplet/blob/master/experiments_mnist.ipynb
  80. https://github.com/adambielski/siamese-triplet/blob/master/readme.md
  81. https://github.com/adambielski/siamese-triplet/blob/master/datasets.py
  82. https://github.com/adambielski/siamese-triplet/blob/master/losses.py
  83. https://github.com/adambielski/siamese-triplet/commit/69c1073c634882867a374d38efed65b9d0b08a94
  84. https://github.com/adambielski/siamese-triplet/blob/master/metrics.py
  85. https://github.com/adambielski/siamese-triplet/blob/master/networks.py
  86. https://github.com/adambielski/siamese-triplet/commit/4ed17efa6b2850c5cbef0b3986eae7c94eb1d6a1
  87. https://github.com/adambielski/siamese-triplet/blob/master/trainer.py
  88. https://github.com/adambielski/siamese-triplet/blob/master/utils.py
  89. https://github.com/adambielski/siamese-triplet/commit/658b583a7067d072e983e129b36543a6f1187ced
  90. http://pytorch.org/
  91. https://github.com/adambielski/siamese-triplet/blob/master/experiments_mnist.ipynb
  92. https://github.com/adambielski/siamese-triplet/blob/master/images/anchor_negative_positive.png
  93. https://arxiv.org/abs/1503.03832
  94. https://github.com/zalandoresearch/fashion-mnist
  95. http://yann.lecun.com/exdb/publis/pdf/hadsell-chopra-lecun-06.pdf
  96. https://arxiv.org/abs/1503.03832
  97. https://arxiv.org/pdf/1703.07737
  98. http://reports-archive.adm.cs.cmu.edu/anon/2016/cmu-cs-16-118.pdf
  99. http://papers.nips.cc/paper/5416-deep-learning-face-representation-by-joint-identification-verification
 100. https://github.com/site/terms
 101. https://github.com/site/privacy
 102. https://github.com/security
 103. https://githubstatus.com/
 104. https://help.github.com/
 105. https://github.com/contact
 106. https://github.com/pricing
 107. https://developer.github.com/
 108. https://training.github.com/
 109. https://github.blog/
 110. https://github.com/about
 111. https://github.com/adambielski/siamese-triplet
 112. https://github.com/adambielski/siamese-triplet

   hidden links:
 114. https://github.com/
 115. https://github.com/adambielski/siamese-triplet
 116. https://github.com/adambielski/siamese-triplet
 117. https://github.com/adambielski/siamese-triplet
 118. https://help.github.com/articles/which-remote-url-should-i-use
 119. https://github.com/adambielski/siamese-triplet#siamese-and-triplet-learning-with-online-pairtriplet-mining
 120. https://github.com/adambielski/siamese-triplet#installation
 121. https://github.com/adambielski/siamese-triplet#code-structure
 122. https://github.com/adambielski/siamese-triplet#examples---mnist
 123. https://github.com/adambielski/siamese-triplet#baseline---classification-with-softmax
 124. https://github.com/adambielski/siamese-triplet/blob/master/images/mnist_softmax_train.png
 125. https://github.com/adambielski/siamese-triplet/blob/master/images/mnist_softmax_test.png
 126. https://github.com/adambielski/siamese-triplet#siamese-network
 127. https://github.com/adambielski/siamese-triplet/blob/master/images/contrastive_loss.png
 128. https://github.com/adambielski/siamese-triplet/blob/master/images/mnist_siamese_train.png
 129. https://github.com/adambielski/siamese-triplet/blob/master/images/mnist_siamese_test.png
 130. https://github.com/adambielski/siamese-triplet#triplet-network
 131. https://github.com/adambielski/siamese-triplet/blob/master/images/triplet_loss.png
 132. https://github.com/adambielski/siamese-triplet/blob/master/images/mnist_triplet_train.png
 133. https://github.com/adambielski/siamese-triplet/blob/master/images/mnist_triplet_test.png
 134. https://github.com/adambielski/siamese-triplet#online-pairtriplet-selection---negative-mining
 135. https://github.com/adambielski/siamese-triplet#online-pair-selection
 136. https://github.com/adambielski/siamese-triplet/blob/master/images/mnist_ocl_train.png
 137. https://github.com/adambielski/siamese-triplet/blob/master/images/mnist_ocl_test.png
 138. https://github.com/adambielski/siamese-triplet#online-triplet-selection
 139. https://github.com/adambielski/siamese-triplet/blob/master/images/mnist_otl_train.png
 140. https://github.com/adambielski/siamese-triplet/blob/master/images/mnist_otl_test.png
 141. https://github.com/adambielski/siamese-triplet#fashionmnist
 142. https://github.com/adambielski/siamese-triplet#baseline---classification
 143. https://github.com/adambielski/siamese-triplet/blob/master/images/fmnist_softmax_test.png
 144. https://github.com/adambielski/siamese-triplet#siamese-vs-online-contrastive-loss-with-negative-mining
 145. https://github.com/adambielski/siamese-triplet/blob/master/images/fmnist_comp_cl.png
 146. https://github.com/adambielski/siamese-triplet/blob/master/images/fmnist_comp_ocl.png
 147. https://github.com/adambielski/siamese-triplet#triplet-vs-online-triplet-loss-with-negative-mining
 148. https://github.com/adambielski/siamese-triplet/blob/master/images/fmnist_comp_tl.png
 149. https://github.com/adambielski/siamese-triplet/blob/master/images/fmnist_comp_otl.png
 150. https://github.com/adambielski/siamese-triplet#todo
 151. https://github.com/adambielski/siamese-triplet#references
 152. https://github.com/
