   #[1]github [2]recent commits to universe:master

   [3]skip to content

   (button)

     * why github?
       [4]features    
          + [5]code review
          + [6]project management
          + [7]integrations
          + [8]actions
          + [9]team management
          + [10]social coding
          + [11]documentation
          + [12]code hosting
          + [13]customer stories    
          + [14]security    
     * [15]enterprise
     * explore
          + [16]explore github    

learn & contribute
          + [17]topics
          + [18]collections
          + [19]trending
          + [20]learning lab
          + [21]open source guides

connect with others
          + [22]events
          + [23]community forum
          + [24]github education
     * [25]marketplace
     * pricing
       [26]plans    
          + [27]compare plans
          + [28]contact sales
          + [29]nonprofit    
          + [30]education    

   ____________________
     * in this repository all github    
       jump to    

     * no suggested jump to results

     * in this repository all github    
       jump to    
     * in this repository all github    
       jump to    

   [31]sign in [32]sign up

   this repository has been archived by the owner. it is now read-only.
     * [33]watch [34]454
     * [35]star [36]7,029
     * [37]fork [38]841

[39]openai/[40]universe

   [41]code [42]issues 0 [43]pull requests 0 [44]projects 0 [45]wiki
   [46]insights
   (button) dismiss

join github today

   github is home to over 31 million developers working together to host
   and review code, manage projects, and build software together.
   [47]sign up
   universe: a software platform for measuring and training an ai's
   general intelligence across the world's supply of games, websites and
   other applications. [48]https://universe.openai.com
     * [49]210 commits
     * [50]22 branches
     * [51]2 releases
     * [52]23 contributors
     * [53]mit

    1. [54]python 99.8%
    2. [55]makefile 0.2%

   (button) python makefile
   branch: master
   [56]find file
   clone or download

clone with https

   use git or checkout with svn using the web url.
   https://github.com/o
   [57]download zip

downloading...

   want to be notified of new releases in openai/universe?
   [58]sign in [59]sign up

launching github desktop...

   if nothing happens, [60]download github desktop and try again.

   (button) go back

launching github desktop...

   if nothing happens, [61]download github desktop and try again.

   (button) go back

launching xcode...

   if nothing happens, [62]download xcode and try again.

   (button) go back

launching visual studio...

   if nothing happens, [63]download the github extension for visual studio
   and try again.

   (button) go back
   [64]@gdb
   [65]gdb [66]update readme
   latest commit [67]cc9ce6e apr 5, 2018
   [68]permalink
   type name latest commit message commit time
   failed to load latest commit information.
   [69]doc [70]tlb bugfixes ([71]#135[72]) feb 1, 2017
   [73]example [74]add wrappers.softmaxclickmouse jan 28, 2017
   [75]tests/functional
   [76]universe [77]set openai_remote_verbose=0 in env to quiet remote
   container logs ([78]#185[79]) may 18, 2017
   [80].dockerignore [81]actually use our code in tests dec 21, 2016
   [82].gitignore
   [83].travis.yml
   [84]code_of_conduct.rst
   [85]dockerfile
   [86]issue_template [87]formatting jan 4, 2017
   [88]license [89]add extra docs dec 5, 2016
   [90]makefile
   [91]readme.rst [92]update readme apr 5, 2018
   [93]setup.py [94]fixes [95]#171 apr 5, 2017
   [96]test.dockerfile
   [97]tox.ini

readme.rst

   this repository has been deprecated in favor of the retro
   ([98]https://github.com/openai/retro) library. see our retro contest
   ([99]https://blog.openai.com/retro-contest) blog post for detalis.

[100]universe

   [101]universe is a software platform for measuring and training an ai's
   general intelligence across the world's supply of games, websites and
   other applications. this is the universe open-source library, which
   provides a simple [102]gym interface to each universe environment.

   universe allows anyone to train and evaluate ai agents on an extremely
   wide range of real-time, complex environments.

   universe makes it possible for any existing program to become an openai
   gym environment, without needing special access to the program's
   internals, source code, or apis. it does this by packaging the program
   into a docker container, and presenting the ai with the same interface
   a human uses: sending keyboard and mouse events, and receiving screen
   pixels. our initial release contains over 1,000 environments in which
   an ai agent can take actions and gather observations.

   additionally, some environments include a reward signal sent to the
   agent, to guide id23. we've included a few hundred
   environments with reward signals. these environments also include
   automated start menu clickthroughs, allowing your agent to skip to the
   interesting part of the environment.

   we'd like the community's [103]help to grow the number of available
   environments, including integrating increasingly large and complex
   games.

   the following classes of tasks are packaged inside of
   publicly-available docker containers, and can be run today with no work
   on your part:
     * atari and cartpole environments over vnc: gym-core.pong-v3,
       gym-core.cartpole-v0, etc.
     * flashgames over vnc: flashgames.duskdrive-v0, etc.
     * browser tasks ("world of bits") over vnc: wob.mini.tictactoe-v0,
       etc.

   we've scoped out integrations for many other games, including
   completing a high-quality gta v integration (thanks to [104]craig
   quiter and nvidia), but these aren't included in today's release.

   contents of this document
     * [105]universe
          + [106]getting started
          + [107]testing
          + [108]additional documentation
          + [109]getting help
          + [110]what's next?

[111]getting started

installation

supported systems

   we currently support linux and osx running python 2.7 or 3.5.

   we recommend setting up a [112]conda environment before getting
   started, to keep all your universe-related packages in the same place.

install universe

   to get started, first install universe:
git clone https://github.com/openai/universe.git
cd universe
pip install -e .

   if this errors out, you may be missing some required packages. here's
   the list of required packages we know about so far (please let us know
   if you had to install any others).

   on ubuntu 16.04:
pip install numpy
sudo apt-get install golang libjpeg-turbo8-dev make

   on ubuntu 14.04:
sudo add-apt-repository ppa:ubuntu-lxc/lxd-stable  # for newer golang
sudo apt-get update
sudo apt-get install golang libjpeg-turbo8-dev make

   on osx:

   you might need to install command line tools by running:
xcode-select --install

   or numpy, libjpeg-turbo and incremental packages:
pip install numpy incremental
brew install golang libjpeg-turbo

install docker

   the majority of the environments in universe run inside docker
   containers, so you will need to [113]install docker (on osx, we
   recommend [114]docker for mac). you should be able to run docker ps and
   get something like this:
$ docker ps
container id        image               command             created
status              ports               names

alternate configuration - running the agent in docker

   the above instructions result in an agent that runs as a regular python
   process in your os, and launches docker containers as needed for the
   remotes. alternatively, you can build a docker image for the agent and
   run it as a container as well. you can do this in any operating system
   that has a recent version of docker installed, and the git client.

   to get started, clone the universe repo:
git clone https://github.com/openai/universe.git
cd universe

   build a docker image, tag it as 'universe':
docker build -t universe .

   this may take a while the first time, as the docker image layers are
   pulled from docker hub.

   once the image is built, you can do a quick run of the test cases to
   make sure everything is working:
docker run --privileged --rm -e docker_net_host=172.17.0.1 -v /var/run/docker.so
ck:/var/run/docker.sock universe pytest

   here's a breakdown of that command:
     * docker run - launch a docker container
     * --rm - delete the container once the launched process finishes
     * -e docker_net_host=172.17.0.1 - tells the universe remote (when
       launched) to make its vnc connection back to this docker-allocated
       ip
     * -v /var/run/docker.sock:/var/run/docker.sock - makes the docker
       unix socket from the host available to the container. this is a
       common technique used to allow containers to launch other
       containers alongside itself.
     * universe - use the imaged named 'universe' built above
     * pytest - run 'pytest' in the container, which runs all the tests

   at this point, you'll see a bunch of tests run and hopefully all pass.

   to do some actual development work, you probably want to do another
   volume map from the universe repo on your host into the container, then
   shell in interactively:
docker run --privileged --rm -it -e docker_net_host=172.17.0.1 -v /var/run/docke
r.sock:/var/run/docker.sock -v (full path to cloned repo above):/usr/local/unive
rse universe python

   as you edit the files in your cloned git repo, they will be changed in
   your docker container and you'll be able to run them in python.

   note if you are using docker for windows, you'll need to enable the
   relevant shared drive for this to work.

notes on installation

     * when installing universe, you may see warning messages. these lines
       occur when installing numpy and are normal.
     * you'll need a go version of at least 1.5. ubuntu 14.04 has an older
       go, so you'll need to [115]upgrade your go installation.
     * we run python 3.5 internally, so the python 3.5 variants will be
       much more thoroughly performance tested. please let us know if you
       see any issues on 2.7.
     * while we don't officially support windows, we expect our code to be
       very close to working there. we'd be happy to take pull requests
       that take our windows compatibility to 100%. in the meantime, the
       easiest way for windows users to run universe is to use the
       alternate configuration described above.

system overview

   a universe environment is similar to any other gym environment: the
   agent submits actions and receives observations using the step()
   method.

   internally, a universe environment consists of two pieces: a client and
   a remote:
     * the client is a [116]vncenv instance which lives in the same
       process as the agent. it performs functions like receiving the
       agent's actions, proxying them to the remote, queuing up rewards
       for the agent, and maintaining a local view of the current episode
       state.
     * the remote is the running environment dynamics, usually a program
       running inside of a docker container. it can run anywhere --
       locally, on a remote server, or in the cloud. (we have a separate
       page describing how to manage [117]remotes.)
     * the client and the remote communicate with one another using the
       [118]vnc remote desktop system, as well as over an auxiliary
       websocket channel for reward, diagnostic, and control messages.
       (for more information on client-remote communication, see the
       separate page on the [119]universe internal communication
       protocols.)

   the code in this repository corresponds to the client side of the
   universe environments. additionally, you can freely access the docker
   images for the remotes. we'll release the source repositories for the
   remotes in the future, along with tools to enable users to integrate
   new environments. please sign up for our [120]beta if you'd like early
   access.

run your first agent

   now that you've installed the universe library, you should make sure it
   actually works. you can paste the example below into your python repl.
   (you may need to press enter an extra time to make sure the while loop
   is executing.)
import gym
import universe  # register the universe environments

env = gym.make('flashgames.duskdrive-v0')
env.configure(remotes=1)  # automatically creates a local docker container
observation_n = env.reset()

while true:
  action_n = [[('keyevent', 'arrowup', true)] for ob in observation_n]  # your a
gent here
  observation_n, reward_n, done_n, info = env.step(action_n)
  env.render()

   the example will instantiate a client in your python process,
   automatically pull the quay.io/openai/universe.flashgames image, and
   will start that image as the remote. (in our [121]remotes documentation
   page, we explain other ways you can run remotes.)

   it will take a few minutes for the image to pull the first time. after
   that, if all goes well, a window like the one below will soon pop up.
   your agent, which is just pressing the up arrow repeatedly, is now
   playing a flash racing game called [122]dusk drive. your agent is
   programmatically controlling a vnc client, connected to a vnc server
   running inside of a docker container in the cloud, rendering a headless
   chrome with flash enabled:

   [123]https://github.com/openai/universe/blob/master/doc/dusk-drive.png?
   raw=true

   you can even connect your own vnc client to the environment, either
   just to observe or to interfere with your agent. our flashgames and
   gym-core images conveniently bundle a browser-based vnc client, which
   can be accessed at http://localhost:15900/viewer/?password=openai. if
   you're on mac, connecting to a vnc server is as easy as running: open
   vnc://localhost:5900.

   (if using docker-machine, you'll need to replace "localhost" with the
   ip address of your docker daemon, and use openai as the password.)

breaking down the example

   so we managed to run an agent, what did all the code actually mean?
   we'll go line-by-line through the example.
     * first, we import the [124]gym library, which is the base on which
       universe is built. we also import universe, which [125]registers
       all the universe environments.

import gym
import universe # register the universe environments

     * next, we create the environment instance. behind the scenes, gym
       looks up the [126]registration for flashgames.duskdrive-v0, and
       instantiates a [127]vncenv object which has been [128]wrapped to
       add a few useful diagnostics and utilities. the vncenv object is
       the client part of the environment, and it is not yet connected to
       a remote.

env = gym.make('flashgames.duskdrive-v0')

     * the call to configure() connects the client to a remote environment
       server. when called with configure(remotes=1), universe will
       automatically create a docker image running locally on your
       computer. the local client connects to the remote using vnc. (more
       information on client-remote communication can be found in the page
       on [129]universe internal communication protocols. more on
       configuring remotes is at [130]remotes.)

env.configure(remotes=1)

     * when starting a new environment, you call env.reset(). universe
       environments run in real-time, rather than stepping synchronously
       with the agent's actions, so reset is asynchronous and returns
       immediately. since the environment will not have waited to finish
       connecting to the vnc server before returning, the initial
       observations from reset will be none to indicate that there is not
       yet a valid observation.
       similarly, the environment keeps running in the background even if
       the agent does not call env.step(). this means that an agent that
       successfully learns from a universe environment cannot take
       "thinking breaks": it must keep sending actions to the environment
       at all times.
       additionally, universe introduces the vectorized gym api. rather
       than controlling a single environment at a time, the agent can
       control a fixed-size vector of n environments, each with its own
       remote. the return value from reset is therefore a vector of
       observations. for more information, see the separate page on
       [131]environment semantics)

observation_n = env.reset()

     * at each step() call, the agent submits a vector of actions; one for
       each environment instance it is controlling. each vnc action is a
       list of events; above, each action is the single event "press the
       arrowup key". the agent could press and release the key in one
       action by instead submitting [('keyevent', 'arrowup', true),
       ('keyevent', 'arrowup', false)] for each observation.
       in fact, the agent could largely have the same effect by just
       submitting ('keyevent', 'arrowup', true) once and then calling
       env.step([[] for ob in observation_n]) thereafter, without ever
       releasing the key using ('keyevent', 'arrowup', false). the browser
       running inside the remote would continue to statefully represent
       the arrow key as being pressed. sending other unrelated keypresses
       would not disrupt the up arrow keypress; only explicitly releasing
       the key would cancel it. there's one slight subtlety: when the
       episode resets, the browser will reset, and will forget about the
       keypress; you'd need to submit a new arrowup at the start of each
       episode.

action_n = [[('keyevent', 'arrowup', true)] for ob in observation_n]

     * after we submit the action to the environment and render one frame,
       step() returns a list of observations, a list of rewards, a list of
       "done" booleans indicating whether the episode has ended, and then
       finally an info dictionary of the form {'n': [{}, ...]}, in which
       you can access the info for environment i as info['n'][i].
       each environment's info message contains useful diagnostic
       information, including latency data, client and remote timings, vnc
       update counts, and reward message counts.

observation_n, reward_n, done_n, info = env.step(action_n)
env.render()

     * we call step in what looks like a busy loop. in reality, there is a
       [132]throttle wrapper on the client which defaults to a target
       frame rate of 60fps, or one frame every 16.7ms. if you call it more
       frequently than that, step will [133]sleep with any leftover time.

[134]testing

   we are using [135]pytest for tests. you can run them via:
pytest

   run pytest --help for useful options, such as pytest -s (disables
   output capture) or pytest -k <expression> (runs only specific tests).

[136]additional documentation

   more documentation not covered in this readme can be found in the
   [137]doc folder of this repository.

[138]getting help

   if you encounter a problem that is not addressed in this readme page or
   in the [139]extra docs, then try our wiki page of [140]solutions to
   common problems - and add to it if your solution isn't there!

   you can also search through the [141]issues on this repository and our
   [142]discussion board to see if another user has posted about the same
   problem or to ask for help from the community.

   if you still can't solve your problem after trying all of the above
   steps, please post an issue on this repository.

[143]what's next?

     * get started training rl algorithms! you can try out the
       [144]universe starter agent, an implementation of the [145]a3c
       algorithm that can solve several vnc environments.
     * for more information on how to manage remotes, see the separate
       documentation page on [146]remotes.
     * sign up for a [147]beta to get early access to upcoming universe
       releases, such as tools to integrate new universe environments or a
       dataset of recorded human demonstrations.

changelog

     * 2017-02-08: the old location for wrappers.safeactionspace has been
       moved to wrappers.experimental.safeactionspace. softmaxclickmouse
       has also been moved to wrappers.experimental.softmaxclickmouse
     * 2017-01-08: the wrappers.safeactionspace has been moved to
       wrappers.experimental.safeactionspace. the old location will remain
       with a deprecation warning until 2017-02-08.
     * 2016-12-27: backwards incompatibility: the gym monitor is now a
       wrapper. rather than starting monitoring as
       env.monitor.start(directory), envs are now wrapped as follows: env
       = wrappers.monitor(env, directory). this change is on master and
       will be released with 0.21.0.

     *    2019 github, inc.
     * [148]terms
     * [149]privacy
     * [150]security
     * [151]status
     * [152]help

     * [153]contact github
     * [154]pricing
     * [155]api
     * [156]training
     * [157]blog
     * [158]about

   (button) you can   t perform that action at this time.

   you signed in with another tab or window. [159]reload to refresh your
   session. you signed out in another tab or window. [160]reload to
   refresh your session.

   (button)

references

   visible links
   1. https://github.com/opensearch.xml
   2. https://github.com/openai/universe/commits/master.atom
   3. https://github.com/openai/universe#start-of-content
   4. https://github.com/features
   5. https://github.com/features/code-review/
   6. https://github.com/features/project-management/
   7. https://github.com/features/integrations
   8. https://github.com/features/actions
   9. https://github.com/features#team-management
  10. https://github.com/features#social-coding
  11. https://github.com/features#documentation
  12. https://github.com/features#code-hosting
  13. https://github.com/customer-stories
  14. https://github.com/security
  15. https://github.com/enterprise
  16. https://github.com/explore
  17. https://github.com/topics
  18. https://github.com/collections
  19. https://github.com/trending
  20. https://lab.github.com/
  21. https://opensource.guide/
  22. https://github.com/events
  23. https://github.community/
  24. https://education.github.com/
  25. https://github.com/marketplace
  26. https://github.com/pricing
  27. https://github.com/pricing#feature-comparison
  28. https://enterprise.github.com/contact
  29. https://github.com/nonprofit
  30. https://education.github.com/
  31. https://github.com/login?return_to=/openai/universe
  32. https://github.com/join
  33. https://github.com/login?return_to=/openai/universe
  34. https://github.com/openai/universe/watchers
  35. https://github.com/login?return_to=/openai/universe
  36. https://github.com/openai/universe/stargazers
  37. https://github.com/login?return_to=/openai/universe
  38. https://github.com/openai/universe/network/members
  39. https://github.com/openai
  40. https://github.com/openai/universe
  41. https://github.com/openai/universe
  42. https://github.com/openai/universe/issues
  43. https://github.com/openai/universe/pulls
  44. https://github.com/openai/universe/projects
  45. https://github.com/openai/universe/wiki
  46. https://github.com/openai/universe/pulse
  47. https://github.com/join?source=prompt-code
  48. https://universe.openai.com/
  49. https://github.com/openai/universe/commits/master
  50. https://github.com/openai/universe/branches
  51. https://github.com/openai/universe/releases
  52. https://github.com/openai/universe/graphs/contributors
  53. https://github.com/openai/universe/blob/master/license
  54. https://github.com/openai/universe/search?l=python
  55. https://github.com/openai/universe/search?l=makefile
  56. https://github.com/openai/universe/find/master
  57. https://github.com/openai/universe/archive/master.zip
  58. https://github.com/login?return_to=https://github.com/openai/universe
  59. https://github.com/join?return_to=/openai/universe
  60. https://desktop.github.com/
  61. https://desktop.github.com/
  62. https://developer.apple.com/xcode/
  63. https://visualstudio.github.com/
  64. https://github.com/gdb
  65. https://github.com/openai/universe/commits?author=gdb
  66. https://github.com/openai/universe/commit/cc9ce6ec241821bfb0f3b85dd455bd36e4ee7a8c
  67. https://github.com/openai/universe/commit/cc9ce6ec241821bfb0f3b85dd455bd36e4ee7a8c
  68. https://github.com/openai/universe/tree/cc9ce6ec241821bfb0f3b85dd455bd36e4ee7a8c
  69. https://github.com/openai/universe/tree/master/doc
  70. https://github.com/openai/universe/commit/a5ea649ddcda587ad84e67c38a1228e6f193aada
  71. https://github.com/openai/universe/pull/135
  72. https://github.com/openai/universe/commit/a5ea649ddcda587ad84e67c38a1228e6f193aada
  73. https://github.com/openai/universe/tree/master/example
  74. https://github.com/openai/universe/commit/07c0ddea87a1bd9295bc3f79838eb63ea1e843bc
  75. https://github.com/openai/universe/tree/master/tests/functional
  76. https://github.com/openai/universe/tree/master/universe
  77. https://github.com/openai/universe/commit/f95a5fe2fdb5556a7d8dfc1c06dbe4d8ca6dc177
  78. https://github.com/openai/universe/pull/185
  79. https://github.com/openai/universe/commit/f95a5fe2fdb5556a7d8dfc1c06dbe4d8ca6dc177
  80. https://github.com/openai/universe/blob/master/.dockerignore
  81. https://github.com/openai/universe/commit/e2d71999855ed8612675e9f2c75e45e03715ddba
  82. https://github.com/openai/universe/blob/master/.gitignore
  83. https://github.com/openai/universe/blob/master/.travis.yml
  84. https://github.com/openai/universe/blob/master/code_of_conduct.rst
  85. https://github.com/openai/universe/blob/master/dockerfile
  86. https://github.com/openai/universe/blob/master/issue_template
  87. https://github.com/openai/universe/commit/f883bc622809cb1607342ec824e23c4f224382e5
  88. https://github.com/openai/universe/blob/master/license
  89. https://github.com/openai/universe/commit/a7944e65446a5484e5011f048558f312e907da61
  90. https://github.com/openai/universe/blob/master/makefile
  91. https://github.com/openai/universe/blob/master/readme.rst
  92. https://github.com/openai/universe/commit/cc9ce6ec241821bfb0f3b85dd455bd36e4ee7a8c
  93. https://github.com/openai/universe/blob/master/setup.py
  94. https://github.com/openai/universe/commit/32097695a36356eac0243b14bae591a6542547e9
  95. https://github.com/openai/universe/issues/171
  96. https://github.com/openai/universe/blob/master/test.dockerfile
  97. https://github.com/openai/universe/blob/master/tox.ini
  98. https://github.com/openai/retro
  99. https://blog.openai.com/retro-contest
 100. https://github.com/openai/universe# 
 101. https://openai.com/blog/universe/
 102. https://github.com/openai/gym
 103. https://openai.com/blog/universe/#help
 104. http://deepdrive.io/
 105. https://github.com/openai/universe#universe
 106. https://github.com/openai/universe#getting-started
 107. https://github.com/openai/universe#testing
 108. https://github.com/openai/universe#additional-documentation
 109. https://github.com/openai/universe#getting-help
 110. https://github.com/openai/universe#what-s-next
 111. https://github.com/openai/universe# 
 112. http://conda.pydata.org/docs/using/envs.html
 113. https://docs.docker.com/engine/installation/
 114. https://docs.docker.com/docker-for-mac/
 115. https://golang.org/doc/install
 116. https://github.com/openai/universe/blob/master/universe/envs/vnc_env.py
 117. https://github.com/openai/universe/blob/master/doc/remotes.rst
 118. https://en.wikipedia.org/wiki/virtual_network_computing
 119. https://github.com/openai/universe/blob/master/doc/protocols.rst
 120. https://docs.google.com/forms/d/e/1faipqlscaiw-kis0mz6hdzzfzjjflxlicdvqs1tx9xmekipnwjv5vla/viewform
 121. https://github.com/openai/universe/blob/master/doc/remotes.rst
 122. http://www.kongregate.com/games/longanimals/dusk-drive
 123. https://github.com/openai/universe/blob/master/doc/dusk-drive.png?raw=true
 124. https://github.com/openai/gym
 125. https://github.com/openai/universe/blob/master/universe/__init__.py
 126. https://github.com/openai/universe/blob/master/universe/__init__.py
 127. https://github.com/openai/universe/blob/master/universe/envs/vnc_env.py#l88
 128. https://github.com/openai/universe/blob/master/universe/wrappers/__init__.py#l42
 129. https://github.com/openai/universe/blob/master/doc/protocols.rst
 130. https://github.com/openai/universe/blob/master/doc/remotes.rst
 131. https://github.com/openai/universe/blob/master/doc/env_semantics.rst
 132. https://github.com/openai/universe/blob/master/universe/wrappers/__init__.py#l18
 133. https://github.com/openai/universe/blob/master/universe/wrappers/throttle.py
 134. https://github.com/openai/universe# 
 135. http://doc.pytest.org/en/latest/
 136. https://github.com/openai/universe# 
 137. https://github.com/openai/universe/blob/master/doc
 138. https://github.com/openai/universe# 
 139. https://github.com/openai/universe/blob/master/doc
 140. https://github.com/openai/universe/wiki/solutions-to-common-problems
 141. https://github.com/openai/universe/issues?utf8=   &q=is:issue
 142. https://discuss.openai.com/c/universe
 143. https://github.com/openai/universe# 
 144. https://github.com/openai/universe-starter-agent
 145. https://arxiv.org/abs/1602.01783
 146. https://github.com/openai/universe/blob/master/doc/remotes.rst
 147. https://docs.google.com/forms/d/e/1faipqlscaiw-kis0mz6hdzzfzjjflxlicdvqs1tx9xmekipnwjv5vla/viewform
 148. https://github.com/site/terms
 149. https://github.com/site/privacy
 150. https://github.com/security
 151. https://githubstatus.com/
 152. https://help.github.com/
 153. https://github.com/contact
 154. https://github.com/pricing
 155. https://developer.github.com/
 156. https://training.github.com/
 157. https://github.blog/
 158. https://github.com/about
 159. https://github.com/openai/universe
 160. https://github.com/openai/universe

   hidden links:
 162. https://github.com/
 163. https://github.com/openai/universe
 164. https://github.com/openai/universe
 165. https://github.com/openai/universe
 166. https://help.github.com/articles/which-remote-url-should-i-use
 167. https://github.com/openai/universe#universe
 168. https://github.com/openai/universe#getting-started
 169. https://github.com/openai/universe#installation
 170. https://github.com/openai/universe#supported-systems
 171. https://github.com/openai/universe#install-universe
 172. https://github.com/openai/universe#install-docker
 173. https://github.com/openai/universe#alternate-configuration---running-the-agent-in-docker
 174. https://github.com/openai/universe#notes-on-installation
 175. https://github.com/openai/universe#system-overview
 176. https://github.com/openai/universe#run-your-first-agent
 177. https://github.com/openai/universe#breaking-down-the-example
 178. https://github.com/openai/universe#testing
 179. https://github.com/openai/universe#additional-documentation
 180. https://github.com/openai/universe#getting-help
 181. https://github.com/openai/universe#whats-next
 182. https://github.com/openai/universe#changelog
 183. https://github.com/
