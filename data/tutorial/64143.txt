   #[1]publisher [2]medium [3]alternate

   [4]homepage
   [5]homepage
   [6]sign in[7]get started

   [8]codeburst
     * [9]learn web development
     * [10]web dev courses
     * [11]write for us
     __________________________________________________________________

algorithms i : searching and sorting algorithms

   [12]go to the profile of meet zaveri
   [13]meet zaveri (button) blockedunblock (button) followfollowing
   mar 10, 2018

   one of the seemingly most-overused words in tech is    algorithm   . from
   the apps on your phone to the sensors in your wearables and how posts
   appear in your facebook news feed, you   ll be pushed to find a service
   that isn   t powered by some form of algorithm. i am too fascinated how
   algorithms made an impact in our day-to-day lives

     an algorithm is a finite sequence of precise instructions for
     performing a computation or for solving a problem.

   for example, here is an algorithm for singing that annoying song    99
   bottles of beer on the wall   , for arbitrary values of 99:
   [1*gae7vtsiwfw5yaskwrj5aq.png]
      copyright 2014 jeff erickson
   [14]http://www.cs.uiuc.edu/~jeffe/teaching/algorithms/

   as donald knuth wrote in [15]the art of computer programming    which
   could be described as the encyclopedia of algorithms and data
   structures    it   s a confusing word that looks like someone mashed up
   logarithm and arithmetic.

properties of algorithms

    1. input -an algorithm has input values from a specified set.
    2. output -from each set of input values an algorithm produces output
       values from a specified set. the output values are the solution to
       the problem.
    3. definiteness -the steps of an algorithm must be defined precisely.
    4. correctness -an algorithm should produce the correct output values
       for each set of input values.
    5. finiteness -an algorithm should produce the desired output after a
       finite (but perhaps large) number of steps for any input in the
       set.
    6. effectiveness -it must be possible to perform each step of an
       algorithm exactly and in a finite amount of time.
    7. generality -the procedure should be applicable for all problems of
       the desired form, not just for a particular set of input values

   now before heading up to main topic, i want to share the basics of
   analysis of the algorithms including time complexity and space
   complexity.
     __________________________________________________________________

time complexity and space complexity in algorithms

   always a question arises -

     when does an algorithm provide a satisfactory solution to a problem?

     * one measure of efficiency is the time used by a computer to solve a
       problem using the algorithm, when input values are of a specified
       size
     * second measure is the amount of computer memory required to
       implement the algorithm when input values are of a specified size

   questions such as these involve the computational complexity of the
   algorithm. an analysis of the time required to solve a problem of a
   particular size involves the time complexity of the algorithm. an
   analysis of the computer memory required involves the space complexity
   of the algorithm.

   there are three types of time complexity         best, average and worst
   case.

   in simple words for an algorithm, if we could perform and get what we
   want in just one(eg. on first instance) computational approach, then
   that is said as o(1) i.e. time complexity here falls into    best case   
   category.

   say for example, same algorithm results into many iterations/recursions
   or say n times it had to perform to get the result, then the example
   used for this algorithm describes it   s worst case time complexity.

   below are some common time complexities with simple definitions. feel
   free to check out [16]wikipedia, though, for more in-depth definitions.
   [1*c1uke5kijvtn93jiqypjtq.png]
   [17]https://stackoverflow.com/questions/11032015/how-to-find-time-compl
   exity-of-an-algorithm

   simple example with code -

   iframe: [18]/media/b21136bb2049220fb24f93800f9f82a0?postid=56497dbaef20

   so scenario on time complexity for this above given example would be -
   [1*xkt30ytjgf4ykz9w6qsica.png]

asymptotic notations

   asymptotic notations are languages that allow us to analyze an
   algorithm   s running time by identifying its behavior as the input size
   for the algorithm increases. this is also known as an algorithm   s
   growth rate.

   the following 3 asymptotic notations are mostly used to represent time
   complexity of algorithms:

big oh (o)

   big oh is often used to describe the worst-case of an algorithm by
   taking the highest order of a polynomial function and ignoring all the
   constants value since they aren   t too influential for sufficiently
   large input.

big omega (  )

   big omega is the opposite of big oh, if big oh was used to describe the
   upper bound (worst-case) of a asymptotic function, big omega is used to
   describe the lower bound of a asymptotic function. in analysis
   algorithm, this notation is usually used to describe the complexity of
   an algorithm in the best-case, which means the algorithm will not be
   better than its best-case.

big theta (  )

   when an algorithm has a complexity with lower bound = upper bound, say
   that an algorithm has a complexity o(n log n) and   (n log n), it   s
   actually has the complexity   (n log n), which means the running time of
   that algorithm always falls in n log n in the best-case and worst-case.

   if you want to dive deep into time complexity, then refer [19]michael
   olorunnisola    s article:
   [20]algorithms in plain english: time complexity and big-o notation
   every good developer has time on their mind. they want to give their
   users more of it, so they can do all those
   things   medium.freecodecamp.org

   or look at [21]shilpa jain    s article    
   [22]the ultimate beginners guide to analysis of algorithm
   the other day, i came across a post on stackoverflow which read    is
   theoretical computer science(tcs) useful?   . i was   codeburst.io

space complexity

   space complexity deals with finding out how much (extra)space would be
   required by the algorithm with change in the input size. for e.g. it
   considers criteria of a data structure used in algorithm as array or
   linked list.

   how to calculate space complexity of an
   algorithm         [23]https://www.quora.com/how-do-we-calculate-space-time-co
   mplexity-of-an-algorithm
     __________________________________________________________________

   i   ll cover up at least 2 practically used algorithms in each category
   based on searching and sorting. i had written pseudocode and
   explanation in my personal notes(images here).

searching algorithms

   search algorithms form an important part of many programs. some
   searches involve looking for an entry in a database, such as looking up
   your record in the irs database. other search algorithms trawl through
   a virtual space, such as those hunting for the best chess moves.
   although programmers can choose from numerous search types, they select
   the algorithm that best matches the size and structure of the database
   to provide a user-friendly experience.

   the general searching problem can be described as follows: locate an
   element x in a list of distinct elements a1,a2,...an or determine that
   it is not in the list. the solution to this search problem is the
   location of the term in the list that equals x and is 0 if x is not in
   the list.

linear search

   the linear search is the algorithm of choice for short lists, because
   it   s simple and requires minimal code to implement. the linear search
   algorithm looks at the first list item to see whether you are searching
   for it and, if so, you are finished. if not, it looks at the next item
   and on through each entry in the list.

how does it work ?

   linear search is the basic search algorithm used in data structures. it
   is also called as sequential search. linear search is used to find a
   particular element in an array. it is not compulsory to arrange an
   array in any order (ascending or descending) as in the case of binary
   search.

into linear search

   given a sample array as shown in figure and value we want to search for
   is 7, then it   ll traverse in linear way.
   [1*0sem4j4ixhvnytqfvuccha.jpeg]
   p.s. my handwriting could be sometimes unreadable

pseudocode

   here is the pseudocode as divided into two images -
   [1*_ij-wipejtgjir0pvnkzva.jpeg]
   [1*lp4m3iehztbqyllaysxf_q.jpeg]

   linear search is rarely used practically because other search
   algorithms such as the binary search algorithm and hash tables allow
   significantly faster searching comparison to linear search.

time complexity

   the time complexity of above algorithm is o(n).

   simple code in python -

   iframe: [24]/media/fdfafe40cf13316167b83de4780b533e?postid=56497dbaef20
     __________________________________________________________________

binary search

   binary search is one of the most fundamental and useful algorithms in
   computer science. it describes the process of searching for a specific
   value in an ordered collection.

   binary search is a popular algorithm for large databases with records
   ordered by numerical key. example candidates include the irs database
   keyed by social security number and the dmv records keyed by driver   s
   license numbers. the algorithm starts at the middle of the
   database         if your target number is greater than the middle number, the
   search will continue with the upper half of the database. if your
   target number is smaller than the middle number, the search will
   continue with the lower half of the database. it keeps repeating this
   process, cutting the database in half each time until it finds the
   record. this search is more complicated than the linear search but for
   large databases it   s much faster than a linear search.

     this algorithm can be used when the list has terms occurring in
     order of increasing size

   binary search is generally composed of 3 main sections:
    1. pre-processing         sort if collection is unsorted.
    2. binary search         using a loop or recursion to divide search space in
       half after each comparison.
    3. post-processing         determine viable candidates in the remaining
       space.

how does it work ?

   in its simplest form, binary search operates on a contiguous sequence
   with a specified left and right index. this is called the search space.
   binary search maintains the left, right, and middle indices of the
   search space and compares the search target or applies the search
   condition to the middle value of the collection; if the condition is
   unsatisfied or values unequal, the half in which the target cannot lie
   is eliminated and the search continues on the remaining half until it
   is successful. if the search ends with an empty half, the condition
   cannot be fulfilled and target is not found.

into binary search

   given a sample array, first we find out midpoint and split it out. if
   midpoint is the search value, then it   s game over. so o(1) time
   complexity is achieved.

   but if it   s not the midpoint   s value, then we have to go on an
   enchanted search for the value in divided halves. because of this, now
   we can achieve time complexity in order of log(n) or n i.e. o(logn) or
   o(n).
   [1*k4jhchbbh1wddxfgn0jegg.jpeg]

   you can see here in above example that 19 was found after so much of
   divisions of a single array(lists in python).

pseudocode

   there are two pesudocodes possible for this algorithm. 1. iterative 2.
   recursive.

   you can find difference between iteration and recursion as part of
   debates in [25]reddit or [26]stackoverflow .
   [1*cgll3g_wxcfqpkidbwhukw.jpeg]
   [1*bhjuojbboksgr1ovk8pb6q.jpeg]

time complexity

   the time complexity of binary search can be written as
t(n) = t(n/2) + c

   binary search implementation in python -

   iframe: [27]/media/5b1a434544369a8f39f26bb6ed0f662a?postid=56497dbaef20
     __________________________________________________________________

sorting algorithms

   ordering the elements of a list is a problem that occurs in many
   contexts. for example, to produce a telephone directory it is necessary
   to alphabetize the names of subscribers. similarly, producing a
   directory of songs available for downloading requires that their titles
   be put in alphabetic order.

   putting addresses in order in an e-mail mailing list can determine
   whether there are duplicated addresses. creating a useful dictionary
   requires that words be put in alphabetical order. similarly, generating
   a parts list requires that we order them according to increasing part
   number.

   the art of computer programming, donald knuth devotes close to 400
   pages to sorting, covering around 15 different sorting algorithms in
   depth! more than 100 sorting algorithms have been devised, and it is
   surprising how often new sorting algorithms are developed.

bubble sort

   bubble sort algorithm starts by comparing the first two elements of an
   array and swapping if necessary, i.e., if you want to sort the elements
   of array in ascending order and if the first element is greater than
   second then, you need to swap the elements but, if the first element is
   smaller than second, you mustn   t swap the element. then, again second
   and third elements are compared and swapped if it is necessary and this
   process go on until last and second last element is compared and
   swapped. this completes the first step of bubble sort.

   to carry out the bubble sort, we perform the basic operation, that is,
   interchanging a larger element with a smaller one following it,
   starting at the beginning of the list, for a full pass. we iterate this
   procedure until the sort is complete.

   it is one of the most inefficient [28]sorting algorithms because of how
   simple it is. while asymptotically equivalent to the other algorithms,
   it will require o(n  ) swaps in the worst-case.
   [1*4cxoao4nxzmswvhrdf2m3w.jpeg]

pseudocode (source         wikipedia)

   suppose a is an array size n
swapped = true
      while swapped
        swapped = false
        for j from 0 to n - 1
           if a[j] > a[j + 1]
              swap( a[j], a[j + 1] )
              swapped = true

time complexity

     * worst and average case time complexity: o(n*n). worst case occurs
       when array is reverse sorted.
     * best case time complexity: o(n). best case occurs when array is
       already sorted.
     __________________________________________________________________

insertion sort

   insertion sort is a simple [29]sorting algorithm that builds the final
   [30]sorted array (or list) one item at a time. it is much less
   efficient on large lists than more advanced algorithms such as
   [31]quicksort, [32]heapsort, or [33]merge sort. however, insertion sort
   provides several advantages:

how it works

   to sort a list with n elements, the insertion sort begins with the
   second element. the insertion sort compares this second element with
   the first element and inserts it before the first element if it does
   not exceed the first element and after the first element if it exceeds
   the first element. at this point, the first two elements are in the
   correct order. the third element is then compared with the first
   element, and if it is larger than the first element, it is compared
   with the second element; it is inserted into the correct position among
   the first three elements.

into insertion sort

   [1*ycltyiz3v5w-zjx2i2tbdq.jpeg]

pseudocode

   [1*wbzxva-sr8asaskd9ivgkw.png]

   time complexity: o(n*n)

   auxiliary space: o(1)

   boundary cases: insertion sort takes maximum time to sort if elements
   are sorted in reverse order. and it takes minimum time (order of n)
   when elements are already sorted.

   uses: insertion sort is used when number of elements is small. it can
   also be useful when input array is almost sorted, only few elements are
   misplaced in complete big array.

   implementation of insertion sort in python -

   iframe: [34]/media/fdb8ee96d1187844708de830bf3e351a?postid=56497dbaef20
     __________________________________________________________________

conclusion

   so, these were some basic algorithms that will provide a glimpse before
   diving deep into advanced and complex algorithms. as i titled it    i   
   part, i think i   ll be making part 2 covering more greedy and dynamic
   algorithms in future.

   also if i have been missing some topic to cover or maybe fault in my
   notes please put suggestions in comment.

   thank you for spending your time to read this article. keep coding !
   [1*bmjd0uhnblld02s7wvyv3q.jpeg]
          for cs

   [35]https://cdn.dribbble.com/users/571755/screenshots/3516921/big-data.
   jpg

   resources :
     * [36]http://blog.thefirehoseproject.com
     * [37]rosen   s discrete mathematics and its application
     * [38]geeksforgeeks
     * [39]techwalla
     * [40]blogs.msdn.microsoft.com

   [41][1*i3hpoj27ltt0zpn5tquhzg.png]

            subscribe to codeburst   s once-weekly [42]email blast,      follow
     codeburst on [43]twitter, view         [44]the 2018 web developer
     roadmap, and         [45]learn full stack web development.

     * [46]algorithms
     * [47]data science
     * [48]machine learning
     * [49]web development
     * [50]python

   (button)
   (button)
   (button) 2.6k claps
   (button) (button) (button) 5 (button) (button)

     (button) blockedunblock (button) followfollowing
   [51]go to the profile of meet zaveri

[52]meet zaveri

   software engineer, oss enthusiast and avid thinker. passionate about
   javascript and react ecosystem. future interests - web assembly, ai and
   blockchain.

     (button) follow
   [53]codeburst

[54]codeburst

   bursts of code to power through your day. web development articles,
   tutorials, and news.

     * (button)
       (button) 2.6k
     * (button)
     *
     *

   [55]codeburst
   never miss a story from codeburst, when you sign up for medium.
   [56]learn more
   never miss a story from codeburst
   (button) get updatesget updates

references

   visible links
   1. https://plus.google.com/103654360130207659246
   2. https://codeburst.io/osd.xml
   3. android-app://com.medium.reader/https/medium.com/p/56497dbaef20
   4. https://medium.com/
   5. https://medium.com/
   6. https://medium.com/m/signin?redirect=https://codeburst.io/algorithms-i-searching-and-sorting-algorithms-56497dbaef20&source=--------------------------nav_reg&operation=login
   7. https://medium.com/m/signin?redirect=https://codeburst.io/algorithms-i-searching-and-sorting-algorithms-56497dbaef20&source=--------------------------nav_reg&operation=register
   8. https://codeburst.io/?source=logo-lo_v7xjdosj7t7j---61061eb0c96b
   9. https://codeburst.io/the-ultimate-guide-to-learning-full-stack-web-development-in-6-months-for-30-72b3854a7458
  10. https://codeburst.io/best-udemy-courses-for-learning-full-stack-web-development-45e2bd3ec28b
  11. https://codeburst.io/how-to-write-for-codeburst-io-63fec4bf111c
  12. https://codeburst.io/@meetzaveri?source=post_header_lockup
  13. https://codeburst.io/@meetzaveri
  14. http://www.cs.uiuc.edu/~jeffe/teaching/algorithms/
  15. https://en.wikipedia.org/wiki/the_art_of_computer_programming
  16. https://en.wikipedia.org/wiki/time_complexity
  17. https://stackoverflow.com/questions/11032015/how-to-find-time-complexity-of-an-algorithm
  18. https://codeburst.io/media/b21136bb2049220fb24f93800f9f82a0?postid=56497dbaef20
  19. https://medium.com/@michaelolo
  20. https://medium.freecodecamp.org/time-is-complex-but-priceless-f0abd015063c
  21. https://medium.com/@jainshilpa1993
  22. https://codeburst.io/the-ultimate-beginners-guide-to-analysis-of-algorithm-b8d32aa909c5
  23. https://www.quora.com/how-do-we-calculate-space-time-complexity-of-an-algorithm
  24. https://codeburst.io/media/fdfafe40cf13316167b83de4780b533e?postid=56497dbaef20
  25. https://www.reddit.com/r/learnprogramming/comments/2u49q3/recursion_vs_iteration/
  26. https://stackoverflow.com/questions/72209/recursion-or-iteration
  27. https://codeburst.io/media/5b1a434544369a8f39f26bb6ed0f662a?postid=56497dbaef20
  28. http://www.algorithmist.com/index.php/sorting
  29. https://en.wikipedia.org/wiki/sorting_algorithm
  30. https://en.wikipedia.org/wiki/sorted_array
  31. https://en.wikipedia.org/wiki/quicksort
  32. https://en.wikipedia.org/wiki/heapsort
  33. https://en.wikipedia.org/wiki/merge_sort
  34. https://codeburst.io/media/fdb8ee96d1187844708de830bf3e351a?postid=56497dbaef20
  35. https://cdn.dribbble.com/users/571755/screenshots/3516921/big-data.jpg
  36. http://blog.thefirehoseproject.com/posts/what-is-an-algorithm/
  37. https://www.flipkart.com/discrete-mathematics-its-applications-combinatorics-graph-theory-7th/p/itmdwxxszhczjrnf
  38. https://www.geeksforgeeks.org/
  39. https://www.techwalla.com/articles/types-of-search-algorithms
  40. https://blogs.msdn.microsoft.com/
  41. http://bit.ly/codeburst
  42. http://bit.ly/codeburst-email
  43. http://bit.ly/codeburst-twitter
  44. http://bit.ly/2018-web-dev-roadmap
  45. http://bit.ly/learn-web-dev-codeburst
  46. https://codeburst.io/tagged/algorithms?source=post
  47. https://codeburst.io/tagged/data-science?source=post
  48. https://codeburst.io/tagged/machine-learning?source=post
  49. https://codeburst.io/tagged/web-development?source=post
  50. https://codeburst.io/tagged/python?source=post
  51. https://codeburst.io/@meetzaveri?source=footer_card
  52. https://codeburst.io/@meetzaveri
  53. https://codeburst.io/?source=footer_card
  54. https://codeburst.io/?source=footer_card
  55. https://codeburst.io/
  56. https://medium.com/@medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg

   hidden links:
  58. https://medium.freecodecamp.org/time-is-complex-but-priceless-f0abd015063c
  59. https://codeburst.io/the-ultimate-beginners-guide-to-analysis-of-algorithm-b8d32aa909c5
  60. https://medium.com/p/56497dbaef20/share/twitter
  61. https://medium.com/p/56497dbaef20/share/facebook
  62. https://medium.com/p/56497dbaef20/share/twitter
  63. https://medium.com/p/56497dbaef20/share/facebook
